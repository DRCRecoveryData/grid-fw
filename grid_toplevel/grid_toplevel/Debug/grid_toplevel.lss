
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f6c4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005ac  20000000  0000f6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205ac  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205ac  2**0
                  CONTENTS
  4 .bss          00007c70  200005b0  0000fc80  000205b0  2**4
                  ALLOC
  5 .stack        00010000  20008220  000178f0  000205b0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205ac  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205da  2**0
                  CONTENTS, READONLY
  8 .debug_info   00097834  00000000  00000000  00020633  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c480  00000000  00000000  000b7e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002f09c  00000000  00000000  000c42e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023a8  00000000  00000000  000f3383  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003358  00000000  00000000  000f572b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004a5dd  00000000  00000000  000f8a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000430b7  00000000  00000000  00143060  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011d2a3  00000000  00000000  00186117  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006a38  00000000  00000000  002a33bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 82 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00      .. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	61 83 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     a...............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 6d 7f 00 00 81 7f 00 00     ........m.......
      bc:	61 7b 00 00 6d 7b 00 00 79 7b 00 00 85 7b 00 00     a{..m{..y{...{..
      cc:	91 7b 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .{..............
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	95 81 00 00 7d 8e 00 00 91 8e 00 00 a5 8e 00 00     ....}...........
     104:	b9 8e 00 00 cd 8e 00 00 e1 8e 00 00 f5 8e 00 00     ................
     114:	09 8f 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 1d 8f 00 00 31 8f 00 00 45 8f 00 00     ........1...E...
     134:	59 8f 00 00 6d 8f 00 00 81 8f 00 00 95 8f 00 00     Y...m...........
     144:	a9 8f 00 00 bd 8f 00 00 d1 8f 00 00 e5 8f 00 00     ................
     154:	f9 8f 00 00 0d 90 00 00 21 90 00 00 35 90 00 00     ........!...5...
     164:	49 90 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     I...............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 65 af 00 00     ............e...
     184:	71 af 00 00 7d af 00 00 89 af 00 00 00 00 00 00     q...}...........
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 6d 9c 00 00 81 9c 00 00     ........m.......
     1f4:	95 9c 00 00 a9 9c 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 f5 77 00 00 09 78 00 00 1d 78 00 00     .....w...x...x..
     224:	31 78 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     1x..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005b0 	.word	0x200005b0
     280:	00000000 	.word	0x00000000
     284:	0000f6c4 	.word	0x0000f6c4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f6c4 	.word	0x0000f6c4
     2c4:	200005b4 	.word	0x200005b4
     2c8:	0000f6c4 	.word	0x0000f6c4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000cbf9 	.word	0x0000cbf9
     2e8:	0000b761 	.word	0x0000b761

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000f6c4 	.word	0x0000f6c4
     36c:	200005ac 	.word	0x200005ac
     370:	20008220 	.word	0x20008220
     374:	200005b0 	.word	0x200005b0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000d3d9 	.word	0x0000d3d9
     384:	0000b209 	.word	0x0000b209

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005cc 	.word	0x200005cc
     408:	20001050 	.word	0x20001050
     40c:	2000114c 	.word	0x2000114c
     410:	43001c00 	.word	0x43001c00
     414:	00005959 	.word	0x00005959
     418:	000059fd 	.word	0x000059fd
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005cc 	.word	0x200005cc
     4ac:	20001224 	.word	0x20001224
     4b0:	20000fec 	.word	0x20000fec
     4b4:	43002000 	.word	0x43002000
     4b8:	00005959 	.word	0x00005959
     4bc:	000059fd 	.word	0x000059fd
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000fe8 	.word	0x20000fe8
     4e8:	00005c99 	.word	0x00005c99

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	00005d1d 	.word	0x00005d1d

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000fcc 	.word	0x20000fcc
     54c:	00005d75 	.word	0x00005d75

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001290 	.word	0x20001290
     718:	00006129 	.word	0x00006129
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	200005f4 	.word	0x200005f4
     7b4:	40003000 	.word	0x40003000
     7b8:	2000107c 	.word	0x2000107c
     7bc:	00006a09 	.word	0x00006a09
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000604 	.word	0x20000604
     858:	40003400 	.word	0x40003400
     85c:	200010d0 	.word	0x200010d0
     860:	00006a09 	.word	0x00006a09
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	20001044 	.word	0x20001044
     8f8:	00006c91 	.word	0x00006c91
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000f44 	.word	0x20000f44
     a04:	00006319 	.word	0x00006319
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000614 	.word	0x20000614
     aa4:	20001184 	.word	0x20001184
     aa8:	00006a09 	.word	0x00006a09
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	20001004 	.word	0x20001004
     b54:	0000605d 	.word	0x0000605d
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000624 	.word	0x20000624
     bf0:	43000800 	.word	0x43000800
     bf4:	200011d4 	.word	0x200011d4
     bf8:	00006a09 	.word	0x00006a09
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001120 	.word	0x20001120
     cfc:	0000657d 	.word	0x0000657d
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	00005cc9 	.word	0x00005cc9

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	00006f59 	.word	0x00006f59
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000e8a8 	.word	0x0000e8a8
     e14:	000072b1 	.word	0x000072b1
     e18:	200010cc 	.word	0x200010cc
     e1c:	40002000 	.word	0x40002000
     e20:	0000af95 	.word	0x0000af95

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	00007875 	.word	0x00007875
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	00008359 	.word	0x00008359
    1100:	40002400 	.word	0x40002400
    1104:	20000f8c 	.word	0x20000f8c
    1108:	00006725 	.word	0x00006725
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	00009c65 	.word	0x00009c65
    1134:	40003800 	.word	0x40003800
    1138:	20001270 	.word	0x20001270
    113c:	40003c00 	.word	0x40003c00
    1140:	20001164 	.word	0x20001164
    1144:	4101a000 	.word	0x4101a000
    1148:	20000fac 	.word	0x20000fac
    114c:	4101c000 	.word	0x4101c000
    1150:	20001250 	.word	0x20001250
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_d51_init>:
	
}



void grid_d51_init(){
    1160:	b538      	push	{r3, r4, r5, lr}
	
	uint32_t hwid = grid_sys_get_hwcfg();
    1162:	4b08      	ldr	r3, [pc, #32]	; (1184 <grid_d51_init+0x24>)
    1164:	4798      	blx	r3
	
	printf("{\"type\":\"HWCFG\", \"data\": \"%d\"}\r\n", hwid);
    1166:	4601      	mov	r1, r0
    1168:	4807      	ldr	r0, [pc, #28]	; (1188 <grid_d51_init+0x28>)
    116a:	4c08      	ldr	r4, [pc, #32]	; (118c <grid_d51_init+0x2c>)
    116c:	47a0      	blx	r4
	
	#ifdef NDEBUG		
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "USER ROW CHECK!");
	grid_d51_verify_user_row();
	#else
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "NO USER ROW CHECK!");
    116e:	4d08      	ldr	r5, [pc, #32]	; (1190 <grid_d51_init+0x30>)
    1170:	4908      	ldr	r1, [pc, #32]	; (1194 <grid_d51_init+0x34>)
    1172:	4628      	mov	r0, r5
    1174:	47a0      	blx	r4
	{
	}
	
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    1176:	4908      	ldr	r1, [pc, #32]	; (1198 <grid_d51_init+0x38>)
    1178:	4628      	mov	r0, r5
    117a:	47a0      	blx	r4
	while (1)
	{
	}
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    117c:	4907      	ldr	r1, [pc, #28]	; (119c <grid_d51_init+0x3c>)
    117e:	4628      	mov	r0, r5
    1180:	47a0      	blx	r4
    1182:	bd38      	pop	{r3, r4, r5, pc}
    1184:	00004b21 	.word	0x00004b21
    1188:	0000e8c4 	.word	0x0000e8c4
    118c:	0000d5b1 	.word	0x0000d5b1
    1190:	0000e8fc 	.word	0x0000e8fc
    1194:	0000e8e8 	.word	0x0000e8e8
    1198:	0000e924 	.word	0x0000e924
    119c:	0000e934 	.word	0x0000e934

000011a0 <grid_nvm_clear_read_buffer>:
	grid_nvm_clear_read_buffer(mod);
	grid_nvm_clear_write_buffer(mod);

}

void grid_nvm_clear_read_buffer(struct grid_nvm_model* mod){
    11a0:	f100 0308 	add.w	r3, r0, #8
    11a4:	f500 7102 	add.w	r1, r0, #520	; 0x208
	
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
		
		mod->read_buffer[i] = 0;
    11a8:	2200      	movs	r2, #0
    11aa:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    11ae:	428b      	cmp	r3, r1
    11b0:	d1fb      	bne.n	11aa <grid_nvm_clear_read_buffer+0xa>
		
	}

	mod->read_buffer_status = GRID_NVM_BUFFER_STATUS_EMPTY;
    11b2:	2302      	movs	r3, #2
    11b4:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
	mod->read_buffer_length = 0;
    11b8:	2300      	movs	r3, #0
    11ba:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	mod->read_source_address = -1;
    11be:	f04f 33ff 	mov.w	r3, #4294967295
    11c2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    11c6:	4770      	bx	lr

000011c8 <grid_nvm_clear_write_buffer>:
	
}

void grid_nvm_clear_write_buffer(struct grid_nvm_model* mod){
    11c8:	f200 2317 	addw	r3, r0, #535	; 0x217
    11cc:	f200 4117 	addw	r1, r0, #1047	; 0x417
	
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
		
		mod->write_buffer[i] = 0;
    11d0:	2200      	movs	r2, #0
    11d2:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    11d6:	428b      	cmp	r3, r1
    11d8:	d1fb      	bne.n	11d2 <grid_nvm_clear_write_buffer+0xa>
		
	}
	
	mod->write_buffer_status = GRID_NVM_BUFFER_STATUS_EMPTY;
    11da:	2302      	movs	r3, #2
    11dc:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
	mod->write_buffer_length = 0;
    11e0:	2300      	movs	r3, #0
    11e2:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418
	mod->write_target_address = -1;
    11e6:	f04f 33ff 	mov.w	r3, #4294967295
    11ea:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
    11ee:	4770      	bx	lr

000011f0 <grid_nvm_init>:
void grid_nvm_init(struct grid_nvm_model* mod, struct flash_descriptor* flash_instance){
    11f0:	b510      	push	{r4, lr}
    11f2:	4604      	mov	r4, r0
	mod->bank_settings_page_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    11f4:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
    11f8:	6043      	str	r3, [r0, #4]
	mod->flash = flash_instance;
    11fa:	6001      	str	r1, [r0, #0]
	mod->status = 1;
    11fc:	2301      	movs	r3, #1
    11fe:	7203      	strb	r3, [r0, #8]
	mod->read_buffer_status = GRID_NVM_BUFFER_STATUS_UNINITIALIZED;
    1200:	2300      	movs	r3, #0
    1202:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
	mod->write_buffer_status = GRID_NVM_BUFFER_STATUS_UNINITIALIZED;
    1206:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
	grid_nvm_clear_read_buffer(mod);
    120a:	4b03      	ldr	r3, [pc, #12]	; (1218 <grid_nvm_init+0x28>)
    120c:	4798      	blx	r3
	grid_nvm_clear_write_buffer(mod);
    120e:	4620      	mov	r0, r4
    1210:	4b02      	ldr	r3, [pc, #8]	; (121c <grid_nvm_init+0x2c>)
    1212:	4798      	blx	r3
    1214:	bd10      	pop	{r4, pc}
    1216:	bf00      	nop
    1218:	000011a1 	.word	0x000011a1
    121c:	000011c9 	.word	0x000011c9

00001220 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    1220:	b538      	push	{r3, r4, r5, lr}
    1222:	4604      	mov	r4, r0
    1224:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    1226:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    1228:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    122a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    122c:	2300      	movs	r3, #0
    122e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    1230:	0048      	lsls	r0, r1, #1
    1232:	4b09      	ldr	r3, [pc, #36]	; (1258 <grid_ain_channel_init+0x38>)
    1234:	4798      	blx	r3
    1236:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1238:	b14d      	cbz	r5, 124e <grid_ain_channel_init+0x2e>
    123a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    123c:	4619      	mov	r1, r3
    123e:	6822      	ldr	r2, [r4, #0]
    1240:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1244:	3301      	adds	r3, #1
    1246:	b2db      	uxtb	r3, r3
    1248:	7922      	ldrb	r2, [r4, #4]
    124a:	429a      	cmp	r2, r3
    124c:	d8f7      	bhi.n	123e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    124e:	2000      	movs	r0, #0
    1250:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    1252:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    1254:	bd38      	pop	{r3, r4, r5, pc}
    1256:	bf00      	nop
    1258:	0000d421 	.word	0x0000d421

0000125c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    125c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1260:	4605      	mov	r5, r0
    1262:	4689      	mov	r9, r1
    1264:	4617      	mov	r7, r2
    1266:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    1268:	0100      	lsls	r0, r0, #4
    126a:	4b0c      	ldr	r3, [pc, #48]	; (129c <grid_ain_init+0x40>)
    126c:	4798      	blx	r3
    126e:	4b0c      	ldr	r3, [pc, #48]	; (12a0 <grid_ain_init+0x44>)
    1270:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    1272:	b185      	cbz	r5, 1296 <grid_ain_init+0x3a>
    1274:	3d01      	subs	r5, #1
    1276:	b2ed      	uxtb	r5, r5
    1278:	3501      	adds	r5, #1
    127a:	012d      	lsls	r5, r5, #4
    127c:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    127e:	469a      	mov	sl, r3
    1280:	4e08      	ldr	r6, [pc, #32]	; (12a4 <grid_ain_init+0x48>)
    1282:	4643      	mov	r3, r8
    1284:	463a      	mov	r2, r7
    1286:	4649      	mov	r1, r9
    1288:	f8da 0000 	ldr.w	r0, [sl]
    128c:	4420      	add	r0, r4
    128e:	47b0      	blx	r6
    1290:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    1292:	42ac      	cmp	r4, r5
    1294:	d1f5      	bne.n	1282 <grid_ain_init+0x26>
	}

	return 0;
}
    1296:	2000      	movs	r0, #0
    1298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    129c:	0000d421 	.word	0x0000d421
    12a0:	200022c8 	.word	0x200022c8
    12a4:	00001221 	.word	0x00001221

000012a8 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    12a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    12ac:	0100      	lsls	r0, r0, #4
    12ae:	4b3c      	ldr	r3, [pc, #240]	; (13a0 <grid_ain_add_sample+0xf8>)
    12b0:	f8d3 a000 	ldr.w	sl, [r3]
    12b4:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    12b8:	f89c 6004 	ldrb.w	r6, [ip, #4]
    12bc:	2e00      	cmp	r6, #0
    12be:	d05b      	beq.n	1378 <grid_ain_add_sample+0xd0>
    12c0:	f85a 5000 	ldr.w	r5, [sl, r0]
    12c4:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    12c6:	2200      	movs	r2, #0
    12c8:	4690      	mov	r8, r2
    12ca:	4691      	mov	r9, r2
    12cc:	4696      	mov	lr, r2
    12ce:	f64f 77ff 	movw	r7, #65535	; 0xffff
    12d2:	4614      	mov	r4, r2
    12d4:	fa5f fb82 	uxtb.w	fp, r2
    12d8:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    12dc:	441c      	add	r4, r3
		
		if (current > maximum){
    12de:	4573      	cmp	r3, lr
    12e0:	bf84      	itt	hi
    12e2:	46d8      	movhi	r8, fp
			maximum = current;
    12e4:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    12e6:	42bb      	cmp	r3, r7
    12e8:	bf3c      	itt	cc
    12ea:	46d9      	movcc	r9, fp
			minimum = current;
    12ec:	461f      	movcc	r7, r3
    12ee:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    12f0:	b2d3      	uxtb	r3, r2
    12f2:	42b3      	cmp	r3, r6
    12f4:	d3ee      	bcc.n	12d4 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    12f6:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    12fa:	b2b6      	uxth	r6, r6
    12fc:	428e      	cmp	r6, r1
    12fe:	d23f      	bcs.n	1380 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1300:	f85a 3000 	ldr.w	r3, [sl, r0]
    1304:	440c      	add	r4, r1
    1306:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    130a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    130c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1310:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1314:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1318:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    131c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1320:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    1322:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1326:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1328:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    132a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    132c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    1330:	b29b      	uxth	r3, r3
    1332:	408b      	lsls	r3, r1
    1334:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    1336:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    133a:	1b92      	subs	r2, r2, r6
    133c:	2a00      	cmp	r2, #0
    133e:	bfb8      	it	lt
    1340:	4252      	neglt	r2, r2
    1342:	2601      	movs	r6, #1
    1344:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1348:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    134c:	42be      	cmp	r6, r7
    134e:	d020      	beq.n	1392 <grid_ain_add_sample+0xea>
    1350:	4282      	cmp	r2, r0
    1352:	dc08      	bgt.n	1366 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    1354:	2201      	movs	r2, #1
    1356:	fa02 f505 	lsl.w	r5, r2, r5
    135a:	fa02 f101 	lsl.w	r1, r2, r1
    135e:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1360:	428f      	cmp	r7, r1
    1362:	d000      	beq.n	1366 <grid_ain_add_sample+0xbe>
    1364:	b9c7      	cbnz	r7, 1398 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    1366:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    136a:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    136e:	2001      	movs	r0, #1
    1370:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    1374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    1378:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    137a:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    137c:	2400      	movs	r4, #0
    137e:	e7ba      	b.n	12f6 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    1380:	f85a 3000 	ldr.w	r3, [sl, r0]
    1384:	440c      	add	r4, r1
    1386:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    138a:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    138c:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    1390:	e7be      	b.n	1310 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    1392:	2000      	movs	r0, #0
    1394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1398:	2000      	movs	r0, #0
	}
	
}
    139a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    139e:	bf00      	nop
    13a0:	200022c8 	.word	0x200022c8

000013a4 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    13a4:	4b02      	ldr	r3, [pc, #8]	; (13b0 <grid_ain_get_changed+0xc>)
    13a6:	681b      	ldr	r3, [r3, #0]
    13a8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    13ac:	7b00      	ldrb	r0, [r0, #12]
    13ae:	4770      	bx	lr
    13b0:	200022c8 	.word	0x200022c8

000013b4 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    13b4:	4b09      	ldr	r3, [pc, #36]	; (13dc <grid_ain_get_average+0x28>)
    13b6:	681b      	ldr	r3, [r3, #0]
    13b8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    13bc:	2300      	movs	r3, #0
    13be:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    13c0:	1fcb      	subs	r3, r1, #7
    13c2:	b2db      	uxtb	r3, r3
    13c4:	2b07      	cmp	r3, #7
    13c6:	d806      	bhi.n	13d6 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    13c8:	8903      	ldrh	r3, [r0, #8]
    13ca:	7940      	ldrb	r0, [r0, #5]
    13cc:	1a40      	subs	r0, r0, r1
    13ce:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    13d2:	b280      	uxth	r0, r0
    13d4:	4770      	bx	lr
    13d6:	2000      	movs	r0, #0
    13d8:	e7fb      	b.n	13d2 <grid_ain_get_average+0x1e>
    13da:	bf00      	nop
    13dc:	200022c8 	.word	0x200022c8

000013e0 <grid_port_reset_receiver>:
#include "grid_buf.h"

// PORTS


void grid_port_reset_receiver(struct grid_port* por){
    13e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13e2:	4604      	mov	r4, r0
	
	usart_async_disable(por->usart);
    13e4:	6840      	ldr	r0, [r0, #4]
    13e6:	4b1e      	ldr	r3, [pc, #120]	; (1460 <grid_port_reset_receiver+0x80>)
    13e8:	4798      	blx	r3
	
	por->rx_double_buffer_seek_start_index = 0;
    13ea:	2500      	movs	r5, #0
    13ec:	6265      	str	r5, [r4, #36]	; 0x24
	por->rx_double_buffer_read_start_index = 0;
    13ee:	62a5      	str	r5, [r4, #40]	; 0x28
	por->partner_status = 0;
    13f0:	f241 031b 	movw	r3, #4123	; 0x101b
    13f4:	54e5      	strb	r5, [r4, r3]
	
	
	por->ping_partner_token = 255;
    13f6:	22ff      	movs	r2, #255	; 0xff
    13f8:	f241 0302 	movw	r3, #4098	; 0x1002
    13fc:	54e2      	strb	r2, [r4, r3]
	por->ping_local_token = 255;
    13fe:	f241 0701 	movw	r7, #4097	; 0x1001
    1402:	55e2      	strb	r2, [r4, r7]
	
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    1404:	2102      	movs	r1, #2
    1406:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
    140a:	300b      	adds	r0, #11
    140c:	4e15      	ldr	r6, [pc, #84]	; (1464 <grid_port_reset_receiver+0x84>)
    140e:	47b0      	blx	r6
	grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    1410:	5de2      	ldrb	r2, [r4, r7]
    1412:	2102      	movs	r1, #2
    1414:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
    1418:	3009      	adds	r0, #9
    141a:	47b0      	blx	r6
	grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_checksum_calculate(por->ping_packet, por->ping_packet_length));
    141c:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    1420:	3603      	adds	r6, #3
    1422:	f241 0317 	movw	r3, #4119	; 0x1017
    1426:	5ce7      	ldrb	r7, [r4, r3]
    1428:	4639      	mov	r1, r7
    142a:	4630      	mov	r0, r6
    142c:	4b0e      	ldr	r3, [pc, #56]	; (1468 <grid_port_reset_receiver+0x88>)
    142e:	4798      	blx	r3
    1430:	4602      	mov	r2, r0
    1432:	4639      	mov	r1, r7
    1434:	4630      	mov	r0, r6
    1436:	4b0d      	ldr	r3, [pc, #52]	; (146c <grid_port_reset_receiver+0x8c>)
    1438:	4798      	blx	r3


	
	por->rx_double_buffer_timeout = 0;
    143a:	61e5      	str	r5, [r4, #28]
	grid_sys_port_reset_dma(por);
    143c:	4620      	mov	r0, r4
    143e:	4b0c      	ldr	r3, [pc, #48]	; (1470 <grid_port_reset_receiver+0x90>)
    1440:	4798      	blx	r3
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[por->rx_double_buffer_seek_start_index] = 0;
    1442:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1444:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    1448:	3b01      	subs	r3, #1
    144a:	b29b      	uxth	r3, r3
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    144c:	2b00      	cmp	r3, #0
    144e:	d1fb      	bne.n	1448 <grid_port_reset_receiver+0x68>
    1450:	18a3      	adds	r3, r4, r2
    1452:	2200      	movs	r2, #0
    1454:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
	}
	
	usart_async_enable(por->usart);
    1458:	6860      	ldr	r0, [r4, #4]
    145a:	4b06      	ldr	r3, [pc, #24]	; (1474 <grid_port_reset_receiver+0x94>)
    145c:	4798      	blx	r3
    145e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1460:	00006ac5 	.word	0x00006ac5
    1464:	00004ae9 	.word	0x00004ae9
    1468:	00004c11 	.word	0x00004c11
    146c:	00004c4d 	.word	0x00004c4d
    1470:	000045c5 	.word	0x000045c5
    1474:	00006a99 	.word	0x00006a99

00001478 <grid_port_receive_task>:
void grid_port_receive_task(struct grid_port* por){
	

	
	// THERE IS ALREADY DATA, PROCESS THAT FIRST
	if	(por->rx_double_buffer_status != 0){
    1478:	6a03      	ldr	r3, [r0, #32]
    147a:	2b00      	cmp	r3, #0
    147c:	f040 80b5 	bne.w	15ea <grid_port_receive_task+0x172>
void grid_port_receive_task(struct grid_port* por){
    1480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1484:	b082      	sub	sp, #8
    1486:	4604      	mov	r4, r0
		return;
	}
	
	
	
	if (por->rx_double_buffer_timeout > 1000){
    1488:	69c3      	ldr	r3, [r0, #28]
    148a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    148e:	d923      	bls.n	14d8 <grid_port_receive_task+0x60>
		
		if (por->partner_status == 1){
    1490:	f241 031b 	movw	r3, #4123	; 0x101b
    1494:	5cc3      	ldrb	r3, [r0, r3]
    1496:	2b01      	cmp	r3, #1
    1498:	d00b      	beq.n	14b2 <grid_port_receive_task+0x3a>
			
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500);
		}
		else{
			
			if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    149a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    149c:	b90b      	cbnz	r3, 14a2 <grid_port_receive_task+0x2a>
    149e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    14a0:	b1e3      	cbz	r3, 14dc <grid_port_receive_task+0x64>
				// Ready to receive
			}
			else{
				
				GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout & Reset Receiver");
    14a2:	4952      	ldr	r1, [pc, #328]	; (15ec <grid_port_receive_task+0x174>)
    14a4:	4852      	ldr	r0, [pc, #328]	; (15f0 <grid_port_receive_task+0x178>)
    14a6:	4b53      	ldr	r3, [pc, #332]	; (15f4 <grid_port_receive_task+0x17c>)
    14a8:	4798      	blx	r3
				grid_port_reset_receiver(por);
    14aa:	4620      	mov	r0, r4
    14ac:	4b52      	ldr	r3, [pc, #328]	; (15f8 <grid_port_receive_task+0x180>)
    14ae:	4798      	blx	r3
    14b0:	e014      	b.n	14dc <grid_port_receive_task+0x64>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout Disconnect & Reset Receiver");
    14b2:	4952      	ldr	r1, [pc, #328]	; (15fc <grid_port_receive_task+0x184>)
    14b4:	484e      	ldr	r0, [pc, #312]	; (15f0 <grid_port_receive_task+0x178>)
    14b6:	4b4f      	ldr	r3, [pc, #316]	; (15f4 <grid_port_receive_task+0x17c>)
    14b8:	4798      	blx	r3
			grid_port_reset_receiver(por);
    14ba:	4620      	mov	r0, r4
    14bc:	4b4e      	ldr	r3, [pc, #312]	; (15f8 <grid_port_receive_task+0x180>)
    14be:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500);
    14c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    14c4:	9301      	str	r3, [sp, #4]
    14c6:	2300      	movs	r3, #0
    14c8:	9300      	str	r3, [sp, #0]
    14ca:	23ff      	movs	r3, #255	; 0xff
    14cc:	461a      	mov	r2, r3
    14ce:	4619      	mov	r1, r3
    14d0:	484b      	ldr	r0, [pc, #300]	; (1600 <grid_port_receive_task+0x188>)
    14d2:	4d4c      	ldr	r5, [pc, #304]	; (1604 <grid_port_receive_task+0x18c>)
    14d4:	47a8      	blx	r5
    14d6:	e001      	b.n	14dc <grid_port_receive_task+0x64>
		}
		
	}
	else{
		
		por->rx_double_buffer_timeout++;
    14d8:	3301      	adds	r3, #1
    14da:	61c3      	str	r3, [r0, #28]
	}
	

	for(uint16_t i = 0; i<490; i++){
		
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    14dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    14de:	18e2      	adds	r2, r4, r3
    14e0:	f892 27fc 	ldrb.w	r2, [r2, #2044]	; 0x7fc
    14e4:	2a0a      	cmp	r2, #10
    14e6:	d010      	beq.n	150a <grid_port_receive_task+0x92>
			por->rx_double_buffer_status = 1;
			por->rx_double_buffer_timeout = 0;
			
			return;
		}
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    14e8:	b19a      	cbz	r2, 1512 <grid_port_receive_task+0x9a>
			return;
		}
		
		
		// Buffer overrun error
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    14ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    14ec:	1e51      	subs	r1, r2, #1
    14ee:	428b      	cmp	r3, r1
    14f0:	d012      	beq.n	1518 <grid_port_receive_task+0xa0>
    14f2:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
			return;
		}
		
		// Buffer overrun error
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){
    14f6:	f240 76cf 	movw	r6, #1999	; 0x7cf
			por->rx_double_buffer_timeout = 0;
			por->rx_double_buffer_seek_start_index++;
		}
		else{
			
			por->rx_double_buffer_timeout = 0;
    14fa:	2500      	movs	r5, #0
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){
    14fc:	f8df e114 	ldr.w	lr, [pc, #276]	; 1614 <grid_port_receive_task+0x19c>
    1500:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    1504:	f240 7cce 	movw	ip, #1998	; 0x7ce
    1508:	e05e      	b.n	15c8 <grid_port_receive_task+0x150>
			por->rx_double_buffer_status = 1;
    150a:	2301      	movs	r3, #1
    150c:	6223      	str	r3, [r4, #32]
			por->rx_double_buffer_timeout = 0;
    150e:	2300      	movs	r3, #0
    1510:	61e3      	str	r3, [r4, #28]
		}
		
	}
	
	
}
    1512:	b002      	add	sp, #8
    1514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 1");
    1518:	493b      	ldr	r1, [pc, #236]	; (1608 <grid_port_receive_task+0x190>)
    151a:	4835      	ldr	r0, [pc, #212]	; (15f0 <grid_port_receive_task+0x178>)
    151c:	4b35      	ldr	r3, [pc, #212]	; (15f4 <grid_port_receive_task+0x17c>)
    151e:	4798      	blx	r3
			grid_port_reset_receiver(por);
    1520:	4620      	mov	r0, r4
    1522:	4b35      	ldr	r3, [pc, #212]	; (15f8 <grid_port_receive_task+0x180>)
    1524:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    1526:	23c8      	movs	r3, #200	; 0xc8
    1528:	9301      	str	r3, [sp, #4]
    152a:	2302      	movs	r3, #2
    152c:	9300      	str	r3, [sp, #0]
    152e:	2300      	movs	r3, #0
    1530:	461a      	mov	r2, r3
    1532:	21ff      	movs	r1, #255	; 0xff
    1534:	4832      	ldr	r0, [pc, #200]	; (1600 <grid_port_receive_task+0x188>)
    1536:	4c33      	ldr	r4, [pc, #204]	; (1604 <grid_port_receive_task+0x18c>)
    1538:	47a0      	blx	r4
			return;
    153a:	e7ea      	b.n	1512 <grid_port_receive_task+0x9a>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){
    153c:	b16a      	cbz	r2, 155a <grid_port_receive_task+0xe2>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){
    153e:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    1542:	fbae 1302 	umull	r1, r3, lr, r2
    1546:	09db      	lsrs	r3, r3, #7
    1548:	fb07 2213 	mls	r2, r7, r3, r2
    154c:	4422      	add	r2, r4
    154e:	f892 37fc 	ldrb.w	r3, [r2, #2044]	; 0x7fc
    1552:	b9a3      	cbnz	r3, 157e <grid_port_receive_task+0x106>
			por->rx_double_buffer_timeout = 0;
    1554:	61e5      	str	r5, [r4, #28]
			por->rx_double_buffer_seek_start_index=0;
    1556:	6265      	str	r5, [r4, #36]	; 0x24
    1558:	e026      	b.n	15a8 <grid_port_receive_task+0x130>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 2");
    155a:	492c      	ldr	r1, [pc, #176]	; (160c <grid_port_receive_task+0x194>)
    155c:	4824      	ldr	r0, [pc, #144]	; (15f0 <grid_port_receive_task+0x178>)
    155e:	4b25      	ldr	r3, [pc, #148]	; (15f4 <grid_port_receive_task+0x17c>)
    1560:	4798      	blx	r3
			grid_port_reset_receiver(por);
    1562:	4620      	mov	r0, r4
    1564:	4b24      	ldr	r3, [pc, #144]	; (15f8 <grid_port_receive_task+0x180>)
    1566:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    1568:	23c8      	movs	r3, #200	; 0xc8
    156a:	9301      	str	r3, [sp, #4]
    156c:	2302      	movs	r3, #2
    156e:	9300      	str	r3, [sp, #0]
    1570:	2300      	movs	r3, #0
    1572:	461a      	mov	r2, r3
    1574:	21ff      	movs	r1, #255	; 0xff
    1576:	4822      	ldr	r0, [pc, #136]	; (1600 <grid_port_receive_task+0x188>)
    1578:	4c22      	ldr	r4, [pc, #136]	; (1604 <grid_port_receive_task+0x18c>)
    157a:	47a0      	blx	r4
			return;
    157c:	e7c9      	b.n	1512 <grid_port_receive_task+0x9a>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 3");
    157e:	4924      	ldr	r1, [pc, #144]	; (1610 <grid_port_receive_task+0x198>)
    1580:	481b      	ldr	r0, [pc, #108]	; (15f0 <grid_port_receive_task+0x178>)
    1582:	4b1c      	ldr	r3, [pc, #112]	; (15f4 <grid_port_receive_task+0x17c>)
    1584:	4798      	blx	r3
			grid_port_reset_receiver(por);
    1586:	4620      	mov	r0, r4
    1588:	4b1b      	ldr	r3, [pc, #108]	; (15f8 <grid_port_receive_task+0x180>)
    158a:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    158c:	23c8      	movs	r3, #200	; 0xc8
    158e:	9301      	str	r3, [sp, #4]
    1590:	2302      	movs	r3, #2
    1592:	9300      	str	r3, [sp, #0]
    1594:	2300      	movs	r3, #0
    1596:	461a      	mov	r2, r3
    1598:	21ff      	movs	r1, #255	; 0xff
    159a:	4819      	ldr	r0, [pc, #100]	; (1600 <grid_port_receive_task+0x188>)
    159c:	4c19      	ldr	r4, [pc, #100]	; (1604 <grid_port_receive_task+0x18c>)
    159e:	47a0      	blx	r4
			return;
    15a0:	e7b7      	b.n	1512 <grid_port_receive_task+0x9a>
			por->rx_double_buffer_timeout = 0;
    15a2:	61e5      	str	r5, [r4, #28]
			por->rx_double_buffer_seek_start_index++;
    15a4:	3301      	adds	r3, #1
    15a6:	6263      	str	r3, [r4, #36]	; 0x24
    15a8:	3801      	subs	r0, #1
    15aa:	b280      	uxth	r0, r0
	for(uint16_t i = 0; i<490; i++){
    15ac:	2800      	cmp	r0, #0
    15ae:	d0b0      	beq.n	1512 <grid_port_receive_task+0x9a>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    15b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    15b2:	18e2      	adds	r2, r4, r3
    15b4:	f892 27fc 	ldrb.w	r2, [r2, #2044]	; 0x7fc
    15b8:	2a0a      	cmp	r2, #10
    15ba:	d0a6      	beq.n	150a <grid_port_receive_task+0x92>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    15bc:	2a00      	cmp	r2, #0
    15be:	d0a8      	beq.n	1512 <grid_port_receive_task+0x9a>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    15c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    15c2:	1e51      	subs	r1, r2, #1
    15c4:	428b      	cmp	r3, r1
    15c6:	d0a7      	beq.n	1518 <grid_port_receive_task+0xa0>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){
    15c8:	42b3      	cmp	r3, r6
    15ca:	d0b7      	beq.n	153c <grid_port_receive_task+0xc4>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){
    15cc:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    15d0:	fbae 8102 	umull	r8, r1, lr, r2
    15d4:	09c9      	lsrs	r1, r1, #7
    15d6:	fb07 2211 	mls	r2, r7, r1, r2
    15da:	4422      	add	r2, r4
    15dc:	f892 27fc 	ldrb.w	r2, [r2, #2044]	; 0x7fc
    15e0:	2a00      	cmp	r2, #0
    15e2:	d1cc      	bne.n	157e <grid_port_receive_task+0x106>
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    15e4:	4563      	cmp	r3, ip
    15e6:	d9dc      	bls.n	15a2 <grid_port_receive_task+0x12a>
    15e8:	e7b4      	b.n	1554 <grid_port_receive_task+0xdc>
    15ea:	4770      	bx	lr
    15ec:	0000e9f0 	.word	0x0000e9f0
    15f0:	0000e8fc 	.word	0x0000e8fc
    15f4:	0000d5b1 	.word	0x0000d5b1
    15f8:	000013e1 	.word	0x000013e1
    15fc:	0000e9cc 	.word	0x0000e9cc
    1600:	200032f8 	.word	0x200032f8
    1604:	00004a55 	.word	0x00004a55
    1608:	0000ea0c 	.word	0x0000ea0c
    160c:	0000ea28 	.word	0x0000ea28
    1610:	0000ea44 	.word	0x0000ea44
    1614:	10624dd3 	.word	0x10624dd3

00001618 <grid_buffer_init>:





uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1618:	b538      	push	{r3, r4, r5, lr}
    161a:	4604      	mov	r4, r0
    161c:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    161e:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1620:	2300      	movs	r3, #0
    1622:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    1624:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    1626:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1628:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    162a:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    162c:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    162e:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1630:	4608      	mov	r0, r1
    1632:	4b08      	ldr	r3, [pc, #32]	; (1654 <grid_buffer_init+0x3c>)
    1634:	4798      	blx	r3
    1636:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1638:	b900      	cbnz	r0, 163c <grid_buffer_init+0x24>
    163a:	e7fe      	b.n	163a <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    163c:	b145      	cbz	r5, 1650 <grid_buffer_init+0x38>
    163e:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1640:	4619      	mov	r1, r3
    1642:	6862      	ldr	r2, [r4, #4]
    1644:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1646:	3301      	adds	r3, #1
    1648:	b29b      	uxth	r3, r3
    164a:	8822      	ldrh	r2, [r4, #0]
    164c:	429a      	cmp	r2, r3
    164e:	d8f8      	bhi.n	1642 <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1650:	2001      	movs	r0, #1
    1652:	bd38      	pop	{r3, r4, r5, pc}
    1654:	0000d421 	.word	0x0000d421

00001658 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1658:	8903      	ldrh	r3, [r0, #8]
    165a:	8a02      	ldrh	r2, [r0, #16]
    165c:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    165e:	bf8f      	iteee	hi
    1660:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    1662:	8800      	ldrhls	r0, [r0, #0]
    1664:	18c0      	addls	r0, r0, r3
    1666:	1a80      	subls	r0, r0, r2
    1668:	b280      	uxth	r0, r0

	return space;

	
	
}
    166a:	4770      	bx	lr

0000166c <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    166c:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    166e:	8903      	ldrh	r3, [r0, #8]
    1670:	8a02      	ldrh	r2, [r0, #16]
    1672:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    1674:	bf9c      	itt	ls
    1676:	8804      	ldrhls	r4, [r0, #0]
    1678:	191b      	addls	r3, r3, r4
    167a:	1a9b      	subs	r3, r3, r2
    167c:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    167e:	428b      	cmp	r3, r1
    1680:	d90a      	bls.n	1698 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    1682:	440a      	add	r2, r1
    1684:	8804      	ldrh	r4, [r0, #0]
    1686:	fb92 f3f4 	sdiv	r3, r2, r4
    168a:	fb04 2213 	mls	r2, r4, r3, r2
    168e:	8242      	strh	r2, [r0, #18]
		
		return length;
    1690:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    1692:	f85d 4b04 	ldr.w	r4, [sp], #4
    1696:	4770      	bx	lr
		return 0; // failed
    1698:	2000      	movs	r0, #0
    169a:	e7fa      	b.n	1692 <grid_buffer_write_init+0x26>

0000169c <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    169c:	8a83      	ldrh	r3, [r0, #20]
    169e:	6842      	ldr	r2, [r0, #4]
    16a0:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    16a2:	8a83      	ldrh	r3, [r0, #20]
    16a4:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    16a6:	b29b      	uxth	r3, r3
    16a8:	8801      	ldrh	r1, [r0, #0]
    16aa:	fbb3 f2f1 	udiv	r2, r3, r1
    16ae:	fb01 3312 	mls	r3, r1, r2, r3
    16b2:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    16b4:	2001      	movs	r0, #1
    16b6:	4770      	bx	lr

000016b8 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    16b8:	8a83      	ldrh	r3, [r0, #20]
    16ba:	8a42      	ldrh	r2, [r0, #18]
    16bc:	429a      	cmp	r2, r3
    16be:	d000      	beq.n	16c2 <grid_buffer_write_acknowledge+0xa>
    16c0:	e7fe      	b.n	16c0 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    16c2:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    16c4:	2001      	movs	r0, #1
    16c6:	4770      	bx	lr

000016c8 <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    16c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16cc:	b08d      	sub	sp, #52	; 0x34
    16ce:	af02      	add	r7, sp, #8
    16d0:	4604      	mov	r4, r0
    16d2:	4615      	mov	r5, r2
	uint8_t buffer[length];
    16d4:	61fa      	str	r2, [r7, #28]
    16d6:	1dd3      	adds	r3, r2, #7
    16d8:	f023 0307 	bic.w	r3, r3, #7
    16dc:	ebad 0d03 	sub.w	sp, sp, r3
    16e0:	f10d 0a08 	add.w	sl, sp, #8
	for (uint16_t i = 0; i<length; i++){
    16e4:	2a00      	cmp	r2, #0
    16e6:	f000 828e 	beq.w	1c06 <grid_port_receive_decode+0x53e>
    16ea:	4656      	mov	r6, sl
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    16ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
    16ee:	f10a 31ff 	add.w	r1, sl, #4294967295
    16f2:	1e6b      	subs	r3, r5, #1
    16f4:	b29b      	uxth	r3, r3
    16f6:	617b      	str	r3, [r7, #20]
    16f8:	eb0a 0903 	add.w	r9, sl, r3
    16fc:	1c53      	adds	r3, r2, #1
    16fe:	61bb      	str	r3, [r7, #24]
    1700:	eba3 080a 	sub.w	r8, r3, sl
    1704:	f8df c31c 	ldr.w	ip, [pc, #796]	; 1a24 <grid_port_receive_decode+0x35c>
    1708:	f44f 6efa 	mov.w	lr, #2000	; 0x7d0
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    170c:	2000      	movs	r0, #0
    170e:	613a      	str	r2, [r7, #16]
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    1710:	eb08 0b01 	add.w	fp, r8, r1
    1714:	fbac 230b 	umull	r2, r3, ip, fp
    1718:	09db      	lsrs	r3, r3, #7
    171a:	fb0e b313 	mls	r3, lr, r3, fp
    171e:	4423      	add	r3, r4
    1720:	f893 b7fc 	ldrb.w	fp, [r3, #2044]	; 0x7fc
    1724:	f801 bf01 	strb.w	fp, [r1, #1]!
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    1728:	f883 07fc 	strb.w	r0, [r3, #2044]	; 0x7fc
	for (uint16_t i = 0; i<length; i++){
    172c:	4549      	cmp	r1, r9
    172e:	d1ef      	bne.n	1710 <grid_port_receive_decode+0x48>
    1730:	693a      	ldr	r2, [r7, #16]
    1732:	69bb      	ldr	r3, [r7, #24]
    1734:	6979      	ldr	r1, [r7, #20]
    1736:	440b      	add	r3, r1
    1738:	469c      	mov	ip, r3
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    173a:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 1a24 <grid_port_receive_decode+0x35c>
    173e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    1742:	2100      	movs	r1, #0
    1744:	fbae 8302 	umull	r8, r3, lr, r2
    1748:	09db      	lsrs	r3, r3, #7
    174a:	fb00 2313 	mls	r3, r0, r3, r2
    174e:	4423      	add	r3, r4
    1750:	f883 17fc 	strb.w	r1, [r3, #2044]	; 0x7fc
    1754:	3201      	adds	r2, #1
	for (uint16_t i = 0; i<length; i++){
    1756:	4594      	cmp	ip, r2
    1758:	d1f4      	bne.n	1744 <grid_port_receive_decode+0x7c>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    175a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    175c:	69fb      	ldr	r3, [r7, #28]
    175e:	4413      	add	r3, r2
    1760:	461a      	mov	r2, r3
    1762:	4bb0      	ldr	r3, [pc, #704]	; (1a24 <grid_port_receive_decode+0x35c>)
    1764:	fba3 1302 	umull	r1, r3, r3, r2
    1768:	09db      	lsrs	r3, r3, #7
    176a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    176e:	fb01 2313 	mls	r3, r1, r3, r2
    1772:	62a3      	str	r3, [r4, #40]	; 0x28
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    1774:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_status = 0;
    1776:	2300      	movs	r3, #0
    1778:	6223      	str	r3, [r4, #32]
	for (uint16_t i = 1; i<length; i++){
    177a:	2d01      	cmp	r5, #1
    177c:	f240 8251 	bls.w	1c22 <grid_port_receive_decode+0x55a>
    1780:	f04f 0801 	mov.w	r8, #1
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    1784:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 1a60 <grid_port_receive_decode+0x398>
    1788:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 1a64 <grid_port_receive_decode+0x39c>
    178c:	e006      	b.n	179c <grid_port_receive_decode+0xd4>
	for (uint16_t i = 1; i<length; i++){
    178e:	f108 0801 	add.w	r8, r8, #1
    1792:	fa1f f888 	uxth.w	r8, r8
    1796:	4545      	cmp	r5, r8
    1798:	f240 8243 	bls.w	1c22 <grid_port_receive_decode+0x55a>
		if (buffer[i] == GRID_CONST_SOH){
    179c:	f816 3008 	ldrb.w	r3, [r6, r8]
    17a0:	2b01      	cmp	r3, #1
    17a2:	d1f4      	bne.n	178e <grid_port_receive_decode+0xc6>
			length -= i;
    17a4:	eba5 0508 	sub.w	r5, r5, r8
    17a8:	b2ad      	uxth	r5, r5
			message = &buffer[i];
    17aa:	eb06 0a08 	add.w	sl, r6, r8
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    17ae:	4659      	mov	r1, fp
    17b0:	489d      	ldr	r0, [pc, #628]	; (1a28 <grid_port_receive_decode+0x360>)
    17b2:	47c8      	blx	r9
    17b4:	e7eb      	b.n	178e <grid_port_receive_decode+0xc6>
	if (message[0] == GRID_CONST_SOH && message[length-1] == GRID_CONST_LF){
    17b6:	46ab      	mov	fp, r5
    17b8:	eb0a 0305 	add.w	r3, sl, r5
    17bc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    17c0:	2b0a      	cmp	r3, #10
    17c2:	f040 8233 	bne.w	1c2c <grid_port_receive_decode+0x564>
		checksum_received = grid_msg_checksum_read(message, length);
    17c6:	4629      	mov	r1, r5
    17c8:	4650      	mov	r0, sl
    17ca:	4b98      	ldr	r3, [pc, #608]	; (1a2c <grid_port_receive_decode+0x364>)
    17cc:	4798      	blx	r3
    17ce:	4606      	mov	r6, r0
		checksum_calculated = grid_msg_checksum_calculate(message, length);
    17d0:	4629      	mov	r1, r5
    17d2:	4650      	mov	r0, sl
    17d4:	4b96      	ldr	r3, [pc, #600]	; (1a30 <grid_port_receive_decode+0x368>)
    17d6:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    17d8:	4286      	cmp	r6, r0
    17da:	f040 8206 	bne.w	1bea <grid_port_receive_decode+0x522>
			if (message[1] == GRID_CONST_BRC){ // Broadcast message
    17de:	f89a 3001 	ldrb.w	r3, [sl, #1]
    17e2:	2b0f      	cmp	r3, #15
    17e4:	d04b      	beq.n	187e <grid_port_receive_decode+0x1b6>
			else if (message[1] == GRID_CONST_DCT){ // Direct Message
    17e6:	2b0e      	cmp	r3, #14
    17e8:	f040 81f1 	bne.w	1bce <grid_port_receive_decode+0x506>
				if (message[2] == GRID_CONST_ACK){
    17ec:	f89a 3002 	ldrb.w	r3, [sl, #2]
    17f0:	2b07      	cmp	r3, #7
    17f2:	f040 821e 	bne.w	1c32 <grid_port_receive_decode+0x56a>
					uint8_t local_token_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    17f6:	2200      	movs	r2, #0
    17f8:	2102      	movs	r1, #2
    17fa:	f10a 0008 	add.w	r0, sl, #8
    17fe:	4d8d      	ldr	r5, [pc, #564]	; (1a34 <grid_port_receive_decode+0x36c>)
    1800:	47a8      	blx	r5
    1802:	fa5f f880 	uxtb.w	r8, r0
					uint8_t partner_token_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    1806:	2200      	movs	r2, #0
    1808:	2102      	movs	r1, #2
    180a:	f10a 0006 	add.w	r0, sl, #6
    180e:	47a8      	blx	r5
    1810:	61f8      	str	r0, [r7, #28]
    1812:	b2c6      	uxtb	r6, r0
					if (por->partner_status == 0){
    1814:	f241 031b 	movw	r3, #4123	; 0x101b
    1818:	5ce3      	ldrb	r3, [r4, r3]
    181a:	2b00      	cmp	r3, #0
    181c:	f040 8174 	bne.w	1b08 <grid_port_receive_decode+0x440>
						if (por->ping_local_token == 255){ // I have no clue
    1820:	f241 0301 	movw	r3, #4097	; 0x1001
    1824:	5ce3      	ldrb	r3, [r4, r3]
    1826:	2bff      	cmp	r3, #255	; 0xff
    1828:	f000 811e 	beq.w	1a68 <grid_port_receive_decode+0x3a0>
						if (partner_token_received != por->ping_partner_token){
    182c:	f241 0302 	movw	r3, #4098	; 0x1002
    1830:	5ce3      	ldrb	r3, [r4, r3]
    1832:	42b3      	cmp	r3, r6
    1834:	d018      	beq.n	1868 <grid_port_receive_decode+0x1a0>
							por->ping_partner_token = partner_token_received;							
    1836:	f241 0302 	movw	r3, #4098	; 0x1002
    183a:	54e6      	strb	r6, [r4, r3]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, partner_token_received);
    183c:	7f3a      	ldrb	r2, [r7, #28]
    183e:	2102      	movs	r1, #2
    1840:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
    1844:	300b      	adds	r0, #11
    1846:	4b7c      	ldr	r3, [pc, #496]	; (1a38 <grid_port_receive_decode+0x370>)
    1848:	4798      	blx	r3
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_checksum_calculate(por->ping_packet, por->ping_packet_length));
    184a:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
    184e:	3503      	adds	r5, #3
    1850:	f241 0317 	movw	r3, #4119	; 0x1017
    1854:	5ce6      	ldrb	r6, [r4, r3]
    1856:	4631      	mov	r1, r6
    1858:	4628      	mov	r0, r5
    185a:	4b75      	ldr	r3, [pc, #468]	; (1a30 <grid_port_receive_decode+0x368>)
    185c:	4798      	blx	r3
    185e:	4602      	mov	r2, r0
    1860:	4631      	mov	r1, r6
    1862:	4628      	mov	r0, r5
    1864:	4b75      	ldr	r3, [pc, #468]	; (1a3c <grid_port_receive_decode+0x374>)
    1866:	4798      	blx	r3
						if (por->ping_local_token != local_token_received){
    1868:	f241 0301 	movw	r3, #4097	; 0x1001
    186c:	5ce3      	ldrb	r3, [r4, r3]
    186e:	4543      	cmp	r3, r8
    1870:	f000 8119 	beq.w	1aa6 <grid_port_receive_decode+0x3de>
						por->ping_flag = 1;
    1874:	2201      	movs	r2, #1
    1876:	f241 0318 	movw	r3, #4120	; 0x1018
    187a:	54e2      	strb	r2, [r4, r3]
    187c:	e1d9      	b.n	1c32 <grid_port_receive_decode+0x56a>
				uint8_t error=0;
    187e:	f107 0328 	add.w	r3, r7, #40	; 0x28
    1882:	461a      	mov	r2, r3
    1884:	2300      	movs	r3, #0
    1886:	f802 3d01 	strb.w	r3, [r2, #-1]!
    188a:	4613      	mov	r3, r2
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    188c:	4690      	mov	r8, r2
    188e:	2202      	movs	r2, #2
    1890:	2104      	movs	r1, #4
    1892:	4650      	mov	r0, sl
    1894:	4e6a      	ldr	r6, [pc, #424]	; (1a40 <grid_port_receive_decode+0x378>)
    1896:	47b0      	blx	r6
    1898:	61b8      	str	r0, [r7, #24]
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    189a:	4643      	mov	r3, r8
    189c:	2202      	movs	r2, #2
    189e:	210a      	movs	r1, #10
    18a0:	4650      	mov	r0, sl
    18a2:	47b0      	blx	r6
    18a4:	6178      	str	r0, [r7, #20]
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    18a6:	4643      	mov	r3, r8
    18a8:	2202      	movs	r2, #2
    18aa:	2106      	movs	r1, #6
    18ac:	4650      	mov	r0, sl
    18ae:	47b0      	blx	r6
    18b0:	b2c3      	uxtb	r3, r0
    18b2:	613b      	str	r3, [r7, #16]
    18b4:	3b7f      	subs	r3, #127	; 0x7f
    18b6:	b2db      	uxtb	r3, r3
    18b8:	60fb      	str	r3, [r7, #12]
    18ba:	fa4f f983 	sxtb.w	r9, r3
				int8_t received_dy  = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;
    18be:	f8c7 8004 	str.w	r8, [r7, #4]
    18c2:	4643      	mov	r3, r8
    18c4:	2202      	movs	r2, #2
    18c6:	2108      	movs	r1, #8
    18c8:	4650      	mov	r0, sl
    18ca:	47b0      	blx	r6
    18cc:	fa5f f880 	uxtb.w	r8, r0
    18d0:	f1a8 037f 	sub.w	r3, r8, #127	; 0x7f
    18d4:	b2da      	uxtb	r2, r3
    18d6:	60ba      	str	r2, [r7, #8]
    18d8:	b252      	sxtb	r2, r2
    18da:	61fa      	str	r2, [r7, #28]
				uint8_t received_rot = grid_msg_get_parameter(message, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, &error);
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	2202      	movs	r2, #2
    18e0:	210c      	movs	r1, #12
    18e2:	4650      	mov	r0, sl
    18e4:	47b0      	blx	r6
				uint8_t updated_rot = (received_rot + por->partner_fi)%4;
    18e6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    18ea:	781b      	ldrb	r3, [r3, #0]
    18ec:	4418      	add	r0, r3
    18ee:	f000 0203 	and.w	r2, r0, #3
    18f2:	607a      	str	r2, [r7, #4]
				if (por->partner_fi == 0){ // 0 deg
    18f4:	b13b      	cbz	r3, 1906 <grid_port_receive_decode+0x23e>
				else if(por->partner_fi == 1){ // 90 deg
    18f6:	2b01      	cmp	r3, #1
    18f8:	d176      	bne.n	19e8 <grid_port_receive_decode+0x320>
					rotated_dx  -= received_dy;
    18fa:	f1c8 087f 	rsb	r8, r8, #127	; 0x7f
					rotated_dy  += received_dx;
    18fe:	f8c7 901c 	str.w	r9, [r7, #28]
					rotated_dx  -= received_dy;
    1902:	fa4f f988 	sxtb.w	r9, r8
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    1906:	f241 0319 	movw	r3, #4121	; 0x1019
    190a:	f814 8003 	ldrb.w	r8, [r4, r3]
    190e:	f108 087f 	add.w	r8, r8, #127	; 0x7f
    1912:	44c8      	add	r8, r9
    1914:	fa5f f888 	uxtb.w	r8, r8
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    1918:	f241 031a 	movw	r3, #4122	; 0x101a
    191c:	5ce3      	ldrb	r3, [r4, r3]
    191e:	337f      	adds	r3, #127	; 0x7f
    1920:	69fa      	ldr	r2, [r7, #28]
    1922:	441a      	add	r2, r3
    1924:	b2d3      	uxtb	r3, r2
    1926:	61fb      	str	r3, [r7, #28]
				if (received_dx + GRID_SYS_DEFAULT_POSITION == 0 && received_dy + GRID_SYS_DEFAULT_POSITION == 0)
    1928:	68fb      	ldr	r3, [r7, #12]
    192a:	2b81      	cmp	r3, #129	; 0x81
    192c:	d076      	beq.n	1a1c <grid_port_receive_decode+0x354>
					grid_msg_set_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, updated_id, &error);
    192e:	f107 0927 	add.w	r9, r7, #39	; 0x27
    1932:	f8cd 9000 	str.w	r9, [sp]
    1936:	7e3b      	ldrb	r3, [r7, #24]
    1938:	2202      	movs	r2, #2
    193a:	2104      	movs	r1, #4
    193c:	4650      	mov	r0, sl
    193e:	4e41      	ldr	r6, [pc, #260]	; (1a44 <grid_port_receive_decode+0x37c>)
    1940:	47b0      	blx	r6
					grid_msg_set_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, updated_dx, &error);
    1942:	f8cd 9000 	str.w	r9, [sp]
    1946:	4643      	mov	r3, r8
    1948:	2202      	movs	r2, #2
    194a:	2106      	movs	r1, #6
    194c:	4650      	mov	r0, sl
    194e:	47b0      	blx	r6
					grid_msg_set_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, updated_dy, &error);
    1950:	f8cd 9000 	str.w	r9, [sp]
    1954:	69fb      	ldr	r3, [r7, #28]
    1956:	2202      	movs	r2, #2
    1958:	2108      	movs	r1, #8
    195a:	4650      	mov	r0, sl
    195c:	47b0      	blx	r6
					grid_msg_set_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, updated_age, &error);
    195e:	f8cd 9000 	str.w	r9, [sp]
    1962:	7d3b      	ldrb	r3, [r7, #20]
    1964:	2202      	movs	r2, #2
    1966:	210a      	movs	r1, #10
    1968:	4650      	mov	r0, sl
    196a:	47b0      	blx	r6
					grid_msg_set_parameter(message, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, updated_rot, &error);
    196c:	f8cd 9000 	str.w	r9, [sp]
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	2202      	movs	r2, #2
    1974:	210c      	movs	r1, #12
    1976:	4650      	mov	r0, sl
    1978:	47b0      	blx	r6
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    197a:	7e3e      	ldrb	r6, [r7, #24]
    197c:	eb08 2606 	add.w	r6, r8, r6, lsl #8
    1980:	69fb      	ldr	r3, [r7, #28]
    1982:	eb03 2306 	add.w	r3, r3, r6, lsl #8
    1986:	7d3e      	ldrb	r6, [r7, #20]
    1988:	eb06 2603 	add.w	r6, r6, r3, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    198c:	4631      	mov	r1, r6
    198e:	482e      	ldr	r0, [pc, #184]	; (1a48 <grid_port_receive_decode+0x380>)
    1990:	4b2e      	ldr	r3, [pc, #184]	; (1a4c <grid_port_receive_decode+0x384>)
    1992:	4798      	blx	r3
    1994:	2800      	cmp	r0, #0
    1996:	f040 814c 	bne.w	1c32 <grid_port_receive_decode+0x56a>
					grid_msg_checksum_write(message, length, grid_msg_checksum_calculate(message, length));
    199a:	4659      	mov	r1, fp
    199c:	4650      	mov	r0, sl
    199e:	4b24      	ldr	r3, [pc, #144]	; (1a30 <grid_port_receive_decode+0x368>)
    19a0:	4798      	blx	r3
    19a2:	4602      	mov	r2, r0
    19a4:	4659      	mov	r1, fp
    19a6:	4650      	mov	r0, sl
    19a8:	4b24      	ldr	r3, [pc, #144]	; (1a3c <grid_port_receive_decode+0x374>)
    19aa:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    19ac:	f604 74e4 	addw	r4, r4, #4068	; 0xfe4
    19b0:	4629      	mov	r1, r5
    19b2:	4620      	mov	r0, r4
    19b4:	4b26      	ldr	r3, [pc, #152]	; (1a50 <grid_port_receive_decode+0x388>)
    19b6:	4798      	blx	r3
    19b8:	2800      	cmp	r0, #0
    19ba:	f000 813a 	beq.w	1c32 <grid_port_receive_decode+0x56a>
						for (uint16_t i=0; i<length; i++){
    19be:	b15d      	cbz	r5, 19d8 <grid_port_receive_decode+0x310>
    19c0:	f10a 38ff 	add.w	r8, sl, #4294967295
    19c4:	3d01      	subs	r5, #1
    19c6:	fa1a fa85 	uxtah	sl, sl, r5
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    19ca:	4d22      	ldr	r5, [pc, #136]	; (1a54 <grid_port_receive_decode+0x38c>)
    19cc:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    19d0:	4620      	mov	r0, r4
    19d2:	47a8      	blx	r5
						for (uint16_t i=0; i<length; i++){
    19d4:	45c2      	cmp	sl, r8
    19d6:	d1f9      	bne.n	19cc <grid_port_receive_decode+0x304>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    19d8:	4620      	mov	r0, r4
    19da:	4b1f      	ldr	r3, [pc, #124]	; (1a58 <grid_port_receive_decode+0x390>)
    19dc:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    19de:	4631      	mov	r1, r6
    19e0:	4819      	ldr	r0, [pc, #100]	; (1a48 <grid_port_receive_decode+0x380>)
    19e2:	4b1e      	ldr	r3, [pc, #120]	; (1a5c <grid_port_receive_decode+0x394>)
    19e4:	4798      	blx	r3
    19e6:	e124      	b.n	1c32 <grid_port_receive_decode+0x56a>
				else if(por->partner_fi == 2){ // 180 deg
    19e8:	2b02      	cmp	r3, #2
    19ea:	d109      	bne.n	1a00 <grid_port_receive_decode+0x338>
					rotated_dx  -= received_dx;
    19ec:	693b      	ldr	r3, [r7, #16]
    19ee:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
    19f2:	fa4f f983 	sxtb.w	r9, r3
					rotated_dy  -= received_dy;
    19f6:	f1c8 067f 	rsb	r6, r8, #127	; 0x7f
    19fa:	b273      	sxtb	r3, r6
    19fc:	61fb      	str	r3, [r7, #28]
    19fe:	e782      	b.n	1906 <grid_port_receive_decode+0x23e>
				else if(por->partner_fi == 3){ // 270 deg
    1a00:	2b03      	cmp	r3, #3
    1a02:	d003      	beq.n	1a0c <grid_port_receive_decode+0x344>
				int8_t rotated_dy = 0;
    1a04:	2300      	movs	r3, #0
    1a06:	61fb      	str	r3, [r7, #28]
				int8_t rotated_dx = 0;
    1a08:	4699      	mov	r9, r3
    1a0a:	e77c      	b.n	1906 <grid_port_receive_decode+0x23e>
					rotated_dy  -= received_dx;
    1a0c:	693b      	ldr	r3, [r7, #16]
    1a0e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					rotated_dx  += received_dy;
    1a12:	f8d7 901c 	ldr.w	r9, [r7, #28]
					rotated_dy  -= received_dx;
    1a16:	b25b      	sxtb	r3, r3
    1a18:	61fb      	str	r3, [r7, #28]
    1a1a:	e774      	b.n	1906 <grid_port_receive_decode+0x23e>
				if (received_dx + GRID_SYS_DEFAULT_POSITION == 0 && received_dy + GRID_SYS_DEFAULT_POSITION == 0)
    1a1c:	68bb      	ldr	r3, [r7, #8]
    1a1e:	2b81      	cmp	r3, #129	; 0x81
    1a20:	d185      	bne.n	192e <grid_port_receive_decode+0x266>
    1a22:	e7aa      	b.n	197a <grid_port_receive_decode+0x2b2>
    1a24:	10624dd3 	.word	0x10624dd3
    1a28:	0000e8fc 	.word	0x0000e8fc
    1a2c:	00004c2d 	.word	0x00004c2d
    1a30:	00004c11 	.word	0x00004c11
    1a34:	00004aa9 	.word	0x00004aa9
    1a38:	00004ae9 	.word	0x00004ae9
    1a3c:	00004c4d 	.word	0x00004c4d
    1a40:	00004f69 	.word	0x00004f69
    1a44:	00004f7d 	.word	0x00004f7d
    1a48:	200032f8 	.word	0x200032f8
    1a4c:	00004f91 	.word	0x00004f91
    1a50:	0000166d 	.word	0x0000166d
    1a54:	0000169d 	.word	0x0000169d
    1a58:	000016b9 	.word	0x000016b9
    1a5c:	00004fbb 	.word	0x00004fbb
    1a60:	0000ea60 	.word	0x0000ea60
    1a64:	0000d5b1 	.word	0x0000d5b1
							por->ping_local_token  = grid_sys_rtc_get_time(&grid_sys_state)%128;
    1a68:	4874      	ldr	r0, [pc, #464]	; (1c3c <grid_port_receive_decode+0x574>)
    1a6a:	4b75      	ldr	r3, [pc, #468]	; (1c40 <grid_port_receive_decode+0x578>)
    1a6c:	4798      	blx	r3
    1a6e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    1a72:	f241 0301 	movw	r3, #4097	; 0x1001
    1a76:	54e2      	strb	r2, [r4, r3]
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    1a78:	2102      	movs	r1, #2
    1a7a:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
    1a7e:	3009      	adds	r0, #9
    1a80:	4b70      	ldr	r3, [pc, #448]	; (1c44 <grid_port_receive_decode+0x57c>)
    1a82:	4798      	blx	r3
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_checksum_calculate(por->ping_packet, por->ping_packet_length));
    1a84:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
    1a88:	3503      	adds	r5, #3
    1a8a:	f241 0317 	movw	r3, #4119	; 0x1017
    1a8e:	f814 9003 	ldrb.w	r9, [r4, r3]
    1a92:	4649      	mov	r1, r9
    1a94:	4628      	mov	r0, r5
    1a96:	4b6c      	ldr	r3, [pc, #432]	; (1c48 <grid_port_receive_decode+0x580>)
    1a98:	4798      	blx	r3
    1a9a:	4602      	mov	r2, r0
    1a9c:	4649      	mov	r1, r9
    1a9e:	4628      	mov	r0, r5
    1aa0:	4b6a      	ldr	r3, [pc, #424]	; (1c4c <grid_port_receive_decode+0x584>)
    1aa2:	4798      	blx	r3
    1aa4:	e6c2      	b.n	182c <grid_port_receive_decode+0x164>
							por->partner_fi = (message[3] - por->direction + 6)%4;
    1aa6:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    1aaa:	f89a 3003 	ldrb.w	r3, [sl, #3]
    1aae:	7a61      	ldrb	r1, [r4, #9]
    1ab0:	1a5b      	subs	r3, r3, r1
    1ab2:	3306      	adds	r3, #6
    1ab4:	4259      	negs	r1, r3
    1ab6:	f003 0303 	and.w	r3, r3, #3
    1aba:	f001 0103 	and.w	r1, r1, #3
    1abe:	bf58      	it	pl
    1ac0:	424b      	negpl	r3, r1
    1ac2:	7013      	strb	r3, [r2, #0]
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    1ac4:	f1ab 000a 	sub.w	r0, fp, #10
    1ac8:	2200      	movs	r2, #0
    1aca:	2102      	movs	r1, #2
    1acc:	4450      	add	r0, sl
    1ace:	4b60      	ldr	r3, [pc, #384]	; (1c50 <grid_port_receive_decode+0x588>)
    1ad0:	4798      	blx	r3
    1ad2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
							por->partner_status = 1;
    1ad6:	2201      	movs	r2, #1
    1ad8:	f241 031b 	movw	r3, #4123	; 0x101b
    1adc:	54e2      	strb	r2, [r4, r3]
							grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    1ade:	4d57      	ldr	r5, [pc, #348]	; (1c3c <grid_port_receive_decode+0x574>)
    1ae0:	4628      	mov	r0, r5
    1ae2:	4b57      	ldr	r3, [pc, #348]	; (1c40 <grid_port_receive_decode+0x578>)
    1ae4:	4798      	blx	r3
    1ae6:	b2c0      	uxtb	r0, r0
    1ae8:	7028      	strb	r0, [r5, #0]
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    1aea:	495a      	ldr	r1, [pc, #360]	; (1c54 <grid_port_receive_decode+0x58c>)
    1aec:	485a      	ldr	r0, [pc, #360]	; (1c58 <grid_port_receive_decode+0x590>)
    1aee:	4b5b      	ldr	r3, [pc, #364]	; (1c5c <grid_port_receive_decode+0x594>)
    1af0:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN
    1af2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1af6:	9301      	str	r3, [sp, #4]
    1af8:	2100      	movs	r1, #0
    1afa:	9100      	str	r1, [sp, #0]
    1afc:	460b      	mov	r3, r1
    1afe:	22ff      	movs	r2, #255	; 0xff
    1b00:	4628      	mov	r0, r5
    1b02:	4d57      	ldr	r5, [pc, #348]	; (1c60 <grid_port_receive_decode+0x598>)
    1b04:	47a8      	blx	r5
    1b06:	e6b5      	b.n	1874 <grid_port_receive_decode+0x1ac>
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    1b08:	f89a 3003 	ldrb.w	r3, [sl, #3]
    1b0c:	7a62      	ldrb	r2, [r4, #9]
    1b0e:	1a9b      	subs	r3, r3, r2
    1b10:	3306      	adds	r3, #6
    1b12:	425a      	negs	r2, r3
    1b14:	f003 0303 	and.w	r3, r3, #3
    1b18:	f002 0203 	and.w	r2, r2, #3
    1b1c:	bf58      	it	pl
    1b1e:	4253      	negpl	r3, r2
    1b20:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    1b24:	7812      	ldrb	r2, [r2, #0]
						validator &= local_token_received == por->ping_local_token;
    1b26:	f241 0101 	movw	r1, #4097	; 0x1001
    1b2a:	5c65      	ldrb	r5, [r4, r1]
						validator &= partner_token_received == por->ping_partner_token;
    1b2c:	f241 0102 	movw	r1, #4098	; 0x1002
    1b30:	5c61      	ldrb	r1, [r4, r1]
    1b32:	4545      	cmp	r5, r8
    1b34:	bf08      	it	eq
    1b36:	42b1      	cmpeq	r1, r6
    1b38:	bf0c      	ite	eq
    1b3a:	2501      	moveq	r5, #1
    1b3c:	2500      	movne	r5, #0
    1b3e:	4293      	cmp	r3, r2
    1b40:	bf14      	ite	ne
    1b42:	2500      	movne	r5, #0
    1b44:	f005 0501 	andeq.w	r5, r5, #1
						validator &= por->partner_hwcfg == grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    1b48:	f8d4 6ffc 	ldr.w	r6, [r4, #4092]	; 0xffc
    1b4c:	f1ab 000a 	sub.w	r0, fp, #10
    1b50:	2200      	movs	r2, #0
    1b52:	2102      	movs	r1, #2
    1b54:	4450      	add	r0, sl
    1b56:	4b3e      	ldr	r3, [pc, #248]	; (1c50 <grid_port_receive_decode+0x588>)
    1b58:	4798      	blx	r3
						if (validator == 1){
    1b5a:	42b0      	cmp	r0, r6
    1b5c:	d101      	bne.n	1b62 <grid_port_receive_decode+0x49a>
    1b5e:	2d00      	cmp	r5, #0
    1b60:	d167      	bne.n	1c32 <grid_port_receive_decode+0x56a>
							por->partner_status = 0;
    1b62:	f04f 0800 	mov.w	r8, #0
    1b66:	f241 031b 	movw	r3, #4123	; 0x101b
    1b6a:	f804 8003 	strb.w	r8, [r4, r3]
							por->ping_partner_token = 255;
    1b6e:	25ff      	movs	r5, #255	; 0xff
    1b70:	f241 0302 	movw	r3, #4098	; 0x1002
    1b74:	54e5      	strb	r5, [r4, r3]
							por->ping_local_token = 255;
    1b76:	f241 0901 	movw	r9, #4097	; 0x1001
    1b7a:	f804 5009 	strb.w	r5, [r4, r9]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    1b7e:	462a      	mov	r2, r5
    1b80:	2102      	movs	r1, #2
    1b82:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
    1b86:	300b      	adds	r0, #11
    1b88:	4e2e      	ldr	r6, [pc, #184]	; (1c44 <grid_port_receive_decode+0x57c>)
    1b8a:	47b0      	blx	r6
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    1b8c:	f814 2009 	ldrb.w	r2, [r4, r9]
    1b90:	2102      	movs	r1, #2
    1b92:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
    1b96:	3009      	adds	r0, #9
    1b98:	47b0      	blx	r6
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_checksum_calculate(por->ping_packet, por->ping_packet_length));
    1b9a:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    1b9e:	3603      	adds	r6, #3
    1ba0:	f241 0317 	movw	r3, #4119	; 0x1017
    1ba4:	5ce4      	ldrb	r4, [r4, r3]
    1ba6:	4621      	mov	r1, r4
    1ba8:	4630      	mov	r0, r6
    1baa:	4b27      	ldr	r3, [pc, #156]	; (1c48 <grid_port_receive_decode+0x580>)
    1bac:	4798      	blx	r3
    1bae:	4602      	mov	r2, r0
    1bb0:	4621      	mov	r1, r4
    1bb2:	4630      	mov	r0, r6
    1bb4:	4b25      	ldr	r3, [pc, #148]	; (1c4c <grid_port_receive_decode+0x584>)
    1bb6:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 255, 2, 200); // Purple
    1bb8:	23c8      	movs	r3, #200	; 0xc8
    1bba:	9301      	str	r3, [sp, #4]
    1bbc:	2302      	movs	r3, #2
    1bbe:	9300      	str	r3, [sp, #0]
    1bc0:	462b      	mov	r3, r5
    1bc2:	4642      	mov	r2, r8
    1bc4:	4629      	mov	r1, r5
    1bc6:	481d      	ldr	r0, [pc, #116]	; (1c3c <grid_port_receive_decode+0x574>)
    1bc8:	4c25      	ldr	r4, [pc, #148]	; (1c60 <grid_port_receive_decode+0x598>)
    1bca:	47a0      	blx	r4
    1bcc:	e031      	b.n	1c32 <grid_port_receive_decode+0x56a>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    1bce:	23c8      	movs	r3, #200	; 0xc8
    1bd0:	9301      	str	r3, [sp, #4]
    1bd2:	2302      	movs	r3, #2
    1bd4:	9300      	str	r3, [sp, #0]
    1bd6:	2300      	movs	r3, #0
    1bd8:	461a      	mov	r2, r3
    1bda:	21ff      	movs	r1, #255	; 0xff
    1bdc:	4817      	ldr	r0, [pc, #92]	; (1c3c <grid_port_receive_decode+0x574>)
    1bde:	4c20      	ldr	r4, [pc, #128]	; (1c60 <grid_port_receive_decode+0x598>)
    1be0:	47a0      	blx	r4
				printf("{\"type\": \"WARNING\", \"data\": [\"Unknow Message Type\"]}\r\n");
    1be2:	4820      	ldr	r0, [pc, #128]	; (1c64 <grid_port_receive_decode+0x59c>)
    1be4:	4b20      	ldr	r3, [pc, #128]	; (1c68 <grid_port_receive_decode+0x5a0>)
    1be6:	4798      	blx	r3
    1be8:	e023      	b.n	1c32 <grid_port_receive_decode+0x56a>
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    1bea:	4820      	ldr	r0, [pc, #128]	; (1c6c <grid_port_receive_decode+0x5a4>)
    1bec:	4b1e      	ldr	r3, [pc, #120]	; (1c68 <grid_port_receive_decode+0x5a0>)
    1bee:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // BLUE BLINKY
    1bf0:	23c8      	movs	r3, #200	; 0xc8
    1bf2:	9301      	str	r3, [sp, #4]
    1bf4:	2301      	movs	r3, #1
    1bf6:	9300      	str	r3, [sp, #0]
    1bf8:	23ff      	movs	r3, #255	; 0xff
    1bfa:	2200      	movs	r2, #0
    1bfc:	2114      	movs	r1, #20
    1bfe:	480f      	ldr	r0, [pc, #60]	; (1c3c <grid_port_receive_decode+0x574>)
    1c00:	4c17      	ldr	r4, [pc, #92]	; (1c60 <grid_port_receive_decode+0x598>)
    1c02:	47a0      	blx	r4
    1c04:	e015      	b.n	1c32 <grid_port_receive_decode+0x56a>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    1c06:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1c08:	442a      	add	r2, r5
    1c0a:	4b19      	ldr	r3, [pc, #100]	; (1c70 <grid_port_receive_decode+0x5a8>)
    1c0c:	fba3 1302 	umull	r1, r3, r3, r2
    1c10:	09db      	lsrs	r3, r3, #7
    1c12:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    1c16:	fb01 2313 	mls	r3, r1, r3, r2
    1c1a:	6283      	str	r3, [r0, #40]	; 0x28
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    1c1c:	6243      	str	r3, [r0, #36]	; 0x24
	por->rx_double_buffer_status = 0;
    1c1e:	2300      	movs	r3, #0
    1c20:	6203      	str	r3, [r0, #32]
	if (message[0] == GRID_CONST_SOH && message[length-1] == GRID_CONST_LF){
    1c22:	f89a 3000 	ldrb.w	r3, [sl]
    1c26:	2b01      	cmp	r3, #1
    1c28:	f43f adc5 	beq.w	17b6 <grid_port_receive_decode+0xee>
		printf("{\"type\": \"ERROR\", \"data\": [\"Frame Error\"]}\r\n");
    1c2c:	4811      	ldr	r0, [pc, #68]	; (1c74 <grid_port_receive_decode+0x5ac>)
    1c2e:	4b0e      	ldr	r3, [pc, #56]	; (1c68 <grid_port_receive_decode+0x5a0>)
    1c30:	4798      	blx	r3
}
    1c32:	372c      	adds	r7, #44	; 0x2c
    1c34:	46bd      	mov	sp, r7
    1c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c3a:	bf00      	nop
    1c3c:	200032f8 	.word	0x200032f8
    1c40:	000049f1 	.word	0x000049f1
    1c44:	00004ae9 	.word	0x00004ae9
    1c48:	00004c11 	.word	0x00004c11
    1c4c:	00004c4d 	.word	0x00004c4d
    1c50:	00004aa9 	.word	0x00004aa9
    1c54:	0000ea74 	.word	0x0000ea74
    1c58:	0000e8fc 	.word	0x0000e8fc
    1c5c:	0000d5b1 	.word	0x0000d5b1
    1c60:	00004a55 	.word	0x00004a55
    1c64:	0000ea7c 	.word	0x0000ea7c
    1c68:	0000d699 	.word	0x0000d699
    1c6c:	0000eab4 	.word	0x0000eab4
    1c70:	10624dd3 	.word	0x10624dd3
    1c74:	0000eae8 	.word	0x0000eae8

00001c78 <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    1c78:	b530      	push	{r4, r5, lr}
    1c7a:	b083      	sub	sp, #12
    1c7c:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    1c7e:	7e03      	ldrb	r3, [r0, #24]
    1c80:	2b01      	cmp	r3, #1
    1c82:	d015      	beq.n	1cb0 <grid_port_receive_complete_task+0x38>
	grid_port_receive_task(por);
    1c84:	4620      	mov	r0, r4
    1c86:	4b13      	ldr	r3, [pc, #76]	; (1cd4 <grid_port_receive_complete_task+0x5c>)
    1c88:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    1c8a:	6a23      	ldr	r3, [r4, #32]
    1c8c:	b173      	cbz	r3, 1cac <grid_port_receive_complete_task+0x34>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    1c8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1c90:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1c92:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    1c94:	bf34      	ite	cc
    1c96:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    1c98:	f202 72d1 	addwcs	r2, r2, #2001	; 0x7d1
    1c9c:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    1c9e:	b292      	uxth	r2, r2
    1ca0:	b289      	uxth	r1, r1
    1ca2:	4620      	mov	r0, r4
    1ca4:	4b0c      	ldr	r3, [pc, #48]	; (1cd8 <grid_port_receive_complete_task+0x60>)
    1ca6:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    1ca8:	2300      	movs	r3, #0
    1caa:	6223      	str	r3, [r4, #32]
}
    1cac:	b003      	add	sp, #12
    1cae:	bd30      	pop	{r4, r5, pc}
		por->usart_error_flag = 0;
    1cb0:	2500      	movs	r5, #0
    1cb2:	7605      	strb	r5, [r0, #24]
		grid_port_reset_receiver(por);
    1cb4:	4b09      	ldr	r3, [pc, #36]	; (1cdc <grid_port_receive_complete_task+0x64>)
    1cb6:	4798      	blx	r3
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500); // White triangle
    1cb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1cbc:	9301      	str	r3, [sp, #4]
    1cbe:	9500      	str	r5, [sp, #0]
    1cc0:	23ff      	movs	r3, #255	; 0xff
    1cc2:	461a      	mov	r2, r3
    1cc4:	4619      	mov	r1, r3
    1cc6:	4806      	ldr	r0, [pc, #24]	; (1ce0 <grid_port_receive_complete_task+0x68>)
    1cc8:	4d06      	ldr	r5, [pc, #24]	; (1ce4 <grid_port_receive_complete_task+0x6c>)
    1cca:	47a8      	blx	r5
		printf("{\"type\": \"ERROR\", \"data\": [\"Parity Error\"]}\r\n");
    1ccc:	4806      	ldr	r0, [pc, #24]	; (1ce8 <grid_port_receive_complete_task+0x70>)
    1cce:	4b07      	ldr	r3, [pc, #28]	; (1cec <grid_port_receive_complete_task+0x74>)
    1cd0:	4798      	blx	r3
    1cd2:	e7d7      	b.n	1c84 <grid_port_receive_complete_task+0xc>
    1cd4:	00001479 	.word	0x00001479
    1cd8:	000016c9 	.word	0x000016c9
    1cdc:	000013e1 	.word	0x000013e1
    1ce0:	200032f8 	.word	0x200032f8
    1ce4:	00004a55 	.word	0x00004a55
    1ce8:	0000eb14 	.word	0x0000eb14
    1cec:	0000d699 	.word	0x0000d699

00001cf0 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1cf0:	8983      	ldrh	r3, [r0, #12]
    1cf2:	8942      	ldrh	r2, [r0, #10]
    1cf4:	429a      	cmp	r2, r3
    1cf6:	d000      	beq.n	1cfa <grid_buffer_read_size+0xa>
    1cf8:	e7fe      	b.n	1cf8 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1cfa:	8902      	ldrh	r2, [r0, #8]
    1cfc:	429a      	cmp	r2, r3
    1cfe:	d000      	beq.n	1d02 <grid_buffer_read_size+0x12>
    1d00:	e7fe      	b.n	1d00 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    1d02:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    1d04:	8a05      	ldrh	r5, [r0, #16]
    1d06:	42ab      	cmp	r3, r5
    1d08:	d025      	beq.n	1d56 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1d0a:	8804      	ldrh	r4, [r0, #0]
    1d0c:	b1fc      	cbz	r4, 1d4e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1d0e:	4626      	mov	r6, r4
    1d10:	fb93 f2f4 	sdiv	r2, r3, r4
    1d14:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    1d18:	b291      	uxth	r1, r2
    1d1a:	428d      	cmp	r5, r1
    1d1c:	d01d      	beq.n	1d5a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    1d1e:	6840      	ldr	r0, [r0, #4]
    1d20:	5c42      	ldrb	r2, [r0, r1]
    1d22:	2a0a      	cmp	r2, #10
    1d24:	d114      	bne.n	1d50 <grid_buffer_read_size+0x60>
    1d26:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1d28:	3301      	adds	r3, #1
    1d2a:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    1d2c:	bcf0      	pop	{r4, r5, r6, r7}
    1d2e:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1d30:	fb92 f1f6 	sdiv	r1, r2, r6
    1d34:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1d38:	b28f      	uxth	r7, r1
    1d3a:	42bd      	cmp	r5, r7
    1d3c:	d00f      	beq.n	1d5e <grid_buffer_read_size+0x6e>
    1d3e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1d40:	5dc1      	ldrb	r1, [r0, r7]
    1d42:	290a      	cmp	r1, #10
    1d44:	d0f0      	beq.n	1d28 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1d46:	3301      	adds	r3, #1
    1d48:	b29b      	uxth	r3, r3
    1d4a:	42a3      	cmp	r3, r4
    1d4c:	d1f0      	bne.n	1d30 <grid_buffer_read_size+0x40>
    1d4e:	e7fe      	b.n	1d4e <grid_buffer_read_size+0x5e>
    1d50:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1d52:	2300      	movs	r3, #0
    1d54:	e7f7      	b.n	1d46 <grid_buffer_read_size+0x56>
		return 0;
    1d56:	2000      	movs	r0, #0
    1d58:	e7e8      	b.n	1d2c <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    1d5a:	2000      	movs	r0, #0
    1d5c:	e7e6      	b.n	1d2c <grid_buffer_read_size+0x3c>
    1d5e:	2000      	movs	r0, #0
    1d60:	e7e4      	b.n	1d2c <grid_buffer_read_size+0x3c>

00001d62 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1d62:	8982      	ldrh	r2, [r0, #12]
    1d64:	8943      	ldrh	r3, [r0, #10]
    1d66:	4293      	cmp	r3, r2
    1d68:	d000      	beq.n	1d6c <grid_buffer_read_init+0xa>
    1d6a:	e7fe      	b.n	1d6a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1d6c:	8903      	ldrh	r3, [r0, #8]
    1d6e:	4293      	cmp	r3, r2
    1d70:	d000      	beq.n	1d74 <grid_buffer_read_init+0x12>
    1d72:	e7fe      	b.n	1d72 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1d74:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1d76:	8a05      	ldrh	r5, [r0, #16]
    1d78:	42aa      	cmp	r2, r5
    1d7a:	d031      	beq.n	1de0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1d7c:	8804      	ldrh	r4, [r0, #0]
    1d7e:	b35c      	cbz	r4, 1dd8 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1d80:	4626      	mov	r6, r4
    1d82:	fb92 f3f4 	sdiv	r3, r2, r4
    1d86:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    1d8a:	b299      	uxth	r1, r3
    1d8c:	428d      	cmp	r5, r1
    1d8e:	d029      	beq.n	1de4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1d90:	6847      	ldr	r7, [r0, #4]
    1d92:	460b      	mov	r3, r1
    1d94:	5c79      	ldrb	r1, [r7, r1]
    1d96:	290a      	cmp	r1, #10
    1d98:	d11f      	bne.n	1dda <grid_buffer_read_init+0x78>
    1d9a:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    1d9c:	3301      	adds	r3, #1
    1d9e:	fb93 f2f4 	sdiv	r2, r3, r4
    1da2:	fb04 3312 	mls	r3, r4, r2, r3
    1da6:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1da8:	1c4b      	adds	r3, r1, #1
    1daa:	b29b      	uxth	r3, r3
    1dac:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    1dae:	4618      	mov	r0, r3
    1db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1db2:	fb92 f3f6 	sdiv	r3, r2, r6
    1db6:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    1dba:	fa1f fe83 	uxth.w	lr, r3
    1dbe:	4575      	cmp	r5, lr
    1dc0:	d012      	beq.n	1de8 <grid_buffer_read_init+0x86>
    1dc2:	4673      	mov	r3, lr
    1dc4:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1dc6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    1dca:	f1be 0f0a 	cmp.w	lr, #10
    1dce:	d0e5      	beq.n	1d9c <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1dd0:	3101      	adds	r1, #1
    1dd2:	b289      	uxth	r1, r1
    1dd4:	42a1      	cmp	r1, r4
    1dd6:	d1ec      	bne.n	1db2 <grid_buffer_read_init+0x50>
    1dd8:	e7fe      	b.n	1dd8 <grid_buffer_read_init+0x76>
    1dda:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1ddc:	2100      	movs	r1, #0
    1dde:	e7f7      	b.n	1dd0 <grid_buffer_read_init+0x6e>
		return 0;
    1de0:	2300      	movs	r3, #0
    1de2:	e7e4      	b.n	1dae <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    1de4:	2300      	movs	r3, #0
    1de6:	e7e2      	b.n	1dae <grid_buffer_read_init+0x4c>
    1de8:	2300      	movs	r3, #0
    1dea:	e7e0      	b.n	1dae <grid_buffer_read_init+0x4c>

00001dec <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    1dec:	8983      	ldrh	r3, [r0, #12]
    1dee:	8941      	ldrh	r1, [r0, #10]
    1df0:	4299      	cmp	r1, r3
    1df2:	d00e      	beq.n	1e12 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    1df4:	b410      	push	{r4}
    1df6:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    1df8:	6841      	ldr	r1, [r0, #4]
    1dfa:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    1dfc:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    1dfe:	b29b      	uxth	r3, r3
    1e00:	8814      	ldrh	r4, [r2, #0]
    1e02:	fbb3 f1f4 	udiv	r1, r3, r4
    1e06:	fb04 3311 	mls	r3, r4, r1, r3
    1e0a:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    1e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e10:	4770      	bx	lr
    1e12:	e7fe      	b.n	1e12 <grid_buffer_read_character+0x26>

00001e14 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    1e14:	8983      	ldrh	r3, [r0, #12]
    1e16:	8942      	ldrh	r2, [r0, #10]
    1e18:	429a      	cmp	r2, r3
    1e1a:	d000      	beq.n	1e1e <grid_buffer_read_acknowledge+0xa>
    1e1c:	e7fe      	b.n	1e1c <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    1e1e:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1e20:	2001      	movs	r0, #1
    1e22:	4770      	bx	lr

00001e24 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    1e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e28:	b086      	sub	sp, #24
    1e2a:	4604      	mov	r4, r0
    1e2c:	4690      	mov	r8, r2
    1e2e:	461f      	mov	r7, r3
    1e30:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    1e34:	f600 70cc 	addw	r0, r0, #4044	; 0xfcc
    1e38:	4e50      	ldr	r6, [pc, #320]	; (1f7c <grid_port_init+0x158>)
    1e3a:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    1e3c:	4641      	mov	r1, r8
    1e3e:	f604 70e4 	addw	r0, r4, #4068	; 0xfe4
    1e42:	47b0      	blx	r6
	
	
	por->cooldown = 0;
    1e44:	2300      	movs	r3, #0
    1e46:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    1e48:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1e4c:	72a2      	strb	r2, [r4, #10]
	
	por->direction = dir;
    1e4e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    1e52:	7262      	strb	r2, [r4, #9]
	
	por->usart	= usart;
    1e54:	6067      	str	r7, [r4, #4]
	por->type		= type;
    1e56:	7225      	strb	r5, [r4, #8]
	
	por->tx_double_buffer_status	= 0;
    1e58:	81a3      	strh	r3, [r4, #12]
	por->rx_double_buffer_status	= 0;
    1e5a:	6223      	str	r3, [r4, #32]
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    1e5c:	4619      	mov	r1, r3
    1e5e:	18e2      	adds	r2, r4, r3
    1e60:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1e64:	3301      	adds	r3, #1
    1e66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1e6a:	d1f8      	bne.n	1e5e <grid_port_init+0x3a>
    1e6c:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    1e6e:	4619      	mov	r1, r3
    1e70:	18e2      	adds	r2, r4, r3
    1e72:	f882 17fc 	strb.w	r1, [r2, #2044]	; 0x7fc
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1e76:	3301      	adds	r3, #1
    1e78:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1e7c:	d1f8      	bne.n	1e70 <grid_port_init+0x4c>
	}
	
	por->partner_fi = 0;
    1e7e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    1e82:	2300      	movs	r3, #0
    1e84:	7013      	strb	r3, [r2, #0]
	
	por->partner_hwcfg = 0;
    1e86:	f8c4 3ffc 	str.w	r3, [r4, #4092]	; 0xffc
	por->partner_status = 1;
    1e8a:	2101      	movs	r1, #1
    1e8c:	f241 021b 	movw	r2, #4123	; 0x101b
    1e90:	54a1      	strb	r1, [r4, r2]
	
	por->ping_local_token = 255;
    1e92:	22ff      	movs	r2, #255	; 0xff
    1e94:	f241 0101 	movw	r1, #4097	; 0x1001
    1e98:	5462      	strb	r2, [r4, r1]
	por->ping_partner_token = 255;
    1e9a:	f241 0102 	movw	r1, #4098	; 0x1002
    1e9e:	5462      	strb	r2, [r4, r1]
	
	por->ping_flag = 0;
    1ea0:	f241 0218 	movw	r2, #4120	; 0x1018
    1ea4:	54a3      	strb	r3, [r4, r2]
	
	if (type == GRID_PORT_TYPE_USART){	
    1ea6:	2d01      	cmp	r5, #1
    1ea8:	d006      	beq.n	1eb8 <grid_port_init+0x94>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    1eaa:	2201      	movs	r2, #1
    1eac:	f241 031b 	movw	r3, #4123	; 0x101b
    1eb0:	54e2      	strb	r2, [r4, r3]
	}
	
}
    1eb2:	b006      	add	sp, #24
    1eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    1eb8:	f241 021b 	movw	r2, #4123	; 0x101b
    1ebc:	54a3      	strb	r3, [r4, r2]
		por->partner_fi = 0;
    1ebe:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    1ec2:	7013      	strb	r3, [r2, #0]
		sprintf(por->ping_packet, "%c%c%c%c%02x%02x%02x%c00\n", GRID_CONST_SOH, GRID_CONST_DCT, GRID_CONST_BELL, por->direction, grid_sys_get_hwcfg(), 255, 255, GRID_CONST_EOT);
    1ec4:	4615      	mov	r5, r2
    1ec6:	3503      	adds	r5, #3
    1ec8:	7a66      	ldrb	r6, [r4, #9]
    1eca:	b2f6      	uxtb	r6, r6
    1ecc:	4b2c      	ldr	r3, [pc, #176]	; (1f80 <grid_port_init+0x15c>)
    1ece:	4798      	blx	r3
    1ed0:	2304      	movs	r3, #4
    1ed2:	9305      	str	r3, [sp, #20]
    1ed4:	23ff      	movs	r3, #255	; 0xff
    1ed6:	9304      	str	r3, [sp, #16]
    1ed8:	9303      	str	r3, [sp, #12]
    1eda:	9002      	str	r0, [sp, #8]
    1edc:	9601      	str	r6, [sp, #4]
    1ede:	2307      	movs	r3, #7
    1ee0:	9300      	str	r3, [sp, #0]
    1ee2:	230e      	movs	r3, #14
    1ee4:	2201      	movs	r2, #1
    1ee6:	4927      	ldr	r1, [pc, #156]	; (1f84 <grid_port_init+0x160>)
    1ee8:	4628      	mov	r0, r5
    1eea:	4e27      	ldr	r6, [pc, #156]	; (1f88 <grid_port_init+0x164>)
    1eec:	47b0      	blx	r6
		por->ping_packet_length = strlen(por->ping_packet);	
    1eee:	4628      	mov	r0, r5
    1ef0:	4b26      	ldr	r3, [pc, #152]	; (1f8c <grid_port_init+0x168>)
    1ef2:	4798      	blx	r3
    1ef4:	b2c0      	uxtb	r0, r0
    1ef6:	f241 0317 	movw	r3, #4119	; 0x1017
    1efa:	54e0      	strb	r0, [r4, r3]
		grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_checksum_calculate(por->ping_packet, por->ping_packet_length));
    1efc:	5ce6      	ldrb	r6, [r4, r3]
    1efe:	b2f6      	uxtb	r6, r6
    1f00:	5ce1      	ldrb	r1, [r4, r3]
    1f02:	4628      	mov	r0, r5
    1f04:	4b22      	ldr	r3, [pc, #136]	; (1f90 <grid_port_init+0x16c>)
    1f06:	4798      	blx	r3
    1f08:	4602      	mov	r2, r0
    1f0a:	4631      	mov	r1, r6
    1f0c:	4628      	mov	r0, r5
    1f0e:	4b21      	ldr	r3, [pc, #132]	; (1f94 <grid_port_init+0x170>)
    1f10:	4798      	blx	r3
		if (por->direction == GRID_CONST_NORTH){
    1f12:	7a63      	ldrb	r3, [r4, #9]
    1f14:	b2db      	uxtb	r3, r3
    1f16:	2b11      	cmp	r3, #17
    1f18:	d014      	beq.n	1f44 <grid_port_init+0x120>
		else if (por->direction == GRID_CONST_EAST){
    1f1a:	7a63      	ldrb	r3, [r4, #9]
    1f1c:	b2db      	uxtb	r3, r3
    1f1e:	2b12      	cmp	r3, #18
    1f20:	d019      	beq.n	1f56 <grid_port_init+0x132>
		else if (por->direction == GRID_CONST_SOUTH){
    1f22:	7a63      	ldrb	r3, [r4, #9]
    1f24:	b2db      	uxtb	r3, r3
    1f26:	2b13      	cmp	r3, #19
    1f28:	d01e      	beq.n	1f68 <grid_port_init+0x144>
		else if (por->direction == GRID_CONST_WEST){
    1f2a:	7a63      	ldrb	r3, [r4, #9]
    1f2c:	b2db      	uxtb	r3, r3
    1f2e:	2b14      	cmp	r3, #20
    1f30:	d1bf      	bne.n	1eb2 <grid_port_init+0x8e>
			por->dx = -1;
    1f32:	22ff      	movs	r2, #255	; 0xff
    1f34:	f241 0319 	movw	r3, #4121	; 0x1019
    1f38:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    1f3a:	2200      	movs	r2, #0
    1f3c:	f241 031a 	movw	r3, #4122	; 0x101a
    1f40:	54e2      	strb	r2, [r4, r3]
    1f42:	e7b6      	b.n	1eb2 <grid_port_init+0x8e>
			por->dx = 0;
    1f44:	2200      	movs	r2, #0
    1f46:	f241 0319 	movw	r3, #4121	; 0x1019
    1f4a:	54e2      	strb	r2, [r4, r3]
			por->dy = 1;
    1f4c:	2201      	movs	r2, #1
    1f4e:	f241 031a 	movw	r3, #4122	; 0x101a
    1f52:	54e2      	strb	r2, [r4, r3]
    1f54:	e7ad      	b.n	1eb2 <grid_port_init+0x8e>
			por->dx = 1;
    1f56:	2201      	movs	r2, #1
    1f58:	f241 0319 	movw	r3, #4121	; 0x1019
    1f5c:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    1f5e:	2200      	movs	r2, #0
    1f60:	f241 031a 	movw	r3, #4122	; 0x101a
    1f64:	54e2      	strb	r2, [r4, r3]
    1f66:	e7a4      	b.n	1eb2 <grid_port_init+0x8e>
			por->dx = 0;
    1f68:	2200      	movs	r2, #0
    1f6a:	f241 0319 	movw	r3, #4121	; 0x1019
    1f6e:	54e2      	strb	r2, [r4, r3]
			por->dy = -1;
    1f70:	22ff      	movs	r2, #255	; 0xff
    1f72:	f241 031a 	movw	r3, #4122	; 0x101a
    1f76:	54e2      	strb	r2, [r4, r3]
    1f78:	e79b      	b.n	1eb2 <grid_port_init+0x8e>
    1f7a:	bf00      	nop
    1f7c:	00001619 	.word	0x00001619
    1f80:	00004b21 	.word	0x00004b21
    1f84:	0000eb44 	.word	0x0000eb44
    1f88:	0000d835 	.word	0x0000d835
    1f8c:	0000d87d 	.word	0x0000d87d
    1f90:	00004c11 	.word	0x00004c11
    1f94:	00004c4d 	.word	0x00004c4d

00001f98 <grid_port_init_all>:

void grid_port_init_all(void){
    1f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f9c:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_CONST_NORTH ,0);
    1f9e:	2600      	movs	r6, #0
    1fa0:	9602      	str	r6, [sp, #8]
    1fa2:	2311      	movs	r3, #17
    1fa4:	9301      	str	r3, [sp, #4]
    1fa6:	2401      	movs	r4, #1
    1fa8:	9400      	str	r4, [sp, #0]
    1faa:	4b25      	ldr	r3, [pc, #148]	; (2040 <grid_port_init_all+0xa8>)
    1fac:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1fb0:	4611      	mov	r1, r2
    1fb2:	4824      	ldr	r0, [pc, #144]	; (2044 <grid_port_init_all+0xac>)
    1fb4:	4d24      	ldr	r5, [pc, #144]	; (2048 <grid_port_init_all+0xb0>)
    1fb6:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_CONST_EAST  ,1);
    1fb8:	9402      	str	r4, [sp, #8]
    1fba:	2312      	movs	r3, #18
    1fbc:	9301      	str	r3, [sp, #4]
    1fbe:	9400      	str	r4, [sp, #0]
    1fc0:	4b22      	ldr	r3, [pc, #136]	; (204c <grid_port_init_all+0xb4>)
    1fc2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1fc6:	4611      	mov	r1, r2
    1fc8:	4821      	ldr	r0, [pc, #132]	; (2050 <grid_port_init_all+0xb8>)
    1fca:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_CONST_SOUTH ,2);
    1fcc:	f04f 0902 	mov.w	r9, #2
    1fd0:	f8cd 9008 	str.w	r9, [sp, #8]
    1fd4:	2313      	movs	r3, #19
    1fd6:	9301      	str	r3, [sp, #4]
    1fd8:	9400      	str	r4, [sp, #0]
    1fda:	4b1e      	ldr	r3, [pc, #120]	; (2054 <grid_port_init_all+0xbc>)
    1fdc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1fe0:	4611      	mov	r1, r2
    1fe2:	481d      	ldr	r0, [pc, #116]	; (2058 <grid_port_init_all+0xc0>)
    1fe4:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_CONST_WEST  ,3);
    1fe6:	2703      	movs	r7, #3
    1fe8:	9702      	str	r7, [sp, #8]
    1fea:	2314      	movs	r3, #20
    1fec:	9301      	str	r3, [sp, #4]
    1fee:	9400      	str	r4, [sp, #0]
    1ff0:	4b1a      	ldr	r3, [pc, #104]	; (205c <grid_port_init_all+0xc4>)
    1ff2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1ff6:	4611      	mov	r1, r2
    1ff8:	4819      	ldr	r0, [pc, #100]	; (2060 <grid_port_init_all+0xc8>)
    1ffa:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1);
    1ffc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 2068 <grid_port_init_all+0xd0>
    2000:	f04f 0aff 	mov.w	sl, #255	; 0xff
    2004:	f8cd a008 	str.w	sl, [sp, #8]
    2008:	9601      	str	r6, [sp, #4]
    200a:	9700      	str	r7, [sp, #0]
    200c:	4633      	mov	r3, r6
    200e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    2012:	4611      	mov	r1, r2
    2014:	4640      	mov	r0, r8
    2016:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    2018:	4f12      	ldr	r7, [pc, #72]	; (2064 <grid_port_init_all+0xcc>)
    201a:	f8cd a008 	str.w	sl, [sp, #8]
    201e:	9601      	str	r6, [sp, #4]
    2020:	f8cd 9000 	str.w	r9, [sp]
    2024:	4633      	mov	r3, r6
    2026:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    202a:	4611      	mov	r1, r2
    202c:	4638      	mov	r0, r7
    202e:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    2030:	f241 031b 	movw	r3, #4123	; 0x101b
    2034:	f808 4003 	strb.w	r4, [r8, r3]
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    2038:	54fc      	strb	r4, [r7, r3]
	
	
}
    203a:	b004      	add	sp, #16
    203c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2040:	200010d0 	.word	0x200010d0
    2044:	200012a4 	.word	0x200012a4
    2048:	00001e25 	.word	0x00001e25
    204c:	2000107c 	.word	0x2000107c
    2050:	20006d44 	.word	0x20006d44
    2054:	200011d4 	.word	0x200011d4
    2058:	20004c08 	.word	0x20004c08
    205c:	20001184 	.word	0x20001184
    2060:	20003be8 	.word	0x20003be8
    2064:	20005c28 	.word	0x20005c28
    2068:	200022d0 	.word	0x200022d0

0000206c <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    206c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2070:	b093      	sub	sp, #76	; 0x4c
    2072:	af02      	add	r7, sp, #8
    2074:	4605      	mov	r5, r0
    2076:	468a      	mov	sl, r1
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    2078:	f600 73e4 	addw	r3, r0, #4068	; 0xfe4
    207c:	60bb      	str	r3, [r7, #8]
    207e:	4618      	mov	r0, r3
    2080:	4b5f      	ldr	r3, [pc, #380]	; (2200 <grid_port_process_inbound+0x194>)
    2082:	4798      	blx	r3
	
	if (!packet_size){
    2084:	b920      	cbnz	r0, 2090 <grid_port_process_inbound+0x24>
		
		// NO PACKET IN RX BUFFER
		return 0;
    2086:	2000      	movs	r0, #0
		}	

		return 1;
	}
		
}
    2088:	3744      	adds	r7, #68	; 0x44
    208a:	46bd      	mov	sp, r7
    208c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2090:	4680      	mov	r8, r0
	}else{
    2092:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    2096:	4b5b      	ldr	r3, [pc, #364]	; (2204 <grid_port_process_inbound+0x198>)
    2098:	613b      	str	r3, [r7, #16]
		port_array_default[1] = &GRID_PORT_E;
    209a:	4b5b      	ldr	r3, [pc, #364]	; (2208 <grid_port_process_inbound+0x19c>)
    209c:	617b      	str	r3, [r7, #20]
		port_array_default[2] = &GRID_PORT_S;
    209e:	4b5b      	ldr	r3, [pc, #364]	; (220c <grid_port_process_inbound+0x1a0>)
    20a0:	61bb      	str	r3, [r7, #24]
		port_array_default[3] = &GRID_PORT_W;
    20a2:	4b5b      	ldr	r3, [pc, #364]	; (2210 <grid_port_process_inbound+0x1a4>)
    20a4:	61fb      	str	r3, [r7, #28]
		port_array_default[4] = &GRID_PORT_U;
    20a6:	4b5b      	ldr	r3, [pc, #364]	; (2214 <grid_port_process_inbound+0x1a8>)
    20a8:	623b      	str	r3, [r7, #32]
		port_array_default[5] = &GRID_PORT_H;
    20aa:	4b5b      	ldr	r3, [pc, #364]	; (2218 <grid_port_process_inbound+0x1ac>)
    20ac:	627b      	str	r3, [r7, #36]	; 0x24
    20ae:	f107 0310 	add.w	r3, r7, #16
    20b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
		uint8_t j=0;
    20b6:	2400      	movs	r4, #0
			if (port_array_default[i]->partner_status != 0){
    20b8:	f241 011b 	movw	r1, #4123	; 0x101b
    20bc:	e001      	b.n	20c2 <grid_port_process_inbound+0x56>
		for(uint8_t i=0; i<port_count; i++){
    20be:	4283      	cmp	r3, r0
    20c0:	d00d      	beq.n	20de <grid_port_process_inbound+0x72>
			if (port_array_default[i]->partner_status != 0){
    20c2:	f853 2b04 	ldr.w	r2, [r3], #4
    20c6:	5c56      	ldrb	r6, [r2, r1]
    20c8:	2e00      	cmp	r6, #0
    20ca:	d0f8      	beq.n	20be <grid_port_process_inbound+0x52>
				port_array[j] = port_array_default[i];
    20cc:	f107 0640 	add.w	r6, r7, #64	; 0x40
    20d0:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    20d4:	f846 2c18 	str.w	r2, [r6, #-24]
				j++;
    20d8:	3401      	adds	r4, #1
    20da:	b2e4      	uxtb	r4, r4
    20dc:	e7ef      	b.n	20be <grid_port_process_inbound+0x52>
		for (uint8_t i=0; i<port_count; i++)
    20de:	2c00      	cmp	r4, #0
    20e0:	d07b      	beq.n	21da <grid_port_process_inbound+0x16e>
    20e2:	f107 0928 	add.w	r9, r7, #40	; 0x28
    20e6:	1e66      	subs	r6, r4, #1
    20e8:	b2f6      	uxtb	r6, r6
    20ea:	3601      	adds	r6, #1
    20ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    20f0:	f8df b144 	ldr.w	fp, [pc, #324]	; 2238 <grid_port_process_inbound+0x1cc>
    20f4:	f8c7 900c 	str.w	r9, [r7, #12]
    20f8:	e007      	b.n	210a <grid_port_process_inbound+0x9e>
    20fa:	f600 70cc 	addw	r0, r0, #4044	; 0xfcc
    20fe:	47d8      	blx	fp
    2100:	4580      	cmp	r8, r0
    2102:	d80c      	bhi.n	211e <grid_port_process_inbound+0xb2>
		for (uint8_t i=0; i<port_count; i++)
    2104:	68fb      	ldr	r3, [r7, #12]
    2106:	42b3      	cmp	r3, r6
    2108:	d017      	beq.n	213a <grid_port_process_inbound+0xce>
			if (port_array[i] != por || loopback){
    210a:	68fb      	ldr	r3, [r7, #12]
    210c:	f853 0b04 	ldr.w	r0, [r3], #4
    2110:	60fb      	str	r3, [r7, #12]
    2112:	4285      	cmp	r5, r0
    2114:	d1f1      	bne.n	20fa <grid_port_process_inbound+0x8e>
    2116:	f1ba 0f00 	cmp.w	sl, #0
    211a:	d0f3      	beq.n	2104 <grid_port_process_inbound+0x98>
    211c:	e7ed      	b.n	20fa <grid_port_process_inbound+0x8e>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    211e:	23c8      	movs	r3, #200	; 0xc8
    2120:	9301      	str	r3, [sp, #4]
    2122:	2302      	movs	r3, #2
    2124:	9300      	str	r3, [sp, #0]
    2126:	2300      	movs	r3, #0
    2128:	2264      	movs	r2, #100	; 0x64
    212a:	4611      	mov	r1, r2
    212c:	483b      	ldr	r0, [pc, #236]	; (221c <grid_port_process_inbound+0x1b0>)
    212e:	4c3c      	ldr	r4, [pc, #240]	; (2220 <grid_port_process_inbound+0x1b4>)
    2130:	47a0      	blx	r4
					return 0;
    2132:	2000      	movs	r0, #0
    2134:	f8d7 d000 	ldr.w	sp, [r7]
    2138:	e7a6      	b.n	2088 <grid_port_process_inbound+0x1c>
    213a:	469b      	mov	fp, r3
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    213c:	68b8      	ldr	r0, [r7, #8]
    213e:	4b39      	ldr	r3, [pc, #228]	; (2224 <grid_port_process_inbound+0x1b8>)
    2140:	4798      	blx	r3
    2142:	4580      	cmp	r8, r0
    2144:	d000      	beq.n	2148 <grid_port_process_inbound+0xdc>
    2146:	e7fe      	b.n	2146 <grid_port_process_inbound+0xda>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    2148:	4e37      	ldr	r6, [pc, #220]	; (2228 <grid_port_process_inbound+0x1bc>)
    214a:	e004      	b.n	2156 <grid_port_process_inbound+0xea>
			if (port_array[i] != por || loopback){
    214c:	f1ba 0f00 	cmp.w	sl, #0
    2150:	d105      	bne.n	215e <grid_port_process_inbound+0xf2>
		for (uint8_t i=0; i<port_count; i++)
    2152:	45d9      	cmp	r9, fp
    2154:	d046      	beq.n	21e4 <grid_port_process_inbound+0x178>
			if (port_array[i] != por || loopback){
    2156:	f859 0b04 	ldr.w	r0, [r9], #4
    215a:	4285      	cmp	r5, r0
    215c:	d0f6      	beq.n	214c <grid_port_process_inbound+0xe0>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    215e:	4641      	mov	r1, r8
    2160:	f600 70cc 	addw	r0, r0, #4044	; 0xfcc
    2164:	47b0      	blx	r6
    2166:	e7f4      	b.n	2152 <grid_port_process_inbound+0xe6>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    2168:	6879      	ldr	r1, [r7, #4]
    216a:	f600 70cc 	addw	r0, r0, #4044	; 0xfcc
    216e:	47c8      	blx	r9
			for (uint8_t i=0; i<port_count; i++){
    2170:	68fb      	ldr	r3, [r7, #12]
    2172:	42b3      	cmp	r3, r6
    2174:	d007      	beq.n	2186 <grid_port_process_inbound+0x11a>
				if (port_array[i] != por || loopback){
    2176:	f856 0b04 	ldr.w	r0, [r6], #4
    217a:	4285      	cmp	r5, r0
    217c:	d1f4      	bne.n	2168 <grid_port_process_inbound+0xfc>
    217e:	f1ba 0f00 	cmp.w	sl, #0
    2182:	d0f5      	beq.n	2170 <grid_port_process_inbound+0x104>
    2184:	e7f0      	b.n	2168 <grid_port_process_inbound+0xfc>
    2186:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t j=0; j<packet_size; j++)
    218a:	fa1f f38b 	uxth.w	r3, fp
    218e:	4543      	cmp	r3, r8
    2190:	d208      	bcs.n	21a4 <grid_port_process_inbound+0x138>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    2192:	68b8      	ldr	r0, [r7, #8]
    2194:	4b25      	ldr	r3, [pc, #148]	; (222c <grid_port_process_inbound+0x1c0>)
    2196:	4798      	blx	r3
    2198:	6078      	str	r0, [r7, #4]
			for (uint8_t i=0; i<port_count; i++){
    219a:	2c00      	cmp	r4, #0
    219c:	d0f3      	beq.n	2186 <grid_port_process_inbound+0x11a>
    219e:	f107 0628 	add.w	r6, r7, #40	; 0x28
    21a2:	e7e8      	b.n	2176 <grid_port_process_inbound+0x10a>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    21a4:	68b8      	ldr	r0, [r7, #8]
    21a6:	4b22      	ldr	r3, [pc, #136]	; (2230 <grid_port_process_inbound+0x1c4>)
    21a8:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    21aa:	b1a4      	cbz	r4, 21d6 <grid_port_process_inbound+0x16a>
    21ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    21b0:	4e20      	ldr	r6, [pc, #128]	; (2234 <grid_port_process_inbound+0x1c8>)
    21b2:	68fb      	ldr	r3, [r7, #12]
    21b4:	4698      	mov	r8, r3
    21b6:	e004      	b.n	21c2 <grid_port_process_inbound+0x156>
			if (port_array[i] != por || loopback){
    21b8:	f1ba 0f00 	cmp.w	sl, #0
    21bc:	d105      	bne.n	21ca <grid_port_process_inbound+0x15e>
		for (uint8_t i=0; i<port_count; i++)
    21be:	45a0      	cmp	r8, r4
    21c0:	d007      	beq.n	21d2 <grid_port_process_inbound+0x166>
			if (port_array[i] != por || loopback){
    21c2:	f854 0b04 	ldr.w	r0, [r4], #4
    21c6:	4285      	cmp	r5, r0
    21c8:	d0f6      	beq.n	21b8 <grid_port_process_inbound+0x14c>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    21ca:	f600 70cc 	addw	r0, r0, #4044	; 0xfcc
    21ce:	47b0      	blx	r6
    21d0:	e7f5      	b.n	21be <grid_port_process_inbound+0x152>
		return 1;
    21d2:	2001      	movs	r0, #1
    21d4:	e7ae      	b.n	2134 <grid_port_process_inbound+0xc8>
    21d6:	2001      	movs	r0, #1
    21d8:	e7ac      	b.n	2134 <grid_port_process_inbound+0xc8>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    21da:	68b8      	ldr	r0, [r7, #8]
    21dc:	4b11      	ldr	r3, [pc, #68]	; (2224 <grid_port_process_inbound+0x1b8>)
    21de:	4798      	blx	r3
    21e0:	4540      	cmp	r0, r8
    21e2:	d1b0      	bne.n	2146 <grid_port_process_inbound+0xda>
    21e4:	1e63      	subs	r3, r4, #1
    21e6:	b2db      	uxtb	r3, r3
    21e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
    21ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    21f0:	3b14      	subs	r3, #20
		for (uint8_t i=0; i<port_count; i++)
    21f2:	f04f 0b00 	mov.w	fp, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    21f6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 223c <grid_port_process_inbound+0x1d0>
    21fa:	60fb      	str	r3, [r7, #12]
    21fc:	e7c9      	b.n	2192 <grid_port_process_inbound+0x126>
    21fe:	bf00      	nop
    2200:	00001cf1 	.word	0x00001cf1
    2204:	200012a4 	.word	0x200012a4
    2208:	20006d44 	.word	0x20006d44
    220c:	20004c08 	.word	0x20004c08
    2210:	20003be8 	.word	0x20003be8
    2214:	200022d0 	.word	0x200022d0
    2218:	20005c28 	.word	0x20005c28
    221c:	200032f8 	.word	0x200032f8
    2220:	00004a55 	.word	0x00004a55
    2224:	00001d63 	.word	0x00001d63
    2228:	0000166d 	.word	0x0000166d
    222c:	00001ded 	.word	0x00001ded
    2230:	00001e15 	.word	0x00001e15
    2234:	000016b9 	.word	0x000016b9
    2238:	00001659 	.word	0x00001659
    223c:	0000169d 	.word	0x0000169d

00002240 <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    2240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2244:	b0d9      	sub	sp, #356	; 0x164
    2246:	4682      	mov	sl, r0
			

	// OLD DEBUG IMPLEMENTATION
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    2248:	f600 77cc 	addw	r7, r0, #4044	; 0xfcc
    224c:	4638      	mov	r0, r7
    224e:	4b6d      	ldr	r3, [pc, #436]	; (2404 <grid_port_process_outbound_usb+0x1c4>)
    2250:	4798      	blx	r3
	
	if (!length){		
    2252:	9002      	str	r0, [sp, #8]
    2254:	2800      	cmp	r0, #0
    2256:	f000 80d1 	beq.w	23fc <grid_port_process_outbound_usb+0x1bc>
    225a:	f10a 052b 	add.w	r5, sl, #43	; 0x2b
    225e:	f20a 71fb 	addw	r1, sl, #2043	; 0x7fb
    2262:	462b      	mov	r3, r5


	if (length){
		
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    2264:	2200      	movs	r2, #0
    2266:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    226a:	428b      	cmp	r3, r1
    226c:	d1fb      	bne.n	2266 <grid_port_process_outbound_usb+0x26>
		}
		
		
		
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    226e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2272:	2100      	movs	r1, #0
    2274:	a808      	add	r0, sp, #32
    2276:	4b64      	ldr	r3, [pc, #400]	; (2408 <grid_port_process_outbound_usb+0x1c8>)
    2278:	4798      	blx	r3
			
		
		//uint8_t message[length];
		
		// Let's transfer the packet to local memory
		grid_buffer_read_init(&por->tx_buffer);
    227a:	4638      	mov	r0, r7
    227c:	4b63      	ldr	r3, [pc, #396]	; (240c <grid_port_process_outbound_usb+0x1cc>)
    227e:	4798      	blx	r3
    2280:	f10d 041f 	add.w	r4, sp, #31
    2284:	9b02      	ldr	r3, [sp, #8]
    2286:	1e5e      	subs	r6, r3, #1
    2288:	fa1f f986 	uxth.w	r9, r6
    228c:	ab08      	add	r3, sp, #32
    228e:	eb03 0809 	add.w	r8, r3, r9
		
		for (uint16_t i = 0; i<length; i++){
			
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    2292:	4e5f      	ldr	r6, [pc, #380]	; (2410 <grid_port_process_outbound_usb+0x1d0>)
    2294:	4638      	mov	r0, r7
    2296:	47b0      	blx	r6
    2298:	f804 0f01 	strb.w	r0, [r4, #1]!
			
			por->tx_double_buffer[i] = message[i];
    229c:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (uint16_t i = 0; i<length; i++){
    22a0:	4544      	cmp	r4, r8
    22a2:	d1f7      	bne.n	2294 <grid_port_process_outbound_usb+0x54>
			
		}
				
		// Let's acknowledge the transactions	(should wait for partner to send ack)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    22a4:	4638      	mov	r0, r7
    22a6:	4b5b      	ldr	r3, [pc, #364]	; (2414 <grid_port_process_outbound_usb+0x1d4>)
    22a8:	4798      	blx	r3
// 		return;


		// GRID-2-HOST TRANSLATOR
		
		uint8_t error=0;
    22aa:	2500      	movs	r5, #0
    22ac:	f88d 501e 	strb.w	r5, [sp, #30]
			
		int8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    22b0:	ac08      	add	r4, sp, #32
    22b2:	f10d 031e 	add.w	r3, sp, #30
    22b6:	2202      	movs	r2, #2
    22b8:	2106      	movs	r1, #6
    22ba:	4620      	mov	r0, r4
    22bc:	f8df 8158 	ldr.w	r8, [pc, #344]	; 2418 <grid_port_process_outbound_usb+0x1d8>
    22c0:	47c0      	blx	r8
    22c2:	4607      	mov	r7, r0
		int8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;	
    22c4:	f10d 031e 	add.w	r3, sp, #30
    22c8:	2202      	movs	r2, #2
    22ca:	2108      	movs	r1, #8
    22cc:	4620      	mov	r0, r4
    22ce:	47c0      	blx	r8
				
		uint8_t current_start		= 0;
		uint8_t current_stop		= 0;
		
		
		uint8_t error_flag = 0;
    22d0:	f88d 501f 	strb.w	r5, [sp, #31]
		int8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;	
    22d4:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
					uint8_t midi_param2  = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_PARAM2_offset  , GRID_CLASS_MIDIRELATIVE_PARAM2_length,   &error);
						
					// Relative midi translation magic
				//	midi_channel = ((256-dy*2)%8+grid_sys_state.bank_active*8)%16;		  2bank			
						
					midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    22d8:	b25b      	sxtb	r3, r3
    22da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
    22de:	1aea      	subs	r2, r5, r3
    22e0:	f003 0b03 	and.w	fp, r3, #3
    22e4:	f002 0303 	and.w	r3, r2, #3
    22e8:	bf58      	it	pl
    22ea:	f1c3 0b00 	rsbpl	fp, r3, #0
		int8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    22ee:	f1a7 037f 	sub.w	r3, r7, #127	; 0x7f
					
					
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    22f2:	b25b      	sxtb	r3, r3
    22f4:	011b      	lsls	r3, r3, #4
    22f6:	9303      	str	r3, [sp, #12]
    22f8:	4627      	mov	r7, r4
    22fa:	f109 0601 	add.w	r6, r9, #1
    22fe:	4426      	add	r6, r4
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    2300:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2428 <grid_port_process_outbound_usb+0x1e8>
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    2304:	46a8      	mov	r8, r5
    2306:	e006      	b.n	2316 <grid_port_process_outbound_usb+0xd6>
    2308:	eba4 0807 	sub.w	r8, r4, r7
    230c:	fa5f f888 	uxtb.w	r8, r8
    2310:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    2312:	42b4      	cmp	r4, r6
    2314:	d06d      	beq.n	23f2 <grid_port_process_outbound_usb+0x1b2>
			if (message[i] == GRID_CONST_STX){
    2316:	7823      	ldrb	r3, [r4, #0]
    2318:	2b02      	cmp	r3, #2
    231a:	d0f5      	beq.n	2308 <grid_port_process_outbound_usb+0xc8>
			else if (message[i] == GRID_CONST_ETX && current_start!=0){
    231c:	2b03      	cmp	r3, #3
    231e:	d1f7      	bne.n	2310 <grid_port_process_outbound_usb+0xd0>
    2320:	f1b8 0f00 	cmp.w	r8, #0
    2324:	d0f4      	beq.n	2310 <grid_port_process_outbound_usb+0xd0>
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    2326:	f108 0001 	add.w	r0, r8, #1
    232a:	f10d 021f 	add.w	r2, sp, #31
    232e:	2103      	movs	r1, #3
    2330:	ab08      	add	r3, sp, #32
    2332:	4418      	add	r0, r3
    2334:	47c8      	blx	r9
    2336:	b2c3      	uxtb	r3, r0
    2338:	461d      	mov	r5, r3
    233a:	9301      	str	r3, [sp, #4]
				uint8_t msg_instr = grid_sys_read_hex_string_value(&message[current_start+GRID_INSTR_offset], GRID_INSTR_length, &error_flag);
    233c:	f108 0004 	add.w	r0, r8, #4
    2340:	f10d 021f 	add.w	r2, sp, #31
    2344:	2101      	movs	r1, #1
    2346:	ab08      	add	r3, sp, #32
    2348:	4418      	add	r0, r3
    234a:	47c8      	blx	r9
				if (msg_class == GRID_CLASS_MIDIRELATIVE_code && msg_instr == GRID_INSTR_EXECUTE_code){
    234c:	2d00      	cmp	r5, #0
    234e:	d14d      	bne.n	23ec <grid_port_process_outbound_usb+0x1ac>
    2350:	b2c0      	uxtb	r0, r0
    2352:	280f      	cmp	r0, #15
    2354:	d002      	beq.n	235c <grid_port_process_outbound_usb+0x11c>
// 					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
// 					
// 					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
				}
				
				current_start = 0;
    2356:	f8dd 8004 	ldr.w	r8, [sp, #4]
    235a:	e7d9      	b.n	2310 <grid_port_process_outbound_usb+0xd0>
					uint8_t midi_channel = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length, &error);
    235c:	ab08      	add	r3, sp, #32
    235e:	4443      	add	r3, r8
    2360:	4618      	mov	r0, r3
    2362:	f10d 031e 	add.w	r3, sp, #30
    2366:	2202      	movs	r2, #2
    2368:	2105      	movs	r1, #5
    236a:	4680      	mov	r8, r0
    236c:	4d2a      	ldr	r5, [pc, #168]	; (2418 <grid_port_process_outbound_usb+0x1d8>)
    236e:	47a8      	blx	r5
					uint8_t midi_command = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length,  &error);
    2370:	f10d 031e 	add.w	r3, sp, #30
    2374:	2202      	movs	r2, #2
    2376:	2107      	movs	r1, #7
    2378:	f8cd 8010 	str.w	r8, [sp, #16]
    237c:	4640      	mov	r0, r8
    237e:	47a8      	blx	r5
    2380:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_PARAM1_offset  , GRID_CLASS_MIDIRELATIVE_PARAM1_length,   &error);
    2384:	f10d 031e 	add.w	r3, sp, #30
    2388:	2202      	movs	r2, #2
    238a:	2109      	movs	r1, #9
    238c:	9804      	ldr	r0, [sp, #16]
    238e:	47a8      	blx	r5
    2390:	9005      	str	r0, [sp, #20]
					uint8_t midi_param2  = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_PARAM2_offset  , GRID_CLASS_MIDIRELATIVE_PARAM2_length,   &error);
    2392:	f10d 031e 	add.w	r3, sp, #30
    2396:	2202      	movs	r2, #2
    2398:	210b      	movs	r1, #11
    239a:	9804      	ldr	r0, [sp, #16]
    239c:	47a8      	blx	r5
					midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    239e:	4b1f      	ldr	r3, [pc, #124]	; (241c <grid_port_process_outbound_usb+0x1dc>)
    23a0:	7a5b      	ldrb	r3, [r3, #9]
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    23a2:	f89d 2014 	ldrb.w	r2, [sp, #20]
    23a6:	32e0      	adds	r2, #224	; 0xe0
    23a8:	9903      	ldr	r1, [sp, #12]
    23aa:	440a      	add	r2, r1
    23ac:	491c      	ldr	r1, [pc, #112]	; (2420 <grid_port_process_outbound_usb+0x1e0>)
    23ae:	fb81 1e02 	smull	r1, lr, r1, r2
    23b2:	17d1      	asrs	r1, r2, #31
    23b4:	ebc1 112e 	rsb	r1, r1, lr, asr #4
    23b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    23bc:	eba2 1241 	sub.w	r2, r2, r1, lsl #5
					midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    23c0:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
    23c4:	4259      	negs	r1, r3
    23c6:	f003 030f 	and.w	r3, r3, #15
    23ca:	f001 010f 	and.w	r1, r1, #15
    23ce:	bf58      	it	pl
    23d0:	424b      	negpl	r3, r1
					audiodf_midi_write(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    23d2:	ea48 0103 	orr.w	r1, r8, r3
    23d6:	b2c3      	uxtb	r3, r0
    23d8:	b2d2      	uxtb	r2, r2
    23da:	b2c9      	uxtb	r1, r1
    23dc:	ea4f 1018 	mov.w	r0, r8, lsr #4
    23e0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 242c <grid_port_process_outbound_usb+0x1ec>
    23e4:	47c0      	blx	r8
				current_start = 0;
    23e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
    23ea:	e791      	b.n	2310 <grid_port_process_outbound_usb+0xd0>
    23ec:	f04f 0800 	mov.w	r8, #0
    23f0:	e78e      	b.n	2310 <grid_port_process_outbound_usb+0xd0>
		
		
					
		
		// Let's send the packet through USB
		cdcdf_acm_write(por->tx_double_buffer, length);
    23f2:	9902      	ldr	r1, [sp, #8]
    23f4:	f10a 002c 	add.w	r0, sl, #44	; 0x2c
    23f8:	4b0a      	ldr	r3, [pc, #40]	; (2424 <grid_port_process_outbound_usb+0x1e4>)
    23fa:	4798      	blx	r3
				
		
	}
	
	
}
    23fc:	b059      	add	sp, #356	; 0x164
    23fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2402:	bf00      	nop
    2404:	00001cf1 	.word	0x00001cf1
    2408:	0000d447 	.word	0x0000d447
    240c:	00001d63 	.word	0x00001d63
    2410:	00001ded 	.word	0x00001ded
    2414:	00001e15 	.word	0x00001e15
    2418:	00004f69 	.word	0x00004f69
    241c:	200032f8 	.word	0x200032f8
    2420:	2aaaaaab 	.word	0x2aaaaaab
    2424:	0000ba4d 	.word	0x0000ba4d
    2428:	00004aa9 	.word	0x00004aa9
    242c:	0000c225 	.word	0x0000c225

00002430 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    2430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2434:	b0dd      	sub	sp, #372	; 0x174
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    2436:	f600 75cc 	addw	r5, r0, #4044	; 0xfcc
    243a:	4628      	mov	r0, r5
    243c:	4bb0      	ldr	r3, [pc, #704]	; (2700 <grid_port_process_outbound_ui+0x2d0>)
    243e:	4798      	blx	r3
	
	if (!length){
    2440:	b910      	cbnz	r0, 2448 <grid_port_process_outbound_ui+0x18>

		
	}
	
	
}
    2442:	b05d      	add	sp, #372	; 0x174
    2444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2448:	4606      	mov	r6, r0
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    244a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    244e:	2100      	movs	r1, #0
    2450:	a80c      	add	r0, sp, #48	; 0x30
    2452:	4bac      	ldr	r3, [pc, #688]	; (2704 <grid_port_process_outbound_ui+0x2d4>)
    2454:	4798      	blx	r3
		grid_buffer_read_init(&por->tx_buffer);
    2456:	4628      	mov	r0, r5
    2458:	4bab      	ldr	r3, [pc, #684]	; (2708 <grid_port_process_outbound_ui+0x2d8>)
    245a:	4798      	blx	r3
    245c:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
    2460:	3e01      	subs	r6, #1
    2462:	fa1f f886 	uxth.w	r8, r6
    2466:	ab0c      	add	r3, sp, #48	; 0x30
    2468:	eb03 0608 	add.w	r6, r3, r8
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    246c:	4fa7      	ldr	r7, [pc, #668]	; (270c <grid_port_process_outbound_ui+0x2dc>)
    246e:	4628      	mov	r0, r5
    2470:	47b8      	blx	r7
    2472:	f804 0f01 	strb.w	r0, [r4, #1]!
		for (uint16_t i = 0; i<length; i++){
    2476:	42b4      	cmp	r4, r6
    2478:	d1f9      	bne.n	246e <grid_port_process_outbound_ui+0x3e>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    247a:	4628      	mov	r0, r5
    247c:	4ba4      	ldr	r3, [pc, #656]	; (2710 <grid_port_process_outbound_ui+0x2e0>)
    247e:	4798      	blx	r3
		uint8_t error=0;
    2480:	2300      	movs	r3, #0
    2482:	f88d 301e 	strb.w	r3, [sp, #30]
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    2486:	f10d 031e 	add.w	r3, sp, #30
    248a:	2202      	movs	r2, #2
    248c:	2106      	movs	r1, #6
    248e:	a80c      	add	r0, sp, #48	; 0x30
    2490:	4ca0      	ldr	r4, [pc, #640]	; (2714 <grid_port_process_outbound_ui+0x2e4>)
    2492:	47a0      	blx	r4
    2494:	fa5f fb80 	uxtb.w	fp, r0
		uint8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    2498:	f10d 031e 	add.w	r3, sp, #30
    249c:	2202      	movs	r2, #2
    249e:	2108      	movs	r1, #8
    24a0:	a80c      	add	r0, sp, #48	; 0x30
    24a2:	47a0      	blx	r4
    24a4:	b2c0      	uxtb	r0, r0
		if (dx - GRID_SYS_DEFAULT_POSITION == 0 && dy - GRID_SYS_DEFAULT_POSITION == 0){
    24a6:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
    24aa:	d014      	beq.n	24d6 <grid_port_process_outbound_ui+0xa6>
		else if (dx == 255 && dy==255){
    24ac:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    24b0:	d01a      	beq.n	24e8 <grid_port_process_outbound_ui+0xb8>
		else if (dx == 0 && dy==0){
    24b2:	f1bb 0f00 	cmp.w	fp, #0
    24b6:	d11f      	bne.n	24f8 <grid_port_process_outbound_ui+0xc8>
		uint8_t position_is_global = 0;
    24b8:	fab0 f380 	clz	r3, r0
    24bc:	095b      	lsrs	r3, r3, #5
    24be:	9304      	str	r3, [sp, #16]
		uint8_t error_flag = 0;	
    24c0:	2500      	movs	r5, #0
    24c2:	f88d 501f 	strb.w	r5, [sp, #31]
    24c6:	af0c      	add	r7, sp, #48	; 0x30
    24c8:	f108 0601 	add.w	r6, r8, #1
    24cc:	443e      	add	r6, r7
    24ce:	463c      	mov	r4, r7
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    24d0:	f8df a268 	ldr.w	sl, [pc, #616]	; 273c <grid_port_process_outbound_ui+0x30c>
    24d4:	e019      	b.n	250a <grid_port_process_outbound_ui+0xda>
			position_is_me = 1;
    24d6:	287f      	cmp	r0, #127	; 0x7f
    24d8:	bf14      	ite	ne
    24da:	f04f 0b00 	movne.w	fp, #0
    24de:	f04f 0b01 	moveq.w	fp, #1
		uint8_t position_is_global = 0;
    24e2:	2300      	movs	r3, #0
    24e4:	9304      	str	r3, [sp, #16]
    24e6:	e7eb      	b.n	24c0 <grid_port_process_outbound_ui+0x90>
    24e8:	28ff      	cmp	r0, #255	; 0xff
    24ea:	bf14      	ite	ne
    24ec:	2300      	movne	r3, #0
    24ee:	2301      	moveq	r3, #1
    24f0:	9304      	str	r3, [sp, #16]
		uint8_t position_is_me = 0;
    24f2:	f04f 0b00 	mov.w	fp, #0
    24f6:	e7e3      	b.n	24c0 <grid_port_process_outbound_ui+0x90>
		uint8_t position_is_global = 0;
    24f8:	2300      	movs	r3, #0
    24fa:	9304      	str	r3, [sp, #16]
		uint8_t position_is_me = 0;
    24fc:	469b      	mov	fp, r3
    24fe:	e7df      	b.n	24c0 <grid_port_process_outbound_ui+0x90>
    2500:	1be5      	subs	r5, r4, r7
    2502:	b2ed      	uxtb	r5, r5
    2504:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    2506:	42b4      	cmp	r4, r6
    2508:	d09b      	beq.n	2442 <grid_port_process_outbound_ui+0x12>
			if (message[i] == GRID_CONST_STX){
    250a:	7823      	ldrb	r3, [r4, #0]
    250c:	2b02      	cmp	r3, #2
    250e:	d0f7      	beq.n	2500 <grid_port_process_outbound_ui+0xd0>
			else if (message[i] == GRID_CONST_ETX && current_start!=0){
    2510:	2b03      	cmp	r3, #3
    2512:	d1f7      	bne.n	2504 <grid_port_process_outbound_ui+0xd4>
    2514:	2d00      	cmp	r5, #0
    2516:	d0f5      	beq.n	2504 <grid_port_process_outbound_ui+0xd4>
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    2518:	9503      	str	r5, [sp, #12]
    251a:	1c68      	adds	r0, r5, #1
    251c:	f10d 021f 	add.w	r2, sp, #31
    2520:	2103      	movs	r1, #3
    2522:	ab0c      	add	r3, sp, #48	; 0x30
    2524:	4418      	add	r0, r3
    2526:	47d0      	blx	sl
    2528:	fa5f f880 	uxtb.w	r8, r0
				uint8_t msg_instr = grid_sys_read_hex_string_value(&message[current_start+GRID_INSTR_offset], GRID_INSTR_length, &error_flag);
    252c:	1d28      	adds	r0, r5, #4
    252e:	f10d 021f 	add.w	r2, sp, #31
    2532:	2101      	movs	r1, #1
    2534:	ab0c      	add	r3, sp, #48	; 0x30
    2536:	4418      	add	r0, r3
    2538:	47d0      	blx	sl
    253a:	fa5f f980 	uxtb.w	r9, r0
				if (msg_class == GRID_CLASS_BANKACTIVE_code){
    253e:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
    2542:	d010      	beq.n	2566 <grid_port_process_outbound_ui+0x136>
				else if (msg_class == GRID_CLASS_BANKENABLED_code && msg_instr == GRID_INSTR_EXECUTE_code){
    2544:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
    2548:	d05e      	beq.n	2608 <grid_port_process_outbound_ui+0x1d8>
				else if (msg_class == GRID_CLASS_BANKCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code){
    254a:	f1b8 0f32 	cmp.w	r8, #50	; 0x32
    254e:	f000 808c 	beq.w	266a <grid_port_process_outbound_ui+0x23a>
				else if (msg_class == GRID_CLASS_LEDPHASE_code && msg_instr == GRID_INSTR_EXECUTE_code && position_is_me){
    2552:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    2556:	f040 811a 	bne.w	278e <grid_port_process_outbound_ui+0x35e>
    255a:	f1b9 0f0f 	cmp.w	r9, #15
    255e:	f000 80ca 	beq.w	26f6 <grid_port_process_outbound_ui+0x2c6>
				current_start = 0;
    2562:	2500      	movs	r5, #0
    2564:	e7ce      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKACTIVE_BANKNUMBER_offset], GRID_CLASS_BANKACTIVE_BANKNUMBER_length, &error_flag);
    2566:	ab5c      	add	r3, sp, #368	; 0x170
    2568:	1958      	adds	r0, r3, r5
    256a:	f10d 021f 	add.w	r2, sp, #31
    256e:	2102      	movs	r1, #2
    2570:	f2a0 103b 	subw	r0, r0, #315	; 0x13b
    2574:	47d0      	blx	sl
    2576:	4605      	mov	r5, r0
					if (msg_instr == GRID_INSTR_EXECUTE_code){ //SET BANK
    2578:	f1b9 0f0f 	cmp.w	r9, #15
    257c:	d004      	beq.n	2588 <grid_port_process_outbound_ui+0x158>
					else if (msg_instr == GRID_INSTR_FETCH_code){ //GET BANK
    257e:	f1b9 0f0e 	cmp.w	r9, #14
    2582:	d023      	beq.n	25cc <grid_port_process_outbound_ui+0x19c>
				current_start = 0;
    2584:	2500      	movs	r5, #0
    2586:	e7bd      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
						if (grid_sys_get_bank_num(&grid_sys_state) == 255){
    2588:	4863      	ldr	r0, [pc, #396]	; (2718 <grid_port_process_outbound_ui+0x2e8>)
    258a:	4b64      	ldr	r3, [pc, #400]	; (271c <grid_port_process_outbound_ui+0x2ec>)
    258c:	4798      	blx	r3
    258e:	28ff      	cmp	r0, #255	; 0xff
    2590:	d005      	beq.n	259e <grid_port_process_outbound_ui+0x16e>
						grid_sys_set_bank(&grid_sys_state, banknumber);
    2592:	b2e9      	uxtb	r1, r5
    2594:	4860      	ldr	r0, [pc, #384]	; (2718 <grid_port_process_outbound_ui+0x2e8>)
    2596:	4b62      	ldr	r3, [pc, #392]	; (2720 <grid_port_process_outbound_ui+0x2f0>)
    2598:	4798      	blx	r3
				current_start = 0;
    259a:	2500      	movs	r5, #0
    259c:	e7b2      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
							uint8_t event_index = grid_ui_event_find(&grid_core_state.element[0], GRID_UI_EVENT_HEARTBEAT);
    259e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 2740 <grid_port_process_outbound_ui+0x310>
    25a2:	f8d9 0004 	ldr.w	r0, [r9, #4]
    25a6:	2101      	movs	r1, #1
    25a8:	4b5e      	ldr	r3, [pc, #376]	; (2724 <grid_port_process_outbound_ui+0x2f4>)
    25aa:	4798      	blx	r3
    25ac:	4680      	mov	r8, r0
							grid_ui_event_template_action(&grid_core_state.element[0], event_index);	
    25ae:	f8d9 0004 	ldr.w	r0, [r9, #4]
    25b2:	4641      	mov	r1, r8
    25b4:	4b5c      	ldr	r3, [pc, #368]	; (2728 <grid_port_process_outbound_ui+0x2f8>)
    25b6:	4798      	blx	r3
							grid_ui_event_trigger(&grid_core_state.element[0].event_list[event_index]);
    25b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    25bc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    25c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    25c2:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
    25c6:	4b59      	ldr	r3, [pc, #356]	; (272c <grid_port_process_outbound_ui+0x2fc>)
    25c8:	4798      	blx	r3
    25ca:	e7e2      	b.n	2592 <grid_port_process_outbound_ui+0x162>
						if (grid_sys_get_bank_num(&grid_sys_state) != 255){
    25cc:	4852      	ldr	r0, [pc, #328]	; (2718 <grid_port_process_outbound_ui+0x2e8>)
    25ce:	4b53      	ldr	r3, [pc, #332]	; (271c <grid_port_process_outbound_ui+0x2ec>)
    25d0:	4798      	blx	r3
    25d2:	28ff      	cmp	r0, #255	; 0xff
    25d4:	f000 816f 	beq.w	28b6 <grid_port_process_outbound_ui+0x486>
							uint8_t event_index = grid_ui_event_find(&grid_core_state.element[0], GRID_UI_EVENT_CFG_RESPONSE);
    25d8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2740 <grid_port_process_outbound_ui+0x310>
    25dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
    25e0:	210a      	movs	r1, #10
    25e2:	4b50      	ldr	r3, [pc, #320]	; (2724 <grid_port_process_outbound_ui+0x2f4>)
    25e4:	4798      	blx	r3
    25e6:	4605      	mov	r5, r0
							grid_ui_event_template_action(&grid_core_state.element[0], event_index);
    25e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    25ec:	4629      	mov	r1, r5
    25ee:	4b4e      	ldr	r3, [pc, #312]	; (2728 <grid_port_process_outbound_ui+0x2f8>)
    25f0:	4798      	blx	r3
							grid_ui_event_trigger(&grid_core_state.element[0].event_list[event_index]);
    25f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    25f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    25fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
    25fc:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    2600:	4b4a      	ldr	r3, [pc, #296]	; (272c <grid_port_process_outbound_ui+0x2fc>)
    2602:	4798      	blx	r3
				current_start = 0;
    2604:	2500      	movs	r5, #0
    2606:	e77d      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
				else if (msg_class == GRID_CLASS_BANKENABLED_code && msg_instr == GRID_INSTR_EXECUTE_code){
    2608:	f1b9 0f0f 	cmp.w	r9, #15
    260c:	d001      	beq.n	2612 <grid_port_process_outbound_ui+0x1e2>
				current_start = 0;
    260e:	2500      	movs	r5, #0
    2610:	e778      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKENABLED_BANKNUMBER_offset], GRID_CLASS_BANKENABLED_BANKNUMBER_length, &error_flag);
    2612:	9d03      	ldr	r5, [sp, #12]
    2614:	1d68      	adds	r0, r5, #5
    2616:	f10d 021f 	add.w	r2, sp, #31
    261a:	2102      	movs	r1, #2
    261c:	ab0c      	add	r3, sp, #48	; 0x30
    261e:	4418      	add	r0, r3
    2620:	47d0      	blx	sl
    2622:	fa5f f880 	uxtb.w	r8, r0
					uint8_t isenabled  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKENABLED_ISENABLED_offset], GRID_CLASS_BANKENABLED_ISENABLED_length, &error_flag);
    2626:	1de8      	adds	r0, r5, #7
    2628:	f10d 021f 	add.w	r2, sp, #31
    262c:	2102      	movs	r1, #2
    262e:	ab0c      	add	r3, sp, #48	; 0x30
    2630:	4418      	add	r0, r3
    2632:	47d0      	blx	sl
    2634:	b2c5      	uxtb	r5, r0
					if (isenabled == 1){
    2636:	2d01      	cmp	r5, #1
    2638:	d002      	beq.n	2640 <grid_port_process_outbound_ui+0x210>
					}else if (isenabled == 0){	
    263a:	b13d      	cbz	r5, 264c <grid_port_process_outbound_ui+0x21c>
				current_start = 0;
    263c:	2500      	movs	r5, #0
    263e:	e761      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
						grid_sys_bank_enable(&grid_sys_state, banknumber);
    2640:	4641      	mov	r1, r8
    2642:	4835      	ldr	r0, [pc, #212]	; (2718 <grid_port_process_outbound_ui+0x2e8>)
    2644:	4b3a      	ldr	r3, [pc, #232]	; (2730 <grid_port_process_outbound_ui+0x300>)
    2646:	4798      	blx	r3
				current_start = 0;
    2648:	2500      	movs	r5, #0
    264a:	e75b      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
						if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    264c:	4832      	ldr	r0, [pc, #200]	; (2718 <grid_port_process_outbound_ui+0x2e8>)
    264e:	4b33      	ldr	r3, [pc, #204]	; (271c <grid_port_process_outbound_ui+0x2ec>)
    2650:	4798      	blx	r3
    2652:	4580      	cmp	r8, r0
    2654:	d004      	beq.n	2660 <grid_port_process_outbound_ui+0x230>
						grid_sys_bank_disable(&grid_sys_state, banknumber);
    2656:	4641      	mov	r1, r8
    2658:	482f      	ldr	r0, [pc, #188]	; (2718 <grid_port_process_outbound_ui+0x2e8>)
    265a:	4b36      	ldr	r3, [pc, #216]	; (2734 <grid_port_process_outbound_ui+0x304>)
    265c:	4798      	blx	r3
    265e:	e751      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
							grid_sys_set_bank(&grid_sys_state, 255);
    2660:	21ff      	movs	r1, #255	; 0xff
    2662:	482d      	ldr	r0, [pc, #180]	; (2718 <grid_port_process_outbound_ui+0x2e8>)
    2664:	4b2e      	ldr	r3, [pc, #184]	; (2720 <grid_port_process_outbound_ui+0x2f0>)
    2666:	4798      	blx	r3
    2668:	e7f5      	b.n	2656 <grid_port_process_outbound_ui+0x226>
				else if (msg_class == GRID_CLASS_BANKCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code){
    266a:	f1b9 0f0f 	cmp.w	r9, #15
    266e:	d001      	beq.n	2674 <grid_port_process_outbound_ui+0x244>
				current_start = 0;
    2670:	2500      	movs	r5, #0
    2672:	e747      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_NUM_offset], GRID_CLASS_BANKCOLOR_NUM_length, &error_flag);
    2674:	9d03      	ldr	r5, [sp, #12]
    2676:	1d68      	adds	r0, r5, #5
    2678:	f10d 021f 	add.w	r2, sp, #31
    267c:	2102      	movs	r1, #2
    267e:	ab0c      	add	r3, sp, #48	; 0x30
    2680:	4418      	add	r0, r3
    2682:	47d0      	blx	sl
    2684:	fa5f f880 	uxtb.w	r8, r0
					uint8_t red		   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_RED_offset], GRID_CLASS_BANKCOLOR_RED_length, &error_flag);
    2688:	1de8      	adds	r0, r5, #7
    268a:	f10d 021f 	add.w	r2, sp, #31
    268e:	2102      	movs	r1, #2
    2690:	ab0c      	add	r3, sp, #48	; 0x30
    2692:	4418      	add	r0, r3
    2694:	47d0      	blx	sl
    2696:	4681      	mov	r9, r0
					uint8_t green	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_GRE_offset], GRID_CLASS_BANKCOLOR_GRE_length, &error_flag);
    2698:	9503      	str	r5, [sp, #12]
    269a:	f105 0009 	add.w	r0, r5, #9
    269e:	f10d 021f 	add.w	r2, sp, #31
    26a2:	2102      	movs	r1, #2
    26a4:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    26a8:	4470      	add	r0, lr
    26aa:	47d0      	blx	sl
    26ac:	4605      	mov	r5, r0
					uint8_t blue	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_BLU_offset], GRID_CLASS_BANKCOLOR_BLU_length, &error_flag);
    26ae:	9b03      	ldr	r3, [sp, #12]
    26b0:	f103 000b 	add.w	r0, r3, #11
    26b4:	f10d 021f 	add.w	r2, sp, #31
    26b8:	2102      	movs	r1, #2
    26ba:	ab0c      	add	r3, sp, #48	; 0x30
    26bc:	4418      	add	r0, r3
    26be:	47d0      	blx	sl
					grid_sys_bank_set_color(&grid_sys_state, banknumber, (red<<16) + (green<<8) + (blue<<0) );
    26c0:	ea4f 4209 	mov.w	r2, r9, lsl #16
    26c4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    26c8:	022b      	lsls	r3, r5, #8
    26ca:	b29b      	uxth	r3, r3
    26cc:	431a      	orrs	r2, r3
    26ce:	4d12      	ldr	r5, [pc, #72]	; (2718 <grid_port_process_outbound_ui+0x2e8>)
    26d0:	fa52 f280 	uxtab	r2, r2, r0
    26d4:	4641      	mov	r1, r8
    26d6:	4628      	mov	r0, r5
    26d8:	4b17      	ldr	r3, [pc, #92]	; (2738 <grid_port_process_outbound_ui+0x308>)
    26da:	4798      	blx	r3
					if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    26dc:	4628      	mov	r0, r5
    26de:	4b0f      	ldr	r3, [pc, #60]	; (271c <grid_port_process_outbound_ui+0x2ec>)
    26e0:	4798      	blx	r3
    26e2:	4580      	cmp	r8, r0
    26e4:	d001      	beq.n	26ea <grid_port_process_outbound_ui+0x2ba>
				current_start = 0;
    26e6:	2500      	movs	r5, #0
    26e8:	e70c      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
						grid_sys_set_bank(&grid_sys_state, banknumber);
    26ea:	4641      	mov	r1, r8
    26ec:	4628      	mov	r0, r5
    26ee:	4b0c      	ldr	r3, [pc, #48]	; (2720 <grid_port_process_outbound_ui+0x2f0>)
    26f0:	4798      	blx	r3
				current_start = 0;
    26f2:	2500      	movs	r5, #0
    26f4:	e706      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
				else if (msg_class == GRID_CLASS_LEDPHASE_code && msg_instr == GRID_INSTR_EXECUTE_code && position_is_me){
    26f6:	f1bb 0f00 	cmp.w	fp, #0
    26fa:	d123      	bne.n	2744 <grid_port_process_outbound_ui+0x314>
				current_start = 0;
    26fc:	465d      	mov	r5, fp
    26fe:	e701      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
    2700:	00001cf1 	.word	0x00001cf1
    2704:	0000d447 	.word	0x0000d447
    2708:	00001d63 	.word	0x00001d63
    270c:	00001ded 	.word	0x00001ded
    2710:	00001e15 	.word	0x00001e15
    2714:	00004f69 	.word	0x00004f69
    2718:	200032f8 	.word	0x200032f8
    271c:	00004893 	.word	0x00004893
    2720:	000048f1 	.word	0x000048f1
    2724:	00005285 	.word	0x00005285
    2728:	00005709 	.word	0x00005709
    272c:	000052af 	.word	0x000052af
    2730:	0000485d 	.word	0x0000485d
    2734:	0000486d 	.word	0x0000486d
    2738:	0000487d 	.word	0x0000487d
    273c:	00004aa9 	.word	0x00004aa9
    2740:	20007d64 	.word	0x20007d64
					uint8_t led_num  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_NUM_offset], GRID_CLASS_LEDPHASE_NUM_length, &error_flag);
    2744:	9b03      	ldr	r3, [sp, #12]
    2746:	1d58      	adds	r0, r3, #5
    2748:	f10d 021f 	add.w	r2, sp, #31
    274c:	2102      	movs	r1, #2
    274e:	ad0c      	add	r5, sp, #48	; 0x30
    2750:	4428      	add	r0, r5
    2752:	47d0      	blx	sl
    2754:	4605      	mov	r5, r0
					uint8_t led_lay = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_LAY_offset], GRID_CLASS_LEDPHASE_LAY_length, &error_flag);
    2756:	9b03      	ldr	r3, [sp, #12]
    2758:	1dd8      	adds	r0, r3, #7
    275a:	f10d 021f 	add.w	r2, sp, #31
    275e:	2102      	movs	r1, #2
    2760:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    2764:	4470      	add	r0, lr
    2766:	47d0      	blx	sl
    2768:	4680      	mov	r8, r0
					uint8_t led_pha  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_PHA_offset], GRID_CLASS_LEDPHASE_PHA_length, &error_flag);
    276a:	9b03      	ldr	r3, [sp, #12]
    276c:	f103 0009 	add.w	r0, r3, #9
    2770:	f10d 021f 	add.w	r2, sp, #31
    2774:	2102      	movs	r1, #2
    2776:	ab0c      	add	r3, sp, #48	; 0x30
    2778:	4418      	add	r0, r3
    277a:	47d0      	blx	sl
					grid_led_set_phase(&grid_led_state, led_num, led_lay, led_pha);
    277c:	b2c3      	uxtb	r3, r0
    277e:	fa5f f288 	uxtb.w	r2, r8
    2782:	b2e9      	uxtb	r1, r5
    2784:	4851      	ldr	r0, [pc, #324]	; (28cc <grid_port_process_outbound_ui+0x49c>)
    2786:	4d52      	ldr	r5, [pc, #328]	; (28d0 <grid_port_process_outbound_ui+0x4a0>)
    2788:	47a8      	blx	r5
				current_start = 0;
    278a:	2500      	movs	r5, #0
				else if (msg_class == GRID_CLASS_LEDPHASE_code && msg_instr == GRID_INSTR_EXECUTE_code && position_is_me){
    278c:	e6ba      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
				else if (msg_class == GRID_CLASS_LEDCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && position_is_me){
    278e:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
    2792:	d146      	bne.n	2822 <grid_port_process_outbound_ui+0x3f2>
    2794:	f1b9 0f0f 	cmp.w	r9, #15
    2798:	d001      	beq.n	279e <grid_port_process_outbound_ui+0x36e>
				current_start = 0;
    279a:	2500      	movs	r5, #0
    279c:	e6b2      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
				else if (msg_class == GRID_CLASS_LEDCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && position_is_me){
    279e:	f1bb 0f00 	cmp.w	fp, #0
    27a2:	d101      	bne.n	27a8 <grid_port_process_outbound_ui+0x378>
				current_start = 0;
    27a4:	465d      	mov	r5, fp
    27a6:	e6ad      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
					uint8_t led_num = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_NUM_offset], GRID_CLASS_LEDCOLOR_NUM_length, &error_flag);
    27a8:	9d03      	ldr	r5, [sp, #12]
    27aa:	1d68      	adds	r0, r5, #5
    27ac:	f10d 021f 	add.w	r2, sp, #31
    27b0:	2102      	movs	r1, #2
    27b2:	ab0c      	add	r3, sp, #48	; 0x30
    27b4:	4418      	add	r0, r3
    27b6:	47d0      	blx	sl
    27b8:	9005      	str	r0, [sp, #20]
					uint8_t led_lay = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_LAY_offset], GRID_CLASS_LEDCOLOR_LAY_length, &error_flag);
    27ba:	1de8      	adds	r0, r5, #7
    27bc:	f10d 021f 	add.w	r2, sp, #31
    27c0:	2102      	movs	r1, #2
    27c2:	ab0c      	add	r3, sp, #48	; 0x30
    27c4:	4418      	add	r0, r3
    27c6:	47d0      	blx	sl
    27c8:	4681      	mov	r9, r0
					uint8_t led_red	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_RED_offset], GRID_CLASS_LEDCOLOR_RED_length, &error_flag);
    27ca:	f105 0009 	add.w	r0, r5, #9
    27ce:	f10d 021f 	add.w	r2, sp, #31
    27d2:	2102      	movs	r1, #2
    27d4:	ab0c      	add	r3, sp, #48	; 0x30
    27d6:	4418      	add	r0, r3
    27d8:	47d0      	blx	sl
    27da:	4680      	mov	r8, r0
					uint8_t led_gre	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_GRE_offset], GRID_CLASS_LEDCOLOR_GRE_length, &error_flag);
    27dc:	9503      	str	r5, [sp, #12]
    27de:	f105 000b 	add.w	r0, r5, #11
    27e2:	f10d 021f 	add.w	r2, sp, #31
    27e6:	2102      	movs	r1, #2
    27e8:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    27ec:	4470      	add	r0, lr
    27ee:	47d0      	blx	sl
    27f0:	4605      	mov	r5, r0
					uint8_t led_blu	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_BLU_offset], GRID_CLASS_LEDCOLOR_BLU_length, &error_flag);
    27f2:	9b03      	ldr	r3, [sp, #12]
    27f4:	f103 000d 	add.w	r0, r3, #13
    27f8:	f10d 021f 	add.w	r2, sp, #31
    27fc:	2102      	movs	r1, #2
    27fe:	ab0c      	add	r3, sp, #48	; 0x30
    2800:	4418      	add	r0, r3
    2802:	47d0      	blx	sl
					grid_led_set_color(&grid_led_state, led_num, led_lay, led_red, led_gre, led_blu);
    2804:	b2c0      	uxtb	r0, r0
    2806:	9001      	str	r0, [sp, #4]
    2808:	b2ed      	uxtb	r5, r5
    280a:	9500      	str	r5, [sp, #0]
    280c:	fa5f f388 	uxtb.w	r3, r8
    2810:	fa5f f289 	uxtb.w	r2, r9
    2814:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2818:	482c      	ldr	r0, [pc, #176]	; (28cc <grid_port_process_outbound_ui+0x49c>)
    281a:	4d2e      	ldr	r5, [pc, #184]	; (28d4 <grid_port_process_outbound_ui+0x4a4>)
    281c:	47a8      	blx	r5
				current_start = 0;
    281e:	2500      	movs	r5, #0
				else if (msg_class == GRID_CLASS_LEDCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && position_is_me){
    2820:	e670      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
				else if (msg_class == GRID_CLASS_LOADGLOBAL_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    2822:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
    2826:	d110      	bne.n	284a <grid_port_process_outbound_ui+0x41a>
    2828:	f1b9 0f0f 	cmp.w	r9, #15
    282c:	d001      	beq.n	2832 <grid_port_process_outbound_ui+0x402>
				current_start = 0;
    282e:	2500      	movs	r5, #0
    2830:	e668      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
				else if (msg_class == GRID_CLASS_LOADGLOBAL_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    2832:	f1bb 0f00 	cmp.w	fp, #0
    2836:	d102      	bne.n	283e <grid_port_process_outbound_ui+0x40e>
    2838:	9b04      	ldr	r3, [sp, #16]
    283a:	2b00      	cmp	r3, #0
    283c:	d03d      	beq.n	28ba <grid_port_process_outbound_ui+0x48a>
					grid_sys_load_bank_settings(&grid_sys_state, &grid_nvm_state);
    283e:	4926      	ldr	r1, [pc, #152]	; (28d8 <grid_port_process_outbound_ui+0x4a8>)
    2840:	4826      	ldr	r0, [pc, #152]	; (28dc <grid_port_process_outbound_ui+0x4ac>)
    2842:	4b27      	ldr	r3, [pc, #156]	; (28e0 <grid_port_process_outbound_ui+0x4b0>)
    2844:	4798      	blx	r3
				current_start = 0;
    2846:	2500      	movs	r5, #0
					grid_sys_load_bank_settings(&grid_sys_state, &grid_nvm_state);
    2848:	e65c      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
				else if (msg_class == GRID_CLASS_STOREGLOBAL_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    284a:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
    284e:	d110      	bne.n	2872 <grid_port_process_outbound_ui+0x442>
    2850:	f1b9 0f0f 	cmp.w	r9, #15
    2854:	d001      	beq.n	285a <grid_port_process_outbound_ui+0x42a>
				current_start = 0;
    2856:	2500      	movs	r5, #0
    2858:	e654      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
				else if (msg_class == GRID_CLASS_STOREGLOBAL_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    285a:	f1bb 0f00 	cmp.w	fp, #0
    285e:	d102      	bne.n	2866 <grid_port_process_outbound_ui+0x436>
    2860:	9b04      	ldr	r3, [sp, #16]
    2862:	2b00      	cmp	r3, #0
    2864:	d02b      	beq.n	28be <grid_port_process_outbound_ui+0x48e>
					grid_sys_store_bank_settings(&grid_sys_state, &grid_nvm_state);
    2866:	491c      	ldr	r1, [pc, #112]	; (28d8 <grid_port_process_outbound_ui+0x4a8>)
    2868:	481c      	ldr	r0, [pc, #112]	; (28dc <grid_port_process_outbound_ui+0x4ac>)
    286a:	4b1e      	ldr	r3, [pc, #120]	; (28e4 <grid_port_process_outbound_ui+0x4b4>)
    286c:	4798      	blx	r3
				current_start = 0;
    286e:	2500      	movs	r5, #0
					grid_sys_store_bank_settings(&grid_sys_state, &grid_nvm_state);
    2870:	e648      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
				else if (msg_class == GRID_CLASS_CLEARGLOBAL_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    2872:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    2876:	d124      	bne.n	28c2 <grid_port_process_outbound_ui+0x492>
    2878:	f1b9 0f0f 	cmp.w	r9, #15
    287c:	d001      	beq.n	2882 <grid_port_process_outbound_ui+0x452>
				current_start = 0;
    287e:	2500      	movs	r5, #0
    2880:	e640      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
				else if (msg_class == GRID_CLASS_CLEARGLOBAL_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    2882:	f1bb 0f00 	cmp.w	fp, #0
    2886:	d101      	bne.n	288c <grid_port_process_outbound_ui+0x45c>
    2888:	9b04      	ldr	r3, [sp, #16]
    288a:	b1e3      	cbz	r3, 28c6 <grid_port_process_outbound_ui+0x496>
					volatile uint8_t temp[] = "ClearGlobal\n";
    288c:	ad08      	add	r5, sp, #32
    288e:	4b16      	ldr	r3, [pc, #88]	; (28e8 <grid_port_process_outbound_ui+0x4b8>)
    2890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2892:	c507      	stmia	r5!, {r0, r1, r2}
    2894:	702b      	strb	r3, [r5, #0]
					cdcdf_acm_write(temp, strlen(temp));
    2896:	a808      	add	r0, sp, #32
    2898:	4b14      	ldr	r3, [pc, #80]	; (28ec <grid_port_process_outbound_ui+0x4bc>)
    289a:	4798      	blx	r3
    289c:	4601      	mov	r1, r0
    289e:	a808      	add	r0, sp, #32
    28a0:	4b13      	ldr	r3, [pc, #76]	; (28f0 <grid_port_process_outbound_ui+0x4c0>)
    28a2:	4798      	blx	r3
					delay_ms(1);
    28a4:	2001      	movs	r0, #1
    28a6:	4b13      	ldr	r3, [pc, #76]	; (28f4 <grid_port_process_outbound_ui+0x4c4>)
    28a8:	4798      	blx	r3
					grid_sys_clear_bank_settings(&grid_sys_state, &grid_nvm_state);
    28aa:	490b      	ldr	r1, [pc, #44]	; (28d8 <grid_port_process_outbound_ui+0x4a8>)
    28ac:	480b      	ldr	r0, [pc, #44]	; (28dc <grid_port_process_outbound_ui+0x4ac>)
    28ae:	4b12      	ldr	r3, [pc, #72]	; (28f8 <grid_port_process_outbound_ui+0x4c8>)
    28b0:	4798      	blx	r3
				current_start = 0;
    28b2:	2500      	movs	r5, #0
    28b4:	e626      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
    28b6:	2500      	movs	r5, #0
    28b8:	e624      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
    28ba:	9d04      	ldr	r5, [sp, #16]
    28bc:	e622      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
    28be:	9d04      	ldr	r5, [sp, #16]
    28c0:	e620      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
    28c2:	2500      	movs	r5, #0
    28c4:	e61e      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
    28c6:	9d04      	ldr	r5, [sp, #16]
    28c8:	e61c      	b.n	2504 <grid_port_process_outbound_ui+0xd4>
    28ca:	bf00      	nop
    28cc:	20007dd8 	.word	0x20007dd8
    28d0:	00002b8d 	.word	0x00002b8d
    28d4:	00002b1d 	.word	0x00002b1d
    28d8:	200033a0 	.word	0x200033a0
    28dc:	200032f8 	.word	0x200032f8
    28e0:	00004441 	.word	0x00004441
    28e4:	00004c61 	.word	0x00004c61
    28e8:	0000eb60 	.word	0x0000eb60
    28ec:	0000d87d 	.word	0x0000d87d
    28f0:	0000ba4d 	.word	0x0000ba4d
    28f4:	00005cfd 	.word	0x00005cfd
    28f8:	000044d9 	.word	0x000044d9

000028fc <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    28fc:	8983      	ldrh	r3, [r0, #12]
    28fe:	b10b      	cbz	r3, 2904 <grid_port_process_outbound_usart+0x8>
			return 1;
		}
		
	}
	
	return 0;
    2900:	2000      	movs	r0, #0
    2902:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    2904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2908:	4680      	mov	r8, r0
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    290a:	f600 76cc 	addw	r6, r0, #4044	; 0xfcc
    290e:	4630      	mov	r0, r6
    2910:	4b13      	ldr	r3, [pc, #76]	; (2960 <grid_port_process_outbound_usart+0x64>)
    2912:	4798      	blx	r3
		if (!packet_size){
    2914:	4605      	mov	r5, r0
    2916:	b910      	cbnz	r0, 291e <grid_port_process_outbound_usart+0x22>
			return 0;
    2918:	2000      	movs	r0, #0
}
    291a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_buffer_read_init(&por->tx_buffer);
    291e:	4630      	mov	r0, r6
    2920:	4b10      	ldr	r3, [pc, #64]	; (2964 <grid_port_process_outbound_usart+0x68>)
    2922:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    2924:	f8a8 500c 	strh.w	r5, [r8, #12]
    2928:	f108 042b 	add.w	r4, r8, #43	; 0x2b
    292c:	3d01      	subs	r5, #1
    292e:	b2ad      	uxth	r5, r5
    2930:	352c      	adds	r5, #44	; 0x2c
    2932:	4445      	add	r5, r8
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    2934:	4f0c      	ldr	r7, [pc, #48]	; (2968 <grid_port_process_outbound_usart+0x6c>)
    2936:	4630      	mov	r0, r6
    2938:	47b8      	blx	r7
				por->tx_double_buffer[i] = character;
    293a:	f804 0f01 	strb.w	r0, [r4, #1]!
			for (uint16_t i = 0; i<packet_size; i++){
    293e:	42ac      	cmp	r4, r5
    2940:	d1f9      	bne.n	2936 <grid_port_process_outbound_usart+0x3a>
			grid_buffer_read_acknowledge(&por->tx_buffer);
    2942:	4630      	mov	r0, r6
    2944:	4b09      	ldr	r3, [pc, #36]	; (296c <grid_port_process_outbound_usart+0x70>)
    2946:	4798      	blx	r3
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    2948:	f8b8 200c 	ldrh.w	r2, [r8, #12]
    294c:	f108 012c 	add.w	r1, r8, #44	; 0x2c
    2950:	f8d8 0004 	ldr.w	r0, [r8, #4]
    2954:	4b06      	ldr	r3, [pc, #24]	; (2970 <grid_port_process_outbound_usart+0x74>)
    2956:	4798      	blx	r3
			return 1;
    2958:	2001      	movs	r0, #1
    295a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    295e:	bf00      	nop
    2960:	00001cf1 	.word	0x00001cf1
    2964:	00001d63 	.word	0x00001d63
    2968:	00001ded 	.word	0x00001ded
    296c:	00001e15 	.word	0x00001e15
    2970:	000060c9 	.word	0x000060c9

00002974 <grid_led_lowlevel_hardware_transfer_complete_cb>:


void grid_led_lowlevel_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    2974:	2201      	movs	r2, #1
    2976:	4b01      	ldr	r3, [pc, #4]	; (297c <grid_led_lowlevel_hardware_transfer_complete_cb+0x8>)
    2978:	701a      	strb	r2, [r3, #0]
    297a:	4770      	bx	lr
    297c:	200012a0 	.word	0x200012a0

00002980 <grid_led_lowlevel_set_color>:
uint8_t grid_led_lowlevel_set_color(struct grid_led_model* mod, uint32_t led_index, uint16_t led_r, uint16_t led_g, uint16_t led_b){
    2980:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    2982:	7844      	ldrb	r4, [r0, #1]
    2984:	428c      	cmp	r4, r1
    2986:	d802      	bhi.n	298e <grid_led_lowlevel_set_color+0xe>
		return -1;		
    2988:	20ff      	movs	r0, #255	; 0xff
}
    298a:	bc30      	pop	{r4, r5}
    298c:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    298e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2992:	0089      	lsls	r1, r1, #2
    2994:	4c0d      	ldr	r4, [pc, #52]	; (29cc <grid_led_lowlevel_set_color+0x4c>)
    2996:	2bff      	cmp	r3, #255	; 0xff
    2998:	bf28      	it	cs
    299a:	23ff      	movcs	r3, #255	; 0xff
    299c:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    29a0:	68c3      	ldr	r3, [r0, #12]
    29a2:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    29a4:	2aff      	cmp	r2, #255	; 0xff
    29a6:	bf28      	it	cs
    29a8:	22ff      	movcs	r2, #255	; 0xff
    29aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    29ae:	68c3      	ldr	r3, [r0, #12]
    29b0:	440b      	add	r3, r1
    29b2:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    29b4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    29b8:	2bff      	cmp	r3, #255	; 0xff
    29ba:	bf28      	it	cs
    29bc:	23ff      	movcs	r3, #255	; 0xff
    29be:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    29c2:	68c3      	ldr	r3, [r0, #12]
    29c4:	4419      	add	r1, r3
    29c6:	608a      	str	r2, [r1, #8]
		return 0;
    29c8:	2000      	movs	r0, #0
    29ca:	e7de      	b.n	298a <grid_led_lowlevel_set_color+0xa>
    29cc:	200037c4 	.word	0x200037c4

000029d0 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    29d0:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    29d2:	4c06      	ldr	r4, [pc, #24]	; (29ec <grid_led_hardware_init+0x1c>)
    29d4:	f100 0114 	add.w	r1, r0, #20
    29d8:	4620      	mov	r0, r4
    29da:	4b05      	ldr	r3, [pc, #20]	; (29f0 <grid_led_hardware_init+0x20>)
    29dc:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_lowlevel_hardware_transfer_complete_cb);
    29de:	4a05      	ldr	r2, [pc, #20]	; (29f4 <grid_led_hardware_init+0x24>)
    29e0:	2100      	movs	r1, #0
    29e2:	4620      	mov	r0, r4
    29e4:	4b04      	ldr	r3, [pc, #16]	; (29f8 <grid_led_hardware_init+0x28>)
    29e6:	4798      	blx	r3
    29e8:	bd10      	pop	{r4, pc}
    29ea:	bf00      	nop
    29ec:	20001120 	.word	0x20001120
    29f0:	00006621 	.word	0x00006621
    29f4:	00002975 	.word	0x00002975
    29f8:	000065f1 	.word	0x000065f1

000029fc <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    29fc:	7840      	ldrb	r0, [r0, #1]
    29fe:	4770      	bx	lr

00002a00 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    2a00:	7843      	ldrb	r3, [r0, #1]
    2a02:	b113      	cbz	r3, 2a0a <grid_led_tick+0xa>
void grid_led_tick(struct grid_led_model* mod){
    2a04:	b430      	push	{r4, r5}
	for (uint8_t j=0; j<mod->led_number; j++){
    2a06:	2400      	movs	r4, #0
    2a08:	e005      	b.n	2a16 <grid_led_tick+0x16>
    2a0a:	4770      	bx	lr
    2a0c:	3401      	adds	r4, #1
    2a0e:	b2e4      	uxtb	r4, r4
    2a10:	7843      	ldrb	r3, [r0, #1]
    2a12:	42a3      	cmp	r3, r4
    2a14:	d911      	bls.n	2a3a <grid_led_tick+0x3a>
void grid_led_tick(struct grid_led_model* mod){
    2a16:	2100      	movs	r1, #0
					
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    2a18:	7843      	ldrb	r3, [r0, #1]
    2a1a:	fb01 4303 	mla	r3, r1, r3, r4
    2a1e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    2a22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2a26:	6902      	ldr	r2, [r0, #16]
    2a28:	4413      	add	r3, r2
    2a2a:	7ada      	ldrb	r2, [r3, #11]
    2a2c:	7b1d      	ldrb	r5, [r3, #12]
    2a2e:	442a      	add	r2, r5
    2a30:	72da      	strb	r2, [r3, #11]
    2a32:	3101      	adds	r1, #1
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    2a34:	2903      	cmp	r1, #3
    2a36:	d1ef      	bne.n	2a18 <grid_led_tick+0x18>
    2a38:	e7e8      	b.n	2a0c <grid_led_tick+0xc>
		}	
	}
	/** END */
	
}
    2a3a:	bc30      	pop	{r4, r5}
    2a3c:	4770      	bx	lr

00002a3e <grid_led_set_min>:
	grid_led_set_max(mod, num, layer, r, g, b);

}


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2a3e:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    2a40:	7844      	ldrb	r4, [r0, #1]
    2a42:	fb02 1404 	mla	r4, r2, r4, r1
    2a46:	6905      	ldr	r5, [r0, #16]
    2a48:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2a4c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2a50:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    2a52:	7843      	ldrb	r3, [r0, #1]
    2a54:	fb02 1303 	mla	r3, r2, r3, r1
    2a58:	6904      	ldr	r4, [r0, #16]
    2a5a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2a5e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2a62:	4423      	add	r3, r4
    2a64:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2a68:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    2a6a:	7843      	ldrb	r3, [r0, #1]
    2a6c:	fb02 1203 	mla	r2, r2, r3, r1
    2a70:	6903      	ldr	r3, [r0, #16]
    2a72:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2a76:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2a7a:	441a      	add	r2, r3
    2a7c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2a80:	7093      	strb	r3, [r2, #2]
}
    2a82:	bc70      	pop	{r4, r5, r6}
    2a84:	4770      	bx	lr

00002a86 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2a86:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    2a88:	7844      	ldrb	r4, [r0, #1]
    2a8a:	fb02 1404 	mla	r4, r2, r4, r1
    2a8e:	6905      	ldr	r5, [r0, #16]
    2a90:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2a94:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2a98:	442c      	add	r4, r5
    2a9a:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    2a9c:	7843      	ldrb	r3, [r0, #1]
    2a9e:	fb02 1303 	mla	r3, r2, r3, r1
    2aa2:	6904      	ldr	r4, [r0, #16]
    2aa4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2aa8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2aac:	4423      	add	r3, r4
    2aae:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2ab2:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    2ab4:	7843      	ldrb	r3, [r0, #1]
    2ab6:	fb02 1203 	mla	r2, r2, r3, r1
    2aba:	6903      	ldr	r3, [r0, #16]
    2abc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2ac0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2ac4:	441a      	add	r2, r3
    2ac6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2aca:	7153      	strb	r3, [r2, #5]
}
    2acc:	bc70      	pop	{r4, r5, r6}
    2ace:	4770      	bx	lr

00002ad0 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2ad0:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    2ad2:	7844      	ldrb	r4, [r0, #1]
    2ad4:	fb02 1404 	mla	r4, r2, r4, r1
    2ad8:	6905      	ldr	r5, [r0, #16]
    2ada:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2ade:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2ae2:	442c      	add	r4, r5
    2ae4:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    2ae6:	7843      	ldrb	r3, [r0, #1]
    2ae8:	fb02 1303 	mla	r3, r2, r3, r1
    2aec:	6904      	ldr	r4, [r0, #16]
    2aee:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2af2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2af6:	4423      	add	r3, r4
    2af8:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2afc:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    2afe:	7843      	ldrb	r3, [r0, #1]
    2b00:	fb02 1203 	mla	r2, r2, r3, r1
    2b04:	6903      	ldr	r3, [r0, #16]
    2b06:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2b0a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2b0e:	441a      	add	r2, r3
    2b10:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2b14:	7213      	strb	r3, [r2, #8]
}
    2b16:	bc70      	pop	{r4, r5, r6}
    2b18:	4770      	bx	lr
	...

00002b1c <grid_led_set_color>:
void grid_led_set_color(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b20:	b082      	sub	sp, #8
    2b22:	4680      	mov	r8, r0
    2b24:	4689      	mov	r9, r1
    2b26:	4692      	mov	sl, r2
    2b28:	461d      	mov	r5, r3
    2b2a:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
    2b2e:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
	grid_led_set_min(mod, num, layer, r/20, g/20, b/20);				
    2b32:	4c12      	ldr	r4, [pc, #72]	; (2b7c <grid_led_set_color+0x60>)
    2b34:	fba4 3e05 	umull	r3, lr, r4, r5
    2b38:	fba4 c307 	umull	ip, r3, r4, r7
    2b3c:	091b      	lsrs	r3, r3, #4
    2b3e:	9301      	str	r3, [sp, #4]
    2b40:	fba4 3406 	umull	r3, r4, r4, r6
    2b44:	0924      	lsrs	r4, r4, #4
    2b46:	9400      	str	r4, [sp, #0]
    2b48:	ea4f 131e 	mov.w	r3, lr, lsr #4
    2b4c:	4c0c      	ldr	r4, [pc, #48]	; (2b80 <grid_led_set_color+0x64>)
    2b4e:	47a0      	blx	r4
	grid_led_set_mid(mod, num, layer, r/2, g/2, b/2);
    2b50:	087b      	lsrs	r3, r7, #1
    2b52:	9301      	str	r3, [sp, #4]
    2b54:	0873      	lsrs	r3, r6, #1
    2b56:	9300      	str	r3, [sp, #0]
    2b58:	086b      	lsrs	r3, r5, #1
    2b5a:	4652      	mov	r2, sl
    2b5c:	4649      	mov	r1, r9
    2b5e:	4640      	mov	r0, r8
    2b60:	4c08      	ldr	r4, [pc, #32]	; (2b84 <grid_led_set_color+0x68>)
    2b62:	47a0      	blx	r4
	grid_led_set_max(mod, num, layer, r, g, b);
    2b64:	9701      	str	r7, [sp, #4]
    2b66:	9600      	str	r6, [sp, #0]
    2b68:	462b      	mov	r3, r5
    2b6a:	4652      	mov	r2, sl
    2b6c:	4649      	mov	r1, r9
    2b6e:	4640      	mov	r0, r8
    2b70:	4c05      	ldr	r4, [pc, #20]	; (2b88 <grid_led_set_color+0x6c>)
    2b72:	47a0      	blx	r4
}
    2b74:	b002      	add	sp, #8
    2b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b7a:	bf00      	nop
    2b7c:	cccccccd 	.word	0xcccccccd
    2b80:	00002a3f 	.word	0x00002a3f
    2b84:	00002a87 	.word	0x00002a87
    2b88:	00002ad1 	.word	0x00002ad1

00002b8c <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    2b8c:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    2b8e:	7844      	ldrb	r4, [r0, #1]
    2b90:	fb02 1204 	mla	r2, r2, r4, r1
    2b94:	6901      	ldr	r1, [r0, #16]
    2b96:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    2b9a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2b9e:	440a      	add	r2, r1
    2ba0:	72d3      	strb	r3, [r2, #11]
}
    2ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
    2ba6:	4770      	bx	lr

00002ba8 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    2ba8:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    2baa:	7844      	ldrb	r4, [r0, #1]
    2bac:	fb02 1204 	mla	r2, r2, r4, r1
    2bb0:	6901      	ldr	r1, [r0, #16]
    2bb2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    2bb6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2bba:	440a      	add	r2, r1
    2bbc:	7313      	strb	r3, [r2, #12]
}
    2bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    2bc2:	4770      	bx	lr

00002bc4 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    2bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bc8:	b083      	sub	sp, #12
    2bca:	4605      	mov	r5, r0
	mod->led_number = length;
    2bcc:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    2bce:	b2cc      	uxtb	r4, r1
    2bd0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    2bd4:	0080      	lsls	r0, r0, #2
    2bd6:	3090      	adds	r0, #144	; 0x90
    2bd8:	6068      	str	r0, [r5, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    2bda:	4f52      	ldr	r7, [pc, #328]	; (2d24 <grid_led_buffer_init+0x160>)
    2bdc:	47b8      	blx	r7
    2bde:	4606      	mov	r6, r0
    2be0:	60a8      	str	r0, [r5, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    2be2:	f100 0390 	add.w	r3, r0, #144	; 0x90
    2be6:	60eb      	str	r3, [r5, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    2be8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2bec:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
    2bf0:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    2bf2:	2e00      	cmp	r6, #0
    2bf4:	f000 8094 	beq.w	2d20 <grid_led_buffer_init+0x15c>
    2bf8:	2800      	cmp	r0, #0
    2bfa:	f000 8091 	beq.w	2d20 <grid_led_buffer_init+0x15c>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    2bfe:	6128      	str	r0, [r5, #16]
    2c00:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    2c02:	4619      	mov	r1, r3
    2c04:	68aa      	ldr	r2, [r5, #8]
    2c06:	54d1      	strb	r1, [r2, r3]
    2c08:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    2c0a:	2b90      	cmp	r3, #144	; 0x90
    2c0c:	d1fa      	bne.n	2c04 <grid_led_buffer_init+0x40>
	for (uint32_t i = 0; i<mod->led_number; i++){
    2c0e:	786b      	ldrb	r3, [r5, #1]
    2c10:	2b00      	cmp	r3, #0
    2c12:	f000 8082 	beq.w	2d1a <grid_led_buffer_init+0x156>
    2c16:	2400      	movs	r4, #0
		grid_led_lowlevel_set_color(mod,i,0,0,0);
    2c18:	4626      	mov	r6, r4
    2c1a:	4f43      	ldr	r7, [pc, #268]	; (2d28 <grid_led_buffer_init+0x164>)
    2c1c:	9600      	str	r6, [sp, #0]
    2c1e:	4633      	mov	r3, r6
    2c20:	4632      	mov	r2, r6
    2c22:	4621      	mov	r1, r4
    2c24:	4628      	mov	r0, r5
    2c26:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    2c28:	3401      	adds	r4, #1
    2c2a:	786b      	ldrb	r3, [r5, #1]
    2c2c:	42a3      	cmp	r3, r4
    2c2e:	d8f5      	bhi.n	2c1c <grid_led_buffer_init+0x58>
	for(uint8_t i = 0; i<mod->led_number; i++){
    2c30:	2b00      	cmp	r3, #0
    2c32:	d072      	beq.n	2d1a <grid_led_buffer_init+0x156>
    2c34:	f04f 0b00 	mov.w	fp, #0
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    2c38:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 2d34 <grid_led_buffer_init+0x170>
    2c3c:	2400      	movs	r4, #0
    2c3e:	9401      	str	r4, [sp, #4]
    2c40:	9400      	str	r4, [sp, #0]
    2c42:	4623      	mov	r3, r4
    2c44:	2201      	movs	r2, #1
    2c46:	4659      	mov	r1, fp
    2c48:	4628      	mov	r0, r5
    2c4a:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    2c4c:	9401      	str	r4, [sp, #4]
    2c4e:	237f      	movs	r3, #127	; 0x7f
    2c50:	9300      	str	r3, [sp, #0]
    2c52:	4623      	mov	r3, r4
    2c54:	2201      	movs	r2, #1
    2c56:	4659      	mov	r1, fp
    2c58:	4628      	mov	r0, r5
    2c5a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 2d38 <grid_led_buffer_init+0x174>
    2c5e:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    2c60:	9401      	str	r4, [sp, #4]
    2c62:	23ff      	movs	r3, #255	; 0xff
    2c64:	9300      	str	r3, [sp, #0]
    2c66:	4623      	mov	r3, r4
    2c68:	2201      	movs	r2, #1
    2c6a:	4659      	mov	r1, fp
    2c6c:	4628      	mov	r0, r5
    2c6e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 2d3c <grid_led_buffer_init+0x178>
    2c72:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    2c74:	4623      	mov	r3, r4
    2c76:	2201      	movs	r2, #1
    2c78:	4659      	mov	r1, fp
    2c7a:	4628      	mov	r0, r5
    2c7c:	4f2b      	ldr	r7, [pc, #172]	; (2d2c <grid_led_buffer_init+0x168>)
    2c7e:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    2c80:	4623      	mov	r3, r4
    2c82:	2201      	movs	r2, #1
    2c84:	4659      	mov	r1, fp
    2c86:	4628      	mov	r0, r5
    2c88:	4e29      	ldr	r6, [pc, #164]	; (2d30 <grid_led_buffer_init+0x16c>)
    2c8a:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x00, 0x00);
    2c8c:	9401      	str	r4, [sp, #4]
    2c8e:	9400      	str	r4, [sp, #0]
    2c90:	4623      	mov	r3, r4
    2c92:	2202      	movs	r2, #2
    2c94:	4659      	mov	r1, fp
    2c96:	4628      	mov	r0, r5
    2c98:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x7F, 0x00);
    2c9a:	9401      	str	r4, [sp, #4]
    2c9c:	237f      	movs	r3, #127	; 0x7f
    2c9e:	9300      	str	r3, [sp, #0]
    2ca0:	4623      	mov	r3, r4
    2ca2:	2202      	movs	r2, #2
    2ca4:	4659      	mov	r1, fp
    2ca6:	4628      	mov	r0, r5
    2ca8:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0xFF, 0x00);
    2caa:	9401      	str	r4, [sp, #4]
    2cac:	23ff      	movs	r3, #255	; 0xff
    2cae:	9300      	str	r3, [sp, #0]
    2cb0:	4623      	mov	r3, r4
    2cb2:	2202      	movs	r2, #2
    2cb4:	4659      	mov	r1, fp
    2cb6:	4628      	mov	r0, r5
    2cb8:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_B, 0);
    2cba:	4623      	mov	r3, r4
    2cbc:	2202      	movs	r2, #2
    2cbe:	4659      	mov	r1, fp
    2cc0:	4628      	mov	r0, r5
    2cc2:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_B, 0);
    2cc4:	4623      	mov	r3, r4
    2cc6:	2202      	movs	r2, #2
    2cc8:	4659      	mov	r1, fp
    2cca:	4628      	mov	r0, r5
    2ccc:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    2cce:	9401      	str	r4, [sp, #4]
    2cd0:	9400      	str	r4, [sp, #0]
    2cd2:	4623      	mov	r3, r4
    2cd4:	4622      	mov	r2, r4
    2cd6:	4659      	mov	r1, fp
    2cd8:	4628      	mov	r0, r5
    2cda:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    2cdc:	9401      	str	r4, [sp, #4]
    2cde:	9400      	str	r4, [sp, #0]
    2ce0:	4623      	mov	r3, r4
    2ce2:	4622      	mov	r2, r4
    2ce4:	4659      	mov	r1, fp
    2ce6:	4628      	mov	r0, r5
    2ce8:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    2cea:	9401      	str	r4, [sp, #4]
    2cec:	9400      	str	r4, [sp, #0]
    2cee:	4623      	mov	r3, r4
    2cf0:	4622      	mov	r2, r4
    2cf2:	4659      	mov	r1, fp
    2cf4:	4628      	mov	r0, r5
    2cf6:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_ALERT, 0);
    2cf8:	4623      	mov	r3, r4
    2cfa:	4622      	mov	r2, r4
    2cfc:	4659      	mov	r1, fp
    2cfe:	4628      	mov	r0, r5
    2d00:	47b8      	blx	r7
		grid_led_set_phase(mod, i, GRID_LED_LAYER_ALERT, 0);
    2d02:	4623      	mov	r3, r4
    2d04:	4622      	mov	r2, r4
    2d06:	4659      	mov	r1, fp
    2d08:	4628      	mov	r0, r5
    2d0a:	47b0      	blx	r6
	for(uint8_t i = 0; i<mod->led_number; i++){
    2d0c:	f10b 0b01 	add.w	fp, fp, #1
    2d10:	fa5f fb8b 	uxtb.w	fp, fp
    2d14:	786b      	ldrb	r3, [r5, #1]
    2d16:	455b      	cmp	r3, fp
    2d18:	d890      	bhi.n	2c3c <grid_led_buffer_init+0x78>
}
    2d1a:	b003      	add	sp, #12
    2d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d20:	e7fe      	b.n	2d20 <grid_led_buffer_init+0x15c>
    2d22:	bf00      	nop
    2d24:	0000d421 	.word	0x0000d421
    2d28:	00002981 	.word	0x00002981
    2d2c:	00002ba9 	.word	0x00002ba9
    2d30:	00002b8d 	.word	0x00002b8d
    2d34:	00002a3f 	.word	0x00002a3f
    2d38:	00002a87 	.word	0x00002a87
    2d3c:	00002ad1 	.word	0x00002ad1

00002d40 <grid_led_lowlevel_init>:
uint8_t grid_led_lowlevel_init(struct grid_led_model* mod, uint8_t num){
    2d40:	b570      	push	{r4, r5, r6, lr}
    2d42:	4604      	mov	r4, r0
    2d44:	4e29      	ldr	r6, [pc, #164]	; (2dec <grid_led_lowlevel_init+0xac>)
    2d46:	2200      	movs	r2, #0
    2d48:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2d4a:	f003 0001 	and.w	r0, r3, #1
    2d4e:	2800      	cmp	r0, #0
    2d50:	bf14      	ite	ne
    2d52:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    2d56:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2d5a:	f3c3 0540 	ubfx	r5, r3, #1, #1
    2d5e:	2d00      	cmp	r5, #0
    2d60:	bf14      	ite	ne
    2d62:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    2d66:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2d6a:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    2d6c:	f3c3 0080 	ubfx	r0, r3, #2, #1
    2d70:	2800      	cmp	r0, #0
    2d72:	bf14      	ite	ne
    2d74:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    2d78:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    2d7c:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    2d7e:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    2d82:	2d00      	cmp	r5, #0
    2d84:	bf14      	ite	ne
    2d86:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    2d8a:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    2d8e:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    2d90:	f3c3 1500 	ubfx	r5, r3, #4, #1
    2d94:	2d00      	cmp	r5, #0
    2d96:	bf14      	ite	ne
    2d98:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    2d9c:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    2da0:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    2da2:	f3c3 1040 	ubfx	r0, r3, #5, #1
    2da6:	2800      	cmp	r0, #0
    2da8:	bf14      	ite	ne
    2daa:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    2dae:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    2db2:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    2db4:	f3c3 1080 	ubfx	r0, r3, #6, #1
    2db8:	2800      	cmp	r0, #0
    2dba:	bf14      	ite	ne
    2dbc:	200e      	movne	r0, #14
    2dbe:	2008      	moveq	r0, #8
    2dc0:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    2dc2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	bf14      	ite	ne
    2dca:	23e0      	movne	r3, #224	; 0xe0
    2dcc:	2380      	moveq	r3, #128	; 0x80
    2dce:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    2dd0:	f846 3f04 	str.w	r3, [r6, #4]!
    2dd4:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    2dd6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    2dda:	d1b5      	bne.n	2d48 <grid_led_lowlevel_init+0x8>
	grid_led_buffer_init(mod, num);		
    2ddc:	4620      	mov	r0, r4
    2dde:	4b04      	ldr	r3, [pc, #16]	; (2df0 <grid_led_lowlevel_init+0xb0>)
    2de0:	4798      	blx	r3
	grid_led_hardware_init(mod);
    2de2:	4620      	mov	r0, r4
    2de4:	4b03      	ldr	r3, [pc, #12]	; (2df4 <grid_led_lowlevel_init+0xb4>)
    2de6:	4798      	blx	r3
}
    2de8:	2000      	movs	r0, #0
    2dea:	bd70      	pop	{r4, r5, r6, pc}
    2dec:	200037c0 	.word	0x200037c0
    2df0:	00002bc5 	.word	0x00002bc5
    2df4:	000029d1 	.word	0x000029d1

00002df8 <grid_led_lowlevel_render>:


void grid_led_lowlevel_render(struct grid_led_model* mod, uint32_t num){
    2df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dfc:	b083      	sub	sp, #12
    2dfe:	f890 c001 	ldrb.w	ip, [r0, #1]
    2e02:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    2e06:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    2e0a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    2e0e:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    2e12:	6904      	ldr	r4, [r0, #16]
    2e14:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    2e16:	2703      	movs	r7, #3
	uint32_t mix_b = 0;
    2e18:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    2e1c:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    2e1e:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2e20:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2ea8 <grid_led_lowlevel_render+0xb0>
    2e24:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2e26:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2e2a:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2e2c:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    2e30:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    2e34:	f894 a000 	ldrb.w	sl, [r4]
    2e38:	f894 b003 	ldrb.w	fp, [r4, #3]
    2e3c:	fb05 fb0b 	mul.w	fp, r5, fp
    2e40:	fb09 bb0a 	mla	fp, r9, sl, fp
    2e44:	f894 a006 	ldrb.w	sl, [r4, #6]
    2e48:	fb06 ba0a 	mla	sl, r6, sl, fp
    2e4c:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    2e4e:	f894 a001 	ldrb.w	sl, [r4, #1]
    2e52:	f894 b004 	ldrb.w	fp, [r4, #4]
    2e56:	fb05 fb0b 	mul.w	fp, r5, fp
    2e5a:	fb09 bb0a 	mla	fp, r9, sl, fp
    2e5e:	f894 a007 	ldrb.w	sl, [r4, #7]
    2e62:	fb06 ba0a 	mla	sl, r6, sl, fp
    2e66:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    2e68:	f894 a002 	ldrb.w	sl, [r4, #2]
    2e6c:	f894 b005 	ldrb.w	fp, [r4, #5]
    2e70:	fb05 f50b 	mul.w	r5, r5, fp
    2e74:	fb09 590a 	mla	r9, r9, sl, r5
    2e78:	7a25      	ldrb	r5, [r4, #8]
    2e7a:	fb06 9505 	mla	r5, r6, r5, r9
    2e7e:	44ae      	add	lr, r5
    2e80:	3f01      	subs	r7, #1
    2e82:	4464      	add	r4, ip
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    2e84:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    2e88:	d1cc      	bne.n	2e24 <grid_led_lowlevel_render+0x2c>

	mix_r = (mix_r)/2/256;
	mix_g = (mix_g)/2/256;
	mix_b = (mix_b)/2/256;
				
	grid_led_lowlevel_set_color(mod, num, mix_r, mix_g, mix_b);
    2e8a:	f3ce 244f 	ubfx	r4, lr, #9, #16
    2e8e:	9400      	str	r4, [sp, #0]
    2e90:	f3c3 234f 	ubfx	r3, r3, #9, #16
    2e94:	f3c2 224f 	ubfx	r2, r2, #9, #16
    2e98:	4c02      	ldr	r4, [pc, #8]	; (2ea4 <grid_led_lowlevel_render+0xac>)
    2e9a:	47a0      	blx	r4
	
}
    2e9c:	b003      	add	sp, #12
    2e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ea2:	bf00      	nop
    2ea4:	00002981 	.word	0x00002981
    2ea8:	20000000 	.word	0x20000000

00002eac <grid_led_lowlevel_render_all>:


void grid_led_lowlevel_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    2eac:	7843      	ldrb	r3, [r0, #1]
    2eae:	b15b      	cbz	r3, 2ec8 <grid_led_lowlevel_render_all+0x1c>
void grid_led_lowlevel_render_all(struct grid_led_model* mod){
    2eb0:	b570      	push	{r4, r5, r6, lr}
    2eb2:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    2eb4:	2400      	movs	r4, #0
		
		grid_led_lowlevel_render(mod, i);
    2eb6:	4e05      	ldr	r6, [pc, #20]	; (2ecc <grid_led_lowlevel_render_all+0x20>)
    2eb8:	4621      	mov	r1, r4
    2eba:	4628      	mov	r0, r5
    2ebc:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    2ebe:	3401      	adds	r4, #1
    2ec0:	786b      	ldrb	r3, [r5, #1]
    2ec2:	42a3      	cmp	r3, r4
    2ec4:	d8f8      	bhi.n	2eb8 <grid_led_lowlevel_render_all+0xc>
    2ec6:	bd70      	pop	{r4, r5, r6, pc}
    2ec8:	4770      	bx	lr
    2eca:	bf00      	nop
    2ecc:	00002df9 	.word	0x00002df9

00002ed0 <grid_led_lowlevel_hardware_start_transfer>:
			
	}
	
}

void grid_led_lowlevel_hardware_start_transfer (struct grid_led_model* mod){
    2ed0:	b510      	push	{r4, lr}
    2ed2:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2ed4:	2200      	movs	r2, #0
    2ed6:	4b05      	ldr	r3, [pc, #20]	; (2eec <grid_led_lowlevel_hardware_start_transfer+0x1c>)
    2ed8:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    2eda:	4805      	ldr	r0, [pc, #20]	; (2ef0 <grid_led_lowlevel_hardware_start_transfer+0x20>)
    2edc:	4b05      	ldr	r3, [pc, #20]	; (2ef4 <grid_led_lowlevel_hardware_start_transfer+0x24>)
    2ede:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_lowlevel_get_frame_buffer_pointer(mod), grid_led_lowlevel_get_frame_buffer_size(mod));
    2ee0:	88a2      	ldrh	r2, [r4, #4]
    2ee2:	68a1      	ldr	r1, [r4, #8]
    2ee4:	6960      	ldr	r0, [r4, #20]
    2ee6:	4b04      	ldr	r3, [pc, #16]	; (2ef8 <grid_led_lowlevel_hardware_start_transfer+0x28>)
    2ee8:	4798      	blx	r3
    2eea:	bd10      	pop	{r4, pc}
    2eec:	200012a0 	.word	0x200012a0
    2ef0:	20001120 	.word	0x20001120
    2ef4:	000065c9 	.word	0x000065c9
    2ef8:	000060c9 	.word	0x000060c9

00002efc <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    2efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f00:	b0a3      	sub	sp, #140	; 0x8c

	grid_ui_model_init(&grid_core_state, 1);
    2f02:	4c7b      	ldr	r4, [pc, #492]	; (30f0 <grid_module_common_init+0x1f4>)
    2f04:	2101      	movs	r1, #1
    2f06:	4620      	mov	r0, r4
    2f08:	4b7a      	ldr	r3, [pc, #488]	; (30f4 <grid_module_common_init+0x1f8>)
    2f0a:	4798      	blx	r3
	grid_ui_element_init(&grid_core_state.element[0], GRID_UI_ELEMENT_SYSTEM);
    2f0c:	6860      	ldr	r0, [r4, #4]
    2f0e:	2100      	movs	r1, #0
    2f10:	4b79      	ldr	r3, [pc, #484]	; (30f8 <grid_module_common_init+0x1fc>)
    2f12:	4798      	blx	r3
	
		
	if (1){	// INIT CORE_STATE->hearbeat	
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_LENGTH] = {0};
    2f14:	2278      	movs	r2, #120	; 0x78
    2f16:	2100      	movs	r1, #0
    2f18:	a804      	add	r0, sp, #16
    2f1a:	f8df 8244 	ldr.w	r8, [pc, #580]	; 3160 <grid_module_common_init+0x264>
    2f1e:	47c0      	blx	r8
		uint8_t payload_length = 0;
	
		sprintf(payload_template, GRID_EVENT_HEARTBEAT );
    2f20:	ad04      	add	r5, sp, #16
    2f22:	4e76      	ldr	r6, [pc, #472]	; (30fc <grid_module_common_init+0x200>)
    2f24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2f28:	6833      	ldr	r3, [r6, #0]
    2f2a:	702b      	strb	r3, [r5, #0]
		payload_length = strlen(payload_template);
    2f2c:	a804      	add	r0, sp, #16
    2f2e:	4e74      	ldr	r6, [pc, #464]	; (3100 <grid_module_common_init+0x204>)
    2f30:	47b0      	blx	r6
	
		sprintf(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_frame);
    2f32:	ab04      	add	r3, sp, #16
    2f34:	fa53 f780 	uxtab	r7, r3, r0
    2f38:	2303      	movs	r3, #3
    2f3a:	9300      	str	r3, [sp, #0]
    2f3c:	2310      	movs	r3, #16
    2f3e:	2202      	movs	r2, #2
    2f40:	4970      	ldr	r1, [pc, #448]	; (3104 <grid_module_common_init+0x208>)
    2f42:	4638      	mov	r0, r7
    2f44:	4d70      	ldr	r5, [pc, #448]	; (3108 <grid_module_common_init+0x20c>)
    2f46:	47a8      	blx	r5
		uint8_t error = 0;
    2f48:	f04f 0900 	mov.w	r9, #0
    2f4c:	ad22      	add	r5, sp, #136	; 0x88
    2f4e:	f805 9d79 	strb.w	r9, [r5, #-121]!
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    2f52:	9500      	str	r5, [sp, #0]
    2f54:	230f      	movs	r3, #15
    2f56:	2201      	movs	r2, #1
    2f58:	2104      	movs	r1, #4
    2f5a:	4638      	mov	r0, r7
    2f5c:	f8df a204 	ldr.w	sl, [pc, #516]	; 3164 <grid_module_common_init+0x268>
    2f60:	47d0      	blx	sl
	
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_HWCFG_offset, GRID_CLASS_HEARTBEAT_HWCFG_length, grid_sys_get_hwcfg(), &error);
    2f62:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 3120 <grid_module_common_init+0x224>
    2f66:	47d8      	blx	fp
    2f68:	9500      	str	r5, [sp, #0]
    2f6a:	4603      	mov	r3, r0
    2f6c:	2202      	movs	r2, #2
    2f6e:	2105      	movs	r1, #5
    2f70:	4638      	mov	r0, r7
    2f72:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VMAJOR_offset, GRID_CLASS_HEARTBEAT_VMAJOR_length , GRID_PROTOCOL_VERSION_MAJOR, &error);
    2f74:	9500      	str	r5, [sp, #0]
    2f76:	2301      	movs	r3, #1
    2f78:	2202      	movs	r2, #2
    2f7a:	2107      	movs	r1, #7
    2f7c:	4638      	mov	r0, r7
    2f7e:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VMINOR_offset, GRID_CLASS_HEARTBEAT_VMINOR_length  , GRID_PROTOCOL_VERSION_MINOR, &error);
    2f80:	9500      	str	r5, [sp, #0]
    2f82:	2301      	movs	r3, #1
    2f84:	2202      	movs	r2, #2
    2f86:	2109      	movs	r1, #9
    2f88:	4638      	mov	r0, r7
    2f8a:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VPATCH_offset, GRID_CLASS_HEARTBEAT_VPATCH_length  , GRID_PROTOCOL_VERSION_PATCH, &error);
    2f8c:	9500      	str	r5, [sp, #0]
    2f8e:	2302      	movs	r3, #2
    2f90:	461a      	mov	r2, r3
    2f92:	210b      	movs	r1, #11
    2f94:	4638      	mov	r0, r7
    2f96:	47d0      	blx	sl
	
		payload_length = strlen(payload_template);
    2f98:	a804      	add	r0, sp, #16
    2f9a:	47b0      	blx	r6
	
		grid_ui_event_register_action(&grid_core_state.element[0], GRID_UI_EVENT_HEARTBEAT, payload_template, payload_length);		
    2f9c:	6865      	ldr	r5, [r4, #4]
    2f9e:	b2c3      	uxtb	r3, r0
    2fa0:	aa04      	add	r2, sp, #16
    2fa2:	2101      	movs	r1, #1
    2fa4:	4628      	mov	r0, r5
    2fa6:	4f59      	ldr	r7, [pc, #356]	; (310c <grid_module_common_init+0x210>)
    2fa8:	47b8      	blx	r7
		
	}

	if (1){	// INIT CORE_STATE->mapmode press
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_LENGTH] = {0};
    2faa:	2278      	movs	r2, #120	; 0x78
    2fac:	4649      	mov	r1, r9
    2fae:	a804      	add	r0, sp, #16
    2fb0:	47c0      	blx	r8
		uint8_t payload_length = 0;
	
		sprintf(payload_template, GRID_EVENT_MAPMODE_PRESS GRID_DEFAULT_ACTION_MAPMODE_PRESS);
    2fb2:	ad04      	add	r5, sp, #16
    2fb4:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 3168 <grid_module_common_init+0x26c>
    2fb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2fbe:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    2fc2:	c503      	stmia	r5!, {r0, r1}
    2fc4:	702a      	strb	r2, [r5, #0]
		payload_length = strlen(payload_template);
    2fc6:	a804      	add	r0, sp, #16
    2fc8:	47b0      	blx	r6
	
		grid_ui_event_register_action(&grid_core_state.element[0], GRID_UI_EVENT_MAPMODE_PRESS, payload_template, payload_length);			
    2fca:	6865      	ldr	r5, [r4, #4]
    2fcc:	b2c3      	uxtb	r3, r0
    2fce:	aa04      	add	r2, sp, #16
    2fd0:	2108      	movs	r1, #8
    2fd2:	4628      	mov	r0, r5
    2fd4:	47b8      	blx	r7
		
	}	

	if (1){ // INIT CORE_STATE->mapmode release
			
		uint8_t payload_template[GRID_UI_ACTION_STRING_LENGTH] = {0};
    2fd6:	2278      	movs	r2, #120	; 0x78
    2fd8:	4649      	mov	r1, r9
    2fda:	a804      	add	r0, sp, #16
    2fdc:	47c0      	blx	r8
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENT_MAPMODE_RELEASE GRID_DEFAULT_ACTION_MAPMODE_RELEASE);
    2fde:	ad04      	add	r5, sp, #16
    2fe0:	f8df e188 	ldr.w	lr, [pc, #392]	; 316c <grid_module_common_init+0x270>
    2fe4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2fea:	f8de 3000 	ldr.w	r3, [lr]
    2fee:	702b      	strb	r3, [r5, #0]
		payload_length = strlen(payload_template);
    2ff0:	a804      	add	r0, sp, #16
    2ff2:	47b0      	blx	r6
		
		grid_ui_event_register_action(&grid_core_state.element[0], GRID_UI_EVENT_MAPMODE_RELEASE, payload_template, payload_length);
    2ff4:	6865      	ldr	r5, [r4, #4]
    2ff6:	b2c3      	uxtb	r3, r0
    2ff8:	aa04      	add	r2, sp, #16
    2ffa:	2109      	movs	r1, #9
    2ffc:	4628      	mov	r0, r5
    2ffe:	47b8      	blx	r7
		
	}	
	
	if (1){ // INIT CORE_STATE->cfgresponse
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_LENGTH] = {0};
    3000:	2278      	movs	r2, #120	; 0x78
    3002:	4649      	mov	r1, r9
    3004:	a804      	add	r0, sp, #16
    3006:	47c0      	blx	r8
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENT_CFG_RESPONES GRID_DEFAULT_ACTION_CFG_RESPONSE);
    3008:	ad04      	add	r5, sp, #16
    300a:	f8df e164 	ldr.w	lr, [pc, #356]	; 3170 <grid_module_common_init+0x274>
    300e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3014:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    3018:	c503      	stmia	r5!, {r0, r1}
    301a:	702a      	strb	r2, [r5, #0]
		payload_length = strlen(payload_template);
    301c:	a804      	add	r0, sp, #16
    301e:	47b0      	blx	r6
		
		grid_ui_event_register_action(&grid_core_state.element[0], GRID_UI_EVENT_CFG_RESPONSE, payload_template, payload_length);
    3020:	6865      	ldr	r5, [r4, #4]
    3022:	b2c3      	uxtb	r3, r0
    3024:	aa04      	add	r2, sp, #16
    3026:	210a      	movs	r1, #10
    3028:	4628      	mov	r0, r5
    302a:	47b8      	blx	r7
		
	}	
	
	if (1){ // INIT CORE_STATE->cfgrequest
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_LENGTH] = {0};
    302c:	2278      	movs	r2, #120	; 0x78
    302e:	4649      	mov	r1, r9
    3030:	a804      	add	r0, sp, #16
    3032:	47c0      	blx	r8
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENT_CFG_REQUEST GRID_DEFAULT_ACTION_CFG_REQUEST);
    3034:	ad04      	add	r5, sp, #16
    3036:	f8df e13c 	ldr.w	lr, [pc, #316]	; 3174 <grid_module_common_init+0x278>
    303a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    303e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3040:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    3044:	c503      	stmia	r5!, {r0, r1}
    3046:	702a      	strb	r2, [r5, #0]
		payload_length = strlen(payload_template);
    3048:	a804      	add	r0, sp, #16
    304a:	47b0      	blx	r6
		
		grid_ui_event_register_action(&grid_core_state.element[0], GRID_UI_EVENT_CFG_REQUEST, payload_template, payload_length);
    304c:	6864      	ldr	r4, [r4, #4]
    304e:	b2c3      	uxtb	r3, r0
    3050:	aa04      	add	r2, sp, #16
    3052:	210b      	movs	r1, #11
    3054:	4620      	mov	r0, r4
    3056:	47b8      	blx	r7
	}	
	
	
	//enable pwr!
	
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "UI Power Enable");
    3058:	492d      	ldr	r1, [pc, #180]	; (3110 <grid_module_common_init+0x214>)
    305a:	482e      	ldr	r0, [pc, #184]	; (3114 <grid_module_common_init+0x218>)
    305c:	4b2e      	ldr	r3, [pc, #184]	; (3118 <grid_module_common_init+0x21c>)
    305e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3060:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3064:	4b2d      	ldr	r3, [pc, #180]	; (311c <grid_module_common_init+0x220>)
    3066:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){	
    306a:	47d8      	blx	fp
    306c:	b1d8      	cbz	r0, 30a6 <grid_module_common_init+0x1aa>
    306e:	47d8      	blx	fp
    3070:	2808      	cmp	r0, #8
    3072:	d018      	beq.n	30a6 <grid_module_common_init+0x1aa>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PO16");				
		grid_module_po16_revb_init();	
	}	
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
    3074:	4b2a      	ldr	r3, [pc, #168]	; (3120 <grid_module_common_init+0x224>)
    3076:	4798      	blx	r3
    3078:	2880      	cmp	r0, #128	; 0x80
    307a:	d024      	beq.n	30c6 <grid_module_common_init+0x1ca>
    307c:	4b28      	ldr	r3, [pc, #160]	; (3120 <grid_module_common_init+0x224>)
    307e:	4798      	blx	r3
    3080:	2888      	cmp	r0, #136	; 0x88
    3082:	d020      	beq.n	30c6 <grid_module_common_init+0x1ca>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: BU16");
		grid_module_bu16_revb_init();
	
	}	
	else if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    3084:	4b26      	ldr	r3, [pc, #152]	; (3120 <grid_module_common_init+0x224>)
    3086:	4798      	blx	r3
    3088:	2840      	cmp	r0, #64	; 0x40
    308a:	d023      	beq.n	30d4 <grid_module_common_init+0x1d8>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PBF4");					
		grid_module_pbf4_reva_init();			
	}
	else if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){
    308c:	4b24      	ldr	r3, [pc, #144]	; (3120 <grid_module_common_init+0x224>)
    308e:	4798      	blx	r3
    3090:	28c0      	cmp	r0, #192	; 0xc0
    3092:	d026      	beq.n	30e2 <grid_module_common_init+0x1e6>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: EN16");
		grid_module_en16_reva_init();
		//grid_module_bu16_revb_init(&grid_ui_state);		
	}	
	else{
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: Unknown Module");
    3094:	4d1f      	ldr	r5, [pc, #124]	; (3114 <grid_module_common_init+0x218>)
    3096:	4923      	ldr	r1, [pc, #140]	; (3124 <grid_module_common_init+0x228>)
    3098:	4628      	mov	r0, r5
    309a:	4c1f      	ldr	r4, [pc, #124]	; (3118 <grid_module_common_init+0x21c>)
    309c:	47a0      	blx	r4
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "HWCFG Mismatch");
    309e:	4922      	ldr	r1, [pc, #136]	; (3128 <grid_module_common_init+0x22c>)
    30a0:	4628      	mov	r0, r5
    30a2:	47a0      	blx	r4
    30a4:	e005      	b.n	30b2 <grid_module_common_init+0x1b6>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PO16");				
    30a6:	4921      	ldr	r1, [pc, #132]	; (312c <grid_module_common_init+0x230>)
    30a8:	481a      	ldr	r0, [pc, #104]	; (3114 <grid_module_common_init+0x218>)
    30aa:	4b1b      	ldr	r3, [pc, #108]	; (3118 <grid_module_common_init+0x21c>)
    30ac:	4798      	blx	r3
		grid_module_po16_revb_init();	
    30ae:	4b20      	ldr	r3, [pc, #128]	; (3130 <grid_module_common_init+0x234>)
    30b0:	4798      	blx	r3
	}


	grid_sys_init(&grid_sys_state);
    30b2:	4820      	ldr	r0, [pc, #128]	; (3134 <grid_module_common_init+0x238>)
    30b4:	4b20      	ldr	r3, [pc, #128]	; (3138 <grid_module_common_init+0x23c>)
    30b6:	4798      	blx	r3


	grid_nvm_init(&grid_nvm_state, &FLASH_0);
    30b8:	4920      	ldr	r1, [pc, #128]	; (313c <grid_module_common_init+0x240>)
    30ba:	4821      	ldr	r0, [pc, #132]	; (3140 <grid_module_common_init+0x244>)
    30bc:	4b21      	ldr	r3, [pc, #132]	; (3144 <grid_module_common_init+0x248>)
    30be:	4798      	blx	r3
	
		
}
    30c0:	b023      	add	sp, #140	; 0x8c
    30c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: BU16");
    30c6:	4920      	ldr	r1, [pc, #128]	; (3148 <grid_module_common_init+0x24c>)
    30c8:	4812      	ldr	r0, [pc, #72]	; (3114 <grid_module_common_init+0x218>)
    30ca:	4b13      	ldr	r3, [pc, #76]	; (3118 <grid_module_common_init+0x21c>)
    30cc:	4798      	blx	r3
		grid_module_bu16_revb_init();
    30ce:	4b1f      	ldr	r3, [pc, #124]	; (314c <grid_module_common_init+0x250>)
    30d0:	4798      	blx	r3
    30d2:	e7ee      	b.n	30b2 <grid_module_common_init+0x1b6>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PBF4");					
    30d4:	491e      	ldr	r1, [pc, #120]	; (3150 <grid_module_common_init+0x254>)
    30d6:	480f      	ldr	r0, [pc, #60]	; (3114 <grid_module_common_init+0x218>)
    30d8:	4b0f      	ldr	r3, [pc, #60]	; (3118 <grid_module_common_init+0x21c>)
    30da:	4798      	blx	r3
		grid_module_pbf4_reva_init();			
    30dc:	4b1d      	ldr	r3, [pc, #116]	; (3154 <grid_module_common_init+0x258>)
    30de:	4798      	blx	r3
    30e0:	e7e7      	b.n	30b2 <grid_module_common_init+0x1b6>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: EN16");
    30e2:	491d      	ldr	r1, [pc, #116]	; (3158 <grid_module_common_init+0x25c>)
    30e4:	480b      	ldr	r0, [pc, #44]	; (3114 <grid_module_common_init+0x218>)
    30e6:	4b0c      	ldr	r3, [pc, #48]	; (3118 <grid_module_common_init+0x21c>)
    30e8:	4798      	blx	r3
		grid_module_en16_reva_init();
    30ea:	4b1c      	ldr	r3, [pc, #112]	; (315c <grid_module_common_init+0x260>)
    30ec:	4798      	blx	r3
    30ee:	e7e0      	b.n	30b2 <grid_module_common_init+0x1b6>
    30f0:	20007d64 	.word	0x20007d64
    30f4:	00004fd1 	.word	0x00004fd1
    30f8:	00005065 	.word	0x00005065
    30fc:	0000eb70 	.word	0x0000eb70
    3100:	0000d87d 	.word	0x0000d87d
    3104:	0000eb84 	.word	0x0000eb84
    3108:	0000d835 	.word	0x0000d835
    310c:	00005145 	.word	0x00005145
    3110:	0000ec00 	.word	0x0000ec00
    3114:	0000e95c 	.word	0x0000e95c
    3118:	0000d5b1 	.word	0x0000d5b1
    311c:	41008000 	.word	0x41008000
    3120:	00004b21 	.word	0x00004b21
    3124:	0000ec60 	.word	0x0000ec60
    3128:	0000ec7c 	.word	0x0000ec7c
    312c:	0000ec10 	.word	0x0000ec10
    3130:	00004311 	.word	0x00004311
    3134:	200032f8 	.word	0x200032f8
    3138:	0000498d 	.word	0x0000498d
    313c:	20000fcc 	.word	0x20000fcc
    3140:	200033a0 	.word	0x200033a0
    3144:	000011f1 	.word	0x000011f1
    3148:	0000ec24 	.word	0x0000ec24
    314c:	000033e1 	.word	0x000033e1
    3150:	0000ec38 	.word	0x0000ec38
    3154:	00003f09 	.word	0x00003f09
    3158:	0000ec4c 	.word	0x0000ec4c
    315c:	000039ad 	.word	0x000039ad
    3160:	0000d447 	.word	0x0000d447
    3164:	00004f7d 	.word	0x00004f7d
    3168:	0000eb98 	.word	0x0000eb98
    316c:	0000ebb4 	.word	0x0000ebb4
    3170:	0000ebc8 	.word	0x0000ebc8
    3174:	0000ebe4 	.word	0x0000ebe4

00003178 <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


static uint8_t helper[16] = {0};

void grid_module_bu16_revb_hardware_start_transfer(void){
    3178:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    317a:	4803      	ldr	r0, [pc, #12]	; (3188 <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    317c:	4c03      	ldr	r4, [pc, #12]	; (318c <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    317e:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3180:	4803      	ldr	r0, [pc, #12]	; (3190 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    3182:	47a0      	blx	r4
    3184:	bd10      	pop	{r4, pc}
    3186:	bf00      	nop
    3188:	20001050 	.word	0x20001050
    318c:	00005c55 	.word	0x00005c55
    3190:	20001224 	.word	0x20001224

00003194 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    3194:	4b75      	ldr	r3, [pc, #468]	; (336c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    3196:	781b      	ldrb	r3, [r3, #0]
    3198:	2b00      	cmp	r3, #0
    319a:	d06e      	beq.n	327a <grid_module_bu16_revb_hardware_transfer_complete_cb+0xe6>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    319c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31a0:	b089      	sub	sp, #36	; 0x24
	}
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    31a2:	2300      	movs	r3, #0
    31a4:	f8ad 301e 	strh.w	r3, [sp, #30]
	uint16_t adcresult_1 = 0;
    31a8:	f8ad 301c 	strh.w	r3, [sp, #28]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    31ac:	4b6f      	ldr	r3, [pc, #444]	; (336c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    31ae:	785a      	ldrb	r2, [r3, #1]
    31b0:	3208      	adds	r2, #8
    31b2:	496f      	ldr	r1, [pc, #444]	; (3370 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    31b4:	5c8d      	ldrb	r5, [r1, r2]
    31b6:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    31b8:	785a      	ldrb	r2, [r3, #1]
    31ba:	b2d2      	uxtb	r2, r2
    31bc:	5c8c      	ldrb	r4, [r1, r2]
    31be:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    31c0:	785a      	ldrb	r2, [r3, #1]
    31c2:	3201      	adds	r2, #1
    31c4:	b2d2      	uxtb	r2, r2
    31c6:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    31c8:	785a      	ldrb	r2, [r3, #1]
    31ca:	f002 0207 	and.w	r2, r2, #7
    31ce:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    31d0:	785b      	ldrb	r3, [r3, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    31d2:	f013 0f01 	tst.w	r3, #1
    31d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    31da:	4b66      	ldr	r3, [pc, #408]	; (3374 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    31dc:	bf14      	ite	ne
    31de:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    31e2:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    31e6:	4b61      	ldr	r3, [pc, #388]	; (336c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    31e8:	785b      	ldrb	r3, [r3, #1]
    31ea:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    31ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    31f2:	4b60      	ldr	r3, [pc, #384]	; (3374 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    31f4:	bf14      	ite	ne
    31f6:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    31fa:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    31fe:	4b5b      	ldr	r3, [pc, #364]	; (336c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    3200:	785b      	ldrb	r3, [r3, #1]
    3202:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3206:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    320a:	4b5a      	ldr	r3, [pc, #360]	; (3374 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    320c:	bf14      	ite	ne
    320e:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3212:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    3216:	2302      	movs	r3, #2
    3218:	f10d 021e 	add.w	r2, sp, #30
    321c:	2100      	movs	r1, #0
    321e:	4856      	ldr	r0, [pc, #344]	; (3378 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>)
    3220:	4e56      	ldr	r6, [pc, #344]	; (337c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>)
    3222:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    3224:	2302      	movs	r3, #2
    3226:	aa07      	add	r2, sp, #28
    3228:	2100      	movs	r1, #0
    322a:	4855      	ldr	r0, [pc, #340]	; (3380 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1ec>)
    322c:	47b0      	blx	r6
	
	uint8_t result_index[2] = {0};
    322e:	2300      	movs	r3, #0
	uint8_t result_value[2] = {0};
    3230:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t result_valid[2] = {0};
    3234:	f8ad 3010 	strh.w	r3, [sp, #16]
		
	result_index[0] = adc_index_0;
    3238:	f88d 5018 	strb.w	r5, [sp, #24]
	result_index[1] = adc_index_1;
    323c:	f88d 4019 	strb.w	r4, [sp, #25]
		
		
	uint8_t adcresult_0_valid = 0;
	
	if (adcresult_0>60000){
    3240:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    3244:	f64e 2260 	movw	r2, #60000	; 0xea60
    3248:	4293      	cmp	r3, r2
    324a:	d91c      	bls.n	3286 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xf2>
		result_value[0] = 0;
		result_valid[0] = 1;
    324c:	2301      	movs	r3, #1
    324e:	f88d 3010 	strb.w	r3, [sp, #16]
		result_valid[0] = 1;
	}
		
	uint8_t adcresult_1_valid = 0;
	
	if (adcresult_1>60000){
    3252:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    3256:	f64e 2260 	movw	r2, #60000	; 0xea60
    325a:	4293      	cmp	r3, r2
    325c:	d91c      	bls.n	3298 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x104>
		result_value[1] = 0;
		result_valid[1] = 1;
    325e:	2301      	movs	r3, #1
    3260:	f88d 3011 	strb.w	r3, [sp, #17]
		result_value[1] = 127;
		result_valid[1] = 1;
	}


	uint8_t grid_module_bu16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};	
    3264:	4b47      	ldr	r3, [pc, #284]	; (3384 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f0>)
    3266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3268:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    326c:	2400      	movs	r4, #0
		// Helper variable for readability
		uint8_t res_index = result_index[i];
		uint8_t res_valid = result_valid[i];
		uint8_t res_value = result_value[i];
		
		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;		
    326e:	4f46      	ldr	r7, [pc, #280]	; (3388 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f4>)
		
		if (res_value != helper[res_index] && res_valid == 1){
    3270:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 336c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>

				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV7] = 0;
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV8] = 0;

				
				uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DR);		
    3274:	f8df 9120 	ldr.w	r9, [pc, #288]	; 3398 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x204>
    3278:	e039      	b.n	32ee <grid_module_bu16_revb_hardware_transfer_complete_cb+0x15a>
		grid_module_bu16_revb_hardware_transfer_complete++;
    327a:	4a3c      	ldr	r2, [pc, #240]	; (336c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    327c:	7813      	ldrb	r3, [r2, #0]
    327e:	3301      	adds	r3, #1
    3280:	b2db      	uxtb	r3, r3
    3282:	7013      	strb	r3, [r2, #0]
    3284:	4770      	bx	lr
	else if (adcresult_0<200){
    3286:	2bc7      	cmp	r3, #199	; 0xc7
    3288:	d8e3      	bhi.n	3252 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xbe>
		result_value[0] = 127;
    328a:	237f      	movs	r3, #127	; 0x7f
    328c:	f88d 3014 	strb.w	r3, [sp, #20]
		result_valid[0] = 1;
    3290:	2301      	movs	r3, #1
    3292:	f88d 3010 	strb.w	r3, [sp, #16]
    3296:	e7dc      	b.n	3252 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xbe>
	else if (adcresult_1<200){
    3298:	2bc7      	cmp	r3, #199	; 0xc7
    329a:	d8e3      	bhi.n	3264 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xd0>
		result_value[1] = 127;
    329c:	237f      	movs	r3, #127	; 0x7f
    329e:	f88d 3015 	strb.w	r3, [sp, #21]
		result_valid[1] = 1;
    32a2:	2301      	movs	r3, #1
    32a4:	f88d 3011 	strb.w	r3, [sp, #17]
    32a8:	e7dc      	b.n	3264 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xd0>
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;
    32aa:	604d      	str	r5, [r1, #4]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_bu16_mux_reversed_lookup[res_index];
    32ac:	ab08      	add	r3, sp, #32
    32ae:	442b      	add	r3, r5
    32b0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
    32b4:	608b      	str	r3, [r1, #8]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV7] = 0;
    32b6:	2300      	movs	r3, #0
    32b8:	61cb      	str	r3, [r1, #28]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV8] = 0;
    32ba:	620b      	str	r3, [r1, #32]
				uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DR);		
    32bc:	6878      	ldr	r0, [r7, #4]
    32be:	2106      	movs	r1, #6
    32c0:	4450      	add	r0, sl
    32c2:	47c8      	blx	r9
    32c4:	4683      	mov	fp, r0
				
				grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    32c6:	6878      	ldr	r0, [r7, #4]
    32c8:	4659      	mov	r1, fp
    32ca:	4450      	add	r0, sl
    32cc:	4b2f      	ldr	r3, [pc, #188]	; (338c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f8>)
    32ce:	4798      	blx	r3
				
				grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    32d0:	687b      	ldr	r3, [r7, #4]
    32d2:	449a      	add	sl, r3
    32d4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    32d8:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    32dc:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
    32e0:	4b2b      	ldr	r3, [pc, #172]	; (3390 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1fc>)
    32e2:	4798      	blx	r3

				helper[result_index[i]] = res_value;
    32e4:	4445      	add	r5, r8
    32e6:	712e      	strb	r6, [r5, #4]
    32e8:	3401      	adds	r4, #1
	for (uint8_t i=0; i<2; i++)
    32ea:	2c02      	cmp	r4, #2
    32ec:	d035      	beq.n	335a <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c6>
		uint8_t res_index = result_index[i];
    32ee:	ab06      	add	r3, sp, #24
    32f0:	5ce5      	ldrb	r5, [r4, r3]
		uint8_t res_value = result_value[i];
    32f2:	ab05      	add	r3, sp, #20
    32f4:	5ce6      	ldrb	r6, [r4, r3]
		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;		
    32f6:	6879      	ldr	r1, [r7, #4]
		if (res_value != helper[res_index] && res_valid == 1){
    32f8:	eb08 0305 	add.w	r3, r8, r5
    32fc:	791b      	ldrb	r3, [r3, #4]
    32fe:	429e      	cmp	r6, r3
    3300:	d0f2      	beq.n	32e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x154>
		uint8_t res_valid = result_valid[i];
    3302:	aa04      	add	r2, sp, #16
		if (res_value != helper[res_index] && res_valid == 1){
    3304:	5ca2      	ldrb	r2, [r4, r2]
    3306:	2a01      	cmp	r2, #1
    3308:	d1ee      	bne.n	32e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x154>
		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;		
    330a:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    330e:	fb0a fa05 	mul.w	sl, sl, r5
    3312:	4451      	add	r1, sl
			if (helper[res_index] == 0){ // Button Press Event
    3314:	2b00      	cmp	r3, #0
    3316:	d1c8      	bne.n	32aa <grid_module_bu16_revb_hardware_transfer_complete_cb+0x116>
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;						
    3318:	604d      	str	r5, [r1, #4]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_bu16_mux_reversed_lookup[res_index];
    331a:	ab08      	add	r3, sp, #32
    331c:	442b      	add	r3, r5
    331e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
    3322:	608b      	str	r3, [r1, #8]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV7] = 127;
    3324:	237f      	movs	r3, #127	; 0x7f
    3326:	61cb      	str	r3, [r1, #28]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV8] = 255;
    3328:	23ff      	movs	r3, #255	; 0xff
    332a:	620b      	str	r3, [r1, #32]
				uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DP);
    332c:	6878      	ldr	r0, [r7, #4]
    332e:	2105      	movs	r1, #5
    3330:	4450      	add	r0, sl
    3332:	47c8      	blx	r9
    3334:	4683      	mov	fp, r0
				grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    3336:	6878      	ldr	r0, [r7, #4]
    3338:	4659      	mov	r1, fp
    333a:	4450      	add	r0, sl
    333c:	4b13      	ldr	r3, [pc, #76]	; (338c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f8>)
    333e:	4798      	blx	r3
				grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	449a      	add	sl, r3
    3344:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    3348:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    334c:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
    3350:	4b0f      	ldr	r3, [pc, #60]	; (3390 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1fc>)
    3352:	4798      	blx	r3
				helper[result_index[i]] = res_value;
    3354:	4445      	add	r5, r8
    3356:	712e      	strb	r6, [r5, #4]
    3358:	e7c6      	b.n	32e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x154>
		}

	}
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    335a:	2200      	movs	r2, #0
    335c:	4b03      	ldr	r3, [pc, #12]	; (336c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    335e:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    3360:	4b0c      	ldr	r3, [pc, #48]	; (3394 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x200>)
    3362:	4798      	blx	r3
}
    3364:	b009      	add	sp, #36	; 0x24
    3366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    336a:	bf00      	nop
    336c:	20000634 	.word	0x20000634
    3370:	20000300 	.word	0x20000300
    3374:	41008000 	.word	0x41008000
    3378:	20001050 	.word	0x20001050
    337c:	00005b75 	.word	0x00005b75
    3380:	20001224 	.word	0x20001224
    3384:	0000ec8c 	.word	0x0000ec8c
    3388:	200032ec 	.word	0x200032ec
    338c:	00005709 	.word	0x00005709
    3390:	000052af 	.word	0x000052af
    3394:	00003179 	.word	0x00003179
    3398:	00005285 	.word	0x00005285

0000339c <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    339e:	4f0b      	ldr	r7, [pc, #44]	; (33cc <grid_module_bu16_revb_hardware_init+0x30>)
    33a0:	4c0b      	ldr	r4, [pc, #44]	; (33d0 <grid_module_bu16_revb_hardware_init+0x34>)
    33a2:	463b      	mov	r3, r7
    33a4:	2200      	movs	r2, #0
    33a6:	4611      	mov	r1, r2
    33a8:	4620      	mov	r0, r4
    33aa:	4e0a      	ldr	r6, [pc, #40]	; (33d4 <grid_module_bu16_revb_hardware_init+0x38>)
    33ac:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    33ae:	4d0a      	ldr	r5, [pc, #40]	; (33d8 <grid_module_bu16_revb_hardware_init+0x3c>)
    33b0:	463b      	mov	r3, r7
    33b2:	2200      	movs	r2, #0
    33b4:	4611      	mov	r1, r2
    33b6:	4628      	mov	r0, r5
    33b8:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    33ba:	2100      	movs	r1, #0
    33bc:	4620      	mov	r0, r4
    33be:	4c07      	ldr	r4, [pc, #28]	; (33dc <grid_module_bu16_revb_hardware_init+0x40>)
    33c0:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    33c2:	2100      	movs	r1, #0
    33c4:	4628      	mov	r0, r5
    33c6:	47a0      	blx	r4
    33c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33ca:	bf00      	nop
    33cc:	00003195 	.word	0x00003195
    33d0:	20001050 	.word	0x20001050
    33d4:	00005af5 	.word	0x00005af5
    33d8:	20001224 	.word	0x20001224
    33dc:	00005ab5 	.word	0x00005ab5

000033e0 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(){
    33e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33e4:	b0bd      	sub	sp, #244	; 0xf4

	grid_led_lowlevel_init(&grid_led_state, 16);
    33e6:	2110      	movs	r1, #16
    33e8:	483c      	ldr	r0, [pc, #240]	; (34dc <grid_module_bu16_revb_init+0xfc>)
    33ea:	4b3d      	ldr	r3, [pc, #244]	; (34e0 <grid_module_bu16_revb_init+0x100>)
    33ec:	4798      	blx	r3
	
	grid_ui_model_init(&grid_ui_state, 16);
    33ee:	2110      	movs	r1, #16
    33f0:	483c      	ldr	r0, [pc, #240]	; (34e4 <grid_module_bu16_revb_init+0x104>)
    33f2:	4b3d      	ldr	r3, [pc, #244]	; (34e8 <grid_module_bu16_revb_init+0x108>)
    33f4:	4798      	blx	r3
    33f6:	2400      	movs	r4, #0
    33f8:	4626      	mov	r6, r4
	
	for (uint8_t i=0; i<16; i++){

		grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_BUTTON);
    33fa:	4d3a      	ldr	r5, [pc, #232]	; (34e4 <grid_module_bu16_revb_init+0x104>)
    33fc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 34f8 <grid_module_bu16_revb_init+0x118>
    3400:	6868      	ldr	r0, [r5, #4]
    3402:	2102      	movs	r1, #2
    3404:	4420      	add	r0, r4
    3406:	47d0      	blx	sl
		grid_ui_state.element[i].template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = i;
    3408:	686b      	ldr	r3, [r5, #4]
    340a:	4423      	add	r3, r4
    340c:	605e      	str	r6, [r3, #4]
			
		uint8_t payload_template[GRID_UI_ACTION_STRING_LENGTH] = {0};
    340e:	2278      	movs	r2, #120	; 0x78
    3410:	2100      	movs	r1, #0
    3412:	4668      	mov	r0, sp
    3414:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 34fc <grid_module_bu16_revb_init+0x11c>
    3418:	47c8      	blx	r9
			
		sprintf(payload_template, GRID_EVENT_DP_BUT GRID_DEFAULT_ACTION_DP);
    341a:	466f      	mov	r7, sp
    341c:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 3500 <grid_module_bu16_revb_init+0x120>
    3420:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3424:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3426:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    342a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    342c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    3430:	c703      	stmia	r7!, {r0, r1}
    3432:	f827 2b02 	strh.w	r2, [r7], #2
    3436:	0c12      	lsrs	r2, r2, #16
    3438:	703a      	strb	r2, [r7, #0]
		uint8_t payload_length = strlen(payload_template);
    343a:	4668      	mov	r0, sp
    343c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 3504 <grid_module_bu16_revb_init+0x124>
    3440:	47c0      	blx	r8
		
		// Register Digital Press Action		
		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DP, payload_template, payload_length);
    3442:	686f      	ldr	r7, [r5, #4]
    3444:	fa5f fb80 	uxtb.w	fp, r0
    3448:	465b      	mov	r3, fp
    344a:	466a      	mov	r2, sp
    344c:	2105      	movs	r1, #5
    344e:	1938      	adds	r0, r7, r4
    3450:	4f26      	ldr	r7, [pc, #152]	; (34ec <grid_module_bu16_revb_init+0x10c>)
    3452:	47b8      	blx	r7
		
		sprintf(payload_template, GRID_EVENT_DR_BUT GRID_DEFAULT_ACTION_DR);
    3454:	46ee      	mov	lr, sp
    3456:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 3508 <grid_module_bu16_revb_init+0x128>
    345a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    345e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3462:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3466:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    346a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    346e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    3472:	f82e 2b02 	strh.w	r2, [lr], #2
    3476:	0c12      	lsrs	r2, r2, #16
    3478:	f88e 2000 	strb.w	r2, [lr]
		
 		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DR, payload_template, payload_length);
    347c:	6868      	ldr	r0, [r5, #4]
    347e:	465b      	mov	r3, fp
    3480:	466a      	mov	r2, sp
    3482:	2106      	movs	r1, #6
    3484:	4420      	add	r0, r4
    3486:	47b8      	blx	r7
		 
		 
		uint8_t init_action[GRID_UI_ACTION_STRING_LENGTH] = {0};
    3488:	2278      	movs	r2, #120	; 0x78
    348a:	2100      	movs	r1, #0
    348c:	eb0d 0002 	add.w	r0, sp, r2
    3490:	47c8      	blx	r9
		sprintf(init_action, GRID_DEFAULT_ACTION_INIT);
    3492:	f10d 0e78 	add.w	lr, sp, #120	; 0x78
    3496:	f8df c074 	ldr.w	ip, [pc, #116]	; 350c <grid_module_bu16_revb_init+0x12c>
    349a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    349e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    34a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    34a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    34aa:	f8dc 3000 	ldr.w	r3, [ip]
    34ae:	f88e 3000 	strb.w	r3, [lr]
		uint8_t init_length = strlen(init_action);
    34b2:	a81e      	add	r0, sp, #120	; 0x78
    34b4:	47c0      	blx	r8
		
 		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_INIT, init_action, init_length);		
    34b6:	f8d5 e004 	ldr.w	lr, [r5, #4]
    34ba:	b2c3      	uxtb	r3, r0
    34bc:	aa1e      	add	r2, sp, #120	; 0x78
    34be:	2100      	movs	r1, #0
    34c0:	eb0e 0004 	add.w	r0, lr, r4
    34c4:	47b8      	blx	r7
    34c6:	3601      	adds	r6, #1
    34c8:	342c      	adds	r4, #44	; 0x2c
	for (uint8_t i=0; i<16; i++){
    34ca:	2e10      	cmp	r6, #16
    34cc:	d198      	bne.n	3400 <grid_module_bu16_revb_init+0x20>
		

	}
				
	grid_module_bu16_revb_hardware_init();
    34ce:	4b08      	ldr	r3, [pc, #32]	; (34f0 <grid_module_bu16_revb_init+0x110>)
    34d0:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    34d2:	4b08      	ldr	r3, [pc, #32]	; (34f4 <grid_module_bu16_revb_init+0x114>)
    34d4:	4798      	blx	r3

};
    34d6:	b03d      	add	sp, #244	; 0xf4
    34d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34dc:	20007dd8 	.word	0x20007dd8
    34e0:	00002d41 	.word	0x00002d41
    34e4:	200032ec 	.word	0x200032ec
    34e8:	00004fd1 	.word	0x00004fd1
    34ec:	00005145 	.word	0x00005145
    34f0:	0000339d 	.word	0x0000339d
    34f4:	00003179 	.word	0x00003179
    34f8:	00005065 	.word	0x00005065
    34fc:	0000d447 	.word	0x0000d447
    3500:	0000ec9c 	.word	0x0000ec9c
    3504:	0000d87d 	.word	0x0000d87d
    3508:	0000ecc8 	.word	0x0000ecc8
    350c:	0000ecf4 	.word	0x0000ecf4

00003510 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    3510:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3512:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3516:	4b07      	ldr	r3, [pc, #28]	; (3534 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    3518:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    351a:	4c07      	ldr	r4, [pc, #28]	; (3538 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    351c:	4620      	mov	r0, r4
    351e:	4b07      	ldr	r3, [pc, #28]	; (353c <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    3520:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    3522:	4907      	ldr	r1, [pc, #28]	; (3540 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    3524:	2308      	movs	r3, #8
    3526:	460a      	mov	r2, r1
    3528:	3110      	adds	r1, #16
    352a:	4620      	mov	r0, r4
    352c:	4c05      	ldr	r4, [pc, #20]	; (3544 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    352e:	47a0      	blx	r4
    3530:	bd10      	pop	{r4, pc}
    3532:	bf00      	nop
    3534:	41008000 	.word	0x41008000
    3538:	20000f44 	.word	0x20000f44
    353c:	0000639d 	.word	0x0000639d
    3540:	20000648 	.word	0x20000648
    3544:	0000643d 	.word	0x0000643d

00003548 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    3548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    354c:	ed2d 8b04 	vpush	{d8-d9}
    3550:	b089      	sub	sp, #36	; 0x24
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3556:	4b76      	ldr	r3, [pc, #472]	; (3730 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1e8>)
    3558:	615a      	str	r2, [r3, #20]
	
	// Set the shift registers to continuously load data until new transaction is issued
	gpio_set_pin_level(PIN_UI_SPI_CS0, false);


	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    355a:	4876      	ldr	r0, [pc, #472]	; (3734 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1ec>)
    355c:	4b76      	ldr	r3, [pc, #472]	; (3738 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1f0>)
    355e:	4798      	blx	r3
    3560:	4603      	mov	r3, r0
	
	if (bank == 255){
		bank=0;
    3562:	28ff      	cmp	r0, #255	; 0xff
    3564:	bf14      	ite	ne
    3566:	4603      	movne	r3, r0
    3568:	2300      	moveq	r3, #0
    356a:	461a      	mov	r2, r3
    356c:	9301      	str	r3, [sp, #4]
	}


	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    356e:	4b71      	ldr	r3, [pc, #452]	; (3734 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1ec>)
    3570:	7adb      	ldrb	r3, [r3, #11]
		
	if (bank_changed){
    3572:	2b00      	cmp	r3, #0
    3574:	d03d      	beq.n	35f2 <grid_module_en16_reva_hardware_transfer_complete_cb+0xaa>
		grid_sys_state.bank_active_changed = 0;
    3576:	2400      	movs	r4, #0
    3578:	4b6e      	ldr	r3, [pc, #440]	; (3734 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1ec>)
    357a:	72dc      	strb	r4, [r3, #11]
    357c:	4b6f      	ldr	r3, [pc, #444]	; (373c <grid_module_en16_reva_hardware_transfer_complete_cb+0x1f4>)
    357e:	eb03 1902 	add.w	r9, r3, r2, lsl #4
    3582:	f109 39ff 	add.w	r9, r9, #4294967295
    3586:	f10d 0a10 	add.w	sl, sp, #16
    358a:	f10d 0b20 	add.w	fp, sp, #32
    358e:	46d0      	mov	r8, sl
			


			uint8_t value = helper[bank][i];
			uint8_t res_index = i;
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3590:	4f6b      	ldr	r7, [pc, #428]	; (3740 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1f8>)
			uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    3592:	4e6c      	ldr	r6, [pc, #432]	; (3744 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1fc>)
			uint8_t value = helper[bank][i];
    3594:	f819 ef01 	ldrb.w	lr, [r9, #1]!
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3598:	687d      	ldr	r5, [r7, #4]
    359a:	4425      	add	r5, r4
			uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    359c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    35a0:	f10d 0c20 	add.w	ip, sp, #32
    35a4:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
			
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;
    35a8:	eba8 030a 	sub.w	r3, r8, sl
    35ac:	606b      	str	r3, [r5, #4]
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    35ae:	f818 3b01 	ldrb.w	r3, [r8], #1
    35b2:	60ab      	str	r3, [r5, #8]

			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV7] = value;
    35b4:	f8c5 e00c 	str.w	lr, [r5, #12]
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV8] = value*2;
    35b8:	ea4f 034e 	mov.w	r3, lr, lsl #1
    35bc:	612b      	str	r3, [r5, #16]
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV14U] = 0;
    35be:	2300      	movs	r3, #0
    35c0:	616b      	str	r3, [r5, #20]
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV14L] = 0;
    35c2:	61ab      	str	r3, [r5, #24]
			
			uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_AVC7);
    35c4:	6878      	ldr	r0, [r7, #4]
    35c6:	2102      	movs	r1, #2
    35c8:	4420      	add	r0, r4
    35ca:	4b5f      	ldr	r3, [pc, #380]	; (3748 <grid_module_en16_reva_hardware_transfer_complete_cb+0x200>)
    35cc:	4798      	blx	r3
    35ce:	4605      	mov	r5, r0

			grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    35d0:	6878      	ldr	r0, [r7, #4]
    35d2:	4629      	mov	r1, r5
    35d4:	4420      	add	r0, r4
    35d6:	4b5d      	ldr	r3, [pc, #372]	; (374c <grid_module_en16_reva_hardware_transfer_complete_cb+0x204>)
    35d8:	4798      	blx	r3
			
			grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    35da:	687b      	ldr	r3, [r7, #4]
    35dc:	4423      	add	r3, r4
    35de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    35e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    35e4:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    35e8:	4b59      	ldr	r3, [pc, #356]	; (3750 <grid_module_en16_reva_hardware_transfer_complete_cb+0x208>)
    35ea:	4798      	blx	r3
    35ec:	342c      	adds	r4, #44	; 0x2c
		for (uint8_t i = 0; i<16; i++)
    35ee:	45d8      	cmp	r8, fp
    35f0:	d1d0      	bne.n	3594 <grid_module_en16_reva_hardware_transfer_complete_cb+0x4c>
		grid_sys_state.bank_active_changed = 0;
    35f2:	2700      	movs	r7, #0
		

		uint8_t i = UI_ENCODER_LOOKUP[j];
		

		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    35f4:	f8df 9168 	ldr.w	r9, [pc, #360]	; 3760 <grid_module_en16_reva_hardware_transfer_complete_cb+0x218>
				if (elapsed_time<20){
					elapsed_time = 20;
				}
			
				
				uint16_t velocityfactor = (160000-elapsed_time*elapsed_time)/60000.0 + 1;
    35f8:	ed9f 9b49 	vldr	d9, [pc, #292]	; 3720 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1d8>
    35fc:	ed9f 8b4a 	vldr	d8, [pc, #296]	; 3728 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1e0>
    3600:	e0b7      	b.n	3772 <grid_module_en16_reva_hardware_transfer_complete_cb+0x22a>
 					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;
    3602:	f8ce 5004 	str.w	r5, [lr, #4]
 					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    3606:	ab08      	add	r3, sp, #32
    3608:	442b      	add	r3, r5
    360a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    360e:	f8ce 3008 	str.w	r3, [lr, #8]
 					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV7] = 0;
    3612:	2300      	movs	r3, #0
    3614:	f8ce 301c 	str.w	r3, [lr, #28]
 					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV8] = 0;
    3618:	f8ce 3020 	str.w	r3, [lr, #32]
 					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DR);
    361c:	f8df b120 	ldr.w	fp, [pc, #288]	; 3740 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1f8>
    3620:	f8db 0004 	ldr.w	r0, [fp, #4]
    3624:	2106      	movs	r1, #6
    3626:	4440      	add	r0, r8
    3628:	4b47      	ldr	r3, [pc, #284]	; (3748 <grid_module_en16_reva_hardware_transfer_complete_cb+0x200>)
    362a:	4798      	blx	r3
    362c:	4682      	mov	sl, r0
					grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    362e:	f8db 0004 	ldr.w	r0, [fp, #4]
    3632:	4651      	mov	r1, sl
    3634:	4440      	add	r0, r8
    3636:	4b45      	ldr	r3, [pc, #276]	; (374c <grid_module_en16_reva_hardware_transfer_complete_cb+0x204>)
    3638:	4798      	blx	r3
					grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    363a:	f8db 3004 	ldr.w	r3, [fp, #4]
    363e:	4498      	add	r8, r3
    3640:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    3644:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    3648:	eb00 00ca 	add.w	r0, r0, sl, lsl #3
    364c:	4b40      	ldr	r3, [pc, #256]	; (3750 <grid_module_en16_reva_hardware_transfer_complete_cb+0x208>)
    364e:	4798      	blx	r3
    3650:	e0f2      	b.n	3838 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f0>
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[i].rotation_value + xi >= 0){
    3652:	4940      	ldr	r1, [pc, #256]	; (3754 <grid_module_en16_reva_hardware_transfer_complete_cb+0x20c>)
    3654:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    3658:	78c9      	ldrb	r1, [r1, #3]
    365a:	42d1      	cmn	r1, r2
    365c:	d405      	bmi.n	366a <grid_module_en16_reva_hardware_transfer_complete_cb+0x122>
						grid_ui_encoder_array[i].rotation_value += xi;
    365e:	4a3d      	ldr	r2, [pc, #244]	; (3754 <grid_module_en16_reva_hardware_transfer_complete_cb+0x20c>)
    3660:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    3664:	440b      	add	r3, r1
    3666:	70d3      	strb	r3, [r2, #3]
    3668:	e13d      	b.n	38e6 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39e>
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 0;
    366a:	4b3a      	ldr	r3, [pc, #232]	; (3754 <grid_module_en16_reva_hardware_transfer_complete_cb+0x20c>)
    366c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3670:	2200      	movs	r2, #0
    3672:	70da      	strb	r2, [r3, #3]
    3674:	e137      	b.n	38e6 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39e>
				else if (delta>0){
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
						grid_ui_encoder_array[i].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 127;
    3676:	4b37      	ldr	r3, [pc, #220]	; (3754 <grid_module_en16_reva_hardware_transfer_complete_cb+0x20c>)
    3678:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    367c:	227f      	movs	r2, #127	; 0x7f
    367e:	70da      	strb	r2, [r3, #3]
    3680:	e131      	b.n	38e6 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39e>
				
					
				value = helper[bank][i];
				
				if (value + delta*velocityfactor < 0){
					value = 0;
    3682:	2400      	movs	r4, #0
    3684:	e000      	b.n	3688 <grid_module_en16_reva_hardware_transfer_complete_cb+0x140>
				}
				else if (value + delta*velocityfactor > 127){
					value = 127;
    3686:	247f      	movs	r4, #127	; 0x7f
					value += delta*velocityfactor;
				}
								
				uint8_t actuator = value*2;
				
				if (value != helper[bank][i]){
    3688:	429c      	cmp	r4, r3
    368a:	d06f      	beq.n	376c <grid_module_en16_reva_hardware_transfer_complete_cb+0x224>
						
					helper[bank][i] = value;
    368c:	eb09 1202 	add.w	r2, r9, r2, lsl #4
    3690:	442a      	add	r2, r5
    3692:	f882 4020 	strb.w	r4, [r2, #32]
					uint8_t res_index = i;
					uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3696:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3740 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1f8>
    369a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    369e:	262c      	movs	r6, #44	; 0x2c
    36a0:	fb06 f605 	mul.w	r6, r6, r5
    36a4:	eb03 0e06 	add.w	lr, r3, r6
					uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};				
    36a8:	4b26      	ldr	r3, [pc, #152]	; (3744 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1fc>)
    36aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    36ac:	f10d 0c20 	add.w	ip, sp, #32
    36b0:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
															
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;
    36b4:	f8ce 5004 	str.w	r5, [lr, #4]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    36b8:	4465      	add	r5, ip
    36ba:	f815 3c10 	ldrb.w	r3, [r5, #-16]
    36be:	f8ce 3008 	str.w	r3, [lr, #8]

					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV7] = value;
    36c2:	f8ce 400c 	str.w	r4, [lr, #12]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV8] = value*2;
    36c6:	0064      	lsls	r4, r4, #1
    36c8:	f8ce 4010 	str.w	r4, [lr, #16]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV14U] = 0;
    36cc:	2300      	movs	r3, #0
    36ce:	f8ce 3014 	str.w	r3, [lr, #20]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV14L] = 0;
    36d2:	f8ce 3018 	str.w	r3, [lr, #24]
					
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_AVC7);
    36d6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    36da:	2102      	movs	r1, #2
    36dc:	4430      	add	r0, r6
    36de:	4b1a      	ldr	r3, [pc, #104]	; (3748 <grid_module_en16_reva_hardware_transfer_complete_cb+0x200>)
    36e0:	4798      	blx	r3
    36e2:	4604      	mov	r4, r0

					grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    36e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
    36e8:	4621      	mov	r1, r4
    36ea:	4430      	add	r0, r6
    36ec:	4b17      	ldr	r3, [pc, #92]	; (374c <grid_module_en16_reva_hardware_transfer_complete_cb+0x204>)
    36ee:	4798      	blx	r3
					
					grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    36f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    36f4:	441e      	add	r6, r3
    36f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    36fa:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    36fc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    3700:	4b13      	ldr	r3, [pc, #76]	; (3750 <grid_module_en16_reva_hardware_transfer_complete_cb+0x208>)
    3702:	4798      	blx	r3
    3704:	e032      	b.n	376c <grid_module_en16_reva_hardware_transfer_complete_cb+0x224>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    3706:	2200      	movs	r2, #0
    3708:	4b13      	ldr	r3, [pc, #76]	; (3758 <grid_module_en16_reva_hardware_transfer_complete_cb+0x210>)
    370a:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    370c:	4b13      	ldr	r3, [pc, #76]	; (375c <grid_module_en16_reva_hardware_transfer_complete_cb+0x214>)
    370e:	4798      	blx	r3
}
    3710:	b009      	add	sp, #36	; 0x24
    3712:	ecbd 8b04 	vpop	{d8-d9}
    3716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    371a:	bf00      	nop
    371c:	f3af 8000 	nop.w
    3720:	00000000 	.word	0x00000000
    3724:	40ed4c00 	.word	0x40ed4c00
    3728:	00000000 	.word	0x00000000
    372c:	3ff00000 	.word	0x3ff00000
    3730:	41008000 	.word	0x41008000
    3734:	200032f8 	.word	0x200032f8
    3738:	00004893 	.word	0x00004893
    373c:	20000668 	.word	0x20000668
    3740:	200032ec 	.word	0x200032ec
    3744:	0000ed18 	.word	0x0000ed18
    3748:	00005285 	.word	0x00005285
    374c:	00005709 	.word	0x00005709
    3750:	000052af 	.word	0x000052af
    3754:	20006c44 	.word	0x20006c44
    3758:	20007df4 	.word	0x20007df4
    375c:	00003511 	.word	0x00003511
    3760:	20000648 	.word	0x20000648
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    3764:	4b69      	ldr	r3, [pc, #420]	; (390c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c4>)
    3766:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    376a:	73ac      	strb	r4, [r5, #14]
    376c:	3701      	adds	r7, #1
	for (uint8_t j=0; j<16; j++){
    376e:	2f10      	cmp	r7, #16
    3770:	d0c9      	beq.n	3706 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1be>
    3772:	b2fa      	uxtb	r2, r7
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    3774:	0853      	lsrs	r3, r2, #1
    3776:	f819 4003 	ldrb.w	r4, [r9, r3]
    377a:	f002 0301 	and.w	r3, r2, #1
    377e:	009b      	lsls	r3, r3, #2
    3780:	411c      	asrs	r4, r3
    3782:	b2e4      	uxtb	r4, r4
    3784:	f004 060f 	and.w	r6, r4, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    3788:	eb09 0307 	add.w	r3, r9, r7
    378c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    3790:	b2db      	uxtb	r3, r3
		if (old_value != new_value){
    3792:	429e      	cmp	r6, r3
    3794:	d0ea      	beq.n	376c <grid_module_en16_reva_hardware_transfer_complete_cb+0x224>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    3796:	4b5e      	ldr	r3, [pc, #376]	; (3910 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c8>)
    3798:	5cfd      	ldrb	r5, [r7, r3]
			UI_SPI_DEBUG = j;
    379a:	4b5e      	ldr	r3, [pc, #376]	; (3914 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3cc>)
    379c:	701a      	strb	r2, [r3, #0]
			uint8_t button_value = new_value>>2;
    379e:	ea4f 0c96 	mov.w	ip, r6, lsr #2
			uint8_t phase_a = (new_value>>1)&1;
    37a2:	f3c6 0640 	ubfx	r6, r6, #1, #1
			uint8_t phase_b = (new_value)&1;
    37a6:	f004 0401 	and.w	r4, r4, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    37aa:	4b58      	ldr	r3, [pc, #352]	; (390c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c4>)
    37ac:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    37b0:	785b      	ldrb	r3, [r3, #1]
    37b2:	4563      	cmp	r3, ip
    37b4:	d040      	beq.n	3838 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f0>
				grid_ui_encoder_array[i].button_changed = 1;
    37b6:	4b55      	ldr	r3, [pc, #340]	; (390c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c4>)
    37b8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    37bc:	2201      	movs	r2, #1
    37be:	709a      	strb	r2, [r3, #2]
				grid_ui_encoder_array[i].button_value = new_value>>2;
    37c0:	f883 c001 	strb.w	ip, [r3, #1]
				uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;						
    37c4:	4b54      	ldr	r3, [pc, #336]	; (3918 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d0>)
    37c6:	685b      	ldr	r3, [r3, #4]
    37c8:	f04f 082c 	mov.w	r8, #44	; 0x2c
    37cc:	fb08 f805 	mul.w	r8, r8, r5
    37d0:	eb03 0e08 	add.w	lr, r3, r8
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    37d4:	4b51      	ldr	r3, [pc, #324]	; (391c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d4>)
    37d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    37d8:	f10d 0a20 	add.w	sl, sp, #32
    37dc:	e90a 000f 	stmdb	sl, {r0, r1, r2, r3}
				if (grid_ui_encoder_array[i].button_value == 0){ // Button Press Event
    37e0:	f1bc 0f00 	cmp.w	ip, #0
    37e4:	f47f af0d 	bne.w	3602 <grid_module_en16_reva_hardware_transfer_complete_cb+0xba>
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;
    37e8:	f8ce 5004 	str.w	r5, [lr, #4]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    37ec:	4653      	mov	r3, sl
    37ee:	442b      	add	r3, r5
    37f0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    37f4:	f8ce 3008 	str.w	r3, [lr, #8]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV7] = 127;
    37f8:	237f      	movs	r3, #127	; 0x7f
    37fa:	f8ce 301c 	str.w	r3, [lr, #28]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV8] = 255;
    37fe:	23ff      	movs	r3, #255	; 0xff
    3800:	f8ce 3020 	str.w	r3, [lr, #32]
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DP);
    3804:	f8df b110 	ldr.w	fp, [pc, #272]	; 3918 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d0>
    3808:	f8db 0004 	ldr.w	r0, [fp, #4]
    380c:	2105      	movs	r1, #5
    380e:	4440      	add	r0, r8
    3810:	4b43      	ldr	r3, [pc, #268]	; (3920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d8>)
    3812:	4798      	blx	r3
    3814:	4682      	mov	sl, r0
					grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    3816:	f8db 0004 	ldr.w	r0, [fp, #4]
    381a:	4651      	mov	r1, sl
    381c:	4440      	add	r0, r8
    381e:	4b41      	ldr	r3, [pc, #260]	; (3924 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3dc>)
    3820:	4798      	blx	r3
					grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    3822:	f8db 3004 	ldr.w	r3, [fp, #4]
    3826:	4498      	add	r8, r3
    3828:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    382c:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    3830:	eb00 00ca 	add.w	r0, r0, sl, lsl #3
    3834:	4b3c      	ldr	r3, [pc, #240]	; (3928 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    3836:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[i].phase_a_previous;
    3838:	4b34      	ldr	r3, [pc, #208]	; (390c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c4>)
    383a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
			if (a_now != a_prev){
    383e:	7b5b      	ldrb	r3, [r3, #13]
    3840:	42b3      	cmp	r3, r6
    3842:	d08f      	beq.n	3764 <grid_module_en16_reva_hardware_transfer_complete_cb+0x21c>
					delta = +1;
    3844:	42a6      	cmp	r6, r4
    3846:	bf14      	ite	ne
    3848:	f04f 38ff 	movne.w	r8, #4294967295
    384c:	f04f 0801 	moveq.w	r8, #1
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    3850:	4b2e      	ldr	r3, [pc, #184]	; (390c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c4>)
    3852:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3856:	735e      	strb	r6, [r3, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    3858:	739c      	strb	r4, [r3, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time);
    385a:	6899      	ldr	r1, [r3, #8]
    385c:	4833      	ldr	r0, [pc, #204]	; (392c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>)
    385e:	4b34      	ldr	r3, [pc, #208]	; (3930 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e8>)
    3860:	4798      	blx	r3
    3862:	9003      	str	r0, [sp, #12]
				if (elapsed_time>400){
    3864:	9b03      	ldr	r3, [sp, #12]
    3866:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    386a:	bf84      	itt	hi
    386c:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    3870:	9303      	strhi	r3, [sp, #12]
				if (elapsed_time<20){
    3872:	9b03      	ldr	r3, [sp, #12]
    3874:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    3876:	bf9c      	itt	ls
    3878:	2314      	movls	r3, #20
    387a:	9303      	strls	r3, [sp, #12]
				uint16_t velocityfactor = (160000-elapsed_time*elapsed_time)/60000.0 + 1;
    387c:	9b03      	ldr	r3, [sp, #12]
    387e:	9803      	ldr	r0, [sp, #12]
    3880:	fb00 f003 	mul.w	r0, r0, r3
    3884:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    3888:	f500 7080 	add.w	r0, r0, #256	; 0x100
    388c:	4b29      	ldr	r3, [pc, #164]	; (3934 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ec>)
    388e:	4798      	blx	r3
    3890:	ec53 2b19 	vmov	r2, r3, d9
    3894:	4c28      	ldr	r4, [pc, #160]	; (3938 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f0>)
    3896:	47a0      	blx	r4
    3898:	ec53 2b18 	vmov	r2, r3, d8
    389c:	4c27      	ldr	r4, [pc, #156]	; (393c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f4>)
    389e:	47a0      	blx	r4
    38a0:	4b27      	ldr	r3, [pc, #156]	; (3940 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f8>)
    38a2:	4798      	blx	r3
    38a4:	b284      	uxth	r4, r0
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    38a6:	4821      	ldr	r0, [pc, #132]	; (392c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>)
    38a8:	4b26      	ldr	r3, [pc, #152]	; (3944 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3fc>)
    38aa:	4798      	blx	r3
    38ac:	4b17      	ldr	r3, [pc, #92]	; (390c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c4>)
    38ae:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    38b2:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    38b4:	1c63      	adds	r3, r4, #1
    38b6:	fb13 f308 	smulbb	r3, r3, r8
    38ba:	b29b      	uxth	r3, r3
    38bc:	b21a      	sxth	r2, r3
				if (delta<0){
    38be:	f1b8 0f00 	cmp.w	r8, #0
    38c2:	f6ff aec6 	blt.w	3652 <grid_module_en16_reva_hardware_transfer_complete_cb+0x10a>
				else if (delta>0){
    38c6:	f1b8 0f00 	cmp.w	r8, #0
    38ca:	dd0c      	ble.n	38e6 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39e>
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
    38cc:	490f      	ldr	r1, [pc, #60]	; (390c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c4>)
    38ce:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    38d2:	78c9      	ldrb	r1, [r1, #3]
    38d4:	440a      	add	r2, r1
    38d6:	2a7f      	cmp	r2, #127	; 0x7f
    38d8:	f73f aecd 	bgt.w	3676 <grid_module_en16_reva_hardware_transfer_complete_cb+0x12e>
						grid_ui_encoder_array[i].rotation_value += xi;
    38dc:	4a0b      	ldr	r2, [pc, #44]	; (390c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c4>)
    38de:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    38e2:	440b      	add	r3, r1
    38e4:	70d3      	strb	r3, [r2, #3]
				value = helper[bank][i];
    38e6:	9b01      	ldr	r3, [sp, #4]
    38e8:	461a      	mov	r2, r3
    38ea:	eb09 1303 	add.w	r3, r9, r3, lsl #4
    38ee:	442b      	add	r3, r5
    38f0:	f893 3020 	ldrb.w	r3, [r3, #32]
				if (value + delta*velocityfactor < 0){
    38f4:	fb04 3108 	mla	r1, r4, r8, r3
    38f8:	2900      	cmp	r1, #0
    38fa:	f6ff aec2 	blt.w	3682 <grid_module_en16_reva_hardware_transfer_complete_cb+0x13a>
				else if (value + delta*velocityfactor > 127){
    38fe:	297f      	cmp	r1, #127	; 0x7f
    3900:	f73f aec1 	bgt.w	3686 <grid_module_en16_reva_hardware_transfer_complete_cb+0x13e>
					value += delta*velocityfactor;
    3904:	f001 04ff 	and.w	r4, r1, #255	; 0xff
    3908:	e6be      	b.n	3688 <grid_module_en16_reva_hardware_transfer_complete_cb+0x140>
    390a:	bf00      	nop
    390c:	20006c44 	.word	0x20006c44
    3910:	20000310 	.word	0x20000310
    3914:	200022c0 	.word	0x200022c0
    3918:	200032ec 	.word	0x200032ec
    391c:	0000ed18 	.word	0x0000ed18
    3920:	00005285 	.word	0x00005285
    3924:	00005709 	.word	0x00005709
    3928:	000052af 	.word	0x000052af
    392c:	200032f8 	.word	0x200032f8
    3930:	000049f5 	.word	0x000049f5
    3934:	0000ce89 	.word	0x0000ce89
    3938:	0000d1c9 	.word	0x0000d1c9
    393c:	0000cc11 	.word	0x0000cc11
    3940:	0000d399 	.word	0x0000d399
    3944:	000049f1 	.word	0x000049f1

00003948 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    3948:	b510      	push	{r4, lr}
    394a:	4b0e      	ldr	r3, [pc, #56]	; (3984 <grid_module_en16_reva_hardware_init+0x3c>)
    394c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3950:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3952:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3958:	629a      	str	r2, [r3, #40]	; 0x28
    395a:	4a0b      	ldr	r2, [pc, #44]	; (3988 <grid_module_en16_reva_hardware_init+0x40>)
    395c:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    395e:	4c0b      	ldr	r4, [pc, #44]	; (398c <grid_module_en16_reva_hardware_init+0x44>)
    3960:	2103      	movs	r1, #3
    3962:	4620      	mov	r0, r4
    3964:	4b0a      	ldr	r3, [pc, #40]	; (3990 <grid_module_en16_reva_hardware_init+0x48>)
    3966:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    3968:	490a      	ldr	r1, [pc, #40]	; (3994 <grid_module_en16_reva_hardware_init+0x4c>)
    396a:	4620      	mov	r0, r4
    396c:	4b0a      	ldr	r3, [pc, #40]	; (3998 <grid_module_en16_reva_hardware_init+0x50>)
    396e:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    3970:	490a      	ldr	r1, [pc, #40]	; (399c <grid_module_en16_reva_hardware_init+0x54>)
    3972:	4620      	mov	r0, r4
    3974:	4b0a      	ldr	r3, [pc, #40]	; (39a0 <grid_module_en16_reva_hardware_init+0x58>)
    3976:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    3978:	4a0a      	ldr	r2, [pc, #40]	; (39a4 <grid_module_en16_reva_hardware_init+0x5c>)
    397a:	2100      	movs	r1, #0
    397c:	4620      	mov	r0, r4
    397e:	4b0a      	ldr	r3, [pc, #40]	; (39a8 <grid_module_en16_reva_hardware_init+0x60>)
    3980:	4798      	blx	r3
    3982:	bd10      	pop	{r4, pc}
    3984:	41008000 	.word	0x41008000
    3988:	c0000020 	.word	0xc0000020
    398c:	20000f44 	.word	0x20000f44
    3990:	00006401 	.word	0x00006401
    3994:	00061a80 	.word	0x00061a80
    3998:	000063c5 	.word	0x000063c5
    399c:	200022c4 	.word	0x200022c4
    39a0:	000064e9 	.word	0x000064e9
    39a4:	00003549 	.word	0x00003549
    39a8:	000064a5 	.word	0x000064a5

000039ac <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(){
    39ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39b0:	b09f      	sub	sp, #124	; 0x7c
	
	
	grid_led_lowlevel_init(&grid_led_state, 16);
    39b2:	2110      	movs	r1, #16
    39b4:	4853      	ldr	r0, [pc, #332]	; (3b04 <grid_module_en16_reva_init+0x158>)
    39b6:	4b54      	ldr	r3, [pc, #336]	; (3b08 <grid_module_en16_reva_init+0x15c>)
    39b8:	4798      	blx	r3
	
	grid_ui_model_init(&grid_ui_state, 16);	
    39ba:	2110      	movs	r1, #16
    39bc:	4853      	ldr	r0, [pc, #332]	; (3b0c <grid_module_en16_reva_init+0x160>)
    39be:	4b54      	ldr	r3, [pc, #336]	; (3b10 <grid_module_en16_reva_init+0x164>)
    39c0:	4798      	blx	r3
    39c2:	2400      	movs	r4, #0
	
	
	for(uint8_t i=0; i<16; i++){
	
		grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_ENCODER);
    39c4:	4d51      	ldr	r5, [pc, #324]	; (3b0c <grid_module_en16_reva_init+0x160>)
    39c6:	f8df b164 	ldr.w	fp, [pc, #356]	; 3b2c <grid_module_en16_reva_init+0x180>
    39ca:	6868      	ldr	r0, [r5, #4]
    39cc:	2103      	movs	r1, #3
    39ce:	4420      	add	r0, r4
    39d0:	47d8      	blx	fp
		
		if (1){ // ROTATION -> MIDI Control Change
		
		
			uint8_t payload_template[GRID_UI_ACTION_STRING_LENGTH] = {0};
    39d2:	f04f 0978 	mov.w	r9, #120	; 0x78
    39d6:	464a      	mov	r2, r9
    39d8:	2100      	movs	r1, #0
    39da:	4668      	mov	r0, sp
    39dc:	f8df 8150 	ldr.w	r8, [pc, #336]	; 3b30 <grid_module_en16_reva_init+0x184>
    39e0:	47c0      	blx	r8
			sprintf(payload_template, GRID_EVENT_AVC7_ENC GRID_DEFAULT_ACTION_AVC7);
    39e2:	466e      	mov	r6, sp
    39e4:	4f4b      	ldr	r7, [pc, #300]	; (3b14 <grid_module_en16_reva_init+0x168>)
    39e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    39e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    39ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    39ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    39ee:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    39f2:	c603      	stmia	r6!, {r0, r1}
    39f4:	f826 2b02 	strh.w	r2, [r6], #2
    39f8:	0c12      	lsrs	r2, r2, #16
    39fa:	7032      	strb	r2, [r6, #0]
			uint8_t payload_length = strlen(payload_template);
    39fc:	4668      	mov	r0, sp
    39fe:	4f46      	ldr	r7, [pc, #280]	; (3b18 <grid_module_en16_reva_init+0x16c>)
    3a00:	47b8      	blx	r7

			// Register Absolute Value Change
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_AVC7, payload_template, payload_length);
    3a02:	686e      	ldr	r6, [r5, #4]
    3a04:	b2c3      	uxtb	r3, r0
    3a06:	466a      	mov	r2, sp
    3a08:	2102      	movs	r1, #2
    3a0a:	1930      	adds	r0, r6, r4
    3a0c:	4e43      	ldr	r6, [pc, #268]	; (3b1c <grid_module_en16_reva_init+0x170>)
    3a0e:	47b0      	blx	r6
		}
		
		if (1){ // BUTTONS -> MIDI Note On/Off
		
		
			uint8_t payload_template[GRID_UI_ACTION_STRING_LENGTH] = {0};
    3a10:	464a      	mov	r2, r9
    3a12:	2100      	movs	r1, #0
    3a14:	4668      	mov	r0, sp
    3a16:	47c0      	blx	r8
		
			sprintf(payload_template, GRID_EVENT_DP_ENC GRID_DEFAULT_ACTION_DP_ENC);
    3a18:	46ee      	mov	lr, sp
    3a1a:	f8df c118 	ldr.w	ip, [pc, #280]	; 3b34 <grid_module_en16_reva_init+0x188>
    3a1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3a22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3a26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3a2a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3a2e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    3a32:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    3a36:	f82e 2b02 	strh.w	r2, [lr], #2
    3a3a:	0c12      	lsrs	r2, r2, #16
    3a3c:	f88e 2000 	strb.w	r2, [lr]
			uint8_t payload_length = strlen(payload_template);
    3a40:	4668      	mov	r0, sp
    3a42:	47b8      	blx	r7
		
			// Register Digital Press Action
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DP, payload_template, payload_length);
    3a44:	f8d5 e004 	ldr.w	lr, [r5, #4]
    3a48:	fa5f fa80 	uxtb.w	sl, r0
    3a4c:	4653      	mov	r3, sl
    3a4e:	466a      	mov	r2, sp
    3a50:	2105      	movs	r1, #5
    3a52:	eb0e 0004 	add.w	r0, lr, r4
    3a56:	47b0      	blx	r6
		
			sprintf(payload_template, GRID_EVENT_DR_ENC GRID_DEFAULT_ACTION_DR_ENC);
    3a58:	46ee      	mov	lr, sp
    3a5a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 3b38 <grid_module_en16_reva_init+0x18c>
    3a5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3a62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3a66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3a6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3a6e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    3a72:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    3a76:	f82e 2b02 	strh.w	r2, [lr], #2
    3a7a:	0c12      	lsrs	r2, r2, #16
    3a7c:	f88e 2000 	strb.w	r2, [lr]
		
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DR, payload_template, payload_length);
    3a80:	6868      	ldr	r0, [r5, #4]
    3a82:	4653      	mov	r3, sl
    3a84:	466a      	mov	r2, sp
    3a86:	2106      	movs	r1, #6
    3a88:	4420      	add	r0, r4
    3a8a:	47b0      	blx	r6
		
		}	
		
		uint8_t init_action[GRID_UI_ACTION_STRING_LENGTH] = {0};
    3a8c:	464a      	mov	r2, r9
    3a8e:	2100      	movs	r1, #0
    3a90:	4668      	mov	r0, sp
    3a92:	47c0      	blx	r8
		sprintf(init_action, GRID_DEFAULT_ACTION_INIT);
    3a94:	46ee      	mov	lr, sp
    3a96:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 3b3c <grid_module_en16_reva_init+0x190>
    3a9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3a9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3aa2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3aa6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3aaa:	f8dc 3000 	ldr.w	r3, [ip]
    3aae:	f88e 3000 	strb.w	r3, [lr]
		uint8_t init_length = strlen(init_action);
    3ab2:	4668      	mov	r0, sp
    3ab4:	47b8      	blx	r7
				
		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_INIT, init_action, init_length);
    3ab6:	686f      	ldr	r7, [r5, #4]
    3ab8:	b2c3      	uxtb	r3, r0
    3aba:	466a      	mov	r2, sp
    3abc:	2100      	movs	r1, #0
    3abe:	1938      	adds	r0, r7, r4
    3ac0:	47b0      	blx	r6
    3ac2:	342c      	adds	r4, #44	; 0x2c
	for(uint8_t i=0; i<16; i++){
    3ac4:	f5b4 7f30 	cmp.w	r4, #704	; 0x2c0
    3ac8:	f47f af7f 	bne.w	39ca <grid_module_en16_reva_init+0x1e>
    3acc:	4b14      	ldr	r3, [pc, #80]	; (3b20 <grid_module_en16_reva_init+0x174>)
    3ace:	2000      	movs	r0, #0
	// initialize local encoder helper struct
	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
		
		grid_ui_encoder_array[i].button_value = 1;
    3ad0:	2101      	movs	r1, #1
		grid_ui_encoder_array[i].button_changed = 0; 
    3ad2:	4602      	mov	r2, r0
		grid_ui_encoder_array[i].rotation_value = 0;
		grid_ui_encoder_array[i].rotation_changed = 1;
		grid_ui_encoder_array[i].rotation_direction = 0;
		grid_ui_encoder_array[i].last_real_time = -1;
    3ad4:	f04f 34ff 	mov.w	r4, #4294967295
		grid_ui_encoder_array[i].controller_number = i;
    3ad8:	7018      	strb	r0, [r3, #0]
		grid_ui_encoder_array[i].button_value = 1;
    3ada:	7059      	strb	r1, [r3, #1]
		grid_ui_encoder_array[i].button_changed = 0; 
    3adc:	709a      	strb	r2, [r3, #2]
		grid_ui_encoder_array[i].rotation_value = 0;
    3ade:	70da      	strb	r2, [r3, #3]
		grid_ui_encoder_array[i].rotation_changed = 1;
    3ae0:	7119      	strb	r1, [r3, #4]
		grid_ui_encoder_array[i].rotation_direction = 0;
    3ae2:	715a      	strb	r2, [r3, #5]
		grid_ui_encoder_array[i].last_real_time = -1;
    3ae4:	609c      	str	r4, [r3, #8]
		grid_ui_encoder_array[i].velocity = 0;
    3ae6:	731a      	strb	r2, [r3, #12]
		grid_ui_encoder_array[i].phase_a_previous = 1;
    3ae8:	7359      	strb	r1, [r3, #13]
		grid_ui_encoder_array[i].phase_b_previous = 1;	
    3aea:	7399      	strb	r1, [r3, #14]
    3aec:	3001      	adds	r0, #1
    3aee:	3310      	adds	r3, #16
	for (uint8_t i = 0; i<16; i++)
    3af0:	2810      	cmp	r0, #16
    3af2:	d1f1      	bne.n	3ad8 <grid_module_en16_reva_init+0x12c>
		
	}
	
	
	grid_module_en16_reva_hardware_init();
    3af4:	4b0b      	ldr	r3, [pc, #44]	; (3b24 <grid_module_en16_reva_init+0x178>)
    3af6:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    3af8:	4b0b      	ldr	r3, [pc, #44]	; (3b28 <grid_module_en16_reva_init+0x17c>)
    3afa:	4798      	blx	r3
	
}
    3afc:	b01f      	add	sp, #124	; 0x7c
    3afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b02:	bf00      	nop
    3b04:	20007dd8 	.word	0x20007dd8
    3b08:	00002d41 	.word	0x00002d41
    3b0c:	200032ec 	.word	0x200032ec
    3b10:	00004fd1 	.word	0x00004fd1
    3b14:	0000ed28 	.word	0x0000ed28
    3b18:	0000d87d 	.word	0x0000d87d
    3b1c:	00005145 	.word	0x00005145
    3b20:	20006c44 	.word	0x20006c44
    3b24:	00003949 	.word	0x00003949
    3b28:	00003511 	.word	0x00003511
    3b2c:	00005065 	.word	0x00005065
    3b30:	0000d447 	.word	0x0000d447
    3b34:	0000ed54 	.word	0x0000ed54
    3b38:	0000ed80 	.word	0x0000ed80
    3b3c:	0000ecf4 	.word	0x0000ecf4

00003b40 <grid_module_pbf4_reva_hardware_start_transfer>:
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

static uint8_t helper[16] = {0};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    3b40:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    3b42:	4803      	ldr	r0, [pc, #12]	; (3b50 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    3b44:	4c03      	ldr	r4, [pc, #12]	; (3b54 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    3b46:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3b48:	4803      	ldr	r0, [pc, #12]	; (3b58 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    3b4a:	47a0      	blx	r4
    3b4c:	bd10      	pop	{r4, pc}
    3b4e:	bf00      	nop
    3b50:	20001050 	.word	0x20001050
    3b54:	00005c55 	.word	0x00005c55
    3b58:	20001224 	.word	0x20001224
    3b5c:	00000000 	.word	0x00000000

00003b60 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    3b60:	4ba9      	ldr	r3, [pc, #676]	; (3e08 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    3b62:	781b      	ldrb	r3, [r3, #0]
    3b64:	2b00      	cmp	r3, #0
    3b66:	f000 809d 	beq.w	3ca4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x144>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    3b6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b6e:	b089      	sub	sp, #36	; 0x24
	
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3b70:	2300      	movs	r3, #0
    3b72:	f8ad 301e 	strh.w	r3, [sp, #30]
	uint16_t adcresult_1 = 0;
    3b76:	f8ad 301c 	strh.w	r3, [sp, #28]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    3b7a:	4ba4      	ldr	r3, [pc, #656]	; (3e0c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    3b7c:	781a      	ldrb	r2, [r3, #0]
    3b7e:	3208      	adds	r2, #8
    3b80:	49a3      	ldr	r1, [pc, #652]	; (3e10 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    3b82:	5c8e      	ldrb	r6, [r1, r2]
    3b84:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    3b86:	781a      	ldrb	r2, [r3, #0]
    3b88:	b2d2      	uxtb	r2, r2
    3b8a:	5c8d      	ldrb	r5, [r1, r2]
    3b8c:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    3b8e:	781a      	ldrb	r2, [r3, #0]
    3b90:	3201      	adds	r2, #1
    3b92:	b2d2      	uxtb	r2, r2
    3b94:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    3b96:	781a      	ldrb	r2, [r3, #0]
    3b98:	f002 0207 	and.w	r2, r2, #7
    3b9c:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    3b9e:	781b      	ldrb	r3, [r3, #0]
    3ba0:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3ba4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3ba8:	4b9a      	ldr	r3, [pc, #616]	; (3e14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    3baa:	bf14      	ite	ne
    3bac:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3bb0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    3bb4:	4b95      	ldr	r3, [pc, #596]	; (3e0c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    3bb6:	781b      	ldrb	r3, [r3, #0]
    3bb8:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3bbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3bc0:	4b94      	ldr	r3, [pc, #592]	; (3e14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    3bc2:	bf14      	ite	ne
    3bc4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3bc8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    3bcc:	4b8f      	ldr	r3, [pc, #572]	; (3e0c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    3bce:	781b      	ldrb	r3, [r3, #0]
    3bd0:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3bd4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3bd8:	4b8e      	ldr	r3, [pc, #568]	; (3e14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    3bda:	bf14      	ite	ne
    3bdc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3be0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    3be4:	2302      	movs	r3, #2
    3be6:	f10d 021e 	add.w	r2, sp, #30
    3bea:	2100      	movs	r1, #0
    3bec:	488a      	ldr	r0, [pc, #552]	; (3e18 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    3bee:	4c8b      	ldr	r4, [pc, #556]	; (3e1c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    3bf0:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    3bf2:	2302      	movs	r3, #2
    3bf4:	aa07      	add	r2, sp, #28
    3bf6:	2100      	movs	r1, #0
    3bf8:	4889      	ldr	r0, [pc, #548]	; (3e20 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    3bfa:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    3bfc:	f8df b240 	ldr.w	fp, [pc, #576]	; 3e40 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>
    3c00:	f8bd 001e 	ldrh.w	r0, [sp, #30]
    3c04:	47d8      	blx	fp
    3c06:	f8df a23c 	ldr.w	sl, [pc, #572]	; 3e44 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>
    3c0a:	a37d      	add	r3, pc, #500	; (adr r3, 3e00 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    3c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c10:	47d0      	blx	sl
    3c12:	f8df 9234 	ldr.w	r9, [pc, #564]	; 3e48 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>
    3c16:	47c8      	blx	r9
    3c18:	f64f 74ff 	movw	r4, #65535	; 0xffff
    3c1c:	42a0      	cmp	r0, r4
    3c1e:	bf28      	it	cs
    3c20:	4620      	movcs	r0, r4
    3c22:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    3c24:	fa1f f880 	uxth.w	r8, r0
    3c28:	f8ad 801e 	strh.w	r8, [sp, #30]
	
	uint32_t input_1 = adcresult_1*1.03;
    3c2c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    3c30:	47d8      	blx	fp
    3c32:	a373      	add	r3, pc, #460	; (adr r3, 3e00 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    3c34:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c38:	47d0      	blx	sl
    3c3a:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    3c3c:	42a0      	cmp	r0, r4
    3c3e:	bf28      	it	cs
    3c40:	4620      	movcs	r0, r4
    3c42:	b280      	uxth	r0, r0
    3c44:	f8ad 001c 	strh.w	r0, [sp, #28]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    3c48:	f1a5 0308 	sub.w	r3, r5, #8
    3c4c:	b2db      	uxtb	r3, r3
    3c4e:	2b01      	cmp	r3, #1
    3c50:	f240 80bc 	bls.w	3dcc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x26c>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    3c54:	2e0d      	cmp	r6, #13
    3c56:	f240 8095 	bls.w	3d84 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x224>

		uint8_t result_index[2] = {0};
    3c5a:	2300      	movs	r3, #0
		uint8_t result_value[2] = {0};
    3c5c:	f8ad 3004 	strh.w	r3, [sp, #4]
		uint8_t result_valid[2] = {0};
    3c60:	f8ad 3008 	strh.w	r3, [sp, #8]
		
		result_index[0] = adc_index_0-4;
    3c64:	3e04      	subs	r6, #4
    3c66:	f88d 6000 	strb.w	r6, [sp]
		result_index[1] = adc_index_1-4;
    3c6a:	3d04      	subs	r5, #4
    3c6c:	f88d 5001 	strb.w	r5, [sp, #1]
		
		uint8_t adcresult_0_valid = 0;
	
		if (adcresult_0>60000){
    3c70:	f64e 2360 	movw	r3, #60000	; 0xea60
    3c74:	4598      	cmp	r8, r3
    3c76:	d91b      	bls.n	3cb0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x150>
			result_value[0] = 0;
			result_valid[0] = 1;
    3c78:	2301      	movs	r3, #1
    3c7a:	f88d 3008 	strb.w	r3, [sp, #8]
			result_valid[0] = 1;
		}
	
		uint8_t adcresult_1_valid = 0;
	
		if (adcresult_1>60000){
    3c7e:	f64e 2360 	movw	r3, #60000	; 0xea60
    3c82:	4298      	cmp	r0, r3
    3c84:	d91e      	bls.n	3cc4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x164>
			result_value[1] = 0;
			result_valid[1] = 1;
    3c86:	2301      	movs	r3, #1
    3c88:	f88d 3009 	strb.w	r3, [sp, #9]
			result_value[1] = 127;
			result_valid[1] = 1;
		}


		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    3c8c:	4b65      	ldr	r3, [pc, #404]	; (3e24 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    3c8e:	ac03      	add	r4, sp, #12
    3c90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3c92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3c96:	2400      	movs	r4, #0
			// Helper variable for readability
			uint8_t res_index = result_index[i];
			uint8_t res_valid = result_valid[i];
			uint8_t res_value = result_value[i];
		
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3c98:	4f63      	ldr	r7, [pc, #396]	; (3e28 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
		
			if (res_value != helper[res_index] && res_valid == 1){
    3c9a:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 3e4c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>

					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV7] = 0;
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV8] = 0;

				
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DR);
    3c9e:	f8df 919c 	ldr.w	r9, [pc, #412]	; 3e3c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>
    3ca2:	e03a      	b.n	3d1a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1ba>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    3ca4:	4a58      	ldr	r2, [pc, #352]	; (3e08 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    3ca6:	7813      	ldrb	r3, [r2, #0]
    3ca8:	3301      	adds	r3, #1
    3caa:	b2db      	uxtb	r3, r3
    3cac:	7013      	strb	r3, [r2, #0]
    3cae:	4770      	bx	lr
		else if (adcresult_0<200){
    3cb0:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
    3cb4:	d8e3      	bhi.n	3c7e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x11e>
			result_value[0] = 127;
    3cb6:	237f      	movs	r3, #127	; 0x7f
    3cb8:	f88d 3004 	strb.w	r3, [sp, #4]
			result_valid[0] = 1;
    3cbc:	2301      	movs	r3, #1
    3cbe:	f88d 3008 	strb.w	r3, [sp, #8]
    3cc2:	e7dc      	b.n	3c7e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x11e>
		else if (adcresult_1<200){
    3cc4:	28c7      	cmp	r0, #199	; 0xc7
    3cc6:	d8e1      	bhi.n	3c8c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x12c>
			result_value[1] = 127;
    3cc8:	237f      	movs	r3, #127	; 0x7f
    3cca:	f88d 3005 	strb.w	r3, [sp, #5]
			result_valid[1] = 1;
    3cce:	2301      	movs	r3, #1
    3cd0:	f88d 3009 	strb.w	r3, [sp, #9]
    3cd4:	e7da      	b.n	3c8c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x12c>
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;
    3cd6:	604d      	str	r5, [r1, #4]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    3cd8:	ab08      	add	r3, sp, #32
    3cda:	442b      	add	r3, r5
    3cdc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    3ce0:	608b      	str	r3, [r1, #8]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV7] = 0;
    3ce2:	2300      	movs	r3, #0
    3ce4:	61cb      	str	r3, [r1, #28]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV8] = 0;
    3ce6:	620b      	str	r3, [r1, #32]
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DR);
    3ce8:	6878      	ldr	r0, [r7, #4]
    3cea:	2106      	movs	r1, #6
    3cec:	4450      	add	r0, sl
    3cee:	47c8      	blx	r9
    3cf0:	4683      	mov	fp, r0
				
					grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    3cf2:	6878      	ldr	r0, [r7, #4]
    3cf4:	4659      	mov	r1, fp
    3cf6:	4450      	add	r0, sl
    3cf8:	4b4c      	ldr	r3, [pc, #304]	; (3e2c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    3cfa:	4798      	blx	r3
				
					grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    3cfc:	687b      	ldr	r3, [r7, #4]
    3cfe:	449a      	add	sl, r3
    3d00:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    3d04:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    3d08:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
    3d0c:	4b48      	ldr	r3, [pc, #288]	; (3e30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    3d0e:	4798      	blx	r3

					helper[result_index[i]] = res_value;
    3d10:	f808 6005 	strb.w	r6, [r8, r5]
    3d14:	3401      	adds	r4, #1
		for (uint8_t i=0; i<2; i++)
    3d16:	2c02      	cmp	r4, #2
    3d18:	d058      	beq.n	3dcc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x26c>
			uint8_t res_index = result_index[i];
    3d1a:	f81d 5004 	ldrb.w	r5, [sp, r4]
			uint8_t res_value = result_value[i];
    3d1e:	ab01      	add	r3, sp, #4
    3d20:	5ce6      	ldrb	r6, [r4, r3]
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3d22:	6879      	ldr	r1, [r7, #4]
			if (res_value != helper[res_index] && res_valid == 1){
    3d24:	f818 3005 	ldrb.w	r3, [r8, r5]
    3d28:	429e      	cmp	r6, r3
    3d2a:	d0f3      	beq.n	3d14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b4>
			uint8_t res_valid = result_valid[i];
    3d2c:	aa02      	add	r2, sp, #8
			if (res_value != helper[res_index] && res_valid == 1){
    3d2e:	5ca2      	ldrb	r2, [r4, r2]
    3d30:	2a01      	cmp	r2, #1
    3d32:	d1ef      	bne.n	3d14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b4>
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3d34:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3d38:	fb0a fa05 	mul.w	sl, sl, r5
    3d3c:	4451      	add	r1, sl
				if (helper[res_index] == 0){ // Button Press Event
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d1c9      	bne.n	3cd6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x176>
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;
    3d42:	604d      	str	r5, [r1, #4]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    3d44:	ab08      	add	r3, sp, #32
    3d46:	442b      	add	r3, r5
    3d48:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    3d4c:	608b      	str	r3, [r1, #8]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV7] = 127;
    3d4e:	237f      	movs	r3, #127	; 0x7f
    3d50:	61cb      	str	r3, [r1, #28]
					template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_DV8] = 255;
    3d52:	23ff      	movs	r3, #255	; 0xff
    3d54:	620b      	str	r3, [r1, #32]
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DP);
    3d56:	6878      	ldr	r0, [r7, #4]
    3d58:	2105      	movs	r1, #5
    3d5a:	4450      	add	r0, sl
    3d5c:	47c8      	blx	r9
    3d5e:	4683      	mov	fp, r0
					grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    3d60:	6878      	ldr	r0, [r7, #4]
    3d62:	4659      	mov	r1, fp
    3d64:	4450      	add	r0, sl
    3d66:	4b31      	ldr	r3, [pc, #196]	; (3e2c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    3d68:	4798      	blx	r3
					grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    3d6a:	687b      	ldr	r3, [r7, #4]
    3d6c:	449a      	add	sl, r3
    3d6e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    3d72:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    3d76:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
    3d7a:	4b2d      	ldr	r3, [pc, #180]	; (3e30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    3d7c:	4798      	blx	r3
					helper[result_index[i]] = res_value;
    3d7e:	f808 6005 	strb.w	r6, [r8, r5]
    3d82:	e7c7      	b.n	3d14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b4>
		

	}
	else{ // POTENTIOMETER OR FADER
		
		if (adc_index_1 == 0 || adc_index_1 == 1){
    3d84:	2d01      	cmp	r5, #1
    3d86:	d929      	bls.n	3ddc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x27c>
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
			
		}
		else{
			// normal fader polarity			
			grid_ain_add_sample(adc_index_0, adcresult_0);
    3d88:	b2b9      	uxth	r1, r7
    3d8a:	4630      	mov	r0, r6
    3d8c:	4c29      	ldr	r4, [pc, #164]	; (3e34 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    3d8e:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    3d90:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    3d94:	4628      	mov	r0, r5
    3d96:	47a0      	blx	r4
		}
			

		uint8_t result_index[2] = {0};
	
		result_index[0] = adc_index_0;
    3d98:	f88d 6008 	strb.w	r6, [sp, #8]
		result_index[1] = adc_index_1;
    3d9c:	f88d 5009 	strb.w	r5, [sp, #9]


		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    3da0:	4b20      	ldr	r3, [pc, #128]	; (3e24 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    3da2:	ac03      	add	r4, sp, #12
    3da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3da6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3daa:	ad02      	add	r5, sp, #8
    3dac:	f10d 090a 	add.w	r9, sp, #10
		{
		
			// Helper variable for readability
			uint8_t res_index = result_index[i];

			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3db0:	4f1d      	ldr	r7, [pc, #116]	; (3e28 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
		
			if (grid_ain_get_changed(res_index)){
    3db2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 3e50 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>
			
				uint8_t res_value = grid_ain_get_average(res_index, 7);
    3db6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 3e54 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>
			uint8_t res_index = result_index[i];
    3dba:	f815 4b01 	ldrb.w	r4, [r5], #1
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3dbe:	687e      	ldr	r6, [r7, #4]
			if (grid_ain_get_changed(res_index)){
    3dc0:	4620      	mov	r0, r4
    3dc2:	47c0      	blx	r8
    3dc4:	2800      	cmp	r0, #0
    3dc6:	d147      	bne.n	3e58 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>
		for (uint8_t i=0; i<2; i++)
    3dc8:	454d      	cmp	r5, r9
    3dca:	d1f6      	bne.n	3dba <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x25a>
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    3dcc:	2200      	movs	r2, #0
    3dce:	4b0e      	ldr	r3, [pc, #56]	; (3e08 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    3dd0:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    3dd2:	4b19      	ldr	r3, [pc, #100]	; (3e38 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    3dd4:	4798      	blx	r3
}
    3dd6:	b009      	add	sp, #36	; 0x24
    3dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    3ddc:	b2b9      	uxth	r1, r7
    3dde:	f64f 78ff 	movw	r8, #65535	; 0xffff
    3de2:	eba8 0101 	sub.w	r1, r8, r1
    3de6:	4630      	mov	r0, r6
    3de8:	4c12      	ldr	r4, [pc, #72]	; (3e34 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    3dea:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    3dec:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    3df0:	eba8 0101 	sub.w	r1, r8, r1
    3df4:	4628      	mov	r0, r5
    3df6:	47a0      	blx	r4
    3df8:	e7ce      	b.n	3d98 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x238>
    3dfa:	bf00      	nop
    3dfc:	f3af 8000 	nop.w
    3e00:	47ae147b 	.word	0x47ae147b
    3e04:	3ff07ae1 	.word	0x3ff07ae1
    3e08:	200022cc 	.word	0x200022cc
    3e0c:	20007d6c 	.word	0x20007d6c
    3e10:	20000324 	.word	0x20000324
    3e14:	41008000 	.word	0x41008000
    3e18:	20001050 	.word	0x20001050
    3e1c:	00005b75 	.word	0x00005b75
    3e20:	20001224 	.word	0x20001224
    3e24:	0000edac 	.word	0x0000edac
    3e28:	200032ec 	.word	0x200032ec
    3e2c:	00005709 	.word	0x00005709
    3e30:	000052af 	.word	0x000052af
    3e34:	000012a9 	.word	0x000012a9
    3e38:	00003b41 	.word	0x00003b41
    3e3c:	00005285 	.word	0x00005285
    3e40:	0000cea9 	.word	0x0000cea9
    3e44:	0000cf75 	.word	0x0000cf75
    3e48:	0000d399 	.word	0x0000d399
    3e4c:	200006bc 	.word	0x200006bc
    3e50:	000013a5 	.word	0x000013a5
    3e54:	000013b5 	.word	0x000013b5
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3e58:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    3e5c:	fb0b fb04 	mul.w	fp, fp, r4
    3e60:	445e      	add	r6, fp
				uint8_t res_value = grid_ain_get_average(res_index, 7);
    3e62:	2107      	movs	r1, #7
    3e64:	4620      	mov	r0, r4
    3e66:	47d0      	blx	sl
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;
    3e68:	6074      	str	r4, [r6, #4]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    3e6a:	ab08      	add	r3, sp, #32
    3e6c:	4423      	add	r3, r4
    3e6e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    3e72:	60b3      	str	r3, [r6, #8]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV7] = grid_ain_get_average(res_index, 7);
    3e74:	2107      	movs	r1, #7
    3e76:	4620      	mov	r0, r4
    3e78:	47d0      	blx	sl
    3e7a:	60f0      	str	r0, [r6, #12]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV8] = grid_ain_get_average(res_index, 8);
    3e7c:	2108      	movs	r1, #8
    3e7e:	4620      	mov	r0, r4
    3e80:	47d0      	blx	sl
    3e82:	6130      	str	r0, [r6, #16]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV14U] = 0;
    3e84:	2300      	movs	r3, #0
    3e86:	6173      	str	r3, [r6, #20]
				template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV14L] = 0;
    3e88:	61b3      	str	r3, [r6, #24]
				uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_AVC7);
    3e8a:	6878      	ldr	r0, [r7, #4]
    3e8c:	2102      	movs	r1, #2
    3e8e:	4458      	add	r0, fp
    3e90:	4b09      	ldr	r3, [pc, #36]	; (3eb8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x358>)
    3e92:	4798      	blx	r3
    3e94:	4604      	mov	r4, r0
				grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    3e96:	6878      	ldr	r0, [r7, #4]
    3e98:	4621      	mov	r1, r4
    3e9a:	4458      	add	r0, fp
    3e9c:	4b07      	ldr	r3, [pc, #28]	; (3ebc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x35c>)
    3e9e:	4798      	blx	r3
				grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	449b      	add	fp, r3
    3ea4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3ea8:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    3eac:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
    3eb0:	4b03      	ldr	r3, [pc, #12]	; (3ec0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x360>)
    3eb2:	4798      	blx	r3
    3eb4:	e788      	b.n	3dc8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x268>
    3eb6:	bf00      	nop
    3eb8:	00005285 	.word	0x00005285
    3ebc:	00005709 	.word	0x00005709
    3ec0:	000052af 	.word	0x000052af

00003ec4 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    3ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    3ec6:	4f0b      	ldr	r7, [pc, #44]	; (3ef4 <grid_module_pbf4_reva_hardware_init+0x30>)
    3ec8:	4c0b      	ldr	r4, [pc, #44]	; (3ef8 <grid_module_pbf4_reva_hardware_init+0x34>)
    3eca:	463b      	mov	r3, r7
    3ecc:	2200      	movs	r2, #0
    3ece:	4611      	mov	r1, r2
    3ed0:	4620      	mov	r0, r4
    3ed2:	4e0a      	ldr	r6, [pc, #40]	; (3efc <grid_module_pbf4_reva_hardware_init+0x38>)
    3ed4:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    3ed6:	4d0a      	ldr	r5, [pc, #40]	; (3f00 <grid_module_pbf4_reva_hardware_init+0x3c>)
    3ed8:	463b      	mov	r3, r7
    3eda:	2200      	movs	r2, #0
    3edc:	4611      	mov	r1, r2
    3ede:	4628      	mov	r0, r5
    3ee0:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    3ee2:	2100      	movs	r1, #0
    3ee4:	4620      	mov	r0, r4
    3ee6:	4c07      	ldr	r4, [pc, #28]	; (3f04 <grid_module_pbf4_reva_hardware_init+0x40>)
    3ee8:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    3eea:	2100      	movs	r1, #0
    3eec:	4628      	mov	r0, r5
    3eee:	47a0      	blx	r4
    3ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ef2:	bf00      	nop
    3ef4:	00003b61 	.word	0x00003b61
    3ef8:	20001050 	.word	0x20001050
    3efc:	00005af5 	.word	0x00005af5
    3f00:	20001224 	.word	0x20001224
    3f04:	00005ab5 	.word	0x00005ab5

00003f08 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(){
    3f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f0c:	b09f      	sub	sp, #124	; 0x7c
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    3f0e:	2307      	movs	r3, #7
    3f10:	220e      	movs	r2, #14
    3f12:	2105      	movs	r1, #5
    3f14:	2010      	movs	r0, #16
    3f16:	4c54      	ldr	r4, [pc, #336]	; (4068 <grid_module_pbf4_reva_init+0x160>)
    3f18:	47a0      	blx	r4
	grid_led_lowlevel_init(&grid_led_state, 12);	
    3f1a:	210c      	movs	r1, #12
    3f1c:	4853      	ldr	r0, [pc, #332]	; (406c <grid_module_pbf4_reva_init+0x164>)
    3f1e:	4b54      	ldr	r3, [pc, #336]	; (4070 <grid_module_pbf4_reva_init+0x168>)
    3f20:	4798      	blx	r3
	
	grid_ui_model_init(&grid_ui_state, 12);
    3f22:	210c      	movs	r1, #12
    3f24:	4853      	ldr	r0, [pc, #332]	; (4074 <grid_module_pbf4_reva_init+0x16c>)
    3f26:	4b54      	ldr	r3, [pc, #336]	; (4078 <grid_module_pbf4_reva_init+0x170>)
    3f28:	4798      	blx	r3
    3f2a:	2400      	movs	r4, #0
    3f2c:	4625      	mov	r5, r4
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_AVC7, payload_template, payload_length);		
			
		}
		else{ // BUTTONS -> MIDI Note On/Off
			
			grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_BUTTON);
    3f2e:	4e51      	ldr	r6, [pc, #324]	; (4074 <grid_module_pbf4_reva_init+0x16c>)
    3f30:	f8df a154 	ldr.w	sl, [pc, #340]	; 4088 <grid_module_pbf4_reva_init+0x180>
						
		
			uint8_t payload_template[100] = {0};
    3f34:	f8df 9154 	ldr.w	r9, [pc, #340]	; 408c <grid_module_pbf4_reva_init+0x184>
			
			sprintf(payload_template, GRID_EVENT_DP_BUT GRID_DEFAULT_ACTION_DP);
			uint8_t payload_length = strlen(payload_template);
    3f38:	f8df 8154 	ldr.w	r8, [pc, #340]	; 4090 <grid_module_pbf4_reva_init+0x188>
			
			// Register Digital Press Action
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DP, payload_template, payload_length);
    3f3c:	4f4f      	ldr	r7, [pc, #316]	; (407c <grid_module_pbf4_reva_init+0x174>)
    3f3e:	e062      	b.n	4006 <grid_module_pbf4_reva_init+0xfe>
			grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_BUTTON);
    3f40:	6870      	ldr	r0, [r6, #4]
    3f42:	2102      	movs	r1, #2
    3f44:	4420      	add	r0, r4
    3f46:	47d0      	blx	sl
			uint8_t payload_template[100] = {0};
    3f48:	2264      	movs	r2, #100	; 0x64
    3f4a:	2100      	movs	r1, #0
    3f4c:	4668      	mov	r0, sp
    3f4e:	47c8      	blx	r9
			sprintf(payload_template, GRID_EVENT_DP_BUT GRID_DEFAULT_ACTION_DP);
    3f50:	46ee      	mov	lr, sp
    3f52:	f8df c140 	ldr.w	ip, [pc, #320]	; 4094 <grid_module_pbf4_reva_init+0x18c>
    3f56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3f5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3f5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3f62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3f66:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    3f6a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    3f6e:	f82e 2b02 	strh.w	r2, [lr], #2
    3f72:	0c12      	lsrs	r2, r2, #16
    3f74:	f88e 2000 	strb.w	r2, [lr]
			uint8_t payload_length = strlen(payload_template);
    3f78:	4668      	mov	r0, sp
    3f7a:	47c0      	blx	r8
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DP, payload_template, payload_length);
    3f7c:	f8d6 e004 	ldr.w	lr, [r6, #4]
    3f80:	fa5f fb80 	uxtb.w	fp, r0
    3f84:	465b      	mov	r3, fp
    3f86:	466a      	mov	r2, sp
    3f88:	2105      	movs	r1, #5
    3f8a:	eb0e 0004 	add.w	r0, lr, r4
    3f8e:	47b8      	blx	r7
			
			sprintf(payload_template, GRID_EVENT_DR_BUT GRID_DEFAULT_ACTION_DR);
    3f90:	46ee      	mov	lr, sp
    3f92:	f8df c104 	ldr.w	ip, [pc, #260]	; 4098 <grid_module_pbf4_reva_init+0x190>
    3f96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3f9a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3f9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3fa2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3fa6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    3faa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    3fae:	f82e 2b02 	strh.w	r2, [lr], #2
    3fb2:	0c12      	lsrs	r2, r2, #16
    3fb4:	f88e 2000 	strb.w	r2, [lr]
			
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DR, payload_template, payload_length);		
    3fb8:	6870      	ldr	r0, [r6, #4]
    3fba:	465b      	mov	r3, fp
    3fbc:	466a      	mov	r2, sp
    3fbe:	2106      	movs	r1, #6
    3fc0:	4420      	add	r0, r4
    3fc2:	47b8      	blx	r7
									
		}
		
		uint8_t init_action[GRID_UI_ACTION_STRING_LENGTH] = {0};
    3fc4:	2278      	movs	r2, #120	; 0x78
    3fc6:	2100      	movs	r1, #0
    3fc8:	4668      	mov	r0, sp
    3fca:	47c8      	blx	r9
		sprintf(init_action, GRID_DEFAULT_ACTION_INIT);
    3fcc:	46ee      	mov	lr, sp
    3fce:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 409c <grid_module_pbf4_reva_init+0x194>
    3fd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3fd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3fda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3fde:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3fe2:	f8dc 3000 	ldr.w	r3, [ip]
    3fe6:	f88e 3000 	strb.w	r3, [lr]
		uint8_t init_length = strlen(init_action);
    3fea:	4668      	mov	r0, sp
    3fec:	47c0      	blx	r8
				
		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_INIT, init_action, init_length);
    3fee:	f8d6 e004 	ldr.w	lr, [r6, #4]
    3ff2:	b2c3      	uxtb	r3, r0
    3ff4:	466a      	mov	r2, sp
    3ff6:	2100      	movs	r1, #0
    3ff8:	eb0e 0004 	add.w	r0, lr, r4
    3ffc:	47b8      	blx	r7
    3ffe:	3501      	adds	r5, #1
    4000:	342c      	adds	r4, #44	; 0x2c
	for(uint8_t i=0; i<12; i++){
    4002:	2d0c      	cmp	r5, #12
    4004:	d029      	beq.n	405a <grid_module_pbf4_reva_init+0x152>
		if (i<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
    4006:	b2eb      	uxtb	r3, r5
    4008:	2b07      	cmp	r3, #7
    400a:	d899      	bhi.n	3f40 <grid_module_pbf4_reva_init+0x38>
			grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_POTENTIOMETER);
    400c:	6870      	ldr	r0, [r6, #4]
    400e:	2101      	movs	r1, #1
    4010:	4420      	add	r0, r4
    4012:	47d0      	blx	sl
			uint8_t payload_template[100] = {0};
    4014:	2264      	movs	r2, #100	; 0x64
    4016:	2100      	movs	r1, #0
    4018:	4668      	mov	r0, sp
    401a:	47c8      	blx	r9
			sprintf(payload_template, GRID_EVENT_AVC7_POT GRID_DEFAULT_ACTION_AVC7);
    401c:	46ee      	mov	lr, sp
    401e:	f8df c080 	ldr.w	ip, [pc, #128]	; 40a0 <grid_module_pbf4_reva_init+0x198>
    4022:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    4026:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    402a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    402e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    4032:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    4036:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    403a:	f82e 2b02 	strh.w	r2, [lr], #2
    403e:	0c12      	lsrs	r2, r2, #16
    4040:	f88e 2000 	strb.w	r2, [lr]
			uint8_t payload_length = strlen(payload_template);
    4044:	4668      	mov	r0, sp
    4046:	47c0      	blx	r8
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_AVC7, payload_template, payload_length);		
    4048:	f8d6 e004 	ldr.w	lr, [r6, #4]
    404c:	b2c3      	uxtb	r3, r0
    404e:	466a      	mov	r2, sp
    4050:	2102      	movs	r1, #2
    4052:	eb0e 0004 	add.w	r0, lr, r4
    4056:	47b8      	blx	r7
    4058:	e7b4      	b.n	3fc4 <grid_module_pbf4_reva_init+0xbc>
		
	}
			
	grid_module_pbf4_reva_hardware_init();
    405a:	4b09      	ldr	r3, [pc, #36]	; (4080 <grid_module_pbf4_reva_init+0x178>)
    405c:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    405e:	4b09      	ldr	r3, [pc, #36]	; (4084 <grid_module_pbf4_reva_init+0x17c>)
    4060:	4798      	blx	r3
	
    4062:	b01f      	add	sp, #124	; 0x7c
    4064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4068:	0000125d 	.word	0x0000125d
    406c:	20007dd8 	.word	0x20007dd8
    4070:	00002d41 	.word	0x00002d41
    4074:	200032ec 	.word	0x200032ec
    4078:	00004fd1 	.word	0x00004fd1
    407c:	00005145 	.word	0x00005145
    4080:	00003ec5 	.word	0x00003ec5
    4084:	00003b41 	.word	0x00003b41
    4088:	00005065 	.word	0x00005065
    408c:	0000d447 	.word	0x0000d447
    4090:	0000d87d 	.word	0x0000d87d
    4094:	0000ec9c 	.word	0x0000ec9c
    4098:	0000ecc8 	.word	0x0000ecc8
    409c:	0000ecf4 	.word	0x0000ecf4
    40a0:	0000edbc 	.word	0x0000edbc

000040a4 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    40a4:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    40a6:	4803      	ldr	r0, [pc, #12]	; (40b4 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    40a8:	4c03      	ldr	r4, [pc, #12]	; (40b8 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    40aa:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    40ac:	4803      	ldr	r0, [pc, #12]	; (40bc <grid_module_po16_revb_hardware_start_transfer+0x18>)
    40ae:	47a0      	blx	r4
    40b0:	bd10      	pop	{r4, pc}
    40b2:	bf00      	nop
    40b4:	20001050 	.word	0x20001050
    40b8:	00005c55 	.word	0x00005c55
    40bc:	20001224 	.word	0x20001224

000040c0 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    40c0:	4b6f      	ldr	r3, [pc, #444]	; (4280 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c0>)
    40c2:	781b      	ldrb	r3, [r3, #0]
    40c4:	2b00      	cmp	r3, #0
    40c6:	f000 8097 	beq.w	41f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x138>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    40ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40ce:	b087      	sub	sp, #28
	}
	
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    40d0:	2300      	movs	r3, #0
    40d2:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint16_t adcresult_1 = 0;
    40d6:	f8ad 3014 	strh.w	r3, [sp, #20]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    40da:	4b69      	ldr	r3, [pc, #420]	; (4280 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c0>)
    40dc:	785a      	ldrb	r2, [r3, #1]
    40de:	3208      	adds	r2, #8
    40e0:	4968      	ldr	r1, [pc, #416]	; (4284 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c4>)
    40e2:	5c8d      	ldrb	r5, [r1, r2]
    40e4:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    40e6:	785a      	ldrb	r2, [r3, #1]
    40e8:	b2d2      	uxtb	r2, r2
    40ea:	5c8c      	ldrb	r4, [r1, r2]
    40ec:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    40ee:	785a      	ldrb	r2, [r3, #1]
    40f0:	3201      	adds	r2, #1
    40f2:	b2d2      	uxtb	r2, r2
    40f4:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    40f6:	785a      	ldrb	r2, [r3, #1]
    40f8:	f002 0207 	and.w	r2, r2, #7
    40fc:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    40fe:	785b      	ldrb	r3, [r3, #1]
    4100:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4104:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4108:	4b5f      	ldr	r3, [pc, #380]	; (4288 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c8>)
    410a:	bf14      	ite	ne
    410c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4110:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    4114:	4b5a      	ldr	r3, [pc, #360]	; (4280 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c0>)
    4116:	785b      	ldrb	r3, [r3, #1]
    4118:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    411c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    4120:	4b59      	ldr	r3, [pc, #356]	; (4288 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c8>)
    4122:	bf14      	ite	ne
    4124:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4128:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    412c:	4b54      	ldr	r3, [pc, #336]	; (4280 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c0>)
    412e:	785b      	ldrb	r3, [r3, #1]
    4130:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4134:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4138:	4b53      	ldr	r3, [pc, #332]	; (4288 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c8>)
    413a:	bf14      	ite	ne
    413c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4140:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    4144:	2302      	movs	r3, #2
    4146:	f10d 0216 	add.w	r2, sp, #22
    414a:	2100      	movs	r1, #0
    414c:	484f      	ldr	r0, [pc, #316]	; (428c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1cc>)
    414e:	4e50      	ldr	r6, [pc, #320]	; (4290 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    4150:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    4152:	2302      	movs	r3, #2
    4154:	aa05      	add	r2, sp, #20
    4156:	2100      	movs	r1, #0
    4158:	484e      	ldr	r0, [pc, #312]	; (4294 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d4>)
    415a:	47b0      	blx	r6

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    415c:	f8df 915c 	ldr.w	r9, [pc, #348]	; 42bc <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>
    4160:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    4164:	47c8      	blx	r9
    4166:	f8df 8158 	ldr.w	r8, [pc, #344]	; 42c0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>
    416a:	a343      	add	r3, pc, #268	; (adr r3, 4278 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1b8>)
    416c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4170:	47c0      	blx	r8
    4172:	4f49      	ldr	r7, [pc, #292]	; (4298 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    4174:	47b8      	blx	r7
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    4176:	f64f 76ff 	movw	r6, #65535	; 0xffff
    417a:	42b0      	cmp	r0, r6
    417c:	bf28      	it	cs
    417e:	4630      	movcs	r0, r6
    4180:	f8ad 0016 	strh.w	r0, [sp, #22]
	
	uint32_t input_1 = adcresult_1*1.03;	
    4184:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    4188:	47c8      	blx	r9
    418a:	a33b      	add	r3, pc, #236	; (adr r3, 4278 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1b8>)
    418c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4190:	47c0      	blx	r8
    4192:	47b8      	blx	r7
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    4194:	42b0      	cmp	r0, r6
    4196:	bf28      	it	cs
    4198:	4630      	movcs	r0, r6
    419a:	f8ad 0014 	strh.w	r0, [sp, #20]

	// POT POLARITY IS REVERSED ON PO16_RevC
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    419e:	4b3f      	ldr	r3, [pc, #252]	; (429c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1dc>)
    41a0:	4798      	blx	r3
    41a2:	2808      	cmp	r0, #8
    41a4:	d02e      	beq.n	4204 <grid_module_po16_revb_hardware_transfer_complete_cb+0x144>
		// Reverse the 16bit result
		adcresult_0	= 65535 - adcresult_0;
		adcresult_1 = 65535 - adcresult_1;
	}

	grid_ain_add_sample(adc_index_0, adcresult_0);
    41a6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    41aa:	4628      	mov	r0, r5
    41ac:	4e3c      	ldr	r6, [pc, #240]	; (42a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    41ae:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    41b0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    41b4:	4620      	mov	r0, r4
    41b6:	47b0      	blx	r6


	uint8_t result_index[2] = {0};
	
	result_index[0] = adc_index_0;
    41b8:	f88d 5010 	strb.w	r5, [sp, #16]
	result_index[1] = adc_index_1;
    41bc:	f88d 4011 	strb.w	r4, [sp, #17]


	uint8_t grid_module_po16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    41c0:	4b38      	ldr	r3, [pc, #224]	; (42a4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e4>)
    41c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    41c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    41c8:	ac04      	add	r4, sp, #16
    41ca:	f10d 0912 	add.w	r9, sp, #18
	{
	
		// Helper variable for readability
		uint8_t res_index = result_index[i];

		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    41ce:	4f36      	ldr	r7, [pc, #216]	; (42a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
	
		if (grid_ain_get_changed(res_index)){
    41d0:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 42c4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>
		
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];

			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV7] = grid_ain_get_average(res_index, 7);
    41d4:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 42c8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>
		uint8_t res_index = result_index[i];
    41d8:	f814 5b01 	ldrb.w	r5, [r4], #1
		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    41dc:	687e      	ldr	r6, [r7, #4]
		if (grid_ain_get_changed(res_index)){
    41de:	4628      	mov	r0, r5
    41e0:	47d0      	blx	sl
    41e2:	b9d0      	cbnz	r0, 421a <grid_module_po16_revb_hardware_transfer_complete_cb+0x15a>
	for (uint8_t i=0; i<2; i++)
    41e4:	454c      	cmp	r4, r9
    41e6:	d1f7      	bne.n	41d8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x118>
		}

	}
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    41e8:	2200      	movs	r2, #0
    41ea:	4b25      	ldr	r3, [pc, #148]	; (4280 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c0>)
    41ec:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    41ee:	4b2f      	ldr	r3, [pc, #188]	; (42ac <grid_module_po16_revb_hardware_transfer_complete_cb+0x1ec>)
    41f0:	4798      	blx	r3
}
    41f2:	b007      	add	sp, #28
    41f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    41f8:	4a21      	ldr	r2, [pc, #132]	; (4280 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c0>)
    41fa:	7813      	ldrb	r3, [r2, #0]
    41fc:	3301      	adds	r3, #1
    41fe:	b2db      	uxtb	r3, r3
    4200:	7013      	strb	r3, [r2, #0]
    4202:	4770      	bx	lr
		adcresult_0	= 65535 - adcresult_0;
    4204:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    4208:	43db      	mvns	r3, r3
    420a:	f8ad 3016 	strh.w	r3, [sp, #22]
		adcresult_1 = 65535 - adcresult_1;
    420e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    4212:	43db      	mvns	r3, r3
    4214:	f8ad 3014 	strh.w	r3, [sp, #20]
    4218:	e7c5      	b.n	41a6 <grid_module_po16_revb_hardware_transfer_complete_cb+0xe6>
		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    421a:	f04f 082c 	mov.w	r8, #44	; 0x2c
    421e:	fb08 f805 	mul.w	r8, r8, r5
    4222:	4446      	add	r6, r8
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = res_index;
    4224:	6075      	str	r5, [r6, #4]
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    4226:	ab06      	add	r3, sp, #24
    4228:	442b      	add	r3, r5
    422a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
    422e:	60b3      	str	r3, [r6, #8]
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV7] = grid_ain_get_average(res_index, 7);
    4230:	2107      	movs	r1, #7
    4232:	4628      	mov	r0, r5
    4234:	47d8      	blx	fp
    4236:	60f0      	str	r0, [r6, #12]
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV8] = grid_ain_get_average(res_index, 8);
    4238:	2108      	movs	r1, #8
    423a:	4628      	mov	r0, r5
    423c:	47d8      	blx	fp
    423e:	6130      	str	r0, [r6, #16]
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV14U] = 0;
    4240:	2300      	movs	r3, #0
    4242:	6173      	str	r3, [r6, #20]
			template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_AV14L] = 0;
    4244:	61b3      	str	r3, [r6, #24]
			uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_AVC7);
    4246:	6878      	ldr	r0, [r7, #4]
    4248:	2102      	movs	r1, #2
    424a:	4440      	add	r0, r8
    424c:	4b18      	ldr	r3, [pc, #96]	; (42b0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    424e:	4798      	blx	r3
    4250:	4605      	mov	r5, r0
			grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    4252:	6878      	ldr	r0, [r7, #4]
    4254:	4629      	mov	r1, r5
    4256:	4440      	add	r0, r8
    4258:	4b16      	ldr	r3, [pc, #88]	; (42b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    425a:	4798      	blx	r3
			grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);			
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	4498      	add	r8, r3
    4260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4264:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    4268:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
    426c:	4b12      	ldr	r3, [pc, #72]	; (42b8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    426e:	4798      	blx	r3
    4270:	e7b8      	b.n	41e4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x124>
    4272:	bf00      	nop
    4274:	f3af 8000 	nop.w
    4278:	47ae147b 	.word	0x47ae147b
    427c:	3ff07ae1 	.word	0x3ff07ae1
    4280:	200006ce 	.word	0x200006ce
    4284:	20000334 	.word	0x20000334
    4288:	41008000 	.word	0x41008000
    428c:	20001050 	.word	0x20001050
    4290:	00005b75 	.word	0x00005b75
    4294:	20001224 	.word	0x20001224
    4298:	0000d399 	.word	0x0000d399
    429c:	00004b21 	.word	0x00004b21
    42a0:	000012a9 	.word	0x000012a9
    42a4:	0000ede8 	.word	0x0000ede8
    42a8:	200032ec 	.word	0x200032ec
    42ac:	000040a5 	.word	0x000040a5
    42b0:	00005285 	.word	0x00005285
    42b4:	00005709 	.word	0x00005709
    42b8:	000052af 	.word	0x000052af
    42bc:	0000cea9 	.word	0x0000cea9
    42c0:	0000cf75 	.word	0x0000cf75
    42c4:	000013a5 	.word	0x000013a5
    42c8:	000013b5 	.word	0x000013b5

000042cc <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    42cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    42ce:	4f0b      	ldr	r7, [pc, #44]	; (42fc <grid_module_po16_revb_hardware_init+0x30>)
    42d0:	4c0b      	ldr	r4, [pc, #44]	; (4300 <grid_module_po16_revb_hardware_init+0x34>)
    42d2:	463b      	mov	r3, r7
    42d4:	2200      	movs	r2, #0
    42d6:	4611      	mov	r1, r2
    42d8:	4620      	mov	r0, r4
    42da:	4e0a      	ldr	r6, [pc, #40]	; (4304 <grid_module_po16_revb_hardware_init+0x38>)
    42dc:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    42de:	4d0a      	ldr	r5, [pc, #40]	; (4308 <grid_module_po16_revb_hardware_init+0x3c>)
    42e0:	463b      	mov	r3, r7
    42e2:	2200      	movs	r2, #0
    42e4:	4611      	mov	r1, r2
    42e6:	4628      	mov	r0, r5
    42e8:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    42ea:	2100      	movs	r1, #0
    42ec:	4620      	mov	r0, r4
    42ee:	4c07      	ldr	r4, [pc, #28]	; (430c <grid_module_po16_revb_hardware_init+0x40>)
    42f0:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    42f2:	2100      	movs	r1, #0
    42f4:	4628      	mov	r0, r5
    42f6:	47a0      	blx	r4
    42f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42fa:	bf00      	nop
    42fc:	000040c1 	.word	0x000040c1
    4300:	20001050 	.word	0x20001050
    4304:	00005af5 	.word	0x00005af5
    4308:	20001224 	.word	0x20001224
    430c:	00005ab5 	.word	0x00005ab5

00004310 <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(){
    4310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4314:	b0bd      	sub	sp, #244	; 0xf4
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    4316:	2307      	movs	r3, #7
    4318:	220e      	movs	r2, #14
    431a:	2105      	movs	r1, #5
    431c:	2010      	movs	r0, #16
    431e:	4c2f      	ldr	r4, [pc, #188]	; (43dc <grid_module_po16_revb_init+0xcc>)
    4320:	47a0      	blx	r4
	grid_led_lowlevel_init(&grid_led_state, 16);
    4322:	2110      	movs	r1, #16
    4324:	482e      	ldr	r0, [pc, #184]	; (43e0 <grid_module_po16_revb_init+0xd0>)
    4326:	4b2f      	ldr	r3, [pc, #188]	; (43e4 <grid_module_po16_revb_init+0xd4>)
    4328:	4798      	blx	r3

	
	grid_ui_model_init(&grid_ui_state, 16);
    432a:	2110      	movs	r1, #16
    432c:	482e      	ldr	r0, [pc, #184]	; (43e8 <grid_module_po16_revb_init+0xd8>)
    432e:	4b2f      	ldr	r3, [pc, #188]	; (43ec <grid_module_po16_revb_init+0xdc>)
    4330:	4798      	blx	r3
    4332:	2600      	movs	r6, #0
	
	for(uint8_t i=0; i<16; i++){
			
		grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_POTENTIOMETER);
    4334:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 43e8 <grid_module_po16_revb_init+0xd8>
    4338:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 4408 <grid_module_po16_revb_init+0xf8>


		uint8_t payload_template[GRID_UI_ACTION_STRING_LENGTH] = {0};
    433c:	46b1      	mov	r9, r6
		grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_POTENTIOMETER);
    433e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    4342:	2101      	movs	r1, #1
    4344:	4430      	add	r0, r6
    4346:	47d8      	blx	fp
		uint8_t payload_template[GRID_UI_ACTION_STRING_LENGTH] = {0};
    4348:	f04f 0a78 	mov.w	sl, #120	; 0x78
    434c:	4652      	mov	r2, sl
    434e:	4649      	mov	r1, r9
    4350:	4668      	mov	r0, sp
    4352:	4f27      	ldr	r7, [pc, #156]	; (43f0 <grid_module_po16_revb_init+0xe0>)
    4354:	47b8      	blx	r7
		sprintf(payload_template, GRID_EVENT_AVC7_POT GRID_DEFAULT_ACTION_AVC7);
    4356:	466c      	mov	r4, sp
    4358:	4d26      	ldr	r5, [pc, #152]	; (43f4 <grid_module_po16_revb_init+0xe4>)
    435a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    435c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    435e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4362:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    4366:	c403      	stmia	r4!, {r0, r1}
    4368:	f824 2b02 	strh.w	r2, [r4], #2
    436c:	0c12      	lsrs	r2, r2, #16
    436e:	7022      	strb	r2, [r4, #0]
		uint8_t payload_length = strlen(payload_template);
    4370:	4668      	mov	r0, sp
    4372:	4d21      	ldr	r5, [pc, #132]	; (43f8 <grid_module_po16_revb_init+0xe8>)
    4374:	47a8      	blx	r5

		// Register Absolute Value Change
		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_AVC7, payload_template, payload_length);
    4376:	f8d8 4004 	ldr.w	r4, [r8, #4]
    437a:	b2c3      	uxtb	r3, r0
    437c:	466a      	mov	r2, sp
    437e:	2102      	movs	r1, #2
    4380:	19a0      	adds	r0, r4, r6
    4382:	4c1e      	ldr	r4, [pc, #120]	; (43fc <grid_module_po16_revb_init+0xec>)
    4384:	47a0      	blx	r4
		
		
		uint8_t init_action[GRID_UI_ACTION_STRING_LENGTH] = {0};
    4386:	4652      	mov	r2, sl
    4388:	4649      	mov	r1, r9
    438a:	eb0d 000a 	add.w	r0, sp, sl
    438e:	47b8      	blx	r7
		sprintf(init_action, GRID_DEFAULT_ACTION_INIT);
    4390:	eb0d 0e0a 	add.w	lr, sp, sl
    4394:	f8df c074 	ldr.w	ip, [pc, #116]	; 440c <grid_module_po16_revb_init+0xfc>
    4398:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    439c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    43a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    43a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    43a8:	f8dc 3000 	ldr.w	r3, [ip]
    43ac:	f88e 3000 	strb.w	r3, [lr]
		uint8_t init_length = strlen(init_action);
    43b0:	eb0d 000a 	add.w	r0, sp, sl
    43b4:	47a8      	blx	r5
		
		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_INIT, init_action, init_length);
    43b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
    43ba:	b2c3      	uxtb	r3, r0
    43bc:	eb0d 020a 	add.w	r2, sp, sl
    43c0:	4649      	mov	r1, r9
    43c2:	19a8      	adds	r0, r5, r6
    43c4:	47a0      	blx	r4
    43c6:	362c      	adds	r6, #44	; 0x2c
	for(uint8_t i=0; i<16; i++){
    43c8:	f5b6 7f30 	cmp.w	r6, #704	; 0x2c0
    43cc:	d1b7      	bne.n	433e <grid_module_po16_revb_init+0x2e>
		
	}
	
	grid_module_po16_revb_hardware_init();
    43ce:	4b0c      	ldr	r3, [pc, #48]	; (4400 <grid_module_po16_revb_init+0xf0>)
    43d0:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    43d2:	4b0c      	ldr	r3, [pc, #48]	; (4404 <grid_module_po16_revb_init+0xf4>)
    43d4:	4798      	blx	r3
	
    43d6:	b03d      	add	sp, #244	; 0xf4
    43d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43dc:	0000125d 	.word	0x0000125d
    43e0:	20007dd8 	.word	0x20007dd8
    43e4:	00002d41 	.word	0x00002d41
    43e8:	200032ec 	.word	0x200032ec
    43ec:	00004fd1 	.word	0x00004fd1
    43f0:	0000d447 	.word	0x0000d447
    43f4:	0000edbc 	.word	0x0000edbc
    43f8:	0000d87d 	.word	0x0000d87d
    43fc:	00005145 	.word	0x00005145
    4400:	000042cd 	.word	0x000042cd
    4404:	000040a5 	.word	0x000040a5
    4408:	00005065 	.word	0x00005065
    440c:	0000ecf4 	.word	0x0000ecf4

00004410 <grid_task_enter_task>:
 * Author : SUKU WC
*/

#include "grid_sys.h"

enum grid_task grid_task_enter_task(struct grid_task_model* mod, enum grid_task next_task){
    4410:	4603      	mov	r3, r0
	
	
	enum grid_task previous_task = mod->current_task;
    4412:	7840      	ldrb	r0, [r0, #1]
	mod->current_task = next_task;
    4414:	7059      	strb	r1, [r3, #1]
	return previous_task;
	
}
    4416:	4770      	bx	lr

00004418 <grid_task_timer_tick>:
	
	mod->current_task = previous_task;
	
}

void grid_task_timer_tick(struct grid_task_model* mod){
    4418:	7843      	ldrb	r3, [r0, #1]
    441a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	
	mod->timer[mod->current_task]++;
    441e:	6843      	ldr	r3, [r0, #4]
    4420:	3301      	adds	r3, #1
    4422:	6043      	str	r3, [r0, #4]
    4424:	4770      	bx	lr

00004426 <grid_task_timer_reset>:
	
}

void grid_task_timer_reset(struct grid_task_model* mod){
    4426:	1d03      	adds	r3, r0, #4
    4428:	3024      	adds	r0, #36	; 0x24
	
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
		mod->timer[i] = 0;
    442a:	2200      	movs	r2, #0
    442c:	f843 2b04 	str.w	r2, [r3], #4
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
    4430:	4283      	cmp	r3, r0
    4432:	d1fb      	bne.n	442c <grid_task_timer_reset+0x6>
	}
	
}
    4434:	4770      	bx	lr

00004436 <grid_task_timer_read>:

uint32_t grid_task_timer_read(struct grid_task_model* mod, enum grid_task task){

	return 	mod->timer[task];
    4436:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	
}
    443a:	6848      	ldr	r0, [r1, #4]
    443c:	4770      	bx	lr
	...

00004440 <grid_sys_load_bank_settings>:
		
	*/
		
}

void grid_sys_load_bank_settings(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    4440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4444:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    4448:	460d      	mov	r5, r1
	
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
    444a:	f44f 7600 	mov.w	r6, #512	; 0x200
    444e:	4632      	mov	r2, r6
    4450:	2100      	movs	r1, #0
    4452:	4668      	mov	r0, sp
    4454:	4b1c      	ldr	r3, [pc, #112]	; (44c8 <grid_sys_load_bank_settings+0x88>)
    4456:	4798      	blx	r3
	uint16_t length = 0;
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    4458:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
    445c:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
	
	flash_read(nvm->flash, nvm->read_source_address, temp, GRID_NVM_PAGE_SIZE);
    4460:	4633      	mov	r3, r6
    4462:	466a      	mov	r2, sp
    4464:	6828      	ldr	r0, [r5, #0]
    4466:	4d19      	ldr	r5, [pc, #100]	; (44cc <grid_sys_load_bank_settings+0x8c>)
    4468:	47a8      	blx	r5
    446a:	466d      	mov	r5, sp
    446c:	eb0d 0706 	add.w	r7, sp, r6
    4470:	466a      	mov	r2, sp
	
	//...Check if valid
	length = GRID_NVM_PAGE_SIZE;
		
	uint8_t copydone = 0;
    4472:	2400      	movs	r4, #0
		
	for (uint16_t i=0; i<GRID_NVM_PAGE_SIZE; i++){		
		GRID_PORT_H.tx_double_buffer[i] = temp[i];		
    4474:	4e16      	ldr	r6, [pc, #88]	; (44d0 <grid_sys_load_bank_settings+0x90>)
				GRID_PORT_U.rx_double_buffer_read_start_index = 0;
				copydone = 1;
				
			}
			else if (temp[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
				copydone = 1;
    4476:	f04f 0c01 	mov.w	ip, #1
			}
			else{ // NORMAL CHARACTER, can be copied
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    447a:	f8df e058 	ldr.w	lr, [pc, #88]	; 44d4 <grid_sys_load_bank_settings+0x94>
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    447e:	f04f 090a 	mov.w	r9, #10
				GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    4482:	46a0      	mov	r8, r4
    4484:	e00a      	b.n	449c <grid_sys_load_bank_settings+0x5c>
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    4486:	4473      	add	r3, lr
    4488:	f883 97fc 	strb.w	r9, [r3, #2044]	; 0x7fc
    448c:	1b53      	subs	r3, r2, r5
				GRID_PORT_U.rx_double_buffer_status = i+1;
    448e:	f8ce 3020 	str.w	r3, [lr, #32]
				GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    4492:	f8ce 8028 	str.w	r8, [lr, #40]	; 0x28
				copydone = 1;
    4496:	4664      	mov	r4, ip
	for (uint16_t i=0; i<GRID_NVM_PAGE_SIZE; i++){		
    4498:	42ba      	cmp	r2, r7
    449a:	d010      	beq.n	44be <grid_sys_load_bank_settings+0x7e>
    449c:	1b53      	subs	r3, r2, r5
		GRID_PORT_H.tx_double_buffer[i] = temp[i];		
    449e:	f812 1b01 	ldrb.w	r1, [r2], #1
    44a2:	18f0      	adds	r0, r6, r3
    44a4:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
		if (copydone == 0){
    44a8:	2c00      	cmp	r4, #0
    44aa:	d1f5      	bne.n	4498 <grid_sys_load_bank_settings+0x58>
			if (temp[i] == '\n'){ // END OF PACKET, copy newline character
    44ac:	290a      	cmp	r1, #10
    44ae:	d0ea      	beq.n	4486 <grid_sys_load_bank_settings+0x46>
			else if (temp[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
    44b0:	29ff      	cmp	r1, #255	; 0xff
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    44b2:	bf1a      	itte	ne
    44b4:	4473      	addne	r3, lr
    44b6:	f883 17fc 	strbne.w	r1, [r3, #2044]	; 0x7fc
				copydone = 1;
    44ba:	4664      	moveq	r4, ip
    44bc:	e7ec      	b.n	4498 <grid_sys_load_bank_settings+0x58>
// 
// 	}
	
		
	
}
    44be:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    44c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    44c6:	bf00      	nop
    44c8:	0000d447 	.word	0x0000d447
    44cc:	00005dbd 	.word	0x00005dbd
    44d0:	20005c28 	.word	0x20005c28
    44d4:	200022d0 	.word	0x200022d0

000044d8 <grid_sys_clear_bank_settings>:

void grid_sys_clear_bank_settings(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    44d8:	b508      	push	{r3, lr}
    44da:	460b      	mov	r3, r1
	
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
	uint16_t length = 0;
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    44dc:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
    44e0:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
	
	flash_erase(nvm->flash, GRID_NVM_GLOBAL_BASE_ADDRESS, 1);
    44e4:	2201      	movs	r2, #1
    44e6:	6818      	ldr	r0, [r3, #0]
    44e8:	4b01      	ldr	r3, [pc, #4]	; (44f0 <grid_sys_clear_bank_settings+0x18>)
    44ea:	4798      	blx	r3
    44ec:	bd08      	pop	{r3, pc}
    44ee:	bf00      	nop
    44f0:	00005f19 	.word	0x00005f19

000044f4 <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    44f4:	8982      	ldrh	r2, [r0, #12]
    44f6:	b142      	cbz	r2, 450a <tx_cb_USART_GRID+0x16>
    44f8:	f100 032b 	add.w	r3, r0, #43	; 0x2b
    44fc:	322b      	adds	r2, #43	; 0x2b
    44fe:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    4500:	2100      	movs	r1, #0
    4502:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    4506:	4293      	cmp	r3, r2
    4508:	d1fb      	bne.n	4502 <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    450a:	2300      	movs	r3, #0
    450c:	8183      	strh	r3, [r0, #12]
    450e:	4770      	bx	lr

00004510 <tx_cb_USART_GRID_W>:
{
    4510:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    4512:	4802      	ldr	r0, [pc, #8]	; (451c <tx_cb_USART_GRID_W+0xc>)
    4514:	4b02      	ldr	r3, [pc, #8]	; (4520 <tx_cb_USART_GRID_W+0x10>)
    4516:	4798      	blx	r3
    4518:	bd08      	pop	{r3, pc}
    451a:	bf00      	nop
    451c:	20003be8 	.word	0x20003be8
    4520:	000044f5 	.word	0x000044f5

00004524 <tx_cb_USART_GRID_S>:
{
    4524:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    4526:	4802      	ldr	r0, [pc, #8]	; (4530 <tx_cb_USART_GRID_S+0xc>)
    4528:	4b02      	ldr	r3, [pc, #8]	; (4534 <tx_cb_USART_GRID_S+0x10>)
    452a:	4798      	blx	r3
    452c:	bd08      	pop	{r3, pc}
    452e:	bf00      	nop
    4530:	20004c08 	.word	0x20004c08
    4534:	000044f5 	.word	0x000044f5

00004538 <tx_cb_USART_GRID_E>:
{
    4538:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    453a:	4802      	ldr	r0, [pc, #8]	; (4544 <tx_cb_USART_GRID_E+0xc>)
    453c:	4b02      	ldr	r3, [pc, #8]	; (4548 <tx_cb_USART_GRID_E+0x10>)
    453e:	4798      	blx	r3
    4540:	bd08      	pop	{r3, pc}
    4542:	bf00      	nop
    4544:	20006d44 	.word	0x20006d44
    4548:	000044f5 	.word	0x000044f5

0000454c <tx_cb_USART_GRID_N>:
{
    454c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    454e:	4802      	ldr	r0, [pc, #8]	; (4558 <tx_cb_USART_GRID_N+0xc>)
    4550:	4b02      	ldr	r3, [pc, #8]	; (455c <tx_cb_USART_GRID_N+0x10>)
    4552:	4798      	blx	r3
    4554:	bd08      	pop	{r3, pc}
    4556:	bf00      	nop
    4558:	200012a4 	.word	0x200012a4
    455c:	000044f5 	.word	0x000044f5

00004560 <err_cb_USART_GRID>:
{
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
    4560:	b508      	push	{r3, lr}
	por->usart_error_flag = 1;	
    4562:	2301      	movs	r3, #1
    4564:	7603      	strb	r3, [r0, #24]
	
	usart_async_disable(por->usart);
    4566:	6840      	ldr	r0, [r0, #4]
    4568:	4b01      	ldr	r3, [pc, #4]	; (4570 <err_cb_USART_GRID+0x10>)
    456a:	4798      	blx	r3
    456c:	bd08      	pop	{r3, pc}
    456e:	bf00      	nop
    4570:	00006ac5 	.word	0x00006ac5

00004574 <err_cb_USART_GRID_W>:
{
    4574:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_W);
    4576:	4802      	ldr	r0, [pc, #8]	; (4580 <err_cb_USART_GRID_W+0xc>)
    4578:	4b02      	ldr	r3, [pc, #8]	; (4584 <err_cb_USART_GRID_W+0x10>)
    457a:	4798      	blx	r3
    457c:	bd08      	pop	{r3, pc}
    457e:	bf00      	nop
    4580:	20003be8 	.word	0x20003be8
    4584:	00004561 	.word	0x00004561

00004588 <err_cb_USART_GRID_S>:
{
    4588:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_S);
    458a:	4802      	ldr	r0, [pc, #8]	; (4594 <err_cb_USART_GRID_S+0xc>)
    458c:	4b02      	ldr	r3, [pc, #8]	; (4598 <err_cb_USART_GRID_S+0x10>)
    458e:	4798      	blx	r3
    4590:	bd08      	pop	{r3, pc}
    4592:	bf00      	nop
    4594:	20004c08 	.word	0x20004c08
    4598:	00004561 	.word	0x00004561

0000459c <err_cb_USART_GRID_E>:
{
    459c:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_E);
    459e:	4802      	ldr	r0, [pc, #8]	; (45a8 <err_cb_USART_GRID_E+0xc>)
    45a0:	4b02      	ldr	r3, [pc, #8]	; (45ac <err_cb_USART_GRID_E+0x10>)
    45a2:	4798      	blx	r3
    45a4:	bd08      	pop	{r3, pc}
    45a6:	bf00      	nop
    45a8:	20006d44 	.word	0x20006d44
    45ac:	00004561 	.word	0x00004561

000045b0 <err_cb_USART_GRID_N>:
{
    45b0:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_N);
    45b2:	4802      	ldr	r0, [pc, #8]	; (45bc <err_cb_USART_GRID_N+0xc>)
    45b4:	4b02      	ldr	r3, [pc, #8]	; (45c0 <err_cb_USART_GRID_N+0x10>)
    45b6:	4798      	blx	r3
    45b8:	bd08      	pop	{r3, pc}
    45ba:	bf00      	nop
    45bc:	200012a4 	.word	0x200012a4
    45c0:	00004561 	.word	0x00004561

000045c4 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    45c4:	b508      	push	{r3, lr}
    45c6:	7a83      	ldrb	r3, [r0, #10]
    45c8:	011b      	lsls	r3, r3, #4
    45ca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    45ce:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    45d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    45d4:	f022 0202 	bic.w	r2, r2, #2
    45d8:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    45da:	2100      	movs	r1, #0
    45dc:	7a80      	ldrb	r0, [r0, #10]
    45de:	4b01      	ldr	r3, [pc, #4]	; (45e4 <grid_sys_port_reset_dma+0x20>)
    45e0:	4798      	blx	r3
    45e2:	bd08      	pop	{r3, pc}
    45e4:	00007b0d 	.word	0x00007b0d

000045e8 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    45e8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    45ea:	4802      	ldr	r0, [pc, #8]	; (45f4 <dma_transfer_complete_w_cb+0xc>)
    45ec:	4b02      	ldr	r3, [pc, #8]	; (45f8 <dma_transfer_complete_w_cb+0x10>)
    45ee:	4798      	blx	r3
    45f0:	bd08      	pop	{r3, pc}
    45f2:	bf00      	nop
    45f4:	20003be8 	.word	0x20003be8
    45f8:	000045c5 	.word	0x000045c5

000045fc <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    45fc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    45fe:	4802      	ldr	r0, [pc, #8]	; (4608 <dma_transfer_complete_s_cb+0xc>)
    4600:	4b02      	ldr	r3, [pc, #8]	; (460c <dma_transfer_complete_s_cb+0x10>)
    4602:	4798      	blx	r3
    4604:	bd08      	pop	{r3, pc}
    4606:	bf00      	nop
    4608:	20004c08 	.word	0x20004c08
    460c:	000045c5 	.word	0x000045c5

00004610 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    4610:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    4612:	4802      	ldr	r0, [pc, #8]	; (461c <dma_transfer_complete_e_cb+0xc>)
    4614:	4b02      	ldr	r3, [pc, #8]	; (4620 <dma_transfer_complete_e_cb+0x10>)
    4616:	4798      	blx	r3
    4618:	bd08      	pop	{r3, pc}
    461a:	bf00      	nop
    461c:	20006d44 	.word	0x20006d44
    4620:	000045c5 	.word	0x000045c5

00004624 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    4624:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    4626:	4802      	ldr	r0, [pc, #8]	; (4630 <dma_transfer_complete_n_cb+0xc>)
    4628:	4b02      	ldr	r3, [pc, #8]	; (4634 <dma_transfer_complete_n_cb+0x10>)
    462a:	4798      	blx	r3
    462c:	bd08      	pop	{r3, pc}
    462e:	bf00      	nop
    4630:	200012a4 	.word	0x200012a4
    4634:	000045c5 	.word	0x000045c5

00004638 <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    4638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    463c:	4b3e      	ldr	r3, [pc, #248]	; (4738 <grid_sys_uart_init+0x100>)
    463e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4642:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4646:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    464a:	f042 0204 	orr.w	r2, r2, #4
    464e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4652:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4656:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    465a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    465e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    4662:	f042 0204 	orr.w	r2, r2, #4
    4666:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    466a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    466e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4672:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4676:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    467a:	f042 0204 	orr.w	r2, r2, #4
    467e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4682:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4686:	f44f 7100 	mov.w	r1, #512	; 0x200
    468a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    468e:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    4692:	f042 0204 	orr.w	r2, r2, #4
    4696:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    469a:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    469e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 4784 <grid_sys_uart_init+0x14c>
    46a2:	4a26      	ldr	r2, [pc, #152]	; (473c <grid_sys_uart_init+0x104>)
    46a4:	2101      	movs	r1, #1
    46a6:	4640      	mov	r0, r8
    46a8:	4c25      	ldr	r4, [pc, #148]	; (4740 <grid_sys_uart_init+0x108>)
    46aa:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    46ac:	4f25      	ldr	r7, [pc, #148]	; (4744 <grid_sys_uart_init+0x10c>)
    46ae:	4a26      	ldr	r2, [pc, #152]	; (4748 <grid_sys_uart_init+0x110>)
    46b0:	2101      	movs	r1, #1
    46b2:	4638      	mov	r0, r7
    46b4:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    46b6:	4e25      	ldr	r6, [pc, #148]	; (474c <grid_sys_uart_init+0x114>)
    46b8:	4a25      	ldr	r2, [pc, #148]	; (4750 <grid_sys_uart_init+0x118>)
    46ba:	2101      	movs	r1, #1
    46bc:	4630      	mov	r0, r6
    46be:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    46c0:	4d24      	ldr	r5, [pc, #144]	; (4754 <grid_sys_uart_init+0x11c>)
    46c2:	4a25      	ldr	r2, [pc, #148]	; (4758 <grid_sys_uart_init+0x120>)
    46c4:	2101      	movs	r1, #1
    46c6:	4628      	mov	r0, r5
    46c8:	47a0      	blx	r4
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    46ca:	2101      	movs	r1, #1
    46cc:	4640      	mov	r0, r8
    46ce:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4788 <grid_sys_uart_init+0x150>
    46d2:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    46d4:	2101      	movs	r1, #1
    46d6:	4638      	mov	r0, r7
    46d8:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    46da:	2101      	movs	r1, #1
    46dc:	4630      	mov	r0, r6
    46de:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    46e0:	2101      	movs	r1, #1
    46e2:	4628      	mov	r0, r5
    46e4:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    46e6:	4a1d      	ldr	r2, [pc, #116]	; (475c <grid_sys_uart_init+0x124>)
    46e8:	2102      	movs	r1, #2
    46ea:	4640      	mov	r0, r8
    46ec:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    46ee:	4a1c      	ldr	r2, [pc, #112]	; (4760 <grid_sys_uart_init+0x128>)
    46f0:	2102      	movs	r1, #2
    46f2:	4638      	mov	r0, r7
    46f4:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    46f6:	4a1b      	ldr	r2, [pc, #108]	; (4764 <grid_sys_uart_init+0x12c>)
    46f8:	2102      	movs	r1, #2
    46fa:	4630      	mov	r0, r6
    46fc:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    46fe:	4a1a      	ldr	r2, [pc, #104]	; (4768 <grid_sys_uart_init+0x130>)
    4700:	2102      	movs	r1, #2
    4702:	4628      	mov	r0, r5
    4704:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    4706:	4919      	ldr	r1, [pc, #100]	; (476c <grid_sys_uart_init+0x134>)
    4708:	4640      	mov	r0, r8
    470a:	4c19      	ldr	r4, [pc, #100]	; (4770 <grid_sys_uart_init+0x138>)
    470c:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    470e:	4919      	ldr	r1, [pc, #100]	; (4774 <grid_sys_uart_init+0x13c>)
    4710:	4638      	mov	r0, r7
    4712:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    4714:	4918      	ldr	r1, [pc, #96]	; (4778 <grid_sys_uart_init+0x140>)
    4716:	4630      	mov	r0, r6
    4718:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    471a:	4918      	ldr	r1, [pc, #96]	; (477c <grid_sys_uart_init+0x144>)
    471c:	4628      	mov	r0, r5
    471e:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    4720:	4640      	mov	r0, r8
    4722:	4c17      	ldr	r4, [pc, #92]	; (4780 <grid_sys_uart_init+0x148>)
    4724:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    4726:	4638      	mov	r0, r7
    4728:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    472a:	4630      	mov	r0, r6
    472c:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    472e:	4628      	mov	r0, r5
    4730:	47a0      	blx	r4
    4732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4736:	bf00      	nop
    4738:	41008000 	.word	0x41008000
    473c:	0000454d 	.word	0x0000454d
    4740:	00006b19 	.word	0x00006b19
    4744:	2000107c 	.word	0x2000107c
    4748:	00004539 	.word	0x00004539
    474c:	200011d4 	.word	0x200011d4
    4750:	00004525 	.word	0x00004525
    4754:	20001184 	.word	0x20001184
    4758:	00004511 	.word	0x00004511
    475c:	000045b1 	.word	0x000045b1
    4760:	0000459d 	.word	0x0000459d
    4764:	00004589 	.word	0x00004589
    4768:	00004575 	.word	0x00004575
    476c:	200032f4 	.word	0x200032f4
    4770:	00006af1 	.word	0x00006af1
    4774:	20004c04 	.word	0x20004c04
    4778:	20005c24 	.word	0x20005c24
    477c:	20007df0 	.word	0x20007df0
    4780:	00006a99 	.word	0x00006a99
    4784:	200010d0 	.word	0x200010d0
    4788:	00006b8d 	.word	0x00006b8d

0000478c <grid_sys_dma_rx_init_one>:

}



void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    478c:	b5f0      	push	{r4, r5, r6, r7, lr}
    478e:	b083      	sub	sp, #12
    4790:	4605      	mov	r5, r0
    4792:	460f      	mov	r7, r1
    4794:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    4796:	7a84      	ldrb	r4, [r0, #10]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    4798:	6843      	ldr	r3, [r0, #4]
    479a:	6a19      	ldr	r1, [r3, #32]
    479c:	3128      	adds	r1, #40	; 0x28
    479e:	4620      	mov	r0, r4
    47a0:	4b0d      	ldr	r3, [pc, #52]	; (47d8 <grid_sys_dma_rx_init_one+0x4c>)
    47a2:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    47a4:	f205 71fc 	addw	r1, r5, #2044	; 0x7fc
    47a8:	4620      	mov	r0, r4
    47aa:	4b0c      	ldr	r3, [pc, #48]	; (47dc <grid_sys_dma_rx_init_one+0x50>)
    47ac:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    47ae:	4639      	mov	r1, r7
    47b0:	4620      	mov	r0, r4
    47b2:	4b0b      	ldr	r3, [pc, #44]	; (47e0 <grid_sys_dma_rx_init_one+0x54>)
    47b4:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    47b6:	4621      	mov	r1, r4
    47b8:	a801      	add	r0, sp, #4
    47ba:	4b0a      	ldr	r3, [pc, #40]	; (47e4 <grid_sys_dma_rx_init_one+0x58>)
    47bc:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    47be:	9b01      	ldr	r3, [sp, #4]
    47c0:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    47c2:	2201      	movs	r2, #1
    47c4:	2100      	movs	r1, #0
    47c6:	4620      	mov	r0, r4
    47c8:	4b07      	ldr	r3, [pc, #28]	; (47e8 <grid_sys_dma_rx_init_one+0x5c>)
    47ca:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    47cc:	2100      	movs	r1, #0
    47ce:	4620      	mov	r0, r4
    47d0:	4b06      	ldr	r3, [pc, #24]	; (47ec <grid_sys_dma_rx_init_one+0x60>)
    47d2:	4798      	blx	r3
	

}
    47d4:	b003      	add	sp, #12
    47d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47d8:	00007a89 	.word	0x00007a89
    47dc:	00007a79 	.word	0x00007a79
    47e0:	00007ab5 	.word	0x00007ab5
    47e4:	00007b4d 	.word	0x00007b4d
    47e8:	00007a25 	.word	0x00007a25
    47ec:	00007b0d 	.word	0x00007b0d

000047f0 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    47f0:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    47f2:	4a10      	ldr	r2, [pc, #64]	; (4834 <grid_sys_dma_rx_init+0x44>)
    47f4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    47f8:	480f      	ldr	r0, [pc, #60]	; (4838 <grid_sys_dma_rx_init+0x48>)
    47fa:	4c10      	ldr	r4, [pc, #64]	; (483c <grid_sys_dma_rx_init+0x4c>)
    47fc:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    47fe:	4a10      	ldr	r2, [pc, #64]	; (4840 <grid_sys_dma_rx_init+0x50>)
    4800:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    4804:	480f      	ldr	r0, [pc, #60]	; (4844 <grid_sys_dma_rx_init+0x54>)
    4806:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    4808:	4a0f      	ldr	r2, [pc, #60]	; (4848 <grid_sys_dma_rx_init+0x58>)
    480a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    480e:	480f      	ldr	r0, [pc, #60]	; (484c <grid_sys_dma_rx_init+0x5c>)
    4810:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    4812:	4a0f      	ldr	r2, [pc, #60]	; (4850 <grid_sys_dma_rx_init+0x60>)
    4814:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    4818:	480e      	ldr	r0, [pc, #56]	; (4854 <grid_sys_dma_rx_init+0x64>)
    481a:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    481c:	4b0e      	ldr	r3, [pc, #56]	; (4858 <grid_sys_dma_rx_init+0x68>)
    481e:	2200      	movs	r2, #0
    4820:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    4824:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    4828:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    482c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    4830:	bd10      	pop	{r4, pc}
    4832:	bf00      	nop
    4834:	00004625 	.word	0x00004625
    4838:	200012a4 	.word	0x200012a4
    483c:	0000478d 	.word	0x0000478d
    4840:	00004611 	.word	0x00004611
    4844:	20006d44 	.word	0x20006d44
    4848:	000045fd 	.word	0x000045fd
    484c:	20004c08 	.word	0x20004c08
    4850:	000045e9 	.word	0x000045e9
    4854:	20003be8 	.word	0x20003be8
    4858:	e000e100 	.word	0xe000e100

0000485c <grid_sys_bank_enable>:
}


uint8_t grid_sys_bank_enable(struct grid_sys_model* mod, uint8_t banknumber){
	
	if (banknumber>GRID_SYS_BANK_MAXNUMBER){
    485c:	2904      	cmp	r1, #4
    485e:	d901      	bls.n	4864 <grid_sys_bank_enable+0x8>
		return false;
    4860:	2000      	movs	r0, #0
    4862:	4770      	bx	lr
	}
	
	mod->bank_enabled[banknumber] = 1;
    4864:	4401      	add	r1, r0
    4866:	2301      	movs	r3, #1
    4868:	734b      	strb	r3, [r1, #13]
}
    486a:	4770      	bx	lr

0000486c <grid_sys_bank_disable>:

uint8_t grid_sys_bank_disable(struct grid_sys_model* mod, uint8_t banknumber){
	
	if (banknumber>GRID_SYS_BANK_MAXNUMBER){
    486c:	2904      	cmp	r1, #4
    486e:	d901      	bls.n	4874 <grid_sys_bank_disable+0x8>
		return false;
    4870:	2000      	movs	r0, #0
    4872:	4770      	bx	lr
	}
	
	mod->bank_enabled[banknumber] = 0;
    4874:	4401      	add	r1, r0
    4876:	2300      	movs	r3, #0
    4878:	734b      	strb	r3, [r1, #13]
	
}
    487a:	4770      	bx	lr

0000487c <grid_sys_bank_set_color>:

uint8_t grid_sys_bank_set_color(struct grid_sys_model* mod, uint8_t banknumber, uint32_t rgb){
	
	if (banknumber>GRID_SYS_BANK_MAXNUMBER){
    487c:	2904      	cmp	r1, #4
    487e:	d901      	bls.n	4884 <grid_sys_bank_set_color+0x8>
		return false;
    4880:	2000      	movs	r0, #0
    4882:	4770      	bx	lr
	}
	
	// 0x00RRGGBB
	
	mod->bank_color_r[banknumber] = ((rgb&0x00FF0000)>>16);
    4884:	4408      	add	r0, r1
    4886:	0c13      	lsrs	r3, r2, #16
    4888:	7443      	strb	r3, [r0, #17]
	mod->bank_color_g[banknumber] = ((rgb&0x0000FF00)>>8);
    488a:	0a13      	lsrs	r3, r2, #8
    488c:	7543      	strb	r3, [r0, #21]
	mod->bank_color_b[banknumber] = ((rgb&0x000000FF)>>0);
    488e:	7642      	strb	r2, [r0, #25]
	
}
    4890:	4770      	bx	lr

00004892 <grid_sys_get_bank_num>:


uint8_t grid_sys_get_bank_num(struct grid_sys_model* mod){
	
	return mod->bank_activebank_number;
}
    4892:	7a40      	ldrb	r0, [r0, #9]
    4894:	4770      	bx	lr

00004896 <grid_sys_get_bank_red>:

uint8_t grid_sys_get_bank_red(struct grid_sys_model* mod){
	
	return mod->bank_activebank_color_r;
}
    4896:	7f40      	ldrb	r0, [r0, #29]
    4898:	4770      	bx	lr

0000489a <grid_sys_get_bank_gre>:

uint8_t grid_sys_get_bank_gre(struct grid_sys_model* mod){
	
	return mod->bank_activebank_color_g;
}
    489a:	7f80      	ldrb	r0, [r0, #30]
    489c:	4770      	bx	lr

0000489e <grid_sys_get_bank_blu>:

uint8_t grid_sys_get_bank_blu(struct grid_sys_model* mod){

	return mod->bank_activebank_color_b;
}
    489e:	7fc0      	ldrb	r0, [r0, #31]
    48a0:	4770      	bx	lr

000048a2 <grid_sys_get_bank_next>:


uint8_t grid_sys_get_bank_next(struct grid_sys_model* mod){
    48a2:	b430      	push	{r4, r5}
	return mod->bank_activebank_number;
    48a4:	7a44      	ldrb	r4, [r0, #9]
		
	uint8_t current_active = grid_sys_get_bank_num(mod);
		
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
		
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    48a6:	1c63      	adds	r3, r4, #1
    48a8:	425a      	negs	r2, r3
    48aa:	f003 0303 	and.w	r3, r3, #3
    48ae:	f002 0203 	and.w	r2, r2, #3
    48b2:	bf58      	it	pl
    48b4:	4253      	negpl	r3, r2
		
		if (mod->bank_enabled[bank_check] == 1){
    48b6:	fa50 f283 	uxtab	r2, r0, r3
    48ba:	7b52      	ldrb	r2, [r2, #13]
    48bc:	2a01      	cmp	r2, #1
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    48be:	bf08      	it	eq
    48c0:	b2dc      	uxtbeq	r4, r3
		if (mod->bank_enabled[bank_check] == 1){
    48c2:	d010      	beq.n	48e6 <grid_sys_get_bank_next+0x44>
    48c4:	1ca3      	adds	r3, r4, #2
    48c6:	1d65      	adds	r5, r4, #5
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    48c8:	4259      	negs	r1, r3
    48ca:	f003 0203 	and.w	r2, r3, #3
    48ce:	f001 0103 	and.w	r1, r1, #3
    48d2:	bf58      	it	pl
    48d4:	424a      	negpl	r2, r1
		if (mod->bank_enabled[bank_check] == 1){
    48d6:	fa50 f182 	uxtab	r1, r0, r2
    48da:	7b49      	ldrb	r1, [r1, #13]
    48dc:	2901      	cmp	r1, #1
    48de:	d005      	beq.n	48ec <grid_sys_get_bank_next+0x4a>
    48e0:	3301      	adds	r3, #1
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    48e2:	42ab      	cmp	r3, r5
    48e4:	d1f0      	bne.n	48c8 <grid_sys_get_bank_next+0x26>
		
	}
	
	return current_active;
	
}
    48e6:	4620      	mov	r0, r4
    48e8:	bc30      	pop	{r4, r5}
    48ea:	4770      	bx	lr
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    48ec:	b2d4      	uxtb	r4, r2
    48ee:	e7fa      	b.n	48e6 <grid_sys_get_bank_next+0x44>

000048f0 <grid_sys_set_bank>:


void grid_sys_set_bank(struct grid_sys_model* mod, uint8_t banknumber){
    48f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	mod->bank_active_changed = 1;
    48f4:	2301      	movs	r3, #1
    48f6:	72c3      	strb	r3, [r0, #11]
	

	
	if (banknumber == 255){
    48f8:	29ff      	cmp	r1, #255	; 0xff
    48fa:	d02e      	beq.n	495a <grid_sys_set_bank+0x6a>
    48fc:	f001 0103 	and.w	r1, r1, #3
		uint8_t b = mod->bank_activebank_color_b;


		
	}
	else if (mod->bank_enabled[banknumber%GRID_SYS_BANK_MAXNUMBER] == 1){
    4900:	1843      	adds	r3, r0, r1
    4902:	7b5b      	ldrb	r3, [r3, #13]
    4904:	2b01      	cmp	r3, #1
    4906:	d02f      	beq.n	4968 <grid_sys_set_bank+0x78>
		uint8_t b = mod->bank_activebank_color_b;
	
	}


	for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    4908:	4b1c      	ldr	r3, [pc, #112]	; (497c <grid_sys_set_bank+0x8c>)
    490a:	785b      	ldrb	r3, [r3, #1]
    490c:	b31b      	cbz	r3, 4956 <grid_sys_set_bank+0x66>
    490e:	2400      	movs	r4, #0
		
		// action template bug fix try
		grid_ui_state.element[i].template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = i;
    4910:	4f1a      	ldr	r7, [pc, #104]	; (497c <grid_sys_set_bank+0x8c>)
		
		uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[i], GRID_UI_EVENT_INIT);
    4912:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4984 <grid_sys_set_bank+0x94>
			
		grid_ui_event_template_action(&grid_ui_state.element[i], event_index);
    4916:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4988 <grid_sys_set_bank+0x98>
		grid_ui_state.element[i].template_parameter_list[GRID_TEMPLATE_A_PARAMETER_CONTROLLER_NUMBER] = i;
    491a:	687b      	ldr	r3, [r7, #4]
    491c:	252c      	movs	r5, #44	; 0x2c
    491e:	fb05 f504 	mul.w	r5, r5, r4
    4922:	442b      	add	r3, r5
    4924:	605c      	str	r4, [r3, #4]
		uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[i], GRID_UI_EVENT_INIT);
    4926:	6878      	ldr	r0, [r7, #4]
    4928:	2100      	movs	r1, #0
    492a:	4428      	add	r0, r5
    492c:	47c8      	blx	r9
    492e:	4606      	mov	r6, r0
		grid_ui_event_template_action(&grid_ui_state.element[i], event_index);
    4930:	6878      	ldr	r0, [r7, #4]
    4932:	4631      	mov	r1, r6
    4934:	4428      	add	r0, r5
    4936:	47c0      	blx	r8
		grid_ui_event_trigger(&grid_ui_state.element[i].event_list[event_index]);	
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	441d      	add	r5, r3
    493c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    4940:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4942:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
    4946:	4b0e      	ldr	r3, [pc, #56]	; (4980 <grid_sys_set_bank+0x90>)
    4948:	4798      	blx	r3
	for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    494a:	3401      	adds	r4, #1
    494c:	b2e4      	uxtb	r4, r4
    494e:	787b      	ldrb	r3, [r7, #1]
    4950:	b2db      	uxtb	r3, r3
    4952:	42a3      	cmp	r3, r4
    4954:	d8e1      	bhi.n	491a <grid_sys_set_bank+0x2a>
    4956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		mod->bank_activebank_number = 255;
    495a:	23ff      	movs	r3, #255	; 0xff
    495c:	7243      	strb	r3, [r0, #9]
		mod->bank_activebank_color_r = 127;
    495e:	237f      	movs	r3, #127	; 0x7f
    4960:	7743      	strb	r3, [r0, #29]
		mod->bank_activebank_color_g = 127;
    4962:	7783      	strb	r3, [r0, #30]
		mod->bank_activebank_color_b = 127;
    4964:	77c3      	strb	r3, [r0, #31]
    4966:	e7cf      	b.n	4908 <grid_sys_set_bank+0x18>
		mod->bank_activebank_number = banknumber%GRID_SYS_BANK_MAXNUMBER;
    4968:	7241      	strb	r1, [r0, #9]
		mod->bank_activebank_color_r = mod->bank_color_r[mod->bank_activebank_number];
    496a:	4401      	add	r1, r0
    496c:	7c4b      	ldrb	r3, [r1, #17]
    496e:	7743      	strb	r3, [r0, #29]
		mod->bank_activebank_color_g = mod->bank_color_g[mod->bank_activebank_number];
    4970:	7d4b      	ldrb	r3, [r1, #21]
    4972:	7783      	strb	r3, [r0, #30]
		mod->bank_activebank_color_b = mod->bank_color_b[mod->bank_activebank_number];
    4974:	7e4b      	ldrb	r3, [r1, #25]
    4976:	77c3      	strb	r3, [r0, #31]
    4978:	e7c6      	b.n	4908 <grid_sys_set_bank+0x18>
    497a:	bf00      	nop
    497c:	200032ec 	.word	0x200032ec
    4980:	000052af 	.word	0x000052af
    4984:	00005285 	.word	0x00005285
    4988:	00005709 	.word	0x00005709

0000498c <grid_sys_init>:
void grid_sys_init(struct grid_sys_model* mod){
    498c:	b510      	push	{r4, lr}
	mod->bank_color_r[0] = 0;
    498e:	2300      	movs	r3, #0
    4990:	7443      	strb	r3, [r0, #17]
	mod->bank_color_g[0] = 100;
    4992:	2164      	movs	r1, #100	; 0x64
    4994:	7541      	strb	r1, [r0, #21]
	mod->bank_color_b[0] = 200;
    4996:	22c8      	movs	r2, #200	; 0xc8
    4998:	7642      	strb	r2, [r0, #25]
	mod->bank_color_r[1] = 200;
    499a:	7482      	strb	r2, [r0, #18]
	mod->bank_color_g[1] = 100;
    499c:	7581      	strb	r1, [r0, #22]
	mod->bank_color_b[1] = 0;
    499e:	7683      	strb	r3, [r0, #26]
	mod->bank_color_r[2] = 50;
    49a0:	2432      	movs	r4, #50	; 0x32
    49a2:	74c4      	strb	r4, [r0, #19]
	mod->bank_color_g[2] = 200;
    49a4:	75c2      	strb	r2, [r0, #23]
	mod->bank_color_b[2] = 50;
    49a6:	76c4      	strb	r4, [r0, #27]
	mod->bank_color_r[3] = 100;
    49a8:	7501      	strb	r1, [r0, #20]
	mod->bank_color_g[3] = 0;
    49aa:	7603      	strb	r3, [r0, #24]
	mod->bank_color_b[3] = 200;
    49ac:	7702      	strb	r2, [r0, #28]
	mod->bank_enabled[0] = 1;
    49ae:	2201      	movs	r2, #1
    49b0:	7342      	strb	r2, [r0, #13]
	mod->bank_enabled[1] = 1;
    49b2:	7382      	strb	r2, [r0, #14]
	mod->bank_enabled[2] = 1;
    49b4:	73c2      	strb	r2, [r0, #15]
	mod->bank_enabled[3] = 1;
    49b6:	7402      	strb	r2, [r0, #16]
	mod->bank_activebank_color_r = 255;
    49b8:	21ff      	movs	r1, #255	; 0xff
    49ba:	7741      	strb	r1, [r0, #29]
	mod->bank_activebank_color_g = 255;
    49bc:	7781      	strb	r1, [r0, #30]
	mod->bank_activebank_color_b = 255;
    49be:	77c1      	strb	r1, [r0, #31]
	mod->bank_active_changed = 0;
    49c0:	72c3      	strb	r3, [r0, #11]
	mod->bank_setting_changed_flag = 0;
    49c2:	7303      	strb	r3, [r0, #12]
	mod->bank_activebank_number = 255;
    49c4:	7241      	strb	r1, [r0, #9]
	grid_sys_set_bank(&grid_sys_state, 255);
    49c6:	4805      	ldr	r0, [pc, #20]	; (49dc <grid_sys_init+0x50>)
    49c8:	4b05      	ldr	r3, [pc, #20]	; (49e0 <grid_sys_init+0x54>)
    49ca:	4798      	blx	r3
	grid_port_init_all();
    49cc:	4b05      	ldr	r3, [pc, #20]	; (49e4 <grid_sys_init+0x58>)
    49ce:	4798      	blx	r3
	grid_sys_uart_init();
    49d0:	4b05      	ldr	r3, [pc, #20]	; (49e8 <grid_sys_init+0x5c>)
    49d2:	4798      	blx	r3
	grid_sys_dma_rx_init();
    49d4:	4b05      	ldr	r3, [pc, #20]	; (49ec <grid_sys_init+0x60>)
    49d6:	4798      	blx	r3
    49d8:	bd10      	pop	{r4, pc}
    49da:	bf00      	nop
    49dc:	200032f8 	.word	0x200032f8
    49e0:	000048f1 	.word	0x000048f1
    49e4:	00001f99 	.word	0x00001f99
    49e8:	00004639 	.word	0x00004639
    49ec:	000047f1 	.word	0x000047f1

000049f0 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    49f0:	6a00      	ldr	r0, [r0, #32]
    49f2:	4770      	bx	lr

000049f4 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    49f4:	6a00      	ldr	r0, [r0, #32]
	
	

}
    49f6:	1a40      	subs	r0, r0, r1
    49f8:	4770      	bx	lr

000049fa <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    49fa:	6a03      	ldr	r3, [r0, #32]
    49fc:	3301      	adds	r3, #1
    49fe:	6203      	str	r3, [r0, #32]
    4a00:	4770      	bx	lr

00004a02 <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    4a02:	7a00      	ldrb	r0, [r0, #8]
    4a04:	4770      	bx	lr

00004a06 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    4a06:	2300      	movs	r3, #0
    4a08:	7203      	strb	r3, [r0, #8]
    4a0a:	4770      	bx	lr

00004a0c <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    4a0c:	7983      	ldrb	r3, [r0, #6]
    4a0e:	b123      	cbz	r3, 4a1a <grid_sys_alert_get_color_intensity+0xe>
		
		return (250-abs(mod->alert_state/2-250))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    4a10:	2b01      	cmp	r3, #1
    4a12:	d00f      	beq.n	4a34 <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    4a14:	2b02      	cmp	r3, #2
    4a16:	d015      	beq.n	4a44 <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    4a18:	4770      	bx	lr
		return (250-abs(mod->alert_state/2-250))/2;
    4a1a:	8880      	ldrh	r0, [r0, #4]
    4a1c:	0840      	lsrs	r0, r0, #1
    4a1e:	38fa      	subs	r0, #250	; 0xfa
    4a20:	2800      	cmp	r0, #0
    4a22:	bfb8      	it	lt
    4a24:	4240      	neglt	r0, r0
    4a26:	f1c0 00fa 	rsb	r0, r0, #250	; 0xfa
    4a2a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    4a2e:	f3c0 0047 	ubfx	r0, r0, #1, #8
    4a32:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    4a34:	8880      	ldrh	r0, [r0, #4]
    4a36:	4b06      	ldr	r3, [pc, #24]	; (4a50 <grid_sys_alert_get_color_intensity+0x44>)
    4a38:	fba3 3000 	umull	r3, r0, r3, r0
    4a3c:	f340 1000 	sbfx	r0, r0, #4, #1
    4a40:	b2c0      	uxtb	r0, r0
    4a42:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    4a44:	8880      	ldrh	r0, [r0, #4]
    4a46:	2864      	cmp	r0, #100	; 0x64
    4a48:	bf8c      	ite	hi
    4a4a:	20ff      	movhi	r0, #255	; 0xff
    4a4c:	2000      	movls	r0, #0
    4a4e:	4770      	bx	lr
    4a50:	10624dd3 	.word	0x10624dd3

00004a54 <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    4a54:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    4a56:	2401      	movs	r4, #1
    4a58:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    4a5a:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    4a5c:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    4a5e:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    4a60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    4a64:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    4a66:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4a6a:	7183      	strb	r3, [r0, #6]
	
}
    4a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4a70:	4770      	bx	lr

00004a72 <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    4a72:	7840      	ldrb	r0, [r0, #1]
    4a74:	4770      	bx	lr

00004a76 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    4a76:	7880      	ldrb	r0, [r0, #2]
    4a78:	4770      	bx	lr

00004a7a <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    4a7a:	78c0      	ldrb	r0, [r0, #3]
    4a7c:	4770      	bx	lr

00004a7e <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    4a7e:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    4a80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4a84:	b2d8      	uxtb	r0, r3
    4a86:	2809      	cmp	r0, #9
    4a88:	d90d      	bls.n	4aa6 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    4a8a:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    4a8e:	b2db      	uxtb	r3, r3
    4a90:	2b05      	cmp	r3, #5
    4a92:	d903      	bls.n	4a9c <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    4a94:	b131      	cbz	r1, 4aa4 <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    4a96:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    4a98:	2000      	movs	r0, #0
    4a9a:	4770      	bx	lr
		result = ascii - 97 + 10;
    4a9c:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    4aa0:	b2c0      	uxtb	r0, r0
    4aa2:	4770      	bx	lr
	uint8_t result = 0;
    4aa4:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    4aa6:	4770      	bx	lr

00004aa8 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    4aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    4aac:	b1c1      	cbz	r1, 4ae0 <grid_sys_read_hex_string_value+0x38>
    4aae:	4690      	mov	r8, r2
    4ab0:	1e45      	subs	r5, r0, #1
    4ab2:	1e4b      	subs	r3, r1, #1
    4ab4:	009c      	lsls	r4, r3, #2
    4ab6:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    4aba:	3f02      	subs	r7, #2
    4abc:	b2db      	uxtb	r3, r3
    4abe:	1aff      	subs	r7, r7, r3
    4ac0:	00bf      	lsls	r7, r7, #2
    4ac2:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    4ac4:	f8df 901c 	ldr.w	r9, [pc, #28]	; 4ae4 <grid_sys_read_hex_string_value+0x3c>
    4ac8:	4641      	mov	r1, r8
    4aca:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    4ace:	47c8      	blx	r9
    4ad0:	40a0      	lsls	r0, r4
    4ad2:	4406      	add	r6, r0
    4ad4:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    4ad6:	42bc      	cmp	r4, r7
    4ad8:	d1f6      	bne.n	4ac8 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    4ada:	4630      	mov	r0, r6
    4adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    4ae0:	2600      	movs	r6, #0
	return result;
    4ae2:	e7fa      	b.n	4ada <grid_sys_read_hex_string_value+0x32>
    4ae4:	00004a7f 	.word	0x00004a7f

00004ae8 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    4ae8:	b530      	push	{r4, r5, lr}
    4aea:	b085      	sub	sp, #20
    4aec:	4605      	mov	r5, r0
    4aee:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    4af0:	4909      	ldr	r1, [pc, #36]	; (4b18 <grid_sys_write_hex_string_value+0x30>)
    4af2:	a801      	add	r0, sp, #4
    4af4:	4b09      	ldr	r3, [pc, #36]	; (4b1c <grid_sys_write_hex_string_value+0x34>)
    4af6:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    4af8:	b164      	cbz	r4, 4b14 <grid_sys_write_hex_string_value+0x2c>
    4afa:	ab04      	add	r3, sp, #16
    4afc:	1b1a      	subs	r2, r3, r4
    4afe:	3a05      	subs	r2, #5
    4b00:	1e6b      	subs	r3, r5, #1
    4b02:	1e60      	subs	r0, r4, #1
    4b04:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    4b08:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    4b0c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    4b10:	4283      	cmp	r3, r0
    4b12:	d1f9      	bne.n	4b08 <grid_sys_write_hex_string_value+0x20>
	}

}
    4b14:	b005      	add	sp, #20
    4b16:	bd30      	pop	{r4, r5, pc}
    4b18:	0000edf8 	.word	0x0000edf8
    4b1c:	0000d835 	.word	0x0000d835

00004b20 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    4b20:	4b34      	ldr	r3, [pc, #208]	; (4bf4 <grid_sys_get_hwcfg+0xd4>)
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	f1b3 3fff 	cmp.w	r3, #4294967295
    4b28:	d002      	beq.n	4b30 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    4b2a:	4b32      	ldr	r3, [pc, #200]	; (4bf4 <grid_sys_get_hwcfg+0xd4>)
    4b2c:	6818      	ldr	r0, [r3, #0]
    4b2e:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    4b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b34:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4b36:	4b30      	ldr	r3, [pc, #192]	; (4bf8 <grid_sys_get_hwcfg+0xd8>)
    4b38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    4b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4b40:	492e      	ldr	r1, [pc, #184]	; (4bfc <grid_sys_get_hwcfg+0xdc>)
    4b42:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4b46:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    4b4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4b4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4b52:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4b56:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    4b5a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    4b5e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4b62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4b66:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4b6a:	4925      	ldr	r1, [pc, #148]	; (4c00 <grid_sys_get_hwcfg+0xe0>)
    4b6c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4b70:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    4b74:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4b78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    4b7c:	2001      	movs	r0, #1
    4b7e:	4b21      	ldr	r3, [pc, #132]	; (4c04 <grid_sys_get_hwcfg+0xe4>)
    4b80:	4798      	blx	r3
    4b82:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    4b84:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4b86:	4d1c      	ldr	r5, [pc, #112]	; (4bf8 <grid_sys_get_hwcfg+0xd8>)
    4b88:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    4b8c:	4f1d      	ldr	r7, [pc, #116]	; (4c04 <grid_sys_get_hwcfg+0xe4>)
    4b8e:	e00c      	b.n	4baa <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    4b90:	2e07      	cmp	r6, #7
    4b92:	d027      	beq.n	4be4 <grid_sys_get_hwcfg+0xc4>
    4b94:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    4b98:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    4b9c:	2001      	movs	r0, #1
    4b9e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4ba0:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    4ba4:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    4ba6:	2e08      	cmp	r6, #8
    4ba8:	d01c      	beq.n	4be4 <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4baa:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    4bae:	2001      	movs	r0, #1
    4bb0:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    4bb2:	a801      	add	r0, sp, #4
    4bb4:	4b14      	ldr	r3, [pc, #80]	; (4c08 <grid_sys_get_hwcfg+0xe8>)
    4bb6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4bb8:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4bbc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4bc0:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4bc4:	405c      	eors	r4, r3
    4bc6:	4014      	ands	r4, r2
    4bc8:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    4bca:	a801      	add	r0, sp, #4
    4bcc:	4b0f      	ldr	r3, [pc, #60]	; (4c0c <grid_sys_get_hwcfg+0xec>)
    4bce:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    4bd0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    4bd4:	d0dc      	beq.n	4b90 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    4bd6:	2301      	movs	r3, #1
    4bd8:	40b3      	lsls	r3, r6
    4bda:	ea43 0808 	orr.w	r8, r3, r8
    4bde:	fa5f f888 	uxtb.w	r8, r8
    4be2:	e7d5      	b.n	4b90 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    4be4:	4b03      	ldr	r3, [pc, #12]	; (4bf4 <grid_sys_get_hwcfg+0xd4>)
    4be6:	f8c3 8000 	str.w	r8, [r3]
}
    4bea:	4b02      	ldr	r3, [pc, #8]	; (4bf4 <grid_sys_get_hwcfg+0xd4>)
    4bec:	6818      	ldr	r0, [r3, #0]
    4bee:	b003      	add	sp, #12
    4bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4bf4:	20000344 	.word	0x20000344
    4bf8:	41008000 	.word	0x41008000
    4bfc:	40002000 	.word	0x40002000
    4c00:	40028000 	.word	0x40028000
    4c04:	00005cfd 	.word	0x00005cfd
    4c08:	00005c7d 	.word	0x00005c7d
    4c0c:	00005c8b 	.word	0x00005c8b

00004c10 <grid_msg_checksum_calculate>:
}

uint8_t grid_msg_checksum_calculate(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    4c10:	2903      	cmp	r1, #3
    4c12:	d009      	beq.n	4c28 <grid_msg_checksum_calculate+0x18>
    4c14:	1e43      	subs	r3, r0, #1
    4c16:	3904      	subs	r1, #4
    4c18:	4401      	add	r1, r0
    4c1a:	2000      	movs	r0, #0
		checksum ^= str[i];
    4c1c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4c20:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    4c22:	428b      	cmp	r3, r1
    4c24:	d1fa      	bne.n	4c1c <grid_msg_checksum_calculate+0xc>
    4c26:	4770      	bx	lr
	uint8_t checksum = 0;
    4c28:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    4c2a:	4770      	bx	lr

00004c2c <grid_msg_checksum_read>:

uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    4c2c:	b500      	push	{lr}
    4c2e:	b083      	sub	sp, #12
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    4c30:	1ecb      	subs	r3, r1, #3
    4c32:	f10d 0207 	add.w	r2, sp, #7
    4c36:	2102      	movs	r1, #2
    4c38:	4418      	add	r0, r3
    4c3a:	4b03      	ldr	r3, [pc, #12]	; (4c48 <grid_msg_checksum_read+0x1c>)
    4c3c:	4798      	blx	r3
}
    4c3e:	b2c0      	uxtb	r0, r0
    4c40:	b003      	add	sp, #12
    4c42:	f85d fb04 	ldr.w	pc, [sp], #4
    4c46:	bf00      	nop
    4c48:	00004aa9 	.word	0x00004aa9

00004c4c <grid_msg_checksum_write>:

void grid_msg_checksum_write(uint8_t* message, uint32_t length, uint8_t checksum){
    4c4c:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    4c4e:	1ecb      	subs	r3, r1, #3
    4c50:	2102      	movs	r1, #2
    4c52:	4418      	add	r0, r3
    4c54:	4b01      	ldr	r3, [pc, #4]	; (4c5c <grid_msg_checksum_write+0x10>)
    4c56:	4798      	blx	r3
    4c58:	bd08      	pop	{r3, pc}
    4c5a:	bf00      	nop
    4c5c:	00004ae9 	.word	0x00004ae9

00004c60 <grid_sys_store_bank_settings>:
void grid_sys_store_bank_settings(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    4c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c64:	b087      	sub	sp, #28
    4c66:	4607      	mov	r7, r0
    4c68:	4689      	mov	r9, r1
	grid_nvm_clear_write_buffer(nvm);
    4c6a:	4608      	mov	r0, r1
    4c6c:	4b57      	ldr	r3, [pc, #348]	; (4dcc <grid_sys_store_bank_settings+0x16c>)
    4c6e:	4798      	blx	r3
	uint8_t* message = nvm->write_buffer;
    4c70:	f509 7a06 	add.w	sl, r9, #536	; 0x218
	nvm->write_buffer_status = GRID_NVM_BUFFER_STATUS_DIRTY;
    4c74:	2303      	movs	r3, #3
    4c76:	f889 341c 	strb.w	r3, [r9, #1052]	; 0x41c
	sprintf(&message[offset], GRID_BRC_frame);
    4c7a:	2317      	movs	r3, #23
    4c7c:	9300      	str	r3, [sp, #0]
    4c7e:	230f      	movs	r3, #15
    4c80:	2201      	movs	r2, #1
    4c82:	4953      	ldr	r1, [pc, #332]	; (4dd0 <grid_sys_store_bank_settings+0x170>)
    4c84:	4650      	mov	r0, sl
    4c86:	4c53      	ldr	r4, [pc, #332]	; (4dd4 <grid_sys_store_bank_settings+0x174>)
    4c88:	47a0      	blx	r4
	return grid_sys_read_hex_string_value(&message[offset], length, error);	
}

uint32_t grid_msg_set_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint32_t value, uint8_t* error){
	
	grid_sys_write_hex_string_value(&message[offset], length, value);
    4c8a:	f209 231a 	addw	r3, r9, #538	; 0x21a
    4c8e:	9304      	str	r3, [sp, #16]
    4c90:	2200      	movs	r2, #0
    4c92:	2102      	movs	r1, #2
    4c94:	4618      	mov	r0, r3
    4c96:	4c50      	ldr	r4, [pc, #320]	; (4dd8 <grid_sys_store_bank_settings+0x178>)
    4c98:	47a0      	blx	r4
    4c9a:	2200      	movs	r2, #0
    4c9c:	2102      	movs	r1, #2
    4c9e:	f509 7007 	add.w	r0, r9, #540	; 0x21c
    4ca2:	47a0      	blx	r4
    4ca4:	22ff      	movs	r2, #255	; 0xff
    4ca6:	2102      	movs	r1, #2
    4ca8:	f209 201e 	addw	r0, r9, #542	; 0x21e
    4cac:	47a0      	blx	r4
    4cae:	22ff      	movs	r2, #255	; 0xff
    4cb0:	2102      	movs	r1, #2
    4cb2:	f509 7008 	add.w	r0, r9, #544	; 0x220
    4cb6:	47a0      	blx	r4
    4cb8:	2200      	movs	r2, #0
    4cba:	2102      	movs	r1, #2
    4cbc:	f209 2022 	addw	r0, r9, #546	; 0x222
    4cc0:	47a0      	blx	r4
    4cc2:	2200      	movs	r2, #0
    4cc4:	2102      	movs	r1, #2
    4cc6:	f509 7009 	add.w	r0, r9, #548	; 0x224
    4cca:	47a0      	blx	r4
	offset += strlen(&message[offset]);	
    4ccc:	4650      	mov	r0, sl
    4cce:	4b43      	ldr	r3, [pc, #268]	; (4ddc <grid_sys_store_bank_settings+0x17c>)
    4cd0:	4798      	blx	r3
    4cd2:	370d      	adds	r7, #13
    4cd4:	4605      	mov	r5, r0
    4cd6:	f04f 0800 	mov.w	r8, #0
		sprintf(&message[offset], GRID_CLASS_BANKENABLED_frame);
    4cda:	f8cd 9014 	str.w	r9, [sp, #20]
    4cde:	eb0a 0605 	add.w	r6, sl, r5
    4ce2:	f04f 0b03 	mov.w	fp, #3
    4ce6:	f8cd b000 	str.w	fp, [sp]
    4cea:	2331      	movs	r3, #49	; 0x31
    4cec:	2202      	movs	r2, #2
    4cee:	493c      	ldr	r1, [pc, #240]	; (4de0 <grid_sys_store_bank_settings+0x180>)
    4cf0:	4630      	mov	r0, r6
    4cf2:	4c38      	ldr	r4, [pc, #224]	; (4dd4 <grid_sys_store_bank_settings+0x174>)
    4cf4:	47a0      	blx	r4
	grid_sys_write_hex_string_value(&message[offset], length, value);
    4cf6:	220f      	movs	r2, #15
    4cf8:	2101      	movs	r1, #1
    4cfa:	1d30      	adds	r0, r6, #4
    4cfc:	4c36      	ldr	r4, [pc, #216]	; (4dd8 <grid_sys_store_bank_settings+0x178>)
    4cfe:	47a0      	blx	r4
    4d00:	4642      	mov	r2, r8
    4d02:	2102      	movs	r1, #2
    4d04:	1d70      	adds	r0, r6, #5
    4d06:	47a0      	blx	r4
    4d08:	f817 2b01 	ldrb.w	r2, [r7], #1
    4d0c:	2102      	movs	r1, #2
    4d0e:	1df0      	adds	r0, r6, #7
    4d10:	47a0      	blx	r4
		offset += strlen(&message[offset]);
    4d12:	4630      	mov	r0, r6
    4d14:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 4ddc <grid_sys_store_bank_settings+0x17c>
    4d18:	47c8      	blx	r9
    4d1a:	182b      	adds	r3, r5, r0
		sprintf(&message[offset], GRID_CLASS_BANKCOLOR_frame);
    4d1c:	9303      	str	r3, [sp, #12]
    4d1e:	eb0a 0603 	add.w	r6, sl, r3
    4d22:	f8cd b000 	str.w	fp, [sp]
    4d26:	2332      	movs	r3, #50	; 0x32
    4d28:	2202      	movs	r2, #2
    4d2a:	492e      	ldr	r1, [pc, #184]	; (4de4 <grid_sys_store_bank_settings+0x184>)
    4d2c:	4630      	mov	r0, r6
    4d2e:	4d29      	ldr	r5, [pc, #164]	; (4dd4 <grid_sys_store_bank_settings+0x174>)
    4d30:	47a8      	blx	r5
	grid_sys_write_hex_string_value(&message[offset], length, value);
    4d32:	220f      	movs	r2, #15
    4d34:	2101      	movs	r1, #1
    4d36:	1d30      	adds	r0, r6, #4
    4d38:	47a0      	blx	r4
    4d3a:	4642      	mov	r2, r8
    4d3c:	2102      	movs	r1, #2
    4d3e:	1d70      	adds	r0, r6, #5
    4d40:	47a0      	blx	r4
    4d42:	78fa      	ldrb	r2, [r7, #3]
    4d44:	2102      	movs	r1, #2
    4d46:	1df0      	adds	r0, r6, #7
    4d48:	47a0      	blx	r4
    4d4a:	79fa      	ldrb	r2, [r7, #7]
    4d4c:	2102      	movs	r1, #2
    4d4e:	f106 0009 	add.w	r0, r6, #9
    4d52:	47a0      	blx	r4
    4d54:	7afa      	ldrb	r2, [r7, #11]
    4d56:	2102      	movs	r1, #2
    4d58:	f106 000b 	add.w	r0, r6, #11
    4d5c:	47a0      	blx	r4
		offset += strlen(&message[offset]);
    4d5e:	4630      	mov	r0, r6
    4d60:	47c8      	blx	r9
    4d62:	9b03      	ldr	r3, [sp, #12]
    4d64:	4403      	add	r3, r0
    4d66:	461d      	mov	r5, r3
    4d68:	f108 0801 	add.w	r8, r8, #1
	for(uint8_t i=0; i<4; i++){
    4d6c:	f1b8 0f04 	cmp.w	r8, #4
    4d70:	d1b5      	bne.n	4cde <grid_sys_store_bank_settings+0x7e>
    4d72:	f8dd 9014 	ldr.w	r9, [sp, #20]
	grid_sys_write_hex_string_value(&message[offset], length, value);
    4d76:	1c5a      	adds	r2, r3, #1
    4d78:	2102      	movs	r1, #2
    4d7a:	9804      	ldr	r0, [sp, #16]
    4d7c:	47a0      	blx	r4
	sprintf(&message[offset], "%c..\n", GRID_CONST_EOT);
    4d7e:	eb0a 0405 	add.w	r4, sl, r5
    4d82:	2204      	movs	r2, #4
    4d84:	4918      	ldr	r1, [pc, #96]	; (4de8 <grid_sys_store_bank_settings+0x188>)
    4d86:	4620      	mov	r0, r4
    4d88:	4b12      	ldr	r3, [pc, #72]	; (4dd4 <grid_sys_store_bank_settings+0x174>)
    4d8a:	4798      	blx	r3
	offset += strlen(&message[offset]);
    4d8c:	4620      	mov	r0, r4
    4d8e:	4b13      	ldr	r3, [pc, #76]	; (4ddc <grid_sys_store_bank_settings+0x17c>)
    4d90:	4798      	blx	r3
    4d92:	4405      	add	r5, r0
	uint8_t checksum = grid_msg_checksum_calculate(message, offset);
    4d94:	4629      	mov	r1, r5
    4d96:	4650      	mov	r0, sl
    4d98:	4b14      	ldr	r3, [pc, #80]	; (4dec <grid_sys_store_bank_settings+0x18c>)
    4d9a:	4798      	blx	r3
	grid_msg_checksum_write(message, offset, checksum);
    4d9c:	4602      	mov	r2, r0
    4d9e:	4629      	mov	r1, r5
    4da0:	4650      	mov	r0, sl
    4da2:	4b13      	ldr	r3, [pc, #76]	; (4df0 <grid_sys_store_bank_settings+0x190>)
    4da4:	4798      	blx	r3
	nvm->write_target_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    4da6:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
    4daa:	f8c9 1420 	str.w	r1, [r9, #1056]	; 0x420
	nvm->write_buffer_length = offset;
    4dae:	f8c9 5418 	str.w	r5, [r9, #1048]	; 0x418
	nvm->write_buffer_status = GRID_NVM_BUFFER_STATUS_DONE;
    4db2:	2304      	movs	r3, #4
    4db4:	f889 341c 	strb.w	r3, [r9, #1052]	; 0x41c
	flash_write(nvm->flash, nvm->write_target_address, nvm->write_buffer, nvm->write_buffer_length);
    4db8:	462b      	mov	r3, r5
    4dba:	4652      	mov	r2, sl
    4dbc:	f8d9 0000 	ldr.w	r0, [r9]
    4dc0:	4c0c      	ldr	r4, [pc, #48]	; (4df4 <grid_sys_store_bank_settings+0x194>)
    4dc2:	47a0      	blx	r4
}
    4dc4:	b007      	add	sp, #28
    4dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4dca:	bf00      	nop
    4dcc:	000011c9 	.word	0x000011c9
    4dd0:	0000eeac 	.word	0x0000eeac
    4dd4:	0000d835 	.word	0x0000d835
    4dd8:	00004ae9 	.word	0x00004ae9
    4ddc:	0000d87d 	.word	0x0000d87d
    4de0:	0000eec0 	.word	0x0000eec0
    4de4:	0000eb84 	.word	0x0000eb84
    4de8:	0000eed0 	.word	0x0000eed0
    4dec:	00004c11 	.word	0x00004c11
    4df0:	00004c4d 	.word	0x00004c4d
    4df4:	00005e61 	.word	0x00005e61

00004df8 <grid_debug_print_text>:
void grid_debug_print_text(uint8_t* str){
    4df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4dfc:	b0d3      	sub	sp, #332	; 0x14c
    4dfe:	4606      	mov	r6, r0
	uint32_t len = strlen(str);
    4e00:	f8df 813c 	ldr.w	r8, [pc, #316]	; 4f40 <grid_debug_print_text+0x148>
    4e04:	47c0      	blx	r8
    4e06:	4605      	mov	r5, r0
	uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    4e08:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4e0c:	2100      	movs	r1, #0
    4e0e:	a802      	add	r0, sp, #8
    4e10:	4b46      	ldr	r3, [pc, #280]	; (4f2c <grid_debug_print_text+0x134>)
    4e12:	4798      	blx	r3
	sprintf(&message[offset], GRID_BRC_frame);
    4e14:	2317      	movs	r3, #23
    4e16:	9300      	str	r3, [sp, #0]
    4e18:	230f      	movs	r3, #15
    4e1a:	2201      	movs	r2, #1
    4e1c:	4944      	ldr	r1, [pc, #272]	; (4f30 <grid_debug_print_text+0x138>)
    4e1e:	a802      	add	r0, sp, #8
    4e20:	f8df 9124 	ldr.w	r9, [pc, #292]	; 4f48 <grid_debug_print_text+0x150>
    4e24:	47c8      	blx	r9
	grid_sys_write_hex_string_value(&message[offset], length, value);
    4e26:	2200      	movs	r2, #0
    4e28:	2102      	movs	r1, #2
    4e2a:	f10d 000a 	add.w	r0, sp, #10
    4e2e:	4c41      	ldr	r4, [pc, #260]	; (4f34 <grid_debug_print_text+0x13c>)
    4e30:	47a0      	blx	r4
	grid_msg_set_parameter(&message[offset], GRID_BRC_ID_offset,  GRID_BRC_ID_length, grid_sys_state.next_broadcast_message_id, &error); // don't know
    4e32:	4f41      	ldr	r7, [pc, #260]	; (4f38 <grid_debug_print_text+0x140>)
    4e34:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
	grid_sys_write_hex_string_value(&message[offset], length, value);
    4e38:	2102      	movs	r1, #2
    4e3a:	a803      	add	r0, sp, #12
    4e3c:	47a0      	blx	r4
    4e3e:	227f      	movs	r2, #127	; 0x7f
    4e40:	2102      	movs	r1, #2
    4e42:	f10d 000e 	add.w	r0, sp, #14
    4e46:	47a0      	blx	r4
    4e48:	227f      	movs	r2, #127	; 0x7f
    4e4a:	2102      	movs	r1, #2
    4e4c:	a804      	add	r0, sp, #16
    4e4e:	47a0      	blx	r4
    4e50:	2200      	movs	r2, #0
    4e52:	2102      	movs	r1, #2
    4e54:	f10d 0012 	add.w	r0, sp, #18
    4e58:	47a0      	blx	r4
    4e5a:	2200      	movs	r2, #0
    4e5c:	2102      	movs	r1, #2
    4e5e:	a805      	add	r0, sp, #20
    4e60:	47a0      	blx	r4
	offset += strlen(&message[offset]);
    4e62:	a802      	add	r0, sp, #8
    4e64:	47c0      	blx	r8
    4e66:	4604      	mov	r4, r0
	grid_sys_state.next_broadcast_message_id++;
    4e68:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    4e6c:	3301      	adds	r3, #1
    4e6e:	b2db      	uxtb	r3, r3
    4e70:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	sprintf(&message[offset], GRID_CLASS_DEBUGTEXT_frame_start);
    4e74:	ab02      	add	r3, sp, #8
    4e76:	181f      	adds	r7, r3, r0
    4e78:	2390      	movs	r3, #144	; 0x90
    4e7a:	2202      	movs	r2, #2
    4e7c:	492f      	ldr	r1, [pc, #188]	; (4f3c <grid_debug_print_text+0x144>)
    4e7e:	4638      	mov	r0, r7
    4e80:	47c8      	blx	r9
	offset += strlen(&message[offset]);
    4e82:	4638      	mov	r0, r7
    4e84:	47c0      	blx	r8
    4e86:	4404      	add	r4, r0
	for(uint8_t i=0; i<len; i++){
    4e88:	b17d      	cbz	r5, 4eaa <grid_debug_print_text+0xb2>
		message[offset+i] = str[i];
    4e8a:	7832      	ldrb	r2, [r6, #0]
    4e8c:	ab02      	add	r3, sp, #8
    4e8e:	551a      	strb	r2, [r3, r4]
		if (offset + i > GRID_PARAMETER_PACKET_marign)
    4e90:	2cc8      	cmp	r4, #200	; 0xc8
    4e92:	d80a      	bhi.n	4eaa <grid_debug_print_text+0xb2>
    4e94:	2300      	movs	r3, #0
		message[offset+i] = str[i];
    4e96:	a802      	add	r0, sp, #8
	for(uint8_t i=0; i<len; i++){
    4e98:	3301      	adds	r3, #1
    4e9a:	b2db      	uxtb	r3, r3
    4e9c:	429d      	cmp	r5, r3
    4e9e:	d904      	bls.n	4eaa <grid_debug_print_text+0xb2>
		message[offset+i] = str[i];
    4ea0:	18e2      	adds	r2, r4, r3
    4ea2:	5cf1      	ldrb	r1, [r6, r3]
    4ea4:	5481      	strb	r1, [r0, r2]
		if (offset + i > GRID_PARAMETER_PACKET_marign)
    4ea6:	2ac8      	cmp	r2, #200	; 0xc8
    4ea8:	d9f6      	bls.n	4e98 <grid_debug_print_text+0xa0>
	offset += strlen(&message[offset]);
    4eaa:	ab02      	add	r3, sp, #8
    4eac:	1918      	adds	r0, r3, r4
    4eae:	4e24      	ldr	r6, [pc, #144]	; (4f40 <grid_debug_print_text+0x148>)
    4eb0:	47b0      	blx	r6
    4eb2:	1825      	adds	r5, r4, r0
	sprintf(&message[offset], GRID_CLASS_DEBUGTEXT_frame_end);
    4eb4:	ab02      	add	r3, sp, #8
    4eb6:	195c      	adds	r4, r3, r5
    4eb8:	2203      	movs	r2, #3
    4eba:	4922      	ldr	r1, [pc, #136]	; (4f44 <grid_debug_print_text+0x14c>)
    4ebc:	4620      	mov	r0, r4
    4ebe:	4f22      	ldr	r7, [pc, #136]	; (4f48 <grid_debug_print_text+0x150>)
    4ec0:	47b8      	blx	r7
	offset += strlen(&message[offset]);
    4ec2:	4620      	mov	r0, r4
    4ec4:	47b0      	blx	r6
    4ec6:	4405      	add	r5, r0
	grid_sys_write_hex_string_value(&message[offset], length, value);
    4ec8:	1c6a      	adds	r2, r5, #1
    4eca:	2102      	movs	r1, #2
    4ecc:	f10d 000a 	add.w	r0, sp, #10
    4ed0:	4b18      	ldr	r3, [pc, #96]	; (4f34 <grid_debug_print_text+0x13c>)
    4ed2:	4798      	blx	r3
	sprintf(&message[offset], "%c..\n", GRID_CONST_EOT);
    4ed4:	ab02      	add	r3, sp, #8
    4ed6:	195c      	adds	r4, r3, r5
    4ed8:	2204      	movs	r2, #4
    4eda:	491c      	ldr	r1, [pc, #112]	; (4f4c <grid_debug_print_text+0x154>)
    4edc:	4620      	mov	r0, r4
    4ede:	47b8      	blx	r7
	offset += strlen(&message[offset]);
    4ee0:	4620      	mov	r0, r4
    4ee2:	47b0      	blx	r6
    4ee4:	4405      	add	r5, r0
	uint8_t checksum = grid_msg_checksum_calculate(message, offset);
    4ee6:	4629      	mov	r1, r5
    4ee8:	a802      	add	r0, sp, #8
    4eea:	4b19      	ldr	r3, [pc, #100]	; (4f50 <grid_debug_print_text+0x158>)
    4eec:	4798      	blx	r3
	grid_msg_checksum_write(message, offset, checksum);
    4eee:	4602      	mov	r2, r0
    4ef0:	4629      	mov	r1, r5
    4ef2:	a802      	add	r0, sp, #8
    4ef4:	4b17      	ldr	r3, [pc, #92]	; (4f54 <grid_debug_print_text+0x15c>)
    4ef6:	4798      	blx	r3
	if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, offset)){
    4ef8:	b2a9      	uxth	r1, r5
    4efa:	4817      	ldr	r0, [pc, #92]	; (4f58 <grid_debug_print_text+0x160>)
    4efc:	4b17      	ldr	r3, [pc, #92]	; (4f5c <grid_debug_print_text+0x164>)
    4efe:	4798      	blx	r3
    4f00:	b180      	cbz	r0, 4f24 <grid_debug_print_text+0x12c>
		for(uint16_t i = 0; i<offset; i++){
    4f02:	b165      	cbz	r5, 4f1e <grid_debug_print_text+0x126>
    4f04:	2400      	movs	r4, #0
			grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    4f06:	f10d 0808 	add.w	r8, sp, #8
    4f0a:	4f13      	ldr	r7, [pc, #76]	; (4f58 <grid_debug_print_text+0x160>)
    4f0c:	4e14      	ldr	r6, [pc, #80]	; (4f60 <grid_debug_print_text+0x168>)
    4f0e:	f818 1004 	ldrb.w	r1, [r8, r4]
    4f12:	4638      	mov	r0, r7
    4f14:	47b0      	blx	r6
		for(uint16_t i = 0; i<offset; i++){
    4f16:	3401      	adds	r4, #1
    4f18:	b2a4      	uxth	r4, r4
    4f1a:	42a5      	cmp	r5, r4
    4f1c:	d8f7      	bhi.n	4f0e <grid_debug_print_text+0x116>
		grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    4f1e:	480e      	ldr	r0, [pc, #56]	; (4f58 <grid_debug_print_text+0x160>)
    4f20:	4b10      	ldr	r3, [pc, #64]	; (4f64 <grid_debug_print_text+0x16c>)
    4f22:	4798      	blx	r3
}
    4f24:	b053      	add	sp, #332	; 0x14c
    4f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4f2a:	bf00      	nop
    4f2c:	0000d447 	.word	0x0000d447
    4f30:	0000eeac 	.word	0x0000eeac
    4f34:	00004ae9 	.word	0x00004ae9
    4f38:	200032f8 	.word	0x200032f8
    4f3c:	0000eed8 	.word	0x0000eed8
    4f40:	0000d87d 	.word	0x0000d87d
    4f44:	0000eebc 	.word	0x0000eebc
    4f48:	0000d835 	.word	0x0000d835
    4f4c:	0000eed0 	.word	0x0000eed0
    4f50:	00004c11 	.word	0x00004c11
    4f54:	00004c4d 	.word	0x00004c4d
    4f58:	200032b4 	.word	0x200032b4
    4f5c:	0000166d 	.word	0x0000166d
    4f60:	0000169d 	.word	0x0000169d
    4f64:	000016b9 	.word	0x000016b9

00004f68 <grid_msg_get_parameter>:
uint32_t grid_msg_get_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint8_t* error){
    4f68:	b510      	push	{r4, lr}
    4f6a:	4614      	mov	r4, r2
	return grid_sys_read_hex_string_value(&message[offset], length, error);	
    4f6c:	4408      	add	r0, r1
    4f6e:	461a      	mov	r2, r3
    4f70:	4621      	mov	r1, r4
    4f72:	4b01      	ldr	r3, [pc, #4]	; (4f78 <grid_msg_get_parameter+0x10>)
    4f74:	4798      	blx	r3
}
    4f76:	bd10      	pop	{r4, pc}
    4f78:	00004aa9 	.word	0x00004aa9

00004f7c <grid_msg_set_parameter>:
uint32_t grid_msg_set_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint32_t value, uint8_t* error){
    4f7c:	b510      	push	{r4, lr}
    4f7e:	4614      	mov	r4, r2
	grid_sys_write_hex_string_value(&message[offset], length, value);
    4f80:	4408      	add	r0, r1
    4f82:	461a      	mov	r2, r3
    4f84:	4621      	mov	r1, r4
    4f86:	4b01      	ldr	r3, [pc, #4]	; (4f8c <grid_msg_set_parameter+0x10>)
    4f88:	4798      	blx	r3
	
}
    4f8a:	bd10      	pop	{r4, pc}
    4f8c:	00004ae9 	.word	0x00004ae9

00004f90 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    4f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4f92:	4299      	cmp	r1, r3
    4f94:	d00d      	beq.n	4fb2 <grid_msg_find_recent+0x22>
    4f96:	2301      	movs	r3, #1
    4f98:	f003 021f 	and.w	r2, r3, #31
    4f9c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4fa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4fa2:	428a      	cmp	r2, r1
    4fa4:	d007      	beq.n	4fb6 <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    4fa6:	3301      	adds	r3, #1
    4fa8:	b2db      	uxtb	r3, r3
    4faa:	2b20      	cmp	r3, #32
    4fac:	d1f4      	bne.n	4f98 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    4fae:	2000      	movs	r0, #0
    4fb0:	4770      	bx	lr
			return 1;
    4fb2:	2001      	movs	r0, #1
    4fb4:	4770      	bx	lr
    4fb6:	2001      	movs	r0, #1
}
    4fb8:	4770      	bx	lr

00004fba <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    4fba:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    4fbe:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    4fc0:	f003 031f 	and.w	r3, r3, #31
    4fc4:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    4fc8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4fcc:	6241      	str	r1, [r0, #36]	; 0x24
    4fce:	4770      	bx	lr

00004fd0 <grid_ui_model_init>:
	}
	
}


void grid_ui_model_init(struct grid_ui_model* mod, uint8_t element_list_length){
    4fd0:	b538      	push	{r3, r4, r5, lr}
    4fd2:	4604      	mov	r4, r0
    4fd4:	460d      	mov	r5, r1
	
	mod->status = GRID_UI_STATUS_INITIALIZED;
    4fd6:	2301      	movs	r3, #1
    4fd8:	7003      	strb	r3, [r0, #0]
	
	mod->element_list_length = element_list_length;	
    4fda:	7041      	strb	r1, [r0, #1]
	mod->element = malloc(mod->element_list_length*sizeof(struct grid_ui_element));
    4fdc:	202c      	movs	r0, #44	; 0x2c
    4fde:	fb00 f001 	mul.w	r0, r0, r1
    4fe2:	4b0a      	ldr	r3, [pc, #40]	; (500c <grid_ui_model_init+0x3c>)
    4fe4:	4798      	blx	r3
    4fe6:	6060      	str	r0, [r4, #4]
	
	for(uint8_t i=0; i<element_list_length; i++){
    4fe8:	b17d      	cbz	r5, 500a <grid_ui_model_init+0x3a>
    4fea:	3d01      	subs	r5, #1
    4fec:	b2ed      	uxtb	r5, r5
    4fee:	202c      	movs	r0, #44	; 0x2c
    4ff0:	fb05 0000 	mla	r0, r5, r0, r0
    4ff4:	2300      	movs	r3, #0
		
		mod->element[i].status = GRID_UI_STATUS_UNDEFINED;		
    4ff6:	4619      	mov	r1, r3
    4ff8:	6862      	ldr	r2, [r4, #4]
    4ffa:	54d1      	strb	r1, [r2, r3]
		mod->element[i].event_list_length = 0;
    4ffc:	6862      	ldr	r2, [r4, #4]
    4ffe:	441a      	add	r2, r3
    5000:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    5004:	332c      	adds	r3, #44	; 0x2c
	for(uint8_t i=0; i<element_list_length; i++){
    5006:	4283      	cmp	r3, r0
    5008:	d1f6      	bne.n	4ff8 <grid_ui_model_init+0x28>
    500a:	bd38      	pop	{r3, r4, r5, pc}
    500c:	0000d421 	.word	0x0000d421

00005010 <grid_ui_event_init>:
		
	}
	
}

void grid_ui_event_init(struct grid_ui_event* eve, enum grid_ui_event_t event_type){
    5010:	b538      	push	{r3, r4, r5, lr}
    5012:	4604      	mov	r4, r0
	
	eve->status = GRID_UI_STATUS_INITIALIZED;
    5014:	2301      	movs	r3, #1
    5016:	7003      	strb	r3, [r0, #0]
	
	eve->type   = event_type;	
    5018:	7081      	strb	r1, [r0, #2]
	eve->status = GRID_UI_EVENT_STATUS_READY;

	eve->action_string = malloc(GRID_UI_ACTION_STRING_LENGTH*sizeof(uint8_t));
    501a:	2078      	movs	r0, #120	; 0x78
    501c:	4b10      	ldr	r3, [pc, #64]	; (5060 <grid_ui_event_init+0x50>)
    501e:	4798      	blx	r3
    5020:	60e0      	str	r0, [r4, #12]
	
	for (uint32_t i=0; i<GRID_UI_ACTION_STRING_LENGTH; i++){
    5022:	2300      	movs	r3, #0
		eve->action_string[i] = 0;
    5024:	4619      	mov	r1, r3
    5026:	68e2      	ldr	r2, [r4, #12]
    5028:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i=0; i<GRID_UI_ACTION_STRING_LENGTH; i++){
    502a:	3301      	adds	r3, #1
    502c:	2b78      	cmp	r3, #120	; 0x78
    502e:	d1fa      	bne.n	5026 <grid_ui_event_init+0x16>
	}	
	
	eve->action_length = 0;
    5030:	2500      	movs	r5, #0
    5032:	6065      	str	r5, [r4, #4]
	
	eve->action_parameter_count = 0;
    5034:	7425      	strb	r5, [r4, #16]
	
	eve->action_parameter_list = malloc(GRID_UI_ACTION_PARAMETER_COUNT*sizeof(struct grid_ui_action_parameter));
    5036:	2046      	movs	r0, #70	; 0x46
    5038:	4b09      	ldr	r3, [pc, #36]	; (5060 <grid_ui_event_init+0x50>)
    503a:	4798      	blx	r3
    503c:	6160      	str	r0, [r4, #20]
    503e:	462b      	mov	r3, r5

	for (uint32_t i=0; i<GRID_UI_ACTION_PARAMETER_COUNT; i++){
		eve->action_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    5040:	462a      	mov	r2, r5
    5042:	6961      	ldr	r1, [r4, #20]
    5044:	54ca      	strb	r2, [r1, r3]
		eve->action_parameter_list[i].address = 0;
    5046:	6961      	ldr	r1, [r4, #20]
    5048:	4419      	add	r1, r3
    504a:	708a      	strb	r2, [r1, #2]
		eve->action_parameter_list[i].offset = 0;
    504c:	6961      	ldr	r1, [r4, #20]
    504e:	4419      	add	r1, r3
    5050:	710a      	strb	r2, [r1, #4]
		eve->action_parameter_list[i].length = 0;
    5052:	6961      	ldr	r1, [r4, #20]
    5054:	4419      	add	r1, r3
    5056:	70ca      	strb	r2, [r1, #3]
    5058:	3305      	adds	r3, #5
	for (uint32_t i=0; i<GRID_UI_ACTION_PARAMETER_COUNT; i++){
    505a:	2b46      	cmp	r3, #70	; 0x46
    505c:	d1f1      	bne.n	5042 <grid_ui_event_init+0x32>
	}	
			
}
    505e:	bd38      	pop	{r3, r4, r5, pc}
    5060:	0000d421 	.word	0x0000d421

00005064 <grid_ui_element_init>:




void grid_ui_element_init(struct grid_ui_element* ele, enum grid_ui_element_t element_type){
    5064:	b570      	push	{r4, r5, r6, lr}
    5066:	4604      	mov	r4, r0

	ele->status = GRID_UI_STATUS_INITIALIZED;
    5068:	2301      	movs	r3, #1
    506a:	7003      	strb	r3, [r0, #0]
	
	ele->type = element_type;
    506c:	7041      	strb	r1, [r0, #1]
    506e:	1d03      	adds	r3, r0, #4
    5070:	3024      	adds	r0, #36	; 0x24
	
	// initialize all of the A template parameter values
	for(uint8_t i=0; i<GRID_TEMPLATE_A_PARAMETER_LIST_LENGTH; i++){
		ele->template_parameter_list[i] = 0;
    5072:	2200      	movs	r2, #0
    5074:	f843 2b04 	str.w	r2, [r3], #4
	for(uint8_t i=0; i<GRID_TEMPLATE_A_PARAMETER_LIST_LENGTH; i++){
    5078:	4283      	cmp	r3, r0
    507a:	d1fb      	bne.n	5074 <grid_ui_element_init+0x10>
	}

	
	if (element_type == GRID_UI_ELEMENT_SYSTEM){
    507c:	b131      	cbz	r1, 508c <grid_ui_element_init+0x28>
		grid_ui_event_init(&ele->event_list[3], GRID_UI_EVENT_MAPMODE_RELEASE); // Mapmode release
		grid_ui_event_init(&ele->event_list[4], GRID_UI_EVENT_CFG_RESPONSE); //
		grid_ui_event_init(&ele->event_list[5], GRID_UI_EVENT_CFG_REQUEST); //
		
	}
	else if (element_type == GRID_UI_ELEMENT_POTENTIOMETER){
    507e:	2901      	cmp	r1, #1
    5080:	d023      	beq.n	50ca <grid_ui_element_init+0x66>
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
		
					
	}
	else if (element_type == GRID_UI_ELEMENT_BUTTON){
    5082:	2902      	cmp	r1, #2
    5084:	d030      	beq.n	50e8 <grid_ui_element_init+0x84>
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_DP);	// Press
		grid_ui_event_init(&ele->event_list[2], GRID_UI_EVENT_DR);	// Release
		
	}
	else if (element_type == GRID_UI_ELEMENT_ENCODER){
    5086:	2903      	cmp	r1, #3
    5088:	d041      	beq.n	510e <grid_ui_element_init+0xaa>
    508a:	bd70      	pop	{r4, r5, r6, pc}
		ele->event_list_length = 6;
    508c:	2306      	movs	r3, #6
    508e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));	
    5092:	2090      	movs	r0, #144	; 0x90
    5094:	4b29      	ldr	r3, [pc, #164]	; (513c <grid_ui_element_init+0xd8>)
    5096:	4798      	blx	r3
    5098:	62a0      	str	r0, [r4, #40]	; 0x28
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
    509a:	2100      	movs	r1, #0
    509c:	4d28      	ldr	r5, [pc, #160]	; (5140 <grid_ui_element_init+0xdc>)
    509e:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_HEARTBEAT); // Heartbeat
    50a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50a2:	2101      	movs	r1, #1
    50a4:	3018      	adds	r0, #24
    50a6:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[2], GRID_UI_EVENT_MAPMODE_PRESS); // Mapmode press
    50a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50aa:	2108      	movs	r1, #8
    50ac:	3030      	adds	r0, #48	; 0x30
    50ae:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[3], GRID_UI_EVENT_MAPMODE_RELEASE); // Mapmode release
    50b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50b2:	2109      	movs	r1, #9
    50b4:	3048      	adds	r0, #72	; 0x48
    50b6:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[4], GRID_UI_EVENT_CFG_RESPONSE); //
    50b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50ba:	210a      	movs	r1, #10
    50bc:	3060      	adds	r0, #96	; 0x60
    50be:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[5], GRID_UI_EVENT_CFG_REQUEST); //
    50c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50c2:	210b      	movs	r1, #11
    50c4:	3078      	adds	r0, #120	; 0x78
    50c6:	47a8      	blx	r5
    50c8:	bd70      	pop	{r4, r5, r6, pc}
		ele->event_list_length = 2;
    50ca:	2602      	movs	r6, #2
    50cc:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    50d0:	2030      	movs	r0, #48	; 0x30
    50d2:	4b1a      	ldr	r3, [pc, #104]	; (513c <grid_ui_element_init+0xd8>)
    50d4:	4798      	blx	r3
    50d6:	62a0      	str	r0, [r4, #40]	; 0x28
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
    50d8:	2100      	movs	r1, #0
    50da:	4d19      	ldr	r5, [pc, #100]	; (5140 <grid_ui_element_init+0xdc>)
    50dc:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
    50de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50e0:	4631      	mov	r1, r6
    50e2:	3018      	adds	r0, #24
    50e4:	47a8      	blx	r5
    50e6:	bd70      	pop	{r4, r5, r6, pc}
		ele->event_list_length = 3;
    50e8:	2303      	movs	r3, #3
    50ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    50ee:	2048      	movs	r0, #72	; 0x48
    50f0:	4b12      	ldr	r3, [pc, #72]	; (513c <grid_ui_element_init+0xd8>)
    50f2:	4798      	blx	r3
    50f4:	62a0      	str	r0, [r4, #40]	; 0x28
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
    50f6:	2100      	movs	r1, #0
    50f8:	4d11      	ldr	r5, [pc, #68]	; (5140 <grid_ui_element_init+0xdc>)
    50fa:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_DP);	// Press
    50fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50fe:	2105      	movs	r1, #5
    5100:	3018      	adds	r0, #24
    5102:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[2], GRID_UI_EVENT_DR);	// Release
    5104:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5106:	2106      	movs	r1, #6
    5108:	3030      	adds	r0, #48	; 0x30
    510a:	47a8      	blx	r5
    510c:	bd70      	pop	{r4, r5, r6, pc}
		
		ele->event_list_length = 4;
    510e:	2304      	movs	r3, #4
    5110:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    5114:	2060      	movs	r0, #96	; 0x60
    5116:	4b09      	ldr	r3, [pc, #36]	; (513c <grid_ui_element_init+0xd8>)
    5118:	4798      	blx	r3
    511a:	62a0      	str	r0, [r4, #40]	; 0x28
		
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
    511c:	2100      	movs	r1, #0
    511e:	4d08      	ldr	r5, [pc, #32]	; (5140 <grid_ui_element_init+0xdc>)
    5120:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_DP);	// Press
    5122:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5124:	2105      	movs	r1, #5
    5126:	3018      	adds	r0, #24
    5128:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[2], GRID_UI_EVENT_DR);	// Release
    512a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    512c:	2106      	movs	r1, #6
    512e:	3030      	adds	r0, #48	; 0x30
    5130:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[3], GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
    5132:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5134:	2102      	movs	r1, #2
    5136:	3048      	adds	r0, #72	; 0x48
    5138:	47a8      	blx	r5
	}
	else{
		//UNKNOWN ELEMENT TYPE
	}	
		
}
    513a:	e7a6      	b.n	508a <grid_ui_element_init+0x26>
    513c:	0000d421 	.word	0x0000d421
    5140:	00005011 	.word	0x00005011

00005144 <grid_ui_event_register_action>:
void grid_ui_event_register_action(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* event_string, uint32_t event_string_length){
		
	
	uint8_t event_index = 255;
	
	for(uint8_t i=0; i<ele->event_list_length; i++){
    5144:	f890 c024 	ldrb.w	ip, [r0, #36]	; 0x24
    5148:	f1bc 0f00 	cmp.w	ip, #0
    514c:	f000 8099 	beq.w	5282 <grid_ui_event_register_action+0x13e>
void grid_ui_event_register_action(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* event_string, uint32_t event_string_length){
    5150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5154:	b093      	sub	sp, #76	; 0x4c
    5156:	6a85      	ldr	r5, [r0, #40]	; 0x28
		if (ele->event_list[i].type == event_type){
    5158:	2400      	movs	r4, #0
    515a:	26ff      	movs	r6, #255	; 0xff
    515c:	b2e7      	uxtb	r7, r4
    515e:	f895 e002 	ldrb.w	lr, [r5, #2]
    5162:	458e      	cmp	lr, r1
    5164:	bf08      	it	eq
    5166:	463e      	moveq	r6, r7
    5168:	3401      	adds	r4, #1
    516a:	3518      	adds	r5, #24
	for(uint8_t i=0; i<ele->event_list_length; i++){
    516c:	b2e7      	uxtb	r7, r4
    516e:	45bc      	cmp	ip, r7
    5170:	d8f4      	bhi.n	515c <grid_ui_event_register_action+0x18>
			event_index = i;
		}
	}
	
	if (event_index == 255){
    5172:	2eff      	cmp	r6, #255	; 0xff
    5174:	d079      	beq.n	526a <grid_ui_event_register_action+0x126>
	// TEMPLATE MAGIC COMING UP!
	
	uint8_t parameter_list_length = 0;
	struct grid_ui_action_parameter parameter_list[GRID_UI_ACTION_PARAMETER_COUNT];
	
	for (uint32_t i=0; i<event_string_length; i++){
    5176:	2b00      	cmp	r3, #0
    5178:	d07a      	beq.n	5270 <grid_ui_event_register_action+0x12c>
    517a:	4615      	mov	r5, r2
    517c:	2100      	movs	r1, #0
    517e:	460f      	mov	r7, r1
			parameter_list_length++;
	
		}
		else if (event_string[i] == 'B' && (event_string[i+1]-'0') < GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH){
			
			parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;		
    5180:	f04f 0c01 	mov.w	ip, #1
			
			parameter_list[parameter_list_length].group = event_string[i];
    5184:	f04f 0942 	mov.w	r9, #66	; 0x42
			
			parameter_list[parameter_list_length].address = (event_string[i+1]-'0');
			parameter_list[parameter_list_length].offset = i;
			parameter_list[parameter_list_length].length = 2;
    5188:	f04f 0e02 	mov.w	lr, #2
			parameter_list[parameter_list_length].group = event_string[i];
    518c:	f04f 0841 	mov.w	r8, #65	; 0x41
    5190:	e01b      	b.n	51ca <grid_ui_event_register_action+0x86>
		if (event_string[i] == 'A' && (event_string[i+1]-'0') < GRID_TEMPLATE_A_PARAMETER_LIST_LENGTH){
    5192:	f895 a000 	ldrb.w	sl, [r5]
    5196:	f1aa 0430 	sub.w	r4, sl, #48	; 0x30
    519a:	2c07      	cmp	r4, #7
    519c:	dc12      	bgt.n	51c4 <grid_ui_event_register_action+0x80>
			parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;
    519e:	eb07 0487 	add.w	r4, r7, r7, lsl #2
    51a2:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
    51a6:	445c      	add	r4, fp
    51a8:	f804 cc48 	strb.w	ip, [r4, #-72]
			parameter_list[parameter_list_length].group = event_string[i];
    51ac:	f804 8c47 	strb.w	r8, [r4, #-71]
			parameter_list[parameter_list_length].address = (event_string[i+1]-'0');
    51b0:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    51b4:	f804 ac46 	strb.w	sl, [r4, #-70]
			parameter_list[parameter_list_length].offset = i;
    51b8:	f804 1c44 	strb.w	r1, [r4, #-68]
			parameter_list[parameter_list_length].length = 2;
    51bc:	f804 ec45 	strb.w	lr, [r4, #-69]
			parameter_list_length++;
    51c0:	3701      	adds	r7, #1
    51c2:	b2ff      	uxtb	r7, r7
	for (uint32_t i=0; i<event_string_length; i++){
    51c4:	3101      	adds	r1, #1
    51c6:	428b      	cmp	r3, r1
    51c8:	d01f      	beq.n	520a <grid_ui_event_register_action+0xc6>
		if (event_string[i] == 'A' && (event_string[i+1]-'0') < GRID_TEMPLATE_A_PARAMETER_LIST_LENGTH){
    51ca:	f815 4b01 	ldrb.w	r4, [r5], #1
    51ce:	2c41      	cmp	r4, #65	; 0x41
    51d0:	d0df      	beq.n	5192 <grid_ui_event_register_action+0x4e>
		else if (event_string[i] == 'B' && (event_string[i+1]-'0') < GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH){
    51d2:	2c42      	cmp	r4, #66	; 0x42
    51d4:	d1f6      	bne.n	51c4 <grid_ui_event_register_action+0x80>
    51d6:	f895 a000 	ldrb.w	sl, [r5]
    51da:	f1aa 0430 	sub.w	r4, sl, #48	; 0x30
    51de:	2c05      	cmp	r4, #5
    51e0:	dcf0      	bgt.n	51c4 <grid_ui_event_register_action+0x80>
			parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;		
    51e2:	eb07 0487 	add.w	r4, r7, r7, lsl #2
    51e6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
    51ea:	445c      	add	r4, fp
    51ec:	f804 cc48 	strb.w	ip, [r4, #-72]
			parameter_list[parameter_list_length].group = event_string[i];
    51f0:	f804 9c47 	strb.w	r9, [r4, #-71]
			parameter_list[parameter_list_length].address = (event_string[i+1]-'0');
    51f4:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    51f8:	f804 ac46 	strb.w	sl, [r4, #-70]
			parameter_list[parameter_list_length].offset = i;
    51fc:	f804 1c44 	strb.w	r1, [r4, #-68]
			parameter_list[parameter_list_length].length = 2;
    5200:	f804 ec45 	strb.w	lr, [r4, #-69]
			parameter_list_length++;
    5204:	3701      	adds	r7, #1
    5206:	b2ff      	uxtb	r7, r7
    5208:	e7dc      	b.n	51c4 <grid_ui_event_register_action+0x80>
	
	
	
	
	// COPY THE ACTION STRING
	for(uint32_t i=0; i<event_string_length; i++){
    520a:	b179      	cbz	r1, 522c <grid_ui_event_register_action+0xe8>
		ele->event_list[event_index].action_string[i] = event_string[i];
    520c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
    5210:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5214:	3a01      	subs	r2, #1
    5216:	2400      	movs	r4, #0
    5218:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    521c:	6a85      	ldr	r5, [r0, #40]	; 0x28
    521e:	4465      	add	r5, ip
    5220:	68ed      	ldr	r5, [r5, #12]
    5222:	f805 e004 	strb.w	lr, [r5, r4]
	for(uint32_t i=0; i<event_string_length; i++){
    5226:	3401      	adds	r4, #1
    5228:	42a1      	cmp	r1, r4
    522a:	d1f5      	bne.n	5218 <grid_ui_event_register_action+0xd4>
	}
	ele->event_list[event_index].action_length = event_string_length;
    522c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    5230:	00f6      	lsls	r6, r6, #3
    5232:	46b6      	mov	lr, r6
    5234:	6a82      	ldr	r2, [r0, #40]	; 0x28
    5236:	4416      	add	r6, r2
    5238:	6073      	str	r3, [r6, #4]
	
	

	// COPY THE PARAMETER DESCRIPTORS
	for(uint8_t i=0; i<parameter_list_length; i++){
    523a:	b197      	cbz	r7, 5262 <grid_ui_event_register_action+0x11e>
    523c:	1e7e      	subs	r6, r7, #1
    523e:	b2f6      	uxtb	r6, r6
    5240:	3601      	adds	r6, #1
    5242:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    5246:	2300      	movs	r3, #0
		
		ele->event_list[event_index].action_parameter_list[i] = parameter_list[i];
    5248:	6a82      	ldr	r2, [r0, #40]	; 0x28
    524a:	4472      	add	r2, lr
    524c:	6951      	ldr	r1, [r2, #20]
    524e:	18cc      	adds	r4, r1, r3
    5250:	eb0d 0203 	add.w	r2, sp, r3
    5254:	6815      	ldr	r5, [r2, #0]
    5256:	50cd      	str	r5, [r1, r3]
    5258:	7912      	ldrb	r2, [r2, #4]
    525a:	7122      	strb	r2, [r4, #4]
    525c:	3305      	adds	r3, #5
	for(uint8_t i=0; i<parameter_list_length; i++){
    525e:	429e      	cmp	r6, r3
    5260:	d1f2      	bne.n	5248 <grid_ui_event_register_action+0x104>
	}
	ele->event_list[event_index].action_parameter_count = parameter_list_length;
    5262:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5264:	449e      	add	lr, r3
    5266:	f88e 7010 	strb.w	r7, [lr, #16]
	
	
	
}
    526a:	b013      	add	sp, #76	; 0x4c
    526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ele->event_list[event_index].action_length = event_string_length;
    5270:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    5274:	00f2      	lsls	r2, r6, #3
    5276:	4696      	mov	lr, r2
    5278:	6a81      	ldr	r1, [r0, #40]	; 0x28
    527a:	440a      	add	r2, r1
    527c:	6053      	str	r3, [r2, #4]
    527e:	2700      	movs	r7, #0
    5280:	e7ef      	b.n	5262 <grid_ui_event_register_action+0x11e>
    5282:	4770      	bx	lr

00005284 <grid_ui_event_find>:



uint8_t grid_ui_event_find(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    5284:	b470      	push	{r4, r5, r6}

	uint8_t event_index = 255;
		
	for(uint8_t i=0; i<ele->event_list_length; i++){
    5286:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
    528a:	b176      	cbz	r6, 52aa <grid_ui_event_find+0x26>
    528c:	6a82      	ldr	r2, [r0, #40]	; 0x28
		if (ele->event_list[i].type == event_type){
    528e:	2300      	movs	r3, #0
    5290:	20ff      	movs	r0, #255	; 0xff
    5292:	b2dc      	uxtb	r4, r3
    5294:	7895      	ldrb	r5, [r2, #2]
    5296:	428d      	cmp	r5, r1
    5298:	bf08      	it	eq
    529a:	4620      	moveq	r0, r4
    529c:	3301      	adds	r3, #1
    529e:	3218      	adds	r2, #24
	for(uint8_t i=0; i<ele->event_list_length; i++){
    52a0:	b2dc      	uxtb	r4, r3
    52a2:	42a6      	cmp	r6, r4
    52a4:	d8f5      	bhi.n	5292 <grid_ui_event_find+0xe>

		
		
	return event_index;
	
}
    52a6:	bc70      	pop	{r4, r5, r6}
    52a8:	4770      	bx	lr
	uint8_t event_index = 255;
    52aa:	20ff      	movs	r0, #255	; 0xff
    52ac:	e7fb      	b.n	52a6 <grid_ui_event_find+0x22>

000052ae <grid_ui_event_trigger>:
	

	
	
		
	eve->trigger = GRID_UI_EVENT_STATUS_TRIGGERED;
    52ae:	2302      	movs	r3, #2
    52b0:	7043      	strb	r3, [r0, #1]
    52b2:	4770      	bx	lr

000052b4 <grid_ui_event_render_action>:
}

uint8_t grid_ui_event_render_action(struct grid_ui_event* eve, uint8_t* target_string){

	
	for(uint32_t i=0; i<eve->action_length; i++){
    52b4:	6842      	ldr	r2, [r0, #4]
    52b6:	b14a      	cbz	r2, 52cc <grid_ui_event_render_action+0x18>
    52b8:	3901      	subs	r1, #1
    52ba:	2300      	movs	r3, #0
		target_string[i] = eve->action_string[i];
    52bc:	68c2      	ldr	r2, [r0, #12]
    52be:	5cd2      	ldrb	r2, [r2, r3]
    52c0:	f801 2f01 	strb.w	r2, [r1, #1]!
	for(uint32_t i=0; i<eve->action_length; i++){
    52c4:	3301      	adds	r3, #1
    52c6:	6842      	ldr	r2, [r0, #4]
    52c8:	429a      	cmp	r2, r3
    52ca:	d8f7      	bhi.n	52bc <grid_ui_event_render_action+0x8>
	
	
	
	return eve->action_length;
		
}
    52cc:	b2d0      	uxtb	r0, r2
    52ce:	4770      	bx	lr

000052d0 <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    52d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52d4:	b0dd      	sub	sp, #372	; 0x174
    52d6:	9003      	str	r0, [sp, #12]
	for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    52d8:	4ba1      	ldr	r3, [pc, #644]	; (5560 <grid_port_process_ui+0x290>)
    52da:	785b      	ldrb	r3, [r3, #1]
    52dc:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    52e0:	b34b      	cbz	r3, 5336 <grid_port_process_ui+0x66>
    52e2:	2600      	movs	r6, #0
    52e4:	4634      	mov	r4, r6
		for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    52e6:	489e      	ldr	r0, [pc, #632]	; (5560 <grid_port_process_ui+0x290>)
    52e8:	272c      	movs	r7, #44	; 0x2c
    52ea:	46b6      	mov	lr, r6
    52ec:	e01a      	b.n	5324 <grid_port_process_ui+0x54>
    52ee:	4673      	mov	r3, lr
			if (grid_ui_event_istriggered(&grid_ui_state.element[i].event_list[j])){
    52f0:	6842      	ldr	r2, [r0, #4]
	if (eve->trigger == GRID_UI_EVENT_STATUS_TRIGGERED){
    52f2:	440a      	add	r2, r1
    52f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    52f6:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    52fa:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
			if (grid_ui_event_istriggered(&grid_ui_state.element[i].event_list[j])){
    52fe:	7852      	ldrb	r2, [r2, #1]
    5300:	2a02      	cmp	r2, #2
				message_broadcast_action_available++;
    5302:	bf04      	itt	eq
    5304:	3401      	addeq	r4, #1
    5306:	b2e4      	uxtbeq	r4, r4
		for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    5308:	3301      	adds	r3, #1
    530a:	b2db      	uxtb	r3, r3
    530c:	6842      	ldr	r2, [r0, #4]
    530e:	440a      	add	r2, r1
    5310:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
    5314:	429a      	cmp	r2, r3
    5316:	d8eb      	bhi.n	52f0 <grid_port_process_ui+0x20>
	for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    5318:	3601      	adds	r6, #1
    531a:	b2f6      	uxtb	r6, r6
    531c:	7843      	ldrb	r3, [r0, #1]
    531e:	b2db      	uxtb	r3, r3
    5320:	42b3      	cmp	r3, r6
    5322:	d908      	bls.n	5336 <grid_port_process_ui+0x66>
		for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    5324:	6843      	ldr	r3, [r0, #4]
    5326:	fb07 f106 	mul.w	r1, r7, r6
    532a:	440b      	add	r3, r1
    532c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5330:	2b00      	cmp	r3, #0
    5332:	d1dc      	bne.n	52ee <grid_port_process_ui+0x1e>
    5334:	e7f0      	b.n	5318 <grid_port_process_ui+0x48>
	for (uint8_t i=0; i<grid_core_state.element_list_length; i++){
    5336:	4b8b      	ldr	r3, [pc, #556]	; (5564 <grid_port_process_ui+0x294>)
    5338:	785b      	ldrb	r3, [r3, #1]
    533a:	b343      	cbz	r3, 538e <grid_port_process_ui+0xbe>
    533c:	2600      	movs	r6, #0
		for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    533e:	4889      	ldr	r0, [pc, #548]	; (5564 <grid_port_process_ui+0x294>)
    5340:	272c      	movs	r7, #44	; 0x2c
    5342:	46b6      	mov	lr, r6
    5344:	e01a      	b.n	537c <grid_port_process_ui+0xac>
    5346:	4673      	mov	r3, lr
			if (grid_ui_event_istriggered(&grid_core_state.element[i].event_list[j])){
    5348:	6842      	ldr	r2, [r0, #4]
	if (eve->trigger == GRID_UI_EVENT_STATUS_TRIGGERED){
    534a:	440a      	add	r2, r1
    534c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    534e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5352:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
			if (grid_ui_event_istriggered(&grid_core_state.element[i].event_list[j])){
    5356:	7852      	ldrb	r2, [r2, #1]
    5358:	2a02      	cmp	r2, #2
				message_broadcast_action_available++;
    535a:	bf04      	itt	eq
    535c:	3401      	addeq	r4, #1
    535e:	b2e4      	uxtbeq	r4, r4
		for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    5360:	3301      	adds	r3, #1
    5362:	b2db      	uxtb	r3, r3
    5364:	6842      	ldr	r2, [r0, #4]
    5366:	440a      	add	r2, r1
    5368:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
    536c:	429a      	cmp	r2, r3
    536e:	d8eb      	bhi.n	5348 <grid_port_process_ui+0x78>
	for (uint8_t i=0; i<grid_core_state.element_list_length; i++){
    5370:	3601      	adds	r6, #1
    5372:	b2f6      	uxtb	r6, r6
    5374:	7843      	ldrb	r3, [r0, #1]
    5376:	b2db      	uxtb	r3, r3
    5378:	42b3      	cmp	r3, r6
    537a:	d908      	bls.n	538e <grid_port_process_ui+0xbe>
		for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    537c:	6843      	ldr	r3, [r0, #4]
    537e:	fb07 f106 	mul.w	r1, r7, r6
    5382:	440b      	add	r3, r1
    5384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5388:	2b00      	cmp	r3, #0
    538a:	d1dc      	bne.n	5346 <grid_port_process_ui+0x76>
    538c:	e7f0      	b.n	5370 <grid_port_process_ui+0xa0>
	struct grid_port* port[4] = {&GRID_PORT_N, &GRID_PORT_E, &GRID_PORT_S, &GRID_PORT_W};
    538e:	4b76      	ldr	r3, [pc, #472]	; (5568 <grid_port_process_ui+0x298>)
    5390:	ad58      	add	r5, sp, #352	; 0x160
    5392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5394:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    5398:	f50d 79b8 	add.w	r9, sp, #368	; 0x170
					grid_buffer_write_character(&port[k]->tx_buffer, port[k]->ping_packet[i]);
    539c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 5594 <grid_port_process_ui+0x2c4>
    53a0:	46a3      	mov	fp, r4
		if (port[k]->ping_flag == 1){
    53a2:	f855 4b04 	ldr.w	r4, [r5], #4
    53a6:	f241 0318 	movw	r3, #4120	; 0x1018
    53aa:	5ce3      	ldrb	r3, [r4, r3]
    53ac:	2b01      	cmp	r3, #1
    53ae:	d00e      	beq.n	53ce <grid_port_process_ui+0xfe>
	for (uint8_t k = 0; k<4; k++){
    53b0:	454d      	cmp	r5, r9
    53b2:	d1f6      	bne.n	53a2 <grid_port_process_ui+0xd2>
    53b4:	465c      	mov	r4, fp
	if (por->cooldown > 15){
    53b6:	9b03      	ldr	r3, [sp, #12]
    53b8:	681b      	ldr	r3, [r3, #0]
    53ba:	2b0f      	cmp	r3, #15
    53bc:	d82e      	bhi.n	541c <grid_port_process_ui+0x14c>
	else if (por->cooldown>0){
    53be:	b113      	cbz	r3, 53c6 <grid_port_process_ui+0xf6>
		por->cooldown--;
    53c0:	3b01      	subs	r3, #1
    53c2:	9a03      	ldr	r2, [sp, #12]
    53c4:	6013      	str	r3, [r2, #0]
	if (message_broadcast_action_available){
    53c6:	bb6c      	cbnz	r4, 5424 <grid_port_process_ui+0x154>
}
    53c8:	b05d      	add	sp, #372	; 0x174
    53ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (grid_buffer_write_init(&port[k]->tx_buffer, port[k]->ping_packet_length)){
    53ce:	f604 73cc 	addw	r3, r4, #4044	; 0xfcc
    53d2:	4618      	mov	r0, r3
    53d4:	9302      	str	r3, [sp, #8]
    53d6:	f241 0317 	movw	r3, #4119	; 0x1017
    53da:	5ce1      	ldrb	r1, [r4, r3]
    53dc:	4b63      	ldr	r3, [pc, #396]	; (556c <grid_port_process_ui+0x29c>)
    53de:	4798      	blx	r3
    53e0:	b1b8      	cbz	r0, 5412 <grid_port_process_ui+0x142>
				for(uint32_t i = 0; i<port[k]->ping_packet_length; i++){
    53e2:	f241 0317 	movw	r3, #4119	; 0x1017
    53e6:	5ce3      	ldrb	r3, [r4, r3]
    53e8:	b183      	cbz	r3, 540c <grid_port_process_ui+0x13c>
    53ea:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
    53ee:	3702      	adds	r7, #2
    53f0:	2600      	movs	r6, #0
    53f2:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
    53f6:	f108 0817 	add.w	r8, r8, #23
					grid_buffer_write_character(&port[k]->tx_buffer, port[k]->ping_packet[i]);
    53fa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    53fe:	9802      	ldr	r0, [sp, #8]
    5400:	47d0      	blx	sl
				for(uint32_t i = 0; i<port[k]->ping_packet_length; i++){
    5402:	3601      	adds	r6, #1
    5404:	f898 3000 	ldrb.w	r3, [r8]
    5408:	42b3      	cmp	r3, r6
    540a:	d8f6      	bhi.n	53fa <grid_port_process_ui+0x12a>
				grid_buffer_write_acknowledge(&port[k]->tx_buffer);
    540c:	9802      	ldr	r0, [sp, #8]
    540e:	4b58      	ldr	r3, [pc, #352]	; (5570 <grid_port_process_ui+0x2a0>)
    5410:	4798      	blx	r3
			port[k]->ping_flag = 0;
    5412:	2200      	movs	r2, #0
    5414:	f241 0318 	movw	r3, #4120	; 0x1018
    5418:	54e2      	strb	r2, [r4, r3]
    541a:	e7c9      	b.n	53b0 <grid_port_process_ui+0xe0>
		por->cooldown--;
    541c:	3b01      	subs	r3, #1
    541e:	9a03      	ldr	r2, [sp, #12]
    5420:	6013      	str	r3, [r2, #0]
    5422:	e7d1      	b.n	53c8 <grid_port_process_ui+0xf8>
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    5424:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5428:	2100      	movs	r1, #0
    542a:	a808      	add	r0, sp, #32
    542c:	4b51      	ldr	r3, [pc, #324]	; (5574 <grid_port_process_ui+0x2a4>)
    542e:	4798      	blx	r3
		sprintf(&message[length], GRID_BRC_frame);
    5430:	2317      	movs	r3, #23
    5432:	9300      	str	r3, [sp, #0]
    5434:	230f      	movs	r3, #15
    5436:	2201      	movs	r2, #1
    5438:	494f      	ldr	r1, [pc, #316]	; (5578 <grid_port_process_ui+0x2a8>)
    543a:	a808      	add	r0, sp, #32
    543c:	4c4f      	ldr	r4, [pc, #316]	; (557c <grid_port_process_ui+0x2ac>)
    543e:	47a0      	blx	r4
		uint8_t error = 0;
    5440:	f10d 0416 	add.w	r4, sp, #22
    5444:	2600      	movs	r6, #0
    5446:	f88d 6016 	strb.w	r6, [sp, #22]
		grid_msg_set_parameter(&message[length], GRID_BRC_LEN_offset, GRID_BRC_LEN_length, 0, &error);
    544a:	9400      	str	r4, [sp, #0]
    544c:	4633      	mov	r3, r6
    544e:	2202      	movs	r2, #2
    5450:	4611      	mov	r1, r2
    5452:	a808      	add	r0, sp, #32
    5454:	4d4a      	ldr	r5, [pc, #296]	; (5580 <grid_port_process_ui+0x2b0>)
    5456:	47a8      	blx	r5
		grid_msg_set_parameter(&message[length], GRID_BRC_ID_offset , GRID_BRC_ID_length , grid_sys_state.next_broadcast_message_id,  &error);
    5458:	4f4a      	ldr	r7, [pc, #296]	; (5584 <grid_port_process_ui+0x2b4>)
    545a:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    545e:	9400      	str	r4, [sp, #0]
    5460:	2202      	movs	r2, #2
    5462:	2104      	movs	r1, #4
    5464:	a808      	add	r0, sp, #32
    5466:	47a8      	blx	r5
		grid_msg_set_parameter(&message[length], GRID_BRC_DX_offset , GRID_BRC_DX_length , GRID_SYS_DEFAULT_POSITION,  &error);
    5468:	9400      	str	r4, [sp, #0]
    546a:	237f      	movs	r3, #127	; 0x7f
    546c:	2202      	movs	r2, #2
    546e:	2106      	movs	r1, #6
    5470:	a808      	add	r0, sp, #32
    5472:	47a8      	blx	r5
		grid_msg_set_parameter(&message[length], GRID_BRC_DY_offset , GRID_BRC_DY_length , GRID_SYS_DEFAULT_POSITION,  &error);
    5474:	9400      	str	r4, [sp, #0]
    5476:	237f      	movs	r3, #127	; 0x7f
    5478:	2202      	movs	r2, #2
    547a:	2108      	movs	r1, #8
    547c:	a808      	add	r0, sp, #32
    547e:	47a8      	blx	r5
		grid_msg_set_parameter(&message[length], GRID_BRC_AGE_offset, GRID_BRC_AGE_length, grid_sys_state.age, &error);
    5480:	783b      	ldrb	r3, [r7, #0]
    5482:	9400      	str	r4, [sp, #0]
    5484:	2202      	movs	r2, #2
    5486:	210a      	movs	r1, #10
    5488:	a808      	add	r0, sp, #32
    548a:	47a8      	blx	r5
		grid_msg_set_parameter(&message[length], GRID_BRC_ROT_offset, GRID_BRC_ROT_length, GRID_SYS_DEFAULT_ROTATION, &error);
    548c:	9400      	str	r4, [sp, #0]
    548e:	4633      	mov	r3, r6
    5490:	2202      	movs	r2, #2
    5492:	210c      	movs	r1, #12
    5494:	a808      	add	r0, sp, #32
    5496:	47a8      	blx	r5
		length += strlen(&message[length]);
    5498:	a808      	add	r0, sp, #32
    549a:	4b3b      	ldr	r3, [pc, #236]	; (5588 <grid_port_process_ui+0x2b8>)
    549c:	4798      	blx	r3
    549e:	b285      	uxth	r5, r0
		for (uint8_t i=0; i<grid_core_state.element_list_length; i++){
    54a0:	4b30      	ldr	r3, [pc, #192]	; (5564 <grid_port_process_ui+0x294>)
    54a2:	785b      	ldrb	r3, [r3, #1]
    54a4:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    54a8:	2b00      	cmp	r3, #0
    54aa:	f000 810a 	beq.w	56c2 <grid_port_process_ui+0x3f2>
    54ae:	f04f 0900 	mov.w	r9, #0
    54b2:	46ca      	mov	sl, r9
			for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    54b4:	4f2b      	ldr	r7, [pc, #172]	; (5564 <grid_port_process_ui+0x294>)
				CRITICAL_SECTION_ENTER()
    54b6:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 5598 <grid_port_process_ui+0x2c8>
    54ba:	e03c      	b.n	5536 <grid_port_process_ui+0x266>
				CRITICAL_SECTION_LEAVE()
    54bc:	a806      	add	r0, sp, #24
    54be:	4b33      	ldr	r3, [pc, #204]	; (558c <grid_port_process_ui+0x2bc>)
    54c0:	4798      	blx	r3
			for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    54c2:	3401      	adds	r4, #1
    54c4:	b2e4      	uxtb	r4, r4
    54c6:	687b      	ldr	r3, [r7, #4]
    54c8:	4433      	add	r3, r6
    54ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    54ce:	42a3      	cmp	r3, r4
    54d0:	d929      	bls.n	5526 <grid_port_process_ui+0x256>
				if (length>GRID_PARAMETER_PACKET_marign){
    54d2:	2dc8      	cmp	r5, #200	; 0xc8
    54d4:	d8f5      	bhi.n	54c2 <grid_port_process_ui+0x1f2>
				CRITICAL_SECTION_ENTER()
    54d6:	a806      	add	r0, sp, #24
    54d8:	47d8      	blx	fp
				if (grid_ui_event_istriggered(&grid_core_state.element[i].event_list[j])){
    54da:	687b      	ldr	r3, [r7, #4]
    54dc:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    54e0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	if (eve->trigger == GRID_UI_EVENT_STATUS_TRIGGERED){
    54e4:	4433      	add	r3, r6
    54e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54e8:	4443      	add	r3, r8
				if (grid_ui_event_istriggered(&grid_core_state.element[i].event_list[j])){
    54ea:	785b      	ldrb	r3, [r3, #1]
    54ec:	2b02      	cmp	r3, #2
    54ee:	d1e5      	bne.n	54bc <grid_port_process_ui+0x1ec>
					packetvalid++;
    54f0:	f10a 0a01 	add.w	sl, sl, #1
    54f4:	fa5f fa8a 	uxtb.w	sl, sl
					grid_ui_event_render_action(&grid_core_state.element[i].event_list[j], &message[length]);
    54f8:	687b      	ldr	r3, [r7, #4]
    54fa:	aa08      	add	r2, sp, #32
    54fc:	442a      	add	r2, r5
    54fe:	4433      	add	r3, r6
    5500:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5502:	9202      	str	r2, [sp, #8]
    5504:	4611      	mov	r1, r2
    5506:	4440      	add	r0, r8
    5508:	4b21      	ldr	r3, [pc, #132]	; (5590 <grid_port_process_ui+0x2c0>)
    550a:	4798      	blx	r3
					length += strlen(&message[length]);
    550c:	9802      	ldr	r0, [sp, #8]
    550e:	4b1e      	ldr	r3, [pc, #120]	; (5588 <grid_port_process_ui+0x2b8>)
    5510:	4798      	blx	r3
    5512:	4405      	add	r5, r0
    5514:	b2ad      	uxth	r5, r5
					grid_ui_event_reset(&grid_core_state.element[i].event_list[j]);
    5516:	687b      	ldr	r3, [r7, #4]
	eve->trigger = GRID_UI_EVENT_STATUS_READY;
    5518:	4433      	add	r3, r6
    551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    551c:	4498      	add	r8, r3
    551e:	2301      	movs	r3, #1
    5520:	f888 3001 	strb.w	r3, [r8, #1]
    5524:	e7ca      	b.n	54bc <grid_port_process_ui+0x1ec>
		for (uint8_t i=0; i<grid_core_state.element_list_length; i++){
    5526:	f109 0901 	add.w	r9, r9, #1
    552a:	fa5f f989 	uxtb.w	r9, r9
    552e:	787b      	ldrb	r3, [r7, #1]
    5530:	b2db      	uxtb	r3, r3
    5532:	454b      	cmp	r3, r9
    5534:	d90a      	bls.n	554c <grid_port_process_ui+0x27c>
			for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    5536:	687b      	ldr	r3, [r7, #4]
    5538:	262c      	movs	r6, #44	; 0x2c
    553a:	fb06 f609 	mul.w	r6, r6, r9
    553e:	4433      	add	r3, r6
    5540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5544:	2400      	movs	r4, #0
    5546:	2b00      	cmp	r3, #0
    5548:	d1c3      	bne.n	54d2 <grid_port_process_ui+0x202>
    554a:	e7ec      	b.n	5526 <grid_port_process_ui+0x256>
		for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    554c:	4b04      	ldr	r3, [pc, #16]	; (5560 <grid_port_process_ui+0x290>)
    554e:	785b      	ldrb	r3, [r3, #1]
    5550:	2b00      	cmp	r3, #0
    5552:	d06b      	beq.n	562c <grid_port_process_ui+0x35c>
			for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    5554:	f04f 0900 	mov.w	r9, #0
    5558:	4f01      	ldr	r7, [pc, #4]	; (5560 <grid_port_process_ui+0x290>)
				CRITICAL_SECTION_ENTER()
    555a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 5598 <grid_port_process_ui+0x2c8>
    555e:	e05a      	b.n	5616 <grid_port_process_ui+0x346>
    5560:	200032ec 	.word	0x200032ec
    5564:	20007d64 	.word	0x20007d64
    5568:	0000eee0 	.word	0x0000eee0
    556c:	0000166d 	.word	0x0000166d
    5570:	000016b9 	.word	0x000016b9
    5574:	0000d447 	.word	0x0000d447
    5578:	0000eeac 	.word	0x0000eeac
    557c:	0000d835 	.word	0x0000d835
    5580:	00004f7d 	.word	0x00004f7d
    5584:	200032f8 	.word	0x200032f8
    5588:	0000d87d 	.word	0x0000d87d
    558c:	00005c8b 	.word	0x00005c8b
    5590:	000052b5 	.word	0x000052b5
    5594:	0000169d 	.word	0x0000169d
    5598:	00005c7d 	.word	0x00005c7d
				CRITICAL_SECTION_LEAVE()
    559c:	a807      	add	r0, sp, #28
    559e:	4b4c      	ldr	r3, [pc, #304]	; (56d0 <grid_port_process_ui+0x400>)
    55a0:	4798      	blx	r3
			for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    55a2:	3401      	adds	r4, #1
    55a4:	b2e4      	uxtb	r4, r4
    55a6:	687b      	ldr	r3, [r7, #4]
    55a8:	4433      	add	r3, r6
    55aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    55ae:	42a3      	cmp	r3, r4
    55b0:	d929      	bls.n	5606 <grid_port_process_ui+0x336>
				if (length>GRID_PARAMETER_PACKET_marign){
    55b2:	2dc8      	cmp	r5, #200	; 0xc8
    55b4:	d8f5      	bhi.n	55a2 <grid_port_process_ui+0x2d2>
				CRITICAL_SECTION_ENTER()
    55b6:	a807      	add	r0, sp, #28
    55b8:	47d8      	blx	fp
				if (grid_ui_event_istriggered(&grid_ui_state.element[i].event_list[j])){
    55ba:	687b      	ldr	r3, [r7, #4]
    55bc:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    55c0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	if (eve->trigger == GRID_UI_EVENT_STATUS_TRIGGERED){
    55c4:	4433      	add	r3, r6
    55c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55c8:	4443      	add	r3, r8
				if (grid_ui_event_istriggered(&grid_ui_state.element[i].event_list[j])){
    55ca:	785b      	ldrb	r3, [r3, #1]
    55cc:	2b02      	cmp	r3, #2
    55ce:	d1e5      	bne.n	559c <grid_port_process_ui+0x2cc>
					packetvalid++;				
    55d0:	f10a 0a01 	add.w	sl, sl, #1
    55d4:	fa5f fa8a 	uxtb.w	sl, sl
					grid_ui_event_render_action(&grid_ui_state.element[i].event_list[j], &message[length]);
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	aa08      	add	r2, sp, #32
    55dc:	442a      	add	r2, r5
    55de:	4433      	add	r3, r6
    55e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    55e2:	9202      	str	r2, [sp, #8]
    55e4:	4611      	mov	r1, r2
    55e6:	4440      	add	r0, r8
    55e8:	4b3a      	ldr	r3, [pc, #232]	; (56d4 <grid_port_process_ui+0x404>)
    55ea:	4798      	blx	r3
					length += strlen(&message[length]);
    55ec:	9802      	ldr	r0, [sp, #8]
    55ee:	4b3a      	ldr	r3, [pc, #232]	; (56d8 <grid_port_process_ui+0x408>)
    55f0:	4798      	blx	r3
    55f2:	4405      	add	r5, r0
    55f4:	b2ad      	uxth	r5, r5
					grid_ui_event_reset(&grid_ui_state.element[i].event_list[j]);
    55f6:	687b      	ldr	r3, [r7, #4]
	eve->trigger = GRID_UI_EVENT_STATUS_READY;
    55f8:	4433      	add	r3, r6
    55fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55fc:	4498      	add	r8, r3
    55fe:	2301      	movs	r3, #1
    5600:	f888 3001 	strb.w	r3, [r8, #1]
    5604:	e7ca      	b.n	559c <grid_port_process_ui+0x2cc>
		for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    5606:	f109 0901 	add.w	r9, r9, #1
    560a:	fa5f f989 	uxtb.w	r9, r9
    560e:	787b      	ldrb	r3, [r7, #1]
    5610:	b2db      	uxtb	r3, r3
    5612:	454b      	cmp	r3, r9
    5614:	d90a      	bls.n	562c <grid_port_process_ui+0x35c>
			for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    5616:	687b      	ldr	r3, [r7, #4]
    5618:	262c      	movs	r6, #44	; 0x2c
    561a:	fb06 f609 	mul.w	r6, r6, r9
    561e:	4433      	add	r3, r6
    5620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5624:	2400      	movs	r4, #0
    5626:	2b00      	cmp	r3, #0
    5628:	d1c3      	bne.n	55b2 <grid_port_process_ui+0x2e2>
    562a:	e7ec      	b.n	5606 <grid_port_process_ui+0x336>
		if (packetvalid){
    562c:	f1ba 0f00 	cmp.w	sl, #0
    5630:	f43f aeca 	beq.w	53c8 <grid_port_process_ui+0xf8>
			por->cooldown += (10+por->cooldown);
    5634:	9a03      	ldr	r2, [sp, #12]
    5636:	6813      	ldr	r3, [r2, #0]
    5638:	005b      	lsls	r3, r3, #1
    563a:	330a      	adds	r3, #10
    563c:	6013      	str	r3, [r2, #0]
			grid_sys_state.next_broadcast_message_id++;
    563e:	4a27      	ldr	r2, [pc, #156]	; (56dc <grid_port_process_ui+0x40c>)
    5640:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
    5644:	3301      	adds	r3, #1
    5646:	b2db      	uxtb	r3, r3
    5648:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
			uint8_t error = 0;
    564c:	f10d 0317 	add.w	r3, sp, #23
    5650:	2200      	movs	r2, #0
    5652:	f88d 2017 	strb.w	r2, [sp, #23]
			grid_msg_set_parameter(message, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, length+1, &error);
    5656:	9300      	str	r3, [sp, #0]
    5658:	1c6b      	adds	r3, r5, #1
    565a:	2202      	movs	r2, #2
    565c:	4611      	mov	r1, r2
    565e:	a808      	add	r0, sp, #32
    5660:	4c1f      	ldr	r4, [pc, #124]	; (56e0 <grid_port_process_ui+0x410>)
    5662:	47a0      	blx	r4
			sprintf(&message[length], "%c..\n", GRID_CONST_EOT);
    5664:	ab08      	add	r3, sp, #32
    5666:	195c      	adds	r4, r3, r5
    5668:	2204      	movs	r2, #4
    566a:	491e      	ldr	r1, [pc, #120]	; (56e4 <grid_port_process_ui+0x414>)
    566c:	4620      	mov	r0, r4
    566e:	4b1e      	ldr	r3, [pc, #120]	; (56e8 <grid_port_process_ui+0x418>)
    5670:	4798      	blx	r3
			length += strlen(&message[length]);
    5672:	4620      	mov	r0, r4
    5674:	4b18      	ldr	r3, [pc, #96]	; (56d8 <grid_port_process_ui+0x408>)
    5676:	4798      	blx	r3
    5678:	4405      	add	r5, r0
    567a:	b2ad      	uxth	r5, r5
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    567c:	4629      	mov	r1, r5
    567e:	a808      	add	r0, sp, #32
    5680:	4b1a      	ldr	r3, [pc, #104]	; (56ec <grid_port_process_ui+0x41c>)
    5682:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    5684:	4602      	mov	r2, r0
    5686:	4629      	mov	r1, r5
    5688:	a808      	add	r0, sp, #32
    568a:	4b19      	ldr	r3, [pc, #100]	; (56f0 <grid_port_process_ui+0x420>)
    568c:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    568e:	4629      	mov	r1, r5
    5690:	4818      	ldr	r0, [pc, #96]	; (56f4 <grid_port_process_ui+0x424>)
    5692:	4b19      	ldr	r3, [pc, #100]	; (56f8 <grid_port_process_ui+0x428>)
    5694:	4798      	blx	r3
    5696:	2800      	cmp	r0, #0
    5698:	f43f ae96 	beq.w	53c8 <grid_port_process_ui+0xf8>
				for(uint16_t i = 0; i<length; i++){
    569c:	b16d      	cbz	r5, 56ba <grid_port_process_ui+0x3ea>
    569e:	f10d 041f 	add.w	r4, sp, #31
    56a2:	3d01      	subs	r5, #1
    56a4:	ab08      	add	r3, sp, #32
    56a6:	fa13 f585 	uxtah	r5, r3, r5
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    56aa:	4f12      	ldr	r7, [pc, #72]	; (56f4 <grid_port_process_ui+0x424>)
    56ac:	4e13      	ldr	r6, [pc, #76]	; (56fc <grid_port_process_ui+0x42c>)
    56ae:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    56b2:	4638      	mov	r0, r7
    56b4:	47b0      	blx	r6
				for(uint16_t i = 0; i<length; i++){
    56b6:	42a5      	cmp	r5, r4
    56b8:	d1f9      	bne.n	56ae <grid_port_process_ui+0x3de>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    56ba:	480e      	ldr	r0, [pc, #56]	; (56f4 <grid_port_process_ui+0x424>)
    56bc:	4b10      	ldr	r3, [pc, #64]	; (5700 <grid_port_process_ui+0x430>)
    56be:	4798      	blx	r3
    56c0:	e682      	b.n	53c8 <grid_port_process_ui+0xf8>
		for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    56c2:	4b10      	ldr	r3, [pc, #64]	; (5704 <grid_port_process_ui+0x434>)
    56c4:	785b      	ldrb	r3, [r3, #1]
    56c6:	2b00      	cmp	r3, #0
    56c8:	f47f af44 	bne.w	5554 <grid_port_process_ui+0x284>
    56cc:	e67c      	b.n	53c8 <grid_port_process_ui+0xf8>
    56ce:	bf00      	nop
    56d0:	00005c8b 	.word	0x00005c8b
    56d4:	000052b5 	.word	0x000052b5
    56d8:	0000d87d 	.word	0x0000d87d
    56dc:	200032f8 	.word	0x200032f8
    56e0:	00004f7d 	.word	0x00004f7d
    56e4:	0000eed0 	.word	0x0000eed0
    56e8:	0000d835 	.word	0x0000d835
    56ec:	00004c11 	.word	0x00004c11
    56f0:	00004c4d 	.word	0x00004c4d
    56f4:	200032b4 	.word	0x200032b4
    56f8:	0000166d 	.word	0x0000166d
    56fc:	0000169d 	.word	0x0000169d
    5700:	000016b9 	.word	0x000016b9
    5704:	200032ec 	.word	0x200032ec

00005708 <grid_ui_event_template_action>:

uint8_t grid_ui_event_template_action(struct grid_ui_element* ele, uint8_t event_index){
	
	if (event_index == 255){
    5708:	29ff      	cmp	r1, #255	; 0xff
    570a:	d07d      	beq.n	5808 <grid_ui_event_template_action+0x100>
uint8_t grid_ui_event_template_action(struct grid_ui_element* ele, uint8_t event_index){
    570c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5710:	b085      	sub	sp, #20
		
		return;
	}
	
	for (uint8_t i=0; i<ele->event_list[event_index].action_parameter_count; i++){
    5712:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5716:	00c9      	lsls	r1, r1, #3
    5718:	460e      	mov	r6, r1
    571a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    571c:	440b      	add	r3, r1
    571e:	7c1a      	ldrb	r2, [r3, #16]
    5720:	2a00      	cmp	r2, #0
    5722:	d06e      	beq.n	5802 <grid_ui_event_template_action+0xfa>
    5724:	4605      	mov	r5, r0
    5726:	2400      	movs	r4, #0
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_B_PARAMETER_BANK_NEXT){
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
			}
			
			uint8_t error = 0;
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    5728:	4f38      	ldr	r7, [pc, #224]	; (580c <grid_ui_event_template_action+0x104>)
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    572a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 5828 <grid_ui_event_template_action+0x120>
    572e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 582c <grid_ui_event_template_action+0x124>
    5732:	e020      	b.n	5776 <grid_ui_event_template_action+0x6e>
			if(ele->event_list[event_index].action_parameter_list[i].address > GRID_TEMPLATE_A_PARAMETER_LIST_LENGTH){
    5734:	789b      	ldrb	r3, [r3, #2]
    5736:	2b08      	cmp	r3, #8
    5738:	d838      	bhi.n	57ac <grid_ui_event_template_action+0xa4>
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    573a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    573c:	4430      	add	r0, r6
    573e:	6943      	ldr	r3, [r0, #20]
    5740:	449a      	add	sl, r3
    5742:	f89a 3002 	ldrb.w	r3, [sl, #2]
    5746:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    574a:	685b      	ldr	r3, [r3, #4]
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    574c:	f89a 1004 	ldrb.w	r1, [sl, #4]
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    5750:	f89a 2003 	ldrb.w	r2, [sl, #3]
			uint8_t error = 0;
    5754:	f10d 0e10 	add.w	lr, sp, #16
    5758:	f04f 0c00 	mov.w	ip, #0
    575c:	f80e cd01 	strb.w	ip, [lr, #-1]!
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    5760:	68c0      	ldr	r0, [r0, #12]
    5762:	f8cd e000 	str.w	lr, [sp]
    5766:	47b8      	blx	r7
	for (uint8_t i=0; i<ele->event_list[event_index].action_parameter_count; i++){
    5768:	3401      	adds	r4, #1
    576a:	b2e4      	uxtb	r4, r4
    576c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    576e:	4433      	add	r3, r6
    5770:	7c1a      	ldrb	r2, [r3, #16]
    5772:	42a2      	cmp	r2, r4
    5774:	d945      	bls.n	5802 <grid_ui_event_template_action+0xfa>
		if (ele->event_list[event_index].action_parameter_list[i].group == 'A'){
    5776:	eb04 0a84 	add.w	sl, r4, r4, lsl #2
    577a:	695b      	ldr	r3, [r3, #20]
    577c:	4453      	add	r3, sl
    577e:	785a      	ldrb	r2, [r3, #1]
    5780:	2a41      	cmp	r2, #65	; 0x41
    5782:	d0d7      	beq.n	5734 <grid_ui_event_template_action+0x2c>
		else if (ele->event_list[event_index].action_parameter_list[i].group == 'B'){
    5784:	2a42      	cmp	r2, #66	; 0x42
    5786:	d1ef      	bne.n	5768 <grid_ui_event_template_action+0x60>
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    5788:	f893 a004 	ldrb.w	sl, [r3, #4]
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    578c:	f893 b003 	ldrb.w	fp, [r3, #3]
			if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_B_PARAMETER_BANK_NUMBER_ACTIVE){
    5790:	789b      	ldrb	r3, [r3, #2]
    5792:	b17b      	cbz	r3, 57b4 <grid_ui_event_template_action+0xac>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_B_PARAMETER_BANK_COLOR_RED){
    5794:	2b01      	cmp	r3, #1
    5796:	d01d      	beq.n	57d4 <grid_ui_event_template_action+0xcc>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_B_PARAMETER_BANK_COLOR_GRE){
    5798:	2b02      	cmp	r3, #2
    579a:	d020      	beq.n	57de <grid_ui_event_template_action+0xd6>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_B_PARAMETER_BANK_COLOR_BLU){
    579c:	2b03      	cmp	r3, #3
    579e:	d023      	beq.n	57e8 <grid_ui_event_template_action+0xe0>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_B_PARAMETER_MAPMODE_STATE){
    57a0:	2b04      	cmp	r3, #4
    57a2:	d026      	beq.n	57f2 <grid_ui_event_template_action+0xea>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_B_PARAMETER_BANK_NEXT){
    57a4:	2b05      	cmp	r3, #5
    57a6:	d028      	beq.n	57fa <grid_ui_event_template_action+0xf2>
			uint32_t parameter_value = 0;
    57a8:	2300      	movs	r3, #0
    57aa:	e007      	b.n	57bc <grid_ui_event_template_action+0xb4>
				printf("Error\n");
    57ac:	4818      	ldr	r0, [pc, #96]	; (5810 <grid_ui_event_template_action+0x108>)
    57ae:	4b19      	ldr	r3, [pc, #100]	; (5814 <grid_ui_event_template_action+0x10c>)
    57b0:	4798      	blx	r3
    57b2:	e7c2      	b.n	573a <grid_ui_event_template_action+0x32>
				parameter_value = grid_sys_get_bank_num(&grid_sys_state);
    57b4:	4640      	mov	r0, r8
    57b6:	4b18      	ldr	r3, [pc, #96]	; (5818 <grid_ui_event_template_action+0x110>)
    57b8:	4798      	blx	r3
    57ba:	4603      	mov	r3, r0
			uint8_t error = 0;
    57bc:	aa04      	add	r2, sp, #16
    57be:	2100      	movs	r1, #0
    57c0:	f802 1d01 	strb.w	r1, [r2, #-1]!
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    57c4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    57c6:	4431      	add	r1, r6
    57c8:	68c8      	ldr	r0, [r1, #12]
    57ca:	9200      	str	r2, [sp, #0]
    57cc:	465a      	mov	r2, fp
    57ce:	4651      	mov	r1, sl
    57d0:	47b8      	blx	r7
    57d2:	e7c9      	b.n	5768 <grid_ui_event_template_action+0x60>
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    57d4:	4640      	mov	r0, r8
    57d6:	4b11      	ldr	r3, [pc, #68]	; (581c <grid_ui_event_template_action+0x114>)
    57d8:	4798      	blx	r3
    57da:	4603      	mov	r3, r0
    57dc:	e7ee      	b.n	57bc <grid_ui_event_template_action+0xb4>
				parameter_value = grid_sys_get_bank_gre(&grid_sys_state);
    57de:	4640      	mov	r0, r8
    57e0:	4b0f      	ldr	r3, [pc, #60]	; (5820 <grid_ui_event_template_action+0x118>)
    57e2:	4798      	blx	r3
    57e4:	4603      	mov	r3, r0
    57e6:	e7e9      	b.n	57bc <grid_ui_event_template_action+0xb4>
				parameter_value = grid_sys_get_bank_blu(&grid_sys_state);
    57e8:	4640      	mov	r0, r8
    57ea:	4b0e      	ldr	r3, [pc, #56]	; (5824 <grid_ui_event_template_action+0x11c>)
    57ec:	4798      	blx	r3
    57ee:	4603      	mov	r3, r0
    57f0:	e7e4      	b.n	57bc <grid_ui_event_template_action+0xb4>
				parameter_value = grid_sys_state.mapmodestate;
    57f2:	f898 300a 	ldrb.w	r3, [r8, #10]
    57f6:	b2db      	uxtb	r3, r3
    57f8:	e7e0      	b.n	57bc <grid_ui_event_template_action+0xb4>
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    57fa:	4640      	mov	r0, r8
    57fc:	47c8      	blx	r9
    57fe:	4603      	mov	r3, r0
    5800:	e7dc      	b.n	57bc <grid_ui_event_template_action+0xb4>
	
	
	
	
	
}
    5802:	b005      	add	sp, #20
    5804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5808:	4770      	bx	lr
    580a:	bf00      	nop
    580c:	00004f7d 	.word	0x00004f7d
    5810:	0000eef0 	.word	0x0000eef0
    5814:	0000d699 	.word	0x0000d699
    5818:	00004893 	.word	0x00004893
    581c:	00004897 	.word	0x00004897
    5820:	0000489b 	.word	0x0000489b
    5824:	0000489f 	.word	0x0000489f
    5828:	200032f8 	.word	0x200032f8
    582c:	000048a3 	.word	0x000048a3

00005830 <grid_usb_serial_bulkout_cb>:
	//grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
//	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	
	//cdcdf_acm_write(cdcdf_demo_buf, count); /* Echo data */
	return false;                           /* No error. */
}
    5830:	2000      	movs	r0, #0
    5832:	4770      	bx	lr

00005834 <grid_usb_serial_bulkin_cb>:
	
	//grid_sys_alert_set_alert(&grid_sys_state, 255,0,255,2,300);

//	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS); /* Another read */
	return false;                                                                                 /* No error. */
}
    5834:	2000      	movs	r0, #0
    5836:	4770      	bx	lr

00005838 <grid_usb_serial_statechange_cb>:
static bool grid_usb_serial_statechange_cb(usb_cdc_control_signal_t state)
{
    5838:	b510      	push	{r4, lr}
    583a:	b082      	sub	sp, #8
    583c:	f8ad 0004 	strh.w	r0, [sp, #4]
	
	//grid_sys_alert_set_alert(&grid_sys_state, 0,255,255,2,300);
	
	if (state.rs232.DTR || 1) {
		/* After connection the R/W callbacks can be registered */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)grid_usb_serial_bulkout_cb);
    5840:	4904      	ldr	r1, [pc, #16]	; (5854 <grid_usb_serial_statechange_cb+0x1c>)
    5842:	2000      	movs	r0, #0
    5844:	4c04      	ldr	r4, [pc, #16]	; (5858 <grid_usb_serial_statechange_cb+0x20>)
    5846:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)grid_usb_serial_bulkin_cb);
    5848:	4904      	ldr	r1, [pc, #16]	; (585c <grid_usb_serial_statechange_cb+0x24>)
    584a:	2001      	movs	r0, #1
    584c:	47a0      	blx	r4
		/* Start Rx */
		//cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	}
	return false; /* No error. */
}
    584e:	2000      	movs	r0, #0
    5850:	b002      	add	sp, #8
    5852:	bd10      	pop	{r4, pc}
    5854:	00005831 	.word	0x00005831
    5858:	0000ba75 	.word	0x0000ba75
    585c:	00005835 	.word	0x00005835

00005860 <grid_usb_midi_bulkin_cb>:
{
	grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
	return false;
}
static bool grid_usb_midi_bulkin_cb(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    5860:	b510      	push	{r4, lr}
    5862:	b082      	sub	sp, #8
	
	grid_sys_alert_set_alert(&grid_sys_state, 255,0,255,2,300);
    5864:	f44f 7396 	mov.w	r3, #300	; 0x12c
    5868:	9301      	str	r3, [sp, #4]
    586a:	2302      	movs	r3, #2
    586c:	9300      	str	r3, [sp, #0]
    586e:	23ff      	movs	r3, #255	; 0xff
    5870:	2200      	movs	r2, #0
    5872:	4619      	mov	r1, r3
    5874:	4802      	ldr	r0, [pc, #8]	; (5880 <grid_usb_midi_bulkin_cb+0x20>)
    5876:	4c03      	ldr	r4, [pc, #12]	; (5884 <grid_usb_midi_bulkin_cb+0x24>)
    5878:	47a0      	blx	r4
	return false;
}
    587a:	2000      	movs	r0, #0
    587c:	b002      	add	sp, #8
    587e:	bd10      	pop	{r4, pc}
    5880:	200032f8 	.word	0x200032f8
    5884:	00004a55 	.word	0x00004a55

00005888 <grid_usb_midi_bulkout_cb>:
{
    5888:	b510      	push	{r4, lr}
    588a:	b082      	sub	sp, #8
	grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
    588c:	f44f 7396 	mov.w	r3, #300	; 0x12c
    5890:	9301      	str	r3, [sp, #4]
    5892:	2302      	movs	r3, #2
    5894:	9300      	str	r3, [sp, #0]
    5896:	2300      	movs	r3, #0
    5898:	22ff      	movs	r2, #255	; 0xff
    589a:	4611      	mov	r1, r2
    589c:	4802      	ldr	r0, [pc, #8]	; (58a8 <grid_usb_midi_bulkout_cb+0x20>)
    589e:	4c03      	ldr	r4, [pc, #12]	; (58ac <grid_usb_midi_bulkout_cb+0x24>)
    58a0:	47a0      	blx	r4
}
    58a2:	2000      	movs	r0, #0
    58a4:	b002      	add	sp, #8
    58a6:	bd10      	pop	{r4, pc}
    58a8:	200032f8 	.word	0x200032f8
    58ac:	00004a55 	.word	0x00004a55

000058b0 <grid_usb_serial_init>:
{
    58b0:	b508      	push	{r3, lr}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)grid_usb_serial_statechange_cb);
    58b2:	4902      	ldr	r1, [pc, #8]	; (58bc <grid_usb_serial_init+0xc>)
    58b4:	2003      	movs	r0, #3
    58b6:	4b02      	ldr	r3, [pc, #8]	; (58c0 <grid_usb_serial_init+0x10>)
    58b8:	4798      	blx	r3
    58ba:	bd08      	pop	{r3, pc}
    58bc:	00005839 	.word	0x00005839
    58c0:	0000ba75 	.word	0x0000ba75

000058c4 <grid_usb_midi_init>:




void grid_usb_midi_init()
{
    58c4:	b510      	push	{r4, lr}
	
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_READ, (FUNC_PTR)grid_usb_midi_bulkout_cb);
    58c6:	4904      	ldr	r1, [pc, #16]	; (58d8 <grid_usb_midi_init+0x14>)
    58c8:	2000      	movs	r0, #0
    58ca:	4c04      	ldr	r4, [pc, #16]	; (58dc <grid_usb_midi_init+0x18>)
    58cc:	47a0      	blx	r4
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_WRITE, (FUNC_PTR)grid_usb_midi_bulkin_cb);
    58ce:	4904      	ldr	r1, [pc, #16]	; (58e0 <grid_usb_midi_init+0x1c>)
    58d0:	2001      	movs	r0, #1
    58d2:	47a0      	blx	r4
    58d4:	bd10      	pop	{r4, pc}
    58d6:	bf00      	nop
    58d8:	00005889 	.word	0x00005889
    58dc:	0000c265 	.word	0x0000c265
    58e0:	00005861 	.word	0x00005861

000058e4 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    58e4:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    58e6:	6983      	ldr	r3, [r0, #24]
    58e8:	b103      	cbz	r3, 58ec <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    58ea:	4798      	blx	r3
    58ec:	bd08      	pop	{r3, pc}

000058ee <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    58ee:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    58f0:	69c3      	ldr	r3, [r0, #28]
    58f2:	b103      	cbz	r3, 58f6 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    58f4:	4798      	blx	r3
    58f6:	bd08      	pop	{r3, pc}

000058f8 <adc_async_channel_conversion_done>:
{
    58f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58fc:	4606      	mov	r6, r0
    58fe:	460f      	mov	r7, r1
    5900:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    5902:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    5904:	5c5c      	ldrb	r4, [r3, r1]
    5906:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    590a:	00e4      	lsls	r4, r4, #3
    590c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    5910:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    5914:	f105 0a04 	add.w	sl, r5, #4
    5918:	b2d1      	uxtb	r1, r2
    591a:	4650      	mov	r0, sl
    591c:	4b0c      	ldr	r3, [pc, #48]	; (5950 <adc_async_channel_conversion_done+0x58>)
    591e:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    5920:	4630      	mov	r0, r6
    5922:	4b0c      	ldr	r3, [pc, #48]	; (5954 <adc_async_channel_conversion_done+0x5c>)
    5924:	4798      	blx	r3
    5926:	2801      	cmp	r0, #1
    5928:	d907      	bls.n	593a <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    592a:	ea4f 2119 	mov.w	r1, r9, lsr #8
    592e:	4650      	mov	r0, sl
    5930:	4b07      	ldr	r3, [pc, #28]	; (5950 <adc_async_channel_conversion_done+0x58>)
    5932:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    5934:	8aab      	ldrh	r3, [r5, #20]
    5936:	3301      	adds	r3, #1
    5938:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    593a:	8aab      	ldrh	r3, [r5, #20]
    593c:	3301      	adds	r3, #1
    593e:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    5940:	f858 3004 	ldr.w	r3, [r8, r4]
    5944:	b113      	cbz	r3, 594c <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    5946:	4639      	mov	r1, r7
    5948:	4630      	mov	r0, r6
    594a:	4798      	blx	r3
    594c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5950:	000073ed 	.word	0x000073ed
    5954:	0000778b 	.word	0x0000778b

00005958 <adc_async_init>:
{
    5958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    595c:	4689      	mov	r9, r1
    595e:	4616      	mov	r6, r2
    5960:	461c      	mov	r4, r3
    5962:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    5966:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    5968:	4607      	mov	r7, r0
    596a:	b140      	cbz	r0, 597e <adc_async_init+0x26>
    596c:	b149      	cbz	r1, 5982 <adc_async_init+0x2a>
    596e:	b152      	cbz	r2, 5986 <adc_async_init+0x2e>
    5970:	f1b8 0f00 	cmp.w	r8, #0
    5974:	d009      	beq.n	598a <adc_async_init+0x32>
    5976:	1c28      	adds	r0, r5, #0
    5978:	bf18      	it	ne
    597a:	2001      	movne	r0, #1
    597c:	e006      	b.n	598c <adc_async_init+0x34>
    597e:	2000      	movs	r0, #0
    5980:	e004      	b.n	598c <adc_async_init+0x34>
    5982:	2000      	movs	r0, #0
    5984:	e002      	b.n	598c <adc_async_init+0x34>
    5986:	2000      	movs	r0, #0
    5988:	e000      	b.n	598c <adc_async_init+0x34>
    598a:	2000      	movs	r0, #0
    598c:	f8df b064 	ldr.w	fp, [pc, #100]	; 59f4 <adc_async_init+0x9c>
    5990:	223f      	movs	r2, #63	; 0x3f
    5992:	4659      	mov	r1, fp
    5994:	f8df a060 	ldr.w	sl, [pc, #96]	; 59f8 <adc_async_init+0xa0>
    5998:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    599a:	1c60      	adds	r0, r4, #1
    599c:	2240      	movs	r2, #64	; 0x40
    599e:	4659      	mov	r1, fp
    59a0:	4580      	cmp	r8, r0
    59a2:	bfcc      	ite	gt
    59a4:	2000      	movgt	r0, #0
    59a6:	2001      	movle	r0, #1
    59a8:	47d0      	blx	sl
	device = &descr->device;
    59aa:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    59ac:	21ff      	movs	r1, #255	; 0xff
    59ae:	b2da      	uxtb	r2, r3
    59b0:	54b1      	strb	r1, [r6, r2]
    59b2:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    59b4:	b2da      	uxtb	r2, r3
    59b6:	42a2      	cmp	r2, r4
    59b8:	d9f9      	bls.n	59ae <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    59ba:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    59bc:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    59c0:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    59c4:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    59c6:	4649      	mov	r1, r9
    59c8:	4638      	mov	r0, r7
    59ca:	4b06      	ldr	r3, [pc, #24]	; (59e4 <adc_async_init+0x8c>)
    59cc:	4798      	blx	r3
	if (init_status) {
    59ce:	4603      	mov	r3, r0
    59d0:	b928      	cbnz	r0, 59de <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    59d2:	4a05      	ldr	r2, [pc, #20]	; (59e8 <adc_async_init+0x90>)
    59d4:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    59d6:	4a05      	ldr	r2, [pc, #20]	; (59ec <adc_async_init+0x94>)
    59d8:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    59da:	4a05      	ldr	r2, [pc, #20]	; (59f0 <adc_async_init+0x98>)
    59dc:	607a      	str	r2, [r7, #4]
}
    59de:	4618      	mov	r0, r3
    59e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59e4:	00007659 	.word	0x00007659
    59e8:	000058f9 	.word	0x000058f9
    59ec:	000058e5 	.word	0x000058e5
    59f0:	000058ef 	.word	0x000058ef
    59f4:	0000eef8 	.word	0x0000eef8
    59f8:	000072b1 	.word	0x000072b1

000059fc <adc_async_register_channel_buffer>:
{
    59fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a00:	460e      	mov	r6, r1
    5a02:	4617      	mov	r7, r2
    5a04:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    5a06:	4605      	mov	r5, r0
    5a08:	2800      	cmp	r0, #0
    5a0a:	d040      	beq.n	5a8e <adc_async_register_channel_buffer+0x92>
    5a0c:	2a00      	cmp	r2, #0
    5a0e:	d040      	beq.n	5a92 <adc_async_register_channel_buffer+0x96>
    5a10:	1c18      	adds	r0, r3, #0
    5a12:	bf18      	it	ne
    5a14:	2001      	movne	r0, #1
    5a16:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5ab0 <adc_async_register_channel_buffer+0xb4>
    5a1a:	2266      	movs	r2, #102	; 0x66
    5a1c:	4649      	mov	r1, r9
    5a1e:	4c22      	ldr	r4, [pc, #136]	; (5aa8 <adc_async_register_channel_buffer+0xac>)
    5a20:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    5a22:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5a26:	2267      	movs	r2, #103	; 0x67
    5a28:	4649      	mov	r1, r9
    5a2a:	42b0      	cmp	r0, r6
    5a2c:	bf34      	ite	cc
    5a2e:	2000      	movcc	r0, #0
    5a30:	2001      	movcs	r0, #1
    5a32:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    5a34:	6a29      	ldr	r1, [r5, #32]
    5a36:	5d8b      	ldrb	r3, [r1, r6]
    5a38:	2bff      	cmp	r3, #255	; 0xff
    5a3a:	d12c      	bne.n	5a96 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    5a3c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5a40:	2300      	movs	r3, #0
    5a42:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    5a44:	b2da      	uxtb	r2, r3
    5a46:	5c8a      	ldrb	r2, [r1, r2]
    5a48:	2aff      	cmp	r2, #255	; 0xff
			index++;
    5a4a:	bf1c      	itt	ne
    5a4c:	3401      	addne	r4, #1
    5a4e:	b2e4      	uxtbne	r4, r4
    5a50:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    5a52:	b2da      	uxtb	r2, r3
    5a54:	4282      	cmp	r2, r0
    5a56:	d9f5      	bls.n	5a44 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    5a58:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    5a5c:	42a3      	cmp	r3, r4
    5a5e:	d31d      	bcc.n	5a9c <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    5a60:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    5a64:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    5a68:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5a6a:	4448      	add	r0, r9
    5a6c:	4642      	mov	r2, r8
    5a6e:	4639      	mov	r1, r7
    5a70:	3004      	adds	r0, #4
    5a72:	4b0e      	ldr	r3, [pc, #56]	; (5aac <adc_async_register_channel_buffer+0xb0>)
    5a74:	4798      	blx	r3
    5a76:	4602      	mov	r2, r0
    5a78:	b998      	cbnz	r0, 5aa2 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    5a7a:	6a2b      	ldr	r3, [r5, #32]
    5a7c:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    5a7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5a80:	4499      	add	r9, r3
    5a82:	2300      	movs	r3, #0
    5a84:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    5a88:	4610      	mov	r0, r2
    5a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    5a8e:	2000      	movs	r0, #0
    5a90:	e7c1      	b.n	5a16 <adc_async_register_channel_buffer+0x1a>
    5a92:	2000      	movs	r0, #0
    5a94:	e7bf      	b.n	5a16 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    5a96:	f06f 020c 	mvn.w	r2, #12
    5a9a:	e7f5      	b.n	5a88 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    5a9c:	f06f 021b 	mvn.w	r2, #27
    5aa0:	e7f2      	b.n	5a88 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    5aa2:	f06f 020c 	mvn.w	r2, #12
    5aa6:	e7ef      	b.n	5a88 <adc_async_register_channel_buffer+0x8c>
    5aa8:	000072b1 	.word	0x000072b1
    5aac:	00007359 	.word	0x00007359
    5ab0:	0000eef8 	.word	0x0000eef8

00005ab4 <adc_async_enable_channel>:
{
    5ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ab6:	460d      	mov	r5, r1
	ASSERT(descr);
    5ab8:	4f0b      	ldr	r7, [pc, #44]	; (5ae8 <adc_async_enable_channel+0x34>)
    5aba:	4604      	mov	r4, r0
    5abc:	2283      	movs	r2, #131	; 0x83
    5abe:	4639      	mov	r1, r7
    5ac0:	3000      	adds	r0, #0
    5ac2:	bf18      	it	ne
    5ac4:	2001      	movne	r0, #1
    5ac6:	4e09      	ldr	r6, [pc, #36]	; (5aec <adc_async_enable_channel+0x38>)
    5ac8:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    5aca:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    5ace:	2284      	movs	r2, #132	; 0x84
    5ad0:	4639      	mov	r1, r7
    5ad2:	42a8      	cmp	r0, r5
    5ad4:	bf34      	ite	cc
    5ad6:	2000      	movcc	r0, #0
    5ad8:	2001      	movcs	r0, #1
    5ada:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    5adc:	4629      	mov	r1, r5
    5ade:	4620      	mov	r0, r4
    5ae0:	4b03      	ldr	r3, [pc, #12]	; (5af0 <adc_async_enable_channel+0x3c>)
    5ae2:	4798      	blx	r3
}
    5ae4:	2000      	movs	r0, #0
    5ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ae8:	0000eef8 	.word	0x0000eef8
    5aec:	000072b1 	.word	0x000072b1
    5af0:	00007775 	.word	0x00007775

00005af4 <adc_async_register_callback>:
{
    5af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5af8:	460e      	mov	r6, r1
    5afa:	4614      	mov	r4, r2
    5afc:	4699      	mov	r9, r3
	ASSERT(descr);
    5afe:	f8df 8070 	ldr.w	r8, [pc, #112]	; 5b70 <adc_async_register_callback+0x7c>
    5b02:	4605      	mov	r5, r0
    5b04:	229c      	movs	r2, #156	; 0x9c
    5b06:	4641      	mov	r1, r8
    5b08:	3000      	adds	r0, #0
    5b0a:	bf18      	it	ne
    5b0c:	2001      	movne	r0, #1
    5b0e:	4f16      	ldr	r7, [pc, #88]	; (5b68 <adc_async_register_callback+0x74>)
    5b10:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    5b12:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5b16:	229d      	movs	r2, #157	; 0x9d
    5b18:	4641      	mov	r1, r8
    5b1a:	42b0      	cmp	r0, r6
    5b1c:	bf34      	ite	cc
    5b1e:	2000      	movcc	r0, #0
    5b20:	2001      	movcs	r0, #1
    5b22:	47b8      	blx	r7
	switch (type) {
    5b24:	2c01      	cmp	r4, #1
    5b26:	d019      	beq.n	5b5c <adc_async_register_callback+0x68>
    5b28:	b12c      	cbz	r4, 5b36 <adc_async_register_callback+0x42>
    5b2a:	2c02      	cmp	r4, #2
    5b2c:	d019      	beq.n	5b62 <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    5b2e:	f06f 000c 	mvn.w	r0, #12
}
    5b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    5b36:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    5b38:	5d9b      	ldrb	r3, [r3, r6]
    5b3a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5b3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5b40:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    5b44:	f119 0300 	adds.w	r3, r9, #0
    5b48:	bf18      	it	ne
    5b4a:	2301      	movne	r3, #1
    5b4c:	4622      	mov	r2, r4
    5b4e:	4631      	mov	r1, r6
    5b50:	4628      	mov	r0, r5
    5b52:	4c06      	ldr	r4, [pc, #24]	; (5b6c <adc_async_register_callback+0x78>)
    5b54:	47a0      	blx	r4
	return ERR_NONE;
    5b56:	2000      	movs	r0, #0
    5b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    5b5c:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    5b60:	e7f0      	b.n	5b44 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    5b62:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    5b66:	e7ed      	b.n	5b44 <adc_async_register_callback+0x50>
    5b68:	000072b1 	.word	0x000072b1
    5b6c:	000077b3 	.word	0x000077b3
    5b70:	0000eef8 	.word	0x0000eef8

00005b74 <adc_async_read_channel>:
{
    5b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b78:	b083      	sub	sp, #12
    5b7a:	4688      	mov	r8, r1
    5b7c:	4691      	mov	r9, r2
    5b7e:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    5b80:	4604      	mov	r4, r0
    5b82:	2800      	cmp	r0, #0
    5b84:	d04f      	beq.n	5c26 <adc_async_read_channel+0xb2>
    5b86:	2a00      	cmp	r2, #0
    5b88:	d04f      	beq.n	5c2a <adc_async_read_channel+0xb6>
    5b8a:	1c18      	adds	r0, r3, #0
    5b8c:	bf18      	it	ne
    5b8e:	2001      	movne	r0, #1
    5b90:	4f29      	ldr	r7, [pc, #164]	; (5c38 <adc_async_read_channel+0xc4>)
    5b92:	22bc      	movs	r2, #188	; 0xbc
    5b94:	4639      	mov	r1, r7
    5b96:	4e29      	ldr	r6, [pc, #164]	; (5c3c <adc_async_read_channel+0xc8>)
    5b98:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    5b9a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    5b9e:	22bd      	movs	r2, #189	; 0xbd
    5ba0:	4639      	mov	r1, r7
    5ba2:	4540      	cmp	r0, r8
    5ba4:	bf34      	ite	cc
    5ba6:	2000      	movcc	r0, #0
    5ba8:	2001      	movcs	r0, #1
    5baa:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    5bac:	4620      	mov	r0, r4
    5bae:	4b24      	ldr	r3, [pc, #144]	; (5c40 <adc_async_read_channel+0xcc>)
    5bb0:	4798      	blx	r3
	ASSERT(!(length % data_size));
    5bb2:	fb95 f3f0 	sdiv	r3, r5, r0
    5bb6:	fb03 5010 	mls	r0, r3, r0, r5
    5bba:	22bf      	movs	r2, #191	; 0xbf
    5bbc:	4639      	mov	r1, r7
    5bbe:	fab0 f080 	clz	r0, r0
    5bc2:	0940      	lsrs	r0, r0, #5
    5bc4:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    5bc6:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    5bc8:	f813 b008 	ldrb.w	fp, [r3, r8]
    5bcc:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    5bd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5bd2:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    5bd6:	a801      	add	r0, sp, #4
    5bd8:	4b1a      	ldr	r3, [pc, #104]	; (5c44 <adc_async_read_channel+0xd0>)
    5bda:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    5bdc:	f10b 0a04 	add.w	sl, fp, #4
    5be0:	4650      	mov	r0, sl
    5be2:	4b19      	ldr	r3, [pc, #100]	; (5c48 <adc_async_read_channel+0xd4>)
    5be4:	4798      	blx	r3
    5be6:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    5be8:	a801      	add	r0, sp, #4
    5bea:	4b18      	ldr	r3, [pc, #96]	; (5c4c <adc_async_read_channel+0xd8>)
    5bec:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    5bee:	f1b8 0f00 	cmp.w	r8, #0
    5bf2:	d01c      	beq.n	5c2e <adc_async_read_channel+0xba>
    5bf4:	b1ed      	cbz	r5, 5c32 <adc_async_read_channel+0xbe>
    5bf6:	3d01      	subs	r5, #1
    5bf8:	b2ad      	uxth	r5, r5
    5bfa:	3502      	adds	r5, #2
    5bfc:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    5bfe:	4f14      	ldr	r7, [pc, #80]	; (5c50 <adc_async_read_channel+0xdc>)
    5c00:	b2a6      	uxth	r6, r4
    5c02:	1e61      	subs	r1, r4, #1
    5c04:	4449      	add	r1, r9
    5c06:	4650      	mov	r0, sl
    5c08:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    5c0a:	4544      	cmp	r4, r8
    5c0c:	d002      	beq.n	5c14 <adc_async_read_channel+0xa0>
    5c0e:	3401      	adds	r4, #1
    5c10:	42ac      	cmp	r4, r5
    5c12:	d1f5      	bne.n	5c00 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    5c14:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    5c18:	1b9b      	subs	r3, r3, r6
    5c1a:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    5c1e:	4630      	mov	r0, r6
    5c20:	b003      	add	sp, #12
    5c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    5c26:	2000      	movs	r0, #0
    5c28:	e7b2      	b.n	5b90 <adc_async_read_channel+0x1c>
    5c2a:	2000      	movs	r0, #0
    5c2c:	e7b0      	b.n	5b90 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    5c2e:	2600      	movs	r6, #0
    5c30:	e7f0      	b.n	5c14 <adc_async_read_channel+0xa0>
    5c32:	2600      	movs	r6, #0
    5c34:	e7ee      	b.n	5c14 <adc_async_read_channel+0xa0>
    5c36:	bf00      	nop
    5c38:	0000eef8 	.word	0x0000eef8
    5c3c:	000072b1 	.word	0x000072b1
    5c40:	0000778b 	.word	0x0000778b
    5c44:	00005c7d 	.word	0x00005c7d
    5c48:	0000742d 	.word	0x0000742d
    5c4c:	00005c8b 	.word	0x00005c8b
    5c50:	000073a9 	.word	0x000073a9

00005c54 <adc_async_start_conversion>:
{
    5c54:	b510      	push	{r4, lr}
	ASSERT(descr);
    5c56:	4604      	mov	r4, r0
    5c58:	22d6      	movs	r2, #214	; 0xd6
    5c5a:	4905      	ldr	r1, [pc, #20]	; (5c70 <adc_async_start_conversion+0x1c>)
    5c5c:	3000      	adds	r0, #0
    5c5e:	bf18      	it	ne
    5c60:	2001      	movne	r0, #1
    5c62:	4b04      	ldr	r3, [pc, #16]	; (5c74 <adc_async_start_conversion+0x20>)
    5c64:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    5c66:	4620      	mov	r0, r4
    5c68:	4b03      	ldr	r3, [pc, #12]	; (5c78 <adc_async_start_conversion+0x24>)
    5c6a:	4798      	blx	r3
}
    5c6c:	2000      	movs	r0, #0
    5c6e:	bd10      	pop	{r4, pc}
    5c70:	0000eef8 	.word	0x0000eef8
    5c74:	000072b1 	.word	0x000072b1
    5c78:	0000779d 	.word	0x0000779d

00005c7c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    5c7c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    5c80:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5c82:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    5c84:	f3bf 8f5f 	dmb	sy
    5c88:	4770      	bx	lr

00005c8a <atomic_leave_critical>:
    5c8a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    5c8e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5c90:	f383 8810 	msr	PRIMASK, r3
    5c94:	4770      	bx	lr
	...

00005c98 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    5c98:	b538      	push	{r3, r4, r5, lr}
    5c9a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    5c9c:	4605      	mov	r5, r0
    5c9e:	b158      	cbz	r0, 5cb8 <crc_sync_init+0x20>
    5ca0:	1c08      	adds	r0, r1, #0
    5ca2:	bf18      	it	ne
    5ca4:	2001      	movne	r0, #1
    5ca6:	222b      	movs	r2, #43	; 0x2b
    5ca8:	4904      	ldr	r1, [pc, #16]	; (5cbc <crc_sync_init+0x24>)
    5caa:	4b05      	ldr	r3, [pc, #20]	; (5cc0 <crc_sync_init+0x28>)
    5cac:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    5cae:	4621      	mov	r1, r4
    5cb0:	4628      	mov	r0, r5
    5cb2:	4b04      	ldr	r3, [pc, #16]	; (5cc4 <crc_sync_init+0x2c>)
    5cb4:	4798      	blx	r3
}
    5cb6:	bd38      	pop	{r3, r4, r5, pc}
    5cb8:	2000      	movs	r0, #0
    5cba:	e7f4      	b.n	5ca6 <crc_sync_init+0xe>
    5cbc:	0000ef14 	.word	0x0000ef14
    5cc0:	000072b1 	.word	0x000072b1
    5cc4:	00007b9d 	.word	0x00007b9d

00005cc8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    5cc8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    5cca:	4b02      	ldr	r3, [pc, #8]	; (5cd4 <delay_init+0xc>)
    5ccc:	6018      	str	r0, [r3, #0]
    5cce:	4b02      	ldr	r3, [pc, #8]	; (5cd8 <delay_init+0x10>)
    5cd0:	4798      	blx	r3
    5cd2:	bd08      	pop	{r3, pc}
    5cd4:	200006d0 	.word	0x200006d0
    5cd8:	000097e1 	.word	0x000097e1

00005cdc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    5cdc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    5cde:	4b04      	ldr	r3, [pc, #16]	; (5cf0 <delay_us+0x14>)
    5ce0:	681c      	ldr	r4, [r3, #0]
    5ce2:	4b04      	ldr	r3, [pc, #16]	; (5cf4 <delay_us+0x18>)
    5ce4:	4798      	blx	r3
    5ce6:	4601      	mov	r1, r0
    5ce8:	4620      	mov	r0, r4
    5cea:	4b03      	ldr	r3, [pc, #12]	; (5cf8 <delay_us+0x1c>)
    5cec:	4798      	blx	r3
    5cee:	bd10      	pop	{r4, pc}
    5cf0:	200006d0 	.word	0x200006d0
    5cf4:	00007861 	.word	0x00007861
    5cf8:	000097f5 	.word	0x000097f5

00005cfc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    5cfc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    5cfe:	4b04      	ldr	r3, [pc, #16]	; (5d10 <delay_ms+0x14>)
    5d00:	681c      	ldr	r4, [r3, #0]
    5d02:	4b04      	ldr	r3, [pc, #16]	; (5d14 <delay_ms+0x18>)
    5d04:	4798      	blx	r3
    5d06:	4601      	mov	r1, r0
    5d08:	4620      	mov	r0, r4
    5d0a:	4b03      	ldr	r3, [pc, #12]	; (5d18 <delay_ms+0x1c>)
    5d0c:	4798      	blx	r3
    5d0e:	bd10      	pop	{r4, pc}
    5d10:	200006d0 	.word	0x200006d0
    5d14:	00007869 	.word	0x00007869
    5d18:	000097f5 	.word	0x000097f5

00005d1c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    5d1c:	b508      	push	{r3, lr}
	return _event_system_init();
    5d1e:	4b01      	ldr	r3, [pc, #4]	; (5d24 <event_system_init+0x8>)
    5d20:	4798      	blx	r3
}
    5d22:	bd08      	pop	{r3, pc}
    5d24:	00007ba5 	.word	0x00007ba5

00005d28 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    5d28:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    5d2a:	6943      	ldr	r3, [r0, #20]
    5d2c:	b103      	cbz	r3, 5d30 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    5d2e:	4798      	blx	r3
    5d30:	bd08      	pop	{r3, pc}

00005d32 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    5d32:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    5d34:	6983      	ldr	r3, [r0, #24]
    5d36:	b103      	cbz	r3, 5d3a <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    5d38:	4798      	blx	r3
    5d3a:	bd08      	pop	{r3, pc}

00005d3c <flash_is_address_aligned>:
{
    5d3c:	b538      	push	{r3, r4, r5, lr}
    5d3e:	460c      	mov	r4, r1
	ASSERT(flash);
    5d40:	4605      	mov	r5, r0
    5d42:	f240 1217 	movw	r2, #279	; 0x117
    5d46:	4908      	ldr	r1, [pc, #32]	; (5d68 <flash_is_address_aligned+0x2c>)
    5d48:	3000      	adds	r0, #0
    5d4a:	bf18      	it	ne
    5d4c:	2001      	movne	r0, #1
    5d4e:	4b07      	ldr	r3, [pc, #28]	; (5d6c <flash_is_address_aligned+0x30>)
    5d50:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    5d52:	4628      	mov	r0, r5
    5d54:	4b06      	ldr	r3, [pc, #24]	; (5d70 <flash_is_address_aligned+0x34>)
    5d56:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    5d58:	3801      	subs	r0, #1
    5d5a:	4020      	ands	r0, r4
	return ERR_NONE;
    5d5c:	2800      	cmp	r0, #0
}
    5d5e:	bf14      	ite	ne
    5d60:	f06f 000d 	mvnne.w	r0, #13
    5d64:	2000      	moveq	r0, #0
    5d66:	bd38      	pop	{r3, r4, r5, pc}
    5d68:	0000ef30 	.word	0x0000ef30
    5d6c:	000072b1 	.word	0x000072b1
    5d70:	00007d6d 	.word	0x00007d6d

00005d74 <flash_init>:
{
    5d74:	b538      	push	{r3, r4, r5, lr}
    5d76:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    5d78:	4604      	mov	r4, r0
    5d7a:	b190      	cbz	r0, 5da2 <flash_init+0x2e>
    5d7c:	1c08      	adds	r0, r1, #0
    5d7e:	bf18      	it	ne
    5d80:	2001      	movne	r0, #1
    5d82:	2238      	movs	r2, #56	; 0x38
    5d84:	4908      	ldr	r1, [pc, #32]	; (5da8 <flash_init+0x34>)
    5d86:	4b09      	ldr	r3, [pc, #36]	; (5dac <flash_init+0x38>)
    5d88:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    5d8a:	4629      	mov	r1, r5
    5d8c:	4620      	mov	r0, r4
    5d8e:	4b08      	ldr	r3, [pc, #32]	; (5db0 <flash_init+0x3c>)
    5d90:	4798      	blx	r3
	if (rc) {
    5d92:	4603      	mov	r3, r0
    5d94:	b918      	cbnz	r0, 5d9e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    5d96:	4a07      	ldr	r2, [pc, #28]	; (5db4 <flash_init+0x40>)
    5d98:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    5d9a:	4a07      	ldr	r2, [pc, #28]	; (5db8 <flash_init+0x44>)
    5d9c:	6062      	str	r2, [r4, #4]
}
    5d9e:	4618      	mov	r0, r3
    5da0:	bd38      	pop	{r3, r4, r5, pc}
    5da2:	2000      	movs	r0, #0
    5da4:	e7ed      	b.n	5d82 <flash_init+0xe>
    5da6:	bf00      	nop
    5da8:	0000ef30 	.word	0x0000ef30
    5dac:	000072b1 	.word	0x000072b1
    5db0:	00007cf5 	.word	0x00007cf5
    5db4:	00005d29 	.word	0x00005d29
    5db8:	00005d33 	.word	0x00005d33

00005dbc <flash_read>:
{
    5dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5dc0:	460d      	mov	r5, r1
    5dc2:	4690      	mov	r8, r2
    5dc4:	461e      	mov	r6, r3
	ASSERT(flash && buffer && length);
    5dc6:	4604      	mov	r4, r0
    5dc8:	b1f0      	cbz	r0, 5e08 <flash_read+0x4c>
    5dca:	b1fa      	cbz	r2, 5e0c <flash_read+0x50>
    5dcc:	b343      	cbz	r3, 5e20 <flash_read+0x64>
    5dce:	2001      	movs	r0, #1
    5dd0:	2256      	movs	r2, #86	; 0x56
    5dd2:	491e      	ldr	r1, [pc, #120]	; (5e4c <flash_read+0x90>)
    5dd4:	4b1e      	ldr	r3, [pc, #120]	; (5e50 <flash_read+0x94>)
    5dd6:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    5dd8:	46a1      	mov	r9, r4
    5dda:	4620      	mov	r0, r4
    5ddc:	4b1d      	ldr	r3, [pc, #116]	; (5e54 <flash_read+0x98>)
    5dde:	4798      	blx	r3
    5de0:	4607      	mov	r7, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    5de2:	4620      	mov	r0, r4
    5de4:	4b1c      	ldr	r3, [pc, #112]	; (5e58 <flash_read+0x9c>)
    5de6:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    5de8:	fb00 f007 	mul.w	r0, r0, r7
    5dec:	42a8      	cmp	r0, r5
    5dee:	d30f      	bcc.n	5e10 <flash_read+0x54>
    5df0:	1973      	adds	r3, r6, r5
    5df2:	4298      	cmp	r0, r3
    5df4:	d310      	bcc.n	5e18 <flash_read+0x5c>
	_flash_read(&flash->dev, src_addr, buffer, length);
    5df6:	4633      	mov	r3, r6
    5df8:	4642      	mov	r2, r8
    5dfa:	4629      	mov	r1, r5
    5dfc:	4648      	mov	r0, r9
    5dfe:	4c17      	ldr	r4, [pc, #92]	; (5e5c <flash_read+0xa0>)
    5e00:	47a0      	blx	r4
	return ERR_NONE;
    5e02:	2000      	movs	r0, #0
    5e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    5e08:	2000      	movs	r0, #0
    5e0a:	e7e1      	b.n	5dd0 <flash_read+0x14>
    5e0c:	2000      	movs	r0, #0
    5e0e:	e7df      	b.n	5dd0 <flash_read+0x14>
		return ERR_BAD_ADDRESS;
    5e10:	f06f 000d 	mvn.w	r0, #13
    5e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5e18:	f06f 000d 	mvn.w	r0, #13
    5e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    5e20:	2256      	movs	r2, #86	; 0x56
    5e22:	490a      	ldr	r1, [pc, #40]	; (5e4c <flash_read+0x90>)
    5e24:	2000      	movs	r0, #0
    5e26:	4b0a      	ldr	r3, [pc, #40]	; (5e50 <flash_read+0x94>)
    5e28:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    5e2a:	46a1      	mov	r9, r4
    5e2c:	4620      	mov	r0, r4
    5e2e:	4b09      	ldr	r3, [pc, #36]	; (5e54 <flash_read+0x98>)
    5e30:	4798      	blx	r3
    5e32:	4607      	mov	r7, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    5e34:	4620      	mov	r0, r4
    5e36:	4b08      	ldr	r3, [pc, #32]	; (5e58 <flash_read+0x9c>)
    5e38:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    5e3a:	fb00 f007 	mul.w	r0, r0, r7
    5e3e:	4285      	cmp	r5, r0
    5e40:	d9d9      	bls.n	5df6 <flash_read+0x3a>
		return ERR_BAD_ADDRESS;
    5e42:	f06f 000d 	mvn.w	r0, #13
    5e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5e4a:	bf00      	nop
    5e4c:	0000ef30 	.word	0x0000ef30
    5e50:	000072b1 	.word	0x000072b1
    5e54:	00007d6d 	.word	0x00007d6d
    5e58:	00007d73 	.word	0x00007d73
    5e5c:	00007d7b 	.word	0x00007d7b

00005e60 <flash_write>:
{
    5e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e64:	460c      	mov	r4, r1
    5e66:	4691      	mov	r9, r2
    5e68:	461f      	mov	r7, r3
	ASSERT(flash && buffer && length);
    5e6a:	4605      	mov	r5, r0
    5e6c:	b318      	cbz	r0, 5eb6 <flash_write+0x56>
    5e6e:	b322      	cbz	r2, 5eba <flash_write+0x5a>
    5e70:	b38b      	cbz	r3, 5ed6 <flash_write+0x76>
    5e72:	2001      	movs	r0, #1
    5e74:	226a      	movs	r2, #106	; 0x6a
    5e76:	4922      	ldr	r1, [pc, #136]	; (5f00 <flash_write+0xa0>)
    5e78:	4b22      	ldr	r3, [pc, #136]	; (5f04 <flash_write+0xa4>)
    5e7a:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    5e7c:	46a8      	mov	r8, r5
    5e7e:	4628      	mov	r0, r5
    5e80:	4b21      	ldr	r3, [pc, #132]	; (5f08 <flash_write+0xa8>)
    5e82:	4798      	blx	r3
    5e84:	4606      	mov	r6, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    5e86:	4628      	mov	r0, r5
    5e88:	4b20      	ldr	r3, [pc, #128]	; (5f0c <flash_write+0xac>)
    5e8a:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    5e8c:	fb00 f006 	mul.w	r0, r0, r6
    5e90:	42a0      	cmp	r0, r4
    5e92:	d314      	bcc.n	5ebe <flash_write+0x5e>
    5e94:	193b      	adds	r3, r7, r4
    5e96:	4298      	cmp	r0, r3
    5e98:	d315      	bcc.n	5ec6 <flash_write+0x66>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    5e9a:	4621      	mov	r1, r4
    5e9c:	4640      	mov	r0, r8
    5e9e:	4b1c      	ldr	r3, [pc, #112]	; (5f10 <flash_write+0xb0>)
    5ea0:	4798      	blx	r3
    5ea2:	b9a0      	cbnz	r0, 5ece <flash_write+0x6e>
	_flash_write(&flash->dev, dst_addr, buffer, length);
    5ea4:	463b      	mov	r3, r7
    5ea6:	464a      	mov	r2, r9
    5ea8:	4621      	mov	r1, r4
    5eaa:	4640      	mov	r0, r8
    5eac:	4c19      	ldr	r4, [pc, #100]	; (5f14 <flash_write+0xb4>)
    5eae:	47a0      	blx	r4
	return ERR_NONE;
    5eb0:	2000      	movs	r0, #0
    5eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    5eb6:	2000      	movs	r0, #0
    5eb8:	e7dc      	b.n	5e74 <flash_write+0x14>
    5eba:	2000      	movs	r0, #0
    5ebc:	e7da      	b.n	5e74 <flash_write+0x14>
		return ERR_BAD_ADDRESS;
    5ebe:	f06f 000d 	mvn.w	r0, #13
    5ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ec6:	f06f 000d 	mvn.w	r0, #13
    5eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_DENIED;
    5ece:	f06f 0010 	mvn.w	r0, #16
    5ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    5ed6:	226a      	movs	r2, #106	; 0x6a
    5ed8:	4909      	ldr	r1, [pc, #36]	; (5f00 <flash_write+0xa0>)
    5eda:	2000      	movs	r0, #0
    5edc:	4b09      	ldr	r3, [pc, #36]	; (5f04 <flash_write+0xa4>)
    5ede:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    5ee0:	46a8      	mov	r8, r5
    5ee2:	4628      	mov	r0, r5
    5ee4:	4b08      	ldr	r3, [pc, #32]	; (5f08 <flash_write+0xa8>)
    5ee6:	4798      	blx	r3
    5ee8:	4606      	mov	r6, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    5eea:	4628      	mov	r0, r5
    5eec:	4b07      	ldr	r3, [pc, #28]	; (5f0c <flash_write+0xac>)
    5eee:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    5ef0:	fb00 f006 	mul.w	r0, r0, r6
    5ef4:	4284      	cmp	r4, r0
    5ef6:	d9d0      	bls.n	5e9a <flash_write+0x3a>
		return ERR_BAD_ADDRESS;
    5ef8:	f06f 000d 	mvn.w	r0, #13
    5efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5f00:	0000ef30 	.word	0x0000ef30
    5f04:	000072b1 	.word	0x000072b1
    5f08:	00007d6d 	.word	0x00007d6d
    5f0c:	00007d73 	.word	0x00007d73
    5f10:	00007f55 	.word	0x00007f55
    5f14:	00007da1 	.word	0x00007da1

00005f18 <flash_erase>:
{
    5f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f1c:	460f      	mov	r7, r1
    5f1e:	4616      	mov	r6, r2
	ASSERT(flash && page_nums);
    5f20:	4604      	mov	r4, r0
    5f22:	b320      	cbz	r0, 5f6e <flash_erase+0x56>
    5f24:	b35a      	cbz	r2, 5f7e <flash_erase+0x66>
    5f26:	2001      	movs	r0, #1
    5f28:	229a      	movs	r2, #154	; 0x9a
    5f2a:	4920      	ldr	r1, [pc, #128]	; (5fac <flash_erase+0x94>)
    5f2c:	4b20      	ldr	r3, [pc, #128]	; (5fb0 <flash_erase+0x98>)
    5f2e:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    5f30:	46a1      	mov	r9, r4
    5f32:	4620      	mov	r0, r4
    5f34:	4b1f      	ldr	r3, [pc, #124]	; (5fb4 <flash_erase+0x9c>)
    5f36:	4798      	blx	r3
    5f38:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    5f3a:	4620      	mov	r0, r4
    5f3c:	4b1e      	ldr	r3, [pc, #120]	; (5fb8 <flash_erase+0xa0>)
    5f3e:	4798      	blx	r3
    5f40:	4680      	mov	r8, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    5f42:	4639      	mov	r1, r7
    5f44:	4620      	mov	r0, r4
    5f46:	4b1d      	ldr	r3, [pc, #116]	; (5fbc <flash_erase+0xa4>)
    5f48:	4798      	blx	r3
	if (rc) {
    5f4a:	4603      	mov	r3, r0
    5f4c:	b960      	cbnz	r0, 5f68 <flash_erase+0x50>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    5f4e:	4546      	cmp	r6, r8
    5f50:	d80f      	bhi.n	5f72 <flash_erase+0x5a>
    5f52:	fbb7 f5f5 	udiv	r5, r7, r5
    5f56:	4435      	add	r5, r6
    5f58:	4545      	cmp	r5, r8
    5f5a:	d80d      	bhi.n	5f78 <flash_erase+0x60>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    5f5c:	4632      	mov	r2, r6
    5f5e:	4639      	mov	r1, r7
    5f60:	4648      	mov	r0, r9
    5f62:	4b17      	ldr	r3, [pc, #92]	; (5fc0 <flash_erase+0xa8>)
    5f64:	4798      	blx	r3
	return ERR_NONE;
    5f66:	2300      	movs	r3, #0
}
    5f68:	4618      	mov	r0, r3
    5f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && page_nums);
    5f6e:	2000      	movs	r0, #0
    5f70:	e7da      	b.n	5f28 <flash_erase+0x10>
		return ERR_INVALID_ARG;
    5f72:	f06f 030c 	mvn.w	r3, #12
    5f76:	e7f7      	b.n	5f68 <flash_erase+0x50>
    5f78:	f06f 030c 	mvn.w	r3, #12
    5f7c:	e7f4      	b.n	5f68 <flash_erase+0x50>
	ASSERT(flash && page_nums);
    5f7e:	229a      	movs	r2, #154	; 0x9a
    5f80:	490a      	ldr	r1, [pc, #40]	; (5fac <flash_erase+0x94>)
    5f82:	2000      	movs	r0, #0
    5f84:	4b0a      	ldr	r3, [pc, #40]	; (5fb0 <flash_erase+0x98>)
    5f86:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    5f88:	46a1      	mov	r9, r4
    5f8a:	4620      	mov	r0, r4
    5f8c:	4b09      	ldr	r3, [pc, #36]	; (5fb4 <flash_erase+0x9c>)
    5f8e:	4798      	blx	r3
    5f90:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    5f92:	4620      	mov	r0, r4
    5f94:	4b08      	ldr	r3, [pc, #32]	; (5fb8 <flash_erase+0xa0>)
    5f96:	4798      	blx	r3
    5f98:	4680      	mov	r8, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    5f9a:	4639      	mov	r1, r7
    5f9c:	4620      	mov	r0, r4
    5f9e:	4b07      	ldr	r3, [pc, #28]	; (5fbc <flash_erase+0xa4>)
    5fa0:	4798      	blx	r3
	if (rc) {
    5fa2:	4603      	mov	r3, r0
    5fa4:	2800      	cmp	r0, #0
    5fa6:	d0d4      	beq.n	5f52 <flash_erase+0x3a>
    5fa8:	e7de      	b.n	5f68 <flash_erase+0x50>
    5faa:	bf00      	nop
    5fac:	0000ef30 	.word	0x0000ef30
    5fb0:	000072b1 	.word	0x000072b1
    5fb4:	00007d6d 	.word	0x00007d6d
    5fb8:	00007d73 	.word	0x00007d73
    5fbc:	00005d3d 	.word	0x00005d3d
    5fc0:	00007e91 	.word	0x00007e91

00005fc4 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5fc4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5fc6:	8843      	ldrh	r3, [r0, #2]
    5fc8:	f413 7f80 	tst.w	r3, #256	; 0x100
    5fcc:	d102      	bne.n	5fd4 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    5fce:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5fd0:	b103      	cbz	r3, 5fd4 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    5fd2:	4798      	blx	r3
    5fd4:	bd08      	pop	{r3, pc}

00005fd6 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5fd6:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5fd8:	8843      	ldrh	r3, [r0, #2]
    5fda:	f413 7f80 	tst.w	r3, #256	; 0x100
    5fde:	d102      	bne.n	5fe6 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    5fe0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5fe2:	b103      	cbz	r3, 5fe6 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    5fe4:	4798      	blx	r3
    5fe6:	bd08      	pop	{r3, pc}

00005fe8 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    5fe8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5fea:	8843      	ldrh	r3, [r0, #2]
    5fec:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ff0:	d102      	bne.n	5ff8 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    5ff2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5ff4:	b103      	cbz	r3, 5ff8 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    5ff6:	4798      	blx	r3
    5ff8:	bd08      	pop	{r3, pc}
	...

00005ffc <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    5ffc:	b510      	push	{r4, lr}
    5ffe:	b084      	sub	sp, #16
    6000:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    6002:	8a83      	ldrh	r3, [r0, #20]
    6004:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    6008:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    600e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    6012:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    6014:	a901      	add	r1, sp, #4
    6016:	3828      	subs	r0, #40	; 0x28
    6018:	4b03      	ldr	r3, [pc, #12]	; (6028 <i2c_m_async_write+0x2c>)
    601a:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    601c:	2800      	cmp	r0, #0
    601e:	bf08      	it	eq
    6020:	4620      	moveq	r0, r4
    6022:	b004      	add	sp, #16
    6024:	bd10      	pop	{r4, pc}
    6026:	bf00      	nop
    6028:	00008d31 	.word	0x00008d31

0000602c <i2c_m_async_read>:
{
    602c:	b510      	push	{r4, lr}
    602e:	b084      	sub	sp, #16
    6030:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    6032:	8a83      	ldrh	r3, [r0, #20]
    6034:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    6038:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    603a:	f248 0301 	movw	r3, #32769	; 0x8001
    603e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    6042:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    6044:	a901      	add	r1, sp, #4
    6046:	3828      	subs	r0, #40	; 0x28
    6048:	4b03      	ldr	r3, [pc, #12]	; (6058 <i2c_m_async_read+0x2c>)
    604a:	4798      	blx	r3
}
    604c:	2800      	cmp	r0, #0
    604e:	bf08      	it	eq
    6050:	4620      	moveq	r0, r4
    6052:	b004      	add	sp, #16
    6054:	bd10      	pop	{r4, pc}
    6056:	bf00      	nop
    6058:	00008d31 	.word	0x00008d31

0000605c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    605c:	b570      	push	{r4, r5, r6, lr}
    605e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    6060:	4604      	mov	r4, r0
    6062:	2289      	movs	r2, #137	; 0x89
    6064:	490f      	ldr	r1, [pc, #60]	; (60a4 <i2c_m_async_init+0x48>)
    6066:	3000      	adds	r0, #0
    6068:	bf18      	it	ne
    606a:	2001      	movne	r0, #1
    606c:	4b0e      	ldr	r3, [pc, #56]	; (60a8 <i2c_m_async_init+0x4c>)
    606e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    6070:	4629      	mov	r1, r5
    6072:	4620      	mov	r0, r4
    6074:	4b0d      	ldr	r3, [pc, #52]	; (60ac <i2c_m_async_init+0x50>)
    6076:	4798      	blx	r3
	if (init_status) {
    6078:	4605      	mov	r5, r0
    607a:	b108      	cbz	r0, 6080 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    607c:	4628      	mov	r0, r5
    607e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    6080:	4b0b      	ldr	r3, [pc, #44]	; (60b0 <i2c_m_async_init+0x54>)
    6082:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    6084:	4b0b      	ldr	r3, [pc, #44]	; (60b4 <i2c_m_async_init+0x58>)
    6086:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    6088:	4a0b      	ldr	r2, [pc, #44]	; (60b8 <i2c_m_async_init+0x5c>)
    608a:	2101      	movs	r1, #1
    608c:	4620      	mov	r0, r4
    608e:	4e0b      	ldr	r6, [pc, #44]	; (60bc <i2c_m_async_init+0x60>)
    6090:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    6092:	4a0b      	ldr	r2, [pc, #44]	; (60c0 <i2c_m_async_init+0x64>)
    6094:	2102      	movs	r1, #2
    6096:	4620      	mov	r0, r4
    6098:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    609a:	4a0a      	ldr	r2, [pc, #40]	; (60c4 <i2c_m_async_init+0x68>)
    609c:	2100      	movs	r1, #0
    609e:	4620      	mov	r0, r4
    60a0:	47b0      	blx	r6
	return ERR_NONE;
    60a2:	e7eb      	b.n	607c <i2c_m_async_init+0x20>
    60a4:	0000ef48 	.word	0x0000ef48
    60a8:	000072b1 	.word	0x000072b1
    60ac:	00008cb1 	.word	0x00008cb1
    60b0:	0000602d 	.word	0x0000602d
    60b4:	00005ffd 	.word	0x00005ffd
    60b8:	00005fc5 	.word	0x00005fc5
    60bc:	00008e61 	.word	0x00008e61
    60c0:	00005fd7 	.word	0x00005fd7
    60c4:	00005fe9 	.word	0x00005fe9

000060c8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    60c8:	b570      	push	{r4, r5, r6, lr}
    60ca:	460d      	mov	r5, r1
    60cc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    60ce:	4604      	mov	r4, r0
    60d0:	b160      	cbz	r0, 60ec <io_write+0x24>
    60d2:	1c08      	adds	r0, r1, #0
    60d4:	bf18      	it	ne
    60d6:	2001      	movne	r0, #1
    60d8:	2234      	movs	r2, #52	; 0x34
    60da:	4905      	ldr	r1, [pc, #20]	; (60f0 <io_write+0x28>)
    60dc:	4b05      	ldr	r3, [pc, #20]	; (60f4 <io_write+0x2c>)
    60de:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    60e0:	6823      	ldr	r3, [r4, #0]
    60e2:	4632      	mov	r2, r6
    60e4:	4629      	mov	r1, r5
    60e6:	4620      	mov	r0, r4
    60e8:	4798      	blx	r3
}
    60ea:	bd70      	pop	{r4, r5, r6, pc}
    60ec:	2000      	movs	r0, #0
    60ee:	e7f3      	b.n	60d8 <io_write+0x10>
    60f0:	0000ef68 	.word	0x0000ef68
    60f4:	000072b1 	.word	0x000072b1

000060f8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    60f8:	b570      	push	{r4, r5, r6, lr}
    60fa:	460d      	mov	r5, r1
    60fc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    60fe:	4604      	mov	r4, r0
    6100:	b160      	cbz	r0, 611c <io_read+0x24>
    6102:	1c08      	adds	r0, r1, #0
    6104:	bf18      	it	ne
    6106:	2001      	movne	r0, #1
    6108:	223d      	movs	r2, #61	; 0x3d
    610a:	4905      	ldr	r1, [pc, #20]	; (6120 <io_read+0x28>)
    610c:	4b05      	ldr	r3, [pc, #20]	; (6124 <io_read+0x2c>)
    610e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    6110:	6863      	ldr	r3, [r4, #4]
    6112:	4632      	mov	r2, r6
    6114:	4629      	mov	r1, r5
    6116:	4620      	mov	r0, r4
    6118:	4798      	blx	r3
}
    611a:	bd70      	pop	{r4, r5, r6, pc}
    611c:	2000      	movs	r0, #0
    611e:	e7f3      	b.n	6108 <io_read+0x10>
    6120:	0000ef68 	.word	0x0000ef68
    6124:	000072b1 	.word	0x000072b1

00006128 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    6128:	b538      	push	{r3, r4, r5, lr}
    612a:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    612c:	4605      	mov	r5, r0
    612e:	b158      	cbz	r0, 6148 <qspi_dma_init+0x20>
    6130:	1c08      	adds	r0, r1, #0
    6132:	bf18      	it	ne
    6134:	2001      	movne	r0, #1
    6136:	2231      	movs	r2, #49	; 0x31
    6138:	4904      	ldr	r1, [pc, #16]	; (614c <qspi_dma_init+0x24>)
    613a:	4b05      	ldr	r3, [pc, #20]	; (6150 <qspi_dma_init+0x28>)
    613c:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    613e:	4621      	mov	r1, r4
    6140:	4628      	mov	r0, r5
    6142:	4b04      	ldr	r3, [pc, #16]	; (6154 <qspi_dma_init+0x2c>)
    6144:	4798      	blx	r3
}
    6146:	bd38      	pop	{r3, r4, r5, pc}
    6148:	2000      	movs	r0, #0
    614a:	e7f4      	b.n	6136 <qspi_dma_init+0xe>
    614c:	0000ef7c 	.word	0x0000ef7c
    6150:	000072b1 	.word	0x000072b1
    6154:	00008115 	.word	0x00008115

00006158 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    6158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    615a:	460f      	mov	r7, r1
    615c:	4616      	mov	r6, r2
	ASSERT(io);
    615e:	4604      	mov	r4, r0
    6160:	f240 1227 	movw	r2, #295	; 0x127
    6164:	4909      	ldr	r1, [pc, #36]	; (618c <_spi_m_async_io_write+0x34>)
    6166:	3000      	adds	r0, #0
    6168:	bf18      	it	ne
    616a:	2001      	movne	r0, #1
    616c:	4b08      	ldr	r3, [pc, #32]	; (6190 <_spi_m_async_io_write+0x38>)
    616e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    6170:	2500      	movs	r5, #0
    6172:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    6174:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    6176:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    6178:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    617a:	2310      	movs	r3, #16
    617c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    617e:	2101      	movs	r1, #1
    6180:	f1a4 0020 	sub.w	r0, r4, #32
    6184:	4b03      	ldr	r3, [pc, #12]	; (6194 <_spi_m_async_io_write+0x3c>)
    6186:	4798      	blx	r3

	return ERR_NONE;
}
    6188:	4628      	mov	r0, r5
    618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    618c:	0000ef98 	.word	0x0000ef98
    6190:	000072b1 	.word	0x000072b1
    6194:	000092f5 	.word	0x000092f5

00006198 <_spi_m_async_io_read>:
{
    6198:	b570      	push	{r4, r5, r6, lr}
    619a:	460d      	mov	r5, r1
    619c:	4616      	mov	r6, r2
	ASSERT(io);
    619e:	4604      	mov	r4, r0
    61a0:	f240 1205 	movw	r2, #261	; 0x105
    61a4:	490c      	ldr	r1, [pc, #48]	; (61d8 <_spi_m_async_io_read+0x40>)
    61a6:	3000      	adds	r0, #0
    61a8:	bf18      	it	ne
    61aa:	2001      	movne	r0, #1
    61ac:	4b0b      	ldr	r3, [pc, #44]	; (61dc <_spi_m_async_io_read+0x44>)
    61ae:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    61b0:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    61b2:	2500      	movs	r5, #0
    61b4:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    61b6:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    61b8:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    61ba:	2310      	movs	r3, #16
    61bc:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    61be:	3c20      	subs	r4, #32
    61c0:	2101      	movs	r1, #1
    61c2:	4620      	mov	r0, r4
    61c4:	4b06      	ldr	r3, [pc, #24]	; (61e0 <_spi_m_async_io_read+0x48>)
    61c6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    61c8:	f240 11ff 	movw	r1, #511	; 0x1ff
    61cc:	4620      	mov	r0, r4
    61ce:	4b05      	ldr	r3, [pc, #20]	; (61e4 <_spi_m_async_io_read+0x4c>)
    61d0:	4798      	blx	r3
}
    61d2:	4628      	mov	r0, r5
    61d4:	bd70      	pop	{r4, r5, r6, pc}
    61d6:	bf00      	nop
    61d8:	0000ef98 	.word	0x0000ef98
    61dc:	000072b1 	.word	0x000072b1
    61e0:	00009329 	.word	0x00009329
    61e4:	000093a5 	.word	0x000093a5

000061e8 <_spi_dev_error>:
{
    61e8:	b570      	push	{r4, r5, r6, lr}
    61ea:	4604      	mov	r4, r0
    61ec:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    61ee:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    61f0:	2100      	movs	r1, #0
    61f2:	4b09      	ldr	r3, [pc, #36]	; (6218 <_spi_dev_error+0x30>)
    61f4:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    61f6:	2100      	movs	r1, #0
    61f8:	4620      	mov	r0, r4
    61fa:	4b08      	ldr	r3, [pc, #32]	; (621c <_spi_dev_error+0x34>)
    61fc:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    61fe:	2100      	movs	r1, #0
    6200:	4620      	mov	r0, r4
    6202:	4b07      	ldr	r3, [pc, #28]	; (6220 <_spi_dev_error+0x38>)
    6204:	4798      	blx	r3
	spi->stat = 0;
    6206:	2300      	movs	r3, #0
    6208:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    620c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    620e:	b113      	cbz	r3, 6216 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    6210:	4631      	mov	r1, r6
    6212:	4628      	mov	r0, r5
    6214:	4798      	blx	r3
    6216:	bd70      	pop	{r4, r5, r6, pc}
    6218:	000092f5 	.word	0x000092f5
    621c:	00009329 	.word	0x00009329
    6220:	00009369 	.word	0x00009369

00006224 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    6224:	6c02      	ldr	r2, [r0, #64]	; 0x40
    6226:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6228:	429a      	cmp	r2, r3
    622a:	d200      	bcs.n	622e <_spi_dev_complete+0xa>
    622c:	4770      	bx	lr
{
    622e:	b510      	push	{r4, lr}
    6230:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    6232:	2100      	movs	r1, #0
    6234:	4b04      	ldr	r3, [pc, #16]	; (6248 <_spi_dev_complete+0x24>)
    6236:	4798      	blx	r3
		spi->stat = 0;
    6238:	2300      	movs	r3, #0
    623a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    623e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6240:	b10b      	cbz	r3, 6246 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    6242:	1f20      	subs	r0, r4, #4
    6244:	4798      	blx	r3
    6246:	bd10      	pop	{r4, pc}
    6248:	00009369 	.word	0x00009369

0000624c <_spi_dev_tx>:
{
    624c:	b510      	push	{r4, lr}
    624e:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    6250:	7903      	ldrb	r3, [r0, #4]
    6252:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    6254:	6b42      	ldr	r2, [r0, #52]	; 0x34
    6256:	6c03      	ldr	r3, [r0, #64]	; 0x40
    6258:	f103 0101 	add.w	r1, r3, #1
    625c:	6401      	str	r1, [r0, #64]	; 0x40
    625e:	bf94      	ite	ls
    6260:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    6262:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    6266:	4b08      	ldr	r3, [pc, #32]	; (6288 <_spi_dev_tx+0x3c>)
    6268:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    626a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    626c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    626e:	429a      	cmp	r2, r3
    6270:	d000      	beq.n	6274 <_spi_dev_tx+0x28>
    6272:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    6274:	2100      	movs	r1, #0
    6276:	4620      	mov	r0, r4
    6278:	4b04      	ldr	r3, [pc, #16]	; (628c <_spi_dev_tx+0x40>)
    627a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    627c:	2101      	movs	r1, #1
    627e:	4620      	mov	r0, r4
    6280:	4b03      	ldr	r3, [pc, #12]	; (6290 <_spi_dev_tx+0x44>)
    6282:	4798      	blx	r3
}
    6284:	e7f5      	b.n	6272 <_spi_dev_tx+0x26>
    6286:	bf00      	nop
    6288:	000093a5 	.word	0x000093a5
    628c:	000092f5 	.word	0x000092f5
    6290:	00009369 	.word	0x00009369

00006294 <_spi_dev_rx>:
{
    6294:	b570      	push	{r4, r5, r6, lr}
    6296:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    6298:	6b85      	ldr	r5, [r0, #56]	; 0x38
    629a:	b305      	cbz	r5, 62de <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    629c:	7903      	ldrb	r3, [r0, #4]
    629e:	2b01      	cmp	r3, #1
    62a0:	d916      	bls.n	62d0 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    62a2:	6c06      	ldr	r6, [r0, #64]	; 0x40
    62a4:	1c73      	adds	r3, r6, #1
    62a6:	6403      	str	r3, [r0, #64]	; 0x40
    62a8:	4b18      	ldr	r3, [pc, #96]	; (630c <_spi_dev_rx+0x78>)
    62aa:	4798      	blx	r3
    62ac:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    62b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    62b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    62b4:	4293      	cmp	r3, r2
    62b6:	d21d      	bcs.n	62f4 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    62b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    62ba:	b1b2      	cbz	r2, 62ea <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    62bc:	7921      	ldrb	r1, [r4, #4]
    62be:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    62c0:	bf94      	ite	ls
    62c2:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    62c4:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    62c8:	4620      	mov	r0, r4
    62ca:	4b11      	ldr	r3, [pc, #68]	; (6310 <_spi_dev_rx+0x7c>)
    62cc:	4798      	blx	r3
    62ce:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    62d0:	6c06      	ldr	r6, [r0, #64]	; 0x40
    62d2:	1c73      	adds	r3, r6, #1
    62d4:	6403      	str	r3, [r0, #64]	; 0x40
    62d6:	4b0d      	ldr	r3, [pc, #52]	; (630c <_spi_dev_rx+0x78>)
    62d8:	4798      	blx	r3
    62da:	55a8      	strb	r0, [r5, r6]
    62dc:	e7e8      	b.n	62b0 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    62de:	4b0b      	ldr	r3, [pc, #44]	; (630c <_spi_dev_rx+0x78>)
    62e0:	4798      	blx	r3
		spi->xfercnt++;
    62e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    62e4:	3301      	adds	r3, #1
    62e6:	6423      	str	r3, [r4, #64]	; 0x40
    62e8:	e7e2      	b.n	62b0 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    62ea:	88e1      	ldrh	r1, [r4, #6]
    62ec:	4620      	mov	r0, r4
    62ee:	4b08      	ldr	r3, [pc, #32]	; (6310 <_spi_dev_rx+0x7c>)
    62f0:	4798      	blx	r3
    62f2:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    62f4:	2100      	movs	r1, #0
    62f6:	4620      	mov	r0, r4
    62f8:	4b06      	ldr	r3, [pc, #24]	; (6314 <_spi_dev_rx+0x80>)
    62fa:	4798      	blx	r3
		spi->stat = 0;
    62fc:	2300      	movs	r3, #0
    62fe:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    6302:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6304:	b10b      	cbz	r3, 630a <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    6306:	1f20      	subs	r0, r4, #4
    6308:	4798      	blx	r3
    630a:	bd70      	pop	{r4, r5, r6, pc}
    630c:	000093d5 	.word	0x000093d5
    6310:	000093a5 	.word	0x000093a5
    6314:	00009329 	.word	0x00009329

00006318 <spi_m_async_init>:
{
    6318:	b570      	push	{r4, r5, r6, lr}
    631a:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    631c:	4606      	mov	r6, r0
    631e:	b330      	cbz	r0, 636e <spi_m_async_init+0x56>
    6320:	1c08      	adds	r0, r1, #0
    6322:	bf18      	it	ne
    6324:	2001      	movne	r0, #1
    6326:	22a5      	movs	r2, #165	; 0xa5
    6328:	4912      	ldr	r1, [pc, #72]	; (6374 <spi_m_async_init+0x5c>)
    632a:	4b13      	ldr	r3, [pc, #76]	; (6378 <spi_m_async_init+0x60>)
    632c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    632e:	4634      	mov	r4, r6
    6330:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    6334:	4629      	mov	r1, r5
    6336:	4620      	mov	r0, r4
    6338:	4b10      	ldr	r3, [pc, #64]	; (637c <spi_m_async_init+0x64>)
    633a:	4798      	blx	r3
	if (rc >= 0) {
    633c:	2800      	cmp	r0, #0
    633e:	db15      	blt.n	636c <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    6340:	4a0f      	ldr	r2, [pc, #60]	; (6380 <spi_m_async_init+0x68>)
    6342:	2100      	movs	r1, #0
    6344:	4620      	mov	r0, r4
    6346:	4d0f      	ldr	r5, [pc, #60]	; (6384 <spi_m_async_init+0x6c>)
    6348:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    634a:	4a0f      	ldr	r2, [pc, #60]	; (6388 <spi_m_async_init+0x70>)
    634c:	2101      	movs	r1, #1
    634e:	4620      	mov	r0, r4
    6350:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    6352:	4a0e      	ldr	r2, [pc, #56]	; (638c <spi_m_async_init+0x74>)
    6354:	2102      	movs	r1, #2
    6356:	4620      	mov	r0, r4
    6358:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    635a:	4a0d      	ldr	r2, [pc, #52]	; (6390 <spi_m_async_init+0x78>)
    635c:	2103      	movs	r1, #3
    635e:	4620      	mov	r0, r4
    6360:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    6362:	4b0c      	ldr	r3, [pc, #48]	; (6394 <spi_m_async_init+0x7c>)
    6364:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    6366:	4b0c      	ldr	r3, [pc, #48]	; (6398 <spi_m_async_init+0x80>)
    6368:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    636a:	2000      	movs	r0, #0
}
    636c:	bd70      	pop	{r4, r5, r6, pc}
    636e:	2000      	movs	r0, #0
    6370:	e7d9      	b.n	6326 <spi_m_async_init+0xe>
    6372:	bf00      	nop
    6374:	0000ef98 	.word	0x0000ef98
    6378:	000072b1 	.word	0x000072b1
    637c:	000091ed 	.word	0x000091ed
    6380:	0000624d 	.word	0x0000624d
    6384:	00009401 	.word	0x00009401
    6388:	00006295 	.word	0x00006295
    638c:	00006225 	.word	0x00006225
    6390:	000061e9 	.word	0x000061e9
    6394:	00006199 	.word	0x00006199
    6398:	00006159 	.word	0x00006159

0000639c <spi_m_async_enable>:
{
    639c:	b510      	push	{r4, lr}
	ASSERT(spi);
    639e:	4604      	mov	r4, r0
    63a0:	22c1      	movs	r2, #193	; 0xc1
    63a2:	4905      	ldr	r1, [pc, #20]	; (63b8 <spi_m_async_enable+0x1c>)
    63a4:	3000      	adds	r0, #0
    63a6:	bf18      	it	ne
    63a8:	2001      	movne	r0, #1
    63aa:	4b04      	ldr	r3, [pc, #16]	; (63bc <spi_m_async_enable+0x20>)
    63ac:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    63ae:	1d20      	adds	r0, r4, #4
    63b0:	4b03      	ldr	r3, [pc, #12]	; (63c0 <spi_m_async_enable+0x24>)
    63b2:	4798      	blx	r3
    63b4:	bd10      	pop	{r4, pc}
    63b6:	bf00      	nop
    63b8:	0000ef98 	.word	0x0000ef98
    63bc:	000072b1 	.word	0x000072b1
    63c0:	00009255 	.word	0x00009255

000063c4 <spi_m_async_set_baudrate>:
{
    63c4:	b538      	push	{r3, r4, r5, lr}
    63c6:	460d      	mov	r5, r1
	ASSERT(spi);
    63c8:	4604      	mov	r4, r0
    63ca:	22cf      	movs	r2, #207	; 0xcf
    63cc:	4909      	ldr	r1, [pc, #36]	; (63f4 <spi_m_async_set_baudrate+0x30>)
    63ce:	3000      	adds	r0, #0
    63d0:	bf18      	it	ne
    63d2:	2001      	movne	r0, #1
    63d4:	4b08      	ldr	r3, [pc, #32]	; (63f8 <spi_m_async_set_baudrate+0x34>)
    63d6:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    63d8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    63dc:	f013 0f10 	tst.w	r3, #16
    63e0:	d104      	bne.n	63ec <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    63e2:	4629      	mov	r1, r5
    63e4:	1d20      	adds	r0, r4, #4
    63e6:	4b05      	ldr	r3, [pc, #20]	; (63fc <spi_m_async_set_baudrate+0x38>)
    63e8:	4798      	blx	r3
    63ea:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    63ec:	f06f 0003 	mvn.w	r0, #3
}
    63f0:	bd38      	pop	{r3, r4, r5, pc}
    63f2:	bf00      	nop
    63f4:	0000ef98 	.word	0x0000ef98
    63f8:	000072b1 	.word	0x000072b1
    63fc:	000092b9 	.word	0x000092b9

00006400 <spi_m_async_set_mode>:
{
    6400:	b538      	push	{r3, r4, r5, lr}
    6402:	460d      	mov	r5, r1
	ASSERT(spi);
    6404:	4604      	mov	r4, r0
    6406:	22d9      	movs	r2, #217	; 0xd9
    6408:	4909      	ldr	r1, [pc, #36]	; (6430 <spi_m_async_set_mode+0x30>)
    640a:	3000      	adds	r0, #0
    640c:	bf18      	it	ne
    640e:	2001      	movne	r0, #1
    6410:	4b08      	ldr	r3, [pc, #32]	; (6434 <spi_m_async_set_mode+0x34>)
    6412:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    6414:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    6418:	f013 0f10 	tst.w	r3, #16
    641c:	d104      	bne.n	6428 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    641e:	4629      	mov	r1, r5
    6420:	1d20      	adds	r0, r4, #4
    6422:	4b05      	ldr	r3, [pc, #20]	; (6438 <spi_m_async_set_mode+0x38>)
    6424:	4798      	blx	r3
    6426:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    6428:	f06f 0003 	mvn.w	r0, #3
}
    642c:	bd38      	pop	{r3, r4, r5, pc}
    642e:	bf00      	nop
    6430:	0000ef98 	.word	0x0000ef98
    6434:	000072b1 	.word	0x000072b1
    6438:	00009285 	.word	0x00009285

0000643c <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    643e:	460d      	mov	r5, r1
    6440:	4617      	mov	r7, r2
    6442:	461e      	mov	r6, r3
	ASSERT(spi);
    6444:	4604      	mov	r4, r0
    6446:	f44f 729c 	mov.w	r2, #312	; 0x138
    644a:	4912      	ldr	r1, [pc, #72]	; (6494 <spi_m_async_transfer+0x58>)
    644c:	3000      	adds	r0, #0
    644e:	bf18      	it	ne
    6450:	2001      	movne	r0, #1
    6452:	4b11      	ldr	r3, [pc, #68]	; (6498 <spi_m_async_transfer+0x5c>)
    6454:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    6456:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    6458:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    645a:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    645c:	2300      	movs	r3, #0
    645e:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    6460:	2310      	movs	r3, #16
    6462:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    6466:	1d26      	adds	r6, r4, #4
    6468:	2101      	movs	r1, #1
    646a:	4630      	mov	r0, r6
    646c:	4b0b      	ldr	r3, [pc, #44]	; (649c <spi_m_async_transfer+0x60>)
    646e:	4798      	blx	r3
	if (txbuf) {
    6470:	b15d      	cbz	r5, 648a <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    6472:	7a23      	ldrb	r3, [r4, #8]
    6474:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    6476:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6478:	bf94      	ite	ls
    647a:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    647c:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    6480:	4630      	mov	r0, r6
    6482:	4b07      	ldr	r3, [pc, #28]	; (64a0 <spi_m_async_transfer+0x64>)
    6484:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    6486:	2000      	movs	r0, #0
    6488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    648a:	8961      	ldrh	r1, [r4, #10]
    648c:	4630      	mov	r0, r6
    648e:	4b04      	ldr	r3, [pc, #16]	; (64a0 <spi_m_async_transfer+0x64>)
    6490:	4798      	blx	r3
    6492:	e7f8      	b.n	6486 <spi_m_async_transfer+0x4a>
    6494:	0000ef98 	.word	0x0000ef98
    6498:	000072b1 	.word	0x000072b1
    649c:	00009329 	.word	0x00009329
    64a0:	000093a5 	.word	0x000093a5

000064a4 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    64a4:	b570      	push	{r4, r5, r6, lr}
    64a6:	460c      	mov	r4, r1
    64a8:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    64aa:	4605      	mov	r5, r0
    64ac:	b158      	cbz	r0, 64c6 <spi_m_async_register_callback+0x22>
    64ae:	2901      	cmp	r1, #1
    64b0:	bf8c      	ite	hi
    64b2:	2000      	movhi	r0, #0
    64b4:	2001      	movls	r0, #1
    64b6:	f240 1263 	movw	r2, #355	; 0x163
    64ba:	4908      	ldr	r1, [pc, #32]	; (64dc <spi_m_async_register_callback+0x38>)
    64bc:	4b08      	ldr	r3, [pc, #32]	; (64e0 <spi_m_async_register_callback+0x3c>)
    64be:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    64c0:	b91c      	cbnz	r4, 64ca <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    64c2:	632e      	str	r6, [r5, #48]	; 0x30
    64c4:	bd70      	pop	{r4, r5, r6, pc}
    64c6:	2000      	movs	r0, #0
    64c8:	e7f5      	b.n	64b6 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    64ca:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    64cc:	1c32      	adds	r2, r6, #0
    64ce:	bf18      	it	ne
    64d0:	2201      	movne	r2, #1
    64d2:	2103      	movs	r1, #3
    64d4:	1d28      	adds	r0, r5, #4
    64d6:	4b03      	ldr	r3, [pc, #12]	; (64e4 <spi_m_async_register_callback+0x40>)
    64d8:	4798      	blx	r3
    64da:	bd70      	pop	{r4, r5, r6, pc}
    64dc:	0000ef98 	.word	0x0000ef98
    64e0:	000072b1 	.word	0x000072b1
    64e4:	00009435 	.word	0x00009435

000064e8 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    64e8:	b538      	push	{r3, r4, r5, lr}
    64ea:	460d      	mov	r5, r1
	ASSERT(spi && io);
    64ec:	4604      	mov	r4, r0
    64ee:	b158      	cbz	r0, 6508 <spi_m_async_get_io_descriptor+0x20>
    64f0:	1c08      	adds	r0, r1, #0
    64f2:	bf18      	it	ne
    64f4:	2001      	movne	r0, #1
    64f6:	f240 126f 	movw	r2, #367	; 0x16f
    64fa:	4904      	ldr	r1, [pc, #16]	; (650c <spi_m_async_get_io_descriptor+0x24>)
    64fc:	4b04      	ldr	r3, [pc, #16]	; (6510 <spi_m_async_get_io_descriptor+0x28>)
    64fe:	4798      	blx	r3
	*io = &spi->io;
    6500:	3424      	adds	r4, #36	; 0x24
    6502:	602c      	str	r4, [r5, #0]
	return 0;
}
    6504:	2000      	movs	r0, #0
    6506:	bd38      	pop	{r3, r4, r5, pc}
    6508:	2000      	movs	r0, #0
    650a:	e7f4      	b.n	64f6 <spi_m_async_get_io_descriptor+0xe>
    650c:	0000ef98 	.word	0x0000ef98
    6510:	000072b1 	.word	0x000072b1

00006514 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    6514:	b570      	push	{r4, r5, r6, lr}
    6516:	460d      	mov	r5, r1
    6518:	4616      	mov	r6, r2
	ASSERT(io);
    651a:	4604      	mov	r4, r0
    651c:	2298      	movs	r2, #152	; 0x98
    651e:	4907      	ldr	r1, [pc, #28]	; (653c <_spi_m_dma_io_write+0x28>)
    6520:	3000      	adds	r0, #0
    6522:	bf18      	it	ne
    6524:	2001      	movne	r0, #1
    6526:	4b06      	ldr	r3, [pc, #24]	; (6540 <_spi_m_dma_io_write+0x2c>)
    6528:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    652a:	4633      	mov	r3, r6
    652c:	2200      	movs	r2, #0
    652e:	4629      	mov	r1, r5
    6530:	f1a4 001c 	sub.w	r0, r4, #28
    6534:	4c03      	ldr	r4, [pc, #12]	; (6544 <_spi_m_dma_io_write+0x30>)
    6536:	47a0      	blx	r4
}
    6538:	bd70      	pop	{r4, r5, r6, pc}
    653a:	bf00      	nop
    653c:	0000efb8 	.word	0x0000efb8
    6540:	000072b1 	.word	0x000072b1
    6544:	00009689 	.word	0x00009689

00006548 <_spi_m_dma_io_read>:
{
    6548:	b570      	push	{r4, r5, r6, lr}
    654a:	460d      	mov	r5, r1
    654c:	4616      	mov	r6, r2
	ASSERT(io);
    654e:	4604      	mov	r4, r0
    6550:	2281      	movs	r2, #129	; 0x81
    6552:	4907      	ldr	r1, [pc, #28]	; (6570 <_spi_m_dma_io_read+0x28>)
    6554:	3000      	adds	r0, #0
    6556:	bf18      	it	ne
    6558:	2001      	movne	r0, #1
    655a:	4b06      	ldr	r3, [pc, #24]	; (6574 <_spi_m_dma_io_read+0x2c>)
    655c:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    655e:	4633      	mov	r3, r6
    6560:	462a      	mov	r2, r5
    6562:	2100      	movs	r1, #0
    6564:	f1a4 001c 	sub.w	r0, r4, #28
    6568:	4c03      	ldr	r4, [pc, #12]	; (6578 <_spi_m_dma_io_read+0x30>)
    656a:	47a0      	blx	r4
}
    656c:	bd70      	pop	{r4, r5, r6, pc}
    656e:	bf00      	nop
    6570:	0000efb8 	.word	0x0000efb8
    6574:	000072b1 	.word	0x000072b1
    6578:	00009689 	.word	0x00009689

0000657c <spi_m_dma_init>:
{
    657c:	b538      	push	{r3, r4, r5, lr}
    657e:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    6580:	4605      	mov	r5, r0
    6582:	b1a0      	cbz	r0, 65ae <spi_m_dma_init+0x32>
    6584:	1c08      	adds	r0, r1, #0
    6586:	bf18      	it	ne
    6588:	2001      	movne	r0, #1
    658a:	223b      	movs	r2, #59	; 0x3b
    658c:	4909      	ldr	r1, [pc, #36]	; (65b4 <spi_m_dma_init+0x38>)
    658e:	4b0a      	ldr	r3, [pc, #40]	; (65b8 <spi_m_dma_init+0x3c>)
    6590:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    6592:	4628      	mov	r0, r5
    6594:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    6598:	4621      	mov	r1, r4
    659a:	4b08      	ldr	r3, [pc, #32]	; (65bc <spi_m_dma_init+0x40>)
    659c:	4798      	blx	r3
	if (rc) {
    659e:	4603      	mov	r3, r0
    65a0:	b918      	cbnz	r0, 65aa <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    65a2:	4a07      	ldr	r2, [pc, #28]	; (65c0 <spi_m_dma_init+0x44>)
    65a4:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    65a6:	4a07      	ldr	r2, [pc, #28]	; (65c4 <spi_m_dma_init+0x48>)
    65a8:	622a      	str	r2, [r5, #32]
}
    65aa:	4618      	mov	r0, r3
    65ac:	bd38      	pop	{r3, r4, r5, pc}
    65ae:	2000      	movs	r0, #0
    65b0:	e7eb      	b.n	658a <spi_m_dma_init+0xe>
    65b2:	bf00      	nop
    65b4:	0000efb8 	.word	0x0000efb8
    65b8:	000072b1 	.word	0x000072b1
    65bc:	0000946d 	.word	0x0000946d
    65c0:	00006549 	.word	0x00006549
    65c4:	00006515 	.word	0x00006515

000065c8 <spi_m_dma_enable>:
{
    65c8:	b510      	push	{r4, lr}
	ASSERT(spi);
    65ca:	4604      	mov	r4, r0
    65cc:	2251      	movs	r2, #81	; 0x51
    65ce:	4905      	ldr	r1, [pc, #20]	; (65e4 <spi_m_dma_enable+0x1c>)
    65d0:	3000      	adds	r0, #0
    65d2:	bf18      	it	ne
    65d4:	2001      	movne	r0, #1
    65d6:	4b04      	ldr	r3, [pc, #16]	; (65e8 <spi_m_dma_enable+0x20>)
    65d8:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    65da:	1d20      	adds	r0, r4, #4
    65dc:	4b03      	ldr	r3, [pc, #12]	; (65ec <spi_m_dma_enable+0x24>)
    65de:	4798      	blx	r3
    65e0:	bd10      	pop	{r4, pc}
    65e2:	bf00      	nop
    65e4:	0000efb8 	.word	0x0000efb8
    65e8:	000072b1 	.word	0x000072b1
    65ec:	000095e9 	.word	0x000095e9

000065f0 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    65f0:	b570      	push	{r4, r5, r6, lr}
    65f2:	460d      	mov	r5, r1
    65f4:	4616      	mov	r6, r2
	ASSERT(spi);
    65f6:	4604      	mov	r4, r0
    65f8:	22a8      	movs	r2, #168	; 0xa8
    65fa:	4906      	ldr	r1, [pc, #24]	; (6614 <spi_m_dma_register_callback+0x24>)
    65fc:	3000      	adds	r0, #0
    65fe:	bf18      	it	ne
    6600:	2001      	movne	r0, #1
    6602:	4b05      	ldr	r3, [pc, #20]	; (6618 <spi_m_dma_register_callback+0x28>)
    6604:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    6606:	4632      	mov	r2, r6
    6608:	4629      	mov	r1, r5
    660a:	1d20      	adds	r0, r4, #4
    660c:	4b03      	ldr	r3, [pc, #12]	; (661c <spi_m_dma_register_callback+0x2c>)
    660e:	4798      	blx	r3
    6610:	bd70      	pop	{r4, r5, r6, pc}
    6612:	bf00      	nop
    6614:	0000efb8 	.word	0x0000efb8
    6618:	000072b1 	.word	0x000072b1
    661c:	00009619 	.word	0x00009619

00006620 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    6620:	b538      	push	{r3, r4, r5, lr}
    6622:	460d      	mov	r5, r1
	ASSERT(spi && io);
    6624:	4604      	mov	r4, r0
    6626:	b150      	cbz	r0, 663e <spi_m_dma_get_io_descriptor+0x1e>
    6628:	1c08      	adds	r0, r1, #0
    662a:	bf18      	it	ne
    662c:	2001      	movne	r0, #1
    662e:	22ae      	movs	r2, #174	; 0xae
    6630:	4904      	ldr	r1, [pc, #16]	; (6644 <spi_m_dma_get_io_descriptor+0x24>)
    6632:	4b05      	ldr	r3, [pc, #20]	; (6648 <spi_m_dma_get_io_descriptor+0x28>)
    6634:	4798      	blx	r3
	*io = &spi->io;
    6636:	3420      	adds	r4, #32
    6638:	602c      	str	r4, [r5, #0]

	return 0;
}
    663a:	2000      	movs	r0, #0
    663c:	bd38      	pop	{r3, r4, r5, pc}
    663e:	2000      	movs	r0, #0
    6640:	e7f5      	b.n	662e <spi_m_dma_get_io_descriptor+0xe>
    6642:	bf00      	nop
    6644:	0000efb8 	.word	0x0000efb8
    6648:	000072b1 	.word	0x000072b1

0000664c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    664e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    6650:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    6652:	b12f      	cbz	r7, 6660 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    6654:	688d      	ldr	r5, [r1, #8]
    6656:	463c      	mov	r4, r7
    6658:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    665a:	f1c2 0e01 	rsb	lr, r2, #1
    665e:	e00b      	b.n	6678 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    6660:	4b0e      	ldr	r3, [pc, #56]	; (669c <timer_add_timer_task+0x50>)
    6662:	4798      	blx	r3
		return;
    6664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    6666:	4473      	add	r3, lr
    6668:	68a0      	ldr	r0, [r4, #8]
    666a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    666c:	42ab      	cmp	r3, r5
    666e:	d20a      	bcs.n	6686 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    6670:	6823      	ldr	r3, [r4, #0]
    6672:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    6674:	b153      	cbz	r3, 668c <timer_add_timer_task+0x40>
    6676:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    6678:	6863      	ldr	r3, [r4, #4]
    667a:	4293      	cmp	r3, r2
    667c:	d8f3      	bhi.n	6666 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    667e:	68a0      	ldr	r0, [r4, #8]
    6680:	4403      	add	r3, r0
    6682:	1a9b      	subs	r3, r3, r2
    6684:	e7f2      	b.n	666c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    6686:	42a7      	cmp	r7, r4
    6688:	d004      	beq.n	6694 <timer_add_timer_task+0x48>
    668a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    668c:	4620      	mov	r0, r4
    668e:	4b04      	ldr	r3, [pc, #16]	; (66a0 <timer_add_timer_task+0x54>)
    6690:	4798      	blx	r3
    6692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    6694:	4660      	mov	r0, ip
    6696:	4b01      	ldr	r3, [pc, #4]	; (669c <timer_add_timer_task+0x50>)
    6698:	4798      	blx	r3
    669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    669c:	000072d9 	.word	0x000072d9
    66a0:	00007305 	.word	0x00007305

000066a4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    66a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    66a8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    66aa:	6907      	ldr	r7, [r0, #16]
    66ac:	3701      	adds	r7, #1
    66ae:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    66b0:	7e03      	ldrb	r3, [r0, #24]
    66b2:	f013 0f01 	tst.w	r3, #1
    66b6:	d113      	bne.n	66e0 <timer_process_counted+0x3c>
    66b8:	7e03      	ldrb	r3, [r0, #24]
    66ba:	f013 0f02 	tst.w	r3, #2
    66be:	d10f      	bne.n	66e0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    66c0:	b354      	cbz	r4, 6718 <timer_process_counted+0x74>
    66c2:	6863      	ldr	r3, [r4, #4]
    66c4:	1afb      	subs	r3, r7, r3
    66c6:	68a2      	ldr	r2, [r4, #8]
    66c8:	4293      	cmp	r3, r2
    66ca:	d307      	bcc.n	66dc <timer_process_counted+0x38>
    66cc:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    66ce:	f100 0814 	add.w	r8, r0, #20
    66d2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 671c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    66d6:	f8df a048 	ldr.w	sl, [pc, #72]	; 6720 <timer_process_counted+0x7c>
    66da:	e012      	b.n	6702 <timer_process_counted+0x5e>
    66dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    66e0:	7e03      	ldrb	r3, [r0, #24]
    66e2:	f043 0302 	orr.w	r3, r3, #2
    66e6:	7603      	strb	r3, [r0, #24]
		return;
    66e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    66ec:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    66ee:	68e3      	ldr	r3, [r4, #12]
    66f0:	4620      	mov	r0, r4
    66f2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    66f4:	b185      	cbz	r5, 6718 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    66f6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    66f8:	686b      	ldr	r3, [r5, #4]
    66fa:	1afb      	subs	r3, r7, r3
    66fc:	68aa      	ldr	r2, [r5, #8]
    66fe:	4293      	cmp	r3, r2
    6700:	d30a      	bcc.n	6718 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    6702:	4640      	mov	r0, r8
    6704:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    6706:	7c23      	ldrb	r3, [r4, #16]
    6708:	2b01      	cmp	r3, #1
    670a:	d1ef      	bne.n	66ec <timer_process_counted+0x48>
			tmp->time_label = time;
    670c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    670e:	463a      	mov	r2, r7
    6710:	4621      	mov	r1, r4
    6712:	4640      	mov	r0, r8
    6714:	47d0      	blx	sl
    6716:	e7e9      	b.n	66ec <timer_process_counted+0x48>
    6718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    671c:	0000734d 	.word	0x0000734d
    6720:	0000664d 	.word	0x0000664d

00006724 <timer_init>:
{
    6724:	b570      	push	{r4, r5, r6, lr}
    6726:	460e      	mov	r6, r1
    6728:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    672a:	4604      	mov	r4, r0
    672c:	b190      	cbz	r0, 6754 <timer_init+0x30>
    672e:	b199      	cbz	r1, 6758 <timer_init+0x34>
    6730:	1c10      	adds	r0, r2, #0
    6732:	bf18      	it	ne
    6734:	2001      	movne	r0, #1
    6736:	223b      	movs	r2, #59	; 0x3b
    6738:	4908      	ldr	r1, [pc, #32]	; (675c <timer_init+0x38>)
    673a:	4b09      	ldr	r3, [pc, #36]	; (6760 <timer_init+0x3c>)
    673c:	4798      	blx	r3
	descr->func = func;
    673e:	4620      	mov	r0, r4
    6740:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    6744:	682b      	ldr	r3, [r5, #0]
    6746:	4631      	mov	r1, r6
    6748:	4798      	blx	r3
	descr->time                           = 0;
    674a:	2000      	movs	r0, #0
    674c:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    674e:	4b05      	ldr	r3, [pc, #20]	; (6764 <timer_init+0x40>)
    6750:	6063      	str	r3, [r4, #4]
}
    6752:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    6754:	2000      	movs	r0, #0
    6756:	e7ee      	b.n	6736 <timer_init+0x12>
    6758:	2000      	movs	r0, #0
    675a:	e7ec      	b.n	6736 <timer_init+0x12>
    675c:	0000efd4 	.word	0x0000efd4
    6760:	000072b1 	.word	0x000072b1
    6764:	000066a5 	.word	0x000066a5

00006768 <timer_start>:
{
    6768:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    676a:	4604      	mov	r4, r0
    676c:	b198      	cbz	r0, 6796 <timer_start+0x2e>
    676e:	6800      	ldr	r0, [r0, #0]
    6770:	3000      	adds	r0, #0
    6772:	bf18      	it	ne
    6774:	2001      	movne	r0, #1
    6776:	2254      	movs	r2, #84	; 0x54
    6778:	4909      	ldr	r1, [pc, #36]	; (67a0 <timer_start+0x38>)
    677a:	4b0a      	ldr	r3, [pc, #40]	; (67a4 <timer_start+0x3c>)
    677c:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    677e:	1d25      	adds	r5, r4, #4
    6780:	6823      	ldr	r3, [r4, #0]
    6782:	699b      	ldr	r3, [r3, #24]
    6784:	4628      	mov	r0, r5
    6786:	4798      	blx	r3
    6788:	b938      	cbnz	r0, 679a <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    678a:	6823      	ldr	r3, [r4, #0]
    678c:	689b      	ldr	r3, [r3, #8]
    678e:	4628      	mov	r0, r5
    6790:	4798      	blx	r3
	return ERR_NONE;
    6792:	2000      	movs	r0, #0
    6794:	bd38      	pop	{r3, r4, r5, pc}
    6796:	2000      	movs	r0, #0
    6798:	e7ed      	b.n	6776 <timer_start+0xe>
		return ERR_DENIED;
    679a:	f06f 0010 	mvn.w	r0, #16
}
    679e:	bd38      	pop	{r3, r4, r5, pc}
    67a0:	0000efd4 	.word	0x0000efd4
    67a4:	000072b1 	.word	0x000072b1

000067a8 <timer_add_task>:
{
    67a8:	b570      	push	{r4, r5, r6, lr}
    67aa:	b082      	sub	sp, #8
    67ac:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    67ae:	4604      	mov	r4, r0
    67b0:	b328      	cbz	r0, 67fe <timer_add_task+0x56>
    67b2:	b331      	cbz	r1, 6802 <timer_add_task+0x5a>
    67b4:	6800      	ldr	r0, [r0, #0]
    67b6:	3000      	adds	r0, #0
    67b8:	bf18      	it	ne
    67ba:	2001      	movne	r0, #1
    67bc:	227b      	movs	r2, #123	; 0x7b
    67be:	4920      	ldr	r1, [pc, #128]	; (6840 <timer_add_task+0x98>)
    67c0:	4b20      	ldr	r3, [pc, #128]	; (6844 <timer_add_task+0x9c>)
    67c2:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    67c4:	7f23      	ldrb	r3, [r4, #28]
    67c6:	f043 0301 	orr.w	r3, r3, #1
    67ca:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    67cc:	f104 0618 	add.w	r6, r4, #24
    67d0:	4629      	mov	r1, r5
    67d2:	4630      	mov	r0, r6
    67d4:	4b1c      	ldr	r3, [pc, #112]	; (6848 <timer_add_task+0xa0>)
    67d6:	4798      	blx	r3
    67d8:	b9a8      	cbnz	r0, 6806 <timer_add_task+0x5e>
	task->time_label = descr->time;
    67da:	6963      	ldr	r3, [r4, #20]
    67dc:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    67de:	6962      	ldr	r2, [r4, #20]
    67e0:	4629      	mov	r1, r5
    67e2:	4630      	mov	r0, r6
    67e4:	4b19      	ldr	r3, [pc, #100]	; (684c <timer_add_task+0xa4>)
    67e6:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    67e8:	7f23      	ldrb	r3, [r4, #28]
    67ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    67ee:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    67f0:	7f23      	ldrb	r3, [r4, #28]
    67f2:	f013 0f02 	tst.w	r3, #2
    67f6:	d112      	bne.n	681e <timer_add_task+0x76>
	return ERR_NONE;
    67f8:	2000      	movs	r0, #0
}
    67fa:	b002      	add	sp, #8
    67fc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    67fe:	2000      	movs	r0, #0
    6800:	e7dc      	b.n	67bc <timer_add_task+0x14>
    6802:	2000      	movs	r0, #0
    6804:	e7da      	b.n	67bc <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6806:	7f23      	ldrb	r3, [r4, #28]
    6808:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    680c:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    680e:	2280      	movs	r2, #128	; 0x80
    6810:	490b      	ldr	r1, [pc, #44]	; (6840 <timer_add_task+0x98>)
    6812:	2000      	movs	r0, #0
    6814:	4b0b      	ldr	r3, [pc, #44]	; (6844 <timer_add_task+0x9c>)
    6816:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    6818:	f06f 0011 	mvn.w	r0, #17
    681c:	e7ed      	b.n	67fa <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    681e:	a801      	add	r0, sp, #4
    6820:	4b0b      	ldr	r3, [pc, #44]	; (6850 <timer_add_task+0xa8>)
    6822:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    6824:	7f23      	ldrb	r3, [r4, #28]
    6826:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    682a:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    682c:	6823      	ldr	r3, [r4, #0]
    682e:	69db      	ldr	r3, [r3, #28]
    6830:	1d20      	adds	r0, r4, #4
    6832:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    6834:	a801      	add	r0, sp, #4
    6836:	4b07      	ldr	r3, [pc, #28]	; (6854 <timer_add_task+0xac>)
    6838:	4798      	blx	r3
	return ERR_NONE;
    683a:	2000      	movs	r0, #0
    683c:	e7dd      	b.n	67fa <timer_add_task+0x52>
    683e:	bf00      	nop
    6840:	0000efd4 	.word	0x0000efd4
    6844:	000072b1 	.word	0x000072b1
    6848:	000072b7 	.word	0x000072b7
    684c:	0000664d 	.word	0x0000664d
    6850:	00005c7d 	.word	0x00005c7d
    6854:	00005c8b 	.word	0x00005c8b

00006858 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    6858:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    685a:	2300      	movs	r3, #0
    685c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    685e:	69c3      	ldr	r3, [r0, #28]
    6860:	b11b      	cbz	r3, 686a <usart_transmission_complete+0x12>
    6862:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    6866:	4610      	mov	r0, r2
    6868:	4798      	blx	r3
    686a:	bd08      	pop	{r3, pc}

0000686c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    686c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    686e:	2300      	movs	r3, #0
    6870:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    6872:	6a43      	ldr	r3, [r0, #36]	; 0x24
    6874:	b11b      	cbz	r3, 687e <usart_error+0x12>
    6876:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    687a:	4610      	mov	r0, r2
    687c:	4798      	blx	r3
    687e:	bd08      	pop	{r3, pc}

00006880 <usart_fill_rx_buffer>:
{
    6880:	b538      	push	{r3, r4, r5, lr}
    6882:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    6884:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    6888:	302c      	adds	r0, #44	; 0x2c
    688a:	4b03      	ldr	r3, [pc, #12]	; (6898 <usart_fill_rx_buffer+0x18>)
    688c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    688e:	6a23      	ldr	r3, [r4, #32]
    6890:	b10b      	cbz	r3, 6896 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    6892:	4628      	mov	r0, r5
    6894:	4798      	blx	r3
    6896:	bd38      	pop	{r3, r4, r5, pc}
    6898:	000073ed 	.word	0x000073ed

0000689c <usart_async_write>:
{
    689c:	b570      	push	{r4, r5, r6, lr}
    689e:	460e      	mov	r6, r1
    68a0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    68a2:	4604      	mov	r4, r0
    68a4:	b1e0      	cbz	r0, 68e0 <usart_async_write+0x44>
    68a6:	b1e9      	cbz	r1, 68e4 <usart_async_write+0x48>
    68a8:	1c10      	adds	r0, r2, #0
    68aa:	bf18      	it	ne
    68ac:	2001      	movne	r0, #1
    68ae:	f240 123b 	movw	r2, #315	; 0x13b
    68b2:	490f      	ldr	r1, [pc, #60]	; (68f0 <usart_async_write+0x54>)
    68b4:	4b0f      	ldr	r3, [pc, #60]	; (68f4 <usart_async_write+0x58>)
    68b6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    68b8:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    68bc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    68c0:	429a      	cmp	r2, r3
    68c2:	d111      	bne.n	68e8 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    68c4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    68c6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    68ca:	2300      	movs	r3, #0
    68cc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    68d0:	2301      	movs	r3, #1
    68d2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    68d4:	f104 0008 	add.w	r0, r4, #8
    68d8:	4b07      	ldr	r3, [pc, #28]	; (68f8 <usart_async_write+0x5c>)
    68da:	4798      	blx	r3
	return (int32_t)length;
    68dc:	4628      	mov	r0, r5
    68de:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    68e0:	2000      	movs	r0, #0
    68e2:	e7e4      	b.n	68ae <usart_async_write+0x12>
    68e4:	2000      	movs	r0, #0
    68e6:	e7e2      	b.n	68ae <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    68e8:	f06f 001b 	mvn.w	r0, #27
}
    68ec:	bd70      	pop	{r4, r5, r6, pc}
    68ee:	bf00      	nop
    68f0:	0000efec 	.word	0x0000efec
    68f4:	000072b1 	.word	0x000072b1
    68f8:	00008c33 	.word	0x00008c33

000068fc <usart_process_byte_sent>:
{
    68fc:	b510      	push	{r4, lr}
    68fe:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    6900:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    6902:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    6906:	429a      	cmp	r2, r3
    6908:	d009      	beq.n	691e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    690a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    690c:	1c59      	adds	r1, r3, #1
    690e:	8781      	strh	r1, [r0, #60]	; 0x3c
    6910:	5cd1      	ldrb	r1, [r2, r3]
    6912:	4b04      	ldr	r3, [pc, #16]	; (6924 <usart_process_byte_sent+0x28>)
    6914:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    6916:	4620      	mov	r0, r4
    6918:	4b03      	ldr	r3, [pc, #12]	; (6928 <usart_process_byte_sent+0x2c>)
    691a:	4798      	blx	r3
    691c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    691e:	4b03      	ldr	r3, [pc, #12]	; (692c <usart_process_byte_sent+0x30>)
    6920:	4798      	blx	r3
    6922:	bd10      	pop	{r4, pc}
    6924:	00008c07 	.word	0x00008c07
    6928:	00008c33 	.word	0x00008c33
    692c:	00008c3b 	.word	0x00008c3b

00006930 <usart_async_read>:
{
    6930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6934:	b082      	sub	sp, #8
    6936:	460f      	mov	r7, r1
    6938:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    693a:	4606      	mov	r6, r0
    693c:	b1a0      	cbz	r0, 6968 <usart_async_read+0x38>
    693e:	b199      	cbz	r1, 6968 <usart_async_read+0x38>
    6940:	2a00      	cmp	r2, #0
    6942:	d12d      	bne.n	69a0 <usart_async_read+0x70>
    6944:	f44f 72ac 	mov.w	r2, #344	; 0x158
    6948:	4929      	ldr	r1, [pc, #164]	; (69f0 <usart_async_read+0xc0>)
    694a:	2000      	movs	r0, #0
    694c:	4b29      	ldr	r3, [pc, #164]	; (69f4 <usart_async_read+0xc4>)
    694e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    6950:	a801      	add	r0, sp, #4
    6952:	4b29      	ldr	r3, [pc, #164]	; (69f8 <usart_async_read+0xc8>)
    6954:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    6956:	f106 0034 	add.w	r0, r6, #52	; 0x34
    695a:	4b28      	ldr	r3, [pc, #160]	; (69fc <usart_async_read+0xcc>)
    695c:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    695e:	a801      	add	r0, sp, #4
    6960:	4b27      	ldr	r3, [pc, #156]	; (6a00 <usart_async_read+0xd0>)
    6962:	4798      	blx	r3
	uint16_t                       was_read = 0;
    6964:	2500      	movs	r5, #0
	return (int32_t)was_read;
    6966:	e03e      	b.n	69e6 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    6968:	f44f 72ac 	mov.w	r2, #344	; 0x158
    696c:	4920      	ldr	r1, [pc, #128]	; (69f0 <usart_async_read+0xc0>)
    696e:	2000      	movs	r0, #0
    6970:	4b20      	ldr	r3, [pc, #128]	; (69f4 <usart_async_read+0xc4>)
    6972:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    6974:	a801      	add	r0, sp, #4
    6976:	4b20      	ldr	r3, [pc, #128]	; (69f8 <usart_async_read+0xc8>)
    6978:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    697a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    697e:	4650      	mov	r0, sl
    6980:	4b1e      	ldr	r3, [pc, #120]	; (69fc <usart_async_read+0xcc>)
    6982:	4798      	blx	r3
    6984:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    6986:	a801      	add	r0, sp, #4
    6988:	4b1d      	ldr	r3, [pc, #116]	; (6a00 <usart_async_read+0xd0>)
    698a:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    698c:	f1b9 0f00 	cmp.w	r9, #0
    6990:	d004      	beq.n	699c <usart_async_read+0x6c>
    6992:	f1b8 0f00 	cmp.w	r8, #0
    6996:	d119      	bne.n	69cc <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    6998:	2500      	movs	r5, #0
    699a:	e024      	b.n	69e6 <usart_async_read+0xb6>
    699c:	2500      	movs	r5, #0
    699e:	e022      	b.n	69e6 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    69a0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    69a4:	4912      	ldr	r1, [pc, #72]	; (69f0 <usart_async_read+0xc0>)
    69a6:	2001      	movs	r0, #1
    69a8:	4b12      	ldr	r3, [pc, #72]	; (69f4 <usart_async_read+0xc4>)
    69aa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    69ac:	a801      	add	r0, sp, #4
    69ae:	4b12      	ldr	r3, [pc, #72]	; (69f8 <usart_async_read+0xc8>)
    69b0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    69b2:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    69b6:	4650      	mov	r0, sl
    69b8:	4b10      	ldr	r3, [pc, #64]	; (69fc <usart_async_read+0xcc>)
    69ba:	4798      	blx	r3
    69bc:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    69be:	a801      	add	r0, sp, #4
    69c0:	4b0f      	ldr	r3, [pc, #60]	; (6a00 <usart_async_read+0xd0>)
    69c2:	4798      	blx	r3
	uint16_t                       was_read = 0;
    69c4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    69c6:	f1b9 0f00 	cmp.w	r9, #0
    69ca:	d00c      	beq.n	69e6 <usart_async_read+0xb6>
{
    69cc:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    69ce:	4e0d      	ldr	r6, [pc, #52]	; (6a04 <usart_async_read+0xd4>)
    69d0:	1c60      	adds	r0, r4, #1
    69d2:	b285      	uxth	r5, r0
    69d4:	1939      	adds	r1, r7, r4
    69d6:	4650      	mov	r0, sl
    69d8:	47b0      	blx	r6
    69da:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    69dc:	454c      	cmp	r4, r9
    69de:	d202      	bcs.n	69e6 <usart_async_read+0xb6>
    69e0:	b2a3      	uxth	r3, r4
    69e2:	4598      	cmp	r8, r3
    69e4:	d8f4      	bhi.n	69d0 <usart_async_read+0xa0>
}
    69e6:	4628      	mov	r0, r5
    69e8:	b002      	add	sp, #8
    69ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    69ee:	bf00      	nop
    69f0:	0000efec 	.word	0x0000efec
    69f4:	000072b1 	.word	0x000072b1
    69f8:	00005c7d 	.word	0x00005c7d
    69fc:	0000742d 	.word	0x0000742d
    6a00:	00005c8b 	.word	0x00005c8b
    6a04:	000073a9 	.word	0x000073a9

00006a08 <usart_async_init>:
{
    6a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a0a:	460d      	mov	r5, r1
    6a0c:	4616      	mov	r6, r2
    6a0e:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    6a10:	4604      	mov	r4, r0
    6a12:	b320      	cbz	r0, 6a5e <usart_async_init+0x56>
    6a14:	b329      	cbz	r1, 6a62 <usart_async_init+0x5a>
    6a16:	b332      	cbz	r2, 6a66 <usart_async_init+0x5e>
    6a18:	1c18      	adds	r0, r3, #0
    6a1a:	bf18      	it	ne
    6a1c:	2001      	movne	r0, #1
    6a1e:	223a      	movs	r2, #58	; 0x3a
    6a20:	4913      	ldr	r1, [pc, #76]	; (6a70 <usart_async_init+0x68>)
    6a22:	4b14      	ldr	r3, [pc, #80]	; (6a74 <usart_async_init+0x6c>)
    6a24:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    6a26:	463a      	mov	r2, r7
    6a28:	4631      	mov	r1, r6
    6a2a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6a2e:	4b12      	ldr	r3, [pc, #72]	; (6a78 <usart_async_init+0x70>)
    6a30:	4798      	blx	r3
    6a32:	b9d0      	cbnz	r0, 6a6a <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    6a34:	4629      	mov	r1, r5
    6a36:	f104 0008 	add.w	r0, r4, #8
    6a3a:	4b10      	ldr	r3, [pc, #64]	; (6a7c <usart_async_init+0x74>)
    6a3c:	4798      	blx	r3
	if (init_status) {
    6a3e:	4603      	mov	r3, r0
    6a40:	b958      	cbnz	r0, 6a5a <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    6a42:	4a0f      	ldr	r2, [pc, #60]	; (6a80 <usart_async_init+0x78>)
    6a44:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    6a46:	4a0f      	ldr	r2, [pc, #60]	; (6a84 <usart_async_init+0x7c>)
    6a48:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    6a4a:	4a0f      	ldr	r2, [pc, #60]	; (6a88 <usart_async_init+0x80>)
    6a4c:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    6a4e:	4a0f      	ldr	r2, [pc, #60]	; (6a8c <usart_async_init+0x84>)
    6a50:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    6a52:	4a0f      	ldr	r2, [pc, #60]	; (6a90 <usart_async_init+0x88>)
    6a54:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    6a56:	4a0f      	ldr	r2, [pc, #60]	; (6a94 <usart_async_init+0x8c>)
    6a58:	6162      	str	r2, [r4, #20]
}
    6a5a:	4618      	mov	r0, r3
    6a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    6a5e:	2000      	movs	r0, #0
    6a60:	e7dd      	b.n	6a1e <usart_async_init+0x16>
    6a62:	2000      	movs	r0, #0
    6a64:	e7db      	b.n	6a1e <usart_async_init+0x16>
    6a66:	2000      	movs	r0, #0
    6a68:	e7d9      	b.n	6a1e <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    6a6a:	f06f 030c 	mvn.w	r3, #12
    6a6e:	e7f4      	b.n	6a5a <usart_async_init+0x52>
    6a70:	0000efec 	.word	0x0000efec
    6a74:	000072b1 	.word	0x000072b1
    6a78:	00007359 	.word	0x00007359
    6a7c:	00008b39 	.word	0x00008b39
    6a80:	00006931 	.word	0x00006931
    6a84:	0000689d 	.word	0x0000689d
    6a88:	000068fd 	.word	0x000068fd
    6a8c:	00006881 	.word	0x00006881
    6a90:	00006859 	.word	0x00006859
    6a94:	0000686d 	.word	0x0000686d

00006a98 <usart_async_enable>:
{
    6a98:	b510      	push	{r4, lr}
	ASSERT(descr);
    6a9a:	4604      	mov	r4, r0
    6a9c:	2261      	movs	r2, #97	; 0x61
    6a9e:	4906      	ldr	r1, [pc, #24]	; (6ab8 <usart_async_enable+0x20>)
    6aa0:	3000      	adds	r0, #0
    6aa2:	bf18      	it	ne
    6aa4:	2001      	movne	r0, #1
    6aa6:	4b05      	ldr	r3, [pc, #20]	; (6abc <usart_async_enable+0x24>)
    6aa8:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    6aaa:	f104 0008 	add.w	r0, r4, #8
    6aae:	4b04      	ldr	r3, [pc, #16]	; (6ac0 <usart_async_enable+0x28>)
    6ab0:	4798      	blx	r3
}
    6ab2:	2000      	movs	r0, #0
    6ab4:	bd10      	pop	{r4, pc}
    6ab6:	bf00      	nop
    6ab8:	0000efec 	.word	0x0000efec
    6abc:	000072b1 	.word	0x000072b1
    6ac0:	00008bc9 	.word	0x00008bc9

00006ac4 <usart_async_disable>:
{
    6ac4:	b510      	push	{r4, lr}
	ASSERT(descr);
    6ac6:	4604      	mov	r4, r0
    6ac8:	226c      	movs	r2, #108	; 0x6c
    6aca:	4906      	ldr	r1, [pc, #24]	; (6ae4 <usart_async_disable+0x20>)
    6acc:	3000      	adds	r0, #0
    6ace:	bf18      	it	ne
    6ad0:	2001      	movne	r0, #1
    6ad2:	4b05      	ldr	r3, [pc, #20]	; (6ae8 <usart_async_disable+0x24>)
    6ad4:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    6ad6:	f104 0008 	add.w	r0, r4, #8
    6ada:	4b04      	ldr	r3, [pc, #16]	; (6aec <usart_async_disable+0x28>)
    6adc:	4798      	blx	r3
}
    6ade:	2000      	movs	r0, #0
    6ae0:	bd10      	pop	{r4, pc}
    6ae2:	bf00      	nop
    6ae4:	0000efec 	.word	0x0000efec
    6ae8:	000072b1 	.word	0x000072b1
    6aec:	00008bdd 	.word	0x00008bdd

00006af0 <usart_async_get_io_descriptor>:
{
    6af0:	b538      	push	{r3, r4, r5, lr}
    6af2:	460c      	mov	r4, r1
	ASSERT(descr && io);
    6af4:	4605      	mov	r5, r0
    6af6:	b148      	cbz	r0, 6b0c <usart_async_get_io_descriptor+0x1c>
    6af8:	1c08      	adds	r0, r1, #0
    6afa:	bf18      	it	ne
    6afc:	2001      	movne	r0, #1
    6afe:	2277      	movs	r2, #119	; 0x77
    6b00:	4903      	ldr	r1, [pc, #12]	; (6b10 <usart_async_get_io_descriptor+0x20>)
    6b02:	4b04      	ldr	r3, [pc, #16]	; (6b14 <usart_async_get_io_descriptor+0x24>)
    6b04:	4798      	blx	r3
	*io = &descr->io;
    6b06:	6025      	str	r5, [r4, #0]
}
    6b08:	2000      	movs	r0, #0
    6b0a:	bd38      	pop	{r3, r4, r5, pc}
    6b0c:	2000      	movs	r0, #0
    6b0e:	e7f6      	b.n	6afe <usart_async_get_io_descriptor+0xe>
    6b10:	0000efec 	.word	0x0000efec
    6b14:	000072b1 	.word	0x000072b1

00006b18 <usart_async_register_callback>:
{
    6b18:	b570      	push	{r4, r5, r6, lr}
    6b1a:	460c      	mov	r4, r1
    6b1c:	4616      	mov	r6, r2
	ASSERT(descr);
    6b1e:	4605      	mov	r5, r0
    6b20:	2283      	movs	r2, #131	; 0x83
    6b22:	4917      	ldr	r1, [pc, #92]	; (6b80 <usart_async_register_callback+0x68>)
    6b24:	3000      	adds	r0, #0
    6b26:	bf18      	it	ne
    6b28:	2001      	movne	r0, #1
    6b2a:	4b16      	ldr	r3, [pc, #88]	; (6b84 <usart_async_register_callback+0x6c>)
    6b2c:	4798      	blx	r3
	switch (type) {
    6b2e:	2c01      	cmp	r4, #1
    6b30:	d010      	beq.n	6b54 <usart_async_register_callback+0x3c>
    6b32:	b124      	cbz	r4, 6b3e <usart_async_register_callback+0x26>
    6b34:	2c02      	cmp	r4, #2
    6b36:	d018      	beq.n	6b6a <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    6b38:	f06f 000c 	mvn.w	r0, #12
}
    6b3c:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    6b3e:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    6b40:	1c32      	adds	r2, r6, #0
    6b42:	bf18      	it	ne
    6b44:	2201      	movne	r2, #1
    6b46:	2101      	movs	r1, #1
    6b48:	f105 0008 	add.w	r0, r5, #8
    6b4c:	4b0e      	ldr	r3, [pc, #56]	; (6b88 <usart_async_register_callback+0x70>)
    6b4e:	4798      	blx	r3
	return ERR_NONE;
    6b50:	2000      	movs	r0, #0
		break;
    6b52:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    6b54:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    6b56:	1c32      	adds	r2, r6, #0
    6b58:	bf18      	it	ne
    6b5a:	2201      	movne	r2, #1
    6b5c:	2102      	movs	r1, #2
    6b5e:	f105 0008 	add.w	r0, r5, #8
    6b62:	4b09      	ldr	r3, [pc, #36]	; (6b88 <usart_async_register_callback+0x70>)
    6b64:	4798      	blx	r3
	return ERR_NONE;
    6b66:	2000      	movs	r0, #0
		break;
    6b68:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    6b6a:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    6b6c:	1c32      	adds	r2, r6, #0
    6b6e:	bf18      	it	ne
    6b70:	2201      	movne	r2, #1
    6b72:	2103      	movs	r1, #3
    6b74:	f105 0008 	add.w	r0, r5, #8
    6b78:	4b03      	ldr	r3, [pc, #12]	; (6b88 <usart_async_register_callback+0x70>)
    6b7a:	4798      	blx	r3
	return ERR_NONE;
    6b7c:	2000      	movs	r0, #0
		break;
    6b7e:	bd70      	pop	{r4, r5, r6, pc}
    6b80:	0000efec 	.word	0x0000efec
    6b84:	000072b1 	.word	0x000072b1
    6b88:	00008c45 	.word	0x00008c45

00006b8c <usart_async_set_parity>:
{
    6b8c:	b538      	push	{r3, r4, r5, lr}
    6b8e:	460d      	mov	r5, r1
	ASSERT(descr);
    6b90:	4604      	mov	r4, r0
    6b92:	22cb      	movs	r2, #203	; 0xcb
    6b94:	4906      	ldr	r1, [pc, #24]	; (6bb0 <usart_async_set_parity+0x24>)
    6b96:	3000      	adds	r0, #0
    6b98:	bf18      	it	ne
    6b9a:	2001      	movne	r0, #1
    6b9c:	4b05      	ldr	r3, [pc, #20]	; (6bb4 <usart_async_set_parity+0x28>)
    6b9e:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    6ba0:	4629      	mov	r1, r5
    6ba2:	f104 0008 	add.w	r0, r4, #8
    6ba6:	4b04      	ldr	r3, [pc, #16]	; (6bb8 <usart_async_set_parity+0x2c>)
    6ba8:	4798      	blx	r3
}
    6baa:	2000      	movs	r0, #0
    6bac:	bd38      	pop	{r3, r4, r5, pc}
    6bae:	bf00      	nop
    6bb0:	0000efec 	.word	0x0000efec
    6bb4:	000072b1 	.word	0x000072b1
    6bb8:	00008bf1 	.word	0x00008bf1

00006bbc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    6bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6bc0:	460f      	mov	r7, r1
    6bc2:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    6bc4:	4604      	mov	r4, r0
    6bc6:	b328      	cbz	r0, 6c14 <usart_sync_write+0x58>
    6bc8:	b331      	cbz	r1, 6c18 <usart_sync_write+0x5c>
    6bca:	1c10      	adds	r0, r2, #0
    6bcc:	bf18      	it	ne
    6bce:	2001      	movne	r0, #1
    6bd0:	22f1      	movs	r2, #241	; 0xf1
    6bd2:	4912      	ldr	r1, [pc, #72]	; (6c1c <usart_sync_write+0x60>)
    6bd4:	4b12      	ldr	r3, [pc, #72]	; (6c20 <usart_sync_write+0x64>)
    6bd6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    6bd8:	3408      	adds	r4, #8
    6bda:	4d12      	ldr	r5, [pc, #72]	; (6c24 <usart_sync_write+0x68>)
    6bdc:	4620      	mov	r0, r4
    6bde:	47a8      	blx	r5
    6be0:	2800      	cmp	r0, #0
    6be2:	d0fb      	beq.n	6bdc <usart_sync_write+0x20>
    6be4:	3f01      	subs	r7, #1
    6be6:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    6be8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 6c2c <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    6bec:	4d0d      	ldr	r5, [pc, #52]	; (6c24 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    6bee:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    6bf2:	4620      	mov	r0, r4
    6bf4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    6bf6:	4620      	mov	r0, r4
    6bf8:	47a8      	blx	r5
    6bfa:	2800      	cmp	r0, #0
    6bfc:	d0fb      	beq.n	6bf6 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    6bfe:	3601      	adds	r6, #1
    6c00:	4546      	cmp	r6, r8
    6c02:	d3f4      	bcc.n	6bee <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    6c04:	4d08      	ldr	r5, [pc, #32]	; (6c28 <usart_sync_write+0x6c>)
    6c06:	4620      	mov	r0, r4
    6c08:	47a8      	blx	r5
    6c0a:	2800      	cmp	r0, #0
    6c0c:	d0fb      	beq.n	6c06 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    6c0e:	4630      	mov	r0, r6
    6c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    6c14:	2000      	movs	r0, #0
    6c16:	e7db      	b.n	6bd0 <usart_sync_write+0x14>
    6c18:	2000      	movs	r0, #0
    6c1a:	e7d9      	b.n	6bd0 <usart_sync_write+0x14>
    6c1c:	0000f00c 	.word	0x0000f00c
    6c20:	000072b1 	.word	0x000072b1
    6c24:	00008c15 	.word	0x00008c15
    6c28:	00008c1f 	.word	0x00008c1f
    6c2c:	00008c01 	.word	0x00008c01

00006c30 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    6c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c34:	460f      	mov	r7, r1
    6c36:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    6c38:	4604      	mov	r4, r0
    6c3a:	b1e0      	cbz	r0, 6c76 <usart_sync_read+0x46>
    6c3c:	b1e9      	cbz	r1, 6c7a <usart_sync_read+0x4a>
    6c3e:	1c10      	adds	r0, r2, #0
    6c40:	bf18      	it	ne
    6c42:	2001      	movne	r0, #1
    6c44:	f44f 7286 	mov.w	r2, #268	; 0x10c
    6c48:	490d      	ldr	r1, [pc, #52]	; (6c80 <usart_sync_read+0x50>)
    6c4a:	4b0e      	ldr	r3, [pc, #56]	; (6c84 <usart_sync_read+0x54>)
    6c4c:	4798      	blx	r3
    6c4e:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    6c50:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    6c52:	3408      	adds	r4, #8
    6c54:	4d0c      	ldr	r5, [pc, #48]	; (6c88 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    6c56:	f8df 9034 	ldr.w	r9, [pc, #52]	; 6c8c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    6c5a:	4620      	mov	r0, r4
    6c5c:	47a8      	blx	r5
    6c5e:	2800      	cmp	r0, #0
    6c60:	d0fb      	beq.n	6c5a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    6c62:	4620      	mov	r0, r4
    6c64:	47c8      	blx	r9
    6c66:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    6c6a:	3601      	adds	r6, #1
    6c6c:	4546      	cmp	r6, r8
    6c6e:	d3f4      	bcc.n	6c5a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    6c70:	4630      	mov	r0, r6
    6c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    6c76:	2000      	movs	r0, #0
    6c78:	e7e4      	b.n	6c44 <usart_sync_read+0x14>
    6c7a:	2000      	movs	r0, #0
    6c7c:	e7e2      	b.n	6c44 <usart_sync_read+0x14>
    6c7e:	bf00      	nop
    6c80:	0000f00c 	.word	0x0000f00c
    6c84:	000072b1 	.word	0x000072b1
    6c88:	00008c29 	.word	0x00008c29
    6c8c:	00008c0d 	.word	0x00008c0d

00006c90 <usart_sync_init>:
{
    6c90:	b538      	push	{r3, r4, r5, lr}
    6c92:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    6c94:	4604      	mov	r4, r0
    6c96:	b198      	cbz	r0, 6cc0 <usart_sync_init+0x30>
    6c98:	1c08      	adds	r0, r1, #0
    6c9a:	bf18      	it	ne
    6c9c:	2001      	movne	r0, #1
    6c9e:	2234      	movs	r2, #52	; 0x34
    6ca0:	4908      	ldr	r1, [pc, #32]	; (6cc4 <usart_sync_init+0x34>)
    6ca2:	4b09      	ldr	r3, [pc, #36]	; (6cc8 <usart_sync_init+0x38>)
    6ca4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    6ca6:	4629      	mov	r1, r5
    6ca8:	f104 0008 	add.w	r0, r4, #8
    6cac:	4b07      	ldr	r3, [pc, #28]	; (6ccc <usart_sync_init+0x3c>)
    6cae:	4798      	blx	r3
	if (init_status) {
    6cb0:	4603      	mov	r3, r0
    6cb2:	b918      	cbnz	r0, 6cbc <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    6cb4:	4a06      	ldr	r2, [pc, #24]	; (6cd0 <usart_sync_init+0x40>)
    6cb6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    6cb8:	4a06      	ldr	r2, [pc, #24]	; (6cd4 <usart_sync_init+0x44>)
    6cba:	6022      	str	r2, [r4, #0]
}
    6cbc:	4618      	mov	r0, r3
    6cbe:	bd38      	pop	{r3, r4, r5, pc}
    6cc0:	2000      	movs	r0, #0
    6cc2:	e7ec      	b.n	6c9e <usart_sync_init+0xe>
    6cc4:	0000f00c 	.word	0x0000f00c
    6cc8:	000072b1 	.word	0x000072b1
    6ccc:	00008b0d 	.word	0x00008b0d
    6cd0:	00006c31 	.word	0x00006c31
    6cd4:	00006bbd 	.word	0x00006bbd

00006cd8 <usart_sync_enable>:
{
    6cd8:	b510      	push	{r4, lr}
	ASSERT(descr);
    6cda:	4604      	mov	r4, r0
    6cdc:	2253      	movs	r2, #83	; 0x53
    6cde:	4906      	ldr	r1, [pc, #24]	; (6cf8 <usart_sync_enable+0x20>)
    6ce0:	3000      	adds	r0, #0
    6ce2:	bf18      	it	ne
    6ce4:	2001      	movne	r0, #1
    6ce6:	4b05      	ldr	r3, [pc, #20]	; (6cfc <usart_sync_enable+0x24>)
    6ce8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    6cea:	f104 0008 	add.w	r0, r4, #8
    6cee:	4b04      	ldr	r3, [pc, #16]	; (6d00 <usart_sync_enable+0x28>)
    6cf0:	4798      	blx	r3
}
    6cf2:	2000      	movs	r0, #0
    6cf4:	bd10      	pop	{r4, pc}
    6cf6:	bf00      	nop
    6cf8:	0000f00c 	.word	0x0000f00c
    6cfc:	000072b1 	.word	0x000072b1
    6d00:	00008bb5 	.word	0x00008bb5

00006d04 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6d04:	4b0f      	ldr	r3, [pc, #60]	; (6d44 <_usb_d_find_ep+0x40>)
    6d06:	7859      	ldrb	r1, [r3, #1]
    6d08:	4288      	cmp	r0, r1
    6d0a:	d018      	beq.n	6d3e <_usb_d_find_ep+0x3a>
{
    6d0c:	b430      	push	{r4, r5}
    6d0e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6d10:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    6d12:	f000 050f 	and.w	r5, r0, #15
    6d16:	e007      	b.n	6d28 <_usb_d_find_ep+0x24>
    6d18:	3301      	adds	r3, #1
    6d1a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6d1c:	2b0d      	cmp	r3, #13
    6d1e:	d009      	beq.n	6d34 <_usb_d_find_ep+0x30>
    6d20:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6d22:	7851      	ldrb	r1, [r2, #1]
    6d24:	4281      	cmp	r1, r0
    6d26:	d007      	beq.n	6d38 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    6d28:	7814      	ldrb	r4, [r2, #0]
    6d2a:	2c00      	cmp	r4, #0
    6d2c:	d1f4      	bne.n	6d18 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    6d2e:	428d      	cmp	r5, r1
    6d30:	d1f2      	bne.n	6d18 <_usb_d_find_ep+0x14>
    6d32:	e001      	b.n	6d38 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    6d34:	f04f 33ff 	mov.w	r3, #4294967295
}
    6d38:	4618      	mov	r0, r3
    6d3a:	bc30      	pop	{r4, r5}
    6d3c:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6d3e:	2300      	movs	r3, #0
}
    6d40:	4618      	mov	r0, r3
    6d42:	4770      	bx	lr
    6d44:	200006d4 	.word	0x200006d4

00006d48 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    6d48:	2000      	movs	r0, #0
    6d4a:	4770      	bx	lr

00006d4c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    6d4c:	b538      	push	{r3, r4, r5, lr}
    6d4e:	4604      	mov	r4, r0
    6d50:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    6d52:	4b09      	ldr	r3, [pc, #36]	; (6d78 <usb_d_cb_trans_more+0x2c>)
    6d54:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    6d56:	4b09      	ldr	r3, [pc, #36]	; (6d7c <usb_d_cb_trans_more+0x30>)
    6d58:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    6d5c:	789b      	ldrb	r3, [r3, #2]
    6d5e:	2b03      	cmp	r3, #3
    6d60:	d001      	beq.n	6d66 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    6d62:	2000      	movs	r0, #0
}
    6d64:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    6d66:	4b05      	ldr	r3, [pc, #20]	; (6d7c <usb_d_cb_trans_more+0x30>)
    6d68:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6d6c:	6983      	ldr	r3, [r0, #24]
    6d6e:	4629      	mov	r1, r5
    6d70:	4620      	mov	r0, r4
    6d72:	4798      	blx	r3
    6d74:	bd38      	pop	{r3, r4, r5, pc}
    6d76:	bf00      	nop
    6d78:	00006d05 	.word	0x00006d05
    6d7c:	200006d4 	.word	0x200006d4

00006d80 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    6d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d82:	b085      	sub	sp, #20
    6d84:	4606      	mov	r6, r0
    6d86:	460d      	mov	r5, r1
    6d88:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    6d8a:	4b4d      	ldr	r3, [pc, #308]	; (6ec0 <_usb_d_cb_trans_done+0x140>)
    6d8c:	4798      	blx	r3
    6d8e:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    6d90:	2d00      	cmp	r5, #0
    6d92:	d15b      	bne.n	6e4c <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    6d94:	4a4b      	ldr	r2, [pc, #300]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6d96:	0143      	lsls	r3, r0, #5
    6d98:	18d1      	adds	r1, r2, r3
    6d9a:	2000      	movs	r0, #0
    6d9c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6d9e:	5cd3      	ldrb	r3, [r2, r3]
    6da0:	b173      	cbz	r3, 6dc0 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6da2:	4b48      	ldr	r3, [pc, #288]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6da4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6da8:	2201      	movs	r2, #1
    6daa:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    6dac:	4845      	ldr	r0, [pc, #276]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6dae:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6db2:	69c3      	ldr	r3, [r0, #28]
    6db4:	463a      	mov	r2, r7
    6db6:	78c1      	ldrb	r1, [r0, #3]
    6db8:	4630      	mov	r0, r6
    6dba:	4798      	blx	r3
}
    6dbc:	b005      	add	sp, #20
    6dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    6dc0:	788b      	ldrb	r3, [r1, #2]
    6dc2:	2b03      	cmp	r3, #3
    6dc4:	d00b      	beq.n	6dde <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    6dc6:	483f      	ldr	r0, [pc, #252]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6dc8:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    6dcc:	4614      	mov	r4, r2
    6dce:	69d3      	ldr	r3, [r2, #28]
    6dd0:	320c      	adds	r2, #12
    6dd2:	2100      	movs	r1, #0
    6dd4:	7860      	ldrb	r0, [r4, #1]
    6dd6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6dd8:	2302      	movs	r3, #2
    6dda:	70a3      	strb	r3, [r4, #2]
    6ddc:	e7ee      	b.n	6dbc <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    6dde:	460b      	mov	r3, r1
    6de0:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    6de4:	460a      	mov	r2, r1
    6de6:	69ce      	ldr	r6, [r1, #28]
    6de8:	320c      	adds	r2, #12
    6dea:	2101      	movs	r1, #1
    6dec:	7858      	ldrb	r0, [r3, #1]
    6dee:	47b0      	blx	r6
		if (err) {
    6df0:	b1a0      	cbz	r0, 6e1c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    6df2:	4b34      	ldr	r3, [pc, #208]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6df4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6df8:	2205      	movs	r2, #5
    6dfa:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    6dfc:	2202      	movs	r2, #2
    6dfe:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    6e00:	2d00      	cmp	r5, #0
    6e02:	db09      	blt.n	6e18 <_usb_d_cb_trans_done+0x98>
    6e04:	482f      	ldr	r0, [pc, #188]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6e06:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6e0a:	7840      	ldrb	r0, [r0, #1]
    6e0c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    6e10:	2101      	movs	r1, #1
    6e12:	4b2d      	ldr	r3, [pc, #180]	; (6ec8 <_usb_d_cb_trans_done+0x148>)
    6e14:	4798      	blx	r3
    6e16:	e7d1      	b.n	6dbc <_usb_d_cb_trans_done+0x3c>
    6e18:	7858      	ldrb	r0, [r3, #1]
    6e1a:	e7f9      	b.n	6e10 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6e1c:	4829      	ldr	r0, [pc, #164]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6e1e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6e22:	2304      	movs	r3, #4
    6e24:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    6e26:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    6e28:	2200      	movs	r2, #0
    6e2a:	9201      	str	r2, [sp, #4]
    6e2c:	9202      	str	r2, [sp, #8]
    6e2e:	4295      	cmp	r5, r2
    6e30:	bfac      	ite	ge
    6e32:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    6e36:	f003 030f 	andlt.w	r3, r3, #15
    6e3a:	f88d 300c 	strb.w	r3, [sp, #12]
    6e3e:	2301      	movs	r3, #1
    6e40:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    6e44:	a801      	add	r0, sp, #4
    6e46:	4b21      	ldr	r3, [pc, #132]	; (6ecc <_usb_d_cb_trans_done+0x14c>)
    6e48:	4798      	blx	r3
    6e4a:	e7b7      	b.n	6dbc <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    6e4c:	2d01      	cmp	r5, #1
    6e4e:	d00a      	beq.n	6e66 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    6e50:	2d02      	cmp	r5, #2
    6e52:	d01c      	beq.n	6e8e <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    6e54:	2d03      	cmp	r5, #3
    6e56:	d02a      	beq.n	6eae <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    6e58:	4b1a      	ldr	r3, [pc, #104]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6e5a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    6e5e:	2206      	movs	r2, #6
    6e60:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    6e62:	70da      	strb	r2, [r3, #3]
    6e64:	e7a2      	b.n	6dac <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    6e66:	4a17      	ldr	r2, [pc, #92]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6e68:	0143      	lsls	r3, r0, #5
    6e6a:	18d1      	adds	r1, r2, r3
    6e6c:	2002      	movs	r0, #2
    6e6e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6e70:	5cd3      	ldrb	r3, [r2, r3]
    6e72:	b12b      	cbz	r3, 6e80 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    6e74:	4b13      	ldr	r3, [pc, #76]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6e76:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6e7a:	2205      	movs	r2, #5
    6e7c:	709a      	strb	r2, [r3, #2]
    6e7e:	e795      	b.n	6dac <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6e80:	460b      	mov	r3, r1
    6e82:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6e84:	2100      	movs	r1, #0
    6e86:	4630      	mov	r0, r6
    6e88:	4b0f      	ldr	r3, [pc, #60]	; (6ec8 <_usb_d_cb_trans_done+0x148>)
    6e8a:	4798      	blx	r3
    6e8c:	e78e      	b.n	6dac <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    6e8e:	4a0d      	ldr	r2, [pc, #52]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6e90:	0143      	lsls	r3, r0, #5
    6e92:	18d1      	adds	r1, r2, r3
    6e94:	2004      	movs	r0, #4
    6e96:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6e98:	5cd3      	ldrb	r3, [r2, r3]
    6e9a:	b12b      	cbz	r3, 6ea8 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6e9c:	4b09      	ldr	r3, [pc, #36]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6e9e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6ea2:	2201      	movs	r2, #1
    6ea4:	709a      	strb	r2, [r3, #2]
    6ea6:	e781      	b.n	6dac <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6ea8:	2302      	movs	r3, #2
    6eaa:	708b      	strb	r3, [r1, #2]
			return;
    6eac:	e786      	b.n	6dbc <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    6eae:	4b05      	ldr	r3, [pc, #20]	; (6ec4 <_usb_d_cb_trans_done+0x144>)
    6eb0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    6eb4:	2200      	movs	r2, #0
    6eb6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    6eb8:	2205      	movs	r2, #5
    6eba:	70da      	strb	r2, [r3, #3]
    6ebc:	e776      	b.n	6dac <_usb_d_cb_trans_done+0x2c>
    6ebe:	bf00      	nop
    6ec0:	00006d05 	.word	0x00006d05
    6ec4:	200006d4 	.word	0x200006d4
    6ec8:	0000ab81 	.word	0x0000ab81
    6ecc:	0000ad29 	.word	0x0000ad29

00006ed0 <usb_d_cb_trans_setup>:
{
    6ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ed4:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6ed6:	4b1c      	ldr	r3, [pc, #112]	; (6f48 <usb_d_cb_trans_setup+0x78>)
    6ed8:	4798      	blx	r3
    6eda:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    6edc:	4c1b      	ldr	r4, [pc, #108]	; (6f4c <usb_d_cb_trans_setup+0x7c>)
    6ede:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    6ee2:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    6ee4:	4621      	mov	r1, r4
    6ee6:	4628      	mov	r0, r5
    6ee8:	4b19      	ldr	r3, [pc, #100]	; (6f50 <usb_d_cb_trans_setup+0x80>)
    6eea:	4798      	blx	r3
	if (n != 8) {
    6eec:	b2c0      	uxtb	r0, r0
    6eee:	2808      	cmp	r0, #8
    6ef0:	d009      	beq.n	6f06 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6ef2:	2101      	movs	r1, #1
    6ef4:	4628      	mov	r0, r5
    6ef6:	4c17      	ldr	r4, [pc, #92]	; (6f54 <usb_d_cb_trans_setup+0x84>)
    6ef8:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6efa:	2101      	movs	r1, #1
    6efc:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    6f00:	47a0      	blx	r4
		return;
    6f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6f06:	2100      	movs	r1, #0
    6f08:	4628      	mov	r0, r5
    6f0a:	4f12      	ldr	r7, [pc, #72]	; (6f54 <usb_d_cb_trans_setup+0x84>)
    6f0c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    6f0e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    6f12:	2100      	movs	r1, #0
    6f14:	4640      	mov	r0, r8
    6f16:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    6f18:	4b0c      	ldr	r3, [pc, #48]	; (6f4c <usb_d_cb_trans_setup+0x7c>)
    6f1a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    6f1e:	2201      	movs	r2, #1
    6f20:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    6f22:	695b      	ldr	r3, [r3, #20]
    6f24:	4621      	mov	r1, r4
    6f26:	4628      	mov	r0, r5
    6f28:	4798      	blx	r3
    6f2a:	b108      	cbz	r0, 6f30 <usb_d_cb_trans_setup+0x60>
    6f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    6f30:	4b06      	ldr	r3, [pc, #24]	; (6f4c <usb_d_cb_trans_setup+0x7c>)
    6f32:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    6f36:	2305      	movs	r3, #5
    6f38:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6f3a:	2101      	movs	r1, #1
    6f3c:	4628      	mov	r0, r5
    6f3e:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6f40:	2101      	movs	r1, #1
    6f42:	4640      	mov	r0, r8
    6f44:	47b8      	blx	r7
    6f46:	e7f1      	b.n	6f2c <usb_d_cb_trans_setup+0x5c>
    6f48:	00006d05 	.word	0x00006d05
    6f4c:	200006d4 	.word	0x200006d4
    6f50:	0000acc9 	.word	0x0000acc9
    6f54:	0000ab81 	.word	0x0000ab81

00006f58 <usb_d_init>:

int32_t usb_d_init(void)
{
    6f58:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    6f5a:	4b11      	ldr	r3, [pc, #68]	; (6fa0 <usb_d_init+0x48>)
    6f5c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    6f5e:	2800      	cmp	r0, #0
    6f60:	db1d      	blt.n	6f9e <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    6f62:	4c10      	ldr	r4, [pc, #64]	; (6fa4 <usb_d_init+0x4c>)
    6f64:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    6f68:	2100      	movs	r1, #0
    6f6a:	4620      	mov	r0, r4
    6f6c:	4b0e      	ldr	r3, [pc, #56]	; (6fa8 <usb_d_init+0x50>)
    6f6e:	4798      	blx	r3
    6f70:	4623      	mov	r3, r4
    6f72:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6f76:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6f78:	4a0c      	ldr	r2, [pc, #48]	; (6fac <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6f7a:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6f7c:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    6f7e:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    6f80:	61da      	str	r2, [r3, #28]
    6f82:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6f84:	4283      	cmp	r3, r0
    6f86:	d1f8      	bne.n	6f7a <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    6f88:	4909      	ldr	r1, [pc, #36]	; (6fb0 <usb_d_init+0x58>)
    6f8a:	2000      	movs	r0, #0
    6f8c:	4c09      	ldr	r4, [pc, #36]	; (6fb4 <usb_d_init+0x5c>)
    6f8e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    6f90:	4909      	ldr	r1, [pc, #36]	; (6fb8 <usb_d_init+0x60>)
    6f92:	2001      	movs	r0, #1
    6f94:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    6f96:	4909      	ldr	r1, [pc, #36]	; (6fbc <usb_d_init+0x64>)
    6f98:	2002      	movs	r0, #2
    6f9a:	47a0      	blx	r4
	return ERR_NONE;
    6f9c:	2000      	movs	r0, #0
}
    6f9e:	bd10      	pop	{r4, pc}
    6fa0:	0000a54d 	.word	0x0000a54d
    6fa4:	200006d4 	.word	0x200006d4
    6fa8:	0000d447 	.word	0x0000d447
    6fac:	00006d49 	.word	0x00006d49
    6fb0:	00006ed1 	.word	0x00006ed1
    6fb4:	0000af31 	.word	0x0000af31
    6fb8:	00006d4d 	.word	0x00006d4d
    6fbc:	00006d81 	.word	0x00006d81

00006fc0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    6fc0:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    6fc2:	4b01      	ldr	r3, [pc, #4]	; (6fc8 <usb_d_register_callback+0x8>)
    6fc4:	4798      	blx	r3
    6fc6:	bd08      	pop	{r3, pc}
    6fc8:	0000af09 	.word	0x0000af09

00006fcc <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    6fcc:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    6fce:	4b01      	ldr	r3, [pc, #4]	; (6fd4 <usb_d_enable+0x8>)
    6fd0:	4798      	blx	r3
}
    6fd2:	bd08      	pop	{r3, pc}
    6fd4:	0000a655 	.word	0x0000a655

00006fd8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    6fd8:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    6fda:	4b01      	ldr	r3, [pc, #4]	; (6fe0 <usb_d_attach+0x8>)
    6fdc:	4798      	blx	r3
    6fde:	bd08      	pop	{r3, pc}
    6fe0:	0000a6c1 	.word	0x0000a6c1

00006fe4 <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    6fe4:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    6fe6:	4b01      	ldr	r3, [pc, #4]	; (6fec <usb_d_get_frame_num+0x8>)
    6fe8:	4798      	blx	r3
}
    6fea:	bd08      	pop	{r3, pc}
    6fec:	0000a6df 	.word	0x0000a6df

00006ff0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    6ff0:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    6ff2:	4b01      	ldr	r3, [pc, #4]	; (6ff8 <usb_d_set_address+0x8>)
    6ff4:	4798      	blx	r3
    6ff6:	bd08      	pop	{r3, pc}
    6ff8:	0000a6d3 	.word	0x0000a6d3

00006ffc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    6ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ffe:	4606      	mov	r6, r0
    7000:	460c      	mov	r4, r1
    7002:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    7004:	4b0f      	ldr	r3, [pc, #60]	; (7044 <usb_d_ep_init+0x48>)
    7006:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    7008:	2800      	cmp	r0, #0
    700a:	da14      	bge.n	7036 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    700c:	20ff      	movs	r0, #255	; 0xff
    700e:	4b0d      	ldr	r3, [pc, #52]	; (7044 <usb_d_ep_init+0x48>)
    7010:	4798      	blx	r3
		if (ep_index < 0) {
    7012:	1e05      	subs	r5, r0, #0
    7014:	db12      	blt.n	703c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    7016:	463a      	mov	r2, r7
    7018:	4621      	mov	r1, r4
    701a:	4630      	mov	r0, r6
    701c:	4b0a      	ldr	r3, [pc, #40]	; (7048 <usb_d_ep_init+0x4c>)
    701e:	4798      	blx	r3
	if (rc < 0) {
    7020:	2800      	cmp	r0, #0
    7022:	db0d      	blt.n	7040 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    7024:	4b09      	ldr	r3, [pc, #36]	; (704c <usb_d_ep_init+0x50>)
    7026:	0168      	lsls	r0, r5, #5
    7028:	181a      	adds	r2, r3, r0
    702a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    702c:	f004 0403 	and.w	r4, r4, #3
    7030:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    7032:	2000      	movs	r0, #0
    7034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    7036:	f06f 0013 	mvn.w	r0, #19
    703a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    703c:	f06f 0014 	mvn.w	r0, #20
}
    7040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7042:	bf00      	nop
    7044:	00006d05 	.word	0x00006d05
    7048:	0000a6ed 	.word	0x0000a6ed
    704c:	200006d4 	.word	0x200006d4

00007050 <usb_d_ep0_init>:
{
    7050:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    7052:	4602      	mov	r2, r0
    7054:	2100      	movs	r1, #0
    7056:	4608      	mov	r0, r1
    7058:	4b01      	ldr	r3, [pc, #4]	; (7060 <usb_d_ep0_init+0x10>)
    705a:	4798      	blx	r3
}
    705c:	bd08      	pop	{r3, pc}
    705e:	bf00      	nop
    7060:	00006ffd 	.word	0x00006ffd

00007064 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    7064:	b538      	push	{r3, r4, r5, lr}
    7066:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    7068:	4b06      	ldr	r3, [pc, #24]	; (7084 <usb_d_ep_deinit+0x20>)
    706a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    706c:	1e04      	subs	r4, r0, #0
    706e:	db07      	blt.n	7080 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    7070:	4628      	mov	r0, r5
    7072:	4b05      	ldr	r3, [pc, #20]	; (7088 <usb_d_ep_deinit+0x24>)
    7074:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    7076:	4805      	ldr	r0, [pc, #20]	; (708c <usb_d_ep_deinit+0x28>)
    7078:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    707c:	23ff      	movs	r3, #255	; 0xff
    707e:	7043      	strb	r3, [r0, #1]
    7080:	bd38      	pop	{r3, r4, r5, pc}
    7082:	bf00      	nop
    7084:	00006d05 	.word	0x00006d05
    7088:	0000a805 	.word	0x0000a805
    708c:	200006d4 	.word	0x200006d4

00007090 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    7090:	b538      	push	{r3, r4, r5, lr}
    7092:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    7094:	4b0e      	ldr	r3, [pc, #56]	; (70d0 <usb_d_ep_enable+0x40>)
    7096:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    7098:	1e04      	subs	r4, r0, #0
    709a:	db16      	blt.n	70ca <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    709c:	0163      	lsls	r3, r4, #5
    709e:	4a0d      	ldr	r2, [pc, #52]	; (70d4 <usb_d_ep_enable+0x44>)
    70a0:	5cd3      	ldrb	r3, [r2, r3]
    70a2:	2b00      	cmp	r3, #0
    70a4:	bf0c      	ite	eq
    70a6:	2202      	moveq	r2, #2
    70a8:	2201      	movne	r2, #1
    70aa:	4b0a      	ldr	r3, [pc, #40]	; (70d4 <usb_d_ep_enable+0x44>)
    70ac:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    70b0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    70b2:	4628      	mov	r0, r5
    70b4:	4b08      	ldr	r3, [pc, #32]	; (70d8 <usb_d_ep_enable+0x48>)
    70b6:	4798      	blx	r3
	if (rc < 0) {
    70b8:	2800      	cmp	r0, #0
    70ba:	db00      	blt.n	70be <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    70bc:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    70be:	4b05      	ldr	r3, [pc, #20]	; (70d4 <usb_d_ep_enable+0x44>)
    70c0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    70c4:	2300      	movs	r3, #0
    70c6:	70a3      	strb	r3, [r4, #2]
    70c8:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    70ca:	f06f 0011 	mvn.w	r0, #17
    70ce:	e7f5      	b.n	70bc <usb_d_ep_enable+0x2c>
    70d0:	00006d05 	.word	0x00006d05
    70d4:	200006d4 	.word	0x200006d4
    70d8:	0000a8c9 	.word	0x0000a8c9

000070dc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    70dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    70e0:	b086      	sub	sp, #24
    70e2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    70e4:	7a07      	ldrb	r7, [r0, #8]
    70e6:	4638      	mov	r0, r7
    70e8:	4b3f      	ldr	r3, [pc, #252]	; (71e8 <usb_d_ep_transfer+0x10c>)
    70ea:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    70ec:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    70ee:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    70f2:	1e06      	subs	r6, r0, #0
    70f4:	db72      	blt.n	71dc <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    70f6:	a804      	add	r0, sp, #16
    70f8:	4b3c      	ldr	r3, [pc, #240]	; (71ec <usb_d_ep_transfer+0x110>)
    70fa:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    70fc:	4b3c      	ldr	r3, [pc, #240]	; (71f0 <usb_d_ep_transfer+0x114>)
    70fe:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    7102:	789b      	ldrb	r3, [r3, #2]
    7104:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    7108:	f89d 3017 	ldrb.w	r3, [sp, #23]
    710c:	b2db      	uxtb	r3, r3
    710e:	2b01      	cmp	r3, #1
    7110:	d011      	beq.n	7136 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    7112:	a804      	add	r0, sp, #16
    7114:	4b37      	ldr	r3, [pc, #220]	; (71f4 <usb_d_ep_transfer+0x118>)
    7116:	4798      	blx	r3
		switch (state) {
    7118:	f89d 3017 	ldrb.w	r3, [sp, #23]
    711c:	b2db      	uxtb	r3, r3
    711e:	2b05      	cmp	r3, #5
    7120:	d05f      	beq.n	71e2 <usb_d_ep_transfer+0x106>
    7122:	2b06      	cmp	r3, #6
    7124:	d023      	beq.n	716e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    7126:	2b00      	cmp	r3, #0
    7128:	bf0c      	ite	eq
    712a:	f06f 0012 	mvneq.w	r0, #18
    712e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    7130:	b006      	add	sp, #24
    7132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    7136:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 71f0 <usb_d_ep_transfer+0x114>
    713a:	ea4f 1946 	mov.w	r9, r6, lsl #5
    713e:	eb0a 0309 	add.w	r3, sl, r9
    7142:	2203      	movs	r2, #3
    7144:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    7146:	a804      	add	r0, sp, #16
    7148:	4b2a      	ldr	r3, [pc, #168]	; (71f4 <usb_d_ep_transfer+0x118>)
    714a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    714c:	f81a 3009 	ldrb.w	r3, [sl, r9]
    7150:	b183      	cbz	r3, 7174 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    7152:	7a22      	ldrb	r2, [r4, #8]
    7154:	3500      	adds	r5, #0
    7156:	bf18      	it	ne
    7158:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    715a:	6823      	ldr	r3, [r4, #0]
    715c:	9301      	str	r3, [sp, #4]
    715e:	f8cd 8008 	str.w	r8, [sp, #8]
    7162:	f017 0f80 	tst.w	r7, #128	; 0x80
    7166:	d119      	bne.n	719c <usb_d_ep_transfer+0xc0>
    7168:	f002 030f 	and.w	r3, r2, #15
    716c:	e018      	b.n	71a0 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    716e:	f06f 000f 	mvn.w	r0, #15
    7172:	e7dd      	b.n	7130 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    7174:	4b1e      	ldr	r3, [pc, #120]	; (71f0 <usb_d_ep_transfer+0x114>)
    7176:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    717a:	7cda      	ldrb	r2, [r3, #19]
    717c:	7c9d      	ldrb	r5, [r3, #18]
    717e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    7182:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    7184:	b9a5      	cbnz	r5, 71b0 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    7186:	4b1a      	ldr	r3, [pc, #104]	; (71f0 <usb_d_ep_transfer+0x114>)
    7188:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    718c:	2304      	movs	r3, #4
    718e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    7190:	2300      	movs	r3, #0
			zlp                 = true;
    7192:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    7194:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    7196:	6821      	ldr	r1, [r4, #0]
    7198:	9101      	str	r1, [sp, #4]
    719a:	9302      	str	r3, [sp, #8]
    719c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    71a0:	f88d 300c 	strb.w	r3, [sp, #12]
    71a4:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    71a8:	a801      	add	r0, sp, #4
    71aa:	4b13      	ldr	r3, [pc, #76]	; (71f8 <usb_d_ep_transfer+0x11c>)
    71ac:	4798      	blx	r3
	return rc;
    71ae:	e7bf      	b.n	7130 <usb_d_ep_transfer+0x54>
    71b0:	4643      	mov	r3, r8
    71b2:	45a8      	cmp	r8, r5
    71b4:	bf28      	it	cs
    71b6:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    71b8:	4a0d      	ldr	r2, [pc, #52]	; (71f0 <usb_d_ep_transfer+0x114>)
    71ba:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    71be:	f996 200c 	ldrsb.w	r2, [r6, #12]
    71c2:	2a00      	cmp	r2, #0
    71c4:	db05      	blt.n	71d2 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    71c6:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    71c8:	6821      	ldr	r1, [r4, #0]
    71ca:	9101      	str	r1, [sp, #4]
    71cc:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    71ce:	2500      	movs	r5, #0
    71d0:	e7ca      	b.n	7168 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    71d2:	429d      	cmp	r5, r3
    71d4:	bf94      	ite	ls
    71d6:	2500      	movls	r5, #0
    71d8:	2501      	movhi	r5, #1
    71da:	e7db      	b.n	7194 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    71dc:	f06f 0011 	mvn.w	r0, #17
    71e0:	e7a6      	b.n	7130 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    71e2:	2002      	movs	r0, #2
    71e4:	e7a4      	b.n	7130 <usb_d_ep_transfer+0x54>
    71e6:	bf00      	nop
    71e8:	00006d05 	.word	0x00006d05
    71ec:	00005c7d 	.word	0x00005c7d
    71f0:	200006d4 	.word	0x200006d4
    71f4:	00005c8b 	.word	0x00005c8b
    71f8:	0000ad29 	.word	0x0000ad29

000071fc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    71fc:	b538      	push	{r3, r4, r5, lr}
    71fe:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    7200:	b141      	cbz	r1, 7214 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    7202:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7204:	bf0c      	ite	eq
    7206:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    7208:	2102      	movne	r1, #2
    720a:	4b13      	ldr	r3, [pc, #76]	; (7258 <usb_d_ep_halt+0x5c>)
    720c:	4798      	blx	r3
    720e:	4603      	mov	r3, r0
	}
}
    7210:	4618      	mov	r0, r3
    7212:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    7214:	4b11      	ldr	r3, [pc, #68]	; (725c <usb_d_ep_halt+0x60>)
    7216:	4798      	blx	r3
	if (ep_index < 0) {
    7218:	1e05      	subs	r5, r0, #0
    721a:	db19      	blt.n	7250 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    721c:	2102      	movs	r1, #2
    721e:	4620      	mov	r0, r4
    7220:	4b0d      	ldr	r3, [pc, #52]	; (7258 <usb_d_ep_halt+0x5c>)
    7222:	4798      	blx	r3
    7224:	4603      	mov	r3, r0
    7226:	2800      	cmp	r0, #0
    7228:	d0f2      	beq.n	7210 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    722a:	2100      	movs	r1, #0
    722c:	4620      	mov	r0, r4
    722e:	4b0a      	ldr	r3, [pc, #40]	; (7258 <usb_d_ep_halt+0x5c>)
    7230:	4798      	blx	r3
		if (rc < 0) {
    7232:	1e03      	subs	r3, r0, #0
    7234:	dbec      	blt.n	7210 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7236:	4b0a      	ldr	r3, [pc, #40]	; (7260 <usb_d_ep_halt+0x64>)
    7238:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    723c:	2201      	movs	r2, #1
    723e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    7240:	2103      	movs	r1, #3
    7242:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    7244:	69db      	ldr	r3, [r3, #28]
    7246:	2200      	movs	r2, #0
    7248:	4620      	mov	r0, r4
    724a:	4798      	blx	r3
	return ERR_NONE;
    724c:	2300      	movs	r3, #0
    724e:	e7df      	b.n	7210 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    7250:	f06f 0311 	mvn.w	r3, #17
    7254:	e7dc      	b.n	7210 <usb_d_ep_halt+0x14>
    7256:	bf00      	nop
    7258:	0000ab81 	.word	0x0000ab81
    725c:	00006d05 	.word	0x00006d05
    7260:	200006d4 	.word	0x200006d4

00007264 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    7264:	b538      	push	{r3, r4, r5, lr}
    7266:	460d      	mov	r5, r1
    7268:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    726a:	4b0e      	ldr	r3, [pc, #56]	; (72a4 <usb_d_ep_register_callback+0x40>)
    726c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    726e:	4b0e      	ldr	r3, [pc, #56]	; (72a8 <usb_d_ep_register_callback+0x44>)
    7270:	2c00      	cmp	r4, #0
    7272:	bf08      	it	eq
    7274:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    7276:	2800      	cmp	r0, #0
    7278:	db13      	blt.n	72a2 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    727a:	2d01      	cmp	r5, #1
    727c:	d008      	beq.n	7290 <usb_d_ep_register_callback+0x2c>
    727e:	b115      	cbz	r5, 7286 <usb_d_ep_register_callback+0x22>
    7280:	2d02      	cmp	r5, #2
    7282:	d00a      	beq.n	729a <usb_d_ep_register_callback+0x36>
    7284:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    7286:	4b09      	ldr	r3, [pc, #36]	; (72ac <usb_d_ep_register_callback+0x48>)
    7288:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    728c:	6144      	str	r4, [r0, #20]
		break;
    728e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    7290:	4b06      	ldr	r3, [pc, #24]	; (72ac <usb_d_ep_register_callback+0x48>)
    7292:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    7296:	6184      	str	r4, [r0, #24]
		break;
    7298:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    729a:	4b04      	ldr	r3, [pc, #16]	; (72ac <usb_d_ep_register_callback+0x48>)
    729c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    72a0:	61c4      	str	r4, [r0, #28]
    72a2:	bd38      	pop	{r3, r4, r5, pc}
    72a4:	00006d05 	.word	0x00006d05
    72a8:	00006d49 	.word	0x00006d49
    72ac:	200006d4 	.word	0x200006d4

000072b0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    72b0:	b900      	cbnz	r0, 72b4 <assert+0x4>
		__asm("BKPT #0");
    72b2:	be00      	bkpt	0x0000
    72b4:	4770      	bx	lr

000072b6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    72b6:	6803      	ldr	r3, [r0, #0]
    72b8:	b14b      	cbz	r3, 72ce <is_list_element+0x18>
		if (it == element) {
    72ba:	428b      	cmp	r3, r1
    72bc:	d009      	beq.n	72d2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    72be:	681b      	ldr	r3, [r3, #0]
    72c0:	b11b      	cbz	r3, 72ca <is_list_element+0x14>
		if (it == element) {
    72c2:	4299      	cmp	r1, r3
    72c4:	d1fb      	bne.n	72be <is_list_element+0x8>
			return true;
    72c6:	2001      	movs	r0, #1
		}
	}

	return false;
}
    72c8:	4770      	bx	lr
	return false;
    72ca:	2000      	movs	r0, #0
    72cc:	4770      	bx	lr
    72ce:	2000      	movs	r0, #0
    72d0:	4770      	bx	lr
			return true;
    72d2:	2001      	movs	r0, #1
    72d4:	4770      	bx	lr
	...

000072d8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    72d8:	b538      	push	{r3, r4, r5, lr}
    72da:	4604      	mov	r4, r0
    72dc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    72de:	4b06      	ldr	r3, [pc, #24]	; (72f8 <list_insert_as_head+0x20>)
    72e0:	4798      	blx	r3
    72e2:	f080 0001 	eor.w	r0, r0, #1
    72e6:	2239      	movs	r2, #57	; 0x39
    72e8:	4904      	ldr	r1, [pc, #16]	; (72fc <list_insert_as_head+0x24>)
    72ea:	b2c0      	uxtb	r0, r0
    72ec:	4b04      	ldr	r3, [pc, #16]	; (7300 <list_insert_as_head+0x28>)
    72ee:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    72f0:	6823      	ldr	r3, [r4, #0]
    72f2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    72f4:	6025      	str	r5, [r4, #0]
    72f6:	bd38      	pop	{r3, r4, r5, pc}
    72f8:	000072b7 	.word	0x000072b7
    72fc:	0000f028 	.word	0x0000f028
    7300:	000072b1 	.word	0x000072b1

00007304 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    7304:	6803      	ldr	r3, [r0, #0]
    7306:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    7308:	6001      	str	r1, [r0, #0]
    730a:	4770      	bx	lr

0000730c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    730c:	b570      	push	{r4, r5, r6, lr}
    730e:	4605      	mov	r5, r0
    7310:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    7312:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    7314:	4b0a      	ldr	r3, [pc, #40]	; (7340 <list_insert_at_end+0x34>)
    7316:	4798      	blx	r3
    7318:	f080 0001 	eor.w	r0, r0, #1
    731c:	224f      	movs	r2, #79	; 0x4f
    731e:	4909      	ldr	r1, [pc, #36]	; (7344 <list_insert_at_end+0x38>)
    7320:	b2c0      	uxtb	r0, r0
    7322:	4b09      	ldr	r3, [pc, #36]	; (7348 <list_insert_at_end+0x3c>)
    7324:	4798      	blx	r3

	if (!list->head) {
    7326:	682b      	ldr	r3, [r5, #0]
    7328:	b91b      	cbnz	r3, 7332 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    732a:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    732c:	6033      	str	r3, [r6, #0]
		return;
    732e:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    7330:	461c      	mov	r4, r3
	while (it->next) {
    7332:	6823      	ldr	r3, [r4, #0]
    7334:	2b00      	cmp	r3, #0
    7336:	d1fb      	bne.n	7330 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    7338:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    733a:	6033      	str	r3, [r6, #0]
    733c:	bd70      	pop	{r4, r5, r6, pc}
    733e:	bf00      	nop
    7340:	000072b7 	.word	0x000072b7
    7344:	0000f028 	.word	0x0000f028
    7348:	000072b1 	.word	0x000072b1

0000734c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    734c:	6803      	ldr	r3, [r0, #0]
    734e:	b10b      	cbz	r3, 7354 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    7350:	681a      	ldr	r2, [r3, #0]
    7352:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    7354:	4618      	mov	r0, r3
    7356:	4770      	bx	lr

00007358 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    7358:	b570      	push	{r4, r5, r6, lr}
    735a:	460e      	mov	r6, r1
    735c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    735e:	4604      	mov	r4, r0
    7360:	b178      	cbz	r0, 7382 <ringbuffer_init+0x2a>
    7362:	b181      	cbz	r1, 7386 <ringbuffer_init+0x2e>
    7364:	b1a2      	cbz	r2, 7390 <ringbuffer_init+0x38>
    7366:	2001      	movs	r0, #1
    7368:	2228      	movs	r2, #40	; 0x28
    736a:	490d      	ldr	r1, [pc, #52]	; (73a0 <ringbuffer_init+0x48>)
    736c:	4b0d      	ldr	r3, [pc, #52]	; (73a4 <ringbuffer_init+0x4c>)
    736e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    7370:	1e6b      	subs	r3, r5, #1
    7372:	421d      	tst	r5, r3
    7374:	d109      	bne.n	738a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    7376:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    7378:	2000      	movs	r0, #0
    737a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    737c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    737e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    7380:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    7382:	2000      	movs	r0, #0
    7384:	e7f0      	b.n	7368 <ringbuffer_init+0x10>
    7386:	2000      	movs	r0, #0
    7388:	e7ee      	b.n	7368 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    738a:	f06f 000c 	mvn.w	r0, #12
    738e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    7390:	2228      	movs	r2, #40	; 0x28
    7392:	4903      	ldr	r1, [pc, #12]	; (73a0 <ringbuffer_init+0x48>)
    7394:	2000      	movs	r0, #0
    7396:	4b03      	ldr	r3, [pc, #12]	; (73a4 <ringbuffer_init+0x4c>)
    7398:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    739a:	1e6b      	subs	r3, r5, #1
    739c:	e7eb      	b.n	7376 <ringbuffer_init+0x1e>
    739e:	bf00      	nop
    73a0:	0000f048 	.word	0x0000f048
    73a4:	000072b1 	.word	0x000072b1

000073a8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    73a8:	b538      	push	{r3, r4, r5, lr}
    73aa:	460d      	mov	r5, r1
	ASSERT(rb && data);
    73ac:	4604      	mov	r4, r0
    73ae:	b1a0      	cbz	r0, 73da <ringbuffer_get+0x32>
    73b0:	1c08      	adds	r0, r1, #0
    73b2:	bf18      	it	ne
    73b4:	2001      	movne	r0, #1
    73b6:	2240      	movs	r2, #64	; 0x40
    73b8:	490a      	ldr	r1, [pc, #40]	; (73e4 <ringbuffer_get+0x3c>)
    73ba:	4b0b      	ldr	r3, [pc, #44]	; (73e8 <ringbuffer_get+0x40>)
    73bc:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    73be:	68a3      	ldr	r3, [r4, #8]
    73c0:	68e2      	ldr	r2, [r4, #12]
    73c2:	429a      	cmp	r2, r3
    73c4:	d00b      	beq.n	73de <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    73c6:	6862      	ldr	r2, [r4, #4]
    73c8:	4013      	ands	r3, r2
    73ca:	6822      	ldr	r2, [r4, #0]
    73cc:	5cd3      	ldrb	r3, [r2, r3]
    73ce:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    73d0:	68a3      	ldr	r3, [r4, #8]
    73d2:	3301      	adds	r3, #1
    73d4:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    73d6:	2000      	movs	r0, #0
    73d8:	bd38      	pop	{r3, r4, r5, pc}
    73da:	2000      	movs	r0, #0
    73dc:	e7eb      	b.n	73b6 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    73de:	f06f 0009 	mvn.w	r0, #9
}
    73e2:	bd38      	pop	{r3, r4, r5, pc}
    73e4:	0000f048 	.word	0x0000f048
    73e8:	000072b1 	.word	0x000072b1

000073ec <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    73ec:	b538      	push	{r3, r4, r5, lr}
    73ee:	460d      	mov	r5, r1
	ASSERT(rb);
    73f0:	4604      	mov	r4, r0
    73f2:	2251      	movs	r2, #81	; 0x51
    73f4:	490b      	ldr	r1, [pc, #44]	; (7424 <ringbuffer_put+0x38>)
    73f6:	3000      	adds	r0, #0
    73f8:	bf18      	it	ne
    73fa:	2001      	movne	r0, #1
    73fc:	4b0a      	ldr	r3, [pc, #40]	; (7428 <ringbuffer_put+0x3c>)
    73fe:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    7400:	68e3      	ldr	r3, [r4, #12]
    7402:	6862      	ldr	r2, [r4, #4]
    7404:	4013      	ands	r3, r2
    7406:	6822      	ldr	r2, [r4, #0]
    7408:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    740a:	68e3      	ldr	r3, [r4, #12]
    740c:	6861      	ldr	r1, [r4, #4]
    740e:	68a2      	ldr	r2, [r4, #8]
    7410:	1a9a      	subs	r2, r3, r2
    7412:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    7414:	bf84      	itt	hi
    7416:	1a59      	subhi	r1, r3, r1
    7418:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    741a:	3301      	adds	r3, #1
    741c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    741e:	2000      	movs	r0, #0
    7420:	bd38      	pop	{r3, r4, r5, pc}
    7422:	bf00      	nop
    7424:	0000f048 	.word	0x0000f048
    7428:	000072b1 	.word	0x000072b1

0000742c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    742c:	b510      	push	{r4, lr}
	ASSERT(rb);
    742e:	4604      	mov	r4, r0
    7430:	2267      	movs	r2, #103	; 0x67
    7432:	4905      	ldr	r1, [pc, #20]	; (7448 <ringbuffer_num+0x1c>)
    7434:	3000      	adds	r0, #0
    7436:	bf18      	it	ne
    7438:	2001      	movne	r0, #1
    743a:	4b04      	ldr	r3, [pc, #16]	; (744c <ringbuffer_num+0x20>)
    743c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    743e:	68e0      	ldr	r0, [r4, #12]
    7440:	68a3      	ldr	r3, [r4, #8]
}
    7442:	1ac0      	subs	r0, r0, r3
    7444:	bd10      	pop	{r4, pc}
    7446:	bf00      	nop
    7448:	0000f048 	.word	0x0000f048
    744c:	000072b1 	.word	0x000072b1

00007450 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    7450:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    7452:	4a06      	ldr	r2, [pc, #24]	; (746c <_sbrk+0x1c>)
    7454:	6812      	ldr	r2, [r2, #0]
    7456:	b122      	cbz	r2, 7462 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    7458:	4a04      	ldr	r2, [pc, #16]	; (746c <_sbrk+0x1c>)
    745a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    745c:	4403      	add	r3, r0
    745e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    7460:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    7462:	4903      	ldr	r1, [pc, #12]	; (7470 <_sbrk+0x20>)
    7464:	4a01      	ldr	r2, [pc, #4]	; (746c <_sbrk+0x1c>)
    7466:	6011      	str	r1, [r2, #0]
    7468:	e7f6      	b.n	7458 <_sbrk+0x8>
    746a:	bf00      	nop
    746c:	20000874 	.word	0x20000874
    7470:	20018220 	.word	0x20018220

00007474 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    7474:	f04f 30ff 	mov.w	r0, #4294967295
    7478:	4770      	bx	lr

0000747a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    747a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    747e:	604b      	str	r3, [r1, #4]

	return 0;
}
    7480:	2000      	movs	r0, #0
    7482:	4770      	bx	lr

00007484 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    7484:	2001      	movs	r0, #1
    7486:	4770      	bx	lr

00007488 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    7488:	2000      	movs	r0, #0
    748a:	4770      	bx	lr

0000748c <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    748c:	6940      	ldr	r0, [r0, #20]
    748e:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    7492:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    7496:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    7498:	0040      	lsls	r0, r0, #1
    749a:	3076      	adds	r0, #118	; 0x76
}
    749c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    74a0:	4770      	bx	lr
	...

000074a4 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    74a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    74a6:	f013 0f01 	tst.w	r3, #1
    74aa:	d11b      	bne.n	74e4 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    74ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    74ae:	f013 0f03 	tst.w	r3, #3
    74b2:	d1fb      	bne.n	74ac <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    74b4:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    74b6:	f013 0f02 	tst.w	r3, #2
    74ba:	d00d      	beq.n	74d8 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    74bc:	8803      	ldrh	r3, [r0, #0]
    74be:	f023 0302 	bic.w	r3, r3, #2
    74c2:	041b      	lsls	r3, r3, #16
    74c4:	0c1b      	lsrs	r3, r3, #16
    74c6:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    74c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    74ca:	f013 0f03 	tst.w	r3, #3
    74ce:	d1fb      	bne.n	74c8 <_adc_init+0x24>
    74d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    74d2:	f013 0f02 	tst.w	r3, #2
    74d6:	d1fb      	bne.n	74d0 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    74d8:	2301      	movs	r3, #1
    74da:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    74dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    74de:	f013 0f03 	tst.w	r3, #3
    74e2:	d1fb      	bne.n	74dc <_adc_init+0x38>
    74e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    74e6:	f013 0f01 	tst.w	r3, #1
    74ea:	d1fb      	bne.n	74e4 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    74ec:	2316      	movs	r3, #22
    74ee:	4a37      	ldr	r2, [pc, #220]	; (75cc <_adc_init+0x128>)
    74f0:	fb03 2301 	mla	r3, r3, r1, r2
    74f4:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    74f6:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    74f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    74fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    74fe:	2b00      	cmp	r3, #0
    7500:	d1fa      	bne.n	74f8 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    7502:	2316      	movs	r3, #22
    7504:	4a31      	ldr	r2, [pc, #196]	; (75cc <_adc_init+0x128>)
    7506:	fb03 2301 	mla	r3, r3, r1, r2
    750a:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    750c:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    750e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7510:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7514:	2b00      	cmp	r3, #0
    7516:	d1fa      	bne.n	750e <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    7518:	2316      	movs	r3, #22
    751a:	4a2c      	ldr	r2, [pc, #176]	; (75cc <_adc_init+0x128>)
    751c:	fb03 2301 	mla	r3, r3, r1, r2
    7520:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    7522:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    7524:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    7526:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    7528:	6b03      	ldr	r3, [r0, #48]	; 0x30
    752a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    752e:	2b00      	cmp	r3, #0
    7530:	d1fa      	bne.n	7528 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    7532:	2316      	movs	r3, #22
    7534:	4a25      	ldr	r2, [pc, #148]	; (75cc <_adc_init+0x128>)
    7536:	fb03 2301 	mla	r3, r3, r1, r2
    753a:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    753c:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    753e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7540:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7544:	2b00      	cmp	r3, #0
    7546:	d1fa      	bne.n	753e <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    7548:	2316      	movs	r3, #22
    754a:	4a20      	ldr	r2, [pc, #128]	; (75cc <_adc_init+0x128>)
    754c:	fb03 2301 	mla	r3, r3, r1, r2
    7550:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    7552:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    7554:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7556:	f3c3 030b 	ubfx	r3, r3, #0, #12
    755a:	2b00      	cmp	r3, #0
    755c:	d1fa      	bne.n	7554 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    755e:	2316      	movs	r3, #22
    7560:	4a1a      	ldr	r2, [pc, #104]	; (75cc <_adc_init+0x128>)
    7562:	fb03 2301 	mla	r3, r3, r1, r2
    7566:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    7568:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    756a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    756c:	f013 0f80 	tst.w	r3, #128	; 0x80
    7570:	d1fb      	bne.n	756a <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    7572:	2316      	movs	r3, #22
    7574:	4a15      	ldr	r2, [pc, #84]	; (75cc <_adc_init+0x128>)
    7576:	fb03 2301 	mla	r3, r3, r1, r2
    757a:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    757c:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    757e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7580:	f413 7f80 	tst.w	r3, #256	; 0x100
    7584:	d1fb      	bne.n	757e <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    7586:	2316      	movs	r3, #22
    7588:	4a10      	ldr	r2, [pc, #64]	; (75cc <_adc_init+0x128>)
    758a:	fb03 2301 	mla	r3, r3, r1, r2
    758e:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    7590:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    7592:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7594:	f413 7f00 	tst.w	r3, #512	; 0x200
    7598:	d1fb      	bne.n	7592 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    759a:	2316      	movs	r3, #22
    759c:	4a0b      	ldr	r2, [pc, #44]	; (75cc <_adc_init+0x128>)
    759e:	fb03 2301 	mla	r3, r3, r1, r2
    75a2:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    75a4:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    75a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    75a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    75ac:	d1fb      	bne.n	75a6 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    75ae:	2216      	movs	r2, #22
    75b0:	4b06      	ldr	r3, [pc, #24]	; (75cc <_adc_init+0x128>)
    75b2:	fb02 3101 	mla	r1, r2, r1, r3
    75b6:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    75b8:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    75ba:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    75bc:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    75be:	6b03      	ldr	r3, [r0, #48]	; 0x30
    75c0:	f013 0f03 	tst.w	r3, #3
    75c4:	d1fb      	bne.n	75be <_adc_init+0x11a>

	return ERR_NONE;
}
    75c6:	2000      	movs	r0, #0
    75c8:	4770      	bx	lr
    75ca:	bf00      	nop
    75cc:	0000f06c 	.word	0x0000f06c

000075d0 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    75d0:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    75d2:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    75d4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    75d8:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    75dc:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    75de:	f013 0f01 	tst.w	r3, #1
    75e2:	d106      	bne.n	75f2 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    75e4:	f013 0f02 	tst.w	r3, #2
    75e8:	d10d      	bne.n	7606 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    75ea:	f013 0f04 	tst.w	r3, #4
    75ee:	d111      	bne.n	7614 <_adc_interrupt_handler+0x44>
    75f0:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    75f2:	2301      	movs	r3, #1
    75f4:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    75f8:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    75fc:	6883      	ldr	r3, [r0, #8]
    75fe:	b292      	uxth	r2, r2
    7600:	2100      	movs	r1, #0
    7602:	4798      	blx	r3
    7604:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    7606:	2302      	movs	r3, #2
    7608:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    760c:	6843      	ldr	r3, [r0, #4]
    760e:	2100      	movs	r1, #0
    7610:	4798      	blx	r3
    7612:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    7614:	2304      	movs	r3, #4
    7616:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    761a:	6803      	ldr	r3, [r0, #0]
    761c:	2100      	movs	r1, #0
    761e:	4798      	blx	r3
	}
}
    7620:	e7e6      	b.n	75f0 <_adc_interrupt_handler+0x20>
	...

00007624 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    7624:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    7628:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    762c:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    7630:	b148      	cbz	r0, 7646 <_adc_get_regs+0x22>
    7632:	2801      	cmp	r0, #1
    7634:	d009      	beq.n	764a <_adc_get_regs+0x26>
{
    7636:	b508      	push	{r3, lr}
	ASSERT(false);
    7638:	228c      	movs	r2, #140	; 0x8c
    763a:	4905      	ldr	r1, [pc, #20]	; (7650 <_adc_get_regs+0x2c>)
    763c:	2000      	movs	r0, #0
    763e:	4b05      	ldr	r3, [pc, #20]	; (7654 <_adc_get_regs+0x30>)
    7640:	4798      	blx	r3
	return 0;
    7642:	2000      	movs	r0, #0
    7644:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    7646:	2000      	movs	r0, #0
    7648:	4770      	bx	lr
    764a:	2001      	movs	r0, #1
    764c:	4770      	bx	lr
    764e:	bf00      	nop
    7650:	0000f098 	.word	0x0000f098
    7654:	000072b1 	.word	0x000072b1

00007658 <_adc_async_init>:
{
    7658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    765c:	460c      	mov	r4, r1
	ASSERT(device);
    765e:	4605      	mov	r5, r0
    7660:	22e6      	movs	r2, #230	; 0xe6
    7662:	493b      	ldr	r1, [pc, #236]	; (7750 <_adc_async_init+0xf8>)
    7664:	3000      	adds	r0, #0
    7666:	bf18      	it	ne
    7668:	2001      	movne	r0, #1
    766a:	4b3a      	ldr	r3, [pc, #232]	; (7754 <_adc_async_init+0xfc>)
    766c:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    766e:	4620      	mov	r0, r4
    7670:	4b39      	ldr	r3, [pc, #228]	; (7758 <_adc_async_init+0x100>)
    7672:	4798      	blx	r3
    7674:	4601      	mov	r1, r0
    7676:	4620      	mov	r0, r4
    7678:	4b38      	ldr	r3, [pc, #224]	; (775c <_adc_async_init+0x104>)
    767a:	4798      	blx	r3
	if (init_status) {
    767c:	4606      	mov	r6, r0
    767e:	b110      	cbz	r0, 7686 <_adc_async_init+0x2e>
}
    7680:	4630      	mov	r0, r6
    7682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    7686:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    7688:	4b35      	ldr	r3, [pc, #212]	; (7760 <_adc_async_init+0x108>)
    768a:	429c      	cmp	r4, r3
    768c:	d05c      	beq.n	7748 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    768e:	4b35      	ldr	r3, [pc, #212]	; (7764 <_adc_async_init+0x10c>)
    7690:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    7692:	bf04      	itt	eq
    7694:	4b34      	ldreq	r3, [pc, #208]	; (7768 <_adc_async_init+0x110>)
    7696:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    7698:	4628      	mov	r0, r5
    769a:	4f34      	ldr	r7, [pc, #208]	; (776c <_adc_async_init+0x114>)
    769c:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    769e:	0943      	lsrs	r3, r0, #5
    76a0:	f000 001f 	and.w	r0, r0, #31
    76a4:	2401      	movs	r4, #1
    76a6:	fa04 f000 	lsl.w	r0, r4, r0
    76aa:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 7770 <_adc_async_init+0x118>
    76ae:	3320      	adds	r3, #32
    76b0:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    76b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    76b8:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    76bc:	4628      	mov	r0, r5
    76be:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76c0:	0943      	lsrs	r3, r0, #5
    76c2:	f000 001f 	and.w	r0, r0, #31
    76c6:	fa04 f000 	lsl.w	r0, r4, r0
    76ca:	3360      	adds	r3, #96	; 0x60
    76cc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    76d0:	4628      	mov	r0, r5
    76d2:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76d4:	0943      	lsrs	r3, r0, #5
    76d6:	f000 001f 	and.w	r0, r0, #31
    76da:	4084      	lsls	r4, r0
    76dc:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    76e0:	4628      	mov	r0, r5
    76e2:	47b8      	blx	r7
    76e4:	3001      	adds	r0, #1
    76e6:	b280      	uxth	r0, r0
    76e8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    76ea:	2b00      	cmp	r3, #0
    76ec:	dbc8      	blt.n	7680 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76ee:	095b      	lsrs	r3, r3, #5
    76f0:	f000 001f 	and.w	r0, r0, #31
    76f4:	2201      	movs	r2, #1
    76f6:	fa02 f000 	lsl.w	r0, r2, r0
    76fa:	3320      	adds	r3, #32
    76fc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7700:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7704:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    7708:	4628      	mov	r0, r5
    770a:	47b8      	blx	r7
    770c:	3001      	adds	r0, #1
    770e:	b280      	uxth	r0, r0
    7710:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    7712:	2b00      	cmp	r3, #0
    7714:	dbb4      	blt.n	7680 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7716:	095b      	lsrs	r3, r3, #5
    7718:	f000 001f 	and.w	r0, r0, #31
    771c:	2201      	movs	r2, #1
    771e:	fa02 f000 	lsl.w	r0, r2, r0
    7722:	3360      	adds	r3, #96	; 0x60
    7724:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    7728:	4628      	mov	r0, r5
    772a:	47b8      	blx	r7
    772c:	3001      	adds	r0, #1
    772e:	b280      	uxth	r0, r0
    7730:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    7732:	2b00      	cmp	r3, #0
    7734:	dba4      	blt.n	7680 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7736:	095b      	lsrs	r3, r3, #5
    7738:	f000 001f 	and.w	r0, r0, #31
    773c:	2201      	movs	r2, #1
    773e:	fa02 f000 	lsl.w	r0, r2, r0
    7742:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    7746:	e79b      	b.n	7680 <_adc_async_init+0x28>
		_adc0_dev = dev;
    7748:	4b07      	ldr	r3, [pc, #28]	; (7768 <_adc_async_init+0x110>)
    774a:	601d      	str	r5, [r3, #0]
    774c:	e7a4      	b.n	7698 <_adc_async_init+0x40>
    774e:	bf00      	nop
    7750:	0000f098 	.word	0x0000f098
    7754:	000072b1 	.word	0x000072b1
    7758:	00007625 	.word	0x00007625
    775c:	000074a5 	.word	0x000074a5
    7760:	43001c00 	.word	0x43001c00
    7764:	43002000 	.word	0x43002000
    7768:	20000878 	.word	0x20000878
    776c:	0000748d 	.word	0x0000748d
    7770:	e000e100 	.word	0xe000e100

00007774 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    7774:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    7776:	8813      	ldrh	r3, [r2, #0]
    7778:	b29b      	uxth	r3, r3
    777a:	f043 0302 	orr.w	r3, r3, #2
    777e:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    7780:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7782:	f013 0f03 	tst.w	r3, #3
    7786:	d1fb      	bne.n	7780 <_adc_async_enable_channel+0xc>
}
    7788:	4770      	bx	lr

0000778a <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    778a:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    778c:	88db      	ldrh	r3, [r3, #6]
    778e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    7792:	2b03      	cmp	r3, #3
}
    7794:	bf0c      	ite	eq
    7796:	2001      	moveq	r0, #1
    7798:	2002      	movne	r0, #2
    779a:	4770      	bx	lr

0000779c <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    779c:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    779e:	7d13      	ldrb	r3, [r2, #20]
    77a0:	f043 0302 	orr.w	r3, r3, #2
    77a4:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    77a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    77a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    77ac:	2b00      	cmp	r3, #0
    77ae:	d1fa      	bne.n	77a6 <_adc_async_convert+0xa>
}
    77b0:	4770      	bx	lr

000077b2 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    77b2:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    77b4:	2a01      	cmp	r2, #1
    77b6:	d007      	beq.n	77c8 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    77b8:	2a02      	cmp	r2, #2
    77ba:	d00e      	beq.n	77da <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    77bc:	b91a      	cbnz	r2, 77c6 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    77be:	b1ab      	cbz	r3, 77ec <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    77c0:	2301      	movs	r3, #1
    77c2:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    77c6:	4770      	bx	lr
	if (value == 0x0) {
    77c8:	b91b      	cbnz	r3, 77d2 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    77ca:	2304      	movs	r3, #4
    77cc:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    77d0:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    77d2:	2304      	movs	r3, #4
    77d4:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    77d8:	4770      	bx	lr
	if (value == 0x0) {
    77da:	b91b      	cbnz	r3, 77e4 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    77dc:	2302      	movs	r3, #2
    77de:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    77e2:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    77e4:	2302      	movs	r3, #2
    77e6:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    77ea:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    77ec:	2301      	movs	r3, #1
    77ee:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    77f2:	4770      	bx	lr

000077f4 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    77f4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    77f6:	4b02      	ldr	r3, [pc, #8]	; (7800 <ADC0_0_Handler+0xc>)
    77f8:	6818      	ldr	r0, [r3, #0]
    77fa:	4b02      	ldr	r3, [pc, #8]	; (7804 <ADC0_0_Handler+0x10>)
    77fc:	4798      	blx	r3
    77fe:	bd08      	pop	{r3, pc}
    7800:	20000878 	.word	0x20000878
    7804:	000075d1 	.word	0x000075d1

00007808 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    7808:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    780a:	4b02      	ldr	r3, [pc, #8]	; (7814 <ADC0_1_Handler+0xc>)
    780c:	6818      	ldr	r0, [r3, #0]
    780e:	4b02      	ldr	r3, [pc, #8]	; (7818 <ADC0_1_Handler+0x10>)
    7810:	4798      	blx	r3
    7812:	bd08      	pop	{r3, pc}
    7814:	20000878 	.word	0x20000878
    7818:	000075d1 	.word	0x000075d1

0000781c <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    781c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    781e:	4b02      	ldr	r3, [pc, #8]	; (7828 <ADC1_0_Handler+0xc>)
    7820:	6858      	ldr	r0, [r3, #4]
    7822:	4b02      	ldr	r3, [pc, #8]	; (782c <ADC1_0_Handler+0x10>)
    7824:	4798      	blx	r3
    7826:	bd08      	pop	{r3, pc}
    7828:	20000878 	.word	0x20000878
    782c:	000075d1 	.word	0x000075d1

00007830 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    7830:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    7832:	4b02      	ldr	r3, [pc, #8]	; (783c <ADC1_1_Handler+0xc>)
    7834:	6858      	ldr	r0, [r3, #4]
    7836:	4b02      	ldr	r3, [pc, #8]	; (7840 <ADC1_1_Handler+0x10>)
    7838:	4798      	blx	r3
    783a:	bd08      	pop	{r3, pc}
    783c:	20000878 	.word	0x20000878
    7840:	000075d1 	.word	0x000075d1

00007844 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7844:	0943      	lsrs	r3, r0, #5
    7846:	f000 001f 	and.w	r0, r0, #31
    784a:	2201      	movs	r2, #1
    784c:	fa02 f000 	lsl.w	r0, r2, r0
    7850:	3340      	adds	r3, #64	; 0x40
    7852:	4a02      	ldr	r2, [pc, #8]	; (785c <_irq_set+0x18>)
    7854:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    7858:	4770      	bx	lr
    785a:	bf00      	nop
    785c:	e000e100 	.word	0xe000e100

00007860 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    7860:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    7864:	00c0      	lsls	r0, r0, #3
    7866:	4770      	bx	lr

00007868 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    7868:	4b01      	ldr	r3, [pc, #4]	; (7870 <_get_cycles_for_ms+0x8>)
    786a:	fb03 f000 	mul.w	r0, r3, r0
    786e:	4770      	bx	lr
    7870:	0001d4c0 	.word	0x0001d4c0

00007874 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    7874:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    7876:	4a0e      	ldr	r2, [pc, #56]	; (78b0 <_init_chip+0x3c>)
    7878:	8813      	ldrh	r3, [r2, #0]
    787a:	b29b      	uxth	r3, r3
    787c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    7880:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    7882:	4b0c      	ldr	r3, [pc, #48]	; (78b4 <_init_chip+0x40>)
    7884:	4798      	blx	r3
	_oscctrl_init_sources();
    7886:	4b0c      	ldr	r3, [pc, #48]	; (78b8 <_init_chip+0x44>)
    7888:	4798      	blx	r3
	_mclk_init();
    788a:	4b0c      	ldr	r3, [pc, #48]	; (78bc <_init_chip+0x48>)
    788c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    788e:	2004      	movs	r0, #4
    7890:	4c0b      	ldr	r4, [pc, #44]	; (78c0 <_init_chip+0x4c>)
    7892:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    7894:	4b0b      	ldr	r3, [pc, #44]	; (78c4 <_init_chip+0x50>)
    7896:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    7898:	f640 70fb 	movw	r0, #4091	; 0xffb
    789c:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    789e:	4a0a      	ldr	r2, [pc, #40]	; (78c8 <_init_chip+0x54>)
    78a0:	6913      	ldr	r3, [r2, #16]
    78a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    78a6:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    78a8:	4b08      	ldr	r3, [pc, #32]	; (78cc <_init_chip+0x58>)
    78aa:	4798      	blx	r3
    78ac:	bd10      	pop	{r4, pc}
    78ae:	bf00      	nop
    78b0:	41004000 	.word	0x41004000
    78b4:	00007f95 	.word	0x00007f95
    78b8:	00007fa9 	.word	0x00007fa9
    78bc:	00007c79 	.word	0x00007c79
    78c0:	00007c01 	.word	0x00007c01
    78c4:	00007fad 	.word	0x00007fad
    78c8:	40000800 	.word	0x40000800
    78cc:	00007945 	.word	0x00007945

000078d0 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    78d0:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    78d2:	4a1a      	ldr	r2, [pc, #104]	; (793c <_dmac_handler+0x6c>)
    78d4:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    78d6:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    78da:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    78de:	4818      	ldr	r0, [pc, #96]	; (7940 <_dmac_handler+0x70>)
    78e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    78e4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    78e8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    78ec:	f012 0f01 	tst.w	r2, #1
    78f0:	d10a      	bne.n	7908 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    78f2:	011a      	lsls	r2, r3, #4
    78f4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    78f8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    78fc:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    7900:	f012 0f02 	tst.w	r2, #2
    7904:	d10b      	bne.n	791e <_dmac_handler+0x4e>
    7906:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    7908:	011a      	lsls	r2, r3, #4
    790a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    790e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    7912:	2101      	movs	r1, #1
    7914:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    7918:	6843      	ldr	r3, [r0, #4]
    791a:	4798      	blx	r3
    791c:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    791e:	011a      	lsls	r2, r3, #4
    7920:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7924:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    7928:	2102      	movs	r1, #2
    792a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    792e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7932:	4a03      	ldr	r2, [pc, #12]	; (7940 <_dmac_handler+0x70>)
    7934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7938:	4798      	blx	r3
	}
}
    793a:	e7e4      	b.n	7906 <_dmac_handler+0x36>
    793c:	4100a000 	.word	0x4100a000
    7940:	20000880 	.word	0x20000880

00007944 <_dma_init>:
{
    7944:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    7946:	4a32      	ldr	r2, [pc, #200]	; (7a10 <_dma_init+0xcc>)
    7948:	8813      	ldrh	r3, [r2, #0]
    794a:	f023 0302 	bic.w	r3, r3, #2
    794e:	041b      	lsls	r3, r3, #16
    7950:	0c1b      	lsrs	r3, r3, #16
    7952:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    7954:	8853      	ldrh	r3, [r2, #2]
    7956:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    795a:	041b      	lsls	r3, r3, #16
    795c:	0c1b      	lsrs	r3, r3, #16
    795e:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    7960:	8813      	ldrh	r3, [r2, #0]
    7962:	b29b      	uxth	r3, r3
    7964:	f043 0301 	orr.w	r3, r3, #1
    7968:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    796a:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    796c:	f013 0f01 	tst.w	r3, #1
    7970:	d1fb      	bne.n	796a <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    7972:	4b27      	ldr	r3, [pc, #156]	; (7a10 <_dma_init+0xcc>)
    7974:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    7978:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    797a:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    797c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    7980:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    7984:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    7986:	2100      	movs	r1, #0
    7988:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    798a:	4a22      	ldr	r2, [pc, #136]	; (7a14 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    798c:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    798e:	4a22      	ldr	r2, [pc, #136]	; (7a18 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    7990:	639a      	str	r2, [r3, #56]	; 0x38
    7992:	4b22      	ldr	r3, [pc, #136]	; (7a1c <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    7994:	4c1f      	ldr	r4, [pc, #124]	; (7a14 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    7996:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    7998:	681d      	ldr	r5, [r3, #0]
    799a:	0108      	lsls	r0, r1, #4
    799c:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    79a0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    79a4:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    79a6:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    79a8:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    79ac:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    79ae:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    79b2:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    79b4:	1822      	adds	r2, r4, r0
    79b6:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    79b8:	60d6      	str	r6, [r2, #12]
    79ba:	3101      	adds	r1, #1
    79bc:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    79be:	2920      	cmp	r1, #32
    79c0:	d1ea      	bne.n	7998 <_dma_init+0x54>
    79c2:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    79c4:	2001      	movs	r0, #1
    79c6:	4916      	ldr	r1, [pc, #88]	; (7a20 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    79c8:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    79ca:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    79ce:	d00b      	beq.n	79e8 <_dma_init+0xa4>
    79d0:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    79d2:	2b24      	cmp	r3, #36	; 0x24
    79d4:	d1f8      	bne.n	79c8 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    79d6:	4a0e      	ldr	r2, [pc, #56]	; (7a10 <_dma_init+0xcc>)
    79d8:	8813      	ldrh	r3, [r2, #0]
    79da:	b29b      	uxth	r3, r3
    79dc:	f043 0302 	orr.w	r3, r3, #2
    79e0:	8013      	strh	r3, [r2, #0]
}
    79e2:	2000      	movs	r0, #0
    79e4:	bc70      	pop	{r4, r5, r6}
    79e6:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    79e8:	095c      	lsrs	r4, r3, #5
    79ea:	f002 021f 	and.w	r2, r2, #31
    79ee:	fa00 f202 	lsl.w	r2, r0, r2
    79f2:	f104 0520 	add.w	r5, r4, #32
    79f6:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    79fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    79fe:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a02:	f104 0560 	add.w	r5, r4, #96	; 0x60
    7a06:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a0a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    7a0e:	e7df      	b.n	79d0 <_dma_init+0x8c>
    7a10:	4100a000 	.word	0x4100a000
    7a14:	20007e00 	.word	0x20007e00
    7a18:	20008000 	.word	0x20008000
    7a1c:	0000f0b0 	.word	0x0000f0b0
    7a20:	e000e100 	.word	0xe000e100

00007a24 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    7a24:	b991      	cbnz	r1, 7a4c <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    7a26:	b942      	cbnz	r2, 7a3a <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    7a28:	0100      	lsls	r0, r0, #4
    7a2a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    7a2e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    7a32:	2302      	movs	r3, #2
    7a34:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    7a38:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    7a3a:	0100      	lsls	r0, r0, #4
    7a3c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    7a40:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    7a44:	2302      	movs	r3, #2
    7a46:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    7a4a:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    7a4c:	2901      	cmp	r1, #1
    7a4e:	d000      	beq.n	7a52 <_dma_set_irq_state+0x2e>
    7a50:	4770      	bx	lr
	if (value == 0x0) {
    7a52:	b142      	cbz	r2, 7a66 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    7a54:	0100      	lsls	r0, r0, #4
    7a56:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    7a5a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    7a5e:	2301      	movs	r3, #1
    7a60:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    7a64:	e7f4      	b.n	7a50 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    7a66:	0100      	lsls	r0, r0, #4
    7a68:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    7a6c:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    7a70:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    7a74:	4770      	bx	lr
	...

00007a78 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    7a78:	4b02      	ldr	r3, [pc, #8]	; (7a84 <_dma_set_destination_address+0xc>)
    7a7a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    7a7e:	6081      	str	r1, [r0, #8]
}
    7a80:	2000      	movs	r0, #0
    7a82:	4770      	bx	lr
    7a84:	20007e00 	.word	0x20007e00

00007a88 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    7a88:	4b02      	ldr	r3, [pc, #8]	; (7a94 <_dma_set_source_address+0xc>)
    7a8a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    7a8e:	6041      	str	r1, [r0, #4]
}
    7a90:	2000      	movs	r0, #0
    7a92:	4770      	bx	lr
    7a94:	20007e00 	.word	0x20007e00

00007a98 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    7a98:	4a05      	ldr	r2, [pc, #20]	; (7ab0 <_dma_srcinc_enable+0x18>)
    7a9a:	0100      	lsls	r0, r0, #4
    7a9c:	5a13      	ldrh	r3, [r2, r0]
    7a9e:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    7aa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    7aa4:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    7aa8:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    7aaa:	5211      	strh	r1, [r2, r0]
}
    7aac:	2000      	movs	r0, #0
    7aae:	4770      	bx	lr
    7ab0:	20007e00 	.word	0x20007e00

00007ab4 <_dma_set_data_amount>:
{
    7ab4:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    7ab6:	4c14      	ldr	r4, [pc, #80]	; (7b08 <_dma_set_data_amount+0x54>)
    7ab8:	0102      	lsls	r2, r0, #4
    7aba:	18a3      	adds	r3, r4, r2
    7abc:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    7abe:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    7ac0:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    7ac4:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    7ac6:	f412 6f00 	tst.w	r2, #2048	; 0x800
    7aca:	d006      	beq.n	7ada <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    7acc:	fa01 f403 	lsl.w	r4, r1, r3
    7ad0:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    7ad2:	4a0d      	ldr	r2, [pc, #52]	; (7b08 <_dma_set_data_amount+0x54>)
    7ad4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    7ad8:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    7ada:	4c0b      	ldr	r4, [pc, #44]	; (7b08 <_dma_set_data_amount+0x54>)
    7adc:	0102      	lsls	r2, r0, #4
    7ade:	18a5      	adds	r5, r4, r2
    7ae0:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    7ae2:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    7ae4:	f412 6f80 	tst.w	r2, #1024	; 0x400
    7ae8:	d005      	beq.n	7af6 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    7aea:	fa01 f303 	lsl.w	r3, r1, r3
    7aee:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    7af0:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    7af4:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    7af6:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    7af8:	4b03      	ldr	r3, [pc, #12]	; (7b08 <_dma_set_data_amount+0x54>)
    7afa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    7afe:	8041      	strh	r1, [r0, #2]
}
    7b00:	2000      	movs	r0, #0
    7b02:	bc30      	pop	{r4, r5}
    7b04:	4770      	bx	lr
    7b06:	bf00      	nop
    7b08:	20007e00 	.word	0x20007e00

00007b0c <_dma_enable_transaction>:
{
    7b0c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    7b0e:	4c0d      	ldr	r4, [pc, #52]	; (7b44 <_dma_enable_transaction+0x38>)
    7b10:	0103      	lsls	r3, r0, #4
    7b12:	5ae2      	ldrh	r2, [r4, r3]
    7b14:	b292      	uxth	r2, r2
    7b16:	f042 0201 	orr.w	r2, r2, #1
    7b1a:	52e2      	strh	r2, [r4, r3]
    7b1c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7b20:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    7b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7b26:	f042 0202 	orr.w	r2, r2, #2
    7b2a:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    7b2c:	b131      	cbz	r1, 7b3c <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    7b2e:	4a06      	ldr	r2, [pc, #24]	; (7b48 <_dma_enable_transaction+0x3c>)
    7b30:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    7b32:	2301      	movs	r3, #1
    7b34:	fa03 f000 	lsl.w	r0, r3, r0
    7b38:	4308      	orrs	r0, r1
    7b3a:	6110      	str	r0, [r2, #16]
}
    7b3c:	2000      	movs	r0, #0
    7b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
    7b42:	4770      	bx	lr
    7b44:	20007e00 	.word	0x20007e00
    7b48:	4100a000 	.word	0x4100a000

00007b4c <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    7b4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7b50:	4b02      	ldr	r3, [pc, #8]	; (7b5c <_dma_get_channel_resource+0x10>)
    7b52:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7b56:	6001      	str	r1, [r0, #0]
}
    7b58:	2000      	movs	r0, #0
    7b5a:	4770      	bx	lr
    7b5c:	20000880 	.word	0x20000880

00007b60 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    7b60:	b508      	push	{r3, lr}
	_dmac_handler();
    7b62:	4b01      	ldr	r3, [pc, #4]	; (7b68 <DMAC_0_Handler+0x8>)
    7b64:	4798      	blx	r3
    7b66:	bd08      	pop	{r3, pc}
    7b68:	000078d1 	.word	0x000078d1

00007b6c <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    7b6c:	b508      	push	{r3, lr}
	_dmac_handler();
    7b6e:	4b01      	ldr	r3, [pc, #4]	; (7b74 <DMAC_1_Handler+0x8>)
    7b70:	4798      	blx	r3
    7b72:	bd08      	pop	{r3, pc}
    7b74:	000078d1 	.word	0x000078d1

00007b78 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    7b78:	b508      	push	{r3, lr}
	_dmac_handler();
    7b7a:	4b01      	ldr	r3, [pc, #4]	; (7b80 <DMAC_2_Handler+0x8>)
    7b7c:	4798      	blx	r3
    7b7e:	bd08      	pop	{r3, pc}
    7b80:	000078d1 	.word	0x000078d1

00007b84 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    7b84:	b508      	push	{r3, lr}
	_dmac_handler();
    7b86:	4b01      	ldr	r3, [pc, #4]	; (7b8c <DMAC_3_Handler+0x8>)
    7b88:	4798      	blx	r3
    7b8a:	bd08      	pop	{r3, pc}
    7b8c:	000078d1 	.word	0x000078d1

00007b90 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    7b90:	b508      	push	{r3, lr}
	_dmac_handler();
    7b92:	4b01      	ldr	r3, [pc, #4]	; (7b98 <DMAC_4_Handler+0x8>)
    7b94:	4798      	blx	r3
    7b96:	bd08      	pop	{r3, pc}
    7b98:	000078d1 	.word	0x000078d1

00007b9c <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    7b9c:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    7b9e:	2000      	movs	r0, #0
    7ba0:	4770      	bx	lr
	...

00007ba4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    7ba4:	b430      	push	{r4, r5}
    7ba6:	4814      	ldr	r0, [pc, #80]	; (7bf8 <_event_system_init+0x54>)
    7ba8:	f100 0543 	add.w	r5, r0, #67	; 0x43
    7bac:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    7bae:	4c13      	ldr	r4, [pc, #76]	; (7bfc <_event_system_init+0x58>)
    7bb0:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    7bb2:	f813 1b01 	ldrb.w	r1, [r3], #1
    7bb6:	3248      	adds	r2, #72	; 0x48
    7bb8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    7bbc:	42ab      	cmp	r3, r5
    7bbe:	d1f7      	bne.n	7bb0 <_event_system_init+0xc>
    7bc0:	480d      	ldr	r0, [pc, #52]	; (7bf8 <_event_system_init+0x54>)
    7bc2:	f100 0442 	add.w	r4, r0, #66	; 0x42
    7bc6:	3080      	adds	r0, #128	; 0x80
    7bc8:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    7bca:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    7bce:	00ca      	lsls	r2, r1, #3
    7bd0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7bd4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    7bd8:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    7bda:	f850 3f04 	ldr.w	r3, [r0, #4]!
    7bde:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    7be0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    7be4:	43db      	mvns	r3, r3
    7be6:	b2db      	uxtb	r3, r3
    7be8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    7bec:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7bee:	2920      	cmp	r1, #32
    7bf0:	d1eb      	bne.n	7bca <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    7bf2:	2000      	movs	r0, #0
    7bf4:	bc30      	pop	{r4, r5}
    7bf6:	4770      	bx	lr
    7bf8:	0000f1b0 	.word	0x0000f1b0
    7bfc:	4100e000 	.word	0x4100e000

00007c00 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    7c00:	f010 0f01 	tst.w	r0, #1
    7c04:	d008      	beq.n	7c18 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7c06:	4a17      	ldr	r2, [pc, #92]	; (7c64 <_gclk_init_generators_by_fref+0x64>)
    7c08:	4b17      	ldr	r3, [pc, #92]	; (7c68 <_gclk_init_generators_by_fref+0x68>)
    7c0a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7c0c:	4619      	mov	r1, r3
    7c0e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7c12:	684b      	ldr	r3, [r1, #4]
    7c14:	4213      	tst	r3, r2
    7c16:	d1fc      	bne.n	7c12 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    7c18:	f010 0f02 	tst.w	r0, #2
    7c1c:	d008      	beq.n	7c30 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7c1e:	4a13      	ldr	r2, [pc, #76]	; (7c6c <_gclk_init_generators_by_fref+0x6c>)
    7c20:	4b11      	ldr	r3, [pc, #68]	; (7c68 <_gclk_init_generators_by_fref+0x68>)
    7c22:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7c24:	4619      	mov	r1, r3
    7c26:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7c2a:	684b      	ldr	r3, [r1, #4]
    7c2c:	4213      	tst	r3, r2
    7c2e:	d1fc      	bne.n	7c2a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    7c30:	f010 0f04 	tst.w	r0, #4
    7c34:	d008      	beq.n	7c48 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7c36:	4a0e      	ldr	r2, [pc, #56]	; (7c70 <_gclk_init_generators_by_fref+0x70>)
    7c38:	4b0b      	ldr	r3, [pc, #44]	; (7c68 <_gclk_init_generators_by_fref+0x68>)
    7c3a:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7c3c:	4619      	mov	r1, r3
    7c3e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7c42:	684b      	ldr	r3, [r1, #4]
    7c44:	4213      	tst	r3, r2
    7c46:	d1fc      	bne.n	7c42 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    7c48:	f010 0f08 	tst.w	r0, #8
    7c4c:	d008      	beq.n	7c60 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7c4e:	4a09      	ldr	r2, [pc, #36]	; (7c74 <_gclk_init_generators_by_fref+0x74>)
    7c50:	4b05      	ldr	r3, [pc, #20]	; (7c68 <_gclk_init_generators_by_fref+0x68>)
    7c52:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7c54:	4619      	mov	r1, r3
    7c56:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7c5a:	684b      	ldr	r3, [r1, #4]
    7c5c:	4213      	tst	r3, r2
    7c5e:	d1fc      	bne.n	7c5a <_gclk_init_generators_by_fref+0x5a>
    7c60:	4770      	bx	lr
    7c62:	bf00      	nop
    7c64:	00010108 	.word	0x00010108
    7c68:	40001c00 	.word	0x40001c00
    7c6c:	00010106 	.word	0x00010106
    7c70:	00100106 	.word	0x00100106
    7c74:	00010104 	.word	0x00010104

00007c78 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    7c78:	2201      	movs	r2, #1
    7c7a:	4b01      	ldr	r3, [pc, #4]	; (7c80 <_mclk_init+0x8>)
    7c7c:	715a      	strb	r2, [r3, #5]
    7c7e:	4770      	bx	lr
    7c80:	40000800 	.word	0x40000800

00007c84 <_flash_program>:
 * \param[in]  buffer        Pointer to buffer where the data to
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size)
{
    7c84:	b470      	push	{r4, r5, r6}
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    7c86:	8a44      	ldrh	r4, [r0, #18]
	uint32_t *ptr_read    = (uint32_t *)buffer;
	uint32_t  nvm_address = dst_addr / 4;
	uint16_t  i;

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    7c88:	f014 0f01 	tst.w	r4, #1
    7c8c:	d0fb      	beq.n	7c86 <_flash_program+0x2>
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    7c8e:	f24a 5415 	movw	r4, #42261	; 0xa515
    7c92:	8084      	strh	r4, [r0, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    7c94:	8a44      	ldrh	r4, [r0, #18]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_PBC | NVMCTRL_CTRLB_CMDEX_KEY);

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    7c96:	f014 0f01 	tst.w	r4, #1
    7c9a:	d0fb      	beq.n	7c94 <_flash_program+0x10>
		/* Wait until this module isn't busy */
	}

	/* Writes to the page buffer must be 32 bits, perform manual copy
	 * to ensure alignment */
	for (i = 0; i < size; i += 4) {
    7c9c:	b153      	cbz	r3, 7cb4 <_flash_program+0x30>
    7c9e:	f021 0603 	bic.w	r6, r1, #3
    7ca2:	1ab6      	subs	r6, r6, r2
    7ca4:	4614      	mov	r4, r2
		NVM_MEMORY[nvm_address++] = *ptr_read;
    7ca6:	6825      	ldr	r5, [r4, #0]
    7ca8:	51a5      	str	r5, [r4, r6]
		ptr_read++;
    7caa:	3404      	adds	r4, #4
	for (i = 0; i < size; i += 4) {
    7cac:	1aa5      	subs	r5, r4, r2
    7cae:	b2ad      	uxth	r5, r5
    7cb0:	42ab      	cmp	r3, r5
    7cb2:	d8f8      	bhi.n	7ca6 <_flash_program+0x22>
    7cb4:	8a43      	ldrh	r3, [r0, #18]
	}

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    7cb6:	f013 0f01 	tst.w	r3, #1
    7cba:	d0fb      	beq.n	7cb4 <_flash_program+0x30>
	((Nvmctrl *)hw)->ADDR.reg = data;
    7cbc:	6141      	str	r1, [r0, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    7cbe:	f24a 5303 	movw	r3, #42243	; 0xa503
    7cc2:	8083      	strh	r3, [r0, #4]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr);
	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_WP | NVMCTRL_CTRLB_CMDEX_KEY);
}
    7cc4:	bc70      	pop	{r4, r5, r6}
    7cc6:	4770      	bx	lr

00007cc8 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    7cc8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    7cca:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    7ccc:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    7cce:	f012 0f01 	tst.w	r2, #1
    7cd2:	d005      	beq.n	7ce0 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    7cd4:	2201      	movs	r2, #1
    7cd6:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    7cd8:	6803      	ldr	r3, [r0, #0]
    7cda:	b153      	cbz	r3, 7cf2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    7cdc:	4798      	blx	r3
    7cde:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    7ce0:	8a1a      	ldrh	r2, [r3, #16]
    7ce2:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    7ce4:	b12a      	cbz	r2, 7cf2 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    7ce6:	f240 225e 	movw	r2, #606	; 0x25e
    7cea:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    7cec:	6843      	ldr	r3, [r0, #4]
    7cee:	b103      	cbz	r3, 7cf2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    7cf0:	4798      	blx	r3
    7cf2:	bd08      	pop	{r3, pc}

00007cf4 <_flash_init>:
{
    7cf4:	b538      	push	{r3, r4, r5, lr}
    7cf6:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    7cf8:	4605      	mov	r5, r0
    7cfa:	b350      	cbz	r0, 7d52 <_flash_init+0x5e>
    7cfc:	4816      	ldr	r0, [pc, #88]	; (7d58 <_flash_init+0x64>)
    7cfe:	4281      	cmp	r1, r0
    7d00:	bf14      	ite	ne
    7d02:	2000      	movne	r0, #0
    7d04:	2001      	moveq	r0, #1
    7d06:	224b      	movs	r2, #75	; 0x4b
    7d08:	4914      	ldr	r1, [pc, #80]	; (7d5c <_flash_init+0x68>)
    7d0a:	4b15      	ldr	r3, [pc, #84]	; (7d60 <_flash_init+0x6c>)
    7d0c:	4798      	blx	r3
	device->hw = hw;
    7d0e:	612c      	str	r4, [r5, #16]
	return ((Nvmctrl *)hw)->CTRLA.reg;
    7d10:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    7d12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    7d16:	049b      	lsls	r3, r3, #18
    7d18:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    7d1a:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    7d1c:	4b11      	ldr	r3, [pc, #68]	; (7d64 <_flash_init+0x70>)
    7d1e:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d20:	4b11      	ldr	r3, [pc, #68]	; (7d68 <_flash_init+0x74>)
    7d22:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    7d26:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7d2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7d2e:	f3bf 8f6f 	isb	sy
    7d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7d3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7d3e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d42:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    7d46:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d4a:	6019      	str	r1, [r3, #0]
    7d4c:	601a      	str	r2, [r3, #0]
}
    7d4e:	2000      	movs	r0, #0
    7d50:	bd38      	pop	{r3, r4, r5, pc}
    7d52:	2000      	movs	r0, #0
    7d54:	e7d7      	b.n	7d06 <_flash_init+0x12>
    7d56:	bf00      	nop
    7d58:	41004000 	.word	0x41004000
    7d5c:	0000f2b4 	.word	0x0000f2b4
    7d60:	000072b1 	.word	0x000072b1
    7d64:	20000a00 	.word	0x20000a00
    7d68:	e000e100 	.word	0xe000e100

00007d6c <_flash_get_page_size>:
}
    7d6c:	f44f 7000 	mov.w	r0, #512	; 0x200
    7d70:	4770      	bx	lr

00007d72 <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    7d72:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    7d74:	6898      	ldr	r0, [r3, #8]
}
    7d76:	b280      	uxth	r0, r0
    7d78:	4770      	bx	lr

00007d7a <_flash_read>:
{
    7d7a:	b410      	push	{r4}
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    7d7c:	6904      	ldr	r4, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    7d7e:	8a60      	ldrh	r0, [r4, #18]
    7d80:	f010 0f01 	tst.w	r0, #1
    7d84:	d0fb      	beq.n	7d7e <_flash_read+0x4>
	for (i = 0; i < length; i++) {
    7d86:	b143      	cbz	r3, 7d9a <_flash_read+0x20>
    7d88:	3901      	subs	r1, #1
    7d8a:	4610      	mov	r0, r2
    7d8c:	4413      	add	r3, r2
		buffer[i] = nvm_addr[src_addr + i];
    7d8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    7d92:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < length; i++) {
    7d96:	4298      	cmp	r0, r3
    7d98:	d1f9      	bne.n	7d8e <_flash_read+0x14>
}
    7d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    7d9e:	4770      	bx	lr

00007da0 <_flash_write>:
{
    7da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7da4:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    7da8:	b085      	sub	sp, #20
    7daa:	4682      	mov	sl, r0
    7dac:	9203      	str	r2, [sp, #12]
    7dae:	4698      	mov	r8, r3
	uint32_t wr_start_addr = dst_addr;
    7db0:	460e      	mov	r6, r1
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    7db2:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 7e8c <_flash_write+0xec>
    7db6:	e034      	b.n	7e22 <_flash_write+0x82>
			wr_start_addr++;
    7db8:	3601      	adds	r6, #1
			length--;
    7dba:	3801      	subs	r0, #1
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    7dbc:	45b0      	cmp	r8, r6
    7dbe:	d312      	bcc.n	7de6 <_flash_write+0x46>
    7dc0:	b170      	cbz	r0, 7de0 <_flash_write+0x40>
			tmp_buffer[j][k] = *buffer;
    7dc2:	f812 cb01 	ldrb.w	ip, [r2], #1
    7dc6:	f10d 0e10 	add.w	lr, sp, #16
    7dca:	eb0e 2e41 	add.w	lr, lr, r1, lsl #9
    7dce:	f80e c003 	strb.w	ip, [lr, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    7dd2:	3301      	adds	r3, #1
    7dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
			if (0 == k) {
    7dd8:	2b00      	cmp	r3, #0
    7dda:	d1ed      	bne.n	7db8 <_flash_write+0x18>
				j++;
    7ddc:	3101      	adds	r1, #1
    7dde:	e7eb      	b.n	7db8 <_flash_write+0x18>
    7de0:	9203      	str	r2, [sp, #12]
    7de2:	4680      	mov	r8, r0
    7de4:	e001      	b.n	7dea <_flash_write+0x4a>
    7de6:	9203      	str	r2, [sp, #12]
    7de8:	4680      	mov	r8, r0
		_flash_erase_block(device->hw, block_start_addr);
    7dea:	f8da 2010 	ldr.w	r2, [sl, #16]
    7dee:	8a53      	ldrh	r3, [r2, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    7df0:	f013 0f01 	tst.w	r3, #1
    7df4:	d0fb      	beq.n	7dee <_flash_write+0x4e>
	((Nvmctrl *)hw)->ADDR.reg = data;
    7df6:	9b01      	ldr	r3, [sp, #4]
    7df8:	6153      	str	r3, [r2, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    7dfa:	f24a 5301 	movw	r3, #42241	; 0xa501
    7dfe:	8093      	strh	r3, [r2, #4]
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    7e00:	f44f 7300 	mov.w	r3, #512	; 0x200
    7e04:	462a      	mov	r2, r5
    7e06:	19e9      	adds	r1, r5, r7
    7e08:	f8da 0010 	ldr.w	r0, [sl, #16]
    7e0c:	47d8      	blx	fp
    7e0e:	f505 7500 	add.w	r5, r5, #512	; 0x200
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    7e12:	42a5      	cmp	r5, r4
    7e14:	d1f4      	bne.n	7e00 <_flash_write+0x60>
	} while (block_end_addr < (wr_start_addr + length - 1));
    7e16:	eb08 0306 	add.w	r3, r8, r6
    7e1a:	3b01      	subs	r3, #1
    7e1c:	9a00      	ldr	r2, [sp, #0]
    7e1e:	429a      	cmp	r2, r3
    7e20:	d22c      	bcs.n	7e7c <_flash_write+0xdc>
		block_start_addr = wr_start_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    7e22:	f426 53ff 	bic.w	r3, r6, #8160	; 0x1fe0
    7e26:	f023 031f 	bic.w	r3, r3, #31
    7e2a:	9301      	str	r3, [sp, #4]
		block_end_addr   = block_start_addr + NVMCTRL_BLOCK_SIZE - 1;
    7e2c:	f503 52ff 	add.w	r2, r3, #8160	; 0x1fe0
    7e30:	321f      	adds	r2, #31
    7e32:	9200      	str	r2, [sp, #0]
    7e34:	ad04      	add	r5, sp, #16
    7e36:	f50d 5900 	add.w	r9, sp, #8192	; 0x2000
    7e3a:	f109 0910 	add.w	r9, r9, #16
    7e3e:	462c      	mov	r4, r5
    7e40:	1b5f      	subs	r7, r3, r5
    7e42:	9502      	str	r5, [sp, #8]
			_flash_read(device, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    7e44:	f44f 7300 	mov.w	r3, #512	; 0x200
    7e48:	4622      	mov	r2, r4
    7e4a:	19e1      	adds	r1, r4, r7
    7e4c:	4650      	mov	r0, sl
    7e4e:	4d0e      	ldr	r5, [pc, #56]	; (7e88 <_flash_write+0xe8>)
    7e50:	47a8      	blx	r5
    7e52:	f504 7400 	add.w	r4, r4, #512	; 0x200
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    7e56:	454c      	cmp	r4, r9
    7e58:	d1f4      	bne.n	7e44 <_flash_write+0xa4>
    7e5a:	9d02      	ldr	r5, [sp, #8]
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    7e5c:	9b01      	ldr	r3, [sp, #4]
    7e5e:	1af3      	subs	r3, r6, r3
    7e60:	0a59      	lsrs	r1, r3, #9
    7e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    7e66:	9a00      	ldr	r2, [sp, #0]
    7e68:	4296      	cmp	r6, r2
    7e6a:	d8be      	bhi.n	7dea <_flash_write+0x4a>
    7e6c:	f1b8 0f00 	cmp.w	r8, #0
    7e70:	d0bb      	beq.n	7dea <_flash_write+0x4a>
    7e72:	9a03      	ldr	r2, [sp, #12]
			tmp_buffer[j][k] = *buffer;
    7e74:	4640      	mov	r0, r8
    7e76:	f8dd 8000 	ldr.w	r8, [sp]
    7e7a:	e7a2      	b.n	7dc2 <_flash_write+0x22>
}
    7e7c:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
    7e80:	b005      	add	sp, #20
    7e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e86:	bf00      	nop
    7e88:	00007d7b 	.word	0x00007d7b
    7e8c:	00007c85 	.word	0x00007c85

00007e90 <_flash_erase>:
{
    7e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e94:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    7e98:	4607      	mov	r7, r0
    7e9a:	460c      	mov	r4, r1
    7e9c:	4616      	mov	r6, r2
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    7e9e:	f421 55ff 	bic.w	r5, r1, #8160	; 0x1fe0
    7ea2:	f025 051f 	bic.w	r5, r5, #31
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    7ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
    7eaa:	21ff      	movs	r1, #255	; 0xff
    7eac:	4668      	mov	r0, sp
    7eae:	4b27      	ldr	r3, [pc, #156]	; (7f4c <_flash_erase+0xbc>)
    7eb0:	4798      	blx	r3
	if (dst_addr != block_start_addr) {
    7eb2:	42ac      	cmp	r4, r5
    7eb4:	d043      	beq.n	7f3e <_flash_erase+0xae>
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    7eb6:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    7eba:	f504 5af0 	add.w	sl, r4, #7680	; 0x1e00
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    7ebe:	f44f 7900 	mov.w	r9, #512	; 0x200
    7ec2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 7f50 <_flash_erase+0xc0>
    7ec6:	464b      	mov	r3, r9
    7ec8:	466a      	mov	r2, sp
    7eca:	4621      	mov	r1, r4
    7ecc:	4638      	mov	r0, r7
    7ece:	47c0      	blx	r8
			if (--page_nums == 0) {
    7ed0:	3e01      	subs	r6, #1
    7ed2:	d030      	beq.n	7f36 <_flash_erase+0xa6>
			dst_addr += NVMCTRL_PAGE_SIZE;
    7ed4:	f504 7400 	add.w	r4, r4, #512	; 0x200
			if (dst_addr == block_start_addr) {
    7ed8:	42a5      	cmp	r5, r4
    7eda:	d001      	beq.n	7ee0 <_flash_erase+0x50>
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    7edc:	4554      	cmp	r4, sl
    7ede:	d1f2      	bne.n	7ec6 <_flash_erase+0x36>
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    7ee0:	2e0f      	cmp	r6, #15
    7ee2:	d919      	bls.n	7f18 <_flash_erase+0x88>
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    7ee4:	4628      	mov	r0, r5
    7ee6:	4631      	mov	r1, r6
    7ee8:	f24a 5401 	movw	r4, #42241	; 0xa501
		_flash_erase_block(device->hw, block_start_addr);
    7eec:	693a      	ldr	r2, [r7, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    7eee:	8a53      	ldrh	r3, [r2, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    7ef0:	f013 0f01 	tst.w	r3, #1
    7ef4:	d0fb      	beq.n	7eee <_flash_erase+0x5e>
	((Nvmctrl *)hw)->ADDR.reg = data;
    7ef6:	6150      	str	r0, [r2, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    7ef8:	8094      	strh	r4, [r2, #4]
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    7efa:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
		page_nums -= NVMCTRL_BLOCK_PAGES;
    7efe:	3910      	subs	r1, #16
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    7f00:	290f      	cmp	r1, #15
    7f02:	d8f3      	bhi.n	7eec <_flash_erase+0x5c>
    7f04:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    7f08:	f1a6 0310 	sub.w	r3, r6, #16
    7f0c:	091b      	lsrs	r3, r3, #4
    7f0e:	eb05 3543 	add.w	r5, r5, r3, lsl #13
    7f12:	f006 060f 	and.w	r6, r6, #15
	if (page_nums != 0) {
    7f16:	b176      	cbz	r6, 7f36 <_flash_erase+0xa6>
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    7f18:	2400      	movs	r4, #0
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    7f1a:	f44f 7900 	mov.w	r9, #512	; 0x200
    7f1e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 7f50 <_flash_erase+0xc0>
    7f22:	464b      	mov	r3, r9
    7f24:	466a      	mov	r2, sp
    7f26:	4629      	mov	r1, r5
    7f28:	4638      	mov	r0, r7
    7f2a:	47c0      	blx	r8
			block_start_addr += NVMCTRL_PAGE_SIZE;
    7f2c:	f505 7500 	add.w	r5, r5, #512	; 0x200
		for (i = 0; i < page_nums; i++) {
    7f30:	3401      	adds	r4, #1
    7f32:	42a6      	cmp	r6, r4
    7f34:	d8f5      	bhi.n	7f22 <_flash_erase+0x92>
}
    7f36:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    7f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    7f3e:	2e0f      	cmp	r6, #15
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    7f40:	bf98      	it	ls
    7f42:	4625      	movls	r5, r4
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    7f44:	d9e7      	bls.n	7f16 <_flash_erase+0x86>
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    7f46:	4625      	mov	r5, r4
    7f48:	e7cc      	b.n	7ee4 <_flash_erase+0x54>
    7f4a:	bf00      	nop
    7f4c:	0000d447 	.word	0x0000d447
    7f50:	00007da1 	.word	0x00007da1

00007f54 <_flash_is_locked>:
	return !(hri_nvmctrl_get_RUNLOCK_reg(device->hw, 1 << region_id));
    7f54:	6903      	ldr	r3, [r0, #16]
	tmp = ((Nvmctrl *)hw)->RUNLOCK.reg;
    7f56:	699a      	ldr	r2, [r3, #24]
    7f58:	f3c1 31cf 	ubfx	r1, r1, #15, #16
    7f5c:	2301      	movs	r3, #1
    7f5e:	fa03 f101 	lsl.w	r1, r3, r1
    7f62:	4211      	tst	r1, r2
}
    7f64:	bf0c      	ite	eq
    7f66:	4618      	moveq	r0, r3
    7f68:	2000      	movne	r0, #0
    7f6a:	4770      	bx	lr

00007f6c <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    7f6c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    7f6e:	4b02      	ldr	r3, [pc, #8]	; (7f78 <NVMCTRL_0_Handler+0xc>)
    7f70:	6818      	ldr	r0, [r3, #0]
    7f72:	4b02      	ldr	r3, [pc, #8]	; (7f7c <NVMCTRL_0_Handler+0x10>)
    7f74:	4798      	blx	r3
    7f76:	bd08      	pop	{r3, pc}
    7f78:	20000a00 	.word	0x20000a00
    7f7c:	00007cc9 	.word	0x00007cc9

00007f80 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    7f80:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    7f82:	4b02      	ldr	r3, [pc, #8]	; (7f8c <NVMCTRL_1_Handler+0xc>)
    7f84:	6818      	ldr	r0, [r3, #0]
    7f86:	4b02      	ldr	r3, [pc, #8]	; (7f90 <NVMCTRL_1_Handler+0x10>)
    7f88:	4798      	blx	r3
    7f8a:	bd08      	pop	{r3, pc}
    7f8c:	20000a00 	.word	0x20000a00
    7f90:	00007cc9 	.word	0x00007cc9

00007f94 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    7f94:	4b03      	ldr	r3, [pc, #12]	; (7fa4 <_osc32kctrl_init_sources+0x10>)
    7f96:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    7f98:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    7f9c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    7f9e:	2201      	movs	r2, #1
    7fa0:	741a      	strb	r2, [r3, #16]
    7fa2:	4770      	bx	lr
    7fa4:	40001400 	.word	0x40001400

00007fa8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    7fa8:	4770      	bx	lr
	...

00007fac <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    7fac:	4a47      	ldr	r2, [pc, #284]	; (80cc <_oscctrl_init_referenced_generators+0x120>)
    7fae:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7fb0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    7fb4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    7fb8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7fba:	4611      	mov	r1, r2
    7fbc:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7fc0:	684b      	ldr	r3, [r1, #4]
    7fc2:	4213      	tst	r3, r2
    7fc4:	d1fc      	bne.n	7fc0 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    7fc6:	4a41      	ldr	r2, [pc, #260]	; (80cc <_oscctrl_init_referenced_generators+0x120>)
    7fc8:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7fca:	f013 0f04 	tst.w	r3, #4
    7fce:	d1fb      	bne.n	7fc8 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7fd0:	4b3f      	ldr	r3, [pc, #252]	; (80d0 <_oscctrl_init_referenced_generators+0x124>)
    7fd2:	2200      	movs	r2, #0
    7fd4:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    7fd6:	4a3f      	ldr	r2, [pc, #252]	; (80d4 <_oscctrl_init_referenced_generators+0x128>)
    7fd8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7fda:	461a      	mov	r2, r3
    7fdc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7fe0:	f013 0f10 	tst.w	r3, #16
    7fe4:	d1fa      	bne.n	7fdc <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    7fe6:	2200      	movs	r2, #0
    7fe8:	4b39      	ldr	r3, [pc, #228]	; (80d0 <_oscctrl_init_referenced_generators+0x124>)
    7fea:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7fee:	461a      	mov	r2, r3
    7ff0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7ff4:	f013 0f04 	tst.w	r3, #4
    7ff8:	d1fa      	bne.n	7ff0 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7ffa:	2202      	movs	r2, #2
    7ffc:	4b34      	ldr	r3, [pc, #208]	; (80d0 <_oscctrl_init_referenced_generators+0x124>)
    7ffe:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    8000:	461a      	mov	r2, r3
    8002:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    8006:	f013 0f02 	tst.w	r3, #2
    800a:	d1fa      	bne.n	8002 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    800c:	4b30      	ldr	r3, [pc, #192]	; (80d0 <_oscctrl_init_referenced_generators+0x124>)
    800e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    8010:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    8012:	461a      	mov	r2, r3
    8014:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    8018:	f013 0f08 	tst.w	r3, #8
    801c:	d1fa      	bne.n	8014 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    801e:	2288      	movs	r2, #136	; 0x88
    8020:	4b2b      	ldr	r3, [pc, #172]	; (80d0 <_oscctrl_init_referenced_generators+0x124>)
    8022:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    8026:	461a      	mov	r2, r3
    8028:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    802c:	f013 0f04 	tst.w	r3, #4
    8030:	d1fa      	bne.n	8028 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    8032:	2242      	movs	r2, #66	; 0x42
    8034:	4b25      	ldr	r3, [pc, #148]	; (80cc <_oscctrl_init_referenced_generators+0x120>)
    8036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    803a:	2227      	movs	r2, #39	; 0x27
    803c:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    8040:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    8042:	461a      	mov	r2, r3
    8044:	6d13      	ldr	r3, [r2, #80]	; 0x50
    8046:	f013 0f06 	tst.w	r3, #6
    804a:	d1fb      	bne.n	8044 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    804c:	4b20      	ldr	r3, [pc, #128]	; (80d0 <_oscctrl_init_referenced_generators+0x124>)
    804e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8052:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    8054:	2202      	movs	r2, #2
    8056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    805a:	461a      	mov	r2, r3
    805c:	6d13      	ldr	r3, [r2, #80]	; 0x50
    805e:	f013 0f02 	tst.w	r3, #2
    8062:	d1fb      	bne.n	805c <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8064:	4b1a      	ldr	r3, [pc, #104]	; (80d0 <_oscctrl_init_referenced_generators+0x124>)
    8066:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    806a:	f013 0f01 	tst.w	r3, #1
    806e:	d026      	beq.n	80be <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8070:	4a17      	ldr	r2, [pc, #92]	; (80d0 <_oscctrl_init_referenced_generators+0x124>)
    8072:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    8074:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    8078:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    807c:	d1f9      	bne.n	8072 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    807e:	4b14      	ldr	r3, [pc, #80]	; (80d0 <_oscctrl_init_referenced_generators+0x124>)
    8080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    8082:	f012 0f01 	tst.w	r2, #1
    8086:	d103      	bne.n	8090 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    8088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    808a:	f012 0f02 	tst.w	r2, #2
    808e:	d0f7      	beq.n	8080 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    8090:	4a0e      	ldr	r2, [pc, #56]	; (80cc <_oscctrl_init_referenced_generators+0x120>)
    8092:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    8094:	2b00      	cmp	r3, #0
    8096:	d1fc      	bne.n	8092 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    8098:	4a0c      	ldr	r2, [pc, #48]	; (80cc <_oscctrl_init_referenced_generators+0x120>)
    809a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    809c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    80a0:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    80a4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    80a6:	4611      	mov	r1, r2
    80a8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    80ac:	684b      	ldr	r3, [r1, #4]
    80ae:	4213      	tst	r3, r2
    80b0:	d1fc      	bne.n	80ac <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    80b2:	4a06      	ldr	r2, [pc, #24]	; (80cc <_oscctrl_init_referenced_generators+0x120>)
    80b4:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    80b6:	f013 0f04 	tst.w	r3, #4
    80ba:	d1fb      	bne.n	80b4 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    80bc:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    80be:	4a04      	ldr	r2, [pc, #16]	; (80d0 <_oscctrl_init_referenced_generators+0x124>)
    80c0:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    80c2:	f413 7f80 	tst.w	r3, #256	; 0x100
    80c6:	d0fb      	beq.n	80c0 <_oscctrl_init_referenced_generators+0x114>
    80c8:	e7d9      	b.n	807e <_oscctrl_init_referenced_generators+0xd2>
    80ca:	bf00      	nop
    80cc:	40001c00 	.word	0x40001c00
    80d0:	40001000 	.word	0x40001000
    80d4:	04010000 	.word	0x04010000

000080d8 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    80d8:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    80da:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    80dc:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    80de:	4903      	ldr	r1, [pc, #12]	; (80ec <_qspi_dma_rx_complete+0x14>)
    80e0:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    80e2:	685b      	ldr	r3, [r3, #4]
    80e4:	b103      	cbz	r3, 80e8 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    80e6:	4798      	blx	r3
    80e8:	bd08      	pop	{r3, pc}
    80ea:	bf00      	nop
    80ec:	01000002 	.word	0x01000002

000080f0 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    80f0:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    80f2:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    80f4:	681a      	ldr	r2, [r3, #0]
    80f6:	4903      	ldr	r1, [pc, #12]	; (8104 <_qspi_dma_tx_complete+0x14>)
    80f8:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    80fa:	685b      	ldr	r3, [r3, #4]
    80fc:	b103      	cbz	r3, 8100 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    80fe:	4798      	blx	r3
    8100:	bd08      	pop	{r3, pc}
    8102:	bf00      	nop
    8104:	01000002 	.word	0x01000002

00008108 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    8108:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    810a:	6883      	ldr	r3, [r0, #8]
    810c:	689b      	ldr	r3, [r3, #8]
    810e:	b103      	cbz	r3, 8112 <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    8110:	4798      	blx	r3
    8112:	bd08      	pop	{r3, pc}

00008114 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    8114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8116:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    8118:	4604      	mov	r4, r0
    811a:	2800      	cmp	r0, #0
    811c:	d027      	beq.n	816e <_qspi_dma_init+0x5a>
    811e:	1c08      	adds	r0, r1, #0
    8120:	bf18      	it	ne
    8122:	2001      	movne	r0, #1
    8124:	22cb      	movs	r2, #203	; 0xcb
    8126:	4913      	ldr	r1, [pc, #76]	; (8174 <_qspi_dma_init+0x60>)
    8128:	4b13      	ldr	r3, [pc, #76]	; (8178 <_qspi_dma_init+0x64>)
    812a:	4798      	blx	r3
	dev->prvt = hw;
    812c:	4626      	mov	r6, r4
    812e:	f846 5b0c 	str.w	r5, [r6], #12
    8132:	2301      	movs	r3, #1
    8134:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    8136:	4b11      	ldr	r3, [pc, #68]	; (817c <_qspi_dma_init+0x68>)
    8138:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    813a:	4b11      	ldr	r3, [pc, #68]	; (8180 <_qspi_dma_init+0x6c>)
    813c:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    813e:	211f      	movs	r1, #31
    8140:	4630      	mov	r0, r6
    8142:	4f10      	ldr	r7, [pc, #64]	; (8184 <_qspi_dma_init+0x70>)
    8144:	47b8      	blx	r7
	dev->resource->back                 = dev;
    8146:	68e3      	ldr	r3, [r4, #12]
    8148:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    814a:	68e3      	ldr	r3, [r4, #12]
    814c:	4a0e      	ldr	r2, [pc, #56]	; (8188 <_qspi_dma_init+0x74>)
    814e:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    8150:	68e3      	ldr	r3, [r4, #12]
    8152:	4d0e      	ldr	r5, [pc, #56]	; (818c <_qspi_dma_init+0x78>)
    8154:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    8156:	211e      	movs	r1, #30
    8158:	4630      	mov	r0, r6
    815a:	47b8      	blx	r7
	dev->resource->back                 = dev;
    815c:	68e3      	ldr	r3, [r4, #12]
    815e:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    8160:	68e3      	ldr	r3, [r4, #12]
    8162:	4a0b      	ldr	r2, [pc, #44]	; (8190 <_qspi_dma_init+0x7c>)
    8164:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    8166:	68e3      	ldr	r3, [r4, #12]
    8168:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    816a:	2000      	movs	r0, #0
    816c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    816e:	2000      	movs	r0, #0
    8170:	e7d8      	b.n	8124 <_qspi_dma_init+0x10>
    8172:	bf00      	nop
    8174:	0000f2d4 	.word	0x0000f2d4
    8178:	000072b1 	.word	0x000072b1
    817c:	06000011 	.word	0x06000011
    8180:	00243b00 	.word	0x00243b00
    8184:	00007b4d 	.word	0x00007b4d
    8188:	000080d9 	.word	0x000080d9
    818c:	00008109 	.word	0x00008109
    8190:	000080f1 	.word	0x000080f1

00008194 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    8194:	b500      	push	{lr}
    8196:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    8198:	4b0d      	ldr	r3, [pc, #52]	; (81d0 <RAMECC_Handler+0x3c>)
    819a:	789b      	ldrb	r3, [r3, #2]
    819c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    819e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    81a0:	9b01      	ldr	r3, [sp, #4]
    81a2:	f013 0f02 	tst.w	r3, #2
    81a6:	d006      	beq.n	81b6 <RAMECC_Handler+0x22>
    81a8:	4b0a      	ldr	r3, [pc, #40]	; (81d4 <RAMECC_Handler+0x40>)
    81aa:	681b      	ldr	r3, [r3, #0]
    81ac:	b11b      	cbz	r3, 81b6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    81ae:	4a08      	ldr	r2, [pc, #32]	; (81d0 <RAMECC_Handler+0x3c>)
    81b0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    81b2:	4798      	blx	r3
    81b4:	e009      	b.n	81ca <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    81b6:	9b01      	ldr	r3, [sp, #4]
    81b8:	f013 0f01 	tst.w	r3, #1
    81bc:	d005      	beq.n	81ca <RAMECC_Handler+0x36>
    81be:	4b05      	ldr	r3, [pc, #20]	; (81d4 <RAMECC_Handler+0x40>)
    81c0:	685b      	ldr	r3, [r3, #4]
    81c2:	b113      	cbz	r3, 81ca <RAMECC_Handler+0x36>
    81c4:	4a02      	ldr	r2, [pc, #8]	; (81d0 <RAMECC_Handler+0x3c>)
    81c6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    81c8:	4798      	blx	r3
	} else {
		return;
	}
}
    81ca:	b003      	add	sp, #12
    81cc:	f85d fb04 	ldr.w	pc, [sp], #4
    81d0:	41020000 	.word	0x41020000
    81d4:	20008200 	.word	0x20008200

000081d8 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    81d8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    81da:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    81dc:	6913      	ldr	r3, [r2, #16]
    81de:	f013 0f60 	tst.w	r3, #96	; 0x60
    81e2:	d1fb      	bne.n	81dc <_rtc_timer_set_period+0x4>
}
    81e4:	4770      	bx	lr

000081e6 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    81e6:	68c2      	ldr	r2, [r0, #12]
    81e8:	6913      	ldr	r3, [r2, #16]
    81ea:	f013 0f60 	tst.w	r3, #96	; 0x60
    81ee:	d1fb      	bne.n	81e8 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    81f0:	6a10      	ldr	r0, [r2, #32]
}
    81f2:	4770      	bx	lr

000081f4 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    81f4:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    81f6:	f248 0103 	movw	r1, #32771	; 0x8003
    81fa:	6913      	ldr	r3, [r2, #16]
    81fc:	420b      	tst	r3, r1
    81fe:	d1fc      	bne.n	81fa <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    8200:	8810      	ldrh	r0, [r2, #0]
}
    8202:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8206:	4770      	bx	lr

00008208 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    8208:	4770      	bx	lr
	...

0000820c <_rtc_timer_init>:
{
    820c:	b538      	push	{r3, r4, r5, lr}
    820e:	460c      	mov	r4, r1
	ASSERT(dev);
    8210:	4605      	mov	r5, r0
    8212:	2230      	movs	r2, #48	; 0x30
    8214:	4914      	ldr	r1, [pc, #80]	; (8268 <_rtc_timer_init+0x5c>)
    8216:	3000      	adds	r0, #0
    8218:	bf18      	it	ne
    821a:	2001      	movne	r0, #1
    821c:	4b13      	ldr	r3, [pc, #76]	; (826c <_rtc_timer_init+0x60>)
    821e:	4798      	blx	r3
	dev->hw = hw;
    8220:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    8222:	2301      	movs	r3, #1
    8224:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    8226:	f248 0203 	movw	r2, #32771	; 0x8003
    822a:	6923      	ldr	r3, [r4, #16]
    822c:	4213      	tst	r3, r2
    822e:	d1fc      	bne.n	822a <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    8230:	68eb      	ldr	r3, [r5, #12]
    8232:	691a      	ldr	r2, [r3, #16]
    8234:	f012 0f01 	tst.w	r2, #1
    8238:	d1fb      	bne.n	8232 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    823a:	f248 0280 	movw	r2, #32896	; 0x8080
    823e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    8240:	f248 0103 	movw	r1, #32771	; 0x8003
    8244:	691a      	ldr	r2, [r3, #16]
    8246:	420a      	tst	r2, r1
    8248:	d1fc      	bne.n	8244 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    824a:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    824c:	2301      	movs	r3, #1
    824e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    8250:	6913      	ldr	r3, [r2, #16]
    8252:	f013 0f60 	tst.w	r3, #96	; 0x60
    8256:	d1fb      	bne.n	8250 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    8258:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    825a:	f44f 7280 	mov.w	r2, #256	; 0x100
    825e:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    8260:	4b03      	ldr	r3, [pc, #12]	; (8270 <_rtc_timer_init+0x64>)
    8262:	601d      	str	r5, [r3, #0]
}
    8264:	2000      	movs	r0, #0
    8266:	bd38      	pop	{r3, r4, r5, pc}
    8268:	0000f2ec 	.word	0x0000f2ec
    826c:	000072b1 	.word	0x000072b1
    8270:	20000a04 	.word	0x20000a04

00008274 <_rtc_timer_deinit>:
{
    8274:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    8276:	4604      	mov	r4, r0
    8278:	b1c8      	cbz	r0, 82ae <_rtc_timer_deinit+0x3a>
    827a:	68c0      	ldr	r0, [r0, #12]
    827c:	3000      	adds	r0, #0
    827e:	bf18      	it	ne
    8280:	2001      	movne	r0, #1
    8282:	2252      	movs	r2, #82	; 0x52
    8284:	490b      	ldr	r1, [pc, #44]	; (82b4 <_rtc_timer_deinit+0x40>)
    8286:	4b0c      	ldr	r3, [pc, #48]	; (82b8 <_rtc_timer_deinit+0x44>)
    8288:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    828a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    828e:	4b0b      	ldr	r3, [pc, #44]	; (82bc <_rtc_timer_deinit+0x48>)
    8290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    8294:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8298:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    829c:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    829e:	2301      	movs	r3, #1
    82a0:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    82a2:	f248 0103 	movw	r1, #32771	; 0x8003
    82a6:	6913      	ldr	r3, [r2, #16]
    82a8:	420b      	tst	r3, r1
    82aa:	d1fc      	bne.n	82a6 <_rtc_timer_deinit+0x32>
}
    82ac:	bd10      	pop	{r4, pc}
    82ae:	2000      	movs	r0, #0
    82b0:	e7e7      	b.n	8282 <_rtc_timer_deinit+0xe>
    82b2:	bf00      	nop
    82b4:	0000f2ec 	.word	0x0000f2ec
    82b8:	000072b1 	.word	0x000072b1
    82bc:	e000e100 	.word	0xe000e100

000082c0 <_rtc_timer_start>:
{
    82c0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    82c2:	4604      	mov	r4, r0
    82c4:	b310      	cbz	r0, 830c <_rtc_timer_start+0x4c>
    82c6:	68c0      	ldr	r0, [r0, #12]
    82c8:	3000      	adds	r0, #0
    82ca:	bf18      	it	ne
    82cc:	2001      	movne	r0, #1
    82ce:	225e      	movs	r2, #94	; 0x5e
    82d0:	490f      	ldr	r1, [pc, #60]	; (8310 <_rtc_timer_start+0x50>)
    82d2:	4b10      	ldr	r3, [pc, #64]	; (8314 <_rtc_timer_start+0x54>)
    82d4:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    82da:	4b0f      	ldr	r3, [pc, #60]	; (8318 <_rtc_timer_start+0x58>)
    82dc:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    82de:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    82e0:	2300      	movs	r3, #0
    82e2:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    82e4:	6913      	ldr	r3, [r2, #16]
    82e6:	f013 0f08 	tst.w	r3, #8
    82ea:	d1fb      	bne.n	82e4 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    82ec:	68e3      	ldr	r3, [r4, #12]
    82ee:	691a      	ldr	r2, [r3, #16]
    82f0:	f012 0f08 	tst.w	r2, #8
    82f4:	d1fb      	bne.n	82ee <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    82f6:	881a      	ldrh	r2, [r3, #0]
    82f8:	b292      	uxth	r2, r2
    82fa:	f042 0202 	orr.w	r2, r2, #2
    82fe:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    8300:	f248 0103 	movw	r1, #32771	; 0x8003
    8304:	691a      	ldr	r2, [r3, #16]
    8306:	420a      	tst	r2, r1
    8308:	d1fc      	bne.n	8304 <_rtc_timer_start+0x44>
}
    830a:	bd10      	pop	{r4, pc}
    830c:	2000      	movs	r0, #0
    830e:	e7de      	b.n	82ce <_rtc_timer_start+0xe>
    8310:	0000f2ec 	.word	0x0000f2ec
    8314:	000072b1 	.word	0x000072b1
    8318:	e000e100 	.word	0xe000e100

0000831c <_rtc_timer_stop>:
{
    831c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    831e:	4604      	mov	r4, r0
    8320:	b1a0      	cbz	r0, 834c <_rtc_timer_stop+0x30>
    8322:	68c0      	ldr	r0, [r0, #12]
    8324:	3000      	adds	r0, #0
    8326:	bf18      	it	ne
    8328:	2001      	movne	r0, #1
    832a:	226b      	movs	r2, #107	; 0x6b
    832c:	4908      	ldr	r1, [pc, #32]	; (8350 <_rtc_timer_stop+0x34>)
    832e:	4b09      	ldr	r3, [pc, #36]	; (8354 <_rtc_timer_stop+0x38>)
    8330:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    8332:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    8334:	8813      	ldrh	r3, [r2, #0]
    8336:	f023 0302 	bic.w	r3, r3, #2
    833a:	041b      	lsls	r3, r3, #16
    833c:	0c1b      	lsrs	r3, r3, #16
    833e:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    8340:	f248 0103 	movw	r1, #32771	; 0x8003
    8344:	6913      	ldr	r3, [r2, #16]
    8346:	420b      	tst	r3, r1
    8348:	d1fc      	bne.n	8344 <_rtc_timer_stop+0x28>
}
    834a:	bd10      	pop	{r4, pc}
    834c:	2000      	movs	r0, #0
    834e:	e7ec      	b.n	832a <_rtc_timer_stop+0xe>
    8350:	0000f2ec 	.word	0x0000f2ec
    8354:	000072b1 	.word	0x000072b1

00008358 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    8358:	4800      	ldr	r0, [pc, #0]	; (835c <_rtc_get_timer+0x4>)
    835a:	4770      	bx	lr
    835c:	20000348 	.word	0x20000348

00008360 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    8360:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    8362:	4b08      	ldr	r3, [pc, #32]	; (8384 <RTC_Handler+0x24>)
    8364:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    8366:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    8368:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    836a:	f413 7f80 	tst.w	r3, #256	; 0x100
    836e:	d007      	beq.n	8380 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    8370:	6823      	ldr	r3, [r4, #0]
    8372:	b10b      	cbz	r3, 8378 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    8374:	4620      	mov	r0, r4
    8376:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    8378:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    837a:	f44f 7280 	mov.w	r2, #256	; 0x100
    837e:	819a      	strh	r2, [r3, #12]
    8380:	bd10      	pop	{r4, pc}
    8382:	bf00      	nop
    8384:	20000a04 	.word	0x20000a04

00008388 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    8388:	b470      	push	{r4, r5, r6}
    838a:	b089      	sub	sp, #36	; 0x24
    838c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    838e:	466c      	mov	r4, sp
    8390:	4d0d      	ldr	r5, [pc, #52]	; (83c8 <_sercom_get_hardware_index+0x40>)
    8392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8396:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    839a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    839e:	9b00      	ldr	r3, [sp, #0]
    83a0:	42b3      	cmp	r3, r6
    83a2:	d00d      	beq.n	83c0 <_sercom_get_hardware_index+0x38>
    83a4:	4631      	mov	r1, r6
    83a6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    83a8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    83aa:	f853 2b04 	ldr.w	r2, [r3], #4
    83ae:	428a      	cmp	r2, r1
    83b0:	d007      	beq.n	83c2 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    83b2:	3001      	adds	r0, #1
    83b4:	2808      	cmp	r0, #8
    83b6:	d1f8      	bne.n	83aa <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    83b8:	2000      	movs	r0, #0
}
    83ba:	b009      	add	sp, #36	; 0x24
    83bc:	bc70      	pop	{r4, r5, r6}
    83be:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    83c0:	2000      	movs	r0, #0
			return i;
    83c2:	b2c0      	uxtb	r0, r0
    83c4:	e7f9      	b.n	83ba <_sercom_get_hardware_index+0x32>
    83c6:	bf00      	nop
    83c8:	0000f304 	.word	0x0000f304

000083cc <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    83cc:	b510      	push	{r4, lr}
	void *hw = device->hw;
    83ce:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    83d0:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    83d2:	f013 0f01 	tst.w	r3, #1
    83d6:	d003      	beq.n	83e0 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    83d8:	7da3      	ldrb	r3, [r4, #22]
    83da:	f013 0f01 	tst.w	r3, #1
    83de:	d112      	bne.n	8406 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    83e0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    83e2:	f013 0f02 	tst.w	r3, #2
    83e6:	d003      	beq.n	83f0 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    83e8:	7da3      	ldrb	r3, [r4, #22]
    83ea:	f013 0f02 	tst.w	r3, #2
    83ee:	d10f      	bne.n	8410 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    83f0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    83f2:	f013 0f04 	tst.w	r3, #4
    83f6:	d015      	beq.n	8424 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    83f8:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    83fa:	f003 0337 	and.w	r3, r3, #55	; 0x37
    83fe:	b163      	cbz	r3, 841a <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    8400:	23ff      	movs	r3, #255	; 0xff
    8402:	8363      	strh	r3, [r4, #26]
    8404:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    8406:	2301      	movs	r3, #1
    8408:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    840a:	6803      	ldr	r3, [r0, #0]
    840c:	4798      	blx	r3
    840e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    8410:	2302      	movs	r3, #2
    8412:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    8414:	6883      	ldr	r3, [r0, #8]
    8416:	4798      	blx	r3
    8418:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    841a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    841c:	6843      	ldr	r3, [r0, #4]
    841e:	b2c9      	uxtb	r1, r1
    8420:	4798      	blx	r3
    8422:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    8424:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    8426:	09db      	lsrs	r3, r3, #7
    8428:	d100      	bne.n	842c <_sercom_usart_interrupt_handler+0x60>
    842a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    842c:	2380      	movs	r3, #128	; 0x80
    842e:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    8430:	68c3      	ldr	r3, [r0, #12]
    8432:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    8434:	8b63      	ldrh	r3, [r4, #26]
    8436:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    8438:	8363      	strh	r3, [r4, #26]
    843a:	e7f6      	b.n	842a <_sercom_usart_interrupt_handler+0x5e>

0000843c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    843c:	4b11      	ldr	r3, [pc, #68]	; (8484 <_sercom_init_irq_param+0x48>)
    843e:	4298      	cmp	r0, r3
    8440:	d011      	beq.n	8466 <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    8442:	4b11      	ldr	r3, [pc, #68]	; (8488 <_sercom_init_irq_param+0x4c>)
    8444:	4298      	cmp	r0, r3
    8446:	d011      	beq.n	846c <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    8448:	4b10      	ldr	r3, [pc, #64]	; (848c <_sercom_init_irq_param+0x50>)
    844a:	4298      	cmp	r0, r3
    844c:	d011      	beq.n	8472 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    844e:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    8452:	d011      	beq.n	8478 <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    8454:	4b0e      	ldr	r3, [pc, #56]	; (8490 <_sercom_init_irq_param+0x54>)
    8456:	4298      	cmp	r0, r3
    8458:	d011      	beq.n	847e <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    845a:	4b0e      	ldr	r3, [pc, #56]	; (8494 <_sercom_init_irq_param+0x58>)
    845c:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    845e:	bf04      	itt	eq
    8460:	4b0d      	ldreq	r3, [pc, #52]	; (8498 <_sercom_init_irq_param+0x5c>)
    8462:	6159      	streq	r1, [r3, #20]
    8464:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    8466:	4b0c      	ldr	r3, [pc, #48]	; (8498 <_sercom_init_irq_param+0x5c>)
    8468:	6019      	str	r1, [r3, #0]
    846a:	e7f0      	b.n	844e <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    846c:	4b0a      	ldr	r3, [pc, #40]	; (8498 <_sercom_init_irq_param+0x5c>)
    846e:	6059      	str	r1, [r3, #4]
    8470:	e7f0      	b.n	8454 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    8472:	4b09      	ldr	r3, [pc, #36]	; (8498 <_sercom_init_irq_param+0x5c>)
    8474:	6099      	str	r1, [r3, #8]
    8476:	e7f0      	b.n	845a <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    8478:	4b07      	ldr	r3, [pc, #28]	; (8498 <_sercom_init_irq_param+0x5c>)
    847a:	60d9      	str	r1, [r3, #12]
    847c:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    847e:	4b06      	ldr	r3, [pc, #24]	; (8498 <_sercom_init_irq_param+0x5c>)
    8480:	6119      	str	r1, [r3, #16]
    8482:	4770      	bx	lr
    8484:	40003000 	.word	0x40003000
    8488:	40003400 	.word	0x40003400
    848c:	41014000 	.word	0x41014000
    8490:	43000400 	.word	0x43000400
    8494:	43000800 	.word	0x43000800
    8498:	20000a08 	.word	0x20000a08

0000849c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    849c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    849e:	4b03      	ldr	r3, [pc, #12]	; (84ac <_sercom_get_irq_num+0x10>)
    84a0:	4798      	blx	r3
    84a2:	0080      	lsls	r0, r0, #2
    84a4:	302e      	adds	r0, #46	; 0x2e
}
    84a6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    84aa:	bd08      	pop	{r3, pc}
    84ac:	00008389 	.word	0x00008389

000084b0 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    84b0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    84b2:	f013 0f01 	tst.w	r3, #1
    84b6:	d109      	bne.n	84cc <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    84b8:	6803      	ldr	r3, [r0, #0]
    84ba:	f043 0302 	orr.w	r3, r3, #2
    84be:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    84c0:	69c3      	ldr	r3, [r0, #28]
    84c2:	f013 0f03 	tst.w	r3, #3
    84c6:	d1fb      	bne.n	84c0 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    84c8:	2000      	movs	r0, #0
    84ca:	4770      	bx	lr
		return ERR_BUSY;
    84cc:	f06f 0003 	mvn.w	r0, #3
}
    84d0:	4770      	bx	lr
	...

000084d4 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    84d4:	b538      	push	{r3, r4, r5, lr}
    84d6:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    84d8:	4b0b      	ldr	r3, [pc, #44]	; (8508 <_spi_async_enable+0x34>)
    84da:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    84dc:	4620      	mov	r0, r4
    84de:	4b0b      	ldr	r3, [pc, #44]	; (850c <_spi_async_enable+0x38>)
    84e0:	4798      	blx	r3
    84e2:	1d01      	adds	r1, r0, #4
    84e4:	b2c9      	uxtb	r1, r1
    84e6:	2501      	movs	r5, #1
    84e8:	4c09      	ldr	r4, [pc, #36]	; (8510 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    84ea:	1c43      	adds	r3, r0, #1
    84ec:	b2db      	uxtb	r3, r3
    84ee:	0942      	lsrs	r2, r0, #5
    84f0:	f000 001f 	and.w	r0, r0, #31
    84f4:	fa05 f000 	lsl.w	r0, r5, r0
    84f8:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    84fc:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    84fe:	4299      	cmp	r1, r3
    8500:	d1f3      	bne.n	84ea <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    8502:	2000      	movs	r0, #0
    8504:	bd38      	pop	{r3, r4, r5, pc}
    8506:	bf00      	nop
    8508:	000084b1 	.word	0x000084b1
    850c:	0000849d 	.word	0x0000849d
    8510:	e000e100 	.word	0xe000e100

00008514 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8514:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    8516:	f013 0f03 	tst.w	r3, #3
    851a:	d111      	bne.n	8540 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    851c:	69c3      	ldr	r3, [r0, #28]
    851e:	f013 0f03 	tst.w	r3, #3
    8522:	d1fb      	bne.n	851c <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    8524:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    8526:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    852a:	0709      	lsls	r1, r1, #28
    852c:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    8530:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8532:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8534:	69c3      	ldr	r3, [r0, #28]
    8536:	f013 0f03 	tst.w	r3, #3
    853a:	d1fb      	bne.n	8534 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    853c:	2000      	movs	r0, #0
    853e:	4770      	bx	lr
		return ERR_BUSY;
    8540:	f06f 0003 	mvn.w	r0, #3
}
    8544:	4770      	bx	lr

00008546 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    8546:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    8548:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    854a:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    854c:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    854e:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    8550:	f013 0f01 	tst.w	r3, #1
    8554:	d109      	bne.n	856a <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    8556:	f013 0f04 	tst.w	r3, #4
    855a:	d109      	bne.n	8570 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    855c:	f013 0f02 	tst.w	r3, #2
    8560:	d109      	bne.n	8576 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    8562:	f013 0f80 	tst.w	r3, #128	; 0x80
    8566:	d10b      	bne.n	8580 <_spi_handler+0x3a>
    8568:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    856a:	6883      	ldr	r3, [r0, #8]
    856c:	4798      	blx	r3
    856e:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    8570:	68c3      	ldr	r3, [r0, #12]
    8572:	4798      	blx	r3
    8574:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    8576:	2302      	movs	r3, #2
    8578:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    857a:	6903      	ldr	r3, [r0, #16]
    857c:	4798      	blx	r3
    857e:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    8580:	2304      	movs	r3, #4
    8582:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    8584:	2380      	movs	r3, #128	; 0x80
    8586:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    8588:	6943      	ldr	r3, [r0, #20]
    858a:	f06f 0112 	mvn.w	r1, #18
    858e:	4798      	blx	r3
	}
}
    8590:	e7ea      	b.n	8568 <_spi_handler+0x22>
	...

00008594 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    8594:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    8596:	4b03      	ldr	r3, [pc, #12]	; (85a4 <_spi_get_tx_dma_channel+0x10>)
    8598:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    859a:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    859c:	bf0c      	ite	eq
    859e:	2008      	moveq	r0, #8
    85a0:	2000      	movne	r0, #0
    85a2:	bd08      	pop	{r3, pc}
    85a4:	00008389 	.word	0x00008389

000085a8 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    85a8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    85aa:	4b03      	ldr	r3, [pc, #12]	; (85b8 <_spi_get_rx_dma_channel+0x10>)
    85ac:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    85ae:	2807      	cmp	r0, #7
    85b0:	bf8c      	ite	hi
    85b2:	2000      	movhi	r0, #0
    85b4:	2001      	movls	r0, #1
    85b6:	bd08      	pop	{r3, pc}
    85b8:	00008389 	.word	0x00008389

000085bc <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    85bc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    85be:	6883      	ldr	r3, [r0, #8]
    85c0:	689b      	ldr	r3, [r3, #8]
    85c2:	b103      	cbz	r3, 85c6 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    85c4:	4798      	blx	r3
    85c6:	bd08      	pop	{r3, pc}

000085c8 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    85c8:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    85ca:	6883      	ldr	r3, [r0, #8]
    85cc:	685b      	ldr	r3, [r3, #4]
    85ce:	b103      	cbz	r3, 85d2 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    85d0:	4798      	blx	r3
    85d2:	bd08      	pop	{r3, pc}

000085d4 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    85d4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    85d6:	6883      	ldr	r3, [r0, #8]
    85d8:	68db      	ldr	r3, [r3, #12]
    85da:	b103      	cbz	r3, 85de <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    85dc:	4798      	blx	r3
    85de:	bd08      	pop	{r3, pc}

000085e0 <_usart_init>:
{
    85e0:	b510      	push	{r4, lr}
    85e2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    85e4:	4b48      	ldr	r3, [pc, #288]	; (8708 <_usart_init+0x128>)
    85e6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    85e8:	2800      	cmp	r0, #0
    85ea:	d06a      	beq.n	86c2 <_usart_init+0xe2>
    85ec:	2801      	cmp	r0, #1
    85ee:	d062      	beq.n	86b6 <_usart_init+0xd6>
    85f0:	2802      	cmp	r0, #2
    85f2:	d062      	beq.n	86ba <_usart_init+0xda>
    85f4:	2804      	cmp	r0, #4
    85f6:	d062      	beq.n	86be <_usart_init+0xde>
    85f8:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    85fa:	bf08      	it	eq
    85fc:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    85fe:	d006      	beq.n	860e <_usart_init+0x2e>
	ASSERT(false);
    8600:	f240 2276 	movw	r2, #630	; 0x276
    8604:	4941      	ldr	r1, [pc, #260]	; (870c <_usart_init+0x12c>)
    8606:	2000      	movs	r0, #0
    8608:	4b41      	ldr	r3, [pc, #260]	; (8710 <_usart_init+0x130>)
    860a:	4798      	blx	r3
	return 0;
    860c:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    860e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    8610:	f013 0f01 	tst.w	r3, #1
    8614:	d122      	bne.n	865c <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    8616:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    861a:	4a3e      	ldr	r2, [pc, #248]	; (8714 <_usart_init+0x134>)
    861c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8622:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8626:	69e3      	ldr	r3, [r4, #28]
    8628:	f013 0f03 	tst.w	r3, #3
    862c:	d1fb      	bne.n	8626 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    862e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    8630:	f013 0f02 	tst.w	r3, #2
    8634:	d00b      	beq.n	864e <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    8636:	6823      	ldr	r3, [r4, #0]
    8638:	f023 0302 	bic.w	r3, r3, #2
    863c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    863e:	69e3      	ldr	r3, [r4, #28]
    8640:	f013 0f03 	tst.w	r3, #3
    8644:	d1fb      	bne.n	863e <_usart_init+0x5e>
    8646:	69e3      	ldr	r3, [r4, #28]
    8648:	f013 0f02 	tst.w	r3, #2
    864c:	d1fb      	bne.n	8646 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    864e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    8652:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8654:	69e3      	ldr	r3, [r4, #28]
    8656:	f013 0f03 	tst.w	r3, #3
    865a:	d1fb      	bne.n	8654 <_usart_init+0x74>
    865c:	69e3      	ldr	r3, [r4, #28]
    865e:	f013 0f01 	tst.w	r3, #1
    8662:	d1fb      	bne.n	865c <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    8664:	460a      	mov	r2, r1
    8666:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    866a:	4b2a      	ldr	r3, [pc, #168]	; (8714 <_usart_init+0x134>)
    866c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    8670:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    8672:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8674:	69e3      	ldr	r3, [r4, #28]
    8676:	f013 0f03 	tst.w	r3, #3
    867a:	d1fb      	bne.n	8674 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    867c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    8680:	4924      	ldr	r1, [pc, #144]	; (8714 <_usart_init+0x134>)
    8682:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    8686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    8688:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    868a:	69e3      	ldr	r3, [r4, #28]
    868c:	f013 0f1f 	tst.w	r3, #31
    8690:	d1fb      	bne.n	868a <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    8692:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    8696:	491f      	ldr	r1, [pc, #124]	; (8714 <_usart_init+0x134>)
    8698:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    869e:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    86a0:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    86a4:	d10f      	bne.n	86c6 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    86a6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    86aa:	491a      	ldr	r1, [pc, #104]	; (8714 <_usart_init+0x134>)
    86ac:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    86b0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    86b2:	81a3      	strh	r3, [r4, #12]
    86b4:	e016      	b.n	86e4 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    86b6:	2101      	movs	r1, #1
    86b8:	e7a9      	b.n	860e <_usart_init+0x2e>
    86ba:	2102      	movs	r1, #2
    86bc:	e7a7      	b.n	860e <_usart_init+0x2e>
    86be:	2103      	movs	r1, #3
    86c0:	e7a5      	b.n	860e <_usart_init+0x2e>
    86c2:	2100      	movs	r1, #0
    86c4:	e7a3      	b.n	860e <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    86c6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    86ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    86ce:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    86d0:	89a1      	ldrh	r1, [r4, #12]
    86d2:	f360 010c 	bfi	r1, r0, #0, #13
    86d6:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    86d8:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    86dc:	89a3      	ldrh	r3, [r4, #12]
    86de:	f361 334f 	bfi	r3, r1, #13, #3
    86e2:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    86e4:	4b0b      	ldr	r3, [pc, #44]	; (8714 <_usart_init+0x134>)
    86e6:	0051      	lsls	r1, r2, #1
    86e8:	1888      	adds	r0, r1, r2
    86ea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    86ee:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    86f2:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    86f4:	440a      	add	r2, r1
    86f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    86fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    86fe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    8702:	2000      	movs	r0, #0
    8704:	bd10      	pop	{r4, pc}
    8706:	bf00      	nop
    8708:	00008389 	.word	0x00008389
    870c:	0000f3d8 	.word	0x0000f3d8
    8710:	000072b1 	.word	0x000072b1
    8714:	0000f304 	.word	0x0000f304

00008718 <_get_i2cm_index>:
{
    8718:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    871a:	4b07      	ldr	r3, [pc, #28]	; (8738 <_get_i2cm_index+0x20>)
    871c:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    871e:	2805      	cmp	r0, #5
    8720:	d008      	beq.n	8734 <_get_i2cm_index+0x1c>
	ASSERT(false);
    8722:	f240 32ed 	movw	r2, #1005	; 0x3ed
    8726:	4905      	ldr	r1, [pc, #20]	; (873c <_get_i2cm_index+0x24>)
    8728:	2000      	movs	r0, #0
    872a:	4b05      	ldr	r3, [pc, #20]	; (8740 <_get_i2cm_index+0x28>)
    872c:	4798      	blx	r3
	return -1;
    872e:	f04f 30ff 	mov.w	r0, #4294967295
}
    8732:	bd08      	pop	{r3, pc}
			return i;
    8734:	2000      	movs	r0, #0
    8736:	bd08      	pop	{r3, pc}
    8738:	00008389 	.word	0x00008389
    873c:	0000f3d8 	.word	0x0000f3d8
    8740:	000072b1 	.word	0x000072b1

00008744 <_i2c_m_sync_init_impl>:
{
    8744:	b538      	push	{r3, r4, r5, lr}
    8746:	4605      	mov	r5, r0
    8748:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    874a:	4608      	mov	r0, r1
    874c:	4b34      	ldr	r3, [pc, #208]	; (8820 <_i2c_m_sync_init_impl+0xdc>)
    874e:	4798      	blx	r3
    8750:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    8752:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    8754:	f013 0f01 	tst.w	r3, #1
    8758:	d123      	bne.n	87a2 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    875a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    875e:	4a31      	ldr	r2, [pc, #196]	; (8824 <_i2c_m_sync_init_impl+0xe0>)
    8760:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8764:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    8768:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    876c:	69e3      	ldr	r3, [r4, #28]
    876e:	f013 0f03 	tst.w	r3, #3
    8772:	d1fb      	bne.n	876c <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    8774:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    8776:	f013 0f02 	tst.w	r3, #2
    877a:	d00b      	beq.n	8794 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    877c:	6823      	ldr	r3, [r4, #0]
    877e:	f023 0302 	bic.w	r3, r3, #2
    8782:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8784:	69e3      	ldr	r3, [r4, #28]
    8786:	f013 0f03 	tst.w	r3, #3
    878a:	d1fb      	bne.n	8784 <_i2c_m_sync_init_impl+0x40>
    878c:	69e3      	ldr	r3, [r4, #28]
    878e:	f013 0f02 	tst.w	r3, #2
    8792:	d1fb      	bne.n	878c <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    8794:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    8798:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    879a:	69e3      	ldr	r3, [r4, #28]
    879c:	f013 0f03 	tst.w	r3, #3
    87a0:	d1fb      	bne.n	879a <_i2c_m_sync_init_impl+0x56>
    87a2:	69e3      	ldr	r3, [r4, #28]
    87a4:	f013 0f01 	tst.w	r3, #1
    87a8:	d1fb      	bne.n	87a2 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    87aa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    87ae:	4a1d      	ldr	r2, [pc, #116]	; (8824 <_i2c_m_sync_init_impl+0xe0>)
    87b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    87b4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    87b8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    87ba:	69e3      	ldr	r3, [r4, #28]
    87bc:	f013 0f03 	tst.w	r3, #3
    87c0:	d1fb      	bne.n	87ba <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    87c2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    87c6:	4917      	ldr	r1, [pc, #92]	; (8824 <_i2c_m_sync_init_impl+0xe0>)
    87c8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    87cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    87d0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    87d2:	69e3      	ldr	r3, [r4, #28]
    87d4:	f013 0f04 	tst.w	r3, #4
    87d8:	d1fb      	bne.n	87d2 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    87da:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    87de:	4911      	ldr	r1, [pc, #68]	; (8824 <_i2c_m_sync_init_impl+0xe0>)
    87e0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    87e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    87e8:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    87ea:	f3c2 6301 	ubfx	r3, r2, #24, #2
    87ee:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    87f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    87f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    87f6:	2b01      	cmp	r3, #1
    87f8:	bf94      	ite	ls
    87fa:	2300      	movls	r3, #0
    87fc:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    87fe:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    8802:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8804:	69e3      	ldr	r3, [r4, #28]
    8806:	f013 0f04 	tst.w	r3, #4
    880a:	d1fb      	bne.n	8804 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    880c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8810:	4b04      	ldr	r3, [pc, #16]	; (8824 <_i2c_m_sync_init_impl+0xe0>)
    8812:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8816:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    881a:	81eb      	strh	r3, [r5, #14]
}
    881c:	2000      	movs	r0, #0
    881e:	bd38      	pop	{r3, r4, r5, pc}
    8820:	00008719 	.word	0x00008719
    8824:	0000f304 	.word	0x0000f304

00008828 <_sercom_i2c_m_irq_handler>:
{
    8828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    882c:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    882e:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    8830:	7e26      	ldrb	r6, [r4, #24]
    8832:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    8834:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8a6c <_sercom_i2c_m_irq_handler+0x244>
    8838:	f240 425f 	movw	r2, #1119	; 0x45f
    883c:	4641      	mov	r1, r8
    883e:	3000      	adds	r0, #0
    8840:	bf18      	it	ne
    8842:	2001      	movne	r0, #1
    8844:	4f88      	ldr	r7, [pc, #544]	; (8a68 <_sercom_i2c_m_irq_handler+0x240>)
    8846:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    8848:	6928      	ldr	r0, [r5, #16]
    884a:	f44f 628c 	mov.w	r2, #1120	; 0x460
    884e:	4641      	mov	r1, r8
    8850:	3000      	adds	r0, #0
    8852:	bf18      	it	ne
    8854:	2001      	movne	r0, #1
    8856:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    8858:	f016 0f80 	tst.w	r6, #128	; 0x80
    885c:	f040 80f4 	bne.w	8a48 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    8860:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8862:	69e3      	ldr	r3, [r4, #28]
    8864:	f013 0f04 	tst.w	r3, #4
    8868:	d1fb      	bne.n	8862 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    886a:	8b63      	ldrh	r3, [r4, #26]
    886c:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    886e:	f016 0f01 	tst.w	r6, #1
    8872:	f000 8090 	beq.w	8996 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    8876:	f013 0f02 	tst.w	r3, #2
    887a:	d022      	beq.n	88c2 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    887c:	2201      	movs	r2, #1
    887e:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    8880:	886a      	ldrh	r2, [r5, #2]
    8882:	b292      	uxth	r2, r2
    8884:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    8888:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    888a:	886a      	ldrh	r2, [r5, #2]
    888c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    8890:	0412      	lsls	r2, r2, #16
    8892:	0c12      	lsrs	r2, r2, #16
    8894:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    8896:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    889a:	2b00      	cmp	r3, #0
    889c:	bf14      	ite	ne
    889e:	f06f 0104 	mvnne.w	r1, #4
    88a2:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    88a6:	886b      	ldrh	r3, [r5, #2]
    88a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    88ac:	041b      	lsls	r3, r3, #16
    88ae:	0c1b      	lsrs	r3, r3, #16
    88b0:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    88b2:	696b      	ldr	r3, [r5, #20]
    88b4:	2b00      	cmp	r3, #0
    88b6:	f000 80c5 	beq.w	8a44 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    88ba:	4628      	mov	r0, r5
    88bc:	4798      	blx	r3
    88be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    88c2:	f013 0f04 	tst.w	r3, #4
    88c6:	d124      	bne.n	8912 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    88c8:	886b      	ldrh	r3, [r5, #2]
    88ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
    88ce:	d03e      	beq.n	894e <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    88d0:	882b      	ldrh	r3, [r5, #0]
    88d2:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    88d4:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    88d8:	69e3      	ldr	r3, [r4, #28]
    88da:	f013 0f04 	tst.w	r3, #4
    88de:	d1fb      	bne.n	88d8 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    88e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    88e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    88e6:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    88ea:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    88ec:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    88ee:	69e3      	ldr	r3, [r4, #28]
    88f0:	f013 0f04 	tst.w	r3, #4
    88f4:	d1fb      	bne.n	88ee <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    88f6:	886b      	ldrh	r3, [r5, #2]
    88f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    88fc:	041b      	lsls	r3, r3, #16
    88fe:	0c1b      	lsrs	r3, r3, #16
    8900:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    8902:	69ab      	ldr	r3, [r5, #24]
    8904:	2b00      	cmp	r3, #0
    8906:	f000 8088 	beq.w	8a1a <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    890a:	4628      	mov	r0, r5
    890c:	4798      	blx	r3
    890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    8912:	686b      	ldr	r3, [r5, #4]
    8914:	2b00      	cmp	r3, #0
    8916:	dd04      	ble.n	8922 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    8918:	886b      	ldrh	r3, [r5, #2]
    891a:	b29b      	uxth	r3, r3
    891c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8920:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    8922:	886b      	ldrh	r3, [r5, #2]
    8924:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    8928:	d108      	bne.n	893c <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    892a:	886b      	ldrh	r3, [r5, #2]
    892c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8930:	041b      	lsls	r3, r3, #16
    8932:	0c1b      	lsrs	r3, r3, #16
    8934:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    8936:	f06f 0101 	mvn.w	r1, #1
    893a:	e7b4      	b.n	88a6 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    893c:	6863      	ldr	r3, [r4, #4]
    893e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    8942:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8944:	69e3      	ldr	r3, [r4, #28]
    8946:	f013 0f04 	tst.w	r3, #4
    894a:	d1fb      	bne.n	8944 <_sercom_i2c_m_irq_handler+0x11c>
    894c:	e7ed      	b.n	892a <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    894e:	686b      	ldr	r3, [r5, #4]
    8950:	b99b      	cbnz	r3, 897a <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    8952:	886b      	ldrh	r3, [r5, #2]
    8954:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    8958:	d106      	bne.n	8968 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    895a:	886b      	ldrh	r3, [r5, #2]
    895c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8960:	041b      	lsls	r3, r3, #16
    8962:	0c1b      	lsrs	r3, r3, #16
    8964:	806b      	strh	r3, [r5, #2]
    8966:	e7cc      	b.n	8902 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    8968:	6863      	ldr	r3, [r4, #4]
    896a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    896e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8970:	69e3      	ldr	r3, [r4, #28]
    8972:	f013 0f04 	tst.w	r3, #4
    8976:	d1fb      	bne.n	8970 <_sercom_i2c_m_irq_handler+0x148>
    8978:	e7ef      	b.n	895a <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    897a:	68ab      	ldr	r3, [r5, #8]
    897c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    897e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8980:	69e3      	ldr	r3, [r4, #28]
    8982:	f013 0f04 	tst.w	r3, #4
    8986:	d1fb      	bne.n	8980 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    8988:	68ab      	ldr	r3, [r5, #8]
    898a:	3301      	adds	r3, #1
    898c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    898e:	686b      	ldr	r3, [r5, #4]
    8990:	3b01      	subs	r3, #1
    8992:	606b      	str	r3, [r5, #4]
    8994:	e7b5      	b.n	8902 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    8996:	f016 0f02 	tst.w	r6, #2
    899a:	d041      	beq.n	8a20 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    899c:	686a      	ldr	r2, [r5, #4]
    899e:	2a00      	cmp	r2, #0
    89a0:	d036      	beq.n	8a10 <_sercom_i2c_m_irq_handler+0x1e8>
    89a2:	f013 0f04 	tst.w	r3, #4
    89a6:	d133      	bne.n	8a10 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    89a8:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    89ac:	3a01      	subs	r2, #1
    89ae:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    89b0:	2a00      	cmp	r2, #0
    89b2:	d137      	bne.n	8a24 <_sercom_i2c_m_irq_handler+0x1fc>
    89b4:	2900      	cmp	r1, #0
    89b6:	d039      	beq.n	8a2c <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    89b8:	886b      	ldrh	r3, [r5, #2]
    89ba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    89be:	d116      	bne.n	89ee <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    89c0:	886b      	ldrh	r3, [r5, #2]
    89c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    89c6:	041b      	lsls	r3, r3, #16
    89c8:	0c1b      	lsrs	r3, r3, #16
    89ca:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    89cc:	68aa      	ldr	r2, [r5, #8]
    89ce:	1c53      	adds	r3, r2, #1
    89d0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    89d2:	69e3      	ldr	r3, [r4, #28]
    89d4:	f013 0f04 	tst.w	r3, #4
    89d8:	d1fb      	bne.n	89d2 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    89da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    89dc:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    89de:	2302      	movs	r3, #2
    89e0:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    89e2:	69eb      	ldr	r3, [r5, #28]
    89e4:	b1e3      	cbz	r3, 8a20 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    89e6:	4628      	mov	r0, r5
    89e8:	4798      	blx	r3
    89ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    89ee:	6863      	ldr	r3, [r4, #4]
    89f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    89f4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    89f6:	69e3      	ldr	r3, [r4, #28]
    89f8:	f013 0f04 	tst.w	r3, #4
    89fc:	d1fb      	bne.n	89f6 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    89fe:	6863      	ldr	r3, [r4, #4]
    8a00:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    8a04:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8a06:	69e3      	ldr	r3, [r4, #28]
    8a08:	f013 0f04 	tst.w	r3, #4
    8a0c:	d1fb      	bne.n	8a06 <_sercom_i2c_m_irq_handler+0x1de>
    8a0e:	e7d7      	b.n	89c0 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    8a10:	2302      	movs	r3, #2
    8a12:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    8a14:	f06f 0101 	mvn.w	r1, #1
    8a18:	e745      	b.n	88a6 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    8a1a:	f016 0f02 	tst.w	r6, #2
    8a1e:	d1e0      	bne.n	89e2 <_sercom_i2c_m_irq_handler+0x1ba>
    8a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    8a24:	2a01      	cmp	r2, #1
    8a26:	d1d1      	bne.n	89cc <_sercom_i2c_m_irq_handler+0x1a4>
    8a28:	2900      	cmp	r1, #0
    8a2a:	d0cf      	beq.n	89cc <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    8a2c:	6863      	ldr	r3, [r4, #4]
    8a2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    8a32:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8a34:	69e3      	ldr	r3, [r4, #28]
    8a36:	f013 0f04 	tst.w	r3, #4
    8a3a:	d1fb      	bne.n	8a34 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    8a3c:	686b      	ldr	r3, [r5, #4]
    8a3e:	2b00      	cmp	r3, #0
    8a40:	d0ba      	beq.n	89b8 <_sercom_i2c_m_irq_handler+0x190>
    8a42:	e7c3      	b.n	89cc <_sercom_i2c_m_irq_handler+0x1a4>
    8a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8a48:	886b      	ldrh	r3, [r5, #2]
    8a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8a4e:	041b      	lsls	r3, r3, #16
    8a50:	0c1b      	lsrs	r3, r3, #16
    8a52:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    8a54:	696b      	ldr	r3, [r5, #20]
    8a56:	2b00      	cmp	r3, #0
    8a58:	d0e2      	beq.n	8a20 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    8a5a:	f06f 0104 	mvn.w	r1, #4
    8a5e:	4628      	mov	r0, r5
    8a60:	4798      	blx	r3
    8a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a66:	bf00      	nop
    8a68:	000072b1 	.word	0x000072b1
    8a6c:	0000f3d8 	.word	0x0000f3d8

00008a70 <_usart_set_parity>:
{
    8a70:	b570      	push	{r4, r5, r6, lr}
    8a72:	b082      	sub	sp, #8
    8a74:	4604      	mov	r4, r0
    8a76:	460e      	mov	r6, r1
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8a78:	69e3      	ldr	r3, [r4, #28]
    8a7a:	f013 0f03 	tst.w	r3, #3
    8a7e:	d1fb      	bne.n	8a78 <_usart_set_parity+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    8a80:	6825      	ldr	r5, [r4, #0]
	return (bool)tmp;
    8a82:	f3c5 0540 	ubfx	r5, r5, #1, #1
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    8a86:	6823      	ldr	r3, [r4, #0]
    8a88:	f023 0302 	bic.w	r3, r3, #2
    8a8c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8a8e:	69e3      	ldr	r3, [r4, #28]
    8a90:	f013 0f03 	tst.w	r3, #3
    8a94:	d1fb      	bne.n	8a8e <_usart_set_parity+0x1e>
	CRITICAL_SECTION_ENTER()
    8a96:	a801      	add	r0, sp, #4
    8a98:	4b1a      	ldr	r3, [pc, #104]	; (8b04 <_usart_set_parity+0x94>)
    8a9a:	4798      	blx	r3
    8a9c:	69e3      	ldr	r3, [r4, #28]
    8a9e:	f013 0f02 	tst.w	r3, #2
    8aa2:	d1fb      	bne.n	8a9c <_usart_set_parity+0x2c>
	if (USART_PARITY_NONE != parity) {
    8aa4:	2e02      	cmp	r6, #2
    8aa6:	d023      	beq.n	8af0 <_usart_set_parity+0x80>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    8aa8:	6823      	ldr	r3, [r4, #0]
    8aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8aae:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8ab0:	69e3      	ldr	r3, [r4, #28]
    8ab2:	f013 0f1f 	tst.w	r3, #31
    8ab6:	d1fb      	bne.n	8ab0 <_usart_set_parity+0x40>
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    8ab8:	6863      	ldr	r3, [r4, #4]
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    8aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    8abe:	3600      	adds	r6, #0
    8ac0:	bf18      	it	ne
    8ac2:	2601      	movne	r6, #1
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    8ac4:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    8ac8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8aca:	69e3      	ldr	r3, [r4, #28]
    8acc:	f013 0f1f 	tst.w	r3, #31
    8ad0:	d1fb      	bne.n	8aca <_usart_set_parity+0x5a>
	CRITICAL_SECTION_LEAVE()
    8ad2:	a801      	add	r0, sp, #4
    8ad4:	4b0c      	ldr	r3, [pc, #48]	; (8b08 <_usart_set_parity+0x98>)
    8ad6:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    8ad8:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    8ada:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    8ade:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    8ae2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8ae4:	69e3      	ldr	r3, [r4, #28]
    8ae6:	f013 0f03 	tst.w	r3, #3
    8aea:	d1fb      	bne.n	8ae4 <_usart_set_parity+0x74>
}
    8aec:	b002      	add	sp, #8
    8aee:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    8af0:	6823      	ldr	r3, [r4, #0]
    8af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8af6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8af8:	69e3      	ldr	r3, [r4, #28]
    8afa:	f013 0f1f 	tst.w	r3, #31
    8afe:	d1fb      	bne.n	8af8 <_usart_set_parity+0x88>
    8b00:	e7da      	b.n	8ab8 <_usart_set_parity+0x48>
    8b02:	bf00      	nop
    8b04:	00005c7d 	.word	0x00005c7d
    8b08:	00005c8b 	.word	0x00005c8b

00008b0c <_usart_sync_init>:
{
    8b0c:	b538      	push	{r3, r4, r5, lr}
    8b0e:	460c      	mov	r4, r1
	ASSERT(device);
    8b10:	4605      	mov	r5, r0
    8b12:	22c8      	movs	r2, #200	; 0xc8
    8b14:	4905      	ldr	r1, [pc, #20]	; (8b2c <_usart_sync_init+0x20>)
    8b16:	3000      	adds	r0, #0
    8b18:	bf18      	it	ne
    8b1a:	2001      	movne	r0, #1
    8b1c:	4b04      	ldr	r3, [pc, #16]	; (8b30 <_usart_sync_init+0x24>)
    8b1e:	4798      	blx	r3
	device->hw = hw;
    8b20:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    8b22:	4620      	mov	r0, r4
    8b24:	4b03      	ldr	r3, [pc, #12]	; (8b34 <_usart_sync_init+0x28>)
    8b26:	4798      	blx	r3
}
    8b28:	bd38      	pop	{r3, r4, r5, pc}
    8b2a:	bf00      	nop
    8b2c:	0000f3d8 	.word	0x0000f3d8
    8b30:	000072b1 	.word	0x000072b1
    8b34:	000085e1 	.word	0x000085e1

00008b38 <_usart_async_init>:
{
    8b38:	b570      	push	{r4, r5, r6, lr}
    8b3a:	460d      	mov	r5, r1
	ASSERT(device);
    8b3c:	4606      	mov	r6, r0
    8b3e:	22d6      	movs	r2, #214	; 0xd6
    8b40:	4917      	ldr	r1, [pc, #92]	; (8ba0 <_usart_async_init+0x68>)
    8b42:	3000      	adds	r0, #0
    8b44:	bf18      	it	ne
    8b46:	2001      	movne	r0, #1
    8b48:	4b16      	ldr	r3, [pc, #88]	; (8ba4 <_usart_async_init+0x6c>)
    8b4a:	4798      	blx	r3
	init_status = _usart_init(hw);
    8b4c:	4628      	mov	r0, r5
    8b4e:	4b16      	ldr	r3, [pc, #88]	; (8ba8 <_usart_async_init+0x70>)
    8b50:	4798      	blx	r3
	if (init_status) {
    8b52:	4604      	mov	r4, r0
    8b54:	b108      	cbz	r0, 8b5a <_usart_async_init+0x22>
}
    8b56:	4620      	mov	r0, r4
    8b58:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    8b5a:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    8b5c:	4631      	mov	r1, r6
    8b5e:	4628      	mov	r0, r5
    8b60:	4b12      	ldr	r3, [pc, #72]	; (8bac <_usart_async_init+0x74>)
    8b62:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    8b64:	4628      	mov	r0, r5
    8b66:	4b12      	ldr	r3, [pc, #72]	; (8bb0 <_usart_async_init+0x78>)
    8b68:	4798      	blx	r3
    8b6a:	1d01      	adds	r1, r0, #4
    8b6c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8b6e:	2501      	movs	r5, #1
    8b70:	f000 021f 	and.w	r2, r0, #31
    8b74:	fa05 f202 	lsl.w	r2, r5, r2
    8b78:	0943      	lsrs	r3, r0, #5
    8b7a:	009b      	lsls	r3, r3, #2
    8b7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    8b80:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    8b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    8b88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8b8c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8b90:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8b94:	601a      	str	r2, [r3, #0]
		irq++;
    8b96:	3001      	adds	r0, #1
    8b98:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    8b9a:	4281      	cmp	r1, r0
    8b9c:	d1e8      	bne.n	8b70 <_usart_async_init+0x38>
    8b9e:	e7da      	b.n	8b56 <_usart_async_init+0x1e>
    8ba0:	0000f3d8 	.word	0x0000f3d8
    8ba4:	000072b1 	.word	0x000072b1
    8ba8:	000085e1 	.word	0x000085e1
    8bac:	0000843d 	.word	0x0000843d
    8bb0:	0000849d 	.word	0x0000849d

00008bb4 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    8bb4:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8bb6:	6813      	ldr	r3, [r2, #0]
    8bb8:	f043 0302 	orr.w	r3, r3, #2
    8bbc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8bbe:	69d3      	ldr	r3, [r2, #28]
    8bc0:	f013 0f03 	tst.w	r3, #3
    8bc4:	d1fb      	bne.n	8bbe <_usart_sync_enable+0xa>
}
    8bc6:	4770      	bx	lr

00008bc8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    8bc8:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8bca:	6813      	ldr	r3, [r2, #0]
    8bcc:	f043 0302 	orr.w	r3, r3, #2
    8bd0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8bd2:	69d3      	ldr	r3, [r2, #28]
    8bd4:	f013 0f03 	tst.w	r3, #3
    8bd8:	d1fb      	bne.n	8bd2 <_usart_async_enable+0xa>
}
    8bda:	4770      	bx	lr

00008bdc <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    8bdc:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    8bde:	6813      	ldr	r3, [r2, #0]
    8be0:	f023 0302 	bic.w	r3, r3, #2
    8be4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8be6:	69d3      	ldr	r3, [r2, #28]
    8be8:	f013 0f03 	tst.w	r3, #3
    8bec:	d1fb      	bne.n	8be6 <_usart_async_disable+0xa>
}
    8bee:	4770      	bx	lr

00008bf0 <_usart_async_set_parity>:
{
    8bf0:	b508      	push	{r3, lr}
	_usart_set_parity(device->hw, parity);
    8bf2:	6980      	ldr	r0, [r0, #24]
    8bf4:	4b01      	ldr	r3, [pc, #4]	; (8bfc <_usart_async_set_parity+0xc>)
    8bf6:	4798      	blx	r3
    8bf8:	bd08      	pop	{r3, pc}
    8bfa:	bf00      	nop
    8bfc:	00008a71 	.word	0x00008a71

00008c00 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    8c00:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    8c02:	6299      	str	r1, [r3, #40]	; 0x28
    8c04:	4770      	bx	lr

00008c06 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    8c06:	6983      	ldr	r3, [r0, #24]
    8c08:	6299      	str	r1, [r3, #40]	; 0x28
    8c0a:	4770      	bx	lr

00008c0c <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    8c0c:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    8c0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    8c10:	b2c0      	uxtb	r0, r0
    8c12:	4770      	bx	lr

00008c14 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    8c14:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    8c16:	7e18      	ldrb	r0, [r3, #24]
}
    8c18:	f000 0001 	and.w	r0, r0, #1
    8c1c:	4770      	bx	lr

00008c1e <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    8c1e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    8c20:	7e18      	ldrb	r0, [r3, #24]
}
    8c22:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8c26:	4770      	bx	lr

00008c28 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    8c28:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    8c2a:	7e18      	ldrb	r0, [r3, #24]
}
    8c2c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    8c30:	4770      	bx	lr

00008c32 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    8c32:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    8c34:	2201      	movs	r2, #1
    8c36:	759a      	strb	r2, [r3, #22]
    8c38:	4770      	bx	lr

00008c3a <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    8c3a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    8c3c:	2202      	movs	r2, #2
    8c3e:	759a      	strb	r2, [r3, #22]
    8c40:	4770      	bx	lr
	...

00008c44 <_usart_async_set_irq_state>:
{
    8c44:	b570      	push	{r4, r5, r6, lr}
    8c46:	460c      	mov	r4, r1
    8c48:	4616      	mov	r6, r2
	ASSERT(device);
    8c4a:	4605      	mov	r5, r0
    8c4c:	f240 2236 	movw	r2, #566	; 0x236
    8c50:	4915      	ldr	r1, [pc, #84]	; (8ca8 <_usart_async_set_irq_state+0x64>)
    8c52:	3000      	adds	r0, #0
    8c54:	bf18      	it	ne
    8c56:	2001      	movne	r0, #1
    8c58:	4b14      	ldr	r3, [pc, #80]	; (8cac <_usart_async_set_irq_state+0x68>)
    8c5a:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    8c5c:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    8c60:	d10d      	bne.n	8c7e <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    8c62:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    8c64:	b92e      	cbnz	r6, 8c72 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    8c66:	2201      	movs	r2, #1
    8c68:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    8c6a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    8c6c:	2202      	movs	r2, #2
    8c6e:	751a      	strb	r2, [r3, #20]
    8c70:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    8c72:	2201      	movs	r2, #1
    8c74:	759a      	strb	r2, [r3, #22]
    8c76:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    8c78:	2202      	movs	r2, #2
    8c7a:	759a      	strb	r2, [r3, #22]
    8c7c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    8c7e:	2c01      	cmp	r4, #1
    8c80:	d002      	beq.n	8c88 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    8c82:	2c03      	cmp	r4, #3
    8c84:	d008      	beq.n	8c98 <_usart_async_set_irq_state+0x54>
    8c86:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    8c88:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    8c8a:	b916      	cbnz	r6, 8c92 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    8c8c:	2204      	movs	r2, #4
    8c8e:	751a      	strb	r2, [r3, #20]
    8c90:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    8c92:	2204      	movs	r2, #4
    8c94:	759a      	strb	r2, [r3, #22]
    8c96:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    8c98:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    8c9a:	b116      	cbz	r6, 8ca2 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    8c9c:	2280      	movs	r2, #128	; 0x80
    8c9e:	759a      	strb	r2, [r3, #22]
}
    8ca0:	e7f1      	b.n	8c86 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    8ca2:	2280      	movs	r2, #128	; 0x80
    8ca4:	751a      	strb	r2, [r3, #20]
    8ca6:	bd70      	pop	{r4, r5, r6, pc}
    8ca8:	0000f3d8 	.word	0x0000f3d8
    8cac:	000072b1 	.word	0x000072b1

00008cb0 <_i2c_m_async_init>:
{
    8cb0:	b570      	push	{r4, r5, r6, lr}
    8cb2:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    8cb4:	4606      	mov	r6, r0
    8cb6:	f240 42d2 	movw	r2, #1234	; 0x4d2
    8cba:	4918      	ldr	r1, [pc, #96]	; (8d1c <_i2c_m_async_init+0x6c>)
    8cbc:	3000      	adds	r0, #0
    8cbe:	bf18      	it	ne
    8cc0:	2001      	movne	r0, #1
    8cc2:	4b17      	ldr	r3, [pc, #92]	; (8d20 <_i2c_m_async_init+0x70>)
    8cc4:	4798      	blx	r3
	i2c_dev->hw = hw;
    8cc6:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    8cc8:	4629      	mov	r1, r5
    8cca:	4630      	mov	r0, r6
    8ccc:	4b15      	ldr	r3, [pc, #84]	; (8d24 <_i2c_m_async_init+0x74>)
    8cce:	4798      	blx	r3
	if (init_status) {
    8cd0:	4604      	mov	r4, r0
    8cd2:	b108      	cbz	r0, 8cd8 <_i2c_m_async_init+0x28>
}
    8cd4:	4620      	mov	r0, r4
    8cd6:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    8cd8:	4631      	mov	r1, r6
    8cda:	4628      	mov	r0, r5
    8cdc:	4b12      	ldr	r3, [pc, #72]	; (8d28 <_i2c_m_async_init+0x78>)
    8cde:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    8ce0:	4628      	mov	r0, r5
    8ce2:	4b12      	ldr	r3, [pc, #72]	; (8d2c <_i2c_m_async_init+0x7c>)
    8ce4:	4798      	blx	r3
    8ce6:	1d01      	adds	r1, r0, #4
    8ce8:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8cea:	2501      	movs	r5, #1
    8cec:	f000 021f 	and.w	r2, r0, #31
    8cf0:	fa05 f202 	lsl.w	r2, r5, r2
    8cf4:	0943      	lsrs	r3, r0, #5
    8cf6:	009b      	lsls	r3, r3, #2
    8cf8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    8cfc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    8d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    8d04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8d08:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d10:	601a      	str	r2, [r3, #0]
		irq++;
    8d12:	3001      	adds	r0, #1
    8d14:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    8d16:	4281      	cmp	r1, r0
    8d18:	d1e8      	bne.n	8cec <_i2c_m_async_init+0x3c>
    8d1a:	e7db      	b.n	8cd4 <_i2c_m_async_init+0x24>
    8d1c:	0000f3d8 	.word	0x0000f3d8
    8d20:	000072b1 	.word	0x000072b1
    8d24:	00008745 	.word	0x00008745
    8d28:	0000843d 	.word	0x0000843d
    8d2c:	0000849d 	.word	0x0000849d

00008d30 <_i2c_m_async_transfer>:
{
    8d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d34:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    8d36:	4605      	mov	r5, r0
    8d38:	f110 0800 	adds.w	r8, r0, #0
    8d3c:	bf18      	it	ne
    8d3e:	f04f 0801 	movne.w	r8, #1
    8d42:	4f45      	ldr	r7, [pc, #276]	; (8e58 <_i2c_m_async_transfer+0x128>)
    8d44:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    8d48:	4639      	mov	r1, r7
    8d4a:	4640      	mov	r0, r8
    8d4c:	4e43      	ldr	r6, [pc, #268]	; (8e5c <_i2c_m_async_transfer+0x12c>)
    8d4e:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    8d50:	6928      	ldr	r0, [r5, #16]
    8d52:	f240 5229 	movw	r2, #1321	; 0x529
    8d56:	4639      	mov	r1, r7
    8d58:	3000      	adds	r0, #0
    8d5a:	bf18      	it	ne
    8d5c:	2001      	movne	r0, #1
    8d5e:	47b0      	blx	r6
	ASSERT(msg);
    8d60:	f240 522a 	movw	r2, #1322	; 0x52a
    8d64:	4639      	mov	r1, r7
    8d66:	1c20      	adds	r0, r4, #0
    8d68:	bf18      	it	ne
    8d6a:	2001      	movne	r0, #1
    8d6c:	47b0      	blx	r6
	if (msg->len == 0) {
    8d6e:	6860      	ldr	r0, [r4, #4]
    8d70:	2800      	cmp	r0, #0
    8d72:	d06f      	beq.n	8e54 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8d74:	886b      	ldrh	r3, [r5, #2]
    8d76:	f413 7f80 	tst.w	r3, #256	; 0x100
    8d7a:	d169      	bne.n	8e50 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    8d7c:	8863      	ldrh	r3, [r4, #2]
    8d7e:	b29b      	uxth	r3, r3
    8d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8d84:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    8d86:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    8d8a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    8d8e:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    8d90:	6853      	ldr	r3, [r2, #4]
    8d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8d96:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8d98:	69d3      	ldr	r3, [r2, #28]
    8d9a:	f013 0f04 	tst.w	r3, #4
    8d9e:	d1fb      	bne.n	8d98 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    8da0:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    8da2:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    8da4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    8da8:	492b      	ldr	r1, [pc, #172]	; (8e58 <_i2c_m_async_transfer+0x128>)
    8daa:	4640      	mov	r0, r8
    8dac:	4b2b      	ldr	r3, [pc, #172]	; (8e5c <_i2c_m_async_transfer+0x12c>)
    8dae:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    8db0:	686b      	ldr	r3, [r5, #4]
    8db2:	2b01      	cmp	r3, #1
    8db4:	d02a      	beq.n	8e0c <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    8db6:	6863      	ldr	r3, [r4, #4]
    8db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    8dbc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8dbe:	69e3      	ldr	r3, [r4, #28]
    8dc0:	f013 0f04 	tst.w	r3, #4
    8dc4:	d1fb      	bne.n	8dbe <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    8dc6:	882b      	ldrh	r3, [r5, #0]
    8dc8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    8dcc:	d02a      	beq.n	8e24 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    8dce:	886a      	ldrh	r2, [r5, #2]
    8dd0:	f012 0f01 	tst.w	r2, #1
    8dd4:	d004      	beq.n	8de0 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    8dd6:	886a      	ldrh	r2, [r5, #2]
    8dd8:	b292      	uxth	r2, r2
    8dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    8dde:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8de0:	f240 72fe 	movw	r2, #2046	; 0x7fe
    8de4:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    8de8:	69e3      	ldr	r3, [r4, #28]
    8dea:	f013 0f04 	tst.w	r3, #4
    8dee:	d1fb      	bne.n	8de8 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    8df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    8df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8dfa:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    8dfc:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8dfe:	69e3      	ldr	r3, [r4, #28]
    8e00:	f013 0f04 	tst.w	r3, #4
    8e04:	d1fb      	bne.n	8dfe <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    8e06:	2000      	movs	r0, #0
    8e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    8e0c:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    8e10:	d0d1      	beq.n	8db6 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    8e12:	6863      	ldr	r3, [r4, #4]
    8e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    8e18:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8e1a:	69e3      	ldr	r3, [r4, #28]
    8e1c:	f013 0f04 	tst.w	r3, #4
    8e20:	d1fb      	bne.n	8e1a <_i2c_m_async_transfer+0xea>
    8e22:	e7d0      	b.n	8dc6 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    8e24:	8869      	ldrh	r1, [r5, #2]
    8e26:	005a      	lsls	r2, r3, #1
    8e28:	b2d2      	uxtb	r2, r2
    8e2a:	f001 0301 	and.w	r3, r1, #1
    8e2e:	431a      	orrs	r2, r3
    8e30:	69e3      	ldr	r3, [r4, #28]
    8e32:	f013 0f04 	tst.w	r3, #4
    8e36:	d1fb      	bne.n	8e30 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    8e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    8e3e:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    8e40:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8e42:	69e3      	ldr	r3, [r4, #28]
    8e44:	f013 0f04 	tst.w	r3, #4
    8e48:	d1fb      	bne.n	8e42 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    8e4a:	2000      	movs	r0, #0
    8e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    8e50:	f06f 0003 	mvn.w	r0, #3
}
    8e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e58:	0000f3d8 	.word	0x0000f3d8
    8e5c:	000072b1 	.word	0x000072b1

00008e60 <_i2c_m_async_register_callback>:
	switch (type) {
    8e60:	2901      	cmp	r1, #1
    8e62:	d006      	beq.n	8e72 <_i2c_m_async_register_callback+0x12>
    8e64:	b119      	cbz	r1, 8e6e <_i2c_m_async_register_callback+0xe>
    8e66:	2902      	cmp	r1, #2
    8e68:	d005      	beq.n	8e76 <_i2c_m_async_register_callback+0x16>
}
    8e6a:	2000      	movs	r0, #0
    8e6c:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    8e6e:	6142      	str	r2, [r0, #20]
		break;
    8e70:	e7fb      	b.n	8e6a <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    8e72:	6182      	str	r2, [r0, #24]
		break;
    8e74:	e7f9      	b.n	8e6a <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    8e76:	61c2      	str	r2, [r0, #28]
		break;
    8e78:	e7f7      	b.n	8e6a <_i2c_m_async_register_callback+0xa>
	...

00008e7c <SERCOM0_0_Handler>:
{
    8e7c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    8e7e:	4b02      	ldr	r3, [pc, #8]	; (8e88 <SERCOM0_0_Handler+0xc>)
    8e80:	6818      	ldr	r0, [r3, #0]
    8e82:	4b02      	ldr	r3, [pc, #8]	; (8e8c <SERCOM0_0_Handler+0x10>)
    8e84:	4798      	blx	r3
    8e86:	bd08      	pop	{r3, pc}
    8e88:	20000a08 	.word	0x20000a08
    8e8c:	000083cd 	.word	0x000083cd

00008e90 <SERCOM0_1_Handler>:
{
    8e90:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    8e92:	4b02      	ldr	r3, [pc, #8]	; (8e9c <SERCOM0_1_Handler+0xc>)
    8e94:	6818      	ldr	r0, [r3, #0]
    8e96:	4b02      	ldr	r3, [pc, #8]	; (8ea0 <SERCOM0_1_Handler+0x10>)
    8e98:	4798      	blx	r3
    8e9a:	bd08      	pop	{r3, pc}
    8e9c:	20000a08 	.word	0x20000a08
    8ea0:	000083cd 	.word	0x000083cd

00008ea4 <SERCOM0_2_Handler>:
{
    8ea4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    8ea6:	4b02      	ldr	r3, [pc, #8]	; (8eb0 <SERCOM0_2_Handler+0xc>)
    8ea8:	6818      	ldr	r0, [r3, #0]
    8eaa:	4b02      	ldr	r3, [pc, #8]	; (8eb4 <SERCOM0_2_Handler+0x10>)
    8eac:	4798      	blx	r3
    8eae:	bd08      	pop	{r3, pc}
    8eb0:	20000a08 	.word	0x20000a08
    8eb4:	000083cd 	.word	0x000083cd

00008eb8 <SERCOM0_3_Handler>:
{
    8eb8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    8eba:	4b02      	ldr	r3, [pc, #8]	; (8ec4 <SERCOM0_3_Handler+0xc>)
    8ebc:	6818      	ldr	r0, [r3, #0]
    8ebe:	4b02      	ldr	r3, [pc, #8]	; (8ec8 <SERCOM0_3_Handler+0x10>)
    8ec0:	4798      	blx	r3
    8ec2:	bd08      	pop	{r3, pc}
    8ec4:	20000a08 	.word	0x20000a08
    8ec8:	000083cd 	.word	0x000083cd

00008ecc <SERCOM1_0_Handler>:
{
    8ecc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    8ece:	4b02      	ldr	r3, [pc, #8]	; (8ed8 <SERCOM1_0_Handler+0xc>)
    8ed0:	6858      	ldr	r0, [r3, #4]
    8ed2:	4b02      	ldr	r3, [pc, #8]	; (8edc <SERCOM1_0_Handler+0x10>)
    8ed4:	4798      	blx	r3
    8ed6:	bd08      	pop	{r3, pc}
    8ed8:	20000a08 	.word	0x20000a08
    8edc:	000083cd 	.word	0x000083cd

00008ee0 <SERCOM1_1_Handler>:
{
    8ee0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    8ee2:	4b02      	ldr	r3, [pc, #8]	; (8eec <SERCOM1_1_Handler+0xc>)
    8ee4:	6858      	ldr	r0, [r3, #4]
    8ee6:	4b02      	ldr	r3, [pc, #8]	; (8ef0 <SERCOM1_1_Handler+0x10>)
    8ee8:	4798      	blx	r3
    8eea:	bd08      	pop	{r3, pc}
    8eec:	20000a08 	.word	0x20000a08
    8ef0:	000083cd 	.word	0x000083cd

00008ef4 <SERCOM1_2_Handler>:
{
    8ef4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    8ef6:	4b02      	ldr	r3, [pc, #8]	; (8f00 <SERCOM1_2_Handler+0xc>)
    8ef8:	6858      	ldr	r0, [r3, #4]
    8efa:	4b02      	ldr	r3, [pc, #8]	; (8f04 <SERCOM1_2_Handler+0x10>)
    8efc:	4798      	blx	r3
    8efe:	bd08      	pop	{r3, pc}
    8f00:	20000a08 	.word	0x20000a08
    8f04:	000083cd 	.word	0x000083cd

00008f08 <SERCOM1_3_Handler>:
{
    8f08:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    8f0a:	4b02      	ldr	r3, [pc, #8]	; (8f14 <SERCOM1_3_Handler+0xc>)
    8f0c:	6858      	ldr	r0, [r3, #4]
    8f0e:	4b02      	ldr	r3, [pc, #8]	; (8f18 <SERCOM1_3_Handler+0x10>)
    8f10:	4798      	blx	r3
    8f12:	bd08      	pop	{r3, pc}
    8f14:	20000a08 	.word	0x20000a08
    8f18:	000083cd 	.word	0x000083cd

00008f1c <SERCOM3_0_Handler>:
{
    8f1c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    8f1e:	4b02      	ldr	r3, [pc, #8]	; (8f28 <SERCOM3_0_Handler+0xc>)
    8f20:	6898      	ldr	r0, [r3, #8]
    8f22:	4b02      	ldr	r3, [pc, #8]	; (8f2c <SERCOM3_0_Handler+0x10>)
    8f24:	4798      	blx	r3
    8f26:	bd08      	pop	{r3, pc}
    8f28:	20000a08 	.word	0x20000a08
    8f2c:	00008547 	.word	0x00008547

00008f30 <SERCOM3_1_Handler>:
{
    8f30:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    8f32:	4b02      	ldr	r3, [pc, #8]	; (8f3c <SERCOM3_1_Handler+0xc>)
    8f34:	6898      	ldr	r0, [r3, #8]
    8f36:	4b02      	ldr	r3, [pc, #8]	; (8f40 <SERCOM3_1_Handler+0x10>)
    8f38:	4798      	blx	r3
    8f3a:	bd08      	pop	{r3, pc}
    8f3c:	20000a08 	.word	0x20000a08
    8f40:	00008547 	.word	0x00008547

00008f44 <SERCOM3_2_Handler>:
{
    8f44:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    8f46:	4b02      	ldr	r3, [pc, #8]	; (8f50 <SERCOM3_2_Handler+0xc>)
    8f48:	6898      	ldr	r0, [r3, #8]
    8f4a:	4b02      	ldr	r3, [pc, #8]	; (8f54 <SERCOM3_2_Handler+0x10>)
    8f4c:	4798      	blx	r3
    8f4e:	bd08      	pop	{r3, pc}
    8f50:	20000a08 	.word	0x20000a08
    8f54:	00008547 	.word	0x00008547

00008f58 <SERCOM3_3_Handler>:
{
    8f58:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    8f5a:	4b02      	ldr	r3, [pc, #8]	; (8f64 <SERCOM3_3_Handler+0xc>)
    8f5c:	6898      	ldr	r0, [r3, #8]
    8f5e:	4b02      	ldr	r3, [pc, #8]	; (8f68 <SERCOM3_3_Handler+0x10>)
    8f60:	4798      	blx	r3
    8f62:	bd08      	pop	{r3, pc}
    8f64:	20000a08 	.word	0x20000a08
    8f68:	00008547 	.word	0x00008547

00008f6c <SERCOM4_0_Handler>:
{
    8f6c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    8f6e:	4b02      	ldr	r3, [pc, #8]	; (8f78 <SERCOM4_0_Handler+0xc>)
    8f70:	68d8      	ldr	r0, [r3, #12]
    8f72:	4b02      	ldr	r3, [pc, #8]	; (8f7c <SERCOM4_0_Handler+0x10>)
    8f74:	4798      	blx	r3
    8f76:	bd08      	pop	{r3, pc}
    8f78:	20000a08 	.word	0x20000a08
    8f7c:	000083cd 	.word	0x000083cd

00008f80 <SERCOM4_1_Handler>:
{
    8f80:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    8f82:	4b02      	ldr	r3, [pc, #8]	; (8f8c <SERCOM4_1_Handler+0xc>)
    8f84:	68d8      	ldr	r0, [r3, #12]
    8f86:	4b02      	ldr	r3, [pc, #8]	; (8f90 <SERCOM4_1_Handler+0x10>)
    8f88:	4798      	blx	r3
    8f8a:	bd08      	pop	{r3, pc}
    8f8c:	20000a08 	.word	0x20000a08
    8f90:	000083cd 	.word	0x000083cd

00008f94 <SERCOM4_2_Handler>:
{
    8f94:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    8f96:	4b02      	ldr	r3, [pc, #8]	; (8fa0 <SERCOM4_2_Handler+0xc>)
    8f98:	68d8      	ldr	r0, [r3, #12]
    8f9a:	4b02      	ldr	r3, [pc, #8]	; (8fa4 <SERCOM4_2_Handler+0x10>)
    8f9c:	4798      	blx	r3
    8f9e:	bd08      	pop	{r3, pc}
    8fa0:	20000a08 	.word	0x20000a08
    8fa4:	000083cd 	.word	0x000083cd

00008fa8 <SERCOM4_3_Handler>:
{
    8fa8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    8faa:	4b02      	ldr	r3, [pc, #8]	; (8fb4 <SERCOM4_3_Handler+0xc>)
    8fac:	68d8      	ldr	r0, [r3, #12]
    8fae:	4b02      	ldr	r3, [pc, #8]	; (8fb8 <SERCOM4_3_Handler+0x10>)
    8fb0:	4798      	blx	r3
    8fb2:	bd08      	pop	{r3, pc}
    8fb4:	20000a08 	.word	0x20000a08
    8fb8:	000083cd 	.word	0x000083cd

00008fbc <SERCOM5_0_Handler>:
{
    8fbc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8fbe:	4b02      	ldr	r3, [pc, #8]	; (8fc8 <SERCOM5_0_Handler+0xc>)
    8fc0:	6918      	ldr	r0, [r3, #16]
    8fc2:	4b02      	ldr	r3, [pc, #8]	; (8fcc <SERCOM5_0_Handler+0x10>)
    8fc4:	4798      	blx	r3
    8fc6:	bd08      	pop	{r3, pc}
    8fc8:	20000a08 	.word	0x20000a08
    8fcc:	00008829 	.word	0x00008829

00008fd0 <SERCOM5_1_Handler>:
{
    8fd0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8fd2:	4b02      	ldr	r3, [pc, #8]	; (8fdc <SERCOM5_1_Handler+0xc>)
    8fd4:	6918      	ldr	r0, [r3, #16]
    8fd6:	4b02      	ldr	r3, [pc, #8]	; (8fe0 <SERCOM5_1_Handler+0x10>)
    8fd8:	4798      	blx	r3
    8fda:	bd08      	pop	{r3, pc}
    8fdc:	20000a08 	.word	0x20000a08
    8fe0:	00008829 	.word	0x00008829

00008fe4 <SERCOM5_2_Handler>:
{
    8fe4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8fe6:	4b02      	ldr	r3, [pc, #8]	; (8ff0 <SERCOM5_2_Handler+0xc>)
    8fe8:	6918      	ldr	r0, [r3, #16]
    8fea:	4b02      	ldr	r3, [pc, #8]	; (8ff4 <SERCOM5_2_Handler+0x10>)
    8fec:	4798      	blx	r3
    8fee:	bd08      	pop	{r3, pc}
    8ff0:	20000a08 	.word	0x20000a08
    8ff4:	00008829 	.word	0x00008829

00008ff8 <SERCOM5_3_Handler>:
{
    8ff8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8ffa:	4b02      	ldr	r3, [pc, #8]	; (9004 <SERCOM5_3_Handler+0xc>)
    8ffc:	6918      	ldr	r0, [r3, #16]
    8ffe:	4b02      	ldr	r3, [pc, #8]	; (9008 <SERCOM5_3_Handler+0x10>)
    9000:	4798      	blx	r3
    9002:	bd08      	pop	{r3, pc}
    9004:	20000a08 	.word	0x20000a08
    9008:	00008829 	.word	0x00008829

0000900c <SERCOM6_0_Handler>:
{
    900c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    900e:	4b02      	ldr	r3, [pc, #8]	; (9018 <SERCOM6_0_Handler+0xc>)
    9010:	6958      	ldr	r0, [r3, #20]
    9012:	4b02      	ldr	r3, [pc, #8]	; (901c <SERCOM6_0_Handler+0x10>)
    9014:	4798      	blx	r3
    9016:	bd08      	pop	{r3, pc}
    9018:	20000a08 	.word	0x20000a08
    901c:	000083cd 	.word	0x000083cd

00009020 <SERCOM6_1_Handler>:
{
    9020:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    9022:	4b02      	ldr	r3, [pc, #8]	; (902c <SERCOM6_1_Handler+0xc>)
    9024:	6958      	ldr	r0, [r3, #20]
    9026:	4b02      	ldr	r3, [pc, #8]	; (9030 <SERCOM6_1_Handler+0x10>)
    9028:	4798      	blx	r3
    902a:	bd08      	pop	{r3, pc}
    902c:	20000a08 	.word	0x20000a08
    9030:	000083cd 	.word	0x000083cd

00009034 <SERCOM6_2_Handler>:
{
    9034:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    9036:	4b02      	ldr	r3, [pc, #8]	; (9040 <SERCOM6_2_Handler+0xc>)
    9038:	6958      	ldr	r0, [r3, #20]
    903a:	4b02      	ldr	r3, [pc, #8]	; (9044 <SERCOM6_2_Handler+0x10>)
    903c:	4798      	blx	r3
    903e:	bd08      	pop	{r3, pc}
    9040:	20000a08 	.word	0x20000a08
    9044:	000083cd 	.word	0x000083cd

00009048 <SERCOM6_3_Handler>:
{
    9048:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    904a:	4b02      	ldr	r3, [pc, #8]	; (9054 <SERCOM6_3_Handler+0xc>)
    904c:	6958      	ldr	r0, [r3, #20]
    904e:	4b02      	ldr	r3, [pc, #8]	; (9058 <SERCOM6_3_Handler+0x10>)
    9050:	4798      	blx	r3
    9052:	bd08      	pop	{r3, pc}
    9054:	20000a08 	.word	0x20000a08
    9058:	000083cd 	.word	0x000083cd

0000905c <_spi_m_sync_init>:
{
    905c:	b570      	push	{r4, r5, r6, lr}
    905e:	4606      	mov	r6, r0
    9060:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    9062:	4608      	mov	r0, r1
    9064:	4b5d      	ldr	r3, [pc, #372]	; (91dc <_spi_m_sync_init+0x180>)
    9066:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    9068:	2803      	cmp	r0, #3
    906a:	d00c      	beq.n	9086 <_spi_m_sync_init+0x2a>
    906c:	2807      	cmp	r0, #7
    906e:	bf08      	it	eq
    9070:	2301      	moveq	r3, #1
    9072:	d009      	beq.n	9088 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    9074:	2e00      	cmp	r6, #0
    9076:	f000 809f 	beq.w	91b8 <_spi_m_sync_init+0x15c>
    907a:	2c00      	cmp	r4, #0
    907c:	f040 80a5 	bne.w	91ca <_spi_m_sync_init+0x16e>
	return NULL;
    9080:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    9082:	2000      	movs	r0, #0
    9084:	e009      	b.n	909a <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    9086:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    9088:	4d55      	ldr	r5, [pc, #340]	; (91e0 <_spi_m_sync_init+0x184>)
    908a:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    908e:	441d      	add	r5, r3
	ASSERT(dev && hw);
    9090:	2e00      	cmp	r6, #0
    9092:	d0f6      	beq.n	9082 <_spi_m_sync_init+0x26>
    9094:	2001      	movs	r0, #1
    9096:	2c00      	cmp	r4, #0
    9098:	d0f3      	beq.n	9082 <_spi_m_sync_init+0x26>
    909a:	f640 226e 	movw	r2, #2670	; 0xa6e
    909e:	4951      	ldr	r1, [pc, #324]	; (91e4 <_spi_m_sync_init+0x188>)
    90a0:	4b51      	ldr	r3, [pc, #324]	; (91e8 <_spi_m_sync_init+0x18c>)
    90a2:	4798      	blx	r3
	if (regs == NULL) {
    90a4:	2d00      	cmp	r5, #0
    90a6:	f000 8084 	beq.w	91b2 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    90aa:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    90ac:	f013 0f01 	tst.w	r3, #1
    90b0:	d11d      	bne.n	90ee <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    90b2:	682b      	ldr	r3, [r5, #0]
    90b4:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    90b8:	69e3      	ldr	r3, [r4, #28]
    90ba:	f013 0f03 	tst.w	r3, #3
    90be:	d1fb      	bne.n	90b8 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    90c0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    90c2:	f013 0f02 	tst.w	r3, #2
    90c6:	d00b      	beq.n	90e0 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    90c8:	6823      	ldr	r3, [r4, #0]
    90ca:	f023 0302 	bic.w	r3, r3, #2
    90ce:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    90d0:	69e3      	ldr	r3, [r4, #28]
    90d2:	f013 0f03 	tst.w	r3, #3
    90d6:	d1fb      	bne.n	90d0 <_spi_m_sync_init+0x74>
    90d8:	69e3      	ldr	r3, [r4, #28]
    90da:	f013 0f02 	tst.w	r3, #2
    90de:	d1fb      	bne.n	90d8 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    90e0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    90e4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    90e6:	69e3      	ldr	r3, [r4, #28]
    90e8:	f013 0f03 	tst.w	r3, #3
    90ec:	d1fb      	bne.n	90e6 <_spi_m_sync_init+0x8a>
    90ee:	69e3      	ldr	r3, [r4, #28]
    90f0:	f013 0f01 	tst.w	r3, #1
    90f4:	d1fb      	bne.n	90ee <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    90f6:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    90f8:	682b      	ldr	r3, [r5, #0]
    90fa:	f003 031c 	and.w	r3, r3, #28
    90fe:	2b08      	cmp	r3, #8
    9100:	d02e      	beq.n	9160 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    9102:	f44f 6217 	mov.w	r2, #2416	; 0x970
    9106:	4937      	ldr	r1, [pc, #220]	; (91e4 <_spi_m_sync_init+0x188>)
    9108:	1c20      	adds	r0, r4, #0
    910a:	bf18      	it	ne
    910c:	2001      	movne	r0, #1
    910e:	4b36      	ldr	r3, [pc, #216]	; (91e8 <_spi_m_sync_init+0x18c>)
    9110:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    9112:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    9114:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    9118:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    911c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    911e:	69e3      	ldr	r3, [r4, #28]
    9120:	f013 0f03 	tst.w	r3, #3
    9124:	d1fb      	bne.n	911e <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    9126:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    9128:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    912c:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    9130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    9134:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    9136:	69e3      	ldr	r3, [r4, #28]
    9138:	f013 0f17 	tst.w	r3, #23
    913c:	d1fb      	bne.n	9136 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    913e:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    9140:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    9142:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    9144:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    9148:	686b      	ldr	r3, [r5, #4]
    914a:	f003 0307 	and.w	r3, r3, #7
    914e:	2b00      	cmp	r3, #0
    9150:	bf0c      	ite	eq
    9152:	2301      	moveq	r3, #1
    9154:	2302      	movne	r3, #2
    9156:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    9158:	89eb      	ldrh	r3, [r5, #14]
    915a:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    915c:	2000      	movs	r0, #0
    915e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    9160:	f640 1284 	movw	r2, #2436	; 0x984
    9164:	491f      	ldr	r1, [pc, #124]	; (91e4 <_spi_m_sync_init+0x188>)
    9166:	1c20      	adds	r0, r4, #0
    9168:	bf18      	it	ne
    916a:	2001      	movne	r0, #1
    916c:	4b1e      	ldr	r3, [pc, #120]	; (91e8 <_spi_m_sync_init+0x18c>)
    916e:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    9170:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    9172:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    9176:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    917a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    917c:	69e3      	ldr	r3, [r4, #28]
    917e:	f013 0f03 	tst.w	r3, #3
    9182:	d1fb      	bne.n	917c <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    9184:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    9186:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    918a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    918e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9192:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    9196:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    9198:	69e3      	ldr	r3, [r4, #28]
    919a:	f013 0f17 	tst.w	r3, #23
    919e:	d1fb      	bne.n	9198 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    91a0:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    91a2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    91a4:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    91a6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    91aa:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    91ac:	2b00      	cmp	r3, #0
    91ae:	d1fc      	bne.n	91aa <_spi_m_sync_init+0x14e>
    91b0:	e7ca      	b.n	9148 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    91b2:	f06f 000c 	mvn.w	r0, #12
    91b6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    91b8:	f640 226e 	movw	r2, #2670	; 0xa6e
    91bc:	4909      	ldr	r1, [pc, #36]	; (91e4 <_spi_m_sync_init+0x188>)
    91be:	2000      	movs	r0, #0
    91c0:	4b09      	ldr	r3, [pc, #36]	; (91e8 <_spi_m_sync_init+0x18c>)
    91c2:	4798      	blx	r3
		return ERR_INVALID_ARG;
    91c4:	f06f 000c 	mvn.w	r0, #12
    91c8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    91ca:	f640 226e 	movw	r2, #2670	; 0xa6e
    91ce:	4905      	ldr	r1, [pc, #20]	; (91e4 <_spi_m_sync_init+0x188>)
    91d0:	2001      	movs	r0, #1
    91d2:	4b05      	ldr	r3, [pc, #20]	; (91e8 <_spi_m_sync_init+0x18c>)
    91d4:	4798      	blx	r3
		return ERR_INVALID_ARG;
    91d6:	f06f 000c 	mvn.w	r0, #12
    91da:	bd70      	pop	{r4, r5, r6, pc}
    91dc:	00008389 	.word	0x00008389
    91e0:	0000f3b4 	.word	0x0000f3b4
    91e4:	0000f3d8 	.word	0x0000f3d8
    91e8:	000072b1 	.word	0x000072b1

000091ec <_spi_m_async_init>:
{
    91ec:	b538      	push	{r3, r4, r5, lr}
    91ee:	4604      	mov	r4, r0
    91f0:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    91f2:	4b15      	ldr	r3, [pc, #84]	; (9248 <_spi_m_async_init+0x5c>)
    91f4:	4798      	blx	r3
	if (rc < 0) {
    91f6:	2800      	cmp	r0, #0
    91f8:	db24      	blt.n	9244 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    91fa:	4621      	mov	r1, r4
    91fc:	4628      	mov	r0, r5
    91fe:	4b13      	ldr	r3, [pc, #76]	; (924c <_spi_m_async_init+0x60>)
    9200:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    9202:	2300      	movs	r3, #0
    9204:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    9206:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    9208:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    920a:	4628      	mov	r0, r5
    920c:	4b10      	ldr	r3, [pc, #64]	; (9250 <_spi_m_async_init+0x64>)
    920e:	4798      	blx	r3
    9210:	1d01      	adds	r1, r0, #4
    9212:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9214:	2401      	movs	r4, #1
    9216:	f000 021f 	and.w	r2, r0, #31
    921a:	fa04 f202 	lsl.w	r2, r4, r2
    921e:	0943      	lsrs	r3, r0, #5
    9220:	009b      	lsls	r3, r3, #2
    9222:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    9226:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    922a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    922e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9232:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9236:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    923a:	3001      	adds	r0, #1
    923c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    923e:	4281      	cmp	r1, r0
    9240:	d1e9      	bne.n	9216 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    9242:	2000      	movs	r0, #0
}
    9244:	bd38      	pop	{r3, r4, r5, pc}
    9246:	bf00      	nop
    9248:	0000905d 	.word	0x0000905d
    924c:	0000843d 	.word	0x0000843d
    9250:	0000849d 	.word	0x0000849d

00009254 <_spi_m_async_enable>:
{
    9254:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    9256:	4604      	mov	r4, r0
    9258:	b160      	cbz	r0, 9274 <_spi_m_async_enable+0x20>
    925a:	6800      	ldr	r0, [r0, #0]
    925c:	3000      	adds	r0, #0
    925e:	bf18      	it	ne
    9260:	2001      	movne	r0, #1
    9262:	f640 22db 	movw	r2, #2779	; 0xadb
    9266:	4904      	ldr	r1, [pc, #16]	; (9278 <_spi_m_async_enable+0x24>)
    9268:	4b04      	ldr	r3, [pc, #16]	; (927c <_spi_m_async_enable+0x28>)
    926a:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    926c:	6820      	ldr	r0, [r4, #0]
    926e:	4b04      	ldr	r3, [pc, #16]	; (9280 <_spi_m_async_enable+0x2c>)
    9270:	4798      	blx	r3
}
    9272:	bd10      	pop	{r4, pc}
    9274:	2000      	movs	r0, #0
    9276:	e7f4      	b.n	9262 <_spi_m_async_enable+0xe>
    9278:	0000f3d8 	.word	0x0000f3d8
    927c:	000072b1 	.word	0x000072b1
    9280:	000084d5 	.word	0x000084d5

00009284 <_spi_m_async_set_mode>:
{
    9284:	b538      	push	{r3, r4, r5, lr}
    9286:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    9288:	4604      	mov	r4, r0
    928a:	b168      	cbz	r0, 92a8 <_spi_m_async_set_mode+0x24>
    928c:	6800      	ldr	r0, [r0, #0]
    928e:	3000      	adds	r0, #0
    9290:	bf18      	it	ne
    9292:	2001      	movne	r0, #1
    9294:	f640 320c 	movw	r2, #2828	; 0xb0c
    9298:	4904      	ldr	r1, [pc, #16]	; (92ac <_spi_m_async_set_mode+0x28>)
    929a:	4b05      	ldr	r3, [pc, #20]	; (92b0 <_spi_m_async_set_mode+0x2c>)
    929c:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    929e:	4629      	mov	r1, r5
    92a0:	6820      	ldr	r0, [r4, #0]
    92a2:	4b04      	ldr	r3, [pc, #16]	; (92b4 <_spi_m_async_set_mode+0x30>)
    92a4:	4798      	blx	r3
}
    92a6:	bd38      	pop	{r3, r4, r5, pc}
    92a8:	2000      	movs	r0, #0
    92aa:	e7f3      	b.n	9294 <_spi_m_async_set_mode+0x10>
    92ac:	0000f3d8 	.word	0x0000f3d8
    92b0:	000072b1 	.word	0x000072b1
    92b4:	00008515 	.word	0x00008515

000092b8 <_spi_m_async_set_baudrate>:
{
    92b8:	b538      	push	{r3, r4, r5, lr}
    92ba:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    92bc:	4605      	mov	r5, r0
    92be:	b198      	cbz	r0, 92e8 <_spi_m_async_set_baudrate+0x30>
    92c0:	6800      	ldr	r0, [r0, #0]
    92c2:	3000      	adds	r0, #0
    92c4:	bf18      	it	ne
    92c6:	2001      	movne	r0, #1
    92c8:	f640 323b 	movw	r2, #2875	; 0xb3b
    92cc:	4907      	ldr	r1, [pc, #28]	; (92ec <_spi_m_async_set_baudrate+0x34>)
    92ce:	4b08      	ldr	r3, [pc, #32]	; (92f0 <_spi_m_async_set_baudrate+0x38>)
    92d0:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    92d2:	682b      	ldr	r3, [r5, #0]
    92d4:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    92d6:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    92da:	bf03      	ittte	eq
    92dc:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    92de:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    92e0:	2000      	moveq	r0, #0
		return ERR_BUSY;
    92e2:	f06f 0003 	mvnne.w	r0, #3
}
    92e6:	bd38      	pop	{r3, r4, r5, pc}
    92e8:	2000      	movs	r0, #0
    92ea:	e7ed      	b.n	92c8 <_spi_m_async_set_baudrate+0x10>
    92ec:	0000f3d8 	.word	0x0000f3d8
    92f0:	000072b1 	.word	0x000072b1

000092f4 <_spi_m_async_enable_tx>:
{
    92f4:	b538      	push	{r3, r4, r5, lr}
    92f6:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    92f8:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    92fa:	b160      	cbz	r0, 9316 <_spi_m_async_enable_tx+0x22>
    92fc:	1c20      	adds	r0, r4, #0
    92fe:	bf18      	it	ne
    9300:	2001      	movne	r0, #1
    9302:	f640 32fe 	movw	r2, #3070	; 0xbfe
    9306:	4906      	ldr	r1, [pc, #24]	; (9320 <_spi_m_async_enable_tx+0x2c>)
    9308:	4b06      	ldr	r3, [pc, #24]	; (9324 <_spi_m_async_enable_tx+0x30>)
    930a:	4798      	blx	r3
	if (state) {
    930c:	b92d      	cbnz	r5, 931a <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    930e:	2301      	movs	r3, #1
    9310:	7523      	strb	r3, [r4, #20]
}
    9312:	2000      	movs	r0, #0
    9314:	bd38      	pop	{r3, r4, r5, pc}
    9316:	2000      	movs	r0, #0
    9318:	e7f3      	b.n	9302 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    931a:	2301      	movs	r3, #1
    931c:	75a3      	strb	r3, [r4, #22]
    931e:	e7f8      	b.n	9312 <_spi_m_async_enable_tx+0x1e>
    9320:	0000f3d8 	.word	0x0000f3d8
    9324:	000072b1 	.word	0x000072b1

00009328 <_spi_m_async_enable_rx>:
{
    9328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    932a:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    932c:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    932e:	4e0c      	ldr	r6, [pc, #48]	; (9360 <_spi_m_async_enable_rx+0x38>)
    9330:	f640 4212 	movw	r2, #3090	; 0xc12
    9334:	4631      	mov	r1, r6
    9336:	3000      	adds	r0, #0
    9338:	bf18      	it	ne
    933a:	2001      	movne	r0, #1
    933c:	4d09      	ldr	r5, [pc, #36]	; (9364 <_spi_m_async_enable_rx+0x3c>)
    933e:	47a8      	blx	r5
	ASSERT(hw);
    9340:	f640 4213 	movw	r2, #3091	; 0xc13
    9344:	4631      	mov	r1, r6
    9346:	1c20      	adds	r0, r4, #0
    9348:	bf18      	it	ne
    934a:	2001      	movne	r0, #1
    934c:	47a8      	blx	r5
	if (state) {
    934e:	b91f      	cbnz	r7, 9358 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    9350:	2304      	movs	r3, #4
    9352:	7523      	strb	r3, [r4, #20]
}
    9354:	2000      	movs	r0, #0
    9356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    9358:	2304      	movs	r3, #4
    935a:	75a3      	strb	r3, [r4, #22]
    935c:	e7fa      	b.n	9354 <_spi_m_async_enable_rx+0x2c>
    935e:	bf00      	nop
    9360:	0000f3d8 	.word	0x0000f3d8
    9364:	000072b1 	.word	0x000072b1

00009368 <_spi_m_async_enable_tx_complete>:
{
    9368:	b538      	push	{r3, r4, r5, lr}
    936a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    936c:	4604      	mov	r4, r0
    936e:	b170      	cbz	r0, 938e <_spi_m_async_enable_tx_complete+0x26>
    9370:	6800      	ldr	r0, [r0, #0]
    9372:	3000      	adds	r0, #0
    9374:	bf18      	it	ne
    9376:	2001      	movne	r0, #1
    9378:	f640 4225 	movw	r2, #3109	; 0xc25
    937c:	4907      	ldr	r1, [pc, #28]	; (939c <_spi_m_async_enable_tx_complete+0x34>)
    937e:	4b08      	ldr	r3, [pc, #32]	; (93a0 <_spi_m_async_enable_tx_complete+0x38>)
    9380:	4798      	blx	r3
	if (state) {
    9382:	b935      	cbnz	r5, 9392 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    9384:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    9386:	2202      	movs	r2, #2
    9388:	751a      	strb	r2, [r3, #20]
}
    938a:	2000      	movs	r0, #0
    938c:	bd38      	pop	{r3, r4, r5, pc}
    938e:	2000      	movs	r0, #0
    9390:	e7f2      	b.n	9378 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    9392:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    9394:	2202      	movs	r2, #2
    9396:	759a      	strb	r2, [r3, #22]
    9398:	e7f7      	b.n	938a <_spi_m_async_enable_tx_complete+0x22>
    939a:	bf00      	nop
    939c:	0000f3d8 	.word	0x0000f3d8
    93a0:	000072b1 	.word	0x000072b1

000093a4 <_spi_m_async_write_one>:
{
    93a4:	b538      	push	{r3, r4, r5, lr}
    93a6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    93a8:	4604      	mov	r4, r0
    93aa:	b160      	cbz	r0, 93c6 <_spi_m_async_write_one+0x22>
    93ac:	6800      	ldr	r0, [r0, #0]
    93ae:	3000      	adds	r0, #0
    93b0:	bf18      	it	ne
    93b2:	2001      	movne	r0, #1
    93b4:	f640 4237 	movw	r2, #3127	; 0xc37
    93b8:	4904      	ldr	r1, [pc, #16]	; (93cc <_spi_m_async_write_one+0x28>)
    93ba:	4b05      	ldr	r3, [pc, #20]	; (93d0 <_spi_m_async_write_one+0x2c>)
    93bc:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    93be:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    93c0:	629d      	str	r5, [r3, #40]	; 0x28
}
    93c2:	2000      	movs	r0, #0
    93c4:	bd38      	pop	{r3, r4, r5, pc}
    93c6:	2000      	movs	r0, #0
    93c8:	e7f4      	b.n	93b4 <_spi_m_async_write_one+0x10>
    93ca:	bf00      	nop
    93cc:	0000f3d8 	.word	0x0000f3d8
    93d0:	000072b1 	.word	0x000072b1

000093d4 <_spi_m_async_read_one>:
{
    93d4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    93d6:	4604      	mov	r4, r0
    93d8:	b160      	cbz	r0, 93f4 <_spi_m_async_read_one+0x20>
    93da:	6800      	ldr	r0, [r0, #0]
    93dc:	3000      	adds	r0, #0
    93de:	bf18      	it	ne
    93e0:	2001      	movne	r0, #1
    93e2:	f640 4252 	movw	r2, #3154	; 0xc52
    93e6:	4904      	ldr	r1, [pc, #16]	; (93f8 <_spi_m_async_read_one+0x24>)
    93e8:	4b04      	ldr	r3, [pc, #16]	; (93fc <_spi_m_async_read_one+0x28>)
    93ea:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    93ec:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    93ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    93f0:	b280      	uxth	r0, r0
    93f2:	bd10      	pop	{r4, pc}
    93f4:	2000      	movs	r0, #0
    93f6:	e7f4      	b.n	93e2 <_spi_m_async_read_one+0xe>
    93f8:	0000f3d8 	.word	0x0000f3d8
    93fc:	000072b1 	.word	0x000072b1

00009400 <_spi_m_async_register_callback>:
{
    9400:	b570      	push	{r4, r5, r6, lr}
    9402:	460d      	mov	r5, r1
    9404:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    9406:	4604      	mov	r4, r0
    9408:	b168      	cbz	r0, 9426 <_spi_m_async_register_callback+0x26>
    940a:	2903      	cmp	r1, #3
    940c:	bf8c      	ite	hi
    940e:	2000      	movhi	r0, #0
    9410:	2001      	movls	r0, #1
    9412:	f640 426b 	movw	r2, #3179	; 0xc6b
    9416:	4905      	ldr	r1, [pc, #20]	; (942c <_spi_m_async_register_callback+0x2c>)
    9418:	4b05      	ldr	r3, [pc, #20]	; (9430 <_spi_m_async_register_callback+0x30>)
    941a:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    941c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    9420:	60a6      	str	r6, [r4, #8]
}
    9422:	2000      	movs	r0, #0
    9424:	bd70      	pop	{r4, r5, r6, pc}
    9426:	2000      	movs	r0, #0
    9428:	e7f3      	b.n	9412 <_spi_m_async_register_callback+0x12>
    942a:	bf00      	nop
    942c:	0000f3d8 	.word	0x0000f3d8
    9430:	000072b1 	.word	0x000072b1

00009434 <_spi_m_async_set_irq_state>:
{
    9434:	b570      	push	{r4, r5, r6, lr}
    9436:	460c      	mov	r4, r1
    9438:	4615      	mov	r5, r2
	ASSERT(device);
    943a:	4606      	mov	r6, r0
    943c:	f640 42ac 	movw	r2, #3244	; 0xcac
    9440:	4908      	ldr	r1, [pc, #32]	; (9464 <_spi_m_async_set_irq_state+0x30>)
    9442:	3000      	adds	r0, #0
    9444:	bf18      	it	ne
    9446:	2001      	movne	r0, #1
    9448:	4b07      	ldr	r3, [pc, #28]	; (9468 <_spi_m_async_set_irq_state+0x34>)
    944a:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    944c:	2c03      	cmp	r4, #3
    944e:	d000      	beq.n	9452 <_spi_m_async_set_irq_state+0x1e>
    9450:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    9452:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    9454:	b115      	cbz	r5, 945c <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    9456:	2280      	movs	r2, #128	; 0x80
    9458:	759a      	strb	r2, [r3, #22]
}
    945a:	e7f9      	b.n	9450 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    945c:	2280      	movs	r2, #128	; 0x80
    945e:	751a      	strb	r2, [r3, #20]
    9460:	bd70      	pop	{r4, r5, r6, pc}
    9462:	bf00      	nop
    9464:	0000f3d8 	.word	0x0000f3d8
    9468:	000072b1 	.word	0x000072b1

0000946c <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    946c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9470:	4605      	mov	r5, r0
    9472:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    9474:	4608      	mov	r0, r1
    9476:	4b52      	ldr	r3, [pc, #328]	; (95c0 <_spi_m_dma_init+0x154>)
    9478:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    947a:	2803      	cmp	r0, #3
    947c:	d00c      	beq.n	9498 <_spi_m_dma_init+0x2c>
    947e:	2807      	cmp	r0, #7
    9480:	bf08      	it	eq
    9482:	2301      	moveq	r3, #1
    9484:	d009      	beq.n	949a <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    9486:	2d00      	cmp	r5, #0
    9488:	f000 8086 	beq.w	9598 <_spi_m_dma_init+0x12c>
    948c:	2c00      	cmp	r4, #0
    948e:	f040 808d 	bne.w	95ac <_spi_m_dma_init+0x140>
	return NULL;
    9492:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    9494:	2000      	movs	r0, #0
    9496:	e009      	b.n	94ac <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    9498:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    949a:	4e4a      	ldr	r6, [pc, #296]	; (95c4 <_spi_m_dma_init+0x158>)
    949c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    94a0:	441e      	add	r6, r3
	ASSERT(dev && hw);
    94a2:	2d00      	cmp	r5, #0
    94a4:	d0f6      	beq.n	9494 <_spi_m_dma_init+0x28>
    94a6:	2001      	movs	r0, #1
    94a8:	2c00      	cmp	r4, #0
    94aa:	d0f3      	beq.n	9494 <_spi_m_dma_init+0x28>
    94ac:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    94b0:	4945      	ldr	r1, [pc, #276]	; (95c8 <_spi_m_dma_init+0x15c>)
    94b2:	4b46      	ldr	r3, [pc, #280]	; (95cc <_spi_m_dma_init+0x160>)
    94b4:	4798      	blx	r3

	if (regs == NULL) {
    94b6:	2e00      	cmp	r6, #0
    94b8:	d06a      	beq.n	9590 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    94ba:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    94bc:	f013 0f01 	tst.w	r3, #1
    94c0:	d11d      	bne.n	94fe <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    94c2:	6833      	ldr	r3, [r6, #0]
    94c4:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    94c8:	69e3      	ldr	r3, [r4, #28]
    94ca:	f013 0f03 	tst.w	r3, #3
    94ce:	d1fb      	bne.n	94c8 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    94d0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    94d2:	f013 0f02 	tst.w	r3, #2
    94d6:	d00b      	beq.n	94f0 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    94d8:	6823      	ldr	r3, [r4, #0]
    94da:	f023 0302 	bic.w	r3, r3, #2
    94de:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    94e0:	69e3      	ldr	r3, [r4, #28]
    94e2:	f013 0f03 	tst.w	r3, #3
    94e6:	d1fb      	bne.n	94e0 <_spi_m_dma_init+0x74>
    94e8:	69e3      	ldr	r3, [r4, #28]
    94ea:	f013 0f02 	tst.w	r3, #2
    94ee:	d1fb      	bne.n	94e8 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    94f0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    94f4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    94f6:	69e3      	ldr	r3, [r4, #28]
    94f8:	f013 0f03 	tst.w	r3, #3
    94fc:	d1fb      	bne.n	94f6 <_spi_m_dma_init+0x8a>
    94fe:	69e3      	ldr	r3, [r4, #28]
    9500:	f013 0f01 	tst.w	r3, #1
    9504:	d1fb      	bne.n	94fe <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    9506:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    9508:	f44f 6217 	mov.w	r2, #2416	; 0x970
    950c:	492e      	ldr	r1, [pc, #184]	; (95c8 <_spi_m_dma_init+0x15c>)
    950e:	1c20      	adds	r0, r4, #0
    9510:	bf18      	it	ne
    9512:	2001      	movne	r0, #1
    9514:	4b2d      	ldr	r3, [pc, #180]	; (95cc <_spi_m_dma_init+0x160>)
    9516:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    9518:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    951a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    951e:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    9522:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    9524:	69e3      	ldr	r3, [r4, #28]
    9526:	f013 0f03 	tst.w	r3, #3
    952a:	d1fb      	bne.n	9524 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    952c:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    952e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    9532:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    9536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    953a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    953c:	69e3      	ldr	r3, [r4, #28]
    953e:	f013 0f17 	tst.w	r3, #23
    9542:	d1fb      	bne.n	953c <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    9544:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    9546:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    9548:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    954a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    954e:	f105 0818 	add.w	r8, r5, #24
    9552:	4620      	mov	r0, r4
    9554:	4b1e      	ldr	r3, [pc, #120]	; (95d0 <_spi_m_dma_init+0x164>)
    9556:	4798      	blx	r3
    9558:	4601      	mov	r1, r0
    955a:	4640      	mov	r0, r8
    955c:	4f1d      	ldr	r7, [pc, #116]	; (95d4 <_spi_m_dma_init+0x168>)
    955e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    9560:	69ab      	ldr	r3, [r5, #24]
    9562:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    9564:	69ab      	ldr	r3, [r5, #24]
    9566:	4a1c      	ldr	r2, [pc, #112]	; (95d8 <_spi_m_dma_init+0x16c>)
    9568:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    956a:	69ab      	ldr	r3, [r5, #24]
    956c:	4e1b      	ldr	r6, [pc, #108]	; (95dc <_spi_m_dma_init+0x170>)
    956e:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    9570:	4620      	mov	r0, r4
    9572:	4b1b      	ldr	r3, [pc, #108]	; (95e0 <_spi_m_dma_init+0x174>)
    9574:	4798      	blx	r3
    9576:	4601      	mov	r1, r0
    9578:	4640      	mov	r0, r8
    957a:	47b8      	blx	r7
	dev->resource->back                 = dev;
    957c:	69ab      	ldr	r3, [r5, #24]
    957e:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    9580:	69ab      	ldr	r3, [r5, #24]
    9582:	4a18      	ldr	r2, [pc, #96]	; (95e4 <_spi_m_dma_init+0x178>)
    9584:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    9586:	69ab      	ldr	r3, [r5, #24]
    9588:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    958a:	2000      	movs	r0, #0
    958c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    9590:	f06f 000c 	mvn.w	r0, #12
    9594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    9598:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    959c:	490a      	ldr	r1, [pc, #40]	; (95c8 <_spi_m_dma_init+0x15c>)
    959e:	2000      	movs	r0, #0
    95a0:	4b0a      	ldr	r3, [pc, #40]	; (95cc <_spi_m_dma_init+0x160>)
    95a2:	4798      	blx	r3
		return ERR_INVALID_ARG;
    95a4:	f06f 000c 	mvn.w	r0, #12
    95a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    95ac:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    95b0:	4905      	ldr	r1, [pc, #20]	; (95c8 <_spi_m_dma_init+0x15c>)
    95b2:	2001      	movs	r0, #1
    95b4:	4b05      	ldr	r3, [pc, #20]	; (95cc <_spi_m_dma_init+0x160>)
    95b6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    95b8:	f06f 000c 	mvn.w	r0, #12
    95bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95c0:	00008389 	.word	0x00008389
    95c4:	0000f3b4 	.word	0x0000f3b4
    95c8:	0000f3d8 	.word	0x0000f3d8
    95cc:	000072b1 	.word	0x000072b1
    95d0:	000085a9 	.word	0x000085a9
    95d4:	00007b4d 	.word	0x00007b4d
    95d8:	000085bd 	.word	0x000085bd
    95dc:	000085d5 	.word	0x000085d5
    95e0:	00008595 	.word	0x00008595
    95e4:	000085c9 	.word	0x000085c9

000095e8 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    95e8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    95ea:	4604      	mov	r4, r0
    95ec:	b160      	cbz	r0, 9608 <_spi_m_dma_enable+0x20>
    95ee:	6800      	ldr	r0, [r0, #0]
    95f0:	3000      	adds	r0, #0
    95f2:	bf18      	it	ne
    95f4:	2001      	movne	r0, #1
    95f6:	f640 52c9 	movw	r2, #3529	; 0xdc9
    95fa:	4904      	ldr	r1, [pc, #16]	; (960c <_spi_m_dma_enable+0x24>)
    95fc:	4b04      	ldr	r3, [pc, #16]	; (9610 <_spi_m_dma_enable+0x28>)
    95fe:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    9600:	6820      	ldr	r0, [r4, #0]
    9602:	4b04      	ldr	r3, [pc, #16]	; (9614 <_spi_m_dma_enable+0x2c>)
    9604:	4798      	blx	r3
}
    9606:	bd10      	pop	{r4, pc}
    9608:	2000      	movs	r0, #0
    960a:	e7f4      	b.n	95f6 <_spi_m_dma_enable+0xe>
    960c:	0000f3d8 	.word	0x0000f3d8
    9610:	000072b1 	.word	0x000072b1
    9614:	000084b1 	.word	0x000084b1

00009618 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    9618:	b570      	push	{r4, r5, r6, lr}
    961a:	4605      	mov	r5, r0
    961c:	4614      	mov	r4, r2
	switch (type) {
    961e:	2901      	cmp	r1, #1
    9620:	d00e      	beq.n	9640 <_spi_m_dma_register_callback+0x28>
    9622:	b111      	cbz	r1, 962a <_spi_m_dma_register_callback+0x12>
    9624:	2902      	cmp	r1, #2
    9626:	d016      	beq.n	9656 <_spi_m_dma_register_callback+0x3e>
    9628:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    962a:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    962c:	6800      	ldr	r0, [r0, #0]
    962e:	4b13      	ldr	r3, [pc, #76]	; (967c <_spi_m_dma_register_callback+0x64>)
    9630:	4798      	blx	r3
    9632:	1c22      	adds	r2, r4, #0
    9634:	bf18      	it	ne
    9636:	2201      	movne	r2, #1
    9638:	2100      	movs	r1, #0
    963a:	4b11      	ldr	r3, [pc, #68]	; (9680 <_spi_m_dma_register_callback+0x68>)
    963c:	4798      	blx	r3
		break;
    963e:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    9640:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    9642:	6800      	ldr	r0, [r0, #0]
    9644:	4b0f      	ldr	r3, [pc, #60]	; (9684 <_spi_m_dma_register_callback+0x6c>)
    9646:	4798      	blx	r3
    9648:	1c22      	adds	r2, r4, #0
    964a:	bf18      	it	ne
    964c:	2201      	movne	r2, #1
    964e:	2100      	movs	r1, #0
    9650:	4b0b      	ldr	r3, [pc, #44]	; (9680 <_spi_m_dma_register_callback+0x68>)
    9652:	4798      	blx	r3
		break;
    9654:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    9656:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    9658:	6800      	ldr	r0, [r0, #0]
    965a:	4b0a      	ldr	r3, [pc, #40]	; (9684 <_spi_m_dma_register_callback+0x6c>)
    965c:	4798      	blx	r3
    965e:	3400      	adds	r4, #0
    9660:	bf18      	it	ne
    9662:	2401      	movne	r4, #1
    9664:	4622      	mov	r2, r4
    9666:	2101      	movs	r1, #1
    9668:	4e05      	ldr	r6, [pc, #20]	; (9680 <_spi_m_dma_register_callback+0x68>)
    966a:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    966c:	6828      	ldr	r0, [r5, #0]
    966e:	4b03      	ldr	r3, [pc, #12]	; (967c <_spi_m_dma_register_callback+0x64>)
    9670:	4798      	blx	r3
    9672:	4622      	mov	r2, r4
    9674:	2101      	movs	r1, #1
    9676:	47b0      	blx	r6
    9678:	bd70      	pop	{r4, r5, r6, pc}
    967a:	bf00      	nop
    967c:	00008595 	.word	0x00008595
    9680:	00007a25 	.word	0x00007a25
    9684:	000085a9 	.word	0x000085a9

00009688 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    9688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    968c:	4605      	mov	r5, r0
    968e:	4689      	mov	r9, r1
    9690:	4617      	mov	r7, r2
    9692:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    9694:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    9698:	4658      	mov	r0, fp
    969a:	4b46      	ldr	r3, [pc, #280]	; (97b4 <_spi_m_dma_transfer+0x12c>)
    969c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    969e:	2803      	cmp	r0, #3
    96a0:	d053      	beq.n	974a <_spi_m_dma_transfer+0xc2>
    96a2:	2807      	cmp	r0, #7
    96a4:	bf08      	it	eq
    96a6:	2201      	moveq	r2, #1
    96a8:	d050      	beq.n	974c <_spi_m_dma_transfer+0xc4>
	return NULL;
    96aa:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    96ae:	4658      	mov	r0, fp
    96b0:	4b41      	ldr	r3, [pc, #260]	; (97b8 <_spi_m_dma_transfer+0x130>)
    96b2:	4798      	blx	r3
    96b4:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    96b6:	4658      	mov	r0, fp
    96b8:	4b40      	ldr	r3, [pc, #256]	; (97bc <_spi_m_dma_transfer+0x134>)
    96ba:	4798      	blx	r3
    96bc:	4604      	mov	r4, r0

	if (rxbuf) {
    96be:	2f00      	cmp	r7, #0
    96c0:	d04b      	beq.n	975a <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    96c2:	2d00      	cmp	r5, #0
    96c4:	d047      	beq.n	9756 <_spi_m_dma_transfer+0xce>
    96c6:	f11b 0000 	adds.w	r0, fp, #0
    96ca:	bf18      	it	ne
    96cc:	2001      	movne	r0, #1
    96ce:	f640 5213 	movw	r2, #3347	; 0xd13
    96d2:	493b      	ldr	r1, [pc, #236]	; (97c0 <_spi_m_dma_transfer+0x138>)
    96d4:	4b3b      	ldr	r3, [pc, #236]	; (97c4 <_spi_m_dma_transfer+0x13c>)
    96d6:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    96d8:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    96da:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    96dc:	f013 0f04 	tst.w	r3, #4
    96e0:	d107      	bne.n	96f2 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    96e2:	6853      	ldr	r3, [r2, #4]
    96e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    96e8:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    96ea:	69d3      	ldr	r3, [r2, #28]
    96ec:	f013 0f17 	tst.w	r3, #23
    96f0:	d1fb      	bne.n	96ea <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    96f2:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    96f4:	3128      	adds	r1, #40	; 0x28
    96f6:	4630      	mov	r0, r6
    96f8:	4b33      	ldr	r3, [pc, #204]	; (97c8 <_spi_m_dma_transfer+0x140>)
    96fa:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    96fc:	4639      	mov	r1, r7
    96fe:	4630      	mov	r0, r6
    9700:	4b32      	ldr	r3, [pc, #200]	; (97cc <_spi_m_dma_transfer+0x144>)
    9702:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    9704:	4641      	mov	r1, r8
    9706:	4630      	mov	r0, r6
    9708:	4b31      	ldr	r3, [pc, #196]	; (97d0 <_spi_m_dma_transfer+0x148>)
    970a:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    970c:	2100      	movs	r1, #0
    970e:	4630      	mov	r0, r6
    9710:	4b30      	ldr	r3, [pc, #192]	; (97d4 <_spi_m_dma_transfer+0x14c>)
    9712:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    9714:	f1b9 0f00 	cmp.w	r9, #0
    9718:	d039      	beq.n	978e <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    971a:	4649      	mov	r1, r9
    971c:	4620      	mov	r0, r4
    971e:	4b2a      	ldr	r3, [pc, #168]	; (97c8 <_spi_m_dma_transfer+0x140>)
    9720:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    9722:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    9724:	3128      	adds	r1, #40	; 0x28
    9726:	4620      	mov	r0, r4
    9728:	4b28      	ldr	r3, [pc, #160]	; (97cc <_spi_m_dma_transfer+0x144>)
    972a:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    972c:	2101      	movs	r1, #1
    972e:	4620      	mov	r0, r4
    9730:	4b29      	ldr	r3, [pc, #164]	; (97d8 <_spi_m_dma_transfer+0x150>)
    9732:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    9734:	4641      	mov	r1, r8
    9736:	4620      	mov	r0, r4
    9738:	4b25      	ldr	r3, [pc, #148]	; (97d0 <_spi_m_dma_transfer+0x148>)
    973a:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    973c:	2100      	movs	r1, #0
    973e:	4620      	mov	r0, r4
    9740:	4b24      	ldr	r3, [pc, #144]	; (97d4 <_spi_m_dma_transfer+0x14c>)
    9742:	4798      	blx	r3

	return ERR_NONE;
}
    9744:	2000      	movs	r0, #0
    9746:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    974a:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    974c:	4b23      	ldr	r3, [pc, #140]	; (97dc <_spi_m_dma_transfer+0x154>)
    974e:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    9752:	4492      	add	sl, r2
    9754:	e7ab      	b.n	96ae <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    9756:	2000      	movs	r0, #0
    9758:	e7b9      	b.n	96ce <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    975a:	b1b5      	cbz	r5, 978a <_spi_m_dma_transfer+0x102>
    975c:	f11b 0000 	adds.w	r0, fp, #0
    9760:	bf18      	it	ne
    9762:	2001      	movne	r0, #1
    9764:	f640 521a 	movw	r2, #3354	; 0xd1a
    9768:	4915      	ldr	r1, [pc, #84]	; (97c0 <_spi_m_dma_transfer+0x138>)
    976a:	4b16      	ldr	r3, [pc, #88]	; (97c4 <_spi_m_dma_transfer+0x13c>)
    976c:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    976e:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    9770:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    9772:	f013 0f04 	tst.w	r3, #4
    9776:	d1cd      	bne.n	9714 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    9778:	6853      	ldr	r3, [r2, #4]
    977a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    977e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    9780:	69d3      	ldr	r3, [r2, #28]
    9782:	f013 0f17 	tst.w	r3, #23
    9786:	d1fb      	bne.n	9780 <_spi_m_dma_transfer+0xf8>
    9788:	e7c4      	b.n	9714 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    978a:	2000      	movs	r0, #0
    978c:	e7ea      	b.n	9764 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    978e:	f10a 010e 	add.w	r1, sl, #14
    9792:	4620      	mov	r0, r4
    9794:	4b0c      	ldr	r3, [pc, #48]	; (97c8 <_spi_m_dma_transfer+0x140>)
    9796:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    9798:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    979a:	3128      	adds	r1, #40	; 0x28
    979c:	4620      	mov	r0, r4
    979e:	4b0b      	ldr	r3, [pc, #44]	; (97cc <_spi_m_dma_transfer+0x144>)
    97a0:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    97a2:	2100      	movs	r1, #0
    97a4:	4620      	mov	r0, r4
    97a6:	4b0c      	ldr	r3, [pc, #48]	; (97d8 <_spi_m_dma_transfer+0x150>)
    97a8:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    97aa:	4641      	mov	r1, r8
    97ac:	4620      	mov	r0, r4
    97ae:	4b08      	ldr	r3, [pc, #32]	; (97d0 <_spi_m_dma_transfer+0x148>)
    97b0:	4798      	blx	r3
    97b2:	e7c3      	b.n	973c <_spi_m_dma_transfer+0xb4>
    97b4:	00008389 	.word	0x00008389
    97b8:	000085a9 	.word	0x000085a9
    97bc:	00008595 	.word	0x00008595
    97c0:	0000f3d8 	.word	0x0000f3d8
    97c4:	000072b1 	.word	0x000072b1
    97c8:	00007a89 	.word	0x00007a89
    97cc:	00007a79 	.word	0x00007a79
    97d0:	00007ab5 	.word	0x00007ab5
    97d4:	00007b0d 	.word	0x00007b0d
    97d8:	00007a99 	.word	0x00007a99
    97dc:	0000f3b4 	.word	0x0000f3b4

000097e0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    97e0:	4b03      	ldr	r3, [pc, #12]	; (97f0 <_delay_init+0x10>)
    97e2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    97e6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    97e8:	2205      	movs	r2, #5
    97ea:	601a      	str	r2, [r3, #0]
    97ec:	4770      	bx	lr
    97ee:	bf00      	nop
    97f0:	e000e010 	.word	0xe000e010

000097f4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    97f4:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    97f6:	b303      	cbz	r3, 983a <_delay_cycles+0x46>
{
    97f8:	b430      	push	{r4, r5}
    97fa:	1e5d      	subs	r5, r3, #1
    97fc:	b2ed      	uxtb	r5, r5
	while (n--) {
    97fe:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    9800:	4a12      	ldr	r2, [pc, #72]	; (984c <_delay_cycles+0x58>)
    9802:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    9806:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    9808:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    980a:	6813      	ldr	r3, [r2, #0]
    980c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9810:	d0fb      	beq.n	980a <_delay_cycles+0x16>
	while (n--) {
    9812:	3801      	subs	r0, #1
    9814:	b2c0      	uxtb	r0, r0
    9816:	28ff      	cmp	r0, #255	; 0xff
    9818:	d1f5      	bne.n	9806 <_delay_cycles+0x12>
    981a:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    981e:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    9822:	3101      	adds	r1, #1
    9824:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    9826:	4b09      	ldr	r3, [pc, #36]	; (984c <_delay_cycles+0x58>)
    9828:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    982a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    982c:	461a      	mov	r2, r3
    982e:	6813      	ldr	r3, [r2, #0]
    9830:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9834:	d0fb      	beq.n	982e <_delay_cycles+0x3a>
		;
}
    9836:	bc30      	pop	{r4, r5}
    9838:	4770      	bx	lr
	SysTick->LOAD = buf;
    983a:	4b04      	ldr	r3, [pc, #16]	; (984c <_delay_cycles+0x58>)
    983c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    983e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    9840:	461a      	mov	r2, r3
    9842:	6813      	ldr	r3, [r2, #0]
    9844:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9848:	d0fb      	beq.n	9842 <_delay_cycles+0x4e>
    984a:	4770      	bx	lr
    984c:	e000e010 	.word	0xe000e010

00009850 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9850:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    9852:	6813      	ldr	r3, [r2, #0]
    9854:	f043 0302 	orr.w	r3, r3, #2
    9858:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    985a:	6913      	ldr	r3, [r2, #16]
    985c:	f013 0f03 	tst.w	r3, #3
    9860:	d1fb      	bne.n	985a <_tc_timer_start+0xa>
}
    9862:	4770      	bx	lr

00009864 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    9864:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    9866:	6813      	ldr	r3, [r2, #0]
    9868:	f023 0302 	bic.w	r3, r3, #2
    986c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    986e:	6913      	ldr	r3, [r2, #16]
    9870:	f013 0f03 	tst.w	r3, #3
    9874:	d1fb      	bne.n	986e <_tc_timer_stop+0xa>
}
    9876:	4770      	bx	lr

00009878 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    9878:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    987a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    987c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9880:	2a02      	cmp	r2, #2
    9882:	d00a      	beq.n	989a <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9884:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9886:	f012 0f0c 	tst.w	r2, #12
    988a:	d10c      	bne.n	98a6 <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    988c:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    988e:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9890:	691a      	ldr	r2, [r3, #16]
    9892:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    9896:	d1fb      	bne.n	9890 <_tc_timer_set_period+0x18>
    9898:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    989a:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    989c:	691a      	ldr	r2, [r3, #16]
    989e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    98a2:	d1fb      	bne.n	989c <_tc_timer_set_period+0x24>
    98a4:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    98a6:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    98a8:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    98ac:	2a01      	cmp	r2, #1
    98ae:	d000      	beq.n	98b2 <_tc_timer_set_period+0x3a>
    98b0:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    98b2:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    98b4:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    98b6:	691a      	ldr	r2, [r3, #16]
    98b8:	f012 0f20 	tst.w	r2, #32
    98bc:	d1fb      	bne.n	98b6 <_tc_timer_set_period+0x3e>
    98be:	e7f7      	b.n	98b0 <_tc_timer_set_period+0x38>

000098c0 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    98c0:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    98c2:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    98c4:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    98c8:	2a02      	cmp	r2, #2
    98ca:	d00a      	beq.n	98e2 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    98cc:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    98ce:	f012 0f0c 	tst.w	r2, #12
    98d2:	d10c      	bne.n	98ee <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    98d4:	691a      	ldr	r2, [r3, #16]
    98d6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    98da:	d1fb      	bne.n	98d4 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    98dc:	8b98      	ldrh	r0, [r3, #28]
    98de:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    98e0:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    98e2:	691a      	ldr	r2, [r3, #16]
    98e4:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    98e8:	d1fb      	bne.n	98e2 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    98ea:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    98ec:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    98ee:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    98f0:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    98f4:	2a01      	cmp	r2, #1
    98f6:	d001      	beq.n	98fc <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    98f8:	2000      	movs	r0, #0
}
    98fa:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    98fc:	691a      	ldr	r2, [r3, #16]
    98fe:	f012 0f20 	tst.w	r2, #32
    9902:	d1fb      	bne.n	98fc <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    9904:	7ed8      	ldrb	r0, [r3, #27]
    9906:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    9908:	4770      	bx	lr

0000990a <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    990a:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    990c:	6913      	ldr	r3, [r2, #16]
    990e:	f013 0f03 	tst.w	r3, #3
    9912:	d1fb      	bne.n	990c <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9914:	6810      	ldr	r0, [r2, #0]
}
    9916:	f3c0 0040 	ubfx	r0, r0, #1, #1
    991a:	4770      	bx	lr

0000991c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    991c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    991e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    9920:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9922:	f012 0f01 	tst.w	r2, #1
    9926:	d100      	bne.n	992a <tc_interrupt_handler+0xe>
    9928:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    992a:	2201      	movs	r2, #1
    992c:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    992e:	6803      	ldr	r3, [r0, #0]
    9930:	4798      	blx	r3
	}
}
    9932:	e7f9      	b.n	9928 <tc_interrupt_handler+0xc>

00009934 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    9934:	b570      	push	{r4, r5, r6, lr}
    9936:	b088      	sub	sp, #32
    9938:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    993a:	466c      	mov	r4, sp
    993c:	4d19      	ldr	r5, [pc, #100]	; (99a4 <get_tc_index+0x70>)
    993e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9942:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    994a:	9b00      	ldr	r3, [sp, #0]
    994c:	42b3      	cmp	r3, r6
    994e:	d00c      	beq.n	996a <get_tc_index+0x36>
    9950:	4630      	mov	r0, r6
    9952:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9954:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    9956:	f852 1b04 	ldr.w	r1, [r2], #4
    995a:	4281      	cmp	r1, r0
    995c:	d006      	beq.n	996c <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    995e:	3301      	adds	r3, #1
    9960:	2b08      	cmp	r3, #8
    9962:	d1f8      	bne.n	9956 <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9964:	2000      	movs	r0, #0
			return i;
    9966:	b240      	sxtb	r0, r0
    9968:	e013      	b.n	9992 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    996a:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    996c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    9970:	d015      	beq.n	999e <get_tc_index+0x6a>
    9972:	2b01      	cmp	r3, #1
    9974:	d00f      	beq.n	9996 <get_tc_index+0x62>
    9976:	2b02      	cmp	r3, #2
    9978:	d00f      	beq.n	999a <get_tc_index+0x66>
    997a:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    997c:	bf08      	it	eq
    997e:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    9980:	d0f1      	beq.n	9966 <get_tc_index+0x32>
	ASSERT(false);
    9982:	f240 1267 	movw	r2, #359	; 0x167
    9986:	4908      	ldr	r1, [pc, #32]	; (99a8 <get_tc_index+0x74>)
    9988:	2000      	movs	r0, #0
    998a:	4b08      	ldr	r3, [pc, #32]	; (99ac <get_tc_index+0x78>)
    998c:	4798      	blx	r3
	return -1;
    998e:	f04f 30ff 	mov.w	r0, #4294967295
}
    9992:	b008      	add	sp, #32
    9994:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9996:	2001      	movs	r0, #1
    9998:	e7e5      	b.n	9966 <get_tc_index+0x32>
    999a:	2002      	movs	r0, #2
    999c:	e7e3      	b.n	9966 <get_tc_index+0x32>
    999e:	2000      	movs	r0, #0
    99a0:	e7e1      	b.n	9966 <get_tc_index+0x32>
    99a2:	bf00      	nop
    99a4:	0000f3f4 	.word	0x0000f3f4
    99a8:	0000f464 	.word	0x0000f464
    99ac:	000072b1 	.word	0x000072b1

000099b0 <_tc_timer_init>:
{
    99b0:	b570      	push	{r4, r5, r6, lr}
    99b2:	4606      	mov	r6, r0
    99b4:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    99b6:	4608      	mov	r0, r1
    99b8:	4b71      	ldr	r3, [pc, #452]	; (9b80 <_tc_timer_init+0x1d0>)
    99ba:	4798      	blx	r3
    99bc:	4605      	mov	r5, r0
	device->hw = hw;
    99be:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    99c0:	22a0      	movs	r2, #160	; 0xa0
    99c2:	4970      	ldr	r1, [pc, #448]	; (9b84 <_tc_timer_init+0x1d4>)
    99c4:	2001      	movs	r0, #1
    99c6:	4b70      	ldr	r3, [pc, #448]	; (9b88 <_tc_timer_init+0x1d8>)
    99c8:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    99ca:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    99cc:	f013 0f01 	tst.w	r3, #1
    99d0:	d119      	bne.n	9a06 <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    99d2:	6923      	ldr	r3, [r4, #16]
    99d4:	f013 0f03 	tst.w	r3, #3
    99d8:	d1fb      	bne.n	99d2 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    99da:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    99dc:	f013 0f02 	tst.w	r3, #2
    99e0:	d00b      	beq.n	99fa <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    99e2:	6823      	ldr	r3, [r4, #0]
    99e4:	f023 0302 	bic.w	r3, r3, #2
    99e8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    99ea:	6923      	ldr	r3, [r4, #16]
    99ec:	f013 0f03 	tst.w	r3, #3
    99f0:	d1fb      	bne.n	99ea <_tc_timer_init+0x3a>
    99f2:	6923      	ldr	r3, [r4, #16]
    99f4:	f013 0f02 	tst.w	r3, #2
    99f8:	d1fb      	bne.n	99f2 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    99fa:	2301      	movs	r3, #1
    99fc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    99fe:	6923      	ldr	r3, [r4, #16]
    9a00:	f013 0f03 	tst.w	r3, #3
    9a04:	d1fb      	bne.n	99fe <_tc_timer_init+0x4e>
    9a06:	6923      	ldr	r3, [r4, #16]
    9a08:	f013 0f01 	tst.w	r3, #1
    9a0c:	d1fb      	bne.n	9a06 <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9a0e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9a12:	4a5e      	ldr	r2, [pc, #376]	; (9b8c <_tc_timer_init+0x1dc>)
    9a14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    9a1a:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9a1c:	6923      	ldr	r3, [r4, #16]
    9a1e:	f013 0f03 	tst.w	r3, #3
    9a22:	d1fb      	bne.n	9a1c <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9a24:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9a28:	4958      	ldr	r1, [pc, #352]	; (9b8c <_tc_timer_init+0x1dc>)
    9a2a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9a2e:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    9a32:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    9a36:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    9a38:	2301      	movs	r3, #1
    9a3a:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9a3c:	f002 020c 	and.w	r2, r2, #12
    9a40:	2a08      	cmp	r2, #8
    9a42:	d056      	beq.n	9af2 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9a44:	2a00      	cmp	r2, #0
    9a46:	d16b      	bne.n	9b20 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9a48:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9a4c:	4a4f      	ldr	r2, [pc, #316]	; (9b8c <_tc_timer_init+0x1dc>)
    9a4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9a52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    9a54:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9a56:	6923      	ldr	r3, [r4, #16]
    9a58:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    9a5c:	d1fb      	bne.n	9a56 <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9a5e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9a62:	4a4a      	ldr	r2, [pc, #296]	; (9b8c <_tc_timer_init+0x1dc>)
    9a64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9a68:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    9a6a:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9a6c:	6923      	ldr	r3, [r4, #16]
    9a6e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    9a72:	d1fb      	bne.n	9a6c <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    9a74:	2301      	movs	r3, #1
    9a76:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    9a78:	4b45      	ldr	r3, [pc, #276]	; (9b90 <_tc_timer_init+0x1e0>)
    9a7a:	429c      	cmp	r4, r3
    9a7c:	d077      	beq.n	9b6e <_tc_timer_init+0x1be>
	if (hw == TC1) {
    9a7e:	4b45      	ldr	r3, [pc, #276]	; (9b94 <_tc_timer_init+0x1e4>)
    9a80:	429c      	cmp	r4, r3
    9a82:	d077      	beq.n	9b74 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    9a84:	4b44      	ldr	r3, [pc, #272]	; (9b98 <_tc_timer_init+0x1e8>)
    9a86:	429c      	cmp	r4, r3
    9a88:	d077      	beq.n	9b7a <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    9a8a:	4b44      	ldr	r3, [pc, #272]	; (9b9c <_tc_timer_init+0x1ec>)
    9a8c:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    9a8e:	bf04      	itt	eq
    9a90:	4b43      	ldreq	r3, [pc, #268]	; (9ba0 <_tc_timer_init+0x1f0>)
    9a92:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    9a94:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9a98:	4a3c      	ldr	r2, [pc, #240]	; (9b8c <_tc_timer_init+0x1dc>)
    9a9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9a9e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    9aa2:	2b00      	cmp	r3, #0
    9aa4:	db23      	blt.n	9aee <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9aa6:	095a      	lsrs	r2, r3, #5
    9aa8:	f003 031f 	and.w	r3, r3, #31
    9aac:	2101      	movs	r1, #1
    9aae:	fa01 f303 	lsl.w	r3, r1, r3
    9ab2:	3220      	adds	r2, #32
    9ab4:	493b      	ldr	r1, [pc, #236]	; (9ba4 <_tc_timer_init+0x1f4>)
    9ab6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9aba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9abe:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9ac2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    9ac6:	4b31      	ldr	r3, [pc, #196]	; (9b8c <_tc_timer_init+0x1dc>)
    9ac8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9acc:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	db0c      	blt.n	9aee <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9ad4:	0959      	lsrs	r1, r3, #5
    9ad6:	f003 031f 	and.w	r3, r3, #31
    9ada:	2201      	movs	r2, #1
    9adc:	fa02 f303 	lsl.w	r3, r2, r3
    9ae0:	4a30      	ldr	r2, [pc, #192]	; (9ba4 <_tc_timer_init+0x1f4>)
    9ae2:	f101 0060 	add.w	r0, r1, #96	; 0x60
    9ae6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9aea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    9aee:	2000      	movs	r0, #0
    9af0:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9af2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9af6:	4a25      	ldr	r2, [pc, #148]	; (9b8c <_tc_timer_init+0x1dc>)
    9af8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    9afe:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9b00:	6923      	ldr	r3, [r4, #16]
    9b02:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    9b06:	d1fb      	bne.n	9b00 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9b08:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9b0c:	4a1f      	ldr	r2, [pc, #124]	; (9b8c <_tc_timer_init+0x1dc>)
    9b0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    9b14:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9b16:	6923      	ldr	r3, [r4, #16]
    9b18:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    9b1c:	d1fb      	bne.n	9b16 <_tc_timer_init+0x166>
    9b1e:	e7a9      	b.n	9a74 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    9b20:	2a04      	cmp	r2, #4
    9b22:	d1a7      	bne.n	9a74 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    9b24:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9b28:	4a18      	ldr	r2, [pc, #96]	; (9b8c <_tc_timer_init+0x1dc>)
    9b2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9b2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    9b32:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9b34:	6923      	ldr	r3, [r4, #16]
    9b36:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    9b3a:	d1fb      	bne.n	9b34 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    9b3c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9b40:	4a12      	ldr	r2, [pc, #72]	; (9b8c <_tc_timer_init+0x1dc>)
    9b42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    9b4a:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9b4c:	6923      	ldr	r3, [r4, #16]
    9b4e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    9b52:	d1fb      	bne.n	9b4c <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    9b54:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9b58:	4a0c      	ldr	r2, [pc, #48]	; (9b8c <_tc_timer_init+0x1dc>)
    9b5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9b5e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    9b62:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9b64:	6923      	ldr	r3, [r4, #16]
    9b66:	f013 0f20 	tst.w	r3, #32
    9b6a:	d1fb      	bne.n	9b64 <_tc_timer_init+0x1b4>
    9b6c:	e782      	b.n	9a74 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    9b6e:	4b0c      	ldr	r3, [pc, #48]	; (9ba0 <_tc_timer_init+0x1f0>)
    9b70:	601e      	str	r6, [r3, #0]
    9b72:	e78a      	b.n	9a8a <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    9b74:	4b0a      	ldr	r3, [pc, #40]	; (9ba0 <_tc_timer_init+0x1f0>)
    9b76:	605e      	str	r6, [r3, #4]
    9b78:	e78c      	b.n	9a94 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    9b7a:	4b09      	ldr	r3, [pc, #36]	; (9ba0 <_tc_timer_init+0x1f0>)
    9b7c:	609e      	str	r6, [r3, #8]
    9b7e:	e789      	b.n	9a94 <_tc_timer_init+0xe4>
    9b80:	00009935 	.word	0x00009935
    9b84:	0000f464 	.word	0x0000f464
    9b88:	000072b1 	.word	0x000072b1
    9b8c:	0000f3f4 	.word	0x0000f3f4
    9b90:	40003800 	.word	0x40003800
    9b94:	40003c00 	.word	0x40003c00
    9b98:	4101a000 	.word	0x4101a000
    9b9c:	4101c000 	.word	0x4101c000
    9ba0:	20000a20 	.word	0x20000a20
    9ba4:	e000e100 	.word	0xe000e100

00009ba8 <_tc_timer_deinit>:
{
    9ba8:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    9baa:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    9bac:	4620      	mov	r0, r4
    9bae:	4b18      	ldr	r3, [pc, #96]	; (9c10 <_tc_timer_deinit+0x68>)
    9bb0:	4798      	blx	r3
    9bb2:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    9bb4:	22cd      	movs	r2, #205	; 0xcd
    9bb6:	4917      	ldr	r1, [pc, #92]	; (9c14 <_tc_timer_deinit+0x6c>)
    9bb8:	2001      	movs	r0, #1
    9bba:	4b17      	ldr	r3, [pc, #92]	; (9c18 <_tc_timer_deinit+0x70>)
    9bbc:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9bbe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    9bc2:	4b16      	ldr	r3, [pc, #88]	; (9c1c <_tc_timer_deinit+0x74>)
    9bc4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9bc8:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    9bcc:	2b00      	cmp	r3, #0
    9bce:	db0d      	blt.n	9bec <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9bd0:	095a      	lsrs	r2, r3, #5
    9bd2:	f003 031f 	and.w	r3, r3, #31
    9bd6:	2101      	movs	r1, #1
    9bd8:	fa01 f303 	lsl.w	r3, r1, r3
    9bdc:	3220      	adds	r2, #32
    9bde:	4910      	ldr	r1, [pc, #64]	; (9c20 <_tc_timer_deinit+0x78>)
    9be0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9be4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9be8:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    9bec:	6823      	ldr	r3, [r4, #0]
    9bee:	f023 0302 	bic.w	r3, r3, #2
    9bf2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9bf4:	6923      	ldr	r3, [r4, #16]
    9bf6:	f013 0f03 	tst.w	r3, #3
    9bfa:	d1fb      	bne.n	9bf4 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    9bfc:	6823      	ldr	r3, [r4, #0]
    9bfe:	f043 0301 	orr.w	r3, r3, #1
    9c02:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9c04:	6923      	ldr	r3, [r4, #16]
    9c06:	f013 0f01 	tst.w	r3, #1
    9c0a:	d1fb      	bne.n	9c04 <_tc_timer_deinit+0x5c>
}
    9c0c:	bd38      	pop	{r3, r4, r5, pc}
    9c0e:	bf00      	nop
    9c10:	00009935 	.word	0x00009935
    9c14:	0000f464 	.word	0x0000f464
    9c18:	000072b1 	.word	0x000072b1
    9c1c:	0000f3f4 	.word	0x0000f3f4
    9c20:	e000e100 	.word	0xe000e100

00009c24 <_tc_timer_set_irq>:
{
    9c24:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    9c26:	68c0      	ldr	r0, [r0, #12]
    9c28:	4b09      	ldr	r3, [pc, #36]	; (9c50 <_tc_timer_set_irq+0x2c>)
    9c2a:	4798      	blx	r3
    9c2c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    9c2e:	f44f 7291 	mov.w	r2, #290	; 0x122
    9c32:	4908      	ldr	r1, [pc, #32]	; (9c54 <_tc_timer_set_irq+0x30>)
    9c34:	2001      	movs	r0, #1
    9c36:	4b08      	ldr	r3, [pc, #32]	; (9c58 <_tc_timer_set_irq+0x34>)
    9c38:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    9c3a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9c3e:	4b07      	ldr	r3, [pc, #28]	; (9c5c <_tc_timer_set_irq+0x38>)
    9c40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    9c44:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    9c48:	4b05      	ldr	r3, [pc, #20]	; (9c60 <_tc_timer_set_irq+0x3c>)
    9c4a:	4798      	blx	r3
    9c4c:	bd10      	pop	{r4, pc}
    9c4e:	bf00      	nop
    9c50:	00009935 	.word	0x00009935
    9c54:	0000f464 	.word	0x0000f464
    9c58:	000072b1 	.word	0x000072b1
    9c5c:	0000f3f4 	.word	0x0000f3f4
    9c60:	00007845 	.word	0x00007845

00009c64 <_tc_get_timer>:
}
    9c64:	4800      	ldr	r0, [pc, #0]	; (9c68 <_tc_get_timer+0x4>)
    9c66:	4770      	bx	lr
    9c68:	20000368 	.word	0x20000368

00009c6c <TC0_Handler>:
{
    9c6c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    9c6e:	4b02      	ldr	r3, [pc, #8]	; (9c78 <TC0_Handler+0xc>)
    9c70:	6818      	ldr	r0, [r3, #0]
    9c72:	4b02      	ldr	r3, [pc, #8]	; (9c7c <TC0_Handler+0x10>)
    9c74:	4798      	blx	r3
    9c76:	bd08      	pop	{r3, pc}
    9c78:	20000a20 	.word	0x20000a20
    9c7c:	0000991d 	.word	0x0000991d

00009c80 <TC1_Handler>:
{
    9c80:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    9c82:	4b02      	ldr	r3, [pc, #8]	; (9c8c <TC1_Handler+0xc>)
    9c84:	6858      	ldr	r0, [r3, #4]
    9c86:	4b02      	ldr	r3, [pc, #8]	; (9c90 <TC1_Handler+0x10>)
    9c88:	4798      	blx	r3
    9c8a:	bd08      	pop	{r3, pc}
    9c8c:	20000a20 	.word	0x20000a20
    9c90:	0000991d 	.word	0x0000991d

00009c94 <TC2_Handler>:
{
    9c94:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    9c96:	4b02      	ldr	r3, [pc, #8]	; (9ca0 <TC2_Handler+0xc>)
    9c98:	6898      	ldr	r0, [r3, #8]
    9c9a:	4b02      	ldr	r3, [pc, #8]	; (9ca4 <TC2_Handler+0x10>)
    9c9c:	4798      	blx	r3
    9c9e:	bd08      	pop	{r3, pc}
    9ca0:	20000a20 	.word	0x20000a20
    9ca4:	0000991d 	.word	0x0000991d

00009ca8 <TC3_Handler>:
{
    9ca8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    9caa:	4b02      	ldr	r3, [pc, #8]	; (9cb4 <TC3_Handler+0xc>)
    9cac:	68d8      	ldr	r0, [r3, #12]
    9cae:	4b02      	ldr	r3, [pc, #8]	; (9cb8 <TC3_Handler+0x10>)
    9cb0:	4798      	blx	r3
    9cb2:	bd08      	pop	{r3, pc}
    9cb4:	20000a20 	.word	0x20000a20
    9cb8:	0000991d 	.word	0x0000991d

00009cbc <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    9cbc:	2000      	movs	r0, #0
    9cbe:	4770      	bx	lr

00009cc0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9cc0:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9cc2:	7c83      	ldrb	r3, [r0, #18]
    9cc4:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9cc8:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    9cca:	f002 0107 	and.w	r1, r2, #7
    9cce:	2901      	cmp	r1, #1
    9cd0:	d00b      	beq.n	9cea <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9cd2:	015a      	lsls	r2, r3, #5
    9cd4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9cd8:	2110      	movs	r1, #16
    9cda:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    9cde:	015b      	lsls	r3, r3, #5
    9ce0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9ce4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    9ce8:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9cea:	f012 0f40 	tst.w	r2, #64	; 0x40
    9cee:	d00c      	beq.n	9d0a <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    9cf0:	7cc2      	ldrb	r2, [r0, #19]
    9cf2:	f36f 1286 	bfc	r2, #6, #1
    9cf6:	74c2      	strb	r2, [r0, #19]
    9cf8:	015a      	lsls	r2, r3, #5
    9cfa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9cfe:	2180      	movs	r1, #128	; 0x80
    9d00:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9d04:	2140      	movs	r1, #64	; 0x40
    9d06:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    9d0a:	7cc2      	ldrb	r2, [r0, #19]
    9d0c:	f36f 02c3 	bfc	r2, #3, #1
    9d10:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    9d12:	490a      	ldr	r1, [pc, #40]	; (9d3c <_usb_d_dev_handle_setup+0x7c>)
    9d14:	015a      	lsls	r2, r3, #5
    9d16:	188c      	adds	r4, r1, r2
    9d18:	2500      	movs	r5, #0
    9d1a:	72a5      	strb	r5, [r4, #10]
    9d1c:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9d1e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    9d22:	246f      	movs	r4, #111	; 0x6f
    9d24:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9d28:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9d2c:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9d30:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    9d34:	7c80      	ldrb	r0, [r0, #18]
    9d36:	4798      	blx	r3
    9d38:	bd38      	pop	{r3, r4, r5, pc}
    9d3a:	bf00      	nop
    9d3c:	20000a30 	.word	0x20000a30

00009d40 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9d40:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9d42:	2320      	movs	r3, #32
    9d44:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9d48:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9d4a:	7c83      	ldrb	r3, [r0, #18]
    9d4c:	f003 030f 	and.w	r3, r3, #15
    9d50:	015b      	lsls	r3, r3, #5
    9d52:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9d56:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9d5a:	4b04      	ldr	r3, [pc, #16]	; (9d6c <_usb_d_dev_handle_stall+0x2c>)
    9d5c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    9d60:	6882      	ldr	r2, [r0, #8]
    9d62:	2101      	movs	r1, #1
    9d64:	7c80      	ldrb	r0, [r0, #18]
    9d66:	4798      	blx	r3
    9d68:	bd08      	pop	{r3, pc}
    9d6a:	bf00      	nop
    9d6c:	20000a30 	.word	0x20000a30

00009d70 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9d70:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9d72:	7c84      	ldrb	r4, [r0, #18]
    9d74:	2cff      	cmp	r4, #255	; 0xff
    9d76:	d003      	beq.n	9d80 <_usb_d_dev_trans_done+0x10>
    9d78:	7cc3      	ldrb	r3, [r0, #19]
    9d7a:	f013 0f40 	tst.w	r3, #64	; 0x40
    9d7e:	d100      	bne.n	9d82 <_usb_d_dev_trans_done+0x12>
    9d80:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    9d82:	7cc2      	ldrb	r2, [r0, #19]
    9d84:	f36f 1286 	bfc	r2, #6, #1
    9d88:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    9d8a:	4a03      	ldr	r2, [pc, #12]	; (9d98 <_usb_d_dev_trans_done+0x28>)
    9d8c:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    9d90:	6882      	ldr	r2, [r0, #8]
    9d92:	4620      	mov	r0, r4
    9d94:	47a8      	blx	r5
    9d96:	e7f3      	b.n	9d80 <_usb_d_dev_trans_done+0x10>
    9d98:	20000a30 	.word	0x20000a30

00009d9c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    9d9c:	b530      	push	{r4, r5, lr}
    9d9e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9da0:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9da2:	2425      	movs	r4, #37	; 0x25
    9da4:	f88d 4004 	strb.w	r4, [sp, #4]
    9da8:	244a      	movs	r4, #74	; 0x4a
    9daa:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9dae:	2bff      	cmp	r3, #255	; 0xff
    9db0:	d01e      	beq.n	9df0 <_usb_d_dev_trans_stop+0x54>
    9db2:	7cc4      	ldrb	r4, [r0, #19]
    9db4:	f014 0f40 	tst.w	r4, #64	; 0x40
    9db8:	d01a      	beq.n	9df0 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9dba:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    9dbe:	b1c9      	cbz	r1, 9df4 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9dc0:	0163      	lsls	r3, r4, #5
    9dc2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9dc6:	2580      	movs	r5, #128	; 0x80
    9dc8:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    9dcc:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9dce:	a902      	add	r1, sp, #8
    9dd0:	440b      	add	r3, r1
    9dd2:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9dd6:	0163      	lsls	r3, r4, #5
    9dd8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9ddc:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9de0:	0163      	lsls	r3, r4, #5
    9de2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9de6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    9dea:	4611      	mov	r1, r2
    9dec:	4b05      	ldr	r3, [pc, #20]	; (9e04 <_usb_d_dev_trans_stop+0x68>)
    9dee:	4798      	blx	r3
}
    9df0:	b003      	add	sp, #12
    9df2:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9df4:	0163      	lsls	r3, r4, #5
    9df6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9dfa:	2540      	movs	r5, #64	; 0x40
    9dfc:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    9e00:	e7e4      	b.n	9dcc <_usb_d_dev_trans_stop+0x30>
    9e02:	bf00      	nop
    9e04:	00009d71 	.word	0x00009d71

00009e08 <_usb_d_dev_handle_trfail>:
{
    9e08:	b530      	push	{r4, r5, lr}
    9e0a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9e0c:	7c83      	ldrb	r3, [r0, #18]
    9e0e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9e12:	2204      	movs	r2, #4
    9e14:	f88d 2004 	strb.w	r2, [sp, #4]
    9e18:	2208      	movs	r2, #8
    9e1a:	f88d 2005 	strb.w	r2, [sp, #5]
    9e1e:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    9e20:	460c      	mov	r4, r1
    9e22:	b391      	cbz	r1, 9e8a <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9e24:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    9e28:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    9e2c:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    9e30:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    9e34:	4a32      	ldr	r2, [pc, #200]	; (9f00 <_usb_d_dev_handle_trfail+0xf8>)
    9e36:	440a      	add	r2, r1
    9e38:	7a91      	ldrb	r1, [r2, #10]
    9e3a:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9e3c:	2d02      	cmp	r5, #2
    9e3e:	d02c      	beq.n	9e9a <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    9e40:	f011 0f02 	tst.w	r1, #2
    9e44:	d045      	beq.n	9ed2 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9e46:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9e48:	7a91      	ldrb	r1, [r2, #10]
    9e4a:	f36f 0141 	bfc	r1, #1, #1
    9e4e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9e50:	aa02      	add	r2, sp, #8
    9e52:	4422      	add	r2, r4
    9e54:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9e58:	015a      	lsls	r2, r3, #5
    9e5a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9e5e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9e62:	015b      	lsls	r3, r3, #5
    9e64:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9e68:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9e6c:	f005 0307 	and.w	r3, r5, #7
    9e70:	2b01      	cmp	r3, #1
    9e72:	d143      	bne.n	9efc <_usb_d_dev_handle_trfail+0xf4>
    9e74:	7cc3      	ldrb	r3, [r0, #19]
    9e76:	f013 0f40 	tst.w	r3, #64	; 0x40
    9e7a:	d03f      	beq.n	9efc <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9e7c:	09d9      	lsrs	r1, r3, #7
    9e7e:	428c      	cmp	r4, r1
    9e80:	d03c      	beq.n	9efc <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9e82:	2200      	movs	r2, #0
    9e84:	4b1f      	ldr	r3, [pc, #124]	; (9f04 <_usb_d_dev_handle_trfail+0xfc>)
    9e86:	4798      	blx	r3
    9e88:	e038      	b.n	9efc <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9e8a:	0159      	lsls	r1, r3, #5
    9e8c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    9e90:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    9e94:	f005 0507 	and.w	r5, r5, #7
    9e98:	e7ca      	b.n	9e30 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9e9a:	f011 0f01 	tst.w	r1, #1
    9e9e:	d0cf      	beq.n	9e40 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9ea0:	7a91      	ldrb	r1, [r2, #10]
    9ea2:	f36f 0100 	bfc	r1, #0, #1
    9ea6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9ea8:	aa02      	add	r2, sp, #8
    9eaa:	4422      	add	r2, r4
    9eac:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9eb0:	015a      	lsls	r2, r3, #5
    9eb2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9eb6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9eba:	015b      	lsls	r3, r3, #5
    9ebc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9ec0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9ec4:	2204      	movs	r2, #4
    9ec6:	1c21      	adds	r1, r4, #0
    9ec8:	bf18      	it	ne
    9eca:	2101      	movne	r1, #1
    9ecc:	4b0d      	ldr	r3, [pc, #52]	; (9f04 <_usb_d_dev_handle_trfail+0xfc>)
    9ece:	4798      	blx	r3
    9ed0:	e014      	b.n	9efc <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    9ed2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    9ed6:	4a0a      	ldr	r2, [pc, #40]	; (9f00 <_usb_d_dev_handle_trfail+0xf8>)
    9ed8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    9edc:	2100      	movs	r1, #0
    9ede:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9ee0:	aa02      	add	r2, sp, #8
    9ee2:	4414      	add	r4, r2
    9ee4:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9ee8:	015a      	lsls	r2, r3, #5
    9eea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9eee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9ef2:	015b      	lsls	r3, r3, #5
    9ef4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9ef8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    9efc:	b003      	add	sp, #12
    9efe:	bd30      	pop	{r4, r5, pc}
    9f00:	20000a30 	.word	0x20000a30
    9f04:	00009d9d 	.word	0x00009d9d

00009f08 <_usb_d_dev_reset_epts>:
{
    9f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f0c:	4d0c      	ldr	r5, [pc, #48]	; (9f40 <_usb_d_dev_reset_epts+0x38>)
    9f0e:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    9f12:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9f16:	f04f 0803 	mov.w	r8, #3
    9f1a:	4f0a      	ldr	r7, [pc, #40]	; (9f44 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    9f1c:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9f1e:	4641      	mov	r1, r8
    9f20:	4620      	mov	r0, r4
    9f22:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    9f24:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    9f26:	2300      	movs	r3, #0
    9f28:	74e3      	strb	r3, [r4, #19]
    9f2a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    9f2c:	42ac      	cmp	r4, r5
    9f2e:	d1f6      	bne.n	9f1e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9f30:	22c0      	movs	r2, #192	; 0xc0
    9f32:	4619      	mov	r1, r3
    9f34:	4802      	ldr	r0, [pc, #8]	; (9f40 <_usb_d_dev_reset_epts+0x38>)
    9f36:	4b04      	ldr	r3, [pc, #16]	; (9f48 <_usb_d_dev_reset_epts+0x40>)
    9f38:	4798      	blx	r3
    9f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f3e:	bf00      	nop
    9f40:	20000a30 	.word	0x20000a30
    9f44:	00009d71 	.word	0x00009d71
    9f48:	0000d447 	.word	0x0000d447

00009f4c <_usb_d_dev_in_next>:
{
    9f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f50:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9f52:	7c84      	ldrb	r4, [r0, #18]
    9f54:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9f58:	4688      	mov	r8, r1
    9f5a:	2900      	cmp	r1, #0
    9f5c:	f000 80a0 	beq.w	a0a0 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9f60:	4b58      	ldr	r3, [pc, #352]	; (a0c4 <_usb_d_dev_in_next+0x178>)
    9f62:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9f66:	6958      	ldr	r0, [r3, #20]
    9f68:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9f6c:	8a2b      	ldrh	r3, [r5, #16]
    9f6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9f72:	4293      	cmp	r3, r2
    9f74:	f000 808e 	beq.w	a094 <_usb_d_dev_in_next+0x148>
    9f78:	3b01      	subs	r3, #1
    9f7a:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9f7c:	7cef      	ldrb	r7, [r5, #19]
    9f7e:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    9f82:	f1b8 0f00 	cmp.w	r8, #0
    9f86:	d005      	beq.n	9f94 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9f88:	0162      	lsls	r2, r4, #5
    9f8a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9f8e:	2302      	movs	r3, #2
    9f90:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    9f94:	68a9      	ldr	r1, [r5, #8]
    9f96:	eb0e 0301 	add.w	r3, lr, r1
    9f9a:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    9f9c:	686e      	ldr	r6, [r5, #4]
    9f9e:	42b3      	cmp	r3, r6
    9fa0:	d23f      	bcs.n	a022 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    9fa2:	1af6      	subs	r6, r6, r3
    9fa4:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    9fa6:	7cea      	ldrb	r2, [r5, #19]
    9fa8:	f012 0f20 	tst.w	r2, #32
    9fac:	d02d      	beq.n	a00a <_usb_d_dev_in_next+0xbe>
    9fae:	8a2a      	ldrh	r2, [r5, #16]
    9fb0:	4296      	cmp	r6, r2
    9fb2:	bf28      	it	cs
    9fb4:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9fb6:	6829      	ldr	r1, [r5, #0]
    9fb8:	4632      	mov	r2, r6
    9fba:	4419      	add	r1, r3
    9fbc:	68e8      	ldr	r0, [r5, #12]
    9fbe:	4b42      	ldr	r3, [pc, #264]	; (a0c8 <_usb_d_dev_in_next+0x17c>)
    9fc0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9fc2:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    9fc4:	4b3f      	ldr	r3, [pc, #252]	; (a0c4 <_usb_d_dev_in_next+0x178>)
    9fc6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    9fca:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9fcc:	4b3d      	ldr	r3, [pc, #244]	; (a0c4 <_usb_d_dev_in_next+0x178>)
    9fce:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    9fd2:	695a      	ldr	r2, [r3, #20]
    9fd4:	f366 020d 	bfi	r2, r6, #0, #14
    9fd8:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9fda:	695a      	ldr	r2, [r3, #20]
    9fdc:	f36f 329b 	bfc	r2, #14, #14
    9fe0:	615a      	str	r2, [r3, #20]
	if (!isr) {
    9fe2:	f1b8 0f00 	cmp.w	r8, #0
    9fe6:	d108      	bne.n	9ffa <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    9fe8:	2f01      	cmp	r7, #1
    9fea:	bf0c      	ite	eq
    9fec:	224e      	moveq	r2, #78	; 0x4e
    9fee:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9ff0:	0163      	lsls	r3, r4, #5
    9ff2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9ff6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9ffa:	0164      	lsls	r4, r4, #5
    9ffc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    a000:	2380      	movs	r3, #128	; 0x80
    a002:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    a006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a00a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    a00e:	bf28      	it	cs
    a010:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a014:	6829      	ldr	r1, [r5, #0]
    a016:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    a018:	4a2a      	ldr	r2, [pc, #168]	; (a0c4 <_usb_d_dev_in_next+0x178>)
    a01a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    a01e:	6113      	str	r3, [r2, #16]
    a020:	e7d4      	b.n	9fcc <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    a022:	7ceb      	ldrb	r3, [r5, #19]
    a024:	f013 0f10 	tst.w	r3, #16
    a028:	d00f      	beq.n	a04a <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    a02a:	7ceb      	ldrb	r3, [r5, #19]
    a02c:	f36f 1304 	bfc	r3, #4, #1
    a030:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    a032:	4b24      	ldr	r3, [pc, #144]	; (a0c4 <_usb_d_dev_in_next+0x178>)
    a034:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    a038:	695a      	ldr	r2, [r3, #20]
    a03a:	f36f 020d 	bfc	r2, #0, #14
    a03e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    a040:	695a      	ldr	r2, [r3, #20]
    a042:	f36f 329b 	bfc	r2, #14, #14
    a046:	615a      	str	r2, [r3, #20]
    a048:	e7cb      	b.n	9fe2 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    a04a:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    a04c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    a050:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    a054:	bf0c      	ite	eq
    a056:	234b      	moveq	r3, #75	; 0x4b
    a058:	234a      	movne	r3, #74	; 0x4a
    a05a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    a05e:	8a2a      	ldrh	r2, [r5, #16]
    a060:	ea00 030e 	and.w	r3, r0, lr
    a064:	429a      	cmp	r2, r3
    a066:	d005      	beq.n	a074 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a068:	2100      	movs	r1, #0
    a06a:	4628      	mov	r0, r5
    a06c:	4b17      	ldr	r3, [pc, #92]	; (a0cc <_usb_d_dev_in_next+0x180>)
    a06e:	4798      	blx	r3
	return;
    a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    a074:	7ceb      	ldrb	r3, [r5, #19]
    a076:	f36f 1386 	bfc	r3, #6, #1
    a07a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    a07c:	4b11      	ldr	r3, [pc, #68]	; (a0c4 <_usb_d_dev_in_next+0x178>)
    a07e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    a082:	68a9      	ldr	r1, [r5, #8]
    a084:	7ca8      	ldrb	r0, [r5, #18]
    a086:	4798      	blx	r3
    a088:	b9d0      	cbnz	r0, a0c0 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    a08a:	7ceb      	ldrb	r3, [r5, #19]
    a08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a090:	74eb      	strb	r3, [r5, #19]
    a092:	e7e9      	b.n	a068 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    a094:	7cef      	ldrb	r7, [r5, #19]
    a096:	f007 0707 	and.w	r7, r7, #7
    a09a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    a09e:	e773      	b.n	9f88 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    a0a0:	8a03      	ldrh	r3, [r0, #16]
    a0a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a0a6:	4293      	cmp	r3, r2
    a0a8:	d107      	bne.n	a0ba <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    a0aa:	7cef      	ldrb	r7, [r5, #19]
    a0ac:	f007 0707 	and.w	r7, r7, #7
    a0b0:	f04f 0e00 	mov.w	lr, #0
    a0b4:	f240 30ff 	movw	r0, #1023	; 0x3ff
    a0b8:	e76c      	b.n	9f94 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    a0ba:	f04f 0e00 	mov.w	lr, #0
    a0be:	e75b      	b.n	9f78 <_usb_d_dev_in_next+0x2c>
    a0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0c4:	20000a30 	.word	0x20000a30
    a0c8:	0000d431 	.word	0x0000d431
    a0cc:	00009d71 	.word	0x00009d71

0000a0d0 <_usb_d_dev_out_next>:
{
    a0d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0d4:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a0d6:	7c85      	ldrb	r5, [r0, #18]
    a0d8:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a0dc:	4689      	mov	r9, r1
    a0de:	2900      	cmp	r1, #0
    a0e0:	d056      	beq.n	a190 <_usb_d_dev_out_next+0xc0>
    a0e2:	4b74      	ldr	r3, [pc, #464]	; (a2b4 <_usb_d_dev_out_next+0x1e4>)
    a0e4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    a0e8:	685a      	ldr	r2, [r3, #4]
    a0ea:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a0ee:	685f      	ldr	r7, [r3, #4]
    a0f0:	f3c7 070d 	ubfx	r7, r7, #0, #14
    a0f4:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a0f6:	8a06      	ldrh	r6, [r0, #16]
    a0f8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a0fc:	429e      	cmp	r6, r3
    a0fe:	f000 80ba 	beq.w	a276 <_usb_d_dev_out_next+0x1a6>
    a102:	3e01      	subs	r6, #1
    a104:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    a106:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a10a:	f894 8013 	ldrb.w	r8, [r4, #19]
    a10e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    a112:	f1b9 0f00 	cmp.w	r9, #0
    a116:	d005      	beq.n	a124 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a118:	016b      	lsls	r3, r5, #5
    a11a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a11e:	2201      	movs	r2, #1
    a120:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a124:	7ce3      	ldrb	r3, [r4, #19]
    a126:	f013 0f20 	tst.w	r3, #32
    a12a:	d00d      	beq.n	a148 <_usb_d_dev_out_next+0x78>
    a12c:	6862      	ldr	r2, [r4, #4]
    a12e:	2a00      	cmp	r2, #0
    a130:	d037      	beq.n	a1a2 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a132:	68a0      	ldr	r0, [r4, #8]
    a134:	1a12      	subs	r2, r2, r0
    a136:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a138:	6823      	ldr	r3, [r4, #0]
    a13a:	42ba      	cmp	r2, r7
    a13c:	bf28      	it	cs
    a13e:	463a      	movcs	r2, r7
    a140:	68e1      	ldr	r1, [r4, #12]
    a142:	4418      	add	r0, r3
    a144:	4b5c      	ldr	r3, [pc, #368]	; (a2b8 <_usb_d_dev_out_next+0x1e8>)
    a146:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a148:	6863      	ldr	r3, [r4, #4]
    a14a:	b353      	cbz	r3, a1a2 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    a14c:	f1b9 0f00 	cmp.w	r9, #0
    a150:	d040      	beq.n	a1d4 <_usb_d_dev_out_next+0x104>
    a152:	8a22      	ldrh	r2, [r4, #16]
    a154:	42ba      	cmp	r2, r7
    a156:	d93d      	bls.n	a1d4 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    a158:	7ce3      	ldrb	r3, [r4, #19]
    a15a:	f36f 1304 	bfc	r3, #4, #1
    a15e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    a160:	68a3      	ldr	r3, [r4, #8]
    a162:	445b      	add	r3, fp
    a164:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    a166:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    a16a:	ea4f 1345 	mov.w	r3, r5, lsl #5
    a16e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a172:	bf0c      	ite	eq
    a174:	222d      	moveq	r2, #45	; 0x2d
    a176:	2225      	movne	r2, #37	; 0x25
    a178:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    a17c:	b915      	cbnz	r5, a184 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a17e:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    a180:	4b4c      	ldr	r3, [pc, #304]	; (a2b4 <_usb_d_dev_out_next+0x1e4>)
    a182:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a184:	2100      	movs	r1, #0
    a186:	4620      	mov	r0, r4
    a188:	4b4c      	ldr	r3, [pc, #304]	; (a2bc <_usb_d_dev_out_next+0x1ec>)
    a18a:	4798      	blx	r3
	return;
    a18c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a190:	8a06      	ldrh	r6, [r0, #16]
    a192:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a196:	429e      	cmp	r6, r3
    a198:	d07b      	beq.n	a292 <_usb_d_dev_out_next+0x1c2>
    a19a:	f04f 0b00 	mov.w	fp, #0
    a19e:	46da      	mov	sl, fp
    a1a0:	e7af      	b.n	a102 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a1a2:	7ce3      	ldrb	r3, [r4, #19]
    a1a4:	f013 0f10 	tst.w	r3, #16
    a1a8:	d06c      	beq.n	a284 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    a1aa:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    a1ac:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    a1b0:	f043 0320 	orr.w	r3, r3, #32
    a1b4:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a1b6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    a1b8:	493e      	ldr	r1, [pc, #248]	; (a2b4 <_usb_d_dev_out_next+0x1e4>)
    a1ba:	016a      	lsls	r2, r5, #5
    a1bc:	188b      	adds	r3, r1, r2
    a1be:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    a1c0:	8a21      	ldrh	r1, [r4, #16]
    a1c2:	685a      	ldr	r2, [r3, #4]
    a1c4:	f361 329b 	bfi	r2, r1, #14, #14
    a1c8:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    a1ca:	685a      	ldr	r2, [r3, #4]
    a1cc:	f36f 020d 	bfc	r2, #0, #14
    a1d0:	605a      	str	r2, [r3, #4]
    a1d2:	e01d      	b.n	a210 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    a1d4:	68a2      	ldr	r2, [r4, #8]
    a1d6:	4452      	add	r2, sl
    a1d8:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    a1da:	4293      	cmp	r3, r2
    a1dc:	d9c3      	bls.n	a166 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    a1de:	1a9b      	subs	r3, r3, r2
    a1e0:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    a1e2:	7ce1      	ldrb	r1, [r4, #19]
    a1e4:	f011 0f20 	tst.w	r1, #32
    a1e8:	d026      	beq.n	a238 <_usb_d_dev_out_next+0x168>
    a1ea:	8a22      	ldrh	r2, [r4, #16]
    a1ec:	4293      	cmp	r3, r2
    a1ee:	bf28      	it	cs
    a1f0:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a1f2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    a1f4:	016a      	lsls	r2, r5, #5
    a1f6:	492f      	ldr	r1, [pc, #188]	; (a2b4 <_usb_d_dev_out_next+0x1e4>)
    a1f8:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    a1fa:	4a2e      	ldr	r2, [pc, #184]	; (a2b4 <_usb_d_dev_out_next+0x1e4>)
    a1fc:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    a200:	6851      	ldr	r1, [r2, #4]
    a202:	f363 319b 	bfi	r1, r3, #14, #14
    a206:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    a208:	6853      	ldr	r3, [r2, #4]
    a20a:	f36f 030d 	bfc	r3, #0, #14
    a20e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    a210:	f1b9 0f00 	cmp.w	r9, #0
    a214:	d108      	bne.n	a228 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    a216:	f1b8 0f01 	cmp.w	r8, #1
    a21a:	d025      	beq.n	a268 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    a21c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    a21e:	016b      	lsls	r3, r5, #5
    a220:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a224:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a228:	016d      	lsls	r5, r5, #5
    a22a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    a22e:	2340      	movs	r3, #64	; 0x40
    a230:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    a234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    a238:	8a21      	ldrh	r1, [r4, #16]
    a23a:	428b      	cmp	r3, r1
    a23c:	d90a      	bls.n	a254 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a23e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a242:	d80e      	bhi.n	a262 <_usb_d_dev_out_next+0x192>
    a244:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a248:	6821      	ldr	r1, [r4, #0]
    a24a:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    a24c:	0169      	lsls	r1, r5, #5
    a24e:	4819      	ldr	r0, [pc, #100]	; (a2b4 <_usb_d_dev_out_next+0x1e4>)
    a250:	5042      	str	r2, [r0, r1]
    a252:	e7d2      	b.n	a1fa <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    a254:	428b      	cmp	r3, r1
    a256:	d2f7      	bcs.n	a248 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    a258:	7ce1      	ldrb	r1, [r4, #19]
    a25a:	f041 0120 	orr.w	r1, r1, #32
    a25e:	74e1      	strb	r1, [r4, #19]
    a260:	e7f2      	b.n	a248 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    a262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a266:	e7ef      	b.n	a248 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    a268:	4b12      	ldr	r3, [pc, #72]	; (a2b4 <_usb_d_dev_out_next+0x1e4>)
    a26a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    a26e:	2200      	movs	r2, #0
    a270:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a272:	222d      	movs	r2, #45	; 0x2d
    a274:	e7d3      	b.n	a21e <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    a276:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a27a:	f890 8013 	ldrb.w	r8, [r0, #19]
    a27e:	f008 0807 	and.w	r8, r8, #7
    a282:	e749      	b.n	a118 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    a284:	f1b9 0f00 	cmp.w	r9, #0
    a288:	d10b      	bne.n	a2a2 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    a28a:	68a3      	ldr	r3, [r4, #8]
    a28c:	4453      	add	r3, sl
    a28e:	60a3      	str	r3, [r4, #8]
    a290:	e769      	b.n	a166 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a292:	f890 8013 	ldrb.w	r8, [r0, #19]
    a296:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    a29a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a29c:	46bb      	mov	fp, r7
    a29e:	46ba      	mov	sl, r7
    a2a0:	e740      	b.n	a124 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    a2a2:	8a23      	ldrh	r3, [r4, #16]
    a2a4:	42bb      	cmp	r3, r7
    a2a6:	f63f af57 	bhi.w	a158 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    a2aa:	68a3      	ldr	r3, [r4, #8]
    a2ac:	4453      	add	r3, sl
    a2ae:	60a3      	str	r3, [r4, #8]
    a2b0:	e759      	b.n	a166 <_usb_d_dev_out_next+0x96>
    a2b2:	bf00      	nop
    a2b4:	20000a30 	.word	0x20000a30
    a2b8:	0000d431 	.word	0x0000d431
    a2bc:	00009d71 	.word	0x00009d71

0000a2c0 <_usb_d_dev_handler>:
{
    a2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a2c4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a2c8:	8c1e      	ldrh	r6, [r3, #32]
    a2ca:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    a2cc:	b146      	cbz	r6, a2e0 <_usb_d_dev_handler+0x20>
    a2ce:	4d96      	ldr	r5, [pc, #600]	; (a528 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    a2d0:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a2d2:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    a2d6:	f8df 926c 	ldr.w	r9, [pc, #620]	; a544 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    a2da:	f8df 826c 	ldr.w	r8, [pc, #620]	; a548 <_usb_d_dev_handler+0x288>
    a2de:	e0de      	b.n	a49e <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    a2e0:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    a2e2:	8b1b      	ldrh	r3, [r3, #24]
    a2e4:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    a2e6:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    a2e8:	f013 0f04 	tst.w	r3, #4
    a2ec:	d11e      	bne.n	a32c <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    a2ee:	f413 7f00 	tst.w	r3, #512	; 0x200
    a2f2:	d125      	bne.n	a340 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    a2f4:	f013 0f80 	tst.w	r3, #128	; 0x80
    a2f8:	d14f      	bne.n	a39a <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    a2fa:	f013 0f70 	tst.w	r3, #112	; 0x70
    a2fe:	d158      	bne.n	a3b2 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    a300:	f013 0f08 	tst.w	r3, #8
    a304:	d178      	bne.n	a3f8 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    a306:	f013 0f01 	tst.w	r3, #1
    a30a:	d0e0      	beq.n	a2ce <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a30c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a310:	f240 2201 	movw	r2, #513	; 0x201
    a314:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a316:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a318:	2270      	movs	r2, #112	; 0x70
    a31a:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    a31c:	4b83      	ldr	r3, [pc, #524]	; (a52c <_usb_d_dev_handler+0x26c>)
    a31e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    a322:	2100      	movs	r1, #0
    a324:	2004      	movs	r0, #4
    a326:	4798      	blx	r3
    a328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a32c:	2204      	movs	r2, #4
    a32e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a332:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    a334:	4b7d      	ldr	r3, [pc, #500]	; (a52c <_usb_d_dev_handler+0x26c>)
    a336:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    a33a:	4798      	blx	r3
    a33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a340:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a344:	f240 2201 	movw	r2, #513	; 0x201
    a348:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a34a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a34c:	2270      	movs	r2, #112	; 0x70
    a34e:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    a350:	4b76      	ldr	r3, [pc, #472]	; (a52c <_usb_d_dev_handler+0x26c>)
    a352:	891b      	ldrh	r3, [r3, #8]
    a354:	f003 030f 	and.w	r3, r3, #15
    a358:	2b03      	cmp	r3, #3
    a35a:	d014      	beq.n	a386 <_usb_d_dev_handler+0xc6>
    a35c:	2301      	movs	r3, #1
    a35e:	4873      	ldr	r0, [pc, #460]	; (a52c <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    a360:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    a362:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    a366:	8912      	ldrh	r2, [r2, #8]
    a368:	f002 020f 	and.w	r2, r2, #15
    a36c:	2a03      	cmp	r2, #3
    a36e:	d00b      	beq.n	a388 <_usb_d_dev_handler+0xc8>
    a370:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    a372:	2b05      	cmp	r3, #5
    a374:	d1f4      	bne.n	a360 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    a376:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    a378:	4b6c      	ldr	r3, [pc, #432]	; (a52c <_usb_d_dev_handler+0x26c>)
    a37a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    a37e:	2003      	movs	r0, #3
    a380:	4798      	blx	r3
    a382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    a386:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    a388:	4b68      	ldr	r3, [pc, #416]	; (a52c <_usb_d_dev_handler+0x26c>)
    a38a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    a38e:	8919      	ldrh	r1, [r3, #8]
    a390:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    a394:	2200      	movs	r2, #0
    a396:	811a      	strh	r2, [r3, #8]
    a398:	e7ee      	b.n	a378 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a39a:	2280      	movs	r2, #128	; 0x80
    a39c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a3a0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    a3a2:	4b62      	ldr	r3, [pc, #392]	; (a52c <_usb_d_dev_handler+0x26c>)
    a3a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    a3a8:	2100      	movs	r1, #0
    a3aa:	2005      	movs	r0, #5
    a3ac:	4798      	blx	r3
    a3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a3b2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a3b6:	2270      	movs	r2, #112	; 0x70
    a3b8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a3ba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a3bc:	f240 2201 	movw	r2, #513	; 0x201
    a3c0:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    a3c2:	4b5b      	ldr	r3, [pc, #364]	; (a530 <_usb_d_dev_handler+0x270>)
    a3c4:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    a3c8:	f013 0f01 	tst.w	r3, #1
    a3cc:	d00e      	beq.n	a3ec <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a3ce:	4a58      	ldr	r2, [pc, #352]	; (a530 <_usb_d_dev_handler+0x270>)
    a3d0:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    a3d2:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    a3d6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a3da:	d1f9      	bne.n	a3d0 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    a3dc:	4b53      	ldr	r3, [pc, #332]	; (a52c <_usb_d_dev_handler+0x26c>)
    a3de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    a3e2:	2100      	movs	r1, #0
    a3e4:	2002      	movs	r0, #2
    a3e6:	4798      	blx	r3
    a3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a3ec:	4a50      	ldr	r2, [pc, #320]	; (a530 <_usb_d_dev_handler+0x270>)
    a3ee:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    a3f0:	f413 7f80 	tst.w	r3, #256	; 0x100
    a3f4:	d0fb      	beq.n	a3ee <_usb_d_dev_handler+0x12e>
    a3f6:	e7f1      	b.n	a3dc <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a3f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a3fc:	2400      	movs	r4, #0
    a3fe:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a402:	2208      	movs	r2, #8
    a404:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a406:	2270      	movs	r2, #112	; 0x70
    a408:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a40a:	f240 2201 	movw	r2, #513	; 0x201
    a40e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    a410:	4b48      	ldr	r3, [pc, #288]	; (a534 <_usb_d_dev_handler+0x274>)
    a412:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    a414:	4b45      	ldr	r3, [pc, #276]	; (a52c <_usb_d_dev_handler+0x26c>)
    a416:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    a41a:	4621      	mov	r1, r4
    a41c:	2001      	movs	r0, #1
    a41e:	4798      	blx	r3
    a420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a424:	f011 0f10 	tst.w	r1, #16
    a428:	d109      	bne.n	a43e <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a42a:	f011 0f40 	tst.w	r1, #64	; 0x40
    a42e:	d108      	bne.n	a442 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a430:	f011 0f20 	tst.w	r1, #32
    a434:	d02f      	beq.n	a496 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    a436:	2100      	movs	r1, #0
    a438:	4b3f      	ldr	r3, [pc, #252]	; (a538 <_usb_d_dev_handler+0x278>)
    a43a:	4798      	blx	r3
    a43c:	e02b      	b.n	a496 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    a43e:	47c8      	blx	r9
    a440:	e029      	b.n	a496 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    a442:	2101      	movs	r1, #1
    a444:	4b3c      	ldr	r3, [pc, #240]	; (a538 <_usb_d_dev_handler+0x278>)
    a446:	4798      	blx	r3
    a448:	e025      	b.n	a496 <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a44a:	f011 0f40 	tst.w	r1, #64	; 0x40
    a44e:	d111      	bne.n	a474 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a450:	f011 0f08 	tst.w	r1, #8
    a454:	d112      	bne.n	a47c <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a456:	f011 0f02 	tst.w	r1, #2
    a45a:	d112      	bne.n	a482 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a45c:	f003 0307 	and.w	r3, r3, #7
    a460:	2b01      	cmp	r3, #1
    a462:	d118      	bne.n	a496 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a464:	f011 0f04 	tst.w	r1, #4
    a468:	d10f      	bne.n	a48a <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a46a:	f011 0f10 	tst.w	r1, #16
    a46e:	d012      	beq.n	a496 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    a470:	47c8      	blx	r9
    a472:	e010      	b.n	a496 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    a474:	2101      	movs	r1, #1
    a476:	4b30      	ldr	r3, [pc, #192]	; (a538 <_usb_d_dev_handler+0x278>)
    a478:	4798      	blx	r3
    a47a:	e00c      	b.n	a496 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    a47c:	2101      	movs	r1, #1
    a47e:	47c0      	blx	r8
    a480:	e009      	b.n	a496 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    a482:	2101      	movs	r1, #1
    a484:	4b2d      	ldr	r3, [pc, #180]	; (a53c <_usb_d_dev_handler+0x27c>)
    a486:	4798      	blx	r3
    a488:	e005      	b.n	a496 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    a48a:	2100      	movs	r1, #0
    a48c:	47c0      	blx	r8
    a48e:	e002      	b.n	a496 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    a490:	2100      	movs	r1, #0
    a492:	4b29      	ldr	r3, [pc, #164]	; (a538 <_usb_d_dev_handler+0x278>)
    a494:	4798      	blx	r3
    a496:	3401      	adds	r4, #1
    a498:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    a49a:	2c1b      	cmp	r4, #27
    a49c:	d042      	beq.n	a524 <_usb_d_dev_handler+0x264>
    a49e:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    a4a0:	7cab      	ldrb	r3, [r5, #18]
    a4a2:	2bff      	cmp	r3, #255	; 0xff
    a4a4:	d0f7      	beq.n	a496 <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    a4a6:	f003 030f 	and.w	r3, r3, #15
    a4aa:	2101      	movs	r1, #1
    a4ac:	4099      	lsls	r1, r3
    a4ae:	4231      	tst	r1, r6
    a4b0:	d0f1      	beq.n	a496 <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a4b2:	0159      	lsls	r1, r3, #5
    a4b4:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    a4b8:	f501 7180 	add.w	r1, r1, #256	; 0x100
    a4bc:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a4be:	015b      	lsls	r3, r3, #5
    a4c0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a4c4:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    a4c8:	4019      	ands	r1, r3
    a4ca:	d0e4      	beq.n	a496 <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a4cc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    a4d0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    a4d4:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    a4d8:	f003 0247 	and.w	r2, r3, #71	; 0x47
    a4dc:	2a01      	cmp	r2, #1
    a4de:	d0a1      	beq.n	a424 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a4e0:	f013 0f80 	tst.w	r3, #128	; 0x80
    a4e4:	d1b1      	bne.n	a44a <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a4e6:	f011 0f20 	tst.w	r1, #32
    a4ea:	d1d1      	bne.n	a490 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a4ec:	f011 0f04 	tst.w	r1, #4
    a4f0:	d10e      	bne.n	a510 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a4f2:	f011 0f01 	tst.w	r1, #1
    a4f6:	d10e      	bne.n	a516 <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a4f8:	f003 0307 	and.w	r3, r3, #7
    a4fc:	2b01      	cmp	r3, #1
    a4fe:	d1ca      	bne.n	a496 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a500:	f011 0f08 	tst.w	r1, #8
    a504:	d10b      	bne.n	a51e <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a506:	f011 0f10 	tst.w	r1, #16
    a50a:	d0c4      	beq.n	a496 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    a50c:	47c8      	blx	r9
    a50e:	e7c2      	b.n	a496 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    a510:	2100      	movs	r1, #0
    a512:	47c0      	blx	r8
    a514:	e7bf      	b.n	a496 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    a516:	2101      	movs	r1, #1
    a518:	4b09      	ldr	r3, [pc, #36]	; (a540 <_usb_d_dev_handler+0x280>)
    a51a:	4798      	blx	r3
    a51c:	e7bb      	b.n	a496 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    a51e:	2101      	movs	r1, #1
    a520:	47c0      	blx	r8
    a522:	e7b8      	b.n	a496 <_usb_d_dev_handler+0x1d6>
    a524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a528:	20000b04 	.word	0x20000b04
    a52c:	20000a30 	.word	0x20000a30
    a530:	40001000 	.word	0x40001000
    a534:	00009f09 	.word	0x00009f09
    a538:	00009d41 	.word	0x00009d41
    a53c:	00009f4d 	.word	0x00009f4d
    a540:	0000a0d1 	.word	0x0000a0d1
    a544:	00009cc1 	.word	0x00009cc1
    a548:	00009e09 	.word	0x00009e09

0000a54c <_usb_d_dev_init>:
{
    a54c:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    a54e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a552:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a554:	f013 0f01 	tst.w	r3, #1
    a558:	d124      	bne.n	a5a4 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a55a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a55e:	7893      	ldrb	r3, [r2, #2]
    a560:	f013 0f03 	tst.w	r3, #3
    a564:	d1fb      	bne.n	a55e <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    a566:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a56a:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a56c:	f013 0f02 	tst.w	r3, #2
    a570:	d00f      	beq.n	a592 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    a572:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a576:	7813      	ldrb	r3, [r2, #0]
    a578:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a57c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a57e:	7893      	ldrb	r3, [r2, #2]
    a580:	f013 0f03 	tst.w	r3, #3
    a584:	d1fb      	bne.n	a57e <_usb_d_dev_init+0x32>
    a586:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a58a:	7893      	ldrb	r3, [r2, #2]
    a58c:	f013 0f02 	tst.w	r3, #2
    a590:	d1fb      	bne.n	a58a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a592:	2201      	movs	r2, #1
    a594:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a598:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a59a:	461a      	mov	r2, r3
    a59c:	7893      	ldrb	r3, [r2, #2]
    a59e:	f013 0f03 	tst.w	r3, #3
    a5a2:	d1fb      	bne.n	a59c <_usb_d_dev_init+0x50>
    a5a4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a5a8:	7893      	ldrb	r3, [r2, #2]
    a5aa:	f013 0f01 	tst.w	r3, #1
    a5ae:	d1fb      	bne.n	a5a8 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a5b0:	4b24      	ldr	r3, [pc, #144]	; (a644 <_usb_d_dev_init+0xf8>)
    a5b2:	4a25      	ldr	r2, [pc, #148]	; (a648 <_usb_d_dev_init+0xfc>)
    a5b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a5b8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a5bc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a5c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a5c4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    a5c8:	4b20      	ldr	r3, [pc, #128]	; (a64c <_usb_d_dev_init+0x100>)
    a5ca:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    a5cc:	4b20      	ldr	r3, [pc, #128]	; (a650 <_usb_d_dev_init+0x104>)
    a5ce:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    a5d0:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    a5d4:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    a5d8:	f011 011f 	ands.w	r1, r1, #31
    a5dc:	d02b      	beq.n	a636 <_usb_d_dev_init+0xea>
		pad_transn = 9;
    a5de:	291f      	cmp	r1, #31
    a5e0:	bf08      	it	eq
    a5e2:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    a5e4:	b34b      	cbz	r3, a63a <_usb_d_dev_init+0xee>
		pad_transp = 25;
    a5e6:	2b1f      	cmp	r3, #31
    a5e8:	bf08      	it	eq
    a5ea:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    a5ec:	b33a      	cbz	r2, a63e <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    a5ee:	2a07      	cmp	r2, #7
    a5f0:	bf08      	it	eq
    a5f2:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    a5f4:	f003 031f 	and.w	r3, r3, #31
    a5f8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    a5fc:	0312      	lsls	r2, r2, #12
    a5fe:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    a602:	4313      	orrs	r3, r2
    a604:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a608:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    a60a:	78d3      	ldrb	r3, [r2, #3]
    a60c:	f043 0303 	orr.w	r3, r3, #3
    a610:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    a612:	78d3      	ldrb	r3, [r2, #3]
    a614:	f043 030c 	orr.w	r3, r3, #12
    a618:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a61a:	2304      	movs	r3, #4
    a61c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a61e:	7893      	ldrb	r3, [r2, #2]
    a620:	f013 0f03 	tst.w	r3, #3
    a624:	d1fb      	bne.n	a61e <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    a626:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a62a:	4a06      	ldr	r2, [pc, #24]	; (a644 <_usb_d_dev_init+0xf8>)
    a62c:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    a62e:	2201      	movs	r2, #1
    a630:	811a      	strh	r2, [r3, #8]
}
    a632:	2000      	movs	r0, #0
    a634:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    a636:	2109      	movs	r1, #9
    a638:	e7d4      	b.n	a5e4 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    a63a:	2319      	movs	r3, #25
    a63c:	e7d6      	b.n	a5ec <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    a63e:	2206      	movs	r2, #6
    a640:	e7d8      	b.n	a5f4 <_usb_d_dev_init+0xa8>
    a642:	bf00      	nop
    a644:	20000a30 	.word	0x20000a30
    a648:	00009cbd 	.word	0x00009cbd
    a64c:	00009f09 	.word	0x00009f09
    a650:	00800084 	.word	0x00800084

0000a654 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    a654:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a658:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a65a:	f013 0f03 	tst.w	r3, #3
    a65e:	d129      	bne.n	a6b4 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a660:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a664:	7893      	ldrb	r3, [r2, #2]
    a666:	f013 0f03 	tst.w	r3, #3
    a66a:	d1fb      	bne.n	a664 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    a66c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a670:	781b      	ldrb	r3, [r3, #0]
    a672:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a674:	f013 0f02 	tst.w	r3, #2
    a678:	d108      	bne.n	a68c <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a67a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a67e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a682:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a684:	7893      	ldrb	r3, [r2, #2]
    a686:	f013 0f03 	tst.w	r3, #3
    a68a:	d1fb      	bne.n	a684 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a68c:	4b0b      	ldr	r3, [pc, #44]	; (a6bc <_usb_d_dev_enable+0x68>)
    a68e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a692:	609a      	str	r2, [r3, #8]
    a694:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a698:	609a      	str	r2, [r3, #8]
    a69a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    a69e:	609a      	str	r2, [r3, #8]
    a6a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    a6a4:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a6a6:	f240 228d 	movw	r2, #653	; 0x28d
    a6aa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a6ae:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    a6b0:	2000      	movs	r0, #0
    a6b2:	4770      	bx	lr
		return -USB_ERR_DENIED;
    a6b4:	f06f 0010 	mvn.w	r0, #16
}
    a6b8:	4770      	bx	lr
    a6ba:	bf00      	nop
    a6bc:	e000e100 	.word	0xe000e100

0000a6c0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    a6c0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a6c4:	8913      	ldrh	r3, [r2, #8]
    a6c6:	f023 0301 	bic.w	r3, r3, #1
    a6ca:	041b      	lsls	r3, r3, #16
    a6cc:	0c1b      	lsrs	r3, r3, #16
    a6ce:	8113      	strh	r3, [r2, #8]
    a6d0:	4770      	bx	lr

0000a6d2 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a6d2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    a6d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a6da:	7298      	strb	r0, [r3, #10]
    a6dc:	4770      	bx	lr

0000a6de <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    a6de:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a6e2:	8a18      	ldrh	r0, [r3, #16]
}
    a6e4:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    a6e8:	4770      	bx	lr
	...

0000a6ec <_usb_d_dev_ep_init>:
{
    a6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6ee:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a6f2:	f010 050f 	ands.w	r5, r0, #15
    a6f6:	d04d      	beq.n	a794 <_usb_d_dev_ep_init+0xa8>
    a6f8:	f1be 0f00 	cmp.w	lr, #0
    a6fc:	bfb4      	ite	lt
    a6fe:	1d6c      	addlt	r4, r5, #5
    a700:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a702:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a706:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    a708:	2d05      	cmp	r5, #5
    a70a:	d947      	bls.n	a79c <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    a70c:	f06f 0011 	mvn.w	r0, #17
    a710:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a712:	f1be 0f00 	cmp.w	lr, #0
    a716:	db1b      	blt.n	a750 <_usb_d_dev_ep_init+0x64>
    a718:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    a71c:	4e37      	ldr	r6, [pc, #220]	; (a7fc <_usb_d_dev_ep_init+0x110>)
    a71e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    a722:	2d00      	cmp	r5, #0
    a724:	d15e      	bne.n	a7e4 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a72a:	4d34      	ldr	r5, [pc, #208]	; (a7fc <_usb_d_dev_ep_init+0x110>)
    a72c:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    a730:	4d33      	ldr	r5, [pc, #204]	; (a800 <_usb_d_dev_ep_init+0x114>)
    a732:	00a6      	lsls	r6, r4, #2
    a734:	1933      	adds	r3, r6, r4
    a736:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    a73a:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    a73e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    a742:	3101      	adds	r1, #1
    a744:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    a748:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    a74c:	2000      	movs	r0, #0
    a74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a750:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    a754:	4e29      	ldr	r6, [pc, #164]	; (a7fc <_usb_d_dev_ep_init+0x110>)
    a756:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    a75a:	686d      	ldr	r5, [r5, #4]
    a75c:	b935      	cbnz	r5, a76c <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a75e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a762:	4d26      	ldr	r5, [pc, #152]	; (a7fc <_usb_d_dev_ep_init+0x110>)
    a764:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    a768:	685f      	ldr	r7, [r3, #4]
    a76a:	e7e1      	b.n	a730 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a76c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    a770:	4e22      	ldr	r6, [pc, #136]	; (a7fc <_usb_d_dev_ep_init+0x110>)
    a772:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    a776:	896d      	ldrh	r5, [r5, #10]
    a778:	4295      	cmp	r5, r2
    a77a:	daf0      	bge.n	a75e <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    a77c:	f06f 0012 	mvn.w	r0, #18
    a780:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    a782:	f06f 0013 	mvn.w	r0, #19
    a786:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    a788:	f06f 0013 	mvn.w	r0, #19
    a78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    a78e:	f06f 0012 	mvn.w	r0, #18
    a792:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a794:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    a798:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a79a:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    a79c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    a7a0:	4f17      	ldr	r7, [pc, #92]	; (a800 <_usb_d_dev_ep_init+0x114>)
    a7a2:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    a7a6:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    a7aa:	2eff      	cmp	r6, #255	; 0xff
    a7ac:	d1e9      	bne.n	a782 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a7ae:	2900      	cmp	r1, #0
    a7b0:	d1af      	bne.n	a712 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a7b2:	b125      	cbz	r5, a7be <_usb_d_dev_ep_init+0xd2>
    a7b4:	f1be 0f00 	cmp.w	lr, #0
    a7b8:	bfa4      	itt	ge
    a7ba:	3505      	addge	r5, #5
    a7bc:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    a7be:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    a7c2:	4e0f      	ldr	r6, [pc, #60]	; (a800 <_usb_d_dev_ep_init+0x114>)
    a7c4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    a7c8:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    a7cc:	2dff      	cmp	r5, #255	; 0xff
    a7ce:	d1db      	bne.n	a788 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    a7d0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    a7d4:	4e09      	ldr	r6, [pc, #36]	; (a7fc <_usb_d_dev_ep_init+0x110>)
    a7d6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    a7da:	2d00      	cmp	r5, #0
    a7dc:	d0d7      	beq.n	a78e <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a7de:	f1be 0f00 	cmp.w	lr, #0
    a7e2:	dbb5      	blt.n	a750 <_usb_d_dev_ep_init+0x64>
    a7e4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    a7e8:	4e04      	ldr	r6, [pc, #16]	; (a7fc <_usb_d_dev_ep_init+0x110>)
    a7ea:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    a7ee:	892d      	ldrh	r5, [r5, #8]
    a7f0:	4295      	cmp	r5, r2
    a7f2:	da98      	bge.n	a726 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    a7f4:	f06f 0012 	mvn.w	r0, #18
    a7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7fa:	bf00      	nop
    a7fc:	0000f478 	.word	0x0000f478
    a800:	20000a30 	.word	0x20000a30

0000a804 <_usb_d_dev_ep_deinit>:
{
    a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a806:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a808:	f010 060f 	ands.w	r6, r0, #15
    a80c:	d00e      	beq.n	a82c <_usb_d_dev_ep_deinit+0x28>
    a80e:	2f00      	cmp	r7, #0
    a810:	bfb4      	ite	lt
    a812:	1d73      	addlt	r3, r6, #5
    a814:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a816:	2e05      	cmp	r6, #5
    a818:	d900      	bls.n	a81c <_usb_d_dev_ep_deinit+0x18>
    a81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    a81c:	461d      	mov	r5, r3
    a81e:	3301      	adds	r3, #1
    a820:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a824:	4a24      	ldr	r2, [pc, #144]	; (a8b8 <_usb_d_dev_ep_deinit+0xb4>)
    a826:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    a82a:	e002      	b.n	a832 <_usb_d_dev_ep_deinit+0x2e>
    a82c:	f8df e094 	ldr.w	lr, [pc, #148]	; a8c4 <_usb_d_dev_ep_deinit+0xc0>
    a830:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a832:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    a836:	4a21      	ldr	r2, [pc, #132]	; (a8bc <_usb_d_dev_ep_deinit+0xb8>)
    a838:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a83c:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    a840:	2aff      	cmp	r2, #255	; 0xff
    a842:	d0ea      	beq.n	a81a <_usb_d_dev_ep_deinit+0x16>
    a844:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a846:	2203      	movs	r2, #3
    a848:	0ff9      	lsrs	r1, r7, #31
    a84a:	4670      	mov	r0, lr
    a84c:	4b1c      	ldr	r3, [pc, #112]	; (a8c0 <_usb_d_dev_ep_deinit+0xbc>)
    a84e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a850:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    a854:	4a19      	ldr	r2, [pc, #100]	; (a8bc <_usb_d_dev_ep_deinit+0xb8>)
    a856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a85a:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    a85e:	f003 0307 	and.w	r3, r3, #7
    a862:	2b01      	cmp	r3, #1
    a864:	d016      	beq.n	a894 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    a866:	2f00      	cmp	r7, #0
    a868:	db1b      	blt.n	a8a2 <_usb_d_dev_ep_deinit+0x9e>
    a86a:	0160      	lsls	r0, r4, #5
    a86c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a870:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    a874:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    a878:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    a87c:	4b0f      	ldr	r3, [pc, #60]	; (a8bc <_usb_d_dev_ep_deinit+0xb8>)
    a87e:	00aa      	lsls	r2, r5, #2
    a880:	1951      	adds	r1, r2, r5
    a882:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a886:	2000      	movs	r0, #0
    a888:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    a88c:	22ff      	movs	r2, #255	; 0xff
    a88e:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    a892:	e7c2      	b.n	a81a <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a894:	0160      	lsls	r0, r4, #5
    a896:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    a89a:	2300      	movs	r3, #0
    a89c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    a8a0:	e7ec      	b.n	a87c <_usb_d_dev_ep_deinit+0x78>
    a8a2:	0176      	lsls	r6, r6, #5
    a8a4:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a8a8:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    a8ac:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    a8b0:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    a8b4:	e7e2      	b.n	a87c <_usb_d_dev_ep_deinit+0x78>
    a8b6:	bf00      	nop
    a8b8:	20000af0 	.word	0x20000af0
    a8bc:	20000a30 	.word	0x20000a30
    a8c0:	00009d9d 	.word	0x00009d9d
    a8c4:	20000b04 	.word	0x20000b04

0000a8c8 <_usb_d_dev_ep_enable>:
{
    a8c8:	b4f0      	push	{r4, r5, r6, r7}
    a8ca:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a8cc:	f010 000f 	ands.w	r0, r0, #15
    a8d0:	f000 80a7 	beq.w	aa22 <_usb_d_dev_ep_enable+0x15a>
    a8d4:	2e00      	cmp	r6, #0
    a8d6:	bfb4      	ite	lt
    a8d8:	1d43      	addlt	r3, r0, #5
    a8da:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a8dc:	4605      	mov	r5, r0
    a8de:	0142      	lsls	r2, r0, #5
    a8e0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    a8e4:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    a8e8:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a8ea:	2805      	cmp	r0, #5
    a8ec:	f240 80a0 	bls.w	aa30 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    a8f0:	f06f 0011 	mvn.w	r0, #17
    a8f4:	e07d      	b.n	a9f2 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a8f6:	f014 0f77 	tst.w	r4, #119	; 0x77
    a8fa:	f040 8089 	bne.w	aa10 <_usb_d_dev_ep_enable+0x148>
    a8fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a902:	2111      	movs	r1, #17
    a904:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a908:	4c9b      	ldr	r4, [pc, #620]	; (ab78 <_usb_d_dev_ep_enable+0x2b0>)
    a90a:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    a90e:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    a912:	4c9a      	ldr	r4, [pc, #616]	; (ab7c <_usb_d_dev_ep_enable+0x2b4>)
    a914:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a918:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    a91c:	f200 80cd 	bhi.w	aaba <_usb_d_dev_ep_enable+0x1f2>
    a920:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a924:	f200 8112 	bhi.w	ab4c <_usb_d_dev_ep_enable+0x284>
    a928:	2980      	cmp	r1, #128	; 0x80
    a92a:	f200 8101 	bhi.w	ab30 <_usb_d_dev_ep_enable+0x268>
    a92e:	2940      	cmp	r1, #64	; 0x40
    a930:	f200 8113 	bhi.w	ab5a <_usb_d_dev_ep_enable+0x292>
    a934:	2920      	cmp	r1, #32
    a936:	f200 8102 	bhi.w	ab3e <_usb_d_dev_ep_enable+0x276>
    a93a:	2910      	cmp	r1, #16
    a93c:	f200 8114 	bhi.w	ab68 <_usb_d_dev_ep_enable+0x2a0>
    a940:	2908      	cmp	r1, #8
    a942:	bf94      	ite	ls
    a944:	2600      	movls	r6, #0
    a946:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a948:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a94c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a94e:	f3c1 010d 	ubfx	r1, r1, #0, #14
    a952:	e0b8      	b.n	aac6 <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a954:	f014 0f70 	tst.w	r4, #112	; 0x70
    a958:	d15d      	bne.n	aa16 <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a95a:	4e87      	ldr	r6, [pc, #540]	; (ab78 <_usb_d_dev_ep_enable+0x2b0>)
    a95c:	009f      	lsls	r7, r3, #2
    a95e:	18f9      	adds	r1, r7, r3
    a960:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    a964:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    a968:	0109      	lsls	r1, r1, #4
    a96a:	f001 0170 	and.w	r1, r1, #112	; 0x70
    a96e:	430c      	orrs	r4, r1
    a970:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    a974:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a978:	443b      	add	r3, r7
    a97a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    a97e:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    a982:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a98a:	d80f      	bhi.n	a9ac <_usb_d_dev_ep_enable+0xe4>
    a98c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a990:	d819      	bhi.n	a9c6 <_usb_d_dev_ep_enable+0xfe>
    a992:	2b80      	cmp	r3, #128	; 0x80
    a994:	d819      	bhi.n	a9ca <_usb_d_dev_ep_enable+0x102>
    a996:	2b40      	cmp	r3, #64	; 0x40
    a998:	d819      	bhi.n	a9ce <_usb_d_dev_ep_enable+0x106>
    a99a:	2b20      	cmp	r3, #32
    a99c:	d819      	bhi.n	a9d2 <_usb_d_dev_ep_enable+0x10a>
    a99e:	2b10      	cmp	r3, #16
    a9a0:	d819      	bhi.n	a9d6 <_usb_d_dev_ep_enable+0x10e>
    a9a2:	2b08      	cmp	r3, #8
    a9a4:	bf94      	ite	ls
    a9a6:	2300      	movls	r3, #0
    a9a8:	2301      	movhi	r3, #1
    a9aa:	e000      	b.n	a9ae <_usb_d_dev_ep_enable+0xe6>
    a9ac:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a9ae:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    a9b2:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a9b4:	2380      	movs	r3, #128	; 0x80
    a9b6:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    a9ba:	4b6f      	ldr	r3, [pc, #444]	; (ab78 <_usb_d_dev_ep_enable+0x2b0>)
    a9bc:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    a9c0:	2000      	movs	r0, #0
    a9c2:	76a8      	strb	r0, [r5, #26]
    a9c4:	e015      	b.n	a9f2 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a9c6:	2306      	movs	r3, #6
    a9c8:	e7f1      	b.n	a9ae <_usb_d_dev_ep_enable+0xe6>
    a9ca:	2305      	movs	r3, #5
    a9cc:	e7ef      	b.n	a9ae <_usb_d_dev_ep_enable+0xe6>
    a9ce:	2304      	movs	r3, #4
    a9d0:	e7ed      	b.n	a9ae <_usb_d_dev_ep_enable+0xe6>
    a9d2:	2303      	movs	r3, #3
    a9d4:	e7eb      	b.n	a9ae <_usb_d_dev_ep_enable+0xe6>
    a9d6:	2302      	movs	r3, #2
    a9d8:	e7e9      	b.n	a9ae <_usb_d_dev_ep_enable+0xe6>
    a9da:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a9dc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a9e0:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a9e2:	2340      	movs	r3, #64	; 0x40
    a9e4:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    a9e8:	4b63      	ldr	r3, [pc, #396]	; (ab78 <_usb_d_dev_ep_enable+0x2b0>)
    a9ea:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    a9ee:	2000      	movs	r0, #0
    a9f0:	72a8      	strb	r0, [r5, #10]
}
    a9f2:	bcf0      	pop	{r4, r5, r6, r7}
    a9f4:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a9f6:	2106      	movs	r1, #6
    a9f8:	e7f0      	b.n	a9dc <_usb_d_dev_ep_enable+0x114>
    a9fa:	2105      	movs	r1, #5
    a9fc:	e7ee      	b.n	a9dc <_usb_d_dev_ep_enable+0x114>
    a9fe:	2104      	movs	r1, #4
    aa00:	e7ec      	b.n	a9dc <_usb_d_dev_ep_enable+0x114>
    aa02:	2103      	movs	r1, #3
    aa04:	e7ea      	b.n	a9dc <_usb_d_dev_ep_enable+0x114>
    aa06:	2102      	movs	r1, #2
    aa08:	e7e8      	b.n	a9dc <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    aa0a:	f06f 0011 	mvn.w	r0, #17
    aa0e:	e7f0      	b.n	a9f2 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    aa10:	f06f 0013 	mvn.w	r0, #19
    aa14:	e7ed      	b.n	a9f2 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    aa16:	f06f 0013 	mvn.w	r0, #19
    aa1a:	e7ea      	b.n	a9f2 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    aa1c:	f06f 0013 	mvn.w	r0, #19
    aa20:	e7e7      	b.n	a9f2 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    aa22:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa26:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    aa2a:	b2e4      	uxtb	r4, r4
    aa2c:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    aa2e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    aa30:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    aa34:	4950      	ldr	r1, [pc, #320]	; (ab78 <_usb_d_dev_ep_enable+0x2b0>)
    aa36:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    aa3a:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    aa3e:	2aff      	cmp	r2, #255	; 0xff
    aa40:	d0e3      	beq.n	aa0a <_usb_d_dev_ep_enable+0x142>
    aa42:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    aa44:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    aa46:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    aa4a:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    aa4e:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    aa52:	f001 0107 	and.w	r1, r1, #7
    aa56:	2901      	cmp	r1, #1
    aa58:	f43f af4d 	beq.w	a8f6 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    aa5c:	2e00      	cmp	r6, #0
    aa5e:	f6ff af79 	blt.w	a954 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    aa62:	f014 0f07 	tst.w	r4, #7
    aa66:	d1d9      	bne.n	aa1c <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    aa68:	4e43      	ldr	r6, [pc, #268]	; (ab78 <_usb_d_dev_ep_enable+0x2b0>)
    aa6a:	009f      	lsls	r7, r3, #2
    aa6c:	18f9      	adds	r1, r7, r3
    aa6e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    aa72:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    aa76:	f001 0107 	and.w	r1, r1, #7
    aa7a:	430c      	orrs	r4, r1
    aa7c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    aa80:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aa84:	443b      	add	r3, r7
    aa86:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    aa8a:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    aa8e:	4b3b      	ldr	r3, [pc, #236]	; (ab7c <_usb_d_dev_ep_enable+0x2b4>)
    aa90:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    aa94:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    aa98:	d89f      	bhi.n	a9da <_usb_d_dev_ep_enable+0x112>
    aa9a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    aa9e:	d8aa      	bhi.n	a9f6 <_usb_d_dev_ep_enable+0x12e>
    aaa0:	2980      	cmp	r1, #128	; 0x80
    aaa2:	d8aa      	bhi.n	a9fa <_usb_d_dev_ep_enable+0x132>
    aaa4:	2940      	cmp	r1, #64	; 0x40
    aaa6:	d8aa      	bhi.n	a9fe <_usb_d_dev_ep_enable+0x136>
    aaa8:	2920      	cmp	r1, #32
    aaaa:	d8aa      	bhi.n	aa02 <_usb_d_dev_ep_enable+0x13a>
    aaac:	2910      	cmp	r1, #16
    aaae:	d8aa      	bhi.n	aa06 <_usb_d_dev_ep_enable+0x13e>
    aab0:	2908      	cmp	r1, #8
    aab2:	bf94      	ite	ls
    aab4:	2100      	movls	r1, #0
    aab6:	2101      	movhi	r1, #1
    aab8:	e790      	b.n	a9dc <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aaba:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aabe:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aac0:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    aac4:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aac6:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    aaca:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    aacc:	2640      	movs	r6, #64	; 0x40
    aace:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    aad2:	2180      	movs	r1, #128	; 0x80
    aad4:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    aad8:	4f27      	ldr	r7, [pc, #156]	; (ab78 <_usb_d_dev_ep_enable+0x2b0>)
    aada:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    aade:	2000      	movs	r0, #0
    aae0:	72a8      	strb	r0, [r5, #10]
    aae2:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aae4:	009c      	lsls	r4, r3, #2
    aae6:	18e1      	adds	r1, r4, r3
    aae8:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    aaec:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    aaf0:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    aaf4:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    aaf8:	0152      	lsls	r2, r2, #5
    aafa:	18b9      	adds	r1, r7, r2
    aafc:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    aafe:	4423      	add	r3, r4
    ab00:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    ab04:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    ab08:	684b      	ldr	r3, [r1, #4]
    ab0a:	f364 339b 	bfi	r3, r4, #14, #14
    ab0e:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    ab10:	684b      	ldr	r3, [r1, #4]
    ab12:	f360 030d 	bfi	r3, r0, #0, #14
    ab16:	604b      	str	r3, [r1, #4]
    ab18:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    ab1c:	21b0      	movs	r1, #176	; 0xb0
    ab1e:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    ab22:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    ab26:	461a      	mov	r2, r3
    ab28:	2310      	movs	r3, #16
    ab2a:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    ab2e:	e760      	b.n	a9f2 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab30:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ab34:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab36:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ab3a:	2605      	movs	r6, #5
    ab3c:	e7c3      	b.n	aac6 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab3e:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ab42:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab44:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ab48:	2603      	movs	r6, #3
    ab4a:	e7bc      	b.n	aac6 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab4c:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ab50:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab52:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ab56:	2606      	movs	r6, #6
    ab58:	e7b5      	b.n	aac6 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab5a:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ab5e:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab60:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ab64:	2604      	movs	r6, #4
    ab66:	e7ae      	b.n	aac6 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab68:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ab6c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab6e:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ab72:	2602      	movs	r6, #2
    ab74:	e7a7      	b.n	aac6 <_usb_d_dev_ep_enable+0x1fe>
    ab76:	bf00      	nop
    ab78:	20000a30 	.word	0x20000a30
    ab7c:	0fffc000 	.word	0x0fffc000

0000ab80 <_usb_d_dev_ep_stall>:
{
    ab80:	b470      	push	{r4, r5, r6}
    ab82:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    ab84:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    ab86:	f010 000f 	ands.w	r0, r0, #15
    ab8a:	d008      	beq.n	ab9e <_usb_d_dev_ep_stall+0x1e>
    ab8c:	2b00      	cmp	r3, #0
    ab8e:	bfb4      	ite	lt
    ab90:	1d43      	addlt	r3, r0, #5
    ab92:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    ab94:	2805      	cmp	r0, #5
    ab96:	d903      	bls.n	aba0 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    ab98:	f06f 0011 	mvn.w	r0, #17
    ab9c:	e018      	b.n	abd0 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    ab9e:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    aba0:	2901      	cmp	r1, #1
    aba2:	d017      	beq.n	abd4 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    aba4:	2900      	cmp	r1, #0
    aba6:	d03a      	beq.n	ac1e <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aba8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    abac:	4a45      	ldr	r2, [pc, #276]	; (acc4 <_usb_d_dev_ep_stall+0x144>)
    abae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    abb2:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    abb6:	f003 030f 	and.w	r3, r3, #15
    abba:	015b      	lsls	r3, r3, #5
    abbc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    abc0:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    abc4:	2310      	movs	r3, #16
    abc6:	40a3      	lsls	r3, r4
    abc8:	421a      	tst	r2, r3
    abca:	bf14      	ite	ne
    abcc:	2001      	movne	r0, #1
    abce:	2000      	moveq	r0, #0
}
    abd0:	bc70      	pop	{r4, r5, r6}
    abd2:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    abd4:	2510      	movs	r5, #16
    abd6:	40a5      	lsls	r5, r4
    abd8:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    abda:	493a      	ldr	r1, [pc, #232]	; (acc4 <_usb_d_dev_ep_stall+0x144>)
    abdc:	009e      	lsls	r6, r3, #2
    abde:	18f2      	adds	r2, r6, r3
    abe0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    abe4:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    abe8:	f002 020f 	and.w	r2, r2, #15
    abec:	0150      	lsls	r0, r2, #5
    abee:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    abf2:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    abf6:	2020      	movs	r0, #32
    abf8:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    abfc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    abfe:	0152      	lsls	r2, r2, #5
    ac00:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    ac04:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    ac08:	4433      	add	r3, r6
    ac0a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    ac0e:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    ac12:	f042 0208 	orr.w	r2, r2, #8
    ac16:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    ac1a:	2000      	movs	r0, #0
    ac1c:	e7d8      	b.n	abd0 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    ac1e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    ac22:	4928      	ldr	r1, [pc, #160]	; (acc4 <_usb_d_dev_ep_stall+0x144>)
    ac24:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    ac28:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    ac2c:	f002 020f 	and.w	r2, r2, #15
    ac30:	0151      	lsls	r1, r2, #5
    ac32:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    ac36:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    ac3a:	2010      	movs	r0, #16
    ac3c:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    ac3e:	4205      	tst	r5, r0
    ac40:	d03c      	beq.n	acbc <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    ac42:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    ac44:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ac48:	2020      	movs	r0, #32
    ac4a:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    ac4c:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    ac4e:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    ac52:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    ac56:	4202      	tst	r2, r0
    ac58:	d007      	beq.n	ac6a <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    ac5a:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ac5e:	2201      	movs	r2, #1
    ac60:	fa02 f404 	lsl.w	r4, r2, r4
    ac64:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    ac66:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ac6a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    ac6e:	4815      	ldr	r0, [pc, #84]	; (acc4 <_usb_d_dev_ep_stall+0x144>)
    ac70:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ac74:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    ac78:	f002 0207 	and.w	r2, r2, #7
    ac7c:	2a01      	cmp	r2, #1
    ac7e:	d00c      	beq.n	ac9a <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    ac80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ac84:	4a0f      	ldr	r2, [pc, #60]	; (acc4 <_usb_d_dev_ep_stall+0x144>)
    ac86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ac8a:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    ac8e:	f36f 02c3 	bfc	r2, #3, #1
    ac92:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    ac96:	2000      	movs	r0, #0
    ac98:	e79a      	b.n	abd0 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    ac9a:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    ac9e:	f012 0f30 	tst.w	r2, #48	; 0x30
    aca2:	d10d      	bne.n	acc0 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    aca4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    aca8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    acac:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    acb0:	f36f 02c3 	bfc	r2, #3, #1
    acb4:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    acb8:	2000      	movs	r0, #0
    acba:	e789      	b.n	abd0 <_usb_d_dev_ep_stall+0x50>
    acbc:	2000      	movs	r0, #0
    acbe:	e787      	b.n	abd0 <_usb_d_dev_ep_stall+0x50>
    acc0:	2000      	movs	r0, #0
    acc2:	e785      	b.n	abd0 <_usb_d_dev_ep_stall+0x50>
    acc4:	20000a30 	.word	0x20000a30

0000acc8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    acc8:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    acca:	f000 040f 	and.w	r4, r0, #15
    acce:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    acd0:	4a14      	ldr	r2, [pc, #80]	; (ad24 <_usb_d_dev_ep_read_req+0x5c>)
    acd2:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    acd4:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    acd6:	6840      	ldr	r0, [r0, #4]
    acd8:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    acdc:	2c05      	cmp	r4, #5
    acde:	d817      	bhi.n	ad10 <_usb_d_dev_ep_read_req+0x48>
    ace0:	b1c9      	cbz	r1, ad16 <_usb_d_dev_ep_read_req+0x4e>
    ace2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ace6:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    acea:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    acec:	2a11      	cmp	r2, #17
    acee:	d115      	bne.n	ad1c <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    acf0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    acf4:	f012 0f10 	tst.w	r2, #16
    acf8:	d102      	bne.n	ad00 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    acfa:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    acfc:	bc30      	pop	{r4, r5}
    acfe:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    ad00:	682c      	ldr	r4, [r5, #0]
    ad02:	686a      	ldr	r2, [r5, #4]
    ad04:	600c      	str	r4, [r1, #0]
    ad06:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    ad08:	2210      	movs	r2, #16
    ad0a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    ad0e:	e7f5      	b.n	acfc <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    ad10:	f06f 0011 	mvn.w	r0, #17
    ad14:	e7f2      	b.n	acfc <_usb_d_dev_ep_read_req+0x34>
    ad16:	f06f 0011 	mvn.w	r0, #17
    ad1a:	e7ef      	b.n	acfc <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    ad1c:	f06f 0012 	mvn.w	r0, #18
    ad20:	e7ec      	b.n	acfc <_usb_d_dev_ep_read_req+0x34>
    ad22:	bf00      	nop
    ad24:	20000a30 	.word	0x20000a30

0000ad28 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad2c:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ad2e:	7a03      	ldrb	r3, [r0, #8]
    ad30:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    ad32:	f013 030f 	ands.w	r3, r3, #15
    ad36:	f000 80c2 	beq.w	aebe <_usb_d_dev_ep_trans+0x196>
    ad3a:	2e00      	cmp	r6, #0
    ad3c:	bfb4      	ite	lt
    ad3e:	1d5a      	addlt	r2, r3, #5
    ad40:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    ad42:	4614      	mov	r4, r2
    ad44:	4969      	ldr	r1, [pc, #420]	; (aeec <_usb_d_dev_ep_trans+0x1c4>)
    ad46:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    ad4a:	1c55      	adds	r5, r2, #1
    ad4c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    ad50:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ad54:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ad58:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    ad5c:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    ad60:	f240 31ff 	movw	r1, #1023	; 0x3ff
    ad64:	428a      	cmp	r2, r1
    ad66:	d025      	beq.n	adb4 <_usb_d_dev_ep_trans+0x8c>
    ad68:	1e55      	subs	r5, r2, #1
    ad6a:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    ad6c:	6841      	ldr	r1, [r0, #4]
    ad6e:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ad70:	2b05      	cmp	r3, #5
    ad72:	f200 8092 	bhi.w	ae9a <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    ad76:	6803      	ldr	r3, [r0, #0]
    ad78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ad7c:	d31c      	bcc.n	adb8 <_usb_d_dev_ep_trans+0x90>
    ad7e:	eb03 0c01 	add.w	ip, r3, r1
    ad82:	f8df e180 	ldr.w	lr, [pc, #384]	; af04 <_usb_d_dev_ep_trans+0x1dc>
    ad86:	45f4      	cmp	ip, lr
    ad88:	d816      	bhi.n	adb8 <_usb_d_dev_ep_trans+0x90>
    ad8a:	f013 0f03 	tst.w	r3, #3
    ad8e:	d113      	bne.n	adb8 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    ad90:	2e00      	cmp	r6, #0
    ad92:	db2a      	blt.n	adea <_usb_d_dev_ep_trans+0xc2>
    ad94:	428a      	cmp	r2, r1
    ad96:	f200 809c 	bhi.w	aed2 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    ad9a:	b34d      	cbz	r5, adf0 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    ad9c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    ada0:	4a52      	ldr	r2, [pc, #328]	; (aeec <_usb_d_dev_ep_trans+0x1c4>)
    ada2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ada6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    adaa:	2b00      	cmp	r3, #0
    adac:	d07b      	beq.n	aea6 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    adae:	f04f 0800 	mov.w	r8, #0
    adb2:	e00c      	b.n	adce <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    adb4:	4615      	mov	r5, r2
    adb6:	e7d9      	b.n	ad6c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    adb8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    adbc:	4a4b      	ldr	r2, [pc, #300]	; (aeec <_usb_d_dev_ep_trans+0x1c4>)
    adbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    adc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    adc6:	2b00      	cmp	r3, #0
    adc8:	d06a      	beq.n	aea0 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    adca:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    adce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    add2:	4a46      	ldr	r2, [pc, #280]	; (aeec <_usb_d_dev_ep_trans+0x1c4>)
    add4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    add8:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    addc:	f013 0f08 	tst.w	r3, #8
    ade0:	d009      	beq.n	adf6 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    ade2:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    ade4:	b003      	add	sp, #12
    ade6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    adea:	f04f 0800 	mov.w	r8, #0
    adee:	e7ee      	b.n	adce <_usb_d_dev_ep_trans+0xa6>
    adf0:	f04f 0800 	mov.w	r8, #0
    adf4:	e7eb      	b.n	adce <_usb_d_dev_ep_trans+0xa6>
    adf6:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    adf8:	a801      	add	r0, sp, #4
    adfa:	4b3d      	ldr	r3, [pc, #244]	; (aef0 <_usb_d_dev_ep_trans+0x1c8>)
    adfc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    adfe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    ae02:	4a3a      	ldr	r2, [pc, #232]	; (aeec <_usb_d_dev_ep_trans+0x1c4>)
    ae04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ae08:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    ae0c:	f013 0f40 	tst.w	r3, #64	; 0x40
    ae10:	d13c      	bne.n	ae8c <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    ae12:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    ae16:	4b35      	ldr	r3, [pc, #212]	; (aeec <_usb_d_dev_ep_trans+0x1c4>)
    ae18:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    ae1c:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    ae20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ae24:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    ae28:	a801      	add	r0, sp, #4
    ae2a:	4b32      	ldr	r3, [pc, #200]	; (aef4 <_usb_d_dev_ep_trans+0x1cc>)
    ae2c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    ae2e:	f8da 3000 	ldr.w	r3, [sl]
    ae32:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    ae36:	f8da 3004 	ldr.w	r3, [sl, #4]
    ae3a:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    ae3e:	2300      	movs	r3, #0
    ae40:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    ae44:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    ae46:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    ae4a:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    ae4e:	f368 1345 	bfi	r3, r8, #5, #1
    ae52:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    ae56:	f89a 3009 	ldrb.w	r3, [sl, #9]
    ae5a:	b1e3      	cbz	r3, ae96 <_usb_d_dev_ep_trans+0x16e>
    ae5c:	fab5 f585 	clz	r5, r5
    ae60:	096d      	lsrs	r5, r5, #5
    ae62:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ae66:	4b21      	ldr	r3, [pc, #132]	; (aeec <_usb_d_dev_ep_trans+0x1c4>)
    ae68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    ae6c:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    ae70:	f365 1304 	bfi	r3, r5, #4, #1
    ae74:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    ae78:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    ae7a:	f04f 0100 	mov.w	r1, #0
    ae7e:	4638      	mov	r0, r7
    ae80:	bfb4      	ite	lt
    ae82:	4b1d      	ldrlt	r3, [pc, #116]	; (aef8 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    ae84:	4b1d      	ldrge	r3, [pc, #116]	; (aefc <_usb_d_dev_ep_trans+0x1d4>)
    ae86:	4798      	blx	r3
	return ERR_NONE;
    ae88:	2000      	movs	r0, #0
    ae8a:	e7ab      	b.n	ade4 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    ae8c:	a801      	add	r0, sp, #4
    ae8e:	4b19      	ldr	r3, [pc, #100]	; (aef4 <_usb_d_dev_ep_trans+0x1cc>)
    ae90:	4798      	blx	r3
		return USB_BUSY;
    ae92:	2001      	movs	r0, #1
    ae94:	e7a6      	b.n	ade4 <_usb_d_dev_ep_trans+0xbc>
    ae96:	2500      	movs	r5, #0
    ae98:	e7e3      	b.n	ae62 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    ae9a:	f06f 0011 	mvn.w	r0, #17
    ae9e:	e7a1      	b.n	ade4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    aea0:	f06f 0012 	mvn.w	r0, #18
    aea4:	e79e      	b.n	ade4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    aea6:	f06f 0011 	mvn.w	r0, #17
    aeaa:	e79b      	b.n	ade4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    aeac:	f06f 0012 	mvn.w	r0, #18
    aeb0:	e798      	b.n	ade4 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    aeb2:	6841      	ldr	r1, [r0, #4]
    aeb4:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    aeb8:	4f11      	ldr	r7, [pc, #68]	; (af00 <_usb_d_dev_ep_trans+0x1d8>)
    aeba:	2400      	movs	r4, #0
    aebc:	e75b      	b.n	ad76 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    aebe:	4a0b      	ldr	r2, [pc, #44]	; (aeec <_usb_d_dev_ep_trans+0x1c4>)
    aec0:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    aec4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    aec8:	428a      	cmp	r2, r1
    aeca:	d0f2      	beq.n	aeb2 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    aecc:	4f0c      	ldr	r7, [pc, #48]	; (af00 <_usb_d_dev_ep_trans+0x1d8>)
    aece:	2400      	movs	r4, #0
    aed0:	e74a      	b.n	ad68 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    aed2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    aed6:	4a05      	ldr	r2, [pc, #20]	; (aeec <_usb_d_dev_ep_trans+0x1c4>)
    aed8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    aedc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    aee0:	2b00      	cmp	r3, #0
    aee2:	d0e3      	beq.n	aeac <_usb_d_dev_ep_trans+0x184>
    aee4:	f04f 0801 	mov.w	r8, #1
    aee8:	e771      	b.n	adce <_usb_d_dev_ep_trans+0xa6>
    aeea:	bf00      	nop
    aeec:	20000a30 	.word	0x20000a30
    aef0:	00005c7d 	.word	0x00005c7d
    aef4:	00005c8b 	.word	0x00005c8b
    aef8:	00009f4d 	.word	0x00009f4d
    aefc:	0000a0d1 	.word	0x0000a0d1
    af00:	20000b04 	.word	0x20000b04
    af04:	20041fff 	.word	0x20041fff

0000af08 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    af08:	4b07      	ldr	r3, [pc, #28]	; (af28 <_usb_d_dev_register_callback+0x20>)
    af0a:	2900      	cmp	r1, #0
    af0c:	bf08      	it	eq
    af0e:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    af10:	2801      	cmp	r0, #1
    af12:	d004      	beq.n	af1e <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    af14:	b910      	cbnz	r0, af1c <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    af16:	4b05      	ldr	r3, [pc, #20]	; (af2c <_usb_d_dev_register_callback+0x24>)
    af18:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    af1c:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    af1e:	4b03      	ldr	r3, [pc, #12]	; (af2c <_usb_d_dev_register_callback+0x24>)
    af20:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    af24:	4770      	bx	lr
    af26:	bf00      	nop
    af28:	00009cbd 	.word	0x00009cbd
    af2c:	20000a30 	.word	0x20000a30

0000af30 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    af30:	4b0a      	ldr	r3, [pc, #40]	; (af5c <_usb_d_dev_register_ep_callback+0x2c>)
    af32:	2900      	cmp	r1, #0
    af34:	bf08      	it	eq
    af36:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    af38:	4603      	mov	r3, r0
    af3a:	b138      	cbz	r0, af4c <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    af3c:	2801      	cmp	r0, #1
    af3e:	d009      	beq.n	af54 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    af40:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    af42:	bf04      	itt	eq
    af44:	4b06      	ldreq	r3, [pc, #24]	; (af60 <_usb_d_dev_register_ep_callback+0x30>)
    af46:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    af4a:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    af4c:	4b04      	ldr	r3, [pc, #16]	; (af60 <_usb_d_dev_register_ep_callback+0x30>)
    af4e:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    af52:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    af54:	4b02      	ldr	r3, [pc, #8]	; (af60 <_usb_d_dev_register_ep_callback+0x30>)
    af56:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    af5a:	4770      	bx	lr
    af5c:	00009cbd 	.word	0x00009cbd
    af60:	20000a30 	.word	0x20000a30

0000af64 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    af64:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    af66:	4b01      	ldr	r3, [pc, #4]	; (af6c <USB_0_Handler+0x8>)
    af68:	4798      	blx	r3
    af6a:	bd08      	pop	{r3, pc}
    af6c:	0000a2c1 	.word	0x0000a2c1

0000af70 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    af70:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    af72:	4b01      	ldr	r3, [pc, #4]	; (af78 <USB_1_Handler+0x8>)
    af74:	4798      	blx	r3
    af76:	bd08      	pop	{r3, pc}
    af78:	0000a2c1 	.word	0x0000a2c1

0000af7c <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    af7c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    af7e:	4b01      	ldr	r3, [pc, #4]	; (af84 <USB_2_Handler+0x8>)
    af80:	4798      	blx	r3
    af82:	bd08      	pop	{r3, pc}
    af84:	0000a2c1 	.word	0x0000a2c1

0000af88 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    af88:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    af8a:	4b01      	ldr	r3, [pc, #4]	; (af90 <USB_3_Handler+0x8>)
    af8c:	4798      	blx	r3
    af8e:	bd08      	pop	{r3, pc}
    af90:	0000a2c1 	.word	0x0000a2c1

0000af94 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    af94:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    af96:	4604      	mov	r4, r0
    af98:	b340      	cbz	r0, afec <_wdt_init+0x58>
    af9a:	6800      	ldr	r0, [r0, #0]
    af9c:	3000      	adds	r0, #0
    af9e:	bf18      	it	ne
    afa0:	2001      	movne	r0, #1
    afa2:	2250      	movs	r2, #80	; 0x50
    afa4:	4915      	ldr	r1, [pc, #84]	; (affc <_wdt_init+0x68>)
    afa6:	4b16      	ldr	r3, [pc, #88]	; (b000 <_wdt_init+0x6c>)
    afa8:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    afaa:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    afac:	689a      	ldr	r2, [r3, #8]
    afae:	f012 0f0e 	tst.w	r2, #14
    afb2:	d1fb      	bne.n	afac <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    afb4:	781a      	ldrb	r2, [r3, #0]
    afb6:	09d2      	lsrs	r2, r2, #7
    afb8:	d11a      	bne.n	aff0 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    afba:	689a      	ldr	r2, [r3, #8]
    afbc:	f012 0f0e 	tst.w	r2, #14
    afc0:	d1fb      	bne.n	afba <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    afc2:	781a      	ldrb	r2, [r3, #0]
    afc4:	f012 0f02 	tst.w	r2, #2
    afc8:	d115      	bne.n	aff6 <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    afca:	781a      	ldrb	r2, [r3, #0]
    afcc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    afd0:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    afd2:	689a      	ldr	r2, [r3, #8]
    afd4:	f012 0f0e 	tst.w	r2, #14
    afd8:	d1fb      	bne.n	afd2 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    afda:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    afdc:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    afde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    afe2:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    afe6:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    afe8:	2000      	movs	r0, #0
    afea:	bd10      	pop	{r4, pc}
    afec:	2000      	movs	r0, #0
    afee:	e7d8      	b.n	afa2 <_wdt_init+0xe>
		return ERR_DENIED;
    aff0:	f06f 0010 	mvn.w	r0, #16
    aff4:	bd10      	pop	{r4, pc}
    aff6:	f06f 0010 	mvn.w	r0, #16
}
    affa:	bd10      	pop	{r4, pc}
    affc:	0000f4c0 	.word	0x0000f4c0
    b000:	000072b1 	.word	0x000072b1

0000b004 <RTC_Scheduler_ping_cb>:
static struct timer_task RTC_Scheduler_heartbeat;

static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{

	pingflag++;
    b004:	4a12      	ldr	r2, [pc, #72]	; (b050 <RTC_Scheduler_ping_cb+0x4c>)
    b006:	7813      	ldrb	r3, [r2, #0]
    b008:	3301      	adds	r3, #1
    b00a:	b2db      	uxtb	r3, r3
    b00c:	7013      	strb	r3, [r2, #0]
	
	switch (pingflag%4)
    b00e:	7813      	ldrb	r3, [r2, #0]
    b010:	f003 0303 	and.w	r3, r3, #3
    b014:	2b03      	cmp	r3, #3
    b016:	d81a      	bhi.n	b04e <RTC_Scheduler_ping_cb+0x4a>
    b018:	e8df f003 	tbb	[pc, r3]
    b01c:	140e0802 	.word	0x140e0802
	{
		case 0:
			GRID_PORT_N.ping_flag = 1;
    b020:	2101      	movs	r1, #1
    b022:	f241 0318 	movw	r3, #4120	; 0x1018
    b026:	4a0b      	ldr	r2, [pc, #44]	; (b054 <RTC_Scheduler_ping_cb+0x50>)
    b028:	54d1      	strb	r1, [r2, r3]
			break;
    b02a:	4770      	bx	lr
		case 1:
			GRID_PORT_E.ping_flag = 1;
    b02c:	2101      	movs	r1, #1
    b02e:	f241 0318 	movw	r3, #4120	; 0x1018
    b032:	4a09      	ldr	r2, [pc, #36]	; (b058 <RTC_Scheduler_ping_cb+0x54>)
    b034:	54d1      	strb	r1, [r2, r3]
			break;
    b036:	4770      	bx	lr
		case 2:
			GRID_PORT_S.ping_flag = 1;
    b038:	2101      	movs	r1, #1
    b03a:	f241 0318 	movw	r3, #4120	; 0x1018
    b03e:	4a07      	ldr	r2, [pc, #28]	; (b05c <RTC_Scheduler_ping_cb+0x58>)
    b040:	54d1      	strb	r1, [r2, r3]
			break;
    b042:	4770      	bx	lr
		case 3:
			GRID_PORT_W.ping_flag = 1;
    b044:	2101      	movs	r1, #1
    b046:	f241 0318 	movw	r3, #4120	; 0x1018
    b04a:	4a05      	ldr	r2, [pc, #20]	; (b060 <RTC_Scheduler_ping_cb+0x5c>)
    b04c:	54d1      	strb	r1, [r2, r3]
    b04e:	4770      	bx	lr
    b050:	20000df0 	.word	0x20000df0
    b054:	200012a4 	.word	0x200012a4
    b058:	20006d44 	.word	0x20006d44
    b05c:	20004c08 	.word	0x20004c08
    b060:	20003be8 	.word	0x20003be8

0000b064 <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    b064:	2201      	movs	r2, #1
    b066:	4b01      	ldr	r3, [pc, #4]	; (b06c <RTC_Scheduler_report_cb+0x8>)
    b068:	705a      	strb	r2, [r3, #1]
    b06a:	4770      	bx	lr
    b06c:	20000df0 	.word	0x20000df0

0000b070 <RTC_Scheduler_heartbeat_cb>:
{
    b070:	b538      	push	{r3, r4, r5, lr}
	uint8_t event_index = grid_ui_event_find(&grid_core_state.element[0], GRID_UI_EVENT_HEARTBEAT);				
    b072:	4d09      	ldr	r5, [pc, #36]	; (b098 <RTC_Scheduler_heartbeat_cb+0x28>)
    b074:	6868      	ldr	r0, [r5, #4]
    b076:	2101      	movs	r1, #1
    b078:	4b08      	ldr	r3, [pc, #32]	; (b09c <RTC_Scheduler_heartbeat_cb+0x2c>)
    b07a:	4798      	blx	r3
    b07c:	4604      	mov	r4, r0
	grid_ui_event_template_action(&grid_core_state.element[0], event_index);	
    b07e:	6868      	ldr	r0, [r5, #4]
    b080:	4621      	mov	r1, r4
    b082:	4b07      	ldr	r3, [pc, #28]	; (b0a0 <RTC_Scheduler_heartbeat_cb+0x30>)
    b084:	4798      	blx	r3
	grid_ui_event_trigger(&grid_core_state.element[0].event_list[event_index]);
    b086:	686b      	ldr	r3, [r5, #4]
    b088:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b08c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b08e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    b092:	4b04      	ldr	r3, [pc, #16]	; (b0a4 <RTC_Scheduler_heartbeat_cb+0x34>)
    b094:	4798      	blx	r3
    b096:	bd38      	pop	{r3, r4, r5, pc}
    b098:	20007d64 	.word	0x20007d64
    b09c:	00005285 	.word	0x00005285
    b0a0:	00005709 	.word	0x00005709
    b0a4:	000052af 	.word	0x000052af

0000b0a8 <RTC_Scheduler_realtime_cb>:
{
    b0a8:	b530      	push	{r4, r5, lr}
    b0aa:	b083      	sub	sp, #12
	grid_sys_rtc_tick_time(&grid_sys_state);	
    b0ac:	4d27      	ldr	r5, [pc, #156]	; (b14c <RTC_Scheduler_realtime_cb+0xa4>)
    b0ae:	4628      	mov	r0, r5
    b0b0:	4b27      	ldr	r3, [pc, #156]	; (b150 <RTC_Scheduler_realtime_cb+0xa8>)
    b0b2:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    b0b4:	4827      	ldr	r0, [pc, #156]	; (b154 <RTC_Scheduler_realtime_cb+0xac>)
    b0b6:	4b28      	ldr	r3, [pc, #160]	; (b158 <RTC_Scheduler_realtime_cb+0xb0>)
    b0b8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    b0ba:	a801      	add	r0, sp, #4
    b0bc:	4b27      	ldr	r3, [pc, #156]	; (b15c <RTC_Scheduler_realtime_cb+0xb4>)
    b0be:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b0c0:	4a27      	ldr	r2, [pc, #156]	; (b160 <RTC_Scheduler_realtime_cb+0xb8>)
    b0c2:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b0c6:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b0ca:	f8d2 4110 	ldr.w	r4, [r2, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b0ce:	405c      	eors	r4, r3
    b0d0:	400c      	ands	r4, r1
    b0d2:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b0d4:	a801      	add	r0, sp, #4
    b0d6:	4b23      	ldr	r3, [pc, #140]	; (b164 <RTC_Scheduler_realtime_cb+0xbc>)
    b0d8:	4798      	blx	r3
	uint8_t mapmode_value = !gpio_get_pin_level(MAP_MODE);
    b0da:	f484 6300 	eor.w	r3, r4, #2048	; 0x800
    b0de:	f3c3 23c0 	ubfx	r3, r3, #11, #1
	if (mapmode_value != grid_sys_state.mapmodestate){
    b0e2:	7aaa      	ldrb	r2, [r5, #10]
    b0e4:	b2d2      	uxtb	r2, r2
    b0e6:	4293      	cmp	r3, r2
    b0e8:	d017      	beq.n	b11a <RTC_Scheduler_realtime_cb+0x72>
		grid_sys_state.mapmodestate = mapmode_value;
    b0ea:	72ab      	strb	r3, [r5, #10]
		if (grid_sys_state.mapmodestate == 0){ // RELEASE
    b0ec:	7aab      	ldrb	r3, [r5, #10]
    b0ee:	b1b3      	cbz	r3, b11e <RTC_Scheduler_realtime_cb+0x76>
			grid_debug_print_text("\"MAPMODE_PRESS\"");
    b0f0:	481d      	ldr	r0, [pc, #116]	; (b168 <RTC_Scheduler_realtime_cb+0xc0>)
    b0f2:	4b1e      	ldr	r3, [pc, #120]	; (b16c <RTC_Scheduler_realtime_cb+0xc4>)
    b0f4:	4798      	blx	r3
			uint8_t event_index = grid_ui_event_find(&grid_core_state.element[0], GRID_UI_EVENT_MAPMODE_PRESS);
    b0f6:	4d1e      	ldr	r5, [pc, #120]	; (b170 <RTC_Scheduler_realtime_cb+0xc8>)
    b0f8:	6868      	ldr	r0, [r5, #4]
    b0fa:	2108      	movs	r1, #8
    b0fc:	4b1d      	ldr	r3, [pc, #116]	; (b174 <RTC_Scheduler_realtime_cb+0xcc>)
    b0fe:	4798      	blx	r3
    b100:	4604      	mov	r4, r0
			grid_ui_event_template_action(&grid_core_state.element[0], event_index);
    b102:	6868      	ldr	r0, [r5, #4]
    b104:	4621      	mov	r1, r4
    b106:	4b1c      	ldr	r3, [pc, #112]	; (b178 <RTC_Scheduler_realtime_cb+0xd0>)
    b108:	4798      	blx	r3
			grid_ui_event_trigger(&grid_core_state.element[0].event_list[event_index]);		
    b10a:	686b      	ldr	r3, [r5, #4]
    b10c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b110:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b112:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    b116:	4b19      	ldr	r3, [pc, #100]	; (b17c <RTC_Scheduler_realtime_cb+0xd4>)
    b118:	4798      	blx	r3
}
    b11a:	b003      	add	sp, #12
    b11c:	bd30      	pop	{r4, r5, pc}
			grid_debug_print_text("\"MAPMODE_RELEASE\"");
    b11e:	4818      	ldr	r0, [pc, #96]	; (b180 <RTC_Scheduler_realtime_cb+0xd8>)
    b120:	4b12      	ldr	r3, [pc, #72]	; (b16c <RTC_Scheduler_realtime_cb+0xc4>)
    b122:	4798      	blx	r3
			uint8_t event_index = grid_ui_event_find(&grid_core_state.element[0], GRID_UI_EVENT_MAPMODE_RELEASE);
    b124:	4d12      	ldr	r5, [pc, #72]	; (b170 <RTC_Scheduler_realtime_cb+0xc8>)
    b126:	6868      	ldr	r0, [r5, #4]
    b128:	2109      	movs	r1, #9
    b12a:	4b12      	ldr	r3, [pc, #72]	; (b174 <RTC_Scheduler_realtime_cb+0xcc>)
    b12c:	4798      	blx	r3
    b12e:	4604      	mov	r4, r0
			grid_ui_event_template_action(&grid_core_state.element[0], event_index);
    b130:	6868      	ldr	r0, [r5, #4]
    b132:	4621      	mov	r1, r4
    b134:	4b10      	ldr	r3, [pc, #64]	; (b178 <RTC_Scheduler_realtime_cb+0xd0>)
    b136:	4798      	blx	r3
			grid_ui_event_trigger(&grid_core_state.element[0].event_list[event_index]);		
    b138:	686b      	ldr	r3, [r5, #4]
    b13a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b13e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b140:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    b144:	4b0d      	ldr	r3, [pc, #52]	; (b17c <RTC_Scheduler_realtime_cb+0xd4>)
    b146:	4798      	blx	r3
    b148:	e7e7      	b.n	b11a <RTC_Scheduler_realtime_cb+0x72>
    b14a:	bf00      	nop
    b14c:	200032f8 	.word	0x200032f8
    b150:	000049fb 	.word	0x000049fb
    b154:	20003bc4 	.word	0x20003bc4
    b158:	00004419 	.word	0x00004419
    b15c:	00005c7d 	.word	0x00005c7d
    b160:	41008000 	.word	0x41008000
    b164:	00005c8b 	.word	0x00005c8b
    b168:	0000f4ec 	.word	0x0000f4ec
    b16c:	00004df9 	.word	0x00004df9
    b170:	20007d64 	.word	0x20007d64
    b174:	00005285 	.word	0x00005285
    b178:	00005709 	.word	0x00005709
    b17c:	000052af 	.word	0x000052af
    b180:	0000f4d8 	.word	0x0000f4d8

0000b184 <init_timer>:
#define RTC1SEC 16384

#define RTC1MS (RTC1SEC/1000)

void init_timer(void)
{
    b184:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    b186:	4c18      	ldr	r4, [pc, #96]	; (b1e8 <init_timer+0x64>)
    b188:	f44f 63c8 	mov.w	r3, #1600	; 0x640
    b18c:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    b18e:	4b17      	ldr	r3, [pc, #92]	; (b1ec <init_timer+0x68>)
    b190:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    b192:	2301      	movs	r3, #1
    b194:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_heartbeat.interval = RTC1MS*GRID_PARAMETER_HEARTBEAT_interval;
    b196:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    b19a:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    b19c:	4a14      	ldr	r2, [pc, #80]	; (b1f0 <init_timer+0x6c>)
    b19e:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    b1a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	
	RTC_Scheduler_report.interval = RTC1SEC/10;
    b1a4:	f240 6266 	movw	r2, #1638	; 0x666
    b1a8:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    b1aa:	4a12      	ldr	r2, [pc, #72]	; (b1f4 <init_timer+0x70>)
    b1ac:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    b1ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	
	RTC_Scheduler_realtime.interval = 1;
    b1b2:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    b1b4:	4a10      	ldr	r2, [pc, #64]	; (b1f8 <init_timer+0x74>)
    b1b6:	64e2      	str	r2, [r4, #76]	; 0x4c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    b1b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    b1bc:	4d0f      	ldr	r5, [pc, #60]	; (b1fc <init_timer+0x78>)
    b1be:	1d21      	adds	r1, r4, #4
    b1c0:	4628      	mov	r0, r5
    b1c2:	4e0f      	ldr	r6, [pc, #60]	; (b200 <init_timer+0x7c>)
    b1c4:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    b1c6:	f104 0118 	add.w	r1, r4, #24
    b1ca:	4628      	mov	r0, r5
    b1cc:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    b1ce:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    b1d2:	4628      	mov	r0, r5
    b1d4:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    b1d6:	f104 0140 	add.w	r1, r4, #64	; 0x40
    b1da:	4628      	mov	r0, r5
    b1dc:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    b1de:	4628      	mov	r0, r5
    b1e0:	4b08      	ldr	r3, [pc, #32]	; (b204 <init_timer+0x80>)
    b1e2:	4798      	blx	r3
    b1e4:	bd70      	pop	{r4, r5, r6, pc}
    b1e6:	bf00      	nop
    b1e8:	20000df0 	.word	0x20000df0
    b1ec:	0000b005 	.word	0x0000b005
    b1f0:	0000b071 	.word	0x0000b071
    b1f4:	0000b065 	.word	0x0000b065
    b1f8:	0000b0a9 	.word	0x0000b0a9
    b1fc:	20000f8c 	.word	0x20000f8c
    b200:	000067a9 	.word	0x000067a9
    b204:	00006769 	.word	0x00006769

0000b208 <main>:
}

//====================== USB TEST =====================//

int main(void)
{
    b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b20c:	b08f      	sub	sp, #60	; 0x3c



	atmel_start_init();	
    b20e:	4b73      	ldr	r3, [pc, #460]	; (b3dc <main+0x1d4>)
    b210:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    b212:	4d73      	ldr	r5, [pc, #460]	; (b3e0 <main+0x1d8>)
    b214:	4973      	ldr	r1, [pc, #460]	; (b3e4 <main+0x1dc>)
    b216:	4628      	mov	r0, r5
    b218:	4c73      	ldr	r4, [pc, #460]	; (b3e8 <main+0x1e0>)
    b21a:	47a0      	blx	r4

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "D51 Init");
    b21c:	4973      	ldr	r1, [pc, #460]	; (b3ec <main+0x1e4>)
    b21e:	4628      	mov	r0, r5
    b220:	47a0      	blx	r4
	grid_d51_init(); // Check User Row
    b222:	4b73      	ldr	r3, [pc, #460]	; (b3f0 <main+0x1e8>)
    b224:	4798      	blx	r3


	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    b226:	4b73      	ldr	r3, [pc, #460]	; (b3f4 <main+0x1ec>)
    b228:	4798      	blx	r3

	composite_device_start();
    b22a:	4b73      	ldr	r3, [pc, #460]	; (b3f8 <main+0x1f0>)
    b22c:	4798      	blx	r3


	grid_usb_serial_init();
    b22e:	4b73      	ldr	r3, [pc, #460]	; (b3fc <main+0x1f4>)
    b230:	4798      	blx	r3
	grid_usb_midi_init();
    b232:	4b73      	ldr	r3, [pc, #460]	; (b400 <main+0x1f8>)
    b234:	4798      	blx	r3
		

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Initialized");
    b236:	4973      	ldr	r1, [pc, #460]	; (b404 <main+0x1fc>)
    b238:	4628      	mov	r0, r5
    b23a:	47a0      	blx	r4
		
	grid_module_common_init();
    b23c:	4b72      	ldr	r3, [pc, #456]	; (b408 <main+0x200>)
    b23e:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Grid Module Initialized");
    b240:	4972      	ldr	r1, [pc, #456]	; (b40c <main+0x204>)
    b242:	4628      	mov	r0, r5
    b244:	47a0      	blx	r4

	init_timer();
    b246:	4b72      	ldr	r3, [pc, #456]	; (b410 <main+0x208>)
    b248:	4798      	blx	r3
	uint32_t loopfast = 0;
	uint32_t loopwarp = 0;
	
	uint8_t usb_init_variable = 0;
	
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Entering Main Loop");
    b24a:	4972      	ldr	r1, [pc, #456]	; (b414 <main+0x20c>)
    b24c:	4628      	mov	r0, r5
    b24e:	47a0      	blx	r4
	uint8_t debug_flag = 0;	
	uint16_t debug_offset = 0;
	uint8_t debug[500] = {0};


	grid_sys_load_bank_settings(&grid_sys_state, &grid_nvm_state);
    b250:	4971      	ldr	r1, [pc, #452]	; (b418 <main+0x210>)
    b252:	4872      	ldr	r0, [pc, #456]	; (b41c <main+0x214>)
    b254:	4b72      	ldr	r3, [pc, #456]	; (b420 <main+0x218>)
    b256:	4798      	blx	r3
	uint8_t usb_init_variable = 0;
    b258:	2300      	movs	r3, #0
    b25a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t loopwarp = 0;
    b25c:	9304      	str	r3, [sp, #16]
			debug_flag = 2;
			
			cdcdf_acm_write(debug, debug_offset);
		}	
				
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    b25e:	f8df a230 	ldr.w	sl, [pc, #560]	; b490 <main+0x288>
			if (usb_d_get_frame_num() == 0){
				
			}
			else{			
			
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN	
    b262:	f8df b1b8 	ldr.w	fp, [pc, #440]	; b41c <main+0x214>
    b266:	461c      	mov	r4, r3
    b268:	e122      	b.n	b4b0 <main+0x2a8>
		if (usb_init_variable == 1 && grid_sys_rtc_get_time(&grid_sys_state)>RTC1SEC*4){
    b26a:	4658      	mov	r0, fp
    b26c:	4b6d      	ldr	r3, [pc, #436]	; (b424 <main+0x21c>)
    b26e:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    b270:	2101      	movs	r1, #1
    b272:	486d      	ldr	r0, [pc, #436]	; (b428 <main+0x220>)
    b274:	47d0      	blx	sl
    b276:	e127      	b.n	b4c8 <main+0x2c0>
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN	
    b278:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    b27c:	9301      	str	r3, [sp, #4]
    b27e:	9400      	str	r4, [sp, #0]
    b280:	4623      	mov	r3, r4
    b282:	22ff      	movs	r2, #255	; 0xff
    b284:	4621      	mov	r1, r4
    b286:	4658      	mov	r0, fp
    b288:	4d68      	ldr	r5, [pc, #416]	; (b42c <main+0x224>)
    b28a:	47a8      	blx	r5
				
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    b28c:	4968      	ldr	r1, [pc, #416]	; (b430 <main+0x228>)
    b28e:	4854      	ldr	r0, [pc, #336]	; (b3e0 <main+0x1d8>)
    b290:	4b55      	ldr	r3, [pc, #340]	; (b3e8 <main+0x1e0>)
    b292:	4798      	blx	r3
				
				grid_sys_set_bank(&grid_sys_state, grid_sys_get_bank_next(&grid_sys_state));
    b294:	4658      	mov	r0, fp
    b296:	4b67      	ldr	r3, [pc, #412]	; (b434 <main+0x22c>)
    b298:	4798      	blx	r3
    b29a:	4601      	mov	r1, r0
    b29c:	4658      	mov	r0, fp
    b29e:	4b66      	ldr	r3, [pc, #408]	; (b438 <main+0x230>)
    b2a0:	4798      	blx	r3
				
				uint8_t event_index = grid_ui_event_find(&grid_core_state.element[0], GRID_UI_EVENT_CFG_RESPONSE);
    b2a2:	4e66      	ldr	r6, [pc, #408]	; (b43c <main+0x234>)
    b2a4:	6870      	ldr	r0, [r6, #4]
    b2a6:	210a      	movs	r1, #10
    b2a8:	4b65      	ldr	r3, [pc, #404]	; (b440 <main+0x238>)
    b2aa:	4798      	blx	r3
    b2ac:	4605      	mov	r5, r0
				grid_ui_event_template_action(&grid_core_state.element[0], event_index);
    b2ae:	6870      	ldr	r0, [r6, #4]
    b2b0:	4629      	mov	r1, r5
    b2b2:	4b64      	ldr	r3, [pc, #400]	; (b444 <main+0x23c>)
    b2b4:	4798      	blx	r3
				grid_ui_event_trigger(&grid_core_state.element[0].event_list[event_index]);
    b2b6:	6873      	ldr	r3, [r6, #4]
    b2b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    b2bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b2be:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    b2c2:	4b61      	ldr	r3, [pc, #388]	; (b448 <main+0x240>)
    b2c4:	4798      	blx	r3
				
				usb_init_variable = 1;
    b2c6:	2301      	movs	r3, #1
    b2c8:	9309      	str	r3, [sp, #36]	; 0x24
    b2ca:	e0fd      	b.n	b4c8 <main+0x2c0>
		uint16_t usblength = strlen(GRID_PORT_H.rx_double_buffer);
		
		if (usblength){	

						
			GRID_PORT_H.rx_double_buffer_read_start_index = 0;
    b2cc:	f2a5 73fc 	subw	r3, r5, #2044	; 0x7fc
    b2d0:	629c      	str	r4, [r3, #40]	; 0x28

			grid_port_receive_decode(&GRID_PORT_H, 0, usblength-2);
    b2d2:	1e82      	subs	r2, r0, #2
    b2d4:	b292      	uxth	r2, r2
    b2d6:	4621      	mov	r1, r4
    b2d8:	4618      	mov	r0, r3
    b2da:	4b5c      	ldr	r3, [pc, #368]	; (b44c <main+0x244>)
    b2dc:	4798      	blx	r3
    b2de:	e123      	b.n	b528 <main+0x320>
				
				// GETS HERE
							

				
				grid_port_receive_decode(&GRID_PORT_U, 0, length);		
    b2e0:	b292      	uxth	r2, r2
    b2e2:	4621      	mov	r1, r4
    b2e4:	4618      	mov	r0, r3
    b2e6:	4b59      	ldr	r3, [pc, #356]	; (b44c <main+0x244>)
    b2e8:	4798      	blx	r3
    b2ea:	e136      	b.n	b55a <main+0x352>
		grid_task_enter_task(&grid_task_state, GRID_TASK_ALERT);	
		
			
		if (grid_sys_state.alert_state){
			
			grid_sys_state.alert_state--;
    b2ec:	f8bb 3004 	ldrh.w	r3, [fp, #4]
    b2f0:	3b01      	subs	r3, #1
    b2f2:	b29b      	uxth	r3, r3
    b2f4:	f8ab 3004 	strh.w	r3, [fp, #4]
	
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    b2f8:	4658      	mov	r0, fp
    b2fa:	4b55      	ldr	r3, [pc, #340]	; (b450 <main+0x248>)
    b2fc:	4798      	blx	r3
    b2fe:	b9b8      	cbnz	r0, b330 <main+0x128>
					
				}
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    b300:	4658      	mov	r0, fp
    b302:	4b54      	ldr	r3, [pc, #336]	; (b454 <main+0x24c>)
    b304:	4798      	blx	r3
    b306:	4607      	mov	r7, r0
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    b308:	4b53      	ldr	r3, [pc, #332]	; (b458 <main+0x250>)
    b30a:	785b      	ldrb	r3, [r3, #1]
    b30c:	2b00      	cmp	r3, #0
    b30e:	f000 8161 	beq.w	b5d4 <main+0x3cc>
    b312:	4625      	mov	r5, r4
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    b314:	4e50      	ldr	r6, [pc, #320]	; (b458 <main+0x250>)
    b316:	f8df 817c 	ldr.w	r8, [pc, #380]	; b494 <main+0x28c>
    b31a:	463b      	mov	r3, r7
    b31c:	4622      	mov	r2, r4
    b31e:	4629      	mov	r1, r5
    b320:	4630      	mov	r0, r6
    b322:	47c0      	blx	r8
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    b324:	3501      	adds	r5, #1
    b326:	b2ed      	uxtb	r5, r5
    b328:	7873      	ldrb	r3, [r6, #1]
    b32a:	42ab      	cmp	r3, r5
    b32c:	d8f5      	bhi.n	b31a <main+0x112>
    b32e:	e151      	b.n	b5d4 <main+0x3cc>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    b330:	4658      	mov	r0, fp
    b332:	4b4a      	ldr	r3, [pc, #296]	; (b45c <main+0x254>)
    b334:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    b336:	4658      	mov	r0, fp
    b338:	4b49      	ldr	r3, [pc, #292]	; (b460 <main+0x258>)
    b33a:	4798      	blx	r3
    b33c:	9005      	str	r0, [sp, #20]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    b33e:	4658      	mov	r0, fp
    b340:	4b48      	ldr	r3, [pc, #288]	; (b464 <main+0x25c>)
    b342:	4798      	blx	r3
    b344:	9006      	str	r0, [sp, #24]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    b346:	4658      	mov	r0, fp
    b348:	4b47      	ldr	r3, [pc, #284]	; (b468 <main+0x260>)
    b34a:	4798      	blx	r3
    b34c:	9007      	str	r0, [sp, #28]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    b34e:	f04f 0900 	mov.w	r9, #0
    b352:	e033      	b.n	b3bc <main+0x1b4>
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    b354:	9401      	str	r4, [sp, #4]
    b356:	9400      	str	r4, [sp, #0]
    b358:	4623      	mov	r3, r4
    b35a:	4622      	mov	r2, r4
    b35c:	4629      	mov	r1, r5
    b35e:	483e      	ldr	r0, [pc, #248]	; (b458 <main+0x250>)
    b360:	4e42      	ldr	r6, [pc, #264]	; (b46c <main+0x264>)
    b362:	47b0      	blx	r6
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    b364:	f8df 8130 	ldr.w	r8, [pc, #304]	; b498 <main+0x290>
    b368:	9805      	ldr	r0, [sp, #20]
    b36a:	47c0      	blx	r8
    b36c:	4f40      	ldr	r7, [pc, #256]	; (b470 <main+0x268>)
    b36e:	2200      	movs	r2, #0
    b370:	4b40      	ldr	r3, [pc, #256]	; (b474 <main+0x26c>)
    b372:	47b8      	blx	r7
    b374:	4e40      	ldr	r6, [pc, #256]	; (b478 <main+0x270>)
    b376:	47b0      	blx	r6
    b378:	b2c2      	uxtb	r2, r0
    b37a:	9208      	str	r2, [sp, #32]
    b37c:	9807      	ldr	r0, [sp, #28]
    b37e:	47c0      	blx	r8
    b380:	2200      	movs	r2, #0
    b382:	4b3c      	ldr	r3, [pc, #240]	; (b474 <main+0x26c>)
    b384:	47b8      	blx	r7
    b386:	47b0      	blx	r6
    b388:	b2c0      	uxtb	r0, r0
    b38a:	9001      	str	r0, [sp, #4]
    b38c:	9806      	ldr	r0, [sp, #24]
    b38e:	47c0      	blx	r8
    b390:	2200      	movs	r2, #0
    b392:	4b38      	ldr	r3, [pc, #224]	; (b474 <main+0x26c>)
    b394:	47b8      	blx	r7
    b396:	47b0      	blx	r6
    b398:	b2c0      	uxtb	r0, r0
    b39a:	9000      	str	r0, [sp, #0]
    b39c:	9b08      	ldr	r3, [sp, #32]
    b39e:	4622      	mov	r2, r4
    b3a0:	4629      	mov	r1, r5
    b3a2:	482d      	ldr	r0, [pc, #180]	; (b458 <main+0x250>)
    b3a4:	4e35      	ldr	r6, [pc, #212]	; (b47c <main+0x274>)
    b3a6:	47b0      	blx	r6
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    b3a8:	9a07      	ldr	r2, [sp, #28]
    b3aa:	9201      	str	r2, [sp, #4]
    b3ac:	9a06      	ldr	r2, [sp, #24]
    b3ae:	9200      	str	r2, [sp, #0]
    b3b0:	9b05      	ldr	r3, [sp, #20]
    b3b2:	4622      	mov	r2, r4
    b3b4:	4629      	mov	r1, r5
    b3b6:	4828      	ldr	r0, [pc, #160]	; (b458 <main+0x250>)
    b3b8:	4d31      	ldr	r5, [pc, #196]	; (b480 <main+0x278>)
    b3ba:	47a8      	blx	r5
    b3bc:	fa5f f589 	uxtb.w	r5, r9
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    b3c0:	4825      	ldr	r0, [pc, #148]	; (b458 <main+0x250>)
    b3c2:	4b30      	ldr	r3, [pc, #192]	; (b484 <main+0x27c>)
    b3c4:	4798      	blx	r3
    b3c6:	f109 0901 	add.w	r9, r9, #1
    b3ca:	42a8      	cmp	r0, r5
    b3cc:	d8c2      	bhi.n	b354 <main+0x14c>
    b3ce:	e797      	b.n	b300 <main+0xf8>
					if ((RTC1MS - elapsed)<loopwarp){				
						loopwarp-=(RTC1MS - elapsed);
						loopstart-=(RTC1MS - elapsed);
					}
					else{
						loopwarp-=loopwarp;
    b3d0:	9404      	str	r4, [sp, #16]
					
					loopfast++;
				}
			}
			
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    b3d2:	4d2d      	ldr	r5, [pc, #180]	; (b488 <main+0x280>)
					
				delay_us(1);			
    b3d4:	4e2d      	ldr	r6, [pc, #180]	; (b48c <main+0x284>)
    b3d6:	9f03      	ldr	r7, [sp, #12]
    b3d8:	e062      	b.n	b4a0 <main+0x298>
    b3da:	bf00      	nop
    b3dc:	000002d1 	.word	0x000002d1
    b3e0:	0000e95c 	.word	0x0000e95c
    b3e4:	0000f4fc 	.word	0x0000f4fc
    b3e8:	0000d5b1 	.word	0x0000d5b1
    b3ec:	0000f510 	.word	0x0000f510
    b3f0:	00001161 	.word	0x00001161
    b3f4:	0000c1e1 	.word	0x0000c1e1
    b3f8:	0000cbdd 	.word	0x0000cbdd
    b3fc:	000058b1 	.word	0x000058b1
    b400:	000058c5 	.word	0x000058c5
    b404:	0000f51c 	.word	0x0000f51c
    b408:	00002efd 	.word	0x00002efd
    b40c:	0000f53c 	.word	0x0000f53c
    b410:	0000b185 	.word	0x0000b185
    b414:	0000f554 	.word	0x0000f554
    b418:	200033a0 	.word	0x200033a0
    b41c:	200032f8 	.word	0x200032f8
    b420:	00004441 	.word	0x00004441
    b424:	000049f1 	.word	0x000049f1
    b428:	20003bc4 	.word	0x20003bc4
    b42c:	00004a55 	.word	0x00004a55
    b430:	0000f568 	.word	0x0000f568
    b434:	000048a3 	.word	0x000048a3
    b438:	000048f1 	.word	0x000048f1
    b43c:	20007d64 	.word	0x20007d64
    b440:	00005285 	.word	0x00005285
    b444:	00005709 	.word	0x00005709
    b448:	000052af 	.word	0x000052af
    b44c:	000016c9 	.word	0x000016c9
    b450:	00004a03 	.word	0x00004a03
    b454:	00004a0d 	.word	0x00004a0d
    b458:	20007dd8 	.word	0x20007dd8
    b45c:	00004a07 	.word	0x00004a07
    b460:	00004a73 	.word	0x00004a73
    b464:	00004a77 	.word	0x00004a77
    b468:	00004a7b 	.word	0x00004a7b
    b46c:	00002a3f 	.word	0x00002a3f
    b470:	0000cf75 	.word	0x0000cf75
    b474:	3fe00000 	.word	0x3fe00000
    b478:	0000d399 	.word	0x0000d399
    b47c:	00002a87 	.word	0x00002a87
    b480:	00002ad1 	.word	0x00002ad1
    b484:	000029fd 	.word	0x000029fd
    b488:	000049f5 	.word	0x000049f5
    b48c:	00005cdd 	.word	0x00005cdd
    b490:	00004411 	.word	0x00004411
    b494:	00002b8d 	.word	0x00002b8d
    b498:	0000cea9 	.word	0x0000cea9
    b49c:	2001      	movs	r0, #1
    b49e:	47b0      	blx	r6
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    b4a0:	4639      	mov	r1, r7
    b4a2:	4658      	mov	r0, fp
    b4a4:	47a8      	blx	r5
    b4a6:	280f      	cmp	r0, #15
    b4a8:	d9f8      	bls.n	b49c <main+0x294>
			loopwarp+= elapsed - RTC1MS;
			
			loopslow++;
		}
		
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);		
    b4aa:	2101      	movs	r1, #1
    b4ac:	4862      	ldr	r0, [pc, #392]	; (b638 <main+0x430>)
    b4ae:	47d0      	blx	sl
		if (usb_init_variable == 1 && grid_sys_rtc_get_time(&grid_sys_state)>RTC1SEC*4){
    b4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b4b2:	2b00      	cmp	r3, #0
    b4b4:	f47f aed9 	bne.w	b26a <main+0x62>
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    b4b8:	2101      	movs	r1, #1
    b4ba:	485f      	ldr	r0, [pc, #380]	; (b638 <main+0x430>)
    b4bc:	47d0      	blx	sl
			if (usb_d_get_frame_num() == 0){
    b4be:	4b5f      	ldr	r3, [pc, #380]	; (b63c <main+0x434>)
    b4c0:	4798      	blx	r3
    b4c2:	2800      	cmp	r0, #0
    b4c4:	f47f aed8 	bne.w	b278 <main+0x70>
 		if (grid_sys_get_bank_num(&grid_sys_state) == 255 && loopcounter%80 == 0){
    b4c8:	4658      	mov	r0, fp
    b4ca:	4b5d      	ldr	r3, [pc, #372]	; (b640 <main+0x438>)
    b4cc:	4798      	blx	r3
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    b4ce:	4658      	mov	r0, fp
    b4d0:	4b5c      	ldr	r3, [pc, #368]	; (b644 <main+0x43c>)
    b4d2:	4798      	blx	r3
    b4d4:	9003      	str	r0, [sp, #12]
		if (scheduler_report_flag){
    b4d6:	4b5c      	ldr	r3, [pc, #368]	; (b648 <main+0x440>)
    b4d8:	785b      	ldrb	r3, [r3, #1]
    b4da:	b16b      	cbz	r3, b4f8 <main+0x2f0>
			scheduler_report_flag=0;
    b4dc:	4b5a      	ldr	r3, [pc, #360]	; (b648 <main+0x440>)
    b4de:	705c      	strb	r4, [r3, #1]
    b4e0:	4625      	mov	r5, r4
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    b4e2:	4e5a      	ldr	r6, [pc, #360]	; (b64c <main+0x444>)
    b4e4:	b2e9      	uxtb	r1, r5
    b4e6:	4854      	ldr	r0, [pc, #336]	; (b638 <main+0x430>)
    b4e8:	47b0      	blx	r6
    b4ea:	3501      	adds	r5, #1
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    b4ec:	2d08      	cmp	r5, #8
    b4ee:	d1f9      	bne.n	b4e4 <main+0x2dc>
			grid_task_timer_reset(&grid_task_state);
    b4f0:	4851      	ldr	r0, [pc, #324]	; (b638 <main+0x430>)
    b4f2:	4b57      	ldr	r3, [pc, #348]	; (b650 <main+0x448>)
    b4f4:	4798      	blx	r3
			loopwarp = 0;
    b4f6:	9404      	str	r4, [sp, #16]
		grid_task_enter_task(&grid_task_state, GRID_TASK_RECEIVE);
    b4f8:	2102      	movs	r1, #2
    b4fa:	484f      	ldr	r0, [pc, #316]	; (b638 <main+0x430>)
    b4fc:	47d0      	blx	sl
		uint8_t midi_rx_buffer[10] = {0};
    b4fe:	940b      	str	r4, [sp, #44]	; 0x2c
    b500:	940c      	str	r4, [sp, #48]	; 0x30
    b502:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
		audiodf_midi_read(midi_rx_buffer,4);
    b506:	2104      	movs	r1, #4
    b508:	a80b      	add	r0, sp, #44	; 0x2c
    b50a:	4b52      	ldr	r3, [pc, #328]	; (b654 <main+0x44c>)
    b50c:	4798      	blx	r3
		cdcdf_acm_read(GRID_PORT_H.rx_double_buffer, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);			
    b50e:	4d52      	ldr	r5, [pc, #328]	; (b658 <main+0x450>)
    b510:	f44f 7100 	mov.w	r1, #512	; 0x200
    b514:	4628      	mov	r0, r5
    b516:	4b51      	ldr	r3, [pc, #324]	; (b65c <main+0x454>)
    b518:	4798      	blx	r3
		uint16_t usblength = strlen(GRID_PORT_H.rx_double_buffer);
    b51a:	4628      	mov	r0, r5
    b51c:	4b50      	ldr	r3, [pc, #320]	; (b660 <main+0x458>)
    b51e:	4798      	blx	r3
    b520:	b280      	uxth	r0, r0
		if (usblength){	
    b522:	2800      	cmp	r0, #0
    b524:	f47f aed2 	bne.w	b2cc <main+0xc4>
		grid_port_receive_complete_task(&GRID_PORT_N);
    b528:	484e      	ldr	r0, [pc, #312]	; (b664 <main+0x45c>)
    b52a:	4d4f      	ldr	r5, [pc, #316]	; (b668 <main+0x460>)
    b52c:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_E);
    b52e:	484f      	ldr	r0, [pc, #316]	; (b66c <main+0x464>)
    b530:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_S);
    b532:	484f      	ldr	r0, [pc, #316]	; (b670 <main+0x468>)
    b534:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_W);
    b536:	484f      	ldr	r0, [pc, #316]	; (b674 <main+0x46c>)
    b538:	47a8      	blx	r5
		if (GRID_PORT_U.rx_double_buffer_status != 0){	
    b53a:	4b4f      	ldr	r3, [pc, #316]	; (b678 <main+0x470>)
    b53c:	6a1b      	ldr	r3, [r3, #32]
    b53e:	b163      	cbz	r3, b55a <main+0x352>
			uint32_t length = GRID_PORT_U.rx_double_buffer_status;
    b540:	4b4d      	ldr	r3, [pc, #308]	; (b678 <main+0x470>)
    b542:	6a1a      	ldr	r2, [r3, #32]
			if (length !=0){
    b544:	2a00      	cmp	r2, #0
    b546:	f47f aecb 	bne.w	b2e0 <main+0xd8>
					GRID_PORT_U.rx_double_buffer[i] = 0;
    b54a:	494b      	ldr	r1, [pc, #300]	; (b678 <main+0x470>)
    b54c:	188b      	adds	r3, r1, r2
    b54e:	f883 47fc 	strb.w	r4, [r3, #2044]	; 0x7fc
				for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++)
    b552:	3201      	adds	r2, #1
    b554:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    b558:	d1f8      	bne.n	b54c <main+0x344>
		grid_task_enter_task(&grid_task_state, GRID_TASK_REPORT);
    b55a:	2103      	movs	r1, #3
    b55c:	4836      	ldr	r0, [pc, #216]	; (b638 <main+0x430>)
    b55e:	47d0      	blx	sl
		grid_port_process_ui(&GRID_PORT_U); // COOLDOWN DELAY IMPLEMENTED INSIDE
    b560:	4e45      	ldr	r6, [pc, #276]	; (b678 <main+0x470>)
    b562:	4630      	mov	r0, r6
    b564:	4b45      	ldr	r3, [pc, #276]	; (b67c <main+0x474>)
    b566:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_INBOUND);	
    b568:	2104      	movs	r1, #4
    b56a:	4833      	ldr	r0, [pc, #204]	; (b638 <main+0x430>)
    b56c:	47d0      	blx	sl
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    b56e:	2101      	movs	r1, #1
    b570:	4630      	mov	r0, r6
    b572:	4d43      	ldr	r5, [pc, #268]	; (b680 <main+0x478>)
    b574:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    b576:	4621      	mov	r1, r4
    b578:	483a      	ldr	r0, [pc, #232]	; (b664 <main+0x45c>)
    b57a:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    b57c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b66c <main+0x464>
    b580:	4621      	mov	r1, r4
    b582:	4640      	mov	r0, r8
    b584:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_S, 0);
    b586:	f8df 90e8 	ldr.w	r9, [pc, #232]	; b670 <main+0x468>
    b58a:	4621      	mov	r1, r4
    b58c:	4648      	mov	r0, r9
    b58e:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_W, 0);
    b590:	4f38      	ldr	r7, [pc, #224]	; (b674 <main+0x46c>)
    b592:	4621      	mov	r1, r4
    b594:	4638      	mov	r0, r7
    b596:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_H, 0);	// USB	
    b598:	4621      	mov	r1, r4
    b59a:	483a      	ldr	r0, [pc, #232]	; (b684 <main+0x47c>)
    b59c:	47a8      	blx	r5
		grid_task_enter_task(&grid_task_state, GRID_TASK_OUTBOUND);
    b59e:	2105      	movs	r1, #5
    b5a0:	4825      	ldr	r0, [pc, #148]	; (b638 <main+0x430>)
    b5a2:	47d0      	blx	sl
		grid_port_process_outbound_usart(&GRID_PORT_N);
    b5a4:	482f      	ldr	r0, [pc, #188]	; (b664 <main+0x45c>)
    b5a6:	4d38      	ldr	r5, [pc, #224]	; (b688 <main+0x480>)
    b5a8:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_E);
    b5aa:	4640      	mov	r0, r8
    b5ac:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_S);
    b5ae:	4648      	mov	r0, r9
    b5b0:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_W);
    b5b2:	4638      	mov	r0, r7
    b5b4:	47a8      	blx	r5
		grid_port_process_outbound_usb(&GRID_PORT_H);
    b5b6:	4833      	ldr	r0, [pc, #204]	; (b684 <main+0x47c>)
    b5b8:	4b34      	ldr	r3, [pc, #208]	; (b68c <main+0x484>)
    b5ba:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    b5bc:	4630      	mov	r0, r6
    b5be:	4b34      	ldr	r3, [pc, #208]	; (b690 <main+0x488>)
    b5c0:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_ALERT);	
    b5c2:	2107      	movs	r1, #7
    b5c4:	481c      	ldr	r0, [pc, #112]	; (b638 <main+0x430>)
    b5c6:	47d0      	blx	sl
		if (grid_sys_state.alert_state){
    b5c8:	f8bb 3004 	ldrh.w	r3, [fp, #4]
    b5cc:	b29b      	uxth	r3, r3
    b5ce:	2b00      	cmp	r3, #0
    b5d0:	f47f ae8c 	bne.w	b2ec <main+0xe4>
		grid_task_enter_task(&grid_task_state, GRID_TASK_LED);
    b5d4:	2106      	movs	r1, #6
    b5d6:	4818      	ldr	r0, [pc, #96]	; (b638 <main+0x430>)
    b5d8:	47d0      	blx	sl
		grid_led_tick(&grid_led_state);
    b5da:	4d2e      	ldr	r5, [pc, #184]	; (b694 <main+0x48c>)
    b5dc:	4628      	mov	r0, r5
    b5de:	4b2e      	ldr	r3, [pc, #184]	; (b698 <main+0x490>)
    b5e0:	4798      	blx	r3
			grid_led_lowlevel_render_all(&grid_led_state);	
    b5e2:	4628      	mov	r0, r5
    b5e4:	4b2d      	ldr	r3, [pc, #180]	; (b69c <main+0x494>)
    b5e6:	4798      	blx	r3
			grid_led_lowlevel_hardware_start_transfer(&grid_led_state);
    b5e8:	4628      	mov	r0, r5
    b5ea:	4b2d      	ldr	r3, [pc, #180]	; (b6a0 <main+0x498>)
    b5ec:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_IDLE);
    b5ee:	4621      	mov	r1, r4
    b5f0:	4811      	ldr	r0, [pc, #68]	; (b638 <main+0x430>)
    b5f2:	47d0      	blx	sl
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    b5f4:	9d03      	ldr	r5, [sp, #12]
    b5f6:	4629      	mov	r1, r5
    b5f8:	4658      	mov	r0, fp
    b5fa:	4b2a      	ldr	r3, [pc, #168]	; (b6a4 <main+0x49c>)
    b5fc:	4798      	blx	r3
		if (elapsed < RTC1MS){
    b5fe:	280f      	cmp	r0, #15
    b600:	d814      	bhi.n	b62c <main+0x424>
			if (loopwarp>5){
    b602:	9904      	ldr	r1, [sp, #16]
    b604:	2905      	cmp	r1, #5
    b606:	f67f aee4 	bls.w	b3d2 <main+0x1ca>
				if (RTC1MS - elapsed > 0){
    b60a:	2810      	cmp	r0, #16
    b60c:	f43f aee1 	beq.w	b3d2 <main+0x1ca>
					if ((RTC1MS - elapsed)<loopwarp){				
    b610:	f1c0 0310 	rsb	r3, r0, #16
    b614:	4299      	cmp	r1, r3
    b616:	f67f aedb 	bls.w	b3d0 <main+0x1c8>
    b61a:	f1a1 0310 	sub.w	r3, r1, #16
						loopwarp-=(RTC1MS - elapsed);
    b61e:	4403      	add	r3, r0
    b620:	9304      	str	r3, [sp, #16]
    b622:	f1a5 0310 	sub.w	r3, r5, #16
						loopstart-=(RTC1MS - elapsed);
    b626:	18c3      	adds	r3, r0, r3
    b628:	9303      	str	r3, [sp, #12]
    b62a:	e6d2      	b.n	b3d2 <main+0x1ca>
    b62c:	9b04      	ldr	r3, [sp, #16]
    b62e:	3b10      	subs	r3, #16
			loopwarp+= elapsed - RTC1MS;
    b630:	4403      	add	r3, r0
    b632:	9304      	str	r3, [sp, #16]
    b634:	e739      	b.n	b4aa <main+0x2a2>
    b636:	bf00      	nop
    b638:	20003bc4 	.word	0x20003bc4
    b63c:	00006fe5 	.word	0x00006fe5
    b640:	00004893 	.word	0x00004893
    b644:	000049f1 	.word	0x000049f1
    b648:	20000df0 	.word	0x20000df0
    b64c:	00004437 	.word	0x00004437
    b650:	00004427 	.word	0x00004427
    b654:	0000c249 	.word	0x0000c249
    b658:	20006424 	.word	0x20006424
    b65c:	0000ba25 	.word	0x0000ba25
    b660:	0000d87d 	.word	0x0000d87d
    b664:	200012a4 	.word	0x200012a4
    b668:	00001c79 	.word	0x00001c79
    b66c:	20006d44 	.word	0x20006d44
    b670:	20004c08 	.word	0x20004c08
    b674:	20003be8 	.word	0x20003be8
    b678:	200022d0 	.word	0x200022d0
    b67c:	000052d1 	.word	0x000052d1
    b680:	0000206d 	.word	0x0000206d
    b684:	20005c28 	.word	0x20005c28
    b688:	000028fd 	.word	0x000028fd
    b68c:	00002241 	.word	0x00002241
    b690:	00002431 	.word	0x00002431
    b694:	20007dd8 	.word	0x20007dd8
    b698:	00002a01 	.word	0x00002a01
    b69c:	00002ead 	.word	0x00002ead
    b6a0:	00002ed1 	.word	0x00002ed1
    b6a4:	000049f5 	.word	0x000049f5

0000b6a8 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    b6a8:	b940      	cbnz	r0, b6bc <_read+0x14>
{
    b6aa:	b508      	push	{r3, lr}
    b6ac:	460b      	mov	r3, r1
    b6ae:	4611      	mov	r1, r2
    b6b0:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    b6b2:	4b04      	ldr	r3, [pc, #16]	; (b6c4 <_read+0x1c>)
    b6b4:	4798      	blx	r3
    b6b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    b6ba:	bd08      	pop	{r3, pc}
		return -1;
    b6bc:	f04f 30ff 	mov.w	r0, #4294967295
    b6c0:	4770      	bx	lr
    b6c2:	bf00      	nop
    b6c4:	0000b719 	.word	0x0000b719

0000b6c8 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    b6c8:	3801      	subs	r0, #1
    b6ca:	2802      	cmp	r0, #2
    b6cc:	d808      	bhi.n	b6e0 <_write+0x18>
{
    b6ce:	b508      	push	{r3, lr}
    b6d0:	460b      	mov	r3, r1
    b6d2:	4611      	mov	r1, r2
    b6d4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    b6d6:	4b04      	ldr	r3, [pc, #16]	; (b6e8 <_write+0x20>)
    b6d8:	4798      	blx	r3
    b6da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    b6de:	bd08      	pop	{r3, pc}
		return -1;
    b6e0:	f04f 30ff 	mov.w	r0, #4294967295
    b6e4:	4770      	bx	lr
    b6e6:	bf00      	nop
    b6e8:	0000b73d 	.word	0x0000b73d

0000b6ec <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    b6ec:	b570      	push	{r4, r5, r6, lr}
    b6ee:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    b6f0:	4d06      	ldr	r5, [pc, #24]	; (b70c <stdio_io_init+0x20>)
    b6f2:	682b      	ldr	r3, [r5, #0]
    b6f4:	2100      	movs	r1, #0
    b6f6:	6898      	ldr	r0, [r3, #8]
    b6f8:	4c05      	ldr	r4, [pc, #20]	; (b710 <stdio_io_init+0x24>)
    b6fa:	47a0      	blx	r4
	setbuf(stdin, NULL);
    b6fc:	682b      	ldr	r3, [r5, #0]
    b6fe:	2100      	movs	r1, #0
    b700:	6858      	ldr	r0, [r3, #4]
    b702:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    b704:	4b03      	ldr	r3, [pc, #12]	; (b714 <stdio_io_init+0x28>)
    b706:	601e      	str	r6, [r3, #0]
    b708:	bd70      	pop	{r4, r5, r6, pc}
    b70a:	bf00      	nop
    b70c:	20000548 	.word	0x20000548
    b710:	0000d6c9 	.word	0x0000d6c9
    b714:	20000e48 	.word	0x20000e48

0000b718 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    b718:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    b71a:	4b06      	ldr	r3, [pc, #24]	; (b734 <stdio_io_read+0x1c>)
    b71c:	681b      	ldr	r3, [r3, #0]
    b71e:	b133      	cbz	r3, b72e <stdio_io_read+0x16>
    b720:	460a      	mov	r2, r1
    b722:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    b724:	b292      	uxth	r2, r2
    b726:	4618      	mov	r0, r3
    b728:	4b03      	ldr	r3, [pc, #12]	; (b738 <stdio_io_read+0x20>)
    b72a:	4798      	blx	r3
    b72c:	bd08      	pop	{r3, pc}
		return 0;
    b72e:	2000      	movs	r0, #0
}
    b730:	bd08      	pop	{r3, pc}
    b732:	bf00      	nop
    b734:	20000e48 	.word	0x20000e48
    b738:	000060f9 	.word	0x000060f9

0000b73c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    b73c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    b73e:	4b06      	ldr	r3, [pc, #24]	; (b758 <stdio_io_write+0x1c>)
    b740:	681b      	ldr	r3, [r3, #0]
    b742:	b133      	cbz	r3, b752 <stdio_io_write+0x16>
    b744:	460a      	mov	r2, r1
    b746:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    b748:	b292      	uxth	r2, r2
    b74a:	4618      	mov	r0, r3
    b74c:	4b03      	ldr	r3, [pc, #12]	; (b75c <stdio_io_write+0x20>)
    b74e:	4798      	blx	r3
    b750:	bd08      	pop	{r3, pc}
		return 0;
    b752:	2000      	movs	r0, #0
}
    b754:	bd08      	pop	{r3, pc}
    b756:	bf00      	nop
    b758:	20000e48 	.word	0x20000e48
    b75c:	000060c9 	.word	0x000060c9

0000b760 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    b760:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    b762:	4c04      	ldr	r4, [pc, #16]	; (b774 <stdio_redirect_init+0x14>)
    b764:	4620      	mov	r0, r4
    b766:	4b04      	ldr	r3, [pc, #16]	; (b778 <stdio_redirect_init+0x18>)
    b768:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    b76a:	4620      	mov	r0, r4
    b76c:	4b03      	ldr	r3, [pc, #12]	; (b77c <stdio_redirect_init+0x1c>)
    b76e:	4798      	blx	r3
    b770:	bd10      	pop	{r4, pc}
    b772:	bf00      	nop
    b774:	20001044 	.word	0x20001044
    b778:	00006cd9 	.word	0x00006cd9
    b77c:	0000b6ed 	.word	0x0000b6ed

0000b780 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b780:	b5f0      	push	{r4, r5, r6, r7, lr}
    b782:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b784:	780b      	ldrb	r3, [r1, #0]
    b786:	f3c3 1441 	ubfx	r4, r3, #5, #2
    b78a:	2c01      	cmp	r4, #1
    b78c:	d15e      	bne.n	b84c <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b78e:	888c      	ldrh	r4, [r1, #4]
    b790:	4d35      	ldr	r5, [pc, #212]	; (b868 <cdcdf_acm_req+0xe8>)
    b792:	782d      	ldrb	r5, [r5, #0]
    b794:	42a5      	cmp	r5, r4
    b796:	d003      	beq.n	b7a0 <cdcdf_acm_req+0x20>
    b798:	4d33      	ldr	r5, [pc, #204]	; (b868 <cdcdf_acm_req+0xe8>)
    b79a:	786d      	ldrb	r5, [r5, #1]
    b79c:	42a5      	cmp	r5, r4
    b79e:	d158      	bne.n	b852 <cdcdf_acm_req+0xd2>
    b7a0:	4616      	mov	r6, r2
    b7a2:	460c      	mov	r4, r1
    b7a4:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b7a6:	f013 0f80 	tst.w	r3, #128	; 0x80
    b7aa:	d10c      	bne.n	b7c6 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    b7ac:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b7ae:	4b2f      	ldr	r3, [pc, #188]	; (b86c <cdcdf_acm_req+0xec>)
    b7b0:	4798      	blx	r3
    b7b2:	4601      	mov	r1, r0
	switch (req->bRequest) {
    b7b4:	7863      	ldrb	r3, [r4, #1]
    b7b6:	2b20      	cmp	r3, #32
    b7b8:	d013      	beq.n	b7e2 <cdcdf_acm_req+0x62>
    b7ba:	2b22      	cmp	r3, #34	; 0x22
    b7bc:	d032      	beq.n	b824 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    b7be:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    b7c2:	b003      	add	sp, #12
    b7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    b7c6:	2a01      	cmp	r2, #1
    b7c8:	d046      	beq.n	b858 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    b7ca:	784b      	ldrb	r3, [r1, #1]
    b7cc:	2b21      	cmp	r3, #33	; 0x21
    b7ce:	d145      	bne.n	b85c <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b7d0:	88cb      	ldrh	r3, [r1, #6]
    b7d2:	2b07      	cmp	r3, #7
    b7d4:	d145      	bne.n	b862 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b7d6:	2300      	movs	r3, #0
    b7d8:	2207      	movs	r2, #7
    b7da:	4925      	ldr	r1, [pc, #148]	; (b870 <cdcdf_acm_req+0xf0>)
    b7dc:	4c25      	ldr	r4, [pc, #148]	; (b874 <cdcdf_acm_req+0xf4>)
    b7de:	47a0      	blx	r4
    b7e0:	e7ef      	b.n	b7c2 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b7e2:	2f07      	cmp	r7, #7
    b7e4:	d12b      	bne.n	b83e <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    b7e6:	b1be      	cbz	r6, b818 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b7e8:	6800      	ldr	r0, [r0, #0]
    b7ea:	9000      	str	r0, [sp, #0]
    b7ec:	888a      	ldrh	r2, [r1, #4]
    b7ee:	798b      	ldrb	r3, [r1, #6]
    b7f0:	f8ad 2004 	strh.w	r2, [sp, #4]
    b7f4:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b7f8:	4b1b      	ldr	r3, [pc, #108]	; (b868 <cdcdf_acm_req+0xe8>)
    b7fa:	691b      	ldr	r3, [r3, #16]
    b7fc:	b113      	cbz	r3, b804 <cdcdf_acm_req+0x84>
    b7fe:	4668      	mov	r0, sp
    b800:	4798      	blx	r3
    b802:	b1f8      	cbz	r0, b844 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    b804:	4b18      	ldr	r3, [pc, #96]	; (b868 <cdcdf_acm_req+0xe8>)
    b806:	aa02      	add	r2, sp, #8
    b808:	e912 0003 	ldmdb	r2, {r0, r1}
    b80c:	6098      	str	r0, [r3, #8]
    b80e:	8199      	strh	r1, [r3, #12]
    b810:	0c09      	lsrs	r1, r1, #16
    b812:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    b814:	2000      	movs	r0, #0
    b816:	e7d4      	b.n	b7c2 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b818:	2300      	movs	r3, #0
    b81a:	2207      	movs	r2, #7
    b81c:	4628      	mov	r0, r5
    b81e:	4c15      	ldr	r4, [pc, #84]	; (b874 <cdcdf_acm_req+0xf4>)
    b820:	47a0      	blx	r4
    b822:	e7ce      	b.n	b7c2 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    b824:	2300      	movs	r3, #0
    b826:	461a      	mov	r2, r3
    b828:	4619      	mov	r1, r3
    b82a:	4618      	mov	r0, r3
    b82c:	4d11      	ldr	r5, [pc, #68]	; (b874 <cdcdf_acm_req+0xf4>)
    b82e:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    b830:	4b0d      	ldr	r3, [pc, #52]	; (b868 <cdcdf_acm_req+0xe8>)
    b832:	695b      	ldr	r3, [r3, #20]
    b834:	b143      	cbz	r3, b848 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    b836:	8860      	ldrh	r0, [r4, #2]
    b838:	4798      	blx	r3
		return ERR_NONE;
    b83a:	2000      	movs	r0, #0
    b83c:	e7c1      	b.n	b7c2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    b83e:	f04f 30ff 	mov.w	r0, #4294967295
    b842:	e7be      	b.n	b7c2 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    b844:	2000      	movs	r0, #0
    b846:	e7bc      	b.n	b7c2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    b848:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    b84a:	e7ba      	b.n	b7c2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    b84c:	f06f 0009 	mvn.w	r0, #9
    b850:	e7b7      	b.n	b7c2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    b852:	f06f 0009 	mvn.w	r0, #9
    b856:	e7b4      	b.n	b7c2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    b858:	2000      	movs	r0, #0
    b85a:	e7b2      	b.n	b7c2 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    b85c:	f06f 000c 	mvn.w	r0, #12
    b860:	e7af      	b.n	b7c2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    b862:	f04f 30ff 	mov.w	r0, #4294967295
    b866:	e7ac      	b.n	b7c2 <cdcdf_acm_req+0x42>
    b868:	20000e4c 	.word	0x20000e4c
    b86c:	0000c959 	.word	0x0000c959
    b870:	20000e54 	.word	0x20000e54
    b874:	0000c435 	.word	0x0000c435

0000b878 <cdcdf_acm_ctrl>:
{
    b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b87c:	b083      	sub	sp, #12
    b87e:	4616      	mov	r6, r2
	switch (ctrl) {
    b880:	2901      	cmp	r1, #1
    b882:	d066      	beq.n	b952 <cdcdf_acm_ctrl+0xda>
    b884:	b141      	cbz	r1, b898 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    b886:	2902      	cmp	r1, #2
    b888:	bf0c      	ite	eq
    b88a:	f06f 001a 	mvneq.w	r0, #26
    b88e:	f06f 000c 	mvnne.w	r0, #12
}
    b892:	b003      	add	sp, #12
    b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b898:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    b89c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    b89e:	2800      	cmp	r0, #0
    b8a0:	f000 8085 	beq.w	b9ae <cdcdf_acm_ctrl+0x136>
    b8a4:	f10a 3bff 	add.w	fp, sl, #4294967295
    b8a8:	f10a 0301 	add.w	r3, sl, #1
    b8ac:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b8ae:	4f46      	ldr	r7, [pc, #280]	; (b9c8 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    b8b0:	f8df 9124 	ldr.w	r9, [pc, #292]	; b9d8 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b8b4:	f8df 8124 	ldr.w	r8, [pc, #292]	; b9dc <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    b8b8:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b8ba:	7943      	ldrb	r3, [r0, #5]
    b8bc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    b8c0:	2b02      	cmp	r3, #2
    b8c2:	d002      	beq.n	b8ca <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    b8c4:	f06f 0009 	mvn.w	r0, #9
    b8c8:	e7e3      	b.n	b892 <cdcdf_acm_ctrl+0x1a>
    b8ca:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b8ce:	f89b 3000 	ldrb.w	r3, [fp]
    b8d2:	429a      	cmp	r2, r3
    b8d4:	d06e      	beq.n	b9b4 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b8d6:	2bff      	cmp	r3, #255	; 0xff
    b8d8:	d16f      	bne.n	b9ba <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b8da:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b8de:	2205      	movs	r2, #5
    b8e0:	6871      	ldr	r1, [r6, #4]
    b8e2:	4b3a      	ldr	r3, [pc, #232]	; (b9cc <cdcdf_acm_ctrl+0x154>)
    b8e4:	4798      	blx	r3
		while (NULL != ep) {
    b8e6:	4604      	mov	r4, r0
    b8e8:	b1f8      	cbz	r0, b92a <cdcdf_acm_ctrl+0xb2>
    b8ea:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    b8ee:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    b8f0:	7963      	ldrb	r3, [r4, #5]
    b8f2:	7922      	ldrb	r2, [r4, #4]
    b8f4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b8f8:	b292      	uxth	r2, r2
    b8fa:	78e1      	ldrb	r1, [r4, #3]
    b8fc:	4628      	mov	r0, r5
    b8fe:	47b8      	blx	r7
    b900:	2800      	cmp	r0, #0
    b902:	d15d      	bne.n	b9c0 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b904:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b908:	bf14      	ite	ne
    b90a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b90e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b912:	4628      	mov	r0, r5
    b914:	47c8      	blx	r9
			desc->sod = ep;
    b916:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    b918:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b91a:	6871      	ldr	r1, [r6, #4]
    b91c:	4420      	add	r0, r4
    b91e:	47c0      	blx	r8
		while (NULL != ep) {
    b920:	4604      	mov	r4, r0
    b922:	2800      	cmp	r0, #0
    b924:	d1e3      	bne.n	b8ee <cdcdf_acm_ctrl+0x76>
    b926:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b92a:	6833      	ldr	r3, [r6, #0]
    b92c:	7818      	ldrb	r0, [r3, #0]
    b92e:	2204      	movs	r2, #4
    b930:	6871      	ldr	r1, [r6, #4]
    b932:	4418      	add	r0, r3
    b934:	4b25      	ldr	r3, [pc, #148]	; (b9cc <cdcdf_acm_ctrl+0x154>)
    b936:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    b938:	9b00      	ldr	r3, [sp, #0]
    b93a:	459b      	cmp	fp, r3
    b93c:	d004      	beq.n	b948 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    b93e:	2800      	cmp	r0, #0
    b940:	d1ba      	bne.n	b8b8 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    b942:	f06f 0009 	mvn.w	r0, #9
    b946:	e7a4      	b.n	b892 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    b948:	2201      	movs	r2, #1
    b94a:	4b21      	ldr	r3, [pc, #132]	; (b9d0 <cdcdf_acm_ctrl+0x158>)
    b94c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b94e:	2000      	movs	r0, #0
    b950:	e79f      	b.n	b892 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b952:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    b954:	b142      	cbz	r2, b968 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b956:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b958:	795b      	ldrb	r3, [r3, #5]
    b95a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    b95e:	2b02      	cmp	r3, #2
    b960:	d002      	beq.n	b968 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    b962:	f06f 0009 	mvn.w	r0, #9
    b966:	e794      	b.n	b892 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    b968:	7823      	ldrb	r3, [r4, #0]
    b96a:	2bff      	cmp	r3, #255	; 0xff
    b96c:	d008      	beq.n	b980 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    b96e:	23ff      	movs	r3, #255	; 0xff
    b970:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    b972:	78a0      	ldrb	r0, [r4, #2]
    b974:	4298      	cmp	r0, r3
    b976:	d003      	beq.n	b980 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b978:	4b16      	ldr	r3, [pc, #88]	; (b9d4 <cdcdf_acm_ctrl+0x15c>)
    b97a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b97c:	23ff      	movs	r3, #255	; 0xff
    b97e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    b980:	7863      	ldrb	r3, [r4, #1]
    b982:	2bff      	cmp	r3, #255	; 0xff
    b984:	d008      	beq.n	b998 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    b986:	23ff      	movs	r3, #255	; 0xff
    b988:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    b98a:	78e0      	ldrb	r0, [r4, #3]
    b98c:	4298      	cmp	r0, r3
    b98e:	d003      	beq.n	b998 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b990:	4b10      	ldr	r3, [pc, #64]	; (b9d4 <cdcdf_acm_ctrl+0x15c>)
    b992:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b994:	23ff      	movs	r3, #255	; 0xff
    b996:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    b998:	7920      	ldrb	r0, [r4, #4]
    b99a:	28ff      	cmp	r0, #255	; 0xff
    b99c:	d003      	beq.n	b9a6 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    b99e:	4b0d      	ldr	r3, [pc, #52]	; (b9d4 <cdcdf_acm_ctrl+0x15c>)
    b9a0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b9a2:	23ff      	movs	r3, #255	; 0xff
    b9a4:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    b9a6:	2000      	movs	r0, #0
    b9a8:	4b09      	ldr	r3, [pc, #36]	; (b9d0 <cdcdf_acm_ctrl+0x158>)
    b9aa:	7158      	strb	r0, [r3, #5]
    b9ac:	e771      	b.n	b892 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    b9ae:	f06f 0009 	mvn.w	r0, #9
    b9b2:	e76e      	b.n	b892 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    b9b4:	f06f 0011 	mvn.w	r0, #17
    b9b8:	e76b      	b.n	b892 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    b9ba:	f06f 001b 	mvn.w	r0, #27
    b9be:	e768      	b.n	b892 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    b9c0:	f06f 0013 	mvn.w	r0, #19
    b9c4:	e765      	b.n	b892 <cdcdf_acm_ctrl+0x1a>
    b9c6:	bf00      	nop
    b9c8:	00006ffd 	.word	0x00006ffd
    b9cc:	0000c979 	.word	0x0000c979
    b9d0:	20000e4c 	.word	0x20000e4c
    b9d4:	00007065 	.word	0x00007065
    b9d8:	00007091 	.word	0x00007091
    b9dc:	0000c9b3 	.word	0x0000c9b3

0000b9e0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b9e0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    b9e2:	4b0a      	ldr	r3, [pc, #40]	; (ba0c <cdcdf_acm_init+0x2c>)
    b9e4:	4798      	blx	r3
    b9e6:	2801      	cmp	r0, #1
    b9e8:	d80c      	bhi.n	ba04 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b9ea:	4809      	ldr	r0, [pc, #36]	; (ba10 <cdcdf_acm_init+0x30>)
    b9ec:	4b09      	ldr	r3, [pc, #36]	; (ba14 <cdcdf_acm_init+0x34>)
    b9ee:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b9f0:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    b9f2:	3018      	adds	r0, #24
    b9f4:	4b08      	ldr	r3, [pc, #32]	; (ba18 <cdcdf_acm_init+0x38>)
    b9f6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b9f8:	4908      	ldr	r1, [pc, #32]	; (ba1c <cdcdf_acm_init+0x3c>)
    b9fa:	2001      	movs	r0, #1
    b9fc:	4b08      	ldr	r3, [pc, #32]	; (ba20 <cdcdf_acm_init+0x40>)
    b9fe:	4798      	blx	r3
	return ERR_NONE;
    ba00:	2000      	movs	r0, #0
    ba02:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    ba04:	f06f 0010 	mvn.w	r0, #16
}
    ba08:	bd08      	pop	{r3, pc}
    ba0a:	bf00      	nop
    ba0c:	0000c965 	.word	0x0000c965
    ba10:	20000e4c 	.word	0x20000e4c
    ba14:	0000b879 	.word	0x0000b879
    ba18:	0000c905 	.word	0x0000c905
    ba1c:	20000388 	.word	0x20000388
    ba20:	0000c871 	.word	0x0000c871

0000ba24 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    ba24:	4b07      	ldr	r3, [pc, #28]	; (ba44 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    ba26:	795b      	ldrb	r3, [r3, #5]
    ba28:	b143      	cbz	r3, ba3c <cdcdf_acm_read+0x18>
{
    ba2a:	b510      	push	{r4, lr}
    ba2c:	460a      	mov	r2, r1
    ba2e:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    ba30:	2300      	movs	r3, #0
    ba32:	4804      	ldr	r0, [pc, #16]	; (ba44 <cdcdf_acm_read+0x20>)
    ba34:	7900      	ldrb	r0, [r0, #4]
    ba36:	4c04      	ldr	r4, [pc, #16]	; (ba48 <cdcdf_acm_read+0x24>)
    ba38:	47a0      	blx	r4
    ba3a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    ba3c:	f06f 0010 	mvn.w	r0, #16
    ba40:	4770      	bx	lr
    ba42:	bf00      	nop
    ba44:	20000e4c 	.word	0x20000e4c
    ba48:	0000c435 	.word	0x0000c435

0000ba4c <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    ba4c:	4b07      	ldr	r3, [pc, #28]	; (ba6c <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    ba4e:	795b      	ldrb	r3, [r3, #5]
    ba50:	b143      	cbz	r3, ba64 <cdcdf_acm_write+0x18>
{
    ba52:	b510      	push	{r4, lr}
    ba54:	460a      	mov	r2, r1
    ba56:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    ba58:	2301      	movs	r3, #1
    ba5a:	4804      	ldr	r0, [pc, #16]	; (ba6c <cdcdf_acm_write+0x20>)
    ba5c:	78c0      	ldrb	r0, [r0, #3]
    ba5e:	4c04      	ldr	r4, [pc, #16]	; (ba70 <cdcdf_acm_write+0x24>)
    ba60:	47a0      	blx	r4
    ba62:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    ba64:	f06f 0010 	mvn.w	r0, #16
    ba68:	4770      	bx	lr
    ba6a:	bf00      	nop
    ba6c:	20000e4c 	.word	0x20000e4c
    ba70:	0000c435 	.word	0x0000c435

0000ba74 <cdcdf_acm_register_callback>:
{
    ba74:	b508      	push	{r3, lr}
	switch (cb_type) {
    ba76:	2803      	cmp	r0, #3
    ba78:	d81b      	bhi.n	bab2 <cdcdf_acm_register_callback+0x3e>
    ba7a:	e8df f000 	tbb	[pc, r0]
    ba7e:	0a02      	.short	0x0a02
    ba80:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    ba82:	460a      	mov	r2, r1
    ba84:	2102      	movs	r1, #2
    ba86:	4b0c      	ldr	r3, [pc, #48]	; (bab8 <cdcdf_acm_register_callback+0x44>)
    ba88:	7918      	ldrb	r0, [r3, #4]
    ba8a:	4b0c      	ldr	r3, [pc, #48]	; (babc <cdcdf_acm_register_callback+0x48>)
    ba8c:	4798      	blx	r3
	return ERR_NONE;
    ba8e:	2000      	movs	r0, #0
		break;
    ba90:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    ba92:	460a      	mov	r2, r1
    ba94:	2102      	movs	r1, #2
    ba96:	4b08      	ldr	r3, [pc, #32]	; (bab8 <cdcdf_acm_register_callback+0x44>)
    ba98:	78d8      	ldrb	r0, [r3, #3]
    ba9a:	4b08      	ldr	r3, [pc, #32]	; (babc <cdcdf_acm_register_callback+0x48>)
    ba9c:	4798      	blx	r3
	return ERR_NONE;
    ba9e:	2000      	movs	r0, #0
		break;
    baa0:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    baa2:	4b05      	ldr	r3, [pc, #20]	; (bab8 <cdcdf_acm_register_callback+0x44>)
    baa4:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    baa6:	2000      	movs	r0, #0
		break;
    baa8:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    baaa:	4b03      	ldr	r3, [pc, #12]	; (bab8 <cdcdf_acm_register_callback+0x44>)
    baac:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    baae:	2000      	movs	r0, #0
		break;
    bab0:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    bab2:	f06f 000c 	mvn.w	r0, #12
}
    bab6:	bd08      	pop	{r3, pc}
    bab8:	20000e4c 	.word	0x20000e4c
    babc:	00007265 	.word	0x00007265

0000bac0 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bac0:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    bac2:	780b      	ldrb	r3, [r1, #0]
    bac4:	2b81      	cmp	r3, #129	; 0x81
    bac6:	d010      	beq.n	baea <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bac8:	f3c3 1341 	ubfx	r3, r3, #5, #2
    bacc:	2b01      	cmp	r3, #1
    bace:	d13f      	bne.n	bb50 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    bad0:	888a      	ldrh	r2, [r1, #4]
    bad2:	4b22      	ldr	r3, [pc, #136]	; (bb5c <hid_keyboard_req+0x9c>)
    bad4:	7b1b      	ldrb	r3, [r3, #12]
    bad6:	429a      	cmp	r2, r3
    bad8:	d13d      	bne.n	bb56 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    bada:	784b      	ldrb	r3, [r1, #1]
    badc:	2b03      	cmp	r3, #3
    bade:	d028      	beq.n	bb32 <hid_keyboard_req+0x72>
    bae0:	2b0b      	cmp	r3, #11
    bae2:	d02c      	beq.n	bb3e <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    bae4:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    bae8:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    baea:	784b      	ldrb	r3, [r1, #1]
    baec:	2b06      	cmp	r3, #6
    baee:	d002      	beq.n	baf6 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    baf0:	f06f 0009 	mvn.w	r0, #9
    baf4:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    baf6:	888a      	ldrh	r2, [r1, #4]
    baf8:	4b18      	ldr	r3, [pc, #96]	; (bb5c <hid_keyboard_req+0x9c>)
    bafa:	7b1b      	ldrb	r3, [r3, #12]
    bafc:	429a      	cmp	r2, r3
    bafe:	d002      	beq.n	bb06 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    bb00:	f06f 0009 	mvn.w	r0, #9
    bb04:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    bb06:	884b      	ldrh	r3, [r1, #2]
    bb08:	0a1b      	lsrs	r3, r3, #8
    bb0a:	2b21      	cmp	r3, #33	; 0x21
    bb0c:	d004      	beq.n	bb18 <hid_keyboard_req+0x58>
    bb0e:	2b22      	cmp	r3, #34	; 0x22
    bb10:	d009      	beq.n	bb26 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    bb12:	f06f 000c 	mvn.w	r0, #12
    bb16:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    bb18:	4b10      	ldr	r3, [pc, #64]	; (bb5c <hid_keyboard_req+0x9c>)
    bb1a:	6819      	ldr	r1, [r3, #0]
    bb1c:	2300      	movs	r3, #0
    bb1e:	780a      	ldrb	r2, [r1, #0]
    bb20:	4c0f      	ldr	r4, [pc, #60]	; (bb60 <hid_keyboard_req+0xa0>)
    bb22:	47a0      	blx	r4
    bb24:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    bb26:	2300      	movs	r3, #0
    bb28:	223b      	movs	r2, #59	; 0x3b
    bb2a:	490e      	ldr	r1, [pc, #56]	; (bb64 <hid_keyboard_req+0xa4>)
    bb2c:	4c0c      	ldr	r4, [pc, #48]	; (bb60 <hid_keyboard_req+0xa0>)
    bb2e:	47a0      	blx	r4
    bb30:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    bb32:	2300      	movs	r3, #0
    bb34:	2201      	movs	r2, #1
    bb36:	490c      	ldr	r1, [pc, #48]	; (bb68 <hid_keyboard_req+0xa8>)
    bb38:	4c09      	ldr	r4, [pc, #36]	; (bb60 <hid_keyboard_req+0xa0>)
    bb3a:	47a0      	blx	r4
    bb3c:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    bb3e:	884a      	ldrh	r2, [r1, #2]
    bb40:	4b06      	ldr	r3, [pc, #24]	; (bb5c <hid_keyboard_req+0x9c>)
    bb42:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    bb44:	2300      	movs	r3, #0
    bb46:	461a      	mov	r2, r3
    bb48:	4619      	mov	r1, r3
    bb4a:	4c05      	ldr	r4, [pc, #20]	; (bb60 <hid_keyboard_req+0xa0>)
    bb4c:	47a0      	blx	r4
    bb4e:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    bb50:	f06f 0009 	mvn.w	r0, #9
    bb54:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    bb56:	f06f 0009 	mvn.w	r0, #9
    bb5a:	bd10      	pop	{r4, pc}
    bb5c:	20000e70 	.word	0x20000e70
    bb60:	0000c435 	.word	0x0000c435
    bb64:	0000f584 	.word	0x0000f584
    bb68:	20000e7f 	.word	0x20000e7f

0000bb6c <hid_keyboard_ctrl>:
{
    bb6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb70:	4614      	mov	r4, r2
	switch (ctrl) {
    bb72:	2901      	cmp	r1, #1
    bb74:	d050      	beq.n	bc18 <hid_keyboard_ctrl+0xac>
    bb76:	b141      	cbz	r1, bb8a <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    bb78:	2902      	cmp	r1, #2
    bb7a:	bf0c      	ite	eq
    bb7c:	f06f 051a 	mvneq.w	r5, #26
    bb80:	f06f 050c 	mvnne.w	r5, #12
}
    bb84:	4628      	mov	r0, r5
    bb86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    bb8a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    bb8e:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    bb90:	2b00      	cmp	r3, #0
    bb92:	d05e      	beq.n	bc52 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    bb94:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    bb96:	795b      	ldrb	r3, [r3, #5]
    bb98:	2b03      	cmp	r3, #3
    bb9a:	d15d      	bne.n	bc58 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    bb9c:	f898 300c 	ldrb.w	r3, [r8, #12]
    bba0:	429a      	cmp	r2, r3
    bba2:	d05c      	beq.n	bc5e <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    bba4:	2bff      	cmp	r3, #255	; 0xff
    bba6:	d15d      	bne.n	bc64 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    bba8:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    bbac:	6823      	ldr	r3, [r4, #0]
    bbae:	7818      	ldrb	r0, [r3, #0]
    bbb0:	2221      	movs	r2, #33	; 0x21
    bbb2:	6861      	ldr	r1, [r4, #4]
    bbb4:	4418      	add	r0, r3
    bbb6:	4b31      	ldr	r3, [pc, #196]	; (bc7c <hid_keyboard_ctrl+0x110>)
    bbb8:	4798      	blx	r3
    bbba:	4b31      	ldr	r3, [pc, #196]	; (bc80 <hid_keyboard_ctrl+0x114>)
    bbbc:	6018      	str	r0, [r3, #0]
    bbbe:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bbc0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; bc88 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bbc4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; bc8c <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    bbc8:	f8df b0c4 	ldr.w	fp, [pc, #196]	; bc90 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bbcc:	6823      	ldr	r3, [r4, #0]
    bbce:	7818      	ldrb	r0, [r3, #0]
    bbd0:	6861      	ldr	r1, [r4, #4]
    bbd2:	4418      	add	r0, r3
    bbd4:	47c8      	blx	r9
		desc->sod = ep;
    bbd6:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    bbd8:	2800      	cmp	r0, #0
    bbda:	d046      	beq.n	bc6a <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    bbdc:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    bbde:	7943      	ldrb	r3, [r0, #5]
    bbe0:	7902      	ldrb	r2, [r0, #4]
    bbe2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bbe6:	b292      	uxth	r2, r2
    bbe8:	78c1      	ldrb	r1, [r0, #3]
    bbea:	4638      	mov	r0, r7
    bbec:	47d0      	blx	sl
    bbee:	4605      	mov	r5, r0
    bbf0:	2800      	cmp	r0, #0
    bbf2:	d13d      	bne.n	bc70 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bbf4:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    bbf8:	bf14      	ite	ne
    bbfa:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bbfe:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    bc02:	4638      	mov	r0, r7
    bc04:	47d8      	blx	fp
    bc06:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    bc08:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    bc0c:	d1de      	bne.n	bbcc <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    bc0e:	4b1c      	ldr	r3, [pc, #112]	; (bc80 <hid_keyboard_ctrl+0x114>)
    bc10:	2201      	movs	r2, #1
    bc12:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    bc14:	741a      	strb	r2, [r3, #16]
    bc16:	e7b5      	b.n	bb84 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    bc18:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    bc1a:	b11a      	cbz	r2, bc24 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bc1c:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    bc1e:	795b      	ldrb	r3, [r3, #5]
    bc20:	2b03      	cmp	r3, #3
    bc22:	d128      	bne.n	bc76 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    bc24:	7b2b      	ldrb	r3, [r5, #12]
    bc26:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    bc28:	bf1c      	itt	ne
    bc2a:	23ff      	movne	r3, #255	; 0xff
    bc2c:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    bc2e:	7b68      	ldrb	r0, [r5, #13]
    bc30:	28ff      	cmp	r0, #255	; 0xff
    bc32:	d003      	beq.n	bc3c <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    bc34:	4b13      	ldr	r3, [pc, #76]	; (bc84 <hid_keyboard_ctrl+0x118>)
    bc36:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    bc38:	23ff      	movs	r3, #255	; 0xff
    bc3a:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    bc3c:	7ba8      	ldrb	r0, [r5, #14]
    bc3e:	28ff      	cmp	r0, #255	; 0xff
    bc40:	d003      	beq.n	bc4a <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    bc42:	4b10      	ldr	r3, [pc, #64]	; (bc84 <hid_keyboard_ctrl+0x118>)
    bc44:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bc46:	23ff      	movs	r3, #255	; 0xff
    bc48:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    bc4a:	2500      	movs	r5, #0
    bc4c:	4b0c      	ldr	r3, [pc, #48]	; (bc80 <hid_keyboard_ctrl+0x114>)
    bc4e:	741d      	strb	r5, [r3, #16]
    bc50:	e798      	b.n	bb84 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    bc52:	f06f 0509 	mvn.w	r5, #9
    bc56:	e795      	b.n	bb84 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    bc58:	f06f 0509 	mvn.w	r5, #9
    bc5c:	e792      	b.n	bb84 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    bc5e:	f06f 0511 	mvn.w	r5, #17
    bc62:	e78f      	b.n	bb84 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    bc64:	f06f 051b 	mvn.w	r5, #27
    bc68:	e78c      	b.n	bb84 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    bc6a:	f06f 0509 	mvn.w	r5, #9
    bc6e:	e789      	b.n	bb84 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    bc70:	f06f 0513 	mvn.w	r5, #19
    bc74:	e786      	b.n	bb84 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    bc76:	f06f 0509 	mvn.w	r5, #9
    bc7a:	e783      	b.n	bb84 <hid_keyboard_ctrl+0x18>
    bc7c:	0000c979 	.word	0x0000c979
    bc80:	20000e70 	.word	0x20000e70
    bc84:	00007065 	.word	0x00007065
    bc88:	0000c9b3 	.word	0x0000c9b3
    bc8c:	00006ffd 	.word	0x00006ffd
    bc90:	00007091 	.word	0x00007091

0000bc94 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    bc94:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    bc96:	4b0a      	ldr	r3, [pc, #40]	; (bcc0 <hiddf_keyboard_init+0x2c>)
    bc98:	4798      	blx	r3
    bc9a:	2801      	cmp	r0, #1
    bc9c:	d80c      	bhi.n	bcb8 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    bc9e:	4809      	ldr	r0, [pc, #36]	; (bcc4 <hiddf_keyboard_init+0x30>)
    bca0:	4b09      	ldr	r3, [pc, #36]	; (bcc8 <hiddf_keyboard_init+0x34>)
    bca2:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    bca4:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    bca6:	3014      	adds	r0, #20
    bca8:	4b08      	ldr	r3, [pc, #32]	; (bccc <hiddf_keyboard_init+0x38>)
    bcaa:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    bcac:	4908      	ldr	r1, [pc, #32]	; (bcd0 <hiddf_keyboard_init+0x3c>)
    bcae:	2001      	movs	r0, #1
    bcb0:	4b08      	ldr	r3, [pc, #32]	; (bcd4 <hiddf_keyboard_init+0x40>)
    bcb2:	4798      	blx	r3
	return ERR_NONE;
    bcb4:	2000      	movs	r0, #0
    bcb6:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    bcb8:	f06f 0010 	mvn.w	r0, #16
}
    bcbc:	bd08      	pop	{r3, pc}
    bcbe:	bf00      	nop
    bcc0:	0000c965 	.word	0x0000c965
    bcc4:	20000e70 	.word	0x20000e70
    bcc8:	0000bb6d 	.word	0x0000bb6d
    bccc:	0000c905 	.word	0x0000c905
    bcd0:	20000390 	.word	0x20000390
    bcd4:	0000c871 	.word	0x0000c871

0000bcd8 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    bcd8:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    bcda:	4b26      	ldr	r3, [pc, #152]	; (bd74 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    bcdc:	7c1b      	ldrb	r3, [r3, #16]
    bcde:	2b00      	cmp	r3, #0
    bce0:	d045      	beq.n	bd6e <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    bce2:	4a24      	ldr	r2, [pc, #144]	; (bd74 <hiddf_keyboard_keys_state_change+0x9c>)
    bce4:	2300      	movs	r3, #0
    bce6:	6053      	str	r3, [r2, #4]
    bce8:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    bcea:	b329      	cbz	r1, bd38 <hiddf_keyboard_keys_state_change+0x60>
    bcec:	4603      	mov	r3, r0
    bcee:	1e4d      	subs	r5, r1, #1
    bcf0:	b2ed      	uxtb	r5, r5
    bcf2:	3501      	adds	r5, #1
    bcf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    bcf8:	4405      	add	r5, r0
    bcfa:	2200      	movs	r2, #0
    bcfc:	e002      	b.n	bd04 <hiddf_keyboard_keys_state_change+0x2c>
    bcfe:	3303      	adds	r3, #3
    bd00:	42ab      	cmp	r3, r5
    bd02:	d005      	beq.n	bd10 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    bd04:	785c      	ldrb	r4, [r3, #1]
    bd06:	2c00      	cmp	r4, #0
    bd08:	d0f9      	beq.n	bcfe <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    bd0a:	3201      	adds	r2, #1
    bd0c:	b2d2      	uxtb	r2, r2
    bd0e:	e7f6      	b.n	bcfe <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    bd10:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    bd12:	b2d2      	uxtb	r2, r2
    bd14:	2a06      	cmp	r2, #6
    bd16:	d809      	bhi.n	bd2c <hiddf_keyboard_keys_state_change+0x54>
    bd18:	4603      	mov	r3, r0
    bd1a:	1e4a      	subs	r2, r1, #1
    bd1c:	b2d2      	uxtb	r2, r2
    bd1e:	3201      	adds	r2, #1
    bd20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    bd24:	4410      	add	r0, r2
    bd26:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    bd28:	4d12      	ldr	r5, [pc, #72]	; (bd74 <hiddf_keyboard_keys_state_change+0x9c>)
    bd2a:	e015      	b.n	bd58 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    bd2c:	4b11      	ldr	r3, [pc, #68]	; (bd74 <hiddf_keyboard_keys_state_change+0x9c>)
    bd2e:	f04f 32ff 	mov.w	r2, #4294967295
    bd32:	f8c3 2006 	str.w	r2, [r3, #6]
    bd36:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    bd38:	480e      	ldr	r0, [pc, #56]	; (bd74 <hiddf_keyboard_keys_state_change+0x9c>)
    bd3a:	2300      	movs	r3, #0
    bd3c:	2208      	movs	r2, #8
    bd3e:	1d01      	adds	r1, r0, #4
    bd40:	7b40      	ldrb	r0, [r0, #13]
    bd42:	4c0d      	ldr	r4, [pc, #52]	; (bd78 <hiddf_keyboard_keys_state_change+0xa0>)
    bd44:	47a0      	blx	r4
    bd46:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    bd48:	1c62      	adds	r2, r4, #1
    bd4a:	7819      	ldrb	r1, [r3, #0]
    bd4c:	442c      	add	r4, r5
    bd4e:	7121      	strb	r1, [r4, #4]
    bd50:	b2d4      	uxtb	r4, r2
    bd52:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    bd54:	4283      	cmp	r3, r0
    bd56:	d0ef      	beq.n	bd38 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    bd58:	789a      	ldrb	r2, [r3, #2]
    bd5a:	2a01      	cmp	r2, #1
    bd5c:	d1f9      	bne.n	bd52 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    bd5e:	785a      	ldrb	r2, [r3, #1]
    bd60:	2a00      	cmp	r2, #0
    bd62:	d0f1      	beq.n	bd48 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    bd64:	792a      	ldrb	r2, [r5, #4]
    bd66:	7819      	ldrb	r1, [r3, #0]
    bd68:	430a      	orrs	r2, r1
    bd6a:	712a      	strb	r2, [r5, #4]
    bd6c:	e7f1      	b.n	bd52 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    bd6e:	f06f 0010 	mvn.w	r0, #16
}
    bd72:	bd38      	pop	{r3, r4, r5, pc}
    bd74:	20000e70 	.word	0x20000e70
    bd78:	0000c435 	.word	0x0000c435

0000bd7c <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bd7c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    bd7e:	780b      	ldrb	r3, [r1, #0]
    bd80:	2b81      	cmp	r3, #129	; 0x81
    bd82:	d010      	beq.n	bda6 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bd84:	f3c3 1341 	ubfx	r3, r3, #5, #2
    bd88:	2b01      	cmp	r3, #1
    bd8a:	d13f      	bne.n	be0c <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    bd8c:	888a      	ldrh	r2, [r1, #4]
    bd8e:	4b22      	ldr	r3, [pc, #136]	; (be18 <hid_mouse_req+0x9c>)
    bd90:	7a1b      	ldrb	r3, [r3, #8]
    bd92:	429a      	cmp	r2, r3
    bd94:	d13d      	bne.n	be12 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    bd96:	784b      	ldrb	r3, [r1, #1]
    bd98:	2b03      	cmp	r3, #3
    bd9a:	d028      	beq.n	bdee <hid_mouse_req+0x72>
    bd9c:	2b0b      	cmp	r3, #11
    bd9e:	d02c      	beq.n	bdfa <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    bda0:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    bda4:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    bda6:	784b      	ldrb	r3, [r1, #1]
    bda8:	2b06      	cmp	r3, #6
    bdaa:	d002      	beq.n	bdb2 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    bdac:	f06f 0009 	mvn.w	r0, #9
    bdb0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    bdb2:	888a      	ldrh	r2, [r1, #4]
    bdb4:	4b18      	ldr	r3, [pc, #96]	; (be18 <hid_mouse_req+0x9c>)
    bdb6:	7a1b      	ldrb	r3, [r3, #8]
    bdb8:	429a      	cmp	r2, r3
    bdba:	d002      	beq.n	bdc2 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    bdbc:	f06f 0009 	mvn.w	r0, #9
    bdc0:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    bdc2:	884b      	ldrh	r3, [r1, #2]
    bdc4:	0a1b      	lsrs	r3, r3, #8
    bdc6:	2b21      	cmp	r3, #33	; 0x21
    bdc8:	d004      	beq.n	bdd4 <hid_mouse_req+0x58>
    bdca:	2b22      	cmp	r3, #34	; 0x22
    bdcc:	d009      	beq.n	bde2 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    bdce:	f06f 000c 	mvn.w	r0, #12
    bdd2:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    bdd4:	4b10      	ldr	r3, [pc, #64]	; (be18 <hid_mouse_req+0x9c>)
    bdd6:	6819      	ldr	r1, [r3, #0]
    bdd8:	2300      	movs	r3, #0
    bdda:	780a      	ldrb	r2, [r1, #0]
    bddc:	4c0f      	ldr	r4, [pc, #60]	; (be1c <hid_mouse_req+0xa0>)
    bdde:	47a0      	blx	r4
    bde0:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    bde2:	2300      	movs	r3, #0
    bde4:	2234      	movs	r2, #52	; 0x34
    bde6:	490e      	ldr	r1, [pc, #56]	; (be20 <hid_mouse_req+0xa4>)
    bde8:	4c0c      	ldr	r4, [pc, #48]	; (be1c <hid_mouse_req+0xa0>)
    bdea:	47a0      	blx	r4
    bdec:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    bdee:	2300      	movs	r3, #0
    bdf0:	2201      	movs	r2, #1
    bdf2:	490c      	ldr	r1, [pc, #48]	; (be24 <hid_mouse_req+0xa8>)
    bdf4:	4c09      	ldr	r4, [pc, #36]	; (be1c <hid_mouse_req+0xa0>)
    bdf6:	47a0      	blx	r4
    bdf8:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    bdfa:	884a      	ldrh	r2, [r1, #2]
    bdfc:	4b06      	ldr	r3, [pc, #24]	; (be18 <hid_mouse_req+0x9c>)
    bdfe:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    be00:	2300      	movs	r3, #0
    be02:	461a      	mov	r2, r3
    be04:	4619      	mov	r1, r3
    be06:	4c05      	ldr	r4, [pc, #20]	; (be1c <hid_mouse_req+0xa0>)
    be08:	47a0      	blx	r4
    be0a:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    be0c:	f06f 0009 	mvn.w	r0, #9
    be10:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    be12:	f06f 0009 	mvn.w	r0, #9
    be16:	bd10      	pop	{r4, pc}
    be18:	20000e90 	.word	0x20000e90
    be1c:	0000c435 	.word	0x0000c435
    be20:	0000f5c0 	.word	0x0000f5c0
    be24:	20000e9a 	.word	0x20000e9a

0000be28 <hid_mouse_ctrl>:
{
    be28:	b570      	push	{r4, r5, r6, lr}
    be2a:	4614      	mov	r4, r2
	switch (ctrl) {
    be2c:	2901      	cmp	r1, #1
    be2e:	d040      	beq.n	beb2 <hid_mouse_ctrl+0x8a>
    be30:	b139      	cbz	r1, be42 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    be32:	2902      	cmp	r1, #2
    be34:	bf0c      	ite	eq
    be36:	f06f 041a 	mvneq.w	r4, #26
    be3a:	f06f 040c 	mvnne.w	r4, #12
}
    be3e:	4620      	mov	r0, r4
    be40:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    be42:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    be44:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    be46:	2b00      	cmp	r3, #0
    be48:	d049      	beq.n	bede <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    be4a:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    be4c:	795b      	ldrb	r3, [r3, #5]
    be4e:	2b03      	cmp	r3, #3
    be50:	d148      	bne.n	bee4 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    be52:	7a2b      	ldrb	r3, [r5, #8]
    be54:	429a      	cmp	r2, r3
    be56:	d048      	beq.n	beea <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    be58:	2bff      	cmp	r3, #255	; 0xff
    be5a:	d149      	bne.n	bef0 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    be5c:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    be5e:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    be60:	7818      	ldrb	r0, [r3, #0]
    be62:	2221      	movs	r2, #33	; 0x21
    be64:	6861      	ldr	r1, [r4, #4]
    be66:	4418      	add	r0, r3
    be68:	4b29      	ldr	r3, [pc, #164]	; (bf10 <hid_mouse_ctrl+0xe8>)
    be6a:	4798      	blx	r3
    be6c:	4b29      	ldr	r3, [pc, #164]	; (bf14 <hid_mouse_ctrl+0xec>)
    be6e:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    be70:	6823      	ldr	r3, [r4, #0]
    be72:	7818      	ldrb	r0, [r3, #0]
    be74:	6861      	ldr	r1, [r4, #4]
    be76:	4418      	add	r0, r3
    be78:	4b27      	ldr	r3, [pc, #156]	; (bf18 <hid_mouse_ctrl+0xf0>)
    be7a:	4798      	blx	r3
	desc->sod = ep;
    be7c:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    be7e:	2800      	cmp	r0, #0
    be80:	d039      	beq.n	bef6 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    be82:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    be84:	7943      	ldrb	r3, [r0, #5]
    be86:	7902      	ldrb	r2, [r0, #4]
    be88:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    be8c:	b292      	uxth	r2, r2
    be8e:	78c1      	ldrb	r1, [r0, #3]
    be90:	4630      	mov	r0, r6
    be92:	4b22      	ldr	r3, [pc, #136]	; (bf1c <hid_mouse_ctrl+0xf4>)
    be94:	4798      	blx	r3
    be96:	4604      	mov	r4, r0
    be98:	bb80      	cbnz	r0, befc <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    be9a:	f016 0f80 	tst.w	r6, #128	; 0x80
    be9e:	d030      	beq.n	bf02 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    bea0:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    bea2:	4630      	mov	r0, r6
    bea4:	4b1e      	ldr	r3, [pc, #120]	; (bf20 <hid_mouse_ctrl+0xf8>)
    bea6:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    bea8:	4b1a      	ldr	r3, [pc, #104]	; (bf14 <hid_mouse_ctrl+0xec>)
    beaa:	2201      	movs	r2, #1
    beac:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    beae:	72da      	strb	r2, [r3, #11]
    beb0:	e7c5      	b.n	be3e <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    beb2:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    beb4:	b11a      	cbz	r2, bebe <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    beb6:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    beb8:	795b      	ldrb	r3, [r3, #5]
    beba:	2b03      	cmp	r3, #3
    bebc:	d124      	bne.n	bf08 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    bebe:	7a2b      	ldrb	r3, [r5, #8]
    bec0:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    bec2:	bf1c      	itt	ne
    bec4:	23ff      	movne	r3, #255	; 0xff
    bec6:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    bec8:	7a68      	ldrb	r0, [r5, #9]
    beca:	28ff      	cmp	r0, #255	; 0xff
    becc:	d003      	beq.n	bed6 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    bece:	4b15      	ldr	r3, [pc, #84]	; (bf24 <hid_mouse_ctrl+0xfc>)
    bed0:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    bed2:	23ff      	movs	r3, #255	; 0xff
    bed4:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    bed6:	2400      	movs	r4, #0
    bed8:	4b0e      	ldr	r3, [pc, #56]	; (bf14 <hid_mouse_ctrl+0xec>)
    beda:	72dc      	strb	r4, [r3, #11]
    bedc:	e7af      	b.n	be3e <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    bede:	f06f 0409 	mvn.w	r4, #9
    bee2:	e7ac      	b.n	be3e <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    bee4:	f06f 0409 	mvn.w	r4, #9
    bee8:	e7a9      	b.n	be3e <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    beea:	f06f 0411 	mvn.w	r4, #17
    beee:	e7a6      	b.n	be3e <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    bef0:	f06f 041b 	mvn.w	r4, #27
    bef4:	e7a3      	b.n	be3e <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    bef6:	f06f 0409 	mvn.w	r4, #9
    befa:	e7a0      	b.n	be3e <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    befc:	f06f 0413 	mvn.w	r4, #19
    bf00:	e79d      	b.n	be3e <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    bf02:	f04f 34ff 	mov.w	r4, #4294967295
    bf06:	e79a      	b.n	be3e <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    bf08:	f06f 0409 	mvn.w	r4, #9
    bf0c:	e797      	b.n	be3e <hid_mouse_ctrl+0x16>
    bf0e:	bf00      	nop
    bf10:	0000c979 	.word	0x0000c979
    bf14:	20000e90 	.word	0x20000e90
    bf18:	0000c9b3 	.word	0x0000c9b3
    bf1c:	00006ffd 	.word	0x00006ffd
    bf20:	00007091 	.word	0x00007091
    bf24:	00007065 	.word	0x00007065

0000bf28 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    bf28:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    bf2a:	4b0a      	ldr	r3, [pc, #40]	; (bf54 <hiddf_mouse_init+0x2c>)
    bf2c:	4798      	blx	r3
    bf2e:	2801      	cmp	r0, #1
    bf30:	d80c      	bhi.n	bf4c <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    bf32:	4809      	ldr	r0, [pc, #36]	; (bf58 <hiddf_mouse_init+0x30>)
    bf34:	4b09      	ldr	r3, [pc, #36]	; (bf5c <hiddf_mouse_init+0x34>)
    bf36:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    bf38:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    bf3a:	300c      	adds	r0, #12
    bf3c:	4b08      	ldr	r3, [pc, #32]	; (bf60 <hiddf_mouse_init+0x38>)
    bf3e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    bf40:	4908      	ldr	r1, [pc, #32]	; (bf64 <hiddf_mouse_init+0x3c>)
    bf42:	2001      	movs	r0, #1
    bf44:	4b08      	ldr	r3, [pc, #32]	; (bf68 <hiddf_mouse_init+0x40>)
    bf46:	4798      	blx	r3
	return ERR_NONE;
    bf48:	2000      	movs	r0, #0
    bf4a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    bf4c:	f06f 0010 	mvn.w	r0, #16
}
    bf50:	bd08      	pop	{r3, pc}
    bf52:	bf00      	nop
    bf54:	0000c965 	.word	0x0000c965
    bf58:	20000e90 	.word	0x20000e90
    bf5c:	0000be29 	.word	0x0000be29
    bf60:	0000c905 	.word	0x0000c905
    bf64:	20000398 	.word	0x20000398
    bf68:	0000c871 	.word	0x0000c871

0000bf6c <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    bf6c:	2200      	movs	r2, #0
    bf6e:	4b0d      	ldr	r3, [pc, #52]	; (bfa4 <hiddf_mouse_move+0x38>)
    bf70:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    bf72:	2901      	cmp	r1, #1
    bf74:	d00e      	beq.n	bf94 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    bf76:	2902      	cmp	r1, #2
    bf78:	d00e      	beq.n	bf98 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    bf7a:	2903      	cmp	r1, #3
    bf7c:	d10f      	bne.n	bf9e <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    bf7e:	4b09      	ldr	r3, [pc, #36]	; (bfa4 <hiddf_mouse_move+0x38>)
    bf80:	71d8      	strb	r0, [r3, #7]
{
    bf82:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    bf84:	4807      	ldr	r0, [pc, #28]	; (bfa4 <hiddf_mouse_move+0x38>)
    bf86:	2300      	movs	r3, #0
    bf88:	2204      	movs	r2, #4
    bf8a:	1881      	adds	r1, r0, r2
    bf8c:	7a40      	ldrb	r0, [r0, #9]
    bf8e:	4c06      	ldr	r4, [pc, #24]	; (bfa8 <hiddf_mouse_move+0x3c>)
    bf90:	47a0      	blx	r4
    bf92:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    bf94:	7158      	strb	r0, [r3, #5]
    bf96:	e7f4      	b.n	bf82 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    bf98:	4b02      	ldr	r3, [pc, #8]	; (bfa4 <hiddf_mouse_move+0x38>)
    bf9a:	7198      	strb	r0, [r3, #6]
    bf9c:	e7f1      	b.n	bf82 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    bf9e:	f06f 000c 	mvn.w	r0, #12
    bfa2:	4770      	bx	lr
    bfa4:	20000e90 	.word	0x20000e90
    bfa8:	0000c435 	.word	0x0000c435

0000bfac <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bfac:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    bfae:	780b      	ldrb	r3, [r1, #0]
    bfb0:	2b81      	cmp	r3, #129	; 0x81
    bfb2:	d014      	beq.n	bfde <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bfb4:	f3c3 1341 	ubfx	r3, r3, #5, #2
    bfb8:	2b01      	cmp	r3, #1
    bfba:	d132      	bne.n	c022 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    bfbc:	888b      	ldrh	r3, [r1, #4]
    bfbe:	4a1c      	ldr	r2, [pc, #112]	; (c030 <audio_midi_req+0x84>)
    bfc0:	7912      	ldrb	r2, [r2, #4]
    bfc2:	429a      	cmp	r2, r3
    bfc4:	d003      	beq.n	bfce <audio_midi_req+0x22>
    bfc6:	4a1a      	ldr	r2, [pc, #104]	; (c030 <audio_midi_req+0x84>)
    bfc8:	7952      	ldrb	r2, [r2, #5]
    bfca:	429a      	cmp	r2, r3
    bfcc:	d12c      	bne.n	c028 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    bfce:	784b      	ldrb	r3, [r1, #1]
    bfd0:	2b03      	cmp	r3, #3
    bfd2:	d017      	beq.n	c004 <audio_midi_req+0x58>
    bfd4:	2b0b      	cmp	r3, #11
    bfd6:	d01b      	beq.n	c010 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    bfd8:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    bfdc:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    bfde:	888b      	ldrh	r3, [r1, #4]
    bfe0:	4a13      	ldr	r2, [pc, #76]	; (c030 <audio_midi_req+0x84>)
    bfe2:	7912      	ldrb	r2, [r2, #4]
    bfe4:	429a      	cmp	r2, r3
    bfe6:	d006      	beq.n	bff6 <audio_midi_req+0x4a>
    bfe8:	4a11      	ldr	r2, [pc, #68]	; (c030 <audio_midi_req+0x84>)
    bfea:	7952      	ldrb	r2, [r2, #5]
    bfec:	429a      	cmp	r2, r3
    bfee:	d002      	beq.n	bff6 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    bff0:	f06f 0009 	mvn.w	r0, #9
    bff4:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    bff6:	4b0e      	ldr	r3, [pc, #56]	; (c030 <audio_midi_req+0x84>)
    bff8:	6819      	ldr	r1, [r3, #0]
    bffa:	2300      	movs	r3, #0
    bffc:	780a      	ldrb	r2, [r1, #0]
    bffe:	4c0d      	ldr	r4, [pc, #52]	; (c034 <audio_midi_req+0x88>)
    c000:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    c002:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    c004:	2300      	movs	r3, #0
    c006:	2201      	movs	r2, #1
    c008:	490b      	ldr	r1, [pc, #44]	; (c038 <audio_midi_req+0x8c>)
    c00a:	4c0a      	ldr	r4, [pc, #40]	; (c034 <audio_midi_req+0x88>)
    c00c:	47a0      	blx	r4
    c00e:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    c010:	884a      	ldrh	r2, [r1, #2]
    c012:	4b07      	ldr	r3, [pc, #28]	; (c030 <audio_midi_req+0x84>)
    c014:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    c016:	2300      	movs	r3, #0
    c018:	461a      	mov	r2, r3
    c01a:	4619      	mov	r1, r3
    c01c:	4c05      	ldr	r4, [pc, #20]	; (c034 <audio_midi_req+0x88>)
    c01e:	47a0      	blx	r4
    c020:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    c022:	f06f 0009 	mvn.w	r0, #9
    c026:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    c028:	f06f 0009 	mvn.w	r0, #9
    c02c:	bd10      	pop	{r4, pc}
    c02e:	bf00      	nop
    c030:	20000ea8 	.word	0x20000ea8
    c034:	0000c435 	.word	0x0000c435
    c038:	20000eb0 	.word	0x20000eb0

0000c03c <audio_midi_ctrl>:
{
    c03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c040:	b083      	sub	sp, #12
    c042:	4615      	mov	r5, r2
	switch (ctrl) {
    c044:	2901      	cmp	r1, #1
    c046:	d07e      	beq.n	c146 <audio_midi_ctrl+0x10a>
    c048:	b141      	cbz	r1, c05c <audio_midi_ctrl+0x20>
		return ERR_INVALID_ARG;
    c04a:	2902      	cmp	r1, #2
    c04c:	bf0c      	ite	eq
    c04e:	f06f 001a 	mvneq.w	r0, #26
    c052:	f06f 000c 	mvnne.w	r0, #12
}
    c056:	b003      	add	sp, #12
    c058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    c05c:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    c060:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    c062:	2800      	cmp	r0, #0
    c064:	f000 8096 	beq.w	c194 <audio_midi_ctrl+0x158>
    c068:	f109 0604 	add.w	r6, r9, #4
    c06c:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    c06e:	f04f 0804 	mov.w	r8, #4
    c072:	4f54      	ldr	r7, [pc, #336]	; (c1c4 <audio_midi_ctrl+0x188>)
    c074:	e018      	b.n	c0a8 <audio_midi_ctrl+0x6c>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c076:	f816 3b01 	ldrb.w	r3, [r6], #1
    c07a:	429a      	cmp	r2, r3
    c07c:	f000 8090 	beq.w	c1a0 <audio_midi_ctrl+0x164>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c080:	2bff      	cmp	r3, #255	; 0xff
    c082:	f040 8090 	bne.w	c1a6 <audio_midi_ctrl+0x16a>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c086:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    c08a:	2c01      	cmp	r4, #1
    c08c:	d015      	beq.n	c0ba <audio_midi_ctrl+0x7e>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    c08e:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    c090:	7818      	ldrb	r0, [r3, #0]
    c092:	4642      	mov	r2, r8
    c094:	6869      	ldr	r1, [r5, #4]
    c096:	4418      	add	r0, r3
    c098:	47b8      	blx	r7
    c09a:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    c09c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    c0a0:	f000 808b 	beq.w	c1ba <audio_midi_ctrl+0x17e>
		if (NULL == ifc) {
    c0a4:	2800      	cmp	r0, #0
    c0a6:	d078      	beq.n	c19a <audio_midi_ctrl+0x15e>
		ifc_desc.bInterfaceNumber = ifc[2];
    c0a8:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    c0aa:	7943      	ldrb	r3, [r0, #5]
    c0ac:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    c0b0:	2b01      	cmp	r3, #1
    c0b2:	d0e0      	beq.n	c076 <audio_midi_ctrl+0x3a>
			return ERR_NOT_FOUND;
    c0b4:	f06f 0009 	mvn.w	r0, #9
    c0b8:	e7cd      	b.n	c056 <audio_midi_ctrl+0x1a>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c0ba:	2205      	movs	r2, #5
    c0bc:	6869      	ldr	r1, [r5, #4]
    c0be:	4b41      	ldr	r3, [pc, #260]	; (c1c4 <audio_midi_ctrl+0x188>)
    c0c0:	4798      	blx	r3
    c0c2:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    c0c4:	4e40      	ldr	r6, [pc, #256]	; (c1c8 <audio_midi_ctrl+0x18c>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c0c6:	f8df 8114 	ldr.w	r8, [pc, #276]	; c1dc <audio_midi_ctrl+0x1a0>
					usb_d_ep_enable(func_data->func_ep_out);
    c0ca:	4f40      	ldr	r7, [pc, #256]	; (c1cc <audio_midi_ctrl+0x190>)
			while (NULL != ep) {
    c0cc:	2c00      	cmp	r4, #0
    c0ce:	d06d      	beq.n	c1ac <audio_midi_ctrl+0x170>
				ep_desc.bEndpointAddress = ep[2];
    c0d0:	78a3      	ldrb	r3, [r4, #2]
    c0d2:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    c0d6:	78e3      	ldrb	r3, [r4, #3]
    c0d8:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    c0dc:	7962      	ldrb	r2, [r4, #5]
    c0de:	7923      	ldrb	r3, [r4, #4]
    c0e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    c0e4:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c0e6:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    c0ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c0ee:	b2db      	uxtb	r3, r3
    c0f0:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    c0f2:	2301      	movs	r3, #1
    c0f4:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c0f6:	f89d 0002 	ldrb.w	r0, [sp, #2]
    c0fa:	f89d 1003 	ldrb.w	r1, [sp, #3]
    c0fe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c102:	b292      	uxth	r2, r2
    c104:	47c0      	blx	r8
    c106:	b2c0      	uxtb	r0, r0
    c108:	7170      	strb	r0, [r6, #5]
    c10a:	b9a0      	cbnz	r0, c136 <audio_midi_ctrl+0xfa>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c10c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c110:	f013 0f80 	tst.w	r3, #128	; 0x80
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    c114:	f89d 0002 	ldrb.w	r0, [sp, #2]
    c118:	b2c0      	uxtb	r0, r0
    c11a:	bf14      	ite	ne
    c11c:	f889 0006 	strbne.w	r0, [r9, #6]
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    c120:	f889 0007 	strbeq.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    c124:	47b8      	blx	r7
				desc->sod = ep;
    c126:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
    c128:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c12a:	6869      	ldr	r1, [r5, #4]
    c12c:	4420      	add	r0, r4
    c12e:	4b28      	ldr	r3, [pc, #160]	; (c1d0 <audio_midi_ctrl+0x194>)
    c130:	4798      	blx	r3
    c132:	4604      	mov	r4, r0
    c134:	e7ca      	b.n	c0cc <audio_midi_ctrl+0x90>
					usb_debug2[6] = - usb_debug2[5];
    c136:	4a24      	ldr	r2, [pc, #144]	; (c1c8 <audio_midi_ctrl+0x18c>)
    c138:	7953      	ldrb	r3, [r2, #5]
    c13a:	425b      	negs	r3, r3
    c13c:	b2db      	uxtb	r3, r3
    c13e:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    c140:	f06f 0013 	mvn.w	r0, #19
    c144:	e787      	b.n	c056 <audio_midi_ctrl+0x1a>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    c146:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    c148:	b142      	cbz	r2, c15c <audio_midi_ctrl+0x120>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c14a:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    c14c:	795b      	ldrb	r3, [r3, #5]
    c14e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    c152:	2b01      	cmp	r3, #1
    c154:	d002      	beq.n	c15c <audio_midi_ctrl+0x120>
			return ERR_NOT_FOUND;
    c156:	f06f 0009 	mvn.w	r0, #9
    c15a:	e77c      	b.n	c056 <audio_midi_ctrl+0x1a>
	if (func_data->func_iface[0] != 0xFF) {
    c15c:	7923      	ldrb	r3, [r4, #4]
    c15e:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    c160:	bf1c      	itt	ne
    c162:	23ff      	movne	r3, #255	; 0xff
    c164:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    c166:	7963      	ldrb	r3, [r4, #5]
    c168:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    c16a:	bf1c      	itt	ne
    c16c:	23ff      	movne	r3, #255	; 0xff
    c16e:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    c170:	79a0      	ldrb	r0, [r4, #6]
    c172:	28ff      	cmp	r0, #255	; 0xff
    c174:	d003      	beq.n	c17e <audio_midi_ctrl+0x142>
		usb_d_ep_deinit(func_data->func_ep_in);
    c176:	4b17      	ldr	r3, [pc, #92]	; (c1d4 <audio_midi_ctrl+0x198>)
    c178:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    c17a:	23ff      	movs	r3, #255	; 0xff
    c17c:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    c17e:	79e0      	ldrb	r0, [r4, #7]
    c180:	28ff      	cmp	r0, #255	; 0xff
    c182:	d003      	beq.n	c18c <audio_midi_ctrl+0x150>
		usb_d_ep_deinit(func_data->func_ep_out);
    c184:	4b13      	ldr	r3, [pc, #76]	; (c1d4 <audio_midi_ctrl+0x198>)
    c186:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c188:	23ff      	movs	r3, #255	; 0xff
    c18a:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    c18c:	2000      	movs	r0, #0
    c18e:	4b12      	ldr	r3, [pc, #72]	; (c1d8 <audio_midi_ctrl+0x19c>)
    c190:	7358      	strb	r0, [r3, #13]
    c192:	e760      	b.n	c056 <audio_midi_ctrl+0x1a>
			return ERR_NOT_FOUND;
    c194:	f06f 0009 	mvn.w	r0, #9
    c198:	e75d      	b.n	c056 <audio_midi_ctrl+0x1a>
    c19a:	f06f 0009 	mvn.w	r0, #9
    c19e:	e75a      	b.n	c056 <audio_midi_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    c1a0:	f06f 0011 	mvn.w	r0, #17
    c1a4:	e757      	b.n	c056 <audio_midi_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    c1a6:	f06f 001b 	mvn.w	r0, #27
    c1aa:	e754      	b.n	c056 <audio_midi_ctrl+0x1a>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    c1ac:	682b      	ldr	r3, [r5, #0]
    c1ae:	7818      	ldrb	r0, [r3, #0]
    c1b0:	2204      	movs	r2, #4
    c1b2:	6869      	ldr	r1, [r5, #4]
    c1b4:	4418      	add	r0, r3
    c1b6:	4b03      	ldr	r3, [pc, #12]	; (c1c4 <audio_midi_ctrl+0x188>)
    c1b8:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    c1ba:	2201      	movs	r2, #1
    c1bc:	4b06      	ldr	r3, [pc, #24]	; (c1d8 <audio_midi_ctrl+0x19c>)
    c1be:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c1c0:	2000      	movs	r0, #0
    c1c2:	e748      	b.n	c056 <audio_midi_ctrl+0x1a>
    c1c4:	0000c979 	.word	0x0000c979
    c1c8:	20008210 	.word	0x20008210
    c1cc:	00007091 	.word	0x00007091
    c1d0:	0000c9b3 	.word	0x0000c9b3
    c1d4:	00007065 	.word	0x00007065
    c1d8:	20000ea8 	.word	0x20000ea8
    c1dc:	00006ffd 	.word	0x00006ffd

0000c1e0 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    c1e0:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    c1e2:	4b0a      	ldr	r3, [pc, #40]	; (c20c <audiodf_midi_init+0x2c>)
    c1e4:	4798      	blx	r3
    c1e6:	2801      	cmp	r0, #1
    c1e8:	d80c      	bhi.n	c204 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    c1ea:	4809      	ldr	r0, [pc, #36]	; (c210 <audiodf_midi_init+0x30>)
    c1ec:	4b09      	ldr	r3, [pc, #36]	; (c214 <audiodf_midi_init+0x34>)
    c1ee:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    c1f0:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    c1f2:	3010      	adds	r0, #16
    c1f4:	4b08      	ldr	r3, [pc, #32]	; (c218 <audiodf_midi_init+0x38>)
    c1f6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    c1f8:	4908      	ldr	r1, [pc, #32]	; (c21c <audiodf_midi_init+0x3c>)
    c1fa:	2001      	movs	r0, #1
    c1fc:	4b08      	ldr	r3, [pc, #32]	; (c220 <audiodf_midi_init+0x40>)
    c1fe:	4798      	blx	r3
	return ERR_NONE;
    c200:	2000      	movs	r0, #0
    c202:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    c204:	f06f 0010 	mvn.w	r0, #16
}
    c208:	bd08      	pop	{r3, pc}
    c20a:	bf00      	nop
    c20c:	0000c965 	.word	0x0000c965
    c210:	20000ea8 	.word	0x20000ea8
    c214:	0000c03d 	.word	0x0000c03d
    c218:	0000c905 	.word	0x0000c905
    c21c:	200003a0 	.word	0x200003a0
    c220:	0000c871 	.word	0x0000c871

0000c224 <audiodf_midi_write>:
}



int32_t audiodf_midi_write(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    c224:	b510      	push	{r4, lr}
	if (!audiodf_midi_is_enabled()) {
		return ERR_DENIED;
	}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    c226:	4c06      	ldr	r4, [pc, #24]	; (c240 <audiodf_midi_write+0x1c>)
    c228:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    c22a:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    c22c:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    c22e:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    c230:	2300      	movs	r3, #0
    c232:	2204      	movs	r2, #4
    c234:	f104 0109 	add.w	r1, r4, #9
    c238:	79a0      	ldrb	r0, [r4, #6]
    c23a:	4c02      	ldr	r4, [pc, #8]	; (c244 <audiodf_midi_write+0x20>)
    c23c:	47a0      	blx	r4
	
	
}
    c23e:	bd10      	pop	{r4, pc}
    c240:	20000ea8 	.word	0x20000ea8
    c244:	0000c435 	.word	0x0000c435

0000c248 <audiodf_midi_read>:




int32_t audiodf_midi_read(uint8_t *buf, uint32_t size)
{
    c248:	b510      	push	{r4, lr}
	if (!audiodf_midi_is_enabled()) {
		return ERR_DENIED;
	}
		
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_out, buf, size, false);
    c24a:	2300      	movs	r3, #0
    c24c:	460a      	mov	r2, r1
    c24e:	4601      	mov	r1, r0
    c250:	4802      	ldr	r0, [pc, #8]	; (c25c <audiodf_midi_read+0x14>)
    c252:	79c0      	ldrb	r0, [r0, #7]
    c254:	4c02      	ldr	r4, [pc, #8]	; (c260 <audiodf_midi_read+0x18>)
    c256:	47a0      	blx	r4
}
    c258:	bd10      	pop	{r4, pc}
    c25a:	bf00      	nop
    c25c:	20000ea8 	.word	0x20000ea8
    c260:	0000c435 	.word	0x0000c435

0000c264 <audiodf_midi_register_callback>:


int32_t audiodf_midi_register_callback(enum audiodf_midi_cb_type cb_type, FUNC_PTR func)
{
    c264:	b508      	push	{r3, lr}
	switch (cb_type) {
    c266:	b120      	cbz	r0, c272 <audiodf_midi_register_callback+0xe>
    c268:	2801      	cmp	r0, #1
    c26a:	d00a      	beq.n	c282 <audiodf_midi_register_callback+0x1e>
		break;
		case AUDIODF_MIDI_CB_WRITE:
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
		break;
		default:
		return ERR_INVALID_ARG;
    c26c:	f06f 000c 	mvn.w	r0, #12
	}
	return ERR_NONE;
}
    c270:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c272:	460a      	mov	r2, r1
    c274:	2102      	movs	r1, #2
    c276:	4b07      	ldr	r3, [pc, #28]	; (c294 <audiodf_midi_register_callback+0x30>)
    c278:	79d8      	ldrb	r0, [r3, #7]
    c27a:	4b07      	ldr	r3, [pc, #28]	; (c298 <audiodf_midi_register_callback+0x34>)
    c27c:	4798      	blx	r3
	return ERR_NONE;
    c27e:	2000      	movs	r0, #0
		break;
    c280:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
    c282:	460a      	mov	r2, r1
    c284:	2102      	movs	r1, #2
    c286:	4b03      	ldr	r3, [pc, #12]	; (c294 <audiodf_midi_register_callback+0x30>)
    c288:	7998      	ldrb	r0, [r3, #6]
    c28a:	4b03      	ldr	r3, [pc, #12]	; (c298 <audiodf_midi_register_callback+0x34>)
    c28c:	4798      	blx	r3
	return ERR_NONE;
    c28e:	2000      	movs	r0, #0
		break;
    c290:	bd08      	pop	{r3, pc}
    c292:	bf00      	nop
    c294:	20000ea8 	.word	0x20000ea8
    c298:	00007265 	.word	0x00007265

0000c29c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c29c:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c29e:	4b07      	ldr	r3, [pc, #28]	; (c2bc <usbdc_unconfig+0x20>)
    c2a0:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    c2a2:	b14c      	cbz	r4, c2b8 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c2a4:	2600      	movs	r6, #0
    c2a6:	2501      	movs	r5, #1
    c2a8:	6863      	ldr	r3, [r4, #4]
    c2aa:	4632      	mov	r2, r6
    c2ac:	4629      	mov	r1, r5
    c2ae:	4620      	mov	r0, r4
    c2b0:	4798      	blx	r3
		func = func->next;
    c2b2:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c2b4:	2c00      	cmp	r4, #0
    c2b6:	d1f7      	bne.n	c2a8 <usbdc_unconfig+0xc>
    c2b8:	bd70      	pop	{r4, r5, r6, pc}
    c2ba:	bf00      	nop
    c2bc:	20000ec4 	.word	0x20000ec4

0000c2c0 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c2c0:	b570      	push	{r4, r5, r6, lr}
    c2c2:	4606      	mov	r6, r0
    c2c4:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c2c6:	4b07      	ldr	r3, [pc, #28]	; (c2e4 <usbdc_change_notify+0x24>)
    c2c8:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    c2ca:	b91c      	cbnz	r4, c2d4 <usbdc_change_notify+0x14>
    c2cc:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    c2ce:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c2d0:	2c00      	cmp	r4, #0
    c2d2:	d0fb      	beq.n	c2cc <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    c2d4:	6863      	ldr	r3, [r4, #4]
    c2d6:	2b00      	cmp	r3, #0
    c2d8:	d0f9      	beq.n	c2ce <usbdc_change_notify+0xe>
			cg->cb(change, value);
    c2da:	4629      	mov	r1, r5
    c2dc:	4630      	mov	r0, r6
    c2de:	4798      	blx	r3
    c2e0:	e7f5      	b.n	c2ce <usbdc_change_notify+0xe>
    c2e2:	bf00      	nop
    c2e4:	20000ec4 	.word	0x20000ec4

0000c2e8 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2ea:	4607      	mov	r7, r0
    c2ec:	460e      	mov	r6, r1
    c2ee:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c2f0:	4b0c      	ldr	r3, [pc, #48]	; (c324 <usbdc_request_handler+0x3c>)
    c2f2:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    c2f4:	b91c      	cbnz	r4, c2fe <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    c2f6:	2000      	movs	r0, #0
    c2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    c2fa:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c2fc:	b16c      	cbz	r4, c31a <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    c2fe:	6863      	ldr	r3, [r4, #4]
    c300:	2b00      	cmp	r3, #0
    c302:	d0fa      	beq.n	c2fa <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    c304:	462a      	mov	r2, r5
    c306:	4631      	mov	r1, r6
    c308:	4638      	mov	r0, r7
    c30a:	4798      	blx	r3
			if (0 == rc) {
    c30c:	b138      	cbz	r0, c31e <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    c30e:	f110 0f0a 	cmn.w	r0, #10
    c312:	d0f2      	beq.n	c2fa <usbdc_request_handler+0x12>
				return -1;
    c314:	f04f 30ff 	mov.w	r0, #4294967295
}
    c318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    c31a:	2000      	movs	r0, #0
    c31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    c31e:	2001      	movs	r0, #1
    c320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c322:	bf00      	nop
    c324:	20000ec4 	.word	0x20000ec4

0000c328 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c328:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c32a:	4b06      	ldr	r3, [pc, #24]	; (c344 <usbd_sof_cb+0x1c>)
    c32c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    c32e:	b91c      	cbnz	r4, c338 <usbd_sof_cb+0x10>
    c330:	bd10      	pop	{r4, pc}
		sof = sof->next;
    c332:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    c334:	2c00      	cmp	r4, #0
    c336:	d0fb      	beq.n	c330 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    c338:	6863      	ldr	r3, [r4, #4]
    c33a:	2b00      	cmp	r3, #0
    c33c:	d0f9      	beq.n	c332 <usbd_sof_cb+0xa>
			sof->cb();
    c33e:	4798      	blx	r3
    c340:	e7f7      	b.n	c332 <usbd_sof_cb+0xa>
    c342:	bf00      	nop
    c344:	20000ec4 	.word	0x20000ec4

0000c348 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c348:	b510      	push	{r4, lr}
    c34a:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    c34c:	b119      	cbz	r1, c356 <usbdc_cb_ctl_done+0xe>
    c34e:	2901      	cmp	r1, #1
    c350:	d026      	beq.n	c3a0 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    c352:	2000      	movs	r0, #0
    c354:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c356:	7813      	ldrb	r3, [r2, #0]
    c358:	2b00      	cmp	r3, #0
    c35a:	d1fa      	bne.n	c352 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    c35c:	7853      	ldrb	r3, [r2, #1]
    c35e:	2b05      	cmp	r3, #5
    c360:	d00f      	beq.n	c382 <usbdc_cb_ctl_done+0x3a>
    c362:	2b09      	cmp	r3, #9
    c364:	d1f5      	bne.n	c352 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    c366:	8852      	ldrh	r2, [r2, #2]
    c368:	4b10      	ldr	r3, [pc, #64]	; (c3ac <usbdc_cb_ctl_done+0x64>)
    c36a:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c36c:	8863      	ldrh	r3, [r4, #2]
    c36e:	2b00      	cmp	r3, #0
    c370:	bf14      	ite	ne
    c372:	2104      	movne	r1, #4
    c374:	2103      	moveq	r1, #3
    c376:	4b0d      	ldr	r3, [pc, #52]	; (c3ac <usbdc_cb_ctl_done+0x64>)
    c378:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c37a:	2001      	movs	r0, #1
    c37c:	4b0c      	ldr	r3, [pc, #48]	; (c3b0 <usbdc_cb_ctl_done+0x68>)
    c37e:	4798      	blx	r3
    c380:	e7e7      	b.n	c352 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    c382:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    c384:	b2c0      	uxtb	r0, r0
    c386:	4b0b      	ldr	r3, [pc, #44]	; (c3b4 <usbdc_cb_ctl_done+0x6c>)
    c388:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c38a:	8863      	ldrh	r3, [r4, #2]
    c38c:	2b00      	cmp	r3, #0
    c38e:	bf14      	ite	ne
    c390:	2103      	movne	r1, #3
    c392:	2102      	moveq	r1, #2
    c394:	4b05      	ldr	r3, [pc, #20]	; (c3ac <usbdc_cb_ctl_done+0x64>)
    c396:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c398:	2001      	movs	r0, #1
    c39a:	4b05      	ldr	r3, [pc, #20]	; (c3b0 <usbdc_cb_ctl_done+0x68>)
    c39c:	4798      	blx	r3
    c39e:	e7d8      	b.n	c352 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c3a0:	2201      	movs	r2, #1
    c3a2:	4621      	mov	r1, r4
    c3a4:	2000      	movs	r0, #0
    c3a6:	4b04      	ldr	r3, [pc, #16]	; (c3b8 <usbdc_cb_ctl_done+0x70>)
    c3a8:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    c3aa:	e7d2      	b.n	c352 <usbdc_cb_ctl_done+0xa>
    c3ac:	20000ec4 	.word	0x20000ec4
    c3b0:	0000c2c1 	.word	0x0000c2c1
    c3b4:	00006ff1 	.word	0x00006ff1
    c3b8:	0000c2e9 	.word	0x0000c2e9

0000c3bc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c3bc:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    c3be:	4b0d      	ldr	r3, [pc, #52]	; (c3f4 <usbdc_reset+0x38>)
    c3c0:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c3c2:	4d0d      	ldr	r5, [pc, #52]	; (c3f8 <usbdc_reset+0x3c>)
    c3c4:	2602      	movs	r6, #2
    c3c6:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    c3c8:	2400      	movs	r4, #0
    c3ca:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    c3cc:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c3ce:	4620      	mov	r0, r4
    c3d0:	4b0a      	ldr	r3, [pc, #40]	; (c3fc <usbdc_reset+0x40>)
    c3d2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c3d4:	7f28      	ldrb	r0, [r5, #28]
    c3d6:	4b0a      	ldr	r3, [pc, #40]	; (c400 <usbdc_reset+0x44>)
    c3d8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c3da:	4a0a      	ldr	r2, [pc, #40]	; (c404 <usbdc_reset+0x48>)
    c3dc:	4621      	mov	r1, r4
    c3de:	4620      	mov	r0, r4
    c3e0:	4d09      	ldr	r5, [pc, #36]	; (c408 <usbdc_reset+0x4c>)
    c3e2:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c3e4:	4a09      	ldr	r2, [pc, #36]	; (c40c <usbdc_reset+0x50>)
    c3e6:	4631      	mov	r1, r6
    c3e8:	4620      	mov	r0, r4
    c3ea:	47a8      	blx	r5
	usb_d_ep_enable(0);
    c3ec:	4620      	mov	r0, r4
    c3ee:	4b08      	ldr	r3, [pc, #32]	; (c410 <usbdc_reset+0x54>)
    c3f0:	4798      	blx	r3
    c3f2:	bd70      	pop	{r4, r5, r6, pc}
    c3f4:	0000c29d 	.word	0x0000c29d
    c3f8:	20000ec4 	.word	0x20000ec4
    c3fc:	00007065 	.word	0x00007065
    c400:	00007051 	.word	0x00007051
    c404:	0000c455 	.word	0x0000c455
    c408:	00007265 	.word	0x00007265
    c40c:	0000c349 	.word	0x0000c349
    c410:	00007091 	.word	0x00007091

0000c414 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c414:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    c416:	b110      	cbz	r0, c41e <usbd_event_cb+0xa>
    c418:	2801      	cmp	r0, #1
    c41a:	d004      	beq.n	c426 <usbd_event_cb+0x12>
    c41c:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    c41e:	2000      	movs	r0, #0
    c420:	4b02      	ldr	r3, [pc, #8]	; (c42c <usbd_event_cb+0x18>)
    c422:	4798      	blx	r3
		break;
    c424:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    c426:	4b02      	ldr	r3, [pc, #8]	; (c430 <usbd_event_cb+0x1c>)
    c428:	4798      	blx	r3
    c42a:	bd08      	pop	{r3, pc}
    c42c:	0000c2c1 	.word	0x0000c2c1
    c430:	0000c3bd 	.word	0x0000c3bd

0000c434 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c434:	b500      	push	{lr}
    c436:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c438:	9101      	str	r1, [sp, #4]
    c43a:	9202      	str	r2, [sp, #8]
    c43c:	f88d 000c 	strb.w	r0, [sp, #12]
    c440:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    c444:	a801      	add	r0, sp, #4
    c446:	4b02      	ldr	r3, [pc, #8]	; (c450 <usbdc_xfer+0x1c>)
    c448:	4798      	blx	r3
}
    c44a:	b005      	add	sp, #20
    c44c:	f85d fb04 	ldr.w	pc, [sp], #4
    c450:	000070dd 	.word	0x000070dd

0000c454 <usbdc_cb_ctl_req>:
{
    c454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c458:	b083      	sub	sp, #12
    c45a:	4605      	mov	r5, r0
    c45c:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c45e:	2200      	movs	r2, #0
    c460:	4b9b      	ldr	r3, [pc, #620]	; (c6d0 <usbdc_cb_ctl_req+0x27c>)
    c462:	4798      	blx	r3
    c464:	f1b0 3fff 	cmp.w	r0, #4294967295
    c468:	d00b      	beq.n	c482 <usbdc_cb_ctl_req+0x2e>
    c46a:	2801      	cmp	r0, #1
    c46c:	f000 81e3 	beq.w	c836 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c470:	7823      	ldrb	r3, [r4, #0]
    c472:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    c476:	d008      	beq.n	c48a <usbdc_cb_ctl_req+0x36>
    c478:	2a80      	cmp	r2, #128	; 0x80
    c47a:	f000 80f4 	beq.w	c666 <usbdc_cb_ctl_req+0x212>
		return false;
    c47e:	2000      	movs	r0, #0
    c480:	e000      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return false;
    c482:	2000      	movs	r0, #0
}
    c484:	b003      	add	sp, #12
    c486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    c48a:	7862      	ldrb	r2, [r4, #1]
    c48c:	3a01      	subs	r2, #1
    c48e:	2a0a      	cmp	r2, #10
    c490:	f200 81d3 	bhi.w	c83a <usbdc_cb_ctl_req+0x3e6>
    c494:	e8df f012 	tbh	[pc, r2, lsl #1]
    c498:	01d10060 	.word	0x01d10060
    c49c:	01d10076 	.word	0x01d10076
    c4a0:	01d1000b 	.word	0x01d1000b
    c4a4:	01d101d1 	.word	0x01d101d1
    c4a8:	01d10015 	.word	0x01d10015
    c4ac:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c4ae:	2301      	movs	r3, #1
    c4b0:	2200      	movs	r2, #0
    c4b2:	4611      	mov	r1, r2
    c4b4:	4628      	mov	r0, r5
    c4b6:	4c87      	ldr	r4, [pc, #540]	; (c6d4 <usbdc_cb_ctl_req+0x280>)
    c4b8:	47a0      	blx	r4
    c4ba:	fab0 f080 	clz	r0, r0
    c4be:	0940      	lsrs	r0, r0, #5
    c4c0:	e7e0      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    c4c2:	8862      	ldrh	r2, [r4, #2]
    c4c4:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    c4c6:	b1ca      	cbz	r2, c4fc <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c4c8:	4b83      	ldr	r3, [pc, #524]	; (c6d8 <usbdc_cb_ctl_req+0x284>)
    c4ca:	681b      	ldr	r3, [r3, #0]
    c4cc:	6859      	ldr	r1, [r3, #4]
    c4ce:	6818      	ldr	r0, [r3, #0]
    c4d0:	4b82      	ldr	r3, [pc, #520]	; (c6dc <usbdc_cb_ctl_req+0x288>)
    c4d2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    c4d4:	2800      	cmp	r0, #0
    c4d6:	f000 81be 	beq.w	c856 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    c4da:	78c2      	ldrb	r2, [r0, #3]
    c4dc:	7881      	ldrb	r1, [r0, #2]
    c4de:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    c4e2:	fa10 f181 	uxtah	r1, r0, r1
    c4e6:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c4e8:	2204      	movs	r2, #4
    c4ea:	4b7d      	ldr	r3, [pc, #500]	; (c6e0 <usbdc_cb_ctl_req+0x28c>)
    c4ec:	4798      	blx	r3
    c4ee:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    c4f0:	b130      	cbz	r0, c500 <usbdc_cb_ctl_req+0xac>
    c4f2:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c4f4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; c6d8 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c4f8:	4f79      	ldr	r7, [pc, #484]	; (c6e0 <usbdc_cb_ctl_req+0x28c>)
    c4fa:	e018      	b.n	c52e <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    c4fc:	4b79      	ldr	r3, [pc, #484]	; (c6e4 <usbdc_cb_ctl_req+0x290>)
    c4fe:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c500:	2301      	movs	r3, #1
    c502:	2200      	movs	r2, #0
    c504:	4611      	mov	r1, r2
    c506:	4628      	mov	r0, r5
    c508:	4c72      	ldr	r4, [pc, #456]	; (c6d4 <usbdc_cb_ctl_req+0x280>)
    c50a:	47a0      	blx	r4
    c50c:	fab0 f080 	clz	r0, r0
    c510:	0940      	lsrs	r0, r0, #5
    c512:	e7b7      	b.n	c484 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    c514:	464c      	mov	r4, r9
    c516:	e000      	b.n	c51a <usbdc_cb_ctl_req+0xc6>
    c518:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    c51a:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    c51c:	7803      	ldrb	r3, [r0, #0]
    c51e:	4418      	add	r0, r3
    c520:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c522:	2204      	movs	r2, #4
    c524:	9901      	ldr	r1, [sp, #4]
    c526:	47b8      	blx	r7
    c528:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    c52a:	2800      	cmp	r0, #0
    c52c:	d0e8      	beq.n	c500 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c52e:	f890 9002 	ldrb.w	r9, [r0, #2]
    c532:	45a1      	cmp	r9, r4
    c534:	d0f1      	beq.n	c51a <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c536:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    c53a:	2c00      	cmp	r4, #0
    c53c:	d0ea      	beq.n	c514 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c53e:	2600      	movs	r6, #0
    c540:	6863      	ldr	r3, [r4, #4]
    c542:	466a      	mov	r2, sp
    c544:	4631      	mov	r1, r6
    c546:	4620      	mov	r0, r4
    c548:	4798      	blx	r3
    c54a:	2800      	cmp	r0, #0
    c54c:	d0e4      	beq.n	c518 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    c54e:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c550:	2c00      	cmp	r4, #0
    c552:	d1f5      	bne.n	c540 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    c554:	464c      	mov	r4, r9
    c556:	e7e0      	b.n	c51a <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c558:	f003 031f 	and.w	r3, r3, #31
    c55c:	2b02      	cmp	r3, #2
    c55e:	f040 816e 	bne.w	c83e <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    c562:	88e3      	ldrh	r3, [r4, #6]
    c564:	b10b      	cbz	r3, c56a <usbdc_cb_ctl_req+0x116>
			return false;
    c566:	2000      	movs	r0, #0
    c568:	e78c      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c56a:	88a0      	ldrh	r0, [r4, #4]
    c56c:	2100      	movs	r1, #0
    c56e:	b2c0      	uxtb	r0, r0
    c570:	4b5d      	ldr	r3, [pc, #372]	; (c6e8 <usbdc_cb_ctl_req+0x294>)
    c572:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c574:	2301      	movs	r3, #1
    c576:	2200      	movs	r2, #0
    c578:	4611      	mov	r1, r2
    c57a:	4628      	mov	r0, r5
    c57c:	4c55      	ldr	r4, [pc, #340]	; (c6d4 <usbdc_cb_ctl_req+0x280>)
    c57e:	47a0      	blx	r4
		return true;
    c580:	2001      	movs	r0, #1
    c582:	e77f      	b.n	c484 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c584:	f003 031f 	and.w	r3, r3, #31
    c588:	2b02      	cmp	r3, #2
    c58a:	f040 815a 	bne.w	c842 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    c58e:	88e3      	ldrh	r3, [r4, #6]
    c590:	b10b      	cbz	r3, c596 <usbdc_cb_ctl_req+0x142>
			return false;
    c592:	2000      	movs	r0, #0
    c594:	e776      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c596:	88a0      	ldrh	r0, [r4, #4]
    c598:	2101      	movs	r1, #1
    c59a:	b2c0      	uxtb	r0, r0
    c59c:	4b52      	ldr	r3, [pc, #328]	; (c6e8 <usbdc_cb_ctl_req+0x294>)
    c59e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c5a0:	2301      	movs	r3, #1
    c5a2:	2200      	movs	r2, #0
    c5a4:	4611      	mov	r1, r2
    c5a6:	4628      	mov	r0, r5
    c5a8:	4c4a      	ldr	r4, [pc, #296]	; (c6d4 <usbdc_cb_ctl_req+0x280>)
    c5aa:	47a0      	blx	r4
		return true;
    c5ac:	2001      	movs	r0, #1
    c5ae:	e769      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    c5b0:	8866      	ldrh	r6, [r4, #2]
    c5b2:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c5b4:	4a48      	ldr	r2, [pc, #288]	; (c6d8 <usbdc_cb_ctl_req+0x284>)
    c5b6:	6813      	ldr	r3, [r2, #0]
    c5b8:	7ed2      	ldrb	r2, [r2, #27]
    c5ba:	6859      	ldr	r1, [r3, #4]
    c5bc:	6818      	ldr	r0, [r3, #0]
    c5be:	4b47      	ldr	r3, [pc, #284]	; (c6dc <usbdc_cb_ctl_req+0x288>)
    c5c0:	4798      	blx	r3
	if (NULL == ifc) {
    c5c2:	2800      	cmp	r0, #0
    c5c4:	d045      	beq.n	c652 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    c5c6:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    c5c8:	78c2      	ldrb	r2, [r0, #3]
    c5ca:	7881      	ldrb	r1, [r0, #2]
    c5cc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c5d0:	fa10 f181 	uxtah	r1, r0, r1
    c5d4:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c5d6:	2204      	movs	r2, #4
    c5d8:	4b41      	ldr	r3, [pc, #260]	; (c6e0 <usbdc_cb_ctl_req+0x28c>)
    c5da:	4798      	blx	r3
    c5dc:	4603      	mov	r3, r0
    c5de:	2800      	cmp	r0, #0
    c5e0:	d039      	beq.n	c656 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c5e2:	2704      	movs	r7, #4
    c5e4:	4d3e      	ldr	r5, [pc, #248]	; (c6e0 <usbdc_cb_ctl_req+0x28c>)
    c5e6:	e008      	b.n	c5fa <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    c5e8:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    c5ea:	7803      	ldrb	r3, [r0, #0]
    c5ec:	4418      	add	r0, r3
    c5ee:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c5f0:	463a      	mov	r2, r7
    c5f2:	9901      	ldr	r1, [sp, #4]
    c5f4:	47a8      	blx	r5
		if (NULL == ifc) {
    c5f6:	4603      	mov	r3, r0
    c5f8:	b378      	cbz	r0, c65a <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c5fa:	789a      	ldrb	r2, [r3, #2]
    c5fc:	42a2      	cmp	r2, r4
    c5fe:	d1f3      	bne.n	c5e8 <usbdc_cb_ctl_req+0x194>
    c600:	78da      	ldrb	r2, [r3, #3]
    c602:	42b2      	cmp	r2, r6
    c604:	d1f0      	bne.n	c5e8 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    c606:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c608:	4b33      	ldr	r3, [pc, #204]	; (c6d8 <usbdc_cb_ctl_req+0x284>)
    c60a:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    c60c:	b33d      	cbz	r5, c65e <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c60e:	2701      	movs	r7, #1
    c610:	686b      	ldr	r3, [r5, #4]
    c612:	466a      	mov	r2, sp
    c614:	4639      	mov	r1, r7
    c616:	4628      	mov	r0, r5
    c618:	4798      	blx	r3
    c61a:	b120      	cbz	r0, c626 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    c61c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    c61e:	2d00      	cmp	r5, #0
    c620:	d1f6      	bne.n	c610 <usbdc_cb_ctl_req+0x1bc>
	return false;
    c622:	2000      	movs	r0, #0
    c624:	e72e      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c626:	686b      	ldr	r3, [r5, #4]
    c628:	466a      	mov	r2, sp
    c62a:	2100      	movs	r1, #0
    c62c:	4628      	mov	r0, r5
    c62e:	4798      	blx	r3
    c630:	b9b8      	cbnz	r0, c662 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    c632:	b136      	cbz	r6, c642 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c634:	4a28      	ldr	r2, [pc, #160]	; (c6d8 <usbdc_cb_ctl_req+0x284>)
    c636:	2301      	movs	r3, #1
    c638:	fa03 f404 	lsl.w	r4, r3, r4
    c63c:	7f53      	ldrb	r3, [r2, #29]
    c63e:	4323      	orrs	r3, r4
    c640:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    c642:	2300      	movs	r3, #0
    c644:	461a      	mov	r2, r3
    c646:	4619      	mov	r1, r3
    c648:	4618      	mov	r0, r3
    c64a:	4c22      	ldr	r4, [pc, #136]	; (c6d4 <usbdc_cb_ctl_req+0x280>)
    c64c:	47a0      	blx	r4
			return true;
    c64e:	2001      	movs	r0, #1
    c650:	e718      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return false;
    c652:	2000      	movs	r0, #0
    c654:	e716      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return false;
    c656:	2000      	movs	r0, #0
    c658:	e714      	b.n	c484 <usbdc_cb_ctl_req+0x30>
			return false;
    c65a:	2000      	movs	r0, #0
    c65c:	e712      	b.n	c484 <usbdc_cb_ctl_req+0x30>
	return false;
    c65e:	2000      	movs	r0, #0
    c660:	e710      	b.n	c484 <usbdc_cb_ctl_req+0x30>
			return false;
    c662:	2000      	movs	r0, #0
    c664:	e70e      	b.n	c484 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    c666:	7862      	ldrb	r2, [r4, #1]
    c668:	2a0a      	cmp	r2, #10
    c66a:	f200 80ec 	bhi.w	c846 <usbdc_cb_ctl_req+0x3f2>
    c66e:	e8df f012 	tbh	[pc, r2, lsl #1]
    c672:	008e      	.short	0x008e
    c674:	00ea00ea 	.word	0x00ea00ea
    c678:	00ea00ea 	.word	0x00ea00ea
    c67c:	000b00ea 	.word	0x000b00ea
    c680:	008200ea 	.word	0x008200ea
    c684:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c688:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    c68a:	0a13      	lsrs	r3, r2, #8
    c68c:	2b02      	cmp	r3, #2
    c68e:	d02d      	beq.n	c6ec <usbdc_cb_ctl_req+0x298>
    c690:	2b03      	cmp	r3, #3
    c692:	d050      	beq.n	c736 <usbdc_cb_ctl_req+0x2e2>
    c694:	2b01      	cmp	r3, #1
    c696:	d001      	beq.n	c69c <usbdc_cb_ctl_req+0x248>
	return false;
    c698:	2000      	movs	r0, #0
    c69a:	e6f3      	b.n	c484 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    c69c:	88e2      	ldrh	r2, [r4, #6]
    c69e:	2a12      	cmp	r2, #18
    c6a0:	bf28      	it	cs
    c6a2:	2212      	movcs	r2, #18
    c6a4:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c6a6:	4b0c      	ldr	r3, [pc, #48]	; (c6d8 <usbdc_cb_ctl_req+0x284>)
    c6a8:	681b      	ldr	r3, [r3, #0]
    c6aa:	2201      	movs	r2, #1
    c6ac:	6859      	ldr	r1, [r3, #4]
    c6ae:	6818      	ldr	r0, [r3, #0]
    c6b0:	4b0b      	ldr	r3, [pc, #44]	; (c6e0 <usbdc_cb_ctl_req+0x28c>)
    c6b2:	4798      	blx	r3
	if (!dev_desc) {
    c6b4:	4601      	mov	r1, r0
    c6b6:	2800      	cmp	r0, #0
    c6b8:	f000 80c7 	beq.w	c84a <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c6bc:	2300      	movs	r3, #0
    c6be:	4622      	mov	r2, r4
    c6c0:	4628      	mov	r0, r5
    c6c2:	4c04      	ldr	r4, [pc, #16]	; (c6d4 <usbdc_cb_ctl_req+0x280>)
    c6c4:	47a0      	blx	r4
    c6c6:	fab0 f080 	clz	r0, r0
    c6ca:	0940      	lsrs	r0, r0, #5
    c6cc:	e6da      	b.n	c484 <usbdc_cb_ctl_req+0x30>
    c6ce:	bf00      	nop
    c6d0:	0000c2e9 	.word	0x0000c2e9
    c6d4:	0000c435 	.word	0x0000c435
    c6d8:	20000ec4 	.word	0x20000ec4
    c6dc:	0000c9f9 	.word	0x0000c9f9
    c6e0:	0000c979 	.word	0x0000c979
    c6e4:	0000c29d 	.word	0x0000c29d
    c6e8:	000071fd 	.word	0x000071fd
	uint16_t length   = req->wLength;
    c6ec:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c6ee:	4b5b      	ldr	r3, [pc, #364]	; (c85c <usbdc_cb_ctl_req+0x408>)
    c6f0:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c6f2:	681b      	ldr	r3, [r3, #0]
    c6f4:	3201      	adds	r2, #1
    c6f6:	b2d2      	uxtb	r2, r2
    c6f8:	6859      	ldr	r1, [r3, #4]
    c6fa:	6818      	ldr	r0, [r3, #0]
    c6fc:	4b58      	ldr	r3, [pc, #352]	; (c860 <usbdc_cb_ctl_req+0x40c>)
    c6fe:	4798      	blx	r3
	if (NULL == cfg_desc) {
    c700:	4601      	mov	r1, r0
    c702:	2800      	cmp	r0, #0
    c704:	f000 80a3 	beq.w	c84e <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    c708:	78c3      	ldrb	r3, [r0, #3]
    c70a:	7882      	ldrb	r2, [r0, #2]
    c70c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    c710:	b292      	uxth	r2, r2
	if (length <= total_len) {
    c712:	4294      	cmp	r4, r2
    c714:	d90d      	bls.n	c732 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c716:	3e01      	subs	r6, #1
    c718:	4226      	tst	r6, r4
    c71a:	bf0c      	ite	eq
    c71c:	2301      	moveq	r3, #1
    c71e:	2300      	movne	r3, #0
		length = total_len;
    c720:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c722:	4622      	mov	r2, r4
    c724:	4628      	mov	r0, r5
    c726:	4c4f      	ldr	r4, [pc, #316]	; (c864 <usbdc_cb_ctl_req+0x410>)
    c728:	47a0      	blx	r4
    c72a:	fab0 f080 	clz	r0, r0
    c72e:	0940      	lsrs	r0, r0, #5
    c730:	e6a8      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    c732:	2300      	movs	r3, #0
    c734:	e7f5      	b.n	c722 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    c736:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c738:	4b48      	ldr	r3, [pc, #288]	; (c85c <usbdc_cb_ctl_req+0x408>)
    c73a:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c73c:	681b      	ldr	r3, [r3, #0]
    c73e:	b2d2      	uxtb	r2, r2
    c740:	6859      	ldr	r1, [r3, #4]
    c742:	6818      	ldr	r0, [r3, #0]
    c744:	4b48      	ldr	r3, [pc, #288]	; (c868 <usbdc_cb_ctl_req+0x414>)
    c746:	4798      	blx	r3
	if (NULL == str_desc) {
    c748:	4601      	mov	r1, r0
    c74a:	2800      	cmp	r0, #0
    c74c:	f000 8081 	beq.w	c852 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    c750:	7802      	ldrb	r2, [r0, #0]
    c752:	4294      	cmp	r4, r2
    c754:	d90d      	bls.n	c772 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c756:	3e01      	subs	r6, #1
    c758:	4226      	tst	r6, r4
    c75a:	bf0c      	ite	eq
    c75c:	2301      	moveq	r3, #1
    c75e:	2300      	movne	r3, #0
		length = str_desc[0];
    c760:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c762:	4622      	mov	r2, r4
    c764:	4628      	mov	r0, r5
    c766:	4c3f      	ldr	r4, [pc, #252]	; (c864 <usbdc_cb_ctl_req+0x410>)
    c768:	47a0      	blx	r4
    c76a:	fab0 f080 	clz	r0, r0
    c76e:	0940      	lsrs	r0, r0, #5
    c770:	e688      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    c772:	2300      	movs	r3, #0
    c774:	e7f5      	b.n	c762 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c776:	4939      	ldr	r1, [pc, #228]	; (c85c <usbdc_cb_ctl_req+0x408>)
    c778:	694b      	ldr	r3, [r1, #20]
    c77a:	7eca      	ldrb	r2, [r1, #27]
    c77c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c77e:	2300      	movs	r3, #0
    c780:	2201      	movs	r2, #1
    c782:	6949      	ldr	r1, [r1, #20]
    c784:	4628      	mov	r0, r5
    c786:	4c37      	ldr	r4, [pc, #220]	; (c864 <usbdc_cb_ctl_req+0x410>)
    c788:	47a0      	blx	r4
		return true;
    c78a:	2001      	movs	r0, #1
    c78c:	e67a      	b.n	c484 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c78e:	f003 031f 	and.w	r3, r3, #31
    c792:	2b01      	cmp	r3, #1
    c794:	d903      	bls.n	c79e <usbdc_cb_ctl_req+0x34a>
    c796:	2b02      	cmp	r3, #2
    c798:	d010      	beq.n	c7bc <usbdc_cb_ctl_req+0x368>
		return false;
    c79a:	2000      	movs	r0, #0
    c79c:	e672      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		st = 0;
    c79e:	2300      	movs	r3, #0
    c7a0:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    c7a2:	492e      	ldr	r1, [pc, #184]	; (c85c <usbdc_cb_ctl_req+0x408>)
    c7a4:	694b      	ldr	r3, [r1, #20]
    c7a6:	f8bd 2000 	ldrh.w	r2, [sp]
    c7aa:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c7ac:	2300      	movs	r3, #0
    c7ae:	2202      	movs	r2, #2
    c7b0:	6949      	ldr	r1, [r1, #20]
    c7b2:	4628      	mov	r0, r5
    c7b4:	4c2b      	ldr	r4, [pc, #172]	; (c864 <usbdc_cb_ctl_req+0x410>)
    c7b6:	47a0      	blx	r4
	return true;
    c7b8:	2001      	movs	r0, #1
    c7ba:	e663      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c7bc:	88a0      	ldrh	r0, [r4, #4]
    c7be:	2102      	movs	r1, #2
    c7c0:	b2c0      	uxtb	r0, r0
    c7c2:	4b2a      	ldr	r3, [pc, #168]	; (c86c <usbdc_cb_ctl_req+0x418>)
    c7c4:	4798      	blx	r3
		if (st < 0) {
    c7c6:	2800      	cmp	r0, #0
    c7c8:	db03      	blt.n	c7d2 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    c7ca:	f000 0001 	and.w	r0, r0, #1
    c7ce:	9000      	str	r0, [sp, #0]
    c7d0:	e7e7      	b.n	c7a2 <usbdc_cb_ctl_req+0x34e>
			return false;
    c7d2:	2000      	movs	r0, #0
    c7d4:	e656      	b.n	c484 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c7d6:	4b21      	ldr	r3, [pc, #132]	; (c85c <usbdc_cb_ctl_req+0x408>)
    c7d8:	7f5b      	ldrb	r3, [r3, #29]
    c7da:	88a2      	ldrh	r2, [r4, #4]
    c7dc:	4113      	asrs	r3, r2
    c7de:	f013 0f01 	tst.w	r3, #1
    c7e2:	d012      	beq.n	c80a <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c7e4:	4b1d      	ldr	r3, [pc, #116]	; (c85c <usbdc_cb_ctl_req+0x408>)
    c7e6:	691d      	ldr	r5, [r3, #16]
	return false;
    c7e8:	2000      	movs	r0, #0
	while (NULL != func) {
    c7ea:	2d00      	cmp	r5, #0
    c7ec:	f43f ae4a 	beq.w	c484 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c7f0:	2602      	movs	r6, #2
    c7f2:	686b      	ldr	r3, [r5, #4]
    c7f4:	4622      	mov	r2, r4
    c7f6:	4631      	mov	r1, r6
    c7f8:	4628      	mov	r0, r5
    c7fa:	4798      	blx	r3
    c7fc:	2800      	cmp	r0, #0
    c7fe:	da0f      	bge.n	c820 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    c800:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    c802:	2d00      	cmp	r5, #0
    c804:	d1f5      	bne.n	c7f2 <usbdc_cb_ctl_req+0x39e>
	return false;
    c806:	2000      	movs	r0, #0
    c808:	e63c      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    c80a:	4914      	ldr	r1, [pc, #80]	; (c85c <usbdc_cb_ctl_req+0x408>)
    c80c:	694b      	ldr	r3, [r1, #20]
    c80e:	2000      	movs	r0, #0
    c810:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c812:	4603      	mov	r3, r0
    c814:	2201      	movs	r2, #1
    c816:	6949      	ldr	r1, [r1, #20]
    c818:	4c12      	ldr	r4, [pc, #72]	; (c864 <usbdc_cb_ctl_req+0x410>)
    c81a:	47a0      	blx	r4
		return true;
    c81c:	2001      	movs	r0, #1
    c81e:	e631      	b.n	c484 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c820:	490e      	ldr	r1, [pc, #56]	; (c85c <usbdc_cb_ctl_req+0x408>)
    c822:	694b      	ldr	r3, [r1, #20]
    c824:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c826:	2300      	movs	r3, #0
    c828:	2201      	movs	r2, #1
    c82a:	6949      	ldr	r1, [r1, #20]
    c82c:	4618      	mov	r0, r3
    c82e:	4c0d      	ldr	r4, [pc, #52]	; (c864 <usbdc_cb_ctl_req+0x410>)
    c830:	47a0      	blx	r4
			return true;
    c832:	2001      	movs	r0, #1
    c834:	e626      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return true;
    c836:	2001      	movs	r0, #1
    c838:	e624      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return false;
    c83a:	2000      	movs	r0, #0
    c83c:	e622      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return false;
    c83e:	2000      	movs	r0, #0
    c840:	e620      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return false;
    c842:	2000      	movs	r0, #0
    c844:	e61e      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return false;
    c846:	2000      	movs	r0, #0
    c848:	e61c      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return false;
    c84a:	2000      	movs	r0, #0
    c84c:	e61a      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return false;
    c84e:	2000      	movs	r0, #0
    c850:	e618      	b.n	c484 <usbdc_cb_ctl_req+0x30>
		return false;
    c852:	2000      	movs	r0, #0
    c854:	e616      	b.n	c484 <usbdc_cb_ctl_req+0x30>
			return false;
    c856:	2000      	movs	r0, #0
    c858:	e614      	b.n	c484 <usbdc_cb_ctl_req+0x30>
    c85a:	bf00      	nop
    c85c:	20000ec4 	.word	0x20000ec4
    c860:	0000c9f9 	.word	0x0000c9f9
    c864:	0000c435 	.word	0x0000c435
    c868:	0000ca61 	.word	0x0000ca61
    c86c:	000071fd 	.word	0x000071fd

0000c870 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c870:	b508      	push	{r3, lr}
	switch (type) {
    c872:	2801      	cmp	r0, #1
    c874:	d007      	beq.n	c886 <usbdc_register_handler+0x16>
    c876:	b110      	cbz	r0, c87e <usbdc_register_handler+0xe>
    c878:	2802      	cmp	r0, #2
    c87a:	d008      	beq.n	c88e <usbdc_register_handler+0x1e>
    c87c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c87e:	4806      	ldr	r0, [pc, #24]	; (c898 <usbdc_register_handler+0x28>)
    c880:	4b06      	ldr	r3, [pc, #24]	; (c89c <usbdc_register_handler+0x2c>)
    c882:	4798      	blx	r3
		break;
    c884:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c886:	4806      	ldr	r0, [pc, #24]	; (c8a0 <usbdc_register_handler+0x30>)
    c888:	4b04      	ldr	r3, [pc, #16]	; (c89c <usbdc_register_handler+0x2c>)
    c88a:	4798      	blx	r3
		break;
    c88c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c88e:	4805      	ldr	r0, [pc, #20]	; (c8a4 <usbdc_register_handler+0x34>)
    c890:	4b02      	ldr	r3, [pc, #8]	; (c89c <usbdc_register_handler+0x2c>)
    c892:	4798      	blx	r3
    c894:	bd08      	pop	{r3, pc}
    c896:	bf00      	nop
    c898:	20000ec8 	.word	0x20000ec8
    c89c:	0000730d 	.word	0x0000730d
    c8a0:	20000ecc 	.word	0x20000ecc
    c8a4:	20000ed0 	.word	0x20000ed0

0000c8a8 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c8a8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    c8aa:	4605      	mov	r5, r0
    c8ac:	f240 3255 	movw	r2, #853	; 0x355
    c8b0:	490c      	ldr	r1, [pc, #48]	; (c8e4 <usbdc_init+0x3c>)
    c8b2:	3000      	adds	r0, #0
    c8b4:	bf18      	it	ne
    c8b6:	2001      	movne	r0, #1
    c8b8:	4b0b      	ldr	r3, [pc, #44]	; (c8e8 <usbdc_init+0x40>)
    c8ba:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c8bc:	4b0b      	ldr	r3, [pc, #44]	; (c8ec <usbdc_init+0x44>)
    c8be:	4798      	blx	r3
	if (rc < 0) {
    c8c0:	2800      	cmp	r0, #0
    c8c2:	db0e      	blt.n	c8e2 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c8c4:	4c0a      	ldr	r4, [pc, #40]	; (c8f0 <usbdc_init+0x48>)
    c8c6:	2220      	movs	r2, #32
    c8c8:	2100      	movs	r1, #0
    c8ca:	4620      	mov	r0, r4
    c8cc:	4b09      	ldr	r3, [pc, #36]	; (c8f4 <usbdc_init+0x4c>)
    c8ce:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c8d0:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c8d2:	4909      	ldr	r1, [pc, #36]	; (c8f8 <usbdc_init+0x50>)
    c8d4:	2000      	movs	r0, #0
    c8d6:	4c09      	ldr	r4, [pc, #36]	; (c8fc <usbdc_init+0x54>)
    c8d8:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c8da:	4909      	ldr	r1, [pc, #36]	; (c900 <usbdc_init+0x58>)
    c8dc:	2001      	movs	r0, #1
    c8de:	47a0      	blx	r4

	return 0;
    c8e0:	2000      	movs	r0, #0
}
    c8e2:	bd38      	pop	{r3, r4, r5, pc}
    c8e4:	0000f5f4 	.word	0x0000f5f4
    c8e8:	000072b1 	.word	0x000072b1
    c8ec:	00006f59 	.word	0x00006f59
    c8f0:	20000ec4 	.word	0x20000ec4
    c8f4:	0000d447 	.word	0x0000d447
    c8f8:	0000c329 	.word	0x0000c329
    c8fc:	00006fc1 	.word	0x00006fc1
    c900:	0000c415 	.word	0x0000c415

0000c904 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c904:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    c906:	4601      	mov	r1, r0
    c908:	4801      	ldr	r0, [pc, #4]	; (c910 <usbdc_register_function+0xc>)
    c90a:	4b02      	ldr	r3, [pc, #8]	; (c914 <usbdc_register_function+0x10>)
    c90c:	4798      	blx	r3
    c90e:	bd08      	pop	{r3, pc}
    c910:	20000ed4 	.word	0x20000ed4
    c914:	0000730d 	.word	0x0000730d

0000c918 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c918:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    c91a:	4b0a      	ldr	r3, [pc, #40]	; (c944 <usbdc_start+0x2c>)
    c91c:	7e9b      	ldrb	r3, [r3, #26]
    c91e:	b95b      	cbnz	r3, c938 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    c920:	b168      	cbz	r0, c93e <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    c922:	4b08      	ldr	r3, [pc, #32]	; (c944 <usbdc_start+0x2c>)
    c924:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c926:	6802      	ldr	r2, [r0, #0]
    c928:	79d2      	ldrb	r2, [r2, #7]
    c92a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c92c:	2201      	movs	r2, #1
    c92e:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c930:	4b05      	ldr	r3, [pc, #20]	; (c948 <usbdc_start+0x30>)
    c932:	4798      	blx	r3
	return ERR_NONE;
    c934:	2000      	movs	r0, #0
    c936:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    c938:	f06f 0003 	mvn.w	r0, #3
    c93c:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    c93e:	f06f 0008 	mvn.w	r0, #8
}
    c942:	bd08      	pop	{r3, pc}
    c944:	20000ec4 	.word	0x20000ec4
    c948:	00006fcd 	.word	0x00006fcd

0000c94c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c94c:	b508      	push	{r3, lr}
	usb_d_attach();
    c94e:	4b01      	ldr	r3, [pc, #4]	; (c954 <usbdc_attach+0x8>)
    c950:	4798      	blx	r3
    c952:	bd08      	pop	{r3, pc}
    c954:	00006fd9 	.word	0x00006fd9

0000c958 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    c958:	4b01      	ldr	r3, [pc, #4]	; (c960 <usbdc_get_ctrl_buffer+0x8>)
    c95a:	6958      	ldr	r0, [r3, #20]
    c95c:	4770      	bx	lr
    c95e:	bf00      	nop
    c960:	20000ec4 	.word	0x20000ec4

0000c964 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    c964:	4b03      	ldr	r3, [pc, #12]	; (c974 <usbdc_get_state+0x10>)
    c966:	7e98      	ldrb	r0, [r3, #26]
    c968:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    c96c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    c96e:	bf18      	it	ne
    c970:	2010      	movne	r0, #16
    c972:	4770      	bx	lr
    c974:	20000ec4 	.word	0x20000ec4

0000c978 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c978:	4288      	cmp	r0, r1
    c97a:	d214      	bcs.n	c9a6 <usb_find_desc+0x2e>
	return desc[0];
    c97c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c97e:	2b01      	cmp	r3, #1
    c980:	d913      	bls.n	c9aa <usb_find_desc+0x32>
{
    c982:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c984:	7844      	ldrb	r4, [r0, #1]
    c986:	4294      	cmp	r4, r2
    c988:	d00a      	beq.n	c9a0 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    c98a:	4418      	add	r0, r3
	while (desc < eof) {
    c98c:	4281      	cmp	r1, r0
    c98e:	d906      	bls.n	c99e <usb_find_desc+0x26>
	return desc[0];
    c990:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c992:	2b01      	cmp	r3, #1
    c994:	d90b      	bls.n	c9ae <usb_find_desc+0x36>
	return desc[1];
    c996:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c998:	4294      	cmp	r4, r2
    c99a:	d1f6      	bne.n	c98a <usb_find_desc+0x12>
    c99c:	e000      	b.n	c9a0 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c99e:	2000      	movs	r0, #0
}
    c9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    c9a4:	4770      	bx	lr
	return NULL;
    c9a6:	2000      	movs	r0, #0
    c9a8:	4770      	bx	lr
		_desc_len_check();
    c9aa:	2000      	movs	r0, #0
    c9ac:	4770      	bx	lr
    c9ae:	2000      	movs	r0, #0
    c9b0:	e7f6      	b.n	c9a0 <usb_find_desc+0x28>

0000c9b2 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c9b2:	4288      	cmp	r0, r1
    c9b4:	d216      	bcs.n	c9e4 <usb_find_ep_desc+0x32>
	return desc[0];
    c9b6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c9b8:	2b01      	cmp	r3, #1
    c9ba:	d915      	bls.n	c9e8 <usb_find_ep_desc+0x36>
	return desc[1];
    c9bc:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c9be:	2a04      	cmp	r2, #4
    c9c0:	d014      	beq.n	c9ec <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c9c2:	2a05      	cmp	r2, #5
    c9c4:	d00b      	beq.n	c9de <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    c9c6:	4418      	add	r0, r3
	while (desc < eof) {
    c9c8:	4281      	cmp	r1, r0
    c9ca:	d909      	bls.n	c9e0 <usb_find_ep_desc+0x2e>
	return desc[0];
    c9cc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c9ce:	2b01      	cmp	r3, #1
    c9d0:	d90e      	bls.n	c9f0 <usb_find_ep_desc+0x3e>
	return desc[1];
    c9d2:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c9d4:	2a04      	cmp	r2, #4
    c9d6:	d00d      	beq.n	c9f4 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c9d8:	2a05      	cmp	r2, #5
    c9da:	d1f4      	bne.n	c9c6 <usb_find_ep_desc+0x14>
    c9dc:	e00b      	b.n	c9f6 <usb_find_ep_desc+0x44>
    c9de:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c9e0:	2000      	movs	r0, #0
    c9e2:	4770      	bx	lr
    c9e4:	2000      	movs	r0, #0
    c9e6:	4770      	bx	lr
		_desc_len_check();
    c9e8:	2000      	movs	r0, #0
    c9ea:	4770      	bx	lr
	return NULL;
    c9ec:	2000      	movs	r0, #0
    c9ee:	4770      	bx	lr
		_desc_len_check();
    c9f0:	2000      	movs	r0, #0
    c9f2:	4770      	bx	lr
	return NULL;
    c9f4:	2000      	movs	r0, #0
}
    c9f6:	4770      	bx	lr

0000c9f8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c9f8:	b538      	push	{r3, r4, r5, lr}
    c9fa:	460c      	mov	r4, r1
    c9fc:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c9fe:	2202      	movs	r2, #2
    ca00:	4b16      	ldr	r3, [pc, #88]	; (ca5c <usb_find_cfg_desc+0x64>)
    ca02:	4798      	blx	r3
	if (!desc) {
    ca04:	4603      	mov	r3, r0
    ca06:	b1e8      	cbz	r0, ca44 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    ca08:	4284      	cmp	r4, r0
    ca0a:	d91d      	bls.n	ca48 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    ca0c:	7802      	ldrb	r2, [r0, #0]
    ca0e:	2a01      	cmp	r2, #1
    ca10:	d91c      	bls.n	ca4c <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    ca12:	7842      	ldrb	r2, [r0, #1]
    ca14:	2a02      	cmp	r2, #2
    ca16:	d11b      	bne.n	ca50 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    ca18:	7942      	ldrb	r2, [r0, #5]
    ca1a:	42aa      	cmp	r2, r5
    ca1c:	d012      	beq.n	ca44 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    ca1e:	78d9      	ldrb	r1, [r3, #3]
    ca20:	789a      	ldrb	r2, [r3, #2]
    ca22:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    ca26:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    ca2a:	429c      	cmp	r4, r3
    ca2c:	d909      	bls.n	ca42 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    ca2e:	781a      	ldrb	r2, [r3, #0]
    ca30:	2a01      	cmp	r2, #1
    ca32:	d90f      	bls.n	ca54 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    ca34:	785a      	ldrb	r2, [r3, #1]
    ca36:	2a02      	cmp	r2, #2
    ca38:	d10e      	bne.n	ca58 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    ca3a:	795a      	ldrb	r2, [r3, #5]
    ca3c:	42aa      	cmp	r2, r5
    ca3e:	d1ee      	bne.n	ca1e <usb_find_cfg_desc+0x26>
    ca40:	e000      	b.n	ca44 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    ca42:	2300      	movs	r3, #0
}
    ca44:	4618      	mov	r0, r3
    ca46:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    ca48:	2300      	movs	r3, #0
    ca4a:	e7fb      	b.n	ca44 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    ca4c:	2300      	movs	r3, #0
    ca4e:	e7f9      	b.n	ca44 <usb_find_cfg_desc+0x4c>
	return NULL;
    ca50:	2300      	movs	r3, #0
    ca52:	e7f7      	b.n	ca44 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    ca54:	2300      	movs	r3, #0
    ca56:	e7f5      	b.n	ca44 <usb_find_cfg_desc+0x4c>
	return NULL;
    ca58:	2300      	movs	r3, #0
    ca5a:	e7f3      	b.n	ca44 <usb_find_cfg_desc+0x4c>
    ca5c:	0000c979 	.word	0x0000c979

0000ca60 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ca60:	4288      	cmp	r0, r1
    ca62:	d217      	bcs.n	ca94 <usb_find_str_desc+0x34>
{
    ca64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca68:	460d      	mov	r5, r1
    ca6a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    ca6c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ca6e:	f04f 0803 	mov.w	r8, #3
    ca72:	4f0c      	ldr	r7, [pc, #48]	; (caa4 <usb_find_str_desc+0x44>)
    ca74:	4642      	mov	r2, r8
    ca76:	4629      	mov	r1, r5
    ca78:	47b8      	blx	r7
		if (desc) {
    ca7a:	4603      	mov	r3, r0
    ca7c:	b170      	cbz	r0, ca9c <usb_find_str_desc+0x3c>
	return desc[0];
    ca7e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    ca80:	2801      	cmp	r0, #1
    ca82:	d90a      	bls.n	ca9a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    ca84:	42a6      	cmp	r6, r4
    ca86:	d009      	beq.n	ca9c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    ca88:	4418      	add	r0, r3
    ca8a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    ca8c:	4285      	cmp	r5, r0
    ca8e:	d8f1      	bhi.n	ca74 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    ca90:	2300      	movs	r3, #0
    ca92:	e003      	b.n	ca9c <usb_find_str_desc+0x3c>
    ca94:	2300      	movs	r3, #0
}
    ca96:	4618      	mov	r0, r3
    ca98:	4770      	bx	lr
			_desc_len_check();
    ca9a:	2300      	movs	r3, #0
}
    ca9c:	4618      	mov	r0, r3
    ca9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    caa2:	bf00      	nop
    caa4:	0000c979 	.word	0x0000c979

0000caa8 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    caa8:	4b3a      	ldr	r3, [pc, #232]	; (cb94 <hiddf_demo_sof_event+0xec>)
    caaa:	791b      	ldrb	r3, [r3, #4]
    caac:	2b0a      	cmp	r3, #10
    caae:	d803      	bhi.n	cab8 <hiddf_demo_sof_event+0x10>
    cab0:	3301      	adds	r3, #1
    cab2:	4a38      	ldr	r2, [pc, #224]	; (cb94 <hiddf_demo_sof_event+0xec>)
    cab4:	7113      	strb	r3, [r2, #4]
    cab6:	4770      	bx	lr
{
    cab8:	b570      	push	{r4, r5, r6, lr}
    caba:	b084      	sub	sp, #16
		interval = 0;
    cabc:	4b35      	ldr	r3, [pc, #212]	; (cb94 <hiddf_demo_sof_event+0xec>)
    cabe:	2200      	movs	r2, #0
    cac0:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    cac2:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    cac4:	a801      	add	r0, sp, #4
    cac6:	4b34      	ldr	r3, [pc, #208]	; (cb98 <hiddf_demo_sof_event+0xf0>)
    cac8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    caca:	096b      	lsrs	r3, r5, #5
    cacc:	4933      	ldr	r1, [pc, #204]	; (cb9c <hiddf_demo_sof_event+0xf4>)
    cace:	01db      	lsls	r3, r3, #7
    cad0:	18ca      	adds	r2, r1, r3
    cad2:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    cad4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    cad6:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    cad8:	405c      	eors	r4, r3
    cada:	400c      	ands	r4, r1
    cadc:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    cade:	a801      	add	r0, sp, #4
    cae0:	4b2f      	ldr	r3, [pc, #188]	; (cba0 <hiddf_demo_sof_event+0xf8>)
    cae2:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    cae4:	f005 051f 	and.w	r5, r5, #31
    cae8:	2301      	movs	r3, #1
    caea:	fa03 f505 	lsl.w	r5, r3, r5
    caee:	4225      	tst	r5, r4
    caf0:	d040      	beq.n	cb74 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    caf2:	4b28      	ldr	r3, [pc, #160]	; (cb94 <hiddf_demo_sof_event+0xec>)
    caf4:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    caf6:	a802      	add	r0, sp, #8
    caf8:	4b27      	ldr	r3, [pc, #156]	; (cb98 <hiddf_demo_sof_event+0xf0>)
    cafa:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    cafc:	096b      	lsrs	r3, r5, #5
    cafe:	4927      	ldr	r1, [pc, #156]	; (cb9c <hiddf_demo_sof_event+0xf4>)
    cb00:	01db      	lsls	r3, r3, #7
    cb02:	18ca      	adds	r2, r1, r3
    cb04:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    cb06:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    cb08:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    cb0a:	405c      	eors	r4, r3
    cb0c:	400c      	ands	r4, r1
    cb0e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    cb10:	a802      	add	r0, sp, #8
    cb12:	4b23      	ldr	r3, [pc, #140]	; (cba0 <hiddf_demo_sof_event+0xf8>)
    cb14:	4798      	blx	r3
    cb16:	f005 051f 	and.w	r5, r5, #31
    cb1a:	2301      	movs	r3, #1
    cb1c:	fa03 f505 	lsl.w	r5, r3, r5
    cb20:	4225      	tst	r5, r4
    cb22:	d02d      	beq.n	cb80 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    cb24:	4d1b      	ldr	r5, [pc, #108]	; (cb94 <hiddf_demo_sof_event+0xec>)
    cb26:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    cb28:	a803      	add	r0, sp, #12
    cb2a:	4b1b      	ldr	r3, [pc, #108]	; (cb98 <hiddf_demo_sof_event+0xf0>)
    cb2c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    cb2e:	0973      	lsrs	r3, r6, #5
    cb30:	491a      	ldr	r1, [pc, #104]	; (cb9c <hiddf_demo_sof_event+0xf4>)
    cb32:	01db      	lsls	r3, r3, #7
    cb34:	18ca      	adds	r2, r1, r3
    cb36:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    cb38:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    cb3a:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    cb3c:	405c      	eors	r4, r3
    cb3e:	400c      	ands	r4, r1
    cb40:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    cb42:	a803      	add	r0, sp, #12
    cb44:	4b16      	ldr	r3, [pc, #88]	; (cba0 <hiddf_demo_sof_event+0xf8>)
    cb46:	4798      	blx	r3
    cb48:	f006 061f 	and.w	r6, r6, #31
    cb4c:	2301      	movs	r3, #1
    cb4e:	40b3      	lsls	r3, r6
    cb50:	401c      	ands	r4, r3
    cb52:	bf0c      	ite	eq
    cb54:	2301      	moveq	r3, #1
    cb56:	2300      	movne	r3, #0
    cb58:	7d2a      	ldrb	r2, [r5, #20]
    cb5a:	429a      	cmp	r2, r3
    cb5c:	d008      	beq.n	cb70 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    cb5e:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    cb60:	b19c      	cbz	r4, cb8a <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    cb62:	2200      	movs	r2, #0
    cb64:	4b0f      	ldr	r3, [pc, #60]	; (cba4 <hiddf_demo_sof_event+0xfc>)
    cb66:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    cb68:	2101      	movs	r1, #1
    cb6a:	480e      	ldr	r0, [pc, #56]	; (cba4 <hiddf_demo_sof_event+0xfc>)
    cb6c:	4b0e      	ldr	r3, [pc, #56]	; (cba8 <hiddf_demo_sof_event+0x100>)
    cb6e:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    cb70:	b004      	add	sp, #16
    cb72:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    cb74:	4619      	mov	r1, r3
    cb76:	f06f 0004 	mvn.w	r0, #4
    cb7a:	4b0c      	ldr	r3, [pc, #48]	; (cbac <hiddf_demo_sof_event+0x104>)
    cb7c:	4798      	blx	r3
    cb7e:	e7b8      	b.n	caf2 <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    cb80:	4619      	mov	r1, r3
    cb82:	2005      	movs	r0, #5
    cb84:	4b09      	ldr	r3, [pc, #36]	; (cbac <hiddf_demo_sof_event+0x104>)
    cb86:	4798      	blx	r3
    cb88:	e7cc      	b.n	cb24 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    cb8a:	2201      	movs	r2, #1
    cb8c:	4b05      	ldr	r3, [pc, #20]	; (cba4 <hiddf_demo_sof_event+0xfc>)
    cb8e:	709a      	strb	r2, [r3, #2]
    cb90:	e7ea      	b.n	cb68 <hiddf_demo_sof_event+0xc0>
    cb92:	bf00      	nop
    cb94:	20000ee4 	.word	0x20000ee4
    cb98:	00005c7d 	.word	0x00005c7d
    cb9c:	41008000 	.word	0x41008000
    cba0:	00005c8b 	.word	0x00005c8b
    cba4:	200003a8 	.word	0x200003a8
    cba8:	0000bcd9 	.word	0x0000bcd9
    cbac:	0000bf6d 	.word	0x0000bf6d

0000cbb0 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    cbb0:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    cbb2:	4805      	ldr	r0, [pc, #20]	; (cbc8 <composite_device_init+0x18>)
    cbb4:	4b05      	ldr	r3, [pc, #20]	; (cbcc <composite_device_init+0x1c>)
    cbb6:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    cbb8:	4b05      	ldr	r3, [pc, #20]	; (cbd0 <composite_device_init+0x20>)
    cbba:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    cbbc:	4b05      	ldr	r3, [pc, #20]	; (cbd4 <composite_device_init+0x24>)
    cbbe:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    cbc0:	4b05      	ldr	r3, [pc, #20]	; (cbd8 <composite_device_init+0x28>)
    cbc2:	4798      	blx	r3
    cbc4:	bd08      	pop	{r3, pc}
    cbc6:	bf00      	nop
    cbc8:	20000efc 	.word	0x20000efc
    cbcc:	0000c8a9 	.word	0x0000c8a9
    cbd0:	0000b9e1 	.word	0x0000b9e1
    cbd4:	0000bf29 	.word	0x0000bf29
    cbd8:	0000bc95 	.word	0x0000bc95

0000cbdc <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    cbdc:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    cbde:	4803      	ldr	r0, [pc, #12]	; (cbec <composite_device_start+0x10>)
    cbe0:	4b03      	ldr	r3, [pc, #12]	; (cbf0 <composite_device_start+0x14>)
    cbe2:	4798      	blx	r3
	usbdc_attach();
    cbe4:	4b03      	ldr	r3, [pc, #12]	; (cbf4 <composite_device_start+0x18>)
    cbe6:	4798      	blx	r3
    cbe8:	bd08      	pop	{r3, pc}
    cbea:	bf00      	nop
    cbec:	200003b4 	.word	0x200003b4
    cbf0:	0000c919 	.word	0x0000c919
    cbf4:	0000c94d 	.word	0x0000c94d

0000cbf8 <usb_init>:
		}
	}
}

void usb_init(void)
{
    cbf8:	b508      	push	{r3, lr}

	composite_device_init();
    cbfa:	4b01      	ldr	r3, [pc, #4]	; (cc00 <usb_init+0x8>)
    cbfc:	4798      	blx	r3
    cbfe:	bd08      	pop	{r3, pc}
    cc00:	0000cbb1 	.word	0x0000cbb1

0000cc04 <__aeabi_drsub>:
    cc04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    cc08:	e002      	b.n	cc10 <__adddf3>
    cc0a:	bf00      	nop

0000cc0c <__aeabi_dsub>:
    cc0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000cc10 <__adddf3>:
    cc10:	b530      	push	{r4, r5, lr}
    cc12:	ea4f 0441 	mov.w	r4, r1, lsl #1
    cc16:	ea4f 0543 	mov.w	r5, r3, lsl #1
    cc1a:	ea94 0f05 	teq	r4, r5
    cc1e:	bf08      	it	eq
    cc20:	ea90 0f02 	teqeq	r0, r2
    cc24:	bf1f      	itttt	ne
    cc26:	ea54 0c00 	orrsne.w	ip, r4, r0
    cc2a:	ea55 0c02 	orrsne.w	ip, r5, r2
    cc2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    cc32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cc36:	f000 80e2 	beq.w	cdfe <__adddf3+0x1ee>
    cc3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    cc3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    cc42:	bfb8      	it	lt
    cc44:	426d      	neglt	r5, r5
    cc46:	dd0c      	ble.n	cc62 <__adddf3+0x52>
    cc48:	442c      	add	r4, r5
    cc4a:	ea80 0202 	eor.w	r2, r0, r2
    cc4e:	ea81 0303 	eor.w	r3, r1, r3
    cc52:	ea82 0000 	eor.w	r0, r2, r0
    cc56:	ea83 0101 	eor.w	r1, r3, r1
    cc5a:	ea80 0202 	eor.w	r2, r0, r2
    cc5e:	ea81 0303 	eor.w	r3, r1, r3
    cc62:	2d36      	cmp	r5, #54	; 0x36
    cc64:	bf88      	it	hi
    cc66:	bd30      	pophi	{r4, r5, pc}
    cc68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cc6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cc70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    cc74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    cc78:	d002      	beq.n	cc80 <__adddf3+0x70>
    cc7a:	4240      	negs	r0, r0
    cc7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cc80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    cc84:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cc88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    cc8c:	d002      	beq.n	cc94 <__adddf3+0x84>
    cc8e:	4252      	negs	r2, r2
    cc90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cc94:	ea94 0f05 	teq	r4, r5
    cc98:	f000 80a7 	beq.w	cdea <__adddf3+0x1da>
    cc9c:	f1a4 0401 	sub.w	r4, r4, #1
    cca0:	f1d5 0e20 	rsbs	lr, r5, #32
    cca4:	db0d      	blt.n	ccc2 <__adddf3+0xb2>
    cca6:	fa02 fc0e 	lsl.w	ip, r2, lr
    ccaa:	fa22 f205 	lsr.w	r2, r2, r5
    ccae:	1880      	adds	r0, r0, r2
    ccb0:	f141 0100 	adc.w	r1, r1, #0
    ccb4:	fa03 f20e 	lsl.w	r2, r3, lr
    ccb8:	1880      	adds	r0, r0, r2
    ccba:	fa43 f305 	asr.w	r3, r3, r5
    ccbe:	4159      	adcs	r1, r3
    ccc0:	e00e      	b.n	cce0 <__adddf3+0xd0>
    ccc2:	f1a5 0520 	sub.w	r5, r5, #32
    ccc6:	f10e 0e20 	add.w	lr, lr, #32
    ccca:	2a01      	cmp	r2, #1
    cccc:	fa03 fc0e 	lsl.w	ip, r3, lr
    ccd0:	bf28      	it	cs
    ccd2:	f04c 0c02 	orrcs.w	ip, ip, #2
    ccd6:	fa43 f305 	asr.w	r3, r3, r5
    ccda:	18c0      	adds	r0, r0, r3
    ccdc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    cce0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cce4:	d507      	bpl.n	ccf6 <__adddf3+0xe6>
    cce6:	f04f 0e00 	mov.w	lr, #0
    ccea:	f1dc 0c00 	rsbs	ip, ip, #0
    ccee:	eb7e 0000 	sbcs.w	r0, lr, r0
    ccf2:	eb6e 0101 	sbc.w	r1, lr, r1
    ccf6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    ccfa:	d31b      	bcc.n	cd34 <__adddf3+0x124>
    ccfc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    cd00:	d30c      	bcc.n	cd1c <__adddf3+0x10c>
    cd02:	0849      	lsrs	r1, r1, #1
    cd04:	ea5f 0030 	movs.w	r0, r0, rrx
    cd08:	ea4f 0c3c 	mov.w	ip, ip, rrx
    cd0c:	f104 0401 	add.w	r4, r4, #1
    cd10:	ea4f 5244 	mov.w	r2, r4, lsl #21
    cd14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    cd18:	f080 809a 	bcs.w	ce50 <__adddf3+0x240>
    cd1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    cd20:	bf08      	it	eq
    cd22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    cd26:	f150 0000 	adcs.w	r0, r0, #0
    cd2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cd2e:	ea41 0105 	orr.w	r1, r1, r5
    cd32:	bd30      	pop	{r4, r5, pc}
    cd34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    cd38:	4140      	adcs	r0, r0
    cd3a:	eb41 0101 	adc.w	r1, r1, r1
    cd3e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cd42:	f1a4 0401 	sub.w	r4, r4, #1
    cd46:	d1e9      	bne.n	cd1c <__adddf3+0x10c>
    cd48:	f091 0f00 	teq	r1, #0
    cd4c:	bf04      	itt	eq
    cd4e:	4601      	moveq	r1, r0
    cd50:	2000      	moveq	r0, #0
    cd52:	fab1 f381 	clz	r3, r1
    cd56:	bf08      	it	eq
    cd58:	3320      	addeq	r3, #32
    cd5a:	f1a3 030b 	sub.w	r3, r3, #11
    cd5e:	f1b3 0220 	subs.w	r2, r3, #32
    cd62:	da0c      	bge.n	cd7e <__adddf3+0x16e>
    cd64:	320c      	adds	r2, #12
    cd66:	dd08      	ble.n	cd7a <__adddf3+0x16a>
    cd68:	f102 0c14 	add.w	ip, r2, #20
    cd6c:	f1c2 020c 	rsb	r2, r2, #12
    cd70:	fa01 f00c 	lsl.w	r0, r1, ip
    cd74:	fa21 f102 	lsr.w	r1, r1, r2
    cd78:	e00c      	b.n	cd94 <__adddf3+0x184>
    cd7a:	f102 0214 	add.w	r2, r2, #20
    cd7e:	bfd8      	it	le
    cd80:	f1c2 0c20 	rsble	ip, r2, #32
    cd84:	fa01 f102 	lsl.w	r1, r1, r2
    cd88:	fa20 fc0c 	lsr.w	ip, r0, ip
    cd8c:	bfdc      	itt	le
    cd8e:	ea41 010c 	orrle.w	r1, r1, ip
    cd92:	4090      	lslle	r0, r2
    cd94:	1ae4      	subs	r4, r4, r3
    cd96:	bfa2      	ittt	ge
    cd98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    cd9c:	4329      	orrge	r1, r5
    cd9e:	bd30      	popge	{r4, r5, pc}
    cda0:	ea6f 0404 	mvn.w	r4, r4
    cda4:	3c1f      	subs	r4, #31
    cda6:	da1c      	bge.n	cde2 <__adddf3+0x1d2>
    cda8:	340c      	adds	r4, #12
    cdaa:	dc0e      	bgt.n	cdca <__adddf3+0x1ba>
    cdac:	f104 0414 	add.w	r4, r4, #20
    cdb0:	f1c4 0220 	rsb	r2, r4, #32
    cdb4:	fa20 f004 	lsr.w	r0, r0, r4
    cdb8:	fa01 f302 	lsl.w	r3, r1, r2
    cdbc:	ea40 0003 	orr.w	r0, r0, r3
    cdc0:	fa21 f304 	lsr.w	r3, r1, r4
    cdc4:	ea45 0103 	orr.w	r1, r5, r3
    cdc8:	bd30      	pop	{r4, r5, pc}
    cdca:	f1c4 040c 	rsb	r4, r4, #12
    cdce:	f1c4 0220 	rsb	r2, r4, #32
    cdd2:	fa20 f002 	lsr.w	r0, r0, r2
    cdd6:	fa01 f304 	lsl.w	r3, r1, r4
    cdda:	ea40 0003 	orr.w	r0, r0, r3
    cdde:	4629      	mov	r1, r5
    cde0:	bd30      	pop	{r4, r5, pc}
    cde2:	fa21 f004 	lsr.w	r0, r1, r4
    cde6:	4629      	mov	r1, r5
    cde8:	bd30      	pop	{r4, r5, pc}
    cdea:	f094 0f00 	teq	r4, #0
    cdee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    cdf2:	bf06      	itte	eq
    cdf4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    cdf8:	3401      	addeq	r4, #1
    cdfa:	3d01      	subne	r5, #1
    cdfc:	e74e      	b.n	cc9c <__adddf3+0x8c>
    cdfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ce02:	bf18      	it	ne
    ce04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ce08:	d029      	beq.n	ce5e <__adddf3+0x24e>
    ce0a:	ea94 0f05 	teq	r4, r5
    ce0e:	bf08      	it	eq
    ce10:	ea90 0f02 	teqeq	r0, r2
    ce14:	d005      	beq.n	ce22 <__adddf3+0x212>
    ce16:	ea54 0c00 	orrs.w	ip, r4, r0
    ce1a:	bf04      	itt	eq
    ce1c:	4619      	moveq	r1, r3
    ce1e:	4610      	moveq	r0, r2
    ce20:	bd30      	pop	{r4, r5, pc}
    ce22:	ea91 0f03 	teq	r1, r3
    ce26:	bf1e      	ittt	ne
    ce28:	2100      	movne	r1, #0
    ce2a:	2000      	movne	r0, #0
    ce2c:	bd30      	popne	{r4, r5, pc}
    ce2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    ce32:	d105      	bne.n	ce40 <__adddf3+0x230>
    ce34:	0040      	lsls	r0, r0, #1
    ce36:	4149      	adcs	r1, r1
    ce38:	bf28      	it	cs
    ce3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ce3e:	bd30      	pop	{r4, r5, pc}
    ce40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    ce44:	bf3c      	itt	cc
    ce46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    ce4a:	bd30      	popcc	{r4, r5, pc}
    ce4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ce50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    ce54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ce58:	f04f 0000 	mov.w	r0, #0
    ce5c:	bd30      	pop	{r4, r5, pc}
    ce5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ce62:	bf1a      	itte	ne
    ce64:	4619      	movne	r1, r3
    ce66:	4610      	movne	r0, r2
    ce68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    ce6c:	bf1c      	itt	ne
    ce6e:	460b      	movne	r3, r1
    ce70:	4602      	movne	r2, r0
    ce72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ce76:	bf06      	itte	eq
    ce78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    ce7c:	ea91 0f03 	teqeq	r1, r3
    ce80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    ce84:	bd30      	pop	{r4, r5, pc}
    ce86:	bf00      	nop

0000ce88 <__aeabi_ui2d>:
    ce88:	f090 0f00 	teq	r0, #0
    ce8c:	bf04      	itt	eq
    ce8e:	2100      	moveq	r1, #0
    ce90:	4770      	bxeq	lr
    ce92:	b530      	push	{r4, r5, lr}
    ce94:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ce98:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ce9c:	f04f 0500 	mov.w	r5, #0
    cea0:	f04f 0100 	mov.w	r1, #0
    cea4:	e750      	b.n	cd48 <__adddf3+0x138>
    cea6:	bf00      	nop

0000cea8 <__aeabi_i2d>:
    cea8:	f090 0f00 	teq	r0, #0
    ceac:	bf04      	itt	eq
    ceae:	2100      	moveq	r1, #0
    ceb0:	4770      	bxeq	lr
    ceb2:	b530      	push	{r4, r5, lr}
    ceb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ceb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cebc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cec0:	bf48      	it	mi
    cec2:	4240      	negmi	r0, r0
    cec4:	f04f 0100 	mov.w	r1, #0
    cec8:	e73e      	b.n	cd48 <__adddf3+0x138>
    ceca:	bf00      	nop

0000cecc <__aeabi_f2d>:
    cecc:	0042      	lsls	r2, r0, #1
    cece:	ea4f 01e2 	mov.w	r1, r2, asr #3
    ced2:	ea4f 0131 	mov.w	r1, r1, rrx
    ced6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    ceda:	bf1f      	itttt	ne
    cedc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    cee0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cee4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    cee8:	4770      	bxne	lr
    ceea:	f092 0f00 	teq	r2, #0
    ceee:	bf14      	ite	ne
    cef0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cef4:	4770      	bxeq	lr
    cef6:	b530      	push	{r4, r5, lr}
    cef8:	f44f 7460 	mov.w	r4, #896	; 0x380
    cefc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cf00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cf04:	e720      	b.n	cd48 <__adddf3+0x138>
    cf06:	bf00      	nop

0000cf08 <__aeabi_ul2d>:
    cf08:	ea50 0201 	orrs.w	r2, r0, r1
    cf0c:	bf08      	it	eq
    cf0e:	4770      	bxeq	lr
    cf10:	b530      	push	{r4, r5, lr}
    cf12:	f04f 0500 	mov.w	r5, #0
    cf16:	e00a      	b.n	cf2e <__aeabi_l2d+0x16>

0000cf18 <__aeabi_l2d>:
    cf18:	ea50 0201 	orrs.w	r2, r0, r1
    cf1c:	bf08      	it	eq
    cf1e:	4770      	bxeq	lr
    cf20:	b530      	push	{r4, r5, lr}
    cf22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    cf26:	d502      	bpl.n	cf2e <__aeabi_l2d+0x16>
    cf28:	4240      	negs	r0, r0
    cf2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cf2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cf32:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cf36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    cf3a:	f43f aedc 	beq.w	ccf6 <__adddf3+0xe6>
    cf3e:	f04f 0203 	mov.w	r2, #3
    cf42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cf46:	bf18      	it	ne
    cf48:	3203      	addne	r2, #3
    cf4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cf4e:	bf18      	it	ne
    cf50:	3203      	addne	r2, #3
    cf52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    cf56:	f1c2 0320 	rsb	r3, r2, #32
    cf5a:	fa00 fc03 	lsl.w	ip, r0, r3
    cf5e:	fa20 f002 	lsr.w	r0, r0, r2
    cf62:	fa01 fe03 	lsl.w	lr, r1, r3
    cf66:	ea40 000e 	orr.w	r0, r0, lr
    cf6a:	fa21 f102 	lsr.w	r1, r1, r2
    cf6e:	4414      	add	r4, r2
    cf70:	e6c1      	b.n	ccf6 <__adddf3+0xe6>
    cf72:	bf00      	nop

0000cf74 <__aeabi_dmul>:
    cf74:	b570      	push	{r4, r5, r6, lr}
    cf76:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cf7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cf7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cf82:	bf1d      	ittte	ne
    cf84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cf88:	ea94 0f0c 	teqne	r4, ip
    cf8c:	ea95 0f0c 	teqne	r5, ip
    cf90:	f000 f8de 	bleq	d150 <__aeabi_dmul+0x1dc>
    cf94:	442c      	add	r4, r5
    cf96:	ea81 0603 	eor.w	r6, r1, r3
    cf9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    cf9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    cfa2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    cfa6:	bf18      	it	ne
    cfa8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    cfac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cfb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cfb4:	d038      	beq.n	d028 <__aeabi_dmul+0xb4>
    cfb6:	fba0 ce02 	umull	ip, lr, r0, r2
    cfba:	f04f 0500 	mov.w	r5, #0
    cfbe:	fbe1 e502 	umlal	lr, r5, r1, r2
    cfc2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    cfc6:	fbe0 e503 	umlal	lr, r5, r0, r3
    cfca:	f04f 0600 	mov.w	r6, #0
    cfce:	fbe1 5603 	umlal	r5, r6, r1, r3
    cfd2:	f09c 0f00 	teq	ip, #0
    cfd6:	bf18      	it	ne
    cfd8:	f04e 0e01 	orrne.w	lr, lr, #1
    cfdc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    cfe0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    cfe4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    cfe8:	d204      	bcs.n	cff4 <__aeabi_dmul+0x80>
    cfea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    cfee:	416d      	adcs	r5, r5
    cff0:	eb46 0606 	adc.w	r6, r6, r6
    cff4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    cff8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    cffc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    d000:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    d004:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    d008:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d00c:	bf88      	it	hi
    d00e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d012:	d81e      	bhi.n	d052 <__aeabi_dmul+0xde>
    d014:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    d018:	bf08      	it	eq
    d01a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    d01e:	f150 0000 	adcs.w	r0, r0, #0
    d022:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d026:	bd70      	pop	{r4, r5, r6, pc}
    d028:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    d02c:	ea46 0101 	orr.w	r1, r6, r1
    d030:	ea40 0002 	orr.w	r0, r0, r2
    d034:	ea81 0103 	eor.w	r1, r1, r3
    d038:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    d03c:	bfc2      	ittt	gt
    d03e:	ebd4 050c 	rsbsgt	r5, r4, ip
    d042:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d046:	bd70      	popgt	{r4, r5, r6, pc}
    d048:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d04c:	f04f 0e00 	mov.w	lr, #0
    d050:	3c01      	subs	r4, #1
    d052:	f300 80ab 	bgt.w	d1ac <__aeabi_dmul+0x238>
    d056:	f114 0f36 	cmn.w	r4, #54	; 0x36
    d05a:	bfde      	ittt	le
    d05c:	2000      	movle	r0, #0
    d05e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    d062:	bd70      	pople	{r4, r5, r6, pc}
    d064:	f1c4 0400 	rsb	r4, r4, #0
    d068:	3c20      	subs	r4, #32
    d06a:	da35      	bge.n	d0d8 <__aeabi_dmul+0x164>
    d06c:	340c      	adds	r4, #12
    d06e:	dc1b      	bgt.n	d0a8 <__aeabi_dmul+0x134>
    d070:	f104 0414 	add.w	r4, r4, #20
    d074:	f1c4 0520 	rsb	r5, r4, #32
    d078:	fa00 f305 	lsl.w	r3, r0, r5
    d07c:	fa20 f004 	lsr.w	r0, r0, r4
    d080:	fa01 f205 	lsl.w	r2, r1, r5
    d084:	ea40 0002 	orr.w	r0, r0, r2
    d088:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    d08c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d090:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d094:	fa21 f604 	lsr.w	r6, r1, r4
    d098:	eb42 0106 	adc.w	r1, r2, r6
    d09c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d0a0:	bf08      	it	eq
    d0a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d0a6:	bd70      	pop	{r4, r5, r6, pc}
    d0a8:	f1c4 040c 	rsb	r4, r4, #12
    d0ac:	f1c4 0520 	rsb	r5, r4, #32
    d0b0:	fa00 f304 	lsl.w	r3, r0, r4
    d0b4:	fa20 f005 	lsr.w	r0, r0, r5
    d0b8:	fa01 f204 	lsl.w	r2, r1, r4
    d0bc:	ea40 0002 	orr.w	r0, r0, r2
    d0c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d0c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d0c8:	f141 0100 	adc.w	r1, r1, #0
    d0cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d0d0:	bf08      	it	eq
    d0d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d0d6:	bd70      	pop	{r4, r5, r6, pc}
    d0d8:	f1c4 0520 	rsb	r5, r4, #32
    d0dc:	fa00 f205 	lsl.w	r2, r0, r5
    d0e0:	ea4e 0e02 	orr.w	lr, lr, r2
    d0e4:	fa20 f304 	lsr.w	r3, r0, r4
    d0e8:	fa01 f205 	lsl.w	r2, r1, r5
    d0ec:	ea43 0302 	orr.w	r3, r3, r2
    d0f0:	fa21 f004 	lsr.w	r0, r1, r4
    d0f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d0f8:	fa21 f204 	lsr.w	r2, r1, r4
    d0fc:	ea20 0002 	bic.w	r0, r0, r2
    d100:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    d104:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d108:	bf08      	it	eq
    d10a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d10e:	bd70      	pop	{r4, r5, r6, pc}
    d110:	f094 0f00 	teq	r4, #0
    d114:	d10f      	bne.n	d136 <__aeabi_dmul+0x1c2>
    d116:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    d11a:	0040      	lsls	r0, r0, #1
    d11c:	eb41 0101 	adc.w	r1, r1, r1
    d120:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d124:	bf08      	it	eq
    d126:	3c01      	subeq	r4, #1
    d128:	d0f7      	beq.n	d11a <__aeabi_dmul+0x1a6>
    d12a:	ea41 0106 	orr.w	r1, r1, r6
    d12e:	f095 0f00 	teq	r5, #0
    d132:	bf18      	it	ne
    d134:	4770      	bxne	lr
    d136:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    d13a:	0052      	lsls	r2, r2, #1
    d13c:	eb43 0303 	adc.w	r3, r3, r3
    d140:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    d144:	bf08      	it	eq
    d146:	3d01      	subeq	r5, #1
    d148:	d0f7      	beq.n	d13a <__aeabi_dmul+0x1c6>
    d14a:	ea43 0306 	orr.w	r3, r3, r6
    d14e:	4770      	bx	lr
    d150:	ea94 0f0c 	teq	r4, ip
    d154:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d158:	bf18      	it	ne
    d15a:	ea95 0f0c 	teqne	r5, ip
    d15e:	d00c      	beq.n	d17a <__aeabi_dmul+0x206>
    d160:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d164:	bf18      	it	ne
    d166:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d16a:	d1d1      	bne.n	d110 <__aeabi_dmul+0x19c>
    d16c:	ea81 0103 	eor.w	r1, r1, r3
    d170:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d174:	f04f 0000 	mov.w	r0, #0
    d178:	bd70      	pop	{r4, r5, r6, pc}
    d17a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d17e:	bf06      	itte	eq
    d180:	4610      	moveq	r0, r2
    d182:	4619      	moveq	r1, r3
    d184:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d188:	d019      	beq.n	d1be <__aeabi_dmul+0x24a>
    d18a:	ea94 0f0c 	teq	r4, ip
    d18e:	d102      	bne.n	d196 <__aeabi_dmul+0x222>
    d190:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d194:	d113      	bne.n	d1be <__aeabi_dmul+0x24a>
    d196:	ea95 0f0c 	teq	r5, ip
    d19a:	d105      	bne.n	d1a8 <__aeabi_dmul+0x234>
    d19c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d1a0:	bf1c      	itt	ne
    d1a2:	4610      	movne	r0, r2
    d1a4:	4619      	movne	r1, r3
    d1a6:	d10a      	bne.n	d1be <__aeabi_dmul+0x24a>
    d1a8:	ea81 0103 	eor.w	r1, r1, r3
    d1ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d1b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d1b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d1b8:	f04f 0000 	mov.w	r0, #0
    d1bc:	bd70      	pop	{r4, r5, r6, pc}
    d1be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d1c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d1c6:	bd70      	pop	{r4, r5, r6, pc}

0000d1c8 <__aeabi_ddiv>:
    d1c8:	b570      	push	{r4, r5, r6, lr}
    d1ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d1ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d1d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d1d6:	bf1d      	ittte	ne
    d1d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d1dc:	ea94 0f0c 	teqne	r4, ip
    d1e0:	ea95 0f0c 	teqne	r5, ip
    d1e4:	f000 f8a7 	bleq	d336 <__aeabi_ddiv+0x16e>
    d1e8:	eba4 0405 	sub.w	r4, r4, r5
    d1ec:	ea81 0e03 	eor.w	lr, r1, r3
    d1f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d1f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d1f8:	f000 8088 	beq.w	d30c <__aeabi_ddiv+0x144>
    d1fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d200:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d204:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d208:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d20c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d210:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d214:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d218:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d21c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d220:	429d      	cmp	r5, r3
    d222:	bf08      	it	eq
    d224:	4296      	cmpeq	r6, r2
    d226:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d22a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d22e:	d202      	bcs.n	d236 <__aeabi_ddiv+0x6e>
    d230:	085b      	lsrs	r3, r3, #1
    d232:	ea4f 0232 	mov.w	r2, r2, rrx
    d236:	1ab6      	subs	r6, r6, r2
    d238:	eb65 0503 	sbc.w	r5, r5, r3
    d23c:	085b      	lsrs	r3, r3, #1
    d23e:	ea4f 0232 	mov.w	r2, r2, rrx
    d242:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d246:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    d24a:	ebb6 0e02 	subs.w	lr, r6, r2
    d24e:	eb75 0e03 	sbcs.w	lr, r5, r3
    d252:	bf22      	ittt	cs
    d254:	1ab6      	subcs	r6, r6, r2
    d256:	4675      	movcs	r5, lr
    d258:	ea40 000c 	orrcs.w	r0, r0, ip
    d25c:	085b      	lsrs	r3, r3, #1
    d25e:	ea4f 0232 	mov.w	r2, r2, rrx
    d262:	ebb6 0e02 	subs.w	lr, r6, r2
    d266:	eb75 0e03 	sbcs.w	lr, r5, r3
    d26a:	bf22      	ittt	cs
    d26c:	1ab6      	subcs	r6, r6, r2
    d26e:	4675      	movcs	r5, lr
    d270:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d274:	085b      	lsrs	r3, r3, #1
    d276:	ea4f 0232 	mov.w	r2, r2, rrx
    d27a:	ebb6 0e02 	subs.w	lr, r6, r2
    d27e:	eb75 0e03 	sbcs.w	lr, r5, r3
    d282:	bf22      	ittt	cs
    d284:	1ab6      	subcs	r6, r6, r2
    d286:	4675      	movcs	r5, lr
    d288:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d28c:	085b      	lsrs	r3, r3, #1
    d28e:	ea4f 0232 	mov.w	r2, r2, rrx
    d292:	ebb6 0e02 	subs.w	lr, r6, r2
    d296:	eb75 0e03 	sbcs.w	lr, r5, r3
    d29a:	bf22      	ittt	cs
    d29c:	1ab6      	subcs	r6, r6, r2
    d29e:	4675      	movcs	r5, lr
    d2a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d2a4:	ea55 0e06 	orrs.w	lr, r5, r6
    d2a8:	d018      	beq.n	d2dc <__aeabi_ddiv+0x114>
    d2aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d2ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d2b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d2b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d2ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d2be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d2c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    d2c6:	d1c0      	bne.n	d24a <__aeabi_ddiv+0x82>
    d2c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d2cc:	d10b      	bne.n	d2e6 <__aeabi_ddiv+0x11e>
    d2ce:	ea41 0100 	orr.w	r1, r1, r0
    d2d2:	f04f 0000 	mov.w	r0, #0
    d2d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    d2da:	e7b6      	b.n	d24a <__aeabi_ddiv+0x82>
    d2dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d2e0:	bf04      	itt	eq
    d2e2:	4301      	orreq	r1, r0
    d2e4:	2000      	moveq	r0, #0
    d2e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d2ea:	bf88      	it	hi
    d2ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d2f0:	f63f aeaf 	bhi.w	d052 <__aeabi_dmul+0xde>
    d2f4:	ebb5 0c03 	subs.w	ip, r5, r3
    d2f8:	bf04      	itt	eq
    d2fa:	ebb6 0c02 	subseq.w	ip, r6, r2
    d2fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d302:	f150 0000 	adcs.w	r0, r0, #0
    d306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d30a:	bd70      	pop	{r4, r5, r6, pc}
    d30c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    d310:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    d314:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    d318:	bfc2      	ittt	gt
    d31a:	ebd4 050c 	rsbsgt	r5, r4, ip
    d31e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d322:	bd70      	popgt	{r4, r5, r6, pc}
    d324:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d328:	f04f 0e00 	mov.w	lr, #0
    d32c:	3c01      	subs	r4, #1
    d32e:	e690      	b.n	d052 <__aeabi_dmul+0xde>
    d330:	ea45 0e06 	orr.w	lr, r5, r6
    d334:	e68d      	b.n	d052 <__aeabi_dmul+0xde>
    d336:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d33a:	ea94 0f0c 	teq	r4, ip
    d33e:	bf08      	it	eq
    d340:	ea95 0f0c 	teqeq	r5, ip
    d344:	f43f af3b 	beq.w	d1be <__aeabi_dmul+0x24a>
    d348:	ea94 0f0c 	teq	r4, ip
    d34c:	d10a      	bne.n	d364 <__aeabi_ddiv+0x19c>
    d34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d352:	f47f af34 	bne.w	d1be <__aeabi_dmul+0x24a>
    d356:	ea95 0f0c 	teq	r5, ip
    d35a:	f47f af25 	bne.w	d1a8 <__aeabi_dmul+0x234>
    d35e:	4610      	mov	r0, r2
    d360:	4619      	mov	r1, r3
    d362:	e72c      	b.n	d1be <__aeabi_dmul+0x24a>
    d364:	ea95 0f0c 	teq	r5, ip
    d368:	d106      	bne.n	d378 <__aeabi_ddiv+0x1b0>
    d36a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d36e:	f43f aefd 	beq.w	d16c <__aeabi_dmul+0x1f8>
    d372:	4610      	mov	r0, r2
    d374:	4619      	mov	r1, r3
    d376:	e722      	b.n	d1be <__aeabi_dmul+0x24a>
    d378:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d37c:	bf18      	it	ne
    d37e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d382:	f47f aec5 	bne.w	d110 <__aeabi_dmul+0x19c>
    d386:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d38a:	f47f af0d 	bne.w	d1a8 <__aeabi_dmul+0x234>
    d38e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d392:	f47f aeeb 	bne.w	d16c <__aeabi_dmul+0x1f8>
    d396:	e712      	b.n	d1be <__aeabi_dmul+0x24a>

0000d398 <__aeabi_d2uiz>:
    d398:	004a      	lsls	r2, r1, #1
    d39a:	d211      	bcs.n	d3c0 <__aeabi_d2uiz+0x28>
    d39c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d3a0:	d211      	bcs.n	d3c6 <__aeabi_d2uiz+0x2e>
    d3a2:	d50d      	bpl.n	d3c0 <__aeabi_d2uiz+0x28>
    d3a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d3a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d3ac:	d40e      	bmi.n	d3cc <__aeabi_d2uiz+0x34>
    d3ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d3b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d3b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d3ba:	fa23 f002 	lsr.w	r0, r3, r2
    d3be:	4770      	bx	lr
    d3c0:	f04f 0000 	mov.w	r0, #0
    d3c4:	4770      	bx	lr
    d3c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d3ca:	d102      	bne.n	d3d2 <__aeabi_d2uiz+0x3a>
    d3cc:	f04f 30ff 	mov.w	r0, #4294967295
    d3d0:	4770      	bx	lr
    d3d2:	f04f 0000 	mov.w	r0, #0
    d3d6:	4770      	bx	lr

0000d3d8 <__libc_init_array>:
    d3d8:	b570      	push	{r4, r5, r6, lr}
    d3da:	4e0d      	ldr	r6, [pc, #52]	; (d410 <__libc_init_array+0x38>)
    d3dc:	4c0d      	ldr	r4, [pc, #52]	; (d414 <__libc_init_array+0x3c>)
    d3de:	1ba4      	subs	r4, r4, r6
    d3e0:	10a4      	asrs	r4, r4, #2
    d3e2:	2500      	movs	r5, #0
    d3e4:	42a5      	cmp	r5, r4
    d3e6:	d109      	bne.n	d3fc <__libc_init_array+0x24>
    d3e8:	4e0b      	ldr	r6, [pc, #44]	; (d418 <__libc_init_array+0x40>)
    d3ea:	4c0c      	ldr	r4, [pc, #48]	; (d41c <__libc_init_array+0x44>)
    d3ec:	f002 f95a 	bl	f6a4 <_init>
    d3f0:	1ba4      	subs	r4, r4, r6
    d3f2:	10a4      	asrs	r4, r4, #2
    d3f4:	2500      	movs	r5, #0
    d3f6:	42a5      	cmp	r5, r4
    d3f8:	d105      	bne.n	d406 <__libc_init_array+0x2e>
    d3fa:	bd70      	pop	{r4, r5, r6, pc}
    d3fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    d400:	4798      	blx	r3
    d402:	3501      	adds	r5, #1
    d404:	e7ee      	b.n	d3e4 <__libc_init_array+0xc>
    d406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    d40a:	4798      	blx	r3
    d40c:	3501      	adds	r5, #1
    d40e:	e7f2      	b.n	d3f6 <__libc_init_array+0x1e>
    d410:	0000f6b0 	.word	0x0000f6b0
    d414:	0000f6b0 	.word	0x0000f6b0
    d418:	0000f6b0 	.word	0x0000f6b0
    d41c:	0000f6b4 	.word	0x0000f6b4

0000d420 <malloc>:
    d420:	4b02      	ldr	r3, [pc, #8]	; (d42c <malloc+0xc>)
    d422:	4601      	mov	r1, r0
    d424:	6818      	ldr	r0, [r3, #0]
    d426:	f000 b865 	b.w	d4f4 <_malloc_r>
    d42a:	bf00      	nop
    d42c:	20000548 	.word	0x20000548

0000d430 <memcpy>:
    d430:	b510      	push	{r4, lr}
    d432:	1e43      	subs	r3, r0, #1
    d434:	440a      	add	r2, r1
    d436:	4291      	cmp	r1, r2
    d438:	d100      	bne.n	d43c <memcpy+0xc>
    d43a:	bd10      	pop	{r4, pc}
    d43c:	f811 4b01 	ldrb.w	r4, [r1], #1
    d440:	f803 4f01 	strb.w	r4, [r3, #1]!
    d444:	e7f7      	b.n	d436 <memcpy+0x6>

0000d446 <memset>:
    d446:	4402      	add	r2, r0
    d448:	4603      	mov	r3, r0
    d44a:	4293      	cmp	r3, r2
    d44c:	d100      	bne.n	d450 <memset+0xa>
    d44e:	4770      	bx	lr
    d450:	f803 1b01 	strb.w	r1, [r3], #1
    d454:	e7f9      	b.n	d44a <memset+0x4>
	...

0000d458 <_free_r>:
    d458:	b538      	push	{r3, r4, r5, lr}
    d45a:	4605      	mov	r5, r0
    d45c:	2900      	cmp	r1, #0
    d45e:	d045      	beq.n	d4ec <_free_r+0x94>
    d460:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d464:	1f0c      	subs	r4, r1, #4
    d466:	2b00      	cmp	r3, #0
    d468:	bfb8      	it	lt
    d46a:	18e4      	addlt	r4, r4, r3
    d46c:	f000 fcae 	bl	ddcc <__malloc_lock>
    d470:	4a1f      	ldr	r2, [pc, #124]	; (d4f0 <_free_r+0x98>)
    d472:	6813      	ldr	r3, [r2, #0]
    d474:	4610      	mov	r0, r2
    d476:	b933      	cbnz	r3, d486 <_free_r+0x2e>
    d478:	6063      	str	r3, [r4, #4]
    d47a:	6014      	str	r4, [r2, #0]
    d47c:	4628      	mov	r0, r5
    d47e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d482:	f000 bca4 	b.w	ddce <__malloc_unlock>
    d486:	42a3      	cmp	r3, r4
    d488:	d90c      	bls.n	d4a4 <_free_r+0x4c>
    d48a:	6821      	ldr	r1, [r4, #0]
    d48c:	1862      	adds	r2, r4, r1
    d48e:	4293      	cmp	r3, r2
    d490:	bf04      	itt	eq
    d492:	681a      	ldreq	r2, [r3, #0]
    d494:	685b      	ldreq	r3, [r3, #4]
    d496:	6063      	str	r3, [r4, #4]
    d498:	bf04      	itt	eq
    d49a:	1852      	addeq	r2, r2, r1
    d49c:	6022      	streq	r2, [r4, #0]
    d49e:	6004      	str	r4, [r0, #0]
    d4a0:	e7ec      	b.n	d47c <_free_r+0x24>
    d4a2:	4613      	mov	r3, r2
    d4a4:	685a      	ldr	r2, [r3, #4]
    d4a6:	b10a      	cbz	r2, d4ac <_free_r+0x54>
    d4a8:	42a2      	cmp	r2, r4
    d4aa:	d9fa      	bls.n	d4a2 <_free_r+0x4a>
    d4ac:	6819      	ldr	r1, [r3, #0]
    d4ae:	1858      	adds	r0, r3, r1
    d4b0:	42a0      	cmp	r0, r4
    d4b2:	d10b      	bne.n	d4cc <_free_r+0x74>
    d4b4:	6820      	ldr	r0, [r4, #0]
    d4b6:	4401      	add	r1, r0
    d4b8:	1858      	adds	r0, r3, r1
    d4ba:	4282      	cmp	r2, r0
    d4bc:	6019      	str	r1, [r3, #0]
    d4be:	d1dd      	bne.n	d47c <_free_r+0x24>
    d4c0:	6810      	ldr	r0, [r2, #0]
    d4c2:	6852      	ldr	r2, [r2, #4]
    d4c4:	605a      	str	r2, [r3, #4]
    d4c6:	4401      	add	r1, r0
    d4c8:	6019      	str	r1, [r3, #0]
    d4ca:	e7d7      	b.n	d47c <_free_r+0x24>
    d4cc:	d902      	bls.n	d4d4 <_free_r+0x7c>
    d4ce:	230c      	movs	r3, #12
    d4d0:	602b      	str	r3, [r5, #0]
    d4d2:	e7d3      	b.n	d47c <_free_r+0x24>
    d4d4:	6820      	ldr	r0, [r4, #0]
    d4d6:	1821      	adds	r1, r4, r0
    d4d8:	428a      	cmp	r2, r1
    d4da:	bf04      	itt	eq
    d4dc:	6811      	ldreq	r1, [r2, #0]
    d4de:	6852      	ldreq	r2, [r2, #4]
    d4e0:	6062      	str	r2, [r4, #4]
    d4e2:	bf04      	itt	eq
    d4e4:	1809      	addeq	r1, r1, r0
    d4e6:	6021      	streq	r1, [r4, #0]
    d4e8:	605c      	str	r4, [r3, #4]
    d4ea:	e7c7      	b.n	d47c <_free_r+0x24>
    d4ec:	bd38      	pop	{r3, r4, r5, pc}
    d4ee:	bf00      	nop
    d4f0:	20000f3c 	.word	0x20000f3c

0000d4f4 <_malloc_r>:
    d4f4:	b570      	push	{r4, r5, r6, lr}
    d4f6:	1ccd      	adds	r5, r1, #3
    d4f8:	f025 0503 	bic.w	r5, r5, #3
    d4fc:	3508      	adds	r5, #8
    d4fe:	2d0c      	cmp	r5, #12
    d500:	bf38      	it	cc
    d502:	250c      	movcc	r5, #12
    d504:	2d00      	cmp	r5, #0
    d506:	4606      	mov	r6, r0
    d508:	db01      	blt.n	d50e <_malloc_r+0x1a>
    d50a:	42a9      	cmp	r1, r5
    d50c:	d903      	bls.n	d516 <_malloc_r+0x22>
    d50e:	230c      	movs	r3, #12
    d510:	6033      	str	r3, [r6, #0]
    d512:	2000      	movs	r0, #0
    d514:	bd70      	pop	{r4, r5, r6, pc}
    d516:	f000 fc59 	bl	ddcc <__malloc_lock>
    d51a:	4a23      	ldr	r2, [pc, #140]	; (d5a8 <_malloc_r+0xb4>)
    d51c:	6814      	ldr	r4, [r2, #0]
    d51e:	4621      	mov	r1, r4
    d520:	b991      	cbnz	r1, d548 <_malloc_r+0x54>
    d522:	4c22      	ldr	r4, [pc, #136]	; (d5ac <_malloc_r+0xb8>)
    d524:	6823      	ldr	r3, [r4, #0]
    d526:	b91b      	cbnz	r3, d530 <_malloc_r+0x3c>
    d528:	4630      	mov	r0, r6
    d52a:	f000 f8bd 	bl	d6a8 <_sbrk_r>
    d52e:	6020      	str	r0, [r4, #0]
    d530:	4629      	mov	r1, r5
    d532:	4630      	mov	r0, r6
    d534:	f000 f8b8 	bl	d6a8 <_sbrk_r>
    d538:	1c43      	adds	r3, r0, #1
    d53a:	d126      	bne.n	d58a <_malloc_r+0x96>
    d53c:	230c      	movs	r3, #12
    d53e:	6033      	str	r3, [r6, #0]
    d540:	4630      	mov	r0, r6
    d542:	f000 fc44 	bl	ddce <__malloc_unlock>
    d546:	e7e4      	b.n	d512 <_malloc_r+0x1e>
    d548:	680b      	ldr	r3, [r1, #0]
    d54a:	1b5b      	subs	r3, r3, r5
    d54c:	d41a      	bmi.n	d584 <_malloc_r+0x90>
    d54e:	2b0b      	cmp	r3, #11
    d550:	d90f      	bls.n	d572 <_malloc_r+0x7e>
    d552:	600b      	str	r3, [r1, #0]
    d554:	50cd      	str	r5, [r1, r3]
    d556:	18cc      	adds	r4, r1, r3
    d558:	4630      	mov	r0, r6
    d55a:	f000 fc38 	bl	ddce <__malloc_unlock>
    d55e:	f104 000b 	add.w	r0, r4, #11
    d562:	1d23      	adds	r3, r4, #4
    d564:	f020 0007 	bic.w	r0, r0, #7
    d568:	1ac3      	subs	r3, r0, r3
    d56a:	d01b      	beq.n	d5a4 <_malloc_r+0xb0>
    d56c:	425a      	negs	r2, r3
    d56e:	50e2      	str	r2, [r4, r3]
    d570:	bd70      	pop	{r4, r5, r6, pc}
    d572:	428c      	cmp	r4, r1
    d574:	bf0d      	iteet	eq
    d576:	6863      	ldreq	r3, [r4, #4]
    d578:	684b      	ldrne	r3, [r1, #4]
    d57a:	6063      	strne	r3, [r4, #4]
    d57c:	6013      	streq	r3, [r2, #0]
    d57e:	bf18      	it	ne
    d580:	460c      	movne	r4, r1
    d582:	e7e9      	b.n	d558 <_malloc_r+0x64>
    d584:	460c      	mov	r4, r1
    d586:	6849      	ldr	r1, [r1, #4]
    d588:	e7ca      	b.n	d520 <_malloc_r+0x2c>
    d58a:	1cc4      	adds	r4, r0, #3
    d58c:	f024 0403 	bic.w	r4, r4, #3
    d590:	42a0      	cmp	r0, r4
    d592:	d005      	beq.n	d5a0 <_malloc_r+0xac>
    d594:	1a21      	subs	r1, r4, r0
    d596:	4630      	mov	r0, r6
    d598:	f000 f886 	bl	d6a8 <_sbrk_r>
    d59c:	3001      	adds	r0, #1
    d59e:	d0cd      	beq.n	d53c <_malloc_r+0x48>
    d5a0:	6025      	str	r5, [r4, #0]
    d5a2:	e7d9      	b.n	d558 <_malloc_r+0x64>
    d5a4:	bd70      	pop	{r4, r5, r6, pc}
    d5a6:	bf00      	nop
    d5a8:	20000f3c 	.word	0x20000f3c
    d5ac:	20000f40 	.word	0x20000f40

0000d5b0 <iprintf>:
    d5b0:	b40f      	push	{r0, r1, r2, r3}
    d5b2:	4b0a      	ldr	r3, [pc, #40]	; (d5dc <iprintf+0x2c>)
    d5b4:	b513      	push	{r0, r1, r4, lr}
    d5b6:	681c      	ldr	r4, [r3, #0]
    d5b8:	b124      	cbz	r4, d5c4 <iprintf+0x14>
    d5ba:	69a3      	ldr	r3, [r4, #24]
    d5bc:	b913      	cbnz	r3, d5c4 <iprintf+0x14>
    d5be:	4620      	mov	r0, r4
    d5c0:	f000 fb16 	bl	dbf0 <__sinit>
    d5c4:	ab05      	add	r3, sp, #20
    d5c6:	9a04      	ldr	r2, [sp, #16]
    d5c8:	68a1      	ldr	r1, [r4, #8]
    d5ca:	9301      	str	r3, [sp, #4]
    d5cc:	4620      	mov	r0, r4
    d5ce:	f000 fd77 	bl	e0c0 <_vfiprintf_r>
    d5d2:	b002      	add	sp, #8
    d5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5d8:	b004      	add	sp, #16
    d5da:	4770      	bx	lr
    d5dc:	20000548 	.word	0x20000548

0000d5e0 <_puts_r>:
    d5e0:	b570      	push	{r4, r5, r6, lr}
    d5e2:	460e      	mov	r6, r1
    d5e4:	4605      	mov	r5, r0
    d5e6:	b118      	cbz	r0, d5f0 <_puts_r+0x10>
    d5e8:	6983      	ldr	r3, [r0, #24]
    d5ea:	b90b      	cbnz	r3, d5f0 <_puts_r+0x10>
    d5ec:	f000 fb00 	bl	dbf0 <__sinit>
    d5f0:	69ab      	ldr	r3, [r5, #24]
    d5f2:	68ac      	ldr	r4, [r5, #8]
    d5f4:	b913      	cbnz	r3, d5fc <_puts_r+0x1c>
    d5f6:	4628      	mov	r0, r5
    d5f8:	f000 fafa 	bl	dbf0 <__sinit>
    d5fc:	4b23      	ldr	r3, [pc, #140]	; (d68c <_puts_r+0xac>)
    d5fe:	429c      	cmp	r4, r3
    d600:	d117      	bne.n	d632 <_puts_r+0x52>
    d602:	686c      	ldr	r4, [r5, #4]
    d604:	89a3      	ldrh	r3, [r4, #12]
    d606:	071b      	lsls	r3, r3, #28
    d608:	d51d      	bpl.n	d646 <_puts_r+0x66>
    d60a:	6923      	ldr	r3, [r4, #16]
    d60c:	b1db      	cbz	r3, d646 <_puts_r+0x66>
    d60e:	3e01      	subs	r6, #1
    d610:	68a3      	ldr	r3, [r4, #8]
    d612:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    d616:	3b01      	subs	r3, #1
    d618:	60a3      	str	r3, [r4, #8]
    d61a:	b9e9      	cbnz	r1, d658 <_puts_r+0x78>
    d61c:	2b00      	cmp	r3, #0
    d61e:	da2e      	bge.n	d67e <_puts_r+0x9e>
    d620:	4622      	mov	r2, r4
    d622:	210a      	movs	r1, #10
    d624:	4628      	mov	r0, r5
    d626:	f000 f931 	bl	d88c <__swbuf_r>
    d62a:	3001      	adds	r0, #1
    d62c:	d011      	beq.n	d652 <_puts_r+0x72>
    d62e:	200a      	movs	r0, #10
    d630:	bd70      	pop	{r4, r5, r6, pc}
    d632:	4b17      	ldr	r3, [pc, #92]	; (d690 <_puts_r+0xb0>)
    d634:	429c      	cmp	r4, r3
    d636:	d101      	bne.n	d63c <_puts_r+0x5c>
    d638:	68ac      	ldr	r4, [r5, #8]
    d63a:	e7e3      	b.n	d604 <_puts_r+0x24>
    d63c:	4b15      	ldr	r3, [pc, #84]	; (d694 <_puts_r+0xb4>)
    d63e:	429c      	cmp	r4, r3
    d640:	bf08      	it	eq
    d642:	68ec      	ldreq	r4, [r5, #12]
    d644:	e7de      	b.n	d604 <_puts_r+0x24>
    d646:	4621      	mov	r1, r4
    d648:	4628      	mov	r0, r5
    d64a:	f000 f971 	bl	d930 <__swsetup_r>
    d64e:	2800      	cmp	r0, #0
    d650:	d0dd      	beq.n	d60e <_puts_r+0x2e>
    d652:	f04f 30ff 	mov.w	r0, #4294967295
    d656:	bd70      	pop	{r4, r5, r6, pc}
    d658:	2b00      	cmp	r3, #0
    d65a:	da04      	bge.n	d666 <_puts_r+0x86>
    d65c:	69a2      	ldr	r2, [r4, #24]
    d65e:	4293      	cmp	r3, r2
    d660:	db06      	blt.n	d670 <_puts_r+0x90>
    d662:	290a      	cmp	r1, #10
    d664:	d004      	beq.n	d670 <_puts_r+0x90>
    d666:	6823      	ldr	r3, [r4, #0]
    d668:	1c5a      	adds	r2, r3, #1
    d66a:	6022      	str	r2, [r4, #0]
    d66c:	7019      	strb	r1, [r3, #0]
    d66e:	e7cf      	b.n	d610 <_puts_r+0x30>
    d670:	4622      	mov	r2, r4
    d672:	4628      	mov	r0, r5
    d674:	f000 f90a 	bl	d88c <__swbuf_r>
    d678:	3001      	adds	r0, #1
    d67a:	d1c9      	bne.n	d610 <_puts_r+0x30>
    d67c:	e7e9      	b.n	d652 <_puts_r+0x72>
    d67e:	6823      	ldr	r3, [r4, #0]
    d680:	200a      	movs	r0, #10
    d682:	1c5a      	adds	r2, r3, #1
    d684:	6022      	str	r2, [r4, #0]
    d686:	7018      	strb	r0, [r3, #0]
    d688:	bd70      	pop	{r4, r5, r6, pc}
    d68a:	bf00      	nop
    d68c:	0000f630 	.word	0x0000f630
    d690:	0000f650 	.word	0x0000f650
    d694:	0000f610 	.word	0x0000f610

0000d698 <puts>:
    d698:	4b02      	ldr	r3, [pc, #8]	; (d6a4 <puts+0xc>)
    d69a:	4601      	mov	r1, r0
    d69c:	6818      	ldr	r0, [r3, #0]
    d69e:	f7ff bf9f 	b.w	d5e0 <_puts_r>
    d6a2:	bf00      	nop
    d6a4:	20000548 	.word	0x20000548

0000d6a8 <_sbrk_r>:
    d6a8:	b538      	push	{r3, r4, r5, lr}
    d6aa:	4c06      	ldr	r4, [pc, #24]	; (d6c4 <_sbrk_r+0x1c>)
    d6ac:	2300      	movs	r3, #0
    d6ae:	4605      	mov	r5, r0
    d6b0:	4608      	mov	r0, r1
    d6b2:	6023      	str	r3, [r4, #0]
    d6b4:	f7f9 fecc 	bl	7450 <_sbrk>
    d6b8:	1c43      	adds	r3, r0, #1
    d6ba:	d102      	bne.n	d6c2 <_sbrk_r+0x1a>
    d6bc:	6823      	ldr	r3, [r4, #0]
    d6be:	b103      	cbz	r3, d6c2 <_sbrk_r+0x1a>
    d6c0:	602b      	str	r3, [r5, #0]
    d6c2:	bd38      	pop	{r3, r4, r5, pc}
    d6c4:	2000821c 	.word	0x2000821c

0000d6c8 <setbuf>:
    d6c8:	2900      	cmp	r1, #0
    d6ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d6ce:	bf0c      	ite	eq
    d6d0:	2202      	moveq	r2, #2
    d6d2:	2200      	movne	r2, #0
    d6d4:	f000 b800 	b.w	d6d8 <setvbuf>

0000d6d8 <setvbuf>:
    d6d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d6dc:	461d      	mov	r5, r3
    d6de:	4b51      	ldr	r3, [pc, #324]	; (d824 <setvbuf+0x14c>)
    d6e0:	681e      	ldr	r6, [r3, #0]
    d6e2:	4604      	mov	r4, r0
    d6e4:	460f      	mov	r7, r1
    d6e6:	4690      	mov	r8, r2
    d6e8:	b126      	cbz	r6, d6f4 <setvbuf+0x1c>
    d6ea:	69b3      	ldr	r3, [r6, #24]
    d6ec:	b913      	cbnz	r3, d6f4 <setvbuf+0x1c>
    d6ee:	4630      	mov	r0, r6
    d6f0:	f000 fa7e 	bl	dbf0 <__sinit>
    d6f4:	4b4c      	ldr	r3, [pc, #304]	; (d828 <setvbuf+0x150>)
    d6f6:	429c      	cmp	r4, r3
    d6f8:	d152      	bne.n	d7a0 <setvbuf+0xc8>
    d6fa:	6874      	ldr	r4, [r6, #4]
    d6fc:	f1b8 0f02 	cmp.w	r8, #2
    d700:	d006      	beq.n	d710 <setvbuf+0x38>
    d702:	f1b8 0f01 	cmp.w	r8, #1
    d706:	f200 8089 	bhi.w	d81c <setvbuf+0x144>
    d70a:	2d00      	cmp	r5, #0
    d70c:	f2c0 8086 	blt.w	d81c <setvbuf+0x144>
    d710:	4621      	mov	r1, r4
    d712:	4630      	mov	r0, r6
    d714:	f000 fa02 	bl	db1c <_fflush_r>
    d718:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d71a:	b141      	cbz	r1, d72e <setvbuf+0x56>
    d71c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d720:	4299      	cmp	r1, r3
    d722:	d002      	beq.n	d72a <setvbuf+0x52>
    d724:	4630      	mov	r0, r6
    d726:	f7ff fe97 	bl	d458 <_free_r>
    d72a:	2300      	movs	r3, #0
    d72c:	6363      	str	r3, [r4, #52]	; 0x34
    d72e:	2300      	movs	r3, #0
    d730:	61a3      	str	r3, [r4, #24]
    d732:	6063      	str	r3, [r4, #4]
    d734:	89a3      	ldrh	r3, [r4, #12]
    d736:	061b      	lsls	r3, r3, #24
    d738:	d503      	bpl.n	d742 <setvbuf+0x6a>
    d73a:	6921      	ldr	r1, [r4, #16]
    d73c:	4630      	mov	r0, r6
    d73e:	f7ff fe8b 	bl	d458 <_free_r>
    d742:	89a3      	ldrh	r3, [r4, #12]
    d744:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    d748:	f023 0303 	bic.w	r3, r3, #3
    d74c:	f1b8 0f02 	cmp.w	r8, #2
    d750:	81a3      	strh	r3, [r4, #12]
    d752:	d05d      	beq.n	d810 <setvbuf+0x138>
    d754:	ab01      	add	r3, sp, #4
    d756:	466a      	mov	r2, sp
    d758:	4621      	mov	r1, r4
    d75a:	4630      	mov	r0, r6
    d75c:	f000 fad2 	bl	dd04 <__swhatbuf_r>
    d760:	89a3      	ldrh	r3, [r4, #12]
    d762:	4318      	orrs	r0, r3
    d764:	81a0      	strh	r0, [r4, #12]
    d766:	bb2d      	cbnz	r5, d7b4 <setvbuf+0xdc>
    d768:	9d00      	ldr	r5, [sp, #0]
    d76a:	4628      	mov	r0, r5
    d76c:	f7ff fe58 	bl	d420 <malloc>
    d770:	4607      	mov	r7, r0
    d772:	2800      	cmp	r0, #0
    d774:	d14e      	bne.n	d814 <setvbuf+0x13c>
    d776:	f8dd 9000 	ldr.w	r9, [sp]
    d77a:	45a9      	cmp	r9, r5
    d77c:	d13c      	bne.n	d7f8 <setvbuf+0x120>
    d77e:	f04f 30ff 	mov.w	r0, #4294967295
    d782:	89a3      	ldrh	r3, [r4, #12]
    d784:	f043 0302 	orr.w	r3, r3, #2
    d788:	81a3      	strh	r3, [r4, #12]
    d78a:	2300      	movs	r3, #0
    d78c:	60a3      	str	r3, [r4, #8]
    d78e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    d792:	6023      	str	r3, [r4, #0]
    d794:	6123      	str	r3, [r4, #16]
    d796:	2301      	movs	r3, #1
    d798:	6163      	str	r3, [r4, #20]
    d79a:	b003      	add	sp, #12
    d79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d7a0:	4b22      	ldr	r3, [pc, #136]	; (d82c <setvbuf+0x154>)
    d7a2:	429c      	cmp	r4, r3
    d7a4:	d101      	bne.n	d7aa <setvbuf+0xd2>
    d7a6:	68b4      	ldr	r4, [r6, #8]
    d7a8:	e7a8      	b.n	d6fc <setvbuf+0x24>
    d7aa:	4b21      	ldr	r3, [pc, #132]	; (d830 <setvbuf+0x158>)
    d7ac:	429c      	cmp	r4, r3
    d7ae:	bf08      	it	eq
    d7b0:	68f4      	ldreq	r4, [r6, #12]
    d7b2:	e7a3      	b.n	d6fc <setvbuf+0x24>
    d7b4:	2f00      	cmp	r7, #0
    d7b6:	d0d8      	beq.n	d76a <setvbuf+0x92>
    d7b8:	69b3      	ldr	r3, [r6, #24]
    d7ba:	b913      	cbnz	r3, d7c2 <setvbuf+0xea>
    d7bc:	4630      	mov	r0, r6
    d7be:	f000 fa17 	bl	dbf0 <__sinit>
    d7c2:	f1b8 0f01 	cmp.w	r8, #1
    d7c6:	bf08      	it	eq
    d7c8:	89a3      	ldrheq	r3, [r4, #12]
    d7ca:	6027      	str	r7, [r4, #0]
    d7cc:	bf04      	itt	eq
    d7ce:	f043 0301 	orreq.w	r3, r3, #1
    d7d2:	81a3      	strheq	r3, [r4, #12]
    d7d4:	89a3      	ldrh	r3, [r4, #12]
    d7d6:	6127      	str	r7, [r4, #16]
    d7d8:	f013 0008 	ands.w	r0, r3, #8
    d7dc:	6165      	str	r5, [r4, #20]
    d7de:	d01b      	beq.n	d818 <setvbuf+0x140>
    d7e0:	f013 0001 	ands.w	r0, r3, #1
    d7e4:	bf18      	it	ne
    d7e6:	426d      	negne	r5, r5
    d7e8:	f04f 0300 	mov.w	r3, #0
    d7ec:	bf1d      	ittte	ne
    d7ee:	60a3      	strne	r3, [r4, #8]
    d7f0:	61a5      	strne	r5, [r4, #24]
    d7f2:	4618      	movne	r0, r3
    d7f4:	60a5      	streq	r5, [r4, #8]
    d7f6:	e7d0      	b.n	d79a <setvbuf+0xc2>
    d7f8:	4648      	mov	r0, r9
    d7fa:	f7ff fe11 	bl	d420 <malloc>
    d7fe:	4607      	mov	r7, r0
    d800:	2800      	cmp	r0, #0
    d802:	d0bc      	beq.n	d77e <setvbuf+0xa6>
    d804:	89a3      	ldrh	r3, [r4, #12]
    d806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d80a:	81a3      	strh	r3, [r4, #12]
    d80c:	464d      	mov	r5, r9
    d80e:	e7d3      	b.n	d7b8 <setvbuf+0xe0>
    d810:	2000      	movs	r0, #0
    d812:	e7b6      	b.n	d782 <setvbuf+0xaa>
    d814:	46a9      	mov	r9, r5
    d816:	e7f5      	b.n	d804 <setvbuf+0x12c>
    d818:	60a0      	str	r0, [r4, #8]
    d81a:	e7be      	b.n	d79a <setvbuf+0xc2>
    d81c:	f04f 30ff 	mov.w	r0, #4294967295
    d820:	e7bb      	b.n	d79a <setvbuf+0xc2>
    d822:	bf00      	nop
    d824:	20000548 	.word	0x20000548
    d828:	0000f630 	.word	0x0000f630
    d82c:	0000f650 	.word	0x0000f650
    d830:	0000f610 	.word	0x0000f610

0000d834 <siprintf>:
    d834:	b40e      	push	{r1, r2, r3}
    d836:	b500      	push	{lr}
    d838:	b09c      	sub	sp, #112	; 0x70
    d83a:	f44f 7102 	mov.w	r1, #520	; 0x208
    d83e:	ab1d      	add	r3, sp, #116	; 0x74
    d840:	f8ad 1014 	strh.w	r1, [sp, #20]
    d844:	9002      	str	r0, [sp, #8]
    d846:	9006      	str	r0, [sp, #24]
    d848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d84c:	480a      	ldr	r0, [pc, #40]	; (d878 <siprintf+0x44>)
    d84e:	9104      	str	r1, [sp, #16]
    d850:	9107      	str	r1, [sp, #28]
    d852:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d856:	f853 2b04 	ldr.w	r2, [r3], #4
    d85a:	f8ad 1016 	strh.w	r1, [sp, #22]
    d85e:	6800      	ldr	r0, [r0, #0]
    d860:	9301      	str	r3, [sp, #4]
    d862:	a902      	add	r1, sp, #8
    d864:	f000 fb10 	bl	de88 <_svfiprintf_r>
    d868:	9b02      	ldr	r3, [sp, #8]
    d86a:	2200      	movs	r2, #0
    d86c:	701a      	strb	r2, [r3, #0]
    d86e:	b01c      	add	sp, #112	; 0x70
    d870:	f85d eb04 	ldr.w	lr, [sp], #4
    d874:	b003      	add	sp, #12
    d876:	4770      	bx	lr
    d878:	20000548 	.word	0x20000548

0000d87c <strlen>:
    d87c:	4603      	mov	r3, r0
    d87e:	f813 2b01 	ldrb.w	r2, [r3], #1
    d882:	2a00      	cmp	r2, #0
    d884:	d1fb      	bne.n	d87e <strlen+0x2>
    d886:	1a18      	subs	r0, r3, r0
    d888:	3801      	subs	r0, #1
    d88a:	4770      	bx	lr

0000d88c <__swbuf_r>:
    d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d88e:	460e      	mov	r6, r1
    d890:	4614      	mov	r4, r2
    d892:	4605      	mov	r5, r0
    d894:	b118      	cbz	r0, d89e <__swbuf_r+0x12>
    d896:	6983      	ldr	r3, [r0, #24]
    d898:	b90b      	cbnz	r3, d89e <__swbuf_r+0x12>
    d89a:	f000 f9a9 	bl	dbf0 <__sinit>
    d89e:	4b21      	ldr	r3, [pc, #132]	; (d924 <__swbuf_r+0x98>)
    d8a0:	429c      	cmp	r4, r3
    d8a2:	d12a      	bne.n	d8fa <__swbuf_r+0x6e>
    d8a4:	686c      	ldr	r4, [r5, #4]
    d8a6:	69a3      	ldr	r3, [r4, #24]
    d8a8:	60a3      	str	r3, [r4, #8]
    d8aa:	89a3      	ldrh	r3, [r4, #12]
    d8ac:	071a      	lsls	r2, r3, #28
    d8ae:	d52e      	bpl.n	d90e <__swbuf_r+0x82>
    d8b0:	6923      	ldr	r3, [r4, #16]
    d8b2:	b363      	cbz	r3, d90e <__swbuf_r+0x82>
    d8b4:	6923      	ldr	r3, [r4, #16]
    d8b6:	6820      	ldr	r0, [r4, #0]
    d8b8:	1ac0      	subs	r0, r0, r3
    d8ba:	6963      	ldr	r3, [r4, #20]
    d8bc:	b2f6      	uxtb	r6, r6
    d8be:	4298      	cmp	r0, r3
    d8c0:	4637      	mov	r7, r6
    d8c2:	db04      	blt.n	d8ce <__swbuf_r+0x42>
    d8c4:	4621      	mov	r1, r4
    d8c6:	4628      	mov	r0, r5
    d8c8:	f000 f928 	bl	db1c <_fflush_r>
    d8cc:	bb28      	cbnz	r0, d91a <__swbuf_r+0x8e>
    d8ce:	68a3      	ldr	r3, [r4, #8]
    d8d0:	3b01      	subs	r3, #1
    d8d2:	60a3      	str	r3, [r4, #8]
    d8d4:	6823      	ldr	r3, [r4, #0]
    d8d6:	1c5a      	adds	r2, r3, #1
    d8d8:	6022      	str	r2, [r4, #0]
    d8da:	701e      	strb	r6, [r3, #0]
    d8dc:	6963      	ldr	r3, [r4, #20]
    d8de:	3001      	adds	r0, #1
    d8e0:	4298      	cmp	r0, r3
    d8e2:	d004      	beq.n	d8ee <__swbuf_r+0x62>
    d8e4:	89a3      	ldrh	r3, [r4, #12]
    d8e6:	07db      	lsls	r3, r3, #31
    d8e8:	d519      	bpl.n	d91e <__swbuf_r+0x92>
    d8ea:	2e0a      	cmp	r6, #10
    d8ec:	d117      	bne.n	d91e <__swbuf_r+0x92>
    d8ee:	4621      	mov	r1, r4
    d8f0:	4628      	mov	r0, r5
    d8f2:	f000 f913 	bl	db1c <_fflush_r>
    d8f6:	b190      	cbz	r0, d91e <__swbuf_r+0x92>
    d8f8:	e00f      	b.n	d91a <__swbuf_r+0x8e>
    d8fa:	4b0b      	ldr	r3, [pc, #44]	; (d928 <__swbuf_r+0x9c>)
    d8fc:	429c      	cmp	r4, r3
    d8fe:	d101      	bne.n	d904 <__swbuf_r+0x78>
    d900:	68ac      	ldr	r4, [r5, #8]
    d902:	e7d0      	b.n	d8a6 <__swbuf_r+0x1a>
    d904:	4b09      	ldr	r3, [pc, #36]	; (d92c <__swbuf_r+0xa0>)
    d906:	429c      	cmp	r4, r3
    d908:	bf08      	it	eq
    d90a:	68ec      	ldreq	r4, [r5, #12]
    d90c:	e7cb      	b.n	d8a6 <__swbuf_r+0x1a>
    d90e:	4621      	mov	r1, r4
    d910:	4628      	mov	r0, r5
    d912:	f000 f80d 	bl	d930 <__swsetup_r>
    d916:	2800      	cmp	r0, #0
    d918:	d0cc      	beq.n	d8b4 <__swbuf_r+0x28>
    d91a:	f04f 37ff 	mov.w	r7, #4294967295
    d91e:	4638      	mov	r0, r7
    d920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d922:	bf00      	nop
    d924:	0000f630 	.word	0x0000f630
    d928:	0000f650 	.word	0x0000f650
    d92c:	0000f610 	.word	0x0000f610

0000d930 <__swsetup_r>:
    d930:	4b32      	ldr	r3, [pc, #200]	; (d9fc <__swsetup_r+0xcc>)
    d932:	b570      	push	{r4, r5, r6, lr}
    d934:	681d      	ldr	r5, [r3, #0]
    d936:	4606      	mov	r6, r0
    d938:	460c      	mov	r4, r1
    d93a:	b125      	cbz	r5, d946 <__swsetup_r+0x16>
    d93c:	69ab      	ldr	r3, [r5, #24]
    d93e:	b913      	cbnz	r3, d946 <__swsetup_r+0x16>
    d940:	4628      	mov	r0, r5
    d942:	f000 f955 	bl	dbf0 <__sinit>
    d946:	4b2e      	ldr	r3, [pc, #184]	; (da00 <__swsetup_r+0xd0>)
    d948:	429c      	cmp	r4, r3
    d94a:	d10f      	bne.n	d96c <__swsetup_r+0x3c>
    d94c:	686c      	ldr	r4, [r5, #4]
    d94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d952:	b29a      	uxth	r2, r3
    d954:	0715      	lsls	r5, r2, #28
    d956:	d42c      	bmi.n	d9b2 <__swsetup_r+0x82>
    d958:	06d0      	lsls	r0, r2, #27
    d95a:	d411      	bmi.n	d980 <__swsetup_r+0x50>
    d95c:	2209      	movs	r2, #9
    d95e:	6032      	str	r2, [r6, #0]
    d960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d964:	81a3      	strh	r3, [r4, #12]
    d966:	f04f 30ff 	mov.w	r0, #4294967295
    d96a:	bd70      	pop	{r4, r5, r6, pc}
    d96c:	4b25      	ldr	r3, [pc, #148]	; (da04 <__swsetup_r+0xd4>)
    d96e:	429c      	cmp	r4, r3
    d970:	d101      	bne.n	d976 <__swsetup_r+0x46>
    d972:	68ac      	ldr	r4, [r5, #8]
    d974:	e7eb      	b.n	d94e <__swsetup_r+0x1e>
    d976:	4b24      	ldr	r3, [pc, #144]	; (da08 <__swsetup_r+0xd8>)
    d978:	429c      	cmp	r4, r3
    d97a:	bf08      	it	eq
    d97c:	68ec      	ldreq	r4, [r5, #12]
    d97e:	e7e6      	b.n	d94e <__swsetup_r+0x1e>
    d980:	0751      	lsls	r1, r2, #29
    d982:	d512      	bpl.n	d9aa <__swsetup_r+0x7a>
    d984:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d986:	b141      	cbz	r1, d99a <__swsetup_r+0x6a>
    d988:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d98c:	4299      	cmp	r1, r3
    d98e:	d002      	beq.n	d996 <__swsetup_r+0x66>
    d990:	4630      	mov	r0, r6
    d992:	f7ff fd61 	bl	d458 <_free_r>
    d996:	2300      	movs	r3, #0
    d998:	6363      	str	r3, [r4, #52]	; 0x34
    d99a:	89a3      	ldrh	r3, [r4, #12]
    d99c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    d9a0:	81a3      	strh	r3, [r4, #12]
    d9a2:	2300      	movs	r3, #0
    d9a4:	6063      	str	r3, [r4, #4]
    d9a6:	6923      	ldr	r3, [r4, #16]
    d9a8:	6023      	str	r3, [r4, #0]
    d9aa:	89a3      	ldrh	r3, [r4, #12]
    d9ac:	f043 0308 	orr.w	r3, r3, #8
    d9b0:	81a3      	strh	r3, [r4, #12]
    d9b2:	6923      	ldr	r3, [r4, #16]
    d9b4:	b94b      	cbnz	r3, d9ca <__swsetup_r+0x9a>
    d9b6:	89a3      	ldrh	r3, [r4, #12]
    d9b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
    d9bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d9c0:	d003      	beq.n	d9ca <__swsetup_r+0x9a>
    d9c2:	4621      	mov	r1, r4
    d9c4:	4630      	mov	r0, r6
    d9c6:	f000 f9c1 	bl	dd4c <__smakebuf_r>
    d9ca:	89a2      	ldrh	r2, [r4, #12]
    d9cc:	f012 0301 	ands.w	r3, r2, #1
    d9d0:	d00c      	beq.n	d9ec <__swsetup_r+0xbc>
    d9d2:	2300      	movs	r3, #0
    d9d4:	60a3      	str	r3, [r4, #8]
    d9d6:	6963      	ldr	r3, [r4, #20]
    d9d8:	425b      	negs	r3, r3
    d9da:	61a3      	str	r3, [r4, #24]
    d9dc:	6923      	ldr	r3, [r4, #16]
    d9de:	b953      	cbnz	r3, d9f6 <__swsetup_r+0xc6>
    d9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d9e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    d9e8:	d1ba      	bne.n	d960 <__swsetup_r+0x30>
    d9ea:	bd70      	pop	{r4, r5, r6, pc}
    d9ec:	0792      	lsls	r2, r2, #30
    d9ee:	bf58      	it	pl
    d9f0:	6963      	ldrpl	r3, [r4, #20]
    d9f2:	60a3      	str	r3, [r4, #8]
    d9f4:	e7f2      	b.n	d9dc <__swsetup_r+0xac>
    d9f6:	2000      	movs	r0, #0
    d9f8:	e7f7      	b.n	d9ea <__swsetup_r+0xba>
    d9fa:	bf00      	nop
    d9fc:	20000548 	.word	0x20000548
    da00:	0000f630 	.word	0x0000f630
    da04:	0000f650 	.word	0x0000f650
    da08:	0000f610 	.word	0x0000f610

0000da0c <__sflush_r>:
    da0c:	898a      	ldrh	r2, [r1, #12]
    da0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da12:	4605      	mov	r5, r0
    da14:	0710      	lsls	r0, r2, #28
    da16:	460c      	mov	r4, r1
    da18:	d45a      	bmi.n	dad0 <__sflush_r+0xc4>
    da1a:	684b      	ldr	r3, [r1, #4]
    da1c:	2b00      	cmp	r3, #0
    da1e:	dc05      	bgt.n	da2c <__sflush_r+0x20>
    da20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    da22:	2b00      	cmp	r3, #0
    da24:	dc02      	bgt.n	da2c <__sflush_r+0x20>
    da26:	2000      	movs	r0, #0
    da28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    da2e:	2e00      	cmp	r6, #0
    da30:	d0f9      	beq.n	da26 <__sflush_r+0x1a>
    da32:	2300      	movs	r3, #0
    da34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    da38:	682f      	ldr	r7, [r5, #0]
    da3a:	602b      	str	r3, [r5, #0]
    da3c:	d033      	beq.n	daa6 <__sflush_r+0x9a>
    da3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    da40:	89a3      	ldrh	r3, [r4, #12]
    da42:	075a      	lsls	r2, r3, #29
    da44:	d505      	bpl.n	da52 <__sflush_r+0x46>
    da46:	6863      	ldr	r3, [r4, #4]
    da48:	1ac0      	subs	r0, r0, r3
    da4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    da4c:	b10b      	cbz	r3, da52 <__sflush_r+0x46>
    da4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    da50:	1ac0      	subs	r0, r0, r3
    da52:	2300      	movs	r3, #0
    da54:	4602      	mov	r2, r0
    da56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    da58:	6a21      	ldr	r1, [r4, #32]
    da5a:	4628      	mov	r0, r5
    da5c:	47b0      	blx	r6
    da5e:	1c43      	adds	r3, r0, #1
    da60:	89a3      	ldrh	r3, [r4, #12]
    da62:	d106      	bne.n	da72 <__sflush_r+0x66>
    da64:	6829      	ldr	r1, [r5, #0]
    da66:	291d      	cmp	r1, #29
    da68:	d84b      	bhi.n	db02 <__sflush_r+0xf6>
    da6a:	4a2b      	ldr	r2, [pc, #172]	; (db18 <__sflush_r+0x10c>)
    da6c:	40ca      	lsrs	r2, r1
    da6e:	07d6      	lsls	r6, r2, #31
    da70:	d547      	bpl.n	db02 <__sflush_r+0xf6>
    da72:	2200      	movs	r2, #0
    da74:	6062      	str	r2, [r4, #4]
    da76:	04d9      	lsls	r1, r3, #19
    da78:	6922      	ldr	r2, [r4, #16]
    da7a:	6022      	str	r2, [r4, #0]
    da7c:	d504      	bpl.n	da88 <__sflush_r+0x7c>
    da7e:	1c42      	adds	r2, r0, #1
    da80:	d101      	bne.n	da86 <__sflush_r+0x7a>
    da82:	682b      	ldr	r3, [r5, #0]
    da84:	b903      	cbnz	r3, da88 <__sflush_r+0x7c>
    da86:	6560      	str	r0, [r4, #84]	; 0x54
    da88:	6b61      	ldr	r1, [r4, #52]	; 0x34
    da8a:	602f      	str	r7, [r5, #0]
    da8c:	2900      	cmp	r1, #0
    da8e:	d0ca      	beq.n	da26 <__sflush_r+0x1a>
    da90:	f104 0344 	add.w	r3, r4, #68	; 0x44
    da94:	4299      	cmp	r1, r3
    da96:	d002      	beq.n	da9e <__sflush_r+0x92>
    da98:	4628      	mov	r0, r5
    da9a:	f7ff fcdd 	bl	d458 <_free_r>
    da9e:	2000      	movs	r0, #0
    daa0:	6360      	str	r0, [r4, #52]	; 0x34
    daa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    daa6:	6a21      	ldr	r1, [r4, #32]
    daa8:	2301      	movs	r3, #1
    daaa:	4628      	mov	r0, r5
    daac:	47b0      	blx	r6
    daae:	1c41      	adds	r1, r0, #1
    dab0:	d1c6      	bne.n	da40 <__sflush_r+0x34>
    dab2:	682b      	ldr	r3, [r5, #0]
    dab4:	2b00      	cmp	r3, #0
    dab6:	d0c3      	beq.n	da40 <__sflush_r+0x34>
    dab8:	2b1d      	cmp	r3, #29
    daba:	d001      	beq.n	dac0 <__sflush_r+0xb4>
    dabc:	2b16      	cmp	r3, #22
    dabe:	d101      	bne.n	dac4 <__sflush_r+0xb8>
    dac0:	602f      	str	r7, [r5, #0]
    dac2:	e7b0      	b.n	da26 <__sflush_r+0x1a>
    dac4:	89a3      	ldrh	r3, [r4, #12]
    dac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    daca:	81a3      	strh	r3, [r4, #12]
    dacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dad0:	690f      	ldr	r7, [r1, #16]
    dad2:	2f00      	cmp	r7, #0
    dad4:	d0a7      	beq.n	da26 <__sflush_r+0x1a>
    dad6:	0793      	lsls	r3, r2, #30
    dad8:	680e      	ldr	r6, [r1, #0]
    dada:	bf08      	it	eq
    dadc:	694b      	ldreq	r3, [r1, #20]
    dade:	600f      	str	r7, [r1, #0]
    dae0:	bf18      	it	ne
    dae2:	2300      	movne	r3, #0
    dae4:	eba6 0807 	sub.w	r8, r6, r7
    dae8:	608b      	str	r3, [r1, #8]
    daea:	f1b8 0f00 	cmp.w	r8, #0
    daee:	dd9a      	ble.n	da26 <__sflush_r+0x1a>
    daf0:	4643      	mov	r3, r8
    daf2:	463a      	mov	r2, r7
    daf4:	6a21      	ldr	r1, [r4, #32]
    daf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    daf8:	4628      	mov	r0, r5
    dafa:	47b0      	blx	r6
    dafc:	2800      	cmp	r0, #0
    dafe:	dc07      	bgt.n	db10 <__sflush_r+0x104>
    db00:	89a3      	ldrh	r3, [r4, #12]
    db02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    db06:	81a3      	strh	r3, [r4, #12]
    db08:	f04f 30ff 	mov.w	r0, #4294967295
    db0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db10:	4407      	add	r7, r0
    db12:	eba8 0800 	sub.w	r8, r8, r0
    db16:	e7e8      	b.n	daea <__sflush_r+0xde>
    db18:	20400001 	.word	0x20400001

0000db1c <_fflush_r>:
    db1c:	b538      	push	{r3, r4, r5, lr}
    db1e:	690b      	ldr	r3, [r1, #16]
    db20:	4605      	mov	r5, r0
    db22:	460c      	mov	r4, r1
    db24:	b1db      	cbz	r3, db5e <_fflush_r+0x42>
    db26:	b118      	cbz	r0, db30 <_fflush_r+0x14>
    db28:	6983      	ldr	r3, [r0, #24]
    db2a:	b90b      	cbnz	r3, db30 <_fflush_r+0x14>
    db2c:	f000 f860 	bl	dbf0 <__sinit>
    db30:	4b0c      	ldr	r3, [pc, #48]	; (db64 <_fflush_r+0x48>)
    db32:	429c      	cmp	r4, r3
    db34:	d109      	bne.n	db4a <_fflush_r+0x2e>
    db36:	686c      	ldr	r4, [r5, #4]
    db38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    db3c:	b17b      	cbz	r3, db5e <_fflush_r+0x42>
    db3e:	4621      	mov	r1, r4
    db40:	4628      	mov	r0, r5
    db42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    db46:	f7ff bf61 	b.w	da0c <__sflush_r>
    db4a:	4b07      	ldr	r3, [pc, #28]	; (db68 <_fflush_r+0x4c>)
    db4c:	429c      	cmp	r4, r3
    db4e:	d101      	bne.n	db54 <_fflush_r+0x38>
    db50:	68ac      	ldr	r4, [r5, #8]
    db52:	e7f1      	b.n	db38 <_fflush_r+0x1c>
    db54:	4b05      	ldr	r3, [pc, #20]	; (db6c <_fflush_r+0x50>)
    db56:	429c      	cmp	r4, r3
    db58:	bf08      	it	eq
    db5a:	68ec      	ldreq	r4, [r5, #12]
    db5c:	e7ec      	b.n	db38 <_fflush_r+0x1c>
    db5e:	2000      	movs	r0, #0
    db60:	bd38      	pop	{r3, r4, r5, pc}
    db62:	bf00      	nop
    db64:	0000f630 	.word	0x0000f630
    db68:	0000f650 	.word	0x0000f650
    db6c:	0000f610 	.word	0x0000f610

0000db70 <_cleanup_r>:
    db70:	4901      	ldr	r1, [pc, #4]	; (db78 <_cleanup_r+0x8>)
    db72:	f000 b8a9 	b.w	dcc8 <_fwalk_reent>
    db76:	bf00      	nop
    db78:	0000db1d 	.word	0x0000db1d

0000db7c <std.isra.0>:
    db7c:	2300      	movs	r3, #0
    db7e:	b510      	push	{r4, lr}
    db80:	4604      	mov	r4, r0
    db82:	6003      	str	r3, [r0, #0]
    db84:	6043      	str	r3, [r0, #4]
    db86:	6083      	str	r3, [r0, #8]
    db88:	8181      	strh	r1, [r0, #12]
    db8a:	6643      	str	r3, [r0, #100]	; 0x64
    db8c:	81c2      	strh	r2, [r0, #14]
    db8e:	6103      	str	r3, [r0, #16]
    db90:	6143      	str	r3, [r0, #20]
    db92:	6183      	str	r3, [r0, #24]
    db94:	4619      	mov	r1, r3
    db96:	2208      	movs	r2, #8
    db98:	305c      	adds	r0, #92	; 0x5c
    db9a:	f7ff fc54 	bl	d446 <memset>
    db9e:	4b05      	ldr	r3, [pc, #20]	; (dbb4 <std.isra.0+0x38>)
    dba0:	6263      	str	r3, [r4, #36]	; 0x24
    dba2:	4b05      	ldr	r3, [pc, #20]	; (dbb8 <std.isra.0+0x3c>)
    dba4:	62a3      	str	r3, [r4, #40]	; 0x28
    dba6:	4b05      	ldr	r3, [pc, #20]	; (dbbc <std.isra.0+0x40>)
    dba8:	62e3      	str	r3, [r4, #44]	; 0x2c
    dbaa:	4b05      	ldr	r3, [pc, #20]	; (dbc0 <std.isra.0+0x44>)
    dbac:	6224      	str	r4, [r4, #32]
    dbae:	6323      	str	r3, [r4, #48]	; 0x30
    dbb0:	bd10      	pop	{r4, pc}
    dbb2:	bf00      	nop
    dbb4:	0000e619 	.word	0x0000e619
    dbb8:	0000e63b 	.word	0x0000e63b
    dbbc:	0000e673 	.word	0x0000e673
    dbc0:	0000e697 	.word	0x0000e697

0000dbc4 <__sfmoreglue>:
    dbc4:	b570      	push	{r4, r5, r6, lr}
    dbc6:	1e4a      	subs	r2, r1, #1
    dbc8:	2568      	movs	r5, #104	; 0x68
    dbca:	4355      	muls	r5, r2
    dbcc:	460e      	mov	r6, r1
    dbce:	f105 0174 	add.w	r1, r5, #116	; 0x74
    dbd2:	f7ff fc8f 	bl	d4f4 <_malloc_r>
    dbd6:	4604      	mov	r4, r0
    dbd8:	b140      	cbz	r0, dbec <__sfmoreglue+0x28>
    dbda:	2100      	movs	r1, #0
    dbdc:	e880 0042 	stmia.w	r0, {r1, r6}
    dbe0:	300c      	adds	r0, #12
    dbe2:	60a0      	str	r0, [r4, #8]
    dbe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
    dbe8:	f7ff fc2d 	bl	d446 <memset>
    dbec:	4620      	mov	r0, r4
    dbee:	bd70      	pop	{r4, r5, r6, pc}

0000dbf0 <__sinit>:
    dbf0:	6983      	ldr	r3, [r0, #24]
    dbf2:	b510      	push	{r4, lr}
    dbf4:	4604      	mov	r4, r0
    dbf6:	bb33      	cbnz	r3, dc46 <__sinit+0x56>
    dbf8:	6483      	str	r3, [r0, #72]	; 0x48
    dbfa:	64c3      	str	r3, [r0, #76]	; 0x4c
    dbfc:	6503      	str	r3, [r0, #80]	; 0x50
    dbfe:	4b12      	ldr	r3, [pc, #72]	; (dc48 <__sinit+0x58>)
    dc00:	4a12      	ldr	r2, [pc, #72]	; (dc4c <__sinit+0x5c>)
    dc02:	681b      	ldr	r3, [r3, #0]
    dc04:	6282      	str	r2, [r0, #40]	; 0x28
    dc06:	4298      	cmp	r0, r3
    dc08:	bf04      	itt	eq
    dc0a:	2301      	moveq	r3, #1
    dc0c:	6183      	streq	r3, [r0, #24]
    dc0e:	f000 f81f 	bl	dc50 <__sfp>
    dc12:	6060      	str	r0, [r4, #4]
    dc14:	4620      	mov	r0, r4
    dc16:	f000 f81b 	bl	dc50 <__sfp>
    dc1a:	60a0      	str	r0, [r4, #8]
    dc1c:	4620      	mov	r0, r4
    dc1e:	f000 f817 	bl	dc50 <__sfp>
    dc22:	2200      	movs	r2, #0
    dc24:	60e0      	str	r0, [r4, #12]
    dc26:	2104      	movs	r1, #4
    dc28:	6860      	ldr	r0, [r4, #4]
    dc2a:	f7ff ffa7 	bl	db7c <std.isra.0>
    dc2e:	2201      	movs	r2, #1
    dc30:	2109      	movs	r1, #9
    dc32:	68a0      	ldr	r0, [r4, #8]
    dc34:	f7ff ffa2 	bl	db7c <std.isra.0>
    dc38:	2202      	movs	r2, #2
    dc3a:	2112      	movs	r1, #18
    dc3c:	68e0      	ldr	r0, [r4, #12]
    dc3e:	f7ff ff9d 	bl	db7c <std.isra.0>
    dc42:	2301      	movs	r3, #1
    dc44:	61a3      	str	r3, [r4, #24]
    dc46:	bd10      	pop	{r4, pc}
    dc48:	0000f60c 	.word	0x0000f60c
    dc4c:	0000db71 	.word	0x0000db71

0000dc50 <__sfp>:
    dc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc52:	4b1c      	ldr	r3, [pc, #112]	; (dcc4 <__sfp+0x74>)
    dc54:	681e      	ldr	r6, [r3, #0]
    dc56:	69b3      	ldr	r3, [r6, #24]
    dc58:	4607      	mov	r7, r0
    dc5a:	b913      	cbnz	r3, dc62 <__sfp+0x12>
    dc5c:	4630      	mov	r0, r6
    dc5e:	f7ff ffc7 	bl	dbf0 <__sinit>
    dc62:	3648      	adds	r6, #72	; 0x48
    dc64:	68b4      	ldr	r4, [r6, #8]
    dc66:	6873      	ldr	r3, [r6, #4]
    dc68:	3b01      	subs	r3, #1
    dc6a:	d503      	bpl.n	dc74 <__sfp+0x24>
    dc6c:	6833      	ldr	r3, [r6, #0]
    dc6e:	b133      	cbz	r3, dc7e <__sfp+0x2e>
    dc70:	6836      	ldr	r6, [r6, #0]
    dc72:	e7f7      	b.n	dc64 <__sfp+0x14>
    dc74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    dc78:	b16d      	cbz	r5, dc96 <__sfp+0x46>
    dc7a:	3468      	adds	r4, #104	; 0x68
    dc7c:	e7f4      	b.n	dc68 <__sfp+0x18>
    dc7e:	2104      	movs	r1, #4
    dc80:	4638      	mov	r0, r7
    dc82:	f7ff ff9f 	bl	dbc4 <__sfmoreglue>
    dc86:	6030      	str	r0, [r6, #0]
    dc88:	2800      	cmp	r0, #0
    dc8a:	d1f1      	bne.n	dc70 <__sfp+0x20>
    dc8c:	230c      	movs	r3, #12
    dc8e:	603b      	str	r3, [r7, #0]
    dc90:	4604      	mov	r4, r0
    dc92:	4620      	mov	r0, r4
    dc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc96:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dc9a:	81e3      	strh	r3, [r4, #14]
    dc9c:	2301      	movs	r3, #1
    dc9e:	81a3      	strh	r3, [r4, #12]
    dca0:	6665      	str	r5, [r4, #100]	; 0x64
    dca2:	6025      	str	r5, [r4, #0]
    dca4:	60a5      	str	r5, [r4, #8]
    dca6:	6065      	str	r5, [r4, #4]
    dca8:	6125      	str	r5, [r4, #16]
    dcaa:	6165      	str	r5, [r4, #20]
    dcac:	61a5      	str	r5, [r4, #24]
    dcae:	2208      	movs	r2, #8
    dcb0:	4629      	mov	r1, r5
    dcb2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    dcb6:	f7ff fbc6 	bl	d446 <memset>
    dcba:	6365      	str	r5, [r4, #52]	; 0x34
    dcbc:	63a5      	str	r5, [r4, #56]	; 0x38
    dcbe:	64a5      	str	r5, [r4, #72]	; 0x48
    dcc0:	64e5      	str	r5, [r4, #76]	; 0x4c
    dcc2:	e7e6      	b.n	dc92 <__sfp+0x42>
    dcc4:	0000f60c 	.word	0x0000f60c

0000dcc8 <_fwalk_reent>:
    dcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dccc:	4680      	mov	r8, r0
    dcce:	4689      	mov	r9, r1
    dcd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
    dcd4:	2600      	movs	r6, #0
    dcd6:	b914      	cbnz	r4, dcde <_fwalk_reent+0x16>
    dcd8:	4630      	mov	r0, r6
    dcda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dcde:	68a5      	ldr	r5, [r4, #8]
    dce0:	6867      	ldr	r7, [r4, #4]
    dce2:	3f01      	subs	r7, #1
    dce4:	d501      	bpl.n	dcea <_fwalk_reent+0x22>
    dce6:	6824      	ldr	r4, [r4, #0]
    dce8:	e7f5      	b.n	dcd6 <_fwalk_reent+0xe>
    dcea:	89ab      	ldrh	r3, [r5, #12]
    dcec:	2b01      	cmp	r3, #1
    dcee:	d907      	bls.n	dd00 <_fwalk_reent+0x38>
    dcf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    dcf4:	3301      	adds	r3, #1
    dcf6:	d003      	beq.n	dd00 <_fwalk_reent+0x38>
    dcf8:	4629      	mov	r1, r5
    dcfa:	4640      	mov	r0, r8
    dcfc:	47c8      	blx	r9
    dcfe:	4306      	orrs	r6, r0
    dd00:	3568      	adds	r5, #104	; 0x68
    dd02:	e7ee      	b.n	dce2 <_fwalk_reent+0x1a>

0000dd04 <__swhatbuf_r>:
    dd04:	b570      	push	{r4, r5, r6, lr}
    dd06:	460e      	mov	r6, r1
    dd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dd0c:	2900      	cmp	r1, #0
    dd0e:	b090      	sub	sp, #64	; 0x40
    dd10:	4614      	mov	r4, r2
    dd12:	461d      	mov	r5, r3
    dd14:	da07      	bge.n	dd26 <__swhatbuf_r+0x22>
    dd16:	2300      	movs	r3, #0
    dd18:	602b      	str	r3, [r5, #0]
    dd1a:	89b3      	ldrh	r3, [r6, #12]
    dd1c:	061a      	lsls	r2, r3, #24
    dd1e:	d410      	bmi.n	dd42 <__swhatbuf_r+0x3e>
    dd20:	f44f 6380 	mov.w	r3, #1024	; 0x400
    dd24:	e00e      	b.n	dd44 <__swhatbuf_r+0x40>
    dd26:	aa01      	add	r2, sp, #4
    dd28:	f000 fcdc 	bl	e6e4 <_fstat_r>
    dd2c:	2800      	cmp	r0, #0
    dd2e:	dbf2      	blt.n	dd16 <__swhatbuf_r+0x12>
    dd30:	9a02      	ldr	r2, [sp, #8]
    dd32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    dd36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    dd3a:	425a      	negs	r2, r3
    dd3c:	415a      	adcs	r2, r3
    dd3e:	602a      	str	r2, [r5, #0]
    dd40:	e7ee      	b.n	dd20 <__swhatbuf_r+0x1c>
    dd42:	2340      	movs	r3, #64	; 0x40
    dd44:	2000      	movs	r0, #0
    dd46:	6023      	str	r3, [r4, #0]
    dd48:	b010      	add	sp, #64	; 0x40
    dd4a:	bd70      	pop	{r4, r5, r6, pc}

0000dd4c <__smakebuf_r>:
    dd4c:	898b      	ldrh	r3, [r1, #12]
    dd4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dd50:	079d      	lsls	r5, r3, #30
    dd52:	4606      	mov	r6, r0
    dd54:	460c      	mov	r4, r1
    dd56:	d507      	bpl.n	dd68 <__smakebuf_r+0x1c>
    dd58:	f104 0347 	add.w	r3, r4, #71	; 0x47
    dd5c:	6023      	str	r3, [r4, #0]
    dd5e:	6123      	str	r3, [r4, #16]
    dd60:	2301      	movs	r3, #1
    dd62:	6163      	str	r3, [r4, #20]
    dd64:	b002      	add	sp, #8
    dd66:	bd70      	pop	{r4, r5, r6, pc}
    dd68:	ab01      	add	r3, sp, #4
    dd6a:	466a      	mov	r2, sp
    dd6c:	f7ff ffca 	bl	dd04 <__swhatbuf_r>
    dd70:	9900      	ldr	r1, [sp, #0]
    dd72:	4605      	mov	r5, r0
    dd74:	4630      	mov	r0, r6
    dd76:	f7ff fbbd 	bl	d4f4 <_malloc_r>
    dd7a:	b948      	cbnz	r0, dd90 <__smakebuf_r+0x44>
    dd7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dd80:	059a      	lsls	r2, r3, #22
    dd82:	d4ef      	bmi.n	dd64 <__smakebuf_r+0x18>
    dd84:	f023 0303 	bic.w	r3, r3, #3
    dd88:	f043 0302 	orr.w	r3, r3, #2
    dd8c:	81a3      	strh	r3, [r4, #12]
    dd8e:	e7e3      	b.n	dd58 <__smakebuf_r+0xc>
    dd90:	4b0d      	ldr	r3, [pc, #52]	; (ddc8 <__smakebuf_r+0x7c>)
    dd92:	62b3      	str	r3, [r6, #40]	; 0x28
    dd94:	89a3      	ldrh	r3, [r4, #12]
    dd96:	6020      	str	r0, [r4, #0]
    dd98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dd9c:	81a3      	strh	r3, [r4, #12]
    dd9e:	9b00      	ldr	r3, [sp, #0]
    dda0:	6163      	str	r3, [r4, #20]
    dda2:	9b01      	ldr	r3, [sp, #4]
    dda4:	6120      	str	r0, [r4, #16]
    dda6:	b15b      	cbz	r3, ddc0 <__smakebuf_r+0x74>
    dda8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ddac:	4630      	mov	r0, r6
    ddae:	f000 fcab 	bl	e708 <_isatty_r>
    ddb2:	b128      	cbz	r0, ddc0 <__smakebuf_r+0x74>
    ddb4:	89a3      	ldrh	r3, [r4, #12]
    ddb6:	f023 0303 	bic.w	r3, r3, #3
    ddba:	f043 0301 	orr.w	r3, r3, #1
    ddbe:	81a3      	strh	r3, [r4, #12]
    ddc0:	89a3      	ldrh	r3, [r4, #12]
    ddc2:	431d      	orrs	r5, r3
    ddc4:	81a5      	strh	r5, [r4, #12]
    ddc6:	e7cd      	b.n	dd64 <__smakebuf_r+0x18>
    ddc8:	0000db71 	.word	0x0000db71

0000ddcc <__malloc_lock>:
    ddcc:	4770      	bx	lr

0000ddce <__malloc_unlock>:
    ddce:	4770      	bx	lr

0000ddd0 <__ssputs_r>:
    ddd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ddd4:	688e      	ldr	r6, [r1, #8]
    ddd6:	429e      	cmp	r6, r3
    ddd8:	4682      	mov	sl, r0
    ddda:	460c      	mov	r4, r1
    dddc:	4691      	mov	r9, r2
    ddde:	4698      	mov	r8, r3
    dde0:	d835      	bhi.n	de4e <__ssputs_r+0x7e>
    dde2:	898a      	ldrh	r2, [r1, #12]
    dde4:	f412 6f90 	tst.w	r2, #1152	; 0x480
    dde8:	d031      	beq.n	de4e <__ssputs_r+0x7e>
    ddea:	6825      	ldr	r5, [r4, #0]
    ddec:	6909      	ldr	r1, [r1, #16]
    ddee:	1a6f      	subs	r7, r5, r1
    ddf0:	6965      	ldr	r5, [r4, #20]
    ddf2:	2302      	movs	r3, #2
    ddf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    ddf8:	fb95 f5f3 	sdiv	r5, r5, r3
    ddfc:	f108 0301 	add.w	r3, r8, #1
    de00:	443b      	add	r3, r7
    de02:	429d      	cmp	r5, r3
    de04:	bf38      	it	cc
    de06:	461d      	movcc	r5, r3
    de08:	0553      	lsls	r3, r2, #21
    de0a:	d531      	bpl.n	de70 <__ssputs_r+0xa0>
    de0c:	4629      	mov	r1, r5
    de0e:	f7ff fb71 	bl	d4f4 <_malloc_r>
    de12:	4606      	mov	r6, r0
    de14:	b950      	cbnz	r0, de2c <__ssputs_r+0x5c>
    de16:	230c      	movs	r3, #12
    de18:	f8ca 3000 	str.w	r3, [sl]
    de1c:	89a3      	ldrh	r3, [r4, #12]
    de1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    de22:	81a3      	strh	r3, [r4, #12]
    de24:	f04f 30ff 	mov.w	r0, #4294967295
    de28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de2c:	463a      	mov	r2, r7
    de2e:	6921      	ldr	r1, [r4, #16]
    de30:	f7ff fafe 	bl	d430 <memcpy>
    de34:	89a3      	ldrh	r3, [r4, #12]
    de36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    de3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    de3e:	81a3      	strh	r3, [r4, #12]
    de40:	6126      	str	r6, [r4, #16]
    de42:	6165      	str	r5, [r4, #20]
    de44:	443e      	add	r6, r7
    de46:	1bed      	subs	r5, r5, r7
    de48:	6026      	str	r6, [r4, #0]
    de4a:	60a5      	str	r5, [r4, #8]
    de4c:	4646      	mov	r6, r8
    de4e:	4546      	cmp	r6, r8
    de50:	bf28      	it	cs
    de52:	4646      	movcs	r6, r8
    de54:	4632      	mov	r2, r6
    de56:	4649      	mov	r1, r9
    de58:	6820      	ldr	r0, [r4, #0]
    de5a:	f000 fcc9 	bl	e7f0 <memmove>
    de5e:	68a3      	ldr	r3, [r4, #8]
    de60:	1b9b      	subs	r3, r3, r6
    de62:	60a3      	str	r3, [r4, #8]
    de64:	6823      	ldr	r3, [r4, #0]
    de66:	441e      	add	r6, r3
    de68:	6026      	str	r6, [r4, #0]
    de6a:	2000      	movs	r0, #0
    de6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de70:	462a      	mov	r2, r5
    de72:	f000 fcd7 	bl	e824 <_realloc_r>
    de76:	4606      	mov	r6, r0
    de78:	2800      	cmp	r0, #0
    de7a:	d1e1      	bne.n	de40 <__ssputs_r+0x70>
    de7c:	6921      	ldr	r1, [r4, #16]
    de7e:	4650      	mov	r0, sl
    de80:	f7ff faea 	bl	d458 <_free_r>
    de84:	e7c7      	b.n	de16 <__ssputs_r+0x46>
	...

0000de88 <_svfiprintf_r>:
    de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de8c:	b09d      	sub	sp, #116	; 0x74
    de8e:	4680      	mov	r8, r0
    de90:	9303      	str	r3, [sp, #12]
    de92:	898b      	ldrh	r3, [r1, #12]
    de94:	061c      	lsls	r4, r3, #24
    de96:	460d      	mov	r5, r1
    de98:	4616      	mov	r6, r2
    de9a:	d50f      	bpl.n	debc <_svfiprintf_r+0x34>
    de9c:	690b      	ldr	r3, [r1, #16]
    de9e:	b96b      	cbnz	r3, debc <_svfiprintf_r+0x34>
    dea0:	2140      	movs	r1, #64	; 0x40
    dea2:	f7ff fb27 	bl	d4f4 <_malloc_r>
    dea6:	6028      	str	r0, [r5, #0]
    dea8:	6128      	str	r0, [r5, #16]
    deaa:	b928      	cbnz	r0, deb8 <_svfiprintf_r+0x30>
    deac:	230c      	movs	r3, #12
    deae:	f8c8 3000 	str.w	r3, [r8]
    deb2:	f04f 30ff 	mov.w	r0, #4294967295
    deb6:	e0c5      	b.n	e044 <_svfiprintf_r+0x1bc>
    deb8:	2340      	movs	r3, #64	; 0x40
    deba:	616b      	str	r3, [r5, #20]
    debc:	2300      	movs	r3, #0
    debe:	9309      	str	r3, [sp, #36]	; 0x24
    dec0:	2320      	movs	r3, #32
    dec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    dec6:	2330      	movs	r3, #48	; 0x30
    dec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    decc:	f04f 0b01 	mov.w	fp, #1
    ded0:	4637      	mov	r7, r6
    ded2:	463c      	mov	r4, r7
    ded4:	f814 3b01 	ldrb.w	r3, [r4], #1
    ded8:	2b00      	cmp	r3, #0
    deda:	d13c      	bne.n	df56 <_svfiprintf_r+0xce>
    dedc:	ebb7 0a06 	subs.w	sl, r7, r6
    dee0:	d00b      	beq.n	defa <_svfiprintf_r+0x72>
    dee2:	4653      	mov	r3, sl
    dee4:	4632      	mov	r2, r6
    dee6:	4629      	mov	r1, r5
    dee8:	4640      	mov	r0, r8
    deea:	f7ff ff71 	bl	ddd0 <__ssputs_r>
    deee:	3001      	adds	r0, #1
    def0:	f000 80a3 	beq.w	e03a <_svfiprintf_r+0x1b2>
    def4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    def6:	4453      	add	r3, sl
    def8:	9309      	str	r3, [sp, #36]	; 0x24
    defa:	783b      	ldrb	r3, [r7, #0]
    defc:	2b00      	cmp	r3, #0
    defe:	f000 809c 	beq.w	e03a <_svfiprintf_r+0x1b2>
    df02:	2300      	movs	r3, #0
    df04:	f04f 32ff 	mov.w	r2, #4294967295
    df08:	9304      	str	r3, [sp, #16]
    df0a:	9307      	str	r3, [sp, #28]
    df0c:	9205      	str	r2, [sp, #20]
    df0e:	9306      	str	r3, [sp, #24]
    df10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    df14:	931a      	str	r3, [sp, #104]	; 0x68
    df16:	2205      	movs	r2, #5
    df18:	7821      	ldrb	r1, [r4, #0]
    df1a:	4850      	ldr	r0, [pc, #320]	; (e05c <_svfiprintf_r+0x1d4>)
    df1c:	f000 fc18 	bl	e750 <memchr>
    df20:	1c67      	adds	r7, r4, #1
    df22:	9b04      	ldr	r3, [sp, #16]
    df24:	b9d8      	cbnz	r0, df5e <_svfiprintf_r+0xd6>
    df26:	06d9      	lsls	r1, r3, #27
    df28:	bf44      	itt	mi
    df2a:	2220      	movmi	r2, #32
    df2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    df30:	071a      	lsls	r2, r3, #28
    df32:	bf44      	itt	mi
    df34:	222b      	movmi	r2, #43	; 0x2b
    df36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    df3a:	7822      	ldrb	r2, [r4, #0]
    df3c:	2a2a      	cmp	r2, #42	; 0x2a
    df3e:	d016      	beq.n	df6e <_svfiprintf_r+0xe6>
    df40:	9a07      	ldr	r2, [sp, #28]
    df42:	2100      	movs	r1, #0
    df44:	200a      	movs	r0, #10
    df46:	4627      	mov	r7, r4
    df48:	3401      	adds	r4, #1
    df4a:	783b      	ldrb	r3, [r7, #0]
    df4c:	3b30      	subs	r3, #48	; 0x30
    df4e:	2b09      	cmp	r3, #9
    df50:	d951      	bls.n	dff6 <_svfiprintf_r+0x16e>
    df52:	b1c9      	cbz	r1, df88 <_svfiprintf_r+0x100>
    df54:	e011      	b.n	df7a <_svfiprintf_r+0xf2>
    df56:	2b25      	cmp	r3, #37	; 0x25
    df58:	d0c0      	beq.n	dedc <_svfiprintf_r+0x54>
    df5a:	4627      	mov	r7, r4
    df5c:	e7b9      	b.n	ded2 <_svfiprintf_r+0x4a>
    df5e:	4a3f      	ldr	r2, [pc, #252]	; (e05c <_svfiprintf_r+0x1d4>)
    df60:	1a80      	subs	r0, r0, r2
    df62:	fa0b f000 	lsl.w	r0, fp, r0
    df66:	4318      	orrs	r0, r3
    df68:	9004      	str	r0, [sp, #16]
    df6a:	463c      	mov	r4, r7
    df6c:	e7d3      	b.n	df16 <_svfiprintf_r+0x8e>
    df6e:	9a03      	ldr	r2, [sp, #12]
    df70:	1d11      	adds	r1, r2, #4
    df72:	6812      	ldr	r2, [r2, #0]
    df74:	9103      	str	r1, [sp, #12]
    df76:	2a00      	cmp	r2, #0
    df78:	db01      	blt.n	df7e <_svfiprintf_r+0xf6>
    df7a:	9207      	str	r2, [sp, #28]
    df7c:	e004      	b.n	df88 <_svfiprintf_r+0x100>
    df7e:	4252      	negs	r2, r2
    df80:	f043 0302 	orr.w	r3, r3, #2
    df84:	9207      	str	r2, [sp, #28]
    df86:	9304      	str	r3, [sp, #16]
    df88:	783b      	ldrb	r3, [r7, #0]
    df8a:	2b2e      	cmp	r3, #46	; 0x2e
    df8c:	d10e      	bne.n	dfac <_svfiprintf_r+0x124>
    df8e:	787b      	ldrb	r3, [r7, #1]
    df90:	2b2a      	cmp	r3, #42	; 0x2a
    df92:	f107 0101 	add.w	r1, r7, #1
    df96:	d132      	bne.n	dffe <_svfiprintf_r+0x176>
    df98:	9b03      	ldr	r3, [sp, #12]
    df9a:	1d1a      	adds	r2, r3, #4
    df9c:	681b      	ldr	r3, [r3, #0]
    df9e:	9203      	str	r2, [sp, #12]
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	bfb8      	it	lt
    dfa4:	f04f 33ff 	movlt.w	r3, #4294967295
    dfa8:	3702      	adds	r7, #2
    dfaa:	9305      	str	r3, [sp, #20]
    dfac:	4c2c      	ldr	r4, [pc, #176]	; (e060 <_svfiprintf_r+0x1d8>)
    dfae:	7839      	ldrb	r1, [r7, #0]
    dfb0:	2203      	movs	r2, #3
    dfb2:	4620      	mov	r0, r4
    dfb4:	f000 fbcc 	bl	e750 <memchr>
    dfb8:	b138      	cbz	r0, dfca <_svfiprintf_r+0x142>
    dfba:	2340      	movs	r3, #64	; 0x40
    dfbc:	1b00      	subs	r0, r0, r4
    dfbe:	fa03 f000 	lsl.w	r0, r3, r0
    dfc2:	9b04      	ldr	r3, [sp, #16]
    dfc4:	4303      	orrs	r3, r0
    dfc6:	9304      	str	r3, [sp, #16]
    dfc8:	3701      	adds	r7, #1
    dfca:	7839      	ldrb	r1, [r7, #0]
    dfcc:	4825      	ldr	r0, [pc, #148]	; (e064 <_svfiprintf_r+0x1dc>)
    dfce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    dfd2:	2206      	movs	r2, #6
    dfd4:	1c7e      	adds	r6, r7, #1
    dfd6:	f000 fbbb 	bl	e750 <memchr>
    dfda:	2800      	cmp	r0, #0
    dfdc:	d035      	beq.n	e04a <_svfiprintf_r+0x1c2>
    dfde:	4b22      	ldr	r3, [pc, #136]	; (e068 <_svfiprintf_r+0x1e0>)
    dfe0:	b9fb      	cbnz	r3, e022 <_svfiprintf_r+0x19a>
    dfe2:	9b03      	ldr	r3, [sp, #12]
    dfe4:	3307      	adds	r3, #7
    dfe6:	f023 0307 	bic.w	r3, r3, #7
    dfea:	3308      	adds	r3, #8
    dfec:	9303      	str	r3, [sp, #12]
    dfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dff0:	444b      	add	r3, r9
    dff2:	9309      	str	r3, [sp, #36]	; 0x24
    dff4:	e76c      	b.n	ded0 <_svfiprintf_r+0x48>
    dff6:	fb00 3202 	mla	r2, r0, r2, r3
    dffa:	2101      	movs	r1, #1
    dffc:	e7a3      	b.n	df46 <_svfiprintf_r+0xbe>
    dffe:	2300      	movs	r3, #0
    e000:	9305      	str	r3, [sp, #20]
    e002:	4618      	mov	r0, r3
    e004:	240a      	movs	r4, #10
    e006:	460f      	mov	r7, r1
    e008:	3101      	adds	r1, #1
    e00a:	783a      	ldrb	r2, [r7, #0]
    e00c:	3a30      	subs	r2, #48	; 0x30
    e00e:	2a09      	cmp	r2, #9
    e010:	d903      	bls.n	e01a <_svfiprintf_r+0x192>
    e012:	2b00      	cmp	r3, #0
    e014:	d0ca      	beq.n	dfac <_svfiprintf_r+0x124>
    e016:	9005      	str	r0, [sp, #20]
    e018:	e7c8      	b.n	dfac <_svfiprintf_r+0x124>
    e01a:	fb04 2000 	mla	r0, r4, r0, r2
    e01e:	2301      	movs	r3, #1
    e020:	e7f1      	b.n	e006 <_svfiprintf_r+0x17e>
    e022:	ab03      	add	r3, sp, #12
    e024:	9300      	str	r3, [sp, #0]
    e026:	462a      	mov	r2, r5
    e028:	4b10      	ldr	r3, [pc, #64]	; (e06c <_svfiprintf_r+0x1e4>)
    e02a:	a904      	add	r1, sp, #16
    e02c:	4640      	mov	r0, r8
    e02e:	f3af 8000 	nop.w
    e032:	f1b0 3fff 	cmp.w	r0, #4294967295
    e036:	4681      	mov	r9, r0
    e038:	d1d9      	bne.n	dfee <_svfiprintf_r+0x166>
    e03a:	89ab      	ldrh	r3, [r5, #12]
    e03c:	065b      	lsls	r3, r3, #25
    e03e:	f53f af38 	bmi.w	deb2 <_svfiprintf_r+0x2a>
    e042:	9809      	ldr	r0, [sp, #36]	; 0x24
    e044:	b01d      	add	sp, #116	; 0x74
    e046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e04a:	ab03      	add	r3, sp, #12
    e04c:	9300      	str	r3, [sp, #0]
    e04e:	462a      	mov	r2, r5
    e050:	4b06      	ldr	r3, [pc, #24]	; (e06c <_svfiprintf_r+0x1e4>)
    e052:	a904      	add	r1, sp, #16
    e054:	4640      	mov	r0, r8
    e056:	f000 f9bf 	bl	e3d8 <_printf_i>
    e05a:	e7ea      	b.n	e032 <_svfiprintf_r+0x1aa>
    e05c:	0000f670 	.word	0x0000f670
    e060:	0000f676 	.word	0x0000f676
    e064:	0000f67a 	.word	0x0000f67a
    e068:	00000000 	.word	0x00000000
    e06c:	0000ddd1 	.word	0x0000ddd1

0000e070 <__sfputc_r>:
    e070:	6893      	ldr	r3, [r2, #8]
    e072:	3b01      	subs	r3, #1
    e074:	2b00      	cmp	r3, #0
    e076:	b410      	push	{r4}
    e078:	6093      	str	r3, [r2, #8]
    e07a:	da08      	bge.n	e08e <__sfputc_r+0x1e>
    e07c:	6994      	ldr	r4, [r2, #24]
    e07e:	42a3      	cmp	r3, r4
    e080:	db02      	blt.n	e088 <__sfputc_r+0x18>
    e082:	b2cb      	uxtb	r3, r1
    e084:	2b0a      	cmp	r3, #10
    e086:	d102      	bne.n	e08e <__sfputc_r+0x1e>
    e088:	bc10      	pop	{r4}
    e08a:	f7ff bbff 	b.w	d88c <__swbuf_r>
    e08e:	6813      	ldr	r3, [r2, #0]
    e090:	1c58      	adds	r0, r3, #1
    e092:	6010      	str	r0, [r2, #0]
    e094:	7019      	strb	r1, [r3, #0]
    e096:	b2c8      	uxtb	r0, r1
    e098:	bc10      	pop	{r4}
    e09a:	4770      	bx	lr

0000e09c <__sfputs_r>:
    e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e09e:	4606      	mov	r6, r0
    e0a0:	460f      	mov	r7, r1
    e0a2:	4614      	mov	r4, r2
    e0a4:	18d5      	adds	r5, r2, r3
    e0a6:	42ac      	cmp	r4, r5
    e0a8:	d101      	bne.n	e0ae <__sfputs_r+0x12>
    e0aa:	2000      	movs	r0, #0
    e0ac:	e007      	b.n	e0be <__sfputs_r+0x22>
    e0ae:	463a      	mov	r2, r7
    e0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
    e0b4:	4630      	mov	r0, r6
    e0b6:	f7ff ffdb 	bl	e070 <__sfputc_r>
    e0ba:	1c43      	adds	r3, r0, #1
    e0bc:	d1f3      	bne.n	e0a6 <__sfputs_r+0xa>
    e0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e0c0 <_vfiprintf_r>:
    e0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0c4:	b09d      	sub	sp, #116	; 0x74
    e0c6:	460c      	mov	r4, r1
    e0c8:	4617      	mov	r7, r2
    e0ca:	9303      	str	r3, [sp, #12]
    e0cc:	4606      	mov	r6, r0
    e0ce:	b118      	cbz	r0, e0d8 <_vfiprintf_r+0x18>
    e0d0:	6983      	ldr	r3, [r0, #24]
    e0d2:	b90b      	cbnz	r3, e0d8 <_vfiprintf_r+0x18>
    e0d4:	f7ff fd8c 	bl	dbf0 <__sinit>
    e0d8:	4b7c      	ldr	r3, [pc, #496]	; (e2cc <_vfiprintf_r+0x20c>)
    e0da:	429c      	cmp	r4, r3
    e0dc:	d157      	bne.n	e18e <_vfiprintf_r+0xce>
    e0de:	6874      	ldr	r4, [r6, #4]
    e0e0:	89a3      	ldrh	r3, [r4, #12]
    e0e2:	0718      	lsls	r0, r3, #28
    e0e4:	d55d      	bpl.n	e1a2 <_vfiprintf_r+0xe2>
    e0e6:	6923      	ldr	r3, [r4, #16]
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d05a      	beq.n	e1a2 <_vfiprintf_r+0xe2>
    e0ec:	2300      	movs	r3, #0
    e0ee:	9309      	str	r3, [sp, #36]	; 0x24
    e0f0:	2320      	movs	r3, #32
    e0f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    e0f6:	2330      	movs	r3, #48	; 0x30
    e0f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    e0fc:	f04f 0b01 	mov.w	fp, #1
    e100:	46b8      	mov	r8, r7
    e102:	4645      	mov	r5, r8
    e104:	f815 3b01 	ldrb.w	r3, [r5], #1
    e108:	2b00      	cmp	r3, #0
    e10a:	d155      	bne.n	e1b8 <_vfiprintf_r+0xf8>
    e10c:	ebb8 0a07 	subs.w	sl, r8, r7
    e110:	d00b      	beq.n	e12a <_vfiprintf_r+0x6a>
    e112:	4653      	mov	r3, sl
    e114:	463a      	mov	r2, r7
    e116:	4621      	mov	r1, r4
    e118:	4630      	mov	r0, r6
    e11a:	f7ff ffbf 	bl	e09c <__sfputs_r>
    e11e:	3001      	adds	r0, #1
    e120:	f000 80c4 	beq.w	e2ac <_vfiprintf_r+0x1ec>
    e124:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e126:	4453      	add	r3, sl
    e128:	9309      	str	r3, [sp, #36]	; 0x24
    e12a:	f898 3000 	ldrb.w	r3, [r8]
    e12e:	2b00      	cmp	r3, #0
    e130:	f000 80bc 	beq.w	e2ac <_vfiprintf_r+0x1ec>
    e134:	2300      	movs	r3, #0
    e136:	f04f 32ff 	mov.w	r2, #4294967295
    e13a:	9304      	str	r3, [sp, #16]
    e13c:	9307      	str	r3, [sp, #28]
    e13e:	9205      	str	r2, [sp, #20]
    e140:	9306      	str	r3, [sp, #24]
    e142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    e146:	931a      	str	r3, [sp, #104]	; 0x68
    e148:	2205      	movs	r2, #5
    e14a:	7829      	ldrb	r1, [r5, #0]
    e14c:	4860      	ldr	r0, [pc, #384]	; (e2d0 <_vfiprintf_r+0x210>)
    e14e:	f000 faff 	bl	e750 <memchr>
    e152:	f105 0801 	add.w	r8, r5, #1
    e156:	9b04      	ldr	r3, [sp, #16]
    e158:	2800      	cmp	r0, #0
    e15a:	d131      	bne.n	e1c0 <_vfiprintf_r+0x100>
    e15c:	06d9      	lsls	r1, r3, #27
    e15e:	bf44      	itt	mi
    e160:	2220      	movmi	r2, #32
    e162:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    e166:	071a      	lsls	r2, r3, #28
    e168:	bf44      	itt	mi
    e16a:	222b      	movmi	r2, #43	; 0x2b
    e16c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    e170:	782a      	ldrb	r2, [r5, #0]
    e172:	2a2a      	cmp	r2, #42	; 0x2a
    e174:	d02c      	beq.n	e1d0 <_vfiprintf_r+0x110>
    e176:	9a07      	ldr	r2, [sp, #28]
    e178:	2100      	movs	r1, #0
    e17a:	200a      	movs	r0, #10
    e17c:	46a8      	mov	r8, r5
    e17e:	3501      	adds	r5, #1
    e180:	f898 3000 	ldrb.w	r3, [r8]
    e184:	3b30      	subs	r3, #48	; 0x30
    e186:	2b09      	cmp	r3, #9
    e188:	d96d      	bls.n	e266 <_vfiprintf_r+0x1a6>
    e18a:	b371      	cbz	r1, e1ea <_vfiprintf_r+0x12a>
    e18c:	e026      	b.n	e1dc <_vfiprintf_r+0x11c>
    e18e:	4b51      	ldr	r3, [pc, #324]	; (e2d4 <_vfiprintf_r+0x214>)
    e190:	429c      	cmp	r4, r3
    e192:	d101      	bne.n	e198 <_vfiprintf_r+0xd8>
    e194:	68b4      	ldr	r4, [r6, #8]
    e196:	e7a3      	b.n	e0e0 <_vfiprintf_r+0x20>
    e198:	4b4f      	ldr	r3, [pc, #316]	; (e2d8 <_vfiprintf_r+0x218>)
    e19a:	429c      	cmp	r4, r3
    e19c:	bf08      	it	eq
    e19e:	68f4      	ldreq	r4, [r6, #12]
    e1a0:	e79e      	b.n	e0e0 <_vfiprintf_r+0x20>
    e1a2:	4621      	mov	r1, r4
    e1a4:	4630      	mov	r0, r6
    e1a6:	f7ff fbc3 	bl	d930 <__swsetup_r>
    e1aa:	2800      	cmp	r0, #0
    e1ac:	d09e      	beq.n	e0ec <_vfiprintf_r+0x2c>
    e1ae:	f04f 30ff 	mov.w	r0, #4294967295
    e1b2:	b01d      	add	sp, #116	; 0x74
    e1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1b8:	2b25      	cmp	r3, #37	; 0x25
    e1ba:	d0a7      	beq.n	e10c <_vfiprintf_r+0x4c>
    e1bc:	46a8      	mov	r8, r5
    e1be:	e7a0      	b.n	e102 <_vfiprintf_r+0x42>
    e1c0:	4a43      	ldr	r2, [pc, #268]	; (e2d0 <_vfiprintf_r+0x210>)
    e1c2:	1a80      	subs	r0, r0, r2
    e1c4:	fa0b f000 	lsl.w	r0, fp, r0
    e1c8:	4318      	orrs	r0, r3
    e1ca:	9004      	str	r0, [sp, #16]
    e1cc:	4645      	mov	r5, r8
    e1ce:	e7bb      	b.n	e148 <_vfiprintf_r+0x88>
    e1d0:	9a03      	ldr	r2, [sp, #12]
    e1d2:	1d11      	adds	r1, r2, #4
    e1d4:	6812      	ldr	r2, [r2, #0]
    e1d6:	9103      	str	r1, [sp, #12]
    e1d8:	2a00      	cmp	r2, #0
    e1da:	db01      	blt.n	e1e0 <_vfiprintf_r+0x120>
    e1dc:	9207      	str	r2, [sp, #28]
    e1de:	e004      	b.n	e1ea <_vfiprintf_r+0x12a>
    e1e0:	4252      	negs	r2, r2
    e1e2:	f043 0302 	orr.w	r3, r3, #2
    e1e6:	9207      	str	r2, [sp, #28]
    e1e8:	9304      	str	r3, [sp, #16]
    e1ea:	f898 3000 	ldrb.w	r3, [r8]
    e1ee:	2b2e      	cmp	r3, #46	; 0x2e
    e1f0:	d110      	bne.n	e214 <_vfiprintf_r+0x154>
    e1f2:	f898 3001 	ldrb.w	r3, [r8, #1]
    e1f6:	2b2a      	cmp	r3, #42	; 0x2a
    e1f8:	f108 0101 	add.w	r1, r8, #1
    e1fc:	d137      	bne.n	e26e <_vfiprintf_r+0x1ae>
    e1fe:	9b03      	ldr	r3, [sp, #12]
    e200:	1d1a      	adds	r2, r3, #4
    e202:	681b      	ldr	r3, [r3, #0]
    e204:	9203      	str	r2, [sp, #12]
    e206:	2b00      	cmp	r3, #0
    e208:	bfb8      	it	lt
    e20a:	f04f 33ff 	movlt.w	r3, #4294967295
    e20e:	f108 0802 	add.w	r8, r8, #2
    e212:	9305      	str	r3, [sp, #20]
    e214:	4d31      	ldr	r5, [pc, #196]	; (e2dc <_vfiprintf_r+0x21c>)
    e216:	f898 1000 	ldrb.w	r1, [r8]
    e21a:	2203      	movs	r2, #3
    e21c:	4628      	mov	r0, r5
    e21e:	f000 fa97 	bl	e750 <memchr>
    e222:	b140      	cbz	r0, e236 <_vfiprintf_r+0x176>
    e224:	2340      	movs	r3, #64	; 0x40
    e226:	1b40      	subs	r0, r0, r5
    e228:	fa03 f000 	lsl.w	r0, r3, r0
    e22c:	9b04      	ldr	r3, [sp, #16]
    e22e:	4303      	orrs	r3, r0
    e230:	9304      	str	r3, [sp, #16]
    e232:	f108 0801 	add.w	r8, r8, #1
    e236:	f898 1000 	ldrb.w	r1, [r8]
    e23a:	4829      	ldr	r0, [pc, #164]	; (e2e0 <_vfiprintf_r+0x220>)
    e23c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    e240:	2206      	movs	r2, #6
    e242:	f108 0701 	add.w	r7, r8, #1
    e246:	f000 fa83 	bl	e750 <memchr>
    e24a:	2800      	cmp	r0, #0
    e24c:	d034      	beq.n	e2b8 <_vfiprintf_r+0x1f8>
    e24e:	4b25      	ldr	r3, [pc, #148]	; (e2e4 <_vfiprintf_r+0x224>)
    e250:	bb03      	cbnz	r3, e294 <_vfiprintf_r+0x1d4>
    e252:	9b03      	ldr	r3, [sp, #12]
    e254:	3307      	adds	r3, #7
    e256:	f023 0307 	bic.w	r3, r3, #7
    e25a:	3308      	adds	r3, #8
    e25c:	9303      	str	r3, [sp, #12]
    e25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e260:	444b      	add	r3, r9
    e262:	9309      	str	r3, [sp, #36]	; 0x24
    e264:	e74c      	b.n	e100 <_vfiprintf_r+0x40>
    e266:	fb00 3202 	mla	r2, r0, r2, r3
    e26a:	2101      	movs	r1, #1
    e26c:	e786      	b.n	e17c <_vfiprintf_r+0xbc>
    e26e:	2300      	movs	r3, #0
    e270:	9305      	str	r3, [sp, #20]
    e272:	4618      	mov	r0, r3
    e274:	250a      	movs	r5, #10
    e276:	4688      	mov	r8, r1
    e278:	3101      	adds	r1, #1
    e27a:	f898 2000 	ldrb.w	r2, [r8]
    e27e:	3a30      	subs	r2, #48	; 0x30
    e280:	2a09      	cmp	r2, #9
    e282:	d903      	bls.n	e28c <_vfiprintf_r+0x1cc>
    e284:	2b00      	cmp	r3, #0
    e286:	d0c5      	beq.n	e214 <_vfiprintf_r+0x154>
    e288:	9005      	str	r0, [sp, #20]
    e28a:	e7c3      	b.n	e214 <_vfiprintf_r+0x154>
    e28c:	fb05 2000 	mla	r0, r5, r0, r2
    e290:	2301      	movs	r3, #1
    e292:	e7f0      	b.n	e276 <_vfiprintf_r+0x1b6>
    e294:	ab03      	add	r3, sp, #12
    e296:	9300      	str	r3, [sp, #0]
    e298:	4622      	mov	r2, r4
    e29a:	4b13      	ldr	r3, [pc, #76]	; (e2e8 <_vfiprintf_r+0x228>)
    e29c:	a904      	add	r1, sp, #16
    e29e:	4630      	mov	r0, r6
    e2a0:	f3af 8000 	nop.w
    e2a4:	f1b0 3fff 	cmp.w	r0, #4294967295
    e2a8:	4681      	mov	r9, r0
    e2aa:	d1d8      	bne.n	e25e <_vfiprintf_r+0x19e>
    e2ac:	89a3      	ldrh	r3, [r4, #12]
    e2ae:	065b      	lsls	r3, r3, #25
    e2b0:	f53f af7d 	bmi.w	e1ae <_vfiprintf_r+0xee>
    e2b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    e2b6:	e77c      	b.n	e1b2 <_vfiprintf_r+0xf2>
    e2b8:	ab03      	add	r3, sp, #12
    e2ba:	9300      	str	r3, [sp, #0]
    e2bc:	4622      	mov	r2, r4
    e2be:	4b0a      	ldr	r3, [pc, #40]	; (e2e8 <_vfiprintf_r+0x228>)
    e2c0:	a904      	add	r1, sp, #16
    e2c2:	4630      	mov	r0, r6
    e2c4:	f000 f888 	bl	e3d8 <_printf_i>
    e2c8:	e7ec      	b.n	e2a4 <_vfiprintf_r+0x1e4>
    e2ca:	bf00      	nop
    e2cc:	0000f630 	.word	0x0000f630
    e2d0:	0000f670 	.word	0x0000f670
    e2d4:	0000f650 	.word	0x0000f650
    e2d8:	0000f610 	.word	0x0000f610
    e2dc:	0000f676 	.word	0x0000f676
    e2e0:	0000f67a 	.word	0x0000f67a
    e2e4:	00000000 	.word	0x00000000
    e2e8:	0000e09d 	.word	0x0000e09d

0000e2ec <_printf_common>:
    e2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e2f0:	4691      	mov	r9, r2
    e2f2:	461f      	mov	r7, r3
    e2f4:	688a      	ldr	r2, [r1, #8]
    e2f6:	690b      	ldr	r3, [r1, #16]
    e2f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e2fc:	4293      	cmp	r3, r2
    e2fe:	bfb8      	it	lt
    e300:	4613      	movlt	r3, r2
    e302:	f8c9 3000 	str.w	r3, [r9]
    e306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    e30a:	4606      	mov	r6, r0
    e30c:	460c      	mov	r4, r1
    e30e:	b112      	cbz	r2, e316 <_printf_common+0x2a>
    e310:	3301      	adds	r3, #1
    e312:	f8c9 3000 	str.w	r3, [r9]
    e316:	6823      	ldr	r3, [r4, #0]
    e318:	0699      	lsls	r1, r3, #26
    e31a:	bf42      	ittt	mi
    e31c:	f8d9 3000 	ldrmi.w	r3, [r9]
    e320:	3302      	addmi	r3, #2
    e322:	f8c9 3000 	strmi.w	r3, [r9]
    e326:	6825      	ldr	r5, [r4, #0]
    e328:	f015 0506 	ands.w	r5, r5, #6
    e32c:	d107      	bne.n	e33e <_printf_common+0x52>
    e32e:	f104 0a19 	add.w	sl, r4, #25
    e332:	68e3      	ldr	r3, [r4, #12]
    e334:	f8d9 2000 	ldr.w	r2, [r9]
    e338:	1a9b      	subs	r3, r3, r2
    e33a:	429d      	cmp	r5, r3
    e33c:	db29      	blt.n	e392 <_printf_common+0xa6>
    e33e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    e342:	6822      	ldr	r2, [r4, #0]
    e344:	3300      	adds	r3, #0
    e346:	bf18      	it	ne
    e348:	2301      	movne	r3, #1
    e34a:	0692      	lsls	r2, r2, #26
    e34c:	d42e      	bmi.n	e3ac <_printf_common+0xc0>
    e34e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    e352:	4639      	mov	r1, r7
    e354:	4630      	mov	r0, r6
    e356:	47c0      	blx	r8
    e358:	3001      	adds	r0, #1
    e35a:	d021      	beq.n	e3a0 <_printf_common+0xb4>
    e35c:	6823      	ldr	r3, [r4, #0]
    e35e:	68e5      	ldr	r5, [r4, #12]
    e360:	f8d9 2000 	ldr.w	r2, [r9]
    e364:	f003 0306 	and.w	r3, r3, #6
    e368:	2b04      	cmp	r3, #4
    e36a:	bf08      	it	eq
    e36c:	1aad      	subeq	r5, r5, r2
    e36e:	68a3      	ldr	r3, [r4, #8]
    e370:	6922      	ldr	r2, [r4, #16]
    e372:	bf0c      	ite	eq
    e374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    e378:	2500      	movne	r5, #0
    e37a:	4293      	cmp	r3, r2
    e37c:	bfc4      	itt	gt
    e37e:	1a9b      	subgt	r3, r3, r2
    e380:	18ed      	addgt	r5, r5, r3
    e382:	f04f 0900 	mov.w	r9, #0
    e386:	341a      	adds	r4, #26
    e388:	454d      	cmp	r5, r9
    e38a:	d11b      	bne.n	e3c4 <_printf_common+0xd8>
    e38c:	2000      	movs	r0, #0
    e38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e392:	2301      	movs	r3, #1
    e394:	4652      	mov	r2, sl
    e396:	4639      	mov	r1, r7
    e398:	4630      	mov	r0, r6
    e39a:	47c0      	blx	r8
    e39c:	3001      	adds	r0, #1
    e39e:	d103      	bne.n	e3a8 <_printf_common+0xbc>
    e3a0:	f04f 30ff 	mov.w	r0, #4294967295
    e3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3a8:	3501      	adds	r5, #1
    e3aa:	e7c2      	b.n	e332 <_printf_common+0x46>
    e3ac:	18e1      	adds	r1, r4, r3
    e3ae:	1c5a      	adds	r2, r3, #1
    e3b0:	2030      	movs	r0, #48	; 0x30
    e3b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    e3b6:	4422      	add	r2, r4
    e3b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    e3bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    e3c0:	3302      	adds	r3, #2
    e3c2:	e7c4      	b.n	e34e <_printf_common+0x62>
    e3c4:	2301      	movs	r3, #1
    e3c6:	4622      	mov	r2, r4
    e3c8:	4639      	mov	r1, r7
    e3ca:	4630      	mov	r0, r6
    e3cc:	47c0      	blx	r8
    e3ce:	3001      	adds	r0, #1
    e3d0:	d0e6      	beq.n	e3a0 <_printf_common+0xb4>
    e3d2:	f109 0901 	add.w	r9, r9, #1
    e3d6:	e7d7      	b.n	e388 <_printf_common+0x9c>

0000e3d8 <_printf_i>:
    e3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e3dc:	4617      	mov	r7, r2
    e3de:	7e0a      	ldrb	r2, [r1, #24]
    e3e0:	b085      	sub	sp, #20
    e3e2:	2a6e      	cmp	r2, #110	; 0x6e
    e3e4:	4698      	mov	r8, r3
    e3e6:	4606      	mov	r6, r0
    e3e8:	460c      	mov	r4, r1
    e3ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e3ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    e3f0:	f000 80bc 	beq.w	e56c <_printf_i+0x194>
    e3f4:	d81a      	bhi.n	e42c <_printf_i+0x54>
    e3f6:	2a63      	cmp	r2, #99	; 0x63
    e3f8:	d02e      	beq.n	e458 <_printf_i+0x80>
    e3fa:	d80a      	bhi.n	e412 <_printf_i+0x3a>
    e3fc:	2a00      	cmp	r2, #0
    e3fe:	f000 80c8 	beq.w	e592 <_printf_i+0x1ba>
    e402:	2a58      	cmp	r2, #88	; 0x58
    e404:	f000 808a 	beq.w	e51c <_printf_i+0x144>
    e408:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e40c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    e410:	e02a      	b.n	e468 <_printf_i+0x90>
    e412:	2a64      	cmp	r2, #100	; 0x64
    e414:	d001      	beq.n	e41a <_printf_i+0x42>
    e416:	2a69      	cmp	r2, #105	; 0x69
    e418:	d1f6      	bne.n	e408 <_printf_i+0x30>
    e41a:	6821      	ldr	r1, [r4, #0]
    e41c:	681a      	ldr	r2, [r3, #0]
    e41e:	f011 0f80 	tst.w	r1, #128	; 0x80
    e422:	d023      	beq.n	e46c <_printf_i+0x94>
    e424:	1d11      	adds	r1, r2, #4
    e426:	6019      	str	r1, [r3, #0]
    e428:	6813      	ldr	r3, [r2, #0]
    e42a:	e027      	b.n	e47c <_printf_i+0xa4>
    e42c:	2a73      	cmp	r2, #115	; 0x73
    e42e:	f000 80b4 	beq.w	e59a <_printf_i+0x1c2>
    e432:	d808      	bhi.n	e446 <_printf_i+0x6e>
    e434:	2a6f      	cmp	r2, #111	; 0x6f
    e436:	d02a      	beq.n	e48e <_printf_i+0xb6>
    e438:	2a70      	cmp	r2, #112	; 0x70
    e43a:	d1e5      	bne.n	e408 <_printf_i+0x30>
    e43c:	680a      	ldr	r2, [r1, #0]
    e43e:	f042 0220 	orr.w	r2, r2, #32
    e442:	600a      	str	r2, [r1, #0]
    e444:	e003      	b.n	e44e <_printf_i+0x76>
    e446:	2a75      	cmp	r2, #117	; 0x75
    e448:	d021      	beq.n	e48e <_printf_i+0xb6>
    e44a:	2a78      	cmp	r2, #120	; 0x78
    e44c:	d1dc      	bne.n	e408 <_printf_i+0x30>
    e44e:	2278      	movs	r2, #120	; 0x78
    e450:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    e454:	496e      	ldr	r1, [pc, #440]	; (e610 <_printf_i+0x238>)
    e456:	e064      	b.n	e522 <_printf_i+0x14a>
    e458:	681a      	ldr	r2, [r3, #0]
    e45a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    e45e:	1d11      	adds	r1, r2, #4
    e460:	6019      	str	r1, [r3, #0]
    e462:	6813      	ldr	r3, [r2, #0]
    e464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    e468:	2301      	movs	r3, #1
    e46a:	e0a3      	b.n	e5b4 <_printf_i+0x1dc>
    e46c:	f011 0f40 	tst.w	r1, #64	; 0x40
    e470:	f102 0104 	add.w	r1, r2, #4
    e474:	6019      	str	r1, [r3, #0]
    e476:	d0d7      	beq.n	e428 <_printf_i+0x50>
    e478:	f9b2 3000 	ldrsh.w	r3, [r2]
    e47c:	2b00      	cmp	r3, #0
    e47e:	da03      	bge.n	e488 <_printf_i+0xb0>
    e480:	222d      	movs	r2, #45	; 0x2d
    e482:	425b      	negs	r3, r3
    e484:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    e488:	4962      	ldr	r1, [pc, #392]	; (e614 <_printf_i+0x23c>)
    e48a:	220a      	movs	r2, #10
    e48c:	e017      	b.n	e4be <_printf_i+0xe6>
    e48e:	6820      	ldr	r0, [r4, #0]
    e490:	6819      	ldr	r1, [r3, #0]
    e492:	f010 0f80 	tst.w	r0, #128	; 0x80
    e496:	d003      	beq.n	e4a0 <_printf_i+0xc8>
    e498:	1d08      	adds	r0, r1, #4
    e49a:	6018      	str	r0, [r3, #0]
    e49c:	680b      	ldr	r3, [r1, #0]
    e49e:	e006      	b.n	e4ae <_printf_i+0xd6>
    e4a0:	f010 0f40 	tst.w	r0, #64	; 0x40
    e4a4:	f101 0004 	add.w	r0, r1, #4
    e4a8:	6018      	str	r0, [r3, #0]
    e4aa:	d0f7      	beq.n	e49c <_printf_i+0xc4>
    e4ac:	880b      	ldrh	r3, [r1, #0]
    e4ae:	4959      	ldr	r1, [pc, #356]	; (e614 <_printf_i+0x23c>)
    e4b0:	2a6f      	cmp	r2, #111	; 0x6f
    e4b2:	bf14      	ite	ne
    e4b4:	220a      	movne	r2, #10
    e4b6:	2208      	moveq	r2, #8
    e4b8:	2000      	movs	r0, #0
    e4ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    e4be:	6865      	ldr	r5, [r4, #4]
    e4c0:	60a5      	str	r5, [r4, #8]
    e4c2:	2d00      	cmp	r5, #0
    e4c4:	f2c0 809c 	blt.w	e600 <_printf_i+0x228>
    e4c8:	6820      	ldr	r0, [r4, #0]
    e4ca:	f020 0004 	bic.w	r0, r0, #4
    e4ce:	6020      	str	r0, [r4, #0]
    e4d0:	2b00      	cmp	r3, #0
    e4d2:	d13f      	bne.n	e554 <_printf_i+0x17c>
    e4d4:	2d00      	cmp	r5, #0
    e4d6:	f040 8095 	bne.w	e604 <_printf_i+0x22c>
    e4da:	4675      	mov	r5, lr
    e4dc:	2a08      	cmp	r2, #8
    e4de:	d10b      	bne.n	e4f8 <_printf_i+0x120>
    e4e0:	6823      	ldr	r3, [r4, #0]
    e4e2:	07da      	lsls	r2, r3, #31
    e4e4:	d508      	bpl.n	e4f8 <_printf_i+0x120>
    e4e6:	6923      	ldr	r3, [r4, #16]
    e4e8:	6862      	ldr	r2, [r4, #4]
    e4ea:	429a      	cmp	r2, r3
    e4ec:	bfde      	ittt	le
    e4ee:	2330      	movle	r3, #48	; 0x30
    e4f0:	f805 3c01 	strble.w	r3, [r5, #-1]
    e4f4:	f105 35ff 	addle.w	r5, r5, #4294967295
    e4f8:	ebae 0305 	sub.w	r3, lr, r5
    e4fc:	6123      	str	r3, [r4, #16]
    e4fe:	f8cd 8000 	str.w	r8, [sp]
    e502:	463b      	mov	r3, r7
    e504:	aa03      	add	r2, sp, #12
    e506:	4621      	mov	r1, r4
    e508:	4630      	mov	r0, r6
    e50a:	f7ff feef 	bl	e2ec <_printf_common>
    e50e:	3001      	adds	r0, #1
    e510:	d155      	bne.n	e5be <_printf_i+0x1e6>
    e512:	f04f 30ff 	mov.w	r0, #4294967295
    e516:	b005      	add	sp, #20
    e518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e51c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    e520:	493c      	ldr	r1, [pc, #240]	; (e614 <_printf_i+0x23c>)
    e522:	6822      	ldr	r2, [r4, #0]
    e524:	6818      	ldr	r0, [r3, #0]
    e526:	f012 0f80 	tst.w	r2, #128	; 0x80
    e52a:	f100 0504 	add.w	r5, r0, #4
    e52e:	601d      	str	r5, [r3, #0]
    e530:	d001      	beq.n	e536 <_printf_i+0x15e>
    e532:	6803      	ldr	r3, [r0, #0]
    e534:	e002      	b.n	e53c <_printf_i+0x164>
    e536:	0655      	lsls	r5, r2, #25
    e538:	d5fb      	bpl.n	e532 <_printf_i+0x15a>
    e53a:	8803      	ldrh	r3, [r0, #0]
    e53c:	07d0      	lsls	r0, r2, #31
    e53e:	bf44      	itt	mi
    e540:	f042 0220 	orrmi.w	r2, r2, #32
    e544:	6022      	strmi	r2, [r4, #0]
    e546:	b91b      	cbnz	r3, e550 <_printf_i+0x178>
    e548:	6822      	ldr	r2, [r4, #0]
    e54a:	f022 0220 	bic.w	r2, r2, #32
    e54e:	6022      	str	r2, [r4, #0]
    e550:	2210      	movs	r2, #16
    e552:	e7b1      	b.n	e4b8 <_printf_i+0xe0>
    e554:	4675      	mov	r5, lr
    e556:	fbb3 f0f2 	udiv	r0, r3, r2
    e55a:	fb02 3310 	mls	r3, r2, r0, r3
    e55e:	5ccb      	ldrb	r3, [r1, r3]
    e560:	f805 3d01 	strb.w	r3, [r5, #-1]!
    e564:	4603      	mov	r3, r0
    e566:	2800      	cmp	r0, #0
    e568:	d1f5      	bne.n	e556 <_printf_i+0x17e>
    e56a:	e7b7      	b.n	e4dc <_printf_i+0x104>
    e56c:	6808      	ldr	r0, [r1, #0]
    e56e:	681a      	ldr	r2, [r3, #0]
    e570:	6949      	ldr	r1, [r1, #20]
    e572:	f010 0f80 	tst.w	r0, #128	; 0x80
    e576:	d004      	beq.n	e582 <_printf_i+0x1aa>
    e578:	1d10      	adds	r0, r2, #4
    e57a:	6018      	str	r0, [r3, #0]
    e57c:	6813      	ldr	r3, [r2, #0]
    e57e:	6019      	str	r1, [r3, #0]
    e580:	e007      	b.n	e592 <_printf_i+0x1ba>
    e582:	f010 0f40 	tst.w	r0, #64	; 0x40
    e586:	f102 0004 	add.w	r0, r2, #4
    e58a:	6018      	str	r0, [r3, #0]
    e58c:	6813      	ldr	r3, [r2, #0]
    e58e:	d0f6      	beq.n	e57e <_printf_i+0x1a6>
    e590:	8019      	strh	r1, [r3, #0]
    e592:	2300      	movs	r3, #0
    e594:	6123      	str	r3, [r4, #16]
    e596:	4675      	mov	r5, lr
    e598:	e7b1      	b.n	e4fe <_printf_i+0x126>
    e59a:	681a      	ldr	r2, [r3, #0]
    e59c:	1d11      	adds	r1, r2, #4
    e59e:	6019      	str	r1, [r3, #0]
    e5a0:	6815      	ldr	r5, [r2, #0]
    e5a2:	6862      	ldr	r2, [r4, #4]
    e5a4:	2100      	movs	r1, #0
    e5a6:	4628      	mov	r0, r5
    e5a8:	f000 f8d2 	bl	e750 <memchr>
    e5ac:	b108      	cbz	r0, e5b2 <_printf_i+0x1da>
    e5ae:	1b40      	subs	r0, r0, r5
    e5b0:	6060      	str	r0, [r4, #4]
    e5b2:	6863      	ldr	r3, [r4, #4]
    e5b4:	6123      	str	r3, [r4, #16]
    e5b6:	2300      	movs	r3, #0
    e5b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e5bc:	e79f      	b.n	e4fe <_printf_i+0x126>
    e5be:	6923      	ldr	r3, [r4, #16]
    e5c0:	462a      	mov	r2, r5
    e5c2:	4639      	mov	r1, r7
    e5c4:	4630      	mov	r0, r6
    e5c6:	47c0      	blx	r8
    e5c8:	3001      	adds	r0, #1
    e5ca:	d0a2      	beq.n	e512 <_printf_i+0x13a>
    e5cc:	6823      	ldr	r3, [r4, #0]
    e5ce:	079b      	lsls	r3, r3, #30
    e5d0:	d507      	bpl.n	e5e2 <_printf_i+0x20a>
    e5d2:	2500      	movs	r5, #0
    e5d4:	f104 0919 	add.w	r9, r4, #25
    e5d8:	68e3      	ldr	r3, [r4, #12]
    e5da:	9a03      	ldr	r2, [sp, #12]
    e5dc:	1a9b      	subs	r3, r3, r2
    e5de:	429d      	cmp	r5, r3
    e5e0:	db05      	blt.n	e5ee <_printf_i+0x216>
    e5e2:	68e0      	ldr	r0, [r4, #12]
    e5e4:	9b03      	ldr	r3, [sp, #12]
    e5e6:	4298      	cmp	r0, r3
    e5e8:	bfb8      	it	lt
    e5ea:	4618      	movlt	r0, r3
    e5ec:	e793      	b.n	e516 <_printf_i+0x13e>
    e5ee:	2301      	movs	r3, #1
    e5f0:	464a      	mov	r2, r9
    e5f2:	4639      	mov	r1, r7
    e5f4:	4630      	mov	r0, r6
    e5f6:	47c0      	blx	r8
    e5f8:	3001      	adds	r0, #1
    e5fa:	d08a      	beq.n	e512 <_printf_i+0x13a>
    e5fc:	3501      	adds	r5, #1
    e5fe:	e7eb      	b.n	e5d8 <_printf_i+0x200>
    e600:	2b00      	cmp	r3, #0
    e602:	d1a7      	bne.n	e554 <_printf_i+0x17c>
    e604:	780b      	ldrb	r3, [r1, #0]
    e606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    e60a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e60e:	e765      	b.n	e4dc <_printf_i+0x104>
    e610:	0000f692 	.word	0x0000f692
    e614:	0000f681 	.word	0x0000f681

0000e618 <__sread>:
    e618:	b510      	push	{r4, lr}
    e61a:	460c      	mov	r4, r1
    e61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e620:	f000 f926 	bl	e870 <_read_r>
    e624:	2800      	cmp	r0, #0
    e626:	bfab      	itete	ge
    e628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    e62a:	89a3      	ldrhlt	r3, [r4, #12]
    e62c:	181b      	addge	r3, r3, r0
    e62e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    e632:	bfac      	ite	ge
    e634:	6563      	strge	r3, [r4, #84]	; 0x54
    e636:	81a3      	strhlt	r3, [r4, #12]
    e638:	bd10      	pop	{r4, pc}

0000e63a <__swrite>:
    e63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e63e:	461f      	mov	r7, r3
    e640:	898b      	ldrh	r3, [r1, #12]
    e642:	05db      	lsls	r3, r3, #23
    e644:	4605      	mov	r5, r0
    e646:	460c      	mov	r4, r1
    e648:	4616      	mov	r6, r2
    e64a:	d505      	bpl.n	e658 <__swrite+0x1e>
    e64c:	2302      	movs	r3, #2
    e64e:	2200      	movs	r2, #0
    e650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e654:	f000 f868 	bl	e728 <_lseek_r>
    e658:	89a3      	ldrh	r3, [r4, #12]
    e65a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e65e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e662:	81a3      	strh	r3, [r4, #12]
    e664:	4632      	mov	r2, r6
    e666:	463b      	mov	r3, r7
    e668:	4628      	mov	r0, r5
    e66a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e66e:	f000 b817 	b.w	e6a0 <_write_r>

0000e672 <__sseek>:
    e672:	b510      	push	{r4, lr}
    e674:	460c      	mov	r4, r1
    e676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e67a:	f000 f855 	bl	e728 <_lseek_r>
    e67e:	1c43      	adds	r3, r0, #1
    e680:	89a3      	ldrh	r3, [r4, #12]
    e682:	bf15      	itete	ne
    e684:	6560      	strne	r0, [r4, #84]	; 0x54
    e686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    e68a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    e68e:	81a3      	strheq	r3, [r4, #12]
    e690:	bf18      	it	ne
    e692:	81a3      	strhne	r3, [r4, #12]
    e694:	bd10      	pop	{r4, pc}

0000e696 <__sclose>:
    e696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e69a:	f000 b813 	b.w	e6c4 <_close_r>
	...

0000e6a0 <_write_r>:
    e6a0:	b538      	push	{r3, r4, r5, lr}
    e6a2:	4c07      	ldr	r4, [pc, #28]	; (e6c0 <_write_r+0x20>)
    e6a4:	4605      	mov	r5, r0
    e6a6:	4608      	mov	r0, r1
    e6a8:	4611      	mov	r1, r2
    e6aa:	2200      	movs	r2, #0
    e6ac:	6022      	str	r2, [r4, #0]
    e6ae:	461a      	mov	r2, r3
    e6b0:	f7fd f80a 	bl	b6c8 <_write>
    e6b4:	1c43      	adds	r3, r0, #1
    e6b6:	d102      	bne.n	e6be <_write_r+0x1e>
    e6b8:	6823      	ldr	r3, [r4, #0]
    e6ba:	b103      	cbz	r3, e6be <_write_r+0x1e>
    e6bc:	602b      	str	r3, [r5, #0]
    e6be:	bd38      	pop	{r3, r4, r5, pc}
    e6c0:	2000821c 	.word	0x2000821c

0000e6c4 <_close_r>:
    e6c4:	b538      	push	{r3, r4, r5, lr}
    e6c6:	4c06      	ldr	r4, [pc, #24]	; (e6e0 <_close_r+0x1c>)
    e6c8:	2300      	movs	r3, #0
    e6ca:	4605      	mov	r5, r0
    e6cc:	4608      	mov	r0, r1
    e6ce:	6023      	str	r3, [r4, #0]
    e6d0:	f7f8 fed0 	bl	7474 <_close>
    e6d4:	1c43      	adds	r3, r0, #1
    e6d6:	d102      	bne.n	e6de <_close_r+0x1a>
    e6d8:	6823      	ldr	r3, [r4, #0]
    e6da:	b103      	cbz	r3, e6de <_close_r+0x1a>
    e6dc:	602b      	str	r3, [r5, #0]
    e6de:	bd38      	pop	{r3, r4, r5, pc}
    e6e0:	2000821c 	.word	0x2000821c

0000e6e4 <_fstat_r>:
    e6e4:	b538      	push	{r3, r4, r5, lr}
    e6e6:	4c07      	ldr	r4, [pc, #28]	; (e704 <_fstat_r+0x20>)
    e6e8:	2300      	movs	r3, #0
    e6ea:	4605      	mov	r5, r0
    e6ec:	4608      	mov	r0, r1
    e6ee:	4611      	mov	r1, r2
    e6f0:	6023      	str	r3, [r4, #0]
    e6f2:	f7f8 fec2 	bl	747a <_fstat>
    e6f6:	1c43      	adds	r3, r0, #1
    e6f8:	d102      	bne.n	e700 <_fstat_r+0x1c>
    e6fa:	6823      	ldr	r3, [r4, #0]
    e6fc:	b103      	cbz	r3, e700 <_fstat_r+0x1c>
    e6fe:	602b      	str	r3, [r5, #0]
    e700:	bd38      	pop	{r3, r4, r5, pc}
    e702:	bf00      	nop
    e704:	2000821c 	.word	0x2000821c

0000e708 <_isatty_r>:
    e708:	b538      	push	{r3, r4, r5, lr}
    e70a:	4c06      	ldr	r4, [pc, #24]	; (e724 <_isatty_r+0x1c>)
    e70c:	2300      	movs	r3, #0
    e70e:	4605      	mov	r5, r0
    e710:	4608      	mov	r0, r1
    e712:	6023      	str	r3, [r4, #0]
    e714:	f7f8 feb6 	bl	7484 <_isatty>
    e718:	1c43      	adds	r3, r0, #1
    e71a:	d102      	bne.n	e722 <_isatty_r+0x1a>
    e71c:	6823      	ldr	r3, [r4, #0]
    e71e:	b103      	cbz	r3, e722 <_isatty_r+0x1a>
    e720:	602b      	str	r3, [r5, #0]
    e722:	bd38      	pop	{r3, r4, r5, pc}
    e724:	2000821c 	.word	0x2000821c

0000e728 <_lseek_r>:
    e728:	b538      	push	{r3, r4, r5, lr}
    e72a:	4c07      	ldr	r4, [pc, #28]	; (e748 <_lseek_r+0x20>)
    e72c:	4605      	mov	r5, r0
    e72e:	4608      	mov	r0, r1
    e730:	4611      	mov	r1, r2
    e732:	2200      	movs	r2, #0
    e734:	6022      	str	r2, [r4, #0]
    e736:	461a      	mov	r2, r3
    e738:	f7f8 fea6 	bl	7488 <_lseek>
    e73c:	1c43      	adds	r3, r0, #1
    e73e:	d102      	bne.n	e746 <_lseek_r+0x1e>
    e740:	6823      	ldr	r3, [r4, #0]
    e742:	b103      	cbz	r3, e746 <_lseek_r+0x1e>
    e744:	602b      	str	r3, [r5, #0]
    e746:	bd38      	pop	{r3, r4, r5, pc}
    e748:	2000821c 	.word	0x2000821c
    e74c:	00000000 	.word	0x00000000

0000e750 <memchr>:
    e750:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e754:	2a10      	cmp	r2, #16
    e756:	db2b      	blt.n	e7b0 <memchr+0x60>
    e758:	f010 0f07 	tst.w	r0, #7
    e75c:	d008      	beq.n	e770 <memchr+0x20>
    e75e:	f810 3b01 	ldrb.w	r3, [r0], #1
    e762:	3a01      	subs	r2, #1
    e764:	428b      	cmp	r3, r1
    e766:	d02d      	beq.n	e7c4 <memchr+0x74>
    e768:	f010 0f07 	tst.w	r0, #7
    e76c:	b342      	cbz	r2, e7c0 <memchr+0x70>
    e76e:	d1f6      	bne.n	e75e <memchr+0xe>
    e770:	b4f0      	push	{r4, r5, r6, r7}
    e772:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e776:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e77a:	f022 0407 	bic.w	r4, r2, #7
    e77e:	f07f 0700 	mvns.w	r7, #0
    e782:	2300      	movs	r3, #0
    e784:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e788:	3c08      	subs	r4, #8
    e78a:	ea85 0501 	eor.w	r5, r5, r1
    e78e:	ea86 0601 	eor.w	r6, r6, r1
    e792:	fa85 f547 	uadd8	r5, r5, r7
    e796:	faa3 f587 	sel	r5, r3, r7
    e79a:	fa86 f647 	uadd8	r6, r6, r7
    e79e:	faa5 f687 	sel	r6, r5, r7
    e7a2:	b98e      	cbnz	r6, e7c8 <memchr+0x78>
    e7a4:	d1ee      	bne.n	e784 <memchr+0x34>
    e7a6:	bcf0      	pop	{r4, r5, r6, r7}
    e7a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e7ac:	f002 0207 	and.w	r2, r2, #7
    e7b0:	b132      	cbz	r2, e7c0 <memchr+0x70>
    e7b2:	f810 3b01 	ldrb.w	r3, [r0], #1
    e7b6:	3a01      	subs	r2, #1
    e7b8:	ea83 0301 	eor.w	r3, r3, r1
    e7bc:	b113      	cbz	r3, e7c4 <memchr+0x74>
    e7be:	d1f8      	bne.n	e7b2 <memchr+0x62>
    e7c0:	2000      	movs	r0, #0
    e7c2:	4770      	bx	lr
    e7c4:	3801      	subs	r0, #1
    e7c6:	4770      	bx	lr
    e7c8:	2d00      	cmp	r5, #0
    e7ca:	bf06      	itte	eq
    e7cc:	4635      	moveq	r5, r6
    e7ce:	3803      	subeq	r0, #3
    e7d0:	3807      	subne	r0, #7
    e7d2:	f015 0f01 	tst.w	r5, #1
    e7d6:	d107      	bne.n	e7e8 <memchr+0x98>
    e7d8:	3001      	adds	r0, #1
    e7da:	f415 7f80 	tst.w	r5, #256	; 0x100
    e7de:	bf02      	ittt	eq
    e7e0:	3001      	addeq	r0, #1
    e7e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e7e6:	3001      	addeq	r0, #1
    e7e8:	bcf0      	pop	{r4, r5, r6, r7}
    e7ea:	3801      	subs	r0, #1
    e7ec:	4770      	bx	lr
    e7ee:	bf00      	nop

0000e7f0 <memmove>:
    e7f0:	4288      	cmp	r0, r1
    e7f2:	b510      	push	{r4, lr}
    e7f4:	eb01 0302 	add.w	r3, r1, r2
    e7f8:	d803      	bhi.n	e802 <memmove+0x12>
    e7fa:	1e42      	subs	r2, r0, #1
    e7fc:	4299      	cmp	r1, r3
    e7fe:	d10c      	bne.n	e81a <memmove+0x2a>
    e800:	bd10      	pop	{r4, pc}
    e802:	4298      	cmp	r0, r3
    e804:	d2f9      	bcs.n	e7fa <memmove+0xa>
    e806:	1881      	adds	r1, r0, r2
    e808:	1ad2      	subs	r2, r2, r3
    e80a:	42d3      	cmn	r3, r2
    e80c:	d100      	bne.n	e810 <memmove+0x20>
    e80e:	bd10      	pop	{r4, pc}
    e810:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    e814:	f801 4d01 	strb.w	r4, [r1, #-1]!
    e818:	e7f7      	b.n	e80a <memmove+0x1a>
    e81a:	f811 4b01 	ldrb.w	r4, [r1], #1
    e81e:	f802 4f01 	strb.w	r4, [r2, #1]!
    e822:	e7eb      	b.n	e7fc <memmove+0xc>

0000e824 <_realloc_r>:
    e824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e826:	4607      	mov	r7, r0
    e828:	4614      	mov	r4, r2
    e82a:	460e      	mov	r6, r1
    e82c:	b921      	cbnz	r1, e838 <_realloc_r+0x14>
    e82e:	4611      	mov	r1, r2
    e830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e834:	f7fe be5e 	b.w	d4f4 <_malloc_r>
    e838:	b922      	cbnz	r2, e844 <_realloc_r+0x20>
    e83a:	f7fe fe0d 	bl	d458 <_free_r>
    e83e:	4625      	mov	r5, r4
    e840:	4628      	mov	r0, r5
    e842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e844:	f000 f826 	bl	e894 <_malloc_usable_size_r>
    e848:	4284      	cmp	r4, r0
    e84a:	d90f      	bls.n	e86c <_realloc_r+0x48>
    e84c:	4621      	mov	r1, r4
    e84e:	4638      	mov	r0, r7
    e850:	f7fe fe50 	bl	d4f4 <_malloc_r>
    e854:	4605      	mov	r5, r0
    e856:	2800      	cmp	r0, #0
    e858:	d0f2      	beq.n	e840 <_realloc_r+0x1c>
    e85a:	4631      	mov	r1, r6
    e85c:	4622      	mov	r2, r4
    e85e:	f7fe fde7 	bl	d430 <memcpy>
    e862:	4631      	mov	r1, r6
    e864:	4638      	mov	r0, r7
    e866:	f7fe fdf7 	bl	d458 <_free_r>
    e86a:	e7e9      	b.n	e840 <_realloc_r+0x1c>
    e86c:	4635      	mov	r5, r6
    e86e:	e7e7      	b.n	e840 <_realloc_r+0x1c>

0000e870 <_read_r>:
    e870:	b538      	push	{r3, r4, r5, lr}
    e872:	4c07      	ldr	r4, [pc, #28]	; (e890 <_read_r+0x20>)
    e874:	4605      	mov	r5, r0
    e876:	4608      	mov	r0, r1
    e878:	4611      	mov	r1, r2
    e87a:	2200      	movs	r2, #0
    e87c:	6022      	str	r2, [r4, #0]
    e87e:	461a      	mov	r2, r3
    e880:	f7fc ff12 	bl	b6a8 <_read>
    e884:	1c43      	adds	r3, r0, #1
    e886:	d102      	bne.n	e88e <_read_r+0x1e>
    e888:	6823      	ldr	r3, [r4, #0]
    e88a:	b103      	cbz	r3, e88e <_read_r+0x1e>
    e88c:	602b      	str	r3, [r5, #0]
    e88e:	bd38      	pop	{r3, r4, r5, pc}
    e890:	2000821c 	.word	0x2000821c

0000e894 <_malloc_usable_size_r>:
    e894:	f851 0c04 	ldr.w	r0, [r1, #-4]
    e898:	2800      	cmp	r0, #0
    e89a:	f1a0 0004 	sub.w	r0, r0, #4
    e89e:	bfbc      	itt	lt
    e8a0:	580b      	ldrlt	r3, [r1, r0]
    e8a2:	18c0      	addlt	r0, r0, r3
    e8a4:	4770      	bx	lr
    e8a6:	0000      	movs	r0, r0
    e8a8:	682f2e2e 	.word	0x682f2e2e
    e8ac:	692f6c61 	.word	0x692f6c61
    e8b0:	756c636e 	.word	0x756c636e
    e8b4:	682f6564 	.word	0x682f6564
    e8b8:	775f6c61 	.word	0x775f6c61
    e8bc:	682e7464 	.word	0x682e7464
    e8c0:	00000000 	.word	0x00000000
    e8c4:	7974227b 	.word	0x7974227b
    e8c8:	3a226570 	.word	0x3a226570
    e8cc:	43574822 	.word	0x43574822
    e8d0:	2c224746 	.word	0x2c224746
    e8d4:	61642220 	.word	0x61642220
    e8d8:	3a226174 	.word	0x3a226174
    e8dc:	64252220 	.word	0x64252220
    e8e0:	0a0d7d22 	.word	0x0a0d7d22
    e8e4:	00000000 	.word	0x00000000
    e8e8:	55204f4e 	.word	0x55204f4e
    e8ec:	20524553 	.word	0x20524553
    e8f0:	20574f52 	.word	0x20574f52
    e8f4:	43454843 	.word	0x43454843
    e8f8:	0000214b 	.word	0x0000214b
    e8fc:	7974227b 	.word	0x7974227b
    e900:	3a226570 	.word	0x3a226570
    e904:	52415722 	.word	0x52415722
    e908:	474e494e 	.word	0x474e494e
    e90c:	22202c22 	.word	0x22202c22
    e910:	61746164 	.word	0x61746164
    e914:	5b203a22 	.word	0x5b203a22
    e918:	22732522 	.word	0x22732522
    e91c:	0a0d7d5d 	.word	0x0a0d7d5d
    e920:	00000000 	.word	0x00000000
    e924:	55206f4e 	.word	0x55206f4e
    e928:	2074696e 	.word	0x2074696e
    e92c:	74736554 	.word	0x74736554
    e930:	00000000 	.word	0x00000000
    e934:	48206f4e 	.word	0x48206f4e
    e938:	77647261 	.word	0x77647261
    e93c:	20657261 	.word	0x20657261
    e940:	74736554 	.word	0x74736554
    e944:	00000000 	.word	0x00000000
    e948:	64616552 	.word	0x64616552
    e94c:	20676e69 	.word	0x20676e69
    e950:	72657355 	.word	0x72657355
    e954:	776f5220 	.word	0x776f5220
    e958:	00000000 	.word	0x00000000
    e95c:	7974227b 	.word	0x7974227b
    e960:	3a226570 	.word	0x3a226570
    e964:	474f4c22 	.word	0x474f4c22
    e968:	22202c22 	.word	0x22202c22
    e96c:	61746164 	.word	0x61746164
    e970:	5b203a22 	.word	0x5b203a22
    e974:	22732522 	.word	0x22732522
    e978:	0a0d7d5d 	.word	0x0a0d7d5d
    e97c:	00000000 	.word	0x00000000
    e980:	69726556 	.word	0x69726556
    e984:	6e697966 	.word	0x6e697966
    e988:	73552067 	.word	0x73552067
    e98c:	52207265 	.word	0x52207265
    e990:	0000776f 	.word	0x0000776f
    e994:	61647055 	.word	0x61647055
    e998:	676e6974 	.word	0x676e6974
    e99c:	65735520 	.word	0x65735520
    e9a0:	6f522072 	.word	0x6f522072
    e9a4:	00000077 	.word	0x00000077
    e9a8:	74737953 	.word	0x74737953
    e9ac:	52206d65 	.word	0x52206d65
    e9b0:	74657365 	.word	0x74657365
    e9b4:	00000000 	.word	0x00000000
    e9b8:	68636e55 	.word	0x68636e55
    e9bc:	65676e61 	.word	0x65676e61
    e9c0:	73552064 	.word	0x73552064
    e9c4:	52207265 	.word	0x52207265
    e9c8:	0000776f 	.word	0x0000776f
    e9cc:	656d6954 	.word	0x656d6954
    e9d0:	2074756f 	.word	0x2074756f
    e9d4:	63736944 	.word	0x63736944
    e9d8:	656e6e6f 	.word	0x656e6e6f
    e9dc:	26207463 	.word	0x26207463
    e9e0:	73655220 	.word	0x73655220
    e9e4:	52207465 	.word	0x52207465
    e9e8:	69656365 	.word	0x69656365
    e9ec:	00726576 	.word	0x00726576
    e9f0:	656d6954 	.word	0x656d6954
    e9f4:	2074756f 	.word	0x2074756f
    e9f8:	65522026 	.word	0x65522026
    e9fc:	20746573 	.word	0x20746573
    ea00:	65636552 	.word	0x65636552
    ea04:	72657669 	.word	0x72657669
    ea08:	00000000 	.word	0x00000000
    ea0c:	645f7872 	.word	0x645f7872
    ea10:	6c62756f 	.word	0x6c62756f
    ea14:	75625f65 	.word	0x75625f65
    ea18:	72656666 	.word	0x72656666
    ea1c:	65766f20 	.word	0x65766f20
    ea20:	6e757272 	.word	0x6e757272
    ea24:	00003120 	.word	0x00003120
    ea28:	645f7872 	.word	0x645f7872
    ea2c:	6c62756f 	.word	0x6c62756f
    ea30:	75625f65 	.word	0x75625f65
    ea34:	72656666 	.word	0x72656666
    ea38:	65766f20 	.word	0x65766f20
    ea3c:	6e757272 	.word	0x6e757272
    ea40:	00003220 	.word	0x00003220
    ea44:	645f7872 	.word	0x645f7872
    ea48:	6c62756f 	.word	0x6c62756f
    ea4c:	75625f65 	.word	0x75625f65
    ea50:	72656666 	.word	0x72656666
    ea54:	65766f20 	.word	0x65766f20
    ea58:	6e757272 	.word	0x6e757272
    ea5c:	00003320 	.word	0x00003320
    ea60:	6d617246 	.word	0x6d617246
    ea64:	74532065 	.word	0x74532065
    ea68:	20747261 	.word	0x20747261
    ea6c:	7366664f 	.word	0x7366664f
    ea70:	00007465 	.word	0x00007465
    ea74:	6e6e6f43 	.word	0x6e6e6f43
    ea78:	00746365 	.word	0x00746365
    ea7c:	7974227b 	.word	0x7974227b
    ea80:	3a226570 	.word	0x3a226570
    ea84:	41572220 	.word	0x41572220
    ea88:	4e494e52 	.word	0x4e494e52
    ea8c:	202c2247 	.word	0x202c2247
    ea90:	74616422 	.word	0x74616422
    ea94:	203a2261 	.word	0x203a2261
    ea98:	6e55225b 	.word	0x6e55225b
    ea9c:	776f6e6b 	.word	0x776f6e6b
    eaa0:	73654d20 	.word	0x73654d20
    eaa4:	65676173 	.word	0x65676173
    eaa8:	70795420 	.word	0x70795420
    eaac:	7d5d2265 	.word	0x7d5d2265
    eab0:	0000000d 	.word	0x0000000d
    eab4:	7974227b 	.word	0x7974227b
    eab8:	3a226570 	.word	0x3a226570
    eabc:	41572220 	.word	0x41572220
    eac0:	4e494e52 	.word	0x4e494e52
    eac4:	202c2247 	.word	0x202c2247
    eac8:	74616422 	.word	0x74616422
    eacc:	203a2261 	.word	0x203a2261
    ead0:	6e49225b 	.word	0x6e49225b
    ead4:	696c6176 	.word	0x696c6176
    ead8:	68432064 	.word	0x68432064
    eadc:	736b6365 	.word	0x736b6365
    eae0:	5d226d75 	.word	0x5d226d75
    eae4:	00000d7d 	.word	0x00000d7d
    eae8:	7974227b 	.word	0x7974227b
    eaec:	3a226570 	.word	0x3a226570
    eaf0:	52452220 	.word	0x52452220
    eaf4:	22524f52 	.word	0x22524f52
    eaf8:	6422202c 	.word	0x6422202c
    eafc:	22617461 	.word	0x22617461
    eb00:	225b203a 	.word	0x225b203a
    eb04:	6d617246 	.word	0x6d617246
    eb08:	72452065 	.word	0x72452065
    eb0c:	22726f72 	.word	0x22726f72
    eb10:	000d7d5d 	.word	0x000d7d5d
    eb14:	7974227b 	.word	0x7974227b
    eb18:	3a226570 	.word	0x3a226570
    eb1c:	52452220 	.word	0x52452220
    eb20:	22524f52 	.word	0x22524f52
    eb24:	6422202c 	.word	0x6422202c
    eb28:	22617461 	.word	0x22617461
    eb2c:	225b203a 	.word	0x225b203a
    eb30:	69726150 	.word	0x69726150
    eb34:	45207974 	.word	0x45207974
    eb38:	726f7272 	.word	0x726f7272
    eb3c:	0d7d5d22 	.word	0x0d7d5d22
    eb40:	00000000 	.word	0x00000000
    eb44:	63256325 	.word	0x63256325
    eb48:	63256325 	.word	0x63256325
    eb4c:	78323025 	.word	0x78323025
    eb50:	78323025 	.word	0x78323025
    eb54:	78323025 	.word	0x78323025
    eb58:	30306325 	.word	0x30306325
    eb5c:	0000000a 	.word	0x0000000a
    eb60:	61656c43 	.word	0x61656c43
    eb64:	6f6c4772 	.word	0x6f6c4772
    eb68:	0a6c6162 	.word	0x0a6c6162
    eb6c:	00000000 	.word	0x00000000
    eb70:	30353002 	.word	0x30353002
    eb74:	30304266 	.word	0x30304266
    eb78:	30303030 	.word	0x30303030
    eb7c:	03303031 	.word	0x03303031
    eb80:	00000000 	.word	0x00000000
    eb84:	30256325 	.word	0x30256325
    eb88:	2e5f7833 	.word	0x2e5f7833
    eb8c:	2e2e2e2e 	.word	0x2e2e2e2e
    eb90:	252e2e2e 	.word	0x252e2e2e
    eb94:	00000063 	.word	0x00000063
    eb98:	30353002 	.word	0x30353002
    eb9c:	30304266 	.word	0x30304266
    eba0:	30303030 	.word	0x30303030
    eba4:	03344238 	.word	0x03344238
    eba8:	30333002 	.word	0x30333002
    ebac:	03354266 	.word	0x03354266
    ebb0:	00000000 	.word	0x00000000
    ebb4:	30353002 	.word	0x30353002
    ebb8:	30304266 	.word	0x30304266
    ebbc:	30303030 	.word	0x30303030
    ebc0:	03344239 	.word	0x03344239
    ebc4:	00000000 	.word	0x00000000
    ebc8:	30353002 	.word	0x30353002
    ebcc:	30304266 	.word	0x30304266
    ebd0:	30303030 	.word	0x30303030
    ebd4:	03344261 	.word	0x03344261
    ebd8:	30333002 	.word	0x30333002
    ebdc:	03304266 	.word	0x03304266
    ebe0:	00000000 	.word	0x00000000
    ebe4:	30353002 	.word	0x30353002
    ebe8:	30304266 	.word	0x30304266
    ebec:	30303030 	.word	0x30303030
    ebf0:	03344262 	.word	0x03344262
    ebf4:	30333002 	.word	0x30333002
    ebf8:	03304265 	.word	0x03304265
    ebfc:	00000000 	.word	0x00000000
    ec00:	50204955 	.word	0x50204955
    ec04:	7265776f 	.word	0x7265776f
    ec08:	616e4520 	.word	0x616e4520
    ec0c:	00656c62 	.word	0x00656c62
    ec10:	74696e49 	.word	0x74696e49
    ec14:	646f4d20 	.word	0x646f4d20
    ec18:	3a656c75 	.word	0x3a656c75
    ec1c:	314f5020 	.word	0x314f5020
    ec20:	00000036 	.word	0x00000036
    ec24:	74696e49 	.word	0x74696e49
    ec28:	646f4d20 	.word	0x646f4d20
    ec2c:	3a656c75 	.word	0x3a656c75
    ec30:	31554220 	.word	0x31554220
    ec34:	00000036 	.word	0x00000036
    ec38:	74696e49 	.word	0x74696e49
    ec3c:	646f4d20 	.word	0x646f4d20
    ec40:	3a656c75 	.word	0x3a656c75
    ec44:	46425020 	.word	0x46425020
    ec48:	00000034 	.word	0x00000034
    ec4c:	74696e49 	.word	0x74696e49
    ec50:	646f4d20 	.word	0x646f4d20
    ec54:	3a656c75 	.word	0x3a656c75
    ec58:	314e4520 	.word	0x314e4520
    ec5c:	00000036 	.word	0x00000036
    ec60:	74696e49 	.word	0x74696e49
    ec64:	646f4d20 	.word	0x646f4d20
    ec68:	3a656c75 	.word	0x3a656c75
    ec6c:	6b6e5520 	.word	0x6b6e5520
    ec70:	6e776f6e 	.word	0x6e776f6e
    ec74:	646f4d20 	.word	0x646f4d20
    ec78:	00656c75 	.word	0x00656c75
    ec7c:	46435748 	.word	0x46435748
    ec80:	694d2047 	.word	0x694d2047
    ec84:	74616d73 	.word	0x74616d73
    ec88:	00006863 	.word	0x00006863
    ec8c:	0f0e0d0c 	.word	0x0f0e0d0c
    ec90:	0b0a0908 	.word	0x0b0a0908
    ec94:	07060504 	.word	0x07060504
    ec98:	03020100 	.word	0x03020100
    ec9c:	30353002 	.word	0x30353002
    eca0:	30304266 	.word	0x30304266
    eca4:	30304132 	.word	0x30304132
    eca8:	03364135 	.word	0x03364135
    ecac:	30303002 	.word	0x30303002
    ecb0:	39303066 	.word	0x39303066
    ecb4:	41304130 	.word	0x41304130
    ecb8:	30020336 	.word	0x30020336
    ecbc:	41663034 	.word	0x41663034
    ecc0:	41313030 	.word	0x41313030
    ecc4:	00000337 	.word	0x00000337
    ecc8:	30353002 	.word	0x30353002
    eccc:	30304266 	.word	0x30304266
    ecd0:	30304132 	.word	0x30304132
    ecd4:	03364136 	.word	0x03364136
    ecd8:	30303002 	.word	0x30303002
    ecdc:	38303066 	.word	0x38303066
    ece0:	41304130 	.word	0x41304130
    ece4:	30020336 	.word	0x30020336
    ece8:	41663034 	.word	0x41663034
    ecec:	41313030 	.word	0x41313030
    ecf0:	00000337 	.word	0x00000337
    ecf4:	31343002 	.word	0x31343002
    ecf8:	30304166 	.word	0x30304166
    ecfc:	42314231 	.word	0x42314231
    ed00:	03334232 	.word	0x03334232
    ed04:	31343002 	.word	0x31343002
    ed08:	30304166 	.word	0x30304166
    ed0c:	42314232 	.word	0x42314232
    ed10:	03334232 	.word	0x03334232
    ed14:	00000000 	.word	0x00000000
    ed18:	0f0e0d0c 	.word	0x0f0e0d0c
    ed1c:	0b0a0908 	.word	0x0b0a0908
    ed20:	07060504 	.word	0x07060504
    ed24:	03020100 	.word	0x03020100
    ed28:	30353002 	.word	0x30353002
    ed2c:	30304266 	.word	0x30304266
    ed30:	30304133 	.word	0x30304133
    ed34:	03324132 	.word	0x03324132
    ed38:	30303002 	.word	0x30303002
    ed3c:	62303066 	.word	0x62303066
    ed40:	41304130 	.word	0x41304130
    ed44:	30020332 	.word	0x30020332
    ed48:	41663034 	.word	0x41663034
    ed4c:	41313030 	.word	0x41313030
    ed50:	00000333 	.word	0x00000333
    ed54:	30353002 	.word	0x30353002
    ed58:	30304266 	.word	0x30304266
    ed5c:	30304133 	.word	0x30304133
    ed60:	03364135 	.word	0x03364135
    ed64:	30303002 	.word	0x30303002
    ed68:	39303066 	.word	0x39303066
    ed6c:	41304130 	.word	0x41304130
    ed70:	30020336 	.word	0x30020336
    ed74:	41663034 	.word	0x41663034
    ed78:	41323030 	.word	0x41323030
    ed7c:	00000337 	.word	0x00000337
    ed80:	30353002 	.word	0x30353002
    ed84:	30304266 	.word	0x30304266
    ed88:	30304133 	.word	0x30304133
    ed8c:	03364136 	.word	0x03364136
    ed90:	30303002 	.word	0x30303002
    ed94:	38303066 	.word	0x38303066
    ed98:	41304130 	.word	0x41304130
    ed9c:	30020336 	.word	0x30020336
    eda0:	41663034 	.word	0x41663034
    eda4:	41323030 	.word	0x41323030
    eda8:	00000337 	.word	0x00000337
    edac:	0f0e0d0c 	.word	0x0f0e0d0c
    edb0:	0b0a0908 	.word	0x0b0a0908
    edb4:	07060504 	.word	0x07060504
    edb8:	03020100 	.word	0x03020100
    edbc:	30353002 	.word	0x30353002
    edc0:	30304266 	.word	0x30304266
    edc4:	30304131 	.word	0x30304131
    edc8:	03324132 	.word	0x03324132
    edcc:	30303002 	.word	0x30303002
    edd0:	62303066 	.word	0x62303066
    edd4:	41304130 	.word	0x41304130
    edd8:	30020332 	.word	0x30020332
    eddc:	41663034 	.word	0x41663034
    ede0:	41313030 	.word	0x41313030
    ede4:	00000333 	.word	0x00000333
    ede8:	0f0e0d0c 	.word	0x0f0e0d0c
    edec:	0b0a0908 	.word	0x0b0a0908
    edf0:	07060504 	.word	0x07060504
    edf4:	03020100 	.word	0x03020100
    edf8:	78383025 	.word	0x78383025
    edfc:	00000000 	.word	0x00000000
    ee00:	64697267 	.word	0x64697267
    ee04:	7379735f 	.word	0x7379735f
    ee08:	68633a3a 	.word	0x68633a3a
    ee0c:	736b6365 	.word	0x736b6365
    ee10:	00006d75 	.word	0x00006d75
    ee14:	63656843 	.word	0x63656843
    ee18:	6d75736b 	.word	0x6d75736b
    ee1c:	61655220 	.word	0x61655220
    ee20:	61432f64 	.word	0x61432f64
    ee24:	6c75636c 	.word	0x6c75636c
    ee28:	00657461 	.word	0x00657461
    ee2c:	6b636170 	.word	0x6b636170
    ee30:	257b7465 	.word	0x257b7465
    ee34:	25202c64 	.word	0x25202c64
    ee38:	25202c64 	.word	0x25202c64
    ee3c:	25202c64 	.word	0x25202c64
    ee40:	25202c64 	.word	0x25202c64
    ee44:	25202c64 	.word	0x25202c64
    ee48:	25202c64 	.word	0x25202c64
    ee4c:	25202c64 	.word	0x25202c64
    ee50:	52207d64 	.word	0x52207d64
    ee54:	3a646165 	.word	0x3a646165
    ee58:	2c642520 	.word	0x2c642520
    ee5c:	6c614320 	.word	0x6c614320
    ee60:	616c7563 	.word	0x616c7563
    ee64:	203a6574 	.word	0x203a6574
    ee68:	00006425 	.word	0x00006425
    ee6c:	63656843 	.word	0x63656843
    ee70:	6d75736b 	.word	0x6d75736b
    ee74:	69725720 	.word	0x69725720
    ee78:	432f6574 	.word	0x432f6574
    ee7c:	75636c61 	.word	0x75636c61
    ee80:	6574616c 	.word	0x6574616c
    ee84:	00000000 	.word	0x00000000
    ee88:	63656843 	.word	0x63656843
    ee8c:	6d75736b 	.word	0x6d75736b
    ee90:	65764f20 	.word	0x65764f20
    ee94:	69727772 	.word	0x69727772
    ee98:	00006574 	.word	0x00006574
    ee9c:	61726150 	.word	0x61726150
    eea0:	72706170 	.word	0x72706170
    eea4:	73616b69 	.word	0x73616b69
    eea8:	00000000 	.word	0x00000000
    eeac:	63256325 	.word	0x63256325
    eeb0:	2e2e2e2e 	.word	0x2e2e2e2e
    eeb4:	2e2e2e2e 	.word	0x2e2e2e2e
    eeb8:	2e2e2e2e 	.word	0x2e2e2e2e
    eebc:	00006325 	.word	0x00006325
    eec0:	30256325 	.word	0x30256325
    eec4:	2e5f7833 	.word	0x2e5f7833
    eec8:	252e2e2e 	.word	0x252e2e2e
    eecc:	00000063 	.word	0x00000063
    eed0:	2e2e6325 	.word	0x2e2e6325
    eed4:	0000000a 	.word	0x0000000a
    eed8:	30256325 	.word	0x30256325
    eedc:	00667833 	.word	0x00667833
    eee0:	200012a4 	.word	0x200012a4
    eee4:	20006d44 	.word	0x20006d44
    eee8:	20004c08 	.word	0x20004c08
    eeec:	20003be8 	.word	0x20003be8
    eef0:	6f727245 	.word	0x6f727245
    eef4:	00000072 	.word	0x00000072
    eef8:	682f2e2e 	.word	0x682f2e2e
    eefc:	732f6c61 	.word	0x732f6c61
    ef00:	682f6372 	.word	0x682f6372
    ef04:	615f6c61 	.word	0x615f6c61
    ef08:	615f6364 	.word	0x615f6364
    ef0c:	636e7973 	.word	0x636e7973
    ef10:	0000632e 	.word	0x0000632e
    ef14:	682f2e2e 	.word	0x682f2e2e
    ef18:	732f6c61 	.word	0x732f6c61
    ef1c:	682f6372 	.word	0x682f6372
    ef20:	635f6c61 	.word	0x635f6c61
    ef24:	735f6372 	.word	0x735f6372
    ef28:	2e636e79 	.word	0x2e636e79
    ef2c:	00000063 	.word	0x00000063
    ef30:	682f2e2e 	.word	0x682f2e2e
    ef34:	732f6c61 	.word	0x732f6c61
    ef38:	682f6372 	.word	0x682f6372
    ef3c:	665f6c61 	.word	0x665f6c61
    ef40:	6873616c 	.word	0x6873616c
    ef44:	0000632e 	.word	0x0000632e
    ef48:	682f2e2e 	.word	0x682f2e2e
    ef4c:	732f6c61 	.word	0x732f6c61
    ef50:	682f6372 	.word	0x682f6372
    ef54:	695f6c61 	.word	0x695f6c61
    ef58:	6d5f6332 	.word	0x6d5f6332
    ef5c:	7973615f 	.word	0x7973615f
    ef60:	632e636e 	.word	0x632e636e
    ef64:	00000000 	.word	0x00000000
    ef68:	682f2e2e 	.word	0x682f2e2e
    ef6c:	732f6c61 	.word	0x732f6c61
    ef70:	682f6372 	.word	0x682f6372
    ef74:	695f6c61 	.word	0x695f6c61
    ef78:	00632e6f 	.word	0x00632e6f
    ef7c:	682f2e2e 	.word	0x682f2e2e
    ef80:	732f6c61 	.word	0x732f6c61
    ef84:	682f6372 	.word	0x682f6372
    ef88:	715f6c61 	.word	0x715f6c61
    ef8c:	5f697073 	.word	0x5f697073
    ef90:	2e616d64 	.word	0x2e616d64
    ef94:	00000063 	.word	0x00000063
    ef98:	682f2e2e 	.word	0x682f2e2e
    ef9c:	732f6c61 	.word	0x732f6c61
    efa0:	682f6372 	.word	0x682f6372
    efa4:	735f6c61 	.word	0x735f6c61
    efa8:	6d5f6970 	.word	0x6d5f6970
    efac:	7973615f 	.word	0x7973615f
    efb0:	632e636e 	.word	0x632e636e
    efb4:	00000000 	.word	0x00000000
    efb8:	682f2e2e 	.word	0x682f2e2e
    efbc:	732f6c61 	.word	0x732f6c61
    efc0:	682f6372 	.word	0x682f6372
    efc4:	735f6c61 	.word	0x735f6c61
    efc8:	6d5f6970 	.word	0x6d5f6970
    efcc:	616d645f 	.word	0x616d645f
    efd0:	0000632e 	.word	0x0000632e
    efd4:	682f2e2e 	.word	0x682f2e2e
    efd8:	732f6c61 	.word	0x732f6c61
    efdc:	682f6372 	.word	0x682f6372
    efe0:	745f6c61 	.word	0x745f6c61
    efe4:	72656d69 	.word	0x72656d69
    efe8:	0000632e 	.word	0x0000632e
    efec:	682f2e2e 	.word	0x682f2e2e
    eff0:	732f6c61 	.word	0x732f6c61
    eff4:	682f6372 	.word	0x682f6372
    eff8:	755f6c61 	.word	0x755f6c61
    effc:	74726173 	.word	0x74726173
    f000:	7973615f 	.word	0x7973615f
    f004:	632e636e 	.word	0x632e636e
    f008:	00000000 	.word	0x00000000
    f00c:	682f2e2e 	.word	0x682f2e2e
    f010:	732f6c61 	.word	0x732f6c61
    f014:	682f6372 	.word	0x682f6372
    f018:	755f6c61 	.word	0x755f6c61
    f01c:	74726173 	.word	0x74726173
    f020:	6e79735f 	.word	0x6e79735f
    f024:	00632e63 	.word	0x00632e63
    f028:	682f2e2e 	.word	0x682f2e2e
    f02c:	752f6c61 	.word	0x752f6c61
    f030:	736c6974 	.word	0x736c6974
    f034:	6372732f 	.word	0x6372732f
    f038:	6974752f 	.word	0x6974752f
    f03c:	6c5f736c 	.word	0x6c5f736c
    f040:	2e747369 	.word	0x2e747369
    f044:	00000063 	.word	0x00000063
    f048:	682f2e2e 	.word	0x682f2e2e
    f04c:	752f6c61 	.word	0x752f6c61
    f050:	736c6974 	.word	0x736c6974
    f054:	6372732f 	.word	0x6372732f
    f058:	6974752f 	.word	0x6974752f
    f05c:	725f736c 	.word	0x725f736c
    f060:	62676e69 	.word	0x62676e69
    f064:	65666675 	.word	0x65666675
    f068:	00632e72 	.word	0x00632e72

0000f06c <_adcs>:
    f06c:	01000000 0003000c 00041807 00000000     ................
    f07c:	0014080b 00010000 000c0100 18040003     ................
    f08c:	00000004 080b0000 00000014 682f2e2e     ............../h
    f09c:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    f0ac:	00000000                                ....

0000f0b0 <_cfgs>:
    f0b0:	00200600 08068000 00200400 08068000     .. ....... .....
    f0c0:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    f0e0:	00200b00 14000003 00200a00 08000002     .. ....... .....
    f0f0:	00201300 14000003 00000000 00000000     .. .............
	...
    f1a0:	00005400 1c000000 00005300 0c000000     .T.......S......

0000f1b0 <user_mux_confs>:
	...
    f1dc:	04030201 04030201 00000000 00000000     ................
	...

0000f1f4 <channel_confs>:
    f1f4:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000f234 <interrupt_cfg>:
    f234:	00000002 00000002 00000002 00000002     ................
	...
    f2b4:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    f2c4:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    f2d4:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    f2e4:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    f2f4:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    f304:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    f314:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000f324 <_usarts>:
    f324:	00000000 40100004 00030000 00700002     .......@......p.
    f334:	0000aaaa 00000000 00000001 40100004     ...............@
    f344:	00030000 00700002 0000aaaa 00000000     ......p.........
    f354:	00000002 40100004 00030000 00700002     .......@......p.
    f364:	00005555 00000000 00000004 40100004     UU.............@
    f374:	00030000 00700002 0000aaaa 00000000     ......p.........
    f384:	00000006 40100004 00030000 00700002     .......@......p.
    f394:	0000aaaa 00000000                       ........

0000f39c <_i2cms>:
    f39c:	00000005 00200014 00000100 0000e6e5     ...... .........
    f3ac:	00d70000 02dc6c00                       .....l..

0000f3b4 <sercomspi_regs>:
    f3b4:	3020000c 00020000 00000000 01ff0005     .. 0............
    f3c4:	20000c03 00000000 00000000 ff000600     ... ............
    f3d4:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    f3e4:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    f3f4:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    f404:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000f414 <_tcs>:
    f414:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    f424:	00000000 006c0001 00000308 00000021     ......l.....!...
    f434:	00003a98 00000000 006d0002 00000308     .:........m.....
    f444:	00000021 00003a98 00000000 006e0003     !....:........n.
    f454:	00000308 00000021 00003a98 00000000     ....!....:......
    f464:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    f474:	0000632e                                .c..

0000f478 <_usb_ep_cfgs>:
    f478:	20000db0 00000000 00000040 00000000     ... ....@.......
	...
    f490:	20000da8 00000000 00000008 20000d68     ... ........h.. 
    f4a0:	20000d60 00080040 00000000 00000000     `.. @...........
	...
    f4b8:	20000d20 00400000 682f2e2e 772f6c70      .. ..@.../hpl/w
    f4c8:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    f4d8:	50414d22 45444f4d 4c45525f 45534145     "MAPMODE_RELEASE
    f4e8:	00000022 50414d22 45444f4d 4552505f     "..."MAPMODE_PRE
    f4f8:	00225353 72617453 6e492074 61697469     SS".Start Initia
    f508:	657a696c 00000064 20313544 74696e49     lized...D51 Init
    f518:	00000000 706d6f43 7469736f 65442065     ....Composite De
    f528:	65636976 696e4920 6c616974 64657a69     vice Initialized
    f538:	00000000 64697247 646f4d20 20656c75     ....Grid Module 
    f548:	74696e49 696c6169 0064657a 65746e45     Initialized.Ente
    f558:	676e6972 69614d20 6f4c206e 0000706f     ring Main Loop..
    f568:	706d6f43 7469736f 65442065 65636976     Composite Device
    f578:	6e6f4320 7463656e 00006465               Connected..

0000f584 <keyboard_report_desc>:
    f584:	06090105 070501a1 e729e019 01250015     ..........)...%.
    f594:	08950175 01810281 65290019 65250015     u.........)e..%e
    f5a4:	06950875 08050081 05290119 01250015     u.........)...%.
    f5b4:	05950175 03950291 00c00191              u...........

0000f5c0 <mouse_report_desc>:
    f5c0:	02090105 010901a1 090500a1 03290119     ..............).
    f5d0:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    f5e0:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    f5f0:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    f600:	73752f65 2e636462 00000063              e/usbdc.c...

0000f60c <_global_impure_ptr>:
    f60c:	2000054c                                L.. 

0000f610 <__sf_fake_stderr>:
	...

0000f630 <__sf_fake_stdin>:
	...

0000f650 <__sf_fake_stdout>:
	...
    f670:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    f680:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    f690:	31300046 35343332 39383736 64636261     F.0123456789abcd
    f6a0:	00006665                                ef..

0000f6a4 <_init>:
    f6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6a6:	bf00      	nop
    f6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f6aa:	bc08      	pop	{r3}
    f6ac:	469e      	mov	lr, r3
    f6ae:	4770      	bx	lr

0000f6b0 <__init_array_start>:
    f6b0:	00000289 	.word	0x00000289

0000f6b4 <_fini>:
    f6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6b6:	bf00      	nop
    f6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f6ba:	bc08      	pop	{r3}
    f6bc:	469e      	mov	lr, r3
    f6be:	4770      	bx	lr

0000f6c0 <__fini_array_start>:
    f6c0:	00000265 	.word	0x00000265
