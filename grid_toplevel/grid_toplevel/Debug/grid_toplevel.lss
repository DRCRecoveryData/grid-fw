
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037ac  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000368  20000000  000037ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020368  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020368  2**0
                  CONTENTS
  4 .bss          00000bd4  20000370  00003b20  00020370  2**4
                  ALLOC
  5 .stack        00010004  20000f44  000046f4  00020370  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020396  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002b6c5  00000000  00000000  000203ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003ba0  00000000  00000000  0004bab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011659  00000000  00000000  0004f654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f80  00000000  00000000  00060cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013c0  00000000  00000000  00061c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fdef  00000000  00000000  00062fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00016c38  00000000  00000000  00092ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010443d  00000000  00000000  000a9a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002c98  00000000  00000000  001ade54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 0f 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     H.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	d9 18 00 00 e5 18 00 00 f1 18 00 00 fd 18 00 00     ................
      cc:	09 19 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	95 1a 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 85 22 00 00 99 22 00 00 ad 22 00 00     ....."..."..."..
     124:	c1 22 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ."..............
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 d5 22 00 00 e9 22 00 00 fd 22 00 00     ....."..."..."..
     154:	11 23 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     .#..............
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 00 00 00 00 00 00 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 99 15 00 00 ad 15 00 00 c1 15 00 00     ................
     224:	d5 15 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000370 	.word	0x20000370
     280:	00000000 	.word	0x00000000
     284:	000037ac 	.word	0x000037ac

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000037ac 	.word	0x000037ac
     2c4:	20000374 	.word	0x20000374
     2c8:	000037ac 	.word	0x000037ac
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	0000072d 	.word	0x0000072d

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	000037ac 	.word	0x000037ac
     35c:	20000368 	.word	0x20000368
     360:	20000f44 	.word	0x20000f44
     364:	20000370 	.word	0x20000370
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	00002b4d 	.word	0x00002b4d
     374:	000028e5 	.word	0x000028e5

00000378 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     37c:	4a1b      	ldr	r2, [pc, #108]	; (3ec <ADC_0_init+0x74>)
     37e:	6a13      	ldr	r3, [r2, #32]
     380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     384:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     386:	2240      	movs	r2, #64	; 0x40
     388:	4b19      	ldr	r3, [pc, #100]	; (3f0 <ADC_0_init+0x78>)
     38a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     38e:	4e19      	ldr	r6, [pc, #100]	; (3f4 <ADC_0_init+0x7c>)
     390:	4d19      	ldr	r5, [pc, #100]	; (3f8 <ADC_0_init+0x80>)
     392:	2400      	movs	r4, #0
     394:	9402      	str	r4, [sp, #8]
     396:	4b19      	ldr	r3, [pc, #100]	; (3fc <ADC_0_init+0x84>)
     398:	9301      	str	r3, [sp, #4]
     39a:	2301      	movs	r3, #1
     39c:	9300      	str	r3, [sp, #0]
     39e:	4623      	mov	r3, r4
     3a0:	4632      	mov	r2, r6
     3a2:	4917      	ldr	r1, [pc, #92]	; (400 <ADC_0_init+0x88>)
     3a4:	4628      	mov	r0, r5
     3a6:	4f17      	ldr	r7, [pc, #92]	; (404 <ADC_0_init+0x8c>)
     3a8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3aa:	2310      	movs	r3, #16
     3ac:	1d32      	adds	r2, r6, #4
     3ae:	4621      	mov	r1, r4
     3b0:	4628      	mov	r0, r5
     3b2:	4c15      	ldr	r4, [pc, #84]	; (408 <ADC_0_init+0x90>)
     3b4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3b6:	4b15      	ldr	r3, [pc, #84]	; (40c <ADC_0_init+0x94>)
     3b8:	2280      	movs	r2, #128	; 0x80
     3ba:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c0:	629a      	str	r2, [r3, #40]	; 0x28
     3c2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3c6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3dc:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3e8:	b005      	add	sp, #20
     3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00
     3f4:	2000038c 	.word	0x2000038c
     3f8:	20000a24 	.word	0x20000a24
     3fc:	20000a7c 	.word	0x20000a7c
     400:	43001c00 	.word	0x43001c00
     404:	00000899 	.word	0x00000899
     408:	0000093d 	.word	0x0000093d
     40c:	41008000 	.word	0x41008000

00000410 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     410:	b5f0      	push	{r4, r5, r6, r7, lr}
     412:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     414:	4a1e      	ldr	r2, [pc, #120]	; (490 <ADC_1_init+0x80>)
     416:	6a13      	ldr	r3, [r2, #32]
     418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     41c:	6213      	str	r3, [r2, #32]
     41e:	2240      	movs	r2, #64	; 0x40
     420:	4b1c      	ldr	r3, [pc, #112]	; (494 <ADC_1_init+0x84>)
     422:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     426:	4e1c      	ldr	r6, [pc, #112]	; (498 <ADC_1_init+0x88>)
     428:	4d1c      	ldr	r5, [pc, #112]	; (49c <ADC_1_init+0x8c>)
     42a:	2400      	movs	r4, #0
     42c:	9402      	str	r4, [sp, #8]
     42e:	4b1c      	ldr	r3, [pc, #112]	; (4a0 <ADC_1_init+0x90>)
     430:	9301      	str	r3, [sp, #4]
     432:	2301      	movs	r3, #1
     434:	9300      	str	r3, [sp, #0]
     436:	4623      	mov	r3, r4
     438:	f106 0214 	add.w	r2, r6, #20
     43c:	4919      	ldr	r1, [pc, #100]	; (4a4 <ADC_1_init+0x94>)
     43e:	4628      	mov	r0, r5
     440:	4f19      	ldr	r7, [pc, #100]	; (4a8 <ADC_1_init+0x98>)
     442:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     444:	2310      	movs	r3, #16
     446:	f106 0218 	add.w	r2, r6, #24
     44a:	4621      	mov	r1, r4
     44c:	4628      	mov	r0, r5
     44e:	4c17      	ldr	r4, [pc, #92]	; (4ac <ADC_1_init+0x9c>)
     450:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     452:	4b17      	ldr	r3, [pc, #92]	; (4b0 <ADC_1_init+0xa0>)
     454:	2204      	movs	r2, #4
     456:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     45a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     45e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     462:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     46e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     472:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     476:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     47a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     47e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     486:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     48a:	b005      	add	sp, #20
     48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48e:	bf00      	nop
     490:	40000800 	.word	0x40000800
     494:	40001c00 	.word	0x40001c00
     498:	2000038c 	.word	0x2000038c
     49c:	20000a94 	.word	0x20000a94
     4a0:	2000097c 	.word	0x2000097c
     4a4:	43002000 	.word	0x43002000
     4a8:	00000899 	.word	0x00000899
     4ac:	0000093d 	.word	0x0000093d
     4b0:	41008000 	.word	0x41008000

000004b4 <GRID_AUX_CLOCK_init>:
     4b4:	4b06      	ldr	r3, [pc, #24]	; (4d0 <GRID_AUX_CLOCK_init+0x1c>)
     4b6:	2240      	movs	r2, #64	; 0x40
     4b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     4bc:	2243      	movs	r2, #67	; 0x43
     4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     4c2:	4a04      	ldr	r2, [pc, #16]	; (4d4 <GRID_AUX_CLOCK_init+0x20>)
     4c4:	6993      	ldr	r3, [r2, #24]
     4c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     4ca:	6193      	str	r3, [r2, #24]
     4cc:	4770      	bx	lr
     4ce:	bf00      	nop
     4d0:	40001c00 	.word	0x40001c00
     4d4:	40000800 	.word	0x40000800

000004d8 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4d8:	4b10      	ldr	r3, [pc, #64]	; (51c <GRID_AUX_PORT_init+0x44>)
     4da:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     4de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e6:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ea:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4f2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4f6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fa:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     4fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     502:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     506:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     50a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     50e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     512:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     516:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     51a:	4770      	bx	lr
     51c:	41008000 	.word	0x41008000

00000520 <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     520:	b510      	push	{r4, lr}
     522:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     524:	4b06      	ldr	r3, [pc, #24]	; (540 <GRID_AUX_init+0x20>)
     526:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     528:	2300      	movs	r3, #0
     52a:	9300      	str	r3, [sp, #0]
     52c:	2310      	movs	r3, #16
     52e:	4a05      	ldr	r2, [pc, #20]	; (544 <GRID_AUX_init+0x24>)
     530:	4905      	ldr	r1, [pc, #20]	; (548 <GRID_AUX_init+0x28>)
     532:	4806      	ldr	r0, [pc, #24]	; (54c <GRID_AUX_init+0x2c>)
     534:	4c06      	ldr	r4, [pc, #24]	; (550 <GRID_AUX_init+0x30>)
     536:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     538:	4b06      	ldr	r3, [pc, #24]	; (554 <GRID_AUX_init+0x34>)
     53a:	4798      	blx	r3
}
     53c:	b002      	add	sp, #8
     53e:	bd10      	pop	{r4, pc}
     540:	000004b5 	.word	0x000004b5
     544:	200003b4 	.word	0x200003b4
     548:	41012000 	.word	0x41012000
     54c:	200009d4 	.word	0x200009d4
     550:	00001029 	.word	0x00001029
     554:	000004d9 	.word	0x000004d9

00000558 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     558:	4b16      	ldr	r3, [pc, #88]	; (5b4 <SYS_I2C_PORT_init+0x5c>)
     55a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     55e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     562:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     566:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     56a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     56e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     572:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     576:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     57a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     57e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     582:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     586:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     58a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     58e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     592:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     596:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5aa:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ae:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     5b2:	4770      	bx	lr
     5b4:	41008000 	.word	0x41008000

000005b8 <SYS_I2C_CLOCK_init>:
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <SYS_I2C_CLOCK_init+0x1c>)
     5ba:	2240      	movs	r2, #64	; 0x40
     5bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     5c0:	2243      	movs	r2, #67	; 0x43
     5c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     5c6:	4a04      	ldr	r2, [pc, #16]	; (5d8 <SYS_I2C_CLOCK_init+0x20>)
     5c8:	6a13      	ldr	r3, [r2, #32]
     5ca:	f043 0302 	orr.w	r3, r3, #2
     5ce:	6213      	str	r3, [r2, #32]
     5d0:	4770      	bx	lr
     5d2:	bf00      	nop
     5d4:	40001c00 	.word	0x40001c00
     5d8:	40000800 	.word	0x40000800

000005dc <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     5dc:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     5de:	4b04      	ldr	r3, [pc, #16]	; (5f0 <SYS_I2C_init+0x14>)
     5e0:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     5e2:	4904      	ldr	r1, [pc, #16]	; (5f4 <SYS_I2C_init+0x18>)
     5e4:	4804      	ldr	r0, [pc, #16]	; (5f8 <SYS_I2C_init+0x1c>)
     5e6:	4b05      	ldr	r3, [pc, #20]	; (5fc <SYS_I2C_init+0x20>)
     5e8:	4798      	blx	r3
	SYS_I2C_PORT_init();
     5ea:	4b05      	ldr	r3, [pc, #20]	; (600 <SYS_I2C_init+0x24>)
     5ec:	4798      	blx	r3
     5ee:	bd08      	pop	{r3, pc}
     5f0:	000005b9 	.word	0x000005b9
     5f4:	43000400 	.word	0x43000400
     5f8:	20000994 	.word	0x20000994
     5fc:	00000ca5 	.word	0x00000ca5
     600:	00000559 	.word	0x00000559

00000604 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     604:	4b2d      	ldr	r3, [pc, #180]	; (6bc <GRID_LED_PORT_init+0xb8>)
     606:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     60a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     612:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     616:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     61a:	4a29      	ldr	r2, [pc, #164]	; (6c0 <GRID_LED_PORT_init+0xbc>)
     61c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     620:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     624:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     628:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     62c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     630:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     634:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     638:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     63c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     640:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
     644:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     650:	4a1c      	ldr	r2, [pc, #112]	; (6c4 <GRID_LED_PORT_init+0xc0>)
     652:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     656:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     65a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     65e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     662:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     666:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     66a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     66e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     672:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     676:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     67a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     67e:	4a12      	ldr	r2, [pc, #72]	; (6c8 <GRID_LED_PORT_init+0xc4>)
     680:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     684:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     688:	3204      	adds	r2, #4
     68a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68e:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
     692:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     696:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     69a:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     69e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a6:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6aa:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ae:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	c0000020 	.word	0xc0000020
     6c4:	c0000010 	.word	0xc0000010
     6c8:	40020000 	.word	0x40020000

000006cc <GRID_LED_CLOCK_init>:
     6cc:	4b06      	ldr	r3, [pc, #24]	; (6e8 <GRID_LED_CLOCK_init+0x1c>)
     6ce:	2240      	movs	r2, #64	; 0x40
     6d0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     6d4:	2243      	movs	r2, #67	; 0x43
     6d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     6da:	4a04      	ldr	r2, [pc, #16]	; (6ec <GRID_LED_CLOCK_init+0x20>)
     6dc:	6a13      	ldr	r3, [r2, #32]
     6de:	f043 0308 	orr.w	r3, r3, #8
     6e2:	6213      	str	r3, [r2, #32]
     6e4:	4770      	bx	lr
     6e6:	bf00      	nop
     6e8:	40001c00 	.word	0x40001c00
     6ec:	40000800 	.word	0x40000800

000006f0 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     6f0:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     6f2:	4b04      	ldr	r3, [pc, #16]	; (704 <GRID_LED_init+0x14>)
     6f4:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     6f6:	4904      	ldr	r1, [pc, #16]	; (708 <GRID_LED_init+0x18>)
     6f8:	4804      	ldr	r0, [pc, #16]	; (70c <GRID_LED_init+0x1c>)
     6fa:	4b05      	ldr	r3, [pc, #20]	; (710 <GRID_LED_init+0x20>)
     6fc:	4798      	blx	r3
	GRID_LED_PORT_init();
     6fe:	4b05      	ldr	r3, [pc, #20]	; (714 <GRID_LED_init+0x24>)
     700:	4798      	blx	r3
     702:	bd08      	pop	{r3, pc}
     704:	000006cd 	.word	0x000006cd
     708:	43000c00 	.word	0x43000c00
     70c:	20000a50 	.word	0x20000a50
     710:	00000da9 	.word	0x00000da9
     714:	00000605 	.word	0x00000605

00000718 <delay_driver_init>:
}

void delay_driver_init(void)
{
     718:	b508      	push	{r3, lr}
	delay_init(SysTick);
     71a:	4802      	ldr	r0, [pc, #8]	; (724 <delay_driver_init+0xc>)
     71c:	4b02      	ldr	r3, [pc, #8]	; (728 <delay_driver_init+0x10>)
     71e:	4798      	blx	r3
     720:	bd08      	pop	{r3, pc}
     722:	bf00      	nop
     724:	e000e010 	.word	0xe000e010
     728:	00000bd9 	.word	0x00000bd9

0000072c <system_init>:
}

void system_init(void)
{
     72c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     72e:	4b33      	ldr	r3, [pc, #204]	; (7fc <system_init+0xd0>)
     730:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     732:	4b33      	ldr	r3, [pc, #204]	; (800 <system_init+0xd4>)
     734:	2220      	movs	r2, #32
     736:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     738:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     73a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     73e:	629a      	str	r2, [r3, #40]	; 0x28
     740:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     744:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     746:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     74e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     756:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     75a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     75e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     762:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     766:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     76a:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     76e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     776:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     77a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     77e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     786:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     78a:	3108      	adds	r1, #8
     78c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     790:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     794:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     798:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     79c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     7a0:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7a4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     7ac:	4915      	ldr	r1, [pc, #84]	; (804 <system_init+0xd8>)
     7ae:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7b2:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ba:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     7c2:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7c6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7ca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     7ce:	4a0e      	ldr	r2, [pc, #56]	; (808 <system_init+0xdc>)
     7d0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7d4:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     7d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7dc:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     7e0:	4b0a      	ldr	r3, [pc, #40]	; (80c <system_init+0xe0>)
     7e2:	4798      	blx	r3
	ADC_1_init();
     7e4:	4b0a      	ldr	r3, [pc, #40]	; (810 <system_init+0xe4>)
     7e6:	4798      	blx	r3

	GRID_AUX_init();
     7e8:	4b0a      	ldr	r3, [pc, #40]	; (814 <system_init+0xe8>)
     7ea:	4798      	blx	r3

	SYS_I2C_init();
     7ec:	4b0a      	ldr	r3, [pc, #40]	; (818 <system_init+0xec>)
     7ee:	4798      	blx	r3

	GRID_LED_init();
     7f0:	4b0a      	ldr	r3, [pc, #40]	; (81c <system_init+0xf0>)
     7f2:	4798      	blx	r3

	delay_driver_init();
     7f4:	4b0a      	ldr	r3, [pc, #40]	; (820 <system_init+0xf4>)
     7f6:	4798      	blx	r3
     7f8:	bd08      	pop	{r3, pc}
     7fa:	bf00      	nop
     7fc:	000015f5 	.word	0x000015f5
     800:	41008000 	.word	0x41008000
     804:	c0000010 	.word	0xc0000010
     808:	c0000020 	.word	0xc0000020
     80c:	00000379 	.word	0x00000379
     810:	00000411 	.word	0x00000411
     814:	00000521 	.word	0x00000521
     818:	000005dd 	.word	0x000005dd
     81c:	000006f1 	.word	0x000006f1
     820:	00000719 	.word	0x00000719

00000824 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     824:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     826:	6983      	ldr	r3, [r0, #24]
     828:	b103      	cbz	r3, 82c <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     82a:	4798      	blx	r3
     82c:	bd08      	pop	{r3, pc}

0000082e <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     82e:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     830:	69c3      	ldr	r3, [r0, #28]
     832:	b103      	cbz	r3, 836 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     834:	4798      	blx	r3
     836:	bd08      	pop	{r3, pc}

00000838 <adc_async_channel_conversion_done>:
{
     838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     83c:	4606      	mov	r6, r0
     83e:	460f      	mov	r7, r1
     840:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     842:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     844:	5c5c      	ldrb	r4, [r3, r1]
     846:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     84a:	00e4      	lsls	r4, r4, #3
     84c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     850:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     854:	f105 0a04 	add.w	sl, r5, #4
     858:	b2d1      	uxtb	r1, r2
     85a:	4650      	mov	r0, sl
     85c:	4b0c      	ldr	r3, [pc, #48]	; (890 <adc_async_channel_conversion_done+0x58>)
     85e:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     860:	4630      	mov	r0, r6
     862:	4b0c      	ldr	r3, [pc, #48]	; (894 <adc_async_channel_conversion_done+0x5c>)
     864:	4798      	blx	r3
     866:	2801      	cmp	r0, #1
     868:	d907      	bls.n	87a <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     86a:	ea4f 2119 	mov.w	r1, r9, lsr #8
     86e:	4650      	mov	r0, sl
     870:	4b07      	ldr	r3, [pc, #28]	; (890 <adc_async_channel_conversion_done+0x58>)
     872:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     874:	8aab      	ldrh	r3, [r5, #20]
     876:	3301      	adds	r3, #1
     878:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     87a:	8aab      	ldrh	r3, [r5, #20]
     87c:	3301      	adds	r3, #1
     87e:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     880:	f858 3004 	ldr.w	r3, [r8, r4]
     884:	b113      	cbz	r3, 88c <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     886:	4639      	mov	r1, r7
     888:	4630      	mov	r0, r6
     88a:	4798      	blx	r3
     88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     890:	000011a9 	.word	0x000011a9
     894:	0000152f 	.word	0x0000152f

00000898 <adc_async_init>:
{
     898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     89c:	4689      	mov	r9, r1
     89e:	4616      	mov	r6, r2
     8a0:	461c      	mov	r4, r3
     8a2:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     8a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     8a8:	4607      	mov	r7, r0
     8aa:	b140      	cbz	r0, 8be <adc_async_init+0x26>
     8ac:	b149      	cbz	r1, 8c2 <adc_async_init+0x2a>
     8ae:	b152      	cbz	r2, 8c6 <adc_async_init+0x2e>
     8b0:	f1b8 0f00 	cmp.w	r8, #0
     8b4:	d009      	beq.n	8ca <adc_async_init+0x32>
     8b6:	1c28      	adds	r0, r5, #0
     8b8:	bf18      	it	ne
     8ba:	2001      	movne	r0, #1
     8bc:	e006      	b.n	8cc <adc_async_init+0x34>
     8be:	2000      	movs	r0, #0
     8c0:	e004      	b.n	8cc <adc_async_init+0x34>
     8c2:	2000      	movs	r0, #0
     8c4:	e002      	b.n	8cc <adc_async_init+0x34>
     8c6:	2000      	movs	r0, #0
     8c8:	e000      	b.n	8cc <adc_async_init+0x34>
     8ca:	2000      	movs	r0, #0
     8cc:	f8df b064 	ldr.w	fp, [pc, #100]	; 934 <adc_async_init+0x9c>
     8d0:	223f      	movs	r2, #63	; 0x3f
     8d2:	4659      	mov	r1, fp
     8d4:	f8df a060 	ldr.w	sl, [pc, #96]	; 938 <adc_async_init+0xa0>
     8d8:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     8da:	1c60      	adds	r0, r4, #1
     8dc:	2240      	movs	r2, #64	; 0x40
     8de:	4659      	mov	r1, fp
     8e0:	4580      	cmp	r8, r0
     8e2:	bfcc      	ite	gt
     8e4:	2000      	movgt	r0, #0
     8e6:	2001      	movle	r0, #1
     8e8:	47d0      	blx	sl
	device = &descr->device;
     8ea:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     8ec:	21ff      	movs	r1, #255	; 0xff
     8ee:	b2da      	uxtb	r2, r3
     8f0:	54b1      	strb	r1, [r6, r2]
     8f2:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
     8f4:	b2da      	uxtb	r2, r3
     8f6:	42a2      	cmp	r2, r4
     8f8:	d9f9      	bls.n	8ee <adc_async_init+0x56>
	descr->channel_map    = channel_map;
     8fa:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     8fc:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
     900:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
     904:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     906:	4649      	mov	r1, r9
     908:	4638      	mov	r0, r7
     90a:	4b06      	ldr	r3, [pc, #24]	; (924 <adc_async_init+0x8c>)
     90c:	4798      	blx	r3
	if (init_status) {
     90e:	4603      	mov	r3, r0
     910:	b928      	cbnz	r0, 91e <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     912:	4a05      	ldr	r2, [pc, #20]	; (928 <adc_async_init+0x90>)
     914:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     916:	4a05      	ldr	r2, [pc, #20]	; (92c <adc_async_init+0x94>)
     918:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     91a:	4a05      	ldr	r2, [pc, #20]	; (930 <adc_async_init+0x98>)
     91c:	607a      	str	r2, [r7, #4]
}
     91e:	4618      	mov	r0, r3
     920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     924:	000013fd 	.word	0x000013fd
     928:	00000839 	.word	0x00000839
     92c:	00000825 	.word	0x00000825
     930:	0000082f 	.word	0x0000082f
     934:	00003488 	.word	0x00003488
     938:	0000110d 	.word	0x0000110d

0000093c <adc_async_register_channel_buffer>:
{
     93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     940:	460e      	mov	r6, r1
     942:	4617      	mov	r7, r2
     944:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
     946:	4605      	mov	r5, r0
     948:	2800      	cmp	r0, #0
     94a:	d040      	beq.n	9ce <adc_async_register_channel_buffer+0x92>
     94c:	2a00      	cmp	r2, #0
     94e:	d040      	beq.n	9d2 <adc_async_register_channel_buffer+0x96>
     950:	1c18      	adds	r0, r3, #0
     952:	bf18      	it	ne
     954:	2001      	movne	r0, #1
     956:	f8df 9098 	ldr.w	r9, [pc, #152]	; 9f0 <adc_async_register_channel_buffer+0xb4>
     95a:	2266      	movs	r2, #102	; 0x66
     95c:	4649      	mov	r1, r9
     95e:	4c22      	ldr	r4, [pc, #136]	; (9e8 <adc_async_register_channel_buffer+0xac>)
     960:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
     962:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     966:	2267      	movs	r2, #103	; 0x67
     968:	4649      	mov	r1, r9
     96a:	42b0      	cmp	r0, r6
     96c:	bf34      	ite	cc
     96e:	2000      	movcc	r0, #0
     970:	2001      	movcs	r0, #1
     972:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
     974:	6a29      	ldr	r1, [r5, #32]
     976:	5d8b      	ldrb	r3, [r1, r6]
     978:	2bff      	cmp	r3, #255	; 0xff
     97a:	d12c      	bne.n	9d6 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
     97c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     980:	2300      	movs	r3, #0
     982:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
     984:	b2da      	uxtb	r2, r3
     986:	5c8a      	ldrb	r2, [r1, r2]
     988:	2aff      	cmp	r2, #255	; 0xff
			index++;
     98a:	bf1c      	itt	ne
     98c:	3401      	addne	r4, #1
     98e:	b2e4      	uxtbne	r4, r4
     990:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
     992:	b2da      	uxtb	r2, r3
     994:	4282      	cmp	r2, r0
     996:	d9f5      	bls.n	984 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
     998:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
     99c:	42a3      	cmp	r3, r4
     99e:	d31d      	bcc.n	9dc <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     9a0:	eb04 0944 	add.w	r9, r4, r4, lsl #1
     9a4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
     9a8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     9aa:	4448      	add	r0, r9
     9ac:	4642      	mov	r2, r8
     9ae:	4639      	mov	r1, r7
     9b0:	3004      	adds	r0, #4
     9b2:	4b0e      	ldr	r3, [pc, #56]	; (9ec <adc_async_register_channel_buffer+0xb0>)
     9b4:	4798      	blx	r3
     9b6:	4602      	mov	r2, r0
     9b8:	b998      	cbnz	r0, 9e2 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
     9ba:	6a2b      	ldr	r3, [r5, #32]
     9bc:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
     9be:	6aab      	ldr	r3, [r5, #40]	; 0x28
     9c0:	4499      	add	r9, r3
     9c2:	2300      	movs	r3, #0
     9c4:	f8a9 3014 	strh.w	r3, [r9, #20]
}
     9c8:	4610      	mov	r0, r2
     9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
     9ce:	2000      	movs	r0, #0
     9d0:	e7c1      	b.n	956 <adc_async_register_channel_buffer+0x1a>
     9d2:	2000      	movs	r0, #0
     9d4:	e7bf      	b.n	956 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
     9d6:	f06f 020c 	mvn.w	r2, #12
     9da:	e7f5      	b.n	9c8 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
     9dc:	f06f 021b 	mvn.w	r2, #27
     9e0:	e7f2      	b.n	9c8 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
     9e2:	f06f 020c 	mvn.w	r2, #12
     9e6:	e7ef      	b.n	9c8 <adc_async_register_channel_buffer+0x8c>
     9e8:	0000110d 	.word	0x0000110d
     9ec:	00001115 	.word	0x00001115
     9f0:	00003488 	.word	0x00003488

000009f4 <adc_async_enable_channel>:
{
     9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9f6:	460d      	mov	r5, r1
	ASSERT(descr);
     9f8:	4f0b      	ldr	r7, [pc, #44]	; (a28 <adc_async_enable_channel+0x34>)
     9fa:	4604      	mov	r4, r0
     9fc:	2283      	movs	r2, #131	; 0x83
     9fe:	4639      	mov	r1, r7
     a00:	3000      	adds	r0, #0
     a02:	bf18      	it	ne
     a04:	2001      	movne	r0, #1
     a06:	4e09      	ldr	r6, [pc, #36]	; (a2c <adc_async_enable_channel+0x38>)
     a08:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     a0a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     a0e:	2284      	movs	r2, #132	; 0x84
     a10:	4639      	mov	r1, r7
     a12:	42a8      	cmp	r0, r5
     a14:	bf34      	ite	cc
     a16:	2000      	movcc	r0, #0
     a18:	2001      	movcs	r0, #1
     a1a:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
     a1c:	4629      	mov	r1, r5
     a1e:	4620      	mov	r0, r4
     a20:	4b03      	ldr	r3, [pc, #12]	; (a30 <adc_async_enable_channel+0x3c>)
     a22:	4798      	blx	r3
}
     a24:	2000      	movs	r0, #0
     a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a28:	00003488 	.word	0x00003488
     a2c:	0000110d 	.word	0x0000110d
     a30:	00001519 	.word	0x00001519

00000a34 <adc_async_register_callback>:
{
     a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a38:	460e      	mov	r6, r1
     a3a:	4614      	mov	r4, r2
     a3c:	4699      	mov	r9, r3
	ASSERT(descr);
     a3e:	f8df 8070 	ldr.w	r8, [pc, #112]	; ab0 <adc_async_register_callback+0x7c>
     a42:	4605      	mov	r5, r0
     a44:	229c      	movs	r2, #156	; 0x9c
     a46:	4641      	mov	r1, r8
     a48:	3000      	adds	r0, #0
     a4a:	bf18      	it	ne
     a4c:	2001      	movne	r0, #1
     a4e:	4f16      	ldr	r7, [pc, #88]	; (aa8 <adc_async_register_callback+0x74>)
     a50:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     a52:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     a56:	229d      	movs	r2, #157	; 0x9d
     a58:	4641      	mov	r1, r8
     a5a:	42b0      	cmp	r0, r6
     a5c:	bf34      	ite	cc
     a5e:	2000      	movcc	r0, #0
     a60:	2001      	movcs	r0, #1
     a62:	47b8      	blx	r7
	switch (type) {
     a64:	2c01      	cmp	r4, #1
     a66:	d019      	beq.n	a9c <adc_async_register_callback+0x68>
     a68:	b12c      	cbz	r4, a76 <adc_async_register_callback+0x42>
     a6a:	2c02      	cmp	r4, #2
     a6c:	d019      	beq.n	aa2 <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
     a6e:	f06f 000c 	mvn.w	r0, #12
}
     a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
     a76:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
     a78:	5d9b      	ldrb	r3, [r3, r6]
     a7a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     a80:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
     a84:	f119 0300 	adds.w	r3, r9, #0
     a88:	bf18      	it	ne
     a8a:	2301      	movne	r3, #1
     a8c:	4622      	mov	r2, r4
     a8e:	4631      	mov	r1, r6
     a90:	4628      	mov	r0, r5
     a92:	4c06      	ldr	r4, [pc, #24]	; (aac <adc_async_register_callback+0x78>)
     a94:	47a0      	blx	r4
	return ERR_NONE;
     a96:	2000      	movs	r0, #0
     a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
     a9c:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
     aa0:	e7f0      	b.n	a84 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
     aa2:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
     aa6:	e7ed      	b.n	a84 <adc_async_register_callback+0x50>
     aa8:	0000110d 	.word	0x0000110d
     aac:	00001557 	.word	0x00001557
     ab0:	00003488 	.word	0x00003488

00000ab4 <adc_async_read_channel>:
{
     ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ab8:	b083      	sub	sp, #12
     aba:	4688      	mov	r8, r1
     abc:	4691      	mov	r9, r2
     abe:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
     ac0:	4604      	mov	r4, r0
     ac2:	2800      	cmp	r0, #0
     ac4:	d04f      	beq.n	b66 <adc_async_read_channel+0xb2>
     ac6:	2a00      	cmp	r2, #0
     ac8:	d04f      	beq.n	b6a <adc_async_read_channel+0xb6>
     aca:	1c18      	adds	r0, r3, #0
     acc:	bf18      	it	ne
     ace:	2001      	movne	r0, #1
     ad0:	4f29      	ldr	r7, [pc, #164]	; (b78 <adc_async_read_channel+0xc4>)
     ad2:	22bc      	movs	r2, #188	; 0xbc
     ad4:	4639      	mov	r1, r7
     ad6:	4e29      	ldr	r6, [pc, #164]	; (b7c <adc_async_read_channel+0xc8>)
     ad8:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     ada:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     ade:	22bd      	movs	r2, #189	; 0xbd
     ae0:	4639      	mov	r1, r7
     ae2:	4540      	cmp	r0, r8
     ae4:	bf34      	ite	cc
     ae6:	2000      	movcc	r0, #0
     ae8:	2001      	movcs	r0, #1
     aea:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
     aec:	4620      	mov	r0, r4
     aee:	4b24      	ldr	r3, [pc, #144]	; (b80 <adc_async_read_channel+0xcc>)
     af0:	4798      	blx	r3
	ASSERT(!(length % data_size));
     af2:	fb95 f3f0 	sdiv	r3, r5, r0
     af6:	fb03 5010 	mls	r0, r3, r0, r5
     afa:	22bf      	movs	r2, #191	; 0xbf
     afc:	4639      	mov	r1, r7
     afe:	fab0 f080 	clz	r0, r0
     b02:	0940      	lsrs	r0, r0, #5
     b04:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
     b06:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     b08:	f813 b008 	ldrb.w	fp, [r3, r8]
     b0c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
     b10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b12:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
     b16:	a801      	add	r0, sp, #4
     b18:	4b1a      	ldr	r3, [pc, #104]	; (b84 <adc_async_read_channel+0xd0>)
     b1a:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
     b1c:	f10b 0a04 	add.w	sl, fp, #4
     b20:	4650      	mov	r0, sl
     b22:	4b19      	ldr	r3, [pc, #100]	; (b88 <adc_async_read_channel+0xd4>)
     b24:	4798      	blx	r3
     b26:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     b28:	a801      	add	r0, sp, #4
     b2a:	4b18      	ldr	r3, [pc, #96]	; (b8c <adc_async_read_channel+0xd8>)
     b2c:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     b2e:	f1b8 0f00 	cmp.w	r8, #0
     b32:	d01c      	beq.n	b6e <adc_async_read_channel+0xba>
     b34:	b1ed      	cbz	r5, b72 <adc_async_read_channel+0xbe>
     b36:	3d01      	subs	r5, #1
     b38:	b2ad      	uxth	r5, r5
     b3a:	3502      	adds	r5, #2
     b3c:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
     b3e:	4f14      	ldr	r7, [pc, #80]	; (b90 <adc_async_read_channel+0xdc>)
     b40:	b2a6      	uxth	r6, r4
     b42:	1e61      	subs	r1, r4, #1
     b44:	4449      	add	r1, r9
     b46:	4650      	mov	r0, sl
     b48:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
     b4a:	4544      	cmp	r4, r8
     b4c:	d002      	beq.n	b54 <adc_async_read_channel+0xa0>
     b4e:	3401      	adds	r4, #1
     b50:	42ac      	cmp	r4, r5
     b52:	d1f5      	bne.n	b40 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
     b54:	f8bb 3014 	ldrh.w	r3, [fp, #20]
     b58:	1b9b      	subs	r3, r3, r6
     b5a:	f8ab 3014 	strh.w	r3, [fp, #20]
}
     b5e:	4630      	mov	r0, r6
     b60:	b003      	add	sp, #12
     b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
     b66:	2000      	movs	r0, #0
     b68:	e7b2      	b.n	ad0 <adc_async_read_channel+0x1c>
     b6a:	2000      	movs	r0, #0
     b6c:	e7b0      	b.n	ad0 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
     b6e:	2600      	movs	r6, #0
     b70:	e7f0      	b.n	b54 <adc_async_read_channel+0xa0>
     b72:	2600      	movs	r6, #0
     b74:	e7ee      	b.n	b54 <adc_async_read_channel+0xa0>
     b76:	bf00      	nop
     b78:	00003488 	.word	0x00003488
     b7c:	0000110d 	.word	0x0000110d
     b80:	0000152f 	.word	0x0000152f
     b84:	00000bbd 	.word	0x00000bbd
     b88:	000011e9 	.word	0x000011e9
     b8c:	00000bcb 	.word	0x00000bcb
     b90:	00001165 	.word	0x00001165

00000b94 <adc_async_start_conversion>:
{
     b94:	b510      	push	{r4, lr}
	ASSERT(descr);
     b96:	4604      	mov	r4, r0
     b98:	22d6      	movs	r2, #214	; 0xd6
     b9a:	4905      	ldr	r1, [pc, #20]	; (bb0 <adc_async_start_conversion+0x1c>)
     b9c:	3000      	adds	r0, #0
     b9e:	bf18      	it	ne
     ba0:	2001      	movne	r0, #1
     ba2:	4b04      	ldr	r3, [pc, #16]	; (bb4 <adc_async_start_conversion+0x20>)
     ba4:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     ba6:	4620      	mov	r0, r4
     ba8:	4b03      	ldr	r3, [pc, #12]	; (bb8 <adc_async_start_conversion+0x24>)
     baa:	4798      	blx	r3
}
     bac:	2000      	movs	r0, #0
     bae:	bd10      	pop	{r4, pc}
     bb0:	00003488 	.word	0x00003488
     bb4:	0000110d 	.word	0x0000110d
     bb8:	00001541 	.word	0x00001541

00000bbc <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     bbc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     bc0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     bc2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     bc4:	f3bf 8f5f 	dmb	sy
     bc8:	4770      	bx	lr

00000bca <atomic_leave_critical>:
     bca:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     bce:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     bd0:	f383 8810 	msr	PRIMASK, r3
     bd4:	4770      	bx	lr
	...

00000bd8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     bd8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     bda:	4b02      	ldr	r3, [pc, #8]	; (be4 <delay_init+0xc>)
     bdc:	6018      	str	r0, [r3, #0]
     bde:	4b02      	ldr	r3, [pc, #8]	; (be8 <delay_init+0x10>)
     be0:	4798      	blx	r3
     be2:	bd08      	pop	{r3, pc}
     be4:	200003c4 	.word	0x200003c4
     be8:	0000262d 	.word	0x0000262d

00000bec <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     bec:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     bee:	4b04      	ldr	r3, [pc, #16]	; (c00 <delay_ms+0x14>)
     bf0:	681c      	ldr	r4, [r3, #0]
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <delay_ms+0x18>)
     bf4:	4798      	blx	r3
     bf6:	4601      	mov	r1, r0
     bf8:	4620      	mov	r0, r4
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <delay_ms+0x1c>)
     bfc:	4798      	blx	r3
     bfe:	bd10      	pop	{r4, pc}
     c00:	200003c4 	.word	0x200003c4
     c04:	000015e9 	.word	0x000015e9
     c08:	00002641 	.word	0x00002641

00000c0c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     c0c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     c0e:	8843      	ldrh	r3, [r0, #2]
     c10:	f413 7f80 	tst.w	r3, #256	; 0x100
     c14:	d102      	bne.n	c1c <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
     c16:	6b43      	ldr	r3, [r0, #52]	; 0x34
     c18:	b103      	cbz	r3, c1c <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
     c1a:	4798      	blx	r3
     c1c:	bd08      	pop	{r3, pc}

00000c1e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     c1e:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     c20:	8843      	ldrh	r3, [r0, #2]
     c22:	f413 7f80 	tst.w	r3, #256	; 0x100
     c26:	d102      	bne.n	c2e <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
     c28:	6b83      	ldr	r3, [r0, #56]	; 0x38
     c2a:	b103      	cbz	r3, c2e <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
     c2c:	4798      	blx	r3
     c2e:	bd08      	pop	{r3, pc}

00000c30 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
     c30:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     c32:	8843      	ldrh	r3, [r0, #2]
     c34:	f413 7f80 	tst.w	r3, #256	; 0x100
     c38:	d102      	bne.n	c40 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
     c3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
     c3c:	b103      	cbz	r3, c40 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
     c3e:	4798      	blx	r3
     c40:	bd08      	pop	{r3, pc}
	...

00000c44 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
     c44:	b510      	push	{r4, lr}
     c46:	b084      	sub	sp, #16
     c48:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
     c4a:	8a83      	ldrh	r3, [r0, #20]
     c4c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     c50:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     c56:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     c5a:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     c5c:	a901      	add	r1, sp, #4
     c5e:	3828      	subs	r0, #40	; 0x28
     c60:	4b03      	ldr	r3, [pc, #12]	; (c70 <i2c_m_async_write+0x2c>)
     c62:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
     c64:	2800      	cmp	r0, #0
     c66:	bf08      	it	eq
     c68:	4620      	moveq	r0, r4
     c6a:	b004      	add	sp, #16
     c6c:	bd10      	pop	{r4, pc}
     c6e:	bf00      	nop
     c70:	00002139 	.word	0x00002139

00000c74 <i2c_m_async_read>:
{
     c74:	b510      	push	{r4, lr}
     c76:	b084      	sub	sp, #16
     c78:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
     c7a:	8a83      	ldrh	r3, [r0, #20]
     c7c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     c80:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     c82:	f248 0301 	movw	r3, #32769	; 0x8001
     c86:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     c8a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     c8c:	a901      	add	r1, sp, #4
     c8e:	3828      	subs	r0, #40	; 0x28
     c90:	4b03      	ldr	r3, [pc, #12]	; (ca0 <i2c_m_async_read+0x2c>)
     c92:	4798      	blx	r3
}
     c94:	2800      	cmp	r0, #0
     c96:	bf08      	it	eq
     c98:	4620      	moveq	r0, r4
     c9a:	b004      	add	sp, #16
     c9c:	bd10      	pop	{r4, pc}
     c9e:	bf00      	nop
     ca0:	00002139 	.word	0x00002139

00000ca4 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
     ca4:	b570      	push	{r4, r5, r6, lr}
     ca6:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     ca8:	4604      	mov	r4, r0
     caa:	2289      	movs	r2, #137	; 0x89
     cac:	490f      	ldr	r1, [pc, #60]	; (cec <i2c_m_async_init+0x48>)
     cae:	3000      	adds	r0, #0
     cb0:	bf18      	it	ne
     cb2:	2001      	movne	r0, #1
     cb4:	4b0e      	ldr	r3, [pc, #56]	; (cf0 <i2c_m_async_init+0x4c>)
     cb6:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
     cb8:	4629      	mov	r1, r5
     cba:	4620      	mov	r0, r4
     cbc:	4b0d      	ldr	r3, [pc, #52]	; (cf4 <i2c_m_async_init+0x50>)
     cbe:	4798      	blx	r3
	if (init_status) {
     cc0:	4605      	mov	r5, r0
     cc2:	b108      	cbz	r0, cc8 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
     cc4:	4628      	mov	r0, r5
     cc6:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
     cc8:	4b0b      	ldr	r3, [pc, #44]	; (cf8 <i2c_m_async_init+0x54>)
     cca:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
     ccc:	4b0b      	ldr	r3, [pc, #44]	; (cfc <i2c_m_async_init+0x58>)
     cce:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
     cd0:	4a0b      	ldr	r2, [pc, #44]	; (d00 <i2c_m_async_init+0x5c>)
     cd2:	2101      	movs	r1, #1
     cd4:	4620      	mov	r0, r4
     cd6:	4e0b      	ldr	r6, [pc, #44]	; (d04 <i2c_m_async_init+0x60>)
     cd8:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
     cda:	4a0b      	ldr	r2, [pc, #44]	; (d08 <i2c_m_async_init+0x64>)
     cdc:	2102      	movs	r1, #2
     cde:	4620      	mov	r0, r4
     ce0:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
     ce2:	4a0a      	ldr	r2, [pc, #40]	; (d0c <i2c_m_async_init+0x68>)
     ce4:	2100      	movs	r1, #0
     ce6:	4620      	mov	r0, r4
     ce8:	47b0      	blx	r6
	return ERR_NONE;
     cea:	e7eb      	b.n	cc4 <i2c_m_async_init+0x20>
     cec:	000034a4 	.word	0x000034a4
     cf0:	0000110d 	.word	0x0000110d
     cf4:	000020b9 	.word	0x000020b9
     cf8:	00000c75 	.word	0x00000c75
     cfc:	00000c45 	.word	0x00000c45
     d00:	00000c0d 	.word	0x00000c0d
     d04:	00002269 	.word	0x00002269
     d08:	00000c1f 	.word	0x00000c1f
     d0c:	00000c31 	.word	0x00000c31

00000d10 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     d10:	b570      	push	{r4, r5, r6, lr}
     d12:	460d      	mov	r5, r1
     d14:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     d16:	4604      	mov	r4, r0
     d18:	b160      	cbz	r0, d34 <io_write+0x24>
     d1a:	1c08      	adds	r0, r1, #0
     d1c:	bf18      	it	ne
     d1e:	2001      	movne	r0, #1
     d20:	2234      	movs	r2, #52	; 0x34
     d22:	4905      	ldr	r1, [pc, #20]	; (d38 <io_write+0x28>)
     d24:	4b05      	ldr	r3, [pc, #20]	; (d3c <io_write+0x2c>)
     d26:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     d28:	6823      	ldr	r3, [r4, #0]
     d2a:	4632      	mov	r2, r6
     d2c:	4629      	mov	r1, r5
     d2e:	4620      	mov	r0, r4
     d30:	4798      	blx	r3
}
     d32:	bd70      	pop	{r4, r5, r6, pc}
     d34:	2000      	movs	r0, #0
     d36:	e7f3      	b.n	d20 <io_write+0x10>
     d38:	000034c4 	.word	0x000034c4
     d3c:	0000110d 	.word	0x0000110d

00000d40 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     d40:	b570      	push	{r4, r5, r6, lr}
     d42:	460d      	mov	r5, r1
     d44:	4616      	mov	r6, r2
	ASSERT(io);
     d46:	4604      	mov	r4, r0
     d48:	2298      	movs	r2, #152	; 0x98
     d4a:	4907      	ldr	r1, [pc, #28]	; (d68 <_spi_m_dma_io_write+0x28>)
     d4c:	3000      	adds	r0, #0
     d4e:	bf18      	it	ne
     d50:	2001      	movne	r0, #1
     d52:	4b06      	ldr	r3, [pc, #24]	; (d6c <_spi_m_dma_io_write+0x2c>)
     d54:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
     d56:	4633      	mov	r3, r6
     d58:	2200      	movs	r2, #0
     d5a:	4629      	mov	r1, r5
     d5c:	f1a4 001c 	sub.w	r0, r4, #28
     d60:	4c03      	ldr	r4, [pc, #12]	; (d70 <_spi_m_dma_io_write+0x30>)
     d62:	47a0      	blx	r4
}
     d64:	bd70      	pop	{r4, r5, r6, pc}
     d66:	bf00      	nop
     d68:	000034d8 	.word	0x000034d8
     d6c:	0000110d 	.word	0x0000110d
     d70:	000024f5 	.word	0x000024f5

00000d74 <_spi_m_dma_io_read>:
{
     d74:	b570      	push	{r4, r5, r6, lr}
     d76:	460d      	mov	r5, r1
     d78:	4616      	mov	r6, r2
	ASSERT(io);
     d7a:	4604      	mov	r4, r0
     d7c:	2281      	movs	r2, #129	; 0x81
     d7e:	4907      	ldr	r1, [pc, #28]	; (d9c <_spi_m_dma_io_read+0x28>)
     d80:	3000      	adds	r0, #0
     d82:	bf18      	it	ne
     d84:	2001      	movne	r0, #1
     d86:	4b06      	ldr	r3, [pc, #24]	; (da0 <_spi_m_dma_io_read+0x2c>)
     d88:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
     d8a:	4633      	mov	r3, r6
     d8c:	462a      	mov	r2, r5
     d8e:	2100      	movs	r1, #0
     d90:	f1a4 001c 	sub.w	r0, r4, #28
     d94:	4c03      	ldr	r4, [pc, #12]	; (da4 <_spi_m_dma_io_read+0x30>)
     d96:	47a0      	blx	r4
}
     d98:	bd70      	pop	{r4, r5, r6, pc}
     d9a:	bf00      	nop
     d9c:	000034d8 	.word	0x000034d8
     da0:	0000110d 	.word	0x0000110d
     da4:	000024f5 	.word	0x000024f5

00000da8 <spi_m_dma_init>:
{
     da8:	b538      	push	{r3, r4, r5, lr}
     daa:	460c      	mov	r4, r1
	ASSERT(spi && hw);
     dac:	4605      	mov	r5, r0
     dae:	b1a0      	cbz	r0, dda <spi_m_dma_init+0x32>
     db0:	1c08      	adds	r0, r1, #0
     db2:	bf18      	it	ne
     db4:	2001      	movne	r0, #1
     db6:	223b      	movs	r2, #59	; 0x3b
     db8:	4909      	ldr	r1, [pc, #36]	; (de0 <spi_m_dma_init+0x38>)
     dba:	4b0a      	ldr	r3, [pc, #40]	; (de4 <spi_m_dma_init+0x3c>)
     dbc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     dbe:	4628      	mov	r0, r5
     dc0:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
     dc4:	4621      	mov	r1, r4
     dc6:	4b08      	ldr	r3, [pc, #32]	; (de8 <spi_m_dma_init+0x40>)
     dc8:	4798      	blx	r3
	if (rc) {
     dca:	4603      	mov	r3, r0
     dcc:	b918      	cbnz	r0, dd6 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
     dce:	4a07      	ldr	r2, [pc, #28]	; (dec <spi_m_dma_init+0x44>)
     dd0:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
     dd2:	4a07      	ldr	r2, [pc, #28]	; (df0 <spi_m_dma_init+0x48>)
     dd4:	622a      	str	r2, [r5, #32]
}
     dd6:	4618      	mov	r0, r3
     dd8:	bd38      	pop	{r3, r4, r5, pc}
     dda:	2000      	movs	r0, #0
     ddc:	e7eb      	b.n	db6 <spi_m_dma_init+0xe>
     dde:	bf00      	nop
     de0:	000034d8 	.word	0x000034d8
     de4:	0000110d 	.word	0x0000110d
     de8:	00002325 	.word	0x00002325
     dec:	00000d75 	.word	0x00000d75
     df0:	00000d41 	.word	0x00000d41

00000df4 <spi_m_dma_enable>:
{
     df4:	b510      	push	{r4, lr}
	ASSERT(spi);
     df6:	4604      	mov	r4, r0
     df8:	2251      	movs	r2, #81	; 0x51
     dfa:	4905      	ldr	r1, [pc, #20]	; (e10 <spi_m_dma_enable+0x1c>)
     dfc:	3000      	adds	r0, #0
     dfe:	bf18      	it	ne
     e00:	2001      	movne	r0, #1
     e02:	4b04      	ldr	r3, [pc, #16]	; (e14 <spi_m_dma_enable+0x20>)
     e04:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
     e06:	1d20      	adds	r0, r4, #4
     e08:	4b03      	ldr	r3, [pc, #12]	; (e18 <spi_m_dma_enable+0x24>)
     e0a:	4798      	blx	r3
     e0c:	bd10      	pop	{r4, pc}
     e0e:	bf00      	nop
     e10:	000034d8 	.word	0x000034d8
     e14:	0000110d 	.word	0x0000110d
     e18:	00002465 	.word	0x00002465

00000e1c <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
     e1c:	b570      	push	{r4, r5, r6, lr}
     e1e:	460d      	mov	r5, r1
     e20:	4616      	mov	r6, r2
	ASSERT(spi);
     e22:	4604      	mov	r4, r0
     e24:	22a8      	movs	r2, #168	; 0xa8
     e26:	4906      	ldr	r1, [pc, #24]	; (e40 <spi_m_dma_register_callback+0x24>)
     e28:	3000      	adds	r0, #0
     e2a:	bf18      	it	ne
     e2c:	2001      	movne	r0, #1
     e2e:	4b05      	ldr	r3, [pc, #20]	; (e44 <spi_m_dma_register_callback+0x28>)
     e30:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
     e32:	4632      	mov	r2, r6
     e34:	4629      	mov	r1, r5
     e36:	1d20      	adds	r0, r4, #4
     e38:	4b03      	ldr	r3, [pc, #12]	; (e48 <spi_m_dma_register_callback+0x2c>)
     e3a:	4798      	blx	r3
     e3c:	bd70      	pop	{r4, r5, r6, pc}
     e3e:	bf00      	nop
     e40:	000034d8 	.word	0x000034d8
     e44:	0000110d 	.word	0x0000110d
     e48:	00002495 	.word	0x00002495

00000e4c <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
     e4c:	b538      	push	{r3, r4, r5, lr}
     e4e:	460d      	mov	r5, r1
	ASSERT(spi && io);
     e50:	4604      	mov	r4, r0
     e52:	b150      	cbz	r0, e6a <spi_m_dma_get_io_descriptor+0x1e>
     e54:	1c08      	adds	r0, r1, #0
     e56:	bf18      	it	ne
     e58:	2001      	movne	r0, #1
     e5a:	22ae      	movs	r2, #174	; 0xae
     e5c:	4904      	ldr	r1, [pc, #16]	; (e70 <spi_m_dma_get_io_descriptor+0x24>)
     e5e:	4b05      	ldr	r3, [pc, #20]	; (e74 <spi_m_dma_get_io_descriptor+0x28>)
     e60:	4798      	blx	r3
	*io = &spi->io;
     e62:	3420      	adds	r4, #32
     e64:	602c      	str	r4, [r5, #0]

	return 0;
}
     e66:	2000      	movs	r0, #0
     e68:	bd38      	pop	{r3, r4, r5, pc}
     e6a:	2000      	movs	r0, #0
     e6c:	e7f5      	b.n	e5a <spi_m_dma_get_io_descriptor+0xe>
     e6e:	bf00      	nop
     e70:	000034d8 	.word	0x000034d8
     e74:	0000110d 	.word	0x0000110d

00000e78 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     e78:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     e7a:	2300      	movs	r3, #0
     e7c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
     e7e:	69c3      	ldr	r3, [r0, #28]
     e80:	b11b      	cbz	r3, e8a <usart_transmission_complete+0x12>
     e82:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
     e86:	4610      	mov	r0, r2
     e88:	4798      	blx	r3
     e8a:	bd08      	pop	{r3, pc}

00000e8c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     e8c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     e8e:	2300      	movs	r3, #0
     e90:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
     e92:	6a43      	ldr	r3, [r0, #36]	; 0x24
     e94:	b11b      	cbz	r3, e9e <usart_error+0x12>
     e96:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
     e9a:	4610      	mov	r0, r2
     e9c:	4798      	blx	r3
     e9e:	bd08      	pop	{r3, pc}

00000ea0 <usart_fill_rx_buffer>:
{
     ea0:	b538      	push	{r3, r4, r5, lr}
     ea2:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     ea4:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
     ea8:	302c      	adds	r0, #44	; 0x2c
     eaa:	4b03      	ldr	r3, [pc, #12]	; (eb8 <usart_fill_rx_buffer+0x18>)
     eac:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     eae:	6a23      	ldr	r3, [r4, #32]
     eb0:	b10b      	cbz	r3, eb6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     eb2:	4628      	mov	r0, r5
     eb4:	4798      	blx	r3
     eb6:	bd38      	pop	{r3, r4, r5, pc}
     eb8:	000011a9 	.word	0x000011a9

00000ebc <usart_async_write>:
{
     ebc:	b570      	push	{r4, r5, r6, lr}
     ebe:	460e      	mov	r6, r1
     ec0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
     ec2:	4604      	mov	r4, r0
     ec4:	b1e0      	cbz	r0, f00 <usart_async_write+0x44>
     ec6:	b1e9      	cbz	r1, f04 <usart_async_write+0x48>
     ec8:	1c10      	adds	r0, r2, #0
     eca:	bf18      	it	ne
     ecc:	2001      	movne	r0, #1
     ece:	f240 123b 	movw	r2, #315	; 0x13b
     ed2:	490f      	ldr	r1, [pc, #60]	; (f10 <usart_async_write+0x54>)
     ed4:	4b0f      	ldr	r3, [pc, #60]	; (f14 <usart_async_write+0x58>)
     ed6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     ed8:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
     edc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
     ee0:	429a      	cmp	r2, r3
     ee2:	d111      	bne.n	f08 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
     ee4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     ee6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
     eea:	2300      	movs	r3, #0
     eec:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     ef0:	2301      	movs	r3, #1
     ef2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     ef4:	f104 0008 	add.w	r0, r4, #8
     ef8:	4b07      	ldr	r3, [pc, #28]	; (f18 <usart_async_write+0x5c>)
     efa:	4798      	blx	r3
	return (int32_t)length;
     efc:	4628      	mov	r0, r5
     efe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     f00:	2000      	movs	r0, #0
     f02:	e7e4      	b.n	ece <usart_async_write+0x12>
     f04:	2000      	movs	r0, #0
     f06:	e7e2      	b.n	ece <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
     f08:	f06f 001b 	mvn.w	r0, #27
}
     f0c:	bd70      	pop	{r4, r5, r6, pc}
     f0e:	bf00      	nop
     f10:	000034f4 	.word	0x000034f4
     f14:	0000110d 	.word	0x0000110d
     f18:	000020a7 	.word	0x000020a7

00000f1c <usart_process_byte_sent>:
{
     f1c:	b510      	push	{r4, lr}
     f1e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     f20:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     f22:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
     f26:	429a      	cmp	r2, r3
     f28:	d009      	beq.n	f3e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     f2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
     f2c:	1c59      	adds	r1, r3, #1
     f2e:	8781      	strh	r1, [r0, #60]	; 0x3c
     f30:	5cd1      	ldrb	r1, [r2, r3]
     f32:	4b04      	ldr	r3, [pc, #16]	; (f44 <usart_process_byte_sent+0x28>)
     f34:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     f36:	4620      	mov	r0, r4
     f38:	4b03      	ldr	r3, [pc, #12]	; (f48 <usart_process_byte_sent+0x2c>)
     f3a:	4798      	blx	r3
     f3c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     f3e:	4b03      	ldr	r3, [pc, #12]	; (f4c <usart_process_byte_sent+0x30>)
     f40:	4798      	blx	r3
     f42:	bd10      	pop	{r4, pc}
     f44:	000020a1 	.word	0x000020a1
     f48:	000020a7 	.word	0x000020a7
     f4c:	000020af 	.word	0x000020af

00000f50 <usart_async_read>:
{
     f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f54:	b082      	sub	sp, #8
     f56:	460f      	mov	r7, r1
     f58:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
     f5a:	4606      	mov	r6, r0
     f5c:	b1a0      	cbz	r0, f88 <usart_async_read+0x38>
     f5e:	b199      	cbz	r1, f88 <usart_async_read+0x38>
     f60:	2a00      	cmp	r2, #0
     f62:	d12d      	bne.n	fc0 <usart_async_read+0x70>
     f64:	f44f 72ac 	mov.w	r2, #344	; 0x158
     f68:	4929      	ldr	r1, [pc, #164]	; (1010 <usart_async_read+0xc0>)
     f6a:	2000      	movs	r0, #0
     f6c:	4b29      	ldr	r3, [pc, #164]	; (1014 <usart_async_read+0xc4>)
     f6e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     f70:	a801      	add	r0, sp, #4
     f72:	4b29      	ldr	r3, [pc, #164]	; (1018 <usart_async_read+0xc8>)
     f74:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     f76:	f106 0034 	add.w	r0, r6, #52	; 0x34
     f7a:	4b28      	ldr	r3, [pc, #160]	; (101c <usart_async_read+0xcc>)
     f7c:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     f7e:	a801      	add	r0, sp, #4
     f80:	4b27      	ldr	r3, [pc, #156]	; (1020 <usart_async_read+0xd0>)
     f82:	4798      	blx	r3
	uint16_t                       was_read = 0;
     f84:	2500      	movs	r5, #0
	return (int32_t)was_read;
     f86:	e03e      	b.n	1006 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
     f88:	f44f 72ac 	mov.w	r2, #344	; 0x158
     f8c:	4920      	ldr	r1, [pc, #128]	; (1010 <usart_async_read+0xc0>)
     f8e:	2000      	movs	r0, #0
     f90:	4b20      	ldr	r3, [pc, #128]	; (1014 <usart_async_read+0xc4>)
     f92:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     f94:	a801      	add	r0, sp, #4
     f96:	4b20      	ldr	r3, [pc, #128]	; (1018 <usart_async_read+0xc8>)
     f98:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     f9a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
     f9e:	4650      	mov	r0, sl
     fa0:	4b1e      	ldr	r3, [pc, #120]	; (101c <usart_async_read+0xcc>)
     fa2:	4798      	blx	r3
     fa4:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
     fa6:	a801      	add	r0, sp, #4
     fa8:	4b1d      	ldr	r3, [pc, #116]	; (1020 <usart_async_read+0xd0>)
     faa:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     fac:	f1b9 0f00 	cmp.w	r9, #0
     fb0:	d004      	beq.n	fbc <usart_async_read+0x6c>
     fb2:	f1b8 0f00 	cmp.w	r8, #0
     fb6:	d119      	bne.n	fec <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
     fb8:	2500      	movs	r5, #0
     fba:	e024      	b.n	1006 <usart_async_read+0xb6>
     fbc:	2500      	movs	r5, #0
     fbe:	e022      	b.n	1006 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
     fc0:	f44f 72ac 	mov.w	r2, #344	; 0x158
     fc4:	4912      	ldr	r1, [pc, #72]	; (1010 <usart_async_read+0xc0>)
     fc6:	2001      	movs	r0, #1
     fc8:	4b12      	ldr	r3, [pc, #72]	; (1014 <usart_async_read+0xc4>)
     fca:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     fcc:	a801      	add	r0, sp, #4
     fce:	4b12      	ldr	r3, [pc, #72]	; (1018 <usart_async_read+0xc8>)
     fd0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     fd2:	f106 0a34 	add.w	sl, r6, #52	; 0x34
     fd6:	4650      	mov	r0, sl
     fd8:	4b10      	ldr	r3, [pc, #64]	; (101c <usart_async_read+0xcc>)
     fda:	4798      	blx	r3
     fdc:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
     fde:	a801      	add	r0, sp, #4
     fe0:	4b0f      	ldr	r3, [pc, #60]	; (1020 <usart_async_read+0xd0>)
     fe2:	4798      	blx	r3
	uint16_t                       was_read = 0;
     fe4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     fe6:	f1b9 0f00 	cmp.w	r9, #0
     fea:	d00c      	beq.n	1006 <usart_async_read+0xb6>
{
     fec:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     fee:	4e0d      	ldr	r6, [pc, #52]	; (1024 <usart_async_read+0xd4>)
     ff0:	1c60      	adds	r0, r4, #1
     ff2:	b285      	uxth	r5, r0
     ff4:	1939      	adds	r1, r7, r4
     ff6:	4650      	mov	r0, sl
     ff8:	47b0      	blx	r6
     ffa:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     ffc:	454c      	cmp	r4, r9
     ffe:	d202      	bcs.n	1006 <usart_async_read+0xb6>
    1000:	b2a3      	uxth	r3, r4
    1002:	4598      	cmp	r8, r3
    1004:	d8f4      	bhi.n	ff0 <usart_async_read+0xa0>
}
    1006:	4628      	mov	r0, r5
    1008:	b002      	add	sp, #8
    100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    100e:	bf00      	nop
    1010:	000034f4 	.word	0x000034f4
    1014:	0000110d 	.word	0x0000110d
    1018:	00000bbd 	.word	0x00000bbd
    101c:	000011e9 	.word	0x000011e9
    1020:	00000bcb 	.word	0x00000bcb
    1024:	00001165 	.word	0x00001165

00001028 <usart_async_init>:
{
    1028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    102a:	460d      	mov	r5, r1
    102c:	4616      	mov	r6, r2
    102e:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1030:	4604      	mov	r4, r0
    1032:	b320      	cbz	r0, 107e <usart_async_init+0x56>
    1034:	b329      	cbz	r1, 1082 <usart_async_init+0x5a>
    1036:	b332      	cbz	r2, 1086 <usart_async_init+0x5e>
    1038:	1c18      	adds	r0, r3, #0
    103a:	bf18      	it	ne
    103c:	2001      	movne	r0, #1
    103e:	223a      	movs	r2, #58	; 0x3a
    1040:	4913      	ldr	r1, [pc, #76]	; (1090 <usart_async_init+0x68>)
    1042:	4b14      	ldr	r3, [pc, #80]	; (1094 <usart_async_init+0x6c>)
    1044:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1046:	463a      	mov	r2, r7
    1048:	4631      	mov	r1, r6
    104a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    104e:	4b12      	ldr	r3, [pc, #72]	; (1098 <usart_async_init+0x70>)
    1050:	4798      	blx	r3
    1052:	b9d0      	cbnz	r0, 108a <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    1054:	4629      	mov	r1, r5
    1056:	f104 0008 	add.w	r0, r4, #8
    105a:	4b10      	ldr	r3, [pc, #64]	; (109c <usart_async_init+0x74>)
    105c:	4798      	blx	r3
	if (init_status) {
    105e:	4603      	mov	r3, r0
    1060:	b958      	cbnz	r0, 107a <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    1062:	4a0f      	ldr	r2, [pc, #60]	; (10a0 <usart_async_init+0x78>)
    1064:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1066:	4a0f      	ldr	r2, [pc, #60]	; (10a4 <usart_async_init+0x7c>)
    1068:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    106a:	4a0f      	ldr	r2, [pc, #60]	; (10a8 <usart_async_init+0x80>)
    106c:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    106e:	4a0f      	ldr	r2, [pc, #60]	; (10ac <usart_async_init+0x84>)
    1070:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1072:	4a0f      	ldr	r2, [pc, #60]	; (10b0 <usart_async_init+0x88>)
    1074:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1076:	4a0f      	ldr	r2, [pc, #60]	; (10b4 <usart_async_init+0x8c>)
    1078:	6162      	str	r2, [r4, #20]
}
    107a:	4618      	mov	r0, r3
    107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    107e:	2000      	movs	r0, #0
    1080:	e7dd      	b.n	103e <usart_async_init+0x16>
    1082:	2000      	movs	r0, #0
    1084:	e7db      	b.n	103e <usart_async_init+0x16>
    1086:	2000      	movs	r0, #0
    1088:	e7d9      	b.n	103e <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    108a:	f06f 030c 	mvn.w	r3, #12
    108e:	e7f4      	b.n	107a <usart_async_init+0x52>
    1090:	000034f4 	.word	0x000034f4
    1094:	0000110d 	.word	0x0000110d
    1098:	00001115 	.word	0x00001115
    109c:	00002011 	.word	0x00002011
    10a0:	00000f51 	.word	0x00000f51
    10a4:	00000ebd 	.word	0x00000ebd
    10a8:	00000f1d 	.word	0x00000f1d
    10ac:	00000ea1 	.word	0x00000ea1
    10b0:	00000e79 	.word	0x00000e79
    10b4:	00000e8d 	.word	0x00000e8d

000010b8 <usart_async_enable>:
{
    10b8:	b510      	push	{r4, lr}
	ASSERT(descr);
    10ba:	4604      	mov	r4, r0
    10bc:	2261      	movs	r2, #97	; 0x61
    10be:	4906      	ldr	r1, [pc, #24]	; (10d8 <usart_async_enable+0x20>)
    10c0:	3000      	adds	r0, #0
    10c2:	bf18      	it	ne
    10c4:	2001      	movne	r0, #1
    10c6:	4b05      	ldr	r3, [pc, #20]	; (10dc <usart_async_enable+0x24>)
    10c8:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    10ca:	f104 0008 	add.w	r0, r4, #8
    10ce:	4b04      	ldr	r3, [pc, #16]	; (10e0 <usart_async_enable+0x28>)
    10d0:	4798      	blx	r3
}
    10d2:	2000      	movs	r0, #0
    10d4:	bd10      	pop	{r4, pc}
    10d6:	bf00      	nop
    10d8:	000034f4 	.word	0x000034f4
    10dc:	0000110d 	.word	0x0000110d
    10e0:	0000208d 	.word	0x0000208d

000010e4 <usart_async_get_io_descriptor>:
{
    10e4:	b538      	push	{r3, r4, r5, lr}
    10e6:	460c      	mov	r4, r1
	ASSERT(descr && io);
    10e8:	4605      	mov	r5, r0
    10ea:	b148      	cbz	r0, 1100 <usart_async_get_io_descriptor+0x1c>
    10ec:	1c08      	adds	r0, r1, #0
    10ee:	bf18      	it	ne
    10f0:	2001      	movne	r0, #1
    10f2:	2277      	movs	r2, #119	; 0x77
    10f4:	4903      	ldr	r1, [pc, #12]	; (1104 <usart_async_get_io_descriptor+0x20>)
    10f6:	4b04      	ldr	r3, [pc, #16]	; (1108 <usart_async_get_io_descriptor+0x24>)
    10f8:	4798      	blx	r3
	*io = &descr->io;
    10fa:	6025      	str	r5, [r4, #0]
}
    10fc:	2000      	movs	r0, #0
    10fe:	bd38      	pop	{r3, r4, r5, pc}
    1100:	2000      	movs	r0, #0
    1102:	e7f6      	b.n	10f2 <usart_async_get_io_descriptor+0xe>
    1104:	000034f4 	.word	0x000034f4
    1108:	0000110d 	.word	0x0000110d

0000110c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    110c:	b900      	cbnz	r0, 1110 <assert+0x4>
		__asm("BKPT #0");
    110e:	be00      	bkpt	0x0000
    1110:	4770      	bx	lr
	...

00001114 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1114:	b570      	push	{r4, r5, r6, lr}
    1116:	460e      	mov	r6, r1
    1118:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    111a:	4604      	mov	r4, r0
    111c:	b178      	cbz	r0, 113e <ringbuffer_init+0x2a>
    111e:	b181      	cbz	r1, 1142 <ringbuffer_init+0x2e>
    1120:	b1a2      	cbz	r2, 114c <ringbuffer_init+0x38>
    1122:	2001      	movs	r0, #1
    1124:	2228      	movs	r2, #40	; 0x28
    1126:	490d      	ldr	r1, [pc, #52]	; (115c <ringbuffer_init+0x48>)
    1128:	4b0d      	ldr	r3, [pc, #52]	; (1160 <ringbuffer_init+0x4c>)
    112a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    112c:	1e6b      	subs	r3, r5, #1
    112e:	421d      	tst	r5, r3
    1130:	d109      	bne.n	1146 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1132:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1134:	2000      	movs	r0, #0
    1136:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1138:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    113a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    113c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    113e:	2000      	movs	r0, #0
    1140:	e7f0      	b.n	1124 <ringbuffer_init+0x10>
    1142:	2000      	movs	r0, #0
    1144:	e7ee      	b.n	1124 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1146:	f06f 000c 	mvn.w	r0, #12
    114a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    114c:	2228      	movs	r2, #40	; 0x28
    114e:	4903      	ldr	r1, [pc, #12]	; (115c <ringbuffer_init+0x48>)
    1150:	2000      	movs	r0, #0
    1152:	4b03      	ldr	r3, [pc, #12]	; (1160 <ringbuffer_init+0x4c>)
    1154:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1156:	1e6b      	subs	r3, r5, #1
    1158:	e7eb      	b.n	1132 <ringbuffer_init+0x1e>
    115a:	bf00      	nop
    115c:	00003514 	.word	0x00003514
    1160:	0000110d 	.word	0x0000110d

00001164 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1164:	b538      	push	{r3, r4, r5, lr}
    1166:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1168:	4604      	mov	r4, r0
    116a:	b1a0      	cbz	r0, 1196 <ringbuffer_get+0x32>
    116c:	1c08      	adds	r0, r1, #0
    116e:	bf18      	it	ne
    1170:	2001      	movne	r0, #1
    1172:	2240      	movs	r2, #64	; 0x40
    1174:	490a      	ldr	r1, [pc, #40]	; (11a0 <ringbuffer_get+0x3c>)
    1176:	4b0b      	ldr	r3, [pc, #44]	; (11a4 <ringbuffer_get+0x40>)
    1178:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    117a:	68a3      	ldr	r3, [r4, #8]
    117c:	68e2      	ldr	r2, [r4, #12]
    117e:	429a      	cmp	r2, r3
    1180:	d00b      	beq.n	119a <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1182:	6862      	ldr	r2, [r4, #4]
    1184:	4013      	ands	r3, r2
    1186:	6822      	ldr	r2, [r4, #0]
    1188:	5cd3      	ldrb	r3, [r2, r3]
    118a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    118c:	68a3      	ldr	r3, [r4, #8]
    118e:	3301      	adds	r3, #1
    1190:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1192:	2000      	movs	r0, #0
    1194:	bd38      	pop	{r3, r4, r5, pc}
    1196:	2000      	movs	r0, #0
    1198:	e7eb      	b.n	1172 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    119a:	f06f 0009 	mvn.w	r0, #9
}
    119e:	bd38      	pop	{r3, r4, r5, pc}
    11a0:	00003514 	.word	0x00003514
    11a4:	0000110d 	.word	0x0000110d

000011a8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    11a8:	b538      	push	{r3, r4, r5, lr}
    11aa:	460d      	mov	r5, r1
	ASSERT(rb);
    11ac:	4604      	mov	r4, r0
    11ae:	2251      	movs	r2, #81	; 0x51
    11b0:	490b      	ldr	r1, [pc, #44]	; (11e0 <ringbuffer_put+0x38>)
    11b2:	3000      	adds	r0, #0
    11b4:	bf18      	it	ne
    11b6:	2001      	movne	r0, #1
    11b8:	4b0a      	ldr	r3, [pc, #40]	; (11e4 <ringbuffer_put+0x3c>)
    11ba:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    11bc:	68e3      	ldr	r3, [r4, #12]
    11be:	6862      	ldr	r2, [r4, #4]
    11c0:	4013      	ands	r3, r2
    11c2:	6822      	ldr	r2, [r4, #0]
    11c4:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    11c6:	68e3      	ldr	r3, [r4, #12]
    11c8:	6861      	ldr	r1, [r4, #4]
    11ca:	68a2      	ldr	r2, [r4, #8]
    11cc:	1a9a      	subs	r2, r3, r2
    11ce:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    11d0:	bf84      	itt	hi
    11d2:	1a59      	subhi	r1, r3, r1
    11d4:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    11d6:	3301      	adds	r3, #1
    11d8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    11da:	2000      	movs	r0, #0
    11dc:	bd38      	pop	{r3, r4, r5, pc}
    11de:	bf00      	nop
    11e0:	00003514 	.word	0x00003514
    11e4:	0000110d 	.word	0x0000110d

000011e8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    11e8:	b510      	push	{r4, lr}
	ASSERT(rb);
    11ea:	4604      	mov	r4, r0
    11ec:	2267      	movs	r2, #103	; 0x67
    11ee:	4905      	ldr	r1, [pc, #20]	; (1204 <ringbuffer_num+0x1c>)
    11f0:	3000      	adds	r0, #0
    11f2:	bf18      	it	ne
    11f4:	2001      	movne	r0, #1
    11f6:	4b04      	ldr	r3, [pc, #16]	; (1208 <ringbuffer_num+0x20>)
    11f8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    11fa:	68e0      	ldr	r0, [r4, #12]
    11fc:	68a3      	ldr	r3, [r4, #8]
}
    11fe:	1ac0      	subs	r0, r0, r3
    1200:	bd10      	pop	{r4, pc}
    1202:	bf00      	nop
    1204:	00003514 	.word	0x00003514
    1208:	0000110d 	.word	0x0000110d

0000120c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    120c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    120e:	4a06      	ldr	r2, [pc, #24]	; (1228 <_sbrk+0x1c>)
    1210:	6812      	ldr	r2, [r2, #0]
    1212:	b122      	cbz	r2, 121e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1214:	4a04      	ldr	r2, [pc, #16]	; (1228 <_sbrk+0x1c>)
    1216:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1218:	4403      	add	r3, r0
    121a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    121c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    121e:	4903      	ldr	r1, [pc, #12]	; (122c <_sbrk+0x20>)
    1220:	4a01      	ldr	r2, [pc, #4]	; (1228 <_sbrk+0x1c>)
    1222:	6011      	str	r1, [r2, #0]
    1224:	e7f6      	b.n	1214 <_sbrk+0x8>
    1226:	bf00      	nop
    1228:	200003c8 	.word	0x200003c8
    122c:	20010f48 	.word	0x20010f48

00001230 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1230:	6940      	ldr	r0, [r0, #20]
    1232:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1236:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    123a:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    123c:	0040      	lsls	r0, r0, #1
    123e:	3076      	adds	r0, #118	; 0x76
}
    1240:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1244:	4770      	bx	lr
	...

00001248 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1248:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    124a:	f013 0f01 	tst.w	r3, #1
    124e:	d11b      	bne.n	1288 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1250:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1252:	f013 0f03 	tst.w	r3, #3
    1256:	d1fb      	bne.n	1250 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1258:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    125a:	f013 0f02 	tst.w	r3, #2
    125e:	d00d      	beq.n	127c <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1260:	8803      	ldrh	r3, [r0, #0]
    1262:	f023 0302 	bic.w	r3, r3, #2
    1266:	041b      	lsls	r3, r3, #16
    1268:	0c1b      	lsrs	r3, r3, #16
    126a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    126c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    126e:	f013 0f03 	tst.w	r3, #3
    1272:	d1fb      	bne.n	126c <_adc_init+0x24>
    1274:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1276:	f013 0f02 	tst.w	r3, #2
    127a:	d1fb      	bne.n	1274 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    127c:	2301      	movs	r3, #1
    127e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1280:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1282:	f013 0f03 	tst.w	r3, #3
    1286:	d1fb      	bne.n	1280 <_adc_init+0x38>
    1288:	6b03      	ldr	r3, [r0, #48]	; 0x30
    128a:	f013 0f01 	tst.w	r3, #1
    128e:	d1fb      	bne.n	1288 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1290:	2316      	movs	r3, #22
    1292:	4a37      	ldr	r2, [pc, #220]	; (1370 <_adc_init+0x128>)
    1294:	fb03 2301 	mla	r3, r3, r1, r2
    1298:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    129a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    129c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    129e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    12a2:	2b00      	cmp	r3, #0
    12a4:	d1fa      	bne.n	129c <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    12a6:	2316      	movs	r3, #22
    12a8:	4a31      	ldr	r2, [pc, #196]	; (1370 <_adc_init+0x128>)
    12aa:	fb03 2301 	mla	r3, r3, r1, r2
    12ae:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    12b0:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    12b8:	2b00      	cmp	r3, #0
    12ba:	d1fa      	bne.n	12b2 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    12bc:	2316      	movs	r3, #22
    12be:	4a2c      	ldr	r2, [pc, #176]	; (1370 <_adc_init+0x128>)
    12c0:	fb03 2301 	mla	r3, r3, r1, r2
    12c4:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    12c6:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    12c8:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    12ca:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
    12d2:	2b00      	cmp	r3, #0
    12d4:	d1fa      	bne.n	12cc <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    12d6:	2316      	movs	r3, #22
    12d8:	4a25      	ldr	r2, [pc, #148]	; (1370 <_adc_init+0x128>)
    12da:	fb03 2301 	mla	r3, r3, r1, r2
    12de:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    12e0:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    12e8:	2b00      	cmp	r3, #0
    12ea:	d1fa      	bne.n	12e2 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    12ec:	2316      	movs	r3, #22
    12ee:	4a20      	ldr	r2, [pc, #128]	; (1370 <_adc_init+0x128>)
    12f0:	fb03 2301 	mla	r3, r3, r1, r2
    12f4:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    12f6:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    12fe:	2b00      	cmp	r3, #0
    1300:	d1fa      	bne.n	12f8 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1302:	2316      	movs	r3, #22
    1304:	4a1a      	ldr	r2, [pc, #104]	; (1370 <_adc_init+0x128>)
    1306:	fb03 2301 	mla	r3, r3, r1, r2
    130a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    130c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    130e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1310:	f013 0f80 	tst.w	r3, #128	; 0x80
    1314:	d1fb      	bne.n	130e <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1316:	2316      	movs	r3, #22
    1318:	4a15      	ldr	r2, [pc, #84]	; (1370 <_adc_init+0x128>)
    131a:	fb03 2301 	mla	r3, r3, r1, r2
    131e:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1320:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1322:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1324:	f413 7f80 	tst.w	r3, #256	; 0x100
    1328:	d1fb      	bne.n	1322 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    132a:	2316      	movs	r3, #22
    132c:	4a10      	ldr	r2, [pc, #64]	; (1370 <_adc_init+0x128>)
    132e:	fb03 2301 	mla	r3, r3, r1, r2
    1332:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1334:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1336:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1338:	f413 7f00 	tst.w	r3, #512	; 0x200
    133c:	d1fb      	bne.n	1336 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    133e:	2316      	movs	r3, #22
    1340:	4a0b      	ldr	r2, [pc, #44]	; (1370 <_adc_init+0x128>)
    1342:	fb03 2301 	mla	r3, r3, r1, r2
    1346:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1348:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    134a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    134c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1350:	d1fb      	bne.n	134a <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1352:	2216      	movs	r2, #22
    1354:	4b06      	ldr	r3, [pc, #24]	; (1370 <_adc_init+0x128>)
    1356:	fb02 3101 	mla	r1, r2, r1, r3
    135a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    135c:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    135e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1360:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1362:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1364:	f013 0f03 	tst.w	r3, #3
    1368:	d1fb      	bne.n	1362 <_adc_init+0x11a>

	return ERR_NONE;
}
    136a:	2000      	movs	r0, #0
    136c:	4770      	bx	lr
    136e:	bf00      	nop
    1370:	00003538 	.word	0x00003538

00001374 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    1374:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    1376:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    1378:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    137c:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    1380:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    1382:	f013 0f01 	tst.w	r3, #1
    1386:	d106      	bne.n	1396 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    1388:	f013 0f02 	tst.w	r3, #2
    138c:	d10d      	bne.n	13aa <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    138e:	f013 0f04 	tst.w	r3, #4
    1392:	d111      	bne.n	13b8 <_adc_interrupt_handler+0x44>
    1394:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1396:	2301      	movs	r3, #1
    1398:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    139c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    13a0:	6883      	ldr	r3, [r0, #8]
    13a2:	b292      	uxth	r2, r2
    13a4:	2100      	movs	r1, #0
    13a6:	4798      	blx	r3
    13a8:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    13aa:	2302      	movs	r3, #2
    13ac:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    13b0:	6843      	ldr	r3, [r0, #4]
    13b2:	2100      	movs	r1, #0
    13b4:	4798      	blx	r3
    13b6:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    13b8:	2304      	movs	r3, #4
    13ba:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    13be:	6803      	ldr	r3, [r0, #0]
    13c0:	2100      	movs	r1, #0
    13c2:	4798      	blx	r3
	}
}
    13c4:	e7e6      	b.n	1394 <_adc_interrupt_handler+0x20>
	...

000013c8 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    13c8:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    13cc:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    13d0:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    13d4:	b148      	cbz	r0, 13ea <_adc_get_regs+0x22>
    13d6:	2801      	cmp	r0, #1
    13d8:	d009      	beq.n	13ee <_adc_get_regs+0x26>
{
    13da:	b508      	push	{r3, lr}
	ASSERT(false);
    13dc:	228c      	movs	r2, #140	; 0x8c
    13de:	4905      	ldr	r1, [pc, #20]	; (13f4 <_adc_get_regs+0x2c>)
    13e0:	2000      	movs	r0, #0
    13e2:	4b05      	ldr	r3, [pc, #20]	; (13f8 <_adc_get_regs+0x30>)
    13e4:	4798      	blx	r3
	return 0;
    13e6:	2000      	movs	r0, #0
    13e8:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    13ea:	2000      	movs	r0, #0
    13ec:	4770      	bx	lr
    13ee:	2001      	movs	r0, #1
    13f0:	4770      	bx	lr
    13f2:	bf00      	nop
    13f4:	00003564 	.word	0x00003564
    13f8:	0000110d 	.word	0x0000110d

000013fc <_adc_async_init>:
{
    13fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1400:	460c      	mov	r4, r1
	ASSERT(device);
    1402:	4605      	mov	r5, r0
    1404:	22e6      	movs	r2, #230	; 0xe6
    1406:	493b      	ldr	r1, [pc, #236]	; (14f4 <_adc_async_init+0xf8>)
    1408:	3000      	adds	r0, #0
    140a:	bf18      	it	ne
    140c:	2001      	movne	r0, #1
    140e:	4b3a      	ldr	r3, [pc, #232]	; (14f8 <_adc_async_init+0xfc>)
    1410:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1412:	4620      	mov	r0, r4
    1414:	4b39      	ldr	r3, [pc, #228]	; (14fc <_adc_async_init+0x100>)
    1416:	4798      	blx	r3
    1418:	4601      	mov	r1, r0
    141a:	4620      	mov	r0, r4
    141c:	4b38      	ldr	r3, [pc, #224]	; (1500 <_adc_async_init+0x104>)
    141e:	4798      	blx	r3
	if (init_status) {
    1420:	4606      	mov	r6, r0
    1422:	b110      	cbz	r0, 142a <_adc_async_init+0x2e>
}
    1424:	4630      	mov	r0, r6
    1426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    142a:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    142c:	4b35      	ldr	r3, [pc, #212]	; (1504 <_adc_async_init+0x108>)
    142e:	429c      	cmp	r4, r3
    1430:	d05c      	beq.n	14ec <_adc_async_init+0xf0>
	if (hw == ADC1) {
    1432:	4b35      	ldr	r3, [pc, #212]	; (1508 <_adc_async_init+0x10c>)
    1434:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    1436:	bf04      	itt	eq
    1438:	4b34      	ldreq	r3, [pc, #208]	; (150c <_adc_async_init+0x110>)
    143a:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    143c:	4628      	mov	r0, r5
    143e:	4f34      	ldr	r7, [pc, #208]	; (1510 <_adc_async_init+0x114>)
    1440:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1442:	0943      	lsrs	r3, r0, #5
    1444:	f000 001f 	and.w	r0, r0, #31
    1448:	2401      	movs	r4, #1
    144a:	fa04 f000 	lsl.w	r0, r4, r0
    144e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1514 <_adc_async_init+0x118>
    1452:	3320      	adds	r3, #32
    1454:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1458:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    145c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    1460:	4628      	mov	r0, r5
    1462:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1464:	0943      	lsrs	r3, r0, #5
    1466:	f000 001f 	and.w	r0, r0, #31
    146a:	fa04 f000 	lsl.w	r0, r4, r0
    146e:	3360      	adds	r3, #96	; 0x60
    1470:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    1474:	4628      	mov	r0, r5
    1476:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1478:	0943      	lsrs	r3, r0, #5
    147a:	f000 001f 	and.w	r0, r0, #31
    147e:	4084      	lsls	r4, r0
    1480:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    1484:	4628      	mov	r0, r5
    1486:	47b8      	blx	r7
    1488:	3001      	adds	r0, #1
    148a:	b280      	uxth	r0, r0
    148c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    148e:	2b00      	cmp	r3, #0
    1490:	dbc8      	blt.n	1424 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1492:	095b      	lsrs	r3, r3, #5
    1494:	f000 001f 	and.w	r0, r0, #31
    1498:	2201      	movs	r2, #1
    149a:	fa02 f000 	lsl.w	r0, r2, r0
    149e:	3320      	adds	r3, #32
    14a0:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    14a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14a8:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    14ac:	4628      	mov	r0, r5
    14ae:	47b8      	blx	r7
    14b0:	3001      	adds	r0, #1
    14b2:	b280      	uxth	r0, r0
    14b4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    14b6:	2b00      	cmp	r3, #0
    14b8:	dbb4      	blt.n	1424 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14ba:	095b      	lsrs	r3, r3, #5
    14bc:	f000 001f 	and.w	r0, r0, #31
    14c0:	2201      	movs	r2, #1
    14c2:	fa02 f000 	lsl.w	r0, r2, r0
    14c6:	3360      	adds	r3, #96	; 0x60
    14c8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    14cc:	4628      	mov	r0, r5
    14ce:	47b8      	blx	r7
    14d0:	3001      	adds	r0, #1
    14d2:	b280      	uxth	r0, r0
    14d4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    14d6:	2b00      	cmp	r3, #0
    14d8:	dba4      	blt.n	1424 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14da:	095b      	lsrs	r3, r3, #5
    14dc:	f000 001f 	and.w	r0, r0, #31
    14e0:	2201      	movs	r2, #1
    14e2:	fa02 f000 	lsl.w	r0, r2, r0
    14e6:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    14ea:	e79b      	b.n	1424 <_adc_async_init+0x28>
		_adc0_dev = dev;
    14ec:	4b07      	ldr	r3, [pc, #28]	; (150c <_adc_async_init+0x110>)
    14ee:	601d      	str	r5, [r3, #0]
    14f0:	e7a4      	b.n	143c <_adc_async_init+0x40>
    14f2:	bf00      	nop
    14f4:	00003564 	.word	0x00003564
    14f8:	0000110d 	.word	0x0000110d
    14fc:	000013c9 	.word	0x000013c9
    1500:	00001249 	.word	0x00001249
    1504:	43001c00 	.word	0x43001c00
    1508:	43002000 	.word	0x43002000
    150c:	200003cc 	.word	0x200003cc
    1510:	00001231 	.word	0x00001231
    1514:	e000e100 	.word	0xe000e100

00001518 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    1518:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    151a:	8813      	ldrh	r3, [r2, #0]
    151c:	b29b      	uxth	r3, r3
    151e:	f043 0302 	orr.w	r3, r3, #2
    1522:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1524:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1526:	f013 0f03 	tst.w	r3, #3
    152a:	d1fb      	bne.n	1524 <_adc_async_enable_channel+0xc>
}
    152c:	4770      	bx	lr

0000152e <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    152e:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    1530:	88db      	ldrh	r3, [r3, #6]
    1532:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    1536:	2b03      	cmp	r3, #3
}
    1538:	bf0c      	ite	eq
    153a:	2001      	moveq	r0, #1
    153c:	2002      	movne	r0, #2
    153e:	4770      	bx	lr

00001540 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1540:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    1542:	7d13      	ldrb	r3, [r2, #20]
    1544:	f043 0302 	orr.w	r3, r3, #2
    1548:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    154a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    154c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1550:	2b00      	cmp	r3, #0
    1552:	d1fa      	bne.n	154a <_adc_async_convert+0xa>
}
    1554:	4770      	bx	lr

00001556 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    1556:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    1558:	2a01      	cmp	r2, #1
    155a:	d007      	beq.n	156c <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    155c:	2a02      	cmp	r2, #2
    155e:	d00e      	beq.n	157e <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    1560:	b91a      	cbnz	r2, 156a <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    1562:	b1ab      	cbz	r3, 1590 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    1564:	2301      	movs	r3, #1
    1566:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    156a:	4770      	bx	lr
	if (value == 0x0) {
    156c:	b91b      	cbnz	r3, 1576 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    156e:	2304      	movs	r3, #4
    1570:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    1574:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    1576:	2304      	movs	r3, #4
    1578:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    157c:	4770      	bx	lr
	if (value == 0x0) {
    157e:	b91b      	cbnz	r3, 1588 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    1580:	2302      	movs	r3, #2
    1582:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    1586:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    1588:	2302      	movs	r3, #2
    158a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    158e:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    1590:	2301      	movs	r3, #1
    1592:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    1596:	4770      	bx	lr

00001598 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    1598:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    159a:	4b02      	ldr	r3, [pc, #8]	; (15a4 <ADC0_0_Handler+0xc>)
    159c:	6818      	ldr	r0, [r3, #0]
    159e:	4b02      	ldr	r3, [pc, #8]	; (15a8 <ADC0_0_Handler+0x10>)
    15a0:	4798      	blx	r3
    15a2:	bd08      	pop	{r3, pc}
    15a4:	200003cc 	.word	0x200003cc
    15a8:	00001375 	.word	0x00001375

000015ac <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    15ac:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    15ae:	4b02      	ldr	r3, [pc, #8]	; (15b8 <ADC0_1_Handler+0xc>)
    15b0:	6818      	ldr	r0, [r3, #0]
    15b2:	4b02      	ldr	r3, [pc, #8]	; (15bc <ADC0_1_Handler+0x10>)
    15b4:	4798      	blx	r3
    15b6:	bd08      	pop	{r3, pc}
    15b8:	200003cc 	.word	0x200003cc
    15bc:	00001375 	.word	0x00001375

000015c0 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    15c0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    15c2:	4b02      	ldr	r3, [pc, #8]	; (15cc <ADC1_0_Handler+0xc>)
    15c4:	6858      	ldr	r0, [r3, #4]
    15c6:	4b02      	ldr	r3, [pc, #8]	; (15d0 <ADC1_0_Handler+0x10>)
    15c8:	4798      	blx	r3
    15ca:	bd08      	pop	{r3, pc}
    15cc:	200003cc 	.word	0x200003cc
    15d0:	00001375 	.word	0x00001375

000015d4 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    15d4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    15d6:	4b02      	ldr	r3, [pc, #8]	; (15e0 <ADC1_1_Handler+0xc>)
    15d8:	6858      	ldr	r0, [r3, #4]
    15da:	4b02      	ldr	r3, [pc, #8]	; (15e4 <ADC1_1_Handler+0x10>)
    15dc:	4798      	blx	r3
    15de:	bd08      	pop	{r3, pc}
    15e0:	200003cc 	.word	0x200003cc
    15e4:	00001375 	.word	0x00001375

000015e8 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    15e8:	f64b 3380 	movw	r3, #48000	; 0xbb80
    15ec:	fb03 f000 	mul.w	r0, r3, r0
    15f0:	4770      	bx	lr
	...

000015f4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    15f4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    15f6:	4a0d      	ldr	r2, [pc, #52]	; (162c <_init_chip+0x38>)
    15f8:	8813      	ldrh	r3, [r2, #0]
    15fa:	b29b      	uxth	r3, r3
    15fc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    15fe:	4b0c      	ldr	r3, [pc, #48]	; (1630 <_init_chip+0x3c>)
    1600:	4798      	blx	r3
	_oscctrl_init_sources();
    1602:	4b0c      	ldr	r3, [pc, #48]	; (1634 <_init_chip+0x40>)
    1604:	4798      	blx	r3
	_mclk_init();
    1606:	4b0c      	ldr	r3, [pc, #48]	; (1638 <_init_chip+0x44>)
    1608:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    160a:	2008      	movs	r0, #8
    160c:	4c0b      	ldr	r4, [pc, #44]	; (163c <_init_chip+0x48>)
    160e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1610:	4b0b      	ldr	r3, [pc, #44]	; (1640 <_init_chip+0x4c>)
    1612:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1614:	f640 70f7 	movw	r0, #4087	; 0xff7
    1618:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    161a:	4a0a      	ldr	r2, [pc, #40]	; (1644 <_init_chip+0x50>)
    161c:	6913      	ldr	r3, [r2, #16]
    161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1622:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1624:	4b08      	ldr	r3, [pc, #32]	; (1648 <_init_chip+0x54>)
    1626:	4798      	blx	r3
    1628:	bd10      	pop	{r4, pc}
    162a:	bf00      	nop
    162c:	41004000 	.word	0x41004000
    1630:	0000197d 	.word	0x0000197d
    1634:	00001991 	.word	0x00001991
    1638:	00001971 	.word	0x00001971
    163c:	00001915 	.word	0x00001915
    1640:	000019ad 	.word	0x000019ad
    1644:	40000800 	.word	0x40000800
    1648:	000016c1 	.word	0x000016c1

0000164c <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    164c:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    164e:	4a1a      	ldr	r2, [pc, #104]	; (16b8 <_dmac_handler+0x6c>)
    1650:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1652:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1656:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    165a:	4818      	ldr	r0, [pc, #96]	; (16bc <_dmac_handler+0x70>)
    165c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    1660:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    1664:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    1668:	f012 0f01 	tst.w	r2, #1
    166c:	d10a      	bne.n	1684 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    166e:	011a      	lsls	r2, r3, #4
    1670:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1674:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1678:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    167c:	f012 0f02 	tst.w	r2, #2
    1680:	d10b      	bne.n	169a <_dmac_handler+0x4e>
    1682:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1684:	011a      	lsls	r2, r3, #4
    1686:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    168a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    168e:	2101      	movs	r1, #1
    1690:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1694:	6843      	ldr	r3, [r0, #4]
    1696:	4798      	blx	r3
    1698:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    169a:	011a      	lsls	r2, r3, #4
    169c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    16a0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    16a4:	2102      	movs	r1, #2
    16a6:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    16aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16ae:	4a03      	ldr	r2, [pc, #12]	; (16bc <_dmac_handler+0x70>)
    16b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    16b4:	4798      	blx	r3
	}
}
    16b6:	e7e4      	b.n	1682 <_dmac_handler+0x36>
    16b8:	4100a000 	.word	0x4100a000
    16bc:	200003d4 	.word	0x200003d4

000016c0 <_dma_init>:
{
    16c0:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    16c2:	4a31      	ldr	r2, [pc, #196]	; (1788 <_dma_init+0xc8>)
    16c4:	8813      	ldrh	r3, [r2, #0]
    16c6:	f023 0302 	bic.w	r3, r3, #2
    16ca:	041b      	lsls	r3, r3, #16
    16cc:	0c1b      	lsrs	r3, r3, #16
    16ce:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    16d0:	8853      	ldrh	r3, [r2, #2]
    16d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    16d6:	041b      	lsls	r3, r3, #16
    16d8:	0c1b      	lsrs	r3, r3, #16
    16da:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    16dc:	8813      	ldrh	r3, [r2, #0]
    16de:	b29b      	uxth	r3, r3
    16e0:	f043 0301 	orr.w	r3, r3, #1
    16e4:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    16e6:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    16e8:	f013 0f01 	tst.w	r3, #1
    16ec:	d1fb      	bne.n	16e6 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    16ee:	4b26      	ldr	r3, [pc, #152]	; (1788 <_dma_init+0xc8>)
    16f0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    16f4:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    16f6:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    16f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    16fc:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    16fe:	2100      	movs	r1, #0
    1700:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1702:	4a22      	ldr	r2, [pc, #136]	; (178c <_dma_init+0xcc>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1704:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1706:	4a22      	ldr	r2, [pc, #136]	; (1790 <_dma_init+0xd0>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1708:	639a      	str	r2, [r3, #56]	; 0x38
    170a:	4b22      	ldr	r3, [pc, #136]	; (1794 <_dma_init+0xd4>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    170c:	4c1f      	ldr	r4, [pc, #124]	; (178c <_dma_init+0xcc>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    170e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1710:	681d      	ldr	r5, [r3, #0]
    1712:	0108      	lsls	r0, r1, #4
    1714:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    1718:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    171c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    171e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1720:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1724:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1726:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    172a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    172c:	1822      	adds	r2, r4, r0
    172e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1730:	60d6      	str	r6, [r2, #12]
    1732:	3101      	adds	r1, #1
    1734:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1736:	2920      	cmp	r1, #32
    1738:	d1ea      	bne.n	1710 <_dma_init+0x50>
    173a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    173c:	2001      	movs	r0, #1
    173e:	4916      	ldr	r1, [pc, #88]	; (1798 <_dma_init+0xd8>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1740:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    1742:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1746:	d00b      	beq.n	1760 <_dma_init+0xa0>
    1748:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    174a:	2b24      	cmp	r3, #36	; 0x24
    174c:	d1f8      	bne.n	1740 <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    174e:	4a0e      	ldr	r2, [pc, #56]	; (1788 <_dma_init+0xc8>)
    1750:	8813      	ldrh	r3, [r2, #0]
    1752:	b29b      	uxth	r3, r3
    1754:	f043 0302 	orr.w	r3, r3, #2
    1758:	8013      	strh	r3, [r2, #0]
}
    175a:	2000      	movs	r0, #0
    175c:	bc70      	pop	{r4, r5, r6}
    175e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1760:	095c      	lsrs	r4, r3, #5
    1762:	f002 021f 	and.w	r2, r2, #31
    1766:	fa00 f202 	lsl.w	r2, r0, r2
    176a:	f104 0520 	add.w	r5, r4, #32
    176e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1776:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    177a:	f104 0560 	add.w	r5, r4, #96	; 0x60
    177e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1782:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    1786:	e7df      	b.n	1748 <_dma_init+0x88>
    1788:	4100a000 	.word	0x4100a000
    178c:	20000ac0 	.word	0x20000ac0
    1790:	20000cc0 	.word	0x20000cc0
    1794:	0000357c 	.word	0x0000357c
    1798:	e000e100 	.word	0xe000e100

0000179c <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    179c:	b991      	cbnz	r1, 17c4 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    179e:	b942      	cbnz	r2, 17b2 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    17a0:	0100      	lsls	r0, r0, #4
    17a2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    17a6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    17aa:	2302      	movs	r3, #2
    17ac:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    17b0:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    17b2:	0100      	lsls	r0, r0, #4
    17b4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    17b8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    17bc:	2302      	movs	r3, #2
    17be:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    17c2:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    17c4:	2901      	cmp	r1, #1
    17c6:	d000      	beq.n	17ca <_dma_set_irq_state+0x2e>
    17c8:	4770      	bx	lr
	if (value == 0x0) {
    17ca:	b142      	cbz	r2, 17de <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    17cc:	0100      	lsls	r0, r0, #4
    17ce:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    17d2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    17d6:	2301      	movs	r3, #1
    17d8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    17dc:	e7f4      	b.n	17c8 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    17de:	0100      	lsls	r0, r0, #4
    17e0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    17e4:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    17e8:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    17ec:	4770      	bx	lr
	...

000017f0 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    17f0:	4b02      	ldr	r3, [pc, #8]	; (17fc <_dma_set_destination_address+0xc>)
    17f2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    17f6:	6081      	str	r1, [r0, #8]
}
    17f8:	2000      	movs	r0, #0
    17fa:	4770      	bx	lr
    17fc:	20000ac0 	.word	0x20000ac0

00001800 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1800:	4b02      	ldr	r3, [pc, #8]	; (180c <_dma_set_source_address+0xc>)
    1802:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1806:	6041      	str	r1, [r0, #4]
}
    1808:	2000      	movs	r0, #0
    180a:	4770      	bx	lr
    180c:	20000ac0 	.word	0x20000ac0

00001810 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1810:	4a05      	ldr	r2, [pc, #20]	; (1828 <_dma_srcinc_enable+0x18>)
    1812:	0100      	lsls	r0, r0, #4
    1814:	5a13      	ldrh	r3, [r2, r0]
    1816:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    1818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    181c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    1820:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    1822:	5211      	strh	r1, [r2, r0]
}
    1824:	2000      	movs	r0, #0
    1826:	4770      	bx	lr
    1828:	20000ac0 	.word	0x20000ac0

0000182c <_dma_set_data_amount>:
{
    182c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    182e:	4c14      	ldr	r4, [pc, #80]	; (1880 <_dma_set_data_amount+0x54>)
    1830:	0102      	lsls	r2, r0, #4
    1832:	18a3      	adds	r3, r4, r2
    1834:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1836:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    1838:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    183c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    183e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    1842:	d006      	beq.n	1852 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1844:	fa01 f403 	lsl.w	r4, r1, r3
    1848:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    184a:	4a0d      	ldr	r2, [pc, #52]	; (1880 <_dma_set_data_amount+0x54>)
    184c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    1850:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    1852:	4c0b      	ldr	r4, [pc, #44]	; (1880 <_dma_set_data_amount+0x54>)
    1854:	0102      	lsls	r2, r0, #4
    1856:	18a5      	adds	r5, r4, r2
    1858:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    185a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    185c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    1860:	d005      	beq.n	186e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1862:	fa01 f303 	lsl.w	r3, r1, r3
    1866:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1868:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    186c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    186e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1870:	4b03      	ldr	r3, [pc, #12]	; (1880 <_dma_set_data_amount+0x54>)
    1872:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1876:	8041      	strh	r1, [r0, #2]
}
    1878:	2000      	movs	r0, #0
    187a:	bc30      	pop	{r4, r5}
    187c:	4770      	bx	lr
    187e:	bf00      	nop
    1880:	20000ac0 	.word	0x20000ac0

00001884 <_dma_enable_transaction>:
{
    1884:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    1886:	4c0d      	ldr	r4, [pc, #52]	; (18bc <_dma_enable_transaction+0x38>)
    1888:	0103      	lsls	r3, r0, #4
    188a:	5ae2      	ldrh	r2, [r4, r3]
    188c:	b292      	uxth	r2, r2
    188e:	f042 0201 	orr.w	r2, r2, #1
    1892:	52e2      	strh	r2, [r4, r3]
    1894:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1898:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    189c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    189e:	f042 0202 	orr.w	r2, r2, #2
    18a2:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    18a4:	b131      	cbz	r1, 18b4 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    18a6:	4a06      	ldr	r2, [pc, #24]	; (18c0 <_dma_enable_transaction+0x3c>)
    18a8:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    18aa:	2301      	movs	r3, #1
    18ac:	fa03 f000 	lsl.w	r0, r3, r0
    18b0:	4308      	orrs	r0, r1
    18b2:	6110      	str	r0, [r2, #16]
}
    18b4:	2000      	movs	r0, #0
    18b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    18ba:	4770      	bx	lr
    18bc:	20000ac0 	.word	0x20000ac0
    18c0:	4100a000 	.word	0x4100a000

000018c4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    18c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    18c8:	4b02      	ldr	r3, [pc, #8]	; (18d4 <_dma_get_channel_resource+0x10>)
    18ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    18ce:	6001      	str	r1, [r0, #0]
}
    18d0:	2000      	movs	r0, #0
    18d2:	4770      	bx	lr
    18d4:	200003d4 	.word	0x200003d4

000018d8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    18d8:	b508      	push	{r3, lr}
	_dmac_handler();
    18da:	4b01      	ldr	r3, [pc, #4]	; (18e0 <DMAC_0_Handler+0x8>)
    18dc:	4798      	blx	r3
    18de:	bd08      	pop	{r3, pc}
    18e0:	0000164d 	.word	0x0000164d

000018e4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    18e4:	b508      	push	{r3, lr}
	_dmac_handler();
    18e6:	4b01      	ldr	r3, [pc, #4]	; (18ec <DMAC_1_Handler+0x8>)
    18e8:	4798      	blx	r3
    18ea:	bd08      	pop	{r3, pc}
    18ec:	0000164d 	.word	0x0000164d

000018f0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    18f0:	b508      	push	{r3, lr}
	_dmac_handler();
    18f2:	4b01      	ldr	r3, [pc, #4]	; (18f8 <DMAC_2_Handler+0x8>)
    18f4:	4798      	blx	r3
    18f6:	bd08      	pop	{r3, pc}
    18f8:	0000164d 	.word	0x0000164d

000018fc <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    18fc:	b508      	push	{r3, lr}
	_dmac_handler();
    18fe:	4b01      	ldr	r3, [pc, #4]	; (1904 <DMAC_3_Handler+0x8>)
    1900:	4798      	blx	r3
    1902:	bd08      	pop	{r3, pc}
    1904:	0000164d 	.word	0x0000164d

00001908 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1908:	b508      	push	{r3, lr}
	_dmac_handler();
    190a:	4b01      	ldr	r3, [pc, #4]	; (1910 <DMAC_4_Handler+0x8>)
    190c:	4798      	blx	r3
    190e:	bd08      	pop	{r3, pc}
    1910:	0000164d 	.word	0x0000164d

00001914 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1914:	f010 0f01 	tst.w	r0, #1
    1918:	d008      	beq.n	192c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    191a:	4a11      	ldr	r2, [pc, #68]	; (1960 <_gclk_init_generators_by_fref+0x4c>)
    191c:	4b11      	ldr	r3, [pc, #68]	; (1964 <_gclk_init_generators_by_fref+0x50>)
    191e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1920:	4619      	mov	r1, r3
    1922:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1926:	684b      	ldr	r3, [r1, #4]
    1928:	4213      	tst	r3, r2
    192a:	d1fc      	bne.n	1926 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    192c:	f010 0f04 	tst.w	r0, #4
    1930:	d008      	beq.n	1944 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1932:	4a0d      	ldr	r2, [pc, #52]	; (1968 <_gclk_init_generators_by_fref+0x54>)
    1934:	4b0b      	ldr	r3, [pc, #44]	; (1964 <_gclk_init_generators_by_fref+0x50>)
    1936:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1938:	4619      	mov	r1, r3
    193a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    193e:	684b      	ldr	r3, [r1, #4]
    1940:	4213      	tst	r3, r2
    1942:	d1fc      	bne.n	193e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1944:	f010 0f08 	tst.w	r0, #8
    1948:	d008      	beq.n	195c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    194a:	4a08      	ldr	r2, [pc, #32]	; (196c <_gclk_init_generators_by_fref+0x58>)
    194c:	4b05      	ldr	r3, [pc, #20]	; (1964 <_gclk_init_generators_by_fref+0x50>)
    194e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1950:	4619      	mov	r1, r3
    1952:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1956:	684b      	ldr	r3, [r1, #4]
    1958:	4213      	tst	r3, r2
    195a:	d1fc      	bne.n	1956 <_gclk_init_generators_by_fref+0x42>
    195c:	4770      	bx	lr
    195e:	bf00      	nop
    1960:	00010106 	.word	0x00010106
    1964:	40001c00 	.word	0x40001c00
    1968:	00011901 	.word	0x00011901
    196c:	00010904 	.word	0x00010904

00001970 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1970:	2201      	movs	r2, #1
    1972:	4b01      	ldr	r3, [pc, #4]	; (1978 <_mclk_init+0x8>)
    1974:	715a      	strb	r2, [r3, #5]
    1976:	4770      	bx	lr
    1978:	40000800 	.word	0x40000800

0000197c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    197c:	4b03      	ldr	r3, [pc, #12]	; (198c <_osc32kctrl_init_sources+0x10>)
    197e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1980:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1984:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1986:	2201      	movs	r2, #1
    1988:	741a      	strb	r2, [r3, #16]
    198a:	4770      	bx	lr
    198c:	40001400 	.word	0x40001400

00001990 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1990:	4a04      	ldr	r2, [pc, #16]	; (19a4 <_oscctrl_init_sources+0x14>)
    1992:	4b05      	ldr	r3, [pc, #20]	; (19a8 <_oscctrl_init_sources+0x18>)
    1994:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1996:	461a      	mov	r2, r3
    1998:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    199a:	f013 0f02 	tst.w	r3, #2
    199e:	d0fb      	beq.n	1998 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    19a0:	4770      	bx	lr
    19a2:	bf00      	nop
    19a4:	03002606 	.word	0x03002606
    19a8:	40001000 	.word	0x40001000

000019ac <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    19ac:	4a36      	ldr	r2, [pc, #216]	; (1a88 <_oscctrl_init_referenced_generators+0xdc>)
    19ae:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    19b0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    19b4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    19b8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    19ba:	4611      	mov	r1, r2
    19bc:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    19c0:	684b      	ldr	r3, [r1, #4]
    19c2:	4213      	tst	r3, r2
    19c4:	d1fc      	bne.n	19c0 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    19c6:	4a30      	ldr	r2, [pc, #192]	; (1a88 <_oscctrl_init_referenced_generators+0xdc>)
    19c8:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    19ca:	f013 0f04 	tst.w	r3, #4
    19ce:	d1fb      	bne.n	19c8 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    19d0:	4b2e      	ldr	r3, [pc, #184]	; (1a8c <_oscctrl_init_referenced_generators+0xe0>)
    19d2:	2200      	movs	r2, #0
    19d4:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    19d6:	4a2e      	ldr	r2, [pc, #184]	; (1a90 <_oscctrl_init_referenced_generators+0xe4>)
    19d8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    19da:	461a      	mov	r2, r3
    19dc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    19e0:	f013 0f10 	tst.w	r3, #16
    19e4:	d1fa      	bne.n	19dc <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    19e6:	2200      	movs	r2, #0
    19e8:	4b28      	ldr	r3, [pc, #160]	; (1a8c <_oscctrl_init_referenced_generators+0xe0>)
    19ea:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    19ee:	461a      	mov	r2, r3
    19f0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    19f4:	f013 0f04 	tst.w	r3, #4
    19f8:	d1fa      	bne.n	19f0 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    19fa:	2202      	movs	r2, #2
    19fc:	4b23      	ldr	r3, [pc, #140]	; (1a8c <_oscctrl_init_referenced_generators+0xe0>)
    19fe:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1a00:	461a      	mov	r2, r3
    1a02:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1a06:	f013 0f02 	tst.w	r3, #2
    1a0a:	d1fa      	bne.n	1a02 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1a0c:	4b1f      	ldr	r3, [pc, #124]	; (1a8c <_oscctrl_init_referenced_generators+0xe0>)
    1a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1a10:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1a12:	461a      	mov	r2, r3
    1a14:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1a18:	f013 0f08 	tst.w	r3, #8
    1a1c:	d1fa      	bne.n	1a14 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1a1e:	2280      	movs	r2, #128	; 0x80
    1a20:	4b1a      	ldr	r3, [pc, #104]	; (1a8c <_oscctrl_init_referenced_generators+0xe0>)
    1a22:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1a26:	461a      	mov	r2, r3
    1a28:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1a2c:	f013 0f04 	tst.w	r3, #4
    1a30:	d1fa      	bne.n	1a28 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1a32:	4b16      	ldr	r3, [pc, #88]	; (1a8c <_oscctrl_init_referenced_generators+0xe0>)
    1a34:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1a38:	f013 0f01 	tst.w	r3, #1
    1a3c:	d01d      	beq.n	1a7a <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1a3e:	4a13      	ldr	r2, [pc, #76]	; (1a8c <_oscctrl_init_referenced_generators+0xe0>)
    1a40:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1a42:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1a46:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1a4a:	d1f9      	bne.n	1a40 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1a4c:	4a0e      	ldr	r2, [pc, #56]	; (1a88 <_oscctrl_init_referenced_generators+0xdc>)
    1a4e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1a50:	2b00      	cmp	r3, #0
    1a52:	d1fc      	bne.n	1a4e <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1a54:	4a0c      	ldr	r2, [pc, #48]	; (1a88 <_oscctrl_init_referenced_generators+0xdc>)
    1a56:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1a58:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1a5c:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1a60:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1a62:	4611      	mov	r1, r2
    1a64:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1a68:	684b      	ldr	r3, [r1, #4]
    1a6a:	4213      	tst	r3, r2
    1a6c:	d1fc      	bne.n	1a68 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1a6e:	4a06      	ldr	r2, [pc, #24]	; (1a88 <_oscctrl_init_referenced_generators+0xdc>)
    1a70:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1a72:	f013 0f04 	tst.w	r3, #4
    1a76:	d1fb      	bne.n	1a70 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1a78:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1a7a:	4a04      	ldr	r2, [pc, #16]	; (1a8c <_oscctrl_init_referenced_generators+0xe0>)
    1a7c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1a7e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1a82:	d0fb      	beq.n	1a7c <_oscctrl_init_referenced_generators+0xd0>
    1a84:	e7e2      	b.n	1a4c <_oscctrl_init_referenced_generators+0xa0>
    1a86:	bf00      	nop
    1a88:	40001c00 	.word	0x40001c00
    1a8c:	40001000 	.word	0x40001000
    1a90:	04010000 	.word	0x04010000

00001a94 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1a94:	b500      	push	{lr}
    1a96:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1a98:	4b0d      	ldr	r3, [pc, #52]	; (1ad0 <RAMECC_Handler+0x3c>)
    1a9a:	789b      	ldrb	r3, [r3, #2]
    1a9c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1a9e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1aa0:	9b01      	ldr	r3, [sp, #4]
    1aa2:	f013 0f02 	tst.w	r3, #2
    1aa6:	d006      	beq.n	1ab6 <RAMECC_Handler+0x22>
    1aa8:	4b0a      	ldr	r3, [pc, #40]	; (1ad4 <RAMECC_Handler+0x40>)
    1aaa:	681b      	ldr	r3, [r3, #0]
    1aac:	b11b      	cbz	r3, 1ab6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1aae:	4a08      	ldr	r2, [pc, #32]	; (1ad0 <RAMECC_Handler+0x3c>)
    1ab0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1ab2:	4798      	blx	r3
    1ab4:	e009      	b.n	1aca <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1ab6:	9b01      	ldr	r3, [sp, #4]
    1ab8:	f013 0f01 	tst.w	r3, #1
    1abc:	d005      	beq.n	1aca <RAMECC_Handler+0x36>
    1abe:	4b05      	ldr	r3, [pc, #20]	; (1ad4 <RAMECC_Handler+0x40>)
    1ac0:	685b      	ldr	r3, [r3, #4]
    1ac2:	b113      	cbz	r3, 1aca <RAMECC_Handler+0x36>
    1ac4:	4a02      	ldr	r2, [pc, #8]	; (1ad0 <RAMECC_Handler+0x3c>)
    1ac6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1ac8:	4798      	blx	r3
	} else {
		return;
	}
}
    1aca:	b003      	add	sp, #12
    1acc:	f85d fb04 	ldr.w	pc, [sp], #4
    1ad0:	41020000 	.word	0x41020000
    1ad4:	20000ec0 	.word	0x20000ec0

00001ad8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1ad8:	b470      	push	{r4, r5, r6}
    1ada:	b089      	sub	sp, #36	; 0x24
    1adc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1ade:	466c      	mov	r4, sp
    1ae0:	4d0d      	ldr	r5, [pc, #52]	; (1b18 <_sercom_get_hardware_index+0x40>)
    1ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1ae6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1aee:	9b00      	ldr	r3, [sp, #0]
    1af0:	42b3      	cmp	r3, r6
    1af2:	d00d      	beq.n	1b10 <_sercom_get_hardware_index+0x38>
    1af4:	4631      	mov	r1, r6
    1af6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1af8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1afa:	f853 2b04 	ldr.w	r2, [r3], #4
    1afe:	428a      	cmp	r2, r1
    1b00:	d007      	beq.n	1b12 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b02:	3001      	adds	r0, #1
    1b04:	2808      	cmp	r0, #8
    1b06:	d1f8      	bne.n	1afa <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1b08:	2000      	movs	r0, #0
}
    1b0a:	b009      	add	sp, #36	; 0x24
    1b0c:	bc70      	pop	{r4, r5, r6}
    1b0e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b10:	2000      	movs	r0, #0
			return i;
    1b12:	b2c0      	uxtb	r0, r0
    1b14:	e7f9      	b.n	1b0a <_sercom_get_hardware_index+0x32>
    1b16:	bf00      	nop
    1b18:	0000367c 	.word	0x0000367c

00001b1c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1b1c:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1b1e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1b20:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1b22:	f013 0f01 	tst.w	r3, #1
    1b26:	d003      	beq.n	1b30 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1b28:	7da3      	ldrb	r3, [r4, #22]
    1b2a:	f013 0f01 	tst.w	r3, #1
    1b2e:	d112      	bne.n	1b56 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1b30:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1b32:	f013 0f02 	tst.w	r3, #2
    1b36:	d003      	beq.n	1b40 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1b38:	7da3      	ldrb	r3, [r4, #22]
    1b3a:	f013 0f02 	tst.w	r3, #2
    1b3e:	d10f      	bne.n	1b60 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1b40:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1b42:	f013 0f04 	tst.w	r3, #4
    1b46:	d015      	beq.n	1b74 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1b48:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1b4a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    1b4e:	b163      	cbz	r3, 1b6a <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1b50:	23ff      	movs	r3, #255	; 0xff
    1b52:	8363      	strh	r3, [r4, #26]
    1b54:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1b56:	2301      	movs	r3, #1
    1b58:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1b5a:	6803      	ldr	r3, [r0, #0]
    1b5c:	4798      	blx	r3
    1b5e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1b60:	2302      	movs	r3, #2
    1b62:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1b64:	6883      	ldr	r3, [r0, #8]
    1b66:	4798      	blx	r3
    1b68:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    1b6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1b6c:	6843      	ldr	r3, [r0, #4]
    1b6e:	b2c9      	uxtb	r1, r1
    1b70:	4798      	blx	r3
    1b72:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1b74:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1b76:	09db      	lsrs	r3, r3, #7
    1b78:	d100      	bne.n	1b7c <_sercom_usart_interrupt_handler+0x60>
    1b7a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1b7c:	2380      	movs	r3, #128	; 0x80
    1b7e:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    1b80:	68c3      	ldr	r3, [r0, #12]
    1b82:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1b84:	8b63      	ldrh	r3, [r4, #26]
    1b86:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1b88:	8363      	strh	r3, [r4, #26]
    1b8a:	e7f6      	b.n	1b7a <_sercom_usart_interrupt_handler+0x5e>

00001b8c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM2) {
    1b8c:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <_sercom_init_irq_param+0x18>)
    1b8e:	4298      	cmp	r0, r3
    1b90:	d005      	beq.n	1b9e <_sercom_init_irq_param+0x12>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    1b92:	4b05      	ldr	r3, [pc, #20]	; (1ba8 <_sercom_init_irq_param+0x1c>)
    1b94:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    1b96:	bf04      	itt	eq
    1b98:	4b04      	ldreq	r3, [pc, #16]	; (1bac <_sercom_init_irq_param+0x20>)
    1b9a:	6059      	streq	r1, [r3, #4]
    1b9c:	4770      	bx	lr
		_sercom2_dev = (struct _usart_async_device *)dev;
    1b9e:	4b03      	ldr	r3, [pc, #12]	; (1bac <_sercom_init_irq_param+0x20>)
    1ba0:	6019      	str	r1, [r3, #0]
    1ba2:	4770      	bx	lr
    1ba4:	41012000 	.word	0x41012000
    1ba8:	43000400 	.word	0x43000400
    1bac:	20000554 	.word	0x20000554

00001bb0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1bb0:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1bb2:	4b03      	ldr	r3, [pc, #12]	; (1bc0 <_sercom_get_irq_num+0x10>)
    1bb4:	4798      	blx	r3
    1bb6:	0080      	lsls	r0, r0, #2
    1bb8:	302e      	adds	r0, #46	; 0x2e
}
    1bba:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1bbe:	bd08      	pop	{r3, pc}
    1bc0:	00001ad9 	.word	0x00001ad9

00001bc4 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1bc4:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1bc6:	f013 0f01 	tst.w	r3, #1
    1bca:	d109      	bne.n	1be0 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1bcc:	6803      	ldr	r3, [r0, #0]
    1bce:	f043 0302 	orr.w	r3, r3, #2
    1bd2:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1bd4:	69c3      	ldr	r3, [r0, #28]
    1bd6:	f013 0f03 	tst.w	r3, #3
    1bda:	d1fb      	bne.n	1bd4 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1bdc:	2000      	movs	r0, #0
    1bde:	4770      	bx	lr
		return ERR_BUSY;
    1be0:	f06f 0003 	mvn.w	r0, #3
}
    1be4:	4770      	bx	lr
	...

00001be8 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    1be8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    1bea:	4b03      	ldr	r3, [pc, #12]	; (1bf8 <_spi_get_rx_dma_channel+0x10>)
    1bec:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    1bee:	2807      	cmp	r0, #7
    1bf0:	bf8c      	ite	hi
    1bf2:	2000      	movhi	r0, #0
    1bf4:	2001      	movls	r0, #1
    1bf6:	bd08      	pop	{r3, pc}
    1bf8:	00001ad9 	.word	0x00001ad9

00001bfc <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    1bfc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    1bfe:	6883      	ldr	r3, [r0, #8]
    1c00:	689b      	ldr	r3, [r3, #8]
    1c02:	b103      	cbz	r3, 1c06 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    1c04:	4798      	blx	r3
    1c06:	bd08      	pop	{r3, pc}

00001c08 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    1c08:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    1c0a:	6883      	ldr	r3, [r0, #8]
    1c0c:	685b      	ldr	r3, [r3, #4]
    1c0e:	b103      	cbz	r3, 1c12 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    1c10:	4798      	blx	r3
    1c12:	bd08      	pop	{r3, pc}

00001c14 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    1c14:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    1c16:	6883      	ldr	r3, [r0, #8]
    1c18:	68db      	ldr	r3, [r3, #12]
    1c1a:	b103      	cbz	r3, 1c1e <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    1c1c:	4798      	blx	r3
    1c1e:	bd08      	pop	{r3, pc}

00001c20 <_usart_init>:
{
    1c20:	b510      	push	{r4, lr}
    1c22:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1c24:	4b21      	ldr	r3, [pc, #132]	; (1cac <_usart_init+0x8c>)
    1c26:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1c28:	2802      	cmp	r0, #2
    1c2a:	d005      	beq.n	1c38 <_usart_init+0x18>
	ASSERT(false);
    1c2c:	f240 226e 	movw	r2, #622	; 0x26e
    1c30:	491f      	ldr	r1, [pc, #124]	; (1cb0 <_usart_init+0x90>)
    1c32:	2000      	movs	r0, #0
    1c34:	4b1f      	ldr	r3, [pc, #124]	; (1cb4 <_usart_init+0x94>)
    1c36:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1c38:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1c3a:	f013 0f01 	tst.w	r3, #1
    1c3e:	d119      	bne.n	1c74 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c40:	69e3      	ldr	r3, [r4, #28]
    1c42:	f013 0f03 	tst.w	r3, #3
    1c46:	d1fb      	bne.n	1c40 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1c48:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1c4a:	f013 0f02 	tst.w	r3, #2
    1c4e:	d00b      	beq.n	1c68 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1c50:	6823      	ldr	r3, [r4, #0]
    1c52:	f023 0302 	bic.w	r3, r3, #2
    1c56:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c58:	69e3      	ldr	r3, [r4, #28]
    1c5a:	f013 0f03 	tst.w	r3, #3
    1c5e:	d1fb      	bne.n	1c58 <_usart_init+0x38>
    1c60:	69e3      	ldr	r3, [r4, #28]
    1c62:	f013 0f02 	tst.w	r3, #2
    1c66:	d1fb      	bne.n	1c60 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1c68:	2305      	movs	r3, #5
    1c6a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c6c:	69e3      	ldr	r3, [r4, #28]
    1c6e:	f013 0f03 	tst.w	r3, #3
    1c72:	d1fb      	bne.n	1c6c <_usart_init+0x4c>
    1c74:	69e3      	ldr	r3, [r4, #28]
    1c76:	f013 0f01 	tst.w	r3, #1
    1c7a:	d1fb      	bne.n	1c74 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1c7c:	4b0e      	ldr	r3, [pc, #56]	; (1cb8 <_usart_init+0x98>)
    1c7e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c80:	69e3      	ldr	r3, [r4, #28]
    1c82:	f013 0f03 	tst.w	r3, #3
    1c86:	d1fb      	bne.n	1c80 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1c88:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1c8c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c8e:	69e3      	ldr	r3, [r4, #28]
    1c90:	f013 0f1f 	tst.w	r3, #31
    1c94:	d1fb      	bne.n	1c8e <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1c96:	4b09      	ldr	r3, [pc, #36]	; (1cbc <_usart_init+0x9c>)
    1c98:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1c9a:	f24f 632b 	movw	r3, #63019	; 0xf62b
    1c9e:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1ca0:	2000      	movs	r0, #0
    1ca2:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1ca4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    1ca8:	bd10      	pop	{r4, pc}
    1caa:	bf00      	nop
    1cac:	00001ad9 	.word	0x00001ad9
    1cb0:	000036c8 	.word	0x000036c8
    1cb4:	0000110d 	.word	0x0000110d
    1cb8:	40100004 	.word	0x40100004
    1cbc:	00700002 	.word	0x00700002

00001cc0 <_get_i2cm_index>:
{
    1cc0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1cc2:	4b07      	ldr	r3, [pc, #28]	; (1ce0 <_get_i2cm_index+0x20>)
    1cc4:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    1cc6:	2805      	cmp	r0, #5
    1cc8:	d008      	beq.n	1cdc <_get_i2cm_index+0x1c>
	ASSERT(false);
    1cca:	f240 32d5 	movw	r2, #981	; 0x3d5
    1cce:	4905      	ldr	r1, [pc, #20]	; (1ce4 <_get_i2cm_index+0x24>)
    1cd0:	2000      	movs	r0, #0
    1cd2:	4b05      	ldr	r3, [pc, #20]	; (1ce8 <_get_i2cm_index+0x28>)
    1cd4:	4798      	blx	r3
	return -1;
    1cd6:	f04f 30ff 	mov.w	r0, #4294967295
}
    1cda:	bd08      	pop	{r3, pc}
			return i;
    1cdc:	2000      	movs	r0, #0
    1cde:	bd08      	pop	{r3, pc}
    1ce0:	00001ad9 	.word	0x00001ad9
    1ce4:	000036c8 	.word	0x000036c8
    1ce8:	0000110d 	.word	0x0000110d

00001cec <_i2c_m_sync_init_impl>:
{
    1cec:	b538      	push	{r3, r4, r5, lr}
    1cee:	4605      	mov	r5, r0
    1cf0:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1cf2:	4608      	mov	r0, r1
    1cf4:	4b32      	ldr	r3, [pc, #200]	; (1dc0 <_i2c_m_sync_init_impl+0xd4>)
    1cf6:	4798      	blx	r3
    1cf8:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1cfa:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1cfc:	f013 0f01 	tst.w	r3, #1
    1d00:	d122      	bne.n	1d48 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1d02:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1d06:	4a2f      	ldr	r2, [pc, #188]	; (1dc4 <_i2c_m_sync_init_impl+0xd8>)
    1d08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1d0e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d12:	69e3      	ldr	r3, [r4, #28]
    1d14:	f013 0f03 	tst.w	r3, #3
    1d18:	d1fb      	bne.n	1d12 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1d1a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1d1c:	f013 0f02 	tst.w	r3, #2
    1d20:	d00b      	beq.n	1d3a <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1d22:	6823      	ldr	r3, [r4, #0]
    1d24:	f023 0302 	bic.w	r3, r3, #2
    1d28:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d2a:	69e3      	ldr	r3, [r4, #28]
    1d2c:	f013 0f03 	tst.w	r3, #3
    1d30:	d1fb      	bne.n	1d2a <_i2c_m_sync_init_impl+0x3e>
    1d32:	69e3      	ldr	r3, [r4, #28]
    1d34:	f013 0f02 	tst.w	r3, #2
    1d38:	d1fb      	bne.n	1d32 <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1d3a:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1d3e:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d40:	69e3      	ldr	r3, [r4, #28]
    1d42:	f013 0f03 	tst.w	r3, #3
    1d46:	d1fb      	bne.n	1d40 <_i2c_m_sync_init_impl+0x54>
    1d48:	69e3      	ldr	r3, [r4, #28]
    1d4a:	f013 0f01 	tst.w	r3, #1
    1d4e:	d1fb      	bne.n	1d48 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1d50:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1d54:	4a1b      	ldr	r2, [pc, #108]	; (1dc4 <_i2c_m_sync_init_impl+0xd8>)
    1d56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1d5c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d5e:	69e3      	ldr	r3, [r4, #28]
    1d60:	f013 0f03 	tst.w	r3, #3
    1d64:	d1fb      	bne.n	1d5e <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1d66:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1d6a:	4916      	ldr	r1, [pc, #88]	; (1dc4 <_i2c_m_sync_init_impl+0xd8>)
    1d6c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1d72:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d74:	69e3      	ldr	r3, [r4, #28]
    1d76:	f013 0f17 	tst.w	r3, #23
    1d7a:	d1fb      	bne.n	1d74 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1d7c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1d80:	4910      	ldr	r1, [pc, #64]	; (1dc4 <_i2c_m_sync_init_impl+0xd8>)
    1d82:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1d88:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1d8a:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1d8e:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1d90:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1d92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1d96:	2b01      	cmp	r3, #1
    1d98:	bf94      	ite	ls
    1d9a:	2300      	movls	r3, #0
    1d9c:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1d9e:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1da2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1da4:	69e3      	ldr	r3, [r4, #28]
    1da6:	f013 0f04 	tst.w	r3, #4
    1daa:	d1fb      	bne.n	1da4 <_i2c_m_sync_init_impl+0xb8>
	service->trise = _i2cms[i].trise;
    1dac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1db0:	4b04      	ldr	r3, [pc, #16]	; (1dc4 <_i2c_m_sync_init_impl+0xd8>)
    1db2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1db6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1db8:	81eb      	strh	r3, [r5, #14]
}
    1dba:	2000      	movs	r0, #0
    1dbc:	bd38      	pop	{r3, r4, r5, pc}
    1dbe:	bf00      	nop
    1dc0:	00001cc1 	.word	0x00001cc1
    1dc4:	0000367c 	.word	0x0000367c

00001dc8 <_sercom_i2c_m_irq_handler>:
{
    1dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1dcc:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    1dce:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1dd0:	7e26      	ldrb	r6, [r4, #24]
    1dd2:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    1dd4:	f8df 8234 	ldr.w	r8, [pc, #564]	; 200c <_sercom_i2c_m_irq_handler+0x244>
    1dd8:	f240 4247 	movw	r2, #1095	; 0x447
    1ddc:	4641      	mov	r1, r8
    1dde:	3000      	adds	r0, #0
    1de0:	bf18      	it	ne
    1de2:	2001      	movne	r0, #1
    1de4:	4f88      	ldr	r7, [pc, #544]	; (2008 <_sercom_i2c_m_irq_handler+0x240>)
    1de6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1de8:	6928      	ldr	r0, [r5, #16]
    1dea:	f44f 6289 	mov.w	r2, #1096	; 0x448
    1dee:	4641      	mov	r1, r8
    1df0:	3000      	adds	r0, #0
    1df2:	bf18      	it	ne
    1df4:	2001      	movne	r0, #1
    1df6:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    1df8:	f016 0f80 	tst.w	r6, #128	; 0x80
    1dfc:	f040 80f4 	bne.w	1fe8 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1e00:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e02:	69e3      	ldr	r3, [r4, #28]
    1e04:	f013 0f04 	tst.w	r3, #4
    1e08:	d1fb      	bne.n	1e02 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1e0a:	8b63      	ldrh	r3, [r4, #26]
    1e0c:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1e0e:	f016 0f01 	tst.w	r6, #1
    1e12:	f000 8090 	beq.w	1f36 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1e16:	f013 0f02 	tst.w	r3, #2
    1e1a:	d022      	beq.n	1e62 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1e1c:	2201      	movs	r2, #1
    1e1e:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1e20:	886a      	ldrh	r2, [r5, #2]
    1e22:	b292      	uxth	r2, r2
    1e24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1e28:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1e2a:	886a      	ldrh	r2, [r5, #2]
    1e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1e30:	0412      	lsls	r2, r2, #16
    1e32:	0c12      	lsrs	r2, r2, #16
    1e34:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1e36:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	bf14      	ite	ne
    1e3e:	f06f 0104 	mvnne.w	r1, #4
    1e42:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1e46:	886b      	ldrh	r3, [r5, #2]
    1e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1e4c:	041b      	lsls	r3, r3, #16
    1e4e:	0c1b      	lsrs	r3, r3, #16
    1e50:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    1e52:	696b      	ldr	r3, [r5, #20]
    1e54:	2b00      	cmp	r3, #0
    1e56:	f000 80c5 	beq.w	1fe4 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    1e5a:	4628      	mov	r0, r5
    1e5c:	4798      	blx	r3
    1e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1e62:	f013 0f04 	tst.w	r3, #4
    1e66:	d124      	bne.n	1eb2 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    1e68:	886b      	ldrh	r3, [r5, #2]
    1e6a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1e6e:	d03e      	beq.n	1eee <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1e70:	882b      	ldrh	r3, [r5, #0]
    1e72:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1e74:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e78:	69e3      	ldr	r3, [r4, #28]
    1e7a:	f013 0f04 	tst.w	r3, #4
    1e7e:	d1fb      	bne.n	1e78 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    1e86:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    1e8a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1e8c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e8e:	69e3      	ldr	r3, [r4, #28]
    1e90:	f013 0f04 	tst.w	r3, #4
    1e94:	d1fb      	bne.n	1e8e <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    1e96:	886b      	ldrh	r3, [r5, #2]
    1e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1e9c:	041b      	lsls	r3, r3, #16
    1e9e:	0c1b      	lsrs	r3, r3, #16
    1ea0:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    1ea2:	69ab      	ldr	r3, [r5, #24]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	f000 8088 	beq.w	1fba <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    1eaa:	4628      	mov	r0, r5
    1eac:	4798      	blx	r3
    1eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    1eb2:	686b      	ldr	r3, [r5, #4]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	dd04      	ble.n	1ec2 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    1eb8:	886b      	ldrh	r3, [r5, #2]
    1eba:	b29b      	uxth	r3, r3
    1ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1ec0:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1ec2:	886b      	ldrh	r3, [r5, #2]
    1ec4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1ec8:	d108      	bne.n	1edc <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    1eca:	886b      	ldrh	r3, [r5, #2]
    1ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1ed0:	041b      	lsls	r3, r3, #16
    1ed2:	0c1b      	lsrs	r3, r3, #16
    1ed4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1ed6:	f06f 0101 	mvn.w	r1, #1
    1eda:	e7b4      	b.n	1e46 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1edc:	6863      	ldr	r3, [r4, #4]
    1ede:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1ee2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ee4:	69e3      	ldr	r3, [r4, #28]
    1ee6:	f013 0f04 	tst.w	r3, #4
    1eea:	d1fb      	bne.n	1ee4 <_sercom_i2c_m_irq_handler+0x11c>
    1eec:	e7ed      	b.n	1eca <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    1eee:	686b      	ldr	r3, [r5, #4]
    1ef0:	b99b      	cbnz	r3, 1f1a <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    1ef2:	886b      	ldrh	r3, [r5, #2]
    1ef4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1ef8:	d106      	bne.n	1f08 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    1efa:	886b      	ldrh	r3, [r5, #2]
    1efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1f00:	041b      	lsls	r3, r3, #16
    1f02:	0c1b      	lsrs	r3, r3, #16
    1f04:	806b      	strh	r3, [r5, #2]
    1f06:	e7cc      	b.n	1ea2 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1f08:	6863      	ldr	r3, [r4, #4]
    1f0a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1f0e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f10:	69e3      	ldr	r3, [r4, #28]
    1f12:	f013 0f04 	tst.w	r3, #4
    1f16:	d1fb      	bne.n	1f10 <_sercom_i2c_m_irq_handler+0x148>
    1f18:	e7ef      	b.n	1efa <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1f1a:	68ab      	ldr	r3, [r5, #8]
    1f1c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1f1e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f20:	69e3      	ldr	r3, [r4, #28]
    1f22:	f013 0f04 	tst.w	r3, #4
    1f26:	d1fb      	bne.n	1f20 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    1f28:	68ab      	ldr	r3, [r5, #8]
    1f2a:	3301      	adds	r3, #1
    1f2c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1f2e:	686b      	ldr	r3, [r5, #4]
    1f30:	3b01      	subs	r3, #1
    1f32:	606b      	str	r3, [r5, #4]
    1f34:	e7b5      	b.n	1ea2 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    1f36:	f016 0f02 	tst.w	r6, #2
    1f3a:	d041      	beq.n	1fc0 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1f3c:	686a      	ldr	r2, [r5, #4]
    1f3e:	2a00      	cmp	r2, #0
    1f40:	d036      	beq.n	1fb0 <_sercom_i2c_m_irq_handler+0x1e8>
    1f42:	f013 0f04 	tst.w	r3, #4
    1f46:	d133      	bne.n	1fb0 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1f48:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    1f4c:	3a01      	subs	r2, #1
    1f4e:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1f50:	2a00      	cmp	r2, #0
    1f52:	d137      	bne.n	1fc4 <_sercom_i2c_m_irq_handler+0x1fc>
    1f54:	2900      	cmp	r1, #0
    1f56:	d039      	beq.n	1fcc <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    1f58:	886b      	ldrh	r3, [r5, #2]
    1f5a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1f5e:	d116      	bne.n	1f8e <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    1f60:	886b      	ldrh	r3, [r5, #2]
    1f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1f66:	041b      	lsls	r3, r3, #16
    1f68:	0c1b      	lsrs	r3, r3, #16
    1f6a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1f6c:	68aa      	ldr	r2, [r5, #8]
    1f6e:	1c53      	adds	r3, r2, #1
    1f70:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f72:	69e3      	ldr	r3, [r4, #28]
    1f74:	f013 0f04 	tst.w	r3, #4
    1f78:	d1fb      	bne.n	1f72 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1f7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f7c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1f7e:	2302      	movs	r3, #2
    1f80:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    1f82:	69eb      	ldr	r3, [r5, #28]
    1f84:	b1e3      	cbz	r3, 1fc0 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    1f86:	4628      	mov	r0, r5
    1f88:	4798      	blx	r3
    1f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1f8e:	6863      	ldr	r3, [r4, #4]
    1f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1f94:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f96:	69e3      	ldr	r3, [r4, #28]
    1f98:	f013 0f17 	tst.w	r3, #23
    1f9c:	d1fb      	bne.n	1f96 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1f9e:	6863      	ldr	r3, [r4, #4]
    1fa0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1fa4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fa6:	69e3      	ldr	r3, [r4, #28]
    1fa8:	f013 0f04 	tst.w	r3, #4
    1fac:	d1fb      	bne.n	1fa6 <_sercom_i2c_m_irq_handler+0x1de>
    1fae:	e7d7      	b.n	1f60 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1fb0:	2302      	movs	r3, #2
    1fb2:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1fb4:	f06f 0101 	mvn.w	r1, #1
    1fb8:	e745      	b.n	1e46 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    1fba:	f016 0f02 	tst.w	r6, #2
    1fbe:	d1e0      	bne.n	1f82 <_sercom_i2c_m_irq_handler+0x1ba>
    1fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1fc4:	2a01      	cmp	r2, #1
    1fc6:	d1d1      	bne.n	1f6c <_sercom_i2c_m_irq_handler+0x1a4>
    1fc8:	2900      	cmp	r1, #0
    1fca:	d0cf      	beq.n	1f6c <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1fcc:	6863      	ldr	r3, [r4, #4]
    1fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1fd2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fd4:	69e3      	ldr	r3, [r4, #28]
    1fd6:	f013 0f17 	tst.w	r3, #23
    1fda:	d1fb      	bne.n	1fd4 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    1fdc:	686b      	ldr	r3, [r5, #4]
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d0ba      	beq.n	1f58 <_sercom_i2c_m_irq_handler+0x190>
    1fe2:	e7c3      	b.n	1f6c <_sercom_i2c_m_irq_handler+0x1a4>
    1fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1fe8:	886b      	ldrh	r3, [r5, #2]
    1fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1fee:	041b      	lsls	r3, r3, #16
    1ff0:	0c1b      	lsrs	r3, r3, #16
    1ff2:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    1ff4:	696b      	ldr	r3, [r5, #20]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d0e2      	beq.n	1fc0 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    1ffa:	f06f 0104 	mvn.w	r1, #4
    1ffe:	4628      	mov	r0, r5
    2000:	4798      	blx	r3
    2002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2006:	bf00      	nop
    2008:	0000110d 	.word	0x0000110d
    200c:	000036c8 	.word	0x000036c8

00002010 <_usart_async_init>:
{
    2010:	b570      	push	{r4, r5, r6, lr}
    2012:	460d      	mov	r5, r1
	ASSERT(device);
    2014:	4606      	mov	r6, r0
    2016:	22ce      	movs	r2, #206	; 0xce
    2018:	4917      	ldr	r1, [pc, #92]	; (2078 <_usart_async_init+0x68>)
    201a:	3000      	adds	r0, #0
    201c:	bf18      	it	ne
    201e:	2001      	movne	r0, #1
    2020:	4b16      	ldr	r3, [pc, #88]	; (207c <_usart_async_init+0x6c>)
    2022:	4798      	blx	r3
	init_status = _usart_init(hw);
    2024:	4628      	mov	r0, r5
    2026:	4b16      	ldr	r3, [pc, #88]	; (2080 <_usart_async_init+0x70>)
    2028:	4798      	blx	r3
	if (init_status) {
    202a:	4604      	mov	r4, r0
    202c:	b108      	cbz	r0, 2032 <_usart_async_init+0x22>
}
    202e:	4620      	mov	r0, r4
    2030:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    2032:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2034:	4631      	mov	r1, r6
    2036:	4628      	mov	r0, r5
    2038:	4b12      	ldr	r3, [pc, #72]	; (2084 <_usart_async_init+0x74>)
    203a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    203c:	4628      	mov	r0, r5
    203e:	4b12      	ldr	r3, [pc, #72]	; (2088 <_usart_async_init+0x78>)
    2040:	4798      	blx	r3
    2042:	1d01      	adds	r1, r0, #4
    2044:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2046:	2501      	movs	r5, #1
    2048:	f000 021f 	and.w	r2, r0, #31
    204c:	fa05 f202 	lsl.w	r2, r5, r2
    2050:	0943      	lsrs	r3, r0, #5
    2052:	009b      	lsls	r3, r3, #2
    2054:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2058:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    205c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2060:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2064:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2068:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    206c:	601a      	str	r2, [r3, #0]
		irq++;
    206e:	3001      	adds	r0, #1
    2070:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2072:	4281      	cmp	r1, r0
    2074:	d1e8      	bne.n	2048 <_usart_async_init+0x38>
    2076:	e7da      	b.n	202e <_usart_async_init+0x1e>
    2078:	000036c8 	.word	0x000036c8
    207c:	0000110d 	.word	0x0000110d
    2080:	00001c21 	.word	0x00001c21
    2084:	00001b8d 	.word	0x00001b8d
    2088:	00001bb1 	.word	0x00001bb1

0000208c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    208c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    208e:	6813      	ldr	r3, [r2, #0]
    2090:	f043 0302 	orr.w	r3, r3, #2
    2094:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2096:	69d3      	ldr	r3, [r2, #28]
    2098:	f013 0f03 	tst.w	r3, #3
    209c:	d1fb      	bne.n	2096 <_usart_async_enable+0xa>
}
    209e:	4770      	bx	lr

000020a0 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    20a0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    20a2:	6299      	str	r1, [r3, #40]	; 0x28
    20a4:	4770      	bx	lr

000020a6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    20a6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    20a8:	2201      	movs	r2, #1
    20aa:	759a      	strb	r2, [r3, #22]
    20ac:	4770      	bx	lr

000020ae <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    20ae:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    20b0:	2202      	movs	r2, #2
    20b2:	759a      	strb	r2, [r3, #22]
    20b4:	4770      	bx	lr
	...

000020b8 <_i2c_m_async_init>:
{
    20b8:	b570      	push	{r4, r5, r6, lr}
    20ba:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    20bc:	4606      	mov	r6, r0
    20be:	f240 42bc 	movw	r2, #1212	; 0x4bc
    20c2:	4918      	ldr	r1, [pc, #96]	; (2124 <_i2c_m_async_init+0x6c>)
    20c4:	3000      	adds	r0, #0
    20c6:	bf18      	it	ne
    20c8:	2001      	movne	r0, #1
    20ca:	4b17      	ldr	r3, [pc, #92]	; (2128 <_i2c_m_async_init+0x70>)
    20cc:	4798      	blx	r3
	i2c_dev->hw = hw;
    20ce:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    20d0:	4629      	mov	r1, r5
    20d2:	4630      	mov	r0, r6
    20d4:	4b15      	ldr	r3, [pc, #84]	; (212c <_i2c_m_async_init+0x74>)
    20d6:	4798      	blx	r3
	if (init_status) {
    20d8:	4604      	mov	r4, r0
    20da:	b108      	cbz	r0, 20e0 <_i2c_m_async_init+0x28>
}
    20dc:	4620      	mov	r0, r4
    20de:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    20e0:	4631      	mov	r1, r6
    20e2:	4628      	mov	r0, r5
    20e4:	4b12      	ldr	r3, [pc, #72]	; (2130 <_i2c_m_async_init+0x78>)
    20e6:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    20e8:	4628      	mov	r0, r5
    20ea:	4b12      	ldr	r3, [pc, #72]	; (2134 <_i2c_m_async_init+0x7c>)
    20ec:	4798      	blx	r3
    20ee:	1d01      	adds	r1, r0, #4
    20f0:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20f2:	2501      	movs	r5, #1
    20f4:	f000 021f 	and.w	r2, r0, #31
    20f8:	fa05 f202 	lsl.w	r2, r5, r2
    20fc:	0943      	lsrs	r3, r0, #5
    20fe:	009b      	lsls	r3, r3, #2
    2100:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2104:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    210c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2110:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2114:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2118:	601a      	str	r2, [r3, #0]
		irq++;
    211a:	3001      	adds	r0, #1
    211c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    211e:	4281      	cmp	r1, r0
    2120:	d1e8      	bne.n	20f4 <_i2c_m_async_init+0x3c>
    2122:	e7db      	b.n	20dc <_i2c_m_async_init+0x24>
    2124:	000036c8 	.word	0x000036c8
    2128:	0000110d 	.word	0x0000110d
    212c:	00001ced 	.word	0x00001ced
    2130:	00001b8d 	.word	0x00001b8d
    2134:	00001bb1 	.word	0x00001bb1

00002138 <_i2c_m_async_transfer>:
{
    2138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    213c:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    213e:	4605      	mov	r5, r0
    2140:	f110 0800 	adds.w	r8, r0, #0
    2144:	bf18      	it	ne
    2146:	f04f 0801 	movne.w	r8, #1
    214a:	4f45      	ldr	r7, [pc, #276]	; (2260 <_i2c_m_async_transfer+0x128>)
    214c:	f240 5212 	movw	r2, #1298	; 0x512
    2150:	4639      	mov	r1, r7
    2152:	4640      	mov	r0, r8
    2154:	4e43      	ldr	r6, [pc, #268]	; (2264 <_i2c_m_async_transfer+0x12c>)
    2156:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    2158:	6928      	ldr	r0, [r5, #16]
    215a:	f240 5213 	movw	r2, #1299	; 0x513
    215e:	4639      	mov	r1, r7
    2160:	3000      	adds	r0, #0
    2162:	bf18      	it	ne
    2164:	2001      	movne	r0, #1
    2166:	47b0      	blx	r6
	ASSERT(msg);
    2168:	f240 5214 	movw	r2, #1300	; 0x514
    216c:	4639      	mov	r1, r7
    216e:	1c20      	adds	r0, r4, #0
    2170:	bf18      	it	ne
    2172:	2001      	movne	r0, #1
    2174:	47b0      	blx	r6
	if (msg->len == 0) {
    2176:	6860      	ldr	r0, [r4, #4]
    2178:	2800      	cmp	r0, #0
    217a:	d06f      	beq.n	225c <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    217c:	886b      	ldrh	r3, [r5, #2]
    217e:	f413 7f80 	tst.w	r3, #256	; 0x100
    2182:	d169      	bne.n	2258 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    2184:	8863      	ldrh	r3, [r4, #2]
    2186:	b29b      	uxth	r3, r3
    2188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    218c:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    218e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2192:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    2196:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    2198:	6853      	ldr	r3, [r2, #4]
    219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    219e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21a0:	69d3      	ldr	r3, [r2, #28]
    21a2:	f013 0f17 	tst.w	r3, #23
    21a6:	d1fb      	bne.n	21a0 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    21a8:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    21aa:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    21ac:	f240 42ea 	movw	r2, #1258	; 0x4ea
    21b0:	492b      	ldr	r1, [pc, #172]	; (2260 <_i2c_m_async_transfer+0x128>)
    21b2:	4640      	mov	r0, r8
    21b4:	4b2b      	ldr	r3, [pc, #172]	; (2264 <_i2c_m_async_transfer+0x12c>)
    21b6:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    21b8:	686b      	ldr	r3, [r5, #4]
    21ba:	2b01      	cmp	r3, #1
    21bc:	d02a      	beq.n	2214 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    21be:	6863      	ldr	r3, [r4, #4]
    21c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    21c4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21c6:	69e3      	ldr	r3, [r4, #28]
    21c8:	f013 0f17 	tst.w	r3, #23
    21cc:	d1fb      	bne.n	21c6 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    21ce:	882b      	ldrh	r3, [r5, #0]
    21d0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    21d4:	d02a      	beq.n	222c <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    21d6:	886a      	ldrh	r2, [r5, #2]
    21d8:	f012 0f01 	tst.w	r2, #1
    21dc:	d004      	beq.n	21e8 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    21de:	886a      	ldrh	r2, [r5, #2]
    21e0:	b292      	uxth	r2, r2
    21e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    21e6:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    21e8:	f240 72fe 	movw	r2, #2046	; 0x7fe
    21ec:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    21f0:	69e3      	ldr	r3, [r4, #28]
    21f2:	f013 0f04 	tst.w	r3, #4
    21f6:	d1fb      	bne.n	21f0 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    21f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    21fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    21fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2202:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2204:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2206:	69e3      	ldr	r3, [r4, #28]
    2208:	f013 0f04 	tst.w	r3, #4
    220c:	d1fb      	bne.n	2206 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    220e:	2000      	movs	r0, #0
    2210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    2214:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    2218:	d0d1      	beq.n	21be <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    221a:	6863      	ldr	r3, [r4, #4]
    221c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2220:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2222:	69e3      	ldr	r3, [r4, #28]
    2224:	f013 0f17 	tst.w	r3, #23
    2228:	d1fb      	bne.n	2222 <_i2c_m_async_transfer+0xea>
    222a:	e7d0      	b.n	21ce <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    222c:	8869      	ldrh	r1, [r5, #2]
    222e:	005a      	lsls	r2, r3, #1
    2230:	b2d2      	uxtb	r2, r2
    2232:	f001 0301 	and.w	r3, r1, #1
    2236:	431a      	orrs	r2, r3
    2238:	69e3      	ldr	r3, [r4, #28]
    223a:	f013 0f04 	tst.w	r3, #4
    223e:	d1fb      	bne.n	2238 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2240:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2246:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2248:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    224a:	69e3      	ldr	r3, [r4, #28]
    224c:	f013 0f04 	tst.w	r3, #4
    2250:	d1fb      	bne.n	224a <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    2252:	2000      	movs	r0, #0
    2254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    2258:	f06f 0003 	mvn.w	r0, #3
}
    225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2260:	000036c8 	.word	0x000036c8
    2264:	0000110d 	.word	0x0000110d

00002268 <_i2c_m_async_register_callback>:
	switch (type) {
    2268:	2901      	cmp	r1, #1
    226a:	d006      	beq.n	227a <_i2c_m_async_register_callback+0x12>
    226c:	b119      	cbz	r1, 2276 <_i2c_m_async_register_callback+0xe>
    226e:	2902      	cmp	r1, #2
    2270:	d005      	beq.n	227e <_i2c_m_async_register_callback+0x16>
}
    2272:	2000      	movs	r0, #0
    2274:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    2276:	6142      	str	r2, [r0, #20]
		break;
    2278:	e7fb      	b.n	2272 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    227a:	6182      	str	r2, [r0, #24]
		break;
    227c:	e7f9      	b.n	2272 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    227e:	61c2      	str	r2, [r0, #28]
		break;
    2280:	e7f7      	b.n	2272 <_i2c_m_async_register_callback+0xa>
	...

00002284 <SERCOM2_0_Handler>:
{
    2284:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2286:	4b02      	ldr	r3, [pc, #8]	; (2290 <SERCOM2_0_Handler+0xc>)
    2288:	6818      	ldr	r0, [r3, #0]
    228a:	4b02      	ldr	r3, [pc, #8]	; (2294 <SERCOM2_0_Handler+0x10>)
    228c:	4798      	blx	r3
    228e:	bd08      	pop	{r3, pc}
    2290:	20000554 	.word	0x20000554
    2294:	00001b1d 	.word	0x00001b1d

00002298 <SERCOM2_1_Handler>:
{
    2298:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    229a:	4b02      	ldr	r3, [pc, #8]	; (22a4 <SERCOM2_1_Handler+0xc>)
    229c:	6818      	ldr	r0, [r3, #0]
    229e:	4b02      	ldr	r3, [pc, #8]	; (22a8 <SERCOM2_1_Handler+0x10>)
    22a0:	4798      	blx	r3
    22a2:	bd08      	pop	{r3, pc}
    22a4:	20000554 	.word	0x20000554
    22a8:	00001b1d 	.word	0x00001b1d

000022ac <SERCOM2_2_Handler>:
{
    22ac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    22ae:	4b02      	ldr	r3, [pc, #8]	; (22b8 <SERCOM2_2_Handler+0xc>)
    22b0:	6818      	ldr	r0, [r3, #0]
    22b2:	4b02      	ldr	r3, [pc, #8]	; (22bc <SERCOM2_2_Handler+0x10>)
    22b4:	4798      	blx	r3
    22b6:	bd08      	pop	{r3, pc}
    22b8:	20000554 	.word	0x20000554
    22bc:	00001b1d 	.word	0x00001b1d

000022c0 <SERCOM2_3_Handler>:
{
    22c0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    22c2:	4b02      	ldr	r3, [pc, #8]	; (22cc <SERCOM2_3_Handler+0xc>)
    22c4:	6818      	ldr	r0, [r3, #0]
    22c6:	4b02      	ldr	r3, [pc, #8]	; (22d0 <SERCOM2_3_Handler+0x10>)
    22c8:	4798      	blx	r3
    22ca:	bd08      	pop	{r3, pc}
    22cc:	20000554 	.word	0x20000554
    22d0:	00001b1d 	.word	0x00001b1d

000022d4 <SERCOM5_0_Handler>:
{
    22d4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    22d6:	4b02      	ldr	r3, [pc, #8]	; (22e0 <SERCOM5_0_Handler+0xc>)
    22d8:	6858      	ldr	r0, [r3, #4]
    22da:	4b02      	ldr	r3, [pc, #8]	; (22e4 <SERCOM5_0_Handler+0x10>)
    22dc:	4798      	blx	r3
    22de:	bd08      	pop	{r3, pc}
    22e0:	20000554 	.word	0x20000554
    22e4:	00001dc9 	.word	0x00001dc9

000022e8 <SERCOM5_1_Handler>:
{
    22e8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    22ea:	4b02      	ldr	r3, [pc, #8]	; (22f4 <SERCOM5_1_Handler+0xc>)
    22ec:	6858      	ldr	r0, [r3, #4]
    22ee:	4b02      	ldr	r3, [pc, #8]	; (22f8 <SERCOM5_1_Handler+0x10>)
    22f0:	4798      	blx	r3
    22f2:	bd08      	pop	{r3, pc}
    22f4:	20000554 	.word	0x20000554
    22f8:	00001dc9 	.word	0x00001dc9

000022fc <SERCOM5_2_Handler>:
{
    22fc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    22fe:	4b02      	ldr	r3, [pc, #8]	; (2308 <SERCOM5_2_Handler+0xc>)
    2300:	6858      	ldr	r0, [r3, #4]
    2302:	4b02      	ldr	r3, [pc, #8]	; (230c <SERCOM5_2_Handler+0x10>)
    2304:	4798      	blx	r3
    2306:	bd08      	pop	{r3, pc}
    2308:	20000554 	.word	0x20000554
    230c:	00001dc9 	.word	0x00001dc9

00002310 <SERCOM5_3_Handler>:
{
    2310:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2312:	4b02      	ldr	r3, [pc, #8]	; (231c <SERCOM5_3_Handler+0xc>)
    2314:	6858      	ldr	r0, [r3, #4]
    2316:	4b02      	ldr	r3, [pc, #8]	; (2320 <SERCOM5_3_Handler+0x10>)
    2318:	4798      	blx	r3
    231a:	bd08      	pop	{r3, pc}
    231c:	20000554 	.word	0x20000554
    2320:	00001dc9 	.word	0x00001dc9

00002324 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    2324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2328:	4605      	mov	r5, r0
    232a:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    232c:	4608      	mov	r0, r1
    232e:	4b44      	ldr	r3, [pc, #272]	; (2440 <_spi_m_dma_init+0x11c>)
    2330:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2332:	2807      	cmp	r0, #7
    2334:	d00d      	beq.n	2352 <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2336:	2d00      	cmp	r5, #0
    2338:	d06e      	beq.n	2418 <_spi_m_dma_init+0xf4>
    233a:	f640 42f8 	movw	r2, #3320	; 0xcf8
    233e:	4941      	ldr	r1, [pc, #260]	; (2444 <_spi_m_dma_init+0x120>)
    2340:	1c20      	adds	r0, r4, #0
    2342:	bf18      	it	ne
    2344:	2001      	movne	r0, #1
    2346:	4b40      	ldr	r3, [pc, #256]	; (2448 <_spi_m_dma_init+0x124>)
    2348:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    234a:	f06f 000c 	mvn.w	r0, #12
    234e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    2352:	2d00      	cmp	r5, #0
    2354:	d16a      	bne.n	242c <_spi_m_dma_init+0x108>
    2356:	f640 42f8 	movw	r2, #3320	; 0xcf8
    235a:	493a      	ldr	r1, [pc, #232]	; (2444 <_spi_m_dma_init+0x120>)
    235c:	2000      	movs	r0, #0
    235e:	4b3a      	ldr	r3, [pc, #232]	; (2448 <_spi_m_dma_init+0x124>)
    2360:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2362:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2364:	f013 0f01 	tst.w	r3, #1
    2368:	d119      	bne.n	239e <_spi_m_dma_init+0x7a>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    236a:	69e3      	ldr	r3, [r4, #28]
    236c:	f013 0f03 	tst.w	r3, #3
    2370:	d1fb      	bne.n	236a <_spi_m_dma_init+0x46>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2372:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2374:	f013 0f02 	tst.w	r3, #2
    2378:	d00b      	beq.n	2392 <_spi_m_dma_init+0x6e>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    237a:	6823      	ldr	r3, [r4, #0]
    237c:	f023 0302 	bic.w	r3, r3, #2
    2380:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2382:	69e3      	ldr	r3, [r4, #28]
    2384:	f013 0f03 	tst.w	r3, #3
    2388:	d1fb      	bne.n	2382 <_spi_m_dma_init+0x5e>
    238a:	69e3      	ldr	r3, [r4, #28]
    238c:	f013 0f02 	tst.w	r3, #2
    2390:	d1fb      	bne.n	238a <_spi_m_dma_init+0x66>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2392:	230d      	movs	r3, #13
    2394:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2396:	69e3      	ldr	r3, [r4, #28]
    2398:	f013 0f03 	tst.w	r3, #3
    239c:	d1fb      	bne.n	2396 <_spi_m_dma_init+0x72>
    239e:	69e3      	ldr	r3, [r4, #28]
    23a0:	f013 0f01 	tst.w	r3, #1
    23a4:	d1fb      	bne.n	239e <_spi_m_dma_init+0x7a>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    23a6:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    23a8:	f640 1256 	movw	r2, #2390	; 0x956
    23ac:	4925      	ldr	r1, [pc, #148]	; (2444 <_spi_m_dma_init+0x120>)
    23ae:	1c20      	adds	r0, r4, #0
    23b0:	bf18      	it	ne
    23b2:	2001      	movne	r0, #1
    23b4:	4b24      	ldr	r3, [pc, #144]	; (2448 <_spi_m_dma_init+0x124>)
    23b6:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    23b8:	4b24      	ldr	r3, [pc, #144]	; (244c <_spi_m_dma_init+0x128>)
    23ba:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23bc:	69e3      	ldr	r3, [r4, #28]
    23be:	f013 0f03 	tst.w	r3, #3
    23c2:	d1fb      	bne.n	23bc <_spi_m_dma_init+0x98>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    23c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    23c8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23ca:	69e3      	ldr	r3, [r4, #28]
    23cc:	f013 0f17 	tst.w	r3, #23
    23d0:	d1fb      	bne.n	23ca <_spi_m_dma_init+0xa6>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    23d2:	2306      	movs	r3, #6
    23d4:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    23d6:	2600      	movs	r6, #0
    23d8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    23dc:	f105 0818 	add.w	r8, r5, #24
    23e0:	4620      	mov	r0, r4
    23e2:	4b1b      	ldr	r3, [pc, #108]	; (2450 <_spi_m_dma_init+0x12c>)
    23e4:	4798      	blx	r3
    23e6:	4601      	mov	r1, r0
    23e8:	4640      	mov	r0, r8
    23ea:	4f1a      	ldr	r7, [pc, #104]	; (2454 <_spi_m_dma_init+0x130>)
    23ec:	47b8      	blx	r7
	dev->resource->back                 = dev;
    23ee:	69ab      	ldr	r3, [r5, #24]
    23f0:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    23f2:	69ab      	ldr	r3, [r5, #24]
    23f4:	4a18      	ldr	r2, [pc, #96]	; (2458 <_spi_m_dma_init+0x134>)
    23f6:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    23f8:	69ab      	ldr	r3, [r5, #24]
    23fa:	4c18      	ldr	r4, [pc, #96]	; (245c <_spi_m_dma_init+0x138>)
    23fc:	605c      	str	r4, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    23fe:	4631      	mov	r1, r6
    2400:	4640      	mov	r0, r8
    2402:	47b8      	blx	r7
	dev->resource->back                 = dev;
    2404:	69ab      	ldr	r3, [r5, #24]
    2406:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    2408:	69ab      	ldr	r3, [r5, #24]
    240a:	4a15      	ldr	r2, [pc, #84]	; (2460 <_spi_m_dma_init+0x13c>)
    240c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    240e:	69ab      	ldr	r3, [r5, #24]
    2410:	605c      	str	r4, [r3, #4]

	return ERR_NONE;
    2412:	4630      	mov	r0, r6
    2414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    2418:	f640 42f8 	movw	r2, #3320	; 0xcf8
    241c:	4909      	ldr	r1, [pc, #36]	; (2444 <_spi_m_dma_init+0x120>)
    241e:	2000      	movs	r0, #0
    2420:	4b09      	ldr	r3, [pc, #36]	; (2448 <_spi_m_dma_init+0x124>)
    2422:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2424:	f06f 000c 	mvn.w	r0, #12
    2428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    242c:	f640 42f8 	movw	r2, #3320	; 0xcf8
    2430:	4904      	ldr	r1, [pc, #16]	; (2444 <_spi_m_dma_init+0x120>)
    2432:	1c20      	adds	r0, r4, #0
    2434:	bf18      	it	ne
    2436:	2001      	movne	r0, #1
    2438:	4b03      	ldr	r3, [pc, #12]	; (2448 <_spi_m_dma_init+0x124>)
    243a:	4798      	blx	r3
    243c:	e791      	b.n	2362 <_spi_m_dma_init+0x3e>
    243e:	bf00      	nop
    2440:	00001ad9 	.word	0x00001ad9
    2444:	000036c8 	.word	0x000036c8
    2448:	0000110d 	.word	0x0000110d
    244c:	0020000c 	.word	0x0020000c
    2450:	00001be9 	.word	0x00001be9
    2454:	000018c5 	.word	0x000018c5
    2458:	00001bfd 	.word	0x00001bfd
    245c:	00001c15 	.word	0x00001c15
    2460:	00001c09 	.word	0x00001c09

00002464 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    2464:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    2466:	4604      	mov	r4, r0
    2468:	b160      	cbz	r0, 2484 <_spi_m_dma_enable+0x20>
    246a:	6800      	ldr	r0, [r0, #0]
    246c:	3000      	adds	r0, #0
    246e:	bf18      	it	ne
    2470:	2001      	movne	r0, #1
    2472:	f640 5221 	movw	r2, #3361	; 0xd21
    2476:	4904      	ldr	r1, [pc, #16]	; (2488 <_spi_m_dma_enable+0x24>)
    2478:	4b04      	ldr	r3, [pc, #16]	; (248c <_spi_m_dma_enable+0x28>)
    247a:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    247c:	6820      	ldr	r0, [r4, #0]
    247e:	4b04      	ldr	r3, [pc, #16]	; (2490 <_spi_m_dma_enable+0x2c>)
    2480:	4798      	blx	r3
}
    2482:	bd10      	pop	{r4, pc}
    2484:	2000      	movs	r0, #0
    2486:	e7f4      	b.n	2472 <_spi_m_dma_enable+0xe>
    2488:	000036c8 	.word	0x000036c8
    248c:	0000110d 	.word	0x0000110d
    2490:	00001bc5 	.word	0x00001bc5

00002494 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    2494:	b538      	push	{r3, r4, r5, lr}
    2496:	4614      	mov	r4, r2
	switch (type) {
    2498:	2901      	cmp	r1, #1
    249a:	d00c      	beq.n	24b6 <_spi_m_dma_register_callback+0x22>
    249c:	b111      	cbz	r1, 24a4 <_spi_m_dma_register_callback+0x10>
    249e:	2902      	cmp	r1, #2
    24a0:	d014      	beq.n	24cc <_spi_m_dma_register_callback+0x38>
    24a2:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    24a4:	6042      	str	r2, [r0, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    24a6:	3200      	adds	r2, #0
    24a8:	bf18      	it	ne
    24aa:	2201      	movne	r2, #1
    24ac:	2100      	movs	r1, #0
    24ae:	4608      	mov	r0, r1
    24b0:	4b0e      	ldr	r3, [pc, #56]	; (24ec <_spi_m_dma_register_callback+0x58>)
    24b2:	4798      	blx	r3
		break;
    24b4:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    24b6:	6082      	str	r2, [r0, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    24b8:	6800      	ldr	r0, [r0, #0]
    24ba:	4b0d      	ldr	r3, [pc, #52]	; (24f0 <_spi_m_dma_register_callback+0x5c>)
    24bc:	4798      	blx	r3
    24be:	1c22      	adds	r2, r4, #0
    24c0:	bf18      	it	ne
    24c2:	2201      	movne	r2, #1
    24c4:	2100      	movs	r1, #0
    24c6:	4b09      	ldr	r3, [pc, #36]	; (24ec <_spi_m_dma_register_callback+0x58>)
    24c8:	4798      	blx	r3
		break;
    24ca:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    24cc:	60c2      	str	r2, [r0, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    24ce:	6800      	ldr	r0, [r0, #0]
    24d0:	4b07      	ldr	r3, [pc, #28]	; (24f0 <_spi_m_dma_register_callback+0x5c>)
    24d2:	4798      	blx	r3
    24d4:	3400      	adds	r4, #0
    24d6:	bf18      	it	ne
    24d8:	2401      	movne	r4, #1
    24da:	4622      	mov	r2, r4
    24dc:	2101      	movs	r1, #1
    24de:	4d03      	ldr	r5, [pc, #12]	; (24ec <_spi_m_dma_register_callback+0x58>)
    24e0:	47a8      	blx	r5
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    24e2:	4622      	mov	r2, r4
    24e4:	2101      	movs	r1, #1
    24e6:	2000      	movs	r0, #0
    24e8:	47a8      	blx	r5
    24ea:	bd38      	pop	{r3, r4, r5, pc}
    24ec:	0000179d 	.word	0x0000179d
    24f0:	00001be9 	.word	0x00001be9

000024f4 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    24f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24f8:	4604      	mov	r4, r0
    24fa:	4689      	mov	r9, r1
    24fc:	4617      	mov	r7, r2
    24fe:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    2500:	f8d0 a000 	ldr.w	sl, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2504:	4650      	mov	r0, sl
    2506:	4b3f      	ldr	r3, [pc, #252]	; (2604 <_spi_m_dma_transfer+0x110>)
    2508:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    250a:	2807      	cmp	r0, #7
			return &sercomspi_regs[i];
    250c:	4e3e      	ldr	r6, [pc, #248]	; (2608 <_spi_m_dma_transfer+0x114>)
    250e:	bf18      	it	ne
    2510:	2600      	movne	r6, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    2512:	4650      	mov	r0, sl
    2514:	4b3d      	ldr	r3, [pc, #244]	; (260c <_spi_m_dma_transfer+0x118>)
    2516:	4798      	blx	r3
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);

	if (rxbuf) {
    2518:	2f00      	cmp	r7, #0
    251a:	d046      	beq.n	25aa <_spi_m_dma_transfer+0xb6>
    251c:	4605      	mov	r5, r0
	ASSERT(dev && dev->prvt);
    251e:	2c00      	cmp	r4, #0
    2520:	d041      	beq.n	25a6 <_spi_m_dma_transfer+0xb2>
    2522:	f11a 0000 	adds.w	r0, sl, #0
    2526:	bf18      	it	ne
    2528:	2001      	movne	r0, #1
    252a:	f640 426b 	movw	r2, #3179	; 0xc6b
    252e:	4938      	ldr	r1, [pc, #224]	; (2610 <_spi_m_dma_transfer+0x11c>)
    2530:	4b38      	ldr	r3, [pc, #224]	; (2614 <_spi_m_dma_transfer+0x120>)
    2532:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    2534:	6822      	ldr	r2, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2536:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    2538:	f013 0f04 	tst.w	r3, #4
    253c:	d107      	bne.n	254e <_spi_m_dma_transfer+0x5a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    253e:	6853      	ldr	r3, [r2, #4]
    2540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2544:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2546:	69d3      	ldr	r3, [r2, #28]
    2548:	f013 0f17 	tst.w	r3, #23
    254c:	d1fb      	bne.n	2546 <_spi_m_dma_transfer+0x52>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    254e:	6821      	ldr	r1, [r4, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    2550:	3128      	adds	r1, #40	; 0x28
    2552:	4628      	mov	r0, r5
    2554:	4b30      	ldr	r3, [pc, #192]	; (2618 <_spi_m_dma_transfer+0x124>)
    2556:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    2558:	4639      	mov	r1, r7
    255a:	4628      	mov	r0, r5
    255c:	4b2f      	ldr	r3, [pc, #188]	; (261c <_spi_m_dma_transfer+0x128>)
    255e:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    2560:	4641      	mov	r1, r8
    2562:	4628      	mov	r0, r5
    2564:	4b2e      	ldr	r3, [pc, #184]	; (2620 <_spi_m_dma_transfer+0x12c>)
    2566:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    2568:	2100      	movs	r1, #0
    256a:	4628      	mov	r0, r5
    256c:	4b2d      	ldr	r3, [pc, #180]	; (2624 <_spi_m_dma_transfer+0x130>)
    256e:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    2570:	f1b9 0f00 	cmp.w	r9, #0
    2574:	d033      	beq.n	25de <_spi_m_dma_transfer+0xea>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    2576:	4649      	mov	r1, r9
    2578:	2000      	movs	r0, #0
    257a:	4b27      	ldr	r3, [pc, #156]	; (2618 <_spi_m_dma_transfer+0x124>)
    257c:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    257e:	6821      	ldr	r1, [r4, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    2580:	3128      	adds	r1, #40	; 0x28
    2582:	2000      	movs	r0, #0
    2584:	4b25      	ldr	r3, [pc, #148]	; (261c <_spi_m_dma_transfer+0x128>)
    2586:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    2588:	2101      	movs	r1, #1
    258a:	2000      	movs	r0, #0
    258c:	4b26      	ldr	r3, [pc, #152]	; (2628 <_spi_m_dma_transfer+0x134>)
    258e:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    2590:	4641      	mov	r1, r8
    2592:	2000      	movs	r0, #0
    2594:	4b22      	ldr	r3, [pc, #136]	; (2620 <_spi_m_dma_transfer+0x12c>)
    2596:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    2598:	2100      	movs	r1, #0
    259a:	4608      	mov	r0, r1
    259c:	4b21      	ldr	r3, [pc, #132]	; (2624 <_spi_m_dma_transfer+0x130>)
    259e:	4798      	blx	r3

	return ERR_NONE;
}
    25a0:	2000      	movs	r0, #0
    25a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(dev && dev->prvt);
    25a6:	2000      	movs	r0, #0
    25a8:	e7bf      	b.n	252a <_spi_m_dma_transfer+0x36>
	ASSERT(dev && dev->prvt);
    25aa:	b1b4      	cbz	r4, 25da <_spi_m_dma_transfer+0xe6>
    25ac:	f11a 0000 	adds.w	r0, sl, #0
    25b0:	bf18      	it	ne
    25b2:	2001      	movne	r0, #1
    25b4:	f640 4272 	movw	r2, #3186	; 0xc72
    25b8:	4915      	ldr	r1, [pc, #84]	; (2610 <_spi_m_dma_transfer+0x11c>)
    25ba:	4b16      	ldr	r3, [pc, #88]	; (2614 <_spi_m_dma_transfer+0x120>)
    25bc:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    25be:	6822      	ldr	r2, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    25c0:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    25c2:	f013 0f04 	tst.w	r3, #4
    25c6:	d1d3      	bne.n	2570 <_spi_m_dma_transfer+0x7c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    25c8:	6853      	ldr	r3, [r2, #4]
    25ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    25ce:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    25d0:	69d3      	ldr	r3, [r2, #28]
    25d2:	f013 0f17 	tst.w	r3, #23
    25d6:	d1fb      	bne.n	25d0 <_spi_m_dma_transfer+0xdc>
    25d8:	e7ca      	b.n	2570 <_spi_m_dma_transfer+0x7c>
	ASSERT(dev && dev->prvt);
    25da:	2000      	movs	r0, #0
    25dc:	e7ea      	b.n	25b4 <_spi_m_dma_transfer+0xc0>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    25de:	f106 010e 	add.w	r1, r6, #14
    25e2:	2000      	movs	r0, #0
    25e4:	4b0c      	ldr	r3, [pc, #48]	; (2618 <_spi_m_dma_transfer+0x124>)
    25e6:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    25e8:	6821      	ldr	r1, [r4, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    25ea:	3128      	adds	r1, #40	; 0x28
    25ec:	2000      	movs	r0, #0
    25ee:	4b0b      	ldr	r3, [pc, #44]	; (261c <_spi_m_dma_transfer+0x128>)
    25f0:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    25f2:	2100      	movs	r1, #0
    25f4:	4608      	mov	r0, r1
    25f6:	4b0c      	ldr	r3, [pc, #48]	; (2628 <_spi_m_dma_transfer+0x134>)
    25f8:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    25fa:	4641      	mov	r1, r8
    25fc:	2000      	movs	r0, #0
    25fe:	4b08      	ldr	r3, [pc, #32]	; (2620 <_spi_m_dma_transfer+0x12c>)
    2600:	4798      	blx	r3
    2602:	e7c9      	b.n	2598 <_spi_m_dma_transfer+0xa4>
    2604:	00001ad9 	.word	0x00001ad9
    2608:	000036b4 	.word	0x000036b4
    260c:	00001be9 	.word	0x00001be9
    2610:	000036c8 	.word	0x000036c8
    2614:	0000110d 	.word	0x0000110d
    2618:	00001801 	.word	0x00001801
    261c:	000017f1 	.word	0x000017f1
    2620:	0000182d 	.word	0x0000182d
    2624:	00001885 	.word	0x00001885
    2628:	00001811 	.word	0x00001811

0000262c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    262c:	4b03      	ldr	r3, [pc, #12]	; (263c <_delay_init+0x10>)
    262e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2632:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2634:	2205      	movs	r2, #5
    2636:	601a      	str	r2, [r3, #0]
    2638:	4770      	bx	lr
    263a:	bf00      	nop
    263c:	e000e010 	.word	0xe000e010

00002640 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2640:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2642:	b303      	cbz	r3, 2686 <_delay_cycles+0x46>
{
    2644:	b430      	push	{r4, r5}
    2646:	1e5d      	subs	r5, r3, #1
    2648:	b2ed      	uxtb	r5, r5
	while (n--) {
    264a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    264c:	4a12      	ldr	r2, [pc, #72]	; (2698 <_delay_cycles+0x58>)
    264e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2652:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2654:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2656:	6813      	ldr	r3, [r2, #0]
    2658:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    265c:	d0fb      	beq.n	2656 <_delay_cycles+0x16>
	while (n--) {
    265e:	3801      	subs	r0, #1
    2660:	b2c0      	uxtb	r0, r0
    2662:	28ff      	cmp	r0, #255	; 0xff
    2664:	d1f5      	bne.n	2652 <_delay_cycles+0x12>
    2666:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    266a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    266e:	3101      	adds	r1, #1
    2670:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2672:	4b09      	ldr	r3, [pc, #36]	; (2698 <_delay_cycles+0x58>)
    2674:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2676:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2678:	461a      	mov	r2, r3
    267a:	6813      	ldr	r3, [r2, #0]
    267c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2680:	d0fb      	beq.n	267a <_delay_cycles+0x3a>
		;
}
    2682:	bc30      	pop	{r4, r5}
    2684:	4770      	bx	lr
	SysTick->LOAD = buf;
    2686:	4b04      	ldr	r3, [pc, #16]	; (2698 <_delay_cycles+0x58>)
    2688:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    268a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    268c:	461a      	mov	r2, r3
    268e:	6813      	ldr	r3, [r2, #0]
    2690:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2694:	d0fb      	beq.n	268e <_delay_cycles+0x4e>
    2696:	4770      	bx	lr
    2698:	e000e010 	.word	0xe000e010

0000269c <convert_cb_ADC_1>:


static void convert_cb_ADC_1(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
	
	conversion_ready = 1;
    269c:	2201      	movs	r2, #1
    269e:	4b01      	ldr	r3, [pc, #4]	; (26a4 <convert_cb_ADC_1+0x8>)
    26a0:	601a      	str	r2, [r3, #0]
    26a2:	4770      	bx	lr
    26a4:	2000055c 	.word	0x2000055c

000026a8 <tx_complete_cb_GRID_LED>:


// DMA SPI CALLBACK
static void tx_complete_cb_GRID_LED(struct _dma_resource *resource)
{
	dma_spi_done = 1;
    26a8:	2201      	movs	r2, #1
    26aa:	4b01      	ldr	r3, [pc, #4]	; (26b0 <tx_complete_cb_GRID_LED+0x8>)
    26ac:	605a      	str	r2, [r3, #4]
    26ae:	4770      	bx	lr
    26b0:	2000055c 	.word	0x2000055c

000026b4 <grid_led_set_color>:
	
	return led_frame_buffer_size;
}

/** Set color of a particular LED in the frame buffer */
uint8_t grid_led_set_color(uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    26b4:	b430      	push	{r4, r5}
	
	//if index is valid
	if (led_index<led_number){
    26b6:	4d0d      	ldr	r5, [pc, #52]	; (26ec <grid_led_set_color+0x38>)
    26b8:	692d      	ldr	r5, [r5, #16]
    26ba:	4285      	cmp	r5, r0
    26bc:	d802      	bhi.n	26c4 <grid_led_set_color+0x10>
		return 0;
		
	}
	else{
		
		return -1;		
    26be:	20ff      	movs	r0, #255	; 0xff
		
	}
}
    26c0:	bc30      	pop	{r4, r5}
    26c2:	4770      	bx	lr
		led_frame_buffer_usable[led_index*3 + 0] = led_color_code[led_g];
    26c4:	4c09      	ldr	r4, [pc, #36]	; (26ec <grid_led_set_color+0x38>)
    26c6:	6965      	ldr	r5, [r4, #20]
    26c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    26cc:	0080      	lsls	r0, r0, #2
    26ce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    26d2:	6992      	ldr	r2, [r2, #24]
    26d4:	502a      	str	r2, [r5, r0]
		led_frame_buffer_usable[led_index*3 + 1] = led_color_code[led_r];
    26d6:	4428      	add	r0, r5
    26d8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    26dc:	698a      	ldr	r2, [r1, #24]
    26de:	6042      	str	r2, [r0, #4]
		led_frame_buffer_usable[led_index*3 + 2] = led_color_code[led_b];
    26e0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    26e4:	69a3      	ldr	r3, [r4, #24]
    26e6:	6083      	str	r3, [r0, #8]
		return 0;
    26e8:	2000      	movs	r0, #0
    26ea:	e7e9      	b.n	26c0 <grid_led_set_color+0xc>
    26ec:	2000055c 	.word	0x2000055c

000026f0 <grid_led_init>:

/** Initialize led buffer for a given number of LEDs */
uint8_t grid_led_init(uint8_t num){
    26f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26f2:	4606      	mov	r6, r0
	
	led_number = num;	
    26f4:	4c3a      	ldr	r4, [pc, #232]	; (27e0 <grid_led_init+0xf0>)
    26f6:	6120      	str	r0, [r4, #16]
	
	// Allocating memory for the frame buffer
	led_frame_buffer_size = (24 + num*3*4);
    26f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    26fc:	0080      	lsls	r0, r0, #2
    26fe:	3018      	adds	r0, #24
    2700:	60e0      	str	r0, [r4, #12]
	led_frame_buffer = (uint8_t*) malloc(led_frame_buffer_size * sizeof(uint8_t));
    2702:	4f38      	ldr	r7, [pc, #224]	; (27e4 <grid_led_init+0xf4>)
    2704:	47b8      	blx	r7
    2706:	4605      	mov	r5, r0
    2708:	60a0      	str	r0, [r4, #8]
	led_frame_buffer_usable = (uint32_t*) &led_frame_buffer[24];
    270a:	f100 0318 	add.w	r3, r0, #24
    270e:	f844 3f14 	str.w	r3, [r4, #20]!
	
	// Allocating memory for the smart buffer (2D array)
	#define led_smart_buffer_layer_number 2
	led_smart_buffer = (struct LED_layer*) malloc(led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    2712:	201a      	movs	r0, #26
    2714:	fb00 f006 	mul.w	r0, r0, r6
    2718:	47b8      	blx	r7
    271a:	4b33      	ldr	r3, [pc, #204]	; (27e8 <grid_led_init+0xf8>)
    271c:	6018      	str	r0, [r3, #0]
    271e:	2200      	movs	r2, #0
    2720:	b293      	uxth	r3, r2
	
	for(uint16_t i=0; i<256; i++){
		
		uint32_t temp = 0;
		
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2722:	f003 0101 	and.w	r1, r3, #1
    2726:	2900      	cmp	r1, #0
    2728:	bf14      	ite	ne
    272a:	f04f 6160 	movne.w	r1, #234881024	; 0xe000000
    272e:	f04f 6100 	moveq.w	r1, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2732:	f3c3 0040 	ubfx	r0, r3, #1, #1
    2736:	2800      	cmp	r0, #0
    2738:	bf14      	ite	ne
    273a:	f04f 4060 	movne.w	r0, #3758096384	; 0xe0000000
    273e:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
    2742:	4308      	orrs	r0, r1
		
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    2744:	f3c3 0180 	ubfx	r1, r3, #2, #1
    2748:	2900      	cmp	r1, #0
    274a:	bf14      	ite	ne
    274c:	f44f 2160 	movne.w	r1, #917504	; 0xe0000
    2750:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    2754:	4301      	orrs	r1, r0
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    2756:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    275a:	2800      	cmp	r0, #0
    275c:	bf14      	ite	ne
    275e:	f44f 0060 	movne.w	r0, #14680064	; 0xe00000
    2762:	f44f 0000 	moveq.w	r0, #8388608	; 0x800000
    2766:	4301      	orrs	r1, r0
		
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    2768:	f3c3 1000 	ubfx	r0, r3, #4, #1
    276c:	2800      	cmp	r0, #0
    276e:	bf14      	ite	ne
    2770:	f44f 6060 	movne.w	r0, #3584	; 0xe00
    2774:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    2778:	4308      	orrs	r0, r1
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    277a:	f3c3 1140 	ubfx	r1, r3, #5, #1
    277e:	2900      	cmp	r1, #0
    2780:	bf14      	ite	ne
    2782:	f44f 4160 	movne.w	r1, #57344	; 0xe000
    2786:	f44f 4100 	moveq.w	r1, #32768	; 0x8000
    278a:	4308      	orrs	r0, r1
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    278c:	f3c3 1180 	ubfx	r1, r3, #6, #1
    2790:	2900      	cmp	r1, #0
    2792:	bf14      	ite	ne
    2794:	210e      	movne	r1, #14
    2796:	2108      	moveq	r1, #8
    2798:	4301      	orrs	r1, r0
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    279a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    279e:	2b00      	cmp	r3, #0
    27a0:	bf14      	ite	ne
    27a2:	23e0      	movne	r3, #224	; 0xe0
    27a4:	2380      	moveq	r3, #128	; 0x80
    27a6:	430b      	orrs	r3, r1
		
		led_color_code[i] = temp;
    27a8:	f844 3f04 	str.w	r3, [r4, #4]!
    27ac:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    27ae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    27b2:	d1b5      	bne.n	2720 <grid_led_init+0x30>
    27b4:	1e6b      	subs	r3, r5, #1
    27b6:	3517      	adds	r5, #23

	// Fill the first 24 bytes with the rr_code (reset)
	// This memory is essentially wasted but allows the entire frame to be sent out using DMA

	for (uint8_t i = 0; i<24; i++){
		led_frame_buffer[i] = LED_CODE_R;
    27b8:	2200      	movs	r2, #0
    27ba:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i<24; i++){
    27be:	429d      	cmp	r5, r3
    27c0:	d1fb      	bne.n	27ba <grid_led_init+0xca>
	}
	
	
	// Fill the rest of the buffer with rgb=(0,0,0);
	for (uint32_t i = 0; i<led_number; i++){
    27c2:	b156      	cbz	r6, 27da <grid_led_init+0xea>
    27c4:	2400      	movs	r4, #0
		grid_led_set_color(i, 0,0,0);
    27c6:	4627      	mov	r7, r4
    27c8:	4d08      	ldr	r5, [pc, #32]	; (27ec <grid_led_init+0xfc>)
    27ca:	463b      	mov	r3, r7
    27cc:	463a      	mov	r2, r7
    27ce:	4639      	mov	r1, r7
    27d0:	4620      	mov	r0, r4
    27d2:	47a8      	blx	r5
	for (uint32_t i = 0; i<led_number; i++){
    27d4:	3401      	adds	r4, #1
    27d6:	42a6      	cmp	r6, r4
    27d8:	d1f7      	bne.n	27ca <grid_led_init+0xda>
	}


	return 0;
}
    27da:	2000      	movs	r0, #0
    27dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27de:	bf00      	nop
    27e0:	2000055c 	.word	0x2000055c
    27e4:	00002b95 	.word	0x00002b95
    27e8:	20000ed0 	.word	0x20000ed0
    27ec:	000026b5 	.word	0x000026b5

000027f0 <grid_led_tick>:

void grid_led_tick(void){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint32_t j=0; j<led_number; j++){
    27f0:	4b09      	ldr	r3, [pc, #36]	; (2818 <grid_led_tick+0x28>)
    27f2:	6918      	ldr	r0, [r3, #16]
    27f4:	b170      	cbz	r0, 2814 <grid_led_tick+0x24>
    27f6:	4b09      	ldr	r3, [pc, #36]	; (281c <grid_led_tick+0x2c>)
    27f8:	221a      	movs	r2, #26
    27fa:	fb02 3000 	mla	r0, r2, r0, r3
					
		for(uint8_t i=0; i<2; i++){
			l_buffer[j][i].pha += l_buffer[j][i].fre; //PHASE + = FREQUENCY		
    27fe:	7ada      	ldrb	r2, [r3, #11]
    2800:	7b19      	ldrb	r1, [r3, #12]
    2802:	440a      	add	r2, r1
    2804:	72da      	strb	r2, [r3, #11]
    2806:	7e1a      	ldrb	r2, [r3, #24]
    2808:	7e59      	ldrb	r1, [r3, #25]
    280a:	440a      	add	r2, r1
    280c:	761a      	strb	r2, [r3, #24]
    280e:	331a      	adds	r3, #26
	for (uint32_t j=0; j<led_number; j++){
    2810:	4298      	cmp	r0, r3
    2812:	d1f4      	bne.n	27fe <grid_led_tick+0xe>
    2814:	4770      	bx	lr
    2816:	bf00      	nop
    2818:	2000055c 	.word	0x2000055c
    281c:	20000ed4 	.word	0x20000ed4

00002820 <grid_led_render>:
}




void grid_led_render(uint32_t num){
    2820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2824:	4b23      	ldr	r3, [pc, #140]	; (28b4 <grid_led_render+0x94>)
    2826:	241a      	movs	r4, #26
    2828:	fb04 3400 	mla	r4, r4, r0, r3
    282c:	2700      	movs	r7, #0
	
	
	uint32_t mix_r = 0;
	uint32_t mix_g = 0;
	uint32_t mix_b = 0;
    282e:	463b      	mov	r3, r7
	uint32_t mix_g = 0;
    2830:	463a      	mov	r2, r7
	uint32_t mix_r = 0;
    2832:	4639      	mov	r1, r7
	for (uint8_t i = 0; i<2; i++){
				
		uint8_t min_r = l_buffer[num][i].color_min.r;
		uint8_t min_g = l_buffer[num][i].color_min.g;
		uint8_t min_b = l_buffer[num][i].color_min.b;
		uint8_t min_a = min_lookup[l_buffer[num][i].pha];
    2834:	f8df e088 	ldr.w	lr, [pc, #136]	; 28c0 <grid_led_render+0xa0>
    2838:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = l_buffer[num][i].color_max.r;
		uint8_t max_g = l_buffer[num][i].color_max.g;
		uint8_t max_b = l_buffer[num][i].color_max.b;
		uint8_t max_a = max_lookup[l_buffer[num][i].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    283a:	f81e 8006 	ldrb.w	r8, [lr, r6]
		uint8_t mid_a = mid_lookup[l_buffer[num][i].pha];
    283e:	4476      	add	r6, lr
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2840:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    2844:	f896 c200 	ldrb.w	ip, [r6, #512]	; 0x200
    2848:	7826      	ldrb	r6, [r4, #0]
    284a:	f894 9003 	ldrb.w	r9, [r4, #3]
    284e:	fb05 f909 	mul.w	r9, r5, r9
    2852:	fb08 9906 	mla	r9, r8, r6, r9
    2856:	79a6      	ldrb	r6, [r4, #6]
    2858:	fb0c 9606 	mla	r6, ip, r6, r9
    285c:	4431      	add	r1, r6
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    285e:	7866      	ldrb	r6, [r4, #1]
    2860:	f894 9004 	ldrb.w	r9, [r4, #4]
    2864:	fb05 f909 	mul.w	r9, r5, r9
    2868:	fb08 9906 	mla	r9, r8, r6, r9
    286c:	79e6      	ldrb	r6, [r4, #7]
    286e:	fb0c 9606 	mla	r6, ip, r6, r9
    2872:	4432      	add	r2, r6
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    2874:	78a6      	ldrb	r6, [r4, #2]
    2876:	f894 9005 	ldrb.w	r9, [r4, #5]
    287a:	fb05 f509 	mul.w	r5, r5, r9
    287e:	fb08 5606 	mla	r6, r8, r6, r5
    2882:	7a25      	ldrb	r5, [r4, #8]
    2884:	fb0c 6505 	mla	r5, ip, r5, r6
    2888:	442b      	add	r3, r5
    288a:	3701      	adds	r7, #1
    288c:	340d      	adds	r4, #13
	for (uint8_t i = 0; i<2; i++){
    288e:	2f02      	cmp	r7, #2
    2890:	d1d2      	bne.n	2838 <grid_led_render+0x18>
	}
	

	mix_r = (mix_r)/2/3/256;
	mix_g = (mix_g)/2/3/256;
	mix_b = (mix_b)/2/3/256;
    2892:	4c09      	ldr	r4, [pc, #36]	; (28b8 <grid_led_render+0x98>)
    2894:	fba4 5303 	umull	r5, r3, r4, r3
	mix_g = (mix_g)/2/3/256;
    2898:	fba4 5202 	umull	r5, r2, r4, r2
	mix_r = (mix_r)/2/3/256;
    289c:	fba4 4101 	umull	r4, r1, r4, r1
				
	grid_led_set_color(num, mix_r, mix_g, mix_b);
    28a0:	f3c3 2387 	ubfx	r3, r3, #10, #8
    28a4:	f3c2 2287 	ubfx	r2, r2, #10, #8
    28a8:	f3c1 2187 	ubfx	r1, r1, #10, #8
    28ac:	4c03      	ldr	r4, [pc, #12]	; (28bc <grid_led_render+0x9c>)
    28ae:	47a0      	blx	r4
    28b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    28b4:	20000ed4 	.word	0x20000ed4
    28b8:	aaaaaaab 	.word	0xaaaaaaab
    28bc:	000026b5 	.word	0x000026b5
    28c0:	20000000 	.word	0x20000000

000028c4 <grid_led_render_all>:
	
}


void grid_led_render_all(void){
    28c4:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<led_number; i++){
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <grid_led_render_all+0x18>)
    28c8:	691d      	ldr	r5, [r3, #16]
    28ca:	b135      	cbz	r5, 28da <grid_led_render_all+0x16>
    28cc:	2400      	movs	r4, #0
		
		grid_led_render(i);
    28ce:	4e04      	ldr	r6, [pc, #16]	; (28e0 <grid_led_render_all+0x1c>)
    28d0:	4620      	mov	r0, r4
    28d2:	47b0      	blx	r6
	for (uint32_t i=0; i<led_number; i++){
    28d4:	3401      	adds	r4, #1
    28d6:	42ac      	cmp	r4, r5
    28d8:	d1fa      	bne.n	28d0 <grid_led_render_all+0xc>
    28da:	bd70      	pop	{r4, r5, r6, pc}
    28dc:	2000055c 	.word	0x2000055c
    28e0:	00002821 	.word	0x00002821

000028e4 <main>:
}


int main(void)
{
    28e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28e8:	b0a3      	sub	sp, #140	; 0x8c
	/* Initializes MCU, drivers and middleware */
	
	atmel_start_init();
    28ea:	4b7d      	ldr	r3, [pc, #500]	; (2ae0 <main+0x1fc>)
    28ec:	4798      	blx	r3
	
	
	struct io_descriptor *io2;
	spi_m_dma_get_io_descriptor(&GRID_LED, &io2);
    28ee:	4c7d      	ldr	r4, [pc, #500]	; (2ae4 <main+0x200>)
    28f0:	a921      	add	r1, sp, #132	; 0x84
    28f2:	4620      	mov	r0, r4
    28f4:	4b7c      	ldr	r3, [pc, #496]	; (2ae8 <main+0x204>)
    28f6:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, tx_complete_cb_GRID_LED);
    28f8:	4a7c      	ldr	r2, [pc, #496]	; (2aec <main+0x208>)
    28fa:	2100      	movs	r1, #0
    28fc:	4620      	mov	r0, r4
    28fe:	4b7c      	ldr	r3, [pc, #496]	; (2af0 <main+0x20c>)
    2900:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2906:	4b7b      	ldr	r3, [pc, #492]	; (2af4 <main+0x210>)
    2908:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	

	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);
	adc_buffer[0] = 0;
    290c:	4b7a      	ldr	r3, [pc, #488]	; (2af8 <main+0x214>)
    290e:	2400      	movs	r4, #0
    2910:	701c      	strb	r4, [r3, #0]
	adc_buffer[1] = 0;
    2912:	705c      	strb	r4, [r3, #1]


	// ADC SETUP	
	uint8_t adc_result_buffer[2];
			
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_1);
    2914:	4d79      	ldr	r5, [pc, #484]	; (2afc <main+0x218>)
    2916:	4b7a      	ldr	r3, [pc, #488]	; (2b00 <main+0x21c>)
    2918:	4622      	mov	r2, r4
    291a:	4621      	mov	r1, r4
    291c:	4628      	mov	r0, r5
    291e:	4e79      	ldr	r6, [pc, #484]	; (2b04 <main+0x220>)
    2920:	47b0      	blx	r6
	adc_async_enable_channel(&ADC_1, 0);
    2922:	4621      	mov	r1, r4
    2924:	4628      	mov	r0, r5
    2926:	4b78      	ldr	r3, [pc, #480]	; (2b08 <main+0x224>)
    2928:	4798      	blx	r3

	adc_async_start_conversion(&ADC_1);
    292a:	4628      	mov	r0, r5
    292c:	4b77      	ldr	r3, [pc, #476]	; (2b0c <main+0x228>)
    292e:	4798      	blx	r3
	struct io_descriptor *io;
	//usart_async_register_callback(&GRID_AUX, USART_ASYNC_TXC_CB, tx_cb_GRID_AUX);
	/*usart_async_register_callback(&GRID_AUX, USART_ASYNC_RXC_CB, rx_cb);
	usart_async_register_callback(&GRID_AUX, USART_ASYNC_ERROR_CB, err_cb);*/
	
	usart_async_get_io_descriptor(&GRID_AUX, &io);
    2930:	4d77      	ldr	r5, [pc, #476]	; (2b10 <main+0x22c>)
    2932:	a91f      	add	r1, sp, #124	; 0x7c
    2934:	4628      	mov	r0, r5
    2936:	4b77      	ldr	r3, [pc, #476]	; (2b14 <main+0x230>)
    2938:	4798      	blx	r3
	usart_async_enable(&GRID_AUX);
    293a:	4628      	mov	r0, r5
    293c:	4b76      	ldr	r3, [pc, #472]	; (2b18 <main+0x234>)
    293e:	4798      	blx	r3
	// GRID_LED Library NEW NEW NEW NEW
	
	

	// Allocate memory for 4 leds and initialize the structure!
	grid_led_init(4);
    2940:	2004      	movs	r0, #4
    2942:	4b76      	ldr	r3, [pc, #472]	; (2b1c <main+0x238>)
    2944:	4798      	blx	r3
	#define ANA_RESULT_RESOLUTION 14
	#define ANA_DIV (1<<(ANA_SAMPLE_RESOLUTION-ANA_RESULT_RESOLUTION))
		
	uint32_t bufferPtr = 0;
	uint32_t bufferMinPtr = 0;
	uint32_t bufferMaxPtr = 0;
    2946:	9403      	str	r4, [sp, #12]
	uint32_t bufferMinPtr = 0;
    2948:	9402      	str	r4, [sp, #8]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    294a:	2320      	movs	r3, #32
    294c:	9307      	str	r3, [sp, #28]
		// HW Averaging
		uint32_t quicksum = 0;
		uint32_t adcresult	 =  0;
		for (uint16_t i=0; i<64; i++){
			
			conversion_ready = 0;
    294e:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 2b48 <main+0x264>
    2952:	e05e      	b.n	2a12 <main+0x12e>
		
		uint32_t ana_best=0;
		uint32_t ana_valid=0;
		
		
		for(uint32_t i = 0; i<BSIZE; i++){
    2954:	42b9      	cmp	r1, r7
    2956:	d009      	beq.n	296c <main+0x88>
					
			if ((ana_min+(ana_max-ana_min)/5-1) <buffer[i] && buffer[i] <(ana_max-(ana_max-ana_min)/5)+1){
    2958:	f837 3f02 	ldrh.w	r3, [r7, #2]!
    295c:	429a      	cmp	r2, r3
    295e:	daf9      	bge.n	2954 <main+0x70>
    2960:	4283      	cmp	r3, r0
				
				ana_best+=buffer[i];
    2962:	bfbc      	itt	lt
    2964:	18f6      	addlt	r6, r6, r3
				ana_valid++;
    2966:	f109 0901 	addlt.w	r9, r9, #1
    296a:	e7f3      	b.n	2954 <main+0x70>
			}

		}	
		
		if (ana_valid == 0){
    296c:	f1b9 0f00 	cmp.w	r9, #0
    2970:	d102      	bne.n	2978 <main+0x94>
			ana_best=ana_avg;
    2972:	9e04      	ldr	r6, [sp, #16]
			ana_valid=1;
    2974:	f04f 0901 	mov.w	r9, #1
		
		// ================ WS2812B VIA DMA SPI ================== //
					

	
		delay_ms(1);
    2978:	2001      	movs	r0, #1
    297a:	4b69      	ldr	r3, [pc, #420]	; (2b20 <main+0x23c>)
    297c:	4798      	blx	r3
	l_buffer[num][layer].color_min.r = r;
    297e:	4b69      	ldr	r3, [pc, #420]	; (2b24 <main+0x240>)
    2980:	2700      	movs	r7, #0
    2982:	701f      	strb	r7, [r3, #0]
	l_buffer[num][layer].color_min.g = g;
    2984:	705f      	strb	r7, [r3, #1]
	l_buffer[num][layer].color_min.b = b;	
    2986:	709f      	strb	r7, [r3, #2]
	l_buffer[num][layer].color_mid.r = r;
    2988:	70df      	strb	r7, [r3, #3]
	l_buffer[num][layer].color_mid.g = g;
    298a:	711f      	strb	r7, [r3, #4]
	l_buffer[num][layer].color_mid.b = b;	
    298c:	2260      	movs	r2, #96	; 0x60
    298e:	715a      	strb	r2, [r3, #5]
	l_buffer[num][layer].color_max.r = r;
    2990:	719f      	strb	r7, [r3, #6]
	l_buffer[num][layer].color_max.g = g;
    2992:	71df      	strb	r7, [r3, #7]
	l_buffer[num][layer].color_max.b = b;	
    2994:	22e0      	movs	r2, #224	; 0xe0
    2996:	721a      	strb	r2, [r3, #8]
		
		grid_led_set_min(0, 0, 0x00, 0x00, 0x00);	
		grid_led_set_mid(0, 0, 0x00, 0x00, 0x60);	
		grid_led_set_max(0, 0, 0x00, 0x00, 0xE0);
		
		grid_led_set_phase(0, 0, ana_avg/16/4/4);
    2998:	ea4f 3858 	mov.w	r8, r8, lsr #13
    299c:	f883 800b 	strb.w	r8, [r3, #11]
	l_buffer[num][layer].fre = val;
    29a0:	731f      	strb	r7, [r3, #12]
	l_buffer[num][layer].color_min.r = r;
    29a2:	f883 7027 	strb.w	r7, [r3, #39]	; 0x27
	l_buffer[num][layer].color_min.g = g;
    29a6:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
	l_buffer[num][layer].color_min.b = b;	
    29aa:	2230      	movs	r2, #48	; 0x30
    29ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	l_buffer[num][layer].color_mid.r = r;
    29b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	l_buffer[num][layer].color_mid.g = g;
    29b4:	f883 702b 	strb.w	r7, [r3, #43]	; 0x2b
	l_buffer[num][layer].color_mid.b = b;	
    29b8:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
	l_buffer[num][layer].color_max.r = r;
    29bc:	f883 702d 	strb.w	r7, [r3, #45]	; 0x2d
	l_buffer[num][layer].color_max.g = g;
    29c0:	f883 702e 	strb.w	r7, [r3, #46]	; 0x2e
	l_buffer[num][layer].color_max.b = b;	
    29c4:	f883 702f 	strb.w	r7, [r3, #47]	; 0x2f
	l_buffer[num][layer].fre = val;
    29c8:	2204      	movs	r2, #4
    29ca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		grid_led_set_mid(1, 1, 0x30, 0x00, 0x00);	
		grid_led_set_max(1, 1, 0x00, 0x00, 0x00);
		
		grid_led_set_frequency(1, 1, 4);
				
		grid_led_tick();
    29ce:	4b56      	ldr	r3, [pc, #344]	; (2b28 <main+0x244>)
    29d0:	4798      	blx	r3
		
		// RENDER ALL OF THE LEDs
		grid_led_render_all();
    29d2:	4b56      	ldr	r3, [pc, #344]	; (2b2c <main+0x248>)
    29d4:	4798      	blx	r3
			
		// SEND DATA TO LEDs 		
		dma_spi_done = 0;
    29d6:	f8cb 7004 	str.w	r7, [fp, #4]
		spi_m_dma_enable(&GRID_LED);
    29da:	4842      	ldr	r0, [pc, #264]	; (2ae4 <main+0x200>)
    29dc:	4b54      	ldr	r3, [pc, #336]	; (2b30 <main+0x24c>)
    29de:	4798      	blx	r3
		
		io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    29e0:	f89b 200c 	ldrb.w	r2, [fp, #12]
    29e4:	f8db 1008 	ldr.w	r1, [fp, #8]
    29e8:	9821      	ldr	r0, [sp, #132]	; 0x84
    29ea:	4b52      	ldr	r3, [pc, #328]	; (2b34 <main+0x250>)
    29ec:	4798      	blx	r3
		
 		while (dma_spi_done == 0)
    29ee:	f8db 3004 	ldr.w	r3, [fp, #4]
    29f2:	2b00      	cmp	r3, #0
    29f4:	d0fb      	beq.n	29ee <main+0x10a>
		
		
		
		// PREPARE DEBUG CONSOLE DATA 
		char str[26];
		sprintf(str, "ADC: %5d %5d %5d\n", (ana_best/ana_valid/ANA_DIV), (ana_max-ana_min), adcresult);
    29f6:	fbb6 f2f9 	udiv	r2, r6, r9
    29fa:	9400      	str	r4, [sp, #0]
    29fc:	462b      	mov	r3, r5
    29fe:	0892      	lsrs	r2, r2, #2
    2a00:	494d      	ldr	r1, [pc, #308]	; (2b38 <main+0x254>)
    2a02:	a808      	add	r0, sp, #32
    2a04:	4c4d      	ldr	r4, [pc, #308]	; (2b3c <main+0x258>)
    2a06:	47a0      	blx	r4

		//USART
		io_write(io, str, 26);
    2a08:	221a      	movs	r2, #26
    2a0a:	a908      	add	r1, sp, #32
    2a0c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    2a0e:	4b49      	ldr	r3, [pc, #292]	; (2b34 <main+0x250>)
    2a10:	4798      	blx	r3
    2a12:	4b38      	ldr	r3, [pc, #224]	; (2af4 <main+0x210>)
    2a14:	9a07      	ldr	r2, [sp, #28]
    2a16:	61da      	str	r2, [r3, #28]
    2a18:	f10d 073a 	add.w	r7, sp, #58	; 0x3a
    2a1c:	4639      	mov	r1, r7
		for(uint32_t i = 0; i<BSIZE; i++){
    2a1e:	2200      	movs	r2, #0
		uint32_t ana_sum=0;
    2a20:	4690      	mov	r8, r2
		uint16_t ana_max=0;
    2a22:	4614      	mov	r4, r2
		uint16_t ana_min=-1;
    2a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2a28:	9d02      	ldr	r5, [sp, #8]
    2a2a:	9e03      	ldr	r6, [sp, #12]
    2a2c:	4618      	mov	r0, r3
			if (buffer[i]<ana_min){
    2a2e:	f831 3f02 	ldrh.w	r3, [r1, #2]!
    2a32:	4283      	cmp	r3, r0
				ana_min = buffer[i];
    2a34:	bf3c      	itt	cc
    2a36:	4618      	movcc	r0, r3
			if (buffer[i]<ana_min){
    2a38:	4615      	movcc	r5, r2
			if (buffer[i]>ana_max){
    2a3a:	429c      	cmp	r4, r3
				ana_max = buffer[i];
    2a3c:	bf3c      	itt	cc
    2a3e:	461c      	movcc	r4, r3
			if (buffer[i]>ana_max){
    2a40:	4616      	movcc	r6, r2
			ana_sum += buffer[i];
    2a42:	4498      	add	r8, r3
		for(uint32_t i = 0; i<BSIZE; i++){
    2a44:	3201      	adds	r2, #1
    2a46:	2a20      	cmp	r2, #32
    2a48:	d1f1      	bne.n	2a2e <main+0x14a>
    2a4a:	9502      	str	r5, [sp, #8]
    2a4c:	9603      	str	r6, [sp, #12]
    2a4e:	9005      	str	r0, [sp, #20]
    2a50:	9406      	str	r4, [sp, #24]
		ana_avg = ana_sum/BSIZE;
    2a52:	ea4f 1358 	mov.w	r3, r8, lsr #5
    2a56:	9304      	str	r3, [sp, #16]
    2a58:	2540      	movs	r5, #64	; 0x40
		uint32_t quicksum = 0;
    2a5a:	2600      	movs	r6, #0
			adc_async_start_conversion(&ADC_1);
    2a5c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2b0c <main+0x228>
    2a60:	4634      	mov	r4, r6
    2a62:	46ba      	mov	sl, r7
			conversion_ready = 0;
    2a64:	f8cb 4000 	str.w	r4, [fp]
			adc_async_start_conversion(&ADC_1);
    2a68:	4824      	ldr	r0, [pc, #144]	; (2afc <main+0x218>)
    2a6a:	47c8      	blx	r9
			while(conversion_ready==0){}	
    2a6c:	f8db 3000 	ldr.w	r3, [fp]
    2a70:	2b00      	cmp	r3, #0
    2a72:	d0fb      	beq.n	2a6c <main+0x188>
			adc_async_read_channel(&ADC_1, 0, adc_result_buffer, 2);
    2a74:	2302      	movs	r3, #2
    2a76:	aa20      	add	r2, sp, #128	; 0x80
    2a78:	2100      	movs	r1, #0
    2a7a:	4820      	ldr	r0, [pc, #128]	; (2afc <main+0x218>)
    2a7c:	4f30      	ldr	r7, [pc, #192]	; (2b40 <main+0x25c>)
    2a7e:	47b8      	blx	r7
			adcresult = 256*adc_result_buffer[1] + adc_result_buffer[0];
    2a80:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
    2a84:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
    2a88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			quicksum += adcresult;			
    2a8c:	441e      	add	r6, r3
    2a8e:	3d01      	subs	r5, #1
    2a90:	b2ad      	uxth	r5, r5
		for (uint16_t i=0; i<64; i++){
    2a92:	2d00      	cmp	r5, #0
    2a94:	d1e6      	bne.n	2a64 <main+0x180>
    2a96:	4657      	mov	r7, sl
    2a98:	461c      	mov	r4, r3
		uint16_t someInt = quicksum;
    2a9a:	f3c6 168f 	ubfx	r6, r6, #6, #16
		if (someInt>ana_avg){
    2a9e:	9b04      	ldr	r3, [sp, #16]
    2aa0:	42b3      	cmp	r3, r6
			buffer[bufferMinPtr] = someInt;
    2aa2:	aa22      	add	r2, sp, #136	; 0x88
    2aa4:	bf34      	ite	cc
    2aa6:	9b02      	ldrcc	r3, [sp, #8]
			buffer[bufferMaxPtr] = someInt;
    2aa8:	9b03      	ldrcs	r3, [sp, #12]
    2aaa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    2aae:	f823 6c4c 	strh.w	r6, [r3, #-76]
    2ab2:	4b10      	ldr	r3, [pc, #64]	; (2af4 <main+0x210>)
    2ab4:	2220      	movs	r2, #32
    2ab6:	61da      	str	r2, [r3, #28]
			if ((ana_min+(ana_max-ana_min)/5-1) <buffer[i] && buffer[i] <(ana_max-(ana_max-ana_min)/5)+1){
    2ab8:	9906      	ldr	r1, [sp, #24]
    2aba:	9e05      	ldr	r6, [sp, #20]
    2abc:	1b8d      	subs	r5, r1, r6
    2abe:	4821      	ldr	r0, [pc, #132]	; (2b44 <main+0x260>)
    2ac0:	fb80 3005 	smull	r3, r0, r0, r5
    2ac4:	1040      	asrs	r0, r0, #1
    2ac6:	17eb      	asrs	r3, r5, #31
    2ac8:	1ac2      	subs	r2, r0, r3
    2aca:	4432      	add	r2, r6
    2acc:	3a01      	subs	r2, #1
    2ace:	1a18      	subs	r0, r3, r0
    2ad0:	4408      	add	r0, r1
    2ad2:	3001      	adds	r0, #1
    2ad4:	f10d 017a 	add.w	r1, sp, #122	; 0x7a
		uint32_t ana_valid=0;
    2ad8:	f04f 0900 	mov.w	r9, #0
		uint32_t ana_best=0;
    2adc:	464e      	mov	r6, r9
    2ade:	e73b      	b.n	2958 <main+0x74>
    2ae0:	000002d1 	.word	0x000002d1
    2ae4:	20000a50 	.word	0x20000a50
    2ae8:	00000e4d 	.word	0x00000e4d
    2aec:	000026a9 	.word	0x000026a9
    2af0:	00000e1d 	.word	0x00000e1d
    2af4:	41008000 	.word	0x41008000
    2af8:	20000f3c 	.word	0x20000f3c
    2afc:	20000a94 	.word	0x20000a94
    2b00:	0000269d 	.word	0x0000269d
    2b04:	00000a35 	.word	0x00000a35
    2b08:	000009f5 	.word	0x000009f5
    2b0c:	00000b95 	.word	0x00000b95
    2b10:	200009d4 	.word	0x200009d4
    2b14:	000010e5 	.word	0x000010e5
    2b18:	000010b9 	.word	0x000010b9
    2b1c:	000026f1 	.word	0x000026f1
    2b20:	00000bed 	.word	0x00000bed
    2b24:	20000ed4 	.word	0x20000ed4
    2b28:	000027f1 	.word	0x000027f1
    2b2c:	000028c5 	.word	0x000028c5
    2b30:	00000df5 	.word	0x00000df5
    2b34:	00000d11 	.word	0x00000d11
    2b38:	000036e4 	.word	0x000036e4
    2b3c:	00002d1d 	.word	0x00002d1d
    2b40:	00000ab5 	.word	0x00000ab5
    2b44:	66666667 	.word	0x66666667
    2b48:	2000055c 	.word	0x2000055c

00002b4c <__libc_init_array>:
    2b4c:	b570      	push	{r4, r5, r6, lr}
    2b4e:	4e0d      	ldr	r6, [pc, #52]	; (2b84 <__libc_init_array+0x38>)
    2b50:	4c0d      	ldr	r4, [pc, #52]	; (2b88 <__libc_init_array+0x3c>)
    2b52:	1ba4      	subs	r4, r4, r6
    2b54:	10a4      	asrs	r4, r4, #2
    2b56:	2500      	movs	r5, #0
    2b58:	42a5      	cmp	r5, r4
    2b5a:	d109      	bne.n	2b70 <__libc_init_array+0x24>
    2b5c:	4e0b      	ldr	r6, [pc, #44]	; (2b8c <__libc_init_array+0x40>)
    2b5e:	4c0c      	ldr	r4, [pc, #48]	; (2b90 <__libc_init_array+0x44>)
    2b60:	f000 fe14 	bl	378c <_init>
    2b64:	1ba4      	subs	r4, r4, r6
    2b66:	10a4      	asrs	r4, r4, #2
    2b68:	2500      	movs	r5, #0
    2b6a:	42a5      	cmp	r5, r4
    2b6c:	d105      	bne.n	2b7a <__libc_init_array+0x2e>
    2b6e:	bd70      	pop	{r4, r5, r6, pc}
    2b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2b74:	4798      	blx	r3
    2b76:	3501      	adds	r5, #1
    2b78:	e7ee      	b.n	2b58 <__libc_init_array+0xc>
    2b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2b7e:	4798      	blx	r3
    2b80:	3501      	adds	r5, #1
    2b82:	e7f2      	b.n	2b6a <__libc_init_array+0x1e>
    2b84:	00003798 	.word	0x00003798
    2b88:	00003798 	.word	0x00003798
    2b8c:	00003798 	.word	0x00003798
    2b90:	0000379c 	.word	0x0000379c

00002b94 <malloc>:
    2b94:	4b02      	ldr	r3, [pc, #8]	; (2ba0 <malloc+0xc>)
    2b96:	4601      	mov	r1, r0
    2b98:	6818      	ldr	r0, [r3, #0]
    2b9a:	f000 b851 	b.w	2c40 <_malloc_r>
    2b9e:	bf00      	nop
    2ba0:	20000304 	.word	0x20000304

00002ba4 <_free_r>:
    2ba4:	b538      	push	{r3, r4, r5, lr}
    2ba6:	4605      	mov	r5, r0
    2ba8:	2900      	cmp	r1, #0
    2baa:	d045      	beq.n	2c38 <_free_r+0x94>
    2bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2bb0:	1f0c      	subs	r4, r1, #4
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	bfb8      	it	lt
    2bb6:	18e4      	addlt	r4, r4, r3
    2bb8:	f000 f8d4 	bl	2d64 <__malloc_lock>
    2bbc:	4a1f      	ldr	r2, [pc, #124]	; (2c3c <_free_r+0x98>)
    2bbe:	6813      	ldr	r3, [r2, #0]
    2bc0:	4610      	mov	r0, r2
    2bc2:	b933      	cbnz	r3, 2bd2 <_free_r+0x2e>
    2bc4:	6063      	str	r3, [r4, #4]
    2bc6:	6014      	str	r4, [r2, #0]
    2bc8:	4628      	mov	r0, r5
    2bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2bce:	f000 b8ca 	b.w	2d66 <__malloc_unlock>
    2bd2:	42a3      	cmp	r3, r4
    2bd4:	d90c      	bls.n	2bf0 <_free_r+0x4c>
    2bd6:	6821      	ldr	r1, [r4, #0]
    2bd8:	1862      	adds	r2, r4, r1
    2bda:	4293      	cmp	r3, r2
    2bdc:	bf04      	itt	eq
    2bde:	681a      	ldreq	r2, [r3, #0]
    2be0:	685b      	ldreq	r3, [r3, #4]
    2be2:	6063      	str	r3, [r4, #4]
    2be4:	bf04      	itt	eq
    2be6:	1852      	addeq	r2, r2, r1
    2be8:	6022      	streq	r2, [r4, #0]
    2bea:	6004      	str	r4, [r0, #0]
    2bec:	e7ec      	b.n	2bc8 <_free_r+0x24>
    2bee:	4613      	mov	r3, r2
    2bf0:	685a      	ldr	r2, [r3, #4]
    2bf2:	b10a      	cbz	r2, 2bf8 <_free_r+0x54>
    2bf4:	42a2      	cmp	r2, r4
    2bf6:	d9fa      	bls.n	2bee <_free_r+0x4a>
    2bf8:	6819      	ldr	r1, [r3, #0]
    2bfa:	1858      	adds	r0, r3, r1
    2bfc:	42a0      	cmp	r0, r4
    2bfe:	d10b      	bne.n	2c18 <_free_r+0x74>
    2c00:	6820      	ldr	r0, [r4, #0]
    2c02:	4401      	add	r1, r0
    2c04:	1858      	adds	r0, r3, r1
    2c06:	4282      	cmp	r2, r0
    2c08:	6019      	str	r1, [r3, #0]
    2c0a:	d1dd      	bne.n	2bc8 <_free_r+0x24>
    2c0c:	6810      	ldr	r0, [r2, #0]
    2c0e:	6852      	ldr	r2, [r2, #4]
    2c10:	605a      	str	r2, [r3, #4]
    2c12:	4401      	add	r1, r0
    2c14:	6019      	str	r1, [r3, #0]
    2c16:	e7d7      	b.n	2bc8 <_free_r+0x24>
    2c18:	d902      	bls.n	2c20 <_free_r+0x7c>
    2c1a:	230c      	movs	r3, #12
    2c1c:	602b      	str	r3, [r5, #0]
    2c1e:	e7d3      	b.n	2bc8 <_free_r+0x24>
    2c20:	6820      	ldr	r0, [r4, #0]
    2c22:	1821      	adds	r1, r4, r0
    2c24:	428a      	cmp	r2, r1
    2c26:	bf04      	itt	eq
    2c28:	6811      	ldreq	r1, [r2, #0]
    2c2a:	6852      	ldreq	r2, [r2, #4]
    2c2c:	6062      	str	r2, [r4, #4]
    2c2e:	bf04      	itt	eq
    2c30:	1809      	addeq	r1, r1, r0
    2c32:	6021      	streq	r1, [r4, #0]
    2c34:	605c      	str	r4, [r3, #4]
    2c36:	e7c7      	b.n	2bc8 <_free_r+0x24>
    2c38:	bd38      	pop	{r3, r4, r5, pc}
    2c3a:	bf00      	nop
    2c3c:	20000974 	.word	0x20000974

00002c40 <_malloc_r>:
    2c40:	b570      	push	{r4, r5, r6, lr}
    2c42:	1ccd      	adds	r5, r1, #3
    2c44:	f025 0503 	bic.w	r5, r5, #3
    2c48:	3508      	adds	r5, #8
    2c4a:	2d0c      	cmp	r5, #12
    2c4c:	bf38      	it	cc
    2c4e:	250c      	movcc	r5, #12
    2c50:	2d00      	cmp	r5, #0
    2c52:	4606      	mov	r6, r0
    2c54:	db01      	blt.n	2c5a <_malloc_r+0x1a>
    2c56:	42a9      	cmp	r1, r5
    2c58:	d903      	bls.n	2c62 <_malloc_r+0x22>
    2c5a:	230c      	movs	r3, #12
    2c5c:	6033      	str	r3, [r6, #0]
    2c5e:	2000      	movs	r0, #0
    2c60:	bd70      	pop	{r4, r5, r6, pc}
    2c62:	f000 f87f 	bl	2d64 <__malloc_lock>
    2c66:	4a23      	ldr	r2, [pc, #140]	; (2cf4 <_malloc_r+0xb4>)
    2c68:	6814      	ldr	r4, [r2, #0]
    2c6a:	4621      	mov	r1, r4
    2c6c:	b991      	cbnz	r1, 2c94 <_malloc_r+0x54>
    2c6e:	4c22      	ldr	r4, [pc, #136]	; (2cf8 <_malloc_r+0xb8>)
    2c70:	6823      	ldr	r3, [r4, #0]
    2c72:	b91b      	cbnz	r3, 2c7c <_malloc_r+0x3c>
    2c74:	4630      	mov	r0, r6
    2c76:	f000 f841 	bl	2cfc <_sbrk_r>
    2c7a:	6020      	str	r0, [r4, #0]
    2c7c:	4629      	mov	r1, r5
    2c7e:	4630      	mov	r0, r6
    2c80:	f000 f83c 	bl	2cfc <_sbrk_r>
    2c84:	1c43      	adds	r3, r0, #1
    2c86:	d126      	bne.n	2cd6 <_malloc_r+0x96>
    2c88:	230c      	movs	r3, #12
    2c8a:	6033      	str	r3, [r6, #0]
    2c8c:	4630      	mov	r0, r6
    2c8e:	f000 f86a 	bl	2d66 <__malloc_unlock>
    2c92:	e7e4      	b.n	2c5e <_malloc_r+0x1e>
    2c94:	680b      	ldr	r3, [r1, #0]
    2c96:	1b5b      	subs	r3, r3, r5
    2c98:	d41a      	bmi.n	2cd0 <_malloc_r+0x90>
    2c9a:	2b0b      	cmp	r3, #11
    2c9c:	d90f      	bls.n	2cbe <_malloc_r+0x7e>
    2c9e:	600b      	str	r3, [r1, #0]
    2ca0:	50cd      	str	r5, [r1, r3]
    2ca2:	18cc      	adds	r4, r1, r3
    2ca4:	4630      	mov	r0, r6
    2ca6:	f000 f85e 	bl	2d66 <__malloc_unlock>
    2caa:	f104 000b 	add.w	r0, r4, #11
    2cae:	1d23      	adds	r3, r4, #4
    2cb0:	f020 0007 	bic.w	r0, r0, #7
    2cb4:	1ac3      	subs	r3, r0, r3
    2cb6:	d01b      	beq.n	2cf0 <_malloc_r+0xb0>
    2cb8:	425a      	negs	r2, r3
    2cba:	50e2      	str	r2, [r4, r3]
    2cbc:	bd70      	pop	{r4, r5, r6, pc}
    2cbe:	428c      	cmp	r4, r1
    2cc0:	bf0d      	iteet	eq
    2cc2:	6863      	ldreq	r3, [r4, #4]
    2cc4:	684b      	ldrne	r3, [r1, #4]
    2cc6:	6063      	strne	r3, [r4, #4]
    2cc8:	6013      	streq	r3, [r2, #0]
    2cca:	bf18      	it	ne
    2ccc:	460c      	movne	r4, r1
    2cce:	e7e9      	b.n	2ca4 <_malloc_r+0x64>
    2cd0:	460c      	mov	r4, r1
    2cd2:	6849      	ldr	r1, [r1, #4]
    2cd4:	e7ca      	b.n	2c6c <_malloc_r+0x2c>
    2cd6:	1cc4      	adds	r4, r0, #3
    2cd8:	f024 0403 	bic.w	r4, r4, #3
    2cdc:	42a0      	cmp	r0, r4
    2cde:	d005      	beq.n	2cec <_malloc_r+0xac>
    2ce0:	1a21      	subs	r1, r4, r0
    2ce2:	4630      	mov	r0, r6
    2ce4:	f000 f80a 	bl	2cfc <_sbrk_r>
    2ce8:	3001      	adds	r0, #1
    2cea:	d0cd      	beq.n	2c88 <_malloc_r+0x48>
    2cec:	6025      	str	r5, [r4, #0]
    2cee:	e7d9      	b.n	2ca4 <_malloc_r+0x64>
    2cf0:	bd70      	pop	{r4, r5, r6, pc}
    2cf2:	bf00      	nop
    2cf4:	20000974 	.word	0x20000974
    2cf8:	20000978 	.word	0x20000978

00002cfc <_sbrk_r>:
    2cfc:	b538      	push	{r3, r4, r5, lr}
    2cfe:	4c06      	ldr	r4, [pc, #24]	; (2d18 <_sbrk_r+0x1c>)
    2d00:	2300      	movs	r3, #0
    2d02:	4605      	mov	r5, r0
    2d04:	4608      	mov	r0, r1
    2d06:	6023      	str	r3, [r4, #0]
    2d08:	f7fe fa80 	bl	120c <_sbrk>
    2d0c:	1c43      	adds	r3, r0, #1
    2d0e:	d102      	bne.n	2d16 <_sbrk_r+0x1a>
    2d10:	6823      	ldr	r3, [r4, #0]
    2d12:	b103      	cbz	r3, 2d16 <_sbrk_r+0x1a>
    2d14:	602b      	str	r3, [r5, #0]
    2d16:	bd38      	pop	{r3, r4, r5, pc}
    2d18:	20000f40 	.word	0x20000f40

00002d1c <siprintf>:
    2d1c:	b40e      	push	{r1, r2, r3}
    2d1e:	b500      	push	{lr}
    2d20:	b09c      	sub	sp, #112	; 0x70
    2d22:	f44f 7102 	mov.w	r1, #520	; 0x208
    2d26:	ab1d      	add	r3, sp, #116	; 0x74
    2d28:	f8ad 1014 	strh.w	r1, [sp, #20]
    2d2c:	9002      	str	r0, [sp, #8]
    2d2e:	9006      	str	r0, [sp, #24]
    2d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2d34:	480a      	ldr	r0, [pc, #40]	; (2d60 <siprintf+0x44>)
    2d36:	9104      	str	r1, [sp, #16]
    2d38:	9107      	str	r1, [sp, #28]
    2d3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2d3e:	f853 2b04 	ldr.w	r2, [r3], #4
    2d42:	f8ad 1016 	strh.w	r1, [sp, #22]
    2d46:	6800      	ldr	r0, [r0, #0]
    2d48:	9301      	str	r3, [sp, #4]
    2d4a:	a902      	add	r1, sp, #8
    2d4c:	f000 f868 	bl	2e20 <_svfiprintf_r>
    2d50:	9b02      	ldr	r3, [sp, #8]
    2d52:	2200      	movs	r2, #0
    2d54:	701a      	strb	r2, [r3, #0]
    2d56:	b01c      	add	sp, #112	; 0x70
    2d58:	f85d eb04 	ldr.w	lr, [sp], #4
    2d5c:	b003      	add	sp, #12
    2d5e:	4770      	bx	lr
    2d60:	20000304 	.word	0x20000304

00002d64 <__malloc_lock>:
    2d64:	4770      	bx	lr

00002d66 <__malloc_unlock>:
    2d66:	4770      	bx	lr

00002d68 <__ssputs_r>:
    2d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d6c:	688e      	ldr	r6, [r1, #8]
    2d6e:	429e      	cmp	r6, r3
    2d70:	4682      	mov	sl, r0
    2d72:	460c      	mov	r4, r1
    2d74:	4691      	mov	r9, r2
    2d76:	4698      	mov	r8, r3
    2d78:	d835      	bhi.n	2de6 <__ssputs_r+0x7e>
    2d7a:	898a      	ldrh	r2, [r1, #12]
    2d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
    2d80:	d031      	beq.n	2de6 <__ssputs_r+0x7e>
    2d82:	6825      	ldr	r5, [r4, #0]
    2d84:	6909      	ldr	r1, [r1, #16]
    2d86:	1a6f      	subs	r7, r5, r1
    2d88:	6965      	ldr	r5, [r4, #20]
    2d8a:	2302      	movs	r3, #2
    2d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2d90:	fb95 f5f3 	sdiv	r5, r5, r3
    2d94:	f108 0301 	add.w	r3, r8, #1
    2d98:	443b      	add	r3, r7
    2d9a:	429d      	cmp	r5, r3
    2d9c:	bf38      	it	cc
    2d9e:	461d      	movcc	r5, r3
    2da0:	0553      	lsls	r3, r2, #21
    2da2:	d531      	bpl.n	2e08 <__ssputs_r+0xa0>
    2da4:	4629      	mov	r1, r5
    2da6:	f7ff ff4b 	bl	2c40 <_malloc_r>
    2daa:	4606      	mov	r6, r0
    2dac:	b950      	cbnz	r0, 2dc4 <__ssputs_r+0x5c>
    2dae:	230c      	movs	r3, #12
    2db0:	f8ca 3000 	str.w	r3, [sl]
    2db4:	89a3      	ldrh	r3, [r4, #12]
    2db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2dba:	81a3      	strh	r3, [r4, #12]
    2dbc:	f04f 30ff 	mov.w	r0, #4294967295
    2dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dc4:	463a      	mov	r2, r7
    2dc6:	6921      	ldr	r1, [r4, #16]
    2dc8:	f000 fb0a 	bl	33e0 <memcpy>
    2dcc:	89a3      	ldrh	r3, [r4, #12]
    2dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    2dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2dd6:	81a3      	strh	r3, [r4, #12]
    2dd8:	6126      	str	r6, [r4, #16]
    2dda:	6165      	str	r5, [r4, #20]
    2ddc:	443e      	add	r6, r7
    2dde:	1bed      	subs	r5, r5, r7
    2de0:	6026      	str	r6, [r4, #0]
    2de2:	60a5      	str	r5, [r4, #8]
    2de4:	4646      	mov	r6, r8
    2de6:	4546      	cmp	r6, r8
    2de8:	bf28      	it	cs
    2dea:	4646      	movcs	r6, r8
    2dec:	4632      	mov	r2, r6
    2dee:	4649      	mov	r1, r9
    2df0:	6820      	ldr	r0, [r4, #0]
    2df2:	f000 fb00 	bl	33f6 <memmove>
    2df6:	68a3      	ldr	r3, [r4, #8]
    2df8:	1b9b      	subs	r3, r3, r6
    2dfa:	60a3      	str	r3, [r4, #8]
    2dfc:	6823      	ldr	r3, [r4, #0]
    2dfe:	441e      	add	r6, r3
    2e00:	6026      	str	r6, [r4, #0]
    2e02:	2000      	movs	r0, #0
    2e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e08:	462a      	mov	r2, r5
    2e0a:	f000 fb0e 	bl	342a <_realloc_r>
    2e0e:	4606      	mov	r6, r0
    2e10:	2800      	cmp	r0, #0
    2e12:	d1e1      	bne.n	2dd8 <__ssputs_r+0x70>
    2e14:	6921      	ldr	r1, [r4, #16]
    2e16:	4650      	mov	r0, sl
    2e18:	f7ff fec4 	bl	2ba4 <_free_r>
    2e1c:	e7c7      	b.n	2dae <__ssputs_r+0x46>
	...

00002e20 <_svfiprintf_r>:
    2e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e24:	b09d      	sub	sp, #116	; 0x74
    2e26:	4680      	mov	r8, r0
    2e28:	9303      	str	r3, [sp, #12]
    2e2a:	898b      	ldrh	r3, [r1, #12]
    2e2c:	061c      	lsls	r4, r3, #24
    2e2e:	460d      	mov	r5, r1
    2e30:	4616      	mov	r6, r2
    2e32:	d50f      	bpl.n	2e54 <_svfiprintf_r+0x34>
    2e34:	690b      	ldr	r3, [r1, #16]
    2e36:	b96b      	cbnz	r3, 2e54 <_svfiprintf_r+0x34>
    2e38:	2140      	movs	r1, #64	; 0x40
    2e3a:	f7ff ff01 	bl	2c40 <_malloc_r>
    2e3e:	6028      	str	r0, [r5, #0]
    2e40:	6128      	str	r0, [r5, #16]
    2e42:	b928      	cbnz	r0, 2e50 <_svfiprintf_r+0x30>
    2e44:	230c      	movs	r3, #12
    2e46:	f8c8 3000 	str.w	r3, [r8]
    2e4a:	f04f 30ff 	mov.w	r0, #4294967295
    2e4e:	e0c5      	b.n	2fdc <_svfiprintf_r+0x1bc>
    2e50:	2340      	movs	r3, #64	; 0x40
    2e52:	616b      	str	r3, [r5, #20]
    2e54:	2300      	movs	r3, #0
    2e56:	9309      	str	r3, [sp, #36]	; 0x24
    2e58:	2320      	movs	r3, #32
    2e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2e5e:	2330      	movs	r3, #48	; 0x30
    2e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2e64:	f04f 0b01 	mov.w	fp, #1
    2e68:	4637      	mov	r7, r6
    2e6a:	463c      	mov	r4, r7
    2e6c:	f814 3b01 	ldrb.w	r3, [r4], #1
    2e70:	2b00      	cmp	r3, #0
    2e72:	d13c      	bne.n	2eee <_svfiprintf_r+0xce>
    2e74:	ebb7 0a06 	subs.w	sl, r7, r6
    2e78:	d00b      	beq.n	2e92 <_svfiprintf_r+0x72>
    2e7a:	4653      	mov	r3, sl
    2e7c:	4632      	mov	r2, r6
    2e7e:	4629      	mov	r1, r5
    2e80:	4640      	mov	r0, r8
    2e82:	f7ff ff71 	bl	2d68 <__ssputs_r>
    2e86:	3001      	adds	r0, #1
    2e88:	f000 80a3 	beq.w	2fd2 <_svfiprintf_r+0x1b2>
    2e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e8e:	4453      	add	r3, sl
    2e90:	9309      	str	r3, [sp, #36]	; 0x24
    2e92:	783b      	ldrb	r3, [r7, #0]
    2e94:	2b00      	cmp	r3, #0
    2e96:	f000 809c 	beq.w	2fd2 <_svfiprintf_r+0x1b2>
    2e9a:	2300      	movs	r3, #0
    2e9c:	f04f 32ff 	mov.w	r2, #4294967295
    2ea0:	9304      	str	r3, [sp, #16]
    2ea2:	9307      	str	r3, [sp, #28]
    2ea4:	9205      	str	r2, [sp, #20]
    2ea6:	9306      	str	r3, [sp, #24]
    2ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2eac:	931a      	str	r3, [sp, #104]	; 0x68
    2eae:	2205      	movs	r2, #5
    2eb0:	7821      	ldrb	r1, [r4, #0]
    2eb2:	4850      	ldr	r0, [pc, #320]	; (2ff4 <_svfiprintf_r+0x1d4>)
    2eb4:	f000 fa44 	bl	3340 <memchr>
    2eb8:	1c67      	adds	r7, r4, #1
    2eba:	9b04      	ldr	r3, [sp, #16]
    2ebc:	b9d8      	cbnz	r0, 2ef6 <_svfiprintf_r+0xd6>
    2ebe:	06d9      	lsls	r1, r3, #27
    2ec0:	bf44      	itt	mi
    2ec2:	2220      	movmi	r2, #32
    2ec4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2ec8:	071a      	lsls	r2, r3, #28
    2eca:	bf44      	itt	mi
    2ecc:	222b      	movmi	r2, #43	; 0x2b
    2ece:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2ed2:	7822      	ldrb	r2, [r4, #0]
    2ed4:	2a2a      	cmp	r2, #42	; 0x2a
    2ed6:	d016      	beq.n	2f06 <_svfiprintf_r+0xe6>
    2ed8:	9a07      	ldr	r2, [sp, #28]
    2eda:	2100      	movs	r1, #0
    2edc:	200a      	movs	r0, #10
    2ede:	4627      	mov	r7, r4
    2ee0:	3401      	adds	r4, #1
    2ee2:	783b      	ldrb	r3, [r7, #0]
    2ee4:	3b30      	subs	r3, #48	; 0x30
    2ee6:	2b09      	cmp	r3, #9
    2ee8:	d951      	bls.n	2f8e <_svfiprintf_r+0x16e>
    2eea:	b1c9      	cbz	r1, 2f20 <_svfiprintf_r+0x100>
    2eec:	e011      	b.n	2f12 <_svfiprintf_r+0xf2>
    2eee:	2b25      	cmp	r3, #37	; 0x25
    2ef0:	d0c0      	beq.n	2e74 <_svfiprintf_r+0x54>
    2ef2:	4627      	mov	r7, r4
    2ef4:	e7b9      	b.n	2e6a <_svfiprintf_r+0x4a>
    2ef6:	4a3f      	ldr	r2, [pc, #252]	; (2ff4 <_svfiprintf_r+0x1d4>)
    2ef8:	1a80      	subs	r0, r0, r2
    2efa:	fa0b f000 	lsl.w	r0, fp, r0
    2efe:	4318      	orrs	r0, r3
    2f00:	9004      	str	r0, [sp, #16]
    2f02:	463c      	mov	r4, r7
    2f04:	e7d3      	b.n	2eae <_svfiprintf_r+0x8e>
    2f06:	9a03      	ldr	r2, [sp, #12]
    2f08:	1d11      	adds	r1, r2, #4
    2f0a:	6812      	ldr	r2, [r2, #0]
    2f0c:	9103      	str	r1, [sp, #12]
    2f0e:	2a00      	cmp	r2, #0
    2f10:	db01      	blt.n	2f16 <_svfiprintf_r+0xf6>
    2f12:	9207      	str	r2, [sp, #28]
    2f14:	e004      	b.n	2f20 <_svfiprintf_r+0x100>
    2f16:	4252      	negs	r2, r2
    2f18:	f043 0302 	orr.w	r3, r3, #2
    2f1c:	9207      	str	r2, [sp, #28]
    2f1e:	9304      	str	r3, [sp, #16]
    2f20:	783b      	ldrb	r3, [r7, #0]
    2f22:	2b2e      	cmp	r3, #46	; 0x2e
    2f24:	d10e      	bne.n	2f44 <_svfiprintf_r+0x124>
    2f26:	787b      	ldrb	r3, [r7, #1]
    2f28:	2b2a      	cmp	r3, #42	; 0x2a
    2f2a:	f107 0101 	add.w	r1, r7, #1
    2f2e:	d132      	bne.n	2f96 <_svfiprintf_r+0x176>
    2f30:	9b03      	ldr	r3, [sp, #12]
    2f32:	1d1a      	adds	r2, r3, #4
    2f34:	681b      	ldr	r3, [r3, #0]
    2f36:	9203      	str	r2, [sp, #12]
    2f38:	2b00      	cmp	r3, #0
    2f3a:	bfb8      	it	lt
    2f3c:	f04f 33ff 	movlt.w	r3, #4294967295
    2f40:	3702      	adds	r7, #2
    2f42:	9305      	str	r3, [sp, #20]
    2f44:	4c2c      	ldr	r4, [pc, #176]	; (2ff8 <_svfiprintf_r+0x1d8>)
    2f46:	7839      	ldrb	r1, [r7, #0]
    2f48:	2203      	movs	r2, #3
    2f4a:	4620      	mov	r0, r4
    2f4c:	f000 f9f8 	bl	3340 <memchr>
    2f50:	b138      	cbz	r0, 2f62 <_svfiprintf_r+0x142>
    2f52:	2340      	movs	r3, #64	; 0x40
    2f54:	1b00      	subs	r0, r0, r4
    2f56:	fa03 f000 	lsl.w	r0, r3, r0
    2f5a:	9b04      	ldr	r3, [sp, #16]
    2f5c:	4303      	orrs	r3, r0
    2f5e:	9304      	str	r3, [sp, #16]
    2f60:	3701      	adds	r7, #1
    2f62:	7839      	ldrb	r1, [r7, #0]
    2f64:	4825      	ldr	r0, [pc, #148]	; (2ffc <_svfiprintf_r+0x1dc>)
    2f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2f6a:	2206      	movs	r2, #6
    2f6c:	1c7e      	adds	r6, r7, #1
    2f6e:	f000 f9e7 	bl	3340 <memchr>
    2f72:	2800      	cmp	r0, #0
    2f74:	d035      	beq.n	2fe2 <_svfiprintf_r+0x1c2>
    2f76:	4b22      	ldr	r3, [pc, #136]	; (3000 <_svfiprintf_r+0x1e0>)
    2f78:	b9fb      	cbnz	r3, 2fba <_svfiprintf_r+0x19a>
    2f7a:	9b03      	ldr	r3, [sp, #12]
    2f7c:	3307      	adds	r3, #7
    2f7e:	f023 0307 	bic.w	r3, r3, #7
    2f82:	3308      	adds	r3, #8
    2f84:	9303      	str	r3, [sp, #12]
    2f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f88:	444b      	add	r3, r9
    2f8a:	9309      	str	r3, [sp, #36]	; 0x24
    2f8c:	e76c      	b.n	2e68 <_svfiprintf_r+0x48>
    2f8e:	fb00 3202 	mla	r2, r0, r2, r3
    2f92:	2101      	movs	r1, #1
    2f94:	e7a3      	b.n	2ede <_svfiprintf_r+0xbe>
    2f96:	2300      	movs	r3, #0
    2f98:	9305      	str	r3, [sp, #20]
    2f9a:	4618      	mov	r0, r3
    2f9c:	240a      	movs	r4, #10
    2f9e:	460f      	mov	r7, r1
    2fa0:	3101      	adds	r1, #1
    2fa2:	783a      	ldrb	r2, [r7, #0]
    2fa4:	3a30      	subs	r2, #48	; 0x30
    2fa6:	2a09      	cmp	r2, #9
    2fa8:	d903      	bls.n	2fb2 <_svfiprintf_r+0x192>
    2faa:	2b00      	cmp	r3, #0
    2fac:	d0ca      	beq.n	2f44 <_svfiprintf_r+0x124>
    2fae:	9005      	str	r0, [sp, #20]
    2fb0:	e7c8      	b.n	2f44 <_svfiprintf_r+0x124>
    2fb2:	fb04 2000 	mla	r0, r4, r0, r2
    2fb6:	2301      	movs	r3, #1
    2fb8:	e7f1      	b.n	2f9e <_svfiprintf_r+0x17e>
    2fba:	ab03      	add	r3, sp, #12
    2fbc:	9300      	str	r3, [sp, #0]
    2fbe:	462a      	mov	r2, r5
    2fc0:	4b10      	ldr	r3, [pc, #64]	; (3004 <_svfiprintf_r+0x1e4>)
    2fc2:	a904      	add	r1, sp, #16
    2fc4:	4640      	mov	r0, r8
    2fc6:	f3af 8000 	nop.w
    2fca:	f1b0 3fff 	cmp.w	r0, #4294967295
    2fce:	4681      	mov	r9, r0
    2fd0:	d1d9      	bne.n	2f86 <_svfiprintf_r+0x166>
    2fd2:	89ab      	ldrh	r3, [r5, #12]
    2fd4:	065b      	lsls	r3, r3, #25
    2fd6:	f53f af38 	bmi.w	2e4a <_svfiprintf_r+0x2a>
    2fda:	9809      	ldr	r0, [sp, #36]	; 0x24
    2fdc:	b01d      	add	sp, #116	; 0x74
    2fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fe2:	ab03      	add	r3, sp, #12
    2fe4:	9300      	str	r3, [sp, #0]
    2fe6:	462a      	mov	r2, r5
    2fe8:	4b06      	ldr	r3, [pc, #24]	; (3004 <_svfiprintf_r+0x1e4>)
    2fea:	a904      	add	r1, sp, #16
    2fec:	4640      	mov	r0, r8
    2fee:	f000 f881 	bl	30f4 <_printf_i>
    2ff2:	e7ea      	b.n	2fca <_svfiprintf_r+0x1aa>
    2ff4:	00003758 	.word	0x00003758
    2ff8:	0000375e 	.word	0x0000375e
    2ffc:	00003762 	.word	0x00003762
    3000:	00000000 	.word	0x00000000
    3004:	00002d69 	.word	0x00002d69

00003008 <_printf_common>:
    3008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    300c:	4691      	mov	r9, r2
    300e:	461f      	mov	r7, r3
    3010:	688a      	ldr	r2, [r1, #8]
    3012:	690b      	ldr	r3, [r1, #16]
    3014:	f8dd 8020 	ldr.w	r8, [sp, #32]
    3018:	4293      	cmp	r3, r2
    301a:	bfb8      	it	lt
    301c:	4613      	movlt	r3, r2
    301e:	f8c9 3000 	str.w	r3, [r9]
    3022:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    3026:	4606      	mov	r6, r0
    3028:	460c      	mov	r4, r1
    302a:	b112      	cbz	r2, 3032 <_printf_common+0x2a>
    302c:	3301      	adds	r3, #1
    302e:	f8c9 3000 	str.w	r3, [r9]
    3032:	6823      	ldr	r3, [r4, #0]
    3034:	0699      	lsls	r1, r3, #26
    3036:	bf42      	ittt	mi
    3038:	f8d9 3000 	ldrmi.w	r3, [r9]
    303c:	3302      	addmi	r3, #2
    303e:	f8c9 3000 	strmi.w	r3, [r9]
    3042:	6825      	ldr	r5, [r4, #0]
    3044:	f015 0506 	ands.w	r5, r5, #6
    3048:	d107      	bne.n	305a <_printf_common+0x52>
    304a:	f104 0a19 	add.w	sl, r4, #25
    304e:	68e3      	ldr	r3, [r4, #12]
    3050:	f8d9 2000 	ldr.w	r2, [r9]
    3054:	1a9b      	subs	r3, r3, r2
    3056:	429d      	cmp	r5, r3
    3058:	db29      	blt.n	30ae <_printf_common+0xa6>
    305a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    305e:	6822      	ldr	r2, [r4, #0]
    3060:	3300      	adds	r3, #0
    3062:	bf18      	it	ne
    3064:	2301      	movne	r3, #1
    3066:	0692      	lsls	r2, r2, #26
    3068:	d42e      	bmi.n	30c8 <_printf_common+0xc0>
    306a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    306e:	4639      	mov	r1, r7
    3070:	4630      	mov	r0, r6
    3072:	47c0      	blx	r8
    3074:	3001      	adds	r0, #1
    3076:	d021      	beq.n	30bc <_printf_common+0xb4>
    3078:	6823      	ldr	r3, [r4, #0]
    307a:	68e5      	ldr	r5, [r4, #12]
    307c:	f8d9 2000 	ldr.w	r2, [r9]
    3080:	f003 0306 	and.w	r3, r3, #6
    3084:	2b04      	cmp	r3, #4
    3086:	bf08      	it	eq
    3088:	1aad      	subeq	r5, r5, r2
    308a:	68a3      	ldr	r3, [r4, #8]
    308c:	6922      	ldr	r2, [r4, #16]
    308e:	bf0c      	ite	eq
    3090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3094:	2500      	movne	r5, #0
    3096:	4293      	cmp	r3, r2
    3098:	bfc4      	itt	gt
    309a:	1a9b      	subgt	r3, r3, r2
    309c:	18ed      	addgt	r5, r5, r3
    309e:	f04f 0900 	mov.w	r9, #0
    30a2:	341a      	adds	r4, #26
    30a4:	454d      	cmp	r5, r9
    30a6:	d11b      	bne.n	30e0 <_printf_common+0xd8>
    30a8:	2000      	movs	r0, #0
    30aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30ae:	2301      	movs	r3, #1
    30b0:	4652      	mov	r2, sl
    30b2:	4639      	mov	r1, r7
    30b4:	4630      	mov	r0, r6
    30b6:	47c0      	blx	r8
    30b8:	3001      	adds	r0, #1
    30ba:	d103      	bne.n	30c4 <_printf_common+0xbc>
    30bc:	f04f 30ff 	mov.w	r0, #4294967295
    30c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30c4:	3501      	adds	r5, #1
    30c6:	e7c2      	b.n	304e <_printf_common+0x46>
    30c8:	18e1      	adds	r1, r4, r3
    30ca:	1c5a      	adds	r2, r3, #1
    30cc:	2030      	movs	r0, #48	; 0x30
    30ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    30d2:	4422      	add	r2, r4
    30d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    30d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    30dc:	3302      	adds	r3, #2
    30de:	e7c4      	b.n	306a <_printf_common+0x62>
    30e0:	2301      	movs	r3, #1
    30e2:	4622      	mov	r2, r4
    30e4:	4639      	mov	r1, r7
    30e6:	4630      	mov	r0, r6
    30e8:	47c0      	blx	r8
    30ea:	3001      	adds	r0, #1
    30ec:	d0e6      	beq.n	30bc <_printf_common+0xb4>
    30ee:	f109 0901 	add.w	r9, r9, #1
    30f2:	e7d7      	b.n	30a4 <_printf_common+0x9c>

000030f4 <_printf_i>:
    30f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    30f8:	4617      	mov	r7, r2
    30fa:	7e0a      	ldrb	r2, [r1, #24]
    30fc:	b085      	sub	sp, #20
    30fe:	2a6e      	cmp	r2, #110	; 0x6e
    3100:	4698      	mov	r8, r3
    3102:	4606      	mov	r6, r0
    3104:	460c      	mov	r4, r1
    3106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3108:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    310c:	f000 80bc 	beq.w	3288 <_printf_i+0x194>
    3110:	d81a      	bhi.n	3148 <_printf_i+0x54>
    3112:	2a63      	cmp	r2, #99	; 0x63
    3114:	d02e      	beq.n	3174 <_printf_i+0x80>
    3116:	d80a      	bhi.n	312e <_printf_i+0x3a>
    3118:	2a00      	cmp	r2, #0
    311a:	f000 80c8 	beq.w	32ae <_printf_i+0x1ba>
    311e:	2a58      	cmp	r2, #88	; 0x58
    3120:	f000 808a 	beq.w	3238 <_printf_i+0x144>
    3124:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3128:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    312c:	e02a      	b.n	3184 <_printf_i+0x90>
    312e:	2a64      	cmp	r2, #100	; 0x64
    3130:	d001      	beq.n	3136 <_printf_i+0x42>
    3132:	2a69      	cmp	r2, #105	; 0x69
    3134:	d1f6      	bne.n	3124 <_printf_i+0x30>
    3136:	6821      	ldr	r1, [r4, #0]
    3138:	681a      	ldr	r2, [r3, #0]
    313a:	f011 0f80 	tst.w	r1, #128	; 0x80
    313e:	d023      	beq.n	3188 <_printf_i+0x94>
    3140:	1d11      	adds	r1, r2, #4
    3142:	6019      	str	r1, [r3, #0]
    3144:	6813      	ldr	r3, [r2, #0]
    3146:	e027      	b.n	3198 <_printf_i+0xa4>
    3148:	2a73      	cmp	r2, #115	; 0x73
    314a:	f000 80b4 	beq.w	32b6 <_printf_i+0x1c2>
    314e:	d808      	bhi.n	3162 <_printf_i+0x6e>
    3150:	2a6f      	cmp	r2, #111	; 0x6f
    3152:	d02a      	beq.n	31aa <_printf_i+0xb6>
    3154:	2a70      	cmp	r2, #112	; 0x70
    3156:	d1e5      	bne.n	3124 <_printf_i+0x30>
    3158:	680a      	ldr	r2, [r1, #0]
    315a:	f042 0220 	orr.w	r2, r2, #32
    315e:	600a      	str	r2, [r1, #0]
    3160:	e003      	b.n	316a <_printf_i+0x76>
    3162:	2a75      	cmp	r2, #117	; 0x75
    3164:	d021      	beq.n	31aa <_printf_i+0xb6>
    3166:	2a78      	cmp	r2, #120	; 0x78
    3168:	d1dc      	bne.n	3124 <_printf_i+0x30>
    316a:	2278      	movs	r2, #120	; 0x78
    316c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    3170:	496e      	ldr	r1, [pc, #440]	; (332c <_printf_i+0x238>)
    3172:	e064      	b.n	323e <_printf_i+0x14a>
    3174:	681a      	ldr	r2, [r3, #0]
    3176:	f101 0542 	add.w	r5, r1, #66	; 0x42
    317a:	1d11      	adds	r1, r2, #4
    317c:	6019      	str	r1, [r3, #0]
    317e:	6813      	ldr	r3, [r2, #0]
    3180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3184:	2301      	movs	r3, #1
    3186:	e0a3      	b.n	32d0 <_printf_i+0x1dc>
    3188:	f011 0f40 	tst.w	r1, #64	; 0x40
    318c:	f102 0104 	add.w	r1, r2, #4
    3190:	6019      	str	r1, [r3, #0]
    3192:	d0d7      	beq.n	3144 <_printf_i+0x50>
    3194:	f9b2 3000 	ldrsh.w	r3, [r2]
    3198:	2b00      	cmp	r3, #0
    319a:	da03      	bge.n	31a4 <_printf_i+0xb0>
    319c:	222d      	movs	r2, #45	; 0x2d
    319e:	425b      	negs	r3, r3
    31a0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    31a4:	4962      	ldr	r1, [pc, #392]	; (3330 <_printf_i+0x23c>)
    31a6:	220a      	movs	r2, #10
    31a8:	e017      	b.n	31da <_printf_i+0xe6>
    31aa:	6820      	ldr	r0, [r4, #0]
    31ac:	6819      	ldr	r1, [r3, #0]
    31ae:	f010 0f80 	tst.w	r0, #128	; 0x80
    31b2:	d003      	beq.n	31bc <_printf_i+0xc8>
    31b4:	1d08      	adds	r0, r1, #4
    31b6:	6018      	str	r0, [r3, #0]
    31b8:	680b      	ldr	r3, [r1, #0]
    31ba:	e006      	b.n	31ca <_printf_i+0xd6>
    31bc:	f010 0f40 	tst.w	r0, #64	; 0x40
    31c0:	f101 0004 	add.w	r0, r1, #4
    31c4:	6018      	str	r0, [r3, #0]
    31c6:	d0f7      	beq.n	31b8 <_printf_i+0xc4>
    31c8:	880b      	ldrh	r3, [r1, #0]
    31ca:	4959      	ldr	r1, [pc, #356]	; (3330 <_printf_i+0x23c>)
    31cc:	2a6f      	cmp	r2, #111	; 0x6f
    31ce:	bf14      	ite	ne
    31d0:	220a      	movne	r2, #10
    31d2:	2208      	moveq	r2, #8
    31d4:	2000      	movs	r0, #0
    31d6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    31da:	6865      	ldr	r5, [r4, #4]
    31dc:	60a5      	str	r5, [r4, #8]
    31de:	2d00      	cmp	r5, #0
    31e0:	f2c0 809c 	blt.w	331c <_printf_i+0x228>
    31e4:	6820      	ldr	r0, [r4, #0]
    31e6:	f020 0004 	bic.w	r0, r0, #4
    31ea:	6020      	str	r0, [r4, #0]
    31ec:	2b00      	cmp	r3, #0
    31ee:	d13f      	bne.n	3270 <_printf_i+0x17c>
    31f0:	2d00      	cmp	r5, #0
    31f2:	f040 8095 	bne.w	3320 <_printf_i+0x22c>
    31f6:	4675      	mov	r5, lr
    31f8:	2a08      	cmp	r2, #8
    31fa:	d10b      	bne.n	3214 <_printf_i+0x120>
    31fc:	6823      	ldr	r3, [r4, #0]
    31fe:	07da      	lsls	r2, r3, #31
    3200:	d508      	bpl.n	3214 <_printf_i+0x120>
    3202:	6923      	ldr	r3, [r4, #16]
    3204:	6862      	ldr	r2, [r4, #4]
    3206:	429a      	cmp	r2, r3
    3208:	bfde      	ittt	le
    320a:	2330      	movle	r3, #48	; 0x30
    320c:	f805 3c01 	strble.w	r3, [r5, #-1]
    3210:	f105 35ff 	addle.w	r5, r5, #4294967295
    3214:	ebae 0305 	sub.w	r3, lr, r5
    3218:	6123      	str	r3, [r4, #16]
    321a:	f8cd 8000 	str.w	r8, [sp]
    321e:	463b      	mov	r3, r7
    3220:	aa03      	add	r2, sp, #12
    3222:	4621      	mov	r1, r4
    3224:	4630      	mov	r0, r6
    3226:	f7ff feef 	bl	3008 <_printf_common>
    322a:	3001      	adds	r0, #1
    322c:	d155      	bne.n	32da <_printf_i+0x1e6>
    322e:	f04f 30ff 	mov.w	r0, #4294967295
    3232:	b005      	add	sp, #20
    3234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3238:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    323c:	493c      	ldr	r1, [pc, #240]	; (3330 <_printf_i+0x23c>)
    323e:	6822      	ldr	r2, [r4, #0]
    3240:	6818      	ldr	r0, [r3, #0]
    3242:	f012 0f80 	tst.w	r2, #128	; 0x80
    3246:	f100 0504 	add.w	r5, r0, #4
    324a:	601d      	str	r5, [r3, #0]
    324c:	d001      	beq.n	3252 <_printf_i+0x15e>
    324e:	6803      	ldr	r3, [r0, #0]
    3250:	e002      	b.n	3258 <_printf_i+0x164>
    3252:	0655      	lsls	r5, r2, #25
    3254:	d5fb      	bpl.n	324e <_printf_i+0x15a>
    3256:	8803      	ldrh	r3, [r0, #0]
    3258:	07d0      	lsls	r0, r2, #31
    325a:	bf44      	itt	mi
    325c:	f042 0220 	orrmi.w	r2, r2, #32
    3260:	6022      	strmi	r2, [r4, #0]
    3262:	b91b      	cbnz	r3, 326c <_printf_i+0x178>
    3264:	6822      	ldr	r2, [r4, #0]
    3266:	f022 0220 	bic.w	r2, r2, #32
    326a:	6022      	str	r2, [r4, #0]
    326c:	2210      	movs	r2, #16
    326e:	e7b1      	b.n	31d4 <_printf_i+0xe0>
    3270:	4675      	mov	r5, lr
    3272:	fbb3 f0f2 	udiv	r0, r3, r2
    3276:	fb02 3310 	mls	r3, r2, r0, r3
    327a:	5ccb      	ldrb	r3, [r1, r3]
    327c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    3280:	4603      	mov	r3, r0
    3282:	2800      	cmp	r0, #0
    3284:	d1f5      	bne.n	3272 <_printf_i+0x17e>
    3286:	e7b7      	b.n	31f8 <_printf_i+0x104>
    3288:	6808      	ldr	r0, [r1, #0]
    328a:	681a      	ldr	r2, [r3, #0]
    328c:	6949      	ldr	r1, [r1, #20]
    328e:	f010 0f80 	tst.w	r0, #128	; 0x80
    3292:	d004      	beq.n	329e <_printf_i+0x1aa>
    3294:	1d10      	adds	r0, r2, #4
    3296:	6018      	str	r0, [r3, #0]
    3298:	6813      	ldr	r3, [r2, #0]
    329a:	6019      	str	r1, [r3, #0]
    329c:	e007      	b.n	32ae <_printf_i+0x1ba>
    329e:	f010 0f40 	tst.w	r0, #64	; 0x40
    32a2:	f102 0004 	add.w	r0, r2, #4
    32a6:	6018      	str	r0, [r3, #0]
    32a8:	6813      	ldr	r3, [r2, #0]
    32aa:	d0f6      	beq.n	329a <_printf_i+0x1a6>
    32ac:	8019      	strh	r1, [r3, #0]
    32ae:	2300      	movs	r3, #0
    32b0:	6123      	str	r3, [r4, #16]
    32b2:	4675      	mov	r5, lr
    32b4:	e7b1      	b.n	321a <_printf_i+0x126>
    32b6:	681a      	ldr	r2, [r3, #0]
    32b8:	1d11      	adds	r1, r2, #4
    32ba:	6019      	str	r1, [r3, #0]
    32bc:	6815      	ldr	r5, [r2, #0]
    32be:	6862      	ldr	r2, [r4, #4]
    32c0:	2100      	movs	r1, #0
    32c2:	4628      	mov	r0, r5
    32c4:	f000 f83c 	bl	3340 <memchr>
    32c8:	b108      	cbz	r0, 32ce <_printf_i+0x1da>
    32ca:	1b40      	subs	r0, r0, r5
    32cc:	6060      	str	r0, [r4, #4]
    32ce:	6863      	ldr	r3, [r4, #4]
    32d0:	6123      	str	r3, [r4, #16]
    32d2:	2300      	movs	r3, #0
    32d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    32d8:	e79f      	b.n	321a <_printf_i+0x126>
    32da:	6923      	ldr	r3, [r4, #16]
    32dc:	462a      	mov	r2, r5
    32de:	4639      	mov	r1, r7
    32e0:	4630      	mov	r0, r6
    32e2:	47c0      	blx	r8
    32e4:	3001      	adds	r0, #1
    32e6:	d0a2      	beq.n	322e <_printf_i+0x13a>
    32e8:	6823      	ldr	r3, [r4, #0]
    32ea:	079b      	lsls	r3, r3, #30
    32ec:	d507      	bpl.n	32fe <_printf_i+0x20a>
    32ee:	2500      	movs	r5, #0
    32f0:	f104 0919 	add.w	r9, r4, #25
    32f4:	68e3      	ldr	r3, [r4, #12]
    32f6:	9a03      	ldr	r2, [sp, #12]
    32f8:	1a9b      	subs	r3, r3, r2
    32fa:	429d      	cmp	r5, r3
    32fc:	db05      	blt.n	330a <_printf_i+0x216>
    32fe:	68e0      	ldr	r0, [r4, #12]
    3300:	9b03      	ldr	r3, [sp, #12]
    3302:	4298      	cmp	r0, r3
    3304:	bfb8      	it	lt
    3306:	4618      	movlt	r0, r3
    3308:	e793      	b.n	3232 <_printf_i+0x13e>
    330a:	2301      	movs	r3, #1
    330c:	464a      	mov	r2, r9
    330e:	4639      	mov	r1, r7
    3310:	4630      	mov	r0, r6
    3312:	47c0      	blx	r8
    3314:	3001      	adds	r0, #1
    3316:	d08a      	beq.n	322e <_printf_i+0x13a>
    3318:	3501      	adds	r5, #1
    331a:	e7eb      	b.n	32f4 <_printf_i+0x200>
    331c:	2b00      	cmp	r3, #0
    331e:	d1a7      	bne.n	3270 <_printf_i+0x17c>
    3320:	780b      	ldrb	r3, [r1, #0]
    3322:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3326:	f104 0542 	add.w	r5, r4, #66	; 0x42
    332a:	e765      	b.n	31f8 <_printf_i+0x104>
    332c:	0000377a 	.word	0x0000377a
    3330:	00003769 	.word	0x00003769
	...

00003340 <memchr>:
    3340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3344:	2a10      	cmp	r2, #16
    3346:	db2b      	blt.n	33a0 <memchr+0x60>
    3348:	f010 0f07 	tst.w	r0, #7
    334c:	d008      	beq.n	3360 <memchr+0x20>
    334e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3352:	3a01      	subs	r2, #1
    3354:	428b      	cmp	r3, r1
    3356:	d02d      	beq.n	33b4 <memchr+0x74>
    3358:	f010 0f07 	tst.w	r0, #7
    335c:	b342      	cbz	r2, 33b0 <memchr+0x70>
    335e:	d1f6      	bne.n	334e <memchr+0xe>
    3360:	b4f0      	push	{r4, r5, r6, r7}
    3362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    336a:	f022 0407 	bic.w	r4, r2, #7
    336e:	f07f 0700 	mvns.w	r7, #0
    3372:	2300      	movs	r3, #0
    3374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3378:	3c08      	subs	r4, #8
    337a:	ea85 0501 	eor.w	r5, r5, r1
    337e:	ea86 0601 	eor.w	r6, r6, r1
    3382:	fa85 f547 	uadd8	r5, r5, r7
    3386:	faa3 f587 	sel	r5, r3, r7
    338a:	fa86 f647 	uadd8	r6, r6, r7
    338e:	faa5 f687 	sel	r6, r5, r7
    3392:	b98e      	cbnz	r6, 33b8 <memchr+0x78>
    3394:	d1ee      	bne.n	3374 <memchr+0x34>
    3396:	bcf0      	pop	{r4, r5, r6, r7}
    3398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    339c:	f002 0207 	and.w	r2, r2, #7
    33a0:	b132      	cbz	r2, 33b0 <memchr+0x70>
    33a2:	f810 3b01 	ldrb.w	r3, [r0], #1
    33a6:	3a01      	subs	r2, #1
    33a8:	ea83 0301 	eor.w	r3, r3, r1
    33ac:	b113      	cbz	r3, 33b4 <memchr+0x74>
    33ae:	d1f8      	bne.n	33a2 <memchr+0x62>
    33b0:	2000      	movs	r0, #0
    33b2:	4770      	bx	lr
    33b4:	3801      	subs	r0, #1
    33b6:	4770      	bx	lr
    33b8:	2d00      	cmp	r5, #0
    33ba:	bf06      	itte	eq
    33bc:	4635      	moveq	r5, r6
    33be:	3803      	subeq	r0, #3
    33c0:	3807      	subne	r0, #7
    33c2:	f015 0f01 	tst.w	r5, #1
    33c6:	d107      	bne.n	33d8 <memchr+0x98>
    33c8:	3001      	adds	r0, #1
    33ca:	f415 7f80 	tst.w	r5, #256	; 0x100
    33ce:	bf02      	ittt	eq
    33d0:	3001      	addeq	r0, #1
    33d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    33d6:	3001      	addeq	r0, #1
    33d8:	bcf0      	pop	{r4, r5, r6, r7}
    33da:	3801      	subs	r0, #1
    33dc:	4770      	bx	lr
    33de:	bf00      	nop

000033e0 <memcpy>:
    33e0:	b510      	push	{r4, lr}
    33e2:	1e43      	subs	r3, r0, #1
    33e4:	440a      	add	r2, r1
    33e6:	4291      	cmp	r1, r2
    33e8:	d100      	bne.n	33ec <memcpy+0xc>
    33ea:	bd10      	pop	{r4, pc}
    33ec:	f811 4b01 	ldrb.w	r4, [r1], #1
    33f0:	f803 4f01 	strb.w	r4, [r3, #1]!
    33f4:	e7f7      	b.n	33e6 <memcpy+0x6>

000033f6 <memmove>:
    33f6:	4288      	cmp	r0, r1
    33f8:	b510      	push	{r4, lr}
    33fa:	eb01 0302 	add.w	r3, r1, r2
    33fe:	d803      	bhi.n	3408 <memmove+0x12>
    3400:	1e42      	subs	r2, r0, #1
    3402:	4299      	cmp	r1, r3
    3404:	d10c      	bne.n	3420 <memmove+0x2a>
    3406:	bd10      	pop	{r4, pc}
    3408:	4298      	cmp	r0, r3
    340a:	d2f9      	bcs.n	3400 <memmove+0xa>
    340c:	1881      	adds	r1, r0, r2
    340e:	1ad2      	subs	r2, r2, r3
    3410:	42d3      	cmn	r3, r2
    3412:	d100      	bne.n	3416 <memmove+0x20>
    3414:	bd10      	pop	{r4, pc}
    3416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    341a:	f801 4d01 	strb.w	r4, [r1, #-1]!
    341e:	e7f7      	b.n	3410 <memmove+0x1a>
    3420:	f811 4b01 	ldrb.w	r4, [r1], #1
    3424:	f802 4f01 	strb.w	r4, [r2, #1]!
    3428:	e7eb      	b.n	3402 <memmove+0xc>

0000342a <_realloc_r>:
    342a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    342c:	4607      	mov	r7, r0
    342e:	4614      	mov	r4, r2
    3430:	460e      	mov	r6, r1
    3432:	b921      	cbnz	r1, 343e <_realloc_r+0x14>
    3434:	4611      	mov	r1, r2
    3436:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    343a:	f7ff bc01 	b.w	2c40 <_malloc_r>
    343e:	b922      	cbnz	r2, 344a <_realloc_r+0x20>
    3440:	f7ff fbb0 	bl	2ba4 <_free_r>
    3444:	4625      	mov	r5, r4
    3446:	4628      	mov	r0, r5
    3448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    344a:	f000 f814 	bl	3476 <_malloc_usable_size_r>
    344e:	4284      	cmp	r4, r0
    3450:	d90f      	bls.n	3472 <_realloc_r+0x48>
    3452:	4621      	mov	r1, r4
    3454:	4638      	mov	r0, r7
    3456:	f7ff fbf3 	bl	2c40 <_malloc_r>
    345a:	4605      	mov	r5, r0
    345c:	2800      	cmp	r0, #0
    345e:	d0f2      	beq.n	3446 <_realloc_r+0x1c>
    3460:	4631      	mov	r1, r6
    3462:	4622      	mov	r2, r4
    3464:	f7ff ffbc 	bl	33e0 <memcpy>
    3468:	4631      	mov	r1, r6
    346a:	4638      	mov	r0, r7
    346c:	f7ff fb9a 	bl	2ba4 <_free_r>
    3470:	e7e9      	b.n	3446 <_realloc_r+0x1c>
    3472:	4635      	mov	r5, r6
    3474:	e7e7      	b.n	3446 <_realloc_r+0x1c>

00003476 <_malloc_usable_size_r>:
    3476:	f851 0c04 	ldr.w	r0, [r1, #-4]
    347a:	2800      	cmp	r0, #0
    347c:	f1a0 0004 	sub.w	r0, r0, #4
    3480:	bfbc      	itt	lt
    3482:	580b      	ldrlt	r3, [r1, r0]
    3484:	18c0      	addlt	r0, r0, r3
    3486:	4770      	bx	lr
    3488:	682f2e2e 	.word	0x682f2e2e
    348c:	732f6c61 	.word	0x732f6c61
    3490:	682f6372 	.word	0x682f6372
    3494:	615f6c61 	.word	0x615f6c61
    3498:	615f6364 	.word	0x615f6364
    349c:	636e7973 	.word	0x636e7973
    34a0:	0000632e 	.word	0x0000632e
    34a4:	682f2e2e 	.word	0x682f2e2e
    34a8:	732f6c61 	.word	0x732f6c61
    34ac:	682f6372 	.word	0x682f6372
    34b0:	695f6c61 	.word	0x695f6c61
    34b4:	6d5f6332 	.word	0x6d5f6332
    34b8:	7973615f 	.word	0x7973615f
    34bc:	632e636e 	.word	0x632e636e
    34c0:	00000000 	.word	0x00000000
    34c4:	682f2e2e 	.word	0x682f2e2e
    34c8:	732f6c61 	.word	0x732f6c61
    34cc:	682f6372 	.word	0x682f6372
    34d0:	695f6c61 	.word	0x695f6c61
    34d4:	00632e6f 	.word	0x00632e6f
    34d8:	682f2e2e 	.word	0x682f2e2e
    34dc:	732f6c61 	.word	0x732f6c61
    34e0:	682f6372 	.word	0x682f6372
    34e4:	735f6c61 	.word	0x735f6c61
    34e8:	6d5f6970 	.word	0x6d5f6970
    34ec:	616d645f 	.word	0x616d645f
    34f0:	0000632e 	.word	0x0000632e
    34f4:	682f2e2e 	.word	0x682f2e2e
    34f8:	732f6c61 	.word	0x732f6c61
    34fc:	682f6372 	.word	0x682f6372
    3500:	755f6c61 	.word	0x755f6c61
    3504:	74726173 	.word	0x74726173
    3508:	7973615f 	.word	0x7973615f
    350c:	632e636e 	.word	0x632e636e
    3510:	00000000 	.word	0x00000000
    3514:	682f2e2e 	.word	0x682f2e2e
    3518:	752f6c61 	.word	0x752f6c61
    351c:	736c6974 	.word	0x736c6974
    3520:	6372732f 	.word	0x6372732f
    3524:	6974752f 	.word	0x6974752f
    3528:	725f736c 	.word	0x725f736c
    352c:	62676e69 	.word	0x62676e69
    3530:	65666675 	.word	0x65666675
    3534:	00632e72 	.word	0x00632e72

00003538 <_adcs>:
    3538:	00000000 00030008 00001807 00000000     ................
    3548:	00000000 00010000 000c0100 18040003     ................
    3558:	00000405 080c0000 00000014 682f2e2e     ............../h
    3568:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    3578:	00000000                                ....

0000357c <_cfgs>:
    357c:	00201300 14000000 00000000 00000000     .. .............
	...
    367c:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    368c:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000369c <_i2cms>:
    369c:	00000005 00200014 00000100 0000e6e5     ...... .........
    36ac:	00d70000 02dc6c00                       .....l..

000036b4 <sercomspi_regs>:
    36b4:	0020000c 00000000 00000000 01ff0006     .. .............
    36c4:	00000007 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    36d4:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    36e4:	3a434441 64352520 64352520 64352520     ADC: %5d %5d %5d
    36f4:	0000000a                                ....

000036f8 <__sf_fake_stderr>:
	...

00003718 <__sf_fake_stdin>:
	...

00003738 <__sf_fake_stdout>:
	...
    3758:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3768:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3778:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3788:	00006665                                ef..

0000378c <_init>:
    378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    378e:	bf00      	nop
    3790:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3792:	bc08      	pop	{r3}
    3794:	469e      	mov	lr, r3
    3796:	4770      	bx	lr

00003798 <__init_array_start>:
    3798:	00000289 	.word	0x00000289

0000379c <_fini>:
    379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    379e:	bf00      	nop
    37a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    37a2:	bc08      	pop	{r3}
    37a4:	469e      	mov	lr, r3
    37a6:	4770      	bx	lr

000037a8 <__fini_array_start>:
    37a8:	00000265 	.word	0x00000265
