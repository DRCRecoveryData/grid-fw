
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c0e8  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000578  20000000  0000c0e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020578  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020578  2**0
                  CONTENTS
  4 .bss          000026b8  20000580  0000c670  00020580  2**4
                  ALLOC
  5 .stack        00010000  20002c38  0000ed28  00020580  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020578  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205a6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0007d934  00000000  00000000  000205ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000aa3f  00000000  00000000  0009df33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000294b0  00000000  00000000  000a8972  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f38  00000000  00000000  000d1e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002e80  00000000  00000000  000d3d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00042d26  00000000  00000000  000d6bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003634d  00000000  00000000  00119900  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00118770  00000000  00000000  0014fc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005944  00000000  00000000  002683c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 2c 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     8,. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	d9 5f 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ._..............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 a1 5c 00 00 b5 5c 00 00     .........\...\..
      bc:	d9 5a 00 00 e5 5a 00 00 f1 5a 00 00 fd 5a 00 00     .Z...Z...Z...Z..
      cc:	09 5b 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .[..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	0d 5e 00 00 d9 69 00 00 ed 69 00 00 01 6a 00 00     .^...i...i...j..
     104:	15 6a 00 00 29 6a 00 00 3d 6a 00 00 51 6a 00 00     .j..)j..=j..Qj..
     114:	65 6a 00 00 79 6a 00 00 8d 6a 00 00 a1 6a 00 00     ej..yj...j...j..
     124:	b5 6a 00 00 c9 6a 00 00 dd 6a 00 00 f1 6a 00 00     .j...j...j...j..
     134:	05 6b 00 00 19 6b 00 00 2d 6b 00 00 41 6b 00 00     .k...k..-k..Ak..
     144:	55 6b 00 00 69 6b 00 00 7d 6b 00 00 91 6b 00 00     Uk..ik..}k...k..
     154:	a5 6b 00 00 b9 6b 00 00 cd 6b 00 00 e1 6b 00 00     .k...k...k...k..
     164:	f5 6b 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .k..............
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 c9 8a 00 00     ................
     184:	d5 8a 00 00 e1 8a 00 00 ed 8a 00 00 00 00 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 dd 77 00 00 f1 77 00 00     .........w...w..
     1f4:	05 78 00 00 19 78 00 00 e5 02 00 00 e5 02 00 00     .x...x..........
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 6d 57 00 00 81 57 00 00 95 57 00 00     ....mW...W...W..
     224:	a9 57 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .W..............
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000580 	.word	0x20000580
     280:	00000000 	.word	0x00000000
     284:	0000c0e8 	.word	0x0000c0e8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000c0e8 	.word	0x0000c0e8
     2c4:	20000584 	.word	0x20000584
     2c8:	0000c0e8 	.word	0x0000c0e8
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000c15 	.word	0x00000c15
     2e0:	0000a781 	.word	0x0000a781

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	0000c0e8 	.word	0x0000c0e8
     364:	20000578 	.word	0x20000578
     368:	20002c38 	.word	0x20002c38
     36c:	20000580 	.word	0x20000580
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	0000af61 	.word	0x0000af61
     37c:	000090f9 	.word	0x000090f9

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2241      	movs	r2, #65	; 0x41
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	2000059c 	.word	0x2000059c
     400:	20001410 	.word	0x20001410
     404:	20001508 	.word	0x20001508
     408:	43001c00 	.word	0x43001c00
     40c:	00003d75 	.word	0x00003d75
     410:	00003e19 	.word	0x00003e19
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2241      	movs	r2, #65	; 0x41
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	2000059c 	.word	0x2000059c
     4a4:	200015e0 	.word	0x200015e0
     4a8:	20001368 	.word	0x20001368
     4ac:	43002000 	.word	0x43002000
     4b0:	00003d75 	.word	0x00003d75
     4b4:	00003e19 	.word	0x00003e19
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	20001364 	.word	0x20001364
     4e0:	000040b5 	.word	0x000040b5

000004e4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4e4:	b508      	push	{r3, lr}
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <EVENT_SYSTEM_0_init+0x28>)
     4e8:	2240      	movs	r2, #64	; 0x40
     4ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4fa:	4a05      	ldr	r2, [pc, #20]	; (510 <EVENT_SYSTEM_0_init+0x2c>)
     4fc:	6993      	ldr	r3, [r2, #24]
     4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     502:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <EVENT_SYSTEM_0_init+0x30>)
     506:	4798      	blx	r3
     508:	bd08      	pop	{r3, pc}
     50a:	bf00      	nop
     50c:	40001c00 	.word	0x40001c00
     510:	40000800 	.word	0x40000800
     514:	00004139 	.word	0x00004139

00000518 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     518:	4a02      	ldr	r2, [pc, #8]	; (524 <FLASH_0_CLOCK_init+0xc>)
     51a:	6913      	ldr	r3, [r2, #16]
     51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     520:	6113      	str	r3, [r2, #16]
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800

00000528 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     528:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <FLASH_0_init+0x10>)
     52c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     52e:	4903      	ldr	r1, [pc, #12]	; (53c <FLASH_0_init+0x14>)
     530:	4803      	ldr	r0, [pc, #12]	; (540 <FLASH_0_init+0x18>)
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <FLASH_0_init+0x1c>)
     534:	4798      	blx	r3
     536:	bd08      	pop	{r3, pc}
     538:	00000519 	.word	0x00000519
     53c:	41004000 	.word	0x41004000
     540:	20001348 	.word	0x20001348
     544:	00004159 	.word	0x00004159

00000548 <USART_EAST_CLOCK_init>:
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <USART_EAST_CLOCK_init+0x1c>)
     54a:	2241      	movs	r2, #65	; 0x41
     54c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     550:	2242      	movs	r2, #66	; 0x42
     552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     556:	4a04      	ldr	r2, [pc, #16]	; (568 <USART_EAST_CLOCK_init+0x20>)
     558:	6953      	ldr	r3, [r2, #20]
     55a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     55e:	6153      	str	r3, [r2, #20]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	40001c00 	.word	0x40001c00
     568:	40000800 	.word	0x40000800

0000056c <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <USART_EAST_PORT_init+0x44>)
     56e:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     582:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     586:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     5ae:	4770      	bx	lr
     5b0:	41008000 	.word	0x41008000

000005b4 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <USART_EAST_init+0x20>)
     5ba:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     5bc:	2300      	movs	r3, #0
     5be:	9300      	str	r3, [sp, #0]
     5c0:	2310      	movs	r3, #16
     5c2:	4a05      	ldr	r2, [pc, #20]	; (5d8 <USART_EAST_init+0x24>)
     5c4:	4905      	ldr	r1, [pc, #20]	; (5dc <USART_EAST_init+0x28>)
     5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <USART_EAST_init+0x2c>)
     5c8:	4c06      	ldr	r4, [pc, #24]	; (5e4 <USART_EAST_init+0x30>)
     5ca:	47a0      	blx	r4
	USART_EAST_PORT_init();
     5cc:	4b06      	ldr	r3, [pc, #24]	; (5e8 <USART_EAST_init+0x34>)
     5ce:	4798      	blx	r3
}
     5d0:	b002      	add	sp, #8
     5d2:	bd10      	pop	{r4, pc}
     5d4:	00000549 	.word	0x00000549
     5d8:	200005c4 	.word	0x200005c4
     5dc:	40003000 	.word	0x40003000
     5e0:	2000143c 	.word	0x2000143c
     5e4:	00004b49 	.word	0x00004b49
     5e8:	0000056d 	.word	0x0000056d

000005ec <USART_NORTH_CLOCK_init>:
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <USART_NORTH_CLOCK_init+0x1c>)
     5ee:	2241      	movs	r2, #65	; 0x41
     5f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5f4:	2242      	movs	r2, #66	; 0x42
     5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5fa:	4a04      	ldr	r2, [pc, #16]	; (60c <USART_NORTH_CLOCK_init+0x20>)
     5fc:	6953      	ldr	r3, [r2, #20]
     5fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     602:	6153      	str	r3, [r2, #20]
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	40001c00 	.word	0x40001c00
     60c:	40000800 	.word	0x40000800

00000610 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <USART_NORTH_PORT_init+0x44>)
     612:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     626:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     642:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     646:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     64a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     652:	4770      	bx	lr
     654:	41008000 	.word	0x41008000

00000658 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     658:	b510      	push	{r4, lr}
     65a:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <USART_NORTH_init+0x20>)
     65e:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     660:	2300      	movs	r3, #0
     662:	9300      	str	r3, [sp, #0]
     664:	2310      	movs	r3, #16
     666:	4a05      	ldr	r2, [pc, #20]	; (67c <USART_NORTH_init+0x24>)
     668:	4905      	ldr	r1, [pc, #20]	; (680 <USART_NORTH_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <USART_NORTH_init+0x2c>)
     66c:	4c06      	ldr	r4, [pc, #24]	; (688 <USART_NORTH_init+0x30>)
     66e:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <USART_NORTH_init+0x34>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bd10      	pop	{r4, pc}
     678:	000005ed 	.word	0x000005ed
     67c:	200005d4 	.word	0x200005d4
     680:	40003400 	.word	0x40003400
     684:	2000148c 	.word	0x2000148c
     688:	00004b49 	.word	0x00004b49
     68c:	00000611 	.word	0x00000611

00000690 <GRID_AUX_CLOCK_init>:
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <GRID_AUX_CLOCK_init+0x1c>)
     692:	2241      	movs	r2, #65	; 0x41
     694:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     698:	2242      	movs	r2, #66	; 0x42
     69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <GRID_AUX_CLOCK_init+0x20>)
     6a0:	6993      	ldr	r3, [r2, #24]
     6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6a6:	6193      	str	r3, [r2, #24]
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800

000006b4 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	4b10      	ldr	r3, [pc, #64]	; (6f8 <GRID_AUX_PORT_init+0x44>)
     6b6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     6f6:	4770      	bx	lr
     6f8:	41008000 	.word	0x41008000

000006fc <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     6fc:	b510      	push	{r4, lr}
     6fe:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <GRID_AUX_init+0x20>)
     702:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     704:	2300      	movs	r3, #0
     706:	9300      	str	r3, [sp, #0]
     708:	2310      	movs	r3, #16
     70a:	4a05      	ldr	r2, [pc, #20]	; (720 <GRID_AUX_init+0x24>)
     70c:	4905      	ldr	r1, [pc, #20]	; (724 <GRID_AUX_init+0x28>)
     70e:	4806      	ldr	r0, [pc, #24]	; (728 <GRID_AUX_init+0x2c>)
     710:	4c06      	ldr	r4, [pc, #24]	; (72c <GRID_AUX_init+0x30>)
     712:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <GRID_AUX_init+0x34>)
     716:	4798      	blx	r3
}
     718:	b002      	add	sp, #8
     71a:	bd10      	pop	{r4, pc}
     71c:	00000691 	.word	0x00000691
     720:	200005e4 	.word	0x200005e4
     724:	41012000 	.word	0x41012000
     728:	200013c0 	.word	0x200013c0
     72c:	00004b49 	.word	0x00004b49
     730:	000006b5 	.word	0x000006b5

00000734 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     734:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <UI_SPI_PORT_init+0xb0>)
     736:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     73a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     746:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     74a:	4a27      	ldr	r2, [pc, #156]	; (7e8 <UI_SPI_PORT_init+0xb4>)
     74c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     750:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     758:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     768:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     780:	4a1a      	ldr	r2, [pc, #104]	; (7ec <UI_SPI_PORT_init+0xb8>)
     782:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     786:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     78a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     78e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     792:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     796:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     79e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7a6:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	4a11      	ldr	r2, [pc, #68]	; (7f0 <UI_SPI_PORT_init+0xbc>)
     7aa:	629a      	str	r2, [r3, #40]	; 0x28
     7ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     7b0:	3210      	adds	r2, #16
     7b2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7b4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     7b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7d0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7d8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	41008000 	.word	0x41008000
     7e8:	c0000010 	.word	0xc0000010
     7ec:	c0000020 	.word	0xc0000020
     7f0:	40020000 	.word	0x40020000

000007f4 <UI_SPI_CLOCK_init>:
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <UI_SPI_CLOCK_init+0x1c>)
     7f6:	2241      	movs	r2, #65	; 0x41
     7f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     7fc:	2243      	movs	r2, #67	; 0x43
     7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     802:	4a04      	ldr	r2, [pc, #16]	; (814 <UI_SPI_CLOCK_init+0x20>)
     804:	6993      	ldr	r3, [r2, #24]
     806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     80a:	6193      	str	r3, [r2, #24]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	40001c00 	.word	0x40001c00
     814:	40000800 	.word	0x40000800

00000818 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     818:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     81a:	4b04      	ldr	r3, [pc, #16]	; (82c <UI_SPI_init+0x14>)
     81c:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     81e:	4904      	ldr	r1, [pc, #16]	; (830 <UI_SPI_init+0x18>)
     820:	4804      	ldr	r0, [pc, #16]	; (834 <UI_SPI_init+0x1c>)
     822:	4b05      	ldr	r3, [pc, #20]	; (838 <UI_SPI_init+0x20>)
     824:	4798      	blx	r3
	UI_SPI_PORT_init();
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <UI_SPI_init+0x24>)
     828:	4798      	blx	r3
     82a:	bd08      	pop	{r3, pc}
     82c:	000007f5 	.word	0x000007f5
     830:	41014000 	.word	0x41014000
     834:	200012c0 	.word	0x200012c0
     838:	00004495 	.word	0x00004495
     83c:	00000735 	.word	0x00000735

00000840 <USART_WEST_CLOCK_init>:
     840:	4b06      	ldr	r3, [pc, #24]	; (85c <USART_WEST_CLOCK_init+0x1c>)
     842:	2241      	movs	r2, #65	; 0x41
     844:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     848:	2242      	movs	r2, #66	; 0x42
     84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     84e:	4a04      	ldr	r2, [pc, #16]	; (860 <USART_WEST_CLOCK_init+0x20>)
     850:	6a13      	ldr	r3, [r2, #32]
     852:	f043 0301 	orr.w	r3, r3, #1
     856:	6213      	str	r3, [r2, #32]
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	40001c00 	.word	0x40001c00
     860:	40000800 	.word	0x40000800

00000864 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <USART_WEST_PORT_init+0x44>)
     866:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     86a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     876:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     882:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     886:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     88a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     88e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     892:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     896:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     89a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     89e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     8a6:	4770      	bx	lr
     8a8:	41008000 	.word	0x41008000

000008ac <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     8ac:	b510      	push	{r4, lr}
     8ae:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     8b0:	4b07      	ldr	r3, [pc, #28]	; (8d0 <USART_WEST_init+0x24>)
     8b2:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     8b4:	2300      	movs	r3, #0
     8b6:	9300      	str	r3, [sp, #0]
     8b8:	2310      	movs	r3, #16
     8ba:	4a06      	ldr	r2, [pc, #24]	; (8d4 <USART_WEST_init+0x28>)
     8bc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     8c0:	4805      	ldr	r0, [pc, #20]	; (8d8 <USART_WEST_init+0x2c>)
     8c2:	4c06      	ldr	r4, [pc, #24]	; (8dc <USART_WEST_init+0x30>)
     8c4:	47a0      	blx	r4
	USART_WEST_PORT_init();
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <USART_WEST_init+0x34>)
     8c8:	4798      	blx	r3
}
     8ca:	b002      	add	sp, #8
     8cc:	bd10      	pop	{r4, pc}
     8ce:	bf00      	nop
     8d0:	00000841 	.word	0x00000841
     8d4:	200005f4 	.word	0x200005f4
     8d8:	20001540 	.word	0x20001540
     8dc:	00004b49 	.word	0x00004b49
     8e0:	00000865 	.word	0x00000865

000008e4 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8e4:	4b16      	ldr	r3, [pc, #88]	; (940 <SYS_I2C_PORT_init+0x5c>)
     8e6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     8ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8f2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     902:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     906:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     90a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     90e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     912:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     916:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     91a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     926:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     92a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     932:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     936:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     93a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     93e:	4770      	bx	lr
     940:	41008000 	.word	0x41008000

00000944 <SYS_I2C_CLOCK_init>:
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <SYS_I2C_CLOCK_init+0x1c>)
     946:	2241      	movs	r2, #65	; 0x41
     948:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     94c:	2242      	movs	r2, #66	; 0x42
     94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     952:	4a04      	ldr	r2, [pc, #16]	; (964 <SYS_I2C_CLOCK_init+0x20>)
     954:	6a13      	ldr	r3, [r2, #32]
     956:	f043 0302 	orr.w	r3, r3, #2
     95a:	6213      	str	r3, [r2, #32]
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	40001c00 	.word	0x40001c00
     964:	40000800 	.word	0x40000800

00000968 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     968:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <SYS_I2C_init+0x14>)
     96c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     96e:	4904      	ldr	r1, [pc, #16]	; (980 <SYS_I2C_init+0x18>)
     970:	4804      	ldr	r0, [pc, #16]	; (984 <SYS_I2C_init+0x1c>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <SYS_I2C_init+0x20>)
     974:	4798      	blx	r3
	SYS_I2C_PORT_init();
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <SYS_I2C_init+0x24>)
     978:	4798      	blx	r3
     97a:	bd08      	pop	{r3, pc}
     97c:	00000945 	.word	0x00000945
     980:	43000400 	.word	0x43000400
     984:	20001380 	.word	0x20001380
     988:	00004239 	.word	0x00004239
     98c:	000008e5 	.word	0x000008e5

00000990 <USART_SOUTH_CLOCK_init>:
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <USART_SOUTH_CLOCK_init+0x1c>)
     992:	2241      	movs	r2, #65	; 0x41
     994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     998:	2242      	movs	r2, #66	; 0x42
     99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <USART_SOUTH_CLOCK_init+0x20>)
     9a0:	6a13      	ldr	r3, [r2, #32]
     9a2:	f043 0304 	orr.w	r3, r3, #4
     9a6:	6213      	str	r3, [r2, #32]
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	40001c00 	.word	0x40001c00
     9b0:	40000800 	.word	0x40000800

000009b4 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b4:	4b10      	ldr	r3, [pc, #64]	; (9f8 <USART_SOUTH_PORT_init+0x44>)
     9b6:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     9da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     9f6:	4770      	bx	lr
     9f8:	41008000 	.word	0x41008000

000009fc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <USART_SOUTH_init+0x20>)
     a02:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     a04:	2300      	movs	r3, #0
     a06:	9300      	str	r3, [sp, #0]
     a08:	2310      	movs	r3, #16
     a0a:	4a05      	ldr	r2, [pc, #20]	; (a20 <USART_SOUTH_init+0x24>)
     a0c:	4905      	ldr	r1, [pc, #20]	; (a24 <USART_SOUTH_init+0x28>)
     a0e:	4806      	ldr	r0, [pc, #24]	; (a28 <USART_SOUTH_init+0x2c>)
     a10:	4c06      	ldr	r4, [pc, #24]	; (a2c <USART_SOUTH_init+0x30>)
     a12:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <USART_SOUTH_init+0x34>)
     a16:	4798      	blx	r3
}
     a18:	b002      	add	sp, #8
     a1a:	bd10      	pop	{r4, pc}
     a1c:	00000991 	.word	0x00000991
     a20:	20000604 	.word	0x20000604
     a24:	43000800 	.word	0x43000800
     a28:	20001590 	.word	0x20001590
     a2c:	00004b49 	.word	0x00004b49
     a30:	000009b5 	.word	0x000009b5

00000a34 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	4b29      	ldr	r3, [pc, #164]	; (adc <GRID_LED_PORT_init+0xa8>)
     a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a46:	4926      	ldr	r1, [pc, #152]	; (ae0 <GRID_LED_PORT_init+0xac>)
     a48:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     a50:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a54:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a58:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a60:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a64:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a68:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     a70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a7c:	4919      	ldr	r1, [pc, #100]	; (ae4 <GRID_LED_PORT_init+0xb0>)
     a7e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8e:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a92:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a96:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a9a:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a9e:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     aa2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     aa8:	629a      	str	r2, [r3, #40]	; 0x28
     aaa:	4a0f      	ldr	r2, [pc, #60]	; (ae8 <GRID_LED_PORT_init+0xb4>)
     aac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     ab2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ab6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ace:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ad2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ada:	4770      	bx	lr
     adc:	41008000 	.word	0x41008000
     ae0:	c0004000 	.word	0xc0004000
     ae4:	c0008000 	.word	0xc0008000
     ae8:	c0024000 	.word	0xc0024000

00000aec <GRID_LED_CLOCK_init>:
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <GRID_LED_CLOCK_init+0x1c>)
     aee:	2241      	movs	r2, #65	; 0x41
     af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     af4:	2242      	movs	r2, #66	; 0x42
     af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     afa:	4a04      	ldr	r2, [pc, #16]	; (b0c <GRID_LED_CLOCK_init+0x20>)
     afc:	6a13      	ldr	r3, [r2, #32]
     afe:	f043 0308 	orr.w	r3, r3, #8
     b02:	6213      	str	r3, [r2, #32]
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	40001c00 	.word	0x40001c00
     b0c:	40000800 	.word	0x40000800

00000b10 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     b10:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <GRID_LED_init+0x14>)
     b14:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     b16:	4904      	ldr	r1, [pc, #16]	; (b28 <GRID_LED_init+0x18>)
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <GRID_LED_init+0x1c>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <GRID_LED_init+0x20>)
     b1c:	4798      	blx	r3
	GRID_LED_PORT_init();
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <GRID_LED_init+0x24>)
     b20:	4798      	blx	r3
     b22:	bd08      	pop	{r3, pc}
     b24:	00000aed 	.word	0x00000aed
     b28:	43000c00 	.word	0x43000c00
     b2c:	200014dc 	.word	0x200014dc
     b30:	000046bd 	.word	0x000046bd
     b34:	00000a35 	.word	0x00000a35

00000b38 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b38:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b3a:	4802      	ldr	r0, [pc, #8]	; (b44 <delay_driver_init+0xc>)
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <delay_driver_init+0x10>)
     b3e:	4798      	blx	r3
     b40:	bd08      	pop	{r3, pc}
     b42:	bf00      	nop
     b44:	e000e010 	.word	0xe000e010
     b48:	000040e5 	.word	0x000040e5

00000b4c <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b4c:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b52:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b58:	6299      	str	r1, [r3, #40]	; 0x28
     b5a:	481c      	ldr	r0, [pc, #112]	; (bcc <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     b5c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b5e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b64:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b74:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b7c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b84:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     b90:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	6299      	str	r1, [r3, #40]	; 0x28
     b94:	490e      	ldr	r1, [pc, #56]	; (bd0 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     b96:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b98:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b9a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     b9e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bba:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bbe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     bc6:	4770      	bx	lr
     bc8:	41008000 	.word	0x41008000
     bcc:	c0000100 	.word	0xc0000100
     bd0:	c0000200 	.word	0xc0000200

00000bd4 <USB_DEVICE_INSTANCE_CLOCK_init>:
     bd4:	2241      	movs	r2, #65	; 0x41
     bd6:	4b07      	ldr	r3, [pc, #28]	; (bf4 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bdc:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     be0:	691a      	ldr	r2, [r3, #16]
     be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     be6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     be8:	699a      	ldr	r2, [r3, #24]
     bea:	f042 0201 	orr.w	r2, r2, #1
     bee:	619a      	str	r2, [r3, #24]
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	40001c00 	.word	0x40001c00

00000bf8 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     bf8:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <USB_DEVICE_INSTANCE_init+0x10>)
     bfc:	4798      	blx	r3
	usb_d_init();
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <USB_DEVICE_INSTANCE_init+0x14>)
     c00:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <USB_DEVICE_INSTANCE_init+0x18>)
     c04:	4798      	blx	r3
     c06:	bd08      	pop	{r3, pc}
     c08:	00000bd5 	.word	0x00000bd5
     c0c:	00004ef5 	.word	0x00004ef5
     c10:	00000b4d 	.word	0x00000b4d

00000c14 <system_init>:
}

void system_init(void)
{
     c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c18:	4ba1      	ldr	r3, [pc, #644]	; (ea0 <system_init+0x28c>)
     c1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c1c:	4ba1      	ldr	r3, [pc, #644]	; (ea4 <system_init+0x290>)
     c1e:	2220      	movs	r2, #32
     c20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c28:	629a      	str	r2, [r3, #40]	; 0x28
     c2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     c2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     c34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     c40:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c42:	4e99      	ldr	r6, [pc, #612]	; (ea8 <system_init+0x294>)
     c44:	629e      	str	r6, [r3, #40]	; 0x28
     c46:	4999      	ldr	r1, [pc, #612]	; (eac <system_init+0x298>)
     c48:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c4a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     c4e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c52:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c56:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     c5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c62:	2180      	movs	r1, #128	; 0x80
     c64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c68:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     c6c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     c70:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     c74:	4d8e      	ldr	r5, [pc, #568]	; (eb0 <system_init+0x29c>)
     c76:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     c7e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c82:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c8e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     c96:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c9a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ca2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     ca6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     caa:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     cae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cb2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     cba:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cbe:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cc2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     cc6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     cca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cce:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     cd2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cda:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     cde:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ce2:	4c74      	ldr	r4, [pc, #464]	; (eb4 <system_init+0x2a0>)
     ce4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ce8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cec:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     cf0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     cf4:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cf8:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     cfc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d00:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d04:	f44f 6400 	mov.w	r4, #2048	; 0x800
     d08:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d0c:	f8df e22c 	ldr.w	lr, [pc, #556]	; f3c <system_init+0x328>
     d10:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     d14:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d1c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     d20:	f045 0504 	orr.w	r5, r5, #4
     d24:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d28:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d2c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     d30:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d34:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d38:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d3c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d40:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     d44:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d48:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d50:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     d60:	4a55      	ldr	r2, [pc, #340]	; (eb8 <system_init+0x2a4>)
     d62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     d82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     d8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d92:	494a      	ldr	r1, [pc, #296]	; (ebc <system_init+0x2a8>)
     d94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d98:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     d9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     da4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     da8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     db4:	4942      	ldr	r1, [pc, #264]	; (ec0 <system_init+0x2ac>)
     db6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dba:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     dbe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dc2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dc6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dca:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     dd2:	4a3c      	ldr	r2, [pc, #240]	; (ec4 <system_init+0x2b0>)
     dd4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dd8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     de0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     de4:	4b38      	ldr	r3, [pc, #224]	; (ec8 <system_init+0x2b4>)
     de6:	4798      	blx	r3
	ADC_1_init();
     de8:	4b38      	ldr	r3, [pc, #224]	; (ecc <system_init+0x2b8>)
     dea:	4798      	blx	r3

	CRC_0_init();
     dec:	4b38      	ldr	r3, [pc, #224]	; (ed0 <system_init+0x2bc>)
     dee:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     df0:	4b38      	ldr	r3, [pc, #224]	; (ed4 <system_init+0x2c0>)
     df2:	4798      	blx	r3

	FLASH_0_init();
     df4:	4b38      	ldr	r3, [pc, #224]	; (ed8 <system_init+0x2c4>)
     df6:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     df8:	4c38      	ldr	r4, [pc, #224]	; (edc <system_init+0x2c8>)
     dfa:	6963      	ldr	r3, [r4, #20]
     dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     e00:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
     e02:	4b37      	ldr	r3, [pc, #220]	; (ee0 <system_init+0x2cc>)
     e04:	4798      	blx	r3
     e06:	4602      	mov	r2, r0
     e08:	4936      	ldr	r1, [pc, #216]	; (ee4 <system_init+0x2d0>)
     e0a:	4837      	ldr	r0, [pc, #220]	; (ee8 <system_init+0x2d4>)
     e0c:	4d37      	ldr	r5, [pc, #220]	; (eec <system_init+0x2d8>)
     e0e:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
     e10:	4b37      	ldr	r3, [pc, #220]	; (ef0 <system_init+0x2dc>)
     e12:	4798      	blx	r3
	USART_NORTH_init();
     e14:	4b37      	ldr	r3, [pc, #220]	; (ef4 <system_init+0x2e0>)
     e16:	4798      	blx	r3
	GRID_AUX_init();
     e18:	4b37      	ldr	r3, [pc, #220]	; (ef8 <system_init+0x2e4>)
     e1a:	4798      	blx	r3

	UI_SPI_init();
     e1c:	4b37      	ldr	r3, [pc, #220]	; (efc <system_init+0x2e8>)
     e1e:	4798      	blx	r3
	USART_WEST_init();
     e20:	4b37      	ldr	r3, [pc, #220]	; (f00 <system_init+0x2ec>)
     e22:	4798      	blx	r3

	SYS_I2C_init();
     e24:	4b37      	ldr	r3, [pc, #220]	; (f04 <system_init+0x2f0>)
     e26:	4798      	blx	r3
	USART_SOUTH_init();
     e28:	4b37      	ldr	r3, [pc, #220]	; (f08 <system_init+0x2f4>)
     e2a:	4798      	blx	r3

	GRID_LED_init();
     e2c:	4b37      	ldr	r3, [pc, #220]	; (f0c <system_init+0x2f8>)
     e2e:	4798      	blx	r3

	delay_driver_init();
     e30:	4b37      	ldr	r3, [pc, #220]	; (f10 <system_init+0x2fc>)
     e32:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     e34:	6963      	ldr	r3, [r4, #20]
     e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e3a:	6163      	str	r3, [r4, #20]
     e3c:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
     e40:	f04f 0840 	mov.w	r8, #64	; 0x40
     e44:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     e48:	4e32      	ldr	r6, [pc, #200]	; (f14 <system_init+0x300>)
     e4a:	47b0      	blx	r6
     e4c:	4602      	mov	r2, r0
     e4e:	4932      	ldr	r1, [pc, #200]	; (f18 <system_init+0x304>)
     e50:	4832      	ldr	r0, [pc, #200]	; (f1c <system_init+0x308>)
     e52:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     e54:	6963      	ldr	r3, [r4, #20]
     e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e5a:	6163      	str	r3, [r4, #20]
     e5c:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
     e60:	47b0      	blx	r6
     e62:	4602      	mov	r2, r0
     e64:	492e      	ldr	r1, [pc, #184]	; (f20 <system_init+0x30c>)
     e66:	482f      	ldr	r0, [pc, #188]	; (f24 <system_init+0x310>)
     e68:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     e6a:	69a3      	ldr	r3, [r4, #24]
     e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     e70:	61a3      	str	r3, [r4, #24]
     e72:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
     e76:	47b0      	blx	r6
     e78:	4602      	mov	r2, r0
     e7a:	492b      	ldr	r1, [pc, #172]	; (f28 <system_init+0x314>)
     e7c:	482b      	ldr	r0, [pc, #172]	; (f2c <system_init+0x318>)
     e7e:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     e80:	69a3      	ldr	r3, [r4, #24]
     e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e86:	61a3      	str	r3, [r4, #24]
     e88:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
     e8c:	47b0      	blx	r6
     e8e:	4602      	mov	r2, r0
     e90:	4927      	ldr	r1, [pc, #156]	; (f30 <system_init+0x31c>)
     e92:	4828      	ldr	r0, [pc, #160]	; (f34 <system_init+0x320>)
     e94:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
     e96:	4b28      	ldr	r3, [pc, #160]	; (f38 <system_init+0x324>)
     e98:	4798      	blx	r3
     e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e9e:	bf00      	nop
     ea0:	000057ed 	.word	0x000057ed
     ea4:	41008000 	.word	0x41008000
     ea8:	40020000 	.word	0x40020000
     eac:	c0020020 	.word	0xc0020020
     eb0:	c0020000 	.word	0xc0020000
     eb4:	40028000 	.word	0x40028000
     eb8:	c0020004 	.word	0xc0020004
     ebc:	c0000008 	.word	0xc0000008
     ec0:	c0000010 	.word	0xc0000010
     ec4:	c0000020 	.word	0xc0000020
     ec8:	00000381 	.word	0x00000381
     ecc:	00000419 	.word	0x00000419
     ed0:	000004bd 	.word	0x000004bd
     ed4:	000004e5 	.word	0x000004e5
     ed8:	00000529 	.word	0x00000529
     edc:	40000800 	.word	0x40000800
     ee0:	00005fd1 	.word	0x00005fd1
     ee4:	40002400 	.word	0x40002400
     ee8:	20001308 	.word	0x20001308
     eec:	00004865 	.word	0x00004865
     ef0:	000005b5 	.word	0x000005b5
     ef4:	00000659 	.word	0x00000659
     ef8:	000006fd 	.word	0x000006fd
     efc:	00000819 	.word	0x00000819
     f00:	000008ad 	.word	0x000008ad
     f04:	00000969 	.word	0x00000969
     f08:	000009fd 	.word	0x000009fd
     f0c:	00000b11 	.word	0x00000b11
     f10:	00000b39 	.word	0x00000b39
     f14:	000077d5 	.word	0x000077d5
     f18:	40003800 	.word	0x40003800
     f1c:	2000162c 	.word	0x2000162c
     f20:	40003c00 	.word	0x40003c00
     f24:	20001520 	.word	0x20001520
     f28:	4101a000 	.word	0x4101a000
     f2c:	20001328 	.word	0x20001328
     f30:	4101c000 	.word	0x4101c000
     f34:	2000160c 	.word	0x2000160c
     f38:	00000bf9 	.word	0x00000bf9
     f3c:	40020800 	.word	0x40020800

00000f40 <grid_module_hardware_start_transfer>:





static void grid_module_hardware_start_transfer(void){
     f40:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     f46:	4b06      	ldr	r3, [pc, #24]	; (f60 <grid_module_hardware_start_transfer+0x20>)
     f48:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
     f4a:	4c06      	ldr	r4, [pc, #24]	; (f64 <grid_module_hardware_start_transfer+0x24>)
     f4c:	4620      	mov	r0, r4
     f4e:	4b06      	ldr	r3, [pc, #24]	; (f68 <grid_module_hardware_start_transfer+0x28>)
     f50:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
     f52:	2308      	movs	r3, #8
     f54:	4a05      	ldr	r2, [pc, #20]	; (f6c <grid_module_hardware_start_transfer+0x2c>)
     f56:	4906      	ldr	r1, [pc, #24]	; (f70 <grid_module_hardware_start_transfer+0x30>)
     f58:	4620      	mov	r0, r4
     f5a:	4c06      	ldr	r4, [pc, #24]	; (f74 <grid_module_hardware_start_transfer+0x34>)
     f5c:	47a0      	blx	r4
     f5e:	bd10      	pop	{r4, pc}
     f60:	41008000 	.word	0x41008000
     f64:	200012c0 	.word	0x200012c0
     f68:	00004519 	.word	0x00004519
     f6c:	20000614 	.word	0x20000614
     f70:	20000000 	.word	0x20000000
     f74:	0000457d 	.word	0x0000457d

00000f78 <grid_module_hardware_transfer_complete_cb>:

}

static void grid_module_hardware_transfer_complete_cb(void){
     f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f7c:	b087      	sub	sp, #28

	struct grid_ui_model* mod = &grid_ui_state;
	
	

	grid_sync_set_mode(GRID_SYNC_1, GRID_SYNC_MASTER);
     f7e:	2101      	movs	r1, #1
     f80:	4608      	mov	r0, r1
     f82:	4cb0      	ldr	r4, [pc, #704]	; (1244 <grid_module_hardware_transfer_complete_cb+0x2cc>)
     f84:	47a0      	blx	r4
	grid_sync_set_level(GRID_SYNC_1, 1);
     f86:	2101      	movs	r1, #1
     f88:	4608      	mov	r0, r1
     f8a:	4baf      	ldr	r3, [pc, #700]	; (1248 <grid_module_hardware_transfer_complete_cb+0x2d0>)
     f8c:	4798      	blx	r3
		
	grid_sync_set_mode(GRID_SYNC_1, GRID_SYNC_MASTER);
     f8e:	2101      	movs	r1, #1
     f90:	4608      	mov	r0, r1
     f92:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     f98:	4bac      	ldr	r3, [pc, #688]	; (124c <grid_module_hardware_transfer_complete_cb+0x2d4>)
     f9a:	615a      	str	r2, [r3, #20]
     f9c:	2700      	movs	r7, #0
     f9e:	e01d      	b.n	fdc <grid_module_hardware_transfer_complete_cb+0x64>
					
				if (phase_b == 0){
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = phase_a;
				}
				else{
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = !phase_a;
     fa0:	4bab      	ldr	r3, [pc, #684]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
     fa2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
     fa6:	2e00      	cmp	r6, #0
     fa8:	bf0c      	ite	eq
     faa:	2201      	moveq	r2, #1
     fac:	2200      	movne	r2, #0
     fae:	715a      	strb	r2, [r3, #5]
				}
					
				if (phase_a && phase_b){
     fb0:	f040 80eb 	bne.w	118a <grid_module_hardware_transfer_complete_cb+0x212>
	
					CRITICAL_SECTION_LEAVE()
				}
			}
				
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
     fb4:	4ba6      	ldr	r3, [pc, #664]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
     fb6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
     fba:	79db      	ldrb	r3, [r3, #7]
     fbc:	42a3      	cmp	r3, r4
     fbe:	d009      	beq.n	fd4 <grid_module_hardware_transfer_complete_cb+0x5c>
					
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
     fc0:	4ba3      	ldr	r3, [pc, #652]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
     fc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
     fc6:	71dc      	strb	r4, [r3, #7]
					
				if (phase_a == 0){
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = !phase_b;
     fc8:	49a1      	ldr	r1, [pc, #644]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
     fca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
     fce:	f084 0401 	eor.w	r4, r4, #1
     fd2:	716c      	strb	r4, [r5, #5]
     fd4:	3701      	adds	r7, #1
	for (uint8_t i=0; i<16; i++){
     fd6:	2f10      	cmp	r7, #16
     fd8:	f000 814c 	beq.w	1274 <grid_module_hardware_transfer_complete_cb+0x2fc>
     fdc:	b2fb      	uxtb	r3, r7
		uint8_t new_value = (UI_SPI_RX_BUFFER[i/2]>>(4*(i%2)))&0x0F;
     fde:	085a      	lsrs	r2, r3, #1
     fe0:	499c      	ldr	r1, [pc, #624]	; (1254 <grid_module_hardware_transfer_complete_cb+0x2dc>)
     fe2:	5c8c      	ldrb	r4, [r1, r2]
     fe4:	f003 0301 	and.w	r3, r3, #1
     fe8:	009b      	lsls	r3, r3, #2
     fea:	411c      	asrs	r4, r3
     fec:	b2e4      	uxtb	r4, r4
     fee:	f004 020f 	and.w	r2, r4, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[i];
     ff2:	4b99      	ldr	r3, [pc, #612]	; (1258 <grid_module_hardware_transfer_complete_cb+0x2e0>)
     ff4:	5ddb      	ldrb	r3, [r3, r7]
     ff6:	b2db      	uxtb	r3, r3
		if (old_value != new_value){
     ff8:	429a      	cmp	r2, r3
     ffa:	d0eb      	beq.n	fd4 <grid_module_hardware_transfer_complete_cb+0x5c>
			uint8_t button_value = new_value>>2;
     ffc:	0891      	lsrs	r1, r2, #2
			uint8_t phase_a = (new_value>>1)&1;
     ffe:	f3c2 0640 	ubfx	r6, r2, #1, #1
			uint8_t phase_b = (new_value)&1;
    1002:	f004 0401 	and.w	r4, r4, #1
			if (button_value != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value){
    1006:	4b95      	ldr	r3, [pc, #596]	; (125c <grid_module_hardware_transfer_complete_cb+0x2e4>)
    1008:	5cfd      	ldrb	r5, [r7, r3]
    100a:	4b91      	ldr	r3, [pc, #580]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
    100c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    1010:	785b      	ldrb	r3, [r3, #1]
    1012:	428b      	cmp	r3, r1
    1014:	d04a      	beq.n	10ac <grid_module_hardware_transfer_complete_cb+0x134>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_changed = 1;
    1016:	4b8e      	ldr	r3, [pc, #568]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
    1018:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    101c:	2201      	movs	r2, #1
    101e:	709a      	strb	r2, [r3, #2]
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value = new_value>>2;
    1020:	7059      	strb	r1, [r3, #1]
				CRITICAL_SECTION_ENTER()
    1022:	a801      	add	r0, sp, #4
    1024:	4b8e      	ldr	r3, [pc, #568]	; (1260 <grid_module_hardware_transfer_complete_cb+0x2e8>)
    1026:	4798      	blx	r3
				if (mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] == 0){
    1028:	f105 0801 	add.w	r8, r5, #1
    102c:	ea4f 1808 	mov.w	r8, r8, lsl #4
    1030:	4b8c      	ldr	r3, [pc, #560]	; (1264 <grid_module_hardware_transfer_complete_cb+0x2ec>)
    1032:	685b      	ldr	r3, [r3, #4]
    1034:	4443      	add	r3, r8
    1036:	68da      	ldr	r2, [r3, #12]
    1038:	7812      	ldrb	r2, [r2, #0]
					velocity = 0;
    103a:	2a00      	cmp	r2, #0
    103c:	bf0c      	ite	eq
    103e:	f04f 0b7f 	moveq.w	fp, #127	; 0x7f
    1042:	f04f 0b00 	movne.w	fp, #0
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[5], 2, command);
    1046:	6858      	ldr	r0, [r3, #4]
    1048:	bf0c      	ite	eq
    104a:	2290      	moveq	r2, #144	; 0x90
    104c:	2280      	movne	r2, #128	; 0x80
    104e:	2102      	movs	r1, #2
    1050:	3005      	adds	r0, #5
    1052:	f8df a21c 	ldr.w	sl, [pc, #540]	; 1270 <grid_module_hardware_transfer_complete_cb+0x2f8>
    1056:	47d0      	blx	sl
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    1058:	f8df 9208 	ldr.w	r9, [pc, #520]	; 1264 <grid_module_hardware_transfer_complete_cb+0x2ec>
    105c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    1060:	4443      	add	r3, r8
    1062:	6858      	ldr	r0, [r3, #4]
    1064:	462a      	mov	r2, r5
    1066:	2102      	movs	r1, #2
    1068:	3007      	adds	r0, #7
    106a:	47d0      	blx	sl
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[9], 2, velocity);
    106c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    1070:	4443      	add	r3, r8
    1072:	6858      	ldr	r0, [r3, #4]
    1074:	465a      	mov	r2, fp
    1076:	2102      	movs	r1, #2
    1078:	3009      	adds	r0, #9
    107a:	47d0      	blx	sl
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[21], 2, actuator);
    107c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    1080:	4443      	add	r3, r8
    1082:	6858      	ldr	r0, [r3, #4]
    1084:	ea4f 024b 	mov.w	r2, fp, lsl #1
    1088:	2102      	movs	r1, #2
    108a:	3015      	adds	r0, #21
    108c:	47d0      	blx	sl
				mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] = velocity;
    108e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    1092:	4498      	add	r8, r3
    1094:	f8d8 300c 	ldr.w	r3, [r8, #12]
    1098:	f883 b000 	strb.w	fp, [r3]
				grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1);
    109c:	1c69      	adds	r1, r5, #1
    109e:	b2c9      	uxtb	r1, r1
    10a0:	4648      	mov	r0, r9
    10a2:	4b71      	ldr	r3, [pc, #452]	; (1268 <grid_module_hardware_transfer_complete_cb+0x2f0>)
    10a4:	4798      	blx	r3
				CRITICAL_SECTION_LEAVE()
    10a6:	a801      	add	r0, sp, #4
    10a8:	4b70      	ldr	r3, [pc, #448]	; (126c <grid_module_hardware_transfer_complete_cb+0x2f4>)
    10aa:	4798      	blx	r3
			if (phase_a != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous){
    10ac:	4b68      	ldr	r3, [pc, #416]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
    10ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    10b2:	799b      	ldrb	r3, [r3, #6]
    10b4:	42b3      	cmp	r3, r6
    10b6:	f000 80b6 	beq.w	1226 <grid_module_hardware_transfer_complete_cb+0x2ae>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous = phase_a;
    10ba:	4b65      	ldr	r3, [pc, #404]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
    10bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    10c0:	719e      	strb	r6, [r3, #6]
				if (phase_b == 0){
    10c2:	2c00      	cmp	r4, #0
    10c4:	f47f af6c 	bne.w	fa0 <grid_module_hardware_transfer_complete_cb+0x28>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = phase_a;
    10c8:	4b61      	ldr	r3, [pc, #388]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
    10ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    10ce:	715e      	strb	r6, [r3, #5]
				if (phase_a && phase_b){
    10d0:	2e00      	cmp	r6, #0
    10d2:	f000 810b 	beq.w	12ec <grid_module_hardware_transfer_complete_cb+0x374>
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    10d6:	4b5e      	ldr	r3, [pc, #376]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
    10d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    10dc:	79db      	ldrb	r3, [r3, #7]
    10de:	42a3      	cmp	r3, r4
    10e0:	f43f af78 	beq.w	fd4 <grid_module_hardware_transfer_complete_cb+0x5c>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    10e4:	4b5a      	ldr	r3, [pc, #360]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
    10e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    10ea:	71dc      	strb	r4, [r3, #7]
				}
				else{
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = phase_b;
    10ec:	4b58      	ldr	r3, [pc, #352]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
    10ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    10f2:	715c      	strb	r4, [r3, #5]
				}
					
				if (phase_a && phase_b){
    10f4:	2c00      	cmp	r4, #0
    10f6:	f43f af6d 	beq.w	fd4 <grid_module_hardware_transfer_complete_cb+0x5c>

					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction*2 -1;
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value %= 128;
    10fa:	461c      	mov	r4, r3
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction*2 -1;
    10fc:	78db      	ldrb	r3, [r3, #3]
    10fe:	3301      	adds	r3, #1
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value %= 128;
    1100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1104:	70e3      	strb	r3, [r4, #3]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_changed = 1;
    1106:	2301      	movs	r3, #1
    1108:	7123      	strb	r3, [r4, #4]
					
										CRITICAL_SECTION_ENTER()
    110a:	a803      	add	r0, sp, #12
    110c:	4b54      	ldr	r3, [pc, #336]	; (1260 <grid_module_hardware_transfer_complete_cb+0x2e8>)
    110e:	4798      	blx	r3
					
					uint8_t command = GRID_MSG_COMMAND_MIDI_CONTROLCHANGE;
					uint8_t value = grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    1110:	78e6      	ldrb	r6, [r4, #3]
					uint8_t actuator = 2*value;
					
					if (value != mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0]){
    1112:	f105 0411 	add.w	r4, r5, #17
    1116:	0124      	lsls	r4, r4, #4
    1118:	4b52      	ldr	r3, [pc, #328]	; (1264 <grid_module_hardware_transfer_complete_cb+0x2ec>)
    111a:	685b      	ldr	r3, [r3, #4]
    111c:	4423      	add	r3, r4
    111e:	68da      	ldr	r2, [r3, #12]
    1120:	7812      	ldrb	r2, [r2, #0]
    1122:	42b2      	cmp	r2, r6
    1124:	d02d      	beq.n	1182 <grid_module_hardware_transfer_complete_cb+0x20a>
					
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[5], 2, command);
    1126:	6858      	ldr	r0, [r3, #4]
    1128:	22b0      	movs	r2, #176	; 0xb0
    112a:	2102      	movs	r1, #2
    112c:	3005      	adds	r0, #5
    112e:	f8df 9140 	ldr.w	r9, [pc, #320]	; 1270 <grid_module_hardware_transfer_complete_cb+0x2f8>
    1132:	47c8      	blx	r9
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    1134:	f8df 812c 	ldr.w	r8, [pc, #300]	; 1264 <grid_module_hardware_transfer_complete_cb+0x2ec>
    1138:	f8d8 3004 	ldr.w	r3, [r8, #4]
    113c:	4423      	add	r3, r4
    113e:	6858      	ldr	r0, [r3, #4]
    1140:	462a      	mov	r2, r5
    1142:	2102      	movs	r1, #2
    1144:	3007      	adds	r0, #7
    1146:	47c8      	blx	r9
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[9], 2, value);
    1148:	f8d8 3004 	ldr.w	r3, [r8, #4]
    114c:	4423      	add	r3, r4
    114e:	6858      	ldr	r0, [r3, #4]
    1150:	4632      	mov	r2, r6
    1152:	2102      	movs	r1, #2
    1154:	3009      	adds	r0, #9
    1156:	47c8      	blx	r9
					uint8_t actuator = 2*value;
    1158:	0072      	lsls	r2, r6, #1
						
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[21], 2, actuator);
    115a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    115e:	4423      	add	r3, r4
    1160:	6858      	ldr	r0, [r3, #4]
    1162:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1166:	2102      	movs	r1, #2
    1168:	3015      	adds	r0, #21
    116a:	47c8      	blx	r9
						mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = value;
    116c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1170:	441c      	add	r4, r3
    1172:	68e3      	ldr	r3, [r4, #12]
    1174:	701e      	strb	r6, [r3, #0]
						
						grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16);
    1176:	f105 0111 	add.w	r1, r5, #17
    117a:	b2c9      	uxtb	r1, r1
    117c:	4640      	mov	r0, r8
    117e:	4b3a      	ldr	r3, [pc, #232]	; (1268 <grid_module_hardware_transfer_complete_cb+0x2f0>)
    1180:	4798      	blx	r3
						
					}
	
					CRITICAL_SECTION_LEAVE()
    1182:	a803      	add	r0, sp, #12
    1184:	4b39      	ldr	r3, [pc, #228]	; (126c <grid_module_hardware_transfer_complete_cb+0x2f4>)
    1186:	4798      	blx	r3
    1188:	e724      	b.n	fd4 <grid_module_hardware_transfer_complete_cb+0x5c>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value %= 128;
    118a:	461e      	mov	r6, r3
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction*2 -1;
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	3b01      	subs	r3, #1
    1190:	b2d2      	uxtb	r2, r2
    1192:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value %= 128;
    1196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    119a:	70f3      	strb	r3, [r6, #3]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_changed = 1;
    119c:	2301      	movs	r3, #1
    119e:	7133      	strb	r3, [r6, #4]
					CRITICAL_SECTION_ENTER()
    11a0:	a802      	add	r0, sp, #8
    11a2:	4b2f      	ldr	r3, [pc, #188]	; (1260 <grid_module_hardware_transfer_complete_cb+0x2e8>)
    11a4:	4798      	blx	r3
					uint8_t value = grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    11a6:	f896 8003 	ldrb.w	r8, [r6, #3]
					if (value != mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0]){
    11aa:	f105 0611 	add.w	r6, r5, #17
    11ae:	0136      	lsls	r6, r6, #4
    11b0:	4b2c      	ldr	r3, [pc, #176]	; (1264 <grid_module_hardware_transfer_complete_cb+0x2ec>)
    11b2:	685b      	ldr	r3, [r3, #4]
    11b4:	4433      	add	r3, r6
    11b6:	68da      	ldr	r2, [r3, #12]
    11b8:	7812      	ldrb	r2, [r2, #0]
    11ba:	4542      	cmp	r2, r8
    11bc:	d02f      	beq.n	121e <grid_module_hardware_transfer_complete_cb+0x2a6>
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[5], 2, command);
    11be:	6858      	ldr	r0, [r3, #4]
    11c0:	22b0      	movs	r2, #176	; 0xb0
    11c2:	2102      	movs	r1, #2
    11c4:	3005      	adds	r0, #5
    11c6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1270 <grid_module_hardware_transfer_complete_cb+0x2f8>
    11ca:	47d0      	blx	sl
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    11cc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1264 <grid_module_hardware_transfer_complete_cb+0x2ec>
    11d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    11d4:	4433      	add	r3, r6
    11d6:	6858      	ldr	r0, [r3, #4]
    11d8:	462a      	mov	r2, r5
    11da:	2102      	movs	r1, #2
    11dc:	3007      	adds	r0, #7
    11de:	47d0      	blx	sl
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[9], 2, value);
    11e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    11e4:	4433      	add	r3, r6
    11e6:	6858      	ldr	r0, [r3, #4]
    11e8:	4642      	mov	r2, r8
    11ea:	2102      	movs	r1, #2
    11ec:	3009      	adds	r0, #9
    11ee:	47d0      	blx	sl
					uint8_t actuator = 2*value;
    11f0:	ea4f 0248 	mov.w	r2, r8, lsl #1
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[21], 2, actuator);
    11f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    11f8:	4433      	add	r3, r6
    11fa:	6858      	ldr	r0, [r3, #4]
    11fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1200:	2102      	movs	r1, #2
    1202:	3015      	adds	r0, #21
    1204:	47d0      	blx	sl
						mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = value;
    1206:	f8d9 3004 	ldr.w	r3, [r9, #4]
    120a:	441e      	add	r6, r3
    120c:	68f3      	ldr	r3, [r6, #12]
    120e:	f883 8000 	strb.w	r8, [r3]
						grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16);
    1212:	f105 0111 	add.w	r1, r5, #17
    1216:	b2c9      	uxtb	r1, r1
    1218:	4648      	mov	r0, r9
    121a:	4b13      	ldr	r3, [pc, #76]	; (1268 <grid_module_hardware_transfer_complete_cb+0x2f0>)
    121c:	4798      	blx	r3
					CRITICAL_SECTION_LEAVE()
    121e:	a802      	add	r0, sp, #8
    1220:	4b12      	ldr	r3, [pc, #72]	; (126c <grid_module_hardware_transfer_complete_cb+0x2f4>)
    1222:	4798      	blx	r3
    1224:	e757      	b.n	10d6 <grid_module_hardware_transfer_complete_cb+0x15e>
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    1226:	4b0a      	ldr	r3, [pc, #40]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
    1228:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    122c:	79db      	ldrb	r3, [r3, #7]
    122e:	42a3      	cmp	r3, r4
    1230:	f43f aed0 	beq.w	fd4 <grid_module_hardware_transfer_complete_cb+0x5c>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    1234:	4b06      	ldr	r3, [pc, #24]	; (1250 <grid_module_hardware_transfer_complete_cb+0x2d8>)
    1236:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    123a:	71dc      	strb	r4, [r3, #7]
				if (phase_a == 0){
    123c:	2e00      	cmp	r6, #0
    123e:	f47f af55 	bne.w	10ec <grid_module_hardware_transfer_complete_cb+0x174>
    1242:	e6c1      	b.n	fc8 <grid_module_hardware_transfer_complete_cb+0x50>
    1244:	00002501 	.word	0x00002501
    1248:	000025d9 	.word	0x000025d9
    124c:	41008000 	.word	0x41008000
    1250:	200021f4 	.word	0x200021f4
    1254:	20000614 	.word	0x20000614
    1258:	20001830 	.word	0x20001830
    125c:	0000b8b4 	.word	0x0000b8b4
    1260:	00004099 	.word	0x00004099
    1264:	20001a24 	.word	0x20001a24
    1268:	00003b83 	.word	0x00003b83
    126c:	000040a7 	.word	0x000040a7
    1270:	000037a5 	.word	0x000037a5
			
	}
		
	
	
	CRITICAL_SECTION_ENTER()
    1274:	a804      	add	r0, sp, #16
    1276:	4c24      	ldr	r4, [pc, #144]	; (1308 <grid_module_hardware_transfer_complete_cb+0x390>)
    1278:	47a0      	blx	r4
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    127a:	a805      	add	r0, sp, #20
    127c:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    127e:	4b23      	ldr	r3, [pc, #140]	; (130c <grid_module_hardware_transfer_complete_cb+0x394>)
    1280:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1284:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1288:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    128c:	4054      	eors	r4, r2
    128e:	400c      	ands	r4, r1
    1290:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    1292:	a805      	add	r0, sp, #20
    1294:	4b1e      	ldr	r3, [pc, #120]	; (1310 <grid_module_hardware_transfer_complete_cb+0x398>)
    1296:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    1298:	4b1e      	ldr	r3, [pc, #120]	; (1314 <grid_module_hardware_transfer_complete_cb+0x39c>)
    129a:	685b      	ldr	r3, [r3, #4]
    129c:	68da      	ldr	r2, [r3, #12]
    129e:	7813      	ldrb	r3, [r2, #0]
    12a0:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    12a4:	429c      	cmp	r4, r3
    12a6:	d00e      	beq.n	12c6 <grid_module_hardware_transfer_complete_cb+0x34e>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    12a8:	b9e3      	cbnz	r3, 12e4 <grid_module_hardware_transfer_complete_cb+0x36c>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
			mod->report_array[report_index].helper[0] = 1;
    12aa:	2301      	movs	r3, #1
    12ac:	7013      	strb	r3, [r2, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    12ae:	2280      	movs	r2, #128	; 0x80
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    12b0:	4c18      	ldr	r4, [pc, #96]	; (1314 <grid_module_hardware_transfer_complete_cb+0x39c>)
    12b2:	6863      	ldr	r3, [r4, #4]
    12b4:	6858      	ldr	r0, [r3, #4]
    12b6:	2102      	movs	r1, #2
    12b8:	3003      	adds	r0, #3
    12ba:	4b17      	ldr	r3, [pc, #92]	; (1318 <grid_module_hardware_transfer_complete_cb+0x3a0>)
    12bc:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    12be:	2100      	movs	r1, #0
    12c0:	4620      	mov	r0, r4
    12c2:	4b16      	ldr	r3, [pc, #88]	; (131c <grid_module_hardware_transfer_complete_cb+0x3a4>)
    12c4:	4798      	blx	r3
	}

	CRITICAL_SECTION_LEAVE()
    12c6:	a804      	add	r0, sp, #16
    12c8:	4b11      	ldr	r3, [pc, #68]	; (1310 <grid_module_hardware_transfer_complete_cb+0x398>)
    12ca:	4798      	blx	r3

		
	
	grid_sync_set_level(GRID_SYNC_1, 0);
    12cc:	2100      	movs	r1, #0
    12ce:	2001      	movs	r0, #1
    12d0:	4b13      	ldr	r3, [pc, #76]	; (1320 <grid_module_hardware_transfer_complete_cb+0x3a8>)
    12d2:	4798      	blx	r3

	grid_module_hardware_transfer_complete = 0;
    12d4:	2200      	movs	r2, #0
    12d6:	4b13      	ldr	r3, [pc, #76]	; (1324 <grid_module_hardware_transfer_complete_cb+0x3ac>)
    12d8:	739a      	strb	r2, [r3, #14]
	grid_module_hardware_start_transfer();
    12da:	4b13      	ldr	r3, [pc, #76]	; (1328 <grid_module_hardware_transfer_complete_cb+0x3b0>)
    12dc:	4798      	blx	r3
}
    12de:	b007      	add	sp, #28
    12e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod->report_array[report_index].helper[0] = 0;
    12e4:	2300      	movs	r3, #0
    12e6:	7013      	strb	r3, [r2, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    12e8:	2281      	movs	r2, #129	; 0x81
    12ea:	e7e1      	b.n	12b0 <grid_module_hardware_transfer_complete_cb+0x338>
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    12ec:	4b0f      	ldr	r3, [pc, #60]	; (132c <grid_module_hardware_transfer_complete_cb+0x3b4>)
    12ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    12f2:	79db      	ldrb	r3, [r3, #7]
    12f4:	2b00      	cmp	r3, #0
    12f6:	f43f ae6d 	beq.w	fd4 <grid_module_hardware_transfer_complete_cb+0x5c>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    12fa:	4b0c      	ldr	r3, [pc, #48]	; (132c <grid_module_hardware_transfer_complete_cb+0x3b4>)
    12fc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    1300:	2200      	movs	r2, #0
    1302:	71da      	strb	r2, [r3, #7]
    1304:	e660      	b.n	fc8 <grid_module_hardware_transfer_complete_cb+0x50>
    1306:	bf00      	nop
    1308:	00004099 	.word	0x00004099
    130c:	41008000 	.word	0x41008000
    1310:	000040a7 	.word	0x000040a7
    1314:	20001a24 	.word	0x20001a24
    1318:	000037a5 	.word	0x000037a5
    131c:	00003b83 	.word	0x00003b83
    1320:	000025d9 	.word	0x000025d9
    1324:	20000614 	.word	0x20000614
    1328:	00000f41 	.word	0x00000f41
    132c:	200021f4 	.word	0x200021f4

00001330 <grid_module_en16_reva_init>:

}



void grid_module_en16_reva_init(struct grid_ui_model* mod){
    1330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1334:	b09d      	sub	sp, #116	; 0x74
    1336:	4604      	mov	r4, r0
    1338:	900d      	str	r0, [sp, #52]	; 0x34
	
	mod->report_length = 1+16+16;
    133a:	2321      	movs	r3, #33	; 0x21
    133c:	7003      	strb	r3, [r0, #0]
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    133e:	f44f 7004 	mov.w	r0, #528	; 0x210
    1342:	4b55      	ldr	r3, [pc, #340]	; (1498 <grid_module_en16_reva_init+0x168>)
    1344:	4798      	blx	r3
    1346:	6060      	str	r0, [r4, #4]
    1348:	2501      	movs	r5, #1
    134a:	2400      	movs	r4, #0
			);
				
		}

		
		uint8_t payload_length = strlen(payload_template);
    134c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 14dc <grid_module_en16_reva_init+0x1ac>

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    1350:	f8df b18c 	ldr.w	fp, [pc, #396]	; 14e0 <grid_module_en16_reva_init+0x1b0>
		
		uint8_t helper_length = strlen(helper_template);

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    1354:	f8df a18c 	ldr.w	sl, [pc, #396]	; 14e4 <grid_module_en16_reva_init+0x1b4>
    1358:	e055      	b.n	1406 <grid_module_en16_reva_init+0xd6>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c%",
    135a:	2303      	movs	r3, #3
    135c:	9303      	str	r3, [sp, #12]
    135e:	2339      	movs	r3, #57	; 0x39
    1360:	9302      	str	r3, [sp, #8]
    1362:	2383      	movs	r3, #131	; 0x83
    1364:	9301      	str	r3, [sp, #4]
    1366:	2380      	movs	r3, #128	; 0x80
    1368:	9300      	str	r3, [sp, #0]
    136a:	2301      	movs	r3, #1
    136c:	2202      	movs	r2, #2
    136e:	494b      	ldr	r1, [pc, #300]	; (149c <grid_module_en16_reva_init+0x16c>)
    1370:	a814      	add	r0, sp, #80	; 0x50
    1372:	4e4b      	ldr	r6, [pc, #300]	; (14a0 <grid_module_en16_reva_init+0x170>)
    1374:	47b0      	blx	r6
		uint8_t payload_length = strlen(payload_template);
    1376:	a814      	add	r0, sp, #80	; 0x50
    1378:	47c0      	blx	r8
    137a:	4607      	mov	r7, r0
		sprintf(helper_template, "00"); // LASTVALUE
    137c:	ae0f      	add	r6, sp, #60	; 0x3c
    137e:	f8db 3000 	ldr.w	r3, [fp]
    1382:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    1386:	0c1b      	lsrs	r3, r3, #16
    1388:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		uint8_t helper_length = strlen(helper_template);
    138c:	4630      	mov	r0, r6
    138e:	47c0      	blx	r8
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    1390:	b2c0      	uxtb	r0, r0
    1392:	9001      	str	r0, [sp, #4]
    1394:	9600      	str	r6, [sp, #0]
    1396:	b2fb      	uxtb	r3, r7
    1398:	aa14      	add	r2, sp, #80	; 0x50
    139a:	2100      	movs	r1, #0
    139c:	980d      	ldr	r0, [sp, #52]	; 0x34
    139e:	47d0      	blx	sl
    13a0:	e02e      	b.n	1400 <grid_module_en16_reva_init+0xd0>
    13a2:	f1a4 0011 	sub.w	r0, r4, #17
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    13a6:	2103      	movs	r1, #3
    13a8:	910b      	str	r1, [sp, #44]	; 0x2c
    13aa:	2300      	movs	r3, #0
    13ac:	930a      	str	r3, [sp, #40]	; 0x28
    13ae:	9009      	str	r0, [sp, #36]	; 0x24
    13b0:	2263      	movs	r2, #99	; 0x63
    13b2:	9208      	str	r2, [sp, #32]
    13b4:	9307      	str	r3, [sp, #28]
    13b6:	9106      	str	r1, [sp, #24]
    13b8:	2202      	movs	r2, #2
    13ba:	9205      	str	r2, [sp, #20]
    13bc:	9104      	str	r1, [sp, #16]
    13be:	9303      	str	r3, [sp, #12]
    13c0:	9002      	str	r0, [sp, #8]
    13c2:	21b0      	movs	r1, #176	; 0xb0
    13c4:	9101      	str	r1, [sp, #4]
    13c6:	9300      	str	r3, [sp, #0]
    13c8:	4936      	ldr	r1, [pc, #216]	; (14a4 <grid_module_en16_reva_init+0x174>)
    13ca:	a814      	add	r0, sp, #80	; 0x50
    13cc:	4f34      	ldr	r7, [pc, #208]	; (14a0 <grid_module_en16_reva_init+0x170>)
    13ce:	47b8      	blx	r7
		uint8_t payload_length = strlen(payload_template);
    13d0:	a814      	add	r0, sp, #80	; 0x50
    13d2:	47c0      	blx	r8
    13d4:	4681      	mov	r9, r0
		sprintf(helper_template, "00"); // LASTVALUE
    13d6:	af0f      	add	r7, sp, #60	; 0x3c
    13d8:	f8db 3000 	ldr.w	r3, [fp]
    13dc:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    13e0:	0c1b      	lsrs	r3, r3, #16
    13e2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		uint8_t helper_length = strlen(helper_template);
    13e6:	4638      	mov	r0, r7
    13e8:	47c0      	blx	r8
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    13ea:	b2c0      	uxtb	r0, r0
    13ec:	9001      	str	r0, [sp, #4]
    13ee:	9700      	str	r7, [sp, #0]
    13f0:	fa5f f389 	uxtb.w	r3, r9
    13f4:	aa14      	add	r2, sp, #80	; 0x50
    13f6:	4631      	mov	r1, r6
    13f8:	980d      	ldr	r0, [sp, #52]	; 0x34
    13fa:	47d0      	blx	sl
	for(uint8_t i=0; i<1+16+16; i++){
    13fc:	2d20      	cmp	r5, #32
    13fe:	d81e      	bhi.n	143e <grid_module_en16_reva_init+0x10e>
    1400:	3401      	adds	r4, #1
    1402:	3501      	adds	r5, #1
    1404:	b2ed      	uxtb	r5, r5
		if (i == 0){
    1406:	f014 06ff 	ands.w	r6, r4, #255	; 0xff
    140a:	d0a6      	beq.n	135a <grid_module_en16_reva_init+0x2a>
		else if (i<1+16){
    140c:	2e10      	cmp	r6, #16
    140e:	d8c8      	bhi.n	13a2 <grid_module_en16_reva_init+0x72>
    1410:	1e60      	subs	r0, r4, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    1412:	2103      	movs	r1, #3
    1414:	910b      	str	r1, [sp, #44]	; 0x2c
    1416:	2300      	movs	r3, #0
    1418:	930a      	str	r3, [sp, #40]	; 0x28
    141a:	9009      	str	r0, [sp, #36]	; 0x24
    141c:	2263      	movs	r2, #99	; 0x63
    141e:	9208      	str	r2, [sp, #32]
    1420:	9307      	str	r3, [sp, #28]
    1422:	9106      	str	r1, [sp, #24]
    1424:	2202      	movs	r2, #2
    1426:	9205      	str	r2, [sp, #20]
    1428:	9104      	str	r1, [sp, #16]
    142a:	9303      	str	r3, [sp, #12]
    142c:	9002      	str	r0, [sp, #8]
    142e:	2190      	movs	r1, #144	; 0x90
    1430:	9101      	str	r1, [sp, #4]
    1432:	9300      	str	r3, [sp, #0]
    1434:	491b      	ldr	r1, [pc, #108]	; (14a4 <grid_module_en16_reva_init+0x174>)
    1436:	a814      	add	r0, sp, #80	; 0x50
    1438:	4f19      	ldr	r7, [pc, #100]	; (14a0 <grid_module_en16_reva_init+0x170>)
    143a:	47b8      	blx	r7
    143c:	e7c8      	b.n	13d0 <grid_module_en16_reva_init+0xa0>
    143e:	2300      	movs	r3, #0
		
	}

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    1440:	4a19      	ldr	r2, [pc, #100]	; (14a8 <grid_module_en16_reva_init+0x178>)
    1442:	f802 3033 	strb.w	r3, [r2, r3, lsl #3]
    1446:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    1448:	2b10      	cmp	r3, #16
    144a:	d1fa      	bne.n	1442 <grid_module_en16_reva_init+0x112>
	}
	
	
	grid_led_init(&grid_led_state, 16);
    144c:	4c17      	ldr	r4, [pc, #92]	; (14ac <grid_module_en16_reva_init+0x17c>)
    144e:	2110      	movs	r1, #16
    1450:	4620      	mov	r0, r4
    1452:	4b17      	ldr	r3, [pc, #92]	; (14b0 <grid_module_en16_reva_init+0x180>)
    1454:	4798      	blx	r3
	grid_module_init_animation(&grid_led_state);
    1456:	4620      	mov	r0, r4
    1458:	4b16      	ldr	r3, [pc, #88]	; (14b4 <grid_module_en16_reva_init+0x184>)
    145a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    145c:	4b16      	ldr	r3, [pc, #88]	; (14b8 <grid_module_en16_reva_init+0x188>)
    145e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1462:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1464:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    146a:	629a      	str	r2, [r3, #40]	; 0x28
    146c:	4a13      	ldr	r2, [pc, #76]	; (14bc <grid_module_en16_reva_init+0x18c>)
    146e:	629a      	str	r2, [r3, #40]	; 0x28
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    1470:	4c13      	ldr	r4, [pc, #76]	; (14c0 <grid_module_en16_reva_init+0x190>)
    1472:	2103      	movs	r1, #3
    1474:	4620      	mov	r0, r4
    1476:	4b13      	ldr	r3, [pc, #76]	; (14c4 <grid_module_en16_reva_init+0x194>)
    1478:	4798      	blx	r3
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_hardware_io);
    147a:	4913      	ldr	r1, [pc, #76]	; (14c8 <grid_module_en16_reva_init+0x198>)
    147c:	4620      	mov	r0, r4
    147e:	4b13      	ldr	r3, [pc, #76]	; (14cc <grid_module_en16_reva_init+0x19c>)
    1480:	4798      	blx	r3
	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_hardware_transfer_complete_cb);
    1482:	4a13      	ldr	r2, [pc, #76]	; (14d0 <grid_module_en16_reva_init+0x1a0>)
    1484:	2100      	movs	r1, #0
    1486:	4620      	mov	r0, r4
    1488:	4b12      	ldr	r3, [pc, #72]	; (14d4 <grid_module_en16_reva_init+0x1a4>)
    148a:	4798      	blx	r3
	
	grid_module_hardware_init();
	grid_module_hardware_start_transfer();
    148c:	4b12      	ldr	r3, [pc, #72]	; (14d8 <grid_module_en16_reva_init+0x1a8>)
    148e:	4798      	blx	r3
	
}
    1490:	b01d      	add	sp, #116	; 0x74
    1492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1496:	bf00      	nop
    1498:	0000afa9 	.word	0x0000afa9
    149c:	0000b8c4 	.word	0x0000b8c4
    14a0:	0000b159 	.word	0x0000b159
    14a4:	0000b8e0 	.word	0x0000b8e0
    14a8:	200021f4 	.word	0x200021f4
    14ac:	20002458 	.word	0x20002458
    14b0:	00002339 	.word	0x00002339
    14b4:	00002631 	.word	0x00002631
    14b8:	41008000 	.word	0x41008000
    14bc:	c0000020 	.word	0xc0000020
    14c0:	200012c0 	.word	0x200012c0
    14c4:	00004541 	.word	0x00004541
    14c8:	20000624 	.word	0x20000624
    14cc:	00004629 	.word	0x00004629
    14d0:	00000f79 	.word	0x00000f79
    14d4:	000045e5 	.word	0x000045e5
    14d8:	00000f41 	.word	0x00000f41
    14dc:	0000b1a1 	.word	0x0000b1a1
    14e0:	0000b8dc 	.word	0x0000b8dc
    14e4:	00003ac5 	.word	0x00003ac5

000014e8 <grid_ain_channel_init>:
static struct AIN_Channel* ain_channel_buffer;
static uint8_t ain_channel_buffer_length;
static uint8_t ain_channel_buffer_depth;


uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    14e8:	b538      	push	{r3, r4, r5, lr}
    14ea:	4604      	mov	r4, r0
    14ec:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    14ee:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    14f0:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    14f2:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    14f4:	2300      	movs	r3, #0
    14f6:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    14f8:	0048      	lsls	r0, r1, #1
    14fa:	4b09      	ldr	r3, [pc, #36]	; (1520 <grid_ain_channel_init+0x38>)
    14fc:	4798      	blx	r3
    14fe:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1500:	b14d      	cbz	r5, 1516 <grid_ain_channel_init+0x2e>
    1502:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    1504:	4619      	mov	r1, r3
    1506:	6822      	ldr	r2, [r4, #0]
    1508:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    150c:	3301      	adds	r3, #1
    150e:	b2db      	uxtb	r3, r3
    1510:	7922      	ldrb	r2, [r4, #4]
    1512:	429a      	cmp	r2, r3
    1514:	d8f7      	bhi.n	1506 <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    1516:	2000      	movs	r0, #0
    1518:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    151a:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    151c:	bd38      	pop	{r3, r4, r5, pc}
    151e:	bf00      	nop
    1520:	0000afa9 	.word	0x0000afa9

00001524 <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    1524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1528:	4605      	mov	r5, r0
    152a:	460e      	mov	r6, r1
    152c:	4691      	mov	r9, r2
    152e:	4698      	mov	r8, r3
	
	ain_channel_buffer_length = length;
    1530:	4c0c      	ldr	r4, [pc, #48]	; (1564 <grid_ain_init+0x40>)
    1532:	7020      	strb	r0, [r4, #0]
	ain_channel_buffer_depth = depth;
    1534:	7061      	strb	r1, [r4, #1]
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(ain_channel_buffer_length * sizeof(struct AIN_Channel));
    1536:	0100      	lsls	r0, r0, #4
    1538:	4b0b      	ldr	r3, [pc, #44]	; (1568 <grid_ain_init+0x44>)
    153a:	4798      	blx	r3
    153c:	6060      	str	r0, [r4, #4]

	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    153e:	b175      	cbz	r5, 155e <grid_ain_init+0x3a>
    1540:	4604      	mov	r4, r0
    1542:	3d01      	subs	r5, #1
    1544:	b2ed      	uxtb	r5, r5
    1546:	3501      	adds	r5, #1
    1548:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		grid_ain_channel_init(&ain_channel_buffer[i], ain_channel_buffer_depth, format, resolution);
    154c:	4f07      	ldr	r7, [pc, #28]	; (156c <grid_ain_init+0x48>)
    154e:	4643      	mov	r3, r8
    1550:	464a      	mov	r2, r9
    1552:	4631      	mov	r1, r6
    1554:	4620      	mov	r0, r4
    1556:	47b8      	blx	r7
    1558:	3410      	adds	r4, #16
	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    155a:	42ac      	cmp	r4, r5
    155c:	d1f7      	bne.n	154e <grid_ain_init+0x2a>
	}

	return 0;
}
    155e:	2000      	movs	r0, #0
    1560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1564:	2000062c 	.word	0x2000062c
    1568:	0000afa9 	.word	0x0000afa9
    156c:	000014e9 	.word	0x000014e9

00001570 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    1570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    1574:	0100      	lsls	r0, r0, #4
    1576:	4b3c      	ldr	r3, [pc, #240]	; (1668 <grid_ain_add_sample+0xf8>)
    1578:	f8d3 a004 	ldr.w	sl, [r3, #4]
    157c:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1580:	f89c 6004 	ldrb.w	r6, [ip, #4]
    1584:	2e00      	cmp	r6, #0
    1586:	d05b      	beq.n	1640 <grid_ain_add_sample+0xd0>
    1588:	f85a 5000 	ldr.w	r5, [sl, r0]
    158c:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    158e:	2200      	movs	r2, #0
    1590:	4690      	mov	r8, r2
    1592:	4691      	mov	r9, r2
    1594:	4696      	mov	lr, r2
    1596:	f64f 77ff 	movw	r7, #65535	; 0xffff
    159a:	4614      	mov	r4, r2
    159c:	fa5f fb82 	uxtb.w	fp, r2
    15a0:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    15a4:	441c      	add	r4, r3
		
		if (current > maximum){
    15a6:	4573      	cmp	r3, lr
    15a8:	bf84      	itt	hi
    15aa:	46d8      	movhi	r8, fp
			maximum = current;
    15ac:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    15ae:	42bb      	cmp	r3, r7
    15b0:	bf3c      	itt	cc
    15b2:	46d9      	movcc	r9, fp
			minimum = current;
    15b4:	461f      	movcc	r7, r3
    15b6:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    15b8:	b2d3      	uxtb	r3, r2
    15ba:	42b3      	cmp	r3, r6
    15bc:	d3ee      	bcc.n	159c <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    15be:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    15c2:	b2b6      	uxth	r6, r6
    15c4:	428e      	cmp	r6, r1
    15c6:	d23f      	bcs.n	1648 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    15c8:	f85a 3000 	ldr.w	r3, [sl, r0]
    15cc:	440c      	add	r4, r1
    15ce:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    15d2:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    15d4:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    15d8:	f89c 3004 	ldrb.w	r3, [ip, #4]
    15dc:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    15e0:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    15e4:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    15e8:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    15ea:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    15ee:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    15f0:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    15f2:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    15f4:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    15f8:	b29b      	uxth	r3, r3
    15fa:	408b      	lsls	r3, r1
    15fc:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    15fe:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    1602:	1b92      	subs	r2, r2, r6
    1604:	2a00      	cmp	r2, #0
    1606:	bfb8      	it	lt
    1608:	4252      	neglt	r2, r2
    160a:	2601      	movs	r6, #1
    160c:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1610:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    1614:	42be      	cmp	r6, r7
    1616:	d020      	beq.n	165a <grid_ain_add_sample+0xea>
    1618:	4282      	cmp	r2, r0
    161a:	dc08      	bgt.n	162e <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    161c:	2201      	movs	r2, #1
    161e:	fa02 f505 	lsl.w	r5, r2, r5
    1622:	fa02 f101 	lsl.w	r1, r2, r1
    1626:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1628:	428f      	cmp	r7, r1
    162a:	d000      	beq.n	162e <grid_ain_add_sample+0xbe>
    162c:	b9c7      	cbnz	r7, 1660 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    162e:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    1632:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    1636:	2001      	movs	r0, #1
    1638:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    1640:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    1642:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    1644:	2400      	movs	r4, #0
    1646:	e7ba      	b.n	15be <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    1648:	f85a 3000 	ldr.w	r3, [sl, r0]
    164c:	440c      	add	r4, r1
    164e:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    1652:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    1654:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    1658:	e7be      	b.n	15d8 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    165a:	2000      	movs	r0, #0
    165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1660:	2000      	movs	r0, #0
	}
	
}
    1662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1666:	bf00      	nop
    1668:	2000062c 	.word	0x2000062c

0000166c <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    166c:	4b02      	ldr	r3, [pc, #8]	; (1678 <grid_ain_get_changed+0xc>)
	return instance->result_changed;
    166e:	685b      	ldr	r3, [r3, #4]
    1670:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    1674:	7b00      	ldrb	r0, [r0, #12]
    1676:	4770      	bx	lr
    1678:	2000062c 	.word	0x2000062c

0000167c <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    167c:	4b09      	ldr	r3, [pc, #36]	; (16a4 <grid_ain_get_average+0x28>)
    167e:	685b      	ldr	r3, [r3, #4]
    1680:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    1684:	2300      	movs	r3, #0
    1686:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1688:	1fcb      	subs	r3, r1, #7
    168a:	b2db      	uxtb	r3, r3
    168c:	2b07      	cmp	r3, #7
    168e:	d806      	bhi.n	169e <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1690:	8903      	ldrh	r3, [r0, #8]
    1692:	7940      	ldrb	r0, [r0, #5]
    1694:	1a40      	subs	r0, r0, r1
    1696:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    169a:	b280      	uxth	r0, r0
    169c:	4770      	bx	lr
    169e:	2000      	movs	r0, #0
    16a0:	e7fb      	b.n	169a <grid_ain_get_average+0x1e>
    16a2:	bf00      	nop
    16a4:	2000062c 	.word	0x2000062c

000016a8 <grid_buffer_init>:
uint8_t usb_tx_double_buffer[GRID_BUFFER_TX_SIZE];
uint8_t usb_rx_double_buffer[GRID_BUFFER_RX_SIZE];



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    16a8:	b538      	push	{r3, r4, r5, lr}
    16aa:	4604      	mov	r4, r0
    16ac:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    16ae:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    16b0:	2300      	movs	r3, #0
    16b2:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    16b4:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    16b6:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    16b8:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    16ba:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    16bc:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    16be:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    16c0:	4608      	mov	r0, r1
    16c2:	4b08      	ldr	r3, [pc, #32]	; (16e4 <grid_buffer_init+0x3c>)
    16c4:	4798      	blx	r3
    16c6:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    16c8:	b900      	cbnz	r0, 16cc <grid_buffer_init+0x24>
    16ca:	e7fe      	b.n	16ca <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    16cc:	b145      	cbz	r5, 16e0 <grid_buffer_init+0x38>
    16ce:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    16d0:	4619      	mov	r1, r3
    16d2:	6862      	ldr	r2, [r4, #4]
    16d4:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    16d6:	3301      	adds	r3, #1
    16d8:	b29b      	uxth	r3, r3
    16da:	8822      	ldrh	r2, [r4, #0]
    16dc:	429a      	cmp	r2, r3
    16de:	d8f8      	bhi.n	16d2 <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    16e0:	2001      	movs	r0, #1
    16e2:	bd38      	pop	{r3, r4, r5, pc}
    16e4:	0000afa9 	.word	0x0000afa9

000016e8 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    16e8:	8903      	ldrh	r3, [r0, #8]
    16ea:	8a02      	ldrh	r2, [r0, #16]
    16ec:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    16ee:	bf8f      	iteee	hi
    16f0:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    16f2:	8800      	ldrhls	r0, [r0, #0]
    16f4:	18c0      	addls	r0, r0, r3
    16f6:	1a80      	subls	r0, r0, r2
    16f8:	b280      	uxth	r0, r0

	return space;

	
	
}
    16fa:	4770      	bx	lr

000016fc <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    16fc:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    16fe:	8903      	ldrh	r3, [r0, #8]
    1700:	8a02      	ldrh	r2, [r0, #16]
    1702:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    1704:	bf9c      	itt	ls
    1706:	8804      	ldrhls	r4, [r0, #0]
    1708:	191b      	addls	r3, r3, r4
    170a:	1a9b      	subs	r3, r3, r2
    170c:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    170e:	428b      	cmp	r3, r1
    1710:	d90a      	bls.n	1728 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    1712:	440a      	add	r2, r1
    1714:	8804      	ldrh	r4, [r0, #0]
    1716:	fb92 f3f4 	sdiv	r3, r2, r4
    171a:	fb04 2213 	mls	r2, r4, r3, r2
    171e:	8242      	strh	r2, [r0, #18]
		
		return length;
    1720:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    1722:	f85d 4b04 	ldr.w	r4, [sp], #4
    1726:	4770      	bx	lr
		return 0; // failed
    1728:	2000      	movs	r0, #0
    172a:	e7fa      	b.n	1722 <grid_buffer_write_init+0x26>

0000172c <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    172c:	8a83      	ldrh	r3, [r0, #20]
    172e:	6842      	ldr	r2, [r0, #4]
    1730:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    1732:	8a83      	ldrh	r3, [r0, #20]
    1734:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    1736:	b29b      	uxth	r3, r3
    1738:	8801      	ldrh	r1, [r0, #0]
    173a:	fbb3 f2f1 	udiv	r2, r3, r1
    173e:	fb01 3312 	mls	r3, r1, r2, r3
    1742:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    1744:	2001      	movs	r0, #1
    1746:	4770      	bx	lr

00001748 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    1748:	8a83      	ldrh	r3, [r0, #20]
    174a:	8a42      	ldrh	r2, [r0, #18]
    174c:	429a      	cmp	r2, r3
    174e:	d000      	beq.n	1752 <grid_buffer_write_acknowledge+0xa>
    1750:	e7fe      	b.n	1750 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    1752:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    1754:	2001      	movs	r0, #1
    1756:	4770      	bx	lr

00001758 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1758:	8983      	ldrh	r3, [r0, #12]
    175a:	8942      	ldrh	r2, [r0, #10]
    175c:	429a      	cmp	r2, r3
    175e:	d000      	beq.n	1762 <grid_buffer_read_size+0xa>
    1760:	e7fe      	b.n	1760 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1762:	8902      	ldrh	r2, [r0, #8]
    1764:	429a      	cmp	r2, r3
    1766:	d000      	beq.n	176a <grid_buffer_read_size+0x12>
    1768:	e7fe      	b.n	1768 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    176a:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    176c:	8a05      	ldrh	r5, [r0, #16]
    176e:	42ab      	cmp	r3, r5
    1770:	d025      	beq.n	17be <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1772:	8804      	ldrh	r4, [r0, #0]
    1774:	b1fc      	cbz	r4, 17b6 <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1776:	4626      	mov	r6, r4
    1778:	fb93 f2f4 	sdiv	r2, r3, r4
    177c:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    1780:	b291      	uxth	r1, r2
    1782:	428d      	cmp	r5, r1
    1784:	d01d      	beq.n	17c2 <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    1786:	6840      	ldr	r0, [r0, #4]
    1788:	5c42      	ldrb	r2, [r0, r1]
    178a:	2a0a      	cmp	r2, #10
    178c:	d114      	bne.n	17b8 <grid_buffer_read_size+0x60>
    178e:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1790:	3301      	adds	r3, #1
    1792:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    1794:	bcf0      	pop	{r4, r5, r6, r7}
    1796:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1798:	fb92 f1f6 	sdiv	r1, r2, r6
    179c:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    17a0:	b28f      	uxth	r7, r1
    17a2:	42bd      	cmp	r5, r7
    17a4:	d00f      	beq.n	17c6 <grid_buffer_read_size+0x6e>
    17a6:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    17a8:	5dc1      	ldrb	r1, [r0, r7]
    17aa:	290a      	cmp	r1, #10
    17ac:	d0f0      	beq.n	1790 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    17ae:	3301      	adds	r3, #1
    17b0:	b29b      	uxth	r3, r3
    17b2:	42a3      	cmp	r3, r4
    17b4:	d1f0      	bne.n	1798 <grid_buffer_read_size+0x40>
    17b6:	e7fe      	b.n	17b6 <grid_buffer_read_size+0x5e>
    17b8:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    17ba:	2300      	movs	r3, #0
    17bc:	e7f7      	b.n	17ae <grid_buffer_read_size+0x56>
		return 0;
    17be:	2000      	movs	r0, #0
    17c0:	e7e8      	b.n	1794 <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    17c2:	2000      	movs	r0, #0
    17c4:	e7e6      	b.n	1794 <grid_buffer_read_size+0x3c>
    17c6:	2000      	movs	r0, #0
    17c8:	e7e4      	b.n	1794 <grid_buffer_read_size+0x3c>

000017ca <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    17ca:	8982      	ldrh	r2, [r0, #12]
    17cc:	8943      	ldrh	r3, [r0, #10]
    17ce:	4293      	cmp	r3, r2
    17d0:	d000      	beq.n	17d4 <grid_buffer_read_init+0xa>
    17d2:	e7fe      	b.n	17d2 <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    17d4:	8903      	ldrh	r3, [r0, #8]
    17d6:	4293      	cmp	r3, r2
    17d8:	d000      	beq.n	17dc <grid_buffer_read_init+0x12>
    17da:	e7fe      	b.n	17da <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    17dc:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    17de:	8a05      	ldrh	r5, [r0, #16]
    17e0:	42aa      	cmp	r2, r5
    17e2:	d031      	beq.n	1848 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    17e4:	8804      	ldrh	r4, [r0, #0]
    17e6:	b35c      	cbz	r4, 1840 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    17e8:	4626      	mov	r6, r4
    17ea:	fb92 f3f4 	sdiv	r3, r2, r4
    17ee:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    17f2:	b299      	uxth	r1, r3
    17f4:	428d      	cmp	r5, r1
    17f6:	d029      	beq.n	184c <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    17f8:	6847      	ldr	r7, [r0, #4]
    17fa:	460b      	mov	r3, r1
    17fc:	5c79      	ldrb	r1, [r7, r1]
    17fe:	290a      	cmp	r1, #10
    1800:	d11f      	bne.n	1842 <grid_buffer_read_init+0x78>
    1802:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    1804:	3301      	adds	r3, #1
    1806:	fb93 f2f4 	sdiv	r2, r3, r4
    180a:	fb04 3312 	mls	r3, r4, r2, r3
    180e:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1810:	1c4b      	adds	r3, r1, #1
    1812:	b29b      	uxth	r3, r3
    1814:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    1816:	4618      	mov	r0, r3
    1818:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    181a:	fb92 f3f6 	sdiv	r3, r2, r6
    181e:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    1822:	fa1f fe83 	uxth.w	lr, r3
    1826:	4575      	cmp	r5, lr
    1828:	d012      	beq.n	1850 <grid_buffer_read_init+0x86>
    182a:	4673      	mov	r3, lr
    182c:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    182e:	f817 e00e 	ldrb.w	lr, [r7, lr]
    1832:	f1be 0f0a 	cmp.w	lr, #10
    1836:	d0e5      	beq.n	1804 <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1838:	3101      	adds	r1, #1
    183a:	b289      	uxth	r1, r1
    183c:	42a1      	cmp	r1, r4
    183e:	d1ec      	bne.n	181a <grid_buffer_read_init+0x50>
    1840:	e7fe      	b.n	1840 <grid_buffer_read_init+0x76>
    1842:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1844:	2100      	movs	r1, #0
    1846:	e7f7      	b.n	1838 <grid_buffer_read_init+0x6e>
		return 0;
    1848:	2300      	movs	r3, #0
    184a:	e7e4      	b.n	1816 <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    184c:	2300      	movs	r3, #0
    184e:	e7e2      	b.n	1816 <grid_buffer_read_init+0x4c>
    1850:	2300      	movs	r3, #0
    1852:	e7e0      	b.n	1816 <grid_buffer_read_init+0x4c>

00001854 <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    1854:	8983      	ldrh	r3, [r0, #12]
    1856:	8941      	ldrh	r1, [r0, #10]
    1858:	4299      	cmp	r1, r3
    185a:	d00e      	beq.n	187a <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    185c:	b410      	push	{r4}
    185e:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    1860:	6841      	ldr	r1, [r0, #4]
    1862:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    1864:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    1866:	b29b      	uxth	r3, r3
    1868:	8814      	ldrh	r4, [r2, #0]
    186a:	fbb3 f1f4 	udiv	r1, r3, r4
    186e:	fb04 3311 	mls	r3, r4, r1, r3
    1872:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    1874:	f85d 4b04 	ldr.w	r4, [sp], #4
    1878:	4770      	bx	lr
    187a:	e7fe      	b.n	187a <grid_buffer_read_character+0x26>

0000187c <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    187c:	8983      	ldrh	r3, [r0, #12]
    187e:	8942      	ldrh	r2, [r0, #10]
    1880:	429a      	cmp	r2, r3
    1882:	d000      	beq.n	1886 <grid_buffer_read_acknowledge+0xa>
    1884:	e7fe      	b.n	1884 <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    1886:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1888:	2001      	movs	r0, #1
    188a:	4770      	bx	lr

0000188c <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    188c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1890:	4604      	mov	r4, r0
    1892:	4691      	mov	r9, r2
    1894:	4698      	mov	r8, r3
    1896:	f89d 6020 	ldrb.w	r6, [sp, #32]
    189a:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    189e:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    18a2:	4f23      	ldr	r7, [pc, #140]	; (1930 <grid_port_init+0xa4>)
    18a4:	47b8      	blx	r7
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    18a6:	4649      	mov	r1, r9
    18a8:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
    18ac:	47b8      	blx	r7
	
	por->dma_channel = dma;
    18ae:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    18b2:	71a3      	strb	r3, [r4, #6]
	
	por->direction = dir;
    18b4:	7165      	strb	r5, [r4, #5]
	
	por->usart	= usart;
    18b6:	f8c4 8000 	str.w	r8, [r4]
	por->type		= type;
    18ba:	7126      	strb	r6, [r4, #4]
	
	por->tx_double_buffer_status	= 0;
    18bc:	2300      	movs	r3, #0
    18be:	8123      	strh	r3, [r4, #8]
	por->rx_double_buffer_status	= 0;
    18c0:	82e3      	strh	r3, [r4, #22]
	
	
	por->partner_fi = 0;
    18c2:	f884 31e0 	strb.w	r3, [r4, #480]	; 0x1e0
	
	por->partner_hwcfg = 0;
    18c6:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
	por->partner_status = 1;
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    18ca:	2e01      	cmp	r6, #1
    18cc:	d004      	beq.n	18d8 <grid_port_init+0x4c>
	por->partner_status = 1;
    18ce:	2301      	movs	r3, #1
    18d0:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
    18d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		
		por->partner_status = 0;
    18d8:	2300      	movs	r3, #0
    18da:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
		por->partner_fi = 0;
		
		
		if (por->direction == GRID_MSG_NORTH){
    18de:	2d11      	cmp	r5, #17
    18e0:	d007      	beq.n	18f2 <grid_port_init+0x66>
			por->dx = 0;
			por->dy = 1;
		}
		else if (por->direction == GRID_MSG_EAST){
    18e2:	2d12      	cmp	r5, #18
    18e4:	d00c      	beq.n	1900 <grid_port_init+0x74>
			por->dx = 1;
			por->dy = 0;
		}
		else if (por->direction == GRID_MSG_SOUTH){
    18e6:	2d13      	cmp	r5, #19
    18e8:	d012      	beq.n	1910 <grid_port_init+0x84>
			por->dx = 0;
			por->dy = -1;
		}
		else if (por->direction == GRID_MSG_WEST){
    18ea:	2d14      	cmp	r5, #20
    18ec:	d018      	beq.n	1920 <grid_port_init+0x94>
    18ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 0;
    18f2:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 1;
    18f6:	2301      	movs	r3, #1
    18f8:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    18fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 1;
    1900:	2301      	movs	r3, #1
    1902:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 0;
    1906:	2300      	movs	r3, #0
    1908:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    190c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 0;
    1910:	2300      	movs	r3, #0
    1912:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = -1;
    1916:	23ff      	movs	r3, #255	; 0xff
    1918:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    191c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = -1;
    1920:	23ff      	movs	r3, #255	; 0xff
    1922:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 0;
    1926:	2300      	movs	r3, #0
    1928:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
	}
	
}
    192c:	e7df      	b.n	18ee <grid_port_init+0x62>
    192e:	bf00      	nop
    1930:	000016a9 	.word	0x000016a9

00001934 <grid_port_init_all>:

void grid_port_init_all(){
    1934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1938:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    193a:	2600      	movs	r6, #0
    193c:	9602      	str	r6, [sp, #8]
    193e:	2311      	movs	r3, #17
    1940:	9301      	str	r3, [sp, #4]
    1942:	2401      	movs	r4, #1
    1944:	9400      	str	r4, [sp, #0]
    1946:	4b25      	ldr	r3, [pc, #148]	; (19dc <grid_port_init_all+0xa8>)
    1948:	f44f 7248 	mov.w	r2, #800	; 0x320
    194c:	4611      	mov	r1, r2
    194e:	4824      	ldr	r0, [pc, #144]	; (19e0 <grid_port_init_all+0xac>)
    1950:	4d24      	ldr	r5, [pc, #144]	; (19e4 <grid_port_init_all+0xb0>)
    1952:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    1954:	9402      	str	r4, [sp, #8]
    1956:	2312      	movs	r3, #18
    1958:	9301      	str	r3, [sp, #4]
    195a:	9400      	str	r4, [sp, #0]
    195c:	4b22      	ldr	r3, [pc, #136]	; (19e8 <grid_port_init_all+0xb4>)
    195e:	f44f 7248 	mov.w	r2, #800	; 0x320
    1962:	4611      	mov	r1, r2
    1964:	4821      	ldr	r0, [pc, #132]	; (19ec <grid_port_init_all+0xb8>)
    1966:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    1968:	f04f 0902 	mov.w	r9, #2
    196c:	f8cd 9008 	str.w	r9, [sp, #8]
    1970:	2313      	movs	r3, #19
    1972:	9301      	str	r3, [sp, #4]
    1974:	9400      	str	r4, [sp, #0]
    1976:	4b1e      	ldr	r3, [pc, #120]	; (19f0 <grid_port_init_all+0xbc>)
    1978:	f44f 7248 	mov.w	r2, #800	; 0x320
    197c:	4611      	mov	r1, r2
    197e:	481d      	ldr	r0, [pc, #116]	; (19f4 <grid_port_init_all+0xc0>)
    1980:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    1982:	2703      	movs	r7, #3
    1984:	9702      	str	r7, [sp, #8]
    1986:	2314      	movs	r3, #20
    1988:	9301      	str	r3, [sp, #4]
    198a:	9400      	str	r4, [sp, #0]
    198c:	4b1a      	ldr	r3, [pc, #104]	; (19f8 <grid_port_init_all+0xc4>)
    198e:	f44f 7248 	mov.w	r2, #800	; 0x320
    1992:	4611      	mov	r1, r2
    1994:	4819      	ldr	r0, [pc, #100]	; (19fc <grid_port_init_all+0xc8>)
    1996:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_UI, 0, -1);
    1998:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1a04 <grid_port_init_all+0xd0>
    199c:	f04f 0aff 	mov.w	sl, #255	; 0xff
    19a0:	f8cd a008 	str.w	sl, [sp, #8]
    19a4:	9601      	str	r6, [sp, #4]
    19a6:	9700      	str	r7, [sp, #0]
    19a8:	4633      	mov	r3, r6
    19aa:	f44f 7248 	mov.w	r2, #800	; 0x320
    19ae:	4611      	mov	r1, r2
    19b0:	4640      	mov	r0, r8
    19b2:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    19b4:	4f12      	ldr	r7, [pc, #72]	; (1a00 <grid_port_init_all+0xcc>)
    19b6:	f8cd a008 	str.w	sl, [sp, #8]
    19ba:	9601      	str	r6, [sp, #4]
    19bc:	f8cd 9000 	str.w	r9, [sp]
    19c0:	4633      	mov	r3, r6
    19c2:	f44f 7248 	mov.w	r2, #800	; 0x320
    19c6:	4611      	mov	r1, r2
    19c8:	4638      	mov	r0, r7
    19ca:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    19cc:	f888 41e3 	strb.w	r4, [r8, #483]	; 0x1e3
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    19d0:	f887 41e3 	strb.w	r4, [r7, #483]	; 0x1e3
	
	
}
    19d4:	b004      	add	sp, #16
    19d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19da:	bf00      	nop
    19dc:	2000148c 	.word	0x2000148c
    19e0:	2000164c 	.word	0x2000164c
    19e4:	0000188d 	.word	0x0000188d
    19e8:	2000143c 	.word	0x2000143c
    19ec:	20002274 	.word	0x20002274
    19f0:	20001590 	.word	0x20001590
    19f4:	20001e28 	.word	0x20001e28
    19f8:	20001540 	.word	0x20001540
    19fc:	20001c40 	.word	0x20001c40
    1a00:	20002010 	.word	0x20002010
    1a04:	20001840 	.word	0x20001840

00001a08 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por){
    1a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a0c:	b08f      	sub	sp, #60	; 0x3c
    1a0e:	af00      	add	r7, sp, #0
    1a10:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    1a12:	f500 79e2 	add.w	r9, r0, #452	; 0x1c4
    1a16:	4648      	mov	r0, r9
    1a18:	4b4f      	ldr	r3, [pc, #316]	; (1b58 <grid_port_process_inbound+0x150>)
    1a1a:	4798      	blx	r3
	
	if (!packet_size){
    1a1c:	b920      	cbnz	r0, 1a28 <grid_port_process_inbound+0x20>
    1a1e:	2000      	movs	r0, #0
		}	

		
	}
		
}
    1a20:	373c      	adds	r7, #60	; 0x3c
    1a22:	46bd      	mov	sp, r7
    1a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a28:	4680      	mov	r8, r0
	}else{
    1a2a:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    1a2e:	4b4b      	ldr	r3, [pc, #300]	; (1b5c <grid_port_process_inbound+0x154>)
    1a30:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    1a32:	4b4b      	ldr	r3, [pc, #300]	; (1b60 <grid_port_process_inbound+0x158>)
    1a34:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    1a36:	4b4b      	ldr	r3, [pc, #300]	; (1b64 <grid_port_process_inbound+0x15c>)
    1a38:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    1a3a:	4b4b      	ldr	r3, [pc, #300]	; (1b68 <grid_port_process_inbound+0x160>)
    1a3c:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    1a3e:	4b4b      	ldr	r3, [pc, #300]	; (1b6c <grid_port_process_inbound+0x164>)
    1a40:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    1a42:	4b4b      	ldr	r3, [pc, #300]	; (1b70 <grid_port_process_inbound+0x168>)
    1a44:	61fb      	str	r3, [r7, #28]
    1a46:	f107 0308 	add.w	r3, r7, #8
    1a4a:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    1a4e:	2600      	movs	r6, #0
    1a50:	e001      	b.n	1a56 <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    1a52:	428b      	cmp	r3, r1
    1a54:	d00e      	beq.n	1a74 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    1a56:	f853 2b04 	ldr.w	r2, [r3], #4
    1a5a:	f892 01e3 	ldrb.w	r0, [r2, #483]	; 0x1e3
    1a5e:	2800      	cmp	r0, #0
    1a60:	d0f7      	beq.n	1a52 <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    1a62:	f107 0038 	add.w	r0, r7, #56	; 0x38
    1a66:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    1a6a:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    1a6e:	3601      	adds	r6, #1
    1a70:	b2f6      	uxtb	r6, r6
    1a72:	e7ee      	b.n	1a52 <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    1a74:	2e00      	cmp	r6, #0
    1a76:	d05d      	beq.n	1b34 <grid_port_process_inbound+0x12c>
    1a78:	f107 0a20 	add.w	sl, r7, #32
    1a7c:	1e74      	subs	r4, r6, #1
    1a7e:	b2e4      	uxtb	r4, r4
    1a80:	3401      	adds	r4, #1
    1a82:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    1a86:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    1a88:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 1b88 <grid_port_process_inbound+0x180>
    1a8c:	e001      	b.n	1a92 <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    1a8e:	42a5      	cmp	r5, r4
    1a90:	d00c      	beq.n	1aac <grid_port_process_inbound+0xa4>
			if (port_array[i] != por){
    1a92:	f855 0b04 	ldr.w	r0, [r5], #4
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	4283      	cmp	r3, r0
    1a9a:	d0f8      	beq.n	1a8e <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    1a9c:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    1aa0:	47d8      	blx	fp
    1aa2:	4580      	cmp	r8, r0
    1aa4:	d9f3      	bls.n	1a8e <grid_port_process_inbound+0x86>
    1aa6:	f8d7 d000 	ldr.w	sp, [r7]
    1aaa:	e7b8      	b.n	1a1e <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1aac:	4648      	mov	r0, r9
    1aae:	4b31      	ldr	r3, [pc, #196]	; (1b74 <grid_port_process_inbound+0x16c>)
    1ab0:	4798      	blx	r3
    1ab2:	4580      	cmp	r8, r0
    1ab4:	d000      	beq.n	1ab8 <grid_port_process_inbound+0xb0>
    1ab6:	e7fe      	b.n	1ab6 <grid_port_process_inbound+0xae>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1ab8:	4c2f      	ldr	r4, [pc, #188]	; (1b78 <grid_port_process_inbound+0x170>)
    1aba:	e001      	b.n	1ac0 <grid_port_process_inbound+0xb8>
		for (uint8_t i=0; i<port_count; i++)
    1abc:	45aa      	cmp	sl, r5
    1abe:	d03e      	beq.n	1b3e <grid_port_process_inbound+0x136>
			if (port_array[i] != por){
    1ac0:	f85a 0b04 	ldr.w	r0, [sl], #4
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	4283      	cmp	r3, r0
    1ac8:	d0f8      	beq.n	1abc <grid_port_process_inbound+0xb4>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1aca:	4641      	mov	r1, r8
    1acc:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    1ad0:	47a0      	blx	r4
    1ad2:	e7f3      	b.n	1abc <grid_port_process_inbound+0xb4>
			for (uint8_t i=0; i<port_count; i++){
    1ad4:	42a5      	cmp	r5, r4
    1ad6:	d009      	beq.n	1aec <grid_port_process_inbound+0xe4>
				if (port_array[i] != por){
    1ad8:	f854 0b04 	ldr.w	r0, [r4], #4
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	4283      	cmp	r3, r0
    1ae0:	d0f8      	beq.n	1ad4 <grid_port_process_inbound+0xcc>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1ae2:	6839      	ldr	r1, [r7, #0]
    1ae4:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    1ae8:	47d8      	blx	fp
    1aea:	e7f3      	b.n	1ad4 <grid_port_process_inbound+0xcc>
    1aec:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    1af0:	fa1f f38a 	uxth.w	r3, sl
    1af4:	4543      	cmp	r3, r8
    1af6:	d208      	bcs.n	1b0a <grid_port_process_inbound+0x102>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    1af8:	4648      	mov	r0, r9
    1afa:	4b20      	ldr	r3, [pc, #128]	; (1b7c <grid_port_process_inbound+0x174>)
    1afc:	4798      	blx	r3
    1afe:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    1b00:	2e00      	cmp	r6, #0
    1b02:	d0f3      	beq.n	1aec <grid_port_process_inbound+0xe4>
    1b04:	f107 0420 	add.w	r4, r7, #32
    1b08:	e7e6      	b.n	1ad8 <grid_port_process_inbound+0xd0>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    1b0a:	4648      	mov	r0, r9
    1b0c:	4b1c      	ldr	r3, [pc, #112]	; (1b80 <grid_port_process_inbound+0x178>)
    1b0e:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    1b10:	2e00      	cmp	r6, #0
    1b12:	d085      	beq.n	1a20 <grid_port_process_inbound+0x18>
    1b14:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1b18:	4e1a      	ldr	r6, [pc, #104]	; (1b84 <grid_port_process_inbound+0x17c>)
    1b1a:	e002      	b.n	1b22 <grid_port_process_inbound+0x11a>
		for (uint8_t i=0; i<port_count; i++)
    1b1c:	42a5      	cmp	r5, r4
    1b1e:	f43f af7f 	beq.w	1a20 <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    1b22:	f854 0b04 	ldr.w	r0, [r4], #4
    1b26:	687b      	ldr	r3, [r7, #4]
    1b28:	4283      	cmp	r3, r0
    1b2a:	d0f7      	beq.n	1b1c <grid_port_process_inbound+0x114>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1b2c:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    1b30:	47b0      	blx	r6
    1b32:	e7f3      	b.n	1b1c <grid_port_process_inbound+0x114>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1b34:	4648      	mov	r0, r9
    1b36:	4b0f      	ldr	r3, [pc, #60]	; (1b74 <grid_port_process_inbound+0x16c>)
    1b38:	4798      	blx	r3
    1b3a:	4540      	cmp	r0, r8
    1b3c:	d1bb      	bne.n	1ab6 <grid_port_process_inbound+0xae>
    1b3e:	1e75      	subs	r5, r6, #1
    1b40:	b2ed      	uxtb	r5, r5
    1b42:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1b46:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1b4a:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    1b4c:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1b50:	f8df b038 	ldr.w	fp, [pc, #56]	; 1b8c <grid_port_process_inbound+0x184>
    1b54:	e7d0      	b.n	1af8 <grid_port_process_inbound+0xf0>
    1b56:	bf00      	nop
    1b58:	00001759 	.word	0x00001759
    1b5c:	2000164c 	.word	0x2000164c
    1b60:	20002274 	.word	0x20002274
    1b64:	20001e28 	.word	0x20001e28
    1b68:	20001c40 	.word	0x20001c40
    1b6c:	20001840 	.word	0x20001840
    1b70:	20002010 	.word	0x20002010
    1b74:	000017cb 	.word	0x000017cb
    1b78:	000016fd 	.word	0x000016fd
    1b7c:	00001855 	.word	0x00001855
    1b80:	0000187d 	.word	0x0000187d
    1b84:	00001749 	.word	0x00001749
    1b88:	000016e9 	.word	0x000016e9
    1b8c:	0000172d 	.word	0x0000172d

00001b90 <grid_port_process_outbound_usb>:

volatile uint8_t temp[500];

volatile uint8_t usb_debug[10];

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    1b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b94:	b09b      	sub	sp, #108	; 0x6c
    1b96:	af06      	add	r7, sp, #24
    1b98:	6438      	str	r0, [r7, #64]	; 0x40
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1b9a:	f500 76d6 	add.w	r6, r0, #428	; 0x1ac
    1b9e:	4630      	mov	r0, r6
    1ba0:	4b8b      	ldr	r3, [pc, #556]	; (1dd0 <grid_port_process_outbound_usb+0x240>)
    1ba2:	4798      	blx	r3
	
	if (!length){		
    1ba4:	b918      	cbnz	r0, 1bae <grid_port_process_outbound_usb+0x1e>
				
		
	}
	
	
}
    1ba6:	3754      	adds	r7, #84	; 0x54
    1ba8:	46bd      	mov	sp, r7
    1baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bae:	4604      	mov	r4, r0
		grid_buffer_read_init(&por->tx_buffer);
    1bb0:	4630      	mov	r0, r6
    1bb2:	4b88      	ldr	r3, [pc, #544]	; (1dd4 <grid_port_process_outbound_usb+0x244>)
    1bb4:	4798      	blx	r3
    1bb6:	2500      	movs	r5, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1bb8:	f8df 9254 	ldr.w	r9, [pc, #596]	; 1e10 <grid_port_process_outbound_usb+0x280>
    1bbc:	f8df 821c 	ldr.w	r8, [pc, #540]	; 1ddc <grid_port_process_outbound_usb+0x24c>
    1bc0:	4630      	mov	r0, r6
    1bc2:	47c8      	blx	r9
    1bc4:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    1bc8:	3501      	adds	r5, #1
    1bca:	b2ed      	uxtb	r5, r5
    1bcc:	b2ab      	uxth	r3, r5
    1bce:	429c      	cmp	r4, r3
    1bd0:	d8f6      	bhi.n	1bc0 <grid_port_process_outbound_usb+0x30>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1bd2:	4630      	mov	r0, r6
    1bd4:	4b80      	ldr	r3, [pc, #512]	; (1dd8 <grid_port_process_outbound_usb+0x248>)
    1bd6:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);		
    1bd8:	4d80      	ldr	r5, [pc, #512]	; (1ddc <grid_port_process_outbound_usb+0x24c>)
    1bda:	4628      	mov	r0, r5
    1bdc:	4b80      	ldr	r3, [pc, #512]	; (1de0 <grid_port_process_outbound_usb+0x250>)
    1bde:	4798      	blx	r3
    1be0:	63b8      	str	r0, [r7, #56]	; 0x38
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1be2:	4628      	mov	r0, r5
    1be4:	4b7f      	ldr	r3, [pc, #508]	; (1de4 <grid_port_process_outbound_usb+0x254>)
    1be6:	4798      	blx	r3
    1be8:	387f      	subs	r0, #127	; 0x7f
    1bea:	b243      	sxtb	r3, r0
    1bec:	461e      	mov	r6, r3
    1bee:	617b      	str	r3, [r7, #20]
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1bf0:	4628      	mov	r0, r5
    1bf2:	4b7d      	ldr	r3, [pc, #500]	; (1de8 <grid_port_process_outbound_usb+0x258>)
    1bf4:	4798      	blx	r3
    1bf6:	387f      	subs	r0, #127	; 0x7f
    1bf8:	b243      	sxtb	r3, r0
    1bfa:	61bb      	str	r3, [r7, #24]
		uint8_t age = grid_msg_get_age(temp);
    1bfc:	4628      	mov	r0, r5
    1bfe:	4b7b      	ldr	r3, [pc, #492]	; (1dec <grid_port_process_outbound_usb+0x25c>)
    1c00:	4798      	blx	r3
    1c02:	6378      	str	r0, [r7, #52]	; 0x34
		uint8_t error_flag = 0;
    1c04:	2500      	movs	r5, #0
    1c06:	f887 504f 	strb.w	r5, [r7, #79]	; 0x4f
					midi_channel = (256-dy)%16;
    1c0a:	69bb      	ldr	r3, [r7, #24]
    1c0c:	633b      	str	r3, [r7, #48]	; 0x30
    1c0e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
    1c12:	1aea      	subs	r2, r5, r3
    1c14:	f003 030f 	and.w	r3, r3, #15
    1c18:	f002 020f 	and.w	r2, r2, #15
    1c1c:	bf58      	it	pl
    1c1e:	4253      	negpl	r3, r2
    1c20:	b2db      	uxtb	r3, r3
    1c22:	461a      	mov	r2, r3
    1c24:	623b      	str	r3, [r7, #32]
					midi_param1  = (64+midi_param1 + 16*dx)%128;
    1c26:	62fe      	str	r6, [r7, #44]	; 0x2c
    1c28:	0133      	lsls	r3, r6, #4
    1c2a:	61fb      	str	r3, [r7, #28]
    1c2c:	627a      	str	r2, [r7, #36]	; 0x24
    1c2e:	1e63      	subs	r3, r4, #1
    1c30:	b29b      	uxth	r3, r3
    1c32:	f103 0a01 	add.w	sl, r3, #1
    1c36:	46ab      	mov	fp, r5
    1c38:	647d      	str	r5, [r7, #68]	; 0x44
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1c3a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 1ddc <grid_port_process_outbound_usb+0x24c>
    1c3e:	e006      	b.n	1c4e <grid_port_process_outbound_usb+0xbe>
				current_start = i;
    1c40:	fa5f f58b 	uxtb.w	r5, fp
    1c44:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    1c48:	45d3      	cmp	fp, sl
    1c4a:	f000 817b 	beq.w	1f44 <grid_port_process_outbound_usb+0x3b4>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1c4e:	f819 300b 	ldrb.w	r3, [r9, fp]
    1c52:	b2db      	uxtb	r3, r3
    1c54:	2b02      	cmp	r3, #2
    1c56:	d0f3      	beq.n	1c40 <grid_port_process_outbound_usb+0xb0>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1c58:	f819 300b 	ldrb.w	r3, [r9, fp]
    1c5c:	b2db      	uxtb	r3, r3
    1c5e:	2b03      	cmp	r3, #3
    1c60:	d1f0      	bne.n	1c44 <grid_port_process_outbound_usb+0xb4>
    1c62:	2d00      	cmp	r5, #0
    1c64:	d0ee      	beq.n	1c44 <grid_port_process_outbound_usb+0xb4>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    1c66:	462c      	mov	r4, r5
    1c68:	1c68      	adds	r0, r5, #1
    1c6a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1c6e:	2102      	movs	r1, #2
    1c70:	4448      	add	r0, r9
    1c72:	4b5f      	ldr	r3, [pc, #380]	; (1df0 <grid_port_process_outbound_usb+0x260>)
    1c74:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    1c76:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    1c7a:	d01b      	beq.n	1cb4 <grid_port_process_outbound_usb+0x124>
				else if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    1c7c:	2e03      	cmp	r6, #3
    1c7e:	d071      	beq.n	1d64 <grid_port_process_outbound_usb+0x1d4>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1c80:	2e01      	cmp	r6, #1
    1c82:	f000 80c7 	beq.w	1e14 <grid_port_process_outbound_usb+0x284>
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    1c86:	2e02      	cmp	r6, #2
    1c88:	f000 815a 	beq.w	1f40 <grid_port_process_outbound_usb+0x3b0>
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    1c8c:	6c7d      	ldr	r5, [r7, #68]	; 0x44
    1c8e:	f105 041c 	add.w	r4, r5, #28
    1c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1c94:	441c      	add	r4, r3
    1c96:	b2c2      	uxtb	r2, r0
    1c98:	4956      	ldr	r1, [pc, #344]	; (1df4 <grid_port_process_outbound_usb+0x264>)
    1c9a:	4620      	mov	r0, r4
    1c9c:	4b56      	ldr	r3, [pc, #344]	; (1df8 <grid_port_process_outbound_usb+0x268>)
    1c9e:	4798      	blx	r3
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1ca0:	4620      	mov	r0, r4
    1ca2:	4b56      	ldr	r3, [pc, #344]	; (1dfc <grid_port_process_outbound_usb+0x26c>)
    1ca4:	4798      	blx	r3
    1ca6:	eb05 0800 	add.w	r8, r5, r0
    1caa:	fa5f f388 	uxtb.w	r3, r8
    1cae:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    1cb0:	2500      	movs	r5, #0
    1cb2:	e7c7      	b.n	1c44 <grid_port_process_outbound_usb+0xb4>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1cb4:	1ce8      	adds	r0, r5, #3
    1cb6:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1cba:	2102      	movs	r1, #2
    1cbc:	4448      	add	r0, r9
    1cbe:	4b4c      	ldr	r3, [pc, #304]	; (1df0 <grid_port_process_outbound_usb+0x260>)
    1cc0:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1cc2:	1d68      	adds	r0, r5, #5
    1cc4:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1cc8:	2102      	movs	r1, #2
    1cca:	4448      	add	r0, r9
    1ccc:	4b48      	ldr	r3, [pc, #288]	; (1df0 <grid_port_process_outbound_usb+0x260>)
    1cce:	4798      	blx	r3
    1cd0:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1cd4:	1de8      	adds	r0, r5, #7
    1cd6:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1cda:	2102      	movs	r1, #2
    1cdc:	4448      	add	r0, r9
    1cde:	4b44      	ldr	r3, [pc, #272]	; (1df0 <grid_port_process_outbound_usb+0x260>)
    1ce0:	4798      	blx	r3
    1ce2:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1ce4:	f105 0009 	add.w	r0, r5, #9
    1ce8:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1cec:	2102      	movs	r1, #2
    1cee:	4448      	add	r0, r9
    1cf0:	4b3f      	ldr	r3, [pc, #252]	; (1df0 <grid_port_process_outbound_usb+0x260>)
    1cf2:	4798      	blx	r3
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1cf6:	331c      	adds	r3, #28
    1cf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1cfa:	441a      	add	r2, r3
    1cfc:	4615      	mov	r5, r2
					midi_param1  = (64+midi_param1 + 16*dx)%128;
    1cfe:	b2e4      	uxtb	r4, r4
    1d00:	3440      	adds	r4, #64	; 0x40
    1d02:	69f9      	ldr	r1, [r7, #28]
    1d04:	440c      	add	r4, r1
    1d06:	4263      	negs	r3, r4
    1d08:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    1d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1d10:	bf58      	it	pl
    1d12:	425c      	negpl	r4, r3
    1d14:	b2e4      	uxtb	r4, r4
    1d16:	b2c3      	uxtb	r3, r0
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1d18:	63fb      	str	r3, [r7, #60]	; 0x3c
    1d1a:	9305      	str	r3, [sp, #20]
    1d1c:	9404      	str	r4, [sp, #16]
    1d1e:	f8cd 800c 	str.w	r8, [sp, #12]
    1d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1d24:	9102      	str	r1, [sp, #8]
    1d26:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    1d2a:	9301      	str	r3, [sp, #4]
    1d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    1d2e:	9100      	str	r1, [sp, #0]
    1d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1d32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    1d36:	4932      	ldr	r1, [pc, #200]	; (1e00 <grid_port_process_outbound_usb+0x270>)
    1d38:	62bd      	str	r5, [r7, #40]	; 0x28
    1d3a:	4628      	mov	r0, r5
    1d3c:	4d2e      	ldr	r5, [pc, #184]	; (1df8 <grid_port_process_outbound_usb+0x268>)
    1d3e:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1d42:	4b2e      	ldr	r3, [pc, #184]	; (1dfc <grid_port_process_outbound_usb+0x26c>)
    1d44:	4798      	blx	r3
    1d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1d48:	4418      	add	r0, r3
    1d4a:	b2c3      	uxtb	r3, r0
    1d4c:	647b      	str	r3, [r7, #68]	; 0x44
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1d50:	4622      	mov	r2, r4
    1d52:	6a39      	ldr	r1, [r7, #32]
    1d54:	ea48 0101 	orr.w	r1, r8, r1
    1d58:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1d5c:	4c29      	ldr	r4, [pc, #164]	; (1e04 <grid_port_process_outbound_usb+0x274>)
    1d5e:	47a0      	blx	r4
				current_start = 0;
    1d60:	4635      	mov	r5, r6
    1d62:	e76f      	b.n	1c44 <grid_port_process_outbound_usb+0xb4>
					if (dx == 0 && dy == 0){
    1d64:	697b      	ldr	r3, [r7, #20]
    1d66:	2b00      	cmp	r3, #0
    1d68:	f040 80e8 	bne.w	1f3c <grid_port_process_outbound_usb+0x3ac>
    1d6c:	69bb      	ldr	r3, [r7, #24]
    1d6e:	b10b      	cbz	r3, 1d74 <grid_port_process_outbound_usb+0x1e4>
				current_start = 0;
    1d70:	2500      	movs	r5, #0
    1d72:	e767      	b.n	1c44 <grid_port_process_outbound_usb+0xb4>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1d74:	1ce8      	adds	r0, r5, #3
    1d76:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1d7a:	2102      	movs	r1, #2
    1d7c:	4448      	add	r0, r9
    1d7e:	4b1c      	ldr	r3, [pc, #112]	; (1df0 <grid_port_process_outbound_usb+0x260>)
    1d80:	4798      	blx	r3
    1d82:	4606      	mov	r6, r0
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1d84:	1d68      	adds	r0, r5, #5
    1d86:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1d8a:	2102      	movs	r1, #2
    1d8c:	4448      	add	r0, r9
    1d8e:	4b18      	ldr	r3, [pc, #96]	; (1df0 <grid_port_process_outbound_usb+0x260>)
    1d90:	4798      	blx	r3
    1d92:	4605      	mov	r5, r0
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1d94:	1de0      	adds	r0, r4, #7
    1d96:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1d9a:	2102      	movs	r1, #2
    1d9c:	4448      	add	r0, r9
    1d9e:	4b14      	ldr	r3, [pc, #80]	; (1df0 <grid_port_process_outbound_usb+0x260>)
    1da0:	4798      	blx	r3
    1da2:	4680      	mov	r8, r0
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1da4:	f104 0009 	add.w	r0, r4, #9
    1da8:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1dac:	2102      	movs	r1, #2
    1dae:	4448      	add	r0, r9
    1db0:	4b0f      	ldr	r3, [pc, #60]	; (1df0 <grid_port_process_outbound_usb+0x260>)
    1db2:	4798      	blx	r3
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    1db4:	b2ed      	uxtb	r5, r5
    1db6:	2d63      	cmp	r5, #99	; 0x63
    1db8:	d001      	beq.n	1dbe <grid_port_process_outbound_usb+0x22e>
				current_start = 0;
    1dba:	2500      	movs	r5, #0
    1dbc:	e742      	b.n	1c44 <grid_port_process_outbound_usb+0xb4>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1dbe:	b2c3      	uxtb	r3, r0
    1dc0:	b2f2      	uxtb	r2, r6
    1dc2:	fa5f f188 	uxtb.w	r1, r8
    1dc6:	4810      	ldr	r0, [pc, #64]	; (1e08 <grid_port_process_outbound_usb+0x278>)
    1dc8:	4c10      	ldr	r4, [pc, #64]	; (1e0c <grid_port_process_outbound_usb+0x27c>)
    1dca:	47a0      	blx	r4
				current_start = 0;
    1dcc:	2500      	movs	r5, #0
    1dce:	e739      	b.n	1c44 <grid_port_process_outbound_usb+0xb4>
    1dd0:	00001759 	.word	0x00001759
    1dd4:	000017cb 	.word	0x000017cb
    1dd8:	0000187d 	.word	0x0000187d
    1ddc:	20002474 	.word	0x20002474
    1de0:	00003919 	.word	0x00003919
    1de4:	00003939 	.word	0x00003939
    1de8:	00003959 	.word	0x00003959
    1dec:	00003979 	.word	0x00003979
    1df0:	00003765 	.word	0x00003765
    1df4:	0000b9a4 	.word	0x0000b9a4
    1df8:	0000b159 	.word	0x0000b159
    1dfc:	0000b1a1 	.word	0x0000b1a1
    1e00:	0000b914 	.word	0x0000b914
    1e04:	00009e01 	.word	0x00009e01
    1e08:	20002458 	.word	0x20002458
    1e0c:	000021e1 	.word	0x000021e1
    1e10:	00001855 	.word	0x00001855
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1e14:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1e18:	fa5f f38b 	uxtb.w	r3, fp
    1e1c:	1b5b      	subs	r3, r3, r5
    1e1e:	3b03      	subs	r3, #3
    1e20:	4a4b      	ldr	r2, [pc, #300]	; (1f50 <grid_port_process_outbound_usb+0x3c0>)
    1e22:	fb82 1203 	smull	r1, r2, r2, r3
    1e26:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	4619      	mov	r1, r3
    1e2e:	60fb      	str	r3, [r7, #12]
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1e30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1e34:	3307      	adds	r3, #7
    1e36:	f023 0307 	bic.w	r3, r3, #7
    1e3a:	ebad 0d03 	sub.w	sp, sp, r3
    1e3e:	ab06      	add	r3, sp, #24
    1e40:	461e      	mov	r6, r3
    1e42:	60bb      	str	r3, [r7, #8]
					for(uint8_t j=0; j<key_array_length; j++){
    1e44:	2900      	cmp	r1, #0
    1e46:	d066      	beq.n	1f16 <grid_port_process_outbound_usb+0x386>
    1e48:	3403      	adds	r4, #3
    1e4a:	eb04 0809 	add.w	r8, r4, r9
    1e4e:	1e4b      	subs	r3, r1, #1
    1e50:	b2db      	uxtb	r3, r3
    1e52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1e56:	3509      	adds	r5, #9
    1e58:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1e5c:	444b      	add	r3, r9
    1e5e:	62bb      	str	r3, [r7, #40]	; 0x28
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1e60:	63fe      	str	r6, [r7, #60]	; 0x3c
    1e62:	f8c7 b004 	str.w	fp, [r7, #4]
    1e66:	f8d7 b044 	ldr.w	fp, [r7, #68]	; 0x44
    1e6a:	f8c7 a000 	str.w	sl, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1e6e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1e72:	2102      	movs	r1, #2
    1e74:	4640      	mov	r0, r8
    1e76:	4b37      	ldr	r3, [pc, #220]	; (1f54 <grid_port_process_outbound_usb+0x3c4>)
    1e78:	4798      	blx	r3
    1e7a:	4604      	mov	r4, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1e7c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1e80:	2102      	movs	r1, #2
    1e82:	eb08 0001 	add.w	r0, r8, r1
    1e86:	4b33      	ldr	r3, [pc, #204]	; (1f54 <grid_port_process_outbound_usb+0x3c4>)
    1e88:	4798      	blx	r3
    1e8a:	4605      	mov	r5, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1e8c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1e90:	2102      	movs	r1, #2
    1e92:	f108 0004 	add.w	r0, r8, #4
    1e96:	4b2f      	ldr	r3, [pc, #188]	; (1f54 <grid_port_process_outbound_usb+0x3c4>)
    1e98:	4798      	blx	r3
    1e9a:	4606      	mov	r6, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1e9c:	f10b 0a1c 	add.w	sl, fp, #28
    1ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ea2:	449a      	add	sl, r3
    1ea4:	4b2c      	ldr	r3, [pc, #176]	; (1f58 <grid_port_process_outbound_usb+0x3c8>)
    1ea6:	4798      	blx	r3
    1ea8:	9005      	str	r0, [sp, #20]
    1eaa:	b2e4      	uxtb	r4, r4
    1eac:	9404      	str	r4, [sp, #16]
    1eae:	b2ed      	uxtb	r5, r5
    1eb0:	9503      	str	r5, [sp, #12]
    1eb2:	647e      	str	r6, [r7, #68]	; 0x44
    1eb4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1eb8:	9302      	str	r3, [sp, #8]
    1eba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    1ebe:	9301      	str	r3, [sp, #4]
    1ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1ec2:	9300      	str	r3, [sp, #0]
    1ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ec6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    1eca:	4924      	ldr	r1, [pc, #144]	; (1f5c <grid_port_process_outbound_usb+0x3cc>)
    1ecc:	4650      	mov	r0, sl
    1ece:	4e24      	ldr	r6, [pc, #144]	; (1f60 <grid_port_process_outbound_usb+0x3d0>)
    1ed0:	47b0      	blx	r6
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1ed2:	4650      	mov	r0, sl
    1ed4:	4b23      	ldr	r3, [pc, #140]	; (1f64 <grid_port_process_outbound_usb+0x3d4>)
    1ed6:	4798      	blx	r3
    1ed8:	4483      	add	fp, r0
    1eda:	fa5f fb8b 	uxtb.w	fp, fp
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1ede:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1ee2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    1ee4:	700b      	strb	r3, [r1, #0]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1ee6:	2d82      	cmp	r5, #130	; 0x82
    1ee8:	bf14      	ite	ne
    1eea:	2500      	movne	r5, #0
    1eec:	2501      	moveq	r5, #1
						key_array[j] = current_key;
    1eee:	460b      	mov	r3, r1
    1ef0:	704d      	strb	r5, [r1, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1ef2:	2c80      	cmp	r4, #128	; 0x80
    1ef4:	bf14      	ite	ne
    1ef6:	2400      	movne	r4, #0
    1ef8:	2401      	moveq	r4, #1
    1efa:	708c      	strb	r4, [r1, #2]
    1efc:	f108 0806 	add.w	r8, r8, #6
    1f00:	3303      	adds	r3, #3
    1f02:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(uint8_t j=0; j<key_array_length; j++){
    1f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1f06:	4598      	cmp	r8, r3
    1f08:	d1b1      	bne.n	1e6e <grid_port_process_outbound_usb+0x2de>
    1f0a:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
    1f0e:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1f12:	f8d7 a000 	ldr.w	sl, [r7]
					usb_debug[1] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    1f16:	f8d7 800c 	ldr.w	r8, [r7, #12]
    1f1a:	4641      	mov	r1, r8
    1f1c:	68be      	ldr	r6, [r7, #8]
    1f1e:	4630      	mov	r0, r6
    1f20:	4d11      	ldr	r5, [pc, #68]	; (1f68 <grid_port_process_outbound_usb+0x3d8>)
    1f22:	47a8      	blx	r5
    1f24:	b2c0      	uxtb	r0, r0
    1f26:	4c11      	ldr	r4, [pc, #68]	; (1f6c <grid_port_process_outbound_usb+0x3dc>)
    1f28:	7060      	strb	r0, [r4, #1]
					usb_debug[2] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    1f2a:	4641      	mov	r1, r8
    1f2c:	4630      	mov	r0, r6
    1f2e:	47a8      	blx	r5
    1f30:	b2c0      	uxtb	r0, r0
    1f32:	70a0      	strb	r0, [r4, #2]
    1f34:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    1f38:	2500      	movs	r5, #0
    1f3a:	e683      	b.n	1c44 <grid_port_process_outbound_usb+0xb4>
    1f3c:	2500      	movs	r5, #0
    1f3e:	e681      	b.n	1c44 <grid_port_process_outbound_usb+0xb4>
    1f40:	2500      	movs	r5, #0
    1f42:	e67f      	b.n	1c44 <grid_port_process_outbound_usb+0xb4>
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1f44:	6c79      	ldr	r1, [r7, #68]	; 0x44
    1f46:	6c38      	ldr	r0, [r7, #64]	; 0x40
    1f48:	301c      	adds	r0, #28
    1f4a:	4b09      	ldr	r3, [pc, #36]	; (1f70 <grid_port_process_outbound_usb+0x3e0>)
    1f4c:	4798      	blx	r3
}
    1f4e:	e62a      	b.n	1ba6 <grid_port_process_outbound_usb+0x16>
    1f50:	2aaaaaab 	.word	0x2aaaaaab
    1f54:	00003765 	.word	0x00003765
    1f58:	000037dd 	.word	0x000037dd
    1f5c:	0000b95c 	.word	0x0000b95c
    1f60:	0000b159 	.word	0x0000b159
    1f64:	0000b1a1 	.word	0x0000b1a1
    1f68:	0000987d 	.word	0x0000987d
    1f6c:	20002668 	.word	0x20002668
    1f70:	0000963d 	.word	0x0000963d

00001f74 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f76:	b083      	sub	sp, #12
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1f78:	f500 75d6 	add.w	r5, r0, #428	; 0x1ac
    1f7c:	4628      	mov	r0, r5
    1f7e:	4b10      	ldr	r3, [pc, #64]	; (1fc0 <grid_port_process_outbound_ui+0x4c>)
    1f80:	4798      	blx	r3
	
	if (!packet_size){
    1f82:	b908      	cbnz	r0, 1f88 <grid_port_process_outbound_ui+0x14>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    1f84:	b003      	add	sp, #12
    1f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f88:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    1f8a:	4628      	mov	r0, r5
    1f8c:	4b0d      	ldr	r3, [pc, #52]	; (1fc4 <grid_port_process_outbound_ui+0x50>)
    1f8e:	4798      	blx	r3
    1f90:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1f92:	4f0d      	ldr	r7, [pc, #52]	; (1fc8 <grid_port_process_outbound_ui+0x54>)
    1f94:	4628      	mov	r0, r5
    1f96:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    1f98:	3401      	adds	r4, #1
    1f9a:	b2e4      	uxtb	r4, r4
    1f9c:	b2a3      	uxth	r3, r4
    1f9e:	429e      	cmp	r6, r3
    1fa0:	d8f8      	bhi.n	1f94 <grid_port_process_outbound_ui+0x20>
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    1fa2:	23c8      	movs	r3, #200	; 0xc8
    1fa4:	9301      	str	r3, [sp, #4]
    1fa6:	2302      	movs	r3, #2
    1fa8:	9300      	str	r3, [sp, #0]
    1faa:	23ff      	movs	r3, #255	; 0xff
    1fac:	461a      	mov	r2, r3
    1fae:	4619      	mov	r1, r3
    1fb0:	4806      	ldr	r0, [pc, #24]	; (1fcc <grid_port_process_outbound_ui+0x58>)
    1fb2:	4c07      	ldr	r4, [pc, #28]	; (1fd0 <grid_port_process_outbound_ui+0x5c>)
    1fb4:	47a0      	blx	r4
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1fb6:	4628      	mov	r0, r5
    1fb8:	4b06      	ldr	r3, [pc, #24]	; (1fd4 <grid_port_process_outbound_ui+0x60>)
    1fba:	4798      	blx	r3
}
    1fbc:	e7e2      	b.n	1f84 <grid_port_process_outbound_ui+0x10>
    1fbe:	bf00      	nop
    1fc0:	00001759 	.word	0x00001759
    1fc4:	000017cb 	.word	0x000017cb
    1fc8:	00001855 	.word	0x00001855
    1fcc:	20001a30 	.word	0x20001a30
    1fd0:	00003711 	.word	0x00003711
    1fd4:	0000187d 	.word	0x0000187d

00001fd8 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1fd8:	8903      	ldrh	r3, [r0, #8]
    1fda:	b103      	cbz	r3, 1fde <grid_port_process_outbound_usart+0x6>
    1fdc:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fe2:	4605      	mov	r5, r0
		
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1fe4:	f500 76d6 	add.w	r6, r0, #428	; 0x1ac
    1fe8:	4630      	mov	r0, r6
    1fea:	4b10      	ldr	r3, [pc, #64]	; (202c <grid_port_process_outbound_usart+0x54>)
    1fec:	4798      	blx	r3
		
		if (!packet_size){
    1fee:	4607      	mov	r7, r0
    1ff0:	b908      	cbnz	r0, 1ff6 <grid_port_process_outbound_usart+0x1e>
			
		}
		
	}
	
}
    1ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_buffer_read_init(&por->tx_buffer);
    1ff6:	4630      	mov	r0, r6
    1ff8:	4b0d      	ldr	r3, [pc, #52]	; (2030 <grid_port_process_outbound_usart+0x58>)
    1ffa:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    1ffc:	812f      	strh	r7, [r5, #8]
    1ffe:	2400      	movs	r4, #0
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    2000:	f8df 8038 	ldr.w	r8, [pc, #56]	; 203c <grid_port_process_outbound_usart+0x64>
    2004:	4630      	mov	r0, r6
    2006:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    2008:	192b      	adds	r3, r5, r4
    200a:	7718      	strb	r0, [r3, #28]
			for (uint8_t i = 0; i<packet_size; i++){
    200c:	3401      	adds	r4, #1
    200e:	b2e4      	uxtb	r4, r4
    2010:	b2a3      	uxth	r3, r4
    2012:	429f      	cmp	r7, r3
    2014:	d8f6      	bhi.n	2004 <grid_port_process_outbound_usart+0x2c>
			grid_buffer_read_acknowledge(&por->tx_buffer);
    2016:	4630      	mov	r0, r6
    2018:	4b06      	ldr	r3, [pc, #24]	; (2034 <grid_port_process_outbound_usart+0x5c>)
    201a:	4798      	blx	r3
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    201c:	892a      	ldrh	r2, [r5, #8]
    201e:	f105 011c 	add.w	r1, r5, #28
    2022:	6828      	ldr	r0, [r5, #0]
    2024:	4b04      	ldr	r3, [pc, #16]	; (2038 <grid_port_process_outbound_usart+0x60>)
    2026:	4798      	blx	r3
}
    2028:	e7e3      	b.n	1ff2 <grid_port_process_outbound_usart+0x1a>
    202a:	bf00      	nop
    202c:	00001759 	.word	0x00001759
    2030:	000017cb 	.word	0x000017cb
    2034:	0000187d 	.word	0x0000187d
    2038:	000042a5 	.word	0x000042a5
    203c:	00001855 	.word	0x00001855

00002040 <grid_led_hardware_transfer_complete_cb>:
volatile static uint8_t grid_led_hardware_transfer_done = 0;

void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    2040:	2201      	movs	r2, #1
    2042:	4b01      	ldr	r3, [pc, #4]	; (2048 <grid_led_hardware_transfer_complete_cb+0x8>)
    2044:	701a      	strb	r2, [r3, #0]
    2046:	4770      	bx	lr
    2048:	20000638 	.word	0x20000638

0000204c <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    204c:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    204e:	7844      	ldrb	r4, [r0, #1]
    2050:	428c      	cmp	r4, r1
    2052:	d802      	bhi.n	205a <grid_led_set_color+0xe>
		return -1;		
    2054:	20ff      	movs	r0, #255	; 0xff
}
    2056:	bc30      	pop	{r4, r5}
    2058:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    205a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    205e:	0089      	lsls	r1, r1, #2
    2060:	68c5      	ldr	r5, [r0, #12]
    2062:	4c0a      	ldr	r4, [pc, #40]	; (208c <grid_led_set_color+0x40>)
    2064:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    2068:	685b      	ldr	r3, [r3, #4]
    206a:	506b      	str	r3, [r5, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    206c:	68c3      	ldr	r3, [r0, #12]
    206e:	440b      	add	r3, r1
    2070:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    2074:	6852      	ldr	r2, [r2, #4]
    2076:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    2078:	68c3      	ldr	r3, [r0, #12]
    207a:	4419      	add	r1, r3
    207c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2080:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    2084:	6863      	ldr	r3, [r4, #4]
    2086:	608b      	str	r3, [r1, #8]
		return 0;
    2088:	2000      	movs	r0, #0
    208a:	e7e4      	b.n	2056 <grid_led_set_color+0xa>
    208c:	20000638 	.word	0x20000638

00002090 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    2090:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    2092:	4c06      	ldr	r4, [pc, #24]	; (20ac <grid_led_hardware_init+0x1c>)
    2094:	f100 0114 	add.w	r1, r0, #20
    2098:	4620      	mov	r0, r4
    209a:	4b05      	ldr	r3, [pc, #20]	; (20b0 <grid_led_hardware_init+0x20>)
    209c:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    209e:	4a05      	ldr	r2, [pc, #20]	; (20b4 <grid_led_hardware_init+0x24>)
    20a0:	2100      	movs	r1, #0
    20a2:	4620      	mov	r0, r4
    20a4:	4b04      	ldr	r3, [pc, #16]	; (20b8 <grid_led_hardware_init+0x28>)
    20a6:	4798      	blx	r3
    20a8:	bd10      	pop	{r4, pc}
    20aa:	bf00      	nop
    20ac:	200014dc 	.word	0x200014dc
    20b0:	00004761 	.word	0x00004761
    20b4:	00002041 	.word	0x00002041
    20b8:	00004731 	.word	0x00004731

000020bc <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    20bc:	7840      	ldrb	r0, [r0, #1]
    20be:	4770      	bx	lr

000020c0 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    20c0:	7843      	ldrb	r3, [r0, #1]
    20c2:	b1f3      	cbz	r3, 2102 <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    20c4:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    20c6:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    20c8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    20cc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    20d0:	6902      	ldr	r2, [r0, #16]
    20d2:	440a      	add	r2, r1
    20d4:	7ad1      	ldrb	r1, [r2, #11]
    20d6:	7b14      	ldrb	r4, [r2, #12]
    20d8:	4421      	add	r1, r4
    20da:	72d1      	strb	r1, [r2, #11]
    20dc:	7842      	ldrb	r2, [r0, #1]
    20de:	441a      	add	r2, r3
    20e0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    20e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    20e8:	6901      	ldr	r1, [r0, #16]
    20ea:	440a      	add	r2, r1
    20ec:	7ad1      	ldrb	r1, [r2, #11]
    20ee:	7b14      	ldrb	r4, [r2, #12]
    20f0:	4421      	add	r1, r4
    20f2:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    20f4:	3301      	adds	r3, #1
    20f6:	b2db      	uxtb	r3, r3
    20f8:	7842      	ldrb	r2, [r0, #1]
    20fa:	429a      	cmp	r2, r3
    20fc:	d8e4      	bhi.n	20c8 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    20fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    2102:	4770      	bx	lr

00002104 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2104:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    2106:	7844      	ldrb	r4, [r0, #1]
    2108:	fb02 1404 	mla	r4, r2, r4, r1
    210c:	6905      	ldr	r5, [r0, #16]
    210e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2112:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2116:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    2118:	7843      	ldrb	r3, [r0, #1]
    211a:	fb02 1303 	mla	r3, r2, r3, r1
    211e:	6904      	ldr	r4, [r0, #16]
    2120:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2124:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2128:	4423      	add	r3, r4
    212a:	f89d 400c 	ldrb.w	r4, [sp, #12]
    212e:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    2130:	7843      	ldrb	r3, [r0, #1]
    2132:	fb02 1203 	mla	r2, r2, r3, r1
    2136:	6903      	ldr	r3, [r0, #16]
    2138:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    213c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2140:	441a      	add	r2, r3
    2142:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2146:	7093      	strb	r3, [r2, #2]
}
    2148:	bc70      	pop	{r4, r5, r6}
    214a:	4770      	bx	lr

0000214c <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    214c:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    214e:	7844      	ldrb	r4, [r0, #1]
    2150:	fb02 1404 	mla	r4, r2, r4, r1
    2154:	6905      	ldr	r5, [r0, #16]
    2156:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    215a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    215e:	442c      	add	r4, r5
    2160:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    2162:	7843      	ldrb	r3, [r0, #1]
    2164:	fb02 1303 	mla	r3, r2, r3, r1
    2168:	6904      	ldr	r4, [r0, #16]
    216a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    216e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2172:	4423      	add	r3, r4
    2174:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2178:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    217a:	7843      	ldrb	r3, [r0, #1]
    217c:	fb02 1203 	mla	r2, r2, r3, r1
    2180:	6903      	ldr	r3, [r0, #16]
    2182:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2186:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    218a:	441a      	add	r2, r3
    218c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2190:	7153      	strb	r3, [r2, #5]
}
    2192:	bc70      	pop	{r4, r5, r6}
    2194:	4770      	bx	lr

00002196 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2196:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    2198:	7844      	ldrb	r4, [r0, #1]
    219a:	fb02 1404 	mla	r4, r2, r4, r1
    219e:	6905      	ldr	r5, [r0, #16]
    21a0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    21a4:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    21a8:	442c      	add	r4, r5
    21aa:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    21ac:	7843      	ldrb	r3, [r0, #1]
    21ae:	fb02 1303 	mla	r3, r2, r3, r1
    21b2:	6904      	ldr	r4, [r0, #16]
    21b4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    21b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    21bc:	4423      	add	r3, r4
    21be:	f89d 400c 	ldrb.w	r4, [sp, #12]
    21c2:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    21c4:	7843      	ldrb	r3, [r0, #1]
    21c6:	fb02 1203 	mla	r2, r2, r3, r1
    21ca:	6903      	ldr	r3, [r0, #16]
    21cc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    21d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    21d4:	441a      	add	r2, r3
    21d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    21da:	7213      	strb	r3, [r2, #8]
}
    21dc:	bc70      	pop	{r4, r5, r6}
    21de:	4770      	bx	lr

000021e0 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    21e0:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    21e2:	7844      	ldrb	r4, [r0, #1]
    21e4:	fb02 1204 	mla	r2, r2, r4, r1
    21e8:	6901      	ldr	r1, [r0, #16]
    21ea:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    21ee:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    21f2:	440a      	add	r2, r1
    21f4:	72d3      	strb	r3, [r2, #11]
}
    21f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    21fa:	4770      	bx	lr

000021fc <grid_led_set_frequency>:

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    21fc:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    21fe:	7844      	ldrb	r4, [r0, #1]
    2200:	fb02 1204 	mla	r2, r2, r4, r1
    2204:	6901      	ldr	r1, [r0, #16]
    2206:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    220a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    220e:	440a      	add	r2, r1
    2210:	7313      	strb	r3, [r2, #12]
}
    2212:	f85d 4b04 	ldr.w	r4, [sp], #4
    2216:	4770      	bx	lr

00002218 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    2218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    221c:	b083      	sub	sp, #12
    221e:	4605      	mov	r5, r0
	mod->led_number = length;
    2220:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    2222:	b2cc      	uxtb	r4, r1
    2224:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    2228:	0080      	lsls	r0, r0, #2
    222a:	3090      	adds	r0, #144	; 0x90
    222c:	6068      	str	r0, [r5, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    222e:	4e3b      	ldr	r6, [pc, #236]	; (231c <grid_led_buffer_init+0x104>)
    2230:	47b0      	blx	r6
    2232:	60a8      	str	r0, [r5, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    2234:	3090      	adds	r0, #144	; 0x90
    2236:	60e8      	str	r0, [r5, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    2238:	201a      	movs	r0, #26
    223a:	fb00 f004 	mul.w	r0, r0, r4
    223e:	47b0      	blx	r6
    2240:	6128      	str	r0, [r5, #16]
    2242:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    2244:	4619      	mov	r1, r3
    2246:	68aa      	ldr	r2, [r5, #8]
    2248:	54d1      	strb	r1, [r2, r3]
    224a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    224c:	2b90      	cmp	r3, #144	; 0x90
    224e:	d1fa      	bne.n	2246 <grid_led_buffer_init+0x2e>
	for (uint32_t i = 0; i<mod->led_number; i++){
    2250:	786b      	ldrb	r3, [r5, #1]
    2252:	2b00      	cmp	r3, #0
    2254:	d05e      	beq.n	2314 <grid_led_buffer_init+0xfc>
    2256:	2400      	movs	r4, #0
		grid_led_set_color(mod,i,0,0,0);
    2258:	4626      	mov	r6, r4
    225a:	4f31      	ldr	r7, [pc, #196]	; (2320 <grid_led_buffer_init+0x108>)
    225c:	9600      	str	r6, [sp, #0]
    225e:	4633      	mov	r3, r6
    2260:	4632      	mov	r2, r6
    2262:	4621      	mov	r1, r4
    2264:	4628      	mov	r0, r5
    2266:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    2268:	3401      	adds	r4, #1
    226a:	786b      	ldrb	r3, [r5, #1]
    226c:	42a3      	cmp	r3, r4
    226e:	d8f5      	bhi.n	225c <grid_led_buffer_init+0x44>
	for(uint8_t i = 0; i<mod->led_number; i++){
    2270:	2b00      	cmp	r3, #0
    2272:	d04f      	beq.n	2314 <grid_led_buffer_init+0xfc>
    2274:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    2276:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2328 <grid_led_buffer_init+0x110>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    227a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 232c <grid_led_buffer_init+0x114>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    227e:	2400      	movs	r4, #0
    2280:	9401      	str	r4, [sp, #4]
    2282:	9400      	str	r4, [sp, #0]
    2284:	4623      	mov	r3, r4
    2286:	4622      	mov	r2, r4
    2288:	4631      	mov	r1, r6
    228a:	4628      	mov	r0, r5
    228c:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    228e:	9401      	str	r4, [sp, #4]
    2290:	237f      	movs	r3, #127	; 0x7f
    2292:	9300      	str	r3, [sp, #0]
    2294:	4623      	mov	r3, r4
    2296:	4622      	mov	r2, r4
    2298:	4631      	mov	r1, r6
    229a:	4628      	mov	r0, r5
    229c:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    229e:	9401      	str	r4, [sp, #4]
    22a0:	23ff      	movs	r3, #255	; 0xff
    22a2:	9300      	str	r3, [sp, #0]
    22a4:	4623      	mov	r3, r4
    22a6:	4622      	mov	r2, r4
    22a8:	4631      	mov	r1, r6
    22aa:	4628      	mov	r0, r5
    22ac:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2330 <grid_led_buffer_init+0x118>
    22b0:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    22b2:	4623      	mov	r3, r4
    22b4:	4622      	mov	r2, r4
    22b6:	4631      	mov	r1, r6
    22b8:	4628      	mov	r0, r5
    22ba:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2334 <grid_led_buffer_init+0x11c>
    22be:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    22c0:	4623      	mov	r3, r4
    22c2:	4622      	mov	r2, r4
    22c4:	4631      	mov	r1, r6
    22c6:	4628      	mov	r0, r5
    22c8:	4f16      	ldr	r7, [pc, #88]	; (2324 <grid_led_buffer_init+0x10c>)
    22ca:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    22cc:	9401      	str	r4, [sp, #4]
    22ce:	9400      	str	r4, [sp, #0]
    22d0:	4623      	mov	r3, r4
    22d2:	2201      	movs	r2, #1
    22d4:	4631      	mov	r1, r6
    22d6:	4628      	mov	r0, r5
    22d8:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    22da:	9401      	str	r4, [sp, #4]
    22dc:	9400      	str	r4, [sp, #0]
    22de:	4623      	mov	r3, r4
    22e0:	2201      	movs	r2, #1
    22e2:	4631      	mov	r1, r6
    22e4:	4628      	mov	r0, r5
    22e6:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    22e8:	9401      	str	r4, [sp, #4]
    22ea:	9400      	str	r4, [sp, #0]
    22ec:	4623      	mov	r3, r4
    22ee:	2201      	movs	r2, #1
    22f0:	4631      	mov	r1, r6
    22f2:	4628      	mov	r0, r5
    22f4:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    22f6:	4623      	mov	r3, r4
    22f8:	2201      	movs	r2, #1
    22fa:	4631      	mov	r1, r6
    22fc:	4628      	mov	r0, r5
    22fe:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    2300:	4623      	mov	r3, r4
    2302:	2201      	movs	r2, #1
    2304:	4631      	mov	r1, r6
    2306:	4628      	mov	r0, r5
    2308:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    230a:	3601      	adds	r6, #1
    230c:	b2f6      	uxtb	r6, r6
    230e:	786b      	ldrb	r3, [r5, #1]
    2310:	42b3      	cmp	r3, r6
    2312:	d8b4      	bhi.n	227e <grid_led_buffer_init+0x66>
}
    2314:	b003      	add	sp, #12
    2316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    231a:	bf00      	nop
    231c:	0000afa9 	.word	0x0000afa9
    2320:	0000204d 	.word	0x0000204d
    2324:	000021e1 	.word	0x000021e1
    2328:	00002105 	.word	0x00002105
    232c:	0000214d 	.word	0x0000214d
    2330:	00002197 	.word	0x00002197
    2334:	000021fd 	.word	0x000021fd

00002338 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    2338:	b570      	push	{r4, r5, r6, lr}
    233a:	4604      	mov	r4, r0
    233c:	4e29      	ldr	r6, [pc, #164]	; (23e4 <grid_led_init+0xac>)
    233e:	2200      	movs	r2, #0
    2340:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2342:	f003 0001 	and.w	r0, r3, #1
    2346:	2800      	cmp	r0, #0
    2348:	bf14      	ite	ne
    234a:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    234e:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2352:	f3c3 0540 	ubfx	r5, r3, #1, #1
    2356:	2d00      	cmp	r5, #0
    2358:	bf14      	ite	ne
    235a:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    235e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2362:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    2364:	f3c3 0080 	ubfx	r0, r3, #2, #1
    2368:	2800      	cmp	r0, #0
    236a:	bf14      	ite	ne
    236c:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    2370:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    2374:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    2376:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    237a:	2d00      	cmp	r5, #0
    237c:	bf14      	ite	ne
    237e:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    2382:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    2386:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    2388:	f3c3 1500 	ubfx	r5, r3, #4, #1
    238c:	2d00      	cmp	r5, #0
    238e:	bf14      	ite	ne
    2390:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    2394:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    2398:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    239a:	f3c3 1040 	ubfx	r0, r3, #5, #1
    239e:	2800      	cmp	r0, #0
    23a0:	bf14      	ite	ne
    23a2:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    23a6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    23aa:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    23ac:	f3c3 1080 	ubfx	r0, r3, #6, #1
    23b0:	2800      	cmp	r0, #0
    23b2:	bf14      	ite	ne
    23b4:	200e      	movne	r0, #14
    23b6:	2008      	moveq	r0, #8
    23b8:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    23ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    23be:	2b00      	cmp	r3, #0
    23c0:	bf14      	ite	ne
    23c2:	23e0      	movne	r3, #224	; 0xe0
    23c4:	2380      	moveq	r3, #128	; 0x80
    23c6:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    23c8:	f846 3f04 	str.w	r3, [r6, #4]!
    23cc:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    23ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    23d2:	d1b5      	bne.n	2340 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    23d4:	4620      	mov	r0, r4
    23d6:	4b04      	ldr	r3, [pc, #16]	; (23e8 <grid_led_init+0xb0>)
    23d8:	4798      	blx	r3
	grid_led_hardware_init(mod);
    23da:	4620      	mov	r0, r4
    23dc:	4b03      	ldr	r3, [pc, #12]	; (23ec <grid_led_init+0xb4>)
    23de:	4798      	blx	r3
}
    23e0:	2000      	movs	r0, #0
    23e2:	bd70      	pop	{r4, r5, r6, pc}
    23e4:	20000638 	.word	0x20000638
    23e8:	00002219 	.word	0x00002219
    23ec:	00002091 	.word	0x00002091

000023f0 <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    23f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23f4:	b083      	sub	sp, #12
    23f6:	f890 c001 	ldrb.w	ip, [r0, #1]
    23fa:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    23fe:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    2402:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    2406:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    240a:	6904      	ldr	r4, [r0, #16]
    240c:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    240e:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    2410:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    2414:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    2416:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2418:	f8df 8084 	ldr.w	r8, [pc, #132]	; 24a0 <grid_led_render+0xb0>
    241c:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    241e:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2422:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2424:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    2428:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    242c:	f894 a000 	ldrb.w	sl, [r4]
    2430:	f894 b003 	ldrb.w	fp, [r4, #3]
    2434:	fb05 fb0b 	mul.w	fp, r5, fp
    2438:	fb09 bb0a 	mla	fp, r9, sl, fp
    243c:	f894 a006 	ldrb.w	sl, [r4, #6]
    2440:	fb06 ba0a 	mla	sl, r6, sl, fp
    2444:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    2446:	f894 a001 	ldrb.w	sl, [r4, #1]
    244a:	f894 b004 	ldrb.w	fp, [r4, #4]
    244e:	fb05 fb0b 	mul.w	fp, r5, fp
    2452:	fb09 bb0a 	mla	fp, r9, sl, fp
    2456:	f894 a007 	ldrb.w	sl, [r4, #7]
    245a:	fb06 ba0a 	mla	sl, r6, sl, fp
    245e:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    2460:	f894 a002 	ldrb.w	sl, [r4, #2]
    2464:	f894 b005 	ldrb.w	fp, [r4, #5]
    2468:	fb05 f50b 	mul.w	r5, r5, fp
    246c:	fb09 590a 	mla	r9, r9, sl, r5
    2470:	7a25      	ldrb	r5, [r4, #8]
    2472:	fb06 9505 	mla	r5, r6, r5, r9
    2476:	44ae      	add	lr, r5
    2478:	3f01      	subs	r7, #1
    247a:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    247c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    2480:	d1cc      	bne.n	241c <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    2482:	f3ce 2447 	ubfx	r4, lr, #9, #8
    2486:	9400      	str	r4, [sp, #0]
    2488:	f3c3 2347 	ubfx	r3, r3, #9, #8
    248c:	f3c2 2247 	ubfx	r2, r2, #9, #8
    2490:	4c02      	ldr	r4, [pc, #8]	; (249c <grid_led_render+0xac>)
    2492:	47a0      	blx	r4
	
}
    2494:	b003      	add	sp, #12
    2496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    249a:	bf00      	nop
    249c:	0000204d 	.word	0x0000204d
    24a0:	20000010 	.word	0x20000010

000024a4 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    24a4:	7843      	ldrb	r3, [r0, #1]
    24a6:	b15b      	cbz	r3, 24c0 <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    24a8:	b570      	push	{r4, r5, r6, lr}
    24aa:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    24ac:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    24ae:	4e05      	ldr	r6, [pc, #20]	; (24c4 <grid_led_render_all+0x20>)
    24b0:	4621      	mov	r1, r4
    24b2:	4628      	mov	r0, r5
    24b4:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    24b6:	3401      	adds	r4, #1
    24b8:	786b      	ldrb	r3, [r5, #1]
    24ba:	42a3      	cmp	r3, r4
    24bc:	d8f8      	bhi.n	24b0 <grid_led_render_all+0xc>
    24be:	bd70      	pop	{r4, r5, r6, pc}
    24c0:	4770      	bx	lr
    24c2:	bf00      	nop
    24c4:	000023f1 	.word	0x000023f1

000024c8 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    24c8:	b510      	push	{r4, lr}
    24ca:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    24cc:	2200      	movs	r2, #0
    24ce:	4b08      	ldr	r3, [pc, #32]	; (24f0 <grid_led_hardware_start_transfer_blocking+0x28>)
    24d0:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    24d2:	4808      	ldr	r0, [pc, #32]	; (24f4 <grid_led_hardware_start_transfer_blocking+0x2c>)
    24d4:	4b08      	ldr	r3, [pc, #32]	; (24f8 <grid_led_hardware_start_transfer_blocking+0x30>)
    24d6:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    24d8:	88a2      	ldrh	r2, [r4, #4]
    24da:	68a1      	ldr	r1, [r4, #8]
    24dc:	6960      	ldr	r0, [r4, #20]
    24de:	4b07      	ldr	r3, [pc, #28]	; (24fc <grid_led_hardware_start_transfer_blocking+0x34>)
    24e0:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    24e2:	4a03      	ldr	r2, [pc, #12]	; (24f0 <grid_led_hardware_start_transfer_blocking+0x28>)
    24e4:	7813      	ldrb	r3, [r2, #0]
    24e6:	b2db      	uxtb	r3, r3
    24e8:	2b01      	cmp	r3, #1
    24ea:	d1fb      	bne.n	24e4 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
    24ec:	bd10      	pop	{r4, pc}
    24ee:	bf00      	nop
    24f0:	20000638 	.word	0x20000638
    24f4:	200014dc 	.word	0x200014dc
    24f8:	00004709 	.word	0x00004709
    24fc:	000042a5 	.word	0x000042a5

00002500 <grid_sync_set_mode>:

	
	
void grid_sync_set_mode(enum grid_sync_selector sync_select, enum grid_sync_mode sync_mode){
	
	grid_sync_mode_register[sync_select - 1]  = sync_mode;
    2500:	4b28      	ldr	r3, [pc, #160]	; (25a4 <grid_sync_set_mode+0xa4>)
    2502:	4403      	add	r3, r0
    2504:	f803 1c01 	strb.w	r1, [r3, #-1]
	
	if (sync_select == GRID_SYNC_1){		
    2508:	2801      	cmp	r0, #1
    250a:	d002      	beq.n	2512 <grid_sync_set_mode+0x12>
			gpio_set_pin_direction(PIN_GRID_SYNC_1, GPIO_DIRECTION_IN);
			gpio_set_pin_level(PIN_GRID_SYNC_1, true);
		}
		
	}
	else if (sync_select == GRID_SYNC_2){	
    250c:	2802      	cmp	r0, #2
    250e:	d023      	beq.n	2558 <grid_sync_set_mode+0x58>
    2510:	4770      	bx	lr
		if (sync_mode == GRID_SYNC_MASTER){
    2512:	2901      	cmp	r1, #1
    2514:	d011      	beq.n	253a <grid_sync_set_mode+0x3a>
		else if (sync_mode == GRID_SYNC_SLAVE){
    2516:	2902      	cmp	r1, #2
    2518:	d1fa      	bne.n	2510 <grid_sync_set_mode+0x10>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    251a:	4b23      	ldr	r3, [pc, #140]	; (25a8 <grid_sync_set_mode+0xa8>)
    251c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    2520:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2524:	4921      	ldr	r1, [pc, #132]	; (25ac <grid_sync_set_mode+0xac>)
    2526:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    252a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    252e:	3104      	adds	r1, #4
    2530:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2534:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    2538:	4770      	bx	lr
    253a:	4b1b      	ldr	r3, [pc, #108]	; (25a8 <grid_sync_set_mode+0xa8>)
    253c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    2540:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2544:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    254c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    2550:	4a17      	ldr	r2, [pc, #92]	; (25b0 <grid_sync_set_mode+0xb0>)
    2552:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    2556:	4770      	bx	lr
			
		if (sync_mode == GRID_SYNC_MASTER){
    2558:	2901      	cmp	r1, #1
    255a:	d013      	beq.n	2584 <grid_sync_set_mode+0x84>
			
			gpio_set_pin_level(PIN_GRID_SYNC_2, true);
			gpio_set_pin_direction(PIN_GRID_SYNC_2, GPIO_DIRECTION_OUT);
		}
		else if (sync_mode == GRID_SYNC_SLAVE){
    255c:	2902      	cmp	r1, #2
    255e:	d1d7      	bne.n	2510 <grid_sync_set_mode+0x10>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2560:	4b11      	ldr	r3, [pc, #68]	; (25a8 <grid_sync_set_mode+0xa8>)
    2562:	2280      	movs	r2, #128	; 0x80
    2564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2568:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    256c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2570:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2574:	4a0f      	ldr	r2, [pc, #60]	; (25b4 <grid_sync_set_mode+0xb4>)
    2576:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    257a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    257e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			gpio_set_pin_level(PIN_GRID_SYNC_1, true);
		}
		
	}
	
}
    2582:	e7c5      	b.n	2510 <grid_sync_set_mode+0x10>
    2584:	4b08      	ldr	r3, [pc, #32]	; (25a8 <grid_sync_set_mode+0xa8>)
    2586:	2280      	movs	r2, #128	; 0x80
    2588:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    258c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2590:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2594:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2598:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    259c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    25a0:	4770      	bx	lr
    25a2:	bf00      	nop
    25a4:	20000a40 	.word	0x20000a40
    25a8:	41008000 	.word	0x41008000
    25ac:	40020000 	.word	0x40020000
    25b0:	c0000004 	.word	0xc0000004
    25b4:	c0020000 	.word	0xc0020000

000025b8 <grid_sync_get_mode>:

enum grid_sync_mode grid_sync_get_mode(enum grid_sync_selector sync_select){
	
	if (grid_sync_mode_register[sync_select - 1] == GRID_SYNC_MASTER){
    25b8:	4b06      	ldr	r3, [pc, #24]	; (25d4 <grid_sync_get_mode+0x1c>)
    25ba:	4418      	add	r0, r3
    25bc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    25c0:	2b01      	cmp	r3, #1
    25c2:	d004      	beq.n	25ce <grid_sync_get_mode+0x16>
	}
	else if (grid_sync_mode_register[sync_select - 1] == GRID_SYNC_SLAVE){
		return GRID_SYNC_SLAVE;
	}
	else{
		return GRID_SYNC_INITIAL;	
    25c4:	2b02      	cmp	r3, #2
    25c6:	bf0c      	ite	eq
    25c8:	2002      	moveq	r0, #2
    25ca:	2000      	movne	r0, #0
    25cc:	4770      	bx	lr
		return GRID_SYNC_MASTER;
    25ce:	2001      	movs	r0, #1
	}	
}
    25d0:	4770      	bx	lr
    25d2:	bf00      	nop
    25d4:	20000a40 	.word	0x20000a40

000025d8 <grid_sync_set_level>:

void grid_sync_set_level(enum grid_sync_selector sync_select, uint8_t sync_level){
    25d8:	b510      	push	{r4, lr}
    25da:	460c      	mov	r4, r1
	
	if (sync_select == GRID_SYNC_1){
    25dc:	2801      	cmp	r0, #1
    25de:	d002      	beq.n	25e6 <grid_sync_set_level+0xe>
			
			gpio_set_pin_level(PIN_GRID_SYNC_1, sync_level);
		}
		
	}
	else if (sync_select == GRID_SYNC_2){
    25e0:	2802      	cmp	r0, #2
    25e2:	d011      	beq.n	2608 <grid_sync_set_level+0x30>
    25e4:	bd10      	pop	{r4, pc}
		if (grid_sync_get_mode(sync_select) == GRID_SYNC_MASTER){
    25e6:	4b10      	ldr	r3, [pc, #64]	; (2628 <grid_sync_set_level+0x50>)
    25e8:	4798      	blx	r3
    25ea:	2801      	cmp	r0, #1
    25ec:	d1fa      	bne.n	25e4 <grid_sync_set_level+0xc>
	if (level) {
    25ee:	b12c      	cbz	r4, 25fc <grid_sync_set_level+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    25f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    25f4:	4b0d      	ldr	r3, [pc, #52]	; (262c <grid_sync_set_level+0x54>)
    25f6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    25fa:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    2600:	4b0a      	ldr	r3, [pc, #40]	; (262c <grid_sync_set_level+0x54>)
    2602:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    2606:	bd10      	pop	{r4, pc}
		
		if (grid_sync_get_mode(sync_select) == GRID_SYNC_MASTER){
    2608:	4b07      	ldr	r3, [pc, #28]	; (2628 <grid_sync_set_level+0x50>)
    260a:	4798      	blx	r3
    260c:	2801      	cmp	r0, #1
    260e:	d1e9      	bne.n	25e4 <grid_sync_set_level+0xc>
    2610:	b924      	cbnz	r4, 261c <grid_sync_set_level+0x44>
    2612:	2280      	movs	r2, #128	; 0x80
    2614:	4b05      	ldr	r3, [pc, #20]	; (262c <grid_sync_set_level+0x54>)
    2616:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			gpio_set_pin_level(PIN_GRID_SYNC_2, sync_level);
		}
		
	}
		
}
    261a:	e7e3      	b.n	25e4 <grid_sync_set_level+0xc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    261c:	2280      	movs	r2, #128	; 0x80
    261e:	4b03      	ldr	r3, [pc, #12]	; (262c <grid_sync_set_level+0x54>)
    2620:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2624:	bd10      	pop	{r4, pc}
    2626:	bf00      	nop
    2628:	000025b9 	.word	0x000025b9
    262c:	41008000 	.word	0x41008000

00002630 <grid_module_init_animation>:
	

volatile static uint32_t transfer_ready = 1;


void grid_module_init_animation(struct grid_led_model* mod){
    2630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2634:	b083      	sub	sp, #12
    2636:	4607      	mov	r7, r0
	
	
	for (uint8_t i = 0; i<255; i++){
    2638:	2500      	movs	r5, #0
		uint8_t color_b   = i;
			
			
		for (uint8_t i=0; i<mod->led_number; i++){
			//grid_led_set_color(i, 0, 255, 0);
			grid_led_set_color(&grid_led_state, i, color_r, color_g, color_b);
    263a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2688 <grid_module_init_animation+0x58>
    263e:	4e10      	ldr	r6, [pc, #64]	; (2680 <grid_module_init_animation+0x50>)
				
		}
			
			
		grid_led_hardware_start_transfer_blocking(&grid_led_state);
    2640:	f8df 9048 	ldr.w	r9, [pc, #72]	; 268c <grid_module_init_animation+0x5c>
    2644:	e013      	b.n	266e <grid_module_init_animation+0x3e>
			grid_led_set_color(&grid_led_state, i, color_r, color_g, color_b);
    2646:	9500      	str	r5, [sp, #0]
    2648:	462b      	mov	r3, r5
    264a:	462a      	mov	r2, r5
    264c:	4621      	mov	r1, r4
    264e:	4640      	mov	r0, r8
    2650:	47b0      	blx	r6
		for (uint8_t i=0; i<mod->led_number; i++){
    2652:	3401      	adds	r4, #1
    2654:	b2e4      	uxtb	r4, r4
    2656:	787b      	ldrb	r3, [r7, #1]
    2658:	42a3      	cmp	r3, r4
    265a:	d8f4      	bhi.n	2646 <grid_module_init_animation+0x16>
		grid_led_hardware_start_transfer_blocking(&grid_led_state);
    265c:	4640      	mov	r0, r8
    265e:	47c8      	blx	r9
			
		delay_ms(1);
    2660:	2001      	movs	r0, #1
    2662:	4b08      	ldr	r3, [pc, #32]	; (2684 <grid_module_init_animation+0x54>)
    2664:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    2666:	3501      	adds	r5, #1
    2668:	b2ed      	uxtb	r5, r5
    266a:	2dff      	cmp	r5, #255	; 0xff
    266c:	d004      	beq.n	2678 <grid_module_init_animation+0x48>
		for (uint8_t i=0; i<mod->led_number; i++){
    266e:	787b      	ldrb	r3, [r7, #1]
    2670:	2400      	movs	r4, #0
    2672:	2b00      	cmp	r3, #0
    2674:	d1e7      	bne.n	2646 <grid_module_init_animation+0x16>
    2676:	e7f1      	b.n	265c <grid_module_init_animation+0x2c>
			
	}
	
}
    2678:	b003      	add	sp, #12
    267a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    267e:	bf00      	nop
    2680:	0000204d 	.word	0x0000204d
    2684:	00004119 	.word	0x00004119
    2688:	20002458 	.word	0x20002458
    268c:	000024c9 	.word	0x000024c9

00002690 <grid_module_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_init(void){
    2690:	b508      	push	{r3, lr}
				
	grid_port_init_all();		
    2692:	4b15      	ldr	r3, [pc, #84]	; (26e8 <grid_module_init+0x58>)
    2694:	4798      	blx	r3
	grid_sys_uart_init();	
    2696:	4b15      	ldr	r3, [pc, #84]	; (26ec <grid_module_init+0x5c>)
    2698:	4798      	blx	r3
	grid_rx_dma_init();	
    269a:	4b15      	ldr	r3, [pc, #84]	; (26f0 <grid_module_init+0x60>)
    269c:	4798      	blx	r3
    269e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    26a2:	4b14      	ldr	r3, [pc, #80]	; (26f4 <grid_module_init+0x64>)
    26a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(UI_PWR_EN, true);


	// ADC SETUP	
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    26a8:	4b13      	ldr	r3, [pc, #76]	; (26f8 <grid_module_init+0x68>)
    26aa:	4798      	blx	r3
    26ac:	b160      	cbz	r0, 26c8 <grid_module_init+0x38>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){			
    26ae:	4b12      	ldr	r3, [pc, #72]	; (26f8 <grid_module_init+0x68>)
    26b0:	4798      	blx	r3
    26b2:	2880      	cmp	r0, #128	; 0x80
    26b4:	d00c      	beq.n	26d0 <grid_module_init+0x40>
		grid_module_bu16_revb_init(&grid_ui_state);			
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    26b6:	4b10      	ldr	r3, [pc, #64]	; (26f8 <grid_module_init+0x68>)
    26b8:	4798      	blx	r3
    26ba:	2840      	cmp	r0, #64	; 0x40
    26bc:	d00c      	beq.n	26d8 <grid_module_init+0x48>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    26be:	4b0e      	ldr	r3, [pc, #56]	; (26f8 <grid_module_init+0x68>)
    26c0:	4798      	blx	r3
    26c2:	28c0      	cmp	r0, #192	; 0xc0
    26c4:	d00c      	beq.n	26e0 <grid_module_init+0x50>
    26c6:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    26c8:	480c      	ldr	r0, [pc, #48]	; (26fc <grid_module_init+0x6c>)
    26ca:	4b0d      	ldr	r3, [pc, #52]	; (2700 <grid_module_init+0x70>)
    26cc:	4798      	blx	r3
    26ce:	e7ee      	b.n	26ae <grid_module_init+0x1e>
		grid_module_bu16_revb_init(&grid_ui_state);			
    26d0:	480a      	ldr	r0, [pc, #40]	; (26fc <grid_module_init+0x6c>)
    26d2:	4b0c      	ldr	r3, [pc, #48]	; (2704 <grid_module_init+0x74>)
    26d4:	4798      	blx	r3
    26d6:	e7ee      	b.n	26b6 <grid_module_init+0x26>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    26d8:	4808      	ldr	r0, [pc, #32]	; (26fc <grid_module_init+0x6c>)
    26da:	4b0b      	ldr	r3, [pc, #44]	; (2708 <grid_module_init+0x78>)
    26dc:	4798      	blx	r3
    26de:	e7ee      	b.n	26be <grid_module_init+0x2e>
		grid_module_en16_reva_init(&grid_ui_state);
    26e0:	4806      	ldr	r0, [pc, #24]	; (26fc <grid_module_init+0x6c>)
    26e2:	4b0a      	ldr	r3, [pc, #40]	; (270c <grid_module_init+0x7c>)
    26e4:	4798      	blx	r3
	
// 	usart_async_get_io_descriptor(&GRID_AUX, &io);
// 	usart_async_enable(&GRID_AUX);
	
		
}
    26e6:	e7ee      	b.n	26c6 <grid_module_init+0x36>
    26e8:	00001935 	.word	0x00001935
    26ec:	00003509 	.word	0x00003509
    26f0:	00003671 	.word	0x00003671
    26f4:	41008000 	.word	0x41008000
    26f8:	000037dd 	.word	0x000037dd
    26fc:	20001a24 	.word	0x20001a24
    2700:	00003281 	.word	0x00003281
    2704:	00002971 	.word	0x00002971
    2708:	00002ebd 	.word	0x00002ebd
    270c:	00001331 	.word	0x00001331

00002710 <grid_module_hardware_transfer_complete_cb>:
	
}

static void grid_module_hardware_transfer_complete_cb(void){
	
	if (grid_module_hardware_transfer_complete == 0){
    2710:	4b8b      	ldr	r3, [pc, #556]	; (2940 <grid_module_hardware_transfer_complete_cb+0x230>)
    2712:	781b      	ldrb	r3, [r3, #0]
    2714:	b92b      	cbnz	r3, 2722 <grid_module_hardware_transfer_complete_cb+0x12>
		grid_module_hardware_transfer_complete++;
    2716:	4a8a      	ldr	r2, [pc, #552]	; (2940 <grid_module_hardware_transfer_complete_cb+0x230>)
    2718:	7813      	ldrb	r3, [r2, #0]
    271a:	3301      	adds	r3, #1
    271c:	b2db      	uxtb	r3, r3
    271e:	7013      	strb	r3, [r2, #0]
    2720:	4770      	bx	lr
static void grid_module_hardware_transfer_complete_cb(void){
    2722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2726:	b087      	sub	sp, #28
	/* Read mapmode state*/
	
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	CRITICAL_SECTION_ENTER()
    2728:	a801      	add	r0, sp, #4
    272a:	4c86      	ldr	r4, [pc, #536]	; (2944 <grid_module_hardware_transfer_complete_cb+0x234>)
    272c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    272e:	a804      	add	r0, sp, #16
    2730:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2732:	4b85      	ldr	r3, [pc, #532]	; (2948 <grid_module_hardware_transfer_complete_cb+0x238>)
    2734:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2738:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    273c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2740:	4054      	eors	r4, r2
    2742:	400c      	ands	r4, r1
    2744:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2746:	a804      	add	r0, sp, #16
    2748:	4b80      	ldr	r3, [pc, #512]	; (294c <grid_module_hardware_transfer_complete_cb+0x23c>)
    274a:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    274c:	4b80      	ldr	r3, [pc, #512]	; (2950 <grid_module_hardware_transfer_complete_cb+0x240>)
    274e:	685b      	ldr	r3, [r3, #4]
    2750:	68db      	ldr	r3, [r3, #12]
    2752:	781a      	ldrb	r2, [r3, #0]
    2754:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2758:	4294      	cmp	r4, r2
    275a:	d010      	beq.n	277e <grid_module_hardware_transfer_complete_cb+0x6e>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    275c:	2a00      	cmp	r2, #0
    275e:	f040 80ea 	bne.w	2936 <grid_module_hardware_transfer_complete_cb+0x226>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
			mod->report_array[report_index].helper[0] = 1;
    2762:	2201      	movs	r2, #1
    2764:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    2766:	2280      	movs	r2, #128	; 0x80
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    2768:	4c79      	ldr	r4, [pc, #484]	; (2950 <grid_module_hardware_transfer_complete_cb+0x240>)
    276a:	6863      	ldr	r3, [r4, #4]
    276c:	6858      	ldr	r0, [r3, #4]
    276e:	2102      	movs	r1, #2
    2770:	3003      	adds	r0, #3
    2772:	4b78      	ldr	r3, [pc, #480]	; (2954 <grid_module_hardware_transfer_complete_cb+0x244>)
    2774:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    2776:	2100      	movs	r1, #0
    2778:	4620      	mov	r0, r4
    277a:	4b77      	ldr	r3, [pc, #476]	; (2958 <grid_module_hardware_transfer_complete_cb+0x248>)
    277c:	4798      	blx	r3
	}

	CRITICAL_SECTION_LEAVE()
    277e:	a801      	add	r0, sp, #4
    2780:	4b72      	ldr	r3, [pc, #456]	; (294c <grid_module_hardware_transfer_complete_cb+0x23c>)
    2782:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2784:	2300      	movs	r3, #0
    2786:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint16_t adcresult_1 = 0;
    278a:	f8ad 3014 	strh.w	r3, [sp, #20]
	
	uint8_t adc_index_0 = grid_module_mux_lookup[grid_module_mux+8];
    278e:	496c      	ldr	r1, [pc, #432]	; (2940 <grid_module_hardware_transfer_complete_cb+0x230>)
    2790:	784b      	ldrb	r3, [r1, #1]
    2792:	4a72      	ldr	r2, [pc, #456]	; (295c <grid_module_hardware_transfer_complete_cb+0x24c>)
    2794:	18d0      	adds	r0, r2, r3
    2796:	7a06      	ldrb	r6, [r0, #8]
	uint8_t adc_index_1 = grid_module_mux_lookup[grid_module_mux+0];
    2798:	5cd5      	ldrb	r5, [r2, r3]
	
	/* Update the multiplexer */
	
	grid_module_mux++;
    279a:	3301      	adds	r3, #1
    279c:	b2db      	uxtb	r3, r3
	grid_module_mux%=8;
    279e:	f003 0207 	and.w	r2, r3, #7
    27a2:	704a      	strb	r2, [r1, #1]
	if (level) {
    27a4:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    27ac:	4b66      	ldr	r3, [pc, #408]	; (2948 <grid_module_hardware_transfer_complete_cb+0x238>)
    27ae:	bf14      	ite	ne
    27b0:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    27b4:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    27b8:	f012 0f02 	tst.w	r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27bc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    27c0:	4b61      	ldr	r3, [pc, #388]	; (2948 <grid_module_hardware_transfer_complete_cb+0x238>)
    27c2:	bf14      	ite	ne
    27c4:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    27c8:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    27cc:	0893      	lsrs	r3, r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    27d2:	4b5d      	ldr	r3, [pc, #372]	; (2948 <grid_module_hardware_transfer_complete_cb+0x238>)
    27d4:	bf14      	ite	ne
    27d6:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    27da:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_mux/2%2);
	gpio_set_pin_level(MUX_C, grid_module_mux/4%2);
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    27de:	2302      	movs	r3, #2
    27e0:	f10d 0216 	add.w	r2, sp, #22
    27e4:	2100      	movs	r1, #0
    27e6:	485e      	ldr	r0, [pc, #376]	; (2960 <grid_module_hardware_transfer_complete_cb+0x250>)
    27e8:	4c5e      	ldr	r4, [pc, #376]	; (2964 <grid_module_hardware_transfer_complete_cb+0x254>)
    27ea:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    27ec:	2302      	movs	r3, #2
    27ee:	aa05      	add	r2, sp, #20
    27f0:	2100      	movs	r1, #0
    27f2:	485d      	ldr	r0, [pc, #372]	; (2968 <grid_module_hardware_transfer_complete_cb+0x258>)
    27f4:	47a0      	blx	r4
	

	
	if (adcresult_0>10000){
    27f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    27fa:	f242 7310 	movw	r3, #10000	; 0x2710
    27fe:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    2800:	bf8c      	ite	hi
    2802:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    2804:	237f      	movls	r3, #127	; 0x7f
    2806:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	
	if (adcresult_1>10000){
    280a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    280e:	f242 7310 	movw	r3, #10000	; 0x2710
    2812:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    2814:	bf8c      	ite	hi
    2816:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    2818:	237f      	movls	r3, #127	; 0x7f
    281a:	f8ad 3014 	strh.w	r3, [sp, #20]
	}
	
	CRITICAL_SECTION_ENTER()
    281e:	a802      	add	r0, sp, #8
    2820:	4b48      	ldr	r3, [pc, #288]	; (2944 <grid_module_hardware_transfer_complete_cb+0x234>)
    2822:	4798      	blx	r3

	if (adcresult_0 != mod->report_array[adc_index_0+1].helper[0]){
    2824:	1c74      	adds	r4, r6, #1
    2826:	0124      	lsls	r4, r4, #4
    2828:	4b49      	ldr	r3, [pc, #292]	; (2950 <grid_module_hardware_transfer_complete_cb+0x240>)
    282a:	685b      	ldr	r3, [r3, #4]
    282c:	4423      	add	r3, r4
    282e:	68da      	ldr	r2, [r3, #12]
    2830:	7812      	ldrb	r2, [r2, #0]
    2832:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    2836:	4291      	cmp	r1, r2
    2838:	d02f      	beq.n	289a <grid_module_hardware_transfer_complete_cb+0x18a>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    283a:	2a00      	cmp	r2, #0
    283c:	bf0c      	ite	eq
    283e:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2842:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[5], 2, command);
    2846:	6858      	ldr	r0, [r3, #4]
    2848:	bf0c      	ite	eq
    284a:	2290      	moveq	r2, #144	; 0x90
    284c:	2280      	movne	r2, #128	; 0x80
    284e:	2102      	movs	r1, #2
    2850:	3005      	adds	r0, #5
    2852:	f8df 8100 	ldr.w	r8, [pc, #256]	; 2954 <grid_module_hardware_transfer_complete_cb+0x244>
    2856:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    2858:	4f3d      	ldr	r7, [pc, #244]	; (2950 <grid_module_hardware_transfer_complete_cb+0x240>)
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	4423      	add	r3, r4
    285e:	6858      	ldr	r0, [r3, #4]
    2860:	4632      	mov	r2, r6
    2862:	2102      	movs	r1, #2
    2864:	3007      	adds	r0, #7
    2866:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, velocity);
    2868:	687b      	ldr	r3, [r7, #4]
    286a:	4423      	add	r3, r4
    286c:	6858      	ldr	r0, [r3, #4]
    286e:	464a      	mov	r2, r9
    2870:	2102      	movs	r1, #2
    2872:	3009      	adds	r0, #9
    2874:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	4423      	add	r3, r4
    287a:	6858      	ldr	r0, [r3, #4]
    287c:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2880:	2102      	movs	r1, #2
    2882:	3015      	adds	r0, #21
    2884:	47c0      	blx	r8
		mod->report_array[adc_index_0+1].helper[0] = velocity;
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	441c      	add	r4, r3
    288a:	68e3      	ldr	r3, [r4, #12]
    288c:	f883 9000 	strb.w	r9, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    2890:	1c71      	adds	r1, r6, #1
    2892:	b2c9      	uxtb	r1, r1
    2894:	4638      	mov	r0, r7
    2896:	4b30      	ldr	r3, [pc, #192]	; (2958 <grid_module_hardware_transfer_complete_cb+0x248>)
    2898:	4798      	blx	r3
	}
	
	CRITICAL_SECTION_LEAVE()
    289a:	a802      	add	r0, sp, #8
    289c:	4b2b      	ldr	r3, [pc, #172]	; (294c <grid_module_hardware_transfer_complete_cb+0x23c>)
    289e:	4798      	blx	r3
	
	
	CRITICAL_SECTION_ENTER()
    28a0:	a803      	add	r0, sp, #12
    28a2:	4b28      	ldr	r3, [pc, #160]	; (2944 <grid_module_hardware_transfer_complete_cb+0x234>)
    28a4:	4798      	blx	r3

	if (adcresult_1 != mod->report_array[adc_index_1+1].helper[0]){
    28a6:	1c6c      	adds	r4, r5, #1
    28a8:	0124      	lsls	r4, r4, #4
    28aa:	4b29      	ldr	r3, [pc, #164]	; (2950 <grid_module_hardware_transfer_complete_cb+0x240>)
    28ac:	685b      	ldr	r3, [r3, #4]
    28ae:	4423      	add	r3, r4
    28b0:	68da      	ldr	r2, [r3, #12]
    28b2:	7812      	ldrb	r2, [r2, #0]
    28b4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    28b8:	4291      	cmp	r1, r2
    28ba:	d02e      	beq.n	291a <grid_module_hardware_transfer_complete_cb+0x20a>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    28bc:	2a00      	cmp	r2, #0
    28be:	bf0c      	ite	eq
    28c0:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    28c4:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[5], 2, command);
    28c8:	6858      	ldr	r0, [r3, #4]
    28ca:	bf0c      	ite	eq
    28cc:	2290      	moveq	r2, #144	; 0x90
    28ce:	2280      	movne	r2, #128	; 0x80
    28d0:	2102      	movs	r1, #2
    28d2:	3005      	adds	r0, #5
    28d4:	4f1f      	ldr	r7, [pc, #124]	; (2954 <grid_module_hardware_transfer_complete_cb+0x244>)
    28d6:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    28d8:	4e1d      	ldr	r6, [pc, #116]	; (2950 <grid_module_hardware_transfer_complete_cb+0x240>)
    28da:	6873      	ldr	r3, [r6, #4]
    28dc:	4423      	add	r3, r4
    28de:	6858      	ldr	r0, [r3, #4]
    28e0:	462a      	mov	r2, r5
    28e2:	2102      	movs	r1, #2
    28e4:	3007      	adds	r0, #7
    28e6:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, velocity);
    28e8:	6873      	ldr	r3, [r6, #4]
    28ea:	4423      	add	r3, r4
    28ec:	6858      	ldr	r0, [r3, #4]
    28ee:	4642      	mov	r2, r8
    28f0:	2102      	movs	r1, #2
    28f2:	3009      	adds	r0, #9
    28f4:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    28f6:	6873      	ldr	r3, [r6, #4]
    28f8:	4423      	add	r3, r4
    28fa:	6858      	ldr	r0, [r3, #4]
    28fc:	ea4f 0248 	mov.w	r2, r8, lsl #1
    2900:	2102      	movs	r1, #2
    2902:	3015      	adds	r0, #21
    2904:	47b8      	blx	r7
		
		mod->report_array[adc_index_1+1].helper[0] = velocity;
    2906:	6873      	ldr	r3, [r6, #4]
    2908:	441c      	add	r4, r3
    290a:	68e3      	ldr	r3, [r4, #12]
    290c:	f883 8000 	strb.w	r8, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    2910:	1c69      	adds	r1, r5, #1
    2912:	b2c9      	uxtb	r1, r1
    2914:	4630      	mov	r0, r6
    2916:	4b10      	ldr	r3, [pc, #64]	; (2958 <grid_module_hardware_transfer_complete_cb+0x248>)
    2918:	4798      	blx	r3
	}
	
	CRITICAL_SECTION_LEAVE()
    291a:	a803      	add	r0, sp, #12
    291c:	4b0b      	ldr	r3, [pc, #44]	; (294c <grid_module_hardware_transfer_complete_cb+0x23c>)
    291e:	4798      	blx	r3
	
	
	grid_module_hardware_transfer_complete = 0;
    2920:	2200      	movs	r2, #0
    2922:	4b07      	ldr	r3, [pc, #28]	; (2940 <grid_module_hardware_transfer_complete_cb+0x230>)
    2924:	701a      	strb	r2, [r3, #0]
	adc_async_start_conversion(&ADC_0);
    2926:	480e      	ldr	r0, [pc, #56]	; (2960 <grid_module_hardware_transfer_complete_cb+0x250>)
    2928:	4c10      	ldr	r4, [pc, #64]	; (296c <grid_module_hardware_transfer_complete_cb+0x25c>)
    292a:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    292c:	480e      	ldr	r0, [pc, #56]	; (2968 <grid_module_hardware_transfer_complete_cb+0x258>)
    292e:	47a0      	blx	r4
	grid_module_hardware_start_transfer();
}
    2930:	b007      	add	sp, #28
    2932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mod->report_array[report_index].helper[0] = 0;
    2936:	2200      	movs	r2, #0
    2938:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    293a:	2281      	movs	r2, #129	; 0x81
    293c:	e714      	b.n	2768 <grid_module_hardware_transfer_complete_cb+0x58>
    293e:	bf00      	nop
    2940:	20000a55 	.word	0x20000a55
    2944:	00004099 	.word	0x00004099
    2948:	41008000 	.word	0x41008000
    294c:	000040a7 	.word	0x000040a7
    2950:	20001a24 	.word	0x20001a24
    2954:	000037a5 	.word	0x000037a5
    2958:	00003b83 	.word	0x00003b83
    295c:	0000b9c0 	.word	0x0000b9c0
    2960:	20001410 	.word	0x20001410
    2964:	00003f91 	.word	0x00003f91
    2968:	200015e0 	.word	0x200015e0
    296c:	00004071 	.word	0x00004071

00002970 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    2970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2974:	b09b      	sub	sp, #108	; 0x6c
    2976:	4682      	mov	sl, r0
	
	mod->report_length = 17;
    2978:	2311      	movs	r3, #17
    297a:	7003      	strb	r3, [r0, #0]
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    297c:	f44f 7088 	mov.w	r0, #272	; 0x110
    2980:	4b43      	ldr	r3, [pc, #268]	; (2a90 <grid_module_bu16_revb_init+0x120>)
    2982:	4798      	blx	r3
    2984:	f8ca 0004 	str.w	r0, [sl, #4]
    2988:	2501      	movs	r5, #1
    298a:	2400      	movs	r4, #0
			);
			
		}
		else{
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    298c:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2acc <grid_module_bu16_revb_init+0x15c>
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    2990:	4f40      	ldr	r7, [pc, #256]	; (2a94 <grid_module_bu16_revb_init+0x124>)
    2992:	e026      	b.n	29e2 <grid_module_bu16_revb_init+0x72>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c%",
    2994:	2303      	movs	r3, #3
    2996:	9303      	str	r3, [sp, #12]
    2998:	2339      	movs	r3, #57	; 0x39
    299a:	9302      	str	r3, [sp, #8]
    299c:	2383      	movs	r3, #131	; 0x83
    299e:	9301      	str	r3, [sp, #4]
    29a0:	2380      	movs	r3, #128	; 0x80
    29a2:	9300      	str	r3, [sp, #0]
    29a4:	2301      	movs	r3, #1
    29a6:	2202      	movs	r2, #2
    29a8:	493b      	ldr	r1, [pc, #236]	; (2a98 <grid_module_bu16_revb_init+0x128>)
    29aa:	a812      	add	r0, sp, #72	; 0x48
    29ac:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    29ae:	a812      	add	r0, sp, #72	; 0x48
    29b0:	47b8      	blx	r7
    29b2:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    29b4:	ae0d      	add	r6, sp, #52	; 0x34
    29b6:	4b39      	ldr	r3, [pc, #228]	; (2a9c <grid_module_bu16_revb_init+0x12c>)
    29b8:	681b      	ldr	r3, [r3, #0]
    29ba:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    29be:	0c1b      	lsrs	r3, r3, #16
    29c0:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		
		uint8_t helper_length = strlen(helper_template);
    29c4:	4630      	mov	r0, r6
    29c6:	47b8      	blx	r7

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    29c8:	b2c0      	uxtb	r0, r0
    29ca:	9001      	str	r0, [sp, #4]
    29cc:	9600      	str	r6, [sp, #0]
    29ce:	fa5f f388 	uxtb.w	r3, r8
    29d2:	aa12      	add	r2, sp, #72	; 0x48
    29d4:	2100      	movs	r1, #0
    29d6:	4650      	mov	r0, sl
    29d8:	4e31      	ldr	r6, [pc, #196]	; (2aa0 <grid_module_bu16_revb_init+0x130>)
    29da:	47b0      	blx	r6
    29dc:	3401      	adds	r4, #1
    29de:	3501      	adds	r5, #1
    29e0:	b2ed      	uxtb	r5, r5
		if (i == 0){
    29e2:	f014 08ff 	ands.w	r8, r4, #255	; 0xff
    29e6:	d0d5      	beq.n	2994 <grid_module_bu16_revb_init+0x24>
    29e8:	1e60      	subs	r0, r4, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    29ea:	2103      	movs	r1, #3
    29ec:	910b      	str	r1, [sp, #44]	; 0x2c
    29ee:	2300      	movs	r3, #0
    29f0:	930a      	str	r3, [sp, #40]	; 0x28
    29f2:	9009      	str	r0, [sp, #36]	; 0x24
    29f4:	2263      	movs	r2, #99	; 0x63
    29f6:	9208      	str	r2, [sp, #32]
    29f8:	9307      	str	r3, [sp, #28]
    29fa:	9106      	str	r1, [sp, #24]
    29fc:	2202      	movs	r2, #2
    29fe:	9205      	str	r2, [sp, #20]
    2a00:	9104      	str	r1, [sp, #16]
    2a02:	9303      	str	r3, [sp, #12]
    2a04:	9002      	str	r0, [sp, #8]
    2a06:	2190      	movs	r1, #144	; 0x90
    2a08:	9101      	str	r1, [sp, #4]
    2a0a:	9300      	str	r3, [sp, #0]
    2a0c:	4925      	ldr	r1, [pc, #148]	; (2aa4 <grid_module_bu16_revb_init+0x134>)
    2a0e:	a812      	add	r0, sp, #72	; 0x48
    2a10:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    2a12:	a812      	add	r0, sp, #72	; 0x48
    2a14:	47b8      	blx	r7
    2a16:	4681      	mov	r9, r0
		sprintf(helper_template, "00"); // LASTVALUE
    2a18:	ae0d      	add	r6, sp, #52	; 0x34
    2a1a:	4b20      	ldr	r3, [pc, #128]	; (2a9c <grid_module_bu16_revb_init+0x12c>)
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2a22:	0c1b      	lsrs	r3, r3, #16
    2a24:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		uint8_t helper_length = strlen(helper_template);
    2a28:	4630      	mov	r0, r6
    2a2a:	47b8      	blx	r7
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2a2c:	b2c0      	uxtb	r0, r0
    2a2e:	9001      	str	r0, [sp, #4]
    2a30:	9600      	str	r6, [sp, #0]
    2a32:	fa5f f389 	uxtb.w	r3, r9
    2a36:	aa12      	add	r2, sp, #72	; 0x48
    2a38:	4641      	mov	r1, r8
    2a3a:	4650      	mov	r0, sl
    2a3c:	4e18      	ldr	r6, [pc, #96]	; (2aa0 <grid_module_bu16_revb_init+0x130>)
    2a3e:	47b0      	blx	r6
	for(uint8_t i=0; i<17; i++){
    2a40:	2d10      	cmp	r5, #16
    2a42:	d9cb      	bls.n	29dc <grid_module_bu16_revb_init+0x6c>
	}


	
	
	grid_led_init(&grid_led_state, 16);
    2a44:	4c18      	ldr	r4, [pc, #96]	; (2aa8 <grid_module_bu16_revb_init+0x138>)
    2a46:	2110      	movs	r1, #16
    2a48:	4620      	mov	r0, r4
    2a4a:	4b18      	ldr	r3, [pc, #96]	; (2aac <grid_module_bu16_revb_init+0x13c>)
    2a4c:	4798      	blx	r3
	grid_module_init_animation(&grid_led_state);
    2a4e:	4620      	mov	r0, r4
    2a50:	4b17      	ldr	r3, [pc, #92]	; (2ab0 <grid_module_bu16_revb_init+0x140>)
    2a52:	4798      	blx	r3
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_hardware_transfer_complete_cb);
    2a54:	4f17      	ldr	r7, [pc, #92]	; (2ab4 <grid_module_bu16_revb_init+0x144>)
    2a56:	4d18      	ldr	r5, [pc, #96]	; (2ab8 <grid_module_bu16_revb_init+0x148>)
    2a58:	463b      	mov	r3, r7
    2a5a:	2200      	movs	r2, #0
    2a5c:	4611      	mov	r1, r2
    2a5e:	4628      	mov	r0, r5
    2a60:	4e16      	ldr	r6, [pc, #88]	; (2abc <grid_module_bu16_revb_init+0x14c>)
    2a62:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_hardware_transfer_complete_cb);
    2a64:	4c16      	ldr	r4, [pc, #88]	; (2ac0 <grid_module_bu16_revb_init+0x150>)
    2a66:	463b      	mov	r3, r7
    2a68:	2200      	movs	r2, #0
    2a6a:	4611      	mov	r1, r2
    2a6c:	4620      	mov	r0, r4
    2a6e:	47b0      	blx	r6
	adc_async_enable_channel(&ADC_0, 0);
    2a70:	2100      	movs	r1, #0
    2a72:	4628      	mov	r0, r5
    2a74:	4e13      	ldr	r6, [pc, #76]	; (2ac4 <grid_module_bu16_revb_init+0x154>)
    2a76:	47b0      	blx	r6
	adc_async_enable_channel(&ADC_1, 0);
    2a78:	2100      	movs	r1, #0
    2a7a:	4620      	mov	r0, r4
    2a7c:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_0);
    2a7e:	4628      	mov	r0, r5
    2a80:	4d11      	ldr	r5, [pc, #68]	; (2ac8 <grid_module_bu16_revb_init+0x158>)
    2a82:	47a8      	blx	r5
	adc_async_start_conversion(&ADC_1);
    2a84:	4620      	mov	r0, r4
    2a86:	47a8      	blx	r5
	
	grid_module_hardware_init();
	grid_module_hardware_start_transfer();
	
}
    2a88:	b01b      	add	sp, #108	; 0x6c
    2a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a8e:	bf00      	nop
    2a90:	0000afa9 	.word	0x0000afa9
    2a94:	0000b1a1 	.word	0x0000b1a1
    2a98:	0000b8c4 	.word	0x0000b8c4
    2a9c:	0000b8dc 	.word	0x0000b8dc
    2aa0:	00003ac5 	.word	0x00003ac5
    2aa4:	0000b8e0 	.word	0x0000b8e0
    2aa8:	20002458 	.word	0x20002458
    2aac:	00002339 	.word	0x00002339
    2ab0:	00002631 	.word	0x00002631
    2ab4:	00002711 	.word	0x00002711
    2ab8:	20001410 	.word	0x20001410
    2abc:	00003f11 	.word	0x00003f11
    2ac0:	200015e0 	.word	0x200015e0
    2ac4:	00003ed1 	.word	0x00003ed1
    2ac8:	00004071 	.word	0x00004071
    2acc:	0000b159 	.word	0x0000b159

00002ad0 <grid_module_hardware_transfer_complete_cb>:
	
}

static void grid_module_hardware_transfer_complete_cb(void){
	
	if (grid_module_hardware_transfer_complete == 0){
    2ad0:	4ba5      	ldr	r3, [pc, #660]	; (2d68 <grid_module_hardware_transfer_complete_cb+0x298>)
    2ad2:	781b      	ldrb	r3, [r3, #0]
    2ad4:	b92b      	cbnz	r3, 2ae2 <grid_module_hardware_transfer_complete_cb+0x12>
		grid_module_hardware_transfer_complete++;
    2ad6:	4aa4      	ldr	r2, [pc, #656]	; (2d68 <grid_module_hardware_transfer_complete_cb+0x298>)
    2ad8:	7813      	ldrb	r3, [r2, #0]
    2ada:	3301      	adds	r3, #1
    2adc:	b2db      	uxtb	r3, r3
    2ade:	7013      	strb	r3, [r2, #0]
    2ae0:	4770      	bx	lr
static void grid_module_hardware_transfer_complete_cb(void){
    2ae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ae6:	b089      	sub	sp, #36	; 0x24
	/* Read mapmode state*/
	
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	CRITICAL_SECTION_ENTER()
    2ae8:	a801      	add	r0, sp, #4
    2aea:	4ca0      	ldr	r4, [pc, #640]	; (2d6c <grid_module_hardware_transfer_complete_cb+0x29c>)
    2aec:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2aee:	a806      	add	r0, sp, #24
    2af0:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2af2:	4b9f      	ldr	r3, [pc, #636]	; (2d70 <grid_module_hardware_transfer_complete_cb+0x2a0>)
    2af4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2af8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2afc:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2b00:	4054      	eors	r4, r2
    2b02:	400c      	ands	r4, r1
    2b04:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2b06:	a806      	add	r0, sp, #24
    2b08:	4b9a      	ldr	r3, [pc, #616]	; (2d74 <grid_module_hardware_transfer_complete_cb+0x2a4>)
    2b0a:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2b0c:	4b9a      	ldr	r3, [pc, #616]	; (2d78 <grid_module_hardware_transfer_complete_cb+0x2a8>)
    2b0e:	685b      	ldr	r3, [r3, #4]
    2b10:	68db      	ldr	r3, [r3, #12]
    2b12:	781a      	ldrb	r2, [r3, #0]
    2b14:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2b18:	4294      	cmp	r4, r2
    2b1a:	d010      	beq.n	2b3e <grid_module_hardware_transfer_complete_cb+0x6e>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2b1c:	2a00      	cmp	r2, #0
    2b1e:	f040 811a 	bne.w	2d56 <grid_module_hardware_transfer_complete_cb+0x286>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
			mod->report_array[report_index].helper[0] = 1;
    2b22:	2201      	movs	r2, #1
    2b24:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    2b26:	2280      	movs	r2, #128	; 0x80
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    2b28:	4c93      	ldr	r4, [pc, #588]	; (2d78 <grid_module_hardware_transfer_complete_cb+0x2a8>)
    2b2a:	6863      	ldr	r3, [r4, #4]
    2b2c:	6858      	ldr	r0, [r3, #4]
    2b2e:	2102      	movs	r1, #2
    2b30:	3003      	adds	r0, #3
    2b32:	4b92      	ldr	r3, [pc, #584]	; (2d7c <grid_module_hardware_transfer_complete_cb+0x2ac>)
    2b34:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    2b36:	2100      	movs	r1, #0
    2b38:	4620      	mov	r0, r4
    2b3a:	4b91      	ldr	r3, [pc, #580]	; (2d80 <grid_module_hardware_transfer_complete_cb+0x2b0>)
    2b3c:	4798      	blx	r3
	}

	CRITICAL_SECTION_LEAVE()
    2b3e:	a801      	add	r0, sp, #4
    2b40:	4b8c      	ldr	r3, [pc, #560]	; (2d74 <grid_module_hardware_transfer_complete_cb+0x2a4>)
    2b42:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2b44:	2300      	movs	r3, #0
    2b46:	f8ad 301e 	strh.w	r3, [sp, #30]
	uint16_t adcresult_1 = 0;
    2b4a:	f8ad 301c 	strh.w	r3, [sp, #28]
	
	uint8_t adc_index_0 = grid_module_mux_lookup[grid_module_mux+8];
    2b4e:	4986      	ldr	r1, [pc, #536]	; (2d68 <grid_module_hardware_transfer_complete_cb+0x298>)
    2b50:	784b      	ldrb	r3, [r1, #1]
    2b52:	4a8c      	ldr	r2, [pc, #560]	; (2d84 <grid_module_hardware_transfer_complete_cb+0x2b4>)
    2b54:	18d0      	adds	r0, r2, r3
    2b56:	7a06      	ldrb	r6, [r0, #8]
	uint8_t adc_index_1 = grid_module_mux_lookup[grid_module_mux+0];
    2b58:	5cd5      	ldrb	r5, [r2, r3]
	

	
	/* Update the multiplexer */
	
	grid_module_mux++;
    2b5a:	3301      	adds	r3, #1
    2b5c:	b2db      	uxtb	r3, r3
	grid_module_mux%=8;
    2b5e:	f003 0207 	and.w	r2, r3, #7
    2b62:	704a      	strb	r2, [r1, #1]
	if (level) {
    2b64:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2b6c:	4b80      	ldr	r3, [pc, #512]	; (2d70 <grid_module_hardware_transfer_complete_cb+0x2a0>)
    2b6e:	bf14      	ite	ne
    2b70:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b74:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    2b78:	f012 0f02 	tst.w	r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b7c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    2b80:	4b7b      	ldr	r3, [pc, #492]	; (2d70 <grid_module_hardware_transfer_complete_cb+0x2a0>)
    2b82:	bf14      	ite	ne
    2b84:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b88:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    2b8c:	0893      	lsrs	r3, r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2b92:	4b77      	ldr	r3, [pc, #476]	; (2d70 <grid_module_hardware_transfer_complete_cb+0x2a0>)
    2b94:	bf14      	ite	ne
    2b96:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b9a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_mux/2%2);
	gpio_set_pin_level(MUX_C, grid_module_mux/4%2);
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2b9e:	2302      	movs	r3, #2
    2ba0:	f10d 021e 	add.w	r2, sp, #30
    2ba4:	2100      	movs	r1, #0
    2ba6:	4878      	ldr	r0, [pc, #480]	; (2d88 <grid_module_hardware_transfer_complete_cb+0x2b8>)
    2ba8:	4c78      	ldr	r4, [pc, #480]	; (2d8c <grid_module_hardware_transfer_complete_cb+0x2bc>)
    2baa:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2bac:	2302      	movs	r3, #2
    2bae:	aa07      	add	r2, sp, #28
    2bb0:	2100      	movs	r1, #0
    2bb2:	4877      	ldr	r0, [pc, #476]	; (2d90 <grid_module_hardware_transfer_complete_cb+0x2c0>)
    2bb4:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2bb6:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 2d98 <grid_module_hardware_transfer_complete_cb+0x2c8>
    2bba:	f8bd 001e 	ldrh.w	r0, [sp, #30]
    2bbe:	47d8      	blx	fp
    2bc0:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 2d9c <grid_module_hardware_transfer_complete_cb+0x2cc>
    2bc4:	a366      	add	r3, pc, #408	; (adr r3, 2d60 <grid_module_hardware_transfer_complete_cb+0x290>)
    2bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    2bca:	47d0      	blx	sl
    2bcc:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 2da0 <grid_module_hardware_transfer_complete_cb+0x2d0>
    2bd0:	47c8      	blx	r9
    2bd2:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2bd6:	42a0      	cmp	r0, r4
    2bd8:	bf28      	it	cs
    2bda:	4620      	movcs	r0, r4
    2bdc:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2bde:	fa1f f880 	uxth.w	r8, r0
    2be2:	f8ad 801e 	strh.w	r8, [sp, #30]
	
	uint32_t input_1 = adcresult_1*1.03;
    2be6:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    2bea:	47d8      	blx	fp
    2bec:	a35c      	add	r3, pc, #368	; (adr r3, 2d60 <grid_module_hardware_transfer_complete_cb+0x290>)
    2bee:	e9d3 2300 	ldrd	r2, r3, [r3]
    2bf2:	47d0      	blx	sl
    2bf4:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2bf6:	42a0      	cmp	r0, r4
    2bf8:	bf28      	it	cs
    2bfa:	4620      	movcs	r0, r4
    2bfc:	b280      	uxth	r0, r0
    2bfe:	f8ad 001c 	strh.w	r0, [sp, #28]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2c02:	f1a5 0308 	sub.w	r3, r5, #8
    2c06:	b2db      	uxtb	r3, r3
    2c08:	2b01      	cmp	r3, #1
    2c0a:	f240 8099 	bls.w	2d40 <grid_module_hardware_transfer_complete_cb+0x270>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2c0e:	2e0d      	cmp	r6, #13
    2c10:	f240 80c8 	bls.w	2da4 <grid_module_hardware_transfer_complete_cb+0x2d4>
		
		if (adcresult_0>10000){
    2c14:	f242 7310 	movw	r3, #10000	; 0x2710
    2c18:	4598      	cmp	r8, r3
			adcresult_0 = 0;
    2c1a:	bf8c      	ite	hi
    2c1c:	2300      	movhi	r3, #0
		}
		else{
			adcresult_0 = 127;
    2c1e:	237f      	movls	r3, #127	; 0x7f
    2c20:	f8ad 301e 	strh.w	r3, [sp, #30]
		}
			
		if (adcresult_1>10000){
    2c24:	f242 7310 	movw	r3, #10000	; 0x2710
    2c28:	4298      	cmp	r0, r3
			adcresult_1 = 0;
    2c2a:	bf8c      	ite	hi
    2c2c:	2300      	movhi	r3, #0
		}
		else{
			adcresult_1 = 127;
    2c2e:	237f      	movls	r3, #127	; 0x7f
    2c30:	f8ad 301c 	strh.w	r3, [sp, #28]
		}
		
		
		CRITICAL_SECTION_ENTER()
    2c34:	a802      	add	r0, sp, #8
    2c36:	4b4d      	ldr	r3, [pc, #308]	; (2d6c <grid_module_hardware_transfer_complete_cb+0x29c>)
    2c38:	4798      	blx	r3

		if (adcresult_0 != mod->report_array[adc_index_0+1-4].helper[0]){
    2c3a:	f106 5480 	add.w	r4, r6, #268435456	; 0x10000000
    2c3e:	3c03      	subs	r4, #3
    2c40:	0124      	lsls	r4, r4, #4
    2c42:	4b4d      	ldr	r3, [pc, #308]	; (2d78 <grid_module_hardware_transfer_complete_cb+0x2a8>)
    2c44:	685b      	ldr	r3, [r3, #4]
    2c46:	4423      	add	r3, r4
    2c48:	68da      	ldr	r2, [r3, #12]
    2c4a:	7812      	ldrb	r2, [r2, #0]
    2c4c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    2c50:	4291      	cmp	r1, r2
    2c52:	d02f      	beq.n	2cb4 <grid_module_hardware_transfer_complete_cb+0x1e4>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2c54:	2a00      	cmp	r2, #0
    2c56:	bf0c      	ite	eq
    2c58:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2c5c:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[5], 2, command);
    2c60:	6858      	ldr	r0, [r3, #4]
    2c62:	bf0c      	ite	eq
    2c64:	2290      	moveq	r2, #144	; 0x90
    2c66:	2280      	movne	r2, #128	; 0x80
    2c68:	2102      	movs	r1, #2
    2c6a:	3005      	adds	r0, #5
    2c6c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 2d7c <grid_module_hardware_transfer_complete_cb+0x2ac>
    2c70:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[7], 2, adc_index_0);
    2c72:	4f41      	ldr	r7, [pc, #260]	; (2d78 <grid_module_hardware_transfer_complete_cb+0x2a8>)
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	4423      	add	r3, r4
    2c78:	6858      	ldr	r0, [r3, #4]
    2c7a:	4632      	mov	r2, r6
    2c7c:	2102      	movs	r1, #2
    2c7e:	3007      	adds	r0, #7
    2c80:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[9], 2, velocity);
    2c82:	687b      	ldr	r3, [r7, #4]
    2c84:	4423      	add	r3, r4
    2c86:	6858      	ldr	r0, [r3, #4]
    2c88:	464a      	mov	r2, r9
    2c8a:	2102      	movs	r1, #2
    2c8c:	3009      	adds	r0, #9
    2c8e:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[21], 2, actuator);
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	4423      	add	r3, r4
    2c94:	6858      	ldr	r0, [r3, #4]
    2c96:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2c9a:	2102      	movs	r1, #2
    2c9c:	3015      	adds	r0, #21
    2c9e:	47c0      	blx	r8
			mod->report_array[adc_index_0+1-4].helper[0] = velocity;
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	441c      	add	r4, r3
    2ca4:	68e3      	ldr	r3, [r4, #12]
    2ca6:	f883 9000 	strb.w	r9, [r3]
			
			grid_ui_report_set_changed_flag(mod, adc_index_0+1-4);
    2caa:	1ef1      	subs	r1, r6, #3
    2cac:	b2c9      	uxtb	r1, r1
    2cae:	4638      	mov	r0, r7
    2cb0:	4b33      	ldr	r3, [pc, #204]	; (2d80 <grid_module_hardware_transfer_complete_cb+0x2b0>)
    2cb2:	4798      	blx	r3
		}
		
		CRITICAL_SECTION_LEAVE()
    2cb4:	a802      	add	r0, sp, #8
    2cb6:	4b2f      	ldr	r3, [pc, #188]	; (2d74 <grid_module_hardware_transfer_complete_cb+0x2a4>)
    2cb8:	4798      	blx	r3
		
		CRITICAL_SECTION_ENTER()
    2cba:	a803      	add	r0, sp, #12
    2cbc:	4b2b      	ldr	r3, [pc, #172]	; (2d6c <grid_module_hardware_transfer_complete_cb+0x29c>)
    2cbe:	4798      	blx	r3

		if (adcresult_1 != mod->report_array[adc_index_1+1-4].helper[0]){
    2cc0:	f105 5480 	add.w	r4, r5, #268435456	; 0x10000000
    2cc4:	3c03      	subs	r4, #3
    2cc6:	0124      	lsls	r4, r4, #4
    2cc8:	4b2b      	ldr	r3, [pc, #172]	; (2d78 <grid_module_hardware_transfer_complete_cb+0x2a8>)
    2cca:	685b      	ldr	r3, [r3, #4]
    2ccc:	4423      	add	r3, r4
    2cce:	68da      	ldr	r2, [r3, #12]
    2cd0:	7812      	ldrb	r2, [r2, #0]
    2cd2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    2cd6:	4291      	cmp	r1, r2
    2cd8:	d02f      	beq.n	2d3a <grid_module_hardware_transfer_complete_cb+0x26a>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2cda:	2a00      	cmp	r2, #0
    2cdc:	bf0c      	ite	eq
    2cde:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2ce2:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[5], 2, command);
    2ce6:	6858      	ldr	r0, [r3, #4]
    2ce8:	bf0c      	ite	eq
    2cea:	2290      	moveq	r2, #144	; 0x90
    2cec:	2280      	movne	r2, #128	; 0x80
    2cee:	2102      	movs	r1, #2
    2cf0:	3005      	adds	r0, #5
    2cf2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2d7c <grid_module_hardware_transfer_complete_cb+0x2ac>
    2cf6:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[7], 2, adc_index_0);
    2cf8:	4f1f      	ldr	r7, [pc, #124]	; (2d78 <grid_module_hardware_transfer_complete_cb+0x2a8>)
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	4423      	add	r3, r4
    2cfe:	6858      	ldr	r0, [r3, #4]
    2d00:	4632      	mov	r2, r6
    2d02:	2102      	movs	r1, #2
    2d04:	3007      	adds	r0, #7
    2d06:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[9], 2, velocity);
    2d08:	687b      	ldr	r3, [r7, #4]
    2d0a:	4423      	add	r3, r4
    2d0c:	6858      	ldr	r0, [r3, #4]
    2d0e:	464a      	mov	r2, r9
    2d10:	2102      	movs	r1, #2
    2d12:	3009      	adds	r0, #9
    2d14:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[21], 2, actuator);
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	4423      	add	r3, r4
    2d1a:	6858      	ldr	r0, [r3, #4]
    2d1c:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2d20:	2102      	movs	r1, #2
    2d22:	3015      	adds	r0, #21
    2d24:	47c0      	blx	r8
			mod->report_array[adc_index_1+1-4].helper[0] = velocity;
    2d26:	687b      	ldr	r3, [r7, #4]
    2d28:	441c      	add	r4, r3
    2d2a:	68e3      	ldr	r3, [r4, #12]
    2d2c:	f883 9000 	strb.w	r9, [r3]
			
			grid_ui_report_set_changed_flag(mod, adc_index_1+1-4);
    2d30:	1ee9      	subs	r1, r5, #3
    2d32:	b2c9      	uxtb	r1, r1
    2d34:	4638      	mov	r0, r7
    2d36:	4b12      	ldr	r3, [pc, #72]	; (2d80 <grid_module_hardware_transfer_complete_cb+0x2b0>)
    2d38:	4798      	blx	r3
		}
		
		CRITICAL_SECTION_LEAVE()
    2d3a:	a803      	add	r0, sp, #12
    2d3c:	4b0d      	ldr	r3, [pc, #52]	; (2d74 <grid_module_hardware_transfer_complete_cb+0x2a4>)
    2d3e:	4798      	blx	r3
	
	
	
	
	
	grid_module_hardware_transfer_complete = 0;
    2d40:	2200      	movs	r2, #0
    2d42:	4b09      	ldr	r3, [pc, #36]	; (2d68 <grid_module_hardware_transfer_complete_cb+0x298>)
    2d44:	701a      	strb	r2, [r3, #0]
	adc_async_start_conversion(&ADC_0);
    2d46:	4810      	ldr	r0, [pc, #64]	; (2d88 <grid_module_hardware_transfer_complete_cb+0x2b8>)
    2d48:	4c12      	ldr	r4, [pc, #72]	; (2d94 <grid_module_hardware_transfer_complete_cb+0x2c4>)
    2d4a:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2d4c:	4810      	ldr	r0, [pc, #64]	; (2d90 <grid_module_hardware_transfer_complete_cb+0x2c0>)
    2d4e:	47a0      	blx	r4
	grid_module_hardware_start_transfer();
}
    2d50:	b009      	add	sp, #36	; 0x24
    2d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod->report_array[report_index].helper[0] = 0;
    2d56:	2200      	movs	r2, #0
    2d58:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    2d5a:	2281      	movs	r2, #129	; 0x81
    2d5c:	e6e4      	b.n	2b28 <grid_module_hardware_transfer_complete_cb+0x58>
    2d5e:	bf00      	nop
    2d60:	47ae147b 	.word	0x47ae147b
    2d64:	3ff07ae1 	.word	0x3ff07ae1
    2d68:	20000a57 	.word	0x20000a57
    2d6c:	00004099 	.word	0x00004099
    2d70:	41008000 	.word	0x41008000
    2d74:	000040a7 	.word	0x000040a7
    2d78:	20001a24 	.word	0x20001a24
    2d7c:	000037a5 	.word	0x000037a5
    2d80:	00003b83 	.word	0x00003b83
    2d84:	0000b9d0 	.word	0x0000b9d0
    2d88:	20001410 	.word	0x20001410
    2d8c:	00003f91 	.word	0x00003f91
    2d90:	200015e0 	.word	0x200015e0
    2d94:	00004071 	.word	0x00004071
    2d98:	0000aa31 	.word	0x0000aa31
    2d9c:	0000aafd 	.word	0x0000aafd
    2da0:	0000af21 	.word	0x0000af21
		if (adc_index_1 == 0 || adc_index_1 == 1){
    2da4:	2d01      	cmp	r5, #1
    2da6:	d921      	bls.n	2dec <grid_module_hardware_transfer_complete_cb+0x31c>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    2da8:	b2b9      	uxth	r1, r7
    2daa:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2dae:	1a79      	subs	r1, r7, r1
    2db0:	4630      	mov	r0, r6
    2db2:	4c3a      	ldr	r4, [pc, #232]	; (2e9c <grid_module_hardware_transfer_complete_cb+0x3cc>)
    2db4:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    2db6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    2dba:	1a79      	subs	r1, r7, r1
    2dbc:	4628      	mov	r0, r5
    2dbe:	47a0      	blx	r4
		CRITICAL_SECTION_ENTER()
    2dc0:	a804      	add	r0, sp, #16
    2dc2:	4b37      	ldr	r3, [pc, #220]	; (2ea0 <grid_module_hardware_transfer_complete_cb+0x3d0>)
    2dc4:	4798      	blx	r3
		if (grid_ain_get_changed(adc_index_0)){
    2dc6:	4630      	mov	r0, r6
    2dc8:	4b36      	ldr	r3, [pc, #216]	; (2ea4 <grid_module_hardware_transfer_complete_cb+0x3d4>)
    2dca:	4798      	blx	r3
    2dcc:	b9b8      	cbnz	r0, 2dfe <grid_module_hardware_transfer_complete_cb+0x32e>
		CRITICAL_SECTION_LEAVE()
    2dce:	a804      	add	r0, sp, #16
    2dd0:	4b35      	ldr	r3, [pc, #212]	; (2ea8 <grid_module_hardware_transfer_complete_cb+0x3d8>)
    2dd2:	4798      	blx	r3
		CRITICAL_SECTION_ENTER()
    2dd4:	a805      	add	r0, sp, #20
    2dd6:	4b32      	ldr	r3, [pc, #200]	; (2ea0 <grid_module_hardware_transfer_complete_cb+0x3d0>)
    2dd8:	4798      	blx	r3
		if (grid_ain_get_changed(adc_index_1)){
    2dda:	4628      	mov	r0, r5
    2ddc:	4b31      	ldr	r3, [pc, #196]	; (2ea4 <grid_module_hardware_transfer_complete_cb+0x3d4>)
    2dde:	4798      	blx	r3
    2de0:	2800      	cmp	r0, #0
    2de2:	d134      	bne.n	2e4e <grid_module_hardware_transfer_complete_cb+0x37e>
		CRITICAL_SECTION_LEAVE()
    2de4:	a805      	add	r0, sp, #20
    2de6:	4b30      	ldr	r3, [pc, #192]	; (2ea8 <grid_module_hardware_transfer_complete_cb+0x3d8>)
    2de8:	4798      	blx	r3
    2dea:	e7a9      	b.n	2d40 <grid_module_hardware_transfer_complete_cb+0x270>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    2dec:	b2b9      	uxth	r1, r7
    2dee:	4630      	mov	r0, r6
    2df0:	4c2a      	ldr	r4, [pc, #168]	; (2e9c <grid_module_hardware_transfer_complete_cb+0x3cc>)
    2df2:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    2df4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    2df8:	4628      	mov	r0, r5
    2dfa:	47a0      	blx	r4
    2dfc:	e7e0      	b.n	2dc0 <grid_module_hardware_transfer_complete_cb+0x2f0>
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    2dfe:	2107      	movs	r1, #7
    2e00:	4630      	mov	r0, r6
    2e02:	4b2a      	ldr	r3, [pc, #168]	; (2eac <grid_module_hardware_transfer_complete_cb+0x3dc>)
    2e04:	4798      	blx	r3
    2e06:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    2e08:	f106 0801 	add.w	r8, r6, #1
    2e0c:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2e10:	4c27      	ldr	r4, [pc, #156]	; (2eb0 <grid_module_hardware_transfer_complete_cb+0x3e0>)
    2e12:	6863      	ldr	r3, [r4, #4]
    2e14:	444b      	add	r3, r9
    2e16:	6858      	ldr	r0, [r3, #4]
    2e18:	4632      	mov	r2, r6
    2e1a:	2102      	movs	r1, #2
    2e1c:	3007      	adds	r0, #7
    2e1e:	4e25      	ldr	r6, [pc, #148]	; (2eb4 <grid_module_hardware_transfer_complete_cb+0x3e4>)
    2e20:	47b0      	blx	r6
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, value);
    2e22:	6863      	ldr	r3, [r4, #4]
    2e24:	444b      	add	r3, r9
    2e26:	6858      	ldr	r0, [r3, #4]
    2e28:	b2fa      	uxtb	r2, r7
    2e2a:	2102      	movs	r1, #2
    2e2c:	3009      	adds	r0, #9
    2e2e:	47b0      	blx	r6
			uint8_t actuator = 2*value;
    2e30:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    2e32:	6863      	ldr	r3, [r4, #4]
    2e34:	444b      	add	r3, r9
    2e36:	6858      	ldr	r0, [r3, #4]
    2e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2e3c:	2102      	movs	r1, #2
    2e3e:	3015      	adds	r0, #21
    2e40:	47b0      	blx	r6
			grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    2e42:	fa5f f188 	uxtb.w	r1, r8
    2e46:	4620      	mov	r0, r4
    2e48:	4b1b      	ldr	r3, [pc, #108]	; (2eb8 <grid_module_hardware_transfer_complete_cb+0x3e8>)
    2e4a:	4798      	blx	r3
    2e4c:	e7bf      	b.n	2dce <grid_module_hardware_transfer_complete_cb+0x2fe>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    2e4e:	2107      	movs	r1, #7
    2e50:	4628      	mov	r0, r5
    2e52:	4b16      	ldr	r3, [pc, #88]	; (2eac <grid_module_hardware_transfer_complete_cb+0x3dc>)
    2e54:	4798      	blx	r3
    2e56:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    2e58:	1c6f      	adds	r7, r5, #1
    2e5a:	ea4f 1807 	mov.w	r8, r7, lsl #4
    2e5e:	4c14      	ldr	r4, [pc, #80]	; (2eb0 <grid_module_hardware_transfer_complete_cb+0x3e0>)
    2e60:	6863      	ldr	r3, [r4, #4]
    2e62:	4443      	add	r3, r8
    2e64:	6858      	ldr	r0, [r3, #4]
    2e66:	462a      	mov	r2, r5
    2e68:	2102      	movs	r1, #2
    2e6a:	3007      	adds	r0, #7
    2e6c:	4d11      	ldr	r5, [pc, #68]	; (2eb4 <grid_module_hardware_transfer_complete_cb+0x3e4>)
    2e6e:	47a8      	blx	r5
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, value);
    2e70:	6863      	ldr	r3, [r4, #4]
    2e72:	4443      	add	r3, r8
    2e74:	6858      	ldr	r0, [r3, #4]
    2e76:	b2f2      	uxtb	r2, r6
    2e78:	2102      	movs	r1, #2
    2e7a:	3009      	adds	r0, #9
    2e7c:	47a8      	blx	r5
			uint8_t actuator = 2*value;
    2e7e:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    2e80:	6863      	ldr	r3, [r4, #4]
    2e82:	4443      	add	r3, r8
    2e84:	6858      	ldr	r0, [r3, #4]
    2e86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2e8a:	2102      	movs	r1, #2
    2e8c:	3015      	adds	r0, #21
    2e8e:	47a8      	blx	r5
			grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    2e90:	b2f9      	uxtb	r1, r7
    2e92:	4620      	mov	r0, r4
    2e94:	4b08      	ldr	r3, [pc, #32]	; (2eb8 <grid_module_hardware_transfer_complete_cb+0x3e8>)
    2e96:	4798      	blx	r3
    2e98:	e7a4      	b.n	2de4 <grid_module_hardware_transfer_complete_cb+0x314>
    2e9a:	bf00      	nop
    2e9c:	00001571 	.word	0x00001571
    2ea0:	00004099 	.word	0x00004099
    2ea4:	0000166d 	.word	0x0000166d
    2ea8:	000040a7 	.word	0x000040a7
    2eac:	0000167d 	.word	0x0000167d
    2eb0:	20001a24 	.word	0x20001a24
    2eb4:	000037a5 	.word	0x000037a5
    2eb8:	00003b83 	.word	0x00003b83

00002ebc <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    2ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ec0:	b09a      	sub	sp, #104	; 0x68
    2ec2:	4607      	mov	r7, r0
	
	mod->report_length = 13;
    2ec4:	230d      	movs	r3, #13
    2ec6:	7003      	strb	r3, [r0, #0]
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    2ec8:	20d0      	movs	r0, #208	; 0xd0
    2eca:	4b3f      	ldr	r3, [pc, #252]	; (2fc8 <grid_module_pbf4_reva_init+0x10c>)
    2ecc:	4798      	blx	r3
    2ece:	6078      	str	r0, [r7, #4]
    2ed0:	2400      	movs	r4, #0
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2ed2:	f8df a130 	ldr.w	sl, [pc, #304]	; 3004 <grid_module_pbf4_reva_init+0x148>
    2ed6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 3008 <grid_module_pbf4_reva_init+0x14c>
    2eda:	e029      	b.n	2f30 <grid_module_pbf4_reva_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c%",
    2edc:	2303      	movs	r3, #3
    2ede:	9303      	str	r3, [sp, #12]
    2ee0:	2339      	movs	r3, #57	; 0x39
    2ee2:	9302      	str	r3, [sp, #8]
    2ee4:	2383      	movs	r3, #131	; 0x83
    2ee6:	9301      	str	r3, [sp, #4]
    2ee8:	2380      	movs	r3, #128	; 0x80
    2eea:	9300      	str	r3, [sp, #0]
    2eec:	2301      	movs	r3, #1
    2eee:	2202      	movs	r2, #2
    2ef0:	4936      	ldr	r1, [pc, #216]	; (2fcc <grid_module_pbf4_reva_init+0x110>)
    2ef2:	a812      	add	r0, sp, #72	; 0x48
    2ef4:	47c8      	blx	r9
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    2ef6:	a812      	add	r0, sp, #72	; 0x48
    2ef8:	4e35      	ldr	r6, [pc, #212]	; (2fd0 <grid_module_pbf4_reva_init+0x114>)
    2efa:	47b0      	blx	r6
    2efc:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    2efe:	ad0d      	add	r5, sp, #52	; 0x34
    2f00:	4b34      	ldr	r3, [pc, #208]	; (2fd4 <grid_module_pbf4_reva_init+0x118>)
    2f02:	681b      	ldr	r3, [r3, #0]
    2f04:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2f08:	0c1b      	lsrs	r3, r3, #16
    2f0a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		
		uint8_t helper_length = strlen(helper_template);
    2f0e:	4628      	mov	r0, r5
    2f10:	47b0      	blx	r6

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2f12:	b2c0      	uxtb	r0, r0
    2f14:	9001      	str	r0, [sp, #4]
    2f16:	9500      	str	r5, [sp, #0]
    2f18:	fa5f f388 	uxtb.w	r3, r8
    2f1c:	aa12      	add	r2, sp, #72	; 0x48
    2f1e:	4621      	mov	r1, r4
    2f20:	4638      	mov	r0, r7
    2f22:	4d2d      	ldr	r5, [pc, #180]	; (2fd8 <grid_module_pbf4_reva_init+0x11c>)
    2f24:	47a8      	blx	r5
	for(uint8_t i=0; i<mod->report_length; i++){
    2f26:	3401      	adds	r4, #1
    2f28:	b2e4      	uxtb	r4, r4
    2f2a:	783b      	ldrb	r3, [r7, #0]
    2f2c:	42a3      	cmp	r3, r4
    2f2e:	d91f      	bls.n	2f70 <grid_module_pbf4_reva_init+0xb4>
		if (i == 0){
    2f30:	2c00      	cmp	r4, #0
    2f32:	d0d3      	beq.n	2edc <grid_module_pbf4_reva_init+0x20>
		else if (i<9){ // PORENTIOMETERS & FADERS
    2f34:	2c08      	cmp	r4, #8
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2f36:	f104 30ff 	add.w	r0, r4, #4294967295
    2f3a:	f04f 0103 	mov.w	r1, #3
    2f3e:	910b      	str	r1, [sp, #44]	; 0x2c
    2f40:	f04f 0300 	mov.w	r3, #0
    2f44:	930a      	str	r3, [sp, #40]	; 0x28
    2f46:	9009      	str	r0, [sp, #36]	; 0x24
    2f48:	f04f 0263 	mov.w	r2, #99	; 0x63
    2f4c:	9208      	str	r2, [sp, #32]
    2f4e:	9307      	str	r3, [sp, #28]
    2f50:	9106      	str	r1, [sp, #24]
    2f52:	f04f 0202 	mov.w	r2, #2
    2f56:	9205      	str	r2, [sp, #20]
    2f58:	9104      	str	r1, [sp, #16]
    2f5a:	9303      	str	r3, [sp, #12]
    2f5c:	9002      	str	r0, [sp, #8]
    2f5e:	bf94      	ite	ls
    2f60:	21b0      	movls	r1, #176	; 0xb0
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2f62:	2190      	movhi	r1, #144	; 0x90
    2f64:	9101      	str	r1, [sp, #4]
    2f66:	9300      	str	r3, [sp, #0]
    2f68:	4651      	mov	r1, sl
    2f6a:	a812      	add	r0, sp, #72	; 0x48
    2f6c:	47c8      	blx	r9
    2f6e:	e7c2      	b.n	2ef6 <grid_module_pbf4_reva_init+0x3a>
		
	}
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    2f70:	2307      	movs	r3, #7
    2f72:	220e      	movs	r2, #14
    2f74:	2105      	movs	r1, #5
    2f76:	2010      	movs	r0, #16
    2f78:	4c18      	ldr	r4, [pc, #96]	; (2fdc <grid_module_pbf4_reva_init+0x120>)
    2f7a:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 16);
    2f7c:	4c18      	ldr	r4, [pc, #96]	; (2fe0 <grid_module_pbf4_reva_init+0x124>)
    2f7e:	2110      	movs	r1, #16
    2f80:	4620      	mov	r0, r4
    2f82:	4b18      	ldr	r3, [pc, #96]	; (2fe4 <grid_module_pbf4_reva_init+0x128>)
    2f84:	4798      	blx	r3
	grid_module_init_animation(&grid_led_state);
    2f86:	4620      	mov	r0, r4
    2f88:	4b17      	ldr	r3, [pc, #92]	; (2fe8 <grid_module_pbf4_reva_init+0x12c>)
    2f8a:	4798      	blx	r3
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_hardware_transfer_complete_cb);
    2f8c:	4f17      	ldr	r7, [pc, #92]	; (2fec <grid_module_pbf4_reva_init+0x130>)
    2f8e:	4d18      	ldr	r5, [pc, #96]	; (2ff0 <grid_module_pbf4_reva_init+0x134>)
    2f90:	463b      	mov	r3, r7
    2f92:	2200      	movs	r2, #0
    2f94:	4611      	mov	r1, r2
    2f96:	4628      	mov	r0, r5
    2f98:	4e16      	ldr	r6, [pc, #88]	; (2ff4 <grid_module_pbf4_reva_init+0x138>)
    2f9a:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_hardware_transfer_complete_cb);
    2f9c:	4c16      	ldr	r4, [pc, #88]	; (2ff8 <grid_module_pbf4_reva_init+0x13c>)
    2f9e:	463b      	mov	r3, r7
    2fa0:	2200      	movs	r2, #0
    2fa2:	4611      	mov	r1, r2
    2fa4:	4620      	mov	r0, r4
    2fa6:	47b0      	blx	r6
	adc_async_enable_channel(&ADC_0, 0);
    2fa8:	2100      	movs	r1, #0
    2faa:	4628      	mov	r0, r5
    2fac:	4e13      	ldr	r6, [pc, #76]	; (2ffc <grid_module_pbf4_reva_init+0x140>)
    2fae:	47b0      	blx	r6
	adc_async_enable_channel(&ADC_1, 0);
    2fb0:	2100      	movs	r1, #0
    2fb2:	4620      	mov	r0, r4
    2fb4:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_0);
    2fb6:	4628      	mov	r0, r5
    2fb8:	4d11      	ldr	r5, [pc, #68]	; (3000 <grid_module_pbf4_reva_init+0x144>)
    2fba:	47a8      	blx	r5
	adc_async_start_conversion(&ADC_1);
    2fbc:	4620      	mov	r0, r4
    2fbe:	47a8      	blx	r5
	
	grid_module_hardware_init();
	grid_module_hardware_start_transfer();
	
    2fc0:	b01a      	add	sp, #104	; 0x68
    2fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2fc6:	bf00      	nop
    2fc8:	0000afa9 	.word	0x0000afa9
    2fcc:	0000b8c4 	.word	0x0000b8c4
    2fd0:	0000b1a1 	.word	0x0000b1a1
    2fd4:	0000b8dc 	.word	0x0000b8dc
    2fd8:	00003ac5 	.word	0x00003ac5
    2fdc:	00001525 	.word	0x00001525
    2fe0:	20002458 	.word	0x20002458
    2fe4:	00002339 	.word	0x00002339
    2fe8:	00002631 	.word	0x00002631
    2fec:	00002ad1 	.word	0x00002ad1
    2ff0:	20001410 	.word	0x20001410
    2ff4:	00003f11 	.word	0x00003f11
    2ff8:	200015e0 	.word	0x200015e0
    2ffc:	00003ed1 	.word	0x00003ed1
    3000:	00004071 	.word	0x00004071
    3004:	0000b8e0 	.word	0x0000b8e0
    3008:	0000b159 	.word	0x0000b159
    300c:	00000000 	.word	0x00000000

00003010 <grid_module_hardware_transfer_complete_cb>:
	
}

static void grid_module_hardware_transfer_complete_cb(void){
	
	if (grid_module_hardware_transfer_complete == 0){
    3010:	4b89      	ldr	r3, [pc, #548]	; (3238 <grid_module_hardware_transfer_complete_cb+0x228>)
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	b92b      	cbnz	r3, 3022 <grid_module_hardware_transfer_complete_cb+0x12>
		grid_module_hardware_transfer_complete++;
    3016:	4a88      	ldr	r2, [pc, #544]	; (3238 <grid_module_hardware_transfer_complete_cb+0x228>)
    3018:	7813      	ldrb	r3, [r2, #0]
    301a:	3301      	adds	r3, #1
    301c:	b2db      	uxtb	r3, r3
    301e:	7013      	strb	r3, [r2, #0]
    3020:	4770      	bx	lr
static void grid_module_hardware_transfer_complete_cb(void){
    3022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3026:	b086      	sub	sp, #24
	/* Read mapmode state*/
	
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	CRITICAL_SECTION_ENTER()
    3028:	a801      	add	r0, sp, #4
    302a:	4c84      	ldr	r4, [pc, #528]	; (323c <grid_module_hardware_transfer_complete_cb+0x22c>)
    302c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    302e:	a804      	add	r0, sp, #16
    3030:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3032:	4b83      	ldr	r3, [pc, #524]	; (3240 <grid_module_hardware_transfer_complete_cb+0x230>)
    3034:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3038:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    303c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3040:	4054      	eors	r4, r2
    3042:	400c      	ands	r4, r1
    3044:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3046:	a804      	add	r0, sp, #16
    3048:	4b7e      	ldr	r3, [pc, #504]	; (3244 <grid_module_hardware_transfer_complete_cb+0x234>)
    304a:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    304c:	4b7e      	ldr	r3, [pc, #504]	; (3248 <grid_module_hardware_transfer_complete_cb+0x238>)
    304e:	685b      	ldr	r3, [r3, #4]
    3050:	68db      	ldr	r3, [r3, #12]
    3052:	781a      	ldrb	r2, [r3, #0]
    3054:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    3058:	4294      	cmp	r4, r2
    305a:	d010      	beq.n	307e <grid_module_hardware_transfer_complete_cb+0x6e>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    305c:	2a00      	cmp	r2, #0
    305e:	f040 8095 	bne.w	318c <grid_module_hardware_transfer_complete_cb+0x17c>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
			mod->report_array[report_index].helper[0] = 1;
    3062:	2201      	movs	r2, #1
    3064:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    3066:	2280      	movs	r2, #128	; 0x80
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    3068:	4c77      	ldr	r4, [pc, #476]	; (3248 <grid_module_hardware_transfer_complete_cb+0x238>)
    306a:	6863      	ldr	r3, [r4, #4]
    306c:	6858      	ldr	r0, [r3, #4]
    306e:	2102      	movs	r1, #2
    3070:	3003      	adds	r0, #3
    3072:	4b76      	ldr	r3, [pc, #472]	; (324c <grid_module_hardware_transfer_complete_cb+0x23c>)
    3074:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    3076:	2100      	movs	r1, #0
    3078:	4620      	mov	r0, r4
    307a:	4b75      	ldr	r3, [pc, #468]	; (3250 <grid_module_hardware_transfer_complete_cb+0x240>)
    307c:	4798      	blx	r3
	}

	CRITICAL_SECTION_LEAVE()
    307e:	a801      	add	r0, sp, #4
    3080:	4b70      	ldr	r3, [pc, #448]	; (3244 <grid_module_hardware_transfer_complete_cb+0x234>)
    3082:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3084:	2300      	movs	r3, #0
    3086:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint16_t adcresult_1 = 0;
    308a:	f8ad 3014 	strh.w	r3, [sp, #20]
	
	uint8_t adc_index_0 = grid_module_mux_lookup[grid_module_mux+8];
    308e:	496a      	ldr	r1, [pc, #424]	; (3238 <grid_module_hardware_transfer_complete_cb+0x228>)
    3090:	784b      	ldrb	r3, [r1, #1]
    3092:	4a70      	ldr	r2, [pc, #448]	; (3254 <grid_module_hardware_transfer_complete_cb+0x244>)
    3094:	18d0      	adds	r0, r2, r3
    3096:	7a06      	ldrb	r6, [r0, #8]
	uint8_t adc_index_1 = grid_module_mux_lookup[grid_module_mux+0];
    3098:	5cd5      	ldrb	r5, [r2, r3]
	
	/* Update the multiplexer */
	
	grid_module_mux++;
    309a:	3301      	adds	r3, #1
    309c:	b2db      	uxtb	r3, r3
	grid_module_mux%=8;
    309e:	f003 0207 	and.w	r2, r3, #7
    30a2:	704a      	strb	r2, [r1, #1]
	if (level) {
    30a4:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    30ac:	4b64      	ldr	r3, [pc, #400]	; (3240 <grid_module_hardware_transfer_complete_cb+0x230>)
    30ae:	bf14      	ite	ne
    30b0:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30b4:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    30b8:	f012 0f02 	tst.w	r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30bc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    30c0:	4b5f      	ldr	r3, [pc, #380]	; (3240 <grid_module_hardware_transfer_complete_cb+0x230>)
    30c2:	bf14      	ite	ne
    30c4:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30c8:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    30cc:	0893      	lsrs	r3, r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    30d2:	4b5b      	ldr	r3, [pc, #364]	; (3240 <grid_module_hardware_transfer_complete_cb+0x230>)
    30d4:	bf14      	ite	ne
    30d6:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30da:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_mux/2%2);
	gpio_set_pin_level(MUX_C, grid_module_mux/4%2);
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    30de:	2302      	movs	r3, #2
    30e0:	f10d 0216 	add.w	r2, sp, #22
    30e4:	2100      	movs	r1, #0
    30e6:	485c      	ldr	r0, [pc, #368]	; (3258 <grid_module_hardware_transfer_complete_cb+0x248>)
    30e8:	4c5c      	ldr	r4, [pc, #368]	; (325c <grid_module_hardware_transfer_complete_cb+0x24c>)
    30ea:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    30ec:	2302      	movs	r3, #2
    30ee:	aa05      	add	r2, sp, #20
    30f0:	2100      	movs	r1, #0
    30f2:	485b      	ldr	r0, [pc, #364]	; (3260 <grid_module_hardware_transfer_complete_cb+0x250>)
    30f4:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    30f6:	f8df a17c 	ldr.w	sl, [pc, #380]	; 3274 <grid_module_hardware_transfer_complete_cb+0x264>
    30fa:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    30fe:	47d0      	blx	sl
    3100:	f8df 9174 	ldr.w	r9, [pc, #372]	; 3278 <grid_module_hardware_transfer_complete_cb+0x268>
    3104:	a34a      	add	r3, pc, #296	; (adr r3, 3230 <grid_module_hardware_transfer_complete_cb+0x220>)
    3106:	e9d3 2300 	ldrd	r2, r3, [r3]
    310a:	47c8      	blx	r9
    310c:	f8df 816c 	ldr.w	r8, [pc, #364]	; 327c <grid_module_hardware_transfer_complete_cb+0x26c>
    3110:	47c0      	blx	r8
    3112:	f64f 74ff 	movw	r4, #65535	; 0xffff
    3116:	42a0      	cmp	r0, r4
    3118:	bf28      	it	cs
    311a:	4620      	movcs	r0, r4
    311c:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    311e:	f8ad 0016 	strh.w	r0, [sp, #22]
	
	uint32_t input_1 = adcresult_1*1.03;	
    3122:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    3126:	47d0      	blx	sl
    3128:	a341      	add	r3, pc, #260	; (adr r3, 3230 <grid_module_hardware_transfer_complete_cb+0x220>)
    312a:	e9d3 2300 	ldrd	r2, r3, [r3]
    312e:	47c8      	blx	r9
    3130:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    3132:	42a0      	cmp	r0, r4
    3134:	bf28      	it	cs
    3136:	4620      	movcs	r0, r4
    3138:	f8ad 0014 	strh.w	r0, [sp, #20]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    313c:	b2b9      	uxth	r1, r7
    313e:	4630      	mov	r0, r6
    3140:	4c48      	ldr	r4, [pc, #288]	; (3264 <grid_module_hardware_transfer_complete_cb+0x254>)
    3142:	47a0      	blx	r4
	grid_ain_add_sample(adc_index_1, adcresult_1);
    3144:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    3148:	4628      	mov	r0, r5
    314a:	47a0      	blx	r4

	
	CRITICAL_SECTION_ENTER()
    314c:	a802      	add	r0, sp, #8
    314e:	4b3b      	ldr	r3, [pc, #236]	; (323c <grid_module_hardware_transfer_complete_cb+0x22c>)
    3150:	4798      	blx	r3

	if (grid_ain_get_changed(adc_index_0)){
    3152:	4630      	mov	r0, r6
    3154:	4b44      	ldr	r3, [pc, #272]	; (3268 <grid_module_hardware_transfer_complete_cb+0x258>)
    3156:	4798      	blx	r3
    3158:	b9e0      	cbnz	r0, 3194 <grid_module_hardware_transfer_complete_cb+0x184>
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
		
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
	}
	
	CRITICAL_SECTION_LEAVE()
    315a:	a802      	add	r0, sp, #8
    315c:	4b39      	ldr	r3, [pc, #228]	; (3244 <grid_module_hardware_transfer_complete_cb+0x234>)
    315e:	4798      	blx	r3
	
	
	CRITICAL_SECTION_ENTER()
    3160:	a803      	add	r0, sp, #12
    3162:	4b36      	ldr	r3, [pc, #216]	; (323c <grid_module_hardware_transfer_complete_cb+0x22c>)
    3164:	4798      	blx	r3

	if (grid_ain_get_changed(adc_index_1)){
    3166:	4628      	mov	r0, r5
    3168:	4b3f      	ldr	r3, [pc, #252]	; (3268 <grid_module_hardware_transfer_complete_cb+0x258>)
    316a:	4798      	blx	r3
    316c:	2800      	cmp	r0, #0
    316e:	d139      	bne.n	31e4 <grid_module_hardware_transfer_complete_cb+0x1d4>
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
		
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
	}
	
	CRITICAL_SECTION_LEAVE()
    3170:	a803      	add	r0, sp, #12
    3172:	4b34      	ldr	r3, [pc, #208]	; (3244 <grid_module_hardware_transfer_complete_cb+0x234>)
    3174:	4798      	blx	r3
	
	
	grid_module_hardware_transfer_complete = 0;
    3176:	2200      	movs	r2, #0
    3178:	4b2f      	ldr	r3, [pc, #188]	; (3238 <grid_module_hardware_transfer_complete_cb+0x228>)
    317a:	701a      	strb	r2, [r3, #0]
	adc_async_start_conversion(&ADC_0);
    317c:	4836      	ldr	r0, [pc, #216]	; (3258 <grid_module_hardware_transfer_complete_cb+0x248>)
    317e:	4c3b      	ldr	r4, [pc, #236]	; (326c <grid_module_hardware_transfer_complete_cb+0x25c>)
    3180:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3182:	4837      	ldr	r0, [pc, #220]	; (3260 <grid_module_hardware_transfer_complete_cb+0x250>)
    3184:	47a0      	blx	r4
	grid_module_hardware_start_transfer();
}
    3186:	b006      	add	sp, #24
    3188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			mod->report_array[report_index].helper[0] = 0;
    318c:	2200      	movs	r2, #0
    318e:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    3190:	2281      	movs	r2, #129	; 0x81
    3192:	e769      	b.n	3068 <grid_module_hardware_transfer_complete_cb+0x58>
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    3194:	2107      	movs	r1, #7
    3196:	4630      	mov	r0, r6
    3198:	4b35      	ldr	r3, [pc, #212]	; (3270 <grid_module_hardware_transfer_complete_cb+0x260>)
    319a:	4798      	blx	r3
    319c:	4607      	mov	r7, r0
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    319e:	f106 0801 	add.w	r8, r6, #1
    31a2:	ea4f 1908 	mov.w	r9, r8, lsl #4
    31a6:	4c28      	ldr	r4, [pc, #160]	; (3248 <grid_module_hardware_transfer_complete_cb+0x238>)
    31a8:	6863      	ldr	r3, [r4, #4]
    31aa:	444b      	add	r3, r9
    31ac:	6858      	ldr	r0, [r3, #4]
    31ae:	4632      	mov	r2, r6
    31b0:	2102      	movs	r1, #2
    31b2:	3007      	adds	r0, #7
    31b4:	4e25      	ldr	r6, [pc, #148]	; (324c <grid_module_hardware_transfer_complete_cb+0x23c>)
    31b6:	47b0      	blx	r6
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, value);
    31b8:	6863      	ldr	r3, [r4, #4]
    31ba:	444b      	add	r3, r9
    31bc:	6858      	ldr	r0, [r3, #4]
    31be:	b2fa      	uxtb	r2, r7
    31c0:	2102      	movs	r1, #2
    31c2:	3009      	adds	r0, #9
    31c4:	47b0      	blx	r6
		uint8_t actuator = 2*value;
    31c6:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    31c8:	6863      	ldr	r3, [r4, #4]
    31ca:	444b      	add	r3, r9
    31cc:	6858      	ldr	r0, [r3, #4]
    31ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    31d2:	2102      	movs	r1, #2
    31d4:	3015      	adds	r0, #21
    31d6:	47b0      	blx	r6
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    31d8:	fa5f f188 	uxtb.w	r1, r8
    31dc:	4620      	mov	r0, r4
    31de:	4b1c      	ldr	r3, [pc, #112]	; (3250 <grid_module_hardware_transfer_complete_cb+0x240>)
    31e0:	4798      	blx	r3
    31e2:	e7ba      	b.n	315a <grid_module_hardware_transfer_complete_cb+0x14a>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    31e4:	2107      	movs	r1, #7
    31e6:	4628      	mov	r0, r5
    31e8:	4b21      	ldr	r3, [pc, #132]	; (3270 <grid_module_hardware_transfer_complete_cb+0x260>)
    31ea:	4798      	blx	r3
    31ec:	4606      	mov	r6, r0
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    31ee:	1c6f      	adds	r7, r5, #1
    31f0:	ea4f 1807 	mov.w	r8, r7, lsl #4
    31f4:	4c14      	ldr	r4, [pc, #80]	; (3248 <grid_module_hardware_transfer_complete_cb+0x238>)
    31f6:	6863      	ldr	r3, [r4, #4]
    31f8:	4443      	add	r3, r8
    31fa:	6858      	ldr	r0, [r3, #4]
    31fc:	462a      	mov	r2, r5
    31fe:	2102      	movs	r1, #2
    3200:	3007      	adds	r0, #7
    3202:	4d12      	ldr	r5, [pc, #72]	; (324c <grid_module_hardware_transfer_complete_cb+0x23c>)
    3204:	47a8      	blx	r5
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, value);
    3206:	6863      	ldr	r3, [r4, #4]
    3208:	4443      	add	r3, r8
    320a:	6858      	ldr	r0, [r3, #4]
    320c:	b2f2      	uxtb	r2, r6
    320e:	2102      	movs	r1, #2
    3210:	3009      	adds	r0, #9
    3212:	47a8      	blx	r5
		uint8_t actuator = 2*value;
    3214:	0072      	lsls	r2, r6, #1
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    3216:	6863      	ldr	r3, [r4, #4]
    3218:	4443      	add	r3, r8
    321a:	6858      	ldr	r0, [r3, #4]
    321c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3220:	2102      	movs	r1, #2
    3222:	3015      	adds	r0, #21
    3224:	47a8      	blx	r5
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    3226:	b2f9      	uxtb	r1, r7
    3228:	4620      	mov	r0, r4
    322a:	4b09      	ldr	r3, [pc, #36]	; (3250 <grid_module_hardware_transfer_complete_cb+0x240>)
    322c:	4798      	blx	r3
    322e:	e79f      	b.n	3170 <grid_module_hardware_transfer_complete_cb+0x160>
    3230:	47ae147b 	.word	0x47ae147b
    3234:	3ff07ae1 	.word	0x3ff07ae1
    3238:	20000a59 	.word	0x20000a59
    323c:	00004099 	.word	0x00004099
    3240:	41008000 	.word	0x41008000
    3244:	000040a7 	.word	0x000040a7
    3248:	20001a24 	.word	0x20001a24
    324c:	000037a5 	.word	0x000037a5
    3250:	00003b83 	.word	0x00003b83
    3254:	0000b9e0 	.word	0x0000b9e0
    3258:	20001410 	.word	0x20001410
    325c:	00003f91 	.word	0x00003f91
    3260:	200015e0 	.word	0x200015e0
    3264:	00001571 	.word	0x00001571
    3268:	0000166d 	.word	0x0000166d
    326c:	00004071 	.word	0x00004071
    3270:	0000167d 	.word	0x0000167d
    3274:	0000aa31 	.word	0x0000aa31
    3278:	0000aafd 	.word	0x0000aafd
    327c:	0000af21 	.word	0x0000af21

00003280 <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    3280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3284:	b09b      	sub	sp, #108	; 0x6c
    3286:	4682      	mov	sl, r0
	
	mod->report_length = 17;
    3288:	2311      	movs	r3, #17
    328a:	7003      	strb	r3, [r0, #0]
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    328c:	f44f 7088 	mov.w	r0, #272	; 0x110
    3290:	4b46      	ldr	r3, [pc, #280]	; (33ac <grid_module_po16_revb_init+0x12c>)
    3292:	4798      	blx	r3
    3294:	f8ca 0004 	str.w	r0, [sl, #4]
    3298:	2501      	movs	r5, #1
    329a:	2400      	movs	r4, #0
			);
			
		}
		else{
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    329c:	f8df b14c 	ldr.w	fp, [pc, #332]	; 33ec <grid_module_po16_revb_init+0x16c>
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    32a0:	4f43      	ldr	r7, [pc, #268]	; (33b0 <grid_module_po16_revb_init+0x130>)
    32a2:	e026      	b.n	32f2 <grid_module_po16_revb_init+0x72>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c%",
    32a4:	2303      	movs	r3, #3
    32a6:	9303      	str	r3, [sp, #12]
    32a8:	2339      	movs	r3, #57	; 0x39
    32aa:	9302      	str	r3, [sp, #8]
    32ac:	2383      	movs	r3, #131	; 0x83
    32ae:	9301      	str	r3, [sp, #4]
    32b0:	2380      	movs	r3, #128	; 0x80
    32b2:	9300      	str	r3, [sp, #0]
    32b4:	2301      	movs	r3, #1
    32b6:	2202      	movs	r2, #2
    32b8:	493e      	ldr	r1, [pc, #248]	; (33b4 <grid_module_po16_revb_init+0x134>)
    32ba:	a812      	add	r0, sp, #72	; 0x48
    32bc:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    32be:	a812      	add	r0, sp, #72	; 0x48
    32c0:	47b8      	blx	r7
    32c2:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    32c4:	ae0d      	add	r6, sp, #52	; 0x34
    32c6:	4b3c      	ldr	r3, [pc, #240]	; (33b8 <grid_module_po16_revb_init+0x138>)
    32c8:	681b      	ldr	r3, [r3, #0]
    32ca:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    32ce:	0c1b      	lsrs	r3, r3, #16
    32d0:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		
		uint8_t helper_length = strlen(helper_template);
    32d4:	4630      	mov	r0, r6
    32d6:	47b8      	blx	r7

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    32d8:	b2c0      	uxtb	r0, r0
    32da:	9001      	str	r0, [sp, #4]
    32dc:	9600      	str	r6, [sp, #0]
    32de:	fa5f f388 	uxtb.w	r3, r8
    32e2:	aa12      	add	r2, sp, #72	; 0x48
    32e4:	2100      	movs	r1, #0
    32e6:	4650      	mov	r0, sl
    32e8:	4e34      	ldr	r6, [pc, #208]	; (33bc <grid_module_po16_revb_init+0x13c>)
    32ea:	47b0      	blx	r6
    32ec:	3401      	adds	r4, #1
    32ee:	3501      	adds	r5, #1
    32f0:	b2ed      	uxtb	r5, r5
		if (i == 0){
    32f2:	f014 08ff 	ands.w	r8, r4, #255	; 0xff
    32f6:	d0d5      	beq.n	32a4 <grid_module_po16_revb_init+0x24>
    32f8:	1e60      	subs	r0, r4, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    32fa:	2103      	movs	r1, #3
    32fc:	910b      	str	r1, [sp, #44]	; 0x2c
    32fe:	2300      	movs	r3, #0
    3300:	930a      	str	r3, [sp, #40]	; 0x28
    3302:	9009      	str	r0, [sp, #36]	; 0x24
    3304:	2263      	movs	r2, #99	; 0x63
    3306:	9208      	str	r2, [sp, #32]
    3308:	9307      	str	r3, [sp, #28]
    330a:	9106      	str	r1, [sp, #24]
    330c:	2202      	movs	r2, #2
    330e:	9205      	str	r2, [sp, #20]
    3310:	9104      	str	r1, [sp, #16]
    3312:	9303      	str	r3, [sp, #12]
    3314:	9002      	str	r0, [sp, #8]
    3316:	21b0      	movs	r1, #176	; 0xb0
    3318:	9101      	str	r1, [sp, #4]
    331a:	9300      	str	r3, [sp, #0]
    331c:	4928      	ldr	r1, [pc, #160]	; (33c0 <grid_module_po16_revb_init+0x140>)
    331e:	a812      	add	r0, sp, #72	; 0x48
    3320:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    3322:	a812      	add	r0, sp, #72	; 0x48
    3324:	47b8      	blx	r7
    3326:	4681      	mov	r9, r0
		sprintf(helper_template, "00"); // LASTVALUE
    3328:	ae0d      	add	r6, sp, #52	; 0x34
    332a:	4b23      	ldr	r3, [pc, #140]	; (33b8 <grid_module_po16_revb_init+0x138>)
    332c:	681b      	ldr	r3, [r3, #0]
    332e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    3332:	0c1b      	lsrs	r3, r3, #16
    3334:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		uint8_t helper_length = strlen(helper_template);
    3338:	4630      	mov	r0, r6
    333a:	47b8      	blx	r7
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    333c:	b2c0      	uxtb	r0, r0
    333e:	9001      	str	r0, [sp, #4]
    3340:	9600      	str	r6, [sp, #0]
    3342:	fa5f f389 	uxtb.w	r3, r9
    3346:	aa12      	add	r2, sp, #72	; 0x48
    3348:	4641      	mov	r1, r8
    334a:	4650      	mov	r0, sl
    334c:	4e1b      	ldr	r6, [pc, #108]	; (33bc <grid_module_po16_revb_init+0x13c>)
    334e:	47b0      	blx	r6
	for(uint8_t i=0; i<17; i++){
    3350:	2d10      	cmp	r5, #16
    3352:	d9cb      	bls.n	32ec <grid_module_po16_revb_init+0x6c>
		
	}
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    3354:	2307      	movs	r3, #7
    3356:	220e      	movs	r2, #14
    3358:	2105      	movs	r1, #5
    335a:	2010      	movs	r0, #16
    335c:	4c19      	ldr	r4, [pc, #100]	; (33c4 <grid_module_po16_revb_init+0x144>)
    335e:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 16);
    3360:	4c19      	ldr	r4, [pc, #100]	; (33c8 <grid_module_po16_revb_init+0x148>)
    3362:	2110      	movs	r1, #16
    3364:	4620      	mov	r0, r4
    3366:	4b19      	ldr	r3, [pc, #100]	; (33cc <grid_module_po16_revb_init+0x14c>)
    3368:	4798      	blx	r3
	grid_module_init_animation(&grid_led_state);
    336a:	4620      	mov	r0, r4
    336c:	4b18      	ldr	r3, [pc, #96]	; (33d0 <grid_module_po16_revb_init+0x150>)
    336e:	4798      	blx	r3
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_hardware_transfer_complete_cb);
    3370:	4f18      	ldr	r7, [pc, #96]	; (33d4 <grid_module_po16_revb_init+0x154>)
    3372:	4d19      	ldr	r5, [pc, #100]	; (33d8 <grid_module_po16_revb_init+0x158>)
    3374:	463b      	mov	r3, r7
    3376:	2200      	movs	r2, #0
    3378:	4611      	mov	r1, r2
    337a:	4628      	mov	r0, r5
    337c:	4e17      	ldr	r6, [pc, #92]	; (33dc <grid_module_po16_revb_init+0x15c>)
    337e:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_hardware_transfer_complete_cb);
    3380:	4c17      	ldr	r4, [pc, #92]	; (33e0 <grid_module_po16_revb_init+0x160>)
    3382:	463b      	mov	r3, r7
    3384:	2200      	movs	r2, #0
    3386:	4611      	mov	r1, r2
    3388:	4620      	mov	r0, r4
    338a:	47b0      	blx	r6
	adc_async_enable_channel(&ADC_0, 0);
    338c:	2100      	movs	r1, #0
    338e:	4628      	mov	r0, r5
    3390:	4e14      	ldr	r6, [pc, #80]	; (33e4 <grid_module_po16_revb_init+0x164>)
    3392:	47b0      	blx	r6
	adc_async_enable_channel(&ADC_1, 0);
    3394:	2100      	movs	r1, #0
    3396:	4620      	mov	r0, r4
    3398:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_0);
    339a:	4628      	mov	r0, r5
    339c:	4d12      	ldr	r5, [pc, #72]	; (33e8 <grid_module_po16_revb_init+0x168>)
    339e:	47a8      	blx	r5
	adc_async_start_conversion(&ADC_1);
    33a0:	4620      	mov	r0, r4
    33a2:	47a8      	blx	r5
	
	grid_module_hardware_init();
	grid_module_hardware_start_transfer();
	
    33a4:	b01b      	add	sp, #108	; 0x6c
    33a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33aa:	bf00      	nop
    33ac:	0000afa9 	.word	0x0000afa9
    33b0:	0000b1a1 	.word	0x0000b1a1
    33b4:	0000b8c4 	.word	0x0000b8c4
    33b8:	0000b8dc 	.word	0x0000b8dc
    33bc:	00003ac5 	.word	0x00003ac5
    33c0:	0000b8e0 	.word	0x0000b8e0
    33c4:	00001525 	.word	0x00001525
    33c8:	20002458 	.word	0x20002458
    33cc:	00002339 	.word	0x00002339
    33d0:	00002631 	.word	0x00002631
    33d4:	00003011 	.word	0x00003011
    33d8:	20001410 	.word	0x20001410
    33dc:	00003f11 	.word	0x00003f11
    33e0:	200015e0 	.word	0x200015e0
    33e4:	00003ed1 	.word	0x00003ed1
    33e8:	00004071 	.word	0x00004071
    33ec:	0000b159 	.word	0x0000b159

000033f0 <tx_cb_USART_GRID>:

void tx_cb_USART_GRID(struct grid_port* const por){
	

	
	if(por->tx_double_buffer[1] == GRID_MSG_BROADCAST){
    33f0:	7f43      	ldrb	r3, [r0, #29]
    33f2:	2b0f      	cmp	r3, #15
    33f4:	d00d      	beq.n	3412 <tx_cb_USART_GRID+0x22>
			por->tx_double_buffer[i] = 0;
		}
		
		por->tx_double_buffer_status = 0;
	}
	else if (por->tx_double_buffer[1] == GRID_MSG_DIRECT){
    33f6:	2b0e      	cmp	r3, #14
    33f8:	d017      	beq.n	342a <tx_cb_USART_GRID+0x3a>
    33fa:	f100 031b 	add.w	r3, r0, #27
    33fe:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
		por->tx_double_buffer_status = 0;
	}
	else{
		//TRAP
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    3402:	2200      	movs	r2, #0
    3404:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    3408:	428b      	cmp	r3, r1
    340a:	d1fb      	bne.n	3404 <tx_cb_USART_GRID+0x14>
		}
		
		por->tx_double_buffer_status = 0;
    340c:	2300      	movs	r3, #0
    340e:	8103      	strh	r3, [r0, #8]
    3410:	4770      	bx	lr
    3412:	f100 031b 	add.w	r3, r0, #27
    3416:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
			por->tx_double_buffer[i] = 0;
    341a:	2200      	movs	r2, #0
    341c:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    3420:	428b      	cmp	r3, r1
    3422:	d1fb      	bne.n	341c <tx_cb_USART_GRID+0x2c>
		por->tx_double_buffer_status = 0;
    3424:	2300      	movs	r3, #0
    3426:	8103      	strh	r3, [r0, #8]
    3428:	4770      	bx	lr
    342a:	f100 031b 	add.w	r3, r0, #27
    342e:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
			por->tx_double_buffer[i] = 0;
    3432:	2200      	movs	r2, #0
    3434:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    3438:	428b      	cmp	r3, r1
    343a:	d1fb      	bne.n	3434 <tx_cb_USART_GRID+0x44>
		por->tx_double_buffer_status = 0;
    343c:	2300      	movs	r3, #0
    343e:	8103      	strh	r3, [r0, #8]
    3440:	4770      	bx	lr
	...

00003444 <tx_cb_USART_GRID_W>:
{
    3444:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    3446:	4802      	ldr	r0, [pc, #8]	; (3450 <tx_cb_USART_GRID_W+0xc>)
    3448:	4b02      	ldr	r3, [pc, #8]	; (3454 <tx_cb_USART_GRID_W+0x10>)
    344a:	4798      	blx	r3
    344c:	bd08      	pop	{r3, pc}
    344e:	bf00      	nop
    3450:	20001c40 	.word	0x20001c40
    3454:	000033f1 	.word	0x000033f1

00003458 <tx_cb_USART_GRID_S>:
{
    3458:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    345a:	4802      	ldr	r0, [pc, #8]	; (3464 <tx_cb_USART_GRID_S+0xc>)
    345c:	4b02      	ldr	r3, [pc, #8]	; (3468 <tx_cb_USART_GRID_S+0x10>)
    345e:	4798      	blx	r3
    3460:	bd08      	pop	{r3, pc}
    3462:	bf00      	nop
    3464:	20001e28 	.word	0x20001e28
    3468:	000033f1 	.word	0x000033f1

0000346c <tx_cb_USART_GRID_E>:
{
    346c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    346e:	4802      	ldr	r0, [pc, #8]	; (3478 <tx_cb_USART_GRID_E+0xc>)
    3470:	4b02      	ldr	r3, [pc, #8]	; (347c <tx_cb_USART_GRID_E+0x10>)
    3472:	4798      	blx	r3
    3474:	bd08      	pop	{r3, pc}
    3476:	bf00      	nop
    3478:	20002274 	.word	0x20002274
    347c:	000033f1 	.word	0x000033f1

00003480 <tx_cb_USART_GRID_N>:
{
    3480:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    3482:	4802      	ldr	r0, [pc, #8]	; (348c <tx_cb_USART_GRID_N+0xc>)
    3484:	4b02      	ldr	r3, [pc, #8]	; (3490 <tx_cb_USART_GRID_N+0x10>)
    3486:	4798      	blx	r3
    3488:	bd08      	pop	{r3, pc}
    348a:	bf00      	nop
    348c:	2000164c 	.word	0x2000164c
    3490:	000033f1 	.word	0x000033f1

00003494 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    3494:	b508      	push	{r3, lr}
    3496:	7983      	ldrb	r3, [r0, #6]
    3498:	011b      	lsls	r3, r3, #4
    349a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    349e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    34a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    34a4:	f022 0202 	bic.w	r2, r2, #2
    34a8:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    34aa:	2100      	movs	r1, #0
    34ac:	7980      	ldrb	r0, [r0, #6]
    34ae:	4b01      	ldr	r3, [pc, #4]	; (34b4 <grid_sys_port_reset_dma+0x20>)
    34b0:	4798      	blx	r3
    34b2:	bd08      	pop	{r3, pc}
    34b4:	00005a85 	.word	0x00005a85

000034b8 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    34b8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34ba:	4802      	ldr	r0, [pc, #8]	; (34c4 <dma_transfer_complete_w_cb+0xc>)
    34bc:	4b02      	ldr	r3, [pc, #8]	; (34c8 <dma_transfer_complete_w_cb+0x10>)
    34be:	4798      	blx	r3
    34c0:	bd08      	pop	{r3, pc}
    34c2:	bf00      	nop
    34c4:	20001c40 	.word	0x20001c40
    34c8:	00003495 	.word	0x00003495

000034cc <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    34cc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34ce:	4802      	ldr	r0, [pc, #8]	; (34d8 <dma_transfer_complete_s_cb+0xc>)
    34d0:	4b02      	ldr	r3, [pc, #8]	; (34dc <dma_transfer_complete_s_cb+0x10>)
    34d2:	4798      	blx	r3
    34d4:	bd08      	pop	{r3, pc}
    34d6:	bf00      	nop
    34d8:	20001e28 	.word	0x20001e28
    34dc:	00003495 	.word	0x00003495

000034e0 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    34e0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34e2:	4802      	ldr	r0, [pc, #8]	; (34ec <dma_transfer_complete_e_cb+0xc>)
    34e4:	4b02      	ldr	r3, [pc, #8]	; (34f0 <dma_transfer_complete_e_cb+0x10>)
    34e6:	4798      	blx	r3
    34e8:	bd08      	pop	{r3, pc}
    34ea:	bf00      	nop
    34ec:	20002274 	.word	0x20002274
    34f0:	00003495 	.word	0x00003495

000034f4 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    34f4:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34f6:	4802      	ldr	r0, [pc, #8]	; (3500 <dma_transfer_complete_n_cb+0xc>)
    34f8:	4b02      	ldr	r3, [pc, #8]	; (3504 <dma_transfer_complete_n_cb+0x10>)
    34fa:	4798      	blx	r3
    34fc:	bd08      	pop	{r3, pc}
    34fe:	bf00      	nop
    3500:	2000164c 	.word	0x2000164c
    3504:	00003495 	.word	0x00003495

00003508 <grid_sys_uart_init>:
}

void grid_sys_uart_init(){
    3508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    350c:	4b2f      	ldr	r3, [pc, #188]	; (35cc <grid_sys_uart_init+0xc4>)
    350e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3512:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3516:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    351a:	f042 0204 	orr.w	r2, r2, #4
    351e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3522:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3526:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    352a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    352e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    3532:	f042 0204 	orr.w	r2, r2, #4
    3536:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    353a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    353e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3542:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3546:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    354a:	f042 0204 	orr.w	r2, r2, #4
    354e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3552:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3556:	f44f 7100 	mov.w	r1, #512	; 0x200
    355a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    355e:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3562:	f042 0204 	orr.w	r2, r2, #4
    3566:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    356a:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	


	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    356e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3608 <grid_sys_uart_init+0x100>
    3572:	4a17      	ldr	r2, [pc, #92]	; (35d0 <grid_sys_uart_init+0xc8>)
    3574:	2101      	movs	r1, #1
    3576:	4640      	mov	r0, r8
    3578:	4c16      	ldr	r4, [pc, #88]	; (35d4 <grid_sys_uart_init+0xcc>)
    357a:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    357c:	4f16      	ldr	r7, [pc, #88]	; (35d8 <grid_sys_uart_init+0xd0>)
    357e:	4a17      	ldr	r2, [pc, #92]	; (35dc <grid_sys_uart_init+0xd4>)
    3580:	2101      	movs	r1, #1
    3582:	4638      	mov	r0, r7
    3584:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    3586:	4e16      	ldr	r6, [pc, #88]	; (35e0 <grid_sys_uart_init+0xd8>)
    3588:	4a16      	ldr	r2, [pc, #88]	; (35e4 <grid_sys_uart_init+0xdc>)
    358a:	2101      	movs	r1, #1
    358c:	4630      	mov	r0, r6
    358e:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    3590:	4d15      	ldr	r5, [pc, #84]	; (35e8 <grid_sys_uart_init+0xe0>)
    3592:	4a16      	ldr	r2, [pc, #88]	; (35ec <grid_sys_uart_init+0xe4>)
    3594:	2101      	movs	r1, #1
    3596:	4628      	mov	r0, r5
    3598:	47a0      	blx	r4
	//  	usart_async_register_callback(&USART_NORTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_N);
	//  	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
	//  	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
	//  	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);
	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    359a:	4915      	ldr	r1, [pc, #84]	; (35f0 <grid_sys_uart_init+0xe8>)
    359c:	4640      	mov	r0, r8
    359e:	4c15      	ldr	r4, [pc, #84]	; (35f4 <grid_sys_uart_init+0xec>)
    35a0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    35a2:	4915      	ldr	r1, [pc, #84]	; (35f8 <grid_sys_uart_init+0xf0>)
    35a4:	4638      	mov	r0, r7
    35a6:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    35a8:	4914      	ldr	r1, [pc, #80]	; (35fc <grid_sys_uart_init+0xf4>)
    35aa:	4630      	mov	r0, r6
    35ac:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    35ae:	4914      	ldr	r1, [pc, #80]	; (3600 <grid_sys_uart_init+0xf8>)
    35b0:	4628      	mov	r0, r5
    35b2:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    35b4:	4640      	mov	r0, r8
    35b6:	4c13      	ldr	r4, [pc, #76]	; (3604 <grid_sys_uart_init+0xfc>)
    35b8:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    35ba:	4638      	mov	r0, r7
    35bc:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    35be:	4630      	mov	r0, r6
    35c0:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    35c2:	4628      	mov	r0, r5
    35c4:	47a0      	blx	r4
    35c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35ca:	bf00      	nop
    35cc:	41008000 	.word	0x41008000
    35d0:	00003481 	.word	0x00003481
    35d4:	00004c2d 	.word	0x00004c2d
    35d8:	2000143c 	.word	0x2000143c
    35dc:	0000346d 	.word	0x0000346d
    35e0:	20001590 	.word	0x20001590
    35e4:	00003459 	.word	0x00003459
    35e8:	20001540 	.word	0x20001540
    35ec:	00003445 	.word	0x00003445
    35f0:	20001a2c 	.word	0x20001a2c
    35f4:	00004c05 	.word	0x00004c05
    35f8:	20001e24 	.word	0x20001e24
    35fc:	2000200c 	.word	0x2000200c
    3600:	20002470 	.word	0x20002470
    3604:	00004bd9 	.word	0x00004bd9
    3608:	2000148c 	.word	0x2000148c

0000360c <grid_rx_dma_init_one>:



}

void grid_rx_dma_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    360c:	b5f0      	push	{r4, r5, r6, r7, lr}
    360e:	b083      	sub	sp, #12
    3610:	460f      	mov	r7, r1
    3612:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    3614:	7984      	ldrb	r4, [r0, #6]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    3616:	4605      	mov	r5, r0
    3618:	f855 3be4 	ldr.w	r3, [r5], #228
    361c:	6a19      	ldr	r1, [r3, #32]
    361e:	3128      	adds	r1, #40	; 0x28
    3620:	4620      	mov	r0, r4
    3622:	4b0d      	ldr	r3, [pc, #52]	; (3658 <grid_rx_dma_init_one+0x4c>)
    3624:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3626:	4629      	mov	r1, r5
    3628:	4620      	mov	r0, r4
    362a:	4b0c      	ldr	r3, [pc, #48]	; (365c <grid_rx_dma_init_one+0x50>)
    362c:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    362e:	4639      	mov	r1, r7
    3630:	4620      	mov	r0, r4
    3632:	4b0b      	ldr	r3, [pc, #44]	; (3660 <grid_rx_dma_init_one+0x54>)
    3634:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    3636:	4621      	mov	r1, r4
    3638:	a801      	add	r0, sp, #4
    363a:	4b0a      	ldr	r3, [pc, #40]	; (3664 <grid_rx_dma_init_one+0x58>)
    363c:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    363e:	9b01      	ldr	r3, [sp, #4]
    3640:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    3642:	2201      	movs	r2, #1
    3644:	2100      	movs	r1, #0
    3646:	4620      	mov	r0, r4
    3648:	4b07      	ldr	r3, [pc, #28]	; (3668 <grid_rx_dma_init_one+0x5c>)
    364a:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    364c:	2100      	movs	r1, #0
    364e:	4620      	mov	r0, r4
    3650:	4b06      	ldr	r3, [pc, #24]	; (366c <grid_rx_dma_init_one+0x60>)
    3652:	4798      	blx	r3
	
}
    3654:	b003      	add	sp, #12
    3656:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3658:	00005a01 	.word	0x00005a01
    365c:	000059f1 	.word	0x000059f1
    3660:	00005a2d 	.word	0x00005a2d
    3664:	00005ac5 	.word	0x00005ac5
    3668:	0000599d 	.word	0x0000599d
    366c:	00005a85 	.word	0x00005a85

00003670 <grid_rx_dma_init>:

void grid_rx_dma_init(){
    3670:	b510      	push	{r4, lr}
	
	grid_rx_dma_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    3672:	4a09      	ldr	r2, [pc, #36]	; (3698 <grid_rx_dma_init+0x28>)
    3674:	21c8      	movs	r1, #200	; 0xc8
    3676:	4809      	ldr	r0, [pc, #36]	; (369c <grid_rx_dma_init+0x2c>)
    3678:	4c09      	ldr	r4, [pc, #36]	; (36a0 <grid_rx_dma_init+0x30>)
    367a:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    367c:	4a09      	ldr	r2, [pc, #36]	; (36a4 <grid_rx_dma_init+0x34>)
    367e:	21c8      	movs	r1, #200	; 0xc8
    3680:	4809      	ldr	r0, [pc, #36]	; (36a8 <grid_rx_dma_init+0x38>)
    3682:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    3684:	4a09      	ldr	r2, [pc, #36]	; (36ac <grid_rx_dma_init+0x3c>)
    3686:	21c8      	movs	r1, #200	; 0xc8
    3688:	4809      	ldr	r0, [pc, #36]	; (36b0 <grid_rx_dma_init+0x40>)
    368a:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    368c:	4a09      	ldr	r2, [pc, #36]	; (36b4 <grid_rx_dma_init+0x44>)
    368e:	21c8      	movs	r1, #200	; 0xc8
    3690:	4809      	ldr	r0, [pc, #36]	; (36b8 <grid_rx_dma_init+0x48>)
    3692:	47a0      	blx	r4
    3694:	bd10      	pop	{r4, pc}
    3696:	bf00      	nop
    3698:	000034f5 	.word	0x000034f5
    369c:	2000164c 	.word	0x2000164c
    36a0:	0000360d 	.word	0x0000360d
    36a4:	000034e1 	.word	0x000034e1
    36a8:	20002274 	.word	0x20002274
    36ac:	000034cd 	.word	0x000034cd
    36b0:	20001e28 	.word	0x20001e28
    36b4:	000034b9 	.word	0x000034b9
    36b8:	20001c40 	.word	0x20001c40

000036bc <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    36bc:	7a00      	ldrb	r0, [r0, #8]
    36be:	4770      	bx	lr

000036c0 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    36c0:	2300      	movs	r3, #0
    36c2:	7203      	strb	r3, [r0, #8]
    36c4:	4770      	bx	lr
	...

000036c8 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    36c8:	7983      	ldrb	r3, [r0, #6]
    36ca:	b123      	cbz	r3, 36d6 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    36cc:	2b01      	cmp	r3, #1
    36ce:	d00f      	beq.n	36f0 <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    36d0:	2b02      	cmp	r3, #2
    36d2:	d015      	beq.n	3700 <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    36d4:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    36d6:	8880      	ldrh	r0, [r0, #4]
    36d8:	0840      	lsrs	r0, r0, #1
    36da:	387d      	subs	r0, #125	; 0x7d
    36dc:	2800      	cmp	r0, #0
    36de:	bfb8      	it	lt
    36e0:	4240      	neglt	r0, r0
    36e2:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    36e6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    36ea:	f3c0 0047 	ubfx	r0, r0, #1, #8
    36ee:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    36f0:	8880      	ldrh	r0, [r0, #4]
    36f2:	4b06      	ldr	r3, [pc, #24]	; (370c <grid_sys_alert_get_color_intensity+0x44>)
    36f4:	fba3 3000 	umull	r3, r0, r3, r0
    36f8:	f340 1000 	sbfx	r0, r0, #4, #1
    36fc:	b2c0      	uxtb	r0, r0
    36fe:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    3700:	8880      	ldrh	r0, [r0, #4]
    3702:	2864      	cmp	r0, #100	; 0x64
    3704:	bf8c      	ite	hi
    3706:	20ff      	movhi	r0, #255	; 0xff
    3708:	2000      	movls	r0, #0
    370a:	4770      	bx	lr
    370c:	10624dd3 	.word	0x10624dd3

00003710 <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint8_t duration){
    3710:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    3712:	2401      	movs	r4, #1
    3714:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    3716:	7001      	strb	r1, [r0, #0]
	mod->alert_color_green = green;
    3718:	7042      	strb	r2, [r0, #1]
	mod->alert_color_blue = blue;
    371a:	7083      	strb	r3, [r0, #2]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    371c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3720:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    3722:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3726:	7183      	strb	r3, [r0, #6]
	
}
    3728:	f85d 4b04 	ldr.w	r4, [sp], #4
    372c:	4770      	bx	lr

0000372e <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    372e:	7800      	ldrb	r0, [r0, #0]
    3730:	4770      	bx	lr

00003732 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    3732:	7840      	ldrb	r0, [r0, #1]
    3734:	4770      	bx	lr

00003736 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    3736:	7880      	ldrb	r0, [r0, #2]
    3738:	4770      	bx	lr

0000373a <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    373a:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    373c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3740:	b2d8      	uxtb	r0, r3
    3742:	2809      	cmp	r0, #9
    3744:	d90d      	bls.n	3762 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    3746:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    374a:	b2db      	uxtb	r3, r3
    374c:	2b05      	cmp	r3, #5
    374e:	d903      	bls.n	3758 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    3750:	b131      	cbz	r1, 3760 <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    3752:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    3754:	2000      	movs	r0, #0
    3756:	4770      	bx	lr
		result = ascii - 97 + 10;
    3758:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    375c:	b2c0      	uxtb	r0, r0
    375e:	4770      	bx	lr
	uint8_t result = 0;
    3760:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    3762:	4770      	bx	lr

00003764 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    3764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    3768:	b1c1      	cbz	r1, 379c <grid_sys_read_hex_string_value+0x38>
    376a:	4690      	mov	r8, r2
    376c:	1e45      	subs	r5, r0, #1
    376e:	1e4b      	subs	r3, r1, #1
    3770:	009c      	lsls	r4, r3, #2
    3772:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3776:	3f02      	subs	r7, #2
    3778:	b2db      	uxtb	r3, r3
    377a:	1aff      	subs	r7, r7, r3
    377c:	00bf      	lsls	r7, r7, #2
    377e:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    3780:	f8df 901c 	ldr.w	r9, [pc, #28]	; 37a0 <grid_sys_read_hex_string_value+0x3c>
    3784:	4641      	mov	r1, r8
    3786:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    378a:	47c8      	blx	r9
    378c:	40a0      	lsls	r0, r4
    378e:	4406      	add	r6, r0
    3790:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    3792:	42bc      	cmp	r4, r7
    3794:	d1f6      	bne.n	3784 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3796:	4630      	mov	r0, r6
    3798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    379c:	2600      	movs	r6, #0
	return result;
    379e:	e7fa      	b.n	3796 <grid_sys_read_hex_string_value+0x32>
    37a0:	0000373b 	.word	0x0000373b

000037a4 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    37a4:	b530      	push	{r4, r5, lr}
    37a6:	b085      	sub	sp, #20
    37a8:	4605      	mov	r5, r0
    37aa:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    37ac:	4909      	ldr	r1, [pc, #36]	; (37d4 <grid_sys_write_hex_string_value+0x30>)
    37ae:	a801      	add	r0, sp, #4
    37b0:	4b09      	ldr	r3, [pc, #36]	; (37d8 <grid_sys_write_hex_string_value+0x34>)
    37b2:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    37b4:	b164      	cbz	r4, 37d0 <grid_sys_write_hex_string_value+0x2c>
    37b6:	ab04      	add	r3, sp, #16
    37b8:	1b1a      	subs	r2, r3, r4
    37ba:	3a05      	subs	r2, #5
    37bc:	1e6b      	subs	r3, r5, #1
    37be:	1e60      	subs	r0, r4, #1
    37c0:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    37c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    37c8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    37cc:	4283      	cmp	r3, r0
    37ce:	d1f9      	bne.n	37c4 <grid_sys_write_hex_string_value+0x20>
	}

}
    37d0:	b005      	add	sp, #20
    37d2:	bd30      	pop	{r4, r5, pc}
    37d4:	0000b9f0 	.word	0x0000b9f0
    37d8:	0000b159 	.word	0x0000b159

000037dc <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    37dc:	4b34      	ldr	r3, [pc, #208]	; (38b0 <grid_sys_get_hwcfg+0xd4>)
    37de:	681b      	ldr	r3, [r3, #0]
    37e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    37e4:	d002      	beq.n	37ec <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    37e6:	4b32      	ldr	r3, [pc, #200]	; (38b0 <grid_sys_get_hwcfg+0xd4>)
    37e8:	6818      	ldr	r0, [r3, #0]
    37ea:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    37ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    37f0:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    37f2:	4b30      	ldr	r3, [pc, #192]	; (38b4 <grid_sys_get_hwcfg+0xd8>)
    37f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    37f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    37fc:	492e      	ldr	r1, [pc, #184]	; (38b8 <grid_sys_get_hwcfg+0xdc>)
    37fe:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3802:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3806:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    380a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    380e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3812:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3816:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    381a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    381e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3822:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3826:	4925      	ldr	r1, [pc, #148]	; (38bc <grid_sys_get_hwcfg+0xe0>)
    3828:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    382c:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    3830:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3834:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    3838:	2001      	movs	r0, #1
    383a:	4b21      	ldr	r3, [pc, #132]	; (38c0 <grid_sys_get_hwcfg+0xe4>)
    383c:	4798      	blx	r3
    383e:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    3840:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3842:	4d1c      	ldr	r5, [pc, #112]	; (38b4 <grid_sys_get_hwcfg+0xd8>)
    3844:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    3848:	4f1d      	ldr	r7, [pc, #116]	; (38c0 <grid_sys_get_hwcfg+0xe4>)
    384a:	e00c      	b.n	3866 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    384c:	2e07      	cmp	r6, #7
    384e:	d027      	beq.n	38a0 <grid_sys_get_hwcfg+0xc4>
    3850:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    3854:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    3858:	2001      	movs	r0, #1
    385a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    385c:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    3860:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    3862:	2e08      	cmp	r6, #8
    3864:	d01c      	beq.n	38a0 <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3866:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    386a:	2001      	movs	r0, #1
    386c:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    386e:	a801      	add	r0, sp, #4
    3870:	4b14      	ldr	r3, [pc, #80]	; (38c4 <grid_sys_get_hwcfg+0xe8>)
    3872:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3874:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3878:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    387c:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3880:	405c      	eors	r4, r3
    3882:	4014      	ands	r4, r2
    3884:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3886:	a801      	add	r0, sp, #4
    3888:	4b0f      	ldr	r3, [pc, #60]	; (38c8 <grid_sys_get_hwcfg+0xec>)
    388a:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    388c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3890:	d0dc      	beq.n	384c <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    3892:	2301      	movs	r3, #1
    3894:	40b3      	lsls	r3, r6
    3896:	ea43 0808 	orr.w	r8, r3, r8
    389a:	fa5f f888 	uxtb.w	r8, r8
    389e:	e7d5      	b.n	384c <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    38a0:	4b03      	ldr	r3, [pc, #12]	; (38b0 <grid_sys_get_hwcfg+0xd4>)
    38a2:	f8c3 8000 	str.w	r8, [r3]
}
    38a6:	4b02      	ldr	r3, [pc, #8]	; (38b0 <grid_sys_get_hwcfg+0xd4>)
    38a8:	6818      	ldr	r0, [r3, #0]
    38aa:	b003      	add	sp, #12
    38ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    38b0:	20000310 	.word	0x20000310
    38b4:	41008000 	.word	0x41008000
    38b8:	40002000 	.word	0x40002000
    38bc:	40028000 	.word	0x40028000
    38c0:	00004119 	.word	0x00004119
    38c4:	00004099 	.word	0x00004099
    38c8:	000040a7 	.word	0x000040a7

000038cc <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    38cc:	2903      	cmp	r1, #3
    38ce:	d009      	beq.n	38e4 <grid_msg_get_checksum+0x18>
    38d0:	1e43      	subs	r3, r0, #1
    38d2:	3904      	subs	r1, #4
    38d4:	4401      	add	r1, r0
    38d6:	2000      	movs	r0, #0
		checksum ^= str[i];
    38d8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    38dc:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    38de:	428b      	cmp	r3, r1
    38e0:	d1fa      	bne.n	38d8 <grid_msg_get_checksum+0xc>
    38e2:	4770      	bx	lr
	uint8_t checksum = 0;
    38e4:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    38e6:	4770      	bx	lr

000038e8 <grid_msg_set_checksum>:

uint8_t grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    38e8:	b530      	push	{r4, r5, lr}
    38ea:	b083      	sub	sp, #12
    38ec:	4604      	mov	r4, r0
    38ee:	460d      	mov	r5, r1
	
	uint8_t checksum_string[4];

	sprintf(checksum_string, "%02x", checksum);
    38f0:	4907      	ldr	r1, [pc, #28]	; (3910 <grid_msg_set_checksum+0x28>)
    38f2:	a801      	add	r0, sp, #4
    38f4:	4b07      	ldr	r3, [pc, #28]	; (3914 <grid_msg_set_checksum+0x2c>)
    38f6:	4798      	blx	r3

	message[length-3] = checksum_string[0];
    38f8:	1961      	adds	r1, r4, r5
    38fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    38fe:	f801 3c03 	strb.w	r3, [r1, #-3]
	message[length-2] = checksum_string[1];
    3902:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3906:	f801 3c02 	strb.w	r3, [r1, #-2]
	
}
    390a:	b003      	add	sp, #12
    390c:	bd30      	pop	{r4, r5, pc}
    390e:	bf00      	nop
    3910:	0000b9f8 	.word	0x0000b9f8
    3914:	0000b159 	.word	0x0000b159

00003918 <grid_msg_get_id>:


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3918:	b500      	push	{lr}
    391a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    391c:	aa02      	add	r2, sp, #8
    391e:	2300      	movs	r3, #0
    3920:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3924:	2102      	movs	r1, #2
    3926:	3004      	adds	r0, #4
    3928:	4b02      	ldr	r3, [pc, #8]	; (3934 <grid_msg_get_id+0x1c>)
    392a:	4798      	blx	r3
	
}
    392c:	b2c0      	uxtb	r0, r0
    392e:	b003      	add	sp, #12
    3930:	f85d fb04 	ldr.w	pc, [sp], #4
    3934:	00003765 	.word	0x00003765

00003938 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    3938:	b500      	push	{lr}
    393a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    393c:	aa02      	add	r2, sp, #8
    393e:	2300      	movs	r3, #0
    3940:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3944:	2102      	movs	r1, #2
    3946:	3006      	adds	r0, #6
    3948:	4b02      	ldr	r3, [pc, #8]	; (3954 <grid_msg_get_dx+0x1c>)
    394a:	4798      	blx	r3
	
}
    394c:	b2c0      	uxtb	r0, r0
    394e:	b003      	add	sp, #12
    3950:	f85d fb04 	ldr.w	pc, [sp], #4
    3954:	00003765 	.word	0x00003765

00003958 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    3958:	b500      	push	{lr}
    395a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    395c:	aa02      	add	r2, sp, #8
    395e:	2300      	movs	r3, #0
    3960:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3964:	2102      	movs	r1, #2
    3966:	3008      	adds	r0, #8
    3968:	4b02      	ldr	r3, [pc, #8]	; (3974 <grid_msg_get_dy+0x1c>)
    396a:	4798      	blx	r3

}
    396c:	b2c0      	uxtb	r0, r0
    396e:	b003      	add	sp, #12
    3970:	f85d fb04 	ldr.w	pc, [sp], #4
    3974:	00003765 	.word	0x00003765

00003978 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    3978:	b500      	push	{lr}
    397a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    397c:	aa02      	add	r2, sp, #8
    397e:	2300      	movs	r3, #0
    3980:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3984:	2102      	movs	r1, #2
    3986:	300a      	adds	r0, #10
    3988:	4b02      	ldr	r3, [pc, #8]	; (3994 <grid_msg_get_age+0x1c>)
    398a:	4798      	blx	r3
	
}
    398c:	b2c0      	uxtb	r0, r0
    398e:	b003      	add	sp, #12
    3990:	f85d fb04 	ldr.w	pc, [sp], #4
    3994:	00003765 	.word	0x00003765

00003998 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3998:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    399a:	460a      	mov	r2, r1
    399c:	2102      	movs	r1, #2
    399e:	3004      	adds	r0, #4
    39a0:	4b01      	ldr	r3, [pc, #4]	; (39a8 <grid_msg_set_id+0x10>)
    39a2:	4798      	blx	r3
    39a4:	bd08      	pop	{r3, pc}
    39a6:	bf00      	nop
    39a8:	000037a5 	.word	0x000037a5

000039ac <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    39ac:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    39ae:	460a      	mov	r2, r1
    39b0:	2102      	movs	r1, #2
    39b2:	3006      	adds	r0, #6
    39b4:	4b01      	ldr	r3, [pc, #4]	; (39bc <grid_msg_set_dx+0x10>)
    39b6:	4798      	blx	r3
    39b8:	bd08      	pop	{r3, pc}
    39ba:	bf00      	nop
    39bc:	000037a5 	.word	0x000037a5

000039c0 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    39c0:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    39c2:	460a      	mov	r2, r1
    39c4:	2102      	movs	r1, #2
    39c6:	3008      	adds	r0, #8
    39c8:	4b01      	ldr	r3, [pc, #4]	; (39d0 <grid_msg_set_dy+0x10>)
    39ca:	4798      	blx	r3
    39cc:	bd08      	pop	{r3, pc}
    39ce:	bf00      	nop
    39d0:	000037a5 	.word	0x000037a5

000039d4 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    39d4:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    39d6:	460a      	mov	r2, r1
    39d8:	2102      	movs	r1, #2
    39da:	300a      	adds	r0, #10
    39dc:	4b01      	ldr	r3, [pc, #4]	; (39e4 <grid_msg_set_age+0x10>)
    39de:	4798      	blx	r3
    39e0:	bd08      	pop	{r3, pc}
    39e2:	bf00      	nop
    39e4:	000037a5 	.word	0x000037a5

000039e8 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    39e8:	68c3      	ldr	r3, [r0, #12]
    39ea:	4299      	cmp	r1, r3
    39ec:	d00e      	beq.n	3a0c <grid_msg_find_recent+0x24>
    39ee:	2301      	movs	r3, #1
    39f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    39f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    39f8:	68d2      	ldr	r2, [r2, #12]
    39fa:	428a      	cmp	r2, r1
    39fc:	d008      	beq.n	3a10 <grid_msg_find_recent+0x28>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    39fe:	3301      	adds	r3, #1
    3a00:	b2db      	uxtb	r3, r3
    3a02:	f013 0f80 	tst.w	r3, #128	; 0x80
    3a06:	d0f3      	beq.n	39f0 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    3a08:	2000      	movs	r0, #0
    3a0a:	4770      	bx	lr
			return 1;
    3a0c:	2001      	movs	r0, #1
    3a0e:	4770      	bx	lr
    3a10:	2001      	movs	r0, #1
}
    3a12:	4770      	bx	lr

00003a14 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3a14:	f890 320c 	ldrb.w	r3, [r0, #524]	; 0x20c
    3a18:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    3a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3a1e:	f880 320c 	strb.w	r3, [r0, #524]	; 0x20c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3a22:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3a26:	60c1      	str	r1, [r0, #12]
    3a28:	4770      	bx	lr
	...

00003a2c <grid_sys_ping>:
}




void grid_sys_ping(struct grid_port* por){
    3a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a2e:	b08b      	sub	sp, #44	; 0x2c
    3a30:	4606      	mov	r6, r0
		
	char message[20];
	uint8_t length = 0;
	
	// Create the packet
	sprintf(message, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction ,grid_sys_get_hwcfg(), GRID_MSG_END_OF_TRANSMISSION);
    3a32:	7944      	ldrb	r4, [r0, #5]
    3a34:	4b1a      	ldr	r3, [pc, #104]	; (3aa0 <grid_sys_ping+0x74>)
    3a36:	4798      	blx	r3
    3a38:	2304      	movs	r3, #4
    3a3a:	9303      	str	r3, [sp, #12]
    3a3c:	9002      	str	r0, [sp, #8]
    3a3e:	9401      	str	r4, [sp, #4]
    3a40:	2307      	movs	r3, #7
    3a42:	9300      	str	r3, [sp, #0]
    3a44:	230e      	movs	r3, #14
    3a46:	2201      	movs	r2, #1
    3a48:	4916      	ldr	r1, [pc, #88]	; (3aa4 <grid_sys_ping+0x78>)
    3a4a:	a805      	add	r0, sp, #20
    3a4c:	4c16      	ldr	r4, [pc, #88]	; (3aa8 <grid_sys_ping+0x7c>)
    3a4e:	47a0      	blx	r4
	
	// Calculate packet length
	length = strlen(message);
    3a50:	a805      	add	r0, sp, #20
    3a52:	4b16      	ldr	r3, [pc, #88]	; (3aac <grid_sys_ping+0x80>)
    3a54:	4798      	blx	r3
    3a56:	b2c5      	uxtb	r5, r0

	grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    3a58:	4629      	mov	r1, r5
    3a5a:	a805      	add	r0, sp, #20
    3a5c:	4b14      	ldr	r3, [pc, #80]	; (3ab0 <grid_sys_ping+0x84>)
    3a5e:	4798      	blx	r3
    3a60:	4602      	mov	r2, r0
    3a62:	4629      	mov	r1, r5
    3a64:	a805      	add	r0, sp, #20
    3a66:	4b13      	ldr	r3, [pc, #76]	; (3ab4 <grid_sys_ping+0x88>)
    3a68:	4798      	blx	r3
		
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, length)){
    3a6a:	f506 76d6 	add.w	r6, r6, #428	; 0x1ac
    3a6e:	b2ad      	uxth	r5, r5
    3a70:	4629      	mov	r1, r5
    3a72:	4630      	mov	r0, r6
    3a74:	4b10      	ldr	r3, [pc, #64]	; (3ab8 <grid_sys_ping+0x8c>)
    3a76:	4798      	blx	r3
    3a78:	b180      	cbz	r0, 3a9c <grid_sys_ping+0x70>
		
		for(uint16_t i = 0; i<length; i++){
    3a7a:	b165      	cbz	r5, 3a96 <grid_sys_ping+0x6a>
    3a7c:	f10d 0413 	add.w	r4, sp, #19
    3a80:	3d01      	subs	r5, #1
    3a82:	ab05      	add	r3, sp, #20
    3a84:	fa13 f585 	uxtah	r5, r3, r5
			
			grid_buffer_write_character(&por->tx_buffer, message[i]);
    3a88:	4f0c      	ldr	r7, [pc, #48]	; (3abc <grid_sys_ping+0x90>)
    3a8a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3a8e:	4630      	mov	r0, r6
    3a90:	47b8      	blx	r7
		for(uint16_t i = 0; i<length; i++){
    3a92:	42ac      	cmp	r4, r5
    3a94:	d1f9      	bne.n	3a8a <grid_sys_ping+0x5e>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    3a96:	4630      	mov	r0, r6
    3a98:	4b09      	ldr	r3, [pc, #36]	; (3ac0 <grid_sys_ping+0x94>)
    3a9a:	4798      	blx	r3
	}
				
	
}
    3a9c:	b00b      	add	sp, #44	; 0x2c
    3a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aa0:	000037dd 	.word	0x000037dd
    3aa4:	0000ba00 	.word	0x0000ba00
    3aa8:	0000b159 	.word	0x0000b159
    3aac:	0000b1a1 	.word	0x0000b1a1
    3ab0:	000038cd 	.word	0x000038cd
    3ab4:	000038e9 	.word	0x000038e9
    3ab8:	000016fd 	.word	0x000016fd
    3abc:	0000172d 	.word	0x0000172d
    3ac0:	00001749 	.word	0x00001749

00003ac4 <grid_ui_report_init>:
	}
	
	
}

uint8_t grid_ui_report_init(struct grid_ui_model* mod, uint8_t index, uint8_t* p, uint8_t p_len, uint8_t* h, uint8_t h_len){
    3ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ac8:	4605      	mov	r5, r0
    3aca:	4617      	mov	r7, r2
    3acc:	9e08      	ldr	r6, [sp, #32]
	
	mod->report_array[index].changed = 0;
    3ace:	010c      	lsls	r4, r1, #4
    3ad0:	6842      	ldr	r2, [r0, #4]
    3ad2:	2100      	movs	r1, #0
    3ad4:	5511      	strb	r1, [r2, r4]
	mod->report_array[index].payload_length = p_len;
    3ad6:	6842      	ldr	r2, [r0, #4]
    3ad8:	4422      	add	r2, r4
    3ada:	7053      	strb	r3, [r2, #1]
	mod->report_array[index].helper_length = h_len;
    3adc:	6843      	ldr	r3, [r0, #4]
    3ade:	4423      	add	r3, r4
    3ae0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    3ae4:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(mod->report_array[index].payload_length*sizeof(uint8_t));
    3ae6:	6843      	ldr	r3, [r0, #4]
    3ae8:	eb03 0804 	add.w	r8, r3, r4
    3aec:	f898 0001 	ldrb.w	r0, [r8, #1]
    3af0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3b60 <grid_ui_report_init+0x9c>
    3af4:	47c8      	blx	r9
    3af6:	f8c8 0004 	str.w	r0, [r8, #4]
	mod->report_array[index].helper = malloc(mod->report_array[index].helper_length*sizeof(uint8_t));
    3afa:	686b      	ldr	r3, [r5, #4]
    3afc:	eb03 0804 	add.w	r8, r3, r4
    3b00:	f898 0008 	ldrb.w	r0, [r8, #8]
    3b04:	47c8      	blx	r9
    3b06:	f8c8 000c 	str.w	r0, [r8, #12]
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    3b0a:	686a      	ldr	r2, [r5, #4]
    3b0c:	4422      	add	r2, r4
    3b0e:	6853      	ldr	r3, [r2, #4]
    3b10:	b303      	cbz	r3, 3b54 <grid_ui_report_init+0x90>
    3b12:	68d3      	ldr	r3, [r2, #12]
    3b14:	b30b      	cbz	r3, 3b5a <grid_ui_report_init+0x96>
		return -1; // MALLOC FAILED
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3b16:	7853      	ldrb	r3, [r2, #1]
    3b18:	b153      	cbz	r3, 3b30 <grid_ui_report_init+0x6c>
    3b1a:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    3b1c:	5cf9      	ldrb	r1, [r7, r3]
    3b1e:	6852      	ldr	r2, [r2, #4]
    3b20:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3b22:	3301      	adds	r3, #1
    3b24:	b2db      	uxtb	r3, r3
    3b26:	686a      	ldr	r2, [r5, #4]
    3b28:	4422      	add	r2, r4
    3b2a:	7851      	ldrb	r1, [r2, #1]
    3b2c:	4299      	cmp	r1, r3
    3b2e:	d8f5      	bhi.n	3b1c <grid_ui_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3b30:	686a      	ldr	r2, [r5, #4]
    3b32:	4422      	add	r2, r4
    3b34:	7a10      	ldrb	r0, [r2, #8]
    3b36:	b188      	cbz	r0, 3b5c <grid_ui_report_init+0x98>
    3b38:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    3b3a:	5cf1      	ldrb	r1, [r6, r3]
    3b3c:	68d2      	ldr	r2, [r2, #12]
    3b3e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3b40:	3301      	adds	r3, #1
    3b42:	b2db      	uxtb	r3, r3
    3b44:	686a      	ldr	r2, [r5, #4]
    3b46:	4422      	add	r2, r4
    3b48:	7a11      	ldrb	r1, [r2, #8]
    3b4a:	4299      	cmp	r1, r3
    3b4c:	d8f5      	bhi.n	3b3a <grid_ui_report_init+0x76>
	}
	
	return 0;
    3b4e:	2000      	movs	r0, #0
    3b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1; // MALLOC FAILED
    3b54:	20ff      	movs	r0, #255	; 0xff
    3b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b5a:	20ff      	movs	r0, #255	; 0xff
	
}
    3b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b60:	0000afa9 	.word	0x0000afa9

00003b64 <grid_ui_report_render>:

uint8_t grid_ui_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    3b64:	6843      	ldr	r3, [r0, #4]
    3b66:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    3b6a:	7848      	ldrb	r0, [r1, #1]
    3b6c:	b140      	cbz	r0, 3b80 <grid_ui_report_render+0x1c>
    3b6e:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    3b70:	6848      	ldr	r0, [r1, #4]
    3b72:	5cc0      	ldrb	r0, [r0, r3]
    3b74:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    3b76:	3301      	adds	r3, #1
    3b78:	b2db      	uxtb	r3, r3
    3b7a:	7848      	ldrb	r0, [r1, #1]
    3b7c:	4298      	cmp	r0, r3
    3b7e:	d8f7      	bhi.n	3b70 <grid_ui_report_render+0xc>
	}
	
	return rep->payload_length;
}
    3b80:	4770      	bx	lr

00003b82 <grid_ui_report_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_ui_report_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    3b82:	6843      	ldr	r3, [r0, #4]
    3b84:	0109      	lsls	r1, r1, #4
    3b86:	2201      	movs	r2, #1
    3b88:	545a      	strb	r2, [r3, r1]
    3b8a:	4770      	bx	lr

00003b8c <grid_ui_report_clear_changed_flag>:
}

void grid_ui_report_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    3b8c:	6843      	ldr	r3, [r0, #4]
    3b8e:	0109      	lsls	r1, r1, #4
    3b90:	2200      	movs	r2, #0
    3b92:	545a      	strb	r2, [r3, r1]
    3b94:	4770      	bx	lr
	...

00003b98 <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    3b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b9c:	b0ca      	sub	sp, #296	; 0x128
	sprintf(&message[length],
    3b9e:	2317      	movs	r3, #23
    3ba0:	9305      	str	r3, [sp, #20]
    3ba2:	2300      	movs	r3, #0
    3ba4:	9304      	str	r3, [sp, #16]
    3ba6:	227f      	movs	r2, #127	; 0x7f
    3ba8:	9203      	str	r2, [sp, #12]
    3baa:	9202      	str	r2, [sp, #8]
	uint8_t id = grid_sys_state.next_broadcast_message_id;
    3bac:	4a42      	ldr	r2, [pc, #264]	; (3cb8 <grid_port_process_ui+0x120>)
	sprintf(&message[length],
    3bae:	f892 220d 	ldrb.w	r2, [r2, #525]	; 0x20d
    3bb2:	9201      	str	r2, [sp, #4]
    3bb4:	9300      	str	r3, [sp, #0]
    3bb6:	230f      	movs	r3, #15
    3bb8:	2201      	movs	r2, #1
    3bba:	4940      	ldr	r1, [pc, #256]	; (3cbc <grid_port_process_ui+0x124>)
    3bbc:	a80a      	add	r0, sp, #40	; 0x28
    3bbe:	4c40      	ldr	r4, [pc, #256]	; (3cc0 <grid_port_process_ui+0x128>)
    3bc0:	47a0      	blx	r4
	length += strlen(&message[length]);
    3bc2:	a80a      	add	r0, sp, #40	; 0x28
    3bc4:	4b3f      	ldr	r3, [pc, #252]	; (3cc4 <grid_port_process_ui+0x12c>)
    3bc6:	4798      	blx	r3
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    3bc8:	4b3f      	ldr	r3, [pc, #252]	; (3cc8 <grid_port_process_ui+0x130>)
    3bca:	781b      	ldrb	r3, [r3, #0]
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d02d      	beq.n	3c2c <grid_port_process_ui+0x94>
    3bd0:	4605      	mov	r5, r0
    3bd2:	2400      	movs	r4, #0
    3bd4:	4627      	mov	r7, r4
		CRITICAL_SECTION_ENTER()
    3bd6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 3cf8 <grid_port_process_ui+0x160>
	return mod->report_array[index].changed;
    3bda:	4e3b      	ldr	r6, [pc, #236]	; (3cc8 <grid_port_process_ui+0x130>)
		CRITICAL_SECTION_LEAVE()
    3bdc:	f8df 811c 	ldr.w	r8, [pc, #284]	; 3cfc <grid_port_process_ui+0x164>
    3be0:	e007      	b.n	3bf2 <grid_port_process_ui+0x5a>
    3be2:	a807      	add	r0, sp, #28
    3be4:	47c0      	blx	r8
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    3be6:	3401      	adds	r4, #1
    3be8:	b2e4      	uxtb	r4, r4
    3bea:	7833      	ldrb	r3, [r6, #0]
    3bec:	b2db      	uxtb	r3, r3
    3bee:	42a3      	cmp	r3, r4
    3bf0:	d91b      	bls.n	3c2a <grid_port_process_ui+0x92>
		if (length>200){
    3bf2:	2dc8      	cmp	r5, #200	; 0xc8
    3bf4:	d8f7      	bhi.n	3be6 <grid_port_process_ui+0x4e>
		CRITICAL_SECTION_ENTER()
    3bf6:	a807      	add	r0, sp, #28
    3bf8:	47c8      	blx	r9
	return mod->report_array[index].changed;
    3bfa:	6872      	ldr	r2, [r6, #4]
    3bfc:	0123      	lsls	r3, r4, #4
		if (grid_ui_report_get_changed_flag(&grid_ui_state, i)){
    3bfe:	5cd3      	ldrb	r3, [r2, r3]
    3c00:	2b00      	cmp	r3, #0
    3c02:	d0ee      	beq.n	3be2 <grid_port_process_ui+0x4a>
			packetvalid++;
    3c04:	3701      	adds	r7, #1
    3c06:	b2ff      	uxtb	r7, r7
			grid_ui_report_render(&grid_ui_state, i, &message[length]);
    3c08:	ab0a      	add	r3, sp, #40	; 0x28
    3c0a:	eb03 0a05 	add.w	sl, r3, r5
    3c0e:	4652      	mov	r2, sl
    3c10:	4621      	mov	r1, r4
    3c12:	4630      	mov	r0, r6
    3c14:	4b2d      	ldr	r3, [pc, #180]	; (3ccc <grid_port_process_ui+0x134>)
    3c16:	4798      	blx	r3
			grid_ui_report_clear_changed_flag(&grid_ui_state, i);
    3c18:	4621      	mov	r1, r4
    3c1a:	4630      	mov	r0, r6
    3c1c:	4b2c      	ldr	r3, [pc, #176]	; (3cd0 <grid_port_process_ui+0x138>)
    3c1e:	4798      	blx	r3
			length += strlen(&message[length]);
    3c20:	4650      	mov	r0, sl
    3c22:	4b28      	ldr	r3, [pc, #160]	; (3cc4 <grid_port_process_ui+0x12c>)
    3c24:	4798      	blx	r3
    3c26:	4405      	add	r5, r0
    3c28:	e7db      	b.n	3be2 <grid_port_process_ui+0x4a>
	if (packetvalid){
    3c2a:	b917      	cbnz	r7, 3c32 <grid_port_process_ui+0x9a>
}
    3c2c:	b04a      	add	sp, #296	; 0x128
    3c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_sys_state.next_broadcast_message_id++;
    3c32:	4a21      	ldr	r2, [pc, #132]	; (3cb8 <grid_port_process_ui+0x120>)
    3c34:	f892 320d 	ldrb.w	r3, [r2, #525]	; 0x20d
    3c38:	3301      	adds	r3, #1
    3c3a:	f882 320d 	strb.w	r3, [r2, #525]	; 0x20d
		sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    3c3e:	ac0a      	add	r4, sp, #40	; 0x28
    3c40:	1966      	adds	r6, r4, r5
    3c42:	2204      	movs	r2, #4
    3c44:	4923      	ldr	r1, [pc, #140]	; (3cd4 <grid_port_process_ui+0x13c>)
    3c46:	4630      	mov	r0, r6
    3c48:	4f1d      	ldr	r7, [pc, #116]	; (3cc0 <grid_port_process_ui+0x128>)
    3c4a:	47b8      	blx	r7
		length += strlen(&message[length]);
    3c4c:	4630      	mov	r0, r6
    3c4e:	4e1d      	ldr	r6, [pc, #116]	; (3cc4 <grid_port_process_ui+0x12c>)
    3c50:	47b0      	blx	r6
    3c52:	4405      	add	r5, r0
		sprintf(length_string, "%02x", length);
    3c54:	462a      	mov	r2, r5
    3c56:	4920      	ldr	r1, [pc, #128]	; (3cd8 <grid_port_process_ui+0x140>)
    3c58:	a808      	add	r0, sp, #32
    3c5a:	47b8      	blx	r7
		message[2] = length_string[0];
    3c5c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3c60:	70a3      	strb	r3, [r4, #2]
		message[3] = length_string[1];
    3c62:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3c66:	70e3      	strb	r3, [r4, #3]
		sprintf(&message[length], "00\n");
    3c68:	4b1c      	ldr	r3, [pc, #112]	; (3cdc <grid_port_process_ui+0x144>)
    3c6a:	6818      	ldr	r0, [r3, #0]
    3c6c:	5160      	str	r0, [r4, r5]
		length += strlen(&message[length]);
    3c6e:	1960      	adds	r0, r4, r5
    3c70:	47b0      	blx	r6
    3c72:	4405      	add	r5, r0
		grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    3c74:	4629      	mov	r1, r5
    3c76:	4620      	mov	r0, r4
    3c78:	4b19      	ldr	r3, [pc, #100]	; (3ce0 <grid_port_process_ui+0x148>)
    3c7a:	4798      	blx	r3
    3c7c:	4602      	mov	r2, r0
    3c7e:	4629      	mov	r1, r5
    3c80:	4620      	mov	r0, r4
    3c82:	4b18      	ldr	r3, [pc, #96]	; (3ce4 <grid_port_process_ui+0x14c>)
    3c84:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    3c86:	b2a9      	uxth	r1, r5
    3c88:	4817      	ldr	r0, [pc, #92]	; (3ce8 <grid_port_process_ui+0x150>)
    3c8a:	4b18      	ldr	r3, [pc, #96]	; (3cec <grid_port_process_ui+0x154>)
    3c8c:	4798      	blx	r3
    3c8e:	2800      	cmp	r0, #0
    3c90:	d0cc      	beq.n	3c2c <grid_port_process_ui+0x94>
			for(uint16_t i = 0; i<length; i++){
    3c92:	b165      	cbz	r5, 3cae <grid_port_process_ui+0x116>
    3c94:	2400      	movs	r4, #0
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    3c96:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    3c9a:	4f13      	ldr	r7, [pc, #76]	; (3ce8 <grid_port_process_ui+0x150>)
    3c9c:	4e14      	ldr	r6, [pc, #80]	; (3cf0 <grid_port_process_ui+0x158>)
    3c9e:	f818 1004 	ldrb.w	r1, [r8, r4]
    3ca2:	4638      	mov	r0, r7
    3ca4:	47b0      	blx	r6
			for(uint16_t i = 0; i<length; i++){
    3ca6:	3401      	adds	r4, #1
    3ca8:	b2a4      	uxth	r4, r4
    3caa:	42a5      	cmp	r5, r4
    3cac:	d8f7      	bhi.n	3c9e <grid_port_process_ui+0x106>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    3cae:	480e      	ldr	r0, [pc, #56]	; (3ce8 <grid_port_process_ui+0x150>)
    3cb0:	4b10      	ldr	r3, [pc, #64]	; (3cf4 <grid_port_process_ui+0x15c>)
    3cb2:	4798      	blx	r3
}
    3cb4:	e7ba      	b.n	3c2c <grid_port_process_ui+0x94>
    3cb6:	bf00      	nop
    3cb8:	20001a30 	.word	0x20001a30
    3cbc:	0000ba14 	.word	0x0000ba14
    3cc0:	0000b159 	.word	0x0000b159
    3cc4:	0000b1a1 	.word	0x0000b1a1
    3cc8:	20001a24 	.word	0x20001a24
    3ccc:	00003b65 	.word	0x00003b65
    3cd0:	00003b8d 	.word	0x00003b8d
    3cd4:	0000ba2c 	.word	0x0000ba2c
    3cd8:	0000b9f8 	.word	0x0000b9f8
    3cdc:	0000ba30 	.word	0x0000ba30
    3ce0:	000038cd 	.word	0x000038cd
    3ce4:	000038e9 	.word	0x000038e9
    3ce8:	20001a04 	.word	0x20001a04
    3cec:	000016fd 	.word	0x000016fd
    3cf0:	0000172d 	.word	0x0000172d
    3cf4:	00001749 	.word	0x00001749
    3cf8:	00004099 	.word	0x00004099
    3cfc:	000040a7 	.word	0x000040a7

00003d00 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    3d00:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    3d02:	6983      	ldr	r3, [r0, #24]
    3d04:	b103      	cbz	r3, 3d08 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    3d06:	4798      	blx	r3
    3d08:	bd08      	pop	{r3, pc}

00003d0a <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    3d0a:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    3d0c:	69c3      	ldr	r3, [r0, #28]
    3d0e:	b103      	cbz	r3, 3d12 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    3d10:	4798      	blx	r3
    3d12:	bd08      	pop	{r3, pc}

00003d14 <adc_async_channel_conversion_done>:
{
    3d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d18:	4606      	mov	r6, r0
    3d1a:	460f      	mov	r7, r1
    3d1c:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    3d1e:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    3d20:	5c5c      	ldrb	r4, [r3, r1]
    3d22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3d26:	00e4      	lsls	r4, r4, #3
    3d28:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    3d2c:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    3d30:	f105 0a04 	add.w	sl, r5, #4
    3d34:	b2d1      	uxtb	r1, r2
    3d36:	4650      	mov	r0, sl
    3d38:	4b0c      	ldr	r3, [pc, #48]	; (3d6c <adc_async_channel_conversion_done+0x58>)
    3d3a:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    3d3c:	4630      	mov	r0, r6
    3d3e:	4b0c      	ldr	r3, [pc, #48]	; (3d70 <adc_async_channel_conversion_done+0x5c>)
    3d40:	4798      	blx	r3
    3d42:	2801      	cmp	r0, #1
    3d44:	d907      	bls.n	3d56 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    3d46:	ea4f 2119 	mov.w	r1, r9, lsr #8
    3d4a:	4650      	mov	r0, sl
    3d4c:	4b07      	ldr	r3, [pc, #28]	; (3d6c <adc_async_channel_conversion_done+0x58>)
    3d4e:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    3d50:	8aab      	ldrh	r3, [r5, #20]
    3d52:	3301      	adds	r3, #1
    3d54:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    3d56:	8aab      	ldrh	r3, [r5, #20]
    3d58:	3301      	adds	r3, #1
    3d5a:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    3d5c:	f858 3004 	ldr.w	r3, [r8, r4]
    3d60:	b113      	cbz	r3, 3d68 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    3d62:	4639      	mov	r1, r7
    3d64:	4630      	mov	r0, r6
    3d66:	4798      	blx	r3
    3d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d6c:	0000537d 	.word	0x0000537d
    3d70:	00005703 	.word	0x00005703

00003d74 <adc_async_init>:
{
    3d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d78:	4689      	mov	r9, r1
    3d7a:	4616      	mov	r6, r2
    3d7c:	461c      	mov	r4, r3
    3d7e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    3d82:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    3d84:	4607      	mov	r7, r0
    3d86:	b140      	cbz	r0, 3d9a <adc_async_init+0x26>
    3d88:	b149      	cbz	r1, 3d9e <adc_async_init+0x2a>
    3d8a:	b152      	cbz	r2, 3da2 <adc_async_init+0x2e>
    3d8c:	f1b8 0f00 	cmp.w	r8, #0
    3d90:	d009      	beq.n	3da6 <adc_async_init+0x32>
    3d92:	1c28      	adds	r0, r5, #0
    3d94:	bf18      	it	ne
    3d96:	2001      	movne	r0, #1
    3d98:	e006      	b.n	3da8 <adc_async_init+0x34>
    3d9a:	2000      	movs	r0, #0
    3d9c:	e004      	b.n	3da8 <adc_async_init+0x34>
    3d9e:	2000      	movs	r0, #0
    3da0:	e002      	b.n	3da8 <adc_async_init+0x34>
    3da2:	2000      	movs	r0, #0
    3da4:	e000      	b.n	3da8 <adc_async_init+0x34>
    3da6:	2000      	movs	r0, #0
    3da8:	f8df b064 	ldr.w	fp, [pc, #100]	; 3e10 <adc_async_init+0x9c>
    3dac:	223f      	movs	r2, #63	; 0x3f
    3dae:	4659      	mov	r1, fp
    3db0:	f8df a060 	ldr.w	sl, [pc, #96]	; 3e14 <adc_async_init+0xa0>
    3db4:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    3db6:	1c60      	adds	r0, r4, #1
    3db8:	2240      	movs	r2, #64	; 0x40
    3dba:	4659      	mov	r1, fp
    3dbc:	4580      	cmp	r8, r0
    3dbe:	bfcc      	ite	gt
    3dc0:	2000      	movgt	r0, #0
    3dc2:	2001      	movle	r0, #1
    3dc4:	47d0      	blx	sl
	device = &descr->device;
    3dc6:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    3dc8:	21ff      	movs	r1, #255	; 0xff
    3dca:	b2da      	uxtb	r2, r3
    3dcc:	54b1      	strb	r1, [r6, r2]
    3dce:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    3dd0:	b2da      	uxtb	r2, r3
    3dd2:	42a2      	cmp	r2, r4
    3dd4:	d9f9      	bls.n	3dca <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    3dd6:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    3dd8:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    3ddc:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    3de0:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    3de2:	4649      	mov	r1, r9
    3de4:	4638      	mov	r0, r7
    3de6:	4b06      	ldr	r3, [pc, #24]	; (3e00 <adc_async_init+0x8c>)
    3de8:	4798      	blx	r3
	if (init_status) {
    3dea:	4603      	mov	r3, r0
    3dec:	b928      	cbnz	r0, 3dfa <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    3dee:	4a05      	ldr	r2, [pc, #20]	; (3e04 <adc_async_init+0x90>)
    3df0:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    3df2:	4a05      	ldr	r2, [pc, #20]	; (3e08 <adc_async_init+0x94>)
    3df4:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    3df6:	4a05      	ldr	r2, [pc, #20]	; (3e0c <adc_async_init+0x98>)
    3df8:	607a      	str	r2, [r7, #4]
}
    3dfa:	4618      	mov	r0, r3
    3dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e00:	000055d1 	.word	0x000055d1
    3e04:	00003d15 	.word	0x00003d15
    3e08:	00003d01 	.word	0x00003d01
    3e0c:	00003d0b 	.word	0x00003d0b
    3e10:	0000ba34 	.word	0x0000ba34
    3e14:	00005241 	.word	0x00005241

00003e18 <adc_async_register_channel_buffer>:
{
    3e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e1c:	460e      	mov	r6, r1
    3e1e:	4617      	mov	r7, r2
    3e20:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    3e22:	4605      	mov	r5, r0
    3e24:	2800      	cmp	r0, #0
    3e26:	d040      	beq.n	3eaa <adc_async_register_channel_buffer+0x92>
    3e28:	2a00      	cmp	r2, #0
    3e2a:	d040      	beq.n	3eae <adc_async_register_channel_buffer+0x96>
    3e2c:	1c18      	adds	r0, r3, #0
    3e2e:	bf18      	it	ne
    3e30:	2001      	movne	r0, #1
    3e32:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3ecc <adc_async_register_channel_buffer+0xb4>
    3e36:	2266      	movs	r2, #102	; 0x66
    3e38:	4649      	mov	r1, r9
    3e3a:	4c22      	ldr	r4, [pc, #136]	; (3ec4 <adc_async_register_channel_buffer+0xac>)
    3e3c:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    3e3e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    3e42:	2267      	movs	r2, #103	; 0x67
    3e44:	4649      	mov	r1, r9
    3e46:	42b0      	cmp	r0, r6
    3e48:	bf34      	ite	cc
    3e4a:	2000      	movcc	r0, #0
    3e4c:	2001      	movcs	r0, #1
    3e4e:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    3e50:	6a29      	ldr	r1, [r5, #32]
    3e52:	5d8b      	ldrb	r3, [r1, r6]
    3e54:	2bff      	cmp	r3, #255	; 0xff
    3e56:	d12c      	bne.n	3eb2 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    3e58:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    3e5c:	2300      	movs	r3, #0
    3e5e:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    3e60:	b2da      	uxtb	r2, r3
    3e62:	5c8a      	ldrb	r2, [r1, r2]
    3e64:	2aff      	cmp	r2, #255	; 0xff
			index++;
    3e66:	bf1c      	itt	ne
    3e68:	3401      	addne	r4, #1
    3e6a:	b2e4      	uxtbne	r4, r4
    3e6c:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    3e6e:	b2da      	uxtb	r2, r3
    3e70:	4282      	cmp	r2, r0
    3e72:	d9f5      	bls.n	3e60 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    3e74:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    3e78:	42a3      	cmp	r3, r4
    3e7a:	d31d      	bcc.n	3eb8 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    3e7c:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    3e80:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    3e84:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    3e86:	4448      	add	r0, r9
    3e88:	4642      	mov	r2, r8
    3e8a:	4639      	mov	r1, r7
    3e8c:	3004      	adds	r0, #4
    3e8e:	4b0e      	ldr	r3, [pc, #56]	; (3ec8 <adc_async_register_channel_buffer+0xb0>)
    3e90:	4798      	blx	r3
    3e92:	4602      	mov	r2, r0
    3e94:	b998      	cbnz	r0, 3ebe <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    3e96:	6a2b      	ldr	r3, [r5, #32]
    3e98:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    3e9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3e9c:	4499      	add	r9, r3
    3e9e:	2300      	movs	r3, #0
    3ea0:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    3ea4:	4610      	mov	r0, r2
    3ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    3eaa:	2000      	movs	r0, #0
    3eac:	e7c1      	b.n	3e32 <adc_async_register_channel_buffer+0x1a>
    3eae:	2000      	movs	r0, #0
    3eb0:	e7bf      	b.n	3e32 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    3eb2:	f06f 020c 	mvn.w	r2, #12
    3eb6:	e7f5      	b.n	3ea4 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    3eb8:	f06f 021b 	mvn.w	r2, #27
    3ebc:	e7f2      	b.n	3ea4 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    3ebe:	f06f 020c 	mvn.w	r2, #12
    3ec2:	e7ef      	b.n	3ea4 <adc_async_register_channel_buffer+0x8c>
    3ec4:	00005241 	.word	0x00005241
    3ec8:	000052e9 	.word	0x000052e9
    3ecc:	0000ba34 	.word	0x0000ba34

00003ed0 <adc_async_enable_channel>:
{
    3ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ed2:	460d      	mov	r5, r1
	ASSERT(descr);
    3ed4:	4f0b      	ldr	r7, [pc, #44]	; (3f04 <adc_async_enable_channel+0x34>)
    3ed6:	4604      	mov	r4, r0
    3ed8:	2283      	movs	r2, #131	; 0x83
    3eda:	4639      	mov	r1, r7
    3edc:	3000      	adds	r0, #0
    3ede:	bf18      	it	ne
    3ee0:	2001      	movne	r0, #1
    3ee2:	4e09      	ldr	r6, [pc, #36]	; (3f08 <adc_async_enable_channel+0x38>)
    3ee4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    3ee6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    3eea:	2284      	movs	r2, #132	; 0x84
    3eec:	4639      	mov	r1, r7
    3eee:	42a8      	cmp	r0, r5
    3ef0:	bf34      	ite	cc
    3ef2:	2000      	movcc	r0, #0
    3ef4:	2001      	movcs	r0, #1
    3ef6:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    3ef8:	4629      	mov	r1, r5
    3efa:	4620      	mov	r0, r4
    3efc:	4b03      	ldr	r3, [pc, #12]	; (3f0c <adc_async_enable_channel+0x3c>)
    3efe:	4798      	blx	r3
}
    3f00:	2000      	movs	r0, #0
    3f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f04:	0000ba34 	.word	0x0000ba34
    3f08:	00005241 	.word	0x00005241
    3f0c:	000056ed 	.word	0x000056ed

00003f10 <adc_async_register_callback>:
{
    3f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3f14:	460e      	mov	r6, r1
    3f16:	4614      	mov	r4, r2
    3f18:	4699      	mov	r9, r3
	ASSERT(descr);
    3f1a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 3f8c <adc_async_register_callback+0x7c>
    3f1e:	4605      	mov	r5, r0
    3f20:	229c      	movs	r2, #156	; 0x9c
    3f22:	4641      	mov	r1, r8
    3f24:	3000      	adds	r0, #0
    3f26:	bf18      	it	ne
    3f28:	2001      	movne	r0, #1
    3f2a:	4f16      	ldr	r7, [pc, #88]	; (3f84 <adc_async_register_callback+0x74>)
    3f2c:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    3f2e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    3f32:	229d      	movs	r2, #157	; 0x9d
    3f34:	4641      	mov	r1, r8
    3f36:	42b0      	cmp	r0, r6
    3f38:	bf34      	ite	cc
    3f3a:	2000      	movcc	r0, #0
    3f3c:	2001      	movcs	r0, #1
    3f3e:	47b8      	blx	r7
	switch (type) {
    3f40:	2c01      	cmp	r4, #1
    3f42:	d019      	beq.n	3f78 <adc_async_register_callback+0x68>
    3f44:	b12c      	cbz	r4, 3f52 <adc_async_register_callback+0x42>
    3f46:	2c02      	cmp	r4, #2
    3f48:	d019      	beq.n	3f7e <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    3f4a:	f06f 000c 	mvn.w	r0, #12
}
    3f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    3f52:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    3f54:	5d9b      	ldrb	r3, [r3, r6]
    3f56:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3f58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f5c:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    3f60:	f119 0300 	adds.w	r3, r9, #0
    3f64:	bf18      	it	ne
    3f66:	2301      	movne	r3, #1
    3f68:	4622      	mov	r2, r4
    3f6a:	4631      	mov	r1, r6
    3f6c:	4628      	mov	r0, r5
    3f6e:	4c06      	ldr	r4, [pc, #24]	; (3f88 <adc_async_register_callback+0x78>)
    3f70:	47a0      	blx	r4
	return ERR_NONE;
    3f72:	2000      	movs	r0, #0
    3f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    3f78:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    3f7c:	e7f0      	b.n	3f60 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    3f7e:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    3f82:	e7ed      	b.n	3f60 <adc_async_register_callback+0x50>
    3f84:	00005241 	.word	0x00005241
    3f88:	0000572b 	.word	0x0000572b
    3f8c:	0000ba34 	.word	0x0000ba34

00003f90 <adc_async_read_channel>:
{
    3f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f94:	b083      	sub	sp, #12
    3f96:	4688      	mov	r8, r1
    3f98:	4691      	mov	r9, r2
    3f9a:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    3f9c:	4604      	mov	r4, r0
    3f9e:	2800      	cmp	r0, #0
    3fa0:	d04f      	beq.n	4042 <adc_async_read_channel+0xb2>
    3fa2:	2a00      	cmp	r2, #0
    3fa4:	d04f      	beq.n	4046 <adc_async_read_channel+0xb6>
    3fa6:	1c18      	adds	r0, r3, #0
    3fa8:	bf18      	it	ne
    3faa:	2001      	movne	r0, #1
    3fac:	4f29      	ldr	r7, [pc, #164]	; (4054 <adc_async_read_channel+0xc4>)
    3fae:	22bc      	movs	r2, #188	; 0xbc
    3fb0:	4639      	mov	r1, r7
    3fb2:	4e29      	ldr	r6, [pc, #164]	; (4058 <adc_async_read_channel+0xc8>)
    3fb4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    3fb6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    3fba:	22bd      	movs	r2, #189	; 0xbd
    3fbc:	4639      	mov	r1, r7
    3fbe:	4540      	cmp	r0, r8
    3fc0:	bf34      	ite	cc
    3fc2:	2000      	movcc	r0, #0
    3fc4:	2001      	movcs	r0, #1
    3fc6:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    3fc8:	4620      	mov	r0, r4
    3fca:	4b24      	ldr	r3, [pc, #144]	; (405c <adc_async_read_channel+0xcc>)
    3fcc:	4798      	blx	r3
	ASSERT(!(length % data_size));
    3fce:	fb95 f3f0 	sdiv	r3, r5, r0
    3fd2:	fb03 5010 	mls	r0, r3, r0, r5
    3fd6:	22bf      	movs	r2, #191	; 0xbf
    3fd8:	4639      	mov	r1, r7
    3fda:	fab0 f080 	clz	r0, r0
    3fde:	0940      	lsrs	r0, r0, #5
    3fe0:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    3fe2:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    3fe4:	f813 b008 	ldrb.w	fp, [r3, r8]
    3fe8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    3fec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3fee:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    3ff2:	a801      	add	r0, sp, #4
    3ff4:	4b1a      	ldr	r3, [pc, #104]	; (4060 <adc_async_read_channel+0xd0>)
    3ff6:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    3ff8:	f10b 0a04 	add.w	sl, fp, #4
    3ffc:	4650      	mov	r0, sl
    3ffe:	4b19      	ldr	r3, [pc, #100]	; (4064 <adc_async_read_channel+0xd4>)
    4000:	4798      	blx	r3
    4002:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    4004:	a801      	add	r0, sp, #4
    4006:	4b18      	ldr	r3, [pc, #96]	; (4068 <adc_async_read_channel+0xd8>)
    4008:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    400a:	f1b8 0f00 	cmp.w	r8, #0
    400e:	d01c      	beq.n	404a <adc_async_read_channel+0xba>
    4010:	b1ed      	cbz	r5, 404e <adc_async_read_channel+0xbe>
    4012:	3d01      	subs	r5, #1
    4014:	b2ad      	uxth	r5, r5
    4016:	3502      	adds	r5, #2
    4018:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    401a:	4f14      	ldr	r7, [pc, #80]	; (406c <adc_async_read_channel+0xdc>)
    401c:	b2a6      	uxth	r6, r4
    401e:	1e61      	subs	r1, r4, #1
    4020:	4449      	add	r1, r9
    4022:	4650      	mov	r0, sl
    4024:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    4026:	4544      	cmp	r4, r8
    4028:	d002      	beq.n	4030 <adc_async_read_channel+0xa0>
    402a:	3401      	adds	r4, #1
    402c:	42ac      	cmp	r4, r5
    402e:	d1f5      	bne.n	401c <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    4030:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4034:	1b9b      	subs	r3, r3, r6
    4036:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    403a:	4630      	mov	r0, r6
    403c:	b003      	add	sp, #12
    403e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    4042:	2000      	movs	r0, #0
    4044:	e7b2      	b.n	3fac <adc_async_read_channel+0x1c>
    4046:	2000      	movs	r0, #0
    4048:	e7b0      	b.n	3fac <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    404a:	2600      	movs	r6, #0
    404c:	e7f0      	b.n	4030 <adc_async_read_channel+0xa0>
    404e:	2600      	movs	r6, #0
    4050:	e7ee      	b.n	4030 <adc_async_read_channel+0xa0>
    4052:	bf00      	nop
    4054:	0000ba34 	.word	0x0000ba34
    4058:	00005241 	.word	0x00005241
    405c:	00005703 	.word	0x00005703
    4060:	00004099 	.word	0x00004099
    4064:	000053bd 	.word	0x000053bd
    4068:	000040a7 	.word	0x000040a7
    406c:	00005339 	.word	0x00005339

00004070 <adc_async_start_conversion>:
{
    4070:	b510      	push	{r4, lr}
	ASSERT(descr);
    4072:	4604      	mov	r4, r0
    4074:	22d6      	movs	r2, #214	; 0xd6
    4076:	4905      	ldr	r1, [pc, #20]	; (408c <adc_async_start_conversion+0x1c>)
    4078:	3000      	adds	r0, #0
    407a:	bf18      	it	ne
    407c:	2001      	movne	r0, #1
    407e:	4b04      	ldr	r3, [pc, #16]	; (4090 <adc_async_start_conversion+0x20>)
    4080:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    4082:	4620      	mov	r0, r4
    4084:	4b03      	ldr	r3, [pc, #12]	; (4094 <adc_async_start_conversion+0x24>)
    4086:	4798      	blx	r3
}
    4088:	2000      	movs	r0, #0
    408a:	bd10      	pop	{r4, pc}
    408c:	0000ba34 	.word	0x0000ba34
    4090:	00005241 	.word	0x00005241
    4094:	00005715 	.word	0x00005715

00004098 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4098:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    409c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    409e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    40a0:	f3bf 8f5f 	dmb	sy
    40a4:	4770      	bx	lr

000040a6 <atomic_leave_critical>:
    40a6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    40aa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    40ac:	f383 8810 	msr	PRIMASK, r3
    40b0:	4770      	bx	lr
	...

000040b4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    40b4:	b538      	push	{r3, r4, r5, lr}
    40b6:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    40b8:	4605      	mov	r5, r0
    40ba:	b158      	cbz	r0, 40d4 <crc_sync_init+0x20>
    40bc:	1c08      	adds	r0, r1, #0
    40be:	bf18      	it	ne
    40c0:	2001      	movne	r0, #1
    40c2:	222b      	movs	r2, #43	; 0x2b
    40c4:	4904      	ldr	r1, [pc, #16]	; (40d8 <crc_sync_init+0x24>)
    40c6:	4b05      	ldr	r3, [pc, #20]	; (40dc <crc_sync_init+0x28>)
    40c8:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    40ca:	4621      	mov	r1, r4
    40cc:	4628      	mov	r0, r5
    40ce:	4b04      	ldr	r3, [pc, #16]	; (40e0 <crc_sync_init+0x2c>)
    40d0:	4798      	blx	r3
}
    40d2:	bd38      	pop	{r3, r4, r5, pc}
    40d4:	2000      	movs	r0, #0
    40d6:	e7f4      	b.n	40c2 <crc_sync_init+0xe>
    40d8:	0000ba50 	.word	0x0000ba50
    40dc:	00005241 	.word	0x00005241
    40e0:	00005b15 	.word	0x00005b15

000040e4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    40e4:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    40e6:	4b02      	ldr	r3, [pc, #8]	; (40f0 <delay_init+0xc>)
    40e8:	6018      	str	r0, [r3, #0]
    40ea:	4b02      	ldr	r3, [pc, #8]	; (40f4 <delay_init+0x10>)
    40ec:	4798      	blx	r3
    40ee:	bd08      	pop	{r3, pc}
    40f0:	20000a5c 	.word	0x20000a5c
    40f4:	00007351 	.word	0x00007351

000040f8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    40f8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    40fa:	4b04      	ldr	r3, [pc, #16]	; (410c <delay_us+0x14>)
    40fc:	681c      	ldr	r4, [r3, #0]
    40fe:	4b04      	ldr	r3, [pc, #16]	; (4110 <delay_us+0x18>)
    4100:	4798      	blx	r3
    4102:	4601      	mov	r1, r0
    4104:	4620      	mov	r0, r4
    4106:	4b03      	ldr	r3, [pc, #12]	; (4114 <delay_us+0x1c>)
    4108:	4798      	blx	r3
    410a:	bd10      	pop	{r4, pc}
    410c:	20000a5c 	.word	0x20000a5c
    4110:	000057d9 	.word	0x000057d9
    4114:	00007365 	.word	0x00007365

00004118 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4118:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    411a:	4b04      	ldr	r3, [pc, #16]	; (412c <delay_ms+0x14>)
    411c:	681c      	ldr	r4, [r3, #0]
    411e:	4b04      	ldr	r3, [pc, #16]	; (4130 <delay_ms+0x18>)
    4120:	4798      	blx	r3
    4122:	4601      	mov	r1, r0
    4124:	4620      	mov	r0, r4
    4126:	4b03      	ldr	r3, [pc, #12]	; (4134 <delay_ms+0x1c>)
    4128:	4798      	blx	r3
    412a:	bd10      	pop	{r4, pc}
    412c:	20000a5c 	.word	0x20000a5c
    4130:	000057e1 	.word	0x000057e1
    4134:	00007365 	.word	0x00007365

00004138 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4138:	b508      	push	{r3, lr}
	return _event_system_init();
    413a:	4b01      	ldr	r3, [pc, #4]	; (4140 <event_system_init+0x8>)
    413c:	4798      	blx	r3
}
    413e:	bd08      	pop	{r3, pc}
    4140:	00005b1d 	.word	0x00005b1d

00004144 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4144:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    4146:	6943      	ldr	r3, [r0, #20]
    4148:	b103      	cbz	r3, 414c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    414a:	4798      	blx	r3
    414c:	bd08      	pop	{r3, pc}

0000414e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    414e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    4150:	6983      	ldr	r3, [r0, #24]
    4152:	b103      	cbz	r3, 4156 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4154:	4798      	blx	r3
    4156:	bd08      	pop	{r3, pc}

00004158 <flash_init>:
{
    4158:	b538      	push	{r3, r4, r5, lr}
    415a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    415c:	4604      	mov	r4, r0
    415e:	b190      	cbz	r0, 4186 <flash_init+0x2e>
    4160:	1c08      	adds	r0, r1, #0
    4162:	bf18      	it	ne
    4164:	2001      	movne	r0, #1
    4166:	2238      	movs	r2, #56	; 0x38
    4168:	4908      	ldr	r1, [pc, #32]	; (418c <flash_init+0x34>)
    416a:	4b09      	ldr	r3, [pc, #36]	; (4190 <flash_init+0x38>)
    416c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    416e:	4629      	mov	r1, r5
    4170:	4620      	mov	r0, r4
    4172:	4b08      	ldr	r3, [pc, #32]	; (4194 <flash_init+0x3c>)
    4174:	4798      	blx	r3
	if (rc) {
    4176:	4603      	mov	r3, r0
    4178:	b918      	cbnz	r0, 4182 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    417a:	4a07      	ldr	r2, [pc, #28]	; (4198 <flash_init+0x40>)
    417c:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    417e:	4a07      	ldr	r2, [pc, #28]	; (419c <flash_init+0x44>)
    4180:	6062      	str	r2, [r4, #4]
}
    4182:	4618      	mov	r0, r3
    4184:	bd38      	pop	{r3, r4, r5, pc}
    4186:	2000      	movs	r0, #0
    4188:	e7ed      	b.n	4166 <flash_init+0xe>
    418a:	bf00      	nop
    418c:	0000ba6c 	.word	0x0000ba6c
    4190:	00005241 	.word	0x00005241
    4194:	00005c29 	.word	0x00005c29
    4198:	00004145 	.word	0x00004145
    419c:	0000414f 	.word	0x0000414f

000041a0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    41a0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    41a2:	8843      	ldrh	r3, [r0, #2]
    41a4:	f413 7f80 	tst.w	r3, #256	; 0x100
    41a8:	d102      	bne.n	41b0 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    41aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
    41ac:	b103      	cbz	r3, 41b0 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    41ae:	4798      	blx	r3
    41b0:	bd08      	pop	{r3, pc}

000041b2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    41b2:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    41b4:	8843      	ldrh	r3, [r0, #2]
    41b6:	f413 7f80 	tst.w	r3, #256	; 0x100
    41ba:	d102      	bne.n	41c2 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    41bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    41be:	b103      	cbz	r3, 41c2 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    41c0:	4798      	blx	r3
    41c2:	bd08      	pop	{r3, pc}

000041c4 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    41c4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    41c6:	8843      	ldrh	r3, [r0, #2]
    41c8:	f413 7f80 	tst.w	r3, #256	; 0x100
    41cc:	d102      	bne.n	41d4 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    41ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    41d0:	b103      	cbz	r3, 41d4 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    41d2:	4798      	blx	r3
    41d4:	bd08      	pop	{r3, pc}
	...

000041d8 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    41d8:	b510      	push	{r4, lr}
    41da:	b084      	sub	sp, #16
    41dc:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    41de:	8a83      	ldrh	r3, [r0, #20]
    41e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    41e4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    41e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    41ea:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    41ee:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    41f0:	a901      	add	r1, sp, #4
    41f2:	3828      	subs	r0, #40	; 0x28
    41f4:	4b03      	ldr	r3, [pc, #12]	; (4204 <i2c_m_async_write+0x2c>)
    41f6:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    41f8:	2800      	cmp	r0, #0
    41fa:	bf08      	it	eq
    41fc:	4620      	moveq	r0, r4
    41fe:	b004      	add	sp, #16
    4200:	bd10      	pop	{r4, pc}
    4202:	bf00      	nop
    4204:	0000688d 	.word	0x0000688d

00004208 <i2c_m_async_read>:
{
    4208:	b510      	push	{r4, lr}
    420a:	b084      	sub	sp, #16
    420c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    420e:	8a83      	ldrh	r3, [r0, #20]
    4210:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4214:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4216:	f248 0301 	movw	r3, #32769	; 0x8001
    421a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    421e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4220:	a901      	add	r1, sp, #4
    4222:	3828      	subs	r0, #40	; 0x28
    4224:	4b03      	ldr	r3, [pc, #12]	; (4234 <i2c_m_async_read+0x2c>)
    4226:	4798      	blx	r3
}
    4228:	2800      	cmp	r0, #0
    422a:	bf08      	it	eq
    422c:	4620      	moveq	r0, r4
    422e:	b004      	add	sp, #16
    4230:	bd10      	pop	{r4, pc}
    4232:	bf00      	nop
    4234:	0000688d 	.word	0x0000688d

00004238 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4238:	b570      	push	{r4, r5, r6, lr}
    423a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    423c:	4604      	mov	r4, r0
    423e:	2289      	movs	r2, #137	; 0x89
    4240:	490f      	ldr	r1, [pc, #60]	; (4280 <i2c_m_async_init+0x48>)
    4242:	3000      	adds	r0, #0
    4244:	bf18      	it	ne
    4246:	2001      	movne	r0, #1
    4248:	4b0e      	ldr	r3, [pc, #56]	; (4284 <i2c_m_async_init+0x4c>)
    424a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    424c:	4629      	mov	r1, r5
    424e:	4620      	mov	r0, r4
    4250:	4b0d      	ldr	r3, [pc, #52]	; (4288 <i2c_m_async_init+0x50>)
    4252:	4798      	blx	r3
	if (init_status) {
    4254:	4605      	mov	r5, r0
    4256:	b108      	cbz	r0, 425c <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4258:	4628      	mov	r0, r5
    425a:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    425c:	4b0b      	ldr	r3, [pc, #44]	; (428c <i2c_m_async_init+0x54>)
    425e:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4260:	4b0b      	ldr	r3, [pc, #44]	; (4290 <i2c_m_async_init+0x58>)
    4262:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4264:	4a0b      	ldr	r2, [pc, #44]	; (4294 <i2c_m_async_init+0x5c>)
    4266:	2101      	movs	r1, #1
    4268:	4620      	mov	r0, r4
    426a:	4e0b      	ldr	r6, [pc, #44]	; (4298 <i2c_m_async_init+0x60>)
    426c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    426e:	4a0b      	ldr	r2, [pc, #44]	; (429c <i2c_m_async_init+0x64>)
    4270:	2102      	movs	r1, #2
    4272:	4620      	mov	r0, r4
    4274:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4276:	4a0a      	ldr	r2, [pc, #40]	; (42a0 <i2c_m_async_init+0x68>)
    4278:	2100      	movs	r1, #0
    427a:	4620      	mov	r0, r4
    427c:	47b0      	blx	r6
	return ERR_NONE;
    427e:	e7eb      	b.n	4258 <i2c_m_async_init+0x20>
    4280:	0000ba84 	.word	0x0000ba84
    4284:	00005241 	.word	0x00005241
    4288:	0000680d 	.word	0x0000680d
    428c:	00004209 	.word	0x00004209
    4290:	000041d9 	.word	0x000041d9
    4294:	000041a1 	.word	0x000041a1
    4298:	000069bd 	.word	0x000069bd
    429c:	000041b3 	.word	0x000041b3
    42a0:	000041c5 	.word	0x000041c5

000042a4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    42a4:	b570      	push	{r4, r5, r6, lr}
    42a6:	460d      	mov	r5, r1
    42a8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    42aa:	4604      	mov	r4, r0
    42ac:	b160      	cbz	r0, 42c8 <io_write+0x24>
    42ae:	1c08      	adds	r0, r1, #0
    42b0:	bf18      	it	ne
    42b2:	2001      	movne	r0, #1
    42b4:	2234      	movs	r2, #52	; 0x34
    42b6:	4905      	ldr	r1, [pc, #20]	; (42cc <io_write+0x28>)
    42b8:	4b05      	ldr	r3, [pc, #20]	; (42d0 <io_write+0x2c>)
    42ba:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    42bc:	6823      	ldr	r3, [r4, #0]
    42be:	4632      	mov	r2, r6
    42c0:	4629      	mov	r1, r5
    42c2:	4620      	mov	r0, r4
    42c4:	4798      	blx	r3
}
    42c6:	bd70      	pop	{r4, r5, r6, pc}
    42c8:	2000      	movs	r0, #0
    42ca:	e7f3      	b.n	42b4 <io_write+0x10>
    42cc:	0000baa4 	.word	0x0000baa4
    42d0:	00005241 	.word	0x00005241

000042d4 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    42d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42d6:	460f      	mov	r7, r1
    42d8:	4616      	mov	r6, r2
	ASSERT(io);
    42da:	4604      	mov	r4, r0
    42dc:	f240 1227 	movw	r2, #295	; 0x127
    42e0:	4909      	ldr	r1, [pc, #36]	; (4308 <_spi_m_async_io_write+0x34>)
    42e2:	3000      	adds	r0, #0
    42e4:	bf18      	it	ne
    42e6:	2001      	movne	r0, #1
    42e8:	4b08      	ldr	r3, [pc, #32]	; (430c <_spi_m_async_io_write+0x38>)
    42ea:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    42ec:	2500      	movs	r5, #0
    42ee:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    42f0:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    42f2:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    42f4:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    42f6:	2310      	movs	r3, #16
    42f8:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    42fa:	2101      	movs	r1, #1
    42fc:	f1a4 0020 	sub.w	r0, r4, #32
    4300:	4b03      	ldr	r3, [pc, #12]	; (4310 <_spi_m_async_io_write+0x3c>)
    4302:	4798      	blx	r3

	return ERR_NONE;
}
    4304:	4628      	mov	r0, r5
    4306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4308:	0000bab8 	.word	0x0000bab8
    430c:	00005241 	.word	0x00005241
    4310:	00006e65 	.word	0x00006e65

00004314 <_spi_m_async_io_read>:
{
    4314:	b570      	push	{r4, r5, r6, lr}
    4316:	460d      	mov	r5, r1
    4318:	4616      	mov	r6, r2
	ASSERT(io);
    431a:	4604      	mov	r4, r0
    431c:	f240 1205 	movw	r2, #261	; 0x105
    4320:	490c      	ldr	r1, [pc, #48]	; (4354 <_spi_m_async_io_read+0x40>)
    4322:	3000      	adds	r0, #0
    4324:	bf18      	it	ne
    4326:	2001      	movne	r0, #1
    4328:	4b0b      	ldr	r3, [pc, #44]	; (4358 <_spi_m_async_io_read+0x44>)
    432a:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    432c:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    432e:	2500      	movs	r5, #0
    4330:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    4332:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4334:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4336:	2310      	movs	r3, #16
    4338:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    433a:	3c20      	subs	r4, #32
    433c:	2101      	movs	r1, #1
    433e:	4620      	mov	r0, r4
    4340:	4b06      	ldr	r3, [pc, #24]	; (435c <_spi_m_async_io_read+0x48>)
    4342:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4344:	f240 11ff 	movw	r1, #511	; 0x1ff
    4348:	4620      	mov	r0, r4
    434a:	4b05      	ldr	r3, [pc, #20]	; (4360 <_spi_m_async_io_read+0x4c>)
    434c:	4798      	blx	r3
}
    434e:	4628      	mov	r0, r5
    4350:	bd70      	pop	{r4, r5, r6, pc}
    4352:	bf00      	nop
    4354:	0000bab8 	.word	0x0000bab8
    4358:	00005241 	.word	0x00005241
    435c:	00006e99 	.word	0x00006e99
    4360:	00006f15 	.word	0x00006f15

00004364 <_spi_dev_error>:
{
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	4604      	mov	r4, r0
    4368:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    436a:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    436c:	2100      	movs	r1, #0
    436e:	4b09      	ldr	r3, [pc, #36]	; (4394 <_spi_dev_error+0x30>)
    4370:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    4372:	2100      	movs	r1, #0
    4374:	4620      	mov	r0, r4
    4376:	4b08      	ldr	r3, [pc, #32]	; (4398 <_spi_dev_error+0x34>)
    4378:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    437a:	2100      	movs	r1, #0
    437c:	4620      	mov	r0, r4
    437e:	4b07      	ldr	r3, [pc, #28]	; (439c <_spi_dev_error+0x38>)
    4380:	4798      	blx	r3
	spi->stat = 0;
    4382:	2300      	movs	r3, #0
    4384:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    4388:	6b23      	ldr	r3, [r4, #48]	; 0x30
    438a:	b113      	cbz	r3, 4392 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    438c:	4631      	mov	r1, r6
    438e:	4628      	mov	r0, r5
    4390:	4798      	blx	r3
    4392:	bd70      	pop	{r4, r5, r6, pc}
    4394:	00006e65 	.word	0x00006e65
    4398:	00006e99 	.word	0x00006e99
    439c:	00006ed9 	.word	0x00006ed9

000043a0 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    43a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    43a2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    43a4:	429a      	cmp	r2, r3
    43a6:	d200      	bcs.n	43aa <_spi_dev_complete+0xa>
    43a8:	4770      	bx	lr
{
    43aa:	b510      	push	{r4, lr}
    43ac:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    43ae:	2100      	movs	r1, #0
    43b0:	4b04      	ldr	r3, [pc, #16]	; (43c4 <_spi_dev_complete+0x24>)
    43b2:	4798      	blx	r3
		spi->stat = 0;
    43b4:	2300      	movs	r3, #0
    43b6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    43ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    43bc:	b10b      	cbz	r3, 43c2 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    43be:	1f20      	subs	r0, r4, #4
    43c0:	4798      	blx	r3
    43c2:	bd10      	pop	{r4, pc}
    43c4:	00006ed9 	.word	0x00006ed9

000043c8 <_spi_dev_tx>:
{
    43c8:	b510      	push	{r4, lr}
    43ca:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    43cc:	7903      	ldrb	r3, [r0, #4]
    43ce:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    43d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    43d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    43d4:	f103 0101 	add.w	r1, r3, #1
    43d8:	6401      	str	r1, [r0, #64]	; 0x40
    43da:	bf94      	ite	ls
    43dc:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    43de:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    43e2:	4b08      	ldr	r3, [pc, #32]	; (4404 <_spi_dev_tx+0x3c>)
    43e4:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    43e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
    43e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    43ea:	429a      	cmp	r2, r3
    43ec:	d000      	beq.n	43f0 <_spi_dev_tx+0x28>
    43ee:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    43f0:	2100      	movs	r1, #0
    43f2:	4620      	mov	r0, r4
    43f4:	4b04      	ldr	r3, [pc, #16]	; (4408 <_spi_dev_tx+0x40>)
    43f6:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    43f8:	2101      	movs	r1, #1
    43fa:	4620      	mov	r0, r4
    43fc:	4b03      	ldr	r3, [pc, #12]	; (440c <_spi_dev_tx+0x44>)
    43fe:	4798      	blx	r3
}
    4400:	e7f5      	b.n	43ee <_spi_dev_tx+0x26>
    4402:	bf00      	nop
    4404:	00006f15 	.word	0x00006f15
    4408:	00006e65 	.word	0x00006e65
    440c:	00006ed9 	.word	0x00006ed9

00004410 <_spi_dev_rx>:
{
    4410:	b570      	push	{r4, r5, r6, lr}
    4412:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    4414:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4416:	b305      	cbz	r5, 445a <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    4418:	7903      	ldrb	r3, [r0, #4]
    441a:	2b01      	cmp	r3, #1
    441c:	d916      	bls.n	444c <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    441e:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4420:	1c73      	adds	r3, r6, #1
    4422:	6403      	str	r3, [r0, #64]	; 0x40
    4424:	4b18      	ldr	r3, [pc, #96]	; (4488 <_spi_dev_rx+0x78>)
    4426:	4798      	blx	r3
    4428:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    442c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    442e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4430:	4293      	cmp	r3, r2
    4432:	d21d      	bcs.n	4470 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    4434:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4436:	b1b2      	cbz	r2, 4466 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    4438:	7921      	ldrb	r1, [r4, #4]
    443a:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    443c:	bf94      	ite	ls
    443e:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4440:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4444:	4620      	mov	r0, r4
    4446:	4b11      	ldr	r3, [pc, #68]	; (448c <_spi_dev_rx+0x7c>)
    4448:	4798      	blx	r3
    444a:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    444c:	6c06      	ldr	r6, [r0, #64]	; 0x40
    444e:	1c73      	adds	r3, r6, #1
    4450:	6403      	str	r3, [r0, #64]	; 0x40
    4452:	4b0d      	ldr	r3, [pc, #52]	; (4488 <_spi_dev_rx+0x78>)
    4454:	4798      	blx	r3
    4456:	55a8      	strb	r0, [r5, r6]
    4458:	e7e8      	b.n	442c <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    445a:	4b0b      	ldr	r3, [pc, #44]	; (4488 <_spi_dev_rx+0x78>)
    445c:	4798      	blx	r3
		spi->xfercnt++;
    445e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4460:	3301      	adds	r3, #1
    4462:	6423      	str	r3, [r4, #64]	; 0x40
    4464:	e7e2      	b.n	442c <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4466:	88e1      	ldrh	r1, [r4, #6]
    4468:	4620      	mov	r0, r4
    446a:	4b08      	ldr	r3, [pc, #32]	; (448c <_spi_dev_rx+0x7c>)
    446c:	4798      	blx	r3
    446e:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    4470:	2100      	movs	r1, #0
    4472:	4620      	mov	r0, r4
    4474:	4b06      	ldr	r3, [pc, #24]	; (4490 <_spi_dev_rx+0x80>)
    4476:	4798      	blx	r3
		spi->stat = 0;
    4478:	2300      	movs	r3, #0
    447a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    447e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4480:	b10b      	cbz	r3, 4486 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    4482:	1f20      	subs	r0, r4, #4
    4484:	4798      	blx	r3
    4486:	bd70      	pop	{r4, r5, r6, pc}
    4488:	00006f45 	.word	0x00006f45
    448c:	00006f15 	.word	0x00006f15
    4490:	00006e99 	.word	0x00006e99

00004494 <spi_m_async_init>:
{
    4494:	b570      	push	{r4, r5, r6, lr}
    4496:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    4498:	4606      	mov	r6, r0
    449a:	b330      	cbz	r0, 44ea <spi_m_async_init+0x56>
    449c:	1c08      	adds	r0, r1, #0
    449e:	bf18      	it	ne
    44a0:	2001      	movne	r0, #1
    44a2:	22a5      	movs	r2, #165	; 0xa5
    44a4:	4912      	ldr	r1, [pc, #72]	; (44f0 <spi_m_async_init+0x5c>)
    44a6:	4b13      	ldr	r3, [pc, #76]	; (44f4 <spi_m_async_init+0x60>)
    44a8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    44aa:	4634      	mov	r4, r6
    44ac:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    44b0:	4629      	mov	r1, r5
    44b2:	4620      	mov	r0, r4
    44b4:	4b10      	ldr	r3, [pc, #64]	; (44f8 <spi_m_async_init+0x64>)
    44b6:	4798      	blx	r3
	if (rc >= 0) {
    44b8:	2800      	cmp	r0, #0
    44ba:	db15      	blt.n	44e8 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    44bc:	4a0f      	ldr	r2, [pc, #60]	; (44fc <spi_m_async_init+0x68>)
    44be:	2100      	movs	r1, #0
    44c0:	4620      	mov	r0, r4
    44c2:	4d0f      	ldr	r5, [pc, #60]	; (4500 <spi_m_async_init+0x6c>)
    44c4:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    44c6:	4a0f      	ldr	r2, [pc, #60]	; (4504 <spi_m_async_init+0x70>)
    44c8:	2101      	movs	r1, #1
    44ca:	4620      	mov	r0, r4
    44cc:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    44ce:	4a0e      	ldr	r2, [pc, #56]	; (4508 <spi_m_async_init+0x74>)
    44d0:	2102      	movs	r1, #2
    44d2:	4620      	mov	r0, r4
    44d4:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    44d6:	4a0d      	ldr	r2, [pc, #52]	; (450c <spi_m_async_init+0x78>)
    44d8:	2103      	movs	r1, #3
    44da:	4620      	mov	r0, r4
    44dc:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    44de:	4b0c      	ldr	r3, [pc, #48]	; (4510 <spi_m_async_init+0x7c>)
    44e0:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    44e2:	4b0c      	ldr	r3, [pc, #48]	; (4514 <spi_m_async_init+0x80>)
    44e4:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    44e6:	2000      	movs	r0, #0
}
    44e8:	bd70      	pop	{r4, r5, r6, pc}
    44ea:	2000      	movs	r0, #0
    44ec:	e7d9      	b.n	44a2 <spi_m_async_init+0xe>
    44ee:	bf00      	nop
    44f0:	0000bab8 	.word	0x0000bab8
    44f4:	00005241 	.word	0x00005241
    44f8:	00006d99 	.word	0x00006d99
    44fc:	000043c9 	.word	0x000043c9
    4500:	00006f71 	.word	0x00006f71
    4504:	00004411 	.word	0x00004411
    4508:	000043a1 	.word	0x000043a1
    450c:	00004365 	.word	0x00004365
    4510:	00004315 	.word	0x00004315
    4514:	000042d5 	.word	0x000042d5

00004518 <spi_m_async_enable>:
{
    4518:	b510      	push	{r4, lr}
	ASSERT(spi);
    451a:	4604      	mov	r4, r0
    451c:	22c1      	movs	r2, #193	; 0xc1
    451e:	4905      	ldr	r1, [pc, #20]	; (4534 <spi_m_async_enable+0x1c>)
    4520:	3000      	adds	r0, #0
    4522:	bf18      	it	ne
    4524:	2001      	movne	r0, #1
    4526:	4b04      	ldr	r3, [pc, #16]	; (4538 <spi_m_async_enable+0x20>)
    4528:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    452a:	1d20      	adds	r0, r4, #4
    452c:	4b03      	ldr	r3, [pc, #12]	; (453c <spi_m_async_enable+0x24>)
    452e:	4798      	blx	r3
    4530:	bd10      	pop	{r4, pc}
    4532:	bf00      	nop
    4534:	0000bab8 	.word	0x0000bab8
    4538:	00005241 	.word	0x00005241
    453c:	00006e01 	.word	0x00006e01

00004540 <spi_m_async_set_mode>:
{
    4540:	b538      	push	{r3, r4, r5, lr}
    4542:	460d      	mov	r5, r1
	ASSERT(spi);
    4544:	4604      	mov	r4, r0
    4546:	22d9      	movs	r2, #217	; 0xd9
    4548:	4909      	ldr	r1, [pc, #36]	; (4570 <spi_m_async_set_mode+0x30>)
    454a:	3000      	adds	r0, #0
    454c:	bf18      	it	ne
    454e:	2001      	movne	r0, #1
    4550:	4b08      	ldr	r3, [pc, #32]	; (4574 <spi_m_async_set_mode+0x34>)
    4552:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4554:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4558:	f013 0f10 	tst.w	r3, #16
    455c:	d104      	bne.n	4568 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    455e:	4629      	mov	r1, r5
    4560:	1d20      	adds	r0, r4, #4
    4562:	4b05      	ldr	r3, [pc, #20]	; (4578 <spi_m_async_set_mode+0x38>)
    4564:	4798      	blx	r3
    4566:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4568:	f06f 0003 	mvn.w	r0, #3
}
    456c:	bd38      	pop	{r3, r4, r5, pc}
    456e:	bf00      	nop
    4570:	0000bab8 	.word	0x0000bab8
    4574:	00005241 	.word	0x00005241
    4578:	00006e31 	.word	0x00006e31

0000457c <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    457e:	460d      	mov	r5, r1
    4580:	4617      	mov	r7, r2
    4582:	461e      	mov	r6, r3
	ASSERT(spi);
    4584:	4604      	mov	r4, r0
    4586:	f44f 729c 	mov.w	r2, #312	; 0x138
    458a:	4912      	ldr	r1, [pc, #72]	; (45d4 <spi_m_async_transfer+0x58>)
    458c:	3000      	adds	r0, #0
    458e:	bf18      	it	ne
    4590:	2001      	movne	r0, #1
    4592:	4b11      	ldr	r3, [pc, #68]	; (45d8 <spi_m_async_transfer+0x5c>)
    4594:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    4596:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    4598:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    459a:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    459c:	2300      	movs	r3, #0
    459e:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    45a0:	2310      	movs	r3, #16
    45a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    45a6:	1d26      	adds	r6, r4, #4
    45a8:	2101      	movs	r1, #1
    45aa:	4630      	mov	r0, r6
    45ac:	4b0b      	ldr	r3, [pc, #44]	; (45dc <spi_m_async_transfer+0x60>)
    45ae:	4798      	blx	r3
	if (txbuf) {
    45b0:	b15d      	cbz	r5, 45ca <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    45b2:	7a23      	ldrb	r3, [r4, #8]
    45b4:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    45b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    45b8:	bf94      	ite	ls
    45ba:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    45bc:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    45c0:	4630      	mov	r0, r6
    45c2:	4b07      	ldr	r3, [pc, #28]	; (45e0 <spi_m_async_transfer+0x64>)
    45c4:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    45c6:	2000      	movs	r0, #0
    45c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    45ca:	8961      	ldrh	r1, [r4, #10]
    45cc:	4630      	mov	r0, r6
    45ce:	4b04      	ldr	r3, [pc, #16]	; (45e0 <spi_m_async_transfer+0x64>)
    45d0:	4798      	blx	r3
    45d2:	e7f8      	b.n	45c6 <spi_m_async_transfer+0x4a>
    45d4:	0000bab8 	.word	0x0000bab8
    45d8:	00005241 	.word	0x00005241
    45dc:	00006e99 	.word	0x00006e99
    45e0:	00006f15 	.word	0x00006f15

000045e4 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    45e4:	b570      	push	{r4, r5, r6, lr}
    45e6:	460c      	mov	r4, r1
    45e8:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    45ea:	4605      	mov	r5, r0
    45ec:	b158      	cbz	r0, 4606 <spi_m_async_register_callback+0x22>
    45ee:	2901      	cmp	r1, #1
    45f0:	bf8c      	ite	hi
    45f2:	2000      	movhi	r0, #0
    45f4:	2001      	movls	r0, #1
    45f6:	f240 1263 	movw	r2, #355	; 0x163
    45fa:	4908      	ldr	r1, [pc, #32]	; (461c <spi_m_async_register_callback+0x38>)
    45fc:	4b08      	ldr	r3, [pc, #32]	; (4620 <spi_m_async_register_callback+0x3c>)
    45fe:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    4600:	b91c      	cbnz	r4, 460a <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    4602:	632e      	str	r6, [r5, #48]	; 0x30
    4604:	bd70      	pop	{r4, r5, r6, pc}
    4606:	2000      	movs	r0, #0
    4608:	e7f5      	b.n	45f6 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    460a:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    460c:	1c32      	adds	r2, r6, #0
    460e:	bf18      	it	ne
    4610:	2201      	movne	r2, #1
    4612:	2103      	movs	r1, #3
    4614:	1d28      	adds	r0, r5, #4
    4616:	4b03      	ldr	r3, [pc, #12]	; (4624 <spi_m_async_register_callback+0x40>)
    4618:	4798      	blx	r3
    461a:	bd70      	pop	{r4, r5, r6, pc}
    461c:	0000bab8 	.word	0x0000bab8
    4620:	00005241 	.word	0x00005241
    4624:	00006fa5 	.word	0x00006fa5

00004628 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    4628:	b538      	push	{r3, r4, r5, lr}
    462a:	460d      	mov	r5, r1
	ASSERT(spi && io);
    462c:	4604      	mov	r4, r0
    462e:	b158      	cbz	r0, 4648 <spi_m_async_get_io_descriptor+0x20>
    4630:	1c08      	adds	r0, r1, #0
    4632:	bf18      	it	ne
    4634:	2001      	movne	r0, #1
    4636:	f240 126f 	movw	r2, #367	; 0x16f
    463a:	4904      	ldr	r1, [pc, #16]	; (464c <spi_m_async_get_io_descriptor+0x24>)
    463c:	4b04      	ldr	r3, [pc, #16]	; (4650 <spi_m_async_get_io_descriptor+0x28>)
    463e:	4798      	blx	r3
	*io = &spi->io;
    4640:	3424      	adds	r4, #36	; 0x24
    4642:	602c      	str	r4, [r5, #0]
	return 0;
}
    4644:	2000      	movs	r0, #0
    4646:	bd38      	pop	{r3, r4, r5, pc}
    4648:	2000      	movs	r0, #0
    464a:	e7f4      	b.n	4636 <spi_m_async_get_io_descriptor+0xe>
    464c:	0000bab8 	.word	0x0000bab8
    4650:	00005241 	.word	0x00005241

00004654 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4654:	b570      	push	{r4, r5, r6, lr}
    4656:	460d      	mov	r5, r1
    4658:	4616      	mov	r6, r2
	ASSERT(io);
    465a:	4604      	mov	r4, r0
    465c:	2298      	movs	r2, #152	; 0x98
    465e:	4907      	ldr	r1, [pc, #28]	; (467c <_spi_m_dma_io_write+0x28>)
    4660:	3000      	adds	r0, #0
    4662:	bf18      	it	ne
    4664:	2001      	movne	r0, #1
    4666:	4b06      	ldr	r3, [pc, #24]	; (4680 <_spi_m_dma_io_write+0x2c>)
    4668:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    466a:	4633      	mov	r3, r6
    466c:	2200      	movs	r2, #0
    466e:	4629      	mov	r1, r5
    4670:	f1a4 001c 	sub.w	r0, r4, #28
    4674:	4c03      	ldr	r4, [pc, #12]	; (4684 <_spi_m_dma_io_write+0x30>)
    4676:	47a0      	blx	r4
}
    4678:	bd70      	pop	{r4, r5, r6, pc}
    467a:	bf00      	nop
    467c:	0000bad8 	.word	0x0000bad8
    4680:	00005241 	.word	0x00005241
    4684:	000071f9 	.word	0x000071f9

00004688 <_spi_m_dma_io_read>:
{
    4688:	b570      	push	{r4, r5, r6, lr}
    468a:	460d      	mov	r5, r1
    468c:	4616      	mov	r6, r2
	ASSERT(io);
    468e:	4604      	mov	r4, r0
    4690:	2281      	movs	r2, #129	; 0x81
    4692:	4907      	ldr	r1, [pc, #28]	; (46b0 <_spi_m_dma_io_read+0x28>)
    4694:	3000      	adds	r0, #0
    4696:	bf18      	it	ne
    4698:	2001      	movne	r0, #1
    469a:	4b06      	ldr	r3, [pc, #24]	; (46b4 <_spi_m_dma_io_read+0x2c>)
    469c:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    469e:	4633      	mov	r3, r6
    46a0:	462a      	mov	r2, r5
    46a2:	2100      	movs	r1, #0
    46a4:	f1a4 001c 	sub.w	r0, r4, #28
    46a8:	4c03      	ldr	r4, [pc, #12]	; (46b8 <_spi_m_dma_io_read+0x30>)
    46aa:	47a0      	blx	r4
}
    46ac:	bd70      	pop	{r4, r5, r6, pc}
    46ae:	bf00      	nop
    46b0:	0000bad8 	.word	0x0000bad8
    46b4:	00005241 	.word	0x00005241
    46b8:	000071f9 	.word	0x000071f9

000046bc <spi_m_dma_init>:
{
    46bc:	b538      	push	{r3, r4, r5, lr}
    46be:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    46c0:	4605      	mov	r5, r0
    46c2:	b1a0      	cbz	r0, 46ee <spi_m_dma_init+0x32>
    46c4:	1c08      	adds	r0, r1, #0
    46c6:	bf18      	it	ne
    46c8:	2001      	movne	r0, #1
    46ca:	223b      	movs	r2, #59	; 0x3b
    46cc:	4909      	ldr	r1, [pc, #36]	; (46f4 <spi_m_dma_init+0x38>)
    46ce:	4b0a      	ldr	r3, [pc, #40]	; (46f8 <spi_m_dma_init+0x3c>)
    46d0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    46d2:	4628      	mov	r0, r5
    46d4:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    46d8:	4621      	mov	r1, r4
    46da:	4b08      	ldr	r3, [pc, #32]	; (46fc <spi_m_dma_init+0x40>)
    46dc:	4798      	blx	r3
	if (rc) {
    46de:	4603      	mov	r3, r0
    46e0:	b918      	cbnz	r0, 46ea <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    46e2:	4a07      	ldr	r2, [pc, #28]	; (4700 <spi_m_dma_init+0x44>)
    46e4:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    46e6:	4a07      	ldr	r2, [pc, #28]	; (4704 <spi_m_dma_init+0x48>)
    46e8:	622a      	str	r2, [r5, #32]
}
    46ea:	4618      	mov	r0, r3
    46ec:	bd38      	pop	{r3, r4, r5, pc}
    46ee:	2000      	movs	r0, #0
    46f0:	e7eb      	b.n	46ca <spi_m_dma_init+0xe>
    46f2:	bf00      	nop
    46f4:	0000bad8 	.word	0x0000bad8
    46f8:	00005241 	.word	0x00005241
    46fc:	00006fdd 	.word	0x00006fdd
    4700:	00004689 	.word	0x00004689
    4704:	00004655 	.word	0x00004655

00004708 <spi_m_dma_enable>:
{
    4708:	b510      	push	{r4, lr}
	ASSERT(spi);
    470a:	4604      	mov	r4, r0
    470c:	2251      	movs	r2, #81	; 0x51
    470e:	4905      	ldr	r1, [pc, #20]	; (4724 <spi_m_dma_enable+0x1c>)
    4710:	3000      	adds	r0, #0
    4712:	bf18      	it	ne
    4714:	2001      	movne	r0, #1
    4716:	4b04      	ldr	r3, [pc, #16]	; (4728 <spi_m_dma_enable+0x20>)
    4718:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    471a:	1d20      	adds	r0, r4, #4
    471c:	4b03      	ldr	r3, [pc, #12]	; (472c <spi_m_dma_enable+0x24>)
    471e:	4798      	blx	r3
    4720:	bd10      	pop	{r4, pc}
    4722:	bf00      	nop
    4724:	0000bad8 	.word	0x0000bad8
    4728:	00005241 	.word	0x00005241
    472c:	00007159 	.word	0x00007159

00004730 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    4730:	b570      	push	{r4, r5, r6, lr}
    4732:	460d      	mov	r5, r1
    4734:	4616      	mov	r6, r2
	ASSERT(spi);
    4736:	4604      	mov	r4, r0
    4738:	22a8      	movs	r2, #168	; 0xa8
    473a:	4906      	ldr	r1, [pc, #24]	; (4754 <spi_m_dma_register_callback+0x24>)
    473c:	3000      	adds	r0, #0
    473e:	bf18      	it	ne
    4740:	2001      	movne	r0, #1
    4742:	4b05      	ldr	r3, [pc, #20]	; (4758 <spi_m_dma_register_callback+0x28>)
    4744:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    4746:	4632      	mov	r2, r6
    4748:	4629      	mov	r1, r5
    474a:	1d20      	adds	r0, r4, #4
    474c:	4b03      	ldr	r3, [pc, #12]	; (475c <spi_m_dma_register_callback+0x2c>)
    474e:	4798      	blx	r3
    4750:	bd70      	pop	{r4, r5, r6, pc}
    4752:	bf00      	nop
    4754:	0000bad8 	.word	0x0000bad8
    4758:	00005241 	.word	0x00005241
    475c:	00007189 	.word	0x00007189

00004760 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    4760:	b538      	push	{r3, r4, r5, lr}
    4762:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4764:	4604      	mov	r4, r0
    4766:	b150      	cbz	r0, 477e <spi_m_dma_get_io_descriptor+0x1e>
    4768:	1c08      	adds	r0, r1, #0
    476a:	bf18      	it	ne
    476c:	2001      	movne	r0, #1
    476e:	22ae      	movs	r2, #174	; 0xae
    4770:	4904      	ldr	r1, [pc, #16]	; (4784 <spi_m_dma_get_io_descriptor+0x24>)
    4772:	4b05      	ldr	r3, [pc, #20]	; (4788 <spi_m_dma_get_io_descriptor+0x28>)
    4774:	4798      	blx	r3
	*io = &spi->io;
    4776:	3420      	adds	r4, #32
    4778:	602c      	str	r4, [r5, #0]

	return 0;
}
    477a:	2000      	movs	r0, #0
    477c:	bd38      	pop	{r3, r4, r5, pc}
    477e:	2000      	movs	r0, #0
    4780:	e7f5      	b.n	476e <spi_m_dma_get_io_descriptor+0xe>
    4782:	bf00      	nop
    4784:	0000bad8 	.word	0x0000bad8
    4788:	00005241 	.word	0x00005241

0000478c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    478e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    4790:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    4792:	b12f      	cbz	r7, 47a0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    4794:	688d      	ldr	r5, [r1, #8]
    4796:	463c      	mov	r4, r7
    4798:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    479a:	f1c2 0e01 	rsb	lr, r2, #1
    479e:	e00b      	b.n	47b8 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    47a0:	4b0e      	ldr	r3, [pc, #56]	; (47dc <timer_add_timer_task+0x50>)
    47a2:	4798      	blx	r3
		return;
    47a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    47a6:	4473      	add	r3, lr
    47a8:	68a0      	ldr	r0, [r4, #8]
    47aa:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    47ac:	42ab      	cmp	r3, r5
    47ae:	d20a      	bcs.n	47c6 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    47b0:	6823      	ldr	r3, [r4, #0]
    47b2:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    47b4:	b153      	cbz	r3, 47cc <timer_add_timer_task+0x40>
    47b6:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    47b8:	6863      	ldr	r3, [r4, #4]
    47ba:	4293      	cmp	r3, r2
    47bc:	d8f3      	bhi.n	47a6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    47be:	68a0      	ldr	r0, [r4, #8]
    47c0:	4403      	add	r3, r0
    47c2:	1a9b      	subs	r3, r3, r2
    47c4:	e7f2      	b.n	47ac <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    47c6:	42a7      	cmp	r7, r4
    47c8:	d004      	beq.n	47d4 <timer_add_timer_task+0x48>
    47ca:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    47cc:	4620      	mov	r0, r4
    47ce:	4b04      	ldr	r3, [pc, #16]	; (47e0 <timer_add_timer_task+0x54>)
    47d0:	4798      	blx	r3
    47d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    47d4:	4660      	mov	r0, ip
    47d6:	4b01      	ldr	r3, [pc, #4]	; (47dc <timer_add_timer_task+0x50>)
    47d8:	4798      	blx	r3
    47da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47dc:	00005269 	.word	0x00005269
    47e0:	00005295 	.word	0x00005295

000047e4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    47e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    47e8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    47ea:	6907      	ldr	r7, [r0, #16]
    47ec:	3701      	adds	r7, #1
    47ee:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    47f0:	7e03      	ldrb	r3, [r0, #24]
    47f2:	f013 0f01 	tst.w	r3, #1
    47f6:	d113      	bne.n	4820 <timer_process_counted+0x3c>
    47f8:	7e03      	ldrb	r3, [r0, #24]
    47fa:	f013 0f02 	tst.w	r3, #2
    47fe:	d10f      	bne.n	4820 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    4800:	b354      	cbz	r4, 4858 <timer_process_counted+0x74>
    4802:	6863      	ldr	r3, [r4, #4]
    4804:	1afb      	subs	r3, r7, r3
    4806:	68a2      	ldr	r2, [r4, #8]
    4808:	4293      	cmp	r3, r2
    480a:	d307      	bcc.n	481c <timer_process_counted+0x38>
    480c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    480e:	f100 0814 	add.w	r8, r0, #20
    4812:	f8df 9048 	ldr.w	r9, [pc, #72]	; 485c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    4816:	f8df a048 	ldr.w	sl, [pc, #72]	; 4860 <timer_process_counted+0x7c>
    481a:	e012      	b.n	4842 <timer_process_counted+0x5e>
    481c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4820:	7e03      	ldrb	r3, [r0, #24]
    4822:	f043 0302 	orr.w	r3, r3, #2
    4826:	7603      	strb	r3, [r0, #24]
		return;
    4828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    482c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    482e:	68e3      	ldr	r3, [r4, #12]
    4830:	4620      	mov	r0, r4
    4832:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4834:	b185      	cbz	r5, 4858 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4836:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    4838:	686b      	ldr	r3, [r5, #4]
    483a:	1afb      	subs	r3, r7, r3
    483c:	68aa      	ldr	r2, [r5, #8]
    483e:	4293      	cmp	r3, r2
    4840:	d30a      	bcc.n	4858 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    4842:	4640      	mov	r0, r8
    4844:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4846:	7c23      	ldrb	r3, [r4, #16]
    4848:	2b01      	cmp	r3, #1
    484a:	d1ef      	bne.n	482c <timer_process_counted+0x48>
			tmp->time_label = time;
    484c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    484e:	463a      	mov	r2, r7
    4850:	4621      	mov	r1, r4
    4852:	4640      	mov	r0, r8
    4854:	47d0      	blx	sl
    4856:	e7e9      	b.n	482c <timer_process_counted+0x48>
    4858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    485c:	000052dd 	.word	0x000052dd
    4860:	0000478d 	.word	0x0000478d

00004864 <timer_init>:
{
    4864:	b570      	push	{r4, r5, r6, lr}
    4866:	460e      	mov	r6, r1
    4868:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    486a:	4604      	mov	r4, r0
    486c:	b190      	cbz	r0, 4894 <timer_init+0x30>
    486e:	b199      	cbz	r1, 4898 <timer_init+0x34>
    4870:	1c10      	adds	r0, r2, #0
    4872:	bf18      	it	ne
    4874:	2001      	movne	r0, #1
    4876:	223b      	movs	r2, #59	; 0x3b
    4878:	4908      	ldr	r1, [pc, #32]	; (489c <timer_init+0x38>)
    487a:	4b09      	ldr	r3, [pc, #36]	; (48a0 <timer_init+0x3c>)
    487c:	4798      	blx	r3
	descr->func = func;
    487e:	4620      	mov	r0, r4
    4880:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    4884:	682b      	ldr	r3, [r5, #0]
    4886:	4631      	mov	r1, r6
    4888:	4798      	blx	r3
	descr->time                           = 0;
    488a:	2000      	movs	r0, #0
    488c:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    488e:	4b05      	ldr	r3, [pc, #20]	; (48a4 <timer_init+0x40>)
    4890:	6063      	str	r3, [r4, #4]
}
    4892:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    4894:	2000      	movs	r0, #0
    4896:	e7ee      	b.n	4876 <timer_init+0x12>
    4898:	2000      	movs	r0, #0
    489a:	e7ec      	b.n	4876 <timer_init+0x12>
    489c:	0000baf4 	.word	0x0000baf4
    48a0:	00005241 	.word	0x00005241
    48a4:	000047e5 	.word	0x000047e5

000048a8 <timer_start>:
{
    48a8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    48aa:	4604      	mov	r4, r0
    48ac:	b198      	cbz	r0, 48d6 <timer_start+0x2e>
    48ae:	6800      	ldr	r0, [r0, #0]
    48b0:	3000      	adds	r0, #0
    48b2:	bf18      	it	ne
    48b4:	2001      	movne	r0, #1
    48b6:	2254      	movs	r2, #84	; 0x54
    48b8:	4909      	ldr	r1, [pc, #36]	; (48e0 <timer_start+0x38>)
    48ba:	4b0a      	ldr	r3, [pc, #40]	; (48e4 <timer_start+0x3c>)
    48bc:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    48be:	1d25      	adds	r5, r4, #4
    48c0:	6823      	ldr	r3, [r4, #0]
    48c2:	699b      	ldr	r3, [r3, #24]
    48c4:	4628      	mov	r0, r5
    48c6:	4798      	blx	r3
    48c8:	b938      	cbnz	r0, 48da <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    48ca:	6823      	ldr	r3, [r4, #0]
    48cc:	689b      	ldr	r3, [r3, #8]
    48ce:	4628      	mov	r0, r5
    48d0:	4798      	blx	r3
	return ERR_NONE;
    48d2:	2000      	movs	r0, #0
    48d4:	bd38      	pop	{r3, r4, r5, pc}
    48d6:	2000      	movs	r0, #0
    48d8:	e7ed      	b.n	48b6 <timer_start+0xe>
		return ERR_DENIED;
    48da:	f06f 0010 	mvn.w	r0, #16
}
    48de:	bd38      	pop	{r3, r4, r5, pc}
    48e0:	0000baf4 	.word	0x0000baf4
    48e4:	00005241 	.word	0x00005241

000048e8 <timer_add_task>:
{
    48e8:	b570      	push	{r4, r5, r6, lr}
    48ea:	b082      	sub	sp, #8
    48ec:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    48ee:	4604      	mov	r4, r0
    48f0:	b328      	cbz	r0, 493e <timer_add_task+0x56>
    48f2:	b331      	cbz	r1, 4942 <timer_add_task+0x5a>
    48f4:	6800      	ldr	r0, [r0, #0]
    48f6:	3000      	adds	r0, #0
    48f8:	bf18      	it	ne
    48fa:	2001      	movne	r0, #1
    48fc:	227b      	movs	r2, #123	; 0x7b
    48fe:	4920      	ldr	r1, [pc, #128]	; (4980 <timer_add_task+0x98>)
    4900:	4b20      	ldr	r3, [pc, #128]	; (4984 <timer_add_task+0x9c>)
    4902:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4904:	7f23      	ldrb	r3, [r4, #28]
    4906:	f043 0301 	orr.w	r3, r3, #1
    490a:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    490c:	f104 0618 	add.w	r6, r4, #24
    4910:	4629      	mov	r1, r5
    4912:	4630      	mov	r0, r6
    4914:	4b1c      	ldr	r3, [pc, #112]	; (4988 <timer_add_task+0xa0>)
    4916:	4798      	blx	r3
    4918:	b9a8      	cbnz	r0, 4946 <timer_add_task+0x5e>
	task->time_label = descr->time;
    491a:	6963      	ldr	r3, [r4, #20]
    491c:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    491e:	6962      	ldr	r2, [r4, #20]
    4920:	4629      	mov	r1, r5
    4922:	4630      	mov	r0, r6
    4924:	4b19      	ldr	r3, [pc, #100]	; (498c <timer_add_task+0xa4>)
    4926:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4928:	7f23      	ldrb	r3, [r4, #28]
    492a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    492e:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4930:	7f23      	ldrb	r3, [r4, #28]
    4932:	f013 0f02 	tst.w	r3, #2
    4936:	d112      	bne.n	495e <timer_add_task+0x76>
	return ERR_NONE;
    4938:	2000      	movs	r0, #0
}
    493a:	b002      	add	sp, #8
    493c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    493e:	2000      	movs	r0, #0
    4940:	e7dc      	b.n	48fc <timer_add_task+0x14>
    4942:	2000      	movs	r0, #0
    4944:	e7da      	b.n	48fc <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4946:	7f23      	ldrb	r3, [r4, #28]
    4948:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    494c:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    494e:	2280      	movs	r2, #128	; 0x80
    4950:	490b      	ldr	r1, [pc, #44]	; (4980 <timer_add_task+0x98>)
    4952:	2000      	movs	r0, #0
    4954:	4b0b      	ldr	r3, [pc, #44]	; (4984 <timer_add_task+0x9c>)
    4956:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4958:	f06f 0011 	mvn.w	r0, #17
    495c:	e7ed      	b.n	493a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    495e:	a801      	add	r0, sp, #4
    4960:	4b0b      	ldr	r3, [pc, #44]	; (4990 <timer_add_task+0xa8>)
    4962:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4964:	7f23      	ldrb	r3, [r4, #28]
    4966:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    496a:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    496c:	6823      	ldr	r3, [r4, #0]
    496e:	69db      	ldr	r3, [r3, #28]
    4970:	1d20      	adds	r0, r4, #4
    4972:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4974:	a801      	add	r0, sp, #4
    4976:	4b07      	ldr	r3, [pc, #28]	; (4994 <timer_add_task+0xac>)
    4978:	4798      	blx	r3
	return ERR_NONE;
    497a:	2000      	movs	r0, #0
    497c:	e7dd      	b.n	493a <timer_add_task+0x52>
    497e:	bf00      	nop
    4980:	0000baf4 	.word	0x0000baf4
    4984:	00005241 	.word	0x00005241
    4988:	00005247 	.word	0x00005247
    498c:	0000478d 	.word	0x0000478d
    4990:	00004099 	.word	0x00004099
    4994:	000040a7 	.word	0x000040a7

00004998 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    4998:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    499a:	2300      	movs	r3, #0
    499c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    499e:	69c3      	ldr	r3, [r0, #28]
    49a0:	b11b      	cbz	r3, 49aa <usart_transmission_complete+0x12>
    49a2:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    49a6:	4610      	mov	r0, r2
    49a8:	4798      	blx	r3
    49aa:	bd08      	pop	{r3, pc}

000049ac <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    49ac:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    49ae:	2300      	movs	r3, #0
    49b0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    49b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    49b4:	b11b      	cbz	r3, 49be <usart_error+0x12>
    49b6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    49ba:	4610      	mov	r0, r2
    49bc:	4798      	blx	r3
    49be:	bd08      	pop	{r3, pc}

000049c0 <usart_fill_rx_buffer>:
{
    49c0:	b538      	push	{r3, r4, r5, lr}
    49c2:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    49c4:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    49c8:	302c      	adds	r0, #44	; 0x2c
    49ca:	4b03      	ldr	r3, [pc, #12]	; (49d8 <usart_fill_rx_buffer+0x18>)
    49cc:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    49ce:	6a23      	ldr	r3, [r4, #32]
    49d0:	b10b      	cbz	r3, 49d6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    49d2:	4628      	mov	r0, r5
    49d4:	4798      	blx	r3
    49d6:	bd38      	pop	{r3, r4, r5, pc}
    49d8:	0000537d 	.word	0x0000537d

000049dc <usart_async_write>:
{
    49dc:	b570      	push	{r4, r5, r6, lr}
    49de:	460e      	mov	r6, r1
    49e0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    49e2:	4604      	mov	r4, r0
    49e4:	b1e0      	cbz	r0, 4a20 <usart_async_write+0x44>
    49e6:	b1e9      	cbz	r1, 4a24 <usart_async_write+0x48>
    49e8:	1c10      	adds	r0, r2, #0
    49ea:	bf18      	it	ne
    49ec:	2001      	movne	r0, #1
    49ee:	f240 123b 	movw	r2, #315	; 0x13b
    49f2:	490f      	ldr	r1, [pc, #60]	; (4a30 <usart_async_write+0x54>)
    49f4:	4b0f      	ldr	r3, [pc, #60]	; (4a34 <usart_async_write+0x58>)
    49f6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    49f8:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    49fc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    4a00:	429a      	cmp	r2, r3
    4a02:	d111      	bne.n	4a28 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    4a04:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    4a06:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    4a0a:	2300      	movs	r3, #0
    4a0c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    4a10:	2301      	movs	r3, #1
    4a12:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    4a14:	f104 0008 	add.w	r0, r4, #8
    4a18:	4b07      	ldr	r3, [pc, #28]	; (4a38 <usart_async_write+0x5c>)
    4a1a:	4798      	blx	r3
	return (int32_t)length;
    4a1c:	4628      	mov	r0, r5
    4a1e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    4a20:	2000      	movs	r0, #0
    4a22:	e7e4      	b.n	49ee <usart_async_write+0x12>
    4a24:	2000      	movs	r0, #0
    4a26:	e7e2      	b.n	49ee <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    4a28:	f06f 001b 	mvn.w	r0, #27
}
    4a2c:	bd70      	pop	{r4, r5, r6, pc}
    4a2e:	bf00      	nop
    4a30:	0000bb0c 	.word	0x0000bb0c
    4a34:	00005241 	.word	0x00005241
    4a38:	0000678f 	.word	0x0000678f

00004a3c <usart_process_byte_sent>:
{
    4a3c:	b510      	push	{r4, lr}
    4a3e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    4a40:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    4a42:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    4a46:	429a      	cmp	r2, r3
    4a48:	d009      	beq.n	4a5e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    4a4a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4a4c:	1c59      	adds	r1, r3, #1
    4a4e:	8781      	strh	r1, [r0, #60]	; 0x3c
    4a50:	5cd1      	ldrb	r1, [r2, r3]
    4a52:	4b04      	ldr	r3, [pc, #16]	; (4a64 <usart_process_byte_sent+0x28>)
    4a54:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    4a56:	4620      	mov	r0, r4
    4a58:	4b03      	ldr	r3, [pc, #12]	; (4a68 <usart_process_byte_sent+0x2c>)
    4a5a:	4798      	blx	r3
    4a5c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    4a5e:	4b03      	ldr	r3, [pc, #12]	; (4a6c <usart_process_byte_sent+0x30>)
    4a60:	4798      	blx	r3
    4a62:	bd10      	pop	{r4, pc}
    4a64:	00006789 	.word	0x00006789
    4a68:	0000678f 	.word	0x0000678f
    4a6c:	00006797 	.word	0x00006797

00004a70 <usart_async_read>:
{
    4a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a74:	b082      	sub	sp, #8
    4a76:	460f      	mov	r7, r1
    4a78:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    4a7a:	4606      	mov	r6, r0
    4a7c:	b1a0      	cbz	r0, 4aa8 <usart_async_read+0x38>
    4a7e:	b199      	cbz	r1, 4aa8 <usart_async_read+0x38>
    4a80:	2a00      	cmp	r2, #0
    4a82:	d12d      	bne.n	4ae0 <usart_async_read+0x70>
    4a84:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4a88:	4929      	ldr	r1, [pc, #164]	; (4b30 <usart_async_read+0xc0>)
    4a8a:	2000      	movs	r0, #0
    4a8c:	4b29      	ldr	r3, [pc, #164]	; (4b34 <usart_async_read+0xc4>)
    4a8e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4a90:	a801      	add	r0, sp, #4
    4a92:	4b29      	ldr	r3, [pc, #164]	; (4b38 <usart_async_read+0xc8>)
    4a94:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4a96:	f106 0034 	add.w	r0, r6, #52	; 0x34
    4a9a:	4b28      	ldr	r3, [pc, #160]	; (4b3c <usart_async_read+0xcc>)
    4a9c:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    4a9e:	a801      	add	r0, sp, #4
    4aa0:	4b27      	ldr	r3, [pc, #156]	; (4b40 <usart_async_read+0xd0>)
    4aa2:	4798      	blx	r3
	uint16_t                       was_read = 0;
    4aa4:	2500      	movs	r5, #0
	return (int32_t)was_read;
    4aa6:	e03e      	b.n	4b26 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    4aa8:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4aac:	4920      	ldr	r1, [pc, #128]	; (4b30 <usart_async_read+0xc0>)
    4aae:	2000      	movs	r0, #0
    4ab0:	4b20      	ldr	r3, [pc, #128]	; (4b34 <usart_async_read+0xc4>)
    4ab2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4ab4:	a801      	add	r0, sp, #4
    4ab6:	4b20      	ldr	r3, [pc, #128]	; (4b38 <usart_async_read+0xc8>)
    4ab8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4aba:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    4abe:	4650      	mov	r0, sl
    4ac0:	4b1e      	ldr	r3, [pc, #120]	; (4b3c <usart_async_read+0xcc>)
    4ac2:	4798      	blx	r3
    4ac4:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    4ac6:	a801      	add	r0, sp, #4
    4ac8:	4b1d      	ldr	r3, [pc, #116]	; (4b40 <usart_async_read+0xd0>)
    4aca:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    4acc:	f1b9 0f00 	cmp.w	r9, #0
    4ad0:	d004      	beq.n	4adc <usart_async_read+0x6c>
    4ad2:	f1b8 0f00 	cmp.w	r8, #0
    4ad6:	d119      	bne.n	4b0c <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    4ad8:	2500      	movs	r5, #0
    4ada:	e024      	b.n	4b26 <usart_async_read+0xb6>
    4adc:	2500      	movs	r5, #0
    4ade:	e022      	b.n	4b26 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    4ae0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4ae4:	4912      	ldr	r1, [pc, #72]	; (4b30 <usart_async_read+0xc0>)
    4ae6:	2001      	movs	r0, #1
    4ae8:	4b12      	ldr	r3, [pc, #72]	; (4b34 <usart_async_read+0xc4>)
    4aea:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4aec:	a801      	add	r0, sp, #4
    4aee:	4b12      	ldr	r3, [pc, #72]	; (4b38 <usart_async_read+0xc8>)
    4af0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4af2:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    4af6:	4650      	mov	r0, sl
    4af8:	4b10      	ldr	r3, [pc, #64]	; (4b3c <usart_async_read+0xcc>)
    4afa:	4798      	blx	r3
    4afc:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    4afe:	a801      	add	r0, sp, #4
    4b00:	4b0f      	ldr	r3, [pc, #60]	; (4b40 <usart_async_read+0xd0>)
    4b02:	4798      	blx	r3
	uint16_t                       was_read = 0;
    4b04:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    4b06:	f1b9 0f00 	cmp.w	r9, #0
    4b0a:	d00c      	beq.n	4b26 <usart_async_read+0xb6>
{
    4b0c:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    4b0e:	4e0d      	ldr	r6, [pc, #52]	; (4b44 <usart_async_read+0xd4>)
    4b10:	1c60      	adds	r0, r4, #1
    4b12:	b285      	uxth	r5, r0
    4b14:	1939      	adds	r1, r7, r4
    4b16:	4650      	mov	r0, sl
    4b18:	47b0      	blx	r6
    4b1a:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    4b1c:	454c      	cmp	r4, r9
    4b1e:	d202      	bcs.n	4b26 <usart_async_read+0xb6>
    4b20:	b2a3      	uxth	r3, r4
    4b22:	4598      	cmp	r8, r3
    4b24:	d8f4      	bhi.n	4b10 <usart_async_read+0xa0>
}
    4b26:	4628      	mov	r0, r5
    4b28:	b002      	add	sp, #8
    4b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b2e:	bf00      	nop
    4b30:	0000bb0c 	.word	0x0000bb0c
    4b34:	00005241 	.word	0x00005241
    4b38:	00004099 	.word	0x00004099
    4b3c:	000053bd 	.word	0x000053bd
    4b40:	000040a7 	.word	0x000040a7
    4b44:	00005339 	.word	0x00005339

00004b48 <usart_async_init>:
{
    4b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b4a:	460d      	mov	r5, r1
    4b4c:	4616      	mov	r6, r2
    4b4e:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    4b50:	4604      	mov	r4, r0
    4b52:	b320      	cbz	r0, 4b9e <usart_async_init+0x56>
    4b54:	b329      	cbz	r1, 4ba2 <usart_async_init+0x5a>
    4b56:	b332      	cbz	r2, 4ba6 <usart_async_init+0x5e>
    4b58:	1c18      	adds	r0, r3, #0
    4b5a:	bf18      	it	ne
    4b5c:	2001      	movne	r0, #1
    4b5e:	223a      	movs	r2, #58	; 0x3a
    4b60:	4913      	ldr	r1, [pc, #76]	; (4bb0 <usart_async_init+0x68>)
    4b62:	4b14      	ldr	r3, [pc, #80]	; (4bb4 <usart_async_init+0x6c>)
    4b64:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    4b66:	463a      	mov	r2, r7
    4b68:	4631      	mov	r1, r6
    4b6a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    4b6e:	4b12      	ldr	r3, [pc, #72]	; (4bb8 <usart_async_init+0x70>)
    4b70:	4798      	blx	r3
    4b72:	b9d0      	cbnz	r0, 4baa <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    4b74:	4629      	mov	r1, r5
    4b76:	f104 0008 	add.w	r0, r4, #8
    4b7a:	4b10      	ldr	r3, [pc, #64]	; (4bbc <usart_async_init+0x74>)
    4b7c:	4798      	blx	r3
	if (init_status) {
    4b7e:	4603      	mov	r3, r0
    4b80:	b958      	cbnz	r0, 4b9a <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    4b82:	4a0f      	ldr	r2, [pc, #60]	; (4bc0 <usart_async_init+0x78>)
    4b84:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    4b86:	4a0f      	ldr	r2, [pc, #60]	; (4bc4 <usart_async_init+0x7c>)
    4b88:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    4b8a:	4a0f      	ldr	r2, [pc, #60]	; (4bc8 <usart_async_init+0x80>)
    4b8c:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    4b8e:	4a0f      	ldr	r2, [pc, #60]	; (4bcc <usart_async_init+0x84>)
    4b90:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    4b92:	4a0f      	ldr	r2, [pc, #60]	; (4bd0 <usart_async_init+0x88>)
    4b94:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    4b96:	4a0f      	ldr	r2, [pc, #60]	; (4bd4 <usart_async_init+0x8c>)
    4b98:	6162      	str	r2, [r4, #20]
}
    4b9a:	4618      	mov	r0, r3
    4b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    4b9e:	2000      	movs	r0, #0
    4ba0:	e7dd      	b.n	4b5e <usart_async_init+0x16>
    4ba2:	2000      	movs	r0, #0
    4ba4:	e7db      	b.n	4b5e <usart_async_init+0x16>
    4ba6:	2000      	movs	r0, #0
    4ba8:	e7d9      	b.n	4b5e <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    4baa:	f06f 030c 	mvn.w	r3, #12
    4bae:	e7f4      	b.n	4b9a <usart_async_init+0x52>
    4bb0:	0000bb0c 	.word	0x0000bb0c
    4bb4:	00005241 	.word	0x00005241
    4bb8:	000052e9 	.word	0x000052e9
    4bbc:	000066f9 	.word	0x000066f9
    4bc0:	00004a71 	.word	0x00004a71
    4bc4:	000049dd 	.word	0x000049dd
    4bc8:	00004a3d 	.word	0x00004a3d
    4bcc:	000049c1 	.word	0x000049c1
    4bd0:	00004999 	.word	0x00004999
    4bd4:	000049ad 	.word	0x000049ad

00004bd8 <usart_async_enable>:
{
    4bd8:	b510      	push	{r4, lr}
	ASSERT(descr);
    4bda:	4604      	mov	r4, r0
    4bdc:	2261      	movs	r2, #97	; 0x61
    4bde:	4906      	ldr	r1, [pc, #24]	; (4bf8 <usart_async_enable+0x20>)
    4be0:	3000      	adds	r0, #0
    4be2:	bf18      	it	ne
    4be4:	2001      	movne	r0, #1
    4be6:	4b05      	ldr	r3, [pc, #20]	; (4bfc <usart_async_enable+0x24>)
    4be8:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    4bea:	f104 0008 	add.w	r0, r4, #8
    4bee:	4b04      	ldr	r3, [pc, #16]	; (4c00 <usart_async_enable+0x28>)
    4bf0:	4798      	blx	r3
}
    4bf2:	2000      	movs	r0, #0
    4bf4:	bd10      	pop	{r4, pc}
    4bf6:	bf00      	nop
    4bf8:	0000bb0c 	.word	0x0000bb0c
    4bfc:	00005241 	.word	0x00005241
    4c00:	00006775 	.word	0x00006775

00004c04 <usart_async_get_io_descriptor>:
{
    4c04:	b538      	push	{r3, r4, r5, lr}
    4c06:	460c      	mov	r4, r1
	ASSERT(descr && io);
    4c08:	4605      	mov	r5, r0
    4c0a:	b148      	cbz	r0, 4c20 <usart_async_get_io_descriptor+0x1c>
    4c0c:	1c08      	adds	r0, r1, #0
    4c0e:	bf18      	it	ne
    4c10:	2001      	movne	r0, #1
    4c12:	2277      	movs	r2, #119	; 0x77
    4c14:	4903      	ldr	r1, [pc, #12]	; (4c24 <usart_async_get_io_descriptor+0x20>)
    4c16:	4b04      	ldr	r3, [pc, #16]	; (4c28 <usart_async_get_io_descriptor+0x24>)
    4c18:	4798      	blx	r3
	*io = &descr->io;
    4c1a:	6025      	str	r5, [r4, #0]
}
    4c1c:	2000      	movs	r0, #0
    4c1e:	bd38      	pop	{r3, r4, r5, pc}
    4c20:	2000      	movs	r0, #0
    4c22:	e7f6      	b.n	4c12 <usart_async_get_io_descriptor+0xe>
    4c24:	0000bb0c 	.word	0x0000bb0c
    4c28:	00005241 	.word	0x00005241

00004c2c <usart_async_register_callback>:
{
    4c2c:	b570      	push	{r4, r5, r6, lr}
    4c2e:	460c      	mov	r4, r1
    4c30:	4616      	mov	r6, r2
	ASSERT(descr);
    4c32:	4605      	mov	r5, r0
    4c34:	2283      	movs	r2, #131	; 0x83
    4c36:	4917      	ldr	r1, [pc, #92]	; (4c94 <usart_async_register_callback+0x68>)
    4c38:	3000      	adds	r0, #0
    4c3a:	bf18      	it	ne
    4c3c:	2001      	movne	r0, #1
    4c3e:	4b16      	ldr	r3, [pc, #88]	; (4c98 <usart_async_register_callback+0x6c>)
    4c40:	4798      	blx	r3
	switch (type) {
    4c42:	2c01      	cmp	r4, #1
    4c44:	d010      	beq.n	4c68 <usart_async_register_callback+0x3c>
    4c46:	b124      	cbz	r4, 4c52 <usart_async_register_callback+0x26>
    4c48:	2c02      	cmp	r4, #2
    4c4a:	d018      	beq.n	4c7e <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    4c4c:	f06f 000c 	mvn.w	r0, #12
}
    4c50:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    4c52:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    4c54:	1c32      	adds	r2, r6, #0
    4c56:	bf18      	it	ne
    4c58:	2201      	movne	r2, #1
    4c5a:	2101      	movs	r1, #1
    4c5c:	f105 0008 	add.w	r0, r5, #8
    4c60:	4b0e      	ldr	r3, [pc, #56]	; (4c9c <usart_async_register_callback+0x70>)
    4c62:	4798      	blx	r3
	return ERR_NONE;
    4c64:	2000      	movs	r0, #0
		break;
    4c66:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    4c68:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    4c6a:	1c32      	adds	r2, r6, #0
    4c6c:	bf18      	it	ne
    4c6e:	2201      	movne	r2, #1
    4c70:	2102      	movs	r1, #2
    4c72:	f105 0008 	add.w	r0, r5, #8
    4c76:	4b09      	ldr	r3, [pc, #36]	; (4c9c <usart_async_register_callback+0x70>)
    4c78:	4798      	blx	r3
	return ERR_NONE;
    4c7a:	2000      	movs	r0, #0
		break;
    4c7c:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    4c7e:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    4c80:	1c32      	adds	r2, r6, #0
    4c82:	bf18      	it	ne
    4c84:	2201      	movne	r2, #1
    4c86:	2103      	movs	r1, #3
    4c88:	f105 0008 	add.w	r0, r5, #8
    4c8c:	4b03      	ldr	r3, [pc, #12]	; (4c9c <usart_async_register_callback+0x70>)
    4c8e:	4798      	blx	r3
	return ERR_NONE;
    4c90:	2000      	movs	r0, #0
		break;
    4c92:	bd70      	pop	{r4, r5, r6, pc}
    4c94:	0000bb0c 	.word	0x0000bb0c
    4c98:	00005241 	.word	0x00005241
    4c9c:	000067a1 	.word	0x000067a1

00004ca0 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4ca0:	4b0f      	ldr	r3, [pc, #60]	; (4ce0 <_usb_d_find_ep+0x40>)
    4ca2:	7859      	ldrb	r1, [r3, #1]
    4ca4:	4288      	cmp	r0, r1
    4ca6:	d018      	beq.n	4cda <_usb_d_find_ep+0x3a>
{
    4ca8:	b430      	push	{r4, r5}
    4caa:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4cac:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4cae:	f000 050f 	and.w	r5, r0, #15
    4cb2:	e007      	b.n	4cc4 <_usb_d_find_ep+0x24>
    4cb4:	3301      	adds	r3, #1
    4cb6:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4cb8:	2b0d      	cmp	r3, #13
    4cba:	d009      	beq.n	4cd0 <_usb_d_find_ep+0x30>
    4cbc:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4cbe:	7851      	ldrb	r1, [r2, #1]
    4cc0:	4281      	cmp	r1, r0
    4cc2:	d007      	beq.n	4cd4 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    4cc4:	7814      	ldrb	r4, [r2, #0]
    4cc6:	2c00      	cmp	r4, #0
    4cc8:	d1f4      	bne.n	4cb4 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4cca:	428d      	cmp	r5, r1
    4ccc:	d1f2      	bne.n	4cb4 <_usb_d_find_ep+0x14>
    4cce:	e001      	b.n	4cd4 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    4cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
    4cd4:	4618      	mov	r0, r3
    4cd6:	bc30      	pop	{r4, r5}
    4cd8:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4cda:	2300      	movs	r3, #0
}
    4cdc:	4618      	mov	r0, r3
    4cde:	4770      	bx	lr
    4ce0:	20000a60 	.word	0x20000a60

00004ce4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    4ce4:	2000      	movs	r0, #0
    4ce6:	4770      	bx	lr

00004ce8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    4ce8:	b538      	push	{r3, r4, r5, lr}
    4cea:	4604      	mov	r4, r0
    4cec:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    4cee:	4b09      	ldr	r3, [pc, #36]	; (4d14 <usb_d_cb_trans_more+0x2c>)
    4cf0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    4cf2:	4b09      	ldr	r3, [pc, #36]	; (4d18 <usb_d_cb_trans_more+0x30>)
    4cf4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    4cf8:	789b      	ldrb	r3, [r3, #2]
    4cfa:	2b03      	cmp	r3, #3
    4cfc:	d001      	beq.n	4d02 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    4cfe:	2000      	movs	r0, #0
}
    4d00:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    4d02:	4b05      	ldr	r3, [pc, #20]	; (4d18 <usb_d_cb_trans_more+0x30>)
    4d04:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    4d08:	6983      	ldr	r3, [r0, #24]
    4d0a:	4629      	mov	r1, r5
    4d0c:	4620      	mov	r0, r4
    4d0e:	4798      	blx	r3
    4d10:	bd38      	pop	{r3, r4, r5, pc}
    4d12:	bf00      	nop
    4d14:	00004ca1 	.word	0x00004ca1
    4d18:	20000a60 	.word	0x20000a60

00004d1c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    4d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d1e:	b085      	sub	sp, #20
    4d20:	4606      	mov	r6, r0
    4d22:	460d      	mov	r5, r1
    4d24:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    4d26:	4b4d      	ldr	r3, [pc, #308]	; (4e5c <_usb_d_cb_trans_done+0x140>)
    4d28:	4798      	blx	r3
    4d2a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    4d2c:	2d00      	cmp	r5, #0
    4d2e:	d15b      	bne.n	4de8 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4d30:	4a4b      	ldr	r2, [pc, #300]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4d32:	0143      	lsls	r3, r0, #5
    4d34:	18d1      	adds	r1, r2, r3
    4d36:	2000      	movs	r0, #0
    4d38:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4d3a:	5cd3      	ldrb	r3, [r2, r3]
    4d3c:	b173      	cbz	r3, 4d5c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4d3e:	4b48      	ldr	r3, [pc, #288]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4d40:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4d44:	2201      	movs	r2, #1
    4d46:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    4d48:	4845      	ldr	r0, [pc, #276]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4d4a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4d4e:	69c3      	ldr	r3, [r0, #28]
    4d50:	463a      	mov	r2, r7
    4d52:	78c1      	ldrb	r1, [r0, #3]
    4d54:	4630      	mov	r0, r6
    4d56:	4798      	blx	r3
}
    4d58:	b005      	add	sp, #20
    4d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    4d5c:	788b      	ldrb	r3, [r1, #2]
    4d5e:	2b03      	cmp	r3, #3
    4d60:	d00b      	beq.n	4d7a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    4d62:	483f      	ldr	r0, [pc, #252]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4d64:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    4d68:	4614      	mov	r4, r2
    4d6a:	69d3      	ldr	r3, [r2, #28]
    4d6c:	320c      	adds	r2, #12
    4d6e:	2100      	movs	r1, #0
    4d70:	7860      	ldrb	r0, [r4, #1]
    4d72:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4d74:	2302      	movs	r3, #2
    4d76:	70a3      	strb	r3, [r4, #2]
    4d78:	e7ee      	b.n	4d58 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    4d7a:	460b      	mov	r3, r1
    4d7c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    4d80:	460a      	mov	r2, r1
    4d82:	69ce      	ldr	r6, [r1, #28]
    4d84:	320c      	adds	r2, #12
    4d86:	2101      	movs	r1, #1
    4d88:	7858      	ldrb	r0, [r3, #1]
    4d8a:	47b0      	blx	r6
		if (err) {
    4d8c:	b1a0      	cbz	r0, 4db8 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4d8e:	4b34      	ldr	r3, [pc, #208]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4d90:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4d94:	2205      	movs	r2, #5
    4d96:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    4d98:	2202      	movs	r2, #2
    4d9a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4d9c:	2d00      	cmp	r5, #0
    4d9e:	db09      	blt.n	4db4 <_usb_d_cb_trans_done+0x98>
    4da0:	482f      	ldr	r0, [pc, #188]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4da2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4da6:	7840      	ldrb	r0, [r0, #1]
    4da8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    4dac:	2101      	movs	r1, #1
    4dae:	4b2d      	ldr	r3, [pc, #180]	; (4e64 <_usb_d_cb_trans_done+0x148>)
    4db0:	4798      	blx	r3
    4db2:	e7d1      	b.n	4d58 <_usb_d_cb_trans_done+0x3c>
    4db4:	7858      	ldrb	r0, [r3, #1]
    4db6:	e7f9      	b.n	4dac <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4db8:	4829      	ldr	r0, [pc, #164]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4dba:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4dbe:	2304      	movs	r3, #4
    4dc0:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    4dc2:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    4dc4:	2200      	movs	r2, #0
    4dc6:	9201      	str	r2, [sp, #4]
    4dc8:	9202      	str	r2, [sp, #8]
    4dca:	4295      	cmp	r5, r2
    4dcc:	bfac      	ite	ge
    4dce:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    4dd2:	f003 030f 	andlt.w	r3, r3, #15
    4dd6:	f88d 300c 	strb.w	r3, [sp, #12]
    4dda:	2301      	movs	r3, #1
    4ddc:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    4de0:	a801      	add	r0, sp, #4
    4de2:	4b21      	ldr	r3, [pc, #132]	; (4e68 <_usb_d_cb_trans_done+0x14c>)
    4de4:	4798      	blx	r3
    4de6:	e7b7      	b.n	4d58 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    4de8:	2d01      	cmp	r5, #1
    4dea:	d00a      	beq.n	4e02 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    4dec:	2d02      	cmp	r5, #2
    4dee:	d01c      	beq.n	4e2a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    4df0:	2d03      	cmp	r5, #3
    4df2:	d02a      	beq.n	4e4a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    4df4:	4b1a      	ldr	r3, [pc, #104]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4df6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    4dfa:	2206      	movs	r2, #6
    4dfc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    4dfe:	70da      	strb	r2, [r3, #3]
    4e00:	e7a2      	b.n	4d48 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    4e02:	4a17      	ldr	r2, [pc, #92]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4e04:	0143      	lsls	r3, r0, #5
    4e06:	18d1      	adds	r1, r2, r3
    4e08:	2002      	movs	r0, #2
    4e0a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4e0c:	5cd3      	ldrb	r3, [r2, r3]
    4e0e:	b12b      	cbz	r3, 4e1c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    4e10:	4b13      	ldr	r3, [pc, #76]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4e12:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4e16:	2205      	movs	r2, #5
    4e18:	709a      	strb	r2, [r3, #2]
    4e1a:	e795      	b.n	4d48 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4e1c:	460b      	mov	r3, r1
    4e1e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4e20:	2100      	movs	r1, #0
    4e22:	4630      	mov	r0, r6
    4e24:	4b0f      	ldr	r3, [pc, #60]	; (4e64 <_usb_d_cb_trans_done+0x148>)
    4e26:	4798      	blx	r3
    4e28:	e78e      	b.n	4d48 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    4e2a:	4a0d      	ldr	r2, [pc, #52]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4e2c:	0143      	lsls	r3, r0, #5
    4e2e:	18d1      	adds	r1, r2, r3
    4e30:	2004      	movs	r0, #4
    4e32:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4e34:	5cd3      	ldrb	r3, [r2, r3]
    4e36:	b12b      	cbz	r3, 4e44 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4e38:	4b09      	ldr	r3, [pc, #36]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4e3a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4e3e:	2201      	movs	r2, #1
    4e40:	709a      	strb	r2, [r3, #2]
    4e42:	e781      	b.n	4d48 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4e44:	2302      	movs	r3, #2
    4e46:	708b      	strb	r3, [r1, #2]
			return;
    4e48:	e786      	b.n	4d58 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    4e4a:	4b05      	ldr	r3, [pc, #20]	; (4e60 <_usb_d_cb_trans_done+0x144>)
    4e4c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    4e50:	2200      	movs	r2, #0
    4e52:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    4e54:	2205      	movs	r2, #5
    4e56:	70da      	strb	r2, [r3, #3]
    4e58:	e776      	b.n	4d48 <_usb_d_cb_trans_done+0x2c>
    4e5a:	bf00      	nop
    4e5c:	00004ca1 	.word	0x00004ca1
    4e60:	20000a60 	.word	0x20000a60
    4e64:	000086e5 	.word	0x000086e5
    4e68:	0000888d 	.word	0x0000888d

00004e6c <usb_d_cb_trans_setup>:
{
    4e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e70:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    4e72:	4b1c      	ldr	r3, [pc, #112]	; (4ee4 <usb_d_cb_trans_setup+0x78>)
    4e74:	4798      	blx	r3
    4e76:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    4e78:	4c1b      	ldr	r4, [pc, #108]	; (4ee8 <usb_d_cb_trans_setup+0x7c>)
    4e7a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    4e7e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4e80:	4621      	mov	r1, r4
    4e82:	4628      	mov	r0, r5
    4e84:	4b19      	ldr	r3, [pc, #100]	; (4eec <usb_d_cb_trans_setup+0x80>)
    4e86:	4798      	blx	r3
	if (n != 8) {
    4e88:	b2c0      	uxtb	r0, r0
    4e8a:	2808      	cmp	r0, #8
    4e8c:	d009      	beq.n	4ea2 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4e8e:	2101      	movs	r1, #1
    4e90:	4628      	mov	r0, r5
    4e92:	4c17      	ldr	r4, [pc, #92]	; (4ef0 <usb_d_cb_trans_setup+0x84>)
    4e94:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4e96:	2101      	movs	r1, #1
    4e98:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    4e9c:	47a0      	blx	r4
		return;
    4e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4ea2:	2100      	movs	r1, #0
    4ea4:	4628      	mov	r0, r5
    4ea6:	4f12      	ldr	r7, [pc, #72]	; (4ef0 <usb_d_cb_trans_setup+0x84>)
    4ea8:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    4eaa:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    4eae:	2100      	movs	r1, #0
    4eb0:	4640      	mov	r0, r8
    4eb2:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    4eb4:	4b0c      	ldr	r3, [pc, #48]	; (4ee8 <usb_d_cb_trans_setup+0x7c>)
    4eb6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    4eba:	2201      	movs	r2, #1
    4ebc:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4ebe:	695b      	ldr	r3, [r3, #20]
    4ec0:	4621      	mov	r1, r4
    4ec2:	4628      	mov	r0, r5
    4ec4:	4798      	blx	r3
    4ec6:	b108      	cbz	r0, 4ecc <usb_d_cb_trans_setup+0x60>
    4ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    4ecc:	4b06      	ldr	r3, [pc, #24]	; (4ee8 <usb_d_cb_trans_setup+0x7c>)
    4ece:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4ed2:	2305      	movs	r3, #5
    4ed4:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4ed6:	2101      	movs	r1, #1
    4ed8:	4628      	mov	r0, r5
    4eda:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4edc:	2101      	movs	r1, #1
    4ede:	4640      	mov	r0, r8
    4ee0:	47b8      	blx	r7
    4ee2:	e7f1      	b.n	4ec8 <usb_d_cb_trans_setup+0x5c>
    4ee4:	00004ca1 	.word	0x00004ca1
    4ee8:	20000a60 	.word	0x20000a60
    4eec:	0000882d 	.word	0x0000882d
    4ef0:	000086e5 	.word	0x000086e5

00004ef4 <usb_d_init>:

int32_t usb_d_init(void)
{
    4ef4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    4ef6:	4b11      	ldr	r3, [pc, #68]	; (4f3c <usb_d_init+0x48>)
    4ef8:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    4efa:	2800      	cmp	r0, #0
    4efc:	db1d      	blt.n	4f3a <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    4efe:	4c10      	ldr	r4, [pc, #64]	; (4f40 <usb_d_init+0x4c>)
    4f00:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    4f04:	2100      	movs	r1, #0
    4f06:	4620      	mov	r0, r4
    4f08:	4b0e      	ldr	r3, [pc, #56]	; (4f44 <usb_d_init+0x50>)
    4f0a:	4798      	blx	r3
    4f0c:	4623      	mov	r3, r4
    4f0e:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    4f12:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4f14:	4a0c      	ldr	r2, [pc, #48]	; (4f48 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    4f16:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4f18:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    4f1a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    4f1c:	61da      	str	r2, [r3, #28]
    4f1e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4f20:	4283      	cmp	r3, r0
    4f22:	d1f8      	bne.n	4f16 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    4f24:	4909      	ldr	r1, [pc, #36]	; (4f4c <usb_d_init+0x58>)
    4f26:	2000      	movs	r0, #0
    4f28:	4c09      	ldr	r4, [pc, #36]	; (4f50 <usb_d_init+0x5c>)
    4f2a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    4f2c:	4909      	ldr	r1, [pc, #36]	; (4f54 <usb_d_init+0x60>)
    4f2e:	2001      	movs	r0, #1
    4f30:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    4f32:	4909      	ldr	r1, [pc, #36]	; (4f58 <usb_d_init+0x64>)
    4f34:	2002      	movs	r0, #2
    4f36:	47a0      	blx	r4
	return ERR_NONE;
    4f38:	2000      	movs	r0, #0
}
    4f3a:	bd10      	pop	{r4, pc}
    4f3c:	000080bd 	.word	0x000080bd
    4f40:	20000a60 	.word	0x20000a60
    4f44:	0000afcf 	.word	0x0000afcf
    4f48:	00004ce5 	.word	0x00004ce5
    4f4c:	00004e6d 	.word	0x00004e6d
    4f50:	00008a95 	.word	0x00008a95
    4f54:	00004ce9 	.word	0x00004ce9
    4f58:	00004d1d 	.word	0x00004d1d

00004f5c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    4f5c:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    4f5e:	4b01      	ldr	r3, [pc, #4]	; (4f64 <usb_d_register_callback+0x8>)
    4f60:	4798      	blx	r3
    4f62:	bd08      	pop	{r3, pc}
    4f64:	00008a6d 	.word	0x00008a6d

00004f68 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    4f68:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    4f6a:	4b01      	ldr	r3, [pc, #4]	; (4f70 <usb_d_enable+0x8>)
    4f6c:	4798      	blx	r3
}
    4f6e:	bd08      	pop	{r3, pc}
    4f70:	000081c5 	.word	0x000081c5

00004f74 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    4f74:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    4f76:	4b01      	ldr	r3, [pc, #4]	; (4f7c <usb_d_attach+0x8>)
    4f78:	4798      	blx	r3
    4f7a:	bd08      	pop	{r3, pc}
    4f7c:	00008231 	.word	0x00008231

00004f80 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    4f80:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    4f82:	4b01      	ldr	r3, [pc, #4]	; (4f88 <usb_d_set_address+0x8>)
    4f84:	4798      	blx	r3
    4f86:	bd08      	pop	{r3, pc}
    4f88:	00008243 	.word	0x00008243

00004f8c <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    4f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f8e:	4606      	mov	r6, r0
    4f90:	460c      	mov	r4, r1
    4f92:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    4f94:	4b0f      	ldr	r3, [pc, #60]	; (4fd4 <usb_d_ep_init+0x48>)
    4f96:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    4f98:	2800      	cmp	r0, #0
    4f9a:	da14      	bge.n	4fc6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    4f9c:	20ff      	movs	r0, #255	; 0xff
    4f9e:	4b0d      	ldr	r3, [pc, #52]	; (4fd4 <usb_d_ep_init+0x48>)
    4fa0:	4798      	blx	r3
		if (ep_index < 0) {
    4fa2:	1e05      	subs	r5, r0, #0
    4fa4:	db12      	blt.n	4fcc <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    4fa6:	463a      	mov	r2, r7
    4fa8:	4621      	mov	r1, r4
    4faa:	4630      	mov	r0, r6
    4fac:	4b0a      	ldr	r3, [pc, #40]	; (4fd8 <usb_d_ep_init+0x4c>)
    4fae:	4798      	blx	r3
	if (rc < 0) {
    4fb0:	2800      	cmp	r0, #0
    4fb2:	db0d      	blt.n	4fd0 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    4fb4:	4b09      	ldr	r3, [pc, #36]	; (4fdc <usb_d_ep_init+0x50>)
    4fb6:	0168      	lsls	r0, r5, #5
    4fb8:	181a      	adds	r2, r3, r0
    4fba:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    4fbc:	f004 0403 	and.w	r4, r4, #3
    4fc0:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    4fc2:	2000      	movs	r0, #0
    4fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    4fc6:	f06f 0013 	mvn.w	r0, #19
    4fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    4fcc:	f06f 0014 	mvn.w	r0, #20
}
    4fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fd2:	bf00      	nop
    4fd4:	00004ca1 	.word	0x00004ca1
    4fd8:	00008251 	.word	0x00008251
    4fdc:	20000a60 	.word	0x20000a60

00004fe0 <usb_d_ep0_init>:
{
    4fe0:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    4fe2:	4602      	mov	r2, r0
    4fe4:	2100      	movs	r1, #0
    4fe6:	4608      	mov	r0, r1
    4fe8:	4b01      	ldr	r3, [pc, #4]	; (4ff0 <usb_d_ep0_init+0x10>)
    4fea:	4798      	blx	r3
}
    4fec:	bd08      	pop	{r3, pc}
    4fee:	bf00      	nop
    4ff0:	00004f8d 	.word	0x00004f8d

00004ff4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    4ff4:	b538      	push	{r3, r4, r5, lr}
    4ff6:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    4ff8:	4b06      	ldr	r3, [pc, #24]	; (5014 <usb_d_ep_deinit+0x20>)
    4ffa:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    4ffc:	1e04      	subs	r4, r0, #0
    4ffe:	db07      	blt.n	5010 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5000:	4628      	mov	r0, r5
    5002:	4b05      	ldr	r3, [pc, #20]	; (5018 <usb_d_ep_deinit+0x24>)
    5004:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5006:	4805      	ldr	r0, [pc, #20]	; (501c <usb_d_ep_deinit+0x28>)
    5008:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    500c:	23ff      	movs	r3, #255	; 0xff
    500e:	7043      	strb	r3, [r0, #1]
    5010:	bd38      	pop	{r3, r4, r5, pc}
    5012:	bf00      	nop
    5014:	00004ca1 	.word	0x00004ca1
    5018:	00008369 	.word	0x00008369
    501c:	20000a60 	.word	0x20000a60

00005020 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5020:	b538      	push	{r3, r4, r5, lr}
    5022:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5024:	4b0e      	ldr	r3, [pc, #56]	; (5060 <usb_d_ep_enable+0x40>)
    5026:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5028:	1e04      	subs	r4, r0, #0
    502a:	db16      	blt.n	505a <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    502c:	0163      	lsls	r3, r4, #5
    502e:	4a0d      	ldr	r2, [pc, #52]	; (5064 <usb_d_ep_enable+0x44>)
    5030:	5cd3      	ldrb	r3, [r2, r3]
    5032:	2b00      	cmp	r3, #0
    5034:	bf0c      	ite	eq
    5036:	2202      	moveq	r2, #2
    5038:	2201      	movne	r2, #1
    503a:	4b0a      	ldr	r3, [pc, #40]	; (5064 <usb_d_ep_enable+0x44>)
    503c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5040:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5042:	4628      	mov	r0, r5
    5044:	4b08      	ldr	r3, [pc, #32]	; (5068 <usb_d_ep_enable+0x48>)
    5046:	4798      	blx	r3
	if (rc < 0) {
    5048:	2800      	cmp	r0, #0
    504a:	db00      	blt.n	504e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    504c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    504e:	4b05      	ldr	r3, [pc, #20]	; (5064 <usb_d_ep_enable+0x44>)
    5050:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    5054:	2300      	movs	r3, #0
    5056:	70a3      	strb	r3, [r4, #2]
    5058:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    505a:	f06f 0011 	mvn.w	r0, #17
    505e:	e7f5      	b.n	504c <usb_d_ep_enable+0x2c>
    5060:	00004ca1 	.word	0x00004ca1
    5064:	20000a60 	.word	0x20000a60
    5068:	0000842d 	.word	0x0000842d

0000506c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5070:	b086      	sub	sp, #24
    5072:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5074:	7a07      	ldrb	r7, [r0, #8]
    5076:	4638      	mov	r0, r7
    5078:	4b3f      	ldr	r3, [pc, #252]	; (5178 <usb_d_ep_transfer+0x10c>)
    507a:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    507c:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    507e:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5082:	1e06      	subs	r6, r0, #0
    5084:	db72      	blt.n	516c <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    5086:	a804      	add	r0, sp, #16
    5088:	4b3c      	ldr	r3, [pc, #240]	; (517c <usb_d_ep_transfer+0x110>)
    508a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    508c:	4b3c      	ldr	r3, [pc, #240]	; (5180 <usb_d_ep_transfer+0x114>)
    508e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5092:	789b      	ldrb	r3, [r3, #2]
    5094:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    5098:	f89d 3017 	ldrb.w	r3, [sp, #23]
    509c:	b2db      	uxtb	r3, r3
    509e:	2b01      	cmp	r3, #1
    50a0:	d011      	beq.n	50c6 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    50a2:	a804      	add	r0, sp, #16
    50a4:	4b37      	ldr	r3, [pc, #220]	; (5184 <usb_d_ep_transfer+0x118>)
    50a6:	4798      	blx	r3
		switch (state) {
    50a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    50ac:	b2db      	uxtb	r3, r3
    50ae:	2b05      	cmp	r3, #5
    50b0:	d05f      	beq.n	5172 <usb_d_ep_transfer+0x106>
    50b2:	2b06      	cmp	r3, #6
    50b4:	d023      	beq.n	50fe <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    50b6:	2b00      	cmp	r3, #0
    50b8:	bf0c      	ite	eq
    50ba:	f06f 0012 	mvneq.w	r0, #18
    50be:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    50c0:	b006      	add	sp, #24
    50c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    50c6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5180 <usb_d_ep_transfer+0x114>
    50ca:	ea4f 1946 	mov.w	r9, r6, lsl #5
    50ce:	eb0a 0309 	add.w	r3, sl, r9
    50d2:	2203      	movs	r2, #3
    50d4:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    50d6:	a804      	add	r0, sp, #16
    50d8:	4b2a      	ldr	r3, [pc, #168]	; (5184 <usb_d_ep_transfer+0x118>)
    50da:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    50dc:	f81a 3009 	ldrb.w	r3, [sl, r9]
    50e0:	b183      	cbz	r3, 5104 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    50e2:	7a22      	ldrb	r2, [r4, #8]
    50e4:	3500      	adds	r5, #0
    50e6:	bf18      	it	ne
    50e8:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    50ea:	6823      	ldr	r3, [r4, #0]
    50ec:	9301      	str	r3, [sp, #4]
    50ee:	f8cd 8008 	str.w	r8, [sp, #8]
    50f2:	f017 0f80 	tst.w	r7, #128	; 0x80
    50f6:	d119      	bne.n	512c <usb_d_ep_transfer+0xc0>
    50f8:	f002 030f 	and.w	r3, r2, #15
    50fc:	e018      	b.n	5130 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    50fe:	f06f 000f 	mvn.w	r0, #15
    5102:	e7dd      	b.n	50c0 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5104:	4b1e      	ldr	r3, [pc, #120]	; (5180 <usb_d_ep_transfer+0x114>)
    5106:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    510a:	7cda      	ldrb	r2, [r3, #19]
    510c:	7c9d      	ldrb	r5, [r3, #18]
    510e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    5112:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    5114:	b9a5      	cbnz	r5, 5140 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5116:	4b1a      	ldr	r3, [pc, #104]	; (5180 <usb_d_ep_transfer+0x114>)
    5118:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    511c:	2304      	movs	r3, #4
    511e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5120:	2300      	movs	r3, #0
			zlp                 = true;
    5122:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5124:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5126:	6821      	ldr	r1, [r4, #0]
    5128:	9101      	str	r1, [sp, #4]
    512a:	9302      	str	r3, [sp, #8]
    512c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5130:	f88d 300c 	strb.w	r3, [sp, #12]
    5134:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5138:	a801      	add	r0, sp, #4
    513a:	4b13      	ldr	r3, [pc, #76]	; (5188 <usb_d_ep_transfer+0x11c>)
    513c:	4798      	blx	r3
	return rc;
    513e:	e7bf      	b.n	50c0 <usb_d_ep_transfer+0x54>
    5140:	4643      	mov	r3, r8
    5142:	45a8      	cmp	r8, r5
    5144:	bf28      	it	cs
    5146:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5148:	4a0d      	ldr	r2, [pc, #52]	; (5180 <usb_d_ep_transfer+0x114>)
    514a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    514e:	f996 200c 	ldrsb.w	r2, [r6, #12]
    5152:	2a00      	cmp	r2, #0
    5154:	db05      	blt.n	5162 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5156:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5158:	6821      	ldr	r1, [r4, #0]
    515a:	9101      	str	r1, [sp, #4]
    515c:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    515e:	2500      	movs	r5, #0
    5160:	e7ca      	b.n	50f8 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    5162:	429d      	cmp	r5, r3
    5164:	bf94      	ite	ls
    5166:	2500      	movls	r5, #0
    5168:	2501      	movhi	r5, #1
    516a:	e7db      	b.n	5124 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    516c:	f06f 0011 	mvn.w	r0, #17
    5170:	e7a6      	b.n	50c0 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    5172:	2002      	movs	r0, #2
    5174:	e7a4      	b.n	50c0 <usb_d_ep_transfer+0x54>
    5176:	bf00      	nop
    5178:	00004ca1 	.word	0x00004ca1
    517c:	00004099 	.word	0x00004099
    5180:	20000a60 	.word	0x20000a60
    5184:	000040a7 	.word	0x000040a7
    5188:	0000888d 	.word	0x0000888d

0000518c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    518c:	b538      	push	{r3, r4, r5, lr}
    518e:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    5190:	b141      	cbz	r1, 51a4 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    5192:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5194:	bf0c      	ite	eq
    5196:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5198:	2102      	movne	r1, #2
    519a:	4b13      	ldr	r3, [pc, #76]	; (51e8 <usb_d_ep_halt+0x5c>)
    519c:	4798      	blx	r3
    519e:	4603      	mov	r3, r0
	}
}
    51a0:	4618      	mov	r0, r3
    51a2:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    51a4:	4b11      	ldr	r3, [pc, #68]	; (51ec <usb_d_ep_halt+0x60>)
    51a6:	4798      	blx	r3
	if (ep_index < 0) {
    51a8:	1e05      	subs	r5, r0, #0
    51aa:	db19      	blt.n	51e0 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    51ac:	2102      	movs	r1, #2
    51ae:	4620      	mov	r0, r4
    51b0:	4b0d      	ldr	r3, [pc, #52]	; (51e8 <usb_d_ep_halt+0x5c>)
    51b2:	4798      	blx	r3
    51b4:	4603      	mov	r3, r0
    51b6:	2800      	cmp	r0, #0
    51b8:	d0f2      	beq.n	51a0 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    51ba:	2100      	movs	r1, #0
    51bc:	4620      	mov	r0, r4
    51be:	4b0a      	ldr	r3, [pc, #40]	; (51e8 <usb_d_ep_halt+0x5c>)
    51c0:	4798      	blx	r3
		if (rc < 0) {
    51c2:	1e03      	subs	r3, r0, #0
    51c4:	dbec      	blt.n	51a0 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    51c6:	4b0a      	ldr	r3, [pc, #40]	; (51f0 <usb_d_ep_halt+0x64>)
    51c8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    51cc:	2201      	movs	r2, #1
    51ce:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    51d0:	2103      	movs	r1, #3
    51d2:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    51d4:	69db      	ldr	r3, [r3, #28]
    51d6:	2200      	movs	r2, #0
    51d8:	4620      	mov	r0, r4
    51da:	4798      	blx	r3
	return ERR_NONE;
    51dc:	2300      	movs	r3, #0
    51de:	e7df      	b.n	51a0 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    51e0:	f06f 0311 	mvn.w	r3, #17
    51e4:	e7dc      	b.n	51a0 <usb_d_ep_halt+0x14>
    51e6:	bf00      	nop
    51e8:	000086e5 	.word	0x000086e5
    51ec:	00004ca1 	.word	0x00004ca1
    51f0:	20000a60 	.word	0x20000a60

000051f4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    51f4:	b538      	push	{r3, r4, r5, lr}
    51f6:	460d      	mov	r5, r1
    51f8:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    51fa:	4b0e      	ldr	r3, [pc, #56]	; (5234 <usb_d_ep_register_callback+0x40>)
    51fc:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    51fe:	4b0e      	ldr	r3, [pc, #56]	; (5238 <usb_d_ep_register_callback+0x44>)
    5200:	2c00      	cmp	r4, #0
    5202:	bf08      	it	eq
    5204:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    5206:	2800      	cmp	r0, #0
    5208:	db13      	blt.n	5232 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    520a:	2d01      	cmp	r5, #1
    520c:	d008      	beq.n	5220 <usb_d_ep_register_callback+0x2c>
    520e:	b115      	cbz	r5, 5216 <usb_d_ep_register_callback+0x22>
    5210:	2d02      	cmp	r5, #2
    5212:	d00a      	beq.n	522a <usb_d_ep_register_callback+0x36>
    5214:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5216:	4b09      	ldr	r3, [pc, #36]	; (523c <usb_d_ep_register_callback+0x48>)
    5218:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    521c:	6144      	str	r4, [r0, #20]
		break;
    521e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5220:	4b06      	ldr	r3, [pc, #24]	; (523c <usb_d_ep_register_callback+0x48>)
    5222:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5226:	6184      	str	r4, [r0, #24]
		break;
    5228:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    522a:	4b04      	ldr	r3, [pc, #16]	; (523c <usb_d_ep_register_callback+0x48>)
    522c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5230:	61c4      	str	r4, [r0, #28]
    5232:	bd38      	pop	{r3, r4, r5, pc}
    5234:	00004ca1 	.word	0x00004ca1
    5238:	00004ce5 	.word	0x00004ce5
    523c:	20000a60 	.word	0x20000a60

00005240 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5240:	b900      	cbnz	r0, 5244 <assert+0x4>
		__asm("BKPT #0");
    5242:	be00      	bkpt	0x0000
    5244:	4770      	bx	lr

00005246 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5246:	6803      	ldr	r3, [r0, #0]
    5248:	b14b      	cbz	r3, 525e <is_list_element+0x18>
		if (it == element) {
    524a:	428b      	cmp	r3, r1
    524c:	d009      	beq.n	5262 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    524e:	681b      	ldr	r3, [r3, #0]
    5250:	b11b      	cbz	r3, 525a <is_list_element+0x14>
		if (it == element) {
    5252:	4299      	cmp	r1, r3
    5254:	d1fb      	bne.n	524e <is_list_element+0x8>
			return true;
    5256:	2001      	movs	r0, #1
		}
	}

	return false;
}
    5258:	4770      	bx	lr
	return false;
    525a:	2000      	movs	r0, #0
    525c:	4770      	bx	lr
    525e:	2000      	movs	r0, #0
    5260:	4770      	bx	lr
			return true;
    5262:	2001      	movs	r0, #1
    5264:	4770      	bx	lr
	...

00005268 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5268:	b538      	push	{r3, r4, r5, lr}
    526a:	4604      	mov	r4, r0
    526c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    526e:	4b06      	ldr	r3, [pc, #24]	; (5288 <list_insert_as_head+0x20>)
    5270:	4798      	blx	r3
    5272:	f080 0001 	eor.w	r0, r0, #1
    5276:	2239      	movs	r2, #57	; 0x39
    5278:	4904      	ldr	r1, [pc, #16]	; (528c <list_insert_as_head+0x24>)
    527a:	b2c0      	uxtb	r0, r0
    527c:	4b04      	ldr	r3, [pc, #16]	; (5290 <list_insert_as_head+0x28>)
    527e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5280:	6823      	ldr	r3, [r4, #0]
    5282:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    5284:	6025      	str	r5, [r4, #0]
    5286:	bd38      	pop	{r3, r4, r5, pc}
    5288:	00005247 	.word	0x00005247
    528c:	0000bb2c 	.word	0x0000bb2c
    5290:	00005241 	.word	0x00005241

00005294 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5294:	6803      	ldr	r3, [r0, #0]
    5296:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5298:	6001      	str	r1, [r0, #0]
    529a:	4770      	bx	lr

0000529c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    529c:	b570      	push	{r4, r5, r6, lr}
    529e:	4605      	mov	r5, r0
    52a0:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    52a2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    52a4:	4b0a      	ldr	r3, [pc, #40]	; (52d0 <list_insert_at_end+0x34>)
    52a6:	4798      	blx	r3
    52a8:	f080 0001 	eor.w	r0, r0, #1
    52ac:	224f      	movs	r2, #79	; 0x4f
    52ae:	4909      	ldr	r1, [pc, #36]	; (52d4 <list_insert_at_end+0x38>)
    52b0:	b2c0      	uxtb	r0, r0
    52b2:	4b09      	ldr	r3, [pc, #36]	; (52d8 <list_insert_at_end+0x3c>)
    52b4:	4798      	blx	r3

	if (!list->head) {
    52b6:	682b      	ldr	r3, [r5, #0]
    52b8:	b91b      	cbnz	r3, 52c2 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    52ba:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    52bc:	6033      	str	r3, [r6, #0]
		return;
    52be:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    52c0:	461c      	mov	r4, r3
	while (it->next) {
    52c2:	6823      	ldr	r3, [r4, #0]
    52c4:	2b00      	cmp	r3, #0
    52c6:	d1fb      	bne.n	52c0 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    52c8:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    52ca:	6033      	str	r3, [r6, #0]
    52cc:	bd70      	pop	{r4, r5, r6, pc}
    52ce:	bf00      	nop
    52d0:	00005247 	.word	0x00005247
    52d4:	0000bb2c 	.word	0x0000bb2c
    52d8:	00005241 	.word	0x00005241

000052dc <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    52dc:	6803      	ldr	r3, [r0, #0]
    52de:	b10b      	cbz	r3, 52e4 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    52e0:	681a      	ldr	r2, [r3, #0]
    52e2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    52e4:	4618      	mov	r0, r3
    52e6:	4770      	bx	lr

000052e8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    52e8:	b570      	push	{r4, r5, r6, lr}
    52ea:	460e      	mov	r6, r1
    52ec:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    52ee:	4604      	mov	r4, r0
    52f0:	b178      	cbz	r0, 5312 <ringbuffer_init+0x2a>
    52f2:	b181      	cbz	r1, 5316 <ringbuffer_init+0x2e>
    52f4:	b1a2      	cbz	r2, 5320 <ringbuffer_init+0x38>
    52f6:	2001      	movs	r0, #1
    52f8:	2228      	movs	r2, #40	; 0x28
    52fa:	490d      	ldr	r1, [pc, #52]	; (5330 <ringbuffer_init+0x48>)
    52fc:	4b0d      	ldr	r3, [pc, #52]	; (5334 <ringbuffer_init+0x4c>)
    52fe:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    5300:	1e6b      	subs	r3, r5, #1
    5302:	421d      	tst	r5, r3
    5304:	d109      	bne.n	531a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    5306:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    5308:	2000      	movs	r0, #0
    530a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    530c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    530e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    5310:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5312:	2000      	movs	r0, #0
    5314:	e7f0      	b.n	52f8 <ringbuffer_init+0x10>
    5316:	2000      	movs	r0, #0
    5318:	e7ee      	b.n	52f8 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    531a:	f06f 000c 	mvn.w	r0, #12
    531e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5320:	2228      	movs	r2, #40	; 0x28
    5322:	4903      	ldr	r1, [pc, #12]	; (5330 <ringbuffer_init+0x48>)
    5324:	2000      	movs	r0, #0
    5326:	4b03      	ldr	r3, [pc, #12]	; (5334 <ringbuffer_init+0x4c>)
    5328:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    532a:	1e6b      	subs	r3, r5, #1
    532c:	e7eb      	b.n	5306 <ringbuffer_init+0x1e>
    532e:	bf00      	nop
    5330:	0000bb4c 	.word	0x0000bb4c
    5334:	00005241 	.word	0x00005241

00005338 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    5338:	b538      	push	{r3, r4, r5, lr}
    533a:	460d      	mov	r5, r1
	ASSERT(rb && data);
    533c:	4604      	mov	r4, r0
    533e:	b1a0      	cbz	r0, 536a <ringbuffer_get+0x32>
    5340:	1c08      	adds	r0, r1, #0
    5342:	bf18      	it	ne
    5344:	2001      	movne	r0, #1
    5346:	2240      	movs	r2, #64	; 0x40
    5348:	490a      	ldr	r1, [pc, #40]	; (5374 <ringbuffer_get+0x3c>)
    534a:	4b0b      	ldr	r3, [pc, #44]	; (5378 <ringbuffer_get+0x40>)
    534c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    534e:	68a3      	ldr	r3, [r4, #8]
    5350:	68e2      	ldr	r2, [r4, #12]
    5352:	429a      	cmp	r2, r3
    5354:	d00b      	beq.n	536e <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    5356:	6862      	ldr	r2, [r4, #4]
    5358:	4013      	ands	r3, r2
    535a:	6822      	ldr	r2, [r4, #0]
    535c:	5cd3      	ldrb	r3, [r2, r3]
    535e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5360:	68a3      	ldr	r3, [r4, #8]
    5362:	3301      	adds	r3, #1
    5364:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    5366:	2000      	movs	r0, #0
    5368:	bd38      	pop	{r3, r4, r5, pc}
    536a:	2000      	movs	r0, #0
    536c:	e7eb      	b.n	5346 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    536e:	f06f 0009 	mvn.w	r0, #9
}
    5372:	bd38      	pop	{r3, r4, r5, pc}
    5374:	0000bb4c 	.word	0x0000bb4c
    5378:	00005241 	.word	0x00005241

0000537c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    537c:	b538      	push	{r3, r4, r5, lr}
    537e:	460d      	mov	r5, r1
	ASSERT(rb);
    5380:	4604      	mov	r4, r0
    5382:	2251      	movs	r2, #81	; 0x51
    5384:	490b      	ldr	r1, [pc, #44]	; (53b4 <ringbuffer_put+0x38>)
    5386:	3000      	adds	r0, #0
    5388:	bf18      	it	ne
    538a:	2001      	movne	r0, #1
    538c:	4b0a      	ldr	r3, [pc, #40]	; (53b8 <ringbuffer_put+0x3c>)
    538e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    5390:	68e3      	ldr	r3, [r4, #12]
    5392:	6862      	ldr	r2, [r4, #4]
    5394:	4013      	ands	r3, r2
    5396:	6822      	ldr	r2, [r4, #0]
    5398:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    539a:	68e3      	ldr	r3, [r4, #12]
    539c:	6861      	ldr	r1, [r4, #4]
    539e:	68a2      	ldr	r2, [r4, #8]
    53a0:	1a9a      	subs	r2, r3, r2
    53a2:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    53a4:	bf84      	itt	hi
    53a6:	1a59      	subhi	r1, r3, r1
    53a8:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    53aa:	3301      	adds	r3, #1
    53ac:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    53ae:	2000      	movs	r0, #0
    53b0:	bd38      	pop	{r3, r4, r5, pc}
    53b2:	bf00      	nop
    53b4:	0000bb4c 	.word	0x0000bb4c
    53b8:	00005241 	.word	0x00005241

000053bc <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    53bc:	b510      	push	{r4, lr}
	ASSERT(rb);
    53be:	4604      	mov	r4, r0
    53c0:	2267      	movs	r2, #103	; 0x67
    53c2:	4905      	ldr	r1, [pc, #20]	; (53d8 <ringbuffer_num+0x1c>)
    53c4:	3000      	adds	r0, #0
    53c6:	bf18      	it	ne
    53c8:	2001      	movne	r0, #1
    53ca:	4b04      	ldr	r3, [pc, #16]	; (53dc <ringbuffer_num+0x20>)
    53cc:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    53ce:	68e0      	ldr	r0, [r4, #12]
    53d0:	68a3      	ldr	r3, [r4, #8]
}
    53d2:	1ac0      	subs	r0, r0, r3
    53d4:	bd10      	pop	{r4, pc}
    53d6:	bf00      	nop
    53d8:	0000bb4c 	.word	0x0000bb4c
    53dc:	00005241 	.word	0x00005241

000053e0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    53e0:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    53e2:	4a06      	ldr	r2, [pc, #24]	; (53fc <_sbrk+0x1c>)
    53e4:	6812      	ldr	r2, [r2, #0]
    53e6:	b122      	cbz	r2, 53f2 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    53e8:	4a04      	ldr	r2, [pc, #16]	; (53fc <_sbrk+0x1c>)
    53ea:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    53ec:	4403      	add	r3, r0
    53ee:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    53f0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    53f2:	4903      	ldr	r1, [pc, #12]	; (5400 <_sbrk+0x20>)
    53f4:	4a01      	ldr	r2, [pc, #4]	; (53fc <_sbrk+0x1c>)
    53f6:	6011      	str	r1, [r2, #0]
    53f8:	e7f6      	b.n	53e8 <_sbrk+0x8>
    53fa:	bf00      	nop
    53fc:	20000c00 	.word	0x20000c00
    5400:	20012c38 	.word	0x20012c38

00005404 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5404:	6940      	ldr	r0, [r0, #20]
    5406:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    540a:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    540e:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    5410:	0040      	lsls	r0, r0, #1
    5412:	3076      	adds	r0, #118	; 0x76
}
    5414:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    5418:	4770      	bx	lr
	...

0000541c <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    541c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    541e:	f013 0f01 	tst.w	r3, #1
    5422:	d11b      	bne.n	545c <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5424:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5426:	f013 0f03 	tst.w	r3, #3
    542a:	d1fb      	bne.n	5424 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    542c:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    542e:	f013 0f02 	tst.w	r3, #2
    5432:	d00d      	beq.n	5450 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    5434:	8803      	ldrh	r3, [r0, #0]
    5436:	f023 0302 	bic.w	r3, r3, #2
    543a:	041b      	lsls	r3, r3, #16
    543c:	0c1b      	lsrs	r3, r3, #16
    543e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5440:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5442:	f013 0f03 	tst.w	r3, #3
    5446:	d1fb      	bne.n	5440 <_adc_init+0x24>
    5448:	6b03      	ldr	r3, [r0, #48]	; 0x30
    544a:	f013 0f02 	tst.w	r3, #2
    544e:	d1fb      	bne.n	5448 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    5450:	2301      	movs	r3, #1
    5452:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5454:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5456:	f013 0f03 	tst.w	r3, #3
    545a:	d1fb      	bne.n	5454 <_adc_init+0x38>
    545c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    545e:	f013 0f01 	tst.w	r3, #1
    5462:	d1fb      	bne.n	545c <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    5464:	2316      	movs	r3, #22
    5466:	4a37      	ldr	r2, [pc, #220]	; (5544 <_adc_init+0x128>)
    5468:	fb03 2301 	mla	r3, r3, r1, r2
    546c:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    546e:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5470:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5472:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5476:	2b00      	cmp	r3, #0
    5478:	d1fa      	bne.n	5470 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    547a:	2316      	movs	r3, #22
    547c:	4a31      	ldr	r2, [pc, #196]	; (5544 <_adc_init+0x128>)
    547e:	fb03 2301 	mla	r3, r3, r1, r2
    5482:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    5484:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5486:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5488:	f3c3 030b 	ubfx	r3, r3, #0, #12
    548c:	2b00      	cmp	r3, #0
    548e:	d1fa      	bne.n	5486 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    5490:	2316      	movs	r3, #22
    5492:	4a2c      	ldr	r2, [pc, #176]	; (5544 <_adc_init+0x128>)
    5494:	fb03 2301 	mla	r3, r3, r1, r2
    5498:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    549a:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    549c:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    549e:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54a6:	2b00      	cmp	r3, #0
    54a8:	d1fa      	bne.n	54a0 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    54aa:	2316      	movs	r3, #22
    54ac:	4a25      	ldr	r2, [pc, #148]	; (5544 <_adc_init+0x128>)
    54ae:	fb03 2301 	mla	r3, r3, r1, r2
    54b2:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    54b4:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54bc:	2b00      	cmp	r3, #0
    54be:	d1fa      	bne.n	54b6 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    54c0:	2316      	movs	r3, #22
    54c2:	4a20      	ldr	r2, [pc, #128]	; (5544 <_adc_init+0x128>)
    54c4:	fb03 2301 	mla	r3, r3, r1, r2
    54c8:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    54ca:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54d2:	2b00      	cmp	r3, #0
    54d4:	d1fa      	bne.n	54cc <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    54d6:	2316      	movs	r3, #22
    54d8:	4a1a      	ldr	r2, [pc, #104]	; (5544 <_adc_init+0x128>)
    54da:	fb03 2301 	mla	r3, r3, r1, r2
    54de:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    54e0:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54e4:	f013 0f80 	tst.w	r3, #128	; 0x80
    54e8:	d1fb      	bne.n	54e2 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    54ea:	2316      	movs	r3, #22
    54ec:	4a15      	ldr	r2, [pc, #84]	; (5544 <_adc_init+0x128>)
    54ee:	fb03 2301 	mla	r3, r3, r1, r2
    54f2:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    54f4:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    54fc:	d1fb      	bne.n	54f6 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    54fe:	2316      	movs	r3, #22
    5500:	4a10      	ldr	r2, [pc, #64]	; (5544 <_adc_init+0x128>)
    5502:	fb03 2301 	mla	r3, r3, r1, r2
    5506:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    5508:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    550a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    550c:	f413 7f00 	tst.w	r3, #512	; 0x200
    5510:	d1fb      	bne.n	550a <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    5512:	2316      	movs	r3, #22
    5514:	4a0b      	ldr	r2, [pc, #44]	; (5544 <_adc_init+0x128>)
    5516:	fb03 2301 	mla	r3, r3, r1, r2
    551a:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    551c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    551e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5520:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5524:	d1fb      	bne.n	551e <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    5526:	2216      	movs	r2, #22
    5528:	4b06      	ldr	r3, [pc, #24]	; (5544 <_adc_init+0x128>)
    552a:	fb02 3101 	mla	r1, r2, r1, r3
    552e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    5530:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    5532:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    5534:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5536:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5538:	f013 0f03 	tst.w	r3, #3
    553c:	d1fb      	bne.n	5536 <_adc_init+0x11a>

	return ERR_NONE;
}
    553e:	2000      	movs	r0, #0
    5540:	4770      	bx	lr
    5542:	bf00      	nop
    5544:	0000bb70 	.word	0x0000bb70

00005548 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    5548:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    554a:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    554c:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    5550:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    5554:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    5556:	f013 0f01 	tst.w	r3, #1
    555a:	d106      	bne.n	556a <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    555c:	f013 0f02 	tst.w	r3, #2
    5560:	d10d      	bne.n	557e <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    5562:	f013 0f04 	tst.w	r3, #4
    5566:	d111      	bne.n	558c <_adc_interrupt_handler+0x44>
    5568:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    556a:	2301      	movs	r3, #1
    556c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    5570:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    5574:	6883      	ldr	r3, [r0, #8]
    5576:	b292      	uxth	r2, r2
    5578:	2100      	movs	r1, #0
    557a:	4798      	blx	r3
    557c:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    557e:	2302      	movs	r3, #2
    5580:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    5584:	6843      	ldr	r3, [r0, #4]
    5586:	2100      	movs	r1, #0
    5588:	4798      	blx	r3
    558a:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    558c:	2304      	movs	r3, #4
    558e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    5592:	6803      	ldr	r3, [r0, #0]
    5594:	2100      	movs	r1, #0
    5596:	4798      	blx	r3
	}
}
    5598:	e7e6      	b.n	5568 <_adc_interrupt_handler+0x20>
	...

0000559c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    559c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    55a0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    55a4:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    55a8:	b148      	cbz	r0, 55be <_adc_get_regs+0x22>
    55aa:	2801      	cmp	r0, #1
    55ac:	d009      	beq.n	55c2 <_adc_get_regs+0x26>
{
    55ae:	b508      	push	{r3, lr}
	ASSERT(false);
    55b0:	228c      	movs	r2, #140	; 0x8c
    55b2:	4905      	ldr	r1, [pc, #20]	; (55c8 <_adc_get_regs+0x2c>)
    55b4:	2000      	movs	r0, #0
    55b6:	4b05      	ldr	r3, [pc, #20]	; (55cc <_adc_get_regs+0x30>)
    55b8:	4798      	blx	r3
	return 0;
    55ba:	2000      	movs	r0, #0
    55bc:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    55be:	2000      	movs	r0, #0
    55c0:	4770      	bx	lr
    55c2:	2001      	movs	r0, #1
    55c4:	4770      	bx	lr
    55c6:	bf00      	nop
    55c8:	0000bb9c 	.word	0x0000bb9c
    55cc:	00005241 	.word	0x00005241

000055d0 <_adc_async_init>:
{
    55d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55d4:	460c      	mov	r4, r1
	ASSERT(device);
    55d6:	4605      	mov	r5, r0
    55d8:	22e6      	movs	r2, #230	; 0xe6
    55da:	493b      	ldr	r1, [pc, #236]	; (56c8 <_adc_async_init+0xf8>)
    55dc:	3000      	adds	r0, #0
    55de:	bf18      	it	ne
    55e0:	2001      	movne	r0, #1
    55e2:	4b3a      	ldr	r3, [pc, #232]	; (56cc <_adc_async_init+0xfc>)
    55e4:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    55e6:	4620      	mov	r0, r4
    55e8:	4b39      	ldr	r3, [pc, #228]	; (56d0 <_adc_async_init+0x100>)
    55ea:	4798      	blx	r3
    55ec:	4601      	mov	r1, r0
    55ee:	4620      	mov	r0, r4
    55f0:	4b38      	ldr	r3, [pc, #224]	; (56d4 <_adc_async_init+0x104>)
    55f2:	4798      	blx	r3
	if (init_status) {
    55f4:	4606      	mov	r6, r0
    55f6:	b110      	cbz	r0, 55fe <_adc_async_init+0x2e>
}
    55f8:	4630      	mov	r0, r6
    55fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    55fe:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    5600:	4b35      	ldr	r3, [pc, #212]	; (56d8 <_adc_async_init+0x108>)
    5602:	429c      	cmp	r4, r3
    5604:	d05c      	beq.n	56c0 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    5606:	4b35      	ldr	r3, [pc, #212]	; (56dc <_adc_async_init+0x10c>)
    5608:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    560a:	bf04      	itt	eq
    560c:	4b34      	ldreq	r3, [pc, #208]	; (56e0 <_adc_async_init+0x110>)
    560e:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    5610:	4628      	mov	r0, r5
    5612:	4f34      	ldr	r7, [pc, #208]	; (56e4 <_adc_async_init+0x114>)
    5614:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5616:	0943      	lsrs	r3, r0, #5
    5618:	f000 001f 	and.w	r0, r0, #31
    561c:	2401      	movs	r4, #1
    561e:	fa04 f000 	lsl.w	r0, r4, r0
    5622:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 56e8 <_adc_async_init+0x118>
    5626:	3320      	adds	r3, #32
    5628:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    562c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5630:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    5634:	4628      	mov	r0, r5
    5636:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5638:	0943      	lsrs	r3, r0, #5
    563a:	f000 001f 	and.w	r0, r0, #31
    563e:	fa04 f000 	lsl.w	r0, r4, r0
    5642:	3360      	adds	r3, #96	; 0x60
    5644:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    5648:	4628      	mov	r0, r5
    564a:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    564c:	0943      	lsrs	r3, r0, #5
    564e:	f000 001f 	and.w	r0, r0, #31
    5652:	4084      	lsls	r4, r0
    5654:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    5658:	4628      	mov	r0, r5
    565a:	47b8      	blx	r7
    565c:	3001      	adds	r0, #1
    565e:	b280      	uxth	r0, r0
    5660:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5662:	2b00      	cmp	r3, #0
    5664:	dbc8      	blt.n	55f8 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5666:	095b      	lsrs	r3, r3, #5
    5668:	f000 001f 	and.w	r0, r0, #31
    566c:	2201      	movs	r2, #1
    566e:	fa02 f000 	lsl.w	r0, r2, r0
    5672:	3320      	adds	r3, #32
    5674:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5678:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    567c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    5680:	4628      	mov	r0, r5
    5682:	47b8      	blx	r7
    5684:	3001      	adds	r0, #1
    5686:	b280      	uxth	r0, r0
    5688:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    568a:	2b00      	cmp	r3, #0
    568c:	dbb4      	blt.n	55f8 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    568e:	095b      	lsrs	r3, r3, #5
    5690:	f000 001f 	and.w	r0, r0, #31
    5694:	2201      	movs	r2, #1
    5696:	fa02 f000 	lsl.w	r0, r2, r0
    569a:	3360      	adds	r3, #96	; 0x60
    569c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    56a0:	4628      	mov	r0, r5
    56a2:	47b8      	blx	r7
    56a4:	3001      	adds	r0, #1
    56a6:	b280      	uxth	r0, r0
    56a8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    56aa:	2b00      	cmp	r3, #0
    56ac:	dba4      	blt.n	55f8 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    56ae:	095b      	lsrs	r3, r3, #5
    56b0:	f000 001f 	and.w	r0, r0, #31
    56b4:	2201      	movs	r2, #1
    56b6:	fa02 f000 	lsl.w	r0, r2, r0
    56ba:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    56be:	e79b      	b.n	55f8 <_adc_async_init+0x28>
		_adc0_dev = dev;
    56c0:	4b07      	ldr	r3, [pc, #28]	; (56e0 <_adc_async_init+0x110>)
    56c2:	601d      	str	r5, [r3, #0]
    56c4:	e7a4      	b.n	5610 <_adc_async_init+0x40>
    56c6:	bf00      	nop
    56c8:	0000bb9c 	.word	0x0000bb9c
    56cc:	00005241 	.word	0x00005241
    56d0:	0000559d 	.word	0x0000559d
    56d4:	0000541d 	.word	0x0000541d
    56d8:	43001c00 	.word	0x43001c00
    56dc:	43002000 	.word	0x43002000
    56e0:	20000c04 	.word	0x20000c04
    56e4:	00005405 	.word	0x00005405
    56e8:	e000e100 	.word	0xe000e100

000056ec <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    56ec:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    56ee:	8813      	ldrh	r3, [r2, #0]
    56f0:	b29b      	uxth	r3, r3
    56f2:	f043 0302 	orr.w	r3, r3, #2
    56f6:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    56f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    56fa:	f013 0f03 	tst.w	r3, #3
    56fe:	d1fb      	bne.n	56f8 <_adc_async_enable_channel+0xc>
}
    5700:	4770      	bx	lr

00005702 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    5702:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    5704:	88db      	ldrh	r3, [r3, #6]
    5706:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    570a:	2b03      	cmp	r3, #3
}
    570c:	bf0c      	ite	eq
    570e:	2001      	moveq	r0, #1
    5710:	2002      	movne	r0, #2
    5712:	4770      	bx	lr

00005714 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    5714:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    5716:	7d13      	ldrb	r3, [r2, #20]
    5718:	f043 0302 	orr.w	r3, r3, #2
    571c:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    571e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5720:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5724:	2b00      	cmp	r3, #0
    5726:	d1fa      	bne.n	571e <_adc_async_convert+0xa>
}
    5728:	4770      	bx	lr

0000572a <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    572a:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    572c:	2a01      	cmp	r2, #1
    572e:	d007      	beq.n	5740 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    5730:	2a02      	cmp	r2, #2
    5732:	d00e      	beq.n	5752 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    5734:	b91a      	cbnz	r2, 573e <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    5736:	b1ab      	cbz	r3, 5764 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    5738:	2301      	movs	r3, #1
    573a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    573e:	4770      	bx	lr
	if (value == 0x0) {
    5740:	b91b      	cbnz	r3, 574a <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    5742:	2304      	movs	r3, #4
    5744:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5748:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    574a:	2304      	movs	r3, #4
    574c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5750:	4770      	bx	lr
	if (value == 0x0) {
    5752:	b91b      	cbnz	r3, 575c <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    5754:	2302      	movs	r3, #2
    5756:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    575a:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    575c:	2302      	movs	r3, #2
    575e:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5762:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    5764:	2301      	movs	r3, #1
    5766:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    576a:	4770      	bx	lr

0000576c <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    576c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    576e:	4b02      	ldr	r3, [pc, #8]	; (5778 <ADC0_0_Handler+0xc>)
    5770:	6818      	ldr	r0, [r3, #0]
    5772:	4b02      	ldr	r3, [pc, #8]	; (577c <ADC0_0_Handler+0x10>)
    5774:	4798      	blx	r3
    5776:	bd08      	pop	{r3, pc}
    5778:	20000c04 	.word	0x20000c04
    577c:	00005549 	.word	0x00005549

00005780 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    5780:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5782:	4b02      	ldr	r3, [pc, #8]	; (578c <ADC0_1_Handler+0xc>)
    5784:	6818      	ldr	r0, [r3, #0]
    5786:	4b02      	ldr	r3, [pc, #8]	; (5790 <ADC0_1_Handler+0x10>)
    5788:	4798      	blx	r3
    578a:	bd08      	pop	{r3, pc}
    578c:	20000c04 	.word	0x20000c04
    5790:	00005549 	.word	0x00005549

00005794 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    5794:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5796:	4b02      	ldr	r3, [pc, #8]	; (57a0 <ADC1_0_Handler+0xc>)
    5798:	6858      	ldr	r0, [r3, #4]
    579a:	4b02      	ldr	r3, [pc, #8]	; (57a4 <ADC1_0_Handler+0x10>)
    579c:	4798      	blx	r3
    579e:	bd08      	pop	{r3, pc}
    57a0:	20000c04 	.word	0x20000c04
    57a4:	00005549 	.word	0x00005549

000057a8 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    57a8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    57aa:	4b02      	ldr	r3, [pc, #8]	; (57b4 <ADC1_1_Handler+0xc>)
    57ac:	6858      	ldr	r0, [r3, #4]
    57ae:	4b02      	ldr	r3, [pc, #8]	; (57b8 <ADC1_1_Handler+0x10>)
    57b0:	4798      	blx	r3
    57b2:	bd08      	pop	{r3, pc}
    57b4:	20000c04 	.word	0x20000c04
    57b8:	00005549 	.word	0x00005549

000057bc <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57bc:	0943      	lsrs	r3, r0, #5
    57be:	f000 001f 	and.w	r0, r0, #31
    57c2:	2201      	movs	r2, #1
    57c4:	fa02 f000 	lsl.w	r0, r2, r0
    57c8:	3340      	adds	r3, #64	; 0x40
    57ca:	4a02      	ldr	r2, [pc, #8]	; (57d4 <_irq_set+0x18>)
    57cc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    57d0:	4770      	bx	lr
    57d2:	bf00      	nop
    57d4:	e000e100 	.word	0xe000e100

000057d8 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    57d8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    57dc:	00c0      	lsls	r0, r0, #3
    57de:	4770      	bx	lr

000057e0 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    57e0:	4b01      	ldr	r3, [pc, #4]	; (57e8 <_get_cycles_for_ms+0x8>)
    57e2:	fb03 f000 	mul.w	r0, r3, r0
    57e6:	4770      	bx	lr
    57e8:	0001d4c0 	.word	0x0001d4c0

000057ec <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    57ec:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    57ee:	4a0e      	ldr	r2, [pc, #56]	; (5828 <_init_chip+0x3c>)
    57f0:	8813      	ldrh	r3, [r2, #0]
    57f2:	b29b      	uxth	r3, r3
    57f4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    57f8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    57fa:	4b0c      	ldr	r3, [pc, #48]	; (582c <_init_chip+0x40>)
    57fc:	4798      	blx	r3
	_oscctrl_init_sources();
    57fe:	4b0c      	ldr	r3, [pc, #48]	; (5830 <_init_chip+0x44>)
    5800:	4798      	blx	r3
	_mclk_init();
    5802:	4b0c      	ldr	r3, [pc, #48]	; (5834 <_init_chip+0x48>)
    5804:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5806:	2004      	movs	r0, #4
    5808:	4c0b      	ldr	r4, [pc, #44]	; (5838 <_init_chip+0x4c>)
    580a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    580c:	4b0b      	ldr	r3, [pc, #44]	; (583c <_init_chip+0x50>)
    580e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5810:	f640 70fb 	movw	r0, #4091	; 0xffb
    5814:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    5816:	4a0a      	ldr	r2, [pc, #40]	; (5840 <_init_chip+0x54>)
    5818:	6913      	ldr	r3, [r2, #16]
    581a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    581e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    5820:	4b08      	ldr	r3, [pc, #32]	; (5844 <_init_chip+0x58>)
    5822:	4798      	blx	r3
    5824:	bd10      	pop	{r4, pc}
    5826:	bf00      	nop
    5828:	41004000 	.word	0x41004000
    582c:	00005cc9 	.word	0x00005cc9
    5830:	00005cdd 	.word	0x00005cdd
    5834:	00005bf1 	.word	0x00005bf1
    5838:	00005b79 	.word	0x00005b79
    583c:	00005ce1 	.word	0x00005ce1
    5840:	40000800 	.word	0x40000800
    5844:	000058bd 	.word	0x000058bd

00005848 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    5848:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    584a:	4a1a      	ldr	r2, [pc, #104]	; (58b4 <_dmac_handler+0x6c>)
    584c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    584e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    5852:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    5856:	4818      	ldr	r0, [pc, #96]	; (58b8 <_dmac_handler+0x70>)
    5858:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    585c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5860:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    5864:	f012 0f01 	tst.w	r2, #1
    5868:	d10a      	bne.n	5880 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    586a:	011a      	lsls	r2, r3, #4
    586c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5870:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5874:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    5878:	f012 0f02 	tst.w	r2, #2
    587c:	d10b      	bne.n	5896 <_dmac_handler+0x4e>
    587e:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    5880:	011a      	lsls	r2, r3, #4
    5882:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5886:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    588a:	2101      	movs	r1, #1
    588c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    5890:	6843      	ldr	r3, [r0, #4]
    5892:	4798      	blx	r3
    5894:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    5896:	011a      	lsls	r2, r3, #4
    5898:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    589c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    58a0:	2102      	movs	r1, #2
    58a2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    58a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    58aa:	4a03      	ldr	r2, [pc, #12]	; (58b8 <_dmac_handler+0x70>)
    58ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58b0:	4798      	blx	r3
	}
}
    58b2:	e7e4      	b.n	587e <_dmac_handler+0x36>
    58b4:	4100a000 	.word	0x4100a000
    58b8:	20000c0c 	.word	0x20000c0c

000058bc <_dma_init>:
{
    58bc:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    58be:	4a32      	ldr	r2, [pc, #200]	; (5988 <_dma_init+0xcc>)
    58c0:	8813      	ldrh	r3, [r2, #0]
    58c2:	f023 0302 	bic.w	r3, r3, #2
    58c6:	041b      	lsls	r3, r3, #16
    58c8:	0c1b      	lsrs	r3, r3, #16
    58ca:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    58cc:	8853      	ldrh	r3, [r2, #2]
    58ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    58d2:	041b      	lsls	r3, r3, #16
    58d4:	0c1b      	lsrs	r3, r3, #16
    58d6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    58d8:	8813      	ldrh	r3, [r2, #0]
    58da:	b29b      	uxth	r3, r3
    58dc:	f043 0301 	orr.w	r3, r3, #1
    58e0:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    58e2:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    58e4:	f013 0f01 	tst.w	r3, #1
    58e8:	d1fb      	bne.n	58e2 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    58ea:	4b27      	ldr	r3, [pc, #156]	; (5988 <_dma_init+0xcc>)
    58ec:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    58f0:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    58f2:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    58f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    58f8:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    58fc:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    58fe:	2100      	movs	r1, #0
    5900:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    5902:	4a22      	ldr	r2, [pc, #136]	; (598c <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    5904:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    5906:	4a22      	ldr	r2, [pc, #136]	; (5990 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    5908:	639a      	str	r2, [r3, #56]	; 0x38
    590a:	4b22      	ldr	r3, [pc, #136]	; (5994 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    590c:	4c1f      	ldr	r4, [pc, #124]	; (598c <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    590e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    5910:	681d      	ldr	r5, [r3, #0]
    5912:	0108      	lsls	r0, r1, #4
    5914:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    5918:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    591c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    591e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    5920:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    5924:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    5926:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    592a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    592c:	1822      	adds	r2, r4, r0
    592e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    5930:	60d6      	str	r6, [r2, #12]
    5932:	3101      	adds	r1, #1
    5934:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    5936:	2920      	cmp	r1, #32
    5938:	d1ea      	bne.n	5910 <_dma_init+0x54>
    593a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    593c:	2001      	movs	r0, #1
    593e:	4916      	ldr	r1, [pc, #88]	; (5998 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    5940:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    5942:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5946:	d00b      	beq.n	5960 <_dma_init+0xa4>
    5948:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    594a:	2b24      	cmp	r3, #36	; 0x24
    594c:	d1f8      	bne.n	5940 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    594e:	4a0e      	ldr	r2, [pc, #56]	; (5988 <_dma_init+0xcc>)
    5950:	8813      	ldrh	r3, [r2, #0]
    5952:	b29b      	uxth	r3, r3
    5954:	f043 0302 	orr.w	r3, r3, #2
    5958:	8013      	strh	r3, [r2, #0]
}
    595a:	2000      	movs	r0, #0
    595c:	bc70      	pop	{r4, r5, r6}
    595e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5960:	095c      	lsrs	r4, r3, #5
    5962:	f002 021f 	and.w	r2, r2, #31
    5966:	fa00 f202 	lsl.w	r2, r0, r2
    596a:	f104 0520 	add.w	r5, r4, #32
    596e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5972:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5976:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    597a:	f104 0560 	add.w	r5, r4, #96	; 0x60
    597e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5982:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    5986:	e7df      	b.n	5948 <_dma_init+0x8c>
    5988:	4100a000 	.word	0x4100a000
    598c:	20002810 	.word	0x20002810
    5990:	20002a10 	.word	0x20002a10
    5994:	0000bbb4 	.word	0x0000bbb4
    5998:	e000e100 	.word	0xe000e100

0000599c <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    599c:	b991      	cbnz	r1, 59c4 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    599e:	b942      	cbnz	r2, 59b2 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    59a0:	0100      	lsls	r0, r0, #4
    59a2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    59a6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    59aa:	2302      	movs	r3, #2
    59ac:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    59b0:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    59b2:	0100      	lsls	r0, r0, #4
    59b4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    59b8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    59bc:	2302      	movs	r3, #2
    59be:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    59c2:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    59c4:	2901      	cmp	r1, #1
    59c6:	d000      	beq.n	59ca <_dma_set_irq_state+0x2e>
    59c8:	4770      	bx	lr
	if (value == 0x0) {
    59ca:	b142      	cbz	r2, 59de <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    59cc:	0100      	lsls	r0, r0, #4
    59ce:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    59d2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    59d6:	2301      	movs	r3, #1
    59d8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    59dc:	e7f4      	b.n	59c8 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    59de:	0100      	lsls	r0, r0, #4
    59e0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    59e4:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    59e8:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    59ec:	4770      	bx	lr
	...

000059f0 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    59f0:	4b02      	ldr	r3, [pc, #8]	; (59fc <_dma_set_destination_address+0xc>)
    59f2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    59f6:	6081      	str	r1, [r0, #8]
}
    59f8:	2000      	movs	r0, #0
    59fa:	4770      	bx	lr
    59fc:	20002810 	.word	0x20002810

00005a00 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    5a00:	4b02      	ldr	r3, [pc, #8]	; (5a0c <_dma_set_source_address+0xc>)
    5a02:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5a06:	6041      	str	r1, [r0, #4]
}
    5a08:	2000      	movs	r0, #0
    5a0a:	4770      	bx	lr
    5a0c:	20002810 	.word	0x20002810

00005a10 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a10:	4a05      	ldr	r2, [pc, #20]	; (5a28 <_dma_srcinc_enable+0x18>)
    5a12:	0100      	lsls	r0, r0, #4
    5a14:	5a13      	ldrh	r3, [r2, r0]
    5a16:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    5a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    5a1c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    5a20:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    5a22:	5211      	strh	r1, [r2, r0]
}
    5a24:	2000      	movs	r0, #0
    5a26:	4770      	bx	lr
    5a28:	20002810 	.word	0x20002810

00005a2c <_dma_set_data_amount>:
{
    5a2c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    5a2e:	4c14      	ldr	r4, [pc, #80]	; (5a80 <_dma_set_data_amount+0x54>)
    5a30:	0102      	lsls	r2, r0, #4
    5a32:	18a3      	adds	r3, r4, r2
    5a34:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a36:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    5a38:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a3c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    5a3e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    5a42:	d006      	beq.n	5a52 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    5a44:	fa01 f403 	lsl.w	r4, r1, r3
    5a48:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    5a4a:	4a0d      	ldr	r2, [pc, #52]	; (5a80 <_dma_set_data_amount+0x54>)
    5a4c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    5a50:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    5a52:	4c0b      	ldr	r4, [pc, #44]	; (5a80 <_dma_set_data_amount+0x54>)
    5a54:	0102      	lsls	r2, r0, #4
    5a56:	18a5      	adds	r5, r4, r2
    5a58:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a5a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    5a5c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    5a60:	d005      	beq.n	5a6e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    5a62:	fa01 f303 	lsl.w	r3, r1, r3
    5a66:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    5a68:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    5a6c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    5a6e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    5a70:	4b03      	ldr	r3, [pc, #12]	; (5a80 <_dma_set_data_amount+0x54>)
    5a72:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5a76:	8041      	strh	r1, [r0, #2]
}
    5a78:	2000      	movs	r0, #0
    5a7a:	bc30      	pop	{r4, r5}
    5a7c:	4770      	bx	lr
    5a7e:	bf00      	nop
    5a80:	20002810 	.word	0x20002810

00005a84 <_dma_enable_transaction>:
{
    5a84:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    5a86:	4c0d      	ldr	r4, [pc, #52]	; (5abc <_dma_enable_transaction+0x38>)
    5a88:	0103      	lsls	r3, r0, #4
    5a8a:	5ae2      	ldrh	r2, [r4, r3]
    5a8c:	b292      	uxth	r2, r2
    5a8e:	f042 0201 	orr.w	r2, r2, #1
    5a92:	52e2      	strh	r2, [r4, r3]
    5a94:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5a98:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    5a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5a9e:	f042 0202 	orr.w	r2, r2, #2
    5aa2:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    5aa4:	b131      	cbz	r1, 5ab4 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    5aa6:	4a06      	ldr	r2, [pc, #24]	; (5ac0 <_dma_enable_transaction+0x3c>)
    5aa8:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    5aaa:	2301      	movs	r3, #1
    5aac:	fa03 f000 	lsl.w	r0, r3, r0
    5ab0:	4308      	orrs	r0, r1
    5ab2:	6110      	str	r0, [r2, #16]
}
    5ab4:	2000      	movs	r0, #0
    5ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
    5aba:	4770      	bx	lr
    5abc:	20002810 	.word	0x20002810
    5ac0:	4100a000 	.word	0x4100a000

00005ac4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    5ac4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5ac8:	4b02      	ldr	r3, [pc, #8]	; (5ad4 <_dma_get_channel_resource+0x10>)
    5aca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5ace:	6001      	str	r1, [r0, #0]
}
    5ad0:	2000      	movs	r0, #0
    5ad2:	4770      	bx	lr
    5ad4:	20000c0c 	.word	0x20000c0c

00005ad8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    5ad8:	b508      	push	{r3, lr}
	_dmac_handler();
    5ada:	4b01      	ldr	r3, [pc, #4]	; (5ae0 <DMAC_0_Handler+0x8>)
    5adc:	4798      	blx	r3
    5ade:	bd08      	pop	{r3, pc}
    5ae0:	00005849 	.word	0x00005849

00005ae4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    5ae4:	b508      	push	{r3, lr}
	_dmac_handler();
    5ae6:	4b01      	ldr	r3, [pc, #4]	; (5aec <DMAC_1_Handler+0x8>)
    5ae8:	4798      	blx	r3
    5aea:	bd08      	pop	{r3, pc}
    5aec:	00005849 	.word	0x00005849

00005af0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    5af0:	b508      	push	{r3, lr}
	_dmac_handler();
    5af2:	4b01      	ldr	r3, [pc, #4]	; (5af8 <DMAC_2_Handler+0x8>)
    5af4:	4798      	blx	r3
    5af6:	bd08      	pop	{r3, pc}
    5af8:	00005849 	.word	0x00005849

00005afc <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    5afc:	b508      	push	{r3, lr}
	_dmac_handler();
    5afe:	4b01      	ldr	r3, [pc, #4]	; (5b04 <DMAC_3_Handler+0x8>)
    5b00:	4798      	blx	r3
    5b02:	bd08      	pop	{r3, pc}
    5b04:	00005849 	.word	0x00005849

00005b08 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    5b08:	b508      	push	{r3, lr}
	_dmac_handler();
    5b0a:	4b01      	ldr	r3, [pc, #4]	; (5b10 <DMAC_4_Handler+0x8>)
    5b0c:	4798      	blx	r3
    5b0e:	bd08      	pop	{r3, pc}
    5b10:	00005849 	.word	0x00005849

00005b14 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    5b14:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    5b16:	2000      	movs	r0, #0
    5b18:	4770      	bx	lr
	...

00005b1c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5b1c:	b430      	push	{r4, r5}
    5b1e:	4814      	ldr	r0, [pc, #80]	; (5b70 <_event_system_init+0x54>)
    5b20:	f100 0543 	add.w	r5, r0, #67	; 0x43
    5b24:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    5b26:	4c13      	ldr	r4, [pc, #76]	; (5b74 <_event_system_init+0x58>)
    5b28:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5b2a:	f813 1b01 	ldrb.w	r1, [r3], #1
    5b2e:	3248      	adds	r2, #72	; 0x48
    5b30:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    5b34:	42ab      	cmp	r3, r5
    5b36:	d1f7      	bne.n	5b28 <_event_system_init+0xc>
    5b38:	480d      	ldr	r0, [pc, #52]	; (5b70 <_event_system_init+0x54>)
    5b3a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    5b3e:	3080      	adds	r0, #128	; 0x80
    5b40:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5b42:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    5b46:	00ca      	lsls	r2, r1, #3
    5b48:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5b4c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    5b50:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5b52:	f850 3f04 	ldr.w	r3, [r0, #4]!
    5b56:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    5b58:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    5b5c:	43db      	mvns	r3, r3
    5b5e:	b2db      	uxtb	r3, r3
    5b60:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    5b64:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5b66:	2920      	cmp	r1, #32
    5b68:	d1eb      	bne.n	5b42 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    5b6a:	2000      	movs	r0, #0
    5b6c:	bc30      	pop	{r4, r5}
    5b6e:	4770      	bx	lr
    5b70:	0000bcb4 	.word	0x0000bcb4
    5b74:	4100e000 	.word	0x4100e000

00005b78 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    5b78:	f010 0f01 	tst.w	r0, #1
    5b7c:	d008      	beq.n	5b90 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5b7e:	4a17      	ldr	r2, [pc, #92]	; (5bdc <_gclk_init_generators_by_fref+0x64>)
    5b80:	4b17      	ldr	r3, [pc, #92]	; (5be0 <_gclk_init_generators_by_fref+0x68>)
    5b82:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5b84:	4619      	mov	r1, r3
    5b86:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5b8a:	684b      	ldr	r3, [r1, #4]
    5b8c:	4213      	tst	r3, r2
    5b8e:	d1fc      	bne.n	5b8a <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5b90:	f010 0f02 	tst.w	r0, #2
    5b94:	d008      	beq.n	5ba8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5b96:	4a13      	ldr	r2, [pc, #76]	; (5be4 <_gclk_init_generators_by_fref+0x6c>)
    5b98:	4b11      	ldr	r3, [pc, #68]	; (5be0 <_gclk_init_generators_by_fref+0x68>)
    5b9a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5b9c:	4619      	mov	r1, r3
    5b9e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5ba2:	684b      	ldr	r3, [r1, #4]
    5ba4:	4213      	tst	r3, r2
    5ba6:	d1fc      	bne.n	5ba2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5ba8:	f010 0f04 	tst.w	r0, #4
    5bac:	d008      	beq.n	5bc0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5bae:	4a0e      	ldr	r2, [pc, #56]	; (5be8 <_gclk_init_generators_by_fref+0x70>)
    5bb0:	4b0b      	ldr	r3, [pc, #44]	; (5be0 <_gclk_init_generators_by_fref+0x68>)
    5bb2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5bb4:	4619      	mov	r1, r3
    5bb6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5bba:	684b      	ldr	r3, [r1, #4]
    5bbc:	4213      	tst	r3, r2
    5bbe:	d1fc      	bne.n	5bba <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5bc0:	f010 0f08 	tst.w	r0, #8
    5bc4:	d008      	beq.n	5bd8 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5bc6:	4a09      	ldr	r2, [pc, #36]	; (5bec <_gclk_init_generators_by_fref+0x74>)
    5bc8:	4b05      	ldr	r3, [pc, #20]	; (5be0 <_gclk_init_generators_by_fref+0x68>)
    5bca:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5bcc:	4619      	mov	r1, r3
    5bce:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5bd2:	684b      	ldr	r3, [r1, #4]
    5bd4:	4213      	tst	r3, r2
    5bd6:	d1fc      	bne.n	5bd2 <_gclk_init_generators_by_fref+0x5a>
    5bd8:	4770      	bx	lr
    5bda:	bf00      	nop
    5bdc:	00010108 	.word	0x00010108
    5be0:	40001c00 	.word	0x40001c00
    5be4:	00010106 	.word	0x00010106
    5be8:	00100106 	.word	0x00100106
    5bec:	00010104 	.word	0x00010104

00005bf0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    5bf0:	2201      	movs	r2, #1
    5bf2:	4b01      	ldr	r3, [pc, #4]	; (5bf8 <_mclk_init+0x8>)
    5bf4:	715a      	strb	r2, [r3, #5]
    5bf6:	4770      	bx	lr
    5bf8:	40000800 	.word	0x40000800

00005bfc <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    5bfc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    5bfe:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    5c00:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    5c02:	f012 0f01 	tst.w	r2, #1
    5c06:	d005      	beq.n	5c14 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    5c08:	2201      	movs	r2, #1
    5c0a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    5c0c:	6803      	ldr	r3, [r0, #0]
    5c0e:	b153      	cbz	r3, 5c26 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    5c10:	4798      	blx	r3
    5c12:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    5c14:	8a1a      	ldrh	r2, [r3, #16]
    5c16:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    5c18:	b12a      	cbz	r2, 5c26 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    5c1a:	f240 225e 	movw	r2, #606	; 0x25e
    5c1e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    5c20:	6843      	ldr	r3, [r0, #4]
    5c22:	b103      	cbz	r3, 5c26 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    5c24:	4798      	blx	r3
    5c26:	bd08      	pop	{r3, pc}

00005c28 <_flash_init>:
{
    5c28:	b538      	push	{r3, r4, r5, lr}
    5c2a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    5c2c:	4605      	mov	r5, r0
    5c2e:	b350      	cbz	r0, 5c86 <_flash_init+0x5e>
    5c30:	4816      	ldr	r0, [pc, #88]	; (5c8c <_flash_init+0x64>)
    5c32:	4281      	cmp	r1, r0
    5c34:	bf14      	ite	ne
    5c36:	2000      	movne	r0, #0
    5c38:	2001      	moveq	r0, #1
    5c3a:	224b      	movs	r2, #75	; 0x4b
    5c3c:	4914      	ldr	r1, [pc, #80]	; (5c90 <_flash_init+0x68>)
    5c3e:	4b15      	ldr	r3, [pc, #84]	; (5c94 <_flash_init+0x6c>)
    5c40:	4798      	blx	r3
	device->hw = hw;
    5c42:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    5c44:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    5c46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    5c4a:	049b      	lsls	r3, r3, #18
    5c4c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    5c4e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    5c50:	4b11      	ldr	r3, [pc, #68]	; (5c98 <_flash_init+0x70>)
    5c52:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c54:	4b11      	ldr	r3, [pc, #68]	; (5c9c <_flash_init+0x74>)
    5c56:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    5c5a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5c5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5c62:	f3bf 8f6f 	isb	sy
    5c66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5c6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5c72:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c76:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    5c7a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c7e:	6019      	str	r1, [r3, #0]
    5c80:	601a      	str	r2, [r3, #0]
}
    5c82:	2000      	movs	r0, #0
    5c84:	bd38      	pop	{r3, r4, r5, pc}
    5c86:	2000      	movs	r0, #0
    5c88:	e7d7      	b.n	5c3a <_flash_init+0x12>
    5c8a:	bf00      	nop
    5c8c:	41004000 	.word	0x41004000
    5c90:	0000bdb8 	.word	0x0000bdb8
    5c94:	00005241 	.word	0x00005241
    5c98:	20000d8c 	.word	0x20000d8c
    5c9c:	e000e100 	.word	0xe000e100

00005ca0 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    5ca0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    5ca2:	4b02      	ldr	r3, [pc, #8]	; (5cac <NVMCTRL_0_Handler+0xc>)
    5ca4:	6818      	ldr	r0, [r3, #0]
    5ca6:	4b02      	ldr	r3, [pc, #8]	; (5cb0 <NVMCTRL_0_Handler+0x10>)
    5ca8:	4798      	blx	r3
    5caa:	bd08      	pop	{r3, pc}
    5cac:	20000d8c 	.word	0x20000d8c
    5cb0:	00005bfd 	.word	0x00005bfd

00005cb4 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    5cb4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    5cb6:	4b02      	ldr	r3, [pc, #8]	; (5cc0 <NVMCTRL_1_Handler+0xc>)
    5cb8:	6818      	ldr	r0, [r3, #0]
    5cba:	4b02      	ldr	r3, [pc, #8]	; (5cc4 <NVMCTRL_1_Handler+0x10>)
    5cbc:	4798      	blx	r3
    5cbe:	bd08      	pop	{r3, pc}
    5cc0:	20000d8c 	.word	0x20000d8c
    5cc4:	00005bfd 	.word	0x00005bfd

00005cc8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5cc8:	4b03      	ldr	r3, [pc, #12]	; (5cd8 <_osc32kctrl_init_sources+0x10>)
    5cca:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5ccc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5cd0:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5cd2:	2201      	movs	r2, #1
    5cd4:	741a      	strb	r2, [r3, #16]
    5cd6:	4770      	bx	lr
    5cd8:	40001400 	.word	0x40001400

00005cdc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5cdc:	4770      	bx	lr
	...

00005ce0 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5ce0:	4a47      	ldr	r2, [pc, #284]	; (5e00 <_oscctrl_init_referenced_generators+0x120>)
    5ce2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5ce4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    5ce8:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5cec:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5cee:	4611      	mov	r1, r2
    5cf0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5cf4:	684b      	ldr	r3, [r1, #4]
    5cf6:	4213      	tst	r3, r2
    5cf8:	d1fc      	bne.n	5cf4 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5cfa:	4a41      	ldr	r2, [pc, #260]	; (5e00 <_oscctrl_init_referenced_generators+0x120>)
    5cfc:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5cfe:	f013 0f04 	tst.w	r3, #4
    5d02:	d1fb      	bne.n	5cfc <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5d04:	4b3f      	ldr	r3, [pc, #252]	; (5e04 <_oscctrl_init_referenced_generators+0x124>)
    5d06:	2200      	movs	r2, #0
    5d08:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5d0a:	4a3f      	ldr	r2, [pc, #252]	; (5e08 <_oscctrl_init_referenced_generators+0x128>)
    5d0c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d0e:	461a      	mov	r2, r3
    5d10:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5d14:	f013 0f10 	tst.w	r3, #16
    5d18:	d1fa      	bne.n	5d10 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5d1a:	2200      	movs	r2, #0
    5d1c:	4b39      	ldr	r3, [pc, #228]	; (5e04 <_oscctrl_init_referenced_generators+0x124>)
    5d1e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d22:	461a      	mov	r2, r3
    5d24:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5d28:	f013 0f04 	tst.w	r3, #4
    5d2c:	d1fa      	bne.n	5d24 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5d2e:	2202      	movs	r2, #2
    5d30:	4b34      	ldr	r3, [pc, #208]	; (5e04 <_oscctrl_init_referenced_generators+0x124>)
    5d32:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d34:	461a      	mov	r2, r3
    5d36:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5d3a:	f013 0f02 	tst.w	r3, #2
    5d3e:	d1fa      	bne.n	5d36 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5d40:	4b30      	ldr	r3, [pc, #192]	; (5e04 <_oscctrl_init_referenced_generators+0x124>)
    5d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5d44:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d46:	461a      	mov	r2, r3
    5d48:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5d4c:	f013 0f08 	tst.w	r3, #8
    5d50:	d1fa      	bne.n	5d48 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5d52:	2288      	movs	r2, #136	; 0x88
    5d54:	4b2b      	ldr	r3, [pc, #172]	; (5e04 <_oscctrl_init_referenced_generators+0x124>)
    5d56:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d5a:	461a      	mov	r2, r3
    5d5c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5d60:	f013 0f04 	tst.w	r3, #4
    5d64:	d1fa      	bne.n	5d5c <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5d66:	2242      	movs	r2, #66	; 0x42
    5d68:	4b25      	ldr	r3, [pc, #148]	; (5e00 <_oscctrl_init_referenced_generators+0x120>)
    5d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5d6e:	2227      	movs	r2, #39	; 0x27
    5d70:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    5d74:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5d76:	461a      	mov	r2, r3
    5d78:	6d13      	ldr	r3, [r2, #80]	; 0x50
    5d7a:	f013 0f06 	tst.w	r3, #6
    5d7e:	d1fb      	bne.n	5d78 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5d80:	4b20      	ldr	r3, [pc, #128]	; (5e04 <_oscctrl_init_referenced_generators+0x124>)
    5d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5d86:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5d88:	2202      	movs	r2, #2
    5d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5d8e:	461a      	mov	r2, r3
    5d90:	6d13      	ldr	r3, [r2, #80]	; 0x50
    5d92:	f013 0f02 	tst.w	r3, #2
    5d96:	d1fb      	bne.n	5d90 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5d98:	4b1a      	ldr	r3, [pc, #104]	; (5e04 <_oscctrl_init_referenced_generators+0x124>)
    5d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5d9e:	f013 0f01 	tst.w	r3, #1
    5da2:	d026      	beq.n	5df2 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5da4:	4a17      	ldr	r2, [pc, #92]	; (5e04 <_oscctrl_init_referenced_generators+0x124>)
    5da6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    5da8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5dac:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    5db0:	d1f9      	bne.n	5da6 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5db2:	4b14      	ldr	r3, [pc, #80]	; (5e04 <_oscctrl_init_referenced_generators+0x124>)
    5db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5db6:	f012 0f01 	tst.w	r2, #1
    5dba:	d103      	bne.n	5dc4 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    5dbe:	f012 0f02 	tst.w	r2, #2
    5dc2:	d0f7      	beq.n	5db4 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5dc4:	4a0e      	ldr	r2, [pc, #56]	; (5e00 <_oscctrl_init_referenced_generators+0x120>)
    5dc6:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5dc8:	2b00      	cmp	r3, #0
    5dca:	d1fc      	bne.n	5dc6 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5dcc:	4a0c      	ldr	r2, [pc, #48]	; (5e00 <_oscctrl_init_referenced_generators+0x120>)
    5dce:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5dd0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    5dd4:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5dd8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5dda:	4611      	mov	r1, r2
    5ddc:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5de0:	684b      	ldr	r3, [r1, #4]
    5de2:	4213      	tst	r3, r2
    5de4:	d1fc      	bne.n	5de0 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5de6:	4a06      	ldr	r2, [pc, #24]	; (5e00 <_oscctrl_init_referenced_generators+0x120>)
    5de8:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5dea:	f013 0f04 	tst.w	r3, #4
    5dee:	d1fb      	bne.n	5de8 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    5df0:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5df2:	4a04      	ldr	r2, [pc, #16]	; (5e04 <_oscctrl_init_referenced_generators+0x124>)
    5df4:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5df6:	f413 7f80 	tst.w	r3, #256	; 0x100
    5dfa:	d0fb      	beq.n	5df4 <_oscctrl_init_referenced_generators+0x114>
    5dfc:	e7d9      	b.n	5db2 <_oscctrl_init_referenced_generators+0xd2>
    5dfe:	bf00      	nop
    5e00:	40001c00 	.word	0x40001c00
    5e04:	40001000 	.word	0x40001000
    5e08:	04010000 	.word	0x04010000

00005e0c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    5e0c:	b500      	push	{lr}
    5e0e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    5e10:	4b0d      	ldr	r3, [pc, #52]	; (5e48 <RAMECC_Handler+0x3c>)
    5e12:	789b      	ldrb	r3, [r3, #2]
    5e14:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    5e16:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    5e18:	9b01      	ldr	r3, [sp, #4]
    5e1a:	f013 0f02 	tst.w	r3, #2
    5e1e:	d006      	beq.n	5e2e <RAMECC_Handler+0x22>
    5e20:	4b0a      	ldr	r3, [pc, #40]	; (5e4c <RAMECC_Handler+0x40>)
    5e22:	681b      	ldr	r3, [r3, #0]
    5e24:	b11b      	cbz	r3, 5e2e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    5e26:	4a08      	ldr	r2, [pc, #32]	; (5e48 <RAMECC_Handler+0x3c>)
    5e28:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    5e2a:	4798      	blx	r3
    5e2c:	e009      	b.n	5e42 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    5e2e:	9b01      	ldr	r3, [sp, #4]
    5e30:	f013 0f01 	tst.w	r3, #1
    5e34:	d005      	beq.n	5e42 <RAMECC_Handler+0x36>
    5e36:	4b05      	ldr	r3, [pc, #20]	; (5e4c <RAMECC_Handler+0x40>)
    5e38:	685b      	ldr	r3, [r3, #4]
    5e3a:	b113      	cbz	r3, 5e42 <RAMECC_Handler+0x36>
    5e3c:	4a02      	ldr	r2, [pc, #8]	; (5e48 <RAMECC_Handler+0x3c>)
    5e3e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    5e40:	4798      	blx	r3
	} else {
		return;
	}
}
    5e42:	b003      	add	sp, #12
    5e44:	f85d fb04 	ldr.w	pc, [sp], #4
    5e48:	41020000 	.word	0x41020000
    5e4c:	20002c10 	.word	0x20002c10

00005e50 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    5e50:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    5e52:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5e54:	6913      	ldr	r3, [r2, #16]
    5e56:	f013 0f60 	tst.w	r3, #96	; 0x60
    5e5a:	d1fb      	bne.n	5e54 <_rtc_timer_set_period+0x4>
}
    5e5c:	4770      	bx	lr

00005e5e <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    5e5e:	68c2      	ldr	r2, [r0, #12]
    5e60:	6913      	ldr	r3, [r2, #16]
    5e62:	f013 0f60 	tst.w	r3, #96	; 0x60
    5e66:	d1fb      	bne.n	5e60 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    5e68:	6a10      	ldr	r0, [r2, #32]
}
    5e6a:	4770      	bx	lr

00005e6c <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    5e6c:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5e6e:	f248 0103 	movw	r1, #32771	; 0x8003
    5e72:	6913      	ldr	r3, [r2, #16]
    5e74:	420b      	tst	r3, r1
    5e76:	d1fc      	bne.n	5e72 <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5e78:	8810      	ldrh	r0, [r2, #0]
}
    5e7a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5e7e:	4770      	bx	lr

00005e80 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    5e80:	4770      	bx	lr
	...

00005e84 <_rtc_timer_init>:
{
    5e84:	b538      	push	{r3, r4, r5, lr}
    5e86:	460c      	mov	r4, r1
	ASSERT(dev);
    5e88:	4605      	mov	r5, r0
    5e8a:	2230      	movs	r2, #48	; 0x30
    5e8c:	4914      	ldr	r1, [pc, #80]	; (5ee0 <_rtc_timer_init+0x5c>)
    5e8e:	3000      	adds	r0, #0
    5e90:	bf18      	it	ne
    5e92:	2001      	movne	r0, #1
    5e94:	4b13      	ldr	r3, [pc, #76]	; (5ee4 <_rtc_timer_init+0x60>)
    5e96:	4798      	blx	r3
	dev->hw = hw;
    5e98:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5e9a:	2301      	movs	r3, #1
    5e9c:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5e9e:	f248 0203 	movw	r2, #32771	; 0x8003
    5ea2:	6923      	ldr	r3, [r4, #16]
    5ea4:	4213      	tst	r3, r2
    5ea6:	d1fc      	bne.n	5ea2 <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5ea8:	68eb      	ldr	r3, [r5, #12]
    5eaa:	691a      	ldr	r2, [r3, #16]
    5eac:	f012 0f01 	tst.w	r2, #1
    5eb0:	d1fb      	bne.n	5eaa <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5eb2:	f248 0280 	movw	r2, #32896	; 0x8080
    5eb6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5eb8:	f248 0103 	movw	r1, #32771	; 0x8003
    5ebc:	691a      	ldr	r2, [r3, #16]
    5ebe:	420a      	tst	r2, r1
    5ec0:	d1fc      	bne.n	5ebc <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    5ec2:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    5ec4:	2301      	movs	r3, #1
    5ec6:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5ec8:	6913      	ldr	r3, [r2, #16]
    5eca:	f013 0f60 	tst.w	r3, #96	; 0x60
    5ece:	d1fb      	bne.n	5ec8 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    5ed0:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    5ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
    5ed6:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    5ed8:	4b03      	ldr	r3, [pc, #12]	; (5ee8 <_rtc_timer_init+0x64>)
    5eda:	601d      	str	r5, [r3, #0]
}
    5edc:	2000      	movs	r0, #0
    5ede:	bd38      	pop	{r3, r4, r5, pc}
    5ee0:	0000bdd8 	.word	0x0000bdd8
    5ee4:	00005241 	.word	0x00005241
    5ee8:	20000d90 	.word	0x20000d90

00005eec <_rtc_timer_deinit>:
{
    5eec:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    5eee:	4604      	mov	r4, r0
    5ef0:	b1c8      	cbz	r0, 5f26 <_rtc_timer_deinit+0x3a>
    5ef2:	68c0      	ldr	r0, [r0, #12]
    5ef4:	3000      	adds	r0, #0
    5ef6:	bf18      	it	ne
    5ef8:	2001      	movne	r0, #1
    5efa:	2252      	movs	r2, #82	; 0x52
    5efc:	490b      	ldr	r1, [pc, #44]	; (5f2c <_rtc_timer_deinit+0x40>)
    5efe:	4b0c      	ldr	r3, [pc, #48]	; (5f30 <_rtc_timer_deinit+0x44>)
    5f00:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5f06:	4b0b      	ldr	r3, [pc, #44]	; (5f34 <_rtc_timer_deinit+0x48>)
    5f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5f0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f10:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    5f14:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5f16:	2301      	movs	r3, #1
    5f18:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5f1a:	f248 0103 	movw	r1, #32771	; 0x8003
    5f1e:	6913      	ldr	r3, [r2, #16]
    5f20:	420b      	tst	r3, r1
    5f22:	d1fc      	bne.n	5f1e <_rtc_timer_deinit+0x32>
}
    5f24:	bd10      	pop	{r4, pc}
    5f26:	2000      	movs	r0, #0
    5f28:	e7e7      	b.n	5efa <_rtc_timer_deinit+0xe>
    5f2a:	bf00      	nop
    5f2c:	0000bdd8 	.word	0x0000bdd8
    5f30:	00005241 	.word	0x00005241
    5f34:	e000e100 	.word	0xe000e100

00005f38 <_rtc_timer_start>:
{
    5f38:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    5f3a:	4604      	mov	r4, r0
    5f3c:	b310      	cbz	r0, 5f84 <_rtc_timer_start+0x4c>
    5f3e:	68c0      	ldr	r0, [r0, #12]
    5f40:	3000      	adds	r0, #0
    5f42:	bf18      	it	ne
    5f44:	2001      	movne	r0, #1
    5f46:	225e      	movs	r2, #94	; 0x5e
    5f48:	490f      	ldr	r1, [pc, #60]	; (5f88 <_rtc_timer_start+0x50>)
    5f4a:	4b10      	ldr	r3, [pc, #64]	; (5f8c <_rtc_timer_start+0x54>)
    5f4c:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5f52:	4b0f      	ldr	r3, [pc, #60]	; (5f90 <_rtc_timer_start+0x58>)
    5f54:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    5f56:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    5f58:	2300      	movs	r3, #0
    5f5a:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5f5c:	6913      	ldr	r3, [r2, #16]
    5f5e:	f013 0f08 	tst.w	r3, #8
    5f62:	d1fb      	bne.n	5f5c <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    5f64:	68e3      	ldr	r3, [r4, #12]
    5f66:	691a      	ldr	r2, [r3, #16]
    5f68:	f012 0f08 	tst.w	r2, #8
    5f6c:	d1fb      	bne.n	5f66 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    5f6e:	881a      	ldrh	r2, [r3, #0]
    5f70:	b292      	uxth	r2, r2
    5f72:	f042 0202 	orr.w	r2, r2, #2
    5f76:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5f78:	f248 0103 	movw	r1, #32771	; 0x8003
    5f7c:	691a      	ldr	r2, [r3, #16]
    5f7e:	420a      	tst	r2, r1
    5f80:	d1fc      	bne.n	5f7c <_rtc_timer_start+0x44>
}
    5f82:	bd10      	pop	{r4, pc}
    5f84:	2000      	movs	r0, #0
    5f86:	e7de      	b.n	5f46 <_rtc_timer_start+0xe>
    5f88:	0000bdd8 	.word	0x0000bdd8
    5f8c:	00005241 	.word	0x00005241
    5f90:	e000e100 	.word	0xe000e100

00005f94 <_rtc_timer_stop>:
{
    5f94:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    5f96:	4604      	mov	r4, r0
    5f98:	b1a0      	cbz	r0, 5fc4 <_rtc_timer_stop+0x30>
    5f9a:	68c0      	ldr	r0, [r0, #12]
    5f9c:	3000      	adds	r0, #0
    5f9e:	bf18      	it	ne
    5fa0:	2001      	movne	r0, #1
    5fa2:	226b      	movs	r2, #107	; 0x6b
    5fa4:	4908      	ldr	r1, [pc, #32]	; (5fc8 <_rtc_timer_stop+0x34>)
    5fa6:	4b09      	ldr	r3, [pc, #36]	; (5fcc <_rtc_timer_stop+0x38>)
    5fa8:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5faa:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5fac:	8813      	ldrh	r3, [r2, #0]
    5fae:	f023 0302 	bic.w	r3, r3, #2
    5fb2:	041b      	lsls	r3, r3, #16
    5fb4:	0c1b      	lsrs	r3, r3, #16
    5fb6:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5fb8:	f248 0103 	movw	r1, #32771	; 0x8003
    5fbc:	6913      	ldr	r3, [r2, #16]
    5fbe:	420b      	tst	r3, r1
    5fc0:	d1fc      	bne.n	5fbc <_rtc_timer_stop+0x28>
}
    5fc2:	bd10      	pop	{r4, pc}
    5fc4:	2000      	movs	r0, #0
    5fc6:	e7ec      	b.n	5fa2 <_rtc_timer_stop+0xe>
    5fc8:	0000bdd8 	.word	0x0000bdd8
    5fcc:	00005241 	.word	0x00005241

00005fd0 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    5fd0:	4800      	ldr	r0, [pc, #0]	; (5fd4 <_rtc_get_timer+0x4>)
    5fd2:	4770      	bx	lr
    5fd4:	20000314 	.word	0x20000314

00005fd8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5fd8:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    5fda:	4b08      	ldr	r3, [pc, #32]	; (5ffc <RTC_Handler+0x24>)
    5fdc:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5fde:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5fe0:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    5fe2:	f413 7f80 	tst.w	r3, #256	; 0x100
    5fe6:	d007      	beq.n	5ff8 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    5fe8:	6823      	ldr	r3, [r4, #0]
    5fea:	b10b      	cbz	r3, 5ff0 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    5fec:	4620      	mov	r0, r4
    5fee:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5ff0:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
    5ff6:	819a      	strh	r2, [r3, #12]
    5ff8:	bd10      	pop	{r4, pc}
    5ffa:	bf00      	nop
    5ffc:	20000d90 	.word	0x20000d90

00006000 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6000:	b470      	push	{r4, r5, r6}
    6002:	b089      	sub	sp, #36	; 0x24
    6004:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6006:	466c      	mov	r4, sp
    6008:	4d0d      	ldr	r5, [pc, #52]	; (6040 <_sercom_get_hardware_index+0x40>)
    600a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    600c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    600e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6016:	9b00      	ldr	r3, [sp, #0]
    6018:	42b3      	cmp	r3, r6
    601a:	d00d      	beq.n	6038 <_sercom_get_hardware_index+0x38>
    601c:	4631      	mov	r1, r6
    601e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6020:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6022:	f853 2b04 	ldr.w	r2, [r3], #4
    6026:	428a      	cmp	r2, r1
    6028:	d007      	beq.n	603a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    602a:	3001      	adds	r0, #1
    602c:	2808      	cmp	r0, #8
    602e:	d1f8      	bne.n	6022 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    6030:	2000      	movs	r0, #0
}
    6032:	b009      	add	sp, #36	; 0x24
    6034:	bc70      	pop	{r4, r5, r6}
    6036:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6038:	2000      	movs	r0, #0
			return i;
    603a:	b2c0      	uxtb	r0, r0
    603c:	e7f9      	b.n	6032 <_sercom_get_hardware_index+0x32>
    603e:	bf00      	nop
    6040:	0000bdf0 	.word	0x0000bdf0

00006044 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    6044:	b510      	push	{r4, lr}
	void *hw = device->hw;
    6046:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6048:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    604a:	f013 0f01 	tst.w	r3, #1
    604e:	d003      	beq.n	6058 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    6050:	7da3      	ldrb	r3, [r4, #22]
    6052:	f013 0f01 	tst.w	r3, #1
    6056:	d112      	bne.n	607e <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6058:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    605a:	f013 0f02 	tst.w	r3, #2
    605e:	d003      	beq.n	6068 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    6060:	7da3      	ldrb	r3, [r4, #22]
    6062:	f013 0f02 	tst.w	r3, #2
    6066:	d10f      	bne.n	6088 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6068:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    606a:	f013 0f04 	tst.w	r3, #4
    606e:	d015      	beq.n	609c <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    6070:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    6072:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6076:	b163      	cbz	r3, 6092 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6078:	23ff      	movs	r3, #255	; 0xff
    607a:	8363      	strh	r3, [r4, #26]
    607c:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    607e:	2301      	movs	r3, #1
    6080:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    6082:	6803      	ldr	r3, [r0, #0]
    6084:	4798      	blx	r3
    6086:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6088:	2302      	movs	r3, #2
    608a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    608c:	6883      	ldr	r3, [r0, #8]
    608e:	4798      	blx	r3
    6090:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    6092:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    6094:	6843      	ldr	r3, [r0, #4]
    6096:	b2c9      	uxtb	r1, r1
    6098:	4798      	blx	r3
    609a:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    609c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    609e:	09db      	lsrs	r3, r3, #7
    60a0:	d100      	bne.n	60a4 <_sercom_usart_interrupt_handler+0x60>
    60a2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    60a4:	2380      	movs	r3, #128	; 0x80
    60a6:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    60a8:	68c3      	ldr	r3, [r0, #12]
    60aa:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    60ac:	8b63      	ldrh	r3, [r4, #26]
    60ae:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    60b0:	8363      	strh	r3, [r4, #26]
    60b2:	e7f6      	b.n	60a2 <_sercom_usart_interrupt_handler+0x5e>

000060b4 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    60b4:	4b14      	ldr	r3, [pc, #80]	; (6108 <_sercom_init_irq_param+0x54>)
    60b6:	4298      	cmp	r0, r3
    60b8:	d014      	beq.n	60e4 <_sercom_init_irq_param+0x30>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    60ba:	4b14      	ldr	r3, [pc, #80]	; (610c <_sercom_init_irq_param+0x58>)
    60bc:	4298      	cmp	r0, r3
    60be:	d014      	beq.n	60ea <_sercom_init_irq_param+0x36>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
    60c0:	4b13      	ldr	r3, [pc, #76]	; (6110 <_sercom_init_irq_param+0x5c>)
    60c2:	4298      	cmp	r0, r3
    60c4:	d014      	beq.n	60f0 <_sercom_init_irq_param+0x3c>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    60c6:	4b13      	ldr	r3, [pc, #76]	; (6114 <_sercom_init_irq_param+0x60>)
    60c8:	4298      	cmp	r0, r3
    60ca:	d014      	beq.n	60f6 <_sercom_init_irq_param+0x42>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    60cc:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    60d0:	d014      	beq.n	60fc <_sercom_init_irq_param+0x48>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    60d2:	4b11      	ldr	r3, [pc, #68]	; (6118 <_sercom_init_irq_param+0x64>)
    60d4:	4298      	cmp	r0, r3
    60d6:	d014      	beq.n	6102 <_sercom_init_irq_param+0x4e>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    60d8:	4b10      	ldr	r3, [pc, #64]	; (611c <_sercom_init_irq_param+0x68>)
    60da:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    60dc:	bf04      	itt	eq
    60de:	4b10      	ldreq	r3, [pc, #64]	; (6120 <_sercom_init_irq_param+0x6c>)
    60e0:	6199      	streq	r1, [r3, #24]
    60e2:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    60e4:	4b0e      	ldr	r3, [pc, #56]	; (6120 <_sercom_init_irq_param+0x6c>)
    60e6:	6019      	str	r1, [r3, #0]
    60e8:	e7ed      	b.n	60c6 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    60ea:	4b0d      	ldr	r3, [pc, #52]	; (6120 <_sercom_init_irq_param+0x6c>)
    60ec:	6059      	str	r1, [r3, #4]
    60ee:	e7ed      	b.n	60cc <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    60f0:	4b0b      	ldr	r3, [pc, #44]	; (6120 <_sercom_init_irq_param+0x6c>)
    60f2:	6099      	str	r1, [r3, #8]
    60f4:	e7ed      	b.n	60d2 <_sercom_init_irq_param+0x1e>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    60f6:	4b0a      	ldr	r3, [pc, #40]	; (6120 <_sercom_init_irq_param+0x6c>)
    60f8:	60d9      	str	r1, [r3, #12]
    60fa:	e7ed      	b.n	60d8 <_sercom_init_irq_param+0x24>
		_sercom4_dev = (struct _usart_async_device *)dev;
    60fc:	4b08      	ldr	r3, [pc, #32]	; (6120 <_sercom_init_irq_param+0x6c>)
    60fe:	6119      	str	r1, [r3, #16]
    6100:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    6102:	4b07      	ldr	r3, [pc, #28]	; (6120 <_sercom_init_irq_param+0x6c>)
    6104:	6159      	str	r1, [r3, #20]
    6106:	4770      	bx	lr
    6108:	40003000 	.word	0x40003000
    610c:	40003400 	.word	0x40003400
    6110:	41012000 	.word	0x41012000
    6114:	41014000 	.word	0x41014000
    6118:	43000400 	.word	0x43000400
    611c:	43000800 	.word	0x43000800
    6120:	20000d94 	.word	0x20000d94

00006124 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6124:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6126:	4b03      	ldr	r3, [pc, #12]	; (6134 <_sercom_get_irq_num+0x10>)
    6128:	4798      	blx	r3
    612a:	0080      	lsls	r0, r0, #2
    612c:	302e      	adds	r0, #46	; 0x2e
}
    612e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6132:	bd08      	pop	{r3, pc}
    6134:	00006001 	.word	0x00006001

00006138 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6138:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    613a:	f013 0f01 	tst.w	r3, #1
    613e:	d109      	bne.n	6154 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6140:	6803      	ldr	r3, [r0, #0]
    6142:	f043 0302 	orr.w	r3, r3, #2
    6146:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6148:	69c3      	ldr	r3, [r0, #28]
    614a:	f013 0f03 	tst.w	r3, #3
    614e:	d1fb      	bne.n	6148 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    6150:	2000      	movs	r0, #0
    6152:	4770      	bx	lr
		return ERR_BUSY;
    6154:	f06f 0003 	mvn.w	r0, #3
}
    6158:	4770      	bx	lr
	...

0000615c <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    615c:	b538      	push	{r3, r4, r5, lr}
    615e:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    6160:	4b0b      	ldr	r3, [pc, #44]	; (6190 <_spi_async_enable+0x34>)
    6162:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6164:	4620      	mov	r0, r4
    6166:	4b0b      	ldr	r3, [pc, #44]	; (6194 <_spi_async_enable+0x38>)
    6168:	4798      	blx	r3
    616a:	1d01      	adds	r1, r0, #4
    616c:	b2c9      	uxtb	r1, r1
    616e:	2501      	movs	r5, #1
    6170:	4c09      	ldr	r4, [pc, #36]	; (6198 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    6172:	1c43      	adds	r3, r0, #1
    6174:	b2db      	uxtb	r3, r3
    6176:	0942      	lsrs	r2, r0, #5
    6178:	f000 001f 	and.w	r0, r0, #31
    617c:	fa05 f000 	lsl.w	r0, r5, r0
    6180:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    6184:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    6186:	4299      	cmp	r1, r3
    6188:	d1f3      	bne.n	6172 <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    618a:	2000      	movs	r0, #0
    618c:	bd38      	pop	{r3, r4, r5, pc}
    618e:	bf00      	nop
    6190:	00006139 	.word	0x00006139
    6194:	00006125 	.word	0x00006125
    6198:	e000e100 	.word	0xe000e100

0000619c <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    619c:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    619e:	f013 0f03 	tst.w	r3, #3
    61a2:	d111      	bne.n	61c8 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    61a4:	69c3      	ldr	r3, [r0, #28]
    61a6:	f013 0f03 	tst.w	r3, #3
    61aa:	d1fb      	bne.n	61a4 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    61ac:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    61ae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    61b2:	0709      	lsls	r1, r1, #28
    61b4:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    61b8:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    61ba:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    61bc:	69c3      	ldr	r3, [r0, #28]
    61be:	f013 0f03 	tst.w	r3, #3
    61c2:	d1fb      	bne.n	61bc <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    61c4:	2000      	movs	r0, #0
    61c6:	4770      	bx	lr
		return ERR_BUSY;
    61c8:	f06f 0003 	mvn.w	r0, #3
}
    61cc:	4770      	bx	lr

000061ce <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    61ce:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    61d0:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    61d2:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    61d4:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    61d6:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    61d8:	f013 0f01 	tst.w	r3, #1
    61dc:	d109      	bne.n	61f2 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    61de:	f013 0f04 	tst.w	r3, #4
    61e2:	d109      	bne.n	61f8 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    61e4:	f013 0f02 	tst.w	r3, #2
    61e8:	d109      	bne.n	61fe <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    61ea:	f013 0f80 	tst.w	r3, #128	; 0x80
    61ee:	d10b      	bne.n	6208 <_spi_handler+0x3a>
    61f0:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    61f2:	6883      	ldr	r3, [r0, #8]
    61f4:	4798      	blx	r3
    61f6:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    61f8:	68c3      	ldr	r3, [r0, #12]
    61fa:	4798      	blx	r3
    61fc:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    61fe:	2302      	movs	r3, #2
    6200:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    6202:	6903      	ldr	r3, [r0, #16]
    6204:	4798      	blx	r3
    6206:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6208:	2304      	movs	r3, #4
    620a:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    620c:	2380      	movs	r3, #128	; 0x80
    620e:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6210:	6943      	ldr	r3, [r0, #20]
    6212:	f06f 0112 	mvn.w	r1, #18
    6216:	4798      	blx	r3
	}
}
    6218:	e7ea      	b.n	61f0 <_spi_handler+0x22>
	...

0000621c <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    621c:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    621e:	4b03      	ldr	r3, [pc, #12]	; (622c <_spi_get_tx_dma_channel+0x10>)
    6220:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    6222:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6224:	bf0c      	ite	eq
    6226:	2008      	moveq	r0, #8
    6228:	2000      	movne	r0, #0
    622a:	bd08      	pop	{r3, pc}
    622c:	00006001 	.word	0x00006001

00006230 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    6230:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6232:	4b03      	ldr	r3, [pc, #12]	; (6240 <_spi_get_rx_dma_channel+0x10>)
    6234:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6236:	2807      	cmp	r0, #7
    6238:	bf8c      	ite	hi
    623a:	2000      	movhi	r0, #0
    623c:	2001      	movls	r0, #1
    623e:	bd08      	pop	{r3, pc}
    6240:	00006001 	.word	0x00006001

00006244 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    6244:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    6246:	6883      	ldr	r3, [r0, #8]
    6248:	689b      	ldr	r3, [r3, #8]
    624a:	b103      	cbz	r3, 624e <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    624c:	4798      	blx	r3
    624e:	bd08      	pop	{r3, pc}

00006250 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    6250:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    6252:	6883      	ldr	r3, [r0, #8]
    6254:	685b      	ldr	r3, [r3, #4]
    6256:	b103      	cbz	r3, 625a <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    6258:	4798      	blx	r3
    625a:	bd08      	pop	{r3, pc}

0000625c <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    625c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    625e:	6883      	ldr	r3, [r0, #8]
    6260:	68db      	ldr	r3, [r3, #12]
    6262:	b103      	cbz	r3, 6266 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    6264:	4798      	blx	r3
    6266:	bd08      	pop	{r3, pc}

00006268 <_usart_init>:
{
    6268:	b510      	push	{r4, lr}
    626a:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    626c:	4b48      	ldr	r3, [pc, #288]	; (6390 <_usart_init+0x128>)
    626e:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    6270:	2800      	cmp	r0, #0
    6272:	d06a      	beq.n	634a <_usart_init+0xe2>
    6274:	2801      	cmp	r0, #1
    6276:	d062      	beq.n	633e <_usart_init+0xd6>
    6278:	2802      	cmp	r0, #2
    627a:	d062      	beq.n	6342 <_usart_init+0xda>
    627c:	2804      	cmp	r0, #4
    627e:	d062      	beq.n	6346 <_usart_init+0xde>
    6280:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6282:	bf08      	it	eq
    6284:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    6286:	d006      	beq.n	6296 <_usart_init+0x2e>
	ASSERT(false);
    6288:	f44f 721e 	mov.w	r2, #632	; 0x278
    628c:	4941      	ldr	r1, [pc, #260]	; (6394 <_usart_init+0x12c>)
    628e:	2000      	movs	r0, #0
    6290:	4b41      	ldr	r3, [pc, #260]	; (6398 <_usart_init+0x130>)
    6292:	4798      	blx	r3
	return 0;
    6294:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    6296:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    6298:	f013 0f01 	tst.w	r3, #1
    629c:	d122      	bne.n	62e4 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    629e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    62a2:	4a3e      	ldr	r2, [pc, #248]	; (639c <_usart_init+0x134>)
    62a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    62a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    62aa:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    62ae:	69e3      	ldr	r3, [r4, #28]
    62b0:	f013 0f03 	tst.w	r3, #3
    62b4:	d1fb      	bne.n	62ae <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    62b6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    62b8:	f013 0f02 	tst.w	r3, #2
    62bc:	d00b      	beq.n	62d6 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    62be:	6823      	ldr	r3, [r4, #0]
    62c0:	f023 0302 	bic.w	r3, r3, #2
    62c4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    62c6:	69e3      	ldr	r3, [r4, #28]
    62c8:	f013 0f03 	tst.w	r3, #3
    62cc:	d1fb      	bne.n	62c6 <_usart_init+0x5e>
    62ce:	69e3      	ldr	r3, [r4, #28]
    62d0:	f013 0f02 	tst.w	r3, #2
    62d4:	d1fb      	bne.n	62ce <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    62d6:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    62da:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    62dc:	69e3      	ldr	r3, [r4, #28]
    62de:	f013 0f03 	tst.w	r3, #3
    62e2:	d1fb      	bne.n	62dc <_usart_init+0x74>
    62e4:	69e3      	ldr	r3, [r4, #28]
    62e6:	f013 0f01 	tst.w	r3, #1
    62ea:	d1fb      	bne.n	62e4 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    62ec:	460a      	mov	r2, r1
    62ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    62f2:	4b2a      	ldr	r3, [pc, #168]	; (639c <_usart_init+0x134>)
    62f4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    62f8:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    62fa:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    62fc:	69e3      	ldr	r3, [r4, #28]
    62fe:	f013 0f03 	tst.w	r3, #3
    6302:	d1fb      	bne.n	62fc <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    6304:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6308:	4924      	ldr	r1, [pc, #144]	; (639c <_usart_init+0x134>)
    630a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    6310:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6312:	69e3      	ldr	r3, [r4, #28]
    6314:	f013 0f1f 	tst.w	r3, #31
    6318:	d1fb      	bne.n	6312 <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    631a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    631e:	491f      	ldr	r1, [pc, #124]	; (639c <_usart_init+0x134>)
    6320:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    6326:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    6328:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    632c:	d10f      	bne.n	634e <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    632e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6332:	491a      	ldr	r1, [pc, #104]	; (639c <_usart_init+0x134>)
    6334:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6338:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    633a:	81a3      	strh	r3, [r4, #12]
    633c:	e016      	b.n	636c <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    633e:	2101      	movs	r1, #1
    6340:	e7a9      	b.n	6296 <_usart_init+0x2e>
    6342:	2102      	movs	r1, #2
    6344:	e7a7      	b.n	6296 <_usart_init+0x2e>
    6346:	2103      	movs	r1, #3
    6348:	e7a5      	b.n	6296 <_usart_init+0x2e>
    634a:	2100      	movs	r1, #0
    634c:	e7a3      	b.n	6296 <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    634e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6352:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6356:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    6358:	89a1      	ldrh	r1, [r4, #12]
    635a:	f360 010c 	bfi	r1, r0, #0, #13
    635e:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    6360:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    6364:	89a3      	ldrh	r3, [r4, #12]
    6366:	f361 334f 	bfi	r3, r1, #13, #3
    636a:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    636c:	4b0b      	ldr	r3, [pc, #44]	; (639c <_usart_init+0x134>)
    636e:	0051      	lsls	r1, r2, #1
    6370:	1888      	adds	r0, r1, r2
    6372:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6376:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    637a:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    637c:	440a      	add	r2, r1
    637e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    6386:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    638a:	2000      	movs	r0, #0
    638c:	bd10      	pop	{r4, pc}
    638e:	bf00      	nop
    6390:	00006001 	.word	0x00006001
    6394:	0000bec4 	.word	0x0000bec4
    6398:	00005241 	.word	0x00005241
    639c:	0000bdf0 	.word	0x0000bdf0

000063a0 <_get_i2cm_index>:
{
    63a0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    63a2:	4b07      	ldr	r3, [pc, #28]	; (63c0 <_get_i2cm_index+0x20>)
    63a4:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    63a6:	2805      	cmp	r0, #5
    63a8:	d008      	beq.n	63bc <_get_i2cm_index+0x1c>
	ASSERT(false);
    63aa:	f240 32f3 	movw	r2, #1011	; 0x3f3
    63ae:	4905      	ldr	r1, [pc, #20]	; (63c4 <_get_i2cm_index+0x24>)
    63b0:	2000      	movs	r0, #0
    63b2:	4b05      	ldr	r3, [pc, #20]	; (63c8 <_get_i2cm_index+0x28>)
    63b4:	4798      	blx	r3
	return -1;
    63b6:	f04f 30ff 	mov.w	r0, #4294967295
}
    63ba:	bd08      	pop	{r3, pc}
			return i;
    63bc:	2000      	movs	r0, #0
    63be:	bd08      	pop	{r3, pc}
    63c0:	00006001 	.word	0x00006001
    63c4:	0000bec4 	.word	0x0000bec4
    63c8:	00005241 	.word	0x00005241

000063cc <_i2c_m_sync_init_impl>:
{
    63cc:	b538      	push	{r3, r4, r5, lr}
    63ce:	4605      	mov	r5, r0
    63d0:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    63d2:	4608      	mov	r0, r1
    63d4:	4b34      	ldr	r3, [pc, #208]	; (64a8 <_i2c_m_sync_init_impl+0xdc>)
    63d6:	4798      	blx	r3
    63d8:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    63da:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    63dc:	f013 0f01 	tst.w	r3, #1
    63e0:	d123      	bne.n	642a <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    63e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    63e6:	4a31      	ldr	r2, [pc, #196]	; (64ac <_i2c_m_sync_init_impl+0xe0>)
    63e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    63ec:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    63f0:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    63f4:	69e3      	ldr	r3, [r4, #28]
    63f6:	f013 0f03 	tst.w	r3, #3
    63fa:	d1fb      	bne.n	63f4 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    63fc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    63fe:	f013 0f02 	tst.w	r3, #2
    6402:	d00b      	beq.n	641c <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6404:	6823      	ldr	r3, [r4, #0]
    6406:	f023 0302 	bic.w	r3, r3, #2
    640a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    640c:	69e3      	ldr	r3, [r4, #28]
    640e:	f013 0f03 	tst.w	r3, #3
    6412:	d1fb      	bne.n	640c <_i2c_m_sync_init_impl+0x40>
    6414:	69e3      	ldr	r3, [r4, #28]
    6416:	f013 0f02 	tst.w	r3, #2
    641a:	d1fb      	bne.n	6414 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    641c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6420:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6422:	69e3      	ldr	r3, [r4, #28]
    6424:	f013 0f03 	tst.w	r3, #3
    6428:	d1fb      	bne.n	6422 <_i2c_m_sync_init_impl+0x56>
    642a:	69e3      	ldr	r3, [r4, #28]
    642c:	f013 0f01 	tst.w	r3, #1
    6430:	d1fb      	bne.n	642a <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6432:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6436:	4a1d      	ldr	r2, [pc, #116]	; (64ac <_i2c_m_sync_init_impl+0xe0>)
    6438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    643c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6440:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6442:	69e3      	ldr	r3, [r4, #28]
    6444:	f013 0f03 	tst.w	r3, #3
    6448:	d1fb      	bne.n	6442 <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    644a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    644e:	4917      	ldr	r1, [pc, #92]	; (64ac <_i2c_m_sync_init_impl+0xe0>)
    6450:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6458:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    645a:	69e3      	ldr	r3, [r4, #28]
    645c:	f013 0f04 	tst.w	r3, #4
    6460:	d1fb      	bne.n	645a <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6462:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6466:	4911      	ldr	r1, [pc, #68]	; (64ac <_i2c_m_sync_init_impl+0xe0>)
    6468:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    646c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6470:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6472:	f3c2 6301 	ubfx	r3, r2, #24, #2
    6476:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6478:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    647a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    647e:	2b01      	cmp	r3, #1
    6480:	bf94      	ite	ls
    6482:	2300      	movls	r3, #0
    6484:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6486:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    648a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    648c:	69e3      	ldr	r3, [r4, #28]
    648e:	f013 0f04 	tst.w	r3, #4
    6492:	d1fb      	bne.n	648c <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    6494:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6498:	4b04      	ldr	r3, [pc, #16]	; (64ac <_i2c_m_sync_init_impl+0xe0>)
    649a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    649e:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    64a2:	81eb      	strh	r3, [r5, #14]
}
    64a4:	2000      	movs	r0, #0
    64a6:	bd38      	pop	{r3, r4, r5, pc}
    64a8:	000063a1 	.word	0x000063a1
    64ac:	0000bdf0 	.word	0x0000bdf0

000064b0 <_sercom_i2c_m_irq_handler>:
{
    64b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64b4:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    64b6:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    64b8:	7e26      	ldrb	r6, [r4, #24]
    64ba:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    64bc:	f8df 8234 	ldr.w	r8, [pc, #564]	; 66f4 <_sercom_i2c_m_irq_handler+0x244>
    64c0:	f240 4265 	movw	r2, #1125	; 0x465
    64c4:	4641      	mov	r1, r8
    64c6:	3000      	adds	r0, #0
    64c8:	bf18      	it	ne
    64ca:	2001      	movne	r0, #1
    64cc:	4f88      	ldr	r7, [pc, #544]	; (66f0 <_sercom_i2c_m_irq_handler+0x240>)
    64ce:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    64d0:	6928      	ldr	r0, [r5, #16]
    64d2:	f240 4266 	movw	r2, #1126	; 0x466
    64d6:	4641      	mov	r1, r8
    64d8:	3000      	adds	r0, #0
    64da:	bf18      	it	ne
    64dc:	2001      	movne	r0, #1
    64de:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    64e0:	f016 0f80 	tst.w	r6, #128	; 0x80
    64e4:	f040 80f4 	bne.w	66d0 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    64e8:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    64ea:	69e3      	ldr	r3, [r4, #28]
    64ec:	f013 0f04 	tst.w	r3, #4
    64f0:	d1fb      	bne.n	64ea <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    64f2:	8b63      	ldrh	r3, [r4, #26]
    64f4:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    64f6:	f016 0f01 	tst.w	r6, #1
    64fa:	f000 8090 	beq.w	661e <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    64fe:	f013 0f02 	tst.w	r3, #2
    6502:	d022      	beq.n	654a <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6504:	2201      	movs	r2, #1
    6506:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    6508:	886a      	ldrh	r2, [r5, #2]
    650a:	b292      	uxth	r2, r2
    650c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6510:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    6512:	886a      	ldrh	r2, [r5, #2]
    6514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6518:	0412      	lsls	r2, r2, #16
    651a:	0c12      	lsrs	r2, r2, #16
    651c:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    651e:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    6522:	2b00      	cmp	r3, #0
    6524:	bf14      	ite	ne
    6526:	f06f 0104 	mvnne.w	r1, #4
    652a:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    652e:	886b      	ldrh	r3, [r5, #2]
    6530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6534:	041b      	lsls	r3, r3, #16
    6536:	0c1b      	lsrs	r3, r3, #16
    6538:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    653a:	696b      	ldr	r3, [r5, #20]
    653c:	2b00      	cmp	r3, #0
    653e:	f000 80c5 	beq.w	66cc <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    6542:	4628      	mov	r0, r5
    6544:	4798      	blx	r3
    6546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    654a:	f013 0f04 	tst.w	r3, #4
    654e:	d124      	bne.n	659a <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    6550:	886b      	ldrh	r3, [r5, #2]
    6552:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6556:	d03e      	beq.n	65d6 <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6558:	882b      	ldrh	r3, [r5, #0]
    655a:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    655c:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6560:	69e3      	ldr	r3, [r4, #28]
    6562:	f013 0f04 	tst.w	r3, #4
    6566:	d1fb      	bne.n	6560 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6568:	6a63      	ldr	r3, [r4, #36]	; 0x24
    656a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    656e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6572:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6574:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6576:	69e3      	ldr	r3, [r4, #28]
    6578:	f013 0f04 	tst.w	r3, #4
    657c:	d1fb      	bne.n	6576 <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    657e:	886b      	ldrh	r3, [r5, #2]
    6580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6584:	041b      	lsls	r3, r3, #16
    6586:	0c1b      	lsrs	r3, r3, #16
    6588:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    658a:	69ab      	ldr	r3, [r5, #24]
    658c:	2b00      	cmp	r3, #0
    658e:	f000 8088 	beq.w	66a2 <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    6592:	4628      	mov	r0, r5
    6594:	4798      	blx	r3
    6596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    659a:	686b      	ldr	r3, [r5, #4]
    659c:	2b00      	cmp	r3, #0
    659e:	dd04      	ble.n	65aa <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    65a0:	886b      	ldrh	r3, [r5, #2]
    65a2:	b29b      	uxth	r3, r3
    65a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    65a8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    65aa:	886b      	ldrh	r3, [r5, #2]
    65ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    65b0:	d108      	bne.n	65c4 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    65b2:	886b      	ldrh	r3, [r5, #2]
    65b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65b8:	041b      	lsls	r3, r3, #16
    65ba:	0c1b      	lsrs	r3, r3, #16
    65bc:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    65be:	f06f 0101 	mvn.w	r1, #1
    65c2:	e7b4      	b.n	652e <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    65c4:	6863      	ldr	r3, [r4, #4]
    65c6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    65ca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    65cc:	69e3      	ldr	r3, [r4, #28]
    65ce:	f013 0f04 	tst.w	r3, #4
    65d2:	d1fb      	bne.n	65cc <_sercom_i2c_m_irq_handler+0x11c>
    65d4:	e7ed      	b.n	65b2 <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    65d6:	686b      	ldr	r3, [r5, #4]
    65d8:	b99b      	cbnz	r3, 6602 <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    65da:	886b      	ldrh	r3, [r5, #2]
    65dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    65e0:	d106      	bne.n	65f0 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    65e2:	886b      	ldrh	r3, [r5, #2]
    65e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65e8:	041b      	lsls	r3, r3, #16
    65ea:	0c1b      	lsrs	r3, r3, #16
    65ec:	806b      	strh	r3, [r5, #2]
    65ee:	e7cc      	b.n	658a <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    65f0:	6863      	ldr	r3, [r4, #4]
    65f2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    65f6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    65f8:	69e3      	ldr	r3, [r4, #28]
    65fa:	f013 0f04 	tst.w	r3, #4
    65fe:	d1fb      	bne.n	65f8 <_sercom_i2c_m_irq_handler+0x148>
    6600:	e7ef      	b.n	65e2 <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6602:	68ab      	ldr	r3, [r5, #8]
    6604:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6606:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6608:	69e3      	ldr	r3, [r4, #28]
    660a:	f013 0f04 	tst.w	r3, #4
    660e:	d1fb      	bne.n	6608 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    6610:	68ab      	ldr	r3, [r5, #8]
    6612:	3301      	adds	r3, #1
    6614:	60ab      	str	r3, [r5, #8]
				msg->len--;
    6616:	686b      	ldr	r3, [r5, #4]
    6618:	3b01      	subs	r3, #1
    661a:	606b      	str	r3, [r5, #4]
    661c:	e7b5      	b.n	658a <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    661e:	f016 0f02 	tst.w	r6, #2
    6622:	d041      	beq.n	66a8 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6624:	686a      	ldr	r2, [r5, #4]
    6626:	2a00      	cmp	r2, #0
    6628:	d036      	beq.n	6698 <_sercom_i2c_m_irq_handler+0x1e8>
    662a:	f013 0f04 	tst.w	r3, #4
    662e:	d133      	bne.n	6698 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6630:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    6634:	3a01      	subs	r2, #1
    6636:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6638:	2a00      	cmp	r2, #0
    663a:	d137      	bne.n	66ac <_sercom_i2c_m_irq_handler+0x1fc>
    663c:	2900      	cmp	r1, #0
    663e:	d039      	beq.n	66b4 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    6640:	886b      	ldrh	r3, [r5, #2]
    6642:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6646:	d116      	bne.n	6676 <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    6648:	886b      	ldrh	r3, [r5, #2]
    664a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    664e:	041b      	lsls	r3, r3, #16
    6650:	0c1b      	lsrs	r3, r3, #16
    6652:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6654:	68aa      	ldr	r2, [r5, #8]
    6656:	1c53      	adds	r3, r2, #1
    6658:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    665a:	69e3      	ldr	r3, [r4, #28]
    665c:	f013 0f04 	tst.w	r3, #4
    6660:	d1fb      	bne.n	665a <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6662:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6664:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6666:	2302      	movs	r3, #2
    6668:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    666a:	69eb      	ldr	r3, [r5, #28]
    666c:	b1e3      	cbz	r3, 66a8 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    666e:	4628      	mov	r0, r5
    6670:	4798      	blx	r3
    6672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6676:	6863      	ldr	r3, [r4, #4]
    6678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    667c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    667e:	69e3      	ldr	r3, [r4, #28]
    6680:	f013 0f04 	tst.w	r3, #4
    6684:	d1fb      	bne.n	667e <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6686:	6863      	ldr	r3, [r4, #4]
    6688:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    668c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    668e:	69e3      	ldr	r3, [r4, #28]
    6690:	f013 0f04 	tst.w	r3, #4
    6694:	d1fb      	bne.n	668e <_sercom_i2c_m_irq_handler+0x1de>
    6696:	e7d7      	b.n	6648 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6698:	2302      	movs	r3, #2
    669a:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    669c:	f06f 0101 	mvn.w	r1, #1
    66a0:	e745      	b.n	652e <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    66a2:	f016 0f02 	tst.w	r6, #2
    66a6:	d1e0      	bne.n	666a <_sercom_i2c_m_irq_handler+0x1ba>
    66a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    66ac:	2a01      	cmp	r2, #1
    66ae:	d1d1      	bne.n	6654 <_sercom_i2c_m_irq_handler+0x1a4>
    66b0:	2900      	cmp	r1, #0
    66b2:	d0cf      	beq.n	6654 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    66b4:	6863      	ldr	r3, [r4, #4]
    66b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    66ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    66bc:	69e3      	ldr	r3, [r4, #28]
    66be:	f013 0f04 	tst.w	r3, #4
    66c2:	d1fb      	bne.n	66bc <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    66c4:	686b      	ldr	r3, [r5, #4]
    66c6:	2b00      	cmp	r3, #0
    66c8:	d0ba      	beq.n	6640 <_sercom_i2c_m_irq_handler+0x190>
    66ca:	e7c3      	b.n	6654 <_sercom_i2c_m_irq_handler+0x1a4>
    66cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    66d0:	886b      	ldrh	r3, [r5, #2]
    66d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    66d6:	041b      	lsls	r3, r3, #16
    66d8:	0c1b      	lsrs	r3, r3, #16
    66da:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    66dc:	696b      	ldr	r3, [r5, #20]
    66de:	2b00      	cmp	r3, #0
    66e0:	d0e2      	beq.n	66a8 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    66e2:	f06f 0104 	mvn.w	r1, #4
    66e6:	4628      	mov	r0, r5
    66e8:	4798      	blx	r3
    66ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66ee:	bf00      	nop
    66f0:	00005241 	.word	0x00005241
    66f4:	0000bec4 	.word	0x0000bec4

000066f8 <_usart_async_init>:
{
    66f8:	b570      	push	{r4, r5, r6, lr}
    66fa:	460d      	mov	r5, r1
	ASSERT(device);
    66fc:	4606      	mov	r6, r0
    66fe:	22d8      	movs	r2, #216	; 0xd8
    6700:	4917      	ldr	r1, [pc, #92]	; (6760 <_usart_async_init+0x68>)
    6702:	3000      	adds	r0, #0
    6704:	bf18      	it	ne
    6706:	2001      	movne	r0, #1
    6708:	4b16      	ldr	r3, [pc, #88]	; (6764 <_usart_async_init+0x6c>)
    670a:	4798      	blx	r3
	init_status = _usart_init(hw);
    670c:	4628      	mov	r0, r5
    670e:	4b16      	ldr	r3, [pc, #88]	; (6768 <_usart_async_init+0x70>)
    6710:	4798      	blx	r3
	if (init_status) {
    6712:	4604      	mov	r4, r0
    6714:	b108      	cbz	r0, 671a <_usart_async_init+0x22>
}
    6716:	4620      	mov	r0, r4
    6718:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    671a:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    671c:	4631      	mov	r1, r6
    671e:	4628      	mov	r0, r5
    6720:	4b12      	ldr	r3, [pc, #72]	; (676c <_usart_async_init+0x74>)
    6722:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6724:	4628      	mov	r0, r5
    6726:	4b12      	ldr	r3, [pc, #72]	; (6770 <_usart_async_init+0x78>)
    6728:	4798      	blx	r3
    672a:	1d01      	adds	r1, r0, #4
    672c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    672e:	2501      	movs	r5, #1
    6730:	f000 021f 	and.w	r2, r0, #31
    6734:	fa05 f202 	lsl.w	r2, r5, r2
    6738:	0943      	lsrs	r3, r0, #5
    673a:	009b      	lsls	r3, r3, #2
    673c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6740:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    674c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6750:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6754:	601a      	str	r2, [r3, #0]
		irq++;
    6756:	3001      	adds	r0, #1
    6758:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    675a:	4281      	cmp	r1, r0
    675c:	d1e8      	bne.n	6730 <_usart_async_init+0x38>
    675e:	e7da      	b.n	6716 <_usart_async_init+0x1e>
    6760:	0000bec4 	.word	0x0000bec4
    6764:	00005241 	.word	0x00005241
    6768:	00006269 	.word	0x00006269
    676c:	000060b5 	.word	0x000060b5
    6770:	00006125 	.word	0x00006125

00006774 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    6774:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6776:	6813      	ldr	r3, [r2, #0]
    6778:	f043 0302 	orr.w	r3, r3, #2
    677c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    677e:	69d3      	ldr	r3, [r2, #28]
    6780:	f013 0f03 	tst.w	r3, #3
    6784:	d1fb      	bne.n	677e <_usart_async_enable+0xa>
}
    6786:	4770      	bx	lr

00006788 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    6788:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    678a:	6299      	str	r1, [r3, #40]	; 0x28
    678c:	4770      	bx	lr

0000678e <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    678e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6790:	2201      	movs	r2, #1
    6792:	759a      	strb	r2, [r3, #22]
    6794:	4770      	bx	lr

00006796 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    6796:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    6798:	2202      	movs	r2, #2
    679a:	759a      	strb	r2, [r3, #22]
    679c:	4770      	bx	lr
	...

000067a0 <_usart_async_set_irq_state>:
{
    67a0:	b570      	push	{r4, r5, r6, lr}
    67a2:	460c      	mov	r4, r1
    67a4:	4616      	mov	r6, r2
	ASSERT(device);
    67a6:	4605      	mov	r5, r0
    67a8:	f44f 720e 	mov.w	r2, #568	; 0x238
    67ac:	4915      	ldr	r1, [pc, #84]	; (6804 <_usart_async_set_irq_state+0x64>)
    67ae:	3000      	adds	r0, #0
    67b0:	bf18      	it	ne
    67b2:	2001      	movne	r0, #1
    67b4:	4b14      	ldr	r3, [pc, #80]	; (6808 <_usart_async_set_irq_state+0x68>)
    67b6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    67b8:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    67bc:	d10d      	bne.n	67da <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    67be:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    67c0:	b92e      	cbnz	r6, 67ce <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    67c2:	2201      	movs	r2, #1
    67c4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    67c6:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    67c8:	2202      	movs	r2, #2
    67ca:	751a      	strb	r2, [r3, #20]
    67cc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    67ce:	2201      	movs	r2, #1
    67d0:	759a      	strb	r2, [r3, #22]
    67d2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    67d4:	2202      	movs	r2, #2
    67d6:	759a      	strb	r2, [r3, #22]
    67d8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    67da:	2c01      	cmp	r4, #1
    67dc:	d002      	beq.n	67e4 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    67de:	2c03      	cmp	r4, #3
    67e0:	d008      	beq.n	67f4 <_usart_async_set_irq_state+0x54>
    67e2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    67e4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    67e6:	b916      	cbnz	r6, 67ee <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    67e8:	2204      	movs	r2, #4
    67ea:	751a      	strb	r2, [r3, #20]
    67ec:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    67ee:	2204      	movs	r2, #4
    67f0:	759a      	strb	r2, [r3, #22]
    67f2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    67f4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    67f6:	b116      	cbz	r6, 67fe <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    67f8:	2280      	movs	r2, #128	; 0x80
    67fa:	759a      	strb	r2, [r3, #22]
}
    67fc:	e7f1      	b.n	67e2 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    67fe:	2280      	movs	r2, #128	; 0x80
    6800:	751a      	strb	r2, [r3, #20]
    6802:	bd70      	pop	{r4, r5, r6, pc}
    6804:	0000bec4 	.word	0x0000bec4
    6808:	00005241 	.word	0x00005241

0000680c <_i2c_m_async_init>:
{
    680c:	b570      	push	{r4, r5, r6, lr}
    680e:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    6810:	4606      	mov	r6, r0
    6812:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
    6816:	4918      	ldr	r1, [pc, #96]	; (6878 <_i2c_m_async_init+0x6c>)
    6818:	3000      	adds	r0, #0
    681a:	bf18      	it	ne
    681c:	2001      	movne	r0, #1
    681e:	4b17      	ldr	r3, [pc, #92]	; (687c <_i2c_m_async_init+0x70>)
    6820:	4798      	blx	r3
	i2c_dev->hw = hw;
    6822:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6824:	4629      	mov	r1, r5
    6826:	4630      	mov	r0, r6
    6828:	4b15      	ldr	r3, [pc, #84]	; (6880 <_i2c_m_async_init+0x74>)
    682a:	4798      	blx	r3
	if (init_status) {
    682c:	4604      	mov	r4, r0
    682e:	b108      	cbz	r0, 6834 <_i2c_m_async_init+0x28>
}
    6830:	4620      	mov	r0, r4
    6832:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6834:	4631      	mov	r1, r6
    6836:	4628      	mov	r0, r5
    6838:	4b12      	ldr	r3, [pc, #72]	; (6884 <_i2c_m_async_init+0x78>)
    683a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    683c:	4628      	mov	r0, r5
    683e:	4b12      	ldr	r3, [pc, #72]	; (6888 <_i2c_m_async_init+0x7c>)
    6840:	4798      	blx	r3
    6842:	1d01      	adds	r1, r0, #4
    6844:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6846:	2501      	movs	r5, #1
    6848:	f000 021f 	and.w	r2, r0, #31
    684c:	fa05 f202 	lsl.w	r2, r5, r2
    6850:	0943      	lsrs	r3, r0, #5
    6852:	009b      	lsls	r3, r3, #2
    6854:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6858:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    685c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6860:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6864:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6868:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    686c:	601a      	str	r2, [r3, #0]
		irq++;
    686e:	3001      	adds	r0, #1
    6870:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6872:	4281      	cmp	r1, r0
    6874:	d1e8      	bne.n	6848 <_i2c_m_async_init+0x3c>
    6876:	e7db      	b.n	6830 <_i2c_m_async_init+0x24>
    6878:	0000bec4 	.word	0x0000bec4
    687c:	00005241 	.word	0x00005241
    6880:	000063cd 	.word	0x000063cd
    6884:	000060b5 	.word	0x000060b5
    6888:	00006125 	.word	0x00006125

0000688c <_i2c_m_async_transfer>:
{
    688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6890:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    6892:	4605      	mov	r5, r0
    6894:	f110 0800 	adds.w	r8, r0, #0
    6898:	bf18      	it	ne
    689a:	f04f 0801 	movne.w	r8, #1
    689e:	4f45      	ldr	r7, [pc, #276]	; (69b4 <_i2c_m_async_transfer+0x128>)
    68a0:	f240 522e 	movw	r2, #1326	; 0x52e
    68a4:	4639      	mov	r1, r7
    68a6:	4640      	mov	r0, r8
    68a8:	4e43      	ldr	r6, [pc, #268]	; (69b8 <_i2c_m_async_transfer+0x12c>)
    68aa:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    68ac:	6928      	ldr	r0, [r5, #16]
    68ae:	f240 522f 	movw	r2, #1327	; 0x52f
    68b2:	4639      	mov	r1, r7
    68b4:	3000      	adds	r0, #0
    68b6:	bf18      	it	ne
    68b8:	2001      	movne	r0, #1
    68ba:	47b0      	blx	r6
	ASSERT(msg);
    68bc:	f44f 62a6 	mov.w	r2, #1328	; 0x530
    68c0:	4639      	mov	r1, r7
    68c2:	1c20      	adds	r0, r4, #0
    68c4:	bf18      	it	ne
    68c6:	2001      	movne	r0, #1
    68c8:	47b0      	blx	r6
	if (msg->len == 0) {
    68ca:	6860      	ldr	r0, [r4, #4]
    68cc:	2800      	cmp	r0, #0
    68ce:	d06f      	beq.n	69b0 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    68d0:	886b      	ldrh	r3, [r5, #2]
    68d2:	f413 7f80 	tst.w	r3, #256	; 0x100
    68d6:	d169      	bne.n	69ac <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    68d8:	8863      	ldrh	r3, [r4, #2]
    68da:	b29b      	uxth	r3, r3
    68dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    68e0:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    68e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    68e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    68ea:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    68ec:	6853      	ldr	r3, [r2, #4]
    68ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    68f2:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    68f4:	69d3      	ldr	r3, [r2, #28]
    68f6:	f013 0f04 	tst.w	r3, #4
    68fa:	d1fb      	bne.n	68f4 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    68fc:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    68fe:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    6900:	f240 5206 	movw	r2, #1286	; 0x506
    6904:	492b      	ldr	r1, [pc, #172]	; (69b4 <_i2c_m_async_transfer+0x128>)
    6906:	4640      	mov	r0, r8
    6908:	4b2b      	ldr	r3, [pc, #172]	; (69b8 <_i2c_m_async_transfer+0x12c>)
    690a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    690c:	686b      	ldr	r3, [r5, #4]
    690e:	2b01      	cmp	r3, #1
    6910:	d02a      	beq.n	6968 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6912:	6863      	ldr	r3, [r4, #4]
    6914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    6918:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    691a:	69e3      	ldr	r3, [r4, #28]
    691c:	f013 0f04 	tst.w	r3, #4
    6920:	d1fb      	bne.n	691a <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    6922:	882b      	ldrh	r3, [r5, #0]
    6924:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6928:	d02a      	beq.n	6980 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    692a:	886a      	ldrh	r2, [r5, #2]
    692c:	f012 0f01 	tst.w	r2, #1
    6930:	d004      	beq.n	693c <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    6932:	886a      	ldrh	r2, [r5, #2]
    6934:	b292      	uxth	r2, r2
    6936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    693a:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    693c:	f240 72fe 	movw	r2, #2046	; 0x7fe
    6940:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    6944:	69e3      	ldr	r3, [r4, #28]
    6946:	f013 0f04 	tst.w	r3, #4
    694a:	d1fb      	bne.n	6944 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    694c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    694e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6956:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6958:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    695a:	69e3      	ldr	r3, [r4, #28]
    695c:	f013 0f04 	tst.w	r3, #4
    6960:	d1fb      	bne.n	695a <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    6962:	2000      	movs	r0, #0
    6964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    6968:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    696c:	d0d1      	beq.n	6912 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    696e:	6863      	ldr	r3, [r4, #4]
    6970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    6974:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6976:	69e3      	ldr	r3, [r4, #28]
    6978:	f013 0f04 	tst.w	r3, #4
    697c:	d1fb      	bne.n	6976 <_i2c_m_async_transfer+0xea>
    697e:	e7d0      	b.n	6922 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6980:	8869      	ldrh	r1, [r5, #2]
    6982:	005a      	lsls	r2, r3, #1
    6984:	b2d2      	uxtb	r2, r2
    6986:	f001 0301 	and.w	r3, r1, #1
    698a:	431a      	orrs	r2, r3
    698c:	69e3      	ldr	r3, [r4, #28]
    698e:	f013 0f04 	tst.w	r3, #4
    6992:	d1fb      	bne.n	698c <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6994:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    699a:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    699c:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    699e:	69e3      	ldr	r3, [r4, #28]
    69a0:	f013 0f04 	tst.w	r3, #4
    69a4:	d1fb      	bne.n	699e <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    69a6:	2000      	movs	r0, #0
    69a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    69ac:	f06f 0003 	mvn.w	r0, #3
}
    69b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69b4:	0000bec4 	.word	0x0000bec4
    69b8:	00005241 	.word	0x00005241

000069bc <_i2c_m_async_register_callback>:
	switch (type) {
    69bc:	2901      	cmp	r1, #1
    69be:	d006      	beq.n	69ce <_i2c_m_async_register_callback+0x12>
    69c0:	b119      	cbz	r1, 69ca <_i2c_m_async_register_callback+0xe>
    69c2:	2902      	cmp	r1, #2
    69c4:	d005      	beq.n	69d2 <_i2c_m_async_register_callback+0x16>
}
    69c6:	2000      	movs	r0, #0
    69c8:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    69ca:	6142      	str	r2, [r0, #20]
		break;
    69cc:	e7fb      	b.n	69c6 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    69ce:	6182      	str	r2, [r0, #24]
		break;
    69d0:	e7f9      	b.n	69c6 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    69d2:	61c2      	str	r2, [r0, #28]
		break;
    69d4:	e7f7      	b.n	69c6 <_i2c_m_async_register_callback+0xa>
	...

000069d8 <SERCOM0_0_Handler>:
{
    69d8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    69da:	4b02      	ldr	r3, [pc, #8]	; (69e4 <SERCOM0_0_Handler+0xc>)
    69dc:	6818      	ldr	r0, [r3, #0]
    69de:	4b02      	ldr	r3, [pc, #8]	; (69e8 <SERCOM0_0_Handler+0x10>)
    69e0:	4798      	blx	r3
    69e2:	bd08      	pop	{r3, pc}
    69e4:	20000d94 	.word	0x20000d94
    69e8:	00006045 	.word	0x00006045

000069ec <SERCOM0_1_Handler>:
{
    69ec:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    69ee:	4b02      	ldr	r3, [pc, #8]	; (69f8 <SERCOM0_1_Handler+0xc>)
    69f0:	6818      	ldr	r0, [r3, #0]
    69f2:	4b02      	ldr	r3, [pc, #8]	; (69fc <SERCOM0_1_Handler+0x10>)
    69f4:	4798      	blx	r3
    69f6:	bd08      	pop	{r3, pc}
    69f8:	20000d94 	.word	0x20000d94
    69fc:	00006045 	.word	0x00006045

00006a00 <SERCOM0_2_Handler>:
{
    6a00:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6a02:	4b02      	ldr	r3, [pc, #8]	; (6a0c <SERCOM0_2_Handler+0xc>)
    6a04:	6818      	ldr	r0, [r3, #0]
    6a06:	4b02      	ldr	r3, [pc, #8]	; (6a10 <SERCOM0_2_Handler+0x10>)
    6a08:	4798      	blx	r3
    6a0a:	bd08      	pop	{r3, pc}
    6a0c:	20000d94 	.word	0x20000d94
    6a10:	00006045 	.word	0x00006045

00006a14 <SERCOM0_3_Handler>:
{
    6a14:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6a16:	4b02      	ldr	r3, [pc, #8]	; (6a20 <SERCOM0_3_Handler+0xc>)
    6a18:	6818      	ldr	r0, [r3, #0]
    6a1a:	4b02      	ldr	r3, [pc, #8]	; (6a24 <SERCOM0_3_Handler+0x10>)
    6a1c:	4798      	blx	r3
    6a1e:	bd08      	pop	{r3, pc}
    6a20:	20000d94 	.word	0x20000d94
    6a24:	00006045 	.word	0x00006045

00006a28 <SERCOM1_0_Handler>:
{
    6a28:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a2a:	4b02      	ldr	r3, [pc, #8]	; (6a34 <SERCOM1_0_Handler+0xc>)
    6a2c:	6858      	ldr	r0, [r3, #4]
    6a2e:	4b02      	ldr	r3, [pc, #8]	; (6a38 <SERCOM1_0_Handler+0x10>)
    6a30:	4798      	blx	r3
    6a32:	bd08      	pop	{r3, pc}
    6a34:	20000d94 	.word	0x20000d94
    6a38:	00006045 	.word	0x00006045

00006a3c <SERCOM1_1_Handler>:
{
    6a3c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a3e:	4b02      	ldr	r3, [pc, #8]	; (6a48 <SERCOM1_1_Handler+0xc>)
    6a40:	6858      	ldr	r0, [r3, #4]
    6a42:	4b02      	ldr	r3, [pc, #8]	; (6a4c <SERCOM1_1_Handler+0x10>)
    6a44:	4798      	blx	r3
    6a46:	bd08      	pop	{r3, pc}
    6a48:	20000d94 	.word	0x20000d94
    6a4c:	00006045 	.word	0x00006045

00006a50 <SERCOM1_2_Handler>:
{
    6a50:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a52:	4b02      	ldr	r3, [pc, #8]	; (6a5c <SERCOM1_2_Handler+0xc>)
    6a54:	6858      	ldr	r0, [r3, #4]
    6a56:	4b02      	ldr	r3, [pc, #8]	; (6a60 <SERCOM1_2_Handler+0x10>)
    6a58:	4798      	blx	r3
    6a5a:	bd08      	pop	{r3, pc}
    6a5c:	20000d94 	.word	0x20000d94
    6a60:	00006045 	.word	0x00006045

00006a64 <SERCOM1_3_Handler>:
{
    6a64:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a66:	4b02      	ldr	r3, [pc, #8]	; (6a70 <SERCOM1_3_Handler+0xc>)
    6a68:	6858      	ldr	r0, [r3, #4]
    6a6a:	4b02      	ldr	r3, [pc, #8]	; (6a74 <SERCOM1_3_Handler+0x10>)
    6a6c:	4798      	blx	r3
    6a6e:	bd08      	pop	{r3, pc}
    6a70:	20000d94 	.word	0x20000d94
    6a74:	00006045 	.word	0x00006045

00006a78 <SERCOM2_0_Handler>:
{
    6a78:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6a7a:	4b02      	ldr	r3, [pc, #8]	; (6a84 <SERCOM2_0_Handler+0xc>)
    6a7c:	6898      	ldr	r0, [r3, #8]
    6a7e:	4b02      	ldr	r3, [pc, #8]	; (6a88 <SERCOM2_0_Handler+0x10>)
    6a80:	4798      	blx	r3
    6a82:	bd08      	pop	{r3, pc}
    6a84:	20000d94 	.word	0x20000d94
    6a88:	00006045 	.word	0x00006045

00006a8c <SERCOM2_1_Handler>:
{
    6a8c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6a8e:	4b02      	ldr	r3, [pc, #8]	; (6a98 <SERCOM2_1_Handler+0xc>)
    6a90:	6898      	ldr	r0, [r3, #8]
    6a92:	4b02      	ldr	r3, [pc, #8]	; (6a9c <SERCOM2_1_Handler+0x10>)
    6a94:	4798      	blx	r3
    6a96:	bd08      	pop	{r3, pc}
    6a98:	20000d94 	.word	0x20000d94
    6a9c:	00006045 	.word	0x00006045

00006aa0 <SERCOM2_2_Handler>:
{
    6aa0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6aa2:	4b02      	ldr	r3, [pc, #8]	; (6aac <SERCOM2_2_Handler+0xc>)
    6aa4:	6898      	ldr	r0, [r3, #8]
    6aa6:	4b02      	ldr	r3, [pc, #8]	; (6ab0 <SERCOM2_2_Handler+0x10>)
    6aa8:	4798      	blx	r3
    6aaa:	bd08      	pop	{r3, pc}
    6aac:	20000d94 	.word	0x20000d94
    6ab0:	00006045 	.word	0x00006045

00006ab4 <SERCOM2_3_Handler>:
{
    6ab4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6ab6:	4b02      	ldr	r3, [pc, #8]	; (6ac0 <SERCOM2_3_Handler+0xc>)
    6ab8:	6898      	ldr	r0, [r3, #8]
    6aba:	4b02      	ldr	r3, [pc, #8]	; (6ac4 <SERCOM2_3_Handler+0x10>)
    6abc:	4798      	blx	r3
    6abe:	bd08      	pop	{r3, pc}
    6ac0:	20000d94 	.word	0x20000d94
    6ac4:	00006045 	.word	0x00006045

00006ac8 <SERCOM3_0_Handler>:
{
    6ac8:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6aca:	4b02      	ldr	r3, [pc, #8]	; (6ad4 <SERCOM3_0_Handler+0xc>)
    6acc:	68d8      	ldr	r0, [r3, #12]
    6ace:	4b02      	ldr	r3, [pc, #8]	; (6ad8 <SERCOM3_0_Handler+0x10>)
    6ad0:	4798      	blx	r3
    6ad2:	bd08      	pop	{r3, pc}
    6ad4:	20000d94 	.word	0x20000d94
    6ad8:	000061cf 	.word	0x000061cf

00006adc <SERCOM3_1_Handler>:
{
    6adc:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6ade:	4b02      	ldr	r3, [pc, #8]	; (6ae8 <SERCOM3_1_Handler+0xc>)
    6ae0:	68d8      	ldr	r0, [r3, #12]
    6ae2:	4b02      	ldr	r3, [pc, #8]	; (6aec <SERCOM3_1_Handler+0x10>)
    6ae4:	4798      	blx	r3
    6ae6:	bd08      	pop	{r3, pc}
    6ae8:	20000d94 	.word	0x20000d94
    6aec:	000061cf 	.word	0x000061cf

00006af0 <SERCOM3_2_Handler>:
{
    6af0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6af2:	4b02      	ldr	r3, [pc, #8]	; (6afc <SERCOM3_2_Handler+0xc>)
    6af4:	68d8      	ldr	r0, [r3, #12]
    6af6:	4b02      	ldr	r3, [pc, #8]	; (6b00 <SERCOM3_2_Handler+0x10>)
    6af8:	4798      	blx	r3
    6afa:	bd08      	pop	{r3, pc}
    6afc:	20000d94 	.word	0x20000d94
    6b00:	000061cf 	.word	0x000061cf

00006b04 <SERCOM3_3_Handler>:
{
    6b04:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6b06:	4b02      	ldr	r3, [pc, #8]	; (6b10 <SERCOM3_3_Handler+0xc>)
    6b08:	68d8      	ldr	r0, [r3, #12]
    6b0a:	4b02      	ldr	r3, [pc, #8]	; (6b14 <SERCOM3_3_Handler+0x10>)
    6b0c:	4798      	blx	r3
    6b0e:	bd08      	pop	{r3, pc}
    6b10:	20000d94 	.word	0x20000d94
    6b14:	000061cf 	.word	0x000061cf

00006b18 <SERCOM4_0_Handler>:
{
    6b18:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b1a:	4b02      	ldr	r3, [pc, #8]	; (6b24 <SERCOM4_0_Handler+0xc>)
    6b1c:	6918      	ldr	r0, [r3, #16]
    6b1e:	4b02      	ldr	r3, [pc, #8]	; (6b28 <SERCOM4_0_Handler+0x10>)
    6b20:	4798      	blx	r3
    6b22:	bd08      	pop	{r3, pc}
    6b24:	20000d94 	.word	0x20000d94
    6b28:	00006045 	.word	0x00006045

00006b2c <SERCOM4_1_Handler>:
{
    6b2c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b2e:	4b02      	ldr	r3, [pc, #8]	; (6b38 <SERCOM4_1_Handler+0xc>)
    6b30:	6918      	ldr	r0, [r3, #16]
    6b32:	4b02      	ldr	r3, [pc, #8]	; (6b3c <SERCOM4_1_Handler+0x10>)
    6b34:	4798      	blx	r3
    6b36:	bd08      	pop	{r3, pc}
    6b38:	20000d94 	.word	0x20000d94
    6b3c:	00006045 	.word	0x00006045

00006b40 <SERCOM4_2_Handler>:
{
    6b40:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b42:	4b02      	ldr	r3, [pc, #8]	; (6b4c <SERCOM4_2_Handler+0xc>)
    6b44:	6918      	ldr	r0, [r3, #16]
    6b46:	4b02      	ldr	r3, [pc, #8]	; (6b50 <SERCOM4_2_Handler+0x10>)
    6b48:	4798      	blx	r3
    6b4a:	bd08      	pop	{r3, pc}
    6b4c:	20000d94 	.word	0x20000d94
    6b50:	00006045 	.word	0x00006045

00006b54 <SERCOM4_3_Handler>:
{
    6b54:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b56:	4b02      	ldr	r3, [pc, #8]	; (6b60 <SERCOM4_3_Handler+0xc>)
    6b58:	6918      	ldr	r0, [r3, #16]
    6b5a:	4b02      	ldr	r3, [pc, #8]	; (6b64 <SERCOM4_3_Handler+0x10>)
    6b5c:	4798      	blx	r3
    6b5e:	bd08      	pop	{r3, pc}
    6b60:	20000d94 	.word	0x20000d94
    6b64:	00006045 	.word	0x00006045

00006b68 <SERCOM5_0_Handler>:
{
    6b68:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6b6a:	4b02      	ldr	r3, [pc, #8]	; (6b74 <SERCOM5_0_Handler+0xc>)
    6b6c:	6958      	ldr	r0, [r3, #20]
    6b6e:	4b02      	ldr	r3, [pc, #8]	; (6b78 <SERCOM5_0_Handler+0x10>)
    6b70:	4798      	blx	r3
    6b72:	bd08      	pop	{r3, pc}
    6b74:	20000d94 	.word	0x20000d94
    6b78:	000064b1 	.word	0x000064b1

00006b7c <SERCOM5_1_Handler>:
{
    6b7c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6b7e:	4b02      	ldr	r3, [pc, #8]	; (6b88 <SERCOM5_1_Handler+0xc>)
    6b80:	6958      	ldr	r0, [r3, #20]
    6b82:	4b02      	ldr	r3, [pc, #8]	; (6b8c <SERCOM5_1_Handler+0x10>)
    6b84:	4798      	blx	r3
    6b86:	bd08      	pop	{r3, pc}
    6b88:	20000d94 	.word	0x20000d94
    6b8c:	000064b1 	.word	0x000064b1

00006b90 <SERCOM5_2_Handler>:
{
    6b90:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6b92:	4b02      	ldr	r3, [pc, #8]	; (6b9c <SERCOM5_2_Handler+0xc>)
    6b94:	6958      	ldr	r0, [r3, #20]
    6b96:	4b02      	ldr	r3, [pc, #8]	; (6ba0 <SERCOM5_2_Handler+0x10>)
    6b98:	4798      	blx	r3
    6b9a:	bd08      	pop	{r3, pc}
    6b9c:	20000d94 	.word	0x20000d94
    6ba0:	000064b1 	.word	0x000064b1

00006ba4 <SERCOM5_3_Handler>:
{
    6ba4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6ba6:	4b02      	ldr	r3, [pc, #8]	; (6bb0 <SERCOM5_3_Handler+0xc>)
    6ba8:	6958      	ldr	r0, [r3, #20]
    6baa:	4b02      	ldr	r3, [pc, #8]	; (6bb4 <SERCOM5_3_Handler+0x10>)
    6bac:	4798      	blx	r3
    6bae:	bd08      	pop	{r3, pc}
    6bb0:	20000d94 	.word	0x20000d94
    6bb4:	000064b1 	.word	0x000064b1

00006bb8 <SERCOM6_0_Handler>:
{
    6bb8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6bba:	4b02      	ldr	r3, [pc, #8]	; (6bc4 <SERCOM6_0_Handler+0xc>)
    6bbc:	6998      	ldr	r0, [r3, #24]
    6bbe:	4b02      	ldr	r3, [pc, #8]	; (6bc8 <SERCOM6_0_Handler+0x10>)
    6bc0:	4798      	blx	r3
    6bc2:	bd08      	pop	{r3, pc}
    6bc4:	20000d94 	.word	0x20000d94
    6bc8:	00006045 	.word	0x00006045

00006bcc <SERCOM6_1_Handler>:
{
    6bcc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6bce:	4b02      	ldr	r3, [pc, #8]	; (6bd8 <SERCOM6_1_Handler+0xc>)
    6bd0:	6998      	ldr	r0, [r3, #24]
    6bd2:	4b02      	ldr	r3, [pc, #8]	; (6bdc <SERCOM6_1_Handler+0x10>)
    6bd4:	4798      	blx	r3
    6bd6:	bd08      	pop	{r3, pc}
    6bd8:	20000d94 	.word	0x20000d94
    6bdc:	00006045 	.word	0x00006045

00006be0 <SERCOM6_2_Handler>:
{
    6be0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6be2:	4b02      	ldr	r3, [pc, #8]	; (6bec <SERCOM6_2_Handler+0xc>)
    6be4:	6998      	ldr	r0, [r3, #24]
    6be6:	4b02      	ldr	r3, [pc, #8]	; (6bf0 <SERCOM6_2_Handler+0x10>)
    6be8:	4798      	blx	r3
    6bea:	bd08      	pop	{r3, pc}
    6bec:	20000d94 	.word	0x20000d94
    6bf0:	00006045 	.word	0x00006045

00006bf4 <SERCOM6_3_Handler>:
{
    6bf4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6bf6:	4b02      	ldr	r3, [pc, #8]	; (6c00 <SERCOM6_3_Handler+0xc>)
    6bf8:	6998      	ldr	r0, [r3, #24]
    6bfa:	4b02      	ldr	r3, [pc, #8]	; (6c04 <SERCOM6_3_Handler+0x10>)
    6bfc:	4798      	blx	r3
    6bfe:	bd08      	pop	{r3, pc}
    6c00:	20000d94 	.word	0x20000d94
    6c04:	00006045 	.word	0x00006045

00006c08 <_spi_m_sync_init>:
{
    6c08:	b570      	push	{r4, r5, r6, lr}
    6c0a:	4606      	mov	r6, r0
    6c0c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6c0e:	4608      	mov	r0, r1
    6c10:	4b5d      	ldr	r3, [pc, #372]	; (6d88 <_spi_m_sync_init+0x180>)
    6c12:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    6c14:	2803      	cmp	r0, #3
    6c16:	d00c      	beq.n	6c32 <_spi_m_sync_init+0x2a>
    6c18:	2807      	cmp	r0, #7
    6c1a:	bf08      	it	eq
    6c1c:	2301      	moveq	r3, #1
    6c1e:	d009      	beq.n	6c34 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    6c20:	2e00      	cmp	r6, #0
    6c22:	f000 809f 	beq.w	6d64 <_spi_m_sync_init+0x15c>
    6c26:	2c00      	cmp	r4, #0
    6c28:	f040 80a5 	bne.w	6d76 <_spi_m_sync_init+0x16e>
	return NULL;
    6c2c:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    6c2e:	2000      	movs	r0, #0
    6c30:	e009      	b.n	6c46 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    6c32:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    6c34:	4d55      	ldr	r5, [pc, #340]	; (6d8c <_spi_m_sync_init+0x184>)
    6c36:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    6c3a:	441d      	add	r5, r3
	ASSERT(dev && hw);
    6c3c:	2e00      	cmp	r6, #0
    6c3e:	d0f6      	beq.n	6c2e <_spi_m_sync_init+0x26>
    6c40:	2001      	movs	r0, #1
    6c42:	2c00      	cmp	r4, #0
    6c44:	d0f3      	beq.n	6c2e <_spi_m_sync_init+0x26>
    6c46:	f640 2291 	movw	r2, #2705	; 0xa91
    6c4a:	4951      	ldr	r1, [pc, #324]	; (6d90 <_spi_m_sync_init+0x188>)
    6c4c:	4b51      	ldr	r3, [pc, #324]	; (6d94 <_spi_m_sync_init+0x18c>)
    6c4e:	4798      	blx	r3
	if (regs == NULL) {
    6c50:	2d00      	cmp	r5, #0
    6c52:	f000 8084 	beq.w	6d5e <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6c56:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6c58:	f013 0f01 	tst.w	r3, #1
    6c5c:	d11d      	bne.n	6c9a <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6c5e:	682b      	ldr	r3, [r5, #0]
    6c60:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6c64:	69e3      	ldr	r3, [r4, #28]
    6c66:	f013 0f03 	tst.w	r3, #3
    6c6a:	d1fb      	bne.n	6c64 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6c6c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6c6e:	f013 0f02 	tst.w	r3, #2
    6c72:	d00b      	beq.n	6c8c <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6c74:	6823      	ldr	r3, [r4, #0]
    6c76:	f023 0302 	bic.w	r3, r3, #2
    6c7a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6c7c:	69e3      	ldr	r3, [r4, #28]
    6c7e:	f013 0f03 	tst.w	r3, #3
    6c82:	d1fb      	bne.n	6c7c <_spi_m_sync_init+0x74>
    6c84:	69e3      	ldr	r3, [r4, #28]
    6c86:	f013 0f02 	tst.w	r3, #2
    6c8a:	d1fb      	bne.n	6c84 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6c8c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6c90:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6c92:	69e3      	ldr	r3, [r4, #28]
    6c94:	f013 0f03 	tst.w	r3, #3
    6c98:	d1fb      	bne.n	6c92 <_spi_m_sync_init+0x8a>
    6c9a:	69e3      	ldr	r3, [r4, #28]
    6c9c:	f013 0f01 	tst.w	r3, #1
    6ca0:	d1fb      	bne.n	6c9a <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    6ca2:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6ca4:	682b      	ldr	r3, [r5, #0]
    6ca6:	f003 031c 	and.w	r3, r3, #28
    6caa:	2b08      	cmp	r3, #8
    6cac:	d02e      	beq.n	6d0c <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    6cae:	f640 1276 	movw	r2, #2422	; 0x976
    6cb2:	4937      	ldr	r1, [pc, #220]	; (6d90 <_spi_m_sync_init+0x188>)
    6cb4:	1c20      	adds	r0, r4, #0
    6cb6:	bf18      	it	ne
    6cb8:	2001      	movne	r0, #1
    6cba:	4b36      	ldr	r3, [pc, #216]	; (6d94 <_spi_m_sync_init+0x18c>)
    6cbc:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6cbe:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    6cc0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6cc4:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6cc8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6cca:	69e3      	ldr	r3, [r4, #28]
    6ccc:	f013 0f03 	tst.w	r3, #3
    6cd0:	d1fb      	bne.n	6cca <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    6cd2:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    6cd4:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6cd8:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6ce0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6ce2:	69e3      	ldr	r3, [r4, #28]
    6ce4:	f013 0f17 	tst.w	r3, #23
    6ce8:	d1fb      	bne.n	6ce2 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6cea:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6cec:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6cee:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6cf0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6cf4:	686b      	ldr	r3, [r5, #4]
    6cf6:	f003 0307 	and.w	r3, r3, #7
    6cfa:	2b00      	cmp	r3, #0
    6cfc:	bf0c      	ite	eq
    6cfe:	2301      	moveq	r3, #1
    6d00:	2302      	movne	r3, #2
    6d02:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    6d04:	89eb      	ldrh	r3, [r5, #14]
    6d06:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    6d08:	2000      	movs	r0, #0
    6d0a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    6d0c:	f640 128a 	movw	r2, #2442	; 0x98a
    6d10:	491f      	ldr	r1, [pc, #124]	; (6d90 <_spi_m_sync_init+0x188>)
    6d12:	1c20      	adds	r0, r4, #0
    6d14:	bf18      	it	ne
    6d16:	2001      	movne	r0, #1
    6d18:	4b1e      	ldr	r3, [pc, #120]	; (6d94 <_spi_m_sync_init+0x18c>)
    6d1a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6d1c:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    6d1e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6d22:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6d26:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6d28:	69e3      	ldr	r3, [r4, #28]
    6d2a:	f013 0f03 	tst.w	r3, #3
    6d2e:	d1fb      	bne.n	6d28 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6d30:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6d32:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6d36:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d3e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6d42:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6d44:	69e3      	ldr	r3, [r4, #28]
    6d46:	f013 0f17 	tst.w	r3, #23
    6d4a:	d1fb      	bne.n	6d44 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6d4c:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6d4e:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d50:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6d52:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6d56:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d1fc      	bne.n	6d56 <_spi_m_sync_init+0x14e>
    6d5c:	e7ca      	b.n	6cf4 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    6d5e:	f06f 000c 	mvn.w	r0, #12
    6d62:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    6d64:	f640 2291 	movw	r2, #2705	; 0xa91
    6d68:	4909      	ldr	r1, [pc, #36]	; (6d90 <_spi_m_sync_init+0x188>)
    6d6a:	2000      	movs	r0, #0
    6d6c:	4b09      	ldr	r3, [pc, #36]	; (6d94 <_spi_m_sync_init+0x18c>)
    6d6e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    6d70:	f06f 000c 	mvn.w	r0, #12
    6d74:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    6d76:	f640 2291 	movw	r2, #2705	; 0xa91
    6d7a:	4905      	ldr	r1, [pc, #20]	; (6d90 <_spi_m_sync_init+0x188>)
    6d7c:	2001      	movs	r0, #1
    6d7e:	4b05      	ldr	r3, [pc, #20]	; (6d94 <_spi_m_sync_init+0x18c>)
    6d80:	4798      	blx	r3
		return ERR_INVALID_ARG;
    6d82:	f06f 000c 	mvn.w	r0, #12
    6d86:	bd70      	pop	{r4, r5, r6, pc}
    6d88:	00006001 	.word	0x00006001
    6d8c:	0000bea0 	.word	0x0000bea0
    6d90:	0000bec4 	.word	0x0000bec4
    6d94:	00005241 	.word	0x00005241

00006d98 <_spi_m_async_init>:
{
    6d98:	b538      	push	{r3, r4, r5, lr}
    6d9a:	4604      	mov	r4, r0
    6d9c:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    6d9e:	4b15      	ldr	r3, [pc, #84]	; (6df4 <_spi_m_async_init+0x5c>)
    6da0:	4798      	blx	r3
	if (rc < 0) {
    6da2:	2800      	cmp	r0, #0
    6da4:	db24      	blt.n	6df0 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    6da6:	4621      	mov	r1, r4
    6da8:	4628      	mov	r0, r5
    6daa:	4b13      	ldr	r3, [pc, #76]	; (6df8 <_spi_m_async_init+0x60>)
    6dac:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    6dae:	2300      	movs	r3, #0
    6db0:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    6db2:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    6db4:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    6db6:	4628      	mov	r0, r5
    6db8:	4b10      	ldr	r3, [pc, #64]	; (6dfc <_spi_m_async_init+0x64>)
    6dba:	4798      	blx	r3
    6dbc:	1d01      	adds	r1, r0, #4
    6dbe:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6dc0:	2401      	movs	r4, #1
    6dc2:	f000 021f 	and.w	r2, r0, #31
    6dc6:	fa04 f202 	lsl.w	r2, r4, r2
    6dca:	0943      	lsrs	r3, r0, #5
    6dcc:	009b      	lsls	r3, r3, #2
    6dce:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6dd2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6dda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6dde:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6de2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    6de6:	3001      	adds	r0, #1
    6de8:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6dea:	4281      	cmp	r1, r0
    6dec:	d1e9      	bne.n	6dc2 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    6dee:	2000      	movs	r0, #0
}
    6df0:	bd38      	pop	{r3, r4, r5, pc}
    6df2:	bf00      	nop
    6df4:	00006c09 	.word	0x00006c09
    6df8:	000060b5 	.word	0x000060b5
    6dfc:	00006125 	.word	0x00006125

00006e00 <_spi_m_async_enable>:
{
    6e00:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    6e02:	4604      	mov	r4, r0
    6e04:	b160      	cbz	r0, 6e20 <_spi_m_async_enable+0x20>
    6e06:	6800      	ldr	r0, [r0, #0]
    6e08:	3000      	adds	r0, #0
    6e0a:	bf18      	it	ne
    6e0c:	2001      	movne	r0, #1
    6e0e:	f640 22fe 	movw	r2, #2814	; 0xafe
    6e12:	4904      	ldr	r1, [pc, #16]	; (6e24 <_spi_m_async_enable+0x24>)
    6e14:	4b04      	ldr	r3, [pc, #16]	; (6e28 <_spi_m_async_enable+0x28>)
    6e16:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    6e18:	6820      	ldr	r0, [r4, #0]
    6e1a:	4b04      	ldr	r3, [pc, #16]	; (6e2c <_spi_m_async_enable+0x2c>)
    6e1c:	4798      	blx	r3
}
    6e1e:	bd10      	pop	{r4, pc}
    6e20:	2000      	movs	r0, #0
    6e22:	e7f4      	b.n	6e0e <_spi_m_async_enable+0xe>
    6e24:	0000bec4 	.word	0x0000bec4
    6e28:	00005241 	.word	0x00005241
    6e2c:	0000615d 	.word	0x0000615d

00006e30 <_spi_m_async_set_mode>:
{
    6e30:	b538      	push	{r3, r4, r5, lr}
    6e32:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    6e34:	4604      	mov	r4, r0
    6e36:	b168      	cbz	r0, 6e54 <_spi_m_async_set_mode+0x24>
    6e38:	6800      	ldr	r0, [r0, #0]
    6e3a:	3000      	adds	r0, #0
    6e3c:	bf18      	it	ne
    6e3e:	2001      	movne	r0, #1
    6e40:	f640 322f 	movw	r2, #2863	; 0xb2f
    6e44:	4904      	ldr	r1, [pc, #16]	; (6e58 <_spi_m_async_set_mode+0x28>)
    6e46:	4b05      	ldr	r3, [pc, #20]	; (6e5c <_spi_m_async_set_mode+0x2c>)
    6e48:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    6e4a:	4629      	mov	r1, r5
    6e4c:	6820      	ldr	r0, [r4, #0]
    6e4e:	4b04      	ldr	r3, [pc, #16]	; (6e60 <_spi_m_async_set_mode+0x30>)
    6e50:	4798      	blx	r3
}
    6e52:	bd38      	pop	{r3, r4, r5, pc}
    6e54:	2000      	movs	r0, #0
    6e56:	e7f3      	b.n	6e40 <_spi_m_async_set_mode+0x10>
    6e58:	0000bec4 	.word	0x0000bec4
    6e5c:	00005241 	.word	0x00005241
    6e60:	0000619d 	.word	0x0000619d

00006e64 <_spi_m_async_enable_tx>:
{
    6e64:	b538      	push	{r3, r4, r5, lr}
    6e66:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    6e68:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    6e6a:	b160      	cbz	r0, 6e86 <_spi_m_async_enable_tx+0x22>
    6e6c:	1c20      	adds	r0, r4, #0
    6e6e:	bf18      	it	ne
    6e70:	2001      	movne	r0, #1
    6e72:	f640 4221 	movw	r2, #3105	; 0xc21
    6e76:	4906      	ldr	r1, [pc, #24]	; (6e90 <_spi_m_async_enable_tx+0x2c>)
    6e78:	4b06      	ldr	r3, [pc, #24]	; (6e94 <_spi_m_async_enable_tx+0x30>)
    6e7a:	4798      	blx	r3
	if (state) {
    6e7c:	b92d      	cbnz	r5, 6e8a <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    6e7e:	2301      	movs	r3, #1
    6e80:	7523      	strb	r3, [r4, #20]
}
    6e82:	2000      	movs	r0, #0
    6e84:	bd38      	pop	{r3, r4, r5, pc}
    6e86:	2000      	movs	r0, #0
    6e88:	e7f3      	b.n	6e72 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    6e8a:	2301      	movs	r3, #1
    6e8c:	75a3      	strb	r3, [r4, #22]
    6e8e:	e7f8      	b.n	6e82 <_spi_m_async_enable_tx+0x1e>
    6e90:	0000bec4 	.word	0x0000bec4
    6e94:	00005241 	.word	0x00005241

00006e98 <_spi_m_async_enable_rx>:
{
    6e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e9a:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    6e9c:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    6e9e:	4e0c      	ldr	r6, [pc, #48]	; (6ed0 <_spi_m_async_enable_rx+0x38>)
    6ea0:	f640 4235 	movw	r2, #3125	; 0xc35
    6ea4:	4631      	mov	r1, r6
    6ea6:	3000      	adds	r0, #0
    6ea8:	bf18      	it	ne
    6eaa:	2001      	movne	r0, #1
    6eac:	4d09      	ldr	r5, [pc, #36]	; (6ed4 <_spi_m_async_enable_rx+0x3c>)
    6eae:	47a8      	blx	r5
	ASSERT(hw);
    6eb0:	f640 4236 	movw	r2, #3126	; 0xc36
    6eb4:	4631      	mov	r1, r6
    6eb6:	1c20      	adds	r0, r4, #0
    6eb8:	bf18      	it	ne
    6eba:	2001      	movne	r0, #1
    6ebc:	47a8      	blx	r5
	if (state) {
    6ebe:	b91f      	cbnz	r7, 6ec8 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    6ec0:	2304      	movs	r3, #4
    6ec2:	7523      	strb	r3, [r4, #20]
}
    6ec4:	2000      	movs	r0, #0
    6ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    6ec8:	2304      	movs	r3, #4
    6eca:	75a3      	strb	r3, [r4, #22]
    6ecc:	e7fa      	b.n	6ec4 <_spi_m_async_enable_rx+0x2c>
    6ece:	bf00      	nop
    6ed0:	0000bec4 	.word	0x0000bec4
    6ed4:	00005241 	.word	0x00005241

00006ed8 <_spi_m_async_enable_tx_complete>:
{
    6ed8:	b538      	push	{r3, r4, r5, lr}
    6eda:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    6edc:	4604      	mov	r4, r0
    6ede:	b170      	cbz	r0, 6efe <_spi_m_async_enable_tx_complete+0x26>
    6ee0:	6800      	ldr	r0, [r0, #0]
    6ee2:	3000      	adds	r0, #0
    6ee4:	bf18      	it	ne
    6ee6:	2001      	movne	r0, #1
    6ee8:	f640 4248 	movw	r2, #3144	; 0xc48
    6eec:	4907      	ldr	r1, [pc, #28]	; (6f0c <_spi_m_async_enable_tx_complete+0x34>)
    6eee:	4b08      	ldr	r3, [pc, #32]	; (6f10 <_spi_m_async_enable_tx_complete+0x38>)
    6ef0:	4798      	blx	r3
	if (state) {
    6ef2:	b935      	cbnz	r5, 6f02 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    6ef4:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    6ef6:	2202      	movs	r2, #2
    6ef8:	751a      	strb	r2, [r3, #20]
}
    6efa:	2000      	movs	r0, #0
    6efc:	bd38      	pop	{r3, r4, r5, pc}
    6efe:	2000      	movs	r0, #0
    6f00:	e7f2      	b.n	6ee8 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    6f02:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    6f04:	2202      	movs	r2, #2
    6f06:	759a      	strb	r2, [r3, #22]
    6f08:	e7f7      	b.n	6efa <_spi_m_async_enable_tx_complete+0x22>
    6f0a:	bf00      	nop
    6f0c:	0000bec4 	.word	0x0000bec4
    6f10:	00005241 	.word	0x00005241

00006f14 <_spi_m_async_write_one>:
{
    6f14:	b538      	push	{r3, r4, r5, lr}
    6f16:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    6f18:	4604      	mov	r4, r0
    6f1a:	b160      	cbz	r0, 6f36 <_spi_m_async_write_one+0x22>
    6f1c:	6800      	ldr	r0, [r0, #0]
    6f1e:	3000      	adds	r0, #0
    6f20:	bf18      	it	ne
    6f22:	2001      	movne	r0, #1
    6f24:	f640 425a 	movw	r2, #3162	; 0xc5a
    6f28:	4904      	ldr	r1, [pc, #16]	; (6f3c <_spi_m_async_write_one+0x28>)
    6f2a:	4b05      	ldr	r3, [pc, #20]	; (6f40 <_spi_m_async_write_one+0x2c>)
    6f2c:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    6f2e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    6f30:	629d      	str	r5, [r3, #40]	; 0x28
}
    6f32:	2000      	movs	r0, #0
    6f34:	bd38      	pop	{r3, r4, r5, pc}
    6f36:	2000      	movs	r0, #0
    6f38:	e7f4      	b.n	6f24 <_spi_m_async_write_one+0x10>
    6f3a:	bf00      	nop
    6f3c:	0000bec4 	.word	0x0000bec4
    6f40:	00005241 	.word	0x00005241

00006f44 <_spi_m_async_read_one>:
{
    6f44:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    6f46:	4604      	mov	r4, r0
    6f48:	b160      	cbz	r0, 6f64 <_spi_m_async_read_one+0x20>
    6f4a:	6800      	ldr	r0, [r0, #0]
    6f4c:	3000      	adds	r0, #0
    6f4e:	bf18      	it	ne
    6f50:	2001      	movne	r0, #1
    6f52:	f640 4275 	movw	r2, #3189	; 0xc75
    6f56:	4904      	ldr	r1, [pc, #16]	; (6f68 <_spi_m_async_read_one+0x24>)
    6f58:	4b04      	ldr	r3, [pc, #16]	; (6f6c <_spi_m_async_read_one+0x28>)
    6f5a:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    6f5c:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6f5e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    6f60:	b280      	uxth	r0, r0
    6f62:	bd10      	pop	{r4, pc}
    6f64:	2000      	movs	r0, #0
    6f66:	e7f4      	b.n	6f52 <_spi_m_async_read_one+0xe>
    6f68:	0000bec4 	.word	0x0000bec4
    6f6c:	00005241 	.word	0x00005241

00006f70 <_spi_m_async_register_callback>:
{
    6f70:	b570      	push	{r4, r5, r6, lr}
    6f72:	460d      	mov	r5, r1
    6f74:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    6f76:	4604      	mov	r4, r0
    6f78:	b168      	cbz	r0, 6f96 <_spi_m_async_register_callback+0x26>
    6f7a:	2903      	cmp	r1, #3
    6f7c:	bf8c      	ite	hi
    6f7e:	2000      	movhi	r0, #0
    6f80:	2001      	movls	r0, #1
    6f82:	f640 428e 	movw	r2, #3214	; 0xc8e
    6f86:	4905      	ldr	r1, [pc, #20]	; (6f9c <_spi_m_async_register_callback+0x2c>)
    6f88:	4b05      	ldr	r3, [pc, #20]	; (6fa0 <_spi_m_async_register_callback+0x30>)
    6f8a:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    6f8c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    6f90:	60a6      	str	r6, [r4, #8]
}
    6f92:	2000      	movs	r0, #0
    6f94:	bd70      	pop	{r4, r5, r6, pc}
    6f96:	2000      	movs	r0, #0
    6f98:	e7f3      	b.n	6f82 <_spi_m_async_register_callback+0x12>
    6f9a:	bf00      	nop
    6f9c:	0000bec4 	.word	0x0000bec4
    6fa0:	00005241 	.word	0x00005241

00006fa4 <_spi_m_async_set_irq_state>:
{
    6fa4:	b570      	push	{r4, r5, r6, lr}
    6fa6:	460c      	mov	r4, r1
    6fa8:	4615      	mov	r5, r2
	ASSERT(device);
    6faa:	4606      	mov	r6, r0
    6fac:	f640 42cf 	movw	r2, #3279	; 0xccf
    6fb0:	4908      	ldr	r1, [pc, #32]	; (6fd4 <_spi_m_async_set_irq_state+0x30>)
    6fb2:	3000      	adds	r0, #0
    6fb4:	bf18      	it	ne
    6fb6:	2001      	movne	r0, #1
    6fb8:	4b07      	ldr	r3, [pc, #28]	; (6fd8 <_spi_m_async_set_irq_state+0x34>)
    6fba:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    6fbc:	2c03      	cmp	r4, #3
    6fbe:	d000      	beq.n	6fc2 <_spi_m_async_set_irq_state+0x1e>
    6fc0:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    6fc2:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    6fc4:	b115      	cbz	r5, 6fcc <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    6fc6:	2280      	movs	r2, #128	; 0x80
    6fc8:	759a      	strb	r2, [r3, #22]
}
    6fca:	e7f9      	b.n	6fc0 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    6fcc:	2280      	movs	r2, #128	; 0x80
    6fce:	751a      	strb	r2, [r3, #20]
    6fd0:	bd70      	pop	{r4, r5, r6, pc}
    6fd2:	bf00      	nop
    6fd4:	0000bec4 	.word	0x0000bec4
    6fd8:	00005241 	.word	0x00005241

00006fdc <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    6fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fe0:	4605      	mov	r5, r0
    6fe2:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6fe4:	4608      	mov	r0, r1
    6fe6:	4b52      	ldr	r3, [pc, #328]	; (7130 <_spi_m_dma_init+0x154>)
    6fe8:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    6fea:	2803      	cmp	r0, #3
    6fec:	d00c      	beq.n	7008 <_spi_m_dma_init+0x2c>
    6fee:	2807      	cmp	r0, #7
    6ff0:	bf08      	it	eq
    6ff2:	2301      	moveq	r3, #1
    6ff4:	d009      	beq.n	700a <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    6ff6:	2d00      	cmp	r5, #0
    6ff8:	f000 8086 	beq.w	7108 <_spi_m_dma_init+0x12c>
    6ffc:	2c00      	cmp	r4, #0
    6ffe:	f040 808d 	bne.w	711c <_spi_m_dma_init+0x140>
	return NULL;
    7002:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7004:	2000      	movs	r0, #0
    7006:	e009      	b.n	701c <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    7008:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    700a:	4e4a      	ldr	r6, [pc, #296]	; (7134 <_spi_m_dma_init+0x158>)
    700c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7010:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7012:	2d00      	cmp	r5, #0
    7014:	d0f6      	beq.n	7004 <_spi_m_dma_init+0x28>
    7016:	2001      	movs	r0, #1
    7018:	2c00      	cmp	r4, #0
    701a:	d0f3      	beq.n	7004 <_spi_m_dma_init+0x28>
    701c:	f640 52c3 	movw	r2, #3523	; 0xdc3
    7020:	4945      	ldr	r1, [pc, #276]	; (7138 <_spi_m_dma_init+0x15c>)
    7022:	4b46      	ldr	r3, [pc, #280]	; (713c <_spi_m_dma_init+0x160>)
    7024:	4798      	blx	r3

	if (regs == NULL) {
    7026:	2e00      	cmp	r6, #0
    7028:	d06a      	beq.n	7100 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    702a:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    702c:	f013 0f01 	tst.w	r3, #1
    7030:	d11d      	bne.n	706e <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7032:	6833      	ldr	r3, [r6, #0]
    7034:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7038:	69e3      	ldr	r3, [r4, #28]
    703a:	f013 0f03 	tst.w	r3, #3
    703e:	d1fb      	bne.n	7038 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7040:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7042:	f013 0f02 	tst.w	r3, #2
    7046:	d00b      	beq.n	7060 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7048:	6823      	ldr	r3, [r4, #0]
    704a:	f023 0302 	bic.w	r3, r3, #2
    704e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7050:	69e3      	ldr	r3, [r4, #28]
    7052:	f013 0f03 	tst.w	r3, #3
    7056:	d1fb      	bne.n	7050 <_spi_m_dma_init+0x74>
    7058:	69e3      	ldr	r3, [r4, #28]
    705a:	f013 0f02 	tst.w	r3, #2
    705e:	d1fb      	bne.n	7058 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7060:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7064:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7066:	69e3      	ldr	r3, [r4, #28]
    7068:	f013 0f03 	tst.w	r3, #3
    706c:	d1fb      	bne.n	7066 <_spi_m_dma_init+0x8a>
    706e:	69e3      	ldr	r3, [r4, #28]
    7070:	f013 0f01 	tst.w	r3, #1
    7074:	d1fb      	bne.n	706e <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    7076:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    7078:	f640 1276 	movw	r2, #2422	; 0x976
    707c:	492e      	ldr	r1, [pc, #184]	; (7138 <_spi_m_dma_init+0x15c>)
    707e:	1c20      	adds	r0, r4, #0
    7080:	bf18      	it	ne
    7082:	2001      	movne	r0, #1
    7084:	4b2d      	ldr	r3, [pc, #180]	; (713c <_spi_m_dma_init+0x160>)
    7086:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7088:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    708a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    708e:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7092:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7094:	69e3      	ldr	r3, [r4, #28]
    7096:	f013 0f03 	tst.w	r3, #3
    709a:	d1fb      	bne.n	7094 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    709c:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    709e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    70a2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    70a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    70aa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    70ac:	69e3      	ldr	r3, [r4, #28]
    70ae:	f013 0f17 	tst.w	r3, #23
    70b2:	d1fb      	bne.n	70ac <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    70b4:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    70b6:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    70b8:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    70ba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    70be:	f105 0818 	add.w	r8, r5, #24
    70c2:	4620      	mov	r0, r4
    70c4:	4b1e      	ldr	r3, [pc, #120]	; (7140 <_spi_m_dma_init+0x164>)
    70c6:	4798      	blx	r3
    70c8:	4601      	mov	r1, r0
    70ca:	4640      	mov	r0, r8
    70cc:	4f1d      	ldr	r7, [pc, #116]	; (7144 <_spi_m_dma_init+0x168>)
    70ce:	47b8      	blx	r7
	dev->resource->back                 = dev;
    70d0:	69ab      	ldr	r3, [r5, #24]
    70d2:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    70d4:	69ab      	ldr	r3, [r5, #24]
    70d6:	4a1c      	ldr	r2, [pc, #112]	; (7148 <_spi_m_dma_init+0x16c>)
    70d8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    70da:	69ab      	ldr	r3, [r5, #24]
    70dc:	4e1b      	ldr	r6, [pc, #108]	; (714c <_spi_m_dma_init+0x170>)
    70de:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    70e0:	4620      	mov	r0, r4
    70e2:	4b1b      	ldr	r3, [pc, #108]	; (7150 <_spi_m_dma_init+0x174>)
    70e4:	4798      	blx	r3
    70e6:	4601      	mov	r1, r0
    70e8:	4640      	mov	r0, r8
    70ea:	47b8      	blx	r7
	dev->resource->back                 = dev;
    70ec:	69ab      	ldr	r3, [r5, #24]
    70ee:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    70f0:	69ab      	ldr	r3, [r5, #24]
    70f2:	4a18      	ldr	r2, [pc, #96]	; (7154 <_spi_m_dma_init+0x178>)
    70f4:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    70f6:	69ab      	ldr	r3, [r5, #24]
    70f8:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    70fa:	2000      	movs	r0, #0
    70fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    7100:	f06f 000c 	mvn.w	r0, #12
    7104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7108:	f640 52c3 	movw	r2, #3523	; 0xdc3
    710c:	490a      	ldr	r1, [pc, #40]	; (7138 <_spi_m_dma_init+0x15c>)
    710e:	2000      	movs	r0, #0
    7110:	4b0a      	ldr	r3, [pc, #40]	; (713c <_spi_m_dma_init+0x160>)
    7112:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7114:	f06f 000c 	mvn.w	r0, #12
    7118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    711c:	f640 52c3 	movw	r2, #3523	; 0xdc3
    7120:	4905      	ldr	r1, [pc, #20]	; (7138 <_spi_m_dma_init+0x15c>)
    7122:	2001      	movs	r0, #1
    7124:	4b05      	ldr	r3, [pc, #20]	; (713c <_spi_m_dma_init+0x160>)
    7126:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7128:	f06f 000c 	mvn.w	r0, #12
    712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7130:	00006001 	.word	0x00006001
    7134:	0000bea0 	.word	0x0000bea0
    7138:	0000bec4 	.word	0x0000bec4
    713c:	00005241 	.word	0x00005241
    7140:	00006231 	.word	0x00006231
    7144:	00005ac5 	.word	0x00005ac5
    7148:	00006245 	.word	0x00006245
    714c:	0000625d 	.word	0x0000625d
    7150:	0000621d 	.word	0x0000621d
    7154:	00006251 	.word	0x00006251

00007158 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    7158:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    715a:	4604      	mov	r4, r0
    715c:	b160      	cbz	r0, 7178 <_spi_m_dma_enable+0x20>
    715e:	6800      	ldr	r0, [r0, #0]
    7160:	3000      	adds	r0, #0
    7162:	bf18      	it	ne
    7164:	2001      	movne	r0, #1
    7166:	f640 52ec 	movw	r2, #3564	; 0xdec
    716a:	4904      	ldr	r1, [pc, #16]	; (717c <_spi_m_dma_enable+0x24>)
    716c:	4b04      	ldr	r3, [pc, #16]	; (7180 <_spi_m_dma_enable+0x28>)
    716e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    7170:	6820      	ldr	r0, [r4, #0]
    7172:	4b04      	ldr	r3, [pc, #16]	; (7184 <_spi_m_dma_enable+0x2c>)
    7174:	4798      	blx	r3
}
    7176:	bd10      	pop	{r4, pc}
    7178:	2000      	movs	r0, #0
    717a:	e7f4      	b.n	7166 <_spi_m_dma_enable+0xe>
    717c:	0000bec4 	.word	0x0000bec4
    7180:	00005241 	.word	0x00005241
    7184:	00006139 	.word	0x00006139

00007188 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    7188:	b570      	push	{r4, r5, r6, lr}
    718a:	4605      	mov	r5, r0
    718c:	4614      	mov	r4, r2
	switch (type) {
    718e:	2901      	cmp	r1, #1
    7190:	d00e      	beq.n	71b0 <_spi_m_dma_register_callback+0x28>
    7192:	b111      	cbz	r1, 719a <_spi_m_dma_register_callback+0x12>
    7194:	2902      	cmp	r1, #2
    7196:	d016      	beq.n	71c6 <_spi_m_dma_register_callback+0x3e>
    7198:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    719a:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    719c:	6800      	ldr	r0, [r0, #0]
    719e:	4b13      	ldr	r3, [pc, #76]	; (71ec <_spi_m_dma_register_callback+0x64>)
    71a0:	4798      	blx	r3
    71a2:	1c22      	adds	r2, r4, #0
    71a4:	bf18      	it	ne
    71a6:	2201      	movne	r2, #1
    71a8:	2100      	movs	r1, #0
    71aa:	4b11      	ldr	r3, [pc, #68]	; (71f0 <_spi_m_dma_register_callback+0x68>)
    71ac:	4798      	blx	r3
		break;
    71ae:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    71b0:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    71b2:	6800      	ldr	r0, [r0, #0]
    71b4:	4b0f      	ldr	r3, [pc, #60]	; (71f4 <_spi_m_dma_register_callback+0x6c>)
    71b6:	4798      	blx	r3
    71b8:	1c22      	adds	r2, r4, #0
    71ba:	bf18      	it	ne
    71bc:	2201      	movne	r2, #1
    71be:	2100      	movs	r1, #0
    71c0:	4b0b      	ldr	r3, [pc, #44]	; (71f0 <_spi_m_dma_register_callback+0x68>)
    71c2:	4798      	blx	r3
		break;
    71c4:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    71c6:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    71c8:	6800      	ldr	r0, [r0, #0]
    71ca:	4b0a      	ldr	r3, [pc, #40]	; (71f4 <_spi_m_dma_register_callback+0x6c>)
    71cc:	4798      	blx	r3
    71ce:	3400      	adds	r4, #0
    71d0:	bf18      	it	ne
    71d2:	2401      	movne	r4, #1
    71d4:	4622      	mov	r2, r4
    71d6:	2101      	movs	r1, #1
    71d8:	4e05      	ldr	r6, [pc, #20]	; (71f0 <_spi_m_dma_register_callback+0x68>)
    71da:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    71dc:	6828      	ldr	r0, [r5, #0]
    71de:	4b03      	ldr	r3, [pc, #12]	; (71ec <_spi_m_dma_register_callback+0x64>)
    71e0:	4798      	blx	r3
    71e2:	4622      	mov	r2, r4
    71e4:	2101      	movs	r1, #1
    71e6:	47b0      	blx	r6
    71e8:	bd70      	pop	{r4, r5, r6, pc}
    71ea:	bf00      	nop
    71ec:	0000621d 	.word	0x0000621d
    71f0:	0000599d 	.word	0x0000599d
    71f4:	00006231 	.word	0x00006231

000071f8 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    71f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71fc:	4605      	mov	r5, r0
    71fe:	4689      	mov	r9, r1
    7200:	4617      	mov	r7, r2
    7202:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7204:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7208:	4658      	mov	r0, fp
    720a:	4b46      	ldr	r3, [pc, #280]	; (7324 <_spi_m_dma_transfer+0x12c>)
    720c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    720e:	2803      	cmp	r0, #3
    7210:	d053      	beq.n	72ba <_spi_m_dma_transfer+0xc2>
    7212:	2807      	cmp	r0, #7
    7214:	bf08      	it	eq
    7216:	2201      	moveq	r2, #1
    7218:	d050      	beq.n	72bc <_spi_m_dma_transfer+0xc4>
	return NULL;
    721a:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    721e:	4658      	mov	r0, fp
    7220:	4b41      	ldr	r3, [pc, #260]	; (7328 <_spi_m_dma_transfer+0x130>)
    7222:	4798      	blx	r3
    7224:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    7226:	4658      	mov	r0, fp
    7228:	4b40      	ldr	r3, [pc, #256]	; (732c <_spi_m_dma_transfer+0x134>)
    722a:	4798      	blx	r3
    722c:	4604      	mov	r4, r0

	if (rxbuf) {
    722e:	2f00      	cmp	r7, #0
    7230:	d04b      	beq.n	72ca <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    7232:	2d00      	cmp	r5, #0
    7234:	d047      	beq.n	72c6 <_spi_m_dma_transfer+0xce>
    7236:	f11b 0000 	adds.w	r0, fp, #0
    723a:	bf18      	it	ne
    723c:	2001      	movne	r0, #1
    723e:	f640 5236 	movw	r2, #3382	; 0xd36
    7242:	493b      	ldr	r1, [pc, #236]	; (7330 <_spi_m_dma_transfer+0x138>)
    7244:	4b3b      	ldr	r3, [pc, #236]	; (7334 <_spi_m_dma_transfer+0x13c>)
    7246:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    7248:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    724a:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    724c:	f013 0f04 	tst.w	r3, #4
    7250:	d107      	bne.n	7262 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    7252:	6853      	ldr	r3, [r2, #4]
    7254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7258:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    725a:	69d3      	ldr	r3, [r2, #28]
    725c:	f013 0f17 	tst.w	r3, #23
    7260:	d1fb      	bne.n	725a <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7262:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    7264:	3128      	adds	r1, #40	; 0x28
    7266:	4630      	mov	r0, r6
    7268:	4b33      	ldr	r3, [pc, #204]	; (7338 <_spi_m_dma_transfer+0x140>)
    726a:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    726c:	4639      	mov	r1, r7
    726e:	4630      	mov	r0, r6
    7270:	4b32      	ldr	r3, [pc, #200]	; (733c <_spi_m_dma_transfer+0x144>)
    7272:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    7274:	4641      	mov	r1, r8
    7276:	4630      	mov	r0, r6
    7278:	4b31      	ldr	r3, [pc, #196]	; (7340 <_spi_m_dma_transfer+0x148>)
    727a:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    727c:	2100      	movs	r1, #0
    727e:	4630      	mov	r0, r6
    7280:	4b30      	ldr	r3, [pc, #192]	; (7344 <_spi_m_dma_transfer+0x14c>)
    7282:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    7284:	f1b9 0f00 	cmp.w	r9, #0
    7288:	d039      	beq.n	72fe <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    728a:	4649      	mov	r1, r9
    728c:	4620      	mov	r0, r4
    728e:	4b2a      	ldr	r3, [pc, #168]	; (7338 <_spi_m_dma_transfer+0x140>)
    7290:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7292:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7294:	3128      	adds	r1, #40	; 0x28
    7296:	4620      	mov	r0, r4
    7298:	4b28      	ldr	r3, [pc, #160]	; (733c <_spi_m_dma_transfer+0x144>)
    729a:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    729c:	2101      	movs	r1, #1
    729e:	4620      	mov	r0, r4
    72a0:	4b29      	ldr	r3, [pc, #164]	; (7348 <_spi_m_dma_transfer+0x150>)
    72a2:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    72a4:	4641      	mov	r1, r8
    72a6:	4620      	mov	r0, r4
    72a8:	4b25      	ldr	r3, [pc, #148]	; (7340 <_spi_m_dma_transfer+0x148>)
    72aa:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    72ac:	2100      	movs	r1, #0
    72ae:	4620      	mov	r0, r4
    72b0:	4b24      	ldr	r3, [pc, #144]	; (7344 <_spi_m_dma_transfer+0x14c>)
    72b2:	4798      	blx	r3

	return ERR_NONE;
}
    72b4:	2000      	movs	r0, #0
    72b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    72ba:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    72bc:	4b23      	ldr	r3, [pc, #140]	; (734c <_spi_m_dma_transfer+0x154>)
    72be:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    72c2:	4492      	add	sl, r2
    72c4:	e7ab      	b.n	721e <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    72c6:	2000      	movs	r0, #0
    72c8:	e7b9      	b.n	723e <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    72ca:	b1b5      	cbz	r5, 72fa <_spi_m_dma_transfer+0x102>
    72cc:	f11b 0000 	adds.w	r0, fp, #0
    72d0:	bf18      	it	ne
    72d2:	2001      	movne	r0, #1
    72d4:	f640 523d 	movw	r2, #3389	; 0xd3d
    72d8:	4915      	ldr	r1, [pc, #84]	; (7330 <_spi_m_dma_transfer+0x138>)
    72da:	4b16      	ldr	r3, [pc, #88]	; (7334 <_spi_m_dma_transfer+0x13c>)
    72dc:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    72de:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    72e0:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    72e2:	f013 0f04 	tst.w	r3, #4
    72e6:	d1cd      	bne.n	7284 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    72e8:	6853      	ldr	r3, [r2, #4]
    72ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    72ee:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    72f0:	69d3      	ldr	r3, [r2, #28]
    72f2:	f013 0f17 	tst.w	r3, #23
    72f6:	d1fb      	bne.n	72f0 <_spi_m_dma_transfer+0xf8>
    72f8:	e7c4      	b.n	7284 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    72fa:	2000      	movs	r0, #0
    72fc:	e7ea      	b.n	72d4 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    72fe:	f10a 010e 	add.w	r1, sl, #14
    7302:	4620      	mov	r0, r4
    7304:	4b0c      	ldr	r3, [pc, #48]	; (7338 <_spi_m_dma_transfer+0x140>)
    7306:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7308:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    730a:	3128      	adds	r1, #40	; 0x28
    730c:	4620      	mov	r0, r4
    730e:	4b0b      	ldr	r3, [pc, #44]	; (733c <_spi_m_dma_transfer+0x144>)
    7310:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    7312:	2100      	movs	r1, #0
    7314:	4620      	mov	r0, r4
    7316:	4b0c      	ldr	r3, [pc, #48]	; (7348 <_spi_m_dma_transfer+0x150>)
    7318:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    731a:	4641      	mov	r1, r8
    731c:	4620      	mov	r0, r4
    731e:	4b08      	ldr	r3, [pc, #32]	; (7340 <_spi_m_dma_transfer+0x148>)
    7320:	4798      	blx	r3
    7322:	e7c3      	b.n	72ac <_spi_m_dma_transfer+0xb4>
    7324:	00006001 	.word	0x00006001
    7328:	00006231 	.word	0x00006231
    732c:	0000621d 	.word	0x0000621d
    7330:	0000bec4 	.word	0x0000bec4
    7334:	00005241 	.word	0x00005241
    7338:	00005a01 	.word	0x00005a01
    733c:	000059f1 	.word	0x000059f1
    7340:	00005a2d 	.word	0x00005a2d
    7344:	00005a85 	.word	0x00005a85
    7348:	00005a11 	.word	0x00005a11
    734c:	0000bea0 	.word	0x0000bea0

00007350 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    7350:	4b03      	ldr	r3, [pc, #12]	; (7360 <_delay_init+0x10>)
    7352:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    7356:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    7358:	2205      	movs	r2, #5
    735a:	601a      	str	r2, [r3, #0]
    735c:	4770      	bx	lr
    735e:	bf00      	nop
    7360:	e000e010 	.word	0xe000e010

00007364 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    7364:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    7366:	b303      	cbz	r3, 73aa <_delay_cycles+0x46>
{
    7368:	b430      	push	{r4, r5}
    736a:	1e5d      	subs	r5, r3, #1
    736c:	b2ed      	uxtb	r5, r5
	while (n--) {
    736e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    7370:	4a12      	ldr	r2, [pc, #72]	; (73bc <_delay_cycles+0x58>)
    7372:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    7376:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    7378:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    737a:	6813      	ldr	r3, [r2, #0]
    737c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7380:	d0fb      	beq.n	737a <_delay_cycles+0x16>
	while (n--) {
    7382:	3801      	subs	r0, #1
    7384:	b2c0      	uxtb	r0, r0
    7386:	28ff      	cmp	r0, #255	; 0xff
    7388:	d1f5      	bne.n	7376 <_delay_cycles+0x12>
    738a:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    738e:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    7392:	3101      	adds	r1, #1
    7394:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    7396:	4b09      	ldr	r3, [pc, #36]	; (73bc <_delay_cycles+0x58>)
    7398:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    739a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    739c:	461a      	mov	r2, r3
    739e:	6813      	ldr	r3, [r2, #0]
    73a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    73a4:	d0fb      	beq.n	739e <_delay_cycles+0x3a>
		;
}
    73a6:	bc30      	pop	{r4, r5}
    73a8:	4770      	bx	lr
	SysTick->LOAD = buf;
    73aa:	4b04      	ldr	r3, [pc, #16]	; (73bc <_delay_cycles+0x58>)
    73ac:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    73ae:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    73b0:	461a      	mov	r2, r3
    73b2:	6813      	ldr	r3, [r2, #0]
    73b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    73b8:	d0fb      	beq.n	73b2 <_delay_cycles+0x4e>
    73ba:	4770      	bx	lr
    73bc:	e000e010 	.word	0xe000e010

000073c0 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    73c0:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    73c2:	6813      	ldr	r3, [r2, #0]
    73c4:	f043 0302 	orr.w	r3, r3, #2
    73c8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    73ca:	6913      	ldr	r3, [r2, #16]
    73cc:	f013 0f03 	tst.w	r3, #3
    73d0:	d1fb      	bne.n	73ca <_tc_timer_start+0xa>
}
    73d2:	4770      	bx	lr

000073d4 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    73d4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    73d6:	6813      	ldr	r3, [r2, #0]
    73d8:	f023 0302 	bic.w	r3, r3, #2
    73dc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    73de:	6913      	ldr	r3, [r2, #16]
    73e0:	f013 0f03 	tst.w	r3, #3
    73e4:	d1fb      	bne.n	73de <_tc_timer_stop+0xa>
}
    73e6:	4770      	bx	lr

000073e8 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    73e8:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    73ea:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    73ec:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    73f0:	2a02      	cmp	r2, #2
    73f2:	d00a      	beq.n	740a <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    73f4:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    73f6:	f012 0f0c 	tst.w	r2, #12
    73fa:	d10c      	bne.n	7416 <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    73fc:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    73fe:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7400:	691a      	ldr	r2, [r3, #16]
    7402:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7406:	d1fb      	bne.n	7400 <_tc_timer_set_period+0x18>
    7408:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    740a:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    740c:	691a      	ldr	r2, [r3, #16]
    740e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7412:	d1fb      	bne.n	740c <_tc_timer_set_period+0x24>
    7414:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7416:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7418:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    741c:	2a01      	cmp	r2, #1
    741e:	d000      	beq.n	7422 <_tc_timer_set_period+0x3a>
    7420:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7422:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    7424:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7426:	691a      	ldr	r2, [r3, #16]
    7428:	f012 0f20 	tst.w	r2, #32
    742c:	d1fb      	bne.n	7426 <_tc_timer_set_period+0x3e>
    742e:	e7f7      	b.n	7420 <_tc_timer_set_period+0x38>

00007430 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    7430:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7432:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7434:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7438:	2a02      	cmp	r2, #2
    743a:	d00a      	beq.n	7452 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    743c:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    743e:	f012 0f0c 	tst.w	r2, #12
    7442:	d10c      	bne.n	745e <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7444:	691a      	ldr	r2, [r3, #16]
    7446:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    744a:	d1fb      	bne.n	7444 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    744c:	8b98      	ldrh	r0, [r3, #28]
    744e:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    7450:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7452:	691a      	ldr	r2, [r3, #16]
    7454:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7458:	d1fb      	bne.n	7452 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    745a:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    745c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    745e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7460:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7464:	2a01      	cmp	r2, #1
    7466:	d001      	beq.n	746c <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    7468:	2000      	movs	r0, #0
}
    746a:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    746c:	691a      	ldr	r2, [r3, #16]
    746e:	f012 0f20 	tst.w	r2, #32
    7472:	d1fb      	bne.n	746c <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    7474:	7ed8      	ldrb	r0, [r3, #27]
    7476:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    7478:	4770      	bx	lr

0000747a <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    747a:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    747c:	6913      	ldr	r3, [r2, #16]
    747e:	f013 0f03 	tst.w	r3, #3
    7482:	d1fb      	bne.n	747c <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7484:	6810      	ldr	r0, [r2, #0]
}
    7486:	f3c0 0040 	ubfx	r0, r0, #1, #1
    748a:	4770      	bx	lr

0000748c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    748c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    748e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7490:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7492:	f012 0f01 	tst.w	r2, #1
    7496:	d100      	bne.n	749a <tc_interrupt_handler+0xe>
    7498:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    749a:	2201      	movs	r2, #1
    749c:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    749e:	6803      	ldr	r3, [r0, #0]
    74a0:	4798      	blx	r3
	}
}
    74a2:	e7f9      	b.n	7498 <tc_interrupt_handler+0xc>

000074a4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    74a4:	b570      	push	{r4, r5, r6, lr}
    74a6:	b088      	sub	sp, #32
    74a8:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    74aa:	466c      	mov	r4, sp
    74ac:	4d19      	ldr	r5, [pc, #100]	; (7514 <get_tc_index+0x70>)
    74ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    74b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    74b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    74b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    74ba:	9b00      	ldr	r3, [sp, #0]
    74bc:	42b3      	cmp	r3, r6
    74be:	d00c      	beq.n	74da <get_tc_index+0x36>
    74c0:	4630      	mov	r0, r6
    74c2:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    74c4:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    74c6:	f852 1b04 	ldr.w	r1, [r2], #4
    74ca:	4281      	cmp	r1, r0
    74cc:	d006      	beq.n	74dc <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    74ce:	3301      	adds	r3, #1
    74d0:	2b08      	cmp	r3, #8
    74d2:	d1f8      	bne.n	74c6 <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    74d4:	2000      	movs	r0, #0
			return i;
    74d6:	b240      	sxtb	r0, r0
    74d8:	e013      	b.n	7502 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    74da:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    74dc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    74e0:	d015      	beq.n	750e <get_tc_index+0x6a>
    74e2:	2b01      	cmp	r3, #1
    74e4:	d00f      	beq.n	7506 <get_tc_index+0x62>
    74e6:	2b02      	cmp	r3, #2
    74e8:	d00f      	beq.n	750a <get_tc_index+0x66>
    74ea:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    74ec:	bf08      	it	eq
    74ee:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    74f0:	d0f1      	beq.n	74d6 <get_tc_index+0x32>
	ASSERT(false);
    74f2:	f240 1267 	movw	r2, #359	; 0x167
    74f6:	4908      	ldr	r1, [pc, #32]	; (7518 <get_tc_index+0x74>)
    74f8:	2000      	movs	r0, #0
    74fa:	4b08      	ldr	r3, [pc, #32]	; (751c <get_tc_index+0x78>)
    74fc:	4798      	blx	r3
	return -1;
    74fe:	f04f 30ff 	mov.w	r0, #4294967295
}
    7502:	b008      	add	sp, #32
    7504:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7506:	2001      	movs	r0, #1
    7508:	e7e5      	b.n	74d6 <get_tc_index+0x32>
    750a:	2002      	movs	r0, #2
    750c:	e7e3      	b.n	74d6 <get_tc_index+0x32>
    750e:	2000      	movs	r0, #0
    7510:	e7e1      	b.n	74d6 <get_tc_index+0x32>
    7512:	bf00      	nop
    7514:	0000bee0 	.word	0x0000bee0
    7518:	0000bf50 	.word	0x0000bf50
    751c:	00005241 	.word	0x00005241

00007520 <_tc_timer_init>:
{
    7520:	b570      	push	{r4, r5, r6, lr}
    7522:	4606      	mov	r6, r0
    7524:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    7526:	4608      	mov	r0, r1
    7528:	4b71      	ldr	r3, [pc, #452]	; (76f0 <_tc_timer_init+0x1d0>)
    752a:	4798      	blx	r3
    752c:	4605      	mov	r5, r0
	device->hw = hw;
    752e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7530:	22a0      	movs	r2, #160	; 0xa0
    7532:	4970      	ldr	r1, [pc, #448]	; (76f4 <_tc_timer_init+0x1d4>)
    7534:	2001      	movs	r0, #1
    7536:	4b70      	ldr	r3, [pc, #448]	; (76f8 <_tc_timer_init+0x1d8>)
    7538:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    753a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    753c:	f013 0f01 	tst.w	r3, #1
    7540:	d119      	bne.n	7576 <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7542:	6923      	ldr	r3, [r4, #16]
    7544:	f013 0f03 	tst.w	r3, #3
    7548:	d1fb      	bne.n	7542 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    754a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    754c:	f013 0f02 	tst.w	r3, #2
    7550:	d00b      	beq.n	756a <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7552:	6823      	ldr	r3, [r4, #0]
    7554:	f023 0302 	bic.w	r3, r3, #2
    7558:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    755a:	6923      	ldr	r3, [r4, #16]
    755c:	f013 0f03 	tst.w	r3, #3
    7560:	d1fb      	bne.n	755a <_tc_timer_init+0x3a>
    7562:	6923      	ldr	r3, [r4, #16]
    7564:	f013 0f02 	tst.w	r3, #2
    7568:	d1fb      	bne.n	7562 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    756a:	2301      	movs	r3, #1
    756c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    756e:	6923      	ldr	r3, [r4, #16]
    7570:	f013 0f03 	tst.w	r3, #3
    7574:	d1fb      	bne.n	756e <_tc_timer_init+0x4e>
    7576:	6923      	ldr	r3, [r4, #16]
    7578:	f013 0f01 	tst.w	r3, #1
    757c:	d1fb      	bne.n	7576 <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    757e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7582:	4a5e      	ldr	r2, [pc, #376]	; (76fc <_tc_timer_init+0x1dc>)
    7584:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    758a:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    758c:	6923      	ldr	r3, [r4, #16]
    758e:	f013 0f03 	tst.w	r3, #3
    7592:	d1fb      	bne.n	758c <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7594:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7598:	4958      	ldr	r1, [pc, #352]	; (76fc <_tc_timer_init+0x1dc>)
    759a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    759e:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    75a2:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    75a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    75a6:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    75a8:	2301      	movs	r3, #1
    75aa:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    75ac:	f002 020c 	and.w	r2, r2, #12
    75b0:	2a08      	cmp	r2, #8
    75b2:	d056      	beq.n	7662 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    75b4:	2a00      	cmp	r2, #0
    75b6:	d16b      	bne.n	7690 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    75b8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    75bc:	4a4f      	ldr	r2, [pc, #316]	; (76fc <_tc_timer_init+0x1dc>)
    75be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    75c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    75c4:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    75c6:	6923      	ldr	r3, [r4, #16]
    75c8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    75cc:	d1fb      	bne.n	75c6 <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    75ce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    75d2:	4a4a      	ldr	r2, [pc, #296]	; (76fc <_tc_timer_init+0x1dc>)
    75d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    75d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    75da:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    75dc:	6923      	ldr	r3, [r4, #16]
    75de:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    75e2:	d1fb      	bne.n	75dc <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    75e4:	2301      	movs	r3, #1
    75e6:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    75e8:	4b45      	ldr	r3, [pc, #276]	; (7700 <_tc_timer_init+0x1e0>)
    75ea:	429c      	cmp	r4, r3
    75ec:	d077      	beq.n	76de <_tc_timer_init+0x1be>
	if (hw == TC1) {
    75ee:	4b45      	ldr	r3, [pc, #276]	; (7704 <_tc_timer_init+0x1e4>)
    75f0:	429c      	cmp	r4, r3
    75f2:	d077      	beq.n	76e4 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    75f4:	4b44      	ldr	r3, [pc, #272]	; (7708 <_tc_timer_init+0x1e8>)
    75f6:	429c      	cmp	r4, r3
    75f8:	d077      	beq.n	76ea <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    75fa:	4b44      	ldr	r3, [pc, #272]	; (770c <_tc_timer_init+0x1ec>)
    75fc:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    75fe:	bf04      	itt	eq
    7600:	4b43      	ldreq	r3, [pc, #268]	; (7710 <_tc_timer_init+0x1f0>)
    7602:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    7604:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7608:	4a3c      	ldr	r2, [pc, #240]	; (76fc <_tc_timer_init+0x1dc>)
    760a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    760e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7612:	2b00      	cmp	r3, #0
    7614:	db23      	blt.n	765e <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7616:	095a      	lsrs	r2, r3, #5
    7618:	f003 031f 	and.w	r3, r3, #31
    761c:	2101      	movs	r1, #1
    761e:	fa01 f303 	lsl.w	r3, r1, r3
    7622:	3220      	adds	r2, #32
    7624:	493b      	ldr	r1, [pc, #236]	; (7714 <_tc_timer_init+0x1f4>)
    7626:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    762a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    762e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7632:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7636:	4b31      	ldr	r3, [pc, #196]	; (76fc <_tc_timer_init+0x1dc>)
    7638:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    763c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7640:	2b00      	cmp	r3, #0
    7642:	db0c      	blt.n	765e <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7644:	0959      	lsrs	r1, r3, #5
    7646:	f003 031f 	and.w	r3, r3, #31
    764a:	2201      	movs	r2, #1
    764c:	fa02 f303 	lsl.w	r3, r2, r3
    7650:	4a30      	ldr	r2, [pc, #192]	; (7714 <_tc_timer_init+0x1f4>)
    7652:	f101 0060 	add.w	r0, r1, #96	; 0x60
    7656:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    765a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    765e:	2000      	movs	r0, #0
    7660:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7662:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7666:	4a25      	ldr	r2, [pc, #148]	; (76fc <_tc_timer_init+0x1dc>)
    7668:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    766e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7670:	6923      	ldr	r3, [r4, #16]
    7672:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7676:	d1fb      	bne.n	7670 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7678:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    767c:	4a1f      	ldr	r2, [pc, #124]	; (76fc <_tc_timer_init+0x1dc>)
    767e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7684:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7686:	6923      	ldr	r3, [r4, #16]
    7688:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    768c:	d1fb      	bne.n	7686 <_tc_timer_init+0x166>
    768e:	e7a9      	b.n	75e4 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7690:	2a04      	cmp	r2, #4
    7692:	d1a7      	bne.n	75e4 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7694:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7698:	4a18      	ldr	r2, [pc, #96]	; (76fc <_tc_timer_init+0x1dc>)
    769a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    769e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    76a2:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76a4:	6923      	ldr	r3, [r4, #16]
    76a6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    76aa:	d1fb      	bne.n	76a4 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    76ac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    76b0:	4a12      	ldr	r2, [pc, #72]	; (76fc <_tc_timer_init+0x1dc>)
    76b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    76b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    76ba:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76bc:	6923      	ldr	r3, [r4, #16]
    76be:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    76c2:	d1fb      	bne.n	76bc <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    76c4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    76c8:	4a0c      	ldr	r2, [pc, #48]	; (76fc <_tc_timer_init+0x1dc>)
    76ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    76ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    76d2:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76d4:	6923      	ldr	r3, [r4, #16]
    76d6:	f013 0f20 	tst.w	r3, #32
    76da:	d1fb      	bne.n	76d4 <_tc_timer_init+0x1b4>
    76dc:	e782      	b.n	75e4 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    76de:	4b0c      	ldr	r3, [pc, #48]	; (7710 <_tc_timer_init+0x1f0>)
    76e0:	601e      	str	r6, [r3, #0]
    76e2:	e78a      	b.n	75fa <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    76e4:	4b0a      	ldr	r3, [pc, #40]	; (7710 <_tc_timer_init+0x1f0>)
    76e6:	605e      	str	r6, [r3, #4]
    76e8:	e78c      	b.n	7604 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    76ea:	4b09      	ldr	r3, [pc, #36]	; (7710 <_tc_timer_init+0x1f0>)
    76ec:	609e      	str	r6, [r3, #8]
    76ee:	e789      	b.n	7604 <_tc_timer_init+0xe4>
    76f0:	000074a5 	.word	0x000074a5
    76f4:	0000bf50 	.word	0x0000bf50
    76f8:	00005241 	.word	0x00005241
    76fc:	0000bee0 	.word	0x0000bee0
    7700:	40003800 	.word	0x40003800
    7704:	40003c00 	.word	0x40003c00
    7708:	4101a000 	.word	0x4101a000
    770c:	4101c000 	.word	0x4101c000
    7710:	20000db0 	.word	0x20000db0
    7714:	e000e100 	.word	0xe000e100

00007718 <_tc_timer_deinit>:
{
    7718:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    771a:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    771c:	4620      	mov	r0, r4
    771e:	4b18      	ldr	r3, [pc, #96]	; (7780 <_tc_timer_deinit+0x68>)
    7720:	4798      	blx	r3
    7722:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7724:	22cd      	movs	r2, #205	; 0xcd
    7726:	4917      	ldr	r1, [pc, #92]	; (7784 <_tc_timer_deinit+0x6c>)
    7728:	2001      	movs	r0, #1
    772a:	4b17      	ldr	r3, [pc, #92]	; (7788 <_tc_timer_deinit+0x70>)
    772c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    772e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7732:	4b16      	ldr	r3, [pc, #88]	; (778c <_tc_timer_deinit+0x74>)
    7734:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7738:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    773c:	2b00      	cmp	r3, #0
    773e:	db0d      	blt.n	775c <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7740:	095a      	lsrs	r2, r3, #5
    7742:	f003 031f 	and.w	r3, r3, #31
    7746:	2101      	movs	r1, #1
    7748:	fa01 f303 	lsl.w	r3, r1, r3
    774c:	3220      	adds	r2, #32
    774e:	4910      	ldr	r1, [pc, #64]	; (7790 <_tc_timer_deinit+0x78>)
    7750:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7754:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7758:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    775c:	6823      	ldr	r3, [r4, #0]
    775e:	f023 0302 	bic.w	r3, r3, #2
    7762:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7764:	6923      	ldr	r3, [r4, #16]
    7766:	f013 0f03 	tst.w	r3, #3
    776a:	d1fb      	bne.n	7764 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    776c:	6823      	ldr	r3, [r4, #0]
    776e:	f043 0301 	orr.w	r3, r3, #1
    7772:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7774:	6923      	ldr	r3, [r4, #16]
    7776:	f013 0f01 	tst.w	r3, #1
    777a:	d1fb      	bne.n	7774 <_tc_timer_deinit+0x5c>
}
    777c:	bd38      	pop	{r3, r4, r5, pc}
    777e:	bf00      	nop
    7780:	000074a5 	.word	0x000074a5
    7784:	0000bf50 	.word	0x0000bf50
    7788:	00005241 	.word	0x00005241
    778c:	0000bee0 	.word	0x0000bee0
    7790:	e000e100 	.word	0xe000e100

00007794 <_tc_timer_set_irq>:
{
    7794:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    7796:	68c0      	ldr	r0, [r0, #12]
    7798:	4b09      	ldr	r3, [pc, #36]	; (77c0 <_tc_timer_set_irq+0x2c>)
    779a:	4798      	blx	r3
    779c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    779e:	f44f 7291 	mov.w	r2, #290	; 0x122
    77a2:	4908      	ldr	r1, [pc, #32]	; (77c4 <_tc_timer_set_irq+0x30>)
    77a4:	2001      	movs	r0, #1
    77a6:	4b08      	ldr	r3, [pc, #32]	; (77c8 <_tc_timer_set_irq+0x34>)
    77a8:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    77aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    77ae:	4b07      	ldr	r3, [pc, #28]	; (77cc <_tc_timer_set_irq+0x38>)
    77b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    77b4:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    77b8:	4b05      	ldr	r3, [pc, #20]	; (77d0 <_tc_timer_set_irq+0x3c>)
    77ba:	4798      	blx	r3
    77bc:	bd10      	pop	{r4, pc}
    77be:	bf00      	nop
    77c0:	000074a5 	.word	0x000074a5
    77c4:	0000bf50 	.word	0x0000bf50
    77c8:	00005241 	.word	0x00005241
    77cc:	0000bee0 	.word	0x0000bee0
    77d0:	000057bd 	.word	0x000057bd

000077d4 <_tc_get_timer>:
}
    77d4:	4800      	ldr	r0, [pc, #0]	; (77d8 <_tc_get_timer+0x4>)
    77d6:	4770      	bx	lr
    77d8:	20000334 	.word	0x20000334

000077dc <TC0_Handler>:
{
    77dc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    77de:	4b02      	ldr	r3, [pc, #8]	; (77e8 <TC0_Handler+0xc>)
    77e0:	6818      	ldr	r0, [r3, #0]
    77e2:	4b02      	ldr	r3, [pc, #8]	; (77ec <TC0_Handler+0x10>)
    77e4:	4798      	blx	r3
    77e6:	bd08      	pop	{r3, pc}
    77e8:	20000db0 	.word	0x20000db0
    77ec:	0000748d 	.word	0x0000748d

000077f0 <TC1_Handler>:
{
    77f0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    77f2:	4b02      	ldr	r3, [pc, #8]	; (77fc <TC1_Handler+0xc>)
    77f4:	6858      	ldr	r0, [r3, #4]
    77f6:	4b02      	ldr	r3, [pc, #8]	; (7800 <TC1_Handler+0x10>)
    77f8:	4798      	blx	r3
    77fa:	bd08      	pop	{r3, pc}
    77fc:	20000db0 	.word	0x20000db0
    7800:	0000748d 	.word	0x0000748d

00007804 <TC2_Handler>:
{
    7804:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    7806:	4b02      	ldr	r3, [pc, #8]	; (7810 <TC2_Handler+0xc>)
    7808:	6898      	ldr	r0, [r3, #8]
    780a:	4b02      	ldr	r3, [pc, #8]	; (7814 <TC2_Handler+0x10>)
    780c:	4798      	blx	r3
    780e:	bd08      	pop	{r3, pc}
    7810:	20000db0 	.word	0x20000db0
    7814:	0000748d 	.word	0x0000748d

00007818 <TC3_Handler>:
{
    7818:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    781a:	4b02      	ldr	r3, [pc, #8]	; (7824 <TC3_Handler+0xc>)
    781c:	68d8      	ldr	r0, [r3, #12]
    781e:	4b02      	ldr	r3, [pc, #8]	; (7828 <TC3_Handler+0x10>)
    7820:	4798      	blx	r3
    7822:	bd08      	pop	{r3, pc}
    7824:	20000db0 	.word	0x20000db0
    7828:	0000748d 	.word	0x0000748d

0000782c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    782c:	2000      	movs	r0, #0
    782e:	4770      	bx	lr

00007830 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    7830:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    7832:	7c83      	ldrb	r3, [r0, #18]
    7834:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7838:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    783a:	f002 0107 	and.w	r1, r2, #7
    783e:	2901      	cmp	r1, #1
    7840:	d00b      	beq.n	785a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7842:	015a      	lsls	r2, r3, #5
    7844:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7848:	2110      	movs	r1, #16
    784a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    784e:	015b      	lsls	r3, r3, #5
    7850:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7854:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    7858:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    785a:	f012 0f40 	tst.w	r2, #64	; 0x40
    785e:	d00c      	beq.n	787a <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    7860:	7cc2      	ldrb	r2, [r0, #19]
    7862:	f36f 1286 	bfc	r2, #6, #1
    7866:	74c2      	strb	r2, [r0, #19]
    7868:	015a      	lsls	r2, r3, #5
    786a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    786e:	2180      	movs	r1, #128	; 0x80
    7870:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7874:	2140      	movs	r1, #64	; 0x40
    7876:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    787a:	7cc2      	ldrb	r2, [r0, #19]
    787c:	f36f 02c3 	bfc	r2, #3, #1
    7880:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    7882:	490a      	ldr	r1, [pc, #40]	; (78ac <_usb_d_dev_handle_setup+0x7c>)
    7884:	015a      	lsls	r2, r3, #5
    7886:	188c      	adds	r4, r1, r2
    7888:	2500      	movs	r5, #0
    788a:	72a5      	strb	r5, [r4, #10]
    788c:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    788e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    7892:	246f      	movs	r4, #111	; 0x6f
    7894:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7898:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    789c:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    78a0:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    78a4:	7c80      	ldrb	r0, [r0, #18]
    78a6:	4798      	blx	r3
    78a8:	bd38      	pop	{r3, r4, r5, pc}
    78aa:	bf00      	nop
    78ac:	20000dc0 	.word	0x20000dc0

000078b0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    78b0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    78b2:	2320      	movs	r3, #32
    78b4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    78b8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    78ba:	7c83      	ldrb	r3, [r0, #18]
    78bc:	f003 030f 	and.w	r3, r3, #15
    78c0:	015b      	lsls	r3, r3, #5
    78c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    78c6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    78ca:	4b04      	ldr	r3, [pc, #16]	; (78dc <_usb_d_dev_handle_stall+0x2c>)
    78cc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    78d0:	6882      	ldr	r2, [r0, #8]
    78d2:	2101      	movs	r1, #1
    78d4:	7c80      	ldrb	r0, [r0, #18]
    78d6:	4798      	blx	r3
    78d8:	bd08      	pop	{r3, pc}
    78da:	bf00      	nop
    78dc:	20000dc0 	.word	0x20000dc0

000078e0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    78e0:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    78e2:	7c84      	ldrb	r4, [r0, #18]
    78e4:	2cff      	cmp	r4, #255	; 0xff
    78e6:	d003      	beq.n	78f0 <_usb_d_dev_trans_done+0x10>
    78e8:	7cc3      	ldrb	r3, [r0, #19]
    78ea:	f013 0f40 	tst.w	r3, #64	; 0x40
    78ee:	d100      	bne.n	78f2 <_usb_d_dev_trans_done+0x12>
    78f0:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    78f2:	7cc2      	ldrb	r2, [r0, #19]
    78f4:	f36f 1286 	bfc	r2, #6, #1
    78f8:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    78fa:	4a03      	ldr	r2, [pc, #12]	; (7908 <_usb_d_dev_trans_done+0x28>)
    78fc:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    7900:	6882      	ldr	r2, [r0, #8]
    7902:	4620      	mov	r0, r4
    7904:	47a8      	blx	r5
    7906:	e7f3      	b.n	78f0 <_usb_d_dev_trans_done+0x10>
    7908:	20000dc0 	.word	0x20000dc0

0000790c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    790c:	b530      	push	{r4, r5, lr}
    790e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7910:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    7912:	2425      	movs	r4, #37	; 0x25
    7914:	f88d 4004 	strb.w	r4, [sp, #4]
    7918:	244a      	movs	r4, #74	; 0x4a
    791a:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    791e:	2bff      	cmp	r3, #255	; 0xff
    7920:	d01e      	beq.n	7960 <_usb_d_dev_trans_stop+0x54>
    7922:	7cc4      	ldrb	r4, [r0, #19]
    7924:	f014 0f40 	tst.w	r4, #64	; 0x40
    7928:	d01a      	beq.n	7960 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    792a:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    792e:	b1c9      	cbz	r1, 7964 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7930:	0163      	lsls	r3, r4, #5
    7932:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7936:	2580      	movs	r5, #128	; 0x80
    7938:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    793c:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    793e:	a902      	add	r1, sp, #8
    7940:	440b      	add	r3, r1
    7942:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7946:	0163      	lsls	r3, r4, #5
    7948:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    794c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7950:	0163      	lsls	r3, r4, #5
    7952:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7956:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    795a:	4611      	mov	r1, r2
    795c:	4b05      	ldr	r3, [pc, #20]	; (7974 <_usb_d_dev_trans_stop+0x68>)
    795e:	4798      	blx	r3
}
    7960:	b003      	add	sp, #12
    7962:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7964:	0163      	lsls	r3, r4, #5
    7966:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    796a:	2540      	movs	r5, #64	; 0x40
    796c:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    7970:	e7e4      	b.n	793c <_usb_d_dev_trans_stop+0x30>
    7972:	bf00      	nop
    7974:	000078e1 	.word	0x000078e1

00007978 <_usb_d_dev_handle_trfail>:
{
    7978:	b530      	push	{r4, r5, lr}
    797a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    797c:	7c83      	ldrb	r3, [r0, #18]
    797e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    7982:	2204      	movs	r2, #4
    7984:	f88d 2004 	strb.w	r2, [sp, #4]
    7988:	2208      	movs	r2, #8
    798a:	f88d 2005 	strb.w	r2, [sp, #5]
    798e:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    7990:	460c      	mov	r4, r1
    7992:	b391      	cbz	r1, 79fa <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7994:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    7998:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    799c:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    79a0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    79a4:	4a32      	ldr	r2, [pc, #200]	; (7a70 <_usb_d_dev_handle_trfail+0xf8>)
    79a6:	440a      	add	r2, r1
    79a8:	7a91      	ldrb	r1, [r2, #10]
    79aa:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    79ac:	2d02      	cmp	r5, #2
    79ae:	d02c      	beq.n	7a0a <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    79b0:	f011 0f02 	tst.w	r1, #2
    79b4:	d045      	beq.n	7a42 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    79b6:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    79b8:	7a91      	ldrb	r1, [r2, #10]
    79ba:	f36f 0141 	bfc	r1, #1, #1
    79be:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    79c0:	aa02      	add	r2, sp, #8
    79c2:	4422      	add	r2, r4
    79c4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    79c8:	015a      	lsls	r2, r3, #5
    79ca:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    79ce:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    79d2:	015b      	lsls	r3, r3, #5
    79d4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    79d8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    79dc:	f005 0307 	and.w	r3, r5, #7
    79e0:	2b01      	cmp	r3, #1
    79e2:	d143      	bne.n	7a6c <_usb_d_dev_handle_trfail+0xf4>
    79e4:	7cc3      	ldrb	r3, [r0, #19]
    79e6:	f013 0f40 	tst.w	r3, #64	; 0x40
    79ea:	d03f      	beq.n	7a6c <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    79ec:	09d9      	lsrs	r1, r3, #7
    79ee:	428c      	cmp	r4, r1
    79f0:	d03c      	beq.n	7a6c <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    79f2:	2200      	movs	r2, #0
    79f4:	4b1f      	ldr	r3, [pc, #124]	; (7a74 <_usb_d_dev_handle_trfail+0xfc>)
    79f6:	4798      	blx	r3
    79f8:	e038      	b.n	7a6c <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    79fa:	0159      	lsls	r1, r3, #5
    79fc:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    7a00:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7a04:	f005 0507 	and.w	r5, r5, #7
    7a08:	e7ca      	b.n	79a0 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    7a0a:	f011 0f01 	tst.w	r1, #1
    7a0e:	d0cf      	beq.n	79b0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    7a10:	7a91      	ldrb	r1, [r2, #10]
    7a12:	f36f 0100 	bfc	r1, #0, #1
    7a16:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7a18:	aa02      	add	r2, sp, #8
    7a1a:	4422      	add	r2, r4
    7a1c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7a20:	015a      	lsls	r2, r3, #5
    7a22:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7a26:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7a2a:	015b      	lsls	r3, r3, #5
    7a2c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7a30:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    7a34:	2204      	movs	r2, #4
    7a36:	1c21      	adds	r1, r4, #0
    7a38:	bf18      	it	ne
    7a3a:	2101      	movne	r1, #1
    7a3c:	4b0d      	ldr	r3, [pc, #52]	; (7a74 <_usb_d_dev_handle_trfail+0xfc>)
    7a3e:	4798      	blx	r3
    7a40:	e014      	b.n	7a6c <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    7a42:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    7a46:	4a0a      	ldr	r2, [pc, #40]	; (7a70 <_usb_d_dev_handle_trfail+0xf8>)
    7a48:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    7a4c:	2100      	movs	r1, #0
    7a4e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7a50:	aa02      	add	r2, sp, #8
    7a52:	4414      	add	r4, r2
    7a54:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7a58:	015a      	lsls	r2, r3, #5
    7a5a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7a5e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7a62:	015b      	lsls	r3, r3, #5
    7a64:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7a68:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    7a6c:	b003      	add	sp, #12
    7a6e:	bd30      	pop	{r4, r5, pc}
    7a70:	20000dc0 	.word	0x20000dc0
    7a74:	0000790d 	.word	0x0000790d

00007a78 <_usb_d_dev_reset_epts>:
{
    7a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a7c:	4d0c      	ldr	r5, [pc, #48]	; (7ab0 <_usb_d_dev_reset_epts+0x38>)
    7a7e:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    7a82:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    7a86:	f04f 0803 	mov.w	r8, #3
    7a8a:	4f0a      	ldr	r7, [pc, #40]	; (7ab4 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    7a8c:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    7a8e:	4641      	mov	r1, r8
    7a90:	4620      	mov	r0, r4
    7a92:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    7a94:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    7a96:	2300      	movs	r3, #0
    7a98:	74e3      	strb	r3, [r4, #19]
    7a9a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    7a9c:	42ac      	cmp	r4, r5
    7a9e:	d1f6      	bne.n	7a8e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    7aa0:	22c0      	movs	r2, #192	; 0xc0
    7aa2:	4619      	mov	r1, r3
    7aa4:	4802      	ldr	r0, [pc, #8]	; (7ab0 <_usb_d_dev_reset_epts+0x38>)
    7aa6:	4b04      	ldr	r3, [pc, #16]	; (7ab8 <_usb_d_dev_reset_epts+0x40>)
    7aa8:	4798      	blx	r3
    7aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7aae:	bf00      	nop
    7ab0:	20000dc0 	.word	0x20000dc0
    7ab4:	000078e1 	.word	0x000078e1
    7ab8:	0000afcf 	.word	0x0000afcf

00007abc <_usb_d_dev_in_next>:
{
    7abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ac0:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    7ac2:	7c84      	ldrb	r4, [r0, #18]
    7ac4:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    7ac8:	4688      	mov	r8, r1
    7aca:	2900      	cmp	r1, #0
    7acc:	f000 80a0 	beq.w	7c10 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    7ad0:	4b58      	ldr	r3, [pc, #352]	; (7c34 <_usb_d_dev_in_next+0x178>)
    7ad2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    7ad6:	6958      	ldr	r0, [r3, #20]
    7ad8:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7adc:	8a2b      	ldrh	r3, [r5, #16]
    7ade:	f240 32ff 	movw	r2, #1023	; 0x3ff
    7ae2:	4293      	cmp	r3, r2
    7ae4:	f000 808e 	beq.w	7c04 <_usb_d_dev_in_next+0x148>
    7ae8:	3b01      	subs	r3, #1
    7aea:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    7aec:	7cef      	ldrb	r7, [r5, #19]
    7aee:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    7af2:	f1b8 0f00 	cmp.w	r8, #0
    7af6:	d005      	beq.n	7b04 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7af8:	0162      	lsls	r2, r4, #5
    7afa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7afe:	2302      	movs	r3, #2
    7b00:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    7b04:	68a9      	ldr	r1, [r5, #8]
    7b06:	eb0e 0301 	add.w	r3, lr, r1
    7b0a:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    7b0c:	686e      	ldr	r6, [r5, #4]
    7b0e:	42b3      	cmp	r3, r6
    7b10:	d23f      	bcs.n	7b92 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    7b12:	1af6      	subs	r6, r6, r3
    7b14:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    7b16:	7cea      	ldrb	r2, [r5, #19]
    7b18:	f012 0f20 	tst.w	r2, #32
    7b1c:	d02d      	beq.n	7b7a <_usb_d_dev_in_next+0xbe>
    7b1e:	8a2a      	ldrh	r2, [r5, #16]
    7b20:	4296      	cmp	r6, r2
    7b22:	bf28      	it	cs
    7b24:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    7b26:	6829      	ldr	r1, [r5, #0]
    7b28:	4632      	mov	r2, r6
    7b2a:	4419      	add	r1, r3
    7b2c:	68e8      	ldr	r0, [r5, #12]
    7b2e:	4b42      	ldr	r3, [pc, #264]	; (7c38 <_usb_d_dev_in_next+0x17c>)
    7b30:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    7b32:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    7b34:	4b3f      	ldr	r3, [pc, #252]	; (7c34 <_usb_d_dev_in_next+0x178>)
    7b36:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7b3a:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    7b3c:	4b3d      	ldr	r3, [pc, #244]	; (7c34 <_usb_d_dev_in_next+0x178>)
    7b3e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7b42:	695a      	ldr	r2, [r3, #20]
    7b44:	f366 020d 	bfi	r2, r6, #0, #14
    7b48:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    7b4a:	695a      	ldr	r2, [r3, #20]
    7b4c:	f36f 329b 	bfc	r2, #14, #14
    7b50:	615a      	str	r2, [r3, #20]
	if (!isr) {
    7b52:	f1b8 0f00 	cmp.w	r8, #0
    7b56:	d108      	bne.n	7b6a <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    7b58:	2f01      	cmp	r7, #1
    7b5a:	bf0c      	ite	eq
    7b5c:	224e      	moveq	r2, #78	; 0x4e
    7b5e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7b60:	0163      	lsls	r3, r4, #5
    7b62:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7b66:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7b6a:	0164      	lsls	r4, r4, #5
    7b6c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    7b70:	2380      	movs	r3, #128	; 0x80
    7b72:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    7b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b7a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    7b7e:	bf28      	it	cs
    7b80:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    7b84:	6829      	ldr	r1, [r5, #0]
    7b86:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    7b88:	4a2a      	ldr	r2, [pc, #168]	; (7c34 <_usb_d_dev_in_next+0x178>)
    7b8a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    7b8e:	6113      	str	r3, [r2, #16]
    7b90:	e7d4      	b.n	7b3c <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    7b92:	7ceb      	ldrb	r3, [r5, #19]
    7b94:	f013 0f10 	tst.w	r3, #16
    7b98:	d00f      	beq.n	7bba <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    7b9a:	7ceb      	ldrb	r3, [r5, #19]
    7b9c:	f36f 1304 	bfc	r3, #4, #1
    7ba0:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    7ba2:	4b24      	ldr	r3, [pc, #144]	; (7c34 <_usb_d_dev_in_next+0x178>)
    7ba4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7ba8:	695a      	ldr	r2, [r3, #20]
    7baa:	f36f 020d 	bfc	r2, #0, #14
    7bae:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    7bb0:	695a      	ldr	r2, [r3, #20]
    7bb2:	f36f 329b 	bfc	r2, #14, #14
    7bb6:	615a      	str	r2, [r3, #20]
    7bb8:	e7cb      	b.n	7b52 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    7bba:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7bbc:	ea4f 1444 	mov.w	r4, r4, lsl #5
    7bc0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    7bc4:	bf0c      	ite	eq
    7bc6:	234b      	moveq	r3, #75	; 0x4b
    7bc8:	234a      	movne	r3, #74	; 0x4a
    7bca:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    7bce:	8a2a      	ldrh	r2, [r5, #16]
    7bd0:	ea00 030e 	and.w	r3, r0, lr
    7bd4:	429a      	cmp	r2, r3
    7bd6:	d005      	beq.n	7be4 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    7bd8:	2100      	movs	r1, #0
    7bda:	4628      	mov	r0, r5
    7bdc:	4b17      	ldr	r3, [pc, #92]	; (7c3c <_usb_d_dev_in_next+0x180>)
    7bde:	4798      	blx	r3
	return;
    7be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    7be4:	7ceb      	ldrb	r3, [r5, #19]
    7be6:	f36f 1386 	bfc	r3, #6, #1
    7bea:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    7bec:	4b11      	ldr	r3, [pc, #68]	; (7c34 <_usb_d_dev_in_next+0x178>)
    7bee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    7bf2:	68a9      	ldr	r1, [r5, #8]
    7bf4:	7ca8      	ldrb	r0, [r5, #18]
    7bf6:	4798      	blx	r3
    7bf8:	b9d0      	cbnz	r0, 7c30 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    7bfa:	7ceb      	ldrb	r3, [r5, #19]
    7bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7c00:	74eb      	strb	r3, [r5, #19]
    7c02:	e7e9      	b.n	7bd8 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    7c04:	7cef      	ldrb	r7, [r5, #19]
    7c06:	f007 0707 	and.w	r7, r7, #7
    7c0a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    7c0e:	e773      	b.n	7af8 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7c10:	8a03      	ldrh	r3, [r0, #16]
    7c12:	f240 32ff 	movw	r2, #1023	; 0x3ff
    7c16:	4293      	cmp	r3, r2
    7c18:	d107      	bne.n	7c2a <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    7c1a:	7cef      	ldrb	r7, [r5, #19]
    7c1c:	f007 0707 	and.w	r7, r7, #7
    7c20:	f04f 0e00 	mov.w	lr, #0
    7c24:	f240 30ff 	movw	r0, #1023	; 0x3ff
    7c28:	e76c      	b.n	7b04 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7c2a:	f04f 0e00 	mov.w	lr, #0
    7c2e:	e75b      	b.n	7ae8 <_usb_d_dev_in_next+0x2c>
    7c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c34:	20000dc0 	.word	0x20000dc0
    7c38:	0000afb9 	.word	0x0000afb9
    7c3c:	000078e1 	.word	0x000078e1

00007c40 <_usb_d_dev_out_next>:
{
    7c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c44:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    7c46:	7c85      	ldrb	r5, [r0, #18]
    7c48:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    7c4c:	4689      	mov	r9, r1
    7c4e:	2900      	cmp	r1, #0
    7c50:	d056      	beq.n	7d00 <_usb_d_dev_out_next+0xc0>
    7c52:	4b74      	ldr	r3, [pc, #464]	; (7e24 <_usb_d_dev_out_next+0x1e4>)
    7c54:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    7c58:	685a      	ldr	r2, [r3, #4]
    7c5a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    7c5e:	685f      	ldr	r7, [r3, #4]
    7c60:	f3c7 070d 	ubfx	r7, r7, #0, #14
    7c64:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7c66:	8a06      	ldrh	r6, [r0, #16]
    7c68:	f240 33ff 	movw	r3, #1023	; 0x3ff
    7c6c:	429e      	cmp	r6, r3
    7c6e:	f000 80ba 	beq.w	7de6 <_usb_d_dev_out_next+0x1a6>
    7c72:	3e01      	subs	r6, #1
    7c74:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    7c76:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7c7a:	f894 8013 	ldrb.w	r8, [r4, #19]
    7c7e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    7c82:	f1b9 0f00 	cmp.w	r9, #0
    7c86:	d005      	beq.n	7c94 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7c88:	016b      	lsls	r3, r5, #5
    7c8a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7c8e:	2201      	movs	r2, #1
    7c90:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    7c94:	7ce3      	ldrb	r3, [r4, #19]
    7c96:	f013 0f20 	tst.w	r3, #32
    7c9a:	d00d      	beq.n	7cb8 <_usb_d_dev_out_next+0x78>
    7c9c:	6862      	ldr	r2, [r4, #4]
    7c9e:	2a00      	cmp	r2, #0
    7ca0:	d037      	beq.n	7d12 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    7ca2:	68a0      	ldr	r0, [r4, #8]
    7ca4:	1a12      	subs	r2, r2, r0
    7ca6:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    7ca8:	6823      	ldr	r3, [r4, #0]
    7caa:	42ba      	cmp	r2, r7
    7cac:	bf28      	it	cs
    7cae:	463a      	movcs	r2, r7
    7cb0:	68e1      	ldr	r1, [r4, #12]
    7cb2:	4418      	add	r0, r3
    7cb4:	4b5c      	ldr	r3, [pc, #368]	; (7e28 <_usb_d_dev_out_next+0x1e8>)
    7cb6:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    7cb8:	6863      	ldr	r3, [r4, #4]
    7cba:	b353      	cbz	r3, 7d12 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    7cbc:	f1b9 0f00 	cmp.w	r9, #0
    7cc0:	d040      	beq.n	7d44 <_usb_d_dev_out_next+0x104>
    7cc2:	8a22      	ldrh	r2, [r4, #16]
    7cc4:	42ba      	cmp	r2, r7
    7cc6:	d93d      	bls.n	7d44 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    7cc8:	7ce3      	ldrb	r3, [r4, #19]
    7cca:	f36f 1304 	bfc	r3, #4, #1
    7cce:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    7cd0:	68a3      	ldr	r3, [r4, #8]
    7cd2:	445b      	add	r3, fp
    7cd4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    7cd6:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7cda:	ea4f 1345 	mov.w	r3, r5, lsl #5
    7cde:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7ce2:	bf0c      	ite	eq
    7ce4:	222d      	moveq	r2, #45	; 0x2d
    7ce6:	2225      	movne	r2, #37	; 0x25
    7ce8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    7cec:	b915      	cbnz	r5, 7cf4 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7cee:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    7cf0:	4b4c      	ldr	r3, [pc, #304]	; (7e24 <_usb_d_dev_out_next+0x1e4>)
    7cf2:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    7cf4:	2100      	movs	r1, #0
    7cf6:	4620      	mov	r0, r4
    7cf8:	4b4c      	ldr	r3, [pc, #304]	; (7e2c <_usb_d_dev_out_next+0x1ec>)
    7cfa:	4798      	blx	r3
	return;
    7cfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7d00:	8a06      	ldrh	r6, [r0, #16]
    7d02:	f240 33ff 	movw	r3, #1023	; 0x3ff
    7d06:	429e      	cmp	r6, r3
    7d08:	d07b      	beq.n	7e02 <_usb_d_dev_out_next+0x1c2>
    7d0a:	f04f 0b00 	mov.w	fp, #0
    7d0e:	46da      	mov	sl, fp
    7d10:	e7af      	b.n	7c72 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    7d12:	7ce3      	ldrb	r3, [r4, #19]
    7d14:	f013 0f10 	tst.w	r3, #16
    7d18:	d06c      	beq.n	7df4 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    7d1a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    7d1c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    7d20:	f043 0320 	orr.w	r3, r3, #32
    7d24:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7d26:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    7d28:	493e      	ldr	r1, [pc, #248]	; (7e24 <_usb_d_dev_out_next+0x1e4>)
    7d2a:	016a      	lsls	r2, r5, #5
    7d2c:	188b      	adds	r3, r1, r2
    7d2e:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    7d30:	8a21      	ldrh	r1, [r4, #16]
    7d32:	685a      	ldr	r2, [r3, #4]
    7d34:	f361 329b 	bfi	r2, r1, #14, #14
    7d38:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    7d3a:	685a      	ldr	r2, [r3, #4]
    7d3c:	f36f 020d 	bfc	r2, #0, #14
    7d40:	605a      	str	r2, [r3, #4]
    7d42:	e01d      	b.n	7d80 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    7d44:	68a2      	ldr	r2, [r4, #8]
    7d46:	4452      	add	r2, sl
    7d48:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    7d4a:	4293      	cmp	r3, r2
    7d4c:	d9c3      	bls.n	7cd6 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    7d4e:	1a9b      	subs	r3, r3, r2
    7d50:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    7d52:	7ce1      	ldrb	r1, [r4, #19]
    7d54:	f011 0f20 	tst.w	r1, #32
    7d58:	d026      	beq.n	7da8 <_usb_d_dev_out_next+0x168>
    7d5a:	8a22      	ldrh	r2, [r4, #16]
    7d5c:	4293      	cmp	r3, r2
    7d5e:	bf28      	it	cs
    7d60:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7d62:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    7d64:	016a      	lsls	r2, r5, #5
    7d66:	492f      	ldr	r1, [pc, #188]	; (7e24 <_usb_d_dev_out_next+0x1e4>)
    7d68:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    7d6a:	4a2e      	ldr	r2, [pc, #184]	; (7e24 <_usb_d_dev_out_next+0x1e4>)
    7d6c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    7d70:	6851      	ldr	r1, [r2, #4]
    7d72:	f363 319b 	bfi	r1, r3, #14, #14
    7d76:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    7d78:	6853      	ldr	r3, [r2, #4]
    7d7a:	f36f 030d 	bfc	r3, #0, #14
    7d7e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    7d80:	f1b9 0f00 	cmp.w	r9, #0
    7d84:	d108      	bne.n	7d98 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    7d86:	f1b8 0f01 	cmp.w	r8, #1
    7d8a:	d025      	beq.n	7dd8 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    7d8c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7d8e:	016b      	lsls	r3, r5, #5
    7d90:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7d94:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7d98:	016d      	lsls	r5, r5, #5
    7d9a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    7d9e:	2340      	movs	r3, #64	; 0x40
    7da0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    7da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    7da8:	8a21      	ldrh	r1, [r4, #16]
    7daa:	428b      	cmp	r3, r1
    7dac:	d90a      	bls.n	7dc4 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    7dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    7db2:	d80e      	bhi.n	7dd2 <_usb_d_dev_out_next+0x192>
    7db4:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    7db8:	6821      	ldr	r1, [r4, #0]
    7dba:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    7dbc:	0169      	lsls	r1, r5, #5
    7dbe:	4819      	ldr	r0, [pc, #100]	; (7e24 <_usb_d_dev_out_next+0x1e4>)
    7dc0:	5042      	str	r2, [r0, r1]
    7dc2:	e7d2      	b.n	7d6a <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    7dc4:	428b      	cmp	r3, r1
    7dc6:	d2f7      	bcs.n	7db8 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    7dc8:	7ce1      	ldrb	r1, [r4, #19]
    7dca:	f041 0120 	orr.w	r1, r1, #32
    7dce:	74e1      	strb	r1, [r4, #19]
    7dd0:	e7f2      	b.n	7db8 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    7dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    7dd6:	e7ef      	b.n	7db8 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    7dd8:	4b12      	ldr	r3, [pc, #72]	; (7e24 <_usb_d_dev_out_next+0x1e4>)
    7dda:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    7dde:	2200      	movs	r2, #0
    7de0:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    7de2:	222d      	movs	r2, #45	; 0x2d
    7de4:	e7d3      	b.n	7d8e <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    7de6:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7dea:	f890 8013 	ldrb.w	r8, [r0, #19]
    7dee:	f008 0807 	and.w	r8, r8, #7
    7df2:	e749      	b.n	7c88 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    7df4:	f1b9 0f00 	cmp.w	r9, #0
    7df8:	d10b      	bne.n	7e12 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    7dfa:	68a3      	ldr	r3, [r4, #8]
    7dfc:	4453      	add	r3, sl
    7dfe:	60a3      	str	r3, [r4, #8]
    7e00:	e769      	b.n	7cd6 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e02:	f890 8013 	ldrb.w	r8, [r0, #19]
    7e06:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    7e0a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e0c:	46bb      	mov	fp, r7
    7e0e:	46ba      	mov	sl, r7
    7e10:	e740      	b.n	7c94 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    7e12:	8a23      	ldrh	r3, [r4, #16]
    7e14:	42bb      	cmp	r3, r7
    7e16:	f63f af57 	bhi.w	7cc8 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    7e1a:	68a3      	ldr	r3, [r4, #8]
    7e1c:	4453      	add	r3, sl
    7e1e:	60a3      	str	r3, [r4, #8]
    7e20:	e759      	b.n	7cd6 <_usb_d_dev_out_next+0x96>
    7e22:	bf00      	nop
    7e24:	20000dc0 	.word	0x20000dc0
    7e28:	0000afb9 	.word	0x0000afb9
    7e2c:	000078e1 	.word	0x000078e1

00007e30 <_usb_d_dev_handler>:
{
    7e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    7e34:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7e38:	8c1e      	ldrh	r6, [r3, #32]
    7e3a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    7e3c:	b146      	cbz	r6, 7e50 <_usb_d_dev_handler+0x20>
    7e3e:	4d96      	ldr	r5, [pc, #600]	; (8098 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    7e40:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    7e42:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    7e46:	f8df 926c 	ldr.w	r9, [pc, #620]	; 80b4 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    7e4a:	f8df 826c 	ldr.w	r8, [pc, #620]	; 80b8 <_usb_d_dev_handler+0x288>
    7e4e:	e0de      	b.n	800e <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7e50:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7e52:	8b1b      	ldrh	r3, [r3, #24]
    7e54:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    7e56:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    7e58:	f013 0f04 	tst.w	r3, #4
    7e5c:	d11e      	bne.n	7e9c <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    7e5e:	f413 7f00 	tst.w	r3, #512	; 0x200
    7e62:	d125      	bne.n	7eb0 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    7e64:	f013 0f80 	tst.w	r3, #128	; 0x80
    7e68:	d14f      	bne.n	7f0a <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    7e6a:	f013 0f70 	tst.w	r3, #112	; 0x70
    7e6e:	d158      	bne.n	7f22 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    7e70:	f013 0f08 	tst.w	r3, #8
    7e74:	d178      	bne.n	7f68 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    7e76:	f013 0f01 	tst.w	r3, #1
    7e7a:	d0e0      	beq.n	7e3e <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7e7c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7e80:	f240 2201 	movw	r2, #513	; 0x201
    7e84:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7e86:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7e88:	2270      	movs	r2, #112	; 0x70
    7e8a:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    7e8c:	4b83      	ldr	r3, [pc, #524]	; (809c <_usb_d_dev_handler+0x26c>)
    7e8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7e92:	2100      	movs	r1, #0
    7e94:	2004      	movs	r0, #4
    7e96:	4798      	blx	r3
    7e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7e9c:	2204      	movs	r2, #4
    7e9e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7ea2:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    7ea4:	4b7d      	ldr	r3, [pc, #500]	; (809c <_usb_d_dev_handler+0x26c>)
    7ea6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    7eaa:	4798      	blx	r3
    7eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7eb0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7eb4:	f240 2201 	movw	r2, #513	; 0x201
    7eb8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7eba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7ebc:	2270      	movs	r2, #112	; 0x70
    7ebe:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    7ec0:	4b76      	ldr	r3, [pc, #472]	; (809c <_usb_d_dev_handler+0x26c>)
    7ec2:	891b      	ldrh	r3, [r3, #8]
    7ec4:	f003 030f 	and.w	r3, r3, #15
    7ec8:	2b03      	cmp	r3, #3
    7eca:	d014      	beq.n	7ef6 <_usb_d_dev_handler+0xc6>
    7ecc:	2301      	movs	r3, #1
    7ece:	4873      	ldr	r0, [pc, #460]	; (809c <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    7ed0:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    7ed2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    7ed6:	8912      	ldrh	r2, [r2, #8]
    7ed8:	f002 020f 	and.w	r2, r2, #15
    7edc:	2a03      	cmp	r2, #3
    7ede:	d00b      	beq.n	7ef8 <_usb_d_dev_handler+0xc8>
    7ee0:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    7ee2:	2b05      	cmp	r3, #5
    7ee4:	d1f4      	bne.n	7ed0 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    7ee6:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    7ee8:	4b6c      	ldr	r3, [pc, #432]	; (809c <_usb_d_dev_handler+0x26c>)
    7eea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7eee:	2003      	movs	r0, #3
    7ef0:	4798      	blx	r3
    7ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    7ef6:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    7ef8:	4b68      	ldr	r3, [pc, #416]	; (809c <_usb_d_dev_handler+0x26c>)
    7efa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    7efe:	8919      	ldrh	r1, [r3, #8]
    7f00:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    7f04:	2200      	movs	r2, #0
    7f06:	811a      	strh	r2, [r3, #8]
    7f08:	e7ee      	b.n	7ee8 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7f0a:	2280      	movs	r2, #128	; 0x80
    7f0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f10:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    7f12:	4b62      	ldr	r3, [pc, #392]	; (809c <_usb_d_dev_handler+0x26c>)
    7f14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7f18:	2100      	movs	r1, #0
    7f1a:	2005      	movs	r0, #5
    7f1c:	4798      	blx	r3
    7f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f22:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f26:	2270      	movs	r2, #112	; 0x70
    7f28:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7f2a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7f2c:	f240 2201 	movw	r2, #513	; 0x201
    7f30:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7f32:	4b5b      	ldr	r3, [pc, #364]	; (80a0 <_usb_d_dev_handler+0x270>)
    7f34:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    7f38:	f013 0f01 	tst.w	r3, #1
    7f3c:	d00e      	beq.n	7f5c <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7f3e:	4a58      	ldr	r2, [pc, #352]	; (80a0 <_usb_d_dev_handler+0x270>)
    7f40:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    7f42:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    7f46:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    7f4a:	d1f9      	bne.n	7f40 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    7f4c:	4b53      	ldr	r3, [pc, #332]	; (809c <_usb_d_dev_handler+0x26c>)
    7f4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7f52:	2100      	movs	r1, #0
    7f54:	2002      	movs	r0, #2
    7f56:	4798      	blx	r3
    7f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7f5c:	4a50      	ldr	r2, [pc, #320]	; (80a0 <_usb_d_dev_handler+0x270>)
    7f5e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    7f60:	f413 7f80 	tst.w	r3, #256	; 0x100
    7f64:	d0fb      	beq.n	7f5e <_usb_d_dev_handler+0x12e>
    7f66:	e7f1      	b.n	7f4c <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7f68:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f6c:	2400      	movs	r4, #0
    7f6e:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7f72:	2208      	movs	r2, #8
    7f74:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7f76:	2270      	movs	r2, #112	; 0x70
    7f78:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7f7a:	f240 2201 	movw	r2, #513	; 0x201
    7f7e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    7f80:	4b48      	ldr	r3, [pc, #288]	; (80a4 <_usb_d_dev_handler+0x274>)
    7f82:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    7f84:	4b45      	ldr	r3, [pc, #276]	; (809c <_usb_d_dev_handler+0x26c>)
    7f86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7f8a:	4621      	mov	r1, r4
    7f8c:	2001      	movs	r0, #1
    7f8e:	4798      	blx	r3
    7f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    7f94:	f011 0f10 	tst.w	r1, #16
    7f98:	d109      	bne.n	7fae <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    7f9a:	f011 0f40 	tst.w	r1, #64	; 0x40
    7f9e:	d108      	bne.n	7fb2 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    7fa0:	f011 0f20 	tst.w	r1, #32
    7fa4:	d02f      	beq.n	8006 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    7fa6:	2100      	movs	r1, #0
    7fa8:	4b3f      	ldr	r3, [pc, #252]	; (80a8 <_usb_d_dev_handler+0x278>)
    7faa:	4798      	blx	r3
    7fac:	e02b      	b.n	8006 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    7fae:	47c8      	blx	r9
    7fb0:	e029      	b.n	8006 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    7fb2:	2101      	movs	r1, #1
    7fb4:	4b3c      	ldr	r3, [pc, #240]	; (80a8 <_usb_d_dev_handler+0x278>)
    7fb6:	4798      	blx	r3
    7fb8:	e025      	b.n	8006 <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    7fba:	f011 0f40 	tst.w	r1, #64	; 0x40
    7fbe:	d111      	bne.n	7fe4 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    7fc0:	f011 0f08 	tst.w	r1, #8
    7fc4:	d112      	bne.n	7fec <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    7fc6:	f011 0f02 	tst.w	r1, #2
    7fca:	d112      	bne.n	7ff2 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    7fcc:	f003 0307 	and.w	r3, r3, #7
    7fd0:	2b01      	cmp	r3, #1
    7fd2:	d118      	bne.n	8006 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    7fd4:	f011 0f04 	tst.w	r1, #4
    7fd8:	d10f      	bne.n	7ffa <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    7fda:	f011 0f10 	tst.w	r1, #16
    7fde:	d012      	beq.n	8006 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    7fe0:	47c8      	blx	r9
    7fe2:	e010      	b.n	8006 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    7fe4:	2101      	movs	r1, #1
    7fe6:	4b30      	ldr	r3, [pc, #192]	; (80a8 <_usb_d_dev_handler+0x278>)
    7fe8:	4798      	blx	r3
    7fea:	e00c      	b.n	8006 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    7fec:	2101      	movs	r1, #1
    7fee:	47c0      	blx	r8
    7ff0:	e009      	b.n	8006 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    7ff2:	2101      	movs	r1, #1
    7ff4:	4b2d      	ldr	r3, [pc, #180]	; (80ac <_usb_d_dev_handler+0x27c>)
    7ff6:	4798      	blx	r3
    7ff8:	e005      	b.n	8006 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    7ffa:	2100      	movs	r1, #0
    7ffc:	47c0      	blx	r8
    7ffe:	e002      	b.n	8006 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8000:	2100      	movs	r1, #0
    8002:	4b29      	ldr	r3, [pc, #164]	; (80a8 <_usb_d_dev_handler+0x278>)
    8004:	4798      	blx	r3
    8006:	3401      	adds	r4, #1
    8008:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    800a:	2c1b      	cmp	r4, #27
    800c:	d042      	beq.n	8094 <_usb_d_dev_handler+0x264>
    800e:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8010:	7cab      	ldrb	r3, [r5, #18]
    8012:	2bff      	cmp	r3, #255	; 0xff
    8014:	d0f7      	beq.n	8006 <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    8016:	f003 030f 	and.w	r3, r3, #15
    801a:	2101      	movs	r1, #1
    801c:	4099      	lsls	r1, r3
    801e:	4231      	tst	r1, r6
    8020:	d0f1      	beq.n	8006 <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8022:	0159      	lsls	r1, r3, #5
    8024:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8028:	f501 7180 	add.w	r1, r1, #256	; 0x100
    802c:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    802e:	015b      	lsls	r3, r3, #5
    8030:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8034:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    8038:	4019      	ands	r1, r3
    803a:	d0e4      	beq.n	8006 <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    803c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8040:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8044:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    8048:	f003 0247 	and.w	r2, r3, #71	; 0x47
    804c:	2a01      	cmp	r2, #1
    804e:	d0a1      	beq.n	7f94 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8050:	f013 0f80 	tst.w	r3, #128	; 0x80
    8054:	d1b1      	bne.n	7fba <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8056:	f011 0f20 	tst.w	r1, #32
    805a:	d1d1      	bne.n	8000 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    805c:	f011 0f04 	tst.w	r1, #4
    8060:	d10e      	bne.n	8080 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8062:	f011 0f01 	tst.w	r1, #1
    8066:	d10e      	bne.n	8086 <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8068:	f003 0307 	and.w	r3, r3, #7
    806c:	2b01      	cmp	r3, #1
    806e:	d1ca      	bne.n	8006 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8070:	f011 0f08 	tst.w	r1, #8
    8074:	d10b      	bne.n	808e <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8076:	f011 0f10 	tst.w	r1, #16
    807a:	d0c4      	beq.n	8006 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    807c:	47c8      	blx	r9
    807e:	e7c2      	b.n	8006 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    8080:	2100      	movs	r1, #0
    8082:	47c0      	blx	r8
    8084:	e7bf      	b.n	8006 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    8086:	2101      	movs	r1, #1
    8088:	4b09      	ldr	r3, [pc, #36]	; (80b0 <_usb_d_dev_handler+0x280>)
    808a:	4798      	blx	r3
    808c:	e7bb      	b.n	8006 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    808e:	2101      	movs	r1, #1
    8090:	47c0      	blx	r8
    8092:	e7b8      	b.n	8006 <_usb_d_dev_handler+0x1d6>
    8094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8098:	20000e94 	.word	0x20000e94
    809c:	20000dc0 	.word	0x20000dc0
    80a0:	40001000 	.word	0x40001000
    80a4:	00007a79 	.word	0x00007a79
    80a8:	000078b1 	.word	0x000078b1
    80ac:	00007abd 	.word	0x00007abd
    80b0:	00007c41 	.word	0x00007c41
    80b4:	00007831 	.word	0x00007831
    80b8:	00007979 	.word	0x00007979

000080bc <_usb_d_dev_init>:
{
    80bc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    80be:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    80c2:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    80c4:	f013 0f01 	tst.w	r3, #1
    80c8:	d124      	bne.n	8114 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    80ca:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    80ce:	7893      	ldrb	r3, [r2, #2]
    80d0:	f013 0f03 	tst.w	r3, #3
    80d4:	d1fb      	bne.n	80ce <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    80d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    80da:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    80dc:	f013 0f02 	tst.w	r3, #2
    80e0:	d00f      	beq.n	8102 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    80e2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    80e6:	7813      	ldrb	r3, [r2, #0]
    80e8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    80ec:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    80ee:	7893      	ldrb	r3, [r2, #2]
    80f0:	f013 0f03 	tst.w	r3, #3
    80f4:	d1fb      	bne.n	80ee <_usb_d_dev_init+0x32>
    80f6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    80fa:	7893      	ldrb	r3, [r2, #2]
    80fc:	f013 0f02 	tst.w	r3, #2
    8100:	d1fb      	bne.n	80fa <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8102:	2201      	movs	r2, #1
    8104:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8108:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    810a:	461a      	mov	r2, r3
    810c:	7893      	ldrb	r3, [r2, #2]
    810e:	f013 0f03 	tst.w	r3, #3
    8112:	d1fb      	bne.n	810c <_usb_d_dev_init+0x50>
    8114:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8118:	7893      	ldrb	r3, [r2, #2]
    811a:	f013 0f01 	tst.w	r3, #1
    811e:	d1fb      	bne.n	8118 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8120:	4b24      	ldr	r3, [pc, #144]	; (81b4 <_usb_d_dev_init+0xf8>)
    8122:	4a25      	ldr	r2, [pc, #148]	; (81b8 <_usb_d_dev_init+0xfc>)
    8124:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    8128:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    812c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8130:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    8134:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    8138:	4b20      	ldr	r3, [pc, #128]	; (81bc <_usb_d_dev_init+0x100>)
    813a:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    813c:	4b20      	ldr	r3, [pc, #128]	; (81c0 <_usb_d_dev_init+0x104>)
    813e:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    8140:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8144:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8148:	f011 011f 	ands.w	r1, r1, #31
    814c:	d02b      	beq.n	81a6 <_usb_d_dev_init+0xea>
		pad_transn = 9;
    814e:	291f      	cmp	r1, #31
    8150:	bf08      	it	eq
    8152:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8154:	b34b      	cbz	r3, 81aa <_usb_d_dev_init+0xee>
		pad_transp = 25;
    8156:	2b1f      	cmp	r3, #31
    8158:	bf08      	it	eq
    815a:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    815c:	b33a      	cbz	r2, 81ae <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    815e:	2a07      	cmp	r2, #7
    8160:	bf08      	it	eq
    8162:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8164:	f003 031f 	and.w	r3, r3, #31
    8168:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    816c:	0312      	lsls	r2, r2, #12
    816e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    8172:	4313      	orrs	r3, r2
    8174:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8178:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    817a:	78d3      	ldrb	r3, [r2, #3]
    817c:	f043 0303 	orr.w	r3, r3, #3
    8180:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8182:	78d3      	ldrb	r3, [r2, #3]
    8184:	f043 030c 	orr.w	r3, r3, #12
    8188:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    818a:	2304      	movs	r3, #4
    818c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    818e:	7893      	ldrb	r3, [r2, #2]
    8190:	f013 0f03 	tst.w	r3, #3
    8194:	d1fb      	bne.n	818e <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8196:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    819a:	4a06      	ldr	r2, [pc, #24]	; (81b4 <_usb_d_dev_init+0xf8>)
    819c:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    819e:	2201      	movs	r2, #1
    81a0:	811a      	strh	r2, [r3, #8]
}
    81a2:	2000      	movs	r0, #0
    81a4:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    81a6:	2109      	movs	r1, #9
    81a8:	e7d4      	b.n	8154 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    81aa:	2319      	movs	r3, #25
    81ac:	e7d6      	b.n	815c <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    81ae:	2206      	movs	r2, #6
    81b0:	e7d8      	b.n	8164 <_usb_d_dev_init+0xa8>
    81b2:	bf00      	nop
    81b4:	20000dc0 	.word	0x20000dc0
    81b8:	0000782d 	.word	0x0000782d
    81bc:	00007a79 	.word	0x00007a79
    81c0:	00800084 	.word	0x00800084

000081c4 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    81c4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    81c8:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    81ca:	f013 0f03 	tst.w	r3, #3
    81ce:	d129      	bne.n	8224 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    81d0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    81d4:	7893      	ldrb	r3, [r2, #2]
    81d6:	f013 0f03 	tst.w	r3, #3
    81da:	d1fb      	bne.n	81d4 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    81dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    81e0:	781b      	ldrb	r3, [r3, #0]
    81e2:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    81e4:	f013 0f02 	tst.w	r3, #2
    81e8:	d108      	bne.n	81fc <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    81ea:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    81ee:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    81f2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    81f4:	7893      	ldrb	r3, [r2, #2]
    81f6:	f013 0f03 	tst.w	r3, #3
    81fa:	d1fb      	bne.n	81f4 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    81fc:	4b0b      	ldr	r3, [pc, #44]	; (822c <_usb_d_dev_enable+0x68>)
    81fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8202:	609a      	str	r2, [r3, #8]
    8204:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8208:	609a      	str	r2, [r3, #8]
    820a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    820e:	609a      	str	r2, [r3, #8]
    8210:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8214:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8216:	f240 228d 	movw	r2, #653	; 0x28d
    821a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    821e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    8220:	2000      	movs	r0, #0
    8222:	4770      	bx	lr
		return -USB_ERR_DENIED;
    8224:	f06f 0010 	mvn.w	r0, #16
}
    8228:	4770      	bx	lr
    822a:	bf00      	nop
    822c:	e000e100 	.word	0xe000e100

00008230 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8230:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8234:	8913      	ldrh	r3, [r2, #8]
    8236:	f023 0301 	bic.w	r3, r3, #1
    823a:	041b      	lsls	r3, r3, #16
    823c:	0c1b      	lsrs	r3, r3, #16
    823e:	8113      	strh	r3, [r2, #8]
    8240:	4770      	bx	lr

00008242 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    8242:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8246:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    824a:	7298      	strb	r0, [r3, #10]
    824c:	4770      	bx	lr
	...

00008250 <_usb_d_dev_ep_init>:
{
    8250:	b5f0      	push	{r4, r5, r6, r7, lr}
    8252:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8256:	f010 050f 	ands.w	r5, r0, #15
    825a:	d04d      	beq.n	82f8 <_usb_d_dev_ep_init+0xa8>
    825c:	f1be 0f00 	cmp.w	lr, #0
    8260:	bfb4      	ite	lt
    8262:	1d6c      	addlt	r4, r5, #5
    8264:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8266:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    826a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    826c:	2d05      	cmp	r5, #5
    826e:	d947      	bls.n	8300 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    8270:	f06f 0011 	mvn.w	r0, #17
    8274:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8276:	f1be 0f00 	cmp.w	lr, #0
    827a:	db1b      	blt.n	82b4 <_usb_d_dev_ep_init+0x64>
    827c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8280:	4e37      	ldr	r6, [pc, #220]	; (8360 <_usb_d_dev_ep_init+0x110>)
    8282:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8286:	2d00      	cmp	r5, #0
    8288:	d15e      	bne.n	8348 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    828a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    828e:	4d34      	ldr	r5, [pc, #208]	; (8360 <_usb_d_dev_ep_init+0x110>)
    8290:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    8294:	4d33      	ldr	r5, [pc, #204]	; (8364 <_usb_d_dev_ep_init+0x114>)
    8296:	00a6      	lsls	r6, r4, #2
    8298:	1933      	adds	r3, r6, r4
    829a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    829e:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    82a2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    82a6:	3101      	adds	r1, #1
    82a8:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    82ac:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    82b0:	2000      	movs	r0, #0
    82b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    82b4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    82b8:	4e29      	ldr	r6, [pc, #164]	; (8360 <_usb_d_dev_ep_init+0x110>)
    82ba:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    82be:	686d      	ldr	r5, [r5, #4]
    82c0:	b935      	cbnz	r5, 82d0 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    82c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    82c6:	4d26      	ldr	r5, [pc, #152]	; (8360 <_usb_d_dev_ep_init+0x110>)
    82c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    82cc:	685f      	ldr	r7, [r3, #4]
    82ce:	e7e1      	b.n	8294 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    82d0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    82d4:	4e22      	ldr	r6, [pc, #136]	; (8360 <_usb_d_dev_ep_init+0x110>)
    82d6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    82da:	896d      	ldrh	r5, [r5, #10]
    82dc:	4295      	cmp	r5, r2
    82de:	daf0      	bge.n	82c2 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    82e0:	f06f 0012 	mvn.w	r0, #18
    82e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    82e6:	f06f 0013 	mvn.w	r0, #19
    82ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    82ec:	f06f 0013 	mvn.w	r0, #19
    82f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    82f2:	f06f 0012 	mvn.w	r0, #18
    82f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    82f8:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    82fc:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    82fe:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    8300:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    8304:	4f17      	ldr	r7, [pc, #92]	; (8364 <_usb_d_dev_ep_init+0x114>)
    8306:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    830a:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    830e:	2eff      	cmp	r6, #255	; 0xff
    8310:	d1e9      	bne.n	82e6 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    8312:	2900      	cmp	r1, #0
    8314:	d1af      	bne.n	8276 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8316:	b125      	cbz	r5, 8322 <_usb_d_dev_ep_init+0xd2>
    8318:	f1be 0f00 	cmp.w	lr, #0
    831c:	bfa4      	itt	ge
    831e:	3505      	addge	r5, #5
    8320:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    8322:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8326:	4e0f      	ldr	r6, [pc, #60]	; (8364 <_usb_d_dev_ep_init+0x114>)
    8328:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    832c:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    8330:	2dff      	cmp	r5, #255	; 0xff
    8332:	d1db      	bne.n	82ec <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    8334:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8338:	4e09      	ldr	r6, [pc, #36]	; (8360 <_usb_d_dev_ep_init+0x110>)
    833a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    833e:	2d00      	cmp	r5, #0
    8340:	d0d7      	beq.n	82f2 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8342:	f1be 0f00 	cmp.w	lr, #0
    8346:	dbb5      	blt.n	82b4 <_usb_d_dev_ep_init+0x64>
    8348:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    834c:	4e04      	ldr	r6, [pc, #16]	; (8360 <_usb_d_dev_ep_init+0x110>)
    834e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8352:	892d      	ldrh	r5, [r5, #8]
    8354:	4295      	cmp	r5, r2
    8356:	da98      	bge.n	828a <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    8358:	f06f 0012 	mvn.w	r0, #18
    835c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    835e:	bf00      	nop
    8360:	0000bf64 	.word	0x0000bf64
    8364:	20000dc0 	.word	0x20000dc0

00008368 <_usb_d_dev_ep_deinit>:
{
    8368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    836a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    836c:	f010 060f 	ands.w	r6, r0, #15
    8370:	d00e      	beq.n	8390 <_usb_d_dev_ep_deinit+0x28>
    8372:	2f00      	cmp	r7, #0
    8374:	bfb4      	ite	lt
    8376:	1d73      	addlt	r3, r6, #5
    8378:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    837a:	2e05      	cmp	r6, #5
    837c:	d900      	bls.n	8380 <_usb_d_dev_ep_deinit+0x18>
    837e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    8380:	461d      	mov	r5, r3
    8382:	3301      	adds	r3, #1
    8384:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8388:	4a24      	ldr	r2, [pc, #144]	; (841c <_usb_d_dev_ep_deinit+0xb4>)
    838a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    838e:	e002      	b.n	8396 <_usb_d_dev_ep_deinit+0x2e>
    8390:	f8df e094 	ldr.w	lr, [pc, #148]	; 8428 <_usb_d_dev_ep_deinit+0xc0>
    8394:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8396:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    839a:	4a21      	ldr	r2, [pc, #132]	; (8420 <_usb_d_dev_ep_deinit+0xb8>)
    839c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83a0:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    83a4:	2aff      	cmp	r2, #255	; 0xff
    83a6:	d0ea      	beq.n	837e <_usb_d_dev_ep_deinit+0x16>
    83a8:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    83aa:	2203      	movs	r2, #3
    83ac:	0ff9      	lsrs	r1, r7, #31
    83ae:	4670      	mov	r0, lr
    83b0:	4b1c      	ldr	r3, [pc, #112]	; (8424 <_usb_d_dev_ep_deinit+0xbc>)
    83b2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    83b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    83b8:	4a19      	ldr	r2, [pc, #100]	; (8420 <_usb_d_dev_ep_deinit+0xb8>)
    83ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83be:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    83c2:	f003 0307 	and.w	r3, r3, #7
    83c6:	2b01      	cmp	r3, #1
    83c8:	d016      	beq.n	83f8 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    83ca:	2f00      	cmp	r7, #0
    83cc:	db1b      	blt.n	8406 <_usb_d_dev_ep_deinit+0x9e>
    83ce:	0160      	lsls	r0, r4, #5
    83d0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    83d4:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    83d8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    83dc:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    83e0:	4b0f      	ldr	r3, [pc, #60]	; (8420 <_usb_d_dev_ep_deinit+0xb8>)
    83e2:	00aa      	lsls	r2, r5, #2
    83e4:	1951      	adds	r1, r2, r5
    83e6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    83ea:	2000      	movs	r0, #0
    83ec:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    83f0:	22ff      	movs	r2, #255	; 0xff
    83f2:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    83f6:	e7c2      	b.n	837e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    83f8:	0160      	lsls	r0, r4, #5
    83fa:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    83fe:	2300      	movs	r3, #0
    8400:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    8404:	e7ec      	b.n	83e0 <_usb_d_dev_ep_deinit+0x78>
    8406:	0176      	lsls	r6, r6, #5
    8408:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    840c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8410:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    8414:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    8418:	e7e2      	b.n	83e0 <_usb_d_dev_ep_deinit+0x78>
    841a:	bf00      	nop
    841c:	20000e80 	.word	0x20000e80
    8420:	20000dc0 	.word	0x20000dc0
    8424:	0000790d 	.word	0x0000790d
    8428:	20000e94 	.word	0x20000e94

0000842c <_usb_d_dev_ep_enable>:
{
    842c:	b4f0      	push	{r4, r5, r6, r7}
    842e:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8430:	f010 000f 	ands.w	r0, r0, #15
    8434:	f000 80a7 	beq.w	8586 <_usb_d_dev_ep_enable+0x15a>
    8438:	2e00      	cmp	r6, #0
    843a:	bfb4      	ite	lt
    843c:	1d43      	addlt	r3, r0, #5
    843e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8440:	4605      	mov	r5, r0
    8442:	0142      	lsls	r2, r0, #5
    8444:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8448:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    844c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    844e:	2805      	cmp	r0, #5
    8450:	f240 80a0 	bls.w	8594 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    8454:	f06f 0011 	mvn.w	r0, #17
    8458:	e07d      	b.n	8556 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    845a:	f014 0f77 	tst.w	r4, #119	; 0x77
    845e:	f040 8089 	bne.w	8574 <_usb_d_dev_ep_enable+0x148>
    8462:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8466:	2111      	movs	r1, #17
    8468:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    846c:	4c9b      	ldr	r4, [pc, #620]	; (86dc <_usb_d_dev_ep_enable+0x2b0>)
    846e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    8472:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    8476:	4c9a      	ldr	r4, [pc, #616]	; (86e0 <_usb_d_dev_ep_enable+0x2b4>)
    8478:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    847c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8480:	f200 80cd 	bhi.w	861e <_usb_d_dev_ep_enable+0x1f2>
    8484:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8488:	f200 8112 	bhi.w	86b0 <_usb_d_dev_ep_enable+0x284>
    848c:	2980      	cmp	r1, #128	; 0x80
    848e:	f200 8101 	bhi.w	8694 <_usb_d_dev_ep_enable+0x268>
    8492:	2940      	cmp	r1, #64	; 0x40
    8494:	f200 8113 	bhi.w	86be <_usb_d_dev_ep_enable+0x292>
    8498:	2920      	cmp	r1, #32
    849a:	f200 8102 	bhi.w	86a2 <_usb_d_dev_ep_enable+0x276>
    849e:	2910      	cmp	r1, #16
    84a0:	f200 8114 	bhi.w	86cc <_usb_d_dev_ep_enable+0x2a0>
    84a4:	2908      	cmp	r1, #8
    84a6:	bf94      	ite	ls
    84a8:	2600      	movls	r6, #0
    84aa:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    84ac:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    84b0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    84b2:	f3c1 010d 	ubfx	r1, r1, #0, #14
    84b6:	e0b8      	b.n	862a <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    84b8:	f014 0f70 	tst.w	r4, #112	; 0x70
    84bc:	d15d      	bne.n	857a <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    84be:	4e87      	ldr	r6, [pc, #540]	; (86dc <_usb_d_dev_ep_enable+0x2b0>)
    84c0:	009f      	lsls	r7, r3, #2
    84c2:	18f9      	adds	r1, r7, r3
    84c4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    84c8:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    84cc:	0109      	lsls	r1, r1, #4
    84ce:	f001 0170 	and.w	r1, r1, #112	; 0x70
    84d2:	430c      	orrs	r4, r1
    84d4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    84d8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    84dc:	443b      	add	r3, r7
    84de:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    84e2:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    84e6:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    84ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    84ee:	d80f      	bhi.n	8510 <_usb_d_dev_ep_enable+0xe4>
    84f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    84f4:	d819      	bhi.n	852a <_usb_d_dev_ep_enable+0xfe>
    84f6:	2b80      	cmp	r3, #128	; 0x80
    84f8:	d819      	bhi.n	852e <_usb_d_dev_ep_enable+0x102>
    84fa:	2b40      	cmp	r3, #64	; 0x40
    84fc:	d819      	bhi.n	8532 <_usb_d_dev_ep_enable+0x106>
    84fe:	2b20      	cmp	r3, #32
    8500:	d819      	bhi.n	8536 <_usb_d_dev_ep_enable+0x10a>
    8502:	2b10      	cmp	r3, #16
    8504:	d819      	bhi.n	853a <_usb_d_dev_ep_enable+0x10e>
    8506:	2b08      	cmp	r3, #8
    8508:	bf94      	ite	ls
    850a:	2300      	movls	r3, #0
    850c:	2301      	movhi	r3, #1
    850e:	e000      	b.n	8512 <_usb_d_dev_ep_enable+0xe6>
    8510:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8512:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    8516:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8518:	2380      	movs	r3, #128	; 0x80
    851a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    851e:	4b6f      	ldr	r3, [pc, #444]	; (86dc <_usb_d_dev_ep_enable+0x2b0>)
    8520:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8524:	2000      	movs	r0, #0
    8526:	76a8      	strb	r0, [r5, #26]
    8528:	e015      	b.n	8556 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    852a:	2306      	movs	r3, #6
    852c:	e7f1      	b.n	8512 <_usb_d_dev_ep_enable+0xe6>
    852e:	2305      	movs	r3, #5
    8530:	e7ef      	b.n	8512 <_usb_d_dev_ep_enable+0xe6>
    8532:	2304      	movs	r3, #4
    8534:	e7ed      	b.n	8512 <_usb_d_dev_ep_enable+0xe6>
    8536:	2303      	movs	r3, #3
    8538:	e7eb      	b.n	8512 <_usb_d_dev_ep_enable+0xe6>
    853a:	2302      	movs	r3, #2
    853c:	e7e9      	b.n	8512 <_usb_d_dev_ep_enable+0xe6>
    853e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8540:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8544:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8546:	2340      	movs	r3, #64	; 0x40
    8548:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    854c:	4b63      	ldr	r3, [pc, #396]	; (86dc <_usb_d_dev_ep_enable+0x2b0>)
    854e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8552:	2000      	movs	r0, #0
    8554:	72a8      	strb	r0, [r5, #10]
}
    8556:	bcf0      	pop	{r4, r5, r6, r7}
    8558:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    855a:	2106      	movs	r1, #6
    855c:	e7f0      	b.n	8540 <_usb_d_dev_ep_enable+0x114>
    855e:	2105      	movs	r1, #5
    8560:	e7ee      	b.n	8540 <_usb_d_dev_ep_enable+0x114>
    8562:	2104      	movs	r1, #4
    8564:	e7ec      	b.n	8540 <_usb_d_dev_ep_enable+0x114>
    8566:	2103      	movs	r1, #3
    8568:	e7ea      	b.n	8540 <_usb_d_dev_ep_enable+0x114>
    856a:	2102      	movs	r1, #2
    856c:	e7e8      	b.n	8540 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    856e:	f06f 0011 	mvn.w	r0, #17
    8572:	e7f0      	b.n	8556 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8574:	f06f 0013 	mvn.w	r0, #19
    8578:	e7ed      	b.n	8556 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    857a:	f06f 0013 	mvn.w	r0, #19
    857e:	e7ea      	b.n	8556 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8580:	f06f 0013 	mvn.w	r0, #19
    8584:	e7e7      	b.n	8556 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8586:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    858a:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    858e:	b2e4      	uxtb	r4, r4
    8590:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    8592:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8594:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8598:	4950      	ldr	r1, [pc, #320]	; (86dc <_usb_d_dev_ep_enable+0x2b0>)
    859a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    859e:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    85a2:	2aff      	cmp	r2, #255	; 0xff
    85a4:	d0e3      	beq.n	856e <_usb_d_dev_ep_enable+0x142>
    85a6:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    85a8:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    85aa:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    85ae:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    85b2:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    85b6:	f001 0107 	and.w	r1, r1, #7
    85ba:	2901      	cmp	r1, #1
    85bc:	f43f af4d 	beq.w	845a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    85c0:	2e00      	cmp	r6, #0
    85c2:	f6ff af79 	blt.w	84b8 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    85c6:	f014 0f07 	tst.w	r4, #7
    85ca:	d1d9      	bne.n	8580 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    85cc:	4e43      	ldr	r6, [pc, #268]	; (86dc <_usb_d_dev_ep_enable+0x2b0>)
    85ce:	009f      	lsls	r7, r3, #2
    85d0:	18f9      	adds	r1, r7, r3
    85d2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    85d6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    85da:	f001 0107 	and.w	r1, r1, #7
    85de:	430c      	orrs	r4, r1
    85e0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    85e4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    85e8:	443b      	add	r3, r7
    85ea:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    85ee:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    85f2:	4b3b      	ldr	r3, [pc, #236]	; (86e0 <_usb_d_dev_ep_enable+0x2b4>)
    85f4:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    85f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    85fc:	d89f      	bhi.n	853e <_usb_d_dev_ep_enable+0x112>
    85fe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8602:	d8aa      	bhi.n	855a <_usb_d_dev_ep_enable+0x12e>
    8604:	2980      	cmp	r1, #128	; 0x80
    8606:	d8aa      	bhi.n	855e <_usb_d_dev_ep_enable+0x132>
    8608:	2940      	cmp	r1, #64	; 0x40
    860a:	d8aa      	bhi.n	8562 <_usb_d_dev_ep_enable+0x136>
    860c:	2920      	cmp	r1, #32
    860e:	d8aa      	bhi.n	8566 <_usb_d_dev_ep_enable+0x13a>
    8610:	2910      	cmp	r1, #16
    8612:	d8aa      	bhi.n	856a <_usb_d_dev_ep_enable+0x13e>
    8614:	2908      	cmp	r1, #8
    8616:	bf94      	ite	ls
    8618:	2100      	movls	r1, #0
    861a:	2101      	movhi	r1, #1
    861c:	e790      	b.n	8540 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    861e:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8622:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8624:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8628:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    862a:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    862e:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8630:	2640      	movs	r6, #64	; 0x40
    8632:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8636:	2180      	movs	r1, #128	; 0x80
    8638:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    863c:	4f27      	ldr	r7, [pc, #156]	; (86dc <_usb_d_dev_ep_enable+0x2b0>)
    863e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    8642:	2000      	movs	r0, #0
    8644:	72a8      	strb	r0, [r5, #10]
    8646:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8648:	009c      	lsls	r4, r3, #2
    864a:	18e1      	adds	r1, r4, r3
    864c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    8650:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    8654:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8658:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    865c:	0152      	lsls	r2, r2, #5
    865e:	18b9      	adds	r1, r7, r2
    8660:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8662:	4423      	add	r3, r4
    8664:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8668:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    866c:	684b      	ldr	r3, [r1, #4]
    866e:	f364 339b 	bfi	r3, r4, #14, #14
    8672:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8674:	684b      	ldr	r3, [r1, #4]
    8676:	f360 030d 	bfi	r3, r0, #0, #14
    867a:	604b      	str	r3, [r1, #4]
    867c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    8680:	21b0      	movs	r1, #176	; 0xb0
    8682:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8686:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    868a:	461a      	mov	r2, r3
    868c:	2310      	movs	r3, #16
    868e:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    8692:	e760      	b.n	8556 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8694:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8698:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    869a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    869e:	2605      	movs	r6, #5
    86a0:	e7c3      	b.n	862a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86a2:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    86a6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86a8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    86ac:	2603      	movs	r6, #3
    86ae:	e7bc      	b.n	862a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86b0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    86b4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86b6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    86ba:	2606      	movs	r6, #6
    86bc:	e7b5      	b.n	862a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86be:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    86c2:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86c4:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    86c8:	2604      	movs	r6, #4
    86ca:	e7ae      	b.n	862a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86cc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    86d0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86d2:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    86d6:	2602      	movs	r6, #2
    86d8:	e7a7      	b.n	862a <_usb_d_dev_ep_enable+0x1fe>
    86da:	bf00      	nop
    86dc:	20000dc0 	.word	0x20000dc0
    86e0:	0fffc000 	.word	0x0fffc000

000086e4 <_usb_d_dev_ep_stall>:
{
    86e4:	b470      	push	{r4, r5, r6}
    86e6:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    86e8:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    86ea:	f010 000f 	ands.w	r0, r0, #15
    86ee:	d008      	beq.n	8702 <_usb_d_dev_ep_stall+0x1e>
    86f0:	2b00      	cmp	r3, #0
    86f2:	bfb4      	ite	lt
    86f4:	1d43      	addlt	r3, r0, #5
    86f6:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    86f8:	2805      	cmp	r0, #5
    86fa:	d903      	bls.n	8704 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    86fc:	f06f 0011 	mvn.w	r0, #17
    8700:	e018      	b.n	8734 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    8702:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    8704:	2901      	cmp	r1, #1
    8706:	d017      	beq.n	8738 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    8708:	2900      	cmp	r1, #0
    870a:	d03a      	beq.n	8782 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    870c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8710:	4a45      	ldr	r2, [pc, #276]	; (8828 <_usb_d_dev_ep_stall+0x144>)
    8712:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8716:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    871a:	f003 030f 	and.w	r3, r3, #15
    871e:	015b      	lsls	r3, r3, #5
    8720:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8724:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8728:	2310      	movs	r3, #16
    872a:	40a3      	lsls	r3, r4
    872c:	421a      	tst	r2, r3
    872e:	bf14      	ite	ne
    8730:	2001      	movne	r0, #1
    8732:	2000      	moveq	r0, #0
}
    8734:	bc70      	pop	{r4, r5, r6}
    8736:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8738:	2510      	movs	r5, #16
    873a:	40a5      	lsls	r5, r4
    873c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    873e:	493a      	ldr	r1, [pc, #232]	; (8828 <_usb_d_dev_ep_stall+0x144>)
    8740:	009e      	lsls	r6, r3, #2
    8742:	18f2      	adds	r2, r6, r3
    8744:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8748:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    874c:	f002 020f 	and.w	r2, r2, #15
    8750:	0150      	lsls	r0, r2, #5
    8752:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8756:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    875a:	2020      	movs	r0, #32
    875c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8760:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8762:	0152      	lsls	r2, r2, #5
    8764:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8768:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    876c:	4433      	add	r3, r6
    876e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8772:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8776:	f042 0208 	orr.w	r2, r2, #8
    877a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    877e:	2000      	movs	r0, #0
    8780:	e7d8      	b.n	8734 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    8782:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8786:	4928      	ldr	r1, [pc, #160]	; (8828 <_usb_d_dev_ep_stall+0x144>)
    8788:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    878c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    8790:	f002 020f 	and.w	r2, r2, #15
    8794:	0151      	lsls	r1, r2, #5
    8796:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    879a:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    879e:	2010      	movs	r0, #16
    87a0:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    87a2:	4205      	tst	r5, r0
    87a4:	d03c      	beq.n	8820 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    87a6:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    87a8:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    87ac:	2020      	movs	r0, #32
    87ae:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    87b0:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    87b2:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    87b6:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    87ba:	4202      	tst	r2, r0
    87bc:	d007      	beq.n	87ce <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    87be:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    87c2:	2201      	movs	r2, #1
    87c4:	fa02 f404 	lsl.w	r4, r2, r4
    87c8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    87ca:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    87ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    87d2:	4815      	ldr	r0, [pc, #84]	; (8828 <_usb_d_dev_ep_stall+0x144>)
    87d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    87d8:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    87dc:	f002 0207 	and.w	r2, r2, #7
    87e0:	2a01      	cmp	r2, #1
    87e2:	d00c      	beq.n	87fe <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    87e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    87e8:	4a0f      	ldr	r2, [pc, #60]	; (8828 <_usb_d_dev_ep_stall+0x144>)
    87ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    87ee:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    87f2:	f36f 02c3 	bfc	r2, #3, #1
    87f6:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    87fa:	2000      	movs	r0, #0
    87fc:	e79a      	b.n	8734 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    87fe:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    8802:	f012 0f30 	tst.w	r2, #48	; 0x30
    8806:	d10d      	bne.n	8824 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    8808:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    880c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    8810:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8814:	f36f 02c3 	bfc	r2, #3, #1
    8818:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    881c:	2000      	movs	r0, #0
    881e:	e789      	b.n	8734 <_usb_d_dev_ep_stall+0x50>
    8820:	2000      	movs	r0, #0
    8822:	e787      	b.n	8734 <_usb_d_dev_ep_stall+0x50>
    8824:	2000      	movs	r0, #0
    8826:	e785      	b.n	8734 <_usb_d_dev_ep_stall+0x50>
    8828:	20000dc0 	.word	0x20000dc0

0000882c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    882c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    882e:	f000 040f 	and.w	r4, r0, #15
    8832:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    8834:	4a14      	ldr	r2, [pc, #80]	; (8888 <_usb_d_dev_ep_read_req+0x5c>)
    8836:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    8838:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    883a:	6840      	ldr	r0, [r0, #4]
    883c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    8840:	2c05      	cmp	r4, #5
    8842:	d817      	bhi.n	8874 <_usb_d_dev_ep_read_req+0x48>
    8844:	b1c9      	cbz	r1, 887a <_usb_d_dev_ep_read_req+0x4e>
    8846:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    884a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    884e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    8850:	2a11      	cmp	r2, #17
    8852:	d115      	bne.n	8880 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8854:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    8858:	f012 0f10 	tst.w	r2, #16
    885c:	d102      	bne.n	8864 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    885e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    8860:	bc30      	pop	{r4, r5}
    8862:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    8864:	682c      	ldr	r4, [r5, #0]
    8866:	686a      	ldr	r2, [r5, #4]
    8868:	600c      	str	r4, [r1, #0]
    886a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    886c:	2210      	movs	r2, #16
    886e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    8872:	e7f5      	b.n	8860 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    8874:	f06f 0011 	mvn.w	r0, #17
    8878:	e7f2      	b.n	8860 <_usb_d_dev_ep_read_req+0x34>
    887a:	f06f 0011 	mvn.w	r0, #17
    887e:	e7ef      	b.n	8860 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    8880:	f06f 0012 	mvn.w	r0, #18
    8884:	e7ec      	b.n	8860 <_usb_d_dev_ep_read_req+0x34>
    8886:	bf00      	nop
    8888:	20000dc0 	.word	0x20000dc0

0000888c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    888c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8890:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    8892:	7a03      	ldrb	r3, [r0, #8]
    8894:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8896:	f013 030f 	ands.w	r3, r3, #15
    889a:	f000 80c2 	beq.w	8a22 <_usb_d_dev_ep_trans+0x196>
    889e:	2e00      	cmp	r6, #0
    88a0:	bfb4      	ite	lt
    88a2:	1d5a      	addlt	r2, r3, #5
    88a4:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    88a6:	4614      	mov	r4, r2
    88a8:	4969      	ldr	r1, [pc, #420]	; (8a50 <_usb_d_dev_ep_trans+0x1c4>)
    88aa:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    88ae:	1c55      	adds	r5, r2, #1
    88b0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    88b4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    88b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    88bc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    88c0:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    88c4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    88c8:	428a      	cmp	r2, r1
    88ca:	d025      	beq.n	8918 <_usb_d_dev_ep_trans+0x8c>
    88cc:	1e55      	subs	r5, r2, #1
    88ce:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    88d0:	6841      	ldr	r1, [r0, #4]
    88d2:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    88d4:	2b05      	cmp	r3, #5
    88d6:	f200 8092 	bhi.w	89fe <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    88da:	6803      	ldr	r3, [r0, #0]
    88dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    88e0:	d31c      	bcc.n	891c <_usb_d_dev_ep_trans+0x90>
    88e2:	eb03 0c01 	add.w	ip, r3, r1
    88e6:	f8df e180 	ldr.w	lr, [pc, #384]	; 8a68 <_usb_d_dev_ep_trans+0x1dc>
    88ea:	45f4      	cmp	ip, lr
    88ec:	d816      	bhi.n	891c <_usb_d_dev_ep_trans+0x90>
    88ee:	f013 0f03 	tst.w	r3, #3
    88f2:	d113      	bne.n	891c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    88f4:	2e00      	cmp	r6, #0
    88f6:	db2a      	blt.n	894e <_usb_d_dev_ep_trans+0xc2>
    88f8:	428a      	cmp	r2, r1
    88fa:	f200 809c 	bhi.w	8a36 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    88fe:	b34d      	cbz	r5, 8954 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    8900:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8904:	4a52      	ldr	r2, [pc, #328]	; (8a50 <_usb_d_dev_ep_trans+0x1c4>)
    8906:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    890a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    890e:	2b00      	cmp	r3, #0
    8910:	d07b      	beq.n	8a0a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    8912:	f04f 0800 	mov.w	r8, #0
    8916:	e00c      	b.n	8932 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8918:	4615      	mov	r5, r2
    891a:	e7d9      	b.n	88d0 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    891c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8920:	4a4b      	ldr	r2, [pc, #300]	; (8a50 <_usb_d_dev_ep_trans+0x1c4>)
    8922:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    892a:	2b00      	cmp	r3, #0
    892c:	d06a      	beq.n	8a04 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    892e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    8932:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8936:	4a46      	ldr	r2, [pc, #280]	; (8a50 <_usb_d_dev_ep_trans+0x1c4>)
    8938:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    893c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8940:	f013 0f08 	tst.w	r3, #8
    8944:	d009      	beq.n	895a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    8946:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    8948:	b003      	add	sp, #12
    894a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    894e:	f04f 0800 	mov.w	r8, #0
    8952:	e7ee      	b.n	8932 <_usb_d_dev_ep_trans+0xa6>
    8954:	f04f 0800 	mov.w	r8, #0
    8958:	e7eb      	b.n	8932 <_usb_d_dev_ep_trans+0xa6>
    895a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    895c:	a801      	add	r0, sp, #4
    895e:	4b3d      	ldr	r3, [pc, #244]	; (8a54 <_usb_d_dev_ep_trans+0x1c8>)
    8960:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    8962:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8966:	4a3a      	ldr	r2, [pc, #232]	; (8a50 <_usb_d_dev_ep_trans+0x1c4>)
    8968:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    896c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8970:	f013 0f40 	tst.w	r3, #64	; 0x40
    8974:	d13c      	bne.n	89f0 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    8976:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    897a:	4b35      	ldr	r3, [pc, #212]	; (8a50 <_usb_d_dev_ep_trans+0x1c4>)
    897c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    8980:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    8984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8988:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    898c:	a801      	add	r0, sp, #4
    898e:	4b32      	ldr	r3, [pc, #200]	; (8a58 <_usb_d_dev_ep_trans+0x1cc>)
    8990:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    8992:	f8da 3000 	ldr.w	r3, [sl]
    8996:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    899a:	f8da 3004 	ldr.w	r3, [sl, #4]
    899e:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    89a2:	2300      	movs	r3, #0
    89a4:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    89a8:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    89aa:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    89ae:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    89b2:	f368 1345 	bfi	r3, r8, #5, #1
    89b6:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    89ba:	f89a 3009 	ldrb.w	r3, [sl, #9]
    89be:	b1e3      	cbz	r3, 89fa <_usb_d_dev_ep_trans+0x16e>
    89c0:	fab5 f585 	clz	r5, r5
    89c4:	096d      	lsrs	r5, r5, #5
    89c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    89ca:	4b21      	ldr	r3, [pc, #132]	; (8a50 <_usb_d_dev_ep_trans+0x1c4>)
    89cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    89d0:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    89d4:	f365 1304 	bfi	r3, r5, #4, #1
    89d8:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    89dc:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    89de:	f04f 0100 	mov.w	r1, #0
    89e2:	4638      	mov	r0, r7
    89e4:	bfb4      	ite	lt
    89e6:	4b1d      	ldrlt	r3, [pc, #116]	; (8a5c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    89e8:	4b1d      	ldrge	r3, [pc, #116]	; (8a60 <_usb_d_dev_ep_trans+0x1d4>)
    89ea:	4798      	blx	r3
	return ERR_NONE;
    89ec:	2000      	movs	r0, #0
    89ee:	e7ab      	b.n	8948 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    89f0:	a801      	add	r0, sp, #4
    89f2:	4b19      	ldr	r3, [pc, #100]	; (8a58 <_usb_d_dev_ep_trans+0x1cc>)
    89f4:	4798      	blx	r3
		return USB_BUSY;
    89f6:	2001      	movs	r0, #1
    89f8:	e7a6      	b.n	8948 <_usb_d_dev_ep_trans+0xbc>
    89fa:	2500      	movs	r5, #0
    89fc:	e7e3      	b.n	89c6 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    89fe:	f06f 0011 	mvn.w	r0, #17
    8a02:	e7a1      	b.n	8948 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    8a04:	f06f 0012 	mvn.w	r0, #18
    8a08:	e79e      	b.n	8948 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    8a0a:	f06f 0011 	mvn.w	r0, #17
    8a0e:	e79b      	b.n	8948 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    8a10:	f06f 0012 	mvn.w	r0, #18
    8a14:	e798      	b.n	8948 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    8a16:	6841      	ldr	r1, [r0, #4]
    8a18:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    8a1c:	4f11      	ldr	r7, [pc, #68]	; (8a64 <_usb_d_dev_ep_trans+0x1d8>)
    8a1e:	2400      	movs	r4, #0
    8a20:	e75b      	b.n	88da <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8a22:	4a0b      	ldr	r2, [pc, #44]	; (8a50 <_usb_d_dev_ep_trans+0x1c4>)
    8a24:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    8a28:	f240 31ff 	movw	r1, #1023	; 0x3ff
    8a2c:	428a      	cmp	r2, r1
    8a2e:	d0f2      	beq.n	8a16 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    8a30:	4f0c      	ldr	r7, [pc, #48]	; (8a64 <_usb_d_dev_ep_trans+0x1d8>)
    8a32:	2400      	movs	r4, #0
    8a34:	e74a      	b.n	88cc <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    8a36:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8a3a:	4a05      	ldr	r2, [pc, #20]	; (8a50 <_usb_d_dev_ep_trans+0x1c4>)
    8a3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8a44:	2b00      	cmp	r3, #0
    8a46:	d0e3      	beq.n	8a10 <_usb_d_dev_ep_trans+0x184>
    8a48:	f04f 0801 	mov.w	r8, #1
    8a4c:	e771      	b.n	8932 <_usb_d_dev_ep_trans+0xa6>
    8a4e:	bf00      	nop
    8a50:	20000dc0 	.word	0x20000dc0
    8a54:	00004099 	.word	0x00004099
    8a58:	000040a7 	.word	0x000040a7
    8a5c:	00007abd 	.word	0x00007abd
    8a60:	00007c41 	.word	0x00007c41
    8a64:	20000e94 	.word	0x20000e94
    8a68:	20041fff 	.word	0x20041fff

00008a6c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    8a6c:	4b07      	ldr	r3, [pc, #28]	; (8a8c <_usb_d_dev_register_callback+0x20>)
    8a6e:	2900      	cmp	r1, #0
    8a70:	bf08      	it	eq
    8a72:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    8a74:	2801      	cmp	r0, #1
    8a76:	d004      	beq.n	8a82 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    8a78:	b910      	cbnz	r0, 8a80 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    8a7a:	4b05      	ldr	r3, [pc, #20]	; (8a90 <_usb_d_dev_register_callback+0x24>)
    8a7c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    8a80:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    8a82:	4b03      	ldr	r3, [pc, #12]	; (8a90 <_usb_d_dev_register_callback+0x24>)
    8a84:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    8a88:	4770      	bx	lr
    8a8a:	bf00      	nop
    8a8c:	0000782d 	.word	0x0000782d
    8a90:	20000dc0 	.word	0x20000dc0

00008a94 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    8a94:	4b0a      	ldr	r3, [pc, #40]	; (8ac0 <_usb_d_dev_register_ep_callback+0x2c>)
    8a96:	2900      	cmp	r1, #0
    8a98:	bf08      	it	eq
    8a9a:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    8a9c:	4603      	mov	r3, r0
    8a9e:	b138      	cbz	r0, 8ab0 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    8aa0:	2801      	cmp	r0, #1
    8aa2:	d009      	beq.n	8ab8 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    8aa4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    8aa6:	bf04      	itt	eq
    8aa8:	4b06      	ldreq	r3, [pc, #24]	; (8ac4 <_usb_d_dev_register_ep_callback+0x30>)
    8aaa:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    8aae:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    8ab0:	4b04      	ldr	r3, [pc, #16]	; (8ac4 <_usb_d_dev_register_ep_callback+0x30>)
    8ab2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    8ab6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    8ab8:	4b02      	ldr	r3, [pc, #8]	; (8ac4 <_usb_d_dev_register_ep_callback+0x30>)
    8aba:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    8abe:	4770      	bx	lr
    8ac0:	0000782d 	.word	0x0000782d
    8ac4:	20000dc0 	.word	0x20000dc0

00008ac8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    8ac8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8aca:	4b01      	ldr	r3, [pc, #4]	; (8ad0 <USB_0_Handler+0x8>)
    8acc:	4798      	blx	r3
    8ace:	bd08      	pop	{r3, pc}
    8ad0:	00007e31 	.word	0x00007e31

00008ad4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    8ad4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8ad6:	4b01      	ldr	r3, [pc, #4]	; (8adc <USB_1_Handler+0x8>)
    8ad8:	4798      	blx	r3
    8ada:	bd08      	pop	{r3, pc}
    8adc:	00007e31 	.word	0x00007e31

00008ae0 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    8ae0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8ae2:	4b01      	ldr	r3, [pc, #4]	; (8ae8 <USB_2_Handler+0x8>)
    8ae4:	4798      	blx	r3
    8ae6:	bd08      	pop	{r3, pc}
    8ae8:	00007e31 	.word	0x00007e31

00008aec <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    8aec:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8aee:	4b01      	ldr	r3, [pc, #4]	; (8af4 <USB_3_Handler+0x8>)
    8af0:	4798      	blx	r3
    8af2:	bd08      	pop	{r3, pc}
    8af4:	00007e31 	.word	0x00007e31

00008af8 <RTC_Scheduler_realtime_cb>:
}

static void RTC_Scheduler_realtime_cb(const struct timer_task *const timer_task)
{

	realtime++;
    8af8:	4a02      	ldr	r2, [pc, #8]	; (8b04 <RTC_Scheduler_realtime_cb+0xc>)
    8afa:	6813      	ldr	r3, [r2, #0]
    8afc:	3301      	adds	r3, #1
    8afe:	6013      	str	r3, [r2, #0]
    8b00:	4770      	bx	lr
    8b02:	bf00      	nop
    8b04:	20001180 	.word	0x20001180

00008b08 <RTC_Scheduler_ping_cb>:
	
}

static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag = 1;
    8b08:	2201      	movs	r2, #1
    8b0a:	4b01      	ldr	r3, [pc, #4]	; (8b10 <RTC_Scheduler_ping_cb+0x8>)
    8b0c:	711a      	strb	r2, [r3, #4]
    8b0e:	4770      	bx	lr
    8b10:	20001180 	.word	0x20001180

00008b14 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status == 1){
    8b14:	8ac3      	ldrh	r3, [r0, #22]
    8b16:	2b01      	cmp	r3, #1
    8b18:	d048      	beq.n	8bac <grid_port_receive_task+0x98>
void grid_port_receive_task(struct grid_port* por){
    8b1a:	b530      	push	{r4, r5, lr}
    8b1c:	b083      	sub	sp, #12
    8b1e:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 20000){
    8b20:	8a83      	ldrh	r3, [r0, #20]
    8b22:	f644 6220 	movw	r2, #20000	; 0x4e20
    8b26:	4293      	cmp	r3, r2
    8b28:	d91c      	bls.n	8b64 <grid_port_receive_task+0x50>
		if (por->partner_status == 1){
    8b2a:	f890 31e3 	ldrb.w	r3, [r0, #483]	; 0x1e3
    8b2e:	2b01      	cmp	r3, #1
    8b30:	d005      	beq.n	8b3e <grid_port_receive_task+0x2a>
			por->rx_double_buffer_seek_start_index = 0;
    8b32:	2300      	movs	r3, #0
    8b34:	8303      	strh	r3, [r0, #24]
			por->rx_double_buffer_read_start_index = 0;
    8b36:	8343      	strh	r3, [r0, #26]
			grid_sys_port_reset_dma(por);
    8b38:	4b1d      	ldr	r3, [pc, #116]	; (8bb0 <grid_port_receive_task+0x9c>)
    8b3a:	4798      	blx	r3
    8b3c:	e014      	b.n	8b68 <grid_port_receive_task+0x54>
			por->rx_double_buffer_seek_start_index = 0;
    8b3e:	2300      	movs	r3, #0
    8b40:	8303      	strh	r3, [r0, #24]
			por->rx_double_buffer_read_start_index = 0;
    8b42:	8343      	strh	r3, [r0, #26]
			por->partner_status = 0;
    8b44:	f880 31e3 	strb.w	r3, [r0, #483]	; 0x1e3
			por->rx_double_buffer_timeout =0;
    8b48:	8283      	strh	r3, [r0, #20]
			grid_sys_port_reset_dma(por);
    8b4a:	4b19      	ldr	r3, [pc, #100]	; (8bb0 <grid_port_receive_task+0x9c>)
    8b4c:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    8b4e:	23c8      	movs	r3, #200	; 0xc8
    8b50:	9301      	str	r3, [sp, #4]
    8b52:	2302      	movs	r3, #2
    8b54:	9300      	str	r3, [sp, #0]
    8b56:	23ff      	movs	r3, #255	; 0xff
    8b58:	461a      	mov	r2, r3
    8b5a:	4619      	mov	r1, r3
    8b5c:	4815      	ldr	r0, [pc, #84]	; (8bb4 <grid_port_receive_task+0xa0>)
    8b5e:	4d16      	ldr	r5, [pc, #88]	; (8bb8 <grid_port_receive_task+0xa4>)
    8b60:	47a8      	blx	r5
    8b62:	e001      	b.n	8b68 <grid_port_receive_task+0x54>
		por->rx_double_buffer_timeout++;
    8b64:	3301      	adds	r3, #1
    8b66:	8283      	strh	r3, [r0, #20]
void grid_port_receive_task(struct grid_port* por){
    8b68:	210a      	movs	r1, #10
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    8b6a:	4d14      	ldr	r5, [pc, #80]	; (8bbc <grid_port_receive_task+0xa8>)
    8b6c:	20c8      	movs	r0, #200	; 0xc8
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != '\n' && por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != 0)
    8b6e:	8b23      	ldrh	r3, [r4, #24]
    8b70:	18e2      	adds	r2, r4, r3
    8b72:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
    8b76:	2a0a      	cmp	r2, #10
    8b78:	d012      	beq.n	8ba0 <grid_port_receive_task+0x8c>
    8b7a:	b1aa      	cbz	r2, 8ba8 <grid_port_receive_task+0x94>
			por->rx_double_buffer_seek_start_index++;			
    8b7c:	3301      	adds	r3, #1
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    8b7e:	b29b      	uxth	r3, r3
    8b80:	fba5 e203 	umull	lr, r2, r5, r3
    8b84:	0992      	lsrs	r2, r2, #6
    8b86:	fb00 3312 	mls	r3, r0, r2, r3
    8b8a:	8323      	strh	r3, [r4, #24]
    8b8c:	3901      	subs	r1, #1
    8b8e:	b289      	uxth	r1, r1
	for(uint16_t i = 0; i<10; i++){
    8b90:	2900      	cmp	r1, #0
    8b92:	d1ec      	bne.n	8b6e <grid_port_receive_task+0x5a>
	if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == '\n'){
    8b94:	b29b      	uxth	r3, r3
    8b96:	4423      	add	r3, r4
    8b98:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
    8b9c:	2b0a      	cmp	r3, #10
    8b9e:	d103      	bne.n	8ba8 <grid_port_receive_task+0x94>
		por->rx_double_buffer_timeout = 0;
    8ba0:	2300      	movs	r3, #0
    8ba2:	82a3      	strh	r3, [r4, #20]
		por->rx_double_buffer_status = 1;
    8ba4:	2301      	movs	r3, #1
    8ba6:	82e3      	strh	r3, [r4, #22]
}
    8ba8:	b003      	add	sp, #12
    8baa:	bd30      	pop	{r4, r5, pc}
    8bac:	4770      	bx	lr
    8bae:	bf00      	nop
    8bb0:	00003495 	.word	0x00003495
    8bb4:	20001a30 	.word	0x20001a30
    8bb8:	00003711 	.word	0x00003711
    8bbc:	51eb851f 	.word	0x51eb851f

00008bc0 <RTC_Scheduler_rx_task_cb>:
{
    8bc0:	b510      	push	{r4, lr}
	grid_port_receive_task(&GRID_PORT_N);
    8bc2:	4805      	ldr	r0, [pc, #20]	; (8bd8 <RTC_Scheduler_rx_task_cb+0x18>)
    8bc4:	4c05      	ldr	r4, [pc, #20]	; (8bdc <RTC_Scheduler_rx_task_cb+0x1c>)
    8bc6:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_E);
    8bc8:	4805      	ldr	r0, [pc, #20]	; (8be0 <RTC_Scheduler_rx_task_cb+0x20>)
    8bca:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_S);
    8bcc:	4805      	ldr	r0, [pc, #20]	; (8be4 <RTC_Scheduler_rx_task_cb+0x24>)
    8bce:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_W);
    8bd0:	4805      	ldr	r0, [pc, #20]	; (8be8 <RTC_Scheduler_rx_task_cb+0x28>)
    8bd2:	47a0      	blx	r4
    8bd4:	bd10      	pop	{r4, pc}
    8bd6:	bf00      	nop
    8bd8:	2000164c 	.word	0x2000164c
    8bdc:	00008b15 	.word	0x00008b15
    8be0:	20002274 	.word	0x20002274
    8be4:	20001e28 	.word	0x20001e28
    8be8:	20001c40 	.word	0x20001c40

00008bec <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint8_t startcommand, uint8_t length){
    8bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bf0:	b08f      	sub	sp, #60	; 0x3c
    8bf2:	af02      	add	r7, sp, #8
    8bf4:	4605      	mov	r5, r0
    8bf6:	4616      	mov	r6, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    8bf8:	2301      	movs	r3, #1
    8bfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	response[1] = GRID_MSG_DIRECT;
    8bfe:	230e      	movs	r3, #14
    8c00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	response[2] = GRID_MSG_NACKNOWLEDGE;
    8c04:	2315      	movs	r3, #21
    8c06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    8c0a:	2304      	movs	r3, #4
    8c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	response[4] = '0'; //checksum
    8c10:	2330      	movs	r3, #48	; 0x30
    8c12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	response[5] = '0'; //checksum
    8c16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	response[6] = '\n';
    8c1a:	230a      	movs	r3, #10
    8c1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	response[7] = 0;
    8c20:	2300      	movs	r3, #0
    8c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	response[8] = 0;
    8c26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	response[9] = 0;
    8c2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t error_flag = 0;
    8c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t message[length];
    8c32:	1dd3      	adds	r3, r2, #7
    8c34:	f023 0307 	bic.w	r3, r3, #7
    8c38:	ebad 0d03 	sub.w	sp, sp, r3
    8c3c:	f10d 0808 	add.w	r8, sp, #8
	for (uint8_t i = 0; i<length; i++){
    8c40:	2a00      	cmp	r2, #0
    8c42:	f000 81e8 	beq.w	9016 <grid_port_receive_decode+0x42a>
    8c46:	4643      	mov	r3, r8
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    8c48:	8b42      	ldrh	r2, [r0, #26]
    8c4a:	f108 39ff 	add.w	r9, r8, #4294967295
    8c4e:	1e71      	subs	r1, r6, #1
    8c50:	fa58 f181 	uxtab	r1, r8, r1
    8c54:	464c      	mov	r4, r9
    8c56:	3201      	adds	r2, #1
    8c58:	1ad2      	subs	r2, r2, r3
    8c5a:	f8df e318 	ldr.w	lr, [pc, #792]	; 8f74 <grid_port_receive_decode+0x388>
    8c5e:	20c8      	movs	r0, #200	; 0xc8
    8c60:	eb02 0c04 	add.w	ip, r2, r4
    8c64:	fb8e 3a0c 	smull	r3, sl, lr, ip
    8c68:	ea4f 73ec 	mov.w	r3, ip, asr #31
    8c6c:	ebc3 13aa 	rsb	r3, r3, sl, asr #6
    8c70:	fb00 c313 	mls	r3, r0, r3, ip
    8c74:	442b      	add	r3, r5
    8c76:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
    8c7a:	f804 3f01 	strb.w	r3, [r4, #1]!
	for (uint8_t i = 0; i<length; i++){
    8c7e:	428c      	cmp	r4, r1
    8c80:	d1ee      	bne.n	8c60 <grid_port_receive_decode+0x74>
	if (length>5){
    8c82:	2e05      	cmp	r6, #5
    8c84:	d82f      	bhi.n	8ce6 <grid_port_receive_decode+0xfa>
	if (message[1] == GRID_MSG_BROADCAST){				
    8c86:	f898 3001 	ldrb.w	r3, [r8, #1]
    8c8a:	2b0f      	cmp	r3, #15
    8c8c:	f000 81c8 	beq.w	9020 <grid_port_receive_decode+0x434>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    8c90:	f8b5 c01a 	ldrh.w	ip, [r5, #26]
    8c94:	2200      	movs	r2, #0
    8c96:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 8f74 <grid_port_receive_decode+0x388>
    8c9a:	24c8      	movs	r4, #200	; 0xc8
    8c9c:	4610      	mov	r0, r2
    8c9e:	eb0c 0102 	add.w	r1, ip, r2
    8ca2:	fb8e 3801 	smull	r3, r8, lr, r1
    8ca6:	17cb      	asrs	r3, r1, #31
    8ca8:	ebc3 13a8 	rsb	r3, r3, r8, asr #6
    8cac:	fb04 1313 	mls	r3, r4, r3, r1
    8cb0:	442b      	add	r3, r5
    8cb2:	f883 00e4 	strb.w	r0, [r3, #228]	; 0xe4
    8cb6:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<length; i++){
    8cb8:	b2d3      	uxtb	r3, r2
    8cba:	429e      	cmp	r6, r3
    8cbc:	d8ef      	bhi.n	8c9e <grid_port_receive_decode+0xb2>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    8cbe:	8b6b      	ldrh	r3, [r5, #26]
    8cc0:	4433      	add	r3, r6
    8cc2:	4aac      	ldr	r2, [pc, #688]	; (8f74 <grid_port_receive_decode+0x388>)
    8cc4:	fb82 1203 	smull	r1, r2, r2, r3
    8cc8:	17de      	asrs	r6, r3, #31
    8cca:	ebc6 16a2 	rsb	r6, r6, r2, asr #6
    8cce:	22c8      	movs	r2, #200	; 0xc8
    8cd0:	fb02 3616 	mls	r6, r2, r6, r3
    8cd4:	b2b6      	uxth	r6, r6
    8cd6:	836e      	strh	r6, [r5, #26]
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    8cd8:	832e      	strh	r6, [r5, #24]
	por->rx_double_buffer_status = 0;
    8cda:	2300      	movs	r3, #0
    8cdc:	82eb      	strh	r3, [r5, #22]
}
    8cde:	3734      	adds	r7, #52	; 0x34
    8ce0:	46bd      	mov	sp, r7
    8ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    8ce6:	1ef0      	subs	r0, r6, #3
    8ce8:	f107 0223 	add.w	r2, r7, #35	; 0x23
    8cec:	2102      	movs	r1, #2
    8cee:	4440      	add	r0, r8
    8cf0:	4ba1      	ldr	r3, [pc, #644]	; (8f78 <grid_port_receive_decode+0x38c>)
    8cf2:	4798      	blx	r3
    8cf4:	4682      	mov	sl, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    8cf6:	4631      	mov	r1, r6
    8cf8:	4640      	mov	r0, r8
    8cfa:	4ba0      	ldr	r3, [pc, #640]	; (8f7c <grid_port_receive_decode+0x390>)
    8cfc:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    8cfe:	fa5f fa8a 	uxtb.w	sl, sl
    8d02:	b2c0      	uxtb	r0, r0
    8d04:	4582      	cmp	sl, r0
    8d06:	d00b      	beq.n	8d20 <grid_port_receive_decode+0x134>
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 255, 1, 2000); // RED BLINKY
    8d08:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    8d0c:	9301      	str	r3, [sp, #4]
    8d0e:	2301      	movs	r3, #1
    8d10:	9300      	str	r3, [sp, #0]
    8d12:	23ff      	movs	r3, #255	; 0xff
    8d14:	2200      	movs	r2, #0
    8d16:	4619      	mov	r1, r3
    8d18:	4899      	ldr	r0, [pc, #612]	; (8f80 <grid_port_receive_decode+0x394>)
    8d1a:	4c9a      	ldr	r4, [pc, #616]	; (8f84 <grid_port_receive_decode+0x398>)
    8d1c:	47a0      	blx	r4
    8d1e:	e7b2      	b.n	8c86 <grid_port_receive_decode+0x9a>
		if (checksum_calculated == checksum_received && error_flag == 0){
    8d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    8d24:	2b00      	cmp	r3, #0
    8d26:	d1ef      	bne.n	8d08 <grid_port_receive_decode+0x11c>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    8d28:	f898 3001 	ldrb.w	r3, [r8, #1]
    8d2c:	2b0f      	cmp	r3, #15
    8d2e:	d00d      	beq.n	8d4c <grid_port_receive_decode+0x160>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    8d30:	2b0e      	cmp	r3, #14
    8d32:	f000 80ab 	beq.w	8e8c <grid_port_receive_decode+0x2a0>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    8d36:	23c8      	movs	r3, #200	; 0xc8
    8d38:	9301      	str	r3, [sp, #4]
    8d3a:	2302      	movs	r3, #2
    8d3c:	9300      	str	r3, [sp, #0]
    8d3e:	2300      	movs	r3, #0
    8d40:	461a      	mov	r2, r3
    8d42:	21ff      	movs	r1, #255	; 0xff
    8d44:	488e      	ldr	r0, [pc, #568]	; (8f80 <grid_port_receive_decode+0x394>)
    8d46:	4c8f      	ldr	r4, [pc, #572]	; (8f84 <grid_port_receive_decode+0x398>)
    8d48:	47a0      	blx	r4
    8d4a:	e79c      	b.n	8c86 <grid_port_receive_decode+0x9a>
				uint8_t received_id  = grid_msg_get_id(message);;			
    8d4c:	4640      	mov	r0, r8
    8d4e:	4b8e      	ldr	r3, [pc, #568]	; (8f88 <grid_port_receive_decode+0x39c>)
    8d50:	4798      	blx	r3
    8d52:	60b8      	str	r0, [r7, #8]
				uint8_t received_age = grid_msg_get_age(message);
    8d54:	4640      	mov	r0, r8
    8d56:	4b8d      	ldr	r3, [pc, #564]	; (8f8c <grid_port_receive_decode+0x3a0>)
    8d58:	4798      	blx	r3
    8d5a:	b2c3      	uxtb	r3, r0
    8d5c:	607b      	str	r3, [r7, #4]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    8d5e:	4640      	mov	r0, r8
    8d60:	4b8b      	ldr	r3, [pc, #556]	; (8f90 <grid_port_receive_decode+0x3a4>)
    8d62:	4798      	blx	r3
    8d64:	fa5f fb80 	uxtb.w	fp, r0
    8d68:	f1ab 0a7f 	sub.w	sl, fp, #127	; 0x7f
    8d6c:	fa4f fa8a 	sxtb.w	sl, sl
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    8d70:	4640      	mov	r0, r8
    8d72:	4b88      	ldr	r3, [pc, #544]	; (8f94 <grid_port_receive_decode+0x3a8>)
    8d74:	4798      	blx	r3
    8d76:	b2c0      	uxtb	r0, r0
    8d78:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    8d7c:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    8d7e:	f895 21e0 	ldrb.w	r2, [r5, #480]	; 0x1e0
    8d82:	b182      	cbz	r2, 8da6 <grid_port_receive_decode+0x1ba>
				else if(por->partner_fi == 1){ // 90 deg
    8d84:	2a01      	cmp	r2, #1
    8d86:	d009      	beq.n	8d9c <grid_port_receive_decode+0x1b0>
				else if(por->partner_fi == 2){ // 180 deg
    8d88:	2a02      	cmp	r2, #2
    8d8a:	d066      	beq.n	8e5a <grid_port_receive_decode+0x26e>
				else if(por->partner_fi == 3){ // 270 deg
    8d8c:	2a03      	cmp	r2, #3
    8d8e:	d16c      	bne.n	8e6a <grid_port_receive_decode+0x27e>
					rotated_dy  -= received_dx;
    8d90:	f1cb 0b7f 	rsb	fp, fp, #127	; 0x7f
					rotated_dx  += received_dy;
    8d94:	469a      	mov	sl, r3
					rotated_dy  -= received_dx;
    8d96:	fa4f f38b 	sxtb.w	r3, fp
    8d9a:	e004      	b.n	8da6 <grid_port_receive_decode+0x1ba>
					rotated_dx  -= received_dy;
    8d9c:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    8da0:	4653      	mov	r3, sl
					rotated_dx  -= received_dy;
    8da2:	fa4f fa80 	sxtb.w	sl, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    8da6:	f895 b1e1 	ldrb.w	fp, [r5, #481]	; 0x1e1
    8daa:	f10b 0b7f 	add.w	fp, fp, #127	; 0x7f
    8dae:	44da      	add	sl, fp
    8db0:	fa5f fb8a 	uxtb.w	fp, sl
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    8db4:	f895 21e2 	ldrb.w	r2, [r5, #482]	; 0x1e2
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	4413      	add	r3, r2
    8dbc:	b2db      	uxtb	r3, r3
    8dbe:	60fb      	str	r3, [r7, #12]
    8dc0:	f897 a008 	ldrb.w	sl, [r7, #8]
				grid_msg_set_id(message, updated_id);
    8dc4:	4651      	mov	r1, sl
    8dc6:	4640      	mov	r0, r8
    8dc8:	4b73      	ldr	r3, [pc, #460]	; (8f98 <grid_port_receive_decode+0x3ac>)
    8dca:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    8dcc:	4659      	mov	r1, fp
    8dce:	4640      	mov	r0, r8
    8dd0:	4b72      	ldr	r3, [pc, #456]	; (8f9c <grid_port_receive_decode+0x3b0>)
    8dd2:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    8dd4:	68f9      	ldr	r1, [r7, #12]
    8dd6:	4640      	mov	r0, r8
    8dd8:	4b71      	ldr	r3, [pc, #452]	; (8fa0 <grid_port_receive_decode+0x3b4>)
    8dda:	4798      	blx	r3
				uint8_t updated_age = received_age + 1;
    8ddc:	687b      	ldr	r3, [r7, #4]
    8dde:	3301      	adds	r3, #1
				grid_msg_set_age(message, updated_age);		
    8de0:	b2da      	uxtb	r2, r3
    8de2:	60ba      	str	r2, [r7, #8]
    8de4:	4611      	mov	r1, r2
    8de6:	4640      	mov	r0, r8
    8de8:	4b6e      	ldr	r3, [pc, #440]	; (8fa4 <grid_port_receive_decode+0x3b8>)
    8dea:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    8dec:	eb0b 230a 	add.w	r3, fp, sl, lsl #8
    8df0:	68f9      	ldr	r1, [r7, #12]
    8df2:	eb01 2303 	add.w	r3, r1, r3, lsl #8
    8df6:	68ba      	ldr	r2, [r7, #8]
    8df8:	eb02 2303 	add.w	r3, r2, r3, lsl #8
    8dfc:	60fb      	str	r3, [r7, #12]
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    8dfe:	4619      	mov	r1, r3
    8e00:	485f      	ldr	r0, [pc, #380]	; (8f80 <grid_port_receive_decode+0x394>)
    8e02:	4b69      	ldr	r3, [pc, #420]	; (8fa8 <grid_port_receive_decode+0x3bc>)
    8e04:	4798      	blx	r3
    8e06:	2800      	cmp	r0, #0
    8e08:	d132      	bne.n	8e70 <grid_port_receive_decode+0x284>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    8e0a:	4631      	mov	r1, r6
    8e0c:	4640      	mov	r0, r8
    8e0e:	4b5b      	ldr	r3, [pc, #364]	; (8f7c <grid_port_receive_decode+0x390>)
    8e10:	4798      	blx	r3
    8e12:	4602      	mov	r2, r0
    8e14:	4631      	mov	r1, r6
    8e16:	4640      	mov	r0, r8
    8e18:	4b64      	ldr	r3, [pc, #400]	; (8fac <grid_port_receive_decode+0x3c0>)
    8e1a:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    8e1c:	f505 7ae2 	add.w	sl, r5, #452	; 0x1c4
    8e20:	4631      	mov	r1, r6
    8e22:	4650      	mov	r0, sl
    8e24:	4b62      	ldr	r3, [pc, #392]	; (8fb0 <grid_port_receive_decode+0x3c4>)
    8e26:	4798      	blx	r3
    8e28:	2800      	cmp	r0, #0
    8e2a:	f43f af2c 	beq.w	8c86 <grid_port_receive_decode+0x9a>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    8e2e:	f8df b190 	ldr.w	fp, [pc, #400]	; 8fc0 <grid_port_receive_decode+0x3d4>
    8e32:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    8e36:	4650      	mov	r0, sl
    8e38:	47d8      	blx	fp
						for (uint8_t i=0; i<length; i++){
    8e3a:	45a1      	cmp	r9, r4
    8e3c:	d1f9      	bne.n	8e32 <grid_port_receive_decode+0x246>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    8e3e:	4650      	mov	r0, sl
    8e40:	4b5c      	ldr	r3, [pc, #368]	; (8fb4 <grid_port_receive_decode+0x3c8>)
    8e42:	4798      	blx	r3
						grid_port_process_inbound(por);
    8e44:	4628      	mov	r0, r5
    8e46:	4b5c      	ldr	r3, [pc, #368]	; (8fb8 <grid_port_receive_decode+0x3cc>)
    8e48:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    8e4a:	68f9      	ldr	r1, [r7, #12]
    8e4c:	484c      	ldr	r0, [pc, #304]	; (8f80 <grid_port_receive_decode+0x394>)
    8e4e:	4b5b      	ldr	r3, [pc, #364]	; (8fbc <grid_port_receive_decode+0x3d0>)
    8e50:	4798      	blx	r3
						response[2] = GRID_MSG_ACKNOWLEDGE;
    8e52:	2306      	movs	r3, #6
    8e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    8e58:	e715      	b.n	8c86 <grid_port_receive_decode+0x9a>
					rotated_dx  -= received_dx;
    8e5a:	f1cb 0a7f 	rsb	sl, fp, #127	; 0x7f
    8e5e:	fa4f fa8a 	sxtb.w	sl, sl
					rotated_dy  -= received_dy;
    8e62:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    8e66:	b25b      	sxtb	r3, r3
    8e68:	e79d      	b.n	8da6 <grid_port_receive_decode+0x1ba>
				int8_t rotated_dy = 0;
    8e6a:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    8e6c:	469a      	mov	sl, r3
    8e6e:	e79a      	b.n	8da6 <grid_port_receive_decode+0x1ba>
					response[2] = GRID_MSG_ACKNOWLEDGE;							
    8e70:	2306      	movs	r3, #6
    8e72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					grid_sys_alert_set_alert(&grid_sys_state, 50, 50, 50, 2, 200); // WHITE
    8e76:	23c8      	movs	r3, #200	; 0xc8
    8e78:	9301      	str	r3, [sp, #4]
    8e7a:	2302      	movs	r3, #2
    8e7c:	9300      	str	r3, [sp, #0]
    8e7e:	2332      	movs	r3, #50	; 0x32
    8e80:	461a      	mov	r2, r3
    8e82:	4619      	mov	r1, r3
    8e84:	483e      	ldr	r0, [pc, #248]	; (8f80 <grid_port_receive_decode+0x394>)
    8e86:	4c3f      	ldr	r4, [pc, #252]	; (8f84 <grid_port_receive_decode+0x398>)
    8e88:	47a0      	blx	r4
    8e8a:	e6fc      	b.n	8c86 <grid_port_receive_decode+0x9a>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    8e8c:	f898 3002 	ldrb.w	r3, [r8, #2]
    8e90:	2b06      	cmp	r3, #6
    8e92:	d02a      	beq.n	8eea <grid_port_receive_decode+0x2fe>
				else if (message[2] == GRID_MSG_BELL){
    8e94:	2b07      	cmp	r3, #7
    8e96:	f47f aefb 	bne.w	8c90 <grid_port_receive_decode+0xa4>
					if (por->partner_status == 0){
    8e9a:	f895 31e3 	ldrb.w	r3, [r5, #483]	; 0x1e3
    8e9e:	bb7b      	cbnz	r3, 8f00 <grid_port_receive_decode+0x314>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    8ea0:	f898 3003 	ldrb.w	r3, [r8, #3]
    8ea4:	796a      	ldrb	r2, [r5, #5]
    8ea6:	1a9b      	subs	r3, r3, r2
    8ea8:	3306      	adds	r3, #6
    8eaa:	425a      	negs	r2, r3
    8eac:	f003 0303 	and.w	r3, r3, #3
    8eb0:	f002 0203 	and.w	r2, r2, #3
    8eb4:	bf58      	it	pl
    8eb6:	4253      	negpl	r3, r2
    8eb8:	f885 31e0 	strb.w	r3, [r5, #480]	; 0x1e0
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    8ebc:	f1a6 000c 	sub.w	r0, r6, #12
    8ec0:	2200      	movs	r2, #0
    8ec2:	2108      	movs	r1, #8
    8ec4:	4440      	add	r0, r8
    8ec6:	4b2c      	ldr	r3, [pc, #176]	; (8f78 <grid_port_receive_decode+0x38c>)
    8ec8:	4798      	blx	r3
    8eca:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
						por->partner_status = 1;
    8ece:	2301      	movs	r3, #1
    8ed0:	f885 31e3 	strb.w	r3, [r5, #483]	; 0x1e3
						grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    8ed4:	23c8      	movs	r3, #200	; 0xc8
    8ed6:	9301      	str	r3, [sp, #4]
    8ed8:	2302      	movs	r3, #2
    8eda:	9300      	str	r3, [sp, #0]
    8edc:	2300      	movs	r3, #0
    8ede:	22ff      	movs	r2, #255	; 0xff
    8ee0:	4619      	mov	r1, r3
    8ee2:	4827      	ldr	r0, [pc, #156]	; (8f80 <grid_port_receive_decode+0x394>)
    8ee4:	4c27      	ldr	r4, [pc, #156]	; (8f84 <grid_port_receive_decode+0x398>)
    8ee6:	47a0      	blx	r4
    8ee8:	e6cd      	b.n	8c86 <grid_port_receive_decode+0x9a>
					grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 255, 2, 200); // PURPLE
    8eea:	23c8      	movs	r3, #200	; 0xc8
    8eec:	9301      	str	r3, [sp, #4]
    8eee:	2302      	movs	r3, #2
    8ef0:	9300      	str	r3, [sp, #0]
    8ef2:	23ff      	movs	r3, #255	; 0xff
    8ef4:	2200      	movs	r2, #0
    8ef6:	4619      	mov	r1, r3
    8ef8:	4821      	ldr	r0, [pc, #132]	; (8f80 <grid_port_receive_decode+0x394>)
    8efa:	4c22      	ldr	r4, [pc, #136]	; (8f84 <grid_port_receive_decode+0x398>)
    8efc:	47a0      	blx	r4
    8efe:	e6c2      	b.n	8c86 <grid_port_receive_decode+0x9a>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    8f00:	f898 3003 	ldrb.w	r3, [r8, #3]
    8f04:	796a      	ldrb	r2, [r5, #5]
    8f06:	1a9b      	subs	r3, r3, r2
    8f08:	3306      	adds	r3, #6
    8f0a:	425a      	negs	r2, r3
    8f0c:	f003 0303 	and.w	r3, r3, #3
    8f10:	f002 0203 	and.w	r2, r2, #3
    8f14:	bf58      	it	pl
    8f16:	4253      	negpl	r3, r2
    8f18:	f895 41e0 	ldrb.w	r4, [r5, #480]	; 0x1e0
    8f1c:	42a3      	cmp	r3, r4
    8f1e:	bf14      	ite	ne
    8f20:	2400      	movne	r4, #0
    8f22:	2401      	moveq	r4, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    8f24:	f1a6 000c 	sub.w	r0, r6, #12
    8f28:	2200      	movs	r2, #0
    8f2a:	2108      	movs	r1, #8
    8f2c:	4440      	add	r0, r8
    8f2e:	4b12      	ldr	r3, [pc, #72]	; (8f78 <grid_port_receive_decode+0x38c>)
    8f30:	4798      	blx	r3
    8f32:	6178      	str	r0, [r7, #20]
						volatile uint32_t debug2 = por->partner_hwcfg;
    8f34:	f8d5 31dc 	ldr.w	r3, [r5, #476]	; 0x1dc
    8f38:	61bb      	str	r3, [r7, #24]
						validator &= (por->partner_hwcfg == debug);									
    8f3a:	697a      	ldr	r2, [r7, #20]
						if (validator == 0){
    8f3c:	4293      	cmp	r3, r2
    8f3e:	d100      	bne.n	8f42 <grid_port_receive_decode+0x356>
    8f40:	b96c      	cbnz	r4, 8f5e <grid_port_receive_decode+0x372>
							por->partner_status = 0;	
    8f42:	2300      	movs	r3, #0
    8f44:	f885 31e3 	strb.w	r3, [r5, #483]	; 0x1e3
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    8f48:	23c8      	movs	r3, #200	; 0xc8
    8f4a:	9301      	str	r3, [sp, #4]
    8f4c:	2302      	movs	r3, #2
    8f4e:	9300      	str	r3, [sp, #0]
    8f50:	23ff      	movs	r3, #255	; 0xff
    8f52:	461a      	mov	r2, r3
    8f54:	4619      	mov	r1, r3
    8f56:	480a      	ldr	r0, [pc, #40]	; (8f80 <grid_port_receive_decode+0x394>)
    8f58:	4c0a      	ldr	r4, [pc, #40]	; (8f84 <grid_port_receive_decode+0x398>)
    8f5a:	47a0      	blx	r4
    8f5c:	e693      	b.n	8c86 <grid_port_receive_decode+0x9a>
							grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 10, 2, 200); // BLUE
    8f5e:	23c8      	movs	r3, #200	; 0xc8
    8f60:	9301      	str	r3, [sp, #4]
    8f62:	2302      	movs	r3, #2
    8f64:	9300      	str	r3, [sp, #0]
    8f66:	230a      	movs	r3, #10
    8f68:	2200      	movs	r2, #0
    8f6a:	4611      	mov	r1, r2
    8f6c:	4804      	ldr	r0, [pc, #16]	; (8f80 <grid_port_receive_decode+0x394>)
    8f6e:	4c05      	ldr	r4, [pc, #20]	; (8f84 <grid_port_receive_decode+0x398>)
    8f70:	47a0      	blx	r4
    8f72:	e688      	b.n	8c86 <grid_port_receive_decode+0x9a>
    8f74:	51eb851f 	.word	0x51eb851f
    8f78:	00003765 	.word	0x00003765
    8f7c:	000038cd 	.word	0x000038cd
    8f80:	20001a30 	.word	0x20001a30
    8f84:	00003711 	.word	0x00003711
    8f88:	00003919 	.word	0x00003919
    8f8c:	00003979 	.word	0x00003979
    8f90:	00003939 	.word	0x00003939
    8f94:	00003959 	.word	0x00003959
    8f98:	00003999 	.word	0x00003999
    8f9c:	000039ad 	.word	0x000039ad
    8fa0:	000039c1 	.word	0x000039c1
    8fa4:	000039d5 	.word	0x000039d5
    8fa8:	000039e9 	.word	0x000039e9
    8fac:	000038e9 	.word	0x000038e9
    8fb0:	000016fd 	.word	0x000016fd
    8fb4:	00001749 	.word	0x00001749
    8fb8:	00001a09 	.word	0x00001a09
    8fbc:	00003a15 	.word	0x00003a15
    8fc0:	0000172d 	.word	0x0000172d
			sprintf(checksum, "%02x", grid_msg_get_checksum(response, response_length));
    8fc4:	4641      	mov	r1, r8
    8fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
    8fca:	4b1e      	ldr	r3, [pc, #120]	; (9044 <grid_port_receive_decode+0x458>)
    8fcc:	4798      	blx	r3
    8fce:	4602      	mov	r2, r0
    8fd0:	491d      	ldr	r1, [pc, #116]	; (9048 <grid_port_receive_decode+0x45c>)
    8fd2:	f107 001c 	add.w	r0, r7, #28
    8fd6:	4b1d      	ldr	r3, [pc, #116]	; (904c <grid_port_receive_decode+0x460>)
    8fd8:	4798      	blx	r3
			response[4] = checksum[0];
    8fda:	7f3b      	ldrb	r3, [r7, #28]
    8fdc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			response[5] = checksum[1];
    8fe0:	7f7b      	ldrb	r3, [r7, #29]
    8fe2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			for (uint8_t i=0; i<response_length; i++)
    8fe6:	f1b8 0f00 	cmp.w	r8, #0
    8fea:	d010      	beq.n	900e <grid_port_receive_decode+0x422>
    8fec:	f107 0424 	add.w	r4, r7, #36	; 0x24
    8ff0:	f108 38ff 	add.w	r8, r8, #4294967295
    8ff4:	fa5f f888 	uxtb.w	r8, r8
    8ff8:	f108 0801 	add.w	r8, r8, #1
    8ffc:	44a0      	add	r8, r4
				grid_buffer_write_character(&por->tx_buffer, response[i]);
    8ffe:	f8df a05c 	ldr.w	sl, [pc, #92]	; 905c <grid_port_receive_decode+0x470>
    9002:	f814 1b01 	ldrb.w	r1, [r4], #1
    9006:	4648      	mov	r0, r9
    9008:	47d0      	blx	sl
			for (uint8_t i=0; i<response_length; i++)
    900a:	45a0      	cmp	r8, r4
    900c:	d1f9      	bne.n	9002 <grid_port_receive_decode+0x416>
			grid_buffer_write_acknowledge(&por->tx_buffer);
    900e:	4648      	mov	r0, r9
    9010:	4b0f      	ldr	r3, [pc, #60]	; (9050 <grid_port_receive_decode+0x464>)
    9012:	4798      	blx	r3
    9014:	e012      	b.n	903c <grid_port_receive_decode+0x450>
	if (message[1] == GRID_MSG_BROADCAST){				
    9016:	f898 3001 	ldrb.w	r3, [r8, #1]
    901a:	2b0f      	cmp	r3, #15
    901c:	f47f ae4f 	bne.w	8cbe <grid_port_receive_decode+0xd2>
		uint8_t response_length = strlen(response);
    9020:	f107 0024 	add.w	r0, r7, #36	; 0x24
    9024:	4b0b      	ldr	r3, [pc, #44]	; (9054 <grid_port_receive_decode+0x468>)
    9026:	4798      	blx	r3
    9028:	fa5f f880 	uxtb.w	r8, r0
		if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    902c:	f505 79d6 	add.w	r9, r5, #428	; 0x1ac
    9030:	4641      	mov	r1, r8
    9032:	4648      	mov	r0, r9
    9034:	4b08      	ldr	r3, [pc, #32]	; (9058 <grid_port_receive_decode+0x46c>)
    9036:	4798      	blx	r3
    9038:	2800      	cmp	r0, #0
    903a:	d1c3      	bne.n	8fc4 <grid_port_receive_decode+0x3d8>
	for (uint8_t i = 0; i<length; i++){
    903c:	2e00      	cmp	r6, #0
    903e:	f43f ae3e 	beq.w	8cbe <grid_port_receive_decode+0xd2>
    9042:	e625      	b.n	8c90 <grid_port_receive_decode+0xa4>
    9044:	000038cd 	.word	0x000038cd
    9048:	0000b9f8 	.word	0x0000b9f8
    904c:	0000b159 	.word	0x0000b159
    9050:	00001749 	.word	0x00001749
    9054:	0000b1a1 	.word	0x0000b1a1
    9058:	000016fd 	.word	0x000016fd
    905c:	0000172d 	.word	0x0000172d

00009060 <grid_port_receive_complete_task>:
	if (por->rx_double_buffer_status != 1){
    9060:	8ac3      	ldrh	r3, [r0, #22]
    9062:	2b01      	cmp	r3, #1
    9064:	d000      	beq.n	9068 <grid_port_receive_complete_task+0x8>
    9066:	4770      	bx	lr
void grid_port_receive_complete_task(struct grid_port* por){
    9068:	b510      	push	{r4, lr}
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    906a:	8b41      	ldrh	r1, [r0, #26]
    906c:	8b03      	ldrh	r3, [r0, #24]
    906e:	4299      	cmp	r1, r3
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    9070:	bf34      	ite	cc
    9072:	1c5a      	addcc	r2, r3, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    9074:	f1a3 0237 	subcs.w	r2, r3, #55	; 0x37
    9078:	1a52      	subs	r2, r2, r1
    907a:	b2d2      	uxtb	r2, r2
    907c:	4604      	mov	r4, r0
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    907e:	b2c9      	uxtb	r1, r1
    9080:	4b02      	ldr	r3, [pc, #8]	; (908c <grid_port_receive_complete_task+0x2c>)
    9082:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    9084:	2300      	movs	r3, #0
    9086:	82e3      	strh	r3, [r4, #22]
    9088:	bd10      	pop	{r4, pc}
    908a:	bf00      	nop
    908c:	00008bed 	.word	0x00008bed

00009090 <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    9090:	b570      	push	{r4, r5, r6, lr}
	
		
	RTC_Scheduler_ping.interval = 16380/5; //1sec
    9092:	4c12      	ldr	r4, [pc, #72]	; (90dc <init_timer+0x4c>)
    9094:	f640 43cc 	movw	r3, #3276	; 0xccc
    9098:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    909a:	4b11      	ldr	r3, [pc, #68]	; (90e0 <init_timer+0x50>)
    909c:	6163      	str	r3, [r4, #20]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    909e:	2301      	movs	r3, #1
    90a0:	7623      	strb	r3, [r4, #24]
	
	RTC_Scheduler_rx_task.interval = RTC1SEC/10000; // 100us
    90a2:	6263      	str	r3, [r4, #36]	; 0x24
	RTC_Scheduler_rx_task.cb       = RTC_Scheduler_rx_task_cb;
    90a4:	4a0f      	ldr	r2, [pc, #60]	; (90e4 <init_timer+0x54>)
    90a6:	62a2      	str	r2, [r4, #40]	; 0x28
	RTC_Scheduler_rx_task.mode     = TIMER_TASK_REPEAT;
    90a8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	
	RTC_Scheduler_realtime.interval = 1; // 1us
    90ac:	63a3      	str	r3, [r4, #56]	; 0x38
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    90ae:	4a0e      	ldr	r2, [pc, #56]	; (90e8 <init_timer+0x58>)
    90b0:	63e2      	str	r2, [r4, #60]	; 0x3c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    90b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_rx_task);
    90b6:	4d0d      	ldr	r5, [pc, #52]	; (90ec <init_timer+0x5c>)
    90b8:	f104 011c 	add.w	r1, r4, #28
    90bc:	4628      	mov	r0, r5
    90be:	4e0c      	ldr	r6, [pc, #48]	; (90f0 <init_timer+0x60>)
    90c0:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    90c2:	f104 0108 	add.w	r1, r4, #8
    90c6:	4628      	mov	r0, r5
    90c8:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    90ca:	f104 0130 	add.w	r1, r4, #48	; 0x30
    90ce:	4628      	mov	r0, r5
    90d0:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    90d2:	4628      	mov	r0, r5
    90d4:	4b07      	ldr	r3, [pc, #28]	; (90f4 <init_timer+0x64>)
    90d6:	4798      	blx	r3
    90d8:	bd70      	pop	{r4, r5, r6, pc}
    90da:	bf00      	nop
    90dc:	20001180 	.word	0x20001180
    90e0:	00008b09 	.word	0x00008b09
    90e4:	00008bc1 	.word	0x00008bc1
    90e8:	00008af9 	.word	0x00008af9
    90ec:	20001308 	.word	0x20001308
    90f0:	000048e9 	.word	0x000048e9
    90f4:	000048a9 	.word	0x000048a9

000090f8 <main>:


volatile uint8_t reset_cause;

int main(void)
{
    90f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90fc:	b08b      	sub	sp, #44	; 0x2c
	
	reset_cause = *((uint8_t*)0);
    90fe:	2500      	movs	r5, #0
    9100:	782a      	ldrb	r2, [r5, #0]
    9102:	4b7c      	ldr	r3, [pc, #496]	; (92f4 <main+0x1fc>)
    9104:	701a      	strb	r2, [r3, #0]
	
	
	#include "usb/class/midi/device/audiodf_midi.h"

	
	atmel_start_init();	
    9106:	4b7c      	ldr	r3, [pc, #496]	; (92f8 <main+0x200>)
    9108:	4798      	blx	r3
	
	//TIMER_0_example2();

	audiodf_midi_init();
    910a:	4b7c      	ldr	r3, [pc, #496]	; (92fc <main+0x204>)
    910c:	4798      	blx	r3


	composite_device_start();
    910e:	4b7c      	ldr	r3, [pc, #496]	; (9300 <main+0x208>)
    9110:	4798      	blx	r3
	
	grid_module_init();
    9112:	4b7c      	ldr	r3, [pc, #496]	; (9304 <main+0x20c>)
    9114:	4798      	blx	r3
	



	
	init_timer();	
    9116:	4b7c      	ldr	r3, [pc, #496]	; (9308 <main+0x210>)
    9118:	4798      	blx	r3
	
	uint32_t loopstart = 0;
		
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    911a:	4e7c      	ldr	r6, [pc, #496]	; (930c <main+0x214>)
    911c:	f8df 9270 	ldr.w	r9, [pc, #624]	; 9390 <main+0x298>
	{
		grid_led_set_min(&grid_led_state, i, 0, 10,0,0);
    9120:	f8df 8204 	ldr.w	r8, [pc, #516]	; 9328 <main+0x230>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9124:	e018      	b.n	9158 <main+0x60>
		grid_led_set_min(&grid_led_state, i, 0, 10,0,0);
    9126:	2400      	movs	r4, #0
    9128:	9401      	str	r4, [sp, #4]
    912a:	9400      	str	r4, [sp, #0]
    912c:	230a      	movs	r3, #10
    912e:	4622      	mov	r2, r4
    9130:	4639      	mov	r1, r7
    9132:	4630      	mov	r0, r6
    9134:	47c0      	blx	r8
		grid_led_set_mid(&grid_led_state, i, 0, 100,0,0);
    9136:	9401      	str	r4, [sp, #4]
    9138:	9400      	str	r4, [sp, #0]
    913a:	2364      	movs	r3, #100	; 0x64
    913c:	4622      	mov	r2, r4
    913e:	4639      	mov	r1, r7
    9140:	4630      	mov	r0, r6
    9142:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 933c <main+0x244>
    9146:	47d0      	blx	sl
		grid_led_set_max(&grid_led_state, i, 0, 255,0,0);
    9148:	9401      	str	r4, [sp, #4]
    914a:	9400      	str	r4, [sp, #0]
    914c:	23ff      	movs	r3, #255	; 0xff
    914e:	4622      	mov	r2, r4
    9150:	4639      	mov	r1, r7
    9152:	4630      	mov	r0, r6
    9154:	4c6e      	ldr	r4, [pc, #440]	; (9310 <main+0x218>)
    9156:	47a0      	blx	r4
    9158:	b2ef      	uxtb	r7, r5
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    915a:	4630      	mov	r0, r6
    915c:	47c8      	blx	r9
    915e:	3501      	adds	r5, #1
    9160:	42b8      	cmp	r0, r7
    9162:	d8e0      	bhi.n	9126 <main+0x2e>
	}
		
		
	while (1) {
					
		loopstart = realtime;
    9164:	f8df b22c 	ldr.w	fp, [pc, #556]	; 9394 <main+0x29c>
    9168:	e070      	b.n	924c <main+0x154>
		
		/* ========================= PING ============================= */
						
		if (pingflag){
			
			grid_sys_ping(&GRID_PORT_N);
    916a:	486a      	ldr	r0, [pc, #424]	; (9314 <main+0x21c>)
    916c:	4c6a      	ldr	r4, [pc, #424]	; (9318 <main+0x220>)
    916e:	47a0      	blx	r4
			grid_sys_ping(&GRID_PORT_E);
    9170:	486a      	ldr	r0, [pc, #424]	; (931c <main+0x224>)
    9172:	47a0      	blx	r4
			grid_sys_ping(&GRID_PORT_S);
    9174:	486a      	ldr	r0, [pc, #424]	; (9320 <main+0x228>)
    9176:	47a0      	blx	r4
			grid_sys_ping(&GRID_PORT_W);
    9178:	486a      	ldr	r0, [pc, #424]	; (9324 <main+0x22c>)
    917a:	47a0      	blx	r4
			
			pingflag = 0;
    917c:	2300      	movs	r3, #0
    917e:	f88b 3004 	strb.w	r3, [fp, #4]
    9182:	e06a      	b.n	925a <main+0x162>
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
				
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
				
					grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    9184:	2300      	movs	r3, #0
    9186:	9301      	str	r3, [sp, #4]
    9188:	9300      	str	r3, [sp, #0]
    918a:	2201      	movs	r2, #1
    918c:	4621      	mov	r1, r4
    918e:	485f      	ldr	r0, [pc, #380]	; (930c <main+0x214>)
    9190:	4d65      	ldr	r5, [pc, #404]	; (9328 <main+0x230>)
    9192:	47a8      	blx	r5
					grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    9194:	4f65      	ldr	r7, [pc, #404]	; (932c <main+0x234>)
    9196:	f89d 000c 	ldrb.w	r0, [sp, #12]
    919a:	47b8      	blx	r7
    919c:	4e64      	ldr	r6, [pc, #400]	; (9330 <main+0x238>)
    919e:	2200      	movs	r2, #0
    91a0:	4b64      	ldr	r3, [pc, #400]	; (9334 <main+0x23c>)
    91a2:	47b0      	blx	r6
    91a4:	4d64      	ldr	r5, [pc, #400]	; (9338 <main+0x240>)
    91a6:	47a8      	blx	r5
    91a8:	fa5f f980 	uxtb.w	r9, r0
    91ac:	f89d 001c 	ldrb.w	r0, [sp, #28]
    91b0:	47b8      	blx	r7
    91b2:	2200      	movs	r2, #0
    91b4:	4b5f      	ldr	r3, [pc, #380]	; (9334 <main+0x23c>)
    91b6:	47b0      	blx	r6
    91b8:	47a8      	blx	r5
    91ba:	b2c0      	uxtb	r0, r0
    91bc:	9001      	str	r0, [sp, #4]
    91be:	f89d 0014 	ldrb.w	r0, [sp, #20]
    91c2:	47b8      	blx	r7
    91c4:	2200      	movs	r2, #0
    91c6:	4b5b      	ldr	r3, [pc, #364]	; (9334 <main+0x23c>)
    91c8:	47b0      	blx	r6
    91ca:	47a8      	blx	r5
    91cc:	b2c0      	uxtb	r0, r0
    91ce:	9000      	str	r0, [sp, #0]
    91d0:	464b      	mov	r3, r9
    91d2:	2201      	movs	r2, #1
    91d4:	4621      	mov	r1, r4
    91d6:	484d      	ldr	r0, [pc, #308]	; (930c <main+0x214>)
    91d8:	4d58      	ldr	r5, [pc, #352]	; (933c <main+0x244>)
    91da:	47a8      	blx	r5
					grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    91dc:	9b08      	ldr	r3, [sp, #32]
    91de:	9301      	str	r3, [sp, #4]
    91e0:	9b06      	ldr	r3, [sp, #24]
    91e2:	9300      	str	r3, [sp, #0]
    91e4:	9b04      	ldr	r3, [sp, #16]
    91e6:	2201      	movs	r2, #1
    91e8:	4621      	mov	r1, r4
    91ea:	4848      	ldr	r0, [pc, #288]	; (930c <main+0x214>)
    91ec:	4c48      	ldr	r4, [pc, #288]	; (9310 <main+0x218>)
    91ee:	47a0      	blx	r4
    91f0:	fa5f f488 	uxtb.w	r4, r8
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    91f4:	4845      	ldr	r0, [pc, #276]	; (930c <main+0x214>)
    91f6:	47d0      	blx	sl
    91f8:	f108 0801 	add.w	r8, r8, #1
    91fc:	4284      	cmp	r4, r0
    91fe:	d3c1      	bcc.n	9184 <main+0x8c>
					
				}
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    9200:	484f      	ldr	r0, [pc, #316]	; (9340 <main+0x248>)
    9202:	4b50      	ldr	r3, [pc, #320]	; (9344 <main+0x24c>)
    9204:	4798      	blx	r3
    9206:	b2c7      	uxtb	r7, r0
    9208:	2400      	movs	r4, #0
	
			for (uint8_t i=0; i<16; i++){	
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    920a:	2601      	movs	r6, #1
    920c:	4d4e      	ldr	r5, [pc, #312]	; (9348 <main+0x250>)
    920e:	463b      	mov	r3, r7
    9210:	4632      	mov	r2, r6
    9212:	b2e1      	uxtb	r1, r4
    9214:	483d      	ldr	r0, [pc, #244]	; (930c <main+0x214>)
    9216:	47a8      	blx	r5
    9218:	3401      	adds	r4, #1
			for (uint8_t i=0; i<16; i++){	
    921a:	2c10      	cmp	r4, #16
    921c:	d1f7      	bne.n	920e <main+0x116>
			
			
		}
		
				
		grid_led_tick(&grid_led_state);
    921e:	483b      	ldr	r0, [pc, #236]	; (930c <main+0x214>)
    9220:	4b4a      	ldr	r3, [pc, #296]	; (934c <main+0x254>)
    9222:	4798      	blx	r3
		grid_led_render_all(&grid_led_state);
    9224:	4839      	ldr	r0, [pc, #228]	; (930c <main+0x214>)
    9226:	4b4a      	ldr	r3, [pc, #296]	; (9350 <main+0x258>)
    9228:	4798      	blx	r3
				
				
		grid_led_hardware_start_transfer_blocking(&grid_led_state);
    922a:	4838      	ldr	r0, [pc, #224]	; (930c <main+0x214>)
    922c:	4b49      	ldr	r3, [pc, #292]	; (9354 <main+0x25c>)
    922e:	4798      	blx	r3
			
		
		
		
		// IDLETASK
		while(loopstart + RTC1SEC/1000 > realtime){
    9230:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9232:	3410      	adds	r4, #16
    9234:	f8db 3000 	ldr.w	r3, [fp]
    9238:	429c      	cmp	r4, r3
    923a:	d907      	bls.n	924c <main+0x154>
			delay_us(10);
    923c:	260a      	movs	r6, #10
    923e:	4d46      	ldr	r5, [pc, #280]	; (9358 <main+0x260>)
    9240:	4630      	mov	r0, r6
    9242:	47a8      	blx	r5
		while(loopstart + RTC1SEC/1000 > realtime){
    9244:	f8db 3000 	ldr.w	r3, [fp]
    9248:	42a3      	cmp	r3, r4
    924a:	d3f9      	bcc.n	9240 <main+0x148>
		loopstart = realtime;
    924c:	f8db 3000 	ldr.w	r3, [fp]
    9250:	9309      	str	r3, [sp, #36]	; 0x24
		if (pingflag){
    9252:	f89b 3004 	ldrb.w	r3, [fp, #4]
    9256:	2b00      	cmp	r3, #0
    9258:	d187      	bne.n	916a <main+0x72>
		grid_port_receive_complete_task(&GRID_PORT_N);
    925a:	482e      	ldr	r0, [pc, #184]	; (9314 <main+0x21c>)
    925c:	4c3f      	ldr	r4, [pc, #252]	; (935c <main+0x264>)
    925e:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_E);
    9260:	482e      	ldr	r0, [pc, #184]	; (931c <main+0x224>)
    9262:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_S);
    9264:	482e      	ldr	r0, [pc, #184]	; (9320 <main+0x228>)
    9266:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_W);
    9268:	482e      	ldr	r0, [pc, #184]	; (9324 <main+0x22c>)
    926a:	47a0      	blx	r4
		grid_port_process_ui(&GRID_PORT_U);		
    926c:	4d3c      	ldr	r5, [pc, #240]	; (9360 <main+0x268>)
    926e:	4628      	mov	r0, r5
    9270:	4b3c      	ldr	r3, [pc, #240]	; (9364 <main+0x26c>)
    9272:	4798      	blx	r3
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    9274:	4628      	mov	r0, r5
    9276:	4c3c      	ldr	r4, [pc, #240]	; (9368 <main+0x270>)
    9278:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_N);		
    927a:	4826      	ldr	r0, [pc, #152]	; (9314 <main+0x21c>)
    927c:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    927e:	4827      	ldr	r0, [pc, #156]	; (931c <main+0x224>)
    9280:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    9282:	4827      	ldr	r0, [pc, #156]	; (9320 <main+0x228>)
    9284:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);	
    9286:	4827      	ldr	r0, [pc, #156]	; (9324 <main+0x22c>)
    9288:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_N);
    928a:	4822      	ldr	r0, [pc, #136]	; (9314 <main+0x21c>)
    928c:	4c37      	ldr	r4, [pc, #220]	; (936c <main+0x274>)
    928e:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    9290:	4822      	ldr	r0, [pc, #136]	; (931c <main+0x224>)
    9292:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    9294:	4822      	ldr	r0, [pc, #136]	; (9320 <main+0x228>)
    9296:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    9298:	4822      	ldr	r0, [pc, #136]	; (9324 <main+0x22c>)
    929a:	47a0      	blx	r4
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    929c:	4834      	ldr	r0, [pc, #208]	; (9370 <main+0x278>)
    929e:	4b35      	ldr	r3, [pc, #212]	; (9374 <main+0x27c>)
    92a0:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    92a2:	4628      	mov	r0, r5
    92a4:	4b34      	ldr	r3, [pc, #208]	; (9378 <main+0x280>)
    92a6:	4798      	blx	r3
		if (grid_sys_state.alert_state){
    92a8:	4b25      	ldr	r3, [pc, #148]	; (9340 <main+0x248>)
    92aa:	889b      	ldrh	r3, [r3, #4]
    92ac:	2b00      	cmp	r3, #0
    92ae:	d0b6      	beq.n	921e <main+0x126>
			grid_sys_state.alert_state--;
    92b0:	4823      	ldr	r0, [pc, #140]	; (9340 <main+0x248>)
    92b2:	3b01      	subs	r3, #1
    92b4:	8083      	strh	r3, [r0, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    92b6:	4b31      	ldr	r3, [pc, #196]	; (937c <main+0x284>)
    92b8:	4798      	blx	r3
    92ba:	2800      	cmp	r0, #0
    92bc:	d0a0      	beq.n	9200 <main+0x108>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    92be:	4c20      	ldr	r4, [pc, #128]	; (9340 <main+0x248>)
    92c0:	4620      	mov	r0, r4
    92c2:	4b2f      	ldr	r3, [pc, #188]	; (9380 <main+0x288>)
    92c4:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    92c6:	4620      	mov	r0, r4
    92c8:	4b2e      	ldr	r3, [pc, #184]	; (9384 <main+0x28c>)
    92ca:	4798      	blx	r3
    92cc:	9003      	str	r0, [sp, #12]
    92ce:	b2c3      	uxtb	r3, r0
    92d0:	9304      	str	r3, [sp, #16]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    92d2:	4620      	mov	r0, r4
    92d4:	4b2c      	ldr	r3, [pc, #176]	; (9388 <main+0x290>)
    92d6:	4798      	blx	r3
    92d8:	9005      	str	r0, [sp, #20]
    92da:	b2c3      	uxtb	r3, r0
    92dc:	9306      	str	r3, [sp, #24]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    92de:	4620      	mov	r0, r4
    92e0:	4b2a      	ldr	r3, [pc, #168]	; (938c <main+0x294>)
    92e2:	4798      	blx	r3
    92e4:	9007      	str	r0, [sp, #28]
    92e6:	b2c3      	uxtb	r3, r0
    92e8:	9308      	str	r3, [sp, #32]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    92ea:	f04f 0800 	mov.w	r8, #0
    92ee:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 9390 <main+0x298>
    92f2:	e77d      	b.n	91f0 <main+0xf8>
    92f4:	20002c20 	.word	0x20002c20
    92f8:	000002d1 	.word	0x000002d1
    92fc:	00009dbd 	.word	0x00009dbd
    9300:	0000a765 	.word	0x0000a765
    9304:	00002691 	.word	0x00002691
    9308:	00009091 	.word	0x00009091
    930c:	20002458 	.word	0x20002458
    9310:	00002197 	.word	0x00002197
    9314:	2000164c 	.word	0x2000164c
    9318:	00003a2d 	.word	0x00003a2d
    931c:	20002274 	.word	0x20002274
    9320:	20001e28 	.word	0x20001e28
    9324:	20001c40 	.word	0x20001c40
    9328:	00002105 	.word	0x00002105
    932c:	0000aa31 	.word	0x0000aa31
    9330:	0000aafd 	.word	0x0000aafd
    9334:	3fe00000 	.word	0x3fe00000
    9338:	0000af21 	.word	0x0000af21
    933c:	0000214d 	.word	0x0000214d
    9340:	20001a30 	.word	0x20001a30
    9344:	000036c9 	.word	0x000036c9
    9348:	000021e1 	.word	0x000021e1
    934c:	000020c1 	.word	0x000020c1
    9350:	000024a5 	.word	0x000024a5
    9354:	000024c9 	.word	0x000024c9
    9358:	000040f9 	.word	0x000040f9
    935c:	00009061 	.word	0x00009061
    9360:	20001840 	.word	0x20001840
    9364:	00003b99 	.word	0x00003b99
    9368:	00001a09 	.word	0x00001a09
    936c:	00001fd9 	.word	0x00001fd9
    9370:	20002010 	.word	0x20002010
    9374:	00001b91 	.word	0x00001b91
    9378:	00001f75 	.word	0x00001f75
    937c:	000036bd 	.word	0x000036bd
    9380:	000036c1 	.word	0x000036c1
    9384:	0000372f 	.word	0x0000372f
    9388:	00003733 	.word	0x00003733
    938c:	00003737 	.word	0x00003737
    9390:	000020bd 	.word	0x000020bd
    9394:	20001180 	.word	0x20001180

00009398 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9398:	b5f0      	push	{r4, r5, r6, r7, lr}
    939a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    939c:	780b      	ldrb	r3, [r1, #0]
    939e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    93a2:	2c01      	cmp	r4, #1
    93a4:	d15e      	bne.n	9464 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    93a6:	888c      	ldrh	r4, [r1, #4]
    93a8:	4d35      	ldr	r5, [pc, #212]	; (9480 <cdcdf_acm_req+0xe8>)
    93aa:	782d      	ldrb	r5, [r5, #0]
    93ac:	42a5      	cmp	r5, r4
    93ae:	d003      	beq.n	93b8 <cdcdf_acm_req+0x20>
    93b0:	4d33      	ldr	r5, [pc, #204]	; (9480 <cdcdf_acm_req+0xe8>)
    93b2:	786d      	ldrb	r5, [r5, #1]
    93b4:	42a5      	cmp	r5, r4
    93b6:	d158      	bne.n	946a <cdcdf_acm_req+0xd2>
    93b8:	4616      	mov	r6, r2
    93ba:	460c      	mov	r4, r1
    93bc:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    93be:	f013 0f80 	tst.w	r3, #128	; 0x80
    93c2:	d10c      	bne.n	93de <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    93c4:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    93c6:	4b2f      	ldr	r3, [pc, #188]	; (9484 <cdcdf_acm_req+0xec>)
    93c8:	4798      	blx	r3
    93ca:	4601      	mov	r1, r0
	switch (req->bRequest) {
    93cc:	7863      	ldrb	r3, [r4, #1]
    93ce:	2b20      	cmp	r3, #32
    93d0:	d013      	beq.n	93fa <cdcdf_acm_req+0x62>
    93d2:	2b22      	cmp	r3, #34	; 0x22
    93d4:	d032      	beq.n	943c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    93d6:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    93da:	b003      	add	sp, #12
    93dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    93de:	2a01      	cmp	r2, #1
    93e0:	d046      	beq.n	9470 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    93e2:	784b      	ldrb	r3, [r1, #1]
    93e4:	2b21      	cmp	r3, #33	; 0x21
    93e6:	d145      	bne.n	9474 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    93e8:	88cb      	ldrh	r3, [r1, #6]
    93ea:	2b07      	cmp	r3, #7
    93ec:	d145      	bne.n	947a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    93ee:	2300      	movs	r3, #0
    93f0:	2207      	movs	r2, #7
    93f2:	4925      	ldr	r1, [pc, #148]	; (9488 <cdcdf_acm_req+0xf0>)
    93f4:	4c25      	ldr	r4, [pc, #148]	; (948c <cdcdf_acm_req+0xf4>)
    93f6:	47a0      	blx	r4
    93f8:	e7ef      	b.n	93da <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    93fa:	2f07      	cmp	r7, #7
    93fc:	d12b      	bne.n	9456 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    93fe:	b1be      	cbz	r6, 9430 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    9400:	6800      	ldr	r0, [r0, #0]
    9402:	9000      	str	r0, [sp, #0]
    9404:	888a      	ldrh	r2, [r1, #4]
    9406:	798b      	ldrb	r3, [r1, #6]
    9408:	f8ad 2004 	strh.w	r2, [sp, #4]
    940c:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    9410:	4b1b      	ldr	r3, [pc, #108]	; (9480 <cdcdf_acm_req+0xe8>)
    9412:	691b      	ldr	r3, [r3, #16]
    9414:	b113      	cbz	r3, 941c <cdcdf_acm_req+0x84>
    9416:	4668      	mov	r0, sp
    9418:	4798      	blx	r3
    941a:	b1f8      	cbz	r0, 945c <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    941c:	4b18      	ldr	r3, [pc, #96]	; (9480 <cdcdf_acm_req+0xe8>)
    941e:	aa02      	add	r2, sp, #8
    9420:	e912 0003 	ldmdb	r2, {r0, r1}
    9424:	6098      	str	r0, [r3, #8]
    9426:	8199      	strh	r1, [r3, #12]
    9428:	0c09      	lsrs	r1, r1, #16
    942a:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    942c:	2000      	movs	r0, #0
    942e:	e7d4      	b.n	93da <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    9430:	2300      	movs	r3, #0
    9432:	2207      	movs	r2, #7
    9434:	4628      	mov	r0, r5
    9436:	4c15      	ldr	r4, [pc, #84]	; (948c <cdcdf_acm_req+0xf4>)
    9438:	47a0      	blx	r4
    943a:	e7ce      	b.n	93da <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    943c:	2300      	movs	r3, #0
    943e:	461a      	mov	r2, r3
    9440:	4619      	mov	r1, r3
    9442:	4618      	mov	r0, r3
    9444:	4d11      	ldr	r5, [pc, #68]	; (948c <cdcdf_acm_req+0xf4>)
    9446:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    9448:	4b0d      	ldr	r3, [pc, #52]	; (9480 <cdcdf_acm_req+0xe8>)
    944a:	695b      	ldr	r3, [r3, #20]
    944c:	b143      	cbz	r3, 9460 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    944e:	8860      	ldrh	r0, [r4, #2]
    9450:	4798      	blx	r3
		return ERR_NONE;
    9452:	2000      	movs	r0, #0
    9454:	e7c1      	b.n	93da <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9456:	f04f 30ff 	mov.w	r0, #4294967295
    945a:	e7be      	b.n	93da <cdcdf_acm_req+0x42>
			return ERR_NONE;
    945c:	2000      	movs	r0, #0
    945e:	e7bc      	b.n	93da <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9460:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    9462:	e7ba      	b.n	93da <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9464:	f06f 0009 	mvn.w	r0, #9
    9468:	e7b7      	b.n	93da <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    946a:	f06f 0009 	mvn.w	r0, #9
    946e:	e7b4      	b.n	93da <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9470:	2000      	movs	r0, #0
    9472:	e7b2      	b.n	93da <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    9474:	f06f 000c 	mvn.w	r0, #12
    9478:	e7af      	b.n	93da <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    947a:	f04f 30ff 	mov.w	r0, #4294967295
    947e:	e7ac      	b.n	93da <cdcdf_acm_req+0x42>
    9480:	200011c8 	.word	0x200011c8
    9484:	0000a4e1 	.word	0x0000a4e1
    9488:	200011d0 	.word	0x200011d0
    948c:	00009fbd 	.word	0x00009fbd

00009490 <cdcdf_acm_ctrl>:
{
    9490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9494:	b083      	sub	sp, #12
    9496:	4616      	mov	r6, r2
	switch (ctrl) {
    9498:	2901      	cmp	r1, #1
    949a:	d066      	beq.n	956a <cdcdf_acm_ctrl+0xda>
    949c:	b141      	cbz	r1, 94b0 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    949e:	2902      	cmp	r1, #2
    94a0:	bf0c      	ite	eq
    94a2:	f06f 001a 	mvneq.w	r0, #26
    94a6:	f06f 000c 	mvnne.w	r0, #12
}
    94aa:	b003      	add	sp, #12
    94ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    94b0:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    94b4:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    94b6:	2800      	cmp	r0, #0
    94b8:	f000 8085 	beq.w	95c6 <cdcdf_acm_ctrl+0x136>
    94bc:	f10a 3bff 	add.w	fp, sl, #4294967295
    94c0:	f10a 0301 	add.w	r3, sl, #1
    94c4:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    94c6:	4f46      	ldr	r7, [pc, #280]	; (95e0 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    94c8:	f8df 9124 	ldr.w	r9, [pc, #292]	; 95f0 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    94cc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 95f4 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    94d0:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    94d2:	7943      	ldrb	r3, [r0, #5]
    94d4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    94d8:	2b02      	cmp	r3, #2
    94da:	d002      	beq.n	94e2 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    94dc:	f06f 0009 	mvn.w	r0, #9
    94e0:	e7e3      	b.n	94aa <cdcdf_acm_ctrl+0x1a>
    94e2:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    94e6:	f89b 3000 	ldrb.w	r3, [fp]
    94ea:	429a      	cmp	r2, r3
    94ec:	d06e      	beq.n	95cc <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    94ee:	2bff      	cmp	r3, #255	; 0xff
    94f0:	d16f      	bne.n	95d2 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    94f2:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    94f6:	2205      	movs	r2, #5
    94f8:	6871      	ldr	r1, [r6, #4]
    94fa:	4b3a      	ldr	r3, [pc, #232]	; (95e4 <cdcdf_acm_ctrl+0x154>)
    94fc:	4798      	blx	r3
		while (NULL != ep) {
    94fe:	4604      	mov	r4, r0
    9500:	b1f8      	cbz	r0, 9542 <cdcdf_acm_ctrl+0xb2>
    9502:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    9506:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    9508:	7963      	ldrb	r3, [r4, #5]
    950a:	7922      	ldrb	r2, [r4, #4]
    950c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9510:	b292      	uxth	r2, r2
    9512:	78e1      	ldrb	r1, [r4, #3]
    9514:	4628      	mov	r0, r5
    9516:	47b8      	blx	r7
    9518:	2800      	cmp	r0, #0
    951a:	d15d      	bne.n	95d8 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    951c:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    9520:	bf14      	ite	ne
    9522:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9526:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    952a:	4628      	mov	r0, r5
    952c:	47c8      	blx	r9
			desc->sod = ep;
    952e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    9530:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9532:	6871      	ldr	r1, [r6, #4]
    9534:	4420      	add	r0, r4
    9536:	47c0      	blx	r8
		while (NULL != ep) {
    9538:	4604      	mov	r4, r0
    953a:	2800      	cmp	r0, #0
    953c:	d1e3      	bne.n	9506 <cdcdf_acm_ctrl+0x76>
    953e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    9542:	6833      	ldr	r3, [r6, #0]
    9544:	7818      	ldrb	r0, [r3, #0]
    9546:	2204      	movs	r2, #4
    9548:	6871      	ldr	r1, [r6, #4]
    954a:	4418      	add	r0, r3
    954c:	4b25      	ldr	r3, [pc, #148]	; (95e4 <cdcdf_acm_ctrl+0x154>)
    954e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    9550:	9b00      	ldr	r3, [sp, #0]
    9552:	459b      	cmp	fp, r3
    9554:	d004      	beq.n	9560 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    9556:	2800      	cmp	r0, #0
    9558:	d1ba      	bne.n	94d0 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    955a:	f06f 0009 	mvn.w	r0, #9
    955e:	e7a4      	b.n	94aa <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    9560:	2201      	movs	r2, #1
    9562:	4b21      	ldr	r3, [pc, #132]	; (95e8 <cdcdf_acm_ctrl+0x158>)
    9564:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    9566:	2000      	movs	r0, #0
    9568:	e79f      	b.n	94aa <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    956a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    956c:	b142      	cbz	r2, 9580 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    956e:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    9570:	795b      	ldrb	r3, [r3, #5]
    9572:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9576:	2b02      	cmp	r3, #2
    9578:	d002      	beq.n	9580 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    957a:	f06f 0009 	mvn.w	r0, #9
    957e:	e794      	b.n	94aa <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    9580:	7823      	ldrb	r3, [r4, #0]
    9582:	2bff      	cmp	r3, #255	; 0xff
    9584:	d008      	beq.n	9598 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    9586:	23ff      	movs	r3, #255	; 0xff
    9588:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    958a:	78a0      	ldrb	r0, [r4, #2]
    958c:	4298      	cmp	r0, r3
    958e:	d003      	beq.n	9598 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9590:	4b16      	ldr	r3, [pc, #88]	; (95ec <cdcdf_acm_ctrl+0x15c>)
    9592:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9594:	23ff      	movs	r3, #255	; 0xff
    9596:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    9598:	7863      	ldrb	r3, [r4, #1]
    959a:	2bff      	cmp	r3, #255	; 0xff
    959c:	d008      	beq.n	95b0 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    959e:	23ff      	movs	r3, #255	; 0xff
    95a0:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    95a2:	78e0      	ldrb	r0, [r4, #3]
    95a4:	4298      	cmp	r0, r3
    95a6:	d003      	beq.n	95b0 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    95a8:	4b10      	ldr	r3, [pc, #64]	; (95ec <cdcdf_acm_ctrl+0x15c>)
    95aa:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    95ac:	23ff      	movs	r3, #255	; 0xff
    95ae:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    95b0:	7920      	ldrb	r0, [r4, #4]
    95b2:	28ff      	cmp	r0, #255	; 0xff
    95b4:	d003      	beq.n	95be <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    95b6:	4b0d      	ldr	r3, [pc, #52]	; (95ec <cdcdf_acm_ctrl+0x15c>)
    95b8:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    95ba:	23ff      	movs	r3, #255	; 0xff
    95bc:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    95be:	2000      	movs	r0, #0
    95c0:	4b09      	ldr	r3, [pc, #36]	; (95e8 <cdcdf_acm_ctrl+0x158>)
    95c2:	7158      	strb	r0, [r3, #5]
    95c4:	e771      	b.n	94aa <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    95c6:	f06f 0009 	mvn.w	r0, #9
    95ca:	e76e      	b.n	94aa <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    95cc:	f06f 0011 	mvn.w	r0, #17
    95d0:	e76b      	b.n	94aa <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    95d2:	f06f 001b 	mvn.w	r0, #27
    95d6:	e768      	b.n	94aa <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    95d8:	f06f 0013 	mvn.w	r0, #19
    95dc:	e765      	b.n	94aa <cdcdf_acm_ctrl+0x1a>
    95de:	bf00      	nop
    95e0:	00004f8d 	.word	0x00004f8d
    95e4:	0000a501 	.word	0x0000a501
    95e8:	200011c8 	.word	0x200011c8
    95ec:	00004ff5 	.word	0x00004ff5
    95f0:	00005021 	.word	0x00005021
    95f4:	0000a53b 	.word	0x0000a53b

000095f8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    95f8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    95fa:	4b0a      	ldr	r3, [pc, #40]	; (9624 <cdcdf_acm_init+0x2c>)
    95fc:	4798      	blx	r3
    95fe:	2801      	cmp	r0, #1
    9600:	d80c      	bhi.n	961c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    9602:	4809      	ldr	r0, [pc, #36]	; (9628 <cdcdf_acm_init+0x30>)
    9604:	4b09      	ldr	r3, [pc, #36]	; (962c <cdcdf_acm_init+0x34>)
    9606:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    9608:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    960a:	3018      	adds	r0, #24
    960c:	4b08      	ldr	r3, [pc, #32]	; (9630 <cdcdf_acm_init+0x38>)
    960e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    9610:	4908      	ldr	r1, [pc, #32]	; (9634 <cdcdf_acm_init+0x3c>)
    9612:	2001      	movs	r0, #1
    9614:	4b08      	ldr	r3, [pc, #32]	; (9638 <cdcdf_acm_init+0x40>)
    9616:	4798      	blx	r3
	return ERR_NONE;
    9618:	2000      	movs	r0, #0
    961a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    961c:	f06f 0010 	mvn.w	r0, #16
}
    9620:	bd08      	pop	{r3, pc}
    9622:	bf00      	nop
    9624:	0000a4ed 	.word	0x0000a4ed
    9628:	200011c8 	.word	0x200011c8
    962c:	00009491 	.word	0x00009491
    9630:	0000a48d 	.word	0x0000a48d
    9634:	20000354 	.word	0x20000354
    9638:	0000a3f9 	.word	0x0000a3f9

0000963c <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    963c:	4b07      	ldr	r3, [pc, #28]	; (965c <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    963e:	795b      	ldrb	r3, [r3, #5]
    9640:	b143      	cbz	r3, 9654 <cdcdf_acm_write+0x18>
{
    9642:	b510      	push	{r4, lr}
    9644:	460a      	mov	r2, r1
    9646:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    9648:	2301      	movs	r3, #1
    964a:	4804      	ldr	r0, [pc, #16]	; (965c <cdcdf_acm_write+0x20>)
    964c:	78c0      	ldrb	r0, [r0, #3]
    964e:	4c04      	ldr	r4, [pc, #16]	; (9660 <cdcdf_acm_write+0x24>)
    9650:	47a0      	blx	r4
    9652:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    9654:	f06f 0010 	mvn.w	r0, #16
    9658:	4770      	bx	lr
    965a:	bf00      	nop
    965c:	200011c8 	.word	0x200011c8
    9660:	00009fbd 	.word	0x00009fbd

00009664 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9664:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9666:	780b      	ldrb	r3, [r1, #0]
    9668:	2b81      	cmp	r3, #129	; 0x81
    966a:	d010      	beq.n	968e <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    966c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9670:	2b01      	cmp	r3, #1
    9672:	d13f      	bne.n	96f4 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    9674:	888a      	ldrh	r2, [r1, #4]
    9676:	4b22      	ldr	r3, [pc, #136]	; (9700 <hid_keyboard_req+0x9c>)
    9678:	7b1b      	ldrb	r3, [r3, #12]
    967a:	429a      	cmp	r2, r3
    967c:	d13d      	bne.n	96fa <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    967e:	784b      	ldrb	r3, [r1, #1]
    9680:	2b03      	cmp	r3, #3
    9682:	d028      	beq.n	96d6 <hid_keyboard_req+0x72>
    9684:	2b0b      	cmp	r3, #11
    9686:	d02c      	beq.n	96e2 <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9688:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    968c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    968e:	784b      	ldrb	r3, [r1, #1]
    9690:	2b06      	cmp	r3, #6
    9692:	d002      	beq.n	969a <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    9694:	f06f 0009 	mvn.w	r0, #9
    9698:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    969a:	888a      	ldrh	r2, [r1, #4]
    969c:	4b18      	ldr	r3, [pc, #96]	; (9700 <hid_keyboard_req+0x9c>)
    969e:	7b1b      	ldrb	r3, [r3, #12]
    96a0:	429a      	cmp	r2, r3
    96a2:	d002      	beq.n	96aa <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    96a4:	f06f 0009 	mvn.w	r0, #9
    96a8:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    96aa:	884b      	ldrh	r3, [r1, #2]
    96ac:	0a1b      	lsrs	r3, r3, #8
    96ae:	2b21      	cmp	r3, #33	; 0x21
    96b0:	d004      	beq.n	96bc <hid_keyboard_req+0x58>
    96b2:	2b22      	cmp	r3, #34	; 0x22
    96b4:	d009      	beq.n	96ca <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    96b6:	f06f 000c 	mvn.w	r0, #12
    96ba:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    96bc:	4b10      	ldr	r3, [pc, #64]	; (9700 <hid_keyboard_req+0x9c>)
    96be:	6819      	ldr	r1, [r3, #0]
    96c0:	2300      	movs	r3, #0
    96c2:	780a      	ldrb	r2, [r1, #0]
    96c4:	4c0f      	ldr	r4, [pc, #60]	; (9704 <hid_keyboard_req+0xa0>)
    96c6:	47a0      	blx	r4
    96c8:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    96ca:	2300      	movs	r3, #0
    96cc:	223b      	movs	r2, #59	; 0x3b
    96ce:	490e      	ldr	r1, [pc, #56]	; (9708 <hid_keyboard_req+0xa4>)
    96d0:	4c0c      	ldr	r4, [pc, #48]	; (9704 <hid_keyboard_req+0xa0>)
    96d2:	47a0      	blx	r4
    96d4:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    96d6:	2300      	movs	r3, #0
    96d8:	2201      	movs	r2, #1
    96da:	490c      	ldr	r1, [pc, #48]	; (970c <hid_keyboard_req+0xa8>)
    96dc:	4c09      	ldr	r4, [pc, #36]	; (9704 <hid_keyboard_req+0xa0>)
    96de:	47a0      	blx	r4
    96e0:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    96e2:	884a      	ldrh	r2, [r1, #2]
    96e4:	4b06      	ldr	r3, [pc, #24]	; (9700 <hid_keyboard_req+0x9c>)
    96e6:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    96e8:	2300      	movs	r3, #0
    96ea:	461a      	mov	r2, r3
    96ec:	4619      	mov	r1, r3
    96ee:	4c05      	ldr	r4, [pc, #20]	; (9704 <hid_keyboard_req+0xa0>)
    96f0:	47a0      	blx	r4
    96f2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    96f4:	f06f 0009 	mvn.w	r0, #9
    96f8:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    96fa:	f06f 0009 	mvn.w	r0, #9
    96fe:	bd10      	pop	{r4, pc}
    9700:	200011ec 	.word	0x200011ec
    9704:	00009fbd 	.word	0x00009fbd
    9708:	0000bfac 	.word	0x0000bfac
    970c:	200011fb 	.word	0x200011fb

00009710 <hid_keyboard_ctrl>:
{
    9710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9714:	4614      	mov	r4, r2
	switch (ctrl) {
    9716:	2901      	cmp	r1, #1
    9718:	d050      	beq.n	97bc <hid_keyboard_ctrl+0xac>
    971a:	b141      	cbz	r1, 972e <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    971c:	2902      	cmp	r1, #2
    971e:	bf0c      	ite	eq
    9720:	f06f 051a 	mvneq.w	r5, #26
    9724:	f06f 050c 	mvnne.w	r5, #12
}
    9728:	4628      	mov	r0, r5
    972a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    972e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    9732:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    9734:	2b00      	cmp	r3, #0
    9736:	d05e      	beq.n	97f6 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    9738:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    973a:	795b      	ldrb	r3, [r3, #5]
    973c:	2b03      	cmp	r3, #3
    973e:	d15d      	bne.n	97fc <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    9740:	f898 300c 	ldrb.w	r3, [r8, #12]
    9744:	429a      	cmp	r2, r3
    9746:	d05c      	beq.n	9802 <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    9748:	2bff      	cmp	r3, #255	; 0xff
    974a:	d15d      	bne.n	9808 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    974c:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    9750:	6823      	ldr	r3, [r4, #0]
    9752:	7818      	ldrb	r0, [r3, #0]
    9754:	2221      	movs	r2, #33	; 0x21
    9756:	6861      	ldr	r1, [r4, #4]
    9758:	4418      	add	r0, r3
    975a:	4b31      	ldr	r3, [pc, #196]	; (9820 <hid_keyboard_ctrl+0x110>)
    975c:	4798      	blx	r3
    975e:	4b31      	ldr	r3, [pc, #196]	; (9824 <hid_keyboard_ctrl+0x114>)
    9760:	6018      	str	r0, [r3, #0]
    9762:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9764:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 982c <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9768:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9830 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    976c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9834 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9770:	6823      	ldr	r3, [r4, #0]
    9772:	7818      	ldrb	r0, [r3, #0]
    9774:	6861      	ldr	r1, [r4, #4]
    9776:	4418      	add	r0, r3
    9778:	47c8      	blx	r9
		desc->sod = ep;
    977a:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    977c:	2800      	cmp	r0, #0
    977e:	d046      	beq.n	980e <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    9780:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    9782:	7943      	ldrb	r3, [r0, #5]
    9784:	7902      	ldrb	r2, [r0, #4]
    9786:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    978a:	b292      	uxth	r2, r2
    978c:	78c1      	ldrb	r1, [r0, #3]
    978e:	4638      	mov	r0, r7
    9790:	47d0      	blx	sl
    9792:	4605      	mov	r5, r0
    9794:	2800      	cmp	r0, #0
    9796:	d13d      	bne.n	9814 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9798:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    979c:	bf14      	ite	ne
    979e:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    97a2:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    97a6:	4638      	mov	r0, r7
    97a8:	47d8      	blx	fp
    97aa:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    97ac:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    97b0:	d1de      	bne.n	9770 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    97b2:	4b1c      	ldr	r3, [pc, #112]	; (9824 <hid_keyboard_ctrl+0x114>)
    97b4:	2201      	movs	r2, #1
    97b6:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    97b8:	741a      	strb	r2, [r3, #16]
    97ba:	e7b5      	b.n	9728 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    97bc:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    97be:	b11a      	cbz	r2, 97c8 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    97c0:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    97c2:	795b      	ldrb	r3, [r3, #5]
    97c4:	2b03      	cmp	r3, #3
    97c6:	d128      	bne.n	981a <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    97c8:	7b2b      	ldrb	r3, [r5, #12]
    97ca:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    97cc:	bf1c      	itt	ne
    97ce:	23ff      	movne	r3, #255	; 0xff
    97d0:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    97d2:	7b68      	ldrb	r0, [r5, #13]
    97d4:	28ff      	cmp	r0, #255	; 0xff
    97d6:	d003      	beq.n	97e0 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    97d8:	4b13      	ldr	r3, [pc, #76]	; (9828 <hid_keyboard_ctrl+0x118>)
    97da:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    97dc:	23ff      	movs	r3, #255	; 0xff
    97de:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    97e0:	7ba8      	ldrb	r0, [r5, #14]
    97e2:	28ff      	cmp	r0, #255	; 0xff
    97e4:	d003      	beq.n	97ee <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    97e6:	4b10      	ldr	r3, [pc, #64]	; (9828 <hid_keyboard_ctrl+0x118>)
    97e8:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    97ea:	23ff      	movs	r3, #255	; 0xff
    97ec:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    97ee:	2500      	movs	r5, #0
    97f0:	4b0c      	ldr	r3, [pc, #48]	; (9824 <hid_keyboard_ctrl+0x114>)
    97f2:	741d      	strb	r5, [r3, #16]
    97f4:	e798      	b.n	9728 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    97f6:	f06f 0509 	mvn.w	r5, #9
    97fa:	e795      	b.n	9728 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    97fc:	f06f 0509 	mvn.w	r5, #9
    9800:	e792      	b.n	9728 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    9802:	f06f 0511 	mvn.w	r5, #17
    9806:	e78f      	b.n	9728 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    9808:	f06f 051b 	mvn.w	r5, #27
    980c:	e78c      	b.n	9728 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    980e:	f06f 0509 	mvn.w	r5, #9
    9812:	e789      	b.n	9728 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    9814:	f06f 0513 	mvn.w	r5, #19
    9818:	e786      	b.n	9728 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    981a:	f06f 0509 	mvn.w	r5, #9
    981e:	e783      	b.n	9728 <hid_keyboard_ctrl+0x18>
    9820:	0000a501 	.word	0x0000a501
    9824:	200011ec 	.word	0x200011ec
    9828:	00004ff5 	.word	0x00004ff5
    982c:	0000a53b 	.word	0x0000a53b
    9830:	00004f8d 	.word	0x00004f8d
    9834:	00005021 	.word	0x00005021

00009838 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    9838:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    983a:	4b0a      	ldr	r3, [pc, #40]	; (9864 <hiddf_keyboard_init+0x2c>)
    983c:	4798      	blx	r3
    983e:	2801      	cmp	r0, #1
    9840:	d80c      	bhi.n	985c <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    9842:	4809      	ldr	r0, [pc, #36]	; (9868 <hiddf_keyboard_init+0x30>)
    9844:	4b09      	ldr	r3, [pc, #36]	; (986c <hiddf_keyboard_init+0x34>)
    9846:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    9848:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    984a:	3014      	adds	r0, #20
    984c:	4b08      	ldr	r3, [pc, #32]	; (9870 <hiddf_keyboard_init+0x38>)
    984e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    9850:	4908      	ldr	r1, [pc, #32]	; (9874 <hiddf_keyboard_init+0x3c>)
    9852:	2001      	movs	r0, #1
    9854:	4b08      	ldr	r3, [pc, #32]	; (9878 <hiddf_keyboard_init+0x40>)
    9856:	4798      	blx	r3
	return ERR_NONE;
    9858:	2000      	movs	r0, #0
    985a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    985c:	f06f 0010 	mvn.w	r0, #16
}
    9860:	bd08      	pop	{r3, pc}
    9862:	bf00      	nop
    9864:	0000a4ed 	.word	0x0000a4ed
    9868:	200011ec 	.word	0x200011ec
    986c:	00009711 	.word	0x00009711
    9870:	0000a48d 	.word	0x0000a48d
    9874:	2000035c 	.word	0x2000035c
    9878:	0000a3f9 	.word	0x0000a3f9

0000987c <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    987c:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    987e:	4b26      	ldr	r3, [pc, #152]	; (9918 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    9880:	7c1b      	ldrb	r3, [r3, #16]
    9882:	2b00      	cmp	r3, #0
    9884:	d045      	beq.n	9912 <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    9886:	4a24      	ldr	r2, [pc, #144]	; (9918 <hiddf_keyboard_keys_state_change+0x9c>)
    9888:	2300      	movs	r3, #0
    988a:	6053      	str	r3, [r2, #4]
    988c:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    988e:	b329      	cbz	r1, 98dc <hiddf_keyboard_keys_state_change+0x60>
    9890:	4603      	mov	r3, r0
    9892:	1e4d      	subs	r5, r1, #1
    9894:	b2ed      	uxtb	r5, r5
    9896:	3501      	adds	r5, #1
    9898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    989c:	4405      	add	r5, r0
    989e:	2200      	movs	r2, #0
    98a0:	e002      	b.n	98a8 <hiddf_keyboard_keys_state_change+0x2c>
    98a2:	3303      	adds	r3, #3
    98a4:	42ab      	cmp	r3, r5
    98a6:	d005      	beq.n	98b4 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    98a8:	785c      	ldrb	r4, [r3, #1]
    98aa:	2c00      	cmp	r4, #0
    98ac:	d0f9      	beq.n	98a2 <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    98ae:	3201      	adds	r2, #1
    98b0:	b2d2      	uxtb	r2, r2
    98b2:	e7f6      	b.n	98a2 <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    98b4:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    98b6:	b2d2      	uxtb	r2, r2
    98b8:	2a06      	cmp	r2, #6
    98ba:	d809      	bhi.n	98d0 <hiddf_keyboard_keys_state_change+0x54>
    98bc:	4603      	mov	r3, r0
    98be:	1e4a      	subs	r2, r1, #1
    98c0:	b2d2      	uxtb	r2, r2
    98c2:	3201      	adds	r2, #1
    98c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    98c8:	4410      	add	r0, r2
    98ca:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    98cc:	4d12      	ldr	r5, [pc, #72]	; (9918 <hiddf_keyboard_keys_state_change+0x9c>)
    98ce:	e015      	b.n	98fc <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    98d0:	4b11      	ldr	r3, [pc, #68]	; (9918 <hiddf_keyboard_keys_state_change+0x9c>)
    98d2:	f04f 32ff 	mov.w	r2, #4294967295
    98d6:	f8c3 2006 	str.w	r2, [r3, #6]
    98da:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    98dc:	480e      	ldr	r0, [pc, #56]	; (9918 <hiddf_keyboard_keys_state_change+0x9c>)
    98de:	2300      	movs	r3, #0
    98e0:	2208      	movs	r2, #8
    98e2:	1d01      	adds	r1, r0, #4
    98e4:	7b40      	ldrb	r0, [r0, #13]
    98e6:	4c0d      	ldr	r4, [pc, #52]	; (991c <hiddf_keyboard_keys_state_change+0xa0>)
    98e8:	47a0      	blx	r4
    98ea:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    98ec:	1c62      	adds	r2, r4, #1
    98ee:	7819      	ldrb	r1, [r3, #0]
    98f0:	442c      	add	r4, r5
    98f2:	7121      	strb	r1, [r4, #4]
    98f4:	b2d4      	uxtb	r4, r2
    98f6:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    98f8:	4283      	cmp	r3, r0
    98fa:	d0ef      	beq.n	98dc <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    98fc:	789a      	ldrb	r2, [r3, #2]
    98fe:	2a01      	cmp	r2, #1
    9900:	d1f9      	bne.n	98f6 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    9902:	785a      	ldrb	r2, [r3, #1]
    9904:	2a00      	cmp	r2, #0
    9906:	d0f1      	beq.n	98ec <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    9908:	792a      	ldrb	r2, [r5, #4]
    990a:	7819      	ldrb	r1, [r3, #0]
    990c:	430a      	orrs	r2, r1
    990e:	712a      	strb	r2, [r5, #4]
    9910:	e7f1      	b.n	98f6 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    9912:	f06f 0010 	mvn.w	r0, #16
}
    9916:	bd38      	pop	{r3, r4, r5, pc}
    9918:	200011ec 	.word	0x200011ec
    991c:	00009fbd 	.word	0x00009fbd

00009920 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9920:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9922:	780b      	ldrb	r3, [r1, #0]
    9924:	2b81      	cmp	r3, #129	; 0x81
    9926:	d010      	beq.n	994a <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9928:	f3c3 1341 	ubfx	r3, r3, #5, #2
    992c:	2b01      	cmp	r3, #1
    992e:	d13f      	bne.n	99b0 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    9930:	888a      	ldrh	r2, [r1, #4]
    9932:	4b22      	ldr	r3, [pc, #136]	; (99bc <hid_mouse_req+0x9c>)
    9934:	7a1b      	ldrb	r3, [r3, #8]
    9936:	429a      	cmp	r2, r3
    9938:	d13d      	bne.n	99b6 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    993a:	784b      	ldrb	r3, [r1, #1]
    993c:	2b03      	cmp	r3, #3
    993e:	d028      	beq.n	9992 <hid_mouse_req+0x72>
    9940:	2b0b      	cmp	r3, #11
    9942:	d02c      	beq.n	999e <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9944:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9948:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    994a:	784b      	ldrb	r3, [r1, #1]
    994c:	2b06      	cmp	r3, #6
    994e:	d002      	beq.n	9956 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    9950:	f06f 0009 	mvn.w	r0, #9
    9954:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9956:	888a      	ldrh	r2, [r1, #4]
    9958:	4b18      	ldr	r3, [pc, #96]	; (99bc <hid_mouse_req+0x9c>)
    995a:	7a1b      	ldrb	r3, [r3, #8]
    995c:	429a      	cmp	r2, r3
    995e:	d002      	beq.n	9966 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    9960:	f06f 0009 	mvn.w	r0, #9
    9964:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    9966:	884b      	ldrh	r3, [r1, #2]
    9968:	0a1b      	lsrs	r3, r3, #8
    996a:	2b21      	cmp	r3, #33	; 0x21
    996c:	d004      	beq.n	9978 <hid_mouse_req+0x58>
    996e:	2b22      	cmp	r3, #34	; 0x22
    9970:	d009      	beq.n	9986 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    9972:	f06f 000c 	mvn.w	r0, #12
    9976:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    9978:	4b10      	ldr	r3, [pc, #64]	; (99bc <hid_mouse_req+0x9c>)
    997a:	6819      	ldr	r1, [r3, #0]
    997c:	2300      	movs	r3, #0
    997e:	780a      	ldrb	r2, [r1, #0]
    9980:	4c0f      	ldr	r4, [pc, #60]	; (99c0 <hid_mouse_req+0xa0>)
    9982:	47a0      	blx	r4
    9984:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    9986:	2300      	movs	r3, #0
    9988:	2234      	movs	r2, #52	; 0x34
    998a:	490e      	ldr	r1, [pc, #56]	; (99c4 <hid_mouse_req+0xa4>)
    998c:	4c0c      	ldr	r4, [pc, #48]	; (99c0 <hid_mouse_req+0xa0>)
    998e:	47a0      	blx	r4
    9990:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    9992:	2300      	movs	r3, #0
    9994:	2201      	movs	r2, #1
    9996:	490c      	ldr	r1, [pc, #48]	; (99c8 <hid_mouse_req+0xa8>)
    9998:	4c09      	ldr	r4, [pc, #36]	; (99c0 <hid_mouse_req+0xa0>)
    999a:	47a0      	blx	r4
    999c:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    999e:	884a      	ldrh	r2, [r1, #2]
    99a0:	4b06      	ldr	r3, [pc, #24]	; (99bc <hid_mouse_req+0x9c>)
    99a2:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    99a4:	2300      	movs	r3, #0
    99a6:	461a      	mov	r2, r3
    99a8:	4619      	mov	r1, r3
    99aa:	4c05      	ldr	r4, [pc, #20]	; (99c0 <hid_mouse_req+0xa0>)
    99ac:	47a0      	blx	r4
    99ae:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    99b0:	f06f 0009 	mvn.w	r0, #9
    99b4:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    99b6:	f06f 0009 	mvn.w	r0, #9
    99ba:	bd10      	pop	{r4, pc}
    99bc:	2000120c 	.word	0x2000120c
    99c0:	00009fbd 	.word	0x00009fbd
    99c4:	0000bfe8 	.word	0x0000bfe8
    99c8:	20001216 	.word	0x20001216

000099cc <hid_mouse_ctrl>:
{
    99cc:	b570      	push	{r4, r5, r6, lr}
    99ce:	4614      	mov	r4, r2
	switch (ctrl) {
    99d0:	2901      	cmp	r1, #1
    99d2:	d040      	beq.n	9a56 <hid_mouse_ctrl+0x8a>
    99d4:	b139      	cbz	r1, 99e6 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    99d6:	2902      	cmp	r1, #2
    99d8:	bf0c      	ite	eq
    99da:	f06f 041a 	mvneq.w	r4, #26
    99de:	f06f 040c 	mvnne.w	r4, #12
}
    99e2:	4620      	mov	r0, r4
    99e4:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    99e6:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    99e8:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    99ea:	2b00      	cmp	r3, #0
    99ec:	d049      	beq.n	9a82 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    99ee:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    99f0:	795b      	ldrb	r3, [r3, #5]
    99f2:	2b03      	cmp	r3, #3
    99f4:	d148      	bne.n	9a88 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    99f6:	7a2b      	ldrb	r3, [r5, #8]
    99f8:	429a      	cmp	r2, r3
    99fa:	d048      	beq.n	9a8e <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    99fc:	2bff      	cmp	r3, #255	; 0xff
    99fe:	d149      	bne.n	9a94 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    9a00:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    9a02:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    9a04:	7818      	ldrb	r0, [r3, #0]
    9a06:	2221      	movs	r2, #33	; 0x21
    9a08:	6861      	ldr	r1, [r4, #4]
    9a0a:	4418      	add	r0, r3
    9a0c:	4b29      	ldr	r3, [pc, #164]	; (9ab4 <hid_mouse_ctrl+0xe8>)
    9a0e:	4798      	blx	r3
    9a10:	4b29      	ldr	r3, [pc, #164]	; (9ab8 <hid_mouse_ctrl+0xec>)
    9a12:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9a14:	6823      	ldr	r3, [r4, #0]
    9a16:	7818      	ldrb	r0, [r3, #0]
    9a18:	6861      	ldr	r1, [r4, #4]
    9a1a:	4418      	add	r0, r3
    9a1c:	4b27      	ldr	r3, [pc, #156]	; (9abc <hid_mouse_ctrl+0xf0>)
    9a1e:	4798      	blx	r3
	desc->sod = ep;
    9a20:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    9a22:	2800      	cmp	r0, #0
    9a24:	d039      	beq.n	9a9a <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    9a26:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    9a28:	7943      	ldrb	r3, [r0, #5]
    9a2a:	7902      	ldrb	r2, [r0, #4]
    9a2c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9a30:	b292      	uxth	r2, r2
    9a32:	78c1      	ldrb	r1, [r0, #3]
    9a34:	4630      	mov	r0, r6
    9a36:	4b22      	ldr	r3, [pc, #136]	; (9ac0 <hid_mouse_ctrl+0xf4>)
    9a38:	4798      	blx	r3
    9a3a:	4604      	mov	r4, r0
    9a3c:	bb80      	cbnz	r0, 9aa0 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9a3e:	f016 0f80 	tst.w	r6, #128	; 0x80
    9a42:	d030      	beq.n	9aa6 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    9a44:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    9a46:	4630      	mov	r0, r6
    9a48:	4b1e      	ldr	r3, [pc, #120]	; (9ac4 <hid_mouse_ctrl+0xf8>)
    9a4a:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    9a4c:	4b1a      	ldr	r3, [pc, #104]	; (9ab8 <hid_mouse_ctrl+0xec>)
    9a4e:	2201      	movs	r2, #1
    9a50:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    9a52:	72da      	strb	r2, [r3, #11]
    9a54:	e7c5      	b.n	99e2 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    9a56:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    9a58:	b11a      	cbz	r2, 9a62 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9a5a:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    9a5c:	795b      	ldrb	r3, [r3, #5]
    9a5e:	2b03      	cmp	r3, #3
    9a60:	d124      	bne.n	9aac <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    9a62:	7a2b      	ldrb	r3, [r5, #8]
    9a64:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    9a66:	bf1c      	itt	ne
    9a68:	23ff      	movne	r3, #255	; 0xff
    9a6a:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    9a6c:	7a68      	ldrb	r0, [r5, #9]
    9a6e:	28ff      	cmp	r0, #255	; 0xff
    9a70:	d003      	beq.n	9a7a <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    9a72:	4b15      	ldr	r3, [pc, #84]	; (9ac8 <hid_mouse_ctrl+0xfc>)
    9a74:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9a76:	23ff      	movs	r3, #255	; 0xff
    9a78:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    9a7a:	2400      	movs	r4, #0
    9a7c:	4b0e      	ldr	r3, [pc, #56]	; (9ab8 <hid_mouse_ctrl+0xec>)
    9a7e:	72dc      	strb	r4, [r3, #11]
    9a80:	e7af      	b.n	99e2 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    9a82:	f06f 0409 	mvn.w	r4, #9
    9a86:	e7ac      	b.n	99e2 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    9a88:	f06f 0409 	mvn.w	r4, #9
    9a8c:	e7a9      	b.n	99e2 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    9a8e:	f06f 0411 	mvn.w	r4, #17
    9a92:	e7a6      	b.n	99e2 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    9a94:	f06f 041b 	mvn.w	r4, #27
    9a98:	e7a3      	b.n	99e2 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    9a9a:	f06f 0409 	mvn.w	r4, #9
    9a9e:	e7a0      	b.n	99e2 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    9aa0:	f06f 0413 	mvn.w	r4, #19
    9aa4:	e79d      	b.n	99e2 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    9aa6:	f04f 34ff 	mov.w	r4, #4294967295
    9aaa:	e79a      	b.n	99e2 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    9aac:	f06f 0409 	mvn.w	r4, #9
    9ab0:	e797      	b.n	99e2 <hid_mouse_ctrl+0x16>
    9ab2:	bf00      	nop
    9ab4:	0000a501 	.word	0x0000a501
    9ab8:	2000120c 	.word	0x2000120c
    9abc:	0000a53b 	.word	0x0000a53b
    9ac0:	00004f8d 	.word	0x00004f8d
    9ac4:	00005021 	.word	0x00005021
    9ac8:	00004ff5 	.word	0x00004ff5

00009acc <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    9acc:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9ace:	4b0a      	ldr	r3, [pc, #40]	; (9af8 <hiddf_mouse_init+0x2c>)
    9ad0:	4798      	blx	r3
    9ad2:	2801      	cmp	r0, #1
    9ad4:	d80c      	bhi.n	9af0 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    9ad6:	4809      	ldr	r0, [pc, #36]	; (9afc <hiddf_mouse_init+0x30>)
    9ad8:	4b09      	ldr	r3, [pc, #36]	; (9b00 <hiddf_mouse_init+0x34>)
    9ada:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    9adc:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    9ade:	300c      	adds	r0, #12
    9ae0:	4b08      	ldr	r3, [pc, #32]	; (9b04 <hiddf_mouse_init+0x38>)
    9ae2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    9ae4:	4908      	ldr	r1, [pc, #32]	; (9b08 <hiddf_mouse_init+0x3c>)
    9ae6:	2001      	movs	r0, #1
    9ae8:	4b08      	ldr	r3, [pc, #32]	; (9b0c <hiddf_mouse_init+0x40>)
    9aea:	4798      	blx	r3
	return ERR_NONE;
    9aec:	2000      	movs	r0, #0
    9aee:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9af0:	f06f 0010 	mvn.w	r0, #16
}
    9af4:	bd08      	pop	{r3, pc}
    9af6:	bf00      	nop
    9af8:	0000a4ed 	.word	0x0000a4ed
    9afc:	2000120c 	.word	0x2000120c
    9b00:	000099cd 	.word	0x000099cd
    9b04:	0000a48d 	.word	0x0000a48d
    9b08:	20000364 	.word	0x20000364
    9b0c:	0000a3f9 	.word	0x0000a3f9

00009b10 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    9b10:	2200      	movs	r2, #0
    9b12:	4b0d      	ldr	r3, [pc, #52]	; (9b48 <hiddf_mouse_move+0x38>)
    9b14:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    9b16:	2901      	cmp	r1, #1
    9b18:	d00e      	beq.n	9b38 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    9b1a:	2902      	cmp	r1, #2
    9b1c:	d00e      	beq.n	9b3c <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    9b1e:	2903      	cmp	r1, #3
    9b20:	d10f      	bne.n	9b42 <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    9b22:	4b09      	ldr	r3, [pc, #36]	; (9b48 <hiddf_mouse_move+0x38>)
    9b24:	71d8      	strb	r0, [r3, #7]
{
    9b26:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    9b28:	4807      	ldr	r0, [pc, #28]	; (9b48 <hiddf_mouse_move+0x38>)
    9b2a:	2300      	movs	r3, #0
    9b2c:	2204      	movs	r2, #4
    9b2e:	1881      	adds	r1, r0, r2
    9b30:	7a40      	ldrb	r0, [r0, #9]
    9b32:	4c06      	ldr	r4, [pc, #24]	; (9b4c <hiddf_mouse_move+0x3c>)
    9b34:	47a0      	blx	r4
    9b36:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    9b38:	7158      	strb	r0, [r3, #5]
    9b3a:	e7f4      	b.n	9b26 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    9b3c:	4b02      	ldr	r3, [pc, #8]	; (9b48 <hiddf_mouse_move+0x38>)
    9b3e:	7198      	strb	r0, [r3, #6]
    9b40:	e7f1      	b.n	9b26 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    9b42:	f06f 000c 	mvn.w	r0, #12
    9b46:	4770      	bx	lr
    9b48:	2000120c 	.word	0x2000120c
    9b4c:	00009fbd 	.word	0x00009fbd

00009b50 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    9b50:	4770      	bx	lr

00009b52 <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    9b52:	e7fe      	b.n	9b52 <midi_cb_ep_bulk_out>

00009b54 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9b54:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    9b56:	780b      	ldrb	r3, [r1, #0]
    9b58:	2b81      	cmp	r3, #129	; 0x81
    9b5a:	d014      	beq.n	9b86 <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9b5c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9b60:	2b01      	cmp	r3, #1
    9b62:	d132      	bne.n	9bca <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    9b64:	888b      	ldrh	r3, [r1, #4]
    9b66:	4a1c      	ldr	r2, [pc, #112]	; (9bd8 <audio_midi_req+0x84>)
    9b68:	7912      	ldrb	r2, [r2, #4]
    9b6a:	429a      	cmp	r2, r3
    9b6c:	d003      	beq.n	9b76 <audio_midi_req+0x22>
    9b6e:	4a1a      	ldr	r2, [pc, #104]	; (9bd8 <audio_midi_req+0x84>)
    9b70:	7952      	ldrb	r2, [r2, #5]
    9b72:	429a      	cmp	r2, r3
    9b74:	d12c      	bne.n	9bd0 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    9b76:	784b      	ldrb	r3, [r1, #1]
    9b78:	2b03      	cmp	r3, #3
    9b7a:	d017      	beq.n	9bac <audio_midi_req+0x58>
    9b7c:	2b0b      	cmp	r3, #11
    9b7e:	d01b      	beq.n	9bb8 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    9b80:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9b84:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    9b86:	888b      	ldrh	r3, [r1, #4]
    9b88:	4a13      	ldr	r2, [pc, #76]	; (9bd8 <audio_midi_req+0x84>)
    9b8a:	7912      	ldrb	r2, [r2, #4]
    9b8c:	429a      	cmp	r2, r3
    9b8e:	d006      	beq.n	9b9e <audio_midi_req+0x4a>
    9b90:	4a11      	ldr	r2, [pc, #68]	; (9bd8 <audio_midi_req+0x84>)
    9b92:	7952      	ldrb	r2, [r2, #5]
    9b94:	429a      	cmp	r2, r3
    9b96:	d002      	beq.n	9b9e <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    9b98:	f06f 0009 	mvn.w	r0, #9
    9b9c:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    9b9e:	4b0e      	ldr	r3, [pc, #56]	; (9bd8 <audio_midi_req+0x84>)
    9ba0:	6819      	ldr	r1, [r3, #0]
    9ba2:	2300      	movs	r3, #0
    9ba4:	780a      	ldrb	r2, [r1, #0]
    9ba6:	4c0d      	ldr	r4, [pc, #52]	; (9bdc <audio_midi_req+0x88>)
    9ba8:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    9baa:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    9bac:	2300      	movs	r3, #0
    9bae:	2201      	movs	r2, #1
    9bb0:	490b      	ldr	r1, [pc, #44]	; (9be0 <audio_midi_req+0x8c>)
    9bb2:	4c0a      	ldr	r4, [pc, #40]	; (9bdc <audio_midi_req+0x88>)
    9bb4:	47a0      	blx	r4
    9bb6:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    9bb8:	884a      	ldrh	r2, [r1, #2]
    9bba:	4b07      	ldr	r3, [pc, #28]	; (9bd8 <audio_midi_req+0x84>)
    9bbc:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    9bbe:	2300      	movs	r3, #0
    9bc0:	461a      	mov	r2, r3
    9bc2:	4619      	mov	r1, r3
    9bc4:	4c05      	ldr	r4, [pc, #20]	; (9bdc <audio_midi_req+0x88>)
    9bc6:	47a0      	blx	r4
    9bc8:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    9bca:	f06f 0009 	mvn.w	r0, #9
    9bce:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9bd0:	f06f 0009 	mvn.w	r0, #9
    9bd4:	bd10      	pop	{r4, pc}
    9bd6:	bf00      	nop
    9bd8:	20001224 	.word	0x20001224
    9bdc:	00009fbd 	.word	0x00009fbd
    9be0:	2000122c 	.word	0x2000122c

00009be4 <audio_midi_ctrl>:
{
    9be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9be8:	b083      	sub	sp, #12
    9bea:	4615      	mov	r5, r2
	switch (ctrl) {
    9bec:	2901      	cmp	r1, #1
    9bee:	f000 8092 	beq.w	9d16 <audio_midi_ctrl+0x132>
    9bf2:	b141      	cbz	r1, 9c06 <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    9bf4:	2902      	cmp	r1, #2
    9bf6:	bf0c      	ite	eq
    9bf8:	f06f 001a 	mvneq.w	r0, #26
    9bfc:	f06f 000c 	mvnne.w	r0, #12
}
    9c00:	b003      	add	sp, #12
    9c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    9c06:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    9c0a:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    9c0c:	2800      	cmp	r0, #0
    9c0e:	f000 80a9 	beq.w	9d64 <audio_midi_ctrl+0x180>
    9c12:	f109 0604 	add.w	r6, r9, #4
    9c16:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    9c18:	f04f 0804 	mov.w	r8, #4
    9c1c:	4f5d      	ldr	r7, [pc, #372]	; (9d94 <audio_midi_ctrl+0x1b0>)
    9c1e:	e019      	b.n	9c54 <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9c20:	f816 3b01 	ldrb.w	r3, [r6], #1
    9c24:	429a      	cmp	r2, r3
    9c26:	f000 80a3 	beq.w	9d70 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    9c2a:	2bff      	cmp	r3, #255	; 0xff
    9c2c:	f040 80a3 	bne.w	9d76 <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    9c30:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    9c34:	2c01      	cmp	r4, #1
    9c36:	d016      	beq.n	9c66 <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    9c38:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    9c3a:	7818      	ldrb	r0, [r3, #0]
    9c3c:	4642      	mov	r2, r8
    9c3e:	6869      	ldr	r1, [r5, #4]
    9c40:	4418      	add	r0, r3
    9c42:	47b8      	blx	r7
    9c44:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    9c46:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    9c4a:	f000 809e 	beq.w	9d8a <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    9c4e:	2800      	cmp	r0, #0
    9c50:	f000 808b 	beq.w	9d6a <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    9c54:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    9c56:	7943      	ldrb	r3, [r0, #5]
    9c58:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    9c5c:	2b01      	cmp	r3, #1
    9c5e:	d0df      	beq.n	9c20 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    9c60:	f06f 0009 	mvn.w	r0, #9
    9c64:	e7cc      	b.n	9c00 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    9c66:	2205      	movs	r2, #5
    9c68:	6869      	ldr	r1, [r5, #4]
    9c6a:	4b4a      	ldr	r3, [pc, #296]	; (9d94 <audio_midi_ctrl+0x1b0>)
    9c6c:	4798      	blx	r3
    9c6e:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    9c70:	4e49      	ldr	r6, [pc, #292]	; (9d98 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9c72:	f8df 8144 	ldr.w	r8, [pc, #324]	; 9db8 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    9c76:	4f49      	ldr	r7, [pc, #292]	; (9d9c <audio_midi_ctrl+0x1b8>)
    9c78:	e01a      	b.n	9cb0 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    9c7a:	4a47      	ldr	r2, [pc, #284]	; (9d98 <audio_midi_ctrl+0x1b4>)
    9c7c:	7953      	ldrb	r3, [r2, #5]
    9c7e:	425b      	negs	r3, r3
    9c80:	b2db      	uxtb	r3, r3
    9c82:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    9c84:	f06f 0013 	mvn.w	r0, #19
    9c88:	e7ba      	b.n	9c00 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    9c8a:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9c8e:	b2c0      	uxtb	r0, r0
    9c90:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    9c94:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    9c96:	4a42      	ldr	r2, [pc, #264]	; (9da0 <audio_midi_ctrl+0x1bc>)
    9c98:	2102      	movs	r1, #2
    9c9a:	f899 0006 	ldrb.w	r0, [r9, #6]
    9c9e:	4b41      	ldr	r3, [pc, #260]	; (9da4 <audio_midi_ctrl+0x1c0>)
    9ca0:	4798      	blx	r3
				desc->sod = ep;
    9ca2:	602c      	str	r4, [r5, #0]
    9ca4:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9ca6:	6869      	ldr	r1, [r5, #4]
    9ca8:	4420      	add	r0, r4
    9caa:	4b3f      	ldr	r3, [pc, #252]	; (9da8 <audio_midi_ctrl+0x1c4>)
    9cac:	4798      	blx	r3
    9cae:	4604      	mov	r4, r0
			while (NULL != ep) {
    9cb0:	2c00      	cmp	r4, #0
    9cb2:	d063      	beq.n	9d7c <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    9cb4:	78a3      	ldrb	r3, [r4, #2]
    9cb6:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    9cba:	78e3      	ldrb	r3, [r4, #3]
    9cbc:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    9cc0:	7962      	ldrb	r2, [r4, #5]
    9cc2:	7923      	ldrb	r3, [r4, #4]
    9cc4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    9cc8:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    9cca:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    9cce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9cd2:	b2db      	uxtb	r3, r3
    9cd4:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    9cd6:	2301      	movs	r3, #1
    9cd8:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9cda:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9cde:	f89d 1003 	ldrb.w	r1, [sp, #3]
    9ce2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9ce6:	b292      	uxth	r2, r2
    9ce8:	47c0      	blx	r8
    9cea:	b2c0      	uxtb	r0, r0
    9cec:	7170      	strb	r0, [r6, #5]
    9cee:	2800      	cmp	r0, #0
    9cf0:	d1c3      	bne.n	9c7a <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9cf2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9cf6:	f013 0f80 	tst.w	r3, #128	; 0x80
    9cfa:	d1c6      	bne.n	9c8a <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    9cfc:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9d00:	b2c0      	uxtb	r0, r0
    9d02:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    9d06:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    9d08:	4a28      	ldr	r2, [pc, #160]	; (9dac <audio_midi_ctrl+0x1c8>)
    9d0a:	2102      	movs	r1, #2
    9d0c:	f899 0007 	ldrb.w	r0, [r9, #7]
    9d10:	4b24      	ldr	r3, [pc, #144]	; (9da4 <audio_midi_ctrl+0x1c0>)
    9d12:	4798      	blx	r3
    9d14:	e7c5      	b.n	9ca2 <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    9d16:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    9d18:	b142      	cbz	r2, 9d2c <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9d1a:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    9d1c:	795b      	ldrb	r3, [r3, #5]
    9d1e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    9d22:	2b01      	cmp	r3, #1
    9d24:	d002      	beq.n	9d2c <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    9d26:	f06f 0009 	mvn.w	r0, #9
    9d2a:	e769      	b.n	9c00 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    9d2c:	7923      	ldrb	r3, [r4, #4]
    9d2e:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    9d30:	bf1c      	itt	ne
    9d32:	23ff      	movne	r3, #255	; 0xff
    9d34:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    9d36:	7963      	ldrb	r3, [r4, #5]
    9d38:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    9d3a:	bf1c      	itt	ne
    9d3c:	23ff      	movne	r3, #255	; 0xff
    9d3e:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    9d40:	79a0      	ldrb	r0, [r4, #6]
    9d42:	28ff      	cmp	r0, #255	; 0xff
    9d44:	d003      	beq.n	9d4e <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    9d46:	4b1a      	ldr	r3, [pc, #104]	; (9db0 <audio_midi_ctrl+0x1cc>)
    9d48:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9d4a:	23ff      	movs	r3, #255	; 0xff
    9d4c:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    9d4e:	79e0      	ldrb	r0, [r4, #7]
    9d50:	28ff      	cmp	r0, #255	; 0xff
    9d52:	d003      	beq.n	9d5c <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    9d54:	4b16      	ldr	r3, [pc, #88]	; (9db0 <audio_midi_ctrl+0x1cc>)
    9d56:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9d58:	23ff      	movs	r3, #255	; 0xff
    9d5a:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    9d5c:	2000      	movs	r0, #0
    9d5e:	4b15      	ldr	r3, [pc, #84]	; (9db4 <audio_midi_ctrl+0x1d0>)
    9d60:	7358      	strb	r0, [r3, #13]
    9d62:	e74d      	b.n	9c00 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    9d64:	f06f 0009 	mvn.w	r0, #9
    9d68:	e74a      	b.n	9c00 <audio_midi_ctrl+0x1c>
    9d6a:	f06f 0009 	mvn.w	r0, #9
    9d6e:	e747      	b.n	9c00 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    9d70:	f06f 0011 	mvn.w	r0, #17
    9d74:	e744      	b.n	9c00 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    9d76:	f06f 001b 	mvn.w	r0, #27
    9d7a:	e741      	b.n	9c00 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    9d7c:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    9d7e:	7818      	ldrb	r0, [r3, #0]
    9d80:	2204      	movs	r2, #4
    9d82:	6869      	ldr	r1, [r5, #4]
    9d84:	4418      	add	r0, r3
    9d86:	4b03      	ldr	r3, [pc, #12]	; (9d94 <audio_midi_ctrl+0x1b0>)
    9d88:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    9d8a:	2201      	movs	r2, #1
    9d8c:	4b09      	ldr	r3, [pc, #36]	; (9db4 <audio_midi_ctrl+0x1d0>)
    9d8e:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    9d90:	2000      	movs	r0, #0
    9d92:	e735      	b.n	9c00 <audio_midi_ctrl+0x1c>
    9d94:	0000a501 	.word	0x0000a501
    9d98:	20002c28 	.word	0x20002c28
    9d9c:	00005021 	.word	0x00005021
    9da0:	00009b51 	.word	0x00009b51
    9da4:	000051f5 	.word	0x000051f5
    9da8:	0000a53b 	.word	0x0000a53b
    9dac:	00009b53 	.word	0x00009b53
    9db0:	00004ff5 	.word	0x00004ff5
    9db4:	20001224 	.word	0x20001224
    9db8:	00004f8d 	.word	0x00004f8d

00009dbc <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    9dbc:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    9dbe:	4b0a      	ldr	r3, [pc, #40]	; (9de8 <audiodf_midi_init+0x2c>)
    9dc0:	4798      	blx	r3
    9dc2:	2801      	cmp	r0, #1
    9dc4:	d80c      	bhi.n	9de0 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    9dc6:	4809      	ldr	r0, [pc, #36]	; (9dec <audiodf_midi_init+0x30>)
    9dc8:	4b09      	ldr	r3, [pc, #36]	; (9df0 <audiodf_midi_init+0x34>)
    9dca:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    9dcc:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    9dce:	3010      	adds	r0, #16
    9dd0:	4b08      	ldr	r3, [pc, #32]	; (9df4 <audiodf_midi_init+0x38>)
    9dd2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    9dd4:	4908      	ldr	r1, [pc, #32]	; (9df8 <audiodf_midi_init+0x3c>)
    9dd6:	2001      	movs	r0, #1
    9dd8:	4b08      	ldr	r3, [pc, #32]	; (9dfc <audiodf_midi_init+0x40>)
    9dda:	4798      	blx	r3
	return ERR_NONE;
    9ddc:	2000      	movs	r0, #0
    9dde:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9de0:	f06f 0010 	mvn.w	r0, #16
}
    9de4:	bd08      	pop	{r3, pc}
    9de6:	bf00      	nop
    9de8:	0000a4ed 	.word	0x0000a4ed
    9dec:	20001224 	.word	0x20001224
    9df0:	00009be5 	.word	0x00009be5
    9df4:	0000a48d 	.word	0x0000a48d
    9df8:	2000036c 	.word	0x2000036c
    9dfc:	0000a3f9 	.word	0x0000a3f9

00009e00 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    9e00:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    9e02:	4c06      	ldr	r4, [pc, #24]	; (9e1c <audiodf_midi_xfer_packet+0x1c>)
    9e04:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    9e06:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    9e08:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    9e0a:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    9e0c:	2300      	movs	r3, #0
    9e0e:	2204      	movs	r2, #4
    9e10:	f104 0109 	add.w	r1, r4, #9
    9e14:	79a0      	ldrb	r0, [r4, #6]
    9e16:	4c02      	ldr	r4, [pc, #8]	; (9e20 <audiodf_midi_xfer_packet+0x20>)
    9e18:	47a0      	blx	r4
	
	
}
    9e1a:	bd10      	pop	{r4, pc}
    9e1c:	20001224 	.word	0x20001224
    9e20:	00009fbd 	.word	0x00009fbd

00009e24 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    9e24:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    9e26:	4b07      	ldr	r3, [pc, #28]	; (9e44 <usbdc_unconfig+0x20>)
    9e28:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    9e2a:	b14c      	cbz	r4, 9e40 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    9e2c:	2600      	movs	r6, #0
    9e2e:	2501      	movs	r5, #1
    9e30:	6863      	ldr	r3, [r4, #4]
    9e32:	4632      	mov	r2, r6
    9e34:	4629      	mov	r1, r5
    9e36:	4620      	mov	r0, r4
    9e38:	4798      	blx	r3
		func = func->next;
    9e3a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    9e3c:	2c00      	cmp	r4, #0
    9e3e:	d1f7      	bne.n	9e30 <usbdc_unconfig+0xc>
    9e40:	bd70      	pop	{r4, r5, r6, pc}
    9e42:	bf00      	nop
    9e44:	20001240 	.word	0x20001240

00009e48 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    9e48:	b570      	push	{r4, r5, r6, lr}
    9e4a:	4606      	mov	r6, r0
    9e4c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    9e4e:	4b07      	ldr	r3, [pc, #28]	; (9e6c <usbdc_change_notify+0x24>)
    9e50:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    9e52:	b91c      	cbnz	r4, 9e5c <usbdc_change_notify+0x14>
    9e54:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    9e56:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    9e58:	2c00      	cmp	r4, #0
    9e5a:	d0fb      	beq.n	9e54 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    9e5c:	6863      	ldr	r3, [r4, #4]
    9e5e:	2b00      	cmp	r3, #0
    9e60:	d0f9      	beq.n	9e56 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    9e62:	4629      	mov	r1, r5
    9e64:	4630      	mov	r0, r6
    9e66:	4798      	blx	r3
    9e68:	e7f5      	b.n	9e56 <usbdc_change_notify+0xe>
    9e6a:	bf00      	nop
    9e6c:	20001240 	.word	0x20001240

00009e70 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e72:	4607      	mov	r7, r0
    9e74:	460e      	mov	r6, r1
    9e76:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    9e78:	4b0c      	ldr	r3, [pc, #48]	; (9eac <usbdc_request_handler+0x3c>)
    9e7a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    9e7c:	b91c      	cbnz	r4, 9e86 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    9e7e:	2000      	movs	r0, #0
    9e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    9e82:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    9e84:	b16c      	cbz	r4, 9ea2 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    9e86:	6863      	ldr	r3, [r4, #4]
    9e88:	2b00      	cmp	r3, #0
    9e8a:	d0fa      	beq.n	9e82 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    9e8c:	462a      	mov	r2, r5
    9e8e:	4631      	mov	r1, r6
    9e90:	4638      	mov	r0, r7
    9e92:	4798      	blx	r3
			if (0 == rc) {
    9e94:	b138      	cbz	r0, 9ea6 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    9e96:	f110 0f0a 	cmn.w	r0, #10
    9e9a:	d0f2      	beq.n	9e82 <usbdc_request_handler+0x12>
				return -1;
    9e9c:	f04f 30ff 	mov.w	r0, #4294967295
}
    9ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    9ea2:	2000      	movs	r0, #0
    9ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    9ea6:	2001      	movs	r0, #1
    9ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9eaa:	bf00      	nop
    9eac:	20001240 	.word	0x20001240

00009eb0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    9eb0:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    9eb2:	4b06      	ldr	r3, [pc, #24]	; (9ecc <usbd_sof_cb+0x1c>)
    9eb4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    9eb6:	b91c      	cbnz	r4, 9ec0 <usbd_sof_cb+0x10>
    9eb8:	bd10      	pop	{r4, pc}
		sof = sof->next;
    9eba:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    9ebc:	2c00      	cmp	r4, #0
    9ebe:	d0fb      	beq.n	9eb8 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    9ec0:	6863      	ldr	r3, [r4, #4]
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d0f9      	beq.n	9eba <usbd_sof_cb+0xa>
			sof->cb();
    9ec6:	4798      	blx	r3
    9ec8:	e7f7      	b.n	9eba <usbd_sof_cb+0xa>
    9eca:	bf00      	nop
    9ecc:	20001240 	.word	0x20001240

00009ed0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    9ed0:	b510      	push	{r4, lr}
    9ed2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    9ed4:	b119      	cbz	r1, 9ede <usbdc_cb_ctl_done+0xe>
    9ed6:	2901      	cmp	r1, #1
    9ed8:	d026      	beq.n	9f28 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    9eda:	2000      	movs	r0, #0
    9edc:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    9ede:	7813      	ldrb	r3, [r2, #0]
    9ee0:	2b00      	cmp	r3, #0
    9ee2:	d1fa      	bne.n	9eda <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    9ee4:	7853      	ldrb	r3, [r2, #1]
    9ee6:	2b05      	cmp	r3, #5
    9ee8:	d00f      	beq.n	9f0a <usbdc_cb_ctl_done+0x3a>
    9eea:	2b09      	cmp	r3, #9
    9eec:	d1f5      	bne.n	9eda <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    9eee:	8852      	ldrh	r2, [r2, #2]
    9ef0:	4b10      	ldr	r3, [pc, #64]	; (9f34 <usbdc_cb_ctl_done+0x64>)
    9ef2:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    9ef4:	8863      	ldrh	r3, [r4, #2]
    9ef6:	2b00      	cmp	r3, #0
    9ef8:	bf14      	ite	ne
    9efa:	2104      	movne	r1, #4
    9efc:	2103      	moveq	r1, #3
    9efe:	4b0d      	ldr	r3, [pc, #52]	; (9f34 <usbdc_cb_ctl_done+0x64>)
    9f00:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    9f02:	2001      	movs	r0, #1
    9f04:	4b0c      	ldr	r3, [pc, #48]	; (9f38 <usbdc_cb_ctl_done+0x68>)
    9f06:	4798      	blx	r3
    9f08:	e7e7      	b.n	9eda <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    9f0a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    9f0c:	b2c0      	uxtb	r0, r0
    9f0e:	4b0b      	ldr	r3, [pc, #44]	; (9f3c <usbdc_cb_ctl_done+0x6c>)
    9f10:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    9f12:	8863      	ldrh	r3, [r4, #2]
    9f14:	2b00      	cmp	r3, #0
    9f16:	bf14      	ite	ne
    9f18:	2103      	movne	r1, #3
    9f1a:	2102      	moveq	r1, #2
    9f1c:	4b05      	ldr	r3, [pc, #20]	; (9f34 <usbdc_cb_ctl_done+0x64>)
    9f1e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    9f20:	2001      	movs	r0, #1
    9f22:	4b05      	ldr	r3, [pc, #20]	; (9f38 <usbdc_cb_ctl_done+0x68>)
    9f24:	4798      	blx	r3
    9f26:	e7d8      	b.n	9eda <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    9f28:	2201      	movs	r2, #1
    9f2a:	4621      	mov	r1, r4
    9f2c:	2000      	movs	r0, #0
    9f2e:	4b04      	ldr	r3, [pc, #16]	; (9f40 <usbdc_cb_ctl_done+0x70>)
    9f30:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    9f32:	e7d2      	b.n	9eda <usbdc_cb_ctl_done+0xa>
    9f34:	20001240 	.word	0x20001240
    9f38:	00009e49 	.word	0x00009e49
    9f3c:	00004f81 	.word	0x00004f81
    9f40:	00009e71 	.word	0x00009e71

00009f44 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    9f44:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    9f46:	4b0d      	ldr	r3, [pc, #52]	; (9f7c <usbdc_reset+0x38>)
    9f48:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    9f4a:	4d0d      	ldr	r5, [pc, #52]	; (9f80 <usbdc_reset+0x3c>)
    9f4c:	2602      	movs	r6, #2
    9f4e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    9f50:	2400      	movs	r4, #0
    9f52:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    9f54:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    9f56:	4620      	mov	r0, r4
    9f58:	4b0a      	ldr	r3, [pc, #40]	; (9f84 <usbdc_reset+0x40>)
    9f5a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    9f5c:	7f28      	ldrb	r0, [r5, #28]
    9f5e:	4b0a      	ldr	r3, [pc, #40]	; (9f88 <usbdc_reset+0x44>)
    9f60:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    9f62:	4a0a      	ldr	r2, [pc, #40]	; (9f8c <usbdc_reset+0x48>)
    9f64:	4621      	mov	r1, r4
    9f66:	4620      	mov	r0, r4
    9f68:	4d09      	ldr	r5, [pc, #36]	; (9f90 <usbdc_reset+0x4c>)
    9f6a:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    9f6c:	4a09      	ldr	r2, [pc, #36]	; (9f94 <usbdc_reset+0x50>)
    9f6e:	4631      	mov	r1, r6
    9f70:	4620      	mov	r0, r4
    9f72:	47a8      	blx	r5
	usb_d_ep_enable(0);
    9f74:	4620      	mov	r0, r4
    9f76:	4b08      	ldr	r3, [pc, #32]	; (9f98 <usbdc_reset+0x54>)
    9f78:	4798      	blx	r3
    9f7a:	bd70      	pop	{r4, r5, r6, pc}
    9f7c:	00009e25 	.word	0x00009e25
    9f80:	20001240 	.word	0x20001240
    9f84:	00004ff5 	.word	0x00004ff5
    9f88:	00004fe1 	.word	0x00004fe1
    9f8c:	00009fdd 	.word	0x00009fdd
    9f90:	000051f5 	.word	0x000051f5
    9f94:	00009ed1 	.word	0x00009ed1
    9f98:	00005021 	.word	0x00005021

00009f9c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    9f9c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    9f9e:	b110      	cbz	r0, 9fa6 <usbd_event_cb+0xa>
    9fa0:	2801      	cmp	r0, #1
    9fa2:	d004      	beq.n	9fae <usbd_event_cb+0x12>
    9fa4:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    9fa6:	2000      	movs	r0, #0
    9fa8:	4b02      	ldr	r3, [pc, #8]	; (9fb4 <usbd_event_cb+0x18>)
    9faa:	4798      	blx	r3
		break;
    9fac:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    9fae:	4b02      	ldr	r3, [pc, #8]	; (9fb8 <usbd_event_cb+0x1c>)
    9fb0:	4798      	blx	r3
    9fb2:	bd08      	pop	{r3, pc}
    9fb4:	00009e49 	.word	0x00009e49
    9fb8:	00009f45 	.word	0x00009f45

00009fbc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    9fbc:	b500      	push	{lr}
    9fbe:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    9fc0:	9101      	str	r1, [sp, #4]
    9fc2:	9202      	str	r2, [sp, #8]
    9fc4:	f88d 000c 	strb.w	r0, [sp, #12]
    9fc8:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    9fcc:	a801      	add	r0, sp, #4
    9fce:	4b02      	ldr	r3, [pc, #8]	; (9fd8 <usbdc_xfer+0x1c>)
    9fd0:	4798      	blx	r3
}
    9fd2:	b005      	add	sp, #20
    9fd4:	f85d fb04 	ldr.w	pc, [sp], #4
    9fd8:	0000506d 	.word	0x0000506d

00009fdc <usbdc_cb_ctl_req>:
{
    9fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9fe0:	b083      	sub	sp, #12
    9fe2:	4605      	mov	r5, r0
    9fe4:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    9fe6:	2200      	movs	r2, #0
    9fe8:	4b9b      	ldr	r3, [pc, #620]	; (a258 <usbdc_cb_ctl_req+0x27c>)
    9fea:	4798      	blx	r3
    9fec:	f1b0 3fff 	cmp.w	r0, #4294967295
    9ff0:	d00b      	beq.n	a00a <usbdc_cb_ctl_req+0x2e>
    9ff2:	2801      	cmp	r0, #1
    9ff4:	f000 81e3 	beq.w	a3be <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    9ff8:	7823      	ldrb	r3, [r4, #0]
    9ffa:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    9ffe:	d008      	beq.n	a012 <usbdc_cb_ctl_req+0x36>
    a000:	2a80      	cmp	r2, #128	; 0x80
    a002:	f000 80f4 	beq.w	a1ee <usbdc_cb_ctl_req+0x212>
		return false;
    a006:	2000      	movs	r0, #0
    a008:	e000      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return false;
    a00a:	2000      	movs	r0, #0
}
    a00c:	b003      	add	sp, #12
    a00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    a012:	7862      	ldrb	r2, [r4, #1]
    a014:	3a01      	subs	r2, #1
    a016:	2a0a      	cmp	r2, #10
    a018:	f200 81d3 	bhi.w	a3c2 <usbdc_cb_ctl_req+0x3e6>
    a01c:	e8df f012 	tbh	[pc, r2, lsl #1]
    a020:	01d10060 	.word	0x01d10060
    a024:	01d10076 	.word	0x01d10076
    a028:	01d1000b 	.word	0x01d1000b
    a02c:	01d101d1 	.word	0x01d101d1
    a030:	01d10015 	.word	0x01d10015
    a034:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a036:	2301      	movs	r3, #1
    a038:	2200      	movs	r2, #0
    a03a:	4611      	mov	r1, r2
    a03c:	4628      	mov	r0, r5
    a03e:	4c87      	ldr	r4, [pc, #540]	; (a25c <usbdc_cb_ctl_req+0x280>)
    a040:	47a0      	blx	r4
    a042:	fab0 f080 	clz	r0, r0
    a046:	0940      	lsrs	r0, r0, #5
    a048:	e7e0      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    a04a:	8862      	ldrh	r2, [r4, #2]
    a04c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    a04e:	b1ca      	cbz	r2, a084 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    a050:	4b83      	ldr	r3, [pc, #524]	; (a260 <usbdc_cb_ctl_req+0x284>)
    a052:	681b      	ldr	r3, [r3, #0]
    a054:	6859      	ldr	r1, [r3, #4]
    a056:	6818      	ldr	r0, [r3, #0]
    a058:	4b82      	ldr	r3, [pc, #520]	; (a264 <usbdc_cb_ctl_req+0x288>)
    a05a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a05c:	2800      	cmp	r0, #0
    a05e:	f000 81be 	beq.w	a3de <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    a062:	78c2      	ldrb	r2, [r0, #3]
    a064:	7881      	ldrb	r1, [r0, #2]
    a066:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    a06a:	fa10 f181 	uxtah	r1, r0, r1
    a06e:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a070:	2204      	movs	r2, #4
    a072:	4b7d      	ldr	r3, [pc, #500]	; (a268 <usbdc_cb_ctl_req+0x28c>)
    a074:	4798      	blx	r3
    a076:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a078:	b130      	cbz	r0, a088 <usbdc_cb_ctl_req+0xac>
    a07a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a07c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; a260 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a080:	4f79      	ldr	r7, [pc, #484]	; (a268 <usbdc_cb_ctl_req+0x28c>)
    a082:	e018      	b.n	a0b6 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    a084:	4b79      	ldr	r3, [pc, #484]	; (a26c <usbdc_cb_ctl_req+0x290>)
    a086:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a088:	2301      	movs	r3, #1
    a08a:	2200      	movs	r2, #0
    a08c:	4611      	mov	r1, r2
    a08e:	4628      	mov	r0, r5
    a090:	4c72      	ldr	r4, [pc, #456]	; (a25c <usbdc_cb_ctl_req+0x280>)
    a092:	47a0      	blx	r4
    a094:	fab0 f080 	clz	r0, r0
    a098:	0940      	lsrs	r0, r0, #5
    a09a:	e7b7      	b.n	a00c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    a09c:	464c      	mov	r4, r9
    a09e:	e000      	b.n	a0a2 <usbdc_cb_ctl_req+0xc6>
    a0a0:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    a0a2:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a0a4:	7803      	ldrb	r3, [r0, #0]
    a0a6:	4418      	add	r0, r3
    a0a8:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a0aa:	2204      	movs	r2, #4
    a0ac:	9901      	ldr	r1, [sp, #4]
    a0ae:	47b8      	blx	r7
    a0b0:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a0b2:	2800      	cmp	r0, #0
    a0b4:	d0e8      	beq.n	a088 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    a0b6:	f890 9002 	ldrb.w	r9, [r0, #2]
    a0ba:	45a1      	cmp	r9, r4
    a0bc:	d0f1      	beq.n	a0a2 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a0be:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    a0c2:	2c00      	cmp	r4, #0
    a0c4:	d0ea      	beq.n	a09c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    a0c6:	2600      	movs	r6, #0
    a0c8:	6863      	ldr	r3, [r4, #4]
    a0ca:	466a      	mov	r2, sp
    a0cc:	4631      	mov	r1, r6
    a0ce:	4620      	mov	r0, r4
    a0d0:	4798      	blx	r3
    a0d2:	2800      	cmp	r0, #0
    a0d4:	d0e4      	beq.n	a0a0 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    a0d6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    a0d8:	2c00      	cmp	r4, #0
    a0da:	d1f5      	bne.n	a0c8 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    a0dc:	464c      	mov	r4, r9
    a0de:	e7e0      	b.n	a0a2 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a0e0:	f003 031f 	and.w	r3, r3, #31
    a0e4:	2b02      	cmp	r3, #2
    a0e6:	f040 816e 	bne.w	a3c6 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    a0ea:	88e3      	ldrh	r3, [r4, #6]
    a0ec:	b10b      	cbz	r3, a0f2 <usbdc_cb_ctl_req+0x116>
			return false;
    a0ee:	2000      	movs	r0, #0
    a0f0:	e78c      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    a0f2:	88a0      	ldrh	r0, [r4, #4]
    a0f4:	2100      	movs	r1, #0
    a0f6:	b2c0      	uxtb	r0, r0
    a0f8:	4b5d      	ldr	r3, [pc, #372]	; (a270 <usbdc_cb_ctl_req+0x294>)
    a0fa:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a0fc:	2301      	movs	r3, #1
    a0fe:	2200      	movs	r2, #0
    a100:	4611      	mov	r1, r2
    a102:	4628      	mov	r0, r5
    a104:	4c55      	ldr	r4, [pc, #340]	; (a25c <usbdc_cb_ctl_req+0x280>)
    a106:	47a0      	blx	r4
		return true;
    a108:	2001      	movs	r0, #1
    a10a:	e77f      	b.n	a00c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a10c:	f003 031f 	and.w	r3, r3, #31
    a110:	2b02      	cmp	r3, #2
    a112:	f040 815a 	bne.w	a3ca <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    a116:	88e3      	ldrh	r3, [r4, #6]
    a118:	b10b      	cbz	r3, a11e <usbdc_cb_ctl_req+0x142>
			return false;
    a11a:	2000      	movs	r0, #0
    a11c:	e776      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    a11e:	88a0      	ldrh	r0, [r4, #4]
    a120:	2101      	movs	r1, #1
    a122:	b2c0      	uxtb	r0, r0
    a124:	4b52      	ldr	r3, [pc, #328]	; (a270 <usbdc_cb_ctl_req+0x294>)
    a126:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a128:	2301      	movs	r3, #1
    a12a:	2200      	movs	r2, #0
    a12c:	4611      	mov	r1, r2
    a12e:	4628      	mov	r0, r5
    a130:	4c4a      	ldr	r4, [pc, #296]	; (a25c <usbdc_cb_ctl_req+0x280>)
    a132:	47a0      	blx	r4
		return true;
    a134:	2001      	movs	r0, #1
    a136:	e769      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    a138:	8866      	ldrh	r6, [r4, #2]
    a13a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a13c:	4a48      	ldr	r2, [pc, #288]	; (a260 <usbdc_cb_ctl_req+0x284>)
    a13e:	6813      	ldr	r3, [r2, #0]
    a140:	7ed2      	ldrb	r2, [r2, #27]
    a142:	6859      	ldr	r1, [r3, #4]
    a144:	6818      	ldr	r0, [r3, #0]
    a146:	4b47      	ldr	r3, [pc, #284]	; (a264 <usbdc_cb_ctl_req+0x288>)
    a148:	4798      	blx	r3
	if (NULL == ifc) {
    a14a:	2800      	cmp	r0, #0
    a14c:	d045      	beq.n	a1da <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    a14e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    a150:	78c2      	ldrb	r2, [r0, #3]
    a152:	7881      	ldrb	r1, [r0, #2]
    a154:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    a158:	fa10 f181 	uxtah	r1, r0, r1
    a15c:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    a15e:	2204      	movs	r2, #4
    a160:	4b41      	ldr	r3, [pc, #260]	; (a268 <usbdc_cb_ctl_req+0x28c>)
    a162:	4798      	blx	r3
    a164:	4603      	mov	r3, r0
    a166:	2800      	cmp	r0, #0
    a168:	d039      	beq.n	a1de <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a16a:	2704      	movs	r7, #4
    a16c:	4d3e      	ldr	r5, [pc, #248]	; (a268 <usbdc_cb_ctl_req+0x28c>)
    a16e:	e008      	b.n	a182 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    a170:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a172:	7803      	ldrb	r3, [r0, #0]
    a174:	4418      	add	r0, r3
    a176:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a178:	463a      	mov	r2, r7
    a17a:	9901      	ldr	r1, [sp, #4]
    a17c:	47a8      	blx	r5
		if (NULL == ifc) {
    a17e:	4603      	mov	r3, r0
    a180:	b378      	cbz	r0, a1e2 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    a182:	789a      	ldrb	r2, [r3, #2]
    a184:	42a2      	cmp	r2, r4
    a186:	d1f3      	bne.n	a170 <usbdc_cb_ctl_req+0x194>
    a188:	78da      	ldrb	r2, [r3, #3]
    a18a:	42b2      	cmp	r2, r6
    a18c:	d1f0      	bne.n	a170 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    a18e:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    a190:	4b33      	ldr	r3, [pc, #204]	; (a260 <usbdc_cb_ctl_req+0x284>)
    a192:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    a194:	b33d      	cbz	r5, a1e6 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    a196:	2701      	movs	r7, #1
    a198:	686b      	ldr	r3, [r5, #4]
    a19a:	466a      	mov	r2, sp
    a19c:	4639      	mov	r1, r7
    a19e:	4628      	mov	r0, r5
    a1a0:	4798      	blx	r3
    a1a2:	b120      	cbz	r0, a1ae <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    a1a4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a1a6:	2d00      	cmp	r5, #0
    a1a8:	d1f6      	bne.n	a198 <usbdc_cb_ctl_req+0x1bc>
	return false;
    a1aa:	2000      	movs	r0, #0
    a1ac:	e72e      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    a1ae:	686b      	ldr	r3, [r5, #4]
    a1b0:	466a      	mov	r2, sp
    a1b2:	2100      	movs	r1, #0
    a1b4:	4628      	mov	r0, r5
    a1b6:	4798      	blx	r3
    a1b8:	b9b8      	cbnz	r0, a1ea <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    a1ba:	b136      	cbz	r6, a1ca <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    a1bc:	4a28      	ldr	r2, [pc, #160]	; (a260 <usbdc_cb_ctl_req+0x284>)
    a1be:	2301      	movs	r3, #1
    a1c0:	fa03 f404 	lsl.w	r4, r3, r4
    a1c4:	7f53      	ldrb	r3, [r2, #29]
    a1c6:	4323      	orrs	r3, r4
    a1c8:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    a1ca:	2300      	movs	r3, #0
    a1cc:	461a      	mov	r2, r3
    a1ce:	4619      	mov	r1, r3
    a1d0:	4618      	mov	r0, r3
    a1d2:	4c22      	ldr	r4, [pc, #136]	; (a25c <usbdc_cb_ctl_req+0x280>)
    a1d4:	47a0      	blx	r4
			return true;
    a1d6:	2001      	movs	r0, #1
    a1d8:	e718      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return false;
    a1da:	2000      	movs	r0, #0
    a1dc:	e716      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return false;
    a1de:	2000      	movs	r0, #0
    a1e0:	e714      	b.n	a00c <usbdc_cb_ctl_req+0x30>
			return false;
    a1e2:	2000      	movs	r0, #0
    a1e4:	e712      	b.n	a00c <usbdc_cb_ctl_req+0x30>
	return false;
    a1e6:	2000      	movs	r0, #0
    a1e8:	e710      	b.n	a00c <usbdc_cb_ctl_req+0x30>
			return false;
    a1ea:	2000      	movs	r0, #0
    a1ec:	e70e      	b.n	a00c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    a1ee:	7862      	ldrb	r2, [r4, #1]
    a1f0:	2a0a      	cmp	r2, #10
    a1f2:	f200 80ec 	bhi.w	a3ce <usbdc_cb_ctl_req+0x3f2>
    a1f6:	e8df f012 	tbh	[pc, r2, lsl #1]
    a1fa:	008e      	.short	0x008e
    a1fc:	00ea00ea 	.word	0x00ea00ea
    a200:	00ea00ea 	.word	0x00ea00ea
    a204:	000b00ea 	.word	0x000b00ea
    a208:	008200ea 	.word	0x008200ea
    a20c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    a210:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    a212:	0a13      	lsrs	r3, r2, #8
    a214:	2b02      	cmp	r3, #2
    a216:	d02d      	beq.n	a274 <usbdc_cb_ctl_req+0x298>
    a218:	2b03      	cmp	r3, #3
    a21a:	d050      	beq.n	a2be <usbdc_cb_ctl_req+0x2e2>
    a21c:	2b01      	cmp	r3, #1
    a21e:	d001      	beq.n	a224 <usbdc_cb_ctl_req+0x248>
	return false;
    a220:	2000      	movs	r0, #0
    a222:	e6f3      	b.n	a00c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    a224:	88e2      	ldrh	r2, [r4, #6]
    a226:	2a12      	cmp	r2, #18
    a228:	bf28      	it	cs
    a22a:	2212      	movcs	r2, #18
    a22c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    a22e:	4b0c      	ldr	r3, [pc, #48]	; (a260 <usbdc_cb_ctl_req+0x284>)
    a230:	681b      	ldr	r3, [r3, #0]
    a232:	2201      	movs	r2, #1
    a234:	6859      	ldr	r1, [r3, #4]
    a236:	6818      	ldr	r0, [r3, #0]
    a238:	4b0b      	ldr	r3, [pc, #44]	; (a268 <usbdc_cb_ctl_req+0x28c>)
    a23a:	4798      	blx	r3
	if (!dev_desc) {
    a23c:	4601      	mov	r1, r0
    a23e:	2800      	cmp	r0, #0
    a240:	f000 80c7 	beq.w	a3d2 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    a244:	2300      	movs	r3, #0
    a246:	4622      	mov	r2, r4
    a248:	4628      	mov	r0, r5
    a24a:	4c04      	ldr	r4, [pc, #16]	; (a25c <usbdc_cb_ctl_req+0x280>)
    a24c:	47a0      	blx	r4
    a24e:	fab0 f080 	clz	r0, r0
    a252:	0940      	lsrs	r0, r0, #5
    a254:	e6da      	b.n	a00c <usbdc_cb_ctl_req+0x30>
    a256:	bf00      	nop
    a258:	00009e71 	.word	0x00009e71
    a25c:	00009fbd 	.word	0x00009fbd
    a260:	20001240 	.word	0x20001240
    a264:	0000a581 	.word	0x0000a581
    a268:	0000a501 	.word	0x0000a501
    a26c:	00009e25 	.word	0x00009e25
    a270:	0000518d 	.word	0x0000518d
	uint16_t length   = req->wLength;
    a274:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a276:	4b5b      	ldr	r3, [pc, #364]	; (a3e4 <usbdc_cb_ctl_req+0x408>)
    a278:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    a27a:	681b      	ldr	r3, [r3, #0]
    a27c:	3201      	adds	r2, #1
    a27e:	b2d2      	uxtb	r2, r2
    a280:	6859      	ldr	r1, [r3, #4]
    a282:	6818      	ldr	r0, [r3, #0]
    a284:	4b58      	ldr	r3, [pc, #352]	; (a3e8 <usbdc_cb_ctl_req+0x40c>)
    a286:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a288:	4601      	mov	r1, r0
    a28a:	2800      	cmp	r0, #0
    a28c:	f000 80a3 	beq.w	a3d6 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    a290:	78c3      	ldrb	r3, [r0, #3]
    a292:	7882      	ldrb	r2, [r0, #2]
    a294:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    a298:	b292      	uxth	r2, r2
	if (length <= total_len) {
    a29a:	4294      	cmp	r4, r2
    a29c:	d90d      	bls.n	a2ba <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a29e:	3e01      	subs	r6, #1
    a2a0:	4226      	tst	r6, r4
    a2a2:	bf0c      	ite	eq
    a2a4:	2301      	moveq	r3, #1
    a2a6:	2300      	movne	r3, #0
		length = total_len;
    a2a8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    a2aa:	4622      	mov	r2, r4
    a2ac:	4628      	mov	r0, r5
    a2ae:	4c4f      	ldr	r4, [pc, #316]	; (a3ec <usbdc_cb_ctl_req+0x410>)
    a2b0:	47a0      	blx	r4
    a2b2:	fab0 f080 	clz	r0, r0
    a2b6:	0940      	lsrs	r0, r0, #5
    a2b8:	e6a8      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a2ba:	2300      	movs	r3, #0
    a2bc:	e7f5      	b.n	a2aa <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    a2be:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a2c0:	4b48      	ldr	r3, [pc, #288]	; (a3e4 <usbdc_cb_ctl_req+0x408>)
    a2c2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    a2c4:	681b      	ldr	r3, [r3, #0]
    a2c6:	b2d2      	uxtb	r2, r2
    a2c8:	6859      	ldr	r1, [r3, #4]
    a2ca:	6818      	ldr	r0, [r3, #0]
    a2cc:	4b48      	ldr	r3, [pc, #288]	; (a3f0 <usbdc_cb_ctl_req+0x414>)
    a2ce:	4798      	blx	r3
	if (NULL == str_desc) {
    a2d0:	4601      	mov	r1, r0
    a2d2:	2800      	cmp	r0, #0
    a2d4:	f000 8081 	beq.w	a3da <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    a2d8:	7802      	ldrb	r2, [r0, #0]
    a2da:	4294      	cmp	r4, r2
    a2dc:	d90d      	bls.n	a2fa <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a2de:	3e01      	subs	r6, #1
    a2e0:	4226      	tst	r6, r4
    a2e2:	bf0c      	ite	eq
    a2e4:	2301      	moveq	r3, #1
    a2e6:	2300      	movne	r3, #0
		length = str_desc[0];
    a2e8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    a2ea:	4622      	mov	r2, r4
    a2ec:	4628      	mov	r0, r5
    a2ee:	4c3f      	ldr	r4, [pc, #252]	; (a3ec <usbdc_cb_ctl_req+0x410>)
    a2f0:	47a0      	blx	r4
    a2f2:	fab0 f080 	clz	r0, r0
    a2f6:	0940      	lsrs	r0, r0, #5
    a2f8:	e688      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a2fa:	2300      	movs	r3, #0
    a2fc:	e7f5      	b.n	a2ea <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    a2fe:	4939      	ldr	r1, [pc, #228]	; (a3e4 <usbdc_cb_ctl_req+0x408>)
    a300:	694b      	ldr	r3, [r1, #20]
    a302:	7eca      	ldrb	r2, [r1, #27]
    a304:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    a306:	2300      	movs	r3, #0
    a308:	2201      	movs	r2, #1
    a30a:	6949      	ldr	r1, [r1, #20]
    a30c:	4628      	mov	r0, r5
    a30e:	4c37      	ldr	r4, [pc, #220]	; (a3ec <usbdc_cb_ctl_req+0x410>)
    a310:	47a0      	blx	r4
		return true;
    a312:	2001      	movs	r0, #1
    a314:	e67a      	b.n	a00c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a316:	f003 031f 	and.w	r3, r3, #31
    a31a:	2b01      	cmp	r3, #1
    a31c:	d903      	bls.n	a326 <usbdc_cb_ctl_req+0x34a>
    a31e:	2b02      	cmp	r3, #2
    a320:	d010      	beq.n	a344 <usbdc_cb_ctl_req+0x368>
		return false;
    a322:	2000      	movs	r0, #0
    a324:	e672      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		st = 0;
    a326:	2300      	movs	r3, #0
    a328:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    a32a:	492e      	ldr	r1, [pc, #184]	; (a3e4 <usbdc_cb_ctl_req+0x408>)
    a32c:	694b      	ldr	r3, [r1, #20]
    a32e:	f8bd 2000 	ldrh.w	r2, [sp]
    a332:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    a334:	2300      	movs	r3, #0
    a336:	2202      	movs	r2, #2
    a338:	6949      	ldr	r1, [r1, #20]
    a33a:	4628      	mov	r0, r5
    a33c:	4c2b      	ldr	r4, [pc, #172]	; (a3ec <usbdc_cb_ctl_req+0x410>)
    a33e:	47a0      	blx	r4
	return true;
    a340:	2001      	movs	r0, #1
    a342:	e663      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    a344:	88a0      	ldrh	r0, [r4, #4]
    a346:	2102      	movs	r1, #2
    a348:	b2c0      	uxtb	r0, r0
    a34a:	4b2a      	ldr	r3, [pc, #168]	; (a3f4 <usbdc_cb_ctl_req+0x418>)
    a34c:	4798      	blx	r3
		if (st < 0) {
    a34e:	2800      	cmp	r0, #0
    a350:	db03      	blt.n	a35a <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    a352:	f000 0001 	and.w	r0, r0, #1
    a356:	9000      	str	r0, [sp, #0]
    a358:	e7e7      	b.n	a32a <usbdc_cb_ctl_req+0x34e>
			return false;
    a35a:	2000      	movs	r0, #0
    a35c:	e656      	b.n	a00c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    a35e:	4b21      	ldr	r3, [pc, #132]	; (a3e4 <usbdc_cb_ctl_req+0x408>)
    a360:	7f5b      	ldrb	r3, [r3, #29]
    a362:	88a2      	ldrh	r2, [r4, #4]
    a364:	4113      	asrs	r3, r2
    a366:	f013 0f01 	tst.w	r3, #1
    a36a:	d012      	beq.n	a392 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a36c:	4b1d      	ldr	r3, [pc, #116]	; (a3e4 <usbdc_cb_ctl_req+0x408>)
    a36e:	691d      	ldr	r5, [r3, #16]
	return false;
    a370:	2000      	movs	r0, #0
	while (NULL != func) {
    a372:	2d00      	cmp	r5, #0
    a374:	f43f ae4a 	beq.w	a00c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    a378:	2602      	movs	r6, #2
    a37a:	686b      	ldr	r3, [r5, #4]
    a37c:	4622      	mov	r2, r4
    a37e:	4631      	mov	r1, r6
    a380:	4628      	mov	r0, r5
    a382:	4798      	blx	r3
    a384:	2800      	cmp	r0, #0
    a386:	da0f      	bge.n	a3a8 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    a388:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a38a:	2d00      	cmp	r5, #0
    a38c:	d1f5      	bne.n	a37a <usbdc_cb_ctl_req+0x39e>
	return false;
    a38e:	2000      	movs	r0, #0
    a390:	e63c      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    a392:	4914      	ldr	r1, [pc, #80]	; (a3e4 <usbdc_cb_ctl_req+0x408>)
    a394:	694b      	ldr	r3, [r1, #20]
    a396:	2000      	movs	r0, #0
    a398:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a39a:	4603      	mov	r3, r0
    a39c:	2201      	movs	r2, #1
    a39e:	6949      	ldr	r1, [r1, #20]
    a3a0:	4c12      	ldr	r4, [pc, #72]	; (a3ec <usbdc_cb_ctl_req+0x410>)
    a3a2:	47a0      	blx	r4
		return true;
    a3a4:	2001      	movs	r0, #1
    a3a6:	e631      	b.n	a00c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    a3a8:	490e      	ldr	r1, [pc, #56]	; (a3e4 <usbdc_cb_ctl_req+0x408>)
    a3aa:	694b      	ldr	r3, [r1, #20]
    a3ac:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a3ae:	2300      	movs	r3, #0
    a3b0:	2201      	movs	r2, #1
    a3b2:	6949      	ldr	r1, [r1, #20]
    a3b4:	4618      	mov	r0, r3
    a3b6:	4c0d      	ldr	r4, [pc, #52]	; (a3ec <usbdc_cb_ctl_req+0x410>)
    a3b8:	47a0      	blx	r4
			return true;
    a3ba:	2001      	movs	r0, #1
    a3bc:	e626      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return true;
    a3be:	2001      	movs	r0, #1
    a3c0:	e624      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return false;
    a3c2:	2000      	movs	r0, #0
    a3c4:	e622      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return false;
    a3c6:	2000      	movs	r0, #0
    a3c8:	e620      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return false;
    a3ca:	2000      	movs	r0, #0
    a3cc:	e61e      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return false;
    a3ce:	2000      	movs	r0, #0
    a3d0:	e61c      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return false;
    a3d2:	2000      	movs	r0, #0
    a3d4:	e61a      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return false;
    a3d6:	2000      	movs	r0, #0
    a3d8:	e618      	b.n	a00c <usbdc_cb_ctl_req+0x30>
		return false;
    a3da:	2000      	movs	r0, #0
    a3dc:	e616      	b.n	a00c <usbdc_cb_ctl_req+0x30>
			return false;
    a3de:	2000      	movs	r0, #0
    a3e0:	e614      	b.n	a00c <usbdc_cb_ctl_req+0x30>
    a3e2:	bf00      	nop
    a3e4:	20001240 	.word	0x20001240
    a3e8:	0000a581 	.word	0x0000a581
    a3ec:	00009fbd 	.word	0x00009fbd
    a3f0:	0000a5e9 	.word	0x0000a5e9
    a3f4:	0000518d 	.word	0x0000518d

0000a3f8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    a3f8:	b508      	push	{r3, lr}
	switch (type) {
    a3fa:	2801      	cmp	r0, #1
    a3fc:	d007      	beq.n	a40e <usbdc_register_handler+0x16>
    a3fe:	b110      	cbz	r0, a406 <usbdc_register_handler+0xe>
    a400:	2802      	cmp	r0, #2
    a402:	d008      	beq.n	a416 <usbdc_register_handler+0x1e>
    a404:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    a406:	4806      	ldr	r0, [pc, #24]	; (a420 <usbdc_register_handler+0x28>)
    a408:	4b06      	ldr	r3, [pc, #24]	; (a424 <usbdc_register_handler+0x2c>)
    a40a:	4798      	blx	r3
		break;
    a40c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    a40e:	4806      	ldr	r0, [pc, #24]	; (a428 <usbdc_register_handler+0x30>)
    a410:	4b04      	ldr	r3, [pc, #16]	; (a424 <usbdc_register_handler+0x2c>)
    a412:	4798      	blx	r3
		break;
    a414:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    a416:	4805      	ldr	r0, [pc, #20]	; (a42c <usbdc_register_handler+0x34>)
    a418:	4b02      	ldr	r3, [pc, #8]	; (a424 <usbdc_register_handler+0x2c>)
    a41a:	4798      	blx	r3
    a41c:	bd08      	pop	{r3, pc}
    a41e:	bf00      	nop
    a420:	20001244 	.word	0x20001244
    a424:	0000529d 	.word	0x0000529d
    a428:	20001248 	.word	0x20001248
    a42c:	2000124c 	.word	0x2000124c

0000a430 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    a430:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    a432:	4605      	mov	r5, r0
    a434:	f240 3255 	movw	r2, #853	; 0x355
    a438:	490c      	ldr	r1, [pc, #48]	; (a46c <usbdc_init+0x3c>)
    a43a:	3000      	adds	r0, #0
    a43c:	bf18      	it	ne
    a43e:	2001      	movne	r0, #1
    a440:	4b0b      	ldr	r3, [pc, #44]	; (a470 <usbdc_init+0x40>)
    a442:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    a444:	4b0b      	ldr	r3, [pc, #44]	; (a474 <usbdc_init+0x44>)
    a446:	4798      	blx	r3
	if (rc < 0) {
    a448:	2800      	cmp	r0, #0
    a44a:	db0e      	blt.n	a46a <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    a44c:	4c0a      	ldr	r4, [pc, #40]	; (a478 <usbdc_init+0x48>)
    a44e:	2220      	movs	r2, #32
    a450:	2100      	movs	r1, #0
    a452:	4620      	mov	r0, r4
    a454:	4b09      	ldr	r3, [pc, #36]	; (a47c <usbdc_init+0x4c>)
    a456:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    a458:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    a45a:	4909      	ldr	r1, [pc, #36]	; (a480 <usbdc_init+0x50>)
    a45c:	2000      	movs	r0, #0
    a45e:	4c09      	ldr	r4, [pc, #36]	; (a484 <usbdc_init+0x54>)
    a460:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    a462:	4909      	ldr	r1, [pc, #36]	; (a488 <usbdc_init+0x58>)
    a464:	2001      	movs	r0, #1
    a466:	47a0      	blx	r4

	return 0;
    a468:	2000      	movs	r0, #0
}
    a46a:	bd38      	pop	{r3, r4, r5, pc}
    a46c:	0000c01c 	.word	0x0000c01c
    a470:	00005241 	.word	0x00005241
    a474:	00004ef5 	.word	0x00004ef5
    a478:	20001240 	.word	0x20001240
    a47c:	0000afcf 	.word	0x0000afcf
    a480:	00009eb1 	.word	0x00009eb1
    a484:	00004f5d 	.word	0x00004f5d
    a488:	00009f9d 	.word	0x00009f9d

0000a48c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    a48c:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    a48e:	4601      	mov	r1, r0
    a490:	4801      	ldr	r0, [pc, #4]	; (a498 <usbdc_register_function+0xc>)
    a492:	4b02      	ldr	r3, [pc, #8]	; (a49c <usbdc_register_function+0x10>)
    a494:	4798      	blx	r3
    a496:	bd08      	pop	{r3, pc}
    a498:	20001250 	.word	0x20001250
    a49c:	0000529d 	.word	0x0000529d

0000a4a0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    a4a0:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    a4a2:	4b0a      	ldr	r3, [pc, #40]	; (a4cc <usbdc_start+0x2c>)
    a4a4:	7e9b      	ldrb	r3, [r3, #26]
    a4a6:	b95b      	cbnz	r3, a4c0 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    a4a8:	b168      	cbz	r0, a4c6 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    a4aa:	4b08      	ldr	r3, [pc, #32]	; (a4cc <usbdc_start+0x2c>)
    a4ac:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    a4ae:	6802      	ldr	r2, [r0, #0]
    a4b0:	79d2      	ldrb	r2, [r2, #7]
    a4b2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    a4b4:	2201      	movs	r2, #1
    a4b6:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    a4b8:	4b05      	ldr	r3, [pc, #20]	; (a4d0 <usbdc_start+0x30>)
    a4ba:	4798      	blx	r3
	return ERR_NONE;
    a4bc:	2000      	movs	r0, #0
    a4be:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    a4c0:	f06f 0003 	mvn.w	r0, #3
    a4c4:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    a4c6:	f06f 0008 	mvn.w	r0, #8
}
    a4ca:	bd08      	pop	{r3, pc}
    a4cc:	20001240 	.word	0x20001240
    a4d0:	00004f69 	.word	0x00004f69

0000a4d4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    a4d4:	b508      	push	{r3, lr}
	usb_d_attach();
    a4d6:	4b01      	ldr	r3, [pc, #4]	; (a4dc <usbdc_attach+0x8>)
    a4d8:	4798      	blx	r3
    a4da:	bd08      	pop	{r3, pc}
    a4dc:	00004f75 	.word	0x00004f75

0000a4e0 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    a4e0:	4b01      	ldr	r3, [pc, #4]	; (a4e8 <usbdc_get_ctrl_buffer+0x8>)
    a4e2:	6958      	ldr	r0, [r3, #20]
    a4e4:	4770      	bx	lr
    a4e6:	bf00      	nop
    a4e8:	20001240 	.word	0x20001240

0000a4ec <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    a4ec:	4b03      	ldr	r3, [pc, #12]	; (a4fc <usbdc_get_state+0x10>)
    a4ee:	7e98      	ldrb	r0, [r3, #26]
    a4f0:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    a4f4:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    a4f6:	bf18      	it	ne
    a4f8:	2010      	movne	r0, #16
    a4fa:	4770      	bx	lr
    a4fc:	20001240 	.word	0x20001240

0000a500 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    a500:	4288      	cmp	r0, r1
    a502:	d214      	bcs.n	a52e <usb_find_desc+0x2e>
	return desc[0];
    a504:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a506:	2b01      	cmp	r3, #1
    a508:	d913      	bls.n	a532 <usb_find_desc+0x32>
{
    a50a:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    a50c:	7844      	ldrb	r4, [r0, #1]
    a50e:	4294      	cmp	r4, r2
    a510:	d00a      	beq.n	a528 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    a512:	4418      	add	r0, r3
	while (desc < eof) {
    a514:	4281      	cmp	r1, r0
    a516:	d906      	bls.n	a526 <usb_find_desc+0x26>
	return desc[0];
    a518:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a51a:	2b01      	cmp	r3, #1
    a51c:	d90b      	bls.n	a536 <usb_find_desc+0x36>
	return desc[1];
    a51e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    a520:	4294      	cmp	r4, r2
    a522:	d1f6      	bne.n	a512 <usb_find_desc+0x12>
    a524:	e000      	b.n	a528 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    a526:	2000      	movs	r0, #0
}
    a528:	f85d 4b04 	ldr.w	r4, [sp], #4
    a52c:	4770      	bx	lr
	return NULL;
    a52e:	2000      	movs	r0, #0
    a530:	4770      	bx	lr
		_desc_len_check();
    a532:	2000      	movs	r0, #0
    a534:	4770      	bx	lr
    a536:	2000      	movs	r0, #0
    a538:	e7f6      	b.n	a528 <usb_find_desc+0x28>

0000a53a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    a53a:	4288      	cmp	r0, r1
    a53c:	d216      	bcs.n	a56c <usb_find_ep_desc+0x32>
	return desc[0];
    a53e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a540:	2b01      	cmp	r3, #1
    a542:	d915      	bls.n	a570 <usb_find_ep_desc+0x36>
	return desc[1];
    a544:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    a546:	2a04      	cmp	r2, #4
    a548:	d014      	beq.n	a574 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    a54a:	2a05      	cmp	r2, #5
    a54c:	d00b      	beq.n	a566 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    a54e:	4418      	add	r0, r3
	while (desc < eof) {
    a550:	4281      	cmp	r1, r0
    a552:	d909      	bls.n	a568 <usb_find_ep_desc+0x2e>
	return desc[0];
    a554:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a556:	2b01      	cmp	r3, #1
    a558:	d90e      	bls.n	a578 <usb_find_ep_desc+0x3e>
	return desc[1];
    a55a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    a55c:	2a04      	cmp	r2, #4
    a55e:	d00d      	beq.n	a57c <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    a560:	2a05      	cmp	r2, #5
    a562:	d1f4      	bne.n	a54e <usb_find_ep_desc+0x14>
    a564:	e00b      	b.n	a57e <usb_find_ep_desc+0x44>
    a566:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    a568:	2000      	movs	r0, #0
    a56a:	4770      	bx	lr
    a56c:	2000      	movs	r0, #0
    a56e:	4770      	bx	lr
		_desc_len_check();
    a570:	2000      	movs	r0, #0
    a572:	4770      	bx	lr
	return NULL;
    a574:	2000      	movs	r0, #0
    a576:	4770      	bx	lr
		_desc_len_check();
    a578:	2000      	movs	r0, #0
    a57a:	4770      	bx	lr
	return NULL;
    a57c:	2000      	movs	r0, #0
}
    a57e:	4770      	bx	lr

0000a580 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    a580:	b538      	push	{r3, r4, r5, lr}
    a582:	460c      	mov	r4, r1
    a584:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    a586:	2202      	movs	r2, #2
    a588:	4b16      	ldr	r3, [pc, #88]	; (a5e4 <usb_find_cfg_desc+0x64>)
    a58a:	4798      	blx	r3
	if (!desc) {
    a58c:	4603      	mov	r3, r0
    a58e:	b1e8      	cbz	r0, a5cc <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    a590:	4284      	cmp	r4, r0
    a592:	d91d      	bls.n	a5d0 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    a594:	7802      	ldrb	r2, [r0, #0]
    a596:	2a01      	cmp	r2, #1
    a598:	d91c      	bls.n	a5d4 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    a59a:	7842      	ldrb	r2, [r0, #1]
    a59c:	2a02      	cmp	r2, #2
    a59e:	d11b      	bne.n	a5d8 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    a5a0:	7942      	ldrb	r2, [r0, #5]
    a5a2:	42aa      	cmp	r2, r5
    a5a4:	d012      	beq.n	a5cc <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    a5a6:	78d9      	ldrb	r1, [r3, #3]
    a5a8:	789a      	ldrb	r2, [r3, #2]
    a5aa:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    a5ae:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    a5b2:	429c      	cmp	r4, r3
    a5b4:	d909      	bls.n	a5ca <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    a5b6:	781a      	ldrb	r2, [r3, #0]
    a5b8:	2a01      	cmp	r2, #1
    a5ba:	d90f      	bls.n	a5dc <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    a5bc:	785a      	ldrb	r2, [r3, #1]
    a5be:	2a02      	cmp	r2, #2
    a5c0:	d10e      	bne.n	a5e0 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    a5c2:	795a      	ldrb	r2, [r3, #5]
    a5c4:	42aa      	cmp	r2, r5
    a5c6:	d1ee      	bne.n	a5a6 <usb_find_cfg_desc+0x26>
    a5c8:	e000      	b.n	a5cc <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    a5ca:	2300      	movs	r3, #0
}
    a5cc:	4618      	mov	r0, r3
    a5ce:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    a5d0:	2300      	movs	r3, #0
    a5d2:	e7fb      	b.n	a5cc <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    a5d4:	2300      	movs	r3, #0
    a5d6:	e7f9      	b.n	a5cc <usb_find_cfg_desc+0x4c>
	return NULL;
    a5d8:	2300      	movs	r3, #0
    a5da:	e7f7      	b.n	a5cc <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    a5dc:	2300      	movs	r3, #0
    a5de:	e7f5      	b.n	a5cc <usb_find_cfg_desc+0x4c>
	return NULL;
    a5e0:	2300      	movs	r3, #0
    a5e2:	e7f3      	b.n	a5cc <usb_find_cfg_desc+0x4c>
    a5e4:	0000a501 	.word	0x0000a501

0000a5e8 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    a5e8:	4288      	cmp	r0, r1
    a5ea:	d217      	bcs.n	a61c <usb_find_str_desc+0x34>
{
    a5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a5f0:	460d      	mov	r5, r1
    a5f2:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    a5f4:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    a5f6:	f04f 0803 	mov.w	r8, #3
    a5fa:	4f0c      	ldr	r7, [pc, #48]	; (a62c <usb_find_str_desc+0x44>)
    a5fc:	4642      	mov	r2, r8
    a5fe:	4629      	mov	r1, r5
    a600:	47b8      	blx	r7
		if (desc) {
    a602:	4603      	mov	r3, r0
    a604:	b170      	cbz	r0, a624 <usb_find_str_desc+0x3c>
	return desc[0];
    a606:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    a608:	2801      	cmp	r0, #1
    a60a:	d90a      	bls.n	a622 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    a60c:	42a6      	cmp	r6, r4
    a60e:	d009      	beq.n	a624 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    a610:	4418      	add	r0, r3
    a612:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    a614:	4285      	cmp	r5, r0
    a616:	d8f1      	bhi.n	a5fc <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    a618:	2300      	movs	r3, #0
    a61a:	e003      	b.n	a624 <usb_find_str_desc+0x3c>
    a61c:	2300      	movs	r3, #0
}
    a61e:	4618      	mov	r0, r3
    a620:	4770      	bx	lr
			_desc_len_check();
    a622:	2300      	movs	r3, #0
}
    a624:	4618      	mov	r0, r3
    a626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a62a:	bf00      	nop
    a62c:	0000a501 	.word	0x0000a501

0000a630 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    a630:	4b3a      	ldr	r3, [pc, #232]	; (a71c <hiddf_demo_sof_event+0xec>)
    a632:	791b      	ldrb	r3, [r3, #4]
    a634:	2b0a      	cmp	r3, #10
    a636:	d803      	bhi.n	a640 <hiddf_demo_sof_event+0x10>
    a638:	3301      	adds	r3, #1
    a63a:	4a38      	ldr	r2, [pc, #224]	; (a71c <hiddf_demo_sof_event+0xec>)
    a63c:	7113      	strb	r3, [r2, #4]
    a63e:	4770      	bx	lr
{
    a640:	b570      	push	{r4, r5, r6, lr}
    a642:	b084      	sub	sp, #16
		interval = 0;
    a644:	4b35      	ldr	r3, [pc, #212]	; (a71c <hiddf_demo_sof_event+0xec>)
    a646:	2200      	movs	r2, #0
    a648:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    a64a:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    a64c:	a801      	add	r0, sp, #4
    a64e:	4b34      	ldr	r3, [pc, #208]	; (a720 <hiddf_demo_sof_event+0xf0>)
    a650:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    a652:	096b      	lsrs	r3, r5, #5
    a654:	4933      	ldr	r1, [pc, #204]	; (a724 <hiddf_demo_sof_event+0xf4>)
    a656:	01db      	lsls	r3, r3, #7
    a658:	18ca      	adds	r2, r1, r3
    a65a:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    a65c:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    a65e:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    a660:	405c      	eors	r4, r3
    a662:	400c      	ands	r4, r1
    a664:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    a666:	a801      	add	r0, sp, #4
    a668:	4b2f      	ldr	r3, [pc, #188]	; (a728 <hiddf_demo_sof_event+0xf8>)
    a66a:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    a66c:	f005 051f 	and.w	r5, r5, #31
    a670:	2301      	movs	r3, #1
    a672:	fa03 f505 	lsl.w	r5, r3, r5
    a676:	4225      	tst	r5, r4
    a678:	d040      	beq.n	a6fc <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    a67a:	4b28      	ldr	r3, [pc, #160]	; (a71c <hiddf_demo_sof_event+0xec>)
    a67c:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    a67e:	a802      	add	r0, sp, #8
    a680:	4b27      	ldr	r3, [pc, #156]	; (a720 <hiddf_demo_sof_event+0xf0>)
    a682:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    a684:	096b      	lsrs	r3, r5, #5
    a686:	4927      	ldr	r1, [pc, #156]	; (a724 <hiddf_demo_sof_event+0xf4>)
    a688:	01db      	lsls	r3, r3, #7
    a68a:	18ca      	adds	r2, r1, r3
    a68c:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    a68e:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    a690:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    a692:	405c      	eors	r4, r3
    a694:	400c      	ands	r4, r1
    a696:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    a698:	a802      	add	r0, sp, #8
    a69a:	4b23      	ldr	r3, [pc, #140]	; (a728 <hiddf_demo_sof_event+0xf8>)
    a69c:	4798      	blx	r3
    a69e:	f005 051f 	and.w	r5, r5, #31
    a6a2:	2301      	movs	r3, #1
    a6a4:	fa03 f505 	lsl.w	r5, r3, r5
    a6a8:	4225      	tst	r5, r4
    a6aa:	d02d      	beq.n	a708 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    a6ac:	4d1b      	ldr	r5, [pc, #108]	; (a71c <hiddf_demo_sof_event+0xec>)
    a6ae:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    a6b0:	a803      	add	r0, sp, #12
    a6b2:	4b1b      	ldr	r3, [pc, #108]	; (a720 <hiddf_demo_sof_event+0xf0>)
    a6b4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    a6b6:	0973      	lsrs	r3, r6, #5
    a6b8:	491a      	ldr	r1, [pc, #104]	; (a724 <hiddf_demo_sof_event+0xf4>)
    a6ba:	01db      	lsls	r3, r3, #7
    a6bc:	18ca      	adds	r2, r1, r3
    a6be:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    a6c0:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    a6c2:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    a6c4:	405c      	eors	r4, r3
    a6c6:	400c      	ands	r4, r1
    a6c8:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    a6ca:	a803      	add	r0, sp, #12
    a6cc:	4b16      	ldr	r3, [pc, #88]	; (a728 <hiddf_demo_sof_event+0xf8>)
    a6ce:	4798      	blx	r3
    a6d0:	f006 061f 	and.w	r6, r6, #31
    a6d4:	2301      	movs	r3, #1
    a6d6:	40b3      	lsls	r3, r6
    a6d8:	401c      	ands	r4, r3
    a6da:	bf0c      	ite	eq
    a6dc:	2301      	moveq	r3, #1
    a6de:	2300      	movne	r3, #0
    a6e0:	7d2a      	ldrb	r2, [r5, #20]
    a6e2:	429a      	cmp	r2, r3
    a6e4:	d008      	beq.n	a6f8 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    a6e6:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    a6e8:	b19c      	cbz	r4, a712 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    a6ea:	2200      	movs	r2, #0
    a6ec:	4b0f      	ldr	r3, [pc, #60]	; (a72c <hiddf_demo_sof_event+0xfc>)
    a6ee:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    a6f0:	2101      	movs	r1, #1
    a6f2:	480e      	ldr	r0, [pc, #56]	; (a72c <hiddf_demo_sof_event+0xfc>)
    a6f4:	4b0e      	ldr	r3, [pc, #56]	; (a730 <hiddf_demo_sof_event+0x100>)
    a6f6:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    a6f8:	b004      	add	sp, #16
    a6fa:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    a6fc:	4619      	mov	r1, r3
    a6fe:	f06f 0004 	mvn.w	r0, #4
    a702:	4b0c      	ldr	r3, [pc, #48]	; (a734 <hiddf_demo_sof_event+0x104>)
    a704:	4798      	blx	r3
    a706:	e7b8      	b.n	a67a <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    a708:	4619      	mov	r1, r3
    a70a:	2005      	movs	r0, #5
    a70c:	4b09      	ldr	r3, [pc, #36]	; (a734 <hiddf_demo_sof_event+0x104>)
    a70e:	4798      	blx	r3
    a710:	e7cc      	b.n	a6ac <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    a712:	2201      	movs	r2, #1
    a714:	4b05      	ldr	r3, [pc, #20]	; (a72c <hiddf_demo_sof_event+0xfc>)
    a716:	709a      	strb	r2, [r3, #2]
    a718:	e7ea      	b.n	a6f0 <hiddf_demo_sof_event+0xc0>
    a71a:	bf00      	nop
    a71c:	20001260 	.word	0x20001260
    a720:	00004099 	.word	0x00004099
    a724:	41008000 	.word	0x41008000
    a728:	000040a7 	.word	0x000040a7
    a72c:	20000374 	.word	0x20000374
    a730:	0000987d 	.word	0x0000987d
    a734:	00009b11 	.word	0x00009b11

0000a738 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    a738:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a73a:	4805      	ldr	r0, [pc, #20]	; (a750 <composite_device_init+0x18>)
    a73c:	4b05      	ldr	r3, [pc, #20]	; (a754 <composite_device_init+0x1c>)
    a73e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    a740:	4b05      	ldr	r3, [pc, #20]	; (a758 <composite_device_init+0x20>)
    a742:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    a744:	4b05      	ldr	r3, [pc, #20]	; (a75c <composite_device_init+0x24>)
    a746:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    a748:	4b05      	ldr	r3, [pc, #20]	; (a760 <composite_device_init+0x28>)
    a74a:	4798      	blx	r3
    a74c:	bd08      	pop	{r3, pc}
    a74e:	bf00      	nop
    a750:	20001278 	.word	0x20001278
    a754:	0000a431 	.word	0x0000a431
    a758:	000095f9 	.word	0x000095f9
    a75c:	00009acd 	.word	0x00009acd
    a760:	00009839 	.word	0x00009839

0000a764 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    a764:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    a766:	4803      	ldr	r0, [pc, #12]	; (a774 <composite_device_start+0x10>)
    a768:	4b03      	ldr	r3, [pc, #12]	; (a778 <composite_device_start+0x14>)
    a76a:	4798      	blx	r3
	usbdc_attach();
    a76c:	4b03      	ldr	r3, [pc, #12]	; (a77c <composite_device_start+0x18>)
    a76e:	4798      	blx	r3
    a770:	bd08      	pop	{r3, pc}
    a772:	bf00      	nop
    a774:	20000380 	.word	0x20000380
    a778:	0000a4a1 	.word	0x0000a4a1
    a77c:	0000a4d5 	.word	0x0000a4d5

0000a780 <usb_init>:
		}
	}
}

void usb_init(void)
{
    a780:	b508      	push	{r3, lr}

	composite_device_init();
    a782:	4b01      	ldr	r3, [pc, #4]	; (a788 <usb_init+0x8>)
    a784:	4798      	blx	r3
    a786:	bd08      	pop	{r3, pc}
    a788:	0000a739 	.word	0x0000a739

0000a78c <__aeabi_drsub>:
    a78c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    a790:	e002      	b.n	a798 <__adddf3>
    a792:	bf00      	nop

0000a794 <__aeabi_dsub>:
    a794:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000a798 <__adddf3>:
    a798:	b530      	push	{r4, r5, lr}
    a79a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    a79e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    a7a2:	ea94 0f05 	teq	r4, r5
    a7a6:	bf08      	it	eq
    a7a8:	ea90 0f02 	teqeq	r0, r2
    a7ac:	bf1f      	itttt	ne
    a7ae:	ea54 0c00 	orrsne.w	ip, r4, r0
    a7b2:	ea55 0c02 	orrsne.w	ip, r5, r2
    a7b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    a7ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a7be:	f000 80e2 	beq.w	a986 <__adddf3+0x1ee>
    a7c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    a7c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    a7ca:	bfb8      	it	lt
    a7cc:	426d      	neglt	r5, r5
    a7ce:	dd0c      	ble.n	a7ea <__adddf3+0x52>
    a7d0:	442c      	add	r4, r5
    a7d2:	ea80 0202 	eor.w	r2, r0, r2
    a7d6:	ea81 0303 	eor.w	r3, r1, r3
    a7da:	ea82 0000 	eor.w	r0, r2, r0
    a7de:	ea83 0101 	eor.w	r1, r3, r1
    a7e2:	ea80 0202 	eor.w	r2, r0, r2
    a7e6:	ea81 0303 	eor.w	r3, r1, r3
    a7ea:	2d36      	cmp	r5, #54	; 0x36
    a7ec:	bf88      	it	hi
    a7ee:	bd30      	pophi	{r4, r5, pc}
    a7f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    a7f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    a7f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    a7fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    a800:	d002      	beq.n	a808 <__adddf3+0x70>
    a802:	4240      	negs	r0, r0
    a804:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a808:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    a80c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    a810:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    a814:	d002      	beq.n	a81c <__adddf3+0x84>
    a816:	4252      	negs	r2, r2
    a818:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    a81c:	ea94 0f05 	teq	r4, r5
    a820:	f000 80a7 	beq.w	a972 <__adddf3+0x1da>
    a824:	f1a4 0401 	sub.w	r4, r4, #1
    a828:	f1d5 0e20 	rsbs	lr, r5, #32
    a82c:	db0d      	blt.n	a84a <__adddf3+0xb2>
    a82e:	fa02 fc0e 	lsl.w	ip, r2, lr
    a832:	fa22 f205 	lsr.w	r2, r2, r5
    a836:	1880      	adds	r0, r0, r2
    a838:	f141 0100 	adc.w	r1, r1, #0
    a83c:	fa03 f20e 	lsl.w	r2, r3, lr
    a840:	1880      	adds	r0, r0, r2
    a842:	fa43 f305 	asr.w	r3, r3, r5
    a846:	4159      	adcs	r1, r3
    a848:	e00e      	b.n	a868 <__adddf3+0xd0>
    a84a:	f1a5 0520 	sub.w	r5, r5, #32
    a84e:	f10e 0e20 	add.w	lr, lr, #32
    a852:	2a01      	cmp	r2, #1
    a854:	fa03 fc0e 	lsl.w	ip, r3, lr
    a858:	bf28      	it	cs
    a85a:	f04c 0c02 	orrcs.w	ip, ip, #2
    a85e:	fa43 f305 	asr.w	r3, r3, r5
    a862:	18c0      	adds	r0, r0, r3
    a864:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    a868:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a86c:	d507      	bpl.n	a87e <__adddf3+0xe6>
    a86e:	f04f 0e00 	mov.w	lr, #0
    a872:	f1dc 0c00 	rsbs	ip, ip, #0
    a876:	eb7e 0000 	sbcs.w	r0, lr, r0
    a87a:	eb6e 0101 	sbc.w	r1, lr, r1
    a87e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    a882:	d31b      	bcc.n	a8bc <__adddf3+0x124>
    a884:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    a888:	d30c      	bcc.n	a8a4 <__adddf3+0x10c>
    a88a:	0849      	lsrs	r1, r1, #1
    a88c:	ea5f 0030 	movs.w	r0, r0, rrx
    a890:	ea4f 0c3c 	mov.w	ip, ip, rrx
    a894:	f104 0401 	add.w	r4, r4, #1
    a898:	ea4f 5244 	mov.w	r2, r4, lsl #21
    a89c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    a8a0:	f080 809a 	bcs.w	a9d8 <__adddf3+0x240>
    a8a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    a8a8:	bf08      	it	eq
    a8aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    a8ae:	f150 0000 	adcs.w	r0, r0, #0
    a8b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a8b6:	ea41 0105 	orr.w	r1, r1, r5
    a8ba:	bd30      	pop	{r4, r5, pc}
    a8bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    a8c0:	4140      	adcs	r0, r0
    a8c2:	eb41 0101 	adc.w	r1, r1, r1
    a8c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a8ca:	f1a4 0401 	sub.w	r4, r4, #1
    a8ce:	d1e9      	bne.n	a8a4 <__adddf3+0x10c>
    a8d0:	f091 0f00 	teq	r1, #0
    a8d4:	bf04      	itt	eq
    a8d6:	4601      	moveq	r1, r0
    a8d8:	2000      	moveq	r0, #0
    a8da:	fab1 f381 	clz	r3, r1
    a8de:	bf08      	it	eq
    a8e0:	3320      	addeq	r3, #32
    a8e2:	f1a3 030b 	sub.w	r3, r3, #11
    a8e6:	f1b3 0220 	subs.w	r2, r3, #32
    a8ea:	da0c      	bge.n	a906 <__adddf3+0x16e>
    a8ec:	320c      	adds	r2, #12
    a8ee:	dd08      	ble.n	a902 <__adddf3+0x16a>
    a8f0:	f102 0c14 	add.w	ip, r2, #20
    a8f4:	f1c2 020c 	rsb	r2, r2, #12
    a8f8:	fa01 f00c 	lsl.w	r0, r1, ip
    a8fc:	fa21 f102 	lsr.w	r1, r1, r2
    a900:	e00c      	b.n	a91c <__adddf3+0x184>
    a902:	f102 0214 	add.w	r2, r2, #20
    a906:	bfd8      	it	le
    a908:	f1c2 0c20 	rsble	ip, r2, #32
    a90c:	fa01 f102 	lsl.w	r1, r1, r2
    a910:	fa20 fc0c 	lsr.w	ip, r0, ip
    a914:	bfdc      	itt	le
    a916:	ea41 010c 	orrle.w	r1, r1, ip
    a91a:	4090      	lslle	r0, r2
    a91c:	1ae4      	subs	r4, r4, r3
    a91e:	bfa2      	ittt	ge
    a920:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    a924:	4329      	orrge	r1, r5
    a926:	bd30      	popge	{r4, r5, pc}
    a928:	ea6f 0404 	mvn.w	r4, r4
    a92c:	3c1f      	subs	r4, #31
    a92e:	da1c      	bge.n	a96a <__adddf3+0x1d2>
    a930:	340c      	adds	r4, #12
    a932:	dc0e      	bgt.n	a952 <__adddf3+0x1ba>
    a934:	f104 0414 	add.w	r4, r4, #20
    a938:	f1c4 0220 	rsb	r2, r4, #32
    a93c:	fa20 f004 	lsr.w	r0, r0, r4
    a940:	fa01 f302 	lsl.w	r3, r1, r2
    a944:	ea40 0003 	orr.w	r0, r0, r3
    a948:	fa21 f304 	lsr.w	r3, r1, r4
    a94c:	ea45 0103 	orr.w	r1, r5, r3
    a950:	bd30      	pop	{r4, r5, pc}
    a952:	f1c4 040c 	rsb	r4, r4, #12
    a956:	f1c4 0220 	rsb	r2, r4, #32
    a95a:	fa20 f002 	lsr.w	r0, r0, r2
    a95e:	fa01 f304 	lsl.w	r3, r1, r4
    a962:	ea40 0003 	orr.w	r0, r0, r3
    a966:	4629      	mov	r1, r5
    a968:	bd30      	pop	{r4, r5, pc}
    a96a:	fa21 f004 	lsr.w	r0, r1, r4
    a96e:	4629      	mov	r1, r5
    a970:	bd30      	pop	{r4, r5, pc}
    a972:	f094 0f00 	teq	r4, #0
    a976:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    a97a:	bf06      	itte	eq
    a97c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    a980:	3401      	addeq	r4, #1
    a982:	3d01      	subne	r5, #1
    a984:	e74e      	b.n	a824 <__adddf3+0x8c>
    a986:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    a98a:	bf18      	it	ne
    a98c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a990:	d029      	beq.n	a9e6 <__adddf3+0x24e>
    a992:	ea94 0f05 	teq	r4, r5
    a996:	bf08      	it	eq
    a998:	ea90 0f02 	teqeq	r0, r2
    a99c:	d005      	beq.n	a9aa <__adddf3+0x212>
    a99e:	ea54 0c00 	orrs.w	ip, r4, r0
    a9a2:	bf04      	itt	eq
    a9a4:	4619      	moveq	r1, r3
    a9a6:	4610      	moveq	r0, r2
    a9a8:	bd30      	pop	{r4, r5, pc}
    a9aa:	ea91 0f03 	teq	r1, r3
    a9ae:	bf1e      	ittt	ne
    a9b0:	2100      	movne	r1, #0
    a9b2:	2000      	movne	r0, #0
    a9b4:	bd30      	popne	{r4, r5, pc}
    a9b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    a9ba:	d105      	bne.n	a9c8 <__adddf3+0x230>
    a9bc:	0040      	lsls	r0, r0, #1
    a9be:	4149      	adcs	r1, r1
    a9c0:	bf28      	it	cs
    a9c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    a9c6:	bd30      	pop	{r4, r5, pc}
    a9c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    a9cc:	bf3c      	itt	cc
    a9ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    a9d2:	bd30      	popcc	{r4, r5, pc}
    a9d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a9d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    a9dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    a9e0:	f04f 0000 	mov.w	r0, #0
    a9e4:	bd30      	pop	{r4, r5, pc}
    a9e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    a9ea:	bf1a      	itte	ne
    a9ec:	4619      	movne	r1, r3
    a9ee:	4610      	movne	r0, r2
    a9f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    a9f4:	bf1c      	itt	ne
    a9f6:	460b      	movne	r3, r1
    a9f8:	4602      	movne	r2, r0
    a9fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    a9fe:	bf06      	itte	eq
    aa00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    aa04:	ea91 0f03 	teqeq	r1, r3
    aa08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    aa0c:	bd30      	pop	{r4, r5, pc}
    aa0e:	bf00      	nop

0000aa10 <__aeabi_ui2d>:
    aa10:	f090 0f00 	teq	r0, #0
    aa14:	bf04      	itt	eq
    aa16:	2100      	moveq	r1, #0
    aa18:	4770      	bxeq	lr
    aa1a:	b530      	push	{r4, r5, lr}
    aa1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    aa20:	f104 0432 	add.w	r4, r4, #50	; 0x32
    aa24:	f04f 0500 	mov.w	r5, #0
    aa28:	f04f 0100 	mov.w	r1, #0
    aa2c:	e750      	b.n	a8d0 <__adddf3+0x138>
    aa2e:	bf00      	nop

0000aa30 <__aeabi_i2d>:
    aa30:	f090 0f00 	teq	r0, #0
    aa34:	bf04      	itt	eq
    aa36:	2100      	moveq	r1, #0
    aa38:	4770      	bxeq	lr
    aa3a:	b530      	push	{r4, r5, lr}
    aa3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    aa40:	f104 0432 	add.w	r4, r4, #50	; 0x32
    aa44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    aa48:	bf48      	it	mi
    aa4a:	4240      	negmi	r0, r0
    aa4c:	f04f 0100 	mov.w	r1, #0
    aa50:	e73e      	b.n	a8d0 <__adddf3+0x138>
    aa52:	bf00      	nop

0000aa54 <__aeabi_f2d>:
    aa54:	0042      	lsls	r2, r0, #1
    aa56:	ea4f 01e2 	mov.w	r1, r2, asr #3
    aa5a:	ea4f 0131 	mov.w	r1, r1, rrx
    aa5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    aa62:	bf1f      	itttt	ne
    aa64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    aa68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    aa6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    aa70:	4770      	bxne	lr
    aa72:	f092 0f00 	teq	r2, #0
    aa76:	bf14      	ite	ne
    aa78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    aa7c:	4770      	bxeq	lr
    aa7e:	b530      	push	{r4, r5, lr}
    aa80:	f44f 7460 	mov.w	r4, #896	; 0x380
    aa84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    aa88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    aa8c:	e720      	b.n	a8d0 <__adddf3+0x138>
    aa8e:	bf00      	nop

0000aa90 <__aeabi_ul2d>:
    aa90:	ea50 0201 	orrs.w	r2, r0, r1
    aa94:	bf08      	it	eq
    aa96:	4770      	bxeq	lr
    aa98:	b530      	push	{r4, r5, lr}
    aa9a:	f04f 0500 	mov.w	r5, #0
    aa9e:	e00a      	b.n	aab6 <__aeabi_l2d+0x16>

0000aaa0 <__aeabi_l2d>:
    aaa0:	ea50 0201 	orrs.w	r2, r0, r1
    aaa4:	bf08      	it	eq
    aaa6:	4770      	bxeq	lr
    aaa8:	b530      	push	{r4, r5, lr}
    aaaa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    aaae:	d502      	bpl.n	aab6 <__aeabi_l2d+0x16>
    aab0:	4240      	negs	r0, r0
    aab2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    aab6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    aaba:	f104 0432 	add.w	r4, r4, #50	; 0x32
    aabe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    aac2:	f43f aedc 	beq.w	a87e <__adddf3+0xe6>
    aac6:	f04f 0203 	mov.w	r2, #3
    aaca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    aace:	bf18      	it	ne
    aad0:	3203      	addne	r2, #3
    aad2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    aad6:	bf18      	it	ne
    aad8:	3203      	addne	r2, #3
    aada:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    aade:	f1c2 0320 	rsb	r3, r2, #32
    aae2:	fa00 fc03 	lsl.w	ip, r0, r3
    aae6:	fa20 f002 	lsr.w	r0, r0, r2
    aaea:	fa01 fe03 	lsl.w	lr, r1, r3
    aaee:	ea40 000e 	orr.w	r0, r0, lr
    aaf2:	fa21 f102 	lsr.w	r1, r1, r2
    aaf6:	4414      	add	r4, r2
    aaf8:	e6c1      	b.n	a87e <__adddf3+0xe6>
    aafa:	bf00      	nop

0000aafc <__aeabi_dmul>:
    aafc:	b570      	push	{r4, r5, r6, lr}
    aafe:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ab02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    ab06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ab0a:	bf1d      	ittte	ne
    ab0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ab10:	ea94 0f0c 	teqne	r4, ip
    ab14:	ea95 0f0c 	teqne	r5, ip
    ab18:	f000 f8de 	bleq	acd8 <__aeabi_dmul+0x1dc>
    ab1c:	442c      	add	r4, r5
    ab1e:	ea81 0603 	eor.w	r6, r1, r3
    ab22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    ab26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    ab2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    ab2e:	bf18      	it	ne
    ab30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    ab34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ab38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ab3c:	d038      	beq.n	abb0 <__aeabi_dmul+0xb4>
    ab3e:	fba0 ce02 	umull	ip, lr, r0, r2
    ab42:	f04f 0500 	mov.w	r5, #0
    ab46:	fbe1 e502 	umlal	lr, r5, r1, r2
    ab4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    ab4e:	fbe0 e503 	umlal	lr, r5, r0, r3
    ab52:	f04f 0600 	mov.w	r6, #0
    ab56:	fbe1 5603 	umlal	r5, r6, r1, r3
    ab5a:	f09c 0f00 	teq	ip, #0
    ab5e:	bf18      	it	ne
    ab60:	f04e 0e01 	orrne.w	lr, lr, #1
    ab64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    ab68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    ab6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    ab70:	d204      	bcs.n	ab7c <__aeabi_dmul+0x80>
    ab72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    ab76:	416d      	adcs	r5, r5
    ab78:	eb46 0606 	adc.w	r6, r6, r6
    ab7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    ab80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    ab84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    ab88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    ab8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    ab90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ab94:	bf88      	it	hi
    ab96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ab9a:	d81e      	bhi.n	abda <__aeabi_dmul+0xde>
    ab9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    aba0:	bf08      	it	eq
    aba2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    aba6:	f150 0000 	adcs.w	r0, r0, #0
    abaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    abae:	bd70      	pop	{r4, r5, r6, pc}
    abb0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    abb4:	ea46 0101 	orr.w	r1, r6, r1
    abb8:	ea40 0002 	orr.w	r0, r0, r2
    abbc:	ea81 0103 	eor.w	r1, r1, r3
    abc0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    abc4:	bfc2      	ittt	gt
    abc6:	ebd4 050c 	rsbsgt	r5, r4, ip
    abca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    abce:	bd70      	popgt	{r4, r5, r6, pc}
    abd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    abd4:	f04f 0e00 	mov.w	lr, #0
    abd8:	3c01      	subs	r4, #1
    abda:	f300 80ab 	bgt.w	ad34 <__aeabi_dmul+0x238>
    abde:	f114 0f36 	cmn.w	r4, #54	; 0x36
    abe2:	bfde      	ittt	le
    abe4:	2000      	movle	r0, #0
    abe6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    abea:	bd70      	pople	{r4, r5, r6, pc}
    abec:	f1c4 0400 	rsb	r4, r4, #0
    abf0:	3c20      	subs	r4, #32
    abf2:	da35      	bge.n	ac60 <__aeabi_dmul+0x164>
    abf4:	340c      	adds	r4, #12
    abf6:	dc1b      	bgt.n	ac30 <__aeabi_dmul+0x134>
    abf8:	f104 0414 	add.w	r4, r4, #20
    abfc:	f1c4 0520 	rsb	r5, r4, #32
    ac00:	fa00 f305 	lsl.w	r3, r0, r5
    ac04:	fa20 f004 	lsr.w	r0, r0, r4
    ac08:	fa01 f205 	lsl.w	r2, r1, r5
    ac0c:	ea40 0002 	orr.w	r0, r0, r2
    ac10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    ac14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ac18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ac1c:	fa21 f604 	lsr.w	r6, r1, r4
    ac20:	eb42 0106 	adc.w	r1, r2, r6
    ac24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ac28:	bf08      	it	eq
    ac2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ac2e:	bd70      	pop	{r4, r5, r6, pc}
    ac30:	f1c4 040c 	rsb	r4, r4, #12
    ac34:	f1c4 0520 	rsb	r5, r4, #32
    ac38:	fa00 f304 	lsl.w	r3, r0, r4
    ac3c:	fa20 f005 	lsr.w	r0, r0, r5
    ac40:	fa01 f204 	lsl.w	r2, r1, r4
    ac44:	ea40 0002 	orr.w	r0, r0, r2
    ac48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ac4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ac50:	f141 0100 	adc.w	r1, r1, #0
    ac54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ac58:	bf08      	it	eq
    ac5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ac5e:	bd70      	pop	{r4, r5, r6, pc}
    ac60:	f1c4 0520 	rsb	r5, r4, #32
    ac64:	fa00 f205 	lsl.w	r2, r0, r5
    ac68:	ea4e 0e02 	orr.w	lr, lr, r2
    ac6c:	fa20 f304 	lsr.w	r3, r0, r4
    ac70:	fa01 f205 	lsl.w	r2, r1, r5
    ac74:	ea43 0302 	orr.w	r3, r3, r2
    ac78:	fa21 f004 	lsr.w	r0, r1, r4
    ac7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ac80:	fa21 f204 	lsr.w	r2, r1, r4
    ac84:	ea20 0002 	bic.w	r0, r0, r2
    ac88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    ac8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ac90:	bf08      	it	eq
    ac92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ac96:	bd70      	pop	{r4, r5, r6, pc}
    ac98:	f094 0f00 	teq	r4, #0
    ac9c:	d10f      	bne.n	acbe <__aeabi_dmul+0x1c2>
    ac9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    aca2:	0040      	lsls	r0, r0, #1
    aca4:	eb41 0101 	adc.w	r1, r1, r1
    aca8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    acac:	bf08      	it	eq
    acae:	3c01      	subeq	r4, #1
    acb0:	d0f7      	beq.n	aca2 <__aeabi_dmul+0x1a6>
    acb2:	ea41 0106 	orr.w	r1, r1, r6
    acb6:	f095 0f00 	teq	r5, #0
    acba:	bf18      	it	ne
    acbc:	4770      	bxne	lr
    acbe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    acc2:	0052      	lsls	r2, r2, #1
    acc4:	eb43 0303 	adc.w	r3, r3, r3
    acc8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    accc:	bf08      	it	eq
    acce:	3d01      	subeq	r5, #1
    acd0:	d0f7      	beq.n	acc2 <__aeabi_dmul+0x1c6>
    acd2:	ea43 0306 	orr.w	r3, r3, r6
    acd6:	4770      	bx	lr
    acd8:	ea94 0f0c 	teq	r4, ip
    acdc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ace0:	bf18      	it	ne
    ace2:	ea95 0f0c 	teqne	r5, ip
    ace6:	d00c      	beq.n	ad02 <__aeabi_dmul+0x206>
    ace8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    acec:	bf18      	it	ne
    acee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    acf2:	d1d1      	bne.n	ac98 <__aeabi_dmul+0x19c>
    acf4:	ea81 0103 	eor.w	r1, r1, r3
    acf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    acfc:	f04f 0000 	mov.w	r0, #0
    ad00:	bd70      	pop	{r4, r5, r6, pc}
    ad02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ad06:	bf06      	itte	eq
    ad08:	4610      	moveq	r0, r2
    ad0a:	4619      	moveq	r1, r3
    ad0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ad10:	d019      	beq.n	ad46 <__aeabi_dmul+0x24a>
    ad12:	ea94 0f0c 	teq	r4, ip
    ad16:	d102      	bne.n	ad1e <__aeabi_dmul+0x222>
    ad18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    ad1c:	d113      	bne.n	ad46 <__aeabi_dmul+0x24a>
    ad1e:	ea95 0f0c 	teq	r5, ip
    ad22:	d105      	bne.n	ad30 <__aeabi_dmul+0x234>
    ad24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    ad28:	bf1c      	itt	ne
    ad2a:	4610      	movne	r0, r2
    ad2c:	4619      	movne	r1, r3
    ad2e:	d10a      	bne.n	ad46 <__aeabi_dmul+0x24a>
    ad30:	ea81 0103 	eor.w	r1, r1, r3
    ad34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ad38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    ad3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ad40:	f04f 0000 	mov.w	r0, #0
    ad44:	bd70      	pop	{r4, r5, r6, pc}
    ad46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    ad4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    ad4e:	bd70      	pop	{r4, r5, r6, pc}

0000ad50 <__aeabi_ddiv>:
    ad50:	b570      	push	{r4, r5, r6, lr}
    ad52:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ad56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    ad5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ad5e:	bf1d      	ittte	ne
    ad60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ad64:	ea94 0f0c 	teqne	r4, ip
    ad68:	ea95 0f0c 	teqne	r5, ip
    ad6c:	f000 f8a7 	bleq	aebe <__aeabi_ddiv+0x16e>
    ad70:	eba4 0405 	sub.w	r4, r4, r5
    ad74:	ea81 0e03 	eor.w	lr, r1, r3
    ad78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ad7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    ad80:	f000 8088 	beq.w	ae94 <__aeabi_ddiv+0x144>
    ad84:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ad88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ad8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    ad90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    ad94:	ea4f 2202 	mov.w	r2, r2, lsl #8
    ad98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    ad9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    ada0:	ea4f 2600 	mov.w	r6, r0, lsl #8
    ada4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    ada8:	429d      	cmp	r5, r3
    adaa:	bf08      	it	eq
    adac:	4296      	cmpeq	r6, r2
    adae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    adb2:	f504 7440 	add.w	r4, r4, #768	; 0x300
    adb6:	d202      	bcs.n	adbe <__aeabi_ddiv+0x6e>
    adb8:	085b      	lsrs	r3, r3, #1
    adba:	ea4f 0232 	mov.w	r2, r2, rrx
    adbe:	1ab6      	subs	r6, r6, r2
    adc0:	eb65 0503 	sbc.w	r5, r5, r3
    adc4:	085b      	lsrs	r3, r3, #1
    adc6:	ea4f 0232 	mov.w	r2, r2, rrx
    adca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    adce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    add2:	ebb6 0e02 	subs.w	lr, r6, r2
    add6:	eb75 0e03 	sbcs.w	lr, r5, r3
    adda:	bf22      	ittt	cs
    addc:	1ab6      	subcs	r6, r6, r2
    adde:	4675      	movcs	r5, lr
    ade0:	ea40 000c 	orrcs.w	r0, r0, ip
    ade4:	085b      	lsrs	r3, r3, #1
    ade6:	ea4f 0232 	mov.w	r2, r2, rrx
    adea:	ebb6 0e02 	subs.w	lr, r6, r2
    adee:	eb75 0e03 	sbcs.w	lr, r5, r3
    adf2:	bf22      	ittt	cs
    adf4:	1ab6      	subcs	r6, r6, r2
    adf6:	4675      	movcs	r5, lr
    adf8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    adfc:	085b      	lsrs	r3, r3, #1
    adfe:	ea4f 0232 	mov.w	r2, r2, rrx
    ae02:	ebb6 0e02 	subs.w	lr, r6, r2
    ae06:	eb75 0e03 	sbcs.w	lr, r5, r3
    ae0a:	bf22      	ittt	cs
    ae0c:	1ab6      	subcs	r6, r6, r2
    ae0e:	4675      	movcs	r5, lr
    ae10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ae14:	085b      	lsrs	r3, r3, #1
    ae16:	ea4f 0232 	mov.w	r2, r2, rrx
    ae1a:	ebb6 0e02 	subs.w	lr, r6, r2
    ae1e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ae22:	bf22      	ittt	cs
    ae24:	1ab6      	subcs	r6, r6, r2
    ae26:	4675      	movcs	r5, lr
    ae28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ae2c:	ea55 0e06 	orrs.w	lr, r5, r6
    ae30:	d018      	beq.n	ae64 <__aeabi_ddiv+0x114>
    ae32:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ae36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    ae3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ae3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ae42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    ae46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    ae4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    ae4e:	d1c0      	bne.n	add2 <__aeabi_ddiv+0x82>
    ae50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ae54:	d10b      	bne.n	ae6e <__aeabi_ddiv+0x11e>
    ae56:	ea41 0100 	orr.w	r1, r1, r0
    ae5a:	f04f 0000 	mov.w	r0, #0
    ae5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    ae62:	e7b6      	b.n	add2 <__aeabi_ddiv+0x82>
    ae64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ae68:	bf04      	itt	eq
    ae6a:	4301      	orreq	r1, r0
    ae6c:	2000      	moveq	r0, #0
    ae6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ae72:	bf88      	it	hi
    ae74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ae78:	f63f aeaf 	bhi.w	abda <__aeabi_dmul+0xde>
    ae7c:	ebb5 0c03 	subs.w	ip, r5, r3
    ae80:	bf04      	itt	eq
    ae82:	ebb6 0c02 	subseq.w	ip, r6, r2
    ae86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ae8a:	f150 0000 	adcs.w	r0, r0, #0
    ae8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ae92:	bd70      	pop	{r4, r5, r6, pc}
    ae94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    ae98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    ae9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    aea0:	bfc2      	ittt	gt
    aea2:	ebd4 050c 	rsbsgt	r5, r4, ip
    aea6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    aeaa:	bd70      	popgt	{r4, r5, r6, pc}
    aeac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    aeb0:	f04f 0e00 	mov.w	lr, #0
    aeb4:	3c01      	subs	r4, #1
    aeb6:	e690      	b.n	abda <__aeabi_dmul+0xde>
    aeb8:	ea45 0e06 	orr.w	lr, r5, r6
    aebc:	e68d      	b.n	abda <__aeabi_dmul+0xde>
    aebe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    aec2:	ea94 0f0c 	teq	r4, ip
    aec6:	bf08      	it	eq
    aec8:	ea95 0f0c 	teqeq	r5, ip
    aecc:	f43f af3b 	beq.w	ad46 <__aeabi_dmul+0x24a>
    aed0:	ea94 0f0c 	teq	r4, ip
    aed4:	d10a      	bne.n	aeec <__aeabi_ddiv+0x19c>
    aed6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    aeda:	f47f af34 	bne.w	ad46 <__aeabi_dmul+0x24a>
    aede:	ea95 0f0c 	teq	r5, ip
    aee2:	f47f af25 	bne.w	ad30 <__aeabi_dmul+0x234>
    aee6:	4610      	mov	r0, r2
    aee8:	4619      	mov	r1, r3
    aeea:	e72c      	b.n	ad46 <__aeabi_dmul+0x24a>
    aeec:	ea95 0f0c 	teq	r5, ip
    aef0:	d106      	bne.n	af00 <__aeabi_ddiv+0x1b0>
    aef2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    aef6:	f43f aefd 	beq.w	acf4 <__aeabi_dmul+0x1f8>
    aefa:	4610      	mov	r0, r2
    aefc:	4619      	mov	r1, r3
    aefe:	e722      	b.n	ad46 <__aeabi_dmul+0x24a>
    af00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    af04:	bf18      	it	ne
    af06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    af0a:	f47f aec5 	bne.w	ac98 <__aeabi_dmul+0x19c>
    af0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    af12:	f47f af0d 	bne.w	ad30 <__aeabi_dmul+0x234>
    af16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    af1a:	f47f aeeb 	bne.w	acf4 <__aeabi_dmul+0x1f8>
    af1e:	e712      	b.n	ad46 <__aeabi_dmul+0x24a>

0000af20 <__aeabi_d2uiz>:
    af20:	004a      	lsls	r2, r1, #1
    af22:	d211      	bcs.n	af48 <__aeabi_d2uiz+0x28>
    af24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    af28:	d211      	bcs.n	af4e <__aeabi_d2uiz+0x2e>
    af2a:	d50d      	bpl.n	af48 <__aeabi_d2uiz+0x28>
    af2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    af30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    af34:	d40e      	bmi.n	af54 <__aeabi_d2uiz+0x34>
    af36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    af3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    af3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    af42:	fa23 f002 	lsr.w	r0, r3, r2
    af46:	4770      	bx	lr
    af48:	f04f 0000 	mov.w	r0, #0
    af4c:	4770      	bx	lr
    af4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    af52:	d102      	bne.n	af5a <__aeabi_d2uiz+0x3a>
    af54:	f04f 30ff 	mov.w	r0, #4294967295
    af58:	4770      	bx	lr
    af5a:	f04f 0000 	mov.w	r0, #0
    af5e:	4770      	bx	lr

0000af60 <__libc_init_array>:
    af60:	b570      	push	{r4, r5, r6, lr}
    af62:	4e0d      	ldr	r6, [pc, #52]	; (af98 <__libc_init_array+0x38>)
    af64:	4c0d      	ldr	r4, [pc, #52]	; (af9c <__libc_init_array+0x3c>)
    af66:	1ba4      	subs	r4, r4, r6
    af68:	10a4      	asrs	r4, r4, #2
    af6a:	2500      	movs	r5, #0
    af6c:	42a5      	cmp	r5, r4
    af6e:	d109      	bne.n	af84 <__libc_init_array+0x24>
    af70:	4e0b      	ldr	r6, [pc, #44]	; (afa0 <__libc_init_array+0x40>)
    af72:	4c0c      	ldr	r4, [pc, #48]	; (afa4 <__libc_init_array+0x44>)
    af74:	f001 f8a8 	bl	c0c8 <_init>
    af78:	1ba4      	subs	r4, r4, r6
    af7a:	10a4      	asrs	r4, r4, #2
    af7c:	2500      	movs	r5, #0
    af7e:	42a5      	cmp	r5, r4
    af80:	d105      	bne.n	af8e <__libc_init_array+0x2e>
    af82:	bd70      	pop	{r4, r5, r6, pc}
    af84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    af88:	4798      	blx	r3
    af8a:	3501      	adds	r5, #1
    af8c:	e7ee      	b.n	af6c <__libc_init_array+0xc>
    af8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    af92:	4798      	blx	r3
    af94:	3501      	adds	r5, #1
    af96:	e7f2      	b.n	af7e <__libc_init_array+0x1e>
    af98:	0000c0d4 	.word	0x0000c0d4
    af9c:	0000c0d4 	.word	0x0000c0d4
    afa0:	0000c0d4 	.word	0x0000c0d4
    afa4:	0000c0d8 	.word	0x0000c0d8

0000afa8 <malloc>:
    afa8:	4b02      	ldr	r3, [pc, #8]	; (afb4 <malloc+0xc>)
    afaa:	4601      	mov	r1, r0
    afac:	6818      	ldr	r0, [r3, #0]
    afae:	f000 b865 	b.w	b07c <_malloc_r>
    afb2:	bf00      	nop
    afb4:	20000514 	.word	0x20000514

0000afb8 <memcpy>:
    afb8:	b510      	push	{r4, lr}
    afba:	1e43      	subs	r3, r0, #1
    afbc:	440a      	add	r2, r1
    afbe:	4291      	cmp	r1, r2
    afc0:	d100      	bne.n	afc4 <memcpy+0xc>
    afc2:	bd10      	pop	{r4, pc}
    afc4:	f811 4b01 	ldrb.w	r4, [r1], #1
    afc8:	f803 4f01 	strb.w	r4, [r3, #1]!
    afcc:	e7f7      	b.n	afbe <memcpy+0x6>

0000afce <memset>:
    afce:	4402      	add	r2, r0
    afd0:	4603      	mov	r3, r0
    afd2:	4293      	cmp	r3, r2
    afd4:	d100      	bne.n	afd8 <memset+0xa>
    afd6:	4770      	bx	lr
    afd8:	f803 1b01 	strb.w	r1, [r3], #1
    afdc:	e7f9      	b.n	afd2 <memset+0x4>
	...

0000afe0 <_free_r>:
    afe0:	b538      	push	{r3, r4, r5, lr}
    afe2:	4605      	mov	r5, r0
    afe4:	2900      	cmp	r1, #0
    afe6:	d045      	beq.n	b074 <_free_r+0x94>
    afe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    afec:	1f0c      	subs	r4, r1, #4
    afee:	2b00      	cmp	r3, #0
    aff0:	bfb8      	it	lt
    aff2:	18e4      	addlt	r4, r4, r3
    aff4:	f000 f8dc 	bl	b1b0 <__malloc_lock>
    aff8:	4a1f      	ldr	r2, [pc, #124]	; (b078 <_free_r+0x98>)
    affa:	6813      	ldr	r3, [r2, #0]
    affc:	4610      	mov	r0, r2
    affe:	b933      	cbnz	r3, b00e <_free_r+0x2e>
    b000:	6063      	str	r3, [r4, #4]
    b002:	6014      	str	r4, [r2, #0]
    b004:	4628      	mov	r0, r5
    b006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b00a:	f000 b8d2 	b.w	b1b2 <__malloc_unlock>
    b00e:	42a3      	cmp	r3, r4
    b010:	d90c      	bls.n	b02c <_free_r+0x4c>
    b012:	6821      	ldr	r1, [r4, #0]
    b014:	1862      	adds	r2, r4, r1
    b016:	4293      	cmp	r3, r2
    b018:	bf04      	itt	eq
    b01a:	681a      	ldreq	r2, [r3, #0]
    b01c:	685b      	ldreq	r3, [r3, #4]
    b01e:	6063      	str	r3, [r4, #4]
    b020:	bf04      	itt	eq
    b022:	1852      	addeq	r2, r2, r1
    b024:	6022      	streq	r2, [r4, #0]
    b026:	6004      	str	r4, [r0, #0]
    b028:	e7ec      	b.n	b004 <_free_r+0x24>
    b02a:	4613      	mov	r3, r2
    b02c:	685a      	ldr	r2, [r3, #4]
    b02e:	b10a      	cbz	r2, b034 <_free_r+0x54>
    b030:	42a2      	cmp	r2, r4
    b032:	d9fa      	bls.n	b02a <_free_r+0x4a>
    b034:	6819      	ldr	r1, [r3, #0]
    b036:	1858      	adds	r0, r3, r1
    b038:	42a0      	cmp	r0, r4
    b03a:	d10b      	bne.n	b054 <_free_r+0x74>
    b03c:	6820      	ldr	r0, [r4, #0]
    b03e:	4401      	add	r1, r0
    b040:	1858      	adds	r0, r3, r1
    b042:	4282      	cmp	r2, r0
    b044:	6019      	str	r1, [r3, #0]
    b046:	d1dd      	bne.n	b004 <_free_r+0x24>
    b048:	6810      	ldr	r0, [r2, #0]
    b04a:	6852      	ldr	r2, [r2, #4]
    b04c:	605a      	str	r2, [r3, #4]
    b04e:	4401      	add	r1, r0
    b050:	6019      	str	r1, [r3, #0]
    b052:	e7d7      	b.n	b004 <_free_r+0x24>
    b054:	d902      	bls.n	b05c <_free_r+0x7c>
    b056:	230c      	movs	r3, #12
    b058:	602b      	str	r3, [r5, #0]
    b05a:	e7d3      	b.n	b004 <_free_r+0x24>
    b05c:	6820      	ldr	r0, [r4, #0]
    b05e:	1821      	adds	r1, r4, r0
    b060:	428a      	cmp	r2, r1
    b062:	bf04      	itt	eq
    b064:	6811      	ldreq	r1, [r2, #0]
    b066:	6852      	ldreq	r2, [r2, #4]
    b068:	6062      	str	r2, [r4, #4]
    b06a:	bf04      	itt	eq
    b06c:	1809      	addeq	r1, r1, r0
    b06e:	6021      	streq	r1, [r4, #0]
    b070:	605c      	str	r4, [r3, #4]
    b072:	e7c7      	b.n	b004 <_free_r+0x24>
    b074:	bd38      	pop	{r3, r4, r5, pc}
    b076:	bf00      	nop
    b078:	200012b8 	.word	0x200012b8

0000b07c <_malloc_r>:
    b07c:	b570      	push	{r4, r5, r6, lr}
    b07e:	1ccd      	adds	r5, r1, #3
    b080:	f025 0503 	bic.w	r5, r5, #3
    b084:	3508      	adds	r5, #8
    b086:	2d0c      	cmp	r5, #12
    b088:	bf38      	it	cc
    b08a:	250c      	movcc	r5, #12
    b08c:	2d00      	cmp	r5, #0
    b08e:	4606      	mov	r6, r0
    b090:	db01      	blt.n	b096 <_malloc_r+0x1a>
    b092:	42a9      	cmp	r1, r5
    b094:	d903      	bls.n	b09e <_malloc_r+0x22>
    b096:	230c      	movs	r3, #12
    b098:	6033      	str	r3, [r6, #0]
    b09a:	2000      	movs	r0, #0
    b09c:	bd70      	pop	{r4, r5, r6, pc}
    b09e:	f000 f887 	bl	b1b0 <__malloc_lock>
    b0a2:	4a23      	ldr	r2, [pc, #140]	; (b130 <_malloc_r+0xb4>)
    b0a4:	6814      	ldr	r4, [r2, #0]
    b0a6:	4621      	mov	r1, r4
    b0a8:	b991      	cbnz	r1, b0d0 <_malloc_r+0x54>
    b0aa:	4c22      	ldr	r4, [pc, #136]	; (b134 <_malloc_r+0xb8>)
    b0ac:	6823      	ldr	r3, [r4, #0]
    b0ae:	b91b      	cbnz	r3, b0b8 <_malloc_r+0x3c>
    b0b0:	4630      	mov	r0, r6
    b0b2:	f000 f841 	bl	b138 <_sbrk_r>
    b0b6:	6020      	str	r0, [r4, #0]
    b0b8:	4629      	mov	r1, r5
    b0ba:	4630      	mov	r0, r6
    b0bc:	f000 f83c 	bl	b138 <_sbrk_r>
    b0c0:	1c43      	adds	r3, r0, #1
    b0c2:	d126      	bne.n	b112 <_malloc_r+0x96>
    b0c4:	230c      	movs	r3, #12
    b0c6:	6033      	str	r3, [r6, #0]
    b0c8:	4630      	mov	r0, r6
    b0ca:	f000 f872 	bl	b1b2 <__malloc_unlock>
    b0ce:	e7e4      	b.n	b09a <_malloc_r+0x1e>
    b0d0:	680b      	ldr	r3, [r1, #0]
    b0d2:	1b5b      	subs	r3, r3, r5
    b0d4:	d41a      	bmi.n	b10c <_malloc_r+0x90>
    b0d6:	2b0b      	cmp	r3, #11
    b0d8:	d90f      	bls.n	b0fa <_malloc_r+0x7e>
    b0da:	600b      	str	r3, [r1, #0]
    b0dc:	50cd      	str	r5, [r1, r3]
    b0de:	18cc      	adds	r4, r1, r3
    b0e0:	4630      	mov	r0, r6
    b0e2:	f000 f866 	bl	b1b2 <__malloc_unlock>
    b0e6:	f104 000b 	add.w	r0, r4, #11
    b0ea:	1d23      	adds	r3, r4, #4
    b0ec:	f020 0007 	bic.w	r0, r0, #7
    b0f0:	1ac3      	subs	r3, r0, r3
    b0f2:	d01b      	beq.n	b12c <_malloc_r+0xb0>
    b0f4:	425a      	negs	r2, r3
    b0f6:	50e2      	str	r2, [r4, r3]
    b0f8:	bd70      	pop	{r4, r5, r6, pc}
    b0fa:	428c      	cmp	r4, r1
    b0fc:	bf0d      	iteet	eq
    b0fe:	6863      	ldreq	r3, [r4, #4]
    b100:	684b      	ldrne	r3, [r1, #4]
    b102:	6063      	strne	r3, [r4, #4]
    b104:	6013      	streq	r3, [r2, #0]
    b106:	bf18      	it	ne
    b108:	460c      	movne	r4, r1
    b10a:	e7e9      	b.n	b0e0 <_malloc_r+0x64>
    b10c:	460c      	mov	r4, r1
    b10e:	6849      	ldr	r1, [r1, #4]
    b110:	e7ca      	b.n	b0a8 <_malloc_r+0x2c>
    b112:	1cc4      	adds	r4, r0, #3
    b114:	f024 0403 	bic.w	r4, r4, #3
    b118:	42a0      	cmp	r0, r4
    b11a:	d005      	beq.n	b128 <_malloc_r+0xac>
    b11c:	1a21      	subs	r1, r4, r0
    b11e:	4630      	mov	r0, r6
    b120:	f000 f80a 	bl	b138 <_sbrk_r>
    b124:	3001      	adds	r0, #1
    b126:	d0cd      	beq.n	b0c4 <_malloc_r+0x48>
    b128:	6025      	str	r5, [r4, #0]
    b12a:	e7d9      	b.n	b0e0 <_malloc_r+0x64>
    b12c:	bd70      	pop	{r4, r5, r6, pc}
    b12e:	bf00      	nop
    b130:	200012b8 	.word	0x200012b8
    b134:	200012bc 	.word	0x200012bc

0000b138 <_sbrk_r>:
    b138:	b538      	push	{r3, r4, r5, lr}
    b13a:	4c06      	ldr	r4, [pc, #24]	; (b154 <_sbrk_r+0x1c>)
    b13c:	2300      	movs	r3, #0
    b13e:	4605      	mov	r5, r0
    b140:	4608      	mov	r0, r1
    b142:	6023      	str	r3, [r4, #0]
    b144:	f7fa f94c 	bl	53e0 <_sbrk>
    b148:	1c43      	adds	r3, r0, #1
    b14a:	d102      	bne.n	b152 <_sbrk_r+0x1a>
    b14c:	6823      	ldr	r3, [r4, #0]
    b14e:	b103      	cbz	r3, b152 <_sbrk_r+0x1a>
    b150:	602b      	str	r3, [r5, #0]
    b152:	bd38      	pop	{r3, r4, r5, pc}
    b154:	20002c34 	.word	0x20002c34

0000b158 <siprintf>:
    b158:	b40e      	push	{r1, r2, r3}
    b15a:	b500      	push	{lr}
    b15c:	b09c      	sub	sp, #112	; 0x70
    b15e:	f44f 7102 	mov.w	r1, #520	; 0x208
    b162:	ab1d      	add	r3, sp, #116	; 0x74
    b164:	f8ad 1014 	strh.w	r1, [sp, #20]
    b168:	9002      	str	r0, [sp, #8]
    b16a:	9006      	str	r0, [sp, #24]
    b16c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b170:	480a      	ldr	r0, [pc, #40]	; (b19c <siprintf+0x44>)
    b172:	9104      	str	r1, [sp, #16]
    b174:	9107      	str	r1, [sp, #28]
    b176:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b17a:	f853 2b04 	ldr.w	r2, [r3], #4
    b17e:	f8ad 1016 	strh.w	r1, [sp, #22]
    b182:	6800      	ldr	r0, [r0, #0]
    b184:	9301      	str	r3, [sp, #4]
    b186:	a902      	add	r1, sp, #8
    b188:	f000 f870 	bl	b26c <_svfiprintf_r>
    b18c:	9b02      	ldr	r3, [sp, #8]
    b18e:	2200      	movs	r2, #0
    b190:	701a      	strb	r2, [r3, #0]
    b192:	b01c      	add	sp, #112	; 0x70
    b194:	f85d eb04 	ldr.w	lr, [sp], #4
    b198:	b003      	add	sp, #12
    b19a:	4770      	bx	lr
    b19c:	20000514 	.word	0x20000514

0000b1a0 <strlen>:
    b1a0:	4603      	mov	r3, r0
    b1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
    b1a6:	2a00      	cmp	r2, #0
    b1a8:	d1fb      	bne.n	b1a2 <strlen+0x2>
    b1aa:	1a18      	subs	r0, r3, r0
    b1ac:	3801      	subs	r0, #1
    b1ae:	4770      	bx	lr

0000b1b0 <__malloc_lock>:
    b1b0:	4770      	bx	lr

0000b1b2 <__malloc_unlock>:
    b1b2:	4770      	bx	lr

0000b1b4 <__ssputs_r>:
    b1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1b8:	688e      	ldr	r6, [r1, #8]
    b1ba:	429e      	cmp	r6, r3
    b1bc:	4682      	mov	sl, r0
    b1be:	460c      	mov	r4, r1
    b1c0:	4691      	mov	r9, r2
    b1c2:	4698      	mov	r8, r3
    b1c4:	d835      	bhi.n	b232 <__ssputs_r+0x7e>
    b1c6:	898a      	ldrh	r2, [r1, #12]
    b1c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
    b1cc:	d031      	beq.n	b232 <__ssputs_r+0x7e>
    b1ce:	6825      	ldr	r5, [r4, #0]
    b1d0:	6909      	ldr	r1, [r1, #16]
    b1d2:	1a6f      	subs	r7, r5, r1
    b1d4:	6965      	ldr	r5, [r4, #20]
    b1d6:	2302      	movs	r3, #2
    b1d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    b1dc:	fb95 f5f3 	sdiv	r5, r5, r3
    b1e0:	f108 0301 	add.w	r3, r8, #1
    b1e4:	443b      	add	r3, r7
    b1e6:	429d      	cmp	r5, r3
    b1e8:	bf38      	it	cc
    b1ea:	461d      	movcc	r5, r3
    b1ec:	0553      	lsls	r3, r2, #21
    b1ee:	d531      	bpl.n	b254 <__ssputs_r+0xa0>
    b1f0:	4629      	mov	r1, r5
    b1f2:	f7ff ff43 	bl	b07c <_malloc_r>
    b1f6:	4606      	mov	r6, r0
    b1f8:	b950      	cbnz	r0, b210 <__ssputs_r+0x5c>
    b1fa:	230c      	movs	r3, #12
    b1fc:	f8ca 3000 	str.w	r3, [sl]
    b200:	89a3      	ldrh	r3, [r4, #12]
    b202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b206:	81a3      	strh	r3, [r4, #12]
    b208:	f04f 30ff 	mov.w	r0, #4294967295
    b20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b210:	463a      	mov	r2, r7
    b212:	6921      	ldr	r1, [r4, #16]
    b214:	f7ff fed0 	bl	afb8 <memcpy>
    b218:	89a3      	ldrh	r3, [r4, #12]
    b21a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    b21e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b222:	81a3      	strh	r3, [r4, #12]
    b224:	6126      	str	r6, [r4, #16]
    b226:	6165      	str	r5, [r4, #20]
    b228:	443e      	add	r6, r7
    b22a:	1bed      	subs	r5, r5, r7
    b22c:	6026      	str	r6, [r4, #0]
    b22e:	60a5      	str	r5, [r4, #8]
    b230:	4646      	mov	r6, r8
    b232:	4546      	cmp	r6, r8
    b234:	bf28      	it	cs
    b236:	4646      	movcs	r6, r8
    b238:	4632      	mov	r2, r6
    b23a:	4649      	mov	r1, r9
    b23c:	6820      	ldr	r0, [r4, #0]
    b23e:	f000 faef 	bl	b820 <memmove>
    b242:	68a3      	ldr	r3, [r4, #8]
    b244:	1b9b      	subs	r3, r3, r6
    b246:	60a3      	str	r3, [r4, #8]
    b248:	6823      	ldr	r3, [r4, #0]
    b24a:	441e      	add	r6, r3
    b24c:	6026      	str	r6, [r4, #0]
    b24e:	2000      	movs	r0, #0
    b250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b254:	462a      	mov	r2, r5
    b256:	f000 fafd 	bl	b854 <_realloc_r>
    b25a:	4606      	mov	r6, r0
    b25c:	2800      	cmp	r0, #0
    b25e:	d1e1      	bne.n	b224 <__ssputs_r+0x70>
    b260:	6921      	ldr	r1, [r4, #16]
    b262:	4650      	mov	r0, sl
    b264:	f7ff febc 	bl	afe0 <_free_r>
    b268:	e7c7      	b.n	b1fa <__ssputs_r+0x46>
	...

0000b26c <_svfiprintf_r>:
    b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b270:	b09d      	sub	sp, #116	; 0x74
    b272:	4680      	mov	r8, r0
    b274:	9303      	str	r3, [sp, #12]
    b276:	898b      	ldrh	r3, [r1, #12]
    b278:	061c      	lsls	r4, r3, #24
    b27a:	460d      	mov	r5, r1
    b27c:	4616      	mov	r6, r2
    b27e:	d50f      	bpl.n	b2a0 <_svfiprintf_r+0x34>
    b280:	690b      	ldr	r3, [r1, #16]
    b282:	b96b      	cbnz	r3, b2a0 <_svfiprintf_r+0x34>
    b284:	2140      	movs	r1, #64	; 0x40
    b286:	f7ff fef9 	bl	b07c <_malloc_r>
    b28a:	6028      	str	r0, [r5, #0]
    b28c:	6128      	str	r0, [r5, #16]
    b28e:	b928      	cbnz	r0, b29c <_svfiprintf_r+0x30>
    b290:	230c      	movs	r3, #12
    b292:	f8c8 3000 	str.w	r3, [r8]
    b296:	f04f 30ff 	mov.w	r0, #4294967295
    b29a:	e0c5      	b.n	b428 <_svfiprintf_r+0x1bc>
    b29c:	2340      	movs	r3, #64	; 0x40
    b29e:	616b      	str	r3, [r5, #20]
    b2a0:	2300      	movs	r3, #0
    b2a2:	9309      	str	r3, [sp, #36]	; 0x24
    b2a4:	2320      	movs	r3, #32
    b2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    b2aa:	2330      	movs	r3, #48	; 0x30
    b2ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    b2b0:	f04f 0b01 	mov.w	fp, #1
    b2b4:	4637      	mov	r7, r6
    b2b6:	463c      	mov	r4, r7
    b2b8:	f814 3b01 	ldrb.w	r3, [r4], #1
    b2bc:	2b00      	cmp	r3, #0
    b2be:	d13c      	bne.n	b33a <_svfiprintf_r+0xce>
    b2c0:	ebb7 0a06 	subs.w	sl, r7, r6
    b2c4:	d00b      	beq.n	b2de <_svfiprintf_r+0x72>
    b2c6:	4653      	mov	r3, sl
    b2c8:	4632      	mov	r2, r6
    b2ca:	4629      	mov	r1, r5
    b2cc:	4640      	mov	r0, r8
    b2ce:	f7ff ff71 	bl	b1b4 <__ssputs_r>
    b2d2:	3001      	adds	r0, #1
    b2d4:	f000 80a3 	beq.w	b41e <_svfiprintf_r+0x1b2>
    b2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b2da:	4453      	add	r3, sl
    b2dc:	9309      	str	r3, [sp, #36]	; 0x24
    b2de:	783b      	ldrb	r3, [r7, #0]
    b2e0:	2b00      	cmp	r3, #0
    b2e2:	f000 809c 	beq.w	b41e <_svfiprintf_r+0x1b2>
    b2e6:	2300      	movs	r3, #0
    b2e8:	f04f 32ff 	mov.w	r2, #4294967295
    b2ec:	9304      	str	r3, [sp, #16]
    b2ee:	9307      	str	r3, [sp, #28]
    b2f0:	9205      	str	r2, [sp, #20]
    b2f2:	9306      	str	r3, [sp, #24]
    b2f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    b2f8:	931a      	str	r3, [sp, #104]	; 0x68
    b2fa:	2205      	movs	r2, #5
    b2fc:	7821      	ldrb	r1, [r4, #0]
    b2fe:	4850      	ldr	r0, [pc, #320]	; (b440 <_svfiprintf_r+0x1d4>)
    b300:	f000 fa3e 	bl	b780 <memchr>
    b304:	1c67      	adds	r7, r4, #1
    b306:	9b04      	ldr	r3, [sp, #16]
    b308:	b9d8      	cbnz	r0, b342 <_svfiprintf_r+0xd6>
    b30a:	06d9      	lsls	r1, r3, #27
    b30c:	bf44      	itt	mi
    b30e:	2220      	movmi	r2, #32
    b310:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b314:	071a      	lsls	r2, r3, #28
    b316:	bf44      	itt	mi
    b318:	222b      	movmi	r2, #43	; 0x2b
    b31a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b31e:	7822      	ldrb	r2, [r4, #0]
    b320:	2a2a      	cmp	r2, #42	; 0x2a
    b322:	d016      	beq.n	b352 <_svfiprintf_r+0xe6>
    b324:	9a07      	ldr	r2, [sp, #28]
    b326:	2100      	movs	r1, #0
    b328:	200a      	movs	r0, #10
    b32a:	4627      	mov	r7, r4
    b32c:	3401      	adds	r4, #1
    b32e:	783b      	ldrb	r3, [r7, #0]
    b330:	3b30      	subs	r3, #48	; 0x30
    b332:	2b09      	cmp	r3, #9
    b334:	d951      	bls.n	b3da <_svfiprintf_r+0x16e>
    b336:	b1c9      	cbz	r1, b36c <_svfiprintf_r+0x100>
    b338:	e011      	b.n	b35e <_svfiprintf_r+0xf2>
    b33a:	2b25      	cmp	r3, #37	; 0x25
    b33c:	d0c0      	beq.n	b2c0 <_svfiprintf_r+0x54>
    b33e:	4627      	mov	r7, r4
    b340:	e7b9      	b.n	b2b6 <_svfiprintf_r+0x4a>
    b342:	4a3f      	ldr	r2, [pc, #252]	; (b440 <_svfiprintf_r+0x1d4>)
    b344:	1a80      	subs	r0, r0, r2
    b346:	fa0b f000 	lsl.w	r0, fp, r0
    b34a:	4318      	orrs	r0, r3
    b34c:	9004      	str	r0, [sp, #16]
    b34e:	463c      	mov	r4, r7
    b350:	e7d3      	b.n	b2fa <_svfiprintf_r+0x8e>
    b352:	9a03      	ldr	r2, [sp, #12]
    b354:	1d11      	adds	r1, r2, #4
    b356:	6812      	ldr	r2, [r2, #0]
    b358:	9103      	str	r1, [sp, #12]
    b35a:	2a00      	cmp	r2, #0
    b35c:	db01      	blt.n	b362 <_svfiprintf_r+0xf6>
    b35e:	9207      	str	r2, [sp, #28]
    b360:	e004      	b.n	b36c <_svfiprintf_r+0x100>
    b362:	4252      	negs	r2, r2
    b364:	f043 0302 	orr.w	r3, r3, #2
    b368:	9207      	str	r2, [sp, #28]
    b36a:	9304      	str	r3, [sp, #16]
    b36c:	783b      	ldrb	r3, [r7, #0]
    b36e:	2b2e      	cmp	r3, #46	; 0x2e
    b370:	d10e      	bne.n	b390 <_svfiprintf_r+0x124>
    b372:	787b      	ldrb	r3, [r7, #1]
    b374:	2b2a      	cmp	r3, #42	; 0x2a
    b376:	f107 0101 	add.w	r1, r7, #1
    b37a:	d132      	bne.n	b3e2 <_svfiprintf_r+0x176>
    b37c:	9b03      	ldr	r3, [sp, #12]
    b37e:	1d1a      	adds	r2, r3, #4
    b380:	681b      	ldr	r3, [r3, #0]
    b382:	9203      	str	r2, [sp, #12]
    b384:	2b00      	cmp	r3, #0
    b386:	bfb8      	it	lt
    b388:	f04f 33ff 	movlt.w	r3, #4294967295
    b38c:	3702      	adds	r7, #2
    b38e:	9305      	str	r3, [sp, #20]
    b390:	4c2c      	ldr	r4, [pc, #176]	; (b444 <_svfiprintf_r+0x1d8>)
    b392:	7839      	ldrb	r1, [r7, #0]
    b394:	2203      	movs	r2, #3
    b396:	4620      	mov	r0, r4
    b398:	f000 f9f2 	bl	b780 <memchr>
    b39c:	b138      	cbz	r0, b3ae <_svfiprintf_r+0x142>
    b39e:	2340      	movs	r3, #64	; 0x40
    b3a0:	1b00      	subs	r0, r0, r4
    b3a2:	fa03 f000 	lsl.w	r0, r3, r0
    b3a6:	9b04      	ldr	r3, [sp, #16]
    b3a8:	4303      	orrs	r3, r0
    b3aa:	9304      	str	r3, [sp, #16]
    b3ac:	3701      	adds	r7, #1
    b3ae:	7839      	ldrb	r1, [r7, #0]
    b3b0:	4825      	ldr	r0, [pc, #148]	; (b448 <_svfiprintf_r+0x1dc>)
    b3b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    b3b6:	2206      	movs	r2, #6
    b3b8:	1c7e      	adds	r6, r7, #1
    b3ba:	f000 f9e1 	bl	b780 <memchr>
    b3be:	2800      	cmp	r0, #0
    b3c0:	d035      	beq.n	b42e <_svfiprintf_r+0x1c2>
    b3c2:	4b22      	ldr	r3, [pc, #136]	; (b44c <_svfiprintf_r+0x1e0>)
    b3c4:	b9fb      	cbnz	r3, b406 <_svfiprintf_r+0x19a>
    b3c6:	9b03      	ldr	r3, [sp, #12]
    b3c8:	3307      	adds	r3, #7
    b3ca:	f023 0307 	bic.w	r3, r3, #7
    b3ce:	3308      	adds	r3, #8
    b3d0:	9303      	str	r3, [sp, #12]
    b3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b3d4:	444b      	add	r3, r9
    b3d6:	9309      	str	r3, [sp, #36]	; 0x24
    b3d8:	e76c      	b.n	b2b4 <_svfiprintf_r+0x48>
    b3da:	fb00 3202 	mla	r2, r0, r2, r3
    b3de:	2101      	movs	r1, #1
    b3e0:	e7a3      	b.n	b32a <_svfiprintf_r+0xbe>
    b3e2:	2300      	movs	r3, #0
    b3e4:	9305      	str	r3, [sp, #20]
    b3e6:	4618      	mov	r0, r3
    b3e8:	240a      	movs	r4, #10
    b3ea:	460f      	mov	r7, r1
    b3ec:	3101      	adds	r1, #1
    b3ee:	783a      	ldrb	r2, [r7, #0]
    b3f0:	3a30      	subs	r2, #48	; 0x30
    b3f2:	2a09      	cmp	r2, #9
    b3f4:	d903      	bls.n	b3fe <_svfiprintf_r+0x192>
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	d0ca      	beq.n	b390 <_svfiprintf_r+0x124>
    b3fa:	9005      	str	r0, [sp, #20]
    b3fc:	e7c8      	b.n	b390 <_svfiprintf_r+0x124>
    b3fe:	fb04 2000 	mla	r0, r4, r0, r2
    b402:	2301      	movs	r3, #1
    b404:	e7f1      	b.n	b3ea <_svfiprintf_r+0x17e>
    b406:	ab03      	add	r3, sp, #12
    b408:	9300      	str	r3, [sp, #0]
    b40a:	462a      	mov	r2, r5
    b40c:	4b10      	ldr	r3, [pc, #64]	; (b450 <_svfiprintf_r+0x1e4>)
    b40e:	a904      	add	r1, sp, #16
    b410:	4640      	mov	r0, r8
    b412:	f3af 8000 	nop.w
    b416:	f1b0 3fff 	cmp.w	r0, #4294967295
    b41a:	4681      	mov	r9, r0
    b41c:	d1d9      	bne.n	b3d2 <_svfiprintf_r+0x166>
    b41e:	89ab      	ldrh	r3, [r5, #12]
    b420:	065b      	lsls	r3, r3, #25
    b422:	f53f af38 	bmi.w	b296 <_svfiprintf_r+0x2a>
    b426:	9809      	ldr	r0, [sp, #36]	; 0x24
    b428:	b01d      	add	sp, #116	; 0x74
    b42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b42e:	ab03      	add	r3, sp, #12
    b430:	9300      	str	r3, [sp, #0]
    b432:	462a      	mov	r2, r5
    b434:	4b06      	ldr	r3, [pc, #24]	; (b450 <_svfiprintf_r+0x1e4>)
    b436:	a904      	add	r1, sp, #16
    b438:	4640      	mov	r0, r8
    b43a:	f000 f881 	bl	b540 <_printf_i>
    b43e:	e7ea      	b.n	b416 <_svfiprintf_r+0x1aa>
    b440:	0000c094 	.word	0x0000c094
    b444:	0000c09a 	.word	0x0000c09a
    b448:	0000c09e 	.word	0x0000c09e
    b44c:	00000000 	.word	0x00000000
    b450:	0000b1b5 	.word	0x0000b1b5

0000b454 <_printf_common>:
    b454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b458:	4691      	mov	r9, r2
    b45a:	461f      	mov	r7, r3
    b45c:	688a      	ldr	r2, [r1, #8]
    b45e:	690b      	ldr	r3, [r1, #16]
    b460:	f8dd 8020 	ldr.w	r8, [sp, #32]
    b464:	4293      	cmp	r3, r2
    b466:	bfb8      	it	lt
    b468:	4613      	movlt	r3, r2
    b46a:	f8c9 3000 	str.w	r3, [r9]
    b46e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    b472:	4606      	mov	r6, r0
    b474:	460c      	mov	r4, r1
    b476:	b112      	cbz	r2, b47e <_printf_common+0x2a>
    b478:	3301      	adds	r3, #1
    b47a:	f8c9 3000 	str.w	r3, [r9]
    b47e:	6823      	ldr	r3, [r4, #0]
    b480:	0699      	lsls	r1, r3, #26
    b482:	bf42      	ittt	mi
    b484:	f8d9 3000 	ldrmi.w	r3, [r9]
    b488:	3302      	addmi	r3, #2
    b48a:	f8c9 3000 	strmi.w	r3, [r9]
    b48e:	6825      	ldr	r5, [r4, #0]
    b490:	f015 0506 	ands.w	r5, r5, #6
    b494:	d107      	bne.n	b4a6 <_printf_common+0x52>
    b496:	f104 0a19 	add.w	sl, r4, #25
    b49a:	68e3      	ldr	r3, [r4, #12]
    b49c:	f8d9 2000 	ldr.w	r2, [r9]
    b4a0:	1a9b      	subs	r3, r3, r2
    b4a2:	429d      	cmp	r5, r3
    b4a4:	db29      	blt.n	b4fa <_printf_common+0xa6>
    b4a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    b4aa:	6822      	ldr	r2, [r4, #0]
    b4ac:	3300      	adds	r3, #0
    b4ae:	bf18      	it	ne
    b4b0:	2301      	movne	r3, #1
    b4b2:	0692      	lsls	r2, r2, #26
    b4b4:	d42e      	bmi.n	b514 <_printf_common+0xc0>
    b4b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    b4ba:	4639      	mov	r1, r7
    b4bc:	4630      	mov	r0, r6
    b4be:	47c0      	blx	r8
    b4c0:	3001      	adds	r0, #1
    b4c2:	d021      	beq.n	b508 <_printf_common+0xb4>
    b4c4:	6823      	ldr	r3, [r4, #0]
    b4c6:	68e5      	ldr	r5, [r4, #12]
    b4c8:	f8d9 2000 	ldr.w	r2, [r9]
    b4cc:	f003 0306 	and.w	r3, r3, #6
    b4d0:	2b04      	cmp	r3, #4
    b4d2:	bf08      	it	eq
    b4d4:	1aad      	subeq	r5, r5, r2
    b4d6:	68a3      	ldr	r3, [r4, #8]
    b4d8:	6922      	ldr	r2, [r4, #16]
    b4da:	bf0c      	ite	eq
    b4dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    b4e0:	2500      	movne	r5, #0
    b4e2:	4293      	cmp	r3, r2
    b4e4:	bfc4      	itt	gt
    b4e6:	1a9b      	subgt	r3, r3, r2
    b4e8:	18ed      	addgt	r5, r5, r3
    b4ea:	f04f 0900 	mov.w	r9, #0
    b4ee:	341a      	adds	r4, #26
    b4f0:	454d      	cmp	r5, r9
    b4f2:	d11b      	bne.n	b52c <_printf_common+0xd8>
    b4f4:	2000      	movs	r0, #0
    b4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4fa:	2301      	movs	r3, #1
    b4fc:	4652      	mov	r2, sl
    b4fe:	4639      	mov	r1, r7
    b500:	4630      	mov	r0, r6
    b502:	47c0      	blx	r8
    b504:	3001      	adds	r0, #1
    b506:	d103      	bne.n	b510 <_printf_common+0xbc>
    b508:	f04f 30ff 	mov.w	r0, #4294967295
    b50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b510:	3501      	adds	r5, #1
    b512:	e7c2      	b.n	b49a <_printf_common+0x46>
    b514:	18e1      	adds	r1, r4, r3
    b516:	1c5a      	adds	r2, r3, #1
    b518:	2030      	movs	r0, #48	; 0x30
    b51a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    b51e:	4422      	add	r2, r4
    b520:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    b524:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    b528:	3302      	adds	r3, #2
    b52a:	e7c4      	b.n	b4b6 <_printf_common+0x62>
    b52c:	2301      	movs	r3, #1
    b52e:	4622      	mov	r2, r4
    b530:	4639      	mov	r1, r7
    b532:	4630      	mov	r0, r6
    b534:	47c0      	blx	r8
    b536:	3001      	adds	r0, #1
    b538:	d0e6      	beq.n	b508 <_printf_common+0xb4>
    b53a:	f109 0901 	add.w	r9, r9, #1
    b53e:	e7d7      	b.n	b4f0 <_printf_common+0x9c>

0000b540 <_printf_i>:
    b540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b544:	4617      	mov	r7, r2
    b546:	7e0a      	ldrb	r2, [r1, #24]
    b548:	b085      	sub	sp, #20
    b54a:	2a6e      	cmp	r2, #110	; 0x6e
    b54c:	4698      	mov	r8, r3
    b54e:	4606      	mov	r6, r0
    b550:	460c      	mov	r4, r1
    b552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b554:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    b558:	f000 80bc 	beq.w	b6d4 <_printf_i+0x194>
    b55c:	d81a      	bhi.n	b594 <_printf_i+0x54>
    b55e:	2a63      	cmp	r2, #99	; 0x63
    b560:	d02e      	beq.n	b5c0 <_printf_i+0x80>
    b562:	d80a      	bhi.n	b57a <_printf_i+0x3a>
    b564:	2a00      	cmp	r2, #0
    b566:	f000 80c8 	beq.w	b6fa <_printf_i+0x1ba>
    b56a:	2a58      	cmp	r2, #88	; 0x58
    b56c:	f000 808a 	beq.w	b684 <_printf_i+0x144>
    b570:	f104 0542 	add.w	r5, r4, #66	; 0x42
    b574:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    b578:	e02a      	b.n	b5d0 <_printf_i+0x90>
    b57a:	2a64      	cmp	r2, #100	; 0x64
    b57c:	d001      	beq.n	b582 <_printf_i+0x42>
    b57e:	2a69      	cmp	r2, #105	; 0x69
    b580:	d1f6      	bne.n	b570 <_printf_i+0x30>
    b582:	6821      	ldr	r1, [r4, #0]
    b584:	681a      	ldr	r2, [r3, #0]
    b586:	f011 0f80 	tst.w	r1, #128	; 0x80
    b58a:	d023      	beq.n	b5d4 <_printf_i+0x94>
    b58c:	1d11      	adds	r1, r2, #4
    b58e:	6019      	str	r1, [r3, #0]
    b590:	6813      	ldr	r3, [r2, #0]
    b592:	e027      	b.n	b5e4 <_printf_i+0xa4>
    b594:	2a73      	cmp	r2, #115	; 0x73
    b596:	f000 80b4 	beq.w	b702 <_printf_i+0x1c2>
    b59a:	d808      	bhi.n	b5ae <_printf_i+0x6e>
    b59c:	2a6f      	cmp	r2, #111	; 0x6f
    b59e:	d02a      	beq.n	b5f6 <_printf_i+0xb6>
    b5a0:	2a70      	cmp	r2, #112	; 0x70
    b5a2:	d1e5      	bne.n	b570 <_printf_i+0x30>
    b5a4:	680a      	ldr	r2, [r1, #0]
    b5a6:	f042 0220 	orr.w	r2, r2, #32
    b5aa:	600a      	str	r2, [r1, #0]
    b5ac:	e003      	b.n	b5b6 <_printf_i+0x76>
    b5ae:	2a75      	cmp	r2, #117	; 0x75
    b5b0:	d021      	beq.n	b5f6 <_printf_i+0xb6>
    b5b2:	2a78      	cmp	r2, #120	; 0x78
    b5b4:	d1dc      	bne.n	b570 <_printf_i+0x30>
    b5b6:	2278      	movs	r2, #120	; 0x78
    b5b8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    b5bc:	496e      	ldr	r1, [pc, #440]	; (b778 <_printf_i+0x238>)
    b5be:	e064      	b.n	b68a <_printf_i+0x14a>
    b5c0:	681a      	ldr	r2, [r3, #0]
    b5c2:	f101 0542 	add.w	r5, r1, #66	; 0x42
    b5c6:	1d11      	adds	r1, r2, #4
    b5c8:	6019      	str	r1, [r3, #0]
    b5ca:	6813      	ldr	r3, [r2, #0]
    b5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    b5d0:	2301      	movs	r3, #1
    b5d2:	e0a3      	b.n	b71c <_printf_i+0x1dc>
    b5d4:	f011 0f40 	tst.w	r1, #64	; 0x40
    b5d8:	f102 0104 	add.w	r1, r2, #4
    b5dc:	6019      	str	r1, [r3, #0]
    b5de:	d0d7      	beq.n	b590 <_printf_i+0x50>
    b5e0:	f9b2 3000 	ldrsh.w	r3, [r2]
    b5e4:	2b00      	cmp	r3, #0
    b5e6:	da03      	bge.n	b5f0 <_printf_i+0xb0>
    b5e8:	222d      	movs	r2, #45	; 0x2d
    b5ea:	425b      	negs	r3, r3
    b5ec:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    b5f0:	4962      	ldr	r1, [pc, #392]	; (b77c <_printf_i+0x23c>)
    b5f2:	220a      	movs	r2, #10
    b5f4:	e017      	b.n	b626 <_printf_i+0xe6>
    b5f6:	6820      	ldr	r0, [r4, #0]
    b5f8:	6819      	ldr	r1, [r3, #0]
    b5fa:	f010 0f80 	tst.w	r0, #128	; 0x80
    b5fe:	d003      	beq.n	b608 <_printf_i+0xc8>
    b600:	1d08      	adds	r0, r1, #4
    b602:	6018      	str	r0, [r3, #0]
    b604:	680b      	ldr	r3, [r1, #0]
    b606:	e006      	b.n	b616 <_printf_i+0xd6>
    b608:	f010 0f40 	tst.w	r0, #64	; 0x40
    b60c:	f101 0004 	add.w	r0, r1, #4
    b610:	6018      	str	r0, [r3, #0]
    b612:	d0f7      	beq.n	b604 <_printf_i+0xc4>
    b614:	880b      	ldrh	r3, [r1, #0]
    b616:	4959      	ldr	r1, [pc, #356]	; (b77c <_printf_i+0x23c>)
    b618:	2a6f      	cmp	r2, #111	; 0x6f
    b61a:	bf14      	ite	ne
    b61c:	220a      	movne	r2, #10
    b61e:	2208      	moveq	r2, #8
    b620:	2000      	movs	r0, #0
    b622:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    b626:	6865      	ldr	r5, [r4, #4]
    b628:	60a5      	str	r5, [r4, #8]
    b62a:	2d00      	cmp	r5, #0
    b62c:	f2c0 809c 	blt.w	b768 <_printf_i+0x228>
    b630:	6820      	ldr	r0, [r4, #0]
    b632:	f020 0004 	bic.w	r0, r0, #4
    b636:	6020      	str	r0, [r4, #0]
    b638:	2b00      	cmp	r3, #0
    b63a:	d13f      	bne.n	b6bc <_printf_i+0x17c>
    b63c:	2d00      	cmp	r5, #0
    b63e:	f040 8095 	bne.w	b76c <_printf_i+0x22c>
    b642:	4675      	mov	r5, lr
    b644:	2a08      	cmp	r2, #8
    b646:	d10b      	bne.n	b660 <_printf_i+0x120>
    b648:	6823      	ldr	r3, [r4, #0]
    b64a:	07da      	lsls	r2, r3, #31
    b64c:	d508      	bpl.n	b660 <_printf_i+0x120>
    b64e:	6923      	ldr	r3, [r4, #16]
    b650:	6862      	ldr	r2, [r4, #4]
    b652:	429a      	cmp	r2, r3
    b654:	bfde      	ittt	le
    b656:	2330      	movle	r3, #48	; 0x30
    b658:	f805 3c01 	strble.w	r3, [r5, #-1]
    b65c:	f105 35ff 	addle.w	r5, r5, #4294967295
    b660:	ebae 0305 	sub.w	r3, lr, r5
    b664:	6123      	str	r3, [r4, #16]
    b666:	f8cd 8000 	str.w	r8, [sp]
    b66a:	463b      	mov	r3, r7
    b66c:	aa03      	add	r2, sp, #12
    b66e:	4621      	mov	r1, r4
    b670:	4630      	mov	r0, r6
    b672:	f7ff feef 	bl	b454 <_printf_common>
    b676:	3001      	adds	r0, #1
    b678:	d155      	bne.n	b726 <_printf_i+0x1e6>
    b67a:	f04f 30ff 	mov.w	r0, #4294967295
    b67e:	b005      	add	sp, #20
    b680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b684:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    b688:	493c      	ldr	r1, [pc, #240]	; (b77c <_printf_i+0x23c>)
    b68a:	6822      	ldr	r2, [r4, #0]
    b68c:	6818      	ldr	r0, [r3, #0]
    b68e:	f012 0f80 	tst.w	r2, #128	; 0x80
    b692:	f100 0504 	add.w	r5, r0, #4
    b696:	601d      	str	r5, [r3, #0]
    b698:	d001      	beq.n	b69e <_printf_i+0x15e>
    b69a:	6803      	ldr	r3, [r0, #0]
    b69c:	e002      	b.n	b6a4 <_printf_i+0x164>
    b69e:	0655      	lsls	r5, r2, #25
    b6a0:	d5fb      	bpl.n	b69a <_printf_i+0x15a>
    b6a2:	8803      	ldrh	r3, [r0, #0]
    b6a4:	07d0      	lsls	r0, r2, #31
    b6a6:	bf44      	itt	mi
    b6a8:	f042 0220 	orrmi.w	r2, r2, #32
    b6ac:	6022      	strmi	r2, [r4, #0]
    b6ae:	b91b      	cbnz	r3, b6b8 <_printf_i+0x178>
    b6b0:	6822      	ldr	r2, [r4, #0]
    b6b2:	f022 0220 	bic.w	r2, r2, #32
    b6b6:	6022      	str	r2, [r4, #0]
    b6b8:	2210      	movs	r2, #16
    b6ba:	e7b1      	b.n	b620 <_printf_i+0xe0>
    b6bc:	4675      	mov	r5, lr
    b6be:	fbb3 f0f2 	udiv	r0, r3, r2
    b6c2:	fb02 3310 	mls	r3, r2, r0, r3
    b6c6:	5ccb      	ldrb	r3, [r1, r3]
    b6c8:	f805 3d01 	strb.w	r3, [r5, #-1]!
    b6cc:	4603      	mov	r3, r0
    b6ce:	2800      	cmp	r0, #0
    b6d0:	d1f5      	bne.n	b6be <_printf_i+0x17e>
    b6d2:	e7b7      	b.n	b644 <_printf_i+0x104>
    b6d4:	6808      	ldr	r0, [r1, #0]
    b6d6:	681a      	ldr	r2, [r3, #0]
    b6d8:	6949      	ldr	r1, [r1, #20]
    b6da:	f010 0f80 	tst.w	r0, #128	; 0x80
    b6de:	d004      	beq.n	b6ea <_printf_i+0x1aa>
    b6e0:	1d10      	adds	r0, r2, #4
    b6e2:	6018      	str	r0, [r3, #0]
    b6e4:	6813      	ldr	r3, [r2, #0]
    b6e6:	6019      	str	r1, [r3, #0]
    b6e8:	e007      	b.n	b6fa <_printf_i+0x1ba>
    b6ea:	f010 0f40 	tst.w	r0, #64	; 0x40
    b6ee:	f102 0004 	add.w	r0, r2, #4
    b6f2:	6018      	str	r0, [r3, #0]
    b6f4:	6813      	ldr	r3, [r2, #0]
    b6f6:	d0f6      	beq.n	b6e6 <_printf_i+0x1a6>
    b6f8:	8019      	strh	r1, [r3, #0]
    b6fa:	2300      	movs	r3, #0
    b6fc:	6123      	str	r3, [r4, #16]
    b6fe:	4675      	mov	r5, lr
    b700:	e7b1      	b.n	b666 <_printf_i+0x126>
    b702:	681a      	ldr	r2, [r3, #0]
    b704:	1d11      	adds	r1, r2, #4
    b706:	6019      	str	r1, [r3, #0]
    b708:	6815      	ldr	r5, [r2, #0]
    b70a:	6862      	ldr	r2, [r4, #4]
    b70c:	2100      	movs	r1, #0
    b70e:	4628      	mov	r0, r5
    b710:	f000 f836 	bl	b780 <memchr>
    b714:	b108      	cbz	r0, b71a <_printf_i+0x1da>
    b716:	1b40      	subs	r0, r0, r5
    b718:	6060      	str	r0, [r4, #4]
    b71a:	6863      	ldr	r3, [r4, #4]
    b71c:	6123      	str	r3, [r4, #16]
    b71e:	2300      	movs	r3, #0
    b720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    b724:	e79f      	b.n	b666 <_printf_i+0x126>
    b726:	6923      	ldr	r3, [r4, #16]
    b728:	462a      	mov	r2, r5
    b72a:	4639      	mov	r1, r7
    b72c:	4630      	mov	r0, r6
    b72e:	47c0      	blx	r8
    b730:	3001      	adds	r0, #1
    b732:	d0a2      	beq.n	b67a <_printf_i+0x13a>
    b734:	6823      	ldr	r3, [r4, #0]
    b736:	079b      	lsls	r3, r3, #30
    b738:	d507      	bpl.n	b74a <_printf_i+0x20a>
    b73a:	2500      	movs	r5, #0
    b73c:	f104 0919 	add.w	r9, r4, #25
    b740:	68e3      	ldr	r3, [r4, #12]
    b742:	9a03      	ldr	r2, [sp, #12]
    b744:	1a9b      	subs	r3, r3, r2
    b746:	429d      	cmp	r5, r3
    b748:	db05      	blt.n	b756 <_printf_i+0x216>
    b74a:	68e0      	ldr	r0, [r4, #12]
    b74c:	9b03      	ldr	r3, [sp, #12]
    b74e:	4298      	cmp	r0, r3
    b750:	bfb8      	it	lt
    b752:	4618      	movlt	r0, r3
    b754:	e793      	b.n	b67e <_printf_i+0x13e>
    b756:	2301      	movs	r3, #1
    b758:	464a      	mov	r2, r9
    b75a:	4639      	mov	r1, r7
    b75c:	4630      	mov	r0, r6
    b75e:	47c0      	blx	r8
    b760:	3001      	adds	r0, #1
    b762:	d08a      	beq.n	b67a <_printf_i+0x13a>
    b764:	3501      	adds	r5, #1
    b766:	e7eb      	b.n	b740 <_printf_i+0x200>
    b768:	2b00      	cmp	r3, #0
    b76a:	d1a7      	bne.n	b6bc <_printf_i+0x17c>
    b76c:	780b      	ldrb	r3, [r1, #0]
    b76e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    b772:	f104 0542 	add.w	r5, r4, #66	; 0x42
    b776:	e765      	b.n	b644 <_printf_i+0x104>
    b778:	0000c0b6 	.word	0x0000c0b6
    b77c:	0000c0a5 	.word	0x0000c0a5

0000b780 <memchr>:
    b780:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b784:	2a10      	cmp	r2, #16
    b786:	db2b      	blt.n	b7e0 <memchr+0x60>
    b788:	f010 0f07 	tst.w	r0, #7
    b78c:	d008      	beq.n	b7a0 <memchr+0x20>
    b78e:	f810 3b01 	ldrb.w	r3, [r0], #1
    b792:	3a01      	subs	r2, #1
    b794:	428b      	cmp	r3, r1
    b796:	d02d      	beq.n	b7f4 <memchr+0x74>
    b798:	f010 0f07 	tst.w	r0, #7
    b79c:	b342      	cbz	r2, b7f0 <memchr+0x70>
    b79e:	d1f6      	bne.n	b78e <memchr+0xe>
    b7a0:	b4f0      	push	{r4, r5, r6, r7}
    b7a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b7a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b7aa:	f022 0407 	bic.w	r4, r2, #7
    b7ae:	f07f 0700 	mvns.w	r7, #0
    b7b2:	2300      	movs	r3, #0
    b7b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    b7b8:	3c08      	subs	r4, #8
    b7ba:	ea85 0501 	eor.w	r5, r5, r1
    b7be:	ea86 0601 	eor.w	r6, r6, r1
    b7c2:	fa85 f547 	uadd8	r5, r5, r7
    b7c6:	faa3 f587 	sel	r5, r3, r7
    b7ca:	fa86 f647 	uadd8	r6, r6, r7
    b7ce:	faa5 f687 	sel	r6, r5, r7
    b7d2:	b98e      	cbnz	r6, b7f8 <memchr+0x78>
    b7d4:	d1ee      	bne.n	b7b4 <memchr+0x34>
    b7d6:	bcf0      	pop	{r4, r5, r6, r7}
    b7d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b7dc:	f002 0207 	and.w	r2, r2, #7
    b7e0:	b132      	cbz	r2, b7f0 <memchr+0x70>
    b7e2:	f810 3b01 	ldrb.w	r3, [r0], #1
    b7e6:	3a01      	subs	r2, #1
    b7e8:	ea83 0301 	eor.w	r3, r3, r1
    b7ec:	b113      	cbz	r3, b7f4 <memchr+0x74>
    b7ee:	d1f8      	bne.n	b7e2 <memchr+0x62>
    b7f0:	2000      	movs	r0, #0
    b7f2:	4770      	bx	lr
    b7f4:	3801      	subs	r0, #1
    b7f6:	4770      	bx	lr
    b7f8:	2d00      	cmp	r5, #0
    b7fa:	bf06      	itte	eq
    b7fc:	4635      	moveq	r5, r6
    b7fe:	3803      	subeq	r0, #3
    b800:	3807      	subne	r0, #7
    b802:	f015 0f01 	tst.w	r5, #1
    b806:	d107      	bne.n	b818 <memchr+0x98>
    b808:	3001      	adds	r0, #1
    b80a:	f415 7f80 	tst.w	r5, #256	; 0x100
    b80e:	bf02      	ittt	eq
    b810:	3001      	addeq	r0, #1
    b812:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    b816:	3001      	addeq	r0, #1
    b818:	bcf0      	pop	{r4, r5, r6, r7}
    b81a:	3801      	subs	r0, #1
    b81c:	4770      	bx	lr
    b81e:	bf00      	nop

0000b820 <memmove>:
    b820:	4288      	cmp	r0, r1
    b822:	b510      	push	{r4, lr}
    b824:	eb01 0302 	add.w	r3, r1, r2
    b828:	d803      	bhi.n	b832 <memmove+0x12>
    b82a:	1e42      	subs	r2, r0, #1
    b82c:	4299      	cmp	r1, r3
    b82e:	d10c      	bne.n	b84a <memmove+0x2a>
    b830:	bd10      	pop	{r4, pc}
    b832:	4298      	cmp	r0, r3
    b834:	d2f9      	bcs.n	b82a <memmove+0xa>
    b836:	1881      	adds	r1, r0, r2
    b838:	1ad2      	subs	r2, r2, r3
    b83a:	42d3      	cmn	r3, r2
    b83c:	d100      	bne.n	b840 <memmove+0x20>
    b83e:	bd10      	pop	{r4, pc}
    b840:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    b844:	f801 4d01 	strb.w	r4, [r1, #-1]!
    b848:	e7f7      	b.n	b83a <memmove+0x1a>
    b84a:	f811 4b01 	ldrb.w	r4, [r1], #1
    b84e:	f802 4f01 	strb.w	r4, [r2, #1]!
    b852:	e7eb      	b.n	b82c <memmove+0xc>

0000b854 <_realloc_r>:
    b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b856:	4607      	mov	r7, r0
    b858:	4614      	mov	r4, r2
    b85a:	460e      	mov	r6, r1
    b85c:	b921      	cbnz	r1, b868 <_realloc_r+0x14>
    b85e:	4611      	mov	r1, r2
    b860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b864:	f7ff bc0a 	b.w	b07c <_malloc_r>
    b868:	b922      	cbnz	r2, b874 <_realloc_r+0x20>
    b86a:	f7ff fbb9 	bl	afe0 <_free_r>
    b86e:	4625      	mov	r5, r4
    b870:	4628      	mov	r0, r5
    b872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b874:	f000 f814 	bl	b8a0 <_malloc_usable_size_r>
    b878:	4284      	cmp	r4, r0
    b87a:	d90f      	bls.n	b89c <_realloc_r+0x48>
    b87c:	4621      	mov	r1, r4
    b87e:	4638      	mov	r0, r7
    b880:	f7ff fbfc 	bl	b07c <_malloc_r>
    b884:	4605      	mov	r5, r0
    b886:	2800      	cmp	r0, #0
    b888:	d0f2      	beq.n	b870 <_realloc_r+0x1c>
    b88a:	4631      	mov	r1, r6
    b88c:	4622      	mov	r2, r4
    b88e:	f7ff fb93 	bl	afb8 <memcpy>
    b892:	4631      	mov	r1, r6
    b894:	4638      	mov	r0, r7
    b896:	f7ff fba3 	bl	afe0 <_free_r>
    b89a:	e7e9      	b.n	b870 <_realloc_r+0x1c>
    b89c:	4635      	mov	r5, r6
    b89e:	e7e7      	b.n	b870 <_realloc_r+0x1c>

0000b8a0 <_malloc_usable_size_r>:
    b8a0:	f851 0c04 	ldr.w	r0, [r1, #-4]
    b8a4:	2800      	cmp	r0, #0
    b8a6:	f1a0 0004 	sub.w	r0, r0, #4
    b8aa:	bfbc      	itt	lt
    b8ac:	580b      	ldrlt	r3, [r1, r0]
    b8ae:	18c0      	addlt	r0, r0, r3
    b8b0:	4770      	bx	lr
	...

0000b8b4 <UI_ENCODER_LOOKUP>:
    b8b4:	0f0e 0b0a 0706 0302 0d0c 0908 0504 0100     ................
    b8c4:	6325 3025 7832 3025 7832 3025 7832 3025     %c%02x%02x%02x%0
    b8d4:	7832 6325 0025 0000 3030 0000 6325 3025     2x%c%...00..%c%0
    b8e4:	7832 3025 7832 3025 7832 3025 7832 3025     2x%02x%02x%02x%0
    b8f4:	7832 6325 6325 3025 7832 3025 7832 3025     2x%c%c%02x%02x%0
    b904:	7832 3025 7832 3025 7832 6325 0000 0000     2x%02x%02x%c....
    b914:	475b 4952 5d44 2520 6433 2520 6434 2520     [GRID] %3d %4d %
    b924:	6434 2520 2064 4d5b 4449 5d49 4320 3a68     4d %d [MIDI] Ch:
    b934:	2520 2064 4320 646d 203a 6425 2020 6150      %d  Cmd: %d  Pa
    b944:	6172 316d 203a 6425 2020 6150 6172 326d     ram1: %d  Param2
    b954:	203a 6425 000a 0000 475b 4952 5d44 2520     : %d....[GRID] %
    b964:	6433 2520 6434 2520 6434 2520 2064 4b5b     3d %4d %4d %d [K
    b974:	5945 4f42 5241 5d44 4b20 7965 203a 6425     EYBOARD] Key: %d
    b984:	4d20 646f 203a 6425 4320 646d 203a 6425      Mod: %d Cmd: %d
    b994:	480a 4357 4746 203a 3025 7838 000a 0000     .HWCFG: %08x....
    b9a4:	555b 4b4e 4f4e 4e57 205d 3e2d 5020 6f72     [UNKNOWN] -> Pro
    b9b4:	6f74 6f63 3a6c 2520 0a64 0000               tocol: %d...

0000b9c0 <grid_module_mux_lookup>:
    b9c0:	0100 0504 0908 0d0c 0302 0706 0b0a 0f0e     ................

0000b9d0 <grid_module_mux_lookup>:
    b9d0:	0100 0504 0908 0d0c 0302 0706 0b0a 0f0e     ................

0000b9e0 <grid_module_mux_lookup>:
    b9e0:	0100 0504 0908 0d0c 0302 0706 0b0a 0f0e     ................
    b9f0:	3025 7838 0000 0000 3025 7832 0000 0000     %08x....%02x....
    ba00:	6325 6325 6325 6325 3025 7838 6325 3030     %c%c%c%c%08x%c00
    ba10:	000a 0000 6325 6325 3025 7832 3025 7832     ....%c%c%02x%02x
    ba20:	3025 7832 3025 7832 3025 7832 6325 0000     %02x%02x%02x%c..
    ba30:	3030 000a 2e2e 682f 6c61 732f 6372 682f     00..../hal/src/h
    ba40:	6c61 615f 6364 615f 7973 636e 632e 0000     al_adc_async.c..
    ba50:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
    ba60:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
    ba70:	6c61 732f 6372 682f 6c61 665f 616c 6873     al/src/hal_flash
    ba80:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
    ba90:	6c61 695f 6332 6d5f 615f 7973 636e 632e     al_i2c_m_async.c
    baa0:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    bab0:	6c61 695f 2e6f 0063 2e2e 682f 6c61 732f     al_io.c.../hal/s
    bac0:	6372 682f 6c61 735f 6970 6d5f 615f 7973     rc/hal_spi_m_asy
    bad0:	636e 632e 0000 0000 2e2e 682f 6c61 732f     nc.c....../hal/s
    bae0:	6372 682f 6c61 735f 6970 6d5f 645f 616d     rc/hal_spi_m_dma
    baf0:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
    bb00:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
    bb10:	6c61 732f 6372 682f 6c61 755f 6173 7472     al/src/hal_usart
    bb20:	615f 7973 636e 632e 0000 0000 2e2e 682f     _async.c....../h
    bb30:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    bb40:	736c 6c5f 7369 2e74 0063 0000 2e2e 682f     ls_list.c...../h
    bb50:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    bb60:	736c 725f 6e69 6267 6675 6566 2e72 0063     ls_ringbuffer.c.

0000bb70 <_adcs>:
    bb70:	0000 0100 000c 0003 1807 0004 0000 0000     ................
    bb80:	080b 0014 0000 0001 0100 000c 0003 1804     ................
    bb90:	0004 0000 0000 080b 0014 0000 2e2e 682f     ............../h
    bba0:	6c70 612f 6364 682f 6c70 615f 6364 632e     pl/adc/hpl_adc.c
    bbb0:	0000 0000                                   ....

0000bbb4 <_cfgs>:
    bbb4:	0600 0020 8000 0806 0400 0020 8000 0806     .. ....... .....
    bbc4:	1000 0020 8000 0806 0c00 0020 8000 0806     .. ....... .....
	...
    bbe4:	0b00 0020 0003 1400 0a00 0020 0002 0800     .. ....... .....
    bbf4:	1300 0020 0003 1400 0000 0000 0000 0000     .. .............
	...

0000bcb4 <user_mux_confs>:
	...
    bce0:	0201 0403 0201 0403 0000 0000 0000 0000     ................
	...

0000bcf8 <channel_confs>:
    bcf8:	0522 0523 0524 0525 0000 0000 0000 0000     ".#.$.%.........
	...

0000bd38 <interrupt_cfg>:
    bd38:	0002 0000 0002 0000 0002 0000 0002 0000     ................
	...
    bdb8:	2e2e 682f 6c70 6e2f 6d76 7463 6c72 682f     ../hpl/nvmctrl/h
    bdc8:	6c70 6e5f 6d76 7463 6c72 632e 0000 0000     pl_nvmctrl.c....
    bdd8:	2e2e 682f 6c70 722f 6374 682f 6c70 725f     ../hpl/rtc/hpl_r
    bde8:	6374 632e 0000 0000 3000 4000 3400 4000     tc.c.....0.@.4.@
    bdf8:	2000 4101 4000 4101 0000 4300 0400 4300     . .A.@.A...C...C
    be08:	0800 4300 0c00 4300                         ...C...C

0000be10 <_usarts>:
    be10:	0000 0000 0004 4010 0000 0003 0002 0070     .......@......p.
    be20:	aaaa 0000 0000 0000 0001 0000 0004 4010     ...............@
    be30:	0000 0003 0002 0070 aaaa 0000 0000 0000     ......p.........
    be40:	0002 0000 0004 4010 0000 0003 0002 0070     .......@......p.
    be50:	f62b 0000 0000 0000 0004 0000 0004 4010     +..............@
    be60:	0000 0003 0002 0070 aaaa 0000 0000 0000     ......p.........
    be70:	0006 0000 0004 4010 0000 0003 0002 0070     .......@......p.
    be80:	aaaa 0000 0000 0000                         ........

0000be88 <_i2cms>:
    be88:	0005 0000 0014 0020 0100 0000 e6e5 0000     ...... .........
    be98:	0000 00d7 6c00 02dc                         .....l..

0000bea0 <sercomspi_regs>:
    bea0:	000c 3020 0000 0002 0000 0000 0005 01ff     .. 0............
    beb0:	0c03 2000 0000 0000 0000 0000 0600 ff00     ... ............
    bec0:	0701 0000 2e2e 682f 6c70 732f 7265 6f63     ....../hpl/serco
    bed0:	2f6d 7068 5f6c 6573 6372 6d6f 632e 0000     m/hpl_sercom.c..
    bee0:	3800 4000 3c00 4000 a000 4101 c000 4101     .8.@.<.@...A...A
    bef0:	1400 4200 1800 4200 1400 4300 1800 4300     ...B...B...C...C

0000bf00 <_tcs>:
    bf00:	0000 006b 0308 0000 0021 0000 3a98 0000     ..k.....!....:..
    bf10:	0000 0000 0001 006c 0308 0000 0021 0000     ......l.....!...
    bf20:	3a98 0000 0000 0000 0002 006d 0308 0000     .:........m.....
    bf30:	0021 0000 3a98 0000 0000 0000 0003 006e     !....:........n.
    bf40:	0308 0000 0021 0000 3a98 0000 0000 0000     ....!....:......
    bf50:	2e2e 682f 6c70 742f 2f63 7068 5f6c 6374     ../hpl/tc/hpl_tc
    bf60:	632e 0000                                   .c..

0000bf64 <_usb_ep_cfgs>:
    bf64:	1140 2000 0000 0000 0040 0000 0000 0000     @.. ....@.......
	...
    bf7c:	1138 2000 0000 0000 0008 0000 10f8 2000     8.. ........... 
    bf8c:	10f0 2000 0040 0008 0000 0000 0000 0000     ... @...........
	...
    bfa4:	10b0 2000 0000 0040                         ... ..@.

0000bfac <keyboard_report_desc>:
    bfac:	0105 0609 01a1 0705 e019 e729 0015 0125     ..........)...%.
    bfbc:	0175 0895 0281 0181 0019 6529 0015 6525     u.........)e..%e
    bfcc:	0875 0695 0081 0805 0119 0529 0015 0125     u.........)...%.
    bfdc:	0175 0595 0291 0395 0191 00c0               u...........

0000bfe8 <mouse_report_desc>:
    bfe8:	0105 0209 01a1 0109 00a1 0905 0119 0329     ..............).
    bff8:	0015 0125 0175 0395 0281 0575 0195 0181     ..%.u.....u.....
    c008:	0105 3009 3109 3809 8115 7f25 0875 0395     ...0.1.8..%.u...
    c018:	0681 c0c0 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
    c028:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

0000c034 <__sf_fake_stderr>:
	...

0000c054 <__sf_fake_stdin>:
	...

0000c074 <__sf_fake_stdout>:
	...
    c094:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    c0a4:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    c0b4:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    c0c4:	6665 0000                                   ef..

0000c0c8 <_init>:
    c0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0ca:	bf00      	nop
    c0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c0ce:	bc08      	pop	{r3}
    c0d0:	469e      	mov	lr, r3
    c0d2:	4770      	bx	lr

0000c0d4 <__init_array_start>:
    c0d4:	00000289 	.word	0x00000289

0000c0d8 <_fini>:
    c0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0da:	bf00      	nop
    c0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c0de:	bc08      	pop	{r3}
    c0e0:	469e      	mov	lr, r3
    c0e2:	4770      	bx	lr

0000c0e4 <__fini_array_start>:
    c0e4:	00000265 	.word	0x00000265
