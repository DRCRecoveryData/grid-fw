
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c460  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000c460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          000038d0  200005c0  0000ca20  000205bc  2**4
                  ALLOC
  5 .stack        00010000  20003e90  000102f0  000205bc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   00080da8  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ac95  00000000  00000000  000a13eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002a6d2  00000000  00000000  000ac080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002000  00000000  00000000  000d6752  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002e00  00000000  00000000  000d8752  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00043c04  00000000  00000000  000db552  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00037bdc  00000000  00000000  0011f156  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00119230  00000000  00000000  00156d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005be0  00000000  00000000  0026ff64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 3e 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     .>. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	f1 5f 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ._..............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 b9 5c 00 00 cd 5c 00 00     .........\...\..
      bc:	f1 5a 00 00 fd 5a 00 00 09 5b 00 00 15 5b 00 00     .Z...Z...[...[..
      cc:	21 5b 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ![..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	25 5e 00 00 f1 69 00 00 05 6a 00 00 19 6a 00 00     %^...i...j...j..
     104:	2d 6a 00 00 41 6a 00 00 55 6a 00 00 69 6a 00 00     -j..Aj..Uj..ij..
     114:	7d 6a 00 00 91 6a 00 00 a5 6a 00 00 b9 6a 00 00     }j...j...j...j..
     124:	cd 6a 00 00 e1 6a 00 00 f5 6a 00 00 09 6b 00 00     .j...j...j...k..
     134:	1d 6b 00 00 31 6b 00 00 45 6b 00 00 59 6b 00 00     .k..1k..Ek..Yk..
     144:	6d 6b 00 00 81 6b 00 00 95 6b 00 00 a9 6b 00 00     mk...k...k...k..
     154:	bd 6b 00 00 d1 6b 00 00 e5 6b 00 00 f9 6b 00 00     .k...k...k...k..
     164:	0d 6c 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .l..............
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 1d 8b 00 00     ................
     184:	29 8b 00 00 35 8b 00 00 41 8b 00 00 00 00 00 00     )...5...A.......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 31 78 00 00 45 78 00 00     ........1x..Ex..
     1f4:	59 78 00 00 6d 78 00 00 e5 02 00 00 e5 02 00 00     Yx..mx..........
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 85 57 00 00 99 57 00 00 ad 57 00 00     .....W...W...W..
     224:	c1 57 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .W..............
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000c460 	.word	0x0000c460

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000c460 	.word	0x0000c460
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000c460 	.word	0x0000c460
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000c59 	.word	0x00000c59
     2e0:	0000aa89 	.word	0x0000aa89

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	0000c460 	.word	0x0000c460
     364:	200005bc 	.word	0x200005bc
     368:	20003e90 	.word	0x20003e90
     36c:	200005c0 	.word	0x200005c0
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	0000b269 	.word	0x0000b269
     37c:	00009199 	.word	0x00009199

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2241      	movs	r2, #65	; 0x41
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	200005dc 	.word	0x200005dc
     400:	20000ff4 	.word	0x20000ff4
     404:	200010f0 	.word	0x200010f0
     408:	43001c00 	.word	0x43001c00
     40c:	00003d51 	.word	0x00003d51
     410:	00003df5 	.word	0x00003df5
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2241      	movs	r2, #65	; 0x41
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	200005dc 	.word	0x200005dc
     4a4:	200011c8 	.word	0x200011c8
     4a8:	20000f4c 	.word	0x20000f4c
     4ac:	43002000 	.word	0x43002000
     4b0:	00003d51 	.word	0x00003d51
     4b4:	00003df5 	.word	0x00003df5
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	20000f48 	.word	0x20000f48
     4e0:	00004091 	.word	0x00004091

000004e4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4e4:	b508      	push	{r3, lr}
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <EVENT_SYSTEM_0_init+0x28>)
     4e8:	2240      	movs	r2, #64	; 0x40
     4ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4fa:	4a05      	ldr	r2, [pc, #20]	; (510 <EVENT_SYSTEM_0_init+0x2c>)
     4fc:	6993      	ldr	r3, [r2, #24]
     4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     502:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <EVENT_SYSTEM_0_init+0x30>)
     506:	4798      	blx	r3
     508:	bd08      	pop	{r3, pc}
     50a:	bf00      	nop
     50c:	40001c00 	.word	0x40001c00
     510:	40000800 	.word	0x40000800
     514:	00004115 	.word	0x00004115

00000518 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     518:	4a02      	ldr	r2, [pc, #8]	; (524 <FLASH_0_CLOCK_init+0xc>)
     51a:	6913      	ldr	r3, [r2, #16]
     51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     520:	6113      	str	r3, [r2, #16]
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800

00000528 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     528:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <FLASH_0_init+0x10>)
     52c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     52e:	4903      	ldr	r1, [pc, #12]	; (53c <FLASH_0_init+0x14>)
     530:	4803      	ldr	r0, [pc, #12]	; (540 <FLASH_0_init+0x18>)
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <FLASH_0_init+0x1c>)
     534:	4798      	blx	r3
     536:	bd08      	pop	{r3, pc}
     538:	00000519 	.word	0x00000519
     53c:	41004000 	.word	0x41004000
     540:	20000f2c 	.word	0x20000f2c
     544:	00004135 	.word	0x00004135

00000548 <USART_EAST_CLOCK_init>:
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <USART_EAST_CLOCK_init+0x1c>)
     54a:	2241      	movs	r2, #65	; 0x41
     54c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     550:	2242      	movs	r2, #66	; 0x42
     552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     556:	4a04      	ldr	r2, [pc, #16]	; (568 <USART_EAST_CLOCK_init+0x20>)
     558:	6953      	ldr	r3, [r2, #20]
     55a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     55e:	6153      	str	r3, [r2, #20]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	40001c00 	.word	0x40001c00
     568:	40000800 	.word	0x40000800

0000056c <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <USART_EAST_PORT_init+0x44>)
     56e:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     582:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     586:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     5ae:	4770      	bx	lr
     5b0:	41008000 	.word	0x41008000

000005b4 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <USART_EAST_init+0x20>)
     5ba:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     5bc:	2300      	movs	r3, #0
     5be:	9300      	str	r3, [sp, #0]
     5c0:	2310      	movs	r3, #16
     5c2:	4a05      	ldr	r2, [pc, #20]	; (5d8 <USART_EAST_init+0x24>)
     5c4:	4905      	ldr	r1, [pc, #20]	; (5dc <USART_EAST_init+0x28>)
     5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <USART_EAST_init+0x2c>)
     5c8:	4c06      	ldr	r4, [pc, #24]	; (5e4 <USART_EAST_init+0x30>)
     5ca:	47a0      	blx	r4
	USART_EAST_PORT_init();
     5cc:	4b06      	ldr	r3, [pc, #24]	; (5e8 <USART_EAST_init+0x34>)
     5ce:	4798      	blx	r3
}
     5d0:	b002      	add	sp, #8
     5d2:	bd10      	pop	{r4, pc}
     5d4:	00000549 	.word	0x00000549
     5d8:	20000604 	.word	0x20000604
     5dc:	40003000 	.word	0x40003000
     5e0:	20001020 	.word	0x20001020
     5e4:	00004b61 	.word	0x00004b61
     5e8:	0000056d 	.word	0x0000056d

000005ec <USART_NORTH_CLOCK_init>:
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <USART_NORTH_CLOCK_init+0x1c>)
     5ee:	2241      	movs	r2, #65	; 0x41
     5f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5f4:	2242      	movs	r2, #66	; 0x42
     5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5fa:	4a04      	ldr	r2, [pc, #16]	; (60c <USART_NORTH_CLOCK_init+0x20>)
     5fc:	6953      	ldr	r3, [r2, #20]
     5fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     602:	6153      	str	r3, [r2, #20]
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	40001c00 	.word	0x40001c00
     60c:	40000800 	.word	0x40000800

00000610 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <USART_NORTH_PORT_init+0x44>)
     612:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     626:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     642:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     646:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     64a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     652:	4770      	bx	lr
     654:	41008000 	.word	0x41008000

00000658 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     658:	b510      	push	{r4, lr}
     65a:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <USART_NORTH_init+0x20>)
     65e:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     660:	2300      	movs	r3, #0
     662:	9300      	str	r3, [sp, #0]
     664:	2310      	movs	r3, #16
     666:	4a05      	ldr	r2, [pc, #20]	; (67c <USART_NORTH_init+0x24>)
     668:	4905      	ldr	r1, [pc, #20]	; (680 <USART_NORTH_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <USART_NORTH_init+0x2c>)
     66c:	4c06      	ldr	r4, [pc, #24]	; (688 <USART_NORTH_init+0x30>)
     66e:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <USART_NORTH_init+0x34>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bd10      	pop	{r4, pc}
     678:	000005ed 	.word	0x000005ed
     67c:	20000614 	.word	0x20000614
     680:	40003400 	.word	0x40003400
     684:	20001074 	.word	0x20001074
     688:	00004b61 	.word	0x00004b61
     68c:	00000611 	.word	0x00000611

00000690 <GRID_AUX_CLOCK_init>:
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <GRID_AUX_CLOCK_init+0x1c>)
     692:	2241      	movs	r2, #65	; 0x41
     694:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     698:	2242      	movs	r2, #66	; 0x42
     69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <GRID_AUX_CLOCK_init+0x20>)
     6a0:	6993      	ldr	r3, [r2, #24]
     6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6a6:	6193      	str	r3, [r2, #24]
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800

000006b4 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	4b10      	ldr	r3, [pc, #64]	; (6f8 <GRID_AUX_PORT_init+0x44>)
     6b6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     6f6:	4770      	bx	lr
     6f8:	41008000 	.word	0x41008000

000006fc <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     6fc:	b510      	push	{r4, lr}
     6fe:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <GRID_AUX_init+0x20>)
     702:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     704:	2300      	movs	r3, #0
     706:	9300      	str	r3, [sp, #0]
     708:	2310      	movs	r3, #16
     70a:	4a05      	ldr	r2, [pc, #20]	; (720 <GRID_AUX_init+0x24>)
     70c:	4905      	ldr	r1, [pc, #20]	; (724 <GRID_AUX_init+0x28>)
     70e:	4806      	ldr	r0, [pc, #24]	; (728 <GRID_AUX_init+0x2c>)
     710:	4c06      	ldr	r4, [pc, #24]	; (72c <GRID_AUX_init+0x30>)
     712:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <GRID_AUX_init+0x34>)
     716:	4798      	blx	r3
}
     718:	b002      	add	sp, #8
     71a:	bd10      	pop	{r4, pc}
     71c:	00000691 	.word	0x00000691
     720:	20000624 	.word	0x20000624
     724:	41012000 	.word	0x41012000
     728:	20000fa4 	.word	0x20000fa4
     72c:	00004b61 	.word	0x00004b61
     730:	000006b5 	.word	0x000006b5

00000734 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     734:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <UI_SPI_PORT_init+0xb0>)
     736:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     73a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     746:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     74a:	4a27      	ldr	r2, [pc, #156]	; (7e8 <UI_SPI_PORT_init+0xb4>)
     74c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     750:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     758:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     768:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     780:	4a1a      	ldr	r2, [pc, #104]	; (7ec <UI_SPI_PORT_init+0xb8>)
     782:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     786:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     78a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     78e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     792:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     796:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     79e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7a6:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	4a11      	ldr	r2, [pc, #68]	; (7f0 <UI_SPI_PORT_init+0xbc>)
     7aa:	629a      	str	r2, [r3, #40]	; 0x28
     7ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     7b0:	3210      	adds	r2, #16
     7b2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7b4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     7b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7d0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7d8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	41008000 	.word	0x41008000
     7e8:	c0000010 	.word	0xc0000010
     7ec:	c0000020 	.word	0xc0000020
     7f0:	40020000 	.word	0x40020000

000007f4 <UI_SPI_CLOCK_init>:
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <UI_SPI_CLOCK_init+0x1c>)
     7f6:	2241      	movs	r2, #65	; 0x41
     7f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     7fc:	2243      	movs	r2, #67	; 0x43
     7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     802:	4a04      	ldr	r2, [pc, #16]	; (814 <UI_SPI_CLOCK_init+0x20>)
     804:	6993      	ldr	r3, [r2, #24]
     806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     80a:	6193      	str	r3, [r2, #24]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	40001c00 	.word	0x40001c00
     814:	40000800 	.word	0x40000800

00000818 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     818:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     81a:	4b04      	ldr	r3, [pc, #16]	; (82c <UI_SPI_init+0x14>)
     81c:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     81e:	4904      	ldr	r1, [pc, #16]	; (830 <UI_SPI_init+0x18>)
     820:	4804      	ldr	r0, [pc, #16]	; (834 <UI_SPI_init+0x1c>)
     822:	4b05      	ldr	r3, [pc, #20]	; (838 <UI_SPI_init+0x20>)
     824:	4798      	blx	r3
	UI_SPI_PORT_init();
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <UI_SPI_init+0x24>)
     828:	4798      	blx	r3
     82a:	bd08      	pop	{r3, pc}
     82c:	000007f5 	.word	0x000007f5
     830:	41014000 	.word	0x41014000
     834:	20000ea4 	.word	0x20000ea4
     838:	00004471 	.word	0x00004471
     83c:	00000735 	.word	0x00000735

00000840 <USART_WEST_CLOCK_init>:
     840:	4b06      	ldr	r3, [pc, #24]	; (85c <USART_WEST_CLOCK_init+0x1c>)
     842:	2241      	movs	r2, #65	; 0x41
     844:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     848:	2242      	movs	r2, #66	; 0x42
     84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     84e:	4a04      	ldr	r2, [pc, #16]	; (860 <USART_WEST_CLOCK_init+0x20>)
     850:	6a13      	ldr	r3, [r2, #32]
     852:	f043 0301 	orr.w	r3, r3, #1
     856:	6213      	str	r3, [r2, #32]
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	40001c00 	.word	0x40001c00
     860:	40000800 	.word	0x40000800

00000864 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <USART_WEST_PORT_init+0x44>)
     866:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     86a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     876:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     882:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     886:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     88a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     88e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     892:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     896:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     89a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     89e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     8a6:	4770      	bx	lr
     8a8:	41008000 	.word	0x41008000

000008ac <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     8ac:	b510      	push	{r4, lr}
     8ae:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     8b0:	4b07      	ldr	r3, [pc, #28]	; (8d0 <USART_WEST_init+0x24>)
     8b2:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     8b4:	2300      	movs	r3, #0
     8b6:	9300      	str	r3, [sp, #0]
     8b8:	2310      	movs	r3, #16
     8ba:	4a06      	ldr	r2, [pc, #24]	; (8d4 <USART_WEST_init+0x28>)
     8bc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     8c0:	4805      	ldr	r0, [pc, #20]	; (8d8 <USART_WEST_init+0x2c>)
     8c2:	4c06      	ldr	r4, [pc, #24]	; (8dc <USART_WEST_init+0x30>)
     8c4:	47a0      	blx	r4
	USART_WEST_PORT_init();
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <USART_WEST_init+0x34>)
     8c8:	4798      	blx	r3
}
     8ca:	b002      	add	sp, #8
     8cc:	bd10      	pop	{r4, pc}
     8ce:	bf00      	nop
     8d0:	00000841 	.word	0x00000841
     8d4:	20000634 	.word	0x20000634
     8d8:	20001128 	.word	0x20001128
     8dc:	00004b61 	.word	0x00004b61
     8e0:	00000865 	.word	0x00000865

000008e4 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8e4:	4b16      	ldr	r3, [pc, #88]	; (940 <SYS_I2C_PORT_init+0x5c>)
     8e6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     8ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8f2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     902:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     906:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     90a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     90e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     912:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     916:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     91a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     926:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     92a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     932:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     936:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     93a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     93e:	4770      	bx	lr
     940:	41008000 	.word	0x41008000

00000944 <SYS_I2C_CLOCK_init>:
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <SYS_I2C_CLOCK_init+0x1c>)
     946:	2241      	movs	r2, #65	; 0x41
     948:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     94c:	2242      	movs	r2, #66	; 0x42
     94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     952:	4a04      	ldr	r2, [pc, #16]	; (964 <SYS_I2C_CLOCK_init+0x20>)
     954:	6a13      	ldr	r3, [r2, #32]
     956:	f043 0302 	orr.w	r3, r3, #2
     95a:	6213      	str	r3, [r2, #32]
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	40001c00 	.word	0x40001c00
     964:	40000800 	.word	0x40000800

00000968 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     968:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <SYS_I2C_init+0x14>)
     96c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     96e:	4904      	ldr	r1, [pc, #16]	; (980 <SYS_I2C_init+0x18>)
     970:	4804      	ldr	r0, [pc, #16]	; (984 <SYS_I2C_init+0x1c>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <SYS_I2C_init+0x20>)
     974:	4798      	blx	r3
	SYS_I2C_PORT_init();
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <SYS_I2C_init+0x24>)
     978:	4798      	blx	r3
     97a:	bd08      	pop	{r3, pc}
     97c:	00000945 	.word	0x00000945
     980:	43000400 	.word	0x43000400
     984:	20000f64 	.word	0x20000f64
     988:	00004215 	.word	0x00004215
     98c:	000008e5 	.word	0x000008e5

00000990 <USART_SOUTH_CLOCK_init>:
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <USART_SOUTH_CLOCK_init+0x1c>)
     992:	2241      	movs	r2, #65	; 0x41
     994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     998:	2242      	movs	r2, #66	; 0x42
     99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <USART_SOUTH_CLOCK_init+0x20>)
     9a0:	6a13      	ldr	r3, [r2, #32]
     9a2:	f043 0304 	orr.w	r3, r3, #4
     9a6:	6213      	str	r3, [r2, #32]
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	40001c00 	.word	0x40001c00
     9b0:	40000800 	.word	0x40000800

000009b4 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b4:	4b10      	ldr	r3, [pc, #64]	; (9f8 <USART_SOUTH_PORT_init+0x44>)
     9b6:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     9da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     9f6:	4770      	bx	lr
     9f8:	41008000 	.word	0x41008000

000009fc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <USART_SOUTH_init+0x20>)
     a02:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     a04:	2300      	movs	r3, #0
     a06:	9300      	str	r3, [sp, #0]
     a08:	2310      	movs	r3, #16
     a0a:	4a05      	ldr	r2, [pc, #20]	; (a20 <USART_SOUTH_init+0x24>)
     a0c:	4905      	ldr	r1, [pc, #20]	; (a24 <USART_SOUTH_init+0x28>)
     a0e:	4806      	ldr	r0, [pc, #24]	; (a28 <USART_SOUTH_init+0x2c>)
     a10:	4c06      	ldr	r4, [pc, #24]	; (a2c <USART_SOUTH_init+0x30>)
     a12:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <USART_SOUTH_init+0x34>)
     a16:	4798      	blx	r3
}
     a18:	b002      	add	sp, #8
     a1a:	bd10      	pop	{r4, pc}
     a1c:	00000991 	.word	0x00000991
     a20:	20000644 	.word	0x20000644
     a24:	43000800 	.word	0x43000800
     a28:	20001178 	.word	0x20001178
     a2c:	00004b61 	.word	0x00004b61
     a30:	000009b5 	.word	0x000009b5

00000a34 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	4b29      	ldr	r3, [pc, #164]	; (adc <GRID_LED_PORT_init+0xa8>)
     a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a46:	4926      	ldr	r1, [pc, #152]	; (ae0 <GRID_LED_PORT_init+0xac>)
     a48:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     a50:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a54:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a58:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a60:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a64:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a68:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     a70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a7c:	4919      	ldr	r1, [pc, #100]	; (ae4 <GRID_LED_PORT_init+0xb0>)
     a7e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8e:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a92:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a96:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a9a:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a9e:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     aa2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     aa8:	629a      	str	r2, [r3, #40]	; 0x28
     aaa:	4a0f      	ldr	r2, [pc, #60]	; (ae8 <GRID_LED_PORT_init+0xb4>)
     aac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     ab2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ab6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ace:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ad2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ada:	4770      	bx	lr
     adc:	41008000 	.word	0x41008000
     ae0:	c0004000 	.word	0xc0004000
     ae4:	c0008000 	.word	0xc0008000
     ae8:	c0024000 	.word	0xc0024000

00000aec <GRID_LED_CLOCK_init>:
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <GRID_LED_CLOCK_init+0x1c>)
     aee:	2241      	movs	r2, #65	; 0x41
     af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     af4:	2242      	movs	r2, #66	; 0x42
     af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     afa:	4a04      	ldr	r2, [pc, #16]	; (b0c <GRID_LED_CLOCK_init+0x20>)
     afc:	6a13      	ldr	r3, [r2, #32]
     afe:	f043 0308 	orr.w	r3, r3, #8
     b02:	6213      	str	r3, [r2, #32]
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	40001c00 	.word	0x40001c00
     b0c:	40000800 	.word	0x40000800

00000b10 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     b10:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <GRID_LED_init+0x14>)
     b14:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     b16:	4904      	ldr	r1, [pc, #16]	; (b28 <GRID_LED_init+0x18>)
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <GRID_LED_init+0x1c>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <GRID_LED_init+0x20>)
     b1c:	4798      	blx	r3
	GRID_LED_PORT_init();
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <GRID_LED_init+0x24>)
     b20:	4798      	blx	r3
     b22:	bd08      	pop	{r3, pc}
     b24:	00000aed 	.word	0x00000aed
     b28:	43000c00 	.word	0x43000c00
     b2c:	200010c4 	.word	0x200010c4
     b30:	000046d5 	.word	0x000046d5
     b34:	00000a35 	.word	0x00000a35

00000b38 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b38:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b3a:	4802      	ldr	r0, [pc, #8]	; (b44 <delay_driver_init+0xc>)
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <delay_driver_init+0x10>)
     b3e:	4798      	blx	r3
     b40:	bd08      	pop	{r3, pc}
     b42:	bf00      	nop
     b44:	e000e010 	.word	0xe000e010
     b48:	000040c1 	.word	0x000040c1

00000b4c <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b4c:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b52:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b58:	6299      	str	r1, [r3, #40]	; 0x28
     b5a:	481c      	ldr	r0, [pc, #112]	; (bcc <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     b5c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b5e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b64:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b74:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b7c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b84:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     b90:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	6299      	str	r1, [r3, #40]	; 0x28
     b94:	490e      	ldr	r1, [pc, #56]	; (bd0 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     b96:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b98:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b9a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     b9e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bba:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bbe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     bc6:	4770      	bx	lr
     bc8:	41008000 	.word	0x41008000
     bcc:	c0000100 	.word	0xc0000100
     bd0:	c0000200 	.word	0xc0000200

00000bd4 <USB_DEVICE_INSTANCE_CLOCK_init>:
     bd4:	2241      	movs	r2, #65	; 0x41
     bd6:	4b07      	ldr	r3, [pc, #28]	; (bf4 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bdc:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     be0:	691a      	ldr	r2, [r3, #16]
     be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     be6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     be8:	699a      	ldr	r2, [r3, #24]
     bea:	f042 0201 	orr.w	r2, r2, #1
     bee:	619a      	str	r2, [r3, #24]
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	40001c00 	.word	0x40001c00

00000bf8 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     bf8:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <USB_DEVICE_INSTANCE_init+0x10>)
     bfc:	4798      	blx	r3
	usb_d_init();
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <USB_DEVICE_INSTANCE_init+0x14>)
     c00:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <USB_DEVICE_INSTANCE_init+0x18>)
     c04:	4798      	blx	r3
     c06:	bd08      	pop	{r3, pc}
     c08:	00000bd5 	.word	0x00000bd5
     c0c:	00004f0d 	.word	0x00004f0d
     c10:	00000b4d 	.word	0x00000b4d

00000c14 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     c14:	4a02      	ldr	r2, [pc, #8]	; (c20 <WDT_0_CLOCK_init+0xc>)
     c16:	6953      	ldr	r3, [r2, #20]
     c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     c1c:	6153      	str	r3, [r2, #20]
     c1e:	4770      	bx	lr
     c20:	40000800 	.word	0x40000800

00000c24 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     c24:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     c26:	4b06      	ldr	r3, [pc, #24]	; (c40 <WDT_0_init+0x1c>)
     c28:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     c2a:	2248      	movs	r2, #72	; 0x48
     c2c:	4905      	ldr	r1, [pc, #20]	; (c44 <WDT_0_init+0x20>)
     c2e:	2001      	movs	r0, #1
     c30:	4b05      	ldr	r3, [pc, #20]	; (c48 <WDT_0_init+0x24>)
     c32:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     c34:	4805      	ldr	r0, [pc, #20]	; (c4c <WDT_0_init+0x28>)
     c36:	4b06      	ldr	r3, [pc, #24]	; (c50 <WDT_0_init+0x2c>)
     c38:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     c3a:	4b06      	ldr	r3, [pc, #24]	; (c54 <WDT_0_init+0x30>)
     c3c:	4798      	blx	r3
     c3e:	bd08      	pop	{r3, pc}
     c40:	00000c15 	.word	0x00000c15
     c44:	0000bc34 	.word	0x0000bc34
     c48:	00005259 	.word	0x00005259
     c4c:	20001070 	.word	0x20001070
     c50:	40002000 	.word	0x40002000
     c54:	00008b4d 	.word	0x00008b4d

00000c58 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c5c:	4ba2      	ldr	r3, [pc, #648]	; (ee8 <system_init+0x290>)
     c5e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c60:	4ba2      	ldr	r3, [pc, #648]	; (eec <system_init+0x294>)
     c62:	2220      	movs	r2, #32
     c64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c66:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c68:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c6c:	629a      	str	r2, [r3, #40]	; 0x28
     c6e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     c72:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c74:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     c78:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c7c:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c80:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     c84:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c86:	4e9a      	ldr	r6, [pc, #616]	; (ef0 <system_init+0x298>)
     c88:	629e      	str	r6, [r3, #40]	; 0x28
     c8a:	499a      	ldr	r1, [pc, #616]	; (ef4 <system_init+0x29c>)
     c8c:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c8e:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     c92:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c96:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c9a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     c9e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ca2:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ca6:	2180      	movs	r1, #128	; 0x80
     ca8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     cb0:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     cb4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     cb8:	4d8f      	ldr	r5, [pc, #572]	; (ef8 <system_init+0x2a0>)
     cba:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cbe:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     cc2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     cc6:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cca:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     cce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd2:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     cda:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cde:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ce2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ce6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     cea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cee:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     cf2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cf6:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     cfe:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d02:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d06:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     d0a:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     d0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d12:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     d16:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d1a:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d1e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     d22:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d26:	4c75      	ldr	r4, [pc, #468]	; (efc <system_init+0x2a4>)
     d28:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     d2c:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d30:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     d34:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     d38:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d3c:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     d40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d48:	f44f 6400 	mov.w	r4, #2048	; 0x800
     d4c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d50:	f8df e234 	ldr.w	lr, [pc, #564]	; f88 <system_init+0x330>
     d54:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     d58:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d5c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d60:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     d64:	f045 0504 	orr.w	r5, r5, #4
     d68:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d6c:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d70:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     d74:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d78:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d7c:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d80:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d84:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     d88:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d8c:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d94:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d9c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     da0:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     da4:	4a56      	ldr	r2, [pc, #344]	; (f00 <system_init+0x2a8>)
     da6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     daa:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     dae:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     db2:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     db6:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     dba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dbe:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     dc6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     dd2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     dd6:	494b      	ldr	r1, [pc, #300]	; (f04 <system_init+0x2ac>)
     dd8:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ddc:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     de0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     de4:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     de8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     dec:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     df0:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     df4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     df8:	4943      	ldr	r1, [pc, #268]	; (f08 <system_init+0x2b0>)
     dfa:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dfe:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     e02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e06:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e0a:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e0e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e12:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     e16:	4a3d      	ldr	r2, [pc, #244]	; (f0c <system_init+0x2b4>)
     e18:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e1c:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e24:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     e28:	4b39      	ldr	r3, [pc, #228]	; (f10 <system_init+0x2b8>)
     e2a:	4798      	blx	r3
	ADC_1_init();
     e2c:	4b39      	ldr	r3, [pc, #228]	; (f14 <system_init+0x2bc>)
     e2e:	4798      	blx	r3

	CRC_0_init();
     e30:	4b39      	ldr	r3, [pc, #228]	; (f18 <system_init+0x2c0>)
     e32:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     e34:	4b39      	ldr	r3, [pc, #228]	; (f1c <system_init+0x2c4>)
     e36:	4798      	blx	r3

	FLASH_0_init();
     e38:	4b39      	ldr	r3, [pc, #228]	; (f20 <system_init+0x2c8>)
     e3a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     e3c:	4c39      	ldr	r4, [pc, #228]	; (f24 <system_init+0x2cc>)
     e3e:	6963      	ldr	r3, [r4, #20]
     e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     e44:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
     e46:	4b38      	ldr	r3, [pc, #224]	; (f28 <system_init+0x2d0>)
     e48:	4798      	blx	r3
     e4a:	4602      	mov	r2, r0
     e4c:	4937      	ldr	r1, [pc, #220]	; (f2c <system_init+0x2d4>)
     e4e:	4838      	ldr	r0, [pc, #224]	; (f30 <system_init+0x2d8>)
     e50:	4d38      	ldr	r5, [pc, #224]	; (f34 <system_init+0x2dc>)
     e52:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
     e54:	4b38      	ldr	r3, [pc, #224]	; (f38 <system_init+0x2e0>)
     e56:	4798      	blx	r3
	USART_NORTH_init();
     e58:	4b38      	ldr	r3, [pc, #224]	; (f3c <system_init+0x2e4>)
     e5a:	4798      	blx	r3
	GRID_AUX_init();
     e5c:	4b38      	ldr	r3, [pc, #224]	; (f40 <system_init+0x2e8>)
     e5e:	4798      	blx	r3

	UI_SPI_init();
     e60:	4b38      	ldr	r3, [pc, #224]	; (f44 <system_init+0x2ec>)
     e62:	4798      	blx	r3
	USART_WEST_init();
     e64:	4b38      	ldr	r3, [pc, #224]	; (f48 <system_init+0x2f0>)
     e66:	4798      	blx	r3

	SYS_I2C_init();
     e68:	4b38      	ldr	r3, [pc, #224]	; (f4c <system_init+0x2f4>)
     e6a:	4798      	blx	r3
	USART_SOUTH_init();
     e6c:	4b38      	ldr	r3, [pc, #224]	; (f50 <system_init+0x2f8>)
     e6e:	4798      	blx	r3

	GRID_LED_init();
     e70:	4b38      	ldr	r3, [pc, #224]	; (f54 <system_init+0x2fc>)
     e72:	4798      	blx	r3

	delay_driver_init();
     e74:	4b38      	ldr	r3, [pc, #224]	; (f58 <system_init+0x300>)
     e76:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     e78:	6963      	ldr	r3, [r4, #20]
     e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e7e:	6163      	str	r3, [r4, #20]
     e80:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
     e84:	f04f 0840 	mov.w	r8, #64	; 0x40
     e88:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     e8c:	4e33      	ldr	r6, [pc, #204]	; (f5c <system_init+0x304>)
     e8e:	47b0      	blx	r6
     e90:	4602      	mov	r2, r0
     e92:	4933      	ldr	r1, [pc, #204]	; (f60 <system_init+0x308>)
     e94:	4833      	ldr	r0, [pc, #204]	; (f64 <system_init+0x30c>)
     e96:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     e98:	6963      	ldr	r3, [r4, #20]
     e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e9e:	6163      	str	r3, [r4, #20]
     ea0:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
     ea4:	47b0      	blx	r6
     ea6:	4602      	mov	r2, r0
     ea8:	492f      	ldr	r1, [pc, #188]	; (f68 <system_init+0x310>)
     eaa:	4830      	ldr	r0, [pc, #192]	; (f6c <system_init+0x314>)
     eac:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     eae:	69a3      	ldr	r3, [r4, #24]
     eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     eb4:	61a3      	str	r3, [r4, #24]
     eb6:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
     eba:	47b0      	blx	r6
     ebc:	4602      	mov	r2, r0
     ebe:	492c      	ldr	r1, [pc, #176]	; (f70 <system_init+0x318>)
     ec0:	482c      	ldr	r0, [pc, #176]	; (f74 <system_init+0x31c>)
     ec2:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     ec4:	69a3      	ldr	r3, [r4, #24]
     ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     eca:	61a3      	str	r3, [r4, #24]
     ecc:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
     ed0:	47b0      	blx	r6
     ed2:	4602      	mov	r2, r0
     ed4:	4928      	ldr	r1, [pc, #160]	; (f78 <system_init+0x320>)
     ed6:	4829      	ldr	r0, [pc, #164]	; (f7c <system_init+0x324>)
     ed8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
     eda:	4b29      	ldr	r3, [pc, #164]	; (f80 <system_init+0x328>)
     edc:	4798      	blx	r3

	WDT_0_init();
     ede:	4b29      	ldr	r3, [pc, #164]	; (f84 <system_init+0x32c>)
     ee0:	4798      	blx	r3
     ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ee6:	bf00      	nop
     ee8:	00005805 	.word	0x00005805
     eec:	41008000 	.word	0x41008000
     ef0:	40020000 	.word	0x40020000
     ef4:	c0020020 	.word	0xc0020020
     ef8:	c0020000 	.word	0xc0020000
     efc:	40028000 	.word	0x40028000
     f00:	c0020004 	.word	0xc0020004
     f04:	c0000008 	.word	0xc0000008
     f08:	c0000010 	.word	0xc0000010
     f0c:	c0000020 	.word	0xc0000020
     f10:	00000381 	.word	0x00000381
     f14:	00000419 	.word	0x00000419
     f18:	000004bd 	.word	0x000004bd
     f1c:	000004e5 	.word	0x000004e5
     f20:	00000529 	.word	0x00000529
     f24:	40000800 	.word	0x40000800
     f28:	00005fe9 	.word	0x00005fe9
     f2c:	40002400 	.word	0x40002400
     f30:	20000eec 	.word	0x20000eec
     f34:	0000487d 	.word	0x0000487d
     f38:	000005b5 	.word	0x000005b5
     f3c:	00000659 	.word	0x00000659
     f40:	000006fd 	.word	0x000006fd
     f44:	00000819 	.word	0x00000819
     f48:	000008ad 	.word	0x000008ad
     f4c:	00000969 	.word	0x00000969
     f50:	000009fd 	.word	0x000009fd
     f54:	00000b11 	.word	0x00000b11
     f58:	00000b39 	.word	0x00000b39
     f5c:	00007829 	.word	0x00007829
     f60:	40003800 	.word	0x40003800
     f64:	20001214 	.word	0x20001214
     f68:	40003c00 	.word	0x40003c00
     f6c:	20001108 	.word	0x20001108
     f70:	4101a000 	.word	0x4101a000
     f74:	20000f0c 	.word	0x20000f0c
     f78:	4101c000 	.word	0x4101c000
     f7c:	200011f4 	.word	0x200011f4
     f80:	00000bf9 	.word	0x00000bf9
     f84:	00000c25 	.word	0x00000c25
     f88:	40020800 	.word	0x40020800

00000f8c <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
     f8c:	b538      	push	{r3, r4, r5, lr}
     f8e:	4604      	mov	r4, r0
     f90:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
     f92:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
     f94:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
     f96:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
     f98:	2300      	movs	r3, #0
     f9a:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
     f9c:	0048      	lsls	r0, r1, #1
     f9e:	4b09      	ldr	r3, [pc, #36]	; (fc4 <grid_ain_channel_init+0x38>)
     fa0:	4798      	blx	r3
     fa2:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
     fa4:	b14d      	cbz	r5, fba <grid_ain_channel_init+0x2e>
     fa6:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
     fa8:	4619      	mov	r1, r3
     faa:	6822      	ldr	r2, [r4, #0]
     fac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
     fb0:	3301      	adds	r3, #1
     fb2:	b2db      	uxtb	r3, r3
     fb4:	7922      	ldrb	r2, [r4, #4]
     fb6:	429a      	cmp	r2, r3
     fb8:	d8f7      	bhi.n	faa <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
     fba:	2000      	movs	r0, #0
     fbc:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
     fbe:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
     fc0:	bd38      	pop	{r3, r4, r5, pc}
     fc2:	bf00      	nop
     fc4:	0000b2b1 	.word	0x0000b2b1

00000fc8 <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
     fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     fcc:	4605      	mov	r5, r0
     fce:	4689      	mov	r9, r1
     fd0:	4617      	mov	r7, r2
     fd2:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
     fd4:	0100      	lsls	r0, r0, #4
     fd6:	4b0c      	ldr	r3, [pc, #48]	; (1008 <grid_ain_init+0x40>)
     fd8:	4798      	blx	r3
     fda:	4b0c      	ldr	r3, [pc, #48]	; (100c <grid_ain_init+0x44>)
     fdc:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
     fde:	b185      	cbz	r5, 1002 <grid_ain_init+0x3a>
     fe0:	3d01      	subs	r5, #1
     fe2:	b2ed      	uxtb	r5, r5
     fe4:	3501      	adds	r5, #1
     fe6:	012d      	lsls	r5, r5, #4
     fe8:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
     fea:	469a      	mov	sl, r3
     fec:	4e08      	ldr	r6, [pc, #32]	; (1010 <grid_ain_init+0x48>)
     fee:	4643      	mov	r3, r8
     ff0:	463a      	mov	r2, r7
     ff2:	4649      	mov	r1, r9
     ff4:	f8da 0000 	ldr.w	r0, [sl]
     ff8:	4420      	add	r0, r4
     ffa:	47b0      	blx	r6
     ffc:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
     ffe:	42ac      	cmp	r4, r5
    1000:	d1f5      	bne.n	fee <grid_ain_init+0x26>
	}

	return 0;
}
    1002:	2000      	movs	r0, #0
    1004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1008:	0000b2b1 	.word	0x0000b2b1
    100c:	20001770 	.word	0x20001770
    1010:	00000f8d 	.word	0x00000f8d

00001014 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    1014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    1018:	0100      	lsls	r0, r0, #4
    101a:	4b3c      	ldr	r3, [pc, #240]	; (110c <grid_ain_add_sample+0xf8>)
    101c:	f8d3 a000 	ldr.w	sl, [r3]
    1020:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1024:	f89c 6004 	ldrb.w	r6, [ip, #4]
    1028:	2e00      	cmp	r6, #0
    102a:	d05b      	beq.n	10e4 <grid_ain_add_sample+0xd0>
    102c:	f85a 5000 	ldr.w	r5, [sl, r0]
    1030:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1032:	2200      	movs	r2, #0
    1034:	4690      	mov	r8, r2
    1036:	4691      	mov	r9, r2
    1038:	4696      	mov	lr, r2
    103a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    103e:	4614      	mov	r4, r2
    1040:	fa5f fb82 	uxtb.w	fp, r2
    1044:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    1048:	441c      	add	r4, r3
		
		if (current > maximum){
    104a:	4573      	cmp	r3, lr
    104c:	bf84      	itt	hi
    104e:	46d8      	movhi	r8, fp
			maximum = current;
    1050:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1052:	42bb      	cmp	r3, r7
    1054:	bf3c      	itt	cc
    1056:	46d9      	movcc	r9, fp
			minimum = current;
    1058:	461f      	movcc	r7, r3
    105a:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    105c:	b2d3      	uxtb	r3, r2
    105e:	42b3      	cmp	r3, r6
    1060:	d3ee      	bcc.n	1040 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1062:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    1066:	b2b6      	uxth	r6, r6
    1068:	428e      	cmp	r6, r1
    106a:	d23f      	bcs.n	10ec <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    106c:	f85a 3000 	ldr.w	r3, [sl, r0]
    1070:	440c      	add	r4, r1
    1072:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    1076:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    1078:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    107c:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1080:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1084:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1088:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    108c:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    108e:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1092:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1094:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    1096:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    1098:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    109c:	b29b      	uxth	r3, r3
    109e:	408b      	lsls	r3, r1
    10a0:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    10a2:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    10a6:	1b92      	subs	r2, r2, r6
    10a8:	2a00      	cmp	r2, #0
    10aa:	bfb8      	it	lt
    10ac:	4252      	neglt	r2, r2
    10ae:	2601      	movs	r6, #1
    10b0:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    10b4:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    10b8:	42be      	cmp	r6, r7
    10ba:	d020      	beq.n	10fe <grid_ain_add_sample+0xea>
    10bc:	4282      	cmp	r2, r0
    10be:	dc08      	bgt.n	10d2 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    10c0:	2201      	movs	r2, #1
    10c2:	fa02 f505 	lsl.w	r5, r2, r5
    10c6:	fa02 f101 	lsl.w	r1, r2, r1
    10ca:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    10cc:	428f      	cmp	r7, r1
    10ce:	d000      	beq.n	10d2 <grid_ain_add_sample+0xbe>
    10d0:	b9c7      	cbnz	r7, 1104 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    10d2:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    10d6:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    10da:	2001      	movs	r0, #1
    10dc:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    10e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    10e4:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    10e6:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    10e8:	2400      	movs	r4, #0
    10ea:	e7ba      	b.n	1062 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    10ec:	f85a 3000 	ldr.w	r3, [sl, r0]
    10f0:	440c      	add	r4, r1
    10f2:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    10f6:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    10f8:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    10fc:	e7be      	b.n	107c <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    10fe:	2000      	movs	r0, #0
    1100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1104:	2000      	movs	r0, #0
	}
	
}
    1106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    110a:	bf00      	nop
    110c:	20001770 	.word	0x20001770

00001110 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    1110:	4b02      	ldr	r3, [pc, #8]	; (111c <grid_ain_get_changed+0xc>)
    1112:	681b      	ldr	r3, [r3, #0]
    1114:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    1118:	7b00      	ldrb	r0, [r0, #12]
    111a:	4770      	bx	lr
    111c:	20001770 	.word	0x20001770

00001120 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    1120:	4b09      	ldr	r3, [pc, #36]	; (1148 <grid_ain_get_average+0x28>)
    1122:	681b      	ldr	r3, [r3, #0]
    1124:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    1128:	2300      	movs	r3, #0
    112a:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    112c:	1fcb      	subs	r3, r1, #7
    112e:	b2db      	uxtb	r3, r3
    1130:	2b07      	cmp	r3, #7
    1132:	d806      	bhi.n	1142 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1134:	8903      	ldrh	r3, [r0, #8]
    1136:	7940      	ldrb	r0, [r0, #5]
    1138:	1a40      	subs	r0, r0, r1
    113a:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    113e:	b280      	uxth	r0, r0
    1140:	4770      	bx	lr
    1142:	2000      	movs	r0, #0
    1144:	e7fb      	b.n	113e <grid_ain_get_average+0x1e>
    1146:	bf00      	nop
    1148:	20001770 	.word	0x20001770

0000114c <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    114c:	b538      	push	{r3, r4, r5, lr}
    114e:	4604      	mov	r4, r0
    1150:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1152:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1154:	2300      	movs	r3, #0
    1156:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    1158:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    115a:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    115c:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    115e:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1160:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1162:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1164:	4608      	mov	r0, r1
    1166:	4b08      	ldr	r3, [pc, #32]	; (1188 <grid_buffer_init+0x3c>)
    1168:	4798      	blx	r3
    116a:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    116c:	b900      	cbnz	r0, 1170 <grid_buffer_init+0x24>
    116e:	e7fe      	b.n	116e <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1170:	b145      	cbz	r5, 1184 <grid_buffer_init+0x38>
    1172:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1174:	4619      	mov	r1, r3
    1176:	6862      	ldr	r2, [r4, #4]
    1178:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    117a:	3301      	adds	r3, #1
    117c:	b29b      	uxth	r3, r3
    117e:	8822      	ldrh	r2, [r4, #0]
    1180:	429a      	cmp	r2, r3
    1182:	d8f8      	bhi.n	1176 <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1184:	2001      	movs	r0, #1
    1186:	bd38      	pop	{r3, r4, r5, pc}
    1188:	0000b2b1 	.word	0x0000b2b1

0000118c <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    118c:	8903      	ldrh	r3, [r0, #8]
    118e:	8a02      	ldrh	r2, [r0, #16]
    1190:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1192:	bf8f      	iteee	hi
    1194:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    1196:	8800      	ldrhls	r0, [r0, #0]
    1198:	18c0      	addls	r0, r0, r3
    119a:	1a80      	subls	r0, r0, r2
    119c:	b280      	uxth	r0, r0

	return space;

	
	
}
    119e:	4770      	bx	lr

000011a0 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    11a0:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    11a2:	8903      	ldrh	r3, [r0, #8]
    11a4:	8a02      	ldrh	r2, [r0, #16]
    11a6:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    11a8:	bf9c      	itt	ls
    11aa:	8804      	ldrhls	r4, [r0, #0]
    11ac:	191b      	addls	r3, r3, r4
    11ae:	1a9b      	subs	r3, r3, r2
    11b0:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    11b2:	428b      	cmp	r3, r1
    11b4:	d90a      	bls.n	11cc <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    11b6:	440a      	add	r2, r1
    11b8:	8804      	ldrh	r4, [r0, #0]
    11ba:	fb92 f3f4 	sdiv	r3, r2, r4
    11be:	fb04 2213 	mls	r2, r4, r3, r2
    11c2:	8242      	strh	r2, [r0, #18]
		
		return length;
    11c4:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    11c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    11ca:	4770      	bx	lr
		return 0; // failed
    11cc:	2000      	movs	r0, #0
    11ce:	e7fa      	b.n	11c6 <grid_buffer_write_init+0x26>

000011d0 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    11d0:	8a83      	ldrh	r3, [r0, #20]
    11d2:	6842      	ldr	r2, [r0, #4]
    11d4:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    11d6:	8a83      	ldrh	r3, [r0, #20]
    11d8:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    11da:	b29b      	uxth	r3, r3
    11dc:	8801      	ldrh	r1, [r0, #0]
    11de:	fbb3 f2f1 	udiv	r2, r3, r1
    11e2:	fb01 3312 	mls	r3, r1, r2, r3
    11e6:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    11e8:	2001      	movs	r0, #1
    11ea:	4770      	bx	lr

000011ec <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    11ec:	8a83      	ldrh	r3, [r0, #20]
    11ee:	8a42      	ldrh	r2, [r0, #18]
    11f0:	429a      	cmp	r2, r3
    11f2:	d000      	beq.n	11f6 <grid_buffer_write_acknowledge+0xa>
    11f4:	e7fe      	b.n	11f4 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    11f6:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    11f8:	2001      	movs	r0, #1
    11fa:	4770      	bx	lr

000011fc <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    11fc:	8983      	ldrh	r3, [r0, #12]
    11fe:	8942      	ldrh	r2, [r0, #10]
    1200:	429a      	cmp	r2, r3
    1202:	d000      	beq.n	1206 <grid_buffer_read_size+0xa>
    1204:	e7fe      	b.n	1204 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1206:	8902      	ldrh	r2, [r0, #8]
    1208:	429a      	cmp	r2, r3
    120a:	d000      	beq.n	120e <grid_buffer_read_size+0x12>
    120c:	e7fe      	b.n	120c <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    120e:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    1210:	8a05      	ldrh	r5, [r0, #16]
    1212:	42ab      	cmp	r3, r5
    1214:	d025      	beq.n	1262 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1216:	8804      	ldrh	r4, [r0, #0]
    1218:	b1fc      	cbz	r4, 125a <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    121a:	4626      	mov	r6, r4
    121c:	fb93 f2f4 	sdiv	r2, r3, r4
    1220:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    1224:	b291      	uxth	r1, r2
    1226:	428d      	cmp	r5, r1
    1228:	d01d      	beq.n	1266 <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    122a:	6840      	ldr	r0, [r0, #4]
    122c:	5c42      	ldrb	r2, [r0, r1]
    122e:	2a0a      	cmp	r2, #10
    1230:	d114      	bne.n	125c <grid_buffer_read_size+0x60>
    1232:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1234:	3301      	adds	r3, #1
    1236:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    1238:	bcf0      	pop	{r4, r5, r6, r7}
    123a:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    123c:	fb92 f1f6 	sdiv	r1, r2, r6
    1240:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1244:	b28f      	uxth	r7, r1
    1246:	42bd      	cmp	r5, r7
    1248:	d00f      	beq.n	126a <grid_buffer_read_size+0x6e>
    124a:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    124c:	5dc1      	ldrb	r1, [r0, r7]
    124e:	290a      	cmp	r1, #10
    1250:	d0f0      	beq.n	1234 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1252:	3301      	adds	r3, #1
    1254:	b29b      	uxth	r3, r3
    1256:	42a3      	cmp	r3, r4
    1258:	d1f0      	bne.n	123c <grid_buffer_read_size+0x40>
    125a:	e7fe      	b.n	125a <grid_buffer_read_size+0x5e>
    125c:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    125e:	2300      	movs	r3, #0
    1260:	e7f7      	b.n	1252 <grid_buffer_read_size+0x56>
		return 0;
    1262:	2000      	movs	r0, #0
    1264:	e7e8      	b.n	1238 <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    1266:	2000      	movs	r0, #0
    1268:	e7e6      	b.n	1238 <grid_buffer_read_size+0x3c>
    126a:	2000      	movs	r0, #0
    126c:	e7e4      	b.n	1238 <grid_buffer_read_size+0x3c>

0000126e <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    126e:	8982      	ldrh	r2, [r0, #12]
    1270:	8943      	ldrh	r3, [r0, #10]
    1272:	4293      	cmp	r3, r2
    1274:	d000      	beq.n	1278 <grid_buffer_read_init+0xa>
    1276:	e7fe      	b.n	1276 <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1278:	8903      	ldrh	r3, [r0, #8]
    127a:	4293      	cmp	r3, r2
    127c:	d000      	beq.n	1280 <grid_buffer_read_init+0x12>
    127e:	e7fe      	b.n	127e <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1280:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1282:	8a05      	ldrh	r5, [r0, #16]
    1284:	42aa      	cmp	r2, r5
    1286:	d031      	beq.n	12ec <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1288:	8804      	ldrh	r4, [r0, #0]
    128a:	b35c      	cbz	r4, 12e4 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    128c:	4626      	mov	r6, r4
    128e:	fb92 f3f4 	sdiv	r3, r2, r4
    1292:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    1296:	b299      	uxth	r1, r3
    1298:	428d      	cmp	r5, r1
    129a:	d029      	beq.n	12f0 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    129c:	6847      	ldr	r7, [r0, #4]
    129e:	460b      	mov	r3, r1
    12a0:	5c79      	ldrb	r1, [r7, r1]
    12a2:	290a      	cmp	r1, #10
    12a4:	d11f      	bne.n	12e6 <grid_buffer_read_init+0x78>
    12a6:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    12a8:	3301      	adds	r3, #1
    12aa:	fb93 f2f4 	sdiv	r2, r3, r4
    12ae:	fb04 3312 	mls	r3, r4, r2, r3
    12b2:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    12b4:	1c4b      	adds	r3, r1, #1
    12b6:	b29b      	uxth	r3, r3
    12b8:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    12ba:	4618      	mov	r0, r3
    12bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    12be:	fb92 f3f6 	sdiv	r3, r2, r6
    12c2:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    12c6:	fa1f fe83 	uxth.w	lr, r3
    12ca:	4575      	cmp	r5, lr
    12cc:	d012      	beq.n	12f4 <grid_buffer_read_init+0x86>
    12ce:	4673      	mov	r3, lr
    12d0:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    12d2:	f817 e00e 	ldrb.w	lr, [r7, lr]
    12d6:	f1be 0f0a 	cmp.w	lr, #10
    12da:	d0e5      	beq.n	12a8 <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    12dc:	3101      	adds	r1, #1
    12de:	b289      	uxth	r1, r1
    12e0:	42a1      	cmp	r1, r4
    12e2:	d1ec      	bne.n	12be <grid_buffer_read_init+0x50>
    12e4:	e7fe      	b.n	12e4 <grid_buffer_read_init+0x76>
    12e6:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    12e8:	2100      	movs	r1, #0
    12ea:	e7f7      	b.n	12dc <grid_buffer_read_init+0x6e>
		return 0;
    12ec:	2300      	movs	r3, #0
    12ee:	e7e4      	b.n	12ba <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    12f0:	2300      	movs	r3, #0
    12f2:	e7e2      	b.n	12ba <grid_buffer_read_init+0x4c>
    12f4:	2300      	movs	r3, #0
    12f6:	e7e0      	b.n	12ba <grid_buffer_read_init+0x4c>

000012f8 <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    12f8:	8983      	ldrh	r3, [r0, #12]
    12fa:	8941      	ldrh	r1, [r0, #10]
    12fc:	4299      	cmp	r1, r3
    12fe:	d00e      	beq.n	131e <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    1300:	b410      	push	{r4}
    1302:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    1304:	6841      	ldr	r1, [r0, #4]
    1306:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    1308:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    130a:	b29b      	uxth	r3, r3
    130c:	8814      	ldrh	r4, [r2, #0]
    130e:	fbb3 f1f4 	udiv	r1, r3, r4
    1312:	fb04 3311 	mls	r3, r4, r1, r3
    1316:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    1318:	f85d 4b04 	ldr.w	r4, [sp], #4
    131c:	4770      	bx	lr
    131e:	e7fe      	b.n	131e <grid_buffer_read_character+0x26>

00001320 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    1320:	8983      	ldrh	r3, [r0, #12]
    1322:	8942      	ldrh	r2, [r0, #10]
    1324:	429a      	cmp	r2, r3
    1326:	d000      	beq.n	132a <grid_buffer_read_acknowledge+0xa>
    1328:	e7fe      	b.n	1328 <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    132a:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    132c:	2001      	movs	r0, #1
    132e:	4770      	bx	lr

00001330 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    1330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1334:	4604      	mov	r4, r0
    1336:	4690      	mov	r8, r2
    1338:	461f      	mov	r7, r3
    133a:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    133e:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1342:	4e33      	ldr	r6, [pc, #204]	; (1410 <grid_port_init+0xe0>)
    1344:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    1346:	4641      	mov	r1, r8
    1348:	f504 609e 	add.w	r0, r4, #1264	; 0x4f0
    134c:	47b0      	blx	r6
	
	por->cooldown = 0;
    134e:	2300      	movs	r3, #0
    1350:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    1352:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1356:	72a2      	strb	r2, [r4, #10]
	
	por->direction = dir;
    1358:	f89d 201c 	ldrb.w	r2, [sp, #28]
    135c:	7262      	strb	r2, [r4, #9]
	
	por->usart	= usart;
    135e:	6067      	str	r7, [r4, #4]
	por->type		= type;
    1360:	7225      	strb	r5, [r4, #8]
	
	por->tx_double_buffer_status	= 0;
    1362:	81a3      	strh	r3, [r4, #12]
	por->rx_double_buffer_status	= 0;
    1364:	61e3      	str	r3, [r4, #28]
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    1366:	4619      	mov	r1, r3
    1368:	18e2      	adds	r2, r4, r3
    136a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    136e:	3301      	adds	r3, #1
    1370:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1374:	d1f8      	bne.n	1368 <grid_port_init+0x38>
    1376:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    1378:	4619      	mov	r1, r3
    137a:	18e2      	adds	r2, r4, r3
    137c:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1380:	3301      	adds	r3, #1
    1382:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1386:	d1f8      	bne.n	137a <grid_port_init+0x4a>
	}
	
	por->partner_fi = 0;
    1388:	2300      	movs	r3, #0
    138a:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
	
	por->partner_hwcfg = 0;
    138e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	por->partner_status = 1;
    1392:	2301      	movs	r3, #1
    1394:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    1398:	429d      	cmp	r5, r3
    139a:	d004      	beq.n	13a6 <grid_port_init+0x76>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    139c:	2301      	movs	r3, #1
    139e:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
    13a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    13a6:	2300      	movs	r3, #0
    13a8:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
		por->partner_fi = 0;
    13ac:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
		if (por->direction == GRID_MSG_NORTH){
    13b0:	7a63      	ldrb	r3, [r4, #9]
    13b2:	b2db      	uxtb	r3, r3
    13b4:	2b11      	cmp	r3, #17
    13b6:	d013      	beq.n	13e0 <grid_port_init+0xb0>
		else if (por->direction == GRID_MSG_EAST){
    13b8:	7a63      	ldrb	r3, [r4, #9]
    13ba:	b2db      	uxtb	r3, r3
    13bc:	2b12      	cmp	r3, #18
    13be:	d017      	beq.n	13f0 <grid_port_init+0xc0>
		else if (por->direction == GRID_MSG_SOUTH){
    13c0:	7a63      	ldrb	r3, [r4, #9]
    13c2:	b2db      	uxtb	r3, r3
    13c4:	2b13      	cmp	r3, #19
    13c6:	d01b      	beq.n	1400 <grid_port_init+0xd0>
		else if (por->direction == GRID_MSG_WEST){
    13c8:	7a63      	ldrb	r3, [r4, #9]
    13ca:	b2db      	uxtb	r3, r3
    13cc:	2b14      	cmp	r3, #20
    13ce:	d1e8      	bne.n	13a2 <grid_port_init+0x72>
			por->dx = -1;
    13d0:	23ff      	movs	r3, #255	; 0xff
    13d2:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    13d6:	2300      	movs	r3, #0
    13d8:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    13dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    13e0:	2300      	movs	r3, #0
    13e2:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 1;
    13e6:	2301      	movs	r3, #1
    13e8:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    13ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    13f0:	2301      	movs	r3, #1
    13f2:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    13f6:	2300      	movs	r3, #0
    13f8:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    13fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    1400:	2300      	movs	r3, #0
    1402:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = -1;
    1406:	23ff      	movs	r3, #255	; 0xff
    1408:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1410:	0000114d 	.word	0x0000114d

00001414 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    1414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1418:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    141a:	2600      	movs	r6, #0
    141c:	9602      	str	r6, [sp, #8]
    141e:	2311      	movs	r3, #17
    1420:	9301      	str	r3, [sp, #4]
    1422:	2401      	movs	r4, #1
    1424:	9400      	str	r4, [sp, #0]
    1426:	4b25      	ldr	r3, [pc, #148]	; (14bc <grid_port_init_all+0xa8>)
    1428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    142c:	4611      	mov	r1, r2
    142e:	4824      	ldr	r0, [pc, #144]	; (14c0 <grid_port_init_all+0xac>)
    1430:	4d24      	ldr	r5, [pc, #144]	; (14c4 <grid_port_init_all+0xb0>)
    1432:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    1434:	9402      	str	r4, [sp, #8]
    1436:	2312      	movs	r3, #18
    1438:	9301      	str	r3, [sp, #4]
    143a:	9400      	str	r4, [sp, #0]
    143c:	4b22      	ldr	r3, [pc, #136]	; (14c8 <grid_port_init_all+0xb4>)
    143e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1442:	4611      	mov	r1, r2
    1444:	4821      	ldr	r0, [pc, #132]	; (14cc <grid_port_init_all+0xb8>)
    1446:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    1448:	f04f 0902 	mov.w	r9, #2
    144c:	f8cd 9008 	str.w	r9, [sp, #8]
    1450:	2313      	movs	r3, #19
    1452:	9301      	str	r3, [sp, #4]
    1454:	9400      	str	r4, [sp, #0]
    1456:	4b1e      	ldr	r3, [pc, #120]	; (14d0 <grid_port_init_all+0xbc>)
    1458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    145c:	4611      	mov	r1, r2
    145e:	481d      	ldr	r0, [pc, #116]	; (14d4 <grid_port_init_all+0xc0>)
    1460:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    1462:	2703      	movs	r7, #3
    1464:	9702      	str	r7, [sp, #8]
    1466:	2314      	movs	r3, #20
    1468:	9301      	str	r3, [sp, #4]
    146a:	9400      	str	r4, [sp, #0]
    146c:	4b1a      	ldr	r3, [pc, #104]	; (14d8 <grid_port_init_all+0xc4>)
    146e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1472:	4611      	mov	r1, r2
    1474:	4819      	ldr	r0, [pc, #100]	; (14dc <grid_port_init_all+0xc8>)
    1476:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1);
    1478:	f8df 8068 	ldr.w	r8, [pc, #104]	; 14e4 <grid_port_init_all+0xd0>
    147c:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1480:	f8cd a008 	str.w	sl, [sp, #8]
    1484:	9601      	str	r6, [sp, #4]
    1486:	9700      	str	r7, [sp, #0]
    1488:	4633      	mov	r3, r6
    148a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    148e:	4611      	mov	r1, r2
    1490:	4640      	mov	r0, r8
    1492:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    1494:	4f12      	ldr	r7, [pc, #72]	; (14e0 <grid_port_init_all+0xcc>)
    1496:	f8cd a008 	str.w	sl, [sp, #8]
    149a:	9601      	str	r6, [sp, #4]
    149c:	f8cd 9000 	str.w	r9, [sp]
    14a0:	4633      	mov	r3, r6
    14a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    14a6:	4611      	mov	r1, r2
    14a8:	4638      	mov	r0, r7
    14aa:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    14ac:	f888 450f 	strb.w	r4, [r8, #1295]	; 0x50f
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    14b0:	f887 450f 	strb.w	r4, [r7, #1295]	; 0x50f
	
	
}
    14b4:	b004      	add	sp, #16
    14b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    14ba:	bf00      	nop
    14bc:	20001074 	.word	0x20001074
    14c0:	20001238 	.word	0x20001238
    14c4:	00001331 	.word	0x00001331
    14c8:	20001020 	.word	0x20001020
    14cc:	20003210 	.word	0x20003210
    14d0:	20001178 	.word	0x20001178
    14d4:	200027ec 	.word	0x200027ec
    14d8:	20001128 	.word	0x20001128
    14dc:	200022c8 	.word	0x200022c8
    14e0:	20002d00 	.word	0x20002d00
    14e4:	20001788 	.word	0x20001788

000014e8 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por){
    14e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14ec:	b091      	sub	sp, #68	; 0x44
    14ee:	af02      	add	r7, sp, #8
    14f0:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    14f2:	f500 699e 	add.w	r9, r0, #1264	; 0x4f0
    14f6:	4648      	mov	r0, r9
    14f8:	4b54      	ldr	r3, [pc, #336]	; (164c <grid_port_process_inbound+0x164>)
    14fa:	4798      	blx	r3
	
	if (!packet_size){
    14fc:	b920      	cbnz	r0, 1508 <grid_port_process_inbound+0x20>
    14fe:	2000      	movs	r0, #0
		}	

		
	}
		
}
    1500:	373c      	adds	r7, #60	; 0x3c
    1502:	46bd      	mov	sp, r7
    1504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1508:	4680      	mov	r8, r0
	}else{
    150a:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    150e:	4b50      	ldr	r3, [pc, #320]	; (1650 <grid_port_process_inbound+0x168>)
    1510:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    1512:	4b50      	ldr	r3, [pc, #320]	; (1654 <grid_port_process_inbound+0x16c>)
    1514:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    1516:	4b50      	ldr	r3, [pc, #320]	; (1658 <grid_port_process_inbound+0x170>)
    1518:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    151a:	4b50      	ldr	r3, [pc, #320]	; (165c <grid_port_process_inbound+0x174>)
    151c:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    151e:	4b50      	ldr	r3, [pc, #320]	; (1660 <grid_port_process_inbound+0x178>)
    1520:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    1522:	4b50      	ldr	r3, [pc, #320]	; (1664 <grid_port_process_inbound+0x17c>)
    1524:	61fb      	str	r3, [r7, #28]
    1526:	f107 0308 	add.w	r3, r7, #8
    152a:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    152e:	2600      	movs	r6, #0
    1530:	e001      	b.n	1536 <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    1532:	428b      	cmp	r3, r1
    1534:	d00e      	beq.n	1554 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    1536:	f853 2b04 	ldr.w	r2, [r3], #4
    153a:	f892 050f 	ldrb.w	r0, [r2, #1295]	; 0x50f
    153e:	2800      	cmp	r0, #0
    1540:	d0f7      	beq.n	1532 <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    1542:	f107 0038 	add.w	r0, r7, #56	; 0x38
    1546:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    154a:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    154e:	3601      	adds	r6, #1
    1550:	b2f6      	uxtb	r6, r6
    1552:	e7ee      	b.n	1532 <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    1554:	2e00      	cmp	r6, #0
    1556:	d068      	beq.n	162a <grid_port_process_inbound+0x142>
    1558:	f107 0a20 	add.w	sl, r7, #32
    155c:	1e74      	subs	r4, r6, #1
    155e:	b2e4      	uxtb	r4, r4
    1560:	3401      	adds	r4, #1
    1562:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    1566:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    1568:	f8df b118 	ldr.w	fp, [pc, #280]	; 1684 <grid_port_process_inbound+0x19c>
    156c:	e001      	b.n	1572 <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    156e:	42a5      	cmp	r5, r4
    1570:	d016      	beq.n	15a0 <grid_port_process_inbound+0xb8>
			if (port_array[i] != por){
    1572:	f855 0b04 	ldr.w	r0, [r5], #4
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	4283      	cmp	r3, r0
    157a:	d0f8      	beq.n	156e <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    157c:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1580:	47d8      	blx	fp
    1582:	4580      	cmp	r8, r0
    1584:	d9f3      	bls.n	156e <grid_port_process_inbound+0x86>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    1586:	23c8      	movs	r3, #200	; 0xc8
    1588:	9301      	str	r3, [sp, #4]
    158a:	2302      	movs	r3, #2
    158c:	9300      	str	r3, [sp, #0]
    158e:	2300      	movs	r3, #0
    1590:	2264      	movs	r2, #100	; 0x64
    1592:	4611      	mov	r1, r2
    1594:	4834      	ldr	r0, [pc, #208]	; (1668 <grid_port_process_inbound+0x180>)
    1596:	4c35      	ldr	r4, [pc, #212]	; (166c <grid_port_process_inbound+0x184>)
    1598:	47a0      	blx	r4
    159a:	f8d7 d000 	ldr.w	sp, [r7]
    159e:	e7ae      	b.n	14fe <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    15a0:	4648      	mov	r0, r9
    15a2:	4b33      	ldr	r3, [pc, #204]	; (1670 <grid_port_process_inbound+0x188>)
    15a4:	4798      	blx	r3
    15a6:	4580      	cmp	r8, r0
    15a8:	d000      	beq.n	15ac <grid_port_process_inbound+0xc4>
    15aa:	e7fe      	b.n	15aa <grid_port_process_inbound+0xc2>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    15ac:	4c31      	ldr	r4, [pc, #196]	; (1674 <grid_port_process_inbound+0x18c>)
    15ae:	e001      	b.n	15b4 <grid_port_process_inbound+0xcc>
		for (uint8_t i=0; i<port_count; i++)
    15b0:	45aa      	cmp	sl, r5
    15b2:	d03f      	beq.n	1634 <grid_port_process_inbound+0x14c>
			if (port_array[i] != por){
    15b4:	f85a 0b04 	ldr.w	r0, [sl], #4
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	4283      	cmp	r3, r0
    15bc:	d0f8      	beq.n	15b0 <grid_port_process_inbound+0xc8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    15be:	4641      	mov	r1, r8
    15c0:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    15c4:	47a0      	blx	r4
    15c6:	e7f3      	b.n	15b0 <grid_port_process_inbound+0xc8>
			for (uint8_t i=0; i<port_count; i++){
    15c8:	42a5      	cmp	r5, r4
    15ca:	d009      	beq.n	15e0 <grid_port_process_inbound+0xf8>
				if (port_array[i] != por){
    15cc:	f854 0b04 	ldr.w	r0, [r4], #4
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	4283      	cmp	r3, r0
    15d4:	d0f8      	beq.n	15c8 <grid_port_process_inbound+0xe0>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    15d6:	6839      	ldr	r1, [r7, #0]
    15d8:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    15dc:	47d8      	blx	fp
    15de:	e7f3      	b.n	15c8 <grid_port_process_inbound+0xe0>
    15e0:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    15e4:	fa1f f38a 	uxth.w	r3, sl
    15e8:	4543      	cmp	r3, r8
    15ea:	d208      	bcs.n	15fe <grid_port_process_inbound+0x116>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    15ec:	4648      	mov	r0, r9
    15ee:	4b22      	ldr	r3, [pc, #136]	; (1678 <grid_port_process_inbound+0x190>)
    15f0:	4798      	blx	r3
    15f2:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    15f4:	2e00      	cmp	r6, #0
    15f6:	d0f3      	beq.n	15e0 <grid_port_process_inbound+0xf8>
    15f8:	f107 0420 	add.w	r4, r7, #32
    15fc:	e7e6      	b.n	15cc <grid_port_process_inbound+0xe4>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    15fe:	4648      	mov	r0, r9
    1600:	4b1e      	ldr	r3, [pc, #120]	; (167c <grid_port_process_inbound+0x194>)
    1602:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    1604:	2e00      	cmp	r6, #0
    1606:	f43f af7b 	beq.w	1500 <grid_port_process_inbound+0x18>
    160a:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    160e:	4e1c      	ldr	r6, [pc, #112]	; (1680 <grid_port_process_inbound+0x198>)
    1610:	e002      	b.n	1618 <grid_port_process_inbound+0x130>
		for (uint8_t i=0; i<port_count; i++)
    1612:	42a5      	cmp	r5, r4
    1614:	f43f af74 	beq.w	1500 <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    1618:	f854 0b04 	ldr.w	r0, [r4], #4
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	4283      	cmp	r3, r0
    1620:	d0f7      	beq.n	1612 <grid_port_process_inbound+0x12a>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1622:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1626:	47b0      	blx	r6
    1628:	e7f3      	b.n	1612 <grid_port_process_inbound+0x12a>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    162a:	4648      	mov	r0, r9
    162c:	4b10      	ldr	r3, [pc, #64]	; (1670 <grid_port_process_inbound+0x188>)
    162e:	4798      	blx	r3
    1630:	4540      	cmp	r0, r8
    1632:	d1ba      	bne.n	15aa <grid_port_process_inbound+0xc2>
    1634:	1e75      	subs	r5, r6, #1
    1636:	b2ed      	uxtb	r5, r5
    1638:	f107 0338 	add.w	r3, r7, #56	; 0x38
    163c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1640:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    1642:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1646:	f8df b040 	ldr.w	fp, [pc, #64]	; 1688 <grid_port_process_inbound+0x1a0>
    164a:	e7cf      	b.n	15ec <grid_port_process_inbound+0x104>
    164c:	000011fd 	.word	0x000011fd
    1650:	20001238 	.word	0x20001238
    1654:	20003210 	.word	0x20003210
    1658:	200027ec 	.word	0x200027ec
    165c:	200022c8 	.word	0x200022c8
    1660:	20001788 	.word	0x20001788
    1664:	20002d00 	.word	0x20002d00
    1668:	20001ca4 	.word	0x20001ca4
    166c:	0000369d 	.word	0x0000369d
    1670:	0000126f 	.word	0x0000126f
    1674:	000011a1 	.word	0x000011a1
    1678:	000012f9 	.word	0x000012f9
    167c:	00001321 	.word	0x00001321
    1680:	000011ed 	.word	0x000011ed
    1684:	0000118d 	.word	0x0000118d
    1688:	000011d1 	.word	0x000011d1

0000168c <grid_port_process_outbound_usb>:

volatile uint8_t temp[500];

volatile uint8_t usb_debug[10];

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1690:	b09b      	sub	sp, #108	; 0x6c
    1692:	af06      	add	r7, sp, #24
    1694:	6438      	str	r0, [r7, #64]	; 0x40
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1696:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    169a:	4630      	mov	r0, r6
    169c:	4b89      	ldr	r3, [pc, #548]	; (18c4 <grid_port_process_outbound_usb+0x238>)
    169e:	4798      	blx	r3
	
	if (!length){		
    16a0:	b918      	cbnz	r0, 16aa <grid_port_process_outbound_usb+0x1e>
				
		
	}
	
	
}
    16a2:	3754      	adds	r7, #84	; 0x54
    16a4:	46bd      	mov	sp, r7
    16a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16aa:	4604      	mov	r4, r0
		grid_buffer_read_init(&por->tx_buffer);
    16ac:	4630      	mov	r0, r6
    16ae:	4b86      	ldr	r3, [pc, #536]	; (18c8 <grid_port_process_outbound_usb+0x23c>)
    16b0:	4798      	blx	r3
    16b2:	2500      	movs	r5, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    16b4:	f8df 924c 	ldr.w	r9, [pc, #588]	; 1904 <grid_port_process_outbound_usb+0x278>
    16b8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 18d0 <grid_port_process_outbound_usb+0x244>
    16bc:	4630      	mov	r0, r6
    16be:	47c8      	blx	r9
    16c0:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    16c4:	3501      	adds	r5, #1
    16c6:	b2ed      	uxtb	r5, r5
    16c8:	b2ab      	uxth	r3, r5
    16ca:	429c      	cmp	r4, r3
    16cc:	d8f6      	bhi.n	16bc <grid_port_process_outbound_usb+0x30>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    16ce:	4630      	mov	r0, r6
    16d0:	4b7e      	ldr	r3, [pc, #504]	; (18cc <grid_port_process_outbound_usb+0x240>)
    16d2:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);		
    16d4:	4d7e      	ldr	r5, [pc, #504]	; (18d0 <grid_port_process_outbound_usb+0x244>)
    16d6:	4628      	mov	r0, r5
    16d8:	4b7e      	ldr	r3, [pc, #504]	; (18d4 <grid_port_process_outbound_usb+0x248>)
    16da:	4798      	blx	r3
    16dc:	63b8      	str	r0, [r7, #56]	; 0x38
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    16de:	4628      	mov	r0, r5
    16e0:	4b7d      	ldr	r3, [pc, #500]	; (18d8 <grid_port_process_outbound_usb+0x24c>)
    16e2:	4798      	blx	r3
    16e4:	387f      	subs	r0, #127	; 0x7f
    16e6:	b243      	sxtb	r3, r0
    16e8:	627b      	str	r3, [r7, #36]	; 0x24
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    16ea:	4628      	mov	r0, r5
    16ec:	4b7b      	ldr	r3, [pc, #492]	; (18dc <grid_port_process_outbound_usb+0x250>)
    16ee:	4798      	blx	r3
    16f0:	387f      	subs	r0, #127	; 0x7f
    16f2:	b242      	sxtb	r2, r0
    16f4:	617a      	str	r2, [r7, #20]
		uint8_t age = grid_msg_get_age(temp);
    16f6:	4628      	mov	r0, r5
    16f8:	4b79      	ldr	r3, [pc, #484]	; (18e0 <grid_port_process_outbound_usb+0x254>)
    16fa:	4798      	blx	r3
    16fc:	6378      	str	r0, [r7, #52]	; 0x34
		uint8_t error_flag = 0;
    16fe:	2600      	movs	r6, #0
    1700:	f887 604f 	strb.w	r6, [r7, #79]	; 0x4f
					midi_channel = (256-dy)%16;
    1704:	697a      	ldr	r2, [r7, #20]
    1706:	633a      	str	r2, [r7, #48]	; 0x30
    1708:	f5c2 7380 	rsb	r3, r2, #256	; 0x100
    170c:	1af2      	subs	r2, r6, r3
    170e:	f003 030f 	and.w	r3, r3, #15
    1712:	f002 020f 	and.w	r2, r2, #15
    1716:	bf58      	it	pl
    1718:	4253      	negpl	r3, r2
    171a:	b2da      	uxtb	r2, r3
    171c:	61fa      	str	r2, [r7, #28]
					midi_param1  = (64+midi_param1 + 16*dx)%128;
    171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1720:	62fb      	str	r3, [r7, #44]	; 0x2c
    1722:	011b      	lsls	r3, r3, #4
    1724:	61bb      	str	r3, [r7, #24]
    1726:	623a      	str	r2, [r7, #32]
    1728:	1e63      	subs	r3, r4, #1
    172a:	b29b      	uxth	r3, r3
    172c:	f103 0a01 	add.w	sl, r3, #1
    1730:	46b3      	mov	fp, r6
    1732:	647e      	str	r6, [r7, #68]	; 0x44
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1734:	46a9      	mov	r9, r5
    1736:	e006      	b.n	1746 <grid_port_process_outbound_usb+0xba>
				current_start = i;
    1738:	fa5f f68b 	uxtb.w	r6, fp
    173c:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    1740:	45d3      	cmp	fp, sl
    1742:	f000 816f 	beq.w	1a24 <grid_port_process_outbound_usb+0x398>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1746:	f819 300b 	ldrb.w	r3, [r9, fp]
    174a:	b2db      	uxtb	r3, r3
    174c:	2b02      	cmp	r3, #2
    174e:	d0f3      	beq.n	1738 <grid_port_process_outbound_usb+0xac>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1750:	f819 300b 	ldrb.w	r3, [r9, fp]
    1754:	b2db      	uxtb	r3, r3
    1756:	2b03      	cmp	r3, #3
    1758:	d1f0      	bne.n	173c <grid_port_process_outbound_usb+0xb0>
    175a:	2e00      	cmp	r6, #0
    175c:	d0ee      	beq.n	173c <grid_port_process_outbound_usb+0xb0>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    175e:	4634      	mov	r4, r6
    1760:	1c70      	adds	r0, r6, #1
    1762:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1766:	2102      	movs	r1, #2
    1768:	4448      	add	r0, r9
    176a:	4b5e      	ldr	r3, [pc, #376]	; (18e4 <grid_port_process_outbound_usb+0x258>)
    176c:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    176e:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    1772:	d01b      	beq.n	17ac <grid_port_process_outbound_usb+0x120>
				else if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    1774:	2d03      	cmp	r5, #3
    1776:	d06f      	beq.n	1858 <grid_port_process_outbound_usb+0x1cc>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1778:	2d01      	cmp	r5, #1
    177a:	f000 80c5 	beq.w	1908 <grid_port_process_outbound_usb+0x27c>
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    177e:	2d02      	cmp	r5, #2
    1780:	f000 814e 	beq.w	1a20 <grid_port_process_outbound_usb+0x394>
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    1784:	6c7d      	ldr	r5, [r7, #68]	; 0x44
    1786:	f105 0428 	add.w	r4, r5, #40	; 0x28
    178a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    178c:	441c      	add	r4, r3
    178e:	b2c2      	uxtb	r2, r0
    1790:	4955      	ldr	r1, [pc, #340]	; (18e8 <grid_port_process_outbound_usb+0x25c>)
    1792:	4620      	mov	r0, r4
    1794:	4b55      	ldr	r3, [pc, #340]	; (18ec <grid_port_process_outbound_usb+0x260>)
    1796:	4798      	blx	r3
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1798:	4620      	mov	r0, r4
    179a:	4b55      	ldr	r3, [pc, #340]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    179c:	4798      	blx	r3
    179e:	eb05 0800 	add.w	r8, r5, r0
    17a2:	fa5f f388 	uxtb.w	r3, r8
    17a6:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    17a8:	2600      	movs	r6, #0
    17aa:	e7c7      	b.n	173c <grid_port_process_outbound_usb+0xb0>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    17ac:	1cf0      	adds	r0, r6, #3
    17ae:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17b2:	2102      	movs	r1, #2
    17b4:	4448      	add	r0, r9
    17b6:	4b4b      	ldr	r3, [pc, #300]	; (18e4 <grid_port_process_outbound_usb+0x258>)
    17b8:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    17ba:	1d70      	adds	r0, r6, #5
    17bc:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17c0:	2102      	movs	r1, #2
    17c2:	4448      	add	r0, r9
    17c4:	4b47      	ldr	r3, [pc, #284]	; (18e4 <grid_port_process_outbound_usb+0x258>)
    17c6:	4798      	blx	r3
    17c8:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    17cc:	1df0      	adds	r0, r6, #7
    17ce:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17d2:	2102      	movs	r1, #2
    17d4:	4448      	add	r0, r9
    17d6:	4b43      	ldr	r3, [pc, #268]	; (18e4 <grid_port_process_outbound_usb+0x258>)
    17d8:	4798      	blx	r3
    17da:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    17dc:	f106 0009 	add.w	r0, r6, #9
    17e0:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17e4:	2102      	movs	r1, #2
    17e6:	4448      	add	r0, r9
    17e8:	4b3e      	ldr	r3, [pc, #248]	; (18e4 <grid_port_process_outbound_usb+0x258>)
    17ea:	4798      	blx	r3
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    17ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    17ee:	3328      	adds	r3, #40	; 0x28
    17f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    17f2:	441a      	add	r2, r3
    17f4:	4616      	mov	r6, r2
					midi_param1  = (64+midi_param1 + 16*dx)%128;
    17f6:	b2e4      	uxtb	r4, r4
    17f8:	3440      	adds	r4, #64	; 0x40
    17fa:	69b9      	ldr	r1, [r7, #24]
    17fc:	440c      	add	r4, r1
    17fe:	4263      	negs	r3, r4
    1800:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    1804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1808:	bf58      	it	pl
    180a:	425c      	negpl	r4, r3
    180c:	b2e4      	uxtb	r4, r4
    180e:	b2c3      	uxtb	r3, r0
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1810:	63fb      	str	r3, [r7, #60]	; 0x3c
    1812:	9305      	str	r3, [sp, #20]
    1814:	9404      	str	r4, [sp, #16]
    1816:	f8cd 800c 	str.w	r8, [sp, #12]
    181a:	6a39      	ldr	r1, [r7, #32]
    181c:	9102      	str	r1, [sp, #8]
    181e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    1820:	9101      	str	r1, [sp, #4]
    1822:	6b39      	ldr	r1, [r7, #48]	; 0x30
    1824:	9100      	str	r1, [sp, #0]
    1826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1828:	6bba      	ldr	r2, [r7, #56]	; 0x38
    182a:	4932      	ldr	r1, [pc, #200]	; (18f4 <grid_port_process_outbound_usb+0x268>)
    182c:	62be      	str	r6, [r7, #40]	; 0x28
    182e:	4630      	mov	r0, r6
    1830:	4e2e      	ldr	r6, [pc, #184]	; (18ec <grid_port_process_outbound_usb+0x260>)
    1832:	47b0      	blx	r6
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1836:	4b2e      	ldr	r3, [pc, #184]	; (18f0 <grid_port_process_outbound_usb+0x264>)
    1838:	4798      	blx	r3
    183a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    183c:	4418      	add	r0, r3
    183e:	b2c3      	uxtb	r3, r0
    1840:	647b      	str	r3, [r7, #68]	; 0x44
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1844:	4622      	mov	r2, r4
    1846:	69f9      	ldr	r1, [r7, #28]
    1848:	ea48 0101 	orr.w	r1, r8, r1
    184c:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1850:	4c29      	ldr	r4, [pc, #164]	; (18f8 <grid_port_process_outbound_usb+0x26c>)
    1852:	47a0      	blx	r4
				current_start = 0;
    1854:	462e      	mov	r6, r5
    1856:	e771      	b.n	173c <grid_port_process_outbound_usb+0xb0>
					if (dx == 0 && dy == 0){
    1858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    185a:	2b00      	cmp	r3, #0
    185c:	f040 80de 	bne.w	1a1c <grid_port_process_outbound_usb+0x390>
    1860:	697b      	ldr	r3, [r7, #20]
    1862:	b10b      	cbz	r3, 1868 <grid_port_process_outbound_usb+0x1dc>
				current_start = 0;
    1864:	2600      	movs	r6, #0
    1866:	e769      	b.n	173c <grid_port_process_outbound_usb+0xb0>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1868:	1cf0      	adds	r0, r6, #3
    186a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    186e:	2102      	movs	r1, #2
    1870:	4448      	add	r0, r9
    1872:	4b1c      	ldr	r3, [pc, #112]	; (18e4 <grid_port_process_outbound_usb+0x258>)
    1874:	4798      	blx	r3
    1876:	4606      	mov	r6, r0
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1878:	1d60      	adds	r0, r4, #5
    187a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    187e:	2102      	movs	r1, #2
    1880:	4448      	add	r0, r9
    1882:	4b18      	ldr	r3, [pc, #96]	; (18e4 <grid_port_process_outbound_usb+0x258>)
    1884:	4798      	blx	r3
    1886:	4605      	mov	r5, r0
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1888:	1de0      	adds	r0, r4, #7
    188a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    188e:	2102      	movs	r1, #2
    1890:	4448      	add	r0, r9
    1892:	4b14      	ldr	r3, [pc, #80]	; (18e4 <grid_port_process_outbound_usb+0x258>)
    1894:	4798      	blx	r3
    1896:	4680      	mov	r8, r0
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1898:	f104 0009 	add.w	r0, r4, #9
    189c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    18a0:	2102      	movs	r1, #2
    18a2:	4448      	add	r0, r9
    18a4:	4b0f      	ldr	r3, [pc, #60]	; (18e4 <grid_port_process_outbound_usb+0x258>)
    18a6:	4798      	blx	r3
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    18a8:	b2ed      	uxtb	r5, r5
    18aa:	2d63      	cmp	r5, #99	; 0x63
    18ac:	d001      	beq.n	18b2 <grid_port_process_outbound_usb+0x226>
				current_start = 0;
    18ae:	2600      	movs	r6, #0
    18b0:	e744      	b.n	173c <grid_port_process_outbound_usb+0xb0>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    18b2:	b2c3      	uxtb	r3, r0
    18b4:	b2f2      	uxtb	r2, r6
    18b6:	fa5f f188 	uxtb.w	r1, r8
    18ba:	4810      	ldr	r0, [pc, #64]	; (18fc <grid_port_process_outbound_usb+0x270>)
    18bc:	4c10      	ldr	r4, [pc, #64]	; (1900 <grid_port_process_outbound_usb+0x274>)
    18be:	47a0      	blx	r4
				current_start = 0;
    18c0:	2600      	movs	r6, #0
    18c2:	e73b      	b.n	173c <grid_port_process_outbound_usb+0xb0>
    18c4:	000011fd 	.word	0x000011fd
    18c8:	0000126f 	.word	0x0000126f
    18cc:	00001321 	.word	0x00001321
    18d0:	20003754 	.word	0x20003754
    18d4:	00003889 	.word	0x00003889
    18d8:	000038a9 	.word	0x000038a9
    18dc:	000038c9 	.word	0x000038c9
    18e0:	000038e9 	.word	0x000038e9
    18e4:	000036f1 	.word	0x000036f1
    18e8:	0000bce0 	.word	0x0000bce0
    18ec:	0000b4d5 	.word	0x0000b4d5
    18f0:	0000b51d 	.word	0x0000b51d
    18f4:	0000bc50 	.word	0x0000bc50
    18f8:	0000a109 	.word	0x0000a109
    18fc:	20003724 	.word	0x20003724
    1900:	00001ca1 	.word	0x00001ca1
    1904:	000012f9 	.word	0x000012f9
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1908:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    190c:	fa5f f38b 	uxtb.w	r3, fp
    1910:	1b9b      	subs	r3, r3, r6
    1912:	3b03      	subs	r3, #3
    1914:	4a46      	ldr	r2, [pc, #280]	; (1a30 <grid_port_process_outbound_usb+0x3a4>)
    1916:	fb82 1203 	smull	r1, r2, r2, r3
    191a:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
    191e:	b2db      	uxtb	r3, r3
    1920:	4619      	mov	r1, r3
    1922:	60fb      	str	r3, [r7, #12]
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1924:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1928:	3307      	adds	r3, #7
    192a:	f023 0307 	bic.w	r3, r3, #7
    192e:	ebad 0d03 	sub.w	sp, sp, r3
    1932:	ab06      	add	r3, sp, #24
    1934:	461a      	mov	r2, r3
    1936:	60bb      	str	r3, [r7, #8]
					for(uint8_t j=0; j<key_array_length; j++){
    1938:	2900      	cmp	r1, #0
    193a:	d064      	beq.n	1a06 <grid_port_process_outbound_usb+0x37a>
    193c:	3403      	adds	r4, #3
    193e:	eb04 0809 	add.w	r8, r4, r9
    1942:	1e4b      	subs	r3, r1, #1
    1944:	b2db      	uxtb	r3, r3
    1946:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    194a:	3609      	adds	r6, #9
    194c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    1950:	444b      	add	r3, r9
    1952:	62bb      	str	r3, [r7, #40]	; 0x28
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1954:	63fa      	str	r2, [r7, #60]	; 0x3c
    1956:	f8c7 b004 	str.w	fp, [r7, #4]
    195a:	f8d7 b044 	ldr.w	fp, [r7, #68]	; 0x44
    195e:	f8c7 a000 	str.w	sl, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1962:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1966:	2102      	movs	r1, #2
    1968:	4640      	mov	r0, r8
    196a:	4b32      	ldr	r3, [pc, #200]	; (1a34 <grid_port_process_outbound_usb+0x3a8>)
    196c:	4798      	blx	r3
    196e:	4604      	mov	r4, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1970:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1974:	2102      	movs	r1, #2
    1976:	eb08 0001 	add.w	r0, r8, r1
    197a:	4b2e      	ldr	r3, [pc, #184]	; (1a34 <grid_port_process_outbound_usb+0x3a8>)
    197c:	4798      	blx	r3
    197e:	4605      	mov	r5, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1980:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1984:	2102      	movs	r1, #2
    1986:	f108 0004 	add.w	r0, r8, #4
    198a:	4b2a      	ldr	r3, [pc, #168]	; (1a34 <grid_port_process_outbound_usb+0x3a8>)
    198c:	4798      	blx	r3
    198e:	4606      	mov	r6, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1990:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
    1994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1996:	449a      	add	sl, r3
    1998:	4b27      	ldr	r3, [pc, #156]	; (1a38 <grid_port_process_outbound_usb+0x3ac>)
    199a:	4798      	blx	r3
    199c:	9005      	str	r0, [sp, #20]
    199e:	b2e4      	uxtb	r4, r4
    19a0:	9404      	str	r4, [sp, #16]
    19a2:	b2ed      	uxtb	r5, r5
    19a4:	9503      	str	r5, [sp, #12]
    19a6:	647e      	str	r6, [r7, #68]	; 0x44
    19a8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    19ac:	9302      	str	r3, [sp, #8]
    19ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    19b0:	9301      	str	r3, [sp, #4]
    19b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    19b4:	9300      	str	r3, [sp, #0]
    19b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    19ba:	4920      	ldr	r1, [pc, #128]	; (1a3c <grid_port_process_outbound_usb+0x3b0>)
    19bc:	4650      	mov	r0, sl
    19be:	4e20      	ldr	r6, [pc, #128]	; (1a40 <grid_port_process_outbound_usb+0x3b4>)
    19c0:	47b0      	blx	r6
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    19c2:	4650      	mov	r0, sl
    19c4:	4b1f      	ldr	r3, [pc, #124]	; (1a44 <grid_port_process_outbound_usb+0x3b8>)
    19c6:	4798      	blx	r3
    19c8:	4483      	add	fp, r0
    19ca:	fa5f fb8b 	uxtb.w	fp, fp
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    19ce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    19d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    19d4:	700b      	strb	r3, [r1, #0]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    19d6:	2d82      	cmp	r5, #130	; 0x82
    19d8:	bf14      	ite	ne
    19da:	2500      	movne	r5, #0
    19dc:	2501      	moveq	r5, #1
						key_array[j] = current_key;
    19de:	460b      	mov	r3, r1
    19e0:	704d      	strb	r5, [r1, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    19e2:	2c80      	cmp	r4, #128	; 0x80
    19e4:	bf14      	ite	ne
    19e6:	2400      	movne	r4, #0
    19e8:	2401      	moveq	r4, #1
    19ea:	708c      	strb	r4, [r1, #2]
    19ec:	f108 0806 	add.w	r8, r8, #6
    19f0:	3303      	adds	r3, #3
    19f2:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(uint8_t j=0; j<key_array_length; j++){
    19f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19f6:	4598      	cmp	r8, r3
    19f8:	d1b3      	bne.n	1962 <grid_port_process_outbound_usb+0x2d6>
    19fa:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
    19fe:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1a02:	f8d7 a000 	ldr.w	sl, [r7]
					usb_debug[1] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    1a06:	68f9      	ldr	r1, [r7, #12]
    1a08:	68b8      	ldr	r0, [r7, #8]
    1a0a:	4b0f      	ldr	r3, [pc, #60]	; (1a48 <grid_port_process_outbound_usb+0x3bc>)
    1a0c:	4798      	blx	r3
    1a0e:	b2c0      	uxtb	r0, r0
    1a10:	4b0e      	ldr	r3, [pc, #56]	; (1a4c <grid_port_process_outbound_usb+0x3c0>)
    1a12:	7058      	strb	r0, [r3, #1]
    1a14:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    1a18:	2600      	movs	r6, #0
    1a1a:	e68f      	b.n	173c <grid_port_process_outbound_usb+0xb0>
    1a1c:	2600      	movs	r6, #0
    1a1e:	e68d      	b.n	173c <grid_port_process_outbound_usb+0xb0>
    1a20:	2600      	movs	r6, #0
    1a22:	e68b      	b.n	173c <grid_port_process_outbound_usb+0xb0>
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1a24:	6c79      	ldr	r1, [r7, #68]	; 0x44
    1a26:	6c38      	ldr	r0, [r7, #64]	; 0x40
    1a28:	3028      	adds	r0, #40	; 0x28
    1a2a:	4b09      	ldr	r3, [pc, #36]	; (1a50 <grid_port_process_outbound_usb+0x3c4>)
    1a2c:	4798      	blx	r3
}
    1a2e:	e638      	b.n	16a2 <grid_port_process_outbound_usb+0x16>
    1a30:	2aaaaaab 	.word	0x2aaaaaab
    1a34:	000036f1 	.word	0x000036f1
    1a38:	00003769 	.word	0x00003769
    1a3c:	0000bc98 	.word	0x0000bc98
    1a40:	0000b4d5 	.word	0x0000b4d5
    1a44:	0000b51d 	.word	0x0000b51d
    1a48:	00009b85 	.word	0x00009b85
    1a4c:	20003948 	.word	0x20003948
    1a50:	00009945 	.word	0x00009945

00001a54 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1a56:	f500 659b 	add.w	r5, r0, #1240	; 0x4d8
    1a5a:	4628      	mov	r0, r5
    1a5c:	4b0a      	ldr	r3, [pc, #40]	; (1a88 <grid_port_process_outbound_ui+0x34>)
    1a5e:	4798      	blx	r3
	
	if (!packet_size){
    1a60:	b900      	cbnz	r0, 1a64 <grid_port_process_outbound_ui+0x10>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    1a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a64:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    1a66:	4628      	mov	r0, r5
    1a68:	4b08      	ldr	r3, [pc, #32]	; (1a8c <grid_port_process_outbound_ui+0x38>)
    1a6a:	4798      	blx	r3
    1a6c:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1a6e:	4f08      	ldr	r7, [pc, #32]	; (1a90 <grid_port_process_outbound_ui+0x3c>)
    1a70:	4628      	mov	r0, r5
    1a72:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    1a74:	3401      	adds	r4, #1
    1a76:	b2e4      	uxtb	r4, r4
    1a78:	b2a3      	uxth	r3, r4
    1a7a:	429e      	cmp	r6, r3
    1a7c:	d8f8      	bhi.n	1a70 <grid_port_process_outbound_ui+0x1c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1a7e:	4628      	mov	r0, r5
    1a80:	4b04      	ldr	r3, [pc, #16]	; (1a94 <grid_port_process_outbound_ui+0x40>)
    1a82:	4798      	blx	r3
}
    1a84:	e7ed      	b.n	1a62 <grid_port_process_outbound_ui+0xe>
    1a86:	bf00      	nop
    1a88:	000011fd 	.word	0x000011fd
    1a8c:	0000126f 	.word	0x0000126f
    1a90:	000012f9 	.word	0x000012f9
    1a94:	00001321 	.word	0x00001321

00001a98 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1a98:	8983      	ldrh	r3, [r0, #12]
    1a9a:	b103      	cbz	r3, 1a9e <grid_port_process_outbound_usart+0x6>
    1a9c:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1aa2:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1aa4:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    1aa8:	4630      	mov	r0, r6
    1aaa:	4b11      	ldr	r3, [pc, #68]	; (1af0 <grid_port_process_outbound_usart+0x58>)
    1aac:	4798      	blx	r3
    1aae:	4604      	mov	r4, r0
    1ab0:	4607      	mov	r7, r0
		
		if (!packet_size){
    1ab2:	b910      	cbnz	r0, 1aba <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    1ab4:	2000      	movs	r0, #0
    1ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    1aba:	4630      	mov	r0, r6
    1abc:	4b0d      	ldr	r3, [pc, #52]	; (1af4 <grid_port_process_outbound_usart+0x5c>)
    1abe:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    1ac0:	81ac      	strh	r4, [r5, #12]
    1ac2:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1ac4:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1b00 <grid_port_process_outbound_usart+0x68>
    1ac8:	4630      	mov	r0, r6
    1aca:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1acc:	192b      	adds	r3, r5, r4
    1ace:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
			for (uint8_t i = 0; i<packet_size; i++){
    1ad2:	3401      	adds	r4, #1
    1ad4:	b2e4      	uxtb	r4, r4
    1ad6:	42a7      	cmp	r7, r4
    1ad8:	d8f6      	bhi.n	1ac8 <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1ada:	4630      	mov	r0, r6
    1adc:	4b06      	ldr	r3, [pc, #24]	; (1af8 <grid_port_process_outbound_usart+0x60>)
    1ade:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1ae0:	89aa      	ldrh	r2, [r5, #12]
    1ae2:	f105 0128 	add.w	r1, r5, #40	; 0x28
    1ae6:	6868      	ldr	r0, [r5, #4]
    1ae8:	4b04      	ldr	r3, [pc, #16]	; (1afc <grid_port_process_outbound_usart+0x64>)
    1aea:	4798      	blx	r3
			
		}
		
	}
	
}
    1aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1af0:	000011fd 	.word	0x000011fd
    1af4:	0000126f 	.word	0x0000126f
    1af8:	00001321 	.word	0x00001321
    1afc:	00004281 	.word	0x00004281
    1b00:	000012f9 	.word	0x000012f9

00001b04 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1b04:	2201      	movs	r2, #1
    1b06:	4b01      	ldr	r3, [pc, #4]	; (1b0c <grid_led_hardware_transfer_complete_cb+0x8>)
    1b08:	701a      	strb	r2, [r3, #0]
    1b0a:	4770      	bx	lr
    1b0c:	20001234 	.word	0x20001234

00001b10 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    1b10:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1b12:	7844      	ldrb	r4, [r0, #1]
    1b14:	428c      	cmp	r4, r1
    1b16:	d802      	bhi.n	1b1e <grid_led_set_color+0xe>
		return -1;		
    1b18:	20ff      	movs	r0, #255	; 0xff
}
    1b1a:	bc30      	pop	{r4, r5}
    1b1c:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1b1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1b22:	0089      	lsls	r1, r1, #2
    1b24:	4c09      	ldr	r4, [pc, #36]	; (1b4c <grid_led_set_color+0x3c>)
    1b26:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1b2a:	68c3      	ldr	r3, [r0, #12]
    1b2c:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1b2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1b32:	68c3      	ldr	r3, [r0, #12]
    1b34:	440b      	add	r3, r1
    1b36:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1b38:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1b3c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1b40:	68c3      	ldr	r3, [r0, #12]
    1b42:	4419      	add	r1, r3
    1b44:	608a      	str	r2, [r1, #8]
		return 0;
    1b46:	2000      	movs	r0, #0
    1b48:	e7e7      	b.n	1b1a <grid_led_set_color+0xa>
    1b4a:	bf00      	nop
    1b4c:	20001eb8 	.word	0x20001eb8

00001b50 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1b50:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1b52:	4c06      	ldr	r4, [pc, #24]	; (1b6c <grid_led_hardware_init+0x1c>)
    1b54:	f100 0114 	add.w	r1, r0, #20
    1b58:	4620      	mov	r0, r4
    1b5a:	4b05      	ldr	r3, [pc, #20]	; (1b70 <grid_led_hardware_init+0x20>)
    1b5c:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1b5e:	4a05      	ldr	r2, [pc, #20]	; (1b74 <grid_led_hardware_init+0x24>)
    1b60:	2100      	movs	r1, #0
    1b62:	4620      	mov	r0, r4
    1b64:	4b04      	ldr	r3, [pc, #16]	; (1b78 <grid_led_hardware_init+0x28>)
    1b66:	4798      	blx	r3
    1b68:	bd10      	pop	{r4, pc}
    1b6a:	bf00      	nop
    1b6c:	200010c4 	.word	0x200010c4
    1b70:	00004779 	.word	0x00004779
    1b74:	00001b05 	.word	0x00001b05
    1b78:	00004749 	.word	0x00004749

00001b7c <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1b7c:	7840      	ldrb	r0, [r0, #1]
    1b7e:	4770      	bx	lr

00001b80 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1b80:	7843      	ldrb	r3, [r0, #1]
    1b82:	b1f3      	cbz	r3, 1bc2 <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    1b84:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    1b86:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    1b88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1b8c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1b90:	6902      	ldr	r2, [r0, #16]
    1b92:	440a      	add	r2, r1
    1b94:	7ad1      	ldrb	r1, [r2, #11]
    1b96:	7b14      	ldrb	r4, [r2, #12]
    1b98:	4421      	add	r1, r4
    1b9a:	72d1      	strb	r1, [r2, #11]
    1b9c:	7842      	ldrb	r2, [r0, #1]
    1b9e:	441a      	add	r2, r3
    1ba0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1ba4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1ba8:	6901      	ldr	r1, [r0, #16]
    1baa:	440a      	add	r2, r1
    1bac:	7ad1      	ldrb	r1, [r2, #11]
    1bae:	7b14      	ldrb	r4, [r2, #12]
    1bb0:	4421      	add	r1, r4
    1bb2:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1bb4:	3301      	adds	r3, #1
    1bb6:	b2db      	uxtb	r3, r3
    1bb8:	7842      	ldrb	r2, [r0, #1]
    1bba:	429a      	cmp	r2, r3
    1bbc:	d8e4      	bhi.n	1b88 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    1bc2:	4770      	bx	lr

00001bc4 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1bc4:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    1bc6:	7844      	ldrb	r4, [r0, #1]
    1bc8:	fb02 1404 	mla	r4, r2, r4, r1
    1bcc:	6905      	ldr	r5, [r0, #16]
    1bce:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1bd2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1bd6:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    1bd8:	7843      	ldrb	r3, [r0, #1]
    1bda:	fb02 1303 	mla	r3, r2, r3, r1
    1bde:	6904      	ldr	r4, [r0, #16]
    1be0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1be4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1be8:	4423      	add	r3, r4
    1bea:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1bee:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    1bf0:	7843      	ldrb	r3, [r0, #1]
    1bf2:	fb02 1203 	mla	r2, r2, r3, r1
    1bf6:	6903      	ldr	r3, [r0, #16]
    1bf8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1bfc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1c00:	441a      	add	r2, r3
    1c02:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1c06:	7093      	strb	r3, [r2, #2]
}
    1c08:	bc70      	pop	{r4, r5, r6}
    1c0a:	4770      	bx	lr

00001c0c <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1c0c:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    1c0e:	7844      	ldrb	r4, [r0, #1]
    1c10:	fb02 1404 	mla	r4, r2, r4, r1
    1c14:	6905      	ldr	r5, [r0, #16]
    1c16:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1c1a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1c1e:	442c      	add	r4, r5
    1c20:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    1c22:	7843      	ldrb	r3, [r0, #1]
    1c24:	fb02 1303 	mla	r3, r2, r3, r1
    1c28:	6904      	ldr	r4, [r0, #16]
    1c2a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1c2e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1c32:	4423      	add	r3, r4
    1c34:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1c38:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    1c3a:	7843      	ldrb	r3, [r0, #1]
    1c3c:	fb02 1203 	mla	r2, r2, r3, r1
    1c40:	6903      	ldr	r3, [r0, #16]
    1c42:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1c46:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1c4a:	441a      	add	r2, r3
    1c4c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1c50:	7153      	strb	r3, [r2, #5]
}
    1c52:	bc70      	pop	{r4, r5, r6}
    1c54:	4770      	bx	lr

00001c56 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1c56:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    1c58:	7844      	ldrb	r4, [r0, #1]
    1c5a:	fb02 1404 	mla	r4, r2, r4, r1
    1c5e:	6905      	ldr	r5, [r0, #16]
    1c60:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1c64:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1c68:	442c      	add	r4, r5
    1c6a:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    1c6c:	7843      	ldrb	r3, [r0, #1]
    1c6e:	fb02 1303 	mla	r3, r2, r3, r1
    1c72:	6904      	ldr	r4, [r0, #16]
    1c74:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1c78:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1c7c:	4423      	add	r3, r4
    1c7e:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1c82:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    1c84:	7843      	ldrb	r3, [r0, #1]
    1c86:	fb02 1203 	mla	r2, r2, r3, r1
    1c8a:	6903      	ldr	r3, [r0, #16]
    1c8c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1c90:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1c94:	441a      	add	r2, r3
    1c96:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1c9a:	7213      	strb	r3, [r2, #8]
}
    1c9c:	bc70      	pop	{r4, r5, r6}
    1c9e:	4770      	bx	lr

00001ca0 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1ca0:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    1ca2:	7844      	ldrb	r4, [r0, #1]
    1ca4:	fb02 1204 	mla	r2, r2, r4, r1
    1ca8:	6901      	ldr	r1, [r0, #16]
    1caa:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1cae:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1cb2:	440a      	add	r2, r1
    1cb4:	72d3      	strb	r3, [r2, #11]
}
    1cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
    1cba:	4770      	bx	lr

00001cbc <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1cbc:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    1cbe:	7844      	ldrb	r4, [r0, #1]
    1cc0:	fb02 1204 	mla	r2, r2, r4, r1
    1cc4:	6901      	ldr	r1, [r0, #16]
    1cc6:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1cca:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1cce:	440a      	add	r2, r1
    1cd0:	7313      	strb	r3, [r2, #12]
}
    1cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    1cd6:	4770      	bx	lr

00001cd8 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    1cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cdc:	b083      	sub	sp, #12
    1cde:	4604      	mov	r4, r0
	mod->led_number = length;
    1ce0:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    1ce2:	b2cd      	uxtb	r5, r1
    1ce4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1ce8:	0080      	lsls	r0, r0, #2
    1cea:	3090      	adds	r0, #144	; 0x90
    1cec:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    1cee:	4f3e      	ldr	r7, [pc, #248]	; (1de8 <grid_led_buffer_init+0x110>)
    1cf0:	47b8      	blx	r7
    1cf2:	4606      	mov	r6, r0
    1cf4:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    1cf6:	f100 0390 	add.w	r3, r0, #144	; 0x90
    1cfa:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1cfc:	201a      	movs	r0, #26
    1cfe:	fb00 f005 	mul.w	r0, r0, r5
    1d02:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    1d04:	2e00      	cmp	r6, #0
    1d06:	d06e      	beq.n	1de6 <grid_led_buffer_init+0x10e>
    1d08:	2800      	cmp	r0, #0
    1d0a:	d06c      	beq.n	1de6 <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1d0c:	6120      	str	r0, [r4, #16]
    1d0e:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    1d10:	4619      	mov	r1, r3
    1d12:	68a2      	ldr	r2, [r4, #8]
    1d14:	54d1      	strb	r1, [r2, r3]
    1d16:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    1d18:	2b90      	cmp	r3, #144	; 0x90
    1d1a:	d1fa      	bne.n	1d12 <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    1d1c:	7863      	ldrb	r3, [r4, #1]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d05e      	beq.n	1de0 <grid_led_buffer_init+0x108>
    1d22:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    1d24:	462e      	mov	r6, r5
    1d26:	4f31      	ldr	r7, [pc, #196]	; (1dec <grid_led_buffer_init+0x114>)
    1d28:	9600      	str	r6, [sp, #0]
    1d2a:	4633      	mov	r3, r6
    1d2c:	4632      	mov	r2, r6
    1d2e:	4629      	mov	r1, r5
    1d30:	4620      	mov	r0, r4
    1d32:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    1d34:	3501      	adds	r5, #1
    1d36:	7863      	ldrb	r3, [r4, #1]
    1d38:	42ab      	cmp	r3, r5
    1d3a:	d8f5      	bhi.n	1d28 <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d04f      	beq.n	1de0 <grid_led_buffer_init+0x108>
    1d40:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1d42:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1df4 <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1d46:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1df8 <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1d4a:	2500      	movs	r5, #0
    1d4c:	9501      	str	r5, [sp, #4]
    1d4e:	9500      	str	r5, [sp, #0]
    1d50:	462b      	mov	r3, r5
    1d52:	462a      	mov	r2, r5
    1d54:	4631      	mov	r1, r6
    1d56:	4620      	mov	r0, r4
    1d58:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1d5a:	9501      	str	r5, [sp, #4]
    1d5c:	237f      	movs	r3, #127	; 0x7f
    1d5e:	9300      	str	r3, [sp, #0]
    1d60:	462b      	mov	r3, r5
    1d62:	462a      	mov	r2, r5
    1d64:	4631      	mov	r1, r6
    1d66:	4620      	mov	r0, r4
    1d68:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    1d6a:	9501      	str	r5, [sp, #4]
    1d6c:	23ff      	movs	r3, #255	; 0xff
    1d6e:	9300      	str	r3, [sp, #0]
    1d70:	462b      	mov	r3, r5
    1d72:	462a      	mov	r2, r5
    1d74:	4631      	mov	r1, r6
    1d76:	4620      	mov	r0, r4
    1d78:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1dfc <grid_led_buffer_init+0x124>
    1d7c:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    1d7e:	462b      	mov	r3, r5
    1d80:	462a      	mov	r2, r5
    1d82:	4631      	mov	r1, r6
    1d84:	4620      	mov	r0, r4
    1d86:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1e00 <grid_led_buffer_init+0x128>
    1d8a:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    1d8c:	462b      	mov	r3, r5
    1d8e:	462a      	mov	r2, r5
    1d90:	4631      	mov	r1, r6
    1d92:	4620      	mov	r0, r4
    1d94:	4f16      	ldr	r7, [pc, #88]	; (1df0 <grid_led_buffer_init+0x118>)
    1d96:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    1d98:	9501      	str	r5, [sp, #4]
    1d9a:	9500      	str	r5, [sp, #0]
    1d9c:	462b      	mov	r3, r5
    1d9e:	2201      	movs	r2, #1
    1da0:	4631      	mov	r1, r6
    1da2:	4620      	mov	r0, r4
    1da4:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    1da6:	9501      	str	r5, [sp, #4]
    1da8:	9500      	str	r5, [sp, #0]
    1daa:	462b      	mov	r3, r5
    1dac:	2201      	movs	r2, #1
    1dae:	4631      	mov	r1, r6
    1db0:	4620      	mov	r0, r4
    1db2:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    1db4:	9501      	str	r5, [sp, #4]
    1db6:	9500      	str	r5, [sp, #0]
    1db8:	462b      	mov	r3, r5
    1dba:	2201      	movs	r2, #1
    1dbc:	4631      	mov	r1, r6
    1dbe:	4620      	mov	r0, r4
    1dc0:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    1dc2:	462b      	mov	r3, r5
    1dc4:	2201      	movs	r2, #1
    1dc6:	4631      	mov	r1, r6
    1dc8:	4620      	mov	r0, r4
    1dca:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    1dcc:	462b      	mov	r3, r5
    1dce:	2201      	movs	r2, #1
    1dd0:	4631      	mov	r1, r6
    1dd2:	4620      	mov	r0, r4
    1dd4:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    1dd6:	3601      	adds	r6, #1
    1dd8:	b2f6      	uxtb	r6, r6
    1dda:	7863      	ldrb	r3, [r4, #1]
    1ddc:	42b3      	cmp	r3, r6
    1dde:	d8b4      	bhi.n	1d4a <grid_led_buffer_init+0x72>
}
    1de0:	b003      	add	sp, #12
    1de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1de6:	e7fe      	b.n	1de6 <grid_led_buffer_init+0x10e>
    1de8:	0000b2b1 	.word	0x0000b2b1
    1dec:	00001b11 	.word	0x00001b11
    1df0:	00001ca1 	.word	0x00001ca1
    1df4:	00001bc5 	.word	0x00001bc5
    1df8:	00001c0d 	.word	0x00001c0d
    1dfc:	00001c57 	.word	0x00001c57
    1e00:	00001cbd 	.word	0x00001cbd

00001e04 <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    1e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e08:	b083      	sub	sp, #12
    1e0a:	f890 c001 	ldrb.w	ip, [r0, #1]
    1e0e:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    1e12:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    1e16:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    1e1a:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    1e1e:	6904      	ldr	r4, [r0, #16]
    1e20:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    1e22:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    1e24:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    1e28:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    1e2a:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    1e2c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1eb4 <grid_led_render+0xb0>
    1e30:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    1e32:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    1e36:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    1e38:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    1e3c:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    1e40:	f894 a000 	ldrb.w	sl, [r4]
    1e44:	f894 b003 	ldrb.w	fp, [r4, #3]
    1e48:	fb05 fb0b 	mul.w	fp, r5, fp
    1e4c:	fb09 bb0a 	mla	fp, r9, sl, fp
    1e50:	f894 a006 	ldrb.w	sl, [r4, #6]
    1e54:	fb06 ba0a 	mla	sl, r6, sl, fp
    1e58:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    1e5a:	f894 a001 	ldrb.w	sl, [r4, #1]
    1e5e:	f894 b004 	ldrb.w	fp, [r4, #4]
    1e62:	fb05 fb0b 	mul.w	fp, r5, fp
    1e66:	fb09 bb0a 	mla	fp, r9, sl, fp
    1e6a:	f894 a007 	ldrb.w	sl, [r4, #7]
    1e6e:	fb06 ba0a 	mla	sl, r6, sl, fp
    1e72:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    1e74:	f894 a002 	ldrb.w	sl, [r4, #2]
    1e78:	f894 b005 	ldrb.w	fp, [r4, #5]
    1e7c:	fb05 f50b 	mul.w	r5, r5, fp
    1e80:	fb09 590a 	mla	r9, r9, sl, r5
    1e84:	7a25      	ldrb	r5, [r4, #8]
    1e86:	fb06 9505 	mla	r5, r6, r5, r9
    1e8a:	44ae      	add	lr, r5
    1e8c:	3f01      	subs	r7, #1
    1e8e:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    1e90:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    1e94:	d1cc      	bne.n	1e30 <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    1e96:	f3ce 2447 	ubfx	r4, lr, #9, #8
    1e9a:	9400      	str	r4, [sp, #0]
    1e9c:	f3c3 2347 	ubfx	r3, r3, #9, #8
    1ea0:	f3c2 2247 	ubfx	r2, r2, #9, #8
    1ea4:	4c02      	ldr	r4, [pc, #8]	; (1eb0 <grid_led_render+0xac>)
    1ea6:	47a0      	blx	r4
	
}
    1ea8:	b003      	add	sp, #12
    1eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1eae:	bf00      	nop
    1eb0:	00001b11 	.word	0x00001b11
    1eb4:	20000000 	.word	0x20000000

00001eb8 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    1eb8:	7843      	ldrb	r3, [r0, #1]
    1eba:	b15b      	cbz	r3, 1ed4 <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    1ebc:	b570      	push	{r4, r5, r6, lr}
    1ebe:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    1ec0:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    1ec2:	4e05      	ldr	r6, [pc, #20]	; (1ed8 <grid_led_render_all+0x20>)
    1ec4:	4621      	mov	r1, r4
    1ec6:	4628      	mov	r0, r5
    1ec8:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    1eca:	3401      	adds	r4, #1
    1ecc:	786b      	ldrb	r3, [r5, #1]
    1ece:	42a3      	cmp	r3, r4
    1ed0:	d8f8      	bhi.n	1ec4 <grid_led_render_all+0xc>
    1ed2:	bd70      	pop	{r4, r5, r6, pc}
    1ed4:	4770      	bx	lr
    1ed6:	bf00      	nop
    1ed8:	00001e05 	.word	0x00001e05

00001edc <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    1edc:	b510      	push	{r4, lr}
    1ede:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    1ee0:	2200      	movs	r2, #0
    1ee2:	4b08      	ldr	r3, [pc, #32]	; (1f04 <grid_led_hardware_start_transfer_blocking+0x28>)
    1ee4:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    1ee6:	4808      	ldr	r0, [pc, #32]	; (1f08 <grid_led_hardware_start_transfer_blocking+0x2c>)
    1ee8:	4b08      	ldr	r3, [pc, #32]	; (1f0c <grid_led_hardware_start_transfer_blocking+0x30>)
    1eea:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    1eec:	88a2      	ldrh	r2, [r4, #4]
    1eee:	68a1      	ldr	r1, [r4, #8]
    1ef0:	6960      	ldr	r0, [r4, #20]
    1ef2:	4b07      	ldr	r3, [pc, #28]	; (1f10 <grid_led_hardware_start_transfer_blocking+0x34>)
    1ef4:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    1ef6:	4a03      	ldr	r2, [pc, #12]	; (1f04 <grid_led_hardware_start_transfer_blocking+0x28>)
    1ef8:	7813      	ldrb	r3, [r2, #0]
    1efa:	b2db      	uxtb	r3, r3
    1efc:	2b01      	cmp	r3, #1
    1efe:	d1fb      	bne.n	1ef8 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    1f00:	bd10      	pop	{r4, pc}
    1f02:	bf00      	nop
    1f04:	20001234 	.word	0x20001234
    1f08:	200010c4 	.word	0x200010c4
    1f0c:	00004721 	.word	0x00004721
    1f10:	00004281 	.word	0x00004281

00001f14 <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    1f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f18:	b085      	sub	sp, #20
    1f1a:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    1f1c:	4b20      	ldr	r3, [pc, #128]	; (1fa0 <grid_led_startup_animation+0x8c>)
    1f1e:	781b      	ldrb	r3, [r3, #0]
    1f20:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    1f22:	2b20      	cmp	r3, #32
    1f24:	d00a      	beq.n	1f3c <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    1f26:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    1f2a:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    1f2e:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    1f32:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    1f36:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1fac <grid_led_startup_animation+0x98>
    1f3a:	e01e      	b.n	1f7a <grid_led_startup_animation+0x66>
		s= 2;
    1f3c:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    1f40:	2300      	movs	r3, #0
    1f42:	9303      	str	r3, [sp, #12]
    1f44:	e7f3      	b.n	1f2e <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    1f46:	9500      	str	r5, [sp, #0]
    1f48:	462b      	mov	r3, r5
    1f4a:	463a      	mov	r2, r7
    1f4c:	4621      	mov	r1, r4
    1f4e:	4630      	mov	r0, r6
    1f50:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    1f52:	3401      	adds	r4, #1
    1f54:	b2e4      	uxtb	r4, r4
    1f56:	7873      	ldrb	r3, [r6, #1]
    1f58:	42a3      	cmp	r3, r4
    1f5a:	d8f4      	bhi.n	1f46 <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    1f5c:	4630      	mov	r0, r6
    1f5e:	4b11      	ldr	r3, [pc, #68]	; (1fa4 <grid_led_startup_animation+0x90>)
    1f60:	4798      	blx	r3
		delay_ms(1);
    1f62:	2001      	movs	r0, #1
    1f64:	4b10      	ldr	r3, [pc, #64]	; (1fa8 <grid_led_startup_animation+0x94>)
    1f66:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    1f68:	f109 0901 	add.w	r9, r9, #1
    1f6c:	fa5f f989 	uxtb.w	r9, r9
    1f70:	f10a 3aff 	add.w	sl, sl, #4294967295
    1f74:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    1f78:	d00f      	beq.n	1f9a <grid_led_startup_animation+0x86>
		for (uint8_t j=0; j<mod->led_number; j++){
    1f7a:	7873      	ldrb	r3, [r6, #1]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d0ed      	beq.n	1f5c <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    1f80:	fb0b f709 	mul.w	r7, fp, r9
    1f84:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    1f88:	9b03      	ldr	r3, [sp, #12]
    1f8a:	fb09 f503 	mul.w	r5, r9, r3
    1f8e:	fb0b f505 	mul.w	r5, fp, r5
    1f92:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    1f96:	2400      	movs	r4, #0
    1f98:	e7d5      	b.n	1f46 <grid_led_startup_animation+0x32>
}
    1f9a:	b005      	add	sp, #20
    1f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fa0:	40000c00 	.word	0x40000c00
    1fa4:	00001edd 	.word	0x00001edd
    1fa8:	000040f5 	.word	0x000040f5
    1fac:	00001b11 	.word	0x00001b11

00001fb0 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    1fb0:	b570      	push	{r4, r5, r6, lr}
    1fb2:	4604      	mov	r4, r0
    1fb4:	4e2b      	ldr	r6, [pc, #172]	; (2064 <grid_led_init+0xb4>)
    1fb6:	2200      	movs	r2, #0
    1fb8:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    1fba:	f003 0001 	and.w	r0, r3, #1
    1fbe:	2800      	cmp	r0, #0
    1fc0:	bf14      	ite	ne
    1fc2:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    1fc6:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    1fca:	f3c3 0540 	ubfx	r5, r3, #1, #1
    1fce:	2d00      	cmp	r5, #0
    1fd0:	bf14      	ite	ne
    1fd2:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    1fd6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    1fda:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    1fdc:	f3c3 0080 	ubfx	r0, r3, #2, #1
    1fe0:	2800      	cmp	r0, #0
    1fe2:	bf14      	ite	ne
    1fe4:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    1fe8:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    1fec:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    1fee:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    1ff2:	2d00      	cmp	r5, #0
    1ff4:	bf14      	ite	ne
    1ff6:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    1ffa:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    1ffe:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    2000:	f3c3 1500 	ubfx	r5, r3, #4, #1
    2004:	2d00      	cmp	r5, #0
    2006:	bf14      	ite	ne
    2008:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    200c:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    2010:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    2012:	f3c3 1040 	ubfx	r0, r3, #5, #1
    2016:	2800      	cmp	r0, #0
    2018:	bf14      	ite	ne
    201a:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    201e:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    2022:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    2024:	f3c3 1080 	ubfx	r0, r3, #6, #1
    2028:	2800      	cmp	r0, #0
    202a:	bf14      	ite	ne
    202c:	200e      	movne	r0, #14
    202e:	2008      	moveq	r0, #8
    2030:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    2032:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    2036:	2b00      	cmp	r3, #0
    2038:	bf14      	ite	ne
    203a:	23e0      	movne	r3, #224	; 0xe0
    203c:	2380      	moveq	r3, #128	; 0x80
    203e:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    2040:	f846 3f04 	str.w	r3, [r6, #4]!
    2044:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    2046:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    204a:	d1b5      	bne.n	1fb8 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    204c:	4620      	mov	r0, r4
    204e:	4b06      	ldr	r3, [pc, #24]	; (2068 <grid_led_init+0xb8>)
    2050:	4798      	blx	r3
	grid_led_hardware_init(mod);
    2052:	4620      	mov	r0, r4
    2054:	4b05      	ldr	r3, [pc, #20]	; (206c <grid_led_init+0xbc>)
    2056:	4798      	blx	r3
	grid_led_startup_animation(mod);
    2058:	4620      	mov	r0, r4
    205a:	4b05      	ldr	r3, [pc, #20]	; (2070 <grid_led_init+0xc0>)
    205c:	4798      	blx	r3
}
    205e:	2000      	movs	r0, #0
    2060:	bd70      	pop	{r4, r5, r6, pc}
    2062:	bf00      	nop
    2064:	20001eb4 	.word	0x20001eb4
    2068:	00001cd9 	.word	0x00001cd9
    206c:	00001b51 	.word	0x00001b51
    2070:	00001f15 	.word	0x00001f15

00002074 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    2074:	b510      	push	{r4, lr}
    2076:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2078:	2200      	movs	r2, #0
    207a:	4b05      	ldr	r3, [pc, #20]	; (2090 <grid_led_hardware_start_transfer+0x1c>)
    207c:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    207e:	4805      	ldr	r0, [pc, #20]	; (2094 <grid_led_hardware_start_transfer+0x20>)
    2080:	4b05      	ldr	r3, [pc, #20]	; (2098 <grid_led_hardware_start_transfer+0x24>)
    2082:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2084:	88a2      	ldrh	r2, [r4, #4]
    2086:	68a1      	ldr	r1, [r4, #8]
    2088:	6960      	ldr	r0, [r4, #20]
    208a:	4b04      	ldr	r3, [pc, #16]	; (209c <grid_led_hardware_start_transfer+0x28>)
    208c:	4798      	blx	r3
    208e:	bd10      	pop	{r4, pc}
    2090:	20001234 	.word	0x20001234
    2094:	200010c4 	.word	0x200010c4
    2098:	00004721 	.word	0x00004721
    209c:	00004281 	.word	0x00004281

000020a0 <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    20a0:	4b01      	ldr	r3, [pc, #4]	; (20a8 <grid_led_hardware_is_transfer_completed+0x8>)
    20a2:	7818      	ldrb	r0, [r3, #0]
	
    20a4:	4770      	bx	lr
    20a6:	bf00      	nop
    20a8:	20001234 	.word	0x20001234

000020ac <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    20ac:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    20ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    20b2:	4b14      	ldr	r3, [pc, #80]	; (2104 <grid_module_common_init+0x58>)
    20b4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    20b8:	4b13      	ldr	r3, [pc, #76]	; (2108 <grid_module_common_init+0x5c>)
    20ba:	4798      	blx	r3
    20bc:	b190      	cbz	r0, 20e4 <grid_module_common_init+0x38>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    20be:	4b12      	ldr	r3, [pc, #72]	; (2108 <grid_module_common_init+0x5c>)
    20c0:	4798      	blx	r3
    20c2:	2880      	cmp	r0, #128	; 0x80
    20c4:	d012      	beq.n	20ec <grid_module_common_init+0x40>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    20c6:	4b10      	ldr	r3, [pc, #64]	; (2108 <grid_module_common_init+0x5c>)
    20c8:	4798      	blx	r3
    20ca:	2840      	cmp	r0, #64	; 0x40
    20cc:	d012      	beq.n	20f4 <grid_module_common_init+0x48>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    20ce:	4b0e      	ldr	r3, [pc, #56]	; (2108 <grid_module_common_init+0x5c>)
    20d0:	4798      	blx	r3
    20d2:	28c0      	cmp	r0, #192	; 0xc0
    20d4:	d012      	beq.n	20fc <grid_module_common_init+0x50>
		grid_module_en16_reva_init(&grid_ui_state);
		
	}	

	grid_port_init_all();
    20d6:	4b0d      	ldr	r3, [pc, #52]	; (210c <grid_module_common_init+0x60>)
    20d8:	4798      	blx	r3
	grid_sys_uart_init();
    20da:	4b0d      	ldr	r3, [pc, #52]	; (2110 <grid_module_common_init+0x64>)
    20dc:	4798      	blx	r3
	grid_rx_dma_init();
    20de:	4b0d      	ldr	r3, [pc, #52]	; (2114 <grid_module_common_init+0x68>)
    20e0:	4798      	blx	r3
    20e2:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    20e4:	480c      	ldr	r0, [pc, #48]	; (2118 <grid_module_common_init+0x6c>)
    20e6:	4b0d      	ldr	r3, [pc, #52]	; (211c <grid_module_common_init+0x70>)
    20e8:	4798      	blx	r3
    20ea:	e7e8      	b.n	20be <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    20ec:	480a      	ldr	r0, [pc, #40]	; (2118 <grid_module_common_init+0x6c>)
    20ee:	4b0c      	ldr	r3, [pc, #48]	; (2120 <grid_module_common_init+0x74>)
    20f0:	4798      	blx	r3
    20f2:	e7e8      	b.n	20c6 <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    20f4:	4808      	ldr	r0, [pc, #32]	; (2118 <grid_module_common_init+0x6c>)
    20f6:	4b0b      	ldr	r3, [pc, #44]	; (2124 <grid_module_common_init+0x78>)
    20f8:	4798      	blx	r3
    20fa:	e7e8      	b.n	20ce <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    20fc:	4806      	ldr	r0, [pc, #24]	; (2118 <grid_module_common_init+0x6c>)
    20fe:	4b0a      	ldr	r3, [pc, #40]	; (2128 <grid_module_common_init+0x7c>)
    2100:	4798      	blx	r3
    2102:	e7e8      	b.n	20d6 <grid_module_common_init+0x2a>
    2104:	41008000 	.word	0x41008000
    2108:	00003769 	.word	0x00003769
    210c:	00001415 	.word	0x00001415
    2110:	0000345d 	.word	0x0000345d
    2114:	000035c5 	.word	0x000035c5
    2118:	20001c98 	.word	0x20001c98
    211c:	0000325d 	.word	0x0000325d
    2120:	000023dd 	.word	0x000023dd
    2124:	00002e71 	.word	0x00002e71
    2128:	0000291d 	.word	0x0000291d

0000212c <grid_module_bu16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_bu16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_bu16_revb_mux = 0;
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_bu16_revb_hardware_start_transfer(void){
    212c:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    212e:	4803      	ldr	r0, [pc, #12]	; (213c <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    2130:	4c03      	ldr	r4, [pc, #12]	; (2140 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    2132:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2134:	4803      	ldr	r0, [pc, #12]	; (2144 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    2136:	47a0      	blx	r4
    2138:	bd10      	pop	{r4, pc}
    213a:	bf00      	nop
    213c:	20000ff4 	.word	0x20000ff4
    2140:	0000404d 	.word	0x0000404d
    2144:	200011c8 	.word	0x200011c8

00002148 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    2148:	4b87      	ldr	r3, [pc, #540]	; (2368 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x220>)
    214a:	781b      	ldrb	r3, [r3, #0]
    214c:	b92b      	cbnz	r3, 215a <grid_module_bu16_revb_hardware_transfer_complete_cb+0x12>
		grid_module_bu16_revb_hardware_transfer_complete++;
    214e:	4a86      	ldr	r2, [pc, #536]	; (2368 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x220>)
    2150:	7813      	ldrb	r3, [r2, #0]
    2152:	3301      	adds	r3, #1
    2154:	b2db      	uxtb	r3, r3
    2156:	7013      	strb	r3, [r2, #0]
    2158:	4770      	bx	lr
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    215a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    215e:	b083      	sub	sp, #12
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2160:	4668      	mov	r0, sp
    2162:	4b82      	ldr	r3, [pc, #520]	; (236c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x224>)
    2164:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2166:	4b82      	ldr	r3, [pc, #520]	; (2370 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x228>)
    2168:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    216c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2170:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2174:	4054      	eors	r4, r2
    2176:	400c      	ands	r4, r1
    2178:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    217a:	4668      	mov	r0, sp
    217c:	4b7d      	ldr	r3, [pc, #500]	; (2374 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>)
    217e:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2180:	4b7d      	ldr	r3, [pc, #500]	; (2378 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>)
    2182:	685b      	ldr	r3, [r3, #4]
    2184:	68db      	ldr	r3, [r3, #12]
    2186:	781a      	ldrb	r2, [r3, #0]
    2188:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    218c:	4294      	cmp	r4, r2
    218e:	d010      	beq.n	21b2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x6a>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2190:	2a00      	cmp	r2, #0
    2192:	f040 80e5 	bne.w	2360 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x218>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
			mod->report_array[report_index].helper[0] = 1;
    2196:	2201      	movs	r2, #1
    2198:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    219a:	2281      	movs	r2, #129	; 0x81
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    219c:	4c76      	ldr	r4, [pc, #472]	; (2378 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>)
    219e:	6863      	ldr	r3, [r4, #4]
    21a0:	6858      	ldr	r0, [r3, #4]
    21a2:	2102      	movs	r1, #2
    21a4:	3003      	adds	r0, #3
    21a6:	4b75      	ldr	r3, [pc, #468]	; (237c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x234>)
    21a8:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    21aa:	2100      	movs	r1, #0
    21ac:	4620      	mov	r0, r4
    21ae:	4b74      	ldr	r3, [pc, #464]	; (2380 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    21b0:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    21b2:	2300      	movs	r3, #0
    21b4:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    21b8:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    21bc:	4b6a      	ldr	r3, [pc, #424]	; (2368 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x220>)
    21be:	785a      	ldrb	r2, [r3, #1]
    21c0:	3208      	adds	r2, #8
    21c2:	4870      	ldr	r0, [pc, #448]	; (2384 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x23c>)
    21c4:	5c85      	ldrb	r5, [r0, r2]
    21c6:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    21c8:	785a      	ldrb	r2, [r3, #1]
    21ca:	b2d2      	uxtb	r2, r2
    21cc:	5c84      	ldrb	r4, [r0, r2]
    21ce:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    21d0:	785a      	ldrb	r2, [r3, #1]
    21d2:	3201      	adds	r2, #1
    21d4:	b2d2      	uxtb	r2, r2
    21d6:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    21d8:	785a      	ldrb	r2, [r3, #1]
    21da:	f002 0207 	and.w	r2, r2, #7
    21de:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    21e0:	785b      	ldrb	r3, [r3, #1]
	if (level) {
    21e2:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    21ea:	4b61      	ldr	r3, [pc, #388]	; (2370 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x228>)
    21ec:	bf14      	ite	ne
    21ee:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21f2:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    21f6:	4b5c      	ldr	r3, [pc, #368]	; (2368 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x220>)
    21f8:	785b      	ldrb	r3, [r3, #1]
    21fa:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2202:	4b5b      	ldr	r3, [pc, #364]	; (2370 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x228>)
    2204:	bf14      	ite	ne
    2206:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    220a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    220e:	4b56      	ldr	r3, [pc, #344]	; (2368 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x220>)
    2210:	785b      	ldrb	r3, [r3, #1]
    2212:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2216:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    221a:	4b55      	ldr	r3, [pc, #340]	; (2370 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x228>)
    221c:	bf14      	ite	ne
    221e:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2222:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2226:	2302      	movs	r3, #2
    2228:	f10d 0206 	add.w	r2, sp, #6
    222c:	2100      	movs	r1, #0
    222e:	4856      	ldr	r0, [pc, #344]	; (2388 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x240>)
    2230:	4e56      	ldr	r6, [pc, #344]	; (238c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x244>)
    2232:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2234:	2302      	movs	r3, #2
    2236:	aa01      	add	r2, sp, #4
    2238:	2100      	movs	r1, #0
    223a:	4855      	ldr	r0, [pc, #340]	; (2390 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    223c:	47b0      	blx	r6
	

	
	if (adcresult_0>10000){
    223e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2242:	f242 7310 	movw	r3, #10000	; 0x2710
    2246:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    2248:	bf8c      	ite	hi
    224a:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    224c:	237f      	movls	r3, #127	; 0x7f
    224e:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	
	if (adcresult_1>10000){
    2252:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2256:	f242 7310 	movw	r3, #10000	; 0x2710
    225a:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    225c:	bf8c      	ite	hi
    225e:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    2260:	237f      	movls	r3, #127	; 0x7f
    2262:	f8ad 3004 	strh.w	r3, [sp, #4]
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_array[adc_index_0+1].helper[0]){
    2266:	1c6e      	adds	r6, r5, #1
    2268:	0136      	lsls	r6, r6, #4
    226a:	4b43      	ldr	r3, [pc, #268]	; (2378 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>)
    226c:	685b      	ldr	r3, [r3, #4]
    226e:	4433      	add	r3, r6
    2270:	68da      	ldr	r2, [r3, #12]
    2272:	7812      	ldrb	r2, [r2, #0]
    2274:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2278:	4291      	cmp	r1, r2
    227a:	d02f      	beq.n	22dc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x194>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    227c:	2a00      	cmp	r2, #0
    227e:	bf0c      	ite	eq
    2280:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2284:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[5], 2, command);
    2288:	6858      	ldr	r0, [r3, #4]
    228a:	bf0c      	ite	eq
    228c:	2290      	moveq	r2, #144	; 0x90
    228e:	2280      	movne	r2, #128	; 0x80
    2290:	2102      	movs	r1, #2
    2292:	3005      	adds	r0, #5
    2294:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 237c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x234>
    2298:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    229a:	4f37      	ldr	r7, [pc, #220]	; (2378 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>)
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	4433      	add	r3, r6
    22a0:	6858      	ldr	r0, [r3, #4]
    22a2:	462a      	mov	r2, r5
    22a4:	2102      	movs	r1, #2
    22a6:	3007      	adds	r0, #7
    22a8:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, velocity);
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	4433      	add	r3, r6
    22ae:	6858      	ldr	r0, [r3, #4]
    22b0:	464a      	mov	r2, r9
    22b2:	2102      	movs	r1, #2
    22b4:	3009      	adds	r0, #9
    22b6:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	4433      	add	r3, r6
    22bc:	6858      	ldr	r0, [r3, #4]
    22be:	ea4f 0249 	mov.w	r2, r9, lsl #1
    22c2:	2102      	movs	r1, #2
    22c4:	3015      	adds	r0, #21
    22c6:	47c0      	blx	r8
		mod->report_array[adc_index_0+1].helper[0] = velocity;
    22c8:	687b      	ldr	r3, [r7, #4]
    22ca:	441e      	add	r6, r3
    22cc:	68f3      	ldr	r3, [r6, #12]
    22ce:	f883 9000 	strb.w	r9, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    22d2:	1c69      	adds	r1, r5, #1
    22d4:	b2c9      	uxtb	r1, r1
    22d6:	4638      	mov	r0, r7
    22d8:	4b29      	ldr	r3, [pc, #164]	; (2380 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    22da:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_array[adc_index_1+1].helper[0]){
    22dc:	1c65      	adds	r5, r4, #1
    22de:	012d      	lsls	r5, r5, #4
    22e0:	4b25      	ldr	r3, [pc, #148]	; (2378 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>)
    22e2:	685b      	ldr	r3, [r3, #4]
    22e4:	442b      	add	r3, r5
    22e6:	68da      	ldr	r2, [r3, #12]
    22e8:	7812      	ldrb	r2, [r2, #0]
    22ea:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    22ee:	4291      	cmp	r1, r2
    22f0:	d02e      	beq.n	2350 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x208>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    22f2:	2a00      	cmp	r2, #0
    22f4:	bf0c      	ite	eq
    22f6:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    22fa:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[5], 2, command);
    22fe:	6858      	ldr	r0, [r3, #4]
    2300:	bf0c      	ite	eq
    2302:	2290      	moveq	r2, #144	; 0x90
    2304:	2280      	movne	r2, #128	; 0x80
    2306:	2102      	movs	r1, #2
    2308:	3005      	adds	r0, #5
    230a:	4f1c      	ldr	r7, [pc, #112]	; (237c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x234>)
    230c:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    230e:	4e1a      	ldr	r6, [pc, #104]	; (2378 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>)
    2310:	6873      	ldr	r3, [r6, #4]
    2312:	442b      	add	r3, r5
    2314:	6858      	ldr	r0, [r3, #4]
    2316:	4622      	mov	r2, r4
    2318:	2102      	movs	r1, #2
    231a:	3007      	adds	r0, #7
    231c:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, velocity);
    231e:	6873      	ldr	r3, [r6, #4]
    2320:	442b      	add	r3, r5
    2322:	6858      	ldr	r0, [r3, #4]
    2324:	4642      	mov	r2, r8
    2326:	2102      	movs	r1, #2
    2328:	3009      	adds	r0, #9
    232a:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    232c:	6873      	ldr	r3, [r6, #4]
    232e:	442b      	add	r3, r5
    2330:	6858      	ldr	r0, [r3, #4]
    2332:	ea4f 0248 	mov.w	r2, r8, lsl #1
    2336:	2102      	movs	r1, #2
    2338:	3015      	adds	r0, #21
    233a:	47b8      	blx	r7
		
		mod->report_array[adc_index_1+1].helper[0] = velocity;
    233c:	6873      	ldr	r3, [r6, #4]
    233e:	441d      	add	r5, r3
    2340:	68eb      	ldr	r3, [r5, #12]
    2342:	f883 8000 	strb.w	r8, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    2346:	1c61      	adds	r1, r4, #1
    2348:	b2c9      	uxtb	r1, r1
    234a:	4630      	mov	r0, r6
    234c:	4b0c      	ldr	r3, [pc, #48]	; (2380 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    234e:	4798      	blx	r3
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    2350:	2200      	movs	r2, #0
    2352:	4b05      	ldr	r3, [pc, #20]	; (2368 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x220>)
    2354:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    2356:	4b0f      	ldr	r3, [pc, #60]	; (2394 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x24c>)
    2358:	4798      	blx	r3
}
    235a:	b003      	add	sp, #12
    235c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mod->report_array[report_index].helper[0] = 0;
    2360:	2200      	movs	r2, #0
    2362:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    2364:	2280      	movs	r2, #128	; 0x80
    2366:	e719      	b.n	219c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x54>
    2368:	20000654 	.word	0x20000654
    236c:	00004075 	.word	0x00004075
    2370:	41008000 	.word	0x41008000
    2374:	00004083 	.word	0x00004083
    2378:	20001c98 	.word	0x20001c98
    237c:	00003731 	.word	0x00003731
    2380:	00003b37 	.word	0x00003b37
    2384:	20000300 	.word	0x20000300
    2388:	20000ff4 	.word	0x20000ff4
    238c:	00003f6d 	.word	0x00003f6d
    2390:	200011c8 	.word	0x200011c8
    2394:	0000212d 	.word	0x0000212d

00002398 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    2398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    239a:	4f0b      	ldr	r7, [pc, #44]	; (23c8 <grid_module_bu16_revb_hardware_init+0x30>)
    239c:	4c0b      	ldr	r4, [pc, #44]	; (23cc <grid_module_bu16_revb_hardware_init+0x34>)
    239e:	463b      	mov	r3, r7
    23a0:	2200      	movs	r2, #0
    23a2:	4611      	mov	r1, r2
    23a4:	4620      	mov	r0, r4
    23a6:	4e0a      	ldr	r6, [pc, #40]	; (23d0 <grid_module_bu16_revb_hardware_init+0x38>)
    23a8:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    23aa:	4d0a      	ldr	r5, [pc, #40]	; (23d4 <grid_module_bu16_revb_hardware_init+0x3c>)
    23ac:	463b      	mov	r3, r7
    23ae:	2200      	movs	r2, #0
    23b0:	4611      	mov	r1, r2
    23b2:	4628      	mov	r0, r5
    23b4:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    23b6:	2100      	movs	r1, #0
    23b8:	4620      	mov	r0, r4
    23ba:	4c07      	ldr	r4, [pc, #28]	; (23d8 <grid_module_bu16_revb_hardware_init+0x40>)
    23bc:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    23be:	2100      	movs	r1, #0
    23c0:	4628      	mov	r0, r5
    23c2:	47a0      	blx	r4
    23c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23c6:	bf00      	nop
    23c8:	00002149 	.word	0x00002149
    23cc:	20000ff4 	.word	0x20000ff4
    23d0:	00003eed 	.word	0x00003eed
    23d4:	200011c8 	.word	0x200011c8
    23d8:	00003ead 	.word	0x00003ead

000023dc <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    23dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23e0:	b09b      	sub	sp, #108	; 0x6c
    23e2:	4682      	mov	sl, r0

	grid_led_init(&grid_led_state, 16);
    23e4:	2110      	movs	r1, #16
    23e6:	4839      	ldr	r0, [pc, #228]	; (24cc <grid_module_bu16_revb_init+0xf0>)
    23e8:	4b39      	ldr	r3, [pc, #228]	; (24d0 <grid_module_bu16_revb_init+0xf4>)
    23ea:	4798      	blx	r3
	grid_ui_model_init(mod, 17);
    23ec:	2111      	movs	r1, #17
    23ee:	4650      	mov	r0, sl
    23f0:	4b38      	ldr	r3, [pc, #224]	; (24d4 <grid_module_bu16_revb_init+0xf8>)
    23f2:	4798      	blx	r3

 	
	if (mod->report_array == NULL)	{
    23f4:	f8da 3004 	ldr.w	r3, [sl, #4]
    23f8:	2b00      	cmp	r3, #0
    23fa:	d064      	beq.n	24c6 <grid_module_bu16_revb_init+0xea>
    23fc:	2501      	movs	r5, #1
    23fe:	2400      	movs	r4, #0
			);
			
		}
		else{
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2400:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 24f4 <grid_module_bu16_revb_init+0x118>

			);
			
		}
		
		uint8_t payload_length = strlen(payload_template);
    2404:	4f34      	ldr	r7, [pc, #208]	; (24d8 <grid_module_bu16_revb_init+0xfc>)
    2406:	e028      	b.n	245a <grid_module_bu16_revb_init+0x7e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    2408:	2303      	movs	r3, #3
    240a:	9303      	str	r3, [sp, #12]
    240c:	232b      	movs	r3, #43	; 0x2b
    240e:	9302      	str	r3, [sp, #8]
    2410:	2383      	movs	r3, #131	; 0x83
    2412:	9301      	str	r3, [sp, #4]
    2414:	2380      	movs	r3, #128	; 0x80
    2416:	9300      	str	r3, [sp, #0]
    2418:	2301      	movs	r3, #1
    241a:	2202      	movs	r2, #2
    241c:	492f      	ldr	r1, [pc, #188]	; (24dc <grid_module_bu16_revb_init+0x100>)
    241e:	a812      	add	r0, sp, #72	; 0x48
    2420:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    2422:	a812      	add	r0, sp, #72	; 0x48
    2424:	47b8      	blx	r7
    2426:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    2428:	ae0d      	add	r6, sp, #52	; 0x34
    242a:	4b2d      	ldr	r3, [pc, #180]	; (24e0 <grid_module_bu16_revb_init+0x104>)
    242c:	681b      	ldr	r3, [r3, #0]
    242e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2432:	0c1b      	lsrs	r3, r3, #16
    2434:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		
		uint8_t helper_length = strlen(helper_template);
    2438:	4630      	mov	r0, r6
    243a:	47b8      	blx	r7
		uint8_t error = grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    243c:	b2c0      	uxtb	r0, r0
    243e:	9001      	str	r0, [sp, #4]
    2440:	9600      	str	r6, [sp, #0]
    2442:	fa5f f388 	uxtb.w	r3, r8
    2446:	aa12      	add	r2, sp, #72	; 0x48
    2448:	2100      	movs	r1, #0
    244a:	4650      	mov	r0, sl
    244c:	4e25      	ldr	r6, [pc, #148]	; (24e4 <grid_module_bu16_revb_init+0x108>)
    244e:	47b0      	blx	r6
		
		if (error != 0){
    2450:	2800      	cmp	r0, #0
    2452:	d138      	bne.n	24c6 <grid_module_bu16_revb_init+0xea>
    2454:	3401      	adds	r4, #1
    2456:	3501      	adds	r5, #1
    2458:	b2ed      	uxtb	r5, r5
		if (i == 0){
    245a:	f014 08ff 	ands.w	r8, r4, #255	; 0xff
    245e:	d0d3      	beq.n	2408 <grid_module_bu16_revb_init+0x2c>
    2460:	1e60      	subs	r0, r4, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2462:	2103      	movs	r1, #3
    2464:	910b      	str	r1, [sp, #44]	; 0x2c
    2466:	2300      	movs	r3, #0
    2468:	930a      	str	r3, [sp, #40]	; 0x28
    246a:	9009      	str	r0, [sp, #36]	; 0x24
    246c:	2263      	movs	r2, #99	; 0x63
    246e:	9208      	str	r2, [sp, #32]
    2470:	9307      	str	r3, [sp, #28]
    2472:	9106      	str	r1, [sp, #24]
    2474:	2202      	movs	r2, #2
    2476:	9205      	str	r2, [sp, #20]
    2478:	9104      	str	r1, [sp, #16]
    247a:	9303      	str	r3, [sp, #12]
    247c:	9002      	str	r0, [sp, #8]
    247e:	2190      	movs	r1, #144	; 0x90
    2480:	9101      	str	r1, [sp, #4]
    2482:	9300      	str	r3, [sp, #0]
    2484:	4918      	ldr	r1, [pc, #96]	; (24e8 <grid_module_bu16_revb_init+0x10c>)
    2486:	a812      	add	r0, sp, #72	; 0x48
    2488:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    248a:	a812      	add	r0, sp, #72	; 0x48
    248c:	47b8      	blx	r7
    248e:	4681      	mov	r9, r0
		sprintf(helper_template, "00"); // LASTVALUE
    2490:	ae0d      	add	r6, sp, #52	; 0x34
    2492:	4b13      	ldr	r3, [pc, #76]	; (24e0 <grid_module_bu16_revb_init+0x104>)
    2494:	681b      	ldr	r3, [r3, #0]
    2496:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    249a:	0c1b      	lsrs	r3, r3, #16
    249c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		uint8_t helper_length = strlen(helper_template);
    24a0:	4630      	mov	r0, r6
    24a2:	47b8      	blx	r7
		uint8_t error = grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    24a4:	b2c0      	uxtb	r0, r0
    24a6:	9001      	str	r0, [sp, #4]
    24a8:	9600      	str	r6, [sp, #0]
    24aa:	fa5f f389 	uxtb.w	r3, r9
    24ae:	aa12      	add	r2, sp, #72	; 0x48
    24b0:	4641      	mov	r1, r8
    24b2:	4650      	mov	r0, sl
    24b4:	4e0b      	ldr	r6, [pc, #44]	; (24e4 <grid_module_bu16_revb_init+0x108>)
    24b6:	47b0      	blx	r6
		if (error != 0){
    24b8:	b928      	cbnz	r0, 24c6 <grid_module_bu16_revb_init+0xea>
	for(uint8_t i=0; i<17; i++){
    24ba:	2d10      	cmp	r5, #16
    24bc:	d9ca      	bls.n	2454 <grid_module_bu16_revb_init+0x78>
			
		}

	}
			
	grid_module_bu16_revb_hardware_init();
    24be:	4b0b      	ldr	r3, [pc, #44]	; (24ec <grid_module_bu16_revb_init+0x110>)
    24c0:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    24c2:	4b0b      	ldr	r3, [pc, #44]	; (24f0 <grid_module_bu16_revb_init+0x114>)
    24c4:	4798      	blx	r3

};
    24c6:	b01b      	add	sp, #108	; 0x6c
    24c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24cc:	20003724 	.word	0x20003724
    24d0:	00001fb1 	.word	0x00001fb1
    24d4:	00003a59 	.word	0x00003a59
    24d8:	0000b51d 	.word	0x0000b51d
    24dc:	0000bcfc 	.word	0x0000bcfc
    24e0:	0000bd14 	.word	0x0000bd14
    24e4:	00003a71 	.word	0x00003a71
    24e8:	0000bd18 	.word	0x0000bd18
    24ec:	00002399 	.word	0x00002399
    24f0:	0000212d 	.word	0x0000212d
    24f4:	0000b4d5 	.word	0x0000b4d5

000024f8 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    24f8:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    24fe:	4b06      	ldr	r3, [pc, #24]	; (2518 <grid_module_en16_reva_hardware_start_transfer+0x20>)
    2500:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    2502:	4c06      	ldr	r4, [pc, #24]	; (251c <grid_module_en16_reva_hardware_start_transfer+0x24>)
    2504:	4620      	mov	r0, r4
    2506:	4b06      	ldr	r3, [pc, #24]	; (2520 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    2508:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    250a:	2308      	movs	r3, #8
    250c:	4a05      	ldr	r2, [pc, #20]	; (2524 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    250e:	4906      	ldr	r1, [pc, #24]	; (2528 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    2510:	4620      	mov	r0, r4
    2512:	4c06      	ldr	r4, [pc, #24]	; (252c <grid_module_en16_reva_hardware_start_transfer+0x34>)
    2514:	47a0      	blx	r4
    2516:	bd10      	pop	{r4, pc}
    2518:	41008000 	.word	0x41008000
    251c:	20000ea4 	.word	0x20000ea4
    2520:	000044f5 	.word	0x000044f5
    2524:	20001778 	.word	0x20001778
    2528:	20000310 	.word	0x20000310
    252c:	00004595 	.word	0x00004595

00002530 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    2530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2534:	ed2d 8b04 	vpush	{d8-d9}
    2538:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    253a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    253e:	4b36      	ldr	r3, [pc, #216]	; (2618 <grid_module_en16_reva_hardware_transfer_complete_cb+0xe8>)
    2540:	615a      	str	r2, [r3, #20]
    2542:	4e36      	ldr	r6, [pc, #216]	; (261c <grid_module_en16_reva_hardware_transfer_complete_cb+0xec>)
    2544:	2700      	movs	r7, #0
				if (elapsed_time<20){
					elapsed_time = 20;
				}
			
				
				uint8_t velocityfactor = (160000-elapsed_time*elapsed_time)/40000.0 + 1;
    2546:	ed9f 9b30 	vldr	d9, [pc, #192]	; 2608 <grid_module_en16_reva_hardware_transfer_complete_cb+0xd8>
    254a:	ed9f 8b31 	vldr	d8, [pc, #196]	; 2610 <grid_module_en16_reva_hardware_transfer_complete_cb+0xe0>
    254e:	e07f      	b.n	2650 <grid_module_en16_reva_hardware_transfer_complete_cb+0x120>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor/3;
				
				if (delta<0){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi >= 0){
    2550:	f898 0000 	ldrb.w	r0, [r8]
    2554:	4932      	ldr	r1, [pc, #200]	; (2620 <grid_module_en16_reva_hardware_transfer_complete_cb+0xf0>)
    2556:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    255a:	78c9      	ldrb	r1, [r1, #3]
    255c:	42d1      	cmn	r1, r2
    255e:	d405      	bmi.n	256c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c>
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
    2560:	4a2f      	ldr	r2, [pc, #188]	; (2620 <grid_module_en16_reva_hardware_transfer_complete_cb+0xf0>)
    2562:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    2566:	440b      	add	r3, r1
    2568:	70c3      	strb	r3, [r0, #3]
    256a:	e131      	b.n	27d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a0>
					}
					else{
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value = 0;
    256c:	4b2c      	ldr	r3, [pc, #176]	; (2620 <grid_module_en16_reva_hardware_transfer_complete_cb+0xf0>)
    256e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2572:	2300      	movs	r3, #0
    2574:	70c3      	strb	r3, [r0, #3]
    2576:	e12b      	b.n	27d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a0>
				else if (delta>0){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi <= 127){
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value = 127;
    2578:	4b29      	ldr	r3, [pc, #164]	; (2620 <grid_module_en16_reva_hardware_transfer_complete_cb+0xf0>)
    257a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    257e:	237f      	movs	r3, #127	; 0x7f
    2580:	70c3      	strb	r3, [r0, #3]
    2582:	e125      	b.n	27d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a0>
				if (0 == grid_ui_report_get_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16)){
					value = 64; //CENTER
					mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = 0;
				}
				else{
					value = mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0];
    2584:	f898 2000 	ldrb.w	r2, [r8]
    2588:	4b26      	ldr	r3, [pc, #152]	; (2624 <grid_module_en16_reva_hardware_transfer_complete_cb+0xf4>)
    258a:	685b      	ldr	r3, [r3, #4]
    258c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2590:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    2594:	781b      	ldrb	r3, [r3, #0]
    2596:	e130      	b.n	27fa <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ca>
	CRITICAL_SECTION_ENTER();
    2598:	a801      	add	r0, sp, #4
    259a:	4b23      	ldr	r3, [pc, #140]	; (2628 <grid_module_en16_reva_hardware_transfer_complete_cb+0xf8>)
    259c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    259e:	4b1e      	ldr	r3, [pc, #120]	; (2618 <grid_module_en16_reva_hardware_transfer_complete_cb+0xe8>)
    25a0:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    25a4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    25a8:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    25ac:	4054      	eors	r4, r2
    25ae:	400c      	ands	r4, r1
    25b0:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    25b2:	a801      	add	r0, sp, #4
    25b4:	4b1d      	ldr	r3, [pc, #116]	; (262c <grid_module_en16_reva_hardware_transfer_complete_cb+0xfc>)
    25b6:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    25b8:	4b1a      	ldr	r3, [pc, #104]	; (2624 <grid_module_en16_reva_hardware_transfer_complete_cb+0xf4>)
    25ba:	685b      	ldr	r3, [r3, #4]
    25bc:	68da      	ldr	r2, [r3, #12]
    25be:	7813      	ldrb	r3, [r2, #0]
    25c0:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    25c4:	429c      	cmp	r4, r3
    25c6:	d00e      	beq.n	25e6 <grid_module_en16_reva_hardware_transfer_complete_cb+0xb6>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    25c8:	b9bb      	cbnz	r3, 25fa <grid_module_en16_reva_hardware_transfer_complete_cb+0xca>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
			mod->report_array[report_index].helper[0] = 1;
    25ca:	2301      	movs	r3, #1
    25cc:	7013      	strb	r3, [r2, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    25ce:	2281      	movs	r2, #129	; 0x81
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    25d0:	4c14      	ldr	r4, [pc, #80]	; (2624 <grid_module_en16_reva_hardware_transfer_complete_cb+0xf4>)
    25d2:	6863      	ldr	r3, [r4, #4]
    25d4:	6858      	ldr	r0, [r3, #4]
    25d6:	2102      	movs	r1, #2
    25d8:	3003      	adds	r0, #3
    25da:	4b15      	ldr	r3, [pc, #84]	; (2630 <grid_module_en16_reva_hardware_transfer_complete_cb+0x100>)
    25dc:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    25de:	2100      	movs	r1, #0
    25e0:	4620      	mov	r0, r4
    25e2:	4b14      	ldr	r3, [pc, #80]	; (2634 <grid_module_en16_reva_hardware_transfer_complete_cb+0x104>)
    25e4:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()




	grid_module_en16_reva_hardware_transfer_complete = 0;
    25e6:	2200      	movs	r2, #0
    25e8:	4b13      	ldr	r3, [pc, #76]	; (2638 <grid_module_en16_reva_hardware_transfer_complete_cb+0x108>)
    25ea:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    25ec:	4b13      	ldr	r3, [pc, #76]	; (263c <grid_module_en16_reva_hardware_transfer_complete_cb+0x10c>)
    25ee:	4798      	blx	r3
}
    25f0:	b003      	add	sp, #12
    25f2:	ecbd 8b04 	vpop	{d8-d9}
    25f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod->report_array[report_index].helper[0] = 0;
    25fa:	2300      	movs	r3, #0
    25fc:	7013      	strb	r3, [r2, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    25fe:	2280      	movs	r2, #128	; 0x80
    2600:	e7e6      	b.n	25d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa0>
    2602:	bf00      	nop
    2604:	f3af 8000 	nop.w
    2608:	00000000 	.word	0x00000000
    260c:	40e38800 	.word	0x40e38800
    2610:	00000000 	.word	0x00000000
    2614:	3ff00000 	.word	0x3ff00000
    2618:	41008000 	.word	0x41008000
    261c:	20000320 	.word	0x20000320
    2620:	20003954 	.word	0x20003954
    2624:	20001c98 	.word	0x20001c98
    2628:	00004075 	.word	0x00004075
    262c:	00004083 	.word	0x00004083
    2630:	00003731 	.word	0x00003731
    2634:	00003b37 	.word	0x00003b37
    2638:	20003750 	.word	0x20003750
    263c:	000024f9 	.word	0x000024f9
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = b_now;
    2640:	4b8d      	ldr	r3, [pc, #564]	; (2878 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    2642:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2646:	7394      	strb	r4, [r2, #14]
    2648:	3701      	adds	r7, #1
    264a:	3601      	adds	r6, #1
	for (uint8_t i=0; i<16; i++){
    264c:	2f10      	cmp	r7, #16
    264e:	d0a3      	beq.n	2598 <grid_module_en16_reva_hardware_transfer_complete_cb+0x68>
    2650:	b2f9      	uxtb	r1, r7
		uint8_t new_value = (UI_SPI_RX_BUFFER[i/2]>>(4*(i%2)))&0x0F;
    2652:	084b      	lsrs	r3, r1, #1
    2654:	4a89      	ldr	r2, [pc, #548]	; (287c <grid_module_en16_reva_hardware_transfer_complete_cb+0x34c>)
    2656:	5cd3      	ldrb	r3, [r2, r3]
    2658:	f001 0201 	and.w	r2, r1, #1
    265c:	0092      	lsls	r2, r2, #2
    265e:	4113      	asrs	r3, r2
    2660:	b2db      	uxtb	r3, r3
    2662:	f003 000f 	and.w	r0, r3, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[i];
    2666:	4a86      	ldr	r2, [pc, #536]	; (2880 <grid_module_en16_reva_hardware_transfer_complete_cb+0x350>)
    2668:	5dd2      	ldrb	r2, [r2, r7]
    266a:	b2d2      	uxtb	r2, r2
		if (old_value != new_value){
    266c:	4290      	cmp	r0, r2
    266e:	d0eb      	beq.n	2648 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
			UI_SPI_DEBUG = i;
    2670:	4a84      	ldr	r2, [pc, #528]	; (2884 <grid_module_en16_reva_hardware_transfer_complete_cb+0x354>)
    2672:	7011      	strb	r1, [r2, #0]
			uint8_t button_value = new_value>>2;
    2674:	0881      	lsrs	r1, r0, #2
			uint8_t phase_a = (new_value>>1)&1;
    2676:	f3c0 0540 	ubfx	r5, r0, #1, #1
			uint8_t phase_b = (new_value)&1;
    267a:	f003 0401 	and.w	r4, r3, #1
    267e:	46b0      	mov	r8, r6
			if (button_value != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value){
    2680:	7833      	ldrb	r3, [r6, #0]
    2682:	4a7d      	ldr	r2, [pc, #500]	; (2878 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    2684:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2688:	7852      	ldrb	r2, [r2, #1]
    268a:	428a      	cmp	r2, r1
    268c:	d03e      	beq.n	270c <grid_module_en16_reva_hardware_transfer_complete_cb+0x1dc>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_changed = 1;
    268e:	4a7a      	ldr	r2, [pc, #488]	; (2878 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    2690:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2694:	2001      	movs	r0, #1
    2696:	7090      	strb	r0, [r2, #2]
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value = new_value>>2;
    2698:	7051      	strb	r1, [r2, #1]
				if (mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] == 0){
    269a:	4403      	add	r3, r0
    269c:	4a7a      	ldr	r2, [pc, #488]	; (2888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>)
    269e:	6852      	ldr	r2, [r2, #4]
    26a0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    26a4:	68da      	ldr	r2, [r3, #12]
    26a6:	7812      	ldrb	r2, [r2, #0]
					velocity = 0;
    26a8:	2a00      	cmp	r2, #0
    26aa:	bf0c      	ite	eq
    26ac:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    26b0:	f04f 0a00 	movne.w	sl, #0
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[5], 2, command);
    26b4:	6858      	ldr	r0, [r3, #4]
    26b6:	bf0c      	ite	eq
    26b8:	2290      	moveq	r2, #144	; 0x90
    26ba:	2280      	movne	r2, #128	; 0x80
    26bc:	2102      	movs	r1, #2
    26be:	3005      	adds	r0, #5
    26c0:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 28b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x384>
    26c4:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    26c6:	7832      	ldrb	r2, [r6, #0]
    26c8:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 2888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>
    26cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
    26d0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    26d4:	6958      	ldr	r0, [r3, #20]
    26d6:	2102      	movs	r1, #2
    26d8:	3007      	adds	r0, #7
    26da:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[9], 2, velocity);
    26dc:	7832      	ldrb	r2, [r6, #0]
    26de:	f8d9 3004 	ldr.w	r3, [r9, #4]
    26e2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    26e6:	6958      	ldr	r0, [r3, #20]
    26e8:	4652      	mov	r2, sl
    26ea:	2102      	movs	r1, #2
    26ec:	3009      	adds	r0, #9
    26ee:	47d8      	blx	fp
				mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] = velocity;
    26f0:	7832      	ldrb	r2, [r6, #0]
    26f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
    26f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    26fa:	69db      	ldr	r3, [r3, #28]
    26fc:	f883 a000 	strb.w	sl, [r3]
				grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1);
    2700:	7831      	ldrb	r1, [r6, #0]
    2702:	3101      	adds	r1, #1
    2704:	b2c9      	uxtb	r1, r1
    2706:	4648      	mov	r0, r9
    2708:	4b60      	ldr	r3, [pc, #384]	; (288c <grid_module_en16_reva_hardware_transfer_complete_cb+0x35c>)
    270a:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous;
    270c:	f898 2000 	ldrb.w	r2, [r8]
    2710:	4b59      	ldr	r3, [pc, #356]	; (2878 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    2712:	eb03 1302 	add.w	r3, r3, r2, lsl #4
			if (a_now != a_prev){
    2716:	7b5b      	ldrb	r3, [r3, #13]
    2718:	42ab      	cmp	r3, r5
    271a:	d091      	beq.n	2640 <grid_module_en16_reva_hardware_transfer_complete_cb+0x110>
					delta = +1;
    271c:	42a5      	cmp	r5, r4
    271e:	bf14      	ite	ne
    2720:	f04f 39ff 	movne.w	r9, #4294967295
    2724:	f04f 0901 	moveq.w	r9, #1
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous = a_now;
    2728:	4b53      	ldr	r3, [pc, #332]	; (2878 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    272a:	eb03 1102 	add.w	r1, r3, r2, lsl #4
    272e:	734d      	strb	r5, [r1, #13]
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = b_now;
    2730:	738c      	strb	r4, [r1, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]+1].last_real_time);
    2732:	6989      	ldr	r1, [r1, #24]
    2734:	4856      	ldr	r0, [pc, #344]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x360>)
    2736:	4b57      	ldr	r3, [pc, #348]	; (2894 <grid_module_en16_reva_hardware_transfer_complete_cb+0x364>)
    2738:	4798      	blx	r3
    273a:	9000      	str	r0, [sp, #0]
				if (elapsed_time>400){
    273c:	9b00      	ldr	r3, [sp, #0]
    273e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    2742:	bf84      	itt	hi
    2744:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    2748:	9300      	strhi	r3, [sp, #0]
				if (elapsed_time<20){
    274a:	9b00      	ldr	r3, [sp, #0]
    274c:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    274e:	bf9c      	itt	ls
    2750:	2314      	movls	r3, #20
    2752:	9300      	strls	r3, [sp, #0]
				uint8_t velocityfactor = (160000-elapsed_time*elapsed_time)/40000.0 + 1;
    2754:	9b00      	ldr	r3, [sp, #0]
    2756:	9800      	ldr	r0, [sp, #0]
    2758:	fb00 f003 	mul.w	r0, r0, r3
    275c:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    2760:	f500 7080 	add.w	r0, r0, #256	; 0x100
    2764:	4b4c      	ldr	r3, [pc, #304]	; (2898 <grid_module_en16_reva_hardware_transfer_complete_cb+0x368>)
    2766:	4798      	blx	r3
    2768:	ec53 2b19 	vmov	r2, r3, d9
    276c:	4c4b      	ldr	r4, [pc, #300]	; (289c <grid_module_en16_reva_hardware_transfer_complete_cb+0x36c>)
    276e:	47a0      	blx	r4
    2770:	ec53 2b18 	vmov	r2, r3, d8
    2774:	4c4a      	ldr	r4, [pc, #296]	; (28a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x370>)
    2776:	47a0      	blx	r4
    2778:	4b4a      	ldr	r3, [pc, #296]	; (28a4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x374>)
    277a:	4798      	blx	r3
    277c:	b2c4      	uxtb	r4, r0
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    277e:	f898 5000 	ldrb.w	r5, [r8]
    2782:	4843      	ldr	r0, [pc, #268]	; (2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x360>)
    2784:	4b48      	ldr	r3, [pc, #288]	; (28a8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x378>)
    2786:	4798      	blx	r3
    2788:	4b3b      	ldr	r3, [pc, #236]	; (2878 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    278a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    278e:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor/3;
    2790:	fb04 f209 	mul.w	r2, r4, r9
    2794:	4b45      	ldr	r3, [pc, #276]	; (28ac <grid_module_en16_reva_hardware_transfer_complete_cb+0x37c>)
    2796:	fb83 1302 	smull	r1, r3, r3, r2
    279a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    279e:	444b      	add	r3, r9
    27a0:	b29b      	uxth	r3, r3
    27a2:	b21a      	sxth	r2, r3
				if (delta<0){
    27a4:	f1b9 0f00 	cmp.w	r9, #0
    27a8:	f6ff aed2 	blt.w	2550 <grid_module_en16_reva_hardware_transfer_complete_cb+0x20>
				else if (delta>0){
    27ac:	f1b9 0f00 	cmp.w	r9, #0
    27b0:	dd0e      	ble.n	27d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a0>
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi <= 127){
    27b2:	f898 0000 	ldrb.w	r0, [r8]
    27b6:	4930      	ldr	r1, [pc, #192]	; (2878 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    27b8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    27bc:	78c9      	ldrb	r1, [r1, #3]
    27be:	440a      	add	r2, r1
    27c0:	2a7f      	cmp	r2, #127	; 0x7f
    27c2:	f73f aed9 	bgt.w	2578 <grid_module_en16_reva_hardware_transfer_complete_cb+0x48>
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
    27c6:	4a2c      	ldr	r2, [pc, #176]	; (2878 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    27c8:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    27cc:	440b      	add	r3, r1
    27ce:	70c3      	strb	r3, [r0, #3]
				if (0 == grid_ui_report_get_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16)){
    27d0:	f898 1000 	ldrb.w	r1, [r8]
    27d4:	3111      	adds	r1, #17
    27d6:	b2c9      	uxtb	r1, r1
    27d8:	482b      	ldr	r0, [pc, #172]	; (2888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>)
    27da:	4b35      	ldr	r3, [pc, #212]	; (28b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x380>)
    27dc:	4798      	blx	r3
    27de:	2800      	cmp	r0, #0
    27e0:	f47f aed0 	bne.w	2584 <grid_module_en16_reva_hardware_transfer_complete_cb+0x54>
					mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = 0;
    27e4:	f898 2000 	ldrb.w	r2, [r8]
    27e8:	4b27      	ldr	r3, [pc, #156]	; (2888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>)
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    27f0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    27f4:	2200      	movs	r2, #0
    27f6:	701a      	strb	r2, [r3, #0]
					value = 64; //CENTER
    27f8:	2340      	movs	r3, #64	; 0x40
				value +=  delta*velocityfactor;
    27fa:	fb09 3904 	mla	r9, r9, r4, r3
    27fe:	fa5f f989 	uxtb.w	r9, r9
				if (value != mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0]){
    2802:	f898 3000 	ldrb.w	r3, [r8]
    2806:	f103 0211 	add.w	r2, r3, #17
    280a:	4b1f      	ldr	r3, [pc, #124]	; (2888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>)
    280c:	685b      	ldr	r3, [r3, #4]
    280e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2812:	68da      	ldr	r2, [r3, #12]
    2814:	7812      	ldrb	r2, [r2, #0]
    2816:	454a      	cmp	r2, r9
    2818:	f43f af16 	beq.w	2648 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[5], 2, command);
    281c:	6858      	ldr	r0, [r3, #4]
    281e:	22b0      	movs	r2, #176	; 0xb0
    2820:	2102      	movs	r1, #2
    2822:	3005      	adds	r0, #5
    2824:	4d23      	ldr	r5, [pc, #140]	; (28b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x384>)
    2826:	47a8      	blx	r5
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    2828:	f898 2000 	ldrb.w	r2, [r8]
    282c:	4c16      	ldr	r4, [pc, #88]	; (2888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>)
    282e:	6863      	ldr	r3, [r4, #4]
    2830:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2834:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    2838:	2102      	movs	r1, #2
    283a:	3007      	adds	r0, #7
    283c:	47a8      	blx	r5
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[9], 2, value);
    283e:	f898 2000 	ldrb.w	r2, [r8]
    2842:	6863      	ldr	r3, [r4, #4]
    2844:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2848:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    284c:	464a      	mov	r2, r9
    284e:	2102      	movs	r1, #2
    2850:	3009      	adds	r0, #9
    2852:	47a8      	blx	r5
					mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = value;
    2854:	f898 2000 	ldrb.w	r2, [r8]
    2858:	6863      	ldr	r3, [r4, #4]
    285a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    285e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    2862:	f883 9000 	strb.w	r9, [r3]
					grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16);
    2866:	f898 1000 	ldrb.w	r1, [r8]
    286a:	3111      	adds	r1, #17
    286c:	b2c9      	uxtb	r1, r1
    286e:	4620      	mov	r0, r4
    2870:	4b06      	ldr	r3, [pc, #24]	; (288c <grid_module_en16_reva_hardware_transfer_complete_cb+0x35c>)
    2872:	4798      	blx	r3
    2874:	e6e8      	b.n	2648 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
    2876:	bf00      	nop
    2878:	20003954 	.word	0x20003954
    287c:	20001778 	.word	0x20001778
    2880:	20001760 	.word	0x20001760
    2884:	20001748 	.word	0x20001748
    2888:	20001c98 	.word	0x20001c98
    288c:	00003b37 	.word	0x00003b37
    2890:	20001ca4 	.word	0x20001ca4
    2894:	00003635 	.word	0x00003635
    2898:	0000ad19 	.word	0x0000ad19
    289c:	0000b059 	.word	0x0000b059
    28a0:	0000aaa1 	.word	0x0000aaa1
    28a4:	0000b229 	.word	0x0000b229
    28a8:	00003631 	.word	0x00003631
    28ac:	55555556 	.word	0x55555556
    28b0:	00003b2f 	.word	0x00003b2f
    28b4:	00003731 	.word	0x00003731

000028b8 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    28b8:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    28ba:	4b0e      	ldr	r3, [pc, #56]	; (28f4 <grid_module_en16_reva_hardware_init+0x3c>)
    28bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    28c0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    28c2:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    28c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    28c8:	629a      	str	r2, [r3, #40]	; 0x28
    28ca:	4a0b      	ldr	r2, [pc, #44]	; (28f8 <grid_module_en16_reva_hardware_init+0x40>)
    28cc:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    28ce:	4c0b      	ldr	r4, [pc, #44]	; (28fc <grid_module_en16_reva_hardware_init+0x44>)
    28d0:	2103      	movs	r1, #3
    28d2:	4620      	mov	r0, r4
    28d4:	4b0a      	ldr	r3, [pc, #40]	; (2900 <grid_module_en16_reva_hardware_init+0x48>)
    28d6:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    28d8:	490a      	ldr	r1, [pc, #40]	; (2904 <grid_module_en16_reva_hardware_init+0x4c>)
    28da:	4620      	mov	r0, r4
    28dc:	4b0a      	ldr	r3, [pc, #40]	; (2908 <grid_module_en16_reva_hardware_init+0x50>)
    28de:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    28e0:	490a      	ldr	r1, [pc, #40]	; (290c <grid_module_en16_reva_hardware_init+0x54>)
    28e2:	4620      	mov	r0, r4
    28e4:	4b0a      	ldr	r3, [pc, #40]	; (2910 <grid_module_en16_reva_hardware_init+0x58>)
    28e6:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    28e8:	4a0a      	ldr	r2, [pc, #40]	; (2914 <grid_module_en16_reva_hardware_init+0x5c>)
    28ea:	2100      	movs	r1, #0
    28ec:	4620      	mov	r0, r4
    28ee:	4b0a      	ldr	r3, [pc, #40]	; (2918 <grid_module_en16_reva_hardware_init+0x60>)
    28f0:	4798      	blx	r3
    28f2:	bd10      	pop	{r4, pc}
    28f4:	41008000 	.word	0x41008000
    28f8:	c0000020 	.word	0xc0000020
    28fc:	20000ea4 	.word	0x20000ea4
    2900:	00004559 	.word	0x00004559
    2904:	00061a80 	.word	0x00061a80
    2908:	0000451d 	.word	0x0000451d
    290c:	2000175c 	.word	0x2000175c
    2910:	00004641 	.word	0x00004641
    2914:	00002531 	.word	0x00002531
    2918:	000045fd 	.word	0x000045fd

0000291c <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    291c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2920:	b097      	sub	sp, #92	; 0x5c
    2922:	4604      	mov	r4, r0
    2924:	9007      	str	r0, [sp, #28]
	
	mod->report_length = 1+16+16+16;
    2926:	2331      	movs	r3, #49	; 0x31
    2928:	7003      	strb	r3, [r0, #0]
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    292a:	f44f 7044 	mov.w	r0, #784	; 0x310
    292e:	4b3a      	ldr	r3, [pc, #232]	; (2a18 <grid_module_en16_reva_init+0xfc>)
    2930:	4798      	blx	r3
    2932:	6060      	str	r0, [r4, #4]
    2934:	f04f 38ff 	mov.w	r8, #4294967295
    2938:	2401      	movs	r4, #1
    293a:	2500      	movs	r5, #0
			);
				
		}

		
		uint8_t payload_length = strlen(payload_template);
    293c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 2a3c <grid_module_en16_reva_init+0x120>

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    2940:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 2a40 <grid_module_en16_reva_init+0x124>
		
		uint8_t helper_length = strlen(helper_template);

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2944:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 2a44 <grid_module_en16_reva_init+0x128>
    2948:	e027      	b.n	299a <grid_module_en16_reva_init+0x7e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c%",
    294a:	2303      	movs	r3, #3
    294c:	9303      	str	r3, [sp, #12]
    294e:	2339      	movs	r3, #57	; 0x39
    2950:	9302      	str	r3, [sp, #8]
    2952:	2383      	movs	r3, #131	; 0x83
    2954:	9301      	str	r3, [sp, #4]
    2956:	2380      	movs	r3, #128	; 0x80
    2958:	9300      	str	r3, [sp, #0]
    295a:	2301      	movs	r3, #1
    295c:	2202      	movs	r2, #2
    295e:	492f      	ldr	r1, [pc, #188]	; (2a1c <grid_module_en16_reva_init+0x100>)
    2960:	a80e      	add	r0, sp, #56	; 0x38
    2962:	4e2f      	ldr	r6, [pc, #188]	; (2a20 <grid_module_en16_reva_init+0x104>)
    2964:	47b0      	blx	r6
		uint8_t payload_length = strlen(payload_template);
    2966:	a80e      	add	r0, sp, #56	; 0x38
    2968:	47c8      	blx	r9
    296a:	4607      	mov	r7, r0
		sprintf(helper_template, "00"); // LASTVALUE
    296c:	ae09      	add	r6, sp, #36	; 0x24
    296e:	f8db 3000 	ldr.w	r3, [fp]
    2972:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    2976:	0c1b      	lsrs	r3, r3, #16
    2978:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		uint8_t helper_length = strlen(helper_template);
    297c:	4630      	mov	r0, r6
    297e:	47c8      	blx	r9
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2980:	b2c0      	uxtb	r0, r0
    2982:	9001      	str	r0, [sp, #4]
    2984:	9600      	str	r6, [sp, #0]
    2986:	b2fb      	uxtb	r3, r7
    2988:	aa0e      	add	r2, sp, #56	; 0x38
    298a:	2100      	movs	r1, #0
    298c:	9807      	ldr	r0, [sp, #28]
    298e:	47d0      	blx	sl
    2990:	3501      	adds	r5, #1
    2992:	3401      	adds	r4, #1
    2994:	b2e4      	uxtb	r4, r4
    2996:	f108 0801 	add.w	r8, r8, #1
		if (i == 0){
    299a:	f015 06ff 	ands.w	r6, r5, #255	; 0xff
    299e:	d0d4      	beq.n	294a <grid_module_en16_reva_init+0x2e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    29a0:	2303      	movs	r3, #3
    29a2:	9304      	str	r3, [sp, #16]
    29a4:	2300      	movs	r3, #0
    29a6:	9303      	str	r3, [sp, #12]
    29a8:	f8cd 8008 	str.w	r8, [sp, #8]
    29ac:	2290      	movs	r2, #144	; 0x90
    29ae:	9201      	str	r2, [sp, #4]
    29b0:	9300      	str	r3, [sp, #0]
    29b2:	2202      	movs	r2, #2
    29b4:	491b      	ldr	r1, [pc, #108]	; (2a24 <grid_module_en16_reva_init+0x108>)
    29b6:	a80e      	add	r0, sp, #56	; 0x38
    29b8:	4f19      	ldr	r7, [pc, #100]	; (2a20 <grid_module_en16_reva_init+0x104>)
    29ba:	47b8      	blx	r7
		uint8_t payload_length = strlen(payload_template);
    29bc:	a80e      	add	r0, sp, #56	; 0x38
    29be:	47c8      	blx	r9
    29c0:	9006      	str	r0, [sp, #24]
		sprintf(helper_template, "00"); // LASTVALUE
    29c2:	af09      	add	r7, sp, #36	; 0x24
    29c4:	f8db 3000 	ldr.w	r3, [fp]
    29c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    29cc:	0c1b      	lsrs	r3, r3, #16
    29ce:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		uint8_t helper_length = strlen(helper_template);
    29d2:	4638      	mov	r0, r7
    29d4:	47c8      	blx	r9
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    29d6:	b2c0      	uxtb	r0, r0
    29d8:	9001      	str	r0, [sp, #4]
    29da:	9700      	str	r7, [sp, #0]
    29dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    29e0:	aa0e      	add	r2, sp, #56	; 0x38
    29e2:	4631      	mov	r1, r6
    29e4:	9807      	ldr	r0, [sp, #28]
    29e6:	47d0      	blx	sl
	for(uint8_t i=0; i<1+16+16; i++){
    29e8:	2c20      	cmp	r4, #32
    29ea:	d9d1      	bls.n	2990 <grid_module_en16_reva_init+0x74>
    29ec:	2300      	movs	r3, #0
		
	}

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    29ee:	490e      	ldr	r1, [pc, #56]	; (2a28 <grid_module_en16_reva_init+0x10c>)
    29f0:	011a      	lsls	r2, r3, #4
    29f2:	5453      	strb	r3, [r2, r1]
    29f4:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    29f6:	2b10      	cmp	r3, #16
    29f8:	d1fa      	bne.n	29f0 <grid_module_en16_reva_init+0xd4>
	}
	
	
	grid_led_init(&grid_led_state, 16);
    29fa:	4d0c      	ldr	r5, [pc, #48]	; (2a2c <grid_module_en16_reva_init+0x110>)
    29fc:	2110      	movs	r1, #16
    29fe:	4628      	mov	r0, r5
    2a00:	4c0b      	ldr	r4, [pc, #44]	; (2a30 <grid_module_en16_reva_init+0x114>)
    2a02:	47a0      	blx	r4
	
	grid_module_en16_reva_hardware_init();
    2a04:	4b0b      	ldr	r3, [pc, #44]	; (2a34 <grid_module_en16_reva_init+0x118>)
    2a06:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    2a08:	4b0b      	ldr	r3, [pc, #44]	; (2a38 <grid_module_en16_reva_init+0x11c>)
    2a0a:	4798      	blx	r3
	grid_led_init(&grid_led_state, 16);
    2a0c:	2110      	movs	r1, #16
    2a0e:	4628      	mov	r0, r5
    2a10:	47a0      	blx	r4
	
}
    2a12:	b017      	add	sp, #92	; 0x5c
    2a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a18:	0000b2b1 	.word	0x0000b2b1
    2a1c:	0000bd4c 	.word	0x0000bd4c
    2a20:	0000b4d5 	.word	0x0000b4d5
    2a24:	0000bd30 	.word	0x0000bd30
    2a28:	20003954 	.word	0x20003954
    2a2c:	20003724 	.word	0x20003724
    2a30:	00001fb1 	.word	0x00001fb1
    2a34:	000028b9 	.word	0x000028b9
    2a38:	000024f9 	.word	0x000024f9
    2a3c:	0000b51d 	.word	0x0000b51d
    2a40:	0000bd14 	.word	0x0000bd14
    2a44:	00003a71 	.word	0x00003a71

00002a48 <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2a48:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2a4a:	4803      	ldr	r0, [pc, #12]	; (2a58 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2a4c:	4c03      	ldr	r4, [pc, #12]	; (2a5c <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2a4e:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2a50:	4803      	ldr	r0, [pc, #12]	; (2a60 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2a52:	47a0      	blx	r4
    2a54:	bd10      	pop	{r4, pc}
    2a56:	bf00      	nop
    2a58:	20000ff4 	.word	0x20000ff4
    2a5c:	0000404d 	.word	0x0000404d
    2a60:	200011c8 	.word	0x200011c8
    2a64:	00000000 	.word	0x00000000

00002a68 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2a68:	4ba1      	ldr	r3, [pc, #644]	; (2cf0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x288>)
    2a6a:	781b      	ldrb	r3, [r3, #0]
    2a6c:	b92b      	cbnz	r3, 2a7a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x12>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    2a6e:	4aa0      	ldr	r2, [pc, #640]	; (2cf0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x288>)
    2a70:	7813      	ldrb	r3, [r2, #0]
    2a72:	3301      	adds	r3, #1
    2a74:	b2db      	uxtb	r3, r3
    2a76:	7013      	strb	r3, [r2, #0]
    2a78:	4770      	bx	lr
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2a7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a7e:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    2a80:	4668      	mov	r0, sp
    2a82:	4b9c      	ldr	r3, [pc, #624]	; (2cf4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x28c>)
    2a84:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2a86:	4b9c      	ldr	r3, [pc, #624]	; (2cf8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x290>)
    2a88:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2a8c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2a90:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2a94:	4054      	eors	r4, r2
    2a96:	400c      	ands	r4, r1
    2a98:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2a9a:	4668      	mov	r0, sp
    2a9c:	4b97      	ldr	r3, [pc, #604]	; (2cfc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x294>)
    2a9e:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2aa0:	4b97      	ldr	r3, [pc, #604]	; (2d00 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2aa2:	685b      	ldr	r3, [r3, #4]
    2aa4:	68db      	ldr	r3, [r3, #12]
    2aa6:	781a      	ldrb	r2, [r3, #0]
    2aa8:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2aac:	4294      	cmp	r4, r2
    2aae:	d010      	beq.n	2ad2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x6a>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2ab0:	2a00      	cmp	r2, #0
    2ab2:	f040 8115 	bne.w	2ce0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x278>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
			mod->report_array[report_index].helper[0] = 1;
    2ab6:	2201      	movs	r2, #1
    2ab8:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    2aba:	2281      	movs	r2, #129	; 0x81
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    2abc:	4c90      	ldr	r4, [pc, #576]	; (2d00 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2abe:	6863      	ldr	r3, [r4, #4]
    2ac0:	6858      	ldr	r0, [r3, #4]
    2ac2:	2102      	movs	r1, #2
    2ac4:	3003      	adds	r0, #3
    2ac6:	4b8f      	ldr	r3, [pc, #572]	; (2d04 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>)
    2ac8:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    2aca:	2100      	movs	r1, #0
    2acc:	4620      	mov	r0, r4
    2ace:	4b8e      	ldr	r3, [pc, #568]	; (2d08 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    2ad0:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2ad2:	2300      	movs	r3, #0
    2ad4:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2ad8:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2adc:	4b8b      	ldr	r3, [pc, #556]	; (2d0c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a4>)
    2ade:	781a      	ldrb	r2, [r3, #0]
    2ae0:	3208      	adds	r2, #8
    2ae2:	498b      	ldr	r1, [pc, #556]	; (2d10 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    2ae4:	5c8e      	ldrb	r6, [r1, r2]
    2ae6:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2ae8:	781a      	ldrb	r2, [r3, #0]
    2aea:	b2d2      	uxtb	r2, r2
    2aec:	5c8d      	ldrb	r5, [r1, r2]
    2aee:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2af0:	781a      	ldrb	r2, [r3, #0]
    2af2:	3201      	adds	r2, #1
    2af4:	b2d2      	uxtb	r2, r2
    2af6:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2af8:	781a      	ldrb	r2, [r3, #0]
    2afa:	f002 0207 	and.w	r2, r2, #7
    2afe:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2b00:	781b      	ldrb	r3, [r3, #0]
	if (level) {
    2b02:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2b0a:	4b7b      	ldr	r3, [pc, #492]	; (2cf8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x290>)
    2b0c:	bf14      	ite	ne
    2b0e:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b12:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2b16:	4b7d      	ldr	r3, [pc, #500]	; (2d0c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a4>)
    2b18:	781b      	ldrb	r3, [r3, #0]
    2b1a:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2b22:	4b75      	ldr	r3, [pc, #468]	; (2cf8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x290>)
    2b24:	bf14      	ite	ne
    2b26:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b2a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2b2e:	4b77      	ldr	r3, [pc, #476]	; (2d0c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a4>)
    2b30:	781b      	ldrb	r3, [r3, #0]
    2b32:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2b3a:	4b6f      	ldr	r3, [pc, #444]	; (2cf8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x290>)
    2b3c:	bf14      	ite	ne
    2b3e:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b42:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2b46:	2302      	movs	r3, #2
    2b48:	f10d 0206 	add.w	r2, sp, #6
    2b4c:	2100      	movs	r1, #0
    2b4e:	4871      	ldr	r0, [pc, #452]	; (2d14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    2b50:	4c71      	ldr	r4, [pc, #452]	; (2d18 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2b52:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2b54:	2302      	movs	r3, #2
    2b56:	aa01      	add	r2, sp, #4
    2b58:	2100      	movs	r1, #0
    2b5a:	4870      	ldr	r0, [pc, #448]	; (2d1c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    2b5c:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2b5e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 2d24 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>
    2b62:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2b66:	47d8      	blx	fp
    2b68:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 2d28 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>
    2b6c:	a35e      	add	r3, pc, #376	; (adr r3, 2ce8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x280>)
    2b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b72:	47d0      	blx	sl
    2b74:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2d2c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>
    2b78:	47c8      	blx	r9
    2b7a:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2b7e:	42a0      	cmp	r0, r4
    2b80:	bf28      	it	cs
    2b82:	4620      	movcs	r0, r4
    2b84:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2b86:	fa1f f880 	uxth.w	r8, r0
    2b8a:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    2b8e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2b92:	47d8      	blx	fp
    2b94:	a354      	add	r3, pc, #336	; (adr r3, 2ce8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x280>)
    2b96:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b9a:	47d0      	blx	sl
    2b9c:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2b9e:	42a0      	cmp	r0, r4
    2ba0:	bf28      	it	cs
    2ba2:	4620      	movcs	r0, r4
    2ba4:	b280      	uxth	r0, r0
    2ba6:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2baa:	f1a5 0308 	sub.w	r3, r5, #8
    2bae:	b2db      	uxtb	r3, r3
    2bb0:	2b01      	cmp	r3, #1
    2bb2:	f240 808d 	bls.w	2cd0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x268>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2bb6:	2e0d      	cmp	r6, #13
    2bb8:	f240 80ba 	bls.w	2d30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>
		
		if (adcresult_0>10000){
    2bbc:	f242 7310 	movw	r3, #10000	; 0x2710
    2bc0:	4598      	cmp	r8, r3
			adcresult_0 = 0;
    2bc2:	bf8c      	ite	hi
    2bc4:	2300      	movhi	r3, #0
		}
		else{
			adcresult_0 = 127;
    2bc6:	237f      	movls	r3, #127	; 0x7f
    2bc8:	f8ad 3006 	strh.w	r3, [sp, #6]
		}
			
		if (adcresult_1>10000){
    2bcc:	f242 7310 	movw	r3, #10000	; 0x2710
    2bd0:	4298      	cmp	r0, r3
			adcresult_1 = 0;
    2bd2:	bf8c      	ite	hi
    2bd4:	2300      	movhi	r3, #0
		}
		else{
			adcresult_1 = 127;
    2bd6:	237f      	movls	r3, #127	; 0x7f
    2bd8:	f8ad 3004 	strh.w	r3, [sp, #4]
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_array[adc_index_0+1-4].helper[0]){
    2bdc:	f106 5480 	add.w	r4, r6, #268435456	; 0x10000000
    2be0:	3c03      	subs	r4, #3
    2be2:	0124      	lsls	r4, r4, #4
    2be4:	4b46      	ldr	r3, [pc, #280]	; (2d00 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2be6:	685b      	ldr	r3, [r3, #4]
    2be8:	4423      	add	r3, r4
    2bea:	68da      	ldr	r2, [r3, #12]
    2bec:	7812      	ldrb	r2, [r2, #0]
    2bee:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2bf2:	4291      	cmp	r1, r2
    2bf4:	d02f      	beq.n	2c56 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1ee>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2bf6:	2a00      	cmp	r2, #0
    2bf8:	bf0c      	ite	eq
    2bfa:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2bfe:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[5], 2, command);
    2c02:	6858      	ldr	r0, [r3, #4]
    2c04:	bf0c      	ite	eq
    2c06:	2290      	moveq	r2, #144	; 0x90
    2c08:	2280      	movne	r2, #128	; 0x80
    2c0a:	2102      	movs	r1, #2
    2c0c:	3005      	adds	r0, #5
    2c0e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2d04 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>
    2c12:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[7], 2, adc_index_0);
    2c14:	4f3a      	ldr	r7, [pc, #232]	; (2d00 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	4423      	add	r3, r4
    2c1a:	6858      	ldr	r0, [r3, #4]
    2c1c:	4632      	mov	r2, r6
    2c1e:	2102      	movs	r1, #2
    2c20:	3007      	adds	r0, #7
    2c22:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[9], 2, velocity);
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	4423      	add	r3, r4
    2c28:	6858      	ldr	r0, [r3, #4]
    2c2a:	464a      	mov	r2, r9
    2c2c:	2102      	movs	r1, #2
    2c2e:	3009      	adds	r0, #9
    2c30:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[21], 2, actuator);
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	4423      	add	r3, r4
    2c36:	6858      	ldr	r0, [r3, #4]
    2c38:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2c3c:	2102      	movs	r1, #2
    2c3e:	3015      	adds	r0, #21
    2c40:	47c0      	blx	r8
			mod->report_array[adc_index_0+1-4].helper[0] = velocity;
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	441c      	add	r4, r3
    2c46:	68e3      	ldr	r3, [r4, #12]
    2c48:	f883 9000 	strb.w	r9, [r3]
			
			grid_ui_report_set_changed_flag(mod, adc_index_0+1-4);
    2c4c:	1ef1      	subs	r1, r6, #3
    2c4e:	b2c9      	uxtb	r1, r1
    2c50:	4638      	mov	r0, r7
    2c52:	4b2d      	ldr	r3, [pc, #180]	; (2d08 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    2c54:	4798      	blx	r3
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_array[adc_index_1+1-4].helper[0]){
    2c56:	f105 5480 	add.w	r4, r5, #268435456	; 0x10000000
    2c5a:	3c03      	subs	r4, #3
    2c5c:	0124      	lsls	r4, r4, #4
    2c5e:	4b28      	ldr	r3, [pc, #160]	; (2d00 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2c60:	685b      	ldr	r3, [r3, #4]
    2c62:	4423      	add	r3, r4
    2c64:	68da      	ldr	r2, [r3, #12]
    2c66:	7812      	ldrb	r2, [r2, #0]
    2c68:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2c6c:	4291      	cmp	r1, r2
    2c6e:	d02f      	beq.n	2cd0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x268>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2c70:	2a00      	cmp	r2, #0
    2c72:	bf0c      	ite	eq
    2c74:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2c78:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[5], 2, command);
    2c7c:	6858      	ldr	r0, [r3, #4]
    2c7e:	bf0c      	ite	eq
    2c80:	2290      	moveq	r2, #144	; 0x90
    2c82:	2280      	movne	r2, #128	; 0x80
    2c84:	2102      	movs	r1, #2
    2c86:	3005      	adds	r0, #5
    2c88:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2d04 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>
    2c8c:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[7], 2, adc_index_0);
    2c8e:	4f1c      	ldr	r7, [pc, #112]	; (2d00 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x298>)
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	4423      	add	r3, r4
    2c94:	6858      	ldr	r0, [r3, #4]
    2c96:	4632      	mov	r2, r6
    2c98:	2102      	movs	r1, #2
    2c9a:	3007      	adds	r0, #7
    2c9c:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[9], 2, velocity);
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	4423      	add	r3, r4
    2ca2:	6858      	ldr	r0, [r3, #4]
    2ca4:	464a      	mov	r2, r9
    2ca6:	2102      	movs	r1, #2
    2ca8:	3009      	adds	r0, #9
    2caa:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[21], 2, actuator);
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	4423      	add	r3, r4
    2cb0:	6858      	ldr	r0, [r3, #4]
    2cb2:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2cb6:	2102      	movs	r1, #2
    2cb8:	3015      	adds	r0, #21
    2cba:	47c0      	blx	r8
			mod->report_array[adc_index_1+1-4].helper[0] = velocity;
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	441c      	add	r4, r3
    2cc0:	68e3      	ldr	r3, [r4, #12]
    2cc2:	f883 9000 	strb.w	r9, [r3]
			
			grid_ui_report_set_changed_flag(mod, adc_index_1+1-4);
    2cc6:	1ee9      	subs	r1, r5, #3
    2cc8:	b2c9      	uxtb	r1, r1
    2cca:	4638      	mov	r0, r7
    2ccc:	4b0e      	ldr	r3, [pc, #56]	; (2d08 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    2cce:	4798      	blx	r3
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    2cd0:	2200      	movs	r2, #0
    2cd2:	4b07      	ldr	r3, [pc, #28]	; (2cf0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x288>)
    2cd4:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    2cd6:	4b12      	ldr	r3, [pc, #72]	; (2d20 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2cd8:	4798      	blx	r3
}
    2cda:	b003      	add	sp, #12
    2cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod->report_array[report_index].helper[0] = 0;
    2ce0:	2200      	movs	r2, #0
    2ce2:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    2ce4:	2280      	movs	r2, #128	; 0x80
    2ce6:	e6e9      	b.n	2abc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x54>
    2ce8:	47ae147b 	.word	0x47ae147b
    2cec:	3ff07ae1 	.word	0x3ff07ae1
    2cf0:	20001774 	.word	0x20001774
    2cf4:	00004075 	.word	0x00004075
    2cf8:	41008000 	.word	0x41008000
    2cfc:	00004083 	.word	0x00004083
    2d00:	20001c98 	.word	0x20001c98
    2d04:	00003731 	.word	0x00003731
    2d08:	00003b37 	.word	0x00003b37
    2d0c:	20003720 	.word	0x20003720
    2d10:	20000334 	.word	0x20000334
    2d14:	20000ff4 	.word	0x20000ff4
    2d18:	00003f6d 	.word	0x00003f6d
    2d1c:	200011c8 	.word	0x200011c8
    2d20:	00002a49 	.word	0x00002a49
    2d24:	0000ad39 	.word	0x0000ad39
    2d28:	0000ae05 	.word	0x0000ae05
    2d2c:	0000b229 	.word	0x0000b229
		if (adc_index_1 == 0 || adc_index_1 == 1){
    2d30:	2d01      	cmp	r5, #1
    2d32:	d937      	bls.n	2da4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x33c>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    2d34:	b2b9      	uxth	r1, r7
    2d36:	4630      	mov	r0, r6
    2d38:	4c36      	ldr	r4, [pc, #216]	; (2e14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3ac>)
    2d3a:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    2d3c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2d40:	4628      	mov	r0, r5
    2d42:	47a0      	blx	r4
		if (grid_ain_get_changed(adc_index_0)){
    2d44:	4630      	mov	r0, r6
    2d46:	4b34      	ldr	r3, [pc, #208]	; (2e18 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b0>)
    2d48:	4798      	blx	r3
    2d4a:	2800      	cmp	r0, #0
    2d4c:	d139      	bne.n	2dc2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x35a>
		if (grid_ain_get_changed(adc_index_1)){
    2d4e:	4628      	mov	r0, r5
    2d50:	4b31      	ldr	r3, [pc, #196]	; (2e18 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b0>)
    2d52:	4798      	blx	r3
    2d54:	2800      	cmp	r0, #0
    2d56:	d0bb      	beq.n	2cd0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x268>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    2d58:	2107      	movs	r1, #7
    2d5a:	4628      	mov	r0, r5
    2d5c:	4b2f      	ldr	r3, [pc, #188]	; (2e1c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b4>)
    2d5e:	4798      	blx	r3
    2d60:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    2d62:	1c6f      	adds	r7, r5, #1
    2d64:	ea4f 1807 	mov.w	r8, r7, lsl #4
    2d68:	4c2d      	ldr	r4, [pc, #180]	; (2e20 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b8>)
    2d6a:	6863      	ldr	r3, [r4, #4]
    2d6c:	4443      	add	r3, r8
    2d6e:	6858      	ldr	r0, [r3, #4]
    2d70:	462a      	mov	r2, r5
    2d72:	2102      	movs	r1, #2
    2d74:	3007      	adds	r0, #7
    2d76:	4d2b      	ldr	r5, [pc, #172]	; (2e24 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3bc>)
    2d78:	47a8      	blx	r5
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, value);
    2d7a:	6863      	ldr	r3, [r4, #4]
    2d7c:	4443      	add	r3, r8
    2d7e:	6858      	ldr	r0, [r3, #4]
    2d80:	b2f2      	uxtb	r2, r6
    2d82:	2102      	movs	r1, #2
    2d84:	3009      	adds	r0, #9
    2d86:	47a8      	blx	r5
			uint8_t actuator = 2*value;
    2d88:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    2d8a:	6863      	ldr	r3, [r4, #4]
    2d8c:	4443      	add	r3, r8
    2d8e:	6858      	ldr	r0, [r3, #4]
    2d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2d94:	2102      	movs	r1, #2
    2d96:	3015      	adds	r0, #21
    2d98:	47a8      	blx	r5
			grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    2d9a:	b2f9      	uxtb	r1, r7
    2d9c:	4620      	mov	r0, r4
    2d9e:	4b22      	ldr	r3, [pc, #136]	; (2e28 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c0>)
    2da0:	4798      	blx	r3
    2da2:	e795      	b.n	2cd0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x268>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    2da4:	b2b9      	uxth	r1, r7
    2da6:	f64f 78ff 	movw	r8, #65535	; 0xffff
    2daa:	eba8 0101 	sub.w	r1, r8, r1
    2dae:	4630      	mov	r0, r6
    2db0:	4c18      	ldr	r4, [pc, #96]	; (2e14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3ac>)
    2db2:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    2db4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2db8:	eba8 0101 	sub.w	r1, r8, r1
    2dbc:	4628      	mov	r0, r5
    2dbe:	47a0      	blx	r4
    2dc0:	e7c0      	b.n	2d44 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    2dc2:	2107      	movs	r1, #7
    2dc4:	4630      	mov	r0, r6
    2dc6:	4b15      	ldr	r3, [pc, #84]	; (2e1c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b4>)
    2dc8:	4798      	blx	r3
    2dca:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    2dcc:	f106 0801 	add.w	r8, r6, #1
    2dd0:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2dd4:	4c12      	ldr	r4, [pc, #72]	; (2e20 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b8>)
    2dd6:	6863      	ldr	r3, [r4, #4]
    2dd8:	444b      	add	r3, r9
    2dda:	6858      	ldr	r0, [r3, #4]
    2ddc:	4632      	mov	r2, r6
    2dde:	2102      	movs	r1, #2
    2de0:	3007      	adds	r0, #7
    2de2:	4e10      	ldr	r6, [pc, #64]	; (2e24 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3bc>)
    2de4:	47b0      	blx	r6
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, value);
    2de6:	6863      	ldr	r3, [r4, #4]
    2de8:	444b      	add	r3, r9
    2dea:	6858      	ldr	r0, [r3, #4]
    2dec:	b2fa      	uxtb	r2, r7
    2dee:	2102      	movs	r1, #2
    2df0:	3009      	adds	r0, #9
    2df2:	47b0      	blx	r6
			uint8_t actuator = 2*value;
    2df4:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    2df6:	6863      	ldr	r3, [r4, #4]
    2df8:	444b      	add	r3, r9
    2dfa:	6858      	ldr	r0, [r3, #4]
    2dfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2e00:	2102      	movs	r1, #2
    2e02:	3015      	adds	r0, #21
    2e04:	47b0      	blx	r6
			grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    2e06:	fa5f f188 	uxtb.w	r1, r8
    2e0a:	4620      	mov	r0, r4
    2e0c:	4b06      	ldr	r3, [pc, #24]	; (2e28 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c0>)
    2e0e:	4798      	blx	r3
    2e10:	e79d      	b.n	2d4e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e6>
    2e12:	bf00      	nop
    2e14:	00001015 	.word	0x00001015
    2e18:	00001111 	.word	0x00001111
    2e1c:	00001121 	.word	0x00001121
    2e20:	20001c98 	.word	0x20001c98
    2e24:	00003731 	.word	0x00003731
    2e28:	00003b37 	.word	0x00003b37

00002e2c <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    2e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    2e2e:	4f0b      	ldr	r7, [pc, #44]	; (2e5c <grid_module_pbf4_reva_hardware_init+0x30>)
    2e30:	4c0b      	ldr	r4, [pc, #44]	; (2e60 <grid_module_pbf4_reva_hardware_init+0x34>)
    2e32:	463b      	mov	r3, r7
    2e34:	2200      	movs	r2, #0
    2e36:	4611      	mov	r1, r2
    2e38:	4620      	mov	r0, r4
    2e3a:	4e0a      	ldr	r6, [pc, #40]	; (2e64 <grid_module_pbf4_reva_hardware_init+0x38>)
    2e3c:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    2e3e:	4d0a      	ldr	r5, [pc, #40]	; (2e68 <grid_module_pbf4_reva_hardware_init+0x3c>)
    2e40:	463b      	mov	r3, r7
    2e42:	2200      	movs	r2, #0
    2e44:	4611      	mov	r1, r2
    2e46:	4628      	mov	r0, r5
    2e48:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    2e4a:	2100      	movs	r1, #0
    2e4c:	4620      	mov	r0, r4
    2e4e:	4c07      	ldr	r4, [pc, #28]	; (2e6c <grid_module_pbf4_reva_hardware_init+0x40>)
    2e50:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    2e52:	2100      	movs	r1, #0
    2e54:	4628      	mov	r0, r5
    2e56:	47a0      	blx	r4
    2e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e5a:	bf00      	nop
    2e5c:	00002a69 	.word	0x00002a69
    2e60:	20000ff4 	.word	0x20000ff4
    2e64:	00003eed 	.word	0x00003eed
    2e68:	200011c8 	.word	0x200011c8
    2e6c:	00003ead 	.word	0x00003ead

00002e70 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    2e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e74:	b09a      	sub	sp, #104	; 0x68
    2e76:	4607      	mov	r7, r0
	
	grid_ui_model_init(mod, 13);
    2e78:	210d      	movs	r1, #13
    2e7a:	4b33      	ldr	r3, [pc, #204]	; (2f48 <grid_module_pbf4_reva_init+0xd8>)
    2e7c:	4798      	blx	r3
	
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<mod->report_length; i++){
    2e7e:	783b      	ldrb	r3, [r7, #0]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d04f      	beq.n	2f24 <grid_module_pbf4_reva_init+0xb4>
    2e84:	2400      	movs	r4, #0
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2e86:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 2f70 <grid_module_pbf4_reva_init+0x100>
    2e8a:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 2f74 <grid_module_pbf4_reva_init+0x104>
    2e8e:	e029      	b.n	2ee4 <grid_module_pbf4_reva_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    2e90:	2303      	movs	r3, #3
    2e92:	9303      	str	r3, [sp, #12]
    2e94:	2339      	movs	r3, #57	; 0x39
    2e96:	9302      	str	r3, [sp, #8]
    2e98:	2383      	movs	r3, #131	; 0x83
    2e9a:	9301      	str	r3, [sp, #4]
    2e9c:	2380      	movs	r3, #128	; 0x80
    2e9e:	9300      	str	r3, [sp, #0]
    2ea0:	2301      	movs	r3, #1
    2ea2:	2202      	movs	r2, #2
    2ea4:	4929      	ldr	r1, [pc, #164]	; (2f4c <grid_module_pbf4_reva_init+0xdc>)
    2ea6:	a812      	add	r0, sp, #72	; 0x48
    2ea8:	47c8      	blx	r9
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    2eaa:	a812      	add	r0, sp, #72	; 0x48
    2eac:	4e28      	ldr	r6, [pc, #160]	; (2f50 <grid_module_pbf4_reva_init+0xe0>)
    2eae:	47b0      	blx	r6
    2eb0:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    2eb2:	ad0d      	add	r5, sp, #52	; 0x34
    2eb4:	4b27      	ldr	r3, [pc, #156]	; (2f54 <grid_module_pbf4_reva_init+0xe4>)
    2eb6:	681b      	ldr	r3, [r3, #0]
    2eb8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2ebc:	0c1b      	lsrs	r3, r3, #16
    2ebe:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		
		uint8_t helper_length = strlen(helper_template);
    2ec2:	4628      	mov	r0, r5
    2ec4:	47b0      	blx	r6

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2ec6:	b2c0      	uxtb	r0, r0
    2ec8:	9001      	str	r0, [sp, #4]
    2eca:	9500      	str	r5, [sp, #0]
    2ecc:	fa5f f388 	uxtb.w	r3, r8
    2ed0:	aa12      	add	r2, sp, #72	; 0x48
    2ed2:	4621      	mov	r1, r4
    2ed4:	4638      	mov	r0, r7
    2ed6:	4d20      	ldr	r5, [pc, #128]	; (2f58 <grid_module_pbf4_reva_init+0xe8>)
    2ed8:	47a8      	blx	r5
	for(uint8_t i=0; i<mod->report_length; i++){
    2eda:	3401      	adds	r4, #1
    2edc:	b2e4      	uxtb	r4, r4
    2ede:	783b      	ldrb	r3, [r7, #0]
    2ee0:	42a3      	cmp	r3, r4
    2ee2:	d91f      	bls.n	2f24 <grid_module_pbf4_reva_init+0xb4>
		if (i == 0){
    2ee4:	2c00      	cmp	r4, #0
    2ee6:	d0d3      	beq.n	2e90 <grid_module_pbf4_reva_init+0x20>
		else if (i<9){ // PORENTIOMETERS & FADERS
    2ee8:	2c08      	cmp	r4, #8
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2eea:	f104 30ff 	add.w	r0, r4, #4294967295
    2eee:	f04f 0103 	mov.w	r1, #3
    2ef2:	910b      	str	r1, [sp, #44]	; 0x2c
    2ef4:	f04f 0300 	mov.w	r3, #0
    2ef8:	930a      	str	r3, [sp, #40]	; 0x28
    2efa:	9009      	str	r0, [sp, #36]	; 0x24
    2efc:	f04f 0263 	mov.w	r2, #99	; 0x63
    2f00:	9208      	str	r2, [sp, #32]
    2f02:	9307      	str	r3, [sp, #28]
    2f04:	9106      	str	r1, [sp, #24]
    2f06:	f04f 0202 	mov.w	r2, #2
    2f0a:	9205      	str	r2, [sp, #20]
    2f0c:	9104      	str	r1, [sp, #16]
    2f0e:	9303      	str	r3, [sp, #12]
    2f10:	9002      	str	r0, [sp, #8]
    2f12:	bf94      	ite	ls
    2f14:	21b0      	movls	r1, #176	; 0xb0
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2f16:	2190      	movhi	r1, #144	; 0x90
    2f18:	9101      	str	r1, [sp, #4]
    2f1a:	9300      	str	r3, [sp, #0]
    2f1c:	4651      	mov	r1, sl
    2f1e:	a812      	add	r0, sp, #72	; 0x48
    2f20:	47c8      	blx	r9
    2f22:	e7c2      	b.n	2eaa <grid_module_pbf4_reva_init+0x3a>
		
	}
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    2f24:	2307      	movs	r3, #7
    2f26:	220e      	movs	r2, #14
    2f28:	2105      	movs	r1, #5
    2f2a:	2010      	movs	r0, #16
    2f2c:	4c0b      	ldr	r4, [pc, #44]	; (2f5c <grid_module_pbf4_reva_init+0xec>)
    2f2e:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    2f30:	210c      	movs	r1, #12
    2f32:	480b      	ldr	r0, [pc, #44]	; (2f60 <grid_module_pbf4_reva_init+0xf0>)
    2f34:	4b0b      	ldr	r3, [pc, #44]	; (2f64 <grid_module_pbf4_reva_init+0xf4>)
    2f36:	4798      	blx	r3
	
	grid_module_pbf4_reva_hardware_init();
    2f38:	4b0b      	ldr	r3, [pc, #44]	; (2f68 <grid_module_pbf4_reva_init+0xf8>)
    2f3a:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    2f3c:	4b0b      	ldr	r3, [pc, #44]	; (2f6c <grid_module_pbf4_reva_init+0xfc>)
    2f3e:	4798      	blx	r3
	
    2f40:	b01a      	add	sp, #104	; 0x68
    2f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f46:	bf00      	nop
    2f48:	00003a59 	.word	0x00003a59
    2f4c:	0000bcfc 	.word	0x0000bcfc
    2f50:	0000b51d 	.word	0x0000b51d
    2f54:	0000bd14 	.word	0x0000bd14
    2f58:	00003a71 	.word	0x00003a71
    2f5c:	00000fc9 	.word	0x00000fc9
    2f60:	20003724 	.word	0x20003724
    2f64:	00001fb1 	.word	0x00001fb1
    2f68:	00002e2d 	.word	0x00002e2d
    2f6c:	00002a49 	.word	0x00002a49
    2f70:	0000bd18 	.word	0x0000bd18
    2f74:	0000b4d5 	.word	0x0000b4d5

00002f78 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    2f78:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2f7a:	4803      	ldr	r0, [pc, #12]	; (2f88 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    2f7c:	4c03      	ldr	r4, [pc, #12]	; (2f8c <grid_module_po16_revb_hardware_start_transfer+0x14>)
    2f7e:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2f80:	4803      	ldr	r0, [pc, #12]	; (2f90 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    2f82:	47a0      	blx	r4
    2f84:	bd10      	pop	{r4, pc}
    2f86:	bf00      	nop
    2f88:	20000ff4 	.word	0x20000ff4
    2f8c:	0000404d 	.word	0x0000404d
    2f90:	200011c8 	.word	0x200011c8
    2f94:	00000000 	.word	0x00000000

00002f98 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    2f98:	4b8d      	ldr	r3, [pc, #564]	; (31d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x238>)
    2f9a:	781b      	ldrb	r3, [r3, #0]
    2f9c:	b92b      	cbnz	r3, 2faa <grid_module_po16_revb_hardware_transfer_complete_cb+0x12>
		grid_module_po16_revb_hardware_transfer_complete++;
    2f9e:	4a8c      	ldr	r2, [pc, #560]	; (31d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x238>)
    2fa0:	7813      	ldrb	r3, [r2, #0]
    2fa2:	3301      	adds	r3, #1
    2fa4:	b2db      	uxtb	r3, r3
    2fa6:	7013      	strb	r3, [r2, #0]
    2fa8:	4770      	bx	lr
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    2faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2fae:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    2fb0:	4668      	mov	r0, sp
    2fb2:	4b88      	ldr	r3, [pc, #544]	; (31d4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x23c>)
    2fb4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2fb6:	4b88      	ldr	r3, [pc, #544]	; (31d8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x240>)
    2fb8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2fbc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2fc0:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2fc4:	4054      	eors	r4, r2
    2fc6:	400c      	ands	r4, r1
    2fc8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2fca:	4668      	mov	r0, sp
    2fcc:	4b83      	ldr	r3, [pc, #524]	; (31dc <grid_module_po16_revb_hardware_transfer_complete_cb+0x244>)
    2fce:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2fd0:	4b83      	ldr	r3, [pc, #524]	; (31e0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    2fd2:	685b      	ldr	r3, [r3, #4]
    2fd4:	68db      	ldr	r3, [r3, #12]
    2fd6:	781a      	ldrb	r2, [r3, #0]
    2fd8:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2fdc:	4294      	cmp	r4, r2
    2fde:	d010      	beq.n	3002 <grid_module_po16_revb_hardware_transfer_complete_cb+0x6a>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2fe0:	2a00      	cmp	r2, #0
    2fe2:	f040 8090 	bne.w	3106 <grid_module_po16_revb_hardware_transfer_complete_cb+0x16e>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
			mod->report_array[report_index].helper[0] = 1;
    2fe6:	2201      	movs	r2, #1
    2fe8:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    2fea:	2281      	movs	r2, #129	; 0x81
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    2fec:	4c7c      	ldr	r4, [pc, #496]	; (31e0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    2fee:	6863      	ldr	r3, [r4, #4]
    2ff0:	6858      	ldr	r0, [r3, #4]
    2ff2:	2102      	movs	r1, #2
    2ff4:	3003      	adds	r0, #3
    2ff6:	4b7b      	ldr	r3, [pc, #492]	; (31e4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>)
    2ff8:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    2ffa:	2100      	movs	r1, #0
    2ffc:	4620      	mov	r0, r4
    2ffe:	4b7a      	ldr	r3, [pc, #488]	; (31e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    3000:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3002:	2300      	movs	r3, #0
    3004:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    3008:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    300c:	4b70      	ldr	r3, [pc, #448]	; (31d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x238>)
    300e:	785a      	ldrb	r2, [r3, #1]
    3010:	3208      	adds	r2, #8
    3012:	4976      	ldr	r1, [pc, #472]	; (31ec <grid_module_po16_revb_hardware_transfer_complete_cb+0x254>)
    3014:	5c8d      	ldrb	r5, [r1, r2]
    3016:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    3018:	785a      	ldrb	r2, [r3, #1]
    301a:	b2d2      	uxtb	r2, r2
    301c:	5c8c      	ldrb	r4, [r1, r2]
    301e:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    3020:	785a      	ldrb	r2, [r3, #1]
    3022:	3201      	adds	r2, #1
    3024:	b2d2      	uxtb	r2, r2
    3026:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    3028:	785a      	ldrb	r2, [r3, #1]
    302a:	f002 0207 	and.w	r2, r2, #7
    302e:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    3030:	785b      	ldrb	r3, [r3, #1]
	if (level) {
    3032:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3036:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    303a:	4b67      	ldr	r3, [pc, #412]	; (31d8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x240>)
    303c:	bf14      	ite	ne
    303e:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3042:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    3046:	4b62      	ldr	r3, [pc, #392]	; (31d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x238>)
    3048:	785b      	ldrb	r3, [r3, #1]
    304a:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    304e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3052:	4b61      	ldr	r3, [pc, #388]	; (31d8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x240>)
    3054:	bf14      	ite	ne
    3056:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    305a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    305e:	4b5c      	ldr	r3, [pc, #368]	; (31d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x238>)
    3060:	785b      	ldrb	r3, [r3, #1]
    3062:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3066:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    306a:	4b5b      	ldr	r3, [pc, #364]	; (31d8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x240>)
    306c:	bf14      	ite	ne
    306e:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3072:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    3076:	2302      	movs	r3, #2
    3078:	f10d 0206 	add.w	r2, sp, #6
    307c:	2100      	movs	r1, #0
    307e:	485c      	ldr	r0, [pc, #368]	; (31f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    3080:	4e5c      	ldr	r6, [pc, #368]	; (31f4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x25c>)
    3082:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    3084:	2302      	movs	r3, #2
    3086:	aa01      	add	r2, sp, #4
    3088:	2100      	movs	r1, #0
    308a:	485b      	ldr	r0, [pc, #364]	; (31f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    308c:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    308e:	f8df a17c 	ldr.w	sl, [pc, #380]	; 320c <grid_module_po16_revb_hardware_transfer_complete_cb+0x274>
    3092:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    3096:	47d0      	blx	sl
    3098:	f8df 9174 	ldr.w	r9, [pc, #372]	; 3210 <grid_module_po16_revb_hardware_transfer_complete_cb+0x278>
    309c:	a34a      	add	r3, pc, #296	; (adr r3, 31c8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x230>)
    309e:	e9d3 2300 	ldrd	r2, r3, [r3]
    30a2:	47c8      	blx	r9
    30a4:	f8df 816c 	ldr.w	r8, [pc, #364]	; 3214 <grid_module_po16_revb_hardware_transfer_complete_cb+0x27c>
    30a8:	47c0      	blx	r8
    30aa:	f64f 76ff 	movw	r6, #65535	; 0xffff
    30ae:	42b0      	cmp	r0, r6
    30b0:	bf28      	it	cs
    30b2:	4630      	movcs	r0, r6
    30b4:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    30b6:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    30ba:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    30be:	47d0      	blx	sl
    30c0:	a341      	add	r3, pc, #260	; (adr r3, 31c8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x230>)
    30c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    30c6:	47c8      	blx	r9
    30c8:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    30ca:	42b0      	cmp	r0, r6
    30cc:	bf28      	it	cs
    30ce:	4630      	movcs	r0, r6
    30d0:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    30d4:	b2b9      	uxth	r1, r7
    30d6:	4628      	mov	r0, r5
    30d8:	4e48      	ldr	r6, [pc, #288]	; (31fc <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>)
    30da:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    30dc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    30e0:	4620      	mov	r0, r4
    30e2:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    30e4:	4628      	mov	r0, r5
    30e6:	4b46      	ldr	r3, [pc, #280]	; (3200 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>)
    30e8:	4798      	blx	r3
    30ea:	b980      	cbnz	r0, 310e <grid_module_po16_revb_hardware_transfer_complete_cb+0x176>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    30ec:	4620      	mov	r0, r4
    30ee:	4b44      	ldr	r3, [pc, #272]	; (3200 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>)
    30f0:	4798      	blx	r3
    30f2:	2800      	cmp	r0, #0
    30f4:	d13a      	bne.n	316c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d4>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    30f6:	2200      	movs	r2, #0
    30f8:	4b35      	ldr	r3, [pc, #212]	; (31d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x238>)
    30fa:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    30fc:	4b41      	ldr	r3, [pc, #260]	; (3204 <grid_module_po16_revb_hardware_transfer_complete_cb+0x26c>)
    30fe:	4798      	blx	r3
}
    3100:	b002      	add	sp, #8
    3102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			mod->report_array[report_index].helper[0] = 0;
    3106:	2200      	movs	r2, #0
    3108:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    310a:	2280      	movs	r2, #128	; 0x80
    310c:	e76e      	b.n	2fec <grid_module_po16_revb_hardware_transfer_complete_cb+0x54>
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    310e:	2107      	movs	r1, #7
    3110:	4628      	mov	r0, r5
    3112:	4b3d      	ldr	r3, [pc, #244]	; (3208 <grid_module_po16_revb_hardware_transfer_complete_cb+0x270>)
    3114:	4798      	blx	r3
    3116:	fa5f f880 	uxtb.w	r8, r0
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    311a:	f105 0901 	add.w	r9, r5, #1
    311e:	ea4f 1709 	mov.w	r7, r9, lsl #4
    3122:	4e2f      	ldr	r6, [pc, #188]	; (31e0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    3124:	6873      	ldr	r3, [r6, #4]
    3126:	443b      	add	r3, r7
    3128:	6858      	ldr	r0, [r3, #4]
    312a:	462a      	mov	r2, r5
    312c:	2102      	movs	r1, #2
    312e:	3007      	adds	r0, #7
    3130:	4d2c      	ldr	r5, [pc, #176]	; (31e4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>)
    3132:	47a8      	blx	r5
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, value);
    3134:	6873      	ldr	r3, [r6, #4]
    3136:	443b      	add	r3, r7
    3138:	6858      	ldr	r0, [r3, #4]
    313a:	4642      	mov	r2, r8
    313c:	2102      	movs	r1, #2
    313e:	3009      	adds	r0, #9
    3140:	47a8      	blx	r5
		uint8_t actuator = 2*value;
    3142:	ea4f 0248 	mov.w	r2, r8, lsl #1
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    3146:	6873      	ldr	r3, [r6, #4]
    3148:	443b      	add	r3, r7
    314a:	6858      	ldr	r0, [r3, #4]
    314c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3150:	2102      	movs	r1, #2
    3152:	3015      	adds	r0, #21
    3154:	47a8      	blx	r5
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    3156:	fa5f f189 	uxtb.w	r1, r9
    315a:	4630      	mov	r0, r6
    315c:	4b22      	ldr	r3, [pc, #136]	; (31e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    315e:	4798      	blx	r3
		mod->report_array[adc_index_0+1].helper[0] = value;
    3160:	6873      	ldr	r3, [r6, #4]
    3162:	441f      	add	r7, r3
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	f883 8000 	strb.w	r8, [r3]
    316a:	e7bf      	b.n	30ec <grid_module_po16_revb_hardware_transfer_complete_cb+0x154>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    316c:	2107      	movs	r1, #7
    316e:	4620      	mov	r0, r4
    3170:	4b25      	ldr	r3, [pc, #148]	; (3208 <grid_module_po16_revb_hardware_transfer_complete_cb+0x270>)
    3172:	4798      	blx	r3
    3174:	b2c7      	uxtb	r7, r0
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    3176:	f104 0801 	add.w	r8, r4, #1
    317a:	ea4f 1608 	mov.w	r6, r8, lsl #4
    317e:	4d18      	ldr	r5, [pc, #96]	; (31e0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    3180:	686b      	ldr	r3, [r5, #4]
    3182:	4433      	add	r3, r6
    3184:	6858      	ldr	r0, [r3, #4]
    3186:	4622      	mov	r2, r4
    3188:	2102      	movs	r1, #2
    318a:	3007      	adds	r0, #7
    318c:	4c15      	ldr	r4, [pc, #84]	; (31e4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>)
    318e:	47a0      	blx	r4
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, value);
    3190:	686b      	ldr	r3, [r5, #4]
    3192:	4433      	add	r3, r6
    3194:	6858      	ldr	r0, [r3, #4]
    3196:	463a      	mov	r2, r7
    3198:	2102      	movs	r1, #2
    319a:	3009      	adds	r0, #9
    319c:	47a0      	blx	r4
		uint8_t actuator = 2*value;
    319e:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    31a0:	686b      	ldr	r3, [r5, #4]
    31a2:	4433      	add	r3, r6
    31a4:	6858      	ldr	r0, [r3, #4]
    31a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    31aa:	2102      	movs	r1, #2
    31ac:	3015      	adds	r0, #21
    31ae:	47a0      	blx	r4
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    31b0:	fa5f f188 	uxtb.w	r1, r8
    31b4:	4628      	mov	r0, r5
    31b6:	4b0c      	ldr	r3, [pc, #48]	; (31e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    31b8:	4798      	blx	r3
		mod->report_array[adc_index_1+1].helper[0] = value;
    31ba:	686b      	ldr	r3, [r5, #4]
    31bc:	441e      	add	r6, r3
    31be:	68f3      	ldr	r3, [r6, #12]
    31c0:	701f      	strb	r7, [r3, #0]
    31c2:	e798      	b.n	30f6 <grid_module_po16_revb_hardware_transfer_complete_cb+0x15e>
    31c4:	f3af 8000 	nop.w
    31c8:	47ae147b 	.word	0x47ae147b
    31cc:	3ff07ae1 	.word	0x3ff07ae1
    31d0:	20000656 	.word	0x20000656
    31d4:	00004075 	.word	0x00004075
    31d8:	41008000 	.word	0x41008000
    31dc:	00004083 	.word	0x00004083
    31e0:	20001c98 	.word	0x20001c98
    31e4:	00003731 	.word	0x00003731
    31e8:	00003b37 	.word	0x00003b37
    31ec:	20000344 	.word	0x20000344
    31f0:	20000ff4 	.word	0x20000ff4
    31f4:	00003f6d 	.word	0x00003f6d
    31f8:	200011c8 	.word	0x200011c8
    31fc:	00001015 	.word	0x00001015
    3200:	00001111 	.word	0x00001111
    3204:	00002f79 	.word	0x00002f79
    3208:	00001121 	.word	0x00001121
    320c:	0000ad39 	.word	0x0000ad39
    3210:	0000ae05 	.word	0x0000ae05
    3214:	0000b229 	.word	0x0000b229

00003218 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    3218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    321a:	4f0b      	ldr	r7, [pc, #44]	; (3248 <grid_module_po16_revb_hardware_init+0x30>)
    321c:	4c0b      	ldr	r4, [pc, #44]	; (324c <grid_module_po16_revb_hardware_init+0x34>)
    321e:	463b      	mov	r3, r7
    3220:	2200      	movs	r2, #0
    3222:	4611      	mov	r1, r2
    3224:	4620      	mov	r0, r4
    3226:	4e0a      	ldr	r6, [pc, #40]	; (3250 <grid_module_po16_revb_hardware_init+0x38>)
    3228:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    322a:	4d0a      	ldr	r5, [pc, #40]	; (3254 <grid_module_po16_revb_hardware_init+0x3c>)
    322c:	463b      	mov	r3, r7
    322e:	2200      	movs	r2, #0
    3230:	4611      	mov	r1, r2
    3232:	4628      	mov	r0, r5
    3234:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    3236:	2100      	movs	r1, #0
    3238:	4620      	mov	r0, r4
    323a:	4c07      	ldr	r4, [pc, #28]	; (3258 <grid_module_po16_revb_hardware_init+0x40>)
    323c:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    323e:	2100      	movs	r1, #0
    3240:	4628      	mov	r0, r5
    3242:	47a0      	blx	r4
    3244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3246:	bf00      	nop
    3248:	00002f99 	.word	0x00002f99
    324c:	20000ff4 	.word	0x20000ff4
    3250:	00003eed 	.word	0x00003eed
    3254:	200011c8 	.word	0x200011c8
    3258:	00003ead 	.word	0x00003ead

0000325c <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    325c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3260:	b09d      	sub	sp, #116	; 0x74
    3262:	900d      	str	r0, [sp, #52]	; 0x34
	

	grid_ui_model_init(mod, 17);
    3264:	2111      	movs	r1, #17
    3266:	4b39      	ldr	r3, [pc, #228]	; (334c <grid_module_po16_revb_init+0xf0>)
    3268:	4798      	blx	r3
    326a:	2501      	movs	r5, #1
    326c:	2400      	movs	r4, #0
			);
			
		}
		else{
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    326e:	f8df b104 	ldr.w	fp, [pc, #260]	; 3374 <grid_module_po16_revb_init+0x118>
    3272:	f8df a104 	ldr.w	sl, [pc, #260]	; 3378 <grid_module_po16_revb_init+0x11c>
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    3276:	4f36      	ldr	r7, [pc, #216]	; (3350 <grid_module_po16_revb_init+0xf4>)
    3278:	e026      	b.n	32c8 <grid_module_po16_revb_init+0x6c>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    327a:	2303      	movs	r3, #3
    327c:	9303      	str	r3, [sp, #12]
    327e:	2339      	movs	r3, #57	; 0x39
    3280:	9302      	str	r3, [sp, #8]
    3282:	2383      	movs	r3, #131	; 0x83
    3284:	9301      	str	r3, [sp, #4]
    3286:	2380      	movs	r3, #128	; 0x80
    3288:	9300      	str	r3, [sp, #0]
    328a:	2301      	movs	r3, #1
    328c:	2202      	movs	r2, #2
    328e:	4931      	ldr	r1, [pc, #196]	; (3354 <grid_module_po16_revb_init+0xf8>)
    3290:	a814      	add	r0, sp, #80	; 0x50
    3292:	47d0      	blx	sl
		uint8_t payload_length = strlen(payload_template);
    3294:	a814      	add	r0, sp, #80	; 0x50
    3296:	47b8      	blx	r7
    3298:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    329a:	ae0f      	add	r6, sp, #60	; 0x3c
    329c:	4b2e      	ldr	r3, [pc, #184]	; (3358 <grid_module_po16_revb_init+0xfc>)
    329e:	681b      	ldr	r3, [r3, #0]
    32a0:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    32a4:	0c1b      	lsrs	r3, r3, #16
    32a6:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		
		uint8_t helper_length = strlen(helper_template);
    32aa:	4630      	mov	r0, r6
    32ac:	47b8      	blx	r7

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    32ae:	b2c0      	uxtb	r0, r0
    32b0:	9001      	str	r0, [sp, #4]
    32b2:	9600      	str	r6, [sp, #0]
    32b4:	fa5f f388 	uxtb.w	r3, r8
    32b8:	aa14      	add	r2, sp, #80	; 0x50
    32ba:	2100      	movs	r1, #0
    32bc:	980d      	ldr	r0, [sp, #52]	; 0x34
    32be:	4e27      	ldr	r6, [pc, #156]	; (335c <grid_module_po16_revb_init+0x100>)
    32c0:	47b0      	blx	r6
    32c2:	3401      	adds	r4, #1
    32c4:	3501      	adds	r5, #1
    32c6:	b2ed      	uxtb	r5, r5
		if (i == 0){
    32c8:	f014 08ff 	ands.w	r8, r4, #255	; 0xff
    32cc:	d0d5      	beq.n	327a <grid_module_po16_revb_init+0x1e>
    32ce:	1e60      	subs	r0, r4, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    32d0:	2103      	movs	r1, #3
    32d2:	910b      	str	r1, [sp, #44]	; 0x2c
    32d4:	2300      	movs	r3, #0
    32d6:	930a      	str	r3, [sp, #40]	; 0x28
    32d8:	9009      	str	r0, [sp, #36]	; 0x24
    32da:	2263      	movs	r2, #99	; 0x63
    32dc:	9208      	str	r2, [sp, #32]
    32de:	9307      	str	r3, [sp, #28]
    32e0:	9106      	str	r1, [sp, #24]
    32e2:	2202      	movs	r2, #2
    32e4:	9205      	str	r2, [sp, #20]
    32e6:	9104      	str	r1, [sp, #16]
    32e8:	9303      	str	r3, [sp, #12]
    32ea:	9002      	str	r0, [sp, #8]
    32ec:	21b0      	movs	r1, #176	; 0xb0
    32ee:	9101      	str	r1, [sp, #4]
    32f0:	9300      	str	r3, [sp, #0]
    32f2:	4659      	mov	r1, fp
    32f4:	a814      	add	r0, sp, #80	; 0x50
    32f6:	47d0      	blx	sl
		uint8_t payload_length = strlen(payload_template);
    32f8:	a814      	add	r0, sp, #80	; 0x50
    32fa:	47b8      	blx	r7
    32fc:	4681      	mov	r9, r0
		sprintf(helper_template, "00"); // LASTVALUE
    32fe:	ae0f      	add	r6, sp, #60	; 0x3c
    3300:	4b15      	ldr	r3, [pc, #84]	; (3358 <grid_module_po16_revb_init+0xfc>)
    3302:	681b      	ldr	r3, [r3, #0]
    3304:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    3308:	0c1b      	lsrs	r3, r3, #16
    330a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		uint8_t helper_length = strlen(helper_template);
    330e:	4630      	mov	r0, r6
    3310:	47b8      	blx	r7
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    3312:	b2c0      	uxtb	r0, r0
    3314:	9001      	str	r0, [sp, #4]
    3316:	9600      	str	r6, [sp, #0]
    3318:	fa5f f389 	uxtb.w	r3, r9
    331c:	aa14      	add	r2, sp, #80	; 0x50
    331e:	4641      	mov	r1, r8
    3320:	980d      	ldr	r0, [sp, #52]	; 0x34
    3322:	4e0e      	ldr	r6, [pc, #56]	; (335c <grid_module_po16_revb_init+0x100>)
    3324:	47b0      	blx	r6
	for(uint8_t i=0; i<17; i++){
    3326:	2d10      	cmp	r5, #16
    3328:	d9cb      	bls.n	32c2 <grid_module_po16_revb_init+0x66>
	

		
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    332a:	2307      	movs	r3, #7
    332c:	220e      	movs	r2, #14
    332e:	2105      	movs	r1, #5
    3330:	2010      	movs	r0, #16
    3332:	4c0b      	ldr	r4, [pc, #44]	; (3360 <grid_module_po16_revb_init+0x104>)
    3334:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 16);
    3336:	2110      	movs	r1, #16
    3338:	480a      	ldr	r0, [pc, #40]	; (3364 <grid_module_po16_revb_init+0x108>)
    333a:	4b0b      	ldr	r3, [pc, #44]	; (3368 <grid_module_po16_revb_init+0x10c>)
    333c:	4798      	blx	r3
	
	grid_module_po16_revb_hardware_init();
    333e:	4b0b      	ldr	r3, [pc, #44]	; (336c <grid_module_po16_revb_init+0x110>)
    3340:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    3342:	4b0b      	ldr	r3, [pc, #44]	; (3370 <grid_module_po16_revb_init+0x114>)
    3344:	4798      	blx	r3
	
    3346:	b01d      	add	sp, #116	; 0x74
    3348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    334c:	00003a59 	.word	0x00003a59
    3350:	0000b51d 	.word	0x0000b51d
    3354:	0000bcfc 	.word	0x0000bcfc
    3358:	0000bd14 	.word	0x0000bd14
    335c:	00003a71 	.word	0x00003a71
    3360:	00000fc9 	.word	0x00000fc9
    3364:	20003724 	.word	0x20003724
    3368:	00001fb1 	.word	0x00001fb1
    336c:	00003219 	.word	0x00003219
    3370:	00002f79 	.word	0x00002f79
    3374:	0000bd18 	.word	0x0000bd18
    3378:	0000b4d5 	.word	0x0000b4d5

0000337c <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    337c:	8982      	ldrh	r2, [r0, #12]
    337e:	b142      	cbz	r2, 3392 <tx_cb_USART_GRID+0x16>
    3380:	f100 0327 	add.w	r3, r0, #39	; 0x27
    3384:	3227      	adds	r2, #39	; 0x27
    3386:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    3388:	2100      	movs	r1, #0
    338a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    338e:	4293      	cmp	r3, r2
    3390:	d1fb      	bne.n	338a <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    3392:	2300      	movs	r3, #0
    3394:	8183      	strh	r3, [r0, #12]
    3396:	4770      	bx	lr

00003398 <tx_cb_USART_GRID_W>:
{
    3398:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    339a:	4802      	ldr	r0, [pc, #8]	; (33a4 <tx_cb_USART_GRID_W+0xc>)
    339c:	4b02      	ldr	r3, [pc, #8]	; (33a8 <tx_cb_USART_GRID_W+0x10>)
    339e:	4798      	blx	r3
    33a0:	bd08      	pop	{r3, pc}
    33a2:	bf00      	nop
    33a4:	200022c8 	.word	0x200022c8
    33a8:	0000337d 	.word	0x0000337d

000033ac <tx_cb_USART_GRID_S>:
{
    33ac:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    33ae:	4802      	ldr	r0, [pc, #8]	; (33b8 <tx_cb_USART_GRID_S+0xc>)
    33b0:	4b02      	ldr	r3, [pc, #8]	; (33bc <tx_cb_USART_GRID_S+0x10>)
    33b2:	4798      	blx	r3
    33b4:	bd08      	pop	{r3, pc}
    33b6:	bf00      	nop
    33b8:	200027ec 	.word	0x200027ec
    33bc:	0000337d 	.word	0x0000337d

000033c0 <tx_cb_USART_GRID_E>:
{
    33c0:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    33c2:	4802      	ldr	r0, [pc, #8]	; (33cc <tx_cb_USART_GRID_E+0xc>)
    33c4:	4b02      	ldr	r3, [pc, #8]	; (33d0 <tx_cb_USART_GRID_E+0x10>)
    33c6:	4798      	blx	r3
    33c8:	bd08      	pop	{r3, pc}
    33ca:	bf00      	nop
    33cc:	20003210 	.word	0x20003210
    33d0:	0000337d 	.word	0x0000337d

000033d4 <tx_cb_USART_GRID_N>:
{
    33d4:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    33d6:	4802      	ldr	r0, [pc, #8]	; (33e0 <tx_cb_USART_GRID_N+0xc>)
    33d8:	4b02      	ldr	r3, [pc, #8]	; (33e4 <tx_cb_USART_GRID_N+0x10>)
    33da:	4798      	blx	r3
    33dc:	bd08      	pop	{r3, pc}
    33de:	bf00      	nop
    33e0:	20001238 	.word	0x20001238
    33e4:	0000337d 	.word	0x0000337d

000033e8 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    33e8:	b508      	push	{r3, lr}
    33ea:	7a83      	ldrb	r3, [r0, #10]
    33ec:	011b      	lsls	r3, r3, #4
    33ee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    33f2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    33f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    33f8:	f022 0202 	bic.w	r2, r2, #2
    33fc:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    33fe:	2100      	movs	r1, #0
    3400:	7a80      	ldrb	r0, [r0, #10]
    3402:	4b01      	ldr	r3, [pc, #4]	; (3408 <grid_sys_port_reset_dma+0x20>)
    3404:	4798      	blx	r3
    3406:	bd08      	pop	{r3, pc}
    3408:	00005a9d 	.word	0x00005a9d

0000340c <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    340c:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    340e:	4802      	ldr	r0, [pc, #8]	; (3418 <dma_transfer_complete_w_cb+0xc>)
    3410:	4b02      	ldr	r3, [pc, #8]	; (341c <dma_transfer_complete_w_cb+0x10>)
    3412:	4798      	blx	r3
    3414:	bd08      	pop	{r3, pc}
    3416:	bf00      	nop
    3418:	200022c8 	.word	0x200022c8
    341c:	000033e9 	.word	0x000033e9

00003420 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    3420:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3422:	4802      	ldr	r0, [pc, #8]	; (342c <dma_transfer_complete_s_cb+0xc>)
    3424:	4b02      	ldr	r3, [pc, #8]	; (3430 <dma_transfer_complete_s_cb+0x10>)
    3426:	4798      	blx	r3
    3428:	bd08      	pop	{r3, pc}
    342a:	bf00      	nop
    342c:	200027ec 	.word	0x200027ec
    3430:	000033e9 	.word	0x000033e9

00003434 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    3434:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3436:	4802      	ldr	r0, [pc, #8]	; (3440 <dma_transfer_complete_e_cb+0xc>)
    3438:	4b02      	ldr	r3, [pc, #8]	; (3444 <dma_transfer_complete_e_cb+0x10>)
    343a:	4798      	blx	r3
    343c:	bd08      	pop	{r3, pc}
    343e:	bf00      	nop
    3440:	20003210 	.word	0x20003210
    3444:	000033e9 	.word	0x000033e9

00003448 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    3448:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    344a:	4802      	ldr	r0, [pc, #8]	; (3454 <dma_transfer_complete_n_cb+0xc>)
    344c:	4b02      	ldr	r3, [pc, #8]	; (3458 <dma_transfer_complete_n_cb+0x10>)
    344e:	4798      	blx	r3
    3450:	bd08      	pop	{r3, pc}
    3452:	bf00      	nop
    3454:	20001238 	.word	0x20001238
    3458:	000033e9 	.word	0x000033e9

0000345c <grid_sys_uart_init>:

}

void grid_sys_uart_init(){
    345c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3460:	4b2f      	ldr	r3, [pc, #188]	; (3520 <grid_sys_uart_init+0xc4>)
    3462:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3466:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    346a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    346e:	f042 0204 	orr.w	r2, r2, #4
    3472:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3476:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    347a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    347e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3482:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    3486:	f042 0204 	orr.w	r2, r2, #4
    348a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    348e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3496:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    349a:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    349e:	f042 0204 	orr.w	r2, r2, #4
    34a2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34a6:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    34aa:	f44f 7100 	mov.w	r1, #512	; 0x200
    34ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    34b2:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    34b6:	f042 0204 	orr.w	r2, r2, #4
    34ba:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34be:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	


	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    34c2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 355c <grid_sys_uart_init+0x100>
    34c6:	4a17      	ldr	r2, [pc, #92]	; (3524 <grid_sys_uart_init+0xc8>)
    34c8:	2101      	movs	r1, #1
    34ca:	4640      	mov	r0, r8
    34cc:	4c16      	ldr	r4, [pc, #88]	; (3528 <grid_sys_uart_init+0xcc>)
    34ce:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    34d0:	4f16      	ldr	r7, [pc, #88]	; (352c <grid_sys_uart_init+0xd0>)
    34d2:	4a17      	ldr	r2, [pc, #92]	; (3530 <grid_sys_uart_init+0xd4>)
    34d4:	2101      	movs	r1, #1
    34d6:	4638      	mov	r0, r7
    34d8:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    34da:	4e16      	ldr	r6, [pc, #88]	; (3534 <grid_sys_uart_init+0xd8>)
    34dc:	4a16      	ldr	r2, [pc, #88]	; (3538 <grid_sys_uart_init+0xdc>)
    34de:	2101      	movs	r1, #1
    34e0:	4630      	mov	r0, r6
    34e2:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    34e4:	4d15      	ldr	r5, [pc, #84]	; (353c <grid_sys_uart_init+0xe0>)
    34e6:	4a16      	ldr	r2, [pc, #88]	; (3540 <grid_sys_uart_init+0xe4>)
    34e8:	2101      	movs	r1, #1
    34ea:	4628      	mov	r0, r5
    34ec:	47a0      	blx	r4
	//  	usart_async_register_callback(&USART_NORTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_N);
	//  	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
	//  	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
	//  	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);
	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    34ee:	4915      	ldr	r1, [pc, #84]	; (3544 <grid_sys_uart_init+0xe8>)
    34f0:	4640      	mov	r0, r8
    34f2:	4c15      	ldr	r4, [pc, #84]	; (3548 <grid_sys_uart_init+0xec>)
    34f4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    34f6:	4915      	ldr	r1, [pc, #84]	; (354c <grid_sys_uart_init+0xf0>)
    34f8:	4638      	mov	r0, r7
    34fa:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    34fc:	4914      	ldr	r1, [pc, #80]	; (3550 <grid_sys_uart_init+0xf4>)
    34fe:	4630      	mov	r0, r6
    3500:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    3502:	4914      	ldr	r1, [pc, #80]	; (3554 <grid_sys_uart_init+0xf8>)
    3504:	4628      	mov	r0, r5
    3506:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    3508:	4640      	mov	r0, r8
    350a:	4c13      	ldr	r4, [pc, #76]	; (3558 <grid_sys_uart_init+0xfc>)
    350c:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    350e:	4638      	mov	r0, r7
    3510:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    3512:	4630      	mov	r0, r6
    3514:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    3516:	4628      	mov	r0, r5
    3518:	47a0      	blx	r4
    351a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    351e:	bf00      	nop
    3520:	41008000 	.word	0x41008000
    3524:	000033d5 	.word	0x000033d5
    3528:	00004c45 	.word	0x00004c45
    352c:	20001020 	.word	0x20001020
    3530:	000033c1 	.word	0x000033c1
    3534:	20001178 	.word	0x20001178
    3538:	000033ad 	.word	0x000033ad
    353c:	20001128 	.word	0x20001128
    3540:	00003399 	.word	0x00003399
    3544:	20001ca0 	.word	0x20001ca0
    3548:	00004c1d 	.word	0x00004c1d
    354c:	200027d8 	.word	0x200027d8
    3550:	20002cfc 	.word	0x20002cfc
    3554:	2000374c 	.word	0x2000374c
    3558:	00004bf1 	.word	0x00004bf1
    355c:	20001074 	.word	0x20001074

00003560 <grid_rx_dma_init_one>:



}

void grid_rx_dma_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    3560:	b5f0      	push	{r4, r5, r6, r7, lr}
    3562:	b083      	sub	sp, #12
    3564:	4605      	mov	r5, r0
    3566:	460f      	mov	r7, r1
    3568:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    356a:	7a84      	ldrb	r4, [r0, #10]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    356c:	6843      	ldr	r3, [r0, #4]
    356e:	6a19      	ldr	r1, [r3, #32]
    3570:	3128      	adds	r1, #40	; 0x28
    3572:	4620      	mov	r0, r4
    3574:	4b0d      	ldr	r3, [pc, #52]	; (35ac <grid_rx_dma_init_one+0x4c>)
    3576:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3578:	f505 7120 	add.w	r1, r5, #640	; 0x280
    357c:	4620      	mov	r0, r4
    357e:	4b0c      	ldr	r3, [pc, #48]	; (35b0 <grid_rx_dma_init_one+0x50>)
    3580:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    3582:	4639      	mov	r1, r7
    3584:	4620      	mov	r0, r4
    3586:	4b0b      	ldr	r3, [pc, #44]	; (35b4 <grid_rx_dma_init_one+0x54>)
    3588:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    358a:	4621      	mov	r1, r4
    358c:	a801      	add	r0, sp, #4
    358e:	4b0a      	ldr	r3, [pc, #40]	; (35b8 <grid_rx_dma_init_one+0x58>)
    3590:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    3592:	9b01      	ldr	r3, [sp, #4]
    3594:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    3596:	2201      	movs	r2, #1
    3598:	2100      	movs	r1, #0
    359a:	4620      	mov	r0, r4
    359c:	4b07      	ldr	r3, [pc, #28]	; (35bc <grid_rx_dma_init_one+0x5c>)
    359e:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    35a0:	2100      	movs	r1, #0
    35a2:	4620      	mov	r0, r4
    35a4:	4b06      	ldr	r3, [pc, #24]	; (35c0 <grid_rx_dma_init_one+0x60>)
    35a6:	4798      	blx	r3
	

}
    35a8:	b003      	add	sp, #12
    35aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35ac:	00005a19 	.word	0x00005a19
    35b0:	00005a09 	.word	0x00005a09
    35b4:	00005a45 	.word	0x00005a45
    35b8:	00005add 	.word	0x00005add
    35bc:	000059b5 	.word	0x000059b5
    35c0:	00005a9d 	.word	0x00005a9d

000035c4 <grid_rx_dma_init>:

void grid_rx_dma_init(){
    35c4:	b510      	push	{r4, lr}
	
	grid_rx_dma_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    35c6:	4a10      	ldr	r2, [pc, #64]	; (3608 <grid_rx_dma_init+0x44>)
    35c8:	f44f 7116 	mov.w	r1, #600	; 0x258
    35cc:	480f      	ldr	r0, [pc, #60]	; (360c <grid_rx_dma_init+0x48>)
    35ce:	4c10      	ldr	r4, [pc, #64]	; (3610 <grid_rx_dma_init+0x4c>)
    35d0:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    35d2:	4a10      	ldr	r2, [pc, #64]	; (3614 <grid_rx_dma_init+0x50>)
    35d4:	f44f 7116 	mov.w	r1, #600	; 0x258
    35d8:	480f      	ldr	r0, [pc, #60]	; (3618 <grid_rx_dma_init+0x54>)
    35da:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    35dc:	4a0f      	ldr	r2, [pc, #60]	; (361c <grid_rx_dma_init+0x58>)
    35de:	f44f 7116 	mov.w	r1, #600	; 0x258
    35e2:	480f      	ldr	r0, [pc, #60]	; (3620 <grid_rx_dma_init+0x5c>)
    35e4:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    35e6:	4a0f      	ldr	r2, [pc, #60]	; (3624 <grid_rx_dma_init+0x60>)
    35e8:	f44f 7116 	mov.w	r1, #600	; 0x258
    35ec:	480e      	ldr	r0, [pc, #56]	; (3628 <grid_rx_dma_init+0x64>)
    35ee:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    35f0:	4b0e      	ldr	r3, [pc, #56]	; (362c <grid_rx_dma_init+0x68>)
    35f2:	2200      	movs	r2, #0
    35f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    35f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    35fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    3600:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    3604:	bd10      	pop	{r4, pc}
    3606:	bf00      	nop
    3608:	00003449 	.word	0x00003449
    360c:	20001238 	.word	0x20001238
    3610:	00003561 	.word	0x00003561
    3614:	00003435 	.word	0x00003435
    3618:	20003210 	.word	0x20003210
    361c:	00003421 	.word	0x00003421
    3620:	200027ec 	.word	0x200027ec
    3624:	0000340d 	.word	0x0000340d
    3628:	200022c8 	.word	0x200022c8
    362c:	e000e100 	.word	0xe000e100

00003630 <grid_sys_rtc_get_time>:



uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    3630:	68c0      	ldr	r0, [r0, #12]
    3632:	4770      	bx	lr

00003634 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t told){
	
	if (mod->realtime>told){
    3634:	68c0      	ldr	r0, [r0, #12]
    3636:	4288      	cmp	r0, r1
		return mod->realtime-told;
    3638:	bf8e      	itee	hi
    363a:	1a40      	subhi	r0, r0, r1
	}
	else{
		return (1<<32)-1 - told + mod->realtime;
    363c:	43c9      	mvnls	r1, r1
    363e:	1840      	addls	r0, r0, r1
	}
	

}
    3640:	4770      	bx	lr

00003642 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    3642:	68c3      	ldr	r3, [r0, #12]
    3644:	3301      	adds	r3, #1
    3646:	60c3      	str	r3, [r0, #12]
    3648:	4770      	bx	lr

0000364a <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    364a:	7a00      	ldrb	r0, [r0, #8]
    364c:	4770      	bx	lr

0000364e <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    364e:	2300      	movs	r3, #0
    3650:	7203      	strb	r3, [r0, #8]
    3652:	4770      	bx	lr

00003654 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    3654:	7983      	ldrb	r3, [r0, #6]
    3656:	b123      	cbz	r3, 3662 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    3658:	2b01      	cmp	r3, #1
    365a:	d00f      	beq.n	367c <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    365c:	2b02      	cmp	r3, #2
    365e:	d015      	beq.n	368c <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3660:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    3662:	8880      	ldrh	r0, [r0, #4]
    3664:	0840      	lsrs	r0, r0, #1
    3666:	387d      	subs	r0, #125	; 0x7d
    3668:	2800      	cmp	r0, #0
    366a:	bfb8      	it	lt
    366c:	4240      	neglt	r0, r0
    366e:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    3672:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3676:	f3c0 0047 	ubfx	r0, r0, #1, #8
    367a:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    367c:	8880      	ldrh	r0, [r0, #4]
    367e:	4b06      	ldr	r3, [pc, #24]	; (3698 <grid_sys_alert_get_color_intensity+0x44>)
    3680:	fba3 3000 	umull	r3, r0, r3, r0
    3684:	f340 1000 	sbfx	r0, r0, #4, #1
    3688:	b2c0      	uxtb	r0, r0
    368a:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    368c:	8880      	ldrh	r0, [r0, #4]
    368e:	2864      	cmp	r0, #100	; 0x64
    3690:	bf8c      	ite	hi
    3692:	20ff      	movhi	r0, #255	; 0xff
    3694:	2000      	movls	r0, #0
    3696:	4770      	bx	lr
    3698:	10624dd3 	.word	0x10624dd3

0000369c <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    369c:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    369e:	2401      	movs	r4, #1
    36a0:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    36a2:	7001      	strb	r1, [r0, #0]
	mod->alert_color_green = green;
    36a4:	7042      	strb	r2, [r0, #1]
	mod->alert_color_blue = blue;
    36a6:	7083      	strb	r3, [r0, #2]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    36a8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    36ac:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    36ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
    36b2:	7183      	strb	r3, [r0, #6]
	
}
    36b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    36b8:	4770      	bx	lr

000036ba <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    36ba:	7800      	ldrb	r0, [r0, #0]
    36bc:	4770      	bx	lr

000036be <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    36be:	7840      	ldrb	r0, [r0, #1]
    36c0:	4770      	bx	lr

000036c2 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    36c2:	7880      	ldrb	r0, [r0, #2]
    36c4:	4770      	bx	lr

000036c6 <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    36c6:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    36c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    36cc:	b2d8      	uxtb	r0, r3
    36ce:	2809      	cmp	r0, #9
    36d0:	d90d      	bls.n	36ee <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    36d2:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    36d6:	b2db      	uxtb	r3, r3
    36d8:	2b05      	cmp	r3, #5
    36da:	d903      	bls.n	36e4 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    36dc:	b131      	cbz	r1, 36ec <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    36de:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    36e0:	2000      	movs	r0, #0
    36e2:	4770      	bx	lr
		result = ascii - 97 + 10;
    36e4:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    36e8:	b2c0      	uxtb	r0, r0
    36ea:	4770      	bx	lr
	uint8_t result = 0;
    36ec:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    36ee:	4770      	bx	lr

000036f0 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    36f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    36f4:	b1c1      	cbz	r1, 3728 <grid_sys_read_hex_string_value+0x38>
    36f6:	4690      	mov	r8, r2
    36f8:	1e45      	subs	r5, r0, #1
    36fa:	1e4b      	subs	r3, r1, #1
    36fc:	009c      	lsls	r4, r3, #2
    36fe:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3702:	3f02      	subs	r7, #2
    3704:	b2db      	uxtb	r3, r3
    3706:	1aff      	subs	r7, r7, r3
    3708:	00bf      	lsls	r7, r7, #2
    370a:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    370c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 372c <grid_sys_read_hex_string_value+0x3c>
    3710:	4641      	mov	r1, r8
    3712:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    3716:	47c8      	blx	r9
    3718:	40a0      	lsls	r0, r4
    371a:	4406      	add	r6, r0
    371c:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    371e:	42bc      	cmp	r4, r7
    3720:	d1f6      	bne.n	3710 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3722:	4630      	mov	r0, r6
    3724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    3728:	2600      	movs	r6, #0
	return result;
    372a:	e7fa      	b.n	3722 <grid_sys_read_hex_string_value+0x32>
    372c:	000036c7 	.word	0x000036c7

00003730 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    3730:	b530      	push	{r4, r5, lr}
    3732:	b085      	sub	sp, #20
    3734:	4605      	mov	r5, r0
    3736:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    3738:	4909      	ldr	r1, [pc, #36]	; (3760 <grid_sys_write_hex_string_value+0x30>)
    373a:	a801      	add	r0, sp, #4
    373c:	4b09      	ldr	r3, [pc, #36]	; (3764 <grid_sys_write_hex_string_value+0x34>)
    373e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    3740:	b164      	cbz	r4, 375c <grid_sys_write_hex_string_value+0x2c>
    3742:	ab04      	add	r3, sp, #16
    3744:	1b1a      	subs	r2, r3, r4
    3746:	3a05      	subs	r2, #5
    3748:	1e6b      	subs	r3, r5, #1
    374a:	1e60      	subs	r0, r4, #1
    374c:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3750:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3754:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    3758:	4283      	cmp	r3, r0
    375a:	d1f9      	bne.n	3750 <grid_sys_write_hex_string_value+0x20>
	}

}
    375c:	b005      	add	sp, #20
    375e:	bd30      	pop	{r4, r5, pc}
    3760:	0000bd64 	.word	0x0000bd64
    3764:	0000b4d5 	.word	0x0000b4d5

00003768 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    3768:	4b34      	ldr	r3, [pc, #208]	; (383c <grid_sys_get_hwcfg+0xd4>)
    376a:	681b      	ldr	r3, [r3, #0]
    376c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3770:	d002      	beq.n	3778 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3772:	4b32      	ldr	r3, [pc, #200]	; (383c <grid_sys_get_hwcfg+0xd4>)
    3774:	6818      	ldr	r0, [r3, #0]
    3776:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    3778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    377c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    377e:	4b30      	ldr	r3, [pc, #192]	; (3840 <grid_sys_get_hwcfg+0xd8>)
    3780:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3788:	492e      	ldr	r1, [pc, #184]	; (3844 <grid_sys_get_hwcfg+0xdc>)
    378a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    378e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3792:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3796:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    379a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    379e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    37a2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    37a6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    37aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    37ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    37b2:	4925      	ldr	r1, [pc, #148]	; (3848 <grid_sys_get_hwcfg+0xe0>)
    37b4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    37b8:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    37bc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    37c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    37c4:	2001      	movs	r0, #1
    37c6:	4b21      	ldr	r3, [pc, #132]	; (384c <grid_sys_get_hwcfg+0xe4>)
    37c8:	4798      	blx	r3
    37ca:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    37cc:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    37ce:	4d1c      	ldr	r5, [pc, #112]	; (3840 <grid_sys_get_hwcfg+0xd8>)
    37d0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    37d4:	4f1d      	ldr	r7, [pc, #116]	; (384c <grid_sys_get_hwcfg+0xe4>)
    37d6:	e00c      	b.n	37f2 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    37d8:	2e07      	cmp	r6, #7
    37da:	d027      	beq.n	382c <grid_sys_get_hwcfg+0xc4>
    37dc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    37e0:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    37e4:	2001      	movs	r0, #1
    37e6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    37e8:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    37ec:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    37ee:	2e08      	cmp	r6, #8
    37f0:	d01c      	beq.n	382c <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    37f2:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    37f6:	2001      	movs	r0, #1
    37f8:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    37fa:	a801      	add	r0, sp, #4
    37fc:	4b14      	ldr	r3, [pc, #80]	; (3850 <grid_sys_get_hwcfg+0xe8>)
    37fe:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3800:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3804:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3808:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    380c:	405c      	eors	r4, r3
    380e:	4014      	ands	r4, r2
    3810:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3812:	a801      	add	r0, sp, #4
    3814:	4b0f      	ldr	r3, [pc, #60]	; (3854 <grid_sys_get_hwcfg+0xec>)
    3816:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    3818:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    381c:	d0dc      	beq.n	37d8 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    381e:	2301      	movs	r3, #1
    3820:	40b3      	lsls	r3, r6
    3822:	ea43 0808 	orr.w	r8, r3, r8
    3826:	fa5f f888 	uxtb.w	r8, r8
    382a:	e7d5      	b.n	37d8 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    382c:	4b03      	ldr	r3, [pc, #12]	; (383c <grid_sys_get_hwcfg+0xd4>)
    382e:	f8c3 8000 	str.w	r8, [r3]
}
    3832:	4b02      	ldr	r3, [pc, #8]	; (383c <grid_sys_get_hwcfg+0xd4>)
    3834:	6818      	ldr	r0, [r3, #0]
    3836:	b003      	add	sp, #12
    3838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    383c:	20000354 	.word	0x20000354
    3840:	41008000 	.word	0x41008000
    3844:	40002000 	.word	0x40002000
    3848:	40028000 	.word	0x40028000
    384c:	000040f5 	.word	0x000040f5
    3850:	00004075 	.word	0x00004075
    3854:	00004083 	.word	0x00004083

00003858 <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    3858:	2903      	cmp	r1, #3
    385a:	d009      	beq.n	3870 <grid_msg_get_checksum+0x18>
    385c:	1e43      	subs	r3, r0, #1
    385e:	3904      	subs	r1, #4
    3860:	4401      	add	r1, r0
    3862:	2000      	movs	r0, #0
		checksum ^= str[i];
    3864:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3868:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    386a:	428b      	cmp	r3, r1
    386c:	d1fa      	bne.n	3864 <grid_msg_get_checksum+0xc>
    386e:	4770      	bx	lr
	uint8_t checksum = 0;
    3870:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    3872:	4770      	bx	lr

00003874 <grid_msg_set_checksum>:

void grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    3874:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3876:	1ecb      	subs	r3, r1, #3
    3878:	2102      	movs	r1, #2
    387a:	4418      	add	r0, r3
    387c:	4b01      	ldr	r3, [pc, #4]	; (3884 <grid_msg_set_checksum+0x10>)
    387e:	4798      	blx	r3
    3880:	bd08      	pop	{r3, pc}
    3882:	bf00      	nop
    3884:	00003731 	.word	0x00003731

00003888 <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3888:	b500      	push	{lr}
    388a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    388c:	aa02      	add	r2, sp, #8
    388e:	2300      	movs	r3, #0
    3890:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3894:	2102      	movs	r1, #2
    3896:	3004      	adds	r0, #4
    3898:	4b02      	ldr	r3, [pc, #8]	; (38a4 <grid_msg_get_id+0x1c>)
    389a:	4798      	blx	r3
	
}
    389c:	b2c0      	uxtb	r0, r0
    389e:	b003      	add	sp, #12
    38a0:	f85d fb04 	ldr.w	pc, [sp], #4
    38a4:	000036f1 	.word	0x000036f1

000038a8 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    38a8:	b500      	push	{lr}
    38aa:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    38ac:	aa02      	add	r2, sp, #8
    38ae:	2300      	movs	r3, #0
    38b0:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    38b4:	2102      	movs	r1, #2
    38b6:	3006      	adds	r0, #6
    38b8:	4b02      	ldr	r3, [pc, #8]	; (38c4 <grid_msg_get_dx+0x1c>)
    38ba:	4798      	blx	r3
	
}
    38bc:	b2c0      	uxtb	r0, r0
    38be:	b003      	add	sp, #12
    38c0:	f85d fb04 	ldr.w	pc, [sp], #4
    38c4:	000036f1 	.word	0x000036f1

000038c8 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    38c8:	b500      	push	{lr}
    38ca:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    38cc:	aa02      	add	r2, sp, #8
    38ce:	2300      	movs	r3, #0
    38d0:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    38d4:	2102      	movs	r1, #2
    38d6:	3008      	adds	r0, #8
    38d8:	4b02      	ldr	r3, [pc, #8]	; (38e4 <grid_msg_get_dy+0x1c>)
    38da:	4798      	blx	r3

}
    38dc:	b2c0      	uxtb	r0, r0
    38de:	b003      	add	sp, #12
    38e0:	f85d fb04 	ldr.w	pc, [sp], #4
    38e4:	000036f1 	.word	0x000036f1

000038e8 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    38e8:	b500      	push	{lr}
    38ea:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    38ec:	aa02      	add	r2, sp, #8
    38ee:	2300      	movs	r3, #0
    38f0:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    38f4:	2102      	movs	r1, #2
    38f6:	300a      	adds	r0, #10
    38f8:	4b02      	ldr	r3, [pc, #8]	; (3904 <grid_msg_get_age+0x1c>)
    38fa:	4798      	blx	r3
	
}
    38fc:	b2c0      	uxtb	r0, r0
    38fe:	b003      	add	sp, #12
    3900:	f85d fb04 	ldr.w	pc, [sp], #4
    3904:	000036f1 	.word	0x000036f1

00003908 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3908:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    390a:	460a      	mov	r2, r1
    390c:	2102      	movs	r1, #2
    390e:	3004      	adds	r0, #4
    3910:	4b01      	ldr	r3, [pc, #4]	; (3918 <grid_msg_set_id+0x10>)
    3912:	4798      	blx	r3
    3914:	bd08      	pop	{r3, pc}
    3916:	bf00      	nop
    3918:	00003731 	.word	0x00003731

0000391c <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    391c:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    391e:	460a      	mov	r2, r1
    3920:	2102      	movs	r1, #2
    3922:	3006      	adds	r0, #6
    3924:	4b01      	ldr	r3, [pc, #4]	; (392c <grid_msg_set_dx+0x10>)
    3926:	4798      	blx	r3
    3928:	bd08      	pop	{r3, pc}
    392a:	bf00      	nop
    392c:	00003731 	.word	0x00003731

00003930 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    3930:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    3932:	460a      	mov	r2, r1
    3934:	2102      	movs	r1, #2
    3936:	3008      	adds	r0, #8
    3938:	4b01      	ldr	r3, [pc, #4]	; (3940 <grid_msg_set_dy+0x10>)
    393a:	4798      	blx	r3
    393c:	bd08      	pop	{r3, pc}
    393e:	bf00      	nop
    3940:	00003731 	.word	0x00003731

00003944 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    3944:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    3946:	460a      	mov	r2, r1
    3948:	2102      	movs	r1, #2
    394a:	300a      	adds	r0, #10
    394c:	4b01      	ldr	r3, [pc, #4]	; (3954 <grid_msg_set_age+0x10>)
    394e:	4798      	blx	r3
    3950:	bd08      	pop	{r3, pc}
    3952:	bf00      	nop
    3954:	00003731 	.word	0x00003731

00003958 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    3958:	6903      	ldr	r3, [r0, #16]
    395a:	4299      	cmp	r1, r3
    395c:	d00e      	beq.n	397c <grid_msg_find_recent+0x24>
    395e:	2301      	movs	r3, #1
    3960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    3964:	3204      	adds	r2, #4
    3966:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    396a:	428a      	cmp	r2, r1
    396c:	d008      	beq.n	3980 <grid_msg_find_recent+0x28>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    396e:	3301      	adds	r3, #1
    3970:	b2db      	uxtb	r3, r3
    3972:	f013 0f80 	tst.w	r3, #128	; 0x80
    3976:	d0f3      	beq.n	3960 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    3978:	2000      	movs	r0, #0
    397a:	4770      	bx	lr
			return 1;
    397c:	2001      	movs	r0, #1
    397e:	4770      	bx	lr
    3980:	2001      	movs	r0, #1
}
    3982:	4770      	bx	lr

00003984 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3984:	f890 3210 	ldrb.w	r3, [r0, #528]	; 0x210
    3988:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    398a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    398e:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3992:	3304      	adds	r3, #4
    3994:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    3998:	4770      	bx	lr
	...

0000399c <grid_sys_ping>:
}




void grid_sys_ping(struct grid_port* por){
    399c:	b5f0      	push	{r4, r5, r6, r7, lr}
    399e:	b085      	sub	sp, #20
    39a0:	4605      	mov	r5, r0
		
		
	uint8_t length = 16;
	uint32_t hwcfg = grid_sys_get_hwcfg();
    39a2:	4b27      	ldr	r3, [pc, #156]	; (3a40 <grid_sys_ping+0xa4>)
    39a4:	4798      	blx	r3
	char message[16] = {GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction, '0','0','0','0','0','0','0','0',GRID_MSG_END_OF_TRANSMISSION,'0','0','\n'};
    39a6:	2301      	movs	r3, #1
    39a8:	f88d 3000 	strb.w	r3, [sp]
    39ac:	230e      	movs	r3, #14
    39ae:	f88d 3001 	strb.w	r3, [sp, #1]
    39b2:	2307      	movs	r3, #7
    39b4:	f88d 3002 	strb.w	r3, [sp, #2]
    39b8:	7a6b      	ldrb	r3, [r5, #9]
    39ba:	f88d 3003 	strb.w	r3, [sp, #3]
    39be:	2330      	movs	r3, #48	; 0x30
    39c0:	f88d 3004 	strb.w	r3, [sp, #4]
    39c4:	f88d 3005 	strb.w	r3, [sp, #5]
    39c8:	f88d 3006 	strb.w	r3, [sp, #6]
    39cc:	f88d 3007 	strb.w	r3, [sp, #7]
    39d0:	f88d 3008 	strb.w	r3, [sp, #8]
    39d4:	f88d 3009 	strb.w	r3, [sp, #9]
    39d8:	f88d 300a 	strb.w	r3, [sp, #10]
    39dc:	f88d 300b 	strb.w	r3, [sp, #11]
    39e0:	2204      	movs	r2, #4
    39e2:	f88d 200c 	strb.w	r2, [sp, #12]
    39e6:	f88d 300d 	strb.w	r3, [sp, #13]
    39ea:	f88d 300e 	strb.w	r3, [sp, #14]
    39ee:	230a      	movs	r3, #10
    39f0:	f88d 300f 	strb.w	r3, [sp, #15]
	// Create the packet
	//sprintf(message, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction ,hwcfg, GRID_MSG_END_OF_TRANSMISSION);
	//length = strlen(message);
	

	grid_sys_write_hex_string_value(&message[4], 8, hwcfg);
    39f4:	4602      	mov	r2, r0
    39f6:	2108      	movs	r1, #8
    39f8:	a801      	add	r0, sp, #4
    39fa:	4c12      	ldr	r4, [pc, #72]	; (3a44 <grid_sys_ping+0xa8>)
    39fc:	47a0      	blx	r4
	

	
 	grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    39fe:	2110      	movs	r1, #16
    3a00:	4668      	mov	r0, sp
    3a02:	4b11      	ldr	r3, [pc, #68]	; (3a48 <grid_sys_ping+0xac>)
    3a04:	4798      	blx	r3
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3a06:	4602      	mov	r2, r0
    3a08:	2102      	movs	r1, #2
    3a0a:	f10d 000d 	add.w	r0, sp, #13
    3a0e:	47a0      	blx	r4
		
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, length)){
    3a10:	f505 659b 	add.w	r5, r5, #1240	; 0x4d8
    3a14:	2110      	movs	r1, #16
    3a16:	4628      	mov	r0, r5
    3a18:	4b0c      	ldr	r3, [pc, #48]	; (3a4c <grid_sys_ping+0xb0>)
    3a1a:	4798      	blx	r3
    3a1c:	b168      	cbz	r0, 3a3a <grid_sys_ping+0x9e>
    3a1e:	f10d 34ff 	add.w	r4, sp, #4294967295
    3a22:	f10d 070f 	add.w	r7, sp, #15
		
		for(uint16_t i = 0; i<length; i++){
			
			grid_buffer_write_character(&por->tx_buffer, message[i]);
    3a26:	4e0a      	ldr	r6, [pc, #40]	; (3a50 <grid_sys_ping+0xb4>)
    3a28:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3a2c:	4628      	mov	r0, r5
    3a2e:	47b0      	blx	r6
		for(uint16_t i = 0; i<length; i++){
    3a30:	42bc      	cmp	r4, r7
    3a32:	d1f9      	bne.n	3a28 <grid_sys_ping+0x8c>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    3a34:	4628      	mov	r0, r5
    3a36:	4b07      	ldr	r3, [pc, #28]	; (3a54 <grid_sys_ping+0xb8>)
    3a38:	4798      	blx	r3
	}
				
}
    3a3a:	b005      	add	sp, #20
    3a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a3e:	bf00      	nop
    3a40:	00003769 	.word	0x00003769
    3a44:	00003731 	.word	0x00003731
    3a48:	00003859 	.word	0x00003859
    3a4c:	000011a1 	.word	0x000011a1
    3a50:	000011d1 	.word	0x000011d1
    3a54:	000011ed 	.word	0x000011ed

00003a58 <grid_ui_model_init>:
	}
	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    3a58:	b538      	push	{r3, r4, r5, lr}
    3a5a:	4604      	mov	r4, r0
    3a5c:	460d      	mov	r5, r1
	
	mod->report_array = malloc(len*sizeof(struct grid_ui_report));
    3a5e:	0108      	lsls	r0, r1, #4
    3a60:	4b02      	ldr	r3, [pc, #8]	; (3a6c <grid_ui_model_init+0x14>)
    3a62:	4798      	blx	r3
    3a64:	6060      	str	r0, [r4, #4]
	mod->report_length = len;
    3a66:	7025      	strb	r5, [r4, #0]
	
}
    3a68:	bd38      	pop	{r3, r4, r5, pc}
    3a6a:	bf00      	nop
    3a6c:	0000b2b1 	.word	0x0000b2b1

00003a70 <grid_ui_report_init>:

uint8_t grid_ui_report_init(struct grid_ui_model* mod, uint8_t index, uint8_t* p, uint8_t p_len, uint8_t* h, uint8_t h_len){
    3a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a74:	4605      	mov	r5, r0
    3a76:	4617      	mov	r7, r2
    3a78:	9e08      	ldr	r6, [sp, #32]
    3a7a:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    3a7e:	010c      	lsls	r4, r1, #4
    3a80:	6842      	ldr	r2, [r0, #4]
    3a82:	2100      	movs	r1, #0
    3a84:	5511      	strb	r1, [r2, r4]
	mod->report_array[index].payload_length = p_len;
    3a86:	6842      	ldr	r2, [r0, #4]
    3a88:	4422      	add	r2, r4
    3a8a:	7053      	strb	r3, [r2, #1]
	mod->report_array[index].helper_length = h_len;
    3a8c:	6842      	ldr	r2, [r0, #4]
    3a8e:	4422      	add	r2, r4
    3a90:	f882 a008 	strb.w	sl, [r2, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    3a94:	6842      	ldr	r2, [r0, #4]
    3a96:	eb02 0804 	add.w	r8, r2, r4
    3a9a:	4618      	mov	r0, r3
    3a9c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3b0c <grid_ui_report_init+0x9c>
    3aa0:	47c8      	blx	r9
    3aa2:	f8c8 0004 	str.w	r0, [r8, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    3aa6:	686b      	ldr	r3, [r5, #4]
    3aa8:	eb03 0804 	add.w	r8, r3, r4
    3aac:	4650      	mov	r0, sl
    3aae:	47c8      	blx	r9
    3ab0:	f8c8 000c 	str.w	r0, [r8, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    3ab4:	686a      	ldr	r2, [r5, #4]
    3ab6:	4422      	add	r2, r4
    3ab8:	6853      	ldr	r3, [r2, #4]
    3aba:	b303      	cbz	r3, 3afe <grid_ui_report_init+0x8e>
    3abc:	68d3      	ldr	r3, [r2, #12]
    3abe:	b30b      	cbz	r3, 3b04 <grid_ui_report_init+0x94>
		return -1;
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3ac0:	7853      	ldrb	r3, [r2, #1]
    3ac2:	b153      	cbz	r3, 3ada <grid_ui_report_init+0x6a>
    3ac4:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    3ac6:	5cf9      	ldrb	r1, [r7, r3]
    3ac8:	6852      	ldr	r2, [r2, #4]
    3aca:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3acc:	3301      	adds	r3, #1
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	686a      	ldr	r2, [r5, #4]
    3ad2:	4422      	add	r2, r4
    3ad4:	7851      	ldrb	r1, [r2, #1]
    3ad6:	4299      	cmp	r1, r3
    3ad8:	d8f5      	bhi.n	3ac6 <grid_ui_report_init+0x56>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3ada:	686a      	ldr	r2, [r5, #4]
    3adc:	4422      	add	r2, r4
    3ade:	7a10      	ldrb	r0, [r2, #8]
    3ae0:	b188      	cbz	r0, 3b06 <grid_ui_report_init+0x96>
    3ae2:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    3ae4:	5cf1      	ldrb	r1, [r6, r3]
    3ae6:	68d2      	ldr	r2, [r2, #12]
    3ae8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3aea:	3301      	adds	r3, #1
    3aec:	b2db      	uxtb	r3, r3
    3aee:	686a      	ldr	r2, [r5, #4]
    3af0:	4422      	add	r2, r4
    3af2:	7a11      	ldrb	r1, [r2, #8]
    3af4:	4299      	cmp	r1, r3
    3af6:	d8f5      	bhi.n	3ae4 <grid_ui_report_init+0x74>
	}
	
	return 0;
    3af8:	2000      	movs	r0, #0
    3afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
    3afe:	20ff      	movs	r0, #255	; 0xff
    3b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b04:	20ff      	movs	r0, #255	; 0xff
	
}
    3b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b0a:	bf00      	nop
    3b0c:	0000b2b1 	.word	0x0000b2b1

00003b10 <grid_ui_report_render>:

uint8_t grid_ui_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    3b10:	6843      	ldr	r3, [r0, #4]
    3b12:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    3b16:	7848      	ldrb	r0, [r1, #1]
    3b18:	b140      	cbz	r0, 3b2c <grid_ui_report_render+0x1c>
    3b1a:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    3b1c:	6848      	ldr	r0, [r1, #4]
    3b1e:	5cc0      	ldrb	r0, [r0, r3]
    3b20:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    3b22:	3301      	adds	r3, #1
    3b24:	b2db      	uxtb	r3, r3
    3b26:	7848      	ldrb	r0, [r1, #1]
    3b28:	4298      	cmp	r0, r3
    3b2a:	d8f7      	bhi.n	3b1c <grid_ui_report_render+0xc>
	}
	
	return rep->payload_length;
}
    3b2c:	4770      	bx	lr

00003b2e <grid_ui_report_get_changed_flag>:

uint8_t grid_ui_report_get_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	return mod->report_array[index].changed;
    3b2e:	6843      	ldr	r3, [r0, #4]
    3b30:	0109      	lsls	r1, r1, #4
}
    3b32:	5c58      	ldrb	r0, [r3, r1]
    3b34:	4770      	bx	lr

00003b36 <grid_ui_report_set_changed_flag>:

void grid_ui_report_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    3b36:	6843      	ldr	r3, [r0, #4]
    3b38:	0109      	lsls	r1, r1, #4
    3b3a:	2201      	movs	r2, #1
    3b3c:	545a      	strb	r2, [r3, r1]
    3b3e:	4770      	bx	lr

00003b40 <grid_ui_report_clear_changed_flag>:
}

void grid_ui_report_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    3b40:	6843      	ldr	r3, [r0, #4]
    3b42:	0109      	lsls	r1, r1, #4
    3b44:	2200      	movs	r2, #0
    3b46:	545a      	strb	r2, [r3, r1]
    3b48:	4770      	bx	lr
	...

00003b4c <grid_port_process_ui>:
	if (por->cooldown > 15){
    3b4c:	6803      	ldr	r3, [r0, #0]
    3b4e:	2b0f      	cmp	r3, #15
    3b50:	d828      	bhi.n	3ba4 <grid_port_process_ui+0x58>
void grid_port_process_ui(struct grid_port* por){
    3b52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b56:	b0cb      	sub	sp, #300	; 0x12c
	else if (por->cooldown>0){
    3b58:	b10b      	cbz	r3, 3b5e <grid_port_process_ui+0x12>
		por->cooldown--;
    3b5a:	3b01      	subs	r3, #1
    3b5c:	6003      	str	r3, [r0, #0]
    3b5e:	4607      	mov	r7, r0
	uint8_t id = grid_sys_state.next_broadcast_message_id;
    3b60:	4b4c      	ldr	r3, [pc, #304]	; (3c94 <grid_port_process_ui+0x148>)
    3b62:	f893 1211 	ldrb.w	r1, [r3, #529]	; 0x211
	sprintf(&message[length],
    3b66:	2317      	movs	r3, #23
    3b68:	9305      	str	r3, [sp, #20]
    3b6a:	2300      	movs	r3, #0
    3b6c:	9304      	str	r3, [sp, #16]
    3b6e:	227f      	movs	r2, #127	; 0x7f
    3b70:	9203      	str	r2, [sp, #12]
    3b72:	9202      	str	r2, [sp, #8]
    3b74:	9101      	str	r1, [sp, #4]
    3b76:	9300      	str	r3, [sp, #0]
    3b78:	230f      	movs	r3, #15
    3b7a:	2201      	movs	r2, #1
    3b7c:	4946      	ldr	r1, [pc, #280]	; (3c98 <grid_port_process_ui+0x14c>)
    3b7e:	a80a      	add	r0, sp, #40	; 0x28
    3b80:	4c46      	ldr	r4, [pc, #280]	; (3c9c <grid_port_process_ui+0x150>)
    3b82:	47a0      	blx	r4
	length += strlen(&message[length]);
    3b84:	a80a      	add	r0, sp, #40	; 0x28
    3b86:	4b46      	ldr	r3, [pc, #280]	; (3ca0 <grid_port_process_ui+0x154>)
    3b88:	4798      	blx	r3
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    3b8a:	4b46      	ldr	r3, [pc, #280]	; (3ca4 <grid_port_process_ui+0x158>)
    3b8c:	781b      	ldrb	r3, [r3, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d034      	beq.n	3bfc <grid_port_process_ui+0xb0>
    3b92:	4605      	mov	r5, r0
    3b94:	2400      	movs	r4, #0
    3b96:	46a0      	mov	r8, r4
		CRITICAL_SECTION_ENTER()
    3b98:	f8df a138 	ldr.w	sl, [pc, #312]	; 3cd4 <grid_port_process_ui+0x188>
	return mod->report_array[index].changed;
    3b9c:	4e41      	ldr	r6, [pc, #260]	; (3ca4 <grid_port_process_ui+0x158>)
		CRITICAL_SECTION_LEAVE()
    3b9e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 3cd8 <grid_port_process_ui+0x18c>
    3ba2:	e00a      	b.n	3bba <grid_port_process_ui+0x6e>
		por->cooldown--;
    3ba4:	3b01      	subs	r3, #1
    3ba6:	6003      	str	r3, [r0, #0]
    3ba8:	4770      	bx	lr
		CRITICAL_SECTION_LEAVE()
    3baa:	a807      	add	r0, sp, #28
    3bac:	47c8      	blx	r9
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    3bae:	3401      	adds	r4, #1
    3bb0:	b2e4      	uxtb	r4, r4
    3bb2:	7833      	ldrb	r3, [r6, #0]
    3bb4:	b2db      	uxtb	r3, r3
    3bb6:	42a3      	cmp	r3, r4
    3bb8:	d91d      	bls.n	3bf6 <grid_port_process_ui+0xaa>
		if (length>200){
    3bba:	2dc8      	cmp	r5, #200	; 0xc8
    3bbc:	d8f7      	bhi.n	3bae <grid_port_process_ui+0x62>
		CRITICAL_SECTION_ENTER()
    3bbe:	a807      	add	r0, sp, #28
    3bc0:	47d0      	blx	sl
	return mod->report_array[index].changed;
    3bc2:	6872      	ldr	r2, [r6, #4]
    3bc4:	0123      	lsls	r3, r4, #4
		if (grid_ui_report_get_changed_flag(&grid_ui_state, i)){
    3bc6:	5cd3      	ldrb	r3, [r2, r3]
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d0ee      	beq.n	3baa <grid_port_process_ui+0x5e>
			packetvalid++;
    3bcc:	f108 0801 	add.w	r8, r8, #1
    3bd0:	fa5f f888 	uxtb.w	r8, r8
			grid_ui_report_render(&grid_ui_state, i, &message[length]);
    3bd4:	ab0a      	add	r3, sp, #40	; 0x28
    3bd6:	eb03 0b05 	add.w	fp, r3, r5
    3bda:	465a      	mov	r2, fp
    3bdc:	4621      	mov	r1, r4
    3bde:	4630      	mov	r0, r6
    3be0:	4b31      	ldr	r3, [pc, #196]	; (3ca8 <grid_port_process_ui+0x15c>)
    3be2:	4798      	blx	r3
			grid_ui_report_clear_changed_flag(&grid_ui_state, i);
    3be4:	4621      	mov	r1, r4
    3be6:	4630      	mov	r0, r6
    3be8:	4b30      	ldr	r3, [pc, #192]	; (3cac <grid_port_process_ui+0x160>)
    3bea:	4798      	blx	r3
			length += strlen(&message[length]);
    3bec:	4658      	mov	r0, fp
    3bee:	4b2c      	ldr	r3, [pc, #176]	; (3ca0 <grid_port_process_ui+0x154>)
    3bf0:	4798      	blx	r3
    3bf2:	4405      	add	r5, r0
    3bf4:	e7d9      	b.n	3baa <grid_port_process_ui+0x5e>
	if (packetvalid){
    3bf6:	f1b8 0f00 	cmp.w	r8, #0
    3bfa:	d102      	bne.n	3c02 <grid_port_process_ui+0xb6>
}
    3bfc:	b04b      	add	sp, #300	; 0x12c
    3bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		por->cooldown += (10+por->cooldown);
    3c02:	683b      	ldr	r3, [r7, #0]
    3c04:	005b      	lsls	r3, r3, #1
    3c06:	330a      	adds	r3, #10
    3c08:	603b      	str	r3, [r7, #0]
		grid_sys_state.next_broadcast_message_id++;
    3c0a:	4a22      	ldr	r2, [pc, #136]	; (3c94 <grid_port_process_ui+0x148>)
    3c0c:	f892 3211 	ldrb.w	r3, [r2, #529]	; 0x211
    3c10:	3301      	adds	r3, #1
    3c12:	b2db      	uxtb	r3, r3
    3c14:	f882 3211 	strb.w	r3, [r2, #529]	; 0x211
		sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    3c18:	ac0a      	add	r4, sp, #40	; 0x28
    3c1a:	1966      	adds	r6, r4, r5
    3c1c:	2204      	movs	r2, #4
    3c1e:	4924      	ldr	r1, [pc, #144]	; (3cb0 <grid_port_process_ui+0x164>)
    3c20:	4630      	mov	r0, r6
    3c22:	4f1e      	ldr	r7, [pc, #120]	; (3c9c <grid_port_process_ui+0x150>)
    3c24:	47b8      	blx	r7
		length += strlen(&message[length]);
    3c26:	4630      	mov	r0, r6
    3c28:	4e1d      	ldr	r6, [pc, #116]	; (3ca0 <grid_port_process_ui+0x154>)
    3c2a:	47b0      	blx	r6
    3c2c:	4405      	add	r5, r0
		sprintf(length_string, "%02x", length);
    3c2e:	462a      	mov	r2, r5
    3c30:	4920      	ldr	r1, [pc, #128]	; (3cb4 <grid_port_process_ui+0x168>)
    3c32:	a808      	add	r0, sp, #32
    3c34:	47b8      	blx	r7
		message[2] = length_string[0];
    3c36:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3c3a:	70a3      	strb	r3, [r4, #2]
		message[3] = length_string[1];
    3c3c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3c40:	70e3      	strb	r3, [r4, #3]
		sprintf(&message[length], "00\n");
    3c42:	4b1d      	ldr	r3, [pc, #116]	; (3cb8 <grid_port_process_ui+0x16c>)
    3c44:	6818      	ldr	r0, [r3, #0]
    3c46:	5160      	str	r0, [r4, r5]
		length += strlen(&message[length]);
    3c48:	1960      	adds	r0, r4, r5
    3c4a:	47b0      	blx	r6
    3c4c:	4405      	add	r5, r0
		uint8_t checksum = grid_msg_get_checksum(message, length);
    3c4e:	4629      	mov	r1, r5
    3c50:	4620      	mov	r0, r4
    3c52:	4b1a      	ldr	r3, [pc, #104]	; (3cbc <grid_port_process_ui+0x170>)
    3c54:	4798      	blx	r3
		grid_msg_set_checksum(message, length, checksum);
    3c56:	b2c2      	uxtb	r2, r0
    3c58:	4629      	mov	r1, r5
    3c5a:	4620      	mov	r0, r4
    3c5c:	4b18      	ldr	r3, [pc, #96]	; (3cc0 <grid_port_process_ui+0x174>)
    3c5e:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    3c60:	b2a9      	uxth	r1, r5
    3c62:	4818      	ldr	r0, [pc, #96]	; (3cc4 <grid_port_process_ui+0x178>)
    3c64:	4b18      	ldr	r3, [pc, #96]	; (3cc8 <grid_port_process_ui+0x17c>)
    3c66:	4798      	blx	r3
    3c68:	2800      	cmp	r0, #0
    3c6a:	d0c7      	beq.n	3bfc <grid_port_process_ui+0xb0>
			for(uint32_t i = 0; i<length; i++){
    3c6c:	b16d      	cbz	r5, 3c8a <grid_port_process_ui+0x13e>
    3c6e:	f10d 0427 	add.w	r4, sp, #39	; 0x27
    3c72:	ab4a      	add	r3, sp, #296	; 0x128
    3c74:	441d      	add	r5, r3
    3c76:	f2a5 1501 	subw	r5, r5, #257	; 0x101
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    3c7a:	4f12      	ldr	r7, [pc, #72]	; (3cc4 <grid_port_process_ui+0x178>)
    3c7c:	4e13      	ldr	r6, [pc, #76]	; (3ccc <grid_port_process_ui+0x180>)
    3c7e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3c82:	4638      	mov	r0, r7
    3c84:	47b0      	blx	r6
			for(uint32_t i = 0; i<length; i++){
    3c86:	42a5      	cmp	r5, r4
    3c88:	d1f9      	bne.n	3c7e <grid_port_process_ui+0x132>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    3c8a:	480e      	ldr	r0, [pc, #56]	; (3cc4 <grid_port_process_ui+0x178>)
    3c8c:	4b10      	ldr	r3, [pc, #64]	; (3cd0 <grid_port_process_ui+0x184>)
    3c8e:	4798      	blx	r3
    3c90:	e7b4      	b.n	3bfc <grid_port_process_ui+0xb0>
    3c92:	bf00      	nop
    3c94:	20001ca4 	.word	0x20001ca4
    3c98:	0000bd6c 	.word	0x0000bd6c
    3c9c:	0000b4d5 	.word	0x0000b4d5
    3ca0:	0000b51d 	.word	0x0000b51d
    3ca4:	20001c98 	.word	0x20001c98
    3ca8:	00003b11 	.word	0x00003b11
    3cac:	00003b41 	.word	0x00003b41
    3cb0:	0000bd84 	.word	0x0000bd84
    3cb4:	0000bd88 	.word	0x0000bd88
    3cb8:	0000bd90 	.word	0x0000bd90
    3cbc:	00003859 	.word	0x00003859
    3cc0:	00003875 	.word	0x00003875
    3cc4:	20001c78 	.word	0x20001c78
    3cc8:	000011a1 	.word	0x000011a1
    3ccc:	000011d1 	.word	0x000011d1
    3cd0:	000011ed 	.word	0x000011ed
    3cd4:	00004075 	.word	0x00004075
    3cd8:	00004083 	.word	0x00004083

00003cdc <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    3cdc:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    3cde:	6983      	ldr	r3, [r0, #24]
    3ce0:	b103      	cbz	r3, 3ce4 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    3ce2:	4798      	blx	r3
    3ce4:	bd08      	pop	{r3, pc}

00003ce6 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    3ce6:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    3ce8:	69c3      	ldr	r3, [r0, #28]
    3cea:	b103      	cbz	r3, 3cee <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    3cec:	4798      	blx	r3
    3cee:	bd08      	pop	{r3, pc}

00003cf0 <adc_async_channel_conversion_done>:
{
    3cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cf4:	4606      	mov	r6, r0
    3cf6:	460f      	mov	r7, r1
    3cf8:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    3cfa:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    3cfc:	5c5c      	ldrb	r4, [r3, r1]
    3cfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3d02:	00e4      	lsls	r4, r4, #3
    3d04:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    3d08:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    3d0c:	f105 0a04 	add.w	sl, r5, #4
    3d10:	b2d1      	uxtb	r1, r2
    3d12:	4650      	mov	r0, sl
    3d14:	4b0c      	ldr	r3, [pc, #48]	; (3d48 <adc_async_channel_conversion_done+0x58>)
    3d16:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    3d18:	4630      	mov	r0, r6
    3d1a:	4b0c      	ldr	r3, [pc, #48]	; (3d4c <adc_async_channel_conversion_done+0x5c>)
    3d1c:	4798      	blx	r3
    3d1e:	2801      	cmp	r0, #1
    3d20:	d907      	bls.n	3d32 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    3d22:	ea4f 2119 	mov.w	r1, r9, lsr #8
    3d26:	4650      	mov	r0, sl
    3d28:	4b07      	ldr	r3, [pc, #28]	; (3d48 <adc_async_channel_conversion_done+0x58>)
    3d2a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    3d2c:	8aab      	ldrh	r3, [r5, #20]
    3d2e:	3301      	adds	r3, #1
    3d30:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    3d32:	8aab      	ldrh	r3, [r5, #20]
    3d34:	3301      	adds	r3, #1
    3d36:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    3d38:	f858 3004 	ldr.w	r3, [r8, r4]
    3d3c:	b113      	cbz	r3, 3d44 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    3d3e:	4639      	mov	r1, r7
    3d40:	4630      	mov	r0, r6
    3d42:	4798      	blx	r3
    3d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d48:	00005395 	.word	0x00005395
    3d4c:	0000571b 	.word	0x0000571b

00003d50 <adc_async_init>:
{
    3d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d54:	4689      	mov	r9, r1
    3d56:	4616      	mov	r6, r2
    3d58:	461c      	mov	r4, r3
    3d5a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    3d5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    3d60:	4607      	mov	r7, r0
    3d62:	b140      	cbz	r0, 3d76 <adc_async_init+0x26>
    3d64:	b149      	cbz	r1, 3d7a <adc_async_init+0x2a>
    3d66:	b152      	cbz	r2, 3d7e <adc_async_init+0x2e>
    3d68:	f1b8 0f00 	cmp.w	r8, #0
    3d6c:	d009      	beq.n	3d82 <adc_async_init+0x32>
    3d6e:	1c28      	adds	r0, r5, #0
    3d70:	bf18      	it	ne
    3d72:	2001      	movne	r0, #1
    3d74:	e006      	b.n	3d84 <adc_async_init+0x34>
    3d76:	2000      	movs	r0, #0
    3d78:	e004      	b.n	3d84 <adc_async_init+0x34>
    3d7a:	2000      	movs	r0, #0
    3d7c:	e002      	b.n	3d84 <adc_async_init+0x34>
    3d7e:	2000      	movs	r0, #0
    3d80:	e000      	b.n	3d84 <adc_async_init+0x34>
    3d82:	2000      	movs	r0, #0
    3d84:	f8df b064 	ldr.w	fp, [pc, #100]	; 3dec <adc_async_init+0x9c>
    3d88:	223f      	movs	r2, #63	; 0x3f
    3d8a:	4659      	mov	r1, fp
    3d8c:	f8df a060 	ldr.w	sl, [pc, #96]	; 3df0 <adc_async_init+0xa0>
    3d90:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    3d92:	1c60      	adds	r0, r4, #1
    3d94:	2240      	movs	r2, #64	; 0x40
    3d96:	4659      	mov	r1, fp
    3d98:	4580      	cmp	r8, r0
    3d9a:	bfcc      	ite	gt
    3d9c:	2000      	movgt	r0, #0
    3d9e:	2001      	movle	r0, #1
    3da0:	47d0      	blx	sl
	device = &descr->device;
    3da2:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    3da4:	21ff      	movs	r1, #255	; 0xff
    3da6:	b2da      	uxtb	r2, r3
    3da8:	54b1      	strb	r1, [r6, r2]
    3daa:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    3dac:	b2da      	uxtb	r2, r3
    3dae:	42a2      	cmp	r2, r4
    3db0:	d9f9      	bls.n	3da6 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    3db2:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    3db4:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    3db8:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    3dbc:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    3dbe:	4649      	mov	r1, r9
    3dc0:	4638      	mov	r0, r7
    3dc2:	4b06      	ldr	r3, [pc, #24]	; (3ddc <adc_async_init+0x8c>)
    3dc4:	4798      	blx	r3
	if (init_status) {
    3dc6:	4603      	mov	r3, r0
    3dc8:	b928      	cbnz	r0, 3dd6 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    3dca:	4a05      	ldr	r2, [pc, #20]	; (3de0 <adc_async_init+0x90>)
    3dcc:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    3dce:	4a05      	ldr	r2, [pc, #20]	; (3de4 <adc_async_init+0x94>)
    3dd0:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    3dd2:	4a05      	ldr	r2, [pc, #20]	; (3de8 <adc_async_init+0x98>)
    3dd4:	607a      	str	r2, [r7, #4]
}
    3dd6:	4618      	mov	r0, r3
    3dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ddc:	000055e9 	.word	0x000055e9
    3de0:	00003cf1 	.word	0x00003cf1
    3de4:	00003cdd 	.word	0x00003cdd
    3de8:	00003ce7 	.word	0x00003ce7
    3dec:	0000bd94 	.word	0x0000bd94
    3df0:	00005259 	.word	0x00005259

00003df4 <adc_async_register_channel_buffer>:
{
    3df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3df8:	460e      	mov	r6, r1
    3dfa:	4617      	mov	r7, r2
    3dfc:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    3dfe:	4605      	mov	r5, r0
    3e00:	2800      	cmp	r0, #0
    3e02:	d040      	beq.n	3e86 <adc_async_register_channel_buffer+0x92>
    3e04:	2a00      	cmp	r2, #0
    3e06:	d040      	beq.n	3e8a <adc_async_register_channel_buffer+0x96>
    3e08:	1c18      	adds	r0, r3, #0
    3e0a:	bf18      	it	ne
    3e0c:	2001      	movne	r0, #1
    3e0e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3ea8 <adc_async_register_channel_buffer+0xb4>
    3e12:	2266      	movs	r2, #102	; 0x66
    3e14:	4649      	mov	r1, r9
    3e16:	4c22      	ldr	r4, [pc, #136]	; (3ea0 <adc_async_register_channel_buffer+0xac>)
    3e18:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    3e1a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    3e1e:	2267      	movs	r2, #103	; 0x67
    3e20:	4649      	mov	r1, r9
    3e22:	42b0      	cmp	r0, r6
    3e24:	bf34      	ite	cc
    3e26:	2000      	movcc	r0, #0
    3e28:	2001      	movcs	r0, #1
    3e2a:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    3e2c:	6a29      	ldr	r1, [r5, #32]
    3e2e:	5d8b      	ldrb	r3, [r1, r6]
    3e30:	2bff      	cmp	r3, #255	; 0xff
    3e32:	d12c      	bne.n	3e8e <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    3e34:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    3e38:	2300      	movs	r3, #0
    3e3a:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    3e3c:	b2da      	uxtb	r2, r3
    3e3e:	5c8a      	ldrb	r2, [r1, r2]
    3e40:	2aff      	cmp	r2, #255	; 0xff
			index++;
    3e42:	bf1c      	itt	ne
    3e44:	3401      	addne	r4, #1
    3e46:	b2e4      	uxtbne	r4, r4
    3e48:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    3e4a:	b2da      	uxtb	r2, r3
    3e4c:	4282      	cmp	r2, r0
    3e4e:	d9f5      	bls.n	3e3c <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    3e50:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    3e54:	42a3      	cmp	r3, r4
    3e56:	d31d      	bcc.n	3e94 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    3e58:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    3e5c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    3e60:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    3e62:	4448      	add	r0, r9
    3e64:	4642      	mov	r2, r8
    3e66:	4639      	mov	r1, r7
    3e68:	3004      	adds	r0, #4
    3e6a:	4b0e      	ldr	r3, [pc, #56]	; (3ea4 <adc_async_register_channel_buffer+0xb0>)
    3e6c:	4798      	blx	r3
    3e6e:	4602      	mov	r2, r0
    3e70:	b998      	cbnz	r0, 3e9a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    3e72:	6a2b      	ldr	r3, [r5, #32]
    3e74:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    3e76:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3e78:	4499      	add	r9, r3
    3e7a:	2300      	movs	r3, #0
    3e7c:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    3e80:	4610      	mov	r0, r2
    3e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    3e86:	2000      	movs	r0, #0
    3e88:	e7c1      	b.n	3e0e <adc_async_register_channel_buffer+0x1a>
    3e8a:	2000      	movs	r0, #0
    3e8c:	e7bf      	b.n	3e0e <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    3e8e:	f06f 020c 	mvn.w	r2, #12
    3e92:	e7f5      	b.n	3e80 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    3e94:	f06f 021b 	mvn.w	r2, #27
    3e98:	e7f2      	b.n	3e80 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    3e9a:	f06f 020c 	mvn.w	r2, #12
    3e9e:	e7ef      	b.n	3e80 <adc_async_register_channel_buffer+0x8c>
    3ea0:	00005259 	.word	0x00005259
    3ea4:	00005301 	.word	0x00005301
    3ea8:	0000bd94 	.word	0x0000bd94

00003eac <adc_async_enable_channel>:
{
    3eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eae:	460d      	mov	r5, r1
	ASSERT(descr);
    3eb0:	4f0b      	ldr	r7, [pc, #44]	; (3ee0 <adc_async_enable_channel+0x34>)
    3eb2:	4604      	mov	r4, r0
    3eb4:	2283      	movs	r2, #131	; 0x83
    3eb6:	4639      	mov	r1, r7
    3eb8:	3000      	adds	r0, #0
    3eba:	bf18      	it	ne
    3ebc:	2001      	movne	r0, #1
    3ebe:	4e09      	ldr	r6, [pc, #36]	; (3ee4 <adc_async_enable_channel+0x38>)
    3ec0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    3ec2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    3ec6:	2284      	movs	r2, #132	; 0x84
    3ec8:	4639      	mov	r1, r7
    3eca:	42a8      	cmp	r0, r5
    3ecc:	bf34      	ite	cc
    3ece:	2000      	movcc	r0, #0
    3ed0:	2001      	movcs	r0, #1
    3ed2:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    3ed4:	4629      	mov	r1, r5
    3ed6:	4620      	mov	r0, r4
    3ed8:	4b03      	ldr	r3, [pc, #12]	; (3ee8 <adc_async_enable_channel+0x3c>)
    3eda:	4798      	blx	r3
}
    3edc:	2000      	movs	r0, #0
    3ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ee0:	0000bd94 	.word	0x0000bd94
    3ee4:	00005259 	.word	0x00005259
    3ee8:	00005705 	.word	0x00005705

00003eec <adc_async_register_callback>:
{
    3eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ef0:	460e      	mov	r6, r1
    3ef2:	4614      	mov	r4, r2
    3ef4:	4699      	mov	r9, r3
	ASSERT(descr);
    3ef6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 3f68 <adc_async_register_callback+0x7c>
    3efa:	4605      	mov	r5, r0
    3efc:	229c      	movs	r2, #156	; 0x9c
    3efe:	4641      	mov	r1, r8
    3f00:	3000      	adds	r0, #0
    3f02:	bf18      	it	ne
    3f04:	2001      	movne	r0, #1
    3f06:	4f16      	ldr	r7, [pc, #88]	; (3f60 <adc_async_register_callback+0x74>)
    3f08:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    3f0a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    3f0e:	229d      	movs	r2, #157	; 0x9d
    3f10:	4641      	mov	r1, r8
    3f12:	42b0      	cmp	r0, r6
    3f14:	bf34      	ite	cc
    3f16:	2000      	movcc	r0, #0
    3f18:	2001      	movcs	r0, #1
    3f1a:	47b8      	blx	r7
	switch (type) {
    3f1c:	2c01      	cmp	r4, #1
    3f1e:	d019      	beq.n	3f54 <adc_async_register_callback+0x68>
    3f20:	b12c      	cbz	r4, 3f2e <adc_async_register_callback+0x42>
    3f22:	2c02      	cmp	r4, #2
    3f24:	d019      	beq.n	3f5a <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    3f26:	f06f 000c 	mvn.w	r0, #12
}
    3f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    3f2e:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    3f30:	5d9b      	ldrb	r3, [r3, r6]
    3f32:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3f34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f38:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    3f3c:	f119 0300 	adds.w	r3, r9, #0
    3f40:	bf18      	it	ne
    3f42:	2301      	movne	r3, #1
    3f44:	4622      	mov	r2, r4
    3f46:	4631      	mov	r1, r6
    3f48:	4628      	mov	r0, r5
    3f4a:	4c06      	ldr	r4, [pc, #24]	; (3f64 <adc_async_register_callback+0x78>)
    3f4c:	47a0      	blx	r4
	return ERR_NONE;
    3f4e:	2000      	movs	r0, #0
    3f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    3f54:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    3f58:	e7f0      	b.n	3f3c <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    3f5a:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    3f5e:	e7ed      	b.n	3f3c <adc_async_register_callback+0x50>
    3f60:	00005259 	.word	0x00005259
    3f64:	00005743 	.word	0x00005743
    3f68:	0000bd94 	.word	0x0000bd94

00003f6c <adc_async_read_channel>:
{
    3f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f70:	b083      	sub	sp, #12
    3f72:	4688      	mov	r8, r1
    3f74:	4691      	mov	r9, r2
    3f76:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    3f78:	4604      	mov	r4, r0
    3f7a:	2800      	cmp	r0, #0
    3f7c:	d04f      	beq.n	401e <adc_async_read_channel+0xb2>
    3f7e:	2a00      	cmp	r2, #0
    3f80:	d04f      	beq.n	4022 <adc_async_read_channel+0xb6>
    3f82:	1c18      	adds	r0, r3, #0
    3f84:	bf18      	it	ne
    3f86:	2001      	movne	r0, #1
    3f88:	4f29      	ldr	r7, [pc, #164]	; (4030 <adc_async_read_channel+0xc4>)
    3f8a:	22bc      	movs	r2, #188	; 0xbc
    3f8c:	4639      	mov	r1, r7
    3f8e:	4e29      	ldr	r6, [pc, #164]	; (4034 <adc_async_read_channel+0xc8>)
    3f90:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    3f92:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    3f96:	22bd      	movs	r2, #189	; 0xbd
    3f98:	4639      	mov	r1, r7
    3f9a:	4540      	cmp	r0, r8
    3f9c:	bf34      	ite	cc
    3f9e:	2000      	movcc	r0, #0
    3fa0:	2001      	movcs	r0, #1
    3fa2:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    3fa4:	4620      	mov	r0, r4
    3fa6:	4b24      	ldr	r3, [pc, #144]	; (4038 <adc_async_read_channel+0xcc>)
    3fa8:	4798      	blx	r3
	ASSERT(!(length % data_size));
    3faa:	fb95 f3f0 	sdiv	r3, r5, r0
    3fae:	fb03 5010 	mls	r0, r3, r0, r5
    3fb2:	22bf      	movs	r2, #191	; 0xbf
    3fb4:	4639      	mov	r1, r7
    3fb6:	fab0 f080 	clz	r0, r0
    3fba:	0940      	lsrs	r0, r0, #5
    3fbc:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    3fbe:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    3fc0:	f813 b008 	ldrb.w	fp, [r3, r8]
    3fc4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    3fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3fca:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    3fce:	a801      	add	r0, sp, #4
    3fd0:	4b1a      	ldr	r3, [pc, #104]	; (403c <adc_async_read_channel+0xd0>)
    3fd2:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    3fd4:	f10b 0a04 	add.w	sl, fp, #4
    3fd8:	4650      	mov	r0, sl
    3fda:	4b19      	ldr	r3, [pc, #100]	; (4040 <adc_async_read_channel+0xd4>)
    3fdc:	4798      	blx	r3
    3fde:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    3fe0:	a801      	add	r0, sp, #4
    3fe2:	4b18      	ldr	r3, [pc, #96]	; (4044 <adc_async_read_channel+0xd8>)
    3fe4:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    3fe6:	f1b8 0f00 	cmp.w	r8, #0
    3fea:	d01c      	beq.n	4026 <adc_async_read_channel+0xba>
    3fec:	b1ed      	cbz	r5, 402a <adc_async_read_channel+0xbe>
    3fee:	3d01      	subs	r5, #1
    3ff0:	b2ad      	uxth	r5, r5
    3ff2:	3502      	adds	r5, #2
    3ff4:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    3ff6:	4f14      	ldr	r7, [pc, #80]	; (4048 <adc_async_read_channel+0xdc>)
    3ff8:	b2a6      	uxth	r6, r4
    3ffa:	1e61      	subs	r1, r4, #1
    3ffc:	4449      	add	r1, r9
    3ffe:	4650      	mov	r0, sl
    4000:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    4002:	4544      	cmp	r4, r8
    4004:	d002      	beq.n	400c <adc_async_read_channel+0xa0>
    4006:	3401      	adds	r4, #1
    4008:	42ac      	cmp	r4, r5
    400a:	d1f5      	bne.n	3ff8 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    400c:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4010:	1b9b      	subs	r3, r3, r6
    4012:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    4016:	4630      	mov	r0, r6
    4018:	b003      	add	sp, #12
    401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    401e:	2000      	movs	r0, #0
    4020:	e7b2      	b.n	3f88 <adc_async_read_channel+0x1c>
    4022:	2000      	movs	r0, #0
    4024:	e7b0      	b.n	3f88 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    4026:	2600      	movs	r6, #0
    4028:	e7f0      	b.n	400c <adc_async_read_channel+0xa0>
    402a:	2600      	movs	r6, #0
    402c:	e7ee      	b.n	400c <adc_async_read_channel+0xa0>
    402e:	bf00      	nop
    4030:	0000bd94 	.word	0x0000bd94
    4034:	00005259 	.word	0x00005259
    4038:	0000571b 	.word	0x0000571b
    403c:	00004075 	.word	0x00004075
    4040:	000053d5 	.word	0x000053d5
    4044:	00004083 	.word	0x00004083
    4048:	00005351 	.word	0x00005351

0000404c <adc_async_start_conversion>:
{
    404c:	b510      	push	{r4, lr}
	ASSERT(descr);
    404e:	4604      	mov	r4, r0
    4050:	22d6      	movs	r2, #214	; 0xd6
    4052:	4905      	ldr	r1, [pc, #20]	; (4068 <adc_async_start_conversion+0x1c>)
    4054:	3000      	adds	r0, #0
    4056:	bf18      	it	ne
    4058:	2001      	movne	r0, #1
    405a:	4b04      	ldr	r3, [pc, #16]	; (406c <adc_async_start_conversion+0x20>)
    405c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    405e:	4620      	mov	r0, r4
    4060:	4b03      	ldr	r3, [pc, #12]	; (4070 <adc_async_start_conversion+0x24>)
    4062:	4798      	blx	r3
}
    4064:	2000      	movs	r0, #0
    4066:	bd10      	pop	{r4, pc}
    4068:	0000bd94 	.word	0x0000bd94
    406c:	00005259 	.word	0x00005259
    4070:	0000572d 	.word	0x0000572d

00004074 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4074:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    4078:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    407a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    407c:	f3bf 8f5f 	dmb	sy
    4080:	4770      	bx	lr

00004082 <atomic_leave_critical>:
    4082:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    4086:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4088:	f383 8810 	msr	PRIMASK, r3
    408c:	4770      	bx	lr
	...

00004090 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4090:	b538      	push	{r3, r4, r5, lr}
    4092:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    4094:	4605      	mov	r5, r0
    4096:	b158      	cbz	r0, 40b0 <crc_sync_init+0x20>
    4098:	1c08      	adds	r0, r1, #0
    409a:	bf18      	it	ne
    409c:	2001      	movne	r0, #1
    409e:	222b      	movs	r2, #43	; 0x2b
    40a0:	4904      	ldr	r1, [pc, #16]	; (40b4 <crc_sync_init+0x24>)
    40a2:	4b05      	ldr	r3, [pc, #20]	; (40b8 <crc_sync_init+0x28>)
    40a4:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    40a6:	4621      	mov	r1, r4
    40a8:	4628      	mov	r0, r5
    40aa:	4b04      	ldr	r3, [pc, #16]	; (40bc <crc_sync_init+0x2c>)
    40ac:	4798      	blx	r3
}
    40ae:	bd38      	pop	{r3, r4, r5, pc}
    40b0:	2000      	movs	r0, #0
    40b2:	e7f4      	b.n	409e <crc_sync_init+0xe>
    40b4:	0000bdb0 	.word	0x0000bdb0
    40b8:	00005259 	.word	0x00005259
    40bc:	00005b2d 	.word	0x00005b2d

000040c0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    40c0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    40c2:	4b02      	ldr	r3, [pc, #8]	; (40cc <delay_init+0xc>)
    40c4:	6018      	str	r0, [r3, #0]
    40c6:	4b02      	ldr	r3, [pc, #8]	; (40d0 <delay_init+0x10>)
    40c8:	4798      	blx	r3
    40ca:	bd08      	pop	{r3, pc}
    40cc:	20000658 	.word	0x20000658
    40d0:	000073a5 	.word	0x000073a5

000040d4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    40d4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    40d6:	4b04      	ldr	r3, [pc, #16]	; (40e8 <delay_us+0x14>)
    40d8:	681c      	ldr	r4, [r3, #0]
    40da:	4b04      	ldr	r3, [pc, #16]	; (40ec <delay_us+0x18>)
    40dc:	4798      	blx	r3
    40de:	4601      	mov	r1, r0
    40e0:	4620      	mov	r0, r4
    40e2:	4b03      	ldr	r3, [pc, #12]	; (40f0 <delay_us+0x1c>)
    40e4:	4798      	blx	r3
    40e6:	bd10      	pop	{r4, pc}
    40e8:	20000658 	.word	0x20000658
    40ec:	000057f1 	.word	0x000057f1
    40f0:	000073b9 	.word	0x000073b9

000040f4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    40f4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    40f6:	4b04      	ldr	r3, [pc, #16]	; (4108 <delay_ms+0x14>)
    40f8:	681c      	ldr	r4, [r3, #0]
    40fa:	4b04      	ldr	r3, [pc, #16]	; (410c <delay_ms+0x18>)
    40fc:	4798      	blx	r3
    40fe:	4601      	mov	r1, r0
    4100:	4620      	mov	r0, r4
    4102:	4b03      	ldr	r3, [pc, #12]	; (4110 <delay_ms+0x1c>)
    4104:	4798      	blx	r3
    4106:	bd10      	pop	{r4, pc}
    4108:	20000658 	.word	0x20000658
    410c:	000057f9 	.word	0x000057f9
    4110:	000073b9 	.word	0x000073b9

00004114 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4114:	b508      	push	{r3, lr}
	return _event_system_init();
    4116:	4b01      	ldr	r3, [pc, #4]	; (411c <event_system_init+0x8>)
    4118:	4798      	blx	r3
}
    411a:	bd08      	pop	{r3, pc}
    411c:	00005b35 	.word	0x00005b35

00004120 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4120:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    4122:	6943      	ldr	r3, [r0, #20]
    4124:	b103      	cbz	r3, 4128 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    4126:	4798      	blx	r3
    4128:	bd08      	pop	{r3, pc}

0000412a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    412a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    412c:	6983      	ldr	r3, [r0, #24]
    412e:	b103      	cbz	r3, 4132 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4130:	4798      	blx	r3
    4132:	bd08      	pop	{r3, pc}

00004134 <flash_init>:
{
    4134:	b538      	push	{r3, r4, r5, lr}
    4136:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    4138:	4604      	mov	r4, r0
    413a:	b190      	cbz	r0, 4162 <flash_init+0x2e>
    413c:	1c08      	adds	r0, r1, #0
    413e:	bf18      	it	ne
    4140:	2001      	movne	r0, #1
    4142:	2238      	movs	r2, #56	; 0x38
    4144:	4908      	ldr	r1, [pc, #32]	; (4168 <flash_init+0x34>)
    4146:	4b09      	ldr	r3, [pc, #36]	; (416c <flash_init+0x38>)
    4148:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    414a:	4629      	mov	r1, r5
    414c:	4620      	mov	r0, r4
    414e:	4b08      	ldr	r3, [pc, #32]	; (4170 <flash_init+0x3c>)
    4150:	4798      	blx	r3
	if (rc) {
    4152:	4603      	mov	r3, r0
    4154:	b918      	cbnz	r0, 415e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    4156:	4a07      	ldr	r2, [pc, #28]	; (4174 <flash_init+0x40>)
    4158:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    415a:	4a07      	ldr	r2, [pc, #28]	; (4178 <flash_init+0x44>)
    415c:	6062      	str	r2, [r4, #4]
}
    415e:	4618      	mov	r0, r3
    4160:	bd38      	pop	{r3, r4, r5, pc}
    4162:	2000      	movs	r0, #0
    4164:	e7ed      	b.n	4142 <flash_init+0xe>
    4166:	bf00      	nop
    4168:	0000bdcc 	.word	0x0000bdcc
    416c:	00005259 	.word	0x00005259
    4170:	00005c41 	.word	0x00005c41
    4174:	00004121 	.word	0x00004121
    4178:	0000412b 	.word	0x0000412b

0000417c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    417c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    417e:	8843      	ldrh	r3, [r0, #2]
    4180:	f413 7f80 	tst.w	r3, #256	; 0x100
    4184:	d102      	bne.n	418c <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    4186:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4188:	b103      	cbz	r3, 418c <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    418a:	4798      	blx	r3
    418c:	bd08      	pop	{r3, pc}

0000418e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    418e:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4190:	8843      	ldrh	r3, [r0, #2]
    4192:	f413 7f80 	tst.w	r3, #256	; 0x100
    4196:	d102      	bne.n	419e <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    4198:	6b83      	ldr	r3, [r0, #56]	; 0x38
    419a:	b103      	cbz	r3, 419e <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    419c:	4798      	blx	r3
    419e:	bd08      	pop	{r3, pc}

000041a0 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    41a0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    41a2:	8843      	ldrh	r3, [r0, #2]
    41a4:	f413 7f80 	tst.w	r3, #256	; 0x100
    41a8:	d102      	bne.n	41b0 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    41aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    41ac:	b103      	cbz	r3, 41b0 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    41ae:	4798      	blx	r3
    41b0:	bd08      	pop	{r3, pc}
	...

000041b4 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    41b4:	b510      	push	{r4, lr}
    41b6:	b084      	sub	sp, #16
    41b8:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    41ba:	8a83      	ldrh	r3, [r0, #20]
    41bc:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    41c0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    41c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    41c6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    41ca:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    41cc:	a901      	add	r1, sp, #4
    41ce:	3828      	subs	r0, #40	; 0x28
    41d0:	4b03      	ldr	r3, [pc, #12]	; (41e0 <i2c_m_async_write+0x2c>)
    41d2:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    41d4:	2800      	cmp	r0, #0
    41d6:	bf08      	it	eq
    41d8:	4620      	moveq	r0, r4
    41da:	b004      	add	sp, #16
    41dc:	bd10      	pop	{r4, pc}
    41de:	bf00      	nop
    41e0:	000068a5 	.word	0x000068a5

000041e4 <i2c_m_async_read>:
{
    41e4:	b510      	push	{r4, lr}
    41e6:	b084      	sub	sp, #16
    41e8:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    41ea:	8a83      	ldrh	r3, [r0, #20]
    41ec:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    41f0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    41f2:	f248 0301 	movw	r3, #32769	; 0x8001
    41f6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    41fa:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    41fc:	a901      	add	r1, sp, #4
    41fe:	3828      	subs	r0, #40	; 0x28
    4200:	4b03      	ldr	r3, [pc, #12]	; (4210 <i2c_m_async_read+0x2c>)
    4202:	4798      	blx	r3
}
    4204:	2800      	cmp	r0, #0
    4206:	bf08      	it	eq
    4208:	4620      	moveq	r0, r4
    420a:	b004      	add	sp, #16
    420c:	bd10      	pop	{r4, pc}
    420e:	bf00      	nop
    4210:	000068a5 	.word	0x000068a5

00004214 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4214:	b570      	push	{r4, r5, r6, lr}
    4216:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    4218:	4604      	mov	r4, r0
    421a:	2289      	movs	r2, #137	; 0x89
    421c:	490f      	ldr	r1, [pc, #60]	; (425c <i2c_m_async_init+0x48>)
    421e:	3000      	adds	r0, #0
    4220:	bf18      	it	ne
    4222:	2001      	movne	r0, #1
    4224:	4b0e      	ldr	r3, [pc, #56]	; (4260 <i2c_m_async_init+0x4c>)
    4226:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4228:	4629      	mov	r1, r5
    422a:	4620      	mov	r0, r4
    422c:	4b0d      	ldr	r3, [pc, #52]	; (4264 <i2c_m_async_init+0x50>)
    422e:	4798      	blx	r3
	if (init_status) {
    4230:	4605      	mov	r5, r0
    4232:	b108      	cbz	r0, 4238 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4234:	4628      	mov	r0, r5
    4236:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    4238:	4b0b      	ldr	r3, [pc, #44]	; (4268 <i2c_m_async_init+0x54>)
    423a:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    423c:	4b0b      	ldr	r3, [pc, #44]	; (426c <i2c_m_async_init+0x58>)
    423e:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4240:	4a0b      	ldr	r2, [pc, #44]	; (4270 <i2c_m_async_init+0x5c>)
    4242:	2101      	movs	r1, #1
    4244:	4620      	mov	r0, r4
    4246:	4e0b      	ldr	r6, [pc, #44]	; (4274 <i2c_m_async_init+0x60>)
    4248:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    424a:	4a0b      	ldr	r2, [pc, #44]	; (4278 <i2c_m_async_init+0x64>)
    424c:	2102      	movs	r1, #2
    424e:	4620      	mov	r0, r4
    4250:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4252:	4a0a      	ldr	r2, [pc, #40]	; (427c <i2c_m_async_init+0x68>)
    4254:	2100      	movs	r1, #0
    4256:	4620      	mov	r0, r4
    4258:	47b0      	blx	r6
	return ERR_NONE;
    425a:	e7eb      	b.n	4234 <i2c_m_async_init+0x20>
    425c:	0000bde4 	.word	0x0000bde4
    4260:	00005259 	.word	0x00005259
    4264:	00006825 	.word	0x00006825
    4268:	000041e5 	.word	0x000041e5
    426c:	000041b5 	.word	0x000041b5
    4270:	0000417d 	.word	0x0000417d
    4274:	000069d5 	.word	0x000069d5
    4278:	0000418f 	.word	0x0000418f
    427c:	000041a1 	.word	0x000041a1

00004280 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4280:	b570      	push	{r4, r5, r6, lr}
    4282:	460d      	mov	r5, r1
    4284:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4286:	4604      	mov	r4, r0
    4288:	b160      	cbz	r0, 42a4 <io_write+0x24>
    428a:	1c08      	adds	r0, r1, #0
    428c:	bf18      	it	ne
    428e:	2001      	movne	r0, #1
    4290:	2234      	movs	r2, #52	; 0x34
    4292:	4905      	ldr	r1, [pc, #20]	; (42a8 <io_write+0x28>)
    4294:	4b05      	ldr	r3, [pc, #20]	; (42ac <io_write+0x2c>)
    4296:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    4298:	6823      	ldr	r3, [r4, #0]
    429a:	4632      	mov	r2, r6
    429c:	4629      	mov	r1, r5
    429e:	4620      	mov	r0, r4
    42a0:	4798      	blx	r3
}
    42a2:	bd70      	pop	{r4, r5, r6, pc}
    42a4:	2000      	movs	r0, #0
    42a6:	e7f3      	b.n	4290 <io_write+0x10>
    42a8:	0000be04 	.word	0x0000be04
    42ac:	00005259 	.word	0x00005259

000042b0 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    42b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42b2:	460f      	mov	r7, r1
    42b4:	4616      	mov	r6, r2
	ASSERT(io);
    42b6:	4604      	mov	r4, r0
    42b8:	f240 1227 	movw	r2, #295	; 0x127
    42bc:	4909      	ldr	r1, [pc, #36]	; (42e4 <_spi_m_async_io_write+0x34>)
    42be:	3000      	adds	r0, #0
    42c0:	bf18      	it	ne
    42c2:	2001      	movne	r0, #1
    42c4:	4b08      	ldr	r3, [pc, #32]	; (42e8 <_spi_m_async_io_write+0x38>)
    42c6:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    42c8:	2500      	movs	r5, #0
    42ca:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    42cc:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    42ce:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    42d0:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    42d2:	2310      	movs	r3, #16
    42d4:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    42d6:	2101      	movs	r1, #1
    42d8:	f1a4 0020 	sub.w	r0, r4, #32
    42dc:	4b03      	ldr	r3, [pc, #12]	; (42ec <_spi_m_async_io_write+0x3c>)
    42de:	4798      	blx	r3

	return ERR_NONE;
}
    42e0:	4628      	mov	r0, r5
    42e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42e4:	0000be18 	.word	0x0000be18
    42e8:	00005259 	.word	0x00005259
    42ec:	00006eb9 	.word	0x00006eb9

000042f0 <_spi_m_async_io_read>:
{
    42f0:	b570      	push	{r4, r5, r6, lr}
    42f2:	460d      	mov	r5, r1
    42f4:	4616      	mov	r6, r2
	ASSERT(io);
    42f6:	4604      	mov	r4, r0
    42f8:	f240 1205 	movw	r2, #261	; 0x105
    42fc:	490c      	ldr	r1, [pc, #48]	; (4330 <_spi_m_async_io_read+0x40>)
    42fe:	3000      	adds	r0, #0
    4300:	bf18      	it	ne
    4302:	2001      	movne	r0, #1
    4304:	4b0b      	ldr	r3, [pc, #44]	; (4334 <_spi_m_async_io_read+0x44>)
    4306:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    4308:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    430a:	2500      	movs	r5, #0
    430c:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    430e:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4310:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4312:	2310      	movs	r3, #16
    4314:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    4316:	3c20      	subs	r4, #32
    4318:	2101      	movs	r1, #1
    431a:	4620      	mov	r0, r4
    431c:	4b06      	ldr	r3, [pc, #24]	; (4338 <_spi_m_async_io_read+0x48>)
    431e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4320:	f240 11ff 	movw	r1, #511	; 0x1ff
    4324:	4620      	mov	r0, r4
    4326:	4b05      	ldr	r3, [pc, #20]	; (433c <_spi_m_async_io_read+0x4c>)
    4328:	4798      	blx	r3
}
    432a:	4628      	mov	r0, r5
    432c:	bd70      	pop	{r4, r5, r6, pc}
    432e:	bf00      	nop
    4330:	0000be18 	.word	0x0000be18
    4334:	00005259 	.word	0x00005259
    4338:	00006eed 	.word	0x00006eed
    433c:	00006f69 	.word	0x00006f69

00004340 <_spi_dev_error>:
{
    4340:	b570      	push	{r4, r5, r6, lr}
    4342:	4604      	mov	r4, r0
    4344:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4346:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    4348:	2100      	movs	r1, #0
    434a:	4b09      	ldr	r3, [pc, #36]	; (4370 <_spi_dev_error+0x30>)
    434c:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    434e:	2100      	movs	r1, #0
    4350:	4620      	mov	r0, r4
    4352:	4b08      	ldr	r3, [pc, #32]	; (4374 <_spi_dev_error+0x34>)
    4354:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    4356:	2100      	movs	r1, #0
    4358:	4620      	mov	r0, r4
    435a:	4b07      	ldr	r3, [pc, #28]	; (4378 <_spi_dev_error+0x38>)
    435c:	4798      	blx	r3
	spi->stat = 0;
    435e:	2300      	movs	r3, #0
    4360:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    4364:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4366:	b113      	cbz	r3, 436e <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    4368:	4631      	mov	r1, r6
    436a:	4628      	mov	r0, r5
    436c:	4798      	blx	r3
    436e:	bd70      	pop	{r4, r5, r6, pc}
    4370:	00006eb9 	.word	0x00006eb9
    4374:	00006eed 	.word	0x00006eed
    4378:	00006f2d 	.word	0x00006f2d

0000437c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    437c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    437e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4380:	429a      	cmp	r2, r3
    4382:	d200      	bcs.n	4386 <_spi_dev_complete+0xa>
    4384:	4770      	bx	lr
{
    4386:	b510      	push	{r4, lr}
    4388:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    438a:	2100      	movs	r1, #0
    438c:	4b04      	ldr	r3, [pc, #16]	; (43a0 <_spi_dev_complete+0x24>)
    438e:	4798      	blx	r3
		spi->stat = 0;
    4390:	2300      	movs	r3, #0
    4392:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4398:	b10b      	cbz	r3, 439e <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    439a:	1f20      	subs	r0, r4, #4
    439c:	4798      	blx	r3
    439e:	bd10      	pop	{r4, pc}
    43a0:	00006f2d 	.word	0x00006f2d

000043a4 <_spi_dev_tx>:
{
    43a4:	b510      	push	{r4, lr}
    43a6:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    43a8:	7903      	ldrb	r3, [r0, #4]
    43aa:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    43ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
    43ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
    43b0:	f103 0101 	add.w	r1, r3, #1
    43b4:	6401      	str	r1, [r0, #64]	; 0x40
    43b6:	bf94      	ite	ls
    43b8:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    43ba:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    43be:	4b08      	ldr	r3, [pc, #32]	; (43e0 <_spi_dev_tx+0x3c>)
    43c0:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    43c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    43c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    43c6:	429a      	cmp	r2, r3
    43c8:	d000      	beq.n	43cc <_spi_dev_tx+0x28>
    43ca:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    43cc:	2100      	movs	r1, #0
    43ce:	4620      	mov	r0, r4
    43d0:	4b04      	ldr	r3, [pc, #16]	; (43e4 <_spi_dev_tx+0x40>)
    43d2:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    43d4:	2101      	movs	r1, #1
    43d6:	4620      	mov	r0, r4
    43d8:	4b03      	ldr	r3, [pc, #12]	; (43e8 <_spi_dev_tx+0x44>)
    43da:	4798      	blx	r3
}
    43dc:	e7f5      	b.n	43ca <_spi_dev_tx+0x26>
    43de:	bf00      	nop
    43e0:	00006f69 	.word	0x00006f69
    43e4:	00006eb9 	.word	0x00006eb9
    43e8:	00006f2d 	.word	0x00006f2d

000043ec <_spi_dev_rx>:
{
    43ec:	b570      	push	{r4, r5, r6, lr}
    43ee:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    43f0:	6b85      	ldr	r5, [r0, #56]	; 0x38
    43f2:	b305      	cbz	r5, 4436 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    43f4:	7903      	ldrb	r3, [r0, #4]
    43f6:	2b01      	cmp	r3, #1
    43f8:	d916      	bls.n	4428 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    43fa:	6c06      	ldr	r6, [r0, #64]	; 0x40
    43fc:	1c73      	adds	r3, r6, #1
    43fe:	6403      	str	r3, [r0, #64]	; 0x40
    4400:	4b18      	ldr	r3, [pc, #96]	; (4464 <_spi_dev_rx+0x78>)
    4402:	4798      	blx	r3
    4404:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    4408:	6c23      	ldr	r3, [r4, #64]	; 0x40
    440a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    440c:	4293      	cmp	r3, r2
    440e:	d21d      	bcs.n	444c <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    4410:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4412:	b1b2      	cbz	r2, 4442 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    4414:	7921      	ldrb	r1, [r4, #4]
    4416:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4418:	bf94      	ite	ls
    441a:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    441c:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4420:	4620      	mov	r0, r4
    4422:	4b11      	ldr	r3, [pc, #68]	; (4468 <_spi_dev_rx+0x7c>)
    4424:	4798      	blx	r3
    4426:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4428:	6c06      	ldr	r6, [r0, #64]	; 0x40
    442a:	1c73      	adds	r3, r6, #1
    442c:	6403      	str	r3, [r0, #64]	; 0x40
    442e:	4b0d      	ldr	r3, [pc, #52]	; (4464 <_spi_dev_rx+0x78>)
    4430:	4798      	blx	r3
    4432:	55a8      	strb	r0, [r5, r6]
    4434:	e7e8      	b.n	4408 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    4436:	4b0b      	ldr	r3, [pc, #44]	; (4464 <_spi_dev_rx+0x78>)
    4438:	4798      	blx	r3
		spi->xfercnt++;
    443a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    443c:	3301      	adds	r3, #1
    443e:	6423      	str	r3, [r4, #64]	; 0x40
    4440:	e7e2      	b.n	4408 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4442:	88e1      	ldrh	r1, [r4, #6]
    4444:	4620      	mov	r0, r4
    4446:	4b08      	ldr	r3, [pc, #32]	; (4468 <_spi_dev_rx+0x7c>)
    4448:	4798      	blx	r3
    444a:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    444c:	2100      	movs	r1, #0
    444e:	4620      	mov	r0, r4
    4450:	4b06      	ldr	r3, [pc, #24]	; (446c <_spi_dev_rx+0x80>)
    4452:	4798      	blx	r3
		spi->stat = 0;
    4454:	2300      	movs	r3, #0
    4456:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    445a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    445c:	b10b      	cbz	r3, 4462 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    445e:	1f20      	subs	r0, r4, #4
    4460:	4798      	blx	r3
    4462:	bd70      	pop	{r4, r5, r6, pc}
    4464:	00006f99 	.word	0x00006f99
    4468:	00006f69 	.word	0x00006f69
    446c:	00006eed 	.word	0x00006eed

00004470 <spi_m_async_init>:
{
    4470:	b570      	push	{r4, r5, r6, lr}
    4472:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    4474:	4606      	mov	r6, r0
    4476:	b330      	cbz	r0, 44c6 <spi_m_async_init+0x56>
    4478:	1c08      	adds	r0, r1, #0
    447a:	bf18      	it	ne
    447c:	2001      	movne	r0, #1
    447e:	22a5      	movs	r2, #165	; 0xa5
    4480:	4912      	ldr	r1, [pc, #72]	; (44cc <spi_m_async_init+0x5c>)
    4482:	4b13      	ldr	r3, [pc, #76]	; (44d0 <spi_m_async_init+0x60>)
    4484:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4486:	4634      	mov	r4, r6
    4488:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    448c:	4629      	mov	r1, r5
    448e:	4620      	mov	r0, r4
    4490:	4b10      	ldr	r3, [pc, #64]	; (44d4 <spi_m_async_init+0x64>)
    4492:	4798      	blx	r3
	if (rc >= 0) {
    4494:	2800      	cmp	r0, #0
    4496:	db15      	blt.n	44c4 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4498:	4a0f      	ldr	r2, [pc, #60]	; (44d8 <spi_m_async_init+0x68>)
    449a:	2100      	movs	r1, #0
    449c:	4620      	mov	r0, r4
    449e:	4d0f      	ldr	r5, [pc, #60]	; (44dc <spi_m_async_init+0x6c>)
    44a0:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    44a2:	4a0f      	ldr	r2, [pc, #60]	; (44e0 <spi_m_async_init+0x70>)
    44a4:	2101      	movs	r1, #1
    44a6:	4620      	mov	r0, r4
    44a8:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    44aa:	4a0e      	ldr	r2, [pc, #56]	; (44e4 <spi_m_async_init+0x74>)
    44ac:	2102      	movs	r1, #2
    44ae:	4620      	mov	r0, r4
    44b0:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    44b2:	4a0d      	ldr	r2, [pc, #52]	; (44e8 <spi_m_async_init+0x78>)
    44b4:	2103      	movs	r1, #3
    44b6:	4620      	mov	r0, r4
    44b8:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    44ba:	4b0c      	ldr	r3, [pc, #48]	; (44ec <spi_m_async_init+0x7c>)
    44bc:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    44be:	4b0c      	ldr	r3, [pc, #48]	; (44f0 <spi_m_async_init+0x80>)
    44c0:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    44c2:	2000      	movs	r0, #0
}
    44c4:	bd70      	pop	{r4, r5, r6, pc}
    44c6:	2000      	movs	r0, #0
    44c8:	e7d9      	b.n	447e <spi_m_async_init+0xe>
    44ca:	bf00      	nop
    44cc:	0000be18 	.word	0x0000be18
    44d0:	00005259 	.word	0x00005259
    44d4:	00006db1 	.word	0x00006db1
    44d8:	000043a5 	.word	0x000043a5
    44dc:	00006fc5 	.word	0x00006fc5
    44e0:	000043ed 	.word	0x000043ed
    44e4:	0000437d 	.word	0x0000437d
    44e8:	00004341 	.word	0x00004341
    44ec:	000042f1 	.word	0x000042f1
    44f0:	000042b1 	.word	0x000042b1

000044f4 <spi_m_async_enable>:
{
    44f4:	b510      	push	{r4, lr}
	ASSERT(spi);
    44f6:	4604      	mov	r4, r0
    44f8:	22c1      	movs	r2, #193	; 0xc1
    44fa:	4905      	ldr	r1, [pc, #20]	; (4510 <spi_m_async_enable+0x1c>)
    44fc:	3000      	adds	r0, #0
    44fe:	bf18      	it	ne
    4500:	2001      	movne	r0, #1
    4502:	4b04      	ldr	r3, [pc, #16]	; (4514 <spi_m_async_enable+0x20>)
    4504:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    4506:	1d20      	adds	r0, r4, #4
    4508:	4b03      	ldr	r3, [pc, #12]	; (4518 <spi_m_async_enable+0x24>)
    450a:	4798      	blx	r3
    450c:	bd10      	pop	{r4, pc}
    450e:	bf00      	nop
    4510:	0000be18 	.word	0x0000be18
    4514:	00005259 	.word	0x00005259
    4518:	00006e19 	.word	0x00006e19

0000451c <spi_m_async_set_baudrate>:
{
    451c:	b538      	push	{r3, r4, r5, lr}
    451e:	460d      	mov	r5, r1
	ASSERT(spi);
    4520:	4604      	mov	r4, r0
    4522:	22cf      	movs	r2, #207	; 0xcf
    4524:	4909      	ldr	r1, [pc, #36]	; (454c <spi_m_async_set_baudrate+0x30>)
    4526:	3000      	adds	r0, #0
    4528:	bf18      	it	ne
    452a:	2001      	movne	r0, #1
    452c:	4b08      	ldr	r3, [pc, #32]	; (4550 <spi_m_async_set_baudrate+0x34>)
    452e:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4530:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4534:	f013 0f10 	tst.w	r3, #16
    4538:	d104      	bne.n	4544 <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    453a:	4629      	mov	r1, r5
    453c:	1d20      	adds	r0, r4, #4
    453e:	4b05      	ldr	r3, [pc, #20]	; (4554 <spi_m_async_set_baudrate+0x38>)
    4540:	4798      	blx	r3
    4542:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4544:	f06f 0003 	mvn.w	r0, #3
}
    4548:	bd38      	pop	{r3, r4, r5, pc}
    454a:	bf00      	nop
    454c:	0000be18 	.word	0x0000be18
    4550:	00005259 	.word	0x00005259
    4554:	00006e7d 	.word	0x00006e7d

00004558 <spi_m_async_set_mode>:
{
    4558:	b538      	push	{r3, r4, r5, lr}
    455a:	460d      	mov	r5, r1
	ASSERT(spi);
    455c:	4604      	mov	r4, r0
    455e:	22d9      	movs	r2, #217	; 0xd9
    4560:	4909      	ldr	r1, [pc, #36]	; (4588 <spi_m_async_set_mode+0x30>)
    4562:	3000      	adds	r0, #0
    4564:	bf18      	it	ne
    4566:	2001      	movne	r0, #1
    4568:	4b08      	ldr	r3, [pc, #32]	; (458c <spi_m_async_set_mode+0x34>)
    456a:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    456c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4570:	f013 0f10 	tst.w	r3, #16
    4574:	d104      	bne.n	4580 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    4576:	4629      	mov	r1, r5
    4578:	1d20      	adds	r0, r4, #4
    457a:	4b05      	ldr	r3, [pc, #20]	; (4590 <spi_m_async_set_mode+0x38>)
    457c:	4798      	blx	r3
    457e:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4580:	f06f 0003 	mvn.w	r0, #3
}
    4584:	bd38      	pop	{r3, r4, r5, pc}
    4586:	bf00      	nop
    4588:	0000be18 	.word	0x0000be18
    458c:	00005259 	.word	0x00005259
    4590:	00006e49 	.word	0x00006e49

00004594 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    4594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4596:	460d      	mov	r5, r1
    4598:	4617      	mov	r7, r2
    459a:	461e      	mov	r6, r3
	ASSERT(spi);
    459c:	4604      	mov	r4, r0
    459e:	f44f 729c 	mov.w	r2, #312	; 0x138
    45a2:	4912      	ldr	r1, [pc, #72]	; (45ec <spi_m_async_transfer+0x58>)
    45a4:	3000      	adds	r0, #0
    45a6:	bf18      	it	ne
    45a8:	2001      	movne	r0, #1
    45aa:	4b11      	ldr	r3, [pc, #68]	; (45f0 <spi_m_async_transfer+0x5c>)
    45ac:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    45ae:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    45b0:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    45b2:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    45b4:	2300      	movs	r3, #0
    45b6:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    45b8:	2310      	movs	r3, #16
    45ba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    45be:	1d26      	adds	r6, r4, #4
    45c0:	2101      	movs	r1, #1
    45c2:	4630      	mov	r0, r6
    45c4:	4b0b      	ldr	r3, [pc, #44]	; (45f4 <spi_m_async_transfer+0x60>)
    45c6:	4798      	blx	r3
	if (txbuf) {
    45c8:	b15d      	cbz	r5, 45e2 <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    45ca:	7a23      	ldrb	r3, [r4, #8]
    45cc:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    45ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
    45d0:	bf94      	ite	ls
    45d2:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    45d4:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    45d8:	4630      	mov	r0, r6
    45da:	4b07      	ldr	r3, [pc, #28]	; (45f8 <spi_m_async_transfer+0x64>)
    45dc:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    45de:	2000      	movs	r0, #0
    45e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    45e2:	8961      	ldrh	r1, [r4, #10]
    45e4:	4630      	mov	r0, r6
    45e6:	4b04      	ldr	r3, [pc, #16]	; (45f8 <spi_m_async_transfer+0x64>)
    45e8:	4798      	blx	r3
    45ea:	e7f8      	b.n	45de <spi_m_async_transfer+0x4a>
    45ec:	0000be18 	.word	0x0000be18
    45f0:	00005259 	.word	0x00005259
    45f4:	00006eed 	.word	0x00006eed
    45f8:	00006f69 	.word	0x00006f69

000045fc <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    45fc:	b570      	push	{r4, r5, r6, lr}
    45fe:	460c      	mov	r4, r1
    4600:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    4602:	4605      	mov	r5, r0
    4604:	b158      	cbz	r0, 461e <spi_m_async_register_callback+0x22>
    4606:	2901      	cmp	r1, #1
    4608:	bf8c      	ite	hi
    460a:	2000      	movhi	r0, #0
    460c:	2001      	movls	r0, #1
    460e:	f240 1263 	movw	r2, #355	; 0x163
    4612:	4908      	ldr	r1, [pc, #32]	; (4634 <spi_m_async_register_callback+0x38>)
    4614:	4b08      	ldr	r3, [pc, #32]	; (4638 <spi_m_async_register_callback+0x3c>)
    4616:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    4618:	b91c      	cbnz	r4, 4622 <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    461a:	632e      	str	r6, [r5, #48]	; 0x30
    461c:	bd70      	pop	{r4, r5, r6, pc}
    461e:	2000      	movs	r0, #0
    4620:	e7f5      	b.n	460e <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    4622:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    4624:	1c32      	adds	r2, r6, #0
    4626:	bf18      	it	ne
    4628:	2201      	movne	r2, #1
    462a:	2103      	movs	r1, #3
    462c:	1d28      	adds	r0, r5, #4
    462e:	4b03      	ldr	r3, [pc, #12]	; (463c <spi_m_async_register_callback+0x40>)
    4630:	4798      	blx	r3
    4632:	bd70      	pop	{r4, r5, r6, pc}
    4634:	0000be18 	.word	0x0000be18
    4638:	00005259 	.word	0x00005259
    463c:	00006ff9 	.word	0x00006ff9

00004640 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    4640:	b538      	push	{r3, r4, r5, lr}
    4642:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4644:	4604      	mov	r4, r0
    4646:	b158      	cbz	r0, 4660 <spi_m_async_get_io_descriptor+0x20>
    4648:	1c08      	adds	r0, r1, #0
    464a:	bf18      	it	ne
    464c:	2001      	movne	r0, #1
    464e:	f240 126f 	movw	r2, #367	; 0x16f
    4652:	4904      	ldr	r1, [pc, #16]	; (4664 <spi_m_async_get_io_descriptor+0x24>)
    4654:	4b04      	ldr	r3, [pc, #16]	; (4668 <spi_m_async_get_io_descriptor+0x28>)
    4656:	4798      	blx	r3
	*io = &spi->io;
    4658:	3424      	adds	r4, #36	; 0x24
    465a:	602c      	str	r4, [r5, #0]
	return 0;
}
    465c:	2000      	movs	r0, #0
    465e:	bd38      	pop	{r3, r4, r5, pc}
    4660:	2000      	movs	r0, #0
    4662:	e7f4      	b.n	464e <spi_m_async_get_io_descriptor+0xe>
    4664:	0000be18 	.word	0x0000be18
    4668:	00005259 	.word	0x00005259

0000466c <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    466c:	b570      	push	{r4, r5, r6, lr}
    466e:	460d      	mov	r5, r1
    4670:	4616      	mov	r6, r2
	ASSERT(io);
    4672:	4604      	mov	r4, r0
    4674:	2298      	movs	r2, #152	; 0x98
    4676:	4907      	ldr	r1, [pc, #28]	; (4694 <_spi_m_dma_io_write+0x28>)
    4678:	3000      	adds	r0, #0
    467a:	bf18      	it	ne
    467c:	2001      	movne	r0, #1
    467e:	4b06      	ldr	r3, [pc, #24]	; (4698 <_spi_m_dma_io_write+0x2c>)
    4680:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    4682:	4633      	mov	r3, r6
    4684:	2200      	movs	r2, #0
    4686:	4629      	mov	r1, r5
    4688:	f1a4 001c 	sub.w	r0, r4, #28
    468c:	4c03      	ldr	r4, [pc, #12]	; (469c <_spi_m_dma_io_write+0x30>)
    468e:	47a0      	blx	r4
}
    4690:	bd70      	pop	{r4, r5, r6, pc}
    4692:	bf00      	nop
    4694:	0000be38 	.word	0x0000be38
    4698:	00005259 	.word	0x00005259
    469c:	0000724d 	.word	0x0000724d

000046a0 <_spi_m_dma_io_read>:
{
    46a0:	b570      	push	{r4, r5, r6, lr}
    46a2:	460d      	mov	r5, r1
    46a4:	4616      	mov	r6, r2
	ASSERT(io);
    46a6:	4604      	mov	r4, r0
    46a8:	2281      	movs	r2, #129	; 0x81
    46aa:	4907      	ldr	r1, [pc, #28]	; (46c8 <_spi_m_dma_io_read+0x28>)
    46ac:	3000      	adds	r0, #0
    46ae:	bf18      	it	ne
    46b0:	2001      	movne	r0, #1
    46b2:	4b06      	ldr	r3, [pc, #24]	; (46cc <_spi_m_dma_io_read+0x2c>)
    46b4:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    46b6:	4633      	mov	r3, r6
    46b8:	462a      	mov	r2, r5
    46ba:	2100      	movs	r1, #0
    46bc:	f1a4 001c 	sub.w	r0, r4, #28
    46c0:	4c03      	ldr	r4, [pc, #12]	; (46d0 <_spi_m_dma_io_read+0x30>)
    46c2:	47a0      	blx	r4
}
    46c4:	bd70      	pop	{r4, r5, r6, pc}
    46c6:	bf00      	nop
    46c8:	0000be38 	.word	0x0000be38
    46cc:	00005259 	.word	0x00005259
    46d0:	0000724d 	.word	0x0000724d

000046d4 <spi_m_dma_init>:
{
    46d4:	b538      	push	{r3, r4, r5, lr}
    46d6:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    46d8:	4605      	mov	r5, r0
    46da:	b1a0      	cbz	r0, 4706 <spi_m_dma_init+0x32>
    46dc:	1c08      	adds	r0, r1, #0
    46de:	bf18      	it	ne
    46e0:	2001      	movne	r0, #1
    46e2:	223b      	movs	r2, #59	; 0x3b
    46e4:	4909      	ldr	r1, [pc, #36]	; (470c <spi_m_dma_init+0x38>)
    46e6:	4b0a      	ldr	r3, [pc, #40]	; (4710 <spi_m_dma_init+0x3c>)
    46e8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    46ea:	4628      	mov	r0, r5
    46ec:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    46f0:	4621      	mov	r1, r4
    46f2:	4b08      	ldr	r3, [pc, #32]	; (4714 <spi_m_dma_init+0x40>)
    46f4:	4798      	blx	r3
	if (rc) {
    46f6:	4603      	mov	r3, r0
    46f8:	b918      	cbnz	r0, 4702 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    46fa:	4a07      	ldr	r2, [pc, #28]	; (4718 <spi_m_dma_init+0x44>)
    46fc:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    46fe:	4a07      	ldr	r2, [pc, #28]	; (471c <spi_m_dma_init+0x48>)
    4700:	622a      	str	r2, [r5, #32]
}
    4702:	4618      	mov	r0, r3
    4704:	bd38      	pop	{r3, r4, r5, pc}
    4706:	2000      	movs	r0, #0
    4708:	e7eb      	b.n	46e2 <spi_m_dma_init+0xe>
    470a:	bf00      	nop
    470c:	0000be38 	.word	0x0000be38
    4710:	00005259 	.word	0x00005259
    4714:	00007031 	.word	0x00007031
    4718:	000046a1 	.word	0x000046a1
    471c:	0000466d 	.word	0x0000466d

00004720 <spi_m_dma_enable>:
{
    4720:	b510      	push	{r4, lr}
	ASSERT(spi);
    4722:	4604      	mov	r4, r0
    4724:	2251      	movs	r2, #81	; 0x51
    4726:	4905      	ldr	r1, [pc, #20]	; (473c <spi_m_dma_enable+0x1c>)
    4728:	3000      	adds	r0, #0
    472a:	bf18      	it	ne
    472c:	2001      	movne	r0, #1
    472e:	4b04      	ldr	r3, [pc, #16]	; (4740 <spi_m_dma_enable+0x20>)
    4730:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    4732:	1d20      	adds	r0, r4, #4
    4734:	4b03      	ldr	r3, [pc, #12]	; (4744 <spi_m_dma_enable+0x24>)
    4736:	4798      	blx	r3
    4738:	bd10      	pop	{r4, pc}
    473a:	bf00      	nop
    473c:	0000be38 	.word	0x0000be38
    4740:	00005259 	.word	0x00005259
    4744:	000071ad 	.word	0x000071ad

00004748 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    4748:	b570      	push	{r4, r5, r6, lr}
    474a:	460d      	mov	r5, r1
    474c:	4616      	mov	r6, r2
	ASSERT(spi);
    474e:	4604      	mov	r4, r0
    4750:	22a8      	movs	r2, #168	; 0xa8
    4752:	4906      	ldr	r1, [pc, #24]	; (476c <spi_m_dma_register_callback+0x24>)
    4754:	3000      	adds	r0, #0
    4756:	bf18      	it	ne
    4758:	2001      	movne	r0, #1
    475a:	4b05      	ldr	r3, [pc, #20]	; (4770 <spi_m_dma_register_callback+0x28>)
    475c:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    475e:	4632      	mov	r2, r6
    4760:	4629      	mov	r1, r5
    4762:	1d20      	adds	r0, r4, #4
    4764:	4b03      	ldr	r3, [pc, #12]	; (4774 <spi_m_dma_register_callback+0x2c>)
    4766:	4798      	blx	r3
    4768:	bd70      	pop	{r4, r5, r6, pc}
    476a:	bf00      	nop
    476c:	0000be38 	.word	0x0000be38
    4770:	00005259 	.word	0x00005259
    4774:	000071dd 	.word	0x000071dd

00004778 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    4778:	b538      	push	{r3, r4, r5, lr}
    477a:	460d      	mov	r5, r1
	ASSERT(spi && io);
    477c:	4604      	mov	r4, r0
    477e:	b150      	cbz	r0, 4796 <spi_m_dma_get_io_descriptor+0x1e>
    4780:	1c08      	adds	r0, r1, #0
    4782:	bf18      	it	ne
    4784:	2001      	movne	r0, #1
    4786:	22ae      	movs	r2, #174	; 0xae
    4788:	4904      	ldr	r1, [pc, #16]	; (479c <spi_m_dma_get_io_descriptor+0x24>)
    478a:	4b05      	ldr	r3, [pc, #20]	; (47a0 <spi_m_dma_get_io_descriptor+0x28>)
    478c:	4798      	blx	r3
	*io = &spi->io;
    478e:	3420      	adds	r4, #32
    4790:	602c      	str	r4, [r5, #0]

	return 0;
}
    4792:	2000      	movs	r0, #0
    4794:	bd38      	pop	{r3, r4, r5, pc}
    4796:	2000      	movs	r0, #0
    4798:	e7f5      	b.n	4786 <spi_m_dma_get_io_descriptor+0xe>
    479a:	bf00      	nop
    479c:	0000be38 	.word	0x0000be38
    47a0:	00005259 	.word	0x00005259

000047a4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    47a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47a6:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    47a8:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    47aa:	b12f      	cbz	r7, 47b8 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    47ac:	688d      	ldr	r5, [r1, #8]
    47ae:	463c      	mov	r4, r7
    47b0:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    47b2:	f1c2 0e01 	rsb	lr, r2, #1
    47b6:	e00b      	b.n	47d0 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    47b8:	4b0e      	ldr	r3, [pc, #56]	; (47f4 <timer_add_timer_task+0x50>)
    47ba:	4798      	blx	r3
		return;
    47bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    47be:	4473      	add	r3, lr
    47c0:	68a0      	ldr	r0, [r4, #8]
    47c2:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    47c4:	42ab      	cmp	r3, r5
    47c6:	d20a      	bcs.n	47de <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    47c8:	6823      	ldr	r3, [r4, #0]
    47ca:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    47cc:	b153      	cbz	r3, 47e4 <timer_add_timer_task+0x40>
    47ce:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    47d0:	6863      	ldr	r3, [r4, #4]
    47d2:	4293      	cmp	r3, r2
    47d4:	d8f3      	bhi.n	47be <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    47d6:	68a0      	ldr	r0, [r4, #8]
    47d8:	4403      	add	r3, r0
    47da:	1a9b      	subs	r3, r3, r2
    47dc:	e7f2      	b.n	47c4 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    47de:	42a7      	cmp	r7, r4
    47e0:	d004      	beq.n	47ec <timer_add_timer_task+0x48>
    47e2:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    47e4:	4620      	mov	r0, r4
    47e6:	4b04      	ldr	r3, [pc, #16]	; (47f8 <timer_add_timer_task+0x54>)
    47e8:	4798      	blx	r3
    47ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    47ec:	4660      	mov	r0, ip
    47ee:	4b01      	ldr	r3, [pc, #4]	; (47f4 <timer_add_timer_task+0x50>)
    47f0:	4798      	blx	r3
    47f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47f4:	00005281 	.word	0x00005281
    47f8:	000052ad 	.word	0x000052ad

000047fc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    47fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    4800:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    4802:	6907      	ldr	r7, [r0, #16]
    4804:	3701      	adds	r7, #1
    4806:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4808:	7e03      	ldrb	r3, [r0, #24]
    480a:	f013 0f01 	tst.w	r3, #1
    480e:	d113      	bne.n	4838 <timer_process_counted+0x3c>
    4810:	7e03      	ldrb	r3, [r0, #24]
    4812:	f013 0f02 	tst.w	r3, #2
    4816:	d10f      	bne.n	4838 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    4818:	b354      	cbz	r4, 4870 <timer_process_counted+0x74>
    481a:	6863      	ldr	r3, [r4, #4]
    481c:	1afb      	subs	r3, r7, r3
    481e:	68a2      	ldr	r2, [r4, #8]
    4820:	4293      	cmp	r3, r2
    4822:	d307      	bcc.n	4834 <timer_process_counted+0x38>
    4824:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    4826:	f100 0814 	add.w	r8, r0, #20
    482a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4874 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    482e:	f8df a048 	ldr.w	sl, [pc, #72]	; 4878 <timer_process_counted+0x7c>
    4832:	e012      	b.n	485a <timer_process_counted+0x5e>
    4834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4838:	7e03      	ldrb	r3, [r0, #24]
    483a:	f043 0302 	orr.w	r3, r3, #2
    483e:	7603      	strb	r3, [r0, #24]
		return;
    4840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4844:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    4846:	68e3      	ldr	r3, [r4, #12]
    4848:	4620      	mov	r0, r4
    484a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    484c:	b185      	cbz	r5, 4870 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    484e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    4850:	686b      	ldr	r3, [r5, #4]
    4852:	1afb      	subs	r3, r7, r3
    4854:	68aa      	ldr	r2, [r5, #8]
    4856:	4293      	cmp	r3, r2
    4858:	d30a      	bcc.n	4870 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    485a:	4640      	mov	r0, r8
    485c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    485e:	7c23      	ldrb	r3, [r4, #16]
    4860:	2b01      	cmp	r3, #1
    4862:	d1ef      	bne.n	4844 <timer_process_counted+0x48>
			tmp->time_label = time;
    4864:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4866:	463a      	mov	r2, r7
    4868:	4621      	mov	r1, r4
    486a:	4640      	mov	r0, r8
    486c:	47d0      	blx	sl
    486e:	e7e9      	b.n	4844 <timer_process_counted+0x48>
    4870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4874:	000052f5 	.word	0x000052f5
    4878:	000047a5 	.word	0x000047a5

0000487c <timer_init>:
{
    487c:	b570      	push	{r4, r5, r6, lr}
    487e:	460e      	mov	r6, r1
    4880:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    4882:	4604      	mov	r4, r0
    4884:	b190      	cbz	r0, 48ac <timer_init+0x30>
    4886:	b199      	cbz	r1, 48b0 <timer_init+0x34>
    4888:	1c10      	adds	r0, r2, #0
    488a:	bf18      	it	ne
    488c:	2001      	movne	r0, #1
    488e:	223b      	movs	r2, #59	; 0x3b
    4890:	4908      	ldr	r1, [pc, #32]	; (48b4 <timer_init+0x38>)
    4892:	4b09      	ldr	r3, [pc, #36]	; (48b8 <timer_init+0x3c>)
    4894:	4798      	blx	r3
	descr->func = func;
    4896:	4620      	mov	r0, r4
    4898:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    489c:	682b      	ldr	r3, [r5, #0]
    489e:	4631      	mov	r1, r6
    48a0:	4798      	blx	r3
	descr->time                           = 0;
    48a2:	2000      	movs	r0, #0
    48a4:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    48a6:	4b05      	ldr	r3, [pc, #20]	; (48bc <timer_init+0x40>)
    48a8:	6063      	str	r3, [r4, #4]
}
    48aa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    48ac:	2000      	movs	r0, #0
    48ae:	e7ee      	b.n	488e <timer_init+0x12>
    48b0:	2000      	movs	r0, #0
    48b2:	e7ec      	b.n	488e <timer_init+0x12>
    48b4:	0000be54 	.word	0x0000be54
    48b8:	00005259 	.word	0x00005259
    48bc:	000047fd 	.word	0x000047fd

000048c0 <timer_start>:
{
    48c0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    48c2:	4604      	mov	r4, r0
    48c4:	b198      	cbz	r0, 48ee <timer_start+0x2e>
    48c6:	6800      	ldr	r0, [r0, #0]
    48c8:	3000      	adds	r0, #0
    48ca:	bf18      	it	ne
    48cc:	2001      	movne	r0, #1
    48ce:	2254      	movs	r2, #84	; 0x54
    48d0:	4909      	ldr	r1, [pc, #36]	; (48f8 <timer_start+0x38>)
    48d2:	4b0a      	ldr	r3, [pc, #40]	; (48fc <timer_start+0x3c>)
    48d4:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    48d6:	1d25      	adds	r5, r4, #4
    48d8:	6823      	ldr	r3, [r4, #0]
    48da:	699b      	ldr	r3, [r3, #24]
    48dc:	4628      	mov	r0, r5
    48de:	4798      	blx	r3
    48e0:	b938      	cbnz	r0, 48f2 <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    48e2:	6823      	ldr	r3, [r4, #0]
    48e4:	689b      	ldr	r3, [r3, #8]
    48e6:	4628      	mov	r0, r5
    48e8:	4798      	blx	r3
	return ERR_NONE;
    48ea:	2000      	movs	r0, #0
    48ec:	bd38      	pop	{r3, r4, r5, pc}
    48ee:	2000      	movs	r0, #0
    48f0:	e7ed      	b.n	48ce <timer_start+0xe>
		return ERR_DENIED;
    48f2:	f06f 0010 	mvn.w	r0, #16
}
    48f6:	bd38      	pop	{r3, r4, r5, pc}
    48f8:	0000be54 	.word	0x0000be54
    48fc:	00005259 	.word	0x00005259

00004900 <timer_add_task>:
{
    4900:	b570      	push	{r4, r5, r6, lr}
    4902:	b082      	sub	sp, #8
    4904:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    4906:	4604      	mov	r4, r0
    4908:	b328      	cbz	r0, 4956 <timer_add_task+0x56>
    490a:	b331      	cbz	r1, 495a <timer_add_task+0x5a>
    490c:	6800      	ldr	r0, [r0, #0]
    490e:	3000      	adds	r0, #0
    4910:	bf18      	it	ne
    4912:	2001      	movne	r0, #1
    4914:	227b      	movs	r2, #123	; 0x7b
    4916:	4920      	ldr	r1, [pc, #128]	; (4998 <timer_add_task+0x98>)
    4918:	4b20      	ldr	r3, [pc, #128]	; (499c <timer_add_task+0x9c>)
    491a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    491c:	7f23      	ldrb	r3, [r4, #28]
    491e:	f043 0301 	orr.w	r3, r3, #1
    4922:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    4924:	f104 0618 	add.w	r6, r4, #24
    4928:	4629      	mov	r1, r5
    492a:	4630      	mov	r0, r6
    492c:	4b1c      	ldr	r3, [pc, #112]	; (49a0 <timer_add_task+0xa0>)
    492e:	4798      	blx	r3
    4930:	b9a8      	cbnz	r0, 495e <timer_add_task+0x5e>
	task->time_label = descr->time;
    4932:	6963      	ldr	r3, [r4, #20]
    4934:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4936:	6962      	ldr	r2, [r4, #20]
    4938:	4629      	mov	r1, r5
    493a:	4630      	mov	r0, r6
    493c:	4b19      	ldr	r3, [pc, #100]	; (49a4 <timer_add_task+0xa4>)
    493e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4940:	7f23      	ldrb	r3, [r4, #28]
    4942:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4946:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4948:	7f23      	ldrb	r3, [r4, #28]
    494a:	f013 0f02 	tst.w	r3, #2
    494e:	d112      	bne.n	4976 <timer_add_task+0x76>
	return ERR_NONE;
    4950:	2000      	movs	r0, #0
}
    4952:	b002      	add	sp, #8
    4954:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    4956:	2000      	movs	r0, #0
    4958:	e7dc      	b.n	4914 <timer_add_task+0x14>
    495a:	2000      	movs	r0, #0
    495c:	e7da      	b.n	4914 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    495e:	7f23      	ldrb	r3, [r4, #28]
    4960:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4964:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    4966:	2280      	movs	r2, #128	; 0x80
    4968:	490b      	ldr	r1, [pc, #44]	; (4998 <timer_add_task+0x98>)
    496a:	2000      	movs	r0, #0
    496c:	4b0b      	ldr	r3, [pc, #44]	; (499c <timer_add_task+0x9c>)
    496e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4970:	f06f 0011 	mvn.w	r0, #17
    4974:	e7ed      	b.n	4952 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    4976:	a801      	add	r0, sp, #4
    4978:	4b0b      	ldr	r3, [pc, #44]	; (49a8 <timer_add_task+0xa8>)
    497a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    497c:	7f23      	ldrb	r3, [r4, #28]
    497e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4982:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    4984:	6823      	ldr	r3, [r4, #0]
    4986:	69db      	ldr	r3, [r3, #28]
    4988:	1d20      	adds	r0, r4, #4
    498a:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    498c:	a801      	add	r0, sp, #4
    498e:	4b07      	ldr	r3, [pc, #28]	; (49ac <timer_add_task+0xac>)
    4990:	4798      	blx	r3
	return ERR_NONE;
    4992:	2000      	movs	r0, #0
    4994:	e7dd      	b.n	4952 <timer_add_task+0x52>
    4996:	bf00      	nop
    4998:	0000be54 	.word	0x0000be54
    499c:	00005259 	.word	0x00005259
    49a0:	0000525f 	.word	0x0000525f
    49a4:	000047a5 	.word	0x000047a5
    49a8:	00004075 	.word	0x00004075
    49ac:	00004083 	.word	0x00004083

000049b0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    49b0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    49b2:	2300      	movs	r3, #0
    49b4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    49b6:	69c3      	ldr	r3, [r0, #28]
    49b8:	b11b      	cbz	r3, 49c2 <usart_transmission_complete+0x12>
    49ba:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    49be:	4610      	mov	r0, r2
    49c0:	4798      	blx	r3
    49c2:	bd08      	pop	{r3, pc}

000049c4 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    49c4:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    49c6:	2300      	movs	r3, #0
    49c8:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    49ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
    49cc:	b11b      	cbz	r3, 49d6 <usart_error+0x12>
    49ce:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    49d2:	4610      	mov	r0, r2
    49d4:	4798      	blx	r3
    49d6:	bd08      	pop	{r3, pc}

000049d8 <usart_fill_rx_buffer>:
{
    49d8:	b538      	push	{r3, r4, r5, lr}
    49da:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    49dc:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    49e0:	302c      	adds	r0, #44	; 0x2c
    49e2:	4b03      	ldr	r3, [pc, #12]	; (49f0 <usart_fill_rx_buffer+0x18>)
    49e4:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    49e6:	6a23      	ldr	r3, [r4, #32]
    49e8:	b10b      	cbz	r3, 49ee <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    49ea:	4628      	mov	r0, r5
    49ec:	4798      	blx	r3
    49ee:	bd38      	pop	{r3, r4, r5, pc}
    49f0:	00005395 	.word	0x00005395

000049f4 <usart_async_write>:
{
    49f4:	b570      	push	{r4, r5, r6, lr}
    49f6:	460e      	mov	r6, r1
    49f8:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    49fa:	4604      	mov	r4, r0
    49fc:	b1e0      	cbz	r0, 4a38 <usart_async_write+0x44>
    49fe:	b1e9      	cbz	r1, 4a3c <usart_async_write+0x48>
    4a00:	1c10      	adds	r0, r2, #0
    4a02:	bf18      	it	ne
    4a04:	2001      	movne	r0, #1
    4a06:	f240 123b 	movw	r2, #315	; 0x13b
    4a0a:	490f      	ldr	r1, [pc, #60]	; (4a48 <usart_async_write+0x54>)
    4a0c:	4b0f      	ldr	r3, [pc, #60]	; (4a4c <usart_async_write+0x58>)
    4a0e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    4a10:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    4a14:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    4a18:	429a      	cmp	r2, r3
    4a1a:	d111      	bne.n	4a40 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    4a1c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    4a1e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    4a22:	2300      	movs	r3, #0
    4a24:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    4a28:	2301      	movs	r3, #1
    4a2a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    4a2c:	f104 0008 	add.w	r0, r4, #8
    4a30:	4b07      	ldr	r3, [pc, #28]	; (4a50 <usart_async_write+0x5c>)
    4a32:	4798      	blx	r3
	return (int32_t)length;
    4a34:	4628      	mov	r0, r5
    4a36:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    4a38:	2000      	movs	r0, #0
    4a3a:	e7e4      	b.n	4a06 <usart_async_write+0x12>
    4a3c:	2000      	movs	r0, #0
    4a3e:	e7e2      	b.n	4a06 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    4a40:	f06f 001b 	mvn.w	r0, #27
}
    4a44:	bd70      	pop	{r4, r5, r6, pc}
    4a46:	bf00      	nop
    4a48:	0000be6c 	.word	0x0000be6c
    4a4c:	00005259 	.word	0x00005259
    4a50:	000067a7 	.word	0x000067a7

00004a54 <usart_process_byte_sent>:
{
    4a54:	b510      	push	{r4, lr}
    4a56:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    4a58:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    4a5a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    4a5e:	429a      	cmp	r2, r3
    4a60:	d009      	beq.n	4a76 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    4a62:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4a64:	1c59      	adds	r1, r3, #1
    4a66:	8781      	strh	r1, [r0, #60]	; 0x3c
    4a68:	5cd1      	ldrb	r1, [r2, r3]
    4a6a:	4b04      	ldr	r3, [pc, #16]	; (4a7c <usart_process_byte_sent+0x28>)
    4a6c:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    4a6e:	4620      	mov	r0, r4
    4a70:	4b03      	ldr	r3, [pc, #12]	; (4a80 <usart_process_byte_sent+0x2c>)
    4a72:	4798      	blx	r3
    4a74:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    4a76:	4b03      	ldr	r3, [pc, #12]	; (4a84 <usart_process_byte_sent+0x30>)
    4a78:	4798      	blx	r3
    4a7a:	bd10      	pop	{r4, pc}
    4a7c:	000067a1 	.word	0x000067a1
    4a80:	000067a7 	.word	0x000067a7
    4a84:	000067af 	.word	0x000067af

00004a88 <usart_async_read>:
{
    4a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a8c:	b082      	sub	sp, #8
    4a8e:	460f      	mov	r7, r1
    4a90:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    4a92:	4606      	mov	r6, r0
    4a94:	b1a0      	cbz	r0, 4ac0 <usart_async_read+0x38>
    4a96:	b199      	cbz	r1, 4ac0 <usart_async_read+0x38>
    4a98:	2a00      	cmp	r2, #0
    4a9a:	d12d      	bne.n	4af8 <usart_async_read+0x70>
    4a9c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4aa0:	4929      	ldr	r1, [pc, #164]	; (4b48 <usart_async_read+0xc0>)
    4aa2:	2000      	movs	r0, #0
    4aa4:	4b29      	ldr	r3, [pc, #164]	; (4b4c <usart_async_read+0xc4>)
    4aa6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4aa8:	a801      	add	r0, sp, #4
    4aaa:	4b29      	ldr	r3, [pc, #164]	; (4b50 <usart_async_read+0xc8>)
    4aac:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4aae:	f106 0034 	add.w	r0, r6, #52	; 0x34
    4ab2:	4b28      	ldr	r3, [pc, #160]	; (4b54 <usart_async_read+0xcc>)
    4ab4:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    4ab6:	a801      	add	r0, sp, #4
    4ab8:	4b27      	ldr	r3, [pc, #156]	; (4b58 <usart_async_read+0xd0>)
    4aba:	4798      	blx	r3
	uint16_t                       was_read = 0;
    4abc:	2500      	movs	r5, #0
	return (int32_t)was_read;
    4abe:	e03e      	b.n	4b3e <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    4ac0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4ac4:	4920      	ldr	r1, [pc, #128]	; (4b48 <usart_async_read+0xc0>)
    4ac6:	2000      	movs	r0, #0
    4ac8:	4b20      	ldr	r3, [pc, #128]	; (4b4c <usart_async_read+0xc4>)
    4aca:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4acc:	a801      	add	r0, sp, #4
    4ace:	4b20      	ldr	r3, [pc, #128]	; (4b50 <usart_async_read+0xc8>)
    4ad0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4ad2:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    4ad6:	4650      	mov	r0, sl
    4ad8:	4b1e      	ldr	r3, [pc, #120]	; (4b54 <usart_async_read+0xcc>)
    4ada:	4798      	blx	r3
    4adc:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    4ade:	a801      	add	r0, sp, #4
    4ae0:	4b1d      	ldr	r3, [pc, #116]	; (4b58 <usart_async_read+0xd0>)
    4ae2:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    4ae4:	f1b9 0f00 	cmp.w	r9, #0
    4ae8:	d004      	beq.n	4af4 <usart_async_read+0x6c>
    4aea:	f1b8 0f00 	cmp.w	r8, #0
    4aee:	d119      	bne.n	4b24 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    4af0:	2500      	movs	r5, #0
    4af2:	e024      	b.n	4b3e <usart_async_read+0xb6>
    4af4:	2500      	movs	r5, #0
    4af6:	e022      	b.n	4b3e <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    4af8:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4afc:	4912      	ldr	r1, [pc, #72]	; (4b48 <usart_async_read+0xc0>)
    4afe:	2001      	movs	r0, #1
    4b00:	4b12      	ldr	r3, [pc, #72]	; (4b4c <usart_async_read+0xc4>)
    4b02:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4b04:	a801      	add	r0, sp, #4
    4b06:	4b12      	ldr	r3, [pc, #72]	; (4b50 <usart_async_read+0xc8>)
    4b08:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4b0a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    4b0e:	4650      	mov	r0, sl
    4b10:	4b10      	ldr	r3, [pc, #64]	; (4b54 <usart_async_read+0xcc>)
    4b12:	4798      	blx	r3
    4b14:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    4b16:	a801      	add	r0, sp, #4
    4b18:	4b0f      	ldr	r3, [pc, #60]	; (4b58 <usart_async_read+0xd0>)
    4b1a:	4798      	blx	r3
	uint16_t                       was_read = 0;
    4b1c:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    4b1e:	f1b9 0f00 	cmp.w	r9, #0
    4b22:	d00c      	beq.n	4b3e <usart_async_read+0xb6>
{
    4b24:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    4b26:	4e0d      	ldr	r6, [pc, #52]	; (4b5c <usart_async_read+0xd4>)
    4b28:	1c60      	adds	r0, r4, #1
    4b2a:	b285      	uxth	r5, r0
    4b2c:	1939      	adds	r1, r7, r4
    4b2e:	4650      	mov	r0, sl
    4b30:	47b0      	blx	r6
    4b32:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    4b34:	454c      	cmp	r4, r9
    4b36:	d202      	bcs.n	4b3e <usart_async_read+0xb6>
    4b38:	b2a3      	uxth	r3, r4
    4b3a:	4598      	cmp	r8, r3
    4b3c:	d8f4      	bhi.n	4b28 <usart_async_read+0xa0>
}
    4b3e:	4628      	mov	r0, r5
    4b40:	b002      	add	sp, #8
    4b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b46:	bf00      	nop
    4b48:	0000be6c 	.word	0x0000be6c
    4b4c:	00005259 	.word	0x00005259
    4b50:	00004075 	.word	0x00004075
    4b54:	000053d5 	.word	0x000053d5
    4b58:	00004083 	.word	0x00004083
    4b5c:	00005351 	.word	0x00005351

00004b60 <usart_async_init>:
{
    4b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b62:	460d      	mov	r5, r1
    4b64:	4616      	mov	r6, r2
    4b66:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    4b68:	4604      	mov	r4, r0
    4b6a:	b320      	cbz	r0, 4bb6 <usart_async_init+0x56>
    4b6c:	b329      	cbz	r1, 4bba <usart_async_init+0x5a>
    4b6e:	b332      	cbz	r2, 4bbe <usart_async_init+0x5e>
    4b70:	1c18      	adds	r0, r3, #0
    4b72:	bf18      	it	ne
    4b74:	2001      	movne	r0, #1
    4b76:	223a      	movs	r2, #58	; 0x3a
    4b78:	4913      	ldr	r1, [pc, #76]	; (4bc8 <usart_async_init+0x68>)
    4b7a:	4b14      	ldr	r3, [pc, #80]	; (4bcc <usart_async_init+0x6c>)
    4b7c:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    4b7e:	463a      	mov	r2, r7
    4b80:	4631      	mov	r1, r6
    4b82:	f104 0034 	add.w	r0, r4, #52	; 0x34
    4b86:	4b12      	ldr	r3, [pc, #72]	; (4bd0 <usart_async_init+0x70>)
    4b88:	4798      	blx	r3
    4b8a:	b9d0      	cbnz	r0, 4bc2 <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    4b8c:	4629      	mov	r1, r5
    4b8e:	f104 0008 	add.w	r0, r4, #8
    4b92:	4b10      	ldr	r3, [pc, #64]	; (4bd4 <usart_async_init+0x74>)
    4b94:	4798      	blx	r3
	if (init_status) {
    4b96:	4603      	mov	r3, r0
    4b98:	b958      	cbnz	r0, 4bb2 <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    4b9a:	4a0f      	ldr	r2, [pc, #60]	; (4bd8 <usart_async_init+0x78>)
    4b9c:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    4b9e:	4a0f      	ldr	r2, [pc, #60]	; (4bdc <usart_async_init+0x7c>)
    4ba0:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    4ba2:	4a0f      	ldr	r2, [pc, #60]	; (4be0 <usart_async_init+0x80>)
    4ba4:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    4ba6:	4a0f      	ldr	r2, [pc, #60]	; (4be4 <usart_async_init+0x84>)
    4ba8:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    4baa:	4a0f      	ldr	r2, [pc, #60]	; (4be8 <usart_async_init+0x88>)
    4bac:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    4bae:	4a0f      	ldr	r2, [pc, #60]	; (4bec <usart_async_init+0x8c>)
    4bb0:	6162      	str	r2, [r4, #20]
}
    4bb2:	4618      	mov	r0, r3
    4bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    4bb6:	2000      	movs	r0, #0
    4bb8:	e7dd      	b.n	4b76 <usart_async_init+0x16>
    4bba:	2000      	movs	r0, #0
    4bbc:	e7db      	b.n	4b76 <usart_async_init+0x16>
    4bbe:	2000      	movs	r0, #0
    4bc0:	e7d9      	b.n	4b76 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    4bc2:	f06f 030c 	mvn.w	r3, #12
    4bc6:	e7f4      	b.n	4bb2 <usart_async_init+0x52>
    4bc8:	0000be6c 	.word	0x0000be6c
    4bcc:	00005259 	.word	0x00005259
    4bd0:	00005301 	.word	0x00005301
    4bd4:	00006711 	.word	0x00006711
    4bd8:	00004a89 	.word	0x00004a89
    4bdc:	000049f5 	.word	0x000049f5
    4be0:	00004a55 	.word	0x00004a55
    4be4:	000049d9 	.word	0x000049d9
    4be8:	000049b1 	.word	0x000049b1
    4bec:	000049c5 	.word	0x000049c5

00004bf0 <usart_async_enable>:
{
    4bf0:	b510      	push	{r4, lr}
	ASSERT(descr);
    4bf2:	4604      	mov	r4, r0
    4bf4:	2261      	movs	r2, #97	; 0x61
    4bf6:	4906      	ldr	r1, [pc, #24]	; (4c10 <usart_async_enable+0x20>)
    4bf8:	3000      	adds	r0, #0
    4bfa:	bf18      	it	ne
    4bfc:	2001      	movne	r0, #1
    4bfe:	4b05      	ldr	r3, [pc, #20]	; (4c14 <usart_async_enable+0x24>)
    4c00:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    4c02:	f104 0008 	add.w	r0, r4, #8
    4c06:	4b04      	ldr	r3, [pc, #16]	; (4c18 <usart_async_enable+0x28>)
    4c08:	4798      	blx	r3
}
    4c0a:	2000      	movs	r0, #0
    4c0c:	bd10      	pop	{r4, pc}
    4c0e:	bf00      	nop
    4c10:	0000be6c 	.word	0x0000be6c
    4c14:	00005259 	.word	0x00005259
    4c18:	0000678d 	.word	0x0000678d

00004c1c <usart_async_get_io_descriptor>:
{
    4c1c:	b538      	push	{r3, r4, r5, lr}
    4c1e:	460c      	mov	r4, r1
	ASSERT(descr && io);
    4c20:	4605      	mov	r5, r0
    4c22:	b148      	cbz	r0, 4c38 <usart_async_get_io_descriptor+0x1c>
    4c24:	1c08      	adds	r0, r1, #0
    4c26:	bf18      	it	ne
    4c28:	2001      	movne	r0, #1
    4c2a:	2277      	movs	r2, #119	; 0x77
    4c2c:	4903      	ldr	r1, [pc, #12]	; (4c3c <usart_async_get_io_descriptor+0x20>)
    4c2e:	4b04      	ldr	r3, [pc, #16]	; (4c40 <usart_async_get_io_descriptor+0x24>)
    4c30:	4798      	blx	r3
	*io = &descr->io;
    4c32:	6025      	str	r5, [r4, #0]
}
    4c34:	2000      	movs	r0, #0
    4c36:	bd38      	pop	{r3, r4, r5, pc}
    4c38:	2000      	movs	r0, #0
    4c3a:	e7f6      	b.n	4c2a <usart_async_get_io_descriptor+0xe>
    4c3c:	0000be6c 	.word	0x0000be6c
    4c40:	00005259 	.word	0x00005259

00004c44 <usart_async_register_callback>:
{
    4c44:	b570      	push	{r4, r5, r6, lr}
    4c46:	460c      	mov	r4, r1
    4c48:	4616      	mov	r6, r2
	ASSERT(descr);
    4c4a:	4605      	mov	r5, r0
    4c4c:	2283      	movs	r2, #131	; 0x83
    4c4e:	4917      	ldr	r1, [pc, #92]	; (4cac <usart_async_register_callback+0x68>)
    4c50:	3000      	adds	r0, #0
    4c52:	bf18      	it	ne
    4c54:	2001      	movne	r0, #1
    4c56:	4b16      	ldr	r3, [pc, #88]	; (4cb0 <usart_async_register_callback+0x6c>)
    4c58:	4798      	blx	r3
	switch (type) {
    4c5a:	2c01      	cmp	r4, #1
    4c5c:	d010      	beq.n	4c80 <usart_async_register_callback+0x3c>
    4c5e:	b124      	cbz	r4, 4c6a <usart_async_register_callback+0x26>
    4c60:	2c02      	cmp	r4, #2
    4c62:	d018      	beq.n	4c96 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    4c64:	f06f 000c 	mvn.w	r0, #12
}
    4c68:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    4c6a:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    4c6c:	1c32      	adds	r2, r6, #0
    4c6e:	bf18      	it	ne
    4c70:	2201      	movne	r2, #1
    4c72:	2101      	movs	r1, #1
    4c74:	f105 0008 	add.w	r0, r5, #8
    4c78:	4b0e      	ldr	r3, [pc, #56]	; (4cb4 <usart_async_register_callback+0x70>)
    4c7a:	4798      	blx	r3
	return ERR_NONE;
    4c7c:	2000      	movs	r0, #0
		break;
    4c7e:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    4c80:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    4c82:	1c32      	adds	r2, r6, #0
    4c84:	bf18      	it	ne
    4c86:	2201      	movne	r2, #1
    4c88:	2102      	movs	r1, #2
    4c8a:	f105 0008 	add.w	r0, r5, #8
    4c8e:	4b09      	ldr	r3, [pc, #36]	; (4cb4 <usart_async_register_callback+0x70>)
    4c90:	4798      	blx	r3
	return ERR_NONE;
    4c92:	2000      	movs	r0, #0
		break;
    4c94:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    4c96:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    4c98:	1c32      	adds	r2, r6, #0
    4c9a:	bf18      	it	ne
    4c9c:	2201      	movne	r2, #1
    4c9e:	2103      	movs	r1, #3
    4ca0:	f105 0008 	add.w	r0, r5, #8
    4ca4:	4b03      	ldr	r3, [pc, #12]	; (4cb4 <usart_async_register_callback+0x70>)
    4ca6:	4798      	blx	r3
	return ERR_NONE;
    4ca8:	2000      	movs	r0, #0
		break;
    4caa:	bd70      	pop	{r4, r5, r6, pc}
    4cac:	0000be6c 	.word	0x0000be6c
    4cb0:	00005259 	.word	0x00005259
    4cb4:	000067b9 	.word	0x000067b9

00004cb8 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4cb8:	4b0f      	ldr	r3, [pc, #60]	; (4cf8 <_usb_d_find_ep+0x40>)
    4cba:	7859      	ldrb	r1, [r3, #1]
    4cbc:	4288      	cmp	r0, r1
    4cbe:	d018      	beq.n	4cf2 <_usb_d_find_ep+0x3a>
{
    4cc0:	b430      	push	{r4, r5}
    4cc2:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4cc4:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4cc6:	f000 050f 	and.w	r5, r0, #15
    4cca:	e007      	b.n	4cdc <_usb_d_find_ep+0x24>
    4ccc:	3301      	adds	r3, #1
    4cce:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4cd0:	2b0d      	cmp	r3, #13
    4cd2:	d009      	beq.n	4ce8 <_usb_d_find_ep+0x30>
    4cd4:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4cd6:	7851      	ldrb	r1, [r2, #1]
    4cd8:	4281      	cmp	r1, r0
    4cda:	d007      	beq.n	4cec <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    4cdc:	7814      	ldrb	r4, [r2, #0]
    4cde:	2c00      	cmp	r4, #0
    4ce0:	d1f4      	bne.n	4ccc <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4ce2:	428d      	cmp	r5, r1
    4ce4:	d1f2      	bne.n	4ccc <_usb_d_find_ep+0x14>
    4ce6:	e001      	b.n	4cec <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    4ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
    4cec:	4618      	mov	r0, r3
    4cee:	bc30      	pop	{r4, r5}
    4cf0:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4cf2:	2300      	movs	r3, #0
}
    4cf4:	4618      	mov	r0, r3
    4cf6:	4770      	bx	lr
    4cf8:	2000065c 	.word	0x2000065c

00004cfc <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    4cfc:	2000      	movs	r0, #0
    4cfe:	4770      	bx	lr

00004d00 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    4d00:	b538      	push	{r3, r4, r5, lr}
    4d02:	4604      	mov	r4, r0
    4d04:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    4d06:	4b09      	ldr	r3, [pc, #36]	; (4d2c <usb_d_cb_trans_more+0x2c>)
    4d08:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    4d0a:	4b09      	ldr	r3, [pc, #36]	; (4d30 <usb_d_cb_trans_more+0x30>)
    4d0c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    4d10:	789b      	ldrb	r3, [r3, #2]
    4d12:	2b03      	cmp	r3, #3
    4d14:	d001      	beq.n	4d1a <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    4d16:	2000      	movs	r0, #0
}
    4d18:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    4d1a:	4b05      	ldr	r3, [pc, #20]	; (4d30 <usb_d_cb_trans_more+0x30>)
    4d1c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    4d20:	6983      	ldr	r3, [r0, #24]
    4d22:	4629      	mov	r1, r5
    4d24:	4620      	mov	r0, r4
    4d26:	4798      	blx	r3
    4d28:	bd38      	pop	{r3, r4, r5, pc}
    4d2a:	bf00      	nop
    4d2c:	00004cb9 	.word	0x00004cb9
    4d30:	2000065c 	.word	0x2000065c

00004d34 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    4d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d36:	b085      	sub	sp, #20
    4d38:	4606      	mov	r6, r0
    4d3a:	460d      	mov	r5, r1
    4d3c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    4d3e:	4b4d      	ldr	r3, [pc, #308]	; (4e74 <_usb_d_cb_trans_done+0x140>)
    4d40:	4798      	blx	r3
    4d42:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    4d44:	2d00      	cmp	r5, #0
    4d46:	d15b      	bne.n	4e00 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4d48:	4a4b      	ldr	r2, [pc, #300]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4d4a:	0143      	lsls	r3, r0, #5
    4d4c:	18d1      	adds	r1, r2, r3
    4d4e:	2000      	movs	r0, #0
    4d50:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4d52:	5cd3      	ldrb	r3, [r2, r3]
    4d54:	b173      	cbz	r3, 4d74 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4d56:	4b48      	ldr	r3, [pc, #288]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4d58:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4d5c:	2201      	movs	r2, #1
    4d5e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    4d60:	4845      	ldr	r0, [pc, #276]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4d62:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4d66:	69c3      	ldr	r3, [r0, #28]
    4d68:	463a      	mov	r2, r7
    4d6a:	78c1      	ldrb	r1, [r0, #3]
    4d6c:	4630      	mov	r0, r6
    4d6e:	4798      	blx	r3
}
    4d70:	b005      	add	sp, #20
    4d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    4d74:	788b      	ldrb	r3, [r1, #2]
    4d76:	2b03      	cmp	r3, #3
    4d78:	d00b      	beq.n	4d92 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    4d7a:	483f      	ldr	r0, [pc, #252]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4d7c:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    4d80:	4614      	mov	r4, r2
    4d82:	69d3      	ldr	r3, [r2, #28]
    4d84:	320c      	adds	r2, #12
    4d86:	2100      	movs	r1, #0
    4d88:	7860      	ldrb	r0, [r4, #1]
    4d8a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4d8c:	2302      	movs	r3, #2
    4d8e:	70a3      	strb	r3, [r4, #2]
    4d90:	e7ee      	b.n	4d70 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    4d92:	460b      	mov	r3, r1
    4d94:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    4d98:	460a      	mov	r2, r1
    4d9a:	69ce      	ldr	r6, [r1, #28]
    4d9c:	320c      	adds	r2, #12
    4d9e:	2101      	movs	r1, #1
    4da0:	7858      	ldrb	r0, [r3, #1]
    4da2:	47b0      	blx	r6
		if (err) {
    4da4:	b1a0      	cbz	r0, 4dd0 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4da6:	4b34      	ldr	r3, [pc, #208]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4da8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4dac:	2205      	movs	r2, #5
    4dae:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    4db0:	2202      	movs	r2, #2
    4db2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4db4:	2d00      	cmp	r5, #0
    4db6:	db09      	blt.n	4dcc <_usb_d_cb_trans_done+0x98>
    4db8:	482f      	ldr	r0, [pc, #188]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4dba:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4dbe:	7840      	ldrb	r0, [r0, #1]
    4dc0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    4dc4:	2101      	movs	r1, #1
    4dc6:	4b2d      	ldr	r3, [pc, #180]	; (4e7c <_usb_d_cb_trans_done+0x148>)
    4dc8:	4798      	blx	r3
    4dca:	e7d1      	b.n	4d70 <_usb_d_cb_trans_done+0x3c>
    4dcc:	7858      	ldrb	r0, [r3, #1]
    4dce:	e7f9      	b.n	4dc4 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4dd0:	4829      	ldr	r0, [pc, #164]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4dd2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4dd6:	2304      	movs	r3, #4
    4dd8:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    4dda:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    4ddc:	2200      	movs	r2, #0
    4dde:	9201      	str	r2, [sp, #4]
    4de0:	9202      	str	r2, [sp, #8]
    4de2:	4295      	cmp	r5, r2
    4de4:	bfac      	ite	ge
    4de6:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    4dea:	f003 030f 	andlt.w	r3, r3, #15
    4dee:	f88d 300c 	strb.w	r3, [sp, #12]
    4df2:	2301      	movs	r3, #1
    4df4:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    4df8:	a801      	add	r0, sp, #4
    4dfa:	4b21      	ldr	r3, [pc, #132]	; (4e80 <_usb_d_cb_trans_done+0x14c>)
    4dfc:	4798      	blx	r3
    4dfe:	e7b7      	b.n	4d70 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    4e00:	2d01      	cmp	r5, #1
    4e02:	d00a      	beq.n	4e1a <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    4e04:	2d02      	cmp	r5, #2
    4e06:	d01c      	beq.n	4e42 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    4e08:	2d03      	cmp	r5, #3
    4e0a:	d02a      	beq.n	4e62 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    4e0c:	4b1a      	ldr	r3, [pc, #104]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4e0e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    4e12:	2206      	movs	r2, #6
    4e14:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    4e16:	70da      	strb	r2, [r3, #3]
    4e18:	e7a2      	b.n	4d60 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    4e1a:	4a17      	ldr	r2, [pc, #92]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4e1c:	0143      	lsls	r3, r0, #5
    4e1e:	18d1      	adds	r1, r2, r3
    4e20:	2002      	movs	r0, #2
    4e22:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4e24:	5cd3      	ldrb	r3, [r2, r3]
    4e26:	b12b      	cbz	r3, 4e34 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    4e28:	4b13      	ldr	r3, [pc, #76]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4e2a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4e2e:	2205      	movs	r2, #5
    4e30:	709a      	strb	r2, [r3, #2]
    4e32:	e795      	b.n	4d60 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4e34:	460b      	mov	r3, r1
    4e36:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4e38:	2100      	movs	r1, #0
    4e3a:	4630      	mov	r0, r6
    4e3c:	4b0f      	ldr	r3, [pc, #60]	; (4e7c <_usb_d_cb_trans_done+0x148>)
    4e3e:	4798      	blx	r3
    4e40:	e78e      	b.n	4d60 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    4e42:	4a0d      	ldr	r2, [pc, #52]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4e44:	0143      	lsls	r3, r0, #5
    4e46:	18d1      	adds	r1, r2, r3
    4e48:	2004      	movs	r0, #4
    4e4a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4e4c:	5cd3      	ldrb	r3, [r2, r3]
    4e4e:	b12b      	cbz	r3, 4e5c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4e50:	4b09      	ldr	r3, [pc, #36]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4e52:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4e56:	2201      	movs	r2, #1
    4e58:	709a      	strb	r2, [r3, #2]
    4e5a:	e781      	b.n	4d60 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4e5c:	2302      	movs	r3, #2
    4e5e:	708b      	strb	r3, [r1, #2]
			return;
    4e60:	e786      	b.n	4d70 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    4e62:	4b05      	ldr	r3, [pc, #20]	; (4e78 <_usb_d_cb_trans_done+0x144>)
    4e64:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    4e68:	2200      	movs	r2, #0
    4e6a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    4e6c:	2205      	movs	r2, #5
    4e6e:	70da      	strb	r2, [r3, #3]
    4e70:	e776      	b.n	4d60 <_usb_d_cb_trans_done+0x2c>
    4e72:	bf00      	nop
    4e74:	00004cb9 	.word	0x00004cb9
    4e78:	2000065c 	.word	0x2000065c
    4e7c:	00008739 	.word	0x00008739
    4e80:	000088e1 	.word	0x000088e1

00004e84 <usb_d_cb_trans_setup>:
{
    4e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e88:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    4e8a:	4b1c      	ldr	r3, [pc, #112]	; (4efc <usb_d_cb_trans_setup+0x78>)
    4e8c:	4798      	blx	r3
    4e8e:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    4e90:	4c1b      	ldr	r4, [pc, #108]	; (4f00 <usb_d_cb_trans_setup+0x7c>)
    4e92:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    4e96:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4e98:	4621      	mov	r1, r4
    4e9a:	4628      	mov	r0, r5
    4e9c:	4b19      	ldr	r3, [pc, #100]	; (4f04 <usb_d_cb_trans_setup+0x80>)
    4e9e:	4798      	blx	r3
	if (n != 8) {
    4ea0:	b2c0      	uxtb	r0, r0
    4ea2:	2808      	cmp	r0, #8
    4ea4:	d009      	beq.n	4eba <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4ea6:	2101      	movs	r1, #1
    4ea8:	4628      	mov	r0, r5
    4eaa:	4c17      	ldr	r4, [pc, #92]	; (4f08 <usb_d_cb_trans_setup+0x84>)
    4eac:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4eae:	2101      	movs	r1, #1
    4eb0:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    4eb4:	47a0      	blx	r4
		return;
    4eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4eba:	2100      	movs	r1, #0
    4ebc:	4628      	mov	r0, r5
    4ebe:	4f12      	ldr	r7, [pc, #72]	; (4f08 <usb_d_cb_trans_setup+0x84>)
    4ec0:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    4ec2:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    4ec6:	2100      	movs	r1, #0
    4ec8:	4640      	mov	r0, r8
    4eca:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    4ecc:	4b0c      	ldr	r3, [pc, #48]	; (4f00 <usb_d_cb_trans_setup+0x7c>)
    4ece:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    4ed2:	2201      	movs	r2, #1
    4ed4:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4ed6:	695b      	ldr	r3, [r3, #20]
    4ed8:	4621      	mov	r1, r4
    4eda:	4628      	mov	r0, r5
    4edc:	4798      	blx	r3
    4ede:	b108      	cbz	r0, 4ee4 <usb_d_cb_trans_setup+0x60>
    4ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    4ee4:	4b06      	ldr	r3, [pc, #24]	; (4f00 <usb_d_cb_trans_setup+0x7c>)
    4ee6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4eea:	2305      	movs	r3, #5
    4eec:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4eee:	2101      	movs	r1, #1
    4ef0:	4628      	mov	r0, r5
    4ef2:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4ef4:	2101      	movs	r1, #1
    4ef6:	4640      	mov	r0, r8
    4ef8:	47b8      	blx	r7
    4efa:	e7f1      	b.n	4ee0 <usb_d_cb_trans_setup+0x5c>
    4efc:	00004cb9 	.word	0x00004cb9
    4f00:	2000065c 	.word	0x2000065c
    4f04:	00008881 	.word	0x00008881
    4f08:	00008739 	.word	0x00008739

00004f0c <usb_d_init>:

int32_t usb_d_init(void)
{
    4f0c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    4f0e:	4b11      	ldr	r3, [pc, #68]	; (4f54 <usb_d_init+0x48>)
    4f10:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    4f12:	2800      	cmp	r0, #0
    4f14:	db1d      	blt.n	4f52 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    4f16:	4c10      	ldr	r4, [pc, #64]	; (4f58 <usb_d_init+0x4c>)
    4f18:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    4f1c:	2100      	movs	r1, #0
    4f1e:	4620      	mov	r0, r4
    4f20:	4b0e      	ldr	r3, [pc, #56]	; (4f5c <usb_d_init+0x50>)
    4f22:	4798      	blx	r3
    4f24:	4623      	mov	r3, r4
    4f26:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    4f2a:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4f2c:	4a0c      	ldr	r2, [pc, #48]	; (4f60 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    4f2e:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4f30:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    4f32:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    4f34:	61da      	str	r2, [r3, #28]
    4f36:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4f38:	4283      	cmp	r3, r0
    4f3a:	d1f8      	bne.n	4f2e <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    4f3c:	4909      	ldr	r1, [pc, #36]	; (4f64 <usb_d_init+0x58>)
    4f3e:	2000      	movs	r0, #0
    4f40:	4c09      	ldr	r4, [pc, #36]	; (4f68 <usb_d_init+0x5c>)
    4f42:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    4f44:	4909      	ldr	r1, [pc, #36]	; (4f6c <usb_d_init+0x60>)
    4f46:	2001      	movs	r0, #1
    4f48:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    4f4a:	4909      	ldr	r1, [pc, #36]	; (4f70 <usb_d_init+0x64>)
    4f4c:	2002      	movs	r0, #2
    4f4e:	47a0      	blx	r4
	return ERR_NONE;
    4f50:	2000      	movs	r0, #0
}
    4f52:	bd10      	pop	{r4, pc}
    4f54:	00008111 	.word	0x00008111
    4f58:	2000065c 	.word	0x2000065c
    4f5c:	0000b2d7 	.word	0x0000b2d7
    4f60:	00004cfd 	.word	0x00004cfd
    4f64:	00004e85 	.word	0x00004e85
    4f68:	00008ae9 	.word	0x00008ae9
    4f6c:	00004d01 	.word	0x00004d01
    4f70:	00004d35 	.word	0x00004d35

00004f74 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    4f74:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    4f76:	4b01      	ldr	r3, [pc, #4]	; (4f7c <usb_d_register_callback+0x8>)
    4f78:	4798      	blx	r3
    4f7a:	bd08      	pop	{r3, pc}
    4f7c:	00008ac1 	.word	0x00008ac1

00004f80 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    4f80:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    4f82:	4b01      	ldr	r3, [pc, #4]	; (4f88 <usb_d_enable+0x8>)
    4f84:	4798      	blx	r3
}
    4f86:	bd08      	pop	{r3, pc}
    4f88:	00008219 	.word	0x00008219

00004f8c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    4f8c:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    4f8e:	4b01      	ldr	r3, [pc, #4]	; (4f94 <usb_d_attach+0x8>)
    4f90:	4798      	blx	r3
    4f92:	bd08      	pop	{r3, pc}
    4f94:	00008285 	.word	0x00008285

00004f98 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    4f98:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    4f9a:	4b01      	ldr	r3, [pc, #4]	; (4fa0 <usb_d_set_address+0x8>)
    4f9c:	4798      	blx	r3
    4f9e:	bd08      	pop	{r3, pc}
    4fa0:	00008297 	.word	0x00008297

00004fa4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    4fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fa6:	4606      	mov	r6, r0
    4fa8:	460c      	mov	r4, r1
    4faa:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    4fac:	4b0f      	ldr	r3, [pc, #60]	; (4fec <usb_d_ep_init+0x48>)
    4fae:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    4fb0:	2800      	cmp	r0, #0
    4fb2:	da14      	bge.n	4fde <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    4fb4:	20ff      	movs	r0, #255	; 0xff
    4fb6:	4b0d      	ldr	r3, [pc, #52]	; (4fec <usb_d_ep_init+0x48>)
    4fb8:	4798      	blx	r3
		if (ep_index < 0) {
    4fba:	1e05      	subs	r5, r0, #0
    4fbc:	db12      	blt.n	4fe4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    4fbe:	463a      	mov	r2, r7
    4fc0:	4621      	mov	r1, r4
    4fc2:	4630      	mov	r0, r6
    4fc4:	4b0a      	ldr	r3, [pc, #40]	; (4ff0 <usb_d_ep_init+0x4c>)
    4fc6:	4798      	blx	r3
	if (rc < 0) {
    4fc8:	2800      	cmp	r0, #0
    4fca:	db0d      	blt.n	4fe8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    4fcc:	4b09      	ldr	r3, [pc, #36]	; (4ff4 <usb_d_ep_init+0x50>)
    4fce:	0168      	lsls	r0, r5, #5
    4fd0:	181a      	adds	r2, r3, r0
    4fd2:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    4fd4:	f004 0403 	and.w	r4, r4, #3
    4fd8:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    4fda:	2000      	movs	r0, #0
    4fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    4fde:	f06f 0013 	mvn.w	r0, #19
    4fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    4fe4:	f06f 0014 	mvn.w	r0, #20
}
    4fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fea:	bf00      	nop
    4fec:	00004cb9 	.word	0x00004cb9
    4ff0:	000082a5 	.word	0x000082a5
    4ff4:	2000065c 	.word	0x2000065c

00004ff8 <usb_d_ep0_init>:
{
    4ff8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    4ffa:	4602      	mov	r2, r0
    4ffc:	2100      	movs	r1, #0
    4ffe:	4608      	mov	r0, r1
    5000:	4b01      	ldr	r3, [pc, #4]	; (5008 <usb_d_ep0_init+0x10>)
    5002:	4798      	blx	r3
}
    5004:	bd08      	pop	{r3, pc}
    5006:	bf00      	nop
    5008:	00004fa5 	.word	0x00004fa5

0000500c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    500c:	b538      	push	{r3, r4, r5, lr}
    500e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5010:	4b06      	ldr	r3, [pc, #24]	; (502c <usb_d_ep_deinit+0x20>)
    5012:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    5014:	1e04      	subs	r4, r0, #0
    5016:	db07      	blt.n	5028 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5018:	4628      	mov	r0, r5
    501a:	4b05      	ldr	r3, [pc, #20]	; (5030 <usb_d_ep_deinit+0x24>)
    501c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    501e:	4805      	ldr	r0, [pc, #20]	; (5034 <usb_d_ep_deinit+0x28>)
    5020:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5024:	23ff      	movs	r3, #255	; 0xff
    5026:	7043      	strb	r3, [r0, #1]
    5028:	bd38      	pop	{r3, r4, r5, pc}
    502a:	bf00      	nop
    502c:	00004cb9 	.word	0x00004cb9
    5030:	000083bd 	.word	0x000083bd
    5034:	2000065c 	.word	0x2000065c

00005038 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5038:	b538      	push	{r3, r4, r5, lr}
    503a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    503c:	4b0e      	ldr	r3, [pc, #56]	; (5078 <usb_d_ep_enable+0x40>)
    503e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5040:	1e04      	subs	r4, r0, #0
    5042:	db16      	blt.n	5072 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5044:	0163      	lsls	r3, r4, #5
    5046:	4a0d      	ldr	r2, [pc, #52]	; (507c <usb_d_ep_enable+0x44>)
    5048:	5cd3      	ldrb	r3, [r2, r3]
    504a:	2b00      	cmp	r3, #0
    504c:	bf0c      	ite	eq
    504e:	2202      	moveq	r2, #2
    5050:	2201      	movne	r2, #1
    5052:	4b0a      	ldr	r3, [pc, #40]	; (507c <usb_d_ep_enable+0x44>)
    5054:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5058:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    505a:	4628      	mov	r0, r5
    505c:	4b08      	ldr	r3, [pc, #32]	; (5080 <usb_d_ep_enable+0x48>)
    505e:	4798      	blx	r3
	if (rc < 0) {
    5060:	2800      	cmp	r0, #0
    5062:	db00      	blt.n	5066 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    5064:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5066:	4b05      	ldr	r3, [pc, #20]	; (507c <usb_d_ep_enable+0x44>)
    5068:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    506c:	2300      	movs	r3, #0
    506e:	70a3      	strb	r3, [r4, #2]
    5070:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    5072:	f06f 0011 	mvn.w	r0, #17
    5076:	e7f5      	b.n	5064 <usb_d_ep_enable+0x2c>
    5078:	00004cb9 	.word	0x00004cb9
    507c:	2000065c 	.word	0x2000065c
    5080:	00008481 	.word	0x00008481

00005084 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5088:	b086      	sub	sp, #24
    508a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    508c:	7a07      	ldrb	r7, [r0, #8]
    508e:	4638      	mov	r0, r7
    5090:	4b3f      	ldr	r3, [pc, #252]	; (5190 <usb_d_ep_transfer+0x10c>)
    5092:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5094:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    5096:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    509a:	1e06      	subs	r6, r0, #0
    509c:	db72      	blt.n	5184 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    509e:	a804      	add	r0, sp, #16
    50a0:	4b3c      	ldr	r3, [pc, #240]	; (5194 <usb_d_ep_transfer+0x110>)
    50a2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    50a4:	4b3c      	ldr	r3, [pc, #240]	; (5198 <usb_d_ep_transfer+0x114>)
    50a6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    50aa:	789b      	ldrb	r3, [r3, #2]
    50ac:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    50b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    50b4:	b2db      	uxtb	r3, r3
    50b6:	2b01      	cmp	r3, #1
    50b8:	d011      	beq.n	50de <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    50ba:	a804      	add	r0, sp, #16
    50bc:	4b37      	ldr	r3, [pc, #220]	; (519c <usb_d_ep_transfer+0x118>)
    50be:	4798      	blx	r3
		switch (state) {
    50c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    50c4:	b2db      	uxtb	r3, r3
    50c6:	2b05      	cmp	r3, #5
    50c8:	d05f      	beq.n	518a <usb_d_ep_transfer+0x106>
    50ca:	2b06      	cmp	r3, #6
    50cc:	d023      	beq.n	5116 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    50ce:	2b00      	cmp	r3, #0
    50d0:	bf0c      	ite	eq
    50d2:	f06f 0012 	mvneq.w	r0, #18
    50d6:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    50d8:	b006      	add	sp, #24
    50da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    50de:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5198 <usb_d_ep_transfer+0x114>
    50e2:	ea4f 1946 	mov.w	r9, r6, lsl #5
    50e6:	eb0a 0309 	add.w	r3, sl, r9
    50ea:	2203      	movs	r2, #3
    50ec:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    50ee:	a804      	add	r0, sp, #16
    50f0:	4b2a      	ldr	r3, [pc, #168]	; (519c <usb_d_ep_transfer+0x118>)
    50f2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    50f4:	f81a 3009 	ldrb.w	r3, [sl, r9]
    50f8:	b183      	cbz	r3, 511c <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    50fa:	7a22      	ldrb	r2, [r4, #8]
    50fc:	3500      	adds	r5, #0
    50fe:	bf18      	it	ne
    5100:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    5102:	6823      	ldr	r3, [r4, #0]
    5104:	9301      	str	r3, [sp, #4]
    5106:	f8cd 8008 	str.w	r8, [sp, #8]
    510a:	f017 0f80 	tst.w	r7, #128	; 0x80
    510e:	d119      	bne.n	5144 <usb_d_ep_transfer+0xc0>
    5110:	f002 030f 	and.w	r3, r2, #15
    5114:	e018      	b.n	5148 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    5116:	f06f 000f 	mvn.w	r0, #15
    511a:	e7dd      	b.n	50d8 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    511c:	4b1e      	ldr	r3, [pc, #120]	; (5198 <usb_d_ep_transfer+0x114>)
    511e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5122:	7cda      	ldrb	r2, [r3, #19]
    5124:	7c9d      	ldrb	r5, [r3, #18]
    5126:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    512a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    512c:	b9a5      	cbnz	r5, 5158 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    512e:	4b1a      	ldr	r3, [pc, #104]	; (5198 <usb_d_ep_transfer+0x114>)
    5130:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5134:	2304      	movs	r3, #4
    5136:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5138:	2300      	movs	r3, #0
			zlp                 = true;
    513a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    513c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    513e:	6821      	ldr	r1, [r4, #0]
    5140:	9101      	str	r1, [sp, #4]
    5142:	9302      	str	r3, [sp, #8]
    5144:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5148:	f88d 300c 	strb.w	r3, [sp, #12]
    514c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5150:	a801      	add	r0, sp, #4
    5152:	4b13      	ldr	r3, [pc, #76]	; (51a0 <usb_d_ep_transfer+0x11c>)
    5154:	4798      	blx	r3
	return rc;
    5156:	e7bf      	b.n	50d8 <usb_d_ep_transfer+0x54>
    5158:	4643      	mov	r3, r8
    515a:	45a8      	cmp	r8, r5
    515c:	bf28      	it	cs
    515e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5160:	4a0d      	ldr	r2, [pc, #52]	; (5198 <usb_d_ep_transfer+0x114>)
    5162:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    5166:	f996 200c 	ldrsb.w	r2, [r6, #12]
    516a:	2a00      	cmp	r2, #0
    516c:	db05      	blt.n	517a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    516e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5170:	6821      	ldr	r1, [r4, #0]
    5172:	9101      	str	r1, [sp, #4]
    5174:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5176:	2500      	movs	r5, #0
    5178:	e7ca      	b.n	5110 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    517a:	429d      	cmp	r5, r3
    517c:	bf94      	ite	ls
    517e:	2500      	movls	r5, #0
    5180:	2501      	movhi	r5, #1
    5182:	e7db      	b.n	513c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    5184:	f06f 0011 	mvn.w	r0, #17
    5188:	e7a6      	b.n	50d8 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    518a:	2002      	movs	r0, #2
    518c:	e7a4      	b.n	50d8 <usb_d_ep_transfer+0x54>
    518e:	bf00      	nop
    5190:	00004cb9 	.word	0x00004cb9
    5194:	00004075 	.word	0x00004075
    5198:	2000065c 	.word	0x2000065c
    519c:	00004083 	.word	0x00004083
    51a0:	000088e1 	.word	0x000088e1

000051a4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    51a4:	b538      	push	{r3, r4, r5, lr}
    51a6:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    51a8:	b141      	cbz	r1, 51bc <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    51aa:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    51ac:	bf0c      	ite	eq
    51ae:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    51b0:	2102      	movne	r1, #2
    51b2:	4b13      	ldr	r3, [pc, #76]	; (5200 <usb_d_ep_halt+0x5c>)
    51b4:	4798      	blx	r3
    51b6:	4603      	mov	r3, r0
	}
}
    51b8:	4618      	mov	r0, r3
    51ba:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    51bc:	4b11      	ldr	r3, [pc, #68]	; (5204 <usb_d_ep_halt+0x60>)
    51be:	4798      	blx	r3
	if (ep_index < 0) {
    51c0:	1e05      	subs	r5, r0, #0
    51c2:	db19      	blt.n	51f8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    51c4:	2102      	movs	r1, #2
    51c6:	4620      	mov	r0, r4
    51c8:	4b0d      	ldr	r3, [pc, #52]	; (5200 <usb_d_ep_halt+0x5c>)
    51ca:	4798      	blx	r3
    51cc:	4603      	mov	r3, r0
    51ce:	2800      	cmp	r0, #0
    51d0:	d0f2      	beq.n	51b8 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    51d2:	2100      	movs	r1, #0
    51d4:	4620      	mov	r0, r4
    51d6:	4b0a      	ldr	r3, [pc, #40]	; (5200 <usb_d_ep_halt+0x5c>)
    51d8:	4798      	blx	r3
		if (rc < 0) {
    51da:	1e03      	subs	r3, r0, #0
    51dc:	dbec      	blt.n	51b8 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    51de:	4b0a      	ldr	r3, [pc, #40]	; (5208 <usb_d_ep_halt+0x64>)
    51e0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    51e4:	2201      	movs	r2, #1
    51e6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    51e8:	2103      	movs	r1, #3
    51ea:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    51ec:	69db      	ldr	r3, [r3, #28]
    51ee:	2200      	movs	r2, #0
    51f0:	4620      	mov	r0, r4
    51f2:	4798      	blx	r3
	return ERR_NONE;
    51f4:	2300      	movs	r3, #0
    51f6:	e7df      	b.n	51b8 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    51f8:	f06f 0311 	mvn.w	r3, #17
    51fc:	e7dc      	b.n	51b8 <usb_d_ep_halt+0x14>
    51fe:	bf00      	nop
    5200:	00008739 	.word	0x00008739
    5204:	00004cb9 	.word	0x00004cb9
    5208:	2000065c 	.word	0x2000065c

0000520c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    520c:	b538      	push	{r3, r4, r5, lr}
    520e:	460d      	mov	r5, r1
    5210:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5212:	4b0e      	ldr	r3, [pc, #56]	; (524c <usb_d_ep_register_callback+0x40>)
    5214:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5216:	4b0e      	ldr	r3, [pc, #56]	; (5250 <usb_d_ep_register_callback+0x44>)
    5218:	2c00      	cmp	r4, #0
    521a:	bf08      	it	eq
    521c:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    521e:	2800      	cmp	r0, #0
    5220:	db13      	blt.n	524a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    5222:	2d01      	cmp	r5, #1
    5224:	d008      	beq.n	5238 <usb_d_ep_register_callback+0x2c>
    5226:	b115      	cbz	r5, 522e <usb_d_ep_register_callback+0x22>
    5228:	2d02      	cmp	r5, #2
    522a:	d00a      	beq.n	5242 <usb_d_ep_register_callback+0x36>
    522c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    522e:	4b09      	ldr	r3, [pc, #36]	; (5254 <usb_d_ep_register_callback+0x48>)
    5230:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5234:	6144      	str	r4, [r0, #20]
		break;
    5236:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5238:	4b06      	ldr	r3, [pc, #24]	; (5254 <usb_d_ep_register_callback+0x48>)
    523a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    523e:	6184      	str	r4, [r0, #24]
		break;
    5240:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5242:	4b04      	ldr	r3, [pc, #16]	; (5254 <usb_d_ep_register_callback+0x48>)
    5244:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5248:	61c4      	str	r4, [r0, #28]
    524a:	bd38      	pop	{r3, r4, r5, pc}
    524c:	00004cb9 	.word	0x00004cb9
    5250:	00004cfd 	.word	0x00004cfd
    5254:	2000065c 	.word	0x2000065c

00005258 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5258:	b900      	cbnz	r0, 525c <assert+0x4>
		__asm("BKPT #0");
    525a:	be00      	bkpt	0x0000
    525c:	4770      	bx	lr

0000525e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    525e:	6803      	ldr	r3, [r0, #0]
    5260:	b14b      	cbz	r3, 5276 <is_list_element+0x18>
		if (it == element) {
    5262:	428b      	cmp	r3, r1
    5264:	d009      	beq.n	527a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    5266:	681b      	ldr	r3, [r3, #0]
    5268:	b11b      	cbz	r3, 5272 <is_list_element+0x14>
		if (it == element) {
    526a:	4299      	cmp	r1, r3
    526c:	d1fb      	bne.n	5266 <is_list_element+0x8>
			return true;
    526e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    5270:	4770      	bx	lr
	return false;
    5272:	2000      	movs	r0, #0
    5274:	4770      	bx	lr
    5276:	2000      	movs	r0, #0
    5278:	4770      	bx	lr
			return true;
    527a:	2001      	movs	r0, #1
    527c:	4770      	bx	lr
	...

00005280 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5280:	b538      	push	{r3, r4, r5, lr}
    5282:	4604      	mov	r4, r0
    5284:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    5286:	4b06      	ldr	r3, [pc, #24]	; (52a0 <list_insert_as_head+0x20>)
    5288:	4798      	blx	r3
    528a:	f080 0001 	eor.w	r0, r0, #1
    528e:	2239      	movs	r2, #57	; 0x39
    5290:	4904      	ldr	r1, [pc, #16]	; (52a4 <list_insert_as_head+0x24>)
    5292:	b2c0      	uxtb	r0, r0
    5294:	4b04      	ldr	r3, [pc, #16]	; (52a8 <list_insert_as_head+0x28>)
    5296:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5298:	6823      	ldr	r3, [r4, #0]
    529a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    529c:	6025      	str	r5, [r4, #0]
    529e:	bd38      	pop	{r3, r4, r5, pc}
    52a0:	0000525f 	.word	0x0000525f
    52a4:	0000be8c 	.word	0x0000be8c
    52a8:	00005259 	.word	0x00005259

000052ac <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    52ac:	6803      	ldr	r3, [r0, #0]
    52ae:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    52b0:	6001      	str	r1, [r0, #0]
    52b2:	4770      	bx	lr

000052b4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    52b4:	b570      	push	{r4, r5, r6, lr}
    52b6:	4605      	mov	r5, r0
    52b8:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    52ba:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    52bc:	4b0a      	ldr	r3, [pc, #40]	; (52e8 <list_insert_at_end+0x34>)
    52be:	4798      	blx	r3
    52c0:	f080 0001 	eor.w	r0, r0, #1
    52c4:	224f      	movs	r2, #79	; 0x4f
    52c6:	4909      	ldr	r1, [pc, #36]	; (52ec <list_insert_at_end+0x38>)
    52c8:	b2c0      	uxtb	r0, r0
    52ca:	4b09      	ldr	r3, [pc, #36]	; (52f0 <list_insert_at_end+0x3c>)
    52cc:	4798      	blx	r3

	if (!list->head) {
    52ce:	682b      	ldr	r3, [r5, #0]
    52d0:	b91b      	cbnz	r3, 52da <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    52d2:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    52d4:	6033      	str	r3, [r6, #0]
		return;
    52d6:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    52d8:	461c      	mov	r4, r3
	while (it->next) {
    52da:	6823      	ldr	r3, [r4, #0]
    52dc:	2b00      	cmp	r3, #0
    52de:	d1fb      	bne.n	52d8 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    52e0:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    52e2:	6033      	str	r3, [r6, #0]
    52e4:	bd70      	pop	{r4, r5, r6, pc}
    52e6:	bf00      	nop
    52e8:	0000525f 	.word	0x0000525f
    52ec:	0000be8c 	.word	0x0000be8c
    52f0:	00005259 	.word	0x00005259

000052f4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    52f4:	6803      	ldr	r3, [r0, #0]
    52f6:	b10b      	cbz	r3, 52fc <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    52f8:	681a      	ldr	r2, [r3, #0]
    52fa:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    52fc:	4618      	mov	r0, r3
    52fe:	4770      	bx	lr

00005300 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    5300:	b570      	push	{r4, r5, r6, lr}
    5302:	460e      	mov	r6, r1
    5304:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    5306:	4604      	mov	r4, r0
    5308:	b178      	cbz	r0, 532a <ringbuffer_init+0x2a>
    530a:	b181      	cbz	r1, 532e <ringbuffer_init+0x2e>
    530c:	b1a2      	cbz	r2, 5338 <ringbuffer_init+0x38>
    530e:	2001      	movs	r0, #1
    5310:	2228      	movs	r2, #40	; 0x28
    5312:	490d      	ldr	r1, [pc, #52]	; (5348 <ringbuffer_init+0x48>)
    5314:	4b0d      	ldr	r3, [pc, #52]	; (534c <ringbuffer_init+0x4c>)
    5316:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    5318:	1e6b      	subs	r3, r5, #1
    531a:	421d      	tst	r5, r3
    531c:	d109      	bne.n	5332 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    531e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    5320:	2000      	movs	r0, #0
    5322:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    5324:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    5326:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    5328:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    532a:	2000      	movs	r0, #0
    532c:	e7f0      	b.n	5310 <ringbuffer_init+0x10>
    532e:	2000      	movs	r0, #0
    5330:	e7ee      	b.n	5310 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    5332:	f06f 000c 	mvn.w	r0, #12
    5336:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5338:	2228      	movs	r2, #40	; 0x28
    533a:	4903      	ldr	r1, [pc, #12]	; (5348 <ringbuffer_init+0x48>)
    533c:	2000      	movs	r0, #0
    533e:	4b03      	ldr	r3, [pc, #12]	; (534c <ringbuffer_init+0x4c>)
    5340:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    5342:	1e6b      	subs	r3, r5, #1
    5344:	e7eb      	b.n	531e <ringbuffer_init+0x1e>
    5346:	bf00      	nop
    5348:	0000beac 	.word	0x0000beac
    534c:	00005259 	.word	0x00005259

00005350 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    5350:	b538      	push	{r3, r4, r5, lr}
    5352:	460d      	mov	r5, r1
	ASSERT(rb && data);
    5354:	4604      	mov	r4, r0
    5356:	b1a0      	cbz	r0, 5382 <ringbuffer_get+0x32>
    5358:	1c08      	adds	r0, r1, #0
    535a:	bf18      	it	ne
    535c:	2001      	movne	r0, #1
    535e:	2240      	movs	r2, #64	; 0x40
    5360:	490a      	ldr	r1, [pc, #40]	; (538c <ringbuffer_get+0x3c>)
    5362:	4b0b      	ldr	r3, [pc, #44]	; (5390 <ringbuffer_get+0x40>)
    5364:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    5366:	68a3      	ldr	r3, [r4, #8]
    5368:	68e2      	ldr	r2, [r4, #12]
    536a:	429a      	cmp	r2, r3
    536c:	d00b      	beq.n	5386 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    536e:	6862      	ldr	r2, [r4, #4]
    5370:	4013      	ands	r3, r2
    5372:	6822      	ldr	r2, [r4, #0]
    5374:	5cd3      	ldrb	r3, [r2, r3]
    5376:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5378:	68a3      	ldr	r3, [r4, #8]
    537a:	3301      	adds	r3, #1
    537c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    537e:	2000      	movs	r0, #0
    5380:	bd38      	pop	{r3, r4, r5, pc}
    5382:	2000      	movs	r0, #0
    5384:	e7eb      	b.n	535e <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    5386:	f06f 0009 	mvn.w	r0, #9
}
    538a:	bd38      	pop	{r3, r4, r5, pc}
    538c:	0000beac 	.word	0x0000beac
    5390:	00005259 	.word	0x00005259

00005394 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    5394:	b538      	push	{r3, r4, r5, lr}
    5396:	460d      	mov	r5, r1
	ASSERT(rb);
    5398:	4604      	mov	r4, r0
    539a:	2251      	movs	r2, #81	; 0x51
    539c:	490b      	ldr	r1, [pc, #44]	; (53cc <ringbuffer_put+0x38>)
    539e:	3000      	adds	r0, #0
    53a0:	bf18      	it	ne
    53a2:	2001      	movne	r0, #1
    53a4:	4b0a      	ldr	r3, [pc, #40]	; (53d0 <ringbuffer_put+0x3c>)
    53a6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    53a8:	68e3      	ldr	r3, [r4, #12]
    53aa:	6862      	ldr	r2, [r4, #4]
    53ac:	4013      	ands	r3, r2
    53ae:	6822      	ldr	r2, [r4, #0]
    53b0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    53b2:	68e3      	ldr	r3, [r4, #12]
    53b4:	6861      	ldr	r1, [r4, #4]
    53b6:	68a2      	ldr	r2, [r4, #8]
    53b8:	1a9a      	subs	r2, r3, r2
    53ba:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    53bc:	bf84      	itt	hi
    53be:	1a59      	subhi	r1, r3, r1
    53c0:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    53c2:	3301      	adds	r3, #1
    53c4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    53c6:	2000      	movs	r0, #0
    53c8:	bd38      	pop	{r3, r4, r5, pc}
    53ca:	bf00      	nop
    53cc:	0000beac 	.word	0x0000beac
    53d0:	00005259 	.word	0x00005259

000053d4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    53d4:	b510      	push	{r4, lr}
	ASSERT(rb);
    53d6:	4604      	mov	r4, r0
    53d8:	2267      	movs	r2, #103	; 0x67
    53da:	4905      	ldr	r1, [pc, #20]	; (53f0 <ringbuffer_num+0x1c>)
    53dc:	3000      	adds	r0, #0
    53de:	bf18      	it	ne
    53e0:	2001      	movne	r0, #1
    53e2:	4b04      	ldr	r3, [pc, #16]	; (53f4 <ringbuffer_num+0x20>)
    53e4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    53e6:	68e0      	ldr	r0, [r4, #12]
    53e8:	68a3      	ldr	r3, [r4, #8]
}
    53ea:	1ac0      	subs	r0, r0, r3
    53ec:	bd10      	pop	{r4, pc}
    53ee:	bf00      	nop
    53f0:	0000beac 	.word	0x0000beac
    53f4:	00005259 	.word	0x00005259

000053f8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    53f8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    53fa:	4a06      	ldr	r2, [pc, #24]	; (5414 <_sbrk+0x1c>)
    53fc:	6812      	ldr	r2, [r2, #0]
    53fe:	b122      	cbz	r2, 540a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5400:	4a04      	ldr	r2, [pc, #16]	; (5414 <_sbrk+0x1c>)
    5402:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5404:	4403      	add	r3, r0
    5406:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    5408:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    540a:	4903      	ldr	r1, [pc, #12]	; (5418 <_sbrk+0x20>)
    540c:	4a01      	ldr	r2, [pc, #4]	; (5414 <_sbrk+0x1c>)
    540e:	6011      	str	r1, [r2, #0]
    5410:	e7f6      	b.n	5400 <_sbrk+0x8>
    5412:	bf00      	nop
    5414:	200007fc 	.word	0x200007fc
    5418:	20013e90 	.word	0x20013e90

0000541c <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    541c:	6940      	ldr	r0, [r0, #20]
    541e:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5422:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5426:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    5428:	0040      	lsls	r0, r0, #1
    542a:	3076      	adds	r0, #118	; 0x76
}
    542c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    5430:	4770      	bx	lr
	...

00005434 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    5434:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    5436:	f013 0f01 	tst.w	r3, #1
    543a:	d11b      	bne.n	5474 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    543c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    543e:	f013 0f03 	tst.w	r3, #3
    5442:	d1fb      	bne.n	543c <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    5444:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    5446:	f013 0f02 	tst.w	r3, #2
    544a:	d00d      	beq.n	5468 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    544c:	8803      	ldrh	r3, [r0, #0]
    544e:	f023 0302 	bic.w	r3, r3, #2
    5452:	041b      	lsls	r3, r3, #16
    5454:	0c1b      	lsrs	r3, r3, #16
    5456:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5458:	6b03      	ldr	r3, [r0, #48]	; 0x30
    545a:	f013 0f03 	tst.w	r3, #3
    545e:	d1fb      	bne.n	5458 <_adc_init+0x24>
    5460:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5462:	f013 0f02 	tst.w	r3, #2
    5466:	d1fb      	bne.n	5460 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    5468:	2301      	movs	r3, #1
    546a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    546c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    546e:	f013 0f03 	tst.w	r3, #3
    5472:	d1fb      	bne.n	546c <_adc_init+0x38>
    5474:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5476:	f013 0f01 	tst.w	r3, #1
    547a:	d1fb      	bne.n	5474 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    547c:	2316      	movs	r3, #22
    547e:	4a37      	ldr	r2, [pc, #220]	; (555c <_adc_init+0x128>)
    5480:	fb03 2301 	mla	r3, r3, r1, r2
    5484:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    5486:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5488:	6b03      	ldr	r3, [r0, #48]	; 0x30
    548a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    548e:	2b00      	cmp	r3, #0
    5490:	d1fa      	bne.n	5488 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    5492:	2316      	movs	r3, #22
    5494:	4a31      	ldr	r2, [pc, #196]	; (555c <_adc_init+0x128>)
    5496:	fb03 2301 	mla	r3, r3, r1, r2
    549a:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    549c:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    549e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54a4:	2b00      	cmp	r3, #0
    54a6:	d1fa      	bne.n	549e <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    54a8:	2316      	movs	r3, #22
    54aa:	4a2c      	ldr	r2, [pc, #176]	; (555c <_adc_init+0x128>)
    54ac:	fb03 2301 	mla	r3, r3, r1, r2
    54b0:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    54b2:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    54b4:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    54b6:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54be:	2b00      	cmp	r3, #0
    54c0:	d1fa      	bne.n	54b8 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    54c2:	2316      	movs	r3, #22
    54c4:	4a25      	ldr	r2, [pc, #148]	; (555c <_adc_init+0x128>)
    54c6:	fb03 2301 	mla	r3, r3, r1, r2
    54ca:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    54cc:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54d4:	2b00      	cmp	r3, #0
    54d6:	d1fa      	bne.n	54ce <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    54d8:	2316      	movs	r3, #22
    54da:	4a20      	ldr	r2, [pc, #128]	; (555c <_adc_init+0x128>)
    54dc:	fb03 2301 	mla	r3, r3, r1, r2
    54e0:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    54e2:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54ea:	2b00      	cmp	r3, #0
    54ec:	d1fa      	bne.n	54e4 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    54ee:	2316      	movs	r3, #22
    54f0:	4a1a      	ldr	r2, [pc, #104]	; (555c <_adc_init+0x128>)
    54f2:	fb03 2301 	mla	r3, r3, r1, r2
    54f6:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    54f8:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54fc:	f013 0f80 	tst.w	r3, #128	; 0x80
    5500:	d1fb      	bne.n	54fa <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    5502:	2316      	movs	r3, #22
    5504:	4a15      	ldr	r2, [pc, #84]	; (555c <_adc_init+0x128>)
    5506:	fb03 2301 	mla	r3, r3, r1, r2
    550a:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    550c:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    550e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5510:	f413 7f80 	tst.w	r3, #256	; 0x100
    5514:	d1fb      	bne.n	550e <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    5516:	2316      	movs	r3, #22
    5518:	4a10      	ldr	r2, [pc, #64]	; (555c <_adc_init+0x128>)
    551a:	fb03 2301 	mla	r3, r3, r1, r2
    551e:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    5520:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5522:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5524:	f413 7f00 	tst.w	r3, #512	; 0x200
    5528:	d1fb      	bne.n	5522 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    552a:	2316      	movs	r3, #22
    552c:	4a0b      	ldr	r2, [pc, #44]	; (555c <_adc_init+0x128>)
    552e:	fb03 2301 	mla	r3, r3, r1, r2
    5532:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    5534:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5536:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5538:	f413 6f80 	tst.w	r3, #1024	; 0x400
    553c:	d1fb      	bne.n	5536 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    553e:	2216      	movs	r2, #22
    5540:	4b06      	ldr	r3, [pc, #24]	; (555c <_adc_init+0x128>)
    5542:	fb02 3101 	mla	r1, r2, r1, r3
    5546:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    5548:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    554a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    554c:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    554e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5550:	f013 0f03 	tst.w	r3, #3
    5554:	d1fb      	bne.n	554e <_adc_init+0x11a>

	return ERR_NONE;
}
    5556:	2000      	movs	r0, #0
    5558:	4770      	bx	lr
    555a:	bf00      	nop
    555c:	0000bed0 	.word	0x0000bed0

00005560 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    5560:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    5562:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    5564:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    5568:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    556c:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    556e:	f013 0f01 	tst.w	r3, #1
    5572:	d106      	bne.n	5582 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    5574:	f013 0f02 	tst.w	r3, #2
    5578:	d10d      	bne.n	5596 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    557a:	f013 0f04 	tst.w	r3, #4
    557e:	d111      	bne.n	55a4 <_adc_interrupt_handler+0x44>
    5580:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    5582:	2301      	movs	r3, #1
    5584:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    5588:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    558c:	6883      	ldr	r3, [r0, #8]
    558e:	b292      	uxth	r2, r2
    5590:	2100      	movs	r1, #0
    5592:	4798      	blx	r3
    5594:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    5596:	2302      	movs	r3, #2
    5598:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    559c:	6843      	ldr	r3, [r0, #4]
    559e:	2100      	movs	r1, #0
    55a0:	4798      	blx	r3
    55a2:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    55a4:	2304      	movs	r3, #4
    55a6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    55aa:	6803      	ldr	r3, [r0, #0]
    55ac:	2100      	movs	r1, #0
    55ae:	4798      	blx	r3
	}
}
    55b0:	e7e6      	b.n	5580 <_adc_interrupt_handler+0x20>
	...

000055b4 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    55b4:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    55b8:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    55bc:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    55c0:	b148      	cbz	r0, 55d6 <_adc_get_regs+0x22>
    55c2:	2801      	cmp	r0, #1
    55c4:	d009      	beq.n	55da <_adc_get_regs+0x26>
{
    55c6:	b508      	push	{r3, lr}
	ASSERT(false);
    55c8:	228c      	movs	r2, #140	; 0x8c
    55ca:	4905      	ldr	r1, [pc, #20]	; (55e0 <_adc_get_regs+0x2c>)
    55cc:	2000      	movs	r0, #0
    55ce:	4b05      	ldr	r3, [pc, #20]	; (55e4 <_adc_get_regs+0x30>)
    55d0:	4798      	blx	r3
	return 0;
    55d2:	2000      	movs	r0, #0
    55d4:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    55d6:	2000      	movs	r0, #0
    55d8:	4770      	bx	lr
    55da:	2001      	movs	r0, #1
    55dc:	4770      	bx	lr
    55de:	bf00      	nop
    55e0:	0000befc 	.word	0x0000befc
    55e4:	00005259 	.word	0x00005259

000055e8 <_adc_async_init>:
{
    55e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55ec:	460c      	mov	r4, r1
	ASSERT(device);
    55ee:	4605      	mov	r5, r0
    55f0:	22e6      	movs	r2, #230	; 0xe6
    55f2:	493b      	ldr	r1, [pc, #236]	; (56e0 <_adc_async_init+0xf8>)
    55f4:	3000      	adds	r0, #0
    55f6:	bf18      	it	ne
    55f8:	2001      	movne	r0, #1
    55fa:	4b3a      	ldr	r3, [pc, #232]	; (56e4 <_adc_async_init+0xfc>)
    55fc:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    55fe:	4620      	mov	r0, r4
    5600:	4b39      	ldr	r3, [pc, #228]	; (56e8 <_adc_async_init+0x100>)
    5602:	4798      	blx	r3
    5604:	4601      	mov	r1, r0
    5606:	4620      	mov	r0, r4
    5608:	4b38      	ldr	r3, [pc, #224]	; (56ec <_adc_async_init+0x104>)
    560a:	4798      	blx	r3
	if (init_status) {
    560c:	4606      	mov	r6, r0
    560e:	b110      	cbz	r0, 5616 <_adc_async_init+0x2e>
}
    5610:	4630      	mov	r0, r6
    5612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    5616:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    5618:	4b35      	ldr	r3, [pc, #212]	; (56f0 <_adc_async_init+0x108>)
    561a:	429c      	cmp	r4, r3
    561c:	d05c      	beq.n	56d8 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    561e:	4b35      	ldr	r3, [pc, #212]	; (56f4 <_adc_async_init+0x10c>)
    5620:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    5622:	bf04      	itt	eq
    5624:	4b34      	ldreq	r3, [pc, #208]	; (56f8 <_adc_async_init+0x110>)
    5626:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    5628:	4628      	mov	r0, r5
    562a:	4f34      	ldr	r7, [pc, #208]	; (56fc <_adc_async_init+0x114>)
    562c:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    562e:	0943      	lsrs	r3, r0, #5
    5630:	f000 001f 	and.w	r0, r0, #31
    5634:	2401      	movs	r4, #1
    5636:	fa04 f000 	lsl.w	r0, r4, r0
    563a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5700 <_adc_async_init+0x118>
    563e:	3320      	adds	r3, #32
    5640:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5644:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5648:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    564c:	4628      	mov	r0, r5
    564e:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5650:	0943      	lsrs	r3, r0, #5
    5652:	f000 001f 	and.w	r0, r0, #31
    5656:	fa04 f000 	lsl.w	r0, r4, r0
    565a:	3360      	adds	r3, #96	; 0x60
    565c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    5660:	4628      	mov	r0, r5
    5662:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5664:	0943      	lsrs	r3, r0, #5
    5666:	f000 001f 	and.w	r0, r0, #31
    566a:	4084      	lsls	r4, r0
    566c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    5670:	4628      	mov	r0, r5
    5672:	47b8      	blx	r7
    5674:	3001      	adds	r0, #1
    5676:	b280      	uxth	r0, r0
    5678:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    567a:	2b00      	cmp	r3, #0
    567c:	dbc8      	blt.n	5610 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    567e:	095b      	lsrs	r3, r3, #5
    5680:	f000 001f 	and.w	r0, r0, #31
    5684:	2201      	movs	r2, #1
    5686:	fa02 f000 	lsl.w	r0, r2, r0
    568a:	3320      	adds	r3, #32
    568c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5690:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5694:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    5698:	4628      	mov	r0, r5
    569a:	47b8      	blx	r7
    569c:	3001      	adds	r0, #1
    569e:	b280      	uxth	r0, r0
    56a0:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    56a2:	2b00      	cmp	r3, #0
    56a4:	dbb4      	blt.n	5610 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    56a6:	095b      	lsrs	r3, r3, #5
    56a8:	f000 001f 	and.w	r0, r0, #31
    56ac:	2201      	movs	r2, #1
    56ae:	fa02 f000 	lsl.w	r0, r2, r0
    56b2:	3360      	adds	r3, #96	; 0x60
    56b4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    56b8:	4628      	mov	r0, r5
    56ba:	47b8      	blx	r7
    56bc:	3001      	adds	r0, #1
    56be:	b280      	uxth	r0, r0
    56c0:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    56c2:	2b00      	cmp	r3, #0
    56c4:	dba4      	blt.n	5610 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    56c6:	095b      	lsrs	r3, r3, #5
    56c8:	f000 001f 	and.w	r0, r0, #31
    56cc:	2201      	movs	r2, #1
    56ce:	fa02 f000 	lsl.w	r0, r2, r0
    56d2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    56d6:	e79b      	b.n	5610 <_adc_async_init+0x28>
		_adc0_dev = dev;
    56d8:	4b07      	ldr	r3, [pc, #28]	; (56f8 <_adc_async_init+0x110>)
    56da:	601d      	str	r5, [r3, #0]
    56dc:	e7a4      	b.n	5628 <_adc_async_init+0x40>
    56de:	bf00      	nop
    56e0:	0000befc 	.word	0x0000befc
    56e4:	00005259 	.word	0x00005259
    56e8:	000055b5 	.word	0x000055b5
    56ec:	00005435 	.word	0x00005435
    56f0:	43001c00 	.word	0x43001c00
    56f4:	43002000 	.word	0x43002000
    56f8:	20000800 	.word	0x20000800
    56fc:	0000541d 	.word	0x0000541d
    5700:	e000e100 	.word	0xe000e100

00005704 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    5704:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    5706:	8813      	ldrh	r3, [r2, #0]
    5708:	b29b      	uxth	r3, r3
    570a:	f043 0302 	orr.w	r3, r3, #2
    570e:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5710:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5712:	f013 0f03 	tst.w	r3, #3
    5716:	d1fb      	bne.n	5710 <_adc_async_enable_channel+0xc>
}
    5718:	4770      	bx	lr

0000571a <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    571a:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    571c:	88db      	ldrh	r3, [r3, #6]
    571e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    5722:	2b03      	cmp	r3, #3
}
    5724:	bf0c      	ite	eq
    5726:	2001      	moveq	r0, #1
    5728:	2002      	movne	r0, #2
    572a:	4770      	bx	lr

0000572c <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    572c:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    572e:	7d13      	ldrb	r3, [r2, #20]
    5730:	f043 0302 	orr.w	r3, r3, #2
    5734:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5736:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5738:	f3c3 030b 	ubfx	r3, r3, #0, #12
    573c:	2b00      	cmp	r3, #0
    573e:	d1fa      	bne.n	5736 <_adc_async_convert+0xa>
}
    5740:	4770      	bx	lr

00005742 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    5742:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    5744:	2a01      	cmp	r2, #1
    5746:	d007      	beq.n	5758 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    5748:	2a02      	cmp	r2, #2
    574a:	d00e      	beq.n	576a <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    574c:	b91a      	cbnz	r2, 5756 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    574e:	b1ab      	cbz	r3, 577c <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    5750:	2301      	movs	r3, #1
    5752:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5756:	4770      	bx	lr
	if (value == 0x0) {
    5758:	b91b      	cbnz	r3, 5762 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    575a:	2304      	movs	r3, #4
    575c:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5760:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    5762:	2304      	movs	r3, #4
    5764:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5768:	4770      	bx	lr
	if (value == 0x0) {
    576a:	b91b      	cbnz	r3, 5774 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    576c:	2302      	movs	r3, #2
    576e:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5772:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    5774:	2302      	movs	r3, #2
    5776:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    577a:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    577c:	2301      	movs	r3, #1
    577e:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5782:	4770      	bx	lr

00005784 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    5784:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5786:	4b02      	ldr	r3, [pc, #8]	; (5790 <ADC0_0_Handler+0xc>)
    5788:	6818      	ldr	r0, [r3, #0]
    578a:	4b02      	ldr	r3, [pc, #8]	; (5794 <ADC0_0_Handler+0x10>)
    578c:	4798      	blx	r3
    578e:	bd08      	pop	{r3, pc}
    5790:	20000800 	.word	0x20000800
    5794:	00005561 	.word	0x00005561

00005798 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    5798:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    579a:	4b02      	ldr	r3, [pc, #8]	; (57a4 <ADC0_1_Handler+0xc>)
    579c:	6818      	ldr	r0, [r3, #0]
    579e:	4b02      	ldr	r3, [pc, #8]	; (57a8 <ADC0_1_Handler+0x10>)
    57a0:	4798      	blx	r3
    57a2:	bd08      	pop	{r3, pc}
    57a4:	20000800 	.word	0x20000800
    57a8:	00005561 	.word	0x00005561

000057ac <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    57ac:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    57ae:	4b02      	ldr	r3, [pc, #8]	; (57b8 <ADC1_0_Handler+0xc>)
    57b0:	6858      	ldr	r0, [r3, #4]
    57b2:	4b02      	ldr	r3, [pc, #8]	; (57bc <ADC1_0_Handler+0x10>)
    57b4:	4798      	blx	r3
    57b6:	bd08      	pop	{r3, pc}
    57b8:	20000800 	.word	0x20000800
    57bc:	00005561 	.word	0x00005561

000057c0 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    57c0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    57c2:	4b02      	ldr	r3, [pc, #8]	; (57cc <ADC1_1_Handler+0xc>)
    57c4:	6858      	ldr	r0, [r3, #4]
    57c6:	4b02      	ldr	r3, [pc, #8]	; (57d0 <ADC1_1_Handler+0x10>)
    57c8:	4798      	blx	r3
    57ca:	bd08      	pop	{r3, pc}
    57cc:	20000800 	.word	0x20000800
    57d0:	00005561 	.word	0x00005561

000057d4 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57d4:	0943      	lsrs	r3, r0, #5
    57d6:	f000 001f 	and.w	r0, r0, #31
    57da:	2201      	movs	r2, #1
    57dc:	fa02 f000 	lsl.w	r0, r2, r0
    57e0:	3340      	adds	r3, #64	; 0x40
    57e2:	4a02      	ldr	r2, [pc, #8]	; (57ec <_irq_set+0x18>)
    57e4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    57e8:	4770      	bx	lr
    57ea:	bf00      	nop
    57ec:	e000e100 	.word	0xe000e100

000057f0 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    57f0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    57f4:	00c0      	lsls	r0, r0, #3
    57f6:	4770      	bx	lr

000057f8 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    57f8:	4b01      	ldr	r3, [pc, #4]	; (5800 <_get_cycles_for_ms+0x8>)
    57fa:	fb03 f000 	mul.w	r0, r3, r0
    57fe:	4770      	bx	lr
    5800:	0001d4c0 	.word	0x0001d4c0

00005804 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5804:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5806:	4a0e      	ldr	r2, [pc, #56]	; (5840 <_init_chip+0x3c>)
    5808:	8813      	ldrh	r3, [r2, #0]
    580a:	b29b      	uxth	r3, r3
    580c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    5810:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    5812:	4b0c      	ldr	r3, [pc, #48]	; (5844 <_init_chip+0x40>)
    5814:	4798      	blx	r3
	_oscctrl_init_sources();
    5816:	4b0c      	ldr	r3, [pc, #48]	; (5848 <_init_chip+0x44>)
    5818:	4798      	blx	r3
	_mclk_init();
    581a:	4b0c      	ldr	r3, [pc, #48]	; (584c <_init_chip+0x48>)
    581c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    581e:	2004      	movs	r0, #4
    5820:	4c0b      	ldr	r4, [pc, #44]	; (5850 <_init_chip+0x4c>)
    5822:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    5824:	4b0b      	ldr	r3, [pc, #44]	; (5854 <_init_chip+0x50>)
    5826:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5828:	f640 70fb 	movw	r0, #4091	; 0xffb
    582c:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    582e:	4a0a      	ldr	r2, [pc, #40]	; (5858 <_init_chip+0x54>)
    5830:	6913      	ldr	r3, [r2, #16]
    5832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5836:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    5838:	4b08      	ldr	r3, [pc, #32]	; (585c <_init_chip+0x58>)
    583a:	4798      	blx	r3
    583c:	bd10      	pop	{r4, pc}
    583e:	bf00      	nop
    5840:	41004000 	.word	0x41004000
    5844:	00005ce1 	.word	0x00005ce1
    5848:	00005cf5 	.word	0x00005cf5
    584c:	00005c09 	.word	0x00005c09
    5850:	00005b91 	.word	0x00005b91
    5854:	00005cf9 	.word	0x00005cf9
    5858:	40000800 	.word	0x40000800
    585c:	000058d5 	.word	0x000058d5

00005860 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    5860:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    5862:	4a1a      	ldr	r2, [pc, #104]	; (58cc <_dmac_handler+0x6c>)
    5864:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    5866:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    586a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    586e:	4818      	ldr	r0, [pc, #96]	; (58d0 <_dmac_handler+0x70>)
    5870:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    5874:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5878:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    587c:	f012 0f01 	tst.w	r2, #1
    5880:	d10a      	bne.n	5898 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    5882:	011a      	lsls	r2, r3, #4
    5884:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5888:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    588c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    5890:	f012 0f02 	tst.w	r2, #2
    5894:	d10b      	bne.n	58ae <_dmac_handler+0x4e>
    5896:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    5898:	011a      	lsls	r2, r3, #4
    589a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    589e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    58a2:	2101      	movs	r1, #1
    58a4:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    58a8:	6843      	ldr	r3, [r0, #4]
    58aa:	4798      	blx	r3
    58ac:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    58ae:	011a      	lsls	r2, r3, #4
    58b0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    58b4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    58b8:	2102      	movs	r1, #2
    58ba:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    58be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    58c2:	4a03      	ldr	r2, [pc, #12]	; (58d0 <_dmac_handler+0x70>)
    58c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58c8:	4798      	blx	r3
	}
}
    58ca:	e7e4      	b.n	5896 <_dmac_handler+0x36>
    58cc:	4100a000 	.word	0x4100a000
    58d0:	20000808 	.word	0x20000808

000058d4 <_dma_init>:
{
    58d4:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    58d6:	4a32      	ldr	r2, [pc, #200]	; (59a0 <_dma_init+0xcc>)
    58d8:	8813      	ldrh	r3, [r2, #0]
    58da:	f023 0302 	bic.w	r3, r3, #2
    58de:	041b      	lsls	r3, r3, #16
    58e0:	0c1b      	lsrs	r3, r3, #16
    58e2:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    58e4:	8853      	ldrh	r3, [r2, #2]
    58e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    58ea:	041b      	lsls	r3, r3, #16
    58ec:	0c1b      	lsrs	r3, r3, #16
    58ee:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    58f0:	8813      	ldrh	r3, [r2, #0]
    58f2:	b29b      	uxth	r3, r3
    58f4:	f043 0301 	orr.w	r3, r3, #1
    58f8:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    58fa:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    58fc:	f013 0f01 	tst.w	r3, #1
    5900:	d1fb      	bne.n	58fa <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    5902:	4b27      	ldr	r3, [pc, #156]	; (59a0 <_dma_init+0xcc>)
    5904:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    5908:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    590a:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    590c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    5910:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    5914:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    5916:	2100      	movs	r1, #0
    5918:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    591a:	4a22      	ldr	r2, [pc, #136]	; (59a4 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    591c:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    591e:	4a22      	ldr	r2, [pc, #136]	; (59a8 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    5920:	639a      	str	r2, [r3, #56]	; 0x38
    5922:	4b22      	ldr	r3, [pc, #136]	; (59ac <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    5924:	4c1f      	ldr	r4, [pc, #124]	; (59a4 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    5926:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    5928:	681d      	ldr	r5, [r3, #0]
    592a:	0108      	lsls	r0, r1, #4
    592c:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    5930:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    5934:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    5936:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    5938:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    593c:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    593e:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    5942:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    5944:	1822      	adds	r2, r4, r0
    5946:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    5948:	60d6      	str	r6, [r2, #12]
    594a:	3101      	adds	r1, #1
    594c:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    594e:	2920      	cmp	r1, #32
    5950:	d1ea      	bne.n	5928 <_dma_init+0x54>
    5952:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5954:	2001      	movs	r0, #1
    5956:	4916      	ldr	r1, [pc, #88]	; (59b0 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    5958:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    595a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    595e:	d00b      	beq.n	5978 <_dma_init+0xa4>
    5960:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    5962:	2b24      	cmp	r3, #36	; 0x24
    5964:	d1f8      	bne.n	5958 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    5966:	4a0e      	ldr	r2, [pc, #56]	; (59a0 <_dma_init+0xcc>)
    5968:	8813      	ldrh	r3, [r2, #0]
    596a:	b29b      	uxth	r3, r3
    596c:	f043 0302 	orr.w	r3, r3, #2
    5970:	8013      	strh	r3, [r2, #0]
}
    5972:	2000      	movs	r0, #0
    5974:	bc70      	pop	{r4, r5, r6}
    5976:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5978:	095c      	lsrs	r4, r3, #5
    597a:	f002 021f 	and.w	r2, r2, #31
    597e:	fa00 f202 	lsl.w	r2, r0, r2
    5982:	f104 0520 	add.w	r5, r4, #32
    5986:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    598a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    598e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5992:	f104 0560 	add.w	r5, r4, #96	; 0x60
    5996:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    599a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    599e:	e7df      	b.n	5960 <_dma_init+0x8c>
    59a0:	4100a000 	.word	0x4100a000
    59a4:	20003a70 	.word	0x20003a70
    59a8:	20003c70 	.word	0x20003c70
    59ac:	0000bf14 	.word	0x0000bf14
    59b0:	e000e100 	.word	0xe000e100

000059b4 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    59b4:	b991      	cbnz	r1, 59dc <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    59b6:	b942      	cbnz	r2, 59ca <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    59b8:	0100      	lsls	r0, r0, #4
    59ba:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    59be:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    59c2:	2302      	movs	r3, #2
    59c4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    59c8:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    59ca:	0100      	lsls	r0, r0, #4
    59cc:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    59d0:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    59d4:	2302      	movs	r3, #2
    59d6:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    59da:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    59dc:	2901      	cmp	r1, #1
    59de:	d000      	beq.n	59e2 <_dma_set_irq_state+0x2e>
    59e0:	4770      	bx	lr
	if (value == 0x0) {
    59e2:	b142      	cbz	r2, 59f6 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    59e4:	0100      	lsls	r0, r0, #4
    59e6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    59ea:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    59ee:	2301      	movs	r3, #1
    59f0:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    59f4:	e7f4      	b.n	59e0 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    59f6:	0100      	lsls	r0, r0, #4
    59f8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    59fc:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5a00:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    5a04:	4770      	bx	lr
	...

00005a08 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    5a08:	4b02      	ldr	r3, [pc, #8]	; (5a14 <_dma_set_destination_address+0xc>)
    5a0a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5a0e:	6081      	str	r1, [r0, #8]
}
    5a10:	2000      	movs	r0, #0
    5a12:	4770      	bx	lr
    5a14:	20003a70 	.word	0x20003a70

00005a18 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    5a18:	4b02      	ldr	r3, [pc, #8]	; (5a24 <_dma_set_source_address+0xc>)
    5a1a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5a1e:	6041      	str	r1, [r0, #4]
}
    5a20:	2000      	movs	r0, #0
    5a22:	4770      	bx	lr
    5a24:	20003a70 	.word	0x20003a70

00005a28 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a28:	4a05      	ldr	r2, [pc, #20]	; (5a40 <_dma_srcinc_enable+0x18>)
    5a2a:	0100      	lsls	r0, r0, #4
    5a2c:	5a13      	ldrh	r3, [r2, r0]
    5a2e:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    5a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    5a34:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    5a38:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    5a3a:	5211      	strh	r1, [r2, r0]
}
    5a3c:	2000      	movs	r0, #0
    5a3e:	4770      	bx	lr
    5a40:	20003a70 	.word	0x20003a70

00005a44 <_dma_set_data_amount>:
{
    5a44:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    5a46:	4c14      	ldr	r4, [pc, #80]	; (5a98 <_dma_set_data_amount+0x54>)
    5a48:	0102      	lsls	r2, r0, #4
    5a4a:	18a3      	adds	r3, r4, r2
    5a4c:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a4e:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    5a50:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a54:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    5a56:	f412 6f00 	tst.w	r2, #2048	; 0x800
    5a5a:	d006      	beq.n	5a6a <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    5a5c:	fa01 f403 	lsl.w	r4, r1, r3
    5a60:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    5a62:	4a0d      	ldr	r2, [pc, #52]	; (5a98 <_dma_set_data_amount+0x54>)
    5a64:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    5a68:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    5a6a:	4c0b      	ldr	r4, [pc, #44]	; (5a98 <_dma_set_data_amount+0x54>)
    5a6c:	0102      	lsls	r2, r0, #4
    5a6e:	18a5      	adds	r5, r4, r2
    5a70:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a72:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    5a74:	f412 6f80 	tst.w	r2, #1024	; 0x400
    5a78:	d005      	beq.n	5a86 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    5a7a:	fa01 f303 	lsl.w	r3, r1, r3
    5a7e:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    5a80:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    5a84:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    5a86:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    5a88:	4b03      	ldr	r3, [pc, #12]	; (5a98 <_dma_set_data_amount+0x54>)
    5a8a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5a8e:	8041      	strh	r1, [r0, #2]
}
    5a90:	2000      	movs	r0, #0
    5a92:	bc30      	pop	{r4, r5}
    5a94:	4770      	bx	lr
    5a96:	bf00      	nop
    5a98:	20003a70 	.word	0x20003a70

00005a9c <_dma_enable_transaction>:
{
    5a9c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    5a9e:	4c0d      	ldr	r4, [pc, #52]	; (5ad4 <_dma_enable_transaction+0x38>)
    5aa0:	0103      	lsls	r3, r0, #4
    5aa2:	5ae2      	ldrh	r2, [r4, r3]
    5aa4:	b292      	uxth	r2, r2
    5aa6:	f042 0201 	orr.w	r2, r2, #1
    5aaa:	52e2      	strh	r2, [r4, r3]
    5aac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5ab0:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    5ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5ab6:	f042 0202 	orr.w	r2, r2, #2
    5aba:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    5abc:	b131      	cbz	r1, 5acc <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    5abe:	4a06      	ldr	r2, [pc, #24]	; (5ad8 <_dma_enable_transaction+0x3c>)
    5ac0:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    5ac2:	2301      	movs	r3, #1
    5ac4:	fa03 f000 	lsl.w	r0, r3, r0
    5ac8:	4308      	orrs	r0, r1
    5aca:	6110      	str	r0, [r2, #16]
}
    5acc:	2000      	movs	r0, #0
    5ace:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ad2:	4770      	bx	lr
    5ad4:	20003a70 	.word	0x20003a70
    5ad8:	4100a000 	.word	0x4100a000

00005adc <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    5adc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5ae0:	4b02      	ldr	r3, [pc, #8]	; (5aec <_dma_get_channel_resource+0x10>)
    5ae2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5ae6:	6001      	str	r1, [r0, #0]
}
    5ae8:	2000      	movs	r0, #0
    5aea:	4770      	bx	lr
    5aec:	20000808 	.word	0x20000808

00005af0 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    5af0:	b508      	push	{r3, lr}
	_dmac_handler();
    5af2:	4b01      	ldr	r3, [pc, #4]	; (5af8 <DMAC_0_Handler+0x8>)
    5af4:	4798      	blx	r3
    5af6:	bd08      	pop	{r3, pc}
    5af8:	00005861 	.word	0x00005861

00005afc <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    5afc:	b508      	push	{r3, lr}
	_dmac_handler();
    5afe:	4b01      	ldr	r3, [pc, #4]	; (5b04 <DMAC_1_Handler+0x8>)
    5b00:	4798      	blx	r3
    5b02:	bd08      	pop	{r3, pc}
    5b04:	00005861 	.word	0x00005861

00005b08 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    5b08:	b508      	push	{r3, lr}
	_dmac_handler();
    5b0a:	4b01      	ldr	r3, [pc, #4]	; (5b10 <DMAC_2_Handler+0x8>)
    5b0c:	4798      	blx	r3
    5b0e:	bd08      	pop	{r3, pc}
    5b10:	00005861 	.word	0x00005861

00005b14 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    5b14:	b508      	push	{r3, lr}
	_dmac_handler();
    5b16:	4b01      	ldr	r3, [pc, #4]	; (5b1c <DMAC_3_Handler+0x8>)
    5b18:	4798      	blx	r3
    5b1a:	bd08      	pop	{r3, pc}
    5b1c:	00005861 	.word	0x00005861

00005b20 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    5b20:	b508      	push	{r3, lr}
	_dmac_handler();
    5b22:	4b01      	ldr	r3, [pc, #4]	; (5b28 <DMAC_4_Handler+0x8>)
    5b24:	4798      	blx	r3
    5b26:	bd08      	pop	{r3, pc}
    5b28:	00005861 	.word	0x00005861

00005b2c <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    5b2c:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    5b2e:	2000      	movs	r0, #0
    5b30:	4770      	bx	lr
	...

00005b34 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5b34:	b430      	push	{r4, r5}
    5b36:	4814      	ldr	r0, [pc, #80]	; (5b88 <_event_system_init+0x54>)
    5b38:	f100 0543 	add.w	r5, r0, #67	; 0x43
    5b3c:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    5b3e:	4c13      	ldr	r4, [pc, #76]	; (5b8c <_event_system_init+0x58>)
    5b40:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5b42:	f813 1b01 	ldrb.w	r1, [r3], #1
    5b46:	3248      	adds	r2, #72	; 0x48
    5b48:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    5b4c:	42ab      	cmp	r3, r5
    5b4e:	d1f7      	bne.n	5b40 <_event_system_init+0xc>
    5b50:	480d      	ldr	r0, [pc, #52]	; (5b88 <_event_system_init+0x54>)
    5b52:	f100 0442 	add.w	r4, r0, #66	; 0x42
    5b56:	3080      	adds	r0, #128	; 0x80
    5b58:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5b5a:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    5b5e:	00ca      	lsls	r2, r1, #3
    5b60:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5b64:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    5b68:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5b6a:	f850 3f04 	ldr.w	r3, [r0, #4]!
    5b6e:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    5b70:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    5b74:	43db      	mvns	r3, r3
    5b76:	b2db      	uxtb	r3, r3
    5b78:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    5b7c:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5b7e:	2920      	cmp	r1, #32
    5b80:	d1eb      	bne.n	5b5a <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    5b82:	2000      	movs	r0, #0
    5b84:	bc30      	pop	{r4, r5}
    5b86:	4770      	bx	lr
    5b88:	0000c014 	.word	0x0000c014
    5b8c:	4100e000 	.word	0x4100e000

00005b90 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    5b90:	f010 0f01 	tst.w	r0, #1
    5b94:	d008      	beq.n	5ba8 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5b96:	4a17      	ldr	r2, [pc, #92]	; (5bf4 <_gclk_init_generators_by_fref+0x64>)
    5b98:	4b17      	ldr	r3, [pc, #92]	; (5bf8 <_gclk_init_generators_by_fref+0x68>)
    5b9a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5b9c:	4619      	mov	r1, r3
    5b9e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5ba2:	684b      	ldr	r3, [r1, #4]
    5ba4:	4213      	tst	r3, r2
    5ba6:	d1fc      	bne.n	5ba2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5ba8:	f010 0f02 	tst.w	r0, #2
    5bac:	d008      	beq.n	5bc0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5bae:	4a13      	ldr	r2, [pc, #76]	; (5bfc <_gclk_init_generators_by_fref+0x6c>)
    5bb0:	4b11      	ldr	r3, [pc, #68]	; (5bf8 <_gclk_init_generators_by_fref+0x68>)
    5bb2:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5bb4:	4619      	mov	r1, r3
    5bb6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5bba:	684b      	ldr	r3, [r1, #4]
    5bbc:	4213      	tst	r3, r2
    5bbe:	d1fc      	bne.n	5bba <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5bc0:	f010 0f04 	tst.w	r0, #4
    5bc4:	d008      	beq.n	5bd8 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5bc6:	4a0e      	ldr	r2, [pc, #56]	; (5c00 <_gclk_init_generators_by_fref+0x70>)
    5bc8:	4b0b      	ldr	r3, [pc, #44]	; (5bf8 <_gclk_init_generators_by_fref+0x68>)
    5bca:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5bcc:	4619      	mov	r1, r3
    5bce:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5bd2:	684b      	ldr	r3, [r1, #4]
    5bd4:	4213      	tst	r3, r2
    5bd6:	d1fc      	bne.n	5bd2 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5bd8:	f010 0f08 	tst.w	r0, #8
    5bdc:	d008      	beq.n	5bf0 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5bde:	4a09      	ldr	r2, [pc, #36]	; (5c04 <_gclk_init_generators_by_fref+0x74>)
    5be0:	4b05      	ldr	r3, [pc, #20]	; (5bf8 <_gclk_init_generators_by_fref+0x68>)
    5be2:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5be4:	4619      	mov	r1, r3
    5be6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5bea:	684b      	ldr	r3, [r1, #4]
    5bec:	4213      	tst	r3, r2
    5bee:	d1fc      	bne.n	5bea <_gclk_init_generators_by_fref+0x5a>
    5bf0:	4770      	bx	lr
    5bf2:	bf00      	nop
    5bf4:	00010108 	.word	0x00010108
    5bf8:	40001c00 	.word	0x40001c00
    5bfc:	00010106 	.word	0x00010106
    5c00:	00100106 	.word	0x00100106
    5c04:	00010104 	.word	0x00010104

00005c08 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    5c08:	2201      	movs	r2, #1
    5c0a:	4b01      	ldr	r3, [pc, #4]	; (5c10 <_mclk_init+0x8>)
    5c0c:	715a      	strb	r2, [r3, #5]
    5c0e:	4770      	bx	lr
    5c10:	40000800 	.word	0x40000800

00005c14 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    5c14:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    5c16:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    5c18:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    5c1a:	f012 0f01 	tst.w	r2, #1
    5c1e:	d005      	beq.n	5c2c <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    5c20:	2201      	movs	r2, #1
    5c22:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    5c24:	6803      	ldr	r3, [r0, #0]
    5c26:	b153      	cbz	r3, 5c3e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    5c28:	4798      	blx	r3
    5c2a:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    5c2c:	8a1a      	ldrh	r2, [r3, #16]
    5c2e:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    5c30:	b12a      	cbz	r2, 5c3e <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    5c32:	f240 225e 	movw	r2, #606	; 0x25e
    5c36:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    5c38:	6843      	ldr	r3, [r0, #4]
    5c3a:	b103      	cbz	r3, 5c3e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    5c3c:	4798      	blx	r3
    5c3e:	bd08      	pop	{r3, pc}

00005c40 <_flash_init>:
{
    5c40:	b538      	push	{r3, r4, r5, lr}
    5c42:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    5c44:	4605      	mov	r5, r0
    5c46:	b350      	cbz	r0, 5c9e <_flash_init+0x5e>
    5c48:	4816      	ldr	r0, [pc, #88]	; (5ca4 <_flash_init+0x64>)
    5c4a:	4281      	cmp	r1, r0
    5c4c:	bf14      	ite	ne
    5c4e:	2000      	movne	r0, #0
    5c50:	2001      	moveq	r0, #1
    5c52:	224b      	movs	r2, #75	; 0x4b
    5c54:	4914      	ldr	r1, [pc, #80]	; (5ca8 <_flash_init+0x68>)
    5c56:	4b15      	ldr	r3, [pc, #84]	; (5cac <_flash_init+0x6c>)
    5c58:	4798      	blx	r3
	device->hw = hw;
    5c5a:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    5c5c:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    5c5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    5c62:	049b      	lsls	r3, r3, #18
    5c64:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    5c66:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    5c68:	4b11      	ldr	r3, [pc, #68]	; (5cb0 <_flash_init+0x70>)
    5c6a:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c6c:	4b11      	ldr	r3, [pc, #68]	; (5cb4 <_flash_init+0x74>)
    5c6e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    5c72:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5c7a:	f3bf 8f6f 	isb	sy
    5c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5c86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5c8a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c8e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    5c92:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c96:	6019      	str	r1, [r3, #0]
    5c98:	601a      	str	r2, [r3, #0]
}
    5c9a:	2000      	movs	r0, #0
    5c9c:	bd38      	pop	{r3, r4, r5, pc}
    5c9e:	2000      	movs	r0, #0
    5ca0:	e7d7      	b.n	5c52 <_flash_init+0x12>
    5ca2:	bf00      	nop
    5ca4:	41004000 	.word	0x41004000
    5ca8:	0000c118 	.word	0x0000c118
    5cac:	00005259 	.word	0x00005259
    5cb0:	20000988 	.word	0x20000988
    5cb4:	e000e100 	.word	0xe000e100

00005cb8 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    5cb8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    5cba:	4b02      	ldr	r3, [pc, #8]	; (5cc4 <NVMCTRL_0_Handler+0xc>)
    5cbc:	6818      	ldr	r0, [r3, #0]
    5cbe:	4b02      	ldr	r3, [pc, #8]	; (5cc8 <NVMCTRL_0_Handler+0x10>)
    5cc0:	4798      	blx	r3
    5cc2:	bd08      	pop	{r3, pc}
    5cc4:	20000988 	.word	0x20000988
    5cc8:	00005c15 	.word	0x00005c15

00005ccc <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    5ccc:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    5cce:	4b02      	ldr	r3, [pc, #8]	; (5cd8 <NVMCTRL_1_Handler+0xc>)
    5cd0:	6818      	ldr	r0, [r3, #0]
    5cd2:	4b02      	ldr	r3, [pc, #8]	; (5cdc <NVMCTRL_1_Handler+0x10>)
    5cd4:	4798      	blx	r3
    5cd6:	bd08      	pop	{r3, pc}
    5cd8:	20000988 	.word	0x20000988
    5cdc:	00005c15 	.word	0x00005c15

00005ce0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5ce0:	4b03      	ldr	r3, [pc, #12]	; (5cf0 <_osc32kctrl_init_sources+0x10>)
    5ce2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5ce4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5ce8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5cea:	2201      	movs	r2, #1
    5cec:	741a      	strb	r2, [r3, #16]
    5cee:	4770      	bx	lr
    5cf0:	40001400 	.word	0x40001400

00005cf4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5cf4:	4770      	bx	lr
	...

00005cf8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5cf8:	4a47      	ldr	r2, [pc, #284]	; (5e18 <_oscctrl_init_referenced_generators+0x120>)
    5cfa:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5cfc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    5d00:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5d04:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5d06:	4611      	mov	r1, r2
    5d08:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5d0c:	684b      	ldr	r3, [r1, #4]
    5d0e:	4213      	tst	r3, r2
    5d10:	d1fc      	bne.n	5d0c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5d12:	4a41      	ldr	r2, [pc, #260]	; (5e18 <_oscctrl_init_referenced_generators+0x120>)
    5d14:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5d16:	f013 0f04 	tst.w	r3, #4
    5d1a:	d1fb      	bne.n	5d14 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5d1c:	4b3f      	ldr	r3, [pc, #252]	; (5e1c <_oscctrl_init_referenced_generators+0x124>)
    5d1e:	2200      	movs	r2, #0
    5d20:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5d22:	4a3f      	ldr	r2, [pc, #252]	; (5e20 <_oscctrl_init_referenced_generators+0x128>)
    5d24:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d26:	461a      	mov	r2, r3
    5d28:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5d2c:	f013 0f10 	tst.w	r3, #16
    5d30:	d1fa      	bne.n	5d28 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5d32:	2200      	movs	r2, #0
    5d34:	4b39      	ldr	r3, [pc, #228]	; (5e1c <_oscctrl_init_referenced_generators+0x124>)
    5d36:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d3a:	461a      	mov	r2, r3
    5d3c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5d40:	f013 0f04 	tst.w	r3, #4
    5d44:	d1fa      	bne.n	5d3c <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5d46:	2202      	movs	r2, #2
    5d48:	4b34      	ldr	r3, [pc, #208]	; (5e1c <_oscctrl_init_referenced_generators+0x124>)
    5d4a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d4c:	461a      	mov	r2, r3
    5d4e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5d52:	f013 0f02 	tst.w	r3, #2
    5d56:	d1fa      	bne.n	5d4e <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5d58:	4b30      	ldr	r3, [pc, #192]	; (5e1c <_oscctrl_init_referenced_generators+0x124>)
    5d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5d5c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d5e:	461a      	mov	r2, r3
    5d60:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5d64:	f013 0f08 	tst.w	r3, #8
    5d68:	d1fa      	bne.n	5d60 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5d6a:	2288      	movs	r2, #136	; 0x88
    5d6c:	4b2b      	ldr	r3, [pc, #172]	; (5e1c <_oscctrl_init_referenced_generators+0x124>)
    5d6e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d72:	461a      	mov	r2, r3
    5d74:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5d78:	f013 0f04 	tst.w	r3, #4
    5d7c:	d1fa      	bne.n	5d74 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5d7e:	2242      	movs	r2, #66	; 0x42
    5d80:	4b25      	ldr	r3, [pc, #148]	; (5e18 <_oscctrl_init_referenced_generators+0x120>)
    5d82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5d86:	2227      	movs	r2, #39	; 0x27
    5d88:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    5d8c:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5d8e:	461a      	mov	r2, r3
    5d90:	6d13      	ldr	r3, [r2, #80]	; 0x50
    5d92:	f013 0f06 	tst.w	r3, #6
    5d96:	d1fb      	bne.n	5d90 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5d98:	4b20      	ldr	r3, [pc, #128]	; (5e1c <_oscctrl_init_referenced_generators+0x124>)
    5d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5d9e:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5da0:	2202      	movs	r2, #2
    5da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5da6:	461a      	mov	r2, r3
    5da8:	6d13      	ldr	r3, [r2, #80]	; 0x50
    5daa:	f013 0f02 	tst.w	r3, #2
    5dae:	d1fb      	bne.n	5da8 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5db0:	4b1a      	ldr	r3, [pc, #104]	; (5e1c <_oscctrl_init_referenced_generators+0x124>)
    5db2:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5db6:	f013 0f01 	tst.w	r3, #1
    5dba:	d026      	beq.n	5e0a <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5dbc:	4a17      	ldr	r2, [pc, #92]	; (5e1c <_oscctrl_init_referenced_generators+0x124>)
    5dbe:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    5dc0:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5dc4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    5dc8:	d1f9      	bne.n	5dbe <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5dca:	4b14      	ldr	r3, [pc, #80]	; (5e1c <_oscctrl_init_referenced_generators+0x124>)
    5dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5dce:	f012 0f01 	tst.w	r2, #1
    5dd2:	d103      	bne.n	5ddc <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    5dd6:	f012 0f02 	tst.w	r2, #2
    5dda:	d0f7      	beq.n	5dcc <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5ddc:	4a0e      	ldr	r2, [pc, #56]	; (5e18 <_oscctrl_init_referenced_generators+0x120>)
    5dde:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5de0:	2b00      	cmp	r3, #0
    5de2:	d1fc      	bne.n	5dde <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5de4:	4a0c      	ldr	r2, [pc, #48]	; (5e18 <_oscctrl_init_referenced_generators+0x120>)
    5de6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5de8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    5dec:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5df0:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5df2:	4611      	mov	r1, r2
    5df4:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5df8:	684b      	ldr	r3, [r1, #4]
    5dfa:	4213      	tst	r3, r2
    5dfc:	d1fc      	bne.n	5df8 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5dfe:	4a06      	ldr	r2, [pc, #24]	; (5e18 <_oscctrl_init_referenced_generators+0x120>)
    5e00:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5e02:	f013 0f04 	tst.w	r3, #4
    5e06:	d1fb      	bne.n	5e00 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    5e08:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5e0a:	4a04      	ldr	r2, [pc, #16]	; (5e1c <_oscctrl_init_referenced_generators+0x124>)
    5e0c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5e0e:	f413 7f80 	tst.w	r3, #256	; 0x100
    5e12:	d0fb      	beq.n	5e0c <_oscctrl_init_referenced_generators+0x114>
    5e14:	e7d9      	b.n	5dca <_oscctrl_init_referenced_generators+0xd2>
    5e16:	bf00      	nop
    5e18:	40001c00 	.word	0x40001c00
    5e1c:	40001000 	.word	0x40001000
    5e20:	04010000 	.word	0x04010000

00005e24 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    5e24:	b500      	push	{lr}
    5e26:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    5e28:	4b0d      	ldr	r3, [pc, #52]	; (5e60 <RAMECC_Handler+0x3c>)
    5e2a:	789b      	ldrb	r3, [r3, #2]
    5e2c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    5e2e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    5e30:	9b01      	ldr	r3, [sp, #4]
    5e32:	f013 0f02 	tst.w	r3, #2
    5e36:	d006      	beq.n	5e46 <RAMECC_Handler+0x22>
    5e38:	4b0a      	ldr	r3, [pc, #40]	; (5e64 <RAMECC_Handler+0x40>)
    5e3a:	681b      	ldr	r3, [r3, #0]
    5e3c:	b11b      	cbz	r3, 5e46 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    5e3e:	4a08      	ldr	r2, [pc, #32]	; (5e60 <RAMECC_Handler+0x3c>)
    5e40:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    5e42:	4798      	blx	r3
    5e44:	e009      	b.n	5e5a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    5e46:	9b01      	ldr	r3, [sp, #4]
    5e48:	f013 0f01 	tst.w	r3, #1
    5e4c:	d005      	beq.n	5e5a <RAMECC_Handler+0x36>
    5e4e:	4b05      	ldr	r3, [pc, #20]	; (5e64 <RAMECC_Handler+0x40>)
    5e50:	685b      	ldr	r3, [r3, #4]
    5e52:	b113      	cbz	r3, 5e5a <RAMECC_Handler+0x36>
    5e54:	4a02      	ldr	r2, [pc, #8]	; (5e60 <RAMECC_Handler+0x3c>)
    5e56:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    5e58:	4798      	blx	r3
	} else {
		return;
	}
}
    5e5a:	b003      	add	sp, #12
    5e5c:	f85d fb04 	ldr.w	pc, [sp], #4
    5e60:	41020000 	.word	0x41020000
    5e64:	20003e70 	.word	0x20003e70

00005e68 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    5e68:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    5e6a:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5e6c:	6913      	ldr	r3, [r2, #16]
    5e6e:	f013 0f60 	tst.w	r3, #96	; 0x60
    5e72:	d1fb      	bne.n	5e6c <_rtc_timer_set_period+0x4>
}
    5e74:	4770      	bx	lr

00005e76 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    5e76:	68c2      	ldr	r2, [r0, #12]
    5e78:	6913      	ldr	r3, [r2, #16]
    5e7a:	f013 0f60 	tst.w	r3, #96	; 0x60
    5e7e:	d1fb      	bne.n	5e78 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    5e80:	6a10      	ldr	r0, [r2, #32]
}
    5e82:	4770      	bx	lr

00005e84 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    5e84:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5e86:	f248 0103 	movw	r1, #32771	; 0x8003
    5e8a:	6913      	ldr	r3, [r2, #16]
    5e8c:	420b      	tst	r3, r1
    5e8e:	d1fc      	bne.n	5e8a <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5e90:	8810      	ldrh	r0, [r2, #0]
}
    5e92:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5e96:	4770      	bx	lr

00005e98 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    5e98:	4770      	bx	lr
	...

00005e9c <_rtc_timer_init>:
{
    5e9c:	b538      	push	{r3, r4, r5, lr}
    5e9e:	460c      	mov	r4, r1
	ASSERT(dev);
    5ea0:	4605      	mov	r5, r0
    5ea2:	2230      	movs	r2, #48	; 0x30
    5ea4:	4914      	ldr	r1, [pc, #80]	; (5ef8 <_rtc_timer_init+0x5c>)
    5ea6:	3000      	adds	r0, #0
    5ea8:	bf18      	it	ne
    5eaa:	2001      	movne	r0, #1
    5eac:	4b13      	ldr	r3, [pc, #76]	; (5efc <_rtc_timer_init+0x60>)
    5eae:	4798      	blx	r3
	dev->hw = hw;
    5eb0:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5eb2:	2301      	movs	r3, #1
    5eb4:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5eb6:	f248 0203 	movw	r2, #32771	; 0x8003
    5eba:	6923      	ldr	r3, [r4, #16]
    5ebc:	4213      	tst	r3, r2
    5ebe:	d1fc      	bne.n	5eba <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5ec0:	68eb      	ldr	r3, [r5, #12]
    5ec2:	691a      	ldr	r2, [r3, #16]
    5ec4:	f012 0f01 	tst.w	r2, #1
    5ec8:	d1fb      	bne.n	5ec2 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5eca:	f248 0280 	movw	r2, #32896	; 0x8080
    5ece:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5ed0:	f248 0103 	movw	r1, #32771	; 0x8003
    5ed4:	691a      	ldr	r2, [r3, #16]
    5ed6:	420a      	tst	r2, r1
    5ed8:	d1fc      	bne.n	5ed4 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    5eda:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    5edc:	2301      	movs	r3, #1
    5ede:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5ee0:	6913      	ldr	r3, [r2, #16]
    5ee2:	f013 0f60 	tst.w	r3, #96	; 0x60
    5ee6:	d1fb      	bne.n	5ee0 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    5ee8:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    5eea:	f44f 7280 	mov.w	r2, #256	; 0x100
    5eee:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    5ef0:	4b03      	ldr	r3, [pc, #12]	; (5f00 <_rtc_timer_init+0x64>)
    5ef2:	601d      	str	r5, [r3, #0]
}
    5ef4:	2000      	movs	r0, #0
    5ef6:	bd38      	pop	{r3, r4, r5, pc}
    5ef8:	0000c138 	.word	0x0000c138
    5efc:	00005259 	.word	0x00005259
    5f00:	2000098c 	.word	0x2000098c

00005f04 <_rtc_timer_deinit>:
{
    5f04:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    5f06:	4604      	mov	r4, r0
    5f08:	b1c8      	cbz	r0, 5f3e <_rtc_timer_deinit+0x3a>
    5f0a:	68c0      	ldr	r0, [r0, #12]
    5f0c:	3000      	adds	r0, #0
    5f0e:	bf18      	it	ne
    5f10:	2001      	movne	r0, #1
    5f12:	2252      	movs	r2, #82	; 0x52
    5f14:	490b      	ldr	r1, [pc, #44]	; (5f44 <_rtc_timer_deinit+0x40>)
    5f16:	4b0c      	ldr	r3, [pc, #48]	; (5f48 <_rtc_timer_deinit+0x44>)
    5f18:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5f1e:	4b0b      	ldr	r3, [pc, #44]	; (5f4c <_rtc_timer_deinit+0x48>)
    5f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5f24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f28:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    5f2c:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5f2e:	2301      	movs	r3, #1
    5f30:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5f32:	f248 0103 	movw	r1, #32771	; 0x8003
    5f36:	6913      	ldr	r3, [r2, #16]
    5f38:	420b      	tst	r3, r1
    5f3a:	d1fc      	bne.n	5f36 <_rtc_timer_deinit+0x32>
}
    5f3c:	bd10      	pop	{r4, pc}
    5f3e:	2000      	movs	r0, #0
    5f40:	e7e7      	b.n	5f12 <_rtc_timer_deinit+0xe>
    5f42:	bf00      	nop
    5f44:	0000c138 	.word	0x0000c138
    5f48:	00005259 	.word	0x00005259
    5f4c:	e000e100 	.word	0xe000e100

00005f50 <_rtc_timer_start>:
{
    5f50:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    5f52:	4604      	mov	r4, r0
    5f54:	b310      	cbz	r0, 5f9c <_rtc_timer_start+0x4c>
    5f56:	68c0      	ldr	r0, [r0, #12]
    5f58:	3000      	adds	r0, #0
    5f5a:	bf18      	it	ne
    5f5c:	2001      	movne	r0, #1
    5f5e:	225e      	movs	r2, #94	; 0x5e
    5f60:	490f      	ldr	r1, [pc, #60]	; (5fa0 <_rtc_timer_start+0x50>)
    5f62:	4b10      	ldr	r3, [pc, #64]	; (5fa4 <_rtc_timer_start+0x54>)
    5f64:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5f6a:	4b0f      	ldr	r3, [pc, #60]	; (5fa8 <_rtc_timer_start+0x58>)
    5f6c:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    5f6e:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    5f70:	2300      	movs	r3, #0
    5f72:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5f74:	6913      	ldr	r3, [r2, #16]
    5f76:	f013 0f08 	tst.w	r3, #8
    5f7a:	d1fb      	bne.n	5f74 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    5f7c:	68e3      	ldr	r3, [r4, #12]
    5f7e:	691a      	ldr	r2, [r3, #16]
    5f80:	f012 0f08 	tst.w	r2, #8
    5f84:	d1fb      	bne.n	5f7e <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    5f86:	881a      	ldrh	r2, [r3, #0]
    5f88:	b292      	uxth	r2, r2
    5f8a:	f042 0202 	orr.w	r2, r2, #2
    5f8e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5f90:	f248 0103 	movw	r1, #32771	; 0x8003
    5f94:	691a      	ldr	r2, [r3, #16]
    5f96:	420a      	tst	r2, r1
    5f98:	d1fc      	bne.n	5f94 <_rtc_timer_start+0x44>
}
    5f9a:	bd10      	pop	{r4, pc}
    5f9c:	2000      	movs	r0, #0
    5f9e:	e7de      	b.n	5f5e <_rtc_timer_start+0xe>
    5fa0:	0000c138 	.word	0x0000c138
    5fa4:	00005259 	.word	0x00005259
    5fa8:	e000e100 	.word	0xe000e100

00005fac <_rtc_timer_stop>:
{
    5fac:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    5fae:	4604      	mov	r4, r0
    5fb0:	b1a0      	cbz	r0, 5fdc <_rtc_timer_stop+0x30>
    5fb2:	68c0      	ldr	r0, [r0, #12]
    5fb4:	3000      	adds	r0, #0
    5fb6:	bf18      	it	ne
    5fb8:	2001      	movne	r0, #1
    5fba:	226b      	movs	r2, #107	; 0x6b
    5fbc:	4908      	ldr	r1, [pc, #32]	; (5fe0 <_rtc_timer_stop+0x34>)
    5fbe:	4b09      	ldr	r3, [pc, #36]	; (5fe4 <_rtc_timer_stop+0x38>)
    5fc0:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5fc2:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5fc4:	8813      	ldrh	r3, [r2, #0]
    5fc6:	f023 0302 	bic.w	r3, r3, #2
    5fca:	041b      	lsls	r3, r3, #16
    5fcc:	0c1b      	lsrs	r3, r3, #16
    5fce:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5fd0:	f248 0103 	movw	r1, #32771	; 0x8003
    5fd4:	6913      	ldr	r3, [r2, #16]
    5fd6:	420b      	tst	r3, r1
    5fd8:	d1fc      	bne.n	5fd4 <_rtc_timer_stop+0x28>
}
    5fda:	bd10      	pop	{r4, pc}
    5fdc:	2000      	movs	r0, #0
    5fde:	e7ec      	b.n	5fba <_rtc_timer_stop+0xe>
    5fe0:	0000c138 	.word	0x0000c138
    5fe4:	00005259 	.word	0x00005259

00005fe8 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    5fe8:	4800      	ldr	r0, [pc, #0]	; (5fec <_rtc_get_timer+0x4>)
    5fea:	4770      	bx	lr
    5fec:	20000358 	.word	0x20000358

00005ff0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5ff0:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    5ff2:	4b08      	ldr	r3, [pc, #32]	; (6014 <RTC_Handler+0x24>)
    5ff4:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5ff6:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5ff8:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    5ffa:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ffe:	d007      	beq.n	6010 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    6000:	6823      	ldr	r3, [r4, #0]
    6002:	b10b      	cbz	r3, 6008 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    6004:	4620      	mov	r0, r4
    6006:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6008:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    600a:	f44f 7280 	mov.w	r2, #256	; 0x100
    600e:	819a      	strh	r2, [r3, #12]
    6010:	bd10      	pop	{r4, pc}
    6012:	bf00      	nop
    6014:	2000098c 	.word	0x2000098c

00006018 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6018:	b470      	push	{r4, r5, r6}
    601a:	b089      	sub	sp, #36	; 0x24
    601c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    601e:	466c      	mov	r4, sp
    6020:	4d0d      	ldr	r5, [pc, #52]	; (6058 <_sercom_get_hardware_index+0x40>)
    6022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6026:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    602a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    602e:	9b00      	ldr	r3, [sp, #0]
    6030:	42b3      	cmp	r3, r6
    6032:	d00d      	beq.n	6050 <_sercom_get_hardware_index+0x38>
    6034:	4631      	mov	r1, r6
    6036:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6038:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    603a:	f853 2b04 	ldr.w	r2, [r3], #4
    603e:	428a      	cmp	r2, r1
    6040:	d007      	beq.n	6052 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6042:	3001      	adds	r0, #1
    6044:	2808      	cmp	r0, #8
    6046:	d1f8      	bne.n	603a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    6048:	2000      	movs	r0, #0
}
    604a:	b009      	add	sp, #36	; 0x24
    604c:	bc70      	pop	{r4, r5, r6}
    604e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6050:	2000      	movs	r0, #0
			return i;
    6052:	b2c0      	uxtb	r0, r0
    6054:	e7f9      	b.n	604a <_sercom_get_hardware_index+0x32>
    6056:	bf00      	nop
    6058:	0000c150 	.word	0x0000c150

0000605c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    605c:	b510      	push	{r4, lr}
	void *hw = device->hw;
    605e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6060:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    6062:	f013 0f01 	tst.w	r3, #1
    6066:	d003      	beq.n	6070 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    6068:	7da3      	ldrb	r3, [r4, #22]
    606a:	f013 0f01 	tst.w	r3, #1
    606e:	d112      	bne.n	6096 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6070:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    6072:	f013 0f02 	tst.w	r3, #2
    6076:	d003      	beq.n	6080 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    6078:	7da3      	ldrb	r3, [r4, #22]
    607a:	f013 0f02 	tst.w	r3, #2
    607e:	d10f      	bne.n	60a0 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6080:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    6082:	f013 0f04 	tst.w	r3, #4
    6086:	d015      	beq.n	60b4 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    6088:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    608a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    608e:	b163      	cbz	r3, 60aa <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6090:	23ff      	movs	r3, #255	; 0xff
    6092:	8363      	strh	r3, [r4, #26]
    6094:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    6096:	2301      	movs	r3, #1
    6098:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    609a:	6803      	ldr	r3, [r0, #0]
    609c:	4798      	blx	r3
    609e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    60a0:	2302      	movs	r3, #2
    60a2:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    60a4:	6883      	ldr	r3, [r0, #8]
    60a6:	4798      	blx	r3
    60a8:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    60aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    60ac:	6843      	ldr	r3, [r0, #4]
    60ae:	b2c9      	uxtb	r1, r1
    60b0:	4798      	blx	r3
    60b2:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    60b4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    60b6:	09db      	lsrs	r3, r3, #7
    60b8:	d100      	bne.n	60bc <_sercom_usart_interrupt_handler+0x60>
    60ba:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    60bc:	2380      	movs	r3, #128	; 0x80
    60be:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    60c0:	68c3      	ldr	r3, [r0, #12]
    60c2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    60c4:	8b63      	ldrh	r3, [r4, #26]
    60c6:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    60c8:	8363      	strh	r3, [r4, #26]
    60ca:	e7f6      	b.n	60ba <_sercom_usart_interrupt_handler+0x5e>

000060cc <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    60cc:	4b14      	ldr	r3, [pc, #80]	; (6120 <_sercom_init_irq_param+0x54>)
    60ce:	4298      	cmp	r0, r3
    60d0:	d014      	beq.n	60fc <_sercom_init_irq_param+0x30>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    60d2:	4b14      	ldr	r3, [pc, #80]	; (6124 <_sercom_init_irq_param+0x58>)
    60d4:	4298      	cmp	r0, r3
    60d6:	d014      	beq.n	6102 <_sercom_init_irq_param+0x36>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
    60d8:	4b13      	ldr	r3, [pc, #76]	; (6128 <_sercom_init_irq_param+0x5c>)
    60da:	4298      	cmp	r0, r3
    60dc:	d014      	beq.n	6108 <_sercom_init_irq_param+0x3c>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    60de:	4b13      	ldr	r3, [pc, #76]	; (612c <_sercom_init_irq_param+0x60>)
    60e0:	4298      	cmp	r0, r3
    60e2:	d014      	beq.n	610e <_sercom_init_irq_param+0x42>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    60e4:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    60e8:	d014      	beq.n	6114 <_sercom_init_irq_param+0x48>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    60ea:	4b11      	ldr	r3, [pc, #68]	; (6130 <_sercom_init_irq_param+0x64>)
    60ec:	4298      	cmp	r0, r3
    60ee:	d014      	beq.n	611a <_sercom_init_irq_param+0x4e>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    60f0:	4b10      	ldr	r3, [pc, #64]	; (6134 <_sercom_init_irq_param+0x68>)
    60f2:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    60f4:	bf04      	itt	eq
    60f6:	4b10      	ldreq	r3, [pc, #64]	; (6138 <_sercom_init_irq_param+0x6c>)
    60f8:	6199      	streq	r1, [r3, #24]
    60fa:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    60fc:	4b0e      	ldr	r3, [pc, #56]	; (6138 <_sercom_init_irq_param+0x6c>)
    60fe:	6019      	str	r1, [r3, #0]
    6100:	e7ed      	b.n	60de <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    6102:	4b0d      	ldr	r3, [pc, #52]	; (6138 <_sercom_init_irq_param+0x6c>)
    6104:	6059      	str	r1, [r3, #4]
    6106:	e7ed      	b.n	60e4 <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    6108:	4b0b      	ldr	r3, [pc, #44]	; (6138 <_sercom_init_irq_param+0x6c>)
    610a:	6099      	str	r1, [r3, #8]
    610c:	e7ed      	b.n	60ea <_sercom_init_irq_param+0x1e>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    610e:	4b0a      	ldr	r3, [pc, #40]	; (6138 <_sercom_init_irq_param+0x6c>)
    6110:	60d9      	str	r1, [r3, #12]
    6112:	e7ed      	b.n	60f0 <_sercom_init_irq_param+0x24>
		_sercom4_dev = (struct _usart_async_device *)dev;
    6114:	4b08      	ldr	r3, [pc, #32]	; (6138 <_sercom_init_irq_param+0x6c>)
    6116:	6119      	str	r1, [r3, #16]
    6118:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    611a:	4b07      	ldr	r3, [pc, #28]	; (6138 <_sercom_init_irq_param+0x6c>)
    611c:	6159      	str	r1, [r3, #20]
    611e:	4770      	bx	lr
    6120:	40003000 	.word	0x40003000
    6124:	40003400 	.word	0x40003400
    6128:	41012000 	.word	0x41012000
    612c:	41014000 	.word	0x41014000
    6130:	43000400 	.word	0x43000400
    6134:	43000800 	.word	0x43000800
    6138:	20000990 	.word	0x20000990

0000613c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    613c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    613e:	4b03      	ldr	r3, [pc, #12]	; (614c <_sercom_get_irq_num+0x10>)
    6140:	4798      	blx	r3
    6142:	0080      	lsls	r0, r0, #2
    6144:	302e      	adds	r0, #46	; 0x2e
}
    6146:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    614a:	bd08      	pop	{r3, pc}
    614c:	00006019 	.word	0x00006019

00006150 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6150:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6152:	f013 0f01 	tst.w	r3, #1
    6156:	d109      	bne.n	616c <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6158:	6803      	ldr	r3, [r0, #0]
    615a:	f043 0302 	orr.w	r3, r3, #2
    615e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6160:	69c3      	ldr	r3, [r0, #28]
    6162:	f013 0f03 	tst.w	r3, #3
    6166:	d1fb      	bne.n	6160 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    6168:	2000      	movs	r0, #0
    616a:	4770      	bx	lr
		return ERR_BUSY;
    616c:	f06f 0003 	mvn.w	r0, #3
}
    6170:	4770      	bx	lr
	...

00006174 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    6174:	b538      	push	{r3, r4, r5, lr}
    6176:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    6178:	4b0b      	ldr	r3, [pc, #44]	; (61a8 <_spi_async_enable+0x34>)
    617a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    617c:	4620      	mov	r0, r4
    617e:	4b0b      	ldr	r3, [pc, #44]	; (61ac <_spi_async_enable+0x38>)
    6180:	4798      	blx	r3
    6182:	1d01      	adds	r1, r0, #4
    6184:	b2c9      	uxtb	r1, r1
    6186:	2501      	movs	r5, #1
    6188:	4c09      	ldr	r4, [pc, #36]	; (61b0 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    618a:	1c43      	adds	r3, r0, #1
    618c:	b2db      	uxtb	r3, r3
    618e:	0942      	lsrs	r2, r0, #5
    6190:	f000 001f 	and.w	r0, r0, #31
    6194:	fa05 f000 	lsl.w	r0, r5, r0
    6198:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    619c:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    619e:	4299      	cmp	r1, r3
    61a0:	d1f3      	bne.n	618a <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    61a2:	2000      	movs	r0, #0
    61a4:	bd38      	pop	{r3, r4, r5, pc}
    61a6:	bf00      	nop
    61a8:	00006151 	.word	0x00006151
    61ac:	0000613d 	.word	0x0000613d
    61b0:	e000e100 	.word	0xe000e100

000061b4 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    61b4:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    61b6:	f013 0f03 	tst.w	r3, #3
    61ba:	d111      	bne.n	61e0 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    61bc:	69c3      	ldr	r3, [r0, #28]
    61be:	f013 0f03 	tst.w	r3, #3
    61c2:	d1fb      	bne.n	61bc <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    61c4:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    61c6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    61ca:	0709      	lsls	r1, r1, #28
    61cc:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    61d0:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    61d2:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    61d4:	69c3      	ldr	r3, [r0, #28]
    61d6:	f013 0f03 	tst.w	r3, #3
    61da:	d1fb      	bne.n	61d4 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    61dc:	2000      	movs	r0, #0
    61de:	4770      	bx	lr
		return ERR_BUSY;
    61e0:	f06f 0003 	mvn.w	r0, #3
}
    61e4:	4770      	bx	lr

000061e6 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    61e6:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    61e8:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    61ea:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    61ec:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    61ee:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    61f0:	f013 0f01 	tst.w	r3, #1
    61f4:	d109      	bne.n	620a <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    61f6:	f013 0f04 	tst.w	r3, #4
    61fa:	d109      	bne.n	6210 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    61fc:	f013 0f02 	tst.w	r3, #2
    6200:	d109      	bne.n	6216 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6202:	f013 0f80 	tst.w	r3, #128	; 0x80
    6206:	d10b      	bne.n	6220 <_spi_handler+0x3a>
    6208:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    620a:	6883      	ldr	r3, [r0, #8]
    620c:	4798      	blx	r3
    620e:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    6210:	68c3      	ldr	r3, [r0, #12]
    6212:	4798      	blx	r3
    6214:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6216:	2302      	movs	r3, #2
    6218:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    621a:	6903      	ldr	r3, [r0, #16]
    621c:	4798      	blx	r3
    621e:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6220:	2304      	movs	r3, #4
    6222:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6224:	2380      	movs	r3, #128	; 0x80
    6226:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6228:	6943      	ldr	r3, [r0, #20]
    622a:	f06f 0112 	mvn.w	r1, #18
    622e:	4798      	blx	r3
	}
}
    6230:	e7ea      	b.n	6208 <_spi_handler+0x22>
	...

00006234 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    6234:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6236:	4b03      	ldr	r3, [pc, #12]	; (6244 <_spi_get_tx_dma_channel+0x10>)
    6238:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    623a:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    623c:	bf0c      	ite	eq
    623e:	2008      	moveq	r0, #8
    6240:	2000      	movne	r0, #0
    6242:	bd08      	pop	{r3, pc}
    6244:	00006019 	.word	0x00006019

00006248 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    6248:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    624a:	4b03      	ldr	r3, [pc, #12]	; (6258 <_spi_get_rx_dma_channel+0x10>)
    624c:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    624e:	2807      	cmp	r0, #7
    6250:	bf8c      	ite	hi
    6252:	2000      	movhi	r0, #0
    6254:	2001      	movls	r0, #1
    6256:	bd08      	pop	{r3, pc}
    6258:	00006019 	.word	0x00006019

0000625c <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    625c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    625e:	6883      	ldr	r3, [r0, #8]
    6260:	689b      	ldr	r3, [r3, #8]
    6262:	b103      	cbz	r3, 6266 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    6264:	4798      	blx	r3
    6266:	bd08      	pop	{r3, pc}

00006268 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    6268:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    626a:	6883      	ldr	r3, [r0, #8]
    626c:	685b      	ldr	r3, [r3, #4]
    626e:	b103      	cbz	r3, 6272 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    6270:	4798      	blx	r3
    6272:	bd08      	pop	{r3, pc}

00006274 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    6274:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    6276:	6883      	ldr	r3, [r0, #8]
    6278:	68db      	ldr	r3, [r3, #12]
    627a:	b103      	cbz	r3, 627e <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    627c:	4798      	blx	r3
    627e:	bd08      	pop	{r3, pc}

00006280 <_usart_init>:
{
    6280:	b510      	push	{r4, lr}
    6282:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6284:	4b48      	ldr	r3, [pc, #288]	; (63a8 <_usart_init+0x128>)
    6286:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    6288:	2800      	cmp	r0, #0
    628a:	d06a      	beq.n	6362 <_usart_init+0xe2>
    628c:	2801      	cmp	r0, #1
    628e:	d062      	beq.n	6356 <_usart_init+0xd6>
    6290:	2802      	cmp	r0, #2
    6292:	d062      	beq.n	635a <_usart_init+0xda>
    6294:	2804      	cmp	r0, #4
    6296:	d062      	beq.n	635e <_usart_init+0xde>
    6298:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    629a:	bf08      	it	eq
    629c:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    629e:	d006      	beq.n	62ae <_usart_init+0x2e>
	ASSERT(false);
    62a0:	f44f 721e 	mov.w	r2, #632	; 0x278
    62a4:	4941      	ldr	r1, [pc, #260]	; (63ac <_usart_init+0x12c>)
    62a6:	2000      	movs	r0, #0
    62a8:	4b41      	ldr	r3, [pc, #260]	; (63b0 <_usart_init+0x130>)
    62aa:	4798      	blx	r3
	return 0;
    62ac:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    62ae:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    62b0:	f013 0f01 	tst.w	r3, #1
    62b4:	d122      	bne.n	62fc <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    62b6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    62ba:	4a3e      	ldr	r2, [pc, #248]	; (63b4 <_usart_init+0x134>)
    62bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    62c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    62c2:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    62c6:	69e3      	ldr	r3, [r4, #28]
    62c8:	f013 0f03 	tst.w	r3, #3
    62cc:	d1fb      	bne.n	62c6 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    62ce:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    62d0:	f013 0f02 	tst.w	r3, #2
    62d4:	d00b      	beq.n	62ee <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    62d6:	6823      	ldr	r3, [r4, #0]
    62d8:	f023 0302 	bic.w	r3, r3, #2
    62dc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    62de:	69e3      	ldr	r3, [r4, #28]
    62e0:	f013 0f03 	tst.w	r3, #3
    62e4:	d1fb      	bne.n	62de <_usart_init+0x5e>
    62e6:	69e3      	ldr	r3, [r4, #28]
    62e8:	f013 0f02 	tst.w	r3, #2
    62ec:	d1fb      	bne.n	62e6 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    62ee:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    62f2:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    62f4:	69e3      	ldr	r3, [r4, #28]
    62f6:	f013 0f03 	tst.w	r3, #3
    62fa:	d1fb      	bne.n	62f4 <_usart_init+0x74>
    62fc:	69e3      	ldr	r3, [r4, #28]
    62fe:	f013 0f01 	tst.w	r3, #1
    6302:	d1fb      	bne.n	62fc <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    6304:	460a      	mov	r2, r1
    6306:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    630a:	4b2a      	ldr	r3, [pc, #168]	; (63b4 <_usart_init+0x134>)
    630c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6310:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6312:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6314:	69e3      	ldr	r3, [r4, #28]
    6316:	f013 0f03 	tst.w	r3, #3
    631a:	d1fb      	bne.n	6314 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    631c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6320:	4924      	ldr	r1, [pc, #144]	; (63b4 <_usart_init+0x134>)
    6322:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    6328:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    632a:	69e3      	ldr	r3, [r4, #28]
    632c:	f013 0f1f 	tst.w	r3, #31
    6330:	d1fb      	bne.n	632a <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    6332:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6336:	491f      	ldr	r1, [pc, #124]	; (63b4 <_usart_init+0x134>)
    6338:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    633e:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    6340:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    6344:	d10f      	bne.n	6366 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    6346:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    634a:	491a      	ldr	r1, [pc, #104]	; (63b4 <_usart_init+0x134>)
    634c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6350:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    6352:	81a3      	strh	r3, [r4, #12]
    6354:	e016      	b.n	6384 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6356:	2101      	movs	r1, #1
    6358:	e7a9      	b.n	62ae <_usart_init+0x2e>
    635a:	2102      	movs	r1, #2
    635c:	e7a7      	b.n	62ae <_usart_init+0x2e>
    635e:	2103      	movs	r1, #3
    6360:	e7a5      	b.n	62ae <_usart_init+0x2e>
    6362:	2100      	movs	r1, #0
    6364:	e7a3      	b.n	62ae <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    6366:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    636a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    636e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    6370:	89a1      	ldrh	r1, [r4, #12]
    6372:	f360 010c 	bfi	r1, r0, #0, #13
    6376:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    6378:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    637c:	89a3      	ldrh	r3, [r4, #12]
    637e:	f361 334f 	bfi	r3, r1, #13, #3
    6382:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    6384:	4b0b      	ldr	r3, [pc, #44]	; (63b4 <_usart_init+0x134>)
    6386:	0051      	lsls	r1, r2, #1
    6388:	1888      	adds	r0, r1, r2
    638a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    638e:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    6392:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    6394:	440a      	add	r2, r1
    6396:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    639a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    639e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    63a2:	2000      	movs	r0, #0
    63a4:	bd10      	pop	{r4, pc}
    63a6:	bf00      	nop
    63a8:	00006019 	.word	0x00006019
    63ac:	0000c224 	.word	0x0000c224
    63b0:	00005259 	.word	0x00005259
    63b4:	0000c150 	.word	0x0000c150

000063b8 <_get_i2cm_index>:
{
    63b8:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    63ba:	4b07      	ldr	r3, [pc, #28]	; (63d8 <_get_i2cm_index+0x20>)
    63bc:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    63be:	2805      	cmp	r0, #5
    63c0:	d008      	beq.n	63d4 <_get_i2cm_index+0x1c>
	ASSERT(false);
    63c2:	f240 32f3 	movw	r2, #1011	; 0x3f3
    63c6:	4905      	ldr	r1, [pc, #20]	; (63dc <_get_i2cm_index+0x24>)
    63c8:	2000      	movs	r0, #0
    63ca:	4b05      	ldr	r3, [pc, #20]	; (63e0 <_get_i2cm_index+0x28>)
    63cc:	4798      	blx	r3
	return -1;
    63ce:	f04f 30ff 	mov.w	r0, #4294967295
}
    63d2:	bd08      	pop	{r3, pc}
			return i;
    63d4:	2000      	movs	r0, #0
    63d6:	bd08      	pop	{r3, pc}
    63d8:	00006019 	.word	0x00006019
    63dc:	0000c224 	.word	0x0000c224
    63e0:	00005259 	.word	0x00005259

000063e4 <_i2c_m_sync_init_impl>:
{
    63e4:	b538      	push	{r3, r4, r5, lr}
    63e6:	4605      	mov	r5, r0
    63e8:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    63ea:	4608      	mov	r0, r1
    63ec:	4b34      	ldr	r3, [pc, #208]	; (64c0 <_i2c_m_sync_init_impl+0xdc>)
    63ee:	4798      	blx	r3
    63f0:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    63f2:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    63f4:	f013 0f01 	tst.w	r3, #1
    63f8:	d123      	bne.n	6442 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    63fa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    63fe:	4a31      	ldr	r2, [pc, #196]	; (64c4 <_i2c_m_sync_init_impl+0xe0>)
    6400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6404:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6408:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    640c:	69e3      	ldr	r3, [r4, #28]
    640e:	f013 0f03 	tst.w	r3, #3
    6412:	d1fb      	bne.n	640c <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6414:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6416:	f013 0f02 	tst.w	r3, #2
    641a:	d00b      	beq.n	6434 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    641c:	6823      	ldr	r3, [r4, #0]
    641e:	f023 0302 	bic.w	r3, r3, #2
    6422:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6424:	69e3      	ldr	r3, [r4, #28]
    6426:	f013 0f03 	tst.w	r3, #3
    642a:	d1fb      	bne.n	6424 <_i2c_m_sync_init_impl+0x40>
    642c:	69e3      	ldr	r3, [r4, #28]
    642e:	f013 0f02 	tst.w	r3, #2
    6432:	d1fb      	bne.n	642c <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6434:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6438:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    643a:	69e3      	ldr	r3, [r4, #28]
    643c:	f013 0f03 	tst.w	r3, #3
    6440:	d1fb      	bne.n	643a <_i2c_m_sync_init_impl+0x56>
    6442:	69e3      	ldr	r3, [r4, #28]
    6444:	f013 0f01 	tst.w	r3, #1
    6448:	d1fb      	bne.n	6442 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    644a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    644e:	4a1d      	ldr	r2, [pc, #116]	; (64c4 <_i2c_m_sync_init_impl+0xe0>)
    6450:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6454:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6458:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    645a:	69e3      	ldr	r3, [r4, #28]
    645c:	f013 0f03 	tst.w	r3, #3
    6460:	d1fb      	bne.n	645a <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6462:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6466:	4917      	ldr	r1, [pc, #92]	; (64c4 <_i2c_m_sync_init_impl+0xe0>)
    6468:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    646c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6470:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6472:	69e3      	ldr	r3, [r4, #28]
    6474:	f013 0f04 	tst.w	r3, #4
    6478:	d1fb      	bne.n	6472 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    647a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    647e:	4911      	ldr	r1, [pc, #68]	; (64c4 <_i2c_m_sync_init_impl+0xe0>)
    6480:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6488:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    648a:	f3c2 6301 	ubfx	r3, r2, #24, #2
    648e:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6490:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6492:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6496:	2b01      	cmp	r3, #1
    6498:	bf94      	ite	ls
    649a:	2300      	movls	r3, #0
    649c:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    649e:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    64a2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    64a4:	69e3      	ldr	r3, [r4, #28]
    64a6:	f013 0f04 	tst.w	r3, #4
    64aa:	d1fb      	bne.n	64a4 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    64ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    64b0:	4b04      	ldr	r3, [pc, #16]	; (64c4 <_i2c_m_sync_init_impl+0xe0>)
    64b2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    64b6:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    64ba:	81eb      	strh	r3, [r5, #14]
}
    64bc:	2000      	movs	r0, #0
    64be:	bd38      	pop	{r3, r4, r5, pc}
    64c0:	000063b9 	.word	0x000063b9
    64c4:	0000c150 	.word	0x0000c150

000064c8 <_sercom_i2c_m_irq_handler>:
{
    64c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64cc:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    64ce:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    64d0:	7e26      	ldrb	r6, [r4, #24]
    64d2:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    64d4:	f8df 8234 	ldr.w	r8, [pc, #564]	; 670c <_sercom_i2c_m_irq_handler+0x244>
    64d8:	f240 4265 	movw	r2, #1125	; 0x465
    64dc:	4641      	mov	r1, r8
    64de:	3000      	adds	r0, #0
    64e0:	bf18      	it	ne
    64e2:	2001      	movne	r0, #1
    64e4:	4f88      	ldr	r7, [pc, #544]	; (6708 <_sercom_i2c_m_irq_handler+0x240>)
    64e6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    64e8:	6928      	ldr	r0, [r5, #16]
    64ea:	f240 4266 	movw	r2, #1126	; 0x466
    64ee:	4641      	mov	r1, r8
    64f0:	3000      	adds	r0, #0
    64f2:	bf18      	it	ne
    64f4:	2001      	movne	r0, #1
    64f6:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    64f8:	f016 0f80 	tst.w	r6, #128	; 0x80
    64fc:	f040 80f4 	bne.w	66e8 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6500:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6502:	69e3      	ldr	r3, [r4, #28]
    6504:	f013 0f04 	tst.w	r3, #4
    6508:	d1fb      	bne.n	6502 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    650a:	8b63      	ldrh	r3, [r4, #26]
    650c:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    650e:	f016 0f01 	tst.w	r6, #1
    6512:	f000 8090 	beq.w	6636 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6516:	f013 0f02 	tst.w	r3, #2
    651a:	d022      	beq.n	6562 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    651c:	2201      	movs	r2, #1
    651e:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    6520:	886a      	ldrh	r2, [r5, #2]
    6522:	b292      	uxth	r2, r2
    6524:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6528:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    652a:	886a      	ldrh	r2, [r5, #2]
    652c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6530:	0412      	lsls	r2, r2, #16
    6532:	0c12      	lsrs	r2, r2, #16
    6534:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6536:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    653a:	2b00      	cmp	r3, #0
    653c:	bf14      	ite	ne
    653e:	f06f 0104 	mvnne.w	r1, #4
    6542:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6546:	886b      	ldrh	r3, [r5, #2]
    6548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    654c:	041b      	lsls	r3, r3, #16
    654e:	0c1b      	lsrs	r3, r3, #16
    6550:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6552:	696b      	ldr	r3, [r5, #20]
    6554:	2b00      	cmp	r3, #0
    6556:	f000 80c5 	beq.w	66e4 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    655a:	4628      	mov	r0, r5
    655c:	4798      	blx	r3
    655e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6562:	f013 0f04 	tst.w	r3, #4
    6566:	d124      	bne.n	65b2 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    6568:	886b      	ldrh	r3, [r5, #2]
    656a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    656e:	d03e      	beq.n	65ee <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6570:	882b      	ldrh	r3, [r5, #0]
    6572:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6574:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6578:	69e3      	ldr	r3, [r4, #28]
    657a:	f013 0f04 	tst.w	r3, #4
    657e:	d1fb      	bne.n	6578 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6580:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    6586:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    658a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    658c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    658e:	69e3      	ldr	r3, [r4, #28]
    6590:	f013 0f04 	tst.w	r3, #4
    6594:	d1fb      	bne.n	658e <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    6596:	886b      	ldrh	r3, [r5, #2]
    6598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    659c:	041b      	lsls	r3, r3, #16
    659e:	0c1b      	lsrs	r3, r3, #16
    65a0:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    65a2:	69ab      	ldr	r3, [r5, #24]
    65a4:	2b00      	cmp	r3, #0
    65a6:	f000 8088 	beq.w	66ba <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    65aa:	4628      	mov	r0, r5
    65ac:	4798      	blx	r3
    65ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    65b2:	686b      	ldr	r3, [r5, #4]
    65b4:	2b00      	cmp	r3, #0
    65b6:	dd04      	ble.n	65c2 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    65b8:	886b      	ldrh	r3, [r5, #2]
    65ba:	b29b      	uxth	r3, r3
    65bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    65c0:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    65c2:	886b      	ldrh	r3, [r5, #2]
    65c4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    65c8:	d108      	bne.n	65dc <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    65ca:	886b      	ldrh	r3, [r5, #2]
    65cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65d0:	041b      	lsls	r3, r3, #16
    65d2:	0c1b      	lsrs	r3, r3, #16
    65d4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    65d6:	f06f 0101 	mvn.w	r1, #1
    65da:	e7b4      	b.n	6546 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    65dc:	6863      	ldr	r3, [r4, #4]
    65de:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    65e2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    65e4:	69e3      	ldr	r3, [r4, #28]
    65e6:	f013 0f04 	tst.w	r3, #4
    65ea:	d1fb      	bne.n	65e4 <_sercom_i2c_m_irq_handler+0x11c>
    65ec:	e7ed      	b.n	65ca <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    65ee:	686b      	ldr	r3, [r5, #4]
    65f0:	b99b      	cbnz	r3, 661a <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    65f2:	886b      	ldrh	r3, [r5, #2]
    65f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    65f8:	d106      	bne.n	6608 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    65fa:	886b      	ldrh	r3, [r5, #2]
    65fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6600:	041b      	lsls	r3, r3, #16
    6602:	0c1b      	lsrs	r3, r3, #16
    6604:	806b      	strh	r3, [r5, #2]
    6606:	e7cc      	b.n	65a2 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6608:	6863      	ldr	r3, [r4, #4]
    660a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    660e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6610:	69e3      	ldr	r3, [r4, #28]
    6612:	f013 0f04 	tst.w	r3, #4
    6616:	d1fb      	bne.n	6610 <_sercom_i2c_m_irq_handler+0x148>
    6618:	e7ef      	b.n	65fa <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    661a:	68ab      	ldr	r3, [r5, #8]
    661c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    661e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6620:	69e3      	ldr	r3, [r4, #28]
    6622:	f013 0f04 	tst.w	r3, #4
    6626:	d1fb      	bne.n	6620 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    6628:	68ab      	ldr	r3, [r5, #8]
    662a:	3301      	adds	r3, #1
    662c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    662e:	686b      	ldr	r3, [r5, #4]
    6630:	3b01      	subs	r3, #1
    6632:	606b      	str	r3, [r5, #4]
    6634:	e7b5      	b.n	65a2 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    6636:	f016 0f02 	tst.w	r6, #2
    663a:	d041      	beq.n	66c0 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    663c:	686a      	ldr	r2, [r5, #4]
    663e:	2a00      	cmp	r2, #0
    6640:	d036      	beq.n	66b0 <_sercom_i2c_m_irq_handler+0x1e8>
    6642:	f013 0f04 	tst.w	r3, #4
    6646:	d133      	bne.n	66b0 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6648:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    664c:	3a01      	subs	r2, #1
    664e:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6650:	2a00      	cmp	r2, #0
    6652:	d137      	bne.n	66c4 <_sercom_i2c_m_irq_handler+0x1fc>
    6654:	2900      	cmp	r1, #0
    6656:	d039      	beq.n	66cc <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    6658:	886b      	ldrh	r3, [r5, #2]
    665a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    665e:	d116      	bne.n	668e <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    6660:	886b      	ldrh	r3, [r5, #2]
    6662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6666:	041b      	lsls	r3, r3, #16
    6668:	0c1b      	lsrs	r3, r3, #16
    666a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    666c:	68aa      	ldr	r2, [r5, #8]
    666e:	1c53      	adds	r3, r2, #1
    6670:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6672:	69e3      	ldr	r3, [r4, #28]
    6674:	f013 0f04 	tst.w	r3, #4
    6678:	d1fb      	bne.n	6672 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    667a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    667c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    667e:	2302      	movs	r3, #2
    6680:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6682:	69eb      	ldr	r3, [r5, #28]
    6684:	b1e3      	cbz	r3, 66c0 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6686:	4628      	mov	r0, r5
    6688:	4798      	blx	r3
    668a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    668e:	6863      	ldr	r3, [r4, #4]
    6690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6694:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6696:	69e3      	ldr	r3, [r4, #28]
    6698:	f013 0f04 	tst.w	r3, #4
    669c:	d1fb      	bne.n	6696 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    669e:	6863      	ldr	r3, [r4, #4]
    66a0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    66a4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    66a6:	69e3      	ldr	r3, [r4, #28]
    66a8:	f013 0f04 	tst.w	r3, #4
    66ac:	d1fb      	bne.n	66a6 <_sercom_i2c_m_irq_handler+0x1de>
    66ae:	e7d7      	b.n	6660 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    66b0:	2302      	movs	r3, #2
    66b2:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    66b4:	f06f 0101 	mvn.w	r1, #1
    66b8:	e745      	b.n	6546 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    66ba:	f016 0f02 	tst.w	r6, #2
    66be:	d1e0      	bne.n	6682 <_sercom_i2c_m_irq_handler+0x1ba>
    66c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    66c4:	2a01      	cmp	r2, #1
    66c6:	d1d1      	bne.n	666c <_sercom_i2c_m_irq_handler+0x1a4>
    66c8:	2900      	cmp	r1, #0
    66ca:	d0cf      	beq.n	666c <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    66cc:	6863      	ldr	r3, [r4, #4]
    66ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    66d2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    66d4:	69e3      	ldr	r3, [r4, #28]
    66d6:	f013 0f04 	tst.w	r3, #4
    66da:	d1fb      	bne.n	66d4 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    66dc:	686b      	ldr	r3, [r5, #4]
    66de:	2b00      	cmp	r3, #0
    66e0:	d0ba      	beq.n	6658 <_sercom_i2c_m_irq_handler+0x190>
    66e2:	e7c3      	b.n	666c <_sercom_i2c_m_irq_handler+0x1a4>
    66e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    66e8:	886b      	ldrh	r3, [r5, #2]
    66ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    66ee:	041b      	lsls	r3, r3, #16
    66f0:	0c1b      	lsrs	r3, r3, #16
    66f2:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    66f4:	696b      	ldr	r3, [r5, #20]
    66f6:	2b00      	cmp	r3, #0
    66f8:	d0e2      	beq.n	66c0 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    66fa:	f06f 0104 	mvn.w	r1, #4
    66fe:	4628      	mov	r0, r5
    6700:	4798      	blx	r3
    6702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6706:	bf00      	nop
    6708:	00005259 	.word	0x00005259
    670c:	0000c224 	.word	0x0000c224

00006710 <_usart_async_init>:
{
    6710:	b570      	push	{r4, r5, r6, lr}
    6712:	460d      	mov	r5, r1
	ASSERT(device);
    6714:	4606      	mov	r6, r0
    6716:	22d8      	movs	r2, #216	; 0xd8
    6718:	4917      	ldr	r1, [pc, #92]	; (6778 <_usart_async_init+0x68>)
    671a:	3000      	adds	r0, #0
    671c:	bf18      	it	ne
    671e:	2001      	movne	r0, #1
    6720:	4b16      	ldr	r3, [pc, #88]	; (677c <_usart_async_init+0x6c>)
    6722:	4798      	blx	r3
	init_status = _usart_init(hw);
    6724:	4628      	mov	r0, r5
    6726:	4b16      	ldr	r3, [pc, #88]	; (6780 <_usart_async_init+0x70>)
    6728:	4798      	blx	r3
	if (init_status) {
    672a:	4604      	mov	r4, r0
    672c:	b108      	cbz	r0, 6732 <_usart_async_init+0x22>
}
    672e:	4620      	mov	r0, r4
    6730:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    6732:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    6734:	4631      	mov	r1, r6
    6736:	4628      	mov	r0, r5
    6738:	4b12      	ldr	r3, [pc, #72]	; (6784 <_usart_async_init+0x74>)
    673a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    673c:	4628      	mov	r0, r5
    673e:	4b12      	ldr	r3, [pc, #72]	; (6788 <_usart_async_init+0x78>)
    6740:	4798      	blx	r3
    6742:	1d01      	adds	r1, r0, #4
    6744:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6746:	2501      	movs	r5, #1
    6748:	f000 021f 	and.w	r2, r0, #31
    674c:	fa05 f202 	lsl.w	r2, r5, r2
    6750:	0943      	lsrs	r3, r0, #5
    6752:	009b      	lsls	r3, r3, #2
    6754:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6758:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    675c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6760:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6764:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6768:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    676c:	601a      	str	r2, [r3, #0]
		irq++;
    676e:	3001      	adds	r0, #1
    6770:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6772:	4281      	cmp	r1, r0
    6774:	d1e8      	bne.n	6748 <_usart_async_init+0x38>
    6776:	e7da      	b.n	672e <_usart_async_init+0x1e>
    6778:	0000c224 	.word	0x0000c224
    677c:	00005259 	.word	0x00005259
    6780:	00006281 	.word	0x00006281
    6784:	000060cd 	.word	0x000060cd
    6788:	0000613d 	.word	0x0000613d

0000678c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    678c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    678e:	6813      	ldr	r3, [r2, #0]
    6790:	f043 0302 	orr.w	r3, r3, #2
    6794:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6796:	69d3      	ldr	r3, [r2, #28]
    6798:	f013 0f03 	tst.w	r3, #3
    679c:	d1fb      	bne.n	6796 <_usart_async_enable+0xa>
}
    679e:	4770      	bx	lr

000067a0 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    67a0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    67a2:	6299      	str	r1, [r3, #40]	; 0x28
    67a4:	4770      	bx	lr

000067a6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    67a6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    67a8:	2201      	movs	r2, #1
    67aa:	759a      	strb	r2, [r3, #22]
    67ac:	4770      	bx	lr

000067ae <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    67ae:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    67b0:	2202      	movs	r2, #2
    67b2:	759a      	strb	r2, [r3, #22]
    67b4:	4770      	bx	lr
	...

000067b8 <_usart_async_set_irq_state>:
{
    67b8:	b570      	push	{r4, r5, r6, lr}
    67ba:	460c      	mov	r4, r1
    67bc:	4616      	mov	r6, r2
	ASSERT(device);
    67be:	4605      	mov	r5, r0
    67c0:	f44f 720e 	mov.w	r2, #568	; 0x238
    67c4:	4915      	ldr	r1, [pc, #84]	; (681c <_usart_async_set_irq_state+0x64>)
    67c6:	3000      	adds	r0, #0
    67c8:	bf18      	it	ne
    67ca:	2001      	movne	r0, #1
    67cc:	4b14      	ldr	r3, [pc, #80]	; (6820 <_usart_async_set_irq_state+0x68>)
    67ce:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    67d0:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    67d4:	d10d      	bne.n	67f2 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    67d6:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    67d8:	b92e      	cbnz	r6, 67e6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    67da:	2201      	movs	r2, #1
    67dc:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    67de:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    67e0:	2202      	movs	r2, #2
    67e2:	751a      	strb	r2, [r3, #20]
    67e4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    67e6:	2201      	movs	r2, #1
    67e8:	759a      	strb	r2, [r3, #22]
    67ea:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    67ec:	2202      	movs	r2, #2
    67ee:	759a      	strb	r2, [r3, #22]
    67f0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    67f2:	2c01      	cmp	r4, #1
    67f4:	d002      	beq.n	67fc <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    67f6:	2c03      	cmp	r4, #3
    67f8:	d008      	beq.n	680c <_usart_async_set_irq_state+0x54>
    67fa:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    67fc:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    67fe:	b916      	cbnz	r6, 6806 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    6800:	2204      	movs	r2, #4
    6802:	751a      	strb	r2, [r3, #20]
    6804:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    6806:	2204      	movs	r2, #4
    6808:	759a      	strb	r2, [r3, #22]
    680a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    680c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    680e:	b116      	cbz	r6, 6816 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    6810:	2280      	movs	r2, #128	; 0x80
    6812:	759a      	strb	r2, [r3, #22]
}
    6814:	e7f1      	b.n	67fa <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    6816:	2280      	movs	r2, #128	; 0x80
    6818:	751a      	strb	r2, [r3, #20]
    681a:	bd70      	pop	{r4, r5, r6, pc}
    681c:	0000c224 	.word	0x0000c224
    6820:	00005259 	.word	0x00005259

00006824 <_i2c_m_async_init>:
{
    6824:	b570      	push	{r4, r5, r6, lr}
    6826:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    6828:	4606      	mov	r6, r0
    682a:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
    682e:	4918      	ldr	r1, [pc, #96]	; (6890 <_i2c_m_async_init+0x6c>)
    6830:	3000      	adds	r0, #0
    6832:	bf18      	it	ne
    6834:	2001      	movne	r0, #1
    6836:	4b17      	ldr	r3, [pc, #92]	; (6894 <_i2c_m_async_init+0x70>)
    6838:	4798      	blx	r3
	i2c_dev->hw = hw;
    683a:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    683c:	4629      	mov	r1, r5
    683e:	4630      	mov	r0, r6
    6840:	4b15      	ldr	r3, [pc, #84]	; (6898 <_i2c_m_async_init+0x74>)
    6842:	4798      	blx	r3
	if (init_status) {
    6844:	4604      	mov	r4, r0
    6846:	b108      	cbz	r0, 684c <_i2c_m_async_init+0x28>
}
    6848:	4620      	mov	r0, r4
    684a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    684c:	4631      	mov	r1, r6
    684e:	4628      	mov	r0, r5
    6850:	4b12      	ldr	r3, [pc, #72]	; (689c <_i2c_m_async_init+0x78>)
    6852:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6854:	4628      	mov	r0, r5
    6856:	4b12      	ldr	r3, [pc, #72]	; (68a0 <_i2c_m_async_init+0x7c>)
    6858:	4798      	blx	r3
    685a:	1d01      	adds	r1, r0, #4
    685c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    685e:	2501      	movs	r5, #1
    6860:	f000 021f 	and.w	r2, r0, #31
    6864:	fa05 f202 	lsl.w	r2, r5, r2
    6868:	0943      	lsrs	r3, r0, #5
    686a:	009b      	lsls	r3, r3, #2
    686c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6870:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6878:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    687c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6880:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6884:	601a      	str	r2, [r3, #0]
		irq++;
    6886:	3001      	adds	r0, #1
    6888:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    688a:	4281      	cmp	r1, r0
    688c:	d1e8      	bne.n	6860 <_i2c_m_async_init+0x3c>
    688e:	e7db      	b.n	6848 <_i2c_m_async_init+0x24>
    6890:	0000c224 	.word	0x0000c224
    6894:	00005259 	.word	0x00005259
    6898:	000063e5 	.word	0x000063e5
    689c:	000060cd 	.word	0x000060cd
    68a0:	0000613d 	.word	0x0000613d

000068a4 <_i2c_m_async_transfer>:
{
    68a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68a8:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    68aa:	4605      	mov	r5, r0
    68ac:	f110 0800 	adds.w	r8, r0, #0
    68b0:	bf18      	it	ne
    68b2:	f04f 0801 	movne.w	r8, #1
    68b6:	4f45      	ldr	r7, [pc, #276]	; (69cc <_i2c_m_async_transfer+0x128>)
    68b8:	f240 522e 	movw	r2, #1326	; 0x52e
    68bc:	4639      	mov	r1, r7
    68be:	4640      	mov	r0, r8
    68c0:	4e43      	ldr	r6, [pc, #268]	; (69d0 <_i2c_m_async_transfer+0x12c>)
    68c2:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    68c4:	6928      	ldr	r0, [r5, #16]
    68c6:	f240 522f 	movw	r2, #1327	; 0x52f
    68ca:	4639      	mov	r1, r7
    68cc:	3000      	adds	r0, #0
    68ce:	bf18      	it	ne
    68d0:	2001      	movne	r0, #1
    68d2:	47b0      	blx	r6
	ASSERT(msg);
    68d4:	f44f 62a6 	mov.w	r2, #1328	; 0x530
    68d8:	4639      	mov	r1, r7
    68da:	1c20      	adds	r0, r4, #0
    68dc:	bf18      	it	ne
    68de:	2001      	movne	r0, #1
    68e0:	47b0      	blx	r6
	if (msg->len == 0) {
    68e2:	6860      	ldr	r0, [r4, #4]
    68e4:	2800      	cmp	r0, #0
    68e6:	d06f      	beq.n	69c8 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    68e8:	886b      	ldrh	r3, [r5, #2]
    68ea:	f413 7f80 	tst.w	r3, #256	; 0x100
    68ee:	d169      	bne.n	69c4 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    68f0:	8863      	ldrh	r3, [r4, #2]
    68f2:	b29b      	uxth	r3, r3
    68f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    68f8:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    68fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    68fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6902:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6904:	6853      	ldr	r3, [r2, #4]
    6906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    690a:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    690c:	69d3      	ldr	r3, [r2, #28]
    690e:	f013 0f04 	tst.w	r3, #4
    6912:	d1fb      	bne.n	690c <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    6914:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6916:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    6918:	f240 5206 	movw	r2, #1286	; 0x506
    691c:	492b      	ldr	r1, [pc, #172]	; (69cc <_i2c_m_async_transfer+0x128>)
    691e:	4640      	mov	r0, r8
    6920:	4b2b      	ldr	r3, [pc, #172]	; (69d0 <_i2c_m_async_transfer+0x12c>)
    6922:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    6924:	686b      	ldr	r3, [r5, #4]
    6926:	2b01      	cmp	r3, #1
    6928:	d02a      	beq.n	6980 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    692a:	6863      	ldr	r3, [r4, #4]
    692c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    6930:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6932:	69e3      	ldr	r3, [r4, #28]
    6934:	f013 0f04 	tst.w	r3, #4
    6938:	d1fb      	bne.n	6932 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    693a:	882b      	ldrh	r3, [r5, #0]
    693c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6940:	d02a      	beq.n	6998 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    6942:	886a      	ldrh	r2, [r5, #2]
    6944:	f012 0f01 	tst.w	r2, #1
    6948:	d004      	beq.n	6954 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    694a:	886a      	ldrh	r2, [r5, #2]
    694c:	b292      	uxth	r2, r2
    694e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6952:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6954:	f240 72fe 	movw	r2, #2046	; 0x7fe
    6958:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    695c:	69e3      	ldr	r3, [r4, #28]
    695e:	f013 0f04 	tst.w	r3, #4
    6962:	d1fb      	bne.n	695c <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6964:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    696a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    696e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6970:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6972:	69e3      	ldr	r3, [r4, #28]
    6974:	f013 0f04 	tst.w	r3, #4
    6978:	d1fb      	bne.n	6972 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    697a:	2000      	movs	r0, #0
    697c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    6980:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    6984:	d0d1      	beq.n	692a <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6986:	6863      	ldr	r3, [r4, #4]
    6988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    698c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    698e:	69e3      	ldr	r3, [r4, #28]
    6990:	f013 0f04 	tst.w	r3, #4
    6994:	d1fb      	bne.n	698e <_i2c_m_async_transfer+0xea>
    6996:	e7d0      	b.n	693a <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6998:	8869      	ldrh	r1, [r5, #2]
    699a:	005a      	lsls	r2, r3, #1
    699c:	b2d2      	uxtb	r2, r2
    699e:	f001 0301 	and.w	r3, r1, #1
    69a2:	431a      	orrs	r2, r3
    69a4:	69e3      	ldr	r3, [r4, #28]
    69a6:	f013 0f04 	tst.w	r3, #4
    69aa:	d1fb      	bne.n	69a4 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    69ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    69ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    69b2:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    69b4:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    69b6:	69e3      	ldr	r3, [r4, #28]
    69b8:	f013 0f04 	tst.w	r3, #4
    69bc:	d1fb      	bne.n	69b6 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    69be:	2000      	movs	r0, #0
    69c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    69c4:	f06f 0003 	mvn.w	r0, #3
}
    69c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69cc:	0000c224 	.word	0x0000c224
    69d0:	00005259 	.word	0x00005259

000069d4 <_i2c_m_async_register_callback>:
	switch (type) {
    69d4:	2901      	cmp	r1, #1
    69d6:	d006      	beq.n	69e6 <_i2c_m_async_register_callback+0x12>
    69d8:	b119      	cbz	r1, 69e2 <_i2c_m_async_register_callback+0xe>
    69da:	2902      	cmp	r1, #2
    69dc:	d005      	beq.n	69ea <_i2c_m_async_register_callback+0x16>
}
    69de:	2000      	movs	r0, #0
    69e0:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    69e2:	6142      	str	r2, [r0, #20]
		break;
    69e4:	e7fb      	b.n	69de <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    69e6:	6182      	str	r2, [r0, #24]
		break;
    69e8:	e7f9      	b.n	69de <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    69ea:	61c2      	str	r2, [r0, #28]
		break;
    69ec:	e7f7      	b.n	69de <_i2c_m_async_register_callback+0xa>
	...

000069f0 <SERCOM0_0_Handler>:
{
    69f0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    69f2:	4b02      	ldr	r3, [pc, #8]	; (69fc <SERCOM0_0_Handler+0xc>)
    69f4:	6818      	ldr	r0, [r3, #0]
    69f6:	4b02      	ldr	r3, [pc, #8]	; (6a00 <SERCOM0_0_Handler+0x10>)
    69f8:	4798      	blx	r3
    69fa:	bd08      	pop	{r3, pc}
    69fc:	20000990 	.word	0x20000990
    6a00:	0000605d 	.word	0x0000605d

00006a04 <SERCOM0_1_Handler>:
{
    6a04:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6a06:	4b02      	ldr	r3, [pc, #8]	; (6a10 <SERCOM0_1_Handler+0xc>)
    6a08:	6818      	ldr	r0, [r3, #0]
    6a0a:	4b02      	ldr	r3, [pc, #8]	; (6a14 <SERCOM0_1_Handler+0x10>)
    6a0c:	4798      	blx	r3
    6a0e:	bd08      	pop	{r3, pc}
    6a10:	20000990 	.word	0x20000990
    6a14:	0000605d 	.word	0x0000605d

00006a18 <SERCOM0_2_Handler>:
{
    6a18:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6a1a:	4b02      	ldr	r3, [pc, #8]	; (6a24 <SERCOM0_2_Handler+0xc>)
    6a1c:	6818      	ldr	r0, [r3, #0]
    6a1e:	4b02      	ldr	r3, [pc, #8]	; (6a28 <SERCOM0_2_Handler+0x10>)
    6a20:	4798      	blx	r3
    6a22:	bd08      	pop	{r3, pc}
    6a24:	20000990 	.word	0x20000990
    6a28:	0000605d 	.word	0x0000605d

00006a2c <SERCOM0_3_Handler>:
{
    6a2c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6a2e:	4b02      	ldr	r3, [pc, #8]	; (6a38 <SERCOM0_3_Handler+0xc>)
    6a30:	6818      	ldr	r0, [r3, #0]
    6a32:	4b02      	ldr	r3, [pc, #8]	; (6a3c <SERCOM0_3_Handler+0x10>)
    6a34:	4798      	blx	r3
    6a36:	bd08      	pop	{r3, pc}
    6a38:	20000990 	.word	0x20000990
    6a3c:	0000605d 	.word	0x0000605d

00006a40 <SERCOM1_0_Handler>:
{
    6a40:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a42:	4b02      	ldr	r3, [pc, #8]	; (6a4c <SERCOM1_0_Handler+0xc>)
    6a44:	6858      	ldr	r0, [r3, #4]
    6a46:	4b02      	ldr	r3, [pc, #8]	; (6a50 <SERCOM1_0_Handler+0x10>)
    6a48:	4798      	blx	r3
    6a4a:	bd08      	pop	{r3, pc}
    6a4c:	20000990 	.word	0x20000990
    6a50:	0000605d 	.word	0x0000605d

00006a54 <SERCOM1_1_Handler>:
{
    6a54:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a56:	4b02      	ldr	r3, [pc, #8]	; (6a60 <SERCOM1_1_Handler+0xc>)
    6a58:	6858      	ldr	r0, [r3, #4]
    6a5a:	4b02      	ldr	r3, [pc, #8]	; (6a64 <SERCOM1_1_Handler+0x10>)
    6a5c:	4798      	blx	r3
    6a5e:	bd08      	pop	{r3, pc}
    6a60:	20000990 	.word	0x20000990
    6a64:	0000605d 	.word	0x0000605d

00006a68 <SERCOM1_2_Handler>:
{
    6a68:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a6a:	4b02      	ldr	r3, [pc, #8]	; (6a74 <SERCOM1_2_Handler+0xc>)
    6a6c:	6858      	ldr	r0, [r3, #4]
    6a6e:	4b02      	ldr	r3, [pc, #8]	; (6a78 <SERCOM1_2_Handler+0x10>)
    6a70:	4798      	blx	r3
    6a72:	bd08      	pop	{r3, pc}
    6a74:	20000990 	.word	0x20000990
    6a78:	0000605d 	.word	0x0000605d

00006a7c <SERCOM1_3_Handler>:
{
    6a7c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a7e:	4b02      	ldr	r3, [pc, #8]	; (6a88 <SERCOM1_3_Handler+0xc>)
    6a80:	6858      	ldr	r0, [r3, #4]
    6a82:	4b02      	ldr	r3, [pc, #8]	; (6a8c <SERCOM1_3_Handler+0x10>)
    6a84:	4798      	blx	r3
    6a86:	bd08      	pop	{r3, pc}
    6a88:	20000990 	.word	0x20000990
    6a8c:	0000605d 	.word	0x0000605d

00006a90 <SERCOM2_0_Handler>:
{
    6a90:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6a92:	4b02      	ldr	r3, [pc, #8]	; (6a9c <SERCOM2_0_Handler+0xc>)
    6a94:	6898      	ldr	r0, [r3, #8]
    6a96:	4b02      	ldr	r3, [pc, #8]	; (6aa0 <SERCOM2_0_Handler+0x10>)
    6a98:	4798      	blx	r3
    6a9a:	bd08      	pop	{r3, pc}
    6a9c:	20000990 	.word	0x20000990
    6aa0:	0000605d 	.word	0x0000605d

00006aa4 <SERCOM2_1_Handler>:
{
    6aa4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6aa6:	4b02      	ldr	r3, [pc, #8]	; (6ab0 <SERCOM2_1_Handler+0xc>)
    6aa8:	6898      	ldr	r0, [r3, #8]
    6aaa:	4b02      	ldr	r3, [pc, #8]	; (6ab4 <SERCOM2_1_Handler+0x10>)
    6aac:	4798      	blx	r3
    6aae:	bd08      	pop	{r3, pc}
    6ab0:	20000990 	.word	0x20000990
    6ab4:	0000605d 	.word	0x0000605d

00006ab8 <SERCOM2_2_Handler>:
{
    6ab8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6aba:	4b02      	ldr	r3, [pc, #8]	; (6ac4 <SERCOM2_2_Handler+0xc>)
    6abc:	6898      	ldr	r0, [r3, #8]
    6abe:	4b02      	ldr	r3, [pc, #8]	; (6ac8 <SERCOM2_2_Handler+0x10>)
    6ac0:	4798      	blx	r3
    6ac2:	bd08      	pop	{r3, pc}
    6ac4:	20000990 	.word	0x20000990
    6ac8:	0000605d 	.word	0x0000605d

00006acc <SERCOM2_3_Handler>:
{
    6acc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6ace:	4b02      	ldr	r3, [pc, #8]	; (6ad8 <SERCOM2_3_Handler+0xc>)
    6ad0:	6898      	ldr	r0, [r3, #8]
    6ad2:	4b02      	ldr	r3, [pc, #8]	; (6adc <SERCOM2_3_Handler+0x10>)
    6ad4:	4798      	blx	r3
    6ad6:	bd08      	pop	{r3, pc}
    6ad8:	20000990 	.word	0x20000990
    6adc:	0000605d 	.word	0x0000605d

00006ae0 <SERCOM3_0_Handler>:
{
    6ae0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6ae2:	4b02      	ldr	r3, [pc, #8]	; (6aec <SERCOM3_0_Handler+0xc>)
    6ae4:	68d8      	ldr	r0, [r3, #12]
    6ae6:	4b02      	ldr	r3, [pc, #8]	; (6af0 <SERCOM3_0_Handler+0x10>)
    6ae8:	4798      	blx	r3
    6aea:	bd08      	pop	{r3, pc}
    6aec:	20000990 	.word	0x20000990
    6af0:	000061e7 	.word	0x000061e7

00006af4 <SERCOM3_1_Handler>:
{
    6af4:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6af6:	4b02      	ldr	r3, [pc, #8]	; (6b00 <SERCOM3_1_Handler+0xc>)
    6af8:	68d8      	ldr	r0, [r3, #12]
    6afa:	4b02      	ldr	r3, [pc, #8]	; (6b04 <SERCOM3_1_Handler+0x10>)
    6afc:	4798      	blx	r3
    6afe:	bd08      	pop	{r3, pc}
    6b00:	20000990 	.word	0x20000990
    6b04:	000061e7 	.word	0x000061e7

00006b08 <SERCOM3_2_Handler>:
{
    6b08:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6b0a:	4b02      	ldr	r3, [pc, #8]	; (6b14 <SERCOM3_2_Handler+0xc>)
    6b0c:	68d8      	ldr	r0, [r3, #12]
    6b0e:	4b02      	ldr	r3, [pc, #8]	; (6b18 <SERCOM3_2_Handler+0x10>)
    6b10:	4798      	blx	r3
    6b12:	bd08      	pop	{r3, pc}
    6b14:	20000990 	.word	0x20000990
    6b18:	000061e7 	.word	0x000061e7

00006b1c <SERCOM3_3_Handler>:
{
    6b1c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6b1e:	4b02      	ldr	r3, [pc, #8]	; (6b28 <SERCOM3_3_Handler+0xc>)
    6b20:	68d8      	ldr	r0, [r3, #12]
    6b22:	4b02      	ldr	r3, [pc, #8]	; (6b2c <SERCOM3_3_Handler+0x10>)
    6b24:	4798      	blx	r3
    6b26:	bd08      	pop	{r3, pc}
    6b28:	20000990 	.word	0x20000990
    6b2c:	000061e7 	.word	0x000061e7

00006b30 <SERCOM4_0_Handler>:
{
    6b30:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b32:	4b02      	ldr	r3, [pc, #8]	; (6b3c <SERCOM4_0_Handler+0xc>)
    6b34:	6918      	ldr	r0, [r3, #16]
    6b36:	4b02      	ldr	r3, [pc, #8]	; (6b40 <SERCOM4_0_Handler+0x10>)
    6b38:	4798      	blx	r3
    6b3a:	bd08      	pop	{r3, pc}
    6b3c:	20000990 	.word	0x20000990
    6b40:	0000605d 	.word	0x0000605d

00006b44 <SERCOM4_1_Handler>:
{
    6b44:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b46:	4b02      	ldr	r3, [pc, #8]	; (6b50 <SERCOM4_1_Handler+0xc>)
    6b48:	6918      	ldr	r0, [r3, #16]
    6b4a:	4b02      	ldr	r3, [pc, #8]	; (6b54 <SERCOM4_1_Handler+0x10>)
    6b4c:	4798      	blx	r3
    6b4e:	bd08      	pop	{r3, pc}
    6b50:	20000990 	.word	0x20000990
    6b54:	0000605d 	.word	0x0000605d

00006b58 <SERCOM4_2_Handler>:
{
    6b58:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b5a:	4b02      	ldr	r3, [pc, #8]	; (6b64 <SERCOM4_2_Handler+0xc>)
    6b5c:	6918      	ldr	r0, [r3, #16]
    6b5e:	4b02      	ldr	r3, [pc, #8]	; (6b68 <SERCOM4_2_Handler+0x10>)
    6b60:	4798      	blx	r3
    6b62:	bd08      	pop	{r3, pc}
    6b64:	20000990 	.word	0x20000990
    6b68:	0000605d 	.word	0x0000605d

00006b6c <SERCOM4_3_Handler>:
{
    6b6c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b6e:	4b02      	ldr	r3, [pc, #8]	; (6b78 <SERCOM4_3_Handler+0xc>)
    6b70:	6918      	ldr	r0, [r3, #16]
    6b72:	4b02      	ldr	r3, [pc, #8]	; (6b7c <SERCOM4_3_Handler+0x10>)
    6b74:	4798      	blx	r3
    6b76:	bd08      	pop	{r3, pc}
    6b78:	20000990 	.word	0x20000990
    6b7c:	0000605d 	.word	0x0000605d

00006b80 <SERCOM5_0_Handler>:
{
    6b80:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6b82:	4b02      	ldr	r3, [pc, #8]	; (6b8c <SERCOM5_0_Handler+0xc>)
    6b84:	6958      	ldr	r0, [r3, #20]
    6b86:	4b02      	ldr	r3, [pc, #8]	; (6b90 <SERCOM5_0_Handler+0x10>)
    6b88:	4798      	blx	r3
    6b8a:	bd08      	pop	{r3, pc}
    6b8c:	20000990 	.word	0x20000990
    6b90:	000064c9 	.word	0x000064c9

00006b94 <SERCOM5_1_Handler>:
{
    6b94:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6b96:	4b02      	ldr	r3, [pc, #8]	; (6ba0 <SERCOM5_1_Handler+0xc>)
    6b98:	6958      	ldr	r0, [r3, #20]
    6b9a:	4b02      	ldr	r3, [pc, #8]	; (6ba4 <SERCOM5_1_Handler+0x10>)
    6b9c:	4798      	blx	r3
    6b9e:	bd08      	pop	{r3, pc}
    6ba0:	20000990 	.word	0x20000990
    6ba4:	000064c9 	.word	0x000064c9

00006ba8 <SERCOM5_2_Handler>:
{
    6ba8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6baa:	4b02      	ldr	r3, [pc, #8]	; (6bb4 <SERCOM5_2_Handler+0xc>)
    6bac:	6958      	ldr	r0, [r3, #20]
    6bae:	4b02      	ldr	r3, [pc, #8]	; (6bb8 <SERCOM5_2_Handler+0x10>)
    6bb0:	4798      	blx	r3
    6bb2:	bd08      	pop	{r3, pc}
    6bb4:	20000990 	.word	0x20000990
    6bb8:	000064c9 	.word	0x000064c9

00006bbc <SERCOM5_3_Handler>:
{
    6bbc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6bbe:	4b02      	ldr	r3, [pc, #8]	; (6bc8 <SERCOM5_3_Handler+0xc>)
    6bc0:	6958      	ldr	r0, [r3, #20]
    6bc2:	4b02      	ldr	r3, [pc, #8]	; (6bcc <SERCOM5_3_Handler+0x10>)
    6bc4:	4798      	blx	r3
    6bc6:	bd08      	pop	{r3, pc}
    6bc8:	20000990 	.word	0x20000990
    6bcc:	000064c9 	.word	0x000064c9

00006bd0 <SERCOM6_0_Handler>:
{
    6bd0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6bd2:	4b02      	ldr	r3, [pc, #8]	; (6bdc <SERCOM6_0_Handler+0xc>)
    6bd4:	6998      	ldr	r0, [r3, #24]
    6bd6:	4b02      	ldr	r3, [pc, #8]	; (6be0 <SERCOM6_0_Handler+0x10>)
    6bd8:	4798      	blx	r3
    6bda:	bd08      	pop	{r3, pc}
    6bdc:	20000990 	.word	0x20000990
    6be0:	0000605d 	.word	0x0000605d

00006be4 <SERCOM6_1_Handler>:
{
    6be4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6be6:	4b02      	ldr	r3, [pc, #8]	; (6bf0 <SERCOM6_1_Handler+0xc>)
    6be8:	6998      	ldr	r0, [r3, #24]
    6bea:	4b02      	ldr	r3, [pc, #8]	; (6bf4 <SERCOM6_1_Handler+0x10>)
    6bec:	4798      	blx	r3
    6bee:	bd08      	pop	{r3, pc}
    6bf0:	20000990 	.word	0x20000990
    6bf4:	0000605d 	.word	0x0000605d

00006bf8 <SERCOM6_2_Handler>:
{
    6bf8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6bfa:	4b02      	ldr	r3, [pc, #8]	; (6c04 <SERCOM6_2_Handler+0xc>)
    6bfc:	6998      	ldr	r0, [r3, #24]
    6bfe:	4b02      	ldr	r3, [pc, #8]	; (6c08 <SERCOM6_2_Handler+0x10>)
    6c00:	4798      	blx	r3
    6c02:	bd08      	pop	{r3, pc}
    6c04:	20000990 	.word	0x20000990
    6c08:	0000605d 	.word	0x0000605d

00006c0c <SERCOM6_3_Handler>:
{
    6c0c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6c0e:	4b02      	ldr	r3, [pc, #8]	; (6c18 <SERCOM6_3_Handler+0xc>)
    6c10:	6998      	ldr	r0, [r3, #24]
    6c12:	4b02      	ldr	r3, [pc, #8]	; (6c1c <SERCOM6_3_Handler+0x10>)
    6c14:	4798      	blx	r3
    6c16:	bd08      	pop	{r3, pc}
    6c18:	20000990 	.word	0x20000990
    6c1c:	0000605d 	.word	0x0000605d

00006c20 <_spi_m_sync_init>:
{
    6c20:	b570      	push	{r4, r5, r6, lr}
    6c22:	4606      	mov	r6, r0
    6c24:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6c26:	4608      	mov	r0, r1
    6c28:	4b5d      	ldr	r3, [pc, #372]	; (6da0 <_spi_m_sync_init+0x180>)
    6c2a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    6c2c:	2803      	cmp	r0, #3
    6c2e:	d00c      	beq.n	6c4a <_spi_m_sync_init+0x2a>
    6c30:	2807      	cmp	r0, #7
    6c32:	bf08      	it	eq
    6c34:	2301      	moveq	r3, #1
    6c36:	d009      	beq.n	6c4c <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    6c38:	2e00      	cmp	r6, #0
    6c3a:	f000 809f 	beq.w	6d7c <_spi_m_sync_init+0x15c>
    6c3e:	2c00      	cmp	r4, #0
    6c40:	f040 80a5 	bne.w	6d8e <_spi_m_sync_init+0x16e>
	return NULL;
    6c44:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    6c46:	2000      	movs	r0, #0
    6c48:	e009      	b.n	6c5e <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    6c4a:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    6c4c:	4d55      	ldr	r5, [pc, #340]	; (6da4 <_spi_m_sync_init+0x184>)
    6c4e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    6c52:	441d      	add	r5, r3
	ASSERT(dev && hw);
    6c54:	2e00      	cmp	r6, #0
    6c56:	d0f6      	beq.n	6c46 <_spi_m_sync_init+0x26>
    6c58:	2001      	movs	r0, #1
    6c5a:	2c00      	cmp	r4, #0
    6c5c:	d0f3      	beq.n	6c46 <_spi_m_sync_init+0x26>
    6c5e:	f640 2291 	movw	r2, #2705	; 0xa91
    6c62:	4951      	ldr	r1, [pc, #324]	; (6da8 <_spi_m_sync_init+0x188>)
    6c64:	4b51      	ldr	r3, [pc, #324]	; (6dac <_spi_m_sync_init+0x18c>)
    6c66:	4798      	blx	r3
	if (regs == NULL) {
    6c68:	2d00      	cmp	r5, #0
    6c6a:	f000 8084 	beq.w	6d76 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6c6e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6c70:	f013 0f01 	tst.w	r3, #1
    6c74:	d11d      	bne.n	6cb2 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6c76:	682b      	ldr	r3, [r5, #0]
    6c78:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6c7c:	69e3      	ldr	r3, [r4, #28]
    6c7e:	f013 0f03 	tst.w	r3, #3
    6c82:	d1fb      	bne.n	6c7c <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6c84:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6c86:	f013 0f02 	tst.w	r3, #2
    6c8a:	d00b      	beq.n	6ca4 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6c8c:	6823      	ldr	r3, [r4, #0]
    6c8e:	f023 0302 	bic.w	r3, r3, #2
    6c92:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6c94:	69e3      	ldr	r3, [r4, #28]
    6c96:	f013 0f03 	tst.w	r3, #3
    6c9a:	d1fb      	bne.n	6c94 <_spi_m_sync_init+0x74>
    6c9c:	69e3      	ldr	r3, [r4, #28]
    6c9e:	f013 0f02 	tst.w	r3, #2
    6ca2:	d1fb      	bne.n	6c9c <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6ca4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6ca8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6caa:	69e3      	ldr	r3, [r4, #28]
    6cac:	f013 0f03 	tst.w	r3, #3
    6cb0:	d1fb      	bne.n	6caa <_spi_m_sync_init+0x8a>
    6cb2:	69e3      	ldr	r3, [r4, #28]
    6cb4:	f013 0f01 	tst.w	r3, #1
    6cb8:	d1fb      	bne.n	6cb2 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    6cba:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6cbc:	682b      	ldr	r3, [r5, #0]
    6cbe:	f003 031c 	and.w	r3, r3, #28
    6cc2:	2b08      	cmp	r3, #8
    6cc4:	d02e      	beq.n	6d24 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    6cc6:	f640 1276 	movw	r2, #2422	; 0x976
    6cca:	4937      	ldr	r1, [pc, #220]	; (6da8 <_spi_m_sync_init+0x188>)
    6ccc:	1c20      	adds	r0, r4, #0
    6cce:	bf18      	it	ne
    6cd0:	2001      	movne	r0, #1
    6cd2:	4b36      	ldr	r3, [pc, #216]	; (6dac <_spi_m_sync_init+0x18c>)
    6cd4:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6cd6:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    6cd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6cdc:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6ce0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6ce2:	69e3      	ldr	r3, [r4, #28]
    6ce4:	f013 0f03 	tst.w	r3, #3
    6ce8:	d1fb      	bne.n	6ce2 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    6cea:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    6cec:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6cf0:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6cf8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6cfa:	69e3      	ldr	r3, [r4, #28]
    6cfc:	f013 0f17 	tst.w	r3, #23
    6d00:	d1fb      	bne.n	6cfa <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6d02:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6d04:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d06:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6d08:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6d0c:	686b      	ldr	r3, [r5, #4]
    6d0e:	f003 0307 	and.w	r3, r3, #7
    6d12:	2b00      	cmp	r3, #0
    6d14:	bf0c      	ite	eq
    6d16:	2301      	moveq	r3, #1
    6d18:	2302      	movne	r3, #2
    6d1a:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    6d1c:	89eb      	ldrh	r3, [r5, #14]
    6d1e:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    6d20:	2000      	movs	r0, #0
    6d22:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    6d24:	f640 128a 	movw	r2, #2442	; 0x98a
    6d28:	491f      	ldr	r1, [pc, #124]	; (6da8 <_spi_m_sync_init+0x188>)
    6d2a:	1c20      	adds	r0, r4, #0
    6d2c:	bf18      	it	ne
    6d2e:	2001      	movne	r0, #1
    6d30:	4b1e      	ldr	r3, [pc, #120]	; (6dac <_spi_m_sync_init+0x18c>)
    6d32:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6d34:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    6d36:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6d3a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6d3e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6d40:	69e3      	ldr	r3, [r4, #28]
    6d42:	f013 0f03 	tst.w	r3, #3
    6d46:	d1fb      	bne.n	6d40 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6d48:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6d4a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6d4e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d56:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6d5a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6d5c:	69e3      	ldr	r3, [r4, #28]
    6d5e:	f013 0f17 	tst.w	r3, #23
    6d62:	d1fb      	bne.n	6d5c <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6d64:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6d66:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d68:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6d6a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6d6e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6d70:	2b00      	cmp	r3, #0
    6d72:	d1fc      	bne.n	6d6e <_spi_m_sync_init+0x14e>
    6d74:	e7ca      	b.n	6d0c <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    6d76:	f06f 000c 	mvn.w	r0, #12
    6d7a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    6d7c:	f640 2291 	movw	r2, #2705	; 0xa91
    6d80:	4909      	ldr	r1, [pc, #36]	; (6da8 <_spi_m_sync_init+0x188>)
    6d82:	2000      	movs	r0, #0
    6d84:	4b09      	ldr	r3, [pc, #36]	; (6dac <_spi_m_sync_init+0x18c>)
    6d86:	4798      	blx	r3
		return ERR_INVALID_ARG;
    6d88:	f06f 000c 	mvn.w	r0, #12
    6d8c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    6d8e:	f640 2291 	movw	r2, #2705	; 0xa91
    6d92:	4905      	ldr	r1, [pc, #20]	; (6da8 <_spi_m_sync_init+0x188>)
    6d94:	2001      	movs	r0, #1
    6d96:	4b05      	ldr	r3, [pc, #20]	; (6dac <_spi_m_sync_init+0x18c>)
    6d98:	4798      	blx	r3
		return ERR_INVALID_ARG;
    6d9a:	f06f 000c 	mvn.w	r0, #12
    6d9e:	bd70      	pop	{r4, r5, r6, pc}
    6da0:	00006019 	.word	0x00006019
    6da4:	0000c200 	.word	0x0000c200
    6da8:	0000c224 	.word	0x0000c224
    6dac:	00005259 	.word	0x00005259

00006db0 <_spi_m_async_init>:
{
    6db0:	b538      	push	{r3, r4, r5, lr}
    6db2:	4604      	mov	r4, r0
    6db4:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    6db6:	4b15      	ldr	r3, [pc, #84]	; (6e0c <_spi_m_async_init+0x5c>)
    6db8:	4798      	blx	r3
	if (rc < 0) {
    6dba:	2800      	cmp	r0, #0
    6dbc:	db24      	blt.n	6e08 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    6dbe:	4621      	mov	r1, r4
    6dc0:	4628      	mov	r0, r5
    6dc2:	4b13      	ldr	r3, [pc, #76]	; (6e10 <_spi_m_async_init+0x60>)
    6dc4:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    6dc6:	2300      	movs	r3, #0
    6dc8:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    6dca:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    6dcc:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    6dce:	4628      	mov	r0, r5
    6dd0:	4b10      	ldr	r3, [pc, #64]	; (6e14 <_spi_m_async_init+0x64>)
    6dd2:	4798      	blx	r3
    6dd4:	1d01      	adds	r1, r0, #4
    6dd6:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6dd8:	2401      	movs	r4, #1
    6dda:	f000 021f 	and.w	r2, r0, #31
    6dde:	fa04 f202 	lsl.w	r2, r4, r2
    6de2:	0943      	lsrs	r3, r0, #5
    6de4:	009b      	lsls	r3, r3, #2
    6de6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6dea:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6df2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6df6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6dfa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    6dfe:	3001      	adds	r0, #1
    6e00:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6e02:	4281      	cmp	r1, r0
    6e04:	d1e9      	bne.n	6dda <_spi_m_async_init+0x2a>
	return ERR_NONE;
    6e06:	2000      	movs	r0, #0
}
    6e08:	bd38      	pop	{r3, r4, r5, pc}
    6e0a:	bf00      	nop
    6e0c:	00006c21 	.word	0x00006c21
    6e10:	000060cd 	.word	0x000060cd
    6e14:	0000613d 	.word	0x0000613d

00006e18 <_spi_m_async_enable>:
{
    6e18:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    6e1a:	4604      	mov	r4, r0
    6e1c:	b160      	cbz	r0, 6e38 <_spi_m_async_enable+0x20>
    6e1e:	6800      	ldr	r0, [r0, #0]
    6e20:	3000      	adds	r0, #0
    6e22:	bf18      	it	ne
    6e24:	2001      	movne	r0, #1
    6e26:	f640 22fe 	movw	r2, #2814	; 0xafe
    6e2a:	4904      	ldr	r1, [pc, #16]	; (6e3c <_spi_m_async_enable+0x24>)
    6e2c:	4b04      	ldr	r3, [pc, #16]	; (6e40 <_spi_m_async_enable+0x28>)
    6e2e:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    6e30:	6820      	ldr	r0, [r4, #0]
    6e32:	4b04      	ldr	r3, [pc, #16]	; (6e44 <_spi_m_async_enable+0x2c>)
    6e34:	4798      	blx	r3
}
    6e36:	bd10      	pop	{r4, pc}
    6e38:	2000      	movs	r0, #0
    6e3a:	e7f4      	b.n	6e26 <_spi_m_async_enable+0xe>
    6e3c:	0000c224 	.word	0x0000c224
    6e40:	00005259 	.word	0x00005259
    6e44:	00006175 	.word	0x00006175

00006e48 <_spi_m_async_set_mode>:
{
    6e48:	b538      	push	{r3, r4, r5, lr}
    6e4a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    6e4c:	4604      	mov	r4, r0
    6e4e:	b168      	cbz	r0, 6e6c <_spi_m_async_set_mode+0x24>
    6e50:	6800      	ldr	r0, [r0, #0]
    6e52:	3000      	adds	r0, #0
    6e54:	bf18      	it	ne
    6e56:	2001      	movne	r0, #1
    6e58:	f640 322f 	movw	r2, #2863	; 0xb2f
    6e5c:	4904      	ldr	r1, [pc, #16]	; (6e70 <_spi_m_async_set_mode+0x28>)
    6e5e:	4b05      	ldr	r3, [pc, #20]	; (6e74 <_spi_m_async_set_mode+0x2c>)
    6e60:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    6e62:	4629      	mov	r1, r5
    6e64:	6820      	ldr	r0, [r4, #0]
    6e66:	4b04      	ldr	r3, [pc, #16]	; (6e78 <_spi_m_async_set_mode+0x30>)
    6e68:	4798      	blx	r3
}
    6e6a:	bd38      	pop	{r3, r4, r5, pc}
    6e6c:	2000      	movs	r0, #0
    6e6e:	e7f3      	b.n	6e58 <_spi_m_async_set_mode+0x10>
    6e70:	0000c224 	.word	0x0000c224
    6e74:	00005259 	.word	0x00005259
    6e78:	000061b5 	.word	0x000061b5

00006e7c <_spi_m_async_set_baudrate>:
{
    6e7c:	b538      	push	{r3, r4, r5, lr}
    6e7e:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    6e80:	4605      	mov	r5, r0
    6e82:	b198      	cbz	r0, 6eac <_spi_m_async_set_baudrate+0x30>
    6e84:	6800      	ldr	r0, [r0, #0]
    6e86:	3000      	adds	r0, #0
    6e88:	bf18      	it	ne
    6e8a:	2001      	movne	r0, #1
    6e8c:	f640 325e 	movw	r2, #2910	; 0xb5e
    6e90:	4907      	ldr	r1, [pc, #28]	; (6eb0 <_spi_m_async_set_baudrate+0x34>)
    6e92:	4b08      	ldr	r3, [pc, #32]	; (6eb4 <_spi_m_async_set_baudrate+0x38>)
    6e94:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    6e96:	682b      	ldr	r3, [r5, #0]
    6e98:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6e9a:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    6e9e:	bf03      	ittte	eq
    6ea0:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6ea2:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    6ea4:	2000      	moveq	r0, #0
		return ERR_BUSY;
    6ea6:	f06f 0003 	mvnne.w	r0, #3
}
    6eaa:	bd38      	pop	{r3, r4, r5, pc}
    6eac:	2000      	movs	r0, #0
    6eae:	e7ed      	b.n	6e8c <_spi_m_async_set_baudrate+0x10>
    6eb0:	0000c224 	.word	0x0000c224
    6eb4:	00005259 	.word	0x00005259

00006eb8 <_spi_m_async_enable_tx>:
{
    6eb8:	b538      	push	{r3, r4, r5, lr}
    6eba:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    6ebc:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    6ebe:	b160      	cbz	r0, 6eda <_spi_m_async_enable_tx+0x22>
    6ec0:	1c20      	adds	r0, r4, #0
    6ec2:	bf18      	it	ne
    6ec4:	2001      	movne	r0, #1
    6ec6:	f640 4221 	movw	r2, #3105	; 0xc21
    6eca:	4906      	ldr	r1, [pc, #24]	; (6ee4 <_spi_m_async_enable_tx+0x2c>)
    6ecc:	4b06      	ldr	r3, [pc, #24]	; (6ee8 <_spi_m_async_enable_tx+0x30>)
    6ece:	4798      	blx	r3
	if (state) {
    6ed0:	b92d      	cbnz	r5, 6ede <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    6ed2:	2301      	movs	r3, #1
    6ed4:	7523      	strb	r3, [r4, #20]
}
    6ed6:	2000      	movs	r0, #0
    6ed8:	bd38      	pop	{r3, r4, r5, pc}
    6eda:	2000      	movs	r0, #0
    6edc:	e7f3      	b.n	6ec6 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    6ede:	2301      	movs	r3, #1
    6ee0:	75a3      	strb	r3, [r4, #22]
    6ee2:	e7f8      	b.n	6ed6 <_spi_m_async_enable_tx+0x1e>
    6ee4:	0000c224 	.word	0x0000c224
    6ee8:	00005259 	.word	0x00005259

00006eec <_spi_m_async_enable_rx>:
{
    6eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6eee:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    6ef0:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    6ef2:	4e0c      	ldr	r6, [pc, #48]	; (6f24 <_spi_m_async_enable_rx+0x38>)
    6ef4:	f640 4235 	movw	r2, #3125	; 0xc35
    6ef8:	4631      	mov	r1, r6
    6efa:	3000      	adds	r0, #0
    6efc:	bf18      	it	ne
    6efe:	2001      	movne	r0, #1
    6f00:	4d09      	ldr	r5, [pc, #36]	; (6f28 <_spi_m_async_enable_rx+0x3c>)
    6f02:	47a8      	blx	r5
	ASSERT(hw);
    6f04:	f640 4236 	movw	r2, #3126	; 0xc36
    6f08:	4631      	mov	r1, r6
    6f0a:	1c20      	adds	r0, r4, #0
    6f0c:	bf18      	it	ne
    6f0e:	2001      	movne	r0, #1
    6f10:	47a8      	blx	r5
	if (state) {
    6f12:	b91f      	cbnz	r7, 6f1c <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    6f14:	2304      	movs	r3, #4
    6f16:	7523      	strb	r3, [r4, #20]
}
    6f18:	2000      	movs	r0, #0
    6f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    6f1c:	2304      	movs	r3, #4
    6f1e:	75a3      	strb	r3, [r4, #22]
    6f20:	e7fa      	b.n	6f18 <_spi_m_async_enable_rx+0x2c>
    6f22:	bf00      	nop
    6f24:	0000c224 	.word	0x0000c224
    6f28:	00005259 	.word	0x00005259

00006f2c <_spi_m_async_enable_tx_complete>:
{
    6f2c:	b538      	push	{r3, r4, r5, lr}
    6f2e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    6f30:	4604      	mov	r4, r0
    6f32:	b170      	cbz	r0, 6f52 <_spi_m_async_enable_tx_complete+0x26>
    6f34:	6800      	ldr	r0, [r0, #0]
    6f36:	3000      	adds	r0, #0
    6f38:	bf18      	it	ne
    6f3a:	2001      	movne	r0, #1
    6f3c:	f640 4248 	movw	r2, #3144	; 0xc48
    6f40:	4907      	ldr	r1, [pc, #28]	; (6f60 <_spi_m_async_enable_tx_complete+0x34>)
    6f42:	4b08      	ldr	r3, [pc, #32]	; (6f64 <_spi_m_async_enable_tx_complete+0x38>)
    6f44:	4798      	blx	r3
	if (state) {
    6f46:	b935      	cbnz	r5, 6f56 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    6f48:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    6f4a:	2202      	movs	r2, #2
    6f4c:	751a      	strb	r2, [r3, #20]
}
    6f4e:	2000      	movs	r0, #0
    6f50:	bd38      	pop	{r3, r4, r5, pc}
    6f52:	2000      	movs	r0, #0
    6f54:	e7f2      	b.n	6f3c <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    6f56:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    6f58:	2202      	movs	r2, #2
    6f5a:	759a      	strb	r2, [r3, #22]
    6f5c:	e7f7      	b.n	6f4e <_spi_m_async_enable_tx_complete+0x22>
    6f5e:	bf00      	nop
    6f60:	0000c224 	.word	0x0000c224
    6f64:	00005259 	.word	0x00005259

00006f68 <_spi_m_async_write_one>:
{
    6f68:	b538      	push	{r3, r4, r5, lr}
    6f6a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    6f6c:	4604      	mov	r4, r0
    6f6e:	b160      	cbz	r0, 6f8a <_spi_m_async_write_one+0x22>
    6f70:	6800      	ldr	r0, [r0, #0]
    6f72:	3000      	adds	r0, #0
    6f74:	bf18      	it	ne
    6f76:	2001      	movne	r0, #1
    6f78:	f640 425a 	movw	r2, #3162	; 0xc5a
    6f7c:	4904      	ldr	r1, [pc, #16]	; (6f90 <_spi_m_async_write_one+0x28>)
    6f7e:	4b05      	ldr	r3, [pc, #20]	; (6f94 <_spi_m_async_write_one+0x2c>)
    6f80:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    6f82:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    6f84:	629d      	str	r5, [r3, #40]	; 0x28
}
    6f86:	2000      	movs	r0, #0
    6f88:	bd38      	pop	{r3, r4, r5, pc}
    6f8a:	2000      	movs	r0, #0
    6f8c:	e7f4      	b.n	6f78 <_spi_m_async_write_one+0x10>
    6f8e:	bf00      	nop
    6f90:	0000c224 	.word	0x0000c224
    6f94:	00005259 	.word	0x00005259

00006f98 <_spi_m_async_read_one>:
{
    6f98:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    6f9a:	4604      	mov	r4, r0
    6f9c:	b160      	cbz	r0, 6fb8 <_spi_m_async_read_one+0x20>
    6f9e:	6800      	ldr	r0, [r0, #0]
    6fa0:	3000      	adds	r0, #0
    6fa2:	bf18      	it	ne
    6fa4:	2001      	movne	r0, #1
    6fa6:	f640 4275 	movw	r2, #3189	; 0xc75
    6faa:	4904      	ldr	r1, [pc, #16]	; (6fbc <_spi_m_async_read_one+0x24>)
    6fac:	4b04      	ldr	r3, [pc, #16]	; (6fc0 <_spi_m_async_read_one+0x28>)
    6fae:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    6fb0:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6fb2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    6fb4:	b280      	uxth	r0, r0
    6fb6:	bd10      	pop	{r4, pc}
    6fb8:	2000      	movs	r0, #0
    6fba:	e7f4      	b.n	6fa6 <_spi_m_async_read_one+0xe>
    6fbc:	0000c224 	.word	0x0000c224
    6fc0:	00005259 	.word	0x00005259

00006fc4 <_spi_m_async_register_callback>:
{
    6fc4:	b570      	push	{r4, r5, r6, lr}
    6fc6:	460d      	mov	r5, r1
    6fc8:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    6fca:	4604      	mov	r4, r0
    6fcc:	b168      	cbz	r0, 6fea <_spi_m_async_register_callback+0x26>
    6fce:	2903      	cmp	r1, #3
    6fd0:	bf8c      	ite	hi
    6fd2:	2000      	movhi	r0, #0
    6fd4:	2001      	movls	r0, #1
    6fd6:	f640 428e 	movw	r2, #3214	; 0xc8e
    6fda:	4905      	ldr	r1, [pc, #20]	; (6ff0 <_spi_m_async_register_callback+0x2c>)
    6fdc:	4b05      	ldr	r3, [pc, #20]	; (6ff4 <_spi_m_async_register_callback+0x30>)
    6fde:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    6fe0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    6fe4:	60a6      	str	r6, [r4, #8]
}
    6fe6:	2000      	movs	r0, #0
    6fe8:	bd70      	pop	{r4, r5, r6, pc}
    6fea:	2000      	movs	r0, #0
    6fec:	e7f3      	b.n	6fd6 <_spi_m_async_register_callback+0x12>
    6fee:	bf00      	nop
    6ff0:	0000c224 	.word	0x0000c224
    6ff4:	00005259 	.word	0x00005259

00006ff8 <_spi_m_async_set_irq_state>:
{
    6ff8:	b570      	push	{r4, r5, r6, lr}
    6ffa:	460c      	mov	r4, r1
    6ffc:	4615      	mov	r5, r2
	ASSERT(device);
    6ffe:	4606      	mov	r6, r0
    7000:	f640 42cf 	movw	r2, #3279	; 0xccf
    7004:	4908      	ldr	r1, [pc, #32]	; (7028 <_spi_m_async_set_irq_state+0x30>)
    7006:	3000      	adds	r0, #0
    7008:	bf18      	it	ne
    700a:	2001      	movne	r0, #1
    700c:	4b07      	ldr	r3, [pc, #28]	; (702c <_spi_m_async_set_irq_state+0x34>)
    700e:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    7010:	2c03      	cmp	r4, #3
    7012:	d000      	beq.n	7016 <_spi_m_async_set_irq_state+0x1e>
    7014:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    7016:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    7018:	b115      	cbz	r5, 7020 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    701a:	2280      	movs	r2, #128	; 0x80
    701c:	759a      	strb	r2, [r3, #22]
}
    701e:	e7f9      	b.n	7014 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    7020:	2280      	movs	r2, #128	; 0x80
    7022:	751a      	strb	r2, [r3, #20]
    7024:	bd70      	pop	{r4, r5, r6, pc}
    7026:	bf00      	nop
    7028:	0000c224 	.word	0x0000c224
    702c:	00005259 	.word	0x00005259

00007030 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    7030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7034:	4605      	mov	r5, r0
    7036:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7038:	4608      	mov	r0, r1
    703a:	4b52      	ldr	r3, [pc, #328]	; (7184 <_spi_m_dma_init+0x154>)
    703c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    703e:	2803      	cmp	r0, #3
    7040:	d00c      	beq.n	705c <_spi_m_dma_init+0x2c>
    7042:	2807      	cmp	r0, #7
    7044:	bf08      	it	eq
    7046:	2301      	moveq	r3, #1
    7048:	d009      	beq.n	705e <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    704a:	2d00      	cmp	r5, #0
    704c:	f000 8086 	beq.w	715c <_spi_m_dma_init+0x12c>
    7050:	2c00      	cmp	r4, #0
    7052:	f040 808d 	bne.w	7170 <_spi_m_dma_init+0x140>
	return NULL;
    7056:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7058:	2000      	movs	r0, #0
    705a:	e009      	b.n	7070 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    705c:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    705e:	4e4a      	ldr	r6, [pc, #296]	; (7188 <_spi_m_dma_init+0x158>)
    7060:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7064:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7066:	2d00      	cmp	r5, #0
    7068:	d0f6      	beq.n	7058 <_spi_m_dma_init+0x28>
    706a:	2001      	movs	r0, #1
    706c:	2c00      	cmp	r4, #0
    706e:	d0f3      	beq.n	7058 <_spi_m_dma_init+0x28>
    7070:	f640 52c3 	movw	r2, #3523	; 0xdc3
    7074:	4945      	ldr	r1, [pc, #276]	; (718c <_spi_m_dma_init+0x15c>)
    7076:	4b46      	ldr	r3, [pc, #280]	; (7190 <_spi_m_dma_init+0x160>)
    7078:	4798      	blx	r3

	if (regs == NULL) {
    707a:	2e00      	cmp	r6, #0
    707c:	d06a      	beq.n	7154 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    707e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7080:	f013 0f01 	tst.w	r3, #1
    7084:	d11d      	bne.n	70c2 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7086:	6833      	ldr	r3, [r6, #0]
    7088:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    708c:	69e3      	ldr	r3, [r4, #28]
    708e:	f013 0f03 	tst.w	r3, #3
    7092:	d1fb      	bne.n	708c <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7094:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7096:	f013 0f02 	tst.w	r3, #2
    709a:	d00b      	beq.n	70b4 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    709c:	6823      	ldr	r3, [r4, #0]
    709e:	f023 0302 	bic.w	r3, r3, #2
    70a2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    70a4:	69e3      	ldr	r3, [r4, #28]
    70a6:	f013 0f03 	tst.w	r3, #3
    70aa:	d1fb      	bne.n	70a4 <_spi_m_dma_init+0x74>
    70ac:	69e3      	ldr	r3, [r4, #28]
    70ae:	f013 0f02 	tst.w	r3, #2
    70b2:	d1fb      	bne.n	70ac <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    70b4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    70b8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    70ba:	69e3      	ldr	r3, [r4, #28]
    70bc:	f013 0f03 	tst.w	r3, #3
    70c0:	d1fb      	bne.n	70ba <_spi_m_dma_init+0x8a>
    70c2:	69e3      	ldr	r3, [r4, #28]
    70c4:	f013 0f01 	tst.w	r3, #1
    70c8:	d1fb      	bne.n	70c2 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    70ca:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    70cc:	f640 1276 	movw	r2, #2422	; 0x976
    70d0:	492e      	ldr	r1, [pc, #184]	; (718c <_spi_m_dma_init+0x15c>)
    70d2:	1c20      	adds	r0, r4, #0
    70d4:	bf18      	it	ne
    70d6:	2001      	movne	r0, #1
    70d8:	4b2d      	ldr	r3, [pc, #180]	; (7190 <_spi_m_dma_init+0x160>)
    70da:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    70dc:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    70de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    70e2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    70e6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    70e8:	69e3      	ldr	r3, [r4, #28]
    70ea:	f013 0f03 	tst.w	r3, #3
    70ee:	d1fb      	bne.n	70e8 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    70f0:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    70f2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    70f6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    70fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    70fe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7100:	69e3      	ldr	r3, [r4, #28]
    7102:	f013 0f17 	tst.w	r3, #23
    7106:	d1fb      	bne.n	7100 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7108:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    710a:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    710c:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    710e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    7112:	f105 0818 	add.w	r8, r5, #24
    7116:	4620      	mov	r0, r4
    7118:	4b1e      	ldr	r3, [pc, #120]	; (7194 <_spi_m_dma_init+0x164>)
    711a:	4798      	blx	r3
    711c:	4601      	mov	r1, r0
    711e:	4640      	mov	r0, r8
    7120:	4f1d      	ldr	r7, [pc, #116]	; (7198 <_spi_m_dma_init+0x168>)
    7122:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7124:	69ab      	ldr	r3, [r5, #24]
    7126:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    7128:	69ab      	ldr	r3, [r5, #24]
    712a:	4a1c      	ldr	r2, [pc, #112]	; (719c <_spi_m_dma_init+0x16c>)
    712c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    712e:	69ab      	ldr	r3, [r5, #24]
    7130:	4e1b      	ldr	r6, [pc, #108]	; (71a0 <_spi_m_dma_init+0x170>)
    7132:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    7134:	4620      	mov	r0, r4
    7136:	4b1b      	ldr	r3, [pc, #108]	; (71a4 <_spi_m_dma_init+0x174>)
    7138:	4798      	blx	r3
    713a:	4601      	mov	r1, r0
    713c:	4640      	mov	r0, r8
    713e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7140:	69ab      	ldr	r3, [r5, #24]
    7142:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    7144:	69ab      	ldr	r3, [r5, #24]
    7146:	4a18      	ldr	r2, [pc, #96]	; (71a8 <_spi_m_dma_init+0x178>)
    7148:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    714a:	69ab      	ldr	r3, [r5, #24]
    714c:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    714e:	2000      	movs	r0, #0
    7150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    7154:	f06f 000c 	mvn.w	r0, #12
    7158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    715c:	f640 52c3 	movw	r2, #3523	; 0xdc3
    7160:	490a      	ldr	r1, [pc, #40]	; (718c <_spi_m_dma_init+0x15c>)
    7162:	2000      	movs	r0, #0
    7164:	4b0a      	ldr	r3, [pc, #40]	; (7190 <_spi_m_dma_init+0x160>)
    7166:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7168:	f06f 000c 	mvn.w	r0, #12
    716c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7170:	f640 52c3 	movw	r2, #3523	; 0xdc3
    7174:	4905      	ldr	r1, [pc, #20]	; (718c <_spi_m_dma_init+0x15c>)
    7176:	2001      	movs	r0, #1
    7178:	4b05      	ldr	r3, [pc, #20]	; (7190 <_spi_m_dma_init+0x160>)
    717a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    717c:	f06f 000c 	mvn.w	r0, #12
    7180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7184:	00006019 	.word	0x00006019
    7188:	0000c200 	.word	0x0000c200
    718c:	0000c224 	.word	0x0000c224
    7190:	00005259 	.word	0x00005259
    7194:	00006249 	.word	0x00006249
    7198:	00005add 	.word	0x00005add
    719c:	0000625d 	.word	0x0000625d
    71a0:	00006275 	.word	0x00006275
    71a4:	00006235 	.word	0x00006235
    71a8:	00006269 	.word	0x00006269

000071ac <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    71ac:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    71ae:	4604      	mov	r4, r0
    71b0:	b160      	cbz	r0, 71cc <_spi_m_dma_enable+0x20>
    71b2:	6800      	ldr	r0, [r0, #0]
    71b4:	3000      	adds	r0, #0
    71b6:	bf18      	it	ne
    71b8:	2001      	movne	r0, #1
    71ba:	f640 52ec 	movw	r2, #3564	; 0xdec
    71be:	4904      	ldr	r1, [pc, #16]	; (71d0 <_spi_m_dma_enable+0x24>)
    71c0:	4b04      	ldr	r3, [pc, #16]	; (71d4 <_spi_m_dma_enable+0x28>)
    71c2:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    71c4:	6820      	ldr	r0, [r4, #0]
    71c6:	4b04      	ldr	r3, [pc, #16]	; (71d8 <_spi_m_dma_enable+0x2c>)
    71c8:	4798      	blx	r3
}
    71ca:	bd10      	pop	{r4, pc}
    71cc:	2000      	movs	r0, #0
    71ce:	e7f4      	b.n	71ba <_spi_m_dma_enable+0xe>
    71d0:	0000c224 	.word	0x0000c224
    71d4:	00005259 	.word	0x00005259
    71d8:	00006151 	.word	0x00006151

000071dc <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    71dc:	b570      	push	{r4, r5, r6, lr}
    71de:	4605      	mov	r5, r0
    71e0:	4614      	mov	r4, r2
	switch (type) {
    71e2:	2901      	cmp	r1, #1
    71e4:	d00e      	beq.n	7204 <_spi_m_dma_register_callback+0x28>
    71e6:	b111      	cbz	r1, 71ee <_spi_m_dma_register_callback+0x12>
    71e8:	2902      	cmp	r1, #2
    71ea:	d016      	beq.n	721a <_spi_m_dma_register_callback+0x3e>
    71ec:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    71ee:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    71f0:	6800      	ldr	r0, [r0, #0]
    71f2:	4b13      	ldr	r3, [pc, #76]	; (7240 <_spi_m_dma_register_callback+0x64>)
    71f4:	4798      	blx	r3
    71f6:	1c22      	adds	r2, r4, #0
    71f8:	bf18      	it	ne
    71fa:	2201      	movne	r2, #1
    71fc:	2100      	movs	r1, #0
    71fe:	4b11      	ldr	r3, [pc, #68]	; (7244 <_spi_m_dma_register_callback+0x68>)
    7200:	4798      	blx	r3
		break;
    7202:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    7204:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7206:	6800      	ldr	r0, [r0, #0]
    7208:	4b0f      	ldr	r3, [pc, #60]	; (7248 <_spi_m_dma_register_callback+0x6c>)
    720a:	4798      	blx	r3
    720c:	1c22      	adds	r2, r4, #0
    720e:	bf18      	it	ne
    7210:	2201      	movne	r2, #1
    7212:	2100      	movs	r1, #0
    7214:	4b0b      	ldr	r3, [pc, #44]	; (7244 <_spi_m_dma_register_callback+0x68>)
    7216:	4798      	blx	r3
		break;
    7218:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    721a:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    721c:	6800      	ldr	r0, [r0, #0]
    721e:	4b0a      	ldr	r3, [pc, #40]	; (7248 <_spi_m_dma_register_callback+0x6c>)
    7220:	4798      	blx	r3
    7222:	3400      	adds	r4, #0
    7224:	bf18      	it	ne
    7226:	2401      	movne	r4, #1
    7228:	4622      	mov	r2, r4
    722a:	2101      	movs	r1, #1
    722c:	4e05      	ldr	r6, [pc, #20]	; (7244 <_spi_m_dma_register_callback+0x68>)
    722e:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7230:	6828      	ldr	r0, [r5, #0]
    7232:	4b03      	ldr	r3, [pc, #12]	; (7240 <_spi_m_dma_register_callback+0x64>)
    7234:	4798      	blx	r3
    7236:	4622      	mov	r2, r4
    7238:	2101      	movs	r1, #1
    723a:	47b0      	blx	r6
    723c:	bd70      	pop	{r4, r5, r6, pc}
    723e:	bf00      	nop
    7240:	00006235 	.word	0x00006235
    7244:	000059b5 	.word	0x000059b5
    7248:	00006249 	.word	0x00006249

0000724c <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    724c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7250:	4605      	mov	r5, r0
    7252:	4689      	mov	r9, r1
    7254:	4617      	mov	r7, r2
    7256:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7258:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    725c:	4658      	mov	r0, fp
    725e:	4b46      	ldr	r3, [pc, #280]	; (7378 <_spi_m_dma_transfer+0x12c>)
    7260:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7262:	2803      	cmp	r0, #3
    7264:	d053      	beq.n	730e <_spi_m_dma_transfer+0xc2>
    7266:	2807      	cmp	r0, #7
    7268:	bf08      	it	eq
    726a:	2201      	moveq	r2, #1
    726c:	d050      	beq.n	7310 <_spi_m_dma_transfer+0xc4>
	return NULL;
    726e:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    7272:	4658      	mov	r0, fp
    7274:	4b41      	ldr	r3, [pc, #260]	; (737c <_spi_m_dma_transfer+0x130>)
    7276:	4798      	blx	r3
    7278:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    727a:	4658      	mov	r0, fp
    727c:	4b40      	ldr	r3, [pc, #256]	; (7380 <_spi_m_dma_transfer+0x134>)
    727e:	4798      	blx	r3
    7280:	4604      	mov	r4, r0

	if (rxbuf) {
    7282:	2f00      	cmp	r7, #0
    7284:	d04b      	beq.n	731e <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    7286:	2d00      	cmp	r5, #0
    7288:	d047      	beq.n	731a <_spi_m_dma_transfer+0xce>
    728a:	f11b 0000 	adds.w	r0, fp, #0
    728e:	bf18      	it	ne
    7290:	2001      	movne	r0, #1
    7292:	f640 5236 	movw	r2, #3382	; 0xd36
    7296:	493b      	ldr	r1, [pc, #236]	; (7384 <_spi_m_dma_transfer+0x138>)
    7298:	4b3b      	ldr	r3, [pc, #236]	; (7388 <_spi_m_dma_transfer+0x13c>)
    729a:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    729c:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    729e:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    72a0:	f013 0f04 	tst.w	r3, #4
    72a4:	d107      	bne.n	72b6 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    72a6:	6853      	ldr	r3, [r2, #4]
    72a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    72ac:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    72ae:	69d3      	ldr	r3, [r2, #28]
    72b0:	f013 0f17 	tst.w	r3, #23
    72b4:	d1fb      	bne.n	72ae <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    72b6:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    72b8:	3128      	adds	r1, #40	; 0x28
    72ba:	4630      	mov	r0, r6
    72bc:	4b33      	ldr	r3, [pc, #204]	; (738c <_spi_m_dma_transfer+0x140>)
    72be:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    72c0:	4639      	mov	r1, r7
    72c2:	4630      	mov	r0, r6
    72c4:	4b32      	ldr	r3, [pc, #200]	; (7390 <_spi_m_dma_transfer+0x144>)
    72c6:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    72c8:	4641      	mov	r1, r8
    72ca:	4630      	mov	r0, r6
    72cc:	4b31      	ldr	r3, [pc, #196]	; (7394 <_spi_m_dma_transfer+0x148>)
    72ce:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    72d0:	2100      	movs	r1, #0
    72d2:	4630      	mov	r0, r6
    72d4:	4b30      	ldr	r3, [pc, #192]	; (7398 <_spi_m_dma_transfer+0x14c>)
    72d6:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    72d8:	f1b9 0f00 	cmp.w	r9, #0
    72dc:	d039      	beq.n	7352 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    72de:	4649      	mov	r1, r9
    72e0:	4620      	mov	r0, r4
    72e2:	4b2a      	ldr	r3, [pc, #168]	; (738c <_spi_m_dma_transfer+0x140>)
    72e4:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    72e6:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    72e8:	3128      	adds	r1, #40	; 0x28
    72ea:	4620      	mov	r0, r4
    72ec:	4b28      	ldr	r3, [pc, #160]	; (7390 <_spi_m_dma_transfer+0x144>)
    72ee:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    72f0:	2101      	movs	r1, #1
    72f2:	4620      	mov	r0, r4
    72f4:	4b29      	ldr	r3, [pc, #164]	; (739c <_spi_m_dma_transfer+0x150>)
    72f6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    72f8:	4641      	mov	r1, r8
    72fa:	4620      	mov	r0, r4
    72fc:	4b25      	ldr	r3, [pc, #148]	; (7394 <_spi_m_dma_transfer+0x148>)
    72fe:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    7300:	2100      	movs	r1, #0
    7302:	4620      	mov	r0, r4
    7304:	4b24      	ldr	r3, [pc, #144]	; (7398 <_spi_m_dma_transfer+0x14c>)
    7306:	4798      	blx	r3

	return ERR_NONE;
}
    7308:	2000      	movs	r0, #0
    730a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    730e:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    7310:	4b23      	ldr	r3, [pc, #140]	; (73a0 <_spi_m_dma_transfer+0x154>)
    7312:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    7316:	4492      	add	sl, r2
    7318:	e7ab      	b.n	7272 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    731a:	2000      	movs	r0, #0
    731c:	e7b9      	b.n	7292 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    731e:	b1b5      	cbz	r5, 734e <_spi_m_dma_transfer+0x102>
    7320:	f11b 0000 	adds.w	r0, fp, #0
    7324:	bf18      	it	ne
    7326:	2001      	movne	r0, #1
    7328:	f640 523d 	movw	r2, #3389	; 0xd3d
    732c:	4915      	ldr	r1, [pc, #84]	; (7384 <_spi_m_dma_transfer+0x138>)
    732e:	4b16      	ldr	r3, [pc, #88]	; (7388 <_spi_m_dma_transfer+0x13c>)
    7330:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    7332:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7334:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7336:	f013 0f04 	tst.w	r3, #4
    733a:	d1cd      	bne.n	72d8 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    733c:	6853      	ldr	r3, [r2, #4]
    733e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    7342:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7344:	69d3      	ldr	r3, [r2, #28]
    7346:	f013 0f17 	tst.w	r3, #23
    734a:	d1fb      	bne.n	7344 <_spi_m_dma_transfer+0xf8>
    734c:	e7c4      	b.n	72d8 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    734e:	2000      	movs	r0, #0
    7350:	e7ea      	b.n	7328 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    7352:	f10a 010e 	add.w	r1, sl, #14
    7356:	4620      	mov	r0, r4
    7358:	4b0c      	ldr	r3, [pc, #48]	; (738c <_spi_m_dma_transfer+0x140>)
    735a:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    735c:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    735e:	3128      	adds	r1, #40	; 0x28
    7360:	4620      	mov	r0, r4
    7362:	4b0b      	ldr	r3, [pc, #44]	; (7390 <_spi_m_dma_transfer+0x144>)
    7364:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    7366:	2100      	movs	r1, #0
    7368:	4620      	mov	r0, r4
    736a:	4b0c      	ldr	r3, [pc, #48]	; (739c <_spi_m_dma_transfer+0x150>)
    736c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    736e:	4641      	mov	r1, r8
    7370:	4620      	mov	r0, r4
    7372:	4b08      	ldr	r3, [pc, #32]	; (7394 <_spi_m_dma_transfer+0x148>)
    7374:	4798      	blx	r3
    7376:	e7c3      	b.n	7300 <_spi_m_dma_transfer+0xb4>
    7378:	00006019 	.word	0x00006019
    737c:	00006249 	.word	0x00006249
    7380:	00006235 	.word	0x00006235
    7384:	0000c224 	.word	0x0000c224
    7388:	00005259 	.word	0x00005259
    738c:	00005a19 	.word	0x00005a19
    7390:	00005a09 	.word	0x00005a09
    7394:	00005a45 	.word	0x00005a45
    7398:	00005a9d 	.word	0x00005a9d
    739c:	00005a29 	.word	0x00005a29
    73a0:	0000c200 	.word	0x0000c200

000073a4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    73a4:	4b03      	ldr	r3, [pc, #12]	; (73b4 <_delay_init+0x10>)
    73a6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    73aa:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    73ac:	2205      	movs	r2, #5
    73ae:	601a      	str	r2, [r3, #0]
    73b0:	4770      	bx	lr
    73b2:	bf00      	nop
    73b4:	e000e010 	.word	0xe000e010

000073b8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    73b8:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    73ba:	b303      	cbz	r3, 73fe <_delay_cycles+0x46>
{
    73bc:	b430      	push	{r4, r5}
    73be:	1e5d      	subs	r5, r3, #1
    73c0:	b2ed      	uxtb	r5, r5
	while (n--) {
    73c2:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    73c4:	4a12      	ldr	r2, [pc, #72]	; (7410 <_delay_cycles+0x58>)
    73c6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    73ca:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    73cc:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    73ce:	6813      	ldr	r3, [r2, #0]
    73d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    73d4:	d0fb      	beq.n	73ce <_delay_cycles+0x16>
	while (n--) {
    73d6:	3801      	subs	r0, #1
    73d8:	b2c0      	uxtb	r0, r0
    73da:	28ff      	cmp	r0, #255	; 0xff
    73dc:	d1f5      	bne.n	73ca <_delay_cycles+0x12>
    73de:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    73e2:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    73e6:	3101      	adds	r1, #1
    73e8:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    73ea:	4b09      	ldr	r3, [pc, #36]	; (7410 <_delay_cycles+0x58>)
    73ec:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    73ee:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    73f0:	461a      	mov	r2, r3
    73f2:	6813      	ldr	r3, [r2, #0]
    73f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    73f8:	d0fb      	beq.n	73f2 <_delay_cycles+0x3a>
		;
}
    73fa:	bc30      	pop	{r4, r5}
    73fc:	4770      	bx	lr
	SysTick->LOAD = buf;
    73fe:	4b04      	ldr	r3, [pc, #16]	; (7410 <_delay_cycles+0x58>)
    7400:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    7402:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7404:	461a      	mov	r2, r3
    7406:	6813      	ldr	r3, [r2, #0]
    7408:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    740c:	d0fb      	beq.n	7406 <_delay_cycles+0x4e>
    740e:	4770      	bx	lr
    7410:	e000e010 	.word	0xe000e010

00007414 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7414:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7416:	6813      	ldr	r3, [r2, #0]
    7418:	f043 0302 	orr.w	r3, r3, #2
    741c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    741e:	6913      	ldr	r3, [r2, #16]
    7420:	f013 0f03 	tst.w	r3, #3
    7424:	d1fb      	bne.n	741e <_tc_timer_start+0xa>
}
    7426:	4770      	bx	lr

00007428 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7428:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    742a:	6813      	ldr	r3, [r2, #0]
    742c:	f023 0302 	bic.w	r3, r3, #2
    7430:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7432:	6913      	ldr	r3, [r2, #16]
    7434:	f013 0f03 	tst.w	r3, #3
    7438:	d1fb      	bne.n	7432 <_tc_timer_stop+0xa>
}
    743a:	4770      	bx	lr

0000743c <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    743c:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    743e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7440:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7444:	2a02      	cmp	r2, #2
    7446:	d00a      	beq.n	745e <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7448:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    744a:	f012 0f0c 	tst.w	r2, #12
    744e:	d10c      	bne.n	746a <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7450:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7452:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7454:	691a      	ldr	r2, [r3, #16]
    7456:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    745a:	d1fb      	bne.n	7454 <_tc_timer_set_period+0x18>
    745c:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    745e:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7460:	691a      	ldr	r2, [r3, #16]
    7462:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7466:	d1fb      	bne.n	7460 <_tc_timer_set_period+0x24>
    7468:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    746a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    746c:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7470:	2a01      	cmp	r2, #1
    7472:	d000      	beq.n	7476 <_tc_timer_set_period+0x3a>
    7474:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7476:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    7478:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    747a:	691a      	ldr	r2, [r3, #16]
    747c:	f012 0f20 	tst.w	r2, #32
    7480:	d1fb      	bne.n	747a <_tc_timer_set_period+0x3e>
    7482:	e7f7      	b.n	7474 <_tc_timer_set_period+0x38>

00007484 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    7484:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7486:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7488:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    748c:	2a02      	cmp	r2, #2
    748e:	d00a      	beq.n	74a6 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7490:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7492:	f012 0f0c 	tst.w	r2, #12
    7496:	d10c      	bne.n	74b2 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7498:	691a      	ldr	r2, [r3, #16]
    749a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    749e:	d1fb      	bne.n	7498 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    74a0:	8b98      	ldrh	r0, [r3, #28]
    74a2:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    74a4:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    74a6:	691a      	ldr	r2, [r3, #16]
    74a8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    74ac:	d1fb      	bne.n	74a6 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    74ae:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    74b0:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    74b2:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    74b4:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    74b8:	2a01      	cmp	r2, #1
    74ba:	d001      	beq.n	74c0 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    74bc:	2000      	movs	r0, #0
}
    74be:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    74c0:	691a      	ldr	r2, [r3, #16]
    74c2:	f012 0f20 	tst.w	r2, #32
    74c6:	d1fb      	bne.n	74c0 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    74c8:	7ed8      	ldrb	r0, [r3, #27]
    74ca:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    74cc:	4770      	bx	lr

000074ce <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    74ce:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    74d0:	6913      	ldr	r3, [r2, #16]
    74d2:	f013 0f03 	tst.w	r3, #3
    74d6:	d1fb      	bne.n	74d0 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    74d8:	6810      	ldr	r0, [r2, #0]
}
    74da:	f3c0 0040 	ubfx	r0, r0, #1, #1
    74de:	4770      	bx	lr

000074e0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    74e0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    74e2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    74e4:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    74e6:	f012 0f01 	tst.w	r2, #1
    74ea:	d100      	bne.n	74ee <tc_interrupt_handler+0xe>
    74ec:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    74ee:	2201      	movs	r2, #1
    74f0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    74f2:	6803      	ldr	r3, [r0, #0]
    74f4:	4798      	blx	r3
	}
}
    74f6:	e7f9      	b.n	74ec <tc_interrupt_handler+0xc>

000074f8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    74f8:	b570      	push	{r4, r5, r6, lr}
    74fa:	b088      	sub	sp, #32
    74fc:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    74fe:	466c      	mov	r4, sp
    7500:	4d19      	ldr	r5, [pc, #100]	; (7568 <get_tc_index+0x70>)
    7502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7506:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    750a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    750e:	9b00      	ldr	r3, [sp, #0]
    7510:	42b3      	cmp	r3, r6
    7512:	d00c      	beq.n	752e <get_tc_index+0x36>
    7514:	4630      	mov	r0, r6
    7516:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7518:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    751a:	f852 1b04 	ldr.w	r1, [r2], #4
    751e:	4281      	cmp	r1, r0
    7520:	d006      	beq.n	7530 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7522:	3301      	adds	r3, #1
    7524:	2b08      	cmp	r3, #8
    7526:	d1f8      	bne.n	751a <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7528:	2000      	movs	r0, #0
			return i;
    752a:	b240      	sxtb	r0, r0
    752c:	e013      	b.n	7556 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    752e:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    7530:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7534:	d015      	beq.n	7562 <get_tc_index+0x6a>
    7536:	2b01      	cmp	r3, #1
    7538:	d00f      	beq.n	755a <get_tc_index+0x62>
    753a:	2b02      	cmp	r3, #2
    753c:	d00f      	beq.n	755e <get_tc_index+0x66>
    753e:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7540:	bf08      	it	eq
    7542:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    7544:	d0f1      	beq.n	752a <get_tc_index+0x32>
	ASSERT(false);
    7546:	f240 1267 	movw	r2, #359	; 0x167
    754a:	4908      	ldr	r1, [pc, #32]	; (756c <get_tc_index+0x74>)
    754c:	2000      	movs	r0, #0
    754e:	4b08      	ldr	r3, [pc, #32]	; (7570 <get_tc_index+0x78>)
    7550:	4798      	blx	r3
	return -1;
    7552:	f04f 30ff 	mov.w	r0, #4294967295
}
    7556:	b008      	add	sp, #32
    7558:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    755a:	2001      	movs	r0, #1
    755c:	e7e5      	b.n	752a <get_tc_index+0x32>
    755e:	2002      	movs	r0, #2
    7560:	e7e3      	b.n	752a <get_tc_index+0x32>
    7562:	2000      	movs	r0, #0
    7564:	e7e1      	b.n	752a <get_tc_index+0x32>
    7566:	bf00      	nop
    7568:	0000c240 	.word	0x0000c240
    756c:	0000c2b0 	.word	0x0000c2b0
    7570:	00005259 	.word	0x00005259

00007574 <_tc_timer_init>:
{
    7574:	b570      	push	{r4, r5, r6, lr}
    7576:	4606      	mov	r6, r0
    7578:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    757a:	4608      	mov	r0, r1
    757c:	4b71      	ldr	r3, [pc, #452]	; (7744 <_tc_timer_init+0x1d0>)
    757e:	4798      	blx	r3
    7580:	4605      	mov	r5, r0
	device->hw = hw;
    7582:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7584:	22a0      	movs	r2, #160	; 0xa0
    7586:	4970      	ldr	r1, [pc, #448]	; (7748 <_tc_timer_init+0x1d4>)
    7588:	2001      	movs	r0, #1
    758a:	4b70      	ldr	r3, [pc, #448]	; (774c <_tc_timer_init+0x1d8>)
    758c:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    758e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7590:	f013 0f01 	tst.w	r3, #1
    7594:	d119      	bne.n	75ca <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7596:	6923      	ldr	r3, [r4, #16]
    7598:	f013 0f03 	tst.w	r3, #3
    759c:	d1fb      	bne.n	7596 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    759e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    75a0:	f013 0f02 	tst.w	r3, #2
    75a4:	d00b      	beq.n	75be <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    75a6:	6823      	ldr	r3, [r4, #0]
    75a8:	f023 0302 	bic.w	r3, r3, #2
    75ac:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    75ae:	6923      	ldr	r3, [r4, #16]
    75b0:	f013 0f03 	tst.w	r3, #3
    75b4:	d1fb      	bne.n	75ae <_tc_timer_init+0x3a>
    75b6:	6923      	ldr	r3, [r4, #16]
    75b8:	f013 0f02 	tst.w	r3, #2
    75bc:	d1fb      	bne.n	75b6 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    75be:	2301      	movs	r3, #1
    75c0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    75c2:	6923      	ldr	r3, [r4, #16]
    75c4:	f013 0f03 	tst.w	r3, #3
    75c8:	d1fb      	bne.n	75c2 <_tc_timer_init+0x4e>
    75ca:	6923      	ldr	r3, [r4, #16]
    75cc:	f013 0f01 	tst.w	r3, #1
    75d0:	d1fb      	bne.n	75ca <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    75d2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    75d6:	4a5e      	ldr	r2, [pc, #376]	; (7750 <_tc_timer_init+0x1dc>)
    75d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    75dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    75de:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    75e0:	6923      	ldr	r3, [r4, #16]
    75e2:	f013 0f03 	tst.w	r3, #3
    75e6:	d1fb      	bne.n	75e0 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    75e8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    75ec:	4958      	ldr	r1, [pc, #352]	; (7750 <_tc_timer_init+0x1dc>)
    75ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    75f2:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    75f6:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    75f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    75fa:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    75fc:	2301      	movs	r3, #1
    75fe:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7600:	f002 020c 	and.w	r2, r2, #12
    7604:	2a08      	cmp	r2, #8
    7606:	d056      	beq.n	76b6 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7608:	2a00      	cmp	r2, #0
    760a:	d16b      	bne.n	76e4 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    760c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7610:	4a4f      	ldr	r2, [pc, #316]	; (7750 <_tc_timer_init+0x1dc>)
    7612:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7616:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7618:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    761a:	6923      	ldr	r3, [r4, #16]
    761c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7620:	d1fb      	bne.n	761a <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7622:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7626:	4a4a      	ldr	r2, [pc, #296]	; (7750 <_tc_timer_init+0x1dc>)
    7628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    762c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    762e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7630:	6923      	ldr	r3, [r4, #16]
    7632:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7636:	d1fb      	bne.n	7630 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7638:	2301      	movs	r3, #1
    763a:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    763c:	4b45      	ldr	r3, [pc, #276]	; (7754 <_tc_timer_init+0x1e0>)
    763e:	429c      	cmp	r4, r3
    7640:	d077      	beq.n	7732 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    7642:	4b45      	ldr	r3, [pc, #276]	; (7758 <_tc_timer_init+0x1e4>)
    7644:	429c      	cmp	r4, r3
    7646:	d077      	beq.n	7738 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    7648:	4b44      	ldr	r3, [pc, #272]	; (775c <_tc_timer_init+0x1e8>)
    764a:	429c      	cmp	r4, r3
    764c:	d077      	beq.n	773e <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    764e:	4b44      	ldr	r3, [pc, #272]	; (7760 <_tc_timer_init+0x1ec>)
    7650:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    7652:	bf04      	itt	eq
    7654:	4b43      	ldreq	r3, [pc, #268]	; (7764 <_tc_timer_init+0x1f0>)
    7656:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    7658:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    765c:	4a3c      	ldr	r2, [pc, #240]	; (7750 <_tc_timer_init+0x1dc>)
    765e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7662:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7666:	2b00      	cmp	r3, #0
    7668:	db23      	blt.n	76b2 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    766a:	095a      	lsrs	r2, r3, #5
    766c:	f003 031f 	and.w	r3, r3, #31
    7670:	2101      	movs	r1, #1
    7672:	fa01 f303 	lsl.w	r3, r1, r3
    7676:	3220      	adds	r2, #32
    7678:	493b      	ldr	r1, [pc, #236]	; (7768 <_tc_timer_init+0x1f4>)
    767a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    767e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7682:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7686:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    768a:	4b31      	ldr	r3, [pc, #196]	; (7750 <_tc_timer_init+0x1dc>)
    768c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7690:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7694:	2b00      	cmp	r3, #0
    7696:	db0c      	blt.n	76b2 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7698:	0959      	lsrs	r1, r3, #5
    769a:	f003 031f 	and.w	r3, r3, #31
    769e:	2201      	movs	r2, #1
    76a0:	fa02 f303 	lsl.w	r3, r2, r3
    76a4:	4a30      	ldr	r2, [pc, #192]	; (7768 <_tc_timer_init+0x1f4>)
    76a6:	f101 0060 	add.w	r0, r1, #96	; 0x60
    76aa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    76b2:	2000      	movs	r0, #0
    76b4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    76b6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    76ba:	4a25      	ldr	r2, [pc, #148]	; (7750 <_tc_timer_init+0x1dc>)
    76bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    76c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    76c2:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76c4:	6923      	ldr	r3, [r4, #16]
    76c6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    76ca:	d1fb      	bne.n	76c4 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    76cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    76d0:	4a1f      	ldr	r2, [pc, #124]	; (7750 <_tc_timer_init+0x1dc>)
    76d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    76d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    76d8:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76da:	6923      	ldr	r3, [r4, #16]
    76dc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    76e0:	d1fb      	bne.n	76da <_tc_timer_init+0x166>
    76e2:	e7a9      	b.n	7638 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    76e4:	2a04      	cmp	r2, #4
    76e6:	d1a7      	bne.n	7638 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    76e8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    76ec:	4a18      	ldr	r2, [pc, #96]	; (7750 <_tc_timer_init+0x1dc>)
    76ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    76f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    76f6:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76f8:	6923      	ldr	r3, [r4, #16]
    76fa:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    76fe:	d1fb      	bne.n	76f8 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7700:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7704:	4a12      	ldr	r2, [pc, #72]	; (7750 <_tc_timer_init+0x1dc>)
    7706:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    770a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    770e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7710:	6923      	ldr	r3, [r4, #16]
    7712:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7716:	d1fb      	bne.n	7710 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7718:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    771c:	4a0c      	ldr	r2, [pc, #48]	; (7750 <_tc_timer_init+0x1dc>)
    771e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7722:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    7726:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7728:	6923      	ldr	r3, [r4, #16]
    772a:	f013 0f20 	tst.w	r3, #32
    772e:	d1fb      	bne.n	7728 <_tc_timer_init+0x1b4>
    7730:	e782      	b.n	7638 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    7732:	4b0c      	ldr	r3, [pc, #48]	; (7764 <_tc_timer_init+0x1f0>)
    7734:	601e      	str	r6, [r3, #0]
    7736:	e78a      	b.n	764e <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    7738:	4b0a      	ldr	r3, [pc, #40]	; (7764 <_tc_timer_init+0x1f0>)
    773a:	605e      	str	r6, [r3, #4]
    773c:	e78c      	b.n	7658 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    773e:	4b09      	ldr	r3, [pc, #36]	; (7764 <_tc_timer_init+0x1f0>)
    7740:	609e      	str	r6, [r3, #8]
    7742:	e789      	b.n	7658 <_tc_timer_init+0xe4>
    7744:	000074f9 	.word	0x000074f9
    7748:	0000c2b0 	.word	0x0000c2b0
    774c:	00005259 	.word	0x00005259
    7750:	0000c240 	.word	0x0000c240
    7754:	40003800 	.word	0x40003800
    7758:	40003c00 	.word	0x40003c00
    775c:	4101a000 	.word	0x4101a000
    7760:	4101c000 	.word	0x4101c000
    7764:	200009ac 	.word	0x200009ac
    7768:	e000e100 	.word	0xe000e100

0000776c <_tc_timer_deinit>:
{
    776c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    776e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    7770:	4620      	mov	r0, r4
    7772:	4b18      	ldr	r3, [pc, #96]	; (77d4 <_tc_timer_deinit+0x68>)
    7774:	4798      	blx	r3
    7776:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7778:	22cd      	movs	r2, #205	; 0xcd
    777a:	4917      	ldr	r1, [pc, #92]	; (77d8 <_tc_timer_deinit+0x6c>)
    777c:	2001      	movs	r0, #1
    777e:	4b17      	ldr	r3, [pc, #92]	; (77dc <_tc_timer_deinit+0x70>)
    7780:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7782:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7786:	4b16      	ldr	r3, [pc, #88]	; (77e0 <_tc_timer_deinit+0x74>)
    7788:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    778c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7790:	2b00      	cmp	r3, #0
    7792:	db0d      	blt.n	77b0 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7794:	095a      	lsrs	r2, r3, #5
    7796:	f003 031f 	and.w	r3, r3, #31
    779a:	2101      	movs	r1, #1
    779c:	fa01 f303 	lsl.w	r3, r1, r3
    77a0:	3220      	adds	r2, #32
    77a2:	4910      	ldr	r1, [pc, #64]	; (77e4 <_tc_timer_deinit+0x78>)
    77a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    77a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    77ac:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    77b0:	6823      	ldr	r3, [r4, #0]
    77b2:	f023 0302 	bic.w	r3, r3, #2
    77b6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    77b8:	6923      	ldr	r3, [r4, #16]
    77ba:	f013 0f03 	tst.w	r3, #3
    77be:	d1fb      	bne.n	77b8 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    77c0:	6823      	ldr	r3, [r4, #0]
    77c2:	f043 0301 	orr.w	r3, r3, #1
    77c6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    77c8:	6923      	ldr	r3, [r4, #16]
    77ca:	f013 0f01 	tst.w	r3, #1
    77ce:	d1fb      	bne.n	77c8 <_tc_timer_deinit+0x5c>
}
    77d0:	bd38      	pop	{r3, r4, r5, pc}
    77d2:	bf00      	nop
    77d4:	000074f9 	.word	0x000074f9
    77d8:	0000c2b0 	.word	0x0000c2b0
    77dc:	00005259 	.word	0x00005259
    77e0:	0000c240 	.word	0x0000c240
    77e4:	e000e100 	.word	0xe000e100

000077e8 <_tc_timer_set_irq>:
{
    77e8:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    77ea:	68c0      	ldr	r0, [r0, #12]
    77ec:	4b09      	ldr	r3, [pc, #36]	; (7814 <_tc_timer_set_irq+0x2c>)
    77ee:	4798      	blx	r3
    77f0:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    77f2:	f44f 7291 	mov.w	r2, #290	; 0x122
    77f6:	4908      	ldr	r1, [pc, #32]	; (7818 <_tc_timer_set_irq+0x30>)
    77f8:	2001      	movs	r0, #1
    77fa:	4b08      	ldr	r3, [pc, #32]	; (781c <_tc_timer_set_irq+0x34>)
    77fc:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    77fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    7802:	4b07      	ldr	r3, [pc, #28]	; (7820 <_tc_timer_set_irq+0x38>)
    7804:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    7808:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    780c:	4b05      	ldr	r3, [pc, #20]	; (7824 <_tc_timer_set_irq+0x3c>)
    780e:	4798      	blx	r3
    7810:	bd10      	pop	{r4, pc}
    7812:	bf00      	nop
    7814:	000074f9 	.word	0x000074f9
    7818:	0000c2b0 	.word	0x0000c2b0
    781c:	00005259 	.word	0x00005259
    7820:	0000c240 	.word	0x0000c240
    7824:	000057d5 	.word	0x000057d5

00007828 <_tc_get_timer>:
}
    7828:	4800      	ldr	r0, [pc, #0]	; (782c <_tc_get_timer+0x4>)
    782a:	4770      	bx	lr
    782c:	20000378 	.word	0x20000378

00007830 <TC0_Handler>:
{
    7830:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    7832:	4b02      	ldr	r3, [pc, #8]	; (783c <TC0_Handler+0xc>)
    7834:	6818      	ldr	r0, [r3, #0]
    7836:	4b02      	ldr	r3, [pc, #8]	; (7840 <TC0_Handler+0x10>)
    7838:	4798      	blx	r3
    783a:	bd08      	pop	{r3, pc}
    783c:	200009ac 	.word	0x200009ac
    7840:	000074e1 	.word	0x000074e1

00007844 <TC1_Handler>:
{
    7844:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    7846:	4b02      	ldr	r3, [pc, #8]	; (7850 <TC1_Handler+0xc>)
    7848:	6858      	ldr	r0, [r3, #4]
    784a:	4b02      	ldr	r3, [pc, #8]	; (7854 <TC1_Handler+0x10>)
    784c:	4798      	blx	r3
    784e:	bd08      	pop	{r3, pc}
    7850:	200009ac 	.word	0x200009ac
    7854:	000074e1 	.word	0x000074e1

00007858 <TC2_Handler>:
{
    7858:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    785a:	4b02      	ldr	r3, [pc, #8]	; (7864 <TC2_Handler+0xc>)
    785c:	6898      	ldr	r0, [r3, #8]
    785e:	4b02      	ldr	r3, [pc, #8]	; (7868 <TC2_Handler+0x10>)
    7860:	4798      	blx	r3
    7862:	bd08      	pop	{r3, pc}
    7864:	200009ac 	.word	0x200009ac
    7868:	000074e1 	.word	0x000074e1

0000786c <TC3_Handler>:
{
    786c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    786e:	4b02      	ldr	r3, [pc, #8]	; (7878 <TC3_Handler+0xc>)
    7870:	68d8      	ldr	r0, [r3, #12]
    7872:	4b02      	ldr	r3, [pc, #8]	; (787c <TC3_Handler+0x10>)
    7874:	4798      	blx	r3
    7876:	bd08      	pop	{r3, pc}
    7878:	200009ac 	.word	0x200009ac
    787c:	000074e1 	.word	0x000074e1

00007880 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    7880:	2000      	movs	r0, #0
    7882:	4770      	bx	lr

00007884 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    7884:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    7886:	7c83      	ldrb	r3, [r0, #18]
    7888:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    788c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    788e:	f002 0107 	and.w	r1, r2, #7
    7892:	2901      	cmp	r1, #1
    7894:	d00b      	beq.n	78ae <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7896:	015a      	lsls	r2, r3, #5
    7898:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    789c:	2110      	movs	r1, #16
    789e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    78a2:	015b      	lsls	r3, r3, #5
    78a4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    78a8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    78ac:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    78ae:	f012 0f40 	tst.w	r2, #64	; 0x40
    78b2:	d00c      	beq.n	78ce <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    78b4:	7cc2      	ldrb	r2, [r0, #19]
    78b6:	f36f 1286 	bfc	r2, #6, #1
    78ba:	74c2      	strb	r2, [r0, #19]
    78bc:	015a      	lsls	r2, r3, #5
    78be:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    78c2:	2180      	movs	r1, #128	; 0x80
    78c4:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    78c8:	2140      	movs	r1, #64	; 0x40
    78ca:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    78ce:	7cc2      	ldrb	r2, [r0, #19]
    78d0:	f36f 02c3 	bfc	r2, #3, #1
    78d4:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    78d6:	490a      	ldr	r1, [pc, #40]	; (7900 <_usb_d_dev_handle_setup+0x7c>)
    78d8:	015a      	lsls	r2, r3, #5
    78da:	188c      	adds	r4, r1, r2
    78dc:	2500      	movs	r5, #0
    78de:	72a5      	strb	r5, [r4, #10]
    78e0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    78e2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    78e6:	246f      	movs	r4, #111	; 0x6f
    78e8:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    78ec:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    78f0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    78f4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    78f8:	7c80      	ldrb	r0, [r0, #18]
    78fa:	4798      	blx	r3
    78fc:	bd38      	pop	{r3, r4, r5, pc}
    78fe:	bf00      	nop
    7900:	200009bc 	.word	0x200009bc

00007904 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    7904:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    7906:	2320      	movs	r3, #32
    7908:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    790c:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    790e:	7c83      	ldrb	r3, [r0, #18]
    7910:	f003 030f 	and.w	r3, r3, #15
    7914:	015b      	lsls	r3, r3, #5
    7916:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    791a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    791e:	4b04      	ldr	r3, [pc, #16]	; (7930 <_usb_d_dev_handle_stall+0x2c>)
    7920:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    7924:	6882      	ldr	r2, [r0, #8]
    7926:	2101      	movs	r1, #1
    7928:	7c80      	ldrb	r0, [r0, #18]
    792a:	4798      	blx	r3
    792c:	bd08      	pop	{r3, pc}
    792e:	bf00      	nop
    7930:	200009bc 	.word	0x200009bc

00007934 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    7934:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    7936:	7c84      	ldrb	r4, [r0, #18]
    7938:	2cff      	cmp	r4, #255	; 0xff
    793a:	d003      	beq.n	7944 <_usb_d_dev_trans_done+0x10>
    793c:	7cc3      	ldrb	r3, [r0, #19]
    793e:	f013 0f40 	tst.w	r3, #64	; 0x40
    7942:	d100      	bne.n	7946 <_usb_d_dev_trans_done+0x12>
    7944:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    7946:	7cc2      	ldrb	r2, [r0, #19]
    7948:	f36f 1286 	bfc	r2, #6, #1
    794c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    794e:	4a03      	ldr	r2, [pc, #12]	; (795c <_usb_d_dev_trans_done+0x28>)
    7950:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    7954:	6882      	ldr	r2, [r0, #8]
    7956:	4620      	mov	r0, r4
    7958:	47a8      	blx	r5
    795a:	e7f3      	b.n	7944 <_usb_d_dev_trans_done+0x10>
    795c:	200009bc 	.word	0x200009bc

00007960 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    7960:	b530      	push	{r4, r5, lr}
    7962:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7964:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    7966:	2425      	movs	r4, #37	; 0x25
    7968:	f88d 4004 	strb.w	r4, [sp, #4]
    796c:	244a      	movs	r4, #74	; 0x4a
    796e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    7972:	2bff      	cmp	r3, #255	; 0xff
    7974:	d01e      	beq.n	79b4 <_usb_d_dev_trans_stop+0x54>
    7976:	7cc4      	ldrb	r4, [r0, #19]
    7978:	f014 0f40 	tst.w	r4, #64	; 0x40
    797c:	d01a      	beq.n	79b4 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    797e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    7982:	b1c9      	cbz	r1, 79b8 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7984:	0163      	lsls	r3, r4, #5
    7986:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    798a:	2580      	movs	r5, #128	; 0x80
    798c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    7990:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    7992:	a902      	add	r1, sp, #8
    7994:	440b      	add	r3, r1
    7996:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    799a:	0163      	lsls	r3, r4, #5
    799c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    79a0:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    79a4:	0163      	lsls	r3, r4, #5
    79a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    79aa:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    79ae:	4611      	mov	r1, r2
    79b0:	4b05      	ldr	r3, [pc, #20]	; (79c8 <_usb_d_dev_trans_stop+0x68>)
    79b2:	4798      	blx	r3
}
    79b4:	b003      	add	sp, #12
    79b6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    79b8:	0163      	lsls	r3, r4, #5
    79ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    79be:	2540      	movs	r5, #64	; 0x40
    79c0:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    79c4:	e7e4      	b.n	7990 <_usb_d_dev_trans_stop+0x30>
    79c6:	bf00      	nop
    79c8:	00007935 	.word	0x00007935

000079cc <_usb_d_dev_handle_trfail>:
{
    79cc:	b530      	push	{r4, r5, lr}
    79ce:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    79d0:	7c83      	ldrb	r3, [r0, #18]
    79d2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    79d6:	2204      	movs	r2, #4
    79d8:	f88d 2004 	strb.w	r2, [sp, #4]
    79dc:	2208      	movs	r2, #8
    79de:	f88d 2005 	strb.w	r2, [sp, #5]
    79e2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    79e4:	460c      	mov	r4, r1
    79e6:	b391      	cbz	r1, 7a4e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    79e8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    79ec:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    79f0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    79f4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    79f8:	4a32      	ldr	r2, [pc, #200]	; (7ac4 <_usb_d_dev_handle_trfail+0xf8>)
    79fa:	440a      	add	r2, r1
    79fc:	7a91      	ldrb	r1, [r2, #10]
    79fe:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    7a00:	2d02      	cmp	r5, #2
    7a02:	d02c      	beq.n	7a5e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    7a04:	f011 0f02 	tst.w	r1, #2
    7a08:	d045      	beq.n	7a96 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7a0a:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    7a0c:	7a91      	ldrb	r1, [r2, #10]
    7a0e:	f36f 0141 	bfc	r1, #1, #1
    7a12:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7a14:	aa02      	add	r2, sp, #8
    7a16:	4422      	add	r2, r4
    7a18:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7a1c:	015a      	lsls	r2, r3, #5
    7a1e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7a22:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7a26:	015b      	lsls	r3, r3, #5
    7a28:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7a2c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    7a30:	f005 0307 	and.w	r3, r5, #7
    7a34:	2b01      	cmp	r3, #1
    7a36:	d143      	bne.n	7ac0 <_usb_d_dev_handle_trfail+0xf4>
    7a38:	7cc3      	ldrb	r3, [r0, #19]
    7a3a:	f013 0f40 	tst.w	r3, #64	; 0x40
    7a3e:	d03f      	beq.n	7ac0 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    7a40:	09d9      	lsrs	r1, r3, #7
    7a42:	428c      	cmp	r4, r1
    7a44:	d03c      	beq.n	7ac0 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    7a46:	2200      	movs	r2, #0
    7a48:	4b1f      	ldr	r3, [pc, #124]	; (7ac8 <_usb_d_dev_handle_trfail+0xfc>)
    7a4a:	4798      	blx	r3
    7a4c:	e038      	b.n	7ac0 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7a4e:	0159      	lsls	r1, r3, #5
    7a50:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    7a54:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7a58:	f005 0507 	and.w	r5, r5, #7
    7a5c:	e7ca      	b.n	79f4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    7a5e:	f011 0f01 	tst.w	r1, #1
    7a62:	d0cf      	beq.n	7a04 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    7a64:	7a91      	ldrb	r1, [r2, #10]
    7a66:	f36f 0100 	bfc	r1, #0, #1
    7a6a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7a6c:	aa02      	add	r2, sp, #8
    7a6e:	4422      	add	r2, r4
    7a70:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7a74:	015a      	lsls	r2, r3, #5
    7a76:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7a7a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7a7e:	015b      	lsls	r3, r3, #5
    7a80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7a84:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    7a88:	2204      	movs	r2, #4
    7a8a:	1c21      	adds	r1, r4, #0
    7a8c:	bf18      	it	ne
    7a8e:	2101      	movne	r1, #1
    7a90:	4b0d      	ldr	r3, [pc, #52]	; (7ac8 <_usb_d_dev_handle_trfail+0xfc>)
    7a92:	4798      	blx	r3
    7a94:	e014      	b.n	7ac0 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    7a96:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    7a9a:	4a0a      	ldr	r2, [pc, #40]	; (7ac4 <_usb_d_dev_handle_trfail+0xf8>)
    7a9c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    7aa0:	2100      	movs	r1, #0
    7aa2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7aa4:	aa02      	add	r2, sp, #8
    7aa6:	4414      	add	r4, r2
    7aa8:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7aac:	015a      	lsls	r2, r3, #5
    7aae:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7ab2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7ab6:	015b      	lsls	r3, r3, #5
    7ab8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7abc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    7ac0:	b003      	add	sp, #12
    7ac2:	bd30      	pop	{r4, r5, pc}
    7ac4:	200009bc 	.word	0x200009bc
    7ac8:	00007961 	.word	0x00007961

00007acc <_usb_d_dev_reset_epts>:
{
    7acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ad0:	4d0c      	ldr	r5, [pc, #48]	; (7b04 <_usb_d_dev_reset_epts+0x38>)
    7ad2:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    7ad6:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    7ada:	f04f 0803 	mov.w	r8, #3
    7ade:	4f0a      	ldr	r7, [pc, #40]	; (7b08 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    7ae0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    7ae2:	4641      	mov	r1, r8
    7ae4:	4620      	mov	r0, r4
    7ae6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    7ae8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    7aea:	2300      	movs	r3, #0
    7aec:	74e3      	strb	r3, [r4, #19]
    7aee:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    7af0:	42ac      	cmp	r4, r5
    7af2:	d1f6      	bne.n	7ae2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    7af4:	22c0      	movs	r2, #192	; 0xc0
    7af6:	4619      	mov	r1, r3
    7af8:	4802      	ldr	r0, [pc, #8]	; (7b04 <_usb_d_dev_reset_epts+0x38>)
    7afa:	4b04      	ldr	r3, [pc, #16]	; (7b0c <_usb_d_dev_reset_epts+0x40>)
    7afc:	4798      	blx	r3
    7afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b02:	bf00      	nop
    7b04:	200009bc 	.word	0x200009bc
    7b08:	00007935 	.word	0x00007935
    7b0c:	0000b2d7 	.word	0x0000b2d7

00007b10 <_usb_d_dev_in_next>:
{
    7b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b14:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    7b16:	7c84      	ldrb	r4, [r0, #18]
    7b18:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    7b1c:	4688      	mov	r8, r1
    7b1e:	2900      	cmp	r1, #0
    7b20:	f000 80a0 	beq.w	7c64 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    7b24:	4b58      	ldr	r3, [pc, #352]	; (7c88 <_usb_d_dev_in_next+0x178>)
    7b26:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    7b2a:	6958      	ldr	r0, [r3, #20]
    7b2c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7b30:	8a2b      	ldrh	r3, [r5, #16]
    7b32:	f240 32ff 	movw	r2, #1023	; 0x3ff
    7b36:	4293      	cmp	r3, r2
    7b38:	f000 808e 	beq.w	7c58 <_usb_d_dev_in_next+0x148>
    7b3c:	3b01      	subs	r3, #1
    7b3e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    7b40:	7cef      	ldrb	r7, [r5, #19]
    7b42:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    7b46:	f1b8 0f00 	cmp.w	r8, #0
    7b4a:	d005      	beq.n	7b58 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7b4c:	0162      	lsls	r2, r4, #5
    7b4e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7b52:	2302      	movs	r3, #2
    7b54:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    7b58:	68a9      	ldr	r1, [r5, #8]
    7b5a:	eb0e 0301 	add.w	r3, lr, r1
    7b5e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    7b60:	686e      	ldr	r6, [r5, #4]
    7b62:	42b3      	cmp	r3, r6
    7b64:	d23f      	bcs.n	7be6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    7b66:	1af6      	subs	r6, r6, r3
    7b68:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    7b6a:	7cea      	ldrb	r2, [r5, #19]
    7b6c:	f012 0f20 	tst.w	r2, #32
    7b70:	d02d      	beq.n	7bce <_usb_d_dev_in_next+0xbe>
    7b72:	8a2a      	ldrh	r2, [r5, #16]
    7b74:	4296      	cmp	r6, r2
    7b76:	bf28      	it	cs
    7b78:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    7b7a:	6829      	ldr	r1, [r5, #0]
    7b7c:	4632      	mov	r2, r6
    7b7e:	4419      	add	r1, r3
    7b80:	68e8      	ldr	r0, [r5, #12]
    7b82:	4b42      	ldr	r3, [pc, #264]	; (7c8c <_usb_d_dev_in_next+0x17c>)
    7b84:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    7b86:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    7b88:	4b3f      	ldr	r3, [pc, #252]	; (7c88 <_usb_d_dev_in_next+0x178>)
    7b8a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7b8e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    7b90:	4b3d      	ldr	r3, [pc, #244]	; (7c88 <_usb_d_dev_in_next+0x178>)
    7b92:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7b96:	695a      	ldr	r2, [r3, #20]
    7b98:	f366 020d 	bfi	r2, r6, #0, #14
    7b9c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    7b9e:	695a      	ldr	r2, [r3, #20]
    7ba0:	f36f 329b 	bfc	r2, #14, #14
    7ba4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    7ba6:	f1b8 0f00 	cmp.w	r8, #0
    7baa:	d108      	bne.n	7bbe <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    7bac:	2f01      	cmp	r7, #1
    7bae:	bf0c      	ite	eq
    7bb0:	224e      	moveq	r2, #78	; 0x4e
    7bb2:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7bb4:	0163      	lsls	r3, r4, #5
    7bb6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7bba:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7bbe:	0164      	lsls	r4, r4, #5
    7bc0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    7bc4:	2380      	movs	r3, #128	; 0x80
    7bc6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    7bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bce:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    7bd2:	bf28      	it	cs
    7bd4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    7bd8:	6829      	ldr	r1, [r5, #0]
    7bda:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    7bdc:	4a2a      	ldr	r2, [pc, #168]	; (7c88 <_usb_d_dev_in_next+0x178>)
    7bde:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    7be2:	6113      	str	r3, [r2, #16]
    7be4:	e7d4      	b.n	7b90 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    7be6:	7ceb      	ldrb	r3, [r5, #19]
    7be8:	f013 0f10 	tst.w	r3, #16
    7bec:	d00f      	beq.n	7c0e <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    7bee:	7ceb      	ldrb	r3, [r5, #19]
    7bf0:	f36f 1304 	bfc	r3, #4, #1
    7bf4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    7bf6:	4b24      	ldr	r3, [pc, #144]	; (7c88 <_usb_d_dev_in_next+0x178>)
    7bf8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7bfc:	695a      	ldr	r2, [r3, #20]
    7bfe:	f36f 020d 	bfc	r2, #0, #14
    7c02:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    7c04:	695a      	ldr	r2, [r3, #20]
    7c06:	f36f 329b 	bfc	r2, #14, #14
    7c0a:	615a      	str	r2, [r3, #20]
    7c0c:	e7cb      	b.n	7ba6 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    7c0e:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7c10:	ea4f 1444 	mov.w	r4, r4, lsl #5
    7c14:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    7c18:	bf0c      	ite	eq
    7c1a:	234b      	moveq	r3, #75	; 0x4b
    7c1c:	234a      	movne	r3, #74	; 0x4a
    7c1e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    7c22:	8a2a      	ldrh	r2, [r5, #16]
    7c24:	ea00 030e 	and.w	r3, r0, lr
    7c28:	429a      	cmp	r2, r3
    7c2a:	d005      	beq.n	7c38 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    7c2c:	2100      	movs	r1, #0
    7c2e:	4628      	mov	r0, r5
    7c30:	4b17      	ldr	r3, [pc, #92]	; (7c90 <_usb_d_dev_in_next+0x180>)
    7c32:	4798      	blx	r3
	return;
    7c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    7c38:	7ceb      	ldrb	r3, [r5, #19]
    7c3a:	f36f 1386 	bfc	r3, #6, #1
    7c3e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    7c40:	4b11      	ldr	r3, [pc, #68]	; (7c88 <_usb_d_dev_in_next+0x178>)
    7c42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    7c46:	68a9      	ldr	r1, [r5, #8]
    7c48:	7ca8      	ldrb	r0, [r5, #18]
    7c4a:	4798      	blx	r3
    7c4c:	b9d0      	cbnz	r0, 7c84 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    7c4e:	7ceb      	ldrb	r3, [r5, #19]
    7c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7c54:	74eb      	strb	r3, [r5, #19]
    7c56:	e7e9      	b.n	7c2c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    7c58:	7cef      	ldrb	r7, [r5, #19]
    7c5a:	f007 0707 	and.w	r7, r7, #7
    7c5e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    7c62:	e773      	b.n	7b4c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7c64:	8a03      	ldrh	r3, [r0, #16]
    7c66:	f240 32ff 	movw	r2, #1023	; 0x3ff
    7c6a:	4293      	cmp	r3, r2
    7c6c:	d107      	bne.n	7c7e <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    7c6e:	7cef      	ldrb	r7, [r5, #19]
    7c70:	f007 0707 	and.w	r7, r7, #7
    7c74:	f04f 0e00 	mov.w	lr, #0
    7c78:	f240 30ff 	movw	r0, #1023	; 0x3ff
    7c7c:	e76c      	b.n	7b58 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7c7e:	f04f 0e00 	mov.w	lr, #0
    7c82:	e75b      	b.n	7b3c <_usb_d_dev_in_next+0x2c>
    7c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c88:	200009bc 	.word	0x200009bc
    7c8c:	0000b2c1 	.word	0x0000b2c1
    7c90:	00007935 	.word	0x00007935

00007c94 <_usb_d_dev_out_next>:
{
    7c94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c98:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    7c9a:	7c85      	ldrb	r5, [r0, #18]
    7c9c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    7ca0:	4689      	mov	r9, r1
    7ca2:	2900      	cmp	r1, #0
    7ca4:	d056      	beq.n	7d54 <_usb_d_dev_out_next+0xc0>
    7ca6:	4b74      	ldr	r3, [pc, #464]	; (7e78 <_usb_d_dev_out_next+0x1e4>)
    7ca8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    7cac:	685a      	ldr	r2, [r3, #4]
    7cae:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    7cb2:	685f      	ldr	r7, [r3, #4]
    7cb4:	f3c7 070d 	ubfx	r7, r7, #0, #14
    7cb8:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7cba:	8a06      	ldrh	r6, [r0, #16]
    7cbc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    7cc0:	429e      	cmp	r6, r3
    7cc2:	f000 80ba 	beq.w	7e3a <_usb_d_dev_out_next+0x1a6>
    7cc6:	3e01      	subs	r6, #1
    7cc8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    7cca:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7cce:	f894 8013 	ldrb.w	r8, [r4, #19]
    7cd2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    7cd6:	f1b9 0f00 	cmp.w	r9, #0
    7cda:	d005      	beq.n	7ce8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7cdc:	016b      	lsls	r3, r5, #5
    7cde:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7ce2:	2201      	movs	r2, #1
    7ce4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    7ce8:	7ce3      	ldrb	r3, [r4, #19]
    7cea:	f013 0f20 	tst.w	r3, #32
    7cee:	d00d      	beq.n	7d0c <_usb_d_dev_out_next+0x78>
    7cf0:	6862      	ldr	r2, [r4, #4]
    7cf2:	2a00      	cmp	r2, #0
    7cf4:	d037      	beq.n	7d66 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    7cf6:	68a0      	ldr	r0, [r4, #8]
    7cf8:	1a12      	subs	r2, r2, r0
    7cfa:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    7cfc:	6823      	ldr	r3, [r4, #0]
    7cfe:	42ba      	cmp	r2, r7
    7d00:	bf28      	it	cs
    7d02:	463a      	movcs	r2, r7
    7d04:	68e1      	ldr	r1, [r4, #12]
    7d06:	4418      	add	r0, r3
    7d08:	4b5c      	ldr	r3, [pc, #368]	; (7e7c <_usb_d_dev_out_next+0x1e8>)
    7d0a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    7d0c:	6863      	ldr	r3, [r4, #4]
    7d0e:	b353      	cbz	r3, 7d66 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    7d10:	f1b9 0f00 	cmp.w	r9, #0
    7d14:	d040      	beq.n	7d98 <_usb_d_dev_out_next+0x104>
    7d16:	8a22      	ldrh	r2, [r4, #16]
    7d18:	42ba      	cmp	r2, r7
    7d1a:	d93d      	bls.n	7d98 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    7d1c:	7ce3      	ldrb	r3, [r4, #19]
    7d1e:	f36f 1304 	bfc	r3, #4, #1
    7d22:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    7d24:	68a3      	ldr	r3, [r4, #8]
    7d26:	445b      	add	r3, fp
    7d28:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    7d2a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7d2e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    7d32:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7d36:	bf0c      	ite	eq
    7d38:	222d      	moveq	r2, #45	; 0x2d
    7d3a:	2225      	movne	r2, #37	; 0x25
    7d3c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    7d40:	b915      	cbnz	r5, 7d48 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7d42:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    7d44:	4b4c      	ldr	r3, [pc, #304]	; (7e78 <_usb_d_dev_out_next+0x1e4>)
    7d46:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    7d48:	2100      	movs	r1, #0
    7d4a:	4620      	mov	r0, r4
    7d4c:	4b4c      	ldr	r3, [pc, #304]	; (7e80 <_usb_d_dev_out_next+0x1ec>)
    7d4e:	4798      	blx	r3
	return;
    7d50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7d54:	8a06      	ldrh	r6, [r0, #16]
    7d56:	f240 33ff 	movw	r3, #1023	; 0x3ff
    7d5a:	429e      	cmp	r6, r3
    7d5c:	d07b      	beq.n	7e56 <_usb_d_dev_out_next+0x1c2>
    7d5e:	f04f 0b00 	mov.w	fp, #0
    7d62:	46da      	mov	sl, fp
    7d64:	e7af      	b.n	7cc6 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    7d66:	7ce3      	ldrb	r3, [r4, #19]
    7d68:	f013 0f10 	tst.w	r3, #16
    7d6c:	d06c      	beq.n	7e48 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    7d6e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    7d70:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    7d74:	f043 0320 	orr.w	r3, r3, #32
    7d78:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7d7a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    7d7c:	493e      	ldr	r1, [pc, #248]	; (7e78 <_usb_d_dev_out_next+0x1e4>)
    7d7e:	016a      	lsls	r2, r5, #5
    7d80:	188b      	adds	r3, r1, r2
    7d82:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    7d84:	8a21      	ldrh	r1, [r4, #16]
    7d86:	685a      	ldr	r2, [r3, #4]
    7d88:	f361 329b 	bfi	r2, r1, #14, #14
    7d8c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    7d8e:	685a      	ldr	r2, [r3, #4]
    7d90:	f36f 020d 	bfc	r2, #0, #14
    7d94:	605a      	str	r2, [r3, #4]
    7d96:	e01d      	b.n	7dd4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    7d98:	68a2      	ldr	r2, [r4, #8]
    7d9a:	4452      	add	r2, sl
    7d9c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    7d9e:	4293      	cmp	r3, r2
    7da0:	d9c3      	bls.n	7d2a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    7da2:	1a9b      	subs	r3, r3, r2
    7da4:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    7da6:	7ce1      	ldrb	r1, [r4, #19]
    7da8:	f011 0f20 	tst.w	r1, #32
    7dac:	d026      	beq.n	7dfc <_usb_d_dev_out_next+0x168>
    7dae:	8a22      	ldrh	r2, [r4, #16]
    7db0:	4293      	cmp	r3, r2
    7db2:	bf28      	it	cs
    7db4:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7db6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    7db8:	016a      	lsls	r2, r5, #5
    7dba:	492f      	ldr	r1, [pc, #188]	; (7e78 <_usb_d_dev_out_next+0x1e4>)
    7dbc:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    7dbe:	4a2e      	ldr	r2, [pc, #184]	; (7e78 <_usb_d_dev_out_next+0x1e4>)
    7dc0:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    7dc4:	6851      	ldr	r1, [r2, #4]
    7dc6:	f363 319b 	bfi	r1, r3, #14, #14
    7dca:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    7dcc:	6853      	ldr	r3, [r2, #4]
    7dce:	f36f 030d 	bfc	r3, #0, #14
    7dd2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    7dd4:	f1b9 0f00 	cmp.w	r9, #0
    7dd8:	d108      	bne.n	7dec <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    7dda:	f1b8 0f01 	cmp.w	r8, #1
    7dde:	d025      	beq.n	7e2c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    7de0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7de2:	016b      	lsls	r3, r5, #5
    7de4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7de8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7dec:	016d      	lsls	r5, r5, #5
    7dee:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    7df2:	2340      	movs	r3, #64	; 0x40
    7df4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    7df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    7dfc:	8a21      	ldrh	r1, [r4, #16]
    7dfe:	428b      	cmp	r3, r1
    7e00:	d90a      	bls.n	7e18 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    7e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    7e06:	d80e      	bhi.n	7e26 <_usb_d_dev_out_next+0x192>
    7e08:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    7e0c:	6821      	ldr	r1, [r4, #0]
    7e0e:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    7e10:	0169      	lsls	r1, r5, #5
    7e12:	4819      	ldr	r0, [pc, #100]	; (7e78 <_usb_d_dev_out_next+0x1e4>)
    7e14:	5042      	str	r2, [r0, r1]
    7e16:	e7d2      	b.n	7dbe <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    7e18:	428b      	cmp	r3, r1
    7e1a:	d2f7      	bcs.n	7e0c <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    7e1c:	7ce1      	ldrb	r1, [r4, #19]
    7e1e:	f041 0120 	orr.w	r1, r1, #32
    7e22:	74e1      	strb	r1, [r4, #19]
    7e24:	e7f2      	b.n	7e0c <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    7e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    7e2a:	e7ef      	b.n	7e0c <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    7e2c:	4b12      	ldr	r3, [pc, #72]	; (7e78 <_usb_d_dev_out_next+0x1e4>)
    7e2e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    7e32:	2200      	movs	r2, #0
    7e34:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    7e36:	222d      	movs	r2, #45	; 0x2d
    7e38:	e7d3      	b.n	7de2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    7e3a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e3e:	f890 8013 	ldrb.w	r8, [r0, #19]
    7e42:	f008 0807 	and.w	r8, r8, #7
    7e46:	e749      	b.n	7cdc <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    7e48:	f1b9 0f00 	cmp.w	r9, #0
    7e4c:	d10b      	bne.n	7e66 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    7e4e:	68a3      	ldr	r3, [r4, #8]
    7e50:	4453      	add	r3, sl
    7e52:	60a3      	str	r3, [r4, #8]
    7e54:	e769      	b.n	7d2a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e56:	f890 8013 	ldrb.w	r8, [r0, #19]
    7e5a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    7e5e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e60:	46bb      	mov	fp, r7
    7e62:	46ba      	mov	sl, r7
    7e64:	e740      	b.n	7ce8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    7e66:	8a23      	ldrh	r3, [r4, #16]
    7e68:	42bb      	cmp	r3, r7
    7e6a:	f63f af57 	bhi.w	7d1c <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    7e6e:	68a3      	ldr	r3, [r4, #8]
    7e70:	4453      	add	r3, sl
    7e72:	60a3      	str	r3, [r4, #8]
    7e74:	e759      	b.n	7d2a <_usb_d_dev_out_next+0x96>
    7e76:	bf00      	nop
    7e78:	200009bc 	.word	0x200009bc
    7e7c:	0000b2c1 	.word	0x0000b2c1
    7e80:	00007935 	.word	0x00007935

00007e84 <_usb_d_dev_handler>:
{
    7e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    7e88:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7e8c:	8c1e      	ldrh	r6, [r3, #32]
    7e8e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    7e90:	b146      	cbz	r6, 7ea4 <_usb_d_dev_handler+0x20>
    7e92:	4d96      	ldr	r5, [pc, #600]	; (80ec <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    7e94:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    7e96:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    7e9a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8108 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    7e9e:	f8df 826c 	ldr.w	r8, [pc, #620]	; 810c <_usb_d_dev_handler+0x288>
    7ea2:	e0de      	b.n	8062 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7ea4:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7ea6:	8b1b      	ldrh	r3, [r3, #24]
    7ea8:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    7eaa:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    7eac:	f013 0f04 	tst.w	r3, #4
    7eb0:	d11e      	bne.n	7ef0 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    7eb2:	f413 7f00 	tst.w	r3, #512	; 0x200
    7eb6:	d125      	bne.n	7f04 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    7eb8:	f013 0f80 	tst.w	r3, #128	; 0x80
    7ebc:	d14f      	bne.n	7f5e <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    7ebe:	f013 0f70 	tst.w	r3, #112	; 0x70
    7ec2:	d158      	bne.n	7f76 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    7ec4:	f013 0f08 	tst.w	r3, #8
    7ec8:	d178      	bne.n	7fbc <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    7eca:	f013 0f01 	tst.w	r3, #1
    7ece:	d0e0      	beq.n	7e92 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7ed0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7ed4:	f240 2201 	movw	r2, #513	; 0x201
    7ed8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7eda:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7edc:	2270      	movs	r2, #112	; 0x70
    7ede:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    7ee0:	4b83      	ldr	r3, [pc, #524]	; (80f0 <_usb_d_dev_handler+0x26c>)
    7ee2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7ee6:	2100      	movs	r1, #0
    7ee8:	2004      	movs	r0, #4
    7eea:	4798      	blx	r3
    7eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7ef0:	2204      	movs	r2, #4
    7ef2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7ef6:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    7ef8:	4b7d      	ldr	r3, [pc, #500]	; (80f0 <_usb_d_dev_handler+0x26c>)
    7efa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    7efe:	4798      	blx	r3
    7f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f04:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f08:	f240 2201 	movw	r2, #513	; 0x201
    7f0c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7f0e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7f10:	2270      	movs	r2, #112	; 0x70
    7f12:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    7f14:	4b76      	ldr	r3, [pc, #472]	; (80f0 <_usb_d_dev_handler+0x26c>)
    7f16:	891b      	ldrh	r3, [r3, #8]
    7f18:	f003 030f 	and.w	r3, r3, #15
    7f1c:	2b03      	cmp	r3, #3
    7f1e:	d014      	beq.n	7f4a <_usb_d_dev_handler+0xc6>
    7f20:	2301      	movs	r3, #1
    7f22:	4873      	ldr	r0, [pc, #460]	; (80f0 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    7f24:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    7f26:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    7f2a:	8912      	ldrh	r2, [r2, #8]
    7f2c:	f002 020f 	and.w	r2, r2, #15
    7f30:	2a03      	cmp	r2, #3
    7f32:	d00b      	beq.n	7f4c <_usb_d_dev_handler+0xc8>
    7f34:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    7f36:	2b05      	cmp	r3, #5
    7f38:	d1f4      	bne.n	7f24 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    7f3a:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    7f3c:	4b6c      	ldr	r3, [pc, #432]	; (80f0 <_usb_d_dev_handler+0x26c>)
    7f3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7f42:	2003      	movs	r0, #3
    7f44:	4798      	blx	r3
    7f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    7f4a:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    7f4c:	4b68      	ldr	r3, [pc, #416]	; (80f0 <_usb_d_dev_handler+0x26c>)
    7f4e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    7f52:	8919      	ldrh	r1, [r3, #8]
    7f54:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    7f58:	2200      	movs	r2, #0
    7f5a:	811a      	strh	r2, [r3, #8]
    7f5c:	e7ee      	b.n	7f3c <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7f5e:	2280      	movs	r2, #128	; 0x80
    7f60:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f64:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    7f66:	4b62      	ldr	r3, [pc, #392]	; (80f0 <_usb_d_dev_handler+0x26c>)
    7f68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7f6c:	2100      	movs	r1, #0
    7f6e:	2005      	movs	r0, #5
    7f70:	4798      	blx	r3
    7f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f76:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f7a:	2270      	movs	r2, #112	; 0x70
    7f7c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7f7e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7f80:	f240 2201 	movw	r2, #513	; 0x201
    7f84:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7f86:	4b5b      	ldr	r3, [pc, #364]	; (80f4 <_usb_d_dev_handler+0x270>)
    7f88:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    7f8c:	f013 0f01 	tst.w	r3, #1
    7f90:	d00e      	beq.n	7fb0 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7f92:	4a58      	ldr	r2, [pc, #352]	; (80f4 <_usb_d_dev_handler+0x270>)
    7f94:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    7f96:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    7f9a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    7f9e:	d1f9      	bne.n	7f94 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    7fa0:	4b53      	ldr	r3, [pc, #332]	; (80f0 <_usb_d_dev_handler+0x26c>)
    7fa2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7fa6:	2100      	movs	r1, #0
    7fa8:	2002      	movs	r0, #2
    7faa:	4798      	blx	r3
    7fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7fb0:	4a50      	ldr	r2, [pc, #320]	; (80f4 <_usb_d_dev_handler+0x270>)
    7fb2:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    7fb4:	f413 7f80 	tst.w	r3, #256	; 0x100
    7fb8:	d0fb      	beq.n	7fb2 <_usb_d_dev_handler+0x12e>
    7fba:	e7f1      	b.n	7fa0 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7fbc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7fc0:	2400      	movs	r4, #0
    7fc2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7fc6:	2208      	movs	r2, #8
    7fc8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7fca:	2270      	movs	r2, #112	; 0x70
    7fcc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7fce:	f240 2201 	movw	r2, #513	; 0x201
    7fd2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    7fd4:	4b48      	ldr	r3, [pc, #288]	; (80f8 <_usb_d_dev_handler+0x274>)
    7fd6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    7fd8:	4b45      	ldr	r3, [pc, #276]	; (80f0 <_usb_d_dev_handler+0x26c>)
    7fda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7fde:	4621      	mov	r1, r4
    7fe0:	2001      	movs	r0, #1
    7fe2:	4798      	blx	r3
    7fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    7fe8:	f011 0f10 	tst.w	r1, #16
    7fec:	d109      	bne.n	8002 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    7fee:	f011 0f40 	tst.w	r1, #64	; 0x40
    7ff2:	d108      	bne.n	8006 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    7ff4:	f011 0f20 	tst.w	r1, #32
    7ff8:	d02f      	beq.n	805a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    7ffa:	2100      	movs	r1, #0
    7ffc:	4b3f      	ldr	r3, [pc, #252]	; (80fc <_usb_d_dev_handler+0x278>)
    7ffe:	4798      	blx	r3
    8000:	e02b      	b.n	805a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    8002:	47c8      	blx	r9
    8004:	e029      	b.n	805a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8006:	2101      	movs	r1, #1
    8008:	4b3c      	ldr	r3, [pc, #240]	; (80fc <_usb_d_dev_handler+0x278>)
    800a:	4798      	blx	r3
    800c:	e025      	b.n	805a <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    800e:	f011 0f40 	tst.w	r1, #64	; 0x40
    8012:	d111      	bne.n	8038 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8014:	f011 0f08 	tst.w	r1, #8
    8018:	d112      	bne.n	8040 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    801a:	f011 0f02 	tst.w	r1, #2
    801e:	d112      	bne.n	8046 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8020:	f003 0307 	and.w	r3, r3, #7
    8024:	2b01      	cmp	r3, #1
    8026:	d118      	bne.n	805a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8028:	f011 0f04 	tst.w	r1, #4
    802c:	d10f      	bne.n	804e <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    802e:	f011 0f10 	tst.w	r1, #16
    8032:	d012      	beq.n	805a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8034:	47c8      	blx	r9
    8036:	e010      	b.n	805a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8038:	2101      	movs	r1, #1
    803a:	4b30      	ldr	r3, [pc, #192]	; (80fc <_usb_d_dev_handler+0x278>)
    803c:	4798      	blx	r3
    803e:	e00c      	b.n	805a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    8040:	2101      	movs	r1, #1
    8042:	47c0      	blx	r8
    8044:	e009      	b.n	805a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8046:	2101      	movs	r1, #1
    8048:	4b2d      	ldr	r3, [pc, #180]	; (8100 <_usb_d_dev_handler+0x27c>)
    804a:	4798      	blx	r3
    804c:	e005      	b.n	805a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    804e:	2100      	movs	r1, #0
    8050:	47c0      	blx	r8
    8052:	e002      	b.n	805a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8054:	2100      	movs	r1, #0
    8056:	4b29      	ldr	r3, [pc, #164]	; (80fc <_usb_d_dev_handler+0x278>)
    8058:	4798      	blx	r3
    805a:	3401      	adds	r4, #1
    805c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    805e:	2c1b      	cmp	r4, #27
    8060:	d042      	beq.n	80e8 <_usb_d_dev_handler+0x264>
    8062:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8064:	7cab      	ldrb	r3, [r5, #18]
    8066:	2bff      	cmp	r3, #255	; 0xff
    8068:	d0f7      	beq.n	805a <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    806a:	f003 030f 	and.w	r3, r3, #15
    806e:	2101      	movs	r1, #1
    8070:	4099      	lsls	r1, r3
    8072:	4231      	tst	r1, r6
    8074:	d0f1      	beq.n	805a <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8076:	0159      	lsls	r1, r3, #5
    8078:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    807c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    8080:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    8082:	015b      	lsls	r3, r3, #5
    8084:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8088:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    808c:	4019      	ands	r1, r3
    808e:	d0e4      	beq.n	805a <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8090:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8094:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8098:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    809c:	f003 0247 	and.w	r2, r3, #71	; 0x47
    80a0:	2a01      	cmp	r2, #1
    80a2:	d0a1      	beq.n	7fe8 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    80a4:	f013 0f80 	tst.w	r3, #128	; 0x80
    80a8:	d1b1      	bne.n	800e <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    80aa:	f011 0f20 	tst.w	r1, #32
    80ae:	d1d1      	bne.n	8054 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    80b0:	f011 0f04 	tst.w	r1, #4
    80b4:	d10e      	bne.n	80d4 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    80b6:	f011 0f01 	tst.w	r1, #1
    80ba:	d10e      	bne.n	80da <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    80bc:	f003 0307 	and.w	r3, r3, #7
    80c0:	2b01      	cmp	r3, #1
    80c2:	d1ca      	bne.n	805a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    80c4:	f011 0f08 	tst.w	r1, #8
    80c8:	d10b      	bne.n	80e2 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    80ca:	f011 0f10 	tst.w	r1, #16
    80ce:	d0c4      	beq.n	805a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    80d0:	47c8      	blx	r9
    80d2:	e7c2      	b.n	805a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    80d4:	2100      	movs	r1, #0
    80d6:	47c0      	blx	r8
    80d8:	e7bf      	b.n	805a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    80da:	2101      	movs	r1, #1
    80dc:	4b09      	ldr	r3, [pc, #36]	; (8104 <_usb_d_dev_handler+0x280>)
    80de:	4798      	blx	r3
    80e0:	e7bb      	b.n	805a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    80e2:	2101      	movs	r1, #1
    80e4:	47c0      	blx	r8
    80e6:	e7b8      	b.n	805a <_usb_d_dev_handler+0x1d6>
    80e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    80ec:	20000a90 	.word	0x20000a90
    80f0:	200009bc 	.word	0x200009bc
    80f4:	40001000 	.word	0x40001000
    80f8:	00007acd 	.word	0x00007acd
    80fc:	00007905 	.word	0x00007905
    8100:	00007b11 	.word	0x00007b11
    8104:	00007c95 	.word	0x00007c95
    8108:	00007885 	.word	0x00007885
    810c:	000079cd 	.word	0x000079cd

00008110 <_usb_d_dev_init>:
{
    8110:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8112:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8116:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    8118:	f013 0f01 	tst.w	r3, #1
    811c:	d124      	bne.n	8168 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    811e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8122:	7893      	ldrb	r3, [r2, #2]
    8124:	f013 0f03 	tst.w	r3, #3
    8128:	d1fb      	bne.n	8122 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    812a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    812e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    8130:	f013 0f02 	tst.w	r3, #2
    8134:	d00f      	beq.n	8156 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8136:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    813a:	7813      	ldrb	r3, [r2, #0]
    813c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8140:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8142:	7893      	ldrb	r3, [r2, #2]
    8144:	f013 0f03 	tst.w	r3, #3
    8148:	d1fb      	bne.n	8142 <_usb_d_dev_init+0x32>
    814a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    814e:	7893      	ldrb	r3, [r2, #2]
    8150:	f013 0f02 	tst.w	r3, #2
    8154:	d1fb      	bne.n	814e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8156:	2201      	movs	r2, #1
    8158:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    815c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    815e:	461a      	mov	r2, r3
    8160:	7893      	ldrb	r3, [r2, #2]
    8162:	f013 0f03 	tst.w	r3, #3
    8166:	d1fb      	bne.n	8160 <_usb_d_dev_init+0x50>
    8168:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    816c:	7893      	ldrb	r3, [r2, #2]
    816e:	f013 0f01 	tst.w	r3, #1
    8172:	d1fb      	bne.n	816c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8174:	4b24      	ldr	r3, [pc, #144]	; (8208 <_usb_d_dev_init+0xf8>)
    8176:	4a25      	ldr	r2, [pc, #148]	; (820c <_usb_d_dev_init+0xfc>)
    8178:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    817c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    8180:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8184:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    8188:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    818c:	4b20      	ldr	r3, [pc, #128]	; (8210 <_usb_d_dev_init+0x100>)
    818e:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8190:	4b20      	ldr	r3, [pc, #128]	; (8214 <_usb_d_dev_init+0x104>)
    8192:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    8194:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8198:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    819c:	f011 011f 	ands.w	r1, r1, #31
    81a0:	d02b      	beq.n	81fa <_usb_d_dev_init+0xea>
		pad_transn = 9;
    81a2:	291f      	cmp	r1, #31
    81a4:	bf08      	it	eq
    81a6:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    81a8:	b34b      	cbz	r3, 81fe <_usb_d_dev_init+0xee>
		pad_transp = 25;
    81aa:	2b1f      	cmp	r3, #31
    81ac:	bf08      	it	eq
    81ae:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    81b0:	b33a      	cbz	r2, 8202 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    81b2:	2a07      	cmp	r2, #7
    81b4:	bf08      	it	eq
    81b6:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    81b8:	f003 031f 	and.w	r3, r3, #31
    81bc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    81c0:	0312      	lsls	r2, r2, #12
    81c2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    81c6:	4313      	orrs	r3, r2
    81c8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    81cc:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    81ce:	78d3      	ldrb	r3, [r2, #3]
    81d0:	f043 0303 	orr.w	r3, r3, #3
    81d4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    81d6:	78d3      	ldrb	r3, [r2, #3]
    81d8:	f043 030c 	orr.w	r3, r3, #12
    81dc:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    81de:	2304      	movs	r3, #4
    81e0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    81e2:	7893      	ldrb	r3, [r2, #2]
    81e4:	f013 0f03 	tst.w	r3, #3
    81e8:	d1fb      	bne.n	81e2 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    81ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    81ee:	4a06      	ldr	r2, [pc, #24]	; (8208 <_usb_d_dev_init+0xf8>)
    81f0:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    81f2:	2201      	movs	r2, #1
    81f4:	811a      	strh	r2, [r3, #8]
}
    81f6:	2000      	movs	r0, #0
    81f8:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    81fa:	2109      	movs	r1, #9
    81fc:	e7d4      	b.n	81a8 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    81fe:	2319      	movs	r3, #25
    8200:	e7d6      	b.n	81b0 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    8202:	2206      	movs	r2, #6
    8204:	e7d8      	b.n	81b8 <_usb_d_dev_init+0xa8>
    8206:	bf00      	nop
    8208:	200009bc 	.word	0x200009bc
    820c:	00007881 	.word	0x00007881
    8210:	00007acd 	.word	0x00007acd
    8214:	00800084 	.word	0x00800084

00008218 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8218:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    821c:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    821e:	f013 0f03 	tst.w	r3, #3
    8222:	d129      	bne.n	8278 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8224:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8228:	7893      	ldrb	r3, [r2, #2]
    822a:	f013 0f03 	tst.w	r3, #3
    822e:	d1fb      	bne.n	8228 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8230:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8234:	781b      	ldrb	r3, [r3, #0]
    8236:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    8238:	f013 0f02 	tst.w	r3, #2
    823c:	d108      	bne.n	8250 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    823e:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8242:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8246:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8248:	7893      	ldrb	r3, [r2, #2]
    824a:	f013 0f03 	tst.w	r3, #3
    824e:	d1fb      	bne.n	8248 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8250:	4b0b      	ldr	r3, [pc, #44]	; (8280 <_usb_d_dev_enable+0x68>)
    8252:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8256:	609a      	str	r2, [r3, #8]
    8258:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    825c:	609a      	str	r2, [r3, #8]
    825e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8262:	609a      	str	r2, [r3, #8]
    8264:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8268:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    826a:	f240 228d 	movw	r2, #653	; 0x28d
    826e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8272:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    8274:	2000      	movs	r0, #0
    8276:	4770      	bx	lr
		return -USB_ERR_DENIED;
    8278:	f06f 0010 	mvn.w	r0, #16
}
    827c:	4770      	bx	lr
    827e:	bf00      	nop
    8280:	e000e100 	.word	0xe000e100

00008284 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8284:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8288:	8913      	ldrh	r3, [r2, #8]
    828a:	f023 0301 	bic.w	r3, r3, #1
    828e:	041b      	lsls	r3, r3, #16
    8290:	0c1b      	lsrs	r3, r3, #16
    8292:	8113      	strh	r3, [r2, #8]
    8294:	4770      	bx	lr

00008296 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    8296:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    829a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    829e:	7298      	strb	r0, [r3, #10]
    82a0:	4770      	bx	lr
	...

000082a4 <_usb_d_dev_ep_init>:
{
    82a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    82a6:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    82aa:	f010 050f 	ands.w	r5, r0, #15
    82ae:	d04d      	beq.n	834c <_usb_d_dev_ep_init+0xa8>
    82b0:	f1be 0f00 	cmp.w	lr, #0
    82b4:	bfb4      	ite	lt
    82b6:	1d6c      	addlt	r4, r5, #5
    82b8:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    82ba:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    82be:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    82c0:	2d05      	cmp	r5, #5
    82c2:	d947      	bls.n	8354 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    82c4:	f06f 0011 	mvn.w	r0, #17
    82c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    82ca:	f1be 0f00 	cmp.w	lr, #0
    82ce:	db1b      	blt.n	8308 <_usb_d_dev_ep_init+0x64>
    82d0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    82d4:	4e37      	ldr	r6, [pc, #220]	; (83b4 <_usb_d_dev_ep_init+0x110>)
    82d6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    82da:	2d00      	cmp	r5, #0
    82dc:	d15e      	bne.n	839c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    82de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    82e2:	4d34      	ldr	r5, [pc, #208]	; (83b4 <_usb_d_dev_ep_init+0x110>)
    82e4:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    82e8:	4d33      	ldr	r5, [pc, #204]	; (83b8 <_usb_d_dev_ep_init+0x114>)
    82ea:	00a6      	lsls	r6, r4, #2
    82ec:	1933      	adds	r3, r6, r4
    82ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    82f2:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    82f6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    82fa:	3101      	adds	r1, #1
    82fc:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    8300:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    8304:	2000      	movs	r0, #0
    8306:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8308:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    830c:	4e29      	ldr	r6, [pc, #164]	; (83b4 <_usb_d_dev_ep_init+0x110>)
    830e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8312:	686d      	ldr	r5, [r5, #4]
    8314:	b935      	cbnz	r5, 8324 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8316:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    831a:	4d26      	ldr	r5, [pc, #152]	; (83b4 <_usb_d_dev_ep_init+0x110>)
    831c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8320:	685f      	ldr	r7, [r3, #4]
    8322:	e7e1      	b.n	82e8 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8324:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8328:	4e22      	ldr	r6, [pc, #136]	; (83b4 <_usb_d_dev_ep_init+0x110>)
    832a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    832e:	896d      	ldrh	r5, [r5, #10]
    8330:	4295      	cmp	r5, r2
    8332:	daf0      	bge.n	8316 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    8334:	f06f 0012 	mvn.w	r0, #18
    8338:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    833a:	f06f 0013 	mvn.w	r0, #19
    833e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    8340:	f06f 0013 	mvn.w	r0, #19
    8344:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    8346:	f06f 0012 	mvn.w	r0, #18
    834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    834c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    8350:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8352:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    8354:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    8358:	4f17      	ldr	r7, [pc, #92]	; (83b8 <_usb_d_dev_ep_init+0x114>)
    835a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    835e:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    8362:	2eff      	cmp	r6, #255	; 0xff
    8364:	d1e9      	bne.n	833a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    8366:	2900      	cmp	r1, #0
    8368:	d1af      	bne.n	82ca <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    836a:	b125      	cbz	r5, 8376 <_usb_d_dev_ep_init+0xd2>
    836c:	f1be 0f00 	cmp.w	lr, #0
    8370:	bfa4      	itt	ge
    8372:	3505      	addge	r5, #5
    8374:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    8376:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    837a:	4e0f      	ldr	r6, [pc, #60]	; (83b8 <_usb_d_dev_ep_init+0x114>)
    837c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8380:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    8384:	2dff      	cmp	r5, #255	; 0xff
    8386:	d1db      	bne.n	8340 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    8388:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    838c:	4e09      	ldr	r6, [pc, #36]	; (83b4 <_usb_d_dev_ep_init+0x110>)
    838e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8392:	2d00      	cmp	r5, #0
    8394:	d0d7      	beq.n	8346 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8396:	f1be 0f00 	cmp.w	lr, #0
    839a:	dbb5      	blt.n	8308 <_usb_d_dev_ep_init+0x64>
    839c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    83a0:	4e04      	ldr	r6, [pc, #16]	; (83b4 <_usb_d_dev_ep_init+0x110>)
    83a2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    83a6:	892d      	ldrh	r5, [r5, #8]
    83a8:	4295      	cmp	r5, r2
    83aa:	da98      	bge.n	82de <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    83ac:	f06f 0012 	mvn.w	r0, #18
    83b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83b2:	bf00      	nop
    83b4:	0000c2c4 	.word	0x0000c2c4
    83b8:	200009bc 	.word	0x200009bc

000083bc <_usb_d_dev_ep_deinit>:
{
    83bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83be:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    83c0:	f010 060f 	ands.w	r6, r0, #15
    83c4:	d00e      	beq.n	83e4 <_usb_d_dev_ep_deinit+0x28>
    83c6:	2f00      	cmp	r7, #0
    83c8:	bfb4      	ite	lt
    83ca:	1d73      	addlt	r3, r6, #5
    83cc:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    83ce:	2e05      	cmp	r6, #5
    83d0:	d900      	bls.n	83d4 <_usb_d_dev_ep_deinit+0x18>
    83d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    83d4:	461d      	mov	r5, r3
    83d6:	3301      	adds	r3, #1
    83d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    83dc:	4a24      	ldr	r2, [pc, #144]	; (8470 <_usb_d_dev_ep_deinit+0xb4>)
    83de:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    83e2:	e002      	b.n	83ea <_usb_d_dev_ep_deinit+0x2e>
    83e4:	f8df e094 	ldr.w	lr, [pc, #148]	; 847c <_usb_d_dev_ep_deinit+0xc0>
    83e8:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    83ea:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    83ee:	4a21      	ldr	r2, [pc, #132]	; (8474 <_usb_d_dev_ep_deinit+0xb8>)
    83f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83f4:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    83f8:	2aff      	cmp	r2, #255	; 0xff
    83fa:	d0ea      	beq.n	83d2 <_usb_d_dev_ep_deinit+0x16>
    83fc:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    83fe:	2203      	movs	r2, #3
    8400:	0ff9      	lsrs	r1, r7, #31
    8402:	4670      	mov	r0, lr
    8404:	4b1c      	ldr	r3, [pc, #112]	; (8478 <_usb_d_dev_ep_deinit+0xbc>)
    8406:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8408:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    840c:	4a19      	ldr	r2, [pc, #100]	; (8474 <_usb_d_dev_ep_deinit+0xb8>)
    840e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8412:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8416:	f003 0307 	and.w	r3, r3, #7
    841a:	2b01      	cmp	r3, #1
    841c:	d016      	beq.n	844c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    841e:	2f00      	cmp	r7, #0
    8420:	db1b      	blt.n	845a <_usb_d_dev_ep_deinit+0x9e>
    8422:	0160      	lsls	r0, r4, #5
    8424:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    8428:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    842c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    8430:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    8434:	4b0f      	ldr	r3, [pc, #60]	; (8474 <_usb_d_dev_ep_deinit+0xb8>)
    8436:	00aa      	lsls	r2, r5, #2
    8438:	1951      	adds	r1, r2, r5
    843a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    843e:	2000      	movs	r0, #0
    8440:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    8444:	22ff      	movs	r2, #255	; 0xff
    8446:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    844a:	e7c2      	b.n	83d2 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    844c:	0160      	lsls	r0, r4, #5
    844e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8452:	2300      	movs	r3, #0
    8454:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    8458:	e7ec      	b.n	8434 <_usb_d_dev_ep_deinit+0x78>
    845a:	0176      	lsls	r6, r6, #5
    845c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    8460:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8464:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    8468:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    846c:	e7e2      	b.n	8434 <_usb_d_dev_ep_deinit+0x78>
    846e:	bf00      	nop
    8470:	20000a7c 	.word	0x20000a7c
    8474:	200009bc 	.word	0x200009bc
    8478:	00007961 	.word	0x00007961
    847c:	20000a90 	.word	0x20000a90

00008480 <_usb_d_dev_ep_enable>:
{
    8480:	b4f0      	push	{r4, r5, r6, r7}
    8482:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8484:	f010 000f 	ands.w	r0, r0, #15
    8488:	f000 80a7 	beq.w	85da <_usb_d_dev_ep_enable+0x15a>
    848c:	2e00      	cmp	r6, #0
    848e:	bfb4      	ite	lt
    8490:	1d43      	addlt	r3, r0, #5
    8492:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8494:	4605      	mov	r5, r0
    8496:	0142      	lsls	r2, r0, #5
    8498:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    849c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    84a0:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    84a2:	2805      	cmp	r0, #5
    84a4:	f240 80a0 	bls.w	85e8 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    84a8:	f06f 0011 	mvn.w	r0, #17
    84ac:	e07d      	b.n	85aa <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    84ae:	f014 0f77 	tst.w	r4, #119	; 0x77
    84b2:	f040 8089 	bne.w	85c8 <_usb_d_dev_ep_enable+0x148>
    84b6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    84ba:	2111      	movs	r1, #17
    84bc:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    84c0:	4c9b      	ldr	r4, [pc, #620]	; (8730 <_usb_d_dev_ep_enable+0x2b0>)
    84c2:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    84c6:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    84ca:	4c9a      	ldr	r4, [pc, #616]	; (8734 <_usb_d_dev_ep_enable+0x2b4>)
    84cc:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    84d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    84d4:	f200 80cd 	bhi.w	8672 <_usb_d_dev_ep_enable+0x1f2>
    84d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    84dc:	f200 8112 	bhi.w	8704 <_usb_d_dev_ep_enable+0x284>
    84e0:	2980      	cmp	r1, #128	; 0x80
    84e2:	f200 8101 	bhi.w	86e8 <_usb_d_dev_ep_enable+0x268>
    84e6:	2940      	cmp	r1, #64	; 0x40
    84e8:	f200 8113 	bhi.w	8712 <_usb_d_dev_ep_enable+0x292>
    84ec:	2920      	cmp	r1, #32
    84ee:	f200 8102 	bhi.w	86f6 <_usb_d_dev_ep_enable+0x276>
    84f2:	2910      	cmp	r1, #16
    84f4:	f200 8114 	bhi.w	8720 <_usb_d_dev_ep_enable+0x2a0>
    84f8:	2908      	cmp	r1, #8
    84fa:	bf94      	ite	ls
    84fc:	2600      	movls	r6, #0
    84fe:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8500:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8504:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8506:	f3c1 010d 	ubfx	r1, r1, #0, #14
    850a:	e0b8      	b.n	867e <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    850c:	f014 0f70 	tst.w	r4, #112	; 0x70
    8510:	d15d      	bne.n	85ce <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    8512:	4e87      	ldr	r6, [pc, #540]	; (8730 <_usb_d_dev_ep_enable+0x2b0>)
    8514:	009f      	lsls	r7, r3, #2
    8516:	18f9      	adds	r1, r7, r3
    8518:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    851c:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8520:	0109      	lsls	r1, r1, #4
    8522:	f001 0170 	and.w	r1, r1, #112	; 0x70
    8526:	430c      	orrs	r4, r1
    8528:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    852c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8530:	443b      	add	r3, r7
    8532:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8536:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    853a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    853e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8542:	d80f      	bhi.n	8564 <_usb_d_dev_ep_enable+0xe4>
    8544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8548:	d819      	bhi.n	857e <_usb_d_dev_ep_enable+0xfe>
    854a:	2b80      	cmp	r3, #128	; 0x80
    854c:	d819      	bhi.n	8582 <_usb_d_dev_ep_enable+0x102>
    854e:	2b40      	cmp	r3, #64	; 0x40
    8550:	d819      	bhi.n	8586 <_usb_d_dev_ep_enable+0x106>
    8552:	2b20      	cmp	r3, #32
    8554:	d819      	bhi.n	858a <_usb_d_dev_ep_enable+0x10a>
    8556:	2b10      	cmp	r3, #16
    8558:	d819      	bhi.n	858e <_usb_d_dev_ep_enable+0x10e>
    855a:	2b08      	cmp	r3, #8
    855c:	bf94      	ite	ls
    855e:	2300      	movls	r3, #0
    8560:	2301      	movhi	r3, #1
    8562:	e000      	b.n	8566 <_usb_d_dev_ep_enable+0xe6>
    8564:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8566:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    856a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    856c:	2380      	movs	r3, #128	; 0x80
    856e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8572:	4b6f      	ldr	r3, [pc, #444]	; (8730 <_usb_d_dev_ep_enable+0x2b0>)
    8574:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8578:	2000      	movs	r0, #0
    857a:	76a8      	strb	r0, [r5, #26]
    857c:	e015      	b.n	85aa <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    857e:	2306      	movs	r3, #6
    8580:	e7f1      	b.n	8566 <_usb_d_dev_ep_enable+0xe6>
    8582:	2305      	movs	r3, #5
    8584:	e7ef      	b.n	8566 <_usb_d_dev_ep_enable+0xe6>
    8586:	2304      	movs	r3, #4
    8588:	e7ed      	b.n	8566 <_usb_d_dev_ep_enable+0xe6>
    858a:	2303      	movs	r3, #3
    858c:	e7eb      	b.n	8566 <_usb_d_dev_ep_enable+0xe6>
    858e:	2302      	movs	r3, #2
    8590:	e7e9      	b.n	8566 <_usb_d_dev_ep_enable+0xe6>
    8592:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8594:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8598:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    859a:	2340      	movs	r3, #64	; 0x40
    859c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    85a0:	4b63      	ldr	r3, [pc, #396]	; (8730 <_usb_d_dev_ep_enable+0x2b0>)
    85a2:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    85a6:	2000      	movs	r0, #0
    85a8:	72a8      	strb	r0, [r5, #10]
}
    85aa:	bcf0      	pop	{r4, r5, r6, r7}
    85ac:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    85ae:	2106      	movs	r1, #6
    85b0:	e7f0      	b.n	8594 <_usb_d_dev_ep_enable+0x114>
    85b2:	2105      	movs	r1, #5
    85b4:	e7ee      	b.n	8594 <_usb_d_dev_ep_enable+0x114>
    85b6:	2104      	movs	r1, #4
    85b8:	e7ec      	b.n	8594 <_usb_d_dev_ep_enable+0x114>
    85ba:	2103      	movs	r1, #3
    85bc:	e7ea      	b.n	8594 <_usb_d_dev_ep_enable+0x114>
    85be:	2102      	movs	r1, #2
    85c0:	e7e8      	b.n	8594 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    85c2:	f06f 0011 	mvn.w	r0, #17
    85c6:	e7f0      	b.n	85aa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    85c8:	f06f 0013 	mvn.w	r0, #19
    85cc:	e7ed      	b.n	85aa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    85ce:	f06f 0013 	mvn.w	r0, #19
    85d2:	e7ea      	b.n	85aa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    85d4:	f06f 0013 	mvn.w	r0, #19
    85d8:	e7e7      	b.n	85aa <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    85da:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    85de:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    85e2:	b2e4      	uxtb	r4, r4
    85e4:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    85e6:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    85e8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    85ec:	4950      	ldr	r1, [pc, #320]	; (8730 <_usb_d_dev_ep_enable+0x2b0>)
    85ee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    85f2:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    85f6:	2aff      	cmp	r2, #255	; 0xff
    85f8:	d0e3      	beq.n	85c2 <_usb_d_dev_ep_enable+0x142>
    85fa:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    85fc:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    85fe:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    8602:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    8606:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    860a:	f001 0107 	and.w	r1, r1, #7
    860e:	2901      	cmp	r1, #1
    8610:	f43f af4d 	beq.w	84ae <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    8614:	2e00      	cmp	r6, #0
    8616:	f6ff af79 	blt.w	850c <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    861a:	f014 0f07 	tst.w	r4, #7
    861e:	d1d9      	bne.n	85d4 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    8620:	4e43      	ldr	r6, [pc, #268]	; (8730 <_usb_d_dev_ep_enable+0x2b0>)
    8622:	009f      	lsls	r7, r3, #2
    8624:	18f9      	adds	r1, r7, r3
    8626:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    862a:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    862e:	f001 0107 	and.w	r1, r1, #7
    8632:	430c      	orrs	r4, r1
    8634:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8638:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    863c:	443b      	add	r3, r7
    863e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8642:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    8646:	4b3b      	ldr	r3, [pc, #236]	; (8734 <_usb_d_dev_ep_enable+0x2b4>)
    8648:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    864c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8650:	d89f      	bhi.n	8592 <_usb_d_dev_ep_enable+0x112>
    8652:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8656:	d8aa      	bhi.n	85ae <_usb_d_dev_ep_enable+0x12e>
    8658:	2980      	cmp	r1, #128	; 0x80
    865a:	d8aa      	bhi.n	85b2 <_usb_d_dev_ep_enable+0x132>
    865c:	2940      	cmp	r1, #64	; 0x40
    865e:	d8aa      	bhi.n	85b6 <_usb_d_dev_ep_enable+0x136>
    8660:	2920      	cmp	r1, #32
    8662:	d8aa      	bhi.n	85ba <_usb_d_dev_ep_enable+0x13a>
    8664:	2910      	cmp	r1, #16
    8666:	d8aa      	bhi.n	85be <_usb_d_dev_ep_enable+0x13e>
    8668:	2908      	cmp	r1, #8
    866a:	bf94      	ite	ls
    866c:	2100      	movls	r1, #0
    866e:	2101      	movhi	r1, #1
    8670:	e790      	b.n	8594 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8672:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8676:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8678:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    867c:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    867e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    8682:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8684:	2640      	movs	r6, #64	; 0x40
    8686:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    868a:	2180      	movs	r1, #128	; 0x80
    868c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8690:	4f27      	ldr	r7, [pc, #156]	; (8730 <_usb_d_dev_ep_enable+0x2b0>)
    8692:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    8696:	2000      	movs	r0, #0
    8698:	72a8      	strb	r0, [r5, #10]
    869a:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    869c:	009c      	lsls	r4, r3, #2
    869e:	18e1      	adds	r1, r4, r3
    86a0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    86a4:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    86a8:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    86ac:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    86b0:	0152      	lsls	r2, r2, #5
    86b2:	18b9      	adds	r1, r7, r2
    86b4:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    86b6:	4423      	add	r3, r4
    86b8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    86bc:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    86c0:	684b      	ldr	r3, [r1, #4]
    86c2:	f364 339b 	bfi	r3, r4, #14, #14
    86c6:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    86c8:	684b      	ldr	r3, [r1, #4]
    86ca:	f360 030d 	bfi	r3, r0, #0, #14
    86ce:	604b      	str	r3, [r1, #4]
    86d0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    86d4:	21b0      	movs	r1, #176	; 0xb0
    86d6:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    86da:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    86de:	461a      	mov	r2, r3
    86e0:	2310      	movs	r3, #16
    86e2:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    86e6:	e760      	b.n	85aa <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86e8:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    86ec:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86ee:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    86f2:	2605      	movs	r6, #5
    86f4:	e7c3      	b.n	867e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86f6:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    86fa:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86fc:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8700:	2603      	movs	r6, #3
    8702:	e7bc      	b.n	867e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8704:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8708:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    870a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    870e:	2606      	movs	r6, #6
    8710:	e7b5      	b.n	867e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8712:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8716:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8718:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    871c:	2604      	movs	r6, #4
    871e:	e7ae      	b.n	867e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8720:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8724:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8726:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    872a:	2602      	movs	r6, #2
    872c:	e7a7      	b.n	867e <_usb_d_dev_ep_enable+0x1fe>
    872e:	bf00      	nop
    8730:	200009bc 	.word	0x200009bc
    8734:	0fffc000 	.word	0x0fffc000

00008738 <_usb_d_dev_ep_stall>:
{
    8738:	b470      	push	{r4, r5, r6}
    873a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    873c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    873e:	f010 000f 	ands.w	r0, r0, #15
    8742:	d008      	beq.n	8756 <_usb_d_dev_ep_stall+0x1e>
    8744:	2b00      	cmp	r3, #0
    8746:	bfb4      	ite	lt
    8748:	1d43      	addlt	r3, r0, #5
    874a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    874c:	2805      	cmp	r0, #5
    874e:	d903      	bls.n	8758 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    8750:	f06f 0011 	mvn.w	r0, #17
    8754:	e018      	b.n	8788 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    8756:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    8758:	2901      	cmp	r1, #1
    875a:	d017      	beq.n	878c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    875c:	2900      	cmp	r1, #0
    875e:	d03a      	beq.n	87d6 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8760:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8764:	4a45      	ldr	r2, [pc, #276]	; (887c <_usb_d_dev_ep_stall+0x144>)
    8766:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    876a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    876e:	f003 030f 	and.w	r3, r3, #15
    8772:	015b      	lsls	r3, r3, #5
    8774:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8778:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    877c:	2310      	movs	r3, #16
    877e:	40a3      	lsls	r3, r4
    8780:	421a      	tst	r2, r3
    8782:	bf14      	ite	ne
    8784:	2001      	movne	r0, #1
    8786:	2000      	moveq	r0, #0
}
    8788:	bc70      	pop	{r4, r5, r6}
    878a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    878c:	2510      	movs	r5, #16
    878e:	40a5      	lsls	r5, r4
    8790:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8792:	493a      	ldr	r1, [pc, #232]	; (887c <_usb_d_dev_ep_stall+0x144>)
    8794:	009e      	lsls	r6, r3, #2
    8796:	18f2      	adds	r2, r6, r3
    8798:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    879c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    87a0:	f002 020f 	and.w	r2, r2, #15
    87a4:	0150      	lsls	r0, r2, #5
    87a6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    87aa:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    87ae:	2020      	movs	r0, #32
    87b0:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    87b4:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    87b6:	0152      	lsls	r2, r2, #5
    87b8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    87bc:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    87c0:	4433      	add	r3, r6
    87c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    87c6:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    87ca:	f042 0208 	orr.w	r2, r2, #8
    87ce:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    87d2:	2000      	movs	r0, #0
    87d4:	e7d8      	b.n	8788 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    87d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    87da:	4928      	ldr	r1, [pc, #160]	; (887c <_usb_d_dev_ep_stall+0x144>)
    87dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    87e0:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    87e4:	f002 020f 	and.w	r2, r2, #15
    87e8:	0151      	lsls	r1, r2, #5
    87ea:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    87ee:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    87f2:	2010      	movs	r0, #16
    87f4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    87f6:	4205      	tst	r5, r0
    87f8:	d03c      	beq.n	8874 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    87fa:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    87fc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8800:	2020      	movs	r0, #32
    8802:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8804:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8806:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    880a:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    880e:	4202      	tst	r2, r0
    8810:	d007      	beq.n	8822 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8812:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8816:	2201      	movs	r2, #1
    8818:	fa02 f404 	lsl.w	r4, r2, r4
    881c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    881e:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8822:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8826:	4815      	ldr	r0, [pc, #84]	; (887c <_usb_d_dev_ep_stall+0x144>)
    8828:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    882c:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    8830:	f002 0207 	and.w	r2, r2, #7
    8834:	2a01      	cmp	r2, #1
    8836:	d00c      	beq.n	8852 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    8838:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    883c:	4a0f      	ldr	r2, [pc, #60]	; (887c <_usb_d_dev_ep_stall+0x144>)
    883e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8842:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8846:	f36f 02c3 	bfc	r2, #3, #1
    884a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    884e:	2000      	movs	r0, #0
    8850:	e79a      	b.n	8788 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8852:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    8856:	f012 0f30 	tst.w	r2, #48	; 0x30
    885a:	d10d      	bne.n	8878 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    885c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8860:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    8864:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8868:	f36f 02c3 	bfc	r2, #3, #1
    886c:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    8870:	2000      	movs	r0, #0
    8872:	e789      	b.n	8788 <_usb_d_dev_ep_stall+0x50>
    8874:	2000      	movs	r0, #0
    8876:	e787      	b.n	8788 <_usb_d_dev_ep_stall+0x50>
    8878:	2000      	movs	r0, #0
    887a:	e785      	b.n	8788 <_usb_d_dev_ep_stall+0x50>
    887c:	200009bc 	.word	0x200009bc

00008880 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    8880:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    8882:	f000 040f 	and.w	r4, r0, #15
    8886:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    8888:	4a14      	ldr	r2, [pc, #80]	; (88dc <_usb_d_dev_ep_read_req+0x5c>)
    888a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    888c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    888e:	6840      	ldr	r0, [r0, #4]
    8890:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    8894:	2c05      	cmp	r4, #5
    8896:	d817      	bhi.n	88c8 <_usb_d_dev_ep_read_req+0x48>
    8898:	b1c9      	cbz	r1, 88ce <_usb_d_dev_ep_read_req+0x4e>
    889a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    889e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    88a2:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    88a4:	2a11      	cmp	r2, #17
    88a6:	d115      	bne.n	88d4 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    88a8:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    88ac:	f012 0f10 	tst.w	r2, #16
    88b0:	d102      	bne.n	88b8 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    88b2:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    88b4:	bc30      	pop	{r4, r5}
    88b6:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    88b8:	682c      	ldr	r4, [r5, #0]
    88ba:	686a      	ldr	r2, [r5, #4]
    88bc:	600c      	str	r4, [r1, #0]
    88be:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    88c0:	2210      	movs	r2, #16
    88c2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    88c6:	e7f5      	b.n	88b4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    88c8:	f06f 0011 	mvn.w	r0, #17
    88cc:	e7f2      	b.n	88b4 <_usb_d_dev_ep_read_req+0x34>
    88ce:	f06f 0011 	mvn.w	r0, #17
    88d2:	e7ef      	b.n	88b4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    88d4:	f06f 0012 	mvn.w	r0, #18
    88d8:	e7ec      	b.n	88b4 <_usb_d_dev_ep_read_req+0x34>
    88da:	bf00      	nop
    88dc:	200009bc 	.word	0x200009bc

000088e0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    88e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88e4:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    88e6:	7a03      	ldrb	r3, [r0, #8]
    88e8:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    88ea:	f013 030f 	ands.w	r3, r3, #15
    88ee:	f000 80c2 	beq.w	8a76 <_usb_d_dev_ep_trans+0x196>
    88f2:	2e00      	cmp	r6, #0
    88f4:	bfb4      	ite	lt
    88f6:	1d5a      	addlt	r2, r3, #5
    88f8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    88fa:	4614      	mov	r4, r2
    88fc:	4969      	ldr	r1, [pc, #420]	; (8aa4 <_usb_d_dev_ep_trans+0x1c4>)
    88fe:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    8902:	1c55      	adds	r5, r2, #1
    8904:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8908:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    890c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8910:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8914:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    8918:	f240 31ff 	movw	r1, #1023	; 0x3ff
    891c:	428a      	cmp	r2, r1
    891e:	d025      	beq.n	896c <_usb_d_dev_ep_trans+0x8c>
    8920:	1e55      	subs	r5, r2, #1
    8922:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    8924:	6841      	ldr	r1, [r0, #4]
    8926:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    8928:	2b05      	cmp	r3, #5
    892a:	f200 8092 	bhi.w	8a52 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    892e:	6803      	ldr	r3, [r0, #0]
    8930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    8934:	d31c      	bcc.n	8970 <_usb_d_dev_ep_trans+0x90>
    8936:	eb03 0c01 	add.w	ip, r3, r1
    893a:	f8df e180 	ldr.w	lr, [pc, #384]	; 8abc <_usb_d_dev_ep_trans+0x1dc>
    893e:	45f4      	cmp	ip, lr
    8940:	d816      	bhi.n	8970 <_usb_d_dev_ep_trans+0x90>
    8942:	f013 0f03 	tst.w	r3, #3
    8946:	d113      	bne.n	8970 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    8948:	2e00      	cmp	r6, #0
    894a:	db2a      	blt.n	89a2 <_usb_d_dev_ep_trans+0xc2>
    894c:	428a      	cmp	r2, r1
    894e:	f200 809c 	bhi.w	8a8a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    8952:	b34d      	cbz	r5, 89a8 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    8954:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8958:	4a52      	ldr	r2, [pc, #328]	; (8aa4 <_usb_d_dev_ep_trans+0x1c4>)
    895a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    895e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8962:	2b00      	cmp	r3, #0
    8964:	d07b      	beq.n	8a5e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    8966:	f04f 0800 	mov.w	r8, #0
    896a:	e00c      	b.n	8986 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    896c:	4615      	mov	r5, r2
    896e:	e7d9      	b.n	8924 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    8970:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8974:	4a4b      	ldr	r2, [pc, #300]	; (8aa4 <_usb_d_dev_ep_trans+0x1c4>)
    8976:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    897a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    897e:	2b00      	cmp	r3, #0
    8980:	d06a      	beq.n	8a58 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    8982:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    8986:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    898a:	4a46      	ldr	r2, [pc, #280]	; (8aa4 <_usb_d_dev_ep_trans+0x1c4>)
    898c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8990:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8994:	f013 0f08 	tst.w	r3, #8
    8998:	d009      	beq.n	89ae <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    899a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    899c:	b003      	add	sp, #12
    899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    89a2:	f04f 0800 	mov.w	r8, #0
    89a6:	e7ee      	b.n	8986 <_usb_d_dev_ep_trans+0xa6>
    89a8:	f04f 0800 	mov.w	r8, #0
    89ac:	e7eb      	b.n	8986 <_usb_d_dev_ep_trans+0xa6>
    89ae:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    89b0:	a801      	add	r0, sp, #4
    89b2:	4b3d      	ldr	r3, [pc, #244]	; (8aa8 <_usb_d_dev_ep_trans+0x1c8>)
    89b4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    89b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    89ba:	4a3a      	ldr	r2, [pc, #232]	; (8aa4 <_usb_d_dev_ep_trans+0x1c4>)
    89bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    89c0:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    89c4:	f013 0f40 	tst.w	r3, #64	; 0x40
    89c8:	d13c      	bne.n	8a44 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    89ca:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    89ce:	4b35      	ldr	r3, [pc, #212]	; (8aa4 <_usb_d_dev_ep_trans+0x1c4>)
    89d0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    89d4:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    89d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    89dc:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    89e0:	a801      	add	r0, sp, #4
    89e2:	4b32      	ldr	r3, [pc, #200]	; (8aac <_usb_d_dev_ep_trans+0x1cc>)
    89e4:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    89e6:	f8da 3000 	ldr.w	r3, [sl]
    89ea:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    89ee:	f8da 3004 	ldr.w	r3, [sl, #4]
    89f2:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    89f6:	2300      	movs	r3, #0
    89f8:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    89fc:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    89fe:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    8a02:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    8a06:	f368 1345 	bfi	r3, r8, #5, #1
    8a0a:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    8a0e:	f89a 3009 	ldrb.w	r3, [sl, #9]
    8a12:	b1e3      	cbz	r3, 8a4e <_usb_d_dev_ep_trans+0x16e>
    8a14:	fab5 f585 	clz	r5, r5
    8a18:	096d      	lsrs	r5, r5, #5
    8a1a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    8a1e:	4b21      	ldr	r3, [pc, #132]	; (8aa4 <_usb_d_dev_ep_trans+0x1c4>)
    8a20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    8a24:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    8a28:	f365 1304 	bfi	r3, r5, #4, #1
    8a2c:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    8a30:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    8a32:	f04f 0100 	mov.w	r1, #0
    8a36:	4638      	mov	r0, r7
    8a38:	bfb4      	ite	lt
    8a3a:	4b1d      	ldrlt	r3, [pc, #116]	; (8ab0 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    8a3c:	4b1d      	ldrge	r3, [pc, #116]	; (8ab4 <_usb_d_dev_ep_trans+0x1d4>)
    8a3e:	4798      	blx	r3
	return ERR_NONE;
    8a40:	2000      	movs	r0, #0
    8a42:	e7ab      	b.n	899c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    8a44:	a801      	add	r0, sp, #4
    8a46:	4b19      	ldr	r3, [pc, #100]	; (8aac <_usb_d_dev_ep_trans+0x1cc>)
    8a48:	4798      	blx	r3
		return USB_BUSY;
    8a4a:	2001      	movs	r0, #1
    8a4c:	e7a6      	b.n	899c <_usb_d_dev_ep_trans+0xbc>
    8a4e:	2500      	movs	r5, #0
    8a50:	e7e3      	b.n	8a1a <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    8a52:	f06f 0011 	mvn.w	r0, #17
    8a56:	e7a1      	b.n	899c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    8a58:	f06f 0012 	mvn.w	r0, #18
    8a5c:	e79e      	b.n	899c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    8a5e:	f06f 0011 	mvn.w	r0, #17
    8a62:	e79b      	b.n	899c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    8a64:	f06f 0012 	mvn.w	r0, #18
    8a68:	e798      	b.n	899c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    8a6a:	6841      	ldr	r1, [r0, #4]
    8a6c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    8a70:	4f11      	ldr	r7, [pc, #68]	; (8ab8 <_usb_d_dev_ep_trans+0x1d8>)
    8a72:	2400      	movs	r4, #0
    8a74:	e75b      	b.n	892e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8a76:	4a0b      	ldr	r2, [pc, #44]	; (8aa4 <_usb_d_dev_ep_trans+0x1c4>)
    8a78:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    8a7c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    8a80:	428a      	cmp	r2, r1
    8a82:	d0f2      	beq.n	8a6a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    8a84:	4f0c      	ldr	r7, [pc, #48]	; (8ab8 <_usb_d_dev_ep_trans+0x1d8>)
    8a86:	2400      	movs	r4, #0
    8a88:	e74a      	b.n	8920 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    8a8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8a8e:	4a05      	ldr	r2, [pc, #20]	; (8aa4 <_usb_d_dev_ep_trans+0x1c4>)
    8a90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8a98:	2b00      	cmp	r3, #0
    8a9a:	d0e3      	beq.n	8a64 <_usb_d_dev_ep_trans+0x184>
    8a9c:	f04f 0801 	mov.w	r8, #1
    8aa0:	e771      	b.n	8986 <_usb_d_dev_ep_trans+0xa6>
    8aa2:	bf00      	nop
    8aa4:	200009bc 	.word	0x200009bc
    8aa8:	00004075 	.word	0x00004075
    8aac:	00004083 	.word	0x00004083
    8ab0:	00007b11 	.word	0x00007b11
    8ab4:	00007c95 	.word	0x00007c95
    8ab8:	20000a90 	.word	0x20000a90
    8abc:	20041fff 	.word	0x20041fff

00008ac0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    8ac0:	4b07      	ldr	r3, [pc, #28]	; (8ae0 <_usb_d_dev_register_callback+0x20>)
    8ac2:	2900      	cmp	r1, #0
    8ac4:	bf08      	it	eq
    8ac6:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    8ac8:	2801      	cmp	r0, #1
    8aca:	d004      	beq.n	8ad6 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    8acc:	b910      	cbnz	r0, 8ad4 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    8ace:	4b05      	ldr	r3, [pc, #20]	; (8ae4 <_usb_d_dev_register_callback+0x24>)
    8ad0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    8ad4:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    8ad6:	4b03      	ldr	r3, [pc, #12]	; (8ae4 <_usb_d_dev_register_callback+0x24>)
    8ad8:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    8adc:	4770      	bx	lr
    8ade:	bf00      	nop
    8ae0:	00007881 	.word	0x00007881
    8ae4:	200009bc 	.word	0x200009bc

00008ae8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    8ae8:	4b0a      	ldr	r3, [pc, #40]	; (8b14 <_usb_d_dev_register_ep_callback+0x2c>)
    8aea:	2900      	cmp	r1, #0
    8aec:	bf08      	it	eq
    8aee:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    8af0:	4603      	mov	r3, r0
    8af2:	b138      	cbz	r0, 8b04 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    8af4:	2801      	cmp	r0, #1
    8af6:	d009      	beq.n	8b0c <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    8af8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    8afa:	bf04      	itt	eq
    8afc:	4b06      	ldreq	r3, [pc, #24]	; (8b18 <_usb_d_dev_register_ep_callback+0x30>)
    8afe:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    8b02:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    8b04:	4b04      	ldr	r3, [pc, #16]	; (8b18 <_usb_d_dev_register_ep_callback+0x30>)
    8b06:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    8b0a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    8b0c:	4b02      	ldr	r3, [pc, #8]	; (8b18 <_usb_d_dev_register_ep_callback+0x30>)
    8b0e:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    8b12:	4770      	bx	lr
    8b14:	00007881 	.word	0x00007881
    8b18:	200009bc 	.word	0x200009bc

00008b1c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    8b1c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8b1e:	4b01      	ldr	r3, [pc, #4]	; (8b24 <USB_0_Handler+0x8>)
    8b20:	4798      	blx	r3
    8b22:	bd08      	pop	{r3, pc}
    8b24:	00007e85 	.word	0x00007e85

00008b28 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    8b28:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8b2a:	4b01      	ldr	r3, [pc, #4]	; (8b30 <USB_1_Handler+0x8>)
    8b2c:	4798      	blx	r3
    8b2e:	bd08      	pop	{r3, pc}
    8b30:	00007e85 	.word	0x00007e85

00008b34 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    8b34:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8b36:	4b01      	ldr	r3, [pc, #4]	; (8b3c <USB_2_Handler+0x8>)
    8b38:	4798      	blx	r3
    8b3a:	bd08      	pop	{r3, pc}
    8b3c:	00007e85 	.word	0x00007e85

00008b40 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    8b40:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8b42:	4b01      	ldr	r3, [pc, #4]	; (8b48 <USB_3_Handler+0x8>)
    8b44:	4798      	blx	r3
    8b46:	bd08      	pop	{r3, pc}
    8b48:	00007e85 	.word	0x00007e85

00008b4c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    8b4c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    8b4e:	4604      	mov	r4, r0
    8b50:	b340      	cbz	r0, 8ba4 <_wdt_init+0x58>
    8b52:	6800      	ldr	r0, [r0, #0]
    8b54:	3000      	adds	r0, #0
    8b56:	bf18      	it	ne
    8b58:	2001      	movne	r0, #1
    8b5a:	2250      	movs	r2, #80	; 0x50
    8b5c:	4915      	ldr	r1, [pc, #84]	; (8bb4 <_wdt_init+0x68>)
    8b5e:	4b16      	ldr	r3, [pc, #88]	; (8bb8 <_wdt_init+0x6c>)
    8b60:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    8b62:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    8b64:	689a      	ldr	r2, [r3, #8]
    8b66:	f012 0f0e 	tst.w	r2, #14
    8b6a:	d1fb      	bne.n	8b64 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    8b6c:	781a      	ldrb	r2, [r3, #0]
    8b6e:	09d2      	lsrs	r2, r2, #7
    8b70:	d11a      	bne.n	8ba8 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    8b72:	689a      	ldr	r2, [r3, #8]
    8b74:	f012 0f0e 	tst.w	r2, #14
    8b78:	d1fb      	bne.n	8b72 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    8b7a:	781a      	ldrb	r2, [r3, #0]
    8b7c:	f012 0f02 	tst.w	r2, #2
    8b80:	d115      	bne.n	8bae <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    8b82:	781a      	ldrb	r2, [r3, #0]
    8b84:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    8b88:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    8b8a:	689a      	ldr	r2, [r3, #8]
    8b8c:	f012 0f0e 	tst.w	r2, #14
    8b90:	d1fb      	bne.n	8b8a <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    8b92:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    8b94:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    8b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    8b9a:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    8b9e:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    8ba0:	2000      	movs	r0, #0
    8ba2:	bd10      	pop	{r4, pc}
    8ba4:	2000      	movs	r0, #0
    8ba6:	e7d8      	b.n	8b5a <_wdt_init+0xe>
		return ERR_DENIED;
    8ba8:	f06f 0010 	mvn.w	r0, #16
    8bac:	bd10      	pop	{r4, pc}
    8bae:	f06f 0010 	mvn.w	r0, #16
}
    8bb2:	bd10      	pop	{r4, pc}
    8bb4:	0000c30c 	.word	0x0000c30c
    8bb8:	00005259 	.word	0x00005259

00008bbc <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    8bbc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    8bbe:	4604      	mov	r4, r0
    8bc0:	b1d0      	cbz	r0, 8bf8 <_wdt_disable+0x3c>
    8bc2:	6800      	ldr	r0, [r0, #0]
    8bc4:	3000      	adds	r0, #0
    8bc6:	bf18      	it	ne
    8bc8:	2001      	movne	r0, #1
    8bca:	f44f 7284 	mov.w	r2, #264	; 0x108
    8bce:	490d      	ldr	r1, [pc, #52]	; (8c04 <_wdt_disable+0x48>)
    8bd0:	4b0d      	ldr	r3, [pc, #52]	; (8c08 <_wdt_disable+0x4c>)
    8bd2:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    8bd4:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    8bd6:	689a      	ldr	r2, [r3, #8]
    8bd8:	f012 0f0e 	tst.w	r2, #14
    8bdc:	d1fb      	bne.n	8bd6 <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    8bde:	781a      	ldrb	r2, [r3, #0]
    8be0:	09d2      	lsrs	r2, r2, #7
    8be2:	d10b      	bne.n	8bfc <_wdt_disable+0x40>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    8be4:	781a      	ldrb	r2, [r3, #0]
    8be6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    8bea:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    8bec:	689a      	ldr	r2, [r3, #8]
    8bee:	f012 0f0e 	tst.w	r2, #14
    8bf2:	d1fb      	bne.n	8bec <_wdt_disable+0x30>
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    8bf4:	2000      	movs	r0, #0
    8bf6:	bd10      	pop	{r4, pc}
    8bf8:	2000      	movs	r0, #0
    8bfa:	e7e6      	b.n	8bca <_wdt_disable+0xe>
		return ERR_DENIED;
    8bfc:	f06f 0010 	mvn.w	r0, #16
}
    8c00:	bd10      	pop	{r4, pc}
    8c02:	bf00      	nop
    8c04:	0000c30c 	.word	0x0000c30c
    8c08:	00005259 	.word	0x00005259

00008c0c <RTC_Scheduler_ping_cb>:
}


static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag++;
    8c0c:	4a04      	ldr	r2, [pc, #16]	; (8c20 <RTC_Scheduler_ping_cb+0x14>)
    8c0e:	7813      	ldrb	r3, [r2, #0]
    8c10:	3301      	adds	r3, #1
    8c12:	b2db      	uxtb	r3, r3
    8c14:	7013      	strb	r3, [r2, #0]
	pingflag_active++;
    8c16:	7853      	ldrb	r3, [r2, #1]
    8c18:	3301      	adds	r3, #1
    8c1a:	b2db      	uxtb	r3, r3
    8c1c:	7053      	strb	r3, [r2, #1]
    8c1e:	4770      	bx	lr
    8c20:	20000d7c 	.word	0x20000d7c

00008c24 <RTC_Scheduler_realtime_cb>:
}


static void RTC_Scheduler_realtime_cb(const struct timer_task *const timer_task)
{
    8c24:	b508      	push	{r3, lr}
	grid_sys_rtc_tick_time(&grid_sys_state);
    8c26:	4802      	ldr	r0, [pc, #8]	; (8c30 <RTC_Scheduler_realtime_cb+0xc>)
    8c28:	4b02      	ldr	r3, [pc, #8]	; (8c34 <RTC_Scheduler_realtime_cb+0x10>)
    8c2a:	4798      	blx	r3
    8c2c:	bd08      	pop	{r3, pc}
    8c2e:	bf00      	nop
    8c30:	20001ca4 	.word	0x20001ca4
    8c34:	00003643 	.word	0x00003643

00008c38 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    8c38:	69c3      	ldr	r3, [r0, #28]
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d147      	bne.n	8cce <grid_port_receive_task+0x96>
void grid_port_receive_task(struct grid_port* por){
    8c3e:	b530      	push	{r4, r5, lr}
    8c40:	b083      	sub	sp, #12
    8c42:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 2000){
    8c44:	6983      	ldr	r3, [r0, #24]
    8c46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    8c4a:	d91c      	bls.n	8c86 <grid_port_receive_task+0x4e>
		if (por->partner_status == 1){
    8c4c:	f890 350f 	ldrb.w	r3, [r0, #1295]	; 0x50f
    8c50:	2b01      	cmp	r3, #1
    8c52:	d005      	beq.n	8c60 <grid_port_receive_task+0x28>
			por->rx_double_buffer_seek_start_index = 0;
    8c54:	2300      	movs	r3, #0
    8c56:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    8c58:	6243      	str	r3, [r0, #36]	; 0x24
			grid_sys_port_reset_dma(por);
    8c5a:	4b1d      	ldr	r3, [pc, #116]	; (8cd0 <grid_port_receive_task+0x98>)
    8c5c:	4798      	blx	r3
    8c5e:	e014      	b.n	8c8a <grid_port_receive_task+0x52>
			por->rx_double_buffer_seek_start_index = 0;
    8c60:	2300      	movs	r3, #0
    8c62:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    8c64:	6243      	str	r3, [r0, #36]	; 0x24
			por->partner_status = 0;
    8c66:	f880 350f 	strb.w	r3, [r0, #1295]	; 0x50f
			por->rx_double_buffer_timeout =0;
    8c6a:	6183      	str	r3, [r0, #24]
			grid_sys_port_reset_dma(por);
    8c6c:	4b18      	ldr	r3, [pc, #96]	; (8cd0 <grid_port_receive_task+0x98>)
    8c6e:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    8c70:	23c8      	movs	r3, #200	; 0xc8
    8c72:	9301      	str	r3, [sp, #4]
    8c74:	2302      	movs	r3, #2
    8c76:	9300      	str	r3, [sp, #0]
    8c78:	23ff      	movs	r3, #255	; 0xff
    8c7a:	461a      	mov	r2, r3
    8c7c:	4619      	mov	r1, r3
    8c7e:	4815      	ldr	r0, [pc, #84]	; (8cd4 <grid_port_receive_task+0x9c>)
    8c80:	4d15      	ldr	r5, [pc, #84]	; (8cd8 <grid_port_receive_task+0xa0>)
    8c82:	47a8      	blx	r5
    8c84:	e001      	b.n	8c8a <grid_port_receive_task+0x52>
		por->rx_double_buffer_timeout++;
    8c86:	3301      	adds	r3, #1
    8c88:	6183      	str	r3, [r0, #24]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    8c8a:	6a23      	ldr	r3, [r4, #32]
    8c8c:	18e2      	adds	r2, r4, r3
    8c8e:	f892 2280 	ldrb.w	r2, [r2, #640]	; 0x280
    8c92:	2a0a      	cmp	r2, #10
    8c94:	d015      	beq.n	8cc2 <grid_port_receive_task+0x8a>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    8c96:	b1c2      	cbz	r2, 8cca <grid_port_receive_task+0x92>
    8c98:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    8c9c:	f240 2056 	movw	r0, #598	; 0x256
			por->rx_double_buffer_seek_start_index=0;
    8ca0:	2500      	movs	r5, #0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    8ca2:	4283      	cmp	r3, r0
			por->rx_double_buffer_seek_start_index++;			
    8ca4:	bf9a      	itte	ls
    8ca6:	3301      	addls	r3, #1
    8ca8:	6223      	strls	r3, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    8caa:	6225      	strhi	r5, [r4, #32]
	for(uint32_t i = 0; i<490; i++){
    8cac:	3a01      	subs	r2, #1
    8cae:	d00c      	beq.n	8cca <grid_port_receive_task+0x92>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    8cb0:	6a23      	ldr	r3, [r4, #32]
    8cb2:	18e1      	adds	r1, r4, r3
    8cb4:	f891 1280 	ldrb.w	r1, [r1, #640]	; 0x280
    8cb8:	290a      	cmp	r1, #10
    8cba:	d002      	beq.n	8cc2 <grid_port_receive_task+0x8a>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    8cbc:	2900      	cmp	r1, #0
    8cbe:	d1f0      	bne.n	8ca2 <grid_port_receive_task+0x6a>
    8cc0:	e003      	b.n	8cca <grid_port_receive_task+0x92>
			por->rx_double_buffer_status = 1;
    8cc2:	2301      	movs	r3, #1
    8cc4:	61e3      	str	r3, [r4, #28]
			por->rx_double_buffer_timeout = 0;
    8cc6:	2300      	movs	r3, #0
    8cc8:	61a3      	str	r3, [r4, #24]
}
    8cca:	b003      	add	sp, #12
    8ccc:	bd30      	pop	{r4, r5, pc}
    8cce:	4770      	bx	lr
    8cd0:	000033e9 	.word	0x000033e9
    8cd4:	20001ca4 	.word	0x20001ca4
    8cd8:	0000369d 	.word	0x0000369d

00008cdc <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t length){
    8cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ce0:	b08b      	sub	sp, #44	; 0x2c
    8ce2:	af02      	add	r7, sp, #8
    8ce4:	4604      	mov	r4, r0
    8ce6:	4615      	mov	r5, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    8ce8:	2301      	movs	r3, #1
    8cea:	753b      	strb	r3, [r7, #20]
	response[1] = GRID_MSG_DIRECT;
    8cec:	230e      	movs	r3, #14
    8cee:	757b      	strb	r3, [r7, #21]
	response[2] = GRID_MSG_NACKNOWLEDGE;
    8cf0:	2315      	movs	r3, #21
    8cf2:	75bb      	strb	r3, [r7, #22]
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    8cf4:	2304      	movs	r3, #4
    8cf6:	75fb      	strb	r3, [r7, #23]
	response[4] = '0'; //checksum
    8cf8:	2330      	movs	r3, #48	; 0x30
    8cfa:	763b      	strb	r3, [r7, #24]
	response[5] = '0'; //checksum
    8cfc:	767b      	strb	r3, [r7, #25]
	response[6] = '\n';
    8cfe:	230a      	movs	r3, #10
    8d00:	76bb      	strb	r3, [r7, #26]
	response[7] = 0;
    8d02:	2300      	movs	r3, #0
    8d04:	76fb      	strb	r3, [r7, #27]
	response[8] = 0;
    8d06:	773b      	strb	r3, [r7, #28]
	response[9] = 0;
    8d08:	777b      	strb	r3, [r7, #29]
	uint8_t error_flag = 0;
    8d0a:	74fb      	strb	r3, [r7, #19]
	uint8_t message[length];
    8d0c:	1dd3      	adds	r3, r2, #7
    8d0e:	f023 0307 	bic.w	r3, r3, #7
    8d12:	ebad 0d03 	sub.w	sp, sp, r3
    8d16:	ae02      	add	r6, sp, #8
    8d18:	46b0      	mov	r8, r6
	for (uint32_t i = 0; i<length; i++){
    8d1a:	b1b2      	cbz	r2, 8d4a <grid_port_receive_decode+0x6e>
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    8d1c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8d1e:	eb06 0c02 	add.w	ip, r6, r2
    8d22:	4632      	mov	r2, r6
    8d24:	1b89      	subs	r1, r1, r6
    8d26:	f8df e304 	ldr.w	lr, [pc, #772]	; 902c <grid_port_receive_decode+0x350>
    8d2a:	f44f 7016 	mov.w	r0, #600	; 0x258
    8d2e:	eb01 0902 	add.w	r9, r1, r2
    8d32:	fbae a309 	umull	sl, r3, lr, r9
    8d36:	099b      	lsrs	r3, r3, #6
    8d38:	fb00 9313 	mls	r3, r0, r3, r9
    8d3c:	4423      	add	r3, r4
    8d3e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
    8d42:	f802 3b01 	strb.w	r3, [r2], #1
	for (uint32_t i = 0; i<length; i++){
    8d46:	4594      	cmp	ip, r2
    8d48:	d1f1      	bne.n	8d2e <grid_port_receive_decode+0x52>
	if (message[0] == 1 && message [length-1] == 10){
    8d4a:	7833      	ldrb	r3, [r6, #0]
    8d4c:	2b01      	cmp	r3, #1
    8d4e:	d02f      	beq.n	8db0 <grid_port_receive_decode+0xd4>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 255, 1, 2000); // BLUE BLINKY	
    8d50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    8d54:	9301      	str	r3, [sp, #4]
    8d56:	2301      	movs	r3, #1
    8d58:	9300      	str	r3, [sp, #0]
    8d5a:	23ff      	movs	r3, #255	; 0xff
    8d5c:	2200      	movs	r2, #0
    8d5e:	4611      	mov	r1, r2
    8d60:	48b0      	ldr	r0, [pc, #704]	; (9024 <grid_port_receive_decode+0x348>)
    8d62:	4eb1      	ldr	r6, [pc, #708]	; (9028 <grid_port_receive_decode+0x34c>)
    8d64:	47b0      	blx	r6
	for (uint32_t i = 0; i<length; i++){
    8d66:	b18d      	cbz	r5, 8d8c <grid_port_receive_decode+0xb0>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    8d68:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8d6a:	eb05 0e02 	add.w	lr, r5, r2
    8d6e:	4eaf      	ldr	r6, [pc, #700]	; (902c <grid_port_receive_decode+0x350>)
    8d70:	f44f 7016 	mov.w	r0, #600	; 0x258
    8d74:	2100      	movs	r1, #0
    8d76:	fba6 c302 	umull	ip, r3, r6, r2
    8d7a:	099b      	lsrs	r3, r3, #6
    8d7c:	fb00 2313 	mls	r3, r0, r3, r2
    8d80:	4423      	add	r3, r4
    8d82:	f883 1280 	strb.w	r1, [r3, #640]	; 0x280
    8d86:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    8d88:	4596      	cmp	lr, r2
    8d8a:	d1f4      	bne.n	8d76 <grid_port_receive_decode+0x9a>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    8d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8d8e:	441d      	add	r5, r3
    8d90:	4ba6      	ldr	r3, [pc, #664]	; (902c <grid_port_receive_decode+0x350>)
    8d92:	fba3 2305 	umull	r2, r3, r3, r5
    8d96:	099b      	lsrs	r3, r3, #6
    8d98:	f44f 7216 	mov.w	r2, #600	; 0x258
    8d9c:	fb02 5313 	mls	r3, r2, r3, r5
    8da0:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    8da2:	6223      	str	r3, [r4, #32]
	por->rx_double_buffer_status = 0;
    8da4:	2300      	movs	r3, #0
    8da6:	61e3      	str	r3, [r4, #28]
}
    8da8:	3724      	adds	r7, #36	; 0x24
    8daa:	46bd      	mov	sp, r7
    8dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (message[0] == 1 && message [length-1] == 10){
    8db0:	1973      	adds	r3, r6, r5
    8db2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    8db6:	2b0a      	cmp	r3, #10
    8db8:	d1ca      	bne.n	8d50 <grid_port_receive_decode+0x74>
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    8dba:	1ee8      	subs	r0, r5, #3
    8dbc:	f107 0213 	add.w	r2, r7, #19
    8dc0:	2102      	movs	r1, #2
    8dc2:	4430      	add	r0, r6
    8dc4:	4b9a      	ldr	r3, [pc, #616]	; (9030 <grid_port_receive_decode+0x354>)
    8dc6:	4798      	blx	r3
    8dc8:	4681      	mov	r9, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    8dca:	4629      	mov	r1, r5
    8dcc:	4630      	mov	r0, r6
    8dce:	4b99      	ldr	r3, [pc, #612]	; (9034 <grid_port_receive_decode+0x358>)
    8dd0:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    8dd2:	fa5f f989 	uxtb.w	r9, r9
    8dd6:	b2c0      	uxtb	r0, r0
    8dd8:	4581      	cmp	r9, r0
    8dda:	d00f      	beq.n	8dfc <grid_port_receive_decode+0x120>
			if (error_flag != 0){		
    8ddc:	7cfb      	ldrb	r3, [r7, #19]
    8dde:	2b00      	cmp	r3, #0
    8de0:	f040 8187 	bne.w	90f2 <grid_port_receive_decode+0x416>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 255, 1, 2000); // PURPLE BLINKY
    8de4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    8de8:	9301      	str	r3, [sp, #4]
    8dea:	2301      	movs	r3, #1
    8dec:	9300      	str	r3, [sp, #0]
    8dee:	23ff      	movs	r3, #255	; 0xff
    8df0:	2200      	movs	r2, #0
    8df2:	4619      	mov	r1, r3
    8df4:	488b      	ldr	r0, [pc, #556]	; (9024 <grid_port_receive_decode+0x348>)
    8df6:	4e8c      	ldr	r6, [pc, #560]	; (9028 <grid_port_receive_decode+0x34c>)
    8df8:	47b0      	blx	r6
    8dfa:	e7b4      	b.n	8d66 <grid_port_receive_decode+0x8a>
		if (checksum_calculated == checksum_received && error_flag == 0){
    8dfc:	f897 b013 	ldrb.w	fp, [r7, #19]
    8e00:	f1bb 0f00 	cmp.w	fp, #0
    8e04:	f040 8175 	bne.w	90f2 <grid_port_receive_decode+0x416>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    8e08:	7873      	ldrb	r3, [r6, #1]
    8e0a:	2b0f      	cmp	r3, #15
    8e0c:	d00d      	beq.n	8e2a <grid_port_receive_decode+0x14e>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    8e0e:	2b0e      	cmp	r3, #14
    8e10:	f000 80cc 	beq.w	8fac <grid_port_receive_decode+0x2d0>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    8e14:	23c8      	movs	r3, #200	; 0xc8
    8e16:	9301      	str	r3, [sp, #4]
    8e18:	2302      	movs	r3, #2
    8e1a:	9300      	str	r3, [sp, #0]
    8e1c:	2300      	movs	r3, #0
    8e1e:	461a      	mov	r2, r3
    8e20:	21ff      	movs	r1, #255	; 0xff
    8e22:	4880      	ldr	r0, [pc, #512]	; (9024 <grid_port_receive_decode+0x348>)
    8e24:	4e80      	ldr	r6, [pc, #512]	; (9028 <grid_port_receive_decode+0x34c>)
    8e26:	47b0      	blx	r6
    8e28:	e79d      	b.n	8d66 <grid_port_receive_decode+0x8a>
				uint8_t received_id  = grid_msg_get_id(message);;			
    8e2a:	4630      	mov	r0, r6
    8e2c:	4b82      	ldr	r3, [pc, #520]	; (9038 <grid_port_receive_decode+0x35c>)
    8e2e:	4798      	blx	r3
    8e30:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_age(message);
    8e32:	4630      	mov	r0, r6
    8e34:	4b81      	ldr	r3, [pc, #516]	; (903c <grid_port_receive_decode+0x360>)
    8e36:	4798      	blx	r3
    8e38:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    8e3a:	4630      	mov	r0, r6
    8e3c:	4b80      	ldr	r3, [pc, #512]	; (9040 <grid_port_receive_decode+0x364>)
    8e3e:	4798      	blx	r3
    8e40:	4682      	mov	sl, r0
    8e42:	f1a0 097f 	sub.w	r9, r0, #127	; 0x7f
    8e46:	fa4f f989 	sxtb.w	r9, r9
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    8e4a:	4630      	mov	r0, r6
    8e4c:	4b7d      	ldr	r3, [pc, #500]	; (9044 <grid_port_receive_decode+0x368>)
    8e4e:	4798      	blx	r3
    8e50:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    8e54:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    8e56:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
    8e5a:	b182      	cbz	r2, 8e7e <grid_port_receive_decode+0x1a2>
				else if(por->partner_fi == 1){ // 90 deg
    8e5c:	2a01      	cmp	r2, #1
    8e5e:	d009      	beq.n	8e74 <grid_port_receive_decode+0x198>
				else if(por->partner_fi == 2){ // 180 deg
    8e60:	2a02      	cmp	r2, #2
    8e62:	d163      	bne.n	8f2c <grid_port_receive_decode+0x250>
					rotated_dx  -= received_dx;
    8e64:	f1ca 097f 	rsb	r9, sl, #127	; 0x7f
    8e68:	fa4f f989 	sxtb.w	r9, r9
					rotated_dy  -= received_dy;
    8e6c:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    8e70:	b25b      	sxtb	r3, r3
    8e72:	e004      	b.n	8e7e <grid_port_receive_decode+0x1a2>
					rotated_dx  -= received_dy;
    8e74:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    8e78:	464b      	mov	r3, r9
					rotated_dx  -= received_dy;
    8e7a:	fa4f f980 	sxtb.w	r9, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    8e7e:	f894 a50d 	ldrb.w	sl, [r4, #1293]	; 0x50d
    8e82:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    8e86:	44d1      	add	r9, sl
    8e88:	fa5f fa89 	uxtb.w	sl, r9
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    8e8c:	f894 950e 	ldrb.w	r9, [r4, #1294]	; 0x50e
    8e90:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    8e94:	444b      	add	r3, r9
    8e96:	fa5f f983 	uxtb.w	r9, r3
				grid_msg_set_id(message, updated_id);
    8e9a:	6879      	ldr	r1, [r7, #4]
    8e9c:	4630      	mov	r0, r6
    8e9e:	4b6a      	ldr	r3, [pc, #424]	; (9048 <grid_port_receive_decode+0x36c>)
    8ea0:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    8ea2:	4651      	mov	r1, sl
    8ea4:	4630      	mov	r0, r6
    8ea6:	4b69      	ldr	r3, [pc, #420]	; (904c <grid_port_receive_decode+0x370>)
    8ea8:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    8eaa:	4649      	mov	r1, r9
    8eac:	4630      	mov	r0, r6
    8eae:	4b68      	ldr	r3, [pc, #416]	; (9050 <grid_port_receive_decode+0x374>)
    8eb0:	4798      	blx	r3
				uint8_t updated_age = received_age + 1;
    8eb2:	6839      	ldr	r1, [r7, #0]
    8eb4:	3101      	adds	r1, #1
				grid_msg_set_age(message, updated_age);
    8eb6:	b2c9      	uxtb	r1, r1
    8eb8:	4630      	mov	r0, r6
    8eba:	4b66      	ldr	r3, [pc, #408]	; (9054 <grid_port_receive_decode+0x378>)
    8ebc:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256;// no age here + updated_age;
    8ebe:	687b      	ldr	r3, [r7, #4]
    8ec0:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
    8ec4:	eb09 290a 	add.w	r9, r9, sl, lsl #8
    8ec8:	ea4f 2909 	mov.w	r9, r9, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    8ecc:	4649      	mov	r1, r9
    8ece:	4855      	ldr	r0, [pc, #340]	; (9024 <grid_port_receive_decode+0x348>)
    8ed0:	4b61      	ldr	r3, [pc, #388]	; (9058 <grid_port_receive_decode+0x37c>)
    8ed2:	4798      	blx	r3
    8ed4:	2800      	cmp	r0, #0
    8ed6:	d134      	bne.n	8f42 <grid_port_receive_decode+0x266>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    8ed8:	4629      	mov	r1, r5
    8eda:	4630      	mov	r0, r6
    8edc:	4b55      	ldr	r3, [pc, #340]	; (9034 <grid_port_receive_decode+0x358>)
    8ede:	4798      	blx	r3
    8ee0:	4602      	mov	r2, r0
    8ee2:	4629      	mov	r1, r5
    8ee4:	4630      	mov	r0, r6
    8ee6:	4b5d      	ldr	r3, [pc, #372]	; (905c <grid_port_receive_decode+0x380>)
    8ee8:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    8eea:	f504 669e 	add.w	r6, r4, #1264	; 0x4f0
    8eee:	b2a9      	uxth	r1, r5
    8ef0:	4630      	mov	r0, r6
    8ef2:	4b5b      	ldr	r3, [pc, #364]	; (9060 <grid_port_receive_decode+0x384>)
    8ef4:	4798      	blx	r3
    8ef6:	b380      	cbz	r0, 8f5a <grid_port_receive_decode+0x27e>
						for (uint8_t i=0; i<length; i++){
    8ef8:	b15d      	cbz	r5, 8f12 <grid_port_receive_decode+0x236>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    8efa:	f8df a178 	ldr.w	sl, [pc, #376]	; 9074 <grid_port_receive_decode+0x398>
    8efe:	f818 100b 	ldrb.w	r1, [r8, fp]
    8f02:	4630      	mov	r0, r6
    8f04:	47d0      	blx	sl
						for (uint8_t i=0; i<length; i++){
    8f06:	f10b 0b01 	add.w	fp, fp, #1
    8f0a:	fa5f fb8b 	uxtb.w	fp, fp
    8f0e:	455d      	cmp	r5, fp
    8f10:	d8f5      	bhi.n	8efe <grid_port_receive_decode+0x222>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    8f12:	4630      	mov	r0, r6
    8f14:	4b53      	ldr	r3, [pc, #332]	; (9064 <grid_port_receive_decode+0x388>)
    8f16:	4798      	blx	r3
						grid_port_process_inbound(por);
    8f18:	4620      	mov	r0, r4
    8f1a:	4b53      	ldr	r3, [pc, #332]	; (9068 <grid_port_receive_decode+0x38c>)
    8f1c:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    8f1e:	4649      	mov	r1, r9
    8f20:	4840      	ldr	r0, [pc, #256]	; (9024 <grid_port_receive_decode+0x348>)
    8f22:	4b52      	ldr	r3, [pc, #328]	; (906c <grid_port_receive_decode+0x390>)
    8f24:	4798      	blx	r3
						response[2] = GRID_MSG_ACKNOWLEDGE;
    8f26:	2306      	movs	r3, #6
    8f28:	75bb      	strb	r3, [r7, #22]
    8f2a:	e016      	b.n	8f5a <grid_port_receive_decode+0x27e>
				else if(por->partner_fi == 3){ // 270 deg
    8f2c:	2a03      	cmp	r2, #3
    8f2e:	d105      	bne.n	8f3c <grid_port_receive_decode+0x260>
					rotated_dy  -= received_dx;
    8f30:	f1ca 0a7f 	rsb	sl, sl, #127	; 0x7f
					rotated_dx  += received_dy;
    8f34:	4699      	mov	r9, r3
					rotated_dy  -= received_dx;
    8f36:	fa4f f38a 	sxtb.w	r3, sl
    8f3a:	e7a0      	b.n	8e7e <grid_port_receive_decode+0x1a2>
				int8_t rotated_dy = 0;
    8f3c:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    8f3e:	4699      	mov	r9, r3
    8f40:	e79d      	b.n	8e7e <grid_port_receive_decode+0x1a2>
					response[2] = GRID_MSG_ACKNOWLEDGE;							
    8f42:	2306      	movs	r3, #6
    8f44:	75bb      	strb	r3, [r7, #22]
					grid_sys_alert_set_alert(&grid_sys_state, 50, 50, 50, 2, 200); // WHITE
    8f46:	23c8      	movs	r3, #200	; 0xc8
    8f48:	9301      	str	r3, [sp, #4]
    8f4a:	2302      	movs	r3, #2
    8f4c:	9300      	str	r3, [sp, #0]
    8f4e:	2332      	movs	r3, #50	; 0x32
    8f50:	461a      	mov	r2, r3
    8f52:	4619      	mov	r1, r3
    8f54:	4833      	ldr	r0, [pc, #204]	; (9024 <grid_port_receive_decode+0x348>)
    8f56:	4e34      	ldr	r6, [pc, #208]	; (9028 <grid_port_receive_decode+0x34c>)
    8f58:	47b0      	blx	r6
				uint32_t response_length = strlen(response);
    8f5a:	f107 0014 	add.w	r0, r7, #20
    8f5e:	4b44      	ldr	r3, [pc, #272]	; (9070 <grid_port_receive_decode+0x394>)
    8f60:	4798      	blx	r3
    8f62:	4606      	mov	r6, r0
				if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    8f64:	f504 699b 	add.w	r9, r4, #1240	; 0x4d8
    8f68:	b281      	uxth	r1, r0
    8f6a:	4648      	mov	r0, r9
    8f6c:	4b3c      	ldr	r3, [pc, #240]	; (9060 <grid_port_receive_decode+0x384>)
    8f6e:	4798      	blx	r3
    8f70:	2800      	cmp	r0, #0
    8f72:	f43f aef8 	beq.w	8d66 <grid_port_receive_decode+0x8a>
					uint8_t checksum = grid_msg_get_checksum(response, response_length);
    8f76:	4631      	mov	r1, r6
    8f78:	f107 0014 	add.w	r0, r7, #20
    8f7c:	4b2d      	ldr	r3, [pc, #180]	; (9034 <grid_port_receive_decode+0x358>)
    8f7e:	4798      	blx	r3
					grid_msg_set_checksum(response, response_length, checksum);
    8f80:	b2c2      	uxtb	r2, r0
    8f82:	4631      	mov	r1, r6
    8f84:	f107 0014 	add.w	r0, r7, #20
    8f88:	4b34      	ldr	r3, [pc, #208]	; (905c <grid_port_receive_decode+0x380>)
    8f8a:	4798      	blx	r3
					for (uint32_t i=0; i<response_length; i++)
    8f8c:	b156      	cbz	r6, 8fa4 <grid_port_receive_decode+0x2c8>
    8f8e:	f107 0814 	add.w	r8, r7, #20
    8f92:	4446      	add	r6, r8
						grid_buffer_write_character(&por->tx_buffer, response[i]);
    8f94:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 9074 <grid_port_receive_decode+0x398>
    8f98:	f818 1b01 	ldrb.w	r1, [r8], #1
    8f9c:	4648      	mov	r0, r9
    8f9e:	47d0      	blx	sl
					for (uint32_t i=0; i<response_length; i++)
    8fa0:	4546      	cmp	r6, r8
    8fa2:	d1f9      	bne.n	8f98 <grid_port_receive_decode+0x2bc>
					grid_buffer_write_acknowledge(&por->tx_buffer);
    8fa4:	4648      	mov	r0, r9
    8fa6:	4b2f      	ldr	r3, [pc, #188]	; (9064 <grid_port_receive_decode+0x388>)
    8fa8:	4798      	blx	r3
    8faa:	e6dc      	b.n	8d66 <grid_port_receive_decode+0x8a>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    8fac:	78b3      	ldrb	r3, [r6, #2]
    8fae:	2b06      	cmp	r3, #6
    8fb0:	d02c      	beq.n	900c <grid_port_receive_decode+0x330>
				else if (message[2] == GRID_MSG_NACKNOWLEDGE){
    8fb2:	2b15      	cmp	r3, #21
    8fb4:	d060      	beq.n	9078 <grid_port_receive_decode+0x39c>
				else if (message[2] == GRID_MSG_BELL){
    8fb6:	2b07      	cmp	r3, #7
    8fb8:	f47f aed5 	bne.w	8d66 <grid_port_receive_decode+0x8a>
					if (por->partner_status == 0){
    8fbc:	f894 350f 	ldrb.w	r3, [r4, #1295]	; 0x50f
    8fc0:	2b00      	cmp	r3, #0
    8fc2:	d163      	bne.n	908c <grid_port_receive_decode+0x3b0>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    8fc4:	78f3      	ldrb	r3, [r6, #3]
    8fc6:	7a62      	ldrb	r2, [r4, #9]
    8fc8:	1a9b      	subs	r3, r3, r2
    8fca:	3306      	adds	r3, #6
    8fcc:	425a      	negs	r2, r3
    8fce:	f003 0303 	and.w	r3, r3, #3
    8fd2:	f002 0203 	and.w	r2, r2, #3
    8fd6:	bf58      	it	pl
    8fd8:	4253      	negpl	r3, r2
    8fda:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    8fde:	f1a5 000c 	sub.w	r0, r5, #12
    8fe2:	2200      	movs	r2, #0
    8fe4:	2108      	movs	r1, #8
    8fe6:	4430      	add	r0, r6
    8fe8:	4b11      	ldr	r3, [pc, #68]	; (9030 <grid_port_receive_decode+0x354>)
    8fea:	4798      	blx	r3
    8fec:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
						por->partner_status = 1;
    8ff0:	2301      	movs	r3, #1
    8ff2:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
						grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    8ff6:	23c8      	movs	r3, #200	; 0xc8
    8ff8:	9301      	str	r3, [sp, #4]
    8ffa:	2302      	movs	r3, #2
    8ffc:	9300      	str	r3, [sp, #0]
    8ffe:	2300      	movs	r3, #0
    9000:	22ff      	movs	r2, #255	; 0xff
    9002:	4619      	mov	r1, r3
    9004:	4807      	ldr	r0, [pc, #28]	; (9024 <grid_port_receive_decode+0x348>)
    9006:	4e08      	ldr	r6, [pc, #32]	; (9028 <grid_port_receive_decode+0x34c>)
    9008:	47b0      	blx	r6
    900a:	e6ac      	b.n	8d66 <grid_port_receive_decode+0x8a>
					grid_sys_alert_set_alert(&grid_sys_state, 30, 30, 30, 0, 250); // LIGHT WHITE PULSE
    900c:	23fa      	movs	r3, #250	; 0xfa
    900e:	9301      	str	r3, [sp, #4]
    9010:	2300      	movs	r3, #0
    9012:	9300      	str	r3, [sp, #0]
    9014:	231e      	movs	r3, #30
    9016:	461a      	mov	r2, r3
    9018:	4619      	mov	r1, r3
    901a:	4802      	ldr	r0, [pc, #8]	; (9024 <grid_port_receive_decode+0x348>)
    901c:	4e02      	ldr	r6, [pc, #8]	; (9028 <grid_port_receive_decode+0x34c>)
    901e:	47b0      	blx	r6
    9020:	e6a1      	b.n	8d66 <grid_port_receive_decode+0x8a>
    9022:	bf00      	nop
    9024:	20001ca4 	.word	0x20001ca4
    9028:	0000369d 	.word	0x0000369d
    902c:	1b4e81b5 	.word	0x1b4e81b5
    9030:	000036f1 	.word	0x000036f1
    9034:	00003859 	.word	0x00003859
    9038:	00003889 	.word	0x00003889
    903c:	000038e9 	.word	0x000038e9
    9040:	000038a9 	.word	0x000038a9
    9044:	000038c9 	.word	0x000038c9
    9048:	00003909 	.word	0x00003909
    904c:	0000391d 	.word	0x0000391d
    9050:	00003931 	.word	0x00003931
    9054:	00003945 	.word	0x00003945
    9058:	00003959 	.word	0x00003959
    905c:	00003875 	.word	0x00003875
    9060:	000011a1 	.word	0x000011a1
    9064:	000011ed 	.word	0x000011ed
    9068:	000014e9 	.word	0x000014e9
    906c:	00003985 	.word	0x00003985
    9070:	0000b51d 	.word	0x0000b51d
    9074:	000011d1 	.word	0x000011d1
					grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 0, 250); // LIGHT RED PULSE
    9078:	23fa      	movs	r3, #250	; 0xfa
    907a:	9301      	str	r3, [sp, #4]
    907c:	2200      	movs	r2, #0
    907e:	9200      	str	r2, [sp, #0]
    9080:	4613      	mov	r3, r2
    9082:	2132      	movs	r1, #50	; 0x32
    9084:	4821      	ldr	r0, [pc, #132]	; (910c <grid_port_receive_decode+0x430>)
    9086:	4e22      	ldr	r6, [pc, #136]	; (9110 <grid_port_receive_decode+0x434>)
    9088:	47b0      	blx	r6
    908a:	e66c      	b.n	8d66 <grid_port_receive_decode+0x8a>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    908c:	78f3      	ldrb	r3, [r6, #3]
    908e:	7a62      	ldrb	r2, [r4, #9]
    9090:	1a9b      	subs	r3, r3, r2
    9092:	3306      	adds	r3, #6
    9094:	425a      	negs	r2, r3
    9096:	f003 0303 	and.w	r3, r3, #3
    909a:	f002 0203 	and.w	r2, r2, #3
    909e:	bf58      	it	pl
    90a0:	4253      	negpl	r3, r2
    90a2:	f894 850c 	ldrb.w	r8, [r4, #1292]	; 0x50c
    90a6:	4543      	cmp	r3, r8
    90a8:	bf14      	ite	ne
    90aa:	f04f 0800 	movne.w	r8, #0
    90ae:	f04f 0801 	moveq.w	r8, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    90b2:	f1a5 000c 	sub.w	r0, r5, #12
    90b6:	2200      	movs	r2, #0
    90b8:	2108      	movs	r1, #8
    90ba:	4430      	add	r0, r6
    90bc:	4b15      	ldr	r3, [pc, #84]	; (9114 <grid_port_receive_decode+0x438>)
    90be:	4798      	blx	r3
    90c0:	60b8      	str	r0, [r7, #8]
						volatile uint32_t debug2 = por->partner_hwcfg;
    90c2:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    90c6:	60fb      	str	r3, [r7, #12]
						validator &= (por->partner_hwcfg == debug);									
    90c8:	68ba      	ldr	r2, [r7, #8]
						if (validator == 0){
    90ca:	4293      	cmp	r3, r2
    90cc:	d103      	bne.n	90d6 <grid_port_receive_decode+0x3fa>
    90ce:	f1b8 0f00 	cmp.w	r8, #0
    90d2:	f47f ae48 	bne.w	8d66 <grid_port_receive_decode+0x8a>
							por->partner_status = 0;	
    90d6:	2300      	movs	r3, #0
    90d8:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    90dc:	23c8      	movs	r3, #200	; 0xc8
    90de:	9301      	str	r3, [sp, #4]
    90e0:	2302      	movs	r3, #2
    90e2:	9300      	str	r3, [sp, #0]
    90e4:	23ff      	movs	r3, #255	; 0xff
    90e6:	461a      	mov	r2, r3
    90e8:	4619      	mov	r1, r3
    90ea:	4808      	ldr	r0, [pc, #32]	; (910c <grid_port_receive_decode+0x430>)
    90ec:	4e08      	ldr	r6, [pc, #32]	; (9110 <grid_port_receive_decode+0x434>)
    90ee:	47b0      	blx	r6
    90f0:	e639      	b.n	8d66 <grid_port_receive_decode+0x8a>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 1, 2000); // PURPLE BLINKY
    90f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    90f6:	9301      	str	r3, [sp, #4]
    90f8:	2301      	movs	r3, #1
    90fa:	9300      	str	r3, [sp, #0]
    90fc:	2300      	movs	r3, #0
    90fe:	461a      	mov	r2, r3
    9100:	21ff      	movs	r1, #255	; 0xff
    9102:	4802      	ldr	r0, [pc, #8]	; (910c <grid_port_receive_decode+0x430>)
    9104:	4e02      	ldr	r6, [pc, #8]	; (9110 <grid_port_receive_decode+0x434>)
    9106:	47b0      	blx	r6
    9108:	e62d      	b.n	8d66 <grid_port_receive_decode+0x8a>
    910a:	bf00      	nop
    910c:	20001ca4 	.word	0x20001ca4
    9110:	0000369d 	.word	0x0000369d
    9114:	000036f1 	.word	0x000036f1

00009118 <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    9118:	b510      	push	{r4, lr}
    911a:	4604      	mov	r4, r0
	grid_port_receive_task(por);	
    911c:	4b08      	ldr	r3, [pc, #32]	; (9140 <grid_port_receive_complete_task+0x28>)
    911e:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    9120:	69e3      	ldr	r3, [r4, #28]
    9122:	b163      	cbz	r3, 913e <grid_port_receive_complete_task+0x26>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    9124:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9126:	6a22      	ldr	r2, [r4, #32]
    9128:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    912a:	bf34      	ite	cc
    912c:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    912e:	f202 2259 	addwcs	r2, r2, #601	; 0x259
    9132:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    9134:	4620      	mov	r0, r4
    9136:	4b03      	ldr	r3, [pc, #12]	; (9144 <grid_port_receive_complete_task+0x2c>)
    9138:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    913a:	2300      	movs	r3, #0
    913c:	61e3      	str	r3, [r4, #28]
    913e:	bd10      	pop	{r4, pc}
    9140:	00008c39 	.word	0x00008c39
    9144:	00008cdd 	.word	0x00008cdd

00009148 <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    9148:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20; //was /5: 200ms
    914a:	4c0d      	ldr	r4, [pc, #52]	; (9180 <init_timer+0x38>)
    914c:	f240 3333 	movw	r3, #819	; 0x333
    9150:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    9152:	4b0c      	ldr	r3, [pc, #48]	; (9184 <init_timer+0x3c>)
    9154:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    9156:	2301      	movs	r3, #1
    9158:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_realtime.interval = 1;
    915a:	6223      	str	r3, [r4, #32]
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    915c:	4a0a      	ldr	r2, [pc, #40]	; (9188 <init_timer+0x40>)
    915e:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    9160:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    9164:	4d09      	ldr	r5, [pc, #36]	; (918c <init_timer+0x44>)
    9166:	1d21      	adds	r1, r4, #4
    9168:	4628      	mov	r0, r5
    916a:	4e09      	ldr	r6, [pc, #36]	; (9190 <init_timer+0x48>)
    916c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    916e:	f104 0118 	add.w	r1, r4, #24
    9172:	4628      	mov	r0, r5
    9174:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    9176:	4628      	mov	r0, r5
    9178:	4b06      	ldr	r3, [pc, #24]	; (9194 <init_timer+0x4c>)
    917a:	4798      	blx	r3
    917c:	bd70      	pop	{r4, r5, r6, pc}
    917e:	bf00      	nop
    9180:	20000d7c 	.word	0x20000d7c
    9184:	00008c0d 	.word	0x00008c0d
    9188:	00008c25 	.word	0x00008c25
    918c:	20000eec 	.word	0x20000eec
    9190:	00004901 	.word	0x00004901
    9194:	000048c1 	.word	0x000048c1

00009198 <main>:




int main(void)
{
    9198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    919c:	b08b      	sub	sp, #44	; 0x2c
	atmel_start_init();	
    919e:	4b92      	ldr	r3, [pc, #584]	; (93e8 <main+0x250>)
    91a0:	4798      	blx	r3
 * \retval 0  Completed sucessfully.
 * \retval -1 Always on, can't disable.
 */
static inline int32_t wdt_disable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    91a2:	4c92      	ldr	r4, [pc, #584]	; (93ec <main+0x254>)
    91a4:	6820      	ldr	r0, [r4, #0]
    91a6:	229b      	movs	r2, #155	; 0x9b
    91a8:	4991      	ldr	r1, [pc, #580]	; (93f0 <main+0x258>)
    91aa:	3000      	adds	r0, #0
    91ac:	bf18      	it	ne
    91ae:	2001      	movne	r0, #1
    91b0:	4b90      	ldr	r3, [pc, #576]	; (93f4 <main+0x25c>)
    91b2:	4798      	blx	r3

	return _wdt_disable(&wdt->dev);
    91b4:	4620      	mov	r0, r4
    91b6:	4b90      	ldr	r3, [pc, #576]	; (93f8 <main+0x260>)
    91b8:	4798      	blx	r3


	
	//TIMER_0_example2();
	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    91ba:	4b90      	ldr	r3, [pc, #576]	; (93fc <main+0x264>)
    91bc:	4798      	blx	r3


	composite_device_start();
    91be:	4b90      	ldr	r3, [pc, #576]	; (9400 <main+0x268>)
    91c0:	4798      	blx	r3

	grid_module_common_init();
    91c2:	4b90      	ldr	r3, [pc, #576]	; (9404 <main+0x26c>)
    91c4:	4798      	blx	r3

	
	uint32_t loopstart = 0;

	
	rand();rand();
    91c6:	4d90      	ldr	r5, [pc, #576]	; (9408 <main+0x270>)
    91c8:	47a8      	blx	r5
    91ca:	47a8      	blx	r5
	
	uint8_t r[4] = {rand()%3, rand()%3, rand()%3, rand()%3};	
    91cc:	47a8      	blx	r5
    91ce:	4c8f      	ldr	r4, [pc, #572]	; (940c <main+0x274>)
    91d0:	fb84 2300 	smull	r2, r3, r4, r0
    91d4:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    91d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91dc:	1ac3      	subs	r3, r0, r3
    91de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    91e2:	47a8      	blx	r5
    91e4:	fb84 2300 	smull	r2, r3, r4, r0
    91e8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    91ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91f0:	1ac3      	subs	r3, r0, r3
    91f2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    91f6:	47a8      	blx	r5
    91f8:	fb84 2300 	smull	r2, r3, r4, r0
    91fc:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9200:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9204:	1ac3      	subs	r3, r0, r3
    9206:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    920a:	47a8      	blx	r5
    920c:	fb84 2300 	smull	r2, r3, r4, r0
    9210:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9218:	1ac3      	subs	r3, r0, r3
    921a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t g[4] = {rand()%3, rand()%3, rand()%3, rand()%3};
    921e:	47a8      	blx	r5
    9220:	fb84 2300 	smull	r2, r3, r4, r0
    9224:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    922c:	1ac3      	subs	r3, r0, r3
    922e:	f88d 3020 	strb.w	r3, [sp, #32]
    9232:	47a8      	blx	r5
    9234:	fb84 2300 	smull	r2, r3, r4, r0
    9238:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    923c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9240:	1ac3      	subs	r3, r0, r3
    9242:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    9246:	47a8      	blx	r5
    9248:	fb84 2300 	smull	r2, r3, r4, r0
    924c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9250:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9254:	1ac3      	subs	r3, r0, r3
    9256:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    925a:	47a8      	blx	r5
    925c:	fb84 2300 	smull	r2, r3, r4, r0
    9260:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9264:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9268:	1ac3      	subs	r3, r0, r3
    926a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	uint8_t b[4] = {rand()%3, rand()%3, rand()%3, rand()%3};
    926e:	47a8      	blx	r5
    9270:	fb84 2300 	smull	r2, r3, r4, r0
    9274:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9278:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    927c:	1ac3      	subs	r3, r0, r3
    927e:	f88d 301c 	strb.w	r3, [sp, #28]
    9282:	47a8      	blx	r5
    9284:	fb84 2300 	smull	r2, r3, r4, r0
    9288:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    928c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9290:	1ac3      	subs	r3, r0, r3
    9292:	f88d 301d 	strb.w	r3, [sp, #29]
    9296:	47a8      	blx	r5
    9298:	fb84 2300 	smull	r2, r3, r4, r0
    929c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    92a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    92a4:	1ac3      	subs	r3, r0, r3
    92a6:	f88d 301e 	strb.w	r3, [sp, #30]
    92aa:	47a8      	blx	r5
    92ac:	fb84 2300 	smull	r2, r3, r4, r0
    92b0:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    92b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    92b8:	1ac3      	subs	r3, r0, r3
    92ba:	f88d 301f 	strb.w	r3, [sp, #31]
	
	
					
	uint32_t hwtype = grid_sys_get_hwcfg(&grid_sys_state);
    92be:	4854      	ldr	r0, [pc, #336]	; (9410 <main+0x278>)
    92c0:	4b54      	ldr	r3, [pc, #336]	; (9414 <main+0x27c>)
    92c2:	4798      	blx	r3
    92c4:	9003      	str	r0, [sp, #12]
	
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    92c6:	f04f 0900 	mov.w	r9, #0
	{
		grid_led_set_min(&grid_led_state, i, 0, r[i%4]*3, g[i%4]*3, b[i%4]*3);
    92ca:	f8df a178 	ldr.w	sl, [pc, #376]	; 9444 <main+0x2ac>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    92ce:	e044      	b.n	935a <main+0x1c2>
		grid_led_set_min(&grid_led_state, i, 0, r[i%4]*3, g[i%4]*3, b[i%4]*3);
    92d0:	f007 0303 	and.w	r3, r7, #3
    92d4:	aa0a      	add	r2, sp, #40	; 0x28
    92d6:	4413      	add	r3, r2
    92d8:	f813 4c04 	ldrb.w	r4, [r3, #-4]
    92dc:	f813 6c08 	ldrb.w	r6, [r3, #-8]
    92e0:	f813 5c0c 	ldrb.w	r5, [r3, #-12]
    92e4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    92e8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    92ec:	b2d2      	uxtb	r2, r2
    92ee:	9201      	str	r2, [sp, #4]
    92f0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    92f4:	b2d2      	uxtb	r2, r2
    92f6:	9200      	str	r2, [sp, #0]
    92f8:	b2db      	uxtb	r3, r3
    92fa:	2200      	movs	r2, #0
    92fc:	4639      	mov	r1, r7
    92fe:	4846      	ldr	r0, [pc, #280]	; (9418 <main+0x280>)
    9300:	47d0      	blx	sl
		grid_led_set_mid(&grid_led_state, i, 0, r[i%4]*40, g[i%4]*40, b[i%4]*40);
    9302:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9306:	00db      	lsls	r3, r3, #3
    9308:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    930c:	00d2      	lsls	r2, r2, #3
    930e:	b2d2      	uxtb	r2, r2
    9310:	9201      	str	r2, [sp, #4]
    9312:	eb06 0286 	add.w	r2, r6, r6, lsl #2
    9316:	00d2      	lsls	r2, r2, #3
    9318:	b2d2      	uxtb	r2, r2
    931a:	9200      	str	r2, [sp, #0]
    931c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    9320:	2200      	movs	r2, #0
    9322:	4639      	mov	r1, r7
    9324:	483c      	ldr	r0, [pc, #240]	; (9418 <main+0x280>)
    9326:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9448 <main+0x2b0>
    932a:	47c0      	blx	r8
		grid_led_set_max(&grid_led_state, i, 0, r[i%4]*127, g[i%4]*127, b[i%4]*127);
    932c:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
    9330:	b2e4      	uxtb	r4, r4
    9332:	ebc6 16c6 	rsb	r6, r6, r6, lsl #7
    9336:	b2f6      	uxtb	r6, r6
    9338:	ebc5 15c5 	rsb	r5, r5, r5, lsl #7
    933c:	b2ed      	uxtb	r5, r5
    933e:	9501      	str	r5, [sp, #4]
    9340:	9600      	str	r6, [sp, #0]
    9342:	4623      	mov	r3, r4
    9344:	2200      	movs	r2, #0
    9346:	4639      	mov	r1, r7
    9348:	4833      	ldr	r0, [pc, #204]	; (9418 <main+0x280>)
    934a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 942c <main+0x294>
    934e:	47c0      	blx	r8
			
		if (hwtype == GRID_MODULE_EN16_RevA){	
    9350:	9b03      	ldr	r3, [sp, #12]
    9352:	2bc0      	cmp	r3, #192	; 0xc0
    9354:	d01b      	beq.n	938e <main+0x1f6>
    9356:	f109 0901 	add.w	r9, r9, #1
    935a:	fa5f f789 	uxtb.w	r7, r9
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    935e:	482e      	ldr	r0, [pc, #184]	; (9418 <main+0x280>)
    9360:	4b2e      	ldr	r3, [pc, #184]	; (941c <main+0x284>)
    9362:	4798      	blx	r3
    9364:	42b8      	cmp	r0, r7
    9366:	d8b3      	bhi.n	92d0 <main+0x138>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    9368:	4b2d      	ldr	r3, [pc, #180]	; (9420 <main+0x288>)
    936a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    936e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    9372:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    9376:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    937a:	492a      	ldr	r1, [pc, #168]	; (9424 <main+0x28c>)
    937c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9380:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		
		
	gpio_set_pin_direction(PIN_GRID_SYNC_1, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(PIN_GRID_SYNC_1, false);	
	
	init_timer();
    9384:	4b28      	ldr	r3, [pc, #160]	; (9428 <main+0x290>)
    9386:	4798      	blx	r3
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9388:	f8df 908c 	ldr.w	r9, [pc, #140]	; 9418 <main+0x280>
    938c:	e0cf      	b.n	952e <main+0x396>
			grid_led_set_min(&grid_led_state, i, 0, r[i%4]*127, g[i%4]*127, b[i%4]*127);
    938e:	9501      	str	r5, [sp, #4]
    9390:	9600      	str	r6, [sp, #0]
    9392:	4623      	mov	r3, r4
    9394:	2200      	movs	r2, #0
    9396:	4639      	mov	r1, r7
    9398:	481f      	ldr	r0, [pc, #124]	; (9418 <main+0x280>)
    939a:	47d0      	blx	sl
			grid_led_set_mid(&grid_led_state, i, 0, r[i%4]*0, g[i%4]*0, b[i%4]*0);
    939c:	f04f 0800 	mov.w	r8, #0
    93a0:	f8cd 8004 	str.w	r8, [sp, #4]
    93a4:	f8cd 8000 	str.w	r8, [sp]
    93a8:	4643      	mov	r3, r8
    93aa:	4642      	mov	r2, r8
    93ac:	4639      	mov	r1, r7
    93ae:	481a      	ldr	r0, [pc, #104]	; (9418 <main+0x280>)
    93b0:	f8df b094 	ldr.w	fp, [pc, #148]	; 9448 <main+0x2b0>
    93b4:	47d8      	blx	fp
			grid_led_set_max(&grid_led_state, i, 0, r[i%4]*127, g[i%4]*127, b[i%4]*127);
    93b6:	9501      	str	r5, [sp, #4]
    93b8:	9600      	str	r6, [sp, #0]
    93ba:	4623      	mov	r3, r4
    93bc:	4642      	mov	r2, r8
    93be:	4639      	mov	r1, r7
    93c0:	4815      	ldr	r0, [pc, #84]	; (9418 <main+0x280>)
    93c2:	4c1a      	ldr	r4, [pc, #104]	; (942c <main+0x294>)
    93c4:	47a0      	blx	r4
    93c6:	e7c6      	b.n	9356 <main+0x1be>
				grid_sys_ping(&GRID_PORT_N);
    93c8:	4819      	ldr	r0, [pc, #100]	; (9430 <main+0x298>)
    93ca:	4b1a      	ldr	r3, [pc, #104]	; (9434 <main+0x29c>)
    93cc:	4798      	blx	r3
    93ce:	e0bb      	b.n	9548 <main+0x3b0>
				grid_sys_ping(&GRID_PORT_E);
    93d0:	4819      	ldr	r0, [pc, #100]	; (9438 <main+0x2a0>)
    93d2:	4b18      	ldr	r3, [pc, #96]	; (9434 <main+0x29c>)
    93d4:	4798      	blx	r3
    93d6:	e0be      	b.n	9556 <main+0x3be>
				grid_sys_ping(&GRID_PORT_S);
    93d8:	4818      	ldr	r0, [pc, #96]	; (943c <main+0x2a4>)
    93da:	4b16      	ldr	r3, [pc, #88]	; (9434 <main+0x29c>)
    93dc:	4798      	blx	r3
    93de:	e0c1      	b.n	9564 <main+0x3cc>
				grid_sys_ping(&GRID_PORT_W);
    93e0:	4817      	ldr	r0, [pc, #92]	; (9440 <main+0x2a8>)
    93e2:	4b14      	ldr	r3, [pc, #80]	; (9434 <main+0x29c>)
    93e4:	4798      	blx	r3
    93e6:	e0c4      	b.n	9572 <main+0x3da>
    93e8:	000002d1 	.word	0x000002d1
    93ec:	20001070 	.word	0x20001070
    93f0:	0000bc34 	.word	0x0000bc34
    93f4:	00005259 	.word	0x00005259
    93f8:	00008bbd 	.word	0x00008bbd
    93fc:	0000a0c5 	.word	0x0000a0c5
    9400:	0000aa6d 	.word	0x0000aa6d
    9404:	000020ad 	.word	0x000020ad
    9408:	0000b441 	.word	0x0000b441
    940c:	55555556 	.word	0x55555556
    9410:	20001ca4 	.word	0x20001ca4
    9414:	00003769 	.word	0x00003769
    9418:	20003724 	.word	0x20003724
    941c:	00001b7d 	.word	0x00001b7d
    9420:	41008000 	.word	0x41008000
    9424:	c0000004 	.word	0xc0000004
    9428:	00009149 	.word	0x00009149
    942c:	00001c57 	.word	0x00001c57
    9430:	20001238 	.word	0x20001238
    9434:	0000399d 	.word	0x0000399d
    9438:	20003210 	.word	0x20003210
    943c:	200027ec 	.word	0x200027ec
    9440:	200022c8 	.word	0x200022c8
    9444:	00001bc5 	.word	0x00001bc5
    9448:	00001c0d 	.word	0x00001c0d
						grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    944c:	2300      	movs	r3, #0
    944e:	9301      	str	r3, [sp, #4]
    9450:	9300      	str	r3, [sp, #0]
    9452:	2201      	movs	r2, #1
    9454:	4621      	mov	r1, r4
    9456:	4648      	mov	r0, r9
    9458:	4d6c      	ldr	r5, [pc, #432]	; (960c <main+0x474>)
    945a:	47a8      	blx	r5
						grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    945c:	4f6c      	ldr	r7, [pc, #432]	; (9610 <main+0x478>)
    945e:	9803      	ldr	r0, [sp, #12]
    9460:	47b8      	blx	r7
    9462:	4e6c      	ldr	r6, [pc, #432]	; (9614 <main+0x47c>)
    9464:	2200      	movs	r2, #0
    9466:	4b6c      	ldr	r3, [pc, #432]	; (9618 <main+0x480>)
    9468:	47b0      	blx	r6
    946a:	4d6c      	ldr	r5, [pc, #432]	; (961c <main+0x484>)
    946c:	47a8      	blx	r5
    946e:	fa5f fb80 	uxtb.w	fp, r0
    9472:	9804      	ldr	r0, [sp, #16]
    9474:	47b8      	blx	r7
    9476:	2200      	movs	r2, #0
    9478:	4b67      	ldr	r3, [pc, #412]	; (9618 <main+0x480>)
    947a:	47b0      	blx	r6
    947c:	47a8      	blx	r5
    947e:	b2c0      	uxtb	r0, r0
    9480:	9001      	str	r0, [sp, #4]
    9482:	4650      	mov	r0, sl
    9484:	47b8      	blx	r7
    9486:	2200      	movs	r2, #0
    9488:	4b63      	ldr	r3, [pc, #396]	; (9618 <main+0x480>)
    948a:	47b0      	blx	r6
    948c:	47a8      	blx	r5
    948e:	b2c0      	uxtb	r0, r0
    9490:	9000      	str	r0, [sp, #0]
    9492:	465b      	mov	r3, fp
    9494:	2201      	movs	r2, #1
    9496:	4621      	mov	r1, r4
    9498:	4648      	mov	r0, r9
    949a:	4d61      	ldr	r5, [pc, #388]	; (9620 <main+0x488>)
    949c:	47a8      	blx	r5
						grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    949e:	9a04      	ldr	r2, [sp, #16]
    94a0:	9201      	str	r2, [sp, #4]
    94a2:	f8cd a000 	str.w	sl, [sp]
    94a6:	9b03      	ldr	r3, [sp, #12]
    94a8:	2201      	movs	r2, #1
    94aa:	4621      	mov	r1, r4
    94ac:	4648      	mov	r0, r9
    94ae:	4c5d      	ldr	r4, [pc, #372]	; (9624 <main+0x48c>)
    94b0:	47a0      	blx	r4
    94b2:	fa5f f488 	uxtb.w	r4, r8
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    94b6:	4648      	mov	r0, r9
    94b8:	4b5b      	ldr	r3, [pc, #364]	; (9628 <main+0x490>)
    94ba:	4798      	blx	r3
    94bc:	f108 0801 	add.w	r8, r8, #1
    94c0:	4284      	cmp	r4, r0
    94c2:	d3c3      	bcc.n	944c <main+0x2b4>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    94c4:	4859      	ldr	r0, [pc, #356]	; (962c <main+0x494>)
    94c6:	4b5a      	ldr	r3, [pc, #360]	; (9630 <main+0x498>)
    94c8:	4798      	blx	r3
    94ca:	4605      	mov	r5, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    94cc:	f899 3001 	ldrb.w	r3, [r9, #1]
    94d0:	b16b      	cbz	r3, 94ee <main+0x356>
    94d2:	2400      	movs	r4, #0
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    94d4:	2701      	movs	r7, #1
    94d6:	4e57      	ldr	r6, [pc, #348]	; (9634 <main+0x49c>)
    94d8:	462b      	mov	r3, r5
    94da:	463a      	mov	r2, r7
    94dc:	4621      	mov	r1, r4
    94de:	4648      	mov	r0, r9
    94e0:	47b0      	blx	r6
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    94e2:	3401      	adds	r4, #1
    94e4:	b2e4      	uxtb	r4, r4
    94e6:	f899 3001 	ldrb.w	r3, [r9, #1]
    94ea:	42a3      	cmp	r3, r4
    94ec:	d8f4      	bhi.n	94d8 <main+0x340>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    94ee:	4c52      	ldr	r4, [pc, #328]	; (9638 <main+0x4a0>)
    94f0:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    94f4:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
						

		gpio_set_pin_level(PIN_GRID_SYNC_1, true);
		
	
		grid_led_tick(&grid_led_state);
    94f8:	4648      	mov	r0, r9
    94fa:	4b50      	ldr	r3, [pc, #320]	; (963c <main+0x4a4>)
    94fc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    94fe:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
		gpio_set_pin_level(PIN_GRID_SYNC_1, false);
			
			
		while(grid_led_hardware_is_transfer_completed(&grid_led_state) != 1){
    9502:	4c4f      	ldr	r4, [pc, #316]	; (9640 <main+0x4a8>)
    9504:	4648      	mov	r0, r9
    9506:	47a0      	blx	r4
    9508:	2801      	cmp	r0, #1
    950a:	d1fb      	bne.n	9504 <main+0x36c>
			
		}
		
		grid_led_render_all(&grid_led_state);
    950c:	4648      	mov	r0, r9
    950e:	4b4d      	ldr	r3, [pc, #308]	; (9644 <main+0x4ac>)
    9510:	4798      	blx	r3
				

					
		grid_led_hardware_start_transfer(&grid_led_state);
    9512:	4648      	mov	r0, r9
    9514:	4b4c      	ldr	r3, [pc, #304]	; (9648 <main+0x4b0>)
    9516:	4798      	blx	r3
	
	
	

		// IDLETASK
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9518:	4c4c      	ldr	r4, [pc, #304]	; (964c <main+0x4b4>)
			
			delay_us(10);
    951a:	4d4d      	ldr	r5, [pc, #308]	; (9650 <main+0x4b8>)
    951c:	9e05      	ldr	r6, [sp, #20]
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    951e:	e001      	b.n	9524 <main+0x38c>
			delay_us(10);
    9520:	200a      	movs	r0, #10
    9522:	47a8      	blx	r5
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9524:	4631      	mov	r1, r6
    9526:	4841      	ldr	r0, [pc, #260]	; (962c <main+0x494>)
    9528:	47a0      	blx	r4
    952a:	280f      	cmp	r0, #15
    952c:	d9f8      	bls.n	9520 <main+0x388>
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    952e:	483f      	ldr	r0, [pc, #252]	; (962c <main+0x494>)
    9530:	4b48      	ldr	r3, [pc, #288]	; (9654 <main+0x4bc>)
    9532:	4798      	blx	r3
    9534:	9005      	str	r0, [sp, #20]
		if (pingflag_active){
    9536:	4b48      	ldr	r3, [pc, #288]	; (9658 <main+0x4c0>)
    9538:	785b      	ldrb	r3, [r3, #1]
    953a:	b1eb      	cbz	r3, 9578 <main+0x3e0>
			if (pingflag%4 == 0){
    953c:	4b46      	ldr	r3, [pc, #280]	; (9658 <main+0x4c0>)
    953e:	781b      	ldrb	r3, [r3, #0]
    9540:	f013 0f03 	tst.w	r3, #3
    9544:	f43f af40 	beq.w	93c8 <main+0x230>
			if (pingflag%4 == 1){
    9548:	4b43      	ldr	r3, [pc, #268]	; (9658 <main+0x4c0>)
    954a:	781b      	ldrb	r3, [r3, #0]
    954c:	f003 0303 	and.w	r3, r3, #3
    9550:	2b01      	cmp	r3, #1
    9552:	f43f af3d 	beq.w	93d0 <main+0x238>
			if (pingflag%4 == 2){
    9556:	4b40      	ldr	r3, [pc, #256]	; (9658 <main+0x4c0>)
    9558:	781b      	ldrb	r3, [r3, #0]
    955a:	f003 0303 	and.w	r3, r3, #3
    955e:	2b02      	cmp	r3, #2
    9560:	f43f af3a 	beq.w	93d8 <main+0x240>
			if (pingflag%4 == 3){
    9564:	4b3c      	ldr	r3, [pc, #240]	; (9658 <main+0x4c0>)
    9566:	781b      	ldrb	r3, [r3, #0]
    9568:	f003 0303 	and.w	r3, r3, #3
    956c:	2b03      	cmp	r3, #3
    956e:	f43f af37 	beq.w	93e0 <main+0x248>
			pingflag_active = 0;
    9572:	2200      	movs	r2, #0
    9574:	4b38      	ldr	r3, [pc, #224]	; (9658 <main+0x4c0>)
    9576:	705a      	strb	r2, [r3, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    9578:	4838      	ldr	r0, [pc, #224]	; (965c <main+0x4c4>)
    957a:	4c39      	ldr	r4, [pc, #228]	; (9660 <main+0x4c8>)
    957c:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_E);
    957e:	4839      	ldr	r0, [pc, #228]	; (9664 <main+0x4cc>)
    9580:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_S);
    9582:	4839      	ldr	r0, [pc, #228]	; (9668 <main+0x4d0>)
    9584:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_W);
    9586:	4839      	ldr	r0, [pc, #228]	; (966c <main+0x4d4>)
    9588:	47a0      	blx	r4
		grid_port_process_ui(&GRID_PORT_U);
    958a:	4d39      	ldr	r5, [pc, #228]	; (9670 <main+0x4d8>)
    958c:	4628      	mov	r0, r5
    958e:	4b39      	ldr	r3, [pc, #228]	; (9674 <main+0x4dc>)
    9590:	4798      	blx	r3
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    9592:	4628      	mov	r0, r5
    9594:	4c38      	ldr	r4, [pc, #224]	; (9678 <main+0x4e0>)
    9596:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_N);		
    9598:	4830      	ldr	r0, [pc, #192]	; (965c <main+0x4c4>)
    959a:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    959c:	4831      	ldr	r0, [pc, #196]	; (9664 <main+0x4cc>)
    959e:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    95a0:	4831      	ldr	r0, [pc, #196]	; (9668 <main+0x4d0>)
    95a2:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);						
    95a4:	4831      	ldr	r0, [pc, #196]	; (966c <main+0x4d4>)
    95a6:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_N);
    95a8:	482c      	ldr	r0, [pc, #176]	; (965c <main+0x4c4>)
    95aa:	4c34      	ldr	r4, [pc, #208]	; (967c <main+0x4e4>)
    95ac:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    95ae:	482d      	ldr	r0, [pc, #180]	; (9664 <main+0x4cc>)
    95b0:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    95b2:	482d      	ldr	r0, [pc, #180]	; (9668 <main+0x4d0>)
    95b4:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    95b6:	482d      	ldr	r0, [pc, #180]	; (966c <main+0x4d4>)
    95b8:	47a0      	blx	r4
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    95ba:	4831      	ldr	r0, [pc, #196]	; (9680 <main+0x4e8>)
    95bc:	4b31      	ldr	r3, [pc, #196]	; (9684 <main+0x4ec>)
    95be:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    95c0:	4628      	mov	r0, r5
    95c2:	4b31      	ldr	r3, [pc, #196]	; (9688 <main+0x4f0>)
    95c4:	4798      	blx	r3
		if (grid_sys_state.alert_state){
    95c6:	4b19      	ldr	r3, [pc, #100]	; (962c <main+0x494>)
    95c8:	889b      	ldrh	r3, [r3, #4]
    95ca:	b29b      	uxth	r3, r3
    95cc:	2b00      	cmp	r3, #0
    95ce:	d08e      	beq.n	94ee <main+0x356>
			grid_sys_state.alert_state--;
    95d0:	4b16      	ldr	r3, [pc, #88]	; (962c <main+0x494>)
    95d2:	889b      	ldrh	r3, [r3, #4]
    95d4:	3b01      	subs	r3, #1
    95d6:	b29b      	uxth	r3, r3
    95d8:	4a14      	ldr	r2, [pc, #80]	; (962c <main+0x494>)
    95da:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    95dc:	4610      	mov	r0, r2
    95de:	4b2b      	ldr	r3, [pc, #172]	; (968c <main+0x4f4>)
    95e0:	4798      	blx	r3
    95e2:	2800      	cmp	r0, #0
    95e4:	f43f af6e 	beq.w	94c4 <main+0x32c>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    95e8:	4810      	ldr	r0, [pc, #64]	; (962c <main+0x494>)
    95ea:	4b29      	ldr	r3, [pc, #164]	; (9690 <main+0x4f8>)
    95ec:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    95ee:	480f      	ldr	r0, [pc, #60]	; (962c <main+0x494>)
    95f0:	4b28      	ldr	r3, [pc, #160]	; (9694 <main+0x4fc>)
    95f2:	4798      	blx	r3
    95f4:	9003      	str	r0, [sp, #12]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    95f6:	480d      	ldr	r0, [pc, #52]	; (962c <main+0x494>)
    95f8:	4b27      	ldr	r3, [pc, #156]	; (9698 <main+0x500>)
    95fa:	4798      	blx	r3
    95fc:	4682      	mov	sl, r0
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    95fe:	480b      	ldr	r0, [pc, #44]	; (962c <main+0x494>)
    9600:	4b26      	ldr	r3, [pc, #152]	; (969c <main+0x504>)
    9602:	4798      	blx	r3
    9604:	9004      	str	r0, [sp, #16]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9606:	f04f 0800 	mov.w	r8, #0
    960a:	e752      	b.n	94b2 <main+0x31a>
    960c:	00001bc5 	.word	0x00001bc5
    9610:	0000ad39 	.word	0x0000ad39
    9614:	0000ae05 	.word	0x0000ae05
    9618:	3fe00000 	.word	0x3fe00000
    961c:	0000b229 	.word	0x0000b229
    9620:	00001c0d 	.word	0x00001c0d
    9624:	00001c57 	.word	0x00001c57
    9628:	00001b7d 	.word	0x00001b7d
    962c:	20001ca4 	.word	0x20001ca4
    9630:	00003655 	.word	0x00003655
    9634:	00001ca1 	.word	0x00001ca1
    9638:	41008000 	.word	0x41008000
    963c:	00001b81 	.word	0x00001b81
    9640:	000020a1 	.word	0x000020a1
    9644:	00001eb9 	.word	0x00001eb9
    9648:	00002075 	.word	0x00002075
    964c:	00003635 	.word	0x00003635
    9650:	000040d5 	.word	0x000040d5
    9654:	00003631 	.word	0x00003631
    9658:	20000d7c 	.word	0x20000d7c
    965c:	20001238 	.word	0x20001238
    9660:	00009119 	.word	0x00009119
    9664:	20003210 	.word	0x20003210
    9668:	200027ec 	.word	0x200027ec
    966c:	200022c8 	.word	0x200022c8
    9670:	20001788 	.word	0x20001788
    9674:	00003b4d 	.word	0x00003b4d
    9678:	000014e9 	.word	0x000014e9
    967c:	00001a99 	.word	0x00001a99
    9680:	20002d00 	.word	0x20002d00
    9684:	0000168d 	.word	0x0000168d
    9688:	00001a55 	.word	0x00001a55
    968c:	0000364b 	.word	0x0000364b
    9690:	0000364f 	.word	0x0000364f
    9694:	000036bb 	.word	0x000036bb
    9698:	000036bf 	.word	0x000036bf
    969c:	000036c3 	.word	0x000036c3

000096a0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    96a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    96a2:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    96a4:	780b      	ldrb	r3, [r1, #0]
    96a6:	f3c3 1441 	ubfx	r4, r3, #5, #2
    96aa:	2c01      	cmp	r4, #1
    96ac:	d15e      	bne.n	976c <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    96ae:	888c      	ldrh	r4, [r1, #4]
    96b0:	4d35      	ldr	r5, [pc, #212]	; (9788 <cdcdf_acm_req+0xe8>)
    96b2:	782d      	ldrb	r5, [r5, #0]
    96b4:	42a5      	cmp	r5, r4
    96b6:	d003      	beq.n	96c0 <cdcdf_acm_req+0x20>
    96b8:	4d33      	ldr	r5, [pc, #204]	; (9788 <cdcdf_acm_req+0xe8>)
    96ba:	786d      	ldrb	r5, [r5, #1]
    96bc:	42a5      	cmp	r5, r4
    96be:	d158      	bne.n	9772 <cdcdf_acm_req+0xd2>
    96c0:	4616      	mov	r6, r2
    96c2:	460c      	mov	r4, r1
    96c4:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    96c6:	f013 0f80 	tst.w	r3, #128	; 0x80
    96ca:	d10c      	bne.n	96e6 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    96cc:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    96ce:	4b2f      	ldr	r3, [pc, #188]	; (978c <cdcdf_acm_req+0xec>)
    96d0:	4798      	blx	r3
    96d2:	4601      	mov	r1, r0
	switch (req->bRequest) {
    96d4:	7863      	ldrb	r3, [r4, #1]
    96d6:	2b20      	cmp	r3, #32
    96d8:	d013      	beq.n	9702 <cdcdf_acm_req+0x62>
    96da:	2b22      	cmp	r3, #34	; 0x22
    96dc:	d032      	beq.n	9744 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    96de:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    96e2:	b003      	add	sp, #12
    96e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    96e6:	2a01      	cmp	r2, #1
    96e8:	d046      	beq.n	9778 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    96ea:	784b      	ldrb	r3, [r1, #1]
    96ec:	2b21      	cmp	r3, #33	; 0x21
    96ee:	d145      	bne.n	977c <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    96f0:	88cb      	ldrh	r3, [r1, #6]
    96f2:	2b07      	cmp	r3, #7
    96f4:	d145      	bne.n	9782 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    96f6:	2300      	movs	r3, #0
    96f8:	2207      	movs	r2, #7
    96fa:	4925      	ldr	r1, [pc, #148]	; (9790 <cdcdf_acm_req+0xf0>)
    96fc:	4c25      	ldr	r4, [pc, #148]	; (9794 <cdcdf_acm_req+0xf4>)
    96fe:	47a0      	blx	r4
    9700:	e7ef      	b.n	96e2 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9702:	2f07      	cmp	r7, #7
    9704:	d12b      	bne.n	975e <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    9706:	b1be      	cbz	r6, 9738 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    9708:	6800      	ldr	r0, [r0, #0]
    970a:	9000      	str	r0, [sp, #0]
    970c:	888a      	ldrh	r2, [r1, #4]
    970e:	798b      	ldrb	r3, [r1, #6]
    9710:	f8ad 2004 	strh.w	r2, [sp, #4]
    9714:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    9718:	4b1b      	ldr	r3, [pc, #108]	; (9788 <cdcdf_acm_req+0xe8>)
    971a:	691b      	ldr	r3, [r3, #16]
    971c:	b113      	cbz	r3, 9724 <cdcdf_acm_req+0x84>
    971e:	4668      	mov	r0, sp
    9720:	4798      	blx	r3
    9722:	b1f8      	cbz	r0, 9764 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    9724:	4b18      	ldr	r3, [pc, #96]	; (9788 <cdcdf_acm_req+0xe8>)
    9726:	aa02      	add	r2, sp, #8
    9728:	e912 0003 	ldmdb	r2, {r0, r1}
    972c:	6098      	str	r0, [r3, #8]
    972e:	8199      	strh	r1, [r3, #12]
    9730:	0c09      	lsrs	r1, r1, #16
    9732:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    9734:	2000      	movs	r0, #0
    9736:	e7d4      	b.n	96e2 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    9738:	2300      	movs	r3, #0
    973a:	2207      	movs	r2, #7
    973c:	4628      	mov	r0, r5
    973e:	4c15      	ldr	r4, [pc, #84]	; (9794 <cdcdf_acm_req+0xf4>)
    9740:	47a0      	blx	r4
    9742:	e7ce      	b.n	96e2 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    9744:	2300      	movs	r3, #0
    9746:	461a      	mov	r2, r3
    9748:	4619      	mov	r1, r3
    974a:	4618      	mov	r0, r3
    974c:	4d11      	ldr	r5, [pc, #68]	; (9794 <cdcdf_acm_req+0xf4>)
    974e:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    9750:	4b0d      	ldr	r3, [pc, #52]	; (9788 <cdcdf_acm_req+0xe8>)
    9752:	695b      	ldr	r3, [r3, #20]
    9754:	b143      	cbz	r3, 9768 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    9756:	8860      	ldrh	r0, [r4, #2]
    9758:	4798      	blx	r3
		return ERR_NONE;
    975a:	2000      	movs	r0, #0
    975c:	e7c1      	b.n	96e2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    975e:	f04f 30ff 	mov.w	r0, #4294967295
    9762:	e7be      	b.n	96e2 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    9764:	2000      	movs	r0, #0
    9766:	e7bc      	b.n	96e2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9768:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    976a:	e7ba      	b.n	96e2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    976c:	f06f 0009 	mvn.w	r0, #9
    9770:	e7b7      	b.n	96e2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9772:	f06f 0009 	mvn.w	r0, #9
    9776:	e7b4      	b.n	96e2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9778:	2000      	movs	r0, #0
    977a:	e7b2      	b.n	96e2 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    977c:	f06f 000c 	mvn.w	r0, #12
    9780:	e7af      	b.n	96e2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9782:	f04f 30ff 	mov.w	r0, #4294967295
    9786:	e7ac      	b.n	96e2 <cdcdf_acm_req+0x42>
    9788:	20000dac 	.word	0x20000dac
    978c:	0000a7e9 	.word	0x0000a7e9
    9790:	20000db4 	.word	0x20000db4
    9794:	0000a2c5 	.word	0x0000a2c5

00009798 <cdcdf_acm_ctrl>:
{
    9798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    979c:	b083      	sub	sp, #12
    979e:	4616      	mov	r6, r2
	switch (ctrl) {
    97a0:	2901      	cmp	r1, #1
    97a2:	d066      	beq.n	9872 <cdcdf_acm_ctrl+0xda>
    97a4:	b141      	cbz	r1, 97b8 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    97a6:	2902      	cmp	r1, #2
    97a8:	bf0c      	ite	eq
    97aa:	f06f 001a 	mvneq.w	r0, #26
    97ae:	f06f 000c 	mvnne.w	r0, #12
}
    97b2:	b003      	add	sp, #12
    97b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    97b8:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    97bc:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    97be:	2800      	cmp	r0, #0
    97c0:	f000 8085 	beq.w	98ce <cdcdf_acm_ctrl+0x136>
    97c4:	f10a 3bff 	add.w	fp, sl, #4294967295
    97c8:	f10a 0301 	add.w	r3, sl, #1
    97cc:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    97ce:	4f46      	ldr	r7, [pc, #280]	; (98e8 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    97d0:	f8df 9124 	ldr.w	r9, [pc, #292]	; 98f8 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    97d4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 98fc <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    97d8:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    97da:	7943      	ldrb	r3, [r0, #5]
    97dc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    97e0:	2b02      	cmp	r3, #2
    97e2:	d002      	beq.n	97ea <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    97e4:	f06f 0009 	mvn.w	r0, #9
    97e8:	e7e3      	b.n	97b2 <cdcdf_acm_ctrl+0x1a>
    97ea:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    97ee:	f89b 3000 	ldrb.w	r3, [fp]
    97f2:	429a      	cmp	r2, r3
    97f4:	d06e      	beq.n	98d4 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    97f6:	2bff      	cmp	r3, #255	; 0xff
    97f8:	d16f      	bne.n	98da <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    97fa:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    97fe:	2205      	movs	r2, #5
    9800:	6871      	ldr	r1, [r6, #4]
    9802:	4b3a      	ldr	r3, [pc, #232]	; (98ec <cdcdf_acm_ctrl+0x154>)
    9804:	4798      	blx	r3
		while (NULL != ep) {
    9806:	4604      	mov	r4, r0
    9808:	b1f8      	cbz	r0, 984a <cdcdf_acm_ctrl+0xb2>
    980a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    980e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    9810:	7963      	ldrb	r3, [r4, #5]
    9812:	7922      	ldrb	r2, [r4, #4]
    9814:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9818:	b292      	uxth	r2, r2
    981a:	78e1      	ldrb	r1, [r4, #3]
    981c:	4628      	mov	r0, r5
    981e:	47b8      	blx	r7
    9820:	2800      	cmp	r0, #0
    9822:	d15d      	bne.n	98e0 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9824:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    9828:	bf14      	ite	ne
    982a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    982e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    9832:	4628      	mov	r0, r5
    9834:	47c8      	blx	r9
			desc->sod = ep;
    9836:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    9838:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    983a:	6871      	ldr	r1, [r6, #4]
    983c:	4420      	add	r0, r4
    983e:	47c0      	blx	r8
		while (NULL != ep) {
    9840:	4604      	mov	r4, r0
    9842:	2800      	cmp	r0, #0
    9844:	d1e3      	bne.n	980e <cdcdf_acm_ctrl+0x76>
    9846:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    984a:	6833      	ldr	r3, [r6, #0]
    984c:	7818      	ldrb	r0, [r3, #0]
    984e:	2204      	movs	r2, #4
    9850:	6871      	ldr	r1, [r6, #4]
    9852:	4418      	add	r0, r3
    9854:	4b25      	ldr	r3, [pc, #148]	; (98ec <cdcdf_acm_ctrl+0x154>)
    9856:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    9858:	9b00      	ldr	r3, [sp, #0]
    985a:	459b      	cmp	fp, r3
    985c:	d004      	beq.n	9868 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    985e:	2800      	cmp	r0, #0
    9860:	d1ba      	bne.n	97d8 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    9862:	f06f 0009 	mvn.w	r0, #9
    9866:	e7a4      	b.n	97b2 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    9868:	2201      	movs	r2, #1
    986a:	4b21      	ldr	r3, [pc, #132]	; (98f0 <cdcdf_acm_ctrl+0x158>)
    986c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    986e:	2000      	movs	r0, #0
    9870:	e79f      	b.n	97b2 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9872:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    9874:	b142      	cbz	r2, 9888 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9876:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    9878:	795b      	ldrb	r3, [r3, #5]
    987a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    987e:	2b02      	cmp	r3, #2
    9880:	d002      	beq.n	9888 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    9882:	f06f 0009 	mvn.w	r0, #9
    9886:	e794      	b.n	97b2 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    9888:	7823      	ldrb	r3, [r4, #0]
    988a:	2bff      	cmp	r3, #255	; 0xff
    988c:	d008      	beq.n	98a0 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    988e:	23ff      	movs	r3, #255	; 0xff
    9890:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    9892:	78a0      	ldrb	r0, [r4, #2]
    9894:	4298      	cmp	r0, r3
    9896:	d003      	beq.n	98a0 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9898:	4b16      	ldr	r3, [pc, #88]	; (98f4 <cdcdf_acm_ctrl+0x15c>)
    989a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    989c:	23ff      	movs	r3, #255	; 0xff
    989e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    98a0:	7863      	ldrb	r3, [r4, #1]
    98a2:	2bff      	cmp	r3, #255	; 0xff
    98a4:	d008      	beq.n	98b8 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    98a6:	23ff      	movs	r3, #255	; 0xff
    98a8:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    98aa:	78e0      	ldrb	r0, [r4, #3]
    98ac:	4298      	cmp	r0, r3
    98ae:	d003      	beq.n	98b8 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    98b0:	4b10      	ldr	r3, [pc, #64]	; (98f4 <cdcdf_acm_ctrl+0x15c>)
    98b2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    98b4:	23ff      	movs	r3, #255	; 0xff
    98b6:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    98b8:	7920      	ldrb	r0, [r4, #4]
    98ba:	28ff      	cmp	r0, #255	; 0xff
    98bc:	d003      	beq.n	98c6 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    98be:	4b0d      	ldr	r3, [pc, #52]	; (98f4 <cdcdf_acm_ctrl+0x15c>)
    98c0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    98c2:	23ff      	movs	r3, #255	; 0xff
    98c4:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    98c6:	2000      	movs	r0, #0
    98c8:	4b09      	ldr	r3, [pc, #36]	; (98f0 <cdcdf_acm_ctrl+0x158>)
    98ca:	7158      	strb	r0, [r3, #5]
    98cc:	e771      	b.n	97b2 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    98ce:	f06f 0009 	mvn.w	r0, #9
    98d2:	e76e      	b.n	97b2 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    98d4:	f06f 0011 	mvn.w	r0, #17
    98d8:	e76b      	b.n	97b2 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    98da:	f06f 001b 	mvn.w	r0, #27
    98de:	e768      	b.n	97b2 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    98e0:	f06f 0013 	mvn.w	r0, #19
    98e4:	e765      	b.n	97b2 <cdcdf_acm_ctrl+0x1a>
    98e6:	bf00      	nop
    98e8:	00004fa5 	.word	0x00004fa5
    98ec:	0000a809 	.word	0x0000a809
    98f0:	20000dac 	.word	0x20000dac
    98f4:	0000500d 	.word	0x0000500d
    98f8:	00005039 	.word	0x00005039
    98fc:	0000a843 	.word	0x0000a843

00009900 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    9900:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9902:	4b0a      	ldr	r3, [pc, #40]	; (992c <cdcdf_acm_init+0x2c>)
    9904:	4798      	blx	r3
    9906:	2801      	cmp	r0, #1
    9908:	d80c      	bhi.n	9924 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    990a:	4809      	ldr	r0, [pc, #36]	; (9930 <cdcdf_acm_init+0x30>)
    990c:	4b09      	ldr	r3, [pc, #36]	; (9934 <cdcdf_acm_init+0x34>)
    990e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    9910:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    9912:	3018      	adds	r0, #24
    9914:	4b08      	ldr	r3, [pc, #32]	; (9938 <cdcdf_acm_init+0x38>)
    9916:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    9918:	4908      	ldr	r1, [pc, #32]	; (993c <cdcdf_acm_init+0x3c>)
    991a:	2001      	movs	r0, #1
    991c:	4b08      	ldr	r3, [pc, #32]	; (9940 <cdcdf_acm_init+0x40>)
    991e:	4798      	blx	r3
	return ERR_NONE;
    9920:	2000      	movs	r0, #0
    9922:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9924:	f06f 0010 	mvn.w	r0, #16
}
    9928:	bd08      	pop	{r3, pc}
    992a:	bf00      	nop
    992c:	0000a7f5 	.word	0x0000a7f5
    9930:	20000dac 	.word	0x20000dac
    9934:	00009799 	.word	0x00009799
    9938:	0000a795 	.word	0x0000a795
    993c:	20000398 	.word	0x20000398
    9940:	0000a701 	.word	0x0000a701

00009944 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    9944:	4b07      	ldr	r3, [pc, #28]	; (9964 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    9946:	795b      	ldrb	r3, [r3, #5]
    9948:	b143      	cbz	r3, 995c <cdcdf_acm_write+0x18>
{
    994a:	b510      	push	{r4, lr}
    994c:	460a      	mov	r2, r1
    994e:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    9950:	2301      	movs	r3, #1
    9952:	4804      	ldr	r0, [pc, #16]	; (9964 <cdcdf_acm_write+0x20>)
    9954:	78c0      	ldrb	r0, [r0, #3]
    9956:	4c04      	ldr	r4, [pc, #16]	; (9968 <cdcdf_acm_write+0x24>)
    9958:	47a0      	blx	r4
    995a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    995c:	f06f 0010 	mvn.w	r0, #16
    9960:	4770      	bx	lr
    9962:	bf00      	nop
    9964:	20000dac 	.word	0x20000dac
    9968:	0000a2c5 	.word	0x0000a2c5

0000996c <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    996c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    996e:	780b      	ldrb	r3, [r1, #0]
    9970:	2b81      	cmp	r3, #129	; 0x81
    9972:	d010      	beq.n	9996 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9974:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9978:	2b01      	cmp	r3, #1
    997a:	d13f      	bne.n	99fc <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    997c:	888a      	ldrh	r2, [r1, #4]
    997e:	4b22      	ldr	r3, [pc, #136]	; (9a08 <hid_keyboard_req+0x9c>)
    9980:	7b1b      	ldrb	r3, [r3, #12]
    9982:	429a      	cmp	r2, r3
    9984:	d13d      	bne.n	9a02 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    9986:	784b      	ldrb	r3, [r1, #1]
    9988:	2b03      	cmp	r3, #3
    998a:	d028      	beq.n	99de <hid_keyboard_req+0x72>
    998c:	2b0b      	cmp	r3, #11
    998e:	d02c      	beq.n	99ea <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9990:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9994:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9996:	784b      	ldrb	r3, [r1, #1]
    9998:	2b06      	cmp	r3, #6
    999a:	d002      	beq.n	99a2 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    999c:	f06f 0009 	mvn.w	r0, #9
    99a0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    99a2:	888a      	ldrh	r2, [r1, #4]
    99a4:	4b18      	ldr	r3, [pc, #96]	; (9a08 <hid_keyboard_req+0x9c>)
    99a6:	7b1b      	ldrb	r3, [r3, #12]
    99a8:	429a      	cmp	r2, r3
    99aa:	d002      	beq.n	99b2 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    99ac:	f06f 0009 	mvn.w	r0, #9
    99b0:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    99b2:	884b      	ldrh	r3, [r1, #2]
    99b4:	0a1b      	lsrs	r3, r3, #8
    99b6:	2b21      	cmp	r3, #33	; 0x21
    99b8:	d004      	beq.n	99c4 <hid_keyboard_req+0x58>
    99ba:	2b22      	cmp	r3, #34	; 0x22
    99bc:	d009      	beq.n	99d2 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    99be:	f06f 000c 	mvn.w	r0, #12
    99c2:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    99c4:	4b10      	ldr	r3, [pc, #64]	; (9a08 <hid_keyboard_req+0x9c>)
    99c6:	6819      	ldr	r1, [r3, #0]
    99c8:	2300      	movs	r3, #0
    99ca:	780a      	ldrb	r2, [r1, #0]
    99cc:	4c0f      	ldr	r4, [pc, #60]	; (9a0c <hid_keyboard_req+0xa0>)
    99ce:	47a0      	blx	r4
    99d0:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    99d2:	2300      	movs	r3, #0
    99d4:	223b      	movs	r2, #59	; 0x3b
    99d6:	490e      	ldr	r1, [pc, #56]	; (9a10 <hid_keyboard_req+0xa4>)
    99d8:	4c0c      	ldr	r4, [pc, #48]	; (9a0c <hid_keyboard_req+0xa0>)
    99da:	47a0      	blx	r4
    99dc:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    99de:	2300      	movs	r3, #0
    99e0:	2201      	movs	r2, #1
    99e2:	490c      	ldr	r1, [pc, #48]	; (9a14 <hid_keyboard_req+0xa8>)
    99e4:	4c09      	ldr	r4, [pc, #36]	; (9a0c <hid_keyboard_req+0xa0>)
    99e6:	47a0      	blx	r4
    99e8:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    99ea:	884a      	ldrh	r2, [r1, #2]
    99ec:	4b06      	ldr	r3, [pc, #24]	; (9a08 <hid_keyboard_req+0x9c>)
    99ee:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    99f0:	2300      	movs	r3, #0
    99f2:	461a      	mov	r2, r3
    99f4:	4619      	mov	r1, r3
    99f6:	4c05      	ldr	r4, [pc, #20]	; (9a0c <hid_keyboard_req+0xa0>)
    99f8:	47a0      	blx	r4
    99fa:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    99fc:	f06f 0009 	mvn.w	r0, #9
    9a00:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9a02:	f06f 0009 	mvn.w	r0, #9
    9a06:	bd10      	pop	{r4, pc}
    9a08:	20000dd0 	.word	0x20000dd0
    9a0c:	0000a2c5 	.word	0x0000a2c5
    9a10:	0000c324 	.word	0x0000c324
    9a14:	20000ddf 	.word	0x20000ddf

00009a18 <hid_keyboard_ctrl>:
{
    9a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a1c:	4614      	mov	r4, r2
	switch (ctrl) {
    9a1e:	2901      	cmp	r1, #1
    9a20:	d050      	beq.n	9ac4 <hid_keyboard_ctrl+0xac>
    9a22:	b141      	cbz	r1, 9a36 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    9a24:	2902      	cmp	r1, #2
    9a26:	bf0c      	ite	eq
    9a28:	f06f 051a 	mvneq.w	r5, #26
    9a2c:	f06f 050c 	mvnne.w	r5, #12
}
    9a30:	4628      	mov	r0, r5
    9a32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    9a36:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    9a3a:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    9a3c:	2b00      	cmp	r3, #0
    9a3e:	d05e      	beq.n	9afe <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    9a40:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    9a42:	795b      	ldrb	r3, [r3, #5]
    9a44:	2b03      	cmp	r3, #3
    9a46:	d15d      	bne.n	9b04 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    9a48:	f898 300c 	ldrb.w	r3, [r8, #12]
    9a4c:	429a      	cmp	r2, r3
    9a4e:	d05c      	beq.n	9b0a <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    9a50:	2bff      	cmp	r3, #255	; 0xff
    9a52:	d15d      	bne.n	9b10 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    9a54:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    9a58:	6823      	ldr	r3, [r4, #0]
    9a5a:	7818      	ldrb	r0, [r3, #0]
    9a5c:	2221      	movs	r2, #33	; 0x21
    9a5e:	6861      	ldr	r1, [r4, #4]
    9a60:	4418      	add	r0, r3
    9a62:	4b31      	ldr	r3, [pc, #196]	; (9b28 <hid_keyboard_ctrl+0x110>)
    9a64:	4798      	blx	r3
    9a66:	4b31      	ldr	r3, [pc, #196]	; (9b2c <hid_keyboard_ctrl+0x114>)
    9a68:	6018      	str	r0, [r3, #0]
    9a6a:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9a6c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 9b34 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9a70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9b38 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    9a74:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9b3c <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9a78:	6823      	ldr	r3, [r4, #0]
    9a7a:	7818      	ldrb	r0, [r3, #0]
    9a7c:	6861      	ldr	r1, [r4, #4]
    9a7e:	4418      	add	r0, r3
    9a80:	47c8      	blx	r9
		desc->sod = ep;
    9a82:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    9a84:	2800      	cmp	r0, #0
    9a86:	d046      	beq.n	9b16 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    9a88:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    9a8a:	7943      	ldrb	r3, [r0, #5]
    9a8c:	7902      	ldrb	r2, [r0, #4]
    9a8e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9a92:	b292      	uxth	r2, r2
    9a94:	78c1      	ldrb	r1, [r0, #3]
    9a96:	4638      	mov	r0, r7
    9a98:	47d0      	blx	sl
    9a9a:	4605      	mov	r5, r0
    9a9c:	2800      	cmp	r0, #0
    9a9e:	d13d      	bne.n	9b1c <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9aa0:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    9aa4:	bf14      	ite	ne
    9aa6:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9aaa:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    9aae:	4638      	mov	r0, r7
    9ab0:	47d8      	blx	fp
    9ab2:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    9ab4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    9ab8:	d1de      	bne.n	9a78 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    9aba:	4b1c      	ldr	r3, [pc, #112]	; (9b2c <hid_keyboard_ctrl+0x114>)
    9abc:	2201      	movs	r2, #1
    9abe:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    9ac0:	741a      	strb	r2, [r3, #16]
    9ac2:	e7b5      	b.n	9a30 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    9ac4:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    9ac6:	b11a      	cbz	r2, 9ad0 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9ac8:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    9aca:	795b      	ldrb	r3, [r3, #5]
    9acc:	2b03      	cmp	r3, #3
    9ace:	d128      	bne.n	9b22 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    9ad0:	7b2b      	ldrb	r3, [r5, #12]
    9ad2:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    9ad4:	bf1c      	itt	ne
    9ad6:	23ff      	movne	r3, #255	; 0xff
    9ad8:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    9ada:	7b68      	ldrb	r0, [r5, #13]
    9adc:	28ff      	cmp	r0, #255	; 0xff
    9ade:	d003      	beq.n	9ae8 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    9ae0:	4b13      	ldr	r3, [pc, #76]	; (9b30 <hid_keyboard_ctrl+0x118>)
    9ae2:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9ae4:	23ff      	movs	r3, #255	; 0xff
    9ae6:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    9ae8:	7ba8      	ldrb	r0, [r5, #14]
    9aea:	28ff      	cmp	r0, #255	; 0xff
    9aec:	d003      	beq.n	9af6 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    9aee:	4b10      	ldr	r3, [pc, #64]	; (9b30 <hid_keyboard_ctrl+0x118>)
    9af0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9af2:	23ff      	movs	r3, #255	; 0xff
    9af4:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    9af6:	2500      	movs	r5, #0
    9af8:	4b0c      	ldr	r3, [pc, #48]	; (9b2c <hid_keyboard_ctrl+0x114>)
    9afa:	741d      	strb	r5, [r3, #16]
    9afc:	e798      	b.n	9a30 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    9afe:	f06f 0509 	mvn.w	r5, #9
    9b02:	e795      	b.n	9a30 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    9b04:	f06f 0509 	mvn.w	r5, #9
    9b08:	e792      	b.n	9a30 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    9b0a:	f06f 0511 	mvn.w	r5, #17
    9b0e:	e78f      	b.n	9a30 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    9b10:	f06f 051b 	mvn.w	r5, #27
    9b14:	e78c      	b.n	9a30 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    9b16:	f06f 0509 	mvn.w	r5, #9
    9b1a:	e789      	b.n	9a30 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    9b1c:	f06f 0513 	mvn.w	r5, #19
    9b20:	e786      	b.n	9a30 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    9b22:	f06f 0509 	mvn.w	r5, #9
    9b26:	e783      	b.n	9a30 <hid_keyboard_ctrl+0x18>
    9b28:	0000a809 	.word	0x0000a809
    9b2c:	20000dd0 	.word	0x20000dd0
    9b30:	0000500d 	.word	0x0000500d
    9b34:	0000a843 	.word	0x0000a843
    9b38:	00004fa5 	.word	0x00004fa5
    9b3c:	00005039 	.word	0x00005039

00009b40 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    9b40:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9b42:	4b0a      	ldr	r3, [pc, #40]	; (9b6c <hiddf_keyboard_init+0x2c>)
    9b44:	4798      	blx	r3
    9b46:	2801      	cmp	r0, #1
    9b48:	d80c      	bhi.n	9b64 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    9b4a:	4809      	ldr	r0, [pc, #36]	; (9b70 <hiddf_keyboard_init+0x30>)
    9b4c:	4b09      	ldr	r3, [pc, #36]	; (9b74 <hiddf_keyboard_init+0x34>)
    9b4e:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    9b50:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    9b52:	3014      	adds	r0, #20
    9b54:	4b08      	ldr	r3, [pc, #32]	; (9b78 <hiddf_keyboard_init+0x38>)
    9b56:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    9b58:	4908      	ldr	r1, [pc, #32]	; (9b7c <hiddf_keyboard_init+0x3c>)
    9b5a:	2001      	movs	r0, #1
    9b5c:	4b08      	ldr	r3, [pc, #32]	; (9b80 <hiddf_keyboard_init+0x40>)
    9b5e:	4798      	blx	r3
	return ERR_NONE;
    9b60:	2000      	movs	r0, #0
    9b62:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9b64:	f06f 0010 	mvn.w	r0, #16
}
    9b68:	bd08      	pop	{r3, pc}
    9b6a:	bf00      	nop
    9b6c:	0000a7f5 	.word	0x0000a7f5
    9b70:	20000dd0 	.word	0x20000dd0
    9b74:	00009a19 	.word	0x00009a19
    9b78:	0000a795 	.word	0x0000a795
    9b7c:	200003a0 	.word	0x200003a0
    9b80:	0000a701 	.word	0x0000a701

00009b84 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    9b84:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    9b86:	4b26      	ldr	r3, [pc, #152]	; (9c20 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    9b88:	7c1b      	ldrb	r3, [r3, #16]
    9b8a:	2b00      	cmp	r3, #0
    9b8c:	d045      	beq.n	9c1a <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    9b8e:	4a24      	ldr	r2, [pc, #144]	; (9c20 <hiddf_keyboard_keys_state_change+0x9c>)
    9b90:	2300      	movs	r3, #0
    9b92:	6053      	str	r3, [r2, #4]
    9b94:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    9b96:	b329      	cbz	r1, 9be4 <hiddf_keyboard_keys_state_change+0x60>
    9b98:	4603      	mov	r3, r0
    9b9a:	1e4d      	subs	r5, r1, #1
    9b9c:	b2ed      	uxtb	r5, r5
    9b9e:	3501      	adds	r5, #1
    9ba0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    9ba4:	4405      	add	r5, r0
    9ba6:	2200      	movs	r2, #0
    9ba8:	e002      	b.n	9bb0 <hiddf_keyboard_keys_state_change+0x2c>
    9baa:	3303      	adds	r3, #3
    9bac:	42ab      	cmp	r3, r5
    9bae:	d005      	beq.n	9bbc <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    9bb0:	785c      	ldrb	r4, [r3, #1]
    9bb2:	2c00      	cmp	r4, #0
    9bb4:	d0f9      	beq.n	9baa <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    9bb6:	3201      	adds	r2, #1
    9bb8:	b2d2      	uxtb	r2, r2
    9bba:	e7f6      	b.n	9baa <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    9bbc:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    9bbe:	b2d2      	uxtb	r2, r2
    9bc0:	2a06      	cmp	r2, #6
    9bc2:	d809      	bhi.n	9bd8 <hiddf_keyboard_keys_state_change+0x54>
    9bc4:	4603      	mov	r3, r0
    9bc6:	1e4a      	subs	r2, r1, #1
    9bc8:	b2d2      	uxtb	r2, r2
    9bca:	3201      	adds	r2, #1
    9bcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9bd0:	4410      	add	r0, r2
    9bd2:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    9bd4:	4d12      	ldr	r5, [pc, #72]	; (9c20 <hiddf_keyboard_keys_state_change+0x9c>)
    9bd6:	e015      	b.n	9c04 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    9bd8:	4b11      	ldr	r3, [pc, #68]	; (9c20 <hiddf_keyboard_keys_state_change+0x9c>)
    9bda:	f04f 32ff 	mov.w	r2, #4294967295
    9bde:	f8c3 2006 	str.w	r2, [r3, #6]
    9be2:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    9be4:	480e      	ldr	r0, [pc, #56]	; (9c20 <hiddf_keyboard_keys_state_change+0x9c>)
    9be6:	2300      	movs	r3, #0
    9be8:	2208      	movs	r2, #8
    9bea:	1d01      	adds	r1, r0, #4
    9bec:	7b40      	ldrb	r0, [r0, #13]
    9bee:	4c0d      	ldr	r4, [pc, #52]	; (9c24 <hiddf_keyboard_keys_state_change+0xa0>)
    9bf0:	47a0      	blx	r4
    9bf2:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    9bf4:	1c62      	adds	r2, r4, #1
    9bf6:	7819      	ldrb	r1, [r3, #0]
    9bf8:	442c      	add	r4, r5
    9bfa:	7121      	strb	r1, [r4, #4]
    9bfc:	b2d4      	uxtb	r4, r2
    9bfe:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    9c00:	4283      	cmp	r3, r0
    9c02:	d0ef      	beq.n	9be4 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    9c04:	789a      	ldrb	r2, [r3, #2]
    9c06:	2a01      	cmp	r2, #1
    9c08:	d1f9      	bne.n	9bfe <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    9c0a:	785a      	ldrb	r2, [r3, #1]
    9c0c:	2a00      	cmp	r2, #0
    9c0e:	d0f1      	beq.n	9bf4 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    9c10:	792a      	ldrb	r2, [r5, #4]
    9c12:	7819      	ldrb	r1, [r3, #0]
    9c14:	430a      	orrs	r2, r1
    9c16:	712a      	strb	r2, [r5, #4]
    9c18:	e7f1      	b.n	9bfe <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    9c1a:	f06f 0010 	mvn.w	r0, #16
}
    9c1e:	bd38      	pop	{r3, r4, r5, pc}
    9c20:	20000dd0 	.word	0x20000dd0
    9c24:	0000a2c5 	.word	0x0000a2c5

00009c28 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9c28:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9c2a:	780b      	ldrb	r3, [r1, #0]
    9c2c:	2b81      	cmp	r3, #129	; 0x81
    9c2e:	d010      	beq.n	9c52 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9c30:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9c34:	2b01      	cmp	r3, #1
    9c36:	d13f      	bne.n	9cb8 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    9c38:	888a      	ldrh	r2, [r1, #4]
    9c3a:	4b22      	ldr	r3, [pc, #136]	; (9cc4 <hid_mouse_req+0x9c>)
    9c3c:	7a1b      	ldrb	r3, [r3, #8]
    9c3e:	429a      	cmp	r2, r3
    9c40:	d13d      	bne.n	9cbe <hid_mouse_req+0x96>
			switch (req->bRequest) {
    9c42:	784b      	ldrb	r3, [r1, #1]
    9c44:	2b03      	cmp	r3, #3
    9c46:	d028      	beq.n	9c9a <hid_mouse_req+0x72>
    9c48:	2b0b      	cmp	r3, #11
    9c4a:	d02c      	beq.n	9ca6 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9c4c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9c50:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9c52:	784b      	ldrb	r3, [r1, #1]
    9c54:	2b06      	cmp	r3, #6
    9c56:	d002      	beq.n	9c5e <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    9c58:	f06f 0009 	mvn.w	r0, #9
    9c5c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9c5e:	888a      	ldrh	r2, [r1, #4]
    9c60:	4b18      	ldr	r3, [pc, #96]	; (9cc4 <hid_mouse_req+0x9c>)
    9c62:	7a1b      	ldrb	r3, [r3, #8]
    9c64:	429a      	cmp	r2, r3
    9c66:	d002      	beq.n	9c6e <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    9c68:	f06f 0009 	mvn.w	r0, #9
    9c6c:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    9c6e:	884b      	ldrh	r3, [r1, #2]
    9c70:	0a1b      	lsrs	r3, r3, #8
    9c72:	2b21      	cmp	r3, #33	; 0x21
    9c74:	d004      	beq.n	9c80 <hid_mouse_req+0x58>
    9c76:	2b22      	cmp	r3, #34	; 0x22
    9c78:	d009      	beq.n	9c8e <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    9c7a:	f06f 000c 	mvn.w	r0, #12
    9c7e:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    9c80:	4b10      	ldr	r3, [pc, #64]	; (9cc4 <hid_mouse_req+0x9c>)
    9c82:	6819      	ldr	r1, [r3, #0]
    9c84:	2300      	movs	r3, #0
    9c86:	780a      	ldrb	r2, [r1, #0]
    9c88:	4c0f      	ldr	r4, [pc, #60]	; (9cc8 <hid_mouse_req+0xa0>)
    9c8a:	47a0      	blx	r4
    9c8c:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    9c8e:	2300      	movs	r3, #0
    9c90:	2234      	movs	r2, #52	; 0x34
    9c92:	490e      	ldr	r1, [pc, #56]	; (9ccc <hid_mouse_req+0xa4>)
    9c94:	4c0c      	ldr	r4, [pc, #48]	; (9cc8 <hid_mouse_req+0xa0>)
    9c96:	47a0      	blx	r4
    9c98:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    9c9a:	2300      	movs	r3, #0
    9c9c:	2201      	movs	r2, #1
    9c9e:	490c      	ldr	r1, [pc, #48]	; (9cd0 <hid_mouse_req+0xa8>)
    9ca0:	4c09      	ldr	r4, [pc, #36]	; (9cc8 <hid_mouse_req+0xa0>)
    9ca2:	47a0      	blx	r4
    9ca4:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    9ca6:	884a      	ldrh	r2, [r1, #2]
    9ca8:	4b06      	ldr	r3, [pc, #24]	; (9cc4 <hid_mouse_req+0x9c>)
    9caa:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    9cac:	2300      	movs	r3, #0
    9cae:	461a      	mov	r2, r3
    9cb0:	4619      	mov	r1, r3
    9cb2:	4c05      	ldr	r4, [pc, #20]	; (9cc8 <hid_mouse_req+0xa0>)
    9cb4:	47a0      	blx	r4
    9cb6:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9cb8:	f06f 0009 	mvn.w	r0, #9
    9cbc:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9cbe:	f06f 0009 	mvn.w	r0, #9
    9cc2:	bd10      	pop	{r4, pc}
    9cc4:	20000df0 	.word	0x20000df0
    9cc8:	0000a2c5 	.word	0x0000a2c5
    9ccc:	0000c360 	.word	0x0000c360
    9cd0:	20000dfa 	.word	0x20000dfa

00009cd4 <hid_mouse_ctrl>:
{
    9cd4:	b570      	push	{r4, r5, r6, lr}
    9cd6:	4614      	mov	r4, r2
	switch (ctrl) {
    9cd8:	2901      	cmp	r1, #1
    9cda:	d040      	beq.n	9d5e <hid_mouse_ctrl+0x8a>
    9cdc:	b139      	cbz	r1, 9cee <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    9cde:	2902      	cmp	r1, #2
    9ce0:	bf0c      	ite	eq
    9ce2:	f06f 041a 	mvneq.w	r4, #26
    9ce6:	f06f 040c 	mvnne.w	r4, #12
}
    9cea:	4620      	mov	r0, r4
    9cec:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    9cee:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    9cf0:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    9cf2:	2b00      	cmp	r3, #0
    9cf4:	d049      	beq.n	9d8a <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    9cf6:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    9cf8:	795b      	ldrb	r3, [r3, #5]
    9cfa:	2b03      	cmp	r3, #3
    9cfc:	d148      	bne.n	9d90 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    9cfe:	7a2b      	ldrb	r3, [r5, #8]
    9d00:	429a      	cmp	r2, r3
    9d02:	d048      	beq.n	9d96 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    9d04:	2bff      	cmp	r3, #255	; 0xff
    9d06:	d149      	bne.n	9d9c <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    9d08:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    9d0a:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    9d0c:	7818      	ldrb	r0, [r3, #0]
    9d0e:	2221      	movs	r2, #33	; 0x21
    9d10:	6861      	ldr	r1, [r4, #4]
    9d12:	4418      	add	r0, r3
    9d14:	4b29      	ldr	r3, [pc, #164]	; (9dbc <hid_mouse_ctrl+0xe8>)
    9d16:	4798      	blx	r3
    9d18:	4b29      	ldr	r3, [pc, #164]	; (9dc0 <hid_mouse_ctrl+0xec>)
    9d1a:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9d1c:	6823      	ldr	r3, [r4, #0]
    9d1e:	7818      	ldrb	r0, [r3, #0]
    9d20:	6861      	ldr	r1, [r4, #4]
    9d22:	4418      	add	r0, r3
    9d24:	4b27      	ldr	r3, [pc, #156]	; (9dc4 <hid_mouse_ctrl+0xf0>)
    9d26:	4798      	blx	r3
	desc->sod = ep;
    9d28:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    9d2a:	2800      	cmp	r0, #0
    9d2c:	d039      	beq.n	9da2 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    9d2e:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    9d30:	7943      	ldrb	r3, [r0, #5]
    9d32:	7902      	ldrb	r2, [r0, #4]
    9d34:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9d38:	b292      	uxth	r2, r2
    9d3a:	78c1      	ldrb	r1, [r0, #3]
    9d3c:	4630      	mov	r0, r6
    9d3e:	4b22      	ldr	r3, [pc, #136]	; (9dc8 <hid_mouse_ctrl+0xf4>)
    9d40:	4798      	blx	r3
    9d42:	4604      	mov	r4, r0
    9d44:	bb80      	cbnz	r0, 9da8 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9d46:	f016 0f80 	tst.w	r6, #128	; 0x80
    9d4a:	d030      	beq.n	9dae <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    9d4c:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    9d4e:	4630      	mov	r0, r6
    9d50:	4b1e      	ldr	r3, [pc, #120]	; (9dcc <hid_mouse_ctrl+0xf8>)
    9d52:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    9d54:	4b1a      	ldr	r3, [pc, #104]	; (9dc0 <hid_mouse_ctrl+0xec>)
    9d56:	2201      	movs	r2, #1
    9d58:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    9d5a:	72da      	strb	r2, [r3, #11]
    9d5c:	e7c5      	b.n	9cea <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    9d5e:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    9d60:	b11a      	cbz	r2, 9d6a <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9d62:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    9d64:	795b      	ldrb	r3, [r3, #5]
    9d66:	2b03      	cmp	r3, #3
    9d68:	d124      	bne.n	9db4 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    9d6a:	7a2b      	ldrb	r3, [r5, #8]
    9d6c:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    9d6e:	bf1c      	itt	ne
    9d70:	23ff      	movne	r3, #255	; 0xff
    9d72:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    9d74:	7a68      	ldrb	r0, [r5, #9]
    9d76:	28ff      	cmp	r0, #255	; 0xff
    9d78:	d003      	beq.n	9d82 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    9d7a:	4b15      	ldr	r3, [pc, #84]	; (9dd0 <hid_mouse_ctrl+0xfc>)
    9d7c:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9d7e:	23ff      	movs	r3, #255	; 0xff
    9d80:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    9d82:	2400      	movs	r4, #0
    9d84:	4b0e      	ldr	r3, [pc, #56]	; (9dc0 <hid_mouse_ctrl+0xec>)
    9d86:	72dc      	strb	r4, [r3, #11]
    9d88:	e7af      	b.n	9cea <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    9d8a:	f06f 0409 	mvn.w	r4, #9
    9d8e:	e7ac      	b.n	9cea <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    9d90:	f06f 0409 	mvn.w	r4, #9
    9d94:	e7a9      	b.n	9cea <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    9d96:	f06f 0411 	mvn.w	r4, #17
    9d9a:	e7a6      	b.n	9cea <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    9d9c:	f06f 041b 	mvn.w	r4, #27
    9da0:	e7a3      	b.n	9cea <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    9da2:	f06f 0409 	mvn.w	r4, #9
    9da6:	e7a0      	b.n	9cea <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    9da8:	f06f 0413 	mvn.w	r4, #19
    9dac:	e79d      	b.n	9cea <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    9dae:	f04f 34ff 	mov.w	r4, #4294967295
    9db2:	e79a      	b.n	9cea <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    9db4:	f06f 0409 	mvn.w	r4, #9
    9db8:	e797      	b.n	9cea <hid_mouse_ctrl+0x16>
    9dba:	bf00      	nop
    9dbc:	0000a809 	.word	0x0000a809
    9dc0:	20000df0 	.word	0x20000df0
    9dc4:	0000a843 	.word	0x0000a843
    9dc8:	00004fa5 	.word	0x00004fa5
    9dcc:	00005039 	.word	0x00005039
    9dd0:	0000500d 	.word	0x0000500d

00009dd4 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    9dd4:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9dd6:	4b0a      	ldr	r3, [pc, #40]	; (9e00 <hiddf_mouse_init+0x2c>)
    9dd8:	4798      	blx	r3
    9dda:	2801      	cmp	r0, #1
    9ddc:	d80c      	bhi.n	9df8 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    9dde:	4809      	ldr	r0, [pc, #36]	; (9e04 <hiddf_mouse_init+0x30>)
    9de0:	4b09      	ldr	r3, [pc, #36]	; (9e08 <hiddf_mouse_init+0x34>)
    9de2:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    9de4:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    9de6:	300c      	adds	r0, #12
    9de8:	4b08      	ldr	r3, [pc, #32]	; (9e0c <hiddf_mouse_init+0x38>)
    9dea:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    9dec:	4908      	ldr	r1, [pc, #32]	; (9e10 <hiddf_mouse_init+0x3c>)
    9dee:	2001      	movs	r0, #1
    9df0:	4b08      	ldr	r3, [pc, #32]	; (9e14 <hiddf_mouse_init+0x40>)
    9df2:	4798      	blx	r3
	return ERR_NONE;
    9df4:	2000      	movs	r0, #0
    9df6:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9df8:	f06f 0010 	mvn.w	r0, #16
}
    9dfc:	bd08      	pop	{r3, pc}
    9dfe:	bf00      	nop
    9e00:	0000a7f5 	.word	0x0000a7f5
    9e04:	20000df0 	.word	0x20000df0
    9e08:	00009cd5 	.word	0x00009cd5
    9e0c:	0000a795 	.word	0x0000a795
    9e10:	200003a8 	.word	0x200003a8
    9e14:	0000a701 	.word	0x0000a701

00009e18 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    9e18:	2200      	movs	r2, #0
    9e1a:	4b0d      	ldr	r3, [pc, #52]	; (9e50 <hiddf_mouse_move+0x38>)
    9e1c:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    9e1e:	2901      	cmp	r1, #1
    9e20:	d00e      	beq.n	9e40 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    9e22:	2902      	cmp	r1, #2
    9e24:	d00e      	beq.n	9e44 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    9e26:	2903      	cmp	r1, #3
    9e28:	d10f      	bne.n	9e4a <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    9e2a:	4b09      	ldr	r3, [pc, #36]	; (9e50 <hiddf_mouse_move+0x38>)
    9e2c:	71d8      	strb	r0, [r3, #7]
{
    9e2e:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    9e30:	4807      	ldr	r0, [pc, #28]	; (9e50 <hiddf_mouse_move+0x38>)
    9e32:	2300      	movs	r3, #0
    9e34:	2204      	movs	r2, #4
    9e36:	1881      	adds	r1, r0, r2
    9e38:	7a40      	ldrb	r0, [r0, #9]
    9e3a:	4c06      	ldr	r4, [pc, #24]	; (9e54 <hiddf_mouse_move+0x3c>)
    9e3c:	47a0      	blx	r4
    9e3e:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    9e40:	7158      	strb	r0, [r3, #5]
    9e42:	e7f4      	b.n	9e2e <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    9e44:	4b02      	ldr	r3, [pc, #8]	; (9e50 <hiddf_mouse_move+0x38>)
    9e46:	7198      	strb	r0, [r3, #6]
    9e48:	e7f1      	b.n	9e2e <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    9e4a:	f06f 000c 	mvn.w	r0, #12
    9e4e:	4770      	bx	lr
    9e50:	20000df0 	.word	0x20000df0
    9e54:	0000a2c5 	.word	0x0000a2c5

00009e58 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    9e58:	4770      	bx	lr

00009e5a <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    9e5a:	e7fe      	b.n	9e5a <midi_cb_ep_bulk_out>

00009e5c <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9e5c:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    9e5e:	780b      	ldrb	r3, [r1, #0]
    9e60:	2b81      	cmp	r3, #129	; 0x81
    9e62:	d014      	beq.n	9e8e <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9e64:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9e68:	2b01      	cmp	r3, #1
    9e6a:	d132      	bne.n	9ed2 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    9e6c:	888b      	ldrh	r3, [r1, #4]
    9e6e:	4a1c      	ldr	r2, [pc, #112]	; (9ee0 <audio_midi_req+0x84>)
    9e70:	7912      	ldrb	r2, [r2, #4]
    9e72:	429a      	cmp	r2, r3
    9e74:	d003      	beq.n	9e7e <audio_midi_req+0x22>
    9e76:	4a1a      	ldr	r2, [pc, #104]	; (9ee0 <audio_midi_req+0x84>)
    9e78:	7952      	ldrb	r2, [r2, #5]
    9e7a:	429a      	cmp	r2, r3
    9e7c:	d12c      	bne.n	9ed8 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    9e7e:	784b      	ldrb	r3, [r1, #1]
    9e80:	2b03      	cmp	r3, #3
    9e82:	d017      	beq.n	9eb4 <audio_midi_req+0x58>
    9e84:	2b0b      	cmp	r3, #11
    9e86:	d01b      	beq.n	9ec0 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    9e88:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9e8c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    9e8e:	888b      	ldrh	r3, [r1, #4]
    9e90:	4a13      	ldr	r2, [pc, #76]	; (9ee0 <audio_midi_req+0x84>)
    9e92:	7912      	ldrb	r2, [r2, #4]
    9e94:	429a      	cmp	r2, r3
    9e96:	d006      	beq.n	9ea6 <audio_midi_req+0x4a>
    9e98:	4a11      	ldr	r2, [pc, #68]	; (9ee0 <audio_midi_req+0x84>)
    9e9a:	7952      	ldrb	r2, [r2, #5]
    9e9c:	429a      	cmp	r2, r3
    9e9e:	d002      	beq.n	9ea6 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    9ea0:	f06f 0009 	mvn.w	r0, #9
    9ea4:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    9ea6:	4b0e      	ldr	r3, [pc, #56]	; (9ee0 <audio_midi_req+0x84>)
    9ea8:	6819      	ldr	r1, [r3, #0]
    9eaa:	2300      	movs	r3, #0
    9eac:	780a      	ldrb	r2, [r1, #0]
    9eae:	4c0d      	ldr	r4, [pc, #52]	; (9ee4 <audio_midi_req+0x88>)
    9eb0:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    9eb2:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    9eb4:	2300      	movs	r3, #0
    9eb6:	2201      	movs	r2, #1
    9eb8:	490b      	ldr	r1, [pc, #44]	; (9ee8 <audio_midi_req+0x8c>)
    9eba:	4c0a      	ldr	r4, [pc, #40]	; (9ee4 <audio_midi_req+0x88>)
    9ebc:	47a0      	blx	r4
    9ebe:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    9ec0:	884a      	ldrh	r2, [r1, #2]
    9ec2:	4b07      	ldr	r3, [pc, #28]	; (9ee0 <audio_midi_req+0x84>)
    9ec4:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    9ec6:	2300      	movs	r3, #0
    9ec8:	461a      	mov	r2, r3
    9eca:	4619      	mov	r1, r3
    9ecc:	4c05      	ldr	r4, [pc, #20]	; (9ee4 <audio_midi_req+0x88>)
    9ece:	47a0      	blx	r4
    9ed0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    9ed2:	f06f 0009 	mvn.w	r0, #9
    9ed6:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9ed8:	f06f 0009 	mvn.w	r0, #9
    9edc:	bd10      	pop	{r4, pc}
    9ede:	bf00      	nop
    9ee0:	20000e08 	.word	0x20000e08
    9ee4:	0000a2c5 	.word	0x0000a2c5
    9ee8:	20000e10 	.word	0x20000e10

00009eec <audio_midi_ctrl>:
{
    9eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9ef0:	b083      	sub	sp, #12
    9ef2:	4615      	mov	r5, r2
	switch (ctrl) {
    9ef4:	2901      	cmp	r1, #1
    9ef6:	f000 8092 	beq.w	a01e <audio_midi_ctrl+0x132>
    9efa:	b141      	cbz	r1, 9f0e <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    9efc:	2902      	cmp	r1, #2
    9efe:	bf0c      	ite	eq
    9f00:	f06f 001a 	mvneq.w	r0, #26
    9f04:	f06f 000c 	mvnne.w	r0, #12
}
    9f08:	b003      	add	sp, #12
    9f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    9f0e:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    9f12:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    9f14:	2800      	cmp	r0, #0
    9f16:	f000 80a9 	beq.w	a06c <audio_midi_ctrl+0x180>
    9f1a:	f109 0604 	add.w	r6, r9, #4
    9f1e:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    9f20:	f04f 0804 	mov.w	r8, #4
    9f24:	4f5d      	ldr	r7, [pc, #372]	; (a09c <audio_midi_ctrl+0x1b0>)
    9f26:	e019      	b.n	9f5c <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9f28:	f816 3b01 	ldrb.w	r3, [r6], #1
    9f2c:	429a      	cmp	r2, r3
    9f2e:	f000 80a3 	beq.w	a078 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    9f32:	2bff      	cmp	r3, #255	; 0xff
    9f34:	f040 80a3 	bne.w	a07e <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    9f38:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    9f3c:	2c01      	cmp	r4, #1
    9f3e:	d016      	beq.n	9f6e <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    9f40:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    9f42:	7818      	ldrb	r0, [r3, #0]
    9f44:	4642      	mov	r2, r8
    9f46:	6869      	ldr	r1, [r5, #4]
    9f48:	4418      	add	r0, r3
    9f4a:	47b8      	blx	r7
    9f4c:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    9f4e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    9f52:	f000 809e 	beq.w	a092 <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    9f56:	2800      	cmp	r0, #0
    9f58:	f000 808b 	beq.w	a072 <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    9f5c:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    9f5e:	7943      	ldrb	r3, [r0, #5]
    9f60:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    9f64:	2b01      	cmp	r3, #1
    9f66:	d0df      	beq.n	9f28 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    9f68:	f06f 0009 	mvn.w	r0, #9
    9f6c:	e7cc      	b.n	9f08 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    9f6e:	2205      	movs	r2, #5
    9f70:	6869      	ldr	r1, [r5, #4]
    9f72:	4b4a      	ldr	r3, [pc, #296]	; (a09c <audio_midi_ctrl+0x1b0>)
    9f74:	4798      	blx	r3
    9f76:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    9f78:	4e49      	ldr	r6, [pc, #292]	; (a0a0 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9f7a:	f8df 8144 	ldr.w	r8, [pc, #324]	; a0c0 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    9f7e:	4f49      	ldr	r7, [pc, #292]	; (a0a4 <audio_midi_ctrl+0x1b8>)
    9f80:	e01a      	b.n	9fb8 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    9f82:	4a47      	ldr	r2, [pc, #284]	; (a0a0 <audio_midi_ctrl+0x1b4>)
    9f84:	7953      	ldrb	r3, [r2, #5]
    9f86:	425b      	negs	r3, r3
    9f88:	b2db      	uxtb	r3, r3
    9f8a:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    9f8c:	f06f 0013 	mvn.w	r0, #19
    9f90:	e7ba      	b.n	9f08 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    9f92:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9f96:	b2c0      	uxtb	r0, r0
    9f98:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    9f9c:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    9f9e:	4a42      	ldr	r2, [pc, #264]	; (a0a8 <audio_midi_ctrl+0x1bc>)
    9fa0:	2102      	movs	r1, #2
    9fa2:	f899 0006 	ldrb.w	r0, [r9, #6]
    9fa6:	4b41      	ldr	r3, [pc, #260]	; (a0ac <audio_midi_ctrl+0x1c0>)
    9fa8:	4798      	blx	r3
				desc->sod = ep;
    9faa:	602c      	str	r4, [r5, #0]
    9fac:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9fae:	6869      	ldr	r1, [r5, #4]
    9fb0:	4420      	add	r0, r4
    9fb2:	4b3f      	ldr	r3, [pc, #252]	; (a0b0 <audio_midi_ctrl+0x1c4>)
    9fb4:	4798      	blx	r3
    9fb6:	4604      	mov	r4, r0
			while (NULL != ep) {
    9fb8:	2c00      	cmp	r4, #0
    9fba:	d063      	beq.n	a084 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    9fbc:	78a3      	ldrb	r3, [r4, #2]
    9fbe:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    9fc2:	78e3      	ldrb	r3, [r4, #3]
    9fc4:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    9fc8:	7962      	ldrb	r2, [r4, #5]
    9fca:	7923      	ldrb	r3, [r4, #4]
    9fcc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    9fd0:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    9fd2:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    9fd6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9fda:	b2db      	uxtb	r3, r3
    9fdc:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    9fde:	2301      	movs	r3, #1
    9fe0:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9fe2:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9fe6:	f89d 1003 	ldrb.w	r1, [sp, #3]
    9fea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9fee:	b292      	uxth	r2, r2
    9ff0:	47c0      	blx	r8
    9ff2:	b2c0      	uxtb	r0, r0
    9ff4:	7170      	strb	r0, [r6, #5]
    9ff6:	2800      	cmp	r0, #0
    9ff8:	d1c3      	bne.n	9f82 <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9ffa:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9ffe:	f013 0f80 	tst.w	r3, #128	; 0x80
    a002:	d1c6      	bne.n	9f92 <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    a004:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a008:	b2c0      	uxtb	r0, r0
    a00a:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    a00e:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    a010:	4a28      	ldr	r2, [pc, #160]	; (a0b4 <audio_midi_ctrl+0x1c8>)
    a012:	2102      	movs	r1, #2
    a014:	f899 0007 	ldrb.w	r0, [r9, #7]
    a018:	4b24      	ldr	r3, [pc, #144]	; (a0ac <audio_midi_ctrl+0x1c0>)
    a01a:	4798      	blx	r3
    a01c:	e7c5      	b.n	9faa <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    a01e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a020:	b142      	cbz	r2, a034 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a022:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    a024:	795b      	ldrb	r3, [r3, #5]
    a026:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a02a:	2b01      	cmp	r3, #1
    a02c:	d002      	beq.n	a034 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    a02e:	f06f 0009 	mvn.w	r0, #9
    a032:	e769      	b.n	9f08 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    a034:	7923      	ldrb	r3, [r4, #4]
    a036:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    a038:	bf1c      	itt	ne
    a03a:	23ff      	movne	r3, #255	; 0xff
    a03c:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    a03e:	7963      	ldrb	r3, [r4, #5]
    a040:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    a042:	bf1c      	itt	ne
    a044:	23ff      	movne	r3, #255	; 0xff
    a046:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    a048:	79a0      	ldrb	r0, [r4, #6]
    a04a:	28ff      	cmp	r0, #255	; 0xff
    a04c:	d003      	beq.n	a056 <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    a04e:	4b1a      	ldr	r3, [pc, #104]	; (a0b8 <audio_midi_ctrl+0x1cc>)
    a050:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a052:	23ff      	movs	r3, #255	; 0xff
    a054:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    a056:	79e0      	ldrb	r0, [r4, #7]
    a058:	28ff      	cmp	r0, #255	; 0xff
    a05a:	d003      	beq.n	a064 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    a05c:	4b16      	ldr	r3, [pc, #88]	; (a0b8 <audio_midi_ctrl+0x1cc>)
    a05e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a060:	23ff      	movs	r3, #255	; 0xff
    a062:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    a064:	2000      	movs	r0, #0
    a066:	4b15      	ldr	r3, [pc, #84]	; (a0bc <audio_midi_ctrl+0x1d0>)
    a068:	7358      	strb	r0, [r3, #13]
    a06a:	e74d      	b.n	9f08 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    a06c:	f06f 0009 	mvn.w	r0, #9
    a070:	e74a      	b.n	9f08 <audio_midi_ctrl+0x1c>
    a072:	f06f 0009 	mvn.w	r0, #9
    a076:	e747      	b.n	9f08 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    a078:	f06f 0011 	mvn.w	r0, #17
    a07c:	e744      	b.n	9f08 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    a07e:	f06f 001b 	mvn.w	r0, #27
    a082:	e741      	b.n	9f08 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a084:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    a086:	7818      	ldrb	r0, [r3, #0]
    a088:	2204      	movs	r2, #4
    a08a:	6869      	ldr	r1, [r5, #4]
    a08c:	4418      	add	r0, r3
    a08e:	4b03      	ldr	r3, [pc, #12]	; (a09c <audio_midi_ctrl+0x1b0>)
    a090:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    a092:	2201      	movs	r2, #1
    a094:	4b09      	ldr	r3, [pc, #36]	; (a0bc <audio_midi_ctrl+0x1d0>)
    a096:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    a098:	2000      	movs	r0, #0
    a09a:	e735      	b.n	9f08 <audio_midi_ctrl+0x1c>
    a09c:	0000a809 	.word	0x0000a809
    a0a0:	20003e80 	.word	0x20003e80
    a0a4:	00005039 	.word	0x00005039
    a0a8:	00009e59 	.word	0x00009e59
    a0ac:	0000520d 	.word	0x0000520d
    a0b0:	0000a843 	.word	0x0000a843
    a0b4:	00009e5b 	.word	0x00009e5b
    a0b8:	0000500d 	.word	0x0000500d
    a0bc:	20000e08 	.word	0x20000e08
    a0c0:	00004fa5 	.word	0x00004fa5

0000a0c4 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    a0c4:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    a0c6:	4b0a      	ldr	r3, [pc, #40]	; (a0f0 <audiodf_midi_init+0x2c>)
    a0c8:	4798      	blx	r3
    a0ca:	2801      	cmp	r0, #1
    a0cc:	d80c      	bhi.n	a0e8 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    a0ce:	4809      	ldr	r0, [pc, #36]	; (a0f4 <audiodf_midi_init+0x30>)
    a0d0:	4b09      	ldr	r3, [pc, #36]	; (a0f8 <audiodf_midi_init+0x34>)
    a0d2:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    a0d4:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    a0d6:	3010      	adds	r0, #16
    a0d8:	4b08      	ldr	r3, [pc, #32]	; (a0fc <audiodf_midi_init+0x38>)
    a0da:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    a0dc:	4908      	ldr	r1, [pc, #32]	; (a100 <audiodf_midi_init+0x3c>)
    a0de:	2001      	movs	r0, #1
    a0e0:	4b08      	ldr	r3, [pc, #32]	; (a104 <audiodf_midi_init+0x40>)
    a0e2:	4798      	blx	r3
	return ERR_NONE;
    a0e4:	2000      	movs	r0, #0
    a0e6:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a0e8:	f06f 0010 	mvn.w	r0, #16
}
    a0ec:	bd08      	pop	{r3, pc}
    a0ee:	bf00      	nop
    a0f0:	0000a7f5 	.word	0x0000a7f5
    a0f4:	20000e08 	.word	0x20000e08
    a0f8:	00009eed 	.word	0x00009eed
    a0fc:	0000a795 	.word	0x0000a795
    a100:	200003b0 	.word	0x200003b0
    a104:	0000a701 	.word	0x0000a701

0000a108 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    a108:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    a10a:	4c06      	ldr	r4, [pc, #24]	; (a124 <audiodf_midi_xfer_packet+0x1c>)
    a10c:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    a10e:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    a110:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    a112:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    a114:	2300      	movs	r3, #0
    a116:	2204      	movs	r2, #4
    a118:	f104 0109 	add.w	r1, r4, #9
    a11c:	79a0      	ldrb	r0, [r4, #6]
    a11e:	4c02      	ldr	r4, [pc, #8]	; (a128 <audiodf_midi_xfer_packet+0x20>)
    a120:	47a0      	blx	r4
	
	
}
    a122:	bd10      	pop	{r4, pc}
    a124:	20000e08 	.word	0x20000e08
    a128:	0000a2c5 	.word	0x0000a2c5

0000a12c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    a12c:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a12e:	4b07      	ldr	r3, [pc, #28]	; (a14c <usbdc_unconfig+0x20>)
    a130:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    a132:	b14c      	cbz	r4, a148 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    a134:	2600      	movs	r6, #0
    a136:	2501      	movs	r5, #1
    a138:	6863      	ldr	r3, [r4, #4]
    a13a:	4632      	mov	r2, r6
    a13c:	4629      	mov	r1, r5
    a13e:	4620      	mov	r0, r4
    a140:	4798      	blx	r3
		func = func->next;
    a142:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    a144:	2c00      	cmp	r4, #0
    a146:	d1f7      	bne.n	a138 <usbdc_unconfig+0xc>
    a148:	bd70      	pop	{r4, r5, r6, pc}
    a14a:	bf00      	nop
    a14c:	20000e24 	.word	0x20000e24

0000a150 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    a150:	b570      	push	{r4, r5, r6, lr}
    a152:	4606      	mov	r6, r0
    a154:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a156:	4b07      	ldr	r3, [pc, #28]	; (a174 <usbdc_change_notify+0x24>)
    a158:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    a15a:	b91c      	cbnz	r4, a164 <usbdc_change_notify+0x14>
    a15c:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    a15e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    a160:	2c00      	cmp	r4, #0
    a162:	d0fb      	beq.n	a15c <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    a164:	6863      	ldr	r3, [r4, #4]
    a166:	2b00      	cmp	r3, #0
    a168:	d0f9      	beq.n	a15e <usbdc_change_notify+0xe>
			cg->cb(change, value);
    a16a:	4629      	mov	r1, r5
    a16c:	4630      	mov	r0, r6
    a16e:	4798      	blx	r3
    a170:	e7f5      	b.n	a15e <usbdc_change_notify+0xe>
    a172:	bf00      	nop
    a174:	20000e24 	.word	0x20000e24

0000a178 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a17a:	4607      	mov	r7, r0
    a17c:	460e      	mov	r6, r1
    a17e:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    a180:	4b0c      	ldr	r3, [pc, #48]	; (a1b4 <usbdc_request_handler+0x3c>)
    a182:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    a184:	b91c      	cbnz	r4, a18e <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    a186:	2000      	movs	r0, #0
    a188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    a18a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    a18c:	b16c      	cbz	r4, a1aa <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    a18e:	6863      	ldr	r3, [r4, #4]
    a190:	2b00      	cmp	r3, #0
    a192:	d0fa      	beq.n	a18a <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    a194:	462a      	mov	r2, r5
    a196:	4631      	mov	r1, r6
    a198:	4638      	mov	r0, r7
    a19a:	4798      	blx	r3
			if (0 == rc) {
    a19c:	b138      	cbz	r0, a1ae <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    a19e:	f110 0f0a 	cmn.w	r0, #10
    a1a2:	d0f2      	beq.n	a18a <usbdc_request_handler+0x12>
				return -1;
    a1a4:	f04f 30ff 	mov.w	r0, #4294967295
}
    a1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a1aa:	2000      	movs	r0, #0
    a1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    a1ae:	2001      	movs	r0, #1
    a1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1b2:	bf00      	nop
    a1b4:	20000e24 	.word	0x20000e24

0000a1b8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    a1b8:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a1ba:	4b06      	ldr	r3, [pc, #24]	; (a1d4 <usbd_sof_cb+0x1c>)
    a1bc:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    a1be:	b91c      	cbnz	r4, a1c8 <usbd_sof_cb+0x10>
    a1c0:	bd10      	pop	{r4, pc}
		sof = sof->next;
    a1c2:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    a1c4:	2c00      	cmp	r4, #0
    a1c6:	d0fb      	beq.n	a1c0 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    a1c8:	6863      	ldr	r3, [r4, #4]
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d0f9      	beq.n	a1c2 <usbd_sof_cb+0xa>
			sof->cb();
    a1ce:	4798      	blx	r3
    a1d0:	e7f7      	b.n	a1c2 <usbd_sof_cb+0xa>
    a1d2:	bf00      	nop
    a1d4:	20000e24 	.word	0x20000e24

0000a1d8 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    a1d8:	b510      	push	{r4, lr}
    a1da:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    a1dc:	b119      	cbz	r1, a1e6 <usbdc_cb_ctl_done+0xe>
    a1de:	2901      	cmp	r1, #1
    a1e0:	d026      	beq.n	a230 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    a1e2:	2000      	movs	r0, #0
    a1e4:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    a1e6:	7813      	ldrb	r3, [r2, #0]
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d1fa      	bne.n	a1e2 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    a1ec:	7853      	ldrb	r3, [r2, #1]
    a1ee:	2b05      	cmp	r3, #5
    a1f0:	d00f      	beq.n	a212 <usbdc_cb_ctl_done+0x3a>
    a1f2:	2b09      	cmp	r3, #9
    a1f4:	d1f5      	bne.n	a1e2 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    a1f6:	8852      	ldrh	r2, [r2, #2]
    a1f8:	4b10      	ldr	r3, [pc, #64]	; (a23c <usbdc_cb_ctl_done+0x64>)
    a1fa:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    a1fc:	8863      	ldrh	r3, [r4, #2]
    a1fe:	2b00      	cmp	r3, #0
    a200:	bf14      	ite	ne
    a202:	2104      	movne	r1, #4
    a204:	2103      	moveq	r1, #3
    a206:	4b0d      	ldr	r3, [pc, #52]	; (a23c <usbdc_cb_ctl_done+0x64>)
    a208:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a20a:	2001      	movs	r0, #1
    a20c:	4b0c      	ldr	r3, [pc, #48]	; (a240 <usbdc_cb_ctl_done+0x68>)
    a20e:	4798      	blx	r3
    a210:	e7e7      	b.n	a1e2 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    a212:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    a214:	b2c0      	uxtb	r0, r0
    a216:	4b0b      	ldr	r3, [pc, #44]	; (a244 <usbdc_cb_ctl_done+0x6c>)
    a218:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    a21a:	8863      	ldrh	r3, [r4, #2]
    a21c:	2b00      	cmp	r3, #0
    a21e:	bf14      	ite	ne
    a220:	2103      	movne	r1, #3
    a222:	2102      	moveq	r1, #2
    a224:	4b05      	ldr	r3, [pc, #20]	; (a23c <usbdc_cb_ctl_done+0x64>)
    a226:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a228:	2001      	movs	r0, #1
    a22a:	4b05      	ldr	r3, [pc, #20]	; (a240 <usbdc_cb_ctl_done+0x68>)
    a22c:	4798      	blx	r3
    a22e:	e7d8      	b.n	a1e2 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    a230:	2201      	movs	r2, #1
    a232:	4621      	mov	r1, r4
    a234:	2000      	movs	r0, #0
    a236:	4b04      	ldr	r3, [pc, #16]	; (a248 <usbdc_cb_ctl_done+0x70>)
    a238:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    a23a:	e7d2      	b.n	a1e2 <usbdc_cb_ctl_done+0xa>
    a23c:	20000e24 	.word	0x20000e24
    a240:	0000a151 	.word	0x0000a151
    a244:	00004f99 	.word	0x00004f99
    a248:	0000a179 	.word	0x0000a179

0000a24c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    a24c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    a24e:	4b0d      	ldr	r3, [pc, #52]	; (a284 <usbdc_reset+0x38>)
    a250:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    a252:	4d0d      	ldr	r5, [pc, #52]	; (a288 <usbdc_reset+0x3c>)
    a254:	2602      	movs	r6, #2
    a256:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    a258:	2400      	movs	r4, #0
    a25a:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    a25c:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    a25e:	4620      	mov	r0, r4
    a260:	4b0a      	ldr	r3, [pc, #40]	; (a28c <usbdc_reset+0x40>)
    a262:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    a264:	7f28      	ldrb	r0, [r5, #28]
    a266:	4b0a      	ldr	r3, [pc, #40]	; (a290 <usbdc_reset+0x44>)
    a268:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    a26a:	4a0a      	ldr	r2, [pc, #40]	; (a294 <usbdc_reset+0x48>)
    a26c:	4621      	mov	r1, r4
    a26e:	4620      	mov	r0, r4
    a270:	4d09      	ldr	r5, [pc, #36]	; (a298 <usbdc_reset+0x4c>)
    a272:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    a274:	4a09      	ldr	r2, [pc, #36]	; (a29c <usbdc_reset+0x50>)
    a276:	4631      	mov	r1, r6
    a278:	4620      	mov	r0, r4
    a27a:	47a8      	blx	r5
	usb_d_ep_enable(0);
    a27c:	4620      	mov	r0, r4
    a27e:	4b08      	ldr	r3, [pc, #32]	; (a2a0 <usbdc_reset+0x54>)
    a280:	4798      	blx	r3
    a282:	bd70      	pop	{r4, r5, r6, pc}
    a284:	0000a12d 	.word	0x0000a12d
    a288:	20000e24 	.word	0x20000e24
    a28c:	0000500d 	.word	0x0000500d
    a290:	00004ff9 	.word	0x00004ff9
    a294:	0000a2e5 	.word	0x0000a2e5
    a298:	0000520d 	.word	0x0000520d
    a29c:	0000a1d9 	.word	0x0000a1d9
    a2a0:	00005039 	.word	0x00005039

0000a2a4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    a2a4:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    a2a6:	b110      	cbz	r0, a2ae <usbd_event_cb+0xa>
    a2a8:	2801      	cmp	r0, #1
    a2aa:	d004      	beq.n	a2b6 <usbd_event_cb+0x12>
    a2ac:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    a2ae:	2000      	movs	r0, #0
    a2b0:	4b02      	ldr	r3, [pc, #8]	; (a2bc <usbd_event_cb+0x18>)
    a2b2:	4798      	blx	r3
		break;
    a2b4:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    a2b6:	4b02      	ldr	r3, [pc, #8]	; (a2c0 <usbd_event_cb+0x1c>)
    a2b8:	4798      	blx	r3
    a2ba:	bd08      	pop	{r3, pc}
    a2bc:	0000a151 	.word	0x0000a151
    a2c0:	0000a24d 	.word	0x0000a24d

0000a2c4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    a2c4:	b500      	push	{lr}
    a2c6:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    a2c8:	9101      	str	r1, [sp, #4]
    a2ca:	9202      	str	r2, [sp, #8]
    a2cc:	f88d 000c 	strb.w	r0, [sp, #12]
    a2d0:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    a2d4:	a801      	add	r0, sp, #4
    a2d6:	4b02      	ldr	r3, [pc, #8]	; (a2e0 <usbdc_xfer+0x1c>)
    a2d8:	4798      	blx	r3
}
    a2da:	b005      	add	sp, #20
    a2dc:	f85d fb04 	ldr.w	pc, [sp], #4
    a2e0:	00005085 	.word	0x00005085

0000a2e4 <usbdc_cb_ctl_req>:
{
    a2e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a2e8:	b083      	sub	sp, #12
    a2ea:	4605      	mov	r5, r0
    a2ec:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    a2ee:	2200      	movs	r2, #0
    a2f0:	4b9b      	ldr	r3, [pc, #620]	; (a560 <usbdc_cb_ctl_req+0x27c>)
    a2f2:	4798      	blx	r3
    a2f4:	f1b0 3fff 	cmp.w	r0, #4294967295
    a2f8:	d00b      	beq.n	a312 <usbdc_cb_ctl_req+0x2e>
    a2fa:	2801      	cmp	r0, #1
    a2fc:	f000 81e3 	beq.w	a6c6 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    a300:	7823      	ldrb	r3, [r4, #0]
    a302:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    a306:	d008      	beq.n	a31a <usbdc_cb_ctl_req+0x36>
    a308:	2a80      	cmp	r2, #128	; 0x80
    a30a:	f000 80f4 	beq.w	a4f6 <usbdc_cb_ctl_req+0x212>
		return false;
    a30e:	2000      	movs	r0, #0
    a310:	e000      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return false;
    a312:	2000      	movs	r0, #0
}
    a314:	b003      	add	sp, #12
    a316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    a31a:	7862      	ldrb	r2, [r4, #1]
    a31c:	3a01      	subs	r2, #1
    a31e:	2a0a      	cmp	r2, #10
    a320:	f200 81d3 	bhi.w	a6ca <usbdc_cb_ctl_req+0x3e6>
    a324:	e8df f012 	tbh	[pc, r2, lsl #1]
    a328:	01d10060 	.word	0x01d10060
    a32c:	01d10076 	.word	0x01d10076
    a330:	01d1000b 	.word	0x01d1000b
    a334:	01d101d1 	.word	0x01d101d1
    a338:	01d10015 	.word	0x01d10015
    a33c:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a33e:	2301      	movs	r3, #1
    a340:	2200      	movs	r2, #0
    a342:	4611      	mov	r1, r2
    a344:	4628      	mov	r0, r5
    a346:	4c87      	ldr	r4, [pc, #540]	; (a564 <usbdc_cb_ctl_req+0x280>)
    a348:	47a0      	blx	r4
    a34a:	fab0 f080 	clz	r0, r0
    a34e:	0940      	lsrs	r0, r0, #5
    a350:	e7e0      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    a352:	8862      	ldrh	r2, [r4, #2]
    a354:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    a356:	b1ca      	cbz	r2, a38c <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    a358:	4b83      	ldr	r3, [pc, #524]	; (a568 <usbdc_cb_ctl_req+0x284>)
    a35a:	681b      	ldr	r3, [r3, #0]
    a35c:	6859      	ldr	r1, [r3, #4]
    a35e:	6818      	ldr	r0, [r3, #0]
    a360:	4b82      	ldr	r3, [pc, #520]	; (a56c <usbdc_cb_ctl_req+0x288>)
    a362:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a364:	2800      	cmp	r0, #0
    a366:	f000 81be 	beq.w	a6e6 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    a36a:	78c2      	ldrb	r2, [r0, #3]
    a36c:	7881      	ldrb	r1, [r0, #2]
    a36e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    a372:	fa10 f181 	uxtah	r1, r0, r1
    a376:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a378:	2204      	movs	r2, #4
    a37a:	4b7d      	ldr	r3, [pc, #500]	; (a570 <usbdc_cb_ctl_req+0x28c>)
    a37c:	4798      	blx	r3
    a37e:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a380:	b130      	cbz	r0, a390 <usbdc_cb_ctl_req+0xac>
    a382:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a384:	f8df 81e0 	ldr.w	r8, [pc, #480]	; a568 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a388:	4f79      	ldr	r7, [pc, #484]	; (a570 <usbdc_cb_ctl_req+0x28c>)
    a38a:	e018      	b.n	a3be <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    a38c:	4b79      	ldr	r3, [pc, #484]	; (a574 <usbdc_cb_ctl_req+0x290>)
    a38e:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a390:	2301      	movs	r3, #1
    a392:	2200      	movs	r2, #0
    a394:	4611      	mov	r1, r2
    a396:	4628      	mov	r0, r5
    a398:	4c72      	ldr	r4, [pc, #456]	; (a564 <usbdc_cb_ctl_req+0x280>)
    a39a:	47a0      	blx	r4
    a39c:	fab0 f080 	clz	r0, r0
    a3a0:	0940      	lsrs	r0, r0, #5
    a3a2:	e7b7      	b.n	a314 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    a3a4:	464c      	mov	r4, r9
    a3a6:	e000      	b.n	a3aa <usbdc_cb_ctl_req+0xc6>
    a3a8:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    a3aa:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a3ac:	7803      	ldrb	r3, [r0, #0]
    a3ae:	4418      	add	r0, r3
    a3b0:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a3b2:	2204      	movs	r2, #4
    a3b4:	9901      	ldr	r1, [sp, #4]
    a3b6:	47b8      	blx	r7
    a3b8:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a3ba:	2800      	cmp	r0, #0
    a3bc:	d0e8      	beq.n	a390 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    a3be:	f890 9002 	ldrb.w	r9, [r0, #2]
    a3c2:	45a1      	cmp	r9, r4
    a3c4:	d0f1      	beq.n	a3aa <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a3c6:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    a3ca:	2c00      	cmp	r4, #0
    a3cc:	d0ea      	beq.n	a3a4 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    a3ce:	2600      	movs	r6, #0
    a3d0:	6863      	ldr	r3, [r4, #4]
    a3d2:	466a      	mov	r2, sp
    a3d4:	4631      	mov	r1, r6
    a3d6:	4620      	mov	r0, r4
    a3d8:	4798      	blx	r3
    a3da:	2800      	cmp	r0, #0
    a3dc:	d0e4      	beq.n	a3a8 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    a3de:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    a3e0:	2c00      	cmp	r4, #0
    a3e2:	d1f5      	bne.n	a3d0 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    a3e4:	464c      	mov	r4, r9
    a3e6:	e7e0      	b.n	a3aa <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a3e8:	f003 031f 	and.w	r3, r3, #31
    a3ec:	2b02      	cmp	r3, #2
    a3ee:	f040 816e 	bne.w	a6ce <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    a3f2:	88e3      	ldrh	r3, [r4, #6]
    a3f4:	b10b      	cbz	r3, a3fa <usbdc_cb_ctl_req+0x116>
			return false;
    a3f6:	2000      	movs	r0, #0
    a3f8:	e78c      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    a3fa:	88a0      	ldrh	r0, [r4, #4]
    a3fc:	2100      	movs	r1, #0
    a3fe:	b2c0      	uxtb	r0, r0
    a400:	4b5d      	ldr	r3, [pc, #372]	; (a578 <usbdc_cb_ctl_req+0x294>)
    a402:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a404:	2301      	movs	r3, #1
    a406:	2200      	movs	r2, #0
    a408:	4611      	mov	r1, r2
    a40a:	4628      	mov	r0, r5
    a40c:	4c55      	ldr	r4, [pc, #340]	; (a564 <usbdc_cb_ctl_req+0x280>)
    a40e:	47a0      	blx	r4
		return true;
    a410:	2001      	movs	r0, #1
    a412:	e77f      	b.n	a314 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a414:	f003 031f 	and.w	r3, r3, #31
    a418:	2b02      	cmp	r3, #2
    a41a:	f040 815a 	bne.w	a6d2 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    a41e:	88e3      	ldrh	r3, [r4, #6]
    a420:	b10b      	cbz	r3, a426 <usbdc_cb_ctl_req+0x142>
			return false;
    a422:	2000      	movs	r0, #0
    a424:	e776      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    a426:	88a0      	ldrh	r0, [r4, #4]
    a428:	2101      	movs	r1, #1
    a42a:	b2c0      	uxtb	r0, r0
    a42c:	4b52      	ldr	r3, [pc, #328]	; (a578 <usbdc_cb_ctl_req+0x294>)
    a42e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a430:	2301      	movs	r3, #1
    a432:	2200      	movs	r2, #0
    a434:	4611      	mov	r1, r2
    a436:	4628      	mov	r0, r5
    a438:	4c4a      	ldr	r4, [pc, #296]	; (a564 <usbdc_cb_ctl_req+0x280>)
    a43a:	47a0      	blx	r4
		return true;
    a43c:	2001      	movs	r0, #1
    a43e:	e769      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    a440:	8866      	ldrh	r6, [r4, #2]
    a442:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a444:	4a48      	ldr	r2, [pc, #288]	; (a568 <usbdc_cb_ctl_req+0x284>)
    a446:	6813      	ldr	r3, [r2, #0]
    a448:	7ed2      	ldrb	r2, [r2, #27]
    a44a:	6859      	ldr	r1, [r3, #4]
    a44c:	6818      	ldr	r0, [r3, #0]
    a44e:	4b47      	ldr	r3, [pc, #284]	; (a56c <usbdc_cb_ctl_req+0x288>)
    a450:	4798      	blx	r3
	if (NULL == ifc) {
    a452:	2800      	cmp	r0, #0
    a454:	d045      	beq.n	a4e2 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    a456:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    a458:	78c2      	ldrb	r2, [r0, #3]
    a45a:	7881      	ldrb	r1, [r0, #2]
    a45c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    a460:	fa10 f181 	uxtah	r1, r0, r1
    a464:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    a466:	2204      	movs	r2, #4
    a468:	4b41      	ldr	r3, [pc, #260]	; (a570 <usbdc_cb_ctl_req+0x28c>)
    a46a:	4798      	blx	r3
    a46c:	4603      	mov	r3, r0
    a46e:	2800      	cmp	r0, #0
    a470:	d039      	beq.n	a4e6 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a472:	2704      	movs	r7, #4
    a474:	4d3e      	ldr	r5, [pc, #248]	; (a570 <usbdc_cb_ctl_req+0x28c>)
    a476:	e008      	b.n	a48a <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    a478:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a47a:	7803      	ldrb	r3, [r0, #0]
    a47c:	4418      	add	r0, r3
    a47e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a480:	463a      	mov	r2, r7
    a482:	9901      	ldr	r1, [sp, #4]
    a484:	47a8      	blx	r5
		if (NULL == ifc) {
    a486:	4603      	mov	r3, r0
    a488:	b378      	cbz	r0, a4ea <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    a48a:	789a      	ldrb	r2, [r3, #2]
    a48c:	42a2      	cmp	r2, r4
    a48e:	d1f3      	bne.n	a478 <usbdc_cb_ctl_req+0x194>
    a490:	78da      	ldrb	r2, [r3, #3]
    a492:	42b2      	cmp	r2, r6
    a494:	d1f0      	bne.n	a478 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    a496:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    a498:	4b33      	ldr	r3, [pc, #204]	; (a568 <usbdc_cb_ctl_req+0x284>)
    a49a:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    a49c:	b33d      	cbz	r5, a4ee <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    a49e:	2701      	movs	r7, #1
    a4a0:	686b      	ldr	r3, [r5, #4]
    a4a2:	466a      	mov	r2, sp
    a4a4:	4639      	mov	r1, r7
    a4a6:	4628      	mov	r0, r5
    a4a8:	4798      	blx	r3
    a4aa:	b120      	cbz	r0, a4b6 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    a4ac:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a4ae:	2d00      	cmp	r5, #0
    a4b0:	d1f6      	bne.n	a4a0 <usbdc_cb_ctl_req+0x1bc>
	return false;
    a4b2:	2000      	movs	r0, #0
    a4b4:	e72e      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    a4b6:	686b      	ldr	r3, [r5, #4]
    a4b8:	466a      	mov	r2, sp
    a4ba:	2100      	movs	r1, #0
    a4bc:	4628      	mov	r0, r5
    a4be:	4798      	blx	r3
    a4c0:	b9b8      	cbnz	r0, a4f2 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    a4c2:	b136      	cbz	r6, a4d2 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    a4c4:	4a28      	ldr	r2, [pc, #160]	; (a568 <usbdc_cb_ctl_req+0x284>)
    a4c6:	2301      	movs	r3, #1
    a4c8:	fa03 f404 	lsl.w	r4, r3, r4
    a4cc:	7f53      	ldrb	r3, [r2, #29]
    a4ce:	4323      	orrs	r3, r4
    a4d0:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    a4d2:	2300      	movs	r3, #0
    a4d4:	461a      	mov	r2, r3
    a4d6:	4619      	mov	r1, r3
    a4d8:	4618      	mov	r0, r3
    a4da:	4c22      	ldr	r4, [pc, #136]	; (a564 <usbdc_cb_ctl_req+0x280>)
    a4dc:	47a0      	blx	r4
			return true;
    a4de:	2001      	movs	r0, #1
    a4e0:	e718      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return false;
    a4e2:	2000      	movs	r0, #0
    a4e4:	e716      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return false;
    a4e6:	2000      	movs	r0, #0
    a4e8:	e714      	b.n	a314 <usbdc_cb_ctl_req+0x30>
			return false;
    a4ea:	2000      	movs	r0, #0
    a4ec:	e712      	b.n	a314 <usbdc_cb_ctl_req+0x30>
	return false;
    a4ee:	2000      	movs	r0, #0
    a4f0:	e710      	b.n	a314 <usbdc_cb_ctl_req+0x30>
			return false;
    a4f2:	2000      	movs	r0, #0
    a4f4:	e70e      	b.n	a314 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    a4f6:	7862      	ldrb	r2, [r4, #1]
    a4f8:	2a0a      	cmp	r2, #10
    a4fa:	f200 80ec 	bhi.w	a6d6 <usbdc_cb_ctl_req+0x3f2>
    a4fe:	e8df f012 	tbh	[pc, r2, lsl #1]
    a502:	008e      	.short	0x008e
    a504:	00ea00ea 	.word	0x00ea00ea
    a508:	00ea00ea 	.word	0x00ea00ea
    a50c:	000b00ea 	.word	0x000b00ea
    a510:	008200ea 	.word	0x008200ea
    a514:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    a518:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    a51a:	0a13      	lsrs	r3, r2, #8
    a51c:	2b02      	cmp	r3, #2
    a51e:	d02d      	beq.n	a57c <usbdc_cb_ctl_req+0x298>
    a520:	2b03      	cmp	r3, #3
    a522:	d050      	beq.n	a5c6 <usbdc_cb_ctl_req+0x2e2>
    a524:	2b01      	cmp	r3, #1
    a526:	d001      	beq.n	a52c <usbdc_cb_ctl_req+0x248>
	return false;
    a528:	2000      	movs	r0, #0
    a52a:	e6f3      	b.n	a314 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    a52c:	88e2      	ldrh	r2, [r4, #6]
    a52e:	2a12      	cmp	r2, #18
    a530:	bf28      	it	cs
    a532:	2212      	movcs	r2, #18
    a534:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    a536:	4b0c      	ldr	r3, [pc, #48]	; (a568 <usbdc_cb_ctl_req+0x284>)
    a538:	681b      	ldr	r3, [r3, #0]
    a53a:	2201      	movs	r2, #1
    a53c:	6859      	ldr	r1, [r3, #4]
    a53e:	6818      	ldr	r0, [r3, #0]
    a540:	4b0b      	ldr	r3, [pc, #44]	; (a570 <usbdc_cb_ctl_req+0x28c>)
    a542:	4798      	blx	r3
	if (!dev_desc) {
    a544:	4601      	mov	r1, r0
    a546:	2800      	cmp	r0, #0
    a548:	f000 80c7 	beq.w	a6da <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    a54c:	2300      	movs	r3, #0
    a54e:	4622      	mov	r2, r4
    a550:	4628      	mov	r0, r5
    a552:	4c04      	ldr	r4, [pc, #16]	; (a564 <usbdc_cb_ctl_req+0x280>)
    a554:	47a0      	blx	r4
    a556:	fab0 f080 	clz	r0, r0
    a55a:	0940      	lsrs	r0, r0, #5
    a55c:	e6da      	b.n	a314 <usbdc_cb_ctl_req+0x30>
    a55e:	bf00      	nop
    a560:	0000a179 	.word	0x0000a179
    a564:	0000a2c5 	.word	0x0000a2c5
    a568:	20000e24 	.word	0x20000e24
    a56c:	0000a889 	.word	0x0000a889
    a570:	0000a809 	.word	0x0000a809
    a574:	0000a12d 	.word	0x0000a12d
    a578:	000051a5 	.word	0x000051a5
	uint16_t length   = req->wLength;
    a57c:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a57e:	4b5b      	ldr	r3, [pc, #364]	; (a6ec <usbdc_cb_ctl_req+0x408>)
    a580:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    a582:	681b      	ldr	r3, [r3, #0]
    a584:	3201      	adds	r2, #1
    a586:	b2d2      	uxtb	r2, r2
    a588:	6859      	ldr	r1, [r3, #4]
    a58a:	6818      	ldr	r0, [r3, #0]
    a58c:	4b58      	ldr	r3, [pc, #352]	; (a6f0 <usbdc_cb_ctl_req+0x40c>)
    a58e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a590:	4601      	mov	r1, r0
    a592:	2800      	cmp	r0, #0
    a594:	f000 80a3 	beq.w	a6de <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    a598:	78c3      	ldrb	r3, [r0, #3]
    a59a:	7882      	ldrb	r2, [r0, #2]
    a59c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    a5a0:	b292      	uxth	r2, r2
	if (length <= total_len) {
    a5a2:	4294      	cmp	r4, r2
    a5a4:	d90d      	bls.n	a5c2 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a5a6:	3e01      	subs	r6, #1
    a5a8:	4226      	tst	r6, r4
    a5aa:	bf0c      	ite	eq
    a5ac:	2301      	moveq	r3, #1
    a5ae:	2300      	movne	r3, #0
		length = total_len;
    a5b0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    a5b2:	4622      	mov	r2, r4
    a5b4:	4628      	mov	r0, r5
    a5b6:	4c4f      	ldr	r4, [pc, #316]	; (a6f4 <usbdc_cb_ctl_req+0x410>)
    a5b8:	47a0      	blx	r4
    a5ba:	fab0 f080 	clz	r0, r0
    a5be:	0940      	lsrs	r0, r0, #5
    a5c0:	e6a8      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a5c2:	2300      	movs	r3, #0
    a5c4:	e7f5      	b.n	a5b2 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    a5c6:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a5c8:	4b48      	ldr	r3, [pc, #288]	; (a6ec <usbdc_cb_ctl_req+0x408>)
    a5ca:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    a5cc:	681b      	ldr	r3, [r3, #0]
    a5ce:	b2d2      	uxtb	r2, r2
    a5d0:	6859      	ldr	r1, [r3, #4]
    a5d2:	6818      	ldr	r0, [r3, #0]
    a5d4:	4b48      	ldr	r3, [pc, #288]	; (a6f8 <usbdc_cb_ctl_req+0x414>)
    a5d6:	4798      	blx	r3
	if (NULL == str_desc) {
    a5d8:	4601      	mov	r1, r0
    a5da:	2800      	cmp	r0, #0
    a5dc:	f000 8081 	beq.w	a6e2 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    a5e0:	7802      	ldrb	r2, [r0, #0]
    a5e2:	4294      	cmp	r4, r2
    a5e4:	d90d      	bls.n	a602 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a5e6:	3e01      	subs	r6, #1
    a5e8:	4226      	tst	r6, r4
    a5ea:	bf0c      	ite	eq
    a5ec:	2301      	moveq	r3, #1
    a5ee:	2300      	movne	r3, #0
		length = str_desc[0];
    a5f0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    a5f2:	4622      	mov	r2, r4
    a5f4:	4628      	mov	r0, r5
    a5f6:	4c3f      	ldr	r4, [pc, #252]	; (a6f4 <usbdc_cb_ctl_req+0x410>)
    a5f8:	47a0      	blx	r4
    a5fa:	fab0 f080 	clz	r0, r0
    a5fe:	0940      	lsrs	r0, r0, #5
    a600:	e688      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a602:	2300      	movs	r3, #0
    a604:	e7f5      	b.n	a5f2 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    a606:	4939      	ldr	r1, [pc, #228]	; (a6ec <usbdc_cb_ctl_req+0x408>)
    a608:	694b      	ldr	r3, [r1, #20]
    a60a:	7eca      	ldrb	r2, [r1, #27]
    a60c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    a60e:	2300      	movs	r3, #0
    a610:	2201      	movs	r2, #1
    a612:	6949      	ldr	r1, [r1, #20]
    a614:	4628      	mov	r0, r5
    a616:	4c37      	ldr	r4, [pc, #220]	; (a6f4 <usbdc_cb_ctl_req+0x410>)
    a618:	47a0      	blx	r4
		return true;
    a61a:	2001      	movs	r0, #1
    a61c:	e67a      	b.n	a314 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a61e:	f003 031f 	and.w	r3, r3, #31
    a622:	2b01      	cmp	r3, #1
    a624:	d903      	bls.n	a62e <usbdc_cb_ctl_req+0x34a>
    a626:	2b02      	cmp	r3, #2
    a628:	d010      	beq.n	a64c <usbdc_cb_ctl_req+0x368>
		return false;
    a62a:	2000      	movs	r0, #0
    a62c:	e672      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		st = 0;
    a62e:	2300      	movs	r3, #0
    a630:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    a632:	492e      	ldr	r1, [pc, #184]	; (a6ec <usbdc_cb_ctl_req+0x408>)
    a634:	694b      	ldr	r3, [r1, #20]
    a636:	f8bd 2000 	ldrh.w	r2, [sp]
    a63a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    a63c:	2300      	movs	r3, #0
    a63e:	2202      	movs	r2, #2
    a640:	6949      	ldr	r1, [r1, #20]
    a642:	4628      	mov	r0, r5
    a644:	4c2b      	ldr	r4, [pc, #172]	; (a6f4 <usbdc_cb_ctl_req+0x410>)
    a646:	47a0      	blx	r4
	return true;
    a648:	2001      	movs	r0, #1
    a64a:	e663      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    a64c:	88a0      	ldrh	r0, [r4, #4]
    a64e:	2102      	movs	r1, #2
    a650:	b2c0      	uxtb	r0, r0
    a652:	4b2a      	ldr	r3, [pc, #168]	; (a6fc <usbdc_cb_ctl_req+0x418>)
    a654:	4798      	blx	r3
		if (st < 0) {
    a656:	2800      	cmp	r0, #0
    a658:	db03      	blt.n	a662 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    a65a:	f000 0001 	and.w	r0, r0, #1
    a65e:	9000      	str	r0, [sp, #0]
    a660:	e7e7      	b.n	a632 <usbdc_cb_ctl_req+0x34e>
			return false;
    a662:	2000      	movs	r0, #0
    a664:	e656      	b.n	a314 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    a666:	4b21      	ldr	r3, [pc, #132]	; (a6ec <usbdc_cb_ctl_req+0x408>)
    a668:	7f5b      	ldrb	r3, [r3, #29]
    a66a:	88a2      	ldrh	r2, [r4, #4]
    a66c:	4113      	asrs	r3, r2
    a66e:	f013 0f01 	tst.w	r3, #1
    a672:	d012      	beq.n	a69a <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a674:	4b1d      	ldr	r3, [pc, #116]	; (a6ec <usbdc_cb_ctl_req+0x408>)
    a676:	691d      	ldr	r5, [r3, #16]
	return false;
    a678:	2000      	movs	r0, #0
	while (NULL != func) {
    a67a:	2d00      	cmp	r5, #0
    a67c:	f43f ae4a 	beq.w	a314 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    a680:	2602      	movs	r6, #2
    a682:	686b      	ldr	r3, [r5, #4]
    a684:	4622      	mov	r2, r4
    a686:	4631      	mov	r1, r6
    a688:	4628      	mov	r0, r5
    a68a:	4798      	blx	r3
    a68c:	2800      	cmp	r0, #0
    a68e:	da0f      	bge.n	a6b0 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    a690:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a692:	2d00      	cmp	r5, #0
    a694:	d1f5      	bne.n	a682 <usbdc_cb_ctl_req+0x39e>
	return false;
    a696:	2000      	movs	r0, #0
    a698:	e63c      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    a69a:	4914      	ldr	r1, [pc, #80]	; (a6ec <usbdc_cb_ctl_req+0x408>)
    a69c:	694b      	ldr	r3, [r1, #20]
    a69e:	2000      	movs	r0, #0
    a6a0:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a6a2:	4603      	mov	r3, r0
    a6a4:	2201      	movs	r2, #1
    a6a6:	6949      	ldr	r1, [r1, #20]
    a6a8:	4c12      	ldr	r4, [pc, #72]	; (a6f4 <usbdc_cb_ctl_req+0x410>)
    a6aa:	47a0      	blx	r4
		return true;
    a6ac:	2001      	movs	r0, #1
    a6ae:	e631      	b.n	a314 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    a6b0:	490e      	ldr	r1, [pc, #56]	; (a6ec <usbdc_cb_ctl_req+0x408>)
    a6b2:	694b      	ldr	r3, [r1, #20]
    a6b4:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a6b6:	2300      	movs	r3, #0
    a6b8:	2201      	movs	r2, #1
    a6ba:	6949      	ldr	r1, [r1, #20]
    a6bc:	4618      	mov	r0, r3
    a6be:	4c0d      	ldr	r4, [pc, #52]	; (a6f4 <usbdc_cb_ctl_req+0x410>)
    a6c0:	47a0      	blx	r4
			return true;
    a6c2:	2001      	movs	r0, #1
    a6c4:	e626      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return true;
    a6c6:	2001      	movs	r0, #1
    a6c8:	e624      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return false;
    a6ca:	2000      	movs	r0, #0
    a6cc:	e622      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return false;
    a6ce:	2000      	movs	r0, #0
    a6d0:	e620      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return false;
    a6d2:	2000      	movs	r0, #0
    a6d4:	e61e      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return false;
    a6d6:	2000      	movs	r0, #0
    a6d8:	e61c      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return false;
    a6da:	2000      	movs	r0, #0
    a6dc:	e61a      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return false;
    a6de:	2000      	movs	r0, #0
    a6e0:	e618      	b.n	a314 <usbdc_cb_ctl_req+0x30>
		return false;
    a6e2:	2000      	movs	r0, #0
    a6e4:	e616      	b.n	a314 <usbdc_cb_ctl_req+0x30>
			return false;
    a6e6:	2000      	movs	r0, #0
    a6e8:	e614      	b.n	a314 <usbdc_cb_ctl_req+0x30>
    a6ea:	bf00      	nop
    a6ec:	20000e24 	.word	0x20000e24
    a6f0:	0000a889 	.word	0x0000a889
    a6f4:	0000a2c5 	.word	0x0000a2c5
    a6f8:	0000a8f1 	.word	0x0000a8f1
    a6fc:	000051a5 	.word	0x000051a5

0000a700 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    a700:	b508      	push	{r3, lr}
	switch (type) {
    a702:	2801      	cmp	r0, #1
    a704:	d007      	beq.n	a716 <usbdc_register_handler+0x16>
    a706:	b110      	cbz	r0, a70e <usbdc_register_handler+0xe>
    a708:	2802      	cmp	r0, #2
    a70a:	d008      	beq.n	a71e <usbdc_register_handler+0x1e>
    a70c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    a70e:	4806      	ldr	r0, [pc, #24]	; (a728 <usbdc_register_handler+0x28>)
    a710:	4b06      	ldr	r3, [pc, #24]	; (a72c <usbdc_register_handler+0x2c>)
    a712:	4798      	blx	r3
		break;
    a714:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    a716:	4806      	ldr	r0, [pc, #24]	; (a730 <usbdc_register_handler+0x30>)
    a718:	4b04      	ldr	r3, [pc, #16]	; (a72c <usbdc_register_handler+0x2c>)
    a71a:	4798      	blx	r3
		break;
    a71c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    a71e:	4805      	ldr	r0, [pc, #20]	; (a734 <usbdc_register_handler+0x34>)
    a720:	4b02      	ldr	r3, [pc, #8]	; (a72c <usbdc_register_handler+0x2c>)
    a722:	4798      	blx	r3
    a724:	bd08      	pop	{r3, pc}
    a726:	bf00      	nop
    a728:	20000e28 	.word	0x20000e28
    a72c:	000052b5 	.word	0x000052b5
    a730:	20000e2c 	.word	0x20000e2c
    a734:	20000e30 	.word	0x20000e30

0000a738 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    a738:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    a73a:	4605      	mov	r5, r0
    a73c:	f240 3255 	movw	r2, #853	; 0x355
    a740:	490c      	ldr	r1, [pc, #48]	; (a774 <usbdc_init+0x3c>)
    a742:	3000      	adds	r0, #0
    a744:	bf18      	it	ne
    a746:	2001      	movne	r0, #1
    a748:	4b0b      	ldr	r3, [pc, #44]	; (a778 <usbdc_init+0x40>)
    a74a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    a74c:	4b0b      	ldr	r3, [pc, #44]	; (a77c <usbdc_init+0x44>)
    a74e:	4798      	blx	r3
	if (rc < 0) {
    a750:	2800      	cmp	r0, #0
    a752:	db0e      	blt.n	a772 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    a754:	4c0a      	ldr	r4, [pc, #40]	; (a780 <usbdc_init+0x48>)
    a756:	2220      	movs	r2, #32
    a758:	2100      	movs	r1, #0
    a75a:	4620      	mov	r0, r4
    a75c:	4b09      	ldr	r3, [pc, #36]	; (a784 <usbdc_init+0x4c>)
    a75e:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    a760:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    a762:	4909      	ldr	r1, [pc, #36]	; (a788 <usbdc_init+0x50>)
    a764:	2000      	movs	r0, #0
    a766:	4c09      	ldr	r4, [pc, #36]	; (a78c <usbdc_init+0x54>)
    a768:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    a76a:	4909      	ldr	r1, [pc, #36]	; (a790 <usbdc_init+0x58>)
    a76c:	2001      	movs	r0, #1
    a76e:	47a0      	blx	r4

	return 0;
    a770:	2000      	movs	r0, #0
}
    a772:	bd38      	pop	{r3, r4, r5, pc}
    a774:	0000c394 	.word	0x0000c394
    a778:	00005259 	.word	0x00005259
    a77c:	00004f0d 	.word	0x00004f0d
    a780:	20000e24 	.word	0x20000e24
    a784:	0000b2d7 	.word	0x0000b2d7
    a788:	0000a1b9 	.word	0x0000a1b9
    a78c:	00004f75 	.word	0x00004f75
    a790:	0000a2a5 	.word	0x0000a2a5

0000a794 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    a794:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    a796:	4601      	mov	r1, r0
    a798:	4801      	ldr	r0, [pc, #4]	; (a7a0 <usbdc_register_function+0xc>)
    a79a:	4b02      	ldr	r3, [pc, #8]	; (a7a4 <usbdc_register_function+0x10>)
    a79c:	4798      	blx	r3
    a79e:	bd08      	pop	{r3, pc}
    a7a0:	20000e34 	.word	0x20000e34
    a7a4:	000052b5 	.word	0x000052b5

0000a7a8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    a7a8:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    a7aa:	4b0a      	ldr	r3, [pc, #40]	; (a7d4 <usbdc_start+0x2c>)
    a7ac:	7e9b      	ldrb	r3, [r3, #26]
    a7ae:	b95b      	cbnz	r3, a7c8 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    a7b0:	b168      	cbz	r0, a7ce <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    a7b2:	4b08      	ldr	r3, [pc, #32]	; (a7d4 <usbdc_start+0x2c>)
    a7b4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    a7b6:	6802      	ldr	r2, [r0, #0]
    a7b8:	79d2      	ldrb	r2, [r2, #7]
    a7ba:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    a7bc:	2201      	movs	r2, #1
    a7be:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    a7c0:	4b05      	ldr	r3, [pc, #20]	; (a7d8 <usbdc_start+0x30>)
    a7c2:	4798      	blx	r3
	return ERR_NONE;
    a7c4:	2000      	movs	r0, #0
    a7c6:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    a7c8:	f06f 0003 	mvn.w	r0, #3
    a7cc:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    a7ce:	f06f 0008 	mvn.w	r0, #8
}
    a7d2:	bd08      	pop	{r3, pc}
    a7d4:	20000e24 	.word	0x20000e24
    a7d8:	00004f81 	.word	0x00004f81

0000a7dc <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    a7dc:	b508      	push	{r3, lr}
	usb_d_attach();
    a7de:	4b01      	ldr	r3, [pc, #4]	; (a7e4 <usbdc_attach+0x8>)
    a7e0:	4798      	blx	r3
    a7e2:	bd08      	pop	{r3, pc}
    a7e4:	00004f8d 	.word	0x00004f8d

0000a7e8 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    a7e8:	4b01      	ldr	r3, [pc, #4]	; (a7f0 <usbdc_get_ctrl_buffer+0x8>)
    a7ea:	6958      	ldr	r0, [r3, #20]
    a7ec:	4770      	bx	lr
    a7ee:	bf00      	nop
    a7f0:	20000e24 	.word	0x20000e24

0000a7f4 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    a7f4:	4b03      	ldr	r3, [pc, #12]	; (a804 <usbdc_get_state+0x10>)
    a7f6:	7e98      	ldrb	r0, [r3, #26]
    a7f8:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    a7fc:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    a7fe:	bf18      	it	ne
    a800:	2010      	movne	r0, #16
    a802:	4770      	bx	lr
    a804:	20000e24 	.word	0x20000e24

0000a808 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    a808:	4288      	cmp	r0, r1
    a80a:	d214      	bcs.n	a836 <usb_find_desc+0x2e>
	return desc[0];
    a80c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a80e:	2b01      	cmp	r3, #1
    a810:	d913      	bls.n	a83a <usb_find_desc+0x32>
{
    a812:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    a814:	7844      	ldrb	r4, [r0, #1]
    a816:	4294      	cmp	r4, r2
    a818:	d00a      	beq.n	a830 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    a81a:	4418      	add	r0, r3
	while (desc < eof) {
    a81c:	4281      	cmp	r1, r0
    a81e:	d906      	bls.n	a82e <usb_find_desc+0x26>
	return desc[0];
    a820:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a822:	2b01      	cmp	r3, #1
    a824:	d90b      	bls.n	a83e <usb_find_desc+0x36>
	return desc[1];
    a826:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    a828:	4294      	cmp	r4, r2
    a82a:	d1f6      	bne.n	a81a <usb_find_desc+0x12>
    a82c:	e000      	b.n	a830 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    a82e:	2000      	movs	r0, #0
}
    a830:	f85d 4b04 	ldr.w	r4, [sp], #4
    a834:	4770      	bx	lr
	return NULL;
    a836:	2000      	movs	r0, #0
    a838:	4770      	bx	lr
		_desc_len_check();
    a83a:	2000      	movs	r0, #0
    a83c:	4770      	bx	lr
    a83e:	2000      	movs	r0, #0
    a840:	e7f6      	b.n	a830 <usb_find_desc+0x28>

0000a842 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    a842:	4288      	cmp	r0, r1
    a844:	d216      	bcs.n	a874 <usb_find_ep_desc+0x32>
	return desc[0];
    a846:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a848:	2b01      	cmp	r3, #1
    a84a:	d915      	bls.n	a878 <usb_find_ep_desc+0x36>
	return desc[1];
    a84c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    a84e:	2a04      	cmp	r2, #4
    a850:	d014      	beq.n	a87c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    a852:	2a05      	cmp	r2, #5
    a854:	d00b      	beq.n	a86e <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    a856:	4418      	add	r0, r3
	while (desc < eof) {
    a858:	4281      	cmp	r1, r0
    a85a:	d909      	bls.n	a870 <usb_find_ep_desc+0x2e>
	return desc[0];
    a85c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a85e:	2b01      	cmp	r3, #1
    a860:	d90e      	bls.n	a880 <usb_find_ep_desc+0x3e>
	return desc[1];
    a862:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    a864:	2a04      	cmp	r2, #4
    a866:	d00d      	beq.n	a884 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    a868:	2a05      	cmp	r2, #5
    a86a:	d1f4      	bne.n	a856 <usb_find_ep_desc+0x14>
    a86c:	e00b      	b.n	a886 <usb_find_ep_desc+0x44>
    a86e:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    a870:	2000      	movs	r0, #0
    a872:	4770      	bx	lr
    a874:	2000      	movs	r0, #0
    a876:	4770      	bx	lr
		_desc_len_check();
    a878:	2000      	movs	r0, #0
    a87a:	4770      	bx	lr
	return NULL;
    a87c:	2000      	movs	r0, #0
    a87e:	4770      	bx	lr
		_desc_len_check();
    a880:	2000      	movs	r0, #0
    a882:	4770      	bx	lr
	return NULL;
    a884:	2000      	movs	r0, #0
}
    a886:	4770      	bx	lr

0000a888 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    a888:	b538      	push	{r3, r4, r5, lr}
    a88a:	460c      	mov	r4, r1
    a88c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    a88e:	2202      	movs	r2, #2
    a890:	4b16      	ldr	r3, [pc, #88]	; (a8ec <usb_find_cfg_desc+0x64>)
    a892:	4798      	blx	r3
	if (!desc) {
    a894:	4603      	mov	r3, r0
    a896:	b1e8      	cbz	r0, a8d4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    a898:	4284      	cmp	r4, r0
    a89a:	d91d      	bls.n	a8d8 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    a89c:	7802      	ldrb	r2, [r0, #0]
    a89e:	2a01      	cmp	r2, #1
    a8a0:	d91c      	bls.n	a8dc <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    a8a2:	7842      	ldrb	r2, [r0, #1]
    a8a4:	2a02      	cmp	r2, #2
    a8a6:	d11b      	bne.n	a8e0 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    a8a8:	7942      	ldrb	r2, [r0, #5]
    a8aa:	42aa      	cmp	r2, r5
    a8ac:	d012      	beq.n	a8d4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    a8ae:	78d9      	ldrb	r1, [r3, #3]
    a8b0:	789a      	ldrb	r2, [r3, #2]
    a8b2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    a8b6:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    a8ba:	429c      	cmp	r4, r3
    a8bc:	d909      	bls.n	a8d2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    a8be:	781a      	ldrb	r2, [r3, #0]
    a8c0:	2a01      	cmp	r2, #1
    a8c2:	d90f      	bls.n	a8e4 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    a8c4:	785a      	ldrb	r2, [r3, #1]
    a8c6:	2a02      	cmp	r2, #2
    a8c8:	d10e      	bne.n	a8e8 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    a8ca:	795a      	ldrb	r2, [r3, #5]
    a8cc:	42aa      	cmp	r2, r5
    a8ce:	d1ee      	bne.n	a8ae <usb_find_cfg_desc+0x26>
    a8d0:	e000      	b.n	a8d4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    a8d2:	2300      	movs	r3, #0
}
    a8d4:	4618      	mov	r0, r3
    a8d6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    a8d8:	2300      	movs	r3, #0
    a8da:	e7fb      	b.n	a8d4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    a8dc:	2300      	movs	r3, #0
    a8de:	e7f9      	b.n	a8d4 <usb_find_cfg_desc+0x4c>
	return NULL;
    a8e0:	2300      	movs	r3, #0
    a8e2:	e7f7      	b.n	a8d4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    a8e4:	2300      	movs	r3, #0
    a8e6:	e7f5      	b.n	a8d4 <usb_find_cfg_desc+0x4c>
	return NULL;
    a8e8:	2300      	movs	r3, #0
    a8ea:	e7f3      	b.n	a8d4 <usb_find_cfg_desc+0x4c>
    a8ec:	0000a809 	.word	0x0000a809

0000a8f0 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    a8f0:	4288      	cmp	r0, r1
    a8f2:	d217      	bcs.n	a924 <usb_find_str_desc+0x34>
{
    a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8f8:	460d      	mov	r5, r1
    a8fa:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    a8fc:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    a8fe:	f04f 0803 	mov.w	r8, #3
    a902:	4f0c      	ldr	r7, [pc, #48]	; (a934 <usb_find_str_desc+0x44>)
    a904:	4642      	mov	r2, r8
    a906:	4629      	mov	r1, r5
    a908:	47b8      	blx	r7
		if (desc) {
    a90a:	4603      	mov	r3, r0
    a90c:	b170      	cbz	r0, a92c <usb_find_str_desc+0x3c>
	return desc[0];
    a90e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    a910:	2801      	cmp	r0, #1
    a912:	d90a      	bls.n	a92a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    a914:	42a6      	cmp	r6, r4
    a916:	d009      	beq.n	a92c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    a918:	4418      	add	r0, r3
    a91a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    a91c:	4285      	cmp	r5, r0
    a91e:	d8f1      	bhi.n	a904 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    a920:	2300      	movs	r3, #0
    a922:	e003      	b.n	a92c <usb_find_str_desc+0x3c>
    a924:	2300      	movs	r3, #0
}
    a926:	4618      	mov	r0, r3
    a928:	4770      	bx	lr
			_desc_len_check();
    a92a:	2300      	movs	r3, #0
}
    a92c:	4618      	mov	r0, r3
    a92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a932:	bf00      	nop
    a934:	0000a809 	.word	0x0000a809

0000a938 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    a938:	4b3a      	ldr	r3, [pc, #232]	; (aa24 <hiddf_demo_sof_event+0xec>)
    a93a:	791b      	ldrb	r3, [r3, #4]
    a93c:	2b0a      	cmp	r3, #10
    a93e:	d803      	bhi.n	a948 <hiddf_demo_sof_event+0x10>
    a940:	3301      	adds	r3, #1
    a942:	4a38      	ldr	r2, [pc, #224]	; (aa24 <hiddf_demo_sof_event+0xec>)
    a944:	7113      	strb	r3, [r2, #4]
    a946:	4770      	bx	lr
{
    a948:	b570      	push	{r4, r5, r6, lr}
    a94a:	b084      	sub	sp, #16
		interval = 0;
    a94c:	4b35      	ldr	r3, [pc, #212]	; (aa24 <hiddf_demo_sof_event+0xec>)
    a94e:	2200      	movs	r2, #0
    a950:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    a952:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    a954:	a801      	add	r0, sp, #4
    a956:	4b34      	ldr	r3, [pc, #208]	; (aa28 <hiddf_demo_sof_event+0xf0>)
    a958:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    a95a:	096b      	lsrs	r3, r5, #5
    a95c:	4933      	ldr	r1, [pc, #204]	; (aa2c <hiddf_demo_sof_event+0xf4>)
    a95e:	01db      	lsls	r3, r3, #7
    a960:	18ca      	adds	r2, r1, r3
    a962:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    a964:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    a966:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    a968:	405c      	eors	r4, r3
    a96a:	400c      	ands	r4, r1
    a96c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    a96e:	a801      	add	r0, sp, #4
    a970:	4b2f      	ldr	r3, [pc, #188]	; (aa30 <hiddf_demo_sof_event+0xf8>)
    a972:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    a974:	f005 051f 	and.w	r5, r5, #31
    a978:	2301      	movs	r3, #1
    a97a:	fa03 f505 	lsl.w	r5, r3, r5
    a97e:	4225      	tst	r5, r4
    a980:	d040      	beq.n	aa04 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    a982:	4b28      	ldr	r3, [pc, #160]	; (aa24 <hiddf_demo_sof_event+0xec>)
    a984:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    a986:	a802      	add	r0, sp, #8
    a988:	4b27      	ldr	r3, [pc, #156]	; (aa28 <hiddf_demo_sof_event+0xf0>)
    a98a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    a98c:	096b      	lsrs	r3, r5, #5
    a98e:	4927      	ldr	r1, [pc, #156]	; (aa2c <hiddf_demo_sof_event+0xf4>)
    a990:	01db      	lsls	r3, r3, #7
    a992:	18ca      	adds	r2, r1, r3
    a994:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    a996:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    a998:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    a99a:	405c      	eors	r4, r3
    a99c:	400c      	ands	r4, r1
    a99e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    a9a0:	a802      	add	r0, sp, #8
    a9a2:	4b23      	ldr	r3, [pc, #140]	; (aa30 <hiddf_demo_sof_event+0xf8>)
    a9a4:	4798      	blx	r3
    a9a6:	f005 051f 	and.w	r5, r5, #31
    a9aa:	2301      	movs	r3, #1
    a9ac:	fa03 f505 	lsl.w	r5, r3, r5
    a9b0:	4225      	tst	r5, r4
    a9b2:	d02d      	beq.n	aa10 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    a9b4:	4d1b      	ldr	r5, [pc, #108]	; (aa24 <hiddf_demo_sof_event+0xec>)
    a9b6:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    a9b8:	a803      	add	r0, sp, #12
    a9ba:	4b1b      	ldr	r3, [pc, #108]	; (aa28 <hiddf_demo_sof_event+0xf0>)
    a9bc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    a9be:	0973      	lsrs	r3, r6, #5
    a9c0:	491a      	ldr	r1, [pc, #104]	; (aa2c <hiddf_demo_sof_event+0xf4>)
    a9c2:	01db      	lsls	r3, r3, #7
    a9c4:	18ca      	adds	r2, r1, r3
    a9c6:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    a9c8:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    a9ca:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    a9cc:	405c      	eors	r4, r3
    a9ce:	400c      	ands	r4, r1
    a9d0:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    a9d2:	a803      	add	r0, sp, #12
    a9d4:	4b16      	ldr	r3, [pc, #88]	; (aa30 <hiddf_demo_sof_event+0xf8>)
    a9d6:	4798      	blx	r3
    a9d8:	f006 061f 	and.w	r6, r6, #31
    a9dc:	2301      	movs	r3, #1
    a9de:	40b3      	lsls	r3, r6
    a9e0:	401c      	ands	r4, r3
    a9e2:	bf0c      	ite	eq
    a9e4:	2301      	moveq	r3, #1
    a9e6:	2300      	movne	r3, #0
    a9e8:	7d2a      	ldrb	r2, [r5, #20]
    a9ea:	429a      	cmp	r2, r3
    a9ec:	d008      	beq.n	aa00 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    a9ee:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    a9f0:	b19c      	cbz	r4, aa1a <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    a9f2:	2200      	movs	r2, #0
    a9f4:	4b0f      	ldr	r3, [pc, #60]	; (aa34 <hiddf_demo_sof_event+0xfc>)
    a9f6:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    a9f8:	2101      	movs	r1, #1
    a9fa:	480e      	ldr	r0, [pc, #56]	; (aa34 <hiddf_demo_sof_event+0xfc>)
    a9fc:	4b0e      	ldr	r3, [pc, #56]	; (aa38 <hiddf_demo_sof_event+0x100>)
    a9fe:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    aa00:	b004      	add	sp, #16
    aa02:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    aa04:	4619      	mov	r1, r3
    aa06:	f06f 0004 	mvn.w	r0, #4
    aa0a:	4b0c      	ldr	r3, [pc, #48]	; (aa3c <hiddf_demo_sof_event+0x104>)
    aa0c:	4798      	blx	r3
    aa0e:	e7b8      	b.n	a982 <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    aa10:	4619      	mov	r1, r3
    aa12:	2005      	movs	r0, #5
    aa14:	4b09      	ldr	r3, [pc, #36]	; (aa3c <hiddf_demo_sof_event+0x104>)
    aa16:	4798      	blx	r3
    aa18:	e7cc      	b.n	a9b4 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    aa1a:	2201      	movs	r2, #1
    aa1c:	4b05      	ldr	r3, [pc, #20]	; (aa34 <hiddf_demo_sof_event+0xfc>)
    aa1e:	709a      	strb	r2, [r3, #2]
    aa20:	e7ea      	b.n	a9f8 <hiddf_demo_sof_event+0xc0>
    aa22:	bf00      	nop
    aa24:	20000e44 	.word	0x20000e44
    aa28:	00004075 	.word	0x00004075
    aa2c:	41008000 	.word	0x41008000
    aa30:	00004083 	.word	0x00004083
    aa34:	200003b8 	.word	0x200003b8
    aa38:	00009b85 	.word	0x00009b85
    aa3c:	00009e19 	.word	0x00009e19

0000aa40 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    aa40:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    aa42:	4805      	ldr	r0, [pc, #20]	; (aa58 <composite_device_init+0x18>)
    aa44:	4b05      	ldr	r3, [pc, #20]	; (aa5c <composite_device_init+0x1c>)
    aa46:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    aa48:	4b05      	ldr	r3, [pc, #20]	; (aa60 <composite_device_init+0x20>)
    aa4a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    aa4c:	4b05      	ldr	r3, [pc, #20]	; (aa64 <composite_device_init+0x24>)
    aa4e:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    aa50:	4b05      	ldr	r3, [pc, #20]	; (aa68 <composite_device_init+0x28>)
    aa52:	4798      	blx	r3
    aa54:	bd08      	pop	{r3, pc}
    aa56:	bf00      	nop
    aa58:	20000e5c 	.word	0x20000e5c
    aa5c:	0000a739 	.word	0x0000a739
    aa60:	00009901 	.word	0x00009901
    aa64:	00009dd5 	.word	0x00009dd5
    aa68:	00009b41 	.word	0x00009b41

0000aa6c <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    aa6c:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    aa6e:	4803      	ldr	r0, [pc, #12]	; (aa7c <composite_device_start+0x10>)
    aa70:	4b03      	ldr	r3, [pc, #12]	; (aa80 <composite_device_start+0x14>)
    aa72:	4798      	blx	r3
	usbdc_attach();
    aa74:	4b03      	ldr	r3, [pc, #12]	; (aa84 <composite_device_start+0x18>)
    aa76:	4798      	blx	r3
    aa78:	bd08      	pop	{r3, pc}
    aa7a:	bf00      	nop
    aa7c:	200003c4 	.word	0x200003c4
    aa80:	0000a7a9 	.word	0x0000a7a9
    aa84:	0000a7dd 	.word	0x0000a7dd

0000aa88 <usb_init>:
		}
	}
}

void usb_init(void)
{
    aa88:	b508      	push	{r3, lr}

	composite_device_init();
    aa8a:	4b01      	ldr	r3, [pc, #4]	; (aa90 <usb_init+0x8>)
    aa8c:	4798      	blx	r3
    aa8e:	bd08      	pop	{r3, pc}
    aa90:	0000aa41 	.word	0x0000aa41

0000aa94 <__aeabi_drsub>:
    aa94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    aa98:	e002      	b.n	aaa0 <__adddf3>
    aa9a:	bf00      	nop

0000aa9c <__aeabi_dsub>:
    aa9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000aaa0 <__adddf3>:
    aaa0:	b530      	push	{r4, r5, lr}
    aaa2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    aaa6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    aaaa:	ea94 0f05 	teq	r4, r5
    aaae:	bf08      	it	eq
    aab0:	ea90 0f02 	teqeq	r0, r2
    aab4:	bf1f      	itttt	ne
    aab6:	ea54 0c00 	orrsne.w	ip, r4, r0
    aaba:	ea55 0c02 	orrsne.w	ip, r5, r2
    aabe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    aac2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    aac6:	f000 80e2 	beq.w	ac8e <__adddf3+0x1ee>
    aaca:	ea4f 5454 	mov.w	r4, r4, lsr #21
    aace:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    aad2:	bfb8      	it	lt
    aad4:	426d      	neglt	r5, r5
    aad6:	dd0c      	ble.n	aaf2 <__adddf3+0x52>
    aad8:	442c      	add	r4, r5
    aada:	ea80 0202 	eor.w	r2, r0, r2
    aade:	ea81 0303 	eor.w	r3, r1, r3
    aae2:	ea82 0000 	eor.w	r0, r2, r0
    aae6:	ea83 0101 	eor.w	r1, r3, r1
    aaea:	ea80 0202 	eor.w	r2, r0, r2
    aaee:	ea81 0303 	eor.w	r3, r1, r3
    aaf2:	2d36      	cmp	r5, #54	; 0x36
    aaf4:	bf88      	it	hi
    aaf6:	bd30      	pophi	{r4, r5, pc}
    aaf8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    aafc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    ab00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    ab04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    ab08:	d002      	beq.n	ab10 <__adddf3+0x70>
    ab0a:	4240      	negs	r0, r0
    ab0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ab10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    ab14:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ab18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    ab1c:	d002      	beq.n	ab24 <__adddf3+0x84>
    ab1e:	4252      	negs	r2, r2
    ab20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ab24:	ea94 0f05 	teq	r4, r5
    ab28:	f000 80a7 	beq.w	ac7a <__adddf3+0x1da>
    ab2c:	f1a4 0401 	sub.w	r4, r4, #1
    ab30:	f1d5 0e20 	rsbs	lr, r5, #32
    ab34:	db0d      	blt.n	ab52 <__adddf3+0xb2>
    ab36:	fa02 fc0e 	lsl.w	ip, r2, lr
    ab3a:	fa22 f205 	lsr.w	r2, r2, r5
    ab3e:	1880      	adds	r0, r0, r2
    ab40:	f141 0100 	adc.w	r1, r1, #0
    ab44:	fa03 f20e 	lsl.w	r2, r3, lr
    ab48:	1880      	adds	r0, r0, r2
    ab4a:	fa43 f305 	asr.w	r3, r3, r5
    ab4e:	4159      	adcs	r1, r3
    ab50:	e00e      	b.n	ab70 <__adddf3+0xd0>
    ab52:	f1a5 0520 	sub.w	r5, r5, #32
    ab56:	f10e 0e20 	add.w	lr, lr, #32
    ab5a:	2a01      	cmp	r2, #1
    ab5c:	fa03 fc0e 	lsl.w	ip, r3, lr
    ab60:	bf28      	it	cs
    ab62:	f04c 0c02 	orrcs.w	ip, ip, #2
    ab66:	fa43 f305 	asr.w	r3, r3, r5
    ab6a:	18c0      	adds	r0, r0, r3
    ab6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    ab70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ab74:	d507      	bpl.n	ab86 <__adddf3+0xe6>
    ab76:	f04f 0e00 	mov.w	lr, #0
    ab7a:	f1dc 0c00 	rsbs	ip, ip, #0
    ab7e:	eb7e 0000 	sbcs.w	r0, lr, r0
    ab82:	eb6e 0101 	sbc.w	r1, lr, r1
    ab86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    ab8a:	d31b      	bcc.n	abc4 <__adddf3+0x124>
    ab8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    ab90:	d30c      	bcc.n	abac <__adddf3+0x10c>
    ab92:	0849      	lsrs	r1, r1, #1
    ab94:	ea5f 0030 	movs.w	r0, r0, rrx
    ab98:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ab9c:	f104 0401 	add.w	r4, r4, #1
    aba0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    aba4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    aba8:	f080 809a 	bcs.w	ace0 <__adddf3+0x240>
    abac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    abb0:	bf08      	it	eq
    abb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    abb6:	f150 0000 	adcs.w	r0, r0, #0
    abba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    abbe:	ea41 0105 	orr.w	r1, r1, r5
    abc2:	bd30      	pop	{r4, r5, pc}
    abc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    abc8:	4140      	adcs	r0, r0
    abca:	eb41 0101 	adc.w	r1, r1, r1
    abce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    abd2:	f1a4 0401 	sub.w	r4, r4, #1
    abd6:	d1e9      	bne.n	abac <__adddf3+0x10c>
    abd8:	f091 0f00 	teq	r1, #0
    abdc:	bf04      	itt	eq
    abde:	4601      	moveq	r1, r0
    abe0:	2000      	moveq	r0, #0
    abe2:	fab1 f381 	clz	r3, r1
    abe6:	bf08      	it	eq
    abe8:	3320      	addeq	r3, #32
    abea:	f1a3 030b 	sub.w	r3, r3, #11
    abee:	f1b3 0220 	subs.w	r2, r3, #32
    abf2:	da0c      	bge.n	ac0e <__adddf3+0x16e>
    abf4:	320c      	adds	r2, #12
    abf6:	dd08      	ble.n	ac0a <__adddf3+0x16a>
    abf8:	f102 0c14 	add.w	ip, r2, #20
    abfc:	f1c2 020c 	rsb	r2, r2, #12
    ac00:	fa01 f00c 	lsl.w	r0, r1, ip
    ac04:	fa21 f102 	lsr.w	r1, r1, r2
    ac08:	e00c      	b.n	ac24 <__adddf3+0x184>
    ac0a:	f102 0214 	add.w	r2, r2, #20
    ac0e:	bfd8      	it	le
    ac10:	f1c2 0c20 	rsble	ip, r2, #32
    ac14:	fa01 f102 	lsl.w	r1, r1, r2
    ac18:	fa20 fc0c 	lsr.w	ip, r0, ip
    ac1c:	bfdc      	itt	le
    ac1e:	ea41 010c 	orrle.w	r1, r1, ip
    ac22:	4090      	lslle	r0, r2
    ac24:	1ae4      	subs	r4, r4, r3
    ac26:	bfa2      	ittt	ge
    ac28:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    ac2c:	4329      	orrge	r1, r5
    ac2e:	bd30      	popge	{r4, r5, pc}
    ac30:	ea6f 0404 	mvn.w	r4, r4
    ac34:	3c1f      	subs	r4, #31
    ac36:	da1c      	bge.n	ac72 <__adddf3+0x1d2>
    ac38:	340c      	adds	r4, #12
    ac3a:	dc0e      	bgt.n	ac5a <__adddf3+0x1ba>
    ac3c:	f104 0414 	add.w	r4, r4, #20
    ac40:	f1c4 0220 	rsb	r2, r4, #32
    ac44:	fa20 f004 	lsr.w	r0, r0, r4
    ac48:	fa01 f302 	lsl.w	r3, r1, r2
    ac4c:	ea40 0003 	orr.w	r0, r0, r3
    ac50:	fa21 f304 	lsr.w	r3, r1, r4
    ac54:	ea45 0103 	orr.w	r1, r5, r3
    ac58:	bd30      	pop	{r4, r5, pc}
    ac5a:	f1c4 040c 	rsb	r4, r4, #12
    ac5e:	f1c4 0220 	rsb	r2, r4, #32
    ac62:	fa20 f002 	lsr.w	r0, r0, r2
    ac66:	fa01 f304 	lsl.w	r3, r1, r4
    ac6a:	ea40 0003 	orr.w	r0, r0, r3
    ac6e:	4629      	mov	r1, r5
    ac70:	bd30      	pop	{r4, r5, pc}
    ac72:	fa21 f004 	lsr.w	r0, r1, r4
    ac76:	4629      	mov	r1, r5
    ac78:	bd30      	pop	{r4, r5, pc}
    ac7a:	f094 0f00 	teq	r4, #0
    ac7e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    ac82:	bf06      	itte	eq
    ac84:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    ac88:	3401      	addeq	r4, #1
    ac8a:	3d01      	subne	r5, #1
    ac8c:	e74e      	b.n	ab2c <__adddf3+0x8c>
    ac8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ac92:	bf18      	it	ne
    ac94:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ac98:	d029      	beq.n	acee <__adddf3+0x24e>
    ac9a:	ea94 0f05 	teq	r4, r5
    ac9e:	bf08      	it	eq
    aca0:	ea90 0f02 	teqeq	r0, r2
    aca4:	d005      	beq.n	acb2 <__adddf3+0x212>
    aca6:	ea54 0c00 	orrs.w	ip, r4, r0
    acaa:	bf04      	itt	eq
    acac:	4619      	moveq	r1, r3
    acae:	4610      	moveq	r0, r2
    acb0:	bd30      	pop	{r4, r5, pc}
    acb2:	ea91 0f03 	teq	r1, r3
    acb6:	bf1e      	ittt	ne
    acb8:	2100      	movne	r1, #0
    acba:	2000      	movne	r0, #0
    acbc:	bd30      	popne	{r4, r5, pc}
    acbe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    acc2:	d105      	bne.n	acd0 <__adddf3+0x230>
    acc4:	0040      	lsls	r0, r0, #1
    acc6:	4149      	adcs	r1, r1
    acc8:	bf28      	it	cs
    acca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    acce:	bd30      	pop	{r4, r5, pc}
    acd0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    acd4:	bf3c      	itt	cc
    acd6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    acda:	bd30      	popcc	{r4, r5, pc}
    acdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ace0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    ace4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ace8:	f04f 0000 	mov.w	r0, #0
    acec:	bd30      	pop	{r4, r5, pc}
    acee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    acf2:	bf1a      	itte	ne
    acf4:	4619      	movne	r1, r3
    acf6:	4610      	movne	r0, r2
    acf8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    acfc:	bf1c      	itt	ne
    acfe:	460b      	movne	r3, r1
    ad00:	4602      	movne	r2, r0
    ad02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ad06:	bf06      	itte	eq
    ad08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    ad0c:	ea91 0f03 	teqeq	r1, r3
    ad10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    ad14:	bd30      	pop	{r4, r5, pc}
    ad16:	bf00      	nop

0000ad18 <__aeabi_ui2d>:
    ad18:	f090 0f00 	teq	r0, #0
    ad1c:	bf04      	itt	eq
    ad1e:	2100      	moveq	r1, #0
    ad20:	4770      	bxeq	lr
    ad22:	b530      	push	{r4, r5, lr}
    ad24:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ad28:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ad2c:	f04f 0500 	mov.w	r5, #0
    ad30:	f04f 0100 	mov.w	r1, #0
    ad34:	e750      	b.n	abd8 <__adddf3+0x138>
    ad36:	bf00      	nop

0000ad38 <__aeabi_i2d>:
    ad38:	f090 0f00 	teq	r0, #0
    ad3c:	bf04      	itt	eq
    ad3e:	2100      	moveq	r1, #0
    ad40:	4770      	bxeq	lr
    ad42:	b530      	push	{r4, r5, lr}
    ad44:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ad48:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ad4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    ad50:	bf48      	it	mi
    ad52:	4240      	negmi	r0, r0
    ad54:	f04f 0100 	mov.w	r1, #0
    ad58:	e73e      	b.n	abd8 <__adddf3+0x138>
    ad5a:	bf00      	nop

0000ad5c <__aeabi_f2d>:
    ad5c:	0042      	lsls	r2, r0, #1
    ad5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    ad62:	ea4f 0131 	mov.w	r1, r1, rrx
    ad66:	ea4f 7002 	mov.w	r0, r2, lsl #28
    ad6a:	bf1f      	itttt	ne
    ad6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    ad70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    ad74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    ad78:	4770      	bxne	lr
    ad7a:	f092 0f00 	teq	r2, #0
    ad7e:	bf14      	ite	ne
    ad80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    ad84:	4770      	bxeq	lr
    ad86:	b530      	push	{r4, r5, lr}
    ad88:	f44f 7460 	mov.w	r4, #896	; 0x380
    ad8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ad90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ad94:	e720      	b.n	abd8 <__adddf3+0x138>
    ad96:	bf00      	nop

0000ad98 <__aeabi_ul2d>:
    ad98:	ea50 0201 	orrs.w	r2, r0, r1
    ad9c:	bf08      	it	eq
    ad9e:	4770      	bxeq	lr
    ada0:	b530      	push	{r4, r5, lr}
    ada2:	f04f 0500 	mov.w	r5, #0
    ada6:	e00a      	b.n	adbe <__aeabi_l2d+0x16>

0000ada8 <__aeabi_l2d>:
    ada8:	ea50 0201 	orrs.w	r2, r0, r1
    adac:	bf08      	it	eq
    adae:	4770      	bxeq	lr
    adb0:	b530      	push	{r4, r5, lr}
    adb2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    adb6:	d502      	bpl.n	adbe <__aeabi_l2d+0x16>
    adb8:	4240      	negs	r0, r0
    adba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    adbe:	f44f 6480 	mov.w	r4, #1024	; 0x400
    adc2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    adc6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    adca:	f43f aedc 	beq.w	ab86 <__adddf3+0xe6>
    adce:	f04f 0203 	mov.w	r2, #3
    add2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    add6:	bf18      	it	ne
    add8:	3203      	addne	r2, #3
    adda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    adde:	bf18      	it	ne
    ade0:	3203      	addne	r2, #3
    ade2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    ade6:	f1c2 0320 	rsb	r3, r2, #32
    adea:	fa00 fc03 	lsl.w	ip, r0, r3
    adee:	fa20 f002 	lsr.w	r0, r0, r2
    adf2:	fa01 fe03 	lsl.w	lr, r1, r3
    adf6:	ea40 000e 	orr.w	r0, r0, lr
    adfa:	fa21 f102 	lsr.w	r1, r1, r2
    adfe:	4414      	add	r4, r2
    ae00:	e6c1      	b.n	ab86 <__adddf3+0xe6>
    ae02:	bf00      	nop

0000ae04 <__aeabi_dmul>:
    ae04:	b570      	push	{r4, r5, r6, lr}
    ae06:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ae0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    ae0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ae12:	bf1d      	ittte	ne
    ae14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ae18:	ea94 0f0c 	teqne	r4, ip
    ae1c:	ea95 0f0c 	teqne	r5, ip
    ae20:	f000 f8de 	bleq	afe0 <__aeabi_dmul+0x1dc>
    ae24:	442c      	add	r4, r5
    ae26:	ea81 0603 	eor.w	r6, r1, r3
    ae2a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    ae2e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    ae32:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    ae36:	bf18      	it	ne
    ae38:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    ae3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ae40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ae44:	d038      	beq.n	aeb8 <__aeabi_dmul+0xb4>
    ae46:	fba0 ce02 	umull	ip, lr, r0, r2
    ae4a:	f04f 0500 	mov.w	r5, #0
    ae4e:	fbe1 e502 	umlal	lr, r5, r1, r2
    ae52:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    ae56:	fbe0 e503 	umlal	lr, r5, r0, r3
    ae5a:	f04f 0600 	mov.w	r6, #0
    ae5e:	fbe1 5603 	umlal	r5, r6, r1, r3
    ae62:	f09c 0f00 	teq	ip, #0
    ae66:	bf18      	it	ne
    ae68:	f04e 0e01 	orrne.w	lr, lr, #1
    ae6c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    ae70:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    ae74:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    ae78:	d204      	bcs.n	ae84 <__aeabi_dmul+0x80>
    ae7a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    ae7e:	416d      	adcs	r5, r5
    ae80:	eb46 0606 	adc.w	r6, r6, r6
    ae84:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    ae88:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    ae8c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    ae90:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    ae94:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    ae98:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ae9c:	bf88      	it	hi
    ae9e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    aea2:	d81e      	bhi.n	aee2 <__aeabi_dmul+0xde>
    aea4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    aea8:	bf08      	it	eq
    aeaa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    aeae:	f150 0000 	adcs.w	r0, r0, #0
    aeb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    aeb6:	bd70      	pop	{r4, r5, r6, pc}
    aeb8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    aebc:	ea46 0101 	orr.w	r1, r6, r1
    aec0:	ea40 0002 	orr.w	r0, r0, r2
    aec4:	ea81 0103 	eor.w	r1, r1, r3
    aec8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    aecc:	bfc2      	ittt	gt
    aece:	ebd4 050c 	rsbsgt	r5, r4, ip
    aed2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    aed6:	bd70      	popgt	{r4, r5, r6, pc}
    aed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    aedc:	f04f 0e00 	mov.w	lr, #0
    aee0:	3c01      	subs	r4, #1
    aee2:	f300 80ab 	bgt.w	b03c <__aeabi_dmul+0x238>
    aee6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    aeea:	bfde      	ittt	le
    aeec:	2000      	movle	r0, #0
    aeee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    aef2:	bd70      	pople	{r4, r5, r6, pc}
    aef4:	f1c4 0400 	rsb	r4, r4, #0
    aef8:	3c20      	subs	r4, #32
    aefa:	da35      	bge.n	af68 <__aeabi_dmul+0x164>
    aefc:	340c      	adds	r4, #12
    aefe:	dc1b      	bgt.n	af38 <__aeabi_dmul+0x134>
    af00:	f104 0414 	add.w	r4, r4, #20
    af04:	f1c4 0520 	rsb	r5, r4, #32
    af08:	fa00 f305 	lsl.w	r3, r0, r5
    af0c:	fa20 f004 	lsr.w	r0, r0, r4
    af10:	fa01 f205 	lsl.w	r2, r1, r5
    af14:	ea40 0002 	orr.w	r0, r0, r2
    af18:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    af1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    af20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    af24:	fa21 f604 	lsr.w	r6, r1, r4
    af28:	eb42 0106 	adc.w	r1, r2, r6
    af2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    af30:	bf08      	it	eq
    af32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    af36:	bd70      	pop	{r4, r5, r6, pc}
    af38:	f1c4 040c 	rsb	r4, r4, #12
    af3c:	f1c4 0520 	rsb	r5, r4, #32
    af40:	fa00 f304 	lsl.w	r3, r0, r4
    af44:	fa20 f005 	lsr.w	r0, r0, r5
    af48:	fa01 f204 	lsl.w	r2, r1, r4
    af4c:	ea40 0002 	orr.w	r0, r0, r2
    af50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    af54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    af58:	f141 0100 	adc.w	r1, r1, #0
    af5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    af60:	bf08      	it	eq
    af62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    af66:	bd70      	pop	{r4, r5, r6, pc}
    af68:	f1c4 0520 	rsb	r5, r4, #32
    af6c:	fa00 f205 	lsl.w	r2, r0, r5
    af70:	ea4e 0e02 	orr.w	lr, lr, r2
    af74:	fa20 f304 	lsr.w	r3, r0, r4
    af78:	fa01 f205 	lsl.w	r2, r1, r5
    af7c:	ea43 0302 	orr.w	r3, r3, r2
    af80:	fa21 f004 	lsr.w	r0, r1, r4
    af84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    af88:	fa21 f204 	lsr.w	r2, r1, r4
    af8c:	ea20 0002 	bic.w	r0, r0, r2
    af90:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    af94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    af98:	bf08      	it	eq
    af9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    af9e:	bd70      	pop	{r4, r5, r6, pc}
    afa0:	f094 0f00 	teq	r4, #0
    afa4:	d10f      	bne.n	afc6 <__aeabi_dmul+0x1c2>
    afa6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    afaa:	0040      	lsls	r0, r0, #1
    afac:	eb41 0101 	adc.w	r1, r1, r1
    afb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    afb4:	bf08      	it	eq
    afb6:	3c01      	subeq	r4, #1
    afb8:	d0f7      	beq.n	afaa <__aeabi_dmul+0x1a6>
    afba:	ea41 0106 	orr.w	r1, r1, r6
    afbe:	f095 0f00 	teq	r5, #0
    afc2:	bf18      	it	ne
    afc4:	4770      	bxne	lr
    afc6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    afca:	0052      	lsls	r2, r2, #1
    afcc:	eb43 0303 	adc.w	r3, r3, r3
    afd0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    afd4:	bf08      	it	eq
    afd6:	3d01      	subeq	r5, #1
    afd8:	d0f7      	beq.n	afca <__aeabi_dmul+0x1c6>
    afda:	ea43 0306 	orr.w	r3, r3, r6
    afde:	4770      	bx	lr
    afe0:	ea94 0f0c 	teq	r4, ip
    afe4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    afe8:	bf18      	it	ne
    afea:	ea95 0f0c 	teqne	r5, ip
    afee:	d00c      	beq.n	b00a <__aeabi_dmul+0x206>
    aff0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    aff4:	bf18      	it	ne
    aff6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    affa:	d1d1      	bne.n	afa0 <__aeabi_dmul+0x19c>
    affc:	ea81 0103 	eor.w	r1, r1, r3
    b000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b004:	f04f 0000 	mov.w	r0, #0
    b008:	bd70      	pop	{r4, r5, r6, pc}
    b00a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b00e:	bf06      	itte	eq
    b010:	4610      	moveq	r0, r2
    b012:	4619      	moveq	r1, r3
    b014:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b018:	d019      	beq.n	b04e <__aeabi_dmul+0x24a>
    b01a:	ea94 0f0c 	teq	r4, ip
    b01e:	d102      	bne.n	b026 <__aeabi_dmul+0x222>
    b020:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b024:	d113      	bne.n	b04e <__aeabi_dmul+0x24a>
    b026:	ea95 0f0c 	teq	r5, ip
    b02a:	d105      	bne.n	b038 <__aeabi_dmul+0x234>
    b02c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b030:	bf1c      	itt	ne
    b032:	4610      	movne	r0, r2
    b034:	4619      	movne	r1, r3
    b036:	d10a      	bne.n	b04e <__aeabi_dmul+0x24a>
    b038:	ea81 0103 	eor.w	r1, r1, r3
    b03c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b040:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b044:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b048:	f04f 0000 	mov.w	r0, #0
    b04c:	bd70      	pop	{r4, r5, r6, pc}
    b04e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b052:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b056:	bd70      	pop	{r4, r5, r6, pc}

0000b058 <__aeabi_ddiv>:
    b058:	b570      	push	{r4, r5, r6, lr}
    b05a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b05e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b062:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b066:	bf1d      	ittte	ne
    b068:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b06c:	ea94 0f0c 	teqne	r4, ip
    b070:	ea95 0f0c 	teqne	r5, ip
    b074:	f000 f8a7 	bleq	b1c6 <__aeabi_ddiv+0x16e>
    b078:	eba4 0405 	sub.w	r4, r4, r5
    b07c:	ea81 0e03 	eor.w	lr, r1, r3
    b080:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b084:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b088:	f000 8088 	beq.w	b19c <__aeabi_ddiv+0x144>
    b08c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b090:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b094:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b098:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b09c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b0a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b0a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b0a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b0ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b0b0:	429d      	cmp	r5, r3
    b0b2:	bf08      	it	eq
    b0b4:	4296      	cmpeq	r6, r2
    b0b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b0ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b0be:	d202      	bcs.n	b0c6 <__aeabi_ddiv+0x6e>
    b0c0:	085b      	lsrs	r3, r3, #1
    b0c2:	ea4f 0232 	mov.w	r2, r2, rrx
    b0c6:	1ab6      	subs	r6, r6, r2
    b0c8:	eb65 0503 	sbc.w	r5, r5, r3
    b0cc:	085b      	lsrs	r3, r3, #1
    b0ce:	ea4f 0232 	mov.w	r2, r2, rrx
    b0d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b0d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b0da:	ebb6 0e02 	subs.w	lr, r6, r2
    b0de:	eb75 0e03 	sbcs.w	lr, r5, r3
    b0e2:	bf22      	ittt	cs
    b0e4:	1ab6      	subcs	r6, r6, r2
    b0e6:	4675      	movcs	r5, lr
    b0e8:	ea40 000c 	orrcs.w	r0, r0, ip
    b0ec:	085b      	lsrs	r3, r3, #1
    b0ee:	ea4f 0232 	mov.w	r2, r2, rrx
    b0f2:	ebb6 0e02 	subs.w	lr, r6, r2
    b0f6:	eb75 0e03 	sbcs.w	lr, r5, r3
    b0fa:	bf22      	ittt	cs
    b0fc:	1ab6      	subcs	r6, r6, r2
    b0fe:	4675      	movcs	r5, lr
    b100:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b104:	085b      	lsrs	r3, r3, #1
    b106:	ea4f 0232 	mov.w	r2, r2, rrx
    b10a:	ebb6 0e02 	subs.w	lr, r6, r2
    b10e:	eb75 0e03 	sbcs.w	lr, r5, r3
    b112:	bf22      	ittt	cs
    b114:	1ab6      	subcs	r6, r6, r2
    b116:	4675      	movcs	r5, lr
    b118:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b11c:	085b      	lsrs	r3, r3, #1
    b11e:	ea4f 0232 	mov.w	r2, r2, rrx
    b122:	ebb6 0e02 	subs.w	lr, r6, r2
    b126:	eb75 0e03 	sbcs.w	lr, r5, r3
    b12a:	bf22      	ittt	cs
    b12c:	1ab6      	subcs	r6, r6, r2
    b12e:	4675      	movcs	r5, lr
    b130:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b134:	ea55 0e06 	orrs.w	lr, r5, r6
    b138:	d018      	beq.n	b16c <__aeabi_ddiv+0x114>
    b13a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b13e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b142:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b146:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b14a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b14e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b152:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b156:	d1c0      	bne.n	b0da <__aeabi_ddiv+0x82>
    b158:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b15c:	d10b      	bne.n	b176 <__aeabi_ddiv+0x11e>
    b15e:	ea41 0100 	orr.w	r1, r1, r0
    b162:	f04f 0000 	mov.w	r0, #0
    b166:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b16a:	e7b6      	b.n	b0da <__aeabi_ddiv+0x82>
    b16c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b170:	bf04      	itt	eq
    b172:	4301      	orreq	r1, r0
    b174:	2000      	moveq	r0, #0
    b176:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b17a:	bf88      	it	hi
    b17c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b180:	f63f aeaf 	bhi.w	aee2 <__aeabi_dmul+0xde>
    b184:	ebb5 0c03 	subs.w	ip, r5, r3
    b188:	bf04      	itt	eq
    b18a:	ebb6 0c02 	subseq.w	ip, r6, r2
    b18e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b192:	f150 0000 	adcs.w	r0, r0, #0
    b196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b19a:	bd70      	pop	{r4, r5, r6, pc}
    b19c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b1a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b1a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b1a8:	bfc2      	ittt	gt
    b1aa:	ebd4 050c 	rsbsgt	r5, r4, ip
    b1ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b1b2:	bd70      	popgt	{r4, r5, r6, pc}
    b1b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b1b8:	f04f 0e00 	mov.w	lr, #0
    b1bc:	3c01      	subs	r4, #1
    b1be:	e690      	b.n	aee2 <__aeabi_dmul+0xde>
    b1c0:	ea45 0e06 	orr.w	lr, r5, r6
    b1c4:	e68d      	b.n	aee2 <__aeabi_dmul+0xde>
    b1c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b1ca:	ea94 0f0c 	teq	r4, ip
    b1ce:	bf08      	it	eq
    b1d0:	ea95 0f0c 	teqeq	r5, ip
    b1d4:	f43f af3b 	beq.w	b04e <__aeabi_dmul+0x24a>
    b1d8:	ea94 0f0c 	teq	r4, ip
    b1dc:	d10a      	bne.n	b1f4 <__aeabi_ddiv+0x19c>
    b1de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b1e2:	f47f af34 	bne.w	b04e <__aeabi_dmul+0x24a>
    b1e6:	ea95 0f0c 	teq	r5, ip
    b1ea:	f47f af25 	bne.w	b038 <__aeabi_dmul+0x234>
    b1ee:	4610      	mov	r0, r2
    b1f0:	4619      	mov	r1, r3
    b1f2:	e72c      	b.n	b04e <__aeabi_dmul+0x24a>
    b1f4:	ea95 0f0c 	teq	r5, ip
    b1f8:	d106      	bne.n	b208 <__aeabi_ddiv+0x1b0>
    b1fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b1fe:	f43f aefd 	beq.w	affc <__aeabi_dmul+0x1f8>
    b202:	4610      	mov	r0, r2
    b204:	4619      	mov	r1, r3
    b206:	e722      	b.n	b04e <__aeabi_dmul+0x24a>
    b208:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b20c:	bf18      	it	ne
    b20e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b212:	f47f aec5 	bne.w	afa0 <__aeabi_dmul+0x19c>
    b216:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b21a:	f47f af0d 	bne.w	b038 <__aeabi_dmul+0x234>
    b21e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b222:	f47f aeeb 	bne.w	affc <__aeabi_dmul+0x1f8>
    b226:	e712      	b.n	b04e <__aeabi_dmul+0x24a>

0000b228 <__aeabi_d2uiz>:
    b228:	004a      	lsls	r2, r1, #1
    b22a:	d211      	bcs.n	b250 <__aeabi_d2uiz+0x28>
    b22c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b230:	d211      	bcs.n	b256 <__aeabi_d2uiz+0x2e>
    b232:	d50d      	bpl.n	b250 <__aeabi_d2uiz+0x28>
    b234:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b238:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b23c:	d40e      	bmi.n	b25c <__aeabi_d2uiz+0x34>
    b23e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b246:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b24a:	fa23 f002 	lsr.w	r0, r3, r2
    b24e:	4770      	bx	lr
    b250:	f04f 0000 	mov.w	r0, #0
    b254:	4770      	bx	lr
    b256:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b25a:	d102      	bne.n	b262 <__aeabi_d2uiz+0x3a>
    b25c:	f04f 30ff 	mov.w	r0, #4294967295
    b260:	4770      	bx	lr
    b262:	f04f 0000 	mov.w	r0, #0
    b266:	4770      	bx	lr

0000b268 <__libc_init_array>:
    b268:	b570      	push	{r4, r5, r6, lr}
    b26a:	4e0d      	ldr	r6, [pc, #52]	; (b2a0 <__libc_init_array+0x38>)
    b26c:	4c0d      	ldr	r4, [pc, #52]	; (b2a4 <__libc_init_array+0x3c>)
    b26e:	1ba4      	subs	r4, r4, r6
    b270:	10a4      	asrs	r4, r4, #2
    b272:	2500      	movs	r5, #0
    b274:	42a5      	cmp	r5, r4
    b276:	d109      	bne.n	b28c <__libc_init_array+0x24>
    b278:	4e0b      	ldr	r6, [pc, #44]	; (b2a8 <__libc_init_array+0x40>)
    b27a:	4c0c      	ldr	r4, [pc, #48]	; (b2ac <__libc_init_array+0x44>)
    b27c:	f001 f8e0 	bl	c440 <_init>
    b280:	1ba4      	subs	r4, r4, r6
    b282:	10a4      	asrs	r4, r4, #2
    b284:	2500      	movs	r5, #0
    b286:	42a5      	cmp	r5, r4
    b288:	d105      	bne.n	b296 <__libc_init_array+0x2e>
    b28a:	bd70      	pop	{r4, r5, r6, pc}
    b28c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b290:	4798      	blx	r3
    b292:	3501      	adds	r5, #1
    b294:	e7ee      	b.n	b274 <__libc_init_array+0xc>
    b296:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b29a:	4798      	blx	r3
    b29c:	3501      	adds	r5, #1
    b29e:	e7f2      	b.n	b286 <__libc_init_array+0x1e>
    b2a0:	0000c44c 	.word	0x0000c44c
    b2a4:	0000c44c 	.word	0x0000c44c
    b2a8:	0000c44c 	.word	0x0000c44c
    b2ac:	0000c450 	.word	0x0000c450

0000b2b0 <malloc>:
    b2b0:	4b02      	ldr	r3, [pc, #8]	; (b2bc <malloc+0xc>)
    b2b2:	4601      	mov	r1, r0
    b2b4:	6818      	ldr	r0, [r3, #0]
    b2b6:	f000 b865 	b.w	b384 <_malloc_r>
    b2ba:	bf00      	nop
    b2bc:	20000558 	.word	0x20000558

0000b2c0 <memcpy>:
    b2c0:	b510      	push	{r4, lr}
    b2c2:	1e43      	subs	r3, r0, #1
    b2c4:	440a      	add	r2, r1
    b2c6:	4291      	cmp	r1, r2
    b2c8:	d100      	bne.n	b2cc <memcpy+0xc>
    b2ca:	bd10      	pop	{r4, pc}
    b2cc:	f811 4b01 	ldrb.w	r4, [r1], #1
    b2d0:	f803 4f01 	strb.w	r4, [r3, #1]!
    b2d4:	e7f7      	b.n	b2c6 <memcpy+0x6>

0000b2d6 <memset>:
    b2d6:	4402      	add	r2, r0
    b2d8:	4603      	mov	r3, r0
    b2da:	4293      	cmp	r3, r2
    b2dc:	d100      	bne.n	b2e0 <memset+0xa>
    b2de:	4770      	bx	lr
    b2e0:	f803 1b01 	strb.w	r1, [r3], #1
    b2e4:	e7f9      	b.n	b2da <memset+0x4>
	...

0000b2e8 <_free_r>:
    b2e8:	b538      	push	{r3, r4, r5, lr}
    b2ea:	4605      	mov	r5, r0
    b2ec:	2900      	cmp	r1, #0
    b2ee:	d045      	beq.n	b37c <_free_r+0x94>
    b2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b2f4:	1f0c      	subs	r4, r1, #4
    b2f6:	2b00      	cmp	r3, #0
    b2f8:	bfb8      	it	lt
    b2fa:	18e4      	addlt	r4, r4, r3
    b2fc:	f000 f916 	bl	b52c <__malloc_lock>
    b300:	4a1f      	ldr	r2, [pc, #124]	; (b380 <_free_r+0x98>)
    b302:	6813      	ldr	r3, [r2, #0]
    b304:	4610      	mov	r0, r2
    b306:	b933      	cbnz	r3, b316 <_free_r+0x2e>
    b308:	6063      	str	r3, [r4, #4]
    b30a:	6014      	str	r4, [r2, #0]
    b30c:	4628      	mov	r0, r5
    b30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b312:	f000 b90c 	b.w	b52e <__malloc_unlock>
    b316:	42a3      	cmp	r3, r4
    b318:	d90c      	bls.n	b334 <_free_r+0x4c>
    b31a:	6821      	ldr	r1, [r4, #0]
    b31c:	1862      	adds	r2, r4, r1
    b31e:	4293      	cmp	r3, r2
    b320:	bf04      	itt	eq
    b322:	681a      	ldreq	r2, [r3, #0]
    b324:	685b      	ldreq	r3, [r3, #4]
    b326:	6063      	str	r3, [r4, #4]
    b328:	bf04      	itt	eq
    b32a:	1852      	addeq	r2, r2, r1
    b32c:	6022      	streq	r2, [r4, #0]
    b32e:	6004      	str	r4, [r0, #0]
    b330:	e7ec      	b.n	b30c <_free_r+0x24>
    b332:	4613      	mov	r3, r2
    b334:	685a      	ldr	r2, [r3, #4]
    b336:	b10a      	cbz	r2, b33c <_free_r+0x54>
    b338:	42a2      	cmp	r2, r4
    b33a:	d9fa      	bls.n	b332 <_free_r+0x4a>
    b33c:	6819      	ldr	r1, [r3, #0]
    b33e:	1858      	adds	r0, r3, r1
    b340:	42a0      	cmp	r0, r4
    b342:	d10b      	bne.n	b35c <_free_r+0x74>
    b344:	6820      	ldr	r0, [r4, #0]
    b346:	4401      	add	r1, r0
    b348:	1858      	adds	r0, r3, r1
    b34a:	4282      	cmp	r2, r0
    b34c:	6019      	str	r1, [r3, #0]
    b34e:	d1dd      	bne.n	b30c <_free_r+0x24>
    b350:	6810      	ldr	r0, [r2, #0]
    b352:	6852      	ldr	r2, [r2, #4]
    b354:	605a      	str	r2, [r3, #4]
    b356:	4401      	add	r1, r0
    b358:	6019      	str	r1, [r3, #0]
    b35a:	e7d7      	b.n	b30c <_free_r+0x24>
    b35c:	d902      	bls.n	b364 <_free_r+0x7c>
    b35e:	230c      	movs	r3, #12
    b360:	602b      	str	r3, [r5, #0]
    b362:	e7d3      	b.n	b30c <_free_r+0x24>
    b364:	6820      	ldr	r0, [r4, #0]
    b366:	1821      	adds	r1, r4, r0
    b368:	428a      	cmp	r2, r1
    b36a:	bf04      	itt	eq
    b36c:	6811      	ldreq	r1, [r2, #0]
    b36e:	6852      	ldreq	r2, [r2, #4]
    b370:	6062      	str	r2, [r4, #4]
    b372:	bf04      	itt	eq
    b374:	1809      	addeq	r1, r1, r0
    b376:	6021      	streq	r1, [r4, #0]
    b378:	605c      	str	r4, [r3, #4]
    b37a:	e7c7      	b.n	b30c <_free_r+0x24>
    b37c:	bd38      	pop	{r3, r4, r5, pc}
    b37e:	bf00      	nop
    b380:	20000e9c 	.word	0x20000e9c

0000b384 <_malloc_r>:
    b384:	b570      	push	{r4, r5, r6, lr}
    b386:	1ccd      	adds	r5, r1, #3
    b388:	f025 0503 	bic.w	r5, r5, #3
    b38c:	3508      	adds	r5, #8
    b38e:	2d0c      	cmp	r5, #12
    b390:	bf38      	it	cc
    b392:	250c      	movcc	r5, #12
    b394:	2d00      	cmp	r5, #0
    b396:	4606      	mov	r6, r0
    b398:	db01      	blt.n	b39e <_malloc_r+0x1a>
    b39a:	42a9      	cmp	r1, r5
    b39c:	d903      	bls.n	b3a6 <_malloc_r+0x22>
    b39e:	230c      	movs	r3, #12
    b3a0:	6033      	str	r3, [r6, #0]
    b3a2:	2000      	movs	r0, #0
    b3a4:	bd70      	pop	{r4, r5, r6, pc}
    b3a6:	f000 f8c1 	bl	b52c <__malloc_lock>
    b3aa:	4a23      	ldr	r2, [pc, #140]	; (b438 <_malloc_r+0xb4>)
    b3ac:	6814      	ldr	r4, [r2, #0]
    b3ae:	4621      	mov	r1, r4
    b3b0:	b991      	cbnz	r1, b3d8 <_malloc_r+0x54>
    b3b2:	4c22      	ldr	r4, [pc, #136]	; (b43c <_malloc_r+0xb8>)
    b3b4:	6823      	ldr	r3, [r4, #0]
    b3b6:	b91b      	cbnz	r3, b3c0 <_malloc_r+0x3c>
    b3b8:	4630      	mov	r0, r6
    b3ba:	f000 f87b 	bl	b4b4 <_sbrk_r>
    b3be:	6020      	str	r0, [r4, #0]
    b3c0:	4629      	mov	r1, r5
    b3c2:	4630      	mov	r0, r6
    b3c4:	f000 f876 	bl	b4b4 <_sbrk_r>
    b3c8:	1c43      	adds	r3, r0, #1
    b3ca:	d126      	bne.n	b41a <_malloc_r+0x96>
    b3cc:	230c      	movs	r3, #12
    b3ce:	6033      	str	r3, [r6, #0]
    b3d0:	4630      	mov	r0, r6
    b3d2:	f000 f8ac 	bl	b52e <__malloc_unlock>
    b3d6:	e7e4      	b.n	b3a2 <_malloc_r+0x1e>
    b3d8:	680b      	ldr	r3, [r1, #0]
    b3da:	1b5b      	subs	r3, r3, r5
    b3dc:	d41a      	bmi.n	b414 <_malloc_r+0x90>
    b3de:	2b0b      	cmp	r3, #11
    b3e0:	d90f      	bls.n	b402 <_malloc_r+0x7e>
    b3e2:	600b      	str	r3, [r1, #0]
    b3e4:	50cd      	str	r5, [r1, r3]
    b3e6:	18cc      	adds	r4, r1, r3
    b3e8:	4630      	mov	r0, r6
    b3ea:	f000 f8a0 	bl	b52e <__malloc_unlock>
    b3ee:	f104 000b 	add.w	r0, r4, #11
    b3f2:	1d23      	adds	r3, r4, #4
    b3f4:	f020 0007 	bic.w	r0, r0, #7
    b3f8:	1ac3      	subs	r3, r0, r3
    b3fa:	d01b      	beq.n	b434 <_malloc_r+0xb0>
    b3fc:	425a      	negs	r2, r3
    b3fe:	50e2      	str	r2, [r4, r3]
    b400:	bd70      	pop	{r4, r5, r6, pc}
    b402:	428c      	cmp	r4, r1
    b404:	bf0d      	iteet	eq
    b406:	6863      	ldreq	r3, [r4, #4]
    b408:	684b      	ldrne	r3, [r1, #4]
    b40a:	6063      	strne	r3, [r4, #4]
    b40c:	6013      	streq	r3, [r2, #0]
    b40e:	bf18      	it	ne
    b410:	460c      	movne	r4, r1
    b412:	e7e9      	b.n	b3e8 <_malloc_r+0x64>
    b414:	460c      	mov	r4, r1
    b416:	6849      	ldr	r1, [r1, #4]
    b418:	e7ca      	b.n	b3b0 <_malloc_r+0x2c>
    b41a:	1cc4      	adds	r4, r0, #3
    b41c:	f024 0403 	bic.w	r4, r4, #3
    b420:	42a0      	cmp	r0, r4
    b422:	d005      	beq.n	b430 <_malloc_r+0xac>
    b424:	1a21      	subs	r1, r4, r0
    b426:	4630      	mov	r0, r6
    b428:	f000 f844 	bl	b4b4 <_sbrk_r>
    b42c:	3001      	adds	r0, #1
    b42e:	d0cd      	beq.n	b3cc <_malloc_r+0x48>
    b430:	6025      	str	r5, [r4, #0]
    b432:	e7d9      	b.n	b3e8 <_malloc_r+0x64>
    b434:	bd70      	pop	{r4, r5, r6, pc}
    b436:	bf00      	nop
    b438:	20000e9c 	.word	0x20000e9c
    b43c:	20000ea0 	.word	0x20000ea0

0000b440 <rand>:
    b440:	4b19      	ldr	r3, [pc, #100]	; (b4a8 <rand+0x68>)
    b442:	b510      	push	{r4, lr}
    b444:	681c      	ldr	r4, [r3, #0]
    b446:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b448:	b9d3      	cbnz	r3, b480 <rand+0x40>
    b44a:	2018      	movs	r0, #24
    b44c:	f7ff ff30 	bl	b2b0 <malloc>
    b450:	f243 330e 	movw	r3, #13070	; 0x330e
    b454:	63a0      	str	r0, [r4, #56]	; 0x38
    b456:	8003      	strh	r3, [r0, #0]
    b458:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    b45c:	8043      	strh	r3, [r0, #2]
    b45e:	f241 2334 	movw	r3, #4660	; 0x1234
    b462:	8083      	strh	r3, [r0, #4]
    b464:	f24e 636d 	movw	r3, #58989	; 0xe66d
    b468:	80c3      	strh	r3, [r0, #6]
    b46a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    b46e:	8103      	strh	r3, [r0, #8]
    b470:	2305      	movs	r3, #5
    b472:	8143      	strh	r3, [r0, #10]
    b474:	230b      	movs	r3, #11
    b476:	8183      	strh	r3, [r0, #12]
    b478:	2201      	movs	r2, #1
    b47a:	2300      	movs	r3, #0
    b47c:	e9c0 2304 	strd	r2, r3, [r0, #16]
    b480:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    b482:	480a      	ldr	r0, [pc, #40]	; (b4ac <rand+0x6c>)
    b484:	690a      	ldr	r2, [r1, #16]
    b486:	694b      	ldr	r3, [r1, #20]
    b488:	4c09      	ldr	r4, [pc, #36]	; (b4b0 <rand+0x70>)
    b48a:	4350      	muls	r0, r2
    b48c:	fb04 0003 	mla	r0, r4, r3, r0
    b490:	fba2 2304 	umull	r2, r3, r2, r4
    b494:	3201      	adds	r2, #1
    b496:	4403      	add	r3, r0
    b498:	f143 0300 	adc.w	r3, r3, #0
    b49c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    b4a0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    b4a4:	bd10      	pop	{r4, pc}
    b4a6:	bf00      	nop
    b4a8:	20000558 	.word	0x20000558
    b4ac:	5851f42d 	.word	0x5851f42d
    b4b0:	4c957f2d 	.word	0x4c957f2d

0000b4b4 <_sbrk_r>:
    b4b4:	b538      	push	{r3, r4, r5, lr}
    b4b6:	4c06      	ldr	r4, [pc, #24]	; (b4d0 <_sbrk_r+0x1c>)
    b4b8:	2300      	movs	r3, #0
    b4ba:	4605      	mov	r5, r0
    b4bc:	4608      	mov	r0, r1
    b4be:	6023      	str	r3, [r4, #0]
    b4c0:	f7f9 ff9a 	bl	53f8 <_sbrk>
    b4c4:	1c43      	adds	r3, r0, #1
    b4c6:	d102      	bne.n	b4ce <_sbrk_r+0x1a>
    b4c8:	6823      	ldr	r3, [r4, #0]
    b4ca:	b103      	cbz	r3, b4ce <_sbrk_r+0x1a>
    b4cc:	602b      	str	r3, [r5, #0]
    b4ce:	bd38      	pop	{r3, r4, r5, pc}
    b4d0:	20003e8c 	.word	0x20003e8c

0000b4d4 <siprintf>:
    b4d4:	b40e      	push	{r1, r2, r3}
    b4d6:	b500      	push	{lr}
    b4d8:	b09c      	sub	sp, #112	; 0x70
    b4da:	f44f 7102 	mov.w	r1, #520	; 0x208
    b4de:	ab1d      	add	r3, sp, #116	; 0x74
    b4e0:	f8ad 1014 	strh.w	r1, [sp, #20]
    b4e4:	9002      	str	r0, [sp, #8]
    b4e6:	9006      	str	r0, [sp, #24]
    b4e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b4ec:	480a      	ldr	r0, [pc, #40]	; (b518 <siprintf+0x44>)
    b4ee:	9104      	str	r1, [sp, #16]
    b4f0:	9107      	str	r1, [sp, #28]
    b4f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b4f6:	f853 2b04 	ldr.w	r2, [r3], #4
    b4fa:	f8ad 1016 	strh.w	r1, [sp, #22]
    b4fe:	6800      	ldr	r0, [r0, #0]
    b500:	9301      	str	r3, [sp, #4]
    b502:	a902      	add	r1, sp, #8
    b504:	f000 f870 	bl	b5e8 <_svfiprintf_r>
    b508:	9b02      	ldr	r3, [sp, #8]
    b50a:	2200      	movs	r2, #0
    b50c:	701a      	strb	r2, [r3, #0]
    b50e:	b01c      	add	sp, #112	; 0x70
    b510:	f85d eb04 	ldr.w	lr, [sp], #4
    b514:	b003      	add	sp, #12
    b516:	4770      	bx	lr
    b518:	20000558 	.word	0x20000558

0000b51c <strlen>:
    b51c:	4603      	mov	r3, r0
    b51e:	f813 2b01 	ldrb.w	r2, [r3], #1
    b522:	2a00      	cmp	r2, #0
    b524:	d1fb      	bne.n	b51e <strlen+0x2>
    b526:	1a18      	subs	r0, r3, r0
    b528:	3801      	subs	r0, #1
    b52a:	4770      	bx	lr

0000b52c <__malloc_lock>:
    b52c:	4770      	bx	lr

0000b52e <__malloc_unlock>:
    b52e:	4770      	bx	lr

0000b530 <__ssputs_r>:
    b530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b534:	688e      	ldr	r6, [r1, #8]
    b536:	429e      	cmp	r6, r3
    b538:	4682      	mov	sl, r0
    b53a:	460c      	mov	r4, r1
    b53c:	4691      	mov	r9, r2
    b53e:	4698      	mov	r8, r3
    b540:	d835      	bhi.n	b5ae <__ssputs_r+0x7e>
    b542:	898a      	ldrh	r2, [r1, #12]
    b544:	f412 6f90 	tst.w	r2, #1152	; 0x480
    b548:	d031      	beq.n	b5ae <__ssputs_r+0x7e>
    b54a:	6825      	ldr	r5, [r4, #0]
    b54c:	6909      	ldr	r1, [r1, #16]
    b54e:	1a6f      	subs	r7, r5, r1
    b550:	6965      	ldr	r5, [r4, #20]
    b552:	2302      	movs	r3, #2
    b554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    b558:	fb95 f5f3 	sdiv	r5, r5, r3
    b55c:	f108 0301 	add.w	r3, r8, #1
    b560:	443b      	add	r3, r7
    b562:	429d      	cmp	r5, r3
    b564:	bf38      	it	cc
    b566:	461d      	movcc	r5, r3
    b568:	0553      	lsls	r3, r2, #21
    b56a:	d531      	bpl.n	b5d0 <__ssputs_r+0xa0>
    b56c:	4629      	mov	r1, r5
    b56e:	f7ff ff09 	bl	b384 <_malloc_r>
    b572:	4606      	mov	r6, r0
    b574:	b950      	cbnz	r0, b58c <__ssputs_r+0x5c>
    b576:	230c      	movs	r3, #12
    b578:	f8ca 3000 	str.w	r3, [sl]
    b57c:	89a3      	ldrh	r3, [r4, #12]
    b57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b582:	81a3      	strh	r3, [r4, #12]
    b584:	f04f 30ff 	mov.w	r0, #4294967295
    b588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b58c:	463a      	mov	r2, r7
    b58e:	6921      	ldr	r1, [r4, #16]
    b590:	f7ff fe96 	bl	b2c0 <memcpy>
    b594:	89a3      	ldrh	r3, [r4, #12]
    b596:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    b59a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b59e:	81a3      	strh	r3, [r4, #12]
    b5a0:	6126      	str	r6, [r4, #16]
    b5a2:	6165      	str	r5, [r4, #20]
    b5a4:	443e      	add	r6, r7
    b5a6:	1bed      	subs	r5, r5, r7
    b5a8:	6026      	str	r6, [r4, #0]
    b5aa:	60a5      	str	r5, [r4, #8]
    b5ac:	4646      	mov	r6, r8
    b5ae:	4546      	cmp	r6, r8
    b5b0:	bf28      	it	cs
    b5b2:	4646      	movcs	r6, r8
    b5b4:	4632      	mov	r2, r6
    b5b6:	4649      	mov	r1, r9
    b5b8:	6820      	ldr	r0, [r4, #0]
    b5ba:	f000 faf1 	bl	bba0 <memmove>
    b5be:	68a3      	ldr	r3, [r4, #8]
    b5c0:	1b9b      	subs	r3, r3, r6
    b5c2:	60a3      	str	r3, [r4, #8]
    b5c4:	6823      	ldr	r3, [r4, #0]
    b5c6:	441e      	add	r6, r3
    b5c8:	6026      	str	r6, [r4, #0]
    b5ca:	2000      	movs	r0, #0
    b5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b5d0:	462a      	mov	r2, r5
    b5d2:	f000 faff 	bl	bbd4 <_realloc_r>
    b5d6:	4606      	mov	r6, r0
    b5d8:	2800      	cmp	r0, #0
    b5da:	d1e1      	bne.n	b5a0 <__ssputs_r+0x70>
    b5dc:	6921      	ldr	r1, [r4, #16]
    b5de:	4650      	mov	r0, sl
    b5e0:	f7ff fe82 	bl	b2e8 <_free_r>
    b5e4:	e7c7      	b.n	b576 <__ssputs_r+0x46>
	...

0000b5e8 <_svfiprintf_r>:
    b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5ec:	b09d      	sub	sp, #116	; 0x74
    b5ee:	4680      	mov	r8, r0
    b5f0:	9303      	str	r3, [sp, #12]
    b5f2:	898b      	ldrh	r3, [r1, #12]
    b5f4:	061c      	lsls	r4, r3, #24
    b5f6:	460d      	mov	r5, r1
    b5f8:	4616      	mov	r6, r2
    b5fa:	d50f      	bpl.n	b61c <_svfiprintf_r+0x34>
    b5fc:	690b      	ldr	r3, [r1, #16]
    b5fe:	b96b      	cbnz	r3, b61c <_svfiprintf_r+0x34>
    b600:	2140      	movs	r1, #64	; 0x40
    b602:	f7ff febf 	bl	b384 <_malloc_r>
    b606:	6028      	str	r0, [r5, #0]
    b608:	6128      	str	r0, [r5, #16]
    b60a:	b928      	cbnz	r0, b618 <_svfiprintf_r+0x30>
    b60c:	230c      	movs	r3, #12
    b60e:	f8c8 3000 	str.w	r3, [r8]
    b612:	f04f 30ff 	mov.w	r0, #4294967295
    b616:	e0c5      	b.n	b7a4 <_svfiprintf_r+0x1bc>
    b618:	2340      	movs	r3, #64	; 0x40
    b61a:	616b      	str	r3, [r5, #20]
    b61c:	2300      	movs	r3, #0
    b61e:	9309      	str	r3, [sp, #36]	; 0x24
    b620:	2320      	movs	r3, #32
    b622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    b626:	2330      	movs	r3, #48	; 0x30
    b628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    b62c:	f04f 0b01 	mov.w	fp, #1
    b630:	4637      	mov	r7, r6
    b632:	463c      	mov	r4, r7
    b634:	f814 3b01 	ldrb.w	r3, [r4], #1
    b638:	2b00      	cmp	r3, #0
    b63a:	d13c      	bne.n	b6b6 <_svfiprintf_r+0xce>
    b63c:	ebb7 0a06 	subs.w	sl, r7, r6
    b640:	d00b      	beq.n	b65a <_svfiprintf_r+0x72>
    b642:	4653      	mov	r3, sl
    b644:	4632      	mov	r2, r6
    b646:	4629      	mov	r1, r5
    b648:	4640      	mov	r0, r8
    b64a:	f7ff ff71 	bl	b530 <__ssputs_r>
    b64e:	3001      	adds	r0, #1
    b650:	f000 80a3 	beq.w	b79a <_svfiprintf_r+0x1b2>
    b654:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b656:	4453      	add	r3, sl
    b658:	9309      	str	r3, [sp, #36]	; 0x24
    b65a:	783b      	ldrb	r3, [r7, #0]
    b65c:	2b00      	cmp	r3, #0
    b65e:	f000 809c 	beq.w	b79a <_svfiprintf_r+0x1b2>
    b662:	2300      	movs	r3, #0
    b664:	f04f 32ff 	mov.w	r2, #4294967295
    b668:	9304      	str	r3, [sp, #16]
    b66a:	9307      	str	r3, [sp, #28]
    b66c:	9205      	str	r2, [sp, #20]
    b66e:	9306      	str	r3, [sp, #24]
    b670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    b674:	931a      	str	r3, [sp, #104]	; 0x68
    b676:	2205      	movs	r2, #5
    b678:	7821      	ldrb	r1, [r4, #0]
    b67a:	4850      	ldr	r0, [pc, #320]	; (b7bc <_svfiprintf_r+0x1d4>)
    b67c:	f000 fa40 	bl	bb00 <memchr>
    b680:	1c67      	adds	r7, r4, #1
    b682:	9b04      	ldr	r3, [sp, #16]
    b684:	b9d8      	cbnz	r0, b6be <_svfiprintf_r+0xd6>
    b686:	06d9      	lsls	r1, r3, #27
    b688:	bf44      	itt	mi
    b68a:	2220      	movmi	r2, #32
    b68c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b690:	071a      	lsls	r2, r3, #28
    b692:	bf44      	itt	mi
    b694:	222b      	movmi	r2, #43	; 0x2b
    b696:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b69a:	7822      	ldrb	r2, [r4, #0]
    b69c:	2a2a      	cmp	r2, #42	; 0x2a
    b69e:	d016      	beq.n	b6ce <_svfiprintf_r+0xe6>
    b6a0:	9a07      	ldr	r2, [sp, #28]
    b6a2:	2100      	movs	r1, #0
    b6a4:	200a      	movs	r0, #10
    b6a6:	4627      	mov	r7, r4
    b6a8:	3401      	adds	r4, #1
    b6aa:	783b      	ldrb	r3, [r7, #0]
    b6ac:	3b30      	subs	r3, #48	; 0x30
    b6ae:	2b09      	cmp	r3, #9
    b6b0:	d951      	bls.n	b756 <_svfiprintf_r+0x16e>
    b6b2:	b1c9      	cbz	r1, b6e8 <_svfiprintf_r+0x100>
    b6b4:	e011      	b.n	b6da <_svfiprintf_r+0xf2>
    b6b6:	2b25      	cmp	r3, #37	; 0x25
    b6b8:	d0c0      	beq.n	b63c <_svfiprintf_r+0x54>
    b6ba:	4627      	mov	r7, r4
    b6bc:	e7b9      	b.n	b632 <_svfiprintf_r+0x4a>
    b6be:	4a3f      	ldr	r2, [pc, #252]	; (b7bc <_svfiprintf_r+0x1d4>)
    b6c0:	1a80      	subs	r0, r0, r2
    b6c2:	fa0b f000 	lsl.w	r0, fp, r0
    b6c6:	4318      	orrs	r0, r3
    b6c8:	9004      	str	r0, [sp, #16]
    b6ca:	463c      	mov	r4, r7
    b6cc:	e7d3      	b.n	b676 <_svfiprintf_r+0x8e>
    b6ce:	9a03      	ldr	r2, [sp, #12]
    b6d0:	1d11      	adds	r1, r2, #4
    b6d2:	6812      	ldr	r2, [r2, #0]
    b6d4:	9103      	str	r1, [sp, #12]
    b6d6:	2a00      	cmp	r2, #0
    b6d8:	db01      	blt.n	b6de <_svfiprintf_r+0xf6>
    b6da:	9207      	str	r2, [sp, #28]
    b6dc:	e004      	b.n	b6e8 <_svfiprintf_r+0x100>
    b6de:	4252      	negs	r2, r2
    b6e0:	f043 0302 	orr.w	r3, r3, #2
    b6e4:	9207      	str	r2, [sp, #28]
    b6e6:	9304      	str	r3, [sp, #16]
    b6e8:	783b      	ldrb	r3, [r7, #0]
    b6ea:	2b2e      	cmp	r3, #46	; 0x2e
    b6ec:	d10e      	bne.n	b70c <_svfiprintf_r+0x124>
    b6ee:	787b      	ldrb	r3, [r7, #1]
    b6f0:	2b2a      	cmp	r3, #42	; 0x2a
    b6f2:	f107 0101 	add.w	r1, r7, #1
    b6f6:	d132      	bne.n	b75e <_svfiprintf_r+0x176>
    b6f8:	9b03      	ldr	r3, [sp, #12]
    b6fa:	1d1a      	adds	r2, r3, #4
    b6fc:	681b      	ldr	r3, [r3, #0]
    b6fe:	9203      	str	r2, [sp, #12]
    b700:	2b00      	cmp	r3, #0
    b702:	bfb8      	it	lt
    b704:	f04f 33ff 	movlt.w	r3, #4294967295
    b708:	3702      	adds	r7, #2
    b70a:	9305      	str	r3, [sp, #20]
    b70c:	4c2c      	ldr	r4, [pc, #176]	; (b7c0 <_svfiprintf_r+0x1d8>)
    b70e:	7839      	ldrb	r1, [r7, #0]
    b710:	2203      	movs	r2, #3
    b712:	4620      	mov	r0, r4
    b714:	f000 f9f4 	bl	bb00 <memchr>
    b718:	b138      	cbz	r0, b72a <_svfiprintf_r+0x142>
    b71a:	2340      	movs	r3, #64	; 0x40
    b71c:	1b00      	subs	r0, r0, r4
    b71e:	fa03 f000 	lsl.w	r0, r3, r0
    b722:	9b04      	ldr	r3, [sp, #16]
    b724:	4303      	orrs	r3, r0
    b726:	9304      	str	r3, [sp, #16]
    b728:	3701      	adds	r7, #1
    b72a:	7839      	ldrb	r1, [r7, #0]
    b72c:	4825      	ldr	r0, [pc, #148]	; (b7c4 <_svfiprintf_r+0x1dc>)
    b72e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    b732:	2206      	movs	r2, #6
    b734:	1c7e      	adds	r6, r7, #1
    b736:	f000 f9e3 	bl	bb00 <memchr>
    b73a:	2800      	cmp	r0, #0
    b73c:	d035      	beq.n	b7aa <_svfiprintf_r+0x1c2>
    b73e:	4b22      	ldr	r3, [pc, #136]	; (b7c8 <_svfiprintf_r+0x1e0>)
    b740:	b9fb      	cbnz	r3, b782 <_svfiprintf_r+0x19a>
    b742:	9b03      	ldr	r3, [sp, #12]
    b744:	3307      	adds	r3, #7
    b746:	f023 0307 	bic.w	r3, r3, #7
    b74a:	3308      	adds	r3, #8
    b74c:	9303      	str	r3, [sp, #12]
    b74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b750:	444b      	add	r3, r9
    b752:	9309      	str	r3, [sp, #36]	; 0x24
    b754:	e76c      	b.n	b630 <_svfiprintf_r+0x48>
    b756:	fb00 3202 	mla	r2, r0, r2, r3
    b75a:	2101      	movs	r1, #1
    b75c:	e7a3      	b.n	b6a6 <_svfiprintf_r+0xbe>
    b75e:	2300      	movs	r3, #0
    b760:	9305      	str	r3, [sp, #20]
    b762:	4618      	mov	r0, r3
    b764:	240a      	movs	r4, #10
    b766:	460f      	mov	r7, r1
    b768:	3101      	adds	r1, #1
    b76a:	783a      	ldrb	r2, [r7, #0]
    b76c:	3a30      	subs	r2, #48	; 0x30
    b76e:	2a09      	cmp	r2, #9
    b770:	d903      	bls.n	b77a <_svfiprintf_r+0x192>
    b772:	2b00      	cmp	r3, #0
    b774:	d0ca      	beq.n	b70c <_svfiprintf_r+0x124>
    b776:	9005      	str	r0, [sp, #20]
    b778:	e7c8      	b.n	b70c <_svfiprintf_r+0x124>
    b77a:	fb04 2000 	mla	r0, r4, r0, r2
    b77e:	2301      	movs	r3, #1
    b780:	e7f1      	b.n	b766 <_svfiprintf_r+0x17e>
    b782:	ab03      	add	r3, sp, #12
    b784:	9300      	str	r3, [sp, #0]
    b786:	462a      	mov	r2, r5
    b788:	4b10      	ldr	r3, [pc, #64]	; (b7cc <_svfiprintf_r+0x1e4>)
    b78a:	a904      	add	r1, sp, #16
    b78c:	4640      	mov	r0, r8
    b78e:	f3af 8000 	nop.w
    b792:	f1b0 3fff 	cmp.w	r0, #4294967295
    b796:	4681      	mov	r9, r0
    b798:	d1d9      	bne.n	b74e <_svfiprintf_r+0x166>
    b79a:	89ab      	ldrh	r3, [r5, #12]
    b79c:	065b      	lsls	r3, r3, #25
    b79e:	f53f af38 	bmi.w	b612 <_svfiprintf_r+0x2a>
    b7a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    b7a4:	b01d      	add	sp, #116	; 0x74
    b7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7aa:	ab03      	add	r3, sp, #12
    b7ac:	9300      	str	r3, [sp, #0]
    b7ae:	462a      	mov	r2, r5
    b7b0:	4b06      	ldr	r3, [pc, #24]	; (b7cc <_svfiprintf_r+0x1e4>)
    b7b2:	a904      	add	r1, sp, #16
    b7b4:	4640      	mov	r0, r8
    b7b6:	f000 f881 	bl	b8bc <_printf_i>
    b7ba:	e7ea      	b.n	b792 <_svfiprintf_r+0x1aa>
    b7bc:	0000c40c 	.word	0x0000c40c
    b7c0:	0000c412 	.word	0x0000c412
    b7c4:	0000c416 	.word	0x0000c416
    b7c8:	00000000 	.word	0x00000000
    b7cc:	0000b531 	.word	0x0000b531

0000b7d0 <_printf_common>:
    b7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7d4:	4691      	mov	r9, r2
    b7d6:	461f      	mov	r7, r3
    b7d8:	688a      	ldr	r2, [r1, #8]
    b7da:	690b      	ldr	r3, [r1, #16]
    b7dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    b7e0:	4293      	cmp	r3, r2
    b7e2:	bfb8      	it	lt
    b7e4:	4613      	movlt	r3, r2
    b7e6:	f8c9 3000 	str.w	r3, [r9]
    b7ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    b7ee:	4606      	mov	r6, r0
    b7f0:	460c      	mov	r4, r1
    b7f2:	b112      	cbz	r2, b7fa <_printf_common+0x2a>
    b7f4:	3301      	adds	r3, #1
    b7f6:	f8c9 3000 	str.w	r3, [r9]
    b7fa:	6823      	ldr	r3, [r4, #0]
    b7fc:	0699      	lsls	r1, r3, #26
    b7fe:	bf42      	ittt	mi
    b800:	f8d9 3000 	ldrmi.w	r3, [r9]
    b804:	3302      	addmi	r3, #2
    b806:	f8c9 3000 	strmi.w	r3, [r9]
    b80a:	6825      	ldr	r5, [r4, #0]
    b80c:	f015 0506 	ands.w	r5, r5, #6
    b810:	d107      	bne.n	b822 <_printf_common+0x52>
    b812:	f104 0a19 	add.w	sl, r4, #25
    b816:	68e3      	ldr	r3, [r4, #12]
    b818:	f8d9 2000 	ldr.w	r2, [r9]
    b81c:	1a9b      	subs	r3, r3, r2
    b81e:	429d      	cmp	r5, r3
    b820:	db29      	blt.n	b876 <_printf_common+0xa6>
    b822:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    b826:	6822      	ldr	r2, [r4, #0]
    b828:	3300      	adds	r3, #0
    b82a:	bf18      	it	ne
    b82c:	2301      	movne	r3, #1
    b82e:	0692      	lsls	r2, r2, #26
    b830:	d42e      	bmi.n	b890 <_printf_common+0xc0>
    b832:	f104 0243 	add.w	r2, r4, #67	; 0x43
    b836:	4639      	mov	r1, r7
    b838:	4630      	mov	r0, r6
    b83a:	47c0      	blx	r8
    b83c:	3001      	adds	r0, #1
    b83e:	d021      	beq.n	b884 <_printf_common+0xb4>
    b840:	6823      	ldr	r3, [r4, #0]
    b842:	68e5      	ldr	r5, [r4, #12]
    b844:	f8d9 2000 	ldr.w	r2, [r9]
    b848:	f003 0306 	and.w	r3, r3, #6
    b84c:	2b04      	cmp	r3, #4
    b84e:	bf08      	it	eq
    b850:	1aad      	subeq	r5, r5, r2
    b852:	68a3      	ldr	r3, [r4, #8]
    b854:	6922      	ldr	r2, [r4, #16]
    b856:	bf0c      	ite	eq
    b858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    b85c:	2500      	movne	r5, #0
    b85e:	4293      	cmp	r3, r2
    b860:	bfc4      	itt	gt
    b862:	1a9b      	subgt	r3, r3, r2
    b864:	18ed      	addgt	r5, r5, r3
    b866:	f04f 0900 	mov.w	r9, #0
    b86a:	341a      	adds	r4, #26
    b86c:	454d      	cmp	r5, r9
    b86e:	d11b      	bne.n	b8a8 <_printf_common+0xd8>
    b870:	2000      	movs	r0, #0
    b872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b876:	2301      	movs	r3, #1
    b878:	4652      	mov	r2, sl
    b87a:	4639      	mov	r1, r7
    b87c:	4630      	mov	r0, r6
    b87e:	47c0      	blx	r8
    b880:	3001      	adds	r0, #1
    b882:	d103      	bne.n	b88c <_printf_common+0xbc>
    b884:	f04f 30ff 	mov.w	r0, #4294967295
    b888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b88c:	3501      	adds	r5, #1
    b88e:	e7c2      	b.n	b816 <_printf_common+0x46>
    b890:	18e1      	adds	r1, r4, r3
    b892:	1c5a      	adds	r2, r3, #1
    b894:	2030      	movs	r0, #48	; 0x30
    b896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    b89a:	4422      	add	r2, r4
    b89c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    b8a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    b8a4:	3302      	adds	r3, #2
    b8a6:	e7c4      	b.n	b832 <_printf_common+0x62>
    b8a8:	2301      	movs	r3, #1
    b8aa:	4622      	mov	r2, r4
    b8ac:	4639      	mov	r1, r7
    b8ae:	4630      	mov	r0, r6
    b8b0:	47c0      	blx	r8
    b8b2:	3001      	adds	r0, #1
    b8b4:	d0e6      	beq.n	b884 <_printf_common+0xb4>
    b8b6:	f109 0901 	add.w	r9, r9, #1
    b8ba:	e7d7      	b.n	b86c <_printf_common+0x9c>

0000b8bc <_printf_i>:
    b8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b8c0:	4617      	mov	r7, r2
    b8c2:	7e0a      	ldrb	r2, [r1, #24]
    b8c4:	b085      	sub	sp, #20
    b8c6:	2a6e      	cmp	r2, #110	; 0x6e
    b8c8:	4698      	mov	r8, r3
    b8ca:	4606      	mov	r6, r0
    b8cc:	460c      	mov	r4, r1
    b8ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b8d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    b8d4:	f000 80bc 	beq.w	ba50 <_printf_i+0x194>
    b8d8:	d81a      	bhi.n	b910 <_printf_i+0x54>
    b8da:	2a63      	cmp	r2, #99	; 0x63
    b8dc:	d02e      	beq.n	b93c <_printf_i+0x80>
    b8de:	d80a      	bhi.n	b8f6 <_printf_i+0x3a>
    b8e0:	2a00      	cmp	r2, #0
    b8e2:	f000 80c8 	beq.w	ba76 <_printf_i+0x1ba>
    b8e6:	2a58      	cmp	r2, #88	; 0x58
    b8e8:	f000 808a 	beq.w	ba00 <_printf_i+0x144>
    b8ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
    b8f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    b8f4:	e02a      	b.n	b94c <_printf_i+0x90>
    b8f6:	2a64      	cmp	r2, #100	; 0x64
    b8f8:	d001      	beq.n	b8fe <_printf_i+0x42>
    b8fa:	2a69      	cmp	r2, #105	; 0x69
    b8fc:	d1f6      	bne.n	b8ec <_printf_i+0x30>
    b8fe:	6821      	ldr	r1, [r4, #0]
    b900:	681a      	ldr	r2, [r3, #0]
    b902:	f011 0f80 	tst.w	r1, #128	; 0x80
    b906:	d023      	beq.n	b950 <_printf_i+0x94>
    b908:	1d11      	adds	r1, r2, #4
    b90a:	6019      	str	r1, [r3, #0]
    b90c:	6813      	ldr	r3, [r2, #0]
    b90e:	e027      	b.n	b960 <_printf_i+0xa4>
    b910:	2a73      	cmp	r2, #115	; 0x73
    b912:	f000 80b4 	beq.w	ba7e <_printf_i+0x1c2>
    b916:	d808      	bhi.n	b92a <_printf_i+0x6e>
    b918:	2a6f      	cmp	r2, #111	; 0x6f
    b91a:	d02a      	beq.n	b972 <_printf_i+0xb6>
    b91c:	2a70      	cmp	r2, #112	; 0x70
    b91e:	d1e5      	bne.n	b8ec <_printf_i+0x30>
    b920:	680a      	ldr	r2, [r1, #0]
    b922:	f042 0220 	orr.w	r2, r2, #32
    b926:	600a      	str	r2, [r1, #0]
    b928:	e003      	b.n	b932 <_printf_i+0x76>
    b92a:	2a75      	cmp	r2, #117	; 0x75
    b92c:	d021      	beq.n	b972 <_printf_i+0xb6>
    b92e:	2a78      	cmp	r2, #120	; 0x78
    b930:	d1dc      	bne.n	b8ec <_printf_i+0x30>
    b932:	2278      	movs	r2, #120	; 0x78
    b934:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    b938:	496e      	ldr	r1, [pc, #440]	; (baf4 <_printf_i+0x238>)
    b93a:	e064      	b.n	ba06 <_printf_i+0x14a>
    b93c:	681a      	ldr	r2, [r3, #0]
    b93e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    b942:	1d11      	adds	r1, r2, #4
    b944:	6019      	str	r1, [r3, #0]
    b946:	6813      	ldr	r3, [r2, #0]
    b948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    b94c:	2301      	movs	r3, #1
    b94e:	e0a3      	b.n	ba98 <_printf_i+0x1dc>
    b950:	f011 0f40 	tst.w	r1, #64	; 0x40
    b954:	f102 0104 	add.w	r1, r2, #4
    b958:	6019      	str	r1, [r3, #0]
    b95a:	d0d7      	beq.n	b90c <_printf_i+0x50>
    b95c:	f9b2 3000 	ldrsh.w	r3, [r2]
    b960:	2b00      	cmp	r3, #0
    b962:	da03      	bge.n	b96c <_printf_i+0xb0>
    b964:	222d      	movs	r2, #45	; 0x2d
    b966:	425b      	negs	r3, r3
    b968:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    b96c:	4962      	ldr	r1, [pc, #392]	; (baf8 <_printf_i+0x23c>)
    b96e:	220a      	movs	r2, #10
    b970:	e017      	b.n	b9a2 <_printf_i+0xe6>
    b972:	6820      	ldr	r0, [r4, #0]
    b974:	6819      	ldr	r1, [r3, #0]
    b976:	f010 0f80 	tst.w	r0, #128	; 0x80
    b97a:	d003      	beq.n	b984 <_printf_i+0xc8>
    b97c:	1d08      	adds	r0, r1, #4
    b97e:	6018      	str	r0, [r3, #0]
    b980:	680b      	ldr	r3, [r1, #0]
    b982:	e006      	b.n	b992 <_printf_i+0xd6>
    b984:	f010 0f40 	tst.w	r0, #64	; 0x40
    b988:	f101 0004 	add.w	r0, r1, #4
    b98c:	6018      	str	r0, [r3, #0]
    b98e:	d0f7      	beq.n	b980 <_printf_i+0xc4>
    b990:	880b      	ldrh	r3, [r1, #0]
    b992:	4959      	ldr	r1, [pc, #356]	; (baf8 <_printf_i+0x23c>)
    b994:	2a6f      	cmp	r2, #111	; 0x6f
    b996:	bf14      	ite	ne
    b998:	220a      	movne	r2, #10
    b99a:	2208      	moveq	r2, #8
    b99c:	2000      	movs	r0, #0
    b99e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    b9a2:	6865      	ldr	r5, [r4, #4]
    b9a4:	60a5      	str	r5, [r4, #8]
    b9a6:	2d00      	cmp	r5, #0
    b9a8:	f2c0 809c 	blt.w	bae4 <_printf_i+0x228>
    b9ac:	6820      	ldr	r0, [r4, #0]
    b9ae:	f020 0004 	bic.w	r0, r0, #4
    b9b2:	6020      	str	r0, [r4, #0]
    b9b4:	2b00      	cmp	r3, #0
    b9b6:	d13f      	bne.n	ba38 <_printf_i+0x17c>
    b9b8:	2d00      	cmp	r5, #0
    b9ba:	f040 8095 	bne.w	bae8 <_printf_i+0x22c>
    b9be:	4675      	mov	r5, lr
    b9c0:	2a08      	cmp	r2, #8
    b9c2:	d10b      	bne.n	b9dc <_printf_i+0x120>
    b9c4:	6823      	ldr	r3, [r4, #0]
    b9c6:	07da      	lsls	r2, r3, #31
    b9c8:	d508      	bpl.n	b9dc <_printf_i+0x120>
    b9ca:	6923      	ldr	r3, [r4, #16]
    b9cc:	6862      	ldr	r2, [r4, #4]
    b9ce:	429a      	cmp	r2, r3
    b9d0:	bfde      	ittt	le
    b9d2:	2330      	movle	r3, #48	; 0x30
    b9d4:	f805 3c01 	strble.w	r3, [r5, #-1]
    b9d8:	f105 35ff 	addle.w	r5, r5, #4294967295
    b9dc:	ebae 0305 	sub.w	r3, lr, r5
    b9e0:	6123      	str	r3, [r4, #16]
    b9e2:	f8cd 8000 	str.w	r8, [sp]
    b9e6:	463b      	mov	r3, r7
    b9e8:	aa03      	add	r2, sp, #12
    b9ea:	4621      	mov	r1, r4
    b9ec:	4630      	mov	r0, r6
    b9ee:	f7ff feef 	bl	b7d0 <_printf_common>
    b9f2:	3001      	adds	r0, #1
    b9f4:	d155      	bne.n	baa2 <_printf_i+0x1e6>
    b9f6:	f04f 30ff 	mov.w	r0, #4294967295
    b9fa:	b005      	add	sp, #20
    b9fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ba00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    ba04:	493c      	ldr	r1, [pc, #240]	; (baf8 <_printf_i+0x23c>)
    ba06:	6822      	ldr	r2, [r4, #0]
    ba08:	6818      	ldr	r0, [r3, #0]
    ba0a:	f012 0f80 	tst.w	r2, #128	; 0x80
    ba0e:	f100 0504 	add.w	r5, r0, #4
    ba12:	601d      	str	r5, [r3, #0]
    ba14:	d001      	beq.n	ba1a <_printf_i+0x15e>
    ba16:	6803      	ldr	r3, [r0, #0]
    ba18:	e002      	b.n	ba20 <_printf_i+0x164>
    ba1a:	0655      	lsls	r5, r2, #25
    ba1c:	d5fb      	bpl.n	ba16 <_printf_i+0x15a>
    ba1e:	8803      	ldrh	r3, [r0, #0]
    ba20:	07d0      	lsls	r0, r2, #31
    ba22:	bf44      	itt	mi
    ba24:	f042 0220 	orrmi.w	r2, r2, #32
    ba28:	6022      	strmi	r2, [r4, #0]
    ba2a:	b91b      	cbnz	r3, ba34 <_printf_i+0x178>
    ba2c:	6822      	ldr	r2, [r4, #0]
    ba2e:	f022 0220 	bic.w	r2, r2, #32
    ba32:	6022      	str	r2, [r4, #0]
    ba34:	2210      	movs	r2, #16
    ba36:	e7b1      	b.n	b99c <_printf_i+0xe0>
    ba38:	4675      	mov	r5, lr
    ba3a:	fbb3 f0f2 	udiv	r0, r3, r2
    ba3e:	fb02 3310 	mls	r3, r2, r0, r3
    ba42:	5ccb      	ldrb	r3, [r1, r3]
    ba44:	f805 3d01 	strb.w	r3, [r5, #-1]!
    ba48:	4603      	mov	r3, r0
    ba4a:	2800      	cmp	r0, #0
    ba4c:	d1f5      	bne.n	ba3a <_printf_i+0x17e>
    ba4e:	e7b7      	b.n	b9c0 <_printf_i+0x104>
    ba50:	6808      	ldr	r0, [r1, #0]
    ba52:	681a      	ldr	r2, [r3, #0]
    ba54:	6949      	ldr	r1, [r1, #20]
    ba56:	f010 0f80 	tst.w	r0, #128	; 0x80
    ba5a:	d004      	beq.n	ba66 <_printf_i+0x1aa>
    ba5c:	1d10      	adds	r0, r2, #4
    ba5e:	6018      	str	r0, [r3, #0]
    ba60:	6813      	ldr	r3, [r2, #0]
    ba62:	6019      	str	r1, [r3, #0]
    ba64:	e007      	b.n	ba76 <_printf_i+0x1ba>
    ba66:	f010 0f40 	tst.w	r0, #64	; 0x40
    ba6a:	f102 0004 	add.w	r0, r2, #4
    ba6e:	6018      	str	r0, [r3, #0]
    ba70:	6813      	ldr	r3, [r2, #0]
    ba72:	d0f6      	beq.n	ba62 <_printf_i+0x1a6>
    ba74:	8019      	strh	r1, [r3, #0]
    ba76:	2300      	movs	r3, #0
    ba78:	6123      	str	r3, [r4, #16]
    ba7a:	4675      	mov	r5, lr
    ba7c:	e7b1      	b.n	b9e2 <_printf_i+0x126>
    ba7e:	681a      	ldr	r2, [r3, #0]
    ba80:	1d11      	adds	r1, r2, #4
    ba82:	6019      	str	r1, [r3, #0]
    ba84:	6815      	ldr	r5, [r2, #0]
    ba86:	6862      	ldr	r2, [r4, #4]
    ba88:	2100      	movs	r1, #0
    ba8a:	4628      	mov	r0, r5
    ba8c:	f000 f838 	bl	bb00 <memchr>
    ba90:	b108      	cbz	r0, ba96 <_printf_i+0x1da>
    ba92:	1b40      	subs	r0, r0, r5
    ba94:	6060      	str	r0, [r4, #4]
    ba96:	6863      	ldr	r3, [r4, #4]
    ba98:	6123      	str	r3, [r4, #16]
    ba9a:	2300      	movs	r3, #0
    ba9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    baa0:	e79f      	b.n	b9e2 <_printf_i+0x126>
    baa2:	6923      	ldr	r3, [r4, #16]
    baa4:	462a      	mov	r2, r5
    baa6:	4639      	mov	r1, r7
    baa8:	4630      	mov	r0, r6
    baaa:	47c0      	blx	r8
    baac:	3001      	adds	r0, #1
    baae:	d0a2      	beq.n	b9f6 <_printf_i+0x13a>
    bab0:	6823      	ldr	r3, [r4, #0]
    bab2:	079b      	lsls	r3, r3, #30
    bab4:	d507      	bpl.n	bac6 <_printf_i+0x20a>
    bab6:	2500      	movs	r5, #0
    bab8:	f104 0919 	add.w	r9, r4, #25
    babc:	68e3      	ldr	r3, [r4, #12]
    babe:	9a03      	ldr	r2, [sp, #12]
    bac0:	1a9b      	subs	r3, r3, r2
    bac2:	429d      	cmp	r5, r3
    bac4:	db05      	blt.n	bad2 <_printf_i+0x216>
    bac6:	68e0      	ldr	r0, [r4, #12]
    bac8:	9b03      	ldr	r3, [sp, #12]
    baca:	4298      	cmp	r0, r3
    bacc:	bfb8      	it	lt
    bace:	4618      	movlt	r0, r3
    bad0:	e793      	b.n	b9fa <_printf_i+0x13e>
    bad2:	2301      	movs	r3, #1
    bad4:	464a      	mov	r2, r9
    bad6:	4639      	mov	r1, r7
    bad8:	4630      	mov	r0, r6
    bada:	47c0      	blx	r8
    badc:	3001      	adds	r0, #1
    bade:	d08a      	beq.n	b9f6 <_printf_i+0x13a>
    bae0:	3501      	adds	r5, #1
    bae2:	e7eb      	b.n	babc <_printf_i+0x200>
    bae4:	2b00      	cmp	r3, #0
    bae6:	d1a7      	bne.n	ba38 <_printf_i+0x17c>
    bae8:	780b      	ldrb	r3, [r1, #0]
    baea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    baee:	f104 0542 	add.w	r5, r4, #66	; 0x42
    baf2:	e765      	b.n	b9c0 <_printf_i+0x104>
    baf4:	0000c42e 	.word	0x0000c42e
    baf8:	0000c41d 	.word	0x0000c41d
    bafc:	00000000 	.word	0x00000000

0000bb00 <memchr>:
    bb00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bb04:	2a10      	cmp	r2, #16
    bb06:	db2b      	blt.n	bb60 <memchr+0x60>
    bb08:	f010 0f07 	tst.w	r0, #7
    bb0c:	d008      	beq.n	bb20 <memchr+0x20>
    bb0e:	f810 3b01 	ldrb.w	r3, [r0], #1
    bb12:	3a01      	subs	r2, #1
    bb14:	428b      	cmp	r3, r1
    bb16:	d02d      	beq.n	bb74 <memchr+0x74>
    bb18:	f010 0f07 	tst.w	r0, #7
    bb1c:	b342      	cbz	r2, bb70 <memchr+0x70>
    bb1e:	d1f6      	bne.n	bb0e <memchr+0xe>
    bb20:	b4f0      	push	{r4, r5, r6, r7}
    bb22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    bb26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    bb2a:	f022 0407 	bic.w	r4, r2, #7
    bb2e:	f07f 0700 	mvns.w	r7, #0
    bb32:	2300      	movs	r3, #0
    bb34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    bb38:	3c08      	subs	r4, #8
    bb3a:	ea85 0501 	eor.w	r5, r5, r1
    bb3e:	ea86 0601 	eor.w	r6, r6, r1
    bb42:	fa85 f547 	uadd8	r5, r5, r7
    bb46:	faa3 f587 	sel	r5, r3, r7
    bb4a:	fa86 f647 	uadd8	r6, r6, r7
    bb4e:	faa5 f687 	sel	r6, r5, r7
    bb52:	b98e      	cbnz	r6, bb78 <memchr+0x78>
    bb54:	d1ee      	bne.n	bb34 <memchr+0x34>
    bb56:	bcf0      	pop	{r4, r5, r6, r7}
    bb58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bb5c:	f002 0207 	and.w	r2, r2, #7
    bb60:	b132      	cbz	r2, bb70 <memchr+0x70>
    bb62:	f810 3b01 	ldrb.w	r3, [r0], #1
    bb66:	3a01      	subs	r2, #1
    bb68:	ea83 0301 	eor.w	r3, r3, r1
    bb6c:	b113      	cbz	r3, bb74 <memchr+0x74>
    bb6e:	d1f8      	bne.n	bb62 <memchr+0x62>
    bb70:	2000      	movs	r0, #0
    bb72:	4770      	bx	lr
    bb74:	3801      	subs	r0, #1
    bb76:	4770      	bx	lr
    bb78:	2d00      	cmp	r5, #0
    bb7a:	bf06      	itte	eq
    bb7c:	4635      	moveq	r5, r6
    bb7e:	3803      	subeq	r0, #3
    bb80:	3807      	subne	r0, #7
    bb82:	f015 0f01 	tst.w	r5, #1
    bb86:	d107      	bne.n	bb98 <memchr+0x98>
    bb88:	3001      	adds	r0, #1
    bb8a:	f415 7f80 	tst.w	r5, #256	; 0x100
    bb8e:	bf02      	ittt	eq
    bb90:	3001      	addeq	r0, #1
    bb92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    bb96:	3001      	addeq	r0, #1
    bb98:	bcf0      	pop	{r4, r5, r6, r7}
    bb9a:	3801      	subs	r0, #1
    bb9c:	4770      	bx	lr
    bb9e:	bf00      	nop

0000bba0 <memmove>:
    bba0:	4288      	cmp	r0, r1
    bba2:	b510      	push	{r4, lr}
    bba4:	eb01 0302 	add.w	r3, r1, r2
    bba8:	d803      	bhi.n	bbb2 <memmove+0x12>
    bbaa:	1e42      	subs	r2, r0, #1
    bbac:	4299      	cmp	r1, r3
    bbae:	d10c      	bne.n	bbca <memmove+0x2a>
    bbb0:	bd10      	pop	{r4, pc}
    bbb2:	4298      	cmp	r0, r3
    bbb4:	d2f9      	bcs.n	bbaa <memmove+0xa>
    bbb6:	1881      	adds	r1, r0, r2
    bbb8:	1ad2      	subs	r2, r2, r3
    bbba:	42d3      	cmn	r3, r2
    bbbc:	d100      	bne.n	bbc0 <memmove+0x20>
    bbbe:	bd10      	pop	{r4, pc}
    bbc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    bbc4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    bbc8:	e7f7      	b.n	bbba <memmove+0x1a>
    bbca:	f811 4b01 	ldrb.w	r4, [r1], #1
    bbce:	f802 4f01 	strb.w	r4, [r2, #1]!
    bbd2:	e7eb      	b.n	bbac <memmove+0xc>

0000bbd4 <_realloc_r>:
    bbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbd6:	4607      	mov	r7, r0
    bbd8:	4614      	mov	r4, r2
    bbda:	460e      	mov	r6, r1
    bbdc:	b921      	cbnz	r1, bbe8 <_realloc_r+0x14>
    bbde:	4611      	mov	r1, r2
    bbe0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bbe4:	f7ff bbce 	b.w	b384 <_malloc_r>
    bbe8:	b922      	cbnz	r2, bbf4 <_realloc_r+0x20>
    bbea:	f7ff fb7d 	bl	b2e8 <_free_r>
    bbee:	4625      	mov	r5, r4
    bbf0:	4628      	mov	r0, r5
    bbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bbf4:	f000 f814 	bl	bc20 <_malloc_usable_size_r>
    bbf8:	4284      	cmp	r4, r0
    bbfa:	d90f      	bls.n	bc1c <_realloc_r+0x48>
    bbfc:	4621      	mov	r1, r4
    bbfe:	4638      	mov	r0, r7
    bc00:	f7ff fbc0 	bl	b384 <_malloc_r>
    bc04:	4605      	mov	r5, r0
    bc06:	2800      	cmp	r0, #0
    bc08:	d0f2      	beq.n	bbf0 <_realloc_r+0x1c>
    bc0a:	4631      	mov	r1, r6
    bc0c:	4622      	mov	r2, r4
    bc0e:	f7ff fb57 	bl	b2c0 <memcpy>
    bc12:	4631      	mov	r1, r6
    bc14:	4638      	mov	r0, r7
    bc16:	f7ff fb67 	bl	b2e8 <_free_r>
    bc1a:	e7e9      	b.n	bbf0 <_realloc_r+0x1c>
    bc1c:	4635      	mov	r5, r6
    bc1e:	e7e7      	b.n	bbf0 <_realloc_r+0x1c>

0000bc20 <_malloc_usable_size_r>:
    bc20:	f851 0c04 	ldr.w	r0, [r1, #-4]
    bc24:	2800      	cmp	r0, #0
    bc26:	f1a0 0004 	sub.w	r0, r0, #4
    bc2a:	bfbc      	itt	lt
    bc2c:	580b      	ldrlt	r3, [r1, r0]
    bc2e:	18c0      	addlt	r0, r0, r3
    bc30:	4770      	bx	lr
    bc32:	0000      	movs	r0, r0
    bc34:	682f2e2e 	.word	0x682f2e2e
    bc38:	692f6c61 	.word	0x692f6c61
    bc3c:	756c636e 	.word	0x756c636e
    bc40:	682f6564 	.word	0x682f6564
    bc44:	775f6c61 	.word	0x775f6c61
    bc48:	682e7464 	.word	0x682e7464
    bc4c:	00000000 	.word	0x00000000
    bc50:	4952475b 	.word	0x4952475b
    bc54:	25205d44 	.word	0x25205d44
    bc58:	25206433 	.word	0x25206433
    bc5c:	25206434 	.word	0x25206434
    bc60:	25206434 	.word	0x25206434
    bc64:	4d5b2064 	.word	0x4d5b2064
    bc68:	5d494449 	.word	0x5d494449
    bc6c:	3a684320 	.word	0x3a684320
    bc70:	20642520 	.word	0x20642520
    bc74:	646d4320 	.word	0x646d4320
    bc78:	6425203a 	.word	0x6425203a
    bc7c:	61502020 	.word	0x61502020
    bc80:	316d6172 	.word	0x316d6172
    bc84:	6425203a 	.word	0x6425203a
    bc88:	61502020 	.word	0x61502020
    bc8c:	326d6172 	.word	0x326d6172
    bc90:	6425203a 	.word	0x6425203a
    bc94:	0000000a 	.word	0x0000000a
    bc98:	4952475b 	.word	0x4952475b
    bc9c:	25205d44 	.word	0x25205d44
    bca0:	25206433 	.word	0x25206433
    bca4:	25206434 	.word	0x25206434
    bca8:	25206434 	.word	0x25206434
    bcac:	4b5b2064 	.word	0x4b5b2064
    bcb0:	4f425945 	.word	0x4f425945
    bcb4:	5d445241 	.word	0x5d445241
    bcb8:	79654b20 	.word	0x79654b20
    bcbc:	6425203a 	.word	0x6425203a
    bcc0:	646f4d20 	.word	0x646f4d20
    bcc4:	6425203a 	.word	0x6425203a
    bcc8:	646d4320 	.word	0x646d4320
    bccc:	6425203a 	.word	0x6425203a
    bcd0:	4357480a 	.word	0x4357480a
    bcd4:	203a4746 	.word	0x203a4746
    bcd8:	78383025 	.word	0x78383025
    bcdc:	0000000a 	.word	0x0000000a
    bce0:	4b4e555b 	.word	0x4b4e555b
    bce4:	4e574f4e 	.word	0x4e574f4e
    bce8:	3e2d205d 	.word	0x3e2d205d
    bcec:	6f725020 	.word	0x6f725020
    bcf0:	6f636f74 	.word	0x6f636f74
    bcf4:	25203a6c 	.word	0x25203a6c
    bcf8:	00000a64 	.word	0x00000a64
    bcfc:	30256325 	.word	0x30256325
    bd00:	30257832 	.word	0x30257832
    bd04:	30257832 	.word	0x30257832
    bd08:	30257832 	.word	0x30257832
    bd0c:	63257832 	.word	0x63257832
    bd10:	00000000 	.word	0x00000000
    bd14:	00003030 	.word	0x00003030
    bd18:	30256325 	.word	0x30256325
    bd1c:	30257832 	.word	0x30257832
    bd20:	30257832 	.word	0x30257832
    bd24:	30257832 	.word	0x30257832
    bd28:	30257832 	.word	0x30257832
    bd2c:	63257832 	.word	0x63257832
    bd30:	30256325 	.word	0x30256325
    bd34:	30257832 	.word	0x30257832
    bd38:	30257832 	.word	0x30257832
    bd3c:	30257832 	.word	0x30257832
    bd40:	30257832 	.word	0x30257832
    bd44:	63257832 	.word	0x63257832
    bd48:	00000000 	.word	0x00000000
    bd4c:	30256325 	.word	0x30256325
    bd50:	30257832 	.word	0x30257832
    bd54:	30257832 	.word	0x30257832
    bd58:	30257832 	.word	0x30257832
    bd5c:	63257832 	.word	0x63257832
    bd60:	00000025 	.word	0x00000025
    bd64:	78383025 	.word	0x78383025
    bd68:	00000000 	.word	0x00000000
    bd6c:	63256325 	.word	0x63256325
    bd70:	78323025 	.word	0x78323025
    bd74:	78323025 	.word	0x78323025
    bd78:	78323025 	.word	0x78323025
    bd7c:	78323025 	.word	0x78323025
    bd80:	78323025 	.word	0x78323025
    bd84:	00006325 	.word	0x00006325
    bd88:	78323025 	.word	0x78323025
    bd8c:	00000000 	.word	0x00000000
    bd90:	000a3030 	.word	0x000a3030
    bd94:	682f2e2e 	.word	0x682f2e2e
    bd98:	732f6c61 	.word	0x732f6c61
    bd9c:	682f6372 	.word	0x682f6372
    bda0:	615f6c61 	.word	0x615f6c61
    bda4:	615f6364 	.word	0x615f6364
    bda8:	636e7973 	.word	0x636e7973
    bdac:	0000632e 	.word	0x0000632e
    bdb0:	682f2e2e 	.word	0x682f2e2e
    bdb4:	732f6c61 	.word	0x732f6c61
    bdb8:	682f6372 	.word	0x682f6372
    bdbc:	635f6c61 	.word	0x635f6c61
    bdc0:	735f6372 	.word	0x735f6372
    bdc4:	2e636e79 	.word	0x2e636e79
    bdc8:	00000063 	.word	0x00000063
    bdcc:	682f2e2e 	.word	0x682f2e2e
    bdd0:	732f6c61 	.word	0x732f6c61
    bdd4:	682f6372 	.word	0x682f6372
    bdd8:	665f6c61 	.word	0x665f6c61
    bddc:	6873616c 	.word	0x6873616c
    bde0:	0000632e 	.word	0x0000632e
    bde4:	682f2e2e 	.word	0x682f2e2e
    bde8:	732f6c61 	.word	0x732f6c61
    bdec:	682f6372 	.word	0x682f6372
    bdf0:	695f6c61 	.word	0x695f6c61
    bdf4:	6d5f6332 	.word	0x6d5f6332
    bdf8:	7973615f 	.word	0x7973615f
    bdfc:	632e636e 	.word	0x632e636e
    be00:	00000000 	.word	0x00000000
    be04:	682f2e2e 	.word	0x682f2e2e
    be08:	732f6c61 	.word	0x732f6c61
    be0c:	682f6372 	.word	0x682f6372
    be10:	695f6c61 	.word	0x695f6c61
    be14:	00632e6f 	.word	0x00632e6f
    be18:	682f2e2e 	.word	0x682f2e2e
    be1c:	732f6c61 	.word	0x732f6c61
    be20:	682f6372 	.word	0x682f6372
    be24:	735f6c61 	.word	0x735f6c61
    be28:	6d5f6970 	.word	0x6d5f6970
    be2c:	7973615f 	.word	0x7973615f
    be30:	632e636e 	.word	0x632e636e
    be34:	00000000 	.word	0x00000000
    be38:	682f2e2e 	.word	0x682f2e2e
    be3c:	732f6c61 	.word	0x732f6c61
    be40:	682f6372 	.word	0x682f6372
    be44:	735f6c61 	.word	0x735f6c61
    be48:	6d5f6970 	.word	0x6d5f6970
    be4c:	616d645f 	.word	0x616d645f
    be50:	0000632e 	.word	0x0000632e
    be54:	682f2e2e 	.word	0x682f2e2e
    be58:	732f6c61 	.word	0x732f6c61
    be5c:	682f6372 	.word	0x682f6372
    be60:	745f6c61 	.word	0x745f6c61
    be64:	72656d69 	.word	0x72656d69
    be68:	0000632e 	.word	0x0000632e
    be6c:	682f2e2e 	.word	0x682f2e2e
    be70:	732f6c61 	.word	0x732f6c61
    be74:	682f6372 	.word	0x682f6372
    be78:	755f6c61 	.word	0x755f6c61
    be7c:	74726173 	.word	0x74726173
    be80:	7973615f 	.word	0x7973615f
    be84:	632e636e 	.word	0x632e636e
    be88:	00000000 	.word	0x00000000
    be8c:	682f2e2e 	.word	0x682f2e2e
    be90:	752f6c61 	.word	0x752f6c61
    be94:	736c6974 	.word	0x736c6974
    be98:	6372732f 	.word	0x6372732f
    be9c:	6974752f 	.word	0x6974752f
    bea0:	6c5f736c 	.word	0x6c5f736c
    bea4:	2e747369 	.word	0x2e747369
    bea8:	00000063 	.word	0x00000063
    beac:	682f2e2e 	.word	0x682f2e2e
    beb0:	752f6c61 	.word	0x752f6c61
    beb4:	736c6974 	.word	0x736c6974
    beb8:	6372732f 	.word	0x6372732f
    bebc:	6974752f 	.word	0x6974752f
    bec0:	725f736c 	.word	0x725f736c
    bec4:	62676e69 	.word	0x62676e69
    bec8:	65666675 	.word	0x65666675
    becc:	00632e72 	.word	0x00632e72

0000bed0 <_adcs>:
    bed0:	01000000 0003000c 00041807 00000000     ................
    bee0:	0014080b 00010000 000c0100 18040003     ................
    bef0:	00000004 080b0000 00000014 682f2e2e     ............../h
    bf00:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    bf10:	00000000                                ....

0000bf14 <_cfgs>:
    bf14:	00200600 08068000 00200400 08068000     .. ....... .....
    bf24:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    bf44:	00200b00 14000003 00200a00 08000002     .. ....... .....
    bf54:	00201300 14000003 00000000 00000000     .. .............
	...

0000c014 <user_mux_confs>:
	...
    c040:	04030201 04030201 00000000 00000000     ................
	...

0000c058 <channel_confs>:
    c058:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000c098 <interrupt_cfg>:
    c098:	00000002 00000002 00000002 00000002     ................
	...
    c118:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    c128:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    c138:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    c148:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    c158:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    c168:	43000800 43000c00                       ...C...C

0000c170 <_usarts>:
    c170:	00000000 40100004 00030000 00700002     .......@......p.
    c180:	0000aaaa 00000000 00000001 40100004     ...............@
    c190:	00030000 00700002 0000aaaa 00000000     ......p.........
    c1a0:	00000002 40100004 00030000 00700002     .......@......p.
    c1b0:	0000f62b 00000000 00000004 40100004     +..............@
    c1c0:	00030000 00700002 0000aaaa 00000000     ......p.........
    c1d0:	00000006 40100004 00030000 00700002     .......@......p.
    c1e0:	0000aaaa 00000000                       ........

0000c1e8 <_i2cms>:
    c1e8:	00000005 00200014 00000100 0000e6e5     ...... .........
    c1f8:	00d70000 02dc6c00                       .....l..

0000c200 <sercomspi_regs>:
    c200:	3020000c 00020000 00000000 01ff0005     .. 0............
    c210:	20000c03 00000000 00000000 ff000600     ... ............
    c220:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    c230:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    c240:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    c250:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000c260 <_tcs>:
    c260:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    c270:	00000000 006c0001 00000308 00000021     ......l.....!...
    c280:	00003a98 00000000 006d0002 00000308     .:........m.....
    c290:	00000021 00003a98 00000000 006e0003     !....:........n.
    c2a0:	00000308 00000021 00003a98 00000000     ....!....:......
    c2b0:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    c2c0:	0000632e                                .c..

0000c2c4 <_usb_ep_cfgs>:
    c2c4:	20000d3c 00000000 00000040 00000000     <.. ....@.......
	...
    c2dc:	20000d34 00000000 00000008 20000cf4     4.. ........... 
    c2ec:	20000cec 00080040 00000000 00000000     ... @...........
	...
    c304:	20000cac 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    c314:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....

0000c324 <keyboard_report_desc>:
    c324:	06090105 070501a1 e729e019 01250015     ..........)...%.
    c334:	08950175 01810281 65290019 65250015     u.........)e..%e
    c344:	06950875 08050081 05290119 01250015     u.........)...%.
    c354:	05950175 03950291 00c00191              u...........

0000c360 <mouse_report_desc>:
    c360:	02090105 010901a1 090500a1 03290119     ..............).
    c370:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    c380:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    c390:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    c3a0:	73752f65 2e636462 00000063              e/usbdc.c...

0000c3ac <__sf_fake_stderr>:
	...

0000c3cc <__sf_fake_stdin>:
	...

0000c3ec <__sf_fake_stdout>:
	...
    c40c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c41c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c42c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c43c:	00006665                                ef..

0000c440 <_init>:
    c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c442:	bf00      	nop
    c444:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c446:	bc08      	pop	{r3}
    c448:	469e      	mov	lr, r3
    c44a:	4770      	bx	lr

0000c44c <__init_array_start>:
    c44c:	00000289 	.word	0x00000289

0000c450 <_fini>:
    c450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c452:	bf00      	nop
    c454:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c456:	bc08      	pop	{r3}
    c458:	469e      	mov	lr, r3
    c45a:	4770      	bx	lr

0000c45c <__fini_array_start>:
    c45c:	00000265 	.word	0x00000265
