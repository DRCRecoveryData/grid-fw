
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c34c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000c34c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          000026d0  200005c0  0000c910  000205c0  2**4
                  ALLOC
  5 .stack        00010000  20002c90  0000efe0  000205c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0007ee4f  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a887  00000000  00000000  0009f492  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000297ee  00000000  00000000  000a9d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f88  00000000  00000000  000d3507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002e70  00000000  00000000  000d548f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00043409  00000000  00000000  000d82ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036c67  00000000  00000000  0011b708  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00118abc  00000000  00000000  0015236f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005a7c  00000000  00000000  0026ae2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 2c 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     .,. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	09 60 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .`..............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 d1 5c 00 00 e5 5c 00 00     .........\...\..
      bc:	09 5b 00 00 15 5b 00 00 21 5b 00 00 2d 5b 00 00     .[...[..![..-[..
      cc:	39 5b 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     9[..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	3d 5e 00 00 09 6a 00 00 1d 6a 00 00 31 6a 00 00     =^...j...j..1j..
     104:	45 6a 00 00 59 6a 00 00 6d 6a 00 00 81 6a 00 00     Ej..Yj..mj...j..
     114:	95 6a 00 00 a9 6a 00 00 bd 6a 00 00 d1 6a 00 00     .j...j...j...j..
     124:	e5 6a 00 00 f9 6a 00 00 0d 6b 00 00 21 6b 00 00     .j...j...k..!k..
     134:	35 6b 00 00 49 6b 00 00 5d 6b 00 00 71 6b 00 00     5k..Ik..]k..qk..
     144:	85 6b 00 00 99 6b 00 00 ad 6b 00 00 c1 6b 00 00     .k...k...k...k..
     154:	d5 6b 00 00 e9 6b 00 00 fd 6b 00 00 11 6c 00 00     .k...k...k...l..
     164:	25 6c 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     %l..............
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 f9 8a 00 00     ................
     184:	05 8b 00 00 11 8b 00 00 1d 8b 00 00 00 00 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 0d 78 00 00 21 78 00 00     .........x..!x..
     1f4:	35 78 00 00 49 78 00 00 e5 02 00 00 e5 02 00 00     5x..Ix..........
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 9d 57 00 00 b1 57 00 00 c5 57 00 00     .....W...W...W..
     224:	d9 57 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .W..............
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000c34c 	.word	0x0000c34c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000c34c 	.word	0x0000c34c
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000c34c 	.word	0x0000c34c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	
	

	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000c15 	.word	0x00000c15
     2e0:	0000a9ad 	.word	0x0000a9ad

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	0000c34c 	.word	0x0000c34c
     364:	200005bc 	.word	0x200005bc
     368:	20002c90 	.word	0x20002c90
     36c:	200005c0 	.word	0x200005c0
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	0000b18d 	.word	0x0000b18d
     37c:	00009125 	.word	0x00009125

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2241      	movs	r2, #65	; 0x41
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	200005dc 	.word	0x200005dc
     400:	20001008 	.word	0x20001008
     404:	20001100 	.word	0x20001100
     408:	43001c00 	.word	0x43001c00
     40c:	00003da5 	.word	0x00003da5
     410:	00003e49 	.word	0x00003e49
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2241      	movs	r2, #65	; 0x41
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	200005dc 	.word	0x200005dc
     4a4:	200011d8 	.word	0x200011d8
     4a8:	20000f60 	.word	0x20000f60
     4ac:	43002000 	.word	0x43002000
     4b0:	00003da5 	.word	0x00003da5
     4b4:	00003e49 	.word	0x00003e49
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	20000f5c 	.word	0x20000f5c
     4e0:	000040e5 	.word	0x000040e5

000004e4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4e4:	b508      	push	{r3, lr}
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <EVENT_SYSTEM_0_init+0x28>)
     4e8:	2240      	movs	r2, #64	; 0x40
     4ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4fa:	4a05      	ldr	r2, [pc, #20]	; (510 <EVENT_SYSTEM_0_init+0x2c>)
     4fc:	6993      	ldr	r3, [r2, #24]
     4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     502:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <EVENT_SYSTEM_0_init+0x30>)
     506:	4798      	blx	r3
     508:	bd08      	pop	{r3, pc}
     50a:	bf00      	nop
     50c:	40001c00 	.word	0x40001c00
     510:	40000800 	.word	0x40000800
     514:	00004169 	.word	0x00004169

00000518 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     518:	4a02      	ldr	r2, [pc, #8]	; (524 <FLASH_0_CLOCK_init+0xc>)
     51a:	6913      	ldr	r3, [r2, #16]
     51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     520:	6113      	str	r3, [r2, #16]
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800

00000528 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     528:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <FLASH_0_init+0x10>)
     52c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     52e:	4903      	ldr	r1, [pc, #12]	; (53c <FLASH_0_init+0x14>)
     530:	4803      	ldr	r0, [pc, #12]	; (540 <FLASH_0_init+0x18>)
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <FLASH_0_init+0x1c>)
     534:	4798      	blx	r3
     536:	bd08      	pop	{r3, pc}
     538:	00000519 	.word	0x00000519
     53c:	41004000 	.word	0x41004000
     540:	20000f40 	.word	0x20000f40
     544:	00004189 	.word	0x00004189

00000548 <USART_EAST_CLOCK_init>:
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <USART_EAST_CLOCK_init+0x1c>)
     54a:	2241      	movs	r2, #65	; 0x41
     54c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     550:	2242      	movs	r2, #66	; 0x42
     552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     556:	4a04      	ldr	r2, [pc, #16]	; (568 <USART_EAST_CLOCK_init+0x20>)
     558:	6953      	ldr	r3, [r2, #20]
     55a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     55e:	6153      	str	r3, [r2, #20]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	40001c00 	.word	0x40001c00
     568:	40000800 	.word	0x40000800

0000056c <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <USART_EAST_PORT_init+0x44>)
     56e:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     582:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     586:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     5ae:	4770      	bx	lr
     5b0:	41008000 	.word	0x41008000

000005b4 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <USART_EAST_init+0x20>)
     5ba:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     5bc:	2300      	movs	r3, #0
     5be:	9300      	str	r3, [sp, #0]
     5c0:	2310      	movs	r3, #16
     5c2:	4a05      	ldr	r2, [pc, #20]	; (5d8 <USART_EAST_init+0x24>)
     5c4:	4905      	ldr	r1, [pc, #20]	; (5dc <USART_EAST_init+0x28>)
     5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <USART_EAST_init+0x2c>)
     5c8:	4c06      	ldr	r4, [pc, #24]	; (5e4 <USART_EAST_init+0x30>)
     5ca:	47a0      	blx	r4
	USART_EAST_PORT_init();
     5cc:	4b06      	ldr	r3, [pc, #24]	; (5e8 <USART_EAST_init+0x34>)
     5ce:	4798      	blx	r3
}
     5d0:	b002      	add	sp, #8
     5d2:	bd10      	pop	{r4, pc}
     5d4:	00000549 	.word	0x00000549
     5d8:	20000604 	.word	0x20000604
     5dc:	40003000 	.word	0x40003000
     5e0:	20001034 	.word	0x20001034
     5e4:	00004b79 	.word	0x00004b79
     5e8:	0000056d 	.word	0x0000056d

000005ec <USART_NORTH_CLOCK_init>:
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <USART_NORTH_CLOCK_init+0x1c>)
     5ee:	2241      	movs	r2, #65	; 0x41
     5f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5f4:	2242      	movs	r2, #66	; 0x42
     5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5fa:	4a04      	ldr	r2, [pc, #16]	; (60c <USART_NORTH_CLOCK_init+0x20>)
     5fc:	6953      	ldr	r3, [r2, #20]
     5fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     602:	6153      	str	r3, [r2, #20]
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	40001c00 	.word	0x40001c00
     60c:	40000800 	.word	0x40000800

00000610 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <USART_NORTH_PORT_init+0x44>)
     612:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     626:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     642:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     646:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     64a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     652:	4770      	bx	lr
     654:	41008000 	.word	0x41008000

00000658 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     658:	b510      	push	{r4, lr}
     65a:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <USART_NORTH_init+0x20>)
     65e:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     660:	2300      	movs	r3, #0
     662:	9300      	str	r3, [sp, #0]
     664:	2310      	movs	r3, #16
     666:	4a05      	ldr	r2, [pc, #20]	; (67c <USART_NORTH_init+0x24>)
     668:	4905      	ldr	r1, [pc, #20]	; (680 <USART_NORTH_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <USART_NORTH_init+0x2c>)
     66c:	4c06      	ldr	r4, [pc, #24]	; (688 <USART_NORTH_init+0x30>)
     66e:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <USART_NORTH_init+0x34>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bd10      	pop	{r4, pc}
     678:	000005ed 	.word	0x000005ed
     67c:	20000614 	.word	0x20000614
     680:	40003400 	.word	0x40003400
     684:	20001084 	.word	0x20001084
     688:	00004b79 	.word	0x00004b79
     68c:	00000611 	.word	0x00000611

00000690 <GRID_AUX_CLOCK_init>:
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <GRID_AUX_CLOCK_init+0x1c>)
     692:	2241      	movs	r2, #65	; 0x41
     694:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     698:	2242      	movs	r2, #66	; 0x42
     69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <GRID_AUX_CLOCK_init+0x20>)
     6a0:	6993      	ldr	r3, [r2, #24]
     6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6a6:	6193      	str	r3, [r2, #24]
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800

000006b4 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	4b10      	ldr	r3, [pc, #64]	; (6f8 <GRID_AUX_PORT_init+0x44>)
     6b6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     6f6:	4770      	bx	lr
     6f8:	41008000 	.word	0x41008000

000006fc <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     6fc:	b510      	push	{r4, lr}
     6fe:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <GRID_AUX_init+0x20>)
     702:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     704:	2300      	movs	r3, #0
     706:	9300      	str	r3, [sp, #0]
     708:	2310      	movs	r3, #16
     70a:	4a05      	ldr	r2, [pc, #20]	; (720 <GRID_AUX_init+0x24>)
     70c:	4905      	ldr	r1, [pc, #20]	; (724 <GRID_AUX_init+0x28>)
     70e:	4806      	ldr	r0, [pc, #24]	; (728 <GRID_AUX_init+0x2c>)
     710:	4c06      	ldr	r4, [pc, #24]	; (72c <GRID_AUX_init+0x30>)
     712:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <GRID_AUX_init+0x34>)
     716:	4798      	blx	r3
}
     718:	b002      	add	sp, #8
     71a:	bd10      	pop	{r4, pc}
     71c:	00000691 	.word	0x00000691
     720:	20000624 	.word	0x20000624
     724:	41012000 	.word	0x41012000
     728:	20000fb8 	.word	0x20000fb8
     72c:	00004b79 	.word	0x00004b79
     730:	000006b5 	.word	0x000006b5

00000734 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     734:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <UI_SPI_PORT_init+0xb0>)
     736:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     73a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     746:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     74a:	4a27      	ldr	r2, [pc, #156]	; (7e8 <UI_SPI_PORT_init+0xb4>)
     74c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     750:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     758:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     768:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     780:	4a1a      	ldr	r2, [pc, #104]	; (7ec <UI_SPI_PORT_init+0xb8>)
     782:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     786:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     78a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     78e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     792:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     796:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     79e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7a6:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	4a11      	ldr	r2, [pc, #68]	; (7f0 <UI_SPI_PORT_init+0xbc>)
     7aa:	629a      	str	r2, [r3, #40]	; 0x28
     7ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     7b0:	3210      	adds	r2, #16
     7b2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7b4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     7b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7d0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7d8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	41008000 	.word	0x41008000
     7e8:	c0000010 	.word	0xc0000010
     7ec:	c0000020 	.word	0xc0000020
     7f0:	40020000 	.word	0x40020000

000007f4 <UI_SPI_CLOCK_init>:
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <UI_SPI_CLOCK_init+0x1c>)
     7f6:	2241      	movs	r2, #65	; 0x41
     7f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     7fc:	2243      	movs	r2, #67	; 0x43
     7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     802:	4a04      	ldr	r2, [pc, #16]	; (814 <UI_SPI_CLOCK_init+0x20>)
     804:	6993      	ldr	r3, [r2, #24]
     806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     80a:	6193      	str	r3, [r2, #24]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	40001c00 	.word	0x40001c00
     814:	40000800 	.word	0x40000800

00000818 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     818:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     81a:	4b04      	ldr	r3, [pc, #16]	; (82c <UI_SPI_init+0x14>)
     81c:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     81e:	4904      	ldr	r1, [pc, #16]	; (830 <UI_SPI_init+0x18>)
     820:	4804      	ldr	r0, [pc, #16]	; (834 <UI_SPI_init+0x1c>)
     822:	4b05      	ldr	r3, [pc, #20]	; (838 <UI_SPI_init+0x20>)
     824:	4798      	blx	r3
	UI_SPI_PORT_init();
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <UI_SPI_init+0x24>)
     828:	4798      	blx	r3
     82a:	bd08      	pop	{r3, pc}
     82c:	000007f5 	.word	0x000007f5
     830:	41014000 	.word	0x41014000
     834:	20000eb8 	.word	0x20000eb8
     838:	000044c5 	.word	0x000044c5
     83c:	00000735 	.word	0x00000735

00000840 <USART_WEST_CLOCK_init>:
     840:	4b06      	ldr	r3, [pc, #24]	; (85c <USART_WEST_CLOCK_init+0x1c>)
     842:	2241      	movs	r2, #65	; 0x41
     844:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     848:	2242      	movs	r2, #66	; 0x42
     84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     84e:	4a04      	ldr	r2, [pc, #16]	; (860 <USART_WEST_CLOCK_init+0x20>)
     850:	6a13      	ldr	r3, [r2, #32]
     852:	f043 0301 	orr.w	r3, r3, #1
     856:	6213      	str	r3, [r2, #32]
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	40001c00 	.word	0x40001c00
     860:	40000800 	.word	0x40000800

00000864 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <USART_WEST_PORT_init+0x44>)
     866:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     86a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     876:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     882:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     886:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     88a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     88e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     892:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     896:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     89a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     89e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     8a6:	4770      	bx	lr
     8a8:	41008000 	.word	0x41008000

000008ac <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     8ac:	b510      	push	{r4, lr}
     8ae:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     8b0:	4b07      	ldr	r3, [pc, #28]	; (8d0 <USART_WEST_init+0x24>)
     8b2:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     8b4:	2300      	movs	r3, #0
     8b6:	9300      	str	r3, [sp, #0]
     8b8:	2310      	movs	r3, #16
     8ba:	4a06      	ldr	r2, [pc, #24]	; (8d4 <USART_WEST_init+0x28>)
     8bc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     8c0:	4805      	ldr	r0, [pc, #20]	; (8d8 <USART_WEST_init+0x2c>)
     8c2:	4c06      	ldr	r4, [pc, #24]	; (8dc <USART_WEST_init+0x30>)
     8c4:	47a0      	blx	r4
	USART_WEST_PORT_init();
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <USART_WEST_init+0x34>)
     8c8:	4798      	blx	r3
}
     8ca:	b002      	add	sp, #8
     8cc:	bd10      	pop	{r4, pc}
     8ce:	bf00      	nop
     8d0:	00000841 	.word	0x00000841
     8d4:	20000634 	.word	0x20000634
     8d8:	20001138 	.word	0x20001138
     8dc:	00004b79 	.word	0x00004b79
     8e0:	00000865 	.word	0x00000865

000008e4 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8e4:	4b16      	ldr	r3, [pc, #88]	; (940 <SYS_I2C_PORT_init+0x5c>)
     8e6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     8ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8f2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     902:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     906:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     90a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     90e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     912:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     916:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     91a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     926:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     92a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     932:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     936:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     93a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     93e:	4770      	bx	lr
     940:	41008000 	.word	0x41008000

00000944 <SYS_I2C_CLOCK_init>:
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <SYS_I2C_CLOCK_init+0x1c>)
     946:	2241      	movs	r2, #65	; 0x41
     948:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     94c:	2242      	movs	r2, #66	; 0x42
     94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     952:	4a04      	ldr	r2, [pc, #16]	; (964 <SYS_I2C_CLOCK_init+0x20>)
     954:	6a13      	ldr	r3, [r2, #32]
     956:	f043 0302 	orr.w	r3, r3, #2
     95a:	6213      	str	r3, [r2, #32]
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	40001c00 	.word	0x40001c00
     964:	40000800 	.word	0x40000800

00000968 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     968:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <SYS_I2C_init+0x14>)
     96c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     96e:	4904      	ldr	r1, [pc, #16]	; (980 <SYS_I2C_init+0x18>)
     970:	4804      	ldr	r0, [pc, #16]	; (984 <SYS_I2C_init+0x1c>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <SYS_I2C_init+0x20>)
     974:	4798      	blx	r3
	SYS_I2C_PORT_init();
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <SYS_I2C_init+0x24>)
     978:	4798      	blx	r3
     97a:	bd08      	pop	{r3, pc}
     97c:	00000945 	.word	0x00000945
     980:	43000400 	.word	0x43000400
     984:	20000f78 	.word	0x20000f78
     988:	00004269 	.word	0x00004269
     98c:	000008e5 	.word	0x000008e5

00000990 <USART_SOUTH_CLOCK_init>:
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <USART_SOUTH_CLOCK_init+0x1c>)
     992:	2241      	movs	r2, #65	; 0x41
     994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     998:	2242      	movs	r2, #66	; 0x42
     99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <USART_SOUTH_CLOCK_init+0x20>)
     9a0:	6a13      	ldr	r3, [r2, #32]
     9a2:	f043 0304 	orr.w	r3, r3, #4
     9a6:	6213      	str	r3, [r2, #32]
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	40001c00 	.word	0x40001c00
     9b0:	40000800 	.word	0x40000800

000009b4 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b4:	4b10      	ldr	r3, [pc, #64]	; (9f8 <USART_SOUTH_PORT_init+0x44>)
     9b6:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     9da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     9f6:	4770      	bx	lr
     9f8:	41008000 	.word	0x41008000

000009fc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <USART_SOUTH_init+0x20>)
     a02:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     a04:	2300      	movs	r3, #0
     a06:	9300      	str	r3, [sp, #0]
     a08:	2310      	movs	r3, #16
     a0a:	4a05      	ldr	r2, [pc, #20]	; (a20 <USART_SOUTH_init+0x24>)
     a0c:	4905      	ldr	r1, [pc, #20]	; (a24 <USART_SOUTH_init+0x28>)
     a0e:	4806      	ldr	r0, [pc, #24]	; (a28 <USART_SOUTH_init+0x2c>)
     a10:	4c06      	ldr	r4, [pc, #24]	; (a2c <USART_SOUTH_init+0x30>)
     a12:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <USART_SOUTH_init+0x34>)
     a16:	4798      	blx	r3
}
     a18:	b002      	add	sp, #8
     a1a:	bd10      	pop	{r4, pc}
     a1c:	00000991 	.word	0x00000991
     a20:	20000644 	.word	0x20000644
     a24:	43000800 	.word	0x43000800
     a28:	20001188 	.word	0x20001188
     a2c:	00004b79 	.word	0x00004b79
     a30:	000009b5 	.word	0x000009b5

00000a34 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	4b29      	ldr	r3, [pc, #164]	; (adc <GRID_LED_PORT_init+0xa8>)
     a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a46:	4926      	ldr	r1, [pc, #152]	; (ae0 <GRID_LED_PORT_init+0xac>)
     a48:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     a50:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a54:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a58:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a60:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a64:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a68:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     a70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a7c:	4919      	ldr	r1, [pc, #100]	; (ae4 <GRID_LED_PORT_init+0xb0>)
     a7e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8e:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a92:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a96:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a9a:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a9e:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     aa2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     aa8:	629a      	str	r2, [r3, #40]	; 0x28
     aaa:	4a0f      	ldr	r2, [pc, #60]	; (ae8 <GRID_LED_PORT_init+0xb4>)
     aac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     ab2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ab6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ace:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ad2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ada:	4770      	bx	lr
     adc:	41008000 	.word	0x41008000
     ae0:	c0004000 	.word	0xc0004000
     ae4:	c0008000 	.word	0xc0008000
     ae8:	c0024000 	.word	0xc0024000

00000aec <GRID_LED_CLOCK_init>:
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <GRID_LED_CLOCK_init+0x1c>)
     aee:	2241      	movs	r2, #65	; 0x41
     af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     af4:	2242      	movs	r2, #66	; 0x42
     af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     afa:	4a04      	ldr	r2, [pc, #16]	; (b0c <GRID_LED_CLOCK_init+0x20>)
     afc:	6a13      	ldr	r3, [r2, #32]
     afe:	f043 0308 	orr.w	r3, r3, #8
     b02:	6213      	str	r3, [r2, #32]
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	40001c00 	.word	0x40001c00
     b0c:	40000800 	.word	0x40000800

00000b10 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     b10:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <GRID_LED_init+0x14>)
     b14:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     b16:	4904      	ldr	r1, [pc, #16]	; (b28 <GRID_LED_init+0x18>)
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <GRID_LED_init+0x1c>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <GRID_LED_init+0x20>)
     b1c:	4798      	blx	r3
	GRID_LED_PORT_init();
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <GRID_LED_init+0x24>)
     b20:	4798      	blx	r3
     b22:	bd08      	pop	{r3, pc}
     b24:	00000aed 	.word	0x00000aed
     b28:	43000c00 	.word	0x43000c00
     b2c:	200010d4 	.word	0x200010d4
     b30:	000046ed 	.word	0x000046ed
     b34:	00000a35 	.word	0x00000a35

00000b38 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b38:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b3a:	4802      	ldr	r0, [pc, #8]	; (b44 <delay_driver_init+0xc>)
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <delay_driver_init+0x10>)
     b3e:	4798      	blx	r3
     b40:	bd08      	pop	{r3, pc}
     b42:	bf00      	nop
     b44:	e000e010 	.word	0xe000e010
     b48:	00004115 	.word	0x00004115

00000b4c <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b4c:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b52:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b58:	6299      	str	r1, [r3, #40]	; 0x28
     b5a:	481c      	ldr	r0, [pc, #112]	; (bcc <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     b5c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b5e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b64:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b74:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b7c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b84:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     b90:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	6299      	str	r1, [r3, #40]	; 0x28
     b94:	490e      	ldr	r1, [pc, #56]	; (bd0 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     b96:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b98:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b9a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     b9e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bba:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bbe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     bc6:	4770      	bx	lr
     bc8:	41008000 	.word	0x41008000
     bcc:	c0000100 	.word	0xc0000100
     bd0:	c0000200 	.word	0xc0000200

00000bd4 <USB_DEVICE_INSTANCE_CLOCK_init>:
     bd4:	2241      	movs	r2, #65	; 0x41
     bd6:	4b07      	ldr	r3, [pc, #28]	; (bf4 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bdc:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     be0:	691a      	ldr	r2, [r3, #16]
     be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     be6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     be8:	699a      	ldr	r2, [r3, #24]
     bea:	f042 0201 	orr.w	r2, r2, #1
     bee:	619a      	str	r2, [r3, #24]
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	40001c00 	.word	0x40001c00

00000bf8 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     bf8:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <USB_DEVICE_INSTANCE_init+0x10>)
     bfc:	4798      	blx	r3
	usb_d_init();
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <USB_DEVICE_INSTANCE_init+0x14>)
     c00:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <USB_DEVICE_INSTANCE_init+0x18>)
     c04:	4798      	blx	r3
     c06:	bd08      	pop	{r3, pc}
     c08:	00000bd5 	.word	0x00000bd5
     c0c:	00004f25 	.word	0x00004f25
     c10:	00000b4d 	.word	0x00000b4d

00000c14 <system_init>:
}

void system_init(void)
{
     c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c18:	4ba1      	ldr	r3, [pc, #644]	; (ea0 <system_init+0x28c>)
     c1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c1c:	4ba1      	ldr	r3, [pc, #644]	; (ea4 <system_init+0x290>)
     c1e:	2220      	movs	r2, #32
     c20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c28:	629a      	str	r2, [r3, #40]	; 0x28
     c2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     c2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     c34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     c40:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c42:	4e99      	ldr	r6, [pc, #612]	; (ea8 <system_init+0x294>)
     c44:	629e      	str	r6, [r3, #40]	; 0x28
     c46:	4999      	ldr	r1, [pc, #612]	; (eac <system_init+0x298>)
     c48:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c4a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     c4e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c52:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c56:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     c5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c62:	2180      	movs	r1, #128	; 0x80
     c64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c68:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     c6c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     c70:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     c74:	4d8e      	ldr	r5, [pc, #568]	; (eb0 <system_init+0x29c>)
     c76:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     c7e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c82:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c8e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     c96:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c9a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ca2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     ca6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     caa:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     cae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cb2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     cba:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cbe:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cc2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     cc6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     cca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cce:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     cd2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cda:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     cde:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ce2:	4c74      	ldr	r4, [pc, #464]	; (eb4 <system_init+0x2a0>)
     ce4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ce8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cec:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     cf0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     cf4:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cf8:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     cfc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d00:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d04:	f44f 6400 	mov.w	r4, #2048	; 0x800
     d08:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d0c:	f8df e22c 	ldr.w	lr, [pc, #556]	; f3c <system_init+0x328>
     d10:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     d14:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d1c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     d20:	f045 0504 	orr.w	r5, r5, #4
     d24:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d28:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d2c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     d30:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d34:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d38:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d3c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d40:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     d44:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d48:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d50:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     d60:	4a55      	ldr	r2, [pc, #340]	; (eb8 <system_init+0x2a4>)
     d62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     d82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     d8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d92:	494a      	ldr	r1, [pc, #296]	; (ebc <system_init+0x2a8>)
     d94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d98:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     d9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     da4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     da8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     db4:	4942      	ldr	r1, [pc, #264]	; (ec0 <system_init+0x2ac>)
     db6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dba:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     dbe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dc2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dc6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dca:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     dd2:	4a3c      	ldr	r2, [pc, #240]	; (ec4 <system_init+0x2b0>)
     dd4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dd8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     de0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);




	ADC_0_init();
     de4:	4b38      	ldr	r3, [pc, #224]	; (ec8 <system_init+0x2b4>)
     de6:	4798      	blx	r3
	ADC_1_init();
     de8:	4b38      	ldr	r3, [pc, #224]	; (ecc <system_init+0x2b8>)
     dea:	4798      	blx	r3

	CRC_0_init();
     dec:	4b38      	ldr	r3, [pc, #224]	; (ed0 <system_init+0x2bc>)
     dee:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     df0:	4b38      	ldr	r3, [pc, #224]	; (ed4 <system_init+0x2c0>)
     df2:	4798      	blx	r3

	FLASH_0_init();
     df4:	4b38      	ldr	r3, [pc, #224]	; (ed8 <system_init+0x2c4>)
     df6:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     df8:	4c38      	ldr	r4, [pc, #224]	; (edc <system_init+0x2c8>)
     dfa:	6963      	ldr	r3, [r4, #20]
     dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     e00:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
     e02:	4b37      	ldr	r3, [pc, #220]	; (ee0 <system_init+0x2cc>)
     e04:	4798      	blx	r3
     e06:	4602      	mov	r2, r0
     e08:	4936      	ldr	r1, [pc, #216]	; (ee4 <system_init+0x2d0>)
     e0a:	4837      	ldr	r0, [pc, #220]	; (ee8 <system_init+0x2d4>)
     e0c:	4d37      	ldr	r5, [pc, #220]	; (eec <system_init+0x2d8>)
     e0e:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
     e10:	4b37      	ldr	r3, [pc, #220]	; (ef0 <system_init+0x2dc>)
     e12:	4798      	blx	r3
	USART_NORTH_init();
     e14:	4b37      	ldr	r3, [pc, #220]	; (ef4 <system_init+0x2e0>)
     e16:	4798      	blx	r3
	GRID_AUX_init();
     e18:	4b37      	ldr	r3, [pc, #220]	; (ef8 <system_init+0x2e4>)
     e1a:	4798      	blx	r3

	UI_SPI_init();
     e1c:	4b37      	ldr	r3, [pc, #220]	; (efc <system_init+0x2e8>)
     e1e:	4798      	blx	r3
	USART_WEST_init();
     e20:	4b37      	ldr	r3, [pc, #220]	; (f00 <system_init+0x2ec>)
     e22:	4798      	blx	r3

	SYS_I2C_init();
     e24:	4b37      	ldr	r3, [pc, #220]	; (f04 <system_init+0x2f0>)
     e26:	4798      	blx	r3
	USART_SOUTH_init();
     e28:	4b37      	ldr	r3, [pc, #220]	; (f08 <system_init+0x2f4>)
     e2a:	4798      	blx	r3

	GRID_LED_init();
     e2c:	4b37      	ldr	r3, [pc, #220]	; (f0c <system_init+0x2f8>)
     e2e:	4798      	blx	r3

	delay_driver_init();
     e30:	4b37      	ldr	r3, [pc, #220]	; (f10 <system_init+0x2fc>)
     e32:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     e34:	6963      	ldr	r3, [r4, #20]
     e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e3a:	6163      	str	r3, [r4, #20]
     e3c:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
     e40:	f04f 0840 	mov.w	r8, #64	; 0x40
     e44:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     e48:	4e32      	ldr	r6, [pc, #200]	; (f14 <system_init+0x300>)
     e4a:	47b0      	blx	r6
     e4c:	4602      	mov	r2, r0
     e4e:	4932      	ldr	r1, [pc, #200]	; (f18 <system_init+0x304>)
     e50:	4832      	ldr	r0, [pc, #200]	; (f1c <system_init+0x308>)
     e52:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     e54:	6963      	ldr	r3, [r4, #20]
     e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e5a:	6163      	str	r3, [r4, #20]
     e5c:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
     e60:	47b0      	blx	r6
     e62:	4602      	mov	r2, r0
     e64:	492e      	ldr	r1, [pc, #184]	; (f20 <system_init+0x30c>)
     e66:	482f      	ldr	r0, [pc, #188]	; (f24 <system_init+0x310>)
     e68:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     e6a:	69a3      	ldr	r3, [r4, #24]
     e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     e70:	61a3      	str	r3, [r4, #24]
     e72:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
     e76:	47b0      	blx	r6
     e78:	4602      	mov	r2, r0
     e7a:	492b      	ldr	r1, [pc, #172]	; (f28 <system_init+0x314>)
     e7c:	482b      	ldr	r0, [pc, #172]	; (f2c <system_init+0x318>)
     e7e:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     e80:	69a3      	ldr	r3, [r4, #24]
     e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e86:	61a3      	str	r3, [r4, #24]
     e88:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
     e8c:	47b0      	blx	r6
     e8e:	4602      	mov	r2, r0
     e90:	4927      	ldr	r1, [pc, #156]	; (f30 <system_init+0x31c>)
     e92:	4828      	ldr	r0, [pc, #160]	; (f34 <system_init+0x320>)
     e94:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
     e96:	4b28      	ldr	r3, [pc, #160]	; (f38 <system_init+0x324>)
     e98:	4798      	blx	r3
     e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e9e:	bf00      	nop
     ea0:	0000581d 	.word	0x0000581d
     ea4:	41008000 	.word	0x41008000
     ea8:	40020000 	.word	0x40020000
     eac:	c0020020 	.word	0xc0020020
     eb0:	c0020000 	.word	0xc0020000
     eb4:	40028000 	.word	0x40028000
     eb8:	c0020004 	.word	0xc0020004
     ebc:	c0000008 	.word	0xc0000008
     ec0:	c0000010 	.word	0xc0000010
     ec4:	c0000020 	.word	0xc0000020
     ec8:	00000381 	.word	0x00000381
     ecc:	00000419 	.word	0x00000419
     ed0:	000004bd 	.word	0x000004bd
     ed4:	000004e5 	.word	0x000004e5
     ed8:	00000529 	.word	0x00000529
     edc:	40000800 	.word	0x40000800
     ee0:	00006001 	.word	0x00006001
     ee4:	40002400 	.word	0x40002400
     ee8:	20000f00 	.word	0x20000f00
     eec:	00004895 	.word	0x00004895
     ef0:	000005b5 	.word	0x000005b5
     ef4:	00000659 	.word	0x00000659
     ef8:	000006fd 	.word	0x000006fd
     efc:	00000819 	.word	0x00000819
     f00:	000008ad 	.word	0x000008ad
     f04:	00000969 	.word	0x00000969
     f08:	000009fd 	.word	0x000009fd
     f0c:	00000b11 	.word	0x00000b11
     f10:	00000b39 	.word	0x00000b39
     f14:	00007805 	.word	0x00007805
     f18:	40003800 	.word	0x40003800
     f1c:	20001224 	.word	0x20001224
     f20:	40003c00 	.word	0x40003c00
     f24:	20001118 	.word	0x20001118
     f28:	4101a000 	.word	0x4101a000
     f2c:	20000f20 	.word	0x20000f20
     f30:	4101c000 	.word	0x4101c000
     f34:	20001204 	.word	0x20001204
     f38:	00000bf9 	.word	0x00000bf9
     f3c:	40020800 	.word	0x40020800

00000f40 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
     f40:	b538      	push	{r3, r4, r5, lr}
     f42:	4604      	mov	r4, r0
     f44:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
     f46:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
     f48:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
     f4a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
     f4c:	2300      	movs	r3, #0
     f4e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
     f50:	0048      	lsls	r0, r1, #1
     f52:	4b09      	ldr	r3, [pc, #36]	; (f78 <grid_ain_channel_init+0x38>)
     f54:	4798      	blx	r3
     f56:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
     f58:	b14d      	cbz	r5, f6e <grid_ain_channel_init+0x2e>
     f5a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
     f5c:	4619      	mov	r1, r3
     f5e:	6822      	ldr	r2, [r4, #0]
     f60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
     f64:	3301      	adds	r3, #1
     f66:	b2db      	uxtb	r3, r3
     f68:	7922      	ldrb	r2, [r4, #4]
     f6a:	429a      	cmp	r2, r3
     f6c:	d8f7      	bhi.n	f5e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
     f6e:	2000      	movs	r0, #0
     f70:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
     f72:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
     f74:	bd38      	pop	{r3, r4, r5, pc}
     f76:	bf00      	nop
     f78:	0000b1d5 	.word	0x0000b1d5

00000f7c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
     f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f80:	4605      	mov	r5, r0
     f82:	4689      	mov	r9, r1
     f84:	4617      	mov	r7, r2
     f86:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
     f88:	0100      	lsls	r0, r0, #4
     f8a:	4b0c      	ldr	r3, [pc, #48]	; (fbc <grid_ain_init+0x40>)
     f8c:	4798      	blx	r3
     f8e:	4b0c      	ldr	r3, [pc, #48]	; (fc0 <grid_ain_init+0x44>)
     f90:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
     f92:	b185      	cbz	r5, fb6 <grid_ain_init+0x3a>
     f94:	3d01      	subs	r5, #1
     f96:	b2ed      	uxtb	r5, r5
     f98:	3501      	adds	r5, #1
     f9a:	012d      	lsls	r5, r5, #4
     f9c:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
     f9e:	469a      	mov	sl, r3
     fa0:	4e08      	ldr	r6, [pc, #32]	; (fc4 <grid_ain_init+0x48>)
     fa2:	4643      	mov	r3, r8
     fa4:	463a      	mov	r2, r7
     fa6:	4649      	mov	r1, r9
     fa8:	f8da 0000 	ldr.w	r0, [sl]
     fac:	4420      	add	r0, r4
     fae:	47b0      	blx	r6
     fb0:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
     fb2:	42ac      	cmp	r4, r5
     fb4:	d1f5      	bne.n	fa2 <grid_ain_init+0x26>
	}

	return 0;
}
     fb6:	2000      	movs	r0, #0
     fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     fbc:	0000b1d5 	.word	0x0000b1d5
     fc0:	20001454 	.word	0x20001454
     fc4:	00000f41 	.word	0x00000f41

00000fc8 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
     fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
     fcc:	0100      	lsls	r0, r0, #4
     fce:	4b3c      	ldr	r3, [pc, #240]	; (10c0 <grid_ain_add_sample+0xf8>)
     fd0:	f8d3 a000 	ldr.w	sl, [r3]
     fd4:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
     fd8:	f89c 6004 	ldrb.w	r6, [ip, #4]
     fdc:	2e00      	cmp	r6, #0
     fde:	d05b      	beq.n	1098 <grid_ain_add_sample+0xd0>
     fe0:	f85a 5000 	ldr.w	r5, [sl, r0]
     fe4:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
     fe6:	2200      	movs	r2, #0
     fe8:	4690      	mov	r8, r2
     fea:	4691      	mov	r9, r2
     fec:	4696      	mov	lr, r2
     fee:	f64f 77ff 	movw	r7, #65535	; 0xffff
     ff2:	4614      	mov	r4, r2
     ff4:	fa5f fb82 	uxtb.w	fp, r2
     ff8:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
     ffc:	441c      	add	r4, r3
		
		if (current > maximum){
     ffe:	4573      	cmp	r3, lr
    1000:	bf84      	itt	hi
    1002:	46d8      	movhi	r8, fp
			maximum = current;
    1004:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1006:	42bb      	cmp	r3, r7
    1008:	bf3c      	itt	cc
    100a:	46d9      	movcc	r9, fp
			minimum = current;
    100c:	461f      	movcc	r7, r3
    100e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1010:	b2d3      	uxtb	r3, r2
    1012:	42b3      	cmp	r3, r6
    1014:	d3ee      	bcc.n	ff4 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1016:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    101a:	b2b6      	uxth	r6, r6
    101c:	428e      	cmp	r6, r1
    101e:	d23f      	bcs.n	10a0 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1020:	f85a 3000 	ldr.w	r3, [sl, r0]
    1024:	440c      	add	r4, r1
    1026:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    102a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    102c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1030:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1034:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1038:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    103c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1040:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    1042:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1046:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1048:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    104a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    104c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    1050:	b29b      	uxth	r3, r3
    1052:	408b      	lsls	r3, r1
    1054:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    1056:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    105a:	1b92      	subs	r2, r2, r6
    105c:	2a00      	cmp	r2, #0
    105e:	bfb8      	it	lt
    1060:	4252      	neglt	r2, r2
    1062:	2601      	movs	r6, #1
    1064:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1068:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    106c:	42be      	cmp	r6, r7
    106e:	d020      	beq.n	10b2 <grid_ain_add_sample+0xea>
    1070:	4282      	cmp	r2, r0
    1072:	dc08      	bgt.n	1086 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    1074:	2201      	movs	r2, #1
    1076:	fa02 f505 	lsl.w	r5, r2, r5
    107a:	fa02 f101 	lsl.w	r1, r2, r1
    107e:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1080:	428f      	cmp	r7, r1
    1082:	d000      	beq.n	1086 <grid_ain_add_sample+0xbe>
    1084:	b9c7      	cbnz	r7, 10b8 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    1086:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    108a:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    108e:	2001      	movs	r0, #1
    1090:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    1094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    1098:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    109a:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    109c:	2400      	movs	r4, #0
    109e:	e7ba      	b.n	1016 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    10a0:	f85a 3000 	ldr.w	r3, [sl, r0]
    10a4:	440c      	add	r4, r1
    10a6:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    10aa:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    10ac:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    10b0:	e7be      	b.n	1030 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    10b2:	2000      	movs	r0, #0
    10b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10b8:	2000      	movs	r0, #0
	}
	
}
    10ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10be:	bf00      	nop
    10c0:	20001454 	.word	0x20001454

000010c4 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    10c4:	4b02      	ldr	r3, [pc, #8]	; (10d0 <grid_ain_get_changed+0xc>)
    10c6:	681b      	ldr	r3, [r3, #0]
    10c8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    10cc:	7b00      	ldrb	r0, [r0, #12]
    10ce:	4770      	bx	lr
    10d0:	20001454 	.word	0x20001454

000010d4 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    10d4:	4b09      	ldr	r3, [pc, #36]	; (10fc <grid_ain_get_average+0x28>)
    10d6:	681b      	ldr	r3, [r3, #0]
    10d8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    10dc:	2300      	movs	r3, #0
    10de:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    10e0:	1fcb      	subs	r3, r1, #7
    10e2:	b2db      	uxtb	r3, r3
    10e4:	2b07      	cmp	r3, #7
    10e6:	d806      	bhi.n	10f6 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    10e8:	8903      	ldrh	r3, [r0, #8]
    10ea:	7940      	ldrb	r0, [r0, #5]
    10ec:	1a40      	subs	r0, r0, r1
    10ee:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    10f2:	b280      	uxth	r0, r0
    10f4:	4770      	bx	lr
    10f6:	2000      	movs	r0, #0
    10f8:	e7fb      	b.n	10f2 <grid_ain_get_average+0x1e>
    10fa:	bf00      	nop
    10fc:	20001454 	.word	0x20001454

00001100 <grid_buffer_init>:
uint8_t usb_tx_double_buffer[GRID_BUFFER_TX_SIZE];
uint8_t usb_rx_double_buffer[GRID_BUFFER_RX_SIZE];



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1100:	b538      	push	{r3, r4, r5, lr}
    1102:	4604      	mov	r4, r0
    1104:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1106:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1108:	2300      	movs	r3, #0
    110a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    110c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    110e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1110:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    1112:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1114:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1116:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1118:	4608      	mov	r0, r1
    111a:	4b08      	ldr	r3, [pc, #32]	; (113c <grid_buffer_init+0x3c>)
    111c:	4798      	blx	r3
    111e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1120:	b900      	cbnz	r0, 1124 <grid_buffer_init+0x24>
    1122:	e7fe      	b.n	1122 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1124:	b145      	cbz	r5, 1138 <grid_buffer_init+0x38>
    1126:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1128:	4619      	mov	r1, r3
    112a:	6862      	ldr	r2, [r4, #4]
    112c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    112e:	3301      	adds	r3, #1
    1130:	b29b      	uxth	r3, r3
    1132:	8822      	ldrh	r2, [r4, #0]
    1134:	429a      	cmp	r2, r3
    1136:	d8f8      	bhi.n	112a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1138:	2001      	movs	r0, #1
    113a:	bd38      	pop	{r3, r4, r5, pc}
    113c:	0000b1d5 	.word	0x0000b1d5

00001140 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1140:	8903      	ldrh	r3, [r0, #8]
    1142:	8a02      	ldrh	r2, [r0, #16]
    1144:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1146:	bf8f      	iteee	hi
    1148:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    114a:	8800      	ldrhls	r0, [r0, #0]
    114c:	18c0      	addls	r0, r0, r3
    114e:	1a80      	subls	r0, r0, r2
    1150:	b280      	uxth	r0, r0

	return space;

	
	
}
    1152:	4770      	bx	lr

00001154 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    1154:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1156:	8903      	ldrh	r3, [r0, #8]
    1158:	8a02      	ldrh	r2, [r0, #16]
    115a:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    115c:	bf9c      	itt	ls
    115e:	8804      	ldrhls	r4, [r0, #0]
    1160:	191b      	addls	r3, r3, r4
    1162:	1a9b      	subs	r3, r3, r2
    1164:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    1166:	428b      	cmp	r3, r1
    1168:	d90a      	bls.n	1180 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    116a:	440a      	add	r2, r1
    116c:	8804      	ldrh	r4, [r0, #0]
    116e:	fb92 f3f4 	sdiv	r3, r2, r4
    1172:	fb04 2213 	mls	r2, r4, r3, r2
    1176:	8242      	strh	r2, [r0, #18]
		
		return length;
    1178:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    117a:	f85d 4b04 	ldr.w	r4, [sp], #4
    117e:	4770      	bx	lr
		return 0; // failed
    1180:	2000      	movs	r0, #0
    1182:	e7fa      	b.n	117a <grid_buffer_write_init+0x26>

00001184 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    1184:	8a83      	ldrh	r3, [r0, #20]
    1186:	6842      	ldr	r2, [r0, #4]
    1188:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    118a:	8a83      	ldrh	r3, [r0, #20]
    118c:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    118e:	b29b      	uxth	r3, r3
    1190:	8801      	ldrh	r1, [r0, #0]
    1192:	fbb3 f2f1 	udiv	r2, r3, r1
    1196:	fb01 3312 	mls	r3, r1, r2, r3
    119a:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    119c:	2001      	movs	r0, #1
    119e:	4770      	bx	lr

000011a0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    11a0:	8a83      	ldrh	r3, [r0, #20]
    11a2:	8a42      	ldrh	r2, [r0, #18]
    11a4:	429a      	cmp	r2, r3
    11a6:	d000      	beq.n	11aa <grid_buffer_write_acknowledge+0xa>
    11a8:	e7fe      	b.n	11a8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    11aa:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    11ac:	2001      	movs	r0, #1
    11ae:	4770      	bx	lr

000011b0 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    11b0:	8983      	ldrh	r3, [r0, #12]
    11b2:	8942      	ldrh	r2, [r0, #10]
    11b4:	429a      	cmp	r2, r3
    11b6:	d000      	beq.n	11ba <grid_buffer_read_size+0xa>
    11b8:	e7fe      	b.n	11b8 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    11ba:	8902      	ldrh	r2, [r0, #8]
    11bc:	429a      	cmp	r2, r3
    11be:	d000      	beq.n	11c2 <grid_buffer_read_size+0x12>
    11c0:	e7fe      	b.n	11c0 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    11c2:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    11c4:	8a05      	ldrh	r5, [r0, #16]
    11c6:	42ab      	cmp	r3, r5
    11c8:	d025      	beq.n	1216 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    11ca:	8804      	ldrh	r4, [r0, #0]
    11cc:	b1fc      	cbz	r4, 120e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    11ce:	4626      	mov	r6, r4
    11d0:	fb93 f2f4 	sdiv	r2, r3, r4
    11d4:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    11d8:	b291      	uxth	r1, r2
    11da:	428d      	cmp	r5, r1
    11dc:	d01d      	beq.n	121a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    11de:	6840      	ldr	r0, [r0, #4]
    11e0:	5c42      	ldrb	r2, [r0, r1]
    11e2:	2a0a      	cmp	r2, #10
    11e4:	d114      	bne.n	1210 <grid_buffer_read_size+0x60>
    11e6:	2300      	movs	r3, #0
						
			return i+1; // packet length
    11e8:	3301      	adds	r3, #1
    11ea:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    11ec:	bcf0      	pop	{r4, r5, r6, r7}
    11ee:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    11f0:	fb92 f1f6 	sdiv	r1, r2, r6
    11f4:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    11f8:	b28f      	uxth	r7, r1
    11fa:	42bd      	cmp	r5, r7
    11fc:	d00f      	beq.n	121e <grid_buffer_read_size+0x6e>
    11fe:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1200:	5dc1      	ldrb	r1, [r0, r7]
    1202:	290a      	cmp	r1, #10
    1204:	d0f0      	beq.n	11e8 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1206:	3301      	adds	r3, #1
    1208:	b29b      	uxth	r3, r3
    120a:	42a3      	cmp	r3, r4
    120c:	d1f0      	bne.n	11f0 <grid_buffer_read_size+0x40>
    120e:	e7fe      	b.n	120e <grid_buffer_read_size+0x5e>
    1210:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1212:	2300      	movs	r3, #0
    1214:	e7f7      	b.n	1206 <grid_buffer_read_size+0x56>
		return 0;
    1216:	2000      	movs	r0, #0
    1218:	e7e8      	b.n	11ec <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    121a:	2000      	movs	r0, #0
    121c:	e7e6      	b.n	11ec <grid_buffer_read_size+0x3c>
    121e:	2000      	movs	r0, #0
    1220:	e7e4      	b.n	11ec <grid_buffer_read_size+0x3c>

00001222 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1222:	8982      	ldrh	r2, [r0, #12]
    1224:	8943      	ldrh	r3, [r0, #10]
    1226:	4293      	cmp	r3, r2
    1228:	d000      	beq.n	122c <grid_buffer_read_init+0xa>
    122a:	e7fe      	b.n	122a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    122c:	8903      	ldrh	r3, [r0, #8]
    122e:	4293      	cmp	r3, r2
    1230:	d000      	beq.n	1234 <grid_buffer_read_init+0x12>
    1232:	e7fe      	b.n	1232 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1234:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1236:	8a05      	ldrh	r5, [r0, #16]
    1238:	42aa      	cmp	r2, r5
    123a:	d031      	beq.n	12a0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    123c:	8804      	ldrh	r4, [r0, #0]
    123e:	b35c      	cbz	r4, 1298 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1240:	4626      	mov	r6, r4
    1242:	fb92 f3f4 	sdiv	r3, r2, r4
    1246:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    124a:	b299      	uxth	r1, r3
    124c:	428d      	cmp	r5, r1
    124e:	d029      	beq.n	12a4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1250:	6847      	ldr	r7, [r0, #4]
    1252:	460b      	mov	r3, r1
    1254:	5c79      	ldrb	r1, [r7, r1]
    1256:	290a      	cmp	r1, #10
    1258:	d11f      	bne.n	129a <grid_buffer_read_init+0x78>
    125a:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    125c:	3301      	adds	r3, #1
    125e:	fb93 f2f4 	sdiv	r2, r3, r4
    1262:	fb04 3312 	mls	r3, r4, r2, r3
    1266:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1268:	1c4b      	adds	r3, r1, #1
    126a:	b29b      	uxth	r3, r3
    126c:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    126e:	4618      	mov	r0, r3
    1270:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1272:	fb92 f3f6 	sdiv	r3, r2, r6
    1276:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    127a:	fa1f fe83 	uxth.w	lr, r3
    127e:	4575      	cmp	r5, lr
    1280:	d012      	beq.n	12a8 <grid_buffer_read_init+0x86>
    1282:	4673      	mov	r3, lr
    1284:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1286:	f817 e00e 	ldrb.w	lr, [r7, lr]
    128a:	f1be 0f0a 	cmp.w	lr, #10
    128e:	d0e5      	beq.n	125c <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1290:	3101      	adds	r1, #1
    1292:	b289      	uxth	r1, r1
    1294:	42a1      	cmp	r1, r4
    1296:	d1ec      	bne.n	1272 <grid_buffer_read_init+0x50>
    1298:	e7fe      	b.n	1298 <grid_buffer_read_init+0x76>
    129a:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    129c:	2100      	movs	r1, #0
    129e:	e7f7      	b.n	1290 <grid_buffer_read_init+0x6e>
		return 0;
    12a0:	2300      	movs	r3, #0
    12a2:	e7e4      	b.n	126e <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    12a4:	2300      	movs	r3, #0
    12a6:	e7e2      	b.n	126e <grid_buffer_read_init+0x4c>
    12a8:	2300      	movs	r3, #0
    12aa:	e7e0      	b.n	126e <grid_buffer_read_init+0x4c>

000012ac <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    12ac:	8983      	ldrh	r3, [r0, #12]
    12ae:	8941      	ldrh	r1, [r0, #10]
    12b0:	4299      	cmp	r1, r3
    12b2:	d00e      	beq.n	12d2 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    12b4:	b410      	push	{r4}
    12b6:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    12b8:	6841      	ldr	r1, [r0, #4]
    12ba:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    12bc:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    12be:	b29b      	uxth	r3, r3
    12c0:	8814      	ldrh	r4, [r2, #0]
    12c2:	fbb3 f1f4 	udiv	r1, r3, r4
    12c6:	fb04 3311 	mls	r3, r4, r1, r3
    12ca:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    12cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    12d0:	4770      	bx	lr
    12d2:	e7fe      	b.n	12d2 <grid_buffer_read_character+0x26>

000012d4 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    12d4:	8983      	ldrh	r3, [r0, #12]
    12d6:	8942      	ldrh	r2, [r0, #10]
    12d8:	429a      	cmp	r2, r3
    12da:	d000      	beq.n	12de <grid_buffer_read_acknowledge+0xa>
    12dc:	e7fe      	b.n	12dc <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    12de:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    12e0:	2001      	movs	r0, #1
    12e2:	4770      	bx	lr

000012e4 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    12e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12e8:	4604      	mov	r4, r0
    12ea:	4690      	mov	r8, r2
    12ec:	461f      	mov	r7, r3
    12ee:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    12f2:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    12f6:	4e2a      	ldr	r6, [pc, #168]	; (13a0 <grid_port_init+0xbc>)
    12f8:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    12fa:	4641      	mov	r1, r8
    12fc:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
    1300:	47b0      	blx	r6
	
	por->dma_channel = dma;
    1302:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1306:	71a3      	strb	r3, [r4, #6]
	
	por->direction = dir;
    1308:	f89d 301c 	ldrb.w	r3, [sp, #28]
    130c:	7163      	strb	r3, [r4, #5]
	
	por->usart	= usart;
    130e:	6027      	str	r7, [r4, #0]
	por->type		= type;
    1310:	7125      	strb	r5, [r4, #4]
	
	por->tx_double_buffer_status	= 0;
    1312:	2300      	movs	r3, #0
    1314:	8123      	strh	r3, [r4, #8]
	por->rx_double_buffer_status	= 0;
    1316:	82e3      	strh	r3, [r4, #22]
	
	
	por->partner_fi = 0;
    1318:	f884 31e0 	strb.w	r3, [r4, #480]	; 0x1e0
	
	por->partner_hwcfg = 0;
    131c:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
	por->partner_status = 1;
    1320:	2301      	movs	r3, #1
    1322:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    1326:	429d      	cmp	r5, r3
    1328:	d004      	beq.n	1334 <grid_port_init+0x50>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    132a:	2301      	movs	r3, #1
    132c:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
    1330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    1334:	2300      	movs	r3, #0
    1336:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
		por->partner_fi = 0;
    133a:	f884 31e0 	strb.w	r3, [r4, #480]	; 0x1e0
		if (por->direction == GRID_MSG_NORTH){
    133e:	7963      	ldrb	r3, [r4, #5]
    1340:	b2db      	uxtb	r3, r3
    1342:	2b11      	cmp	r3, #17
    1344:	d013      	beq.n	136e <grid_port_init+0x8a>
		else if (por->direction == GRID_MSG_EAST){
    1346:	7963      	ldrb	r3, [r4, #5]
    1348:	b2db      	uxtb	r3, r3
    134a:	2b12      	cmp	r3, #18
    134c:	d017      	beq.n	137e <grid_port_init+0x9a>
		else if (por->direction == GRID_MSG_SOUTH){
    134e:	7963      	ldrb	r3, [r4, #5]
    1350:	b2db      	uxtb	r3, r3
    1352:	2b13      	cmp	r3, #19
    1354:	d01b      	beq.n	138e <grid_port_init+0xaa>
		else if (por->direction == GRID_MSG_WEST){
    1356:	7963      	ldrb	r3, [r4, #5]
    1358:	b2db      	uxtb	r3, r3
    135a:	2b14      	cmp	r3, #20
    135c:	d1e8      	bne.n	1330 <grid_port_init+0x4c>
			por->dx = -1;
    135e:	23ff      	movs	r3, #255	; 0xff
    1360:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 0;
    1364:	2300      	movs	r3, #0
    1366:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    136a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    136e:	2300      	movs	r3, #0
    1370:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 1;
    1374:	2301      	movs	r3, #1
    1376:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    137a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    137e:	2301      	movs	r3, #1
    1380:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 0;
    1384:	2300      	movs	r3, #0
    1386:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    138a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    138e:	2300      	movs	r3, #0
    1390:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = -1;
    1394:	23ff      	movs	r3, #255	; 0xff
    1396:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    139a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    139e:	bf00      	nop
    13a0:	00001101 	.word	0x00001101

000013a4 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    13a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    13a8:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    13aa:	2600      	movs	r6, #0
    13ac:	9602      	str	r6, [sp, #8]
    13ae:	2311      	movs	r3, #17
    13b0:	9301      	str	r3, [sp, #4]
    13b2:	2401      	movs	r4, #1
    13b4:	9400      	str	r4, [sp, #0]
    13b6:	4b25      	ldr	r3, [pc, #148]	; (144c <grid_port_init_all+0xa8>)
    13b8:	f44f 7248 	mov.w	r2, #800	; 0x320
    13bc:	4611      	mov	r1, r2
    13be:	4824      	ldr	r0, [pc, #144]	; (1450 <grid_port_init_all+0xac>)
    13c0:	4d24      	ldr	r5, [pc, #144]	; (1454 <grid_port_init_all+0xb0>)
    13c2:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    13c4:	9402      	str	r4, [sp, #8]
    13c6:	2312      	movs	r3, #18
    13c8:	9301      	str	r3, [sp, #4]
    13ca:	9400      	str	r4, [sp, #0]
    13cc:	4b22      	ldr	r3, [pc, #136]	; (1458 <grid_port_init_all+0xb4>)
    13ce:	f44f 7248 	mov.w	r2, #800	; 0x320
    13d2:	4611      	mov	r1, r2
    13d4:	4821      	ldr	r0, [pc, #132]	; (145c <grid_port_init_all+0xb8>)
    13d6:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    13d8:	f04f 0902 	mov.w	r9, #2
    13dc:	f8cd 9008 	str.w	r9, [sp, #8]
    13e0:	2313      	movs	r3, #19
    13e2:	9301      	str	r3, [sp, #4]
    13e4:	9400      	str	r4, [sp, #0]
    13e6:	4b1e      	ldr	r3, [pc, #120]	; (1460 <grid_port_init_all+0xbc>)
    13e8:	f44f 7248 	mov.w	r2, #800	; 0x320
    13ec:	4611      	mov	r1, r2
    13ee:	481d      	ldr	r0, [pc, #116]	; (1464 <grid_port_init_all+0xc0>)
    13f0:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    13f2:	2703      	movs	r7, #3
    13f4:	9702      	str	r7, [sp, #8]
    13f6:	2314      	movs	r3, #20
    13f8:	9301      	str	r3, [sp, #4]
    13fa:	9400      	str	r4, [sp, #0]
    13fc:	4b1a      	ldr	r3, [pc, #104]	; (1468 <grid_port_init_all+0xc4>)
    13fe:	f44f 7248 	mov.w	r2, #800	; 0x320
    1402:	4611      	mov	r1, r2
    1404:	4819      	ldr	r0, [pc, #100]	; (146c <grid_port_init_all+0xc8>)
    1406:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_UI, 0, -1);
    1408:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1474 <grid_port_init_all+0xd0>
    140c:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1410:	f8cd a008 	str.w	sl, [sp, #8]
    1414:	9601      	str	r6, [sp, #4]
    1416:	9700      	str	r7, [sp, #0]
    1418:	4633      	mov	r3, r6
    141a:	f44f 7248 	mov.w	r2, #800	; 0x320
    141e:	4611      	mov	r1, r2
    1420:	4640      	mov	r0, r8
    1422:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    1424:	4f12      	ldr	r7, [pc, #72]	; (1470 <grid_port_init_all+0xcc>)
    1426:	f8cd a008 	str.w	sl, [sp, #8]
    142a:	9601      	str	r6, [sp, #4]
    142c:	f8cd 9000 	str.w	r9, [sp]
    1430:	4633      	mov	r3, r6
    1432:	f44f 7248 	mov.w	r2, #800	; 0x320
    1436:	4611      	mov	r1, r2
    1438:	4638      	mov	r0, r7
    143a:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    143c:	f888 41e3 	strb.w	r4, [r8, #483]	; 0x1e3
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    1440:	f887 41e3 	strb.w	r4, [r7, #483]	; 0x1e3
	
	
}
    1444:	b004      	add	sp, #16
    1446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    144a:	bf00      	nop
    144c:	20001084 	.word	0x20001084
    1450:	20001248 	.word	0x20001248
    1454:	000012e5 	.word	0x000012e5
    1458:	20001034 	.word	0x20001034
    145c:	20002240 	.word	0x20002240
    1460:	20001188 	.word	0x20001188
    1464:	20001e74 	.word	0x20001e74
    1468:	20001138 	.word	0x20001138
    146c:	20001c7c 	.word	0x20001c7c
    1470:	2000205c 	.word	0x2000205c
    1474:	2000146c 	.word	0x2000146c

00001478 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por){
    1478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    147c:	b08f      	sub	sp, #60	; 0x3c
    147e:	af00      	add	r7, sp, #0
    1480:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    1482:	f500 79e2 	add.w	r9, r0, #452	; 0x1c4
    1486:	4648      	mov	r0, r9
    1488:	4b4f      	ldr	r3, [pc, #316]	; (15c8 <grid_port_process_inbound+0x150>)
    148a:	4798      	blx	r3
	
	if (!packet_size){
    148c:	b920      	cbnz	r0, 1498 <grid_port_process_inbound+0x20>
    148e:	2000      	movs	r0, #0
		}	

		
	}
		
}
    1490:	373c      	adds	r7, #60	; 0x3c
    1492:	46bd      	mov	sp, r7
    1494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1498:	4680      	mov	r8, r0
	}else{
    149a:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    149e:	4b4b      	ldr	r3, [pc, #300]	; (15cc <grid_port_process_inbound+0x154>)
    14a0:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    14a2:	4b4b      	ldr	r3, [pc, #300]	; (15d0 <grid_port_process_inbound+0x158>)
    14a4:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    14a6:	4b4b      	ldr	r3, [pc, #300]	; (15d4 <grid_port_process_inbound+0x15c>)
    14a8:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    14aa:	4b4b      	ldr	r3, [pc, #300]	; (15d8 <grid_port_process_inbound+0x160>)
    14ac:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    14ae:	4b4b      	ldr	r3, [pc, #300]	; (15dc <grid_port_process_inbound+0x164>)
    14b0:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    14b2:	4b4b      	ldr	r3, [pc, #300]	; (15e0 <grid_port_process_inbound+0x168>)
    14b4:	61fb      	str	r3, [r7, #28]
    14b6:	f107 0308 	add.w	r3, r7, #8
    14ba:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    14be:	2600      	movs	r6, #0
    14c0:	e001      	b.n	14c6 <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    14c2:	428b      	cmp	r3, r1
    14c4:	d00e      	beq.n	14e4 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    14c6:	f853 2b04 	ldr.w	r2, [r3], #4
    14ca:	f892 01e3 	ldrb.w	r0, [r2, #483]	; 0x1e3
    14ce:	2800      	cmp	r0, #0
    14d0:	d0f7      	beq.n	14c2 <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    14d2:	f107 0038 	add.w	r0, r7, #56	; 0x38
    14d6:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    14da:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    14de:	3601      	adds	r6, #1
    14e0:	b2f6      	uxtb	r6, r6
    14e2:	e7ee      	b.n	14c2 <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    14e4:	2e00      	cmp	r6, #0
    14e6:	d05d      	beq.n	15a4 <grid_port_process_inbound+0x12c>
    14e8:	f107 0a20 	add.w	sl, r7, #32
    14ec:	1e74      	subs	r4, r6, #1
    14ee:	b2e4      	uxtb	r4, r4
    14f0:	3401      	adds	r4, #1
    14f2:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    14f6:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    14f8:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 15f8 <grid_port_process_inbound+0x180>
    14fc:	e001      	b.n	1502 <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    14fe:	42a5      	cmp	r5, r4
    1500:	d00c      	beq.n	151c <grid_port_process_inbound+0xa4>
			if (port_array[i] != por){
    1502:	f855 0b04 	ldr.w	r0, [r5], #4
    1506:	687b      	ldr	r3, [r7, #4]
    1508:	4283      	cmp	r3, r0
    150a:	d0f8      	beq.n	14fe <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    150c:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    1510:	47d8      	blx	fp
    1512:	4580      	cmp	r8, r0
    1514:	d9f3      	bls.n	14fe <grid_port_process_inbound+0x86>
    1516:	f8d7 d000 	ldr.w	sp, [r7]
    151a:	e7b8      	b.n	148e <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    151c:	4648      	mov	r0, r9
    151e:	4b31      	ldr	r3, [pc, #196]	; (15e4 <grid_port_process_inbound+0x16c>)
    1520:	4798      	blx	r3
    1522:	4580      	cmp	r8, r0
    1524:	d000      	beq.n	1528 <grid_port_process_inbound+0xb0>
    1526:	e7fe      	b.n	1526 <grid_port_process_inbound+0xae>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1528:	4c2f      	ldr	r4, [pc, #188]	; (15e8 <grid_port_process_inbound+0x170>)
    152a:	e001      	b.n	1530 <grid_port_process_inbound+0xb8>
		for (uint8_t i=0; i<port_count; i++)
    152c:	45aa      	cmp	sl, r5
    152e:	d03e      	beq.n	15ae <grid_port_process_inbound+0x136>
			if (port_array[i] != por){
    1530:	f85a 0b04 	ldr.w	r0, [sl], #4
    1534:	687b      	ldr	r3, [r7, #4]
    1536:	4283      	cmp	r3, r0
    1538:	d0f8      	beq.n	152c <grid_port_process_inbound+0xb4>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    153a:	4641      	mov	r1, r8
    153c:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    1540:	47a0      	blx	r4
    1542:	e7f3      	b.n	152c <grid_port_process_inbound+0xb4>
			for (uint8_t i=0; i<port_count; i++){
    1544:	42a5      	cmp	r5, r4
    1546:	d009      	beq.n	155c <grid_port_process_inbound+0xe4>
				if (port_array[i] != por){
    1548:	f854 0b04 	ldr.w	r0, [r4], #4
    154c:	687b      	ldr	r3, [r7, #4]
    154e:	4283      	cmp	r3, r0
    1550:	d0f8      	beq.n	1544 <grid_port_process_inbound+0xcc>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1552:	6839      	ldr	r1, [r7, #0]
    1554:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    1558:	47d8      	blx	fp
    155a:	e7f3      	b.n	1544 <grid_port_process_inbound+0xcc>
    155c:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    1560:	fa1f f38a 	uxth.w	r3, sl
    1564:	4543      	cmp	r3, r8
    1566:	d208      	bcs.n	157a <grid_port_process_inbound+0x102>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    1568:	4648      	mov	r0, r9
    156a:	4b20      	ldr	r3, [pc, #128]	; (15ec <grid_port_process_inbound+0x174>)
    156c:	4798      	blx	r3
    156e:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    1570:	2e00      	cmp	r6, #0
    1572:	d0f3      	beq.n	155c <grid_port_process_inbound+0xe4>
    1574:	f107 0420 	add.w	r4, r7, #32
    1578:	e7e6      	b.n	1548 <grid_port_process_inbound+0xd0>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    157a:	4648      	mov	r0, r9
    157c:	4b1c      	ldr	r3, [pc, #112]	; (15f0 <grid_port_process_inbound+0x178>)
    157e:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    1580:	2e00      	cmp	r6, #0
    1582:	d085      	beq.n	1490 <grid_port_process_inbound+0x18>
    1584:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1588:	4e1a      	ldr	r6, [pc, #104]	; (15f4 <grid_port_process_inbound+0x17c>)
    158a:	e002      	b.n	1592 <grid_port_process_inbound+0x11a>
		for (uint8_t i=0; i<port_count; i++)
    158c:	42a5      	cmp	r5, r4
    158e:	f43f af7f 	beq.w	1490 <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    1592:	f854 0b04 	ldr.w	r0, [r4], #4
    1596:	687b      	ldr	r3, [r7, #4]
    1598:	4283      	cmp	r3, r0
    159a:	d0f7      	beq.n	158c <grid_port_process_inbound+0x114>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    159c:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    15a0:	47b0      	blx	r6
    15a2:	e7f3      	b.n	158c <grid_port_process_inbound+0x114>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    15a4:	4648      	mov	r0, r9
    15a6:	4b0f      	ldr	r3, [pc, #60]	; (15e4 <grid_port_process_inbound+0x16c>)
    15a8:	4798      	blx	r3
    15aa:	4540      	cmp	r0, r8
    15ac:	d1bb      	bne.n	1526 <grid_port_process_inbound+0xae>
    15ae:	1e75      	subs	r5, r6, #1
    15b0:	b2ed      	uxtb	r5, r5
    15b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
    15b6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    15ba:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    15bc:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    15c0:	f8df b038 	ldr.w	fp, [pc, #56]	; 15fc <grid_port_process_inbound+0x184>
    15c4:	e7d0      	b.n	1568 <grid_port_process_inbound+0xf0>
    15c6:	bf00      	nop
    15c8:	000011b1 	.word	0x000011b1
    15cc:	20001248 	.word	0x20001248
    15d0:	20002240 	.word	0x20002240
    15d4:	20001e74 	.word	0x20001e74
    15d8:	20001c7c 	.word	0x20001c7c
    15dc:	2000146c 	.word	0x2000146c
    15e0:	2000205c 	.word	0x2000205c
    15e4:	00001223 	.word	0x00001223
    15e8:	00001155 	.word	0x00001155
    15ec:	000012ad 	.word	0x000012ad
    15f0:	000012d5 	.word	0x000012d5
    15f4:	000011a1 	.word	0x000011a1
    15f8:	00001141 	.word	0x00001141
    15fc:	00001185 	.word	0x00001185

00001600 <grid_port_process_outbound_usb>:

volatile uint8_t temp[500];

volatile uint8_t usb_debug[10];

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    1600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1604:	b09b      	sub	sp, #108	; 0x6c
    1606:	af06      	add	r7, sp, #24
    1608:	6438      	str	r0, [r7, #64]	; 0x40
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    160a:	f500 76d6 	add.w	r6, r0, #428	; 0x1ac
    160e:	4630      	mov	r0, r6
    1610:	4b8a      	ldr	r3, [pc, #552]	; (183c <grid_port_process_outbound_usb+0x23c>)
    1612:	4798      	blx	r3
	
	if (!length){		
    1614:	b918      	cbnz	r0, 161e <grid_port_process_outbound_usb+0x1e>
				
		
	}
	
	
}
    1616:	3754      	adds	r7, #84	; 0x54
    1618:	46bd      	mov	sp, r7
    161a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    161e:	4604      	mov	r4, r0
		grid_buffer_read_init(&por->tx_buffer);
    1620:	4630      	mov	r0, r6
    1622:	4b87      	ldr	r3, [pc, #540]	; (1840 <grid_port_process_outbound_usb+0x240>)
    1624:	4798      	blx	r3
    1626:	2500      	movs	r5, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1628:	f8df 9250 	ldr.w	r9, [pc, #592]	; 187c <grid_port_process_outbound_usb+0x27c>
    162c:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1848 <grid_port_process_outbound_usb+0x248>
    1630:	4630      	mov	r0, r6
    1632:	47c8      	blx	r9
    1634:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    1638:	3501      	adds	r5, #1
    163a:	b2ed      	uxtb	r5, r5
    163c:	b2ab      	uxth	r3, r5
    163e:	429c      	cmp	r4, r3
    1640:	d8f6      	bhi.n	1630 <grid_port_process_outbound_usb+0x30>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1642:	4630      	mov	r0, r6
    1644:	4b7f      	ldr	r3, [pc, #508]	; (1844 <grid_port_process_outbound_usb+0x244>)
    1646:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);		
    1648:	4d7f      	ldr	r5, [pc, #508]	; (1848 <grid_port_process_outbound_usb+0x248>)
    164a:	4628      	mov	r0, r5
    164c:	4b7f      	ldr	r3, [pc, #508]	; (184c <grid_port_process_outbound_usb+0x24c>)
    164e:	4798      	blx	r3
    1650:	63b8      	str	r0, [r7, #56]	; 0x38
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1652:	4628      	mov	r0, r5
    1654:	4b7e      	ldr	r3, [pc, #504]	; (1850 <grid_port_process_outbound_usb+0x250>)
    1656:	4798      	blx	r3
    1658:	387f      	subs	r0, #127	; 0x7f
    165a:	b243      	sxtb	r3, r0
    165c:	461e      	mov	r6, r3
    165e:	617b      	str	r3, [r7, #20]
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1660:	4628      	mov	r0, r5
    1662:	4b7c      	ldr	r3, [pc, #496]	; (1854 <grid_port_process_outbound_usb+0x254>)
    1664:	4798      	blx	r3
    1666:	387f      	subs	r0, #127	; 0x7f
    1668:	b243      	sxtb	r3, r0
    166a:	61bb      	str	r3, [r7, #24]
		uint8_t age = grid_msg_get_age(temp);
    166c:	4628      	mov	r0, r5
    166e:	4b7a      	ldr	r3, [pc, #488]	; (1858 <grid_port_process_outbound_usb+0x258>)
    1670:	4798      	blx	r3
    1672:	6378      	str	r0, [r7, #52]	; 0x34
		uint8_t error_flag = 0;
    1674:	2500      	movs	r5, #0
    1676:	f887 504f 	strb.w	r5, [r7, #79]	; 0x4f
					midi_channel = (256-dy)%16;
    167a:	69bb      	ldr	r3, [r7, #24]
    167c:	633b      	str	r3, [r7, #48]	; 0x30
    167e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
    1682:	1aea      	subs	r2, r5, r3
    1684:	f003 030f 	and.w	r3, r3, #15
    1688:	f002 020f 	and.w	r2, r2, #15
    168c:	bf58      	it	pl
    168e:	4253      	negpl	r3, r2
    1690:	b2db      	uxtb	r3, r3
    1692:	461a      	mov	r2, r3
    1694:	623b      	str	r3, [r7, #32]
					midi_param1  = (64+midi_param1 + 16*dx)%128;
    1696:	62fe      	str	r6, [r7, #44]	; 0x2c
    1698:	0133      	lsls	r3, r6, #4
    169a:	61fb      	str	r3, [r7, #28]
    169c:	627a      	str	r2, [r7, #36]	; 0x24
    169e:	1e63      	subs	r3, r4, #1
    16a0:	b29b      	uxth	r3, r3
    16a2:	f103 0a01 	add.w	sl, r3, #1
    16a6:	46ab      	mov	fp, r5
    16a8:	647d      	str	r5, [r7, #68]	; 0x44
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    16aa:	f8df 919c 	ldr.w	r9, [pc, #412]	; 1848 <grid_port_process_outbound_usb+0x248>
    16ae:	e006      	b.n	16be <grid_port_process_outbound_usb+0xbe>
				current_start = i;
    16b0:	fa5f f58b 	uxtb.w	r5, fp
    16b4:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    16b8:	45d3      	cmp	fp, sl
    16ba:	f000 8177 	beq.w	19ac <grid_port_process_outbound_usb+0x3ac>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    16be:	f819 300b 	ldrb.w	r3, [r9, fp]
    16c2:	b2db      	uxtb	r3, r3
    16c4:	2b02      	cmp	r3, #2
    16c6:	d0f3      	beq.n	16b0 <grid_port_process_outbound_usb+0xb0>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    16c8:	f819 300b 	ldrb.w	r3, [r9, fp]
    16cc:	b2db      	uxtb	r3, r3
    16ce:	2b03      	cmp	r3, #3
    16d0:	d1f0      	bne.n	16b4 <grid_port_process_outbound_usb+0xb4>
    16d2:	2d00      	cmp	r5, #0
    16d4:	d0ee      	beq.n	16b4 <grid_port_process_outbound_usb+0xb4>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    16d6:	462c      	mov	r4, r5
    16d8:	1c68      	adds	r0, r5, #1
    16da:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    16de:	2102      	movs	r1, #2
    16e0:	4448      	add	r0, r9
    16e2:	4b5e      	ldr	r3, [pc, #376]	; (185c <grid_port_process_outbound_usb+0x25c>)
    16e4:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    16e6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    16ea:	d01b      	beq.n	1724 <grid_port_process_outbound_usb+0x124>
				else if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    16ec:	2e03      	cmp	r6, #3
    16ee:	d06f      	beq.n	17d0 <grid_port_process_outbound_usb+0x1d0>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    16f0:	2e01      	cmp	r6, #1
    16f2:	f000 80c5 	beq.w	1880 <grid_port_process_outbound_usb+0x280>
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    16f6:	2e02      	cmp	r6, #2
    16f8:	f000 8156 	beq.w	19a8 <grid_port_process_outbound_usb+0x3a8>
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    16fc:	6c7d      	ldr	r5, [r7, #68]	; 0x44
    16fe:	f105 041c 	add.w	r4, r5, #28
    1702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1704:	441c      	add	r4, r3
    1706:	b2c2      	uxtb	r2, r0
    1708:	4955      	ldr	r1, [pc, #340]	; (1860 <grid_port_process_outbound_usb+0x260>)
    170a:	4620      	mov	r0, r4
    170c:	4b55      	ldr	r3, [pc, #340]	; (1864 <grid_port_process_outbound_usb+0x264>)
    170e:	4798      	blx	r3
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1710:	4620      	mov	r0, r4
    1712:	4b55      	ldr	r3, [pc, #340]	; (1868 <grid_port_process_outbound_usb+0x268>)
    1714:	4798      	blx	r3
    1716:	eb05 0800 	add.w	r8, r5, r0
    171a:	fa5f f388 	uxtb.w	r3, r8
    171e:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    1720:	2500      	movs	r5, #0
    1722:	e7c7      	b.n	16b4 <grid_port_process_outbound_usb+0xb4>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1724:	1ce8      	adds	r0, r5, #3
    1726:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    172a:	2102      	movs	r1, #2
    172c:	4448      	add	r0, r9
    172e:	4b4b      	ldr	r3, [pc, #300]	; (185c <grid_port_process_outbound_usb+0x25c>)
    1730:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1732:	1d68      	adds	r0, r5, #5
    1734:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1738:	2102      	movs	r1, #2
    173a:	4448      	add	r0, r9
    173c:	4b47      	ldr	r3, [pc, #284]	; (185c <grid_port_process_outbound_usb+0x25c>)
    173e:	4798      	blx	r3
    1740:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1744:	1de8      	adds	r0, r5, #7
    1746:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    174a:	2102      	movs	r1, #2
    174c:	4448      	add	r0, r9
    174e:	4b43      	ldr	r3, [pc, #268]	; (185c <grid_port_process_outbound_usb+0x25c>)
    1750:	4798      	blx	r3
    1752:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1754:	f105 0009 	add.w	r0, r5, #9
    1758:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    175c:	2102      	movs	r1, #2
    175e:	4448      	add	r0, r9
    1760:	4b3e      	ldr	r3, [pc, #248]	; (185c <grid_port_process_outbound_usb+0x25c>)
    1762:	4798      	blx	r3
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1766:	331c      	adds	r3, #28
    1768:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    176a:	441a      	add	r2, r3
    176c:	4615      	mov	r5, r2
					midi_param1  = (64+midi_param1 + 16*dx)%128;
    176e:	b2e4      	uxtb	r4, r4
    1770:	3440      	adds	r4, #64	; 0x40
    1772:	69f9      	ldr	r1, [r7, #28]
    1774:	440c      	add	r4, r1
    1776:	4263      	negs	r3, r4
    1778:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    177c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1780:	bf58      	it	pl
    1782:	425c      	negpl	r4, r3
    1784:	b2e4      	uxtb	r4, r4
    1786:	b2c3      	uxtb	r3, r0
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1788:	63fb      	str	r3, [r7, #60]	; 0x3c
    178a:	9305      	str	r3, [sp, #20]
    178c:	9404      	str	r4, [sp, #16]
    178e:	f8cd 800c 	str.w	r8, [sp, #12]
    1792:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1794:	9102      	str	r1, [sp, #8]
    1796:	6b79      	ldr	r1, [r7, #52]	; 0x34
    1798:	9101      	str	r1, [sp, #4]
    179a:	6b39      	ldr	r1, [r7, #48]	; 0x30
    179c:	9100      	str	r1, [sp, #0]
    179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    17a2:	4932      	ldr	r1, [pc, #200]	; (186c <grid_port_process_outbound_usb+0x26c>)
    17a4:	62bd      	str	r5, [r7, #40]	; 0x28
    17a6:	4628      	mov	r0, r5
    17a8:	4d2e      	ldr	r5, [pc, #184]	; (1864 <grid_port_process_outbound_usb+0x264>)
    17aa:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    17ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    17ae:	4b2e      	ldr	r3, [pc, #184]	; (1868 <grid_port_process_outbound_usb+0x268>)
    17b0:	4798      	blx	r3
    17b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    17b4:	4418      	add	r0, r3
    17b6:	b2c3      	uxtb	r3, r0
    17b8:	647b      	str	r3, [r7, #68]	; 0x44
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    17ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17bc:	4622      	mov	r2, r4
    17be:	6a39      	ldr	r1, [r7, #32]
    17c0:	ea48 0101 	orr.w	r1, r8, r1
    17c4:	ea4f 1018 	mov.w	r0, r8, lsr #4
    17c8:	4c29      	ldr	r4, [pc, #164]	; (1870 <grid_port_process_outbound_usb+0x270>)
    17ca:	47a0      	blx	r4
				current_start = 0;
    17cc:	4635      	mov	r5, r6
    17ce:	e771      	b.n	16b4 <grid_port_process_outbound_usb+0xb4>
					if (dx == 0 && dy == 0){
    17d0:	697b      	ldr	r3, [r7, #20]
    17d2:	2b00      	cmp	r3, #0
    17d4:	f040 80e6 	bne.w	19a4 <grid_port_process_outbound_usb+0x3a4>
    17d8:	69bb      	ldr	r3, [r7, #24]
    17da:	b10b      	cbz	r3, 17e0 <grid_port_process_outbound_usb+0x1e0>
				current_start = 0;
    17dc:	2500      	movs	r5, #0
    17de:	e769      	b.n	16b4 <grid_port_process_outbound_usb+0xb4>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    17e0:	1ce8      	adds	r0, r5, #3
    17e2:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17e6:	2102      	movs	r1, #2
    17e8:	4448      	add	r0, r9
    17ea:	4b1c      	ldr	r3, [pc, #112]	; (185c <grid_port_process_outbound_usb+0x25c>)
    17ec:	4798      	blx	r3
    17ee:	4606      	mov	r6, r0
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    17f0:	1d68      	adds	r0, r5, #5
    17f2:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    17f6:	2102      	movs	r1, #2
    17f8:	4448      	add	r0, r9
    17fa:	4b18      	ldr	r3, [pc, #96]	; (185c <grid_port_process_outbound_usb+0x25c>)
    17fc:	4798      	blx	r3
    17fe:	4605      	mov	r5, r0
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1800:	1de0      	adds	r0, r4, #7
    1802:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1806:	2102      	movs	r1, #2
    1808:	4448      	add	r0, r9
    180a:	4b14      	ldr	r3, [pc, #80]	; (185c <grid_port_process_outbound_usb+0x25c>)
    180c:	4798      	blx	r3
    180e:	4680      	mov	r8, r0
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1810:	f104 0009 	add.w	r0, r4, #9
    1814:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1818:	2102      	movs	r1, #2
    181a:	4448      	add	r0, r9
    181c:	4b0f      	ldr	r3, [pc, #60]	; (185c <grid_port_process_outbound_usb+0x25c>)
    181e:	4798      	blx	r3
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    1820:	b2ed      	uxtb	r5, r5
    1822:	2d63      	cmp	r5, #99	; 0x63
    1824:	d001      	beq.n	182a <grid_port_process_outbound_usb+0x22a>
				current_start = 0;
    1826:	2500      	movs	r5, #0
    1828:	e744      	b.n	16b4 <grid_port_process_outbound_usb+0xb4>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    182a:	b2c3      	uxtb	r3, r0
    182c:	b2f2      	uxtb	r2, r6
    182e:	fa5f f188 	uxtb.w	r1, r8
    1832:	4810      	ldr	r0, [pc, #64]	; (1874 <grid_port_process_outbound_usb+0x274>)
    1834:	4c10      	ldr	r4, [pc, #64]	; (1878 <grid_port_process_outbound_usb+0x278>)
    1836:	47a0      	blx	r4
				current_start = 0;
    1838:	2500      	movs	r5, #0
    183a:	e73b      	b.n	16b4 <grid_port_process_outbound_usb+0xb4>
    183c:	000011b1 	.word	0x000011b1
    1840:	00001223 	.word	0x00001223
    1844:	000012d5 	.word	0x000012d5
    1848:	20002458 	.word	0x20002458
    184c:	0000390d 	.word	0x0000390d
    1850:	0000392d 	.word	0x0000392d
    1854:	0000394d 	.word	0x0000394d
    1858:	0000396d 	.word	0x0000396d
    185c:	00003775 	.word	0x00003775
    1860:	0000bbe4 	.word	0x0000bbe4
    1864:	0000b3f9 	.word	0x0000b3f9
    1868:	0000b441 	.word	0x0000b441
    186c:	0000bb54 	.word	0x0000bb54
    1870:	0000a02d 	.word	0x0000a02d
    1874:	20002428 	.word	0x20002428
    1878:	00001c25 	.word	0x00001c25
    187c:	000012ad 	.word	0x000012ad
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1880:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1884:	fa5f f38b 	uxtb.w	r3, fp
    1888:	1b5b      	subs	r3, r3, r5
    188a:	3b03      	subs	r3, #3
    188c:	4a4a      	ldr	r2, [pc, #296]	; (19b8 <grid_port_process_outbound_usb+0x3b8>)
    188e:	fb82 1203 	smull	r1, r2, r2, r3
    1892:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
    1896:	b2db      	uxtb	r3, r3
    1898:	4619      	mov	r1, r3
    189a:	60fb      	str	r3, [r7, #12]
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    189c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    18a0:	3307      	adds	r3, #7
    18a2:	f023 0307 	bic.w	r3, r3, #7
    18a6:	ebad 0d03 	sub.w	sp, sp, r3
    18aa:	ab06      	add	r3, sp, #24
    18ac:	461e      	mov	r6, r3
    18ae:	60bb      	str	r3, [r7, #8]
					for(uint8_t j=0; j<key_array_length; j++){
    18b0:	2900      	cmp	r1, #0
    18b2:	d064      	beq.n	197e <grid_port_process_outbound_usb+0x37e>
    18b4:	3403      	adds	r4, #3
    18b6:	eb04 0809 	add.w	r8, r4, r9
    18ba:	1e4b      	subs	r3, r1, #1
    18bc:	b2db      	uxtb	r3, r3
    18be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    18c2:	3509      	adds	r5, #9
    18c4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    18c8:	444b      	add	r3, r9
    18ca:	62bb      	str	r3, [r7, #40]	; 0x28
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    18cc:	63fe      	str	r6, [r7, #60]	; 0x3c
    18ce:	f8c7 b004 	str.w	fp, [r7, #4]
    18d2:	f8d7 b044 	ldr.w	fp, [r7, #68]	; 0x44
    18d6:	f8c7 a000 	str.w	sl, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    18da:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    18de:	2102      	movs	r1, #2
    18e0:	4640      	mov	r0, r8
    18e2:	4b36      	ldr	r3, [pc, #216]	; (19bc <grid_port_process_outbound_usb+0x3bc>)
    18e4:	4798      	blx	r3
    18e6:	4604      	mov	r4, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    18e8:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    18ec:	2102      	movs	r1, #2
    18ee:	eb08 0001 	add.w	r0, r8, r1
    18f2:	4b32      	ldr	r3, [pc, #200]	; (19bc <grid_port_process_outbound_usb+0x3bc>)
    18f4:	4798      	blx	r3
    18f6:	4605      	mov	r5, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    18f8:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    18fc:	2102      	movs	r1, #2
    18fe:	f108 0004 	add.w	r0, r8, #4
    1902:	4b2e      	ldr	r3, [pc, #184]	; (19bc <grid_port_process_outbound_usb+0x3bc>)
    1904:	4798      	blx	r3
    1906:	4606      	mov	r6, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1908:	f10b 0a1c 	add.w	sl, fp, #28
    190c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    190e:	449a      	add	sl, r3
    1910:	4b2b      	ldr	r3, [pc, #172]	; (19c0 <grid_port_process_outbound_usb+0x3c0>)
    1912:	4798      	blx	r3
    1914:	9005      	str	r0, [sp, #20]
    1916:	b2e4      	uxtb	r4, r4
    1918:	9404      	str	r4, [sp, #16]
    191a:	b2ed      	uxtb	r5, r5
    191c:	9503      	str	r5, [sp, #12]
    191e:	647e      	str	r6, [r7, #68]	; 0x44
    1920:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1924:	9302      	str	r3, [sp, #8]
    1926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1928:	9301      	str	r3, [sp, #4]
    192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    192c:	9300      	str	r3, [sp, #0]
    192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1930:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1932:	4924      	ldr	r1, [pc, #144]	; (19c4 <grid_port_process_outbound_usb+0x3c4>)
    1934:	4650      	mov	r0, sl
    1936:	4e24      	ldr	r6, [pc, #144]	; (19c8 <grid_port_process_outbound_usb+0x3c8>)
    1938:	47b0      	blx	r6
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    193a:	4650      	mov	r0, sl
    193c:	4b23      	ldr	r3, [pc, #140]	; (19cc <grid_port_process_outbound_usb+0x3cc>)
    193e:	4798      	blx	r3
    1940:	4483      	add	fp, r0
    1942:	fa5f fb8b 	uxtb.w	fp, fp
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1946:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    194a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    194c:	700b      	strb	r3, [r1, #0]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    194e:	2d82      	cmp	r5, #130	; 0x82
    1950:	bf14      	ite	ne
    1952:	2500      	movne	r5, #0
    1954:	2501      	moveq	r5, #1
						key_array[j] = current_key;
    1956:	460b      	mov	r3, r1
    1958:	704d      	strb	r5, [r1, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    195a:	2c80      	cmp	r4, #128	; 0x80
    195c:	bf14      	ite	ne
    195e:	2400      	movne	r4, #0
    1960:	2401      	moveq	r4, #1
    1962:	708c      	strb	r4, [r1, #2]
    1964:	f108 0806 	add.w	r8, r8, #6
    1968:	3303      	adds	r3, #3
    196a:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(uint8_t j=0; j<key_array_length; j++){
    196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    196e:	4598      	cmp	r8, r3
    1970:	d1b3      	bne.n	18da <grid_port_process_outbound_usb+0x2da>
    1972:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
    1976:	f8d7 b004 	ldr.w	fp, [r7, #4]
    197a:	f8d7 a000 	ldr.w	sl, [r7]
					usb_debug[1] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    197e:	f8d7 800c 	ldr.w	r8, [r7, #12]
    1982:	4641      	mov	r1, r8
    1984:	68be      	ldr	r6, [r7, #8]
    1986:	4630      	mov	r0, r6
    1988:	4d11      	ldr	r5, [pc, #68]	; (19d0 <grid_port_process_outbound_usb+0x3d0>)
    198a:	47a8      	blx	r5
    198c:	b2c0      	uxtb	r0, r0
    198e:	4c11      	ldr	r4, [pc, #68]	; (19d4 <grid_port_process_outbound_usb+0x3d4>)
    1990:	7060      	strb	r0, [r4, #1]
					usb_debug[2] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    1992:	4641      	mov	r1, r8
    1994:	4630      	mov	r0, r6
    1996:	47a8      	blx	r5
    1998:	b2c0      	uxtb	r0, r0
    199a:	70a0      	strb	r0, [r4, #2]
    199c:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    19a0:	2500      	movs	r5, #0
    19a2:	e687      	b.n	16b4 <grid_port_process_outbound_usb+0xb4>
    19a4:	2500      	movs	r5, #0
    19a6:	e685      	b.n	16b4 <grid_port_process_outbound_usb+0xb4>
    19a8:	2500      	movs	r5, #0
    19aa:	e683      	b.n	16b4 <grid_port_process_outbound_usb+0xb4>
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    19ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
    19ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
    19b0:	301c      	adds	r0, #28
    19b2:	4b09      	ldr	r3, [pc, #36]	; (19d8 <grid_port_process_outbound_usb+0x3d8>)
    19b4:	4798      	blx	r3
}
    19b6:	e62e      	b.n	1616 <grid_port_process_outbound_usb+0x16>
    19b8:	2aaaaaab 	.word	0x2aaaaaab
    19bc:	00003775 	.word	0x00003775
    19c0:	000037ed 	.word	0x000037ed
    19c4:	0000bb9c 	.word	0x0000bb9c
    19c8:	0000b3f9 	.word	0x0000b3f9
    19cc:	0000b441 	.word	0x0000b441
    19d0:	00009aa9 	.word	0x00009aa9
    19d4:	2000264c 	.word	0x2000264c
    19d8:	00009869 	.word	0x00009869

000019dc <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    19dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    19de:	f500 75d6 	add.w	r5, r0, #428	; 0x1ac
    19e2:	4628      	mov	r0, r5
    19e4:	4b0a      	ldr	r3, [pc, #40]	; (1a10 <grid_port_process_outbound_ui+0x34>)
    19e6:	4798      	blx	r3
	
	if (!packet_size){
    19e8:	b900      	cbnz	r0, 19ec <grid_port_process_outbound_ui+0x10>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    19ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19ec:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    19ee:	4628      	mov	r0, r5
    19f0:	4b08      	ldr	r3, [pc, #32]	; (1a14 <grid_port_process_outbound_ui+0x38>)
    19f2:	4798      	blx	r3
    19f4:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    19f6:	4f08      	ldr	r7, [pc, #32]	; (1a18 <grid_port_process_outbound_ui+0x3c>)
    19f8:	4628      	mov	r0, r5
    19fa:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    19fc:	3401      	adds	r4, #1
    19fe:	b2e4      	uxtb	r4, r4
    1a00:	b2a3      	uxth	r3, r4
    1a02:	429e      	cmp	r6, r3
    1a04:	d8f8      	bhi.n	19f8 <grid_port_process_outbound_ui+0x1c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1a06:	4628      	mov	r0, r5
    1a08:	4b04      	ldr	r3, [pc, #16]	; (1a1c <grid_port_process_outbound_ui+0x40>)
    1a0a:	4798      	blx	r3
}
    1a0c:	e7ed      	b.n	19ea <grid_port_process_outbound_ui+0xe>
    1a0e:	bf00      	nop
    1a10:	000011b1 	.word	0x000011b1
    1a14:	00001223 	.word	0x00001223
    1a18:	000012ad 	.word	0x000012ad
    1a1c:	000012d5 	.word	0x000012d5

00001a20 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1a20:	8903      	ldrh	r3, [r0, #8]
    1a22:	b103      	cbz	r3, 1a26 <grid_port_process_outbound_usart+0x6>
    1a24:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a2a:	4605      	mov	r5, r0
		
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1a2c:	f500 76d6 	add.w	r6, r0, #428	; 0x1ac
    1a30:	4630      	mov	r0, r6
    1a32:	4b10      	ldr	r3, [pc, #64]	; (1a74 <grid_port_process_outbound_usart+0x54>)
    1a34:	4798      	blx	r3
		
		if (!packet_size){
    1a36:	4607      	mov	r7, r0
    1a38:	b908      	cbnz	r0, 1a3e <grid_port_process_outbound_usart+0x1e>
			
		}
		
	}
	
}
    1a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_buffer_read_init(&por->tx_buffer);
    1a3e:	4630      	mov	r0, r6
    1a40:	4b0d      	ldr	r3, [pc, #52]	; (1a78 <grid_port_process_outbound_usart+0x58>)
    1a42:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    1a44:	812f      	strh	r7, [r5, #8]
    1a46:	2400      	movs	r4, #0
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1a48:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1a84 <grid_port_process_outbound_usart+0x64>
    1a4c:	4630      	mov	r0, r6
    1a4e:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1a50:	192b      	adds	r3, r5, r4
    1a52:	7718      	strb	r0, [r3, #28]
			for (uint8_t i = 0; i<packet_size; i++){
    1a54:	3401      	adds	r4, #1
    1a56:	b2e4      	uxtb	r4, r4
    1a58:	b2a3      	uxth	r3, r4
    1a5a:	429f      	cmp	r7, r3
    1a5c:	d8f6      	bhi.n	1a4c <grid_port_process_outbound_usart+0x2c>
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1a5e:	4630      	mov	r0, r6
    1a60:	4b06      	ldr	r3, [pc, #24]	; (1a7c <grid_port_process_outbound_usart+0x5c>)
    1a62:	4798      	blx	r3
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1a64:	892a      	ldrh	r2, [r5, #8]
    1a66:	f105 011c 	add.w	r1, r5, #28
    1a6a:	6828      	ldr	r0, [r5, #0]
    1a6c:	4b04      	ldr	r3, [pc, #16]	; (1a80 <grid_port_process_outbound_usart+0x60>)
    1a6e:	4798      	blx	r3
}
    1a70:	e7e3      	b.n	1a3a <grid_port_process_outbound_usart+0x1a>
    1a72:	bf00      	nop
    1a74:	000011b1 	.word	0x000011b1
    1a78:	00001223 	.word	0x00001223
    1a7c:	000012d5 	.word	0x000012d5
    1a80:	000042d5 	.word	0x000042d5
    1a84:	000012ad 	.word	0x000012ad

00001a88 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1a88:	2201      	movs	r2, #1
    1a8a:	4b01      	ldr	r3, [pc, #4]	; (1a90 <grid_led_hardware_transfer_complete_cb+0x8>)
    1a8c:	701a      	strb	r2, [r3, #0]
    1a8e:	4770      	bx	lr
    1a90:	20001244 	.word	0x20001244

00001a94 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    1a94:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1a96:	7844      	ldrb	r4, [r0, #1]
    1a98:	428c      	cmp	r4, r1
    1a9a:	d802      	bhi.n	1aa2 <grid_led_set_color+0xe>
		return -1;		
    1a9c:	20ff      	movs	r0, #255	; 0xff
}
    1a9e:	bc30      	pop	{r4, r5}
    1aa0:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1aa2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1aa6:	0089      	lsls	r1, r1, #2
    1aa8:	4c09      	ldr	r4, [pc, #36]	; (1ad0 <grid_led_set_color+0x3c>)
    1aaa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1aae:	68c3      	ldr	r3, [r0, #12]
    1ab0:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1ab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1ab6:	68c3      	ldr	r3, [r0, #12]
    1ab8:	440b      	add	r3, r1
    1aba:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1abc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1ac0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1ac4:	68c3      	ldr	r3, [r0, #12]
    1ac6:	4419      	add	r1, r3
    1ac8:	608a      	str	r2, [r1, #8]
		return 0;
    1aca:	2000      	movs	r0, #0
    1acc:	e7e7      	b.n	1a9e <grid_led_set_color+0xa>
    1ace:	bf00      	nop
    1ad0:	2000186c 	.word	0x2000186c

00001ad4 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1ad4:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1ad6:	4c06      	ldr	r4, [pc, #24]	; (1af0 <grid_led_hardware_init+0x1c>)
    1ad8:	f100 0114 	add.w	r1, r0, #20
    1adc:	4620      	mov	r0, r4
    1ade:	4b05      	ldr	r3, [pc, #20]	; (1af4 <grid_led_hardware_init+0x20>)
    1ae0:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1ae2:	4a05      	ldr	r2, [pc, #20]	; (1af8 <grid_led_hardware_init+0x24>)
    1ae4:	2100      	movs	r1, #0
    1ae6:	4620      	mov	r0, r4
    1ae8:	4b04      	ldr	r3, [pc, #16]	; (1afc <grid_led_hardware_init+0x28>)
    1aea:	4798      	blx	r3
    1aec:	bd10      	pop	{r4, pc}
    1aee:	bf00      	nop
    1af0:	200010d4 	.word	0x200010d4
    1af4:	00004791 	.word	0x00004791
    1af8:	00001a89 	.word	0x00001a89
    1afc:	00004761 	.word	0x00004761

00001b00 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1b00:	7840      	ldrb	r0, [r0, #1]
    1b02:	4770      	bx	lr

00001b04 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1b04:	7843      	ldrb	r3, [r0, #1]
    1b06:	b1f3      	cbz	r3, 1b46 <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    1b08:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    1b0a:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    1b0c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1b10:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1b14:	6902      	ldr	r2, [r0, #16]
    1b16:	440a      	add	r2, r1
    1b18:	7ad1      	ldrb	r1, [r2, #11]
    1b1a:	7b14      	ldrb	r4, [r2, #12]
    1b1c:	4421      	add	r1, r4
    1b1e:	72d1      	strb	r1, [r2, #11]
    1b20:	7842      	ldrb	r2, [r0, #1]
    1b22:	441a      	add	r2, r3
    1b24:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1b28:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1b2c:	6901      	ldr	r1, [r0, #16]
    1b2e:	440a      	add	r2, r1
    1b30:	7ad1      	ldrb	r1, [r2, #11]
    1b32:	7b14      	ldrb	r4, [r2, #12]
    1b34:	4421      	add	r1, r4
    1b36:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1b38:	3301      	adds	r3, #1
    1b3a:	b2db      	uxtb	r3, r3
    1b3c:	7842      	ldrb	r2, [r0, #1]
    1b3e:	429a      	cmp	r2, r3
    1b40:	d8e4      	bhi.n	1b0c <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1b42:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b46:	4770      	bx	lr

00001b48 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1b48:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    1b4a:	7844      	ldrb	r4, [r0, #1]
    1b4c:	fb02 1404 	mla	r4, r2, r4, r1
    1b50:	6905      	ldr	r5, [r0, #16]
    1b52:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1b56:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1b5a:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    1b5c:	7843      	ldrb	r3, [r0, #1]
    1b5e:	fb02 1303 	mla	r3, r2, r3, r1
    1b62:	6904      	ldr	r4, [r0, #16]
    1b64:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1b68:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1b6c:	4423      	add	r3, r4
    1b6e:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1b72:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    1b74:	7843      	ldrb	r3, [r0, #1]
    1b76:	fb02 1203 	mla	r2, r2, r3, r1
    1b7a:	6903      	ldr	r3, [r0, #16]
    1b7c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1b80:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1b84:	441a      	add	r2, r3
    1b86:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1b8a:	7093      	strb	r3, [r2, #2]
}
    1b8c:	bc70      	pop	{r4, r5, r6}
    1b8e:	4770      	bx	lr

00001b90 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1b90:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    1b92:	7844      	ldrb	r4, [r0, #1]
    1b94:	fb02 1404 	mla	r4, r2, r4, r1
    1b98:	6905      	ldr	r5, [r0, #16]
    1b9a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1b9e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1ba2:	442c      	add	r4, r5
    1ba4:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    1ba6:	7843      	ldrb	r3, [r0, #1]
    1ba8:	fb02 1303 	mla	r3, r2, r3, r1
    1bac:	6904      	ldr	r4, [r0, #16]
    1bae:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1bb2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1bb6:	4423      	add	r3, r4
    1bb8:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1bbc:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    1bbe:	7843      	ldrb	r3, [r0, #1]
    1bc0:	fb02 1203 	mla	r2, r2, r3, r1
    1bc4:	6903      	ldr	r3, [r0, #16]
    1bc6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1bca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1bce:	441a      	add	r2, r3
    1bd0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1bd4:	7153      	strb	r3, [r2, #5]
}
    1bd6:	bc70      	pop	{r4, r5, r6}
    1bd8:	4770      	bx	lr

00001bda <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1bda:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    1bdc:	7844      	ldrb	r4, [r0, #1]
    1bde:	fb02 1404 	mla	r4, r2, r4, r1
    1be2:	6905      	ldr	r5, [r0, #16]
    1be4:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1be8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1bec:	442c      	add	r4, r5
    1bee:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    1bf0:	7843      	ldrb	r3, [r0, #1]
    1bf2:	fb02 1303 	mla	r3, r2, r3, r1
    1bf6:	6904      	ldr	r4, [r0, #16]
    1bf8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1bfc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1c00:	4423      	add	r3, r4
    1c02:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1c06:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    1c08:	7843      	ldrb	r3, [r0, #1]
    1c0a:	fb02 1203 	mla	r2, r2, r3, r1
    1c0e:	6903      	ldr	r3, [r0, #16]
    1c10:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1c14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1c18:	441a      	add	r2, r3
    1c1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1c1e:	7213      	strb	r3, [r2, #8]
}
    1c20:	bc70      	pop	{r4, r5, r6}
    1c22:	4770      	bx	lr

00001c24 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1c24:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    1c26:	7844      	ldrb	r4, [r0, #1]
    1c28:	fb02 1204 	mla	r2, r2, r4, r1
    1c2c:	6901      	ldr	r1, [r0, #16]
    1c2e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1c32:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1c36:	440a      	add	r2, r1
    1c38:	72d3      	strb	r3, [r2, #11]
}
    1c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c3e:	4770      	bx	lr

00001c40 <grid_led_set_frequency>:

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1c40:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    1c42:	7844      	ldrb	r4, [r0, #1]
    1c44:	fb02 1204 	mla	r2, r2, r4, r1
    1c48:	6901      	ldr	r1, [r0, #16]
    1c4a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1c4e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1c52:	440a      	add	r2, r1
    1c54:	7313      	strb	r3, [r2, #12]
}
    1c56:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c5a:	4770      	bx	lr

00001c5c <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    1c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c60:	b083      	sub	sp, #12
    1c62:	4604      	mov	r4, r0
	mod->led_number = length;
    1c64:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    1c66:	b2cd      	uxtb	r5, r1
    1c68:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1c6c:	0080      	lsls	r0, r0, #2
    1c6e:	3090      	adds	r0, #144	; 0x90
    1c70:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    1c72:	4f3e      	ldr	r7, [pc, #248]	; (1d6c <grid_led_buffer_init+0x110>)
    1c74:	47b8      	blx	r7
    1c76:	4606      	mov	r6, r0
    1c78:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    1c7a:	f100 0390 	add.w	r3, r0, #144	; 0x90
    1c7e:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1c80:	201a      	movs	r0, #26
    1c82:	fb00 f005 	mul.w	r0, r0, r5
    1c86:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    1c88:	2e00      	cmp	r6, #0
    1c8a:	d06e      	beq.n	1d6a <grid_led_buffer_init+0x10e>
    1c8c:	2800      	cmp	r0, #0
    1c8e:	d06c      	beq.n	1d6a <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1c90:	6120      	str	r0, [r4, #16]
    1c92:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    1c94:	4619      	mov	r1, r3
    1c96:	68a2      	ldr	r2, [r4, #8]
    1c98:	54d1      	strb	r1, [r2, r3]
    1c9a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    1c9c:	2b90      	cmp	r3, #144	; 0x90
    1c9e:	d1fa      	bne.n	1c96 <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    1ca0:	7863      	ldrb	r3, [r4, #1]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d05e      	beq.n	1d64 <grid_led_buffer_init+0x108>
    1ca6:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    1ca8:	462e      	mov	r6, r5
    1caa:	4f31      	ldr	r7, [pc, #196]	; (1d70 <grid_led_buffer_init+0x114>)
    1cac:	9600      	str	r6, [sp, #0]
    1cae:	4633      	mov	r3, r6
    1cb0:	4632      	mov	r2, r6
    1cb2:	4629      	mov	r1, r5
    1cb4:	4620      	mov	r0, r4
    1cb6:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    1cb8:	3501      	adds	r5, #1
    1cba:	7863      	ldrb	r3, [r4, #1]
    1cbc:	42ab      	cmp	r3, r5
    1cbe:	d8f5      	bhi.n	1cac <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d04f      	beq.n	1d64 <grid_led_buffer_init+0x108>
    1cc4:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1cc6:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1d78 <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1cca:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1d7c <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1cce:	2500      	movs	r5, #0
    1cd0:	9501      	str	r5, [sp, #4]
    1cd2:	9500      	str	r5, [sp, #0]
    1cd4:	462b      	mov	r3, r5
    1cd6:	462a      	mov	r2, r5
    1cd8:	4631      	mov	r1, r6
    1cda:	4620      	mov	r0, r4
    1cdc:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1cde:	9501      	str	r5, [sp, #4]
    1ce0:	237f      	movs	r3, #127	; 0x7f
    1ce2:	9300      	str	r3, [sp, #0]
    1ce4:	462b      	mov	r3, r5
    1ce6:	462a      	mov	r2, r5
    1ce8:	4631      	mov	r1, r6
    1cea:	4620      	mov	r0, r4
    1cec:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    1cee:	9501      	str	r5, [sp, #4]
    1cf0:	23ff      	movs	r3, #255	; 0xff
    1cf2:	9300      	str	r3, [sp, #0]
    1cf4:	462b      	mov	r3, r5
    1cf6:	462a      	mov	r2, r5
    1cf8:	4631      	mov	r1, r6
    1cfa:	4620      	mov	r0, r4
    1cfc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1d80 <grid_led_buffer_init+0x124>
    1d00:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    1d02:	462b      	mov	r3, r5
    1d04:	462a      	mov	r2, r5
    1d06:	4631      	mov	r1, r6
    1d08:	4620      	mov	r0, r4
    1d0a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1d84 <grid_led_buffer_init+0x128>
    1d0e:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    1d10:	462b      	mov	r3, r5
    1d12:	462a      	mov	r2, r5
    1d14:	4631      	mov	r1, r6
    1d16:	4620      	mov	r0, r4
    1d18:	4f16      	ldr	r7, [pc, #88]	; (1d74 <grid_led_buffer_init+0x118>)
    1d1a:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    1d1c:	9501      	str	r5, [sp, #4]
    1d1e:	9500      	str	r5, [sp, #0]
    1d20:	462b      	mov	r3, r5
    1d22:	2201      	movs	r2, #1
    1d24:	4631      	mov	r1, r6
    1d26:	4620      	mov	r0, r4
    1d28:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    1d2a:	9501      	str	r5, [sp, #4]
    1d2c:	9500      	str	r5, [sp, #0]
    1d2e:	462b      	mov	r3, r5
    1d30:	2201      	movs	r2, #1
    1d32:	4631      	mov	r1, r6
    1d34:	4620      	mov	r0, r4
    1d36:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    1d38:	9501      	str	r5, [sp, #4]
    1d3a:	9500      	str	r5, [sp, #0]
    1d3c:	462b      	mov	r3, r5
    1d3e:	2201      	movs	r2, #1
    1d40:	4631      	mov	r1, r6
    1d42:	4620      	mov	r0, r4
    1d44:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    1d46:	462b      	mov	r3, r5
    1d48:	2201      	movs	r2, #1
    1d4a:	4631      	mov	r1, r6
    1d4c:	4620      	mov	r0, r4
    1d4e:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    1d50:	462b      	mov	r3, r5
    1d52:	2201      	movs	r2, #1
    1d54:	4631      	mov	r1, r6
    1d56:	4620      	mov	r0, r4
    1d58:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    1d5a:	3601      	adds	r6, #1
    1d5c:	b2f6      	uxtb	r6, r6
    1d5e:	7863      	ldrb	r3, [r4, #1]
    1d60:	42b3      	cmp	r3, r6
    1d62:	d8b4      	bhi.n	1cce <grid_led_buffer_init+0x72>
}
    1d64:	b003      	add	sp, #12
    1d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d6a:	e7fe      	b.n	1d6a <grid_led_buffer_init+0x10e>
    1d6c:	0000b1d5 	.word	0x0000b1d5
    1d70:	00001a95 	.word	0x00001a95
    1d74:	00001c25 	.word	0x00001c25
    1d78:	00001b49 	.word	0x00001b49
    1d7c:	00001b91 	.word	0x00001b91
    1d80:	00001bdb 	.word	0x00001bdb
    1d84:	00001c41 	.word	0x00001c41

00001d88 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    1d88:	b570      	push	{r4, r5, r6, lr}
    1d8a:	4604      	mov	r4, r0
    1d8c:	4e29      	ldr	r6, [pc, #164]	; (1e34 <grid_led_init+0xac>)
    1d8e:	2200      	movs	r2, #0
    1d90:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    1d92:	f003 0001 	and.w	r0, r3, #1
    1d96:	2800      	cmp	r0, #0
    1d98:	bf14      	ite	ne
    1d9a:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    1d9e:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    1da2:	f3c3 0540 	ubfx	r5, r3, #1, #1
    1da6:	2d00      	cmp	r5, #0
    1da8:	bf14      	ite	ne
    1daa:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    1dae:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    1db2:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    1db4:	f3c3 0080 	ubfx	r0, r3, #2, #1
    1db8:	2800      	cmp	r0, #0
    1dba:	bf14      	ite	ne
    1dbc:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    1dc0:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    1dc4:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    1dc6:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    1dca:	2d00      	cmp	r5, #0
    1dcc:	bf14      	ite	ne
    1dce:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    1dd2:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    1dd6:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    1dd8:	f3c3 1500 	ubfx	r5, r3, #4, #1
    1ddc:	2d00      	cmp	r5, #0
    1dde:	bf14      	ite	ne
    1de0:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    1de4:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    1de8:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    1dea:	f3c3 1040 	ubfx	r0, r3, #5, #1
    1dee:	2800      	cmp	r0, #0
    1df0:	bf14      	ite	ne
    1df2:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    1df6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    1dfa:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    1dfc:	f3c3 1080 	ubfx	r0, r3, #6, #1
    1e00:	2800      	cmp	r0, #0
    1e02:	bf14      	ite	ne
    1e04:	200e      	movne	r0, #14
    1e06:	2008      	moveq	r0, #8
    1e08:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    1e0a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    1e0e:	2b00      	cmp	r3, #0
    1e10:	bf14      	ite	ne
    1e12:	23e0      	movne	r3, #224	; 0xe0
    1e14:	2380      	moveq	r3, #128	; 0x80
    1e16:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    1e18:	f846 3f04 	str.w	r3, [r6, #4]!
    1e1c:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    1e1e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    1e22:	d1b5      	bne.n	1d90 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    1e24:	4620      	mov	r0, r4
    1e26:	4b04      	ldr	r3, [pc, #16]	; (1e38 <grid_led_init+0xb0>)
    1e28:	4798      	blx	r3
	grid_led_hardware_init(mod);
    1e2a:	4620      	mov	r0, r4
    1e2c:	4b03      	ldr	r3, [pc, #12]	; (1e3c <grid_led_init+0xb4>)
    1e2e:	4798      	blx	r3
}
    1e30:	2000      	movs	r0, #0
    1e32:	bd70      	pop	{r4, r5, r6, pc}
    1e34:	20001868 	.word	0x20001868
    1e38:	00001c5d 	.word	0x00001c5d
    1e3c:	00001ad5 	.word	0x00001ad5

00001e40 <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    1e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e44:	b083      	sub	sp, #12
    1e46:	f890 c001 	ldrb.w	ip, [r0, #1]
    1e4a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    1e4e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    1e52:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    1e56:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    1e5a:	6904      	ldr	r4, [r0, #16]
    1e5c:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    1e5e:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    1e60:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    1e64:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    1e66:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    1e68:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1ef0 <grid_led_render+0xb0>
    1e6c:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    1e6e:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    1e72:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    1e74:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    1e78:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    1e7c:	f894 a000 	ldrb.w	sl, [r4]
    1e80:	f894 b003 	ldrb.w	fp, [r4, #3]
    1e84:	fb05 fb0b 	mul.w	fp, r5, fp
    1e88:	fb09 bb0a 	mla	fp, r9, sl, fp
    1e8c:	f894 a006 	ldrb.w	sl, [r4, #6]
    1e90:	fb06 ba0a 	mla	sl, r6, sl, fp
    1e94:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    1e96:	f894 a001 	ldrb.w	sl, [r4, #1]
    1e9a:	f894 b004 	ldrb.w	fp, [r4, #4]
    1e9e:	fb05 fb0b 	mul.w	fp, r5, fp
    1ea2:	fb09 bb0a 	mla	fp, r9, sl, fp
    1ea6:	f894 a007 	ldrb.w	sl, [r4, #7]
    1eaa:	fb06 ba0a 	mla	sl, r6, sl, fp
    1eae:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    1eb0:	f894 a002 	ldrb.w	sl, [r4, #2]
    1eb4:	f894 b005 	ldrb.w	fp, [r4, #5]
    1eb8:	fb05 f50b 	mul.w	r5, r5, fp
    1ebc:	fb09 590a 	mla	r9, r9, sl, r5
    1ec0:	7a25      	ldrb	r5, [r4, #8]
    1ec2:	fb06 9505 	mla	r5, r6, r5, r9
    1ec6:	44ae      	add	lr, r5
    1ec8:	3f01      	subs	r7, #1
    1eca:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    1ecc:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    1ed0:	d1cc      	bne.n	1e6c <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    1ed2:	f3ce 2447 	ubfx	r4, lr, #9, #8
    1ed6:	9400      	str	r4, [sp, #0]
    1ed8:	f3c3 2347 	ubfx	r3, r3, #9, #8
    1edc:	f3c2 2247 	ubfx	r2, r2, #9, #8
    1ee0:	4c02      	ldr	r4, [pc, #8]	; (1eec <grid_led_render+0xac>)
    1ee2:	47a0      	blx	r4
	
}
    1ee4:	b003      	add	sp, #12
    1ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1eea:	bf00      	nop
    1eec:	00001a95 	.word	0x00001a95
    1ef0:	20000000 	.word	0x20000000

00001ef4 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    1ef4:	7843      	ldrb	r3, [r0, #1]
    1ef6:	b15b      	cbz	r3, 1f10 <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    1ef8:	b570      	push	{r4, r5, r6, lr}
    1efa:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    1efc:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    1efe:	4e05      	ldr	r6, [pc, #20]	; (1f14 <grid_led_render_all+0x20>)
    1f00:	4621      	mov	r1, r4
    1f02:	4628      	mov	r0, r5
    1f04:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    1f06:	3401      	adds	r4, #1
    1f08:	786b      	ldrb	r3, [r5, #1]
    1f0a:	42a3      	cmp	r3, r4
    1f0c:	d8f8      	bhi.n	1f00 <grid_led_render_all+0xc>
    1f0e:	bd70      	pop	{r4, r5, r6, pc}
    1f10:	4770      	bx	lr
    1f12:	bf00      	nop
    1f14:	00001e41 	.word	0x00001e41

00001f18 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    1f18:	b510      	push	{r4, lr}
    1f1a:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    1f1c:	2200      	movs	r2, #0
    1f1e:	4b08      	ldr	r3, [pc, #32]	; (1f40 <grid_led_hardware_start_transfer_blocking+0x28>)
    1f20:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    1f22:	4808      	ldr	r0, [pc, #32]	; (1f44 <grid_led_hardware_start_transfer_blocking+0x2c>)
    1f24:	4b08      	ldr	r3, [pc, #32]	; (1f48 <grid_led_hardware_start_transfer_blocking+0x30>)
    1f26:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    1f28:	88a2      	ldrh	r2, [r4, #4]
    1f2a:	68a1      	ldr	r1, [r4, #8]
    1f2c:	6960      	ldr	r0, [r4, #20]
    1f2e:	4b07      	ldr	r3, [pc, #28]	; (1f4c <grid_led_hardware_start_transfer_blocking+0x34>)
    1f30:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    1f32:	4a03      	ldr	r2, [pc, #12]	; (1f40 <grid_led_hardware_start_transfer_blocking+0x28>)
    1f34:	7813      	ldrb	r3, [r2, #0]
    1f36:	b2db      	uxtb	r3, r3
    1f38:	2b01      	cmp	r3, #1
    1f3a:	d1fb      	bne.n	1f34 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    1f3c:	bd10      	pop	{r4, pc}
    1f3e:	bf00      	nop
    1f40:	20001244 	.word	0x20001244
    1f44:	200010d4 	.word	0x200010d4
    1f48:	00004739 	.word	0x00004739
    1f4c:	000042d5 	.word	0x000042d5

00001f50 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    1f50:	b510      	push	{r4, lr}
    1f52:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    1f54:	2200      	movs	r2, #0
    1f56:	4b05      	ldr	r3, [pc, #20]	; (1f6c <grid_led_hardware_start_transfer+0x1c>)
    1f58:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    1f5a:	4805      	ldr	r0, [pc, #20]	; (1f70 <grid_led_hardware_start_transfer+0x20>)
    1f5c:	4b05      	ldr	r3, [pc, #20]	; (1f74 <grid_led_hardware_start_transfer+0x24>)
    1f5e:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    1f60:	88a2      	ldrh	r2, [r4, #4]
    1f62:	68a1      	ldr	r1, [r4, #8]
    1f64:	6960      	ldr	r0, [r4, #20]
    1f66:	4b04      	ldr	r3, [pc, #16]	; (1f78 <grid_led_hardware_start_transfer+0x28>)
    1f68:	4798      	blx	r3
    1f6a:	bd10      	pop	{r4, pc}
    1f6c:	20001244 	.word	0x20001244
    1f70:	200010d4 	.word	0x200010d4
    1f74:	00004739 	.word	0x00004739
    1f78:	000042d5 	.word	0x000042d5

00001f7c <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    1f7c:	4b01      	ldr	r3, [pc, #4]	; (1f84 <grid_led_hardware_is_transfer_completed+0x8>)
    1f7e:	7818      	ldrb	r0, [r3, #0]
	
    1f80:	4770      	bx	lr
    1f82:	bf00      	nop
    1f84:	20001244 	.word	0x20001244

00001f88 <grid_module_init_animation>:
// Define all of the peripheral interrupt callbacks
	



void grid_module_init_animation(struct grid_led_model* mod){
    1f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1f8c:	b083      	sub	sp, #12
    1f8e:	4607      	mov	r7, r0
	

	
	for (uint8_t i = 0; i<255; i++){
    1f90:	2500      	movs	r5, #0
		uint8_t color_b   = i;
			
				
		for (uint8_t i=0; i<mod->led_number; i++){
			//grid_led_set_color(i, 0, 255, 0);
			grid_led_set_color(&grid_led_state, i, color_r, color_g, color_b);
    1f92:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1fe0 <grid_module_init_animation+0x58>
    1f96:	4e10      	ldr	r6, [pc, #64]	; (1fd8 <grid_module_init_animation+0x50>)
				
				
		}
			
			
		grid_led_hardware_start_transfer_blocking(&grid_led_state);
    1f98:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1fe4 <grid_module_init_animation+0x5c>
    1f9c:	e013      	b.n	1fc6 <grid_module_init_animation+0x3e>
			grid_led_set_color(&grid_led_state, i, color_r, color_g, color_b);
    1f9e:	9500      	str	r5, [sp, #0]
    1fa0:	462b      	mov	r3, r5
    1fa2:	462a      	mov	r2, r5
    1fa4:	4621      	mov	r1, r4
    1fa6:	4640      	mov	r0, r8
    1fa8:	47b0      	blx	r6
		for (uint8_t i=0; i<mod->led_number; i++){
    1faa:	3401      	adds	r4, #1
    1fac:	b2e4      	uxtb	r4, r4
    1fae:	787b      	ldrb	r3, [r7, #1]
    1fb0:	42a3      	cmp	r3, r4
    1fb2:	d8f4      	bhi.n	1f9e <grid_module_init_animation+0x16>
		grid_led_hardware_start_transfer_blocking(&grid_led_state);
    1fb4:	4640      	mov	r0, r8
    1fb6:	47c8      	blx	r9
			
			

				
		delay_ms(1);
    1fb8:	2001      	movs	r0, #1
    1fba:	4b08      	ldr	r3, [pc, #32]	; (1fdc <grid_module_init_animation+0x54>)
    1fbc:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    1fbe:	3501      	adds	r5, #1
    1fc0:	b2ed      	uxtb	r5, r5
    1fc2:	2dff      	cmp	r5, #255	; 0xff
    1fc4:	d004      	beq.n	1fd0 <grid_module_init_animation+0x48>
		for (uint8_t i=0; i<mod->led_number; i++){
    1fc6:	787b      	ldrb	r3, [r7, #1]
    1fc8:	2400      	movs	r4, #0
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d1e7      	bne.n	1f9e <grid_module_init_animation+0x16>
    1fce:	e7f1      	b.n	1fb4 <grid_module_init_animation+0x2c>
	

	

	
}
    1fd0:	b003      	add	sp, #12
    1fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1fd6:	bf00      	nop
    1fd8:	00001a95 	.word	0x00001a95
    1fdc:	00004149 	.word	0x00004149
    1fe0:	20002428 	.word	0x20002428
    1fe4:	00001f19 	.word	0x00001f19

00001fe8 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    1fe8:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1fee:	4b14      	ldr	r3, [pc, #80]	; (2040 <grid_module_common_init+0x58>)
    1ff0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    1ff4:	4b13      	ldr	r3, [pc, #76]	; (2044 <grid_module_common_init+0x5c>)
    1ff6:	4798      	blx	r3
    1ff8:	b190      	cbz	r0, 2020 <grid_module_common_init+0x38>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    1ffa:	4b12      	ldr	r3, [pc, #72]	; (2044 <grid_module_common_init+0x5c>)
    1ffc:	4798      	blx	r3
    1ffe:	2880      	cmp	r0, #128	; 0x80
    2000:	d012      	beq.n	2028 <grid_module_common_init+0x40>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    2002:	4b10      	ldr	r3, [pc, #64]	; (2044 <grid_module_common_init+0x5c>)
    2004:	4798      	blx	r3
    2006:	2840      	cmp	r0, #64	; 0x40
    2008:	d012      	beq.n	2030 <grid_module_common_init+0x48>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    200a:	4b0e      	ldr	r3, [pc, #56]	; (2044 <grid_module_common_init+0x5c>)
    200c:	4798      	blx	r3
    200e:	28c0      	cmp	r0, #192	; 0xc0
    2010:	d012      	beq.n	2038 <grid_module_common_init+0x50>
	}	
	



	grid_port_init_all();
    2012:	4b0d      	ldr	r3, [pc, #52]	; (2048 <grid_module_common_init+0x60>)
    2014:	4798      	blx	r3
	grid_sys_uart_init();
    2016:	4b0d      	ldr	r3, [pc, #52]	; (204c <grid_module_common_init+0x64>)
    2018:	4798      	blx	r3
	grid_rx_dma_init();
    201a:	4b0d      	ldr	r3, [pc, #52]	; (2050 <grid_module_common_init+0x68>)
    201c:	4798      	blx	r3
    201e:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    2020:	480c      	ldr	r0, [pc, #48]	; (2054 <grid_module_common_init+0x6c>)
    2022:	4b0d      	ldr	r3, [pc, #52]	; (2058 <grid_module_common_init+0x70>)
    2024:	4798      	blx	r3
    2026:	e7e8      	b.n	1ffa <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    2028:	480a      	ldr	r0, [pc, #40]	; (2054 <grid_module_common_init+0x6c>)
    202a:	4b0c      	ldr	r3, [pc, #48]	; (205c <grid_module_common_init+0x74>)
    202c:	4798      	blx	r3
    202e:	e7e8      	b.n	2002 <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    2030:	4808      	ldr	r0, [pc, #32]	; (2054 <grid_module_common_init+0x6c>)
    2032:	4b0b      	ldr	r3, [pc, #44]	; (2060 <grid_module_common_init+0x78>)
    2034:	4798      	blx	r3
    2036:	e7e8      	b.n	200a <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    2038:	4806      	ldr	r0, [pc, #24]	; (2054 <grid_module_common_init+0x6c>)
    203a:	4b0a      	ldr	r3, [pc, #40]	; (2064 <grid_module_common_init+0x7c>)
    203c:	4798      	blx	r3
    203e:	e7e8      	b.n	2012 <grid_module_common_init+0x2a>
    2040:	41008000 	.word	0x41008000
    2044:	000037ed 	.word	0x000037ed
    2048:	000013a5 	.word	0x000013a5
    204c:	00003519 	.word	0x00003519
    2050:	00003681 	.word	0x00003681
    2054:	20001650 	.word	0x20001650
    2058:	000032d5 	.word	0x000032d5
    205c:	0000233d 	.word	0x0000233d
    2060:	00002ec1 	.word	0x00002ec1
    2064:	000028e5 	.word	0x000028e5

00002068 <grid_module_bu16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_bu16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_bu16_revb_mux = 0;
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_bu16_revb_hardware_start_transfer(void){
    2068:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    206a:	4803      	ldr	r0, [pc, #12]	; (2078 <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    206c:	4c03      	ldr	r4, [pc, #12]	; (207c <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    206e:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2070:	4803      	ldr	r0, [pc, #12]	; (2080 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    2072:	47a0      	blx	r4
    2074:	bd10      	pop	{r4, pc}
    2076:	bf00      	nop
    2078:	20001008 	.word	0x20001008
    207c:	000040a1 	.word	0x000040a1
    2080:	200011d8 	.word	0x200011d8

00002084 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    2084:	4b90      	ldr	r3, [pc, #576]	; (22c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x244>)
    2086:	781b      	ldrb	r3, [r3, #0]
    2088:	b92b      	cbnz	r3, 2096 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x12>
		grid_module_bu16_revb_hardware_transfer_complete++;
    208a:	4a8f      	ldr	r2, [pc, #572]	; (22c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x244>)
    208c:	7813      	ldrb	r3, [r2, #0]
    208e:	3301      	adds	r3, #1
    2090:	b2db      	uxtb	r3, r3
    2092:	7013      	strb	r3, [r2, #0]
    2094:	4770      	bx	lr
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    2096:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    209a:	b087      	sub	sp, #28
	/* Read mapmode state*/
	
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	CRITICAL_SECTION_ENTER()
    209c:	a801      	add	r0, sp, #4
    209e:	4c8b      	ldr	r4, [pc, #556]	; (22cc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    20a0:	47a0      	blx	r4
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    20a2:	a804      	add	r0, sp, #16
    20a4:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    20a6:	4b8a      	ldr	r3, [pc, #552]	; (22d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x24c>)
    20a8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    20ac:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    20b0:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    20b4:	4054      	eors	r4, r2
    20b6:	400c      	ands	r4, r1
    20b8:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    20ba:	a804      	add	r0, sp, #16
    20bc:	4b85      	ldr	r3, [pc, #532]	; (22d4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x250>)
    20be:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    20c0:	4b85      	ldr	r3, [pc, #532]	; (22d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>)
    20c2:	685b      	ldr	r3, [r3, #4]
    20c4:	68db      	ldr	r3, [r3, #12]
    20c6:	781a      	ldrb	r2, [r3, #0]
    20c8:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    20cc:	4294      	cmp	r4, r2
    20ce:	d010      	beq.n	20f2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x6e>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    20d0:	2a00      	cmp	r2, #0
    20d2:	f040 80f4 	bne.w	22be <grid_module_bu16_revb_hardware_transfer_complete_cb+0x23a>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
			mod->report_array[report_index].helper[0] = 1;
    20d6:	2201      	movs	r2, #1
    20d8:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    20da:	2280      	movs	r2, #128	; 0x80
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    20dc:	4c7e      	ldr	r4, [pc, #504]	; (22d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>)
    20de:	6863      	ldr	r3, [r4, #4]
    20e0:	6858      	ldr	r0, [r3, #4]
    20e2:	2102      	movs	r1, #2
    20e4:	3003      	adds	r0, #3
    20e6:	4b7d      	ldr	r3, [pc, #500]	; (22dc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x258>)
    20e8:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    20ea:	2100      	movs	r1, #0
    20ec:	4620      	mov	r0, r4
    20ee:	4b7c      	ldr	r3, [pc, #496]	; (22e0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>)
    20f0:	4798      	blx	r3
	}

	CRITICAL_SECTION_LEAVE()
    20f2:	a801      	add	r0, sp, #4
    20f4:	4b77      	ldr	r3, [pc, #476]	; (22d4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x250>)
    20f6:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    20f8:	2300      	movs	r3, #0
    20fa:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint16_t adcresult_1 = 0;
    20fe:	f8ad 3014 	strh.w	r3, [sp, #20]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    2102:	4b71      	ldr	r3, [pc, #452]	; (22c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x244>)
    2104:	785a      	ldrb	r2, [r3, #1]
    2106:	3208      	adds	r2, #8
    2108:	4876      	ldr	r0, [pc, #472]	; (22e4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x260>)
    210a:	5c85      	ldrb	r5, [r0, r2]
    210c:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    210e:	785a      	ldrb	r2, [r3, #1]
    2110:	b2d2      	uxtb	r2, r2
    2112:	5c84      	ldrb	r4, [r0, r2]
    2114:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    2116:	785a      	ldrb	r2, [r3, #1]
    2118:	3201      	adds	r2, #1
    211a:	b2d2      	uxtb	r2, r2
    211c:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    211e:	785a      	ldrb	r2, [r3, #1]
    2120:	f002 0207 	and.w	r2, r2, #7
    2124:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    2126:	785b      	ldrb	r3, [r3, #1]
	if (level) {
    2128:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    212c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2130:	4b67      	ldr	r3, [pc, #412]	; (22d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x24c>)
    2132:	bf14      	ite	ne
    2134:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2138:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    213c:	4b62      	ldr	r3, [pc, #392]	; (22c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x244>)
    213e:	785b      	ldrb	r3, [r3, #1]
    2140:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2144:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2148:	4b61      	ldr	r3, [pc, #388]	; (22d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x24c>)
    214a:	bf14      	ite	ne
    214c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2150:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    2154:	4b5c      	ldr	r3, [pc, #368]	; (22c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x244>)
    2156:	785b      	ldrb	r3, [r3, #1]
    2158:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    215c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2160:	4b5b      	ldr	r3, [pc, #364]	; (22d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x24c>)
    2162:	bf14      	ite	ne
    2164:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2168:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    216c:	2302      	movs	r3, #2
    216e:	f10d 0216 	add.w	r2, sp, #22
    2172:	2100      	movs	r1, #0
    2174:	485c      	ldr	r0, [pc, #368]	; (22e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x264>)
    2176:	4e5d      	ldr	r6, [pc, #372]	; (22ec <grid_module_bu16_revb_hardware_transfer_complete_cb+0x268>)
    2178:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    217a:	2302      	movs	r3, #2
    217c:	aa05      	add	r2, sp, #20
    217e:	2100      	movs	r1, #0
    2180:	485b      	ldr	r0, [pc, #364]	; (22f0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x26c>)
    2182:	47b0      	blx	r6
	

	
	if (adcresult_0>10000){
    2184:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    2188:	f242 7310 	movw	r3, #10000	; 0x2710
    218c:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    218e:	bf8c      	ite	hi
    2190:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    2192:	237f      	movls	r3, #127	; 0x7f
    2194:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	
	if (adcresult_1>10000){
    2198:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    219c:	f242 7310 	movw	r3, #10000	; 0x2710
    21a0:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    21a2:	bf8c      	ite	hi
    21a4:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    21a6:	237f      	movls	r3, #127	; 0x7f
    21a8:	f8ad 3014 	strh.w	r3, [sp, #20]
	}
	
	CRITICAL_SECTION_ENTER()
    21ac:	a802      	add	r0, sp, #8
    21ae:	4b47      	ldr	r3, [pc, #284]	; (22cc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    21b0:	4798      	blx	r3

	if (adcresult_0 != mod->report_array[adc_index_0+1].helper[0]){
    21b2:	1c6e      	adds	r6, r5, #1
    21b4:	0136      	lsls	r6, r6, #4
    21b6:	4b48      	ldr	r3, [pc, #288]	; (22d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>)
    21b8:	685b      	ldr	r3, [r3, #4]
    21ba:	4433      	add	r3, r6
    21bc:	68da      	ldr	r2, [r3, #12]
    21be:	7812      	ldrb	r2, [r2, #0]
    21c0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    21c4:	4291      	cmp	r1, r2
    21c6:	d02f      	beq.n	2228 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1a4>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    21c8:	2a00      	cmp	r2, #0
    21ca:	bf0c      	ite	eq
    21cc:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    21d0:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[5], 2, command);
    21d4:	6858      	ldr	r0, [r3, #4]
    21d6:	bf0c      	ite	eq
    21d8:	2290      	moveq	r2, #144	; 0x90
    21da:	2280      	movne	r2, #128	; 0x80
    21dc:	2102      	movs	r1, #2
    21de:	3005      	adds	r0, #5
    21e0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 22dc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x258>
    21e4:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    21e6:	4f3c      	ldr	r7, [pc, #240]	; (22d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>)
    21e8:	687b      	ldr	r3, [r7, #4]
    21ea:	4433      	add	r3, r6
    21ec:	6858      	ldr	r0, [r3, #4]
    21ee:	462a      	mov	r2, r5
    21f0:	2102      	movs	r1, #2
    21f2:	3007      	adds	r0, #7
    21f4:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, velocity);
    21f6:	687b      	ldr	r3, [r7, #4]
    21f8:	4433      	add	r3, r6
    21fa:	6858      	ldr	r0, [r3, #4]
    21fc:	464a      	mov	r2, r9
    21fe:	2102      	movs	r1, #2
    2200:	3009      	adds	r0, #9
    2202:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	4433      	add	r3, r6
    2208:	6858      	ldr	r0, [r3, #4]
    220a:	ea4f 0249 	mov.w	r2, r9, lsl #1
    220e:	2102      	movs	r1, #2
    2210:	3015      	adds	r0, #21
    2212:	47c0      	blx	r8
		mod->report_array[adc_index_0+1].helper[0] = velocity;
    2214:	687b      	ldr	r3, [r7, #4]
    2216:	441e      	add	r6, r3
    2218:	68f3      	ldr	r3, [r6, #12]
    221a:	f883 9000 	strb.w	r9, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    221e:	1c69      	adds	r1, r5, #1
    2220:	b2c9      	uxtb	r1, r1
    2222:	4638      	mov	r0, r7
    2224:	4b2e      	ldr	r3, [pc, #184]	; (22e0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>)
    2226:	4798      	blx	r3
	}
	
	CRITICAL_SECTION_LEAVE()
    2228:	a802      	add	r0, sp, #8
    222a:	4b2a      	ldr	r3, [pc, #168]	; (22d4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x250>)
    222c:	4798      	blx	r3
	
	
	CRITICAL_SECTION_ENTER()
    222e:	a803      	add	r0, sp, #12
    2230:	4b26      	ldr	r3, [pc, #152]	; (22cc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    2232:	4798      	blx	r3

	if (adcresult_1 != mod->report_array[adc_index_1+1].helper[0]){
    2234:	1c65      	adds	r5, r4, #1
    2236:	012d      	lsls	r5, r5, #4
    2238:	4b27      	ldr	r3, [pc, #156]	; (22d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>)
    223a:	685b      	ldr	r3, [r3, #4]
    223c:	442b      	add	r3, r5
    223e:	68da      	ldr	r2, [r3, #12]
    2240:	7812      	ldrb	r2, [r2, #0]
    2242:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    2246:	4291      	cmp	r1, r2
    2248:	d02e      	beq.n	22a8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x224>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    224a:	2a00      	cmp	r2, #0
    224c:	bf0c      	ite	eq
    224e:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    2252:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[5], 2, command);
    2256:	6858      	ldr	r0, [r3, #4]
    2258:	bf0c      	ite	eq
    225a:	2290      	moveq	r2, #144	; 0x90
    225c:	2280      	movne	r2, #128	; 0x80
    225e:	2102      	movs	r1, #2
    2260:	3005      	adds	r0, #5
    2262:	4f1e      	ldr	r7, [pc, #120]	; (22dc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x258>)
    2264:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    2266:	4e1c      	ldr	r6, [pc, #112]	; (22d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>)
    2268:	6873      	ldr	r3, [r6, #4]
    226a:	442b      	add	r3, r5
    226c:	6858      	ldr	r0, [r3, #4]
    226e:	4622      	mov	r2, r4
    2270:	2102      	movs	r1, #2
    2272:	3007      	adds	r0, #7
    2274:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, velocity);
    2276:	6873      	ldr	r3, [r6, #4]
    2278:	442b      	add	r3, r5
    227a:	6858      	ldr	r0, [r3, #4]
    227c:	4642      	mov	r2, r8
    227e:	2102      	movs	r1, #2
    2280:	3009      	adds	r0, #9
    2282:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    2284:	6873      	ldr	r3, [r6, #4]
    2286:	442b      	add	r3, r5
    2288:	6858      	ldr	r0, [r3, #4]
    228a:	ea4f 0248 	mov.w	r2, r8, lsl #1
    228e:	2102      	movs	r1, #2
    2290:	3015      	adds	r0, #21
    2292:	47b8      	blx	r7
		
		mod->report_array[adc_index_1+1].helper[0] = velocity;
    2294:	6873      	ldr	r3, [r6, #4]
    2296:	441d      	add	r5, r3
    2298:	68eb      	ldr	r3, [r5, #12]
    229a:	f883 8000 	strb.w	r8, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    229e:	1c61      	adds	r1, r4, #1
    22a0:	b2c9      	uxtb	r1, r1
    22a2:	4630      	mov	r0, r6
    22a4:	4b0e      	ldr	r3, [pc, #56]	; (22e0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>)
    22a6:	4798      	blx	r3
	}
	
	CRITICAL_SECTION_LEAVE()
    22a8:	a803      	add	r0, sp, #12
    22aa:	4b0a      	ldr	r3, [pc, #40]	; (22d4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x250>)
    22ac:	4798      	blx	r3
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    22ae:	2200      	movs	r2, #0
    22b0:	4b05      	ldr	r3, [pc, #20]	; (22c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x244>)
    22b2:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    22b4:	4b0f      	ldr	r3, [pc, #60]	; (22f4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x270>)
    22b6:	4798      	blx	r3
}
    22b8:	b007      	add	sp, #28
    22ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mod->report_array[report_index].helper[0] = 0;
    22be:	2200      	movs	r2, #0
    22c0:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    22c2:	2281      	movs	r2, #129	; 0x81
    22c4:	e70a      	b.n	20dc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x58>
    22c6:	bf00      	nop
    22c8:	20000654 	.word	0x20000654
    22cc:	000040c9 	.word	0x000040c9
    22d0:	41008000 	.word	0x41008000
    22d4:	000040d7 	.word	0x000040d7
    22d8:	20001650 	.word	0x20001650
    22dc:	000037b5 	.word	0x000037b5
    22e0:	00003bb3 	.word	0x00003bb3
    22e4:	20000300 	.word	0x20000300
    22e8:	20001008 	.word	0x20001008
    22ec:	00003fc1 	.word	0x00003fc1
    22f0:	200011d8 	.word	0x200011d8
    22f4:	00002069 	.word	0x00002069

000022f8 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    22f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    22fa:	4f0b      	ldr	r7, [pc, #44]	; (2328 <grid_module_bu16_revb_hardware_init+0x30>)
    22fc:	4c0b      	ldr	r4, [pc, #44]	; (232c <grid_module_bu16_revb_hardware_init+0x34>)
    22fe:	463b      	mov	r3, r7
    2300:	2200      	movs	r2, #0
    2302:	4611      	mov	r1, r2
    2304:	4620      	mov	r0, r4
    2306:	4e0a      	ldr	r6, [pc, #40]	; (2330 <grid_module_bu16_revb_hardware_init+0x38>)
    2308:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    230a:	4d0a      	ldr	r5, [pc, #40]	; (2334 <grid_module_bu16_revb_hardware_init+0x3c>)
    230c:	463b      	mov	r3, r7
    230e:	2200      	movs	r2, #0
    2310:	4611      	mov	r1, r2
    2312:	4628      	mov	r0, r5
    2314:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    2316:	2100      	movs	r1, #0
    2318:	4620      	mov	r0, r4
    231a:	4c07      	ldr	r4, [pc, #28]	; (2338 <grid_module_bu16_revb_hardware_init+0x40>)
    231c:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    231e:	2100      	movs	r1, #0
    2320:	4628      	mov	r0, r5
    2322:	47a0      	blx	r4
    2324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2326:	bf00      	nop
    2328:	00002085 	.word	0x00002085
    232c:	20001008 	.word	0x20001008
    2330:	00003f41 	.word	0x00003f41
    2334:	200011d8 	.word	0x200011d8
    2338:	00003f01 	.word	0x00003f01

0000233c <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2340:	b09b      	sub	sp, #108	; 0x6c
    2342:	4682      	mov	sl, r0

	grid_led_init(&grid_led_state, 16);
    2344:	2110      	movs	r1, #16
    2346:	483b      	ldr	r0, [pc, #236]	; (2434 <grid_module_bu16_revb_init+0xf8>)
    2348:	4b3b      	ldr	r3, [pc, #236]	; (2438 <grid_module_bu16_revb_init+0xfc>)
    234a:	4798      	blx	r3
	grid_ui_model_init(mod, 17);
    234c:	2111      	movs	r1, #17
    234e:	4650      	mov	r0, sl
    2350:	4b3a      	ldr	r3, [pc, #232]	; (243c <grid_module_bu16_revb_init+0x100>)
    2352:	4798      	blx	r3

 	
	if (mod->report_array == NULL)	{
    2354:	f8da 3004 	ldr.w	r3, [sl, #4]
    2358:	2b00      	cmp	r3, #0
    235a:	d067      	beq.n	242c <grid_module_bu16_revb_init+0xf0>
    235c:	2501      	movs	r5, #1
    235e:	2400      	movs	r4, #0
			);
			
		}
		else{
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2360:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 2460 <grid_module_bu16_revb_init+0x124>

			);
			
		}
		
		uint8_t payload_length = strlen(payload_template);
    2364:	4f36      	ldr	r7, [pc, #216]	; (2440 <grid_module_bu16_revb_init+0x104>)
    2366:	e028      	b.n	23ba <grid_module_bu16_revb_init+0x7e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    2368:	2303      	movs	r3, #3
    236a:	9303      	str	r3, [sp, #12]
    236c:	2339      	movs	r3, #57	; 0x39
    236e:	9302      	str	r3, [sp, #8]
    2370:	2383      	movs	r3, #131	; 0x83
    2372:	9301      	str	r3, [sp, #4]
    2374:	2380      	movs	r3, #128	; 0x80
    2376:	9300      	str	r3, [sp, #0]
    2378:	2301      	movs	r3, #1
    237a:	2202      	movs	r2, #2
    237c:	4931      	ldr	r1, [pc, #196]	; (2444 <grid_module_bu16_revb_init+0x108>)
    237e:	a812      	add	r0, sp, #72	; 0x48
    2380:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    2382:	a812      	add	r0, sp, #72	; 0x48
    2384:	47b8      	blx	r7
    2386:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    2388:	ae0d      	add	r6, sp, #52	; 0x34
    238a:	4b2f      	ldr	r3, [pc, #188]	; (2448 <grid_module_bu16_revb_init+0x10c>)
    238c:	681b      	ldr	r3, [r3, #0]
    238e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2392:	0c1b      	lsrs	r3, r3, #16
    2394:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		
		uint8_t helper_length = strlen(helper_template);
    2398:	4630      	mov	r0, r6
    239a:	47b8      	blx	r7
		uint8_t error = grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    239c:	b2c0      	uxtb	r0, r0
    239e:	9001      	str	r0, [sp, #4]
    23a0:	9600      	str	r6, [sp, #0]
    23a2:	fa5f f388 	uxtb.w	r3, r8
    23a6:	aa12      	add	r2, sp, #72	; 0x48
    23a8:	2100      	movs	r1, #0
    23aa:	4650      	mov	r0, sl
    23ac:	4e27      	ldr	r6, [pc, #156]	; (244c <grid_module_bu16_revb_init+0x110>)
    23ae:	47b0      	blx	r6
		
		if (error != 0){
    23b0:	2800      	cmp	r0, #0
    23b2:	d13b      	bne.n	242c <grid_module_bu16_revb_init+0xf0>
    23b4:	3401      	adds	r4, #1
    23b6:	3501      	adds	r5, #1
    23b8:	b2ed      	uxtb	r5, r5
		if (i == 0){
    23ba:	f014 08ff 	ands.w	r8, r4, #255	; 0xff
    23be:	d0d3      	beq.n	2368 <grid_module_bu16_revb_init+0x2c>
    23c0:	1e60      	subs	r0, r4, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    23c2:	2103      	movs	r1, #3
    23c4:	910b      	str	r1, [sp, #44]	; 0x2c
    23c6:	2300      	movs	r3, #0
    23c8:	930a      	str	r3, [sp, #40]	; 0x28
    23ca:	9009      	str	r0, [sp, #36]	; 0x24
    23cc:	2263      	movs	r2, #99	; 0x63
    23ce:	9208      	str	r2, [sp, #32]
    23d0:	9307      	str	r3, [sp, #28]
    23d2:	9106      	str	r1, [sp, #24]
    23d4:	2202      	movs	r2, #2
    23d6:	9205      	str	r2, [sp, #20]
    23d8:	9104      	str	r1, [sp, #16]
    23da:	9303      	str	r3, [sp, #12]
    23dc:	9002      	str	r0, [sp, #8]
    23de:	2190      	movs	r1, #144	; 0x90
    23e0:	9101      	str	r1, [sp, #4]
    23e2:	9300      	str	r3, [sp, #0]
    23e4:	491a      	ldr	r1, [pc, #104]	; (2450 <grid_module_bu16_revb_init+0x114>)
    23e6:	a812      	add	r0, sp, #72	; 0x48
    23e8:	47d8      	blx	fp
		uint8_t payload_length = strlen(payload_template);
    23ea:	a812      	add	r0, sp, #72	; 0x48
    23ec:	47b8      	blx	r7
    23ee:	4681      	mov	r9, r0
		sprintf(helper_template, "00"); // LASTVALUE
    23f0:	ae0d      	add	r6, sp, #52	; 0x34
    23f2:	4b15      	ldr	r3, [pc, #84]	; (2448 <grid_module_bu16_revb_init+0x10c>)
    23f4:	681b      	ldr	r3, [r3, #0]
    23f6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    23fa:	0c1b      	lsrs	r3, r3, #16
    23fc:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		uint8_t helper_length = strlen(helper_template);
    2400:	4630      	mov	r0, r6
    2402:	47b8      	blx	r7
		uint8_t error = grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2404:	b2c0      	uxtb	r0, r0
    2406:	9001      	str	r0, [sp, #4]
    2408:	9600      	str	r6, [sp, #0]
    240a:	fa5f f389 	uxtb.w	r3, r9
    240e:	aa12      	add	r2, sp, #72	; 0x48
    2410:	4641      	mov	r1, r8
    2412:	4650      	mov	r0, sl
    2414:	4e0d      	ldr	r6, [pc, #52]	; (244c <grid_module_bu16_revb_init+0x110>)
    2416:	47b0      	blx	r6
		if (error != 0){
    2418:	b940      	cbnz	r0, 242c <grid_module_bu16_revb_init+0xf0>
	for(uint8_t i=0; i<17; i++){
    241a:	2d10      	cmp	r5, #16
    241c:	d9ca      	bls.n	23b4 <grid_module_bu16_revb_init+0x78>
			
		}

	}
			
	grid_module_bu16_revb_hardware_init();
    241e:	4b0d      	ldr	r3, [pc, #52]	; (2454 <grid_module_bu16_revb_init+0x118>)
    2420:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    2422:	4b0d      	ldr	r3, [pc, #52]	; (2458 <grid_module_bu16_revb_init+0x11c>)
    2424:	4798      	blx	r3


	grid_module_init_animation(&grid_led_state);
    2426:	4803      	ldr	r0, [pc, #12]	; (2434 <grid_module_bu16_revb_init+0xf8>)
    2428:	4b0c      	ldr	r3, [pc, #48]	; (245c <grid_module_bu16_revb_init+0x120>)
    242a:	4798      	blx	r3
	
	
};
    242c:	b01b      	add	sp, #108	; 0x6c
    242e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2432:	bf00      	nop
    2434:	20002428 	.word	0x20002428
    2438:	00001d89 	.word	0x00001d89
    243c:	00003add 	.word	0x00003add
    2440:	0000b441 	.word	0x0000b441
    2444:	0000bc00 	.word	0x0000bc00
    2448:	0000bc18 	.word	0x0000bc18
    244c:	00003af5 	.word	0x00003af5
    2450:	0000bc1c 	.word	0x0000bc1c
    2454:	000022f9 	.word	0x000022f9
    2458:	00002069 	.word	0x00002069
    245c:	00001f89 	.word	0x00001f89
    2460:	0000b3f9 	.word	0x0000b3f9

00002464 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    2464:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2466:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    246a:	4b06      	ldr	r3, [pc, #24]	; (2484 <grid_module_en16_reva_hardware_start_transfer+0x20>)
    246c:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    246e:	4c06      	ldr	r4, [pc, #24]	; (2488 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    2470:	4620      	mov	r0, r4
    2472:	4b06      	ldr	r3, [pc, #24]	; (248c <grid_module_en16_reva_hardware_start_transfer+0x28>)
    2474:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    2476:	2308      	movs	r3, #8
    2478:	4a05      	ldr	r2, [pc, #20]	; (2490 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    247a:	4906      	ldr	r1, [pc, #24]	; (2494 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    247c:	4620      	mov	r0, r4
    247e:	4c06      	ldr	r4, [pc, #24]	; (2498 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    2480:	47a0      	blx	r4
    2482:	bd10      	pop	{r4, pc}
    2484:	41008000 	.word	0x41008000
    2488:	20000eb8 	.word	0x20000eb8
    248c:	00004549 	.word	0x00004549
    2490:	2000145c 	.word	0x2000145c
    2494:	20000310 	.word	0x20000310
    2498:	000045ad 	.word	0x000045ad

0000249c <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    249c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24a0:	b087      	sub	sp, #28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    24a6:	4bbc      	ldr	r3, [pc, #752]	; (2798 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2fc>)
    24a8:	615a      	str	r2, [r3, #20]
    24aa:	4ebc      	ldr	r6, [pc, #752]	; (279c <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>)
    24ac:	2700      	movs	r7, #0
    24ae:	e019      	b.n	24e4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x48>
					
				if (phase_b == 0){
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = !phase_a;
				}
				else{
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = phase_a;
    24b0:	4abb      	ldr	r2, [pc, #748]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    24b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    24b6:	7155      	strb	r5, [r2, #5]
				}
					
				if (phase_a && phase_b){
    24b8:	2d00      	cmp	r5, #0
    24ba:	f040 810d 	bne.w	26d8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x23c>
	
					CRITICAL_SECTION_LEAVE()
				}
			}
				
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    24be:	4ab8      	ldr	r2, [pc, #736]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    24c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    24c4:	79d2      	ldrb	r2, [r2, #7]
    24c6:	42a2      	cmp	r2, r4
    24c8:	d007      	beq.n	24da <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e>
					
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    24ca:	4ab5      	ldr	r2, [pc, #724]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    24cc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    24d0:	71d4      	strb	r4, [r2, #7]
					
				if (phase_a == 0){
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = phase_b;
    24d2:	4ab3      	ldr	r2, [pc, #716]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    24d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    24d8:	715c      	strb	r4, [r3, #5]
    24da:	3701      	adds	r7, #1
    24dc:	3601      	adds	r6, #1
	for (uint8_t i=0; i<16; i++){
    24de:	2f10      	cmp	r7, #16
    24e0:	f000 817f 	beq.w	27e2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x346>
    24e4:	b2fa      	uxtb	r2, r7
		uint8_t new_value = (UI_SPI_RX_BUFFER[i/2]>>(4*(i%2)))&0x0F;
    24e6:	0853      	lsrs	r3, r2, #1
    24e8:	49ae      	ldr	r1, [pc, #696]	; (27a4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x308>)
    24ea:	5ccc      	ldrb	r4, [r1, r3]
    24ec:	f002 0301 	and.w	r3, r2, #1
    24f0:	009b      	lsls	r3, r3, #2
    24f2:	411c      	asrs	r4, r3
    24f4:	b2e4      	uxtb	r4, r4
    24f6:	f004 010f 	and.w	r1, r4, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[i];
    24fa:	4bab      	ldr	r3, [pc, #684]	; (27a8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x30c>)
    24fc:	5ddb      	ldrb	r3, [r3, r7]
    24fe:	b2db      	uxtb	r3, r3
		if (old_value != new_value){
    2500:	4299      	cmp	r1, r3
    2502:	d0ea      	beq.n	24da <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e>
			UI_SPI_DEBUG = i;
    2504:	4ba9      	ldr	r3, [pc, #676]	; (27ac <grid_module_en16_reva_hardware_transfer_complete_cb+0x310>)
    2506:	701a      	strb	r2, [r3, #0]
			uint8_t button_value = new_value>>2;
    2508:	088a      	lsrs	r2, r1, #2
			uint8_t phase_a = (new_value>>1)&1;
    250a:	f3c1 0540 	ubfx	r5, r1, #1, #1
			uint8_t phase_b = (new_value)&1;
    250e:	f004 0401 	and.w	r4, r4, #1
    2512:	46b0      	mov	r8, r6
			if (button_value != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value){
    2514:	7831      	ldrb	r1, [r6, #0]
    2516:	4ba2      	ldr	r3, [pc, #648]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    2518:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    251c:	785b      	ldrb	r3, [r3, #1]
    251e:	4293      	cmp	r3, r2
    2520:	d050      	beq.n	25c4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x128>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_changed = 1;
    2522:	4b9f      	ldr	r3, [pc, #636]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    2524:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2528:	2101      	movs	r1, #1
    252a:	7099      	strb	r1, [r3, #2]
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value = new_value>>2;
    252c:	705a      	strb	r2, [r3, #1]
				CRITICAL_SECTION_ENTER()
    252e:	a801      	add	r0, sp, #4
    2530:	4b9f      	ldr	r3, [pc, #636]	; (27b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x314>)
    2532:	4798      	blx	r3
				if (mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] == 0){
    2534:	7833      	ldrb	r3, [r6, #0]
    2536:	1c5a      	adds	r2, r3, #1
    2538:	4b9e      	ldr	r3, [pc, #632]	; (27b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x318>)
    253a:	685b      	ldr	r3, [r3, #4]
    253c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2540:	68da      	ldr	r2, [r3, #12]
    2542:	7812      	ldrb	r2, [r2, #0]
					velocity = 0;
    2544:	2a00      	cmp	r2, #0
    2546:	bf0c      	ite	eq
    2548:	f04f 0b7f 	moveq.w	fp, #127	; 0x7f
    254c:	f04f 0b00 	movne.w	fp, #0
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[5], 2, command);
    2550:	6858      	ldr	r0, [r3, #4]
    2552:	bf0c      	ite	eq
    2554:	2290      	moveq	r2, #144	; 0x90
    2556:	2280      	movne	r2, #128	; 0x80
    2558:	2102      	movs	r1, #2
    255a:	3005      	adds	r0, #5
    255c:	f8df a260 	ldr.w	sl, [pc, #608]	; 27c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x324>
    2560:	47d0      	blx	sl
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    2562:	7832      	ldrb	r2, [r6, #0]
    2564:	f8df 924c 	ldr.w	r9, [pc, #588]	; 27b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x318>
    2568:	f8d9 3004 	ldr.w	r3, [r9, #4]
    256c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2570:	6958      	ldr	r0, [r3, #20]
    2572:	2102      	movs	r1, #2
    2574:	3007      	adds	r0, #7
    2576:	47d0      	blx	sl
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[9], 2, velocity);
    2578:	7832      	ldrb	r2, [r6, #0]
    257a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    257e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2582:	6958      	ldr	r0, [r3, #20]
    2584:	465a      	mov	r2, fp
    2586:	2102      	movs	r1, #2
    2588:	3009      	adds	r0, #9
    258a:	47d0      	blx	sl
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[21], 2, actuator);
    258c:	7832      	ldrb	r2, [r6, #0]
    258e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2592:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2596:	6958      	ldr	r0, [r3, #20]
    2598:	ea4f 024b 	mov.w	r2, fp, lsl #1
    259c:	2102      	movs	r1, #2
    259e:	3015      	adds	r0, #21
    25a0:	47d0      	blx	sl
				mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] = velocity;
    25a2:	7832      	ldrb	r2, [r6, #0]
    25a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    25a8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    25ac:	69db      	ldr	r3, [r3, #28]
    25ae:	f883 b000 	strb.w	fp, [r3]
				grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1);
    25b2:	7831      	ldrb	r1, [r6, #0]
    25b4:	3101      	adds	r1, #1
    25b6:	b2c9      	uxtb	r1, r1
    25b8:	4648      	mov	r0, r9
    25ba:	4b7f      	ldr	r3, [pc, #508]	; (27b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x31c>)
    25bc:	4798      	blx	r3
				CRITICAL_SECTION_LEAVE()
    25be:	a801      	add	r0, sp, #4
    25c0:	4b7e      	ldr	r3, [pc, #504]	; (27bc <grid_module_en16_reva_hardware_transfer_complete_cb+0x320>)
    25c2:	4798      	blx	r3
			if (phase_a != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous){
    25c4:	f898 3000 	ldrb.w	r3, [r8]
    25c8:	4a75      	ldr	r2, [pc, #468]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    25ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    25ce:	7992      	ldrb	r2, [r2, #6]
    25d0:	42aa      	cmp	r2, r5
    25d2:	f000 80f7 	beq.w	27c4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous = phase_a;
    25d6:	4a72      	ldr	r2, [pc, #456]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    25d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    25dc:	7195      	strb	r5, [r2, #6]
				if (phase_b == 0){
    25de:	2c00      	cmp	r4, #0
    25e0:	f47f af66 	bne.w	24b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x14>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = !phase_a;
    25e4:	4a6e      	ldr	r2, [pc, #440]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    25e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    25ea:	2d00      	cmp	r5, #0
    25ec:	bf0c      	ite	eq
    25ee:	2101      	moveq	r1, #1
    25f0:	2100      	movne	r1, #0
    25f2:	7151      	strb	r1, [r2, #5]
				if (phase_a && phase_b){
    25f4:	f000 812d 	beq.w	2852 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b6>
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    25f8:	f898 3000 	ldrb.w	r3, [r8]
    25fc:	4a68      	ldr	r2, [pc, #416]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    25fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2602:	79d2      	ldrb	r2, [r2, #7]
    2604:	42a2      	cmp	r2, r4
    2606:	f43f af68 	beq.w	24da <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    260a:	4a65      	ldr	r2, [pc, #404]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    260c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2610:	71d4      	strb	r4, [r2, #7]
				}
				else{
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = !phase_b;
    2612:	2c00      	cmp	r4, #0
    2614:	bf0c      	ite	eq
    2616:	2101      	moveq	r1, #1
    2618:	2100      	movne	r1, #0
    261a:	4a61      	ldr	r2, [pc, #388]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    261c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2620:	7151      	strb	r1, [r2, #5]
				}
					
				if (phase_a && phase_b){
    2622:	f43f af5a 	beq.w	24da <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e>

					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction*8 -4;
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value %= 128;
    2626:	4c5e      	ldr	r4, [pc, #376]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    2628:	4613      	mov	r3, r2
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction*8 -4;
    262a:	78d2      	ldrb	r2, [r2, #3]
    262c:	3a04      	subs	r2, #4
    262e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value %= 128;
    2632:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    2636:	70da      	strb	r2, [r3, #3]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_changed = 1;
    2638:	2201      	movs	r2, #1
    263a:	711a      	strb	r2, [r3, #4]
					
										CRITICAL_SECTION_ENTER()
    263c:	a803      	add	r0, sp, #12
    263e:	4b5c      	ldr	r3, [pc, #368]	; (27b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x314>)
    2640:	4798      	blx	r3
					
					uint8_t command = GRID_MSG_COMMAND_MIDI_CONTROLCHANGE;
					uint8_t value = grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    2642:	f898 3000 	ldrb.w	r3, [r8]
    2646:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    264a:	78e4      	ldrb	r4, [r4, #3]
					uint8_t actuator = 2*value;
					
					if (value != mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0]){
    264c:	3311      	adds	r3, #17
    264e:	4a59      	ldr	r2, [pc, #356]	; (27b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x318>)
    2650:	6852      	ldr	r2, [r2, #4]
    2652:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2656:	68da      	ldr	r2, [r3, #12]
    2658:	7812      	ldrb	r2, [r2, #0]
    265a:	42a2      	cmp	r2, r4
    265c:	d038      	beq.n	26d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x234>
					
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[5], 2, command);
    265e:	6858      	ldr	r0, [r3, #4]
    2660:	22b0      	movs	r2, #176	; 0xb0
    2662:	2102      	movs	r1, #2
    2664:	3005      	adds	r0, #5
    2666:	f8df 9158 	ldr.w	r9, [pc, #344]	; 27c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x324>
    266a:	47c8      	blx	r9
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    266c:	f898 2000 	ldrb.w	r2, [r8]
    2670:	4d50      	ldr	r5, [pc, #320]	; (27b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x318>)
    2672:	686b      	ldr	r3, [r5, #4]
    2674:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2678:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    267c:	2102      	movs	r1, #2
    267e:	3007      	adds	r0, #7
    2680:	47c8      	blx	r9
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[9], 2, value);
    2682:	f898 2000 	ldrb.w	r2, [r8]
    2686:	686b      	ldr	r3, [r5, #4]
    2688:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    268c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    2690:	4622      	mov	r2, r4
    2692:	2102      	movs	r1, #2
    2694:	3009      	adds	r0, #9
    2696:	47c8      	blx	r9
					uint8_t actuator = 2*value;
    2698:	0062      	lsls	r2, r4, #1
						
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[21], 2, actuator);
    269a:	f898 1000 	ldrb.w	r1, [r8]
    269e:	686b      	ldr	r3, [r5, #4]
    26a0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    26a4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    26a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    26ac:	2102      	movs	r1, #2
    26ae:	3015      	adds	r0, #21
    26b0:	47c8      	blx	r9
						mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = value;
    26b2:	f898 2000 	ldrb.w	r2, [r8]
    26b6:	686b      	ldr	r3, [r5, #4]
    26b8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    26bc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    26c0:	701c      	strb	r4, [r3, #0]
						
						grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16);
    26c2:	f898 1000 	ldrb.w	r1, [r8]
    26c6:	3111      	adds	r1, #17
    26c8:	b2c9      	uxtb	r1, r1
    26ca:	4628      	mov	r0, r5
    26cc:	4b3a      	ldr	r3, [pc, #232]	; (27b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x31c>)
    26ce:	4798      	blx	r3
						
					}
	
					CRITICAL_SECTION_LEAVE()
    26d0:	a803      	add	r0, sp, #12
    26d2:	4b3a      	ldr	r3, [pc, #232]	; (27bc <grid_module_en16_reva_hardware_transfer_complete_cb+0x320>)
    26d4:	4798      	blx	r3
    26d6:	e700      	b.n	24da <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value %= 128;
    26d8:	4d31      	ldr	r5, [pc, #196]	; (27a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    26da:	4613      	mov	r3, r2
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction*8 -4;
    26dc:	78d2      	ldrb	r2, [r2, #3]
    26de:	3a04      	subs	r2, #4
    26e0:	7959      	ldrb	r1, [r3, #5]
    26e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value %= 128;
    26e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    26ea:	70da      	strb	r2, [r3, #3]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_changed = 1;
    26ec:	2201      	movs	r2, #1
    26ee:	711a      	strb	r2, [r3, #4]
					CRITICAL_SECTION_ENTER()
    26f0:	a802      	add	r0, sp, #8
    26f2:	4b2f      	ldr	r3, [pc, #188]	; (27b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x314>)
    26f4:	4798      	blx	r3
					uint8_t value = grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    26f6:	f898 3000 	ldrb.w	r3, [r8]
    26fa:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    26fe:	78ed      	ldrb	r5, [r5, #3]
					if (value != mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0]){
    2700:	3311      	adds	r3, #17
    2702:	4a2c      	ldr	r2, [pc, #176]	; (27b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x318>)
    2704:	6852      	ldr	r2, [r2, #4]
    2706:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    270a:	68da      	ldr	r2, [r3, #12]
    270c:	7812      	ldrb	r2, [r2, #0]
    270e:	42aa      	cmp	r2, r5
    2710:	d03d      	beq.n	278e <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f2>
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[5], 2, command);
    2712:	6858      	ldr	r0, [r3, #4]
    2714:	22b0      	movs	r2, #176	; 0xb0
    2716:	2102      	movs	r1, #2
    2718:	3005      	adds	r0, #5
    271a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 27c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x324>
    271e:	47d0      	blx	sl
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    2720:	f898 2000 	ldrb.w	r2, [r8]
    2724:	f8df 908c 	ldr.w	r9, [pc, #140]	; 27b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x318>
    2728:	f8d9 3004 	ldr.w	r3, [r9, #4]
    272c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2730:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    2734:	2102      	movs	r1, #2
    2736:	3007      	adds	r0, #7
    2738:	47d0      	blx	sl
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[9], 2, value);
    273a:	f898 2000 	ldrb.w	r2, [r8]
    273e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2742:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2746:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    274a:	462a      	mov	r2, r5
    274c:	2102      	movs	r1, #2
    274e:	3009      	adds	r0, #9
    2750:	47d0      	blx	sl
					uint8_t actuator = 2*value;
    2752:	006a      	lsls	r2, r5, #1
						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[21], 2, actuator);
    2754:	f898 1000 	ldrb.w	r1, [r8]
    2758:	f8d9 3004 	ldr.w	r3, [r9, #4]
    275c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    2760:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    2764:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2768:	2102      	movs	r1, #2
    276a:	3015      	adds	r0, #21
    276c:	47d0      	blx	sl
						mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = value;
    276e:	f898 2000 	ldrb.w	r2, [r8]
    2772:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2776:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    277a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    277e:	701d      	strb	r5, [r3, #0]
						grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16);
    2780:	f898 1000 	ldrb.w	r1, [r8]
    2784:	3111      	adds	r1, #17
    2786:	b2c9      	uxtb	r1, r1
    2788:	4648      	mov	r0, r9
    278a:	4b0b      	ldr	r3, [pc, #44]	; (27b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x31c>)
    278c:	4798      	blx	r3
					CRITICAL_SECTION_LEAVE()
    278e:	a802      	add	r0, sp, #8
    2790:	4b0a      	ldr	r3, [pc, #40]	; (27bc <grid_module_en16_reva_hardware_transfer_complete_cb+0x320>)
    2792:	4798      	blx	r3
    2794:	e730      	b.n	25f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x15c>
    2796:	bf00      	nop
    2798:	41008000 	.word	0x41008000
    279c:	20000320 	.word	0x20000320
    27a0:	200027e8 	.word	0x200027e8
    27a4:	2000145c 	.word	0x2000145c
    27a8:	20001444 	.word	0x20001444
    27ac:	2000142c 	.word	0x2000142c
    27b0:	000040c9 	.word	0x000040c9
    27b4:	20001650 	.word	0x20001650
    27b8:	00003bb3 	.word	0x00003bb3
    27bc:	000040d7 	.word	0x000040d7
    27c0:	000037b5 	.word	0x000037b5
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    27c4:	4a29      	ldr	r2, [pc, #164]	; (286c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d0>)
    27c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    27ca:	79d2      	ldrb	r2, [r2, #7]
    27cc:	42a2      	cmp	r2, r4
    27ce:	f43f ae84 	beq.w	24da <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    27d2:	4a26      	ldr	r2, [pc, #152]	; (286c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d0>)
    27d4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    27d8:	71d4      	strb	r4, [r2, #7]
				if (phase_a == 0){
    27da:	2d00      	cmp	r5, #0
    27dc:	f47f af19 	bne.w	2612 <grid_module_en16_reva_hardware_transfer_complete_cb+0x176>
    27e0:	e677      	b.n	24d2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x36>
			
	}
		
	
	
	CRITICAL_SECTION_ENTER()
    27e2:	a804      	add	r0, sp, #16
    27e4:	4c22      	ldr	r4, [pc, #136]	; (2870 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d4>)
    27e6:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    27e8:	a805      	add	r0, sp, #20
    27ea:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    27ec:	4b21      	ldr	r3, [pc, #132]	; (2874 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d8>)
    27ee:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    27f2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    27f6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    27fa:	4054      	eors	r4, r2
    27fc:	400c      	ands	r4, r1
    27fe:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2800:	a805      	add	r0, sp, #20
    2802:	4b1d      	ldr	r3, [pc, #116]	; (2878 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3dc>)
    2804:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2806:	4b1d      	ldr	r3, [pc, #116]	; (287c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    2808:	685b      	ldr	r3, [r3, #4]
    280a:	68da      	ldr	r2, [r3, #12]
    280c:	7813      	ldrb	r3, [r2, #0]
    280e:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2812:	429c      	cmp	r4, r3
    2814:	d00e      	beq.n	2834 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2816:	b9c3      	cbnz	r3, 284a <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ae>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
			mod->report_array[report_index].helper[0] = 1;
    2818:	2301      	movs	r3, #1
    281a:	7013      	strb	r3, [r2, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    281c:	2280      	movs	r2, #128	; 0x80
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    281e:	4c17      	ldr	r4, [pc, #92]	; (287c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    2820:	6863      	ldr	r3, [r4, #4]
    2822:	6858      	ldr	r0, [r3, #4]
    2824:	2102      	movs	r1, #2
    2826:	3003      	adds	r0, #3
    2828:	4b15      	ldr	r3, [pc, #84]	; (2880 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>)
    282a:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    282c:	2100      	movs	r1, #0
    282e:	4620      	mov	r0, r4
    2830:	4b14      	ldr	r3, [pc, #80]	; (2884 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e8>)
    2832:	4798      	blx	r3
	}

	CRITICAL_SECTION_LEAVE()
    2834:	a804      	add	r0, sp, #16
    2836:	4b10      	ldr	r3, [pc, #64]	; (2878 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3dc>)
    2838:	4798      	blx	r3

		
	


	grid_module_en16_reva_hardware_transfer_complete = 0;
    283a:	2200      	movs	r2, #0
    283c:	4b12      	ldr	r3, [pc, #72]	; (2888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ec>)
    283e:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    2840:	4b12      	ldr	r3, [pc, #72]	; (288c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f0>)
    2842:	4798      	blx	r3
}
    2844:	b007      	add	sp, #28
    2846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod->report_array[report_index].helper[0] = 0;
    284a:	2300      	movs	r3, #0
    284c:	7013      	strb	r3, [r2, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    284e:	2281      	movs	r2, #129	; 0x81
    2850:	e7e5      	b.n	281e <grid_module_en16_reva_hardware_transfer_complete_cb+0x382>
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    2852:	4a06      	ldr	r2, [pc, #24]	; (286c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d0>)
    2854:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2858:	79d2      	ldrb	r2, [r2, #7]
    285a:	2a00      	cmp	r2, #0
    285c:	f43f ae3d 	beq.w	24da <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    2860:	4a02      	ldr	r2, [pc, #8]	; (286c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d0>)
    2862:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2866:	2100      	movs	r1, #0
    2868:	71d1      	strb	r1, [r2, #7]
    286a:	e632      	b.n	24d2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x36>
    286c:	200027e8 	.word	0x200027e8
    2870:	000040c9 	.word	0x000040c9
    2874:	41008000 	.word	0x41008000
    2878:	000040d7 	.word	0x000040d7
    287c:	20001650 	.word	0x20001650
    2880:	000037b5 	.word	0x000037b5
    2884:	00003bb3 	.word	0x00003bb3
    2888:	20002454 	.word	0x20002454
    288c:	00002465 	.word	0x00002465

00002890 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2890:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2892:	4b0c      	ldr	r3, [pc, #48]	; (28c4 <grid_module_en16_reva_hardware_init+0x34>)
    2894:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2898:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    289a:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    289c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    28a0:	629a      	str	r2, [r3, #40]	; 0x28
    28a2:	4a09      	ldr	r2, [pc, #36]	; (28c8 <grid_module_en16_reva_hardware_init+0x38>)
    28a4:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    28a6:	4c09      	ldr	r4, [pc, #36]	; (28cc <grid_module_en16_reva_hardware_init+0x3c>)
    28a8:	2103      	movs	r1, #3
    28aa:	4620      	mov	r0, r4
    28ac:	4b08      	ldr	r3, [pc, #32]	; (28d0 <grid_module_en16_reva_hardware_init+0x40>)
    28ae:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    28b0:	4908      	ldr	r1, [pc, #32]	; (28d4 <grid_module_en16_reva_hardware_init+0x44>)
    28b2:	4620      	mov	r0, r4
    28b4:	4b08      	ldr	r3, [pc, #32]	; (28d8 <grid_module_en16_reva_hardware_init+0x48>)
    28b6:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    28b8:	4a08      	ldr	r2, [pc, #32]	; (28dc <grid_module_en16_reva_hardware_init+0x4c>)
    28ba:	2100      	movs	r1, #0
    28bc:	4620      	mov	r0, r4
    28be:	4b08      	ldr	r3, [pc, #32]	; (28e0 <grid_module_en16_reva_hardware_init+0x50>)
    28c0:	4798      	blx	r3
    28c2:	bd10      	pop	{r4, pc}
    28c4:	41008000 	.word	0x41008000
    28c8:	c0000020 	.word	0xc0000020
    28cc:	20000eb8 	.word	0x20000eb8
    28d0:	00004571 	.word	0x00004571
    28d4:	20001440 	.word	0x20001440
    28d8:	00004659 	.word	0x00004659
    28dc:	0000249d 	.word	0x0000249d
    28e0:	00004615 	.word	0x00004615

000028e4 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    28e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28e8:	b09d      	sub	sp, #116	; 0x74
    28ea:	4604      	mov	r4, r0
    28ec:	900d      	str	r0, [sp, #52]	; 0x34
	
	mod->report_length = 1+16+16;
    28ee:	2321      	movs	r3, #33	; 0x21
    28f0:	7003      	strb	r3, [r0, #0]
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    28f2:	f44f 7004 	mov.w	r0, #528	; 0x210
    28f6:	4b4a      	ldr	r3, [pc, #296]	; (2a20 <grid_module_en16_reva_init+0x13c>)
    28f8:	4798      	blx	r3
    28fa:	6060      	str	r0, [r4, #4]
    28fc:	2501      	movs	r5, #1
    28fe:	2400      	movs	r4, #0
			);
				
		}

		
		uint8_t payload_length = strlen(payload_template);
    2900:	f8df 8144 	ldr.w	r8, [pc, #324]	; 2a48 <grid_module_en16_reva_init+0x164>

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    2904:	f8df b144 	ldr.w	fp, [pc, #324]	; 2a4c <grid_module_en16_reva_init+0x168>
		
		uint8_t helper_length = strlen(helper_template);

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2908:	f8df a144 	ldr.w	sl, [pc, #324]	; 2a50 <grid_module_en16_reva_init+0x16c>
    290c:	e055      	b.n	29ba <grid_module_en16_reva_init+0xd6>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c%",
    290e:	2303      	movs	r3, #3
    2910:	9303      	str	r3, [sp, #12]
    2912:	2339      	movs	r3, #57	; 0x39
    2914:	9302      	str	r3, [sp, #8]
    2916:	2383      	movs	r3, #131	; 0x83
    2918:	9301      	str	r3, [sp, #4]
    291a:	2380      	movs	r3, #128	; 0x80
    291c:	9300      	str	r3, [sp, #0]
    291e:	2301      	movs	r3, #1
    2920:	2202      	movs	r2, #2
    2922:	4940      	ldr	r1, [pc, #256]	; (2a24 <grid_module_en16_reva_init+0x140>)
    2924:	a814      	add	r0, sp, #80	; 0x50
    2926:	4e40      	ldr	r6, [pc, #256]	; (2a28 <grid_module_en16_reva_init+0x144>)
    2928:	47b0      	blx	r6
		uint8_t payload_length = strlen(payload_template);
    292a:	a814      	add	r0, sp, #80	; 0x50
    292c:	47c0      	blx	r8
    292e:	4607      	mov	r7, r0
		sprintf(helper_template, "00"); // LASTVALUE
    2930:	ae0f      	add	r6, sp, #60	; 0x3c
    2932:	f8db 3000 	ldr.w	r3, [fp]
    2936:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    293a:	0c1b      	lsrs	r3, r3, #16
    293c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		uint8_t helper_length = strlen(helper_template);
    2940:	4630      	mov	r0, r6
    2942:	47c0      	blx	r8
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2944:	b2c0      	uxtb	r0, r0
    2946:	9001      	str	r0, [sp, #4]
    2948:	9600      	str	r6, [sp, #0]
    294a:	b2fb      	uxtb	r3, r7
    294c:	aa14      	add	r2, sp, #80	; 0x50
    294e:	2100      	movs	r1, #0
    2950:	980d      	ldr	r0, [sp, #52]	; 0x34
    2952:	47d0      	blx	sl
    2954:	e02e      	b.n	29b4 <grid_module_en16_reva_init+0xd0>
    2956:	f1a4 0011 	sub.w	r0, r4, #17
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    295a:	2103      	movs	r1, #3
    295c:	910b      	str	r1, [sp, #44]	; 0x2c
    295e:	2300      	movs	r3, #0
    2960:	930a      	str	r3, [sp, #40]	; 0x28
    2962:	9009      	str	r0, [sp, #36]	; 0x24
    2964:	2263      	movs	r2, #99	; 0x63
    2966:	9208      	str	r2, [sp, #32]
    2968:	9307      	str	r3, [sp, #28]
    296a:	9106      	str	r1, [sp, #24]
    296c:	2202      	movs	r2, #2
    296e:	9205      	str	r2, [sp, #20]
    2970:	9104      	str	r1, [sp, #16]
    2972:	9303      	str	r3, [sp, #12]
    2974:	9002      	str	r0, [sp, #8]
    2976:	21b0      	movs	r1, #176	; 0xb0
    2978:	9101      	str	r1, [sp, #4]
    297a:	9300      	str	r3, [sp, #0]
    297c:	492b      	ldr	r1, [pc, #172]	; (2a2c <grid_module_en16_reva_init+0x148>)
    297e:	a814      	add	r0, sp, #80	; 0x50
    2980:	4f29      	ldr	r7, [pc, #164]	; (2a28 <grid_module_en16_reva_init+0x144>)
    2982:	47b8      	blx	r7
		uint8_t payload_length = strlen(payload_template);
    2984:	a814      	add	r0, sp, #80	; 0x50
    2986:	47c0      	blx	r8
    2988:	4681      	mov	r9, r0
		sprintf(helper_template, "00"); // LASTVALUE
    298a:	af0f      	add	r7, sp, #60	; 0x3c
    298c:	f8db 3000 	ldr.w	r3, [fp]
    2990:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    2994:	0c1b      	lsrs	r3, r3, #16
    2996:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		uint8_t helper_length = strlen(helper_template);
    299a:	4638      	mov	r0, r7
    299c:	47c0      	blx	r8
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    299e:	b2c0      	uxtb	r0, r0
    29a0:	9001      	str	r0, [sp, #4]
    29a2:	9700      	str	r7, [sp, #0]
    29a4:	fa5f f389 	uxtb.w	r3, r9
    29a8:	aa14      	add	r2, sp, #80	; 0x50
    29aa:	4631      	mov	r1, r6
    29ac:	980d      	ldr	r0, [sp, #52]	; 0x34
    29ae:	47d0      	blx	sl
	for(uint8_t i=0; i<1+16+16; i++){
    29b0:	2d20      	cmp	r5, #32
    29b2:	d81e      	bhi.n	29f2 <grid_module_en16_reva_init+0x10e>
    29b4:	3401      	adds	r4, #1
    29b6:	3501      	adds	r5, #1
    29b8:	b2ed      	uxtb	r5, r5
		if (i == 0){
    29ba:	f014 06ff 	ands.w	r6, r4, #255	; 0xff
    29be:	d0a6      	beq.n	290e <grid_module_en16_reva_init+0x2a>
		else if (i<1+16){
    29c0:	2e10      	cmp	r6, #16
    29c2:	d8c8      	bhi.n	2956 <grid_module_en16_reva_init+0x72>
    29c4:	1e60      	subs	r0, r4, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    29c6:	2103      	movs	r1, #3
    29c8:	910b      	str	r1, [sp, #44]	; 0x2c
    29ca:	2300      	movs	r3, #0
    29cc:	930a      	str	r3, [sp, #40]	; 0x28
    29ce:	9009      	str	r0, [sp, #36]	; 0x24
    29d0:	2263      	movs	r2, #99	; 0x63
    29d2:	9208      	str	r2, [sp, #32]
    29d4:	9307      	str	r3, [sp, #28]
    29d6:	9106      	str	r1, [sp, #24]
    29d8:	2202      	movs	r2, #2
    29da:	9205      	str	r2, [sp, #20]
    29dc:	9104      	str	r1, [sp, #16]
    29de:	9303      	str	r3, [sp, #12]
    29e0:	9002      	str	r0, [sp, #8]
    29e2:	2190      	movs	r1, #144	; 0x90
    29e4:	9101      	str	r1, [sp, #4]
    29e6:	9300      	str	r3, [sp, #0]
    29e8:	4910      	ldr	r1, [pc, #64]	; (2a2c <grid_module_en16_reva_init+0x148>)
    29ea:	a814      	add	r0, sp, #80	; 0x50
    29ec:	4f0e      	ldr	r7, [pc, #56]	; (2a28 <grid_module_en16_reva_init+0x144>)
    29ee:	47b8      	blx	r7
    29f0:	e7c8      	b.n	2984 <grid_module_en16_reva_init+0xa0>
    29f2:	2300      	movs	r3, #0
		
	}

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    29f4:	4a0e      	ldr	r2, [pc, #56]	; (2a30 <grid_module_en16_reva_init+0x14c>)
    29f6:	f802 3033 	strb.w	r3, [r2, r3, lsl #3]
    29fa:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    29fc:	2b10      	cmp	r3, #16
    29fe:	d1fa      	bne.n	29f6 <grid_module_en16_reva_init+0x112>
	}
	
	
	grid_led_init(&grid_led_state, 16);
    2a00:	4c0c      	ldr	r4, [pc, #48]	; (2a34 <grid_module_en16_reva_init+0x150>)
    2a02:	2110      	movs	r1, #16
    2a04:	4620      	mov	r0, r4
    2a06:	4b0c      	ldr	r3, [pc, #48]	; (2a38 <grid_module_en16_reva_init+0x154>)
    2a08:	4798      	blx	r3
	grid_module_init_animation(&grid_led_state);
    2a0a:	4620      	mov	r0, r4
    2a0c:	4b0b      	ldr	r3, [pc, #44]	; (2a3c <grid_module_en16_reva_init+0x158>)
    2a0e:	4798      	blx	r3
	
		
	grid_module_en16_reva_hardware_init();	
    2a10:	4b0b      	ldr	r3, [pc, #44]	; (2a40 <grid_module_en16_reva_init+0x15c>)
    2a12:	4798      	blx	r3
	grid_module_en16_reva_hardware_start_transfer();
    2a14:	4b0b      	ldr	r3, [pc, #44]	; (2a44 <grid_module_en16_reva_init+0x160>)
    2a16:	4798      	blx	r3

	
}
    2a18:	b01d      	add	sp, #116	; 0x74
    2a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a1e:	bf00      	nop
    2a20:	0000b1d5 	.word	0x0000b1d5
    2a24:	0000bc50 	.word	0x0000bc50
    2a28:	0000b3f9 	.word	0x0000b3f9
    2a2c:	0000bc1c 	.word	0x0000bc1c
    2a30:	200027e8 	.word	0x200027e8
    2a34:	20002428 	.word	0x20002428
    2a38:	00001d89 	.word	0x00001d89
    2a3c:	00001f89 	.word	0x00001f89
    2a40:	00002891 	.word	0x00002891
    2a44:	00002465 	.word	0x00002465
    2a48:	0000b441 	.word	0x0000b441
    2a4c:	0000bc18 	.word	0x0000bc18
    2a50:	00003af5 	.word	0x00003af5

00002a54 <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2a54:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2a56:	4803      	ldr	r0, [pc, #12]	; (2a64 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2a58:	4c03      	ldr	r4, [pc, #12]	; (2a68 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2a5a:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2a5c:	4803      	ldr	r0, [pc, #12]	; (2a6c <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2a5e:	47a0      	blx	r4
    2a60:	bd10      	pop	{r4, pc}
    2a62:	bf00      	nop
    2a64:	20001008 	.word	0x20001008
    2a68:	000040a1 	.word	0x000040a1
    2a6c:	200011d8 	.word	0x200011d8

00002a70 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2a70:	4bab      	ldr	r3, [pc, #684]	; (2d20 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	b92b      	cbnz	r3, 2a82 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x12>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    2a76:	4aaa      	ldr	r2, [pc, #680]	; (2d20 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2a78:	7813      	ldrb	r3, [r2, #0]
    2a7a:	3301      	adds	r3, #1
    2a7c:	b2db      	uxtb	r3, r3
    2a7e:	7013      	strb	r3, [r2, #0]
    2a80:	4770      	bx	lr
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2a82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a86:	b089      	sub	sp, #36	; 0x24
	/* Read mapmode state*/
	
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	CRITICAL_SECTION_ENTER()
    2a88:	a801      	add	r0, sp, #4
    2a8a:	4ca6      	ldr	r4, [pc, #664]	; (2d24 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    2a8c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    2a8e:	a806      	add	r0, sp, #24
    2a90:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2a92:	4ba5      	ldr	r3, [pc, #660]	; (2d28 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2a94:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2a98:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2a9c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2aa0:	4054      	eors	r4, r2
    2aa2:	400c      	ands	r4, r1
    2aa4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2aa6:	a806      	add	r0, sp, #24
    2aa8:	4ba0      	ldr	r3, [pc, #640]	; (2d2c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    2aaa:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2aac:	4ba0      	ldr	r3, [pc, #640]	; (2d30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2aae:	685b      	ldr	r3, [r3, #4]
    2ab0:	68db      	ldr	r3, [r3, #12]
    2ab2:	781a      	ldrb	r2, [r3, #0]
    2ab4:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2ab8:	4294      	cmp	r4, r2
    2aba:	d010      	beq.n	2ade <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x6e>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2abc:	2a00      	cmp	r2, #0
    2abe:	f040 8124 	bne.w	2d0a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29a>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
			mod->report_array[report_index].helper[0] = 1;
    2ac2:	2201      	movs	r2, #1
    2ac4:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    2ac6:	2280      	movs	r2, #128	; 0x80
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    2ac8:	4c99      	ldr	r4, [pc, #612]	; (2d30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2aca:	6863      	ldr	r3, [r4, #4]
    2acc:	6858      	ldr	r0, [r3, #4]
    2ace:	2102      	movs	r1, #2
    2ad0:	3003      	adds	r0, #3
    2ad2:	4b98      	ldr	r3, [pc, #608]	; (2d34 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    2ad4:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    2ad6:	2100      	movs	r1, #0
    2ad8:	4620      	mov	r0, r4
    2ada:	4b97      	ldr	r3, [pc, #604]	; (2d38 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2adc:	4798      	blx	r3
	}

	CRITICAL_SECTION_LEAVE()
    2ade:	a801      	add	r0, sp, #4
    2ae0:	4b92      	ldr	r3, [pc, #584]	; (2d2c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    2ae2:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2ae4:	2300      	movs	r3, #0
    2ae6:	f8ad 301e 	strh.w	r3, [sp, #30]
	uint16_t adcresult_1 = 0;
    2aea:	f8ad 301c 	strh.w	r3, [sp, #28]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2aee:	4b93      	ldr	r3, [pc, #588]	; (2d3c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2af0:	781a      	ldrb	r2, [r3, #0]
    2af2:	3208      	adds	r2, #8
    2af4:	4992      	ldr	r1, [pc, #584]	; (2d40 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    2af6:	5c8e      	ldrb	r6, [r1, r2]
    2af8:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2afa:	781a      	ldrb	r2, [r3, #0]
    2afc:	b2d2      	uxtb	r2, r2
    2afe:	5c8d      	ldrb	r5, [r1, r2]
    2b00:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2b02:	781a      	ldrb	r2, [r3, #0]
    2b04:	3201      	adds	r2, #1
    2b06:	b2d2      	uxtb	r2, r2
    2b08:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2b0a:	781a      	ldrb	r2, [r3, #0]
    2b0c:	f002 0207 	and.w	r2, r2, #7
    2b10:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2b12:	781b      	ldrb	r3, [r3, #0]
	if (level) {
    2b14:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2b1c:	4b82      	ldr	r3, [pc, #520]	; (2d28 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2b1e:	bf14      	ite	ne
    2b20:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b24:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2b28:	4b84      	ldr	r3, [pc, #528]	; (2d3c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2b2a:	781b      	ldrb	r3, [r3, #0]
    2b2c:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2b34:	4b7c      	ldr	r3, [pc, #496]	; (2d28 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2b36:	bf14      	ite	ne
    2b38:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b3c:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2b40:	4b7e      	ldr	r3, [pc, #504]	; (2d3c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2b42:	781b      	ldrb	r3, [r3, #0]
    2b44:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2b4c:	4b76      	ldr	r3, [pc, #472]	; (2d28 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2b4e:	bf14      	ite	ne
    2b50:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b54:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2b58:	2302      	movs	r3, #2
    2b5a:	f10d 021e 	add.w	r2, sp, #30
    2b5e:	2100      	movs	r1, #0
    2b60:	4878      	ldr	r0, [pc, #480]	; (2d44 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2b62:	4c79      	ldr	r4, [pc, #484]	; (2d48 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    2b64:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2b66:	2302      	movs	r3, #2
    2b68:	aa07      	add	r2, sp, #28
    2b6a:	2100      	movs	r1, #0
    2b6c:	4877      	ldr	r0, [pc, #476]	; (2d4c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    2b6e:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2b70:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 2d54 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>
    2b74:	f8bd 001e 	ldrh.w	r0, [sp, #30]
    2b78:	47d8      	blx	fp
    2b7a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 2d58 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>
    2b7e:	a366      	add	r3, pc, #408	; (adr r3, 2d18 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    2b80:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b84:	47d0      	blx	sl
    2b86:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 2d5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>
    2b8a:	47c8      	blx	r9
    2b8c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2b90:	42a0      	cmp	r0, r4
    2b92:	bf28      	it	cs
    2b94:	4620      	movcs	r0, r4
    2b96:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2b98:	fa1f f880 	uxth.w	r8, r0
    2b9c:	f8ad 801e 	strh.w	r8, [sp, #30]
	
	uint32_t input_1 = adcresult_1*1.03;
    2ba0:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    2ba4:	47d8      	blx	fp
    2ba6:	a35c      	add	r3, pc, #368	; (adr r3, 2d18 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    2ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
    2bac:	47d0      	blx	sl
    2bae:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2bb0:	42a0      	cmp	r0, r4
    2bb2:	bf28      	it	cs
    2bb4:	4620      	movcs	r0, r4
    2bb6:	b280      	uxth	r0, r0
    2bb8:	f8ad 001c 	strh.w	r0, [sp, #28]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2bbc:	f1a5 0308 	sub.w	r3, r5, #8
    2bc0:	b2db      	uxtb	r3, r3
    2bc2:	2b01      	cmp	r3, #1
    2bc4:	f240 8099 	bls.w	2cfa <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x28a>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2bc8:	2e0d      	cmp	r6, #13
    2bca:	f240 80c9 	bls.w	2d60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>
		
		if (adcresult_0>10000){
    2bce:	f242 7310 	movw	r3, #10000	; 0x2710
    2bd2:	4598      	cmp	r8, r3
			adcresult_0 = 0;
    2bd4:	bf8c      	ite	hi
    2bd6:	2300      	movhi	r3, #0
		}
		else{
			adcresult_0 = 127;
    2bd8:	237f      	movls	r3, #127	; 0x7f
    2bda:	f8ad 301e 	strh.w	r3, [sp, #30]
		}
			
		if (adcresult_1>10000){
    2bde:	f242 7310 	movw	r3, #10000	; 0x2710
    2be2:	4298      	cmp	r0, r3
			adcresult_1 = 0;
    2be4:	bf8c      	ite	hi
    2be6:	2300      	movhi	r3, #0
		}
		else{
			adcresult_1 = 127;
    2be8:	237f      	movls	r3, #127	; 0x7f
    2bea:	f8ad 301c 	strh.w	r3, [sp, #28]
		}
		
		
		CRITICAL_SECTION_ENTER()
    2bee:	a802      	add	r0, sp, #8
    2bf0:	4b4c      	ldr	r3, [pc, #304]	; (2d24 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    2bf2:	4798      	blx	r3

		if (adcresult_0 != mod->report_array[adc_index_0+1-4].helper[0]){
    2bf4:	f106 5480 	add.w	r4, r6, #268435456	; 0x10000000
    2bf8:	3c03      	subs	r4, #3
    2bfa:	0124      	lsls	r4, r4, #4
    2bfc:	4b4c      	ldr	r3, [pc, #304]	; (2d30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2bfe:	685b      	ldr	r3, [r3, #4]
    2c00:	4423      	add	r3, r4
    2c02:	68da      	ldr	r2, [r3, #12]
    2c04:	7812      	ldrb	r2, [r2, #0]
    2c06:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    2c0a:	4291      	cmp	r1, r2
    2c0c:	d02f      	beq.n	2c6e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1fe>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2c0e:	2a00      	cmp	r2, #0
    2c10:	bf0c      	ite	eq
    2c12:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2c16:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[5], 2, command);
    2c1a:	6858      	ldr	r0, [r3, #4]
    2c1c:	bf0c      	ite	eq
    2c1e:	2290      	moveq	r2, #144	; 0x90
    2c20:	2280      	movne	r2, #128	; 0x80
    2c22:	2102      	movs	r1, #2
    2c24:	3005      	adds	r0, #5
    2c26:	f8df 810c 	ldr.w	r8, [pc, #268]	; 2d34 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>
    2c2a:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[7], 2, adc_index_0);
    2c2c:	4f40      	ldr	r7, [pc, #256]	; (2d30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2c2e:	687b      	ldr	r3, [r7, #4]
    2c30:	4423      	add	r3, r4
    2c32:	6858      	ldr	r0, [r3, #4]
    2c34:	4632      	mov	r2, r6
    2c36:	2102      	movs	r1, #2
    2c38:	3007      	adds	r0, #7
    2c3a:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[9], 2, velocity);
    2c3c:	687b      	ldr	r3, [r7, #4]
    2c3e:	4423      	add	r3, r4
    2c40:	6858      	ldr	r0, [r3, #4]
    2c42:	464a      	mov	r2, r9
    2c44:	2102      	movs	r1, #2
    2c46:	3009      	adds	r0, #9
    2c48:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[21], 2, actuator);
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	4423      	add	r3, r4
    2c4e:	6858      	ldr	r0, [r3, #4]
    2c50:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2c54:	2102      	movs	r1, #2
    2c56:	3015      	adds	r0, #21
    2c58:	47c0      	blx	r8
			mod->report_array[adc_index_0+1-4].helper[0] = velocity;
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	441c      	add	r4, r3
    2c5e:	68e3      	ldr	r3, [r4, #12]
    2c60:	f883 9000 	strb.w	r9, [r3]
			
			grid_ui_report_set_changed_flag(mod, adc_index_0+1-4);
    2c64:	1ef1      	subs	r1, r6, #3
    2c66:	b2c9      	uxtb	r1, r1
    2c68:	4638      	mov	r0, r7
    2c6a:	4b33      	ldr	r3, [pc, #204]	; (2d38 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2c6c:	4798      	blx	r3
		}
		
		CRITICAL_SECTION_LEAVE()
    2c6e:	a802      	add	r0, sp, #8
    2c70:	4b2e      	ldr	r3, [pc, #184]	; (2d2c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    2c72:	4798      	blx	r3
		
		CRITICAL_SECTION_ENTER()
    2c74:	a803      	add	r0, sp, #12
    2c76:	4b2b      	ldr	r3, [pc, #172]	; (2d24 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    2c78:	4798      	blx	r3

		if (adcresult_1 != mod->report_array[adc_index_1+1-4].helper[0]){
    2c7a:	f105 5480 	add.w	r4, r5, #268435456	; 0x10000000
    2c7e:	3c03      	subs	r4, #3
    2c80:	0124      	lsls	r4, r4, #4
    2c82:	4b2b      	ldr	r3, [pc, #172]	; (2d30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2c84:	685b      	ldr	r3, [r3, #4]
    2c86:	4423      	add	r3, r4
    2c88:	68da      	ldr	r2, [r3, #12]
    2c8a:	7812      	ldrb	r2, [r2, #0]
    2c8c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    2c90:	4291      	cmp	r1, r2
    2c92:	d02f      	beq.n	2cf4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x284>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2c94:	2a00      	cmp	r2, #0
    2c96:	bf0c      	ite	eq
    2c98:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2c9c:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[5], 2, command);
    2ca0:	6858      	ldr	r0, [r3, #4]
    2ca2:	bf0c      	ite	eq
    2ca4:	2290      	moveq	r2, #144	; 0x90
    2ca6:	2280      	movne	r2, #128	; 0x80
    2ca8:	2102      	movs	r1, #2
    2caa:	3005      	adds	r0, #5
    2cac:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2d34 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>
    2cb0:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[7], 2, adc_index_0);
    2cb2:	4f1f      	ldr	r7, [pc, #124]	; (2d30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	4423      	add	r3, r4
    2cb8:	6858      	ldr	r0, [r3, #4]
    2cba:	4632      	mov	r2, r6
    2cbc:	2102      	movs	r1, #2
    2cbe:	3007      	adds	r0, #7
    2cc0:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[9], 2, velocity);
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	4423      	add	r3, r4
    2cc6:	6858      	ldr	r0, [r3, #4]
    2cc8:	464a      	mov	r2, r9
    2cca:	2102      	movs	r1, #2
    2ccc:	3009      	adds	r0, #9
    2cce:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[21], 2, actuator);
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	4423      	add	r3, r4
    2cd4:	6858      	ldr	r0, [r3, #4]
    2cd6:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2cda:	2102      	movs	r1, #2
    2cdc:	3015      	adds	r0, #21
    2cde:	47c0      	blx	r8
			mod->report_array[adc_index_1+1-4].helper[0] = velocity;
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	441c      	add	r4, r3
    2ce4:	68e3      	ldr	r3, [r4, #12]
    2ce6:	f883 9000 	strb.w	r9, [r3]
			
			grid_ui_report_set_changed_flag(mod, adc_index_1+1-4);
    2cea:	1ee9      	subs	r1, r5, #3
    2cec:	b2c9      	uxtb	r1, r1
    2cee:	4638      	mov	r0, r7
    2cf0:	4b11      	ldr	r3, [pc, #68]	; (2d38 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2cf2:	4798      	blx	r3
		}
		
		CRITICAL_SECTION_LEAVE()
    2cf4:	a803      	add	r0, sp, #12
    2cf6:	4b0d      	ldr	r3, [pc, #52]	; (2d2c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    2cf8:	4798      	blx	r3
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    2cfa:	2200      	movs	r2, #0
    2cfc:	4b08      	ldr	r3, [pc, #32]	; (2d20 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2cfe:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    2d00:	4b13      	ldr	r3, [pc, #76]	; (2d50 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    2d02:	4798      	blx	r3
}
    2d04:	b009      	add	sp, #36	; 0x24
    2d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod->report_array[report_index].helper[0] = 0;
    2d0a:	2200      	movs	r2, #0
    2d0c:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    2d0e:	2281      	movs	r2, #129	; 0x81
    2d10:	e6da      	b.n	2ac8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x58>
    2d12:	bf00      	nop
    2d14:	f3af 8000 	nop.w
    2d18:	47ae147b 	.word	0x47ae147b
    2d1c:	3ff07ae1 	.word	0x3ff07ae1
    2d20:	20001458 	.word	0x20001458
    2d24:	000040c9 	.word	0x000040c9
    2d28:	41008000 	.word	0x41008000
    2d2c:	000040d7 	.word	0x000040d7
    2d30:	20001650 	.word	0x20001650
    2d34:	000037b5 	.word	0x000037b5
    2d38:	00003bb3 	.word	0x00003bb3
    2d3c:	20002424 	.word	0x20002424
    2d40:	20000334 	.word	0x20000334
    2d44:	20001008 	.word	0x20001008
    2d48:	00003fc1 	.word	0x00003fc1
    2d4c:	200011d8 	.word	0x200011d8
    2d50:	00002a55 	.word	0x00002a55
    2d54:	0000ac5d 	.word	0x0000ac5d
    2d58:	0000ad29 	.word	0x0000ad29
    2d5c:	0000b14d 	.word	0x0000b14d
		if (adc_index_1 == 0 || adc_index_1 == 1){
    2d60:	2d01      	cmp	r5, #1
    2d62:	d91d      	bls.n	2da0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x330>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    2d64:	b2b9      	uxth	r1, r7
    2d66:	4630      	mov	r0, r6
    2d68:	4c3c      	ldr	r4, [pc, #240]	; (2e5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3ec>)
    2d6a:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    2d6c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    2d70:	4628      	mov	r0, r5
    2d72:	47a0      	blx	r4
		CRITICAL_SECTION_ENTER()
    2d74:	a804      	add	r0, sp, #16
    2d76:	4b3a      	ldr	r3, [pc, #232]	; (2e60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3f0>)
    2d78:	4798      	blx	r3
		if (grid_ain_get_changed(adc_index_0)){
    2d7a:	4630      	mov	r0, r6
    2d7c:	4b39      	ldr	r3, [pc, #228]	; (2e64 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3f4>)
    2d7e:	4798      	blx	r3
    2d80:	b9e8      	cbnz	r0, 2dbe <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x34e>
		CRITICAL_SECTION_LEAVE()
    2d82:	a804      	add	r0, sp, #16
    2d84:	4b38      	ldr	r3, [pc, #224]	; (2e68 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3f8>)
    2d86:	4798      	blx	r3
		CRITICAL_SECTION_ENTER()
    2d88:	a805      	add	r0, sp, #20
    2d8a:	4b35      	ldr	r3, [pc, #212]	; (2e60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3f0>)
    2d8c:	4798      	blx	r3
		if (grid_ain_get_changed(adc_index_1)){
    2d8e:	4628      	mov	r0, r5
    2d90:	4b34      	ldr	r3, [pc, #208]	; (2e64 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3f4>)
    2d92:	4798      	blx	r3
    2d94:	2800      	cmp	r0, #0
    2d96:	d13a      	bne.n	2e0e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x39e>
		CRITICAL_SECTION_LEAVE()
    2d98:	a805      	add	r0, sp, #20
    2d9a:	4b33      	ldr	r3, [pc, #204]	; (2e68 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3f8>)
    2d9c:	4798      	blx	r3
    2d9e:	e7ac      	b.n	2cfa <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x28a>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    2da0:	b2b9      	uxth	r1, r7
    2da2:	f64f 78ff 	movw	r8, #65535	; 0xffff
    2da6:	eba8 0101 	sub.w	r1, r8, r1
    2daa:	4630      	mov	r0, r6
    2dac:	4c2b      	ldr	r4, [pc, #172]	; (2e5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3ec>)
    2dae:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    2db0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    2db4:	eba8 0101 	sub.w	r1, r8, r1
    2db8:	4628      	mov	r0, r5
    2dba:	47a0      	blx	r4
    2dbc:	e7da      	b.n	2d74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    2dbe:	2107      	movs	r1, #7
    2dc0:	4630      	mov	r0, r6
    2dc2:	4b2a      	ldr	r3, [pc, #168]	; (2e6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3fc>)
    2dc4:	4798      	blx	r3
    2dc6:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    2dc8:	f106 0801 	add.w	r8, r6, #1
    2dcc:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2dd0:	4c27      	ldr	r4, [pc, #156]	; (2e70 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x400>)
    2dd2:	6863      	ldr	r3, [r4, #4]
    2dd4:	444b      	add	r3, r9
    2dd6:	6858      	ldr	r0, [r3, #4]
    2dd8:	4632      	mov	r2, r6
    2dda:	2102      	movs	r1, #2
    2ddc:	3007      	adds	r0, #7
    2dde:	4e25      	ldr	r6, [pc, #148]	; (2e74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x404>)
    2de0:	47b0      	blx	r6
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, value);
    2de2:	6863      	ldr	r3, [r4, #4]
    2de4:	444b      	add	r3, r9
    2de6:	6858      	ldr	r0, [r3, #4]
    2de8:	b2fa      	uxtb	r2, r7
    2dea:	2102      	movs	r1, #2
    2dec:	3009      	adds	r0, #9
    2dee:	47b0      	blx	r6
			uint8_t actuator = 2*value;
    2df0:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    2df2:	6863      	ldr	r3, [r4, #4]
    2df4:	444b      	add	r3, r9
    2df6:	6858      	ldr	r0, [r3, #4]
    2df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2dfc:	2102      	movs	r1, #2
    2dfe:	3015      	adds	r0, #21
    2e00:	47b0      	blx	r6
			grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    2e02:	fa5f f188 	uxtb.w	r1, r8
    2e06:	4620      	mov	r0, r4
    2e08:	4b1b      	ldr	r3, [pc, #108]	; (2e78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x408>)
    2e0a:	4798      	blx	r3
    2e0c:	e7b9      	b.n	2d82 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x312>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    2e0e:	2107      	movs	r1, #7
    2e10:	4628      	mov	r0, r5
    2e12:	4b16      	ldr	r3, [pc, #88]	; (2e6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3fc>)
    2e14:	4798      	blx	r3
    2e16:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    2e18:	1c6f      	adds	r7, r5, #1
    2e1a:	ea4f 1807 	mov.w	r8, r7, lsl #4
    2e1e:	4c14      	ldr	r4, [pc, #80]	; (2e70 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x400>)
    2e20:	6863      	ldr	r3, [r4, #4]
    2e22:	4443      	add	r3, r8
    2e24:	6858      	ldr	r0, [r3, #4]
    2e26:	462a      	mov	r2, r5
    2e28:	2102      	movs	r1, #2
    2e2a:	3007      	adds	r0, #7
    2e2c:	4d11      	ldr	r5, [pc, #68]	; (2e74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x404>)
    2e2e:	47a8      	blx	r5
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, value);
    2e30:	6863      	ldr	r3, [r4, #4]
    2e32:	4443      	add	r3, r8
    2e34:	6858      	ldr	r0, [r3, #4]
    2e36:	b2f2      	uxtb	r2, r6
    2e38:	2102      	movs	r1, #2
    2e3a:	3009      	adds	r0, #9
    2e3c:	47a8      	blx	r5
			uint8_t actuator = 2*value;
    2e3e:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    2e40:	6863      	ldr	r3, [r4, #4]
    2e42:	4443      	add	r3, r8
    2e44:	6858      	ldr	r0, [r3, #4]
    2e46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2e4a:	2102      	movs	r1, #2
    2e4c:	3015      	adds	r0, #21
    2e4e:	47a8      	blx	r5
			grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    2e50:	b2f9      	uxtb	r1, r7
    2e52:	4620      	mov	r0, r4
    2e54:	4b08      	ldr	r3, [pc, #32]	; (2e78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x408>)
    2e56:	4798      	blx	r3
    2e58:	e79e      	b.n	2d98 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x328>
    2e5a:	bf00      	nop
    2e5c:	00000fc9 	.word	0x00000fc9
    2e60:	000040c9 	.word	0x000040c9
    2e64:	000010c5 	.word	0x000010c5
    2e68:	000040d7 	.word	0x000040d7
    2e6c:	000010d5 	.word	0x000010d5
    2e70:	20001650 	.word	0x20001650
    2e74:	000037b5 	.word	0x000037b5
    2e78:	00003bb3 	.word	0x00003bb3

00002e7c <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    2e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    2e7e:	4f0b      	ldr	r7, [pc, #44]	; (2eac <grid_module_pbf4_reva_hardware_init+0x30>)
    2e80:	4c0b      	ldr	r4, [pc, #44]	; (2eb0 <grid_module_pbf4_reva_hardware_init+0x34>)
    2e82:	463b      	mov	r3, r7
    2e84:	2200      	movs	r2, #0
    2e86:	4611      	mov	r1, r2
    2e88:	4620      	mov	r0, r4
    2e8a:	4e0a      	ldr	r6, [pc, #40]	; (2eb4 <grid_module_pbf4_reva_hardware_init+0x38>)
    2e8c:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    2e8e:	4d0a      	ldr	r5, [pc, #40]	; (2eb8 <grid_module_pbf4_reva_hardware_init+0x3c>)
    2e90:	463b      	mov	r3, r7
    2e92:	2200      	movs	r2, #0
    2e94:	4611      	mov	r1, r2
    2e96:	4628      	mov	r0, r5
    2e98:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    2e9a:	2100      	movs	r1, #0
    2e9c:	4620      	mov	r0, r4
    2e9e:	4c07      	ldr	r4, [pc, #28]	; (2ebc <grid_module_pbf4_reva_hardware_init+0x40>)
    2ea0:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    2ea2:	2100      	movs	r1, #0
    2ea4:	4628      	mov	r0, r5
    2ea6:	47a0      	blx	r4
    2ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2eaa:	bf00      	nop
    2eac:	00002a71 	.word	0x00002a71
    2eb0:	20001008 	.word	0x20001008
    2eb4:	00003f41 	.word	0x00003f41
    2eb8:	200011d8 	.word	0x200011d8
    2ebc:	00003f01 	.word	0x00003f01

00002ec0 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    2ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ec4:	b09a      	sub	sp, #104	; 0x68
    2ec6:	4607      	mov	r7, r0
	
	grid_ui_model_init(mod, 13);
    2ec8:	210d      	movs	r1, #13
    2eca:	4b35      	ldr	r3, [pc, #212]	; (2fa0 <grid_module_pbf4_reva_init+0xe0>)
    2ecc:	4798      	blx	r3
	
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<mod->report_length; i++){
    2ece:	783b      	ldrb	r3, [r7, #0]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d04f      	beq.n	2f74 <grid_module_pbf4_reva_init+0xb4>
    2ed4:	2400      	movs	r4, #0
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2ed6:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2fcc <grid_module_pbf4_reva_init+0x10c>
    2eda:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2fd0 <grid_module_pbf4_reva_init+0x110>
    2ede:	e029      	b.n	2f34 <grid_module_pbf4_reva_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    2ee0:	2303      	movs	r3, #3
    2ee2:	9303      	str	r3, [sp, #12]
    2ee4:	2339      	movs	r3, #57	; 0x39
    2ee6:	9302      	str	r3, [sp, #8]
    2ee8:	2383      	movs	r3, #131	; 0x83
    2eea:	9301      	str	r3, [sp, #4]
    2eec:	2380      	movs	r3, #128	; 0x80
    2eee:	9300      	str	r3, [sp, #0]
    2ef0:	2301      	movs	r3, #1
    2ef2:	2202      	movs	r2, #2
    2ef4:	492b      	ldr	r1, [pc, #172]	; (2fa4 <grid_module_pbf4_reva_init+0xe4>)
    2ef6:	a812      	add	r0, sp, #72	; 0x48
    2ef8:	47c8      	blx	r9
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    2efa:	a812      	add	r0, sp, #72	; 0x48
    2efc:	4e2a      	ldr	r6, [pc, #168]	; (2fa8 <grid_module_pbf4_reva_init+0xe8>)
    2efe:	47b0      	blx	r6
    2f00:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    2f02:	ad0d      	add	r5, sp, #52	; 0x34
    2f04:	4b29      	ldr	r3, [pc, #164]	; (2fac <grid_module_pbf4_reva_init+0xec>)
    2f06:	681b      	ldr	r3, [r3, #0]
    2f08:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2f0c:	0c1b      	lsrs	r3, r3, #16
    2f0e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
		
		uint8_t helper_length = strlen(helper_template);
    2f12:	4628      	mov	r0, r5
    2f14:	47b0      	blx	r6

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2f16:	b2c0      	uxtb	r0, r0
    2f18:	9001      	str	r0, [sp, #4]
    2f1a:	9500      	str	r5, [sp, #0]
    2f1c:	fa5f f388 	uxtb.w	r3, r8
    2f20:	aa12      	add	r2, sp, #72	; 0x48
    2f22:	4621      	mov	r1, r4
    2f24:	4638      	mov	r0, r7
    2f26:	4d22      	ldr	r5, [pc, #136]	; (2fb0 <grid_module_pbf4_reva_init+0xf0>)
    2f28:	47a8      	blx	r5
	for(uint8_t i=0; i<mod->report_length; i++){
    2f2a:	3401      	adds	r4, #1
    2f2c:	b2e4      	uxtb	r4, r4
    2f2e:	783b      	ldrb	r3, [r7, #0]
    2f30:	42a3      	cmp	r3, r4
    2f32:	d91f      	bls.n	2f74 <grid_module_pbf4_reva_init+0xb4>
		if (i == 0){
    2f34:	2c00      	cmp	r4, #0
    2f36:	d0d3      	beq.n	2ee0 <grid_module_pbf4_reva_init+0x20>
		else if (i<9){ // PORENTIOMETERS & FADERS
    2f38:	2c08      	cmp	r4, #8
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2f3a:	f104 30ff 	add.w	r0, r4, #4294967295
    2f3e:	f04f 0103 	mov.w	r1, #3
    2f42:	910b      	str	r1, [sp, #44]	; 0x2c
    2f44:	f04f 0300 	mov.w	r3, #0
    2f48:	930a      	str	r3, [sp, #40]	; 0x28
    2f4a:	9009      	str	r0, [sp, #36]	; 0x24
    2f4c:	f04f 0263 	mov.w	r2, #99	; 0x63
    2f50:	9208      	str	r2, [sp, #32]
    2f52:	9307      	str	r3, [sp, #28]
    2f54:	9106      	str	r1, [sp, #24]
    2f56:	f04f 0202 	mov.w	r2, #2
    2f5a:	9205      	str	r2, [sp, #20]
    2f5c:	9104      	str	r1, [sp, #16]
    2f5e:	9303      	str	r3, [sp, #12]
    2f60:	9002      	str	r0, [sp, #8]
    2f62:	bf94      	ite	ls
    2f64:	21b0      	movls	r1, #176	; 0xb0
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2f66:	2190      	movhi	r1, #144	; 0x90
    2f68:	9101      	str	r1, [sp, #4]
    2f6a:	9300      	str	r3, [sp, #0]
    2f6c:	4651      	mov	r1, sl
    2f6e:	a812      	add	r0, sp, #72	; 0x48
    2f70:	47c8      	blx	r9
    2f72:	e7c2      	b.n	2efa <grid_module_pbf4_reva_init+0x3a>
		
	}
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    2f74:	2307      	movs	r3, #7
    2f76:	220e      	movs	r2, #14
    2f78:	2105      	movs	r1, #5
    2f7a:	2010      	movs	r0, #16
    2f7c:	4c0d      	ldr	r4, [pc, #52]	; (2fb4 <grid_module_pbf4_reva_init+0xf4>)
    2f7e:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    2f80:	4c0d      	ldr	r4, [pc, #52]	; (2fb8 <grid_module_pbf4_reva_init+0xf8>)
    2f82:	210c      	movs	r1, #12
    2f84:	4620      	mov	r0, r4
    2f86:	4b0d      	ldr	r3, [pc, #52]	; (2fbc <grid_module_pbf4_reva_init+0xfc>)
    2f88:	4798      	blx	r3
	grid_module_init_animation(&grid_led_state);
    2f8a:	4620      	mov	r0, r4
    2f8c:	4b0c      	ldr	r3, [pc, #48]	; (2fc0 <grid_module_pbf4_reva_init+0x100>)
    2f8e:	4798      	blx	r3
	
	grid_module_pbf4_reva_hardware_init();
    2f90:	4b0c      	ldr	r3, [pc, #48]	; (2fc4 <grid_module_pbf4_reva_init+0x104>)
    2f92:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    2f94:	4b0c      	ldr	r3, [pc, #48]	; (2fc8 <grid_module_pbf4_reva_init+0x108>)
    2f96:	4798      	blx	r3
	
    2f98:	b01a      	add	sp, #104	; 0x68
    2f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f9e:	bf00      	nop
    2fa0:	00003add 	.word	0x00003add
    2fa4:	0000bc00 	.word	0x0000bc00
    2fa8:	0000b441 	.word	0x0000b441
    2fac:	0000bc18 	.word	0x0000bc18
    2fb0:	00003af5 	.word	0x00003af5
    2fb4:	00000f7d 	.word	0x00000f7d
    2fb8:	20002428 	.word	0x20002428
    2fbc:	00001d89 	.word	0x00001d89
    2fc0:	00001f89 	.word	0x00001f89
    2fc4:	00002e7d 	.word	0x00002e7d
    2fc8:	00002a55 	.word	0x00002a55
    2fcc:	0000bc1c 	.word	0x0000bc1c
    2fd0:	0000b3f9 	.word	0x0000b3f9

00002fd4 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    2fd4:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2fd6:	4803      	ldr	r0, [pc, #12]	; (2fe4 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    2fd8:	4c03      	ldr	r4, [pc, #12]	; (2fe8 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    2fda:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2fdc:	4803      	ldr	r0, [pc, #12]	; (2fec <grid_module_po16_revb_hardware_start_transfer+0x18>)
    2fde:	47a0      	blx	r4
    2fe0:	bd10      	pop	{r4, pc}
    2fe2:	bf00      	nop
    2fe4:	20001008 	.word	0x20001008
    2fe8:	000040a1 	.word	0x000040a1
    2fec:	200011d8 	.word	0x200011d8

00002ff0 <grid_module_po16_revb_hardware_transfer_complete_cb>:
	
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    2ff0:	4b95      	ldr	r3, [pc, #596]	; (3248 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    2ff2:	781b      	ldrb	r3, [r3, #0]
    2ff4:	b92b      	cbnz	r3, 3002 <grid_module_po16_revb_hardware_transfer_complete_cb+0x12>
		grid_module_po16_revb_hardware_transfer_complete++;
    2ff6:	4a94      	ldr	r2, [pc, #592]	; (3248 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    2ff8:	7813      	ldrb	r3, [r2, #0]
    2ffa:	3301      	adds	r3, #1
    2ffc:	b2db      	uxtb	r3, r3
    2ffe:	7013      	strb	r3, [r2, #0]
    3000:	4770      	bx	lr
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    3002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3006:	b086      	sub	sp, #24
	/* Read mapmode state*/
	
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	CRITICAL_SECTION_ENTER()
    3008:	a801      	add	r0, sp, #4
    300a:	4c90      	ldr	r4, [pc, #576]	; (324c <grid_module_po16_revb_hardware_transfer_complete_cb+0x25c>)
    300c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    300e:	a804      	add	r0, sp, #16
    3010:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3012:	4b8f      	ldr	r3, [pc, #572]	; (3250 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    3014:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3018:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    301c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3020:	4054      	eors	r4, r2
    3022:	400c      	ands	r4, r1
    3024:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3026:	a804      	add	r0, sp, #16
    3028:	4b8a      	ldr	r3, [pc, #552]	; (3254 <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>)
    302a:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    302c:	4b8a      	ldr	r3, [pc, #552]	; (3258 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>)
    302e:	685b      	ldr	r3, [r3, #4]
    3030:	68db      	ldr	r3, [r3, #12]
    3032:	781a      	ldrb	r2, [r3, #0]
    3034:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    3038:	4294      	cmp	r4, r2
    303a:	d010      	beq.n	305e <grid_module_po16_revb_hardware_transfer_complete_cb+0x6e>
		
		uint8_t command;
		
		if (mod->report_array[report_index].helper[0] == 0){
    303c:	2a00      	cmp	r2, #0
    303e:	f040 809f 	bne.w	3180 <grid_module_po16_revb_hardware_transfer_complete_cb+0x190>
			
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
			mod->report_array[report_index].helper[0] = 1;
    3042:	2201      	movs	r2, #1
    3044:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN;
    3046:	2280      	movs	r2, #128	; 0x80
			mod->report_array[report_index].helper[0] = 0;
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    3048:	4c83      	ldr	r4, [pc, #524]	; (3258 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>)
    304a:	6863      	ldr	r3, [r4, #4]
    304c:	6858      	ldr	r0, [r3, #4]
    304e:	2102      	movs	r1, #2
    3050:	3003      	adds	r0, #3
    3052:	4b82      	ldr	r3, [pc, #520]	; (325c <grid_module_po16_revb_hardware_transfer_complete_cb+0x26c>)
    3054:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    3056:	2100      	movs	r1, #0
    3058:	4620      	mov	r0, r4
    305a:	4b81      	ldr	r3, [pc, #516]	; (3260 <grid_module_po16_revb_hardware_transfer_complete_cb+0x270>)
    305c:	4798      	blx	r3
	}

	CRITICAL_SECTION_LEAVE()
    305e:	a801      	add	r0, sp, #4
    3060:	4b7c      	ldr	r3, [pc, #496]	; (3254 <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>)
    3062:	4798      	blx	r3


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3064:	2300      	movs	r3, #0
    3066:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint16_t adcresult_1 = 0;
    306a:	f8ad 3014 	strh.w	r3, [sp, #20]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    306e:	4b76      	ldr	r3, [pc, #472]	; (3248 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    3070:	785a      	ldrb	r2, [r3, #1]
    3072:	3208      	adds	r2, #8
    3074:	497b      	ldr	r1, [pc, #492]	; (3264 <grid_module_po16_revb_hardware_transfer_complete_cb+0x274>)
    3076:	5c8d      	ldrb	r5, [r1, r2]
    3078:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    307a:	785a      	ldrb	r2, [r3, #1]
    307c:	b2d2      	uxtb	r2, r2
    307e:	5c8c      	ldrb	r4, [r1, r2]
    3080:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    3082:	785a      	ldrb	r2, [r3, #1]
    3084:	3201      	adds	r2, #1
    3086:	b2d2      	uxtb	r2, r2
    3088:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    308a:	785a      	ldrb	r2, [r3, #1]
    308c:	f002 0207 	and.w	r2, r2, #7
    3090:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    3092:	785b      	ldrb	r3, [r3, #1]
	if (level) {
    3094:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3098:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    309c:	4b6c      	ldr	r3, [pc, #432]	; (3250 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    309e:	bf14      	ite	ne
    30a0:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30a4:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    30a8:	4b67      	ldr	r3, [pc, #412]	; (3248 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    30aa:	785b      	ldrb	r3, [r3, #1]
    30ac:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    30b4:	4b66      	ldr	r3, [pc, #408]	; (3250 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    30b6:	bf14      	ite	ne
    30b8:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30bc:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    30c0:	4b61      	ldr	r3, [pc, #388]	; (3248 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    30c2:	785b      	ldrb	r3, [r3, #1]
    30c4:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    30cc:	4b60      	ldr	r3, [pc, #384]	; (3250 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    30ce:	bf14      	ite	ne
    30d0:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30d4:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    30d8:	2302      	movs	r3, #2
    30da:	f10d 0216 	add.w	r2, sp, #22
    30de:	2100      	movs	r1, #0
    30e0:	4861      	ldr	r0, [pc, #388]	; (3268 <grid_module_po16_revb_hardware_transfer_complete_cb+0x278>)
    30e2:	4e62      	ldr	r6, [pc, #392]	; (326c <grid_module_po16_revb_hardware_transfer_complete_cb+0x27c>)
    30e4:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    30e6:	2302      	movs	r3, #2
    30e8:	aa05      	add	r2, sp, #20
    30ea:	2100      	movs	r1, #0
    30ec:	4860      	ldr	r0, [pc, #384]	; (3270 <grid_module_po16_revb_hardware_transfer_complete_cb+0x280>)
    30ee:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    30f0:	f8df a190 	ldr.w	sl, [pc, #400]	; 3284 <grid_module_po16_revb_hardware_transfer_complete_cb+0x294>
    30f4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    30f8:	47d0      	blx	sl
    30fa:	f8df 918c 	ldr.w	r9, [pc, #396]	; 3288 <grid_module_po16_revb_hardware_transfer_complete_cb+0x298>
    30fe:	a350      	add	r3, pc, #320	; (adr r3, 3240 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    3100:	e9d3 2300 	ldrd	r2, r3, [r3]
    3104:	47c8      	blx	r9
    3106:	f8df 8184 	ldr.w	r8, [pc, #388]	; 328c <grid_module_po16_revb_hardware_transfer_complete_cb+0x29c>
    310a:	47c0      	blx	r8
    310c:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3110:	42b0      	cmp	r0, r6
    3112:	bf28      	it	cs
    3114:	4630      	movcs	r0, r6
    3116:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    3118:	f8ad 0016 	strh.w	r0, [sp, #22]
	
	uint32_t input_1 = adcresult_1*1.03;	
    311c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    3120:	47d0      	blx	sl
    3122:	a347      	add	r3, pc, #284	; (adr r3, 3240 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    3124:	e9d3 2300 	ldrd	r2, r3, [r3]
    3128:	47c8      	blx	r9
    312a:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    312c:	42b0      	cmp	r0, r6
    312e:	bf28      	it	cs
    3130:	4630      	movcs	r0, r6
    3132:	f8ad 0014 	strh.w	r0, [sp, #20]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    3136:	b2b9      	uxth	r1, r7
    3138:	4628      	mov	r0, r5
    313a:	4e4e      	ldr	r6, [pc, #312]	; (3274 <grid_module_po16_revb_hardware_transfer_complete_cb+0x284>)
    313c:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    313e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    3142:	4620      	mov	r0, r4
    3144:	47b0      	blx	r6

	
	CRITICAL_SECTION_ENTER()
    3146:	a802      	add	r0, sp, #8
    3148:	4b40      	ldr	r3, [pc, #256]	; (324c <grid_module_po16_revb_hardware_transfer_complete_cb+0x25c>)
    314a:	4798      	blx	r3

	if (grid_ain_get_changed(adc_index_0)){
    314c:	4628      	mov	r0, r5
    314e:	4b4a      	ldr	r3, [pc, #296]	; (3278 <grid_module_po16_revb_hardware_transfer_complete_cb+0x288>)
    3150:	4798      	blx	r3
    3152:	b9c8      	cbnz	r0, 3188 <grid_module_po16_revb_hardware_transfer_complete_cb+0x198>
		
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
		mod->report_array[adc_index_0+1].helper[0] = value;
	}
	
	CRITICAL_SECTION_LEAVE()
    3154:	a802      	add	r0, sp, #8
    3156:	4b3f      	ldr	r3, [pc, #252]	; (3254 <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>)
    3158:	4798      	blx	r3
	
	
	CRITICAL_SECTION_ENTER()
    315a:	a803      	add	r0, sp, #12
    315c:	4b3b      	ldr	r3, [pc, #236]	; (324c <grid_module_po16_revb_hardware_transfer_complete_cb+0x25c>)
    315e:	4798      	blx	r3

	if (grid_ain_get_changed(adc_index_1)){
    3160:	4620      	mov	r0, r4
    3162:	4b45      	ldr	r3, [pc, #276]	; (3278 <grid_module_po16_revb_hardware_transfer_complete_cb+0x288>)
    3164:	4798      	blx	r3
    3166:	2800      	cmp	r0, #0
    3168:	d13d      	bne.n	31e6 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f6>
		
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
		mod->report_array[adc_index_1+1].helper[0] = value;
	}
	
	CRITICAL_SECTION_LEAVE()
    316a:	a803      	add	r0, sp, #12
    316c:	4b39      	ldr	r3, [pc, #228]	; (3254 <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>)
    316e:	4798      	blx	r3
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    3170:	2200      	movs	r2, #0
    3172:	4b35      	ldr	r3, [pc, #212]	; (3248 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    3174:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    3176:	4b41      	ldr	r3, [pc, #260]	; (327c <grid_module_po16_revb_hardware_transfer_complete_cb+0x28c>)
    3178:	4798      	blx	r3
}
    317a:	b006      	add	sp, #24
    317c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			mod->report_array[report_index].helper[0] = 0;
    3180:	2200      	movs	r2, #0
    3182:	701a      	strb	r2, [r3, #0]
			command = GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP;
    3184:	2281      	movs	r2, #129	; 0x81
    3186:	e75f      	b.n	3048 <grid_module_po16_revb_hardware_transfer_complete_cb+0x58>
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    3188:	2107      	movs	r1, #7
    318a:	4628      	mov	r0, r5
    318c:	4b3c      	ldr	r3, [pc, #240]	; (3280 <grid_module_po16_revb_hardware_transfer_complete_cb+0x290>)
    318e:	4798      	blx	r3
    3190:	fa5f f880 	uxtb.w	r8, r0
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    3194:	f105 0901 	add.w	r9, r5, #1
    3198:	ea4f 1709 	mov.w	r7, r9, lsl #4
    319c:	4e2e      	ldr	r6, [pc, #184]	; (3258 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>)
    319e:	6873      	ldr	r3, [r6, #4]
    31a0:	443b      	add	r3, r7
    31a2:	6858      	ldr	r0, [r3, #4]
    31a4:	462a      	mov	r2, r5
    31a6:	2102      	movs	r1, #2
    31a8:	3007      	adds	r0, #7
    31aa:	4d2c      	ldr	r5, [pc, #176]	; (325c <grid_module_po16_revb_hardware_transfer_complete_cb+0x26c>)
    31ac:	47a8      	blx	r5
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, value);
    31ae:	6873      	ldr	r3, [r6, #4]
    31b0:	443b      	add	r3, r7
    31b2:	6858      	ldr	r0, [r3, #4]
    31b4:	4642      	mov	r2, r8
    31b6:	2102      	movs	r1, #2
    31b8:	3009      	adds	r0, #9
    31ba:	47a8      	blx	r5
		uint8_t actuator = 2*value;
    31bc:	ea4f 0248 	mov.w	r2, r8, lsl #1
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    31c0:	6873      	ldr	r3, [r6, #4]
    31c2:	443b      	add	r3, r7
    31c4:	6858      	ldr	r0, [r3, #4]
    31c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    31ca:	2102      	movs	r1, #2
    31cc:	3015      	adds	r0, #21
    31ce:	47a8      	blx	r5
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    31d0:	fa5f f189 	uxtb.w	r1, r9
    31d4:	4630      	mov	r0, r6
    31d6:	4b22      	ldr	r3, [pc, #136]	; (3260 <grid_module_po16_revb_hardware_transfer_complete_cb+0x270>)
    31d8:	4798      	blx	r3
		mod->report_array[adc_index_0+1].helper[0] = value;
    31da:	6873      	ldr	r3, [r6, #4]
    31dc:	441f      	add	r7, r3
    31de:	68fb      	ldr	r3, [r7, #12]
    31e0:	f883 8000 	strb.w	r8, [r3]
    31e4:	e7b6      	b.n	3154 <grid_module_po16_revb_hardware_transfer_complete_cb+0x164>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    31e6:	2107      	movs	r1, #7
    31e8:	4620      	mov	r0, r4
    31ea:	4b25      	ldr	r3, [pc, #148]	; (3280 <grid_module_po16_revb_hardware_transfer_complete_cb+0x290>)
    31ec:	4798      	blx	r3
    31ee:	b2c7      	uxtb	r7, r0
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    31f0:	f104 0801 	add.w	r8, r4, #1
    31f4:	ea4f 1608 	mov.w	r6, r8, lsl #4
    31f8:	4d17      	ldr	r5, [pc, #92]	; (3258 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>)
    31fa:	686b      	ldr	r3, [r5, #4]
    31fc:	4433      	add	r3, r6
    31fe:	6858      	ldr	r0, [r3, #4]
    3200:	4622      	mov	r2, r4
    3202:	2102      	movs	r1, #2
    3204:	3007      	adds	r0, #7
    3206:	4c15      	ldr	r4, [pc, #84]	; (325c <grid_module_po16_revb_hardware_transfer_complete_cb+0x26c>)
    3208:	47a0      	blx	r4
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, value);
    320a:	686b      	ldr	r3, [r5, #4]
    320c:	4433      	add	r3, r6
    320e:	6858      	ldr	r0, [r3, #4]
    3210:	463a      	mov	r2, r7
    3212:	2102      	movs	r1, #2
    3214:	3009      	adds	r0, #9
    3216:	47a0      	blx	r4
		uint8_t actuator = 2*value;
    3218:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    321a:	686b      	ldr	r3, [r5, #4]
    321c:	4433      	add	r3, r6
    321e:	6858      	ldr	r0, [r3, #4]
    3220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3224:	2102      	movs	r1, #2
    3226:	3015      	adds	r0, #21
    3228:	47a0      	blx	r4
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    322a:	fa5f f188 	uxtb.w	r1, r8
    322e:	4628      	mov	r0, r5
    3230:	4b0b      	ldr	r3, [pc, #44]	; (3260 <grid_module_po16_revb_hardware_transfer_complete_cb+0x270>)
    3232:	4798      	blx	r3
		mod->report_array[adc_index_1+1].helper[0] = value;
    3234:	686b      	ldr	r3, [r5, #4]
    3236:	441e      	add	r6, r3
    3238:	68f3      	ldr	r3, [r6, #12]
    323a:	701f      	strb	r7, [r3, #0]
    323c:	e795      	b.n	316a <grid_module_po16_revb_hardware_transfer_complete_cb+0x17a>
    323e:	bf00      	nop
    3240:	47ae147b 	.word	0x47ae147b
    3244:	3ff07ae1 	.word	0x3ff07ae1
    3248:	20000656 	.word	0x20000656
    324c:	000040c9 	.word	0x000040c9
    3250:	41008000 	.word	0x41008000
    3254:	000040d7 	.word	0x000040d7
    3258:	20001650 	.word	0x20001650
    325c:	000037b5 	.word	0x000037b5
    3260:	00003bb3 	.word	0x00003bb3
    3264:	20000344 	.word	0x20000344
    3268:	20001008 	.word	0x20001008
    326c:	00003fc1 	.word	0x00003fc1
    3270:	200011d8 	.word	0x200011d8
    3274:	00000fc9 	.word	0x00000fc9
    3278:	000010c5 	.word	0x000010c5
    327c:	00002fd5 	.word	0x00002fd5
    3280:	000010d5 	.word	0x000010d5
    3284:	0000ac5d 	.word	0x0000ac5d
    3288:	0000ad29 	.word	0x0000ad29
    328c:	0000b14d 	.word	0x0000b14d

00003290 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    3290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    3292:	4f0b      	ldr	r7, [pc, #44]	; (32c0 <grid_module_po16_revb_hardware_init+0x30>)
    3294:	4c0b      	ldr	r4, [pc, #44]	; (32c4 <grid_module_po16_revb_hardware_init+0x34>)
    3296:	463b      	mov	r3, r7
    3298:	2200      	movs	r2, #0
    329a:	4611      	mov	r1, r2
    329c:	4620      	mov	r0, r4
    329e:	4e0a      	ldr	r6, [pc, #40]	; (32c8 <grid_module_po16_revb_hardware_init+0x38>)
    32a0:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    32a2:	4d0a      	ldr	r5, [pc, #40]	; (32cc <grid_module_po16_revb_hardware_init+0x3c>)
    32a4:	463b      	mov	r3, r7
    32a6:	2200      	movs	r2, #0
    32a8:	4611      	mov	r1, r2
    32aa:	4628      	mov	r0, r5
    32ac:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    32ae:	2100      	movs	r1, #0
    32b0:	4620      	mov	r0, r4
    32b2:	4c07      	ldr	r4, [pc, #28]	; (32d0 <grid_module_po16_revb_hardware_init+0x40>)
    32b4:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    32b6:	2100      	movs	r1, #0
    32b8:	4628      	mov	r0, r5
    32ba:	47a0      	blx	r4
    32bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32be:	bf00      	nop
    32c0:	00002ff1 	.word	0x00002ff1
    32c4:	20001008 	.word	0x20001008
    32c8:	00003f41 	.word	0x00003f41
    32cc:	200011d8 	.word	0x200011d8
    32d0:	00003f01 	.word	0x00003f01

000032d4 <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    32d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32d8:	b09d      	sub	sp, #116	; 0x74
    32da:	900d      	str	r0, [sp, #52]	; 0x34
	

	grid_ui_model_init(mod, 17);
    32dc:	2111      	movs	r1, #17
    32de:	4b3b      	ldr	r3, [pc, #236]	; (33cc <grid_module_po16_revb_init+0xf8>)
    32e0:	4798      	blx	r3
    32e2:	2501      	movs	r5, #1
    32e4:	2400      	movs	r4, #0
			);
			
		}
		else{
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    32e6:	f8df b110 	ldr.w	fp, [pc, #272]	; 33f8 <grid_module_po16_revb_init+0x124>
    32ea:	f8df a110 	ldr.w	sl, [pc, #272]	; 33fc <grid_module_po16_revb_init+0x128>
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    32ee:	4f38      	ldr	r7, [pc, #224]	; (33d0 <grid_module_po16_revb_init+0xfc>)
    32f0:	e026      	b.n	3340 <grid_module_po16_revb_init+0x6c>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    32f2:	2303      	movs	r3, #3
    32f4:	9303      	str	r3, [sp, #12]
    32f6:	2339      	movs	r3, #57	; 0x39
    32f8:	9302      	str	r3, [sp, #8]
    32fa:	2383      	movs	r3, #131	; 0x83
    32fc:	9301      	str	r3, [sp, #4]
    32fe:	2380      	movs	r3, #128	; 0x80
    3300:	9300      	str	r3, [sp, #0]
    3302:	2301      	movs	r3, #1
    3304:	2202      	movs	r2, #2
    3306:	4933      	ldr	r1, [pc, #204]	; (33d4 <grid_module_po16_revb_init+0x100>)
    3308:	a814      	add	r0, sp, #80	; 0x50
    330a:	47d0      	blx	sl
		uint8_t payload_length = strlen(payload_template);
    330c:	a814      	add	r0, sp, #80	; 0x50
    330e:	47b8      	blx	r7
    3310:	4680      	mov	r8, r0

		uint8_t helper_template[20];
		sprintf(helper_template, "00"); // LASTVALUE
    3312:	ae0f      	add	r6, sp, #60	; 0x3c
    3314:	4b30      	ldr	r3, [pc, #192]	; (33d8 <grid_module_po16_revb_init+0x104>)
    3316:	681b      	ldr	r3, [r3, #0]
    3318:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    331c:	0c1b      	lsrs	r3, r3, #16
    331e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		
		uint8_t helper_length = strlen(helper_template);
    3322:	4630      	mov	r0, r6
    3324:	47b8      	blx	r7

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    3326:	b2c0      	uxtb	r0, r0
    3328:	9001      	str	r0, [sp, #4]
    332a:	9600      	str	r6, [sp, #0]
    332c:	fa5f f388 	uxtb.w	r3, r8
    3330:	aa14      	add	r2, sp, #80	; 0x50
    3332:	2100      	movs	r1, #0
    3334:	980d      	ldr	r0, [sp, #52]	; 0x34
    3336:	4e29      	ldr	r6, [pc, #164]	; (33dc <grid_module_po16_revb_init+0x108>)
    3338:	47b0      	blx	r6
    333a:	3401      	adds	r4, #1
    333c:	3501      	adds	r5, #1
    333e:	b2ed      	uxtb	r5, r5
		if (i == 0){
    3340:	f014 08ff 	ands.w	r8, r4, #255	; 0xff
    3344:	d0d5      	beq.n	32f2 <grid_module_po16_revb_init+0x1e>
    3346:	1e60      	subs	r0, r4, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3348:	2103      	movs	r1, #3
    334a:	910b      	str	r1, [sp, #44]	; 0x2c
    334c:	2300      	movs	r3, #0
    334e:	930a      	str	r3, [sp, #40]	; 0x28
    3350:	9009      	str	r0, [sp, #36]	; 0x24
    3352:	2263      	movs	r2, #99	; 0x63
    3354:	9208      	str	r2, [sp, #32]
    3356:	9307      	str	r3, [sp, #28]
    3358:	9106      	str	r1, [sp, #24]
    335a:	2202      	movs	r2, #2
    335c:	9205      	str	r2, [sp, #20]
    335e:	9104      	str	r1, [sp, #16]
    3360:	9303      	str	r3, [sp, #12]
    3362:	9002      	str	r0, [sp, #8]
    3364:	21b0      	movs	r1, #176	; 0xb0
    3366:	9101      	str	r1, [sp, #4]
    3368:	9300      	str	r3, [sp, #0]
    336a:	4659      	mov	r1, fp
    336c:	a814      	add	r0, sp, #80	; 0x50
    336e:	47d0      	blx	sl
		uint8_t payload_length = strlen(payload_template);
    3370:	a814      	add	r0, sp, #80	; 0x50
    3372:	47b8      	blx	r7
    3374:	4681      	mov	r9, r0
		sprintf(helper_template, "00"); // LASTVALUE
    3376:	ae0f      	add	r6, sp, #60	; 0x3c
    3378:	4b17      	ldr	r3, [pc, #92]	; (33d8 <grid_module_po16_revb_init+0x104>)
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    3380:	0c1b      	lsrs	r3, r3, #16
    3382:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		uint8_t helper_length = strlen(helper_template);
    3386:	4630      	mov	r0, r6
    3388:	47b8      	blx	r7
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    338a:	b2c0      	uxtb	r0, r0
    338c:	9001      	str	r0, [sp, #4]
    338e:	9600      	str	r6, [sp, #0]
    3390:	fa5f f389 	uxtb.w	r3, r9
    3394:	aa14      	add	r2, sp, #80	; 0x50
    3396:	4641      	mov	r1, r8
    3398:	980d      	ldr	r0, [sp, #52]	; 0x34
    339a:	4e10      	ldr	r6, [pc, #64]	; (33dc <grid_module_po16_revb_init+0x108>)
    339c:	47b0      	blx	r6
	for(uint8_t i=0; i<17; i++){
    339e:	2d10      	cmp	r5, #16
    33a0:	d9cb      	bls.n	333a <grid_module_po16_revb_init+0x66>
	

		
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    33a2:	2307      	movs	r3, #7
    33a4:	220e      	movs	r2, #14
    33a6:	2105      	movs	r1, #5
    33a8:	2010      	movs	r0, #16
    33aa:	4c0d      	ldr	r4, [pc, #52]	; (33e0 <grid_module_po16_revb_init+0x10c>)
    33ac:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 16);
    33ae:	4c0d      	ldr	r4, [pc, #52]	; (33e4 <grid_module_po16_revb_init+0x110>)
    33b0:	2110      	movs	r1, #16
    33b2:	4620      	mov	r0, r4
    33b4:	4b0c      	ldr	r3, [pc, #48]	; (33e8 <grid_module_po16_revb_init+0x114>)
    33b6:	4798      	blx	r3

	

	
	
	grid_module_init_animation(&grid_led_state);
    33b8:	4620      	mov	r0, r4
    33ba:	4b0c      	ldr	r3, [pc, #48]	; (33ec <grid_module_po16_revb_init+0x118>)
    33bc:	4798      	blx	r3
	
	
	
	grid_module_po16_revb_hardware_init();
    33be:	4b0c      	ldr	r3, [pc, #48]	; (33f0 <grid_module_po16_revb_init+0x11c>)
    33c0:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    33c2:	4b0c      	ldr	r3, [pc, #48]	; (33f4 <grid_module_po16_revb_init+0x120>)
    33c4:	4798      	blx	r3
	
    33c6:	b01d      	add	sp, #116	; 0x74
    33c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33cc:	00003add 	.word	0x00003add
    33d0:	0000b441 	.word	0x0000b441
    33d4:	0000bc00 	.word	0x0000bc00
    33d8:	0000bc18 	.word	0x0000bc18
    33dc:	00003af5 	.word	0x00003af5
    33e0:	00000f7d 	.word	0x00000f7d
    33e4:	20002428 	.word	0x20002428
    33e8:	00001d89 	.word	0x00001d89
    33ec:	00001f89 	.word	0x00001f89
    33f0:	00003291 	.word	0x00003291
    33f4:	00002fd5 	.word	0x00002fd5
    33f8:	0000bc1c 	.word	0x0000bc1c
    33fc:	0000b3f9 	.word	0x0000b3f9

00003400 <tx_cb_USART_GRID>:

void tx_cb_USART_GRID(struct grid_port* const por){
	

	
	if(por->tx_double_buffer[1] == GRID_MSG_BROADCAST){
    3400:	7f43      	ldrb	r3, [r0, #29]
    3402:	2b0f      	cmp	r3, #15
    3404:	d00d      	beq.n	3422 <tx_cb_USART_GRID+0x22>
			por->tx_double_buffer[i] = 0;
		}
		
		por->tx_double_buffer_status = 0;
	}
	else if (por->tx_double_buffer[1] == GRID_MSG_DIRECT){
    3406:	2b0e      	cmp	r3, #14
    3408:	d017      	beq.n	343a <tx_cb_USART_GRID+0x3a>
    340a:	f100 031b 	add.w	r3, r0, #27
    340e:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
		por->tx_double_buffer_status = 0;
	}
	else{
		//TRAP
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    3412:	2200      	movs	r2, #0
    3414:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    3418:	428b      	cmp	r3, r1
    341a:	d1fb      	bne.n	3414 <tx_cb_USART_GRID+0x14>
		}
		
		por->tx_double_buffer_status = 0;
    341c:	2300      	movs	r3, #0
    341e:	8103      	strh	r3, [r0, #8]
    3420:	4770      	bx	lr
    3422:	f100 031b 	add.w	r3, r0, #27
    3426:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
			por->tx_double_buffer[i] = 0;
    342a:	2200      	movs	r2, #0
    342c:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    3430:	428b      	cmp	r3, r1
    3432:	d1fb      	bne.n	342c <tx_cb_USART_GRID+0x2c>
		por->tx_double_buffer_status = 0;
    3434:	2300      	movs	r3, #0
    3436:	8103      	strh	r3, [r0, #8]
    3438:	4770      	bx	lr
    343a:	f100 031b 	add.w	r3, r0, #27
    343e:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
			por->tx_double_buffer[i] = 0;
    3442:	2200      	movs	r2, #0
    3444:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    3448:	428b      	cmp	r3, r1
    344a:	d1fb      	bne.n	3444 <tx_cb_USART_GRID+0x44>
		por->tx_double_buffer_status = 0;
    344c:	2300      	movs	r3, #0
    344e:	8103      	strh	r3, [r0, #8]
    3450:	4770      	bx	lr
	...

00003454 <tx_cb_USART_GRID_W>:
{
    3454:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    3456:	4802      	ldr	r0, [pc, #8]	; (3460 <tx_cb_USART_GRID_W+0xc>)
    3458:	4b02      	ldr	r3, [pc, #8]	; (3464 <tx_cb_USART_GRID_W+0x10>)
    345a:	4798      	blx	r3
    345c:	bd08      	pop	{r3, pc}
    345e:	bf00      	nop
    3460:	20001c7c 	.word	0x20001c7c
    3464:	00003401 	.word	0x00003401

00003468 <tx_cb_USART_GRID_S>:
{
    3468:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    346a:	4802      	ldr	r0, [pc, #8]	; (3474 <tx_cb_USART_GRID_S+0xc>)
    346c:	4b02      	ldr	r3, [pc, #8]	; (3478 <tx_cb_USART_GRID_S+0x10>)
    346e:	4798      	blx	r3
    3470:	bd08      	pop	{r3, pc}
    3472:	bf00      	nop
    3474:	20001e74 	.word	0x20001e74
    3478:	00003401 	.word	0x00003401

0000347c <tx_cb_USART_GRID_E>:
{
    347c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    347e:	4802      	ldr	r0, [pc, #8]	; (3488 <tx_cb_USART_GRID_E+0xc>)
    3480:	4b02      	ldr	r3, [pc, #8]	; (348c <tx_cb_USART_GRID_E+0x10>)
    3482:	4798      	blx	r3
    3484:	bd08      	pop	{r3, pc}
    3486:	bf00      	nop
    3488:	20002240 	.word	0x20002240
    348c:	00003401 	.word	0x00003401

00003490 <tx_cb_USART_GRID_N>:
{
    3490:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    3492:	4802      	ldr	r0, [pc, #8]	; (349c <tx_cb_USART_GRID_N+0xc>)
    3494:	4b02      	ldr	r3, [pc, #8]	; (34a0 <tx_cb_USART_GRID_N+0x10>)
    3496:	4798      	blx	r3
    3498:	bd08      	pop	{r3, pc}
    349a:	bf00      	nop
    349c:	20001248 	.word	0x20001248
    34a0:	00003401 	.word	0x00003401

000034a4 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    34a4:	b508      	push	{r3, lr}
    34a6:	7983      	ldrb	r3, [r0, #6]
    34a8:	011b      	lsls	r3, r3, #4
    34aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    34ae:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    34b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    34b4:	f022 0202 	bic.w	r2, r2, #2
    34b8:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    34ba:	2100      	movs	r1, #0
    34bc:	7980      	ldrb	r0, [r0, #6]
    34be:	4b01      	ldr	r3, [pc, #4]	; (34c4 <grid_sys_port_reset_dma+0x20>)
    34c0:	4798      	blx	r3
    34c2:	bd08      	pop	{r3, pc}
    34c4:	00005ab5 	.word	0x00005ab5

000034c8 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    34c8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34ca:	4802      	ldr	r0, [pc, #8]	; (34d4 <dma_transfer_complete_w_cb+0xc>)
    34cc:	4b02      	ldr	r3, [pc, #8]	; (34d8 <dma_transfer_complete_w_cb+0x10>)
    34ce:	4798      	blx	r3
    34d0:	bd08      	pop	{r3, pc}
    34d2:	bf00      	nop
    34d4:	20001c7c 	.word	0x20001c7c
    34d8:	000034a5 	.word	0x000034a5

000034dc <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    34dc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34de:	4802      	ldr	r0, [pc, #8]	; (34e8 <dma_transfer_complete_s_cb+0xc>)
    34e0:	4b02      	ldr	r3, [pc, #8]	; (34ec <dma_transfer_complete_s_cb+0x10>)
    34e2:	4798      	blx	r3
    34e4:	bd08      	pop	{r3, pc}
    34e6:	bf00      	nop
    34e8:	20001e74 	.word	0x20001e74
    34ec:	000034a5 	.word	0x000034a5

000034f0 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    34f0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34f2:	4802      	ldr	r0, [pc, #8]	; (34fc <dma_transfer_complete_e_cb+0xc>)
    34f4:	4b02      	ldr	r3, [pc, #8]	; (3500 <dma_transfer_complete_e_cb+0x10>)
    34f6:	4798      	blx	r3
    34f8:	bd08      	pop	{r3, pc}
    34fa:	bf00      	nop
    34fc:	20002240 	.word	0x20002240
    3500:	000034a5 	.word	0x000034a5

00003504 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    3504:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3506:	4802      	ldr	r0, [pc, #8]	; (3510 <dma_transfer_complete_n_cb+0xc>)
    3508:	4b02      	ldr	r3, [pc, #8]	; (3514 <dma_transfer_complete_n_cb+0x10>)
    350a:	4798      	blx	r3
    350c:	bd08      	pop	{r3, pc}
    350e:	bf00      	nop
    3510:	20001248 	.word	0x20001248
    3514:	000034a5 	.word	0x000034a5

00003518 <grid_sys_uart_init>:
}

void grid_sys_uart_init(){
    3518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    351c:	4b2f      	ldr	r3, [pc, #188]	; (35dc <grid_sys_uart_init+0xc4>)
    351e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3522:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3526:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    352a:	f042 0204 	orr.w	r2, r2, #4
    352e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3532:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3536:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    353a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    353e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    3542:	f042 0204 	orr.w	r2, r2, #4
    3546:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    354a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    354e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3552:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3556:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    355a:	f042 0204 	orr.w	r2, r2, #4
    355e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3562:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3566:	f44f 7100 	mov.w	r1, #512	; 0x200
    356a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    356e:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3572:	f042 0204 	orr.w	r2, r2, #4
    3576:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    357a:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	


	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    357e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3618 <grid_sys_uart_init+0x100>
    3582:	4a17      	ldr	r2, [pc, #92]	; (35e0 <grid_sys_uart_init+0xc8>)
    3584:	2101      	movs	r1, #1
    3586:	4640      	mov	r0, r8
    3588:	4c16      	ldr	r4, [pc, #88]	; (35e4 <grid_sys_uart_init+0xcc>)
    358a:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    358c:	4f16      	ldr	r7, [pc, #88]	; (35e8 <grid_sys_uart_init+0xd0>)
    358e:	4a17      	ldr	r2, [pc, #92]	; (35ec <grid_sys_uart_init+0xd4>)
    3590:	2101      	movs	r1, #1
    3592:	4638      	mov	r0, r7
    3594:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    3596:	4e16      	ldr	r6, [pc, #88]	; (35f0 <grid_sys_uart_init+0xd8>)
    3598:	4a16      	ldr	r2, [pc, #88]	; (35f4 <grid_sys_uart_init+0xdc>)
    359a:	2101      	movs	r1, #1
    359c:	4630      	mov	r0, r6
    359e:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    35a0:	4d15      	ldr	r5, [pc, #84]	; (35f8 <grid_sys_uart_init+0xe0>)
    35a2:	4a16      	ldr	r2, [pc, #88]	; (35fc <grid_sys_uart_init+0xe4>)
    35a4:	2101      	movs	r1, #1
    35a6:	4628      	mov	r0, r5
    35a8:	47a0      	blx	r4
	//  	usart_async_register_callback(&USART_NORTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_N);
	//  	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
	//  	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
	//  	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);
	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    35aa:	4915      	ldr	r1, [pc, #84]	; (3600 <grid_sys_uart_init+0xe8>)
    35ac:	4640      	mov	r0, r8
    35ae:	4c15      	ldr	r4, [pc, #84]	; (3604 <grid_sys_uart_init+0xec>)
    35b0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    35b2:	4915      	ldr	r1, [pc, #84]	; (3608 <grid_sys_uart_init+0xf0>)
    35b4:	4638      	mov	r0, r7
    35b6:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    35b8:	4914      	ldr	r1, [pc, #80]	; (360c <grid_sys_uart_init+0xf4>)
    35ba:	4630      	mov	r0, r6
    35bc:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    35be:	4914      	ldr	r1, [pc, #80]	; (3610 <grid_sys_uart_init+0xf8>)
    35c0:	4628      	mov	r0, r5
    35c2:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    35c4:	4640      	mov	r0, r8
    35c6:	4c13      	ldr	r4, [pc, #76]	; (3614 <grid_sys_uart_init+0xfc>)
    35c8:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    35ca:	4638      	mov	r0, r7
    35cc:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    35ce:	4630      	mov	r0, r6
    35d0:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    35d2:	4628      	mov	r0, r5
    35d4:	47a0      	blx	r4
    35d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35da:	bf00      	nop
    35dc:	41008000 	.word	0x41008000
    35e0:	00003491 	.word	0x00003491
    35e4:	00004c5d 	.word	0x00004c5d
    35e8:	20001034 	.word	0x20001034
    35ec:	0000347d 	.word	0x0000347d
    35f0:	20001188 	.word	0x20001188
    35f4:	00003469 	.word	0x00003469
    35f8:	20001138 	.word	0x20001138
    35fc:	00003455 	.word	0x00003455
    3600:	20001658 	.word	0x20001658
    3604:	00004c35 	.word	0x00004c35
    3608:	20001e60 	.word	0x20001e60
    360c:	20002058 	.word	0x20002058
    3610:	20002450 	.word	0x20002450
    3614:	00004c09 	.word	0x00004c09
    3618:	20001084 	.word	0x20001084

0000361c <grid_rx_dma_init_one>:



}

void grid_rx_dma_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    361c:	b5f0      	push	{r4, r5, r6, r7, lr}
    361e:	b083      	sub	sp, #12
    3620:	460f      	mov	r7, r1
    3622:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    3624:	7984      	ldrb	r4, [r0, #6]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    3626:	4605      	mov	r5, r0
    3628:	f855 3be4 	ldr.w	r3, [r5], #228
    362c:	6a19      	ldr	r1, [r3, #32]
    362e:	3128      	adds	r1, #40	; 0x28
    3630:	4620      	mov	r0, r4
    3632:	4b0d      	ldr	r3, [pc, #52]	; (3668 <grid_rx_dma_init_one+0x4c>)
    3634:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3636:	4629      	mov	r1, r5
    3638:	4620      	mov	r0, r4
    363a:	4b0c      	ldr	r3, [pc, #48]	; (366c <grid_rx_dma_init_one+0x50>)
    363c:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    363e:	4639      	mov	r1, r7
    3640:	4620      	mov	r0, r4
    3642:	4b0b      	ldr	r3, [pc, #44]	; (3670 <grid_rx_dma_init_one+0x54>)
    3644:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    3646:	4621      	mov	r1, r4
    3648:	a801      	add	r0, sp, #4
    364a:	4b0a      	ldr	r3, [pc, #40]	; (3674 <grid_rx_dma_init_one+0x58>)
    364c:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    364e:	9b01      	ldr	r3, [sp, #4]
    3650:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    3652:	2201      	movs	r2, #1
    3654:	2100      	movs	r1, #0
    3656:	4620      	mov	r0, r4
    3658:	4b07      	ldr	r3, [pc, #28]	; (3678 <grid_rx_dma_init_one+0x5c>)
    365a:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    365c:	2100      	movs	r1, #0
    365e:	4620      	mov	r0, r4
    3660:	4b06      	ldr	r3, [pc, #24]	; (367c <grid_rx_dma_init_one+0x60>)
    3662:	4798      	blx	r3
	
}
    3664:	b003      	add	sp, #12
    3666:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3668:	00005a31 	.word	0x00005a31
    366c:	00005a21 	.word	0x00005a21
    3670:	00005a5d 	.word	0x00005a5d
    3674:	00005af5 	.word	0x00005af5
    3678:	000059cd 	.word	0x000059cd
    367c:	00005ab5 	.word	0x00005ab5

00003680 <grid_rx_dma_init>:

void grid_rx_dma_init(){
    3680:	b510      	push	{r4, lr}
	
	grid_rx_dma_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    3682:	4a09      	ldr	r2, [pc, #36]	; (36a8 <grid_rx_dma_init+0x28>)
    3684:	21c8      	movs	r1, #200	; 0xc8
    3686:	4809      	ldr	r0, [pc, #36]	; (36ac <grid_rx_dma_init+0x2c>)
    3688:	4c09      	ldr	r4, [pc, #36]	; (36b0 <grid_rx_dma_init+0x30>)
    368a:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    368c:	4a09      	ldr	r2, [pc, #36]	; (36b4 <grid_rx_dma_init+0x34>)
    368e:	21c8      	movs	r1, #200	; 0xc8
    3690:	4809      	ldr	r0, [pc, #36]	; (36b8 <grid_rx_dma_init+0x38>)
    3692:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    3694:	4a09      	ldr	r2, [pc, #36]	; (36bc <grid_rx_dma_init+0x3c>)
    3696:	21c8      	movs	r1, #200	; 0xc8
    3698:	4809      	ldr	r0, [pc, #36]	; (36c0 <grid_rx_dma_init+0x40>)
    369a:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    369c:	4a09      	ldr	r2, [pc, #36]	; (36c4 <grid_rx_dma_init+0x44>)
    369e:	21c8      	movs	r1, #200	; 0xc8
    36a0:	4809      	ldr	r0, [pc, #36]	; (36c8 <grid_rx_dma_init+0x48>)
    36a2:	47a0      	blx	r4
    36a4:	bd10      	pop	{r4, pc}
    36a6:	bf00      	nop
    36a8:	00003505 	.word	0x00003505
    36ac:	20001248 	.word	0x20001248
    36b0:	0000361d 	.word	0x0000361d
    36b4:	000034f1 	.word	0x000034f1
    36b8:	20002240 	.word	0x20002240
    36bc:	000034dd 	.word	0x000034dd
    36c0:	20001e74 	.word	0x20001e74
    36c4:	000034c9 	.word	0x000034c9
    36c8:	20001c7c 	.word	0x20001c7c

000036cc <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    36cc:	7a00      	ldrb	r0, [r0, #8]
    36ce:	4770      	bx	lr

000036d0 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    36d0:	2300      	movs	r3, #0
    36d2:	7203      	strb	r3, [r0, #8]
    36d4:	4770      	bx	lr
	...

000036d8 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    36d8:	7983      	ldrb	r3, [r0, #6]
    36da:	b123      	cbz	r3, 36e6 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    36dc:	2b01      	cmp	r3, #1
    36de:	d00f      	beq.n	3700 <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    36e0:	2b02      	cmp	r3, #2
    36e2:	d015      	beq.n	3710 <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    36e4:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    36e6:	8880      	ldrh	r0, [r0, #4]
    36e8:	0840      	lsrs	r0, r0, #1
    36ea:	387d      	subs	r0, #125	; 0x7d
    36ec:	2800      	cmp	r0, #0
    36ee:	bfb8      	it	lt
    36f0:	4240      	neglt	r0, r0
    36f2:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    36f6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    36fa:	f3c0 0047 	ubfx	r0, r0, #1, #8
    36fe:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    3700:	8880      	ldrh	r0, [r0, #4]
    3702:	4b06      	ldr	r3, [pc, #24]	; (371c <grid_sys_alert_get_color_intensity+0x44>)
    3704:	fba3 3000 	umull	r3, r0, r3, r0
    3708:	f340 1000 	sbfx	r0, r0, #4, #1
    370c:	b2c0      	uxtb	r0, r0
    370e:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    3710:	8880      	ldrh	r0, [r0, #4]
    3712:	2864      	cmp	r0, #100	; 0x64
    3714:	bf8c      	ite	hi
    3716:	20ff      	movhi	r0, #255	; 0xff
    3718:	2000      	movls	r0, #0
    371a:	4770      	bx	lr
    371c:	10624dd3 	.word	0x10624dd3

00003720 <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    3720:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    3722:	2401      	movs	r4, #1
    3724:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    3726:	7001      	strb	r1, [r0, #0]
	mod->alert_color_green = green;
    3728:	7042      	strb	r2, [r0, #1]
	mod->alert_color_blue = blue;
    372a:	7083      	strb	r3, [r0, #2]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    372c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3730:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    3732:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3736:	7183      	strb	r3, [r0, #6]
	
}
    3738:	f85d 4b04 	ldr.w	r4, [sp], #4
    373c:	4770      	bx	lr

0000373e <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    373e:	7800      	ldrb	r0, [r0, #0]
    3740:	4770      	bx	lr

00003742 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    3742:	7840      	ldrb	r0, [r0, #1]
    3744:	4770      	bx	lr

00003746 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    3746:	7880      	ldrb	r0, [r0, #2]
    3748:	4770      	bx	lr

0000374a <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    374a:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    374c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3750:	b2d8      	uxtb	r0, r3
    3752:	2809      	cmp	r0, #9
    3754:	d90d      	bls.n	3772 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    3756:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    375a:	b2db      	uxtb	r3, r3
    375c:	2b05      	cmp	r3, #5
    375e:	d903      	bls.n	3768 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    3760:	b131      	cbz	r1, 3770 <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    3762:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    3764:	2000      	movs	r0, #0
    3766:	4770      	bx	lr
		result = ascii - 97 + 10;
    3768:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    376c:	b2c0      	uxtb	r0, r0
    376e:	4770      	bx	lr
	uint8_t result = 0;
    3770:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    3772:	4770      	bx	lr

00003774 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    3774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    3778:	b1c1      	cbz	r1, 37ac <grid_sys_read_hex_string_value+0x38>
    377a:	4690      	mov	r8, r2
    377c:	1e45      	subs	r5, r0, #1
    377e:	1e4b      	subs	r3, r1, #1
    3780:	009c      	lsls	r4, r3, #2
    3782:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3786:	3f02      	subs	r7, #2
    3788:	b2db      	uxtb	r3, r3
    378a:	1aff      	subs	r7, r7, r3
    378c:	00bf      	lsls	r7, r7, #2
    378e:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    3790:	f8df 901c 	ldr.w	r9, [pc, #28]	; 37b0 <grid_sys_read_hex_string_value+0x3c>
    3794:	4641      	mov	r1, r8
    3796:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    379a:	47c8      	blx	r9
    379c:	40a0      	lsls	r0, r4
    379e:	4406      	add	r6, r0
    37a0:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    37a2:	42bc      	cmp	r4, r7
    37a4:	d1f6      	bne.n	3794 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    37a6:	4630      	mov	r0, r6
    37a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    37ac:	2600      	movs	r6, #0
	return result;
    37ae:	e7fa      	b.n	37a6 <grid_sys_read_hex_string_value+0x32>
    37b0:	0000374b 	.word	0x0000374b

000037b4 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    37b4:	b530      	push	{r4, r5, lr}
    37b6:	b085      	sub	sp, #20
    37b8:	4605      	mov	r5, r0
    37ba:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    37bc:	4909      	ldr	r1, [pc, #36]	; (37e4 <grid_sys_write_hex_string_value+0x30>)
    37be:	a801      	add	r0, sp, #4
    37c0:	4b09      	ldr	r3, [pc, #36]	; (37e8 <grid_sys_write_hex_string_value+0x34>)
    37c2:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    37c4:	b164      	cbz	r4, 37e0 <grid_sys_write_hex_string_value+0x2c>
    37c6:	ab04      	add	r3, sp, #16
    37c8:	1b1a      	subs	r2, r3, r4
    37ca:	3a05      	subs	r2, #5
    37cc:	1e6b      	subs	r3, r5, #1
    37ce:	1e60      	subs	r0, r4, #1
    37d0:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    37d4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    37d8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    37dc:	4283      	cmp	r3, r0
    37de:	d1f9      	bne.n	37d4 <grid_sys_write_hex_string_value+0x20>
	}

}
    37e0:	b005      	add	sp, #20
    37e2:	bd30      	pop	{r4, r5, pc}
    37e4:	0000bc68 	.word	0x0000bc68
    37e8:	0000b3f9 	.word	0x0000b3f9

000037ec <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    37ec:	4b34      	ldr	r3, [pc, #208]	; (38c0 <grid_sys_get_hwcfg+0xd4>)
    37ee:	681b      	ldr	r3, [r3, #0]
    37f0:	f1b3 3fff 	cmp.w	r3, #4294967295
    37f4:	d002      	beq.n	37fc <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    37f6:	4b32      	ldr	r3, [pc, #200]	; (38c0 <grid_sys_get_hwcfg+0xd4>)
    37f8:	6818      	ldr	r0, [r3, #0]
    37fa:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    37fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3800:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3802:	4b30      	ldr	r3, [pc, #192]	; (38c4 <grid_sys_get_hwcfg+0xd8>)
    3804:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    380c:	492e      	ldr	r1, [pc, #184]	; (38c8 <grid_sys_get_hwcfg+0xdc>)
    380e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3812:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3816:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    381a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    381e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3822:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3826:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    382a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    382e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3832:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3836:	4925      	ldr	r1, [pc, #148]	; (38cc <grid_sys_get_hwcfg+0xe0>)
    3838:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    383c:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    3840:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3844:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    3848:	2001      	movs	r0, #1
    384a:	4b21      	ldr	r3, [pc, #132]	; (38d0 <grid_sys_get_hwcfg+0xe4>)
    384c:	4798      	blx	r3
    384e:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    3850:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3852:	4d1c      	ldr	r5, [pc, #112]	; (38c4 <grid_sys_get_hwcfg+0xd8>)
    3854:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    3858:	4f1d      	ldr	r7, [pc, #116]	; (38d0 <grid_sys_get_hwcfg+0xe4>)
    385a:	e00c      	b.n	3876 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    385c:	2e07      	cmp	r6, #7
    385e:	d027      	beq.n	38b0 <grid_sys_get_hwcfg+0xc4>
    3860:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    3864:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    3868:	2001      	movs	r0, #1
    386a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    386c:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    3870:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    3872:	2e08      	cmp	r6, #8
    3874:	d01c      	beq.n	38b0 <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3876:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    387a:	2001      	movs	r0, #1
    387c:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    387e:	a801      	add	r0, sp, #4
    3880:	4b14      	ldr	r3, [pc, #80]	; (38d4 <grid_sys_get_hwcfg+0xe8>)
    3882:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3884:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3888:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    388c:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3890:	405c      	eors	r4, r3
    3892:	4014      	ands	r4, r2
    3894:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3896:	a801      	add	r0, sp, #4
    3898:	4b0f      	ldr	r3, [pc, #60]	; (38d8 <grid_sys_get_hwcfg+0xec>)
    389a:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    389c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    38a0:	d0dc      	beq.n	385c <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    38a2:	2301      	movs	r3, #1
    38a4:	40b3      	lsls	r3, r6
    38a6:	ea43 0808 	orr.w	r8, r3, r8
    38aa:	fa5f f888 	uxtb.w	r8, r8
    38ae:	e7d5      	b.n	385c <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    38b0:	4b03      	ldr	r3, [pc, #12]	; (38c0 <grid_sys_get_hwcfg+0xd4>)
    38b2:	f8c3 8000 	str.w	r8, [r3]
}
    38b6:	4b02      	ldr	r3, [pc, #8]	; (38c0 <grid_sys_get_hwcfg+0xd4>)
    38b8:	6818      	ldr	r0, [r3, #0]
    38ba:	b003      	add	sp, #12
    38bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    38c0:	20000354 	.word	0x20000354
    38c4:	41008000 	.word	0x41008000
    38c8:	40002000 	.word	0x40002000
    38cc:	40028000 	.word	0x40028000
    38d0:	00004149 	.word	0x00004149
    38d4:	000040c9 	.word	0x000040c9
    38d8:	000040d7 	.word	0x000040d7

000038dc <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    38dc:	2903      	cmp	r1, #3
    38de:	d009      	beq.n	38f4 <grid_msg_get_checksum+0x18>
    38e0:	1e43      	subs	r3, r0, #1
    38e2:	3904      	subs	r1, #4
    38e4:	4401      	add	r1, r0
    38e6:	2000      	movs	r0, #0
		checksum ^= str[i];
    38e8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    38ec:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    38ee:	428b      	cmp	r3, r1
    38f0:	d1fa      	bne.n	38e8 <grid_msg_get_checksum+0xc>
    38f2:	4770      	bx	lr
	uint8_t checksum = 0;
    38f4:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    38f6:	4770      	bx	lr

000038f8 <grid_msg_set_checksum>:

void grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    38f8:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    38fa:	1ecb      	subs	r3, r1, #3
    38fc:	2102      	movs	r1, #2
    38fe:	4418      	add	r0, r3
    3900:	4b01      	ldr	r3, [pc, #4]	; (3908 <grid_msg_set_checksum+0x10>)
    3902:	4798      	blx	r3
    3904:	bd08      	pop	{r3, pc}
    3906:	bf00      	nop
    3908:	000037b5 	.word	0x000037b5

0000390c <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    390c:	b500      	push	{lr}
    390e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3910:	aa02      	add	r2, sp, #8
    3912:	2300      	movs	r3, #0
    3914:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3918:	2102      	movs	r1, #2
    391a:	3004      	adds	r0, #4
    391c:	4b02      	ldr	r3, [pc, #8]	; (3928 <grid_msg_get_id+0x1c>)
    391e:	4798      	blx	r3
	
}
    3920:	b2c0      	uxtb	r0, r0
    3922:	b003      	add	sp, #12
    3924:	f85d fb04 	ldr.w	pc, [sp], #4
    3928:	00003775 	.word	0x00003775

0000392c <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    392c:	b500      	push	{lr}
    392e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3930:	aa02      	add	r2, sp, #8
    3932:	2300      	movs	r3, #0
    3934:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3938:	2102      	movs	r1, #2
    393a:	3006      	adds	r0, #6
    393c:	4b02      	ldr	r3, [pc, #8]	; (3948 <grid_msg_get_dx+0x1c>)
    393e:	4798      	blx	r3
	
}
    3940:	b2c0      	uxtb	r0, r0
    3942:	b003      	add	sp, #12
    3944:	f85d fb04 	ldr.w	pc, [sp], #4
    3948:	00003775 	.word	0x00003775

0000394c <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    394c:	b500      	push	{lr}
    394e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3950:	aa02      	add	r2, sp, #8
    3952:	2300      	movs	r3, #0
    3954:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3958:	2102      	movs	r1, #2
    395a:	3008      	adds	r0, #8
    395c:	4b02      	ldr	r3, [pc, #8]	; (3968 <grid_msg_get_dy+0x1c>)
    395e:	4798      	blx	r3

}
    3960:	b2c0      	uxtb	r0, r0
    3962:	b003      	add	sp, #12
    3964:	f85d fb04 	ldr.w	pc, [sp], #4
    3968:	00003775 	.word	0x00003775

0000396c <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    396c:	b500      	push	{lr}
    396e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3970:	aa02      	add	r2, sp, #8
    3972:	2300      	movs	r3, #0
    3974:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3978:	2102      	movs	r1, #2
    397a:	300a      	adds	r0, #10
    397c:	4b02      	ldr	r3, [pc, #8]	; (3988 <grid_msg_get_age+0x1c>)
    397e:	4798      	blx	r3
	
}
    3980:	b2c0      	uxtb	r0, r0
    3982:	b003      	add	sp, #12
    3984:	f85d fb04 	ldr.w	pc, [sp], #4
    3988:	00003775 	.word	0x00003775

0000398c <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    398c:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    398e:	460a      	mov	r2, r1
    3990:	2102      	movs	r1, #2
    3992:	3004      	adds	r0, #4
    3994:	4b01      	ldr	r3, [pc, #4]	; (399c <grid_msg_set_id+0x10>)
    3996:	4798      	blx	r3
    3998:	bd08      	pop	{r3, pc}
    399a:	bf00      	nop
    399c:	000037b5 	.word	0x000037b5

000039a0 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    39a0:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    39a2:	460a      	mov	r2, r1
    39a4:	2102      	movs	r1, #2
    39a6:	3006      	adds	r0, #6
    39a8:	4b01      	ldr	r3, [pc, #4]	; (39b0 <grid_msg_set_dx+0x10>)
    39aa:	4798      	blx	r3
    39ac:	bd08      	pop	{r3, pc}
    39ae:	bf00      	nop
    39b0:	000037b5 	.word	0x000037b5

000039b4 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    39b4:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    39b6:	460a      	mov	r2, r1
    39b8:	2102      	movs	r1, #2
    39ba:	3008      	adds	r0, #8
    39bc:	4b01      	ldr	r3, [pc, #4]	; (39c4 <grid_msg_set_dy+0x10>)
    39be:	4798      	blx	r3
    39c0:	bd08      	pop	{r3, pc}
    39c2:	bf00      	nop
    39c4:	000037b5 	.word	0x000037b5

000039c8 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    39c8:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    39ca:	460a      	mov	r2, r1
    39cc:	2102      	movs	r1, #2
    39ce:	300a      	adds	r0, #10
    39d0:	4b01      	ldr	r3, [pc, #4]	; (39d8 <grid_msg_set_age+0x10>)
    39d2:	4798      	blx	r3
    39d4:	bd08      	pop	{r3, pc}
    39d6:	bf00      	nop
    39d8:	000037b5 	.word	0x000037b5

000039dc <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    39dc:	68c3      	ldr	r3, [r0, #12]
    39de:	4299      	cmp	r1, r3
    39e0:	d00e      	beq.n	3a00 <grid_msg_find_recent+0x24>
    39e2:	2301      	movs	r3, #1
    39e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    39e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    39ec:	68d2      	ldr	r2, [r2, #12]
    39ee:	428a      	cmp	r2, r1
    39f0:	d008      	beq.n	3a04 <grid_msg_find_recent+0x28>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    39f2:	3301      	adds	r3, #1
    39f4:	b2db      	uxtb	r3, r3
    39f6:	f013 0f80 	tst.w	r3, #128	; 0x80
    39fa:	d0f3      	beq.n	39e4 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    39fc:	2000      	movs	r0, #0
    39fe:	4770      	bx	lr
			return 1;
    3a00:	2001      	movs	r0, #1
    3a02:	4770      	bx	lr
    3a04:	2001      	movs	r0, #1
}
    3a06:	4770      	bx	lr

00003a08 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3a08:	f890 320c 	ldrb.w	r3, [r0, #524]	; 0x20c
    3a0c:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    3a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3a12:	f880 320c 	strb.w	r3, [r0, #524]	; 0x20c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3a16:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3a1a:	60c1      	str	r1, [r0, #12]
    3a1c:	4770      	bx	lr
	...

00003a20 <grid_sys_ping>:
}




void grid_sys_ping(struct grid_port* por){
    3a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a22:	b085      	sub	sp, #20
    3a24:	4605      	mov	r5, r0
		
		
	uint8_t length = 16;
	uint32_t hwcfg = grid_sys_get_hwcfg();
    3a26:	4b27      	ldr	r3, [pc, #156]	; (3ac4 <grid_sys_ping+0xa4>)
    3a28:	4798      	blx	r3
	char message[16] = {GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction, '0','0','0','0','0','0','0','0',GRID_MSG_END_OF_TRANSMISSION,'0','0','\n'};
    3a2a:	2301      	movs	r3, #1
    3a2c:	f88d 3000 	strb.w	r3, [sp]
    3a30:	230e      	movs	r3, #14
    3a32:	f88d 3001 	strb.w	r3, [sp, #1]
    3a36:	2307      	movs	r3, #7
    3a38:	f88d 3002 	strb.w	r3, [sp, #2]
    3a3c:	796b      	ldrb	r3, [r5, #5]
    3a3e:	f88d 3003 	strb.w	r3, [sp, #3]
    3a42:	2330      	movs	r3, #48	; 0x30
    3a44:	f88d 3004 	strb.w	r3, [sp, #4]
    3a48:	f88d 3005 	strb.w	r3, [sp, #5]
    3a4c:	f88d 3006 	strb.w	r3, [sp, #6]
    3a50:	f88d 3007 	strb.w	r3, [sp, #7]
    3a54:	f88d 3008 	strb.w	r3, [sp, #8]
    3a58:	f88d 3009 	strb.w	r3, [sp, #9]
    3a5c:	f88d 300a 	strb.w	r3, [sp, #10]
    3a60:	f88d 300b 	strb.w	r3, [sp, #11]
    3a64:	2204      	movs	r2, #4
    3a66:	f88d 200c 	strb.w	r2, [sp, #12]
    3a6a:	f88d 300d 	strb.w	r3, [sp, #13]
    3a6e:	f88d 300e 	strb.w	r3, [sp, #14]
    3a72:	230a      	movs	r3, #10
    3a74:	f88d 300f 	strb.w	r3, [sp, #15]
	// Create the packet
	//sprintf(message, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction ,hwcfg, GRID_MSG_END_OF_TRANSMISSION);
	//length = strlen(message);
	

	grid_sys_write_hex_string_value(&message[4], 8, hwcfg);
    3a78:	4602      	mov	r2, r0
    3a7a:	2108      	movs	r1, #8
    3a7c:	a801      	add	r0, sp, #4
    3a7e:	4c12      	ldr	r4, [pc, #72]	; (3ac8 <grid_sys_ping+0xa8>)
    3a80:	47a0      	blx	r4
	

	
 	grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    3a82:	2110      	movs	r1, #16
    3a84:	4668      	mov	r0, sp
    3a86:	4b11      	ldr	r3, [pc, #68]	; (3acc <grid_sys_ping+0xac>)
    3a88:	4798      	blx	r3
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3a8a:	4602      	mov	r2, r0
    3a8c:	2102      	movs	r1, #2
    3a8e:	f10d 000d 	add.w	r0, sp, #13
    3a92:	47a0      	blx	r4
		
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, length)){
    3a94:	f505 75d6 	add.w	r5, r5, #428	; 0x1ac
    3a98:	2110      	movs	r1, #16
    3a9a:	4628      	mov	r0, r5
    3a9c:	4b0c      	ldr	r3, [pc, #48]	; (3ad0 <grid_sys_ping+0xb0>)
    3a9e:	4798      	blx	r3
    3aa0:	b168      	cbz	r0, 3abe <grid_sys_ping+0x9e>
    3aa2:	f10d 34ff 	add.w	r4, sp, #4294967295
    3aa6:	f10d 070f 	add.w	r7, sp, #15
		
		for(uint16_t i = 0; i<length; i++){
			
			grid_buffer_write_character(&por->tx_buffer, message[i]);
    3aaa:	4e0a      	ldr	r6, [pc, #40]	; (3ad4 <grid_sys_ping+0xb4>)
    3aac:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3ab0:	4628      	mov	r0, r5
    3ab2:	47b0      	blx	r6
		for(uint16_t i = 0; i<length; i++){
    3ab4:	42bc      	cmp	r4, r7
    3ab6:	d1f9      	bne.n	3aac <grid_sys_ping+0x8c>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    3ab8:	4628      	mov	r0, r5
    3aba:	4b07      	ldr	r3, [pc, #28]	; (3ad8 <grid_sys_ping+0xb8>)
    3abc:	4798      	blx	r3
	}
				
}
    3abe:	b005      	add	sp, #20
    3ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ac2:	bf00      	nop
    3ac4:	000037ed 	.word	0x000037ed
    3ac8:	000037b5 	.word	0x000037b5
    3acc:	000038dd 	.word	0x000038dd
    3ad0:	00001155 	.word	0x00001155
    3ad4:	00001185 	.word	0x00001185
    3ad8:	000011a1 	.word	0x000011a1

00003adc <grid_ui_model_init>:
	}
	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    3adc:	b538      	push	{r3, r4, r5, lr}
    3ade:	4604      	mov	r4, r0
    3ae0:	460d      	mov	r5, r1
	
	mod->report_array = malloc(len*sizeof(struct grid_ui_report));
    3ae2:	0108      	lsls	r0, r1, #4
    3ae4:	4b02      	ldr	r3, [pc, #8]	; (3af0 <grid_ui_model_init+0x14>)
    3ae6:	4798      	blx	r3
    3ae8:	6060      	str	r0, [r4, #4]
	mod->report_length = len;
    3aea:	7025      	strb	r5, [r4, #0]
	
}
    3aec:	bd38      	pop	{r3, r4, r5, pc}
    3aee:	bf00      	nop
    3af0:	0000b1d5 	.word	0x0000b1d5

00003af4 <grid_ui_report_init>:

uint8_t grid_ui_report_init(struct grid_ui_model* mod, uint8_t index, uint8_t* p, uint8_t p_len, uint8_t* h, uint8_t h_len){
    3af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3af8:	4605      	mov	r5, r0
    3afa:	4617      	mov	r7, r2
    3afc:	9e08      	ldr	r6, [sp, #32]
    3afe:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    3b02:	010c      	lsls	r4, r1, #4
    3b04:	6842      	ldr	r2, [r0, #4]
    3b06:	2100      	movs	r1, #0
    3b08:	5511      	strb	r1, [r2, r4]
	mod->report_array[index].payload_length = p_len;
    3b0a:	6842      	ldr	r2, [r0, #4]
    3b0c:	4422      	add	r2, r4
    3b0e:	7053      	strb	r3, [r2, #1]
	mod->report_array[index].helper_length = h_len;
    3b10:	6842      	ldr	r2, [r0, #4]
    3b12:	4422      	add	r2, r4
    3b14:	f882 a008 	strb.w	sl, [r2, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    3b18:	6842      	ldr	r2, [r0, #4]
    3b1a:	eb02 0804 	add.w	r8, r2, r4
    3b1e:	4618      	mov	r0, r3
    3b20:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3b90 <grid_ui_report_init+0x9c>
    3b24:	47c8      	blx	r9
    3b26:	f8c8 0004 	str.w	r0, [r8, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    3b2a:	686b      	ldr	r3, [r5, #4]
    3b2c:	eb03 0804 	add.w	r8, r3, r4
    3b30:	4650      	mov	r0, sl
    3b32:	47c8      	blx	r9
    3b34:	f8c8 000c 	str.w	r0, [r8, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    3b38:	686a      	ldr	r2, [r5, #4]
    3b3a:	4422      	add	r2, r4
    3b3c:	6853      	ldr	r3, [r2, #4]
    3b3e:	b303      	cbz	r3, 3b82 <grid_ui_report_init+0x8e>
    3b40:	68d3      	ldr	r3, [r2, #12]
    3b42:	b30b      	cbz	r3, 3b88 <grid_ui_report_init+0x94>
		return -1;
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3b44:	7853      	ldrb	r3, [r2, #1]
    3b46:	b153      	cbz	r3, 3b5e <grid_ui_report_init+0x6a>
    3b48:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    3b4a:	5cf9      	ldrb	r1, [r7, r3]
    3b4c:	6852      	ldr	r2, [r2, #4]
    3b4e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3b50:	3301      	adds	r3, #1
    3b52:	b2db      	uxtb	r3, r3
    3b54:	686a      	ldr	r2, [r5, #4]
    3b56:	4422      	add	r2, r4
    3b58:	7851      	ldrb	r1, [r2, #1]
    3b5a:	4299      	cmp	r1, r3
    3b5c:	d8f5      	bhi.n	3b4a <grid_ui_report_init+0x56>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3b5e:	686a      	ldr	r2, [r5, #4]
    3b60:	4422      	add	r2, r4
    3b62:	7a10      	ldrb	r0, [r2, #8]
    3b64:	b188      	cbz	r0, 3b8a <grid_ui_report_init+0x96>
    3b66:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    3b68:	5cf1      	ldrb	r1, [r6, r3]
    3b6a:	68d2      	ldr	r2, [r2, #12]
    3b6c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3b6e:	3301      	adds	r3, #1
    3b70:	b2db      	uxtb	r3, r3
    3b72:	686a      	ldr	r2, [r5, #4]
    3b74:	4422      	add	r2, r4
    3b76:	7a11      	ldrb	r1, [r2, #8]
    3b78:	4299      	cmp	r1, r3
    3b7a:	d8f5      	bhi.n	3b68 <grid_ui_report_init+0x74>
	}
	
	return 0;
    3b7c:	2000      	movs	r0, #0
    3b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
    3b82:	20ff      	movs	r0, #255	; 0xff
    3b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b88:	20ff      	movs	r0, #255	; 0xff
	
}
    3b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b8e:	bf00      	nop
    3b90:	0000b1d5 	.word	0x0000b1d5

00003b94 <grid_ui_report_render>:

uint8_t grid_ui_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    3b94:	6843      	ldr	r3, [r0, #4]
    3b96:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    3b9a:	7848      	ldrb	r0, [r1, #1]
    3b9c:	b140      	cbz	r0, 3bb0 <grid_ui_report_render+0x1c>
    3b9e:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    3ba0:	6848      	ldr	r0, [r1, #4]
    3ba2:	5cc0      	ldrb	r0, [r0, r3]
    3ba4:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    3ba6:	3301      	adds	r3, #1
    3ba8:	b2db      	uxtb	r3, r3
    3baa:	7848      	ldrb	r0, [r1, #1]
    3bac:	4298      	cmp	r0, r3
    3bae:	d8f7      	bhi.n	3ba0 <grid_ui_report_render+0xc>
	}
	
	return rep->payload_length;
}
    3bb0:	4770      	bx	lr

00003bb2 <grid_ui_report_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_ui_report_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    3bb2:	6843      	ldr	r3, [r0, #4]
    3bb4:	0109      	lsls	r1, r1, #4
    3bb6:	2201      	movs	r2, #1
    3bb8:	545a      	strb	r2, [r3, r1]
    3bba:	4770      	bx	lr

00003bbc <grid_ui_report_clear_changed_flag>:
}

void grid_ui_report_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    3bbc:	6843      	ldr	r3, [r0, #4]
    3bbe:	0109      	lsls	r1, r1, #4
    3bc0:	2200      	movs	r2, #0
    3bc2:	545a      	strb	r2, [r3, r1]
    3bc4:	4770      	bx	lr
	...

00003bc8 <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    3bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3bcc:	b0ca      	sub	sp, #296	; 0x128
	sprintf(&message[length],
    3bce:	2317      	movs	r3, #23
    3bd0:	9305      	str	r3, [sp, #20]
    3bd2:	2300      	movs	r3, #0
    3bd4:	9304      	str	r3, [sp, #16]
    3bd6:	227f      	movs	r2, #127	; 0x7f
    3bd8:	9203      	str	r2, [sp, #12]
    3bda:	9202      	str	r2, [sp, #8]
	uint8_t id = grid_sys_state.next_broadcast_message_id;
    3bdc:	4a42      	ldr	r2, [pc, #264]	; (3ce8 <grid_port_process_ui+0x120>)
	sprintf(&message[length],
    3bde:	f892 220d 	ldrb.w	r2, [r2, #525]	; 0x20d
    3be2:	9201      	str	r2, [sp, #4]
    3be4:	9300      	str	r3, [sp, #0]
    3be6:	230f      	movs	r3, #15
    3be8:	2201      	movs	r2, #1
    3bea:	4940      	ldr	r1, [pc, #256]	; (3cec <grid_port_process_ui+0x124>)
    3bec:	a80a      	add	r0, sp, #40	; 0x28
    3bee:	4c40      	ldr	r4, [pc, #256]	; (3cf0 <grid_port_process_ui+0x128>)
    3bf0:	47a0      	blx	r4
	length += strlen(&message[length]);
    3bf2:	a80a      	add	r0, sp, #40	; 0x28
    3bf4:	4b3f      	ldr	r3, [pc, #252]	; (3cf4 <grid_port_process_ui+0x12c>)
    3bf6:	4798      	blx	r3
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    3bf8:	4b3f      	ldr	r3, [pc, #252]	; (3cf8 <grid_port_process_ui+0x130>)
    3bfa:	781b      	ldrb	r3, [r3, #0]
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d02d      	beq.n	3c5c <grid_port_process_ui+0x94>
    3c00:	4605      	mov	r5, r0
    3c02:	2400      	movs	r4, #0
    3c04:	4627      	mov	r7, r4
		CRITICAL_SECTION_ENTER()
    3c06:	f8df 9120 	ldr.w	r9, [pc, #288]	; 3d28 <grid_port_process_ui+0x160>
	return mod->report_array[index].changed;
    3c0a:	4e3b      	ldr	r6, [pc, #236]	; (3cf8 <grid_port_process_ui+0x130>)
		CRITICAL_SECTION_LEAVE()
    3c0c:	f8df 811c 	ldr.w	r8, [pc, #284]	; 3d2c <grid_port_process_ui+0x164>
    3c10:	e007      	b.n	3c22 <grid_port_process_ui+0x5a>
    3c12:	a807      	add	r0, sp, #28
    3c14:	47c0      	blx	r8
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    3c16:	3401      	adds	r4, #1
    3c18:	b2e4      	uxtb	r4, r4
    3c1a:	7833      	ldrb	r3, [r6, #0]
    3c1c:	b2db      	uxtb	r3, r3
    3c1e:	42a3      	cmp	r3, r4
    3c20:	d91b      	bls.n	3c5a <grid_port_process_ui+0x92>
		if (length>200){
    3c22:	2dc8      	cmp	r5, #200	; 0xc8
    3c24:	d8f7      	bhi.n	3c16 <grid_port_process_ui+0x4e>
		CRITICAL_SECTION_ENTER()
    3c26:	a807      	add	r0, sp, #28
    3c28:	47c8      	blx	r9
	return mod->report_array[index].changed;
    3c2a:	6872      	ldr	r2, [r6, #4]
    3c2c:	0123      	lsls	r3, r4, #4
		if (grid_ui_report_get_changed_flag(&grid_ui_state, i)){
    3c2e:	5cd3      	ldrb	r3, [r2, r3]
    3c30:	2b00      	cmp	r3, #0
    3c32:	d0ee      	beq.n	3c12 <grid_port_process_ui+0x4a>
			packetvalid++;
    3c34:	3701      	adds	r7, #1
    3c36:	b2ff      	uxtb	r7, r7
			grid_ui_report_render(&grid_ui_state, i, &message[length]);
    3c38:	ab0a      	add	r3, sp, #40	; 0x28
    3c3a:	eb03 0a05 	add.w	sl, r3, r5
    3c3e:	4652      	mov	r2, sl
    3c40:	4621      	mov	r1, r4
    3c42:	4630      	mov	r0, r6
    3c44:	4b2d      	ldr	r3, [pc, #180]	; (3cfc <grid_port_process_ui+0x134>)
    3c46:	4798      	blx	r3
			grid_ui_report_clear_changed_flag(&grid_ui_state, i);
    3c48:	4621      	mov	r1, r4
    3c4a:	4630      	mov	r0, r6
    3c4c:	4b2c      	ldr	r3, [pc, #176]	; (3d00 <grid_port_process_ui+0x138>)
    3c4e:	4798      	blx	r3
			length += strlen(&message[length]);
    3c50:	4650      	mov	r0, sl
    3c52:	4b28      	ldr	r3, [pc, #160]	; (3cf4 <grid_port_process_ui+0x12c>)
    3c54:	4798      	blx	r3
    3c56:	4405      	add	r5, r0
    3c58:	e7db      	b.n	3c12 <grid_port_process_ui+0x4a>
	if (packetvalid){
    3c5a:	b917      	cbnz	r7, 3c62 <grid_port_process_ui+0x9a>
}
    3c5c:	b04a      	add	sp, #296	; 0x128
    3c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_sys_state.next_broadcast_message_id++;
    3c62:	4a21      	ldr	r2, [pc, #132]	; (3ce8 <grid_port_process_ui+0x120>)
    3c64:	f892 320d 	ldrb.w	r3, [r2, #525]	; 0x20d
    3c68:	3301      	adds	r3, #1
    3c6a:	f882 320d 	strb.w	r3, [r2, #525]	; 0x20d
		sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    3c6e:	ac0a      	add	r4, sp, #40	; 0x28
    3c70:	1966      	adds	r6, r4, r5
    3c72:	2204      	movs	r2, #4
    3c74:	4923      	ldr	r1, [pc, #140]	; (3d04 <grid_port_process_ui+0x13c>)
    3c76:	4630      	mov	r0, r6
    3c78:	4f1d      	ldr	r7, [pc, #116]	; (3cf0 <grid_port_process_ui+0x128>)
    3c7a:	47b8      	blx	r7
		length += strlen(&message[length]);
    3c7c:	4630      	mov	r0, r6
    3c7e:	4e1d      	ldr	r6, [pc, #116]	; (3cf4 <grid_port_process_ui+0x12c>)
    3c80:	47b0      	blx	r6
    3c82:	4405      	add	r5, r0
		sprintf(length_string, "%02x", length);
    3c84:	462a      	mov	r2, r5
    3c86:	4920      	ldr	r1, [pc, #128]	; (3d08 <grid_port_process_ui+0x140>)
    3c88:	a808      	add	r0, sp, #32
    3c8a:	47b8      	blx	r7
		message[2] = length_string[0];
    3c8c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3c90:	70a3      	strb	r3, [r4, #2]
		message[3] = length_string[1];
    3c92:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3c96:	70e3      	strb	r3, [r4, #3]
		sprintf(&message[length], "00\n");
    3c98:	4b1c      	ldr	r3, [pc, #112]	; (3d0c <grid_port_process_ui+0x144>)
    3c9a:	6818      	ldr	r0, [r3, #0]
    3c9c:	5160      	str	r0, [r4, r5]
		length += strlen(&message[length]);
    3c9e:	1960      	adds	r0, r4, r5
    3ca0:	47b0      	blx	r6
    3ca2:	4405      	add	r5, r0
		grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    3ca4:	4629      	mov	r1, r5
    3ca6:	4620      	mov	r0, r4
    3ca8:	4b19      	ldr	r3, [pc, #100]	; (3d10 <grid_port_process_ui+0x148>)
    3caa:	4798      	blx	r3
    3cac:	4602      	mov	r2, r0
    3cae:	4629      	mov	r1, r5
    3cb0:	4620      	mov	r0, r4
    3cb2:	4b18      	ldr	r3, [pc, #96]	; (3d14 <grid_port_process_ui+0x14c>)
    3cb4:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    3cb6:	b2a9      	uxth	r1, r5
    3cb8:	4817      	ldr	r0, [pc, #92]	; (3d18 <grid_port_process_ui+0x150>)
    3cba:	4b18      	ldr	r3, [pc, #96]	; (3d1c <grid_port_process_ui+0x154>)
    3cbc:	4798      	blx	r3
    3cbe:	2800      	cmp	r0, #0
    3cc0:	d0cc      	beq.n	3c5c <grid_port_process_ui+0x94>
			for(uint16_t i = 0; i<length; i++){
    3cc2:	b165      	cbz	r5, 3cde <grid_port_process_ui+0x116>
    3cc4:	2400      	movs	r4, #0
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    3cc6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    3cca:	4f13      	ldr	r7, [pc, #76]	; (3d18 <grid_port_process_ui+0x150>)
    3ccc:	4e14      	ldr	r6, [pc, #80]	; (3d20 <grid_port_process_ui+0x158>)
    3cce:	f818 1004 	ldrb.w	r1, [r8, r4]
    3cd2:	4638      	mov	r0, r7
    3cd4:	47b0      	blx	r6
			for(uint16_t i = 0; i<length; i++){
    3cd6:	3401      	adds	r4, #1
    3cd8:	b2a4      	uxth	r4, r4
    3cda:	42a5      	cmp	r5, r4
    3cdc:	d8f7      	bhi.n	3cce <grid_port_process_ui+0x106>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    3cde:	480e      	ldr	r0, [pc, #56]	; (3d18 <grid_port_process_ui+0x150>)
    3ce0:	4b10      	ldr	r3, [pc, #64]	; (3d24 <grid_port_process_ui+0x15c>)
    3ce2:	4798      	blx	r3
}
    3ce4:	e7ba      	b.n	3c5c <grid_port_process_ui+0x94>
    3ce6:	bf00      	nop
    3ce8:	2000165c 	.word	0x2000165c
    3cec:	0000bc70 	.word	0x0000bc70
    3cf0:	0000b3f9 	.word	0x0000b3f9
    3cf4:	0000b441 	.word	0x0000b441
    3cf8:	20001650 	.word	0x20001650
    3cfc:	00003b95 	.word	0x00003b95
    3d00:	00003bbd 	.word	0x00003bbd
    3d04:	0000bc88 	.word	0x0000bc88
    3d08:	0000bc8c 	.word	0x0000bc8c
    3d0c:	0000bc94 	.word	0x0000bc94
    3d10:	000038dd 	.word	0x000038dd
    3d14:	000038f9 	.word	0x000038f9
    3d18:	20001630 	.word	0x20001630
    3d1c:	00001155 	.word	0x00001155
    3d20:	00001185 	.word	0x00001185
    3d24:	000011a1 	.word	0x000011a1
    3d28:	000040c9 	.word	0x000040c9
    3d2c:	000040d7 	.word	0x000040d7

00003d30 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    3d30:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    3d32:	6983      	ldr	r3, [r0, #24]
    3d34:	b103      	cbz	r3, 3d38 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    3d36:	4798      	blx	r3
    3d38:	bd08      	pop	{r3, pc}

00003d3a <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    3d3a:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    3d3c:	69c3      	ldr	r3, [r0, #28]
    3d3e:	b103      	cbz	r3, 3d42 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    3d40:	4798      	blx	r3
    3d42:	bd08      	pop	{r3, pc}

00003d44 <adc_async_channel_conversion_done>:
{
    3d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d48:	4606      	mov	r6, r0
    3d4a:	460f      	mov	r7, r1
    3d4c:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    3d4e:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    3d50:	5c5c      	ldrb	r4, [r3, r1]
    3d52:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3d56:	00e4      	lsls	r4, r4, #3
    3d58:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    3d5c:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    3d60:	f105 0a04 	add.w	sl, r5, #4
    3d64:	b2d1      	uxtb	r1, r2
    3d66:	4650      	mov	r0, sl
    3d68:	4b0c      	ldr	r3, [pc, #48]	; (3d9c <adc_async_channel_conversion_done+0x58>)
    3d6a:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    3d6c:	4630      	mov	r0, r6
    3d6e:	4b0c      	ldr	r3, [pc, #48]	; (3da0 <adc_async_channel_conversion_done+0x5c>)
    3d70:	4798      	blx	r3
    3d72:	2801      	cmp	r0, #1
    3d74:	d907      	bls.n	3d86 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    3d76:	ea4f 2119 	mov.w	r1, r9, lsr #8
    3d7a:	4650      	mov	r0, sl
    3d7c:	4b07      	ldr	r3, [pc, #28]	; (3d9c <adc_async_channel_conversion_done+0x58>)
    3d7e:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    3d80:	8aab      	ldrh	r3, [r5, #20]
    3d82:	3301      	adds	r3, #1
    3d84:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    3d86:	8aab      	ldrh	r3, [r5, #20]
    3d88:	3301      	adds	r3, #1
    3d8a:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    3d8c:	f858 3004 	ldr.w	r3, [r8, r4]
    3d90:	b113      	cbz	r3, 3d98 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    3d92:	4639      	mov	r1, r7
    3d94:	4630      	mov	r0, r6
    3d96:	4798      	blx	r3
    3d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d9c:	000053ad 	.word	0x000053ad
    3da0:	00005733 	.word	0x00005733

00003da4 <adc_async_init>:
{
    3da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3da8:	4689      	mov	r9, r1
    3daa:	4616      	mov	r6, r2
    3dac:	461c      	mov	r4, r3
    3dae:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    3db2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    3db4:	4607      	mov	r7, r0
    3db6:	b140      	cbz	r0, 3dca <adc_async_init+0x26>
    3db8:	b149      	cbz	r1, 3dce <adc_async_init+0x2a>
    3dba:	b152      	cbz	r2, 3dd2 <adc_async_init+0x2e>
    3dbc:	f1b8 0f00 	cmp.w	r8, #0
    3dc0:	d009      	beq.n	3dd6 <adc_async_init+0x32>
    3dc2:	1c28      	adds	r0, r5, #0
    3dc4:	bf18      	it	ne
    3dc6:	2001      	movne	r0, #1
    3dc8:	e006      	b.n	3dd8 <adc_async_init+0x34>
    3dca:	2000      	movs	r0, #0
    3dcc:	e004      	b.n	3dd8 <adc_async_init+0x34>
    3dce:	2000      	movs	r0, #0
    3dd0:	e002      	b.n	3dd8 <adc_async_init+0x34>
    3dd2:	2000      	movs	r0, #0
    3dd4:	e000      	b.n	3dd8 <adc_async_init+0x34>
    3dd6:	2000      	movs	r0, #0
    3dd8:	f8df b064 	ldr.w	fp, [pc, #100]	; 3e40 <adc_async_init+0x9c>
    3ddc:	223f      	movs	r2, #63	; 0x3f
    3dde:	4659      	mov	r1, fp
    3de0:	f8df a060 	ldr.w	sl, [pc, #96]	; 3e44 <adc_async_init+0xa0>
    3de4:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    3de6:	1c60      	adds	r0, r4, #1
    3de8:	2240      	movs	r2, #64	; 0x40
    3dea:	4659      	mov	r1, fp
    3dec:	4580      	cmp	r8, r0
    3dee:	bfcc      	ite	gt
    3df0:	2000      	movgt	r0, #0
    3df2:	2001      	movle	r0, #1
    3df4:	47d0      	blx	sl
	device = &descr->device;
    3df6:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    3df8:	21ff      	movs	r1, #255	; 0xff
    3dfa:	b2da      	uxtb	r2, r3
    3dfc:	54b1      	strb	r1, [r6, r2]
    3dfe:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    3e00:	b2da      	uxtb	r2, r3
    3e02:	42a2      	cmp	r2, r4
    3e04:	d9f9      	bls.n	3dfa <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    3e06:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    3e08:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    3e0c:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    3e10:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    3e12:	4649      	mov	r1, r9
    3e14:	4638      	mov	r0, r7
    3e16:	4b06      	ldr	r3, [pc, #24]	; (3e30 <adc_async_init+0x8c>)
    3e18:	4798      	blx	r3
	if (init_status) {
    3e1a:	4603      	mov	r3, r0
    3e1c:	b928      	cbnz	r0, 3e2a <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    3e1e:	4a05      	ldr	r2, [pc, #20]	; (3e34 <adc_async_init+0x90>)
    3e20:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    3e22:	4a05      	ldr	r2, [pc, #20]	; (3e38 <adc_async_init+0x94>)
    3e24:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    3e26:	4a05      	ldr	r2, [pc, #20]	; (3e3c <adc_async_init+0x98>)
    3e28:	607a      	str	r2, [r7, #4]
}
    3e2a:	4618      	mov	r0, r3
    3e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e30:	00005601 	.word	0x00005601
    3e34:	00003d45 	.word	0x00003d45
    3e38:	00003d31 	.word	0x00003d31
    3e3c:	00003d3b 	.word	0x00003d3b
    3e40:	0000bc98 	.word	0x0000bc98
    3e44:	00005271 	.word	0x00005271

00003e48 <adc_async_register_channel_buffer>:
{
    3e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e4c:	460e      	mov	r6, r1
    3e4e:	4617      	mov	r7, r2
    3e50:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    3e52:	4605      	mov	r5, r0
    3e54:	2800      	cmp	r0, #0
    3e56:	d040      	beq.n	3eda <adc_async_register_channel_buffer+0x92>
    3e58:	2a00      	cmp	r2, #0
    3e5a:	d040      	beq.n	3ede <adc_async_register_channel_buffer+0x96>
    3e5c:	1c18      	adds	r0, r3, #0
    3e5e:	bf18      	it	ne
    3e60:	2001      	movne	r0, #1
    3e62:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3efc <adc_async_register_channel_buffer+0xb4>
    3e66:	2266      	movs	r2, #102	; 0x66
    3e68:	4649      	mov	r1, r9
    3e6a:	4c22      	ldr	r4, [pc, #136]	; (3ef4 <adc_async_register_channel_buffer+0xac>)
    3e6c:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    3e6e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    3e72:	2267      	movs	r2, #103	; 0x67
    3e74:	4649      	mov	r1, r9
    3e76:	42b0      	cmp	r0, r6
    3e78:	bf34      	ite	cc
    3e7a:	2000      	movcc	r0, #0
    3e7c:	2001      	movcs	r0, #1
    3e7e:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    3e80:	6a29      	ldr	r1, [r5, #32]
    3e82:	5d8b      	ldrb	r3, [r1, r6]
    3e84:	2bff      	cmp	r3, #255	; 0xff
    3e86:	d12c      	bne.n	3ee2 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    3e88:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    3e8c:	2300      	movs	r3, #0
    3e8e:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    3e90:	b2da      	uxtb	r2, r3
    3e92:	5c8a      	ldrb	r2, [r1, r2]
    3e94:	2aff      	cmp	r2, #255	; 0xff
			index++;
    3e96:	bf1c      	itt	ne
    3e98:	3401      	addne	r4, #1
    3e9a:	b2e4      	uxtbne	r4, r4
    3e9c:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    3e9e:	b2da      	uxtb	r2, r3
    3ea0:	4282      	cmp	r2, r0
    3ea2:	d9f5      	bls.n	3e90 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    3ea4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    3ea8:	42a3      	cmp	r3, r4
    3eaa:	d31d      	bcc.n	3ee8 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    3eac:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    3eb0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    3eb4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    3eb6:	4448      	add	r0, r9
    3eb8:	4642      	mov	r2, r8
    3eba:	4639      	mov	r1, r7
    3ebc:	3004      	adds	r0, #4
    3ebe:	4b0e      	ldr	r3, [pc, #56]	; (3ef8 <adc_async_register_channel_buffer+0xb0>)
    3ec0:	4798      	blx	r3
    3ec2:	4602      	mov	r2, r0
    3ec4:	b998      	cbnz	r0, 3eee <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    3ec6:	6a2b      	ldr	r3, [r5, #32]
    3ec8:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    3eca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3ecc:	4499      	add	r9, r3
    3ece:	2300      	movs	r3, #0
    3ed0:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    3ed4:	4610      	mov	r0, r2
    3ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    3eda:	2000      	movs	r0, #0
    3edc:	e7c1      	b.n	3e62 <adc_async_register_channel_buffer+0x1a>
    3ede:	2000      	movs	r0, #0
    3ee0:	e7bf      	b.n	3e62 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    3ee2:	f06f 020c 	mvn.w	r2, #12
    3ee6:	e7f5      	b.n	3ed4 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    3ee8:	f06f 021b 	mvn.w	r2, #27
    3eec:	e7f2      	b.n	3ed4 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    3eee:	f06f 020c 	mvn.w	r2, #12
    3ef2:	e7ef      	b.n	3ed4 <adc_async_register_channel_buffer+0x8c>
    3ef4:	00005271 	.word	0x00005271
    3ef8:	00005319 	.word	0x00005319
    3efc:	0000bc98 	.word	0x0000bc98

00003f00 <adc_async_enable_channel>:
{
    3f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f02:	460d      	mov	r5, r1
	ASSERT(descr);
    3f04:	4f0b      	ldr	r7, [pc, #44]	; (3f34 <adc_async_enable_channel+0x34>)
    3f06:	4604      	mov	r4, r0
    3f08:	2283      	movs	r2, #131	; 0x83
    3f0a:	4639      	mov	r1, r7
    3f0c:	3000      	adds	r0, #0
    3f0e:	bf18      	it	ne
    3f10:	2001      	movne	r0, #1
    3f12:	4e09      	ldr	r6, [pc, #36]	; (3f38 <adc_async_enable_channel+0x38>)
    3f14:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    3f16:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    3f1a:	2284      	movs	r2, #132	; 0x84
    3f1c:	4639      	mov	r1, r7
    3f1e:	42a8      	cmp	r0, r5
    3f20:	bf34      	ite	cc
    3f22:	2000      	movcc	r0, #0
    3f24:	2001      	movcs	r0, #1
    3f26:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    3f28:	4629      	mov	r1, r5
    3f2a:	4620      	mov	r0, r4
    3f2c:	4b03      	ldr	r3, [pc, #12]	; (3f3c <adc_async_enable_channel+0x3c>)
    3f2e:	4798      	blx	r3
}
    3f30:	2000      	movs	r0, #0
    3f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f34:	0000bc98 	.word	0x0000bc98
    3f38:	00005271 	.word	0x00005271
    3f3c:	0000571d 	.word	0x0000571d

00003f40 <adc_async_register_callback>:
{
    3f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3f44:	460e      	mov	r6, r1
    3f46:	4614      	mov	r4, r2
    3f48:	4699      	mov	r9, r3
	ASSERT(descr);
    3f4a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 3fbc <adc_async_register_callback+0x7c>
    3f4e:	4605      	mov	r5, r0
    3f50:	229c      	movs	r2, #156	; 0x9c
    3f52:	4641      	mov	r1, r8
    3f54:	3000      	adds	r0, #0
    3f56:	bf18      	it	ne
    3f58:	2001      	movne	r0, #1
    3f5a:	4f16      	ldr	r7, [pc, #88]	; (3fb4 <adc_async_register_callback+0x74>)
    3f5c:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    3f5e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    3f62:	229d      	movs	r2, #157	; 0x9d
    3f64:	4641      	mov	r1, r8
    3f66:	42b0      	cmp	r0, r6
    3f68:	bf34      	ite	cc
    3f6a:	2000      	movcc	r0, #0
    3f6c:	2001      	movcs	r0, #1
    3f6e:	47b8      	blx	r7
	switch (type) {
    3f70:	2c01      	cmp	r4, #1
    3f72:	d019      	beq.n	3fa8 <adc_async_register_callback+0x68>
    3f74:	b12c      	cbz	r4, 3f82 <adc_async_register_callback+0x42>
    3f76:	2c02      	cmp	r4, #2
    3f78:	d019      	beq.n	3fae <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    3f7a:	f06f 000c 	mvn.w	r0, #12
}
    3f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    3f82:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    3f84:	5d9b      	ldrb	r3, [r3, r6]
    3f86:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3f88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f8c:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    3f90:	f119 0300 	adds.w	r3, r9, #0
    3f94:	bf18      	it	ne
    3f96:	2301      	movne	r3, #1
    3f98:	4622      	mov	r2, r4
    3f9a:	4631      	mov	r1, r6
    3f9c:	4628      	mov	r0, r5
    3f9e:	4c06      	ldr	r4, [pc, #24]	; (3fb8 <adc_async_register_callback+0x78>)
    3fa0:	47a0      	blx	r4
	return ERR_NONE;
    3fa2:	2000      	movs	r0, #0
    3fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    3fa8:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    3fac:	e7f0      	b.n	3f90 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    3fae:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    3fb2:	e7ed      	b.n	3f90 <adc_async_register_callback+0x50>
    3fb4:	00005271 	.word	0x00005271
    3fb8:	0000575b 	.word	0x0000575b
    3fbc:	0000bc98 	.word	0x0000bc98

00003fc0 <adc_async_read_channel>:
{
    3fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fc4:	b083      	sub	sp, #12
    3fc6:	4688      	mov	r8, r1
    3fc8:	4691      	mov	r9, r2
    3fca:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    3fcc:	4604      	mov	r4, r0
    3fce:	2800      	cmp	r0, #0
    3fd0:	d04f      	beq.n	4072 <adc_async_read_channel+0xb2>
    3fd2:	2a00      	cmp	r2, #0
    3fd4:	d04f      	beq.n	4076 <adc_async_read_channel+0xb6>
    3fd6:	1c18      	adds	r0, r3, #0
    3fd8:	bf18      	it	ne
    3fda:	2001      	movne	r0, #1
    3fdc:	4f29      	ldr	r7, [pc, #164]	; (4084 <adc_async_read_channel+0xc4>)
    3fde:	22bc      	movs	r2, #188	; 0xbc
    3fe0:	4639      	mov	r1, r7
    3fe2:	4e29      	ldr	r6, [pc, #164]	; (4088 <adc_async_read_channel+0xc8>)
    3fe4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    3fe6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    3fea:	22bd      	movs	r2, #189	; 0xbd
    3fec:	4639      	mov	r1, r7
    3fee:	4540      	cmp	r0, r8
    3ff0:	bf34      	ite	cc
    3ff2:	2000      	movcc	r0, #0
    3ff4:	2001      	movcs	r0, #1
    3ff6:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    3ff8:	4620      	mov	r0, r4
    3ffa:	4b24      	ldr	r3, [pc, #144]	; (408c <adc_async_read_channel+0xcc>)
    3ffc:	4798      	blx	r3
	ASSERT(!(length % data_size));
    3ffe:	fb95 f3f0 	sdiv	r3, r5, r0
    4002:	fb03 5010 	mls	r0, r3, r0, r5
    4006:	22bf      	movs	r2, #191	; 0xbf
    4008:	4639      	mov	r1, r7
    400a:	fab0 f080 	clz	r0, r0
    400e:	0940      	lsrs	r0, r0, #5
    4010:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    4012:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4014:	f813 b008 	ldrb.w	fp, [r3, r8]
    4018:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    401c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    401e:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    4022:	a801      	add	r0, sp, #4
    4024:	4b1a      	ldr	r3, [pc, #104]	; (4090 <adc_async_read_channel+0xd0>)
    4026:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    4028:	f10b 0a04 	add.w	sl, fp, #4
    402c:	4650      	mov	r0, sl
    402e:	4b19      	ldr	r3, [pc, #100]	; (4094 <adc_async_read_channel+0xd4>)
    4030:	4798      	blx	r3
    4032:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    4034:	a801      	add	r0, sp, #4
    4036:	4b18      	ldr	r3, [pc, #96]	; (4098 <adc_async_read_channel+0xd8>)
    4038:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    403a:	f1b8 0f00 	cmp.w	r8, #0
    403e:	d01c      	beq.n	407a <adc_async_read_channel+0xba>
    4040:	b1ed      	cbz	r5, 407e <adc_async_read_channel+0xbe>
    4042:	3d01      	subs	r5, #1
    4044:	b2ad      	uxth	r5, r5
    4046:	3502      	adds	r5, #2
    4048:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    404a:	4f14      	ldr	r7, [pc, #80]	; (409c <adc_async_read_channel+0xdc>)
    404c:	b2a6      	uxth	r6, r4
    404e:	1e61      	subs	r1, r4, #1
    4050:	4449      	add	r1, r9
    4052:	4650      	mov	r0, sl
    4054:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    4056:	4544      	cmp	r4, r8
    4058:	d002      	beq.n	4060 <adc_async_read_channel+0xa0>
    405a:	3401      	adds	r4, #1
    405c:	42ac      	cmp	r4, r5
    405e:	d1f5      	bne.n	404c <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    4060:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4064:	1b9b      	subs	r3, r3, r6
    4066:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    406a:	4630      	mov	r0, r6
    406c:	b003      	add	sp, #12
    406e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    4072:	2000      	movs	r0, #0
    4074:	e7b2      	b.n	3fdc <adc_async_read_channel+0x1c>
    4076:	2000      	movs	r0, #0
    4078:	e7b0      	b.n	3fdc <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    407a:	2600      	movs	r6, #0
    407c:	e7f0      	b.n	4060 <adc_async_read_channel+0xa0>
    407e:	2600      	movs	r6, #0
    4080:	e7ee      	b.n	4060 <adc_async_read_channel+0xa0>
    4082:	bf00      	nop
    4084:	0000bc98 	.word	0x0000bc98
    4088:	00005271 	.word	0x00005271
    408c:	00005733 	.word	0x00005733
    4090:	000040c9 	.word	0x000040c9
    4094:	000053ed 	.word	0x000053ed
    4098:	000040d7 	.word	0x000040d7
    409c:	00005369 	.word	0x00005369

000040a0 <adc_async_start_conversion>:
{
    40a0:	b510      	push	{r4, lr}
	ASSERT(descr);
    40a2:	4604      	mov	r4, r0
    40a4:	22d6      	movs	r2, #214	; 0xd6
    40a6:	4905      	ldr	r1, [pc, #20]	; (40bc <adc_async_start_conversion+0x1c>)
    40a8:	3000      	adds	r0, #0
    40aa:	bf18      	it	ne
    40ac:	2001      	movne	r0, #1
    40ae:	4b04      	ldr	r3, [pc, #16]	; (40c0 <adc_async_start_conversion+0x20>)
    40b0:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    40b2:	4620      	mov	r0, r4
    40b4:	4b03      	ldr	r3, [pc, #12]	; (40c4 <adc_async_start_conversion+0x24>)
    40b6:	4798      	blx	r3
}
    40b8:	2000      	movs	r0, #0
    40ba:	bd10      	pop	{r4, pc}
    40bc:	0000bc98 	.word	0x0000bc98
    40c0:	00005271 	.word	0x00005271
    40c4:	00005745 	.word	0x00005745

000040c8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    40c8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    40cc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    40ce:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    40d0:	f3bf 8f5f 	dmb	sy
    40d4:	4770      	bx	lr

000040d6 <atomic_leave_critical>:
    40d6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    40da:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    40dc:	f383 8810 	msr	PRIMASK, r3
    40e0:	4770      	bx	lr
	...

000040e4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    40e4:	b538      	push	{r3, r4, r5, lr}
    40e6:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    40e8:	4605      	mov	r5, r0
    40ea:	b158      	cbz	r0, 4104 <crc_sync_init+0x20>
    40ec:	1c08      	adds	r0, r1, #0
    40ee:	bf18      	it	ne
    40f0:	2001      	movne	r0, #1
    40f2:	222b      	movs	r2, #43	; 0x2b
    40f4:	4904      	ldr	r1, [pc, #16]	; (4108 <crc_sync_init+0x24>)
    40f6:	4b05      	ldr	r3, [pc, #20]	; (410c <crc_sync_init+0x28>)
    40f8:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    40fa:	4621      	mov	r1, r4
    40fc:	4628      	mov	r0, r5
    40fe:	4b04      	ldr	r3, [pc, #16]	; (4110 <crc_sync_init+0x2c>)
    4100:	4798      	blx	r3
}
    4102:	bd38      	pop	{r3, r4, r5, pc}
    4104:	2000      	movs	r0, #0
    4106:	e7f4      	b.n	40f2 <crc_sync_init+0xe>
    4108:	0000bcb4 	.word	0x0000bcb4
    410c:	00005271 	.word	0x00005271
    4110:	00005b45 	.word	0x00005b45

00004114 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    4114:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    4116:	4b02      	ldr	r3, [pc, #8]	; (4120 <delay_init+0xc>)
    4118:	6018      	str	r0, [r3, #0]
    411a:	4b02      	ldr	r3, [pc, #8]	; (4124 <delay_init+0x10>)
    411c:	4798      	blx	r3
    411e:	bd08      	pop	{r3, pc}
    4120:	20000658 	.word	0x20000658
    4124:	00007381 	.word	0x00007381

00004128 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4128:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    412a:	4b04      	ldr	r3, [pc, #16]	; (413c <delay_us+0x14>)
    412c:	681c      	ldr	r4, [r3, #0]
    412e:	4b04      	ldr	r3, [pc, #16]	; (4140 <delay_us+0x18>)
    4130:	4798      	blx	r3
    4132:	4601      	mov	r1, r0
    4134:	4620      	mov	r0, r4
    4136:	4b03      	ldr	r3, [pc, #12]	; (4144 <delay_us+0x1c>)
    4138:	4798      	blx	r3
    413a:	bd10      	pop	{r4, pc}
    413c:	20000658 	.word	0x20000658
    4140:	00005809 	.word	0x00005809
    4144:	00007395 	.word	0x00007395

00004148 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4148:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    414a:	4b04      	ldr	r3, [pc, #16]	; (415c <delay_ms+0x14>)
    414c:	681c      	ldr	r4, [r3, #0]
    414e:	4b04      	ldr	r3, [pc, #16]	; (4160 <delay_ms+0x18>)
    4150:	4798      	blx	r3
    4152:	4601      	mov	r1, r0
    4154:	4620      	mov	r0, r4
    4156:	4b03      	ldr	r3, [pc, #12]	; (4164 <delay_ms+0x1c>)
    4158:	4798      	blx	r3
    415a:	bd10      	pop	{r4, pc}
    415c:	20000658 	.word	0x20000658
    4160:	00005811 	.word	0x00005811
    4164:	00007395 	.word	0x00007395

00004168 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4168:	b508      	push	{r3, lr}
	return _event_system_init();
    416a:	4b01      	ldr	r3, [pc, #4]	; (4170 <event_system_init+0x8>)
    416c:	4798      	blx	r3
}
    416e:	bd08      	pop	{r3, pc}
    4170:	00005b4d 	.word	0x00005b4d

00004174 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4174:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    4176:	6943      	ldr	r3, [r0, #20]
    4178:	b103      	cbz	r3, 417c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    417a:	4798      	blx	r3
    417c:	bd08      	pop	{r3, pc}

0000417e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    417e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    4180:	6983      	ldr	r3, [r0, #24]
    4182:	b103      	cbz	r3, 4186 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4184:	4798      	blx	r3
    4186:	bd08      	pop	{r3, pc}

00004188 <flash_init>:
{
    4188:	b538      	push	{r3, r4, r5, lr}
    418a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    418c:	4604      	mov	r4, r0
    418e:	b190      	cbz	r0, 41b6 <flash_init+0x2e>
    4190:	1c08      	adds	r0, r1, #0
    4192:	bf18      	it	ne
    4194:	2001      	movne	r0, #1
    4196:	2238      	movs	r2, #56	; 0x38
    4198:	4908      	ldr	r1, [pc, #32]	; (41bc <flash_init+0x34>)
    419a:	4b09      	ldr	r3, [pc, #36]	; (41c0 <flash_init+0x38>)
    419c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    419e:	4629      	mov	r1, r5
    41a0:	4620      	mov	r0, r4
    41a2:	4b08      	ldr	r3, [pc, #32]	; (41c4 <flash_init+0x3c>)
    41a4:	4798      	blx	r3
	if (rc) {
    41a6:	4603      	mov	r3, r0
    41a8:	b918      	cbnz	r0, 41b2 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    41aa:	4a07      	ldr	r2, [pc, #28]	; (41c8 <flash_init+0x40>)
    41ac:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    41ae:	4a07      	ldr	r2, [pc, #28]	; (41cc <flash_init+0x44>)
    41b0:	6062      	str	r2, [r4, #4]
}
    41b2:	4618      	mov	r0, r3
    41b4:	bd38      	pop	{r3, r4, r5, pc}
    41b6:	2000      	movs	r0, #0
    41b8:	e7ed      	b.n	4196 <flash_init+0xe>
    41ba:	bf00      	nop
    41bc:	0000bcd0 	.word	0x0000bcd0
    41c0:	00005271 	.word	0x00005271
    41c4:	00005c59 	.word	0x00005c59
    41c8:	00004175 	.word	0x00004175
    41cc:	0000417f 	.word	0x0000417f

000041d0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    41d0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    41d2:	8843      	ldrh	r3, [r0, #2]
    41d4:	f413 7f80 	tst.w	r3, #256	; 0x100
    41d8:	d102      	bne.n	41e0 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    41da:	6b43      	ldr	r3, [r0, #52]	; 0x34
    41dc:	b103      	cbz	r3, 41e0 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    41de:	4798      	blx	r3
    41e0:	bd08      	pop	{r3, pc}

000041e2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    41e2:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    41e4:	8843      	ldrh	r3, [r0, #2]
    41e6:	f413 7f80 	tst.w	r3, #256	; 0x100
    41ea:	d102      	bne.n	41f2 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    41ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
    41ee:	b103      	cbz	r3, 41f2 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    41f0:	4798      	blx	r3
    41f2:	bd08      	pop	{r3, pc}

000041f4 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    41f4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    41f6:	8843      	ldrh	r3, [r0, #2]
    41f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    41fc:	d102      	bne.n	4204 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    41fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4200:	b103      	cbz	r3, 4204 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    4202:	4798      	blx	r3
    4204:	bd08      	pop	{r3, pc}
	...

00004208 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4208:	b510      	push	{r4, lr}
    420a:	b084      	sub	sp, #16
    420c:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    420e:	8a83      	ldrh	r3, [r0, #20]
    4210:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4214:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    4216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    421a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    421e:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4220:	a901      	add	r1, sp, #4
    4222:	3828      	subs	r0, #40	; 0x28
    4224:	4b03      	ldr	r3, [pc, #12]	; (4234 <i2c_m_async_write+0x2c>)
    4226:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    4228:	2800      	cmp	r0, #0
    422a:	bf08      	it	eq
    422c:	4620      	moveq	r0, r4
    422e:	b004      	add	sp, #16
    4230:	bd10      	pop	{r4, pc}
    4232:	bf00      	nop
    4234:	000068bd 	.word	0x000068bd

00004238 <i2c_m_async_read>:
{
    4238:	b510      	push	{r4, lr}
    423a:	b084      	sub	sp, #16
    423c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    423e:	8a83      	ldrh	r3, [r0, #20]
    4240:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4244:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4246:	f248 0301 	movw	r3, #32769	; 0x8001
    424a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    424e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4250:	a901      	add	r1, sp, #4
    4252:	3828      	subs	r0, #40	; 0x28
    4254:	4b03      	ldr	r3, [pc, #12]	; (4264 <i2c_m_async_read+0x2c>)
    4256:	4798      	blx	r3
}
    4258:	2800      	cmp	r0, #0
    425a:	bf08      	it	eq
    425c:	4620      	moveq	r0, r4
    425e:	b004      	add	sp, #16
    4260:	bd10      	pop	{r4, pc}
    4262:	bf00      	nop
    4264:	000068bd 	.word	0x000068bd

00004268 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4268:	b570      	push	{r4, r5, r6, lr}
    426a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    426c:	4604      	mov	r4, r0
    426e:	2289      	movs	r2, #137	; 0x89
    4270:	490f      	ldr	r1, [pc, #60]	; (42b0 <i2c_m_async_init+0x48>)
    4272:	3000      	adds	r0, #0
    4274:	bf18      	it	ne
    4276:	2001      	movne	r0, #1
    4278:	4b0e      	ldr	r3, [pc, #56]	; (42b4 <i2c_m_async_init+0x4c>)
    427a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    427c:	4629      	mov	r1, r5
    427e:	4620      	mov	r0, r4
    4280:	4b0d      	ldr	r3, [pc, #52]	; (42b8 <i2c_m_async_init+0x50>)
    4282:	4798      	blx	r3
	if (init_status) {
    4284:	4605      	mov	r5, r0
    4286:	b108      	cbz	r0, 428c <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4288:	4628      	mov	r0, r5
    428a:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    428c:	4b0b      	ldr	r3, [pc, #44]	; (42bc <i2c_m_async_init+0x54>)
    428e:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4290:	4b0b      	ldr	r3, [pc, #44]	; (42c0 <i2c_m_async_init+0x58>)
    4292:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4294:	4a0b      	ldr	r2, [pc, #44]	; (42c4 <i2c_m_async_init+0x5c>)
    4296:	2101      	movs	r1, #1
    4298:	4620      	mov	r0, r4
    429a:	4e0b      	ldr	r6, [pc, #44]	; (42c8 <i2c_m_async_init+0x60>)
    429c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    429e:	4a0b      	ldr	r2, [pc, #44]	; (42cc <i2c_m_async_init+0x64>)
    42a0:	2102      	movs	r1, #2
    42a2:	4620      	mov	r0, r4
    42a4:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    42a6:	4a0a      	ldr	r2, [pc, #40]	; (42d0 <i2c_m_async_init+0x68>)
    42a8:	2100      	movs	r1, #0
    42aa:	4620      	mov	r0, r4
    42ac:	47b0      	blx	r6
	return ERR_NONE;
    42ae:	e7eb      	b.n	4288 <i2c_m_async_init+0x20>
    42b0:	0000bce8 	.word	0x0000bce8
    42b4:	00005271 	.word	0x00005271
    42b8:	0000683d 	.word	0x0000683d
    42bc:	00004239 	.word	0x00004239
    42c0:	00004209 	.word	0x00004209
    42c4:	000041d1 	.word	0x000041d1
    42c8:	000069ed 	.word	0x000069ed
    42cc:	000041e3 	.word	0x000041e3
    42d0:	000041f5 	.word	0x000041f5

000042d4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    42d4:	b570      	push	{r4, r5, r6, lr}
    42d6:	460d      	mov	r5, r1
    42d8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    42da:	4604      	mov	r4, r0
    42dc:	b160      	cbz	r0, 42f8 <io_write+0x24>
    42de:	1c08      	adds	r0, r1, #0
    42e0:	bf18      	it	ne
    42e2:	2001      	movne	r0, #1
    42e4:	2234      	movs	r2, #52	; 0x34
    42e6:	4905      	ldr	r1, [pc, #20]	; (42fc <io_write+0x28>)
    42e8:	4b05      	ldr	r3, [pc, #20]	; (4300 <io_write+0x2c>)
    42ea:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    42ec:	6823      	ldr	r3, [r4, #0]
    42ee:	4632      	mov	r2, r6
    42f0:	4629      	mov	r1, r5
    42f2:	4620      	mov	r0, r4
    42f4:	4798      	blx	r3
}
    42f6:	bd70      	pop	{r4, r5, r6, pc}
    42f8:	2000      	movs	r0, #0
    42fa:	e7f3      	b.n	42e4 <io_write+0x10>
    42fc:	0000bd08 	.word	0x0000bd08
    4300:	00005271 	.word	0x00005271

00004304 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4306:	460f      	mov	r7, r1
    4308:	4616      	mov	r6, r2
	ASSERT(io);
    430a:	4604      	mov	r4, r0
    430c:	f240 1227 	movw	r2, #295	; 0x127
    4310:	4909      	ldr	r1, [pc, #36]	; (4338 <_spi_m_async_io_write+0x34>)
    4312:	3000      	adds	r0, #0
    4314:	bf18      	it	ne
    4316:	2001      	movne	r0, #1
    4318:	4b08      	ldr	r3, [pc, #32]	; (433c <_spi_m_async_io_write+0x38>)
    431a:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    431c:	2500      	movs	r5, #0
    431e:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    4320:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    4322:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4324:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4326:	2310      	movs	r3, #16
    4328:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    432a:	2101      	movs	r1, #1
    432c:	f1a4 0020 	sub.w	r0, r4, #32
    4330:	4b03      	ldr	r3, [pc, #12]	; (4340 <_spi_m_async_io_write+0x3c>)
    4332:	4798      	blx	r3

	return ERR_NONE;
}
    4334:	4628      	mov	r0, r5
    4336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4338:	0000bd1c 	.word	0x0000bd1c
    433c:	00005271 	.word	0x00005271
    4340:	00006e95 	.word	0x00006e95

00004344 <_spi_m_async_io_read>:
{
    4344:	b570      	push	{r4, r5, r6, lr}
    4346:	460d      	mov	r5, r1
    4348:	4616      	mov	r6, r2
	ASSERT(io);
    434a:	4604      	mov	r4, r0
    434c:	f240 1205 	movw	r2, #261	; 0x105
    4350:	490c      	ldr	r1, [pc, #48]	; (4384 <_spi_m_async_io_read+0x40>)
    4352:	3000      	adds	r0, #0
    4354:	bf18      	it	ne
    4356:	2001      	movne	r0, #1
    4358:	4b0b      	ldr	r3, [pc, #44]	; (4388 <_spi_m_async_io_read+0x44>)
    435a:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    435c:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    435e:	2500      	movs	r5, #0
    4360:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    4362:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4364:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4366:	2310      	movs	r3, #16
    4368:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    436a:	3c20      	subs	r4, #32
    436c:	2101      	movs	r1, #1
    436e:	4620      	mov	r0, r4
    4370:	4b06      	ldr	r3, [pc, #24]	; (438c <_spi_m_async_io_read+0x48>)
    4372:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4374:	f240 11ff 	movw	r1, #511	; 0x1ff
    4378:	4620      	mov	r0, r4
    437a:	4b05      	ldr	r3, [pc, #20]	; (4390 <_spi_m_async_io_read+0x4c>)
    437c:	4798      	blx	r3
}
    437e:	4628      	mov	r0, r5
    4380:	bd70      	pop	{r4, r5, r6, pc}
    4382:	bf00      	nop
    4384:	0000bd1c 	.word	0x0000bd1c
    4388:	00005271 	.word	0x00005271
    438c:	00006ec9 	.word	0x00006ec9
    4390:	00006f45 	.word	0x00006f45

00004394 <_spi_dev_error>:
{
    4394:	b570      	push	{r4, r5, r6, lr}
    4396:	4604      	mov	r4, r0
    4398:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    439a:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    439c:	2100      	movs	r1, #0
    439e:	4b09      	ldr	r3, [pc, #36]	; (43c4 <_spi_dev_error+0x30>)
    43a0:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    43a2:	2100      	movs	r1, #0
    43a4:	4620      	mov	r0, r4
    43a6:	4b08      	ldr	r3, [pc, #32]	; (43c8 <_spi_dev_error+0x34>)
    43a8:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    43aa:	2100      	movs	r1, #0
    43ac:	4620      	mov	r0, r4
    43ae:	4b07      	ldr	r3, [pc, #28]	; (43cc <_spi_dev_error+0x38>)
    43b0:	4798      	blx	r3
	spi->stat = 0;
    43b2:	2300      	movs	r3, #0
    43b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    43b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    43ba:	b113      	cbz	r3, 43c2 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    43bc:	4631      	mov	r1, r6
    43be:	4628      	mov	r0, r5
    43c0:	4798      	blx	r3
    43c2:	bd70      	pop	{r4, r5, r6, pc}
    43c4:	00006e95 	.word	0x00006e95
    43c8:	00006ec9 	.word	0x00006ec9
    43cc:	00006f09 	.word	0x00006f09

000043d0 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    43d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    43d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    43d4:	429a      	cmp	r2, r3
    43d6:	d200      	bcs.n	43da <_spi_dev_complete+0xa>
    43d8:	4770      	bx	lr
{
    43da:	b510      	push	{r4, lr}
    43dc:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    43de:	2100      	movs	r1, #0
    43e0:	4b04      	ldr	r3, [pc, #16]	; (43f4 <_spi_dev_complete+0x24>)
    43e2:	4798      	blx	r3
		spi->stat = 0;
    43e4:	2300      	movs	r3, #0
    43e6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    43ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    43ec:	b10b      	cbz	r3, 43f2 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    43ee:	1f20      	subs	r0, r4, #4
    43f0:	4798      	blx	r3
    43f2:	bd10      	pop	{r4, pc}
    43f4:	00006f09 	.word	0x00006f09

000043f8 <_spi_dev_tx>:
{
    43f8:	b510      	push	{r4, lr}
    43fa:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    43fc:	7903      	ldrb	r3, [r0, #4]
    43fe:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4400:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4402:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4404:	f103 0101 	add.w	r1, r3, #1
    4408:	6401      	str	r1, [r0, #64]	; 0x40
    440a:	bf94      	ite	ls
    440c:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    440e:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4412:	4b08      	ldr	r3, [pc, #32]	; (4434 <_spi_dev_tx+0x3c>)
    4414:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    4416:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4418:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    441a:	429a      	cmp	r2, r3
    441c:	d000      	beq.n	4420 <_spi_dev_tx+0x28>
    441e:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    4420:	2100      	movs	r1, #0
    4422:	4620      	mov	r0, r4
    4424:	4b04      	ldr	r3, [pc, #16]	; (4438 <_spi_dev_tx+0x40>)
    4426:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4428:	2101      	movs	r1, #1
    442a:	4620      	mov	r0, r4
    442c:	4b03      	ldr	r3, [pc, #12]	; (443c <_spi_dev_tx+0x44>)
    442e:	4798      	blx	r3
}
    4430:	e7f5      	b.n	441e <_spi_dev_tx+0x26>
    4432:	bf00      	nop
    4434:	00006f45 	.word	0x00006f45
    4438:	00006e95 	.word	0x00006e95
    443c:	00006f09 	.word	0x00006f09

00004440 <_spi_dev_rx>:
{
    4440:	b570      	push	{r4, r5, r6, lr}
    4442:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    4444:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4446:	b305      	cbz	r5, 448a <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    4448:	7903      	ldrb	r3, [r0, #4]
    444a:	2b01      	cmp	r3, #1
    444c:	d916      	bls.n	447c <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    444e:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4450:	1c73      	adds	r3, r6, #1
    4452:	6403      	str	r3, [r0, #64]	; 0x40
    4454:	4b18      	ldr	r3, [pc, #96]	; (44b8 <_spi_dev_rx+0x78>)
    4456:	4798      	blx	r3
    4458:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    445c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    445e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4460:	4293      	cmp	r3, r2
    4462:	d21d      	bcs.n	44a0 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    4464:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4466:	b1b2      	cbz	r2, 4496 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    4468:	7921      	ldrb	r1, [r4, #4]
    446a:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    446c:	bf94      	ite	ls
    446e:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4470:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4474:	4620      	mov	r0, r4
    4476:	4b11      	ldr	r3, [pc, #68]	; (44bc <_spi_dev_rx+0x7c>)
    4478:	4798      	blx	r3
    447a:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    447c:	6c06      	ldr	r6, [r0, #64]	; 0x40
    447e:	1c73      	adds	r3, r6, #1
    4480:	6403      	str	r3, [r0, #64]	; 0x40
    4482:	4b0d      	ldr	r3, [pc, #52]	; (44b8 <_spi_dev_rx+0x78>)
    4484:	4798      	blx	r3
    4486:	55a8      	strb	r0, [r5, r6]
    4488:	e7e8      	b.n	445c <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    448a:	4b0b      	ldr	r3, [pc, #44]	; (44b8 <_spi_dev_rx+0x78>)
    448c:	4798      	blx	r3
		spi->xfercnt++;
    448e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4490:	3301      	adds	r3, #1
    4492:	6423      	str	r3, [r4, #64]	; 0x40
    4494:	e7e2      	b.n	445c <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4496:	88e1      	ldrh	r1, [r4, #6]
    4498:	4620      	mov	r0, r4
    449a:	4b08      	ldr	r3, [pc, #32]	; (44bc <_spi_dev_rx+0x7c>)
    449c:	4798      	blx	r3
    449e:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    44a0:	2100      	movs	r1, #0
    44a2:	4620      	mov	r0, r4
    44a4:	4b06      	ldr	r3, [pc, #24]	; (44c0 <_spi_dev_rx+0x80>)
    44a6:	4798      	blx	r3
		spi->stat = 0;
    44a8:	2300      	movs	r3, #0
    44aa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    44ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    44b0:	b10b      	cbz	r3, 44b6 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    44b2:	1f20      	subs	r0, r4, #4
    44b4:	4798      	blx	r3
    44b6:	bd70      	pop	{r4, r5, r6, pc}
    44b8:	00006f75 	.word	0x00006f75
    44bc:	00006f45 	.word	0x00006f45
    44c0:	00006ec9 	.word	0x00006ec9

000044c4 <spi_m_async_init>:
{
    44c4:	b570      	push	{r4, r5, r6, lr}
    44c6:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    44c8:	4606      	mov	r6, r0
    44ca:	b330      	cbz	r0, 451a <spi_m_async_init+0x56>
    44cc:	1c08      	adds	r0, r1, #0
    44ce:	bf18      	it	ne
    44d0:	2001      	movne	r0, #1
    44d2:	22a5      	movs	r2, #165	; 0xa5
    44d4:	4912      	ldr	r1, [pc, #72]	; (4520 <spi_m_async_init+0x5c>)
    44d6:	4b13      	ldr	r3, [pc, #76]	; (4524 <spi_m_async_init+0x60>)
    44d8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    44da:	4634      	mov	r4, r6
    44dc:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    44e0:	4629      	mov	r1, r5
    44e2:	4620      	mov	r0, r4
    44e4:	4b10      	ldr	r3, [pc, #64]	; (4528 <spi_m_async_init+0x64>)
    44e6:	4798      	blx	r3
	if (rc >= 0) {
    44e8:	2800      	cmp	r0, #0
    44ea:	db15      	blt.n	4518 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    44ec:	4a0f      	ldr	r2, [pc, #60]	; (452c <spi_m_async_init+0x68>)
    44ee:	2100      	movs	r1, #0
    44f0:	4620      	mov	r0, r4
    44f2:	4d0f      	ldr	r5, [pc, #60]	; (4530 <spi_m_async_init+0x6c>)
    44f4:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    44f6:	4a0f      	ldr	r2, [pc, #60]	; (4534 <spi_m_async_init+0x70>)
    44f8:	2101      	movs	r1, #1
    44fa:	4620      	mov	r0, r4
    44fc:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    44fe:	4a0e      	ldr	r2, [pc, #56]	; (4538 <spi_m_async_init+0x74>)
    4500:	2102      	movs	r1, #2
    4502:	4620      	mov	r0, r4
    4504:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    4506:	4a0d      	ldr	r2, [pc, #52]	; (453c <spi_m_async_init+0x78>)
    4508:	2103      	movs	r1, #3
    450a:	4620      	mov	r0, r4
    450c:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    450e:	4b0c      	ldr	r3, [pc, #48]	; (4540 <spi_m_async_init+0x7c>)
    4510:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4512:	4b0c      	ldr	r3, [pc, #48]	; (4544 <spi_m_async_init+0x80>)
    4514:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    4516:	2000      	movs	r0, #0
}
    4518:	bd70      	pop	{r4, r5, r6, pc}
    451a:	2000      	movs	r0, #0
    451c:	e7d9      	b.n	44d2 <spi_m_async_init+0xe>
    451e:	bf00      	nop
    4520:	0000bd1c 	.word	0x0000bd1c
    4524:	00005271 	.word	0x00005271
    4528:	00006dc9 	.word	0x00006dc9
    452c:	000043f9 	.word	0x000043f9
    4530:	00006fa1 	.word	0x00006fa1
    4534:	00004441 	.word	0x00004441
    4538:	000043d1 	.word	0x000043d1
    453c:	00004395 	.word	0x00004395
    4540:	00004345 	.word	0x00004345
    4544:	00004305 	.word	0x00004305

00004548 <spi_m_async_enable>:
{
    4548:	b510      	push	{r4, lr}
	ASSERT(spi);
    454a:	4604      	mov	r4, r0
    454c:	22c1      	movs	r2, #193	; 0xc1
    454e:	4905      	ldr	r1, [pc, #20]	; (4564 <spi_m_async_enable+0x1c>)
    4550:	3000      	adds	r0, #0
    4552:	bf18      	it	ne
    4554:	2001      	movne	r0, #1
    4556:	4b04      	ldr	r3, [pc, #16]	; (4568 <spi_m_async_enable+0x20>)
    4558:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    455a:	1d20      	adds	r0, r4, #4
    455c:	4b03      	ldr	r3, [pc, #12]	; (456c <spi_m_async_enable+0x24>)
    455e:	4798      	blx	r3
    4560:	bd10      	pop	{r4, pc}
    4562:	bf00      	nop
    4564:	0000bd1c 	.word	0x0000bd1c
    4568:	00005271 	.word	0x00005271
    456c:	00006e31 	.word	0x00006e31

00004570 <spi_m_async_set_mode>:
{
    4570:	b538      	push	{r3, r4, r5, lr}
    4572:	460d      	mov	r5, r1
	ASSERT(spi);
    4574:	4604      	mov	r4, r0
    4576:	22d9      	movs	r2, #217	; 0xd9
    4578:	4909      	ldr	r1, [pc, #36]	; (45a0 <spi_m_async_set_mode+0x30>)
    457a:	3000      	adds	r0, #0
    457c:	bf18      	it	ne
    457e:	2001      	movne	r0, #1
    4580:	4b08      	ldr	r3, [pc, #32]	; (45a4 <spi_m_async_set_mode+0x34>)
    4582:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4584:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4588:	f013 0f10 	tst.w	r3, #16
    458c:	d104      	bne.n	4598 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    458e:	4629      	mov	r1, r5
    4590:	1d20      	adds	r0, r4, #4
    4592:	4b05      	ldr	r3, [pc, #20]	; (45a8 <spi_m_async_set_mode+0x38>)
    4594:	4798      	blx	r3
    4596:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4598:	f06f 0003 	mvn.w	r0, #3
}
    459c:	bd38      	pop	{r3, r4, r5, pc}
    459e:	bf00      	nop
    45a0:	0000bd1c 	.word	0x0000bd1c
    45a4:	00005271 	.word	0x00005271
    45a8:	00006e61 	.word	0x00006e61

000045ac <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    45ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45ae:	460d      	mov	r5, r1
    45b0:	4617      	mov	r7, r2
    45b2:	461e      	mov	r6, r3
	ASSERT(spi);
    45b4:	4604      	mov	r4, r0
    45b6:	f44f 729c 	mov.w	r2, #312	; 0x138
    45ba:	4912      	ldr	r1, [pc, #72]	; (4604 <spi_m_async_transfer+0x58>)
    45bc:	3000      	adds	r0, #0
    45be:	bf18      	it	ne
    45c0:	2001      	movne	r0, #1
    45c2:	4b11      	ldr	r3, [pc, #68]	; (4608 <spi_m_async_transfer+0x5c>)
    45c4:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    45c6:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    45c8:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    45ca:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    45cc:	2300      	movs	r3, #0
    45ce:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    45d0:	2310      	movs	r3, #16
    45d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    45d6:	1d26      	adds	r6, r4, #4
    45d8:	2101      	movs	r1, #1
    45da:	4630      	mov	r0, r6
    45dc:	4b0b      	ldr	r3, [pc, #44]	; (460c <spi_m_async_transfer+0x60>)
    45de:	4798      	blx	r3
	if (txbuf) {
    45e0:	b15d      	cbz	r5, 45fa <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    45e2:	7a23      	ldrb	r3, [r4, #8]
    45e4:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    45e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    45e8:	bf94      	ite	ls
    45ea:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    45ec:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    45f0:	4630      	mov	r0, r6
    45f2:	4b07      	ldr	r3, [pc, #28]	; (4610 <spi_m_async_transfer+0x64>)
    45f4:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    45f6:	2000      	movs	r0, #0
    45f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    45fa:	8961      	ldrh	r1, [r4, #10]
    45fc:	4630      	mov	r0, r6
    45fe:	4b04      	ldr	r3, [pc, #16]	; (4610 <spi_m_async_transfer+0x64>)
    4600:	4798      	blx	r3
    4602:	e7f8      	b.n	45f6 <spi_m_async_transfer+0x4a>
    4604:	0000bd1c 	.word	0x0000bd1c
    4608:	00005271 	.word	0x00005271
    460c:	00006ec9 	.word	0x00006ec9
    4610:	00006f45 	.word	0x00006f45

00004614 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    4614:	b570      	push	{r4, r5, r6, lr}
    4616:	460c      	mov	r4, r1
    4618:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    461a:	4605      	mov	r5, r0
    461c:	b158      	cbz	r0, 4636 <spi_m_async_register_callback+0x22>
    461e:	2901      	cmp	r1, #1
    4620:	bf8c      	ite	hi
    4622:	2000      	movhi	r0, #0
    4624:	2001      	movls	r0, #1
    4626:	f240 1263 	movw	r2, #355	; 0x163
    462a:	4908      	ldr	r1, [pc, #32]	; (464c <spi_m_async_register_callback+0x38>)
    462c:	4b08      	ldr	r3, [pc, #32]	; (4650 <spi_m_async_register_callback+0x3c>)
    462e:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    4630:	b91c      	cbnz	r4, 463a <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    4632:	632e      	str	r6, [r5, #48]	; 0x30
    4634:	bd70      	pop	{r4, r5, r6, pc}
    4636:	2000      	movs	r0, #0
    4638:	e7f5      	b.n	4626 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    463a:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    463c:	1c32      	adds	r2, r6, #0
    463e:	bf18      	it	ne
    4640:	2201      	movne	r2, #1
    4642:	2103      	movs	r1, #3
    4644:	1d28      	adds	r0, r5, #4
    4646:	4b03      	ldr	r3, [pc, #12]	; (4654 <spi_m_async_register_callback+0x40>)
    4648:	4798      	blx	r3
    464a:	bd70      	pop	{r4, r5, r6, pc}
    464c:	0000bd1c 	.word	0x0000bd1c
    4650:	00005271 	.word	0x00005271
    4654:	00006fd5 	.word	0x00006fd5

00004658 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    4658:	b538      	push	{r3, r4, r5, lr}
    465a:	460d      	mov	r5, r1
	ASSERT(spi && io);
    465c:	4604      	mov	r4, r0
    465e:	b158      	cbz	r0, 4678 <spi_m_async_get_io_descriptor+0x20>
    4660:	1c08      	adds	r0, r1, #0
    4662:	bf18      	it	ne
    4664:	2001      	movne	r0, #1
    4666:	f240 126f 	movw	r2, #367	; 0x16f
    466a:	4904      	ldr	r1, [pc, #16]	; (467c <spi_m_async_get_io_descriptor+0x24>)
    466c:	4b04      	ldr	r3, [pc, #16]	; (4680 <spi_m_async_get_io_descriptor+0x28>)
    466e:	4798      	blx	r3
	*io = &spi->io;
    4670:	3424      	adds	r4, #36	; 0x24
    4672:	602c      	str	r4, [r5, #0]
	return 0;
}
    4674:	2000      	movs	r0, #0
    4676:	bd38      	pop	{r3, r4, r5, pc}
    4678:	2000      	movs	r0, #0
    467a:	e7f4      	b.n	4666 <spi_m_async_get_io_descriptor+0xe>
    467c:	0000bd1c 	.word	0x0000bd1c
    4680:	00005271 	.word	0x00005271

00004684 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4684:	b570      	push	{r4, r5, r6, lr}
    4686:	460d      	mov	r5, r1
    4688:	4616      	mov	r6, r2
	ASSERT(io);
    468a:	4604      	mov	r4, r0
    468c:	2298      	movs	r2, #152	; 0x98
    468e:	4907      	ldr	r1, [pc, #28]	; (46ac <_spi_m_dma_io_write+0x28>)
    4690:	3000      	adds	r0, #0
    4692:	bf18      	it	ne
    4694:	2001      	movne	r0, #1
    4696:	4b06      	ldr	r3, [pc, #24]	; (46b0 <_spi_m_dma_io_write+0x2c>)
    4698:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    469a:	4633      	mov	r3, r6
    469c:	2200      	movs	r2, #0
    469e:	4629      	mov	r1, r5
    46a0:	f1a4 001c 	sub.w	r0, r4, #28
    46a4:	4c03      	ldr	r4, [pc, #12]	; (46b4 <_spi_m_dma_io_write+0x30>)
    46a6:	47a0      	blx	r4
}
    46a8:	bd70      	pop	{r4, r5, r6, pc}
    46aa:	bf00      	nop
    46ac:	0000bd3c 	.word	0x0000bd3c
    46b0:	00005271 	.word	0x00005271
    46b4:	00007229 	.word	0x00007229

000046b8 <_spi_m_dma_io_read>:
{
    46b8:	b570      	push	{r4, r5, r6, lr}
    46ba:	460d      	mov	r5, r1
    46bc:	4616      	mov	r6, r2
	ASSERT(io);
    46be:	4604      	mov	r4, r0
    46c0:	2281      	movs	r2, #129	; 0x81
    46c2:	4907      	ldr	r1, [pc, #28]	; (46e0 <_spi_m_dma_io_read+0x28>)
    46c4:	3000      	adds	r0, #0
    46c6:	bf18      	it	ne
    46c8:	2001      	movne	r0, #1
    46ca:	4b06      	ldr	r3, [pc, #24]	; (46e4 <_spi_m_dma_io_read+0x2c>)
    46cc:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    46ce:	4633      	mov	r3, r6
    46d0:	462a      	mov	r2, r5
    46d2:	2100      	movs	r1, #0
    46d4:	f1a4 001c 	sub.w	r0, r4, #28
    46d8:	4c03      	ldr	r4, [pc, #12]	; (46e8 <_spi_m_dma_io_read+0x30>)
    46da:	47a0      	blx	r4
}
    46dc:	bd70      	pop	{r4, r5, r6, pc}
    46de:	bf00      	nop
    46e0:	0000bd3c 	.word	0x0000bd3c
    46e4:	00005271 	.word	0x00005271
    46e8:	00007229 	.word	0x00007229

000046ec <spi_m_dma_init>:
{
    46ec:	b538      	push	{r3, r4, r5, lr}
    46ee:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    46f0:	4605      	mov	r5, r0
    46f2:	b1a0      	cbz	r0, 471e <spi_m_dma_init+0x32>
    46f4:	1c08      	adds	r0, r1, #0
    46f6:	bf18      	it	ne
    46f8:	2001      	movne	r0, #1
    46fa:	223b      	movs	r2, #59	; 0x3b
    46fc:	4909      	ldr	r1, [pc, #36]	; (4724 <spi_m_dma_init+0x38>)
    46fe:	4b0a      	ldr	r3, [pc, #40]	; (4728 <spi_m_dma_init+0x3c>)
    4700:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4702:	4628      	mov	r0, r5
    4704:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    4708:	4621      	mov	r1, r4
    470a:	4b08      	ldr	r3, [pc, #32]	; (472c <spi_m_dma_init+0x40>)
    470c:	4798      	blx	r3
	if (rc) {
    470e:	4603      	mov	r3, r0
    4710:	b918      	cbnz	r0, 471a <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    4712:	4a07      	ldr	r2, [pc, #28]	; (4730 <spi_m_dma_init+0x44>)
    4714:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    4716:	4a07      	ldr	r2, [pc, #28]	; (4734 <spi_m_dma_init+0x48>)
    4718:	622a      	str	r2, [r5, #32]
}
    471a:	4618      	mov	r0, r3
    471c:	bd38      	pop	{r3, r4, r5, pc}
    471e:	2000      	movs	r0, #0
    4720:	e7eb      	b.n	46fa <spi_m_dma_init+0xe>
    4722:	bf00      	nop
    4724:	0000bd3c 	.word	0x0000bd3c
    4728:	00005271 	.word	0x00005271
    472c:	0000700d 	.word	0x0000700d
    4730:	000046b9 	.word	0x000046b9
    4734:	00004685 	.word	0x00004685

00004738 <spi_m_dma_enable>:
{
    4738:	b510      	push	{r4, lr}
	ASSERT(spi);
    473a:	4604      	mov	r4, r0
    473c:	2251      	movs	r2, #81	; 0x51
    473e:	4905      	ldr	r1, [pc, #20]	; (4754 <spi_m_dma_enable+0x1c>)
    4740:	3000      	adds	r0, #0
    4742:	bf18      	it	ne
    4744:	2001      	movne	r0, #1
    4746:	4b04      	ldr	r3, [pc, #16]	; (4758 <spi_m_dma_enable+0x20>)
    4748:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    474a:	1d20      	adds	r0, r4, #4
    474c:	4b03      	ldr	r3, [pc, #12]	; (475c <spi_m_dma_enable+0x24>)
    474e:	4798      	blx	r3
    4750:	bd10      	pop	{r4, pc}
    4752:	bf00      	nop
    4754:	0000bd3c 	.word	0x0000bd3c
    4758:	00005271 	.word	0x00005271
    475c:	00007189 	.word	0x00007189

00004760 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    4760:	b570      	push	{r4, r5, r6, lr}
    4762:	460d      	mov	r5, r1
    4764:	4616      	mov	r6, r2
	ASSERT(spi);
    4766:	4604      	mov	r4, r0
    4768:	22a8      	movs	r2, #168	; 0xa8
    476a:	4906      	ldr	r1, [pc, #24]	; (4784 <spi_m_dma_register_callback+0x24>)
    476c:	3000      	adds	r0, #0
    476e:	bf18      	it	ne
    4770:	2001      	movne	r0, #1
    4772:	4b05      	ldr	r3, [pc, #20]	; (4788 <spi_m_dma_register_callback+0x28>)
    4774:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    4776:	4632      	mov	r2, r6
    4778:	4629      	mov	r1, r5
    477a:	1d20      	adds	r0, r4, #4
    477c:	4b03      	ldr	r3, [pc, #12]	; (478c <spi_m_dma_register_callback+0x2c>)
    477e:	4798      	blx	r3
    4780:	bd70      	pop	{r4, r5, r6, pc}
    4782:	bf00      	nop
    4784:	0000bd3c 	.word	0x0000bd3c
    4788:	00005271 	.word	0x00005271
    478c:	000071b9 	.word	0x000071b9

00004790 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    4790:	b538      	push	{r3, r4, r5, lr}
    4792:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4794:	4604      	mov	r4, r0
    4796:	b150      	cbz	r0, 47ae <spi_m_dma_get_io_descriptor+0x1e>
    4798:	1c08      	adds	r0, r1, #0
    479a:	bf18      	it	ne
    479c:	2001      	movne	r0, #1
    479e:	22ae      	movs	r2, #174	; 0xae
    47a0:	4904      	ldr	r1, [pc, #16]	; (47b4 <spi_m_dma_get_io_descriptor+0x24>)
    47a2:	4b05      	ldr	r3, [pc, #20]	; (47b8 <spi_m_dma_get_io_descriptor+0x28>)
    47a4:	4798      	blx	r3
	*io = &spi->io;
    47a6:	3420      	adds	r4, #32
    47a8:	602c      	str	r4, [r5, #0]

	return 0;
}
    47aa:	2000      	movs	r0, #0
    47ac:	bd38      	pop	{r3, r4, r5, pc}
    47ae:	2000      	movs	r0, #0
    47b0:	e7f5      	b.n	479e <spi_m_dma_get_io_descriptor+0xe>
    47b2:	bf00      	nop
    47b4:	0000bd3c 	.word	0x0000bd3c
    47b8:	00005271 	.word	0x00005271

000047bc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    47bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47be:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    47c0:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    47c2:	b12f      	cbz	r7, 47d0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    47c4:	688d      	ldr	r5, [r1, #8]
    47c6:	463c      	mov	r4, r7
    47c8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    47ca:	f1c2 0e01 	rsb	lr, r2, #1
    47ce:	e00b      	b.n	47e8 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    47d0:	4b0e      	ldr	r3, [pc, #56]	; (480c <timer_add_timer_task+0x50>)
    47d2:	4798      	blx	r3
		return;
    47d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    47d6:	4473      	add	r3, lr
    47d8:	68a0      	ldr	r0, [r4, #8]
    47da:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    47dc:	42ab      	cmp	r3, r5
    47de:	d20a      	bcs.n	47f6 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    47e0:	6823      	ldr	r3, [r4, #0]
    47e2:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    47e4:	b153      	cbz	r3, 47fc <timer_add_timer_task+0x40>
    47e6:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    47e8:	6863      	ldr	r3, [r4, #4]
    47ea:	4293      	cmp	r3, r2
    47ec:	d8f3      	bhi.n	47d6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    47ee:	68a0      	ldr	r0, [r4, #8]
    47f0:	4403      	add	r3, r0
    47f2:	1a9b      	subs	r3, r3, r2
    47f4:	e7f2      	b.n	47dc <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    47f6:	42a7      	cmp	r7, r4
    47f8:	d004      	beq.n	4804 <timer_add_timer_task+0x48>
    47fa:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    47fc:	4620      	mov	r0, r4
    47fe:	4b04      	ldr	r3, [pc, #16]	; (4810 <timer_add_timer_task+0x54>)
    4800:	4798      	blx	r3
    4802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    4804:	4660      	mov	r0, ip
    4806:	4b01      	ldr	r3, [pc, #4]	; (480c <timer_add_timer_task+0x50>)
    4808:	4798      	blx	r3
    480a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    480c:	00005299 	.word	0x00005299
    4810:	000052c5 	.word	0x000052c5

00004814 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    4818:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    481a:	6907      	ldr	r7, [r0, #16]
    481c:	3701      	adds	r7, #1
    481e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4820:	7e03      	ldrb	r3, [r0, #24]
    4822:	f013 0f01 	tst.w	r3, #1
    4826:	d113      	bne.n	4850 <timer_process_counted+0x3c>
    4828:	7e03      	ldrb	r3, [r0, #24]
    482a:	f013 0f02 	tst.w	r3, #2
    482e:	d10f      	bne.n	4850 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    4830:	b354      	cbz	r4, 4888 <timer_process_counted+0x74>
    4832:	6863      	ldr	r3, [r4, #4]
    4834:	1afb      	subs	r3, r7, r3
    4836:	68a2      	ldr	r2, [r4, #8]
    4838:	4293      	cmp	r3, r2
    483a:	d307      	bcc.n	484c <timer_process_counted+0x38>
    483c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    483e:	f100 0814 	add.w	r8, r0, #20
    4842:	f8df 9048 	ldr.w	r9, [pc, #72]	; 488c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    4846:	f8df a048 	ldr.w	sl, [pc, #72]	; 4890 <timer_process_counted+0x7c>
    484a:	e012      	b.n	4872 <timer_process_counted+0x5e>
    484c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4850:	7e03      	ldrb	r3, [r0, #24]
    4852:	f043 0302 	orr.w	r3, r3, #2
    4856:	7603      	strb	r3, [r0, #24]
		return;
    4858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    485c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    485e:	68e3      	ldr	r3, [r4, #12]
    4860:	4620      	mov	r0, r4
    4862:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4864:	b185      	cbz	r5, 4888 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4866:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    4868:	686b      	ldr	r3, [r5, #4]
    486a:	1afb      	subs	r3, r7, r3
    486c:	68aa      	ldr	r2, [r5, #8]
    486e:	4293      	cmp	r3, r2
    4870:	d30a      	bcc.n	4888 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    4872:	4640      	mov	r0, r8
    4874:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4876:	7c23      	ldrb	r3, [r4, #16]
    4878:	2b01      	cmp	r3, #1
    487a:	d1ef      	bne.n	485c <timer_process_counted+0x48>
			tmp->time_label = time;
    487c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    487e:	463a      	mov	r2, r7
    4880:	4621      	mov	r1, r4
    4882:	4640      	mov	r0, r8
    4884:	47d0      	blx	sl
    4886:	e7e9      	b.n	485c <timer_process_counted+0x48>
    4888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    488c:	0000530d 	.word	0x0000530d
    4890:	000047bd 	.word	0x000047bd

00004894 <timer_init>:
{
    4894:	b570      	push	{r4, r5, r6, lr}
    4896:	460e      	mov	r6, r1
    4898:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    489a:	4604      	mov	r4, r0
    489c:	b190      	cbz	r0, 48c4 <timer_init+0x30>
    489e:	b199      	cbz	r1, 48c8 <timer_init+0x34>
    48a0:	1c10      	adds	r0, r2, #0
    48a2:	bf18      	it	ne
    48a4:	2001      	movne	r0, #1
    48a6:	223b      	movs	r2, #59	; 0x3b
    48a8:	4908      	ldr	r1, [pc, #32]	; (48cc <timer_init+0x38>)
    48aa:	4b09      	ldr	r3, [pc, #36]	; (48d0 <timer_init+0x3c>)
    48ac:	4798      	blx	r3
	descr->func = func;
    48ae:	4620      	mov	r0, r4
    48b0:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    48b4:	682b      	ldr	r3, [r5, #0]
    48b6:	4631      	mov	r1, r6
    48b8:	4798      	blx	r3
	descr->time                           = 0;
    48ba:	2000      	movs	r0, #0
    48bc:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    48be:	4b05      	ldr	r3, [pc, #20]	; (48d4 <timer_init+0x40>)
    48c0:	6063      	str	r3, [r4, #4]
}
    48c2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    48c4:	2000      	movs	r0, #0
    48c6:	e7ee      	b.n	48a6 <timer_init+0x12>
    48c8:	2000      	movs	r0, #0
    48ca:	e7ec      	b.n	48a6 <timer_init+0x12>
    48cc:	0000bd58 	.word	0x0000bd58
    48d0:	00005271 	.word	0x00005271
    48d4:	00004815 	.word	0x00004815

000048d8 <timer_start>:
{
    48d8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    48da:	4604      	mov	r4, r0
    48dc:	b198      	cbz	r0, 4906 <timer_start+0x2e>
    48de:	6800      	ldr	r0, [r0, #0]
    48e0:	3000      	adds	r0, #0
    48e2:	bf18      	it	ne
    48e4:	2001      	movne	r0, #1
    48e6:	2254      	movs	r2, #84	; 0x54
    48e8:	4909      	ldr	r1, [pc, #36]	; (4910 <timer_start+0x38>)
    48ea:	4b0a      	ldr	r3, [pc, #40]	; (4914 <timer_start+0x3c>)
    48ec:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    48ee:	1d25      	adds	r5, r4, #4
    48f0:	6823      	ldr	r3, [r4, #0]
    48f2:	699b      	ldr	r3, [r3, #24]
    48f4:	4628      	mov	r0, r5
    48f6:	4798      	blx	r3
    48f8:	b938      	cbnz	r0, 490a <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    48fa:	6823      	ldr	r3, [r4, #0]
    48fc:	689b      	ldr	r3, [r3, #8]
    48fe:	4628      	mov	r0, r5
    4900:	4798      	blx	r3
	return ERR_NONE;
    4902:	2000      	movs	r0, #0
    4904:	bd38      	pop	{r3, r4, r5, pc}
    4906:	2000      	movs	r0, #0
    4908:	e7ed      	b.n	48e6 <timer_start+0xe>
		return ERR_DENIED;
    490a:	f06f 0010 	mvn.w	r0, #16
}
    490e:	bd38      	pop	{r3, r4, r5, pc}
    4910:	0000bd58 	.word	0x0000bd58
    4914:	00005271 	.word	0x00005271

00004918 <timer_add_task>:
{
    4918:	b570      	push	{r4, r5, r6, lr}
    491a:	b082      	sub	sp, #8
    491c:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    491e:	4604      	mov	r4, r0
    4920:	b328      	cbz	r0, 496e <timer_add_task+0x56>
    4922:	b331      	cbz	r1, 4972 <timer_add_task+0x5a>
    4924:	6800      	ldr	r0, [r0, #0]
    4926:	3000      	adds	r0, #0
    4928:	bf18      	it	ne
    492a:	2001      	movne	r0, #1
    492c:	227b      	movs	r2, #123	; 0x7b
    492e:	4920      	ldr	r1, [pc, #128]	; (49b0 <timer_add_task+0x98>)
    4930:	4b20      	ldr	r3, [pc, #128]	; (49b4 <timer_add_task+0x9c>)
    4932:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4934:	7f23      	ldrb	r3, [r4, #28]
    4936:	f043 0301 	orr.w	r3, r3, #1
    493a:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    493c:	f104 0618 	add.w	r6, r4, #24
    4940:	4629      	mov	r1, r5
    4942:	4630      	mov	r0, r6
    4944:	4b1c      	ldr	r3, [pc, #112]	; (49b8 <timer_add_task+0xa0>)
    4946:	4798      	blx	r3
    4948:	b9a8      	cbnz	r0, 4976 <timer_add_task+0x5e>
	task->time_label = descr->time;
    494a:	6963      	ldr	r3, [r4, #20]
    494c:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    494e:	6962      	ldr	r2, [r4, #20]
    4950:	4629      	mov	r1, r5
    4952:	4630      	mov	r0, r6
    4954:	4b19      	ldr	r3, [pc, #100]	; (49bc <timer_add_task+0xa4>)
    4956:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4958:	7f23      	ldrb	r3, [r4, #28]
    495a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    495e:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4960:	7f23      	ldrb	r3, [r4, #28]
    4962:	f013 0f02 	tst.w	r3, #2
    4966:	d112      	bne.n	498e <timer_add_task+0x76>
	return ERR_NONE;
    4968:	2000      	movs	r0, #0
}
    496a:	b002      	add	sp, #8
    496c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    496e:	2000      	movs	r0, #0
    4970:	e7dc      	b.n	492c <timer_add_task+0x14>
    4972:	2000      	movs	r0, #0
    4974:	e7da      	b.n	492c <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4976:	7f23      	ldrb	r3, [r4, #28]
    4978:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    497c:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    497e:	2280      	movs	r2, #128	; 0x80
    4980:	490b      	ldr	r1, [pc, #44]	; (49b0 <timer_add_task+0x98>)
    4982:	2000      	movs	r0, #0
    4984:	4b0b      	ldr	r3, [pc, #44]	; (49b4 <timer_add_task+0x9c>)
    4986:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4988:	f06f 0011 	mvn.w	r0, #17
    498c:	e7ed      	b.n	496a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    498e:	a801      	add	r0, sp, #4
    4990:	4b0b      	ldr	r3, [pc, #44]	; (49c0 <timer_add_task+0xa8>)
    4992:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4994:	7f23      	ldrb	r3, [r4, #28]
    4996:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    499a:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    499c:	6823      	ldr	r3, [r4, #0]
    499e:	69db      	ldr	r3, [r3, #28]
    49a0:	1d20      	adds	r0, r4, #4
    49a2:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    49a4:	a801      	add	r0, sp, #4
    49a6:	4b07      	ldr	r3, [pc, #28]	; (49c4 <timer_add_task+0xac>)
    49a8:	4798      	blx	r3
	return ERR_NONE;
    49aa:	2000      	movs	r0, #0
    49ac:	e7dd      	b.n	496a <timer_add_task+0x52>
    49ae:	bf00      	nop
    49b0:	0000bd58 	.word	0x0000bd58
    49b4:	00005271 	.word	0x00005271
    49b8:	00005277 	.word	0x00005277
    49bc:	000047bd 	.word	0x000047bd
    49c0:	000040c9 	.word	0x000040c9
    49c4:	000040d7 	.word	0x000040d7

000049c8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    49c8:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    49ca:	2300      	movs	r3, #0
    49cc:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    49ce:	69c3      	ldr	r3, [r0, #28]
    49d0:	b11b      	cbz	r3, 49da <usart_transmission_complete+0x12>
    49d2:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    49d6:	4610      	mov	r0, r2
    49d8:	4798      	blx	r3
    49da:	bd08      	pop	{r3, pc}

000049dc <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    49dc:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    49de:	2300      	movs	r3, #0
    49e0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    49e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    49e4:	b11b      	cbz	r3, 49ee <usart_error+0x12>
    49e6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    49ea:	4610      	mov	r0, r2
    49ec:	4798      	blx	r3
    49ee:	bd08      	pop	{r3, pc}

000049f0 <usart_fill_rx_buffer>:
{
    49f0:	b538      	push	{r3, r4, r5, lr}
    49f2:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    49f4:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    49f8:	302c      	adds	r0, #44	; 0x2c
    49fa:	4b03      	ldr	r3, [pc, #12]	; (4a08 <usart_fill_rx_buffer+0x18>)
    49fc:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    49fe:	6a23      	ldr	r3, [r4, #32]
    4a00:	b10b      	cbz	r3, 4a06 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    4a02:	4628      	mov	r0, r5
    4a04:	4798      	blx	r3
    4a06:	bd38      	pop	{r3, r4, r5, pc}
    4a08:	000053ad 	.word	0x000053ad

00004a0c <usart_async_write>:
{
    4a0c:	b570      	push	{r4, r5, r6, lr}
    4a0e:	460e      	mov	r6, r1
    4a10:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    4a12:	4604      	mov	r4, r0
    4a14:	b1e0      	cbz	r0, 4a50 <usart_async_write+0x44>
    4a16:	b1e9      	cbz	r1, 4a54 <usart_async_write+0x48>
    4a18:	1c10      	adds	r0, r2, #0
    4a1a:	bf18      	it	ne
    4a1c:	2001      	movne	r0, #1
    4a1e:	f240 123b 	movw	r2, #315	; 0x13b
    4a22:	490f      	ldr	r1, [pc, #60]	; (4a60 <usart_async_write+0x54>)
    4a24:	4b0f      	ldr	r3, [pc, #60]	; (4a64 <usart_async_write+0x58>)
    4a26:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    4a28:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    4a2c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    4a30:	429a      	cmp	r2, r3
    4a32:	d111      	bne.n	4a58 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    4a34:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    4a36:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    4a3a:	2300      	movs	r3, #0
    4a3c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    4a40:	2301      	movs	r3, #1
    4a42:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    4a44:	f104 0008 	add.w	r0, r4, #8
    4a48:	4b07      	ldr	r3, [pc, #28]	; (4a68 <usart_async_write+0x5c>)
    4a4a:	4798      	blx	r3
	return (int32_t)length;
    4a4c:	4628      	mov	r0, r5
    4a4e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    4a50:	2000      	movs	r0, #0
    4a52:	e7e4      	b.n	4a1e <usart_async_write+0x12>
    4a54:	2000      	movs	r0, #0
    4a56:	e7e2      	b.n	4a1e <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    4a58:	f06f 001b 	mvn.w	r0, #27
}
    4a5c:	bd70      	pop	{r4, r5, r6, pc}
    4a5e:	bf00      	nop
    4a60:	0000bd70 	.word	0x0000bd70
    4a64:	00005271 	.word	0x00005271
    4a68:	000067bf 	.word	0x000067bf

00004a6c <usart_process_byte_sent>:
{
    4a6c:	b510      	push	{r4, lr}
    4a6e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    4a70:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    4a72:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    4a76:	429a      	cmp	r2, r3
    4a78:	d009      	beq.n	4a8e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    4a7a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4a7c:	1c59      	adds	r1, r3, #1
    4a7e:	8781      	strh	r1, [r0, #60]	; 0x3c
    4a80:	5cd1      	ldrb	r1, [r2, r3]
    4a82:	4b04      	ldr	r3, [pc, #16]	; (4a94 <usart_process_byte_sent+0x28>)
    4a84:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    4a86:	4620      	mov	r0, r4
    4a88:	4b03      	ldr	r3, [pc, #12]	; (4a98 <usart_process_byte_sent+0x2c>)
    4a8a:	4798      	blx	r3
    4a8c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    4a8e:	4b03      	ldr	r3, [pc, #12]	; (4a9c <usart_process_byte_sent+0x30>)
    4a90:	4798      	blx	r3
    4a92:	bd10      	pop	{r4, pc}
    4a94:	000067b9 	.word	0x000067b9
    4a98:	000067bf 	.word	0x000067bf
    4a9c:	000067c7 	.word	0x000067c7

00004aa0 <usart_async_read>:
{
    4aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4aa4:	b082      	sub	sp, #8
    4aa6:	460f      	mov	r7, r1
    4aa8:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    4aaa:	4606      	mov	r6, r0
    4aac:	b1a0      	cbz	r0, 4ad8 <usart_async_read+0x38>
    4aae:	b199      	cbz	r1, 4ad8 <usart_async_read+0x38>
    4ab0:	2a00      	cmp	r2, #0
    4ab2:	d12d      	bne.n	4b10 <usart_async_read+0x70>
    4ab4:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4ab8:	4929      	ldr	r1, [pc, #164]	; (4b60 <usart_async_read+0xc0>)
    4aba:	2000      	movs	r0, #0
    4abc:	4b29      	ldr	r3, [pc, #164]	; (4b64 <usart_async_read+0xc4>)
    4abe:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4ac0:	a801      	add	r0, sp, #4
    4ac2:	4b29      	ldr	r3, [pc, #164]	; (4b68 <usart_async_read+0xc8>)
    4ac4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4ac6:	f106 0034 	add.w	r0, r6, #52	; 0x34
    4aca:	4b28      	ldr	r3, [pc, #160]	; (4b6c <usart_async_read+0xcc>)
    4acc:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    4ace:	a801      	add	r0, sp, #4
    4ad0:	4b27      	ldr	r3, [pc, #156]	; (4b70 <usart_async_read+0xd0>)
    4ad2:	4798      	blx	r3
	uint16_t                       was_read = 0;
    4ad4:	2500      	movs	r5, #0
	return (int32_t)was_read;
    4ad6:	e03e      	b.n	4b56 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    4ad8:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4adc:	4920      	ldr	r1, [pc, #128]	; (4b60 <usart_async_read+0xc0>)
    4ade:	2000      	movs	r0, #0
    4ae0:	4b20      	ldr	r3, [pc, #128]	; (4b64 <usart_async_read+0xc4>)
    4ae2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4ae4:	a801      	add	r0, sp, #4
    4ae6:	4b20      	ldr	r3, [pc, #128]	; (4b68 <usart_async_read+0xc8>)
    4ae8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4aea:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    4aee:	4650      	mov	r0, sl
    4af0:	4b1e      	ldr	r3, [pc, #120]	; (4b6c <usart_async_read+0xcc>)
    4af2:	4798      	blx	r3
    4af4:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    4af6:	a801      	add	r0, sp, #4
    4af8:	4b1d      	ldr	r3, [pc, #116]	; (4b70 <usart_async_read+0xd0>)
    4afa:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    4afc:	f1b9 0f00 	cmp.w	r9, #0
    4b00:	d004      	beq.n	4b0c <usart_async_read+0x6c>
    4b02:	f1b8 0f00 	cmp.w	r8, #0
    4b06:	d119      	bne.n	4b3c <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    4b08:	2500      	movs	r5, #0
    4b0a:	e024      	b.n	4b56 <usart_async_read+0xb6>
    4b0c:	2500      	movs	r5, #0
    4b0e:	e022      	b.n	4b56 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    4b10:	f44f 72ac 	mov.w	r2, #344	; 0x158
    4b14:	4912      	ldr	r1, [pc, #72]	; (4b60 <usart_async_read+0xc0>)
    4b16:	2001      	movs	r0, #1
    4b18:	4b12      	ldr	r3, [pc, #72]	; (4b64 <usart_async_read+0xc4>)
    4b1a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    4b1c:	a801      	add	r0, sp, #4
    4b1e:	4b12      	ldr	r3, [pc, #72]	; (4b68 <usart_async_read+0xc8>)
    4b20:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    4b22:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    4b26:	4650      	mov	r0, sl
    4b28:	4b10      	ldr	r3, [pc, #64]	; (4b6c <usart_async_read+0xcc>)
    4b2a:	4798      	blx	r3
    4b2c:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    4b2e:	a801      	add	r0, sp, #4
    4b30:	4b0f      	ldr	r3, [pc, #60]	; (4b70 <usart_async_read+0xd0>)
    4b32:	4798      	blx	r3
	uint16_t                       was_read = 0;
    4b34:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    4b36:	f1b9 0f00 	cmp.w	r9, #0
    4b3a:	d00c      	beq.n	4b56 <usart_async_read+0xb6>
{
    4b3c:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    4b3e:	4e0d      	ldr	r6, [pc, #52]	; (4b74 <usart_async_read+0xd4>)
    4b40:	1c60      	adds	r0, r4, #1
    4b42:	b285      	uxth	r5, r0
    4b44:	1939      	adds	r1, r7, r4
    4b46:	4650      	mov	r0, sl
    4b48:	47b0      	blx	r6
    4b4a:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    4b4c:	454c      	cmp	r4, r9
    4b4e:	d202      	bcs.n	4b56 <usart_async_read+0xb6>
    4b50:	b2a3      	uxth	r3, r4
    4b52:	4598      	cmp	r8, r3
    4b54:	d8f4      	bhi.n	4b40 <usart_async_read+0xa0>
}
    4b56:	4628      	mov	r0, r5
    4b58:	b002      	add	sp, #8
    4b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b5e:	bf00      	nop
    4b60:	0000bd70 	.word	0x0000bd70
    4b64:	00005271 	.word	0x00005271
    4b68:	000040c9 	.word	0x000040c9
    4b6c:	000053ed 	.word	0x000053ed
    4b70:	000040d7 	.word	0x000040d7
    4b74:	00005369 	.word	0x00005369

00004b78 <usart_async_init>:
{
    4b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b7a:	460d      	mov	r5, r1
    4b7c:	4616      	mov	r6, r2
    4b7e:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    4b80:	4604      	mov	r4, r0
    4b82:	b320      	cbz	r0, 4bce <usart_async_init+0x56>
    4b84:	b329      	cbz	r1, 4bd2 <usart_async_init+0x5a>
    4b86:	b332      	cbz	r2, 4bd6 <usart_async_init+0x5e>
    4b88:	1c18      	adds	r0, r3, #0
    4b8a:	bf18      	it	ne
    4b8c:	2001      	movne	r0, #1
    4b8e:	223a      	movs	r2, #58	; 0x3a
    4b90:	4913      	ldr	r1, [pc, #76]	; (4be0 <usart_async_init+0x68>)
    4b92:	4b14      	ldr	r3, [pc, #80]	; (4be4 <usart_async_init+0x6c>)
    4b94:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    4b96:	463a      	mov	r2, r7
    4b98:	4631      	mov	r1, r6
    4b9a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    4b9e:	4b12      	ldr	r3, [pc, #72]	; (4be8 <usart_async_init+0x70>)
    4ba0:	4798      	blx	r3
    4ba2:	b9d0      	cbnz	r0, 4bda <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    4ba4:	4629      	mov	r1, r5
    4ba6:	f104 0008 	add.w	r0, r4, #8
    4baa:	4b10      	ldr	r3, [pc, #64]	; (4bec <usart_async_init+0x74>)
    4bac:	4798      	blx	r3
	if (init_status) {
    4bae:	4603      	mov	r3, r0
    4bb0:	b958      	cbnz	r0, 4bca <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    4bb2:	4a0f      	ldr	r2, [pc, #60]	; (4bf0 <usart_async_init+0x78>)
    4bb4:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    4bb6:	4a0f      	ldr	r2, [pc, #60]	; (4bf4 <usart_async_init+0x7c>)
    4bb8:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    4bba:	4a0f      	ldr	r2, [pc, #60]	; (4bf8 <usart_async_init+0x80>)
    4bbc:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    4bbe:	4a0f      	ldr	r2, [pc, #60]	; (4bfc <usart_async_init+0x84>)
    4bc0:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    4bc2:	4a0f      	ldr	r2, [pc, #60]	; (4c00 <usart_async_init+0x88>)
    4bc4:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    4bc6:	4a0f      	ldr	r2, [pc, #60]	; (4c04 <usart_async_init+0x8c>)
    4bc8:	6162      	str	r2, [r4, #20]
}
    4bca:	4618      	mov	r0, r3
    4bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    4bce:	2000      	movs	r0, #0
    4bd0:	e7dd      	b.n	4b8e <usart_async_init+0x16>
    4bd2:	2000      	movs	r0, #0
    4bd4:	e7db      	b.n	4b8e <usart_async_init+0x16>
    4bd6:	2000      	movs	r0, #0
    4bd8:	e7d9      	b.n	4b8e <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    4bda:	f06f 030c 	mvn.w	r3, #12
    4bde:	e7f4      	b.n	4bca <usart_async_init+0x52>
    4be0:	0000bd70 	.word	0x0000bd70
    4be4:	00005271 	.word	0x00005271
    4be8:	00005319 	.word	0x00005319
    4bec:	00006729 	.word	0x00006729
    4bf0:	00004aa1 	.word	0x00004aa1
    4bf4:	00004a0d 	.word	0x00004a0d
    4bf8:	00004a6d 	.word	0x00004a6d
    4bfc:	000049f1 	.word	0x000049f1
    4c00:	000049c9 	.word	0x000049c9
    4c04:	000049dd 	.word	0x000049dd

00004c08 <usart_async_enable>:
{
    4c08:	b510      	push	{r4, lr}
	ASSERT(descr);
    4c0a:	4604      	mov	r4, r0
    4c0c:	2261      	movs	r2, #97	; 0x61
    4c0e:	4906      	ldr	r1, [pc, #24]	; (4c28 <usart_async_enable+0x20>)
    4c10:	3000      	adds	r0, #0
    4c12:	bf18      	it	ne
    4c14:	2001      	movne	r0, #1
    4c16:	4b05      	ldr	r3, [pc, #20]	; (4c2c <usart_async_enable+0x24>)
    4c18:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    4c1a:	f104 0008 	add.w	r0, r4, #8
    4c1e:	4b04      	ldr	r3, [pc, #16]	; (4c30 <usart_async_enable+0x28>)
    4c20:	4798      	blx	r3
}
    4c22:	2000      	movs	r0, #0
    4c24:	bd10      	pop	{r4, pc}
    4c26:	bf00      	nop
    4c28:	0000bd70 	.word	0x0000bd70
    4c2c:	00005271 	.word	0x00005271
    4c30:	000067a5 	.word	0x000067a5

00004c34 <usart_async_get_io_descriptor>:
{
    4c34:	b538      	push	{r3, r4, r5, lr}
    4c36:	460c      	mov	r4, r1
	ASSERT(descr && io);
    4c38:	4605      	mov	r5, r0
    4c3a:	b148      	cbz	r0, 4c50 <usart_async_get_io_descriptor+0x1c>
    4c3c:	1c08      	adds	r0, r1, #0
    4c3e:	bf18      	it	ne
    4c40:	2001      	movne	r0, #1
    4c42:	2277      	movs	r2, #119	; 0x77
    4c44:	4903      	ldr	r1, [pc, #12]	; (4c54 <usart_async_get_io_descriptor+0x20>)
    4c46:	4b04      	ldr	r3, [pc, #16]	; (4c58 <usart_async_get_io_descriptor+0x24>)
    4c48:	4798      	blx	r3
	*io = &descr->io;
    4c4a:	6025      	str	r5, [r4, #0]
}
    4c4c:	2000      	movs	r0, #0
    4c4e:	bd38      	pop	{r3, r4, r5, pc}
    4c50:	2000      	movs	r0, #0
    4c52:	e7f6      	b.n	4c42 <usart_async_get_io_descriptor+0xe>
    4c54:	0000bd70 	.word	0x0000bd70
    4c58:	00005271 	.word	0x00005271

00004c5c <usart_async_register_callback>:
{
    4c5c:	b570      	push	{r4, r5, r6, lr}
    4c5e:	460c      	mov	r4, r1
    4c60:	4616      	mov	r6, r2
	ASSERT(descr);
    4c62:	4605      	mov	r5, r0
    4c64:	2283      	movs	r2, #131	; 0x83
    4c66:	4917      	ldr	r1, [pc, #92]	; (4cc4 <usart_async_register_callback+0x68>)
    4c68:	3000      	adds	r0, #0
    4c6a:	bf18      	it	ne
    4c6c:	2001      	movne	r0, #1
    4c6e:	4b16      	ldr	r3, [pc, #88]	; (4cc8 <usart_async_register_callback+0x6c>)
    4c70:	4798      	blx	r3
	switch (type) {
    4c72:	2c01      	cmp	r4, #1
    4c74:	d010      	beq.n	4c98 <usart_async_register_callback+0x3c>
    4c76:	b124      	cbz	r4, 4c82 <usart_async_register_callback+0x26>
    4c78:	2c02      	cmp	r4, #2
    4c7a:	d018      	beq.n	4cae <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    4c7c:	f06f 000c 	mvn.w	r0, #12
}
    4c80:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    4c82:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    4c84:	1c32      	adds	r2, r6, #0
    4c86:	bf18      	it	ne
    4c88:	2201      	movne	r2, #1
    4c8a:	2101      	movs	r1, #1
    4c8c:	f105 0008 	add.w	r0, r5, #8
    4c90:	4b0e      	ldr	r3, [pc, #56]	; (4ccc <usart_async_register_callback+0x70>)
    4c92:	4798      	blx	r3
	return ERR_NONE;
    4c94:	2000      	movs	r0, #0
		break;
    4c96:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    4c98:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    4c9a:	1c32      	adds	r2, r6, #0
    4c9c:	bf18      	it	ne
    4c9e:	2201      	movne	r2, #1
    4ca0:	2102      	movs	r1, #2
    4ca2:	f105 0008 	add.w	r0, r5, #8
    4ca6:	4b09      	ldr	r3, [pc, #36]	; (4ccc <usart_async_register_callback+0x70>)
    4ca8:	4798      	blx	r3
	return ERR_NONE;
    4caa:	2000      	movs	r0, #0
		break;
    4cac:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    4cae:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    4cb0:	1c32      	adds	r2, r6, #0
    4cb2:	bf18      	it	ne
    4cb4:	2201      	movne	r2, #1
    4cb6:	2103      	movs	r1, #3
    4cb8:	f105 0008 	add.w	r0, r5, #8
    4cbc:	4b03      	ldr	r3, [pc, #12]	; (4ccc <usart_async_register_callback+0x70>)
    4cbe:	4798      	blx	r3
	return ERR_NONE;
    4cc0:	2000      	movs	r0, #0
		break;
    4cc2:	bd70      	pop	{r4, r5, r6, pc}
    4cc4:	0000bd70 	.word	0x0000bd70
    4cc8:	00005271 	.word	0x00005271
    4ccc:	000067d1 	.word	0x000067d1

00004cd0 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4cd0:	4b0f      	ldr	r3, [pc, #60]	; (4d10 <_usb_d_find_ep+0x40>)
    4cd2:	7859      	ldrb	r1, [r3, #1]
    4cd4:	4288      	cmp	r0, r1
    4cd6:	d018      	beq.n	4d0a <_usb_d_find_ep+0x3a>
{
    4cd8:	b430      	push	{r4, r5}
    4cda:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4cdc:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4cde:	f000 050f 	and.w	r5, r0, #15
    4ce2:	e007      	b.n	4cf4 <_usb_d_find_ep+0x24>
    4ce4:	3301      	adds	r3, #1
    4ce6:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4ce8:	2b0d      	cmp	r3, #13
    4cea:	d009      	beq.n	4d00 <_usb_d_find_ep+0x30>
    4cec:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4cee:	7851      	ldrb	r1, [r2, #1]
    4cf0:	4281      	cmp	r1, r0
    4cf2:	d007      	beq.n	4d04 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    4cf4:	7814      	ldrb	r4, [r2, #0]
    4cf6:	2c00      	cmp	r4, #0
    4cf8:	d1f4      	bne.n	4ce4 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4cfa:	428d      	cmp	r5, r1
    4cfc:	d1f2      	bne.n	4ce4 <_usb_d_find_ep+0x14>
    4cfe:	e001      	b.n	4d04 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    4d00:	f04f 33ff 	mov.w	r3, #4294967295
}
    4d04:	4618      	mov	r0, r3
    4d06:	bc30      	pop	{r4, r5}
    4d08:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4d0a:	2300      	movs	r3, #0
}
    4d0c:	4618      	mov	r0, r3
    4d0e:	4770      	bx	lr
    4d10:	2000065c 	.word	0x2000065c

00004d14 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    4d14:	2000      	movs	r0, #0
    4d16:	4770      	bx	lr

00004d18 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    4d18:	b538      	push	{r3, r4, r5, lr}
    4d1a:	4604      	mov	r4, r0
    4d1c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    4d1e:	4b09      	ldr	r3, [pc, #36]	; (4d44 <usb_d_cb_trans_more+0x2c>)
    4d20:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    4d22:	4b09      	ldr	r3, [pc, #36]	; (4d48 <usb_d_cb_trans_more+0x30>)
    4d24:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    4d28:	789b      	ldrb	r3, [r3, #2]
    4d2a:	2b03      	cmp	r3, #3
    4d2c:	d001      	beq.n	4d32 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    4d2e:	2000      	movs	r0, #0
}
    4d30:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    4d32:	4b05      	ldr	r3, [pc, #20]	; (4d48 <usb_d_cb_trans_more+0x30>)
    4d34:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    4d38:	6983      	ldr	r3, [r0, #24]
    4d3a:	4629      	mov	r1, r5
    4d3c:	4620      	mov	r0, r4
    4d3e:	4798      	blx	r3
    4d40:	bd38      	pop	{r3, r4, r5, pc}
    4d42:	bf00      	nop
    4d44:	00004cd1 	.word	0x00004cd1
    4d48:	2000065c 	.word	0x2000065c

00004d4c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    4d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d4e:	b085      	sub	sp, #20
    4d50:	4606      	mov	r6, r0
    4d52:	460d      	mov	r5, r1
    4d54:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    4d56:	4b4d      	ldr	r3, [pc, #308]	; (4e8c <_usb_d_cb_trans_done+0x140>)
    4d58:	4798      	blx	r3
    4d5a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    4d5c:	2d00      	cmp	r5, #0
    4d5e:	d15b      	bne.n	4e18 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4d60:	4a4b      	ldr	r2, [pc, #300]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4d62:	0143      	lsls	r3, r0, #5
    4d64:	18d1      	adds	r1, r2, r3
    4d66:	2000      	movs	r0, #0
    4d68:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4d6a:	5cd3      	ldrb	r3, [r2, r3]
    4d6c:	b173      	cbz	r3, 4d8c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4d6e:	4b48      	ldr	r3, [pc, #288]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4d70:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4d74:	2201      	movs	r2, #1
    4d76:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    4d78:	4845      	ldr	r0, [pc, #276]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4d7a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4d7e:	69c3      	ldr	r3, [r0, #28]
    4d80:	463a      	mov	r2, r7
    4d82:	78c1      	ldrb	r1, [r0, #3]
    4d84:	4630      	mov	r0, r6
    4d86:	4798      	blx	r3
}
    4d88:	b005      	add	sp, #20
    4d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    4d8c:	788b      	ldrb	r3, [r1, #2]
    4d8e:	2b03      	cmp	r3, #3
    4d90:	d00b      	beq.n	4daa <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    4d92:	483f      	ldr	r0, [pc, #252]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4d94:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    4d98:	4614      	mov	r4, r2
    4d9a:	69d3      	ldr	r3, [r2, #28]
    4d9c:	320c      	adds	r2, #12
    4d9e:	2100      	movs	r1, #0
    4da0:	7860      	ldrb	r0, [r4, #1]
    4da2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4da4:	2302      	movs	r3, #2
    4da6:	70a3      	strb	r3, [r4, #2]
    4da8:	e7ee      	b.n	4d88 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    4daa:	460b      	mov	r3, r1
    4dac:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    4db0:	460a      	mov	r2, r1
    4db2:	69ce      	ldr	r6, [r1, #28]
    4db4:	320c      	adds	r2, #12
    4db6:	2101      	movs	r1, #1
    4db8:	7858      	ldrb	r0, [r3, #1]
    4dba:	47b0      	blx	r6
		if (err) {
    4dbc:	b1a0      	cbz	r0, 4de8 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4dbe:	4b34      	ldr	r3, [pc, #208]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4dc0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4dc4:	2205      	movs	r2, #5
    4dc6:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    4dc8:	2202      	movs	r2, #2
    4dca:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4dcc:	2d00      	cmp	r5, #0
    4dce:	db09      	blt.n	4de4 <_usb_d_cb_trans_done+0x98>
    4dd0:	482f      	ldr	r0, [pc, #188]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4dd2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4dd6:	7840      	ldrb	r0, [r0, #1]
    4dd8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    4ddc:	2101      	movs	r1, #1
    4dde:	4b2d      	ldr	r3, [pc, #180]	; (4e94 <_usb_d_cb_trans_done+0x148>)
    4de0:	4798      	blx	r3
    4de2:	e7d1      	b.n	4d88 <_usb_d_cb_trans_done+0x3c>
    4de4:	7858      	ldrb	r0, [r3, #1]
    4de6:	e7f9      	b.n	4ddc <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4de8:	4829      	ldr	r0, [pc, #164]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4dea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4dee:	2304      	movs	r3, #4
    4df0:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    4df2:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    4df4:	2200      	movs	r2, #0
    4df6:	9201      	str	r2, [sp, #4]
    4df8:	9202      	str	r2, [sp, #8]
    4dfa:	4295      	cmp	r5, r2
    4dfc:	bfac      	ite	ge
    4dfe:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    4e02:	f003 030f 	andlt.w	r3, r3, #15
    4e06:	f88d 300c 	strb.w	r3, [sp, #12]
    4e0a:	2301      	movs	r3, #1
    4e0c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    4e10:	a801      	add	r0, sp, #4
    4e12:	4b21      	ldr	r3, [pc, #132]	; (4e98 <_usb_d_cb_trans_done+0x14c>)
    4e14:	4798      	blx	r3
    4e16:	e7b7      	b.n	4d88 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    4e18:	2d01      	cmp	r5, #1
    4e1a:	d00a      	beq.n	4e32 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    4e1c:	2d02      	cmp	r5, #2
    4e1e:	d01c      	beq.n	4e5a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    4e20:	2d03      	cmp	r5, #3
    4e22:	d02a      	beq.n	4e7a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    4e24:	4b1a      	ldr	r3, [pc, #104]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4e26:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    4e2a:	2206      	movs	r2, #6
    4e2c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    4e2e:	70da      	strb	r2, [r3, #3]
    4e30:	e7a2      	b.n	4d78 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    4e32:	4a17      	ldr	r2, [pc, #92]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4e34:	0143      	lsls	r3, r0, #5
    4e36:	18d1      	adds	r1, r2, r3
    4e38:	2002      	movs	r0, #2
    4e3a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4e3c:	5cd3      	ldrb	r3, [r2, r3]
    4e3e:	b12b      	cbz	r3, 4e4c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    4e40:	4b13      	ldr	r3, [pc, #76]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4e42:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4e46:	2205      	movs	r2, #5
    4e48:	709a      	strb	r2, [r3, #2]
    4e4a:	e795      	b.n	4d78 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4e4c:	460b      	mov	r3, r1
    4e4e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4e50:	2100      	movs	r1, #0
    4e52:	4630      	mov	r0, r6
    4e54:	4b0f      	ldr	r3, [pc, #60]	; (4e94 <_usb_d_cb_trans_done+0x148>)
    4e56:	4798      	blx	r3
    4e58:	e78e      	b.n	4d78 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    4e5a:	4a0d      	ldr	r2, [pc, #52]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4e5c:	0143      	lsls	r3, r0, #5
    4e5e:	18d1      	adds	r1, r2, r3
    4e60:	2004      	movs	r0, #4
    4e62:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4e64:	5cd3      	ldrb	r3, [r2, r3]
    4e66:	b12b      	cbz	r3, 4e74 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4e68:	4b09      	ldr	r3, [pc, #36]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4e6a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4e6e:	2201      	movs	r2, #1
    4e70:	709a      	strb	r2, [r3, #2]
    4e72:	e781      	b.n	4d78 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4e74:	2302      	movs	r3, #2
    4e76:	708b      	strb	r3, [r1, #2]
			return;
    4e78:	e786      	b.n	4d88 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    4e7a:	4b05      	ldr	r3, [pc, #20]	; (4e90 <_usb_d_cb_trans_done+0x144>)
    4e7c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    4e80:	2200      	movs	r2, #0
    4e82:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    4e84:	2205      	movs	r2, #5
    4e86:	70da      	strb	r2, [r3, #3]
    4e88:	e776      	b.n	4d78 <_usb_d_cb_trans_done+0x2c>
    4e8a:	bf00      	nop
    4e8c:	00004cd1 	.word	0x00004cd1
    4e90:	2000065c 	.word	0x2000065c
    4e94:	00008715 	.word	0x00008715
    4e98:	000088bd 	.word	0x000088bd

00004e9c <usb_d_cb_trans_setup>:
{
    4e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ea0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    4ea2:	4b1c      	ldr	r3, [pc, #112]	; (4f14 <usb_d_cb_trans_setup+0x78>)
    4ea4:	4798      	blx	r3
    4ea6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    4ea8:	4c1b      	ldr	r4, [pc, #108]	; (4f18 <usb_d_cb_trans_setup+0x7c>)
    4eaa:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    4eae:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4eb0:	4621      	mov	r1, r4
    4eb2:	4628      	mov	r0, r5
    4eb4:	4b19      	ldr	r3, [pc, #100]	; (4f1c <usb_d_cb_trans_setup+0x80>)
    4eb6:	4798      	blx	r3
	if (n != 8) {
    4eb8:	b2c0      	uxtb	r0, r0
    4eba:	2808      	cmp	r0, #8
    4ebc:	d009      	beq.n	4ed2 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4ebe:	2101      	movs	r1, #1
    4ec0:	4628      	mov	r0, r5
    4ec2:	4c17      	ldr	r4, [pc, #92]	; (4f20 <usb_d_cb_trans_setup+0x84>)
    4ec4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4ec6:	2101      	movs	r1, #1
    4ec8:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    4ecc:	47a0      	blx	r4
		return;
    4ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4ed2:	2100      	movs	r1, #0
    4ed4:	4628      	mov	r0, r5
    4ed6:	4f12      	ldr	r7, [pc, #72]	; (4f20 <usb_d_cb_trans_setup+0x84>)
    4ed8:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    4eda:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    4ede:	2100      	movs	r1, #0
    4ee0:	4640      	mov	r0, r8
    4ee2:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    4ee4:	4b0c      	ldr	r3, [pc, #48]	; (4f18 <usb_d_cb_trans_setup+0x7c>)
    4ee6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    4eea:	2201      	movs	r2, #1
    4eec:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4eee:	695b      	ldr	r3, [r3, #20]
    4ef0:	4621      	mov	r1, r4
    4ef2:	4628      	mov	r0, r5
    4ef4:	4798      	blx	r3
    4ef6:	b108      	cbz	r0, 4efc <usb_d_cb_trans_setup+0x60>
    4ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    4efc:	4b06      	ldr	r3, [pc, #24]	; (4f18 <usb_d_cb_trans_setup+0x7c>)
    4efe:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4f02:	2305      	movs	r3, #5
    4f04:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4f06:	2101      	movs	r1, #1
    4f08:	4628      	mov	r0, r5
    4f0a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4f0c:	2101      	movs	r1, #1
    4f0e:	4640      	mov	r0, r8
    4f10:	47b8      	blx	r7
    4f12:	e7f1      	b.n	4ef8 <usb_d_cb_trans_setup+0x5c>
    4f14:	00004cd1 	.word	0x00004cd1
    4f18:	2000065c 	.word	0x2000065c
    4f1c:	0000885d 	.word	0x0000885d
    4f20:	00008715 	.word	0x00008715

00004f24 <usb_d_init>:

int32_t usb_d_init(void)
{
    4f24:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    4f26:	4b11      	ldr	r3, [pc, #68]	; (4f6c <usb_d_init+0x48>)
    4f28:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    4f2a:	2800      	cmp	r0, #0
    4f2c:	db1d      	blt.n	4f6a <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    4f2e:	4c10      	ldr	r4, [pc, #64]	; (4f70 <usb_d_init+0x4c>)
    4f30:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    4f34:	2100      	movs	r1, #0
    4f36:	4620      	mov	r0, r4
    4f38:	4b0e      	ldr	r3, [pc, #56]	; (4f74 <usb_d_init+0x50>)
    4f3a:	4798      	blx	r3
    4f3c:	4623      	mov	r3, r4
    4f3e:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    4f42:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4f44:	4a0c      	ldr	r2, [pc, #48]	; (4f78 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    4f46:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4f48:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    4f4a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    4f4c:	61da      	str	r2, [r3, #28]
    4f4e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4f50:	4283      	cmp	r3, r0
    4f52:	d1f8      	bne.n	4f46 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    4f54:	4909      	ldr	r1, [pc, #36]	; (4f7c <usb_d_init+0x58>)
    4f56:	2000      	movs	r0, #0
    4f58:	4c09      	ldr	r4, [pc, #36]	; (4f80 <usb_d_init+0x5c>)
    4f5a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    4f5c:	4909      	ldr	r1, [pc, #36]	; (4f84 <usb_d_init+0x60>)
    4f5e:	2001      	movs	r0, #1
    4f60:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    4f62:	4909      	ldr	r1, [pc, #36]	; (4f88 <usb_d_init+0x64>)
    4f64:	2002      	movs	r0, #2
    4f66:	47a0      	blx	r4
	return ERR_NONE;
    4f68:	2000      	movs	r0, #0
}
    4f6a:	bd10      	pop	{r4, pc}
    4f6c:	000080ed 	.word	0x000080ed
    4f70:	2000065c 	.word	0x2000065c
    4f74:	0000b1fb 	.word	0x0000b1fb
    4f78:	00004d15 	.word	0x00004d15
    4f7c:	00004e9d 	.word	0x00004e9d
    4f80:	00008ac5 	.word	0x00008ac5
    4f84:	00004d19 	.word	0x00004d19
    4f88:	00004d4d 	.word	0x00004d4d

00004f8c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    4f8c:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    4f8e:	4b01      	ldr	r3, [pc, #4]	; (4f94 <usb_d_register_callback+0x8>)
    4f90:	4798      	blx	r3
    4f92:	bd08      	pop	{r3, pc}
    4f94:	00008a9d 	.word	0x00008a9d

00004f98 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    4f98:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    4f9a:	4b01      	ldr	r3, [pc, #4]	; (4fa0 <usb_d_enable+0x8>)
    4f9c:	4798      	blx	r3
}
    4f9e:	bd08      	pop	{r3, pc}
    4fa0:	000081f5 	.word	0x000081f5

00004fa4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    4fa4:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    4fa6:	4b01      	ldr	r3, [pc, #4]	; (4fac <usb_d_attach+0x8>)
    4fa8:	4798      	blx	r3
    4faa:	bd08      	pop	{r3, pc}
    4fac:	00008261 	.word	0x00008261

00004fb0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    4fb0:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    4fb2:	4b01      	ldr	r3, [pc, #4]	; (4fb8 <usb_d_set_address+0x8>)
    4fb4:	4798      	blx	r3
    4fb6:	bd08      	pop	{r3, pc}
    4fb8:	00008273 	.word	0x00008273

00004fbc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    4fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fbe:	4606      	mov	r6, r0
    4fc0:	460c      	mov	r4, r1
    4fc2:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    4fc4:	4b0f      	ldr	r3, [pc, #60]	; (5004 <usb_d_ep_init+0x48>)
    4fc6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    4fc8:	2800      	cmp	r0, #0
    4fca:	da14      	bge.n	4ff6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    4fcc:	20ff      	movs	r0, #255	; 0xff
    4fce:	4b0d      	ldr	r3, [pc, #52]	; (5004 <usb_d_ep_init+0x48>)
    4fd0:	4798      	blx	r3
		if (ep_index < 0) {
    4fd2:	1e05      	subs	r5, r0, #0
    4fd4:	db12      	blt.n	4ffc <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    4fd6:	463a      	mov	r2, r7
    4fd8:	4621      	mov	r1, r4
    4fda:	4630      	mov	r0, r6
    4fdc:	4b0a      	ldr	r3, [pc, #40]	; (5008 <usb_d_ep_init+0x4c>)
    4fde:	4798      	blx	r3
	if (rc < 0) {
    4fe0:	2800      	cmp	r0, #0
    4fe2:	db0d      	blt.n	5000 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    4fe4:	4b09      	ldr	r3, [pc, #36]	; (500c <usb_d_ep_init+0x50>)
    4fe6:	0168      	lsls	r0, r5, #5
    4fe8:	181a      	adds	r2, r3, r0
    4fea:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    4fec:	f004 0403 	and.w	r4, r4, #3
    4ff0:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    4ff2:	2000      	movs	r0, #0
    4ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    4ff6:	f06f 0013 	mvn.w	r0, #19
    4ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    4ffc:	f06f 0014 	mvn.w	r0, #20
}
    5000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5002:	bf00      	nop
    5004:	00004cd1 	.word	0x00004cd1
    5008:	00008281 	.word	0x00008281
    500c:	2000065c 	.word	0x2000065c

00005010 <usb_d_ep0_init>:
{
    5010:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5012:	4602      	mov	r2, r0
    5014:	2100      	movs	r1, #0
    5016:	4608      	mov	r0, r1
    5018:	4b01      	ldr	r3, [pc, #4]	; (5020 <usb_d_ep0_init+0x10>)
    501a:	4798      	blx	r3
}
    501c:	bd08      	pop	{r3, pc}
    501e:	bf00      	nop
    5020:	00004fbd 	.word	0x00004fbd

00005024 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5024:	b538      	push	{r3, r4, r5, lr}
    5026:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5028:	4b06      	ldr	r3, [pc, #24]	; (5044 <usb_d_ep_deinit+0x20>)
    502a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    502c:	1e04      	subs	r4, r0, #0
    502e:	db07      	blt.n	5040 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5030:	4628      	mov	r0, r5
    5032:	4b05      	ldr	r3, [pc, #20]	; (5048 <usb_d_ep_deinit+0x24>)
    5034:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5036:	4805      	ldr	r0, [pc, #20]	; (504c <usb_d_ep_deinit+0x28>)
    5038:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    503c:	23ff      	movs	r3, #255	; 0xff
    503e:	7043      	strb	r3, [r0, #1]
    5040:	bd38      	pop	{r3, r4, r5, pc}
    5042:	bf00      	nop
    5044:	00004cd1 	.word	0x00004cd1
    5048:	00008399 	.word	0x00008399
    504c:	2000065c 	.word	0x2000065c

00005050 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5050:	b538      	push	{r3, r4, r5, lr}
    5052:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5054:	4b0e      	ldr	r3, [pc, #56]	; (5090 <usb_d_ep_enable+0x40>)
    5056:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5058:	1e04      	subs	r4, r0, #0
    505a:	db16      	blt.n	508a <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    505c:	0163      	lsls	r3, r4, #5
    505e:	4a0d      	ldr	r2, [pc, #52]	; (5094 <usb_d_ep_enable+0x44>)
    5060:	5cd3      	ldrb	r3, [r2, r3]
    5062:	2b00      	cmp	r3, #0
    5064:	bf0c      	ite	eq
    5066:	2202      	moveq	r2, #2
    5068:	2201      	movne	r2, #1
    506a:	4b0a      	ldr	r3, [pc, #40]	; (5094 <usb_d_ep_enable+0x44>)
    506c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5070:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5072:	4628      	mov	r0, r5
    5074:	4b08      	ldr	r3, [pc, #32]	; (5098 <usb_d_ep_enable+0x48>)
    5076:	4798      	blx	r3
	if (rc < 0) {
    5078:	2800      	cmp	r0, #0
    507a:	db00      	blt.n	507e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    507c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    507e:	4b05      	ldr	r3, [pc, #20]	; (5094 <usb_d_ep_enable+0x44>)
    5080:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    5084:	2300      	movs	r3, #0
    5086:	70a3      	strb	r3, [r4, #2]
    5088:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    508a:	f06f 0011 	mvn.w	r0, #17
    508e:	e7f5      	b.n	507c <usb_d_ep_enable+0x2c>
    5090:	00004cd1 	.word	0x00004cd1
    5094:	2000065c 	.word	0x2000065c
    5098:	0000845d 	.word	0x0000845d

0000509c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    509c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50a0:	b086      	sub	sp, #24
    50a2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    50a4:	7a07      	ldrb	r7, [r0, #8]
    50a6:	4638      	mov	r0, r7
    50a8:	4b3f      	ldr	r3, [pc, #252]	; (51a8 <usb_d_ep_transfer+0x10c>)
    50aa:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    50ac:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    50ae:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    50b2:	1e06      	subs	r6, r0, #0
    50b4:	db72      	blt.n	519c <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    50b6:	a804      	add	r0, sp, #16
    50b8:	4b3c      	ldr	r3, [pc, #240]	; (51ac <usb_d_ep_transfer+0x110>)
    50ba:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    50bc:	4b3c      	ldr	r3, [pc, #240]	; (51b0 <usb_d_ep_transfer+0x114>)
    50be:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    50c2:	789b      	ldrb	r3, [r3, #2]
    50c4:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    50c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    50cc:	b2db      	uxtb	r3, r3
    50ce:	2b01      	cmp	r3, #1
    50d0:	d011      	beq.n	50f6 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    50d2:	a804      	add	r0, sp, #16
    50d4:	4b37      	ldr	r3, [pc, #220]	; (51b4 <usb_d_ep_transfer+0x118>)
    50d6:	4798      	blx	r3
		switch (state) {
    50d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    50dc:	b2db      	uxtb	r3, r3
    50de:	2b05      	cmp	r3, #5
    50e0:	d05f      	beq.n	51a2 <usb_d_ep_transfer+0x106>
    50e2:	2b06      	cmp	r3, #6
    50e4:	d023      	beq.n	512e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    50e6:	2b00      	cmp	r3, #0
    50e8:	bf0c      	ite	eq
    50ea:	f06f 0012 	mvneq.w	r0, #18
    50ee:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    50f0:	b006      	add	sp, #24
    50f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    50f6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 51b0 <usb_d_ep_transfer+0x114>
    50fa:	ea4f 1946 	mov.w	r9, r6, lsl #5
    50fe:	eb0a 0309 	add.w	r3, sl, r9
    5102:	2203      	movs	r2, #3
    5104:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    5106:	a804      	add	r0, sp, #16
    5108:	4b2a      	ldr	r3, [pc, #168]	; (51b4 <usb_d_ep_transfer+0x118>)
    510a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    510c:	f81a 3009 	ldrb.w	r3, [sl, r9]
    5110:	b183      	cbz	r3, 5134 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5112:	7a22      	ldrb	r2, [r4, #8]
    5114:	3500      	adds	r5, #0
    5116:	bf18      	it	ne
    5118:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    511a:	6823      	ldr	r3, [r4, #0]
    511c:	9301      	str	r3, [sp, #4]
    511e:	f8cd 8008 	str.w	r8, [sp, #8]
    5122:	f017 0f80 	tst.w	r7, #128	; 0x80
    5126:	d119      	bne.n	515c <usb_d_ep_transfer+0xc0>
    5128:	f002 030f 	and.w	r3, r2, #15
    512c:	e018      	b.n	5160 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    512e:	f06f 000f 	mvn.w	r0, #15
    5132:	e7dd      	b.n	50f0 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5134:	4b1e      	ldr	r3, [pc, #120]	; (51b0 <usb_d_ep_transfer+0x114>)
    5136:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    513a:	7cda      	ldrb	r2, [r3, #19]
    513c:	7c9d      	ldrb	r5, [r3, #18]
    513e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    5142:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    5144:	b9a5      	cbnz	r5, 5170 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5146:	4b1a      	ldr	r3, [pc, #104]	; (51b0 <usb_d_ep_transfer+0x114>)
    5148:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    514c:	2304      	movs	r3, #4
    514e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5150:	2300      	movs	r3, #0
			zlp                 = true;
    5152:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5154:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5156:	6821      	ldr	r1, [r4, #0]
    5158:	9101      	str	r1, [sp, #4]
    515a:	9302      	str	r3, [sp, #8]
    515c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5160:	f88d 300c 	strb.w	r3, [sp, #12]
    5164:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5168:	a801      	add	r0, sp, #4
    516a:	4b13      	ldr	r3, [pc, #76]	; (51b8 <usb_d_ep_transfer+0x11c>)
    516c:	4798      	blx	r3
	return rc;
    516e:	e7bf      	b.n	50f0 <usb_d_ep_transfer+0x54>
    5170:	4643      	mov	r3, r8
    5172:	45a8      	cmp	r8, r5
    5174:	bf28      	it	cs
    5176:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5178:	4a0d      	ldr	r2, [pc, #52]	; (51b0 <usb_d_ep_transfer+0x114>)
    517a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    517e:	f996 200c 	ldrsb.w	r2, [r6, #12]
    5182:	2a00      	cmp	r2, #0
    5184:	db05      	blt.n	5192 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5186:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5188:	6821      	ldr	r1, [r4, #0]
    518a:	9101      	str	r1, [sp, #4]
    518c:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    518e:	2500      	movs	r5, #0
    5190:	e7ca      	b.n	5128 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    5192:	429d      	cmp	r5, r3
    5194:	bf94      	ite	ls
    5196:	2500      	movls	r5, #0
    5198:	2501      	movhi	r5, #1
    519a:	e7db      	b.n	5154 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    519c:	f06f 0011 	mvn.w	r0, #17
    51a0:	e7a6      	b.n	50f0 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    51a2:	2002      	movs	r0, #2
    51a4:	e7a4      	b.n	50f0 <usb_d_ep_transfer+0x54>
    51a6:	bf00      	nop
    51a8:	00004cd1 	.word	0x00004cd1
    51ac:	000040c9 	.word	0x000040c9
    51b0:	2000065c 	.word	0x2000065c
    51b4:	000040d7 	.word	0x000040d7
    51b8:	000088bd 	.word	0x000088bd

000051bc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    51bc:	b538      	push	{r3, r4, r5, lr}
    51be:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    51c0:	b141      	cbz	r1, 51d4 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    51c2:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    51c4:	bf0c      	ite	eq
    51c6:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    51c8:	2102      	movne	r1, #2
    51ca:	4b13      	ldr	r3, [pc, #76]	; (5218 <usb_d_ep_halt+0x5c>)
    51cc:	4798      	blx	r3
    51ce:	4603      	mov	r3, r0
	}
}
    51d0:	4618      	mov	r0, r3
    51d2:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    51d4:	4b11      	ldr	r3, [pc, #68]	; (521c <usb_d_ep_halt+0x60>)
    51d6:	4798      	blx	r3
	if (ep_index < 0) {
    51d8:	1e05      	subs	r5, r0, #0
    51da:	db19      	blt.n	5210 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    51dc:	2102      	movs	r1, #2
    51de:	4620      	mov	r0, r4
    51e0:	4b0d      	ldr	r3, [pc, #52]	; (5218 <usb_d_ep_halt+0x5c>)
    51e2:	4798      	blx	r3
    51e4:	4603      	mov	r3, r0
    51e6:	2800      	cmp	r0, #0
    51e8:	d0f2      	beq.n	51d0 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    51ea:	2100      	movs	r1, #0
    51ec:	4620      	mov	r0, r4
    51ee:	4b0a      	ldr	r3, [pc, #40]	; (5218 <usb_d_ep_halt+0x5c>)
    51f0:	4798      	blx	r3
		if (rc < 0) {
    51f2:	1e03      	subs	r3, r0, #0
    51f4:	dbec      	blt.n	51d0 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    51f6:	4b0a      	ldr	r3, [pc, #40]	; (5220 <usb_d_ep_halt+0x64>)
    51f8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    51fc:	2201      	movs	r2, #1
    51fe:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    5200:	2103      	movs	r1, #3
    5202:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5204:	69db      	ldr	r3, [r3, #28]
    5206:	2200      	movs	r2, #0
    5208:	4620      	mov	r0, r4
    520a:	4798      	blx	r3
	return ERR_NONE;
    520c:	2300      	movs	r3, #0
    520e:	e7df      	b.n	51d0 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    5210:	f06f 0311 	mvn.w	r3, #17
    5214:	e7dc      	b.n	51d0 <usb_d_ep_halt+0x14>
    5216:	bf00      	nop
    5218:	00008715 	.word	0x00008715
    521c:	00004cd1 	.word	0x00004cd1
    5220:	2000065c 	.word	0x2000065c

00005224 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    5224:	b538      	push	{r3, r4, r5, lr}
    5226:	460d      	mov	r5, r1
    5228:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    522a:	4b0e      	ldr	r3, [pc, #56]	; (5264 <usb_d_ep_register_callback+0x40>)
    522c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    522e:	4b0e      	ldr	r3, [pc, #56]	; (5268 <usb_d_ep_register_callback+0x44>)
    5230:	2c00      	cmp	r4, #0
    5232:	bf08      	it	eq
    5234:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    5236:	2800      	cmp	r0, #0
    5238:	db13      	blt.n	5262 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    523a:	2d01      	cmp	r5, #1
    523c:	d008      	beq.n	5250 <usb_d_ep_register_callback+0x2c>
    523e:	b115      	cbz	r5, 5246 <usb_d_ep_register_callback+0x22>
    5240:	2d02      	cmp	r5, #2
    5242:	d00a      	beq.n	525a <usb_d_ep_register_callback+0x36>
    5244:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5246:	4b09      	ldr	r3, [pc, #36]	; (526c <usb_d_ep_register_callback+0x48>)
    5248:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    524c:	6144      	str	r4, [r0, #20]
		break;
    524e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5250:	4b06      	ldr	r3, [pc, #24]	; (526c <usb_d_ep_register_callback+0x48>)
    5252:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5256:	6184      	str	r4, [r0, #24]
		break;
    5258:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    525a:	4b04      	ldr	r3, [pc, #16]	; (526c <usb_d_ep_register_callback+0x48>)
    525c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5260:	61c4      	str	r4, [r0, #28]
    5262:	bd38      	pop	{r3, r4, r5, pc}
    5264:	00004cd1 	.word	0x00004cd1
    5268:	00004d15 	.word	0x00004d15
    526c:	2000065c 	.word	0x2000065c

00005270 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5270:	b900      	cbnz	r0, 5274 <assert+0x4>
		__asm("BKPT #0");
    5272:	be00      	bkpt	0x0000
    5274:	4770      	bx	lr

00005276 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5276:	6803      	ldr	r3, [r0, #0]
    5278:	b14b      	cbz	r3, 528e <is_list_element+0x18>
		if (it == element) {
    527a:	428b      	cmp	r3, r1
    527c:	d009      	beq.n	5292 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    527e:	681b      	ldr	r3, [r3, #0]
    5280:	b11b      	cbz	r3, 528a <is_list_element+0x14>
		if (it == element) {
    5282:	4299      	cmp	r1, r3
    5284:	d1fb      	bne.n	527e <is_list_element+0x8>
			return true;
    5286:	2001      	movs	r0, #1
		}
	}

	return false;
}
    5288:	4770      	bx	lr
	return false;
    528a:	2000      	movs	r0, #0
    528c:	4770      	bx	lr
    528e:	2000      	movs	r0, #0
    5290:	4770      	bx	lr
			return true;
    5292:	2001      	movs	r0, #1
    5294:	4770      	bx	lr
	...

00005298 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5298:	b538      	push	{r3, r4, r5, lr}
    529a:	4604      	mov	r4, r0
    529c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    529e:	4b06      	ldr	r3, [pc, #24]	; (52b8 <list_insert_as_head+0x20>)
    52a0:	4798      	blx	r3
    52a2:	f080 0001 	eor.w	r0, r0, #1
    52a6:	2239      	movs	r2, #57	; 0x39
    52a8:	4904      	ldr	r1, [pc, #16]	; (52bc <list_insert_as_head+0x24>)
    52aa:	b2c0      	uxtb	r0, r0
    52ac:	4b04      	ldr	r3, [pc, #16]	; (52c0 <list_insert_as_head+0x28>)
    52ae:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    52b0:	6823      	ldr	r3, [r4, #0]
    52b2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    52b4:	6025      	str	r5, [r4, #0]
    52b6:	bd38      	pop	{r3, r4, r5, pc}
    52b8:	00005277 	.word	0x00005277
    52bc:	0000bd90 	.word	0x0000bd90
    52c0:	00005271 	.word	0x00005271

000052c4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    52c4:	6803      	ldr	r3, [r0, #0]
    52c6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    52c8:	6001      	str	r1, [r0, #0]
    52ca:	4770      	bx	lr

000052cc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    52cc:	b570      	push	{r4, r5, r6, lr}
    52ce:	4605      	mov	r5, r0
    52d0:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    52d2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    52d4:	4b0a      	ldr	r3, [pc, #40]	; (5300 <list_insert_at_end+0x34>)
    52d6:	4798      	blx	r3
    52d8:	f080 0001 	eor.w	r0, r0, #1
    52dc:	224f      	movs	r2, #79	; 0x4f
    52de:	4909      	ldr	r1, [pc, #36]	; (5304 <list_insert_at_end+0x38>)
    52e0:	b2c0      	uxtb	r0, r0
    52e2:	4b09      	ldr	r3, [pc, #36]	; (5308 <list_insert_at_end+0x3c>)
    52e4:	4798      	blx	r3

	if (!list->head) {
    52e6:	682b      	ldr	r3, [r5, #0]
    52e8:	b91b      	cbnz	r3, 52f2 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    52ea:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    52ec:	6033      	str	r3, [r6, #0]
		return;
    52ee:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    52f0:	461c      	mov	r4, r3
	while (it->next) {
    52f2:	6823      	ldr	r3, [r4, #0]
    52f4:	2b00      	cmp	r3, #0
    52f6:	d1fb      	bne.n	52f0 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    52f8:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    52fa:	6033      	str	r3, [r6, #0]
    52fc:	bd70      	pop	{r4, r5, r6, pc}
    52fe:	bf00      	nop
    5300:	00005277 	.word	0x00005277
    5304:	0000bd90 	.word	0x0000bd90
    5308:	00005271 	.word	0x00005271

0000530c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    530c:	6803      	ldr	r3, [r0, #0]
    530e:	b10b      	cbz	r3, 5314 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    5310:	681a      	ldr	r2, [r3, #0]
    5312:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    5314:	4618      	mov	r0, r3
    5316:	4770      	bx	lr

00005318 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    5318:	b570      	push	{r4, r5, r6, lr}
    531a:	460e      	mov	r6, r1
    531c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    531e:	4604      	mov	r4, r0
    5320:	b178      	cbz	r0, 5342 <ringbuffer_init+0x2a>
    5322:	b181      	cbz	r1, 5346 <ringbuffer_init+0x2e>
    5324:	b1a2      	cbz	r2, 5350 <ringbuffer_init+0x38>
    5326:	2001      	movs	r0, #1
    5328:	2228      	movs	r2, #40	; 0x28
    532a:	490d      	ldr	r1, [pc, #52]	; (5360 <ringbuffer_init+0x48>)
    532c:	4b0d      	ldr	r3, [pc, #52]	; (5364 <ringbuffer_init+0x4c>)
    532e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    5330:	1e6b      	subs	r3, r5, #1
    5332:	421d      	tst	r5, r3
    5334:	d109      	bne.n	534a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    5336:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    5338:	2000      	movs	r0, #0
    533a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    533c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    533e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    5340:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5342:	2000      	movs	r0, #0
    5344:	e7f0      	b.n	5328 <ringbuffer_init+0x10>
    5346:	2000      	movs	r0, #0
    5348:	e7ee      	b.n	5328 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    534a:	f06f 000c 	mvn.w	r0, #12
    534e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5350:	2228      	movs	r2, #40	; 0x28
    5352:	4903      	ldr	r1, [pc, #12]	; (5360 <ringbuffer_init+0x48>)
    5354:	2000      	movs	r0, #0
    5356:	4b03      	ldr	r3, [pc, #12]	; (5364 <ringbuffer_init+0x4c>)
    5358:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    535a:	1e6b      	subs	r3, r5, #1
    535c:	e7eb      	b.n	5336 <ringbuffer_init+0x1e>
    535e:	bf00      	nop
    5360:	0000bdb0 	.word	0x0000bdb0
    5364:	00005271 	.word	0x00005271

00005368 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    5368:	b538      	push	{r3, r4, r5, lr}
    536a:	460d      	mov	r5, r1
	ASSERT(rb && data);
    536c:	4604      	mov	r4, r0
    536e:	b1a0      	cbz	r0, 539a <ringbuffer_get+0x32>
    5370:	1c08      	adds	r0, r1, #0
    5372:	bf18      	it	ne
    5374:	2001      	movne	r0, #1
    5376:	2240      	movs	r2, #64	; 0x40
    5378:	490a      	ldr	r1, [pc, #40]	; (53a4 <ringbuffer_get+0x3c>)
    537a:	4b0b      	ldr	r3, [pc, #44]	; (53a8 <ringbuffer_get+0x40>)
    537c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    537e:	68a3      	ldr	r3, [r4, #8]
    5380:	68e2      	ldr	r2, [r4, #12]
    5382:	429a      	cmp	r2, r3
    5384:	d00b      	beq.n	539e <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    5386:	6862      	ldr	r2, [r4, #4]
    5388:	4013      	ands	r3, r2
    538a:	6822      	ldr	r2, [r4, #0]
    538c:	5cd3      	ldrb	r3, [r2, r3]
    538e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5390:	68a3      	ldr	r3, [r4, #8]
    5392:	3301      	adds	r3, #1
    5394:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    5396:	2000      	movs	r0, #0
    5398:	bd38      	pop	{r3, r4, r5, pc}
    539a:	2000      	movs	r0, #0
    539c:	e7eb      	b.n	5376 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    539e:	f06f 0009 	mvn.w	r0, #9
}
    53a2:	bd38      	pop	{r3, r4, r5, pc}
    53a4:	0000bdb0 	.word	0x0000bdb0
    53a8:	00005271 	.word	0x00005271

000053ac <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    53ac:	b538      	push	{r3, r4, r5, lr}
    53ae:	460d      	mov	r5, r1
	ASSERT(rb);
    53b0:	4604      	mov	r4, r0
    53b2:	2251      	movs	r2, #81	; 0x51
    53b4:	490b      	ldr	r1, [pc, #44]	; (53e4 <ringbuffer_put+0x38>)
    53b6:	3000      	adds	r0, #0
    53b8:	bf18      	it	ne
    53ba:	2001      	movne	r0, #1
    53bc:	4b0a      	ldr	r3, [pc, #40]	; (53e8 <ringbuffer_put+0x3c>)
    53be:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    53c0:	68e3      	ldr	r3, [r4, #12]
    53c2:	6862      	ldr	r2, [r4, #4]
    53c4:	4013      	ands	r3, r2
    53c6:	6822      	ldr	r2, [r4, #0]
    53c8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    53ca:	68e3      	ldr	r3, [r4, #12]
    53cc:	6861      	ldr	r1, [r4, #4]
    53ce:	68a2      	ldr	r2, [r4, #8]
    53d0:	1a9a      	subs	r2, r3, r2
    53d2:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    53d4:	bf84      	itt	hi
    53d6:	1a59      	subhi	r1, r3, r1
    53d8:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    53da:	3301      	adds	r3, #1
    53dc:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    53de:	2000      	movs	r0, #0
    53e0:	bd38      	pop	{r3, r4, r5, pc}
    53e2:	bf00      	nop
    53e4:	0000bdb0 	.word	0x0000bdb0
    53e8:	00005271 	.word	0x00005271

000053ec <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    53ec:	b510      	push	{r4, lr}
	ASSERT(rb);
    53ee:	4604      	mov	r4, r0
    53f0:	2267      	movs	r2, #103	; 0x67
    53f2:	4905      	ldr	r1, [pc, #20]	; (5408 <ringbuffer_num+0x1c>)
    53f4:	3000      	adds	r0, #0
    53f6:	bf18      	it	ne
    53f8:	2001      	movne	r0, #1
    53fa:	4b04      	ldr	r3, [pc, #16]	; (540c <ringbuffer_num+0x20>)
    53fc:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    53fe:	68e0      	ldr	r0, [r4, #12]
    5400:	68a3      	ldr	r3, [r4, #8]
}
    5402:	1ac0      	subs	r0, r0, r3
    5404:	bd10      	pop	{r4, pc}
    5406:	bf00      	nop
    5408:	0000bdb0 	.word	0x0000bdb0
    540c:	00005271 	.word	0x00005271

00005410 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    5410:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    5412:	4a06      	ldr	r2, [pc, #24]	; (542c <_sbrk+0x1c>)
    5414:	6812      	ldr	r2, [r2, #0]
    5416:	b122      	cbz	r2, 5422 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5418:	4a04      	ldr	r2, [pc, #16]	; (542c <_sbrk+0x1c>)
    541a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    541c:	4403      	add	r3, r0
    541e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    5420:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5422:	4903      	ldr	r1, [pc, #12]	; (5430 <_sbrk+0x20>)
    5424:	4a01      	ldr	r2, [pc, #4]	; (542c <_sbrk+0x1c>)
    5426:	6011      	str	r1, [r2, #0]
    5428:	e7f6      	b.n	5418 <_sbrk+0x8>
    542a:	bf00      	nop
    542c:	200007fc 	.word	0x200007fc
    5430:	20012c90 	.word	0x20012c90

00005434 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5434:	6940      	ldr	r0, [r0, #20]
    5436:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    543a:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    543e:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    5440:	0040      	lsls	r0, r0, #1
    5442:	3076      	adds	r0, #118	; 0x76
}
    5444:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    5448:	4770      	bx	lr
	...

0000544c <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    544c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    544e:	f013 0f01 	tst.w	r3, #1
    5452:	d11b      	bne.n	548c <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5454:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5456:	f013 0f03 	tst.w	r3, #3
    545a:	d1fb      	bne.n	5454 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    545c:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    545e:	f013 0f02 	tst.w	r3, #2
    5462:	d00d      	beq.n	5480 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    5464:	8803      	ldrh	r3, [r0, #0]
    5466:	f023 0302 	bic.w	r3, r3, #2
    546a:	041b      	lsls	r3, r3, #16
    546c:	0c1b      	lsrs	r3, r3, #16
    546e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5470:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5472:	f013 0f03 	tst.w	r3, #3
    5476:	d1fb      	bne.n	5470 <_adc_init+0x24>
    5478:	6b03      	ldr	r3, [r0, #48]	; 0x30
    547a:	f013 0f02 	tst.w	r3, #2
    547e:	d1fb      	bne.n	5478 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    5480:	2301      	movs	r3, #1
    5482:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5484:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5486:	f013 0f03 	tst.w	r3, #3
    548a:	d1fb      	bne.n	5484 <_adc_init+0x38>
    548c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    548e:	f013 0f01 	tst.w	r3, #1
    5492:	d1fb      	bne.n	548c <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    5494:	2316      	movs	r3, #22
    5496:	4a37      	ldr	r2, [pc, #220]	; (5574 <_adc_init+0x128>)
    5498:	fb03 2301 	mla	r3, r3, r1, r2
    549c:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    549e:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54a6:	2b00      	cmp	r3, #0
    54a8:	d1fa      	bne.n	54a0 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    54aa:	2316      	movs	r3, #22
    54ac:	4a31      	ldr	r2, [pc, #196]	; (5574 <_adc_init+0x128>)
    54ae:	fb03 2301 	mla	r3, r3, r1, r2
    54b2:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    54b4:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54bc:	2b00      	cmp	r3, #0
    54be:	d1fa      	bne.n	54b6 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    54c0:	2316      	movs	r3, #22
    54c2:	4a2c      	ldr	r2, [pc, #176]	; (5574 <_adc_init+0x128>)
    54c4:	fb03 2301 	mla	r3, r3, r1, r2
    54c8:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    54ca:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    54cc:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    54ce:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54d6:	2b00      	cmp	r3, #0
    54d8:	d1fa      	bne.n	54d0 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    54da:	2316      	movs	r3, #22
    54dc:	4a25      	ldr	r2, [pc, #148]	; (5574 <_adc_init+0x128>)
    54de:	fb03 2301 	mla	r3, r3, r1, r2
    54e2:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    54e4:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    54ec:	2b00      	cmp	r3, #0
    54ee:	d1fa      	bne.n	54e6 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    54f0:	2316      	movs	r3, #22
    54f2:	4a20      	ldr	r2, [pc, #128]	; (5574 <_adc_init+0x128>)
    54f4:	fb03 2301 	mla	r3, r3, r1, r2
    54f8:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    54fa:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    54fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    54fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5502:	2b00      	cmp	r3, #0
    5504:	d1fa      	bne.n	54fc <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    5506:	2316      	movs	r3, #22
    5508:	4a1a      	ldr	r2, [pc, #104]	; (5574 <_adc_init+0x128>)
    550a:	fb03 2301 	mla	r3, r3, r1, r2
    550e:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    5510:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5512:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5514:	f013 0f80 	tst.w	r3, #128	; 0x80
    5518:	d1fb      	bne.n	5512 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    551a:	2316      	movs	r3, #22
    551c:	4a15      	ldr	r2, [pc, #84]	; (5574 <_adc_init+0x128>)
    551e:	fb03 2301 	mla	r3, r3, r1, r2
    5522:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    5524:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5526:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5528:	f413 7f80 	tst.w	r3, #256	; 0x100
    552c:	d1fb      	bne.n	5526 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    552e:	2316      	movs	r3, #22
    5530:	4a10      	ldr	r2, [pc, #64]	; (5574 <_adc_init+0x128>)
    5532:	fb03 2301 	mla	r3, r3, r1, r2
    5536:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    5538:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    553a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    553c:	f413 7f00 	tst.w	r3, #512	; 0x200
    5540:	d1fb      	bne.n	553a <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    5542:	2316      	movs	r3, #22
    5544:	4a0b      	ldr	r2, [pc, #44]	; (5574 <_adc_init+0x128>)
    5546:	fb03 2301 	mla	r3, r3, r1, r2
    554a:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    554c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    554e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5550:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5554:	d1fb      	bne.n	554e <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    5556:	2216      	movs	r2, #22
    5558:	4b06      	ldr	r3, [pc, #24]	; (5574 <_adc_init+0x128>)
    555a:	fb02 3101 	mla	r1, r2, r1, r3
    555e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    5560:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    5562:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    5564:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5566:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5568:	f013 0f03 	tst.w	r3, #3
    556c:	d1fb      	bne.n	5566 <_adc_init+0x11a>

	return ERR_NONE;
}
    556e:	2000      	movs	r0, #0
    5570:	4770      	bx	lr
    5572:	bf00      	nop
    5574:	0000bdd4 	.word	0x0000bdd4

00005578 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    5578:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    557a:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    557c:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    5580:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    5584:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    5586:	f013 0f01 	tst.w	r3, #1
    558a:	d106      	bne.n	559a <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    558c:	f013 0f02 	tst.w	r3, #2
    5590:	d10d      	bne.n	55ae <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    5592:	f013 0f04 	tst.w	r3, #4
    5596:	d111      	bne.n	55bc <_adc_interrupt_handler+0x44>
    5598:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    559a:	2301      	movs	r3, #1
    559c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    55a0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    55a4:	6883      	ldr	r3, [r0, #8]
    55a6:	b292      	uxth	r2, r2
    55a8:	2100      	movs	r1, #0
    55aa:	4798      	blx	r3
    55ac:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    55ae:	2302      	movs	r3, #2
    55b0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    55b4:	6843      	ldr	r3, [r0, #4]
    55b6:	2100      	movs	r1, #0
    55b8:	4798      	blx	r3
    55ba:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    55bc:	2304      	movs	r3, #4
    55be:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    55c2:	6803      	ldr	r3, [r0, #0]
    55c4:	2100      	movs	r1, #0
    55c6:	4798      	blx	r3
	}
}
    55c8:	e7e6      	b.n	5598 <_adc_interrupt_handler+0x20>
	...

000055cc <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    55cc:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    55d0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    55d4:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    55d8:	b148      	cbz	r0, 55ee <_adc_get_regs+0x22>
    55da:	2801      	cmp	r0, #1
    55dc:	d009      	beq.n	55f2 <_adc_get_regs+0x26>
{
    55de:	b508      	push	{r3, lr}
	ASSERT(false);
    55e0:	228c      	movs	r2, #140	; 0x8c
    55e2:	4905      	ldr	r1, [pc, #20]	; (55f8 <_adc_get_regs+0x2c>)
    55e4:	2000      	movs	r0, #0
    55e6:	4b05      	ldr	r3, [pc, #20]	; (55fc <_adc_get_regs+0x30>)
    55e8:	4798      	blx	r3
	return 0;
    55ea:	2000      	movs	r0, #0
    55ec:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    55ee:	2000      	movs	r0, #0
    55f0:	4770      	bx	lr
    55f2:	2001      	movs	r0, #1
    55f4:	4770      	bx	lr
    55f6:	bf00      	nop
    55f8:	0000be00 	.word	0x0000be00
    55fc:	00005271 	.word	0x00005271

00005600 <_adc_async_init>:
{
    5600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5604:	460c      	mov	r4, r1
	ASSERT(device);
    5606:	4605      	mov	r5, r0
    5608:	22e6      	movs	r2, #230	; 0xe6
    560a:	493b      	ldr	r1, [pc, #236]	; (56f8 <_adc_async_init+0xf8>)
    560c:	3000      	adds	r0, #0
    560e:	bf18      	it	ne
    5610:	2001      	movne	r0, #1
    5612:	4b3a      	ldr	r3, [pc, #232]	; (56fc <_adc_async_init+0xfc>)
    5614:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    5616:	4620      	mov	r0, r4
    5618:	4b39      	ldr	r3, [pc, #228]	; (5700 <_adc_async_init+0x100>)
    561a:	4798      	blx	r3
    561c:	4601      	mov	r1, r0
    561e:	4620      	mov	r0, r4
    5620:	4b38      	ldr	r3, [pc, #224]	; (5704 <_adc_async_init+0x104>)
    5622:	4798      	blx	r3
	if (init_status) {
    5624:	4606      	mov	r6, r0
    5626:	b110      	cbz	r0, 562e <_adc_async_init+0x2e>
}
    5628:	4630      	mov	r0, r6
    562a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    562e:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    5630:	4b35      	ldr	r3, [pc, #212]	; (5708 <_adc_async_init+0x108>)
    5632:	429c      	cmp	r4, r3
    5634:	d05c      	beq.n	56f0 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    5636:	4b35      	ldr	r3, [pc, #212]	; (570c <_adc_async_init+0x10c>)
    5638:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    563a:	bf04      	itt	eq
    563c:	4b34      	ldreq	r3, [pc, #208]	; (5710 <_adc_async_init+0x110>)
    563e:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    5640:	4628      	mov	r0, r5
    5642:	4f34      	ldr	r7, [pc, #208]	; (5714 <_adc_async_init+0x114>)
    5644:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5646:	0943      	lsrs	r3, r0, #5
    5648:	f000 001f 	and.w	r0, r0, #31
    564c:	2401      	movs	r4, #1
    564e:	fa04 f000 	lsl.w	r0, r4, r0
    5652:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5718 <_adc_async_init+0x118>
    5656:	3320      	adds	r3, #32
    5658:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    565c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5660:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    5664:	4628      	mov	r0, r5
    5666:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5668:	0943      	lsrs	r3, r0, #5
    566a:	f000 001f 	and.w	r0, r0, #31
    566e:	fa04 f000 	lsl.w	r0, r4, r0
    5672:	3360      	adds	r3, #96	; 0x60
    5674:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    5678:	4628      	mov	r0, r5
    567a:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    567c:	0943      	lsrs	r3, r0, #5
    567e:	f000 001f 	and.w	r0, r0, #31
    5682:	4084      	lsls	r4, r0
    5684:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    5688:	4628      	mov	r0, r5
    568a:	47b8      	blx	r7
    568c:	3001      	adds	r0, #1
    568e:	b280      	uxth	r0, r0
    5690:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5692:	2b00      	cmp	r3, #0
    5694:	dbc8      	blt.n	5628 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5696:	095b      	lsrs	r3, r3, #5
    5698:	f000 001f 	and.w	r0, r0, #31
    569c:	2201      	movs	r2, #1
    569e:	fa02 f000 	lsl.w	r0, r2, r0
    56a2:	3320      	adds	r3, #32
    56a4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    56a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    56ac:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    56b0:	4628      	mov	r0, r5
    56b2:	47b8      	blx	r7
    56b4:	3001      	adds	r0, #1
    56b6:	b280      	uxth	r0, r0
    56b8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    56ba:	2b00      	cmp	r3, #0
    56bc:	dbb4      	blt.n	5628 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    56be:	095b      	lsrs	r3, r3, #5
    56c0:	f000 001f 	and.w	r0, r0, #31
    56c4:	2201      	movs	r2, #1
    56c6:	fa02 f000 	lsl.w	r0, r2, r0
    56ca:	3360      	adds	r3, #96	; 0x60
    56cc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    56d0:	4628      	mov	r0, r5
    56d2:	47b8      	blx	r7
    56d4:	3001      	adds	r0, #1
    56d6:	b280      	uxth	r0, r0
    56d8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    56da:	2b00      	cmp	r3, #0
    56dc:	dba4      	blt.n	5628 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    56de:	095b      	lsrs	r3, r3, #5
    56e0:	f000 001f 	and.w	r0, r0, #31
    56e4:	2201      	movs	r2, #1
    56e6:	fa02 f000 	lsl.w	r0, r2, r0
    56ea:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    56ee:	e79b      	b.n	5628 <_adc_async_init+0x28>
		_adc0_dev = dev;
    56f0:	4b07      	ldr	r3, [pc, #28]	; (5710 <_adc_async_init+0x110>)
    56f2:	601d      	str	r5, [r3, #0]
    56f4:	e7a4      	b.n	5640 <_adc_async_init+0x40>
    56f6:	bf00      	nop
    56f8:	0000be00 	.word	0x0000be00
    56fc:	00005271 	.word	0x00005271
    5700:	000055cd 	.word	0x000055cd
    5704:	0000544d 	.word	0x0000544d
    5708:	43001c00 	.word	0x43001c00
    570c:	43002000 	.word	0x43002000
    5710:	20000800 	.word	0x20000800
    5714:	00005435 	.word	0x00005435
    5718:	e000e100 	.word	0xe000e100

0000571c <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    571c:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    571e:	8813      	ldrh	r3, [r2, #0]
    5720:	b29b      	uxth	r3, r3
    5722:	f043 0302 	orr.w	r3, r3, #2
    5726:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5728:	6b13      	ldr	r3, [r2, #48]	; 0x30
    572a:	f013 0f03 	tst.w	r3, #3
    572e:	d1fb      	bne.n	5728 <_adc_async_enable_channel+0xc>
}
    5730:	4770      	bx	lr

00005732 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    5732:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    5734:	88db      	ldrh	r3, [r3, #6]
    5736:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    573a:	2b03      	cmp	r3, #3
}
    573c:	bf0c      	ite	eq
    573e:	2001      	moveq	r0, #1
    5740:	2002      	movne	r0, #2
    5742:	4770      	bx	lr

00005744 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    5744:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    5746:	7d13      	ldrb	r3, [r2, #20]
    5748:	f043 0302 	orr.w	r3, r3, #2
    574c:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    574e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5750:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5754:	2b00      	cmp	r3, #0
    5756:	d1fa      	bne.n	574e <_adc_async_convert+0xa>
}
    5758:	4770      	bx	lr

0000575a <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    575a:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    575c:	2a01      	cmp	r2, #1
    575e:	d007      	beq.n	5770 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    5760:	2a02      	cmp	r2, #2
    5762:	d00e      	beq.n	5782 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    5764:	b91a      	cbnz	r2, 576e <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    5766:	b1ab      	cbz	r3, 5794 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    5768:	2301      	movs	r3, #1
    576a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    576e:	4770      	bx	lr
	if (value == 0x0) {
    5770:	b91b      	cbnz	r3, 577a <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    5772:	2304      	movs	r3, #4
    5774:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5778:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    577a:	2304      	movs	r3, #4
    577c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5780:	4770      	bx	lr
	if (value == 0x0) {
    5782:	b91b      	cbnz	r3, 578c <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    5784:	2302      	movs	r3, #2
    5786:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    578a:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    578c:	2302      	movs	r3, #2
    578e:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5792:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    5794:	2301      	movs	r3, #1
    5796:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    579a:	4770      	bx	lr

0000579c <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    579c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    579e:	4b02      	ldr	r3, [pc, #8]	; (57a8 <ADC0_0_Handler+0xc>)
    57a0:	6818      	ldr	r0, [r3, #0]
    57a2:	4b02      	ldr	r3, [pc, #8]	; (57ac <ADC0_0_Handler+0x10>)
    57a4:	4798      	blx	r3
    57a6:	bd08      	pop	{r3, pc}
    57a8:	20000800 	.word	0x20000800
    57ac:	00005579 	.word	0x00005579

000057b0 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    57b0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    57b2:	4b02      	ldr	r3, [pc, #8]	; (57bc <ADC0_1_Handler+0xc>)
    57b4:	6818      	ldr	r0, [r3, #0]
    57b6:	4b02      	ldr	r3, [pc, #8]	; (57c0 <ADC0_1_Handler+0x10>)
    57b8:	4798      	blx	r3
    57ba:	bd08      	pop	{r3, pc}
    57bc:	20000800 	.word	0x20000800
    57c0:	00005579 	.word	0x00005579

000057c4 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    57c4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    57c6:	4b02      	ldr	r3, [pc, #8]	; (57d0 <ADC1_0_Handler+0xc>)
    57c8:	6858      	ldr	r0, [r3, #4]
    57ca:	4b02      	ldr	r3, [pc, #8]	; (57d4 <ADC1_0_Handler+0x10>)
    57cc:	4798      	blx	r3
    57ce:	bd08      	pop	{r3, pc}
    57d0:	20000800 	.word	0x20000800
    57d4:	00005579 	.word	0x00005579

000057d8 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    57d8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    57da:	4b02      	ldr	r3, [pc, #8]	; (57e4 <ADC1_1_Handler+0xc>)
    57dc:	6858      	ldr	r0, [r3, #4]
    57de:	4b02      	ldr	r3, [pc, #8]	; (57e8 <ADC1_1_Handler+0x10>)
    57e0:	4798      	blx	r3
    57e2:	bd08      	pop	{r3, pc}
    57e4:	20000800 	.word	0x20000800
    57e8:	00005579 	.word	0x00005579

000057ec <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57ec:	0943      	lsrs	r3, r0, #5
    57ee:	f000 001f 	and.w	r0, r0, #31
    57f2:	2201      	movs	r2, #1
    57f4:	fa02 f000 	lsl.w	r0, r2, r0
    57f8:	3340      	adds	r3, #64	; 0x40
    57fa:	4a02      	ldr	r2, [pc, #8]	; (5804 <_irq_set+0x18>)
    57fc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5800:	4770      	bx	lr
    5802:	bf00      	nop
    5804:	e000e100 	.word	0xe000e100

00005808 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    5808:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    580c:	00c0      	lsls	r0, r0, #3
    580e:	4770      	bx	lr

00005810 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5810:	4b01      	ldr	r3, [pc, #4]	; (5818 <_get_cycles_for_ms+0x8>)
    5812:	fb03 f000 	mul.w	r0, r3, r0
    5816:	4770      	bx	lr
    5818:	0001d4c0 	.word	0x0001d4c0

0000581c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    581c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    581e:	4a0e      	ldr	r2, [pc, #56]	; (5858 <_init_chip+0x3c>)
    5820:	8813      	ldrh	r3, [r2, #0]
    5822:	b29b      	uxth	r3, r3
    5824:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    5828:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    582a:	4b0c      	ldr	r3, [pc, #48]	; (585c <_init_chip+0x40>)
    582c:	4798      	blx	r3
	_oscctrl_init_sources();
    582e:	4b0c      	ldr	r3, [pc, #48]	; (5860 <_init_chip+0x44>)
    5830:	4798      	blx	r3
	_mclk_init();
    5832:	4b0c      	ldr	r3, [pc, #48]	; (5864 <_init_chip+0x48>)
    5834:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5836:	2004      	movs	r0, #4
    5838:	4c0b      	ldr	r4, [pc, #44]	; (5868 <_init_chip+0x4c>)
    583a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    583c:	4b0b      	ldr	r3, [pc, #44]	; (586c <_init_chip+0x50>)
    583e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5840:	f640 70fb 	movw	r0, #4091	; 0xffb
    5844:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    5846:	4a0a      	ldr	r2, [pc, #40]	; (5870 <_init_chip+0x54>)
    5848:	6913      	ldr	r3, [r2, #16]
    584a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    584e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    5850:	4b08      	ldr	r3, [pc, #32]	; (5874 <_init_chip+0x58>)
    5852:	4798      	blx	r3
    5854:	bd10      	pop	{r4, pc}
    5856:	bf00      	nop
    5858:	41004000 	.word	0x41004000
    585c:	00005cf9 	.word	0x00005cf9
    5860:	00005d0d 	.word	0x00005d0d
    5864:	00005c21 	.word	0x00005c21
    5868:	00005ba9 	.word	0x00005ba9
    586c:	00005d11 	.word	0x00005d11
    5870:	40000800 	.word	0x40000800
    5874:	000058ed 	.word	0x000058ed

00005878 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    5878:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    587a:	4a1a      	ldr	r2, [pc, #104]	; (58e4 <_dmac_handler+0x6c>)
    587c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    587e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    5882:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    5886:	4818      	ldr	r0, [pc, #96]	; (58e8 <_dmac_handler+0x70>)
    5888:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    588c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5890:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    5894:	f012 0f01 	tst.w	r2, #1
    5898:	d10a      	bne.n	58b0 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    589a:	011a      	lsls	r2, r3, #4
    589c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    58a0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    58a4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    58a8:	f012 0f02 	tst.w	r2, #2
    58ac:	d10b      	bne.n	58c6 <_dmac_handler+0x4e>
    58ae:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    58b0:	011a      	lsls	r2, r3, #4
    58b2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    58b6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    58ba:	2101      	movs	r1, #1
    58bc:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    58c0:	6843      	ldr	r3, [r0, #4]
    58c2:	4798      	blx	r3
    58c4:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    58c6:	011a      	lsls	r2, r3, #4
    58c8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    58cc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    58d0:	2102      	movs	r1, #2
    58d2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    58d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    58da:	4a03      	ldr	r2, [pc, #12]	; (58e8 <_dmac_handler+0x70>)
    58dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58e0:	4798      	blx	r3
	}
}
    58e2:	e7e4      	b.n	58ae <_dmac_handler+0x36>
    58e4:	4100a000 	.word	0x4100a000
    58e8:	20000808 	.word	0x20000808

000058ec <_dma_init>:
{
    58ec:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    58ee:	4a32      	ldr	r2, [pc, #200]	; (59b8 <_dma_init+0xcc>)
    58f0:	8813      	ldrh	r3, [r2, #0]
    58f2:	f023 0302 	bic.w	r3, r3, #2
    58f6:	041b      	lsls	r3, r3, #16
    58f8:	0c1b      	lsrs	r3, r3, #16
    58fa:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    58fc:	8853      	ldrh	r3, [r2, #2]
    58fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    5902:	041b      	lsls	r3, r3, #16
    5904:	0c1b      	lsrs	r3, r3, #16
    5906:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    5908:	8813      	ldrh	r3, [r2, #0]
    590a:	b29b      	uxth	r3, r3
    590c:	f043 0301 	orr.w	r3, r3, #1
    5910:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    5912:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    5914:	f013 0f01 	tst.w	r3, #1
    5918:	d1fb      	bne.n	5912 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    591a:	4b27      	ldr	r3, [pc, #156]	; (59b8 <_dma_init+0xcc>)
    591c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    5920:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    5922:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    5924:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    5928:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    592c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    592e:	2100      	movs	r1, #0
    5930:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    5932:	4a22      	ldr	r2, [pc, #136]	; (59bc <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    5934:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    5936:	4a22      	ldr	r2, [pc, #136]	; (59c0 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    5938:	639a      	str	r2, [r3, #56]	; 0x38
    593a:	4b22      	ldr	r3, [pc, #136]	; (59c4 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    593c:	4c1f      	ldr	r4, [pc, #124]	; (59bc <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    593e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    5940:	681d      	ldr	r5, [r3, #0]
    5942:	0108      	lsls	r0, r1, #4
    5944:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    5948:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    594c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    594e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    5950:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    5954:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    5956:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    595a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    595c:	1822      	adds	r2, r4, r0
    595e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    5960:	60d6      	str	r6, [r2, #12]
    5962:	3101      	adds	r1, #1
    5964:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    5966:	2920      	cmp	r1, #32
    5968:	d1ea      	bne.n	5940 <_dma_init+0x54>
    596a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    596c:	2001      	movs	r0, #1
    596e:	4916      	ldr	r1, [pc, #88]	; (59c8 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    5970:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    5972:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5976:	d00b      	beq.n	5990 <_dma_init+0xa4>
    5978:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    597a:	2b24      	cmp	r3, #36	; 0x24
    597c:	d1f8      	bne.n	5970 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    597e:	4a0e      	ldr	r2, [pc, #56]	; (59b8 <_dma_init+0xcc>)
    5980:	8813      	ldrh	r3, [r2, #0]
    5982:	b29b      	uxth	r3, r3
    5984:	f043 0302 	orr.w	r3, r3, #2
    5988:	8013      	strh	r3, [r2, #0]
}
    598a:	2000      	movs	r0, #0
    598c:	bc70      	pop	{r4, r5, r6}
    598e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5990:	095c      	lsrs	r4, r3, #5
    5992:	f002 021f 	and.w	r2, r2, #31
    5996:	fa00 f202 	lsl.w	r2, r0, r2
    599a:	f104 0520 	add.w	r5, r4, #32
    599e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    59a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    59a6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59aa:	f104 0560 	add.w	r5, r4, #96	; 0x60
    59ae:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59b2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    59b6:	e7df      	b.n	5978 <_dma_init+0x8c>
    59b8:	4100a000 	.word	0x4100a000
    59bc:	20002870 	.word	0x20002870
    59c0:	20002a70 	.word	0x20002a70
    59c4:	0000be18 	.word	0x0000be18
    59c8:	e000e100 	.word	0xe000e100

000059cc <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    59cc:	b991      	cbnz	r1, 59f4 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    59ce:	b942      	cbnz	r2, 59e2 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    59d0:	0100      	lsls	r0, r0, #4
    59d2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    59d6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    59da:	2302      	movs	r3, #2
    59dc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    59e0:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    59e2:	0100      	lsls	r0, r0, #4
    59e4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    59e8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    59ec:	2302      	movs	r3, #2
    59ee:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    59f2:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    59f4:	2901      	cmp	r1, #1
    59f6:	d000      	beq.n	59fa <_dma_set_irq_state+0x2e>
    59f8:	4770      	bx	lr
	if (value == 0x0) {
    59fa:	b142      	cbz	r2, 5a0e <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    59fc:	0100      	lsls	r0, r0, #4
    59fe:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5a02:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5a06:	2301      	movs	r3, #1
    5a08:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    5a0c:	e7f4      	b.n	59f8 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    5a0e:	0100      	lsls	r0, r0, #4
    5a10:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5a14:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    5a18:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    5a1c:	4770      	bx	lr
	...

00005a20 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    5a20:	4b02      	ldr	r3, [pc, #8]	; (5a2c <_dma_set_destination_address+0xc>)
    5a22:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5a26:	6081      	str	r1, [r0, #8]
}
    5a28:	2000      	movs	r0, #0
    5a2a:	4770      	bx	lr
    5a2c:	20002870 	.word	0x20002870

00005a30 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    5a30:	4b02      	ldr	r3, [pc, #8]	; (5a3c <_dma_set_source_address+0xc>)
    5a32:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5a36:	6041      	str	r1, [r0, #4]
}
    5a38:	2000      	movs	r0, #0
    5a3a:	4770      	bx	lr
    5a3c:	20002870 	.word	0x20002870

00005a40 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a40:	4a05      	ldr	r2, [pc, #20]	; (5a58 <_dma_srcinc_enable+0x18>)
    5a42:	0100      	lsls	r0, r0, #4
    5a44:	5a13      	ldrh	r3, [r2, r0]
    5a46:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    5a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    5a4c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    5a50:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    5a52:	5211      	strh	r1, [r2, r0]
}
    5a54:	2000      	movs	r0, #0
    5a56:	4770      	bx	lr
    5a58:	20002870 	.word	0x20002870

00005a5c <_dma_set_data_amount>:
{
    5a5c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    5a5e:	4c14      	ldr	r4, [pc, #80]	; (5ab0 <_dma_set_data_amount+0x54>)
    5a60:	0102      	lsls	r2, r0, #4
    5a62:	18a3      	adds	r3, r4, r2
    5a64:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a66:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    5a68:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a6c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    5a6e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    5a72:	d006      	beq.n	5a82 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    5a74:	fa01 f403 	lsl.w	r4, r1, r3
    5a78:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    5a7a:	4a0d      	ldr	r2, [pc, #52]	; (5ab0 <_dma_set_data_amount+0x54>)
    5a7c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    5a80:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    5a82:	4c0b      	ldr	r4, [pc, #44]	; (5ab0 <_dma_set_data_amount+0x54>)
    5a84:	0102      	lsls	r2, r0, #4
    5a86:	18a5      	adds	r5, r4, r2
    5a88:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    5a8a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    5a8c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    5a90:	d005      	beq.n	5a9e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    5a92:	fa01 f303 	lsl.w	r3, r1, r3
    5a96:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    5a98:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    5a9c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    5a9e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    5aa0:	4b03      	ldr	r3, [pc, #12]	; (5ab0 <_dma_set_data_amount+0x54>)
    5aa2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5aa6:	8041      	strh	r1, [r0, #2]
}
    5aa8:	2000      	movs	r0, #0
    5aaa:	bc30      	pop	{r4, r5}
    5aac:	4770      	bx	lr
    5aae:	bf00      	nop
    5ab0:	20002870 	.word	0x20002870

00005ab4 <_dma_enable_transaction>:
{
    5ab4:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    5ab6:	4c0d      	ldr	r4, [pc, #52]	; (5aec <_dma_enable_transaction+0x38>)
    5ab8:	0103      	lsls	r3, r0, #4
    5aba:	5ae2      	ldrh	r2, [r4, r3]
    5abc:	b292      	uxth	r2, r2
    5abe:	f042 0201 	orr.w	r2, r2, #1
    5ac2:	52e2      	strh	r2, [r4, r3]
    5ac4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5ac8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    5acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5ace:	f042 0202 	orr.w	r2, r2, #2
    5ad2:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    5ad4:	b131      	cbz	r1, 5ae4 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    5ad6:	4a06      	ldr	r2, [pc, #24]	; (5af0 <_dma_enable_transaction+0x3c>)
    5ad8:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    5ada:	2301      	movs	r3, #1
    5adc:	fa03 f000 	lsl.w	r0, r3, r0
    5ae0:	4308      	orrs	r0, r1
    5ae2:	6110      	str	r0, [r2, #16]
}
    5ae4:	2000      	movs	r0, #0
    5ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
    5aea:	4770      	bx	lr
    5aec:	20002870 	.word	0x20002870
    5af0:	4100a000 	.word	0x4100a000

00005af4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    5af4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5af8:	4b02      	ldr	r3, [pc, #8]	; (5b04 <_dma_get_channel_resource+0x10>)
    5afa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5afe:	6001      	str	r1, [r0, #0]
}
    5b00:	2000      	movs	r0, #0
    5b02:	4770      	bx	lr
    5b04:	20000808 	.word	0x20000808

00005b08 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    5b08:	b508      	push	{r3, lr}
	_dmac_handler();
    5b0a:	4b01      	ldr	r3, [pc, #4]	; (5b10 <DMAC_0_Handler+0x8>)
    5b0c:	4798      	blx	r3
    5b0e:	bd08      	pop	{r3, pc}
    5b10:	00005879 	.word	0x00005879

00005b14 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    5b14:	b508      	push	{r3, lr}
	_dmac_handler();
    5b16:	4b01      	ldr	r3, [pc, #4]	; (5b1c <DMAC_1_Handler+0x8>)
    5b18:	4798      	blx	r3
    5b1a:	bd08      	pop	{r3, pc}
    5b1c:	00005879 	.word	0x00005879

00005b20 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    5b20:	b508      	push	{r3, lr}
	_dmac_handler();
    5b22:	4b01      	ldr	r3, [pc, #4]	; (5b28 <DMAC_2_Handler+0x8>)
    5b24:	4798      	blx	r3
    5b26:	bd08      	pop	{r3, pc}
    5b28:	00005879 	.word	0x00005879

00005b2c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    5b2c:	b508      	push	{r3, lr}
	_dmac_handler();
    5b2e:	4b01      	ldr	r3, [pc, #4]	; (5b34 <DMAC_3_Handler+0x8>)
    5b30:	4798      	blx	r3
    5b32:	bd08      	pop	{r3, pc}
    5b34:	00005879 	.word	0x00005879

00005b38 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    5b38:	b508      	push	{r3, lr}
	_dmac_handler();
    5b3a:	4b01      	ldr	r3, [pc, #4]	; (5b40 <DMAC_4_Handler+0x8>)
    5b3c:	4798      	blx	r3
    5b3e:	bd08      	pop	{r3, pc}
    5b40:	00005879 	.word	0x00005879

00005b44 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    5b44:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    5b46:	2000      	movs	r0, #0
    5b48:	4770      	bx	lr
	...

00005b4c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5b4c:	b430      	push	{r4, r5}
    5b4e:	4814      	ldr	r0, [pc, #80]	; (5ba0 <_event_system_init+0x54>)
    5b50:	f100 0543 	add.w	r5, r0, #67	; 0x43
    5b54:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    5b56:	4c13      	ldr	r4, [pc, #76]	; (5ba4 <_event_system_init+0x58>)
    5b58:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5b5a:	f813 1b01 	ldrb.w	r1, [r3], #1
    5b5e:	3248      	adds	r2, #72	; 0x48
    5b60:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    5b64:	42ab      	cmp	r3, r5
    5b66:	d1f7      	bne.n	5b58 <_event_system_init+0xc>
    5b68:	480d      	ldr	r0, [pc, #52]	; (5ba0 <_event_system_init+0x54>)
    5b6a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    5b6e:	3080      	adds	r0, #128	; 0x80
    5b70:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5b72:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    5b76:	00ca      	lsls	r2, r1, #3
    5b78:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5b7c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    5b80:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5b82:	f850 3f04 	ldr.w	r3, [r0, #4]!
    5b86:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    5b88:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    5b8c:	43db      	mvns	r3, r3
    5b8e:	b2db      	uxtb	r3, r3
    5b90:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    5b94:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    5b96:	2920      	cmp	r1, #32
    5b98:	d1eb      	bne.n	5b72 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    5b9a:	2000      	movs	r0, #0
    5b9c:	bc30      	pop	{r4, r5}
    5b9e:	4770      	bx	lr
    5ba0:	0000bf18 	.word	0x0000bf18
    5ba4:	4100e000 	.word	0x4100e000

00005ba8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    5ba8:	f010 0f01 	tst.w	r0, #1
    5bac:	d008      	beq.n	5bc0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5bae:	4a17      	ldr	r2, [pc, #92]	; (5c0c <_gclk_init_generators_by_fref+0x64>)
    5bb0:	4b17      	ldr	r3, [pc, #92]	; (5c10 <_gclk_init_generators_by_fref+0x68>)
    5bb2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5bb4:	4619      	mov	r1, r3
    5bb6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5bba:	684b      	ldr	r3, [r1, #4]
    5bbc:	4213      	tst	r3, r2
    5bbe:	d1fc      	bne.n	5bba <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5bc0:	f010 0f02 	tst.w	r0, #2
    5bc4:	d008      	beq.n	5bd8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5bc6:	4a13      	ldr	r2, [pc, #76]	; (5c14 <_gclk_init_generators_by_fref+0x6c>)
    5bc8:	4b11      	ldr	r3, [pc, #68]	; (5c10 <_gclk_init_generators_by_fref+0x68>)
    5bca:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5bcc:	4619      	mov	r1, r3
    5bce:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5bd2:	684b      	ldr	r3, [r1, #4]
    5bd4:	4213      	tst	r3, r2
    5bd6:	d1fc      	bne.n	5bd2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5bd8:	f010 0f04 	tst.w	r0, #4
    5bdc:	d008      	beq.n	5bf0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5bde:	4a0e      	ldr	r2, [pc, #56]	; (5c18 <_gclk_init_generators_by_fref+0x70>)
    5be0:	4b0b      	ldr	r3, [pc, #44]	; (5c10 <_gclk_init_generators_by_fref+0x68>)
    5be2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5be4:	4619      	mov	r1, r3
    5be6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5bea:	684b      	ldr	r3, [r1, #4]
    5bec:	4213      	tst	r3, r2
    5bee:	d1fc      	bne.n	5bea <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5bf0:	f010 0f08 	tst.w	r0, #8
    5bf4:	d008      	beq.n	5c08 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5bf6:	4a09      	ldr	r2, [pc, #36]	; (5c1c <_gclk_init_generators_by_fref+0x74>)
    5bf8:	4b05      	ldr	r3, [pc, #20]	; (5c10 <_gclk_init_generators_by_fref+0x68>)
    5bfa:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5bfc:	4619      	mov	r1, r3
    5bfe:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5c02:	684b      	ldr	r3, [r1, #4]
    5c04:	4213      	tst	r3, r2
    5c06:	d1fc      	bne.n	5c02 <_gclk_init_generators_by_fref+0x5a>
    5c08:	4770      	bx	lr
    5c0a:	bf00      	nop
    5c0c:	00010108 	.word	0x00010108
    5c10:	40001c00 	.word	0x40001c00
    5c14:	00010106 	.word	0x00010106
    5c18:	00100106 	.word	0x00100106
    5c1c:	00010104 	.word	0x00010104

00005c20 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    5c20:	2201      	movs	r2, #1
    5c22:	4b01      	ldr	r3, [pc, #4]	; (5c28 <_mclk_init+0x8>)
    5c24:	715a      	strb	r2, [r3, #5]
    5c26:	4770      	bx	lr
    5c28:	40000800 	.word	0x40000800

00005c2c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    5c2c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    5c2e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    5c30:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    5c32:	f012 0f01 	tst.w	r2, #1
    5c36:	d005      	beq.n	5c44 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    5c38:	2201      	movs	r2, #1
    5c3a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    5c3c:	6803      	ldr	r3, [r0, #0]
    5c3e:	b153      	cbz	r3, 5c56 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    5c40:	4798      	blx	r3
    5c42:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    5c44:	8a1a      	ldrh	r2, [r3, #16]
    5c46:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    5c48:	b12a      	cbz	r2, 5c56 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    5c4a:	f240 225e 	movw	r2, #606	; 0x25e
    5c4e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    5c50:	6843      	ldr	r3, [r0, #4]
    5c52:	b103      	cbz	r3, 5c56 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    5c54:	4798      	blx	r3
    5c56:	bd08      	pop	{r3, pc}

00005c58 <_flash_init>:
{
    5c58:	b538      	push	{r3, r4, r5, lr}
    5c5a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    5c5c:	4605      	mov	r5, r0
    5c5e:	b350      	cbz	r0, 5cb6 <_flash_init+0x5e>
    5c60:	4816      	ldr	r0, [pc, #88]	; (5cbc <_flash_init+0x64>)
    5c62:	4281      	cmp	r1, r0
    5c64:	bf14      	ite	ne
    5c66:	2000      	movne	r0, #0
    5c68:	2001      	moveq	r0, #1
    5c6a:	224b      	movs	r2, #75	; 0x4b
    5c6c:	4914      	ldr	r1, [pc, #80]	; (5cc0 <_flash_init+0x68>)
    5c6e:	4b15      	ldr	r3, [pc, #84]	; (5cc4 <_flash_init+0x6c>)
    5c70:	4798      	blx	r3
	device->hw = hw;
    5c72:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    5c74:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    5c76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    5c7a:	049b      	lsls	r3, r3, #18
    5c7c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    5c7e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    5c80:	4b11      	ldr	r3, [pc, #68]	; (5cc8 <_flash_init+0x70>)
    5c82:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c84:	4b11      	ldr	r3, [pc, #68]	; (5ccc <_flash_init+0x74>)
    5c86:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    5c8a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5c8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5c92:	f3bf 8f6f 	isb	sy
    5c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5c9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5ca2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5ca6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    5caa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5cae:	6019      	str	r1, [r3, #0]
    5cb0:	601a      	str	r2, [r3, #0]
}
    5cb2:	2000      	movs	r0, #0
    5cb4:	bd38      	pop	{r3, r4, r5, pc}
    5cb6:	2000      	movs	r0, #0
    5cb8:	e7d7      	b.n	5c6a <_flash_init+0x12>
    5cba:	bf00      	nop
    5cbc:	41004000 	.word	0x41004000
    5cc0:	0000c01c 	.word	0x0000c01c
    5cc4:	00005271 	.word	0x00005271
    5cc8:	20000988 	.word	0x20000988
    5ccc:	e000e100 	.word	0xe000e100

00005cd0 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    5cd0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    5cd2:	4b02      	ldr	r3, [pc, #8]	; (5cdc <NVMCTRL_0_Handler+0xc>)
    5cd4:	6818      	ldr	r0, [r3, #0]
    5cd6:	4b02      	ldr	r3, [pc, #8]	; (5ce0 <NVMCTRL_0_Handler+0x10>)
    5cd8:	4798      	blx	r3
    5cda:	bd08      	pop	{r3, pc}
    5cdc:	20000988 	.word	0x20000988
    5ce0:	00005c2d 	.word	0x00005c2d

00005ce4 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    5ce4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    5ce6:	4b02      	ldr	r3, [pc, #8]	; (5cf0 <NVMCTRL_1_Handler+0xc>)
    5ce8:	6818      	ldr	r0, [r3, #0]
    5cea:	4b02      	ldr	r3, [pc, #8]	; (5cf4 <NVMCTRL_1_Handler+0x10>)
    5cec:	4798      	blx	r3
    5cee:	bd08      	pop	{r3, pc}
    5cf0:	20000988 	.word	0x20000988
    5cf4:	00005c2d 	.word	0x00005c2d

00005cf8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5cf8:	4b03      	ldr	r3, [pc, #12]	; (5d08 <_osc32kctrl_init_sources+0x10>)
    5cfa:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5cfc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5d00:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5d02:	2201      	movs	r2, #1
    5d04:	741a      	strb	r2, [r3, #16]
    5d06:	4770      	bx	lr
    5d08:	40001400 	.word	0x40001400

00005d0c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5d0c:	4770      	bx	lr
	...

00005d10 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5d10:	4a47      	ldr	r2, [pc, #284]	; (5e30 <_oscctrl_init_referenced_generators+0x120>)
    5d12:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5d14:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    5d18:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5d1c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5d1e:	4611      	mov	r1, r2
    5d20:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5d24:	684b      	ldr	r3, [r1, #4]
    5d26:	4213      	tst	r3, r2
    5d28:	d1fc      	bne.n	5d24 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5d2a:	4a41      	ldr	r2, [pc, #260]	; (5e30 <_oscctrl_init_referenced_generators+0x120>)
    5d2c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5d2e:	f013 0f04 	tst.w	r3, #4
    5d32:	d1fb      	bne.n	5d2c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5d34:	4b3f      	ldr	r3, [pc, #252]	; (5e34 <_oscctrl_init_referenced_generators+0x124>)
    5d36:	2200      	movs	r2, #0
    5d38:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5d3a:	4a3f      	ldr	r2, [pc, #252]	; (5e38 <_oscctrl_init_referenced_generators+0x128>)
    5d3c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d3e:	461a      	mov	r2, r3
    5d40:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5d44:	f013 0f10 	tst.w	r3, #16
    5d48:	d1fa      	bne.n	5d40 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5d4a:	2200      	movs	r2, #0
    5d4c:	4b39      	ldr	r3, [pc, #228]	; (5e34 <_oscctrl_init_referenced_generators+0x124>)
    5d4e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d52:	461a      	mov	r2, r3
    5d54:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5d58:	f013 0f04 	tst.w	r3, #4
    5d5c:	d1fa      	bne.n	5d54 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5d5e:	2202      	movs	r2, #2
    5d60:	4b34      	ldr	r3, [pc, #208]	; (5e34 <_oscctrl_init_referenced_generators+0x124>)
    5d62:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d64:	461a      	mov	r2, r3
    5d66:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5d6a:	f013 0f02 	tst.w	r3, #2
    5d6e:	d1fa      	bne.n	5d66 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5d70:	4b30      	ldr	r3, [pc, #192]	; (5e34 <_oscctrl_init_referenced_generators+0x124>)
    5d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5d74:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d76:	461a      	mov	r2, r3
    5d78:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5d7c:	f013 0f08 	tst.w	r3, #8
    5d80:	d1fa      	bne.n	5d78 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5d82:	2288      	movs	r2, #136	; 0x88
    5d84:	4b2b      	ldr	r3, [pc, #172]	; (5e34 <_oscctrl_init_referenced_generators+0x124>)
    5d86:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5d8a:	461a      	mov	r2, r3
    5d8c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5d90:	f013 0f04 	tst.w	r3, #4
    5d94:	d1fa      	bne.n	5d8c <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5d96:	2242      	movs	r2, #66	; 0x42
    5d98:	4b25      	ldr	r3, [pc, #148]	; (5e30 <_oscctrl_init_referenced_generators+0x120>)
    5d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5d9e:	2227      	movs	r2, #39	; 0x27
    5da0:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    5da4:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5da6:	461a      	mov	r2, r3
    5da8:	6d13      	ldr	r3, [r2, #80]	; 0x50
    5daa:	f013 0f06 	tst.w	r3, #6
    5dae:	d1fb      	bne.n	5da8 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5db0:	4b20      	ldr	r3, [pc, #128]	; (5e34 <_oscctrl_init_referenced_generators+0x124>)
    5db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5db6:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5db8:	2202      	movs	r2, #2
    5dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5dbe:	461a      	mov	r2, r3
    5dc0:	6d13      	ldr	r3, [r2, #80]	; 0x50
    5dc2:	f013 0f02 	tst.w	r3, #2
    5dc6:	d1fb      	bne.n	5dc0 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5dc8:	4b1a      	ldr	r3, [pc, #104]	; (5e34 <_oscctrl_init_referenced_generators+0x124>)
    5dca:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5dce:	f013 0f01 	tst.w	r3, #1
    5dd2:	d026      	beq.n	5e22 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5dd4:	4a17      	ldr	r2, [pc, #92]	; (5e34 <_oscctrl_init_referenced_generators+0x124>)
    5dd6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    5dd8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5ddc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    5de0:	d1f9      	bne.n	5dd6 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5de2:	4b14      	ldr	r3, [pc, #80]	; (5e34 <_oscctrl_init_referenced_generators+0x124>)
    5de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5de6:	f012 0f01 	tst.w	r2, #1
    5dea:	d103      	bne.n	5df4 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    5dee:	f012 0f02 	tst.w	r2, #2
    5df2:	d0f7      	beq.n	5de4 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5df4:	4a0e      	ldr	r2, [pc, #56]	; (5e30 <_oscctrl_init_referenced_generators+0x120>)
    5df6:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d1fc      	bne.n	5df6 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5dfc:	4a0c      	ldr	r2, [pc, #48]	; (5e30 <_oscctrl_init_referenced_generators+0x120>)
    5dfe:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5e00:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    5e04:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5e08:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5e0a:	4611      	mov	r1, r2
    5e0c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    5e10:	684b      	ldr	r3, [r1, #4]
    5e12:	4213      	tst	r3, r2
    5e14:	d1fc      	bne.n	5e10 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5e16:	4a06      	ldr	r2, [pc, #24]	; (5e30 <_oscctrl_init_referenced_generators+0x120>)
    5e18:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5e1a:	f013 0f04 	tst.w	r3, #4
    5e1e:	d1fb      	bne.n	5e18 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    5e20:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5e22:	4a04      	ldr	r2, [pc, #16]	; (5e34 <_oscctrl_init_referenced_generators+0x124>)
    5e24:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5e26:	f413 7f80 	tst.w	r3, #256	; 0x100
    5e2a:	d0fb      	beq.n	5e24 <_oscctrl_init_referenced_generators+0x114>
    5e2c:	e7d9      	b.n	5de2 <_oscctrl_init_referenced_generators+0xd2>
    5e2e:	bf00      	nop
    5e30:	40001c00 	.word	0x40001c00
    5e34:	40001000 	.word	0x40001000
    5e38:	04010000 	.word	0x04010000

00005e3c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    5e3c:	b500      	push	{lr}
    5e3e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    5e40:	4b0d      	ldr	r3, [pc, #52]	; (5e78 <RAMECC_Handler+0x3c>)
    5e42:	789b      	ldrb	r3, [r3, #2]
    5e44:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    5e46:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    5e48:	9b01      	ldr	r3, [sp, #4]
    5e4a:	f013 0f02 	tst.w	r3, #2
    5e4e:	d006      	beq.n	5e5e <RAMECC_Handler+0x22>
    5e50:	4b0a      	ldr	r3, [pc, #40]	; (5e7c <RAMECC_Handler+0x40>)
    5e52:	681b      	ldr	r3, [r3, #0]
    5e54:	b11b      	cbz	r3, 5e5e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    5e56:	4a08      	ldr	r2, [pc, #32]	; (5e78 <RAMECC_Handler+0x3c>)
    5e58:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    5e5a:	4798      	blx	r3
    5e5c:	e009      	b.n	5e72 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    5e5e:	9b01      	ldr	r3, [sp, #4]
    5e60:	f013 0f01 	tst.w	r3, #1
    5e64:	d005      	beq.n	5e72 <RAMECC_Handler+0x36>
    5e66:	4b05      	ldr	r3, [pc, #20]	; (5e7c <RAMECC_Handler+0x40>)
    5e68:	685b      	ldr	r3, [r3, #4]
    5e6a:	b113      	cbz	r3, 5e72 <RAMECC_Handler+0x36>
    5e6c:	4a02      	ldr	r2, [pc, #8]	; (5e78 <RAMECC_Handler+0x3c>)
    5e6e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    5e70:	4798      	blx	r3
	} else {
		return;
	}
}
    5e72:	b003      	add	sp, #12
    5e74:	f85d fb04 	ldr.w	pc, [sp], #4
    5e78:	41020000 	.word	0x41020000
    5e7c:	20002c70 	.word	0x20002c70

00005e80 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    5e80:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    5e82:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5e84:	6913      	ldr	r3, [r2, #16]
    5e86:	f013 0f60 	tst.w	r3, #96	; 0x60
    5e8a:	d1fb      	bne.n	5e84 <_rtc_timer_set_period+0x4>
}
    5e8c:	4770      	bx	lr

00005e8e <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    5e8e:	68c2      	ldr	r2, [r0, #12]
    5e90:	6913      	ldr	r3, [r2, #16]
    5e92:	f013 0f60 	tst.w	r3, #96	; 0x60
    5e96:	d1fb      	bne.n	5e90 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    5e98:	6a10      	ldr	r0, [r2, #32]
}
    5e9a:	4770      	bx	lr

00005e9c <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    5e9c:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5e9e:	f248 0103 	movw	r1, #32771	; 0x8003
    5ea2:	6913      	ldr	r3, [r2, #16]
    5ea4:	420b      	tst	r3, r1
    5ea6:	d1fc      	bne.n	5ea2 <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5ea8:	8810      	ldrh	r0, [r2, #0]
}
    5eaa:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5eae:	4770      	bx	lr

00005eb0 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    5eb0:	4770      	bx	lr
	...

00005eb4 <_rtc_timer_init>:
{
    5eb4:	b538      	push	{r3, r4, r5, lr}
    5eb6:	460c      	mov	r4, r1
	ASSERT(dev);
    5eb8:	4605      	mov	r5, r0
    5eba:	2230      	movs	r2, #48	; 0x30
    5ebc:	4914      	ldr	r1, [pc, #80]	; (5f10 <_rtc_timer_init+0x5c>)
    5ebe:	3000      	adds	r0, #0
    5ec0:	bf18      	it	ne
    5ec2:	2001      	movne	r0, #1
    5ec4:	4b13      	ldr	r3, [pc, #76]	; (5f14 <_rtc_timer_init+0x60>)
    5ec6:	4798      	blx	r3
	dev->hw = hw;
    5ec8:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5eca:	2301      	movs	r3, #1
    5ecc:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5ece:	f248 0203 	movw	r2, #32771	; 0x8003
    5ed2:	6923      	ldr	r3, [r4, #16]
    5ed4:	4213      	tst	r3, r2
    5ed6:	d1fc      	bne.n	5ed2 <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5ed8:	68eb      	ldr	r3, [r5, #12]
    5eda:	691a      	ldr	r2, [r3, #16]
    5edc:	f012 0f01 	tst.w	r2, #1
    5ee0:	d1fb      	bne.n	5eda <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5ee2:	f248 0280 	movw	r2, #32896	; 0x8080
    5ee6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5ee8:	f248 0103 	movw	r1, #32771	; 0x8003
    5eec:	691a      	ldr	r2, [r3, #16]
    5eee:	420a      	tst	r2, r1
    5ef0:	d1fc      	bne.n	5eec <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    5ef2:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    5ef4:	2301      	movs	r3, #1
    5ef6:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5ef8:	6913      	ldr	r3, [r2, #16]
    5efa:	f013 0f60 	tst.w	r3, #96	; 0x60
    5efe:	d1fb      	bne.n	5ef8 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    5f00:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    5f02:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f06:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    5f08:	4b03      	ldr	r3, [pc, #12]	; (5f18 <_rtc_timer_init+0x64>)
    5f0a:	601d      	str	r5, [r3, #0]
}
    5f0c:	2000      	movs	r0, #0
    5f0e:	bd38      	pop	{r3, r4, r5, pc}
    5f10:	0000c03c 	.word	0x0000c03c
    5f14:	00005271 	.word	0x00005271
    5f18:	2000098c 	.word	0x2000098c

00005f1c <_rtc_timer_deinit>:
{
    5f1c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    5f1e:	4604      	mov	r4, r0
    5f20:	b1c8      	cbz	r0, 5f56 <_rtc_timer_deinit+0x3a>
    5f22:	68c0      	ldr	r0, [r0, #12]
    5f24:	3000      	adds	r0, #0
    5f26:	bf18      	it	ne
    5f28:	2001      	movne	r0, #1
    5f2a:	2252      	movs	r2, #82	; 0x52
    5f2c:	490b      	ldr	r1, [pc, #44]	; (5f5c <_rtc_timer_deinit+0x40>)
    5f2e:	4b0c      	ldr	r3, [pc, #48]	; (5f60 <_rtc_timer_deinit+0x44>)
    5f30:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5f36:	4b0b      	ldr	r3, [pc, #44]	; (5f64 <_rtc_timer_deinit+0x48>)
    5f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    5f3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f40:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    5f44:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5f46:	2301      	movs	r3, #1
    5f48:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5f4a:	f248 0103 	movw	r1, #32771	; 0x8003
    5f4e:	6913      	ldr	r3, [r2, #16]
    5f50:	420b      	tst	r3, r1
    5f52:	d1fc      	bne.n	5f4e <_rtc_timer_deinit+0x32>
}
    5f54:	bd10      	pop	{r4, pc}
    5f56:	2000      	movs	r0, #0
    5f58:	e7e7      	b.n	5f2a <_rtc_timer_deinit+0xe>
    5f5a:	bf00      	nop
    5f5c:	0000c03c 	.word	0x0000c03c
    5f60:	00005271 	.word	0x00005271
    5f64:	e000e100 	.word	0xe000e100

00005f68 <_rtc_timer_start>:
{
    5f68:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    5f6a:	4604      	mov	r4, r0
    5f6c:	b310      	cbz	r0, 5fb4 <_rtc_timer_start+0x4c>
    5f6e:	68c0      	ldr	r0, [r0, #12]
    5f70:	3000      	adds	r0, #0
    5f72:	bf18      	it	ne
    5f74:	2001      	movne	r0, #1
    5f76:	225e      	movs	r2, #94	; 0x5e
    5f78:	490f      	ldr	r1, [pc, #60]	; (5fb8 <_rtc_timer_start+0x50>)
    5f7a:	4b10      	ldr	r3, [pc, #64]	; (5fbc <_rtc_timer_start+0x54>)
    5f7c:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5f82:	4b0f      	ldr	r3, [pc, #60]	; (5fc0 <_rtc_timer_start+0x58>)
    5f84:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    5f86:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    5f88:	2300      	movs	r3, #0
    5f8a:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5f8c:	6913      	ldr	r3, [r2, #16]
    5f8e:	f013 0f08 	tst.w	r3, #8
    5f92:	d1fb      	bne.n	5f8c <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    5f94:	68e3      	ldr	r3, [r4, #12]
    5f96:	691a      	ldr	r2, [r3, #16]
    5f98:	f012 0f08 	tst.w	r2, #8
    5f9c:	d1fb      	bne.n	5f96 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    5f9e:	881a      	ldrh	r2, [r3, #0]
    5fa0:	b292      	uxth	r2, r2
    5fa2:	f042 0202 	orr.w	r2, r2, #2
    5fa6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5fa8:	f248 0103 	movw	r1, #32771	; 0x8003
    5fac:	691a      	ldr	r2, [r3, #16]
    5fae:	420a      	tst	r2, r1
    5fb0:	d1fc      	bne.n	5fac <_rtc_timer_start+0x44>
}
    5fb2:	bd10      	pop	{r4, pc}
    5fb4:	2000      	movs	r0, #0
    5fb6:	e7de      	b.n	5f76 <_rtc_timer_start+0xe>
    5fb8:	0000c03c 	.word	0x0000c03c
    5fbc:	00005271 	.word	0x00005271
    5fc0:	e000e100 	.word	0xe000e100

00005fc4 <_rtc_timer_stop>:
{
    5fc4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    5fc6:	4604      	mov	r4, r0
    5fc8:	b1a0      	cbz	r0, 5ff4 <_rtc_timer_stop+0x30>
    5fca:	68c0      	ldr	r0, [r0, #12]
    5fcc:	3000      	adds	r0, #0
    5fce:	bf18      	it	ne
    5fd0:	2001      	movne	r0, #1
    5fd2:	226b      	movs	r2, #107	; 0x6b
    5fd4:	4908      	ldr	r1, [pc, #32]	; (5ff8 <_rtc_timer_stop+0x34>)
    5fd6:	4b09      	ldr	r3, [pc, #36]	; (5ffc <_rtc_timer_stop+0x38>)
    5fd8:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5fda:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5fdc:	8813      	ldrh	r3, [r2, #0]
    5fde:	f023 0302 	bic.w	r3, r3, #2
    5fe2:	041b      	lsls	r3, r3, #16
    5fe4:	0c1b      	lsrs	r3, r3, #16
    5fe6:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5fe8:	f248 0103 	movw	r1, #32771	; 0x8003
    5fec:	6913      	ldr	r3, [r2, #16]
    5fee:	420b      	tst	r3, r1
    5ff0:	d1fc      	bne.n	5fec <_rtc_timer_stop+0x28>
}
    5ff2:	bd10      	pop	{r4, pc}
    5ff4:	2000      	movs	r0, #0
    5ff6:	e7ec      	b.n	5fd2 <_rtc_timer_stop+0xe>
    5ff8:	0000c03c 	.word	0x0000c03c
    5ffc:	00005271 	.word	0x00005271

00006000 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    6000:	4800      	ldr	r0, [pc, #0]	; (6004 <_rtc_get_timer+0x4>)
    6002:	4770      	bx	lr
    6004:	20000358 	.word	0x20000358

00006008 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6008:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    600a:	4b08      	ldr	r3, [pc, #32]	; (602c <RTC_Handler+0x24>)
    600c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    600e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6010:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    6012:	f413 7f80 	tst.w	r3, #256	; 0x100
    6016:	d007      	beq.n	6028 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    6018:	6823      	ldr	r3, [r4, #0]
    601a:	b10b      	cbz	r3, 6020 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    601c:	4620      	mov	r0, r4
    601e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6020:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6022:	f44f 7280 	mov.w	r2, #256	; 0x100
    6026:	819a      	strh	r2, [r3, #12]
    6028:	bd10      	pop	{r4, pc}
    602a:	bf00      	nop
    602c:	2000098c 	.word	0x2000098c

00006030 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6030:	b470      	push	{r4, r5, r6}
    6032:	b089      	sub	sp, #36	; 0x24
    6034:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6036:	466c      	mov	r4, sp
    6038:	4d0d      	ldr	r5, [pc, #52]	; (6070 <_sercom_get_hardware_index+0x40>)
    603a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    603c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    603e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6046:	9b00      	ldr	r3, [sp, #0]
    6048:	42b3      	cmp	r3, r6
    604a:	d00d      	beq.n	6068 <_sercom_get_hardware_index+0x38>
    604c:	4631      	mov	r1, r6
    604e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6050:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6052:	f853 2b04 	ldr.w	r2, [r3], #4
    6056:	428a      	cmp	r2, r1
    6058:	d007      	beq.n	606a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    605a:	3001      	adds	r0, #1
    605c:	2808      	cmp	r0, #8
    605e:	d1f8      	bne.n	6052 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    6060:	2000      	movs	r0, #0
}
    6062:	b009      	add	sp, #36	; 0x24
    6064:	bc70      	pop	{r4, r5, r6}
    6066:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6068:	2000      	movs	r0, #0
			return i;
    606a:	b2c0      	uxtb	r0, r0
    606c:	e7f9      	b.n	6062 <_sercom_get_hardware_index+0x32>
    606e:	bf00      	nop
    6070:	0000c054 	.word	0x0000c054

00006074 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    6074:	b510      	push	{r4, lr}
	void *hw = device->hw;
    6076:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6078:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    607a:	f013 0f01 	tst.w	r3, #1
    607e:	d003      	beq.n	6088 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    6080:	7da3      	ldrb	r3, [r4, #22]
    6082:	f013 0f01 	tst.w	r3, #1
    6086:	d112      	bne.n	60ae <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6088:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    608a:	f013 0f02 	tst.w	r3, #2
    608e:	d003      	beq.n	6098 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    6090:	7da3      	ldrb	r3, [r4, #22]
    6092:	f013 0f02 	tst.w	r3, #2
    6096:	d10f      	bne.n	60b8 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6098:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    609a:	f013 0f04 	tst.w	r3, #4
    609e:	d015      	beq.n	60cc <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    60a0:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    60a2:	f003 0337 	and.w	r3, r3, #55	; 0x37
    60a6:	b163      	cbz	r3, 60c2 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    60a8:	23ff      	movs	r3, #255	; 0xff
    60aa:	8363      	strh	r3, [r4, #26]
    60ac:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    60ae:	2301      	movs	r3, #1
    60b0:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    60b2:	6803      	ldr	r3, [r0, #0]
    60b4:	4798      	blx	r3
    60b6:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    60b8:	2302      	movs	r3, #2
    60ba:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    60bc:	6883      	ldr	r3, [r0, #8]
    60be:	4798      	blx	r3
    60c0:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    60c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    60c4:	6843      	ldr	r3, [r0, #4]
    60c6:	b2c9      	uxtb	r1, r1
    60c8:	4798      	blx	r3
    60ca:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    60cc:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    60ce:	09db      	lsrs	r3, r3, #7
    60d0:	d100      	bne.n	60d4 <_sercom_usart_interrupt_handler+0x60>
    60d2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    60d4:	2380      	movs	r3, #128	; 0x80
    60d6:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    60d8:	68c3      	ldr	r3, [r0, #12]
    60da:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    60dc:	8b63      	ldrh	r3, [r4, #26]
    60de:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    60e0:	8363      	strh	r3, [r4, #26]
    60e2:	e7f6      	b.n	60d2 <_sercom_usart_interrupt_handler+0x5e>

000060e4 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    60e4:	4b14      	ldr	r3, [pc, #80]	; (6138 <_sercom_init_irq_param+0x54>)
    60e6:	4298      	cmp	r0, r3
    60e8:	d014      	beq.n	6114 <_sercom_init_irq_param+0x30>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    60ea:	4b14      	ldr	r3, [pc, #80]	; (613c <_sercom_init_irq_param+0x58>)
    60ec:	4298      	cmp	r0, r3
    60ee:	d014      	beq.n	611a <_sercom_init_irq_param+0x36>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
    60f0:	4b13      	ldr	r3, [pc, #76]	; (6140 <_sercom_init_irq_param+0x5c>)
    60f2:	4298      	cmp	r0, r3
    60f4:	d014      	beq.n	6120 <_sercom_init_irq_param+0x3c>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    60f6:	4b13      	ldr	r3, [pc, #76]	; (6144 <_sercom_init_irq_param+0x60>)
    60f8:	4298      	cmp	r0, r3
    60fa:	d014      	beq.n	6126 <_sercom_init_irq_param+0x42>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    60fc:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    6100:	d014      	beq.n	612c <_sercom_init_irq_param+0x48>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    6102:	4b11      	ldr	r3, [pc, #68]	; (6148 <_sercom_init_irq_param+0x64>)
    6104:	4298      	cmp	r0, r3
    6106:	d014      	beq.n	6132 <_sercom_init_irq_param+0x4e>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    6108:	4b10      	ldr	r3, [pc, #64]	; (614c <_sercom_init_irq_param+0x68>)
    610a:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    610c:	bf04      	itt	eq
    610e:	4b10      	ldreq	r3, [pc, #64]	; (6150 <_sercom_init_irq_param+0x6c>)
    6110:	6199      	streq	r1, [r3, #24]
    6112:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    6114:	4b0e      	ldr	r3, [pc, #56]	; (6150 <_sercom_init_irq_param+0x6c>)
    6116:	6019      	str	r1, [r3, #0]
    6118:	e7ed      	b.n	60f6 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    611a:	4b0d      	ldr	r3, [pc, #52]	; (6150 <_sercom_init_irq_param+0x6c>)
    611c:	6059      	str	r1, [r3, #4]
    611e:	e7ed      	b.n	60fc <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    6120:	4b0b      	ldr	r3, [pc, #44]	; (6150 <_sercom_init_irq_param+0x6c>)
    6122:	6099      	str	r1, [r3, #8]
    6124:	e7ed      	b.n	6102 <_sercom_init_irq_param+0x1e>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    6126:	4b0a      	ldr	r3, [pc, #40]	; (6150 <_sercom_init_irq_param+0x6c>)
    6128:	60d9      	str	r1, [r3, #12]
    612a:	e7ed      	b.n	6108 <_sercom_init_irq_param+0x24>
		_sercom4_dev = (struct _usart_async_device *)dev;
    612c:	4b08      	ldr	r3, [pc, #32]	; (6150 <_sercom_init_irq_param+0x6c>)
    612e:	6119      	str	r1, [r3, #16]
    6130:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    6132:	4b07      	ldr	r3, [pc, #28]	; (6150 <_sercom_init_irq_param+0x6c>)
    6134:	6159      	str	r1, [r3, #20]
    6136:	4770      	bx	lr
    6138:	40003000 	.word	0x40003000
    613c:	40003400 	.word	0x40003400
    6140:	41012000 	.word	0x41012000
    6144:	41014000 	.word	0x41014000
    6148:	43000400 	.word	0x43000400
    614c:	43000800 	.word	0x43000800
    6150:	20000990 	.word	0x20000990

00006154 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6154:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6156:	4b03      	ldr	r3, [pc, #12]	; (6164 <_sercom_get_irq_num+0x10>)
    6158:	4798      	blx	r3
    615a:	0080      	lsls	r0, r0, #2
    615c:	302e      	adds	r0, #46	; 0x2e
}
    615e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6162:	bd08      	pop	{r3, pc}
    6164:	00006031 	.word	0x00006031

00006168 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6168:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    616a:	f013 0f01 	tst.w	r3, #1
    616e:	d109      	bne.n	6184 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6170:	6803      	ldr	r3, [r0, #0]
    6172:	f043 0302 	orr.w	r3, r3, #2
    6176:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6178:	69c3      	ldr	r3, [r0, #28]
    617a:	f013 0f03 	tst.w	r3, #3
    617e:	d1fb      	bne.n	6178 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    6180:	2000      	movs	r0, #0
    6182:	4770      	bx	lr
		return ERR_BUSY;
    6184:	f06f 0003 	mvn.w	r0, #3
}
    6188:	4770      	bx	lr
	...

0000618c <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    618c:	b538      	push	{r3, r4, r5, lr}
    618e:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    6190:	4b0b      	ldr	r3, [pc, #44]	; (61c0 <_spi_async_enable+0x34>)
    6192:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6194:	4620      	mov	r0, r4
    6196:	4b0b      	ldr	r3, [pc, #44]	; (61c4 <_spi_async_enable+0x38>)
    6198:	4798      	blx	r3
    619a:	1d01      	adds	r1, r0, #4
    619c:	b2c9      	uxtb	r1, r1
    619e:	2501      	movs	r5, #1
    61a0:	4c09      	ldr	r4, [pc, #36]	; (61c8 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    61a2:	1c43      	adds	r3, r0, #1
    61a4:	b2db      	uxtb	r3, r3
    61a6:	0942      	lsrs	r2, r0, #5
    61a8:	f000 001f 	and.w	r0, r0, #31
    61ac:	fa05 f000 	lsl.w	r0, r5, r0
    61b0:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    61b4:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    61b6:	4299      	cmp	r1, r3
    61b8:	d1f3      	bne.n	61a2 <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    61ba:	2000      	movs	r0, #0
    61bc:	bd38      	pop	{r3, r4, r5, pc}
    61be:	bf00      	nop
    61c0:	00006169 	.word	0x00006169
    61c4:	00006155 	.word	0x00006155
    61c8:	e000e100 	.word	0xe000e100

000061cc <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    61cc:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    61ce:	f013 0f03 	tst.w	r3, #3
    61d2:	d111      	bne.n	61f8 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    61d4:	69c3      	ldr	r3, [r0, #28]
    61d6:	f013 0f03 	tst.w	r3, #3
    61da:	d1fb      	bne.n	61d4 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    61dc:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    61de:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    61e2:	0709      	lsls	r1, r1, #28
    61e4:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    61e8:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    61ea:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    61ec:	69c3      	ldr	r3, [r0, #28]
    61ee:	f013 0f03 	tst.w	r3, #3
    61f2:	d1fb      	bne.n	61ec <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    61f4:	2000      	movs	r0, #0
    61f6:	4770      	bx	lr
		return ERR_BUSY;
    61f8:	f06f 0003 	mvn.w	r0, #3
}
    61fc:	4770      	bx	lr

000061fe <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    61fe:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    6200:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6202:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    6204:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6206:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6208:	f013 0f01 	tst.w	r3, #1
    620c:	d109      	bne.n	6222 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    620e:	f013 0f04 	tst.w	r3, #4
    6212:	d109      	bne.n	6228 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6214:	f013 0f02 	tst.w	r3, #2
    6218:	d109      	bne.n	622e <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    621a:	f013 0f80 	tst.w	r3, #128	; 0x80
    621e:	d10b      	bne.n	6238 <_spi_handler+0x3a>
    6220:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    6222:	6883      	ldr	r3, [r0, #8]
    6224:	4798      	blx	r3
    6226:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    6228:	68c3      	ldr	r3, [r0, #12]
    622a:	4798      	blx	r3
    622c:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    622e:	2302      	movs	r3, #2
    6230:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    6232:	6903      	ldr	r3, [r0, #16]
    6234:	4798      	blx	r3
    6236:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6238:	2304      	movs	r3, #4
    623a:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    623c:	2380      	movs	r3, #128	; 0x80
    623e:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6240:	6943      	ldr	r3, [r0, #20]
    6242:	f06f 0112 	mvn.w	r1, #18
    6246:	4798      	blx	r3
	}
}
    6248:	e7ea      	b.n	6220 <_spi_handler+0x22>
	...

0000624c <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    624c:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    624e:	4b03      	ldr	r3, [pc, #12]	; (625c <_spi_get_tx_dma_channel+0x10>)
    6250:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    6252:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6254:	bf0c      	ite	eq
    6256:	2008      	moveq	r0, #8
    6258:	2000      	movne	r0, #0
    625a:	bd08      	pop	{r3, pc}
    625c:	00006031 	.word	0x00006031

00006260 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    6260:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6262:	4b03      	ldr	r3, [pc, #12]	; (6270 <_spi_get_rx_dma_channel+0x10>)
    6264:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6266:	2807      	cmp	r0, #7
    6268:	bf8c      	ite	hi
    626a:	2000      	movhi	r0, #0
    626c:	2001      	movls	r0, #1
    626e:	bd08      	pop	{r3, pc}
    6270:	00006031 	.word	0x00006031

00006274 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    6274:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    6276:	6883      	ldr	r3, [r0, #8]
    6278:	689b      	ldr	r3, [r3, #8]
    627a:	b103      	cbz	r3, 627e <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    627c:	4798      	blx	r3
    627e:	bd08      	pop	{r3, pc}

00006280 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    6280:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    6282:	6883      	ldr	r3, [r0, #8]
    6284:	685b      	ldr	r3, [r3, #4]
    6286:	b103      	cbz	r3, 628a <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    6288:	4798      	blx	r3
    628a:	bd08      	pop	{r3, pc}

0000628c <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    628c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    628e:	6883      	ldr	r3, [r0, #8]
    6290:	68db      	ldr	r3, [r3, #12]
    6292:	b103      	cbz	r3, 6296 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    6294:	4798      	blx	r3
    6296:	bd08      	pop	{r3, pc}

00006298 <_usart_init>:
{
    6298:	b510      	push	{r4, lr}
    629a:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    629c:	4b48      	ldr	r3, [pc, #288]	; (63c0 <_usart_init+0x128>)
    629e:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    62a0:	2800      	cmp	r0, #0
    62a2:	d06a      	beq.n	637a <_usart_init+0xe2>
    62a4:	2801      	cmp	r0, #1
    62a6:	d062      	beq.n	636e <_usart_init+0xd6>
    62a8:	2802      	cmp	r0, #2
    62aa:	d062      	beq.n	6372 <_usart_init+0xda>
    62ac:	2804      	cmp	r0, #4
    62ae:	d062      	beq.n	6376 <_usart_init+0xde>
    62b0:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    62b2:	bf08      	it	eq
    62b4:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    62b6:	d006      	beq.n	62c6 <_usart_init+0x2e>
	ASSERT(false);
    62b8:	f44f 721e 	mov.w	r2, #632	; 0x278
    62bc:	4941      	ldr	r1, [pc, #260]	; (63c4 <_usart_init+0x12c>)
    62be:	2000      	movs	r0, #0
    62c0:	4b41      	ldr	r3, [pc, #260]	; (63c8 <_usart_init+0x130>)
    62c2:	4798      	blx	r3
	return 0;
    62c4:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    62c6:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    62c8:	f013 0f01 	tst.w	r3, #1
    62cc:	d122      	bne.n	6314 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    62ce:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    62d2:	4a3e      	ldr	r2, [pc, #248]	; (63cc <_usart_init+0x134>)
    62d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    62d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    62da:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    62de:	69e3      	ldr	r3, [r4, #28]
    62e0:	f013 0f03 	tst.w	r3, #3
    62e4:	d1fb      	bne.n	62de <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    62e6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    62e8:	f013 0f02 	tst.w	r3, #2
    62ec:	d00b      	beq.n	6306 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    62ee:	6823      	ldr	r3, [r4, #0]
    62f0:	f023 0302 	bic.w	r3, r3, #2
    62f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    62f6:	69e3      	ldr	r3, [r4, #28]
    62f8:	f013 0f03 	tst.w	r3, #3
    62fc:	d1fb      	bne.n	62f6 <_usart_init+0x5e>
    62fe:	69e3      	ldr	r3, [r4, #28]
    6300:	f013 0f02 	tst.w	r3, #2
    6304:	d1fb      	bne.n	62fe <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    6306:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    630a:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    630c:	69e3      	ldr	r3, [r4, #28]
    630e:	f013 0f03 	tst.w	r3, #3
    6312:	d1fb      	bne.n	630c <_usart_init+0x74>
    6314:	69e3      	ldr	r3, [r4, #28]
    6316:	f013 0f01 	tst.w	r3, #1
    631a:	d1fb      	bne.n	6314 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    631c:	460a      	mov	r2, r1
    631e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6322:	4b2a      	ldr	r3, [pc, #168]	; (63cc <_usart_init+0x134>)
    6324:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6328:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    632a:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    632c:	69e3      	ldr	r3, [r4, #28]
    632e:	f013 0f03 	tst.w	r3, #3
    6332:	d1fb      	bne.n	632c <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    6334:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6338:	4924      	ldr	r1, [pc, #144]	; (63cc <_usart_init+0x134>)
    633a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    6340:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6342:	69e3      	ldr	r3, [r4, #28]
    6344:	f013 0f1f 	tst.w	r3, #31
    6348:	d1fb      	bne.n	6342 <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    634a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    634e:	491f      	ldr	r1, [pc, #124]	; (63cc <_usart_init+0x134>)
    6350:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    6356:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    6358:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    635c:	d10f      	bne.n	637e <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    635e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6362:	491a      	ldr	r1, [pc, #104]	; (63cc <_usart_init+0x134>)
    6364:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6368:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    636a:	81a3      	strh	r3, [r4, #12]
    636c:	e016      	b.n	639c <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    636e:	2101      	movs	r1, #1
    6370:	e7a9      	b.n	62c6 <_usart_init+0x2e>
    6372:	2102      	movs	r1, #2
    6374:	e7a7      	b.n	62c6 <_usart_init+0x2e>
    6376:	2103      	movs	r1, #3
    6378:	e7a5      	b.n	62c6 <_usart_init+0x2e>
    637a:	2100      	movs	r1, #0
    637c:	e7a3      	b.n	62c6 <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    637e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6382:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6386:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    6388:	89a1      	ldrh	r1, [r4, #12]
    638a:	f360 010c 	bfi	r1, r0, #0, #13
    638e:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    6390:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    6394:	89a3      	ldrh	r3, [r4, #12]
    6396:	f361 334f 	bfi	r3, r1, #13, #3
    639a:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    639c:	4b0b      	ldr	r3, [pc, #44]	; (63cc <_usart_init+0x134>)
    639e:	0051      	lsls	r1, r2, #1
    63a0:	1888      	adds	r0, r1, r2
    63a2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    63a6:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    63aa:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    63ac:	440a      	add	r2, r1
    63ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    63b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    63b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    63ba:	2000      	movs	r0, #0
    63bc:	bd10      	pop	{r4, pc}
    63be:	bf00      	nop
    63c0:	00006031 	.word	0x00006031
    63c4:	0000c128 	.word	0x0000c128
    63c8:	00005271 	.word	0x00005271
    63cc:	0000c054 	.word	0x0000c054

000063d0 <_get_i2cm_index>:
{
    63d0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    63d2:	4b07      	ldr	r3, [pc, #28]	; (63f0 <_get_i2cm_index+0x20>)
    63d4:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    63d6:	2805      	cmp	r0, #5
    63d8:	d008      	beq.n	63ec <_get_i2cm_index+0x1c>
	ASSERT(false);
    63da:	f240 32f3 	movw	r2, #1011	; 0x3f3
    63de:	4905      	ldr	r1, [pc, #20]	; (63f4 <_get_i2cm_index+0x24>)
    63e0:	2000      	movs	r0, #0
    63e2:	4b05      	ldr	r3, [pc, #20]	; (63f8 <_get_i2cm_index+0x28>)
    63e4:	4798      	blx	r3
	return -1;
    63e6:	f04f 30ff 	mov.w	r0, #4294967295
}
    63ea:	bd08      	pop	{r3, pc}
			return i;
    63ec:	2000      	movs	r0, #0
    63ee:	bd08      	pop	{r3, pc}
    63f0:	00006031 	.word	0x00006031
    63f4:	0000c128 	.word	0x0000c128
    63f8:	00005271 	.word	0x00005271

000063fc <_i2c_m_sync_init_impl>:
{
    63fc:	b538      	push	{r3, r4, r5, lr}
    63fe:	4605      	mov	r5, r0
    6400:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    6402:	4608      	mov	r0, r1
    6404:	4b34      	ldr	r3, [pc, #208]	; (64d8 <_i2c_m_sync_init_impl+0xdc>)
    6406:	4798      	blx	r3
    6408:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    640a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    640c:	f013 0f01 	tst.w	r3, #1
    6410:	d123      	bne.n	645a <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6412:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6416:	4a31      	ldr	r2, [pc, #196]	; (64dc <_i2c_m_sync_init_impl+0xe0>)
    6418:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    641c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6420:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6424:	69e3      	ldr	r3, [r4, #28]
    6426:	f013 0f03 	tst.w	r3, #3
    642a:	d1fb      	bne.n	6424 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    642c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    642e:	f013 0f02 	tst.w	r3, #2
    6432:	d00b      	beq.n	644c <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6434:	6823      	ldr	r3, [r4, #0]
    6436:	f023 0302 	bic.w	r3, r3, #2
    643a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    643c:	69e3      	ldr	r3, [r4, #28]
    643e:	f013 0f03 	tst.w	r3, #3
    6442:	d1fb      	bne.n	643c <_i2c_m_sync_init_impl+0x40>
    6444:	69e3      	ldr	r3, [r4, #28]
    6446:	f013 0f02 	tst.w	r3, #2
    644a:	d1fb      	bne.n	6444 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    644c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6450:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6452:	69e3      	ldr	r3, [r4, #28]
    6454:	f013 0f03 	tst.w	r3, #3
    6458:	d1fb      	bne.n	6452 <_i2c_m_sync_init_impl+0x56>
    645a:	69e3      	ldr	r3, [r4, #28]
    645c:	f013 0f01 	tst.w	r3, #1
    6460:	d1fb      	bne.n	645a <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6462:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6466:	4a1d      	ldr	r2, [pc, #116]	; (64dc <_i2c_m_sync_init_impl+0xe0>)
    6468:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    646c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6470:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6472:	69e3      	ldr	r3, [r4, #28]
    6474:	f013 0f03 	tst.w	r3, #3
    6478:	d1fb      	bne.n	6472 <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    647a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    647e:	4917      	ldr	r1, [pc, #92]	; (64dc <_i2c_m_sync_init_impl+0xe0>)
    6480:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6484:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6488:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    648a:	69e3      	ldr	r3, [r4, #28]
    648c:	f013 0f04 	tst.w	r3, #4
    6490:	d1fb      	bne.n	648a <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6492:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6496:	4911      	ldr	r1, [pc, #68]	; (64dc <_i2c_m_sync_init_impl+0xe0>)
    6498:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    649c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    64a0:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    64a2:	f3c2 6301 	ubfx	r3, r2, #24, #2
    64a6:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    64a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    64aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    64ae:	2b01      	cmp	r3, #1
    64b0:	bf94      	ite	ls
    64b2:	2300      	movls	r3, #0
    64b4:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    64b6:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    64ba:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    64bc:	69e3      	ldr	r3, [r4, #28]
    64be:	f013 0f04 	tst.w	r3, #4
    64c2:	d1fb      	bne.n	64bc <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    64c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    64c8:	4b04      	ldr	r3, [pc, #16]	; (64dc <_i2c_m_sync_init_impl+0xe0>)
    64ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    64ce:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    64d2:	81eb      	strh	r3, [r5, #14]
}
    64d4:	2000      	movs	r0, #0
    64d6:	bd38      	pop	{r3, r4, r5, pc}
    64d8:	000063d1 	.word	0x000063d1
    64dc:	0000c054 	.word	0x0000c054

000064e0 <_sercom_i2c_m_irq_handler>:
{
    64e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64e4:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    64e6:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    64e8:	7e26      	ldrb	r6, [r4, #24]
    64ea:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    64ec:	f8df 8234 	ldr.w	r8, [pc, #564]	; 6724 <_sercom_i2c_m_irq_handler+0x244>
    64f0:	f240 4265 	movw	r2, #1125	; 0x465
    64f4:	4641      	mov	r1, r8
    64f6:	3000      	adds	r0, #0
    64f8:	bf18      	it	ne
    64fa:	2001      	movne	r0, #1
    64fc:	4f88      	ldr	r7, [pc, #544]	; (6720 <_sercom_i2c_m_irq_handler+0x240>)
    64fe:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    6500:	6928      	ldr	r0, [r5, #16]
    6502:	f240 4266 	movw	r2, #1126	; 0x466
    6506:	4641      	mov	r1, r8
    6508:	3000      	adds	r0, #0
    650a:	bf18      	it	ne
    650c:	2001      	movne	r0, #1
    650e:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    6510:	f016 0f80 	tst.w	r6, #128	; 0x80
    6514:	f040 80f4 	bne.w	6700 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6518:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    651a:	69e3      	ldr	r3, [r4, #28]
    651c:	f013 0f04 	tst.w	r3, #4
    6520:	d1fb      	bne.n	651a <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6522:	8b63      	ldrh	r3, [r4, #26]
    6524:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    6526:	f016 0f01 	tst.w	r6, #1
    652a:	f000 8090 	beq.w	664e <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    652e:	f013 0f02 	tst.w	r3, #2
    6532:	d022      	beq.n	657a <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6534:	2201      	movs	r2, #1
    6536:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    6538:	886a      	ldrh	r2, [r5, #2]
    653a:	b292      	uxth	r2, r2
    653c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6540:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    6542:	886a      	ldrh	r2, [r5, #2]
    6544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6548:	0412      	lsls	r2, r2, #16
    654a:	0c12      	lsrs	r2, r2, #16
    654c:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    654e:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    6552:	2b00      	cmp	r3, #0
    6554:	bf14      	ite	ne
    6556:	f06f 0104 	mvnne.w	r1, #4
    655a:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    655e:	886b      	ldrh	r3, [r5, #2]
    6560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6564:	041b      	lsls	r3, r3, #16
    6566:	0c1b      	lsrs	r3, r3, #16
    6568:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    656a:	696b      	ldr	r3, [r5, #20]
    656c:	2b00      	cmp	r3, #0
    656e:	f000 80c5 	beq.w	66fc <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    6572:	4628      	mov	r0, r5
    6574:	4798      	blx	r3
    6576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    657a:	f013 0f04 	tst.w	r3, #4
    657e:	d124      	bne.n	65ca <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    6580:	886b      	ldrh	r3, [r5, #2]
    6582:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6586:	d03e      	beq.n	6606 <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6588:	882b      	ldrh	r3, [r5, #0]
    658a:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    658c:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6590:	69e3      	ldr	r3, [r4, #28]
    6592:	f013 0f04 	tst.w	r3, #4
    6596:	d1fb      	bne.n	6590 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6598:	6a63      	ldr	r3, [r4, #36]	; 0x24
    659a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    659e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    65a2:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    65a4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    65a6:	69e3      	ldr	r3, [r4, #28]
    65a8:	f013 0f04 	tst.w	r3, #4
    65ac:	d1fb      	bne.n	65a6 <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    65ae:	886b      	ldrh	r3, [r5, #2]
    65b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    65b4:	041b      	lsls	r3, r3, #16
    65b6:	0c1b      	lsrs	r3, r3, #16
    65b8:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    65ba:	69ab      	ldr	r3, [r5, #24]
    65bc:	2b00      	cmp	r3, #0
    65be:	f000 8088 	beq.w	66d2 <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    65c2:	4628      	mov	r0, r5
    65c4:	4798      	blx	r3
    65c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    65ca:	686b      	ldr	r3, [r5, #4]
    65cc:	2b00      	cmp	r3, #0
    65ce:	dd04      	ble.n	65da <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    65d0:	886b      	ldrh	r3, [r5, #2]
    65d2:	b29b      	uxth	r3, r3
    65d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    65d8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    65da:	886b      	ldrh	r3, [r5, #2]
    65dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    65e0:	d108      	bne.n	65f4 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    65e2:	886b      	ldrh	r3, [r5, #2]
    65e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65e8:	041b      	lsls	r3, r3, #16
    65ea:	0c1b      	lsrs	r3, r3, #16
    65ec:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    65ee:	f06f 0101 	mvn.w	r1, #1
    65f2:	e7b4      	b.n	655e <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    65f4:	6863      	ldr	r3, [r4, #4]
    65f6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    65fa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    65fc:	69e3      	ldr	r3, [r4, #28]
    65fe:	f013 0f04 	tst.w	r3, #4
    6602:	d1fb      	bne.n	65fc <_sercom_i2c_m_irq_handler+0x11c>
    6604:	e7ed      	b.n	65e2 <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    6606:	686b      	ldr	r3, [r5, #4]
    6608:	b99b      	cbnz	r3, 6632 <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    660a:	886b      	ldrh	r3, [r5, #2]
    660c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6610:	d106      	bne.n	6620 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    6612:	886b      	ldrh	r3, [r5, #2]
    6614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6618:	041b      	lsls	r3, r3, #16
    661a:	0c1b      	lsrs	r3, r3, #16
    661c:	806b      	strh	r3, [r5, #2]
    661e:	e7cc      	b.n	65ba <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6620:	6863      	ldr	r3, [r4, #4]
    6622:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6626:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6628:	69e3      	ldr	r3, [r4, #28]
    662a:	f013 0f04 	tst.w	r3, #4
    662e:	d1fb      	bne.n	6628 <_sercom_i2c_m_irq_handler+0x148>
    6630:	e7ef      	b.n	6612 <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6632:	68ab      	ldr	r3, [r5, #8]
    6634:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6636:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6638:	69e3      	ldr	r3, [r4, #28]
    663a:	f013 0f04 	tst.w	r3, #4
    663e:	d1fb      	bne.n	6638 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    6640:	68ab      	ldr	r3, [r5, #8]
    6642:	3301      	adds	r3, #1
    6644:	60ab      	str	r3, [r5, #8]
				msg->len--;
    6646:	686b      	ldr	r3, [r5, #4]
    6648:	3b01      	subs	r3, #1
    664a:	606b      	str	r3, [r5, #4]
    664c:	e7b5      	b.n	65ba <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    664e:	f016 0f02 	tst.w	r6, #2
    6652:	d041      	beq.n	66d8 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6654:	686a      	ldr	r2, [r5, #4]
    6656:	2a00      	cmp	r2, #0
    6658:	d036      	beq.n	66c8 <_sercom_i2c_m_irq_handler+0x1e8>
    665a:	f013 0f04 	tst.w	r3, #4
    665e:	d133      	bne.n	66c8 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6660:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    6664:	3a01      	subs	r2, #1
    6666:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6668:	2a00      	cmp	r2, #0
    666a:	d137      	bne.n	66dc <_sercom_i2c_m_irq_handler+0x1fc>
    666c:	2900      	cmp	r1, #0
    666e:	d039      	beq.n	66e4 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    6670:	886b      	ldrh	r3, [r5, #2]
    6672:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6676:	d116      	bne.n	66a6 <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    6678:	886b      	ldrh	r3, [r5, #2]
    667a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    667e:	041b      	lsls	r3, r3, #16
    6680:	0c1b      	lsrs	r3, r3, #16
    6682:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6684:	68aa      	ldr	r2, [r5, #8]
    6686:	1c53      	adds	r3, r2, #1
    6688:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    668a:	69e3      	ldr	r3, [r4, #28]
    668c:	f013 0f04 	tst.w	r3, #4
    6690:	d1fb      	bne.n	668a <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6694:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6696:	2302      	movs	r3, #2
    6698:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    669a:	69eb      	ldr	r3, [r5, #28]
    669c:	b1e3      	cbz	r3, 66d8 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    669e:	4628      	mov	r0, r5
    66a0:	4798      	blx	r3
    66a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    66a6:	6863      	ldr	r3, [r4, #4]
    66a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    66ac:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    66ae:	69e3      	ldr	r3, [r4, #28]
    66b0:	f013 0f04 	tst.w	r3, #4
    66b4:	d1fb      	bne.n	66ae <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    66b6:	6863      	ldr	r3, [r4, #4]
    66b8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    66bc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    66be:	69e3      	ldr	r3, [r4, #28]
    66c0:	f013 0f04 	tst.w	r3, #4
    66c4:	d1fb      	bne.n	66be <_sercom_i2c_m_irq_handler+0x1de>
    66c6:	e7d7      	b.n	6678 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    66c8:	2302      	movs	r3, #2
    66ca:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    66cc:	f06f 0101 	mvn.w	r1, #1
    66d0:	e745      	b.n	655e <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    66d2:	f016 0f02 	tst.w	r6, #2
    66d6:	d1e0      	bne.n	669a <_sercom_i2c_m_irq_handler+0x1ba>
    66d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    66dc:	2a01      	cmp	r2, #1
    66de:	d1d1      	bne.n	6684 <_sercom_i2c_m_irq_handler+0x1a4>
    66e0:	2900      	cmp	r1, #0
    66e2:	d0cf      	beq.n	6684 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    66e4:	6863      	ldr	r3, [r4, #4]
    66e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    66ea:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    66ec:	69e3      	ldr	r3, [r4, #28]
    66ee:	f013 0f04 	tst.w	r3, #4
    66f2:	d1fb      	bne.n	66ec <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    66f4:	686b      	ldr	r3, [r5, #4]
    66f6:	2b00      	cmp	r3, #0
    66f8:	d0ba      	beq.n	6670 <_sercom_i2c_m_irq_handler+0x190>
    66fa:	e7c3      	b.n	6684 <_sercom_i2c_m_irq_handler+0x1a4>
    66fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6700:	886b      	ldrh	r3, [r5, #2]
    6702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6706:	041b      	lsls	r3, r3, #16
    6708:	0c1b      	lsrs	r3, r3, #16
    670a:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    670c:	696b      	ldr	r3, [r5, #20]
    670e:	2b00      	cmp	r3, #0
    6710:	d0e2      	beq.n	66d8 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6712:	f06f 0104 	mvn.w	r1, #4
    6716:	4628      	mov	r0, r5
    6718:	4798      	blx	r3
    671a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    671e:	bf00      	nop
    6720:	00005271 	.word	0x00005271
    6724:	0000c128 	.word	0x0000c128

00006728 <_usart_async_init>:
{
    6728:	b570      	push	{r4, r5, r6, lr}
    672a:	460d      	mov	r5, r1
	ASSERT(device);
    672c:	4606      	mov	r6, r0
    672e:	22d8      	movs	r2, #216	; 0xd8
    6730:	4917      	ldr	r1, [pc, #92]	; (6790 <_usart_async_init+0x68>)
    6732:	3000      	adds	r0, #0
    6734:	bf18      	it	ne
    6736:	2001      	movne	r0, #1
    6738:	4b16      	ldr	r3, [pc, #88]	; (6794 <_usart_async_init+0x6c>)
    673a:	4798      	blx	r3
	init_status = _usart_init(hw);
    673c:	4628      	mov	r0, r5
    673e:	4b16      	ldr	r3, [pc, #88]	; (6798 <_usart_async_init+0x70>)
    6740:	4798      	blx	r3
	if (init_status) {
    6742:	4604      	mov	r4, r0
    6744:	b108      	cbz	r0, 674a <_usart_async_init+0x22>
}
    6746:	4620      	mov	r0, r4
    6748:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    674a:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    674c:	4631      	mov	r1, r6
    674e:	4628      	mov	r0, r5
    6750:	4b12      	ldr	r3, [pc, #72]	; (679c <_usart_async_init+0x74>)
    6752:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6754:	4628      	mov	r0, r5
    6756:	4b12      	ldr	r3, [pc, #72]	; (67a0 <_usart_async_init+0x78>)
    6758:	4798      	blx	r3
    675a:	1d01      	adds	r1, r0, #4
    675c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    675e:	2501      	movs	r5, #1
    6760:	f000 021f 	and.w	r2, r0, #31
    6764:	fa05 f202 	lsl.w	r2, r5, r2
    6768:	0943      	lsrs	r3, r0, #5
    676a:	009b      	lsls	r3, r3, #2
    676c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6770:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    677c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6780:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6784:	601a      	str	r2, [r3, #0]
		irq++;
    6786:	3001      	adds	r0, #1
    6788:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    678a:	4281      	cmp	r1, r0
    678c:	d1e8      	bne.n	6760 <_usart_async_init+0x38>
    678e:	e7da      	b.n	6746 <_usart_async_init+0x1e>
    6790:	0000c128 	.word	0x0000c128
    6794:	00005271 	.word	0x00005271
    6798:	00006299 	.word	0x00006299
    679c:	000060e5 	.word	0x000060e5
    67a0:	00006155 	.word	0x00006155

000067a4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    67a4:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    67a6:	6813      	ldr	r3, [r2, #0]
    67a8:	f043 0302 	orr.w	r3, r3, #2
    67ac:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    67ae:	69d3      	ldr	r3, [r2, #28]
    67b0:	f013 0f03 	tst.w	r3, #3
    67b4:	d1fb      	bne.n	67ae <_usart_async_enable+0xa>
}
    67b6:	4770      	bx	lr

000067b8 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    67b8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    67ba:	6299      	str	r1, [r3, #40]	; 0x28
    67bc:	4770      	bx	lr

000067be <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    67be:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    67c0:	2201      	movs	r2, #1
    67c2:	759a      	strb	r2, [r3, #22]
    67c4:	4770      	bx	lr

000067c6 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    67c6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    67c8:	2202      	movs	r2, #2
    67ca:	759a      	strb	r2, [r3, #22]
    67cc:	4770      	bx	lr
	...

000067d0 <_usart_async_set_irq_state>:
{
    67d0:	b570      	push	{r4, r5, r6, lr}
    67d2:	460c      	mov	r4, r1
    67d4:	4616      	mov	r6, r2
	ASSERT(device);
    67d6:	4605      	mov	r5, r0
    67d8:	f44f 720e 	mov.w	r2, #568	; 0x238
    67dc:	4915      	ldr	r1, [pc, #84]	; (6834 <_usart_async_set_irq_state+0x64>)
    67de:	3000      	adds	r0, #0
    67e0:	bf18      	it	ne
    67e2:	2001      	movne	r0, #1
    67e4:	4b14      	ldr	r3, [pc, #80]	; (6838 <_usart_async_set_irq_state+0x68>)
    67e6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    67e8:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    67ec:	d10d      	bne.n	680a <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    67ee:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    67f0:	b92e      	cbnz	r6, 67fe <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    67f2:	2201      	movs	r2, #1
    67f4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    67f6:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    67f8:	2202      	movs	r2, #2
    67fa:	751a      	strb	r2, [r3, #20]
    67fc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    67fe:	2201      	movs	r2, #1
    6800:	759a      	strb	r2, [r3, #22]
    6802:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    6804:	2202      	movs	r2, #2
    6806:	759a      	strb	r2, [r3, #22]
    6808:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    680a:	2c01      	cmp	r4, #1
    680c:	d002      	beq.n	6814 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    680e:	2c03      	cmp	r4, #3
    6810:	d008      	beq.n	6824 <_usart_async_set_irq_state+0x54>
    6812:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    6814:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    6816:	b916      	cbnz	r6, 681e <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    6818:	2204      	movs	r2, #4
    681a:	751a      	strb	r2, [r3, #20]
    681c:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    681e:	2204      	movs	r2, #4
    6820:	759a      	strb	r2, [r3, #22]
    6822:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    6824:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    6826:	b116      	cbz	r6, 682e <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    6828:	2280      	movs	r2, #128	; 0x80
    682a:	759a      	strb	r2, [r3, #22]
}
    682c:	e7f1      	b.n	6812 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    682e:	2280      	movs	r2, #128	; 0x80
    6830:	751a      	strb	r2, [r3, #20]
    6832:	bd70      	pop	{r4, r5, r6, pc}
    6834:	0000c128 	.word	0x0000c128
    6838:	00005271 	.word	0x00005271

0000683c <_i2c_m_async_init>:
{
    683c:	b570      	push	{r4, r5, r6, lr}
    683e:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    6840:	4606      	mov	r6, r0
    6842:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
    6846:	4918      	ldr	r1, [pc, #96]	; (68a8 <_i2c_m_async_init+0x6c>)
    6848:	3000      	adds	r0, #0
    684a:	bf18      	it	ne
    684c:	2001      	movne	r0, #1
    684e:	4b17      	ldr	r3, [pc, #92]	; (68ac <_i2c_m_async_init+0x70>)
    6850:	4798      	blx	r3
	i2c_dev->hw = hw;
    6852:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6854:	4629      	mov	r1, r5
    6856:	4630      	mov	r0, r6
    6858:	4b15      	ldr	r3, [pc, #84]	; (68b0 <_i2c_m_async_init+0x74>)
    685a:	4798      	blx	r3
	if (init_status) {
    685c:	4604      	mov	r4, r0
    685e:	b108      	cbz	r0, 6864 <_i2c_m_async_init+0x28>
}
    6860:	4620      	mov	r0, r4
    6862:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6864:	4631      	mov	r1, r6
    6866:	4628      	mov	r0, r5
    6868:	4b12      	ldr	r3, [pc, #72]	; (68b4 <_i2c_m_async_init+0x78>)
    686a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    686c:	4628      	mov	r0, r5
    686e:	4b12      	ldr	r3, [pc, #72]	; (68b8 <_i2c_m_async_init+0x7c>)
    6870:	4798      	blx	r3
    6872:	1d01      	adds	r1, r0, #4
    6874:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6876:	2501      	movs	r5, #1
    6878:	f000 021f 	and.w	r2, r0, #31
    687c:	fa05 f202 	lsl.w	r2, r5, r2
    6880:	0943      	lsrs	r3, r0, #5
    6882:	009b      	lsls	r3, r3, #2
    6884:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6888:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    688c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6894:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6898:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    689c:	601a      	str	r2, [r3, #0]
		irq++;
    689e:	3001      	adds	r0, #1
    68a0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    68a2:	4281      	cmp	r1, r0
    68a4:	d1e8      	bne.n	6878 <_i2c_m_async_init+0x3c>
    68a6:	e7db      	b.n	6860 <_i2c_m_async_init+0x24>
    68a8:	0000c128 	.word	0x0000c128
    68ac:	00005271 	.word	0x00005271
    68b0:	000063fd 	.word	0x000063fd
    68b4:	000060e5 	.word	0x000060e5
    68b8:	00006155 	.word	0x00006155

000068bc <_i2c_m_async_transfer>:
{
    68bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68c0:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    68c2:	4605      	mov	r5, r0
    68c4:	f110 0800 	adds.w	r8, r0, #0
    68c8:	bf18      	it	ne
    68ca:	f04f 0801 	movne.w	r8, #1
    68ce:	4f45      	ldr	r7, [pc, #276]	; (69e4 <_i2c_m_async_transfer+0x128>)
    68d0:	f240 522e 	movw	r2, #1326	; 0x52e
    68d4:	4639      	mov	r1, r7
    68d6:	4640      	mov	r0, r8
    68d8:	4e43      	ldr	r6, [pc, #268]	; (69e8 <_i2c_m_async_transfer+0x12c>)
    68da:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    68dc:	6928      	ldr	r0, [r5, #16]
    68de:	f240 522f 	movw	r2, #1327	; 0x52f
    68e2:	4639      	mov	r1, r7
    68e4:	3000      	adds	r0, #0
    68e6:	bf18      	it	ne
    68e8:	2001      	movne	r0, #1
    68ea:	47b0      	blx	r6
	ASSERT(msg);
    68ec:	f44f 62a6 	mov.w	r2, #1328	; 0x530
    68f0:	4639      	mov	r1, r7
    68f2:	1c20      	adds	r0, r4, #0
    68f4:	bf18      	it	ne
    68f6:	2001      	movne	r0, #1
    68f8:	47b0      	blx	r6
	if (msg->len == 0) {
    68fa:	6860      	ldr	r0, [r4, #4]
    68fc:	2800      	cmp	r0, #0
    68fe:	d06f      	beq.n	69e0 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6900:	886b      	ldrh	r3, [r5, #2]
    6902:	f413 7f80 	tst.w	r3, #256	; 0x100
    6906:	d169      	bne.n	69dc <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    6908:	8863      	ldrh	r3, [r4, #2]
    690a:	b29b      	uxth	r3, r3
    690c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6910:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    6912:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    6916:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    691a:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    691c:	6853      	ldr	r3, [r2, #4]
    691e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6922:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6924:	69d3      	ldr	r3, [r2, #28]
    6926:	f013 0f04 	tst.w	r3, #4
    692a:	d1fb      	bne.n	6924 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    692c:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    692e:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    6930:	f240 5206 	movw	r2, #1286	; 0x506
    6934:	492b      	ldr	r1, [pc, #172]	; (69e4 <_i2c_m_async_transfer+0x128>)
    6936:	4640      	mov	r0, r8
    6938:	4b2b      	ldr	r3, [pc, #172]	; (69e8 <_i2c_m_async_transfer+0x12c>)
    693a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    693c:	686b      	ldr	r3, [r5, #4]
    693e:	2b01      	cmp	r3, #1
    6940:	d02a      	beq.n	6998 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6942:	6863      	ldr	r3, [r4, #4]
    6944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    6948:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    694a:	69e3      	ldr	r3, [r4, #28]
    694c:	f013 0f04 	tst.w	r3, #4
    6950:	d1fb      	bne.n	694a <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    6952:	882b      	ldrh	r3, [r5, #0]
    6954:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6958:	d02a      	beq.n	69b0 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    695a:	886a      	ldrh	r2, [r5, #2]
    695c:	f012 0f01 	tst.w	r2, #1
    6960:	d004      	beq.n	696c <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    6962:	886a      	ldrh	r2, [r5, #2]
    6964:	b292      	uxth	r2, r2
    6966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    696a:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    696c:	f240 72fe 	movw	r2, #2046	; 0x7fe
    6970:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    6974:	69e3      	ldr	r3, [r4, #28]
    6976:	f013 0f04 	tst.w	r3, #4
    697a:	d1fb      	bne.n	6974 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    697c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    697e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6986:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6988:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    698a:	69e3      	ldr	r3, [r4, #28]
    698c:	f013 0f04 	tst.w	r3, #4
    6990:	d1fb      	bne.n	698a <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    6992:	2000      	movs	r0, #0
    6994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    6998:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    699c:	d0d1      	beq.n	6942 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    699e:	6863      	ldr	r3, [r4, #4]
    69a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    69a4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    69a6:	69e3      	ldr	r3, [r4, #28]
    69a8:	f013 0f04 	tst.w	r3, #4
    69ac:	d1fb      	bne.n	69a6 <_i2c_m_async_transfer+0xea>
    69ae:	e7d0      	b.n	6952 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    69b0:	8869      	ldrh	r1, [r5, #2]
    69b2:	005a      	lsls	r2, r3, #1
    69b4:	b2d2      	uxtb	r2, r2
    69b6:	f001 0301 	and.w	r3, r1, #1
    69ba:	431a      	orrs	r2, r3
    69bc:	69e3      	ldr	r3, [r4, #28]
    69be:	f013 0f04 	tst.w	r3, #4
    69c2:	d1fb      	bne.n	69bc <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    69c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    69c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    69ca:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    69cc:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    69ce:	69e3      	ldr	r3, [r4, #28]
    69d0:	f013 0f04 	tst.w	r3, #4
    69d4:	d1fb      	bne.n	69ce <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    69d6:	2000      	movs	r0, #0
    69d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    69dc:	f06f 0003 	mvn.w	r0, #3
}
    69e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69e4:	0000c128 	.word	0x0000c128
    69e8:	00005271 	.word	0x00005271

000069ec <_i2c_m_async_register_callback>:
	switch (type) {
    69ec:	2901      	cmp	r1, #1
    69ee:	d006      	beq.n	69fe <_i2c_m_async_register_callback+0x12>
    69f0:	b119      	cbz	r1, 69fa <_i2c_m_async_register_callback+0xe>
    69f2:	2902      	cmp	r1, #2
    69f4:	d005      	beq.n	6a02 <_i2c_m_async_register_callback+0x16>
}
    69f6:	2000      	movs	r0, #0
    69f8:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    69fa:	6142      	str	r2, [r0, #20]
		break;
    69fc:	e7fb      	b.n	69f6 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    69fe:	6182      	str	r2, [r0, #24]
		break;
    6a00:	e7f9      	b.n	69f6 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6a02:	61c2      	str	r2, [r0, #28]
		break;
    6a04:	e7f7      	b.n	69f6 <_i2c_m_async_register_callback+0xa>
	...

00006a08 <SERCOM0_0_Handler>:
{
    6a08:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6a0a:	4b02      	ldr	r3, [pc, #8]	; (6a14 <SERCOM0_0_Handler+0xc>)
    6a0c:	6818      	ldr	r0, [r3, #0]
    6a0e:	4b02      	ldr	r3, [pc, #8]	; (6a18 <SERCOM0_0_Handler+0x10>)
    6a10:	4798      	blx	r3
    6a12:	bd08      	pop	{r3, pc}
    6a14:	20000990 	.word	0x20000990
    6a18:	00006075 	.word	0x00006075

00006a1c <SERCOM0_1_Handler>:
{
    6a1c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6a1e:	4b02      	ldr	r3, [pc, #8]	; (6a28 <SERCOM0_1_Handler+0xc>)
    6a20:	6818      	ldr	r0, [r3, #0]
    6a22:	4b02      	ldr	r3, [pc, #8]	; (6a2c <SERCOM0_1_Handler+0x10>)
    6a24:	4798      	blx	r3
    6a26:	bd08      	pop	{r3, pc}
    6a28:	20000990 	.word	0x20000990
    6a2c:	00006075 	.word	0x00006075

00006a30 <SERCOM0_2_Handler>:
{
    6a30:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6a32:	4b02      	ldr	r3, [pc, #8]	; (6a3c <SERCOM0_2_Handler+0xc>)
    6a34:	6818      	ldr	r0, [r3, #0]
    6a36:	4b02      	ldr	r3, [pc, #8]	; (6a40 <SERCOM0_2_Handler+0x10>)
    6a38:	4798      	blx	r3
    6a3a:	bd08      	pop	{r3, pc}
    6a3c:	20000990 	.word	0x20000990
    6a40:	00006075 	.word	0x00006075

00006a44 <SERCOM0_3_Handler>:
{
    6a44:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    6a46:	4b02      	ldr	r3, [pc, #8]	; (6a50 <SERCOM0_3_Handler+0xc>)
    6a48:	6818      	ldr	r0, [r3, #0]
    6a4a:	4b02      	ldr	r3, [pc, #8]	; (6a54 <SERCOM0_3_Handler+0x10>)
    6a4c:	4798      	blx	r3
    6a4e:	bd08      	pop	{r3, pc}
    6a50:	20000990 	.word	0x20000990
    6a54:	00006075 	.word	0x00006075

00006a58 <SERCOM1_0_Handler>:
{
    6a58:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a5a:	4b02      	ldr	r3, [pc, #8]	; (6a64 <SERCOM1_0_Handler+0xc>)
    6a5c:	6858      	ldr	r0, [r3, #4]
    6a5e:	4b02      	ldr	r3, [pc, #8]	; (6a68 <SERCOM1_0_Handler+0x10>)
    6a60:	4798      	blx	r3
    6a62:	bd08      	pop	{r3, pc}
    6a64:	20000990 	.word	0x20000990
    6a68:	00006075 	.word	0x00006075

00006a6c <SERCOM1_1_Handler>:
{
    6a6c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a6e:	4b02      	ldr	r3, [pc, #8]	; (6a78 <SERCOM1_1_Handler+0xc>)
    6a70:	6858      	ldr	r0, [r3, #4]
    6a72:	4b02      	ldr	r3, [pc, #8]	; (6a7c <SERCOM1_1_Handler+0x10>)
    6a74:	4798      	blx	r3
    6a76:	bd08      	pop	{r3, pc}
    6a78:	20000990 	.word	0x20000990
    6a7c:	00006075 	.word	0x00006075

00006a80 <SERCOM1_2_Handler>:
{
    6a80:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a82:	4b02      	ldr	r3, [pc, #8]	; (6a8c <SERCOM1_2_Handler+0xc>)
    6a84:	6858      	ldr	r0, [r3, #4]
    6a86:	4b02      	ldr	r3, [pc, #8]	; (6a90 <SERCOM1_2_Handler+0x10>)
    6a88:	4798      	blx	r3
    6a8a:	bd08      	pop	{r3, pc}
    6a8c:	20000990 	.word	0x20000990
    6a90:	00006075 	.word	0x00006075

00006a94 <SERCOM1_3_Handler>:
{
    6a94:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    6a96:	4b02      	ldr	r3, [pc, #8]	; (6aa0 <SERCOM1_3_Handler+0xc>)
    6a98:	6858      	ldr	r0, [r3, #4]
    6a9a:	4b02      	ldr	r3, [pc, #8]	; (6aa4 <SERCOM1_3_Handler+0x10>)
    6a9c:	4798      	blx	r3
    6a9e:	bd08      	pop	{r3, pc}
    6aa0:	20000990 	.word	0x20000990
    6aa4:	00006075 	.word	0x00006075

00006aa8 <SERCOM2_0_Handler>:
{
    6aa8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6aaa:	4b02      	ldr	r3, [pc, #8]	; (6ab4 <SERCOM2_0_Handler+0xc>)
    6aac:	6898      	ldr	r0, [r3, #8]
    6aae:	4b02      	ldr	r3, [pc, #8]	; (6ab8 <SERCOM2_0_Handler+0x10>)
    6ab0:	4798      	blx	r3
    6ab2:	bd08      	pop	{r3, pc}
    6ab4:	20000990 	.word	0x20000990
    6ab8:	00006075 	.word	0x00006075

00006abc <SERCOM2_1_Handler>:
{
    6abc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6abe:	4b02      	ldr	r3, [pc, #8]	; (6ac8 <SERCOM2_1_Handler+0xc>)
    6ac0:	6898      	ldr	r0, [r3, #8]
    6ac2:	4b02      	ldr	r3, [pc, #8]	; (6acc <SERCOM2_1_Handler+0x10>)
    6ac4:	4798      	blx	r3
    6ac6:	bd08      	pop	{r3, pc}
    6ac8:	20000990 	.word	0x20000990
    6acc:	00006075 	.word	0x00006075

00006ad0 <SERCOM2_2_Handler>:
{
    6ad0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6ad2:	4b02      	ldr	r3, [pc, #8]	; (6adc <SERCOM2_2_Handler+0xc>)
    6ad4:	6898      	ldr	r0, [r3, #8]
    6ad6:	4b02      	ldr	r3, [pc, #8]	; (6ae0 <SERCOM2_2_Handler+0x10>)
    6ad8:	4798      	blx	r3
    6ada:	bd08      	pop	{r3, pc}
    6adc:	20000990 	.word	0x20000990
    6ae0:	00006075 	.word	0x00006075

00006ae4 <SERCOM2_3_Handler>:
{
    6ae4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    6ae6:	4b02      	ldr	r3, [pc, #8]	; (6af0 <SERCOM2_3_Handler+0xc>)
    6ae8:	6898      	ldr	r0, [r3, #8]
    6aea:	4b02      	ldr	r3, [pc, #8]	; (6af4 <SERCOM2_3_Handler+0x10>)
    6aec:	4798      	blx	r3
    6aee:	bd08      	pop	{r3, pc}
    6af0:	20000990 	.word	0x20000990
    6af4:	00006075 	.word	0x00006075

00006af8 <SERCOM3_0_Handler>:
{
    6af8:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6afa:	4b02      	ldr	r3, [pc, #8]	; (6b04 <SERCOM3_0_Handler+0xc>)
    6afc:	68d8      	ldr	r0, [r3, #12]
    6afe:	4b02      	ldr	r3, [pc, #8]	; (6b08 <SERCOM3_0_Handler+0x10>)
    6b00:	4798      	blx	r3
    6b02:	bd08      	pop	{r3, pc}
    6b04:	20000990 	.word	0x20000990
    6b08:	000061ff 	.word	0x000061ff

00006b0c <SERCOM3_1_Handler>:
{
    6b0c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6b0e:	4b02      	ldr	r3, [pc, #8]	; (6b18 <SERCOM3_1_Handler+0xc>)
    6b10:	68d8      	ldr	r0, [r3, #12]
    6b12:	4b02      	ldr	r3, [pc, #8]	; (6b1c <SERCOM3_1_Handler+0x10>)
    6b14:	4798      	blx	r3
    6b16:	bd08      	pop	{r3, pc}
    6b18:	20000990 	.word	0x20000990
    6b1c:	000061ff 	.word	0x000061ff

00006b20 <SERCOM3_2_Handler>:
{
    6b20:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6b22:	4b02      	ldr	r3, [pc, #8]	; (6b2c <SERCOM3_2_Handler+0xc>)
    6b24:	68d8      	ldr	r0, [r3, #12]
    6b26:	4b02      	ldr	r3, [pc, #8]	; (6b30 <SERCOM3_2_Handler+0x10>)
    6b28:	4798      	blx	r3
    6b2a:	bd08      	pop	{r3, pc}
    6b2c:	20000990 	.word	0x20000990
    6b30:	000061ff 	.word	0x000061ff

00006b34 <SERCOM3_3_Handler>:
{
    6b34:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    6b36:	4b02      	ldr	r3, [pc, #8]	; (6b40 <SERCOM3_3_Handler+0xc>)
    6b38:	68d8      	ldr	r0, [r3, #12]
    6b3a:	4b02      	ldr	r3, [pc, #8]	; (6b44 <SERCOM3_3_Handler+0x10>)
    6b3c:	4798      	blx	r3
    6b3e:	bd08      	pop	{r3, pc}
    6b40:	20000990 	.word	0x20000990
    6b44:	000061ff 	.word	0x000061ff

00006b48 <SERCOM4_0_Handler>:
{
    6b48:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b4a:	4b02      	ldr	r3, [pc, #8]	; (6b54 <SERCOM4_0_Handler+0xc>)
    6b4c:	6918      	ldr	r0, [r3, #16]
    6b4e:	4b02      	ldr	r3, [pc, #8]	; (6b58 <SERCOM4_0_Handler+0x10>)
    6b50:	4798      	blx	r3
    6b52:	bd08      	pop	{r3, pc}
    6b54:	20000990 	.word	0x20000990
    6b58:	00006075 	.word	0x00006075

00006b5c <SERCOM4_1_Handler>:
{
    6b5c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b5e:	4b02      	ldr	r3, [pc, #8]	; (6b68 <SERCOM4_1_Handler+0xc>)
    6b60:	6918      	ldr	r0, [r3, #16]
    6b62:	4b02      	ldr	r3, [pc, #8]	; (6b6c <SERCOM4_1_Handler+0x10>)
    6b64:	4798      	blx	r3
    6b66:	bd08      	pop	{r3, pc}
    6b68:	20000990 	.word	0x20000990
    6b6c:	00006075 	.word	0x00006075

00006b70 <SERCOM4_2_Handler>:
{
    6b70:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b72:	4b02      	ldr	r3, [pc, #8]	; (6b7c <SERCOM4_2_Handler+0xc>)
    6b74:	6918      	ldr	r0, [r3, #16]
    6b76:	4b02      	ldr	r3, [pc, #8]	; (6b80 <SERCOM4_2_Handler+0x10>)
    6b78:	4798      	blx	r3
    6b7a:	bd08      	pop	{r3, pc}
    6b7c:	20000990 	.word	0x20000990
    6b80:	00006075 	.word	0x00006075

00006b84 <SERCOM4_3_Handler>:
{
    6b84:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    6b86:	4b02      	ldr	r3, [pc, #8]	; (6b90 <SERCOM4_3_Handler+0xc>)
    6b88:	6918      	ldr	r0, [r3, #16]
    6b8a:	4b02      	ldr	r3, [pc, #8]	; (6b94 <SERCOM4_3_Handler+0x10>)
    6b8c:	4798      	blx	r3
    6b8e:	bd08      	pop	{r3, pc}
    6b90:	20000990 	.word	0x20000990
    6b94:	00006075 	.word	0x00006075

00006b98 <SERCOM5_0_Handler>:
{
    6b98:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6b9a:	4b02      	ldr	r3, [pc, #8]	; (6ba4 <SERCOM5_0_Handler+0xc>)
    6b9c:	6958      	ldr	r0, [r3, #20]
    6b9e:	4b02      	ldr	r3, [pc, #8]	; (6ba8 <SERCOM5_0_Handler+0x10>)
    6ba0:	4798      	blx	r3
    6ba2:	bd08      	pop	{r3, pc}
    6ba4:	20000990 	.word	0x20000990
    6ba8:	000064e1 	.word	0x000064e1

00006bac <SERCOM5_1_Handler>:
{
    6bac:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6bae:	4b02      	ldr	r3, [pc, #8]	; (6bb8 <SERCOM5_1_Handler+0xc>)
    6bb0:	6958      	ldr	r0, [r3, #20]
    6bb2:	4b02      	ldr	r3, [pc, #8]	; (6bbc <SERCOM5_1_Handler+0x10>)
    6bb4:	4798      	blx	r3
    6bb6:	bd08      	pop	{r3, pc}
    6bb8:	20000990 	.word	0x20000990
    6bbc:	000064e1 	.word	0x000064e1

00006bc0 <SERCOM5_2_Handler>:
{
    6bc0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6bc2:	4b02      	ldr	r3, [pc, #8]	; (6bcc <SERCOM5_2_Handler+0xc>)
    6bc4:	6958      	ldr	r0, [r3, #20]
    6bc6:	4b02      	ldr	r3, [pc, #8]	; (6bd0 <SERCOM5_2_Handler+0x10>)
    6bc8:	4798      	blx	r3
    6bca:	bd08      	pop	{r3, pc}
    6bcc:	20000990 	.word	0x20000990
    6bd0:	000064e1 	.word	0x000064e1

00006bd4 <SERCOM5_3_Handler>:
{
    6bd4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6bd6:	4b02      	ldr	r3, [pc, #8]	; (6be0 <SERCOM5_3_Handler+0xc>)
    6bd8:	6958      	ldr	r0, [r3, #20]
    6bda:	4b02      	ldr	r3, [pc, #8]	; (6be4 <SERCOM5_3_Handler+0x10>)
    6bdc:	4798      	blx	r3
    6bde:	bd08      	pop	{r3, pc}
    6be0:	20000990 	.word	0x20000990
    6be4:	000064e1 	.word	0x000064e1

00006be8 <SERCOM6_0_Handler>:
{
    6be8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6bea:	4b02      	ldr	r3, [pc, #8]	; (6bf4 <SERCOM6_0_Handler+0xc>)
    6bec:	6998      	ldr	r0, [r3, #24]
    6bee:	4b02      	ldr	r3, [pc, #8]	; (6bf8 <SERCOM6_0_Handler+0x10>)
    6bf0:	4798      	blx	r3
    6bf2:	bd08      	pop	{r3, pc}
    6bf4:	20000990 	.word	0x20000990
    6bf8:	00006075 	.word	0x00006075

00006bfc <SERCOM6_1_Handler>:
{
    6bfc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6bfe:	4b02      	ldr	r3, [pc, #8]	; (6c08 <SERCOM6_1_Handler+0xc>)
    6c00:	6998      	ldr	r0, [r3, #24]
    6c02:	4b02      	ldr	r3, [pc, #8]	; (6c0c <SERCOM6_1_Handler+0x10>)
    6c04:	4798      	blx	r3
    6c06:	bd08      	pop	{r3, pc}
    6c08:	20000990 	.word	0x20000990
    6c0c:	00006075 	.word	0x00006075

00006c10 <SERCOM6_2_Handler>:
{
    6c10:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6c12:	4b02      	ldr	r3, [pc, #8]	; (6c1c <SERCOM6_2_Handler+0xc>)
    6c14:	6998      	ldr	r0, [r3, #24]
    6c16:	4b02      	ldr	r3, [pc, #8]	; (6c20 <SERCOM6_2_Handler+0x10>)
    6c18:	4798      	blx	r3
    6c1a:	bd08      	pop	{r3, pc}
    6c1c:	20000990 	.word	0x20000990
    6c20:	00006075 	.word	0x00006075

00006c24 <SERCOM6_3_Handler>:
{
    6c24:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    6c26:	4b02      	ldr	r3, [pc, #8]	; (6c30 <SERCOM6_3_Handler+0xc>)
    6c28:	6998      	ldr	r0, [r3, #24]
    6c2a:	4b02      	ldr	r3, [pc, #8]	; (6c34 <SERCOM6_3_Handler+0x10>)
    6c2c:	4798      	blx	r3
    6c2e:	bd08      	pop	{r3, pc}
    6c30:	20000990 	.word	0x20000990
    6c34:	00006075 	.word	0x00006075

00006c38 <_spi_m_sync_init>:
{
    6c38:	b570      	push	{r4, r5, r6, lr}
    6c3a:	4606      	mov	r6, r0
    6c3c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6c3e:	4608      	mov	r0, r1
    6c40:	4b5d      	ldr	r3, [pc, #372]	; (6db8 <_spi_m_sync_init+0x180>)
    6c42:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    6c44:	2803      	cmp	r0, #3
    6c46:	d00c      	beq.n	6c62 <_spi_m_sync_init+0x2a>
    6c48:	2807      	cmp	r0, #7
    6c4a:	bf08      	it	eq
    6c4c:	2301      	moveq	r3, #1
    6c4e:	d009      	beq.n	6c64 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    6c50:	2e00      	cmp	r6, #0
    6c52:	f000 809f 	beq.w	6d94 <_spi_m_sync_init+0x15c>
    6c56:	2c00      	cmp	r4, #0
    6c58:	f040 80a5 	bne.w	6da6 <_spi_m_sync_init+0x16e>
	return NULL;
    6c5c:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    6c5e:	2000      	movs	r0, #0
    6c60:	e009      	b.n	6c76 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    6c62:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    6c64:	4d55      	ldr	r5, [pc, #340]	; (6dbc <_spi_m_sync_init+0x184>)
    6c66:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    6c6a:	441d      	add	r5, r3
	ASSERT(dev && hw);
    6c6c:	2e00      	cmp	r6, #0
    6c6e:	d0f6      	beq.n	6c5e <_spi_m_sync_init+0x26>
    6c70:	2001      	movs	r0, #1
    6c72:	2c00      	cmp	r4, #0
    6c74:	d0f3      	beq.n	6c5e <_spi_m_sync_init+0x26>
    6c76:	f640 2291 	movw	r2, #2705	; 0xa91
    6c7a:	4951      	ldr	r1, [pc, #324]	; (6dc0 <_spi_m_sync_init+0x188>)
    6c7c:	4b51      	ldr	r3, [pc, #324]	; (6dc4 <_spi_m_sync_init+0x18c>)
    6c7e:	4798      	blx	r3
	if (regs == NULL) {
    6c80:	2d00      	cmp	r5, #0
    6c82:	f000 8084 	beq.w	6d8e <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6c86:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6c88:	f013 0f01 	tst.w	r3, #1
    6c8c:	d11d      	bne.n	6cca <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6c8e:	682b      	ldr	r3, [r5, #0]
    6c90:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6c94:	69e3      	ldr	r3, [r4, #28]
    6c96:	f013 0f03 	tst.w	r3, #3
    6c9a:	d1fb      	bne.n	6c94 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6c9c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6c9e:	f013 0f02 	tst.w	r3, #2
    6ca2:	d00b      	beq.n	6cbc <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6ca4:	6823      	ldr	r3, [r4, #0]
    6ca6:	f023 0302 	bic.w	r3, r3, #2
    6caa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6cac:	69e3      	ldr	r3, [r4, #28]
    6cae:	f013 0f03 	tst.w	r3, #3
    6cb2:	d1fb      	bne.n	6cac <_spi_m_sync_init+0x74>
    6cb4:	69e3      	ldr	r3, [r4, #28]
    6cb6:	f013 0f02 	tst.w	r3, #2
    6cba:	d1fb      	bne.n	6cb4 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6cbc:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6cc0:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6cc2:	69e3      	ldr	r3, [r4, #28]
    6cc4:	f013 0f03 	tst.w	r3, #3
    6cc8:	d1fb      	bne.n	6cc2 <_spi_m_sync_init+0x8a>
    6cca:	69e3      	ldr	r3, [r4, #28]
    6ccc:	f013 0f01 	tst.w	r3, #1
    6cd0:	d1fb      	bne.n	6cca <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    6cd2:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6cd4:	682b      	ldr	r3, [r5, #0]
    6cd6:	f003 031c 	and.w	r3, r3, #28
    6cda:	2b08      	cmp	r3, #8
    6cdc:	d02e      	beq.n	6d3c <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    6cde:	f640 1276 	movw	r2, #2422	; 0x976
    6ce2:	4937      	ldr	r1, [pc, #220]	; (6dc0 <_spi_m_sync_init+0x188>)
    6ce4:	1c20      	adds	r0, r4, #0
    6ce6:	bf18      	it	ne
    6ce8:	2001      	movne	r0, #1
    6cea:	4b36      	ldr	r3, [pc, #216]	; (6dc4 <_spi_m_sync_init+0x18c>)
    6cec:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6cee:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    6cf0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6cf4:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6cf8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6cfa:	69e3      	ldr	r3, [r4, #28]
    6cfc:	f013 0f03 	tst.w	r3, #3
    6d00:	d1fb      	bne.n	6cfa <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    6d02:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    6d04:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6d08:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6d10:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6d12:	69e3      	ldr	r3, [r4, #28]
    6d14:	f013 0f17 	tst.w	r3, #23
    6d18:	d1fb      	bne.n	6d12 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6d1a:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6d1c:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d1e:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6d20:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6d24:	686b      	ldr	r3, [r5, #4]
    6d26:	f003 0307 	and.w	r3, r3, #7
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	bf0c      	ite	eq
    6d2e:	2301      	moveq	r3, #1
    6d30:	2302      	movne	r3, #2
    6d32:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    6d34:	89eb      	ldrh	r3, [r5, #14]
    6d36:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    6d38:	2000      	movs	r0, #0
    6d3a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    6d3c:	f640 128a 	movw	r2, #2442	; 0x98a
    6d40:	491f      	ldr	r1, [pc, #124]	; (6dc0 <_spi_m_sync_init+0x188>)
    6d42:	1c20      	adds	r0, r4, #0
    6d44:	bf18      	it	ne
    6d46:	2001      	movne	r0, #1
    6d48:	4b1e      	ldr	r3, [pc, #120]	; (6dc4 <_spi_m_sync_init+0x18c>)
    6d4a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6d4c:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    6d4e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6d52:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6d56:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6d58:	69e3      	ldr	r3, [r4, #28]
    6d5a:	f013 0f03 	tst.w	r3, #3
    6d5e:	d1fb      	bne.n	6d58 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6d60:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6d62:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6d66:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d6e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6d72:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6d74:	69e3      	ldr	r3, [r4, #28]
    6d76:	f013 0f17 	tst.w	r3, #23
    6d7a:	d1fb      	bne.n	6d74 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6d7c:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6d7e:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d80:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6d82:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6d86:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6d88:	2b00      	cmp	r3, #0
    6d8a:	d1fc      	bne.n	6d86 <_spi_m_sync_init+0x14e>
    6d8c:	e7ca      	b.n	6d24 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    6d8e:	f06f 000c 	mvn.w	r0, #12
    6d92:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    6d94:	f640 2291 	movw	r2, #2705	; 0xa91
    6d98:	4909      	ldr	r1, [pc, #36]	; (6dc0 <_spi_m_sync_init+0x188>)
    6d9a:	2000      	movs	r0, #0
    6d9c:	4b09      	ldr	r3, [pc, #36]	; (6dc4 <_spi_m_sync_init+0x18c>)
    6d9e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    6da0:	f06f 000c 	mvn.w	r0, #12
    6da4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    6da6:	f640 2291 	movw	r2, #2705	; 0xa91
    6daa:	4905      	ldr	r1, [pc, #20]	; (6dc0 <_spi_m_sync_init+0x188>)
    6dac:	2001      	movs	r0, #1
    6dae:	4b05      	ldr	r3, [pc, #20]	; (6dc4 <_spi_m_sync_init+0x18c>)
    6db0:	4798      	blx	r3
		return ERR_INVALID_ARG;
    6db2:	f06f 000c 	mvn.w	r0, #12
    6db6:	bd70      	pop	{r4, r5, r6, pc}
    6db8:	00006031 	.word	0x00006031
    6dbc:	0000c104 	.word	0x0000c104
    6dc0:	0000c128 	.word	0x0000c128
    6dc4:	00005271 	.word	0x00005271

00006dc8 <_spi_m_async_init>:
{
    6dc8:	b538      	push	{r3, r4, r5, lr}
    6dca:	4604      	mov	r4, r0
    6dcc:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    6dce:	4b15      	ldr	r3, [pc, #84]	; (6e24 <_spi_m_async_init+0x5c>)
    6dd0:	4798      	blx	r3
	if (rc < 0) {
    6dd2:	2800      	cmp	r0, #0
    6dd4:	db24      	blt.n	6e20 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    6dd6:	4621      	mov	r1, r4
    6dd8:	4628      	mov	r0, r5
    6dda:	4b13      	ldr	r3, [pc, #76]	; (6e28 <_spi_m_async_init+0x60>)
    6ddc:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    6dde:	2300      	movs	r3, #0
    6de0:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    6de2:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    6de4:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    6de6:	4628      	mov	r0, r5
    6de8:	4b10      	ldr	r3, [pc, #64]	; (6e2c <_spi_m_async_init+0x64>)
    6dea:	4798      	blx	r3
    6dec:	1d01      	adds	r1, r0, #4
    6dee:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6df0:	2401      	movs	r4, #1
    6df2:	f000 021f 	and.w	r2, r0, #31
    6df6:	fa04 f202 	lsl.w	r2, r4, r2
    6dfa:	0943      	lsrs	r3, r0, #5
    6dfc:	009b      	lsls	r3, r3, #2
    6dfe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6e02:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6e0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6e0e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    6e16:	3001      	adds	r0, #1
    6e18:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6e1a:	4281      	cmp	r1, r0
    6e1c:	d1e9      	bne.n	6df2 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    6e1e:	2000      	movs	r0, #0
}
    6e20:	bd38      	pop	{r3, r4, r5, pc}
    6e22:	bf00      	nop
    6e24:	00006c39 	.word	0x00006c39
    6e28:	000060e5 	.word	0x000060e5
    6e2c:	00006155 	.word	0x00006155

00006e30 <_spi_m_async_enable>:
{
    6e30:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    6e32:	4604      	mov	r4, r0
    6e34:	b160      	cbz	r0, 6e50 <_spi_m_async_enable+0x20>
    6e36:	6800      	ldr	r0, [r0, #0]
    6e38:	3000      	adds	r0, #0
    6e3a:	bf18      	it	ne
    6e3c:	2001      	movne	r0, #1
    6e3e:	f640 22fe 	movw	r2, #2814	; 0xafe
    6e42:	4904      	ldr	r1, [pc, #16]	; (6e54 <_spi_m_async_enable+0x24>)
    6e44:	4b04      	ldr	r3, [pc, #16]	; (6e58 <_spi_m_async_enable+0x28>)
    6e46:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    6e48:	6820      	ldr	r0, [r4, #0]
    6e4a:	4b04      	ldr	r3, [pc, #16]	; (6e5c <_spi_m_async_enable+0x2c>)
    6e4c:	4798      	blx	r3
}
    6e4e:	bd10      	pop	{r4, pc}
    6e50:	2000      	movs	r0, #0
    6e52:	e7f4      	b.n	6e3e <_spi_m_async_enable+0xe>
    6e54:	0000c128 	.word	0x0000c128
    6e58:	00005271 	.word	0x00005271
    6e5c:	0000618d 	.word	0x0000618d

00006e60 <_spi_m_async_set_mode>:
{
    6e60:	b538      	push	{r3, r4, r5, lr}
    6e62:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    6e64:	4604      	mov	r4, r0
    6e66:	b168      	cbz	r0, 6e84 <_spi_m_async_set_mode+0x24>
    6e68:	6800      	ldr	r0, [r0, #0]
    6e6a:	3000      	adds	r0, #0
    6e6c:	bf18      	it	ne
    6e6e:	2001      	movne	r0, #1
    6e70:	f640 322f 	movw	r2, #2863	; 0xb2f
    6e74:	4904      	ldr	r1, [pc, #16]	; (6e88 <_spi_m_async_set_mode+0x28>)
    6e76:	4b05      	ldr	r3, [pc, #20]	; (6e8c <_spi_m_async_set_mode+0x2c>)
    6e78:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    6e7a:	4629      	mov	r1, r5
    6e7c:	6820      	ldr	r0, [r4, #0]
    6e7e:	4b04      	ldr	r3, [pc, #16]	; (6e90 <_spi_m_async_set_mode+0x30>)
    6e80:	4798      	blx	r3
}
    6e82:	bd38      	pop	{r3, r4, r5, pc}
    6e84:	2000      	movs	r0, #0
    6e86:	e7f3      	b.n	6e70 <_spi_m_async_set_mode+0x10>
    6e88:	0000c128 	.word	0x0000c128
    6e8c:	00005271 	.word	0x00005271
    6e90:	000061cd 	.word	0x000061cd

00006e94 <_spi_m_async_enable_tx>:
{
    6e94:	b538      	push	{r3, r4, r5, lr}
    6e96:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    6e98:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    6e9a:	b160      	cbz	r0, 6eb6 <_spi_m_async_enable_tx+0x22>
    6e9c:	1c20      	adds	r0, r4, #0
    6e9e:	bf18      	it	ne
    6ea0:	2001      	movne	r0, #1
    6ea2:	f640 4221 	movw	r2, #3105	; 0xc21
    6ea6:	4906      	ldr	r1, [pc, #24]	; (6ec0 <_spi_m_async_enable_tx+0x2c>)
    6ea8:	4b06      	ldr	r3, [pc, #24]	; (6ec4 <_spi_m_async_enable_tx+0x30>)
    6eaa:	4798      	blx	r3
	if (state) {
    6eac:	b92d      	cbnz	r5, 6eba <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    6eae:	2301      	movs	r3, #1
    6eb0:	7523      	strb	r3, [r4, #20]
}
    6eb2:	2000      	movs	r0, #0
    6eb4:	bd38      	pop	{r3, r4, r5, pc}
    6eb6:	2000      	movs	r0, #0
    6eb8:	e7f3      	b.n	6ea2 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    6eba:	2301      	movs	r3, #1
    6ebc:	75a3      	strb	r3, [r4, #22]
    6ebe:	e7f8      	b.n	6eb2 <_spi_m_async_enable_tx+0x1e>
    6ec0:	0000c128 	.word	0x0000c128
    6ec4:	00005271 	.word	0x00005271

00006ec8 <_spi_m_async_enable_rx>:
{
    6ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6eca:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    6ecc:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    6ece:	4e0c      	ldr	r6, [pc, #48]	; (6f00 <_spi_m_async_enable_rx+0x38>)
    6ed0:	f640 4235 	movw	r2, #3125	; 0xc35
    6ed4:	4631      	mov	r1, r6
    6ed6:	3000      	adds	r0, #0
    6ed8:	bf18      	it	ne
    6eda:	2001      	movne	r0, #1
    6edc:	4d09      	ldr	r5, [pc, #36]	; (6f04 <_spi_m_async_enable_rx+0x3c>)
    6ede:	47a8      	blx	r5
	ASSERT(hw);
    6ee0:	f640 4236 	movw	r2, #3126	; 0xc36
    6ee4:	4631      	mov	r1, r6
    6ee6:	1c20      	adds	r0, r4, #0
    6ee8:	bf18      	it	ne
    6eea:	2001      	movne	r0, #1
    6eec:	47a8      	blx	r5
	if (state) {
    6eee:	b91f      	cbnz	r7, 6ef8 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    6ef0:	2304      	movs	r3, #4
    6ef2:	7523      	strb	r3, [r4, #20]
}
    6ef4:	2000      	movs	r0, #0
    6ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    6ef8:	2304      	movs	r3, #4
    6efa:	75a3      	strb	r3, [r4, #22]
    6efc:	e7fa      	b.n	6ef4 <_spi_m_async_enable_rx+0x2c>
    6efe:	bf00      	nop
    6f00:	0000c128 	.word	0x0000c128
    6f04:	00005271 	.word	0x00005271

00006f08 <_spi_m_async_enable_tx_complete>:
{
    6f08:	b538      	push	{r3, r4, r5, lr}
    6f0a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    6f0c:	4604      	mov	r4, r0
    6f0e:	b170      	cbz	r0, 6f2e <_spi_m_async_enable_tx_complete+0x26>
    6f10:	6800      	ldr	r0, [r0, #0]
    6f12:	3000      	adds	r0, #0
    6f14:	bf18      	it	ne
    6f16:	2001      	movne	r0, #1
    6f18:	f640 4248 	movw	r2, #3144	; 0xc48
    6f1c:	4907      	ldr	r1, [pc, #28]	; (6f3c <_spi_m_async_enable_tx_complete+0x34>)
    6f1e:	4b08      	ldr	r3, [pc, #32]	; (6f40 <_spi_m_async_enable_tx_complete+0x38>)
    6f20:	4798      	blx	r3
	if (state) {
    6f22:	b935      	cbnz	r5, 6f32 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    6f24:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    6f26:	2202      	movs	r2, #2
    6f28:	751a      	strb	r2, [r3, #20]
}
    6f2a:	2000      	movs	r0, #0
    6f2c:	bd38      	pop	{r3, r4, r5, pc}
    6f2e:	2000      	movs	r0, #0
    6f30:	e7f2      	b.n	6f18 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    6f32:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    6f34:	2202      	movs	r2, #2
    6f36:	759a      	strb	r2, [r3, #22]
    6f38:	e7f7      	b.n	6f2a <_spi_m_async_enable_tx_complete+0x22>
    6f3a:	bf00      	nop
    6f3c:	0000c128 	.word	0x0000c128
    6f40:	00005271 	.word	0x00005271

00006f44 <_spi_m_async_write_one>:
{
    6f44:	b538      	push	{r3, r4, r5, lr}
    6f46:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    6f48:	4604      	mov	r4, r0
    6f4a:	b160      	cbz	r0, 6f66 <_spi_m_async_write_one+0x22>
    6f4c:	6800      	ldr	r0, [r0, #0]
    6f4e:	3000      	adds	r0, #0
    6f50:	bf18      	it	ne
    6f52:	2001      	movne	r0, #1
    6f54:	f640 425a 	movw	r2, #3162	; 0xc5a
    6f58:	4904      	ldr	r1, [pc, #16]	; (6f6c <_spi_m_async_write_one+0x28>)
    6f5a:	4b05      	ldr	r3, [pc, #20]	; (6f70 <_spi_m_async_write_one+0x2c>)
    6f5c:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    6f5e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    6f60:	629d      	str	r5, [r3, #40]	; 0x28
}
    6f62:	2000      	movs	r0, #0
    6f64:	bd38      	pop	{r3, r4, r5, pc}
    6f66:	2000      	movs	r0, #0
    6f68:	e7f4      	b.n	6f54 <_spi_m_async_write_one+0x10>
    6f6a:	bf00      	nop
    6f6c:	0000c128 	.word	0x0000c128
    6f70:	00005271 	.word	0x00005271

00006f74 <_spi_m_async_read_one>:
{
    6f74:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    6f76:	4604      	mov	r4, r0
    6f78:	b160      	cbz	r0, 6f94 <_spi_m_async_read_one+0x20>
    6f7a:	6800      	ldr	r0, [r0, #0]
    6f7c:	3000      	adds	r0, #0
    6f7e:	bf18      	it	ne
    6f80:	2001      	movne	r0, #1
    6f82:	f640 4275 	movw	r2, #3189	; 0xc75
    6f86:	4904      	ldr	r1, [pc, #16]	; (6f98 <_spi_m_async_read_one+0x24>)
    6f88:	4b04      	ldr	r3, [pc, #16]	; (6f9c <_spi_m_async_read_one+0x28>)
    6f8a:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    6f8c:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6f8e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    6f90:	b280      	uxth	r0, r0
    6f92:	bd10      	pop	{r4, pc}
    6f94:	2000      	movs	r0, #0
    6f96:	e7f4      	b.n	6f82 <_spi_m_async_read_one+0xe>
    6f98:	0000c128 	.word	0x0000c128
    6f9c:	00005271 	.word	0x00005271

00006fa0 <_spi_m_async_register_callback>:
{
    6fa0:	b570      	push	{r4, r5, r6, lr}
    6fa2:	460d      	mov	r5, r1
    6fa4:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    6fa6:	4604      	mov	r4, r0
    6fa8:	b168      	cbz	r0, 6fc6 <_spi_m_async_register_callback+0x26>
    6faa:	2903      	cmp	r1, #3
    6fac:	bf8c      	ite	hi
    6fae:	2000      	movhi	r0, #0
    6fb0:	2001      	movls	r0, #1
    6fb2:	f640 428e 	movw	r2, #3214	; 0xc8e
    6fb6:	4905      	ldr	r1, [pc, #20]	; (6fcc <_spi_m_async_register_callback+0x2c>)
    6fb8:	4b05      	ldr	r3, [pc, #20]	; (6fd0 <_spi_m_async_register_callback+0x30>)
    6fba:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    6fbc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    6fc0:	60a6      	str	r6, [r4, #8]
}
    6fc2:	2000      	movs	r0, #0
    6fc4:	bd70      	pop	{r4, r5, r6, pc}
    6fc6:	2000      	movs	r0, #0
    6fc8:	e7f3      	b.n	6fb2 <_spi_m_async_register_callback+0x12>
    6fca:	bf00      	nop
    6fcc:	0000c128 	.word	0x0000c128
    6fd0:	00005271 	.word	0x00005271

00006fd4 <_spi_m_async_set_irq_state>:
{
    6fd4:	b570      	push	{r4, r5, r6, lr}
    6fd6:	460c      	mov	r4, r1
    6fd8:	4615      	mov	r5, r2
	ASSERT(device);
    6fda:	4606      	mov	r6, r0
    6fdc:	f640 42cf 	movw	r2, #3279	; 0xccf
    6fe0:	4908      	ldr	r1, [pc, #32]	; (7004 <_spi_m_async_set_irq_state+0x30>)
    6fe2:	3000      	adds	r0, #0
    6fe4:	bf18      	it	ne
    6fe6:	2001      	movne	r0, #1
    6fe8:	4b07      	ldr	r3, [pc, #28]	; (7008 <_spi_m_async_set_irq_state+0x34>)
    6fea:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    6fec:	2c03      	cmp	r4, #3
    6fee:	d000      	beq.n	6ff2 <_spi_m_async_set_irq_state+0x1e>
    6ff0:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    6ff2:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    6ff4:	b115      	cbz	r5, 6ffc <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    6ff6:	2280      	movs	r2, #128	; 0x80
    6ff8:	759a      	strb	r2, [r3, #22]
}
    6ffa:	e7f9      	b.n	6ff0 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    6ffc:	2280      	movs	r2, #128	; 0x80
    6ffe:	751a      	strb	r2, [r3, #20]
    7000:	bd70      	pop	{r4, r5, r6, pc}
    7002:	bf00      	nop
    7004:	0000c128 	.word	0x0000c128
    7008:	00005271 	.word	0x00005271

0000700c <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    700c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7010:	4605      	mov	r5, r0
    7012:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7014:	4608      	mov	r0, r1
    7016:	4b52      	ldr	r3, [pc, #328]	; (7160 <_spi_m_dma_init+0x154>)
    7018:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    701a:	2803      	cmp	r0, #3
    701c:	d00c      	beq.n	7038 <_spi_m_dma_init+0x2c>
    701e:	2807      	cmp	r0, #7
    7020:	bf08      	it	eq
    7022:	2301      	moveq	r3, #1
    7024:	d009      	beq.n	703a <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    7026:	2d00      	cmp	r5, #0
    7028:	f000 8086 	beq.w	7138 <_spi_m_dma_init+0x12c>
    702c:	2c00      	cmp	r4, #0
    702e:	f040 808d 	bne.w	714c <_spi_m_dma_init+0x140>
	return NULL;
    7032:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7034:	2000      	movs	r0, #0
    7036:	e009      	b.n	704c <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    7038:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    703a:	4e4a      	ldr	r6, [pc, #296]	; (7164 <_spi_m_dma_init+0x158>)
    703c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7040:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7042:	2d00      	cmp	r5, #0
    7044:	d0f6      	beq.n	7034 <_spi_m_dma_init+0x28>
    7046:	2001      	movs	r0, #1
    7048:	2c00      	cmp	r4, #0
    704a:	d0f3      	beq.n	7034 <_spi_m_dma_init+0x28>
    704c:	f640 52c3 	movw	r2, #3523	; 0xdc3
    7050:	4945      	ldr	r1, [pc, #276]	; (7168 <_spi_m_dma_init+0x15c>)
    7052:	4b46      	ldr	r3, [pc, #280]	; (716c <_spi_m_dma_init+0x160>)
    7054:	4798      	blx	r3

	if (regs == NULL) {
    7056:	2e00      	cmp	r6, #0
    7058:	d06a      	beq.n	7130 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    705a:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    705c:	f013 0f01 	tst.w	r3, #1
    7060:	d11d      	bne.n	709e <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7062:	6833      	ldr	r3, [r6, #0]
    7064:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7068:	69e3      	ldr	r3, [r4, #28]
    706a:	f013 0f03 	tst.w	r3, #3
    706e:	d1fb      	bne.n	7068 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7070:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7072:	f013 0f02 	tst.w	r3, #2
    7076:	d00b      	beq.n	7090 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7078:	6823      	ldr	r3, [r4, #0]
    707a:	f023 0302 	bic.w	r3, r3, #2
    707e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7080:	69e3      	ldr	r3, [r4, #28]
    7082:	f013 0f03 	tst.w	r3, #3
    7086:	d1fb      	bne.n	7080 <_spi_m_dma_init+0x74>
    7088:	69e3      	ldr	r3, [r4, #28]
    708a:	f013 0f02 	tst.w	r3, #2
    708e:	d1fb      	bne.n	7088 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7090:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7094:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7096:	69e3      	ldr	r3, [r4, #28]
    7098:	f013 0f03 	tst.w	r3, #3
    709c:	d1fb      	bne.n	7096 <_spi_m_dma_init+0x8a>
    709e:	69e3      	ldr	r3, [r4, #28]
    70a0:	f013 0f01 	tst.w	r3, #1
    70a4:	d1fb      	bne.n	709e <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    70a6:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    70a8:	f640 1276 	movw	r2, #2422	; 0x976
    70ac:	492e      	ldr	r1, [pc, #184]	; (7168 <_spi_m_dma_init+0x15c>)
    70ae:	1c20      	adds	r0, r4, #0
    70b0:	bf18      	it	ne
    70b2:	2001      	movne	r0, #1
    70b4:	4b2d      	ldr	r3, [pc, #180]	; (716c <_spi_m_dma_init+0x160>)
    70b6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    70b8:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    70ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    70be:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    70c2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    70c4:	69e3      	ldr	r3, [r4, #28]
    70c6:	f013 0f03 	tst.w	r3, #3
    70ca:	d1fb      	bne.n	70c4 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    70cc:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    70ce:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    70d2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    70d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    70da:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    70dc:	69e3      	ldr	r3, [r4, #28]
    70de:	f013 0f17 	tst.w	r3, #23
    70e2:	d1fb      	bne.n	70dc <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    70e4:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    70e6:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    70e8:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    70ea:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    70ee:	f105 0818 	add.w	r8, r5, #24
    70f2:	4620      	mov	r0, r4
    70f4:	4b1e      	ldr	r3, [pc, #120]	; (7170 <_spi_m_dma_init+0x164>)
    70f6:	4798      	blx	r3
    70f8:	4601      	mov	r1, r0
    70fa:	4640      	mov	r0, r8
    70fc:	4f1d      	ldr	r7, [pc, #116]	; (7174 <_spi_m_dma_init+0x168>)
    70fe:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7100:	69ab      	ldr	r3, [r5, #24]
    7102:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    7104:	69ab      	ldr	r3, [r5, #24]
    7106:	4a1c      	ldr	r2, [pc, #112]	; (7178 <_spi_m_dma_init+0x16c>)
    7108:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    710a:	69ab      	ldr	r3, [r5, #24]
    710c:	4e1b      	ldr	r6, [pc, #108]	; (717c <_spi_m_dma_init+0x170>)
    710e:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    7110:	4620      	mov	r0, r4
    7112:	4b1b      	ldr	r3, [pc, #108]	; (7180 <_spi_m_dma_init+0x174>)
    7114:	4798      	blx	r3
    7116:	4601      	mov	r1, r0
    7118:	4640      	mov	r0, r8
    711a:	47b8      	blx	r7
	dev->resource->back                 = dev;
    711c:	69ab      	ldr	r3, [r5, #24]
    711e:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    7120:	69ab      	ldr	r3, [r5, #24]
    7122:	4a18      	ldr	r2, [pc, #96]	; (7184 <_spi_m_dma_init+0x178>)
    7124:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    7126:	69ab      	ldr	r3, [r5, #24]
    7128:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    712a:	2000      	movs	r0, #0
    712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    7130:	f06f 000c 	mvn.w	r0, #12
    7134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7138:	f640 52c3 	movw	r2, #3523	; 0xdc3
    713c:	490a      	ldr	r1, [pc, #40]	; (7168 <_spi_m_dma_init+0x15c>)
    713e:	2000      	movs	r0, #0
    7140:	4b0a      	ldr	r3, [pc, #40]	; (716c <_spi_m_dma_init+0x160>)
    7142:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7144:	f06f 000c 	mvn.w	r0, #12
    7148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    714c:	f640 52c3 	movw	r2, #3523	; 0xdc3
    7150:	4905      	ldr	r1, [pc, #20]	; (7168 <_spi_m_dma_init+0x15c>)
    7152:	2001      	movs	r0, #1
    7154:	4b05      	ldr	r3, [pc, #20]	; (716c <_spi_m_dma_init+0x160>)
    7156:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7158:	f06f 000c 	mvn.w	r0, #12
    715c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7160:	00006031 	.word	0x00006031
    7164:	0000c104 	.word	0x0000c104
    7168:	0000c128 	.word	0x0000c128
    716c:	00005271 	.word	0x00005271
    7170:	00006261 	.word	0x00006261
    7174:	00005af5 	.word	0x00005af5
    7178:	00006275 	.word	0x00006275
    717c:	0000628d 	.word	0x0000628d
    7180:	0000624d 	.word	0x0000624d
    7184:	00006281 	.word	0x00006281

00007188 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    7188:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    718a:	4604      	mov	r4, r0
    718c:	b160      	cbz	r0, 71a8 <_spi_m_dma_enable+0x20>
    718e:	6800      	ldr	r0, [r0, #0]
    7190:	3000      	adds	r0, #0
    7192:	bf18      	it	ne
    7194:	2001      	movne	r0, #1
    7196:	f640 52ec 	movw	r2, #3564	; 0xdec
    719a:	4904      	ldr	r1, [pc, #16]	; (71ac <_spi_m_dma_enable+0x24>)
    719c:	4b04      	ldr	r3, [pc, #16]	; (71b0 <_spi_m_dma_enable+0x28>)
    719e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    71a0:	6820      	ldr	r0, [r4, #0]
    71a2:	4b04      	ldr	r3, [pc, #16]	; (71b4 <_spi_m_dma_enable+0x2c>)
    71a4:	4798      	blx	r3
}
    71a6:	bd10      	pop	{r4, pc}
    71a8:	2000      	movs	r0, #0
    71aa:	e7f4      	b.n	7196 <_spi_m_dma_enable+0xe>
    71ac:	0000c128 	.word	0x0000c128
    71b0:	00005271 	.word	0x00005271
    71b4:	00006169 	.word	0x00006169

000071b8 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    71b8:	b570      	push	{r4, r5, r6, lr}
    71ba:	4605      	mov	r5, r0
    71bc:	4614      	mov	r4, r2
	switch (type) {
    71be:	2901      	cmp	r1, #1
    71c0:	d00e      	beq.n	71e0 <_spi_m_dma_register_callback+0x28>
    71c2:	b111      	cbz	r1, 71ca <_spi_m_dma_register_callback+0x12>
    71c4:	2902      	cmp	r1, #2
    71c6:	d016      	beq.n	71f6 <_spi_m_dma_register_callback+0x3e>
    71c8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    71ca:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    71cc:	6800      	ldr	r0, [r0, #0]
    71ce:	4b13      	ldr	r3, [pc, #76]	; (721c <_spi_m_dma_register_callback+0x64>)
    71d0:	4798      	blx	r3
    71d2:	1c22      	adds	r2, r4, #0
    71d4:	bf18      	it	ne
    71d6:	2201      	movne	r2, #1
    71d8:	2100      	movs	r1, #0
    71da:	4b11      	ldr	r3, [pc, #68]	; (7220 <_spi_m_dma_register_callback+0x68>)
    71dc:	4798      	blx	r3
		break;
    71de:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    71e0:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    71e2:	6800      	ldr	r0, [r0, #0]
    71e4:	4b0f      	ldr	r3, [pc, #60]	; (7224 <_spi_m_dma_register_callback+0x6c>)
    71e6:	4798      	blx	r3
    71e8:	1c22      	adds	r2, r4, #0
    71ea:	bf18      	it	ne
    71ec:	2201      	movne	r2, #1
    71ee:	2100      	movs	r1, #0
    71f0:	4b0b      	ldr	r3, [pc, #44]	; (7220 <_spi_m_dma_register_callback+0x68>)
    71f2:	4798      	blx	r3
		break;
    71f4:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    71f6:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    71f8:	6800      	ldr	r0, [r0, #0]
    71fa:	4b0a      	ldr	r3, [pc, #40]	; (7224 <_spi_m_dma_register_callback+0x6c>)
    71fc:	4798      	blx	r3
    71fe:	3400      	adds	r4, #0
    7200:	bf18      	it	ne
    7202:	2401      	movne	r4, #1
    7204:	4622      	mov	r2, r4
    7206:	2101      	movs	r1, #1
    7208:	4e05      	ldr	r6, [pc, #20]	; (7220 <_spi_m_dma_register_callback+0x68>)
    720a:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    720c:	6828      	ldr	r0, [r5, #0]
    720e:	4b03      	ldr	r3, [pc, #12]	; (721c <_spi_m_dma_register_callback+0x64>)
    7210:	4798      	blx	r3
    7212:	4622      	mov	r2, r4
    7214:	2101      	movs	r1, #1
    7216:	47b0      	blx	r6
    7218:	bd70      	pop	{r4, r5, r6, pc}
    721a:	bf00      	nop
    721c:	0000624d 	.word	0x0000624d
    7220:	000059cd 	.word	0x000059cd
    7224:	00006261 	.word	0x00006261

00007228 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    7228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    722c:	4605      	mov	r5, r0
    722e:	4689      	mov	r9, r1
    7230:	4617      	mov	r7, r2
    7232:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7234:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7238:	4658      	mov	r0, fp
    723a:	4b46      	ldr	r3, [pc, #280]	; (7354 <_spi_m_dma_transfer+0x12c>)
    723c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    723e:	2803      	cmp	r0, #3
    7240:	d053      	beq.n	72ea <_spi_m_dma_transfer+0xc2>
    7242:	2807      	cmp	r0, #7
    7244:	bf08      	it	eq
    7246:	2201      	moveq	r2, #1
    7248:	d050      	beq.n	72ec <_spi_m_dma_transfer+0xc4>
	return NULL;
    724a:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    724e:	4658      	mov	r0, fp
    7250:	4b41      	ldr	r3, [pc, #260]	; (7358 <_spi_m_dma_transfer+0x130>)
    7252:	4798      	blx	r3
    7254:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    7256:	4658      	mov	r0, fp
    7258:	4b40      	ldr	r3, [pc, #256]	; (735c <_spi_m_dma_transfer+0x134>)
    725a:	4798      	blx	r3
    725c:	4604      	mov	r4, r0

	if (rxbuf) {
    725e:	2f00      	cmp	r7, #0
    7260:	d04b      	beq.n	72fa <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    7262:	2d00      	cmp	r5, #0
    7264:	d047      	beq.n	72f6 <_spi_m_dma_transfer+0xce>
    7266:	f11b 0000 	adds.w	r0, fp, #0
    726a:	bf18      	it	ne
    726c:	2001      	movne	r0, #1
    726e:	f640 5236 	movw	r2, #3382	; 0xd36
    7272:	493b      	ldr	r1, [pc, #236]	; (7360 <_spi_m_dma_transfer+0x138>)
    7274:	4b3b      	ldr	r3, [pc, #236]	; (7364 <_spi_m_dma_transfer+0x13c>)
    7276:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    7278:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    727a:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    727c:	f013 0f04 	tst.w	r3, #4
    7280:	d107      	bne.n	7292 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    7282:	6853      	ldr	r3, [r2, #4]
    7284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7288:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    728a:	69d3      	ldr	r3, [r2, #28]
    728c:	f013 0f17 	tst.w	r3, #23
    7290:	d1fb      	bne.n	728a <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7292:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    7294:	3128      	adds	r1, #40	; 0x28
    7296:	4630      	mov	r0, r6
    7298:	4b33      	ldr	r3, [pc, #204]	; (7368 <_spi_m_dma_transfer+0x140>)
    729a:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    729c:	4639      	mov	r1, r7
    729e:	4630      	mov	r0, r6
    72a0:	4b32      	ldr	r3, [pc, #200]	; (736c <_spi_m_dma_transfer+0x144>)
    72a2:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    72a4:	4641      	mov	r1, r8
    72a6:	4630      	mov	r0, r6
    72a8:	4b31      	ldr	r3, [pc, #196]	; (7370 <_spi_m_dma_transfer+0x148>)
    72aa:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    72ac:	2100      	movs	r1, #0
    72ae:	4630      	mov	r0, r6
    72b0:	4b30      	ldr	r3, [pc, #192]	; (7374 <_spi_m_dma_transfer+0x14c>)
    72b2:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    72b4:	f1b9 0f00 	cmp.w	r9, #0
    72b8:	d039      	beq.n	732e <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    72ba:	4649      	mov	r1, r9
    72bc:	4620      	mov	r0, r4
    72be:	4b2a      	ldr	r3, [pc, #168]	; (7368 <_spi_m_dma_transfer+0x140>)
    72c0:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    72c2:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    72c4:	3128      	adds	r1, #40	; 0x28
    72c6:	4620      	mov	r0, r4
    72c8:	4b28      	ldr	r3, [pc, #160]	; (736c <_spi_m_dma_transfer+0x144>)
    72ca:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    72cc:	2101      	movs	r1, #1
    72ce:	4620      	mov	r0, r4
    72d0:	4b29      	ldr	r3, [pc, #164]	; (7378 <_spi_m_dma_transfer+0x150>)
    72d2:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    72d4:	4641      	mov	r1, r8
    72d6:	4620      	mov	r0, r4
    72d8:	4b25      	ldr	r3, [pc, #148]	; (7370 <_spi_m_dma_transfer+0x148>)
    72da:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    72dc:	2100      	movs	r1, #0
    72de:	4620      	mov	r0, r4
    72e0:	4b24      	ldr	r3, [pc, #144]	; (7374 <_spi_m_dma_transfer+0x14c>)
    72e2:	4798      	blx	r3

	return ERR_NONE;
}
    72e4:	2000      	movs	r0, #0
    72e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    72ea:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    72ec:	4b23      	ldr	r3, [pc, #140]	; (737c <_spi_m_dma_transfer+0x154>)
    72ee:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    72f2:	4492      	add	sl, r2
    72f4:	e7ab      	b.n	724e <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    72f6:	2000      	movs	r0, #0
    72f8:	e7b9      	b.n	726e <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    72fa:	b1b5      	cbz	r5, 732a <_spi_m_dma_transfer+0x102>
    72fc:	f11b 0000 	adds.w	r0, fp, #0
    7300:	bf18      	it	ne
    7302:	2001      	movne	r0, #1
    7304:	f640 523d 	movw	r2, #3389	; 0xd3d
    7308:	4915      	ldr	r1, [pc, #84]	; (7360 <_spi_m_dma_transfer+0x138>)
    730a:	4b16      	ldr	r3, [pc, #88]	; (7364 <_spi_m_dma_transfer+0x13c>)
    730c:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    730e:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7310:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7312:	f013 0f04 	tst.w	r3, #4
    7316:	d1cd      	bne.n	72b4 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    7318:	6853      	ldr	r3, [r2, #4]
    731a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    731e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7320:	69d3      	ldr	r3, [r2, #28]
    7322:	f013 0f17 	tst.w	r3, #23
    7326:	d1fb      	bne.n	7320 <_spi_m_dma_transfer+0xf8>
    7328:	e7c4      	b.n	72b4 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    732a:	2000      	movs	r0, #0
    732c:	e7ea      	b.n	7304 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    732e:	f10a 010e 	add.w	r1, sl, #14
    7332:	4620      	mov	r0, r4
    7334:	4b0c      	ldr	r3, [pc, #48]	; (7368 <_spi_m_dma_transfer+0x140>)
    7336:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7338:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    733a:	3128      	adds	r1, #40	; 0x28
    733c:	4620      	mov	r0, r4
    733e:	4b0b      	ldr	r3, [pc, #44]	; (736c <_spi_m_dma_transfer+0x144>)
    7340:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    7342:	2100      	movs	r1, #0
    7344:	4620      	mov	r0, r4
    7346:	4b0c      	ldr	r3, [pc, #48]	; (7378 <_spi_m_dma_transfer+0x150>)
    7348:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    734a:	4641      	mov	r1, r8
    734c:	4620      	mov	r0, r4
    734e:	4b08      	ldr	r3, [pc, #32]	; (7370 <_spi_m_dma_transfer+0x148>)
    7350:	4798      	blx	r3
    7352:	e7c3      	b.n	72dc <_spi_m_dma_transfer+0xb4>
    7354:	00006031 	.word	0x00006031
    7358:	00006261 	.word	0x00006261
    735c:	0000624d 	.word	0x0000624d
    7360:	0000c128 	.word	0x0000c128
    7364:	00005271 	.word	0x00005271
    7368:	00005a31 	.word	0x00005a31
    736c:	00005a21 	.word	0x00005a21
    7370:	00005a5d 	.word	0x00005a5d
    7374:	00005ab5 	.word	0x00005ab5
    7378:	00005a41 	.word	0x00005a41
    737c:	0000c104 	.word	0x0000c104

00007380 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    7380:	4b03      	ldr	r3, [pc, #12]	; (7390 <_delay_init+0x10>)
    7382:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    7386:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    7388:	2205      	movs	r2, #5
    738a:	601a      	str	r2, [r3, #0]
    738c:	4770      	bx	lr
    738e:	bf00      	nop
    7390:	e000e010 	.word	0xe000e010

00007394 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    7394:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    7396:	b303      	cbz	r3, 73da <_delay_cycles+0x46>
{
    7398:	b430      	push	{r4, r5}
    739a:	1e5d      	subs	r5, r3, #1
    739c:	b2ed      	uxtb	r5, r5
	while (n--) {
    739e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    73a0:	4a12      	ldr	r2, [pc, #72]	; (73ec <_delay_cycles+0x58>)
    73a2:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    73a6:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    73a8:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    73aa:	6813      	ldr	r3, [r2, #0]
    73ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    73b0:	d0fb      	beq.n	73aa <_delay_cycles+0x16>
	while (n--) {
    73b2:	3801      	subs	r0, #1
    73b4:	b2c0      	uxtb	r0, r0
    73b6:	28ff      	cmp	r0, #255	; 0xff
    73b8:	d1f5      	bne.n	73a6 <_delay_cycles+0x12>
    73ba:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    73be:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    73c2:	3101      	adds	r1, #1
    73c4:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    73c6:	4b09      	ldr	r3, [pc, #36]	; (73ec <_delay_cycles+0x58>)
    73c8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    73ca:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    73cc:	461a      	mov	r2, r3
    73ce:	6813      	ldr	r3, [r2, #0]
    73d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    73d4:	d0fb      	beq.n	73ce <_delay_cycles+0x3a>
		;
}
    73d6:	bc30      	pop	{r4, r5}
    73d8:	4770      	bx	lr
	SysTick->LOAD = buf;
    73da:	4b04      	ldr	r3, [pc, #16]	; (73ec <_delay_cycles+0x58>)
    73dc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    73de:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    73e0:	461a      	mov	r2, r3
    73e2:	6813      	ldr	r3, [r2, #0]
    73e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    73e8:	d0fb      	beq.n	73e2 <_delay_cycles+0x4e>
    73ea:	4770      	bx	lr
    73ec:	e000e010 	.word	0xe000e010

000073f0 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    73f0:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    73f2:	6813      	ldr	r3, [r2, #0]
    73f4:	f043 0302 	orr.w	r3, r3, #2
    73f8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    73fa:	6913      	ldr	r3, [r2, #16]
    73fc:	f013 0f03 	tst.w	r3, #3
    7400:	d1fb      	bne.n	73fa <_tc_timer_start+0xa>
}
    7402:	4770      	bx	lr

00007404 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7404:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7406:	6813      	ldr	r3, [r2, #0]
    7408:	f023 0302 	bic.w	r3, r3, #2
    740c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    740e:	6913      	ldr	r3, [r2, #16]
    7410:	f013 0f03 	tst.w	r3, #3
    7414:	d1fb      	bne.n	740e <_tc_timer_stop+0xa>
}
    7416:	4770      	bx	lr

00007418 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    7418:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    741a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    741c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7420:	2a02      	cmp	r2, #2
    7422:	d00a      	beq.n	743a <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7424:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7426:	f012 0f0c 	tst.w	r2, #12
    742a:	d10c      	bne.n	7446 <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    742c:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    742e:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7430:	691a      	ldr	r2, [r3, #16]
    7432:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7436:	d1fb      	bne.n	7430 <_tc_timer_set_period+0x18>
    7438:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    743a:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    743c:	691a      	ldr	r2, [r3, #16]
    743e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7442:	d1fb      	bne.n	743c <_tc_timer_set_period+0x24>
    7444:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7446:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7448:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    744c:	2a01      	cmp	r2, #1
    744e:	d000      	beq.n	7452 <_tc_timer_set_period+0x3a>
    7450:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7452:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    7454:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7456:	691a      	ldr	r2, [r3, #16]
    7458:	f012 0f20 	tst.w	r2, #32
    745c:	d1fb      	bne.n	7456 <_tc_timer_set_period+0x3e>
    745e:	e7f7      	b.n	7450 <_tc_timer_set_period+0x38>

00007460 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    7460:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7462:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7464:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7468:	2a02      	cmp	r2, #2
    746a:	d00a      	beq.n	7482 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    746c:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    746e:	f012 0f0c 	tst.w	r2, #12
    7472:	d10c      	bne.n	748e <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7474:	691a      	ldr	r2, [r3, #16]
    7476:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    747a:	d1fb      	bne.n	7474 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    747c:	8b98      	ldrh	r0, [r3, #28]
    747e:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    7480:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7482:	691a      	ldr	r2, [r3, #16]
    7484:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7488:	d1fb      	bne.n	7482 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    748a:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    748c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    748e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7490:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7494:	2a01      	cmp	r2, #1
    7496:	d001      	beq.n	749c <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    7498:	2000      	movs	r0, #0
}
    749a:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    749c:	691a      	ldr	r2, [r3, #16]
    749e:	f012 0f20 	tst.w	r2, #32
    74a2:	d1fb      	bne.n	749c <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    74a4:	7ed8      	ldrb	r0, [r3, #27]
    74a6:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    74a8:	4770      	bx	lr

000074aa <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    74aa:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    74ac:	6913      	ldr	r3, [r2, #16]
    74ae:	f013 0f03 	tst.w	r3, #3
    74b2:	d1fb      	bne.n	74ac <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    74b4:	6810      	ldr	r0, [r2, #0]
}
    74b6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    74ba:	4770      	bx	lr

000074bc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    74bc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    74be:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    74c0:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    74c2:	f012 0f01 	tst.w	r2, #1
    74c6:	d100      	bne.n	74ca <tc_interrupt_handler+0xe>
    74c8:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    74ca:	2201      	movs	r2, #1
    74cc:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    74ce:	6803      	ldr	r3, [r0, #0]
    74d0:	4798      	blx	r3
	}
}
    74d2:	e7f9      	b.n	74c8 <tc_interrupt_handler+0xc>

000074d4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    74d4:	b570      	push	{r4, r5, r6, lr}
    74d6:	b088      	sub	sp, #32
    74d8:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    74da:	466c      	mov	r4, sp
    74dc:	4d19      	ldr	r5, [pc, #100]	; (7544 <get_tc_index+0x70>)
    74de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    74e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    74e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    74e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    74ea:	9b00      	ldr	r3, [sp, #0]
    74ec:	42b3      	cmp	r3, r6
    74ee:	d00c      	beq.n	750a <get_tc_index+0x36>
    74f0:	4630      	mov	r0, r6
    74f2:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    74f4:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    74f6:	f852 1b04 	ldr.w	r1, [r2], #4
    74fa:	4281      	cmp	r1, r0
    74fc:	d006      	beq.n	750c <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    74fe:	3301      	adds	r3, #1
    7500:	2b08      	cmp	r3, #8
    7502:	d1f8      	bne.n	74f6 <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7504:	2000      	movs	r0, #0
			return i;
    7506:	b240      	sxtb	r0, r0
    7508:	e013      	b.n	7532 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    750a:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    750c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7510:	d015      	beq.n	753e <get_tc_index+0x6a>
    7512:	2b01      	cmp	r3, #1
    7514:	d00f      	beq.n	7536 <get_tc_index+0x62>
    7516:	2b02      	cmp	r3, #2
    7518:	d00f      	beq.n	753a <get_tc_index+0x66>
    751a:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    751c:	bf08      	it	eq
    751e:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    7520:	d0f1      	beq.n	7506 <get_tc_index+0x32>
	ASSERT(false);
    7522:	f240 1267 	movw	r2, #359	; 0x167
    7526:	4908      	ldr	r1, [pc, #32]	; (7548 <get_tc_index+0x74>)
    7528:	2000      	movs	r0, #0
    752a:	4b08      	ldr	r3, [pc, #32]	; (754c <get_tc_index+0x78>)
    752c:	4798      	blx	r3
	return -1;
    752e:	f04f 30ff 	mov.w	r0, #4294967295
}
    7532:	b008      	add	sp, #32
    7534:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7536:	2001      	movs	r0, #1
    7538:	e7e5      	b.n	7506 <get_tc_index+0x32>
    753a:	2002      	movs	r0, #2
    753c:	e7e3      	b.n	7506 <get_tc_index+0x32>
    753e:	2000      	movs	r0, #0
    7540:	e7e1      	b.n	7506 <get_tc_index+0x32>
    7542:	bf00      	nop
    7544:	0000c144 	.word	0x0000c144
    7548:	0000c1b4 	.word	0x0000c1b4
    754c:	00005271 	.word	0x00005271

00007550 <_tc_timer_init>:
{
    7550:	b570      	push	{r4, r5, r6, lr}
    7552:	4606      	mov	r6, r0
    7554:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    7556:	4608      	mov	r0, r1
    7558:	4b71      	ldr	r3, [pc, #452]	; (7720 <_tc_timer_init+0x1d0>)
    755a:	4798      	blx	r3
    755c:	4605      	mov	r5, r0
	device->hw = hw;
    755e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7560:	22a0      	movs	r2, #160	; 0xa0
    7562:	4970      	ldr	r1, [pc, #448]	; (7724 <_tc_timer_init+0x1d4>)
    7564:	2001      	movs	r0, #1
    7566:	4b70      	ldr	r3, [pc, #448]	; (7728 <_tc_timer_init+0x1d8>)
    7568:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    756a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    756c:	f013 0f01 	tst.w	r3, #1
    7570:	d119      	bne.n	75a6 <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7572:	6923      	ldr	r3, [r4, #16]
    7574:	f013 0f03 	tst.w	r3, #3
    7578:	d1fb      	bne.n	7572 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    757a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    757c:	f013 0f02 	tst.w	r3, #2
    7580:	d00b      	beq.n	759a <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7582:	6823      	ldr	r3, [r4, #0]
    7584:	f023 0302 	bic.w	r3, r3, #2
    7588:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    758a:	6923      	ldr	r3, [r4, #16]
    758c:	f013 0f03 	tst.w	r3, #3
    7590:	d1fb      	bne.n	758a <_tc_timer_init+0x3a>
    7592:	6923      	ldr	r3, [r4, #16]
    7594:	f013 0f02 	tst.w	r3, #2
    7598:	d1fb      	bne.n	7592 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    759a:	2301      	movs	r3, #1
    759c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    759e:	6923      	ldr	r3, [r4, #16]
    75a0:	f013 0f03 	tst.w	r3, #3
    75a4:	d1fb      	bne.n	759e <_tc_timer_init+0x4e>
    75a6:	6923      	ldr	r3, [r4, #16]
    75a8:	f013 0f01 	tst.w	r3, #1
    75ac:	d1fb      	bne.n	75a6 <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    75ae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    75b2:	4a5e      	ldr	r2, [pc, #376]	; (772c <_tc_timer_init+0x1dc>)
    75b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    75b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    75ba:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    75bc:	6923      	ldr	r3, [r4, #16]
    75be:	f013 0f03 	tst.w	r3, #3
    75c2:	d1fb      	bne.n	75bc <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    75c4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    75c8:	4958      	ldr	r1, [pc, #352]	; (772c <_tc_timer_init+0x1dc>)
    75ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    75ce:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    75d2:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    75d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    75d6:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    75d8:	2301      	movs	r3, #1
    75da:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    75dc:	f002 020c 	and.w	r2, r2, #12
    75e0:	2a08      	cmp	r2, #8
    75e2:	d056      	beq.n	7692 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    75e4:	2a00      	cmp	r2, #0
    75e6:	d16b      	bne.n	76c0 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    75e8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    75ec:	4a4f      	ldr	r2, [pc, #316]	; (772c <_tc_timer_init+0x1dc>)
    75ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    75f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    75f4:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    75f6:	6923      	ldr	r3, [r4, #16]
    75f8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    75fc:	d1fb      	bne.n	75f6 <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    75fe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7602:	4a4a      	ldr	r2, [pc, #296]	; (772c <_tc_timer_init+0x1dc>)
    7604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7608:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    760a:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    760c:	6923      	ldr	r3, [r4, #16]
    760e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7612:	d1fb      	bne.n	760c <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7614:	2301      	movs	r3, #1
    7616:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    7618:	4b45      	ldr	r3, [pc, #276]	; (7730 <_tc_timer_init+0x1e0>)
    761a:	429c      	cmp	r4, r3
    761c:	d077      	beq.n	770e <_tc_timer_init+0x1be>
	if (hw == TC1) {
    761e:	4b45      	ldr	r3, [pc, #276]	; (7734 <_tc_timer_init+0x1e4>)
    7620:	429c      	cmp	r4, r3
    7622:	d077      	beq.n	7714 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    7624:	4b44      	ldr	r3, [pc, #272]	; (7738 <_tc_timer_init+0x1e8>)
    7626:	429c      	cmp	r4, r3
    7628:	d077      	beq.n	771a <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    762a:	4b44      	ldr	r3, [pc, #272]	; (773c <_tc_timer_init+0x1ec>)
    762c:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    762e:	bf04      	itt	eq
    7630:	4b43      	ldreq	r3, [pc, #268]	; (7740 <_tc_timer_init+0x1f0>)
    7632:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    7634:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7638:	4a3c      	ldr	r2, [pc, #240]	; (772c <_tc_timer_init+0x1dc>)
    763a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    763e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7642:	2b00      	cmp	r3, #0
    7644:	db23      	blt.n	768e <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7646:	095a      	lsrs	r2, r3, #5
    7648:	f003 031f 	and.w	r3, r3, #31
    764c:	2101      	movs	r1, #1
    764e:	fa01 f303 	lsl.w	r3, r1, r3
    7652:	3220      	adds	r2, #32
    7654:	493b      	ldr	r1, [pc, #236]	; (7744 <_tc_timer_init+0x1f4>)
    7656:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    765a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    765e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7662:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7666:	4b31      	ldr	r3, [pc, #196]	; (772c <_tc_timer_init+0x1dc>)
    7668:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    766c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7670:	2b00      	cmp	r3, #0
    7672:	db0c      	blt.n	768e <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7674:	0959      	lsrs	r1, r3, #5
    7676:	f003 031f 	and.w	r3, r3, #31
    767a:	2201      	movs	r2, #1
    767c:	fa02 f303 	lsl.w	r3, r2, r3
    7680:	4a30      	ldr	r2, [pc, #192]	; (7744 <_tc_timer_init+0x1f4>)
    7682:	f101 0060 	add.w	r0, r1, #96	; 0x60
    7686:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    768a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    768e:	2000      	movs	r0, #0
    7690:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7692:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7696:	4a25      	ldr	r2, [pc, #148]	; (772c <_tc_timer_init+0x1dc>)
    7698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    769e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76a0:	6923      	ldr	r3, [r4, #16]
    76a2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    76a6:	d1fb      	bne.n	76a0 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    76a8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    76ac:	4a1f      	ldr	r2, [pc, #124]	; (772c <_tc_timer_init+0x1dc>)
    76ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    76b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    76b4:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76b6:	6923      	ldr	r3, [r4, #16]
    76b8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    76bc:	d1fb      	bne.n	76b6 <_tc_timer_init+0x166>
    76be:	e7a9      	b.n	7614 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    76c0:	2a04      	cmp	r2, #4
    76c2:	d1a7      	bne.n	7614 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    76c4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    76c8:	4a18      	ldr	r2, [pc, #96]	; (772c <_tc_timer_init+0x1dc>)
    76ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    76ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    76d2:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76d4:	6923      	ldr	r3, [r4, #16]
    76d6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    76da:	d1fb      	bne.n	76d4 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    76dc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    76e0:	4a12      	ldr	r2, [pc, #72]	; (772c <_tc_timer_init+0x1dc>)
    76e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    76e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    76ea:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    76ec:	6923      	ldr	r3, [r4, #16]
    76ee:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    76f2:	d1fb      	bne.n	76ec <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    76f4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    76f8:	4a0c      	ldr	r2, [pc, #48]	; (772c <_tc_timer_init+0x1dc>)
    76fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    76fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    7702:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7704:	6923      	ldr	r3, [r4, #16]
    7706:	f013 0f20 	tst.w	r3, #32
    770a:	d1fb      	bne.n	7704 <_tc_timer_init+0x1b4>
    770c:	e782      	b.n	7614 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    770e:	4b0c      	ldr	r3, [pc, #48]	; (7740 <_tc_timer_init+0x1f0>)
    7710:	601e      	str	r6, [r3, #0]
    7712:	e78a      	b.n	762a <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    7714:	4b0a      	ldr	r3, [pc, #40]	; (7740 <_tc_timer_init+0x1f0>)
    7716:	605e      	str	r6, [r3, #4]
    7718:	e78c      	b.n	7634 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    771a:	4b09      	ldr	r3, [pc, #36]	; (7740 <_tc_timer_init+0x1f0>)
    771c:	609e      	str	r6, [r3, #8]
    771e:	e789      	b.n	7634 <_tc_timer_init+0xe4>
    7720:	000074d5 	.word	0x000074d5
    7724:	0000c1b4 	.word	0x0000c1b4
    7728:	00005271 	.word	0x00005271
    772c:	0000c144 	.word	0x0000c144
    7730:	40003800 	.word	0x40003800
    7734:	40003c00 	.word	0x40003c00
    7738:	4101a000 	.word	0x4101a000
    773c:	4101c000 	.word	0x4101c000
    7740:	200009ac 	.word	0x200009ac
    7744:	e000e100 	.word	0xe000e100

00007748 <_tc_timer_deinit>:
{
    7748:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    774a:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    774c:	4620      	mov	r0, r4
    774e:	4b18      	ldr	r3, [pc, #96]	; (77b0 <_tc_timer_deinit+0x68>)
    7750:	4798      	blx	r3
    7752:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7754:	22cd      	movs	r2, #205	; 0xcd
    7756:	4917      	ldr	r1, [pc, #92]	; (77b4 <_tc_timer_deinit+0x6c>)
    7758:	2001      	movs	r0, #1
    775a:	4b17      	ldr	r3, [pc, #92]	; (77b8 <_tc_timer_deinit+0x70>)
    775c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    775e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7762:	4b16      	ldr	r3, [pc, #88]	; (77bc <_tc_timer_deinit+0x74>)
    7764:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7768:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    776c:	2b00      	cmp	r3, #0
    776e:	db0d      	blt.n	778c <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7770:	095a      	lsrs	r2, r3, #5
    7772:	f003 031f 	and.w	r3, r3, #31
    7776:	2101      	movs	r1, #1
    7778:	fa01 f303 	lsl.w	r3, r1, r3
    777c:	3220      	adds	r2, #32
    777e:	4910      	ldr	r1, [pc, #64]	; (77c0 <_tc_timer_deinit+0x78>)
    7780:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7788:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    778c:	6823      	ldr	r3, [r4, #0]
    778e:	f023 0302 	bic.w	r3, r3, #2
    7792:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7794:	6923      	ldr	r3, [r4, #16]
    7796:	f013 0f03 	tst.w	r3, #3
    779a:	d1fb      	bne.n	7794 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    779c:	6823      	ldr	r3, [r4, #0]
    779e:	f043 0301 	orr.w	r3, r3, #1
    77a2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    77a4:	6923      	ldr	r3, [r4, #16]
    77a6:	f013 0f01 	tst.w	r3, #1
    77aa:	d1fb      	bne.n	77a4 <_tc_timer_deinit+0x5c>
}
    77ac:	bd38      	pop	{r3, r4, r5, pc}
    77ae:	bf00      	nop
    77b0:	000074d5 	.word	0x000074d5
    77b4:	0000c1b4 	.word	0x0000c1b4
    77b8:	00005271 	.word	0x00005271
    77bc:	0000c144 	.word	0x0000c144
    77c0:	e000e100 	.word	0xe000e100

000077c4 <_tc_timer_set_irq>:
{
    77c4:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    77c6:	68c0      	ldr	r0, [r0, #12]
    77c8:	4b09      	ldr	r3, [pc, #36]	; (77f0 <_tc_timer_set_irq+0x2c>)
    77ca:	4798      	blx	r3
    77cc:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    77ce:	f44f 7291 	mov.w	r2, #290	; 0x122
    77d2:	4908      	ldr	r1, [pc, #32]	; (77f4 <_tc_timer_set_irq+0x30>)
    77d4:	2001      	movs	r0, #1
    77d6:	4b08      	ldr	r3, [pc, #32]	; (77f8 <_tc_timer_set_irq+0x34>)
    77d8:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    77da:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    77de:	4b07      	ldr	r3, [pc, #28]	; (77fc <_tc_timer_set_irq+0x38>)
    77e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    77e4:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    77e8:	4b05      	ldr	r3, [pc, #20]	; (7800 <_tc_timer_set_irq+0x3c>)
    77ea:	4798      	blx	r3
    77ec:	bd10      	pop	{r4, pc}
    77ee:	bf00      	nop
    77f0:	000074d5 	.word	0x000074d5
    77f4:	0000c1b4 	.word	0x0000c1b4
    77f8:	00005271 	.word	0x00005271
    77fc:	0000c144 	.word	0x0000c144
    7800:	000057ed 	.word	0x000057ed

00007804 <_tc_get_timer>:
}
    7804:	4800      	ldr	r0, [pc, #0]	; (7808 <_tc_get_timer+0x4>)
    7806:	4770      	bx	lr
    7808:	20000378 	.word	0x20000378

0000780c <TC0_Handler>:
{
    780c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    780e:	4b02      	ldr	r3, [pc, #8]	; (7818 <TC0_Handler+0xc>)
    7810:	6818      	ldr	r0, [r3, #0]
    7812:	4b02      	ldr	r3, [pc, #8]	; (781c <TC0_Handler+0x10>)
    7814:	4798      	blx	r3
    7816:	bd08      	pop	{r3, pc}
    7818:	200009ac 	.word	0x200009ac
    781c:	000074bd 	.word	0x000074bd

00007820 <TC1_Handler>:
{
    7820:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    7822:	4b02      	ldr	r3, [pc, #8]	; (782c <TC1_Handler+0xc>)
    7824:	6858      	ldr	r0, [r3, #4]
    7826:	4b02      	ldr	r3, [pc, #8]	; (7830 <TC1_Handler+0x10>)
    7828:	4798      	blx	r3
    782a:	bd08      	pop	{r3, pc}
    782c:	200009ac 	.word	0x200009ac
    7830:	000074bd 	.word	0x000074bd

00007834 <TC2_Handler>:
{
    7834:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    7836:	4b02      	ldr	r3, [pc, #8]	; (7840 <TC2_Handler+0xc>)
    7838:	6898      	ldr	r0, [r3, #8]
    783a:	4b02      	ldr	r3, [pc, #8]	; (7844 <TC2_Handler+0x10>)
    783c:	4798      	blx	r3
    783e:	bd08      	pop	{r3, pc}
    7840:	200009ac 	.word	0x200009ac
    7844:	000074bd 	.word	0x000074bd

00007848 <TC3_Handler>:
{
    7848:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    784a:	4b02      	ldr	r3, [pc, #8]	; (7854 <TC3_Handler+0xc>)
    784c:	68d8      	ldr	r0, [r3, #12]
    784e:	4b02      	ldr	r3, [pc, #8]	; (7858 <TC3_Handler+0x10>)
    7850:	4798      	blx	r3
    7852:	bd08      	pop	{r3, pc}
    7854:	200009ac 	.word	0x200009ac
    7858:	000074bd 	.word	0x000074bd

0000785c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    785c:	2000      	movs	r0, #0
    785e:	4770      	bx	lr

00007860 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    7860:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    7862:	7c83      	ldrb	r3, [r0, #18]
    7864:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7868:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    786a:	f002 0107 	and.w	r1, r2, #7
    786e:	2901      	cmp	r1, #1
    7870:	d00b      	beq.n	788a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7872:	015a      	lsls	r2, r3, #5
    7874:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7878:	2110      	movs	r1, #16
    787a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    787e:	015b      	lsls	r3, r3, #5
    7880:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7884:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    7888:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    788a:	f012 0f40 	tst.w	r2, #64	; 0x40
    788e:	d00c      	beq.n	78aa <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    7890:	7cc2      	ldrb	r2, [r0, #19]
    7892:	f36f 1286 	bfc	r2, #6, #1
    7896:	74c2      	strb	r2, [r0, #19]
    7898:	015a      	lsls	r2, r3, #5
    789a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    789e:	2180      	movs	r1, #128	; 0x80
    78a0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    78a4:	2140      	movs	r1, #64	; 0x40
    78a6:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    78aa:	7cc2      	ldrb	r2, [r0, #19]
    78ac:	f36f 02c3 	bfc	r2, #3, #1
    78b0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    78b2:	490a      	ldr	r1, [pc, #40]	; (78dc <_usb_d_dev_handle_setup+0x7c>)
    78b4:	015a      	lsls	r2, r3, #5
    78b6:	188c      	adds	r4, r1, r2
    78b8:	2500      	movs	r5, #0
    78ba:	72a5      	strb	r5, [r4, #10]
    78bc:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    78be:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    78c2:	246f      	movs	r4, #111	; 0x6f
    78c4:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    78c8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    78cc:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    78d0:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    78d4:	7c80      	ldrb	r0, [r0, #18]
    78d6:	4798      	blx	r3
    78d8:	bd38      	pop	{r3, r4, r5, pc}
    78da:	bf00      	nop
    78dc:	200009bc 	.word	0x200009bc

000078e0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    78e0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    78e2:	2320      	movs	r3, #32
    78e4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    78e8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    78ea:	7c83      	ldrb	r3, [r0, #18]
    78ec:	f003 030f 	and.w	r3, r3, #15
    78f0:	015b      	lsls	r3, r3, #5
    78f2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    78f6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    78fa:	4b04      	ldr	r3, [pc, #16]	; (790c <_usb_d_dev_handle_stall+0x2c>)
    78fc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    7900:	6882      	ldr	r2, [r0, #8]
    7902:	2101      	movs	r1, #1
    7904:	7c80      	ldrb	r0, [r0, #18]
    7906:	4798      	blx	r3
    7908:	bd08      	pop	{r3, pc}
    790a:	bf00      	nop
    790c:	200009bc 	.word	0x200009bc

00007910 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    7910:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    7912:	7c84      	ldrb	r4, [r0, #18]
    7914:	2cff      	cmp	r4, #255	; 0xff
    7916:	d003      	beq.n	7920 <_usb_d_dev_trans_done+0x10>
    7918:	7cc3      	ldrb	r3, [r0, #19]
    791a:	f013 0f40 	tst.w	r3, #64	; 0x40
    791e:	d100      	bne.n	7922 <_usb_d_dev_trans_done+0x12>
    7920:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    7922:	7cc2      	ldrb	r2, [r0, #19]
    7924:	f36f 1286 	bfc	r2, #6, #1
    7928:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    792a:	4a03      	ldr	r2, [pc, #12]	; (7938 <_usb_d_dev_trans_done+0x28>)
    792c:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    7930:	6882      	ldr	r2, [r0, #8]
    7932:	4620      	mov	r0, r4
    7934:	47a8      	blx	r5
    7936:	e7f3      	b.n	7920 <_usb_d_dev_trans_done+0x10>
    7938:	200009bc 	.word	0x200009bc

0000793c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    793c:	b530      	push	{r4, r5, lr}
    793e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7940:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    7942:	2425      	movs	r4, #37	; 0x25
    7944:	f88d 4004 	strb.w	r4, [sp, #4]
    7948:	244a      	movs	r4, #74	; 0x4a
    794a:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    794e:	2bff      	cmp	r3, #255	; 0xff
    7950:	d01e      	beq.n	7990 <_usb_d_dev_trans_stop+0x54>
    7952:	7cc4      	ldrb	r4, [r0, #19]
    7954:	f014 0f40 	tst.w	r4, #64	; 0x40
    7958:	d01a      	beq.n	7990 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    795a:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    795e:	b1c9      	cbz	r1, 7994 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7960:	0163      	lsls	r3, r4, #5
    7962:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7966:	2580      	movs	r5, #128	; 0x80
    7968:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    796c:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    796e:	a902      	add	r1, sp, #8
    7970:	440b      	add	r3, r1
    7972:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7976:	0163      	lsls	r3, r4, #5
    7978:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    797c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7980:	0163      	lsls	r3, r4, #5
    7982:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7986:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    798a:	4611      	mov	r1, r2
    798c:	4b05      	ldr	r3, [pc, #20]	; (79a4 <_usb_d_dev_trans_stop+0x68>)
    798e:	4798      	blx	r3
}
    7990:	b003      	add	sp, #12
    7992:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7994:	0163      	lsls	r3, r4, #5
    7996:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    799a:	2540      	movs	r5, #64	; 0x40
    799c:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    79a0:	e7e4      	b.n	796c <_usb_d_dev_trans_stop+0x30>
    79a2:	bf00      	nop
    79a4:	00007911 	.word	0x00007911

000079a8 <_usb_d_dev_handle_trfail>:
{
    79a8:	b530      	push	{r4, r5, lr}
    79aa:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    79ac:	7c83      	ldrb	r3, [r0, #18]
    79ae:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    79b2:	2204      	movs	r2, #4
    79b4:	f88d 2004 	strb.w	r2, [sp, #4]
    79b8:	2208      	movs	r2, #8
    79ba:	f88d 2005 	strb.w	r2, [sp, #5]
    79be:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    79c0:	460c      	mov	r4, r1
    79c2:	b391      	cbz	r1, 7a2a <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    79c4:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    79c8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    79cc:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    79d0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    79d4:	4a32      	ldr	r2, [pc, #200]	; (7aa0 <_usb_d_dev_handle_trfail+0xf8>)
    79d6:	440a      	add	r2, r1
    79d8:	7a91      	ldrb	r1, [r2, #10]
    79da:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    79dc:	2d02      	cmp	r5, #2
    79de:	d02c      	beq.n	7a3a <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    79e0:	f011 0f02 	tst.w	r1, #2
    79e4:	d045      	beq.n	7a72 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    79e6:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    79e8:	7a91      	ldrb	r1, [r2, #10]
    79ea:	f36f 0141 	bfc	r1, #1, #1
    79ee:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    79f0:	aa02      	add	r2, sp, #8
    79f2:	4422      	add	r2, r4
    79f4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    79f8:	015a      	lsls	r2, r3, #5
    79fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    79fe:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7a02:	015b      	lsls	r3, r3, #5
    7a04:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7a08:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    7a0c:	f005 0307 	and.w	r3, r5, #7
    7a10:	2b01      	cmp	r3, #1
    7a12:	d143      	bne.n	7a9c <_usb_d_dev_handle_trfail+0xf4>
    7a14:	7cc3      	ldrb	r3, [r0, #19]
    7a16:	f013 0f40 	tst.w	r3, #64	; 0x40
    7a1a:	d03f      	beq.n	7a9c <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    7a1c:	09d9      	lsrs	r1, r3, #7
    7a1e:	428c      	cmp	r4, r1
    7a20:	d03c      	beq.n	7a9c <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    7a22:	2200      	movs	r2, #0
    7a24:	4b1f      	ldr	r3, [pc, #124]	; (7aa4 <_usb_d_dev_handle_trfail+0xfc>)
    7a26:	4798      	blx	r3
    7a28:	e038      	b.n	7a9c <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7a2a:	0159      	lsls	r1, r3, #5
    7a2c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    7a30:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7a34:	f005 0507 	and.w	r5, r5, #7
    7a38:	e7ca      	b.n	79d0 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    7a3a:	f011 0f01 	tst.w	r1, #1
    7a3e:	d0cf      	beq.n	79e0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    7a40:	7a91      	ldrb	r1, [r2, #10]
    7a42:	f36f 0100 	bfc	r1, #0, #1
    7a46:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7a48:	aa02      	add	r2, sp, #8
    7a4a:	4422      	add	r2, r4
    7a4c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7a50:	015a      	lsls	r2, r3, #5
    7a52:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7a56:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7a5a:	015b      	lsls	r3, r3, #5
    7a5c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7a60:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    7a64:	2204      	movs	r2, #4
    7a66:	1c21      	adds	r1, r4, #0
    7a68:	bf18      	it	ne
    7a6a:	2101      	movne	r1, #1
    7a6c:	4b0d      	ldr	r3, [pc, #52]	; (7aa4 <_usb_d_dev_handle_trfail+0xfc>)
    7a6e:	4798      	blx	r3
    7a70:	e014      	b.n	7a9c <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    7a72:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    7a76:	4a0a      	ldr	r2, [pc, #40]	; (7aa0 <_usb_d_dev_handle_trfail+0xf8>)
    7a78:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    7a7c:	2100      	movs	r1, #0
    7a7e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7a80:	aa02      	add	r2, sp, #8
    7a82:	4414      	add	r4, r2
    7a84:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7a88:	015a      	lsls	r2, r3, #5
    7a8a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7a8e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7a92:	015b      	lsls	r3, r3, #5
    7a94:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7a98:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    7a9c:	b003      	add	sp, #12
    7a9e:	bd30      	pop	{r4, r5, pc}
    7aa0:	200009bc 	.word	0x200009bc
    7aa4:	0000793d 	.word	0x0000793d

00007aa8 <_usb_d_dev_reset_epts>:
{
    7aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7aac:	4d0c      	ldr	r5, [pc, #48]	; (7ae0 <_usb_d_dev_reset_epts+0x38>)
    7aae:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    7ab2:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    7ab6:	f04f 0803 	mov.w	r8, #3
    7aba:	4f0a      	ldr	r7, [pc, #40]	; (7ae4 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    7abc:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    7abe:	4641      	mov	r1, r8
    7ac0:	4620      	mov	r0, r4
    7ac2:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    7ac4:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    7ac6:	2300      	movs	r3, #0
    7ac8:	74e3      	strb	r3, [r4, #19]
    7aca:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    7acc:	42ac      	cmp	r4, r5
    7ace:	d1f6      	bne.n	7abe <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    7ad0:	22c0      	movs	r2, #192	; 0xc0
    7ad2:	4619      	mov	r1, r3
    7ad4:	4802      	ldr	r0, [pc, #8]	; (7ae0 <_usb_d_dev_reset_epts+0x38>)
    7ad6:	4b04      	ldr	r3, [pc, #16]	; (7ae8 <_usb_d_dev_reset_epts+0x40>)
    7ad8:	4798      	blx	r3
    7ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ade:	bf00      	nop
    7ae0:	200009bc 	.word	0x200009bc
    7ae4:	00007911 	.word	0x00007911
    7ae8:	0000b1fb 	.word	0x0000b1fb

00007aec <_usb_d_dev_in_next>:
{
    7aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7af0:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    7af2:	7c84      	ldrb	r4, [r0, #18]
    7af4:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    7af8:	4688      	mov	r8, r1
    7afa:	2900      	cmp	r1, #0
    7afc:	f000 80a0 	beq.w	7c40 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    7b00:	4b58      	ldr	r3, [pc, #352]	; (7c64 <_usb_d_dev_in_next+0x178>)
    7b02:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    7b06:	6958      	ldr	r0, [r3, #20]
    7b08:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7b0c:	8a2b      	ldrh	r3, [r5, #16]
    7b0e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    7b12:	4293      	cmp	r3, r2
    7b14:	f000 808e 	beq.w	7c34 <_usb_d_dev_in_next+0x148>
    7b18:	3b01      	subs	r3, #1
    7b1a:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    7b1c:	7cef      	ldrb	r7, [r5, #19]
    7b1e:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    7b22:	f1b8 0f00 	cmp.w	r8, #0
    7b26:	d005      	beq.n	7b34 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7b28:	0162      	lsls	r2, r4, #5
    7b2a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7b2e:	2302      	movs	r3, #2
    7b30:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    7b34:	68a9      	ldr	r1, [r5, #8]
    7b36:	eb0e 0301 	add.w	r3, lr, r1
    7b3a:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    7b3c:	686e      	ldr	r6, [r5, #4]
    7b3e:	42b3      	cmp	r3, r6
    7b40:	d23f      	bcs.n	7bc2 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    7b42:	1af6      	subs	r6, r6, r3
    7b44:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    7b46:	7cea      	ldrb	r2, [r5, #19]
    7b48:	f012 0f20 	tst.w	r2, #32
    7b4c:	d02d      	beq.n	7baa <_usb_d_dev_in_next+0xbe>
    7b4e:	8a2a      	ldrh	r2, [r5, #16]
    7b50:	4296      	cmp	r6, r2
    7b52:	bf28      	it	cs
    7b54:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    7b56:	6829      	ldr	r1, [r5, #0]
    7b58:	4632      	mov	r2, r6
    7b5a:	4419      	add	r1, r3
    7b5c:	68e8      	ldr	r0, [r5, #12]
    7b5e:	4b42      	ldr	r3, [pc, #264]	; (7c68 <_usb_d_dev_in_next+0x17c>)
    7b60:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    7b62:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    7b64:	4b3f      	ldr	r3, [pc, #252]	; (7c64 <_usb_d_dev_in_next+0x178>)
    7b66:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7b6a:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    7b6c:	4b3d      	ldr	r3, [pc, #244]	; (7c64 <_usb_d_dev_in_next+0x178>)
    7b6e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7b72:	695a      	ldr	r2, [r3, #20]
    7b74:	f366 020d 	bfi	r2, r6, #0, #14
    7b78:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    7b7a:	695a      	ldr	r2, [r3, #20]
    7b7c:	f36f 329b 	bfc	r2, #14, #14
    7b80:	615a      	str	r2, [r3, #20]
	if (!isr) {
    7b82:	f1b8 0f00 	cmp.w	r8, #0
    7b86:	d108      	bne.n	7b9a <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    7b88:	2f01      	cmp	r7, #1
    7b8a:	bf0c      	ite	eq
    7b8c:	224e      	moveq	r2, #78	; 0x4e
    7b8e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7b90:	0163      	lsls	r3, r4, #5
    7b92:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7b96:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7b9a:	0164      	lsls	r4, r4, #5
    7b9c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    7ba0:	2380      	movs	r3, #128	; 0x80
    7ba2:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    7ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7baa:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    7bae:	bf28      	it	cs
    7bb0:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    7bb4:	6829      	ldr	r1, [r5, #0]
    7bb6:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    7bb8:	4a2a      	ldr	r2, [pc, #168]	; (7c64 <_usb_d_dev_in_next+0x178>)
    7bba:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    7bbe:	6113      	str	r3, [r2, #16]
    7bc0:	e7d4      	b.n	7b6c <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    7bc2:	7ceb      	ldrb	r3, [r5, #19]
    7bc4:	f013 0f10 	tst.w	r3, #16
    7bc8:	d00f      	beq.n	7bea <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    7bca:	7ceb      	ldrb	r3, [r5, #19]
    7bcc:	f36f 1304 	bfc	r3, #4, #1
    7bd0:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    7bd2:	4b24      	ldr	r3, [pc, #144]	; (7c64 <_usb_d_dev_in_next+0x178>)
    7bd4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7bd8:	695a      	ldr	r2, [r3, #20]
    7bda:	f36f 020d 	bfc	r2, #0, #14
    7bde:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    7be0:	695a      	ldr	r2, [r3, #20]
    7be2:	f36f 329b 	bfc	r2, #14, #14
    7be6:	615a      	str	r2, [r3, #20]
    7be8:	e7cb      	b.n	7b82 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    7bea:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7bec:	ea4f 1444 	mov.w	r4, r4, lsl #5
    7bf0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    7bf4:	bf0c      	ite	eq
    7bf6:	234b      	moveq	r3, #75	; 0x4b
    7bf8:	234a      	movne	r3, #74	; 0x4a
    7bfa:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    7bfe:	8a2a      	ldrh	r2, [r5, #16]
    7c00:	ea00 030e 	and.w	r3, r0, lr
    7c04:	429a      	cmp	r2, r3
    7c06:	d005      	beq.n	7c14 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    7c08:	2100      	movs	r1, #0
    7c0a:	4628      	mov	r0, r5
    7c0c:	4b17      	ldr	r3, [pc, #92]	; (7c6c <_usb_d_dev_in_next+0x180>)
    7c0e:	4798      	blx	r3
	return;
    7c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    7c14:	7ceb      	ldrb	r3, [r5, #19]
    7c16:	f36f 1386 	bfc	r3, #6, #1
    7c1a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    7c1c:	4b11      	ldr	r3, [pc, #68]	; (7c64 <_usb_d_dev_in_next+0x178>)
    7c1e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    7c22:	68a9      	ldr	r1, [r5, #8]
    7c24:	7ca8      	ldrb	r0, [r5, #18]
    7c26:	4798      	blx	r3
    7c28:	b9d0      	cbnz	r0, 7c60 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    7c2a:	7ceb      	ldrb	r3, [r5, #19]
    7c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7c30:	74eb      	strb	r3, [r5, #19]
    7c32:	e7e9      	b.n	7c08 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    7c34:	7cef      	ldrb	r7, [r5, #19]
    7c36:	f007 0707 	and.w	r7, r7, #7
    7c3a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    7c3e:	e773      	b.n	7b28 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7c40:	8a03      	ldrh	r3, [r0, #16]
    7c42:	f240 32ff 	movw	r2, #1023	; 0x3ff
    7c46:	4293      	cmp	r3, r2
    7c48:	d107      	bne.n	7c5a <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    7c4a:	7cef      	ldrb	r7, [r5, #19]
    7c4c:	f007 0707 	and.w	r7, r7, #7
    7c50:	f04f 0e00 	mov.w	lr, #0
    7c54:	f240 30ff 	movw	r0, #1023	; 0x3ff
    7c58:	e76c      	b.n	7b34 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7c5a:	f04f 0e00 	mov.w	lr, #0
    7c5e:	e75b      	b.n	7b18 <_usb_d_dev_in_next+0x2c>
    7c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c64:	200009bc 	.word	0x200009bc
    7c68:	0000b1e5 	.word	0x0000b1e5
    7c6c:	00007911 	.word	0x00007911

00007c70 <_usb_d_dev_out_next>:
{
    7c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c74:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    7c76:	7c85      	ldrb	r5, [r0, #18]
    7c78:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    7c7c:	4689      	mov	r9, r1
    7c7e:	2900      	cmp	r1, #0
    7c80:	d056      	beq.n	7d30 <_usb_d_dev_out_next+0xc0>
    7c82:	4b74      	ldr	r3, [pc, #464]	; (7e54 <_usb_d_dev_out_next+0x1e4>)
    7c84:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    7c88:	685a      	ldr	r2, [r3, #4]
    7c8a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    7c8e:	685f      	ldr	r7, [r3, #4]
    7c90:	f3c7 070d 	ubfx	r7, r7, #0, #14
    7c94:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7c96:	8a06      	ldrh	r6, [r0, #16]
    7c98:	f240 33ff 	movw	r3, #1023	; 0x3ff
    7c9c:	429e      	cmp	r6, r3
    7c9e:	f000 80ba 	beq.w	7e16 <_usb_d_dev_out_next+0x1a6>
    7ca2:	3e01      	subs	r6, #1
    7ca4:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    7ca6:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7caa:	f894 8013 	ldrb.w	r8, [r4, #19]
    7cae:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    7cb2:	f1b9 0f00 	cmp.w	r9, #0
    7cb6:	d005      	beq.n	7cc4 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7cb8:	016b      	lsls	r3, r5, #5
    7cba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7cbe:	2201      	movs	r2, #1
    7cc0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    7cc4:	7ce3      	ldrb	r3, [r4, #19]
    7cc6:	f013 0f20 	tst.w	r3, #32
    7cca:	d00d      	beq.n	7ce8 <_usb_d_dev_out_next+0x78>
    7ccc:	6862      	ldr	r2, [r4, #4]
    7cce:	2a00      	cmp	r2, #0
    7cd0:	d037      	beq.n	7d42 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    7cd2:	68a0      	ldr	r0, [r4, #8]
    7cd4:	1a12      	subs	r2, r2, r0
    7cd6:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    7cd8:	6823      	ldr	r3, [r4, #0]
    7cda:	42ba      	cmp	r2, r7
    7cdc:	bf28      	it	cs
    7cde:	463a      	movcs	r2, r7
    7ce0:	68e1      	ldr	r1, [r4, #12]
    7ce2:	4418      	add	r0, r3
    7ce4:	4b5c      	ldr	r3, [pc, #368]	; (7e58 <_usb_d_dev_out_next+0x1e8>)
    7ce6:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    7ce8:	6863      	ldr	r3, [r4, #4]
    7cea:	b353      	cbz	r3, 7d42 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    7cec:	f1b9 0f00 	cmp.w	r9, #0
    7cf0:	d040      	beq.n	7d74 <_usb_d_dev_out_next+0x104>
    7cf2:	8a22      	ldrh	r2, [r4, #16]
    7cf4:	42ba      	cmp	r2, r7
    7cf6:	d93d      	bls.n	7d74 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    7cf8:	7ce3      	ldrb	r3, [r4, #19]
    7cfa:	f36f 1304 	bfc	r3, #4, #1
    7cfe:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    7d00:	68a3      	ldr	r3, [r4, #8]
    7d02:	445b      	add	r3, fp
    7d04:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    7d06:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7d0a:	ea4f 1345 	mov.w	r3, r5, lsl #5
    7d0e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7d12:	bf0c      	ite	eq
    7d14:	222d      	moveq	r2, #45	; 0x2d
    7d16:	2225      	movne	r2, #37	; 0x25
    7d18:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    7d1c:	b915      	cbnz	r5, 7d24 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7d1e:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    7d20:	4b4c      	ldr	r3, [pc, #304]	; (7e54 <_usb_d_dev_out_next+0x1e4>)
    7d22:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    7d24:	2100      	movs	r1, #0
    7d26:	4620      	mov	r0, r4
    7d28:	4b4c      	ldr	r3, [pc, #304]	; (7e5c <_usb_d_dev_out_next+0x1ec>)
    7d2a:	4798      	blx	r3
	return;
    7d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    7d30:	8a06      	ldrh	r6, [r0, #16]
    7d32:	f240 33ff 	movw	r3, #1023	; 0x3ff
    7d36:	429e      	cmp	r6, r3
    7d38:	d07b      	beq.n	7e32 <_usb_d_dev_out_next+0x1c2>
    7d3a:	f04f 0b00 	mov.w	fp, #0
    7d3e:	46da      	mov	sl, fp
    7d40:	e7af      	b.n	7ca2 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    7d42:	7ce3      	ldrb	r3, [r4, #19]
    7d44:	f013 0f10 	tst.w	r3, #16
    7d48:	d06c      	beq.n	7e24 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    7d4a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    7d4c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    7d50:	f043 0320 	orr.w	r3, r3, #32
    7d54:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7d56:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    7d58:	493e      	ldr	r1, [pc, #248]	; (7e54 <_usb_d_dev_out_next+0x1e4>)
    7d5a:	016a      	lsls	r2, r5, #5
    7d5c:	188b      	adds	r3, r1, r2
    7d5e:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    7d60:	8a21      	ldrh	r1, [r4, #16]
    7d62:	685a      	ldr	r2, [r3, #4]
    7d64:	f361 329b 	bfi	r2, r1, #14, #14
    7d68:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    7d6a:	685a      	ldr	r2, [r3, #4]
    7d6c:	f36f 020d 	bfc	r2, #0, #14
    7d70:	605a      	str	r2, [r3, #4]
    7d72:	e01d      	b.n	7db0 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    7d74:	68a2      	ldr	r2, [r4, #8]
    7d76:	4452      	add	r2, sl
    7d78:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    7d7a:	4293      	cmp	r3, r2
    7d7c:	d9c3      	bls.n	7d06 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    7d7e:	1a9b      	subs	r3, r3, r2
    7d80:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    7d82:	7ce1      	ldrb	r1, [r4, #19]
    7d84:	f011 0f20 	tst.w	r1, #32
    7d88:	d026      	beq.n	7dd8 <_usb_d_dev_out_next+0x168>
    7d8a:	8a22      	ldrh	r2, [r4, #16]
    7d8c:	4293      	cmp	r3, r2
    7d8e:	bf28      	it	cs
    7d90:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7d92:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    7d94:	016a      	lsls	r2, r5, #5
    7d96:	492f      	ldr	r1, [pc, #188]	; (7e54 <_usb_d_dev_out_next+0x1e4>)
    7d98:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    7d9a:	4a2e      	ldr	r2, [pc, #184]	; (7e54 <_usb_d_dev_out_next+0x1e4>)
    7d9c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    7da0:	6851      	ldr	r1, [r2, #4]
    7da2:	f363 319b 	bfi	r1, r3, #14, #14
    7da6:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    7da8:	6853      	ldr	r3, [r2, #4]
    7daa:	f36f 030d 	bfc	r3, #0, #14
    7dae:	6053      	str	r3, [r2, #4]
	if (!isr) {
    7db0:	f1b9 0f00 	cmp.w	r9, #0
    7db4:	d108      	bne.n	7dc8 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    7db6:	f1b8 0f01 	cmp.w	r8, #1
    7dba:	d025      	beq.n	7e08 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    7dbc:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7dbe:	016b      	lsls	r3, r5, #5
    7dc0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7dc4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7dc8:	016d      	lsls	r5, r5, #5
    7dca:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    7dce:	2340      	movs	r3, #64	; 0x40
    7dd0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    7dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    7dd8:	8a21      	ldrh	r1, [r4, #16]
    7dda:	428b      	cmp	r3, r1
    7ddc:	d90a      	bls.n	7df4 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    7dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    7de2:	d80e      	bhi.n	7e02 <_usb_d_dev_out_next+0x192>
    7de4:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    7de8:	6821      	ldr	r1, [r4, #0]
    7dea:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    7dec:	0169      	lsls	r1, r5, #5
    7dee:	4819      	ldr	r0, [pc, #100]	; (7e54 <_usb_d_dev_out_next+0x1e4>)
    7df0:	5042      	str	r2, [r0, r1]
    7df2:	e7d2      	b.n	7d9a <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    7df4:	428b      	cmp	r3, r1
    7df6:	d2f7      	bcs.n	7de8 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    7df8:	7ce1      	ldrb	r1, [r4, #19]
    7dfa:	f041 0120 	orr.w	r1, r1, #32
    7dfe:	74e1      	strb	r1, [r4, #19]
    7e00:	e7f2      	b.n	7de8 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    7e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    7e06:	e7ef      	b.n	7de8 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    7e08:	4b12      	ldr	r3, [pc, #72]	; (7e54 <_usb_d_dev_out_next+0x1e4>)
    7e0a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    7e0e:	2200      	movs	r2, #0
    7e10:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    7e12:	222d      	movs	r2, #45	; 0x2d
    7e14:	e7d3      	b.n	7dbe <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    7e16:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e1a:	f890 8013 	ldrb.w	r8, [r0, #19]
    7e1e:	f008 0807 	and.w	r8, r8, #7
    7e22:	e749      	b.n	7cb8 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    7e24:	f1b9 0f00 	cmp.w	r9, #0
    7e28:	d10b      	bne.n	7e42 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    7e2a:	68a3      	ldr	r3, [r4, #8]
    7e2c:	4453      	add	r3, sl
    7e2e:	60a3      	str	r3, [r4, #8]
    7e30:	e769      	b.n	7d06 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e32:	f890 8013 	ldrb.w	r8, [r0, #19]
    7e36:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    7e3a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7e3c:	46bb      	mov	fp, r7
    7e3e:	46ba      	mov	sl, r7
    7e40:	e740      	b.n	7cc4 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    7e42:	8a23      	ldrh	r3, [r4, #16]
    7e44:	42bb      	cmp	r3, r7
    7e46:	f63f af57 	bhi.w	7cf8 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    7e4a:	68a3      	ldr	r3, [r4, #8]
    7e4c:	4453      	add	r3, sl
    7e4e:	60a3      	str	r3, [r4, #8]
    7e50:	e759      	b.n	7d06 <_usb_d_dev_out_next+0x96>
    7e52:	bf00      	nop
    7e54:	200009bc 	.word	0x200009bc
    7e58:	0000b1e5 	.word	0x0000b1e5
    7e5c:	00007911 	.word	0x00007911

00007e60 <_usb_d_dev_handler>:
{
    7e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    7e64:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7e68:	8c1e      	ldrh	r6, [r3, #32]
    7e6a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    7e6c:	b146      	cbz	r6, 7e80 <_usb_d_dev_handler+0x20>
    7e6e:	4d96      	ldr	r5, [pc, #600]	; (80c8 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    7e70:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    7e72:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    7e76:	f8df 926c 	ldr.w	r9, [pc, #620]	; 80e4 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    7e7a:	f8df 826c 	ldr.w	r8, [pc, #620]	; 80e8 <_usb_d_dev_handler+0x288>
    7e7e:	e0de      	b.n	803e <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7e80:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7e82:	8b1b      	ldrh	r3, [r3, #24]
    7e84:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    7e86:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    7e88:	f013 0f04 	tst.w	r3, #4
    7e8c:	d11e      	bne.n	7ecc <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    7e8e:	f413 7f00 	tst.w	r3, #512	; 0x200
    7e92:	d125      	bne.n	7ee0 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    7e94:	f013 0f80 	tst.w	r3, #128	; 0x80
    7e98:	d14f      	bne.n	7f3a <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    7e9a:	f013 0f70 	tst.w	r3, #112	; 0x70
    7e9e:	d158      	bne.n	7f52 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    7ea0:	f013 0f08 	tst.w	r3, #8
    7ea4:	d178      	bne.n	7f98 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    7ea6:	f013 0f01 	tst.w	r3, #1
    7eaa:	d0e0      	beq.n	7e6e <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7eac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7eb0:	f240 2201 	movw	r2, #513	; 0x201
    7eb4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7eb6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7eb8:	2270      	movs	r2, #112	; 0x70
    7eba:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    7ebc:	4b83      	ldr	r3, [pc, #524]	; (80cc <_usb_d_dev_handler+0x26c>)
    7ebe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7ec2:	2100      	movs	r1, #0
    7ec4:	2004      	movs	r0, #4
    7ec6:	4798      	blx	r3
    7ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7ecc:	2204      	movs	r2, #4
    7ece:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7ed2:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    7ed4:	4b7d      	ldr	r3, [pc, #500]	; (80cc <_usb_d_dev_handler+0x26c>)
    7ed6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    7eda:	4798      	blx	r3
    7edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7ee0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7ee4:	f240 2201 	movw	r2, #513	; 0x201
    7ee8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7eea:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7eec:	2270      	movs	r2, #112	; 0x70
    7eee:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    7ef0:	4b76      	ldr	r3, [pc, #472]	; (80cc <_usb_d_dev_handler+0x26c>)
    7ef2:	891b      	ldrh	r3, [r3, #8]
    7ef4:	f003 030f 	and.w	r3, r3, #15
    7ef8:	2b03      	cmp	r3, #3
    7efa:	d014      	beq.n	7f26 <_usb_d_dev_handler+0xc6>
    7efc:	2301      	movs	r3, #1
    7efe:	4873      	ldr	r0, [pc, #460]	; (80cc <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    7f00:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    7f02:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    7f06:	8912      	ldrh	r2, [r2, #8]
    7f08:	f002 020f 	and.w	r2, r2, #15
    7f0c:	2a03      	cmp	r2, #3
    7f0e:	d00b      	beq.n	7f28 <_usb_d_dev_handler+0xc8>
    7f10:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    7f12:	2b05      	cmp	r3, #5
    7f14:	d1f4      	bne.n	7f00 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    7f16:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    7f18:	4b6c      	ldr	r3, [pc, #432]	; (80cc <_usb_d_dev_handler+0x26c>)
    7f1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7f1e:	2003      	movs	r0, #3
    7f20:	4798      	blx	r3
    7f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    7f26:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    7f28:	4b68      	ldr	r3, [pc, #416]	; (80cc <_usb_d_dev_handler+0x26c>)
    7f2a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    7f2e:	8919      	ldrh	r1, [r3, #8]
    7f30:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    7f34:	2200      	movs	r2, #0
    7f36:	811a      	strh	r2, [r3, #8]
    7f38:	e7ee      	b.n	7f18 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7f3a:	2280      	movs	r2, #128	; 0x80
    7f3c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f40:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    7f42:	4b62      	ldr	r3, [pc, #392]	; (80cc <_usb_d_dev_handler+0x26c>)
    7f44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7f48:	2100      	movs	r1, #0
    7f4a:	2005      	movs	r0, #5
    7f4c:	4798      	blx	r3
    7f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f52:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f56:	2270      	movs	r2, #112	; 0x70
    7f58:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7f5a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7f5c:	f240 2201 	movw	r2, #513	; 0x201
    7f60:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7f62:	4b5b      	ldr	r3, [pc, #364]	; (80d0 <_usb_d_dev_handler+0x270>)
    7f64:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    7f68:	f013 0f01 	tst.w	r3, #1
    7f6c:	d00e      	beq.n	7f8c <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7f6e:	4a58      	ldr	r2, [pc, #352]	; (80d0 <_usb_d_dev_handler+0x270>)
    7f70:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    7f72:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    7f76:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    7f7a:	d1f9      	bne.n	7f70 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    7f7c:	4b53      	ldr	r3, [pc, #332]	; (80cc <_usb_d_dev_handler+0x26c>)
    7f7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7f82:	2100      	movs	r1, #0
    7f84:	2002      	movs	r0, #2
    7f86:	4798      	blx	r3
    7f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7f8c:	4a50      	ldr	r2, [pc, #320]	; (80d0 <_usb_d_dev_handler+0x270>)
    7f8e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    7f90:	f413 7f80 	tst.w	r3, #256	; 0x100
    7f94:	d0fb      	beq.n	7f8e <_usb_d_dev_handler+0x12e>
    7f96:	e7f1      	b.n	7f7c <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7f98:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7f9c:	2400      	movs	r4, #0
    7f9e:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7fa2:	2208      	movs	r2, #8
    7fa4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7fa6:	2270      	movs	r2, #112	; 0x70
    7fa8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7faa:	f240 2201 	movw	r2, #513	; 0x201
    7fae:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    7fb0:	4b48      	ldr	r3, [pc, #288]	; (80d4 <_usb_d_dev_handler+0x274>)
    7fb2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    7fb4:	4b45      	ldr	r3, [pc, #276]	; (80cc <_usb_d_dev_handler+0x26c>)
    7fb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7fba:	4621      	mov	r1, r4
    7fbc:	2001      	movs	r0, #1
    7fbe:	4798      	blx	r3
    7fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    7fc4:	f011 0f10 	tst.w	r1, #16
    7fc8:	d109      	bne.n	7fde <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    7fca:	f011 0f40 	tst.w	r1, #64	; 0x40
    7fce:	d108      	bne.n	7fe2 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    7fd0:	f011 0f20 	tst.w	r1, #32
    7fd4:	d02f      	beq.n	8036 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    7fd6:	2100      	movs	r1, #0
    7fd8:	4b3f      	ldr	r3, [pc, #252]	; (80d8 <_usb_d_dev_handler+0x278>)
    7fda:	4798      	blx	r3
    7fdc:	e02b      	b.n	8036 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    7fde:	47c8      	blx	r9
    7fe0:	e029      	b.n	8036 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    7fe2:	2101      	movs	r1, #1
    7fe4:	4b3c      	ldr	r3, [pc, #240]	; (80d8 <_usb_d_dev_handler+0x278>)
    7fe6:	4798      	blx	r3
    7fe8:	e025      	b.n	8036 <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    7fea:	f011 0f40 	tst.w	r1, #64	; 0x40
    7fee:	d111      	bne.n	8014 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    7ff0:	f011 0f08 	tst.w	r1, #8
    7ff4:	d112      	bne.n	801c <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    7ff6:	f011 0f02 	tst.w	r1, #2
    7ffa:	d112      	bne.n	8022 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    7ffc:	f003 0307 	and.w	r3, r3, #7
    8000:	2b01      	cmp	r3, #1
    8002:	d118      	bne.n	8036 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8004:	f011 0f04 	tst.w	r1, #4
    8008:	d10f      	bne.n	802a <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    800a:	f011 0f10 	tst.w	r1, #16
    800e:	d012      	beq.n	8036 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8010:	47c8      	blx	r9
    8012:	e010      	b.n	8036 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8014:	2101      	movs	r1, #1
    8016:	4b30      	ldr	r3, [pc, #192]	; (80d8 <_usb_d_dev_handler+0x278>)
    8018:	4798      	blx	r3
    801a:	e00c      	b.n	8036 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    801c:	2101      	movs	r1, #1
    801e:	47c0      	blx	r8
    8020:	e009      	b.n	8036 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8022:	2101      	movs	r1, #1
    8024:	4b2d      	ldr	r3, [pc, #180]	; (80dc <_usb_d_dev_handler+0x27c>)
    8026:	4798      	blx	r3
    8028:	e005      	b.n	8036 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    802a:	2100      	movs	r1, #0
    802c:	47c0      	blx	r8
    802e:	e002      	b.n	8036 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8030:	2100      	movs	r1, #0
    8032:	4b29      	ldr	r3, [pc, #164]	; (80d8 <_usb_d_dev_handler+0x278>)
    8034:	4798      	blx	r3
    8036:	3401      	adds	r4, #1
    8038:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    803a:	2c1b      	cmp	r4, #27
    803c:	d042      	beq.n	80c4 <_usb_d_dev_handler+0x264>
    803e:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8040:	7cab      	ldrb	r3, [r5, #18]
    8042:	2bff      	cmp	r3, #255	; 0xff
    8044:	d0f7      	beq.n	8036 <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    8046:	f003 030f 	and.w	r3, r3, #15
    804a:	2101      	movs	r1, #1
    804c:	4099      	lsls	r1, r3
    804e:	4231      	tst	r1, r6
    8050:	d0f1      	beq.n	8036 <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8052:	0159      	lsls	r1, r3, #5
    8054:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8058:	f501 7180 	add.w	r1, r1, #256	; 0x100
    805c:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    805e:	015b      	lsls	r3, r3, #5
    8060:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8064:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    8068:	4019      	ands	r1, r3
    806a:	d0e4      	beq.n	8036 <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    806c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8070:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8074:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    8078:	f003 0247 	and.w	r2, r3, #71	; 0x47
    807c:	2a01      	cmp	r2, #1
    807e:	d0a1      	beq.n	7fc4 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8080:	f013 0f80 	tst.w	r3, #128	; 0x80
    8084:	d1b1      	bne.n	7fea <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8086:	f011 0f20 	tst.w	r1, #32
    808a:	d1d1      	bne.n	8030 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    808c:	f011 0f04 	tst.w	r1, #4
    8090:	d10e      	bne.n	80b0 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8092:	f011 0f01 	tst.w	r1, #1
    8096:	d10e      	bne.n	80b6 <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8098:	f003 0307 	and.w	r3, r3, #7
    809c:	2b01      	cmp	r3, #1
    809e:	d1ca      	bne.n	8036 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    80a0:	f011 0f08 	tst.w	r1, #8
    80a4:	d10b      	bne.n	80be <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    80a6:	f011 0f10 	tst.w	r1, #16
    80aa:	d0c4      	beq.n	8036 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    80ac:	47c8      	blx	r9
    80ae:	e7c2      	b.n	8036 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    80b0:	2100      	movs	r1, #0
    80b2:	47c0      	blx	r8
    80b4:	e7bf      	b.n	8036 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    80b6:	2101      	movs	r1, #1
    80b8:	4b09      	ldr	r3, [pc, #36]	; (80e0 <_usb_d_dev_handler+0x280>)
    80ba:	4798      	blx	r3
    80bc:	e7bb      	b.n	8036 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    80be:	2101      	movs	r1, #1
    80c0:	47c0      	blx	r8
    80c2:	e7b8      	b.n	8036 <_usb_d_dev_handler+0x1d6>
    80c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    80c8:	20000a90 	.word	0x20000a90
    80cc:	200009bc 	.word	0x200009bc
    80d0:	40001000 	.word	0x40001000
    80d4:	00007aa9 	.word	0x00007aa9
    80d8:	000078e1 	.word	0x000078e1
    80dc:	00007aed 	.word	0x00007aed
    80e0:	00007c71 	.word	0x00007c71
    80e4:	00007861 	.word	0x00007861
    80e8:	000079a9 	.word	0x000079a9

000080ec <_usb_d_dev_init>:
{
    80ec:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    80ee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    80f2:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    80f4:	f013 0f01 	tst.w	r3, #1
    80f8:	d124      	bne.n	8144 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    80fa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    80fe:	7893      	ldrb	r3, [r2, #2]
    8100:	f013 0f03 	tst.w	r3, #3
    8104:	d1fb      	bne.n	80fe <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8106:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    810a:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    810c:	f013 0f02 	tst.w	r3, #2
    8110:	d00f      	beq.n	8132 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8112:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8116:	7813      	ldrb	r3, [r2, #0]
    8118:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    811c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    811e:	7893      	ldrb	r3, [r2, #2]
    8120:	f013 0f03 	tst.w	r3, #3
    8124:	d1fb      	bne.n	811e <_usb_d_dev_init+0x32>
    8126:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    812a:	7893      	ldrb	r3, [r2, #2]
    812c:	f013 0f02 	tst.w	r3, #2
    8130:	d1fb      	bne.n	812a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8132:	2201      	movs	r2, #1
    8134:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8138:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    813a:	461a      	mov	r2, r3
    813c:	7893      	ldrb	r3, [r2, #2]
    813e:	f013 0f03 	tst.w	r3, #3
    8142:	d1fb      	bne.n	813c <_usb_d_dev_init+0x50>
    8144:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8148:	7893      	ldrb	r3, [r2, #2]
    814a:	f013 0f01 	tst.w	r3, #1
    814e:	d1fb      	bne.n	8148 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8150:	4b24      	ldr	r3, [pc, #144]	; (81e4 <_usb_d_dev_init+0xf8>)
    8152:	4a25      	ldr	r2, [pc, #148]	; (81e8 <_usb_d_dev_init+0xfc>)
    8154:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    8158:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    815c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8160:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    8164:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    8168:	4b20      	ldr	r3, [pc, #128]	; (81ec <_usb_d_dev_init+0x100>)
    816a:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    816c:	4b20      	ldr	r3, [pc, #128]	; (81f0 <_usb_d_dev_init+0x104>)
    816e:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    8170:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8174:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8178:	f011 011f 	ands.w	r1, r1, #31
    817c:	d02b      	beq.n	81d6 <_usb_d_dev_init+0xea>
		pad_transn = 9;
    817e:	291f      	cmp	r1, #31
    8180:	bf08      	it	eq
    8182:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8184:	b34b      	cbz	r3, 81da <_usb_d_dev_init+0xee>
		pad_transp = 25;
    8186:	2b1f      	cmp	r3, #31
    8188:	bf08      	it	eq
    818a:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    818c:	b33a      	cbz	r2, 81de <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    818e:	2a07      	cmp	r2, #7
    8190:	bf08      	it	eq
    8192:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8194:	f003 031f 	and.w	r3, r3, #31
    8198:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    819c:	0312      	lsls	r2, r2, #12
    819e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    81a2:	4313      	orrs	r3, r2
    81a4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    81a8:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    81aa:	78d3      	ldrb	r3, [r2, #3]
    81ac:	f043 0303 	orr.w	r3, r3, #3
    81b0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    81b2:	78d3      	ldrb	r3, [r2, #3]
    81b4:	f043 030c 	orr.w	r3, r3, #12
    81b8:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    81ba:	2304      	movs	r3, #4
    81bc:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    81be:	7893      	ldrb	r3, [r2, #2]
    81c0:	f013 0f03 	tst.w	r3, #3
    81c4:	d1fb      	bne.n	81be <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    81c6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    81ca:	4a06      	ldr	r2, [pc, #24]	; (81e4 <_usb_d_dev_init+0xf8>)
    81cc:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    81ce:	2201      	movs	r2, #1
    81d0:	811a      	strh	r2, [r3, #8]
}
    81d2:	2000      	movs	r0, #0
    81d4:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    81d6:	2109      	movs	r1, #9
    81d8:	e7d4      	b.n	8184 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    81da:	2319      	movs	r3, #25
    81dc:	e7d6      	b.n	818c <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    81de:	2206      	movs	r2, #6
    81e0:	e7d8      	b.n	8194 <_usb_d_dev_init+0xa8>
    81e2:	bf00      	nop
    81e4:	200009bc 	.word	0x200009bc
    81e8:	0000785d 	.word	0x0000785d
    81ec:	00007aa9 	.word	0x00007aa9
    81f0:	00800084 	.word	0x00800084

000081f4 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    81f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    81f8:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    81fa:	f013 0f03 	tst.w	r3, #3
    81fe:	d129      	bne.n	8254 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8200:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8204:	7893      	ldrb	r3, [r2, #2]
    8206:	f013 0f03 	tst.w	r3, #3
    820a:	d1fb      	bne.n	8204 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    820c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8210:	781b      	ldrb	r3, [r3, #0]
    8212:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    8214:	f013 0f02 	tst.w	r3, #2
    8218:	d108      	bne.n	822c <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    821a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    821e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8222:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8224:	7893      	ldrb	r3, [r2, #2]
    8226:	f013 0f03 	tst.w	r3, #3
    822a:	d1fb      	bne.n	8224 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    822c:	4b0b      	ldr	r3, [pc, #44]	; (825c <_usb_d_dev_enable+0x68>)
    822e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8232:	609a      	str	r2, [r3, #8]
    8234:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8238:	609a      	str	r2, [r3, #8]
    823a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    823e:	609a      	str	r2, [r3, #8]
    8240:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8244:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8246:	f240 228d 	movw	r2, #653	; 0x28d
    824a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    824e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
		return -USB_ERR_DENIED;
    8254:	f06f 0010 	mvn.w	r0, #16
}
    8258:	4770      	bx	lr
    825a:	bf00      	nop
    825c:	e000e100 	.word	0xe000e100

00008260 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8260:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8264:	8913      	ldrh	r3, [r2, #8]
    8266:	f023 0301 	bic.w	r3, r3, #1
    826a:	041b      	lsls	r3, r3, #16
    826c:	0c1b      	lsrs	r3, r3, #16
    826e:	8113      	strh	r3, [r2, #8]
    8270:	4770      	bx	lr

00008272 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    8272:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8276:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    827a:	7298      	strb	r0, [r3, #10]
    827c:	4770      	bx	lr
	...

00008280 <_usb_d_dev_ep_init>:
{
    8280:	b5f0      	push	{r4, r5, r6, r7, lr}
    8282:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8286:	f010 050f 	ands.w	r5, r0, #15
    828a:	d04d      	beq.n	8328 <_usb_d_dev_ep_init+0xa8>
    828c:	f1be 0f00 	cmp.w	lr, #0
    8290:	bfb4      	ite	lt
    8292:	1d6c      	addlt	r4, r5, #5
    8294:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8296:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    829a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    829c:	2d05      	cmp	r5, #5
    829e:	d947      	bls.n	8330 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    82a0:	f06f 0011 	mvn.w	r0, #17
    82a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    82a6:	f1be 0f00 	cmp.w	lr, #0
    82aa:	db1b      	blt.n	82e4 <_usb_d_dev_ep_init+0x64>
    82ac:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    82b0:	4e37      	ldr	r6, [pc, #220]	; (8390 <_usb_d_dev_ep_init+0x110>)
    82b2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    82b6:	2d00      	cmp	r5, #0
    82b8:	d15e      	bne.n	8378 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    82ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    82be:	4d34      	ldr	r5, [pc, #208]	; (8390 <_usb_d_dev_ep_init+0x110>)
    82c0:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    82c4:	4d33      	ldr	r5, [pc, #204]	; (8394 <_usb_d_dev_ep_init+0x114>)
    82c6:	00a6      	lsls	r6, r4, #2
    82c8:	1933      	adds	r3, r6, r4
    82ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    82ce:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    82d2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    82d6:	3101      	adds	r1, #1
    82d8:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    82dc:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    82e0:	2000      	movs	r0, #0
    82e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    82e4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    82e8:	4e29      	ldr	r6, [pc, #164]	; (8390 <_usb_d_dev_ep_init+0x110>)
    82ea:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    82ee:	686d      	ldr	r5, [r5, #4]
    82f0:	b935      	cbnz	r5, 8300 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    82f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    82f6:	4d26      	ldr	r5, [pc, #152]	; (8390 <_usb_d_dev_ep_init+0x110>)
    82f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    82fc:	685f      	ldr	r7, [r3, #4]
    82fe:	e7e1      	b.n	82c4 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8300:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8304:	4e22      	ldr	r6, [pc, #136]	; (8390 <_usb_d_dev_ep_init+0x110>)
    8306:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    830a:	896d      	ldrh	r5, [r5, #10]
    830c:	4295      	cmp	r5, r2
    830e:	daf0      	bge.n	82f2 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    8310:	f06f 0012 	mvn.w	r0, #18
    8314:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    8316:	f06f 0013 	mvn.w	r0, #19
    831a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    831c:	f06f 0013 	mvn.w	r0, #19
    8320:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    8322:	f06f 0012 	mvn.w	r0, #18
    8326:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8328:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    832c:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    832e:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    8330:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    8334:	4f17      	ldr	r7, [pc, #92]	; (8394 <_usb_d_dev_ep_init+0x114>)
    8336:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    833a:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    833e:	2eff      	cmp	r6, #255	; 0xff
    8340:	d1e9      	bne.n	8316 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    8342:	2900      	cmp	r1, #0
    8344:	d1af      	bne.n	82a6 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8346:	b125      	cbz	r5, 8352 <_usb_d_dev_ep_init+0xd2>
    8348:	f1be 0f00 	cmp.w	lr, #0
    834c:	bfa4      	itt	ge
    834e:	3505      	addge	r5, #5
    8350:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    8352:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8356:	4e0f      	ldr	r6, [pc, #60]	; (8394 <_usb_d_dev_ep_init+0x114>)
    8358:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    835c:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    8360:	2dff      	cmp	r5, #255	; 0xff
    8362:	d1db      	bne.n	831c <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    8364:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8368:	4e09      	ldr	r6, [pc, #36]	; (8390 <_usb_d_dev_ep_init+0x110>)
    836a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    836e:	2d00      	cmp	r5, #0
    8370:	d0d7      	beq.n	8322 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8372:	f1be 0f00 	cmp.w	lr, #0
    8376:	dbb5      	blt.n	82e4 <_usb_d_dev_ep_init+0x64>
    8378:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    837c:	4e04      	ldr	r6, [pc, #16]	; (8390 <_usb_d_dev_ep_init+0x110>)
    837e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8382:	892d      	ldrh	r5, [r5, #8]
    8384:	4295      	cmp	r5, r2
    8386:	da98      	bge.n	82ba <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    8388:	f06f 0012 	mvn.w	r0, #18
    838c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    838e:	bf00      	nop
    8390:	0000c1c8 	.word	0x0000c1c8
    8394:	200009bc 	.word	0x200009bc

00008398 <_usb_d_dev_ep_deinit>:
{
    8398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    839a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    839c:	f010 060f 	ands.w	r6, r0, #15
    83a0:	d00e      	beq.n	83c0 <_usb_d_dev_ep_deinit+0x28>
    83a2:	2f00      	cmp	r7, #0
    83a4:	bfb4      	ite	lt
    83a6:	1d73      	addlt	r3, r6, #5
    83a8:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    83aa:	2e05      	cmp	r6, #5
    83ac:	d900      	bls.n	83b0 <_usb_d_dev_ep_deinit+0x18>
    83ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    83b0:	461d      	mov	r5, r3
    83b2:	3301      	adds	r3, #1
    83b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    83b8:	4a24      	ldr	r2, [pc, #144]	; (844c <_usb_d_dev_ep_deinit+0xb4>)
    83ba:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    83be:	e002      	b.n	83c6 <_usb_d_dev_ep_deinit+0x2e>
    83c0:	f8df e094 	ldr.w	lr, [pc, #148]	; 8458 <_usb_d_dev_ep_deinit+0xc0>
    83c4:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    83c6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    83ca:	4a21      	ldr	r2, [pc, #132]	; (8450 <_usb_d_dev_ep_deinit+0xb8>)
    83cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83d0:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    83d4:	2aff      	cmp	r2, #255	; 0xff
    83d6:	d0ea      	beq.n	83ae <_usb_d_dev_ep_deinit+0x16>
    83d8:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    83da:	2203      	movs	r2, #3
    83dc:	0ff9      	lsrs	r1, r7, #31
    83de:	4670      	mov	r0, lr
    83e0:	4b1c      	ldr	r3, [pc, #112]	; (8454 <_usb_d_dev_ep_deinit+0xbc>)
    83e2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    83e4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    83e8:	4a19      	ldr	r2, [pc, #100]	; (8450 <_usb_d_dev_ep_deinit+0xb8>)
    83ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83ee:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    83f2:	f003 0307 	and.w	r3, r3, #7
    83f6:	2b01      	cmp	r3, #1
    83f8:	d016      	beq.n	8428 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    83fa:	2f00      	cmp	r7, #0
    83fc:	db1b      	blt.n	8436 <_usb_d_dev_ep_deinit+0x9e>
    83fe:	0160      	lsls	r0, r4, #5
    8400:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    8404:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    8408:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    840c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    8410:	4b0f      	ldr	r3, [pc, #60]	; (8450 <_usb_d_dev_ep_deinit+0xb8>)
    8412:	00aa      	lsls	r2, r5, #2
    8414:	1951      	adds	r1, r2, r5
    8416:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    841a:	2000      	movs	r0, #0
    841c:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    8420:	22ff      	movs	r2, #255	; 0xff
    8422:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    8426:	e7c2      	b.n	83ae <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    8428:	0160      	lsls	r0, r4, #5
    842a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    842e:	2300      	movs	r3, #0
    8430:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    8434:	e7ec      	b.n	8410 <_usb_d_dev_ep_deinit+0x78>
    8436:	0176      	lsls	r6, r6, #5
    8438:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    843c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8440:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    8444:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    8448:	e7e2      	b.n	8410 <_usb_d_dev_ep_deinit+0x78>
    844a:	bf00      	nop
    844c:	20000a7c 	.word	0x20000a7c
    8450:	200009bc 	.word	0x200009bc
    8454:	0000793d 	.word	0x0000793d
    8458:	20000a90 	.word	0x20000a90

0000845c <_usb_d_dev_ep_enable>:
{
    845c:	b4f0      	push	{r4, r5, r6, r7}
    845e:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8460:	f010 000f 	ands.w	r0, r0, #15
    8464:	f000 80a7 	beq.w	85b6 <_usb_d_dev_ep_enable+0x15a>
    8468:	2e00      	cmp	r6, #0
    846a:	bfb4      	ite	lt
    846c:	1d43      	addlt	r3, r0, #5
    846e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8470:	4605      	mov	r5, r0
    8472:	0142      	lsls	r2, r0, #5
    8474:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8478:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    847c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    847e:	2805      	cmp	r0, #5
    8480:	f240 80a0 	bls.w	85c4 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    8484:	f06f 0011 	mvn.w	r0, #17
    8488:	e07d      	b.n	8586 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    848a:	f014 0f77 	tst.w	r4, #119	; 0x77
    848e:	f040 8089 	bne.w	85a4 <_usb_d_dev_ep_enable+0x148>
    8492:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8496:	2111      	movs	r1, #17
    8498:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    849c:	4c9b      	ldr	r4, [pc, #620]	; (870c <_usb_d_dev_ep_enable+0x2b0>)
    849e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    84a2:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    84a6:	4c9a      	ldr	r4, [pc, #616]	; (8710 <_usb_d_dev_ep_enable+0x2b4>)
    84a8:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    84ac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    84b0:	f200 80cd 	bhi.w	864e <_usb_d_dev_ep_enable+0x1f2>
    84b4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    84b8:	f200 8112 	bhi.w	86e0 <_usb_d_dev_ep_enable+0x284>
    84bc:	2980      	cmp	r1, #128	; 0x80
    84be:	f200 8101 	bhi.w	86c4 <_usb_d_dev_ep_enable+0x268>
    84c2:	2940      	cmp	r1, #64	; 0x40
    84c4:	f200 8113 	bhi.w	86ee <_usb_d_dev_ep_enable+0x292>
    84c8:	2920      	cmp	r1, #32
    84ca:	f200 8102 	bhi.w	86d2 <_usb_d_dev_ep_enable+0x276>
    84ce:	2910      	cmp	r1, #16
    84d0:	f200 8114 	bhi.w	86fc <_usb_d_dev_ep_enable+0x2a0>
    84d4:	2908      	cmp	r1, #8
    84d6:	bf94      	ite	ls
    84d8:	2600      	movls	r6, #0
    84da:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    84dc:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    84e0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    84e2:	f3c1 010d 	ubfx	r1, r1, #0, #14
    84e6:	e0b8      	b.n	865a <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    84e8:	f014 0f70 	tst.w	r4, #112	; 0x70
    84ec:	d15d      	bne.n	85aa <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    84ee:	4e87      	ldr	r6, [pc, #540]	; (870c <_usb_d_dev_ep_enable+0x2b0>)
    84f0:	009f      	lsls	r7, r3, #2
    84f2:	18f9      	adds	r1, r7, r3
    84f4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    84f8:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    84fc:	0109      	lsls	r1, r1, #4
    84fe:	f001 0170 	and.w	r1, r1, #112	; 0x70
    8502:	430c      	orrs	r4, r1
    8504:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8508:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    850c:	443b      	add	r3, r7
    850e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8512:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    8516:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    851a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    851e:	d80f      	bhi.n	8540 <_usb_d_dev_ep_enable+0xe4>
    8520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8524:	d819      	bhi.n	855a <_usb_d_dev_ep_enable+0xfe>
    8526:	2b80      	cmp	r3, #128	; 0x80
    8528:	d819      	bhi.n	855e <_usb_d_dev_ep_enable+0x102>
    852a:	2b40      	cmp	r3, #64	; 0x40
    852c:	d819      	bhi.n	8562 <_usb_d_dev_ep_enable+0x106>
    852e:	2b20      	cmp	r3, #32
    8530:	d819      	bhi.n	8566 <_usb_d_dev_ep_enable+0x10a>
    8532:	2b10      	cmp	r3, #16
    8534:	d819      	bhi.n	856a <_usb_d_dev_ep_enable+0x10e>
    8536:	2b08      	cmp	r3, #8
    8538:	bf94      	ite	ls
    853a:	2300      	movls	r3, #0
    853c:	2301      	movhi	r3, #1
    853e:	e000      	b.n	8542 <_usb_d_dev_ep_enable+0xe6>
    8540:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8542:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    8546:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8548:	2380      	movs	r3, #128	; 0x80
    854a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    854e:	4b6f      	ldr	r3, [pc, #444]	; (870c <_usb_d_dev_ep_enable+0x2b0>)
    8550:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8554:	2000      	movs	r0, #0
    8556:	76a8      	strb	r0, [r5, #26]
    8558:	e015      	b.n	8586 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    855a:	2306      	movs	r3, #6
    855c:	e7f1      	b.n	8542 <_usb_d_dev_ep_enable+0xe6>
    855e:	2305      	movs	r3, #5
    8560:	e7ef      	b.n	8542 <_usb_d_dev_ep_enable+0xe6>
    8562:	2304      	movs	r3, #4
    8564:	e7ed      	b.n	8542 <_usb_d_dev_ep_enable+0xe6>
    8566:	2303      	movs	r3, #3
    8568:	e7eb      	b.n	8542 <_usb_d_dev_ep_enable+0xe6>
    856a:	2302      	movs	r3, #2
    856c:	e7e9      	b.n	8542 <_usb_d_dev_ep_enable+0xe6>
    856e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8570:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8574:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8576:	2340      	movs	r3, #64	; 0x40
    8578:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    857c:	4b63      	ldr	r3, [pc, #396]	; (870c <_usb_d_dev_ep_enable+0x2b0>)
    857e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8582:	2000      	movs	r0, #0
    8584:	72a8      	strb	r0, [r5, #10]
}
    8586:	bcf0      	pop	{r4, r5, r6, r7}
    8588:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    858a:	2106      	movs	r1, #6
    858c:	e7f0      	b.n	8570 <_usb_d_dev_ep_enable+0x114>
    858e:	2105      	movs	r1, #5
    8590:	e7ee      	b.n	8570 <_usb_d_dev_ep_enable+0x114>
    8592:	2104      	movs	r1, #4
    8594:	e7ec      	b.n	8570 <_usb_d_dev_ep_enable+0x114>
    8596:	2103      	movs	r1, #3
    8598:	e7ea      	b.n	8570 <_usb_d_dev_ep_enable+0x114>
    859a:	2102      	movs	r1, #2
    859c:	e7e8      	b.n	8570 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    859e:	f06f 0011 	mvn.w	r0, #17
    85a2:	e7f0      	b.n	8586 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    85a4:	f06f 0013 	mvn.w	r0, #19
    85a8:	e7ed      	b.n	8586 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    85aa:	f06f 0013 	mvn.w	r0, #19
    85ae:	e7ea      	b.n	8586 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    85b0:	f06f 0013 	mvn.w	r0, #19
    85b4:	e7e7      	b.n	8586 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    85b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    85ba:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    85be:	b2e4      	uxtb	r4, r4
    85c0:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    85c2:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    85c4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    85c8:	4950      	ldr	r1, [pc, #320]	; (870c <_usb_d_dev_ep_enable+0x2b0>)
    85ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    85ce:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    85d2:	2aff      	cmp	r2, #255	; 0xff
    85d4:	d0e3      	beq.n	859e <_usb_d_dev_ep_enable+0x142>
    85d6:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    85d8:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    85da:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    85de:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    85e2:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    85e6:	f001 0107 	and.w	r1, r1, #7
    85ea:	2901      	cmp	r1, #1
    85ec:	f43f af4d 	beq.w	848a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    85f0:	2e00      	cmp	r6, #0
    85f2:	f6ff af79 	blt.w	84e8 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    85f6:	f014 0f07 	tst.w	r4, #7
    85fa:	d1d9      	bne.n	85b0 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    85fc:	4e43      	ldr	r6, [pc, #268]	; (870c <_usb_d_dev_ep_enable+0x2b0>)
    85fe:	009f      	lsls	r7, r3, #2
    8600:	18f9      	adds	r1, r7, r3
    8602:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8606:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    860a:	f001 0107 	and.w	r1, r1, #7
    860e:	430c      	orrs	r4, r1
    8610:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8614:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8618:	443b      	add	r3, r7
    861a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    861e:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    8622:	4b3b      	ldr	r3, [pc, #236]	; (8710 <_usb_d_dev_ep_enable+0x2b4>)
    8624:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8628:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    862c:	d89f      	bhi.n	856e <_usb_d_dev_ep_enable+0x112>
    862e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8632:	d8aa      	bhi.n	858a <_usb_d_dev_ep_enable+0x12e>
    8634:	2980      	cmp	r1, #128	; 0x80
    8636:	d8aa      	bhi.n	858e <_usb_d_dev_ep_enable+0x132>
    8638:	2940      	cmp	r1, #64	; 0x40
    863a:	d8aa      	bhi.n	8592 <_usb_d_dev_ep_enable+0x136>
    863c:	2920      	cmp	r1, #32
    863e:	d8aa      	bhi.n	8596 <_usb_d_dev_ep_enable+0x13a>
    8640:	2910      	cmp	r1, #16
    8642:	d8aa      	bhi.n	859a <_usb_d_dev_ep_enable+0x13e>
    8644:	2908      	cmp	r1, #8
    8646:	bf94      	ite	ls
    8648:	2100      	movls	r1, #0
    864a:	2101      	movhi	r1, #1
    864c:	e790      	b.n	8570 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    864e:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8652:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8654:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8658:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    865a:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    865e:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8660:	2640      	movs	r6, #64	; 0x40
    8662:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8666:	2180      	movs	r1, #128	; 0x80
    8668:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    866c:	4f27      	ldr	r7, [pc, #156]	; (870c <_usb_d_dev_ep_enable+0x2b0>)
    866e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    8672:	2000      	movs	r0, #0
    8674:	72a8      	strb	r0, [r5, #10]
    8676:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8678:	009c      	lsls	r4, r3, #2
    867a:	18e1      	adds	r1, r4, r3
    867c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    8680:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    8684:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8688:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    868c:	0152      	lsls	r2, r2, #5
    868e:	18b9      	adds	r1, r7, r2
    8690:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8692:	4423      	add	r3, r4
    8694:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8698:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    869c:	684b      	ldr	r3, [r1, #4]
    869e:	f364 339b 	bfi	r3, r4, #14, #14
    86a2:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    86a4:	684b      	ldr	r3, [r1, #4]
    86a6:	f360 030d 	bfi	r3, r0, #0, #14
    86aa:	604b      	str	r3, [r1, #4]
    86ac:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    86b0:	21b0      	movs	r1, #176	; 0xb0
    86b2:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    86b6:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    86ba:	461a      	mov	r2, r3
    86bc:	2310      	movs	r3, #16
    86be:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    86c2:	e760      	b.n	8586 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86c4:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    86c8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86ca:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    86ce:	2605      	movs	r6, #5
    86d0:	e7c3      	b.n	865a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86d2:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    86d6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86d8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    86dc:	2603      	movs	r6, #3
    86de:	e7bc      	b.n	865a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86e0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    86e4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86e6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    86ea:	2606      	movs	r6, #6
    86ec:	e7b5      	b.n	865a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86ee:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    86f2:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86f4:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    86f8:	2604      	movs	r6, #4
    86fa:	e7ae      	b.n	865a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    86fc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8700:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8702:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8706:	2602      	movs	r6, #2
    8708:	e7a7      	b.n	865a <_usb_d_dev_ep_enable+0x1fe>
    870a:	bf00      	nop
    870c:	200009bc 	.word	0x200009bc
    8710:	0fffc000 	.word	0x0fffc000

00008714 <_usb_d_dev_ep_stall>:
{
    8714:	b470      	push	{r4, r5, r6}
    8716:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    8718:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    871a:	f010 000f 	ands.w	r0, r0, #15
    871e:	d008      	beq.n	8732 <_usb_d_dev_ep_stall+0x1e>
    8720:	2b00      	cmp	r3, #0
    8722:	bfb4      	ite	lt
    8724:	1d43      	addlt	r3, r0, #5
    8726:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    8728:	2805      	cmp	r0, #5
    872a:	d903      	bls.n	8734 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    872c:	f06f 0011 	mvn.w	r0, #17
    8730:	e018      	b.n	8764 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    8732:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    8734:	2901      	cmp	r1, #1
    8736:	d017      	beq.n	8768 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    8738:	2900      	cmp	r1, #0
    873a:	d03a      	beq.n	87b2 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    873c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8740:	4a45      	ldr	r2, [pc, #276]	; (8858 <_usb_d_dev_ep_stall+0x144>)
    8742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8746:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    874a:	f003 030f 	and.w	r3, r3, #15
    874e:	015b      	lsls	r3, r3, #5
    8750:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8754:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8758:	2310      	movs	r3, #16
    875a:	40a3      	lsls	r3, r4
    875c:	421a      	tst	r2, r3
    875e:	bf14      	ite	ne
    8760:	2001      	movne	r0, #1
    8762:	2000      	moveq	r0, #0
}
    8764:	bc70      	pop	{r4, r5, r6}
    8766:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8768:	2510      	movs	r5, #16
    876a:	40a5      	lsls	r5, r4
    876c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    876e:	493a      	ldr	r1, [pc, #232]	; (8858 <_usb_d_dev_ep_stall+0x144>)
    8770:	009e      	lsls	r6, r3, #2
    8772:	18f2      	adds	r2, r6, r3
    8774:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8778:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    877c:	f002 020f 	and.w	r2, r2, #15
    8780:	0150      	lsls	r0, r2, #5
    8782:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8786:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    878a:	2020      	movs	r0, #32
    878c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8790:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8792:	0152      	lsls	r2, r2, #5
    8794:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8798:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    879c:	4433      	add	r3, r6
    879e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    87a2:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    87a6:	f042 0208 	orr.w	r2, r2, #8
    87aa:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    87ae:	2000      	movs	r0, #0
    87b0:	e7d8      	b.n	8764 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    87b2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    87b6:	4928      	ldr	r1, [pc, #160]	; (8858 <_usb_d_dev_ep_stall+0x144>)
    87b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    87bc:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    87c0:	f002 020f 	and.w	r2, r2, #15
    87c4:	0151      	lsls	r1, r2, #5
    87c6:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    87ca:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    87ce:	2010      	movs	r0, #16
    87d0:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    87d2:	4205      	tst	r5, r0
    87d4:	d03c      	beq.n	8850 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    87d6:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    87d8:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    87dc:	2020      	movs	r0, #32
    87de:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    87e0:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    87e2:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    87e6:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    87ea:	4202      	tst	r2, r0
    87ec:	d007      	beq.n	87fe <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    87ee:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    87f2:	2201      	movs	r2, #1
    87f4:	fa02 f404 	lsl.w	r4, r2, r4
    87f8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    87fa:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    87fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8802:	4815      	ldr	r0, [pc, #84]	; (8858 <_usb_d_dev_ep_stall+0x144>)
    8804:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8808:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    880c:	f002 0207 	and.w	r2, r2, #7
    8810:	2a01      	cmp	r2, #1
    8812:	d00c      	beq.n	882e <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    8814:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8818:	4a0f      	ldr	r2, [pc, #60]	; (8858 <_usb_d_dev_ep_stall+0x144>)
    881a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    881e:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8822:	f36f 02c3 	bfc	r2, #3, #1
    8826:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    882a:	2000      	movs	r0, #0
    882c:	e79a      	b.n	8764 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    882e:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    8832:	f012 0f30 	tst.w	r2, #48	; 0x30
    8836:	d10d      	bne.n	8854 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    8838:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    883c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    8840:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8844:	f36f 02c3 	bfc	r2, #3, #1
    8848:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    884c:	2000      	movs	r0, #0
    884e:	e789      	b.n	8764 <_usb_d_dev_ep_stall+0x50>
    8850:	2000      	movs	r0, #0
    8852:	e787      	b.n	8764 <_usb_d_dev_ep_stall+0x50>
    8854:	2000      	movs	r0, #0
    8856:	e785      	b.n	8764 <_usb_d_dev_ep_stall+0x50>
    8858:	200009bc 	.word	0x200009bc

0000885c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    885c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    885e:	f000 040f 	and.w	r4, r0, #15
    8862:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    8864:	4a14      	ldr	r2, [pc, #80]	; (88b8 <_usb_d_dev_ep_read_req+0x5c>)
    8866:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    8868:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    886a:	6840      	ldr	r0, [r0, #4]
    886c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    8870:	2c05      	cmp	r4, #5
    8872:	d817      	bhi.n	88a4 <_usb_d_dev_ep_read_req+0x48>
    8874:	b1c9      	cbz	r1, 88aa <_usb_d_dev_ep_read_req+0x4e>
    8876:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    887a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    887e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    8880:	2a11      	cmp	r2, #17
    8882:	d115      	bne.n	88b0 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8884:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    8888:	f012 0f10 	tst.w	r2, #16
    888c:	d102      	bne.n	8894 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    888e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    8890:	bc30      	pop	{r4, r5}
    8892:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    8894:	682c      	ldr	r4, [r5, #0]
    8896:	686a      	ldr	r2, [r5, #4]
    8898:	600c      	str	r4, [r1, #0]
    889a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    889c:	2210      	movs	r2, #16
    889e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    88a2:	e7f5      	b.n	8890 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    88a4:	f06f 0011 	mvn.w	r0, #17
    88a8:	e7f2      	b.n	8890 <_usb_d_dev_ep_read_req+0x34>
    88aa:	f06f 0011 	mvn.w	r0, #17
    88ae:	e7ef      	b.n	8890 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    88b0:	f06f 0012 	mvn.w	r0, #18
    88b4:	e7ec      	b.n	8890 <_usb_d_dev_ep_read_req+0x34>
    88b6:	bf00      	nop
    88b8:	200009bc 	.word	0x200009bc

000088bc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    88bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88c0:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    88c2:	7a03      	ldrb	r3, [r0, #8]
    88c4:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    88c6:	f013 030f 	ands.w	r3, r3, #15
    88ca:	f000 80c2 	beq.w	8a52 <_usb_d_dev_ep_trans+0x196>
    88ce:	2e00      	cmp	r6, #0
    88d0:	bfb4      	ite	lt
    88d2:	1d5a      	addlt	r2, r3, #5
    88d4:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    88d6:	4614      	mov	r4, r2
    88d8:	4969      	ldr	r1, [pc, #420]	; (8a80 <_usb_d_dev_ep_trans+0x1c4>)
    88da:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    88de:	1c55      	adds	r5, r2, #1
    88e0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    88e4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    88e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    88ec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    88f0:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    88f4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    88f8:	428a      	cmp	r2, r1
    88fa:	d025      	beq.n	8948 <_usb_d_dev_ep_trans+0x8c>
    88fc:	1e55      	subs	r5, r2, #1
    88fe:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    8900:	6841      	ldr	r1, [r0, #4]
    8902:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    8904:	2b05      	cmp	r3, #5
    8906:	f200 8092 	bhi.w	8a2e <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    890a:	6803      	ldr	r3, [r0, #0]
    890c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    8910:	d31c      	bcc.n	894c <_usb_d_dev_ep_trans+0x90>
    8912:	eb03 0c01 	add.w	ip, r3, r1
    8916:	f8df e180 	ldr.w	lr, [pc, #384]	; 8a98 <_usb_d_dev_ep_trans+0x1dc>
    891a:	45f4      	cmp	ip, lr
    891c:	d816      	bhi.n	894c <_usb_d_dev_ep_trans+0x90>
    891e:	f013 0f03 	tst.w	r3, #3
    8922:	d113      	bne.n	894c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    8924:	2e00      	cmp	r6, #0
    8926:	db2a      	blt.n	897e <_usb_d_dev_ep_trans+0xc2>
    8928:	428a      	cmp	r2, r1
    892a:	f200 809c 	bhi.w	8a66 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    892e:	b34d      	cbz	r5, 8984 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    8930:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8934:	4a52      	ldr	r2, [pc, #328]	; (8a80 <_usb_d_dev_ep_trans+0x1c4>)
    8936:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    893a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    893e:	2b00      	cmp	r3, #0
    8940:	d07b      	beq.n	8a3a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    8942:	f04f 0800 	mov.w	r8, #0
    8946:	e00c      	b.n	8962 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8948:	4615      	mov	r5, r2
    894a:	e7d9      	b.n	8900 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    894c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8950:	4a4b      	ldr	r2, [pc, #300]	; (8a80 <_usb_d_dev_ep_trans+0x1c4>)
    8952:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    895a:	2b00      	cmp	r3, #0
    895c:	d06a      	beq.n	8a34 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    895e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    8962:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8966:	4a46      	ldr	r2, [pc, #280]	; (8a80 <_usb_d_dev_ep_trans+0x1c4>)
    8968:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    896c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8970:	f013 0f08 	tst.w	r3, #8
    8974:	d009      	beq.n	898a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    8976:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    8978:	b003      	add	sp, #12
    897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    897e:	f04f 0800 	mov.w	r8, #0
    8982:	e7ee      	b.n	8962 <_usb_d_dev_ep_trans+0xa6>
    8984:	f04f 0800 	mov.w	r8, #0
    8988:	e7eb      	b.n	8962 <_usb_d_dev_ep_trans+0xa6>
    898a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    898c:	a801      	add	r0, sp, #4
    898e:	4b3d      	ldr	r3, [pc, #244]	; (8a84 <_usb_d_dev_ep_trans+0x1c8>)
    8990:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    8992:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8996:	4a3a      	ldr	r2, [pc, #232]	; (8a80 <_usb_d_dev_ep_trans+0x1c4>)
    8998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    899c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    89a0:	f013 0f40 	tst.w	r3, #64	; 0x40
    89a4:	d13c      	bne.n	8a20 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    89a6:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    89aa:	4b35      	ldr	r3, [pc, #212]	; (8a80 <_usb_d_dev_ep_trans+0x1c4>)
    89ac:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    89b0:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    89b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    89b8:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    89bc:	a801      	add	r0, sp, #4
    89be:	4b32      	ldr	r3, [pc, #200]	; (8a88 <_usb_d_dev_ep_trans+0x1cc>)
    89c0:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    89c2:	f8da 3000 	ldr.w	r3, [sl]
    89c6:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    89ca:	f8da 3004 	ldr.w	r3, [sl, #4]
    89ce:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    89d2:	2300      	movs	r3, #0
    89d4:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    89d8:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    89da:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    89de:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    89e2:	f368 1345 	bfi	r3, r8, #5, #1
    89e6:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    89ea:	f89a 3009 	ldrb.w	r3, [sl, #9]
    89ee:	b1e3      	cbz	r3, 8a2a <_usb_d_dev_ep_trans+0x16e>
    89f0:	fab5 f585 	clz	r5, r5
    89f4:	096d      	lsrs	r5, r5, #5
    89f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    89fa:	4b21      	ldr	r3, [pc, #132]	; (8a80 <_usb_d_dev_ep_trans+0x1c4>)
    89fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    8a00:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    8a04:	f365 1304 	bfi	r3, r5, #4, #1
    8a08:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    8a0c:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    8a0e:	f04f 0100 	mov.w	r1, #0
    8a12:	4638      	mov	r0, r7
    8a14:	bfb4      	ite	lt
    8a16:	4b1d      	ldrlt	r3, [pc, #116]	; (8a8c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    8a18:	4b1d      	ldrge	r3, [pc, #116]	; (8a90 <_usb_d_dev_ep_trans+0x1d4>)
    8a1a:	4798      	blx	r3
	return ERR_NONE;
    8a1c:	2000      	movs	r0, #0
    8a1e:	e7ab      	b.n	8978 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    8a20:	a801      	add	r0, sp, #4
    8a22:	4b19      	ldr	r3, [pc, #100]	; (8a88 <_usb_d_dev_ep_trans+0x1cc>)
    8a24:	4798      	blx	r3
		return USB_BUSY;
    8a26:	2001      	movs	r0, #1
    8a28:	e7a6      	b.n	8978 <_usb_d_dev_ep_trans+0xbc>
    8a2a:	2500      	movs	r5, #0
    8a2c:	e7e3      	b.n	89f6 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    8a2e:	f06f 0011 	mvn.w	r0, #17
    8a32:	e7a1      	b.n	8978 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    8a34:	f06f 0012 	mvn.w	r0, #18
    8a38:	e79e      	b.n	8978 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    8a3a:	f06f 0011 	mvn.w	r0, #17
    8a3e:	e79b      	b.n	8978 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    8a40:	f06f 0012 	mvn.w	r0, #18
    8a44:	e798      	b.n	8978 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    8a46:	6841      	ldr	r1, [r0, #4]
    8a48:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    8a4c:	4f11      	ldr	r7, [pc, #68]	; (8a94 <_usb_d_dev_ep_trans+0x1d8>)
    8a4e:	2400      	movs	r4, #0
    8a50:	e75b      	b.n	890a <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8a52:	4a0b      	ldr	r2, [pc, #44]	; (8a80 <_usb_d_dev_ep_trans+0x1c4>)
    8a54:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    8a58:	f240 31ff 	movw	r1, #1023	; 0x3ff
    8a5c:	428a      	cmp	r2, r1
    8a5e:	d0f2      	beq.n	8a46 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    8a60:	4f0c      	ldr	r7, [pc, #48]	; (8a94 <_usb_d_dev_ep_trans+0x1d8>)
    8a62:	2400      	movs	r4, #0
    8a64:	e74a      	b.n	88fc <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    8a66:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8a6a:	4a05      	ldr	r2, [pc, #20]	; (8a80 <_usb_d_dev_ep_trans+0x1c4>)
    8a6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8a74:	2b00      	cmp	r3, #0
    8a76:	d0e3      	beq.n	8a40 <_usb_d_dev_ep_trans+0x184>
    8a78:	f04f 0801 	mov.w	r8, #1
    8a7c:	e771      	b.n	8962 <_usb_d_dev_ep_trans+0xa6>
    8a7e:	bf00      	nop
    8a80:	200009bc 	.word	0x200009bc
    8a84:	000040c9 	.word	0x000040c9
    8a88:	000040d7 	.word	0x000040d7
    8a8c:	00007aed 	.word	0x00007aed
    8a90:	00007c71 	.word	0x00007c71
    8a94:	20000a90 	.word	0x20000a90
    8a98:	20041fff 	.word	0x20041fff

00008a9c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    8a9c:	4b07      	ldr	r3, [pc, #28]	; (8abc <_usb_d_dev_register_callback+0x20>)
    8a9e:	2900      	cmp	r1, #0
    8aa0:	bf08      	it	eq
    8aa2:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    8aa4:	2801      	cmp	r0, #1
    8aa6:	d004      	beq.n	8ab2 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    8aa8:	b910      	cbnz	r0, 8ab0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    8aaa:	4b05      	ldr	r3, [pc, #20]	; (8ac0 <_usb_d_dev_register_callback+0x24>)
    8aac:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    8ab0:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    8ab2:	4b03      	ldr	r3, [pc, #12]	; (8ac0 <_usb_d_dev_register_callback+0x24>)
    8ab4:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    8ab8:	4770      	bx	lr
    8aba:	bf00      	nop
    8abc:	0000785d 	.word	0x0000785d
    8ac0:	200009bc 	.word	0x200009bc

00008ac4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    8ac4:	4b0a      	ldr	r3, [pc, #40]	; (8af0 <_usb_d_dev_register_ep_callback+0x2c>)
    8ac6:	2900      	cmp	r1, #0
    8ac8:	bf08      	it	eq
    8aca:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    8acc:	4603      	mov	r3, r0
    8ace:	b138      	cbz	r0, 8ae0 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    8ad0:	2801      	cmp	r0, #1
    8ad2:	d009      	beq.n	8ae8 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    8ad4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    8ad6:	bf04      	itt	eq
    8ad8:	4b06      	ldreq	r3, [pc, #24]	; (8af4 <_usb_d_dev_register_ep_callback+0x30>)
    8ada:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    8ade:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    8ae0:	4b04      	ldr	r3, [pc, #16]	; (8af4 <_usb_d_dev_register_ep_callback+0x30>)
    8ae2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    8ae6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    8ae8:	4b02      	ldr	r3, [pc, #8]	; (8af4 <_usb_d_dev_register_ep_callback+0x30>)
    8aea:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    8aee:	4770      	bx	lr
    8af0:	0000785d 	.word	0x0000785d
    8af4:	200009bc 	.word	0x200009bc

00008af8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    8af8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8afa:	4b01      	ldr	r3, [pc, #4]	; (8b00 <USB_0_Handler+0x8>)
    8afc:	4798      	blx	r3
    8afe:	bd08      	pop	{r3, pc}
    8b00:	00007e61 	.word	0x00007e61

00008b04 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    8b04:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8b06:	4b01      	ldr	r3, [pc, #4]	; (8b0c <USB_1_Handler+0x8>)
    8b08:	4798      	blx	r3
    8b0a:	bd08      	pop	{r3, pc}
    8b0c:	00007e61 	.word	0x00007e61

00008b10 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    8b10:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8b12:	4b01      	ldr	r3, [pc, #4]	; (8b18 <USB_2_Handler+0x8>)
    8b14:	4798      	blx	r3
    8b16:	bd08      	pop	{r3, pc}
    8b18:	00007e61 	.word	0x00007e61

00008b1c <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    8b1c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    8b1e:	4b01      	ldr	r3, [pc, #4]	; (8b24 <USB_3_Handler+0x8>)
    8b20:	4798      	blx	r3
    8b22:	bd08      	pop	{r3, pc}
    8b24:	00007e61 	.word	0x00007e61

00008b28 <RTC_Scheduler_realtime_cb>:
}

static void RTC_Scheduler_realtime_cb(const struct timer_task *const timer_task)
{
	//gpio_set_pin_level(PIN_GRID_SYNC_1, true);	
	realtime++;
    8b28:	4a02      	ldr	r2, [pc, #8]	; (8b34 <RTC_Scheduler_realtime_cb+0xc>)
    8b2a:	6813      	ldr	r3, [r2, #0]
    8b2c:	3301      	adds	r3, #1
    8b2e:	6013      	str	r3, [r2, #0]
    8b30:	4770      	bx	lr
    8b32:	bf00      	nop
    8b34:	20000d7c 	.word	0x20000d7c

00008b38 <RTC_Scheduler_ping_cb>:
	
}

static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag++;
    8b38:	4a04      	ldr	r2, [pc, #16]	; (8b4c <RTC_Scheduler_ping_cb+0x14>)
    8b3a:	7913      	ldrb	r3, [r2, #4]
    8b3c:	3301      	adds	r3, #1
    8b3e:	b2db      	uxtb	r3, r3
    8b40:	7113      	strb	r3, [r2, #4]
	pingflag_active++;
    8b42:	7953      	ldrb	r3, [r2, #5]
    8b44:	3301      	adds	r3, #1
    8b46:	b2db      	uxtb	r3, r3
    8b48:	7153      	strb	r3, [r2, #5]
    8b4a:	4770      	bx	lr
    8b4c:	20000d7c 	.word	0x20000d7c

00008b50 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status == 1){
    8b50:	8ac3      	ldrh	r3, [r0, #22]
    8b52:	2b01      	cmp	r3, #1
    8b54:	d048      	beq.n	8be8 <grid_port_receive_task+0x98>
void grid_port_receive_task(struct grid_port* por){
    8b56:	b530      	push	{r4, r5, lr}
    8b58:	b083      	sub	sp, #12
    8b5a:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 20000){
    8b5c:	8a83      	ldrh	r3, [r0, #20]
    8b5e:	f644 6220 	movw	r2, #20000	; 0x4e20
    8b62:	4293      	cmp	r3, r2
    8b64:	d91c      	bls.n	8ba0 <grid_port_receive_task+0x50>
		if (por->partner_status == 1){
    8b66:	f890 31e3 	ldrb.w	r3, [r0, #483]	; 0x1e3
    8b6a:	2b01      	cmp	r3, #1
    8b6c:	d005      	beq.n	8b7a <grid_port_receive_task+0x2a>
			por->rx_double_buffer_seek_start_index = 0;
    8b6e:	2300      	movs	r3, #0
    8b70:	8303      	strh	r3, [r0, #24]
			por->rx_double_buffer_read_start_index = 0;
    8b72:	8343      	strh	r3, [r0, #26]
			grid_sys_port_reset_dma(por);
    8b74:	4b1d      	ldr	r3, [pc, #116]	; (8bec <grid_port_receive_task+0x9c>)
    8b76:	4798      	blx	r3
    8b78:	e014      	b.n	8ba4 <grid_port_receive_task+0x54>
			por->rx_double_buffer_seek_start_index = 0;
    8b7a:	2300      	movs	r3, #0
    8b7c:	8303      	strh	r3, [r0, #24]
			por->rx_double_buffer_read_start_index = 0;
    8b7e:	8343      	strh	r3, [r0, #26]
			por->partner_status = 0;
    8b80:	f880 31e3 	strb.w	r3, [r0, #483]	; 0x1e3
			por->rx_double_buffer_timeout =0;
    8b84:	8283      	strh	r3, [r0, #20]
			grid_sys_port_reset_dma(por);
    8b86:	4b19      	ldr	r3, [pc, #100]	; (8bec <grid_port_receive_task+0x9c>)
    8b88:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    8b8a:	23c8      	movs	r3, #200	; 0xc8
    8b8c:	9301      	str	r3, [sp, #4]
    8b8e:	2302      	movs	r3, #2
    8b90:	9300      	str	r3, [sp, #0]
    8b92:	23ff      	movs	r3, #255	; 0xff
    8b94:	461a      	mov	r2, r3
    8b96:	4619      	mov	r1, r3
    8b98:	4815      	ldr	r0, [pc, #84]	; (8bf0 <grid_port_receive_task+0xa0>)
    8b9a:	4d16      	ldr	r5, [pc, #88]	; (8bf4 <grid_port_receive_task+0xa4>)
    8b9c:	47a8      	blx	r5
    8b9e:	e001      	b.n	8ba4 <grid_port_receive_task+0x54>
		por->rx_double_buffer_timeout++;
    8ba0:	3301      	adds	r3, #1
    8ba2:	8283      	strh	r3, [r0, #20]
void grid_port_receive_task(struct grid_port* por){
    8ba4:	210a      	movs	r1, #10
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    8ba6:	4d14      	ldr	r5, [pc, #80]	; (8bf8 <grid_port_receive_task+0xa8>)
    8ba8:	20c8      	movs	r0, #200	; 0xc8
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != '\n' && por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != 0)
    8baa:	8b23      	ldrh	r3, [r4, #24]
    8bac:	18e2      	adds	r2, r4, r3
    8bae:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
    8bb2:	2a0a      	cmp	r2, #10
    8bb4:	d012      	beq.n	8bdc <grid_port_receive_task+0x8c>
    8bb6:	b1aa      	cbz	r2, 8be4 <grid_port_receive_task+0x94>
			por->rx_double_buffer_seek_start_index++;			
    8bb8:	3301      	adds	r3, #1
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    8bba:	b29b      	uxth	r3, r3
    8bbc:	fba5 e203 	umull	lr, r2, r5, r3
    8bc0:	0992      	lsrs	r2, r2, #6
    8bc2:	fb00 3312 	mls	r3, r0, r2, r3
    8bc6:	8323      	strh	r3, [r4, #24]
    8bc8:	3901      	subs	r1, #1
    8bca:	b289      	uxth	r1, r1
	for(uint16_t i = 0; i<10; i++){
    8bcc:	2900      	cmp	r1, #0
    8bce:	d1ec      	bne.n	8baa <grid_port_receive_task+0x5a>
	if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == '\n'){
    8bd0:	b29b      	uxth	r3, r3
    8bd2:	4423      	add	r3, r4
    8bd4:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
    8bd8:	2b0a      	cmp	r3, #10
    8bda:	d103      	bne.n	8be4 <grid_port_receive_task+0x94>
		por->rx_double_buffer_timeout = 0;
    8bdc:	2300      	movs	r3, #0
    8bde:	82a3      	strh	r3, [r4, #20]
		por->rx_double_buffer_status = 1;
    8be0:	2301      	movs	r3, #1
    8be2:	82e3      	strh	r3, [r4, #22]
}
    8be4:	b003      	add	sp, #12
    8be6:	bd30      	pop	{r4, r5, pc}
    8be8:	4770      	bx	lr
    8bea:	bf00      	nop
    8bec:	000034a5 	.word	0x000034a5
    8bf0:	2000165c 	.word	0x2000165c
    8bf4:	00003721 	.word	0x00003721
    8bf8:	51eb851f 	.word	0x51eb851f

00008bfc <RTC_Scheduler_rx_task_cb>:
{
    8bfc:	b510      	push	{r4, lr}
	grid_port_receive_task(&GRID_PORT_N);
    8bfe:	4805      	ldr	r0, [pc, #20]	; (8c14 <RTC_Scheduler_rx_task_cb+0x18>)
    8c00:	4c05      	ldr	r4, [pc, #20]	; (8c18 <RTC_Scheduler_rx_task_cb+0x1c>)
    8c02:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_E);
    8c04:	4805      	ldr	r0, [pc, #20]	; (8c1c <RTC_Scheduler_rx_task_cb+0x20>)
    8c06:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_S);
    8c08:	4805      	ldr	r0, [pc, #20]	; (8c20 <RTC_Scheduler_rx_task_cb+0x24>)
    8c0a:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_W);
    8c0c:	4805      	ldr	r0, [pc, #20]	; (8c24 <RTC_Scheduler_rx_task_cb+0x28>)
    8c0e:	47a0      	blx	r4
    8c10:	bd10      	pop	{r4, pc}
    8c12:	bf00      	nop
    8c14:	20001248 	.word	0x20001248
    8c18:	00008b51 	.word	0x00008b51
    8c1c:	20002240 	.word	0x20002240
    8c20:	20001e74 	.word	0x20001e74
    8c24:	20001c7c 	.word	0x20001c7c

00008c28 <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint8_t startcommand, uint8_t length){
    8c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c2c:	b08d      	sub	sp, #52	; 0x34
    8c2e:	af02      	add	r7, sp, #8
    8c30:	4605      	mov	r5, r0
    8c32:	4616      	mov	r6, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    8c34:	2301      	movs	r3, #1
    8c36:	773b      	strb	r3, [r7, #28]
	response[1] = GRID_MSG_DIRECT;
    8c38:	230e      	movs	r3, #14
    8c3a:	777b      	strb	r3, [r7, #29]
	response[2] = GRID_MSG_NACKNOWLEDGE;
    8c3c:	2315      	movs	r3, #21
    8c3e:	77bb      	strb	r3, [r7, #30]
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    8c40:	2304      	movs	r3, #4
    8c42:	77fb      	strb	r3, [r7, #31]
	response[4] = '0'; //checksum
    8c44:	2330      	movs	r3, #48	; 0x30
    8c46:	f887 3020 	strb.w	r3, [r7, #32]
	response[5] = '0'; //checksum
    8c4a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	response[6] = '\n';
    8c4e:	230a      	movs	r3, #10
    8c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	response[7] = 0;
    8c54:	2300      	movs	r3, #0
    8c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	response[8] = 0;
    8c5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	response[9] = 0;
    8c5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t error_flag = 0;
    8c62:	76fb      	strb	r3, [r7, #27]
	uint8_t message[length];
    8c64:	1dd3      	adds	r3, r2, #7
    8c66:	f023 0307 	bic.w	r3, r3, #7
    8c6a:	ebad 0d03 	sub.w	sp, sp, r3
    8c6e:	f10d 0808 	add.w	r8, sp, #8
	for (uint8_t i = 0; i<length; i++){
    8c72:	2a00      	cmp	r2, #0
    8c74:	f000 81e5 	beq.w	9042 <grid_port_receive_decode+0x41a>
    8c78:	4643      	mov	r3, r8
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    8c7a:	8b42      	ldrh	r2, [r0, #26]
    8c7c:	f108 39ff 	add.w	r9, r8, #4294967295
    8c80:	1e71      	subs	r1, r6, #1
    8c82:	fa58 f181 	uxtab	r1, r8, r1
    8c86:	464c      	mov	r4, r9
    8c88:	3201      	adds	r2, #1
    8c8a:	1ad2      	subs	r2, r2, r3
    8c8c:	f8df e310 	ldr.w	lr, [pc, #784]	; 8fa0 <grid_port_receive_decode+0x378>
    8c90:	20c8      	movs	r0, #200	; 0xc8
    8c92:	eb02 0c04 	add.w	ip, r2, r4
    8c96:	fb8e 3a0c 	smull	r3, sl, lr, ip
    8c9a:	ea4f 73ec 	mov.w	r3, ip, asr #31
    8c9e:	ebc3 13aa 	rsb	r3, r3, sl, asr #6
    8ca2:	fb00 c313 	mls	r3, r0, r3, ip
    8ca6:	442b      	add	r3, r5
    8ca8:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
    8cac:	f804 3f01 	strb.w	r3, [r4, #1]!
	for (uint8_t i = 0; i<length; i++){
    8cb0:	428c      	cmp	r4, r1
    8cb2:	d1ee      	bne.n	8c92 <grid_port_receive_decode+0x6a>
	if (length>5){
    8cb4:	2e05      	cmp	r6, #5
    8cb6:	d82f      	bhi.n	8d18 <grid_port_receive_decode+0xf0>
	if (message[1] == GRID_MSG_BROADCAST){				
    8cb8:	f898 3001 	ldrb.w	r3, [r8, #1]
    8cbc:	2b0f      	cmp	r3, #15
    8cbe:	f000 81c5 	beq.w	904c <grid_port_receive_decode+0x424>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    8cc2:	f8b5 c01a 	ldrh.w	ip, [r5, #26]
    8cc6:	2200      	movs	r2, #0
    8cc8:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 8fa0 <grid_port_receive_decode+0x378>
    8ccc:	24c8      	movs	r4, #200	; 0xc8
    8cce:	4610      	mov	r0, r2
    8cd0:	eb0c 0102 	add.w	r1, ip, r2
    8cd4:	fb8e 3801 	smull	r3, r8, lr, r1
    8cd8:	17cb      	asrs	r3, r1, #31
    8cda:	ebc3 13a8 	rsb	r3, r3, r8, asr #6
    8cde:	fb04 1313 	mls	r3, r4, r3, r1
    8ce2:	442b      	add	r3, r5
    8ce4:	f883 00e4 	strb.w	r0, [r3, #228]	; 0xe4
    8ce8:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<length; i++){
    8cea:	b2d3      	uxtb	r3, r2
    8cec:	429e      	cmp	r6, r3
    8cee:	d8ef      	bhi.n	8cd0 <grid_port_receive_decode+0xa8>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    8cf0:	8b6b      	ldrh	r3, [r5, #26]
    8cf2:	4433      	add	r3, r6
    8cf4:	4aaa      	ldr	r2, [pc, #680]	; (8fa0 <grid_port_receive_decode+0x378>)
    8cf6:	fb82 1203 	smull	r1, r2, r2, r3
    8cfa:	17de      	asrs	r6, r3, #31
    8cfc:	ebc6 16a2 	rsb	r6, r6, r2, asr #6
    8d00:	22c8      	movs	r2, #200	; 0xc8
    8d02:	fb02 3616 	mls	r6, r2, r6, r3
    8d06:	b2b6      	uxth	r6, r6
    8d08:	836e      	strh	r6, [r5, #26]
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    8d0a:	832e      	strh	r6, [r5, #24]
	por->rx_double_buffer_status = 0;
    8d0c:	2300      	movs	r3, #0
    8d0e:	82eb      	strh	r3, [r5, #22]
}
    8d10:	372c      	adds	r7, #44	; 0x2c
    8d12:	46bd      	mov	sp, r7
    8d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    8d18:	1ef0      	subs	r0, r6, #3
    8d1a:	f107 021b 	add.w	r2, r7, #27
    8d1e:	2102      	movs	r1, #2
    8d20:	4440      	add	r0, r8
    8d22:	4ba0      	ldr	r3, [pc, #640]	; (8fa4 <grid_port_receive_decode+0x37c>)
    8d24:	4798      	blx	r3
    8d26:	4682      	mov	sl, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    8d28:	4631      	mov	r1, r6
    8d2a:	4640      	mov	r0, r8
    8d2c:	4b9e      	ldr	r3, [pc, #632]	; (8fa8 <grid_port_receive_decode+0x380>)
    8d2e:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    8d30:	fa5f fa8a 	uxtb.w	sl, sl
    8d34:	b2c0      	uxtb	r0, r0
    8d36:	4582      	cmp	sl, r0
    8d38:	d00b      	beq.n	8d52 <grid_port_receive_decode+0x12a>
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 255, 1, 2000); // PURPLE BLINKY
    8d3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    8d3e:	9301      	str	r3, [sp, #4]
    8d40:	2301      	movs	r3, #1
    8d42:	9300      	str	r3, [sp, #0]
    8d44:	23ff      	movs	r3, #255	; 0xff
    8d46:	2200      	movs	r2, #0
    8d48:	4619      	mov	r1, r3
    8d4a:	4898      	ldr	r0, [pc, #608]	; (8fac <grid_port_receive_decode+0x384>)
    8d4c:	4c98      	ldr	r4, [pc, #608]	; (8fb0 <grid_port_receive_decode+0x388>)
    8d4e:	47a0      	blx	r4
    8d50:	e7b2      	b.n	8cb8 <grid_port_receive_decode+0x90>
		if (checksum_calculated == checksum_received && error_flag == 0){
    8d52:	7efb      	ldrb	r3, [r7, #27]
    8d54:	2b00      	cmp	r3, #0
    8d56:	d1f0      	bne.n	8d3a <grid_port_receive_decode+0x112>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    8d58:	f898 3001 	ldrb.w	r3, [r8, #1]
    8d5c:	2b0f      	cmp	r3, #15
    8d5e:	d00d      	beq.n	8d7c <grid_port_receive_decode+0x154>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    8d60:	2b0e      	cmp	r3, #14
    8d62:	f000 80a5 	beq.w	8eb0 <grid_port_receive_decode+0x288>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    8d66:	23c8      	movs	r3, #200	; 0xc8
    8d68:	9301      	str	r3, [sp, #4]
    8d6a:	2302      	movs	r3, #2
    8d6c:	9300      	str	r3, [sp, #0]
    8d6e:	2300      	movs	r3, #0
    8d70:	461a      	mov	r2, r3
    8d72:	21ff      	movs	r1, #255	; 0xff
    8d74:	488d      	ldr	r0, [pc, #564]	; (8fac <grid_port_receive_decode+0x384>)
    8d76:	4c8e      	ldr	r4, [pc, #568]	; (8fb0 <grid_port_receive_decode+0x388>)
    8d78:	47a0      	blx	r4
    8d7a:	e79d      	b.n	8cb8 <grid_port_receive_decode+0x90>
				uint8_t received_id  = grid_msg_get_id(message);;			
    8d7c:	4640      	mov	r0, r8
    8d7e:	4b8d      	ldr	r3, [pc, #564]	; (8fb4 <grid_port_receive_decode+0x38c>)
    8d80:	4798      	blx	r3
    8d82:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_age(message);
    8d84:	4640      	mov	r0, r8
    8d86:	4b8c      	ldr	r3, [pc, #560]	; (8fb8 <grid_port_receive_decode+0x390>)
    8d88:	4798      	blx	r3
    8d8a:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    8d8c:	4640      	mov	r0, r8
    8d8e:	4b8b      	ldr	r3, [pc, #556]	; (8fbc <grid_port_receive_decode+0x394>)
    8d90:	4798      	blx	r3
    8d92:	4683      	mov	fp, r0
    8d94:	f1a0 0a7f 	sub.w	sl, r0, #127	; 0x7f
    8d98:	fa4f fa8a 	sxtb.w	sl, sl
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    8d9c:	4640      	mov	r0, r8
    8d9e:	4b88      	ldr	r3, [pc, #544]	; (8fc0 <grid_port_receive_decode+0x398>)
    8da0:	4798      	blx	r3
    8da2:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    8da6:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    8da8:	f895 21e0 	ldrb.w	r2, [r5, #480]	; 0x1e0
    8dac:	b182      	cbz	r2, 8dd0 <grid_port_receive_decode+0x1a8>
				else if(por->partner_fi == 1){ // 90 deg
    8dae:	2a01      	cmp	r2, #1
    8db0:	d009      	beq.n	8dc6 <grid_port_receive_decode+0x19e>
				else if(por->partner_fi == 2){ // 180 deg
    8db2:	2a02      	cmp	r2, #2
    8db4:	d064      	beq.n	8e80 <grid_port_receive_decode+0x258>
				else if(por->partner_fi == 3){ // 270 deg
    8db6:	2a03      	cmp	r2, #3
    8db8:	d16a      	bne.n	8e90 <grid_port_receive_decode+0x268>
					rotated_dy  -= received_dx;
    8dba:	f1cb 0b7f 	rsb	fp, fp, #127	; 0x7f
					rotated_dx  += received_dy;
    8dbe:	469a      	mov	sl, r3
					rotated_dy  -= received_dx;
    8dc0:	fa4f f38b 	sxtb.w	r3, fp
    8dc4:	e004      	b.n	8dd0 <grid_port_receive_decode+0x1a8>
					rotated_dx  -= received_dy;
    8dc6:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    8dca:	4653      	mov	r3, sl
					rotated_dx  -= received_dy;
    8dcc:	fa4f fa80 	sxtb.w	sl, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    8dd0:	f895 b1e1 	ldrb.w	fp, [r5, #481]	; 0x1e1
    8dd4:	f10b 0b7f 	add.w	fp, fp, #127	; 0x7f
    8dd8:	44da      	add	sl, fp
    8dda:	fa5f fb8a 	uxtb.w	fp, sl
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    8dde:	f895 a1e2 	ldrb.w	sl, [r5, #482]	; 0x1e2
    8de2:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    8de6:	4453      	add	r3, sl
    8de8:	fa5f fa83 	uxtb.w	sl, r3
				uint8_t updated_age = received_age + 1;
    8dec:	683b      	ldr	r3, [r7, #0]
    8dee:	3301      	adds	r3, #1
    8df0:	b2db      	uxtb	r3, r3
    8df2:	603b      	str	r3, [r7, #0]
				grid_msg_set_id(message, updated_id);
    8df4:	6879      	ldr	r1, [r7, #4]
    8df6:	4640      	mov	r0, r8
    8df8:	4b72      	ldr	r3, [pc, #456]	; (8fc4 <grid_port_receive_decode+0x39c>)
    8dfa:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    8dfc:	4659      	mov	r1, fp
    8dfe:	4640      	mov	r0, r8
    8e00:	4b71      	ldr	r3, [pc, #452]	; (8fc8 <grid_port_receive_decode+0x3a0>)
    8e02:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    8e04:	4651      	mov	r1, sl
    8e06:	4640      	mov	r0, r8
    8e08:	4b70      	ldr	r3, [pc, #448]	; (8fcc <grid_port_receive_decode+0x3a4>)
    8e0a:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);		
    8e0c:	6839      	ldr	r1, [r7, #0]
    8e0e:	4640      	mov	r0, r8
    8e10:	4b6f      	ldr	r3, [pc, #444]	; (8fd0 <grid_port_receive_decode+0x3a8>)
    8e12:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    8e14:	687a      	ldr	r2, [r7, #4]
    8e16:	eb0b 2b02 	add.w	fp, fp, r2, lsl #8
    8e1a:	eb0a 2a0b 	add.w	sl, sl, fp, lsl #8
    8e1e:	683b      	ldr	r3, [r7, #0]
    8e20:	eb03 230a 	add.w	r3, r3, sl, lsl #8
    8e24:	607b      	str	r3, [r7, #4]
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    8e26:	4619      	mov	r1, r3
    8e28:	4860      	ldr	r0, [pc, #384]	; (8fac <grid_port_receive_decode+0x384>)
    8e2a:	4b6a      	ldr	r3, [pc, #424]	; (8fd4 <grid_port_receive_decode+0x3ac>)
    8e2c:	4798      	blx	r3
    8e2e:	2800      	cmp	r0, #0
    8e30:	d131      	bne.n	8e96 <grid_port_receive_decode+0x26e>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    8e32:	4631      	mov	r1, r6
    8e34:	4640      	mov	r0, r8
    8e36:	4b5c      	ldr	r3, [pc, #368]	; (8fa8 <grid_port_receive_decode+0x380>)
    8e38:	4798      	blx	r3
    8e3a:	4602      	mov	r2, r0
    8e3c:	4631      	mov	r1, r6
    8e3e:	4640      	mov	r0, r8
    8e40:	4b65      	ldr	r3, [pc, #404]	; (8fd8 <grid_port_receive_decode+0x3b0>)
    8e42:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    8e44:	f505 7ae2 	add.w	sl, r5, #452	; 0x1c4
    8e48:	4631      	mov	r1, r6
    8e4a:	4650      	mov	r0, sl
    8e4c:	4b63      	ldr	r3, [pc, #396]	; (8fdc <grid_port_receive_decode+0x3b4>)
    8e4e:	4798      	blx	r3
    8e50:	2800      	cmp	r0, #0
    8e52:	f43f af31 	beq.w	8cb8 <grid_port_receive_decode+0x90>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    8e56:	f8df b194 	ldr.w	fp, [pc, #404]	; 8fec <grid_port_receive_decode+0x3c4>
    8e5a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    8e5e:	4650      	mov	r0, sl
    8e60:	47d8      	blx	fp
						for (uint8_t i=0; i<length; i++){
    8e62:	45a1      	cmp	r9, r4
    8e64:	d1f9      	bne.n	8e5a <grid_port_receive_decode+0x232>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    8e66:	4650      	mov	r0, sl
    8e68:	4b5d      	ldr	r3, [pc, #372]	; (8fe0 <grid_port_receive_decode+0x3b8>)
    8e6a:	4798      	blx	r3
						grid_port_process_inbound(por);
    8e6c:	4628      	mov	r0, r5
    8e6e:	4b5d      	ldr	r3, [pc, #372]	; (8fe4 <grid_port_receive_decode+0x3bc>)
    8e70:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    8e72:	6879      	ldr	r1, [r7, #4]
    8e74:	484d      	ldr	r0, [pc, #308]	; (8fac <grid_port_receive_decode+0x384>)
    8e76:	4b5c      	ldr	r3, [pc, #368]	; (8fe8 <grid_port_receive_decode+0x3c0>)
    8e78:	4798      	blx	r3
						response[2] = GRID_MSG_ACKNOWLEDGE;
    8e7a:	2306      	movs	r3, #6
    8e7c:	77bb      	strb	r3, [r7, #30]
    8e7e:	e71b      	b.n	8cb8 <grid_port_receive_decode+0x90>
					rotated_dx  -= received_dx;
    8e80:	f1cb 0a7f 	rsb	sl, fp, #127	; 0x7f
    8e84:	fa4f fa8a 	sxtb.w	sl, sl
					rotated_dy  -= received_dy;
    8e88:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    8e8c:	b25b      	sxtb	r3, r3
    8e8e:	e79f      	b.n	8dd0 <grid_port_receive_decode+0x1a8>
				int8_t rotated_dy = 0;
    8e90:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    8e92:	469a      	mov	sl, r3
    8e94:	e79c      	b.n	8dd0 <grid_port_receive_decode+0x1a8>
					response[2] = GRID_MSG_ACKNOWLEDGE;							
    8e96:	2306      	movs	r3, #6
    8e98:	77bb      	strb	r3, [r7, #30]
					grid_sys_alert_set_alert(&grid_sys_state, 50, 50, 50, 2, 200); // WHITE
    8e9a:	23c8      	movs	r3, #200	; 0xc8
    8e9c:	9301      	str	r3, [sp, #4]
    8e9e:	2302      	movs	r3, #2
    8ea0:	9300      	str	r3, [sp, #0]
    8ea2:	2332      	movs	r3, #50	; 0x32
    8ea4:	461a      	mov	r2, r3
    8ea6:	4619      	mov	r1, r3
    8ea8:	4840      	ldr	r0, [pc, #256]	; (8fac <grid_port_receive_decode+0x384>)
    8eaa:	4c41      	ldr	r4, [pc, #260]	; (8fb0 <grid_port_receive_decode+0x388>)
    8eac:	47a0      	blx	r4
    8eae:	e703      	b.n	8cb8 <grid_port_receive_decode+0x90>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    8eb0:	f898 3002 	ldrb.w	r3, [r8, #2]
    8eb4:	2b06      	cmp	r3, #6
    8eb6:	d02d      	beq.n	8f14 <grid_port_receive_decode+0x2ec>
				else if (message[2] == GRID_MSG_NACKNOWLEDGE){
    8eb8:	2b15      	cmp	r3, #21
    8eba:	d036      	beq.n	8f2a <grid_port_receive_decode+0x302>
				else if (message[2] == GRID_MSG_BELL){
    8ebc:	2b07      	cmp	r3, #7
    8ebe:	f47f af00 	bne.w	8cc2 <grid_port_receive_decode+0x9a>
					if (por->partner_status == 0){
    8ec2:	f895 31e3 	ldrb.w	r3, [r5, #483]	; 0x1e3
    8ec6:	2b00      	cmp	r3, #0
    8ec8:	d139      	bne.n	8f3e <grid_port_receive_decode+0x316>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    8eca:	f898 3003 	ldrb.w	r3, [r8, #3]
    8ece:	796a      	ldrb	r2, [r5, #5]
    8ed0:	1a9b      	subs	r3, r3, r2
    8ed2:	3306      	adds	r3, #6
    8ed4:	425a      	negs	r2, r3
    8ed6:	f003 0303 	and.w	r3, r3, #3
    8eda:	f002 0203 	and.w	r2, r2, #3
    8ede:	bf58      	it	pl
    8ee0:	4253      	negpl	r3, r2
    8ee2:	f885 31e0 	strb.w	r3, [r5, #480]	; 0x1e0
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    8ee6:	f1a6 000c 	sub.w	r0, r6, #12
    8eea:	2200      	movs	r2, #0
    8eec:	2108      	movs	r1, #8
    8eee:	4440      	add	r0, r8
    8ef0:	4b2c      	ldr	r3, [pc, #176]	; (8fa4 <grid_port_receive_decode+0x37c>)
    8ef2:	4798      	blx	r3
    8ef4:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
						por->partner_status = 1;
    8ef8:	2301      	movs	r3, #1
    8efa:	f885 31e3 	strb.w	r3, [r5, #483]	; 0x1e3
						grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    8efe:	23c8      	movs	r3, #200	; 0xc8
    8f00:	9301      	str	r3, [sp, #4]
    8f02:	2302      	movs	r3, #2
    8f04:	9300      	str	r3, [sp, #0]
    8f06:	2300      	movs	r3, #0
    8f08:	22ff      	movs	r2, #255	; 0xff
    8f0a:	4619      	mov	r1, r3
    8f0c:	4827      	ldr	r0, [pc, #156]	; (8fac <grid_port_receive_decode+0x384>)
    8f0e:	4c28      	ldr	r4, [pc, #160]	; (8fb0 <grid_port_receive_decode+0x388>)
    8f10:	47a0      	blx	r4
    8f12:	e6d1      	b.n	8cb8 <grid_port_receive_decode+0x90>
					grid_sys_alert_set_alert(&grid_sys_state, 30, 30, 30, 0, 250); // LIGHT WHITE PULSE
    8f14:	23fa      	movs	r3, #250	; 0xfa
    8f16:	9301      	str	r3, [sp, #4]
    8f18:	2300      	movs	r3, #0
    8f1a:	9300      	str	r3, [sp, #0]
    8f1c:	231e      	movs	r3, #30
    8f1e:	461a      	mov	r2, r3
    8f20:	4619      	mov	r1, r3
    8f22:	4822      	ldr	r0, [pc, #136]	; (8fac <grid_port_receive_decode+0x384>)
    8f24:	4c22      	ldr	r4, [pc, #136]	; (8fb0 <grid_port_receive_decode+0x388>)
    8f26:	47a0      	blx	r4
    8f28:	e6c6      	b.n	8cb8 <grid_port_receive_decode+0x90>
					grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 0, 250); // LIGHT RED PULSE
    8f2a:	23fa      	movs	r3, #250	; 0xfa
    8f2c:	9301      	str	r3, [sp, #4]
    8f2e:	2200      	movs	r2, #0
    8f30:	9200      	str	r2, [sp, #0]
    8f32:	4613      	mov	r3, r2
    8f34:	2132      	movs	r1, #50	; 0x32
    8f36:	481d      	ldr	r0, [pc, #116]	; (8fac <grid_port_receive_decode+0x384>)
    8f38:	4c1d      	ldr	r4, [pc, #116]	; (8fb0 <grid_port_receive_decode+0x388>)
    8f3a:	47a0      	blx	r4
    8f3c:	e6bc      	b.n	8cb8 <grid_port_receive_decode+0x90>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    8f3e:	f898 3003 	ldrb.w	r3, [r8, #3]
    8f42:	796a      	ldrb	r2, [r5, #5]
    8f44:	1a9b      	subs	r3, r3, r2
    8f46:	3306      	adds	r3, #6
    8f48:	425a      	negs	r2, r3
    8f4a:	f003 0303 	and.w	r3, r3, #3
    8f4e:	f002 0203 	and.w	r2, r2, #3
    8f52:	bf58      	it	pl
    8f54:	4253      	negpl	r3, r2
    8f56:	f895 41e0 	ldrb.w	r4, [r5, #480]	; 0x1e0
    8f5a:	42a3      	cmp	r3, r4
    8f5c:	bf14      	ite	ne
    8f5e:	2400      	movne	r4, #0
    8f60:	2401      	moveq	r4, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    8f62:	f1a6 000c 	sub.w	r0, r6, #12
    8f66:	2200      	movs	r2, #0
    8f68:	2108      	movs	r1, #8
    8f6a:	4440      	add	r0, r8
    8f6c:	4b0d      	ldr	r3, [pc, #52]	; (8fa4 <grid_port_receive_decode+0x37c>)
    8f6e:	4798      	blx	r3
    8f70:	60f8      	str	r0, [r7, #12]
						volatile uint32_t debug2 = por->partner_hwcfg;
    8f72:	f8d5 31dc 	ldr.w	r3, [r5, #476]	; 0x1dc
    8f76:	613b      	str	r3, [r7, #16]
						validator &= (por->partner_hwcfg == debug);									
    8f78:	68fa      	ldr	r2, [r7, #12]
						if (validator == 0){
    8f7a:	4293      	cmp	r3, r2
    8f7c:	d102      	bne.n	8f84 <grid_port_receive_decode+0x35c>
    8f7e:	2c00      	cmp	r4, #0
    8f80:	f47f ae9a 	bne.w	8cb8 <grid_port_receive_decode+0x90>
							por->partner_status = 0;	
    8f84:	2300      	movs	r3, #0
    8f86:	f885 31e3 	strb.w	r3, [r5, #483]	; 0x1e3
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    8f8a:	23c8      	movs	r3, #200	; 0xc8
    8f8c:	9301      	str	r3, [sp, #4]
    8f8e:	2302      	movs	r3, #2
    8f90:	9300      	str	r3, [sp, #0]
    8f92:	23ff      	movs	r3, #255	; 0xff
    8f94:	461a      	mov	r2, r3
    8f96:	4619      	mov	r1, r3
    8f98:	4804      	ldr	r0, [pc, #16]	; (8fac <grid_port_receive_decode+0x384>)
    8f9a:	4c05      	ldr	r4, [pc, #20]	; (8fb0 <grid_port_receive_decode+0x388>)
    8f9c:	47a0      	blx	r4
    8f9e:	e68b      	b.n	8cb8 <grid_port_receive_decode+0x90>
    8fa0:	51eb851f 	.word	0x51eb851f
    8fa4:	00003775 	.word	0x00003775
    8fa8:	000038dd 	.word	0x000038dd
    8fac:	2000165c 	.word	0x2000165c
    8fb0:	00003721 	.word	0x00003721
    8fb4:	0000390d 	.word	0x0000390d
    8fb8:	0000396d 	.word	0x0000396d
    8fbc:	0000392d 	.word	0x0000392d
    8fc0:	0000394d 	.word	0x0000394d
    8fc4:	0000398d 	.word	0x0000398d
    8fc8:	000039a1 	.word	0x000039a1
    8fcc:	000039b5 	.word	0x000039b5
    8fd0:	000039c9 	.word	0x000039c9
    8fd4:	000039dd 	.word	0x000039dd
    8fd8:	000038f9 	.word	0x000038f9
    8fdc:	00001155 	.word	0x00001155
    8fe0:	000011a1 	.word	0x000011a1
    8fe4:	00001479 	.word	0x00001479
    8fe8:	00003a09 	.word	0x00003a09
    8fec:	00001185 	.word	0x00001185
			sprintf(checksum, "%02x", grid_msg_get_checksum(response, response_length));
    8ff0:	4641      	mov	r1, r8
    8ff2:	f107 001c 	add.w	r0, r7, #28
    8ff6:	4b1e      	ldr	r3, [pc, #120]	; (9070 <grid_port_receive_decode+0x448>)
    8ff8:	4798      	blx	r3
    8ffa:	4602      	mov	r2, r0
    8ffc:	491d      	ldr	r1, [pc, #116]	; (9074 <grid_port_receive_decode+0x44c>)
    8ffe:	f107 0014 	add.w	r0, r7, #20
    9002:	4b1d      	ldr	r3, [pc, #116]	; (9078 <grid_port_receive_decode+0x450>)
    9004:	4798      	blx	r3
			response[4] = checksum[0];
    9006:	7d3b      	ldrb	r3, [r7, #20]
    9008:	f887 3020 	strb.w	r3, [r7, #32]
			response[5] = checksum[1];
    900c:	7d7b      	ldrb	r3, [r7, #21]
    900e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			for (uint8_t i=0; i<response_length; i++)
    9012:	f1b8 0f00 	cmp.w	r8, #0
    9016:	d010      	beq.n	903a <grid_port_receive_decode+0x412>
    9018:	f107 041c 	add.w	r4, r7, #28
    901c:	f108 38ff 	add.w	r8, r8, #4294967295
    9020:	fa5f f888 	uxtb.w	r8, r8
    9024:	f108 0801 	add.w	r8, r8, #1
    9028:	44a0      	add	r8, r4
				grid_buffer_write_character(&por->tx_buffer, response[i]);
    902a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 9088 <grid_port_receive_decode+0x460>
    902e:	f814 1b01 	ldrb.w	r1, [r4], #1
    9032:	4648      	mov	r0, r9
    9034:	47d0      	blx	sl
			for (uint8_t i=0; i<response_length; i++)
    9036:	45a0      	cmp	r8, r4
    9038:	d1f9      	bne.n	902e <grid_port_receive_decode+0x406>
			grid_buffer_write_acknowledge(&por->tx_buffer);
    903a:	4648      	mov	r0, r9
    903c:	4b0f      	ldr	r3, [pc, #60]	; (907c <grid_port_receive_decode+0x454>)
    903e:	4798      	blx	r3
    9040:	e012      	b.n	9068 <grid_port_receive_decode+0x440>
	if (message[1] == GRID_MSG_BROADCAST){				
    9042:	f898 3001 	ldrb.w	r3, [r8, #1]
    9046:	2b0f      	cmp	r3, #15
    9048:	f47f ae52 	bne.w	8cf0 <grid_port_receive_decode+0xc8>
		uint8_t response_length = strlen(response);
    904c:	f107 001c 	add.w	r0, r7, #28
    9050:	4b0b      	ldr	r3, [pc, #44]	; (9080 <grid_port_receive_decode+0x458>)
    9052:	4798      	blx	r3
    9054:	fa5f f880 	uxtb.w	r8, r0
		if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    9058:	f505 79d6 	add.w	r9, r5, #428	; 0x1ac
    905c:	4641      	mov	r1, r8
    905e:	4648      	mov	r0, r9
    9060:	4b08      	ldr	r3, [pc, #32]	; (9084 <grid_port_receive_decode+0x45c>)
    9062:	4798      	blx	r3
    9064:	2800      	cmp	r0, #0
    9066:	d1c3      	bne.n	8ff0 <grid_port_receive_decode+0x3c8>
	for (uint8_t i = 0; i<length; i++){
    9068:	2e00      	cmp	r6, #0
    906a:	f47f ae2a 	bne.w	8cc2 <grid_port_receive_decode+0x9a>
    906e:	e63f      	b.n	8cf0 <grid_port_receive_decode+0xc8>
    9070:	000038dd 	.word	0x000038dd
    9074:	0000bc8c 	.word	0x0000bc8c
    9078:	0000b3f9 	.word	0x0000b3f9
    907c:	000011a1 	.word	0x000011a1
    9080:	0000b441 	.word	0x0000b441
    9084:	00001155 	.word	0x00001155
    9088:	00001185 	.word	0x00001185

0000908c <grid_port_receive_complete_task>:
	if (por->rx_double_buffer_status != 1){
    908c:	8ac3      	ldrh	r3, [r0, #22]
    908e:	2b01      	cmp	r3, #1
    9090:	d000      	beq.n	9094 <grid_port_receive_complete_task+0x8>
    9092:	4770      	bx	lr
void grid_port_receive_complete_task(struct grid_port* por){
    9094:	b510      	push	{r4, lr}
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    9096:	8b41      	ldrh	r1, [r0, #26]
    9098:	8b03      	ldrh	r3, [r0, #24]
    909a:	4299      	cmp	r1, r3
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    909c:	bf34      	ite	cc
    909e:	1c5a      	addcc	r2, r3, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    90a0:	f1a3 0237 	subcs.w	r2, r3, #55	; 0x37
    90a4:	1a52      	subs	r2, r2, r1
    90a6:	b2d2      	uxtb	r2, r2
    90a8:	4604      	mov	r4, r0
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    90aa:	b2c9      	uxtb	r1, r1
    90ac:	4b02      	ldr	r3, [pc, #8]	; (90b8 <grid_port_receive_complete_task+0x2c>)
    90ae:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    90b0:	2300      	movs	r3, #0
    90b2:	82e3      	strh	r3, [r4, #22]
    90b4:	bd10      	pop	{r4, pc}
    90b6:	bf00      	nop
    90b8:	00008c29 	.word	0x00008c29

000090bc <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    90bc:	b570      	push	{r4, r5, r6, lr}
	
		
	RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
    90be:	4c12      	ldr	r4, [pc, #72]	; (9108 <init_timer+0x4c>)
    90c0:	f240 3333 	movw	r3, #819	; 0x333
    90c4:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    90c6:	4b11      	ldr	r3, [pc, #68]	; (910c <init_timer+0x50>)
    90c8:	6163      	str	r3, [r4, #20]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    90ca:	2301      	movs	r3, #1
    90cc:	7623      	strb	r3, [r4, #24]
	
	RTC_Scheduler_rx_task.interval = RTC1SEC/10000; // 100us
    90ce:	6263      	str	r3, [r4, #36]	; 0x24
	RTC_Scheduler_rx_task.cb       = RTC_Scheduler_rx_task_cb;
    90d0:	4a0f      	ldr	r2, [pc, #60]	; (9110 <init_timer+0x54>)
    90d2:	62a2      	str	r2, [r4, #40]	; 0x28
	RTC_Scheduler_rx_task.mode     = TIMER_TASK_REPEAT;
    90d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	
	RTC_Scheduler_realtime.interval = 1; // 1us
    90d8:	63a3      	str	r3, [r4, #56]	; 0x38
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    90da:	4a0e      	ldr	r2, [pc, #56]	; (9114 <init_timer+0x58>)
    90dc:	63e2      	str	r2, [r4, #60]	; 0x3c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    90de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_rx_task);
    90e2:	4d0d      	ldr	r5, [pc, #52]	; (9118 <init_timer+0x5c>)
    90e4:	f104 011c 	add.w	r1, r4, #28
    90e8:	4628      	mov	r0, r5
    90ea:	4e0c      	ldr	r6, [pc, #48]	; (911c <init_timer+0x60>)
    90ec:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    90ee:	f104 0108 	add.w	r1, r4, #8
    90f2:	4628      	mov	r0, r5
    90f4:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    90f6:	f104 0130 	add.w	r1, r4, #48	; 0x30
    90fa:	4628      	mov	r0, r5
    90fc:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    90fe:	4628      	mov	r0, r5
    9100:	4b07      	ldr	r3, [pc, #28]	; (9120 <init_timer+0x64>)
    9102:	4798      	blx	r3
    9104:	bd70      	pop	{r4, r5, r6, pc}
    9106:	bf00      	nop
    9108:	20000d7c 	.word	0x20000d7c
    910c:	00008b39 	.word	0x00008b39
    9110:	00008bfd 	.word	0x00008bfd
    9114:	00008b29 	.word	0x00008b29
    9118:	20000f00 	.word	0x20000f00
    911c:	00004919 	.word	0x00004919
    9120:	000048d9 	.word	0x000048d9

00009124 <main>:
struct io_descriptor *io;



int main(void)
{
    9124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9128:	b08b      	sub	sp, #44	; 0x2c
	
	#include "usb/class/midi/device/audiodf_midi.h"



	atmel_start_init();	
    912a:	4b7a      	ldr	r3, [pc, #488]	; (9314 <main+0x1f0>)
    912c:	4798      	blx	r3


	
	//TIMER_0_example2();

	audiodf_midi_init();
    912e:	4b7a      	ldr	r3, [pc, #488]	; (9318 <main+0x1f4>)
    9130:	4798      	blx	r3


	composite_device_start();
    9132:	4b7a      	ldr	r3, [pc, #488]	; (931c <main+0x1f8>)
    9134:	4798      	blx	r3
	
	grid_module_common_init();
    9136:	4b7a      	ldr	r3, [pc, #488]	; (9320 <main+0x1fc>)
    9138:	4798      	blx	r3

	init_timer();	
    913a:	4b7a      	ldr	r3, [pc, #488]	; (9324 <main+0x200>)
    913c:	4798      	blx	r3
	
	uint32_t loopstart = 0;

	
	rand();rand();
    913e:	4d7a      	ldr	r5, [pc, #488]	; (9328 <main+0x204>)
    9140:	47a8      	blx	r5
    9142:	47a8      	blx	r5
	
	uint8_t r[4] = {rand()%3, rand()%3, rand()%3, rand()%3};	
    9144:	47a8      	blx	r5
    9146:	4c79      	ldr	r4, [pc, #484]	; (932c <main+0x208>)
    9148:	fb84 2300 	smull	r2, r3, r4, r0
    914c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9150:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9154:	1ac3      	subs	r3, r0, r3
    9156:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    915a:	47a8      	blx	r5
    915c:	fb84 2300 	smull	r2, r3, r4, r0
    9160:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9164:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9168:	1ac3      	subs	r3, r0, r3
    916a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    916e:	47a8      	blx	r5
    9170:	fb84 2300 	smull	r2, r3, r4, r0
    9174:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9178:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    917c:	1ac3      	subs	r3, r0, r3
    917e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9182:	47a8      	blx	r5
    9184:	fb84 2300 	smull	r2, r3, r4, r0
    9188:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    918c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9190:	1ac3      	subs	r3, r0, r3
    9192:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t g[4] = {rand()%3, rand()%3, rand()%3, rand()%3};
    9196:	47a8      	blx	r5
    9198:	fb84 2300 	smull	r2, r3, r4, r0
    919c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    91a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91a4:	1ac3      	subs	r3, r0, r3
    91a6:	f88d 3020 	strb.w	r3, [sp, #32]
    91aa:	47a8      	blx	r5
    91ac:	fb84 2300 	smull	r2, r3, r4, r0
    91b0:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    91b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91b8:	1ac3      	subs	r3, r0, r3
    91ba:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    91be:	47a8      	blx	r5
    91c0:	fb84 2300 	smull	r2, r3, r4, r0
    91c4:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    91c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91cc:	1ac3      	subs	r3, r0, r3
    91ce:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    91d2:	47a8      	blx	r5
    91d4:	fb84 2300 	smull	r2, r3, r4, r0
    91d8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    91dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91e0:	1ac3      	subs	r3, r0, r3
    91e2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	uint8_t b[4] = {rand()%3, rand()%3, rand()%3, rand()%3};
    91e6:	47a8      	blx	r5
    91e8:	fb84 2300 	smull	r2, r3, r4, r0
    91ec:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    91f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91f4:	1ac3      	subs	r3, r0, r3
    91f6:	f88d 301c 	strb.w	r3, [sp, #28]
    91fa:	47a8      	blx	r5
    91fc:	fb84 2300 	smull	r2, r3, r4, r0
    9200:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9204:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9208:	1ac3      	subs	r3, r0, r3
    920a:	f88d 301d 	strb.w	r3, [sp, #29]
    920e:	47a8      	blx	r5
    9210:	fb84 2300 	smull	r2, r3, r4, r0
    9214:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    9218:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    921c:	1ac3      	subs	r3, r0, r3
    921e:	f88d 301e 	strb.w	r3, [sp, #30]
    9222:	47a8      	blx	r5
    9224:	fb84 2300 	smull	r2, r3, r4, r0
    9228:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    922c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9230:	1ac3      	subs	r3, r0, r3
    9232:	f88d 301f 	strb.w	r3, [sp, #31]
	
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9236:	f04f 0800 	mov.w	r8, #0
    923a:	f8df a120 	ldr.w	sl, [pc, #288]	; 935c <main+0x238>
	{
			
		grid_led_set_min(&grid_led_state, i, 0, r[i%4]*3, g[i%4]*3, b[i%4]*3);
    923e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 9354 <main+0x230>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9242:	e03d      	b.n	92c0 <main+0x19c>
		grid_led_set_min(&grid_led_state, i, 0, r[i%4]*3, g[i%4]*3, b[i%4]*3);
    9244:	f006 0303 	and.w	r3, r6, #3
    9248:	aa0a      	add	r2, sp, #40	; 0x28
    924a:	4413      	add	r3, r2
    924c:	f813 7c04 	ldrb.w	r7, [r3, #-4]
    9250:	f813 4c08 	ldrb.w	r4, [r3, #-8]
    9254:	f813 5c0c 	ldrb.w	r5, [r3, #-12]
    9258:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    925c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    9260:	b2d2      	uxtb	r2, r2
    9262:	9201      	str	r2, [sp, #4]
    9264:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    9268:	b2d2      	uxtb	r2, r2
    926a:	9200      	str	r2, [sp, #0]
    926c:	b2db      	uxtb	r3, r3
    926e:	2200      	movs	r2, #0
    9270:	4631      	mov	r1, r6
    9272:	482f      	ldr	r0, [pc, #188]	; (9330 <main+0x20c>)
    9274:	47c8      	blx	r9
		grid_led_set_mid(&grid_led_state, i, 0, r[i%4]*40, g[i%4]*40, b[i%4]*40);
    9276:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    927a:	00db      	lsls	r3, r3, #3
    927c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    9280:	00d2      	lsls	r2, r2, #3
    9282:	b2d2      	uxtb	r2, r2
    9284:	9201      	str	r2, [sp, #4]
    9286:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    928a:	00d2      	lsls	r2, r2, #3
    928c:	b2d2      	uxtb	r2, r2
    928e:	9200      	str	r2, [sp, #0]
    9290:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    9294:	2200      	movs	r2, #0
    9296:	4631      	mov	r1, r6
    9298:	4825      	ldr	r0, [pc, #148]	; (9330 <main+0x20c>)
    929a:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 9358 <main+0x234>
    929e:	47d8      	blx	fp
		grid_led_set_max(&grid_led_state, i, 0, r[i%4]*127, g[i%4]*127, b[i%4]*127);
    92a0:	ebc7 17c7 	rsb	r7, r7, r7, lsl #7
    92a4:	ebc5 15c5 	rsb	r5, r5, r5, lsl #7
    92a8:	b2ed      	uxtb	r5, r5
    92aa:	9501      	str	r5, [sp, #4]
    92ac:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
    92b0:	b2e4      	uxtb	r4, r4
    92b2:	9400      	str	r4, [sp, #0]
    92b4:	b2fb      	uxtb	r3, r7
    92b6:	2200      	movs	r2, #0
    92b8:	4631      	mov	r1, r6
    92ba:	481d      	ldr	r0, [pc, #116]	; (9330 <main+0x20c>)
    92bc:	4c1d      	ldr	r4, [pc, #116]	; (9334 <main+0x210>)
    92be:	47a0      	blx	r4
    92c0:	fa5f f688 	uxtb.w	r6, r8
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    92c4:	481a      	ldr	r0, [pc, #104]	; (9330 <main+0x20c>)
    92c6:	47d0      	blx	sl
    92c8:	f108 0801 	add.w	r8, r8, #1
    92cc:	42b0      	cmp	r0, r6
    92ce:	d8b9      	bhi.n	9244 <main+0x120>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    92d0:	4b19      	ldr	r3, [pc, #100]	; (9338 <main+0x214>)
    92d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    92d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    92da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    92de:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    92e2:	4916      	ldr	r1, [pc, #88]	; (933c <main+0x218>)
    92e4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    92e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		
		
		

			
		loopstart = realtime;
    92ec:	f8df 9070 	ldr.w	r9, [pc, #112]	; 9360 <main+0x23c>
    92f0:	e0ac      	b.n	944c <main+0x328>
		/* ========================= PING ============================= */
		if (pingflag_active){
			
			gpio_set_pin_level(PIN_GRID_SYNC_1, true);
			if (pingflag%4 == 0){
				grid_sys_ping(&GRID_PORT_N);
    92f2:	4813      	ldr	r0, [pc, #76]	; (9340 <main+0x21c>)
    92f4:	4b13      	ldr	r3, [pc, #76]	; (9344 <main+0x220>)
    92f6:	4798      	blx	r3
    92f8:	e0b9      	b.n	946e <main+0x34a>
			}
			if (pingflag%4 == 1){
				grid_sys_ping(&GRID_PORT_E);
    92fa:	4813      	ldr	r0, [pc, #76]	; (9348 <main+0x224>)
    92fc:	4b11      	ldr	r3, [pc, #68]	; (9344 <main+0x220>)
    92fe:	4798      	blx	r3
    9300:	e0bc      	b.n	947c <main+0x358>
			}
			if (pingflag%4 == 2){
				grid_sys_ping(&GRID_PORT_S);
    9302:	4812      	ldr	r0, [pc, #72]	; (934c <main+0x228>)
    9304:	4b0f      	ldr	r3, [pc, #60]	; (9344 <main+0x220>)
    9306:	4798      	blx	r3
    9308:	e0bf      	b.n	948a <main+0x366>
			}
			if (pingflag%4 == 3){
				grid_sys_ping(&GRID_PORT_W);
    930a:	4811      	ldr	r0, [pc, #68]	; (9350 <main+0x22c>)
    930c:	4b0d      	ldr	r3, [pc, #52]	; (9344 <main+0x220>)
    930e:	4798      	blx	r3
    9310:	e0c2      	b.n	9498 <main+0x374>
    9312:	bf00      	nop
    9314:	000002d1 	.word	0x000002d1
    9318:	00009fe9 	.word	0x00009fe9
    931c:	0000a991 	.word	0x0000a991
    9320:	00001fe9 	.word	0x00001fe9
    9324:	000090bd 	.word	0x000090bd
    9328:	0000b365 	.word	0x0000b365
    932c:	55555556 	.word	0x55555556
    9330:	20002428 	.word	0x20002428
    9334:	00001bdb 	.word	0x00001bdb
    9338:	41008000 	.word	0x41008000
    933c:	c0000004 	.word	0xc0000004
    9340:	20001248 	.word	0x20001248
    9344:	00003a21 	.word	0x00003a21
    9348:	20002240 	.word	0x20002240
    934c:	20001e74 	.word	0x20001e74
    9350:	20001c7c 	.word	0x20001c7c
    9354:	00001b49 	.word	0x00001b49
    9358:	00001b91 	.word	0x00001b91
    935c:	00001b01 	.word	0x00001b01
    9360:	20000d7c 	.word	0x20000d7c
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
				
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
				
					grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    9364:	2300      	movs	r3, #0
    9366:	9301      	str	r3, [sp, #4]
    9368:	9300      	str	r3, [sp, #0]
    936a:	2201      	movs	r2, #1
    936c:	4621      	mov	r1, r4
    936e:	4872      	ldr	r0, [pc, #456]	; (9538 <main+0x414>)
    9370:	4d72      	ldr	r5, [pc, #456]	; (953c <main+0x418>)
    9372:	47a8      	blx	r5
					grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    9374:	4f72      	ldr	r7, [pc, #456]	; (9540 <main+0x41c>)
    9376:	9803      	ldr	r0, [sp, #12]
    9378:	47b8      	blx	r7
    937a:	4e72      	ldr	r6, [pc, #456]	; (9544 <main+0x420>)
    937c:	2200      	movs	r2, #0
    937e:	4b72      	ldr	r3, [pc, #456]	; (9548 <main+0x424>)
    9380:	47b0      	blx	r6
    9382:	4d72      	ldr	r5, [pc, #456]	; (954c <main+0x428>)
    9384:	47a8      	blx	r5
    9386:	fa5f fb80 	uxtb.w	fp, r0
    938a:	9804      	ldr	r0, [sp, #16]
    938c:	47b8      	blx	r7
    938e:	2200      	movs	r2, #0
    9390:	4b6d      	ldr	r3, [pc, #436]	; (9548 <main+0x424>)
    9392:	47b0      	blx	r6
    9394:	47a8      	blx	r5
    9396:	b2c0      	uxtb	r0, r0
    9398:	9001      	str	r0, [sp, #4]
    939a:	4650      	mov	r0, sl
    939c:	47b8      	blx	r7
    939e:	2200      	movs	r2, #0
    93a0:	4b69      	ldr	r3, [pc, #420]	; (9548 <main+0x424>)
    93a2:	47b0      	blx	r6
    93a4:	47a8      	blx	r5
    93a6:	b2c0      	uxtb	r0, r0
    93a8:	9000      	str	r0, [sp, #0]
    93aa:	465b      	mov	r3, fp
    93ac:	2201      	movs	r2, #1
    93ae:	4621      	mov	r1, r4
    93b0:	4861      	ldr	r0, [pc, #388]	; (9538 <main+0x414>)
    93b2:	4d67      	ldr	r5, [pc, #412]	; (9550 <main+0x42c>)
    93b4:	47a8      	blx	r5
					grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    93b6:	9a04      	ldr	r2, [sp, #16]
    93b8:	9201      	str	r2, [sp, #4]
    93ba:	f8cd a000 	str.w	sl, [sp]
    93be:	9b03      	ldr	r3, [sp, #12]
    93c0:	2201      	movs	r2, #1
    93c2:	4621      	mov	r1, r4
    93c4:	485c      	ldr	r0, [pc, #368]	; (9538 <main+0x414>)
    93c6:	4c63      	ldr	r4, [pc, #396]	; (9554 <main+0x430>)
    93c8:	47a0      	blx	r4
    93ca:	fa5f f488 	uxtb.w	r4, r8
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    93ce:	485a      	ldr	r0, [pc, #360]	; (9538 <main+0x414>)
    93d0:	4b61      	ldr	r3, [pc, #388]	; (9558 <main+0x434>)
    93d2:	4798      	blx	r3
    93d4:	f108 0801 	add.w	r8, r8, #1
    93d8:	42a0      	cmp	r0, r4
    93da:	d8c3      	bhi.n	9364 <main+0x240>
					
				}
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    93dc:	485f      	ldr	r0, [pc, #380]	; (955c <main+0x438>)
    93de:	4b60      	ldr	r3, [pc, #384]	; (9560 <main+0x43c>)
    93e0:	4798      	blx	r3
    93e2:	4607      	mov	r7, r0
    93e4:	2400      	movs	r4, #0
	
			for (uint8_t i=0; i<16; i++){	
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    93e6:	2601      	movs	r6, #1
    93e8:	4d5e      	ldr	r5, [pc, #376]	; (9564 <main+0x440>)
    93ea:	463b      	mov	r3, r7
    93ec:	4632      	mov	r2, r6
    93ee:	b2e1      	uxtb	r1, r4
    93f0:	4851      	ldr	r0, [pc, #324]	; (9538 <main+0x414>)
    93f2:	47a8      	blx	r5
    93f4:	3401      	adds	r4, #1
			for (uint8_t i=0; i<16; i++){	
    93f6:	2c10      	cmp	r4, #16
    93f8:	d1f7      	bne.n	93ea <main+0x2c6>
						



		
		grid_led_tick(&grid_led_state);
    93fa:	484f      	ldr	r0, [pc, #316]	; (9538 <main+0x414>)
    93fc:	4b5a      	ldr	r3, [pc, #360]	; (9568 <main+0x444>)
    93fe:	4798      	blx	r3
		
		while(grid_led_hardware_is_transfer_completed(&grid_led_state) != 1){
    9400:	4c5a      	ldr	r4, [pc, #360]	; (956c <main+0x448>)
    9402:	484d      	ldr	r0, [pc, #308]	; (9538 <main+0x414>)
    9404:	47a0      	blx	r4
    9406:	2801      	cmp	r0, #1
    9408:	d1fb      	bne.n	9402 <main+0x2de>
			
		}
		
		grid_led_render_all(&grid_led_state);
    940a:	484b      	ldr	r0, [pc, #300]	; (9538 <main+0x414>)
    940c:	4b58      	ldr	r3, [pc, #352]	; (9570 <main+0x44c>)
    940e:	4798      	blx	r3
				

					
		grid_led_hardware_start_transfer(&grid_led_state);
    9410:	4849      	ldr	r0, [pc, #292]	; (9538 <main+0x414>)
    9412:	4b58      	ldr	r3, [pc, #352]	; (9574 <main+0x450>)
    9414:	4798      	blx	r3
	
		


		// IDLETASK
		if (realtime>loopstart + RTC1SEC/250){
    9416:	f8d9 3000 	ldr.w	r3, [r9]
    941a:	9905      	ldr	r1, [sp, #20]
    941c:	460a      	mov	r2, r1
    941e:	3241      	adds	r2, #65	; 0x41
    9420:	429a      	cmp	r2, r3
    9422:	d205      	bcs.n	9430 <main+0x30c>
			loopstart+=1;
    9424:	3a40      	subs	r2, #64	; 0x40
    9426:	9205      	str	r2, [sp, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9428:	2280      	movs	r2, #128	; 0x80
    942a:	4b53      	ldr	r3, [pc, #332]	; (9578 <main+0x454>)
    942c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			gpio_set_pin_level(PIN_GRID_SYNC_2, true);	
		}
		
		while(loopstart + RTC1SEC/500 > realtime){
    9430:	9c05      	ldr	r4, [sp, #20]
    9432:	3420      	adds	r4, #32
    9434:	f8d9 3000 	ldr.w	r3, [r9]
    9438:	429c      	cmp	r4, r3
    943a:	d907      	bls.n	944c <main+0x328>
			delay_us(10);
    943c:	260a      	movs	r6, #10
    943e:	4d4f      	ldr	r5, [pc, #316]	; (957c <main+0x458>)
    9440:	4630      	mov	r0, r6
    9442:	47a8      	blx	r5
		while(loopstart + RTC1SEC/500 > realtime){
    9444:	f8d9 3000 	ldr.w	r3, [r9]
    9448:	42a3      	cmp	r3, r4
    944a:	d3f9      	bcc.n	9440 <main+0x31c>
		loopstart = realtime;
    944c:	f8d9 3000 	ldr.w	r3, [r9]
    9450:	9305      	str	r3, [sp, #20]
		if (pingflag_active){
    9452:	f899 3005 	ldrb.w	r3, [r9, #5]
    9456:	b33b      	cbz	r3, 94a8 <main+0x384>
    9458:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    945c:	4b46      	ldr	r3, [pc, #280]	; (9578 <main+0x454>)
    945e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			if (pingflag%4 == 0){
    9462:	f899 3004 	ldrb.w	r3, [r9, #4]
    9466:	f013 0f03 	tst.w	r3, #3
    946a:	f43f af42 	beq.w	92f2 <main+0x1ce>
			if (pingflag%4 == 1){
    946e:	f899 3004 	ldrb.w	r3, [r9, #4]
    9472:	f003 0303 	and.w	r3, r3, #3
    9476:	2b01      	cmp	r3, #1
    9478:	f43f af3f 	beq.w	92fa <main+0x1d6>
			if (pingflag%4 == 2){
    947c:	f899 3004 	ldrb.w	r3, [r9, #4]
    9480:	f003 0303 	and.w	r3, r3, #3
    9484:	2b02      	cmp	r3, #2
    9486:	f43f af3c 	beq.w	9302 <main+0x1de>
			if (pingflag%4 == 3){
    948a:	f899 3004 	ldrb.w	r3, [r9, #4]
    948e:	f003 0303 	and.w	r3, r3, #3
    9492:	2b03      	cmp	r3, #3
    9494:	f43f af39 	beq.w	930a <main+0x1e6>
			pingflag_active = 0;
    9498:	2300      	movs	r3, #0
    949a:	f889 3005 	strb.w	r3, [r9, #5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    949e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    94a2:	4b35      	ldr	r3, [pc, #212]	; (9578 <main+0x454>)
    94a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		grid_port_receive_complete_task(&GRID_PORT_N);
    94a8:	4835      	ldr	r0, [pc, #212]	; (9580 <main+0x45c>)
    94aa:	4c36      	ldr	r4, [pc, #216]	; (9584 <main+0x460>)
    94ac:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_E);
    94ae:	4836      	ldr	r0, [pc, #216]	; (9588 <main+0x464>)
    94b0:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_S);
    94b2:	4836      	ldr	r0, [pc, #216]	; (958c <main+0x468>)
    94b4:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_W);
    94b6:	4836      	ldr	r0, [pc, #216]	; (9590 <main+0x46c>)
    94b8:	47a0      	blx	r4
		grid_port_process_ui(&GRID_PORT_U);		
    94ba:	4d36      	ldr	r5, [pc, #216]	; (9594 <main+0x470>)
    94bc:	4628      	mov	r0, r5
    94be:	4b36      	ldr	r3, [pc, #216]	; (9598 <main+0x474>)
    94c0:	4798      	blx	r3
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    94c2:	4628      	mov	r0, r5
    94c4:	4c35      	ldr	r4, [pc, #212]	; (959c <main+0x478>)
    94c6:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_N);		
    94c8:	482d      	ldr	r0, [pc, #180]	; (9580 <main+0x45c>)
    94ca:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    94cc:	482e      	ldr	r0, [pc, #184]	; (9588 <main+0x464>)
    94ce:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    94d0:	482e      	ldr	r0, [pc, #184]	; (958c <main+0x468>)
    94d2:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);	
    94d4:	482e      	ldr	r0, [pc, #184]	; (9590 <main+0x46c>)
    94d6:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_N);
    94d8:	4829      	ldr	r0, [pc, #164]	; (9580 <main+0x45c>)
    94da:	4c31      	ldr	r4, [pc, #196]	; (95a0 <main+0x47c>)
    94dc:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    94de:	482a      	ldr	r0, [pc, #168]	; (9588 <main+0x464>)
    94e0:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    94e2:	482a      	ldr	r0, [pc, #168]	; (958c <main+0x468>)
    94e4:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    94e6:	482a      	ldr	r0, [pc, #168]	; (9590 <main+0x46c>)
    94e8:	47a0      	blx	r4
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    94ea:	482e      	ldr	r0, [pc, #184]	; (95a4 <main+0x480>)
    94ec:	4b2e      	ldr	r3, [pc, #184]	; (95a8 <main+0x484>)
    94ee:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    94f0:	4628      	mov	r0, r5
    94f2:	4b2e      	ldr	r3, [pc, #184]	; (95ac <main+0x488>)
    94f4:	4798      	blx	r3
		if (grid_sys_state.alert_state){
    94f6:	4b19      	ldr	r3, [pc, #100]	; (955c <main+0x438>)
    94f8:	889b      	ldrh	r3, [r3, #4]
    94fa:	2b00      	cmp	r3, #0
    94fc:	f43f af7d 	beq.w	93fa <main+0x2d6>
			grid_sys_state.alert_state--;
    9500:	4816      	ldr	r0, [pc, #88]	; (955c <main+0x438>)
    9502:	3b01      	subs	r3, #1
    9504:	8083      	strh	r3, [r0, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    9506:	4b2a      	ldr	r3, [pc, #168]	; (95b0 <main+0x48c>)
    9508:	4798      	blx	r3
    950a:	2800      	cmp	r0, #0
    950c:	f43f af66 	beq.w	93dc <main+0x2b8>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    9510:	4c12      	ldr	r4, [pc, #72]	; (955c <main+0x438>)
    9512:	4620      	mov	r0, r4
    9514:	4b27      	ldr	r3, [pc, #156]	; (95b4 <main+0x490>)
    9516:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    9518:	4620      	mov	r0, r4
    951a:	4b27      	ldr	r3, [pc, #156]	; (95b8 <main+0x494>)
    951c:	4798      	blx	r3
    951e:	9003      	str	r0, [sp, #12]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    9520:	4620      	mov	r0, r4
    9522:	4b26      	ldr	r3, [pc, #152]	; (95bc <main+0x498>)
    9524:	4798      	blx	r3
    9526:	4682      	mov	sl, r0
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    9528:	4620      	mov	r0, r4
    952a:	4b25      	ldr	r3, [pc, #148]	; (95c0 <main+0x49c>)
    952c:	4798      	blx	r3
    952e:	9004      	str	r0, [sp, #16]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9530:	f04f 0800 	mov.w	r8, #0
    9534:	e749      	b.n	93ca <main+0x2a6>
    9536:	bf00      	nop
    9538:	20002428 	.word	0x20002428
    953c:	00001b49 	.word	0x00001b49
    9540:	0000ac5d 	.word	0x0000ac5d
    9544:	0000ad29 	.word	0x0000ad29
    9548:	3fe00000 	.word	0x3fe00000
    954c:	0000b14d 	.word	0x0000b14d
    9550:	00001b91 	.word	0x00001b91
    9554:	00001bdb 	.word	0x00001bdb
    9558:	00001b01 	.word	0x00001b01
    955c:	2000165c 	.word	0x2000165c
    9560:	000036d9 	.word	0x000036d9
    9564:	00001c25 	.word	0x00001c25
    9568:	00001b05 	.word	0x00001b05
    956c:	00001f7d 	.word	0x00001f7d
    9570:	00001ef5 	.word	0x00001ef5
    9574:	00001f51 	.word	0x00001f51
    9578:	41008000 	.word	0x41008000
    957c:	00004129 	.word	0x00004129
    9580:	20001248 	.word	0x20001248
    9584:	0000908d 	.word	0x0000908d
    9588:	20002240 	.word	0x20002240
    958c:	20001e74 	.word	0x20001e74
    9590:	20001c7c 	.word	0x20001c7c
    9594:	2000146c 	.word	0x2000146c
    9598:	00003bc9 	.word	0x00003bc9
    959c:	00001479 	.word	0x00001479
    95a0:	00001a21 	.word	0x00001a21
    95a4:	2000205c 	.word	0x2000205c
    95a8:	00001601 	.word	0x00001601
    95ac:	000019dd 	.word	0x000019dd
    95b0:	000036cd 	.word	0x000036cd
    95b4:	000036d1 	.word	0x000036d1
    95b8:	0000373f 	.word	0x0000373f
    95bc:	00003743 	.word	0x00003743
    95c0:	00003747 	.word	0x00003747

000095c4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    95c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    95c6:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    95c8:	780b      	ldrb	r3, [r1, #0]
    95ca:	f3c3 1441 	ubfx	r4, r3, #5, #2
    95ce:	2c01      	cmp	r4, #1
    95d0:	d15e      	bne.n	9690 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    95d2:	888c      	ldrh	r4, [r1, #4]
    95d4:	4d35      	ldr	r5, [pc, #212]	; (96ac <cdcdf_acm_req+0xe8>)
    95d6:	782d      	ldrb	r5, [r5, #0]
    95d8:	42a5      	cmp	r5, r4
    95da:	d003      	beq.n	95e4 <cdcdf_acm_req+0x20>
    95dc:	4d33      	ldr	r5, [pc, #204]	; (96ac <cdcdf_acm_req+0xe8>)
    95de:	786d      	ldrb	r5, [r5, #1]
    95e0:	42a5      	cmp	r5, r4
    95e2:	d158      	bne.n	9696 <cdcdf_acm_req+0xd2>
    95e4:	4616      	mov	r6, r2
    95e6:	460c      	mov	r4, r1
    95e8:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    95ea:	f013 0f80 	tst.w	r3, #128	; 0x80
    95ee:	d10c      	bne.n	960a <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    95f0:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    95f2:	4b2f      	ldr	r3, [pc, #188]	; (96b0 <cdcdf_acm_req+0xec>)
    95f4:	4798      	blx	r3
    95f6:	4601      	mov	r1, r0
	switch (req->bRequest) {
    95f8:	7863      	ldrb	r3, [r4, #1]
    95fa:	2b20      	cmp	r3, #32
    95fc:	d013      	beq.n	9626 <cdcdf_acm_req+0x62>
    95fe:	2b22      	cmp	r3, #34	; 0x22
    9600:	d032      	beq.n	9668 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    9602:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    9606:	b003      	add	sp, #12
    9608:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    960a:	2a01      	cmp	r2, #1
    960c:	d046      	beq.n	969c <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    960e:	784b      	ldrb	r3, [r1, #1]
    9610:	2b21      	cmp	r3, #33	; 0x21
    9612:	d145      	bne.n	96a0 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9614:	88cb      	ldrh	r3, [r1, #6]
    9616:	2b07      	cmp	r3, #7
    9618:	d145      	bne.n	96a6 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    961a:	2300      	movs	r3, #0
    961c:	2207      	movs	r2, #7
    961e:	4925      	ldr	r1, [pc, #148]	; (96b4 <cdcdf_acm_req+0xf0>)
    9620:	4c25      	ldr	r4, [pc, #148]	; (96b8 <cdcdf_acm_req+0xf4>)
    9622:	47a0      	blx	r4
    9624:	e7ef      	b.n	9606 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9626:	2f07      	cmp	r7, #7
    9628:	d12b      	bne.n	9682 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    962a:	b1be      	cbz	r6, 965c <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    962c:	6800      	ldr	r0, [r0, #0]
    962e:	9000      	str	r0, [sp, #0]
    9630:	888a      	ldrh	r2, [r1, #4]
    9632:	798b      	ldrb	r3, [r1, #6]
    9634:	f8ad 2004 	strh.w	r2, [sp, #4]
    9638:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    963c:	4b1b      	ldr	r3, [pc, #108]	; (96ac <cdcdf_acm_req+0xe8>)
    963e:	691b      	ldr	r3, [r3, #16]
    9640:	b113      	cbz	r3, 9648 <cdcdf_acm_req+0x84>
    9642:	4668      	mov	r0, sp
    9644:	4798      	blx	r3
    9646:	b1f8      	cbz	r0, 9688 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    9648:	4b18      	ldr	r3, [pc, #96]	; (96ac <cdcdf_acm_req+0xe8>)
    964a:	aa02      	add	r2, sp, #8
    964c:	e912 0003 	ldmdb	r2, {r0, r1}
    9650:	6098      	str	r0, [r3, #8]
    9652:	8199      	strh	r1, [r3, #12]
    9654:	0c09      	lsrs	r1, r1, #16
    9656:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    9658:	2000      	movs	r0, #0
    965a:	e7d4      	b.n	9606 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    965c:	2300      	movs	r3, #0
    965e:	2207      	movs	r2, #7
    9660:	4628      	mov	r0, r5
    9662:	4c15      	ldr	r4, [pc, #84]	; (96b8 <cdcdf_acm_req+0xf4>)
    9664:	47a0      	blx	r4
    9666:	e7ce      	b.n	9606 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    9668:	2300      	movs	r3, #0
    966a:	461a      	mov	r2, r3
    966c:	4619      	mov	r1, r3
    966e:	4618      	mov	r0, r3
    9670:	4d11      	ldr	r5, [pc, #68]	; (96b8 <cdcdf_acm_req+0xf4>)
    9672:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    9674:	4b0d      	ldr	r3, [pc, #52]	; (96ac <cdcdf_acm_req+0xe8>)
    9676:	695b      	ldr	r3, [r3, #20]
    9678:	b143      	cbz	r3, 968c <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    967a:	8860      	ldrh	r0, [r4, #2]
    967c:	4798      	blx	r3
		return ERR_NONE;
    967e:	2000      	movs	r0, #0
    9680:	e7c1      	b.n	9606 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9682:	f04f 30ff 	mov.w	r0, #4294967295
    9686:	e7be      	b.n	9606 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    9688:	2000      	movs	r0, #0
    968a:	e7bc      	b.n	9606 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    968c:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    968e:	e7ba      	b.n	9606 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9690:	f06f 0009 	mvn.w	r0, #9
    9694:	e7b7      	b.n	9606 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9696:	f06f 0009 	mvn.w	r0, #9
    969a:	e7b4      	b.n	9606 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    969c:	2000      	movs	r0, #0
    969e:	e7b2      	b.n	9606 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    96a0:	f06f 000c 	mvn.w	r0, #12
    96a4:	e7af      	b.n	9606 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    96a6:	f04f 30ff 	mov.w	r0, #4294967295
    96aa:	e7ac      	b.n	9606 <cdcdf_acm_req+0x42>
    96ac:	20000dc0 	.word	0x20000dc0
    96b0:	0000a70d 	.word	0x0000a70d
    96b4:	20000dc8 	.word	0x20000dc8
    96b8:	0000a1e9 	.word	0x0000a1e9

000096bc <cdcdf_acm_ctrl>:
{
    96bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96c0:	b083      	sub	sp, #12
    96c2:	4616      	mov	r6, r2
	switch (ctrl) {
    96c4:	2901      	cmp	r1, #1
    96c6:	d066      	beq.n	9796 <cdcdf_acm_ctrl+0xda>
    96c8:	b141      	cbz	r1, 96dc <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    96ca:	2902      	cmp	r1, #2
    96cc:	bf0c      	ite	eq
    96ce:	f06f 001a 	mvneq.w	r0, #26
    96d2:	f06f 000c 	mvnne.w	r0, #12
}
    96d6:	b003      	add	sp, #12
    96d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    96dc:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    96e0:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    96e2:	2800      	cmp	r0, #0
    96e4:	f000 8085 	beq.w	97f2 <cdcdf_acm_ctrl+0x136>
    96e8:	f10a 3bff 	add.w	fp, sl, #4294967295
    96ec:	f10a 0301 	add.w	r3, sl, #1
    96f0:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    96f2:	4f46      	ldr	r7, [pc, #280]	; (980c <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    96f4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 981c <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    96f8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 9820 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    96fc:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    96fe:	7943      	ldrb	r3, [r0, #5]
    9700:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9704:	2b02      	cmp	r3, #2
    9706:	d002      	beq.n	970e <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    9708:	f06f 0009 	mvn.w	r0, #9
    970c:	e7e3      	b.n	96d6 <cdcdf_acm_ctrl+0x1a>
    970e:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9712:	f89b 3000 	ldrb.w	r3, [fp]
    9716:	429a      	cmp	r2, r3
    9718:	d06e      	beq.n	97f8 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    971a:	2bff      	cmp	r3, #255	; 0xff
    971c:	d16f      	bne.n	97fe <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    971e:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    9722:	2205      	movs	r2, #5
    9724:	6871      	ldr	r1, [r6, #4]
    9726:	4b3a      	ldr	r3, [pc, #232]	; (9810 <cdcdf_acm_ctrl+0x154>)
    9728:	4798      	blx	r3
		while (NULL != ep) {
    972a:	4604      	mov	r4, r0
    972c:	b1f8      	cbz	r0, 976e <cdcdf_acm_ctrl+0xb2>
    972e:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    9732:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    9734:	7963      	ldrb	r3, [r4, #5]
    9736:	7922      	ldrb	r2, [r4, #4]
    9738:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    973c:	b292      	uxth	r2, r2
    973e:	78e1      	ldrb	r1, [r4, #3]
    9740:	4628      	mov	r0, r5
    9742:	47b8      	blx	r7
    9744:	2800      	cmp	r0, #0
    9746:	d15d      	bne.n	9804 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9748:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    974c:	bf14      	ite	ne
    974e:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9752:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    9756:	4628      	mov	r0, r5
    9758:	47c8      	blx	r9
			desc->sod = ep;
    975a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    975c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    975e:	6871      	ldr	r1, [r6, #4]
    9760:	4420      	add	r0, r4
    9762:	47c0      	blx	r8
		while (NULL != ep) {
    9764:	4604      	mov	r4, r0
    9766:	2800      	cmp	r0, #0
    9768:	d1e3      	bne.n	9732 <cdcdf_acm_ctrl+0x76>
    976a:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    976e:	6833      	ldr	r3, [r6, #0]
    9770:	7818      	ldrb	r0, [r3, #0]
    9772:	2204      	movs	r2, #4
    9774:	6871      	ldr	r1, [r6, #4]
    9776:	4418      	add	r0, r3
    9778:	4b25      	ldr	r3, [pc, #148]	; (9810 <cdcdf_acm_ctrl+0x154>)
    977a:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    977c:	9b00      	ldr	r3, [sp, #0]
    977e:	459b      	cmp	fp, r3
    9780:	d004      	beq.n	978c <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    9782:	2800      	cmp	r0, #0
    9784:	d1ba      	bne.n	96fc <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    9786:	f06f 0009 	mvn.w	r0, #9
    978a:	e7a4      	b.n	96d6 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    978c:	2201      	movs	r2, #1
    978e:	4b21      	ldr	r3, [pc, #132]	; (9814 <cdcdf_acm_ctrl+0x158>)
    9790:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    9792:	2000      	movs	r0, #0
    9794:	e79f      	b.n	96d6 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9796:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    9798:	b142      	cbz	r2, 97ac <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    979a:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    979c:	795b      	ldrb	r3, [r3, #5]
    979e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    97a2:	2b02      	cmp	r3, #2
    97a4:	d002      	beq.n	97ac <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    97a6:	f06f 0009 	mvn.w	r0, #9
    97aa:	e794      	b.n	96d6 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    97ac:	7823      	ldrb	r3, [r4, #0]
    97ae:	2bff      	cmp	r3, #255	; 0xff
    97b0:	d008      	beq.n	97c4 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    97b2:	23ff      	movs	r3, #255	; 0xff
    97b4:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    97b6:	78a0      	ldrb	r0, [r4, #2]
    97b8:	4298      	cmp	r0, r3
    97ba:	d003      	beq.n	97c4 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    97bc:	4b16      	ldr	r3, [pc, #88]	; (9818 <cdcdf_acm_ctrl+0x15c>)
    97be:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    97c0:	23ff      	movs	r3, #255	; 0xff
    97c2:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    97c4:	7863      	ldrb	r3, [r4, #1]
    97c6:	2bff      	cmp	r3, #255	; 0xff
    97c8:	d008      	beq.n	97dc <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    97ca:	23ff      	movs	r3, #255	; 0xff
    97cc:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    97ce:	78e0      	ldrb	r0, [r4, #3]
    97d0:	4298      	cmp	r0, r3
    97d2:	d003      	beq.n	97dc <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    97d4:	4b10      	ldr	r3, [pc, #64]	; (9818 <cdcdf_acm_ctrl+0x15c>)
    97d6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    97d8:	23ff      	movs	r3, #255	; 0xff
    97da:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    97dc:	7920      	ldrb	r0, [r4, #4]
    97de:	28ff      	cmp	r0, #255	; 0xff
    97e0:	d003      	beq.n	97ea <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    97e2:	4b0d      	ldr	r3, [pc, #52]	; (9818 <cdcdf_acm_ctrl+0x15c>)
    97e4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    97e6:	23ff      	movs	r3, #255	; 0xff
    97e8:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    97ea:	2000      	movs	r0, #0
    97ec:	4b09      	ldr	r3, [pc, #36]	; (9814 <cdcdf_acm_ctrl+0x158>)
    97ee:	7158      	strb	r0, [r3, #5]
    97f0:	e771      	b.n	96d6 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    97f2:	f06f 0009 	mvn.w	r0, #9
    97f6:	e76e      	b.n	96d6 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    97f8:	f06f 0011 	mvn.w	r0, #17
    97fc:	e76b      	b.n	96d6 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    97fe:	f06f 001b 	mvn.w	r0, #27
    9802:	e768      	b.n	96d6 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    9804:	f06f 0013 	mvn.w	r0, #19
    9808:	e765      	b.n	96d6 <cdcdf_acm_ctrl+0x1a>
    980a:	bf00      	nop
    980c:	00004fbd 	.word	0x00004fbd
    9810:	0000a72d 	.word	0x0000a72d
    9814:	20000dc0 	.word	0x20000dc0
    9818:	00005025 	.word	0x00005025
    981c:	00005051 	.word	0x00005051
    9820:	0000a767 	.word	0x0000a767

00009824 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    9824:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9826:	4b0a      	ldr	r3, [pc, #40]	; (9850 <cdcdf_acm_init+0x2c>)
    9828:	4798      	blx	r3
    982a:	2801      	cmp	r0, #1
    982c:	d80c      	bhi.n	9848 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    982e:	4809      	ldr	r0, [pc, #36]	; (9854 <cdcdf_acm_init+0x30>)
    9830:	4b09      	ldr	r3, [pc, #36]	; (9858 <cdcdf_acm_init+0x34>)
    9832:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    9834:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    9836:	3018      	adds	r0, #24
    9838:	4b08      	ldr	r3, [pc, #32]	; (985c <cdcdf_acm_init+0x38>)
    983a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    983c:	4908      	ldr	r1, [pc, #32]	; (9860 <cdcdf_acm_init+0x3c>)
    983e:	2001      	movs	r0, #1
    9840:	4b08      	ldr	r3, [pc, #32]	; (9864 <cdcdf_acm_init+0x40>)
    9842:	4798      	blx	r3
	return ERR_NONE;
    9844:	2000      	movs	r0, #0
    9846:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9848:	f06f 0010 	mvn.w	r0, #16
}
    984c:	bd08      	pop	{r3, pc}
    984e:	bf00      	nop
    9850:	0000a719 	.word	0x0000a719
    9854:	20000dc0 	.word	0x20000dc0
    9858:	000096bd 	.word	0x000096bd
    985c:	0000a6b9 	.word	0x0000a6b9
    9860:	20000398 	.word	0x20000398
    9864:	0000a625 	.word	0x0000a625

00009868 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    9868:	4b07      	ldr	r3, [pc, #28]	; (9888 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    986a:	795b      	ldrb	r3, [r3, #5]
    986c:	b143      	cbz	r3, 9880 <cdcdf_acm_write+0x18>
{
    986e:	b510      	push	{r4, lr}
    9870:	460a      	mov	r2, r1
    9872:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    9874:	2301      	movs	r3, #1
    9876:	4804      	ldr	r0, [pc, #16]	; (9888 <cdcdf_acm_write+0x20>)
    9878:	78c0      	ldrb	r0, [r0, #3]
    987a:	4c04      	ldr	r4, [pc, #16]	; (988c <cdcdf_acm_write+0x24>)
    987c:	47a0      	blx	r4
    987e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    9880:	f06f 0010 	mvn.w	r0, #16
    9884:	4770      	bx	lr
    9886:	bf00      	nop
    9888:	20000dc0 	.word	0x20000dc0
    988c:	0000a1e9 	.word	0x0000a1e9

00009890 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9890:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9892:	780b      	ldrb	r3, [r1, #0]
    9894:	2b81      	cmp	r3, #129	; 0x81
    9896:	d010      	beq.n	98ba <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9898:	f3c3 1341 	ubfx	r3, r3, #5, #2
    989c:	2b01      	cmp	r3, #1
    989e:	d13f      	bne.n	9920 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    98a0:	888a      	ldrh	r2, [r1, #4]
    98a2:	4b22      	ldr	r3, [pc, #136]	; (992c <hid_keyboard_req+0x9c>)
    98a4:	7b1b      	ldrb	r3, [r3, #12]
    98a6:	429a      	cmp	r2, r3
    98a8:	d13d      	bne.n	9926 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    98aa:	784b      	ldrb	r3, [r1, #1]
    98ac:	2b03      	cmp	r3, #3
    98ae:	d028      	beq.n	9902 <hid_keyboard_req+0x72>
    98b0:	2b0b      	cmp	r3, #11
    98b2:	d02c      	beq.n	990e <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    98b4:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    98b8:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    98ba:	784b      	ldrb	r3, [r1, #1]
    98bc:	2b06      	cmp	r3, #6
    98be:	d002      	beq.n	98c6 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    98c0:	f06f 0009 	mvn.w	r0, #9
    98c4:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    98c6:	888a      	ldrh	r2, [r1, #4]
    98c8:	4b18      	ldr	r3, [pc, #96]	; (992c <hid_keyboard_req+0x9c>)
    98ca:	7b1b      	ldrb	r3, [r3, #12]
    98cc:	429a      	cmp	r2, r3
    98ce:	d002      	beq.n	98d6 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    98d0:	f06f 0009 	mvn.w	r0, #9
    98d4:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    98d6:	884b      	ldrh	r3, [r1, #2]
    98d8:	0a1b      	lsrs	r3, r3, #8
    98da:	2b21      	cmp	r3, #33	; 0x21
    98dc:	d004      	beq.n	98e8 <hid_keyboard_req+0x58>
    98de:	2b22      	cmp	r3, #34	; 0x22
    98e0:	d009      	beq.n	98f6 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    98e2:	f06f 000c 	mvn.w	r0, #12
    98e6:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    98e8:	4b10      	ldr	r3, [pc, #64]	; (992c <hid_keyboard_req+0x9c>)
    98ea:	6819      	ldr	r1, [r3, #0]
    98ec:	2300      	movs	r3, #0
    98ee:	780a      	ldrb	r2, [r1, #0]
    98f0:	4c0f      	ldr	r4, [pc, #60]	; (9930 <hid_keyboard_req+0xa0>)
    98f2:	47a0      	blx	r4
    98f4:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    98f6:	2300      	movs	r3, #0
    98f8:	223b      	movs	r2, #59	; 0x3b
    98fa:	490e      	ldr	r1, [pc, #56]	; (9934 <hid_keyboard_req+0xa4>)
    98fc:	4c0c      	ldr	r4, [pc, #48]	; (9930 <hid_keyboard_req+0xa0>)
    98fe:	47a0      	blx	r4
    9900:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    9902:	2300      	movs	r3, #0
    9904:	2201      	movs	r2, #1
    9906:	490c      	ldr	r1, [pc, #48]	; (9938 <hid_keyboard_req+0xa8>)
    9908:	4c09      	ldr	r4, [pc, #36]	; (9930 <hid_keyboard_req+0xa0>)
    990a:	47a0      	blx	r4
    990c:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    990e:	884a      	ldrh	r2, [r1, #2]
    9910:	4b06      	ldr	r3, [pc, #24]	; (992c <hid_keyboard_req+0x9c>)
    9912:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    9914:	2300      	movs	r3, #0
    9916:	461a      	mov	r2, r3
    9918:	4619      	mov	r1, r3
    991a:	4c05      	ldr	r4, [pc, #20]	; (9930 <hid_keyboard_req+0xa0>)
    991c:	47a0      	blx	r4
    991e:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9920:	f06f 0009 	mvn.w	r0, #9
    9924:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9926:	f06f 0009 	mvn.w	r0, #9
    992a:	bd10      	pop	{r4, pc}
    992c:	20000de4 	.word	0x20000de4
    9930:	0000a1e9 	.word	0x0000a1e9
    9934:	0000c210 	.word	0x0000c210
    9938:	20000df3 	.word	0x20000df3

0000993c <hid_keyboard_ctrl>:
{
    993c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9940:	4614      	mov	r4, r2
	switch (ctrl) {
    9942:	2901      	cmp	r1, #1
    9944:	d050      	beq.n	99e8 <hid_keyboard_ctrl+0xac>
    9946:	b141      	cbz	r1, 995a <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    9948:	2902      	cmp	r1, #2
    994a:	bf0c      	ite	eq
    994c:	f06f 051a 	mvneq.w	r5, #26
    9950:	f06f 050c 	mvnne.w	r5, #12
}
    9954:	4628      	mov	r0, r5
    9956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    995a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    995e:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    9960:	2b00      	cmp	r3, #0
    9962:	d05e      	beq.n	9a22 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    9964:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    9966:	795b      	ldrb	r3, [r3, #5]
    9968:	2b03      	cmp	r3, #3
    996a:	d15d      	bne.n	9a28 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    996c:	f898 300c 	ldrb.w	r3, [r8, #12]
    9970:	429a      	cmp	r2, r3
    9972:	d05c      	beq.n	9a2e <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    9974:	2bff      	cmp	r3, #255	; 0xff
    9976:	d15d      	bne.n	9a34 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    9978:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    997c:	6823      	ldr	r3, [r4, #0]
    997e:	7818      	ldrb	r0, [r3, #0]
    9980:	2221      	movs	r2, #33	; 0x21
    9982:	6861      	ldr	r1, [r4, #4]
    9984:	4418      	add	r0, r3
    9986:	4b31      	ldr	r3, [pc, #196]	; (9a4c <hid_keyboard_ctrl+0x110>)
    9988:	4798      	blx	r3
    998a:	4b31      	ldr	r3, [pc, #196]	; (9a50 <hid_keyboard_ctrl+0x114>)
    998c:	6018      	str	r0, [r3, #0]
    998e:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9990:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 9a58 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9994:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9a5c <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    9998:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9a60 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    999c:	6823      	ldr	r3, [r4, #0]
    999e:	7818      	ldrb	r0, [r3, #0]
    99a0:	6861      	ldr	r1, [r4, #4]
    99a2:	4418      	add	r0, r3
    99a4:	47c8      	blx	r9
		desc->sod = ep;
    99a6:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    99a8:	2800      	cmp	r0, #0
    99aa:	d046      	beq.n	9a3a <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    99ac:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    99ae:	7943      	ldrb	r3, [r0, #5]
    99b0:	7902      	ldrb	r2, [r0, #4]
    99b2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    99b6:	b292      	uxth	r2, r2
    99b8:	78c1      	ldrb	r1, [r0, #3]
    99ba:	4638      	mov	r0, r7
    99bc:	47d0      	blx	sl
    99be:	4605      	mov	r5, r0
    99c0:	2800      	cmp	r0, #0
    99c2:	d13d      	bne.n	9a40 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    99c4:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    99c8:	bf14      	ite	ne
    99ca:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    99ce:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    99d2:	4638      	mov	r0, r7
    99d4:	47d8      	blx	fp
    99d6:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    99d8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    99dc:	d1de      	bne.n	999c <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    99de:	4b1c      	ldr	r3, [pc, #112]	; (9a50 <hid_keyboard_ctrl+0x114>)
    99e0:	2201      	movs	r2, #1
    99e2:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    99e4:	741a      	strb	r2, [r3, #16]
    99e6:	e7b5      	b.n	9954 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    99e8:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    99ea:	b11a      	cbz	r2, 99f4 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    99ec:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    99ee:	795b      	ldrb	r3, [r3, #5]
    99f0:	2b03      	cmp	r3, #3
    99f2:	d128      	bne.n	9a46 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    99f4:	7b2b      	ldrb	r3, [r5, #12]
    99f6:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    99f8:	bf1c      	itt	ne
    99fa:	23ff      	movne	r3, #255	; 0xff
    99fc:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    99fe:	7b68      	ldrb	r0, [r5, #13]
    9a00:	28ff      	cmp	r0, #255	; 0xff
    9a02:	d003      	beq.n	9a0c <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    9a04:	4b13      	ldr	r3, [pc, #76]	; (9a54 <hid_keyboard_ctrl+0x118>)
    9a06:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9a08:	23ff      	movs	r3, #255	; 0xff
    9a0a:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    9a0c:	7ba8      	ldrb	r0, [r5, #14]
    9a0e:	28ff      	cmp	r0, #255	; 0xff
    9a10:	d003      	beq.n	9a1a <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    9a12:	4b10      	ldr	r3, [pc, #64]	; (9a54 <hid_keyboard_ctrl+0x118>)
    9a14:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9a16:	23ff      	movs	r3, #255	; 0xff
    9a18:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    9a1a:	2500      	movs	r5, #0
    9a1c:	4b0c      	ldr	r3, [pc, #48]	; (9a50 <hid_keyboard_ctrl+0x114>)
    9a1e:	741d      	strb	r5, [r3, #16]
    9a20:	e798      	b.n	9954 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    9a22:	f06f 0509 	mvn.w	r5, #9
    9a26:	e795      	b.n	9954 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    9a28:	f06f 0509 	mvn.w	r5, #9
    9a2c:	e792      	b.n	9954 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    9a2e:	f06f 0511 	mvn.w	r5, #17
    9a32:	e78f      	b.n	9954 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    9a34:	f06f 051b 	mvn.w	r5, #27
    9a38:	e78c      	b.n	9954 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    9a3a:	f06f 0509 	mvn.w	r5, #9
    9a3e:	e789      	b.n	9954 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    9a40:	f06f 0513 	mvn.w	r5, #19
    9a44:	e786      	b.n	9954 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    9a46:	f06f 0509 	mvn.w	r5, #9
    9a4a:	e783      	b.n	9954 <hid_keyboard_ctrl+0x18>
    9a4c:	0000a72d 	.word	0x0000a72d
    9a50:	20000de4 	.word	0x20000de4
    9a54:	00005025 	.word	0x00005025
    9a58:	0000a767 	.word	0x0000a767
    9a5c:	00004fbd 	.word	0x00004fbd
    9a60:	00005051 	.word	0x00005051

00009a64 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    9a64:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9a66:	4b0a      	ldr	r3, [pc, #40]	; (9a90 <hiddf_keyboard_init+0x2c>)
    9a68:	4798      	blx	r3
    9a6a:	2801      	cmp	r0, #1
    9a6c:	d80c      	bhi.n	9a88 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    9a6e:	4809      	ldr	r0, [pc, #36]	; (9a94 <hiddf_keyboard_init+0x30>)
    9a70:	4b09      	ldr	r3, [pc, #36]	; (9a98 <hiddf_keyboard_init+0x34>)
    9a72:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    9a74:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    9a76:	3014      	adds	r0, #20
    9a78:	4b08      	ldr	r3, [pc, #32]	; (9a9c <hiddf_keyboard_init+0x38>)
    9a7a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    9a7c:	4908      	ldr	r1, [pc, #32]	; (9aa0 <hiddf_keyboard_init+0x3c>)
    9a7e:	2001      	movs	r0, #1
    9a80:	4b08      	ldr	r3, [pc, #32]	; (9aa4 <hiddf_keyboard_init+0x40>)
    9a82:	4798      	blx	r3
	return ERR_NONE;
    9a84:	2000      	movs	r0, #0
    9a86:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9a88:	f06f 0010 	mvn.w	r0, #16
}
    9a8c:	bd08      	pop	{r3, pc}
    9a8e:	bf00      	nop
    9a90:	0000a719 	.word	0x0000a719
    9a94:	20000de4 	.word	0x20000de4
    9a98:	0000993d 	.word	0x0000993d
    9a9c:	0000a6b9 	.word	0x0000a6b9
    9aa0:	200003a0 	.word	0x200003a0
    9aa4:	0000a625 	.word	0x0000a625

00009aa8 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    9aa8:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    9aaa:	4b26      	ldr	r3, [pc, #152]	; (9b44 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    9aac:	7c1b      	ldrb	r3, [r3, #16]
    9aae:	2b00      	cmp	r3, #0
    9ab0:	d045      	beq.n	9b3e <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    9ab2:	4a24      	ldr	r2, [pc, #144]	; (9b44 <hiddf_keyboard_keys_state_change+0x9c>)
    9ab4:	2300      	movs	r3, #0
    9ab6:	6053      	str	r3, [r2, #4]
    9ab8:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    9aba:	b329      	cbz	r1, 9b08 <hiddf_keyboard_keys_state_change+0x60>
    9abc:	4603      	mov	r3, r0
    9abe:	1e4d      	subs	r5, r1, #1
    9ac0:	b2ed      	uxtb	r5, r5
    9ac2:	3501      	adds	r5, #1
    9ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    9ac8:	4405      	add	r5, r0
    9aca:	2200      	movs	r2, #0
    9acc:	e002      	b.n	9ad4 <hiddf_keyboard_keys_state_change+0x2c>
    9ace:	3303      	adds	r3, #3
    9ad0:	42ab      	cmp	r3, r5
    9ad2:	d005      	beq.n	9ae0 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    9ad4:	785c      	ldrb	r4, [r3, #1]
    9ad6:	2c00      	cmp	r4, #0
    9ad8:	d0f9      	beq.n	9ace <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    9ada:	3201      	adds	r2, #1
    9adc:	b2d2      	uxtb	r2, r2
    9ade:	e7f6      	b.n	9ace <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    9ae0:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    9ae2:	b2d2      	uxtb	r2, r2
    9ae4:	2a06      	cmp	r2, #6
    9ae6:	d809      	bhi.n	9afc <hiddf_keyboard_keys_state_change+0x54>
    9ae8:	4603      	mov	r3, r0
    9aea:	1e4a      	subs	r2, r1, #1
    9aec:	b2d2      	uxtb	r2, r2
    9aee:	3201      	adds	r2, #1
    9af0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9af4:	4410      	add	r0, r2
    9af6:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    9af8:	4d12      	ldr	r5, [pc, #72]	; (9b44 <hiddf_keyboard_keys_state_change+0x9c>)
    9afa:	e015      	b.n	9b28 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    9afc:	4b11      	ldr	r3, [pc, #68]	; (9b44 <hiddf_keyboard_keys_state_change+0x9c>)
    9afe:	f04f 32ff 	mov.w	r2, #4294967295
    9b02:	f8c3 2006 	str.w	r2, [r3, #6]
    9b06:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    9b08:	480e      	ldr	r0, [pc, #56]	; (9b44 <hiddf_keyboard_keys_state_change+0x9c>)
    9b0a:	2300      	movs	r3, #0
    9b0c:	2208      	movs	r2, #8
    9b0e:	1d01      	adds	r1, r0, #4
    9b10:	7b40      	ldrb	r0, [r0, #13]
    9b12:	4c0d      	ldr	r4, [pc, #52]	; (9b48 <hiddf_keyboard_keys_state_change+0xa0>)
    9b14:	47a0      	blx	r4
    9b16:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    9b18:	1c62      	adds	r2, r4, #1
    9b1a:	7819      	ldrb	r1, [r3, #0]
    9b1c:	442c      	add	r4, r5
    9b1e:	7121      	strb	r1, [r4, #4]
    9b20:	b2d4      	uxtb	r4, r2
    9b22:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    9b24:	4283      	cmp	r3, r0
    9b26:	d0ef      	beq.n	9b08 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    9b28:	789a      	ldrb	r2, [r3, #2]
    9b2a:	2a01      	cmp	r2, #1
    9b2c:	d1f9      	bne.n	9b22 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    9b2e:	785a      	ldrb	r2, [r3, #1]
    9b30:	2a00      	cmp	r2, #0
    9b32:	d0f1      	beq.n	9b18 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    9b34:	792a      	ldrb	r2, [r5, #4]
    9b36:	7819      	ldrb	r1, [r3, #0]
    9b38:	430a      	orrs	r2, r1
    9b3a:	712a      	strb	r2, [r5, #4]
    9b3c:	e7f1      	b.n	9b22 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    9b3e:	f06f 0010 	mvn.w	r0, #16
}
    9b42:	bd38      	pop	{r3, r4, r5, pc}
    9b44:	20000de4 	.word	0x20000de4
    9b48:	0000a1e9 	.word	0x0000a1e9

00009b4c <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9b4c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9b4e:	780b      	ldrb	r3, [r1, #0]
    9b50:	2b81      	cmp	r3, #129	; 0x81
    9b52:	d010      	beq.n	9b76 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9b54:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9b58:	2b01      	cmp	r3, #1
    9b5a:	d13f      	bne.n	9bdc <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    9b5c:	888a      	ldrh	r2, [r1, #4]
    9b5e:	4b22      	ldr	r3, [pc, #136]	; (9be8 <hid_mouse_req+0x9c>)
    9b60:	7a1b      	ldrb	r3, [r3, #8]
    9b62:	429a      	cmp	r2, r3
    9b64:	d13d      	bne.n	9be2 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    9b66:	784b      	ldrb	r3, [r1, #1]
    9b68:	2b03      	cmp	r3, #3
    9b6a:	d028      	beq.n	9bbe <hid_mouse_req+0x72>
    9b6c:	2b0b      	cmp	r3, #11
    9b6e:	d02c      	beq.n	9bca <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9b70:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9b74:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9b76:	784b      	ldrb	r3, [r1, #1]
    9b78:	2b06      	cmp	r3, #6
    9b7a:	d002      	beq.n	9b82 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    9b7c:	f06f 0009 	mvn.w	r0, #9
    9b80:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9b82:	888a      	ldrh	r2, [r1, #4]
    9b84:	4b18      	ldr	r3, [pc, #96]	; (9be8 <hid_mouse_req+0x9c>)
    9b86:	7a1b      	ldrb	r3, [r3, #8]
    9b88:	429a      	cmp	r2, r3
    9b8a:	d002      	beq.n	9b92 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    9b8c:	f06f 0009 	mvn.w	r0, #9
    9b90:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    9b92:	884b      	ldrh	r3, [r1, #2]
    9b94:	0a1b      	lsrs	r3, r3, #8
    9b96:	2b21      	cmp	r3, #33	; 0x21
    9b98:	d004      	beq.n	9ba4 <hid_mouse_req+0x58>
    9b9a:	2b22      	cmp	r3, #34	; 0x22
    9b9c:	d009      	beq.n	9bb2 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    9b9e:	f06f 000c 	mvn.w	r0, #12
    9ba2:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    9ba4:	4b10      	ldr	r3, [pc, #64]	; (9be8 <hid_mouse_req+0x9c>)
    9ba6:	6819      	ldr	r1, [r3, #0]
    9ba8:	2300      	movs	r3, #0
    9baa:	780a      	ldrb	r2, [r1, #0]
    9bac:	4c0f      	ldr	r4, [pc, #60]	; (9bec <hid_mouse_req+0xa0>)
    9bae:	47a0      	blx	r4
    9bb0:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    9bb2:	2300      	movs	r3, #0
    9bb4:	2234      	movs	r2, #52	; 0x34
    9bb6:	490e      	ldr	r1, [pc, #56]	; (9bf0 <hid_mouse_req+0xa4>)
    9bb8:	4c0c      	ldr	r4, [pc, #48]	; (9bec <hid_mouse_req+0xa0>)
    9bba:	47a0      	blx	r4
    9bbc:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    9bbe:	2300      	movs	r3, #0
    9bc0:	2201      	movs	r2, #1
    9bc2:	490c      	ldr	r1, [pc, #48]	; (9bf4 <hid_mouse_req+0xa8>)
    9bc4:	4c09      	ldr	r4, [pc, #36]	; (9bec <hid_mouse_req+0xa0>)
    9bc6:	47a0      	blx	r4
    9bc8:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    9bca:	884a      	ldrh	r2, [r1, #2]
    9bcc:	4b06      	ldr	r3, [pc, #24]	; (9be8 <hid_mouse_req+0x9c>)
    9bce:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    9bd0:	2300      	movs	r3, #0
    9bd2:	461a      	mov	r2, r3
    9bd4:	4619      	mov	r1, r3
    9bd6:	4c05      	ldr	r4, [pc, #20]	; (9bec <hid_mouse_req+0xa0>)
    9bd8:	47a0      	blx	r4
    9bda:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9bdc:	f06f 0009 	mvn.w	r0, #9
    9be0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9be2:	f06f 0009 	mvn.w	r0, #9
    9be6:	bd10      	pop	{r4, pc}
    9be8:	20000e04 	.word	0x20000e04
    9bec:	0000a1e9 	.word	0x0000a1e9
    9bf0:	0000c24c 	.word	0x0000c24c
    9bf4:	20000e0e 	.word	0x20000e0e

00009bf8 <hid_mouse_ctrl>:
{
    9bf8:	b570      	push	{r4, r5, r6, lr}
    9bfa:	4614      	mov	r4, r2
	switch (ctrl) {
    9bfc:	2901      	cmp	r1, #1
    9bfe:	d040      	beq.n	9c82 <hid_mouse_ctrl+0x8a>
    9c00:	b139      	cbz	r1, 9c12 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    9c02:	2902      	cmp	r1, #2
    9c04:	bf0c      	ite	eq
    9c06:	f06f 041a 	mvneq.w	r4, #26
    9c0a:	f06f 040c 	mvnne.w	r4, #12
}
    9c0e:	4620      	mov	r0, r4
    9c10:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    9c12:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    9c14:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    9c16:	2b00      	cmp	r3, #0
    9c18:	d049      	beq.n	9cae <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    9c1a:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    9c1c:	795b      	ldrb	r3, [r3, #5]
    9c1e:	2b03      	cmp	r3, #3
    9c20:	d148      	bne.n	9cb4 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    9c22:	7a2b      	ldrb	r3, [r5, #8]
    9c24:	429a      	cmp	r2, r3
    9c26:	d048      	beq.n	9cba <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    9c28:	2bff      	cmp	r3, #255	; 0xff
    9c2a:	d149      	bne.n	9cc0 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    9c2c:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    9c2e:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    9c30:	7818      	ldrb	r0, [r3, #0]
    9c32:	2221      	movs	r2, #33	; 0x21
    9c34:	6861      	ldr	r1, [r4, #4]
    9c36:	4418      	add	r0, r3
    9c38:	4b29      	ldr	r3, [pc, #164]	; (9ce0 <hid_mouse_ctrl+0xe8>)
    9c3a:	4798      	blx	r3
    9c3c:	4b29      	ldr	r3, [pc, #164]	; (9ce4 <hid_mouse_ctrl+0xec>)
    9c3e:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9c40:	6823      	ldr	r3, [r4, #0]
    9c42:	7818      	ldrb	r0, [r3, #0]
    9c44:	6861      	ldr	r1, [r4, #4]
    9c46:	4418      	add	r0, r3
    9c48:	4b27      	ldr	r3, [pc, #156]	; (9ce8 <hid_mouse_ctrl+0xf0>)
    9c4a:	4798      	blx	r3
	desc->sod = ep;
    9c4c:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    9c4e:	2800      	cmp	r0, #0
    9c50:	d039      	beq.n	9cc6 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    9c52:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    9c54:	7943      	ldrb	r3, [r0, #5]
    9c56:	7902      	ldrb	r2, [r0, #4]
    9c58:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9c5c:	b292      	uxth	r2, r2
    9c5e:	78c1      	ldrb	r1, [r0, #3]
    9c60:	4630      	mov	r0, r6
    9c62:	4b22      	ldr	r3, [pc, #136]	; (9cec <hid_mouse_ctrl+0xf4>)
    9c64:	4798      	blx	r3
    9c66:	4604      	mov	r4, r0
    9c68:	bb80      	cbnz	r0, 9ccc <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9c6a:	f016 0f80 	tst.w	r6, #128	; 0x80
    9c6e:	d030      	beq.n	9cd2 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    9c70:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    9c72:	4630      	mov	r0, r6
    9c74:	4b1e      	ldr	r3, [pc, #120]	; (9cf0 <hid_mouse_ctrl+0xf8>)
    9c76:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    9c78:	4b1a      	ldr	r3, [pc, #104]	; (9ce4 <hid_mouse_ctrl+0xec>)
    9c7a:	2201      	movs	r2, #1
    9c7c:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    9c7e:	72da      	strb	r2, [r3, #11]
    9c80:	e7c5      	b.n	9c0e <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    9c82:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    9c84:	b11a      	cbz	r2, 9c8e <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9c86:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    9c88:	795b      	ldrb	r3, [r3, #5]
    9c8a:	2b03      	cmp	r3, #3
    9c8c:	d124      	bne.n	9cd8 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    9c8e:	7a2b      	ldrb	r3, [r5, #8]
    9c90:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    9c92:	bf1c      	itt	ne
    9c94:	23ff      	movne	r3, #255	; 0xff
    9c96:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    9c98:	7a68      	ldrb	r0, [r5, #9]
    9c9a:	28ff      	cmp	r0, #255	; 0xff
    9c9c:	d003      	beq.n	9ca6 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    9c9e:	4b15      	ldr	r3, [pc, #84]	; (9cf4 <hid_mouse_ctrl+0xfc>)
    9ca0:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9ca2:	23ff      	movs	r3, #255	; 0xff
    9ca4:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    9ca6:	2400      	movs	r4, #0
    9ca8:	4b0e      	ldr	r3, [pc, #56]	; (9ce4 <hid_mouse_ctrl+0xec>)
    9caa:	72dc      	strb	r4, [r3, #11]
    9cac:	e7af      	b.n	9c0e <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    9cae:	f06f 0409 	mvn.w	r4, #9
    9cb2:	e7ac      	b.n	9c0e <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    9cb4:	f06f 0409 	mvn.w	r4, #9
    9cb8:	e7a9      	b.n	9c0e <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    9cba:	f06f 0411 	mvn.w	r4, #17
    9cbe:	e7a6      	b.n	9c0e <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    9cc0:	f06f 041b 	mvn.w	r4, #27
    9cc4:	e7a3      	b.n	9c0e <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    9cc6:	f06f 0409 	mvn.w	r4, #9
    9cca:	e7a0      	b.n	9c0e <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    9ccc:	f06f 0413 	mvn.w	r4, #19
    9cd0:	e79d      	b.n	9c0e <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    9cd2:	f04f 34ff 	mov.w	r4, #4294967295
    9cd6:	e79a      	b.n	9c0e <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    9cd8:	f06f 0409 	mvn.w	r4, #9
    9cdc:	e797      	b.n	9c0e <hid_mouse_ctrl+0x16>
    9cde:	bf00      	nop
    9ce0:	0000a72d 	.word	0x0000a72d
    9ce4:	20000e04 	.word	0x20000e04
    9ce8:	0000a767 	.word	0x0000a767
    9cec:	00004fbd 	.word	0x00004fbd
    9cf0:	00005051 	.word	0x00005051
    9cf4:	00005025 	.word	0x00005025

00009cf8 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    9cf8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9cfa:	4b0a      	ldr	r3, [pc, #40]	; (9d24 <hiddf_mouse_init+0x2c>)
    9cfc:	4798      	blx	r3
    9cfe:	2801      	cmp	r0, #1
    9d00:	d80c      	bhi.n	9d1c <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    9d02:	4809      	ldr	r0, [pc, #36]	; (9d28 <hiddf_mouse_init+0x30>)
    9d04:	4b09      	ldr	r3, [pc, #36]	; (9d2c <hiddf_mouse_init+0x34>)
    9d06:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    9d08:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    9d0a:	300c      	adds	r0, #12
    9d0c:	4b08      	ldr	r3, [pc, #32]	; (9d30 <hiddf_mouse_init+0x38>)
    9d0e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    9d10:	4908      	ldr	r1, [pc, #32]	; (9d34 <hiddf_mouse_init+0x3c>)
    9d12:	2001      	movs	r0, #1
    9d14:	4b08      	ldr	r3, [pc, #32]	; (9d38 <hiddf_mouse_init+0x40>)
    9d16:	4798      	blx	r3
	return ERR_NONE;
    9d18:	2000      	movs	r0, #0
    9d1a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9d1c:	f06f 0010 	mvn.w	r0, #16
}
    9d20:	bd08      	pop	{r3, pc}
    9d22:	bf00      	nop
    9d24:	0000a719 	.word	0x0000a719
    9d28:	20000e04 	.word	0x20000e04
    9d2c:	00009bf9 	.word	0x00009bf9
    9d30:	0000a6b9 	.word	0x0000a6b9
    9d34:	200003a8 	.word	0x200003a8
    9d38:	0000a625 	.word	0x0000a625

00009d3c <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    9d3c:	2200      	movs	r2, #0
    9d3e:	4b0d      	ldr	r3, [pc, #52]	; (9d74 <hiddf_mouse_move+0x38>)
    9d40:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    9d42:	2901      	cmp	r1, #1
    9d44:	d00e      	beq.n	9d64 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    9d46:	2902      	cmp	r1, #2
    9d48:	d00e      	beq.n	9d68 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    9d4a:	2903      	cmp	r1, #3
    9d4c:	d10f      	bne.n	9d6e <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    9d4e:	4b09      	ldr	r3, [pc, #36]	; (9d74 <hiddf_mouse_move+0x38>)
    9d50:	71d8      	strb	r0, [r3, #7]
{
    9d52:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    9d54:	4807      	ldr	r0, [pc, #28]	; (9d74 <hiddf_mouse_move+0x38>)
    9d56:	2300      	movs	r3, #0
    9d58:	2204      	movs	r2, #4
    9d5a:	1881      	adds	r1, r0, r2
    9d5c:	7a40      	ldrb	r0, [r0, #9]
    9d5e:	4c06      	ldr	r4, [pc, #24]	; (9d78 <hiddf_mouse_move+0x3c>)
    9d60:	47a0      	blx	r4
    9d62:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    9d64:	7158      	strb	r0, [r3, #5]
    9d66:	e7f4      	b.n	9d52 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    9d68:	4b02      	ldr	r3, [pc, #8]	; (9d74 <hiddf_mouse_move+0x38>)
    9d6a:	7198      	strb	r0, [r3, #6]
    9d6c:	e7f1      	b.n	9d52 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    9d6e:	f06f 000c 	mvn.w	r0, #12
    9d72:	4770      	bx	lr
    9d74:	20000e04 	.word	0x20000e04
    9d78:	0000a1e9 	.word	0x0000a1e9

00009d7c <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    9d7c:	4770      	bx	lr

00009d7e <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    9d7e:	e7fe      	b.n	9d7e <midi_cb_ep_bulk_out>

00009d80 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9d80:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    9d82:	780b      	ldrb	r3, [r1, #0]
    9d84:	2b81      	cmp	r3, #129	; 0x81
    9d86:	d014      	beq.n	9db2 <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9d88:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9d8c:	2b01      	cmp	r3, #1
    9d8e:	d132      	bne.n	9df6 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    9d90:	888b      	ldrh	r3, [r1, #4]
    9d92:	4a1c      	ldr	r2, [pc, #112]	; (9e04 <audio_midi_req+0x84>)
    9d94:	7912      	ldrb	r2, [r2, #4]
    9d96:	429a      	cmp	r2, r3
    9d98:	d003      	beq.n	9da2 <audio_midi_req+0x22>
    9d9a:	4a1a      	ldr	r2, [pc, #104]	; (9e04 <audio_midi_req+0x84>)
    9d9c:	7952      	ldrb	r2, [r2, #5]
    9d9e:	429a      	cmp	r2, r3
    9da0:	d12c      	bne.n	9dfc <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    9da2:	784b      	ldrb	r3, [r1, #1]
    9da4:	2b03      	cmp	r3, #3
    9da6:	d017      	beq.n	9dd8 <audio_midi_req+0x58>
    9da8:	2b0b      	cmp	r3, #11
    9daa:	d01b      	beq.n	9de4 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    9dac:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9db0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    9db2:	888b      	ldrh	r3, [r1, #4]
    9db4:	4a13      	ldr	r2, [pc, #76]	; (9e04 <audio_midi_req+0x84>)
    9db6:	7912      	ldrb	r2, [r2, #4]
    9db8:	429a      	cmp	r2, r3
    9dba:	d006      	beq.n	9dca <audio_midi_req+0x4a>
    9dbc:	4a11      	ldr	r2, [pc, #68]	; (9e04 <audio_midi_req+0x84>)
    9dbe:	7952      	ldrb	r2, [r2, #5]
    9dc0:	429a      	cmp	r2, r3
    9dc2:	d002      	beq.n	9dca <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    9dc4:	f06f 0009 	mvn.w	r0, #9
    9dc8:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    9dca:	4b0e      	ldr	r3, [pc, #56]	; (9e04 <audio_midi_req+0x84>)
    9dcc:	6819      	ldr	r1, [r3, #0]
    9dce:	2300      	movs	r3, #0
    9dd0:	780a      	ldrb	r2, [r1, #0]
    9dd2:	4c0d      	ldr	r4, [pc, #52]	; (9e08 <audio_midi_req+0x88>)
    9dd4:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    9dd6:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    9dd8:	2300      	movs	r3, #0
    9dda:	2201      	movs	r2, #1
    9ddc:	490b      	ldr	r1, [pc, #44]	; (9e0c <audio_midi_req+0x8c>)
    9dde:	4c0a      	ldr	r4, [pc, #40]	; (9e08 <audio_midi_req+0x88>)
    9de0:	47a0      	blx	r4
    9de2:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    9de4:	884a      	ldrh	r2, [r1, #2]
    9de6:	4b07      	ldr	r3, [pc, #28]	; (9e04 <audio_midi_req+0x84>)
    9de8:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    9dea:	2300      	movs	r3, #0
    9dec:	461a      	mov	r2, r3
    9dee:	4619      	mov	r1, r3
    9df0:	4c05      	ldr	r4, [pc, #20]	; (9e08 <audio_midi_req+0x88>)
    9df2:	47a0      	blx	r4
    9df4:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    9df6:	f06f 0009 	mvn.w	r0, #9
    9dfa:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9dfc:	f06f 0009 	mvn.w	r0, #9
    9e00:	bd10      	pop	{r4, pc}
    9e02:	bf00      	nop
    9e04:	20000e1c 	.word	0x20000e1c
    9e08:	0000a1e9 	.word	0x0000a1e9
    9e0c:	20000e24 	.word	0x20000e24

00009e10 <audio_midi_ctrl>:
{
    9e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9e14:	b083      	sub	sp, #12
    9e16:	4615      	mov	r5, r2
	switch (ctrl) {
    9e18:	2901      	cmp	r1, #1
    9e1a:	f000 8092 	beq.w	9f42 <audio_midi_ctrl+0x132>
    9e1e:	b141      	cbz	r1, 9e32 <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    9e20:	2902      	cmp	r1, #2
    9e22:	bf0c      	ite	eq
    9e24:	f06f 001a 	mvneq.w	r0, #26
    9e28:	f06f 000c 	mvnne.w	r0, #12
}
    9e2c:	b003      	add	sp, #12
    9e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    9e32:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    9e36:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    9e38:	2800      	cmp	r0, #0
    9e3a:	f000 80a9 	beq.w	9f90 <audio_midi_ctrl+0x180>
    9e3e:	f109 0604 	add.w	r6, r9, #4
    9e42:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    9e44:	f04f 0804 	mov.w	r8, #4
    9e48:	4f5d      	ldr	r7, [pc, #372]	; (9fc0 <audio_midi_ctrl+0x1b0>)
    9e4a:	e019      	b.n	9e80 <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9e4c:	f816 3b01 	ldrb.w	r3, [r6], #1
    9e50:	429a      	cmp	r2, r3
    9e52:	f000 80a3 	beq.w	9f9c <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    9e56:	2bff      	cmp	r3, #255	; 0xff
    9e58:	f040 80a3 	bne.w	9fa2 <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    9e5c:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    9e60:	2c01      	cmp	r4, #1
    9e62:	d016      	beq.n	9e92 <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    9e64:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    9e66:	7818      	ldrb	r0, [r3, #0]
    9e68:	4642      	mov	r2, r8
    9e6a:	6869      	ldr	r1, [r5, #4]
    9e6c:	4418      	add	r0, r3
    9e6e:	47b8      	blx	r7
    9e70:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    9e72:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    9e76:	f000 809e 	beq.w	9fb6 <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    9e7a:	2800      	cmp	r0, #0
    9e7c:	f000 808b 	beq.w	9f96 <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    9e80:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    9e82:	7943      	ldrb	r3, [r0, #5]
    9e84:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    9e88:	2b01      	cmp	r3, #1
    9e8a:	d0df      	beq.n	9e4c <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    9e8c:	f06f 0009 	mvn.w	r0, #9
    9e90:	e7cc      	b.n	9e2c <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    9e92:	2205      	movs	r2, #5
    9e94:	6869      	ldr	r1, [r5, #4]
    9e96:	4b4a      	ldr	r3, [pc, #296]	; (9fc0 <audio_midi_ctrl+0x1b0>)
    9e98:	4798      	blx	r3
    9e9a:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    9e9c:	4e49      	ldr	r6, [pc, #292]	; (9fc4 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9e9e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 9fe4 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    9ea2:	4f49      	ldr	r7, [pc, #292]	; (9fc8 <audio_midi_ctrl+0x1b8>)
    9ea4:	e01a      	b.n	9edc <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    9ea6:	4a47      	ldr	r2, [pc, #284]	; (9fc4 <audio_midi_ctrl+0x1b4>)
    9ea8:	7953      	ldrb	r3, [r2, #5]
    9eaa:	425b      	negs	r3, r3
    9eac:	b2db      	uxtb	r3, r3
    9eae:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    9eb0:	f06f 0013 	mvn.w	r0, #19
    9eb4:	e7ba      	b.n	9e2c <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    9eb6:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9eba:	b2c0      	uxtb	r0, r0
    9ebc:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    9ec0:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    9ec2:	4a42      	ldr	r2, [pc, #264]	; (9fcc <audio_midi_ctrl+0x1bc>)
    9ec4:	2102      	movs	r1, #2
    9ec6:	f899 0006 	ldrb.w	r0, [r9, #6]
    9eca:	4b41      	ldr	r3, [pc, #260]	; (9fd0 <audio_midi_ctrl+0x1c0>)
    9ecc:	4798      	blx	r3
				desc->sod = ep;
    9ece:	602c      	str	r4, [r5, #0]
    9ed0:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9ed2:	6869      	ldr	r1, [r5, #4]
    9ed4:	4420      	add	r0, r4
    9ed6:	4b3f      	ldr	r3, [pc, #252]	; (9fd4 <audio_midi_ctrl+0x1c4>)
    9ed8:	4798      	blx	r3
    9eda:	4604      	mov	r4, r0
			while (NULL != ep) {
    9edc:	2c00      	cmp	r4, #0
    9ede:	d063      	beq.n	9fa8 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    9ee0:	78a3      	ldrb	r3, [r4, #2]
    9ee2:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    9ee6:	78e3      	ldrb	r3, [r4, #3]
    9ee8:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    9eec:	7962      	ldrb	r2, [r4, #5]
    9eee:	7923      	ldrb	r3, [r4, #4]
    9ef0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    9ef4:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    9ef6:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    9efa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9efe:	b2db      	uxtb	r3, r3
    9f00:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    9f02:	2301      	movs	r3, #1
    9f04:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9f06:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9f0a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    9f0e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f12:	b292      	uxth	r2, r2
    9f14:	47c0      	blx	r8
    9f16:	b2c0      	uxtb	r0, r0
    9f18:	7170      	strb	r0, [r6, #5]
    9f1a:	2800      	cmp	r0, #0
    9f1c:	d1c3      	bne.n	9ea6 <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9f1e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f22:	f013 0f80 	tst.w	r3, #128	; 0x80
    9f26:	d1c6      	bne.n	9eb6 <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    9f28:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9f2c:	b2c0      	uxtb	r0, r0
    9f2e:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    9f32:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    9f34:	4a28      	ldr	r2, [pc, #160]	; (9fd8 <audio_midi_ctrl+0x1c8>)
    9f36:	2102      	movs	r1, #2
    9f38:	f899 0007 	ldrb.w	r0, [r9, #7]
    9f3c:	4b24      	ldr	r3, [pc, #144]	; (9fd0 <audio_midi_ctrl+0x1c0>)
    9f3e:	4798      	blx	r3
    9f40:	e7c5      	b.n	9ece <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    9f42:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    9f44:	b142      	cbz	r2, 9f58 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9f46:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    9f48:	795b      	ldrb	r3, [r3, #5]
    9f4a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    9f4e:	2b01      	cmp	r3, #1
    9f50:	d002      	beq.n	9f58 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    9f52:	f06f 0009 	mvn.w	r0, #9
    9f56:	e769      	b.n	9e2c <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    9f58:	7923      	ldrb	r3, [r4, #4]
    9f5a:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    9f5c:	bf1c      	itt	ne
    9f5e:	23ff      	movne	r3, #255	; 0xff
    9f60:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    9f62:	7963      	ldrb	r3, [r4, #5]
    9f64:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    9f66:	bf1c      	itt	ne
    9f68:	23ff      	movne	r3, #255	; 0xff
    9f6a:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    9f6c:	79a0      	ldrb	r0, [r4, #6]
    9f6e:	28ff      	cmp	r0, #255	; 0xff
    9f70:	d003      	beq.n	9f7a <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    9f72:	4b1a      	ldr	r3, [pc, #104]	; (9fdc <audio_midi_ctrl+0x1cc>)
    9f74:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9f76:	23ff      	movs	r3, #255	; 0xff
    9f78:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    9f7a:	79e0      	ldrb	r0, [r4, #7]
    9f7c:	28ff      	cmp	r0, #255	; 0xff
    9f7e:	d003      	beq.n	9f88 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    9f80:	4b16      	ldr	r3, [pc, #88]	; (9fdc <audio_midi_ctrl+0x1cc>)
    9f82:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9f84:	23ff      	movs	r3, #255	; 0xff
    9f86:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    9f88:	2000      	movs	r0, #0
    9f8a:	4b15      	ldr	r3, [pc, #84]	; (9fe0 <audio_midi_ctrl+0x1d0>)
    9f8c:	7358      	strb	r0, [r3, #13]
    9f8e:	e74d      	b.n	9e2c <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    9f90:	f06f 0009 	mvn.w	r0, #9
    9f94:	e74a      	b.n	9e2c <audio_midi_ctrl+0x1c>
    9f96:	f06f 0009 	mvn.w	r0, #9
    9f9a:	e747      	b.n	9e2c <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    9f9c:	f06f 0011 	mvn.w	r0, #17
    9fa0:	e744      	b.n	9e2c <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    9fa2:	f06f 001b 	mvn.w	r0, #27
    9fa6:	e741      	b.n	9e2c <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    9fa8:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    9faa:	7818      	ldrb	r0, [r3, #0]
    9fac:	2204      	movs	r2, #4
    9fae:	6869      	ldr	r1, [r5, #4]
    9fb0:	4418      	add	r0, r3
    9fb2:	4b03      	ldr	r3, [pc, #12]	; (9fc0 <audio_midi_ctrl+0x1b0>)
    9fb4:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    9fb6:	2201      	movs	r2, #1
    9fb8:	4b09      	ldr	r3, [pc, #36]	; (9fe0 <audio_midi_ctrl+0x1d0>)
    9fba:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    9fbc:	2000      	movs	r0, #0
    9fbe:	e735      	b.n	9e2c <audio_midi_ctrl+0x1c>
    9fc0:	0000a72d 	.word	0x0000a72d
    9fc4:	20002c80 	.word	0x20002c80
    9fc8:	00005051 	.word	0x00005051
    9fcc:	00009d7d 	.word	0x00009d7d
    9fd0:	00005225 	.word	0x00005225
    9fd4:	0000a767 	.word	0x0000a767
    9fd8:	00009d7f 	.word	0x00009d7f
    9fdc:	00005025 	.word	0x00005025
    9fe0:	20000e1c 	.word	0x20000e1c
    9fe4:	00004fbd 	.word	0x00004fbd

00009fe8 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    9fe8:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    9fea:	4b0a      	ldr	r3, [pc, #40]	; (a014 <audiodf_midi_init+0x2c>)
    9fec:	4798      	blx	r3
    9fee:	2801      	cmp	r0, #1
    9ff0:	d80c      	bhi.n	a00c <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    9ff2:	4809      	ldr	r0, [pc, #36]	; (a018 <audiodf_midi_init+0x30>)
    9ff4:	4b09      	ldr	r3, [pc, #36]	; (a01c <audiodf_midi_init+0x34>)
    9ff6:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    9ff8:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    9ffa:	3010      	adds	r0, #16
    9ffc:	4b08      	ldr	r3, [pc, #32]	; (a020 <audiodf_midi_init+0x38>)
    9ffe:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    a000:	4908      	ldr	r1, [pc, #32]	; (a024 <audiodf_midi_init+0x3c>)
    a002:	2001      	movs	r0, #1
    a004:	4b08      	ldr	r3, [pc, #32]	; (a028 <audiodf_midi_init+0x40>)
    a006:	4798      	blx	r3
	return ERR_NONE;
    a008:	2000      	movs	r0, #0
    a00a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a00c:	f06f 0010 	mvn.w	r0, #16
}
    a010:	bd08      	pop	{r3, pc}
    a012:	bf00      	nop
    a014:	0000a719 	.word	0x0000a719
    a018:	20000e1c 	.word	0x20000e1c
    a01c:	00009e11 	.word	0x00009e11
    a020:	0000a6b9 	.word	0x0000a6b9
    a024:	200003b0 	.word	0x200003b0
    a028:	0000a625 	.word	0x0000a625

0000a02c <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    a02c:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    a02e:	4c06      	ldr	r4, [pc, #24]	; (a048 <audiodf_midi_xfer_packet+0x1c>)
    a030:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    a032:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    a034:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    a036:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    a038:	2300      	movs	r3, #0
    a03a:	2204      	movs	r2, #4
    a03c:	f104 0109 	add.w	r1, r4, #9
    a040:	79a0      	ldrb	r0, [r4, #6]
    a042:	4c02      	ldr	r4, [pc, #8]	; (a04c <audiodf_midi_xfer_packet+0x20>)
    a044:	47a0      	blx	r4
	
	
}
    a046:	bd10      	pop	{r4, pc}
    a048:	20000e1c 	.word	0x20000e1c
    a04c:	0000a1e9 	.word	0x0000a1e9

0000a050 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    a050:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a052:	4b07      	ldr	r3, [pc, #28]	; (a070 <usbdc_unconfig+0x20>)
    a054:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    a056:	b14c      	cbz	r4, a06c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    a058:	2600      	movs	r6, #0
    a05a:	2501      	movs	r5, #1
    a05c:	6863      	ldr	r3, [r4, #4]
    a05e:	4632      	mov	r2, r6
    a060:	4629      	mov	r1, r5
    a062:	4620      	mov	r0, r4
    a064:	4798      	blx	r3
		func = func->next;
    a066:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    a068:	2c00      	cmp	r4, #0
    a06a:	d1f7      	bne.n	a05c <usbdc_unconfig+0xc>
    a06c:	bd70      	pop	{r4, r5, r6, pc}
    a06e:	bf00      	nop
    a070:	20000e38 	.word	0x20000e38

0000a074 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    a074:	b570      	push	{r4, r5, r6, lr}
    a076:	4606      	mov	r6, r0
    a078:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a07a:	4b07      	ldr	r3, [pc, #28]	; (a098 <usbdc_change_notify+0x24>)
    a07c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    a07e:	b91c      	cbnz	r4, a088 <usbdc_change_notify+0x14>
    a080:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    a082:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    a084:	2c00      	cmp	r4, #0
    a086:	d0fb      	beq.n	a080 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    a088:	6863      	ldr	r3, [r4, #4]
    a08a:	2b00      	cmp	r3, #0
    a08c:	d0f9      	beq.n	a082 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    a08e:	4629      	mov	r1, r5
    a090:	4630      	mov	r0, r6
    a092:	4798      	blx	r3
    a094:	e7f5      	b.n	a082 <usbdc_change_notify+0xe>
    a096:	bf00      	nop
    a098:	20000e38 	.word	0x20000e38

0000a09c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a09e:	4607      	mov	r7, r0
    a0a0:	460e      	mov	r6, r1
    a0a2:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    a0a4:	4b0c      	ldr	r3, [pc, #48]	; (a0d8 <usbdc_request_handler+0x3c>)
    a0a6:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    a0a8:	b91c      	cbnz	r4, a0b2 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    a0aa:	2000      	movs	r0, #0
    a0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    a0ae:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    a0b0:	b16c      	cbz	r4, a0ce <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    a0b2:	6863      	ldr	r3, [r4, #4]
    a0b4:	2b00      	cmp	r3, #0
    a0b6:	d0fa      	beq.n	a0ae <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    a0b8:	462a      	mov	r2, r5
    a0ba:	4631      	mov	r1, r6
    a0bc:	4638      	mov	r0, r7
    a0be:	4798      	blx	r3
			if (0 == rc) {
    a0c0:	b138      	cbz	r0, a0d2 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    a0c2:	f110 0f0a 	cmn.w	r0, #10
    a0c6:	d0f2      	beq.n	a0ae <usbdc_request_handler+0x12>
				return -1;
    a0c8:	f04f 30ff 	mov.w	r0, #4294967295
}
    a0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a0ce:	2000      	movs	r0, #0
    a0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    a0d2:	2001      	movs	r0, #1
    a0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0d6:	bf00      	nop
    a0d8:	20000e38 	.word	0x20000e38

0000a0dc <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    a0dc:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a0de:	4b06      	ldr	r3, [pc, #24]	; (a0f8 <usbd_sof_cb+0x1c>)
    a0e0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    a0e2:	b91c      	cbnz	r4, a0ec <usbd_sof_cb+0x10>
    a0e4:	bd10      	pop	{r4, pc}
		sof = sof->next;
    a0e6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    a0e8:	2c00      	cmp	r4, #0
    a0ea:	d0fb      	beq.n	a0e4 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    a0ec:	6863      	ldr	r3, [r4, #4]
    a0ee:	2b00      	cmp	r3, #0
    a0f0:	d0f9      	beq.n	a0e6 <usbd_sof_cb+0xa>
			sof->cb();
    a0f2:	4798      	blx	r3
    a0f4:	e7f7      	b.n	a0e6 <usbd_sof_cb+0xa>
    a0f6:	bf00      	nop
    a0f8:	20000e38 	.word	0x20000e38

0000a0fc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    a0fc:	b510      	push	{r4, lr}
    a0fe:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    a100:	b119      	cbz	r1, a10a <usbdc_cb_ctl_done+0xe>
    a102:	2901      	cmp	r1, #1
    a104:	d026      	beq.n	a154 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    a106:	2000      	movs	r0, #0
    a108:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    a10a:	7813      	ldrb	r3, [r2, #0]
    a10c:	2b00      	cmp	r3, #0
    a10e:	d1fa      	bne.n	a106 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    a110:	7853      	ldrb	r3, [r2, #1]
    a112:	2b05      	cmp	r3, #5
    a114:	d00f      	beq.n	a136 <usbdc_cb_ctl_done+0x3a>
    a116:	2b09      	cmp	r3, #9
    a118:	d1f5      	bne.n	a106 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    a11a:	8852      	ldrh	r2, [r2, #2]
    a11c:	4b10      	ldr	r3, [pc, #64]	; (a160 <usbdc_cb_ctl_done+0x64>)
    a11e:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    a120:	8863      	ldrh	r3, [r4, #2]
    a122:	2b00      	cmp	r3, #0
    a124:	bf14      	ite	ne
    a126:	2104      	movne	r1, #4
    a128:	2103      	moveq	r1, #3
    a12a:	4b0d      	ldr	r3, [pc, #52]	; (a160 <usbdc_cb_ctl_done+0x64>)
    a12c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a12e:	2001      	movs	r0, #1
    a130:	4b0c      	ldr	r3, [pc, #48]	; (a164 <usbdc_cb_ctl_done+0x68>)
    a132:	4798      	blx	r3
    a134:	e7e7      	b.n	a106 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    a136:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    a138:	b2c0      	uxtb	r0, r0
    a13a:	4b0b      	ldr	r3, [pc, #44]	; (a168 <usbdc_cb_ctl_done+0x6c>)
    a13c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    a13e:	8863      	ldrh	r3, [r4, #2]
    a140:	2b00      	cmp	r3, #0
    a142:	bf14      	ite	ne
    a144:	2103      	movne	r1, #3
    a146:	2102      	moveq	r1, #2
    a148:	4b05      	ldr	r3, [pc, #20]	; (a160 <usbdc_cb_ctl_done+0x64>)
    a14a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a14c:	2001      	movs	r0, #1
    a14e:	4b05      	ldr	r3, [pc, #20]	; (a164 <usbdc_cb_ctl_done+0x68>)
    a150:	4798      	blx	r3
    a152:	e7d8      	b.n	a106 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    a154:	2201      	movs	r2, #1
    a156:	4621      	mov	r1, r4
    a158:	2000      	movs	r0, #0
    a15a:	4b04      	ldr	r3, [pc, #16]	; (a16c <usbdc_cb_ctl_done+0x70>)
    a15c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    a15e:	e7d2      	b.n	a106 <usbdc_cb_ctl_done+0xa>
    a160:	20000e38 	.word	0x20000e38
    a164:	0000a075 	.word	0x0000a075
    a168:	00004fb1 	.word	0x00004fb1
    a16c:	0000a09d 	.word	0x0000a09d

0000a170 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    a170:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    a172:	4b0d      	ldr	r3, [pc, #52]	; (a1a8 <usbdc_reset+0x38>)
    a174:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    a176:	4d0d      	ldr	r5, [pc, #52]	; (a1ac <usbdc_reset+0x3c>)
    a178:	2602      	movs	r6, #2
    a17a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    a17c:	2400      	movs	r4, #0
    a17e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    a180:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    a182:	4620      	mov	r0, r4
    a184:	4b0a      	ldr	r3, [pc, #40]	; (a1b0 <usbdc_reset+0x40>)
    a186:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    a188:	7f28      	ldrb	r0, [r5, #28]
    a18a:	4b0a      	ldr	r3, [pc, #40]	; (a1b4 <usbdc_reset+0x44>)
    a18c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    a18e:	4a0a      	ldr	r2, [pc, #40]	; (a1b8 <usbdc_reset+0x48>)
    a190:	4621      	mov	r1, r4
    a192:	4620      	mov	r0, r4
    a194:	4d09      	ldr	r5, [pc, #36]	; (a1bc <usbdc_reset+0x4c>)
    a196:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    a198:	4a09      	ldr	r2, [pc, #36]	; (a1c0 <usbdc_reset+0x50>)
    a19a:	4631      	mov	r1, r6
    a19c:	4620      	mov	r0, r4
    a19e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    a1a0:	4620      	mov	r0, r4
    a1a2:	4b08      	ldr	r3, [pc, #32]	; (a1c4 <usbdc_reset+0x54>)
    a1a4:	4798      	blx	r3
    a1a6:	bd70      	pop	{r4, r5, r6, pc}
    a1a8:	0000a051 	.word	0x0000a051
    a1ac:	20000e38 	.word	0x20000e38
    a1b0:	00005025 	.word	0x00005025
    a1b4:	00005011 	.word	0x00005011
    a1b8:	0000a209 	.word	0x0000a209
    a1bc:	00005225 	.word	0x00005225
    a1c0:	0000a0fd 	.word	0x0000a0fd
    a1c4:	00005051 	.word	0x00005051

0000a1c8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    a1c8:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    a1ca:	b110      	cbz	r0, a1d2 <usbd_event_cb+0xa>
    a1cc:	2801      	cmp	r0, #1
    a1ce:	d004      	beq.n	a1da <usbd_event_cb+0x12>
    a1d0:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    a1d2:	2000      	movs	r0, #0
    a1d4:	4b02      	ldr	r3, [pc, #8]	; (a1e0 <usbd_event_cb+0x18>)
    a1d6:	4798      	blx	r3
		break;
    a1d8:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    a1da:	4b02      	ldr	r3, [pc, #8]	; (a1e4 <usbd_event_cb+0x1c>)
    a1dc:	4798      	blx	r3
    a1de:	bd08      	pop	{r3, pc}
    a1e0:	0000a075 	.word	0x0000a075
    a1e4:	0000a171 	.word	0x0000a171

0000a1e8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    a1e8:	b500      	push	{lr}
    a1ea:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    a1ec:	9101      	str	r1, [sp, #4]
    a1ee:	9202      	str	r2, [sp, #8]
    a1f0:	f88d 000c 	strb.w	r0, [sp, #12]
    a1f4:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    a1f8:	a801      	add	r0, sp, #4
    a1fa:	4b02      	ldr	r3, [pc, #8]	; (a204 <usbdc_xfer+0x1c>)
    a1fc:	4798      	blx	r3
}
    a1fe:	b005      	add	sp, #20
    a200:	f85d fb04 	ldr.w	pc, [sp], #4
    a204:	0000509d 	.word	0x0000509d

0000a208 <usbdc_cb_ctl_req>:
{
    a208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a20c:	b083      	sub	sp, #12
    a20e:	4605      	mov	r5, r0
    a210:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    a212:	2200      	movs	r2, #0
    a214:	4b9b      	ldr	r3, [pc, #620]	; (a484 <usbdc_cb_ctl_req+0x27c>)
    a216:	4798      	blx	r3
    a218:	f1b0 3fff 	cmp.w	r0, #4294967295
    a21c:	d00b      	beq.n	a236 <usbdc_cb_ctl_req+0x2e>
    a21e:	2801      	cmp	r0, #1
    a220:	f000 81e3 	beq.w	a5ea <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    a224:	7823      	ldrb	r3, [r4, #0]
    a226:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    a22a:	d008      	beq.n	a23e <usbdc_cb_ctl_req+0x36>
    a22c:	2a80      	cmp	r2, #128	; 0x80
    a22e:	f000 80f4 	beq.w	a41a <usbdc_cb_ctl_req+0x212>
		return false;
    a232:	2000      	movs	r0, #0
    a234:	e000      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return false;
    a236:	2000      	movs	r0, #0
}
    a238:	b003      	add	sp, #12
    a23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    a23e:	7862      	ldrb	r2, [r4, #1]
    a240:	3a01      	subs	r2, #1
    a242:	2a0a      	cmp	r2, #10
    a244:	f200 81d3 	bhi.w	a5ee <usbdc_cb_ctl_req+0x3e6>
    a248:	e8df f012 	tbh	[pc, r2, lsl #1]
    a24c:	01d10060 	.word	0x01d10060
    a250:	01d10076 	.word	0x01d10076
    a254:	01d1000b 	.word	0x01d1000b
    a258:	01d101d1 	.word	0x01d101d1
    a25c:	01d10015 	.word	0x01d10015
    a260:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a262:	2301      	movs	r3, #1
    a264:	2200      	movs	r2, #0
    a266:	4611      	mov	r1, r2
    a268:	4628      	mov	r0, r5
    a26a:	4c87      	ldr	r4, [pc, #540]	; (a488 <usbdc_cb_ctl_req+0x280>)
    a26c:	47a0      	blx	r4
    a26e:	fab0 f080 	clz	r0, r0
    a272:	0940      	lsrs	r0, r0, #5
    a274:	e7e0      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    a276:	8862      	ldrh	r2, [r4, #2]
    a278:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    a27a:	b1ca      	cbz	r2, a2b0 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    a27c:	4b83      	ldr	r3, [pc, #524]	; (a48c <usbdc_cb_ctl_req+0x284>)
    a27e:	681b      	ldr	r3, [r3, #0]
    a280:	6859      	ldr	r1, [r3, #4]
    a282:	6818      	ldr	r0, [r3, #0]
    a284:	4b82      	ldr	r3, [pc, #520]	; (a490 <usbdc_cb_ctl_req+0x288>)
    a286:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a288:	2800      	cmp	r0, #0
    a28a:	f000 81be 	beq.w	a60a <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    a28e:	78c2      	ldrb	r2, [r0, #3]
    a290:	7881      	ldrb	r1, [r0, #2]
    a292:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    a296:	fa10 f181 	uxtah	r1, r0, r1
    a29a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a29c:	2204      	movs	r2, #4
    a29e:	4b7d      	ldr	r3, [pc, #500]	; (a494 <usbdc_cb_ctl_req+0x28c>)
    a2a0:	4798      	blx	r3
    a2a2:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a2a4:	b130      	cbz	r0, a2b4 <usbdc_cb_ctl_req+0xac>
    a2a6:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a2a8:	f8df 81e0 	ldr.w	r8, [pc, #480]	; a48c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a2ac:	4f79      	ldr	r7, [pc, #484]	; (a494 <usbdc_cb_ctl_req+0x28c>)
    a2ae:	e018      	b.n	a2e2 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    a2b0:	4b79      	ldr	r3, [pc, #484]	; (a498 <usbdc_cb_ctl_req+0x290>)
    a2b2:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a2b4:	2301      	movs	r3, #1
    a2b6:	2200      	movs	r2, #0
    a2b8:	4611      	mov	r1, r2
    a2ba:	4628      	mov	r0, r5
    a2bc:	4c72      	ldr	r4, [pc, #456]	; (a488 <usbdc_cb_ctl_req+0x280>)
    a2be:	47a0      	blx	r4
    a2c0:	fab0 f080 	clz	r0, r0
    a2c4:	0940      	lsrs	r0, r0, #5
    a2c6:	e7b7      	b.n	a238 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    a2c8:	464c      	mov	r4, r9
    a2ca:	e000      	b.n	a2ce <usbdc_cb_ctl_req+0xc6>
    a2cc:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    a2ce:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a2d0:	7803      	ldrb	r3, [r0, #0]
    a2d2:	4418      	add	r0, r3
    a2d4:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a2d6:	2204      	movs	r2, #4
    a2d8:	9901      	ldr	r1, [sp, #4]
    a2da:	47b8      	blx	r7
    a2dc:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a2de:	2800      	cmp	r0, #0
    a2e0:	d0e8      	beq.n	a2b4 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    a2e2:	f890 9002 	ldrb.w	r9, [r0, #2]
    a2e6:	45a1      	cmp	r9, r4
    a2e8:	d0f1      	beq.n	a2ce <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a2ea:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    a2ee:	2c00      	cmp	r4, #0
    a2f0:	d0ea      	beq.n	a2c8 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    a2f2:	2600      	movs	r6, #0
    a2f4:	6863      	ldr	r3, [r4, #4]
    a2f6:	466a      	mov	r2, sp
    a2f8:	4631      	mov	r1, r6
    a2fa:	4620      	mov	r0, r4
    a2fc:	4798      	blx	r3
    a2fe:	2800      	cmp	r0, #0
    a300:	d0e4      	beq.n	a2cc <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    a302:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    a304:	2c00      	cmp	r4, #0
    a306:	d1f5      	bne.n	a2f4 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    a308:	464c      	mov	r4, r9
    a30a:	e7e0      	b.n	a2ce <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a30c:	f003 031f 	and.w	r3, r3, #31
    a310:	2b02      	cmp	r3, #2
    a312:	f040 816e 	bne.w	a5f2 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    a316:	88e3      	ldrh	r3, [r4, #6]
    a318:	b10b      	cbz	r3, a31e <usbdc_cb_ctl_req+0x116>
			return false;
    a31a:	2000      	movs	r0, #0
    a31c:	e78c      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    a31e:	88a0      	ldrh	r0, [r4, #4]
    a320:	2100      	movs	r1, #0
    a322:	b2c0      	uxtb	r0, r0
    a324:	4b5d      	ldr	r3, [pc, #372]	; (a49c <usbdc_cb_ctl_req+0x294>)
    a326:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a328:	2301      	movs	r3, #1
    a32a:	2200      	movs	r2, #0
    a32c:	4611      	mov	r1, r2
    a32e:	4628      	mov	r0, r5
    a330:	4c55      	ldr	r4, [pc, #340]	; (a488 <usbdc_cb_ctl_req+0x280>)
    a332:	47a0      	blx	r4
		return true;
    a334:	2001      	movs	r0, #1
    a336:	e77f      	b.n	a238 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a338:	f003 031f 	and.w	r3, r3, #31
    a33c:	2b02      	cmp	r3, #2
    a33e:	f040 815a 	bne.w	a5f6 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    a342:	88e3      	ldrh	r3, [r4, #6]
    a344:	b10b      	cbz	r3, a34a <usbdc_cb_ctl_req+0x142>
			return false;
    a346:	2000      	movs	r0, #0
    a348:	e776      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    a34a:	88a0      	ldrh	r0, [r4, #4]
    a34c:	2101      	movs	r1, #1
    a34e:	b2c0      	uxtb	r0, r0
    a350:	4b52      	ldr	r3, [pc, #328]	; (a49c <usbdc_cb_ctl_req+0x294>)
    a352:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a354:	2301      	movs	r3, #1
    a356:	2200      	movs	r2, #0
    a358:	4611      	mov	r1, r2
    a35a:	4628      	mov	r0, r5
    a35c:	4c4a      	ldr	r4, [pc, #296]	; (a488 <usbdc_cb_ctl_req+0x280>)
    a35e:	47a0      	blx	r4
		return true;
    a360:	2001      	movs	r0, #1
    a362:	e769      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    a364:	8866      	ldrh	r6, [r4, #2]
    a366:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a368:	4a48      	ldr	r2, [pc, #288]	; (a48c <usbdc_cb_ctl_req+0x284>)
    a36a:	6813      	ldr	r3, [r2, #0]
    a36c:	7ed2      	ldrb	r2, [r2, #27]
    a36e:	6859      	ldr	r1, [r3, #4]
    a370:	6818      	ldr	r0, [r3, #0]
    a372:	4b47      	ldr	r3, [pc, #284]	; (a490 <usbdc_cb_ctl_req+0x288>)
    a374:	4798      	blx	r3
	if (NULL == ifc) {
    a376:	2800      	cmp	r0, #0
    a378:	d045      	beq.n	a406 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    a37a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    a37c:	78c2      	ldrb	r2, [r0, #3]
    a37e:	7881      	ldrb	r1, [r0, #2]
    a380:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    a384:	fa10 f181 	uxtah	r1, r0, r1
    a388:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    a38a:	2204      	movs	r2, #4
    a38c:	4b41      	ldr	r3, [pc, #260]	; (a494 <usbdc_cb_ctl_req+0x28c>)
    a38e:	4798      	blx	r3
    a390:	4603      	mov	r3, r0
    a392:	2800      	cmp	r0, #0
    a394:	d039      	beq.n	a40a <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a396:	2704      	movs	r7, #4
    a398:	4d3e      	ldr	r5, [pc, #248]	; (a494 <usbdc_cb_ctl_req+0x28c>)
    a39a:	e008      	b.n	a3ae <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    a39c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a39e:	7803      	ldrb	r3, [r0, #0]
    a3a0:	4418      	add	r0, r3
    a3a2:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a3a4:	463a      	mov	r2, r7
    a3a6:	9901      	ldr	r1, [sp, #4]
    a3a8:	47a8      	blx	r5
		if (NULL == ifc) {
    a3aa:	4603      	mov	r3, r0
    a3ac:	b378      	cbz	r0, a40e <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    a3ae:	789a      	ldrb	r2, [r3, #2]
    a3b0:	42a2      	cmp	r2, r4
    a3b2:	d1f3      	bne.n	a39c <usbdc_cb_ctl_req+0x194>
    a3b4:	78da      	ldrb	r2, [r3, #3]
    a3b6:	42b2      	cmp	r2, r6
    a3b8:	d1f0      	bne.n	a39c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    a3ba:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    a3bc:	4b33      	ldr	r3, [pc, #204]	; (a48c <usbdc_cb_ctl_req+0x284>)
    a3be:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    a3c0:	b33d      	cbz	r5, a412 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    a3c2:	2701      	movs	r7, #1
    a3c4:	686b      	ldr	r3, [r5, #4]
    a3c6:	466a      	mov	r2, sp
    a3c8:	4639      	mov	r1, r7
    a3ca:	4628      	mov	r0, r5
    a3cc:	4798      	blx	r3
    a3ce:	b120      	cbz	r0, a3da <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    a3d0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a3d2:	2d00      	cmp	r5, #0
    a3d4:	d1f6      	bne.n	a3c4 <usbdc_cb_ctl_req+0x1bc>
	return false;
    a3d6:	2000      	movs	r0, #0
    a3d8:	e72e      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    a3da:	686b      	ldr	r3, [r5, #4]
    a3dc:	466a      	mov	r2, sp
    a3de:	2100      	movs	r1, #0
    a3e0:	4628      	mov	r0, r5
    a3e2:	4798      	blx	r3
    a3e4:	b9b8      	cbnz	r0, a416 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    a3e6:	b136      	cbz	r6, a3f6 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    a3e8:	4a28      	ldr	r2, [pc, #160]	; (a48c <usbdc_cb_ctl_req+0x284>)
    a3ea:	2301      	movs	r3, #1
    a3ec:	fa03 f404 	lsl.w	r4, r3, r4
    a3f0:	7f53      	ldrb	r3, [r2, #29]
    a3f2:	4323      	orrs	r3, r4
    a3f4:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    a3f6:	2300      	movs	r3, #0
    a3f8:	461a      	mov	r2, r3
    a3fa:	4619      	mov	r1, r3
    a3fc:	4618      	mov	r0, r3
    a3fe:	4c22      	ldr	r4, [pc, #136]	; (a488 <usbdc_cb_ctl_req+0x280>)
    a400:	47a0      	blx	r4
			return true;
    a402:	2001      	movs	r0, #1
    a404:	e718      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return false;
    a406:	2000      	movs	r0, #0
    a408:	e716      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return false;
    a40a:	2000      	movs	r0, #0
    a40c:	e714      	b.n	a238 <usbdc_cb_ctl_req+0x30>
			return false;
    a40e:	2000      	movs	r0, #0
    a410:	e712      	b.n	a238 <usbdc_cb_ctl_req+0x30>
	return false;
    a412:	2000      	movs	r0, #0
    a414:	e710      	b.n	a238 <usbdc_cb_ctl_req+0x30>
			return false;
    a416:	2000      	movs	r0, #0
    a418:	e70e      	b.n	a238 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    a41a:	7862      	ldrb	r2, [r4, #1]
    a41c:	2a0a      	cmp	r2, #10
    a41e:	f200 80ec 	bhi.w	a5fa <usbdc_cb_ctl_req+0x3f2>
    a422:	e8df f012 	tbh	[pc, r2, lsl #1]
    a426:	008e      	.short	0x008e
    a428:	00ea00ea 	.word	0x00ea00ea
    a42c:	00ea00ea 	.word	0x00ea00ea
    a430:	000b00ea 	.word	0x000b00ea
    a434:	008200ea 	.word	0x008200ea
    a438:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    a43c:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    a43e:	0a13      	lsrs	r3, r2, #8
    a440:	2b02      	cmp	r3, #2
    a442:	d02d      	beq.n	a4a0 <usbdc_cb_ctl_req+0x298>
    a444:	2b03      	cmp	r3, #3
    a446:	d050      	beq.n	a4ea <usbdc_cb_ctl_req+0x2e2>
    a448:	2b01      	cmp	r3, #1
    a44a:	d001      	beq.n	a450 <usbdc_cb_ctl_req+0x248>
	return false;
    a44c:	2000      	movs	r0, #0
    a44e:	e6f3      	b.n	a238 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    a450:	88e2      	ldrh	r2, [r4, #6]
    a452:	2a12      	cmp	r2, #18
    a454:	bf28      	it	cs
    a456:	2212      	movcs	r2, #18
    a458:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    a45a:	4b0c      	ldr	r3, [pc, #48]	; (a48c <usbdc_cb_ctl_req+0x284>)
    a45c:	681b      	ldr	r3, [r3, #0]
    a45e:	2201      	movs	r2, #1
    a460:	6859      	ldr	r1, [r3, #4]
    a462:	6818      	ldr	r0, [r3, #0]
    a464:	4b0b      	ldr	r3, [pc, #44]	; (a494 <usbdc_cb_ctl_req+0x28c>)
    a466:	4798      	blx	r3
	if (!dev_desc) {
    a468:	4601      	mov	r1, r0
    a46a:	2800      	cmp	r0, #0
    a46c:	f000 80c7 	beq.w	a5fe <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    a470:	2300      	movs	r3, #0
    a472:	4622      	mov	r2, r4
    a474:	4628      	mov	r0, r5
    a476:	4c04      	ldr	r4, [pc, #16]	; (a488 <usbdc_cb_ctl_req+0x280>)
    a478:	47a0      	blx	r4
    a47a:	fab0 f080 	clz	r0, r0
    a47e:	0940      	lsrs	r0, r0, #5
    a480:	e6da      	b.n	a238 <usbdc_cb_ctl_req+0x30>
    a482:	bf00      	nop
    a484:	0000a09d 	.word	0x0000a09d
    a488:	0000a1e9 	.word	0x0000a1e9
    a48c:	20000e38 	.word	0x20000e38
    a490:	0000a7ad 	.word	0x0000a7ad
    a494:	0000a72d 	.word	0x0000a72d
    a498:	0000a051 	.word	0x0000a051
    a49c:	000051bd 	.word	0x000051bd
	uint16_t length   = req->wLength;
    a4a0:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a4a2:	4b5b      	ldr	r3, [pc, #364]	; (a610 <usbdc_cb_ctl_req+0x408>)
    a4a4:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    a4a6:	681b      	ldr	r3, [r3, #0]
    a4a8:	3201      	adds	r2, #1
    a4aa:	b2d2      	uxtb	r2, r2
    a4ac:	6859      	ldr	r1, [r3, #4]
    a4ae:	6818      	ldr	r0, [r3, #0]
    a4b0:	4b58      	ldr	r3, [pc, #352]	; (a614 <usbdc_cb_ctl_req+0x40c>)
    a4b2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a4b4:	4601      	mov	r1, r0
    a4b6:	2800      	cmp	r0, #0
    a4b8:	f000 80a3 	beq.w	a602 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    a4bc:	78c3      	ldrb	r3, [r0, #3]
    a4be:	7882      	ldrb	r2, [r0, #2]
    a4c0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    a4c4:	b292      	uxth	r2, r2
	if (length <= total_len) {
    a4c6:	4294      	cmp	r4, r2
    a4c8:	d90d      	bls.n	a4e6 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a4ca:	3e01      	subs	r6, #1
    a4cc:	4226      	tst	r6, r4
    a4ce:	bf0c      	ite	eq
    a4d0:	2301      	moveq	r3, #1
    a4d2:	2300      	movne	r3, #0
		length = total_len;
    a4d4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    a4d6:	4622      	mov	r2, r4
    a4d8:	4628      	mov	r0, r5
    a4da:	4c4f      	ldr	r4, [pc, #316]	; (a618 <usbdc_cb_ctl_req+0x410>)
    a4dc:	47a0      	blx	r4
    a4de:	fab0 f080 	clz	r0, r0
    a4e2:	0940      	lsrs	r0, r0, #5
    a4e4:	e6a8      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a4e6:	2300      	movs	r3, #0
    a4e8:	e7f5      	b.n	a4d6 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    a4ea:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a4ec:	4b48      	ldr	r3, [pc, #288]	; (a610 <usbdc_cb_ctl_req+0x408>)
    a4ee:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    a4f0:	681b      	ldr	r3, [r3, #0]
    a4f2:	b2d2      	uxtb	r2, r2
    a4f4:	6859      	ldr	r1, [r3, #4]
    a4f6:	6818      	ldr	r0, [r3, #0]
    a4f8:	4b48      	ldr	r3, [pc, #288]	; (a61c <usbdc_cb_ctl_req+0x414>)
    a4fa:	4798      	blx	r3
	if (NULL == str_desc) {
    a4fc:	4601      	mov	r1, r0
    a4fe:	2800      	cmp	r0, #0
    a500:	f000 8081 	beq.w	a606 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    a504:	7802      	ldrb	r2, [r0, #0]
    a506:	4294      	cmp	r4, r2
    a508:	d90d      	bls.n	a526 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a50a:	3e01      	subs	r6, #1
    a50c:	4226      	tst	r6, r4
    a50e:	bf0c      	ite	eq
    a510:	2301      	moveq	r3, #1
    a512:	2300      	movne	r3, #0
		length = str_desc[0];
    a514:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    a516:	4622      	mov	r2, r4
    a518:	4628      	mov	r0, r5
    a51a:	4c3f      	ldr	r4, [pc, #252]	; (a618 <usbdc_cb_ctl_req+0x410>)
    a51c:	47a0      	blx	r4
    a51e:	fab0 f080 	clz	r0, r0
    a522:	0940      	lsrs	r0, r0, #5
    a524:	e688      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a526:	2300      	movs	r3, #0
    a528:	e7f5      	b.n	a516 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    a52a:	4939      	ldr	r1, [pc, #228]	; (a610 <usbdc_cb_ctl_req+0x408>)
    a52c:	694b      	ldr	r3, [r1, #20]
    a52e:	7eca      	ldrb	r2, [r1, #27]
    a530:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    a532:	2300      	movs	r3, #0
    a534:	2201      	movs	r2, #1
    a536:	6949      	ldr	r1, [r1, #20]
    a538:	4628      	mov	r0, r5
    a53a:	4c37      	ldr	r4, [pc, #220]	; (a618 <usbdc_cb_ctl_req+0x410>)
    a53c:	47a0      	blx	r4
		return true;
    a53e:	2001      	movs	r0, #1
    a540:	e67a      	b.n	a238 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a542:	f003 031f 	and.w	r3, r3, #31
    a546:	2b01      	cmp	r3, #1
    a548:	d903      	bls.n	a552 <usbdc_cb_ctl_req+0x34a>
    a54a:	2b02      	cmp	r3, #2
    a54c:	d010      	beq.n	a570 <usbdc_cb_ctl_req+0x368>
		return false;
    a54e:	2000      	movs	r0, #0
    a550:	e672      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		st = 0;
    a552:	2300      	movs	r3, #0
    a554:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    a556:	492e      	ldr	r1, [pc, #184]	; (a610 <usbdc_cb_ctl_req+0x408>)
    a558:	694b      	ldr	r3, [r1, #20]
    a55a:	f8bd 2000 	ldrh.w	r2, [sp]
    a55e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    a560:	2300      	movs	r3, #0
    a562:	2202      	movs	r2, #2
    a564:	6949      	ldr	r1, [r1, #20]
    a566:	4628      	mov	r0, r5
    a568:	4c2b      	ldr	r4, [pc, #172]	; (a618 <usbdc_cb_ctl_req+0x410>)
    a56a:	47a0      	blx	r4
	return true;
    a56c:	2001      	movs	r0, #1
    a56e:	e663      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    a570:	88a0      	ldrh	r0, [r4, #4]
    a572:	2102      	movs	r1, #2
    a574:	b2c0      	uxtb	r0, r0
    a576:	4b2a      	ldr	r3, [pc, #168]	; (a620 <usbdc_cb_ctl_req+0x418>)
    a578:	4798      	blx	r3
		if (st < 0) {
    a57a:	2800      	cmp	r0, #0
    a57c:	db03      	blt.n	a586 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    a57e:	f000 0001 	and.w	r0, r0, #1
    a582:	9000      	str	r0, [sp, #0]
    a584:	e7e7      	b.n	a556 <usbdc_cb_ctl_req+0x34e>
			return false;
    a586:	2000      	movs	r0, #0
    a588:	e656      	b.n	a238 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    a58a:	4b21      	ldr	r3, [pc, #132]	; (a610 <usbdc_cb_ctl_req+0x408>)
    a58c:	7f5b      	ldrb	r3, [r3, #29]
    a58e:	88a2      	ldrh	r2, [r4, #4]
    a590:	4113      	asrs	r3, r2
    a592:	f013 0f01 	tst.w	r3, #1
    a596:	d012      	beq.n	a5be <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a598:	4b1d      	ldr	r3, [pc, #116]	; (a610 <usbdc_cb_ctl_req+0x408>)
    a59a:	691d      	ldr	r5, [r3, #16]
	return false;
    a59c:	2000      	movs	r0, #0
	while (NULL != func) {
    a59e:	2d00      	cmp	r5, #0
    a5a0:	f43f ae4a 	beq.w	a238 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    a5a4:	2602      	movs	r6, #2
    a5a6:	686b      	ldr	r3, [r5, #4]
    a5a8:	4622      	mov	r2, r4
    a5aa:	4631      	mov	r1, r6
    a5ac:	4628      	mov	r0, r5
    a5ae:	4798      	blx	r3
    a5b0:	2800      	cmp	r0, #0
    a5b2:	da0f      	bge.n	a5d4 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    a5b4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a5b6:	2d00      	cmp	r5, #0
    a5b8:	d1f5      	bne.n	a5a6 <usbdc_cb_ctl_req+0x39e>
	return false;
    a5ba:	2000      	movs	r0, #0
    a5bc:	e63c      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    a5be:	4914      	ldr	r1, [pc, #80]	; (a610 <usbdc_cb_ctl_req+0x408>)
    a5c0:	694b      	ldr	r3, [r1, #20]
    a5c2:	2000      	movs	r0, #0
    a5c4:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a5c6:	4603      	mov	r3, r0
    a5c8:	2201      	movs	r2, #1
    a5ca:	6949      	ldr	r1, [r1, #20]
    a5cc:	4c12      	ldr	r4, [pc, #72]	; (a618 <usbdc_cb_ctl_req+0x410>)
    a5ce:	47a0      	blx	r4
		return true;
    a5d0:	2001      	movs	r0, #1
    a5d2:	e631      	b.n	a238 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    a5d4:	490e      	ldr	r1, [pc, #56]	; (a610 <usbdc_cb_ctl_req+0x408>)
    a5d6:	694b      	ldr	r3, [r1, #20]
    a5d8:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a5da:	2300      	movs	r3, #0
    a5dc:	2201      	movs	r2, #1
    a5de:	6949      	ldr	r1, [r1, #20]
    a5e0:	4618      	mov	r0, r3
    a5e2:	4c0d      	ldr	r4, [pc, #52]	; (a618 <usbdc_cb_ctl_req+0x410>)
    a5e4:	47a0      	blx	r4
			return true;
    a5e6:	2001      	movs	r0, #1
    a5e8:	e626      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return true;
    a5ea:	2001      	movs	r0, #1
    a5ec:	e624      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return false;
    a5ee:	2000      	movs	r0, #0
    a5f0:	e622      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return false;
    a5f2:	2000      	movs	r0, #0
    a5f4:	e620      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return false;
    a5f6:	2000      	movs	r0, #0
    a5f8:	e61e      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return false;
    a5fa:	2000      	movs	r0, #0
    a5fc:	e61c      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return false;
    a5fe:	2000      	movs	r0, #0
    a600:	e61a      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return false;
    a602:	2000      	movs	r0, #0
    a604:	e618      	b.n	a238 <usbdc_cb_ctl_req+0x30>
		return false;
    a606:	2000      	movs	r0, #0
    a608:	e616      	b.n	a238 <usbdc_cb_ctl_req+0x30>
			return false;
    a60a:	2000      	movs	r0, #0
    a60c:	e614      	b.n	a238 <usbdc_cb_ctl_req+0x30>
    a60e:	bf00      	nop
    a610:	20000e38 	.word	0x20000e38
    a614:	0000a7ad 	.word	0x0000a7ad
    a618:	0000a1e9 	.word	0x0000a1e9
    a61c:	0000a815 	.word	0x0000a815
    a620:	000051bd 	.word	0x000051bd

0000a624 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    a624:	b508      	push	{r3, lr}
	switch (type) {
    a626:	2801      	cmp	r0, #1
    a628:	d007      	beq.n	a63a <usbdc_register_handler+0x16>
    a62a:	b110      	cbz	r0, a632 <usbdc_register_handler+0xe>
    a62c:	2802      	cmp	r0, #2
    a62e:	d008      	beq.n	a642 <usbdc_register_handler+0x1e>
    a630:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    a632:	4806      	ldr	r0, [pc, #24]	; (a64c <usbdc_register_handler+0x28>)
    a634:	4b06      	ldr	r3, [pc, #24]	; (a650 <usbdc_register_handler+0x2c>)
    a636:	4798      	blx	r3
		break;
    a638:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    a63a:	4806      	ldr	r0, [pc, #24]	; (a654 <usbdc_register_handler+0x30>)
    a63c:	4b04      	ldr	r3, [pc, #16]	; (a650 <usbdc_register_handler+0x2c>)
    a63e:	4798      	blx	r3
		break;
    a640:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    a642:	4805      	ldr	r0, [pc, #20]	; (a658 <usbdc_register_handler+0x34>)
    a644:	4b02      	ldr	r3, [pc, #8]	; (a650 <usbdc_register_handler+0x2c>)
    a646:	4798      	blx	r3
    a648:	bd08      	pop	{r3, pc}
    a64a:	bf00      	nop
    a64c:	20000e3c 	.word	0x20000e3c
    a650:	000052cd 	.word	0x000052cd
    a654:	20000e40 	.word	0x20000e40
    a658:	20000e44 	.word	0x20000e44

0000a65c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    a65c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    a65e:	4605      	mov	r5, r0
    a660:	f240 3255 	movw	r2, #853	; 0x355
    a664:	490c      	ldr	r1, [pc, #48]	; (a698 <usbdc_init+0x3c>)
    a666:	3000      	adds	r0, #0
    a668:	bf18      	it	ne
    a66a:	2001      	movne	r0, #1
    a66c:	4b0b      	ldr	r3, [pc, #44]	; (a69c <usbdc_init+0x40>)
    a66e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    a670:	4b0b      	ldr	r3, [pc, #44]	; (a6a0 <usbdc_init+0x44>)
    a672:	4798      	blx	r3
	if (rc < 0) {
    a674:	2800      	cmp	r0, #0
    a676:	db0e      	blt.n	a696 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    a678:	4c0a      	ldr	r4, [pc, #40]	; (a6a4 <usbdc_init+0x48>)
    a67a:	2220      	movs	r2, #32
    a67c:	2100      	movs	r1, #0
    a67e:	4620      	mov	r0, r4
    a680:	4b09      	ldr	r3, [pc, #36]	; (a6a8 <usbdc_init+0x4c>)
    a682:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    a684:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    a686:	4909      	ldr	r1, [pc, #36]	; (a6ac <usbdc_init+0x50>)
    a688:	2000      	movs	r0, #0
    a68a:	4c09      	ldr	r4, [pc, #36]	; (a6b0 <usbdc_init+0x54>)
    a68c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    a68e:	4909      	ldr	r1, [pc, #36]	; (a6b4 <usbdc_init+0x58>)
    a690:	2001      	movs	r0, #1
    a692:	47a0      	blx	r4

	return 0;
    a694:	2000      	movs	r0, #0
}
    a696:	bd38      	pop	{r3, r4, r5, pc}
    a698:	0000c280 	.word	0x0000c280
    a69c:	00005271 	.word	0x00005271
    a6a0:	00004f25 	.word	0x00004f25
    a6a4:	20000e38 	.word	0x20000e38
    a6a8:	0000b1fb 	.word	0x0000b1fb
    a6ac:	0000a0dd 	.word	0x0000a0dd
    a6b0:	00004f8d 	.word	0x00004f8d
    a6b4:	0000a1c9 	.word	0x0000a1c9

0000a6b8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    a6b8:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    a6ba:	4601      	mov	r1, r0
    a6bc:	4801      	ldr	r0, [pc, #4]	; (a6c4 <usbdc_register_function+0xc>)
    a6be:	4b02      	ldr	r3, [pc, #8]	; (a6c8 <usbdc_register_function+0x10>)
    a6c0:	4798      	blx	r3
    a6c2:	bd08      	pop	{r3, pc}
    a6c4:	20000e48 	.word	0x20000e48
    a6c8:	000052cd 	.word	0x000052cd

0000a6cc <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    a6cc:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    a6ce:	4b0a      	ldr	r3, [pc, #40]	; (a6f8 <usbdc_start+0x2c>)
    a6d0:	7e9b      	ldrb	r3, [r3, #26]
    a6d2:	b95b      	cbnz	r3, a6ec <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    a6d4:	b168      	cbz	r0, a6f2 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    a6d6:	4b08      	ldr	r3, [pc, #32]	; (a6f8 <usbdc_start+0x2c>)
    a6d8:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    a6da:	6802      	ldr	r2, [r0, #0]
    a6dc:	79d2      	ldrb	r2, [r2, #7]
    a6de:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    a6e0:	2201      	movs	r2, #1
    a6e2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    a6e4:	4b05      	ldr	r3, [pc, #20]	; (a6fc <usbdc_start+0x30>)
    a6e6:	4798      	blx	r3
	return ERR_NONE;
    a6e8:	2000      	movs	r0, #0
    a6ea:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    a6ec:	f06f 0003 	mvn.w	r0, #3
    a6f0:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    a6f2:	f06f 0008 	mvn.w	r0, #8
}
    a6f6:	bd08      	pop	{r3, pc}
    a6f8:	20000e38 	.word	0x20000e38
    a6fc:	00004f99 	.word	0x00004f99

0000a700 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    a700:	b508      	push	{r3, lr}
	usb_d_attach();
    a702:	4b01      	ldr	r3, [pc, #4]	; (a708 <usbdc_attach+0x8>)
    a704:	4798      	blx	r3
    a706:	bd08      	pop	{r3, pc}
    a708:	00004fa5 	.word	0x00004fa5

0000a70c <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    a70c:	4b01      	ldr	r3, [pc, #4]	; (a714 <usbdc_get_ctrl_buffer+0x8>)
    a70e:	6958      	ldr	r0, [r3, #20]
    a710:	4770      	bx	lr
    a712:	bf00      	nop
    a714:	20000e38 	.word	0x20000e38

0000a718 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    a718:	4b03      	ldr	r3, [pc, #12]	; (a728 <usbdc_get_state+0x10>)
    a71a:	7e98      	ldrb	r0, [r3, #26]
    a71c:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    a720:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    a722:	bf18      	it	ne
    a724:	2010      	movne	r0, #16
    a726:	4770      	bx	lr
    a728:	20000e38 	.word	0x20000e38

0000a72c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    a72c:	4288      	cmp	r0, r1
    a72e:	d214      	bcs.n	a75a <usb_find_desc+0x2e>
	return desc[0];
    a730:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a732:	2b01      	cmp	r3, #1
    a734:	d913      	bls.n	a75e <usb_find_desc+0x32>
{
    a736:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    a738:	7844      	ldrb	r4, [r0, #1]
    a73a:	4294      	cmp	r4, r2
    a73c:	d00a      	beq.n	a754 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    a73e:	4418      	add	r0, r3
	while (desc < eof) {
    a740:	4281      	cmp	r1, r0
    a742:	d906      	bls.n	a752 <usb_find_desc+0x26>
	return desc[0];
    a744:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a746:	2b01      	cmp	r3, #1
    a748:	d90b      	bls.n	a762 <usb_find_desc+0x36>
	return desc[1];
    a74a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    a74c:	4294      	cmp	r4, r2
    a74e:	d1f6      	bne.n	a73e <usb_find_desc+0x12>
    a750:	e000      	b.n	a754 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    a752:	2000      	movs	r0, #0
}
    a754:	f85d 4b04 	ldr.w	r4, [sp], #4
    a758:	4770      	bx	lr
	return NULL;
    a75a:	2000      	movs	r0, #0
    a75c:	4770      	bx	lr
		_desc_len_check();
    a75e:	2000      	movs	r0, #0
    a760:	4770      	bx	lr
    a762:	2000      	movs	r0, #0
    a764:	e7f6      	b.n	a754 <usb_find_desc+0x28>

0000a766 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    a766:	4288      	cmp	r0, r1
    a768:	d216      	bcs.n	a798 <usb_find_ep_desc+0x32>
	return desc[0];
    a76a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a76c:	2b01      	cmp	r3, #1
    a76e:	d915      	bls.n	a79c <usb_find_ep_desc+0x36>
	return desc[1];
    a770:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    a772:	2a04      	cmp	r2, #4
    a774:	d014      	beq.n	a7a0 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    a776:	2a05      	cmp	r2, #5
    a778:	d00b      	beq.n	a792 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    a77a:	4418      	add	r0, r3
	while (desc < eof) {
    a77c:	4281      	cmp	r1, r0
    a77e:	d909      	bls.n	a794 <usb_find_ep_desc+0x2e>
	return desc[0];
    a780:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a782:	2b01      	cmp	r3, #1
    a784:	d90e      	bls.n	a7a4 <usb_find_ep_desc+0x3e>
	return desc[1];
    a786:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    a788:	2a04      	cmp	r2, #4
    a78a:	d00d      	beq.n	a7a8 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    a78c:	2a05      	cmp	r2, #5
    a78e:	d1f4      	bne.n	a77a <usb_find_ep_desc+0x14>
    a790:	e00b      	b.n	a7aa <usb_find_ep_desc+0x44>
    a792:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    a794:	2000      	movs	r0, #0
    a796:	4770      	bx	lr
    a798:	2000      	movs	r0, #0
    a79a:	4770      	bx	lr
		_desc_len_check();
    a79c:	2000      	movs	r0, #0
    a79e:	4770      	bx	lr
	return NULL;
    a7a0:	2000      	movs	r0, #0
    a7a2:	4770      	bx	lr
		_desc_len_check();
    a7a4:	2000      	movs	r0, #0
    a7a6:	4770      	bx	lr
	return NULL;
    a7a8:	2000      	movs	r0, #0
}
    a7aa:	4770      	bx	lr

0000a7ac <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    a7ac:	b538      	push	{r3, r4, r5, lr}
    a7ae:	460c      	mov	r4, r1
    a7b0:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    a7b2:	2202      	movs	r2, #2
    a7b4:	4b16      	ldr	r3, [pc, #88]	; (a810 <usb_find_cfg_desc+0x64>)
    a7b6:	4798      	blx	r3
	if (!desc) {
    a7b8:	4603      	mov	r3, r0
    a7ba:	b1e8      	cbz	r0, a7f8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    a7bc:	4284      	cmp	r4, r0
    a7be:	d91d      	bls.n	a7fc <usb_find_cfg_desc+0x50>
		_desc_len_check();
    a7c0:	7802      	ldrb	r2, [r0, #0]
    a7c2:	2a01      	cmp	r2, #1
    a7c4:	d91c      	bls.n	a800 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    a7c6:	7842      	ldrb	r2, [r0, #1]
    a7c8:	2a02      	cmp	r2, #2
    a7ca:	d11b      	bne.n	a804 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    a7cc:	7942      	ldrb	r2, [r0, #5]
    a7ce:	42aa      	cmp	r2, r5
    a7d0:	d012      	beq.n	a7f8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    a7d2:	78d9      	ldrb	r1, [r3, #3]
    a7d4:	789a      	ldrb	r2, [r3, #2]
    a7d6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    a7da:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    a7de:	429c      	cmp	r4, r3
    a7e0:	d909      	bls.n	a7f6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    a7e2:	781a      	ldrb	r2, [r3, #0]
    a7e4:	2a01      	cmp	r2, #1
    a7e6:	d90f      	bls.n	a808 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    a7e8:	785a      	ldrb	r2, [r3, #1]
    a7ea:	2a02      	cmp	r2, #2
    a7ec:	d10e      	bne.n	a80c <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    a7ee:	795a      	ldrb	r2, [r3, #5]
    a7f0:	42aa      	cmp	r2, r5
    a7f2:	d1ee      	bne.n	a7d2 <usb_find_cfg_desc+0x26>
    a7f4:	e000      	b.n	a7f8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    a7f6:	2300      	movs	r3, #0
}
    a7f8:	4618      	mov	r0, r3
    a7fa:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    a7fc:	2300      	movs	r3, #0
    a7fe:	e7fb      	b.n	a7f8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    a800:	2300      	movs	r3, #0
    a802:	e7f9      	b.n	a7f8 <usb_find_cfg_desc+0x4c>
	return NULL;
    a804:	2300      	movs	r3, #0
    a806:	e7f7      	b.n	a7f8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    a808:	2300      	movs	r3, #0
    a80a:	e7f5      	b.n	a7f8 <usb_find_cfg_desc+0x4c>
	return NULL;
    a80c:	2300      	movs	r3, #0
    a80e:	e7f3      	b.n	a7f8 <usb_find_cfg_desc+0x4c>
    a810:	0000a72d 	.word	0x0000a72d

0000a814 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    a814:	4288      	cmp	r0, r1
    a816:	d217      	bcs.n	a848 <usb_find_str_desc+0x34>
{
    a818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a81c:	460d      	mov	r5, r1
    a81e:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    a820:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    a822:	f04f 0803 	mov.w	r8, #3
    a826:	4f0c      	ldr	r7, [pc, #48]	; (a858 <usb_find_str_desc+0x44>)
    a828:	4642      	mov	r2, r8
    a82a:	4629      	mov	r1, r5
    a82c:	47b8      	blx	r7
		if (desc) {
    a82e:	4603      	mov	r3, r0
    a830:	b170      	cbz	r0, a850 <usb_find_str_desc+0x3c>
	return desc[0];
    a832:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    a834:	2801      	cmp	r0, #1
    a836:	d90a      	bls.n	a84e <usb_find_str_desc+0x3a>
			if (i == str_index) {
    a838:	42a6      	cmp	r6, r4
    a83a:	d009      	beq.n	a850 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    a83c:	4418      	add	r0, r3
    a83e:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    a840:	4285      	cmp	r5, r0
    a842:	d8f1      	bhi.n	a828 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    a844:	2300      	movs	r3, #0
    a846:	e003      	b.n	a850 <usb_find_str_desc+0x3c>
    a848:	2300      	movs	r3, #0
}
    a84a:	4618      	mov	r0, r3
    a84c:	4770      	bx	lr
			_desc_len_check();
    a84e:	2300      	movs	r3, #0
}
    a850:	4618      	mov	r0, r3
    a852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a856:	bf00      	nop
    a858:	0000a72d 	.word	0x0000a72d

0000a85c <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    a85c:	4b3a      	ldr	r3, [pc, #232]	; (a948 <hiddf_demo_sof_event+0xec>)
    a85e:	791b      	ldrb	r3, [r3, #4]
    a860:	2b0a      	cmp	r3, #10
    a862:	d803      	bhi.n	a86c <hiddf_demo_sof_event+0x10>
    a864:	3301      	adds	r3, #1
    a866:	4a38      	ldr	r2, [pc, #224]	; (a948 <hiddf_demo_sof_event+0xec>)
    a868:	7113      	strb	r3, [r2, #4]
    a86a:	4770      	bx	lr
{
    a86c:	b570      	push	{r4, r5, r6, lr}
    a86e:	b084      	sub	sp, #16
		interval = 0;
    a870:	4b35      	ldr	r3, [pc, #212]	; (a948 <hiddf_demo_sof_event+0xec>)
    a872:	2200      	movs	r2, #0
    a874:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    a876:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    a878:	a801      	add	r0, sp, #4
    a87a:	4b34      	ldr	r3, [pc, #208]	; (a94c <hiddf_demo_sof_event+0xf0>)
    a87c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    a87e:	096b      	lsrs	r3, r5, #5
    a880:	4933      	ldr	r1, [pc, #204]	; (a950 <hiddf_demo_sof_event+0xf4>)
    a882:	01db      	lsls	r3, r3, #7
    a884:	18ca      	adds	r2, r1, r3
    a886:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    a888:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    a88a:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    a88c:	405c      	eors	r4, r3
    a88e:	400c      	ands	r4, r1
    a890:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    a892:	a801      	add	r0, sp, #4
    a894:	4b2f      	ldr	r3, [pc, #188]	; (a954 <hiddf_demo_sof_event+0xf8>)
    a896:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    a898:	f005 051f 	and.w	r5, r5, #31
    a89c:	2301      	movs	r3, #1
    a89e:	fa03 f505 	lsl.w	r5, r3, r5
    a8a2:	4225      	tst	r5, r4
    a8a4:	d040      	beq.n	a928 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    a8a6:	4b28      	ldr	r3, [pc, #160]	; (a948 <hiddf_demo_sof_event+0xec>)
    a8a8:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    a8aa:	a802      	add	r0, sp, #8
    a8ac:	4b27      	ldr	r3, [pc, #156]	; (a94c <hiddf_demo_sof_event+0xf0>)
    a8ae:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    a8b0:	096b      	lsrs	r3, r5, #5
    a8b2:	4927      	ldr	r1, [pc, #156]	; (a950 <hiddf_demo_sof_event+0xf4>)
    a8b4:	01db      	lsls	r3, r3, #7
    a8b6:	18ca      	adds	r2, r1, r3
    a8b8:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    a8ba:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    a8bc:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    a8be:	405c      	eors	r4, r3
    a8c0:	400c      	ands	r4, r1
    a8c2:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    a8c4:	a802      	add	r0, sp, #8
    a8c6:	4b23      	ldr	r3, [pc, #140]	; (a954 <hiddf_demo_sof_event+0xf8>)
    a8c8:	4798      	blx	r3
    a8ca:	f005 051f 	and.w	r5, r5, #31
    a8ce:	2301      	movs	r3, #1
    a8d0:	fa03 f505 	lsl.w	r5, r3, r5
    a8d4:	4225      	tst	r5, r4
    a8d6:	d02d      	beq.n	a934 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    a8d8:	4d1b      	ldr	r5, [pc, #108]	; (a948 <hiddf_demo_sof_event+0xec>)
    a8da:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    a8dc:	a803      	add	r0, sp, #12
    a8de:	4b1b      	ldr	r3, [pc, #108]	; (a94c <hiddf_demo_sof_event+0xf0>)
    a8e0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    a8e2:	0973      	lsrs	r3, r6, #5
    a8e4:	491a      	ldr	r1, [pc, #104]	; (a950 <hiddf_demo_sof_event+0xf4>)
    a8e6:	01db      	lsls	r3, r3, #7
    a8e8:	18ca      	adds	r2, r1, r3
    a8ea:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    a8ec:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    a8ee:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    a8f0:	405c      	eors	r4, r3
    a8f2:	400c      	ands	r4, r1
    a8f4:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    a8f6:	a803      	add	r0, sp, #12
    a8f8:	4b16      	ldr	r3, [pc, #88]	; (a954 <hiddf_demo_sof_event+0xf8>)
    a8fa:	4798      	blx	r3
    a8fc:	f006 061f 	and.w	r6, r6, #31
    a900:	2301      	movs	r3, #1
    a902:	40b3      	lsls	r3, r6
    a904:	401c      	ands	r4, r3
    a906:	bf0c      	ite	eq
    a908:	2301      	moveq	r3, #1
    a90a:	2300      	movne	r3, #0
    a90c:	7d2a      	ldrb	r2, [r5, #20]
    a90e:	429a      	cmp	r2, r3
    a910:	d008      	beq.n	a924 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    a912:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    a914:	b19c      	cbz	r4, a93e <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    a916:	2200      	movs	r2, #0
    a918:	4b0f      	ldr	r3, [pc, #60]	; (a958 <hiddf_demo_sof_event+0xfc>)
    a91a:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    a91c:	2101      	movs	r1, #1
    a91e:	480e      	ldr	r0, [pc, #56]	; (a958 <hiddf_demo_sof_event+0xfc>)
    a920:	4b0e      	ldr	r3, [pc, #56]	; (a95c <hiddf_demo_sof_event+0x100>)
    a922:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    a924:	b004      	add	sp, #16
    a926:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    a928:	4619      	mov	r1, r3
    a92a:	f06f 0004 	mvn.w	r0, #4
    a92e:	4b0c      	ldr	r3, [pc, #48]	; (a960 <hiddf_demo_sof_event+0x104>)
    a930:	4798      	blx	r3
    a932:	e7b8      	b.n	a8a6 <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    a934:	4619      	mov	r1, r3
    a936:	2005      	movs	r0, #5
    a938:	4b09      	ldr	r3, [pc, #36]	; (a960 <hiddf_demo_sof_event+0x104>)
    a93a:	4798      	blx	r3
    a93c:	e7cc      	b.n	a8d8 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    a93e:	2201      	movs	r2, #1
    a940:	4b05      	ldr	r3, [pc, #20]	; (a958 <hiddf_demo_sof_event+0xfc>)
    a942:	709a      	strb	r2, [r3, #2]
    a944:	e7ea      	b.n	a91c <hiddf_demo_sof_event+0xc0>
    a946:	bf00      	nop
    a948:	20000e58 	.word	0x20000e58
    a94c:	000040c9 	.word	0x000040c9
    a950:	41008000 	.word	0x41008000
    a954:	000040d7 	.word	0x000040d7
    a958:	200003b8 	.word	0x200003b8
    a95c:	00009aa9 	.word	0x00009aa9
    a960:	00009d3d 	.word	0x00009d3d

0000a964 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    a964:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a966:	4805      	ldr	r0, [pc, #20]	; (a97c <composite_device_init+0x18>)
    a968:	4b05      	ldr	r3, [pc, #20]	; (a980 <composite_device_init+0x1c>)
    a96a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    a96c:	4b05      	ldr	r3, [pc, #20]	; (a984 <composite_device_init+0x20>)
    a96e:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    a970:	4b05      	ldr	r3, [pc, #20]	; (a988 <composite_device_init+0x24>)
    a972:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    a974:	4b05      	ldr	r3, [pc, #20]	; (a98c <composite_device_init+0x28>)
    a976:	4798      	blx	r3
    a978:	bd08      	pop	{r3, pc}
    a97a:	bf00      	nop
    a97c:	20000e70 	.word	0x20000e70
    a980:	0000a65d 	.word	0x0000a65d
    a984:	00009825 	.word	0x00009825
    a988:	00009cf9 	.word	0x00009cf9
    a98c:	00009a65 	.word	0x00009a65

0000a990 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    a990:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    a992:	4803      	ldr	r0, [pc, #12]	; (a9a0 <composite_device_start+0x10>)
    a994:	4b03      	ldr	r3, [pc, #12]	; (a9a4 <composite_device_start+0x14>)
    a996:	4798      	blx	r3
	usbdc_attach();
    a998:	4b03      	ldr	r3, [pc, #12]	; (a9a8 <composite_device_start+0x18>)
    a99a:	4798      	blx	r3
    a99c:	bd08      	pop	{r3, pc}
    a99e:	bf00      	nop
    a9a0:	200003c4 	.word	0x200003c4
    a9a4:	0000a6cd 	.word	0x0000a6cd
    a9a8:	0000a701 	.word	0x0000a701

0000a9ac <usb_init>:
		}
	}
}

void usb_init(void)
{
    a9ac:	b508      	push	{r3, lr}

	composite_device_init();
    a9ae:	4b01      	ldr	r3, [pc, #4]	; (a9b4 <usb_init+0x8>)
    a9b0:	4798      	blx	r3
    a9b2:	bd08      	pop	{r3, pc}
    a9b4:	0000a965 	.word	0x0000a965

0000a9b8 <__aeabi_drsub>:
    a9b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    a9bc:	e002      	b.n	a9c4 <__adddf3>
    a9be:	bf00      	nop

0000a9c0 <__aeabi_dsub>:
    a9c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000a9c4 <__adddf3>:
    a9c4:	b530      	push	{r4, r5, lr}
    a9c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    a9ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
    a9ce:	ea94 0f05 	teq	r4, r5
    a9d2:	bf08      	it	eq
    a9d4:	ea90 0f02 	teqeq	r0, r2
    a9d8:	bf1f      	itttt	ne
    a9da:	ea54 0c00 	orrsne.w	ip, r4, r0
    a9de:	ea55 0c02 	orrsne.w	ip, r5, r2
    a9e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    a9e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a9ea:	f000 80e2 	beq.w	abb2 <__adddf3+0x1ee>
    a9ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
    a9f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    a9f6:	bfb8      	it	lt
    a9f8:	426d      	neglt	r5, r5
    a9fa:	dd0c      	ble.n	aa16 <__adddf3+0x52>
    a9fc:	442c      	add	r4, r5
    a9fe:	ea80 0202 	eor.w	r2, r0, r2
    aa02:	ea81 0303 	eor.w	r3, r1, r3
    aa06:	ea82 0000 	eor.w	r0, r2, r0
    aa0a:	ea83 0101 	eor.w	r1, r3, r1
    aa0e:	ea80 0202 	eor.w	r2, r0, r2
    aa12:	ea81 0303 	eor.w	r3, r1, r3
    aa16:	2d36      	cmp	r5, #54	; 0x36
    aa18:	bf88      	it	hi
    aa1a:	bd30      	pophi	{r4, r5, pc}
    aa1c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    aa20:	ea4f 3101 	mov.w	r1, r1, lsl #12
    aa24:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    aa28:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    aa2c:	d002      	beq.n	aa34 <__adddf3+0x70>
    aa2e:	4240      	negs	r0, r0
    aa30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    aa34:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    aa38:	ea4f 3303 	mov.w	r3, r3, lsl #12
    aa3c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    aa40:	d002      	beq.n	aa48 <__adddf3+0x84>
    aa42:	4252      	negs	r2, r2
    aa44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    aa48:	ea94 0f05 	teq	r4, r5
    aa4c:	f000 80a7 	beq.w	ab9e <__adddf3+0x1da>
    aa50:	f1a4 0401 	sub.w	r4, r4, #1
    aa54:	f1d5 0e20 	rsbs	lr, r5, #32
    aa58:	db0d      	blt.n	aa76 <__adddf3+0xb2>
    aa5a:	fa02 fc0e 	lsl.w	ip, r2, lr
    aa5e:	fa22 f205 	lsr.w	r2, r2, r5
    aa62:	1880      	adds	r0, r0, r2
    aa64:	f141 0100 	adc.w	r1, r1, #0
    aa68:	fa03 f20e 	lsl.w	r2, r3, lr
    aa6c:	1880      	adds	r0, r0, r2
    aa6e:	fa43 f305 	asr.w	r3, r3, r5
    aa72:	4159      	adcs	r1, r3
    aa74:	e00e      	b.n	aa94 <__adddf3+0xd0>
    aa76:	f1a5 0520 	sub.w	r5, r5, #32
    aa7a:	f10e 0e20 	add.w	lr, lr, #32
    aa7e:	2a01      	cmp	r2, #1
    aa80:	fa03 fc0e 	lsl.w	ip, r3, lr
    aa84:	bf28      	it	cs
    aa86:	f04c 0c02 	orrcs.w	ip, ip, #2
    aa8a:	fa43 f305 	asr.w	r3, r3, r5
    aa8e:	18c0      	adds	r0, r0, r3
    aa90:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    aa94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    aa98:	d507      	bpl.n	aaaa <__adddf3+0xe6>
    aa9a:	f04f 0e00 	mov.w	lr, #0
    aa9e:	f1dc 0c00 	rsbs	ip, ip, #0
    aaa2:	eb7e 0000 	sbcs.w	r0, lr, r0
    aaa6:	eb6e 0101 	sbc.w	r1, lr, r1
    aaaa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    aaae:	d31b      	bcc.n	aae8 <__adddf3+0x124>
    aab0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    aab4:	d30c      	bcc.n	aad0 <__adddf3+0x10c>
    aab6:	0849      	lsrs	r1, r1, #1
    aab8:	ea5f 0030 	movs.w	r0, r0, rrx
    aabc:	ea4f 0c3c 	mov.w	ip, ip, rrx
    aac0:	f104 0401 	add.w	r4, r4, #1
    aac4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    aac8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    aacc:	f080 809a 	bcs.w	ac04 <__adddf3+0x240>
    aad0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    aad4:	bf08      	it	eq
    aad6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    aada:	f150 0000 	adcs.w	r0, r0, #0
    aade:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    aae2:	ea41 0105 	orr.w	r1, r1, r5
    aae6:	bd30      	pop	{r4, r5, pc}
    aae8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    aaec:	4140      	adcs	r0, r0
    aaee:	eb41 0101 	adc.w	r1, r1, r1
    aaf2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    aaf6:	f1a4 0401 	sub.w	r4, r4, #1
    aafa:	d1e9      	bne.n	aad0 <__adddf3+0x10c>
    aafc:	f091 0f00 	teq	r1, #0
    ab00:	bf04      	itt	eq
    ab02:	4601      	moveq	r1, r0
    ab04:	2000      	moveq	r0, #0
    ab06:	fab1 f381 	clz	r3, r1
    ab0a:	bf08      	it	eq
    ab0c:	3320      	addeq	r3, #32
    ab0e:	f1a3 030b 	sub.w	r3, r3, #11
    ab12:	f1b3 0220 	subs.w	r2, r3, #32
    ab16:	da0c      	bge.n	ab32 <__adddf3+0x16e>
    ab18:	320c      	adds	r2, #12
    ab1a:	dd08      	ble.n	ab2e <__adddf3+0x16a>
    ab1c:	f102 0c14 	add.w	ip, r2, #20
    ab20:	f1c2 020c 	rsb	r2, r2, #12
    ab24:	fa01 f00c 	lsl.w	r0, r1, ip
    ab28:	fa21 f102 	lsr.w	r1, r1, r2
    ab2c:	e00c      	b.n	ab48 <__adddf3+0x184>
    ab2e:	f102 0214 	add.w	r2, r2, #20
    ab32:	bfd8      	it	le
    ab34:	f1c2 0c20 	rsble	ip, r2, #32
    ab38:	fa01 f102 	lsl.w	r1, r1, r2
    ab3c:	fa20 fc0c 	lsr.w	ip, r0, ip
    ab40:	bfdc      	itt	le
    ab42:	ea41 010c 	orrle.w	r1, r1, ip
    ab46:	4090      	lslle	r0, r2
    ab48:	1ae4      	subs	r4, r4, r3
    ab4a:	bfa2      	ittt	ge
    ab4c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    ab50:	4329      	orrge	r1, r5
    ab52:	bd30      	popge	{r4, r5, pc}
    ab54:	ea6f 0404 	mvn.w	r4, r4
    ab58:	3c1f      	subs	r4, #31
    ab5a:	da1c      	bge.n	ab96 <__adddf3+0x1d2>
    ab5c:	340c      	adds	r4, #12
    ab5e:	dc0e      	bgt.n	ab7e <__adddf3+0x1ba>
    ab60:	f104 0414 	add.w	r4, r4, #20
    ab64:	f1c4 0220 	rsb	r2, r4, #32
    ab68:	fa20 f004 	lsr.w	r0, r0, r4
    ab6c:	fa01 f302 	lsl.w	r3, r1, r2
    ab70:	ea40 0003 	orr.w	r0, r0, r3
    ab74:	fa21 f304 	lsr.w	r3, r1, r4
    ab78:	ea45 0103 	orr.w	r1, r5, r3
    ab7c:	bd30      	pop	{r4, r5, pc}
    ab7e:	f1c4 040c 	rsb	r4, r4, #12
    ab82:	f1c4 0220 	rsb	r2, r4, #32
    ab86:	fa20 f002 	lsr.w	r0, r0, r2
    ab8a:	fa01 f304 	lsl.w	r3, r1, r4
    ab8e:	ea40 0003 	orr.w	r0, r0, r3
    ab92:	4629      	mov	r1, r5
    ab94:	bd30      	pop	{r4, r5, pc}
    ab96:	fa21 f004 	lsr.w	r0, r1, r4
    ab9a:	4629      	mov	r1, r5
    ab9c:	bd30      	pop	{r4, r5, pc}
    ab9e:	f094 0f00 	teq	r4, #0
    aba2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    aba6:	bf06      	itte	eq
    aba8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    abac:	3401      	addeq	r4, #1
    abae:	3d01      	subne	r5, #1
    abb0:	e74e      	b.n	aa50 <__adddf3+0x8c>
    abb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    abb6:	bf18      	it	ne
    abb8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    abbc:	d029      	beq.n	ac12 <__adddf3+0x24e>
    abbe:	ea94 0f05 	teq	r4, r5
    abc2:	bf08      	it	eq
    abc4:	ea90 0f02 	teqeq	r0, r2
    abc8:	d005      	beq.n	abd6 <__adddf3+0x212>
    abca:	ea54 0c00 	orrs.w	ip, r4, r0
    abce:	bf04      	itt	eq
    abd0:	4619      	moveq	r1, r3
    abd2:	4610      	moveq	r0, r2
    abd4:	bd30      	pop	{r4, r5, pc}
    abd6:	ea91 0f03 	teq	r1, r3
    abda:	bf1e      	ittt	ne
    abdc:	2100      	movne	r1, #0
    abde:	2000      	movne	r0, #0
    abe0:	bd30      	popne	{r4, r5, pc}
    abe2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    abe6:	d105      	bne.n	abf4 <__adddf3+0x230>
    abe8:	0040      	lsls	r0, r0, #1
    abea:	4149      	adcs	r1, r1
    abec:	bf28      	it	cs
    abee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    abf2:	bd30      	pop	{r4, r5, pc}
    abf4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    abf8:	bf3c      	itt	cc
    abfa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    abfe:	bd30      	popcc	{r4, r5, pc}
    ac00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ac04:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    ac08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ac0c:	f04f 0000 	mov.w	r0, #0
    ac10:	bd30      	pop	{r4, r5, pc}
    ac12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ac16:	bf1a      	itte	ne
    ac18:	4619      	movne	r1, r3
    ac1a:	4610      	movne	r0, r2
    ac1c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    ac20:	bf1c      	itt	ne
    ac22:	460b      	movne	r3, r1
    ac24:	4602      	movne	r2, r0
    ac26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ac2a:	bf06      	itte	eq
    ac2c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    ac30:	ea91 0f03 	teqeq	r1, r3
    ac34:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    ac38:	bd30      	pop	{r4, r5, pc}
    ac3a:	bf00      	nop

0000ac3c <__aeabi_ui2d>:
    ac3c:	f090 0f00 	teq	r0, #0
    ac40:	bf04      	itt	eq
    ac42:	2100      	moveq	r1, #0
    ac44:	4770      	bxeq	lr
    ac46:	b530      	push	{r4, r5, lr}
    ac48:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ac4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ac50:	f04f 0500 	mov.w	r5, #0
    ac54:	f04f 0100 	mov.w	r1, #0
    ac58:	e750      	b.n	aafc <__adddf3+0x138>
    ac5a:	bf00      	nop

0000ac5c <__aeabi_i2d>:
    ac5c:	f090 0f00 	teq	r0, #0
    ac60:	bf04      	itt	eq
    ac62:	2100      	moveq	r1, #0
    ac64:	4770      	bxeq	lr
    ac66:	b530      	push	{r4, r5, lr}
    ac68:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ac6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ac70:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    ac74:	bf48      	it	mi
    ac76:	4240      	negmi	r0, r0
    ac78:	f04f 0100 	mov.w	r1, #0
    ac7c:	e73e      	b.n	aafc <__adddf3+0x138>
    ac7e:	bf00      	nop

0000ac80 <__aeabi_f2d>:
    ac80:	0042      	lsls	r2, r0, #1
    ac82:	ea4f 01e2 	mov.w	r1, r2, asr #3
    ac86:	ea4f 0131 	mov.w	r1, r1, rrx
    ac8a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    ac8e:	bf1f      	itttt	ne
    ac90:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    ac94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    ac98:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    ac9c:	4770      	bxne	lr
    ac9e:	f092 0f00 	teq	r2, #0
    aca2:	bf14      	ite	ne
    aca4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    aca8:	4770      	bxeq	lr
    acaa:	b530      	push	{r4, r5, lr}
    acac:	f44f 7460 	mov.w	r4, #896	; 0x380
    acb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    acb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    acb8:	e720      	b.n	aafc <__adddf3+0x138>
    acba:	bf00      	nop

0000acbc <__aeabi_ul2d>:
    acbc:	ea50 0201 	orrs.w	r2, r0, r1
    acc0:	bf08      	it	eq
    acc2:	4770      	bxeq	lr
    acc4:	b530      	push	{r4, r5, lr}
    acc6:	f04f 0500 	mov.w	r5, #0
    acca:	e00a      	b.n	ace2 <__aeabi_l2d+0x16>

0000accc <__aeabi_l2d>:
    accc:	ea50 0201 	orrs.w	r2, r0, r1
    acd0:	bf08      	it	eq
    acd2:	4770      	bxeq	lr
    acd4:	b530      	push	{r4, r5, lr}
    acd6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    acda:	d502      	bpl.n	ace2 <__aeabi_l2d+0x16>
    acdc:	4240      	negs	r0, r0
    acde:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ace2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ace6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    acea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    acee:	f43f aedc 	beq.w	aaaa <__adddf3+0xe6>
    acf2:	f04f 0203 	mov.w	r2, #3
    acf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    acfa:	bf18      	it	ne
    acfc:	3203      	addne	r2, #3
    acfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ad02:	bf18      	it	ne
    ad04:	3203      	addne	r2, #3
    ad06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    ad0a:	f1c2 0320 	rsb	r3, r2, #32
    ad0e:	fa00 fc03 	lsl.w	ip, r0, r3
    ad12:	fa20 f002 	lsr.w	r0, r0, r2
    ad16:	fa01 fe03 	lsl.w	lr, r1, r3
    ad1a:	ea40 000e 	orr.w	r0, r0, lr
    ad1e:	fa21 f102 	lsr.w	r1, r1, r2
    ad22:	4414      	add	r4, r2
    ad24:	e6c1      	b.n	aaaa <__adddf3+0xe6>
    ad26:	bf00      	nop

0000ad28 <__aeabi_dmul>:
    ad28:	b570      	push	{r4, r5, r6, lr}
    ad2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ad2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    ad32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ad36:	bf1d      	ittte	ne
    ad38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ad3c:	ea94 0f0c 	teqne	r4, ip
    ad40:	ea95 0f0c 	teqne	r5, ip
    ad44:	f000 f8de 	bleq	af04 <__aeabi_dmul+0x1dc>
    ad48:	442c      	add	r4, r5
    ad4a:	ea81 0603 	eor.w	r6, r1, r3
    ad4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    ad52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    ad56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    ad5a:	bf18      	it	ne
    ad5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    ad60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ad64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ad68:	d038      	beq.n	addc <__aeabi_dmul+0xb4>
    ad6a:	fba0 ce02 	umull	ip, lr, r0, r2
    ad6e:	f04f 0500 	mov.w	r5, #0
    ad72:	fbe1 e502 	umlal	lr, r5, r1, r2
    ad76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    ad7a:	fbe0 e503 	umlal	lr, r5, r0, r3
    ad7e:	f04f 0600 	mov.w	r6, #0
    ad82:	fbe1 5603 	umlal	r5, r6, r1, r3
    ad86:	f09c 0f00 	teq	ip, #0
    ad8a:	bf18      	it	ne
    ad8c:	f04e 0e01 	orrne.w	lr, lr, #1
    ad90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    ad94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    ad98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    ad9c:	d204      	bcs.n	ada8 <__aeabi_dmul+0x80>
    ad9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    ada2:	416d      	adcs	r5, r5
    ada4:	eb46 0606 	adc.w	r6, r6, r6
    ada8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    adac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    adb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    adb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    adb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    adbc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    adc0:	bf88      	it	hi
    adc2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    adc6:	d81e      	bhi.n	ae06 <__aeabi_dmul+0xde>
    adc8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    adcc:	bf08      	it	eq
    adce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    add2:	f150 0000 	adcs.w	r0, r0, #0
    add6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    adda:	bd70      	pop	{r4, r5, r6, pc}
    addc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    ade0:	ea46 0101 	orr.w	r1, r6, r1
    ade4:	ea40 0002 	orr.w	r0, r0, r2
    ade8:	ea81 0103 	eor.w	r1, r1, r3
    adec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    adf0:	bfc2      	ittt	gt
    adf2:	ebd4 050c 	rsbsgt	r5, r4, ip
    adf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    adfa:	bd70      	popgt	{r4, r5, r6, pc}
    adfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ae00:	f04f 0e00 	mov.w	lr, #0
    ae04:	3c01      	subs	r4, #1
    ae06:	f300 80ab 	bgt.w	af60 <__aeabi_dmul+0x238>
    ae0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    ae0e:	bfde      	ittt	le
    ae10:	2000      	movle	r0, #0
    ae12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    ae16:	bd70      	pople	{r4, r5, r6, pc}
    ae18:	f1c4 0400 	rsb	r4, r4, #0
    ae1c:	3c20      	subs	r4, #32
    ae1e:	da35      	bge.n	ae8c <__aeabi_dmul+0x164>
    ae20:	340c      	adds	r4, #12
    ae22:	dc1b      	bgt.n	ae5c <__aeabi_dmul+0x134>
    ae24:	f104 0414 	add.w	r4, r4, #20
    ae28:	f1c4 0520 	rsb	r5, r4, #32
    ae2c:	fa00 f305 	lsl.w	r3, r0, r5
    ae30:	fa20 f004 	lsr.w	r0, r0, r4
    ae34:	fa01 f205 	lsl.w	r2, r1, r5
    ae38:	ea40 0002 	orr.w	r0, r0, r2
    ae3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    ae40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ae44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ae48:	fa21 f604 	lsr.w	r6, r1, r4
    ae4c:	eb42 0106 	adc.w	r1, r2, r6
    ae50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ae54:	bf08      	it	eq
    ae56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ae5a:	bd70      	pop	{r4, r5, r6, pc}
    ae5c:	f1c4 040c 	rsb	r4, r4, #12
    ae60:	f1c4 0520 	rsb	r5, r4, #32
    ae64:	fa00 f304 	lsl.w	r3, r0, r4
    ae68:	fa20 f005 	lsr.w	r0, r0, r5
    ae6c:	fa01 f204 	lsl.w	r2, r1, r4
    ae70:	ea40 0002 	orr.w	r0, r0, r2
    ae74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ae78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ae7c:	f141 0100 	adc.w	r1, r1, #0
    ae80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ae84:	bf08      	it	eq
    ae86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ae8a:	bd70      	pop	{r4, r5, r6, pc}
    ae8c:	f1c4 0520 	rsb	r5, r4, #32
    ae90:	fa00 f205 	lsl.w	r2, r0, r5
    ae94:	ea4e 0e02 	orr.w	lr, lr, r2
    ae98:	fa20 f304 	lsr.w	r3, r0, r4
    ae9c:	fa01 f205 	lsl.w	r2, r1, r5
    aea0:	ea43 0302 	orr.w	r3, r3, r2
    aea4:	fa21 f004 	lsr.w	r0, r1, r4
    aea8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    aeac:	fa21 f204 	lsr.w	r2, r1, r4
    aeb0:	ea20 0002 	bic.w	r0, r0, r2
    aeb4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    aeb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    aebc:	bf08      	it	eq
    aebe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    aec2:	bd70      	pop	{r4, r5, r6, pc}
    aec4:	f094 0f00 	teq	r4, #0
    aec8:	d10f      	bne.n	aeea <__aeabi_dmul+0x1c2>
    aeca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    aece:	0040      	lsls	r0, r0, #1
    aed0:	eb41 0101 	adc.w	r1, r1, r1
    aed4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    aed8:	bf08      	it	eq
    aeda:	3c01      	subeq	r4, #1
    aedc:	d0f7      	beq.n	aece <__aeabi_dmul+0x1a6>
    aede:	ea41 0106 	orr.w	r1, r1, r6
    aee2:	f095 0f00 	teq	r5, #0
    aee6:	bf18      	it	ne
    aee8:	4770      	bxne	lr
    aeea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    aeee:	0052      	lsls	r2, r2, #1
    aef0:	eb43 0303 	adc.w	r3, r3, r3
    aef4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    aef8:	bf08      	it	eq
    aefa:	3d01      	subeq	r5, #1
    aefc:	d0f7      	beq.n	aeee <__aeabi_dmul+0x1c6>
    aefe:	ea43 0306 	orr.w	r3, r3, r6
    af02:	4770      	bx	lr
    af04:	ea94 0f0c 	teq	r4, ip
    af08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    af0c:	bf18      	it	ne
    af0e:	ea95 0f0c 	teqne	r5, ip
    af12:	d00c      	beq.n	af2e <__aeabi_dmul+0x206>
    af14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    af18:	bf18      	it	ne
    af1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    af1e:	d1d1      	bne.n	aec4 <__aeabi_dmul+0x19c>
    af20:	ea81 0103 	eor.w	r1, r1, r3
    af24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    af28:	f04f 0000 	mov.w	r0, #0
    af2c:	bd70      	pop	{r4, r5, r6, pc}
    af2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    af32:	bf06      	itte	eq
    af34:	4610      	moveq	r0, r2
    af36:	4619      	moveq	r1, r3
    af38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    af3c:	d019      	beq.n	af72 <__aeabi_dmul+0x24a>
    af3e:	ea94 0f0c 	teq	r4, ip
    af42:	d102      	bne.n	af4a <__aeabi_dmul+0x222>
    af44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    af48:	d113      	bne.n	af72 <__aeabi_dmul+0x24a>
    af4a:	ea95 0f0c 	teq	r5, ip
    af4e:	d105      	bne.n	af5c <__aeabi_dmul+0x234>
    af50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    af54:	bf1c      	itt	ne
    af56:	4610      	movne	r0, r2
    af58:	4619      	movne	r1, r3
    af5a:	d10a      	bne.n	af72 <__aeabi_dmul+0x24a>
    af5c:	ea81 0103 	eor.w	r1, r1, r3
    af60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    af64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    af68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    af6c:	f04f 0000 	mov.w	r0, #0
    af70:	bd70      	pop	{r4, r5, r6, pc}
    af72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    af76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    af7a:	bd70      	pop	{r4, r5, r6, pc}

0000af7c <__aeabi_ddiv>:
    af7c:	b570      	push	{r4, r5, r6, lr}
    af7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    af82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    af86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    af8a:	bf1d      	ittte	ne
    af8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    af90:	ea94 0f0c 	teqne	r4, ip
    af94:	ea95 0f0c 	teqne	r5, ip
    af98:	f000 f8a7 	bleq	b0ea <__aeabi_ddiv+0x16e>
    af9c:	eba4 0405 	sub.w	r4, r4, r5
    afa0:	ea81 0e03 	eor.w	lr, r1, r3
    afa4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    afa8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    afac:	f000 8088 	beq.w	b0c0 <__aeabi_ddiv+0x144>
    afb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    afb4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    afb8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    afbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    afc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    afc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    afc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    afcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    afd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    afd4:	429d      	cmp	r5, r3
    afd6:	bf08      	it	eq
    afd8:	4296      	cmpeq	r6, r2
    afda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    afde:	f504 7440 	add.w	r4, r4, #768	; 0x300
    afe2:	d202      	bcs.n	afea <__aeabi_ddiv+0x6e>
    afe4:	085b      	lsrs	r3, r3, #1
    afe6:	ea4f 0232 	mov.w	r2, r2, rrx
    afea:	1ab6      	subs	r6, r6, r2
    afec:	eb65 0503 	sbc.w	r5, r5, r3
    aff0:	085b      	lsrs	r3, r3, #1
    aff2:	ea4f 0232 	mov.w	r2, r2, rrx
    aff6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    affa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    affe:	ebb6 0e02 	subs.w	lr, r6, r2
    b002:	eb75 0e03 	sbcs.w	lr, r5, r3
    b006:	bf22      	ittt	cs
    b008:	1ab6      	subcs	r6, r6, r2
    b00a:	4675      	movcs	r5, lr
    b00c:	ea40 000c 	orrcs.w	r0, r0, ip
    b010:	085b      	lsrs	r3, r3, #1
    b012:	ea4f 0232 	mov.w	r2, r2, rrx
    b016:	ebb6 0e02 	subs.w	lr, r6, r2
    b01a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b01e:	bf22      	ittt	cs
    b020:	1ab6      	subcs	r6, r6, r2
    b022:	4675      	movcs	r5, lr
    b024:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b028:	085b      	lsrs	r3, r3, #1
    b02a:	ea4f 0232 	mov.w	r2, r2, rrx
    b02e:	ebb6 0e02 	subs.w	lr, r6, r2
    b032:	eb75 0e03 	sbcs.w	lr, r5, r3
    b036:	bf22      	ittt	cs
    b038:	1ab6      	subcs	r6, r6, r2
    b03a:	4675      	movcs	r5, lr
    b03c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b040:	085b      	lsrs	r3, r3, #1
    b042:	ea4f 0232 	mov.w	r2, r2, rrx
    b046:	ebb6 0e02 	subs.w	lr, r6, r2
    b04a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b04e:	bf22      	ittt	cs
    b050:	1ab6      	subcs	r6, r6, r2
    b052:	4675      	movcs	r5, lr
    b054:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b058:	ea55 0e06 	orrs.w	lr, r5, r6
    b05c:	d018      	beq.n	b090 <__aeabi_ddiv+0x114>
    b05e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b062:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b066:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b06a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b06e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b072:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b076:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b07a:	d1c0      	bne.n	affe <__aeabi_ddiv+0x82>
    b07c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b080:	d10b      	bne.n	b09a <__aeabi_ddiv+0x11e>
    b082:	ea41 0100 	orr.w	r1, r1, r0
    b086:	f04f 0000 	mov.w	r0, #0
    b08a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b08e:	e7b6      	b.n	affe <__aeabi_ddiv+0x82>
    b090:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b094:	bf04      	itt	eq
    b096:	4301      	orreq	r1, r0
    b098:	2000      	moveq	r0, #0
    b09a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b09e:	bf88      	it	hi
    b0a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b0a4:	f63f aeaf 	bhi.w	ae06 <__aeabi_dmul+0xde>
    b0a8:	ebb5 0c03 	subs.w	ip, r5, r3
    b0ac:	bf04      	itt	eq
    b0ae:	ebb6 0c02 	subseq.w	ip, r6, r2
    b0b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b0b6:	f150 0000 	adcs.w	r0, r0, #0
    b0ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b0be:	bd70      	pop	{r4, r5, r6, pc}
    b0c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b0c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b0c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b0cc:	bfc2      	ittt	gt
    b0ce:	ebd4 050c 	rsbsgt	r5, r4, ip
    b0d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b0d6:	bd70      	popgt	{r4, r5, r6, pc}
    b0d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b0dc:	f04f 0e00 	mov.w	lr, #0
    b0e0:	3c01      	subs	r4, #1
    b0e2:	e690      	b.n	ae06 <__aeabi_dmul+0xde>
    b0e4:	ea45 0e06 	orr.w	lr, r5, r6
    b0e8:	e68d      	b.n	ae06 <__aeabi_dmul+0xde>
    b0ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b0ee:	ea94 0f0c 	teq	r4, ip
    b0f2:	bf08      	it	eq
    b0f4:	ea95 0f0c 	teqeq	r5, ip
    b0f8:	f43f af3b 	beq.w	af72 <__aeabi_dmul+0x24a>
    b0fc:	ea94 0f0c 	teq	r4, ip
    b100:	d10a      	bne.n	b118 <__aeabi_ddiv+0x19c>
    b102:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b106:	f47f af34 	bne.w	af72 <__aeabi_dmul+0x24a>
    b10a:	ea95 0f0c 	teq	r5, ip
    b10e:	f47f af25 	bne.w	af5c <__aeabi_dmul+0x234>
    b112:	4610      	mov	r0, r2
    b114:	4619      	mov	r1, r3
    b116:	e72c      	b.n	af72 <__aeabi_dmul+0x24a>
    b118:	ea95 0f0c 	teq	r5, ip
    b11c:	d106      	bne.n	b12c <__aeabi_ddiv+0x1b0>
    b11e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b122:	f43f aefd 	beq.w	af20 <__aeabi_dmul+0x1f8>
    b126:	4610      	mov	r0, r2
    b128:	4619      	mov	r1, r3
    b12a:	e722      	b.n	af72 <__aeabi_dmul+0x24a>
    b12c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b130:	bf18      	it	ne
    b132:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b136:	f47f aec5 	bne.w	aec4 <__aeabi_dmul+0x19c>
    b13a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b13e:	f47f af0d 	bne.w	af5c <__aeabi_dmul+0x234>
    b142:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b146:	f47f aeeb 	bne.w	af20 <__aeabi_dmul+0x1f8>
    b14a:	e712      	b.n	af72 <__aeabi_dmul+0x24a>

0000b14c <__aeabi_d2uiz>:
    b14c:	004a      	lsls	r2, r1, #1
    b14e:	d211      	bcs.n	b174 <__aeabi_d2uiz+0x28>
    b150:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b154:	d211      	bcs.n	b17a <__aeabi_d2uiz+0x2e>
    b156:	d50d      	bpl.n	b174 <__aeabi_d2uiz+0x28>
    b158:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b15c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b160:	d40e      	bmi.n	b180 <__aeabi_d2uiz+0x34>
    b162:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b166:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b16a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b16e:	fa23 f002 	lsr.w	r0, r3, r2
    b172:	4770      	bx	lr
    b174:	f04f 0000 	mov.w	r0, #0
    b178:	4770      	bx	lr
    b17a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b17e:	d102      	bne.n	b186 <__aeabi_d2uiz+0x3a>
    b180:	f04f 30ff 	mov.w	r0, #4294967295
    b184:	4770      	bx	lr
    b186:	f04f 0000 	mov.w	r0, #0
    b18a:	4770      	bx	lr

0000b18c <__libc_init_array>:
    b18c:	b570      	push	{r4, r5, r6, lr}
    b18e:	4e0d      	ldr	r6, [pc, #52]	; (b1c4 <__libc_init_array+0x38>)
    b190:	4c0d      	ldr	r4, [pc, #52]	; (b1c8 <__libc_init_array+0x3c>)
    b192:	1ba4      	subs	r4, r4, r6
    b194:	10a4      	asrs	r4, r4, #2
    b196:	2500      	movs	r5, #0
    b198:	42a5      	cmp	r5, r4
    b19a:	d109      	bne.n	b1b0 <__libc_init_array+0x24>
    b19c:	4e0b      	ldr	r6, [pc, #44]	; (b1cc <__libc_init_array+0x40>)
    b19e:	4c0c      	ldr	r4, [pc, #48]	; (b1d0 <__libc_init_array+0x44>)
    b1a0:	f001 f8c4 	bl	c32c <_init>
    b1a4:	1ba4      	subs	r4, r4, r6
    b1a6:	10a4      	asrs	r4, r4, #2
    b1a8:	2500      	movs	r5, #0
    b1aa:	42a5      	cmp	r5, r4
    b1ac:	d105      	bne.n	b1ba <__libc_init_array+0x2e>
    b1ae:	bd70      	pop	{r4, r5, r6, pc}
    b1b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b1b4:	4798      	blx	r3
    b1b6:	3501      	adds	r5, #1
    b1b8:	e7ee      	b.n	b198 <__libc_init_array+0xc>
    b1ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b1be:	4798      	blx	r3
    b1c0:	3501      	adds	r5, #1
    b1c2:	e7f2      	b.n	b1aa <__libc_init_array+0x1e>
    b1c4:	0000c338 	.word	0x0000c338
    b1c8:	0000c338 	.word	0x0000c338
    b1cc:	0000c338 	.word	0x0000c338
    b1d0:	0000c33c 	.word	0x0000c33c

0000b1d4 <malloc>:
    b1d4:	4b02      	ldr	r3, [pc, #8]	; (b1e0 <malloc+0xc>)
    b1d6:	4601      	mov	r1, r0
    b1d8:	6818      	ldr	r0, [r3, #0]
    b1da:	f000 b865 	b.w	b2a8 <_malloc_r>
    b1de:	bf00      	nop
    b1e0:	20000558 	.word	0x20000558

0000b1e4 <memcpy>:
    b1e4:	b510      	push	{r4, lr}
    b1e6:	1e43      	subs	r3, r0, #1
    b1e8:	440a      	add	r2, r1
    b1ea:	4291      	cmp	r1, r2
    b1ec:	d100      	bne.n	b1f0 <memcpy+0xc>
    b1ee:	bd10      	pop	{r4, pc}
    b1f0:	f811 4b01 	ldrb.w	r4, [r1], #1
    b1f4:	f803 4f01 	strb.w	r4, [r3, #1]!
    b1f8:	e7f7      	b.n	b1ea <memcpy+0x6>

0000b1fa <memset>:
    b1fa:	4402      	add	r2, r0
    b1fc:	4603      	mov	r3, r0
    b1fe:	4293      	cmp	r3, r2
    b200:	d100      	bne.n	b204 <memset+0xa>
    b202:	4770      	bx	lr
    b204:	f803 1b01 	strb.w	r1, [r3], #1
    b208:	e7f9      	b.n	b1fe <memset+0x4>
	...

0000b20c <_free_r>:
    b20c:	b538      	push	{r3, r4, r5, lr}
    b20e:	4605      	mov	r5, r0
    b210:	2900      	cmp	r1, #0
    b212:	d045      	beq.n	b2a0 <_free_r+0x94>
    b214:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b218:	1f0c      	subs	r4, r1, #4
    b21a:	2b00      	cmp	r3, #0
    b21c:	bfb8      	it	lt
    b21e:	18e4      	addlt	r4, r4, r3
    b220:	f000 f916 	bl	b450 <__malloc_lock>
    b224:	4a1f      	ldr	r2, [pc, #124]	; (b2a4 <_free_r+0x98>)
    b226:	6813      	ldr	r3, [r2, #0]
    b228:	4610      	mov	r0, r2
    b22a:	b933      	cbnz	r3, b23a <_free_r+0x2e>
    b22c:	6063      	str	r3, [r4, #4]
    b22e:	6014      	str	r4, [r2, #0]
    b230:	4628      	mov	r0, r5
    b232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b236:	f000 b90c 	b.w	b452 <__malloc_unlock>
    b23a:	42a3      	cmp	r3, r4
    b23c:	d90c      	bls.n	b258 <_free_r+0x4c>
    b23e:	6821      	ldr	r1, [r4, #0]
    b240:	1862      	adds	r2, r4, r1
    b242:	4293      	cmp	r3, r2
    b244:	bf04      	itt	eq
    b246:	681a      	ldreq	r2, [r3, #0]
    b248:	685b      	ldreq	r3, [r3, #4]
    b24a:	6063      	str	r3, [r4, #4]
    b24c:	bf04      	itt	eq
    b24e:	1852      	addeq	r2, r2, r1
    b250:	6022      	streq	r2, [r4, #0]
    b252:	6004      	str	r4, [r0, #0]
    b254:	e7ec      	b.n	b230 <_free_r+0x24>
    b256:	4613      	mov	r3, r2
    b258:	685a      	ldr	r2, [r3, #4]
    b25a:	b10a      	cbz	r2, b260 <_free_r+0x54>
    b25c:	42a2      	cmp	r2, r4
    b25e:	d9fa      	bls.n	b256 <_free_r+0x4a>
    b260:	6819      	ldr	r1, [r3, #0]
    b262:	1858      	adds	r0, r3, r1
    b264:	42a0      	cmp	r0, r4
    b266:	d10b      	bne.n	b280 <_free_r+0x74>
    b268:	6820      	ldr	r0, [r4, #0]
    b26a:	4401      	add	r1, r0
    b26c:	1858      	adds	r0, r3, r1
    b26e:	4282      	cmp	r2, r0
    b270:	6019      	str	r1, [r3, #0]
    b272:	d1dd      	bne.n	b230 <_free_r+0x24>
    b274:	6810      	ldr	r0, [r2, #0]
    b276:	6852      	ldr	r2, [r2, #4]
    b278:	605a      	str	r2, [r3, #4]
    b27a:	4401      	add	r1, r0
    b27c:	6019      	str	r1, [r3, #0]
    b27e:	e7d7      	b.n	b230 <_free_r+0x24>
    b280:	d902      	bls.n	b288 <_free_r+0x7c>
    b282:	230c      	movs	r3, #12
    b284:	602b      	str	r3, [r5, #0]
    b286:	e7d3      	b.n	b230 <_free_r+0x24>
    b288:	6820      	ldr	r0, [r4, #0]
    b28a:	1821      	adds	r1, r4, r0
    b28c:	428a      	cmp	r2, r1
    b28e:	bf04      	itt	eq
    b290:	6811      	ldreq	r1, [r2, #0]
    b292:	6852      	ldreq	r2, [r2, #4]
    b294:	6062      	str	r2, [r4, #4]
    b296:	bf04      	itt	eq
    b298:	1809      	addeq	r1, r1, r0
    b29a:	6021      	streq	r1, [r4, #0]
    b29c:	605c      	str	r4, [r3, #4]
    b29e:	e7c7      	b.n	b230 <_free_r+0x24>
    b2a0:	bd38      	pop	{r3, r4, r5, pc}
    b2a2:	bf00      	nop
    b2a4:	20000eb0 	.word	0x20000eb0

0000b2a8 <_malloc_r>:
    b2a8:	b570      	push	{r4, r5, r6, lr}
    b2aa:	1ccd      	adds	r5, r1, #3
    b2ac:	f025 0503 	bic.w	r5, r5, #3
    b2b0:	3508      	adds	r5, #8
    b2b2:	2d0c      	cmp	r5, #12
    b2b4:	bf38      	it	cc
    b2b6:	250c      	movcc	r5, #12
    b2b8:	2d00      	cmp	r5, #0
    b2ba:	4606      	mov	r6, r0
    b2bc:	db01      	blt.n	b2c2 <_malloc_r+0x1a>
    b2be:	42a9      	cmp	r1, r5
    b2c0:	d903      	bls.n	b2ca <_malloc_r+0x22>
    b2c2:	230c      	movs	r3, #12
    b2c4:	6033      	str	r3, [r6, #0]
    b2c6:	2000      	movs	r0, #0
    b2c8:	bd70      	pop	{r4, r5, r6, pc}
    b2ca:	f000 f8c1 	bl	b450 <__malloc_lock>
    b2ce:	4a23      	ldr	r2, [pc, #140]	; (b35c <_malloc_r+0xb4>)
    b2d0:	6814      	ldr	r4, [r2, #0]
    b2d2:	4621      	mov	r1, r4
    b2d4:	b991      	cbnz	r1, b2fc <_malloc_r+0x54>
    b2d6:	4c22      	ldr	r4, [pc, #136]	; (b360 <_malloc_r+0xb8>)
    b2d8:	6823      	ldr	r3, [r4, #0]
    b2da:	b91b      	cbnz	r3, b2e4 <_malloc_r+0x3c>
    b2dc:	4630      	mov	r0, r6
    b2de:	f000 f87b 	bl	b3d8 <_sbrk_r>
    b2e2:	6020      	str	r0, [r4, #0]
    b2e4:	4629      	mov	r1, r5
    b2e6:	4630      	mov	r0, r6
    b2e8:	f000 f876 	bl	b3d8 <_sbrk_r>
    b2ec:	1c43      	adds	r3, r0, #1
    b2ee:	d126      	bne.n	b33e <_malloc_r+0x96>
    b2f0:	230c      	movs	r3, #12
    b2f2:	6033      	str	r3, [r6, #0]
    b2f4:	4630      	mov	r0, r6
    b2f6:	f000 f8ac 	bl	b452 <__malloc_unlock>
    b2fa:	e7e4      	b.n	b2c6 <_malloc_r+0x1e>
    b2fc:	680b      	ldr	r3, [r1, #0]
    b2fe:	1b5b      	subs	r3, r3, r5
    b300:	d41a      	bmi.n	b338 <_malloc_r+0x90>
    b302:	2b0b      	cmp	r3, #11
    b304:	d90f      	bls.n	b326 <_malloc_r+0x7e>
    b306:	600b      	str	r3, [r1, #0]
    b308:	50cd      	str	r5, [r1, r3]
    b30a:	18cc      	adds	r4, r1, r3
    b30c:	4630      	mov	r0, r6
    b30e:	f000 f8a0 	bl	b452 <__malloc_unlock>
    b312:	f104 000b 	add.w	r0, r4, #11
    b316:	1d23      	adds	r3, r4, #4
    b318:	f020 0007 	bic.w	r0, r0, #7
    b31c:	1ac3      	subs	r3, r0, r3
    b31e:	d01b      	beq.n	b358 <_malloc_r+0xb0>
    b320:	425a      	negs	r2, r3
    b322:	50e2      	str	r2, [r4, r3]
    b324:	bd70      	pop	{r4, r5, r6, pc}
    b326:	428c      	cmp	r4, r1
    b328:	bf0d      	iteet	eq
    b32a:	6863      	ldreq	r3, [r4, #4]
    b32c:	684b      	ldrne	r3, [r1, #4]
    b32e:	6063      	strne	r3, [r4, #4]
    b330:	6013      	streq	r3, [r2, #0]
    b332:	bf18      	it	ne
    b334:	460c      	movne	r4, r1
    b336:	e7e9      	b.n	b30c <_malloc_r+0x64>
    b338:	460c      	mov	r4, r1
    b33a:	6849      	ldr	r1, [r1, #4]
    b33c:	e7ca      	b.n	b2d4 <_malloc_r+0x2c>
    b33e:	1cc4      	adds	r4, r0, #3
    b340:	f024 0403 	bic.w	r4, r4, #3
    b344:	42a0      	cmp	r0, r4
    b346:	d005      	beq.n	b354 <_malloc_r+0xac>
    b348:	1a21      	subs	r1, r4, r0
    b34a:	4630      	mov	r0, r6
    b34c:	f000 f844 	bl	b3d8 <_sbrk_r>
    b350:	3001      	adds	r0, #1
    b352:	d0cd      	beq.n	b2f0 <_malloc_r+0x48>
    b354:	6025      	str	r5, [r4, #0]
    b356:	e7d9      	b.n	b30c <_malloc_r+0x64>
    b358:	bd70      	pop	{r4, r5, r6, pc}
    b35a:	bf00      	nop
    b35c:	20000eb0 	.word	0x20000eb0
    b360:	20000eb4 	.word	0x20000eb4

0000b364 <rand>:
    b364:	4b19      	ldr	r3, [pc, #100]	; (b3cc <rand+0x68>)
    b366:	b510      	push	{r4, lr}
    b368:	681c      	ldr	r4, [r3, #0]
    b36a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b36c:	b9d3      	cbnz	r3, b3a4 <rand+0x40>
    b36e:	2018      	movs	r0, #24
    b370:	f7ff ff30 	bl	b1d4 <malloc>
    b374:	f243 330e 	movw	r3, #13070	; 0x330e
    b378:	63a0      	str	r0, [r4, #56]	; 0x38
    b37a:	8003      	strh	r3, [r0, #0]
    b37c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    b380:	8043      	strh	r3, [r0, #2]
    b382:	f241 2334 	movw	r3, #4660	; 0x1234
    b386:	8083      	strh	r3, [r0, #4]
    b388:	f24e 636d 	movw	r3, #58989	; 0xe66d
    b38c:	80c3      	strh	r3, [r0, #6]
    b38e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    b392:	8103      	strh	r3, [r0, #8]
    b394:	2305      	movs	r3, #5
    b396:	8143      	strh	r3, [r0, #10]
    b398:	230b      	movs	r3, #11
    b39a:	8183      	strh	r3, [r0, #12]
    b39c:	2201      	movs	r2, #1
    b39e:	2300      	movs	r3, #0
    b3a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
    b3a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    b3a6:	480a      	ldr	r0, [pc, #40]	; (b3d0 <rand+0x6c>)
    b3a8:	690a      	ldr	r2, [r1, #16]
    b3aa:	694b      	ldr	r3, [r1, #20]
    b3ac:	4c09      	ldr	r4, [pc, #36]	; (b3d4 <rand+0x70>)
    b3ae:	4350      	muls	r0, r2
    b3b0:	fb04 0003 	mla	r0, r4, r3, r0
    b3b4:	fba2 2304 	umull	r2, r3, r2, r4
    b3b8:	3201      	adds	r2, #1
    b3ba:	4403      	add	r3, r0
    b3bc:	f143 0300 	adc.w	r3, r3, #0
    b3c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    b3c4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    b3c8:	bd10      	pop	{r4, pc}
    b3ca:	bf00      	nop
    b3cc:	20000558 	.word	0x20000558
    b3d0:	5851f42d 	.word	0x5851f42d
    b3d4:	4c957f2d 	.word	0x4c957f2d

0000b3d8 <_sbrk_r>:
    b3d8:	b538      	push	{r3, r4, r5, lr}
    b3da:	4c06      	ldr	r4, [pc, #24]	; (b3f4 <_sbrk_r+0x1c>)
    b3dc:	2300      	movs	r3, #0
    b3de:	4605      	mov	r5, r0
    b3e0:	4608      	mov	r0, r1
    b3e2:	6023      	str	r3, [r4, #0]
    b3e4:	f7fa f814 	bl	5410 <_sbrk>
    b3e8:	1c43      	adds	r3, r0, #1
    b3ea:	d102      	bne.n	b3f2 <_sbrk_r+0x1a>
    b3ec:	6823      	ldr	r3, [r4, #0]
    b3ee:	b103      	cbz	r3, b3f2 <_sbrk_r+0x1a>
    b3f0:	602b      	str	r3, [r5, #0]
    b3f2:	bd38      	pop	{r3, r4, r5, pc}
    b3f4:	20002c8c 	.word	0x20002c8c

0000b3f8 <siprintf>:
    b3f8:	b40e      	push	{r1, r2, r3}
    b3fa:	b500      	push	{lr}
    b3fc:	b09c      	sub	sp, #112	; 0x70
    b3fe:	f44f 7102 	mov.w	r1, #520	; 0x208
    b402:	ab1d      	add	r3, sp, #116	; 0x74
    b404:	f8ad 1014 	strh.w	r1, [sp, #20]
    b408:	9002      	str	r0, [sp, #8]
    b40a:	9006      	str	r0, [sp, #24]
    b40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b410:	480a      	ldr	r0, [pc, #40]	; (b43c <siprintf+0x44>)
    b412:	9104      	str	r1, [sp, #16]
    b414:	9107      	str	r1, [sp, #28]
    b416:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b41a:	f853 2b04 	ldr.w	r2, [r3], #4
    b41e:	f8ad 1016 	strh.w	r1, [sp, #22]
    b422:	6800      	ldr	r0, [r0, #0]
    b424:	9301      	str	r3, [sp, #4]
    b426:	a902      	add	r1, sp, #8
    b428:	f000 f870 	bl	b50c <_svfiprintf_r>
    b42c:	9b02      	ldr	r3, [sp, #8]
    b42e:	2200      	movs	r2, #0
    b430:	701a      	strb	r2, [r3, #0]
    b432:	b01c      	add	sp, #112	; 0x70
    b434:	f85d eb04 	ldr.w	lr, [sp], #4
    b438:	b003      	add	sp, #12
    b43a:	4770      	bx	lr
    b43c:	20000558 	.word	0x20000558

0000b440 <strlen>:
    b440:	4603      	mov	r3, r0
    b442:	f813 2b01 	ldrb.w	r2, [r3], #1
    b446:	2a00      	cmp	r2, #0
    b448:	d1fb      	bne.n	b442 <strlen+0x2>
    b44a:	1a18      	subs	r0, r3, r0
    b44c:	3801      	subs	r0, #1
    b44e:	4770      	bx	lr

0000b450 <__malloc_lock>:
    b450:	4770      	bx	lr

0000b452 <__malloc_unlock>:
    b452:	4770      	bx	lr

0000b454 <__ssputs_r>:
    b454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b458:	688e      	ldr	r6, [r1, #8]
    b45a:	429e      	cmp	r6, r3
    b45c:	4682      	mov	sl, r0
    b45e:	460c      	mov	r4, r1
    b460:	4691      	mov	r9, r2
    b462:	4698      	mov	r8, r3
    b464:	d835      	bhi.n	b4d2 <__ssputs_r+0x7e>
    b466:	898a      	ldrh	r2, [r1, #12]
    b468:	f412 6f90 	tst.w	r2, #1152	; 0x480
    b46c:	d031      	beq.n	b4d2 <__ssputs_r+0x7e>
    b46e:	6825      	ldr	r5, [r4, #0]
    b470:	6909      	ldr	r1, [r1, #16]
    b472:	1a6f      	subs	r7, r5, r1
    b474:	6965      	ldr	r5, [r4, #20]
    b476:	2302      	movs	r3, #2
    b478:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    b47c:	fb95 f5f3 	sdiv	r5, r5, r3
    b480:	f108 0301 	add.w	r3, r8, #1
    b484:	443b      	add	r3, r7
    b486:	429d      	cmp	r5, r3
    b488:	bf38      	it	cc
    b48a:	461d      	movcc	r5, r3
    b48c:	0553      	lsls	r3, r2, #21
    b48e:	d531      	bpl.n	b4f4 <__ssputs_r+0xa0>
    b490:	4629      	mov	r1, r5
    b492:	f7ff ff09 	bl	b2a8 <_malloc_r>
    b496:	4606      	mov	r6, r0
    b498:	b950      	cbnz	r0, b4b0 <__ssputs_r+0x5c>
    b49a:	230c      	movs	r3, #12
    b49c:	f8ca 3000 	str.w	r3, [sl]
    b4a0:	89a3      	ldrh	r3, [r4, #12]
    b4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b4a6:	81a3      	strh	r3, [r4, #12]
    b4a8:	f04f 30ff 	mov.w	r0, #4294967295
    b4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4b0:	463a      	mov	r2, r7
    b4b2:	6921      	ldr	r1, [r4, #16]
    b4b4:	f7ff fe96 	bl	b1e4 <memcpy>
    b4b8:	89a3      	ldrh	r3, [r4, #12]
    b4ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    b4be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b4c2:	81a3      	strh	r3, [r4, #12]
    b4c4:	6126      	str	r6, [r4, #16]
    b4c6:	6165      	str	r5, [r4, #20]
    b4c8:	443e      	add	r6, r7
    b4ca:	1bed      	subs	r5, r5, r7
    b4cc:	6026      	str	r6, [r4, #0]
    b4ce:	60a5      	str	r5, [r4, #8]
    b4d0:	4646      	mov	r6, r8
    b4d2:	4546      	cmp	r6, r8
    b4d4:	bf28      	it	cs
    b4d6:	4646      	movcs	r6, r8
    b4d8:	4632      	mov	r2, r6
    b4da:	4649      	mov	r1, r9
    b4dc:	6820      	ldr	r0, [r4, #0]
    b4de:	f000 faef 	bl	bac0 <memmove>
    b4e2:	68a3      	ldr	r3, [r4, #8]
    b4e4:	1b9b      	subs	r3, r3, r6
    b4e6:	60a3      	str	r3, [r4, #8]
    b4e8:	6823      	ldr	r3, [r4, #0]
    b4ea:	441e      	add	r6, r3
    b4ec:	6026      	str	r6, [r4, #0]
    b4ee:	2000      	movs	r0, #0
    b4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4f4:	462a      	mov	r2, r5
    b4f6:	f000 fafd 	bl	baf4 <_realloc_r>
    b4fa:	4606      	mov	r6, r0
    b4fc:	2800      	cmp	r0, #0
    b4fe:	d1e1      	bne.n	b4c4 <__ssputs_r+0x70>
    b500:	6921      	ldr	r1, [r4, #16]
    b502:	4650      	mov	r0, sl
    b504:	f7ff fe82 	bl	b20c <_free_r>
    b508:	e7c7      	b.n	b49a <__ssputs_r+0x46>
	...

0000b50c <_svfiprintf_r>:
    b50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b510:	b09d      	sub	sp, #116	; 0x74
    b512:	4680      	mov	r8, r0
    b514:	9303      	str	r3, [sp, #12]
    b516:	898b      	ldrh	r3, [r1, #12]
    b518:	061c      	lsls	r4, r3, #24
    b51a:	460d      	mov	r5, r1
    b51c:	4616      	mov	r6, r2
    b51e:	d50f      	bpl.n	b540 <_svfiprintf_r+0x34>
    b520:	690b      	ldr	r3, [r1, #16]
    b522:	b96b      	cbnz	r3, b540 <_svfiprintf_r+0x34>
    b524:	2140      	movs	r1, #64	; 0x40
    b526:	f7ff febf 	bl	b2a8 <_malloc_r>
    b52a:	6028      	str	r0, [r5, #0]
    b52c:	6128      	str	r0, [r5, #16]
    b52e:	b928      	cbnz	r0, b53c <_svfiprintf_r+0x30>
    b530:	230c      	movs	r3, #12
    b532:	f8c8 3000 	str.w	r3, [r8]
    b536:	f04f 30ff 	mov.w	r0, #4294967295
    b53a:	e0c5      	b.n	b6c8 <_svfiprintf_r+0x1bc>
    b53c:	2340      	movs	r3, #64	; 0x40
    b53e:	616b      	str	r3, [r5, #20]
    b540:	2300      	movs	r3, #0
    b542:	9309      	str	r3, [sp, #36]	; 0x24
    b544:	2320      	movs	r3, #32
    b546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    b54a:	2330      	movs	r3, #48	; 0x30
    b54c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    b550:	f04f 0b01 	mov.w	fp, #1
    b554:	4637      	mov	r7, r6
    b556:	463c      	mov	r4, r7
    b558:	f814 3b01 	ldrb.w	r3, [r4], #1
    b55c:	2b00      	cmp	r3, #0
    b55e:	d13c      	bne.n	b5da <_svfiprintf_r+0xce>
    b560:	ebb7 0a06 	subs.w	sl, r7, r6
    b564:	d00b      	beq.n	b57e <_svfiprintf_r+0x72>
    b566:	4653      	mov	r3, sl
    b568:	4632      	mov	r2, r6
    b56a:	4629      	mov	r1, r5
    b56c:	4640      	mov	r0, r8
    b56e:	f7ff ff71 	bl	b454 <__ssputs_r>
    b572:	3001      	adds	r0, #1
    b574:	f000 80a3 	beq.w	b6be <_svfiprintf_r+0x1b2>
    b578:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b57a:	4453      	add	r3, sl
    b57c:	9309      	str	r3, [sp, #36]	; 0x24
    b57e:	783b      	ldrb	r3, [r7, #0]
    b580:	2b00      	cmp	r3, #0
    b582:	f000 809c 	beq.w	b6be <_svfiprintf_r+0x1b2>
    b586:	2300      	movs	r3, #0
    b588:	f04f 32ff 	mov.w	r2, #4294967295
    b58c:	9304      	str	r3, [sp, #16]
    b58e:	9307      	str	r3, [sp, #28]
    b590:	9205      	str	r2, [sp, #20]
    b592:	9306      	str	r3, [sp, #24]
    b594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    b598:	931a      	str	r3, [sp, #104]	; 0x68
    b59a:	2205      	movs	r2, #5
    b59c:	7821      	ldrb	r1, [r4, #0]
    b59e:	4850      	ldr	r0, [pc, #320]	; (b6e0 <_svfiprintf_r+0x1d4>)
    b5a0:	f000 fa3e 	bl	ba20 <memchr>
    b5a4:	1c67      	adds	r7, r4, #1
    b5a6:	9b04      	ldr	r3, [sp, #16]
    b5a8:	b9d8      	cbnz	r0, b5e2 <_svfiprintf_r+0xd6>
    b5aa:	06d9      	lsls	r1, r3, #27
    b5ac:	bf44      	itt	mi
    b5ae:	2220      	movmi	r2, #32
    b5b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b5b4:	071a      	lsls	r2, r3, #28
    b5b6:	bf44      	itt	mi
    b5b8:	222b      	movmi	r2, #43	; 0x2b
    b5ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b5be:	7822      	ldrb	r2, [r4, #0]
    b5c0:	2a2a      	cmp	r2, #42	; 0x2a
    b5c2:	d016      	beq.n	b5f2 <_svfiprintf_r+0xe6>
    b5c4:	9a07      	ldr	r2, [sp, #28]
    b5c6:	2100      	movs	r1, #0
    b5c8:	200a      	movs	r0, #10
    b5ca:	4627      	mov	r7, r4
    b5cc:	3401      	adds	r4, #1
    b5ce:	783b      	ldrb	r3, [r7, #0]
    b5d0:	3b30      	subs	r3, #48	; 0x30
    b5d2:	2b09      	cmp	r3, #9
    b5d4:	d951      	bls.n	b67a <_svfiprintf_r+0x16e>
    b5d6:	b1c9      	cbz	r1, b60c <_svfiprintf_r+0x100>
    b5d8:	e011      	b.n	b5fe <_svfiprintf_r+0xf2>
    b5da:	2b25      	cmp	r3, #37	; 0x25
    b5dc:	d0c0      	beq.n	b560 <_svfiprintf_r+0x54>
    b5de:	4627      	mov	r7, r4
    b5e0:	e7b9      	b.n	b556 <_svfiprintf_r+0x4a>
    b5e2:	4a3f      	ldr	r2, [pc, #252]	; (b6e0 <_svfiprintf_r+0x1d4>)
    b5e4:	1a80      	subs	r0, r0, r2
    b5e6:	fa0b f000 	lsl.w	r0, fp, r0
    b5ea:	4318      	orrs	r0, r3
    b5ec:	9004      	str	r0, [sp, #16]
    b5ee:	463c      	mov	r4, r7
    b5f0:	e7d3      	b.n	b59a <_svfiprintf_r+0x8e>
    b5f2:	9a03      	ldr	r2, [sp, #12]
    b5f4:	1d11      	adds	r1, r2, #4
    b5f6:	6812      	ldr	r2, [r2, #0]
    b5f8:	9103      	str	r1, [sp, #12]
    b5fa:	2a00      	cmp	r2, #0
    b5fc:	db01      	blt.n	b602 <_svfiprintf_r+0xf6>
    b5fe:	9207      	str	r2, [sp, #28]
    b600:	e004      	b.n	b60c <_svfiprintf_r+0x100>
    b602:	4252      	negs	r2, r2
    b604:	f043 0302 	orr.w	r3, r3, #2
    b608:	9207      	str	r2, [sp, #28]
    b60a:	9304      	str	r3, [sp, #16]
    b60c:	783b      	ldrb	r3, [r7, #0]
    b60e:	2b2e      	cmp	r3, #46	; 0x2e
    b610:	d10e      	bne.n	b630 <_svfiprintf_r+0x124>
    b612:	787b      	ldrb	r3, [r7, #1]
    b614:	2b2a      	cmp	r3, #42	; 0x2a
    b616:	f107 0101 	add.w	r1, r7, #1
    b61a:	d132      	bne.n	b682 <_svfiprintf_r+0x176>
    b61c:	9b03      	ldr	r3, [sp, #12]
    b61e:	1d1a      	adds	r2, r3, #4
    b620:	681b      	ldr	r3, [r3, #0]
    b622:	9203      	str	r2, [sp, #12]
    b624:	2b00      	cmp	r3, #0
    b626:	bfb8      	it	lt
    b628:	f04f 33ff 	movlt.w	r3, #4294967295
    b62c:	3702      	adds	r7, #2
    b62e:	9305      	str	r3, [sp, #20]
    b630:	4c2c      	ldr	r4, [pc, #176]	; (b6e4 <_svfiprintf_r+0x1d8>)
    b632:	7839      	ldrb	r1, [r7, #0]
    b634:	2203      	movs	r2, #3
    b636:	4620      	mov	r0, r4
    b638:	f000 f9f2 	bl	ba20 <memchr>
    b63c:	b138      	cbz	r0, b64e <_svfiprintf_r+0x142>
    b63e:	2340      	movs	r3, #64	; 0x40
    b640:	1b00      	subs	r0, r0, r4
    b642:	fa03 f000 	lsl.w	r0, r3, r0
    b646:	9b04      	ldr	r3, [sp, #16]
    b648:	4303      	orrs	r3, r0
    b64a:	9304      	str	r3, [sp, #16]
    b64c:	3701      	adds	r7, #1
    b64e:	7839      	ldrb	r1, [r7, #0]
    b650:	4825      	ldr	r0, [pc, #148]	; (b6e8 <_svfiprintf_r+0x1dc>)
    b652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    b656:	2206      	movs	r2, #6
    b658:	1c7e      	adds	r6, r7, #1
    b65a:	f000 f9e1 	bl	ba20 <memchr>
    b65e:	2800      	cmp	r0, #0
    b660:	d035      	beq.n	b6ce <_svfiprintf_r+0x1c2>
    b662:	4b22      	ldr	r3, [pc, #136]	; (b6ec <_svfiprintf_r+0x1e0>)
    b664:	b9fb      	cbnz	r3, b6a6 <_svfiprintf_r+0x19a>
    b666:	9b03      	ldr	r3, [sp, #12]
    b668:	3307      	adds	r3, #7
    b66a:	f023 0307 	bic.w	r3, r3, #7
    b66e:	3308      	adds	r3, #8
    b670:	9303      	str	r3, [sp, #12]
    b672:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b674:	444b      	add	r3, r9
    b676:	9309      	str	r3, [sp, #36]	; 0x24
    b678:	e76c      	b.n	b554 <_svfiprintf_r+0x48>
    b67a:	fb00 3202 	mla	r2, r0, r2, r3
    b67e:	2101      	movs	r1, #1
    b680:	e7a3      	b.n	b5ca <_svfiprintf_r+0xbe>
    b682:	2300      	movs	r3, #0
    b684:	9305      	str	r3, [sp, #20]
    b686:	4618      	mov	r0, r3
    b688:	240a      	movs	r4, #10
    b68a:	460f      	mov	r7, r1
    b68c:	3101      	adds	r1, #1
    b68e:	783a      	ldrb	r2, [r7, #0]
    b690:	3a30      	subs	r2, #48	; 0x30
    b692:	2a09      	cmp	r2, #9
    b694:	d903      	bls.n	b69e <_svfiprintf_r+0x192>
    b696:	2b00      	cmp	r3, #0
    b698:	d0ca      	beq.n	b630 <_svfiprintf_r+0x124>
    b69a:	9005      	str	r0, [sp, #20]
    b69c:	e7c8      	b.n	b630 <_svfiprintf_r+0x124>
    b69e:	fb04 2000 	mla	r0, r4, r0, r2
    b6a2:	2301      	movs	r3, #1
    b6a4:	e7f1      	b.n	b68a <_svfiprintf_r+0x17e>
    b6a6:	ab03      	add	r3, sp, #12
    b6a8:	9300      	str	r3, [sp, #0]
    b6aa:	462a      	mov	r2, r5
    b6ac:	4b10      	ldr	r3, [pc, #64]	; (b6f0 <_svfiprintf_r+0x1e4>)
    b6ae:	a904      	add	r1, sp, #16
    b6b0:	4640      	mov	r0, r8
    b6b2:	f3af 8000 	nop.w
    b6b6:	f1b0 3fff 	cmp.w	r0, #4294967295
    b6ba:	4681      	mov	r9, r0
    b6bc:	d1d9      	bne.n	b672 <_svfiprintf_r+0x166>
    b6be:	89ab      	ldrh	r3, [r5, #12]
    b6c0:	065b      	lsls	r3, r3, #25
    b6c2:	f53f af38 	bmi.w	b536 <_svfiprintf_r+0x2a>
    b6c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    b6c8:	b01d      	add	sp, #116	; 0x74
    b6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6ce:	ab03      	add	r3, sp, #12
    b6d0:	9300      	str	r3, [sp, #0]
    b6d2:	462a      	mov	r2, r5
    b6d4:	4b06      	ldr	r3, [pc, #24]	; (b6f0 <_svfiprintf_r+0x1e4>)
    b6d6:	a904      	add	r1, sp, #16
    b6d8:	4640      	mov	r0, r8
    b6da:	f000 f881 	bl	b7e0 <_printf_i>
    b6de:	e7ea      	b.n	b6b6 <_svfiprintf_r+0x1aa>
    b6e0:	0000c2f8 	.word	0x0000c2f8
    b6e4:	0000c2fe 	.word	0x0000c2fe
    b6e8:	0000c302 	.word	0x0000c302
    b6ec:	00000000 	.word	0x00000000
    b6f0:	0000b455 	.word	0x0000b455

0000b6f4 <_printf_common>:
    b6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6f8:	4691      	mov	r9, r2
    b6fa:	461f      	mov	r7, r3
    b6fc:	688a      	ldr	r2, [r1, #8]
    b6fe:	690b      	ldr	r3, [r1, #16]
    b700:	f8dd 8020 	ldr.w	r8, [sp, #32]
    b704:	4293      	cmp	r3, r2
    b706:	bfb8      	it	lt
    b708:	4613      	movlt	r3, r2
    b70a:	f8c9 3000 	str.w	r3, [r9]
    b70e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    b712:	4606      	mov	r6, r0
    b714:	460c      	mov	r4, r1
    b716:	b112      	cbz	r2, b71e <_printf_common+0x2a>
    b718:	3301      	adds	r3, #1
    b71a:	f8c9 3000 	str.w	r3, [r9]
    b71e:	6823      	ldr	r3, [r4, #0]
    b720:	0699      	lsls	r1, r3, #26
    b722:	bf42      	ittt	mi
    b724:	f8d9 3000 	ldrmi.w	r3, [r9]
    b728:	3302      	addmi	r3, #2
    b72a:	f8c9 3000 	strmi.w	r3, [r9]
    b72e:	6825      	ldr	r5, [r4, #0]
    b730:	f015 0506 	ands.w	r5, r5, #6
    b734:	d107      	bne.n	b746 <_printf_common+0x52>
    b736:	f104 0a19 	add.w	sl, r4, #25
    b73a:	68e3      	ldr	r3, [r4, #12]
    b73c:	f8d9 2000 	ldr.w	r2, [r9]
    b740:	1a9b      	subs	r3, r3, r2
    b742:	429d      	cmp	r5, r3
    b744:	db29      	blt.n	b79a <_printf_common+0xa6>
    b746:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    b74a:	6822      	ldr	r2, [r4, #0]
    b74c:	3300      	adds	r3, #0
    b74e:	bf18      	it	ne
    b750:	2301      	movne	r3, #1
    b752:	0692      	lsls	r2, r2, #26
    b754:	d42e      	bmi.n	b7b4 <_printf_common+0xc0>
    b756:	f104 0243 	add.w	r2, r4, #67	; 0x43
    b75a:	4639      	mov	r1, r7
    b75c:	4630      	mov	r0, r6
    b75e:	47c0      	blx	r8
    b760:	3001      	adds	r0, #1
    b762:	d021      	beq.n	b7a8 <_printf_common+0xb4>
    b764:	6823      	ldr	r3, [r4, #0]
    b766:	68e5      	ldr	r5, [r4, #12]
    b768:	f8d9 2000 	ldr.w	r2, [r9]
    b76c:	f003 0306 	and.w	r3, r3, #6
    b770:	2b04      	cmp	r3, #4
    b772:	bf08      	it	eq
    b774:	1aad      	subeq	r5, r5, r2
    b776:	68a3      	ldr	r3, [r4, #8]
    b778:	6922      	ldr	r2, [r4, #16]
    b77a:	bf0c      	ite	eq
    b77c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    b780:	2500      	movne	r5, #0
    b782:	4293      	cmp	r3, r2
    b784:	bfc4      	itt	gt
    b786:	1a9b      	subgt	r3, r3, r2
    b788:	18ed      	addgt	r5, r5, r3
    b78a:	f04f 0900 	mov.w	r9, #0
    b78e:	341a      	adds	r4, #26
    b790:	454d      	cmp	r5, r9
    b792:	d11b      	bne.n	b7cc <_printf_common+0xd8>
    b794:	2000      	movs	r0, #0
    b796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b79a:	2301      	movs	r3, #1
    b79c:	4652      	mov	r2, sl
    b79e:	4639      	mov	r1, r7
    b7a0:	4630      	mov	r0, r6
    b7a2:	47c0      	blx	r8
    b7a4:	3001      	adds	r0, #1
    b7a6:	d103      	bne.n	b7b0 <_printf_common+0xbc>
    b7a8:	f04f 30ff 	mov.w	r0, #4294967295
    b7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7b0:	3501      	adds	r5, #1
    b7b2:	e7c2      	b.n	b73a <_printf_common+0x46>
    b7b4:	18e1      	adds	r1, r4, r3
    b7b6:	1c5a      	adds	r2, r3, #1
    b7b8:	2030      	movs	r0, #48	; 0x30
    b7ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    b7be:	4422      	add	r2, r4
    b7c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    b7c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    b7c8:	3302      	adds	r3, #2
    b7ca:	e7c4      	b.n	b756 <_printf_common+0x62>
    b7cc:	2301      	movs	r3, #1
    b7ce:	4622      	mov	r2, r4
    b7d0:	4639      	mov	r1, r7
    b7d2:	4630      	mov	r0, r6
    b7d4:	47c0      	blx	r8
    b7d6:	3001      	adds	r0, #1
    b7d8:	d0e6      	beq.n	b7a8 <_printf_common+0xb4>
    b7da:	f109 0901 	add.w	r9, r9, #1
    b7de:	e7d7      	b.n	b790 <_printf_common+0x9c>

0000b7e0 <_printf_i>:
    b7e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b7e4:	4617      	mov	r7, r2
    b7e6:	7e0a      	ldrb	r2, [r1, #24]
    b7e8:	b085      	sub	sp, #20
    b7ea:	2a6e      	cmp	r2, #110	; 0x6e
    b7ec:	4698      	mov	r8, r3
    b7ee:	4606      	mov	r6, r0
    b7f0:	460c      	mov	r4, r1
    b7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b7f4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    b7f8:	f000 80bc 	beq.w	b974 <_printf_i+0x194>
    b7fc:	d81a      	bhi.n	b834 <_printf_i+0x54>
    b7fe:	2a63      	cmp	r2, #99	; 0x63
    b800:	d02e      	beq.n	b860 <_printf_i+0x80>
    b802:	d80a      	bhi.n	b81a <_printf_i+0x3a>
    b804:	2a00      	cmp	r2, #0
    b806:	f000 80c8 	beq.w	b99a <_printf_i+0x1ba>
    b80a:	2a58      	cmp	r2, #88	; 0x58
    b80c:	f000 808a 	beq.w	b924 <_printf_i+0x144>
    b810:	f104 0542 	add.w	r5, r4, #66	; 0x42
    b814:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    b818:	e02a      	b.n	b870 <_printf_i+0x90>
    b81a:	2a64      	cmp	r2, #100	; 0x64
    b81c:	d001      	beq.n	b822 <_printf_i+0x42>
    b81e:	2a69      	cmp	r2, #105	; 0x69
    b820:	d1f6      	bne.n	b810 <_printf_i+0x30>
    b822:	6821      	ldr	r1, [r4, #0]
    b824:	681a      	ldr	r2, [r3, #0]
    b826:	f011 0f80 	tst.w	r1, #128	; 0x80
    b82a:	d023      	beq.n	b874 <_printf_i+0x94>
    b82c:	1d11      	adds	r1, r2, #4
    b82e:	6019      	str	r1, [r3, #0]
    b830:	6813      	ldr	r3, [r2, #0]
    b832:	e027      	b.n	b884 <_printf_i+0xa4>
    b834:	2a73      	cmp	r2, #115	; 0x73
    b836:	f000 80b4 	beq.w	b9a2 <_printf_i+0x1c2>
    b83a:	d808      	bhi.n	b84e <_printf_i+0x6e>
    b83c:	2a6f      	cmp	r2, #111	; 0x6f
    b83e:	d02a      	beq.n	b896 <_printf_i+0xb6>
    b840:	2a70      	cmp	r2, #112	; 0x70
    b842:	d1e5      	bne.n	b810 <_printf_i+0x30>
    b844:	680a      	ldr	r2, [r1, #0]
    b846:	f042 0220 	orr.w	r2, r2, #32
    b84a:	600a      	str	r2, [r1, #0]
    b84c:	e003      	b.n	b856 <_printf_i+0x76>
    b84e:	2a75      	cmp	r2, #117	; 0x75
    b850:	d021      	beq.n	b896 <_printf_i+0xb6>
    b852:	2a78      	cmp	r2, #120	; 0x78
    b854:	d1dc      	bne.n	b810 <_printf_i+0x30>
    b856:	2278      	movs	r2, #120	; 0x78
    b858:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    b85c:	496e      	ldr	r1, [pc, #440]	; (ba18 <_printf_i+0x238>)
    b85e:	e064      	b.n	b92a <_printf_i+0x14a>
    b860:	681a      	ldr	r2, [r3, #0]
    b862:	f101 0542 	add.w	r5, r1, #66	; 0x42
    b866:	1d11      	adds	r1, r2, #4
    b868:	6019      	str	r1, [r3, #0]
    b86a:	6813      	ldr	r3, [r2, #0]
    b86c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    b870:	2301      	movs	r3, #1
    b872:	e0a3      	b.n	b9bc <_printf_i+0x1dc>
    b874:	f011 0f40 	tst.w	r1, #64	; 0x40
    b878:	f102 0104 	add.w	r1, r2, #4
    b87c:	6019      	str	r1, [r3, #0]
    b87e:	d0d7      	beq.n	b830 <_printf_i+0x50>
    b880:	f9b2 3000 	ldrsh.w	r3, [r2]
    b884:	2b00      	cmp	r3, #0
    b886:	da03      	bge.n	b890 <_printf_i+0xb0>
    b888:	222d      	movs	r2, #45	; 0x2d
    b88a:	425b      	negs	r3, r3
    b88c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    b890:	4962      	ldr	r1, [pc, #392]	; (ba1c <_printf_i+0x23c>)
    b892:	220a      	movs	r2, #10
    b894:	e017      	b.n	b8c6 <_printf_i+0xe6>
    b896:	6820      	ldr	r0, [r4, #0]
    b898:	6819      	ldr	r1, [r3, #0]
    b89a:	f010 0f80 	tst.w	r0, #128	; 0x80
    b89e:	d003      	beq.n	b8a8 <_printf_i+0xc8>
    b8a0:	1d08      	adds	r0, r1, #4
    b8a2:	6018      	str	r0, [r3, #0]
    b8a4:	680b      	ldr	r3, [r1, #0]
    b8a6:	e006      	b.n	b8b6 <_printf_i+0xd6>
    b8a8:	f010 0f40 	tst.w	r0, #64	; 0x40
    b8ac:	f101 0004 	add.w	r0, r1, #4
    b8b0:	6018      	str	r0, [r3, #0]
    b8b2:	d0f7      	beq.n	b8a4 <_printf_i+0xc4>
    b8b4:	880b      	ldrh	r3, [r1, #0]
    b8b6:	4959      	ldr	r1, [pc, #356]	; (ba1c <_printf_i+0x23c>)
    b8b8:	2a6f      	cmp	r2, #111	; 0x6f
    b8ba:	bf14      	ite	ne
    b8bc:	220a      	movne	r2, #10
    b8be:	2208      	moveq	r2, #8
    b8c0:	2000      	movs	r0, #0
    b8c2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    b8c6:	6865      	ldr	r5, [r4, #4]
    b8c8:	60a5      	str	r5, [r4, #8]
    b8ca:	2d00      	cmp	r5, #0
    b8cc:	f2c0 809c 	blt.w	ba08 <_printf_i+0x228>
    b8d0:	6820      	ldr	r0, [r4, #0]
    b8d2:	f020 0004 	bic.w	r0, r0, #4
    b8d6:	6020      	str	r0, [r4, #0]
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d13f      	bne.n	b95c <_printf_i+0x17c>
    b8dc:	2d00      	cmp	r5, #0
    b8de:	f040 8095 	bne.w	ba0c <_printf_i+0x22c>
    b8e2:	4675      	mov	r5, lr
    b8e4:	2a08      	cmp	r2, #8
    b8e6:	d10b      	bne.n	b900 <_printf_i+0x120>
    b8e8:	6823      	ldr	r3, [r4, #0]
    b8ea:	07da      	lsls	r2, r3, #31
    b8ec:	d508      	bpl.n	b900 <_printf_i+0x120>
    b8ee:	6923      	ldr	r3, [r4, #16]
    b8f0:	6862      	ldr	r2, [r4, #4]
    b8f2:	429a      	cmp	r2, r3
    b8f4:	bfde      	ittt	le
    b8f6:	2330      	movle	r3, #48	; 0x30
    b8f8:	f805 3c01 	strble.w	r3, [r5, #-1]
    b8fc:	f105 35ff 	addle.w	r5, r5, #4294967295
    b900:	ebae 0305 	sub.w	r3, lr, r5
    b904:	6123      	str	r3, [r4, #16]
    b906:	f8cd 8000 	str.w	r8, [sp]
    b90a:	463b      	mov	r3, r7
    b90c:	aa03      	add	r2, sp, #12
    b90e:	4621      	mov	r1, r4
    b910:	4630      	mov	r0, r6
    b912:	f7ff feef 	bl	b6f4 <_printf_common>
    b916:	3001      	adds	r0, #1
    b918:	d155      	bne.n	b9c6 <_printf_i+0x1e6>
    b91a:	f04f 30ff 	mov.w	r0, #4294967295
    b91e:	b005      	add	sp, #20
    b920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b924:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    b928:	493c      	ldr	r1, [pc, #240]	; (ba1c <_printf_i+0x23c>)
    b92a:	6822      	ldr	r2, [r4, #0]
    b92c:	6818      	ldr	r0, [r3, #0]
    b92e:	f012 0f80 	tst.w	r2, #128	; 0x80
    b932:	f100 0504 	add.w	r5, r0, #4
    b936:	601d      	str	r5, [r3, #0]
    b938:	d001      	beq.n	b93e <_printf_i+0x15e>
    b93a:	6803      	ldr	r3, [r0, #0]
    b93c:	e002      	b.n	b944 <_printf_i+0x164>
    b93e:	0655      	lsls	r5, r2, #25
    b940:	d5fb      	bpl.n	b93a <_printf_i+0x15a>
    b942:	8803      	ldrh	r3, [r0, #0]
    b944:	07d0      	lsls	r0, r2, #31
    b946:	bf44      	itt	mi
    b948:	f042 0220 	orrmi.w	r2, r2, #32
    b94c:	6022      	strmi	r2, [r4, #0]
    b94e:	b91b      	cbnz	r3, b958 <_printf_i+0x178>
    b950:	6822      	ldr	r2, [r4, #0]
    b952:	f022 0220 	bic.w	r2, r2, #32
    b956:	6022      	str	r2, [r4, #0]
    b958:	2210      	movs	r2, #16
    b95a:	e7b1      	b.n	b8c0 <_printf_i+0xe0>
    b95c:	4675      	mov	r5, lr
    b95e:	fbb3 f0f2 	udiv	r0, r3, r2
    b962:	fb02 3310 	mls	r3, r2, r0, r3
    b966:	5ccb      	ldrb	r3, [r1, r3]
    b968:	f805 3d01 	strb.w	r3, [r5, #-1]!
    b96c:	4603      	mov	r3, r0
    b96e:	2800      	cmp	r0, #0
    b970:	d1f5      	bne.n	b95e <_printf_i+0x17e>
    b972:	e7b7      	b.n	b8e4 <_printf_i+0x104>
    b974:	6808      	ldr	r0, [r1, #0]
    b976:	681a      	ldr	r2, [r3, #0]
    b978:	6949      	ldr	r1, [r1, #20]
    b97a:	f010 0f80 	tst.w	r0, #128	; 0x80
    b97e:	d004      	beq.n	b98a <_printf_i+0x1aa>
    b980:	1d10      	adds	r0, r2, #4
    b982:	6018      	str	r0, [r3, #0]
    b984:	6813      	ldr	r3, [r2, #0]
    b986:	6019      	str	r1, [r3, #0]
    b988:	e007      	b.n	b99a <_printf_i+0x1ba>
    b98a:	f010 0f40 	tst.w	r0, #64	; 0x40
    b98e:	f102 0004 	add.w	r0, r2, #4
    b992:	6018      	str	r0, [r3, #0]
    b994:	6813      	ldr	r3, [r2, #0]
    b996:	d0f6      	beq.n	b986 <_printf_i+0x1a6>
    b998:	8019      	strh	r1, [r3, #0]
    b99a:	2300      	movs	r3, #0
    b99c:	6123      	str	r3, [r4, #16]
    b99e:	4675      	mov	r5, lr
    b9a0:	e7b1      	b.n	b906 <_printf_i+0x126>
    b9a2:	681a      	ldr	r2, [r3, #0]
    b9a4:	1d11      	adds	r1, r2, #4
    b9a6:	6019      	str	r1, [r3, #0]
    b9a8:	6815      	ldr	r5, [r2, #0]
    b9aa:	6862      	ldr	r2, [r4, #4]
    b9ac:	2100      	movs	r1, #0
    b9ae:	4628      	mov	r0, r5
    b9b0:	f000 f836 	bl	ba20 <memchr>
    b9b4:	b108      	cbz	r0, b9ba <_printf_i+0x1da>
    b9b6:	1b40      	subs	r0, r0, r5
    b9b8:	6060      	str	r0, [r4, #4]
    b9ba:	6863      	ldr	r3, [r4, #4]
    b9bc:	6123      	str	r3, [r4, #16]
    b9be:	2300      	movs	r3, #0
    b9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    b9c4:	e79f      	b.n	b906 <_printf_i+0x126>
    b9c6:	6923      	ldr	r3, [r4, #16]
    b9c8:	462a      	mov	r2, r5
    b9ca:	4639      	mov	r1, r7
    b9cc:	4630      	mov	r0, r6
    b9ce:	47c0      	blx	r8
    b9d0:	3001      	adds	r0, #1
    b9d2:	d0a2      	beq.n	b91a <_printf_i+0x13a>
    b9d4:	6823      	ldr	r3, [r4, #0]
    b9d6:	079b      	lsls	r3, r3, #30
    b9d8:	d507      	bpl.n	b9ea <_printf_i+0x20a>
    b9da:	2500      	movs	r5, #0
    b9dc:	f104 0919 	add.w	r9, r4, #25
    b9e0:	68e3      	ldr	r3, [r4, #12]
    b9e2:	9a03      	ldr	r2, [sp, #12]
    b9e4:	1a9b      	subs	r3, r3, r2
    b9e6:	429d      	cmp	r5, r3
    b9e8:	db05      	blt.n	b9f6 <_printf_i+0x216>
    b9ea:	68e0      	ldr	r0, [r4, #12]
    b9ec:	9b03      	ldr	r3, [sp, #12]
    b9ee:	4298      	cmp	r0, r3
    b9f0:	bfb8      	it	lt
    b9f2:	4618      	movlt	r0, r3
    b9f4:	e793      	b.n	b91e <_printf_i+0x13e>
    b9f6:	2301      	movs	r3, #1
    b9f8:	464a      	mov	r2, r9
    b9fa:	4639      	mov	r1, r7
    b9fc:	4630      	mov	r0, r6
    b9fe:	47c0      	blx	r8
    ba00:	3001      	adds	r0, #1
    ba02:	d08a      	beq.n	b91a <_printf_i+0x13a>
    ba04:	3501      	adds	r5, #1
    ba06:	e7eb      	b.n	b9e0 <_printf_i+0x200>
    ba08:	2b00      	cmp	r3, #0
    ba0a:	d1a7      	bne.n	b95c <_printf_i+0x17c>
    ba0c:	780b      	ldrb	r3, [r1, #0]
    ba0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    ba12:	f104 0542 	add.w	r5, r4, #66	; 0x42
    ba16:	e765      	b.n	b8e4 <_printf_i+0x104>
    ba18:	0000c31a 	.word	0x0000c31a
    ba1c:	0000c309 	.word	0x0000c309

0000ba20 <memchr>:
    ba20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ba24:	2a10      	cmp	r2, #16
    ba26:	db2b      	blt.n	ba80 <memchr+0x60>
    ba28:	f010 0f07 	tst.w	r0, #7
    ba2c:	d008      	beq.n	ba40 <memchr+0x20>
    ba2e:	f810 3b01 	ldrb.w	r3, [r0], #1
    ba32:	3a01      	subs	r2, #1
    ba34:	428b      	cmp	r3, r1
    ba36:	d02d      	beq.n	ba94 <memchr+0x74>
    ba38:	f010 0f07 	tst.w	r0, #7
    ba3c:	b342      	cbz	r2, ba90 <memchr+0x70>
    ba3e:	d1f6      	bne.n	ba2e <memchr+0xe>
    ba40:	b4f0      	push	{r4, r5, r6, r7}
    ba42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ba46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ba4a:	f022 0407 	bic.w	r4, r2, #7
    ba4e:	f07f 0700 	mvns.w	r7, #0
    ba52:	2300      	movs	r3, #0
    ba54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    ba58:	3c08      	subs	r4, #8
    ba5a:	ea85 0501 	eor.w	r5, r5, r1
    ba5e:	ea86 0601 	eor.w	r6, r6, r1
    ba62:	fa85 f547 	uadd8	r5, r5, r7
    ba66:	faa3 f587 	sel	r5, r3, r7
    ba6a:	fa86 f647 	uadd8	r6, r6, r7
    ba6e:	faa5 f687 	sel	r6, r5, r7
    ba72:	b98e      	cbnz	r6, ba98 <memchr+0x78>
    ba74:	d1ee      	bne.n	ba54 <memchr+0x34>
    ba76:	bcf0      	pop	{r4, r5, r6, r7}
    ba78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ba7c:	f002 0207 	and.w	r2, r2, #7
    ba80:	b132      	cbz	r2, ba90 <memchr+0x70>
    ba82:	f810 3b01 	ldrb.w	r3, [r0], #1
    ba86:	3a01      	subs	r2, #1
    ba88:	ea83 0301 	eor.w	r3, r3, r1
    ba8c:	b113      	cbz	r3, ba94 <memchr+0x74>
    ba8e:	d1f8      	bne.n	ba82 <memchr+0x62>
    ba90:	2000      	movs	r0, #0
    ba92:	4770      	bx	lr
    ba94:	3801      	subs	r0, #1
    ba96:	4770      	bx	lr
    ba98:	2d00      	cmp	r5, #0
    ba9a:	bf06      	itte	eq
    ba9c:	4635      	moveq	r5, r6
    ba9e:	3803      	subeq	r0, #3
    baa0:	3807      	subne	r0, #7
    baa2:	f015 0f01 	tst.w	r5, #1
    baa6:	d107      	bne.n	bab8 <memchr+0x98>
    baa8:	3001      	adds	r0, #1
    baaa:	f415 7f80 	tst.w	r5, #256	; 0x100
    baae:	bf02      	ittt	eq
    bab0:	3001      	addeq	r0, #1
    bab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    bab6:	3001      	addeq	r0, #1
    bab8:	bcf0      	pop	{r4, r5, r6, r7}
    baba:	3801      	subs	r0, #1
    babc:	4770      	bx	lr
    babe:	bf00      	nop

0000bac0 <memmove>:
    bac0:	4288      	cmp	r0, r1
    bac2:	b510      	push	{r4, lr}
    bac4:	eb01 0302 	add.w	r3, r1, r2
    bac8:	d803      	bhi.n	bad2 <memmove+0x12>
    baca:	1e42      	subs	r2, r0, #1
    bacc:	4299      	cmp	r1, r3
    bace:	d10c      	bne.n	baea <memmove+0x2a>
    bad0:	bd10      	pop	{r4, pc}
    bad2:	4298      	cmp	r0, r3
    bad4:	d2f9      	bcs.n	baca <memmove+0xa>
    bad6:	1881      	adds	r1, r0, r2
    bad8:	1ad2      	subs	r2, r2, r3
    bada:	42d3      	cmn	r3, r2
    badc:	d100      	bne.n	bae0 <memmove+0x20>
    bade:	bd10      	pop	{r4, pc}
    bae0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    bae4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    bae8:	e7f7      	b.n	bada <memmove+0x1a>
    baea:	f811 4b01 	ldrb.w	r4, [r1], #1
    baee:	f802 4f01 	strb.w	r4, [r2, #1]!
    baf2:	e7eb      	b.n	bacc <memmove+0xc>

0000baf4 <_realloc_r>:
    baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    baf6:	4607      	mov	r7, r0
    baf8:	4614      	mov	r4, r2
    bafa:	460e      	mov	r6, r1
    bafc:	b921      	cbnz	r1, bb08 <_realloc_r+0x14>
    bafe:	4611      	mov	r1, r2
    bb00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bb04:	f7ff bbd0 	b.w	b2a8 <_malloc_r>
    bb08:	b922      	cbnz	r2, bb14 <_realloc_r+0x20>
    bb0a:	f7ff fb7f 	bl	b20c <_free_r>
    bb0e:	4625      	mov	r5, r4
    bb10:	4628      	mov	r0, r5
    bb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb14:	f000 f814 	bl	bb40 <_malloc_usable_size_r>
    bb18:	4284      	cmp	r4, r0
    bb1a:	d90f      	bls.n	bb3c <_realloc_r+0x48>
    bb1c:	4621      	mov	r1, r4
    bb1e:	4638      	mov	r0, r7
    bb20:	f7ff fbc2 	bl	b2a8 <_malloc_r>
    bb24:	4605      	mov	r5, r0
    bb26:	2800      	cmp	r0, #0
    bb28:	d0f2      	beq.n	bb10 <_realloc_r+0x1c>
    bb2a:	4631      	mov	r1, r6
    bb2c:	4622      	mov	r2, r4
    bb2e:	f7ff fb59 	bl	b1e4 <memcpy>
    bb32:	4631      	mov	r1, r6
    bb34:	4638      	mov	r0, r7
    bb36:	f7ff fb69 	bl	b20c <_free_r>
    bb3a:	e7e9      	b.n	bb10 <_realloc_r+0x1c>
    bb3c:	4635      	mov	r5, r6
    bb3e:	e7e7      	b.n	bb10 <_realloc_r+0x1c>

0000bb40 <_malloc_usable_size_r>:
    bb40:	f851 0c04 	ldr.w	r0, [r1, #-4]
    bb44:	2800      	cmp	r0, #0
    bb46:	f1a0 0004 	sub.w	r0, r0, #4
    bb4a:	bfbc      	itt	lt
    bb4c:	580b      	ldrlt	r3, [r1, r0]
    bb4e:	18c0      	addlt	r0, r0, r3
    bb50:	4770      	bx	lr
    bb52:	0000      	movs	r0, r0
    bb54:	4952475b 	.word	0x4952475b
    bb58:	25205d44 	.word	0x25205d44
    bb5c:	25206433 	.word	0x25206433
    bb60:	25206434 	.word	0x25206434
    bb64:	25206434 	.word	0x25206434
    bb68:	4d5b2064 	.word	0x4d5b2064
    bb6c:	5d494449 	.word	0x5d494449
    bb70:	3a684320 	.word	0x3a684320
    bb74:	20642520 	.word	0x20642520
    bb78:	646d4320 	.word	0x646d4320
    bb7c:	6425203a 	.word	0x6425203a
    bb80:	61502020 	.word	0x61502020
    bb84:	316d6172 	.word	0x316d6172
    bb88:	6425203a 	.word	0x6425203a
    bb8c:	61502020 	.word	0x61502020
    bb90:	326d6172 	.word	0x326d6172
    bb94:	6425203a 	.word	0x6425203a
    bb98:	0000000a 	.word	0x0000000a
    bb9c:	4952475b 	.word	0x4952475b
    bba0:	25205d44 	.word	0x25205d44
    bba4:	25206433 	.word	0x25206433
    bba8:	25206434 	.word	0x25206434
    bbac:	25206434 	.word	0x25206434
    bbb0:	4b5b2064 	.word	0x4b5b2064
    bbb4:	4f425945 	.word	0x4f425945
    bbb8:	5d445241 	.word	0x5d445241
    bbbc:	79654b20 	.word	0x79654b20
    bbc0:	6425203a 	.word	0x6425203a
    bbc4:	646f4d20 	.word	0x646f4d20
    bbc8:	6425203a 	.word	0x6425203a
    bbcc:	646d4320 	.word	0x646d4320
    bbd0:	6425203a 	.word	0x6425203a
    bbd4:	4357480a 	.word	0x4357480a
    bbd8:	203a4746 	.word	0x203a4746
    bbdc:	78383025 	.word	0x78383025
    bbe0:	0000000a 	.word	0x0000000a
    bbe4:	4b4e555b 	.word	0x4b4e555b
    bbe8:	4e574f4e 	.word	0x4e574f4e
    bbec:	3e2d205d 	.word	0x3e2d205d
    bbf0:	6f725020 	.word	0x6f725020
    bbf4:	6f636f74 	.word	0x6f636f74
    bbf8:	25203a6c 	.word	0x25203a6c
    bbfc:	00000a64 	.word	0x00000a64
    bc00:	30256325 	.word	0x30256325
    bc04:	30257832 	.word	0x30257832
    bc08:	30257832 	.word	0x30257832
    bc0c:	30257832 	.word	0x30257832
    bc10:	63257832 	.word	0x63257832
    bc14:	00000000 	.word	0x00000000
    bc18:	00003030 	.word	0x00003030
    bc1c:	30256325 	.word	0x30256325
    bc20:	30257832 	.word	0x30257832
    bc24:	30257832 	.word	0x30257832
    bc28:	30257832 	.word	0x30257832
    bc2c:	30257832 	.word	0x30257832
    bc30:	63257832 	.word	0x63257832
    bc34:	30256325 	.word	0x30256325
    bc38:	30257832 	.word	0x30257832
    bc3c:	30257832 	.word	0x30257832
    bc40:	30257832 	.word	0x30257832
    bc44:	30257832 	.word	0x30257832
    bc48:	63257832 	.word	0x63257832
    bc4c:	00000000 	.word	0x00000000
    bc50:	30256325 	.word	0x30256325
    bc54:	30257832 	.word	0x30257832
    bc58:	30257832 	.word	0x30257832
    bc5c:	30257832 	.word	0x30257832
    bc60:	63257832 	.word	0x63257832
    bc64:	00000025 	.word	0x00000025
    bc68:	78383025 	.word	0x78383025
    bc6c:	00000000 	.word	0x00000000
    bc70:	63256325 	.word	0x63256325
    bc74:	78323025 	.word	0x78323025
    bc78:	78323025 	.word	0x78323025
    bc7c:	78323025 	.word	0x78323025
    bc80:	78323025 	.word	0x78323025
    bc84:	78323025 	.word	0x78323025
    bc88:	00006325 	.word	0x00006325
    bc8c:	78323025 	.word	0x78323025
    bc90:	00000000 	.word	0x00000000
    bc94:	000a3030 	.word	0x000a3030
    bc98:	682f2e2e 	.word	0x682f2e2e
    bc9c:	732f6c61 	.word	0x732f6c61
    bca0:	682f6372 	.word	0x682f6372
    bca4:	615f6c61 	.word	0x615f6c61
    bca8:	615f6364 	.word	0x615f6364
    bcac:	636e7973 	.word	0x636e7973
    bcb0:	0000632e 	.word	0x0000632e
    bcb4:	682f2e2e 	.word	0x682f2e2e
    bcb8:	732f6c61 	.word	0x732f6c61
    bcbc:	682f6372 	.word	0x682f6372
    bcc0:	635f6c61 	.word	0x635f6c61
    bcc4:	735f6372 	.word	0x735f6372
    bcc8:	2e636e79 	.word	0x2e636e79
    bccc:	00000063 	.word	0x00000063
    bcd0:	682f2e2e 	.word	0x682f2e2e
    bcd4:	732f6c61 	.word	0x732f6c61
    bcd8:	682f6372 	.word	0x682f6372
    bcdc:	665f6c61 	.word	0x665f6c61
    bce0:	6873616c 	.word	0x6873616c
    bce4:	0000632e 	.word	0x0000632e
    bce8:	682f2e2e 	.word	0x682f2e2e
    bcec:	732f6c61 	.word	0x732f6c61
    bcf0:	682f6372 	.word	0x682f6372
    bcf4:	695f6c61 	.word	0x695f6c61
    bcf8:	6d5f6332 	.word	0x6d5f6332
    bcfc:	7973615f 	.word	0x7973615f
    bd00:	632e636e 	.word	0x632e636e
    bd04:	00000000 	.word	0x00000000
    bd08:	682f2e2e 	.word	0x682f2e2e
    bd0c:	732f6c61 	.word	0x732f6c61
    bd10:	682f6372 	.word	0x682f6372
    bd14:	695f6c61 	.word	0x695f6c61
    bd18:	00632e6f 	.word	0x00632e6f
    bd1c:	682f2e2e 	.word	0x682f2e2e
    bd20:	732f6c61 	.word	0x732f6c61
    bd24:	682f6372 	.word	0x682f6372
    bd28:	735f6c61 	.word	0x735f6c61
    bd2c:	6d5f6970 	.word	0x6d5f6970
    bd30:	7973615f 	.word	0x7973615f
    bd34:	632e636e 	.word	0x632e636e
    bd38:	00000000 	.word	0x00000000
    bd3c:	682f2e2e 	.word	0x682f2e2e
    bd40:	732f6c61 	.word	0x732f6c61
    bd44:	682f6372 	.word	0x682f6372
    bd48:	735f6c61 	.word	0x735f6c61
    bd4c:	6d5f6970 	.word	0x6d5f6970
    bd50:	616d645f 	.word	0x616d645f
    bd54:	0000632e 	.word	0x0000632e
    bd58:	682f2e2e 	.word	0x682f2e2e
    bd5c:	732f6c61 	.word	0x732f6c61
    bd60:	682f6372 	.word	0x682f6372
    bd64:	745f6c61 	.word	0x745f6c61
    bd68:	72656d69 	.word	0x72656d69
    bd6c:	0000632e 	.word	0x0000632e
    bd70:	682f2e2e 	.word	0x682f2e2e
    bd74:	732f6c61 	.word	0x732f6c61
    bd78:	682f6372 	.word	0x682f6372
    bd7c:	755f6c61 	.word	0x755f6c61
    bd80:	74726173 	.word	0x74726173
    bd84:	7973615f 	.word	0x7973615f
    bd88:	632e636e 	.word	0x632e636e
    bd8c:	00000000 	.word	0x00000000
    bd90:	682f2e2e 	.word	0x682f2e2e
    bd94:	752f6c61 	.word	0x752f6c61
    bd98:	736c6974 	.word	0x736c6974
    bd9c:	6372732f 	.word	0x6372732f
    bda0:	6974752f 	.word	0x6974752f
    bda4:	6c5f736c 	.word	0x6c5f736c
    bda8:	2e747369 	.word	0x2e747369
    bdac:	00000063 	.word	0x00000063
    bdb0:	682f2e2e 	.word	0x682f2e2e
    bdb4:	752f6c61 	.word	0x752f6c61
    bdb8:	736c6974 	.word	0x736c6974
    bdbc:	6372732f 	.word	0x6372732f
    bdc0:	6974752f 	.word	0x6974752f
    bdc4:	725f736c 	.word	0x725f736c
    bdc8:	62676e69 	.word	0x62676e69
    bdcc:	65666675 	.word	0x65666675
    bdd0:	00632e72 	.word	0x00632e72

0000bdd4 <_adcs>:
    bdd4:	01000000 0003000c 00041807 00000000     ................
    bde4:	0014080b 00010000 000c0100 18040003     ................
    bdf4:	00000004 080b0000 00000014 682f2e2e     ............../h
    be04:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    be14:	00000000                                ....

0000be18 <_cfgs>:
    be18:	00200600 08068000 00200400 08068000     .. ....... .....
    be28:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    be48:	00200b00 14000003 00200a00 08000002     .. ....... .....
    be58:	00201300 14000003 00000000 00000000     .. .............
	...

0000bf18 <user_mux_confs>:
	...
    bf44:	04030201 04030201 00000000 00000000     ................
	...

0000bf5c <channel_confs>:
    bf5c:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000bf9c <interrupt_cfg>:
    bf9c:	00000002 00000002 00000002 00000002     ................
	...
    c01c:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    c02c:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    c03c:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    c04c:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    c05c:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    c06c:	43000800 43000c00                       ...C...C

0000c074 <_usarts>:
    c074:	00000000 40100004 00030000 00700002     .......@......p.
    c084:	0000aaaa 00000000 00000001 40100004     ...............@
    c094:	00030000 00700002 0000aaaa 00000000     ......p.........
    c0a4:	00000002 40100004 00030000 00700002     .......@......p.
    c0b4:	0000f62b 00000000 00000004 40100004     +..............@
    c0c4:	00030000 00700002 0000aaaa 00000000     ......p.........
    c0d4:	00000006 40100004 00030000 00700002     .......@......p.
    c0e4:	0000aaaa 00000000                       ........

0000c0ec <_i2cms>:
    c0ec:	00000005 00200014 00000100 0000e6e5     ...... .........
    c0fc:	00d70000 02dc6c00                       .....l..

0000c104 <sercomspi_regs>:
    c104:	3020000c 00020000 00000000 01ff0005     .. 0............
    c114:	20000c03 00000000 00000000 ff000600     ... ............
    c124:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    c134:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    c144:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    c154:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000c164 <_tcs>:
    c164:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    c174:	00000000 006c0001 00000308 00000021     ......l.....!...
    c184:	00003a98 00000000 006d0002 00000308     .:........m.....
    c194:	00000021 00003a98 00000000 006e0003     !....:........n.
    c1a4:	00000308 00000021 00003a98 00000000     ....!....:......
    c1b4:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    c1c4:	0000632e                                .c..

0000c1c8 <_usb_ep_cfgs>:
    c1c8:	20000d3c 00000000 00000040 00000000     <.. ....@.......
	...
    c1e0:	20000d34 00000000 00000008 20000cf4     4.. ........... 
    c1f0:	20000cec 00080040 00000000 00000000     ... @...........
	...
    c208:	20000cac 00400000                       ... ..@.

0000c210 <keyboard_report_desc>:
    c210:	06090105 070501a1 e729e019 01250015     ..........)...%.
    c220:	08950175 01810281 65290019 65250015     u.........)e..%e
    c230:	06950875 08050081 05290119 01250015     u.........)...%.
    c240:	05950175 03950291 00c00191              u...........

0000c24c <mouse_report_desc>:
    c24c:	02090105 010901a1 090500a1 03290119     ..............).
    c25c:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    c26c:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    c27c:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    c28c:	73752f65 2e636462 00000063              e/usbdc.c...

0000c298 <__sf_fake_stderr>:
	...

0000c2b8 <__sf_fake_stdin>:
	...

0000c2d8 <__sf_fake_stdout>:
	...
    c2f8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c308:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c318:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c328:	00006665                                ef..

0000c32c <_init>:
    c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c32e:	bf00      	nop
    c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c332:	bc08      	pop	{r3}
    c334:	469e      	mov	lr, r3
    c336:	4770      	bx	lr

0000c338 <__init_array_start>:
    c338:	00000289 	.word	0x00000289

0000c33c <_fini>:
    c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c33e:	bf00      	nop
    c340:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c342:	bc08      	pop	{r3}
    c344:	469e      	mov	lr, r3
    c346:	4770      	bx	lr

0000c348 <__fini_array_start>:
    c348:	00000265 	.word	0x00000265
