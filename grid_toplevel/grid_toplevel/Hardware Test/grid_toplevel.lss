
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008d78  00004000  00004000  00004000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c0  20000000  0000cd78  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000100c0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000100c0  2**0
                  CONTENTS
  4 .bss          000075e4  200000c0  0000ce40  000100c0  2**4
                  ALLOC
  5 .stack        00010004  200076a4  00014424  000100c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000100c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000100ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00073e11  00000000  00000000  00010147  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009ff2  00000000  00000000  00083f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00029d91  00000000  00000000  0008df4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002000  00000000  00000000  000b7cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002ba0  00000000  00000000  000b9cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00041762  00000000  00000000  000bc87b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00033396  00000000  00000000  000fdfdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a000  00000000  00000000  00131373  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005ac0  00000000  00000000  0024b374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	a8 76 01 20 f1 42 00 00 ed 42 00 00 ed 42 00 00     .v. .B...B...B..
    4010:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	ed 42 00 00 ed 42 00 00 00 00 00 00 ed 42 00 00     .B...B.......B..
    403c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    404c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    405c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    406c:	05 77 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .w...B...B...B..
    407c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    408c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    409c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40ac:	ed 42 00 00 ed 42 00 00 b5 73 00 00 c9 73 00 00     .B...B...s...s..
    40bc:	19 72 00 00 25 72 00 00 31 72 00 00 3d 72 00 00     .r..%r..1r..=r..
    40cc:	49 72 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     Ir...B...B...B..
    40dc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	bd 75 00 00 55 7f 00 00 69 7f 00 00 7d 7f 00 00     .u..U...i...}...
    4104:	91 7f 00 00 a5 7f 00 00 b9 7f 00 00 cd 7f 00 00     ................
    4114:	e1 7f 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .....B...B...B..
    4124:	ed 42 00 00 f5 7f 00 00 09 80 00 00 1d 80 00 00     .B..............
    4134:	31 80 00 00 45 80 00 00 59 80 00 00 6d 80 00 00     1...E...Y...m...
    4144:	81 80 00 00 95 80 00 00 a9 80 00 00 bd 80 00 00     ................
    4154:	d1 80 00 00 e5 80 00 00 f9 80 00 00 0d 81 00 00     ................
    4164:	21 81 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     !....B...B...B..
    4174:	ed 42 00 00 00 00 00 00 00 00 00 00 cd 9c 00 00     .B..............
    4184:	d9 9c 00 00 e5 9c 00 00 f1 9c 00 00 00 00 00 00     ................
    4194:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41a4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41b4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41c4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41d4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41e4:	ed 42 00 00 ed 42 00 00 61 8a 00 00 75 8a 00 00     .B...B..a...u...
    41f4:	89 8a 00 00 9d 8a 00 00 ed 42 00 00 ed 42 00 00     .........B...B..
    4204:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4214:	ed 42 00 00 b5 6e 00 00 c9 6e 00 00 dd 6e 00 00     .B...n...n...n..
    4224:	f1 6e 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .n...B...B...B..
    4234:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4244:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4254:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	200000c0 	.word	0x200000c0
    4280:	00000000 	.word	0x00000000
    4284:	0000cd78 	.word	0x0000cd78

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	0000cd78 	.word	0x0000cd78
    42c4:	200000c4 	.word	0x200000c4
    42c8:	0000cd78 	.word	0x0000cd78
    42cc:	00000000 	.word	0x00000000

000042d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    42d0:	b508      	push	{r3, lr}
	system_init();
    42d2:	4b03      	ldr	r3, [pc, #12]	; (42e0 <atmel_start_init+0x10>)
    42d4:	4798      	blx	r3
	usb_init();
    42d6:	4b03      	ldr	r3, [pc, #12]	; (42e4 <atmel_start_init+0x14>)
    42d8:	4798      	blx	r3
	stdio_redirect_init();
    42da:	4b03      	ldr	r3, [pc, #12]	; (42e8 <atmel_start_init+0x18>)
    42dc:	4798      	blx	r3
    42de:	bd08      	pop	{r3, pc}
    42e0:	00004e15 	.word	0x00004e15
    42e4:	0000acf5 	.word	0x0000acf5
    42e8:	00009e49 	.word	0x00009e49

000042ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42ec:	e7fe      	b.n	42ec <Dummy_Handler>
	...

000042f0 <Reset_Handler>:
{
    42f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    42f2:	4b1c      	ldr	r3, [pc, #112]	; (4364 <Reset_Handler+0x74>)
    42f4:	4a1c      	ldr	r2, [pc, #112]	; (4368 <Reset_Handler+0x78>)
    42f6:	429a      	cmp	r2, r3
    42f8:	d010      	beq.n	431c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    42fa:	4b1c      	ldr	r3, [pc, #112]	; (436c <Reset_Handler+0x7c>)
    42fc:	4a19      	ldr	r2, [pc, #100]	; (4364 <Reset_Handler+0x74>)
    42fe:	429a      	cmp	r2, r3
    4300:	d20c      	bcs.n	431c <Reset_Handler+0x2c>
    4302:	3b01      	subs	r3, #1
    4304:	1a9b      	subs	r3, r3, r2
    4306:	f023 0303 	bic.w	r3, r3, #3
    430a:	3304      	adds	r3, #4
    430c:	4413      	add	r3, r2
    430e:	4916      	ldr	r1, [pc, #88]	; (4368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    4310:	f851 0b04 	ldr.w	r0, [r1], #4
    4314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    4318:	429a      	cmp	r2, r3
    431a:	d1f9      	bne.n	4310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    431c:	4b14      	ldr	r3, [pc, #80]	; (4370 <Reset_Handler+0x80>)
    431e:	4a15      	ldr	r2, [pc, #84]	; (4374 <Reset_Handler+0x84>)
    4320:	429a      	cmp	r2, r3
    4322:	d20a      	bcs.n	433a <Reset_Handler+0x4a>
    4324:	3b01      	subs	r3, #1
    4326:	1a9b      	subs	r3, r3, r2
    4328:	f023 0303 	bic.w	r3, r3, #3
    432c:	3304      	adds	r3, #4
    432e:	4413      	add	r3, r2
                *pDest++ = 0;
    4330:	2100      	movs	r1, #0
    4332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    4336:	4293      	cmp	r3, r2
    4338:	d1fb      	bne.n	4332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    433a:	4b0f      	ldr	r3, [pc, #60]	; (4378 <Reset_Handler+0x88>)
    433c:	4a0f      	ldr	r2, [pc, #60]	; (437c <Reset_Handler+0x8c>)
    433e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    4344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    434c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    4358:	4b09      	ldr	r3, [pc, #36]	; (4380 <Reset_Handler+0x90>)
    435a:	4798      	blx	r3
        main();
    435c:	4b09      	ldr	r3, [pc, #36]	; (4384 <Reset_Handler+0x94>)
    435e:	4798      	blx	r3
    4360:	e7fe      	b.n	4360 <Reset_Handler+0x70>
    4362:	bf00      	nop
    4364:	20000000 	.word	0x20000000
    4368:	0000cd78 	.word	0x0000cd78
    436c:	200000c0 	.word	0x200000c0
    4370:	200076a4 	.word	0x200076a4
    4374:	200000c0 	.word	0x200000c0
    4378:	e000ed00 	.word	0xe000ed00
    437c:	00004000 	.word	0x00004000
    4380:	0000b4d5 	.word	0x0000b4d5
    4384:	00009d4d 	.word	0x00009d4d

00004388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
    4388:	b5f0      	push	{r4, r5, r6, r7, lr}
    438a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    438c:	4a1b      	ldr	r2, [pc, #108]	; (43fc <ADC_0_init+0x74>)
    438e:	6a13      	ldr	r3, [r2, #32]
    4390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4396:	2241      	movs	r2, #65	; 0x41
    4398:	4b19      	ldr	r3, [pc, #100]	; (4400 <ADC_0_init+0x78>)
    439a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    439e:	4e19      	ldr	r6, [pc, #100]	; (4404 <ADC_0_init+0x7c>)
    43a0:	4d19      	ldr	r5, [pc, #100]	; (4408 <ADC_0_init+0x80>)
    43a2:	2400      	movs	r4, #0
    43a4:	9402      	str	r4, [sp, #8]
    43a6:	4b19      	ldr	r3, [pc, #100]	; (440c <ADC_0_init+0x84>)
    43a8:	9301      	str	r3, [sp, #4]
    43aa:	2301      	movs	r3, #1
    43ac:	9300      	str	r3, [sp, #0]
    43ae:	4623      	mov	r3, r4
    43b0:	4632      	mov	r2, r6
    43b2:	4917      	ldr	r1, [pc, #92]	; (4410 <ADC_0_init+0x88>)
    43b4:	4628      	mov	r0, r5
    43b6:	4f17      	ldr	r7, [pc, #92]	; (4414 <ADC_0_init+0x8c>)
    43b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
    43ba:	2310      	movs	r3, #16
    43bc:	1d32      	adds	r2, r6, #4
    43be:	4621      	mov	r1, r4
    43c0:	4628      	mov	r0, r5
    43c2:	4c15      	ldr	r4, [pc, #84]	; (4418 <ADC_0_init+0x90>)
    43c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    43c6:	4b15      	ldr	r3, [pc, #84]	; (441c <ADC_0_init+0x94>)
    43c8:	2280      	movs	r2, #128	; 0x80
    43ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    43cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    43d0:	629a      	str	r2, [r3, #40]	; 0x28
    43d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    43d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    43d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    43dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    43e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    43e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    43e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    43ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    43f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    43f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
    43f8:	b005      	add	sp, #20
    43fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43fc:	40000800 	.word	0x40000800
    4400:	40001c00 	.word	0x40001c00
    4404:	200000dc 	.word	0x200000dc
    4408:	20000a50 	.word	0x20000a50
    440c:	20000b4c 	.word	0x20000b4c
    4410:	43001c00 	.word	0x43001c00
    4414:	00005d8d 	.word	0x00005d8d
    4418:	00005ddd 	.word	0x00005ddd
    441c:	41008000 	.word	0x41008000

00004420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
    4420:	b5f0      	push	{r4, r5, r6, r7, lr}
    4422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    4424:	4a1e      	ldr	r2, [pc, #120]	; (44a0 <ADC_1_init+0x80>)
    4426:	6a13      	ldr	r3, [r2, #32]
    4428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    442c:	6213      	str	r3, [r2, #32]
    442e:	2241      	movs	r2, #65	; 0x41
    4430:	4b1c      	ldr	r3, [pc, #112]	; (44a4 <ADC_1_init+0x84>)
    4432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    4436:	4e1c      	ldr	r6, [pc, #112]	; (44a8 <ADC_1_init+0x88>)
    4438:	4d1c      	ldr	r5, [pc, #112]	; (44ac <ADC_1_init+0x8c>)
    443a:	2400      	movs	r4, #0
    443c:	9402      	str	r4, [sp, #8]
    443e:	4b1c      	ldr	r3, [pc, #112]	; (44b0 <ADC_1_init+0x90>)
    4440:	9301      	str	r3, [sp, #4]
    4442:	2301      	movs	r3, #1
    4444:	9300      	str	r3, [sp, #0]
    4446:	4623      	mov	r3, r4
    4448:	f106 0214 	add.w	r2, r6, #20
    444c:	4919      	ldr	r1, [pc, #100]	; (44b4 <ADC_1_init+0x94>)
    444e:	4628      	mov	r0, r5
    4450:	4f19      	ldr	r7, [pc, #100]	; (44b8 <ADC_1_init+0x98>)
    4452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
    4454:	2310      	movs	r3, #16
    4456:	f106 0218 	add.w	r2, r6, #24
    445a:	4621      	mov	r1, r4
    445c:	4628      	mov	r0, r5
    445e:	4c17      	ldr	r4, [pc, #92]	; (44bc <ADC_1_init+0x9c>)
    4460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4462:	4b17      	ldr	r3, [pc, #92]	; (44c0 <ADC_1_init+0xa0>)
    4464:	2204      	movs	r2, #4
    4466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    446a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    446e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    4476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    447a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
    447e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    448a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    448e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
    449a:	b005      	add	sp, #20
    449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    449e:	bf00      	nop
    44a0:	40000800 	.word	0x40000800
    44a4:	40001c00 	.word	0x40001c00
    44a8:	200000dc 	.word	0x200000dc
    44ac:	20000c24 	.word	0x20000c24
    44b0:	200009ec 	.word	0x200009ec
    44b4:	43002000 	.word	0x43002000
    44b8:	00005d8d 	.word	0x00005d8d
    44bc:	00005ddd 	.word	0x00005ddd
    44c0:	41008000 	.word	0x41008000

000044c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
    44c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    44c6:	4a05      	ldr	r2, [pc, #20]	; (44dc <CRC_0_init+0x18>)
    44c8:	6993      	ldr	r3, [r2, #24]
    44ca:	f043 0302 	orr.w	r3, r3, #2
    44ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
    44d0:	4903      	ldr	r1, [pc, #12]	; (44e0 <CRC_0_init+0x1c>)
    44d2:	4804      	ldr	r0, [pc, #16]	; (44e4 <CRC_0_init+0x20>)
    44d4:	4b04      	ldr	r3, [pc, #16]	; (44e8 <CRC_0_init+0x24>)
    44d6:	4798      	blx	r3
    44d8:	bd08      	pop	{r3, pc}
    44da:	bf00      	nop
    44dc:	40000800 	.word	0x40000800
    44e0:	41002000 	.word	0x41002000
    44e4:	200009e8 	.word	0x200009e8
    44e8:	00005e75 	.word	0x00005e75

000044ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    44ec:	b508      	push	{r3, lr}
    44ee:	4b09      	ldr	r3, [pc, #36]	; (4514 <EVENT_SYSTEM_0_init+0x28>)
    44f0:	2240      	movs	r2, #64	; 0x40
    44f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    44f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    44fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    44fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    4502:	4a05      	ldr	r2, [pc, #20]	; (4518 <EVENT_SYSTEM_0_init+0x2c>)
    4504:	6993      	ldr	r3, [r2, #24]
    4506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    450a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    450c:	4b03      	ldr	r3, [pc, #12]	; (451c <EVENT_SYSTEM_0_init+0x30>)
    450e:	4798      	blx	r3
    4510:	bd08      	pop	{r3, pc}
    4512:	bf00      	nop
    4514:	40001c00 	.word	0x40001c00
    4518:	40000800 	.word	0x40000800
    451c:	00005eb5 	.word	0x00005eb5

00004520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    4520:	4a02      	ldr	r2, [pc, #8]	; (452c <FLASH_0_CLOCK_init+0xc>)
    4522:	6913      	ldr	r3, [r2, #16]
    4524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4528:	6113      	str	r3, [r2, #16]
    452a:	4770      	bx	lr
    452c:	40000800 	.word	0x40000800

00004530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    4530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    4532:	4b03      	ldr	r3, [pc, #12]	; (4540 <FLASH_0_init+0x10>)
    4534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    4536:	4903      	ldr	r1, [pc, #12]	; (4544 <FLASH_0_init+0x14>)
    4538:	4803      	ldr	r0, [pc, #12]	; (4548 <FLASH_0_init+0x18>)
    453a:	4b04      	ldr	r3, [pc, #16]	; (454c <FLASH_0_init+0x1c>)
    453c:	4798      	blx	r3
    453e:	bd08      	pop	{r3, pc}
    4540:	00004521 	.word	0x00004521
    4544:	41004000 	.word	0x41004000
    4548:	200009cc 	.word	0x200009cc
    454c:	00005ed5 	.word	0x00005ed5

00004550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
    4550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4552:	4b5a      	ldr	r3, [pc, #360]	; (46bc <QSPI_INSTANCE_PORT_init+0x16c>)
    4554:	f44f 6500 	mov.w	r5, #2048	; 0x800
    4558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    455c:	4a58      	ldr	r2, [pc, #352]	; (46c0 <QSPI_INSTANCE_PORT_init+0x170>)
    455e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4562:	4858      	ldr	r0, [pc, #352]	; (46c4 <QSPI_INSTANCE_PORT_init+0x174>)
    4564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
    456c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
    4578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    457c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    458c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4594:	f44f 7280 	mov.w	r2, #256	; 0x100
    4598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    459a:	494b      	ldr	r1, [pc, #300]	; (46c8 <QSPI_INSTANCE_PORT_init+0x178>)
    459c:	6299      	str	r1, [r3, #40]	; 0x28
    459e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
    45a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    45a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    45aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    45ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    45b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
    45b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    45ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    45be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    45c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    45c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    45ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    45ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    45d2:	f44f 7200 	mov.w	r2, #512	; 0x200
    45d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    45d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
    45dc:	6299      	str	r1, [r3, #40]	; 0x28
    45de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    45e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
    45e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    45ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    45ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
    45f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    45f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    45fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    45fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    460e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4614:	4a2d      	ldr	r2, [pc, #180]	; (46cc <QSPI_INSTANCE_PORT_init+0x17c>)
    4616:	629a      	str	r2, [r3, #40]	; 0x28
    4618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    461a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    461c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    4620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
    462c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    463c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    464a:	4a21      	ldr	r2, [pc, #132]	; (46d0 <QSPI_INSTANCE_PORT_init+0x180>)
    464c:	629a      	str	r2, [r3, #40]	; 0x28
    464e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    4656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    465a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    465e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
    4662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    466a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    466e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    467e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4682:	4a14      	ldr	r2, [pc, #80]	; (46d4 <QSPI_INSTANCE_PORT_init+0x184>)
    4684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    468c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
    4690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
    469c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    46a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    46a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    46a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    46ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    46b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    46b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
    46b8:	bc30      	pop	{r4, r5}
    46ba:	4770      	bx	lr
    46bc:	41008000 	.word	0x41008000
    46c0:	40020800 	.word	0x40020800
    46c4:	c0020000 	.word	0xc0020000
    46c8:	40000100 	.word	0x40000100
    46cc:	40000400 	.word	0x40000400
    46d0:	40000800 	.word	0x40000800
    46d4:	40020400 	.word	0x40020400

000046d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    46d8:	4b06      	ldr	r3, [pc, #24]	; (46f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
    46da:	691a      	ldr	r2, [r3, #16]
    46dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    46e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    46e2:	691a      	ldr	r2, [r3, #16]
    46e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    46e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    46ea:	69da      	ldr	r2, [r3, #28]
    46ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    46f0:	61da      	str	r2, [r3, #28]
    46f2:	4770      	bx	lr
    46f4:	40000800 	.word	0x40000800

000046f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
    46f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
    46fa:	4b04      	ldr	r3, [pc, #16]	; (470c <QSPI_INSTANCE_init+0x14>)
    46fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
    46fe:	4904      	ldr	r1, [pc, #16]	; (4710 <QSPI_INSTANCE_init+0x18>)
    4700:	4804      	ldr	r0, [pc, #16]	; (4714 <QSPI_INSTANCE_init+0x1c>)
    4702:	4b05      	ldr	r3, [pc, #20]	; (4718 <QSPI_INSTANCE_init+0x20>)
    4704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
    4706:	4b05      	ldr	r3, [pc, #20]	; (471c <QSPI_INSTANCE_init+0x24>)
    4708:	4798      	blx	r3
    470a:	bd08      	pop	{r3, pc}
    470c:	000046d9 	.word	0x000046d9
    4710:	42003400 	.word	0x42003400
    4714:	20000c90 	.word	0x20000c90
    4718:	00005ff1 	.word	0x00005ff1
    471c:	00004551 	.word	0x00004551

00004720 <USART_EAST_CLOCK_init>:
    4720:	4b06      	ldr	r3, [pc, #24]	; (473c <USART_EAST_CLOCK_init+0x1c>)
    4722:	2241      	movs	r2, #65	; 0x41
    4724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    4728:	2242      	movs	r2, #66	; 0x42
    472a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    472e:	4a04      	ldr	r2, [pc, #16]	; (4740 <USART_EAST_CLOCK_init+0x20>)
    4730:	6953      	ldr	r3, [r2, #20]
    4732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    4736:	6153      	str	r3, [r2, #20]
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	40001c00 	.word	0x40001c00
    4740:	40000800 	.word	0x40000800

00004744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4744:	4b10      	ldr	r3, [pc, #64]	; (4788 <USART_EAST_PORT_init+0x44>)
    4746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    474a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    474e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    475a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    475e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    476a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    476e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    477a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    477e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    4786:	4770      	bx	lr
    4788:	41008000 	.word	0x41008000

0000478c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
    478c:	b510      	push	{r4, lr}
    478e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
    4790:	4b06      	ldr	r3, [pc, #24]	; (47ac <USART_EAST_init+0x20>)
    4792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
    4794:	2300      	movs	r3, #0
    4796:	9300      	str	r3, [sp, #0]
    4798:	2310      	movs	r3, #16
    479a:	4a05      	ldr	r2, [pc, #20]	; (47b0 <USART_EAST_init+0x24>)
    479c:	4905      	ldr	r1, [pc, #20]	; (47b4 <USART_EAST_init+0x28>)
    479e:	4806      	ldr	r0, [pc, #24]	; (47b8 <USART_EAST_init+0x2c>)
    47a0:	4c06      	ldr	r4, [pc, #24]	; (47bc <USART_EAST_init+0x30>)
    47a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
    47a4:	4b06      	ldr	r3, [pc, #24]	; (47c0 <USART_EAST_init+0x34>)
    47a6:	4798      	blx	r3
}
    47a8:	b002      	add	sp, #8
    47aa:	bd10      	pop	{r4, pc}
    47ac:	00004721 	.word	0x00004721
    47b0:	20000104 	.word	0x20000104
    47b4:	40003000 	.word	0x40003000
    47b8:	20000a7c 	.word	0x20000a7c
    47bc:	00006469 	.word	0x00006469
    47c0:	00004745 	.word	0x00004745

000047c4 <USART_NORTH_CLOCK_init>:
    47c4:	4b06      	ldr	r3, [pc, #24]	; (47e0 <USART_NORTH_CLOCK_init+0x1c>)
    47c6:	2241      	movs	r2, #65	; 0x41
    47c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    47cc:	2242      	movs	r2, #66	; 0x42
    47ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    47d2:	4a04      	ldr	r2, [pc, #16]	; (47e4 <USART_NORTH_CLOCK_init+0x20>)
    47d4:	6953      	ldr	r3, [r2, #20]
    47d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    47da:	6153      	str	r3, [r2, #20]
    47dc:	4770      	bx	lr
    47de:	bf00      	nop
    47e0:	40001c00 	.word	0x40001c00
    47e4:	40000800 	.word	0x40000800

000047e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    47e8:	4b10      	ldr	r3, [pc, #64]	; (482c <USART_NORTH_PORT_init+0x44>)
    47ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    47ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    47f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    47f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    47fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    47fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    480a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    480e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    481a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    481e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    482a:	4770      	bx	lr
    482c:	41008000 	.word	0x41008000

00004830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
    4830:	b510      	push	{r4, lr}
    4832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
    4834:	4b06      	ldr	r3, [pc, #24]	; (4850 <USART_NORTH_init+0x20>)
    4836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
    4838:	2300      	movs	r3, #0
    483a:	9300      	str	r3, [sp, #0]
    483c:	2310      	movs	r3, #16
    483e:	4a05      	ldr	r2, [pc, #20]	; (4854 <USART_NORTH_init+0x24>)
    4840:	4905      	ldr	r1, [pc, #20]	; (4858 <USART_NORTH_init+0x28>)
    4842:	4806      	ldr	r0, [pc, #24]	; (485c <USART_NORTH_init+0x2c>)
    4844:	4c06      	ldr	r4, [pc, #24]	; (4860 <USART_NORTH_init+0x30>)
    4846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
    4848:	4b06      	ldr	r3, [pc, #24]	; (4864 <USART_NORTH_init+0x34>)
    484a:	4798      	blx	r3
}
    484c:	b002      	add	sp, #8
    484e:	bd10      	pop	{r4, pc}
    4850:	000047c5 	.word	0x000047c5
    4854:	20000114 	.word	0x20000114
    4858:	40003400 	.word	0x40003400
    485c:	20000ad0 	.word	0x20000ad0
    4860:	00006469 	.word	0x00006469
    4864:	000047e9 	.word	0x000047e9

00004868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4868:	4b10      	ldr	r3, [pc, #64]	; (48ac <GRID_AUX_PORT_init+0x44>)
    486a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    486e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    487a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    487e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    488a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    488e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    489a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    489e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    48a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    48a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    48aa:	4770      	bx	lr
    48ac:	41008000 	.word	0x41008000

000048b0 <GRID_AUX_CLOCK_init>:
    48b0:	4b06      	ldr	r3, [pc, #24]	; (48cc <GRID_AUX_CLOCK_init+0x1c>)
    48b2:	2241      	movs	r2, #65	; 0x41
    48b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    48b8:	2242      	movs	r2, #66	; 0x42
    48ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    48be:	4a04      	ldr	r2, [pc, #16]	; (48d0 <GRID_AUX_CLOCK_init+0x20>)
    48c0:	6993      	ldr	r3, [r2, #24]
    48c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    48c6:	6193      	str	r3, [r2, #24]
    48c8:	4770      	bx	lr
    48ca:	bf00      	nop
    48cc:	40001c00 	.word	0x40001c00
    48d0:	40000800 	.word	0x40000800

000048d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
    48d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
    48d6:	4b05      	ldr	r3, [pc, #20]	; (48ec <GRID_AUX_init+0x18>)
    48d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
    48da:	2200      	movs	r2, #0
    48dc:	4904      	ldr	r1, [pc, #16]	; (48f0 <GRID_AUX_init+0x1c>)
    48de:	4805      	ldr	r0, [pc, #20]	; (48f4 <GRID_AUX_init+0x20>)
    48e0:	4b05      	ldr	r3, [pc, #20]	; (48f8 <GRID_AUX_init+0x24>)
    48e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
    48e4:	4b05      	ldr	r3, [pc, #20]	; (48fc <GRID_AUX_init+0x28>)
    48e6:	4798      	blx	r3
    48e8:	bd08      	pop	{r3, pc}
    48ea:	bf00      	nop
    48ec:	000048b1 	.word	0x000048b1
    48f0:	41012000 	.word	0x41012000
    48f4:	20000a44 	.word	0x20000a44
    48f8:	00006559 	.word	0x00006559
    48fc:	00004869 	.word	0x00004869

00004900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4900:	4b2b      	ldr	r3, [pc, #172]	; (49b0 <UI_SPI_PORT_init+0xb0>)
    4902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    4906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    490a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    490e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    4916:	4a27      	ldr	r2, [pc, #156]	; (49b4 <UI_SPI_PORT_init+0xb4>)
    4918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    491c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
    4920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    492c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    493c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    494c:	4a1a      	ldr	r2, [pc, #104]	; (49b8 <UI_SPI_PORT_init+0xb8>)
    494e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
    4956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    495a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    495e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    496a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    496e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4974:	4a11      	ldr	r2, [pc, #68]	; (49bc <UI_SPI_PORT_init+0xbc>)
    4976:	629a      	str	r2, [r3, #40]	; 0x28
    4978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    497c:	3210      	adds	r2, #16
    497e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
    4984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    498c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
    4990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    499c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    49a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    49a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    49a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    49ac:	4770      	bx	lr
    49ae:	bf00      	nop
    49b0:	41008000 	.word	0x41008000
    49b4:	c0000010 	.word	0xc0000010
    49b8:	c0000020 	.word	0xc0000020
    49bc:	40020000 	.word	0x40020000

000049c0 <UI_SPI_CLOCK_init>:
    49c0:	4b06      	ldr	r3, [pc, #24]	; (49dc <UI_SPI_CLOCK_init+0x1c>)
    49c2:	2241      	movs	r2, #65	; 0x41
    49c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    49c8:	2243      	movs	r2, #67	; 0x43
    49ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    49ce:	4a04      	ldr	r2, [pc, #16]	; (49e0 <UI_SPI_CLOCK_init+0x20>)
    49d0:	6993      	ldr	r3, [r2, #24]
    49d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    49d6:	6193      	str	r3, [r2, #24]
    49d8:	4770      	bx	lr
    49da:	bf00      	nop
    49dc:	40001c00 	.word	0x40001c00
    49e0:	40000800 	.word	0x40000800

000049e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
    49e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
    49e6:	4b04      	ldr	r3, [pc, #16]	; (49f8 <UI_SPI_init+0x14>)
    49e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
    49ea:	4904      	ldr	r1, [pc, #16]	; (49fc <UI_SPI_init+0x18>)
    49ec:	4804      	ldr	r0, [pc, #16]	; (4a00 <UI_SPI_init+0x1c>)
    49ee:	4b05      	ldr	r3, [pc, #20]	; (4a04 <UI_SPI_init+0x20>)
    49f0:	4798      	blx	r3
	UI_SPI_PORT_init();
    49f2:	4b05      	ldr	r3, [pc, #20]	; (4a08 <UI_SPI_init+0x24>)
    49f4:	4798      	blx	r3
    49f6:	bd08      	pop	{r3, pc}
    49f8:	000049c1 	.word	0x000049c1
    49fc:	41014000 	.word	0x41014000
    4a00:	20000944 	.word	0x20000944
    4a04:	00006181 	.word	0x00006181
    4a08:	00004901 	.word	0x00004901

00004a0c <USART_WEST_CLOCK_init>:
    4a0c:	4b06      	ldr	r3, [pc, #24]	; (4a28 <USART_WEST_CLOCK_init+0x1c>)
    4a0e:	2241      	movs	r2, #65	; 0x41
    4a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    4a14:	2242      	movs	r2, #66	; 0x42
    4a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4a1a:	4a04      	ldr	r2, [pc, #16]	; (4a2c <USART_WEST_CLOCK_init+0x20>)
    4a1c:	6a13      	ldr	r3, [r2, #32]
    4a1e:	f043 0301 	orr.w	r3, r3, #1
    4a22:	6213      	str	r3, [r2, #32]
    4a24:	4770      	bx	lr
    4a26:	bf00      	nop
    4a28:	40001c00 	.word	0x40001c00
    4a2c:	40000800 	.word	0x40000800

00004a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4a30:	4b10      	ldr	r3, [pc, #64]	; (4a74 <USART_WEST_PORT_init+0x44>)
    4a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    4a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    4a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    4a72:	4770      	bx	lr
    4a74:	41008000 	.word	0x41008000

00004a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
    4a78:	b510      	push	{r4, lr}
    4a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
    4a7c:	4b07      	ldr	r3, [pc, #28]	; (4a9c <USART_WEST_init+0x24>)
    4a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
    4a80:	2300      	movs	r3, #0
    4a82:	9300      	str	r3, [sp, #0]
    4a84:	2310      	movs	r3, #16
    4a86:	4a06      	ldr	r2, [pc, #24]	; (4aa0 <USART_WEST_init+0x28>)
    4a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    4a8c:	4805      	ldr	r0, [pc, #20]	; (4aa4 <USART_WEST_init+0x2c>)
    4a8e:	4c06      	ldr	r4, [pc, #24]	; (4aa8 <USART_WEST_init+0x30>)
    4a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
    4a92:	4b06      	ldr	r3, [pc, #24]	; (4aac <USART_WEST_init+0x34>)
    4a94:	4798      	blx	r3
}
    4a96:	b002      	add	sp, #8
    4a98:	bd10      	pop	{r4, pc}
    4a9a:	bf00      	nop
    4a9c:	00004a0d 	.word	0x00004a0d
    4aa0:	20000124 	.word	0x20000124
    4aa4:	20000b84 	.word	0x20000b84
    4aa8:	00006469 	.word	0x00006469
    4aac:	00004a31 	.word	0x00004a31

00004ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4ab0:	4b16      	ldr	r3, [pc, #88]	; (4b0c <SYS_I2C_PORT_init+0x5c>)
    4ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
    4ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
    4ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
    4aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    4b0a:	4770      	bx	lr
    4b0c:	41008000 	.word	0x41008000

00004b10 <SYS_I2C_CLOCK_init>:
    4b10:	4b06      	ldr	r3, [pc, #24]	; (4b2c <SYS_I2C_CLOCK_init+0x1c>)
    4b12:	2241      	movs	r2, #65	; 0x41
    4b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    4b18:	2242      	movs	r2, #66	; 0x42
    4b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4b1e:	4a04      	ldr	r2, [pc, #16]	; (4b30 <SYS_I2C_CLOCK_init+0x20>)
    4b20:	6a13      	ldr	r3, [r2, #32]
    4b22:	f043 0302 	orr.w	r3, r3, #2
    4b26:	6213      	str	r3, [r2, #32]
    4b28:	4770      	bx	lr
    4b2a:	bf00      	nop
    4b2c:	40001c00 	.word	0x40001c00
    4b30:	40000800 	.word	0x40000800

00004b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
    4b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
    4b36:	4b04      	ldr	r3, [pc, #16]	; (4b48 <SYS_I2C_init+0x14>)
    4b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
    4b3a:	4904      	ldr	r1, [pc, #16]	; (4b4c <SYS_I2C_init+0x18>)
    4b3c:	4804      	ldr	r0, [pc, #16]	; (4b50 <SYS_I2C_init+0x1c>)
    4b3e:	4b05      	ldr	r3, [pc, #20]	; (4b54 <SYS_I2C_init+0x20>)
    4b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
    4b42:	4b05      	ldr	r3, [pc, #20]	; (4b58 <SYS_I2C_init+0x24>)
    4b44:	4798      	blx	r3
    4b46:	bd08      	pop	{r3, pc}
    4b48:	00004b11 	.word	0x00004b11
    4b4c:	43000400 	.word	0x43000400
    4b50:	20000a04 	.word	0x20000a04
    4b54:	00005f91 	.word	0x00005f91
    4b58:	00004ab1 	.word	0x00004ab1

00004b5c <USART_SOUTH_CLOCK_init>:
    4b5c:	4b06      	ldr	r3, [pc, #24]	; (4b78 <USART_SOUTH_CLOCK_init+0x1c>)
    4b5e:	2241      	movs	r2, #65	; 0x41
    4b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    4b64:	2242      	movs	r2, #66	; 0x42
    4b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4b6a:	4a04      	ldr	r2, [pc, #16]	; (4b7c <USART_SOUTH_CLOCK_init+0x20>)
    4b6c:	6a13      	ldr	r3, [r2, #32]
    4b6e:	f043 0304 	orr.w	r3, r3, #4
    4b72:	6213      	str	r3, [r2, #32]
    4b74:	4770      	bx	lr
    4b76:	bf00      	nop
    4b78:	40001c00 	.word	0x40001c00
    4b7c:	40000800 	.word	0x40000800

00004b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4b80:	4b10      	ldr	r3, [pc, #64]	; (4bc4 <USART_SOUTH_PORT_init+0x44>)
    4b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
    4b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    4bc2:	4770      	bx	lr
    4bc4:	41008000 	.word	0x41008000

00004bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
    4bc8:	b510      	push	{r4, lr}
    4bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
    4bcc:	4b06      	ldr	r3, [pc, #24]	; (4be8 <USART_SOUTH_init+0x20>)
    4bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
    4bd0:	2300      	movs	r3, #0
    4bd2:	9300      	str	r3, [sp, #0]
    4bd4:	2310      	movs	r3, #16
    4bd6:	4a05      	ldr	r2, [pc, #20]	; (4bec <USART_SOUTH_init+0x24>)
    4bd8:	4905      	ldr	r1, [pc, #20]	; (4bf0 <USART_SOUTH_init+0x28>)
    4bda:	4806      	ldr	r0, [pc, #24]	; (4bf4 <USART_SOUTH_init+0x2c>)
    4bdc:	4c06      	ldr	r4, [pc, #24]	; (4bf8 <USART_SOUTH_init+0x30>)
    4bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
    4be0:	4b06      	ldr	r3, [pc, #24]	; (4bfc <USART_SOUTH_init+0x34>)
    4be2:	4798      	blx	r3
}
    4be4:	b002      	add	sp, #8
    4be6:	bd10      	pop	{r4, pc}
    4be8:	00004b5d 	.word	0x00004b5d
    4bec:	20000134 	.word	0x20000134
    4bf0:	43000800 	.word	0x43000800
    4bf4:	20000bd4 	.word	0x20000bd4
    4bf8:	00006469 	.word	0x00006469
    4bfc:	00004b81 	.word	0x00004b81

00004c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4c00:	4b29      	ldr	r3, [pc, #164]	; (4ca8 <GRID_LED_PORT_init+0xa8>)
    4c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4c12:	4926      	ldr	r1, [pc, #152]	; (4cac <GRID_LED_PORT_init+0xac>)
    4c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    4c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4c48:	4919      	ldr	r1, [pc, #100]	; (4cb0 <GRID_LED_PORT_init+0xb0>)
    4c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    4c74:	629a      	str	r2, [r3, #40]	; 0x28
    4c76:	4a0f      	ldr	r2, [pc, #60]	; (4cb4 <GRID_LED_PORT_init+0xb4>)
    4c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
    4c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    4ca6:	4770      	bx	lr
    4ca8:	41008000 	.word	0x41008000
    4cac:	c0004000 	.word	0xc0004000
    4cb0:	c0008000 	.word	0xc0008000
    4cb4:	c0024000 	.word	0xc0024000

00004cb8 <GRID_LED_CLOCK_init>:
    4cb8:	4b06      	ldr	r3, [pc, #24]	; (4cd4 <GRID_LED_CLOCK_init+0x1c>)
    4cba:	2241      	movs	r2, #65	; 0x41
    4cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    4cc0:	2242      	movs	r2, #66	; 0x42
    4cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4cc6:	4a04      	ldr	r2, [pc, #16]	; (4cd8 <GRID_LED_CLOCK_init+0x20>)
    4cc8:	6a13      	ldr	r3, [r2, #32]
    4cca:	f043 0308 	orr.w	r3, r3, #8
    4cce:	6213      	str	r3, [r2, #32]
    4cd0:	4770      	bx	lr
    4cd2:	bf00      	nop
    4cd4:	40001c00 	.word	0x40001c00
    4cd8:	40000800 	.word	0x40000800

00004cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
    4cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
    4cde:	4b04      	ldr	r3, [pc, #16]	; (4cf0 <GRID_LED_init+0x14>)
    4ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
    4ce2:	4904      	ldr	r1, [pc, #16]	; (4cf4 <GRID_LED_init+0x18>)
    4ce4:	4804      	ldr	r0, [pc, #16]	; (4cf8 <GRID_LED_init+0x1c>)
    4ce6:	4b05      	ldr	r3, [pc, #20]	; (4cfc <GRID_LED_init+0x20>)
    4ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
    4cea:	4b05      	ldr	r3, [pc, #20]	; (4d00 <GRID_LED_init+0x24>)
    4cec:	4798      	blx	r3
    4cee:	bd08      	pop	{r3, pc}
    4cf0:	00004cb9 	.word	0x00004cb9
    4cf4:	43000c00 	.word	0x43000c00
    4cf8:	20000b20 	.word	0x20000b20
    4cfc:	0000620d 	.word	0x0000620d
    4d00:	00004c01 	.word	0x00004c01

00004d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
    4d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
    4d06:	4802      	ldr	r0, [pc, #8]	; (4d10 <delay_driver_init+0xc>)
    4d08:	4b02      	ldr	r3, [pc, #8]	; (4d14 <delay_driver_init+0x10>)
    4d0a:	4798      	blx	r3
    4d0c:	bd08      	pop	{r3, pc}
    4d0e:	bf00      	nop
    4d10:	e000e010 	.word	0xe000e010
    4d14:	00005e81 	.word	0x00005e81

00004d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4d18:	4b1e      	ldr	r3, [pc, #120]	; (4d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
    4d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4d24:	6299      	str	r1, [r3, #40]	; 0x28
    4d26:	481c      	ldr	r0, [pc, #112]	; (4d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
    4d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    4d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    4d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    4d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4d5e:	6299      	str	r1, [r3, #40]	; 0x28
    4d60:	490e      	ldr	r1, [pc, #56]	; (4d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    4d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    4d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    4d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    4d92:	4770      	bx	lr
    4d94:	41008000 	.word	0x41008000
    4d98:	c0000100 	.word	0xc0000100
    4d9c:	c0000200 	.word	0xc0000200

00004da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
    4da0:	2241      	movs	r2, #65	; 0x41
    4da2:	4b07      	ldr	r3, [pc, #28]	; (4dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    4da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    4da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    4dac:	691a      	ldr	r2, [r3, #16]
    4dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    4db4:	699a      	ldr	r2, [r3, #24]
    4db6:	f042 0201 	orr.w	r2, r2, #1
    4dba:	619a      	str	r2, [r3, #24]
    4dbc:	4770      	bx	lr
    4dbe:	bf00      	nop
    4dc0:	40001c00 	.word	0x40001c00

00004dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
    4dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    4dc6:	4b03      	ldr	r3, [pc, #12]	; (4dd4 <USB_DEVICE_INSTANCE_init+0x10>)
    4dc8:	4798      	blx	r3
	usb_d_init();
    4dca:	4b03      	ldr	r3, [pc, #12]	; (4dd8 <USB_DEVICE_INSTANCE_init+0x14>)
    4dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    4dce:	4b03      	ldr	r3, [pc, #12]	; (4ddc <USB_DEVICE_INSTANCE_init+0x18>)
    4dd0:	4798      	blx	r3
    4dd2:	bd08      	pop	{r3, pc}
    4dd4:	00004da1 	.word	0x00004da1
    4dd8:	000067e5 	.word	0x000067e5
    4ddc:	00004d19 	.word	0x00004d19

00004de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    4de0:	4a02      	ldr	r2, [pc, #8]	; (4dec <WDT_0_CLOCK_init+0xc>)
    4de2:	6953      	ldr	r3, [r2, #20]
    4de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4de8:	6153      	str	r3, [r2, #20]
    4dea:	4770      	bx	lr
    4dec:	40000800 	.word	0x40000800

00004df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    4df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    4df2:	4b04      	ldr	r3, [pc, #16]	; (4e04 <WDT_0_init+0x14>)
    4df4:	4798      	blx	r3
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);

	wdt->dev.hw = (void *)hw;
    4df6:	4804      	ldr	r0, [pc, #16]	; (4e08 <WDT_0_init+0x18>)
    4df8:	4b04      	ldr	r3, [pc, #16]	; (4e0c <WDT_0_init+0x1c>)
    4dfa:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
    4dfc:	4b04      	ldr	r3, [pc, #16]	; (4e10 <WDT_0_init+0x20>)
    4dfe:	4798      	blx	r3
    4e00:	bd08      	pop	{r3, pc}
    4e02:	bf00      	nop
    4e04:	00004de1 	.word	0x00004de1
    4e08:	20000acc 	.word	0x20000acc
    4e0c:	40002000 	.word	0x40002000
    4e10:	00009cfd 	.word	0x00009cfd

00004e14 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
    4e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    4e18:	4ba3      	ldr	r3, [pc, #652]	; (50a8 <system_init+0x294>)
    4e1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4e1c:	4ba3      	ldr	r3, [pc, #652]	; (50ac <system_init+0x298>)
    4e1e:	2220      	movs	r2, #32
    4e20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4e22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4e28:	629a      	str	r2, [r3, #40]	; 0x28
    4e2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    4e2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4e3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    4e40:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e42:	4e9b      	ldr	r6, [pc, #620]	; (50b0 <system_init+0x29c>)
    4e44:	629e      	str	r6, [r3, #40]	; 0x28
    4e46:	499b      	ldr	r1, [pc, #620]	; (50b4 <system_init+0x2a0>)
    4e48:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4e4a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
    4e4e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    4e52:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e56:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e5e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4e62:	2180      	movs	r1, #128	; 0x80
    4e64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e68:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4e6c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
    4e70:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4e74:	4d90      	ldr	r5, [pc, #576]	; (50b8 <system_init+0x2a4>)
    4e76:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4e7a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
    4e7e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    4e82:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e86:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e8e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    4e96:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4e9a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4ea2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4ea6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4eaa:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
    4eae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4eb2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4eb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4eba:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4ebe:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4ec2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
    4ec6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
    4eca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ece:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ed2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4ed6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4eda:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    4ede:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4ee2:	4c76      	ldr	r4, [pc, #472]	; (50bc <system_init+0x2a8>)
    4ee4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    4ee8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4eec:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
    4ef0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    4ef4:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ef8:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
    4efc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f00:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f04:	f44f 6400 	mov.w	r4, #2048	; 0x800
    4f08:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f0c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 514c <system_init+0x338>
    4f10:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
    4f14:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4f1c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
    4f20:	f045 0504 	orr.w	r5, r5, #4
    4f24:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4f28:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f2c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f30:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f34:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f38:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4f3c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f40:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
    4f44:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f48:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f50:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4f58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f5c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
    4f60:	4a57      	ldr	r2, [pc, #348]	; (50c0 <system_init+0x2ac>)
    4f62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4f66:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
    4f6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4f6e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f72:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f7a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4f82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4f86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4f8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4f92:	494c      	ldr	r1, [pc, #304]	; (50c4 <system_init+0x2b0>)
    4f94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f98:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fa0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fa4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    4fa8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4fac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fb0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4fb4:	4944      	ldr	r1, [pc, #272]	; (50c8 <system_init+0x2b4>)
    4fb6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4fba:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
    4fbe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fc2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fc6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4fca:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4fd2:	4a3e      	ldr	r2, [pc, #248]	; (50cc <system_init+0x2b8>)
    4fd4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4fd8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
    4fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fe0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
    4fe4:	4b3a      	ldr	r3, [pc, #232]	; (50d0 <system_init+0x2bc>)
    4fe6:	4798      	blx	r3
	ADC_1_init();
    4fe8:	4b3a      	ldr	r3, [pc, #232]	; (50d4 <system_init+0x2c0>)
    4fea:	4798      	blx	r3

	CRC_0_init();
    4fec:	4b3a      	ldr	r3, [pc, #232]	; (50d8 <system_init+0x2c4>)
    4fee:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    4ff0:	4b3a      	ldr	r3, [pc, #232]	; (50dc <system_init+0x2c8>)
    4ff2:	4798      	blx	r3

	FLASH_0_init();
    4ff4:	4b3a      	ldr	r3, [pc, #232]	; (50e0 <system_init+0x2cc>)
    4ff6:	4798      	blx	r3

	QSPI_INSTANCE_init();
    4ff8:	4b3a      	ldr	r3, [pc, #232]	; (50e4 <system_init+0x2d0>)
    4ffa:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    4ffc:	4c3a      	ldr	r4, [pc, #232]	; (50e8 <system_init+0x2d4>)
    4ffe:	6963      	ldr	r3, [r4, #20]
    5000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5004:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    5006:	4b39      	ldr	r3, [pc, #228]	; (50ec <system_init+0x2d8>)
    5008:	4798      	blx	r3
    500a:	4602      	mov	r2, r0
    500c:	4938      	ldr	r1, [pc, #224]	; (50f0 <system_init+0x2dc>)
    500e:	4839      	ldr	r0, [pc, #228]	; (50f4 <system_init+0x2e0>)
    5010:	4d39      	ldr	r5, [pc, #228]	; (50f8 <system_init+0x2e4>)
    5012:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    5014:	4b39      	ldr	r3, [pc, #228]	; (50fc <system_init+0x2e8>)
    5016:	4798      	blx	r3
	USART_NORTH_init();
    5018:	4b39      	ldr	r3, [pc, #228]	; (5100 <system_init+0x2ec>)
    501a:	4798      	blx	r3

	GRID_AUX_init();
    501c:	4b39      	ldr	r3, [pc, #228]	; (5104 <system_init+0x2f0>)
    501e:	4798      	blx	r3

	UI_SPI_init();
    5020:	4b39      	ldr	r3, [pc, #228]	; (5108 <system_init+0x2f4>)
    5022:	4798      	blx	r3
	USART_WEST_init();
    5024:	4b39      	ldr	r3, [pc, #228]	; (510c <system_init+0x2f8>)
    5026:	4798      	blx	r3

	SYS_I2C_init();
    5028:	4b39      	ldr	r3, [pc, #228]	; (5110 <system_init+0x2fc>)
    502a:	4798      	blx	r3
	USART_SOUTH_init();
    502c:	4b39      	ldr	r3, [pc, #228]	; (5114 <system_init+0x300>)
    502e:	4798      	blx	r3

	GRID_LED_init();
    5030:	4b39      	ldr	r3, [pc, #228]	; (5118 <system_init+0x304>)
    5032:	4798      	blx	r3

	delay_driver_init();
    5034:	4b39      	ldr	r3, [pc, #228]	; (511c <system_init+0x308>)
    5036:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    5038:	6963      	ldr	r3, [r4, #20]
    503a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    503e:	6163      	str	r3, [r4, #20]
    5040:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    5044:	f04f 0840 	mov.w	r8, #64	; 0x40
    5048:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    504c:	4e34      	ldr	r6, [pc, #208]	; (5120 <system_init+0x30c>)
    504e:	47b0      	blx	r6
    5050:	4602      	mov	r2, r0
    5052:	4934      	ldr	r1, [pc, #208]	; (5124 <system_init+0x310>)
    5054:	4834      	ldr	r0, [pc, #208]	; (5128 <system_init+0x314>)
    5056:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    5058:	6963      	ldr	r3, [r4, #20]
    505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    505e:	6163      	str	r3, [r4, #20]
    5060:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    5064:	47b0      	blx	r6
    5066:	4602      	mov	r2, r0
    5068:	4930      	ldr	r1, [pc, #192]	; (512c <system_init+0x318>)
    506a:	4831      	ldr	r0, [pc, #196]	; (5130 <system_init+0x31c>)
    506c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    506e:	69a3      	ldr	r3, [r4, #24]
    5070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    5074:	61a3      	str	r3, [r4, #24]
    5076:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    507a:	47b0      	blx	r6
    507c:	4602      	mov	r2, r0
    507e:	492d      	ldr	r1, [pc, #180]	; (5134 <system_init+0x320>)
    5080:	482d      	ldr	r0, [pc, #180]	; (5138 <system_init+0x324>)
    5082:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    5084:	69a3      	ldr	r3, [r4, #24]
    5086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    508a:	61a3      	str	r3, [r4, #24]
    508c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    5090:	47b0      	blx	r6
    5092:	4602      	mov	r2, r0
    5094:	4929      	ldr	r1, [pc, #164]	; (513c <system_init+0x328>)
    5096:	482a      	ldr	r0, [pc, #168]	; (5140 <system_init+0x32c>)
    5098:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    509a:	4b2a      	ldr	r3, [pc, #168]	; (5144 <system_init+0x330>)
    509c:	4798      	blx	r3

	WDT_0_init();
    509e:	4b2a      	ldr	r3, [pc, #168]	; (5148 <system_init+0x334>)
    50a0:	4798      	blx	r3
    50a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50a6:	bf00      	nop
    50a8:	00006f2d 	.word	0x00006f2d
    50ac:	41008000 	.word	0x41008000
    50b0:	40020000 	.word	0x40020000
    50b4:	c0020020 	.word	0xc0020020
    50b8:	c0020000 	.word	0xc0020000
    50bc:	40028000 	.word	0x40028000
    50c0:	c0020004 	.word	0xc0020004
    50c4:	c0000008 	.word	0xc0000008
    50c8:	c0000010 	.word	0xc0000010
    50cc:	c0000020 	.word	0xc0000020
    50d0:	00004389 	.word	0x00004389
    50d4:	00004421 	.word	0x00004421
    50d8:	000044c5 	.word	0x000044c5
    50dc:	000044ed 	.word	0x000044ed
    50e0:	00004531 	.word	0x00004531
    50e4:	000046f9 	.word	0x000046f9
    50e8:	40000800 	.word	0x40000800
    50ec:	000076fd 	.word	0x000076fd
    50f0:	40002400 	.word	0x40002400
    50f4:	2000098c 	.word	0x2000098c
    50f8:	00006335 	.word	0x00006335
    50fc:	0000478d 	.word	0x0000478d
    5100:	00004831 	.word	0x00004831
    5104:	000048d5 	.word	0x000048d5
    5108:	000049e5 	.word	0x000049e5
    510c:	00004a79 	.word	0x00004a79
    5110:	00004b35 	.word	0x00004b35
    5114:	00004bc9 	.word	0x00004bc9
    5118:	00004cdd 	.word	0x00004cdd
    511c:	00004d05 	.word	0x00004d05
    5120:	00008a59 	.word	0x00008a59
    5124:	40003800 	.word	0x40003800
    5128:	20000c70 	.word	0x20000c70
    512c:	40003c00 	.word	0x40003c00
    5130:	20000b64 	.word	0x20000b64
    5134:	4101a000 	.word	0x4101a000
    5138:	200009ac 	.word	0x200009ac
    513c:	4101c000 	.word	0x4101c000
    5140:	20000c50 	.word	0x20000c50
    5144:	00004dc5 	.word	0x00004dc5
    5148:	00004df1 	.word	0x00004df1
    514c:	40020800 	.word	0x40020800

00005150 <grid_hardwaretest_led_test_init>:
		
	}

}

void grid_hardwaretest_led_test_init(struct grid_led_model* mod, uint8_t num){
    5150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5154:	b082      	sub	sp, #8
    5156:	4680      	mov	r8, r0
    5158:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    515a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    515e:	4b0c      	ldr	r3, [pc, #48]	; (5190 <grid_hardwaretest_led_test_init+0x40>)
    5160:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	
	gpio_set_pin_level(UI_PWR_EN, true);
	
	grid_led_init(mod, num);
    5164:	4b0b      	ldr	r3, [pc, #44]	; (5194 <grid_hardwaretest_led_test_init+0x44>)
    5166:	4798      	blx	r3
	
	for(uint8_t i=0; i<num; i++){
    5168:	b176      	cbz	r6, 5188 <grid_hardwaretest_led_test_init+0x38>
    516a:	3e01      	subs	r6, #1
    516c:	b2f6      	uxtb	r6, r6
    516e:	3601      	adds	r6, #1
    5170:	2400      	movs	r4, #0
		
		grid_led_set_color(mod, i, 0, 0, 0);
    5172:	4625      	mov	r5, r4
    5174:	4f08      	ldr	r7, [pc, #32]	; (5198 <grid_hardwaretest_led_test_init+0x48>)
    5176:	9500      	str	r5, [sp, #0]
    5178:	462b      	mov	r3, r5
    517a:	462a      	mov	r2, r5
    517c:	4621      	mov	r1, r4
    517e:	4640      	mov	r0, r8
    5180:	47b8      	blx	r7
    5182:	3401      	adds	r4, #1
	for(uint8_t i=0; i<num; i++){
    5184:	42b4      	cmp	r4, r6
    5186:	d1f6      	bne.n	5176 <grid_hardwaretest_led_test_init+0x26>
		
	}

	
}
    5188:	b002      	add	sp, #8
    518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    518e:	bf00      	nop
    5190:	41008000 	.word	0x41008000
    5194:	00005b2d 	.word	0x00005b2d
    5198:	0000573d 	.word	0x0000573d

0000519c <grid_hardwaretest_led_test>:


void grid_hardwaretest_led_test(struct grid_led_model* mod, uint32_t loop){
    519c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    51a0:	b083      	sub	sp, #12
    51a2:	4605      	mov	r5, r0
		
		
	for(uint8_t i=0; i<mod->led_number; i++){
    51a4:	7843      	ldrb	r3, [r0, #1]
    51a6:	b333      	cbz	r3, 51f6 <grid_hardwaretest_led_test+0x5a>
	
		grid_led_set_color(mod, i, loop/10%128*(loop/1280%3==0), loop/10%128*(loop/1280%3==1), loop/10%128*(loop/1280%3==2));
    51a8:	4e18      	ldr	r6, [pc, #96]	; (520c <grid_hardwaretest_led_test+0x70>)
    51aa:	fba6 3601 	umull	r3, r6, r6, r1
    51ae:	f3c6 07c6 	ubfx	r7, r6, #3, #7
    51b2:	0ab6      	lsrs	r6, r6, #10
    51b4:	4b16      	ldr	r3, [pc, #88]	; (5210 <grid_hardwaretest_led_test+0x74>)
    51b6:	fba3 2306 	umull	r2, r3, r3, r6
    51ba:	085b      	lsrs	r3, r3, #1
    51bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    51c0:	1ab3      	subs	r3, r6, r2
    51c2:	4296      	cmp	r6, r2
    51c4:	bf0c      	ite	eq
    51c6:	46b9      	moveq	r9, r7
    51c8:	f04f 0900 	movne.w	r9, #0
    51cc:	2b01      	cmp	r3, #1
    51ce:	bf0c      	ite	eq
    51d0:	46b8      	moveq	r8, r7
    51d2:	f04f 0800 	movne.w	r8, #0
    51d6:	2b02      	cmp	r3, #2
    51d8:	bf18      	it	ne
    51da:	2700      	movne	r7, #0
    51dc:	2400      	movs	r4, #0
    51de:	4e0d      	ldr	r6, [pc, #52]	; (5214 <grid_hardwaretest_led_test+0x78>)
    51e0:	9700      	str	r7, [sp, #0]
    51e2:	4643      	mov	r3, r8
    51e4:	464a      	mov	r2, r9
    51e6:	4621      	mov	r1, r4
    51e8:	4628      	mov	r0, r5
    51ea:	47b0      	blx	r6
	for(uint8_t i=0; i<mod->led_number; i++){
    51ec:	3401      	adds	r4, #1
    51ee:	b2e4      	uxtb	r4, r4
    51f0:	786b      	ldrb	r3, [r5, #1]
    51f2:	42a3      	cmp	r3, r4
    51f4:	d8f4      	bhi.n	51e0 <grid_hardwaretest_led_test+0x44>
		
		
	//grid_led_render_all(mod);
		
		
	while(grid_led_hardware_is_transfer_completed(mod) != 1){
    51f6:	4c08      	ldr	r4, [pc, #32]	; (5218 <grid_hardwaretest_led_test+0x7c>)
    51f8:	4628      	mov	r0, r5
    51fa:	47a0      	blx	r4
    51fc:	2801      	cmp	r0, #1
    51fe:	d1fb      	bne.n	51f8 <grid_hardwaretest_led_test+0x5c>
			
	}
	grid_led_hardware_start_transfer(mod);
    5200:	4628      	mov	r0, r5
    5202:	4b06      	ldr	r3, [pc, #24]	; (521c <grid_hardwaretest_led_test+0x80>)
    5204:	4798      	blx	r3
	
}
    5206:	b003      	add	sp, #12
    5208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    520c:	cccccccd 	.word	0xcccccccd
    5210:	aaaaaaab 	.word	0xaaaaaaab
    5214:	0000573d 	.word	0x0000573d
    5218:	00005c1d 	.word	0x00005c1d
    521c:	00005bf1 	.word	0x00005bf1

00005220 <grid_hardwaretest_led_test_photo>:

void grid_hardwaretest_led_test_photo(struct grid_led_model* mod, uint32_t loop){
    5220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5224:	b08b      	sub	sp, #44	; 0x2c
    5226:	4680      	mov	r8, r0

	uint8_t color_r[4] = {255, 127, 255, 0};
    5228:	22ff      	movs	r2, #255	; 0xff
    522a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    522e:	237f      	movs	r3, #127	; 0x7f
    5230:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    5234:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
    5238:	2100      	movs	r1, #0
    523a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
	uint8_t color_g[4] = {0, 255, 127, 127};
    523e:	f88d 1020 	strb.w	r1, [sp, #32]
    5242:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    5246:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    524a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	uint8_t color_b[4] = {127, 127, 0, 255};
    524e:	f88d 301c 	strb.w	r3, [sp, #28]
    5252:	f88d 301d 	strb.w	r3, [sp, #29]
    5256:	f88d 101e 	strb.w	r1, [sp, #30]
    525a:	f88d 201f 	strb.w	r2, [sp, #31]
	
	
	for(uint8_t i=0; i<mod->led_number; i++){
    525e:	7843      	ldrb	r3, [r0, #1]
    5260:	2b00      	cmp	r3, #0
    5262:	d067      	beq.n	5334 <grid_hardwaretest_led_test_photo+0x114>
    5264:	468a      	mov	sl, r1
		
		uint8_t intensity = (rand()%255)*(rand()%255)/256.0/2;
    5266:	f8df 9108 	ldr.w	r9, [pc, #264]	; 5370 <grid_hardwaretest_led_test_photo+0x150>
    526a:	47c8      	blx	r9
    526c:	4604      	mov	r4, r0
    526e:	47c8      	blx	r9
    5270:	4b36      	ldr	r3, [pc, #216]	; (534c <grid_hardwaretest_led_test_photo+0x12c>)
    5272:	fb83 1204 	smull	r1, r2, r3, r4
    5276:	1911      	adds	r1, r2, r4
    5278:	17e2      	asrs	r2, r4, #31
    527a:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
    527e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    5282:	1aa4      	subs	r4, r4, r2
    5284:	fb83 2300 	smull	r2, r3, r3, r0
    5288:	181a      	adds	r2, r3, r0
    528a:	17c3      	asrs	r3, r0, #31
    528c:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
    5290:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    5294:	1ac0      	subs	r0, r0, r3
    5296:	4e2e      	ldr	r6, [pc, #184]	; (5350 <grid_hardwaretest_led_test_photo+0x130>)
    5298:	fb00 f004 	mul.w	r0, r0, r4
    529c:	47b0      	blx	r6
    529e:	4d2d      	ldr	r5, [pc, #180]	; (5354 <grid_hardwaretest_led_test_photo+0x134>)
    52a0:	2200      	movs	r2, #0
    52a2:	4b2d      	ldr	r3, [pc, #180]	; (5358 <grid_hardwaretest_led_test_photo+0x138>)
    52a4:	47a8      	blx	r5
    52a6:	2200      	movs	r2, #0
    52a8:	4b2c      	ldr	r3, [pc, #176]	; (535c <grid_hardwaretest_led_test_photo+0x13c>)
    52aa:	47a8      	blx	r5
    52ac:	4f2c      	ldr	r7, [pc, #176]	; (5360 <grid_hardwaretest_led_test_photo+0x140>)
    52ae:	47b8      	blx	r7
    52b0:	b2c0      	uxtb	r0, r0
    52b2:	2805      	cmp	r0, #5
    52b4:	bf38      	it	cc
    52b6:	2005      	movcc	r0, #5
			intensity = 250;
		}
		
		uint8_t group = (i+4)%4;
		
		grid_led_set_color(mod, i, intensity/256.0*color_r[group], intensity/256.0*color_g[group], intensity/256.0*color_b[group]);
    52b8:	28fa      	cmp	r0, #250	; 0xfa
    52ba:	bf28      	it	cs
    52bc:	20fa      	movcs	r0, #250	; 0xfa
    52be:	47b0      	blx	r6
    52c0:	2200      	movs	r2, #0
    52c2:	4b25      	ldr	r3, [pc, #148]	; (5358 <grid_hardwaretest_led_test_photo+0x138>)
    52c4:	47a8      	blx	r5
    52c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
		uint8_t group = (i+4)%4;
    52ca:	f10a 0404 	add.w	r4, sl, #4
    52ce:	4263      	negs	r3, r4
    52d0:	f004 0403 	and.w	r4, r4, #3
    52d4:	f003 0303 	and.w	r3, r3, #3
    52d8:	bf58      	it	pl
    52da:	425c      	negpl	r4, r3
		grid_led_set_color(mod, i, intensity/256.0*color_r[group], intensity/256.0*color_g[group], intensity/256.0*color_b[group]);
    52dc:	ab0a      	add	r3, sp, #40	; 0x28
    52de:	fa53 f484 	uxtab	r4, r3, r4
    52e2:	f814 0c08 	ldrb.w	r0, [r4, #-8]
    52e6:	47b0      	blx	r6
    52e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    52ec:	47a8      	blx	r5
    52ee:	47b8      	blx	r7
    52f0:	fa1f fb80 	uxth.w	fp, r0
    52f4:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    52f8:	47b0      	blx	r6
    52fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    52fe:	47a8      	blx	r5
    5300:	47b8      	blx	r7
    5302:	b283      	uxth	r3, r0
    5304:	9305      	str	r3, [sp, #20]
    5306:	f814 0c0c 	ldrb.w	r0, [r4, #-12]
    530a:	47b0      	blx	r6
    530c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5310:	47a8      	blx	r5
    5312:	47b8      	blx	r7
    5314:	b280      	uxth	r0, r0
    5316:	9000      	str	r0, [sp, #0]
    5318:	465b      	mov	r3, fp
    531a:	9a05      	ldr	r2, [sp, #20]
    531c:	4651      	mov	r1, sl
    531e:	4640      	mov	r0, r8
    5320:	4c10      	ldr	r4, [pc, #64]	; (5364 <grid_hardwaretest_led_test_photo+0x144>)
    5322:	47a0      	blx	r4
	for(uint8_t i=0; i<mod->led_number; i++){
    5324:	f10a 0a01 	add.w	sl, sl, #1
    5328:	fa5f fa8a 	uxtb.w	sl, sl
    532c:	f898 3001 	ldrb.w	r3, [r8, #1]
    5330:	4553      	cmp	r3, sl
    5332:	d89a      	bhi.n	526a <grid_hardwaretest_led_test_photo+0x4a>
	
	
	//grid_led_render_all(mod);
	
	
	while(grid_led_hardware_is_transfer_completed(mod) != 1){
    5334:	4c0c      	ldr	r4, [pc, #48]	; (5368 <grid_hardwaretest_led_test_photo+0x148>)
    5336:	4640      	mov	r0, r8
    5338:	47a0      	blx	r4
    533a:	2801      	cmp	r0, #1
    533c:	d1fb      	bne.n	5336 <grid_hardwaretest_led_test_photo+0x116>
		
	}
	grid_led_hardware_start_transfer(mod);
    533e:	4640      	mov	r0, r8
    5340:	4b0a      	ldr	r3, [pc, #40]	; (536c <grid_hardwaretest_led_test_photo+0x14c>)
    5342:	4798      	blx	r3
	
}
    5344:	b00b      	add	sp, #44	; 0x2c
    5346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    534a:	bf00      	nop
    534c:	80808081 	.word	0x80808081
    5350:	0000afa5 	.word	0x0000afa5
    5354:	0000b071 	.word	0x0000b071
    5358:	3f700000 	.word	0x3f700000
    535c:	3fe00000 	.word	0x3fe00000
    5360:	0000b495 	.word	0x0000b495
    5364:	0000573d 	.word	0x0000573d
    5368:	00005c1d 	.word	0x00005c1d
    536c:	00005bf1 	.word	0x00005bf1
    5370:	0000b6dd 	.word	0x0000b6dd

00005374 <grid_hardwaretest_port_test>:


void grid_hardwaretest_port_test(uint32_t loop){
    5374:	b410      	push	{r4}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5376:	4baa      	ldr	r3, [pc, #680]	; (5620 <grid_hardwaretest_port_test+0x2ac>)
    5378:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    537c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5380:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5384:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5388:	4aa6      	ldr	r2, [pc, #664]	; (5624 <grid_hardwaretest_port_test+0x2b0>)
    538a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    538e:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    5392:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5396:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    539a:	2280      	movs	r2, #128	; 0x80
    539c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    53a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    53a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    53a8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    53ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    53b0:	f893 40c7 	ldrb.w	r4, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    53b4:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    53b8:	f883 40c7 	strb.w	r4, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    53bc:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
    53c0:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    53c4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    53c8:	4c97      	ldr	r4, [pc, #604]	; (5628 <grid_hardwaretest_port_test+0x2b4>)
    53ca:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    53ce:	f893 415b 	ldrb.w	r4, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    53d2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    53d6:	f883 415b 	strb.w	r4, [r3, #347]	; 0x15b
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    53da:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    53de:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    53e2:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    53e6:	4c91      	ldr	r4, [pc, #580]	; (562c <grid_hardwaretest_port_test+0x2b8>)
    53e8:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    53ec:	f893 415c 	ldrb.w	r4, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    53f0:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    53f4:	f883 415c 	strb.w	r4, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    53f8:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    53fc:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5400:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5404:	4c8a      	ldr	r4, [pc, #552]	; (5630 <grid_hardwaretest_port_test+0x2bc>)
    5406:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    540a:	f893 4151 	ldrb.w	r4, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    540e:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5412:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5416:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    541a:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    541e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5422:	4984      	ldr	r1, [pc, #528]	; (5634 <grid_hardwaretest_port_test+0x2c0>)
    5424:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5428:	f893 1150 	ldrb.w	r1, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    542c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5430:	f883 1150 	strb.w	r1, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    5438:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    543c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5440:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5444:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5448:	f893 114d 	ldrb.w	r1, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
    544c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5450:	f883 114d 	strb.w	r1, [r3, #333]	; 0x14d
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5454:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5458:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    545c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5460:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5464:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5468:	f893 114c 	ldrb.w	r1, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    546c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5470:	f883 114c 	strb.w	r1, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5474:	f44f 7180 	mov.w	r1, #256	; 0x100
    5478:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    547c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5480:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    5484:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5488:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    548c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5490:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5494:	f44f 7100 	mov.w	r1, #512	; 0x200
    5498:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    549c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    54a0:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    54a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    54a8:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    54ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    54b0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(PB09, GPIO_PIN_FUNCTION_OFF);
			

		
	if (loop%1000 == 0){
    54b4:	4b60      	ldr	r3, [pc, #384]	; (5638 <grid_hardwaretest_port_test+0x2c4>)
    54b6:	fba3 2300 	umull	r2, r3, r3, r0
    54ba:	099b      	lsrs	r3, r3, #6
    54bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    54c0:	fb02 0313 	mls	r3, r2, r3, r0
    54c4:	2b00      	cmp	r3, #0
    54c6:	d154      	bne.n	5572 <grid_hardwaretest_port_test+0x1fe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    54c8:	4a55      	ldr	r2, [pc, #340]	; (5620 <grid_hardwaretest_port_test+0x2ac>)
    54ca:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    54ce:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    54d2:	2180      	movs	r1, #128	; 0x80
    54d4:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
    54d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    54dc:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    54e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    54e4:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    54e8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    54ec:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    54f0:	f8c2 4114 	str.w	r4, [r2, #276]	; 0x114
    54f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    54f8:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    54fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5500:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    5504:	f44f 7180 	mov.w	r1, #256	; 0x100
    5508:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
    550c:	f44f 7100 	mov.w	r1, #512	; 0x200
    5510:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
			
		gpio_set_pin_level(PB08, true);
		gpio_set_pin_level(PB09, true);
			
	}
	if (loop%1000 == 750){
    5514:	f240 22ee 	movw	r2, #750	; 0x2ee
    5518:	4293      	cmp	r3, r2
    551a:	d127      	bne.n	556c <grid_hardwaretest_port_test+0x1f8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    551c:	4b40      	ldr	r3, [pc, #256]	; (5620 <grid_hardwaretest_port_test+0x2ac>)
    551e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5522:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5526:	2280      	movs	r2, #128	; 0x80
    5528:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    552c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    5530:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5538:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    553c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5540:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5544:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5548:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    554c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    5550:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5558:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    555c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5560:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    5564:	f44f 7200 	mov.w	r2, #512	; 0x200
    5568:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	}
		

	
	
}
    556c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5570:	4770      	bx	lr
	if (loop%1000 == 250){
    5572:	2bfa      	cmp	r3, #250	; 0xfa
    5574:	d128      	bne.n	55c8 <grid_hardwaretest_port_test+0x254>
    5576:	4b2a      	ldr	r3, [pc, #168]	; (5620 <grid_hardwaretest_port_test+0x2ac>)
    5578:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    557c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5580:	2280      	movs	r2, #128	; 0x80
    5582:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    558a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5592:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5596:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    559a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    559e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    55a2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    55aa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    55b2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    55ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    55be:	f44f 7200 	mov.w	r2, #512	; 0x200
    55c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    55c6:	e7d1      	b.n	556c <grid_hardwaretest_port_test+0x1f8>
	if (loop%1000 == 500){
    55c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    55cc:	d1a2      	bne.n	5514 <grid_hardwaretest_port_test+0x1a0>
    55ce:	4b14      	ldr	r3, [pc, #80]	; (5620 <grid_hardwaretest_port_test+0x2ac>)
    55d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    55d4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55d8:	2280      	movs	r2, #128	; 0x80
    55da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    55de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    55e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    55ea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    55f2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    55fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    5602:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5606:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    560a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    560e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5612:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    5616:	f44f 7200 	mov.w	r2, #512	; 0x200
    561a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    561e:	e7a5      	b.n	556c <grid_hardwaretest_port_test+0x1f8>
    5620:	41008000 	.word	0x41008000
    5624:	c0000004 	.word	0xc0000004
    5628:	c0000800 	.word	0xc0000800
    562c:	c0001000 	.word	0xc0001000
    5630:	c0000002 	.word	0xc0000002
    5634:	c0000001 	.word	0xc0000001
    5638:	10624dd3 	.word	0x10624dd3

0000563c <grid_hardwaretest_main>:
void grid_hardwaretest_main(){
    563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5640:	b083      	sub	sp, #12
	printf("Hardware Test Init");
    5642:	482f      	ldr	r0, [pc, #188]	; (5700 <grid_hardwaretest_main+0xc4>)
    5644:	4b2f      	ldr	r3, [pc, #188]	; (5704 <grid_hardwaretest_main+0xc8>)
    5646:	4798      	blx	r3
	grid_hardwaretest_led_test_init(&grid_led_state, 16);
    5648:	2110      	movs	r1, #16
    564a:	482f      	ldr	r0, [pc, #188]	; (5708 <grid_hardwaretest_main+0xcc>)
    564c:	4b2f      	ldr	r3, [pc, #188]	; (570c <grid_hardwaretest_main+0xd0>)
    564e:	4798      	blx	r3
	uint8_t mode_changed = 1;
    5650:	f04f 0801 	mov.w	r8, #1
	uint8_t button_last = 1;
    5654:	46c2      	mov	sl, r8
	uint8_t testmode = 1;
    5656:	4645      	mov	r5, r8
	uint32_t counter = 0;
    5658:	2600      	movs	r6, #0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    565a:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 5728 <grid_hardwaretest_main+0xec>
				grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    565e:	4f2c      	ldr	r7, [pc, #176]	; (5710 <grid_hardwaretest_main+0xd4>)
    5660:	e028      	b.n	56b4 <grid_hardwaretest_main+0x78>
			button_last = 1;
    5662:	f04f 0a01 	mov.w	sl, #1
		if (testmode == 0){
    5666:	2d00      	cmp	r5, #0
    5668:	d140      	bne.n	56ec <grid_hardwaretest_main+0xb0>
			if (mode_changed){
    566a:	f1b8 0f00 	cmp.w	r8, #0
    566e:	d101      	bne.n	5674 <grid_hardwaretest_main+0x38>
    5670:	4645      	mov	r5, r8
    5672:	e019      	b.n	56a8 <grid_hardwaretest_main+0x6c>
				grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    5674:	4c24      	ldr	r4, [pc, #144]	; (5708 <grid_hardwaretest_main+0xcc>)
    5676:	4631      	mov	r1, r6
    5678:	4620      	mov	r0, r4
    567a:	47b8      	blx	r7
				grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    567c:	4631      	mov	r1, r6
    567e:	4620      	mov	r0, r4
    5680:	47b8      	blx	r7
				for (uint8_t i=0; i<grid_sys_get_hwcfg()/4; i++){
    5682:	2500      	movs	r5, #0
    5684:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 572c <grid_hardwaretest_main+0xf0>
					grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    5688:	46a0      	mov	r8, r4
				for (uint8_t i=0; i<grid_sys_get_hwcfg()/4; i++){
    568a:	e005      	b.n	5698 <grid_hardwaretest_main+0x5c>
					grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    568c:	4631      	mov	r1, r6
    568e:	4640      	mov	r0, r8
    5690:	47b8      	blx	r7
					grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    5692:	4631      	mov	r1, r6
    5694:	4640      	mov	r0, r8
    5696:	47b8      	blx	r7
    5698:	b2ec      	uxtb	r4, r5
				for (uint8_t i=0; i<grid_sys_get_hwcfg()/4; i++){
    569a:	47c8      	blx	r9
    569c:	ebb4 0f90 	cmp.w	r4, r0, lsr #2
    56a0:	f105 0501 	add.w	r5, r5, #1
    56a4:	d3f2      	bcc.n	568c <grid_hardwaretest_main+0x50>
    56a6:	2500      	movs	r5, #0
		delay_ms(1);
    56a8:	2001      	movs	r0, #1
    56aa:	4b1a      	ldr	r3, [pc, #104]	; (5714 <grid_hardwaretest_main+0xd8>)
    56ac:	4798      	blx	r3
		counter++;			
    56ae:	3601      	adds	r6, #1
		mode_changed = 0;	
    56b0:	f04f 0800 	mov.w	r8, #0
    56b4:	a801      	add	r0, sp, #4
    56b6:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    56b8:	4b17      	ldr	r3, [pc, #92]	; (5718 <grid_hardwaretest_main+0xdc>)
    56ba:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    56be:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    56c2:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    56c6:	4054      	eors	r4, r2
    56c8:	400c      	ands	r4, r1
    56ca:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    56cc:	a801      	add	r0, sp, #4
    56ce:	4b13      	ldr	r3, [pc, #76]	; (571c <grid_hardwaretest_main+0xe0>)
    56d0:	4798      	blx	r3
		if (gpio_get_pin_level(MAP_MODE) == 0){
    56d2:	f414 6f00 	tst.w	r4, #2048	; 0x800
    56d6:	d1c4      	bne.n	5662 <grid_hardwaretest_main+0x26>
			if (button_last == 1){
    56d8:	f1ba 0f00 	cmp.w	sl, #0
    56dc:	d0c3      	beq.n	5666 <grid_hardwaretest_main+0x2a>
				testmode++;
    56de:	f105 0a01 	add.w	sl, r5, #1
		if (testmode == 0){
    56e2:	f01a 0a01 	ands.w	sl, sl, #1
    56e6:	d0c5      	beq.n	5674 <grid_hardwaretest_main+0x38>
				button_last=0;
    56e8:	f04f 0a00 	mov.w	sl, #0
			grid_hardwaretest_port_test(counter);
    56ec:	4630      	mov	r0, r6
    56ee:	4b0c      	ldr	r3, [pc, #48]	; (5720 <grid_hardwaretest_main+0xe4>)
    56f0:	4798      	blx	r3
			grid_hardwaretest_led_test(&grid_led_state, counter);	
    56f2:	4631      	mov	r1, r6
    56f4:	4804      	ldr	r0, [pc, #16]	; (5708 <grid_hardwaretest_main+0xcc>)
    56f6:	4b0b      	ldr	r3, [pc, #44]	; (5724 <grid_hardwaretest_main+0xe8>)
    56f8:	4798      	blx	r3
    56fa:	2501      	movs	r5, #1
    56fc:	e7d4      	b.n	56a8 <grid_hardwaretest_main+0x6c>
    56fe:	bf00      	nop
    5700:	0000c5c4 	.word	0x0000c5c4
    5704:	0000b6ad 	.word	0x0000b6ad
    5708:	2000725c 	.word	0x2000725c
    570c:	00005151 	.word	0x00005151
    5710:	00005221 	.word	0x00005221
    5714:	00005e95 	.word	0x00005e95
    5718:	41008000 	.word	0x41008000
    571c:	00005e67 	.word	0x00005e67
    5720:	00005375 	.word	0x00005375
    5724:	0000519d 	.word	0x0000519d
    5728:	00005e59 	.word	0x00005e59
    572c:	00005c29 	.word	0x00005c29

00005730 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    5730:	2201      	movs	r2, #1
    5732:	4b01      	ldr	r3, [pc, #4]	; (5738 <grid_led_hardware_transfer_complete_cb+0x8>)
    5734:	701a      	strb	r2, [r3, #0]
    5736:	4770      	bx	lr
    5738:	20000ca0 	.word	0x20000ca0

0000573c <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint16_t led_r, uint16_t led_g, uint16_t led_b){
    573c:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    573e:	7844      	ldrb	r4, [r0, #1]
    5740:	428c      	cmp	r4, r1
    5742:	d802      	bhi.n	574a <grid_led_set_color+0xe>
		return -1;		
    5744:	20ff      	movs	r0, #255	; 0xff
}
    5746:	bc30      	pop	{r4, r5}
    5748:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    574a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    574e:	0089      	lsls	r1, r1, #2
    5750:	4c0d      	ldr	r4, [pc, #52]	; (5788 <grid_led_set_color+0x4c>)
    5752:	2bff      	cmp	r3, #255	; 0xff
    5754:	bf28      	it	cs
    5756:	23ff      	movcs	r3, #255	; 0xff
    5758:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    575c:	68c3      	ldr	r3, [r0, #12]
    575e:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    5760:	2aff      	cmp	r2, #255	; 0xff
    5762:	bf28      	it	cs
    5764:	22ff      	movcs	r2, #255	; 0xff
    5766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    576a:	68c3      	ldr	r3, [r0, #12]
    576c:	440b      	add	r3, r1
    576e:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    5770:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5774:	2bff      	cmp	r3, #255	; 0xff
    5776:	bf28      	it	cs
    5778:	23ff      	movcs	r3, #255	; 0xff
    577a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    577e:	68c3      	ldr	r3, [r0, #12]
    5780:	4419      	add	r1, r3
    5782:	608a      	str	r2, [r1, #8]
		return 0;
    5784:	2000      	movs	r0, #0
    5786:	e7de      	b.n	5746 <grid_led_set_color+0xa>
    5788:	20002da8 	.word	0x20002da8

0000578c <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    578c:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    578e:	4c06      	ldr	r4, [pc, #24]	; (57a8 <grid_led_hardware_init+0x1c>)
    5790:	f100 0114 	add.w	r1, r0, #20
    5794:	4620      	mov	r0, r4
    5796:	4b05      	ldr	r3, [pc, #20]	; (57ac <grid_led_hardware_init+0x20>)
    5798:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    579a:	4a05      	ldr	r2, [pc, #20]	; (57b0 <grid_led_hardware_init+0x24>)
    579c:	2100      	movs	r1, #0
    579e:	4620      	mov	r0, r4
    57a0:	4b04      	ldr	r3, [pc, #16]	; (57b4 <grid_led_hardware_init+0x28>)
    57a2:	4798      	blx	r3
    57a4:	bd10      	pop	{r4, pc}
    57a6:	bf00      	nop
    57a8:	20000b20 	.word	0x20000b20
    57ac:	00006255 	.word	0x00006255
    57b0:	00005731 	.word	0x00005731
    57b4:	00006245 	.word	0x00006245

000057b8 <grid_led_set_min>:
	/** END */
	
}


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    57b8:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    57ba:	7844      	ldrb	r4, [r0, #1]
    57bc:	fb02 1404 	mla	r4, r2, r4, r1
    57c0:	6905      	ldr	r5, [r0, #16]
    57c2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    57c6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    57ca:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    57cc:	7843      	ldrb	r3, [r0, #1]
    57ce:	fb02 1303 	mla	r3, r2, r3, r1
    57d2:	6904      	ldr	r4, [r0, #16]
    57d4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    57d8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    57dc:	4423      	add	r3, r4
    57de:	f89d 400c 	ldrb.w	r4, [sp, #12]
    57e2:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    57e4:	7843      	ldrb	r3, [r0, #1]
    57e6:	fb02 1203 	mla	r2, r2, r3, r1
    57ea:	6903      	ldr	r3, [r0, #16]
    57ec:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    57f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    57f4:	441a      	add	r2, r3
    57f6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    57fa:	7093      	strb	r3, [r2, #2]
}
    57fc:	bc70      	pop	{r4, r5, r6}
    57fe:	4770      	bx	lr

00005800 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5800:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    5802:	7844      	ldrb	r4, [r0, #1]
    5804:	fb02 1404 	mla	r4, r2, r4, r1
    5808:	6905      	ldr	r5, [r0, #16]
    580a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    580e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    5812:	442c      	add	r4, r5
    5814:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    5816:	7843      	ldrb	r3, [r0, #1]
    5818:	fb02 1303 	mla	r3, r2, r3, r1
    581c:	6904      	ldr	r4, [r0, #16]
    581e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5822:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5826:	4423      	add	r3, r4
    5828:	f89d 400c 	ldrb.w	r4, [sp, #12]
    582c:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    582e:	7843      	ldrb	r3, [r0, #1]
    5830:	fb02 1203 	mla	r2, r2, r3, r1
    5834:	6903      	ldr	r3, [r0, #16]
    5836:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    583a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    583e:	441a      	add	r2, r3
    5840:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5844:	7153      	strb	r3, [r2, #5]
}
    5846:	bc70      	pop	{r4, r5, r6}
    5848:	4770      	bx	lr

0000584a <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    584a:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    584c:	7844      	ldrb	r4, [r0, #1]
    584e:	fb02 1404 	mla	r4, r2, r4, r1
    5852:	6905      	ldr	r5, [r0, #16]
    5854:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    5858:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    585c:	442c      	add	r4, r5
    585e:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    5860:	7843      	ldrb	r3, [r0, #1]
    5862:	fb02 1303 	mla	r3, r2, r3, r1
    5866:	6904      	ldr	r4, [r0, #16]
    5868:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    586c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5870:	4423      	add	r3, r4
    5872:	f89d 400c 	ldrb.w	r4, [sp, #12]
    5876:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    5878:	7843      	ldrb	r3, [r0, #1]
    587a:	fb02 1203 	mla	r2, r2, r3, r1
    587e:	6903      	ldr	r3, [r0, #16]
    5880:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    5884:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5888:	441a      	add	r2, r3
    588a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    588e:	7213      	strb	r3, [r2, #8]
}
    5890:	bc70      	pop	{r4, r5, r6}
    5892:	4770      	bx	lr

00005894 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    5894:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    5896:	7844      	ldrb	r4, [r0, #1]
    5898:	fb02 1204 	mla	r2, r2, r4, r1
    589c:	6901      	ldr	r1, [r0, #16]
    589e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    58a2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    58a6:	440a      	add	r2, r1
    58a8:	72d3      	strb	r3, [r2, #11]
}
    58aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    58ae:	4770      	bx	lr

000058b0 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    58b0:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    58b2:	7844      	ldrb	r4, [r0, #1]
    58b4:	fb02 1204 	mla	r2, r2, r4, r1
    58b8:	6901      	ldr	r1, [r0, #16]
    58ba:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    58be:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    58c2:	440a      	add	r2, r1
    58c4:	7313      	strb	r3, [r2, #12]
}
    58c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    58ca:	4770      	bx	lr

000058cc <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    58cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58d0:	b083      	sub	sp, #12
    58d2:	4605      	mov	r5, r0
	mod->led_number = length;
    58d4:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    58d6:	b2cc      	uxtb	r4, r1
    58d8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    58dc:	0080      	lsls	r0, r0, #2
    58de:	3090      	adds	r0, #144	; 0x90
    58e0:	6068      	str	r0, [r5, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    58e2:	4f52      	ldr	r7, [pc, #328]	; (5a2c <grid_led_buffer_init+0x160>)
    58e4:	47b8      	blx	r7
    58e6:	4606      	mov	r6, r0
    58e8:	60a8      	str	r0, [r5, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    58ea:	f100 0390 	add.w	r3, r0, #144	; 0x90
    58ee:	60eb      	str	r3, [r5, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    58f0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    58f4:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
    58f8:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    58fa:	2e00      	cmp	r6, #0
    58fc:	f000 8094 	beq.w	5a28 <grid_led_buffer_init+0x15c>
    5900:	2800      	cmp	r0, #0
    5902:	f000 8091 	beq.w	5a28 <grid_led_buffer_init+0x15c>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    5906:	6128      	str	r0, [r5, #16]
    5908:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    590a:	4619      	mov	r1, r3
    590c:	68aa      	ldr	r2, [r5, #8]
    590e:	54d1      	strb	r1, [r2, r3]
    5910:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    5912:	2b90      	cmp	r3, #144	; 0x90
    5914:	d1fa      	bne.n	590c <grid_led_buffer_init+0x40>
	for (uint32_t i = 0; i<mod->led_number; i++){
    5916:	786b      	ldrb	r3, [r5, #1]
    5918:	2b00      	cmp	r3, #0
    591a:	f000 8082 	beq.w	5a22 <grid_led_buffer_init+0x156>
    591e:	2400      	movs	r4, #0
		grid_led_set_color(mod,i,0,0,0);
    5920:	4626      	mov	r6, r4
    5922:	4f43      	ldr	r7, [pc, #268]	; (5a30 <grid_led_buffer_init+0x164>)
    5924:	9600      	str	r6, [sp, #0]
    5926:	4633      	mov	r3, r6
    5928:	4632      	mov	r2, r6
    592a:	4621      	mov	r1, r4
    592c:	4628      	mov	r0, r5
    592e:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    5930:	3401      	adds	r4, #1
    5932:	786b      	ldrb	r3, [r5, #1]
    5934:	42a3      	cmp	r3, r4
    5936:	d8f5      	bhi.n	5924 <grid_led_buffer_init+0x58>
	for(uint8_t i = 0; i<mod->led_number; i++){
    5938:	2b00      	cmp	r3, #0
    593a:	d072      	beq.n	5a22 <grid_led_buffer_init+0x156>
    593c:	f04f 0b00 	mov.w	fp, #0
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    5940:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 5a3c <grid_led_buffer_init+0x170>
    5944:	2400      	movs	r4, #0
    5946:	9401      	str	r4, [sp, #4]
    5948:	9400      	str	r4, [sp, #0]
    594a:	4623      	mov	r3, r4
    594c:	2201      	movs	r2, #1
    594e:	4659      	mov	r1, fp
    5950:	4628      	mov	r0, r5
    5952:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    5954:	9401      	str	r4, [sp, #4]
    5956:	237f      	movs	r3, #127	; 0x7f
    5958:	9300      	str	r3, [sp, #0]
    595a:	4623      	mov	r3, r4
    595c:	2201      	movs	r2, #1
    595e:	4659      	mov	r1, fp
    5960:	4628      	mov	r0, r5
    5962:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 5a40 <grid_led_buffer_init+0x174>
    5966:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    5968:	9401      	str	r4, [sp, #4]
    596a:	23ff      	movs	r3, #255	; 0xff
    596c:	9300      	str	r3, [sp, #0]
    596e:	4623      	mov	r3, r4
    5970:	2201      	movs	r2, #1
    5972:	4659      	mov	r1, fp
    5974:	4628      	mov	r0, r5
    5976:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 5a44 <grid_led_buffer_init+0x178>
    597a:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    597c:	4623      	mov	r3, r4
    597e:	2201      	movs	r2, #1
    5980:	4659      	mov	r1, fp
    5982:	4628      	mov	r0, r5
    5984:	4f2b      	ldr	r7, [pc, #172]	; (5a34 <grid_led_buffer_init+0x168>)
    5986:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    5988:	4623      	mov	r3, r4
    598a:	2201      	movs	r2, #1
    598c:	4659      	mov	r1, fp
    598e:	4628      	mov	r0, r5
    5990:	4e29      	ldr	r6, [pc, #164]	; (5a38 <grid_led_buffer_init+0x16c>)
    5992:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x00, 0x00);
    5994:	9401      	str	r4, [sp, #4]
    5996:	9400      	str	r4, [sp, #0]
    5998:	4623      	mov	r3, r4
    599a:	2202      	movs	r2, #2
    599c:	4659      	mov	r1, fp
    599e:	4628      	mov	r0, r5
    59a0:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x7F, 0x00);
    59a2:	9401      	str	r4, [sp, #4]
    59a4:	237f      	movs	r3, #127	; 0x7f
    59a6:	9300      	str	r3, [sp, #0]
    59a8:	4623      	mov	r3, r4
    59aa:	2202      	movs	r2, #2
    59ac:	4659      	mov	r1, fp
    59ae:	4628      	mov	r0, r5
    59b0:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0xFF, 0x00);
    59b2:	9401      	str	r4, [sp, #4]
    59b4:	23ff      	movs	r3, #255	; 0xff
    59b6:	9300      	str	r3, [sp, #0]
    59b8:	4623      	mov	r3, r4
    59ba:	2202      	movs	r2, #2
    59bc:	4659      	mov	r1, fp
    59be:	4628      	mov	r0, r5
    59c0:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_B, 0);
    59c2:	4623      	mov	r3, r4
    59c4:	2202      	movs	r2, #2
    59c6:	4659      	mov	r1, fp
    59c8:	4628      	mov	r0, r5
    59ca:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_B, 0);
    59cc:	4623      	mov	r3, r4
    59ce:	2202      	movs	r2, #2
    59d0:	4659      	mov	r1, fp
    59d2:	4628      	mov	r0, r5
    59d4:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    59d6:	9401      	str	r4, [sp, #4]
    59d8:	9400      	str	r4, [sp, #0]
    59da:	4623      	mov	r3, r4
    59dc:	4622      	mov	r2, r4
    59de:	4659      	mov	r1, fp
    59e0:	4628      	mov	r0, r5
    59e2:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    59e4:	9401      	str	r4, [sp, #4]
    59e6:	9400      	str	r4, [sp, #0]
    59e8:	4623      	mov	r3, r4
    59ea:	4622      	mov	r2, r4
    59ec:	4659      	mov	r1, fp
    59ee:	4628      	mov	r0, r5
    59f0:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    59f2:	9401      	str	r4, [sp, #4]
    59f4:	9400      	str	r4, [sp, #0]
    59f6:	4623      	mov	r3, r4
    59f8:	4622      	mov	r2, r4
    59fa:	4659      	mov	r1, fp
    59fc:	4628      	mov	r0, r5
    59fe:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_ALERT, 0);
    5a00:	4623      	mov	r3, r4
    5a02:	4622      	mov	r2, r4
    5a04:	4659      	mov	r1, fp
    5a06:	4628      	mov	r0, r5
    5a08:	47b8      	blx	r7
		grid_led_set_phase(mod, i, GRID_LED_LAYER_ALERT, 0);
    5a0a:	4623      	mov	r3, r4
    5a0c:	4622      	mov	r2, r4
    5a0e:	4659      	mov	r1, fp
    5a10:	4628      	mov	r0, r5
    5a12:	47b0      	blx	r6
	for(uint8_t i = 0; i<mod->led_number; i++){
    5a14:	f10b 0b01 	add.w	fp, fp, #1
    5a18:	fa5f fb8b 	uxtb.w	fp, fp
    5a1c:	786b      	ldrb	r3, [r5, #1]
    5a1e:	455b      	cmp	r3, fp
    5a20:	d890      	bhi.n	5944 <grid_led_buffer_init+0x78>
}
    5a22:	b003      	add	sp, #12
    5a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a28:	e7fe      	b.n	5a28 <grid_led_buffer_init+0x15c>
    5a2a:	bf00      	nop
    5a2c:	0000b51d 	.word	0x0000b51d
    5a30:	0000573d 	.word	0x0000573d
    5a34:	000058b1 	.word	0x000058b1
    5a38:	00005895 	.word	0x00005895
    5a3c:	000057b9 	.word	0x000057b9
    5a40:	00005801 	.word	0x00005801
    5a44:	0000584b 	.word	0x0000584b

00005a48 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    5a48:	b510      	push	{r4, lr}
    5a4a:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    5a4c:	2200      	movs	r2, #0
    5a4e:	4b08      	ldr	r3, [pc, #32]	; (5a70 <grid_led_hardware_start_transfer_blocking+0x28>)
    5a50:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    5a52:	4808      	ldr	r0, [pc, #32]	; (5a74 <grid_led_hardware_start_transfer_blocking+0x2c>)
    5a54:	4b08      	ldr	r3, [pc, #32]	; (5a78 <grid_led_hardware_start_transfer_blocking+0x30>)
    5a56:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    5a58:	88a2      	ldrh	r2, [r4, #4]
    5a5a:	68a1      	ldr	r1, [r4, #8]
    5a5c:	6960      	ldr	r0, [r4, #20]
    5a5e:	4b07      	ldr	r3, [pc, #28]	; (5a7c <grid_led_hardware_start_transfer_blocking+0x34>)
    5a60:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    5a62:	4a03      	ldr	r2, [pc, #12]	; (5a70 <grid_led_hardware_start_transfer_blocking+0x28>)
    5a64:	7813      	ldrb	r3, [r2, #0]
    5a66:	b2db      	uxtb	r3, r3
    5a68:	2b01      	cmp	r3, #1
    5a6a:	d1fb      	bne.n	5a64 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    5a6c:	bd10      	pop	{r4, pc}
    5a6e:	bf00      	nop
    5a70:	20000ca0 	.word	0x20000ca0
    5a74:	20000b20 	.word	0x20000b20
    5a78:	00006235 	.word	0x00006235
    5a7c:	00005fe1 	.word	0x00005fe1

00005a80 <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    5a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a84:	b085      	sub	sp, #20
    5a86:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    5a88:	4b24      	ldr	r3, [pc, #144]	; (5b1c <grid_led_startup_animation+0x9c>)
    5a8a:	781b      	ldrb	r3, [r3, #0]
    5a8c:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    5a8e:	2b20      	cmp	r3, #32
    5a90:	d00a      	beq.n	5aa8 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    5a92:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    5a96:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    5a9a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    5a9e:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    5aa2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 5b28 <grid_led_startup_animation+0xa8>
    5aa6:	e01e      	b.n	5ae6 <grid_led_startup_animation+0x66>
		s= 2;
    5aa8:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    5aac:	2300      	movs	r3, #0
    5aae:	9303      	str	r3, [sp, #12]
    5ab0:	e7f3      	b.n	5a9a <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    5ab2:	9500      	str	r5, [sp, #0]
    5ab4:	462b      	mov	r3, r5
    5ab6:	463a      	mov	r2, r7
    5ab8:	4621      	mov	r1, r4
    5aba:	4630      	mov	r0, r6
    5abc:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    5abe:	3401      	adds	r4, #1
    5ac0:	b2e4      	uxtb	r4, r4
    5ac2:	7873      	ldrb	r3, [r6, #1]
    5ac4:	42a3      	cmp	r3, r4
    5ac6:	d8f4      	bhi.n	5ab2 <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    5ac8:	4630      	mov	r0, r6
    5aca:	4b15      	ldr	r3, [pc, #84]	; (5b20 <grid_led_startup_animation+0xa0>)
    5acc:	4798      	blx	r3
		delay_ms(1);
    5ace:	2001      	movs	r0, #1
    5ad0:	4b14      	ldr	r3, [pc, #80]	; (5b24 <grid_led_startup_animation+0xa4>)
    5ad2:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    5ad4:	f109 0901 	add.w	r9, r9, #1
    5ad8:	fa5f f989 	uxtb.w	r9, r9
    5adc:	f10a 3aff 	add.w	sl, sl, #4294967295
    5ae0:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    5ae4:	d017      	beq.n	5b16 <grid_led_startup_animation+0x96>
		for (uint8_t j=0; j<mod->led_number; j++){
    5ae6:	7873      	ldrb	r3, [r6, #1]
    5ae8:	2b00      	cmp	r3, #0
    5aea:	d0ed      	beq.n	5ac8 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    5aec:	fb0b f709 	mul.w	r7, fp, r9
    5af0:	427b      	negs	r3, r7
    5af2:	b2ff      	uxtb	r7, r7
    5af4:	b2db      	uxtb	r3, r3
    5af6:	bf58      	it	pl
    5af8:	425f      	negpl	r7, r3
    5afa:	b2bf      	uxth	r7, r7
    5afc:	9b03      	ldr	r3, [sp, #12]
    5afe:	fb09 f503 	mul.w	r5, r9, r3
    5b02:	fb0b f505 	mul.w	r5, fp, r5
    5b06:	426b      	negs	r3, r5
    5b08:	b2ed      	uxtb	r5, r5
    5b0a:	b2db      	uxtb	r3, r3
    5b0c:	bf58      	it	pl
    5b0e:	425d      	negpl	r5, r3
    5b10:	b2ad      	uxth	r5, r5
    5b12:	2400      	movs	r4, #0
    5b14:	e7cd      	b.n	5ab2 <grid_led_startup_animation+0x32>
}
    5b16:	b005      	add	sp, #20
    5b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b1c:	40000c00 	.word	0x40000c00
    5b20:	00005a49 	.word	0x00005a49
    5b24:	00005e95 	.word	0x00005e95
    5b28:	0000573d 	.word	0x0000573d

00005b2c <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    5b2c:	b570      	push	{r4, r5, r6, lr}
    5b2e:	4604      	mov	r4, r0
    5b30:	4e2b      	ldr	r6, [pc, #172]	; (5be0 <grid_led_init+0xb4>)
    5b32:	2200      	movs	r2, #0
    5b34:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    5b36:	f003 0001 	and.w	r0, r3, #1
    5b3a:	2800      	cmp	r0, #0
    5b3c:	bf14      	ite	ne
    5b3e:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    5b42:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    5b46:	f3c3 0540 	ubfx	r5, r3, #1, #1
    5b4a:	2d00      	cmp	r5, #0
    5b4c:	bf14      	ite	ne
    5b4e:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    5b52:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    5b56:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    5b58:	f3c3 0080 	ubfx	r0, r3, #2, #1
    5b5c:	2800      	cmp	r0, #0
    5b5e:	bf14      	ite	ne
    5b60:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    5b64:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    5b68:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    5b6a:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    5b6e:	2d00      	cmp	r5, #0
    5b70:	bf14      	ite	ne
    5b72:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    5b76:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    5b7a:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    5b7c:	f3c3 1500 	ubfx	r5, r3, #4, #1
    5b80:	2d00      	cmp	r5, #0
    5b82:	bf14      	ite	ne
    5b84:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    5b88:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    5b8c:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    5b8e:	f3c3 1040 	ubfx	r0, r3, #5, #1
    5b92:	2800      	cmp	r0, #0
    5b94:	bf14      	ite	ne
    5b96:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    5b9a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    5b9e:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    5ba0:	f3c3 1080 	ubfx	r0, r3, #6, #1
    5ba4:	2800      	cmp	r0, #0
    5ba6:	bf14      	ite	ne
    5ba8:	200e      	movne	r0, #14
    5baa:	2008      	moveq	r0, #8
    5bac:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    5bae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    5bb2:	2b00      	cmp	r3, #0
    5bb4:	bf14      	ite	ne
    5bb6:	23e0      	movne	r3, #224	; 0xe0
    5bb8:	2380      	moveq	r3, #128	; 0x80
    5bba:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    5bbc:	f846 3f04 	str.w	r3, [r6, #4]!
    5bc0:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    5bc2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    5bc6:	d1b5      	bne.n	5b34 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    5bc8:	4620      	mov	r0, r4
    5bca:	4b06      	ldr	r3, [pc, #24]	; (5be4 <grid_led_init+0xb8>)
    5bcc:	4798      	blx	r3
	grid_led_hardware_init(mod);
    5bce:	4620      	mov	r0, r4
    5bd0:	4b05      	ldr	r3, [pc, #20]	; (5be8 <grid_led_init+0xbc>)
    5bd2:	4798      	blx	r3
	grid_led_startup_animation(mod);
    5bd4:	4620      	mov	r0, r4
    5bd6:	4b05      	ldr	r3, [pc, #20]	; (5bec <grid_led_init+0xc0>)
    5bd8:	4798      	blx	r3
}
    5bda:	2000      	movs	r0, #0
    5bdc:	bd70      	pop	{r4, r5, r6, pc}
    5bde:	bf00      	nop
    5be0:	20002da4 	.word	0x20002da4
    5be4:	000058cd 	.word	0x000058cd
    5be8:	0000578d 	.word	0x0000578d
    5bec:	00005a81 	.word	0x00005a81

00005bf0 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    5bf0:	b510      	push	{r4, lr}
    5bf2:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    5bf4:	2200      	movs	r2, #0
    5bf6:	4b05      	ldr	r3, [pc, #20]	; (5c0c <grid_led_hardware_start_transfer+0x1c>)
    5bf8:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    5bfa:	4805      	ldr	r0, [pc, #20]	; (5c10 <grid_led_hardware_start_transfer+0x20>)
    5bfc:	4b05      	ldr	r3, [pc, #20]	; (5c14 <grid_led_hardware_start_transfer+0x24>)
    5bfe:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    5c00:	88a2      	ldrh	r2, [r4, #4]
    5c02:	68a1      	ldr	r1, [r4, #8]
    5c04:	6960      	ldr	r0, [r4, #20]
    5c06:	4b04      	ldr	r3, [pc, #16]	; (5c18 <grid_led_hardware_start_transfer+0x28>)
    5c08:	4798      	blx	r3
    5c0a:	bd10      	pop	{r4, pc}
    5c0c:	20000ca0 	.word	0x20000ca0
    5c10:	20000b20 	.word	0x20000b20
    5c14:	00006235 	.word	0x00006235
    5c18:	00005fe1 	.word	0x00005fe1

00005c1c <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    5c1c:	4b01      	ldr	r3, [pc, #4]	; (5c24 <grid_led_hardware_is_transfer_completed+0x8>)
    5c1e:	7818      	ldrb	r0, [r3, #0]
	
    5c20:	4770      	bx	lr
    5c22:	bf00      	nop
    5c24:	20000ca0 	.word	0x20000ca0

00005c28 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    5c28:	4b34      	ldr	r3, [pc, #208]	; (5cfc <grid_sys_get_hwcfg+0xd4>)
    5c2a:	681b      	ldr	r3, [r3, #0]
    5c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5c30:	d002      	beq.n	5c38 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    5c32:	4b32      	ldr	r3, [pc, #200]	; (5cfc <grid_sys_get_hwcfg+0xd4>)
    5c34:	6818      	ldr	r0, [r3, #0]
    5c36:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    5c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5c3c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5c3e:	4b30      	ldr	r3, [pc, #192]	; (5d00 <grid_sys_get_hwcfg+0xd8>)
    5c40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    5c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5c48:	492e      	ldr	r1, [pc, #184]	; (5d04 <grid_sys_get_hwcfg+0xdc>)
    5c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    5c4e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    5c52:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5c56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    5c5a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5c5e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    5c62:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    5c66:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    5c6e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5c72:	4925      	ldr	r1, [pc, #148]	; (5d08 <grid_sys_get_hwcfg+0xe0>)
    5c74:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    5c78:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    5c7c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5c80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    5c84:	2001      	movs	r0, #1
    5c86:	4b21      	ldr	r3, [pc, #132]	; (5d0c <grid_sys_get_hwcfg+0xe4>)
    5c88:	4798      	blx	r3
    5c8a:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    5c8c:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5c8e:	4d1c      	ldr	r5, [pc, #112]	; (5d00 <grid_sys_get_hwcfg+0xd8>)
    5c90:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    5c94:	4f1d      	ldr	r7, [pc, #116]	; (5d0c <grid_sys_get_hwcfg+0xe4>)
    5c96:	e00c      	b.n	5cb2 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    5c98:	2e07      	cmp	r6, #7
    5c9a:	d027      	beq.n	5cec <grid_sys_get_hwcfg+0xc4>
    5c9c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    5ca0:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    5ca4:	2001      	movs	r0, #1
    5ca6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ca8:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    5cac:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    5cae:	2e08      	cmp	r6, #8
    5cb0:	d01c      	beq.n	5cec <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5cb2:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    5cb6:	2001      	movs	r0, #1
    5cb8:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5cba:	a801      	add	r0, sp, #4
    5cbc:	4b14      	ldr	r3, [pc, #80]	; (5d10 <grid_sys_get_hwcfg+0xe8>)
    5cbe:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5cc0:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5cc4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5cc8:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5ccc:	405c      	eors	r4, r3
    5cce:	4014      	ands	r4, r2
    5cd0:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    5cd2:	a801      	add	r0, sp, #4
    5cd4:	4b0f      	ldr	r3, [pc, #60]	; (5d14 <grid_sys_get_hwcfg+0xec>)
    5cd6:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    5cd8:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    5cdc:	d0dc      	beq.n	5c98 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    5cde:	2301      	movs	r3, #1
    5ce0:	40b3      	lsls	r3, r6
    5ce2:	ea43 0808 	orr.w	r8, r3, r8
    5ce6:	fa5f f888 	uxtb.w	r8, r8
    5cea:	e7d5      	b.n	5c98 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    5cec:	4b03      	ldr	r3, [pc, #12]	; (5cfc <grid_sys_get_hwcfg+0xd4>)
    5cee:	f8c3 8000 	str.w	r8, [r3]
}
    5cf2:	4b02      	ldr	r3, [pc, #8]	; (5cfc <grid_sys_get_hwcfg+0xd4>)
    5cf4:	6818      	ldr	r0, [r3, #0]
    5cf6:	b003      	add	sp, #12
    5cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5cfc:	20000000 	.word	0x20000000
    5d00:	41008000 	.word	0x41008000
    5d04:	40002000 	.word	0x40002000
    5d08:	40028000 	.word	0x40028000
    5d0c:	00005e95 	.word	0x00005e95
    5d10:	00005e59 	.word	0x00005e59
    5d14:	00005e67 	.word	0x00005e67

00005d18 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    5d18:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    5d1a:	6983      	ldr	r3, [r0, #24]
    5d1c:	b103      	cbz	r3, 5d20 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    5d1e:	4798      	blx	r3
    5d20:	bd08      	pop	{r3, pc}

00005d22 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    5d22:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    5d24:	69c3      	ldr	r3, [r0, #28]
    5d26:	b103      	cbz	r3, 5d2a <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    5d28:	4798      	blx	r3
    5d2a:	bd08      	pop	{r3, pc}

00005d2c <adc_async_channel_conversion_done>:
{
    5d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d30:	4606      	mov	r6, r0
    5d32:	460f      	mov	r7, r1
    5d34:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    5d36:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    5d38:	5c5c      	ldrb	r4, [r3, r1]
    5d3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5d3e:	00e4      	lsls	r4, r4, #3
    5d40:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    5d44:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    5d48:	f105 0a04 	add.w	sl, r5, #4
    5d4c:	b2d1      	uxtb	r1, r2
    5d4e:	4650      	mov	r0, sl
    5d50:	4b0c      	ldr	r3, [pc, #48]	; (5d84 <adc_async_channel_conversion_done+0x58>)
    5d52:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    5d54:	4630      	mov	r0, r6
    5d56:	4b0c      	ldr	r3, [pc, #48]	; (5d88 <adc_async_channel_conversion_done+0x5c>)
    5d58:	4798      	blx	r3
    5d5a:	2801      	cmp	r0, #1
    5d5c:	d907      	bls.n	5d6e <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    5d5e:	ea4f 2119 	mov.w	r1, r9, lsr #8
    5d62:	4650      	mov	r0, sl
    5d64:	4b07      	ldr	r3, [pc, #28]	; (5d84 <adc_async_channel_conversion_done+0x58>)
    5d66:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    5d68:	8aab      	ldrh	r3, [r5, #20]
    5d6a:	3301      	adds	r3, #1
    5d6c:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    5d6e:	8aab      	ldrh	r3, [r5, #20]
    5d70:	3301      	adds	r3, #1
    5d72:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    5d74:	f858 3004 	ldr.w	r3, [r8, r4]
    5d78:	b113      	cbz	r3, 5d80 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    5d7a:	4639      	mov	r1, r7
    5d7c:	4630      	mov	r0, r6
    5d7e:	4798      	blx	r3
    5d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d84:	00006b8b 	.word	0x00006b8b
    5d88:	00006ea1 	.word	0x00006ea1

00005d8c <adc_async_init>:
{
    5d8c:	b570      	push	{r4, r5, r6, lr}
    5d8e:	4606      	mov	r6, r0
	device = &descr->device;
    5d90:	2000      	movs	r0, #0
		channel_map[i] = 0xFF;
    5d92:	25ff      	movs	r5, #255	; 0xff
    5d94:	b2c4      	uxtb	r4, r0
    5d96:	5515      	strb	r5, [r2, r4]
    5d98:	3001      	adds	r0, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    5d9a:	b2c4      	uxtb	r4, r0
    5d9c:	429c      	cmp	r4, r3
    5d9e:	d9f9      	bls.n	5d94 <adc_async_init+0x8>
	descr->channel_map    = channel_map;
    5da0:	6232      	str	r2, [r6, #32]
	descr->channel_max    = channel_max;
    5da2:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	descr->channel_amount = channel_amount;
    5da6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5daa:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    5dae:	9b05      	ldr	r3, [sp, #20]
    5db0:	62b3      	str	r3, [r6, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    5db2:	4630      	mov	r0, r6
    5db4:	4b05      	ldr	r3, [pc, #20]	; (5dcc <adc_async_init+0x40>)
    5db6:	4798      	blx	r3
	if (init_status) {
    5db8:	4603      	mov	r3, r0
    5dba:	b928      	cbnz	r0, 5dc8 <adc_async_init+0x3c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    5dbc:	4a04      	ldr	r2, [pc, #16]	; (5dd0 <adc_async_init+0x44>)
    5dbe:	60b2      	str	r2, [r6, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    5dc0:	4a04      	ldr	r2, [pc, #16]	; (5dd4 <adc_async_init+0x48>)
    5dc2:	6032      	str	r2, [r6, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    5dc4:	4a04      	ldr	r2, [pc, #16]	; (5dd8 <adc_async_init+0x4c>)
    5dc6:	6072      	str	r2, [r6, #4]
}
    5dc8:	4618      	mov	r0, r3
    5dca:	bd70      	pop	{r4, r5, r6, pc}
    5dcc:	00006d9d 	.word	0x00006d9d
    5dd0:	00005d2d 	.word	0x00005d2d
    5dd4:	00005d19 	.word	0x00005d19
    5dd8:	00005d23 	.word	0x00005d23

00005ddc <adc_async_register_channel_buffer>:
{
    5ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (descr->channel_map[channel] != 0xFF) {
    5de0:	6a07      	ldr	r7, [r0, #32]
    5de2:	5c7c      	ldrb	r4, [r7, r1]
    5de4:	2cff      	cmp	r4, #255	; 0xff
    5de6:	d12b      	bne.n	5e40 <adc_async_register_channel_buffer+0x64>
	for (i = 0; i <= descr->channel_max; i++) {
    5de8:	f890 e024 	ldrb.w	lr, [r0, #36]	; 0x24
    5dec:	2400      	movs	r4, #0
    5dee:	4625      	mov	r5, r4
		if (descr->channel_map[i] != 0xFF) {
    5df0:	b2e6      	uxtb	r6, r4
    5df2:	5dbe      	ldrb	r6, [r7, r6]
    5df4:	2eff      	cmp	r6, #255	; 0xff
			index++;
    5df6:	bf1c      	itt	ne
    5df8:	3501      	addne	r5, #1
    5dfa:	b2ed      	uxtbne	r5, r5
    5dfc:	3401      	adds	r4, #1
	for (i = 0; i <= descr->channel_max; i++) {
    5dfe:	b2e6      	uxtb	r6, r4
    5e00:	4576      	cmp	r6, lr
    5e02:	d9f5      	bls.n	5df0 <adc_async_register_channel_buffer+0x14>
	if (index > descr->channel_amount) {
    5e04:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
    5e08:	42ac      	cmp	r4, r5
    5e0a:	d31c      	bcc.n	5e46 <adc_async_register_channel_buffer+0x6a>
    5e0c:	4616      	mov	r6, r2
    5e0e:	460f      	mov	r7, r1
    5e10:	4680      	mov	r8, r0
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    5e12:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    5e16:	00e4      	lsls	r4, r4, #3
    5e18:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5e1a:	4420      	add	r0, r4
    5e1c:	461a      	mov	r2, r3
    5e1e:	4631      	mov	r1, r6
    5e20:	3004      	adds	r0, #4
    5e22:	4b0c      	ldr	r3, [pc, #48]	; (5e54 <adc_async_register_channel_buffer+0x78>)
    5e24:	4798      	blx	r3
    5e26:	4602      	mov	r2, r0
    5e28:	b980      	cbnz	r0, 5e4c <adc_async_register_channel_buffer+0x70>
	descr->channel_map[channel]            = index;
    5e2a:	f8d8 3020 	ldr.w	r3, [r8, #32]
    5e2e:	55dd      	strb	r5, [r3, r7]
	descr->descr_ch[index].bytes_in_buffer = 0;
    5e30:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5e34:	441c      	add	r4, r3
    5e36:	2300      	movs	r3, #0
    5e38:	82a3      	strh	r3, [r4, #20]
}
    5e3a:	4610      	mov	r0, r2
    5e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    5e40:	f06f 020c 	mvn.w	r2, #12
    5e44:	e7f9      	b.n	5e3a <adc_async_register_channel_buffer+0x5e>
		return ERR_NO_RESOURCE;
    5e46:	f06f 021b 	mvn.w	r2, #27
    5e4a:	e7f6      	b.n	5e3a <adc_async_register_channel_buffer+0x5e>
		return ERR_INVALID_ARG;
    5e4c:	f06f 020c 	mvn.w	r2, #12
    5e50:	e7f3      	b.n	5e3a <adc_async_register_channel_buffer+0x5e>
    5e52:	bf00      	nop
    5e54:	00006b4f 	.word	0x00006b4f

00005e58 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    5e58:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    5e5c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5e5e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    5e60:	f3bf 8f5f 	dmb	sy
    5e64:	4770      	bx	lr

00005e66 <atomic_leave_critical>:
    5e66:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    5e6a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5e6c:	f383 8810 	msr	PRIMASK, r3
    5e70:	4770      	bx	lr
	...

00005e74 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    5e74:	b508      	push	{r3, lr}
	ASSERT(descr && hw);

	return _crc_sync_init(&descr->dev, hw);
    5e76:	4b01      	ldr	r3, [pc, #4]	; (5e7c <crc_sync_init+0x8>)
    5e78:	4798      	blx	r3
}
    5e7a:	bd08      	pop	{r3, pc}
    5e7c:	00007255 	.word	0x00007255

00005e80 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    5e80:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    5e82:	4b02      	ldr	r3, [pc, #8]	; (5e8c <delay_init+0xc>)
    5e84:	6018      	str	r0, [r3, #0]
    5e86:	4b02      	ldr	r3, [pc, #8]	; (5e90 <delay_init+0x10>)
    5e88:	4798      	blx	r3
    5e8a:	bd08      	pop	{r3, pc}
    5e8c:	20000144 	.word	0x20000144
    5e90:	00008629 	.word	0x00008629

00005e94 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    5e94:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    5e96:	4b04      	ldr	r3, [pc, #16]	; (5ea8 <delay_ms+0x14>)
    5e98:	681c      	ldr	r4, [r3, #0]
    5e9a:	4b04      	ldr	r3, [pc, #16]	; (5eac <delay_ms+0x18>)
    5e9c:	4798      	blx	r3
    5e9e:	4601      	mov	r1, r0
    5ea0:	4620      	mov	r0, r4
    5ea2:	4b03      	ldr	r3, [pc, #12]	; (5eb0 <delay_ms+0x1c>)
    5ea4:	4798      	blx	r3
    5ea6:	bd10      	pop	{r4, pc}
    5ea8:	20000144 	.word	0x20000144
    5eac:	00006f21 	.word	0x00006f21
    5eb0:	0000863d 	.word	0x0000863d

00005eb4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    5eb4:	b508      	push	{r3, lr}
	return _event_system_init();
    5eb6:	4b01      	ldr	r3, [pc, #4]	; (5ebc <event_system_init+0x8>)
    5eb8:	4798      	blx	r3
}
    5eba:	bd08      	pop	{r3, pc}
    5ebc:	0000725d 	.word	0x0000725d

00005ec0 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    5ec0:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    5ec2:	6943      	ldr	r3, [r0, #20]
    5ec4:	b103      	cbz	r3, 5ec8 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    5ec6:	4798      	blx	r3
    5ec8:	bd08      	pop	{r3, pc}

00005eca <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    5eca:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    5ecc:	6983      	ldr	r3, [r0, #24]
    5ece:	b103      	cbz	r3, 5ed2 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    5ed0:	4798      	blx	r3
    5ed2:	bd08      	pop	{r3, pc}

00005ed4 <flash_init>:
{
    5ed4:	b510      	push	{r4, lr}
    5ed6:	4604      	mov	r4, r0
	rc = _flash_init(&flash->dev, hw);
    5ed8:	4b04      	ldr	r3, [pc, #16]	; (5eec <flash_init+0x18>)
    5eda:	4798      	blx	r3
	if (rc) {
    5edc:	4603      	mov	r3, r0
    5ede:	b918      	cbnz	r0, 5ee8 <flash_init+0x14>
	flash->dev.flash_cb.ready_cb = flash_ready;
    5ee0:	4a03      	ldr	r2, [pc, #12]	; (5ef0 <flash_init+0x1c>)
    5ee2:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    5ee4:	4a03      	ldr	r2, [pc, #12]	; (5ef4 <flash_init+0x20>)
    5ee6:	6062      	str	r2, [r4, #4]
}
    5ee8:	4618      	mov	r0, r3
    5eea:	bd10      	pop	{r4, pc}
    5eec:	00007369 	.word	0x00007369
    5ef0:	00005ec1 	.word	0x00005ec1
    5ef4:	00005ecb 	.word	0x00005ecb

00005ef8 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5ef8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5efa:	8843      	ldrh	r3, [r0, #2]
    5efc:	f413 7f80 	tst.w	r3, #256	; 0x100
    5f00:	d102      	bne.n	5f08 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    5f02:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5f04:	b103      	cbz	r3, 5f08 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    5f06:	4798      	blx	r3
    5f08:	bd08      	pop	{r3, pc}

00005f0a <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5f0a:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5f0c:	8843      	ldrh	r3, [r0, #2]
    5f0e:	f413 7f80 	tst.w	r3, #256	; 0x100
    5f12:	d102      	bne.n	5f1a <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    5f14:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5f16:	b103      	cbz	r3, 5f1a <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    5f18:	4798      	blx	r3
    5f1a:	bd08      	pop	{r3, pc}

00005f1c <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    5f1c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5f1e:	8843      	ldrh	r3, [r0, #2]
    5f20:	f413 7f80 	tst.w	r3, #256	; 0x100
    5f24:	d102      	bne.n	5f2c <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    5f26:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5f28:	b103      	cbz	r3, 5f2c <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    5f2a:	4798      	blx	r3
    5f2c:	bd08      	pop	{r3, pc}
	...

00005f30 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    5f30:	b510      	push	{r4, lr}
    5f32:	b084      	sub	sp, #16
    5f34:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    5f36:	8a83      	ldrh	r3, [r0, #20]
    5f38:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    5f3c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    5f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    5f42:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    5f46:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5f48:	a901      	add	r1, sp, #4
    5f4a:	3828      	subs	r0, #40	; 0x28
    5f4c:	4b03      	ldr	r3, [pc, #12]	; (5f5c <i2c_m_async_write+0x2c>)
    5f4e:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    5f50:	2800      	cmp	r0, #0
    5f52:	bf08      	it	eq
    5f54:	4620      	moveq	r0, r4
    5f56:	b004      	add	sp, #16
    5f58:	bd10      	pop	{r4, pc}
    5f5a:	bf00      	nop
    5f5c:	00007e5d 	.word	0x00007e5d

00005f60 <i2c_m_async_read>:
{
    5f60:	b510      	push	{r4, lr}
    5f62:	b084      	sub	sp, #16
    5f64:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    5f66:	8a83      	ldrh	r3, [r0, #20]
    5f68:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    5f6c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    5f6e:	f248 0301 	movw	r3, #32769	; 0x8001
    5f72:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    5f76:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5f78:	a901      	add	r1, sp, #4
    5f7a:	3828      	subs	r0, #40	; 0x28
    5f7c:	4b03      	ldr	r3, [pc, #12]	; (5f8c <i2c_m_async_read+0x2c>)
    5f7e:	4798      	blx	r3
}
    5f80:	2800      	cmp	r0, #0
    5f82:	bf08      	it	eq
    5f84:	4620      	moveq	r0, r4
    5f86:	b004      	add	sp, #16
    5f88:	bd10      	pop	{r4, pc}
    5f8a:	bf00      	nop
    5f8c:	00007e5d 	.word	0x00007e5d

00005f90 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    5f90:	b570      	push	{r4, r5, r6, lr}
    5f92:	4604      	mov	r4, r0
	int32_t init_status;
	ASSERT(i2c);

	init_status = _i2c_m_async_init(&i2c->device, hw);
    5f94:	4b0b      	ldr	r3, [pc, #44]	; (5fc4 <i2c_m_async_init+0x34>)
    5f96:	4798      	blx	r3
	if (init_status) {
    5f98:	4605      	mov	r5, r0
    5f9a:	b108      	cbz	r0, 5fa0 <i2c_m_async_init+0x10>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    5f9c:	4628      	mov	r0, r5
    5f9e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    5fa0:	4b09      	ldr	r3, [pc, #36]	; (5fc8 <i2c_m_async_init+0x38>)
    5fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    5fa4:	4b09      	ldr	r3, [pc, #36]	; (5fcc <i2c_m_async_init+0x3c>)
    5fa6:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    5fa8:	4a09      	ldr	r2, [pc, #36]	; (5fd0 <i2c_m_async_init+0x40>)
    5faa:	2101      	movs	r1, #1
    5fac:	4620      	mov	r0, r4
    5fae:	4e09      	ldr	r6, [pc, #36]	; (5fd4 <i2c_m_async_init+0x44>)
    5fb0:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    5fb2:	4a09      	ldr	r2, [pc, #36]	; (5fd8 <i2c_m_async_init+0x48>)
    5fb4:	2102      	movs	r1, #2
    5fb6:	4620      	mov	r0, r4
    5fb8:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    5fba:	4a08      	ldr	r2, [pc, #32]	; (5fdc <i2c_m_async_init+0x4c>)
    5fbc:	2100      	movs	r1, #0
    5fbe:	4620      	mov	r0, r4
    5fc0:	47b0      	blx	r6
	return ERR_NONE;
    5fc2:	e7eb      	b.n	5f9c <i2c_m_async_init+0xc>
    5fc4:	00007df9 	.word	0x00007df9
    5fc8:	00005f61 	.word	0x00005f61
    5fcc:	00005f31 	.word	0x00005f31
    5fd0:	00005ef9 	.word	0x00005ef9
    5fd4:	00007f3b 	.word	0x00007f3b
    5fd8:	00005f0b 	.word	0x00005f0b
    5fdc:	00005f1d 	.word	0x00005f1d

00005fe0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5fe0:	b508      	push	{r3, lr}
	ASSERT(io_descr && buf);
	return io_descr->write(io_descr, buf, length);
    5fe2:	6803      	ldr	r3, [r0, #0]
    5fe4:	4798      	blx	r3
}
    5fe6:	bd08      	pop	{r3, pc}

00005fe8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    5fe8:	b508      	push	{r3, lr}
	ASSERT(io_descr && buf);
	return io_descr->read(io_descr, buf, length);
    5fea:	6843      	ldr	r3, [r0, #4]
    5fec:	4798      	blx	r3
}
    5fee:	bd08      	pop	{r3, pc}

00005ff0 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    5ff0:	b508      	push	{r3, lr}
	ASSERT(qspi && hw);

	return _qspi_dma_init(&qspi->dev, hw);
    5ff2:	4b01      	ldr	r3, [pc, #4]	; (5ff8 <qspi_dma_init+0x8>)
    5ff4:	4798      	blx	r3
}
    5ff6:	bd08      	pop	{r3, pc}
    5ff8:	0000755d 	.word	0x0000755d

00005ffc <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5ffc:	b510      	push	{r4, lr}
	ASSERT(io);
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    5ffe:	2400      	movs	r4, #0
    6000:	6184      	str	r4, [r0, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    6002:	6141      	str	r1, [r0, #20]
	spi->xfer.size  = length;
    6004:	61c2      	str	r2, [r0, #28]
	spi->xfercnt    = 0;
    6006:	6204      	str	r4, [r0, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    6008:	2310      	movs	r3, #16
    600a:	7203      	strb	r3, [r0, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    600c:	2101      	movs	r1, #1
    600e:	3820      	subs	r0, #32
    6010:	4b01      	ldr	r3, [pc, #4]	; (6018 <_spi_m_async_io_write+0x1c>)
    6012:	4798      	blx	r3

	return ERR_NONE;
}
    6014:	4620      	mov	r0, r4
    6016:	bd10      	pop	{r4, pc}
    6018:	00008305 	.word	0x00008305

0000601c <_spi_m_async_io_read>:
{
    601c:	b538      	push	{r3, r4, r5, lr}
	spi->xfer.rxbuf = buf;
    601e:	6181      	str	r1, [r0, #24]
	spi->xfer.txbuf = NULL;
    6020:	2500      	movs	r5, #0
    6022:	6145      	str	r5, [r0, #20]
	spi->xfer.size  = length;
    6024:	61c2      	str	r2, [r0, #28]
	spi->xfercnt    = 0;
    6026:	6205      	str	r5, [r0, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    6028:	2310      	movs	r3, #16
    602a:	7203      	strb	r3, [r0, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    602c:	f1a0 0420 	sub.w	r4, r0, #32
    6030:	2101      	movs	r1, #1
    6032:	4620      	mov	r0, r4
    6034:	4b04      	ldr	r3, [pc, #16]	; (6048 <_spi_m_async_io_read+0x2c>)
    6036:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    6038:	f240 11ff 	movw	r1, #511	; 0x1ff
    603c:	4620      	mov	r0, r4
    603e:	4b03      	ldr	r3, [pc, #12]	; (604c <_spi_m_async_io_read+0x30>)
    6040:	4798      	blx	r3
}
    6042:	4628      	mov	r0, r5
    6044:	bd38      	pop	{r3, r4, r5, pc}
    6046:	bf00      	nop
    6048:	00008317 	.word	0x00008317
    604c:	0000833d 	.word	0x0000833d

00006050 <_spi_dev_error>:
{
    6050:	b570      	push	{r4, r5, r6, lr}
    6052:	4604      	mov	r4, r0
    6054:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    6056:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    6058:	2100      	movs	r1, #0
    605a:	4b09      	ldr	r3, [pc, #36]	; (6080 <_spi_dev_error+0x30>)
    605c:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    605e:	2100      	movs	r1, #0
    6060:	4620      	mov	r0, r4
    6062:	4b08      	ldr	r3, [pc, #32]	; (6084 <_spi_dev_error+0x34>)
    6064:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    6066:	2100      	movs	r1, #0
    6068:	4620      	mov	r0, r4
    606a:	4b07      	ldr	r3, [pc, #28]	; (6088 <_spi_dev_error+0x38>)
    606c:	4798      	blx	r3
	spi->stat = 0;
    606e:	2300      	movs	r3, #0
    6070:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    6074:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6076:	b113      	cbz	r3, 607e <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    6078:	4631      	mov	r1, r6
    607a:	4628      	mov	r0, r5
    607c:	4798      	blx	r3
    607e:	bd70      	pop	{r4, r5, r6, pc}
    6080:	00008305 	.word	0x00008305
    6084:	00008317 	.word	0x00008317
    6088:	00008329 	.word	0x00008329

0000608c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    608c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    608e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6090:	429a      	cmp	r2, r3
    6092:	d200      	bcs.n	6096 <_spi_dev_complete+0xa>
    6094:	4770      	bx	lr
{
    6096:	b510      	push	{r4, lr}
    6098:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    609a:	2100      	movs	r1, #0
    609c:	4b04      	ldr	r3, [pc, #16]	; (60b0 <_spi_dev_complete+0x24>)
    609e:	4798      	blx	r3
		spi->stat = 0;
    60a0:	2300      	movs	r3, #0
    60a2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    60a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    60a8:	b10b      	cbz	r3, 60ae <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    60aa:	1f20      	subs	r0, r4, #4
    60ac:	4798      	blx	r3
    60ae:	bd10      	pop	{r4, pc}
    60b0:	00008329 	.word	0x00008329

000060b4 <_spi_dev_tx>:
{
    60b4:	b510      	push	{r4, lr}
    60b6:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    60b8:	7903      	ldrb	r3, [r0, #4]
    60ba:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    60bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    60be:	6c03      	ldr	r3, [r0, #64]	; 0x40
    60c0:	f103 0101 	add.w	r1, r3, #1
    60c4:	6401      	str	r1, [r0, #64]	; 0x40
    60c6:	bf94      	ite	ls
    60c8:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    60ca:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    60ce:	4b08      	ldr	r3, [pc, #32]	; (60f0 <_spi_dev_tx+0x3c>)
    60d0:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    60d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    60d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    60d6:	429a      	cmp	r2, r3
    60d8:	d000      	beq.n	60dc <_spi_dev_tx+0x28>
    60da:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    60dc:	2100      	movs	r1, #0
    60de:	4620      	mov	r0, r4
    60e0:	4b04      	ldr	r3, [pc, #16]	; (60f4 <_spi_dev_tx+0x40>)
    60e2:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    60e4:	2101      	movs	r1, #1
    60e6:	4620      	mov	r0, r4
    60e8:	4b03      	ldr	r3, [pc, #12]	; (60f8 <_spi_dev_tx+0x44>)
    60ea:	4798      	blx	r3
}
    60ec:	e7f5      	b.n	60da <_spi_dev_tx+0x26>
    60ee:	bf00      	nop
    60f0:	0000833d 	.word	0x0000833d
    60f4:	00008305 	.word	0x00008305
    60f8:	00008329 	.word	0x00008329

000060fc <_spi_dev_rx>:
{
    60fc:	b570      	push	{r4, r5, r6, lr}
    60fe:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    6100:	6b85      	ldr	r5, [r0, #56]	; 0x38
    6102:	b305      	cbz	r5, 6146 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    6104:	7903      	ldrb	r3, [r0, #4]
    6106:	2b01      	cmp	r3, #1
    6108:	d916      	bls.n	6138 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    610a:	6c06      	ldr	r6, [r0, #64]	; 0x40
    610c:	1c73      	adds	r3, r6, #1
    610e:	6403      	str	r3, [r0, #64]	; 0x40
    6110:	4b18      	ldr	r3, [pc, #96]	; (6174 <_spi_dev_rx+0x78>)
    6112:	4798      	blx	r3
    6114:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    6118:	6c23      	ldr	r3, [r4, #64]	; 0x40
    611a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    611c:	4293      	cmp	r3, r2
    611e:	d21d      	bcs.n	615c <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    6120:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6122:	b1b2      	cbz	r2, 6152 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    6124:	7921      	ldrb	r1, [r4, #4]
    6126:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    6128:	bf94      	ite	ls
    612a:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    612c:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    6130:	4620      	mov	r0, r4
    6132:	4b11      	ldr	r3, [pc, #68]	; (6178 <_spi_dev_rx+0x7c>)
    6134:	4798      	blx	r3
    6136:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    6138:	6c06      	ldr	r6, [r0, #64]	; 0x40
    613a:	1c73      	adds	r3, r6, #1
    613c:	6403      	str	r3, [r0, #64]	; 0x40
    613e:	4b0d      	ldr	r3, [pc, #52]	; (6174 <_spi_dev_rx+0x78>)
    6140:	4798      	blx	r3
    6142:	55a8      	strb	r0, [r5, r6]
    6144:	e7e8      	b.n	6118 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    6146:	4b0b      	ldr	r3, [pc, #44]	; (6174 <_spi_dev_rx+0x78>)
    6148:	4798      	blx	r3
		spi->xfercnt++;
    614a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    614c:	3301      	adds	r3, #1
    614e:	6423      	str	r3, [r4, #64]	; 0x40
    6150:	e7e2      	b.n	6118 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    6152:	88e1      	ldrh	r1, [r4, #6]
    6154:	4620      	mov	r0, r4
    6156:	4b08      	ldr	r3, [pc, #32]	; (6178 <_spi_dev_rx+0x7c>)
    6158:	4798      	blx	r3
    615a:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    615c:	2100      	movs	r1, #0
    615e:	4620      	mov	r0, r4
    6160:	4b06      	ldr	r3, [pc, #24]	; (617c <_spi_dev_rx+0x80>)
    6162:	4798      	blx	r3
		spi->stat = 0;
    6164:	2300      	movs	r3, #0
    6166:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    616a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    616c:	b10b      	cbz	r3, 6172 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    616e:	1f20      	subs	r0, r4, #4
    6170:	4798      	blx	r3
    6172:	bd70      	pop	{r4, r5, r6, pc}
    6174:	00008345 	.word	0x00008345
    6178:	0000833d 	.word	0x0000833d
    617c:	00008317 	.word	0x00008317

00006180 <spi_m_async_init>:
{
    6180:	b570      	push	{r4, r5, r6, lr}
    6182:	4605      	mov	r5, r0
	spi->dev.prvt = (void *)hw;
    6184:	4604      	mov	r4, r0
    6186:	f844 1f04 	str.w	r1, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    618a:	4620      	mov	r0, r4
    618c:	4b0d      	ldr	r3, [pc, #52]	; (61c4 <spi_m_async_init+0x44>)
    618e:	4798      	blx	r3
	if (rc >= 0) {
    6190:	2800      	cmp	r0, #0
    6192:	db15      	blt.n	61c0 <spi_m_async_init+0x40>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    6194:	4a0c      	ldr	r2, [pc, #48]	; (61c8 <spi_m_async_init+0x48>)
    6196:	2100      	movs	r1, #0
    6198:	4620      	mov	r0, r4
    619a:	4e0c      	ldr	r6, [pc, #48]	; (61cc <spi_m_async_init+0x4c>)
    619c:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    619e:	4a0c      	ldr	r2, [pc, #48]	; (61d0 <spi_m_async_init+0x50>)
    61a0:	2101      	movs	r1, #1
    61a2:	4620      	mov	r0, r4
    61a4:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    61a6:	4a0b      	ldr	r2, [pc, #44]	; (61d4 <spi_m_async_init+0x54>)
    61a8:	2102      	movs	r1, #2
    61aa:	4620      	mov	r0, r4
    61ac:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    61ae:	4a0a      	ldr	r2, [pc, #40]	; (61d8 <spi_m_async_init+0x58>)
    61b0:	2103      	movs	r1, #3
    61b2:	4620      	mov	r0, r4
    61b4:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
    61b6:	4b09      	ldr	r3, [pc, #36]	; (61dc <spi_m_async_init+0x5c>)
    61b8:	62ab      	str	r3, [r5, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    61ba:	4b09      	ldr	r3, [pc, #36]	; (61e0 <spi_m_async_init+0x60>)
    61bc:	626b      	str	r3, [r5, #36]	; 0x24
	return ERR_NONE;
    61be:	2000      	movs	r0, #0
}
    61c0:	bd70      	pop	{r4, r5, r6, pc}
    61c2:	bf00      	nop
    61c4:	0000829d 	.word	0x0000829d
    61c8:	000060b5 	.word	0x000060b5
    61cc:	0000834d 	.word	0x0000834d
    61d0:	000060fd 	.word	0x000060fd
    61d4:	0000608d 	.word	0x0000608d
    61d8:	00006051 	.word	0x00006051
    61dc:	0000601d 	.word	0x0000601d
    61e0:	00005ffd 	.word	0x00005ffd

000061e4 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    61e4:	b510      	push	{r4, lr}
	ASSERT(io);

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    61e6:	4613      	mov	r3, r2
    61e8:	2200      	movs	r2, #0
    61ea:	381c      	subs	r0, #28
    61ec:	4c01      	ldr	r4, [pc, #4]	; (61f4 <_spi_m_dma_io_write+0x10>)
    61ee:	47a0      	blx	r4
}
    61f0:	bd10      	pop	{r4, pc}
    61f2:	bf00      	nop
    61f4:	0000850d 	.word	0x0000850d

000061f8 <_spi_m_dma_io_read>:
{
    61f8:	b510      	push	{r4, lr}
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    61fa:	4613      	mov	r3, r2
    61fc:	460a      	mov	r2, r1
    61fe:	2100      	movs	r1, #0
    6200:	381c      	subs	r0, #28
    6202:	4c01      	ldr	r4, [pc, #4]	; (6208 <_spi_m_dma_io_read+0x10>)
    6204:	47a0      	blx	r4
}
    6206:	bd10      	pop	{r4, pc}
    6208:	0000850d 	.word	0x0000850d

0000620c <spi_m_dma_init>:
{
    620c:	b510      	push	{r4, lr}
    620e:	4604      	mov	r4, r0
	spi->dev.prvt = (void *)hw;
    6210:	f840 1f04 	str.w	r1, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    6214:	4b04      	ldr	r3, [pc, #16]	; (6228 <spi_m_dma_init+0x1c>)
    6216:	4798      	blx	r3
	if (rc) {
    6218:	4603      	mov	r3, r0
    621a:	b918      	cbnz	r0, 6224 <spi_m_dma_init+0x18>
	spi->io.read  = _spi_m_dma_io_read;
    621c:	4a03      	ldr	r2, [pc, #12]	; (622c <spi_m_dma_init+0x20>)
    621e:	6262      	str	r2, [r4, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    6220:	4a03      	ldr	r2, [pc, #12]	; (6230 <spi_m_dma_init+0x24>)
    6222:	6222      	str	r2, [r4, #32]
}
    6224:	4618      	mov	r0, r3
    6226:	bd10      	pop	{r4, pc}
    6228:	00008359 	.word	0x00008359
    622c:	000061f9 	.word	0x000061f9
    6230:	000061e5 	.word	0x000061e5

00006234 <spi_m_dma_enable>:
{
    6234:	b508      	push	{r3, lr}
	_spi_m_dma_enable(&spi->dev);
    6236:	3004      	adds	r0, #4
    6238:	4b01      	ldr	r3, [pc, #4]	; (6240 <spi_m_dma_enable+0xc>)
    623a:	4798      	blx	r3
    623c:	bd08      	pop	{r3, pc}
    623e:	bf00      	nop
    6240:	0000848d 	.word	0x0000848d

00006244 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    6244:	b508      	push	{r3, lr}
	ASSERT(spi);
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    6246:	3004      	adds	r0, #4
    6248:	4b01      	ldr	r3, [pc, #4]	; (6250 <spi_m_dma_register_callback+0xc>)
    624a:	4798      	blx	r3
    624c:	bd08      	pop	{r3, pc}
    624e:	bf00      	nop
    6250:	0000849d 	.word	0x0000849d

00006254 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
	ASSERT(spi && io);
	*io = &spi->io;
    6254:	3020      	adds	r0, #32
    6256:	6008      	str	r0, [r1, #0]

	return 0;
}
    6258:	2000      	movs	r0, #0
    625a:	4770      	bx	lr

0000625c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    625e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    6260:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    6262:	b12f      	cbz	r7, 6270 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    6264:	688d      	ldr	r5, [r1, #8]
    6266:	463c      	mov	r4, r7
    6268:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    626a:	f1c2 0e01 	rsb	lr, r2, #1
    626e:	e00b      	b.n	6288 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    6270:	4b0e      	ldr	r3, [pc, #56]	; (62ac <timer_add_timer_task+0x50>)
    6272:	4798      	blx	r3
		return;
    6274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    6276:	4473      	add	r3, lr
    6278:	68a0      	ldr	r0, [r4, #8]
    627a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    627c:	42ab      	cmp	r3, r5
    627e:	d20a      	bcs.n	6296 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    6280:	6823      	ldr	r3, [r4, #0]
    6282:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    6284:	b153      	cbz	r3, 629c <timer_add_timer_task+0x40>
    6286:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    6288:	6863      	ldr	r3, [r4, #4]
    628a:	4293      	cmp	r3, r2
    628c:	d8f3      	bhi.n	6276 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    628e:	68a0      	ldr	r0, [r4, #8]
    6290:	4403      	add	r3, r0
    6292:	1a9b      	subs	r3, r3, r2
    6294:	e7f2      	b.n	627c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    6296:	42a7      	cmp	r7, r4
    6298:	d004      	beq.n	62a4 <timer_add_timer_task+0x48>
    629a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    629c:	4620      	mov	r0, r4
    629e:	4b04      	ldr	r3, [pc, #16]	; (62b0 <timer_add_timer_task+0x54>)
    62a0:	4798      	blx	r3
    62a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    62a4:	4660      	mov	r0, ip
    62a6:	4b01      	ldr	r3, [pc, #4]	; (62ac <timer_add_timer_task+0x50>)
    62a8:	4798      	blx	r3
    62aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62ac:	00006b19 	.word	0x00006b19
    62b0:	00006b21 	.word	0x00006b21

000062b4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    62b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    62b8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    62ba:	6907      	ldr	r7, [r0, #16]
    62bc:	3701      	adds	r7, #1
    62be:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    62c0:	7e03      	ldrb	r3, [r0, #24]
    62c2:	f013 0f01 	tst.w	r3, #1
    62c6:	d113      	bne.n	62f0 <timer_process_counted+0x3c>
    62c8:	7e03      	ldrb	r3, [r0, #24]
    62ca:	f013 0f02 	tst.w	r3, #2
    62ce:	d10f      	bne.n	62f0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    62d0:	b354      	cbz	r4, 6328 <timer_process_counted+0x74>
    62d2:	6863      	ldr	r3, [r4, #4]
    62d4:	1afb      	subs	r3, r7, r3
    62d6:	68a2      	ldr	r2, [r4, #8]
    62d8:	4293      	cmp	r3, r2
    62da:	d307      	bcc.n	62ec <timer_process_counted+0x38>
    62dc:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    62de:	f100 0814 	add.w	r8, r0, #20
    62e2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 632c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    62e6:	f8df a048 	ldr.w	sl, [pc, #72]	; 6330 <timer_process_counted+0x7c>
    62ea:	e012      	b.n	6312 <timer_process_counted+0x5e>
    62ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    62f0:	7e03      	ldrb	r3, [r0, #24]
    62f2:	f043 0302 	orr.w	r3, r3, #2
    62f6:	7603      	strb	r3, [r0, #24]
		return;
    62f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    62fc:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    62fe:	68e3      	ldr	r3, [r4, #12]
    6300:	4620      	mov	r0, r4
    6302:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    6304:	b185      	cbz	r5, 6328 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    6306:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    6308:	686b      	ldr	r3, [r5, #4]
    630a:	1afb      	subs	r3, r7, r3
    630c:	68aa      	ldr	r2, [r5, #8]
    630e:	4293      	cmp	r3, r2
    6310:	d30a      	bcc.n	6328 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    6312:	4640      	mov	r0, r8
    6314:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    6316:	7c23      	ldrb	r3, [r4, #16]
    6318:	2b01      	cmp	r3, #1
    631a:	d1ef      	bne.n	62fc <timer_process_counted+0x48>
			tmp->time_label = time;
    631c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    631e:	463a      	mov	r2, r7
    6320:	4621      	mov	r1, r4
    6322:	4640      	mov	r0, r8
    6324:	47d0      	blx	sl
    6326:	e7e9      	b.n	62fc <timer_process_counted+0x48>
    6328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    632c:	00006b43 	.word	0x00006b43
    6330:	0000625d 	.word	0x0000625d

00006334 <timer_init>:
{
    6334:	b510      	push	{r4, lr}
    6336:	4604      	mov	r4, r0
	descr->func = func;
    6338:	f840 2b04 	str.w	r2, [r0], #4
	descr->func->init(&descr->device, hw);
    633c:	6813      	ldr	r3, [r2, #0]
    633e:	4798      	blx	r3
	descr->time                           = 0;
    6340:	2000      	movs	r0, #0
    6342:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    6344:	4b01      	ldr	r3, [pc, #4]	; (634c <timer_init+0x18>)
    6346:	6063      	str	r3, [r4, #4]
}
    6348:	bd10      	pop	{r4, pc}
    634a:	bf00      	nop
    634c:	000062b5 	.word	0x000062b5

00006350 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    6350:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    6352:	2300      	movs	r3, #0
    6354:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    6356:	69c3      	ldr	r3, [r0, #28]
    6358:	b11b      	cbz	r3, 6362 <usart_transmission_complete+0x12>
    635a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    635e:	4610      	mov	r0, r2
    6360:	4798      	blx	r3
    6362:	bd08      	pop	{r3, pc}

00006364 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    6364:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    6366:	2300      	movs	r3, #0
    6368:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    636a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    636c:	b11b      	cbz	r3, 6376 <usart_error+0x12>
    636e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    6372:	4610      	mov	r0, r2
    6374:	4798      	blx	r3
    6376:	bd08      	pop	{r3, pc}

00006378 <usart_fill_rx_buffer>:
{
    6378:	b538      	push	{r3, r4, r5, lr}
    637a:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    637c:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    6380:	302c      	adds	r0, #44	; 0x2c
    6382:	4b03      	ldr	r3, [pc, #12]	; (6390 <usart_fill_rx_buffer+0x18>)
    6384:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    6386:	6a23      	ldr	r3, [r4, #32]
    6388:	b10b      	cbz	r3, 638e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    638a:	4628      	mov	r0, r5
    638c:	4798      	blx	r3
    638e:	bd38      	pop	{r3, r4, r5, pc}
    6390:	00006b8b 	.word	0x00006b8b

00006394 <usart_async_write>:
{
    6394:	b510      	push	{r4, lr}
	if (descr->tx_por != descr->tx_buffer_length) {
    6396:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
    639a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    639e:	429c      	cmp	r4, r3
    63a0:	d10d      	bne.n	63be <usart_async_write+0x2a>
    63a2:	4614      	mov	r4, r2
	descr->tx_buffer        = (uint8_t *)buf;
    63a4:	6481      	str	r1, [r0, #72]	; 0x48
	descr->tx_buffer_length = length;
    63a6:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
	descr->tx_por           = 0;
    63aa:	2300      	movs	r3, #0
    63ac:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    63b0:	2301      	movs	r3, #1
    63b2:	6303      	str	r3, [r0, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    63b4:	3008      	adds	r0, #8
    63b6:	4b03      	ldr	r3, [pc, #12]	; (63c4 <usart_async_write+0x30>)
    63b8:	4798      	blx	r3
	return (int32_t)length;
    63ba:	4620      	mov	r0, r4
    63bc:	bd10      	pop	{r4, pc}
		return ERR_NO_RESOURCE;
    63be:	f06f 001b 	mvn.w	r0, #27
}
    63c2:	bd10      	pop	{r4, pc}
    63c4:	00007de7 	.word	0x00007de7

000063c8 <usart_process_byte_sent>:
{
    63c8:	b510      	push	{r4, lr}
    63ca:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    63cc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    63ce:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    63d2:	429a      	cmp	r2, r3
    63d4:	d009      	beq.n	63ea <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    63d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    63d8:	1c59      	adds	r1, r3, #1
    63da:	8781      	strh	r1, [r0, #60]	; 0x3c
    63dc:	5cd1      	ldrb	r1, [r2, r3]
    63de:	4b04      	ldr	r3, [pc, #16]	; (63f0 <usart_process_byte_sent+0x28>)
    63e0:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    63e2:	4620      	mov	r0, r4
    63e4:	4b03      	ldr	r3, [pc, #12]	; (63f4 <usart_process_byte_sent+0x2c>)
    63e6:	4798      	blx	r3
    63e8:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    63ea:	4b03      	ldr	r3, [pc, #12]	; (63f8 <usart_process_byte_sent+0x30>)
    63ec:	4798      	blx	r3
    63ee:	bd10      	pop	{r4, pc}
    63f0:	00007dbb 	.word	0x00007dbb
    63f4:	00007de7 	.word	0x00007de7
    63f8:	00007def 	.word	0x00007def

000063fc <usart_async_read>:
{
    63fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6400:	b082      	sub	sp, #8
    6402:	4682      	mov	sl, r0
    6404:	4688      	mov	r8, r1
    6406:	4615      	mov	r5, r2
	CRITICAL_SECTION_ENTER()
    6408:	a801      	add	r0, sp, #4
    640a:	4b13      	ldr	r3, [pc, #76]	; (6458 <usart_async_read+0x5c>)
    640c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    640e:	f10a 0a34 	add.w	sl, sl, #52	; 0x34
    6412:	4650      	mov	r0, sl
    6414:	4b11      	ldr	r3, [pc, #68]	; (645c <usart_async_read+0x60>)
    6416:	4798      	blx	r3
    6418:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    641a:	a801      	add	r0, sp, #4
    641c:	4b10      	ldr	r3, [pc, #64]	; (6460 <usart_async_read+0x64>)
    641e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    6420:	b1a7      	cbz	r7, 644c <usart_async_read+0x50>
    6422:	b1b5      	cbz	r5, 6452 <usart_async_read+0x56>
    6424:	3d01      	subs	r5, #1
    6426:	b2ad      	uxth	r5, r5
    6428:	3502      	adds	r5, #2
    642a:	2401      	movs	r4, #1
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    642c:	4e0d      	ldr	r6, [pc, #52]	; (6464 <usart_async_read+0x68>)
    642e:	fa1f f984 	uxth.w	r9, r4
    6432:	1e61      	subs	r1, r4, #1
    6434:	4441      	add	r1, r8
    6436:	4650      	mov	r0, sl
    6438:	47b0      	blx	r6
	while ((was_read < num) && (was_read < length)) {
    643a:	42bc      	cmp	r4, r7
    643c:	d002      	beq.n	6444 <usart_async_read+0x48>
    643e:	3401      	adds	r4, #1
    6440:	42ac      	cmp	r4, r5
    6442:	d1f4      	bne.n	642e <usart_async_read+0x32>
}
    6444:	4648      	mov	r0, r9
    6446:	b002      	add	sp, #8
    6448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint16_t                       was_read = 0;
    644c:	f04f 0900 	mov.w	r9, #0
    6450:	e7f8      	b.n	6444 <usart_async_read+0x48>
    6452:	f04f 0900 	mov.w	r9, #0
    6456:	e7f5      	b.n	6444 <usart_async_read+0x48>
    6458:	00005e59 	.word	0x00005e59
    645c:	00006bad 	.word	0x00006bad
    6460:	00005e67 	.word	0x00005e67
    6464:	00006b69 	.word	0x00006b69

00006468 <usart_async_init>:
{
    6468:	b538      	push	{r3, r4, r5, lr}
    646a:	4604      	mov	r4, r0
    646c:	460d      	mov	r5, r1
    646e:	4611      	mov	r1, r2
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    6470:	461a      	mov	r2, r3
    6472:	3034      	adds	r0, #52	; 0x34
    6474:	4b0d      	ldr	r3, [pc, #52]	; (64ac <usart_async_init+0x44>)
    6476:	4798      	blx	r3
    6478:	b9a0      	cbnz	r0, 64a4 <usart_async_init+0x3c>
	init_status = _usart_async_init(&descr->device, hw);
    647a:	4629      	mov	r1, r5
    647c:	f104 0008 	add.w	r0, r4, #8
    6480:	4b0b      	ldr	r3, [pc, #44]	; (64b0 <usart_async_init+0x48>)
    6482:	4798      	blx	r3
	if (init_status) {
    6484:	4603      	mov	r3, r0
    6486:	b958      	cbnz	r0, 64a0 <usart_async_init+0x38>
	descr->io.read  = usart_async_read;
    6488:	4a0a      	ldr	r2, [pc, #40]	; (64b4 <usart_async_init+0x4c>)
    648a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    648c:	4a0a      	ldr	r2, [pc, #40]	; (64b8 <usart_async_init+0x50>)
    648e:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    6490:	4a0a      	ldr	r2, [pc, #40]	; (64bc <usart_async_init+0x54>)
    6492:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    6494:	4a0a      	ldr	r2, [pc, #40]	; (64c0 <usart_async_init+0x58>)
    6496:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    6498:	4a0a      	ldr	r2, [pc, #40]	; (64c4 <usart_async_init+0x5c>)
    649a:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    649c:	4a0a      	ldr	r2, [pc, #40]	; (64c8 <usart_async_init+0x60>)
    649e:	6162      	str	r2, [r4, #20]
}
    64a0:	4618      	mov	r0, r3
    64a2:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_INVALID_ARG;
    64a4:	f06f 030c 	mvn.w	r3, #12
    64a8:	e7fa      	b.n	64a0 <usart_async_init+0x38>
    64aa:	bf00      	nop
    64ac:	00006b4f 	.word	0x00006b4f
    64b0:	00007d39 	.word	0x00007d39
    64b4:	000063fd 	.word	0x000063fd
    64b8:	00006395 	.word	0x00006395
    64bc:	000063c9 	.word	0x000063c9
    64c0:	00006379 	.word	0x00006379
    64c4:	00006351 	.word	0x00006351
    64c8:	00006365 	.word	0x00006365

000064cc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    64cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    64d0:	460f      	mov	r7, r1
    64d2:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
	while (!_usart_sync_is_ready_to_send(&descr->device))
    64d4:	f100 0408 	add.w	r4, r0, #8
    64d8:	4d0e      	ldr	r5, [pc, #56]	; (6514 <usart_sync_write+0x48>)
    64da:	4620      	mov	r0, r4
    64dc:	47a8      	blx	r5
    64de:	2800      	cmp	r0, #0
    64e0:	d0fb      	beq.n	64da <usart_sync_write+0xe>
    64e2:	3f01      	subs	r7, #1
    64e4:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    64e6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 651c <usart_sync_write+0x50>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    64ea:	4d0a      	ldr	r5, [pc, #40]	; (6514 <usart_sync_write+0x48>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    64ec:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    64f0:	4620      	mov	r0, r4
    64f2:	47c0      	blx	r8
		while (!_usart_sync_is_ready_to_send(&descr->device))
    64f4:	4620      	mov	r0, r4
    64f6:	47a8      	blx	r5
    64f8:	2800      	cmp	r0, #0
    64fa:	d0fb      	beq.n	64f4 <usart_sync_write+0x28>
			;
	} while (++offset < length);
    64fc:	3601      	adds	r6, #1
    64fe:	454e      	cmp	r6, r9
    6500:	d3f4      	bcc.n	64ec <usart_sync_write+0x20>
	while (!_usart_sync_is_transmit_done(&descr->device))
    6502:	4d05      	ldr	r5, [pc, #20]	; (6518 <usart_sync_write+0x4c>)
    6504:	4620      	mov	r0, r4
    6506:	47a8      	blx	r5
    6508:	2800      	cmp	r0, #0
    650a:	d0fb      	beq.n	6504 <usart_sync_write+0x38>
		;
	return (int32_t)offset;
}
    650c:	4630      	mov	r0, r6
    650e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6512:	bf00      	nop
    6514:	00007dc9 	.word	0x00007dc9
    6518:	00007dd3 	.word	0x00007dd3
    651c:	00007db5 	.word	0x00007db5

00006520 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    6520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6524:	4691      	mov	r9, r2
    6526:	1e4f      	subs	r7, r1, #1
	uint32_t                      offset = 0;
    6528:	2600      	movs	r6, #0
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    652a:	f100 0408 	add.w	r4, r0, #8
    652e:	4d08      	ldr	r5, [pc, #32]	; (6550 <usart_sync_read+0x30>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    6530:	f8df 8020 	ldr.w	r8, [pc, #32]	; 6554 <usart_sync_read+0x34>
		while (!_usart_sync_is_byte_received(&descr->device))
    6534:	4620      	mov	r0, r4
    6536:	47a8      	blx	r5
    6538:	2800      	cmp	r0, #0
    653a:	d0fb      	beq.n	6534 <usart_sync_read+0x14>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    653c:	4620      	mov	r0, r4
    653e:	47c0      	blx	r8
    6540:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    6544:	3601      	adds	r6, #1
    6546:	454e      	cmp	r6, r9
    6548:	d3f4      	bcc.n	6534 <usart_sync_read+0x14>

	return (int32_t)offset;
}
    654a:	4630      	mov	r0, r6
    654c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6550:	00007ddd 	.word	0x00007ddd
    6554:	00007dc1 	.word	0x00007dc1

00006558 <usart_sync_init>:
{
    6558:	b510      	push	{r4, lr}
    655a:	4604      	mov	r4, r0
	init_status = _usart_sync_init(&descr->device, hw);
    655c:	3008      	adds	r0, #8
    655e:	4b05      	ldr	r3, [pc, #20]	; (6574 <usart_sync_init+0x1c>)
    6560:	4798      	blx	r3
	if (init_status) {
    6562:	4603      	mov	r3, r0
    6564:	b918      	cbnz	r0, 656e <usart_sync_init+0x16>
	descr->io.read  = usart_sync_read;
    6566:	4a04      	ldr	r2, [pc, #16]	; (6578 <usart_sync_init+0x20>)
    6568:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    656a:	4a04      	ldr	r2, [pc, #16]	; (657c <usart_sync_init+0x24>)
    656c:	6022      	str	r2, [r4, #0]
}
    656e:	4618      	mov	r0, r3
    6570:	bd10      	pop	{r4, pc}
    6572:	bf00      	nop
    6574:	00007d29 	.word	0x00007d29
    6578:	00006521 	.word	0x00006521
    657c:	000064cd 	.word	0x000064cd

00006580 <usart_sync_enable>:
{
    6580:	b508      	push	{r3, lr}
	_usart_sync_enable(&descr->device);
    6582:	3008      	adds	r0, #8
    6584:	4b01      	ldr	r3, [pc, #4]	; (658c <usart_sync_enable+0xc>)
    6586:	4798      	blx	r3
}
    6588:	2000      	movs	r0, #0
    658a:	bd08      	pop	{r3, pc}
    658c:	00007da1 	.word	0x00007da1

00006590 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6590:	4b0f      	ldr	r3, [pc, #60]	; (65d0 <_usb_d_find_ep+0x40>)
    6592:	7859      	ldrb	r1, [r3, #1]
    6594:	4288      	cmp	r0, r1
    6596:	d018      	beq.n	65ca <_usb_d_find_ep+0x3a>
{
    6598:	b430      	push	{r4, r5}
    659a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    659c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    659e:	f000 050f 	and.w	r5, r0, #15
    65a2:	e007      	b.n	65b4 <_usb_d_find_ep+0x24>
    65a4:	3301      	adds	r3, #1
    65a6:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    65a8:	2b0d      	cmp	r3, #13
    65aa:	d009      	beq.n	65c0 <_usb_d_find_ep+0x30>
    65ac:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    65ae:	7851      	ldrb	r1, [r2, #1]
    65b0:	4281      	cmp	r1, r0
    65b2:	d007      	beq.n	65c4 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    65b4:	7814      	ldrb	r4, [r2, #0]
    65b6:	2c00      	cmp	r4, #0
    65b8:	d1f4      	bne.n	65a4 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    65ba:	428d      	cmp	r5, r1
    65bc:	d1f2      	bne.n	65a4 <_usb_d_find_ep+0x14>
    65be:	e001      	b.n	65c4 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    65c0:	f04f 33ff 	mov.w	r3, #4294967295
}
    65c4:	4618      	mov	r0, r3
    65c6:	bc30      	pop	{r4, r5}
    65c8:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    65ca:	2300      	movs	r3, #0
}
    65cc:	4618      	mov	r0, r3
    65ce:	4770      	bx	lr
    65d0:	20000148 	.word	0x20000148

000065d4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    65d4:	2000      	movs	r0, #0
    65d6:	4770      	bx	lr

000065d8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    65d8:	b538      	push	{r3, r4, r5, lr}
    65da:	4604      	mov	r4, r0
    65dc:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    65de:	4b09      	ldr	r3, [pc, #36]	; (6604 <usb_d_cb_trans_more+0x2c>)
    65e0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    65e2:	4b09      	ldr	r3, [pc, #36]	; (6608 <usb_d_cb_trans_more+0x30>)
    65e4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    65e8:	789b      	ldrb	r3, [r3, #2]
    65ea:	2b03      	cmp	r3, #3
    65ec:	d001      	beq.n	65f2 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    65ee:	2000      	movs	r0, #0
}
    65f0:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    65f2:	4b05      	ldr	r3, [pc, #20]	; (6608 <usb_d_cb_trans_more+0x30>)
    65f4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    65f8:	6983      	ldr	r3, [r0, #24]
    65fa:	4629      	mov	r1, r5
    65fc:	4620      	mov	r0, r4
    65fe:	4798      	blx	r3
    6600:	bd38      	pop	{r3, r4, r5, pc}
    6602:	bf00      	nop
    6604:	00006591 	.word	0x00006591
    6608:	20000148 	.word	0x20000148

0000660c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    660c:	b5f0      	push	{r4, r5, r6, r7, lr}
    660e:	b085      	sub	sp, #20
    6610:	4606      	mov	r6, r0
    6612:	460d      	mov	r5, r1
    6614:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    6616:	4b4d      	ldr	r3, [pc, #308]	; (674c <_usb_d_cb_trans_done+0x140>)
    6618:	4798      	blx	r3
    661a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    661c:	2d00      	cmp	r5, #0
    661e:	d15b      	bne.n	66d8 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    6620:	4a4b      	ldr	r2, [pc, #300]	; (6750 <_usb_d_cb_trans_done+0x144>)
    6622:	0143      	lsls	r3, r0, #5
    6624:	18d1      	adds	r1, r2, r3
    6626:	2000      	movs	r0, #0
    6628:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    662a:	5cd3      	ldrb	r3, [r2, r3]
    662c:	b173      	cbz	r3, 664c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    662e:	4b48      	ldr	r3, [pc, #288]	; (6750 <_usb_d_cb_trans_done+0x144>)
    6630:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6634:	2201      	movs	r2, #1
    6636:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    6638:	4845      	ldr	r0, [pc, #276]	; (6750 <_usb_d_cb_trans_done+0x144>)
    663a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    663e:	69c3      	ldr	r3, [r0, #28]
    6640:	463a      	mov	r2, r7
    6642:	78c1      	ldrb	r1, [r0, #3]
    6644:	4630      	mov	r0, r6
    6646:	4798      	blx	r3
}
    6648:	b005      	add	sp, #20
    664a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    664c:	788b      	ldrb	r3, [r1, #2]
    664e:	2b03      	cmp	r3, #3
    6650:	d00b      	beq.n	666a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    6652:	483f      	ldr	r0, [pc, #252]	; (6750 <_usb_d_cb_trans_done+0x144>)
    6654:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    6658:	4614      	mov	r4, r2
    665a:	69d3      	ldr	r3, [r2, #28]
    665c:	320c      	adds	r2, #12
    665e:	2100      	movs	r1, #0
    6660:	7860      	ldrb	r0, [r4, #1]
    6662:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6664:	2302      	movs	r3, #2
    6666:	70a3      	strb	r3, [r4, #2]
    6668:	e7ee      	b.n	6648 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    666a:	460b      	mov	r3, r1
    666c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    6670:	460a      	mov	r2, r1
    6672:	69ce      	ldr	r6, [r1, #28]
    6674:	320c      	adds	r2, #12
    6676:	2101      	movs	r1, #1
    6678:	7858      	ldrb	r0, [r3, #1]
    667a:	47b0      	blx	r6
		if (err) {
    667c:	b1a0      	cbz	r0, 66a8 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    667e:	4b34      	ldr	r3, [pc, #208]	; (6750 <_usb_d_cb_trans_done+0x144>)
    6680:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6684:	2205      	movs	r2, #5
    6686:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    6688:	2202      	movs	r2, #2
    668a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    668c:	2d00      	cmp	r5, #0
    668e:	db09      	blt.n	66a4 <_usb_d_cb_trans_done+0x98>
    6690:	482f      	ldr	r0, [pc, #188]	; (6750 <_usb_d_cb_trans_done+0x144>)
    6692:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6696:	7840      	ldrb	r0, [r0, #1]
    6698:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    669c:	2101      	movs	r1, #1
    669e:	4b2d      	ldr	r3, [pc, #180]	; (6754 <_usb_d_cb_trans_done+0x148>)
    66a0:	4798      	blx	r3
    66a2:	e7d1      	b.n	6648 <_usb_d_cb_trans_done+0x3c>
    66a4:	7858      	ldrb	r0, [r3, #1]
    66a6:	e7f9      	b.n	669c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    66a8:	4829      	ldr	r0, [pc, #164]	; (6750 <_usb_d_cb_trans_done+0x144>)
    66aa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    66ae:	2304      	movs	r3, #4
    66b0:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    66b2:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    66b4:	2200      	movs	r2, #0
    66b6:	9201      	str	r2, [sp, #4]
    66b8:	9202      	str	r2, [sp, #8]
    66ba:	4295      	cmp	r5, r2
    66bc:	bfac      	ite	ge
    66be:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    66c2:	f003 030f 	andlt.w	r3, r3, #15
    66c6:	f88d 300c 	strb.w	r3, [sp, #12]
    66ca:	2301      	movs	r3, #1
    66cc:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    66d0:	a801      	add	r0, sp, #4
    66d2:	4b21      	ldr	r3, [pc, #132]	; (6758 <_usb_d_cb_trans_done+0x14c>)
    66d4:	4798      	blx	r3
    66d6:	e7b7      	b.n	6648 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    66d8:	2d01      	cmp	r5, #1
    66da:	d00a      	beq.n	66f2 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    66dc:	2d02      	cmp	r5, #2
    66de:	d01c      	beq.n	671a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    66e0:	2d03      	cmp	r5, #3
    66e2:	d02a      	beq.n	673a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    66e4:	4b1a      	ldr	r3, [pc, #104]	; (6750 <_usb_d_cb_trans_done+0x144>)
    66e6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    66ea:	2206      	movs	r2, #6
    66ec:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    66ee:	70da      	strb	r2, [r3, #3]
    66f0:	e7a2      	b.n	6638 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    66f2:	4a17      	ldr	r2, [pc, #92]	; (6750 <_usb_d_cb_trans_done+0x144>)
    66f4:	0143      	lsls	r3, r0, #5
    66f6:	18d1      	adds	r1, r2, r3
    66f8:	2002      	movs	r0, #2
    66fa:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    66fc:	5cd3      	ldrb	r3, [r2, r3]
    66fe:	b12b      	cbz	r3, 670c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    6700:	4b13      	ldr	r3, [pc, #76]	; (6750 <_usb_d_cb_trans_done+0x144>)
    6702:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6706:	2205      	movs	r2, #5
    6708:	709a      	strb	r2, [r3, #2]
    670a:	e795      	b.n	6638 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    670c:	460b      	mov	r3, r1
    670e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6710:	2100      	movs	r1, #0
    6712:	4630      	mov	r0, r6
    6714:	4b0f      	ldr	r3, [pc, #60]	; (6754 <_usb_d_cb_trans_done+0x148>)
    6716:	4798      	blx	r3
    6718:	e78e      	b.n	6638 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    671a:	4a0d      	ldr	r2, [pc, #52]	; (6750 <_usb_d_cb_trans_done+0x144>)
    671c:	0143      	lsls	r3, r0, #5
    671e:	18d1      	adds	r1, r2, r3
    6720:	2004      	movs	r0, #4
    6722:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6724:	5cd3      	ldrb	r3, [r2, r3]
    6726:	b12b      	cbz	r3, 6734 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6728:	4b09      	ldr	r3, [pc, #36]	; (6750 <_usb_d_cb_trans_done+0x144>)
    672a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    672e:	2201      	movs	r2, #1
    6730:	709a      	strb	r2, [r3, #2]
    6732:	e781      	b.n	6638 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6734:	2302      	movs	r3, #2
    6736:	708b      	strb	r3, [r1, #2]
			return;
    6738:	e786      	b.n	6648 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    673a:	4b05      	ldr	r3, [pc, #20]	; (6750 <_usb_d_cb_trans_done+0x144>)
    673c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    6740:	2200      	movs	r2, #0
    6742:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    6744:	2205      	movs	r2, #5
    6746:	70da      	strb	r2, [r3, #3]
    6748:	e776      	b.n	6638 <_usb_d_cb_trans_done+0x2c>
    674a:	bf00      	nop
    674c:	00006591 	.word	0x00006591
    6750:	20000148 	.word	0x20000148
    6754:	000098e9 	.word	0x000098e9
    6758:	00009a91 	.word	0x00009a91

0000675c <usb_d_cb_trans_setup>:
{
    675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6760:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6762:	4b1c      	ldr	r3, [pc, #112]	; (67d4 <usb_d_cb_trans_setup+0x78>)
    6764:	4798      	blx	r3
    6766:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    6768:	4c1b      	ldr	r4, [pc, #108]	; (67d8 <usb_d_cb_trans_setup+0x7c>)
    676a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    676e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    6770:	4621      	mov	r1, r4
    6772:	4628      	mov	r0, r5
    6774:	4b19      	ldr	r3, [pc, #100]	; (67dc <usb_d_cb_trans_setup+0x80>)
    6776:	4798      	blx	r3
	if (n != 8) {
    6778:	b2c0      	uxtb	r0, r0
    677a:	2808      	cmp	r0, #8
    677c:	d009      	beq.n	6792 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    677e:	2101      	movs	r1, #1
    6780:	4628      	mov	r0, r5
    6782:	4c17      	ldr	r4, [pc, #92]	; (67e0 <usb_d_cb_trans_setup+0x84>)
    6784:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6786:	2101      	movs	r1, #1
    6788:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    678c:	47a0      	blx	r4
		return;
    678e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6792:	2100      	movs	r1, #0
    6794:	4628      	mov	r0, r5
    6796:	4f12      	ldr	r7, [pc, #72]	; (67e0 <usb_d_cb_trans_setup+0x84>)
    6798:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    679a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    679e:	2100      	movs	r1, #0
    67a0:	4640      	mov	r0, r8
    67a2:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    67a4:	4b0c      	ldr	r3, [pc, #48]	; (67d8 <usb_d_cb_trans_setup+0x7c>)
    67a6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    67aa:	2201      	movs	r2, #1
    67ac:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    67ae:	695b      	ldr	r3, [r3, #20]
    67b0:	4621      	mov	r1, r4
    67b2:	4628      	mov	r0, r5
    67b4:	4798      	blx	r3
    67b6:	b108      	cbz	r0, 67bc <usb_d_cb_trans_setup+0x60>
    67b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    67bc:	4b06      	ldr	r3, [pc, #24]	; (67d8 <usb_d_cb_trans_setup+0x7c>)
    67be:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    67c2:	2305      	movs	r3, #5
    67c4:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    67c6:	2101      	movs	r1, #1
    67c8:	4628      	mov	r0, r5
    67ca:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    67cc:	2101      	movs	r1, #1
    67ce:	4640      	mov	r0, r8
    67d0:	47b8      	blx	r7
    67d2:	e7f1      	b.n	67b8 <usb_d_cb_trans_setup+0x5c>
    67d4:	00006591 	.word	0x00006591
    67d8:	20000148 	.word	0x20000148
    67dc:	00009a31 	.word	0x00009a31
    67e0:	000098e9 	.word	0x000098e9

000067e4 <usb_d_init>:

int32_t usb_d_init(void)
{
    67e4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    67e6:	4b11      	ldr	r3, [pc, #68]	; (682c <usb_d_init+0x48>)
    67e8:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    67ea:	2800      	cmp	r0, #0
    67ec:	db1d      	blt.n	682a <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    67ee:	4c10      	ldr	r4, [pc, #64]	; (6830 <usb_d_init+0x4c>)
    67f0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    67f4:	2100      	movs	r1, #0
    67f6:	4620      	mov	r0, r4
    67f8:	4b0e      	ldr	r3, [pc, #56]	; (6834 <usb_d_init+0x50>)
    67fa:	4798      	blx	r3
    67fc:	4623      	mov	r3, r4
    67fe:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6802:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6804:	4a0c      	ldr	r2, [pc, #48]	; (6838 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6806:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6808:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    680a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    680c:	61da      	str	r2, [r3, #28]
    680e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6810:	4283      	cmp	r3, r0
    6812:	d1f8      	bne.n	6806 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    6814:	4909      	ldr	r1, [pc, #36]	; (683c <usb_d_init+0x58>)
    6816:	2000      	movs	r0, #0
    6818:	4c09      	ldr	r4, [pc, #36]	; (6840 <usb_d_init+0x5c>)
    681a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    681c:	4909      	ldr	r1, [pc, #36]	; (6844 <usb_d_init+0x60>)
    681e:	2001      	movs	r0, #1
    6820:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    6822:	4909      	ldr	r1, [pc, #36]	; (6848 <usb_d_init+0x64>)
    6824:	2002      	movs	r0, #2
    6826:	47a0      	blx	r4
	return ERR_NONE;
    6828:	2000      	movs	r0, #0
}
    682a:	bd10      	pop	{r4, pc}
    682c:	00009341 	.word	0x00009341
    6830:	20000148 	.word	0x20000148
    6834:	0000b543 	.word	0x0000b543
    6838:	000065d5 	.word	0x000065d5
    683c:	0000675d 	.word	0x0000675d
    6840:	00009c99 	.word	0x00009c99
    6844:	000065d9 	.word	0x000065d9
    6848:	0000660d 	.word	0x0000660d

0000684c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    684c:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    684e:	4b01      	ldr	r3, [pc, #4]	; (6854 <usb_d_register_callback+0x8>)
    6850:	4798      	blx	r3
    6852:	bd08      	pop	{r3, pc}
    6854:	00009c71 	.word	0x00009c71

00006858 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    6858:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    685a:	4b01      	ldr	r3, [pc, #4]	; (6860 <usb_d_set_address+0x8>)
    685c:	4798      	blx	r3
    685e:	bd08      	pop	{r3, pc}
    6860:	00009449 	.word	0x00009449

00006864 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    6864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6866:	4606      	mov	r6, r0
    6868:	460c      	mov	r4, r1
    686a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    686c:	4b0f      	ldr	r3, [pc, #60]	; (68ac <usb_d_ep_init+0x48>)
    686e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    6870:	2800      	cmp	r0, #0
    6872:	da14      	bge.n	689e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    6874:	20ff      	movs	r0, #255	; 0xff
    6876:	4b0d      	ldr	r3, [pc, #52]	; (68ac <usb_d_ep_init+0x48>)
    6878:	4798      	blx	r3
		if (ep_index < 0) {
    687a:	1e05      	subs	r5, r0, #0
    687c:	db12      	blt.n	68a4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    687e:	463a      	mov	r2, r7
    6880:	4621      	mov	r1, r4
    6882:	4630      	mov	r0, r6
    6884:	4b0a      	ldr	r3, [pc, #40]	; (68b0 <usb_d_ep_init+0x4c>)
    6886:	4798      	blx	r3
	if (rc < 0) {
    6888:	2800      	cmp	r0, #0
    688a:	db0d      	blt.n	68a8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    688c:	4b09      	ldr	r3, [pc, #36]	; (68b4 <usb_d_ep_init+0x50>)
    688e:	0168      	lsls	r0, r5, #5
    6890:	181a      	adds	r2, r3, r0
    6892:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    6894:	f004 0403 	and.w	r4, r4, #3
    6898:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    689a:	2000      	movs	r0, #0
    689c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    689e:	f06f 0013 	mvn.w	r0, #19
    68a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    68a4:	f06f 0014 	mvn.w	r0, #20
}
    68a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68aa:	bf00      	nop
    68ac:	00006591 	.word	0x00006591
    68b0:	00009455 	.word	0x00009455
    68b4:	20000148 	.word	0x20000148

000068b8 <usb_d_ep0_init>:
{
    68b8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    68ba:	4602      	mov	r2, r0
    68bc:	2100      	movs	r1, #0
    68be:	4608      	mov	r0, r1
    68c0:	4b01      	ldr	r3, [pc, #4]	; (68c8 <usb_d_ep0_init+0x10>)
    68c2:	4798      	blx	r3
}
    68c4:	bd08      	pop	{r3, pc}
    68c6:	bf00      	nop
    68c8:	00006865 	.word	0x00006865

000068cc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    68cc:	b538      	push	{r3, r4, r5, lr}
    68ce:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    68d0:	4b06      	ldr	r3, [pc, #24]	; (68ec <usb_d_ep_deinit+0x20>)
    68d2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    68d4:	1e04      	subs	r4, r0, #0
    68d6:	db07      	blt.n	68e8 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    68d8:	4628      	mov	r0, r5
    68da:	4b05      	ldr	r3, [pc, #20]	; (68f0 <usb_d_ep_deinit+0x24>)
    68dc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    68de:	4805      	ldr	r0, [pc, #20]	; (68f4 <usb_d_ep_deinit+0x28>)
    68e0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    68e4:	23ff      	movs	r3, #255	; 0xff
    68e6:	7043      	strb	r3, [r0, #1]
    68e8:	bd38      	pop	{r3, r4, r5, pc}
    68ea:	bf00      	nop
    68ec:	00006591 	.word	0x00006591
    68f0:	0000956d 	.word	0x0000956d
    68f4:	20000148 	.word	0x20000148

000068f8 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    68f8:	b538      	push	{r3, r4, r5, lr}
    68fa:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    68fc:	4b0e      	ldr	r3, [pc, #56]	; (6938 <usb_d_ep_enable+0x40>)
    68fe:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    6900:	1e04      	subs	r4, r0, #0
    6902:	db16      	blt.n	6932 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    6904:	0163      	lsls	r3, r4, #5
    6906:	4a0d      	ldr	r2, [pc, #52]	; (693c <usb_d_ep_enable+0x44>)
    6908:	5cd3      	ldrb	r3, [r2, r3]
    690a:	2b00      	cmp	r3, #0
    690c:	bf0c      	ite	eq
    690e:	2202      	moveq	r2, #2
    6910:	2201      	movne	r2, #1
    6912:	4b0a      	ldr	r3, [pc, #40]	; (693c <usb_d_ep_enable+0x44>)
    6914:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6918:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    691a:	4628      	mov	r0, r5
    691c:	4b08      	ldr	r3, [pc, #32]	; (6940 <usb_d_ep_enable+0x48>)
    691e:	4798      	blx	r3
	if (rc < 0) {
    6920:	2800      	cmp	r0, #0
    6922:	db00      	blt.n	6926 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    6924:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    6926:	4b05      	ldr	r3, [pc, #20]	; (693c <usb_d_ep_enable+0x44>)
    6928:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    692c:	2300      	movs	r3, #0
    692e:	70a3      	strb	r3, [r4, #2]
    6930:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    6932:	f06f 0011 	mvn.w	r0, #17
    6936:	e7f5      	b.n	6924 <usb_d_ep_enable+0x2c>
    6938:	00006591 	.word	0x00006591
    693c:	20000148 	.word	0x20000148
    6940:	00009631 	.word	0x00009631

00006944 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    6944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6948:	b086      	sub	sp, #24
    694a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    694c:	7a07      	ldrb	r7, [r0, #8]
    694e:	4638      	mov	r0, r7
    6950:	4b3f      	ldr	r3, [pc, #252]	; (6a50 <usb_d_ep_transfer+0x10c>)
    6952:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    6954:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    6956:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    695a:	1e06      	subs	r6, r0, #0
    695c:	db72      	blt.n	6a44 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    695e:	a804      	add	r0, sp, #16
    6960:	4b3c      	ldr	r3, [pc, #240]	; (6a54 <usb_d_ep_transfer+0x110>)
    6962:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    6964:	4b3c      	ldr	r3, [pc, #240]	; (6a58 <usb_d_ep_transfer+0x114>)
    6966:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    696a:	789b      	ldrb	r3, [r3, #2]
    696c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    6970:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6974:	b2db      	uxtb	r3, r3
    6976:	2b01      	cmp	r3, #1
    6978:	d011      	beq.n	699e <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    697a:	a804      	add	r0, sp, #16
    697c:	4b37      	ldr	r3, [pc, #220]	; (6a5c <usb_d_ep_transfer+0x118>)
    697e:	4798      	blx	r3
		switch (state) {
    6980:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6984:	b2db      	uxtb	r3, r3
    6986:	2b05      	cmp	r3, #5
    6988:	d05f      	beq.n	6a4a <usb_d_ep_transfer+0x106>
    698a:	2b06      	cmp	r3, #6
    698c:	d023      	beq.n	69d6 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    698e:	2b00      	cmp	r3, #0
    6990:	bf0c      	ite	eq
    6992:	f06f 0012 	mvneq.w	r0, #18
    6996:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    6998:	b006      	add	sp, #24
    699a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    699e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 6a58 <usb_d_ep_transfer+0x114>
    69a2:	ea4f 1946 	mov.w	r9, r6, lsl #5
    69a6:	eb0a 0309 	add.w	r3, sl, r9
    69aa:	2203      	movs	r2, #3
    69ac:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    69ae:	a804      	add	r0, sp, #16
    69b0:	4b2a      	ldr	r3, [pc, #168]	; (6a5c <usb_d_ep_transfer+0x118>)
    69b2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    69b4:	f81a 3009 	ldrb.w	r3, [sl, r9]
    69b8:	b183      	cbz	r3, 69dc <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    69ba:	7a22      	ldrb	r2, [r4, #8]
    69bc:	3500      	adds	r5, #0
    69be:	bf18      	it	ne
    69c0:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    69c2:	6823      	ldr	r3, [r4, #0]
    69c4:	9301      	str	r3, [sp, #4]
    69c6:	f8cd 8008 	str.w	r8, [sp, #8]
    69ca:	f017 0f80 	tst.w	r7, #128	; 0x80
    69ce:	d119      	bne.n	6a04 <usb_d_ep_transfer+0xc0>
    69d0:	f002 030f 	and.w	r3, r2, #15
    69d4:	e018      	b.n	6a08 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    69d6:	f06f 000f 	mvn.w	r0, #15
    69da:	e7dd      	b.n	6998 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    69dc:	4b1e      	ldr	r3, [pc, #120]	; (6a58 <usb_d_ep_transfer+0x114>)
    69de:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    69e2:	7cda      	ldrb	r2, [r3, #19]
    69e4:	7c9d      	ldrb	r5, [r3, #18]
    69e6:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    69ea:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    69ec:	b9a5      	cbnz	r5, 6a18 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    69ee:	4b1a      	ldr	r3, [pc, #104]	; (6a58 <usb_d_ep_transfer+0x114>)
    69f0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    69f4:	2304      	movs	r3, #4
    69f6:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    69f8:	2300      	movs	r3, #0
			zlp                 = true;
    69fa:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    69fc:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    69fe:	6821      	ldr	r1, [r4, #0]
    6a00:	9101      	str	r1, [sp, #4]
    6a02:	9302      	str	r3, [sp, #8]
    6a04:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    6a08:	f88d 300c 	strb.w	r3, [sp, #12]
    6a0c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    6a10:	a801      	add	r0, sp, #4
    6a12:	4b13      	ldr	r3, [pc, #76]	; (6a60 <usb_d_ep_transfer+0x11c>)
    6a14:	4798      	blx	r3
	return rc;
    6a16:	e7bf      	b.n	6998 <usb_d_ep_transfer+0x54>
    6a18:	4643      	mov	r3, r8
    6a1a:	45a8      	cmp	r8, r5
    6a1c:	bf28      	it	cs
    6a1e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    6a20:	4a0d      	ldr	r2, [pc, #52]	; (6a58 <usb_d_ep_transfer+0x114>)
    6a22:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    6a26:	f996 200c 	ldrsb.w	r2, [r6, #12]
    6a2a:	2a00      	cmp	r2, #0
    6a2c:	db05      	blt.n	6a3a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6a2e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    6a30:	6821      	ldr	r1, [r4, #0]
    6a32:	9101      	str	r1, [sp, #4]
    6a34:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6a36:	2500      	movs	r5, #0
    6a38:	e7ca      	b.n	69d0 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    6a3a:	429d      	cmp	r5, r3
    6a3c:	bf94      	ite	ls
    6a3e:	2500      	movls	r5, #0
    6a40:	2501      	movhi	r5, #1
    6a42:	e7db      	b.n	69fc <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    6a44:	f06f 0011 	mvn.w	r0, #17
    6a48:	e7a6      	b.n	6998 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    6a4a:	2002      	movs	r0, #2
    6a4c:	e7a4      	b.n	6998 <usb_d_ep_transfer+0x54>
    6a4e:	bf00      	nop
    6a50:	00006591 	.word	0x00006591
    6a54:	00005e59 	.word	0x00005e59
    6a58:	20000148 	.word	0x20000148
    6a5c:	00005e67 	.word	0x00005e67
    6a60:	00009a91 	.word	0x00009a91

00006a64 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    6a64:	b538      	push	{r3, r4, r5, lr}
    6a66:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    6a68:	b141      	cbz	r1, 6a7c <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    6a6a:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6a6c:	bf0c      	ite	eq
    6a6e:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    6a70:	2102      	movne	r1, #2
    6a72:	4b13      	ldr	r3, [pc, #76]	; (6ac0 <usb_d_ep_halt+0x5c>)
    6a74:	4798      	blx	r3
    6a76:	4603      	mov	r3, r0
	}
}
    6a78:	4618      	mov	r0, r3
    6a7a:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    6a7c:	4b11      	ldr	r3, [pc, #68]	; (6ac4 <usb_d_ep_halt+0x60>)
    6a7e:	4798      	blx	r3
	if (ep_index < 0) {
    6a80:	1e05      	subs	r5, r0, #0
    6a82:	db19      	blt.n	6ab8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    6a84:	2102      	movs	r1, #2
    6a86:	4620      	mov	r0, r4
    6a88:	4b0d      	ldr	r3, [pc, #52]	; (6ac0 <usb_d_ep_halt+0x5c>)
    6a8a:	4798      	blx	r3
    6a8c:	4603      	mov	r3, r0
    6a8e:	2800      	cmp	r0, #0
    6a90:	d0f2      	beq.n	6a78 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6a92:	2100      	movs	r1, #0
    6a94:	4620      	mov	r0, r4
    6a96:	4b0a      	ldr	r3, [pc, #40]	; (6ac0 <usb_d_ep_halt+0x5c>)
    6a98:	4798      	blx	r3
		if (rc < 0) {
    6a9a:	1e03      	subs	r3, r0, #0
    6a9c:	dbec      	blt.n	6a78 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    6a9e:	4b0a      	ldr	r3, [pc, #40]	; (6ac8 <usb_d_ep_halt+0x64>)
    6aa0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    6aa4:	2201      	movs	r2, #1
    6aa6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    6aa8:	2103      	movs	r1, #3
    6aaa:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    6aac:	69db      	ldr	r3, [r3, #28]
    6aae:	2200      	movs	r2, #0
    6ab0:	4620      	mov	r0, r4
    6ab2:	4798      	blx	r3
	return ERR_NONE;
    6ab4:	2300      	movs	r3, #0
    6ab6:	e7df      	b.n	6a78 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    6ab8:	f06f 0311 	mvn.w	r3, #17
    6abc:	e7dc      	b.n	6a78 <usb_d_ep_halt+0x14>
    6abe:	bf00      	nop
    6ac0:	000098e9 	.word	0x000098e9
    6ac4:	00006591 	.word	0x00006591
    6ac8:	20000148 	.word	0x20000148

00006acc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    6acc:	b538      	push	{r3, r4, r5, lr}
    6ace:	460d      	mov	r5, r1
    6ad0:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    6ad2:	4b0e      	ldr	r3, [pc, #56]	; (6b0c <usb_d_ep_register_callback+0x40>)
    6ad4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    6ad6:	4b0e      	ldr	r3, [pc, #56]	; (6b10 <usb_d_ep_register_callback+0x44>)
    6ad8:	2c00      	cmp	r4, #0
    6ada:	bf08      	it	eq
    6adc:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    6ade:	2800      	cmp	r0, #0
    6ae0:	db13      	blt.n	6b0a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    6ae2:	2d01      	cmp	r5, #1
    6ae4:	d008      	beq.n	6af8 <usb_d_ep_register_callback+0x2c>
    6ae6:	b115      	cbz	r5, 6aee <usb_d_ep_register_callback+0x22>
    6ae8:	2d02      	cmp	r5, #2
    6aea:	d00a      	beq.n	6b02 <usb_d_ep_register_callback+0x36>
    6aec:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    6aee:	4b09      	ldr	r3, [pc, #36]	; (6b14 <usb_d_ep_register_callback+0x48>)
    6af0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6af4:	6144      	str	r4, [r0, #20]
		break;
    6af6:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    6af8:	4b06      	ldr	r3, [pc, #24]	; (6b14 <usb_d_ep_register_callback+0x48>)
    6afa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6afe:	6184      	str	r4, [r0, #24]
		break;
    6b00:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    6b02:	4b04      	ldr	r3, [pc, #16]	; (6b14 <usb_d_ep_register_callback+0x48>)
    6b04:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6b08:	61c4      	str	r4, [r0, #28]
    6b0a:	bd38      	pop	{r3, r4, r5, pc}
    6b0c:	00006591 	.word	0x00006591
    6b10:	000065d5 	.word	0x000065d5
    6b14:	20000148 	.word	0x20000148

00006b18 <list_insert_as_head>:
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
	ASSERT(!is_list_element(list, element));

	((struct list_element *)element)->next = list->head;
    6b18:	6803      	ldr	r3, [r0, #0]
    6b1a:	600b      	str	r3, [r1, #0]
	list->head                             = (struct list_element *)element;
    6b1c:	6001      	str	r1, [r0, #0]
    6b1e:	4770      	bx	lr

00006b20 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    6b20:	6803      	ldr	r3, [r0, #0]
    6b22:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    6b24:	6001      	str	r1, [r0, #0]
    6b26:	4770      	bx	lr

00006b28 <list_insert_at_end>:
/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
	struct list_element *it = list->head;
    6b28:	6802      	ldr	r2, [r0, #0]

	ASSERT(!is_list_element(list, element));

	if (!list->head) {
    6b2a:	b922      	cbnz	r2, 6b36 <list_insert_at_end+0xe>
		list->head                             = (struct list_element *)element;
    6b2c:	6001      	str	r1, [r0, #0]
		((struct list_element *)element)->next = NULL;
    6b2e:	2300      	movs	r3, #0
    6b30:	600b      	str	r3, [r1, #0]
		return;
    6b32:	4770      	bx	lr
	}

	while (it->next) {
		it = it->next;
    6b34:	461a      	mov	r2, r3
	while (it->next) {
    6b36:	6813      	ldr	r3, [r2, #0]
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d1fb      	bne.n	6b34 <list_insert_at_end+0xc>
	}
	it->next                               = (struct list_element *)element;
    6b3c:	6011      	str	r1, [r2, #0]
	((struct list_element *)element)->next = NULL;
    6b3e:	600b      	str	r3, [r1, #0]
    6b40:	4770      	bx	lr

00006b42 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    6b42:	6803      	ldr	r3, [r0, #0]
    6b44:	b10b      	cbz	r3, 6b4a <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    6b46:	681a      	ldr	r2, [r3, #0]
    6b48:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    6b4a:	4618      	mov	r0, r3
    6b4c:	4770      	bx	lr

00006b4e <ringbuffer_init>:
	ASSERT(rb && buf && size);

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    6b4e:	1e53      	subs	r3, r2, #1
    6b50:	421a      	tst	r2, r3
    6b52:	d106      	bne.n	6b62 <ringbuffer_init+0x14>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    6b54:	6043      	str	r3, [r0, #4]
	rb->read_index  = 0;
    6b56:	2300      	movs	r3, #0
    6b58:	6083      	str	r3, [r0, #8]
	rb->write_index = rb->read_index;
    6b5a:	60c3      	str	r3, [r0, #12]
	rb->buf         = (uint8_t *)buf;
    6b5c:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
    6b5e:	4618      	mov	r0, r3
    6b60:	4770      	bx	lr
		return ERR_INVALID_ARG;
    6b62:	f06f 000c 	mvn.w	r0, #12
}
    6b66:	4770      	bx	lr

00006b68 <ringbuffer_get>:
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
	ASSERT(rb && data);

	if (rb->write_index != rb->read_index) {
    6b68:	6883      	ldr	r3, [r0, #8]
    6b6a:	68c2      	ldr	r2, [r0, #12]
    6b6c:	429a      	cmp	r2, r3
    6b6e:	d009      	beq.n	6b84 <ringbuffer_get+0x1c>
		*data = rb->buf[rb->read_index & rb->size];
    6b70:	6842      	ldr	r2, [r0, #4]
    6b72:	4013      	ands	r3, r2
    6b74:	6802      	ldr	r2, [r0, #0]
    6b76:	5cd3      	ldrb	r3, [r2, r3]
    6b78:	700b      	strb	r3, [r1, #0]
		rb->read_index++;
    6b7a:	6883      	ldr	r3, [r0, #8]
    6b7c:	3301      	adds	r3, #1
    6b7e:	6083      	str	r3, [r0, #8]
		return ERR_NONE;
    6b80:	2000      	movs	r0, #0
    6b82:	4770      	bx	lr
	}

	return ERR_NOT_FOUND;
    6b84:	f06f 0009 	mvn.w	r0, #9
}
    6b88:	4770      	bx	lr

00006b8a <ringbuffer_put>:
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
	ASSERT(rb);

	rb->buf[rb->write_index & rb->size] = data;
    6b8a:	68c3      	ldr	r3, [r0, #12]
    6b8c:	6842      	ldr	r2, [r0, #4]
    6b8e:	4013      	ands	r3, r2
    6b90:	6802      	ldr	r2, [r0, #0]
    6b92:	54d1      	strb	r1, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    6b94:	68c3      	ldr	r3, [r0, #12]
    6b96:	6841      	ldr	r1, [r0, #4]
    6b98:	6882      	ldr	r2, [r0, #8]
    6b9a:	1a9a      	subs	r2, r3, r2
    6b9c:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    6b9e:	bf84      	itt	hi
    6ba0:	1a59      	subhi	r1, r3, r1
    6ba2:	6081      	strhi	r1, [r0, #8]
	}

	rb->write_index++;
    6ba4:	3301      	adds	r3, #1
    6ba6:	60c3      	str	r3, [r0, #12]

	return ERR_NONE;
}
    6ba8:	2000      	movs	r0, #0
    6baa:	4770      	bx	lr

00006bac <ringbuffer_num>:
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
	ASSERT(rb);

	return rb->write_index - rb->read_index;
    6bac:	68c2      	ldr	r2, [r0, #12]
    6bae:	6880      	ldr	r0, [r0, #8]
}
    6bb0:	1a10      	subs	r0, r2, r0
    6bb2:	4770      	bx	lr

00006bb4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    6bb4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    6bb6:	4a06      	ldr	r2, [pc, #24]	; (6bd0 <_sbrk+0x1c>)
    6bb8:	6812      	ldr	r2, [r2, #0]
    6bba:	b122      	cbz	r2, 6bc6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6bbc:	4a04      	ldr	r2, [pc, #16]	; (6bd0 <_sbrk+0x1c>)
    6bbe:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6bc0:	4403      	add	r3, r0
    6bc2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    6bc4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6bc6:	4903      	ldr	r1, [pc, #12]	; (6bd4 <_sbrk+0x20>)
    6bc8:	4a01      	ldr	r2, [pc, #4]	; (6bd0 <_sbrk+0x1c>)
    6bca:	6011      	str	r1, [r2, #0]
    6bcc:	e7f6      	b.n	6bbc <_sbrk+0x8>
    6bce:	bf00      	nop
    6bd0:	200002e8 	.word	0x200002e8
    6bd4:	200176a8 	.word	0x200176a8

00006bd8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    6bd8:	f04f 30ff 	mov.w	r0, #4294967295
    6bdc:	4770      	bx	lr

00006bde <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    6bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    6be2:	604b      	str	r3, [r1, #4]

	return 0;
}
    6be4:	2000      	movs	r0, #0
    6be6:	4770      	bx	lr

00006be8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    6be8:	2001      	movs	r0, #1
    6bea:	4770      	bx	lr

00006bec <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    6bec:	2000      	movs	r0, #0
    6bee:	4770      	bx	lr

00006bf0 <_adc_get_regs>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    6bf0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    6bf4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
{
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
		if (_adcs[i].number == n) {
    6bf8:	f3c0 2087 	ubfx	r0, r0, #10, #8
		}
	}

	ASSERT(false);
	return 0;
}
    6bfc:	2801      	cmp	r0, #1
    6bfe:	bf14      	ite	ne
    6c00:	2000      	movne	r0, #0
    6c02:	2001      	moveq	r0, #1
    6c04:	4770      	bx	lr
	...

00006c08 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    6c08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    6c0a:	f013 0f01 	tst.w	r3, #1
    6c0e:	d11b      	bne.n	6c48 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6c10:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6c12:	f013 0f03 	tst.w	r3, #3
    6c16:	d1fb      	bne.n	6c10 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    6c18:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    6c1a:	f013 0f02 	tst.w	r3, #2
    6c1e:	d00d      	beq.n	6c3c <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    6c20:	8803      	ldrh	r3, [r0, #0]
    6c22:	f023 0302 	bic.w	r3, r3, #2
    6c26:	041b      	lsls	r3, r3, #16
    6c28:	0c1b      	lsrs	r3, r3, #16
    6c2a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6c2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6c2e:	f013 0f03 	tst.w	r3, #3
    6c32:	d1fb      	bne.n	6c2c <_adc_init+0x24>
    6c34:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6c36:	f013 0f02 	tst.w	r3, #2
    6c3a:	d1fb      	bne.n	6c34 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    6c3c:	2301      	movs	r3, #1
    6c3e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6c40:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6c42:	f013 0f03 	tst.w	r3, #3
    6c46:	d1fb      	bne.n	6c40 <_adc_init+0x38>
    6c48:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6c4a:	f013 0f01 	tst.w	r3, #1
    6c4e:	d1fb      	bne.n	6c48 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    6c50:	2316      	movs	r3, #22
    6c52:	4a37      	ldr	r2, [pc, #220]	; (6d30 <_adc_init+0x128>)
    6c54:	fb03 2301 	mla	r3, r3, r1, r2
    6c58:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    6c5a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6c5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6c62:	2b00      	cmp	r3, #0
    6c64:	d1fa      	bne.n	6c5c <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    6c66:	2316      	movs	r3, #22
    6c68:	4a31      	ldr	r2, [pc, #196]	; (6d30 <_adc_init+0x128>)
    6c6a:	fb03 2301 	mla	r3, r3, r1, r2
    6c6e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    6c70:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6c72:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6c78:	2b00      	cmp	r3, #0
    6c7a:	d1fa      	bne.n	6c72 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    6c7c:	2316      	movs	r3, #22
    6c7e:	4a2c      	ldr	r2, [pc, #176]	; (6d30 <_adc_init+0x128>)
    6c80:	fb03 2301 	mla	r3, r3, r1, r2
    6c84:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    6c86:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    6c88:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    6c8a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6c8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6c92:	2b00      	cmp	r3, #0
    6c94:	d1fa      	bne.n	6c8c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    6c96:	2316      	movs	r3, #22
    6c98:	4a25      	ldr	r2, [pc, #148]	; (6d30 <_adc_init+0x128>)
    6c9a:	fb03 2301 	mla	r3, r3, r1, r2
    6c9e:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    6ca0:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6ca2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d1fa      	bne.n	6ca2 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    6cac:	2316      	movs	r3, #22
    6cae:	4a20      	ldr	r2, [pc, #128]	; (6d30 <_adc_init+0x128>)
    6cb0:	fb03 2301 	mla	r3, r3, r1, r2
    6cb4:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    6cb6:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6cb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6cbe:	2b00      	cmp	r3, #0
    6cc0:	d1fa      	bne.n	6cb8 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    6cc2:	2316      	movs	r3, #22
    6cc4:	4a1a      	ldr	r2, [pc, #104]	; (6d30 <_adc_init+0x128>)
    6cc6:	fb03 2301 	mla	r3, r3, r1, r2
    6cca:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    6ccc:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6cce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6cd0:	f013 0f80 	tst.w	r3, #128	; 0x80
    6cd4:	d1fb      	bne.n	6cce <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    6cd6:	2316      	movs	r3, #22
    6cd8:	4a15      	ldr	r2, [pc, #84]	; (6d30 <_adc_init+0x128>)
    6cda:	fb03 2301 	mla	r3, r3, r1, r2
    6cde:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    6ce0:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6ce2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6ce4:	f413 7f80 	tst.w	r3, #256	; 0x100
    6ce8:	d1fb      	bne.n	6ce2 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    6cea:	2316      	movs	r3, #22
    6cec:	4a10      	ldr	r2, [pc, #64]	; (6d30 <_adc_init+0x128>)
    6cee:	fb03 2301 	mla	r3, r3, r1, r2
    6cf2:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    6cf4:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6cf6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6cf8:	f413 7f00 	tst.w	r3, #512	; 0x200
    6cfc:	d1fb      	bne.n	6cf6 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    6cfe:	2316      	movs	r3, #22
    6d00:	4a0b      	ldr	r2, [pc, #44]	; (6d30 <_adc_init+0x128>)
    6d02:	fb03 2301 	mla	r3, r3, r1, r2
    6d06:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    6d08:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6d0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6d0c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6d10:	d1fb      	bne.n	6d0a <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    6d12:	2216      	movs	r2, #22
    6d14:	4b06      	ldr	r3, [pc, #24]	; (6d30 <_adc_init+0x128>)
    6d16:	fb02 3101 	mla	r1, r2, r1, r3
    6d1a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    6d1c:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    6d1e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    6d20:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6d22:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6d24:	f013 0f03 	tst.w	r3, #3
    6d28:	d1fb      	bne.n	6d22 <_adc_init+0x11a>

	return ERR_NONE;
}
    6d2a:	2000      	movs	r0, #0
    6d2c:	4770      	bx	lr
    6d2e:	bf00      	nop
    6d30:	0000c5d8 	.word	0x0000c5d8

00006d34 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    6d34:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    6d36:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    6d38:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    6d3c:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    6d40:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    6d42:	f013 0f01 	tst.w	r3, #1
    6d46:	d106      	bne.n	6d56 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    6d48:	f013 0f02 	tst.w	r3, #2
    6d4c:	d10d      	bne.n	6d6a <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    6d4e:	f013 0f04 	tst.w	r3, #4
    6d52:	d111      	bne.n	6d78 <_adc_interrupt_handler+0x44>
    6d54:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    6d56:	2301      	movs	r3, #1
    6d58:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    6d5c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    6d60:	6883      	ldr	r3, [r0, #8]
    6d62:	b292      	uxth	r2, r2
    6d64:	2100      	movs	r1, #0
    6d66:	4798      	blx	r3
    6d68:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    6d6a:	2302      	movs	r3, #2
    6d6c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    6d70:	6843      	ldr	r3, [r0, #4]
    6d72:	2100      	movs	r1, #0
    6d74:	4798      	blx	r3
    6d76:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    6d78:	2304      	movs	r3, #4
    6d7a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    6d7e:	6803      	ldr	r3, [r0, #0]
    6d80:	2100      	movs	r1, #0
    6d82:	4798      	blx	r3
	}
}
    6d84:	e7e6      	b.n	6d54 <_adc_interrupt_handler+0x20>

00006d86 <_adc_get_irq_num>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    6d86:	6940      	ldr	r0, [r0, #20]
    6d88:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    6d8c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    6d90:	0a80      	lsrs	r0, r0, #10
	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    6d92:	0040      	lsls	r0, r0, #1
    6d94:	3076      	adds	r0, #118	; 0x76
}
    6d96:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6d9a:	4770      	bx	lr

00006d9c <_adc_async_init>:
{
    6d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6da0:	4605      	mov	r5, r0
    6da2:	460c      	mov	r4, r1
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    6da4:	4608      	mov	r0, r1
    6da6:	4b37      	ldr	r3, [pc, #220]	; (6e84 <_adc_async_init+0xe8>)
    6da8:	4798      	blx	r3
    6daa:	4601      	mov	r1, r0
    6dac:	4620      	mov	r0, r4
    6dae:	4b36      	ldr	r3, [pc, #216]	; (6e88 <_adc_async_init+0xec>)
    6db0:	4798      	blx	r3
	if (init_status) {
    6db2:	4606      	mov	r6, r0
    6db4:	b110      	cbz	r0, 6dbc <_adc_async_init+0x20>
}
    6db6:	4630      	mov	r0, r6
    6db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    6dbc:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    6dbe:	4b33      	ldr	r3, [pc, #204]	; (6e8c <_adc_async_init+0xf0>)
    6dc0:	429c      	cmp	r4, r3
    6dc2:	d05c      	beq.n	6e7e <_adc_async_init+0xe2>
	if (hw == ADC1) {
    6dc4:	4b32      	ldr	r3, [pc, #200]	; (6e90 <_adc_async_init+0xf4>)
    6dc6:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    6dc8:	bf04      	itt	eq
    6dca:	4b32      	ldreq	r3, [pc, #200]	; (6e94 <_adc_async_init+0xf8>)
    6dcc:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    6dce:	4628      	mov	r0, r5
    6dd0:	4f31      	ldr	r7, [pc, #196]	; (6e98 <_adc_async_init+0xfc>)
    6dd2:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6dd4:	0943      	lsrs	r3, r0, #5
    6dd6:	f000 001f 	and.w	r0, r0, #31
    6dda:	2401      	movs	r4, #1
    6ddc:	fa04 f000 	lsl.w	r0, r4, r0
    6de0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 6e9c <_adc_async_init+0x100>
    6de4:	3320      	adds	r3, #32
    6de6:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6dea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6dee:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    6df2:	4628      	mov	r0, r5
    6df4:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6df6:	0943      	lsrs	r3, r0, #5
    6df8:	f000 001f 	and.w	r0, r0, #31
    6dfc:	fa04 f000 	lsl.w	r0, r4, r0
    6e00:	3360      	adds	r3, #96	; 0x60
    6e02:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    6e06:	4628      	mov	r0, r5
    6e08:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e0a:	0943      	lsrs	r3, r0, #5
    6e0c:	f000 001f 	and.w	r0, r0, #31
    6e10:	4084      	lsls	r4, r0
    6e12:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    6e16:	4628      	mov	r0, r5
    6e18:	47b8      	blx	r7
    6e1a:	3001      	adds	r0, #1
    6e1c:	b280      	uxth	r0, r0
    6e1e:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6e20:	2b00      	cmp	r3, #0
    6e22:	dbc8      	blt.n	6db6 <_adc_async_init+0x1a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e24:	095b      	lsrs	r3, r3, #5
    6e26:	f000 001f 	and.w	r0, r0, #31
    6e2a:	2201      	movs	r2, #1
    6e2c:	fa02 f000 	lsl.w	r0, r2, r0
    6e30:	3320      	adds	r3, #32
    6e32:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6e36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6e3a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    6e3e:	4628      	mov	r0, r5
    6e40:	47b8      	blx	r7
    6e42:	3001      	adds	r0, #1
    6e44:	b280      	uxth	r0, r0
    6e46:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6e48:	2b00      	cmp	r3, #0
    6e4a:	dbb4      	blt.n	6db6 <_adc_async_init+0x1a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e4c:	095b      	lsrs	r3, r3, #5
    6e4e:	f000 001f 	and.w	r0, r0, #31
    6e52:	2201      	movs	r2, #1
    6e54:	fa02 f000 	lsl.w	r0, r2, r0
    6e58:	3360      	adds	r3, #96	; 0x60
    6e5a:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    6e5e:	4628      	mov	r0, r5
    6e60:	47b8      	blx	r7
    6e62:	3001      	adds	r0, #1
    6e64:	b280      	uxth	r0, r0
    6e66:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6e68:	2b00      	cmp	r3, #0
    6e6a:	dba4      	blt.n	6db6 <_adc_async_init+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e6c:	095b      	lsrs	r3, r3, #5
    6e6e:	f000 001f 	and.w	r0, r0, #31
    6e72:	2201      	movs	r2, #1
    6e74:	fa02 f000 	lsl.w	r0, r2, r0
    6e78:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    6e7c:	e79b      	b.n	6db6 <_adc_async_init+0x1a>
		_adc0_dev = dev;
    6e7e:	4b05      	ldr	r3, [pc, #20]	; (6e94 <_adc_async_init+0xf8>)
    6e80:	601d      	str	r5, [r3, #0]
    6e82:	e7a4      	b.n	6dce <_adc_async_init+0x32>
    6e84:	00006bf1 	.word	0x00006bf1
    6e88:	00006c09 	.word	0x00006c09
    6e8c:	43001c00 	.word	0x43001c00
    6e90:	43002000 	.word	0x43002000
    6e94:	200002ec 	.word	0x200002ec
    6e98:	00006d87 	.word	0x00006d87
    6e9c:	e000e100 	.word	0xe000e100

00006ea0 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    6ea0:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    6ea2:	88db      	ldrh	r3, [r3, #6]
    6ea4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    6ea8:	2b03      	cmp	r3, #3
}
    6eaa:	bf0c      	ite	eq
    6eac:	2001      	moveq	r0, #1
    6eae:	2002      	movne	r0, #2
    6eb0:	4770      	bx	lr
	...

00006eb4 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    6eb4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    6eb6:	4b02      	ldr	r3, [pc, #8]	; (6ec0 <ADC0_0_Handler+0xc>)
    6eb8:	6818      	ldr	r0, [r3, #0]
    6eba:	4b02      	ldr	r3, [pc, #8]	; (6ec4 <ADC0_0_Handler+0x10>)
    6ebc:	4798      	blx	r3
    6ebe:	bd08      	pop	{r3, pc}
    6ec0:	200002ec 	.word	0x200002ec
    6ec4:	00006d35 	.word	0x00006d35

00006ec8 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    6ec8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    6eca:	4b02      	ldr	r3, [pc, #8]	; (6ed4 <ADC0_1_Handler+0xc>)
    6ecc:	6818      	ldr	r0, [r3, #0]
    6ece:	4b02      	ldr	r3, [pc, #8]	; (6ed8 <ADC0_1_Handler+0x10>)
    6ed0:	4798      	blx	r3
    6ed2:	bd08      	pop	{r3, pc}
    6ed4:	200002ec 	.word	0x200002ec
    6ed8:	00006d35 	.word	0x00006d35

00006edc <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    6edc:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    6ede:	4b02      	ldr	r3, [pc, #8]	; (6ee8 <ADC1_0_Handler+0xc>)
    6ee0:	6858      	ldr	r0, [r3, #4]
    6ee2:	4b02      	ldr	r3, [pc, #8]	; (6eec <ADC1_0_Handler+0x10>)
    6ee4:	4798      	blx	r3
    6ee6:	bd08      	pop	{r3, pc}
    6ee8:	200002ec 	.word	0x200002ec
    6eec:	00006d35 	.word	0x00006d35

00006ef0 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    6ef0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    6ef2:	4b02      	ldr	r3, [pc, #8]	; (6efc <ADC1_1_Handler+0xc>)
    6ef4:	6858      	ldr	r0, [r3, #4]
    6ef6:	4b02      	ldr	r3, [pc, #8]	; (6f00 <ADC1_1_Handler+0x10>)
    6ef8:	4798      	blx	r3
    6efa:	bd08      	pop	{r3, pc}
    6efc:	200002ec 	.word	0x200002ec
    6f00:	00006d35 	.word	0x00006d35

00006f04 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f04:	0943      	lsrs	r3, r0, #5
    6f06:	f000 001f 	and.w	r0, r0, #31
    6f0a:	2201      	movs	r2, #1
    6f0c:	fa02 f000 	lsl.w	r0, r2, r0
    6f10:	3340      	adds	r3, #64	; 0x40
    6f12:	4a02      	ldr	r2, [pc, #8]	; (6f1c <_irq_set+0x18>)
    6f14:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6f18:	4770      	bx	lr
    6f1a:	bf00      	nop
    6f1c:	e000e100 	.word	0xe000e100

00006f20 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6f20:	4b01      	ldr	r3, [pc, #4]	; (6f28 <_get_cycles_for_ms+0x8>)
    6f22:	fb03 f000 	mul.w	r0, r3, r0
    6f26:	4770      	bx	lr
    6f28:	0001d4c0 	.word	0x0001d4c0

00006f2c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6f2c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6f2e:	4a0e      	ldr	r2, [pc, #56]	; (6f68 <_init_chip+0x3c>)
    6f30:	8813      	ldrh	r3, [r2, #0]
    6f32:	b29b      	uxth	r3, r3
    6f34:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    6f38:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    6f3a:	4b0c      	ldr	r3, [pc, #48]	; (6f6c <_init_chip+0x40>)
    6f3c:	4798      	blx	r3
	_oscctrl_init_sources();
    6f3e:	4b0c      	ldr	r3, [pc, #48]	; (6f70 <_init_chip+0x44>)
    6f40:	4798      	blx	r3
	_mclk_init();
    6f42:	4b0c      	ldr	r3, [pc, #48]	; (6f74 <_init_chip+0x48>)
    6f44:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6f46:	2004      	movs	r0, #4
    6f48:	4c0b      	ldr	r4, [pc, #44]	; (6f78 <_init_chip+0x4c>)
    6f4a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    6f4c:	4b0b      	ldr	r3, [pc, #44]	; (6f7c <_init_chip+0x50>)
    6f4e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6f50:	f640 70fb 	movw	r0, #4091	; 0xffb
    6f54:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    6f56:	4a0a      	ldr	r2, [pc, #40]	; (6f80 <_init_chip+0x54>)
    6f58:	6913      	ldr	r3, [r2, #16]
    6f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6f5e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    6f60:	4b08      	ldr	r3, [pc, #32]	; (6f84 <_init_chip+0x58>)
    6f62:	4798      	blx	r3
    6f64:	bd10      	pop	{r4, pc}
    6f66:	bf00      	nop
    6f68:	41004000 	.word	0x41004000
    6f6c:	000073dd 	.word	0x000073dd
    6f70:	000073f1 	.word	0x000073f1
    6f74:	00007331 	.word	0x00007331
    6f78:	000072b9 	.word	0x000072b9
    6f7c:	000073f5 	.word	0x000073f5
    6f80:	40000800 	.word	0x40000800
    6f84:	00006ffd 	.word	0x00006ffd

00006f88 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    6f88:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    6f8a:	4a1a      	ldr	r2, [pc, #104]	; (6ff4 <_dmac_handler+0x6c>)
    6f8c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    6f8e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    6f92:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    6f96:	4818      	ldr	r0, [pc, #96]	; (6ff8 <_dmac_handler+0x70>)
    6f98:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    6f9c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6fa0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    6fa4:	f012 0f01 	tst.w	r2, #1
    6fa8:	d10a      	bne.n	6fc0 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    6faa:	011a      	lsls	r2, r3, #4
    6fac:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6fb0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6fb4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    6fb8:	f012 0f02 	tst.w	r2, #2
    6fbc:	d10b      	bne.n	6fd6 <_dmac_handler+0x4e>
    6fbe:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    6fc0:	011a      	lsls	r2, r3, #4
    6fc2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6fc6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6fca:	2101      	movs	r1, #1
    6fcc:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    6fd0:	6843      	ldr	r3, [r0, #4]
    6fd2:	4798      	blx	r3
    6fd4:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    6fd6:	011a      	lsls	r2, r3, #4
    6fd8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6fdc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6fe0:	2102      	movs	r1, #2
    6fe2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    6fe6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6fea:	4a03      	ldr	r2, [pc, #12]	; (6ff8 <_dmac_handler+0x70>)
    6fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ff0:	4798      	blx	r3
	}
}
    6ff2:	e7e4      	b.n	6fbe <_dmac_handler+0x36>
    6ff4:	4100a000 	.word	0x4100a000
    6ff8:	200002f4 	.word	0x200002f4

00006ffc <_dma_init>:
{
    6ffc:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    6ffe:	4a32      	ldr	r2, [pc, #200]	; (70c8 <_dma_init+0xcc>)
    7000:	8813      	ldrh	r3, [r2, #0]
    7002:	f023 0302 	bic.w	r3, r3, #2
    7006:	041b      	lsls	r3, r3, #16
    7008:	0c1b      	lsrs	r3, r3, #16
    700a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    700c:	8853      	ldrh	r3, [r2, #2]
    700e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    7012:	041b      	lsls	r3, r3, #16
    7014:	0c1b      	lsrs	r3, r3, #16
    7016:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    7018:	8813      	ldrh	r3, [r2, #0]
    701a:	b29b      	uxth	r3, r3
    701c:	f043 0301 	orr.w	r3, r3, #1
    7020:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    7022:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    7024:	f013 0f01 	tst.w	r3, #1
    7028:	d1fb      	bne.n	7022 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    702a:	4b27      	ldr	r3, [pc, #156]	; (70c8 <_dma_init+0xcc>)
    702c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    7030:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    7032:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    7034:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    7038:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    703c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    703e:	2100      	movs	r1, #0
    7040:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    7042:	4a22      	ldr	r2, [pc, #136]	; (70cc <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    7044:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    7046:	4a22      	ldr	r2, [pc, #136]	; (70d0 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    7048:	639a      	str	r2, [r3, #56]	; 0x38
    704a:	4b22      	ldr	r3, [pc, #136]	; (70d4 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    704c:	4c1f      	ldr	r4, [pc, #124]	; (70cc <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    704e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    7050:	681d      	ldr	r5, [r3, #0]
    7052:	0108      	lsls	r0, r1, #4
    7054:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    7058:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    705c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    705e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    7060:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    7064:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    7066:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    706a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    706c:	1822      	adds	r2, r4, r0
    706e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    7070:	60d6      	str	r6, [r2, #12]
    7072:	3101      	adds	r1, #1
    7074:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    7076:	2920      	cmp	r1, #32
    7078:	d1ea      	bne.n	7050 <_dma_init+0x54>
    707a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    707c:	2001      	movs	r0, #1
    707e:	4916      	ldr	r1, [pc, #88]	; (70d8 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    7080:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    7082:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    7086:	d00b      	beq.n	70a0 <_dma_init+0xa4>
    7088:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    708a:	2b24      	cmp	r3, #36	; 0x24
    708c:	d1f8      	bne.n	7080 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    708e:	4a0e      	ldr	r2, [pc, #56]	; (70c8 <_dma_init+0xcc>)
    7090:	8813      	ldrh	r3, [r2, #0]
    7092:	b29b      	uxth	r3, r3
    7094:	f043 0302 	orr.w	r3, r3, #2
    7098:	8013      	strh	r3, [r2, #0]
}
    709a:	2000      	movs	r0, #0
    709c:	bc70      	pop	{r4, r5, r6}
    709e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70a0:	095c      	lsrs	r4, r3, #5
    70a2:	f002 021f 	and.w	r2, r2, #31
    70a6:	fa00 f202 	lsl.w	r2, r0, r2
    70aa:	f104 0520 	add.w	r5, r4, #32
    70ae:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    70b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    70b6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70ba:	f104 0560 	add.w	r5, r4, #96	; 0x60
    70be:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70c2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    70c6:	e7df      	b.n	7088 <_dma_init+0x8c>
    70c8:	4100a000 	.word	0x4100a000
    70cc:	20007290 	.word	0x20007290
    70d0:	20007490 	.word	0x20007490
    70d4:	0000c604 	.word	0x0000c604
    70d8:	e000e100 	.word	0xe000e100

000070dc <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    70dc:	b991      	cbnz	r1, 7104 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    70de:	b942      	cbnz	r2, 70f2 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    70e0:	0100      	lsls	r0, r0, #4
    70e2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    70e6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    70ea:	2302      	movs	r3, #2
    70ec:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    70f0:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    70f2:	0100      	lsls	r0, r0, #4
    70f4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    70f8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    70fc:	2302      	movs	r3, #2
    70fe:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    7102:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    7104:	2901      	cmp	r1, #1
    7106:	d000      	beq.n	710a <_dma_set_irq_state+0x2e>
    7108:	4770      	bx	lr
	if (value == 0x0) {
    710a:	b142      	cbz	r2, 711e <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    710c:	0100      	lsls	r0, r0, #4
    710e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    7112:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    7116:	2301      	movs	r3, #1
    7118:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    711c:	e7f4      	b.n	7108 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    711e:	0100      	lsls	r0, r0, #4
    7120:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    7124:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    7128:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    712c:	4770      	bx	lr
	...

00007130 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    7130:	4b02      	ldr	r3, [pc, #8]	; (713c <_dma_set_destination_address+0xc>)
    7132:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    7136:	6081      	str	r1, [r0, #8]
}
    7138:	2000      	movs	r0, #0
    713a:	4770      	bx	lr
    713c:	20007290 	.word	0x20007290

00007140 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    7140:	4b02      	ldr	r3, [pc, #8]	; (714c <_dma_set_source_address+0xc>)
    7142:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    7146:	6041      	str	r1, [r0, #4]
}
    7148:	2000      	movs	r0, #0
    714a:	4770      	bx	lr
    714c:	20007290 	.word	0x20007290

00007150 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    7150:	4a05      	ldr	r2, [pc, #20]	; (7168 <_dma_srcinc_enable+0x18>)
    7152:	0100      	lsls	r0, r0, #4
    7154:	5a13      	ldrh	r3, [r2, r0]
    7156:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    7158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    715c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    7160:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    7162:	5211      	strh	r1, [r2, r0]
}
    7164:	2000      	movs	r0, #0
    7166:	4770      	bx	lr
    7168:	20007290 	.word	0x20007290

0000716c <_dma_set_data_amount>:
{
    716c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    716e:	4c14      	ldr	r4, [pc, #80]	; (71c0 <_dma_set_data_amount+0x54>)
    7170:	0102      	lsls	r2, r0, #4
    7172:	18a3      	adds	r3, r4, r2
    7174:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    7176:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    7178:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    717c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    717e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    7182:	d006      	beq.n	7192 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    7184:	fa01 f403 	lsl.w	r4, r1, r3
    7188:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    718a:	4a0d      	ldr	r2, [pc, #52]	; (71c0 <_dma_set_data_amount+0x54>)
    718c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    7190:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    7192:	4c0b      	ldr	r4, [pc, #44]	; (71c0 <_dma_set_data_amount+0x54>)
    7194:	0102      	lsls	r2, r0, #4
    7196:	18a5      	adds	r5, r4, r2
    7198:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    719a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    719c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    71a0:	d005      	beq.n	71ae <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    71a2:	fa01 f303 	lsl.w	r3, r1, r3
    71a6:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    71a8:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    71ac:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    71ae:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    71b0:	4b03      	ldr	r3, [pc, #12]	; (71c0 <_dma_set_data_amount+0x54>)
    71b2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    71b6:	8041      	strh	r1, [r0, #2]
}
    71b8:	2000      	movs	r0, #0
    71ba:	bc30      	pop	{r4, r5}
    71bc:	4770      	bx	lr
    71be:	bf00      	nop
    71c0:	20007290 	.word	0x20007290

000071c4 <_dma_enable_transaction>:
{
    71c4:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    71c6:	4c0d      	ldr	r4, [pc, #52]	; (71fc <_dma_enable_transaction+0x38>)
    71c8:	0103      	lsls	r3, r0, #4
    71ca:	5ae2      	ldrh	r2, [r4, r3]
    71cc:	b292      	uxth	r2, r2
    71ce:	f042 0201 	orr.w	r2, r2, #1
    71d2:	52e2      	strh	r2, [r4, r3]
    71d4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    71d8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    71dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    71de:	f042 0202 	orr.w	r2, r2, #2
    71e2:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    71e4:	b131      	cbz	r1, 71f4 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    71e6:	4a06      	ldr	r2, [pc, #24]	; (7200 <_dma_enable_transaction+0x3c>)
    71e8:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    71ea:	2301      	movs	r3, #1
    71ec:	fa03 f000 	lsl.w	r0, r3, r0
    71f0:	4308      	orrs	r0, r1
    71f2:	6110      	str	r0, [r2, #16]
}
    71f4:	2000      	movs	r0, #0
    71f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    71fa:	4770      	bx	lr
    71fc:	20007290 	.word	0x20007290
    7200:	4100a000 	.word	0x4100a000

00007204 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    7204:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7208:	4b02      	ldr	r3, [pc, #8]	; (7214 <_dma_get_channel_resource+0x10>)
    720a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    720e:	6001      	str	r1, [r0, #0]
}
    7210:	2000      	movs	r0, #0
    7212:	4770      	bx	lr
    7214:	200002f4 	.word	0x200002f4

00007218 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    7218:	b508      	push	{r3, lr}
	_dmac_handler();
    721a:	4b01      	ldr	r3, [pc, #4]	; (7220 <DMAC_0_Handler+0x8>)
    721c:	4798      	blx	r3
    721e:	bd08      	pop	{r3, pc}
    7220:	00006f89 	.word	0x00006f89

00007224 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    7224:	b508      	push	{r3, lr}
	_dmac_handler();
    7226:	4b01      	ldr	r3, [pc, #4]	; (722c <DMAC_1_Handler+0x8>)
    7228:	4798      	blx	r3
    722a:	bd08      	pop	{r3, pc}
    722c:	00006f89 	.word	0x00006f89

00007230 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    7230:	b508      	push	{r3, lr}
	_dmac_handler();
    7232:	4b01      	ldr	r3, [pc, #4]	; (7238 <DMAC_2_Handler+0x8>)
    7234:	4798      	blx	r3
    7236:	bd08      	pop	{r3, pc}
    7238:	00006f89 	.word	0x00006f89

0000723c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    723c:	b508      	push	{r3, lr}
	_dmac_handler();
    723e:	4b01      	ldr	r3, [pc, #4]	; (7244 <DMAC_3_Handler+0x8>)
    7240:	4798      	blx	r3
    7242:	bd08      	pop	{r3, pc}
    7244:	00006f89 	.word	0x00006f89

00007248 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    7248:	b508      	push	{r3, lr}
	_dmac_handler();
    724a:	4b01      	ldr	r3, [pc, #4]	; (7250 <DMAC_4_Handler+0x8>)
    724c:	4798      	blx	r3
    724e:	bd08      	pop	{r3, pc}
    7250:	00006f89 	.word	0x00006f89

00007254 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    7254:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    7256:	2000      	movs	r0, #0
    7258:	4770      	bx	lr
	...

0000725c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    725c:	b430      	push	{r4, r5}
    725e:	4814      	ldr	r0, [pc, #80]	; (72b0 <_event_system_init+0x54>)
    7260:	f100 0543 	add.w	r5, r0, #67	; 0x43
    7264:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    7266:	4c13      	ldr	r4, [pc, #76]	; (72b4 <_event_system_init+0x58>)
    7268:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    726a:	f813 1b01 	ldrb.w	r1, [r3], #1
    726e:	3248      	adds	r2, #72	; 0x48
    7270:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    7274:	42ab      	cmp	r3, r5
    7276:	d1f7      	bne.n	7268 <_event_system_init+0xc>
    7278:	480d      	ldr	r0, [pc, #52]	; (72b0 <_event_system_init+0x54>)
    727a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    727e:	3080      	adds	r0, #128	; 0x80
    7280:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    7282:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    7286:	00ca      	lsls	r2, r1, #3
    7288:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    728c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    7290:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    7292:	f850 3f04 	ldr.w	r3, [r0, #4]!
    7296:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    7298:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    729c:	43db      	mvns	r3, r3
    729e:	b2db      	uxtb	r3, r3
    72a0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    72a4:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    72a6:	2920      	cmp	r1, #32
    72a8:	d1eb      	bne.n	7282 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    72aa:	2000      	movs	r0, #0
    72ac:	bc30      	pop	{r4, r5}
    72ae:	4770      	bx	lr
    72b0:	0000c704 	.word	0x0000c704
    72b4:	4100e000 	.word	0x4100e000

000072b8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    72b8:	f010 0f01 	tst.w	r0, #1
    72bc:	d008      	beq.n	72d0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    72be:	4a17      	ldr	r2, [pc, #92]	; (731c <_gclk_init_generators_by_fref+0x64>)
    72c0:	4b17      	ldr	r3, [pc, #92]	; (7320 <_gclk_init_generators_by_fref+0x68>)
    72c2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    72c4:	4619      	mov	r1, r3
    72c6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    72ca:	684b      	ldr	r3, [r1, #4]
    72cc:	4213      	tst	r3, r2
    72ce:	d1fc      	bne.n	72ca <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    72d0:	f010 0f02 	tst.w	r0, #2
    72d4:	d008      	beq.n	72e8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    72d6:	4a13      	ldr	r2, [pc, #76]	; (7324 <_gclk_init_generators_by_fref+0x6c>)
    72d8:	4b11      	ldr	r3, [pc, #68]	; (7320 <_gclk_init_generators_by_fref+0x68>)
    72da:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    72dc:	4619      	mov	r1, r3
    72de:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    72e2:	684b      	ldr	r3, [r1, #4]
    72e4:	4213      	tst	r3, r2
    72e6:	d1fc      	bne.n	72e2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    72e8:	f010 0f04 	tst.w	r0, #4
    72ec:	d008      	beq.n	7300 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    72ee:	4a0e      	ldr	r2, [pc, #56]	; (7328 <_gclk_init_generators_by_fref+0x70>)
    72f0:	4b0b      	ldr	r3, [pc, #44]	; (7320 <_gclk_init_generators_by_fref+0x68>)
    72f2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    72f4:	4619      	mov	r1, r3
    72f6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    72fa:	684b      	ldr	r3, [r1, #4]
    72fc:	4213      	tst	r3, r2
    72fe:	d1fc      	bne.n	72fa <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    7300:	f010 0f08 	tst.w	r0, #8
    7304:	d008      	beq.n	7318 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7306:	4a09      	ldr	r2, [pc, #36]	; (732c <_gclk_init_generators_by_fref+0x74>)
    7308:	4b05      	ldr	r3, [pc, #20]	; (7320 <_gclk_init_generators_by_fref+0x68>)
    730a:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    730c:	4619      	mov	r1, r3
    730e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7312:	684b      	ldr	r3, [r1, #4]
    7314:	4213      	tst	r3, r2
    7316:	d1fc      	bne.n	7312 <_gclk_init_generators_by_fref+0x5a>
    7318:	4770      	bx	lr
    731a:	bf00      	nop
    731c:	00010108 	.word	0x00010108
    7320:	40001c00 	.word	0x40001c00
    7324:	00010106 	.word	0x00010106
    7328:	00100106 	.word	0x00100106
    732c:	00010104 	.word	0x00010104

00007330 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    7330:	2201      	movs	r2, #1
    7332:	4b01      	ldr	r3, [pc, #4]	; (7338 <_mclk_init+0x8>)
    7334:	715a      	strb	r2, [r3, #5]
    7336:	4770      	bx	lr
    7338:	40000800 	.word	0x40000800

0000733c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    733c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    733e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    7340:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    7342:	f012 0f01 	tst.w	r2, #1
    7346:	d005      	beq.n	7354 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    7348:	2201      	movs	r2, #1
    734a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    734c:	6803      	ldr	r3, [r0, #0]
    734e:	b153      	cbz	r3, 7366 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    7350:	4798      	blx	r3
    7352:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    7354:	8a1a      	ldrh	r2, [r3, #16]
    7356:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    7358:	b12a      	cbz	r2, 7366 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    735a:	f240 225e 	movw	r2, #606	; 0x25e
    735e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    7360:	6843      	ldr	r3, [r0, #4]
    7362:	b103      	cbz	r3, 7366 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    7364:	4798      	blx	r3
    7366:	bd08      	pop	{r3, pc}

00007368 <_flash_init>:
	device->hw = hw;
    7368:	6101      	str	r1, [r0, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    736a:	880b      	ldrh	r3, [r1, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    736c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    7370:	049b      	lsls	r3, r3, #18
    7372:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    7374:	800b      	strh	r3, [r1, #0]
	_nvm_dev = device;
    7376:	4b0d      	ldr	r3, [pc, #52]	; (73ac <_flash_init+0x44>)
    7378:	6018      	str	r0, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    737a:	4b0d      	ldr	r3, [pc, #52]	; (73b0 <_flash_init+0x48>)
    737c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    7380:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7384:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7388:	f3bf 8f6f 	isb	sy
    738c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7398:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    739c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    73a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    73a4:	6019      	str	r1, [r3, #0]
    73a6:	601a      	str	r2, [r3, #0]
}
    73a8:	2000      	movs	r0, #0
    73aa:	4770      	bx	lr
    73ac:	20000474 	.word	0x20000474
    73b0:	e000e100 	.word	0xe000e100

000073b4 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    73b4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    73b6:	4b02      	ldr	r3, [pc, #8]	; (73c0 <NVMCTRL_0_Handler+0xc>)
    73b8:	6818      	ldr	r0, [r3, #0]
    73ba:	4b02      	ldr	r3, [pc, #8]	; (73c4 <NVMCTRL_0_Handler+0x10>)
    73bc:	4798      	blx	r3
    73be:	bd08      	pop	{r3, pc}
    73c0:	20000474 	.word	0x20000474
    73c4:	0000733d 	.word	0x0000733d

000073c8 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    73c8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    73ca:	4b02      	ldr	r3, [pc, #8]	; (73d4 <NVMCTRL_1_Handler+0xc>)
    73cc:	6818      	ldr	r0, [r3, #0]
    73ce:	4b02      	ldr	r3, [pc, #8]	; (73d8 <NVMCTRL_1_Handler+0x10>)
    73d0:	4798      	blx	r3
    73d2:	bd08      	pop	{r3, pc}
    73d4:	20000474 	.word	0x20000474
    73d8:	0000733d 	.word	0x0000733d

000073dc <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    73dc:	4b03      	ldr	r3, [pc, #12]	; (73ec <_osc32kctrl_init_sources+0x10>)
    73de:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    73e0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    73e4:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    73e6:	2201      	movs	r2, #1
    73e8:	741a      	strb	r2, [r3, #16]
    73ea:	4770      	bx	lr
    73ec:	40001400 	.word	0x40001400

000073f0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    73f0:	4770      	bx	lr
	...

000073f4 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    73f4:	4a47      	ldr	r2, [pc, #284]	; (7514 <_oscctrl_init_referenced_generators+0x120>)
    73f6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    73f8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    73fc:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    7400:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7402:	4611      	mov	r1, r2
    7404:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7408:	684b      	ldr	r3, [r1, #4]
    740a:	4213      	tst	r3, r2
    740c:	d1fc      	bne.n	7408 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    740e:	4a41      	ldr	r2, [pc, #260]	; (7514 <_oscctrl_init_referenced_generators+0x120>)
    7410:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7412:	f013 0f04 	tst.w	r3, #4
    7416:	d1fb      	bne.n	7410 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7418:	4b3f      	ldr	r3, [pc, #252]	; (7518 <_oscctrl_init_referenced_generators+0x124>)
    741a:	2200      	movs	r2, #0
    741c:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    741e:	4a3f      	ldr	r2, [pc, #252]	; (751c <_oscctrl_init_referenced_generators+0x128>)
    7420:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7422:	461a      	mov	r2, r3
    7424:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7428:	f013 0f10 	tst.w	r3, #16
    742c:	d1fa      	bne.n	7424 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    742e:	2200      	movs	r2, #0
    7430:	4b39      	ldr	r3, [pc, #228]	; (7518 <_oscctrl_init_referenced_generators+0x124>)
    7432:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7436:	461a      	mov	r2, r3
    7438:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    743c:	f013 0f04 	tst.w	r3, #4
    7440:	d1fa      	bne.n	7438 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7442:	2202      	movs	r2, #2
    7444:	4b34      	ldr	r3, [pc, #208]	; (7518 <_oscctrl_init_referenced_generators+0x124>)
    7446:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7448:	461a      	mov	r2, r3
    744a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    744e:	f013 0f02 	tst.w	r3, #2
    7452:	d1fa      	bne.n	744a <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    7454:	4b30      	ldr	r3, [pc, #192]	; (7518 <_oscctrl_init_referenced_generators+0x124>)
    7456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    7458:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    745a:	461a      	mov	r2, r3
    745c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    7460:	f013 0f08 	tst.w	r3, #8
    7464:	d1fa      	bne.n	745c <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    7466:	2288      	movs	r2, #136	; 0x88
    7468:	4b2b      	ldr	r3, [pc, #172]	; (7518 <_oscctrl_init_referenced_generators+0x124>)
    746a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    746e:	461a      	mov	r2, r3
    7470:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7474:	f013 0f04 	tst.w	r3, #4
    7478:	d1fa      	bne.n	7470 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    747a:	2242      	movs	r2, #66	; 0x42
    747c:	4b25      	ldr	r3, [pc, #148]	; (7514 <_oscctrl_init_referenced_generators+0x120>)
    747e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    7482:	2227      	movs	r2, #39	; 0x27
    7484:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    7488:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    748a:	461a      	mov	r2, r3
    748c:	6d13      	ldr	r3, [r2, #80]	; 0x50
    748e:	f013 0f06 	tst.w	r3, #6
    7492:	d1fb      	bne.n	748c <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    7494:	4b20      	ldr	r3, [pc, #128]	; (7518 <_oscctrl_init_referenced_generators+0x124>)
    7496:	f44f 6200 	mov.w	r2, #2048	; 0x800
    749a:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    749c:	2202      	movs	r2, #2
    749e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    74a2:	461a      	mov	r2, r3
    74a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
    74a6:	f013 0f02 	tst.w	r3, #2
    74aa:	d1fb      	bne.n	74a4 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    74ac:	4b1a      	ldr	r3, [pc, #104]	; (7518 <_oscctrl_init_referenced_generators+0x124>)
    74ae:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    74b2:	f013 0f01 	tst.w	r3, #1
    74b6:	d026      	beq.n	7506 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    74b8:	4a17      	ldr	r2, [pc, #92]	; (7518 <_oscctrl_init_referenced_generators+0x124>)
    74ba:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    74bc:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    74c0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    74c4:	d1f9      	bne.n	74ba <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    74c6:	4b14      	ldr	r3, [pc, #80]	; (7518 <_oscctrl_init_referenced_generators+0x124>)
    74c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    74ca:	f012 0f01 	tst.w	r2, #1
    74ce:	d103      	bne.n	74d8 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    74d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    74d2:	f012 0f02 	tst.w	r2, #2
    74d6:	d0f7      	beq.n	74c8 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    74d8:	4a0e      	ldr	r2, [pc, #56]	; (7514 <_oscctrl_init_referenced_generators+0x120>)
    74da:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    74dc:	2b00      	cmp	r3, #0
    74de:	d1fc      	bne.n	74da <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    74e0:	4a0c      	ldr	r2, [pc, #48]	; (7514 <_oscctrl_init_referenced_generators+0x120>)
    74e2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    74e4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    74e8:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    74ec:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    74ee:	4611      	mov	r1, r2
    74f0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    74f4:	684b      	ldr	r3, [r1, #4]
    74f6:	4213      	tst	r3, r2
    74f8:	d1fc      	bne.n	74f4 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    74fa:	4a06      	ldr	r2, [pc, #24]	; (7514 <_oscctrl_init_referenced_generators+0x120>)
    74fc:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    74fe:	f013 0f04 	tst.w	r3, #4
    7502:	d1fb      	bne.n	74fc <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    7504:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    7506:	4a04      	ldr	r2, [pc, #16]	; (7518 <_oscctrl_init_referenced_generators+0x124>)
    7508:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    750a:	f413 7f80 	tst.w	r3, #256	; 0x100
    750e:	d0fb      	beq.n	7508 <_oscctrl_init_referenced_generators+0x114>
    7510:	e7d9      	b.n	74c6 <_oscctrl_init_referenced_generators+0xd2>
    7512:	bf00      	nop
    7514:	40001c00 	.word	0x40001c00
    7518:	40001000 	.word	0x40001000
    751c:	04010000 	.word	0x04010000

00007520 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    7520:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    7522:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    7524:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7526:	4903      	ldr	r1, [pc, #12]	; (7534 <_qspi_dma_rx_complete+0x14>)
    7528:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    752a:	685b      	ldr	r3, [r3, #4]
    752c:	b103      	cbz	r3, 7530 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    752e:	4798      	blx	r3
    7530:	bd08      	pop	{r3, pc}
    7532:	bf00      	nop
    7534:	01000002 	.word	0x01000002

00007538 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    7538:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    753a:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    753c:	681a      	ldr	r2, [r3, #0]
    753e:	4903      	ldr	r1, [pc, #12]	; (754c <_qspi_dma_tx_complete+0x14>)
    7540:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    7542:	685b      	ldr	r3, [r3, #4]
    7544:	b103      	cbz	r3, 7548 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    7546:	4798      	blx	r3
    7548:	bd08      	pop	{r3, pc}
    754a:	bf00      	nop
    754c:	01000002 	.word	0x01000002

00007550 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    7550:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    7552:	6883      	ldr	r3, [r0, #8]
    7554:	689b      	ldr	r3, [r3, #8]
    7556:	b103      	cbz	r3, 755a <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    7558:	4798      	blx	r3
    755a:	bd08      	pop	{r3, pc}

0000755c <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    755e:	4604      	mov	r4, r0
	ASSERT(dev && hw);
	dev->prvt = hw;
    7560:	4605      	mov	r5, r0
    7562:	f845 1b0c 	str.w	r1, [r5], #12
    7566:	2301      	movs	r3, #1
    7568:	600b      	str	r3, [r1, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    756a:	4b0e      	ldr	r3, [pc, #56]	; (75a4 <_qspi_dma_init+0x48>)
    756c:	604b      	str	r3, [r1, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    756e:	4b0e      	ldr	r3, [pc, #56]	; (75a8 <_qspi_dma_init+0x4c>)
    7570:	608b      	str	r3, [r1, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    7572:	211f      	movs	r1, #31
    7574:	4628      	mov	r0, r5
    7576:	4f0d      	ldr	r7, [pc, #52]	; (75ac <_qspi_dma_init+0x50>)
    7578:	47b8      	blx	r7
	dev->resource->back                 = dev;
    757a:	68e3      	ldr	r3, [r4, #12]
    757c:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    757e:	68e3      	ldr	r3, [r4, #12]
    7580:	4a0b      	ldr	r2, [pc, #44]	; (75b0 <_qspi_dma_init+0x54>)
    7582:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    7584:	68e3      	ldr	r3, [r4, #12]
    7586:	4e0b      	ldr	r6, [pc, #44]	; (75b4 <_qspi_dma_init+0x58>)
    7588:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    758a:	211e      	movs	r1, #30
    758c:	4628      	mov	r0, r5
    758e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7590:	68e3      	ldr	r3, [r4, #12]
    7592:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    7594:	68e3      	ldr	r3, [r4, #12]
    7596:	4a08      	ldr	r2, [pc, #32]	; (75b8 <_qspi_dma_init+0x5c>)
    7598:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    759a:	68e3      	ldr	r3, [r4, #12]
    759c:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
}
    759e:	2000      	movs	r0, #0
    75a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75a2:	bf00      	nop
    75a4:	06000011 	.word	0x06000011
    75a8:	00243b00 	.word	0x00243b00
    75ac:	00007205 	.word	0x00007205
    75b0:	00007521 	.word	0x00007521
    75b4:	00007551 	.word	0x00007551
    75b8:	00007539 	.word	0x00007539

000075bc <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    75bc:	b500      	push	{lr}
    75be:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    75c0:	4b0d      	ldr	r3, [pc, #52]	; (75f8 <RAMECC_Handler+0x3c>)
    75c2:	789b      	ldrb	r3, [r3, #2]
    75c4:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    75c6:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    75c8:	9b01      	ldr	r3, [sp, #4]
    75ca:	f013 0f02 	tst.w	r3, #2
    75ce:	d006      	beq.n	75de <RAMECC_Handler+0x22>
    75d0:	4b0a      	ldr	r3, [pc, #40]	; (75fc <RAMECC_Handler+0x40>)
    75d2:	681b      	ldr	r3, [r3, #0]
    75d4:	b11b      	cbz	r3, 75de <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    75d6:	4a08      	ldr	r2, [pc, #32]	; (75f8 <RAMECC_Handler+0x3c>)
    75d8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    75da:	4798      	blx	r3
    75dc:	e009      	b.n	75f2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    75de:	9b01      	ldr	r3, [sp, #4]
    75e0:	f013 0f01 	tst.w	r3, #1
    75e4:	d005      	beq.n	75f2 <RAMECC_Handler+0x36>
    75e6:	4b05      	ldr	r3, [pc, #20]	; (75fc <RAMECC_Handler+0x40>)
    75e8:	685b      	ldr	r3, [r3, #4]
    75ea:	b113      	cbz	r3, 75f2 <RAMECC_Handler+0x36>
    75ec:	4a02      	ldr	r2, [pc, #8]	; (75f8 <RAMECC_Handler+0x3c>)
    75ee:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    75f0:	4798      	blx	r3
	} else {
		return;
	}
}
    75f2:	b003      	add	sp, #12
    75f4:	f85d fb04 	ldr.w	pc, [sp], #4
    75f8:	41020000 	.word	0x41020000
    75fc:	20007690 	.word	0x20007690

00007600 <_rtc_timer_init>:
 */
int32_t _rtc_timer_init(struct _timer_device *const dev, void *const hw)
{
	ASSERT(dev);

	dev->hw = hw;
    7600:	60c1      	str	r1, [r0, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7602:	2301      	movs	r3, #1
    7604:	800b      	strh	r3, [r1, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7606:	f248 0203 	movw	r2, #32771	; 0x8003
    760a:	690b      	ldr	r3, [r1, #16]
    760c:	4213      	tst	r3, r2
    760e:	d1fc      	bne.n	760a <_rtc_timer_init+0xa>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    7610:	68c3      	ldr	r3, [r0, #12]
    7612:	691a      	ldr	r2, [r3, #16]
    7614:	f012 0f01 	tst.w	r2, #1
    7618:	d1fb      	bne.n	7612 <_rtc_timer_init+0x12>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    761a:	f248 0280 	movw	r2, #32896	; 0x8080
    761e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7620:	f248 0103 	movw	r1, #32771	; 0x8003
    7624:	691a      	ldr	r2, [r3, #16]
    7626:	420a      	tst	r2, r1
    7628:	d1fc      	bne.n	7624 <_rtc_timer_init+0x24>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    762a:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    762c:	2301      	movs	r3, #1
    762e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7630:	6913      	ldr	r3, [r2, #16]
    7632:	f013 0f60 	tst.w	r3, #96	; 0x60
    7636:	d1fb      	bne.n	7630 <_rtc_timer_init+0x30>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    7638:	68c3      	ldr	r3, [r0, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    763a:	f44f 7280 	mov.w	r2, #256	; 0x100
    763e:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    7640:	4b01      	ldr	r3, [pc, #4]	; (7648 <_rtc_timer_init+0x48>)
    7642:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    7644:	2000      	movs	r0, #0
    7646:	4770      	bx	lr
    7648:	20000478 	.word	0x20000478

0000764c <_rtc_timer_deinit>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    764c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7650:	4b07      	ldr	r3, [pc, #28]	; (7670 <_rtc_timer_deinit+0x24>)
    7652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7656:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    765a:	f3bf 8f6f 	isb	sy
{
	ASSERT(dev && dev->hw);

	NVIC_DisableIRQ(RTC_IRQn);

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    765e:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7660:	2301      	movs	r3, #1
    7662:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7664:	f248 0103 	movw	r1, #32771	; 0x8003
    7668:	6913      	ldr	r3, [r2, #16]
    766a:	420b      	tst	r3, r1
    766c:	d1fc      	bne.n	7668 <_rtc_timer_deinit+0x1c>
}
    766e:	4770      	bx	lr
    7670:	e000e100 	.word	0xe000e100

00007674 <_rtc_timer_start>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7674:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7678:	4b0c      	ldr	r3, [pc, #48]	; (76ac <_rtc_timer_start+0x38>)
    767a:	601a      	str	r2, [r3, #0]
void _rtc_timer_start(struct _timer_device *const dev)
{
	ASSERT(dev && dev->hw);

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    767c:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    767e:	2300      	movs	r3, #0
    7680:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7682:	6913      	ldr	r3, [r2, #16]
    7684:	f013 0f08 	tst.w	r3, #8
    7688:	d1fb      	bne.n	7682 <_rtc_timer_start+0xe>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    768a:	68c3      	ldr	r3, [r0, #12]
    768c:	691a      	ldr	r2, [r3, #16]
    768e:	f012 0f08 	tst.w	r2, #8
    7692:	d1fb      	bne.n	768c <_rtc_timer_start+0x18>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    7694:	881a      	ldrh	r2, [r3, #0]
    7696:	b292      	uxth	r2, r2
    7698:	f042 0202 	orr.w	r2, r2, #2
    769c:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    769e:	f248 0103 	movw	r1, #32771	; 0x8003
    76a2:	691a      	ldr	r2, [r3, #16]
    76a4:	420a      	tst	r2, r1
    76a6:	d1fc      	bne.n	76a2 <_rtc_timer_start+0x2e>
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
}
    76a8:	4770      	bx	lr
    76aa:	bf00      	nop
    76ac:	e000e100 	.word	0xe000e100

000076b0 <_rtc_timer_stop>:
 */
void _rtc_timer_stop(struct _timer_device *const dev)
{
	ASSERT(dev && dev->hw);

	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    76b0:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    76b2:	8813      	ldrh	r3, [r2, #0]
    76b4:	f023 0302 	bic.w	r3, r3, #2
    76b8:	041b      	lsls	r3, r3, #16
    76ba:	0c1b      	lsrs	r3, r3, #16
    76bc:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    76be:	f248 0103 	movw	r1, #32771	; 0x8003
    76c2:	6913      	ldr	r3, [r2, #16]
    76c4:	420b      	tst	r3, r1
    76c6:	d1fc      	bne.n	76c2 <_rtc_timer_stop+0x12>
}
    76c8:	4770      	bx	lr

000076ca <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    76ca:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    76cc:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    76ce:	6913      	ldr	r3, [r2, #16]
    76d0:	f013 0f60 	tst.w	r3, #96	; 0x60
    76d4:	d1fb      	bne.n	76ce <_rtc_timer_set_period+0x4>
}
    76d6:	4770      	bx	lr

000076d8 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    76d8:	68c2      	ldr	r2, [r0, #12]
    76da:	6913      	ldr	r3, [r2, #16]
    76dc:	f013 0f60 	tst.w	r3, #96	; 0x60
    76e0:	d1fb      	bne.n	76da <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    76e2:	6a10      	ldr	r0, [r2, #32]
}
    76e4:	4770      	bx	lr

000076e6 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    76e6:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    76e8:	f248 0103 	movw	r1, #32771	; 0x8003
    76ec:	6913      	ldr	r3, [r2, #16]
    76ee:	420b      	tst	r3, r1
    76f0:	d1fc      	bne.n	76ec <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    76f2:	8810      	ldrh	r0, [r2, #0]
}
    76f4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    76f8:	4770      	bx	lr

000076fa <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    76fa:	4770      	bx	lr

000076fc <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    76fc:	4800      	ldr	r0, [pc, #0]	; (7700 <_rtc_get_timer+0x4>)
    76fe:	4770      	bx	lr
    7700:	20000004 	.word	0x20000004

00007704 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    7704:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    7706:	4b08      	ldr	r3, [pc, #32]	; (7728 <RTC_Handler+0x24>)
    7708:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    770a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    770c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    770e:	f413 7f80 	tst.w	r3, #256	; 0x100
    7712:	d007      	beq.n	7724 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    7714:	6823      	ldr	r3, [r4, #0]
    7716:	b10b      	cbz	r3, 771c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    7718:	4620      	mov	r0, r4
    771a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    771c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    771e:	f44f 7280 	mov.w	r2, #256	; 0x100
    7722:	819a      	strh	r2, [r3, #12]
    7724:	bd10      	pop	{r4, pc}
    7726:	bf00      	nop
    7728:	20000478 	.word	0x20000478

0000772c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    772c:	b470      	push	{r4, r5, r6}
    772e:	b089      	sub	sp, #36	; 0x24
    7730:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    7732:	466c      	mov	r4, sp
    7734:	4d0d      	ldr	r5, [pc, #52]	; (776c <_sercom_get_hardware_index+0x40>)
    7736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    773a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    773e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    7742:	9b00      	ldr	r3, [sp, #0]
    7744:	42b3      	cmp	r3, r6
    7746:	d00d      	beq.n	7764 <_sercom_get_hardware_index+0x38>
    7748:	4631      	mov	r1, r6
    774a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    774c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    774e:	f853 2b04 	ldr.w	r2, [r3], #4
    7752:	428a      	cmp	r2, r1
    7754:	d007      	beq.n	7766 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7756:	3001      	adds	r0, #1
    7758:	2808      	cmp	r0, #8
    775a:	d1f8      	bne.n	774e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    775c:	2000      	movs	r0, #0
}
    775e:	b009      	add	sp, #36	; 0x24
    7760:	bc70      	pop	{r4, r5, r6}
    7762:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7764:	2000      	movs	r0, #0
			return i;
    7766:	b2c0      	uxtb	r0, r0
    7768:	e7f9      	b.n	775e <_sercom_get_hardware_index+0x32>
    776a:	bf00      	nop
    776c:	0000c808 	.word	0x0000c808

00007770 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    7770:	b510      	push	{r4, lr}
	void *hw = device->hw;
    7772:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    7774:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    7776:	f013 0f01 	tst.w	r3, #1
    777a:	d003      	beq.n	7784 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    777c:	7da3      	ldrb	r3, [r4, #22]
    777e:	f013 0f01 	tst.w	r3, #1
    7782:	d112      	bne.n	77aa <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7784:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    7786:	f013 0f02 	tst.w	r3, #2
    778a:	d003      	beq.n	7794 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    778c:	7da3      	ldrb	r3, [r4, #22]
    778e:	f013 0f02 	tst.w	r3, #2
    7792:	d10f      	bne.n	77b4 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    7794:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    7796:	f013 0f04 	tst.w	r3, #4
    779a:	d015      	beq.n	77c8 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    779c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    779e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    77a2:	b163      	cbz	r3, 77be <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    77a4:	23ff      	movs	r3, #255	; 0xff
    77a6:	8363      	strh	r3, [r4, #26]
    77a8:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    77aa:	2301      	movs	r3, #1
    77ac:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    77ae:	6803      	ldr	r3, [r0, #0]
    77b0:	4798      	blx	r3
    77b2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    77b4:	2302      	movs	r3, #2
    77b6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    77b8:	6883      	ldr	r3, [r0, #8]
    77ba:	4798      	blx	r3
    77bc:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    77be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    77c0:	6843      	ldr	r3, [r0, #4]
    77c2:	b2c9      	uxtb	r1, r1
    77c4:	4798      	blx	r3
    77c6:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    77c8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    77ca:	09db      	lsrs	r3, r3, #7
    77cc:	d100      	bne.n	77d0 <_sercom_usart_interrupt_handler+0x60>
    77ce:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    77d0:	2380      	movs	r3, #128	; 0x80
    77d2:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    77d4:	68c3      	ldr	r3, [r0, #12]
    77d6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    77d8:	8b63      	ldrh	r3, [r4, #26]
    77da:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    77dc:	8363      	strh	r3, [r4, #26]
    77de:	e7f6      	b.n	77ce <_sercom_usart_interrupt_handler+0x5e>

000077e0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    77e0:	4b11      	ldr	r3, [pc, #68]	; (7828 <_sercom_init_irq_param+0x48>)
    77e2:	4298      	cmp	r0, r3
    77e4:	d011      	beq.n	780a <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    77e6:	4b11      	ldr	r3, [pc, #68]	; (782c <_sercom_init_irq_param+0x4c>)
    77e8:	4298      	cmp	r0, r3
    77ea:	d011      	beq.n	7810 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    77ec:	4b10      	ldr	r3, [pc, #64]	; (7830 <_sercom_init_irq_param+0x50>)
    77ee:	4298      	cmp	r0, r3
    77f0:	d011      	beq.n	7816 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    77f2:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    77f6:	d011      	beq.n	781c <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    77f8:	4b0e      	ldr	r3, [pc, #56]	; (7834 <_sercom_init_irq_param+0x54>)
    77fa:	4298      	cmp	r0, r3
    77fc:	d011      	beq.n	7822 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    77fe:	4b0e      	ldr	r3, [pc, #56]	; (7838 <_sercom_init_irq_param+0x58>)
    7800:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    7802:	bf04      	itt	eq
    7804:	4b0d      	ldreq	r3, [pc, #52]	; (783c <_sercom_init_irq_param+0x5c>)
    7806:	6159      	streq	r1, [r3, #20]
    7808:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    780a:	4b0c      	ldr	r3, [pc, #48]	; (783c <_sercom_init_irq_param+0x5c>)
    780c:	6019      	str	r1, [r3, #0]
    780e:	e7f0      	b.n	77f2 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    7810:	4b0a      	ldr	r3, [pc, #40]	; (783c <_sercom_init_irq_param+0x5c>)
    7812:	6059      	str	r1, [r3, #4]
    7814:	e7f0      	b.n	77f8 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    7816:	4b09      	ldr	r3, [pc, #36]	; (783c <_sercom_init_irq_param+0x5c>)
    7818:	6099      	str	r1, [r3, #8]
    781a:	e7f0      	b.n	77fe <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    781c:	4b07      	ldr	r3, [pc, #28]	; (783c <_sercom_init_irq_param+0x5c>)
    781e:	60d9      	str	r1, [r3, #12]
    7820:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    7822:	4b06      	ldr	r3, [pc, #24]	; (783c <_sercom_init_irq_param+0x5c>)
    7824:	6119      	str	r1, [r3, #16]
    7826:	4770      	bx	lr
    7828:	40003000 	.word	0x40003000
    782c:	40003400 	.word	0x40003400
    7830:	41014000 	.word	0x41014000
    7834:	43000400 	.word	0x43000400
    7838:	43000800 	.word	0x43000800
    783c:	2000047c 	.word	0x2000047c

00007840 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    7840:	b510      	push	{r4, lr}
    7842:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7844:	4b44      	ldr	r3, [pc, #272]	; (7958 <_usart_init+0x118>)
    7846:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    7848:	2800      	cmp	r0, #0
    784a:	d063      	beq.n	7914 <_usart_init+0xd4>
    784c:	2801      	cmp	r0, #1
    784e:	d05b      	beq.n	7908 <_usart_init+0xc8>
    7850:	2802      	cmp	r0, #2
    7852:	d05b      	beq.n	790c <_usart_init+0xcc>
    7854:	2804      	cmp	r0, #4
    7856:	d05b      	beq.n	7910 <_usart_init+0xd0>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    7858:	2806      	cmp	r0, #6
    785a:	bf14      	ite	ne
    785c:	2100      	movne	r1, #0
    785e:	2104      	moveq	r1, #4
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    7860:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    7862:	f013 0f01 	tst.w	r3, #1
    7866:	d122      	bne.n	78ae <_usart_init+0x6e>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    7868:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    786c:	4a3b      	ldr	r2, [pc, #236]	; (795c <_usart_init+0x11c>)
    786e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7874:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7878:	69e3      	ldr	r3, [r4, #28]
    787a:	f013 0f03 	tst.w	r3, #3
    787e:	d1fb      	bne.n	7878 <_usart_init+0x38>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    7880:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    7882:	f013 0f02 	tst.w	r3, #2
    7886:	d00b      	beq.n	78a0 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7888:	6823      	ldr	r3, [r4, #0]
    788a:	f023 0302 	bic.w	r3, r3, #2
    788e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7890:	69e3      	ldr	r3, [r4, #28]
    7892:	f013 0f03 	tst.w	r3, #3
    7896:	d1fb      	bne.n	7890 <_usart_init+0x50>
    7898:	69e3      	ldr	r3, [r4, #28]
    789a:	f013 0f02 	tst.w	r3, #2
    789e:	d1fb      	bne.n	7898 <_usart_init+0x58>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    78a0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    78a4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    78a6:	69e3      	ldr	r3, [r4, #28]
    78a8:	f013 0f03 	tst.w	r3, #3
    78ac:	d1fb      	bne.n	78a6 <_usart_init+0x66>
    78ae:	69e3      	ldr	r3, [r4, #28]
    78b0:	f013 0f01 	tst.w	r3, #1
    78b4:	d1fb      	bne.n	78ae <_usart_init+0x6e>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    78b6:	460a      	mov	r2, r1
    78b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    78bc:	4b27      	ldr	r3, [pc, #156]	; (795c <_usart_init+0x11c>)
    78be:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    78c2:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    78c4:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    78c6:	69e3      	ldr	r3, [r4, #28]
    78c8:	f013 0f03 	tst.w	r3, #3
    78cc:	d1fb      	bne.n	78c6 <_usart_init+0x86>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    78ce:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    78d2:	4922      	ldr	r1, [pc, #136]	; (795c <_usart_init+0x11c>)
    78d4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    78d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    78da:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    78dc:	69e3      	ldr	r3, [r4, #28]
    78de:	f013 0f1f 	tst.w	r3, #31
    78e2:	d1fb      	bne.n	78dc <_usart_init+0x9c>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    78e4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    78e8:	491c      	ldr	r1, [pc, #112]	; (795c <_usart_init+0x11c>)
    78ea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    78ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    78f0:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    78f2:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    78f6:	d10f      	bne.n	7918 <_usart_init+0xd8>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    78f8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    78fc:	4917      	ldr	r1, [pc, #92]	; (795c <_usart_init+0x11c>)
    78fe:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7902:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    7904:	81a3      	strh	r3, [r4, #12]
    7906:	e016      	b.n	7936 <_usart_init+0xf6>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    7908:	2101      	movs	r1, #1
    790a:	e7a9      	b.n	7860 <_usart_init+0x20>
    790c:	2102      	movs	r1, #2
    790e:	e7a7      	b.n	7860 <_usart_init+0x20>
    7910:	2103      	movs	r1, #3
    7912:	e7a5      	b.n	7860 <_usart_init+0x20>
    7914:	2100      	movs	r1, #0
    7916:	e7a3      	b.n	7860 <_usart_init+0x20>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    7918:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    791c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7920:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    7922:	89a1      	ldrh	r1, [r4, #12]
    7924:	f360 010c 	bfi	r1, r0, #0, #13
    7928:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    792a:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    792e:	89a3      	ldrh	r3, [r4, #12]
    7930:	f361 334f 	bfi	r3, r1, #13, #3
    7934:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    7936:	4b09      	ldr	r3, [pc, #36]	; (795c <_usart_init+0x11c>)
    7938:	0051      	lsls	r1, r2, #1
    793a:	1888      	adds	r0, r1, r2
    793c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7940:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    7944:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    7946:	440a      	add	r2, r1
    7948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    794c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    7950:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    7954:	2000      	movs	r0, #0
    7956:	bd10      	pop	{r4, pc}
    7958:	0000772d 	.word	0x0000772d
    795c:	0000c808 	.word	0x0000c808

00007960 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    7960:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7962:	4b03      	ldr	r3, [pc, #12]	; (7970 <_get_i2cm_index+0x10>)
    7964:	4798      	blx	r3
		}
	}

	ASSERT(false);
	return -1;
}
    7966:	3805      	subs	r0, #5
    7968:	bf18      	it	ne
    796a:	f04f 30ff 	movne.w	r0, #4294967295
    796e:	bd08      	pop	{r3, pc}
    7970:	0000772d 	.word	0x0000772d

00007974 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    7974:	b510      	push	{r4, lr}
	void *   hw    = i2c_dev->hw;
    7976:	6903      	ldr	r3, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7978:	7e19      	ldrb	r1, [r3, #24]
    797a:	b2c9      	uxtb	r1, r1
	int32_t  ret   = I2C_OK;

	ASSERT(i2c_dev);
	ASSERT(i2c_dev->hw);

	while (!(flags & ERROR_FLAG)) {
    797c:	f011 0f80 	tst.w	r1, #128	; 0x80
    7980:	f040 80eb 	bne.w	7b5a <_sercom_i2c_m_irq_handler+0x1e6>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7984:	681c      	ldr	r4, [r3, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7986:	69da      	ldr	r2, [r3, #28]
    7988:	f012 0f04 	tst.w	r2, #4
    798c:	d1fb      	bne.n	7986 <_sercom_i2c_m_irq_handler+0x12>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    798e:	8b5a      	ldrh	r2, [r3, #26]
    7990:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    7992:	f011 0f01 	tst.w	r1, #1
    7996:	f000 808b 	beq.w	7ab0 <_sercom_i2c_m_irq_handler+0x13c>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    799a:	f012 0f02 	tst.w	r2, #2
    799e:	d01f      	beq.n	79e0 <_sercom_i2c_m_irq_handler+0x6c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    79a0:	2101      	movs	r1, #1
    79a2:	7619      	strb	r1, [r3, #24]
			msg->flags |= I2C_M_FAIL;
    79a4:	8843      	ldrh	r3, [r0, #2]
    79a6:	b29b      	uxth	r3, r3
    79a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    79ac:	8043      	strh	r3, [r0, #2]
			msg->flags &= ~I2C_M_BUSY;
    79ae:	8843      	ldrh	r3, [r0, #2]
    79b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    79b4:	041b      	lsls	r3, r3, #16
    79b6:	0c1b      	lsrs	r3, r3, #16
    79b8:	8043      	strh	r3, [r0, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    79ba:	400a      	ands	r2, r1
			return I2C_ERR_BAD_ADDRESS;
    79bc:	2a00      	cmp	r2, #0
    79be:	bf14      	ite	ne
    79c0:	f06f 0104 	mvnne.w	r1, #4
    79c4:	f06f 0103 	mvneq.w	r1, #3
		}

		return;
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    79c8:	8843      	ldrh	r3, [r0, #2]
    79ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    79ce:	041b      	lsls	r3, r3, #16
    79d0:	0c1b      	lsrs	r3, r3, #16
    79d2:	8043      	strh	r3, [r0, #2]
	if (i2c_dev->cb.error) {
    79d4:	6943      	ldr	r3, [r0, #20]
    79d6:	2b00      	cmp	r3, #0
    79d8:	f000 80be 	beq.w	7b58 <_sercom_i2c_m_irq_handler+0x1e4>
		if (ret != I2C_OK) {
			i2c_dev->cb.error(i2c_dev, ret);
    79dc:	4798      	blx	r3
    79de:	bd10      	pop	{r4, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    79e0:	f012 0f04 	tst.w	r2, #4
    79e4:	d122      	bne.n	7a2c <_sercom_i2c_m_irq_handler+0xb8>
			if (msg->flags & I2C_M_TEN) {
    79e6:	8842      	ldrh	r2, [r0, #2]
    79e8:	f412 6f80 	tst.w	r2, #1024	; 0x400
    79ec:	d03c      	beq.n	7a68 <_sercom_i2c_m_irq_handler+0xf4>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    79ee:	8802      	ldrh	r2, [r0, #0]
    79f0:	09d2      	lsrs	r2, r2, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    79f2:	f002 0406 	and.w	r4, r2, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    79f6:	69da      	ldr	r2, [r3, #28]
    79f8:	f012 0f04 	tst.w	r2, #4
    79fc:	d1fb      	bne.n	79f6 <_sercom_i2c_m_irq_handler+0x82>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    79fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7a00:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    7a04:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
    7a08:	4322      	orrs	r2, r4
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7a0a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7a0c:	69da      	ldr	r2, [r3, #28]
    7a0e:	f012 0f04 	tst.w	r2, #4
    7a12:	d1fb      	bne.n	7a0c <_sercom_i2c_m_irq_handler+0x98>
				msg->flags &= ~I2C_M_TEN;
    7a14:	8843      	ldrh	r3, [r0, #2]
    7a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    7a1a:	041b      	lsls	r3, r3, #16
    7a1c:	0c1b      	lsrs	r3, r3, #16
    7a1e:	8043      	strh	r3, [r0, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    7a20:	6983      	ldr	r3, [r0, #24]
    7a22:	2b00      	cmp	r3, #0
    7a24:	f000 8084 	beq.w	7b30 <_sercom_i2c_m_irq_handler+0x1bc>
			i2c_dev->cb.tx_complete(i2c_dev);
    7a28:	4798      	blx	r3
    7a2a:	bd10      	pop	{r4, pc}
				if (msg->len > 0) {
    7a2c:	6842      	ldr	r2, [r0, #4]
    7a2e:	2a00      	cmp	r2, #0
    7a30:	dd04      	ble.n	7a3c <_sercom_i2c_m_irq_handler+0xc8>
					msg->flags |= I2C_M_FAIL;
    7a32:	8842      	ldrh	r2, [r0, #2]
    7a34:	b292      	uxth	r2, r2
    7a36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    7a3a:	8042      	strh	r2, [r0, #2]
				if (msg->flags & I2C_M_STOP) {
    7a3c:	8842      	ldrh	r2, [r0, #2]
    7a3e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    7a42:	d108      	bne.n	7a56 <_sercom_i2c_m_irq_handler+0xe2>
				msg->flags &= ~I2C_M_BUSY;
    7a44:	8843      	ldrh	r3, [r0, #2]
    7a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7a4a:	041b      	lsls	r3, r3, #16
    7a4c:	0c1b      	lsrs	r3, r3, #16
    7a4e:	8043      	strh	r3, [r0, #2]
				return I2C_NACK;
    7a50:	f06f 0101 	mvn.w	r1, #1
    7a54:	e7b8      	b.n	79c8 <_sercom_i2c_m_irq_handler+0x54>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7a56:	685a      	ldr	r2, [r3, #4]
    7a58:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    7a5c:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7a5e:	69da      	ldr	r2, [r3, #28]
    7a60:	f012 0f04 	tst.w	r2, #4
    7a64:	d1fb      	bne.n	7a5e <_sercom_i2c_m_irq_handler+0xea>
    7a66:	e7ed      	b.n	7a44 <_sercom_i2c_m_irq_handler+0xd0>
			if (msg->len == 0) {
    7a68:	6842      	ldr	r2, [r0, #4]
    7a6a:	b99a      	cbnz	r2, 7a94 <_sercom_i2c_m_irq_handler+0x120>
				if (msg->flags & I2C_M_STOP) {
    7a6c:	8842      	ldrh	r2, [r0, #2]
    7a6e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    7a72:	d106      	bne.n	7a82 <_sercom_i2c_m_irq_handler+0x10e>
				msg->flags &= ~I2C_M_BUSY;
    7a74:	8843      	ldrh	r3, [r0, #2]
    7a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7a7a:	041b      	lsls	r3, r3, #16
    7a7c:	0c1b      	lsrs	r3, r3, #16
    7a7e:	8043      	strh	r3, [r0, #2]
    7a80:	e7ce      	b.n	7a20 <_sercom_i2c_m_irq_handler+0xac>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7a82:	685a      	ldr	r2, [r3, #4]
    7a84:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    7a88:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7a8a:	69da      	ldr	r2, [r3, #28]
    7a8c:	f012 0f04 	tst.w	r2, #4
    7a90:	d1fb      	bne.n	7a8a <_sercom_i2c_m_irq_handler+0x116>
    7a92:	e7ef      	b.n	7a74 <_sercom_i2c_m_irq_handler+0x100>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    7a94:	6882      	ldr	r2, [r0, #8]
    7a96:	7812      	ldrb	r2, [r2, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7a98:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7a9a:	69da      	ldr	r2, [r3, #28]
    7a9c:	f012 0f04 	tst.w	r2, #4
    7aa0:	d1fb      	bne.n	7a9a <_sercom_i2c_m_irq_handler+0x126>
				msg->buffer++;
    7aa2:	6883      	ldr	r3, [r0, #8]
    7aa4:	3301      	adds	r3, #1
    7aa6:	6083      	str	r3, [r0, #8]
				msg->len--;
    7aa8:	6843      	ldr	r3, [r0, #4]
    7aaa:	3b01      	subs	r3, #1
    7aac:	6043      	str	r3, [r0, #4]
    7aae:	e7b7      	b.n	7a20 <_sercom_i2c_m_irq_handler+0xac>
	} else if (flags & SB_FLAG) {
    7ab0:	f011 0f02 	tst.w	r1, #2
    7ab4:	d03f      	beq.n	7b36 <_sercom_i2c_m_irq_handler+0x1c2>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    7ab6:	6841      	ldr	r1, [r0, #4]
    7ab8:	2900      	cmp	r1, #0
    7aba:	d034      	beq.n	7b26 <_sercom_i2c_m_irq_handler+0x1b2>
    7abc:	f012 0f04 	tst.w	r2, #4
    7ac0:	d131      	bne.n	7b26 <_sercom_i2c_m_irq_handler+0x1b2>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    7ac2:	f3c4 64c0 	ubfx	r4, r4, #27, #1
			msg->len--;
    7ac6:	3901      	subs	r1, #1
    7ac8:	6041      	str	r1, [r0, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7aca:	2900      	cmp	r1, #0
    7acc:	d134      	bne.n	7b38 <_sercom_i2c_m_irq_handler+0x1c4>
    7ace:	2c00      	cmp	r4, #0
    7ad0:	d036      	beq.n	7b40 <_sercom_i2c_m_irq_handler+0x1cc>
				if (msg->flags & I2C_M_STOP) {
    7ad2:	8842      	ldrh	r2, [r0, #2]
    7ad4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    7ad8:	d114      	bne.n	7b04 <_sercom_i2c_m_irq_handler+0x190>
				msg->flags &= ~I2C_M_BUSY;
    7ada:	8842      	ldrh	r2, [r0, #2]
    7adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    7ae0:	0412      	lsls	r2, r2, #16
    7ae2:	0c12      	lsrs	r2, r2, #16
    7ae4:	8042      	strh	r2, [r0, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    7ae6:	6881      	ldr	r1, [r0, #8]
    7ae8:	1c4a      	adds	r2, r1, #1
    7aea:	6082      	str	r2, [r0, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7aec:	69da      	ldr	r2, [r3, #28]
    7aee:	f012 0f04 	tst.w	r2, #4
    7af2:	d1fb      	bne.n	7aec <_sercom_i2c_m_irq_handler+0x178>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7af6:	700a      	strb	r2, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7af8:	2202      	movs	r2, #2
    7afa:	761a      	strb	r2, [r3, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    7afc:	69c3      	ldr	r3, [r0, #28]
    7afe:	b1d3      	cbz	r3, 7b36 <_sercom_i2c_m_irq_handler+0x1c2>
			i2c_dev->cb.rx_complete(i2c_dev);
    7b00:	4798      	blx	r3
    7b02:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7b04:	685a      	ldr	r2, [r3, #4]
    7b06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    7b0a:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7b0c:	69da      	ldr	r2, [r3, #28]
    7b0e:	f012 0f04 	tst.w	r2, #4
    7b12:	d1fb      	bne.n	7b0c <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7b14:	685a      	ldr	r2, [r3, #4]
    7b16:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    7b1a:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7b1c:	69da      	ldr	r2, [r3, #28]
    7b1e:	f012 0f04 	tst.w	r2, #4
    7b22:	d1fb      	bne.n	7b1c <_sercom_i2c_m_irq_handler+0x1a8>
    7b24:	e7d9      	b.n	7ada <_sercom_i2c_m_irq_handler+0x166>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7b26:	2202      	movs	r2, #2
    7b28:	761a      	strb	r2, [r3, #24]
			return I2C_NACK;
    7b2a:	f06f 0101 	mvn.w	r1, #1
    7b2e:	e74b      	b.n	79c8 <_sercom_i2c_m_irq_handler+0x54>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    7b30:	f011 0f02 	tst.w	r1, #2
    7b34:	d1e2      	bne.n	7afc <_sercom_i2c_m_irq_handler+0x188>
    7b36:	bd10      	pop	{r4, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7b38:	2901      	cmp	r1, #1
    7b3a:	d1d4      	bne.n	7ae6 <_sercom_i2c_m_irq_handler+0x172>
    7b3c:	2c00      	cmp	r4, #0
    7b3e:	d0d2      	beq.n	7ae6 <_sercom_i2c_m_irq_handler+0x172>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7b40:	685a      	ldr	r2, [r3, #4]
    7b42:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    7b46:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7b48:	69da      	ldr	r2, [r3, #28]
    7b4a:	f012 0f04 	tst.w	r2, #4
    7b4e:	d1fb      	bne.n	7b48 <_sercom_i2c_m_irq_handler+0x1d4>
			if (msg->len == 0) {
    7b50:	6842      	ldr	r2, [r0, #4]
    7b52:	2a00      	cmp	r2, #0
    7b54:	d0bd      	beq.n	7ad2 <_sercom_i2c_m_irq_handler+0x15e>
    7b56:	e7c6      	b.n	7ae6 <_sercom_i2c_m_irq_handler+0x172>
    7b58:	bd10      	pop	{r4, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7b5a:	8843      	ldrh	r3, [r0, #2]
    7b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7b60:	041b      	lsls	r3, r3, #16
    7b62:	0c1b      	lsrs	r3, r3, #16
    7b64:	8043      	strh	r3, [r0, #2]
	if (i2c_dev->cb.error) {
    7b66:	6943      	ldr	r3, [r0, #20]
    7b68:	2b00      	cmp	r3, #0
    7b6a:	d0e4      	beq.n	7b36 <_sercom_i2c_m_irq_handler+0x1c2>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    7b6c:	f06f 0104 	mvn.w	r1, #4
    7b70:	4798      	blx	r3
    7b72:	bd10      	pop	{r4, pc}

00007b74 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    7b74:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    7b76:	4b03      	ldr	r3, [pc, #12]	; (7b84 <_sercom_get_irq_num+0x10>)
    7b78:	4798      	blx	r3
    7b7a:	0080      	lsls	r0, r0, #2
    7b7c:	302e      	adds	r0, #46	; 0x2e
}
    7b7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    7b82:	bd08      	pop	{r3, pc}
    7b84:	0000772d 	.word	0x0000772d

00007b88 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    7b88:	b538      	push	{r3, r4, r5, lr}
    7b8a:	4605      	mov	r5, r0
    7b8c:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    7b8e:	4608      	mov	r0, r1
    7b90:	4b34      	ldr	r3, [pc, #208]	; (7c64 <_i2c_m_sync_init_impl+0xdc>)
    7b92:	4798      	blx	r3
    7b94:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    7b96:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7b98:	f013 0f01 	tst.w	r3, #1
    7b9c:	d123      	bne.n	7be6 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7b9e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7ba2:	4a31      	ldr	r2, [pc, #196]	; (7c68 <_i2c_m_sync_init_impl+0xe0>)
    7ba4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7ba8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    7bac:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7bb0:	69e3      	ldr	r3, [r4, #28]
    7bb2:	f013 0f03 	tst.w	r3, #3
    7bb6:	d1fb      	bne.n	7bb0 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7bb8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    7bba:	f013 0f02 	tst.w	r3, #2
    7bbe:	d00b      	beq.n	7bd8 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7bc0:	6823      	ldr	r3, [r4, #0]
    7bc2:	f023 0302 	bic.w	r3, r3, #2
    7bc6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7bc8:	69e3      	ldr	r3, [r4, #28]
    7bca:	f013 0f03 	tst.w	r3, #3
    7bce:	d1fb      	bne.n	7bc8 <_i2c_m_sync_init_impl+0x40>
    7bd0:	69e3      	ldr	r3, [r4, #28]
    7bd2:	f013 0f02 	tst.w	r3, #2
    7bd6:	d1fb      	bne.n	7bd0 <_i2c_m_sync_init_impl+0x48>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    7bd8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7bdc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7bde:	69e3      	ldr	r3, [r4, #28]
    7be0:	f013 0f03 	tst.w	r3, #3
    7be4:	d1fb      	bne.n	7bde <_i2c_m_sync_init_impl+0x56>
    7be6:	69e3      	ldr	r3, [r4, #28]
    7be8:	f013 0f01 	tst.w	r3, #1
    7bec:	d1fb      	bne.n	7be6 <_i2c_m_sync_init_impl+0x5e>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    7bee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7bf2:	4a1d      	ldr	r2, [pc, #116]	; (7c68 <_i2c_m_sync_init_impl+0xe0>)
    7bf4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7bf8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7bfc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7bfe:	69e3      	ldr	r3, [r4, #28]
    7c00:	f013 0f03 	tst.w	r3, #3
    7c04:	d1fb      	bne.n	7bfe <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    7c06:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7c0a:	4917      	ldr	r1, [pc, #92]	; (7c68 <_i2c_m_sync_init_impl+0xe0>)
    7c0c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7c10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7c14:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7c16:	69e3      	ldr	r3, [r4, #28]
    7c18:	f013 0f04 	tst.w	r3, #4
    7c1c:	d1fb      	bne.n	7c16 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7c1e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7c22:	4911      	ldr	r1, [pc, #68]	; (7c68 <_i2c_m_sync_init_impl+0xe0>)
    7c24:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7c28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    7c2c:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    7c2e:	f3c2 6301 	ubfx	r3, r2, #24, #2
    7c32:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7c34:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    7c36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    7c3a:	2b01      	cmp	r3, #1
    7c3c:	bf94      	ite	ls
    7c3e:	2300      	movls	r3, #0
    7c40:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    7c42:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    7c46:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7c48:	69e3      	ldr	r3, [r4, #28]
    7c4a:	f013 0f04 	tst.w	r3, #4
    7c4e:	d1fb      	bne.n	7c48 <_i2c_m_sync_init_impl+0xc0>

	service->trise = _i2cms[i].trise;
    7c50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7c54:	4b04      	ldr	r3, [pc, #16]	; (7c68 <_i2c_m_sync_init_impl+0xe0>)
    7c56:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7c5a:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    7c5e:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    7c60:	2000      	movs	r0, #0
    7c62:	bd38      	pop	{r3, r4, r5, pc}
    7c64:	00007961 	.word	0x00007961
    7c68:	0000c808 	.word	0x0000c808

00007c6c <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7c6c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7c6e:	f013 0f01 	tst.w	r3, #1
    7c72:	d109      	bne.n	7c88 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7c74:	6803      	ldr	r3, [r0, #0]
    7c76:	f043 0302 	orr.w	r3, r3, #2
    7c7a:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7c7c:	69c3      	ldr	r3, [r0, #28]
    7c7e:	f013 0f03 	tst.w	r3, #3
    7c82:	d1fb      	bne.n	7c7c <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    7c84:	2000      	movs	r0, #0
    7c86:	4770      	bx	lr
		return ERR_BUSY;
    7c88:	f06f 0003 	mvn.w	r0, #3
}
    7c8c:	4770      	bx	lr

00007c8e <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    7c8e:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    7c90:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    7c92:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    7c94:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    7c96:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    7c98:	f013 0f01 	tst.w	r3, #1
    7c9c:	d109      	bne.n	7cb2 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    7c9e:	f013 0f04 	tst.w	r3, #4
    7ca2:	d109      	bne.n	7cb8 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    7ca4:	f013 0f02 	tst.w	r3, #2
    7ca8:	d109      	bne.n	7cbe <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    7caa:	f013 0f80 	tst.w	r3, #128	; 0x80
    7cae:	d10b      	bne.n	7cc8 <_spi_handler+0x3a>
    7cb0:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    7cb2:	6883      	ldr	r3, [r0, #8]
    7cb4:	4798      	blx	r3
    7cb6:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    7cb8:	68c3      	ldr	r3, [r0, #12]
    7cba:	4798      	blx	r3
    7cbc:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    7cbe:	2302      	movs	r3, #2
    7cc0:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    7cc2:	6903      	ldr	r3, [r0, #16]
    7cc4:	4798      	blx	r3
    7cc6:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    7cc8:	2304      	movs	r3, #4
    7cca:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    7ccc:	2380      	movs	r3, #128	; 0x80
    7cce:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    7cd0:	6943      	ldr	r3, [r0, #20]
    7cd2:	f06f 0112 	mvn.w	r1, #18
    7cd6:	4798      	blx	r3
	}
}
    7cd8:	e7ea      	b.n	7cb0 <_spi_handler+0x22>
	...

00007cdc <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    7cdc:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    7cde:	4b03      	ldr	r3, [pc, #12]	; (7cec <_spi_get_tx_dma_channel+0x10>)
    7ce0:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    7ce2:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    7ce4:	bf0c      	ite	eq
    7ce6:	2008      	moveq	r0, #8
    7ce8:	2000      	movne	r0, #0
    7cea:	bd08      	pop	{r3, pc}
    7cec:	0000772d 	.word	0x0000772d

00007cf0 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    7cf0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    7cf2:	4b03      	ldr	r3, [pc, #12]	; (7d00 <_spi_get_rx_dma_channel+0x10>)
    7cf4:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    7cf6:	2807      	cmp	r0, #7
    7cf8:	bf8c      	ite	hi
    7cfa:	2000      	movhi	r0, #0
    7cfc:	2001      	movls	r0, #1
    7cfe:	bd08      	pop	{r3, pc}
    7d00:	0000772d 	.word	0x0000772d

00007d04 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    7d04:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    7d06:	6883      	ldr	r3, [r0, #8]
    7d08:	689b      	ldr	r3, [r3, #8]
    7d0a:	b103      	cbz	r3, 7d0e <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    7d0c:	4798      	blx	r3
    7d0e:	bd08      	pop	{r3, pc}

00007d10 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    7d10:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    7d12:	6883      	ldr	r3, [r0, #8]
    7d14:	685b      	ldr	r3, [r3, #4]
    7d16:	b103      	cbz	r3, 7d1a <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    7d18:	4798      	blx	r3
    7d1a:	bd08      	pop	{r3, pc}

00007d1c <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    7d1c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    7d1e:	6883      	ldr	r3, [r0, #8]
    7d20:	68db      	ldr	r3, [r3, #12]
    7d22:	b103      	cbz	r3, 7d26 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    7d24:	4798      	blx	r3
    7d26:	bd08      	pop	{r3, pc}

00007d28 <_usart_sync_init>:
{
    7d28:	b508      	push	{r3, lr}
	device->hw = hw;
    7d2a:	6001      	str	r1, [r0, #0]
	return _usart_init(hw);
    7d2c:	4608      	mov	r0, r1
    7d2e:	4b01      	ldr	r3, [pc, #4]	; (7d34 <_usart_sync_init+0xc>)
    7d30:	4798      	blx	r3
}
    7d32:	bd08      	pop	{r3, pc}
    7d34:	00007841 	.word	0x00007841

00007d38 <_usart_async_init>:
{
    7d38:	b570      	push	{r4, r5, r6, lr}
    7d3a:	4606      	mov	r6, r0
    7d3c:	460d      	mov	r5, r1
	init_status = _usart_init(hw);
    7d3e:	4608      	mov	r0, r1
    7d40:	4b14      	ldr	r3, [pc, #80]	; (7d94 <_usart_async_init+0x5c>)
    7d42:	4798      	blx	r3
	if (init_status) {
    7d44:	4604      	mov	r4, r0
    7d46:	b108      	cbz	r0, 7d4c <_usart_async_init+0x14>
}
    7d48:	4620      	mov	r0, r4
    7d4a:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    7d4c:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    7d4e:	4631      	mov	r1, r6
    7d50:	4628      	mov	r0, r5
    7d52:	4b11      	ldr	r3, [pc, #68]	; (7d98 <_usart_async_init+0x60>)
    7d54:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7d56:	4628      	mov	r0, r5
    7d58:	4b10      	ldr	r3, [pc, #64]	; (7d9c <_usart_async_init+0x64>)
    7d5a:	4798      	blx	r3
    7d5c:	1d01      	adds	r1, r0, #4
    7d5e:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d60:	2501      	movs	r5, #1
    7d62:	f000 021f 	and.w	r2, r0, #31
    7d66:	fa05 f202 	lsl.w	r2, r5, r2
    7d6a:	0943      	lsrs	r3, r0, #5
    7d6c:	009b      	lsls	r3, r3, #2
    7d6e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7d72:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7d7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7d7e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d82:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d86:	601a      	str	r2, [r3, #0]
		irq++;
    7d88:	3001      	adds	r0, #1
    7d8a:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7d8c:	4281      	cmp	r1, r0
    7d8e:	d1e8      	bne.n	7d62 <_usart_async_init+0x2a>
    7d90:	e7da      	b.n	7d48 <_usart_async_init+0x10>
    7d92:	bf00      	nop
    7d94:	00007841 	.word	0x00007841
    7d98:	000077e1 	.word	0x000077e1
    7d9c:	00007b75 	.word	0x00007b75

00007da0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    7da0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7da2:	6813      	ldr	r3, [r2, #0]
    7da4:	f043 0302 	orr.w	r3, r3, #2
    7da8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7daa:	69d3      	ldr	r3, [r2, #28]
    7dac:	f013 0f03 	tst.w	r3, #3
    7db0:	d1fb      	bne.n	7daa <_usart_sync_enable+0xa>
}
    7db2:	4770      	bx	lr

00007db4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7db4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    7db6:	6299      	str	r1, [r3, #40]	; 0x28
    7db8:	4770      	bx	lr

00007dba <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7dba:	6983      	ldr	r3, [r0, #24]
    7dbc:	6299      	str	r1, [r3, #40]	; 0x28
    7dbe:	4770      	bx	lr

00007dc0 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    7dc0:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    7dc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7dc4:	b2c0      	uxtb	r0, r0
    7dc6:	4770      	bx	lr

00007dc8 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    7dc8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    7dca:	7e18      	ldrb	r0, [r3, #24]
}
    7dcc:	f000 0001 	and.w	r0, r0, #1
    7dd0:	4770      	bx	lr

00007dd2 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    7dd2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7dd4:	7e18      	ldrb	r0, [r3, #24]
}
    7dd6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7dda:	4770      	bx	lr

00007ddc <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    7ddc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    7dde:	7e18      	ldrb	r0, [r3, #24]
}
    7de0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7de4:	4770      	bx	lr

00007de6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    7de6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    7de8:	2201      	movs	r2, #1
    7dea:	759a      	strb	r2, [r3, #22]
    7dec:	4770      	bx	lr

00007dee <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    7dee:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    7df0:	2202      	movs	r2, #2
    7df2:	759a      	strb	r2, [r3, #22]
    7df4:	4770      	bx	lr
	...

00007df8 <_i2c_m_async_init>:
{
    7df8:	b570      	push	{r4, r5, r6, lr}
    7dfa:	4606      	mov	r6, r0
    7dfc:	460d      	mov	r5, r1
	i2c_dev->hw = hw;
    7dfe:	6101      	str	r1, [r0, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7e00:	4b13      	ldr	r3, [pc, #76]	; (7e50 <_i2c_m_async_init+0x58>)
    7e02:	4798      	blx	r3
	if (init_status) {
    7e04:	4604      	mov	r4, r0
    7e06:	b108      	cbz	r0, 7e0c <_i2c_m_async_init+0x14>
}
    7e08:	4620      	mov	r0, r4
    7e0a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    7e0c:	4631      	mov	r1, r6
    7e0e:	4628      	mov	r0, r5
    7e10:	4b10      	ldr	r3, [pc, #64]	; (7e54 <_i2c_m_async_init+0x5c>)
    7e12:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7e14:	4628      	mov	r0, r5
    7e16:	4b10      	ldr	r3, [pc, #64]	; (7e58 <_i2c_m_async_init+0x60>)
    7e18:	4798      	blx	r3
    7e1a:	1d01      	adds	r1, r0, #4
    7e1c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e1e:	2501      	movs	r5, #1
    7e20:	f000 021f 	and.w	r2, r0, #31
    7e24:	fa05 f202 	lsl.w	r2, r5, r2
    7e28:	0943      	lsrs	r3, r0, #5
    7e2a:	009b      	lsls	r3, r3, #2
    7e2c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7e30:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7e3c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e44:	601a      	str	r2, [r3, #0]
		irq++;
    7e46:	3001      	adds	r0, #1
    7e48:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7e4a:	4281      	cmp	r1, r0
    7e4c:	d1e8      	bne.n	7e20 <_i2c_m_async_init+0x28>
    7e4e:	e7db      	b.n	7e08 <_i2c_m_async_init+0x10>
    7e50:	00007b89 	.word	0x00007b89
    7e54:	000077e1 	.word	0x000077e1
    7e58:	00007b75 	.word	0x00007b75

00007e5c <_i2c_m_async_transfer>:
{
    7e5c:	b410      	push	{r4}
    7e5e:	4604      	mov	r4, r0
	if (msg->len == 0) {
    7e60:	6848      	ldr	r0, [r1, #4]
    7e62:	2800      	cmp	r0, #0
    7e64:	d042      	beq.n	7eec <_i2c_m_async_transfer+0x90>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7e66:	8863      	ldrh	r3, [r4, #2]
    7e68:	f413 7f80 	tst.w	r3, #256	; 0x100
    7e6c:	d162      	bne.n	7f34 <_i2c_m_async_transfer+0xd8>
	msg->flags |= I2C_M_BUSY;
    7e6e:	884b      	ldrh	r3, [r1, #2]
    7e70:	b29b      	uxth	r3, r3
    7e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7e76:	804b      	strh	r3, [r1, #2]
	i2c_dev->service.msg = *msg;
    7e78:	c907      	ldmia	r1, {r0, r1, r2}
    7e7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    7e7e:	6922      	ldr	r2, [r4, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7e80:	6853      	ldr	r3, [r2, #4]
    7e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7e86:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7e88:	69d3      	ldr	r3, [r2, #28]
    7e8a:	f013 0f04 	tst.w	r3, #4
    7e8e:	d1fb      	bne.n	7e88 <_i2c_m_async_transfer+0x2c>
	void *             hw    = i2c_dev->hw;
    7e90:	6923      	ldr	r3, [r4, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7e92:	6819      	ldr	r1, [r3, #0]
	if (msg->len == 1 && sclsm) {
    7e94:	6862      	ldr	r2, [r4, #4]
    7e96:	2a01      	cmp	r2, #1
    7e98:	d02b      	beq.n	7ef2 <_i2c_m_async_transfer+0x96>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7e9a:	685a      	ldr	r2, [r3, #4]
    7e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    7ea0:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7ea2:	69da      	ldr	r2, [r3, #28]
    7ea4:	f012 0f04 	tst.w	r2, #4
    7ea8:	d1fb      	bne.n	7ea2 <_i2c_m_async_transfer+0x46>
	if (msg->addr & I2C_M_TEN) {
    7eaa:	8822      	ldrh	r2, [r4, #0]
    7eac:	f412 6f80 	tst.w	r2, #1024	; 0x400
    7eb0:	d02b      	beq.n	7f0a <_i2c_m_async_transfer+0xae>
		if (msg->flags & I2C_M_RD) {
    7eb2:	8861      	ldrh	r1, [r4, #2]
    7eb4:	f011 0f01 	tst.w	r1, #1
    7eb8:	d004      	beq.n	7ec4 <_i2c_m_async_transfer+0x68>
			msg->flags |= I2C_M_TEN;
    7eba:	8861      	ldrh	r1, [r4, #2]
    7ebc:	b289      	uxth	r1, r1
    7ebe:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    7ec2:	8061      	strh	r1, [r4, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7ec4:	f240 71fe 	movw	r1, #2046	; 0x7fe
    7ec8:	ea01 0142 	and.w	r1, r1, r2, lsl #1
    7ecc:	69da      	ldr	r2, [r3, #28]
    7ece:	f012 0f04 	tst.w	r2, #4
    7ed2:	d1fb      	bne.n	7ecc <_i2c_m_async_transfer+0x70>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7ed6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    7ede:	430a      	orrs	r2, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7ee0:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7ee2:	69da      	ldr	r2, [r3, #28]
    7ee4:	f012 0f04 	tst.w	r2, #4
    7ee8:	d1fb      	bne.n	7ee2 <_i2c_m_async_transfer+0x86>
	return ERR_NONE;
    7eea:	2000      	movs	r0, #0
}
    7eec:	f85d 4b04 	ldr.w	r4, [sp], #4
    7ef0:	4770      	bx	lr
	if (msg->len == 1 && sclsm) {
    7ef2:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
    7ef6:	d0d0      	beq.n	7e9a <_i2c_m_async_transfer+0x3e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7ef8:	685a      	ldr	r2, [r3, #4]
    7efa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    7efe:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7f00:	69da      	ldr	r2, [r3, #28]
    7f02:	f012 0f04 	tst.w	r2, #4
    7f06:	d1fb      	bne.n	7f00 <_i2c_m_async_transfer+0xa4>
    7f08:	e7cf      	b.n	7eaa <_i2c_m_async_transfer+0x4e>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7f0a:	8860      	ldrh	r0, [r4, #2]
    7f0c:	0051      	lsls	r1, r2, #1
    7f0e:	b2c9      	uxtb	r1, r1
    7f10:	f000 0201 	and.w	r2, r0, #1
    7f14:	4311      	orrs	r1, r2
    7f16:	69da      	ldr	r2, [r3, #28]
    7f18:	f012 0f04 	tst.w	r2, #4
    7f1c:	d1fb      	bne.n	7f16 <_i2c_m_async_transfer+0xba>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7f20:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7f24:	4311      	orrs	r1, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7f26:	6259      	str	r1, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7f28:	69da      	ldr	r2, [r3, #28]
    7f2a:	f012 0f04 	tst.w	r2, #4
    7f2e:	d1fb      	bne.n	7f28 <_i2c_m_async_transfer+0xcc>
	return ERR_NONE;
    7f30:	2000      	movs	r0, #0
    7f32:	e7db      	b.n	7eec <_i2c_m_async_transfer+0x90>
		return ERR_BUSY;
    7f34:	f06f 0003 	mvn.w	r0, #3
    7f38:	e7d8      	b.n	7eec <_i2c_m_async_transfer+0x90>

00007f3a <_i2c_m_async_register_callback>:
	switch (type) {
    7f3a:	2901      	cmp	r1, #1
    7f3c:	d006      	beq.n	7f4c <_i2c_m_async_register_callback+0x12>
    7f3e:	b119      	cbz	r1, 7f48 <_i2c_m_async_register_callback+0xe>
    7f40:	2902      	cmp	r1, #2
    7f42:	d005      	beq.n	7f50 <_i2c_m_async_register_callback+0x16>
}
    7f44:	2000      	movs	r0, #0
    7f46:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    7f48:	6142      	str	r2, [r0, #20]
		break;
    7f4a:	e7fb      	b.n	7f44 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    7f4c:	6182      	str	r2, [r0, #24]
		break;
    7f4e:	e7f9      	b.n	7f44 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    7f50:	61c2      	str	r2, [r0, #28]
		break;
    7f52:	e7f7      	b.n	7f44 <_i2c_m_async_register_callback+0xa>

00007f54 <SERCOM0_0_Handler>:
{
    7f54:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7f56:	4b02      	ldr	r3, [pc, #8]	; (7f60 <SERCOM0_0_Handler+0xc>)
    7f58:	6818      	ldr	r0, [r3, #0]
    7f5a:	4b02      	ldr	r3, [pc, #8]	; (7f64 <SERCOM0_0_Handler+0x10>)
    7f5c:	4798      	blx	r3
    7f5e:	bd08      	pop	{r3, pc}
    7f60:	2000047c 	.word	0x2000047c
    7f64:	00007771 	.word	0x00007771

00007f68 <SERCOM0_1_Handler>:
{
    7f68:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7f6a:	4b02      	ldr	r3, [pc, #8]	; (7f74 <SERCOM0_1_Handler+0xc>)
    7f6c:	6818      	ldr	r0, [r3, #0]
    7f6e:	4b02      	ldr	r3, [pc, #8]	; (7f78 <SERCOM0_1_Handler+0x10>)
    7f70:	4798      	blx	r3
    7f72:	bd08      	pop	{r3, pc}
    7f74:	2000047c 	.word	0x2000047c
    7f78:	00007771 	.word	0x00007771

00007f7c <SERCOM0_2_Handler>:
{
    7f7c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7f7e:	4b02      	ldr	r3, [pc, #8]	; (7f88 <SERCOM0_2_Handler+0xc>)
    7f80:	6818      	ldr	r0, [r3, #0]
    7f82:	4b02      	ldr	r3, [pc, #8]	; (7f8c <SERCOM0_2_Handler+0x10>)
    7f84:	4798      	blx	r3
    7f86:	bd08      	pop	{r3, pc}
    7f88:	2000047c 	.word	0x2000047c
    7f8c:	00007771 	.word	0x00007771

00007f90 <SERCOM0_3_Handler>:
{
    7f90:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7f92:	4b02      	ldr	r3, [pc, #8]	; (7f9c <SERCOM0_3_Handler+0xc>)
    7f94:	6818      	ldr	r0, [r3, #0]
    7f96:	4b02      	ldr	r3, [pc, #8]	; (7fa0 <SERCOM0_3_Handler+0x10>)
    7f98:	4798      	blx	r3
    7f9a:	bd08      	pop	{r3, pc}
    7f9c:	2000047c 	.word	0x2000047c
    7fa0:	00007771 	.word	0x00007771

00007fa4 <SERCOM1_0_Handler>:
{
    7fa4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7fa6:	4b02      	ldr	r3, [pc, #8]	; (7fb0 <SERCOM1_0_Handler+0xc>)
    7fa8:	6858      	ldr	r0, [r3, #4]
    7faa:	4b02      	ldr	r3, [pc, #8]	; (7fb4 <SERCOM1_0_Handler+0x10>)
    7fac:	4798      	blx	r3
    7fae:	bd08      	pop	{r3, pc}
    7fb0:	2000047c 	.word	0x2000047c
    7fb4:	00007771 	.word	0x00007771

00007fb8 <SERCOM1_1_Handler>:
{
    7fb8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7fba:	4b02      	ldr	r3, [pc, #8]	; (7fc4 <SERCOM1_1_Handler+0xc>)
    7fbc:	6858      	ldr	r0, [r3, #4]
    7fbe:	4b02      	ldr	r3, [pc, #8]	; (7fc8 <SERCOM1_1_Handler+0x10>)
    7fc0:	4798      	blx	r3
    7fc2:	bd08      	pop	{r3, pc}
    7fc4:	2000047c 	.word	0x2000047c
    7fc8:	00007771 	.word	0x00007771

00007fcc <SERCOM1_2_Handler>:
{
    7fcc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7fce:	4b02      	ldr	r3, [pc, #8]	; (7fd8 <SERCOM1_2_Handler+0xc>)
    7fd0:	6858      	ldr	r0, [r3, #4]
    7fd2:	4b02      	ldr	r3, [pc, #8]	; (7fdc <SERCOM1_2_Handler+0x10>)
    7fd4:	4798      	blx	r3
    7fd6:	bd08      	pop	{r3, pc}
    7fd8:	2000047c 	.word	0x2000047c
    7fdc:	00007771 	.word	0x00007771

00007fe0 <SERCOM1_3_Handler>:
{
    7fe0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7fe2:	4b02      	ldr	r3, [pc, #8]	; (7fec <SERCOM1_3_Handler+0xc>)
    7fe4:	6858      	ldr	r0, [r3, #4]
    7fe6:	4b02      	ldr	r3, [pc, #8]	; (7ff0 <SERCOM1_3_Handler+0x10>)
    7fe8:	4798      	blx	r3
    7fea:	bd08      	pop	{r3, pc}
    7fec:	2000047c 	.word	0x2000047c
    7ff0:	00007771 	.word	0x00007771

00007ff4 <SERCOM3_0_Handler>:
{
    7ff4:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7ff6:	4b02      	ldr	r3, [pc, #8]	; (8000 <SERCOM3_0_Handler+0xc>)
    7ff8:	6898      	ldr	r0, [r3, #8]
    7ffa:	4b02      	ldr	r3, [pc, #8]	; (8004 <SERCOM3_0_Handler+0x10>)
    7ffc:	4798      	blx	r3
    7ffe:	bd08      	pop	{r3, pc}
    8000:	2000047c 	.word	0x2000047c
    8004:	00007c8f 	.word	0x00007c8f

00008008 <SERCOM3_1_Handler>:
{
    8008:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    800a:	4b02      	ldr	r3, [pc, #8]	; (8014 <SERCOM3_1_Handler+0xc>)
    800c:	6898      	ldr	r0, [r3, #8]
    800e:	4b02      	ldr	r3, [pc, #8]	; (8018 <SERCOM3_1_Handler+0x10>)
    8010:	4798      	blx	r3
    8012:	bd08      	pop	{r3, pc}
    8014:	2000047c 	.word	0x2000047c
    8018:	00007c8f 	.word	0x00007c8f

0000801c <SERCOM3_2_Handler>:
{
    801c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    801e:	4b02      	ldr	r3, [pc, #8]	; (8028 <SERCOM3_2_Handler+0xc>)
    8020:	6898      	ldr	r0, [r3, #8]
    8022:	4b02      	ldr	r3, [pc, #8]	; (802c <SERCOM3_2_Handler+0x10>)
    8024:	4798      	blx	r3
    8026:	bd08      	pop	{r3, pc}
    8028:	2000047c 	.word	0x2000047c
    802c:	00007c8f 	.word	0x00007c8f

00008030 <SERCOM3_3_Handler>:
{
    8030:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    8032:	4b02      	ldr	r3, [pc, #8]	; (803c <SERCOM3_3_Handler+0xc>)
    8034:	6898      	ldr	r0, [r3, #8]
    8036:	4b02      	ldr	r3, [pc, #8]	; (8040 <SERCOM3_3_Handler+0x10>)
    8038:	4798      	blx	r3
    803a:	bd08      	pop	{r3, pc}
    803c:	2000047c 	.word	0x2000047c
    8040:	00007c8f 	.word	0x00007c8f

00008044 <SERCOM4_0_Handler>:
{
    8044:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    8046:	4b02      	ldr	r3, [pc, #8]	; (8050 <SERCOM4_0_Handler+0xc>)
    8048:	68d8      	ldr	r0, [r3, #12]
    804a:	4b02      	ldr	r3, [pc, #8]	; (8054 <SERCOM4_0_Handler+0x10>)
    804c:	4798      	blx	r3
    804e:	bd08      	pop	{r3, pc}
    8050:	2000047c 	.word	0x2000047c
    8054:	00007771 	.word	0x00007771

00008058 <SERCOM4_1_Handler>:
{
    8058:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    805a:	4b02      	ldr	r3, [pc, #8]	; (8064 <SERCOM4_1_Handler+0xc>)
    805c:	68d8      	ldr	r0, [r3, #12]
    805e:	4b02      	ldr	r3, [pc, #8]	; (8068 <SERCOM4_1_Handler+0x10>)
    8060:	4798      	blx	r3
    8062:	bd08      	pop	{r3, pc}
    8064:	2000047c 	.word	0x2000047c
    8068:	00007771 	.word	0x00007771

0000806c <SERCOM4_2_Handler>:
{
    806c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    806e:	4b02      	ldr	r3, [pc, #8]	; (8078 <SERCOM4_2_Handler+0xc>)
    8070:	68d8      	ldr	r0, [r3, #12]
    8072:	4b02      	ldr	r3, [pc, #8]	; (807c <SERCOM4_2_Handler+0x10>)
    8074:	4798      	blx	r3
    8076:	bd08      	pop	{r3, pc}
    8078:	2000047c 	.word	0x2000047c
    807c:	00007771 	.word	0x00007771

00008080 <SERCOM4_3_Handler>:
{
    8080:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    8082:	4b02      	ldr	r3, [pc, #8]	; (808c <SERCOM4_3_Handler+0xc>)
    8084:	68d8      	ldr	r0, [r3, #12]
    8086:	4b02      	ldr	r3, [pc, #8]	; (8090 <SERCOM4_3_Handler+0x10>)
    8088:	4798      	blx	r3
    808a:	bd08      	pop	{r3, pc}
    808c:	2000047c 	.word	0x2000047c
    8090:	00007771 	.word	0x00007771

00008094 <SERCOM5_0_Handler>:
{
    8094:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8096:	4b02      	ldr	r3, [pc, #8]	; (80a0 <SERCOM5_0_Handler+0xc>)
    8098:	6918      	ldr	r0, [r3, #16]
    809a:	4b02      	ldr	r3, [pc, #8]	; (80a4 <SERCOM5_0_Handler+0x10>)
    809c:	4798      	blx	r3
    809e:	bd08      	pop	{r3, pc}
    80a0:	2000047c 	.word	0x2000047c
    80a4:	00007975 	.word	0x00007975

000080a8 <SERCOM5_1_Handler>:
{
    80a8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    80aa:	4b02      	ldr	r3, [pc, #8]	; (80b4 <SERCOM5_1_Handler+0xc>)
    80ac:	6918      	ldr	r0, [r3, #16]
    80ae:	4b02      	ldr	r3, [pc, #8]	; (80b8 <SERCOM5_1_Handler+0x10>)
    80b0:	4798      	blx	r3
    80b2:	bd08      	pop	{r3, pc}
    80b4:	2000047c 	.word	0x2000047c
    80b8:	00007975 	.word	0x00007975

000080bc <SERCOM5_2_Handler>:
{
    80bc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    80be:	4b02      	ldr	r3, [pc, #8]	; (80c8 <SERCOM5_2_Handler+0xc>)
    80c0:	6918      	ldr	r0, [r3, #16]
    80c2:	4b02      	ldr	r3, [pc, #8]	; (80cc <SERCOM5_2_Handler+0x10>)
    80c4:	4798      	blx	r3
    80c6:	bd08      	pop	{r3, pc}
    80c8:	2000047c 	.word	0x2000047c
    80cc:	00007975 	.word	0x00007975

000080d0 <SERCOM5_3_Handler>:
{
    80d0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    80d2:	4b02      	ldr	r3, [pc, #8]	; (80dc <SERCOM5_3_Handler+0xc>)
    80d4:	6918      	ldr	r0, [r3, #16]
    80d6:	4b02      	ldr	r3, [pc, #8]	; (80e0 <SERCOM5_3_Handler+0x10>)
    80d8:	4798      	blx	r3
    80da:	bd08      	pop	{r3, pc}
    80dc:	2000047c 	.word	0x2000047c
    80e0:	00007975 	.word	0x00007975

000080e4 <SERCOM6_0_Handler>:
{
    80e4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    80e6:	4b02      	ldr	r3, [pc, #8]	; (80f0 <SERCOM6_0_Handler+0xc>)
    80e8:	6958      	ldr	r0, [r3, #20]
    80ea:	4b02      	ldr	r3, [pc, #8]	; (80f4 <SERCOM6_0_Handler+0x10>)
    80ec:	4798      	blx	r3
    80ee:	bd08      	pop	{r3, pc}
    80f0:	2000047c 	.word	0x2000047c
    80f4:	00007771 	.word	0x00007771

000080f8 <SERCOM6_1_Handler>:
{
    80f8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    80fa:	4b02      	ldr	r3, [pc, #8]	; (8104 <SERCOM6_1_Handler+0xc>)
    80fc:	6958      	ldr	r0, [r3, #20]
    80fe:	4b02      	ldr	r3, [pc, #8]	; (8108 <SERCOM6_1_Handler+0x10>)
    8100:	4798      	blx	r3
    8102:	bd08      	pop	{r3, pc}
    8104:	2000047c 	.word	0x2000047c
    8108:	00007771 	.word	0x00007771

0000810c <SERCOM6_2_Handler>:
{
    810c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    810e:	4b02      	ldr	r3, [pc, #8]	; (8118 <SERCOM6_2_Handler+0xc>)
    8110:	6958      	ldr	r0, [r3, #20]
    8112:	4b02      	ldr	r3, [pc, #8]	; (811c <SERCOM6_2_Handler+0x10>)
    8114:	4798      	blx	r3
    8116:	bd08      	pop	{r3, pc}
    8118:	2000047c 	.word	0x2000047c
    811c:	00007771 	.word	0x00007771

00008120 <SERCOM6_3_Handler>:
{
    8120:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    8122:	4b02      	ldr	r3, [pc, #8]	; (812c <SERCOM6_3_Handler+0xc>)
    8124:	6958      	ldr	r0, [r3, #20]
    8126:	4b02      	ldr	r3, [pc, #8]	; (8130 <SERCOM6_3_Handler+0x10>)
    8128:	4798      	blx	r3
    812a:	bd08      	pop	{r3, pc}
    812c:	2000047c 	.word	0x2000047c
    8130:	00007771 	.word	0x00007771

00008134 <_spi_m_sync_init>:
{
    8134:	b538      	push	{r3, r4, r5, lr}
    8136:	4605      	mov	r5, r0
    8138:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    813a:	4608      	mov	r0, r1
    813c:	4b55      	ldr	r3, [pc, #340]	; (8294 <_spi_m_sync_init+0x160>)
    813e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    8140:	2803      	cmp	r0, #3
    8142:	d006      	beq.n	8152 <_spi_m_sync_init+0x1e>
    8144:	2807      	cmp	r0, #7
    8146:	bf08      	it	eq
    8148:	2201      	moveq	r2, #1
    814a:	d003      	beq.n	8154 <_spi_m_sync_init+0x20>
		return ERR_INVALID_ARG;
    814c:	f06f 000c 	mvn.w	r0, #12
}
    8150:	bd38      	pop	{r3, r4, r5, pc}
		if (sercomspi_regs[i].n == n) {
    8152:	2200      	movs	r2, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8154:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8156:	f013 0f01 	tst.w	r3, #1
    815a:	d122      	bne.n	81a2 <_spi_m_sync_init+0x6e>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    815c:	4b4e      	ldr	r3, [pc, #312]	; (8298 <_spi_m_sync_init+0x164>)
    815e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    8162:	4413      	add	r3, r2
    8164:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    8168:	f003 011c 	and.w	r1, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    816c:	69e3      	ldr	r3, [r4, #28]
    816e:	f013 0f03 	tst.w	r3, #3
    8172:	d1fb      	bne.n	816c <_spi_m_sync_init+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    8174:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8176:	f013 0f02 	tst.w	r3, #2
    817a:	d00b      	beq.n	8194 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    817c:	6823      	ldr	r3, [r4, #0]
    817e:	f023 0302 	bic.w	r3, r3, #2
    8182:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8184:	69e3      	ldr	r3, [r4, #28]
    8186:	f013 0f03 	tst.w	r3, #3
    818a:	d1fb      	bne.n	8184 <_spi_m_sync_init+0x50>
    818c:	69e3      	ldr	r3, [r4, #28]
    818e:	f013 0f02 	tst.w	r3, #2
    8192:	d1fb      	bne.n	818c <_spi_m_sync_init+0x58>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8194:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8198:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    819a:	69e3      	ldr	r3, [r4, #28]
    819c:	f013 0f03 	tst.w	r3, #3
    81a0:	d1fb      	bne.n	819a <_spi_m_sync_init+0x66>
    81a2:	69e3      	ldr	r3, [r4, #28]
    81a4:	f013 0f01 	tst.w	r3, #1
    81a8:	d1fb      	bne.n	81a2 <_spi_m_sync_init+0x6e>
	dev->prvt = hw;
    81aa:	602c      	str	r4, [r5, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    81ac:	4b3a      	ldr	r3, [pc, #232]	; (8298 <_spi_m_sync_init+0x164>)
    81ae:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    81b2:	4413      	add	r3, r2
    81b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    81b8:	f003 011c 	and.w	r1, r3, #28
    81bc:	2908      	cmp	r1, #8
    81be:	d03e      	beq.n	823e <_spi_m_sync_init+0x10a>
	hri_sercomspi_write_CTRLA_reg(
    81c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    81c4:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    81c8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    81ca:	69e3      	ldr	r3, [r4, #28]
    81cc:	f013 0f03 	tst.w	r3, #3
    81d0:	d1fb      	bne.n	81ca <_spi_m_sync_init+0x96>
	    (regs->ctrlb
    81d2:	4b31      	ldr	r3, [pc, #196]	; (8298 <_spi_m_sync_init+0x164>)
    81d4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    81d8:	4413      	add	r3, r2
    81da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	        | (SERCOM_SPI_CTRLB_RXEN));
    81de:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    81e2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    81e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    81ea:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    81ec:	69e3      	ldr	r3, [r4, #28]
    81ee:	f013 0f17 	tst.w	r3, #23
    81f2:	d1fb      	bne.n	81ec <_spi_m_sync_init+0xb8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    81f4:	4b28      	ldr	r3, [pc, #160]	; (8298 <_spi_m_sync_init+0x164>)
    81f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    81fa:	4413      	add	r3, r2
    81fc:	f893 10bc 	ldrb.w	r1, [r3, #188]	; 0xbc
	((Sercom *)hw)->SPI.BAUD.reg = data;
    8200:	7321      	strb	r1, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8202:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    8206:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    820a:	4b23      	ldr	r3, [pc, #140]	; (8298 <_spi_m_sync_init+0x164>)
    820c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    8210:	4413      	add	r3, r2
    8212:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    8216:	f003 0307 	and.w	r3, r3, #7
    821a:	2b00      	cmp	r3, #0
    821c:	bf0c      	ite	eq
    821e:	2301      	moveq	r3, #1
    8220:	2302      	movne	r3, #2
    8222:	712b      	strb	r3, [r5, #4]
	dev->dummy_byte = regs->dummy_byte;
    8224:	4b1c      	ldr	r3, [pc, #112]	; (8298 <_spi_m_sync_init+0x164>)
    8226:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    822a:	441a      	add	r2, r3
    822c:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
    8230:	f892 20bf 	ldrb.w	r2, [r2, #191]	; 0xbf
    8234:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8238:	80eb      	strh	r3, [r5, #6]
	return ERR_NONE;
    823a:	2000      	movs	r0, #0
    823c:	bd38      	pop	{r3, r4, r5, pc}
	hri_sercomspi_write_CTRLA_reg(
    823e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8242:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8246:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8248:	69e3      	ldr	r3, [r4, #28]
    824a:	f013 0f03 	tst.w	r3, #3
    824e:	d1fb      	bne.n	8248 <_spi_m_sync_init+0x114>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    8250:	4b11      	ldr	r3, [pc, #68]	; (8298 <_spi_m_sync_init+0x164>)
    8252:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    8256:	4413      	add	r3, r2
    8258:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    825c:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    8260:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    8264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8268:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    826c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    826e:	69e3      	ldr	r3, [r4, #28]
    8270:	f013 0f17 	tst.w	r3, #23
    8274:	d1fb      	bne.n	826e <_spi_m_sync_init+0x13a>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    8276:	4b08      	ldr	r3, [pc, #32]	; (8298 <_spi_m_sync_init+0x164>)
    8278:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    827c:	4413      	add	r3, r2
    827e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
	((Sercom *)hw)->SPI.ADDR.reg = data;
    8282:	6261      	str	r1, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8284:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    8288:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    828c:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    828e:	2b00      	cmp	r3, #0
    8290:	d1fc      	bne.n	828c <_spi_m_sync_init+0x158>
    8292:	e7ba      	b.n	820a <_spi_m_sync_init+0xd6>
    8294:	0000772d 	.word	0x0000772d
    8298:	0000c808 	.word	0x0000c808

0000829c <_spi_m_async_init>:
{
    829c:	b538      	push	{r3, r4, r5, lr}
    829e:	4604      	mov	r4, r0
    82a0:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    82a2:	4b15      	ldr	r3, [pc, #84]	; (82f8 <_spi_m_async_init+0x5c>)
    82a4:	4798      	blx	r3
	if (rc < 0) {
    82a6:	2800      	cmp	r0, #0
    82a8:	db24      	blt.n	82f4 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    82aa:	4621      	mov	r1, r4
    82ac:	4628      	mov	r0, r5
    82ae:	4b13      	ldr	r3, [pc, #76]	; (82fc <_spi_m_async_init+0x60>)
    82b0:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    82b2:	2300      	movs	r3, #0
    82b4:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    82b6:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    82b8:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    82ba:	4628      	mov	r0, r5
    82bc:	4b10      	ldr	r3, [pc, #64]	; (8300 <_spi_m_async_init+0x64>)
    82be:	4798      	blx	r3
    82c0:	1d01      	adds	r1, r0, #4
    82c2:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82c4:	2401      	movs	r4, #1
    82c6:	f000 021f 	and.w	r2, r0, #31
    82ca:	fa04 f202 	lsl.w	r2, r4, r2
    82ce:	0943      	lsrs	r3, r0, #5
    82d0:	009b      	lsls	r3, r3, #2
    82d2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    82d6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    82da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    82de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    82e2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82e6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    82ea:	3001      	adds	r0, #1
    82ec:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    82ee:	4281      	cmp	r1, r0
    82f0:	d1e9      	bne.n	82c6 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    82f2:	2000      	movs	r0, #0
}
    82f4:	bd38      	pop	{r3, r4, r5, pc}
    82f6:	bf00      	nop
    82f8:	00008135 	.word	0x00008135
    82fc:	000077e1 	.word	0x000077e1
    8300:	00007b75 	.word	0x00007b75

00008304 <_spi_m_async_enable_tx>:
	void *hw = dev->prvt;
    8304:	6803      	ldr	r3, [r0, #0]
	if (state) {
    8306:	b919      	cbnz	r1, 8310 <_spi_m_async_enable_tx+0xc>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    8308:	2201      	movs	r2, #1
    830a:	751a      	strb	r2, [r3, #20]
}
    830c:	2000      	movs	r0, #0
    830e:	4770      	bx	lr
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    8310:	2201      	movs	r2, #1
    8312:	759a      	strb	r2, [r3, #22]
    8314:	e7fa      	b.n	830c <_spi_m_async_enable_tx+0x8>

00008316 <_spi_m_async_enable_rx>:
	void *hw = dev->prvt;
    8316:	6803      	ldr	r3, [r0, #0]
	if (state) {
    8318:	b919      	cbnz	r1, 8322 <_spi_m_async_enable_rx+0xc>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    831a:	2204      	movs	r2, #4
    831c:	751a      	strb	r2, [r3, #20]
}
    831e:	2000      	movs	r0, #0
    8320:	4770      	bx	lr
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    8322:	2204      	movs	r2, #4
    8324:	759a      	strb	r2, [r3, #22]
    8326:	e7fa      	b.n	831e <_spi_m_async_enable_rx+0x8>

00008328 <_spi_m_async_enable_tx_complete>:
	if (state) {
    8328:	b921      	cbnz	r1, 8334 <_spi_m_async_enable_tx_complete+0xc>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    832a:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    832c:	2202      	movs	r2, #2
    832e:	751a      	strb	r2, [r3, #20]
}
    8330:	2000      	movs	r0, #0
    8332:	4770      	bx	lr
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    8334:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    8336:	2202      	movs	r2, #2
    8338:	759a      	strb	r2, [r3, #22]
    833a:	e7f9      	b.n	8330 <_spi_m_async_enable_tx_complete+0x8>

0000833c <_spi_m_async_write_one>:
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    833c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    833e:	6299      	str	r1, [r3, #40]	; 0x28
}
    8340:	2000      	movs	r0, #0
    8342:	4770      	bx	lr

00008344 <_spi_m_async_read_one>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    8344:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    8346:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    8348:	b280      	uxth	r0, r0
    834a:	4770      	bx	lr

0000834c <_spi_m_async_register_callback>:
	p_ls[cb_type] = (func_t)func;
    834c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    8350:	608a      	str	r2, [r1, #8]
}
    8352:	2000      	movs	r0, #0
    8354:	4770      	bx	lr
	...

00008358 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    8358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    835c:	4605      	mov	r5, r0
    835e:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8360:	4608      	mov	r0, r1
    8362:	4b42      	ldr	r3, [pc, #264]	; (846c <_spi_m_dma_init+0x114>)
    8364:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    8366:	2803      	cmp	r0, #3
    8368:	d007      	beq.n	837a <_spi_m_dma_init+0x22>
    836a:	2807      	cmp	r0, #7
    836c:	bf08      	it	eq
    836e:	2201      	moveq	r2, #1
    8370:	d004      	beq.n	837c <_spi_m_dma_init+0x24>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    8372:	f06f 000c 	mvn.w	r0, #12
	dev->resource->back                 = dev;
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
	dev->resource->dma_cb.error         = _spi_dma_error_occured;

	return ERR_NONE;
}
    8376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sercomspi_regs[i].n == n) {
    837a:	2200      	movs	r2, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    837c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    837e:	f013 0f01 	tst.w	r3, #1
    8382:	d122      	bne.n	83ca <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8384:	4b3a      	ldr	r3, [pc, #232]	; (8470 <_spi_m_dma_init+0x118>)
    8386:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    838a:	4413      	add	r3, r2
    838c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    8390:	f003 011c 	and.w	r1, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8394:	69e3      	ldr	r3, [r4, #28]
    8396:	f013 0f03 	tst.w	r3, #3
    839a:	d1fb      	bne.n	8394 <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    839c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    839e:	f013 0f02 	tst.w	r3, #2
    83a2:	d00b      	beq.n	83bc <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    83a4:	6823      	ldr	r3, [r4, #0]
    83a6:	f023 0302 	bic.w	r3, r3, #2
    83aa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    83ac:	69e3      	ldr	r3, [r4, #28]
    83ae:	f013 0f03 	tst.w	r3, #3
    83b2:	d1fb      	bne.n	83ac <_spi_m_dma_init+0x54>
    83b4:	69e3      	ldr	r3, [r4, #28]
    83b6:	f013 0f02 	tst.w	r3, #2
    83ba:	d1fb      	bne.n	83b4 <_spi_m_dma_init+0x5c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    83bc:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    83c0:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    83c2:	69e3      	ldr	r3, [r4, #28]
    83c4:	f013 0f03 	tst.w	r3, #3
    83c8:	d1fb      	bne.n	83c2 <_spi_m_dma_init+0x6a>
    83ca:	69e3      	ldr	r3, [r4, #28]
    83cc:	f013 0f01 	tst.w	r3, #1
    83d0:	d1fb      	bne.n	83ca <_spi_m_dma_init+0x72>
	dev->prvt = hw;
    83d2:	602c      	str	r4, [r5, #0]
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    83d4:	4b26      	ldr	r3, [pc, #152]	; (8470 <_spi_m_dma_init+0x118>)
    83d6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    83da:	4413      	add	r3, r2
    83dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	hri_sercomspi_write_CTRLA_reg(
    83e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    83e4:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    83e8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    83ea:	69e3      	ldr	r3, [r4, #28]
    83ec:	f013 0f03 	tst.w	r3, #3
    83f0:	d1fb      	bne.n	83ea <_spi_m_dma_init+0x92>
	    (regs->ctrlb
    83f2:	4b1f      	ldr	r3, [pc, #124]	; (8470 <_spi_m_dma_init+0x118>)
    83f4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    83f8:	4413      	add	r3, r2
    83fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	        | (SERCOM_SPI_CTRLB_RXEN));
    83fe:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    8402:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    8406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    840a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    840c:	69e3      	ldr	r3, [r4, #28]
    840e:	f013 0f17 	tst.w	r3, #23
    8412:	d1fb      	bne.n	840c <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    8414:	4b16      	ldr	r3, [pc, #88]	; (8470 <_spi_m_dma_init+0x118>)
    8416:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    841a:	441a      	add	r2, r3
    841c:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
	((Sercom *)hw)->SPI.BAUD.reg = data;
    8420:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8422:	f892 30bd 	ldrb.w	r3, [r2, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    8426:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    842a:	f105 0818 	add.w	r8, r5, #24
    842e:	4620      	mov	r0, r4
    8430:	4b10      	ldr	r3, [pc, #64]	; (8474 <_spi_m_dma_init+0x11c>)
    8432:	4798      	blx	r3
    8434:	4601      	mov	r1, r0
    8436:	4640      	mov	r0, r8
    8438:	4f0f      	ldr	r7, [pc, #60]	; (8478 <_spi_m_dma_init+0x120>)
    843a:	47b8      	blx	r7
	dev->resource->back                 = dev;
    843c:	69ab      	ldr	r3, [r5, #24]
    843e:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    8440:	69ab      	ldr	r3, [r5, #24]
    8442:	4a0e      	ldr	r2, [pc, #56]	; (847c <_spi_m_dma_init+0x124>)
    8444:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    8446:	69ab      	ldr	r3, [r5, #24]
    8448:	4e0d      	ldr	r6, [pc, #52]	; (8480 <_spi_m_dma_init+0x128>)
    844a:	605e      	str	r6, [r3, #4]
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    844c:	4620      	mov	r0, r4
    844e:	4b0d      	ldr	r3, [pc, #52]	; (8484 <_spi_m_dma_init+0x12c>)
    8450:	4798      	blx	r3
    8452:	4601      	mov	r1, r0
    8454:	4640      	mov	r0, r8
    8456:	47b8      	blx	r7
	dev->resource->back                 = dev;
    8458:	69ab      	ldr	r3, [r5, #24]
    845a:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    845c:	69ab      	ldr	r3, [r5, #24]
    845e:	4a0a      	ldr	r2, [pc, #40]	; (8488 <_spi_m_dma_init+0x130>)
    8460:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    8462:	69ab      	ldr	r3, [r5, #24]
    8464:	605e      	str	r6, [r3, #4]
	return ERR_NONE;
    8466:	2000      	movs	r0, #0
    8468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    846c:	0000772d 	.word	0x0000772d
    8470:	0000c808 	.word	0x0000c808
    8474:	00007cf1 	.word	0x00007cf1
    8478:	00007205 	.word	0x00007205
    847c:	00007d05 	.word	0x00007d05
    8480:	00007d1d 	.word	0x00007d1d
    8484:	00007cdd 	.word	0x00007cdd
    8488:	00007d11 	.word	0x00007d11

0000848c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    848c:	b508      	push	{r3, lr}
	ASSERT(dev && dev->prvt);

	return _spi_sync_enable(dev->prvt);
    848e:	6800      	ldr	r0, [r0, #0]
    8490:	4b01      	ldr	r3, [pc, #4]	; (8498 <_spi_m_dma_enable+0xc>)
    8492:	4798      	blx	r3
}
    8494:	bd08      	pop	{r3, pc}
    8496:	bf00      	nop
    8498:	00007c6d 	.word	0x00007c6d

0000849c <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    849c:	b570      	push	{r4, r5, r6, lr}
    849e:	4605      	mov	r5, r0
    84a0:	4614      	mov	r4, r2
	switch (type) {
    84a2:	2901      	cmp	r1, #1
    84a4:	d00e      	beq.n	84c4 <_spi_m_dma_register_callback+0x28>
    84a6:	b111      	cbz	r1, 84ae <_spi_m_dma_register_callback+0x12>
    84a8:	2902      	cmp	r1, #2
    84aa:	d016      	beq.n	84da <_spi_m_dma_register_callback+0x3e>
    84ac:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    84ae:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    84b0:	6800      	ldr	r0, [r0, #0]
    84b2:	4b13      	ldr	r3, [pc, #76]	; (8500 <_spi_m_dma_register_callback+0x64>)
    84b4:	4798      	blx	r3
    84b6:	1c22      	adds	r2, r4, #0
    84b8:	bf18      	it	ne
    84ba:	2201      	movne	r2, #1
    84bc:	2100      	movs	r1, #0
    84be:	4b11      	ldr	r3, [pc, #68]	; (8504 <_spi_m_dma_register_callback+0x68>)
    84c0:	4798      	blx	r3
		break;
    84c2:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    84c4:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    84c6:	6800      	ldr	r0, [r0, #0]
    84c8:	4b0f      	ldr	r3, [pc, #60]	; (8508 <_spi_m_dma_register_callback+0x6c>)
    84ca:	4798      	blx	r3
    84cc:	1c22      	adds	r2, r4, #0
    84ce:	bf18      	it	ne
    84d0:	2201      	movne	r2, #1
    84d2:	2100      	movs	r1, #0
    84d4:	4b0b      	ldr	r3, [pc, #44]	; (8504 <_spi_m_dma_register_callback+0x68>)
    84d6:	4798      	blx	r3
		break;
    84d8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    84da:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    84dc:	6800      	ldr	r0, [r0, #0]
    84de:	4b0a      	ldr	r3, [pc, #40]	; (8508 <_spi_m_dma_register_callback+0x6c>)
    84e0:	4798      	blx	r3
    84e2:	3400      	adds	r4, #0
    84e4:	bf18      	it	ne
    84e6:	2401      	movne	r4, #1
    84e8:	4622      	mov	r2, r4
    84ea:	2101      	movs	r1, #1
    84ec:	4e05      	ldr	r6, [pc, #20]	; (8504 <_spi_m_dma_register_callback+0x68>)
    84ee:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    84f0:	6828      	ldr	r0, [r5, #0]
    84f2:	4b03      	ldr	r3, [pc, #12]	; (8500 <_spi_m_dma_register_callback+0x64>)
    84f4:	4798      	blx	r3
    84f6:	4622      	mov	r2, r4
    84f8:	2101      	movs	r1, #1
    84fa:	47b0      	blx	r6
    84fc:	bd70      	pop	{r4, r5, r6, pc}
    84fe:	bf00      	nop
    8500:	00007cdd 	.word	0x00007cdd
    8504:	000070dd 	.word	0x000070dd
    8508:	00007cf1 	.word	0x00007cf1

0000850c <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    850c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8510:	4607      	mov	r7, r0
    8512:	468a      	mov	sl, r1
    8514:	4690      	mov	r8, r2
    8516:	4699      	mov	r9, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    8518:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    851a:	4620      	mov	r0, r4
    851c:	4b39      	ldr	r3, [pc, #228]	; (8604 <_spi_m_dma_transfer+0xf8>)
    851e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    8520:	2803      	cmp	r0, #3
    8522:	d048      	beq.n	85b6 <_spi_m_dma_transfer+0xaa>
    8524:	2807      	cmp	r0, #7
    8526:	bf08      	it	eq
    8528:	2201      	moveq	r2, #1
    852a:	d045      	beq.n	85b8 <_spi_m_dma_transfer+0xac>
	return NULL;
    852c:	f04f 0b00 	mov.w	fp, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    8530:	4620      	mov	r0, r4
    8532:	4b35      	ldr	r3, [pc, #212]	; (8608 <_spi_m_dma_transfer+0xfc>)
    8534:	4798      	blx	r3
    8536:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    8538:	4620      	mov	r0, r4
    853a:	4b34      	ldr	r3, [pc, #208]	; (860c <_spi_m_dma_transfer+0x100>)
    853c:	4798      	blx	r3
    853e:	4605      	mov	r5, r0

	if (rxbuf) {
    8540:	f1b8 0f00 	cmp.w	r8, #0
    8544:	d03d      	beq.n	85c2 <_spi_m_dma_transfer+0xb6>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8546:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    8548:	f013 0f04 	tst.w	r3, #4
    854c:	d107      	bne.n	855e <_spi_m_dma_transfer+0x52>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    854e:	6863      	ldr	r3, [r4, #4]
    8550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8554:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8556:	69e3      	ldr	r3, [r4, #28]
    8558:	f013 0f17 	tst.w	r3, #23
    855c:	d1fb      	bne.n	8556 <_spi_m_dma_transfer+0x4a>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    855e:	6839      	ldr	r1, [r7, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    8560:	3128      	adds	r1, #40	; 0x28
    8562:	4630      	mov	r0, r6
    8564:	4b2a      	ldr	r3, [pc, #168]	; (8610 <_spi_m_dma_transfer+0x104>)
    8566:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    8568:	4641      	mov	r1, r8
    856a:	4630      	mov	r0, r6
    856c:	4b29      	ldr	r3, [pc, #164]	; (8614 <_spi_m_dma_transfer+0x108>)
    856e:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    8570:	4649      	mov	r1, r9
    8572:	4630      	mov	r0, r6
    8574:	4b28      	ldr	r3, [pc, #160]	; (8618 <_spi_m_dma_transfer+0x10c>)
    8576:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    8578:	2100      	movs	r1, #0
    857a:	4630      	mov	r0, r6
    857c:	4b27      	ldr	r3, [pc, #156]	; (861c <_spi_m_dma_transfer+0x110>)
    857e:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    8580:	f1ba 0f00 	cmp.w	sl, #0
    8584:	d02a      	beq.n	85dc <_spi_m_dma_transfer+0xd0>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    8586:	4651      	mov	r1, sl
    8588:	4628      	mov	r0, r5
    858a:	4b21      	ldr	r3, [pc, #132]	; (8610 <_spi_m_dma_transfer+0x104>)
    858c:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    858e:	6839      	ldr	r1, [r7, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    8590:	3128      	adds	r1, #40	; 0x28
    8592:	4628      	mov	r0, r5
    8594:	4b1f      	ldr	r3, [pc, #124]	; (8614 <_spi_m_dma_transfer+0x108>)
    8596:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    8598:	2101      	movs	r1, #1
    859a:	4628      	mov	r0, r5
    859c:	4b20      	ldr	r3, [pc, #128]	; (8620 <_spi_m_dma_transfer+0x114>)
    859e:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    85a0:	4649      	mov	r1, r9
    85a2:	4628      	mov	r0, r5
    85a4:	4b1c      	ldr	r3, [pc, #112]	; (8618 <_spi_m_dma_transfer+0x10c>)
    85a6:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    85a8:	2100      	movs	r1, #0
    85aa:	4628      	mov	r0, r5
    85ac:	4b1b      	ldr	r3, [pc, #108]	; (861c <_spi_m_dma_transfer+0x110>)
    85ae:	4798      	blx	r3

	return ERR_NONE;
}
    85b0:	2000      	movs	r0, #0
    85b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    85b6:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    85b8:	4b1a      	ldr	r3, [pc, #104]	; (8624 <_spi_m_dma_transfer+0x118>)
    85ba:	eb03 1b02 	add.w	fp, r3, r2, lsl #4
    85be:	4493      	add	fp, r2
    85c0:	e7b6      	b.n	8530 <_spi_m_dma_transfer+0x24>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    85c2:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    85c4:	f013 0f04 	tst.w	r3, #4
    85c8:	d1da      	bne.n	8580 <_spi_m_dma_transfer+0x74>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    85ca:	6863      	ldr	r3, [r4, #4]
    85cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    85d0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    85d2:	69e3      	ldr	r3, [r4, #28]
    85d4:	f013 0f17 	tst.w	r3, #23
    85d8:	d1fb      	bne.n	85d2 <_spi_m_dma_transfer+0xc6>
    85da:	e7d1      	b.n	8580 <_spi_m_dma_transfer+0x74>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    85dc:	f10b 010e 	add.w	r1, fp, #14
    85e0:	4628      	mov	r0, r5
    85e2:	4b0b      	ldr	r3, [pc, #44]	; (8610 <_spi_m_dma_transfer+0x104>)
    85e4:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    85e6:	6839      	ldr	r1, [r7, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    85e8:	3128      	adds	r1, #40	; 0x28
    85ea:	4628      	mov	r0, r5
    85ec:	4b09      	ldr	r3, [pc, #36]	; (8614 <_spi_m_dma_transfer+0x108>)
    85ee:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    85f0:	2100      	movs	r1, #0
    85f2:	4628      	mov	r0, r5
    85f4:	4b0a      	ldr	r3, [pc, #40]	; (8620 <_spi_m_dma_transfer+0x114>)
    85f6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    85f8:	4649      	mov	r1, r9
    85fa:	4628      	mov	r0, r5
    85fc:	4b06      	ldr	r3, [pc, #24]	; (8618 <_spi_m_dma_transfer+0x10c>)
    85fe:	4798      	blx	r3
    8600:	e7d2      	b.n	85a8 <_spi_m_dma_transfer+0x9c>
    8602:	bf00      	nop
    8604:	0000772d 	.word	0x0000772d
    8608:	00007cf1 	.word	0x00007cf1
    860c:	00007cdd 	.word	0x00007cdd
    8610:	00007141 	.word	0x00007141
    8614:	00007131 	.word	0x00007131
    8618:	0000716d 	.word	0x0000716d
    861c:	000071c5 	.word	0x000071c5
    8620:	00007151 	.word	0x00007151
    8624:	0000c8b8 	.word	0x0000c8b8

00008628 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    8628:	4b03      	ldr	r3, [pc, #12]	; (8638 <_delay_init+0x10>)
    862a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    862e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    8630:	2205      	movs	r2, #5
    8632:	601a      	str	r2, [r3, #0]
    8634:	4770      	bx	lr
    8636:	bf00      	nop
    8638:	e000e010 	.word	0xe000e010

0000863c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    863c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    863e:	b303      	cbz	r3, 8682 <_delay_cycles+0x46>
{
    8640:	b430      	push	{r4, r5}
    8642:	1e5d      	subs	r5, r3, #1
    8644:	b2ed      	uxtb	r5, r5
	while (n--) {
    8646:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    8648:	4a12      	ldr	r2, [pc, #72]	; (8694 <_delay_cycles+0x58>)
    864a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    864e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    8650:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8652:	6813      	ldr	r3, [r2, #0]
    8654:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8658:	d0fb      	beq.n	8652 <_delay_cycles+0x16>
	while (n--) {
    865a:	3801      	subs	r0, #1
    865c:	b2c0      	uxtb	r0, r0
    865e:	28ff      	cmp	r0, #255	; 0xff
    8660:	d1f5      	bne.n	864e <_delay_cycles+0x12>
    8662:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    8666:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    866a:	3101      	adds	r1, #1
    866c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    866e:	4b09      	ldr	r3, [pc, #36]	; (8694 <_delay_cycles+0x58>)
    8670:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    8672:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8674:	461a      	mov	r2, r3
    8676:	6813      	ldr	r3, [r2, #0]
    8678:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    867c:	d0fb      	beq.n	8676 <_delay_cycles+0x3a>
		;
}
    867e:	bc30      	pop	{r4, r5}
    8680:	4770      	bx	lr
	SysTick->LOAD = buf;
    8682:	4b04      	ldr	r3, [pc, #16]	; (8694 <_delay_cycles+0x58>)
    8684:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    8686:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8688:	461a      	mov	r2, r3
    868a:	6813      	ldr	r3, [r2, #0]
    868c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8690:	d0fb      	beq.n	868a <_delay_cycles+0x4e>
    8692:	4770      	bx	lr
    8694:	e000e010 	.word	0xe000e010

00008698 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8698:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    869a:	6813      	ldr	r3, [r2, #0]
    869c:	f043 0302 	orr.w	r3, r3, #2
    86a0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86a2:	6913      	ldr	r3, [r2, #16]
    86a4:	f013 0f03 	tst.w	r3, #3
    86a8:	d1fb      	bne.n	86a2 <_tc_timer_start+0xa>
}
    86aa:	4770      	bx	lr

000086ac <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    86ac:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    86ae:	6813      	ldr	r3, [r2, #0]
    86b0:	f023 0302 	bic.w	r3, r3, #2
    86b4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86b6:	6913      	ldr	r3, [r2, #16]
    86b8:	f013 0f03 	tst.w	r3, #3
    86bc:	d1fb      	bne.n	86b6 <_tc_timer_stop+0xa>
}
    86be:	4770      	bx	lr

000086c0 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    86c0:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    86c2:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    86c4:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    86c8:	2a02      	cmp	r2, #2
    86ca:	d00a      	beq.n	86e2 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    86cc:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    86ce:	f012 0f0c 	tst.w	r2, #12
    86d2:	d10c      	bne.n	86ee <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    86d4:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    86d6:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86d8:	691a      	ldr	r2, [r3, #16]
    86da:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    86de:	d1fb      	bne.n	86d8 <_tc_timer_set_period+0x18>
    86e0:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    86e2:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86e4:	691a      	ldr	r2, [r3, #16]
    86e6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    86ea:	d1fb      	bne.n	86e4 <_tc_timer_set_period+0x24>
    86ec:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    86ee:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    86f0:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    86f4:	2a01      	cmp	r2, #1
    86f6:	d000      	beq.n	86fa <_tc_timer_set_period+0x3a>
    86f8:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    86fa:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    86fc:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86fe:	691a      	ldr	r2, [r3, #16]
    8700:	f012 0f20 	tst.w	r2, #32
    8704:	d1fb      	bne.n	86fe <_tc_timer_set_period+0x3e>
    8706:	e7f7      	b.n	86f8 <_tc_timer_set_period+0x38>

00008708 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    8708:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    870a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    870c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8710:	2a02      	cmp	r2, #2
    8712:	d00a      	beq.n	872a <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8714:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8716:	f012 0f0c 	tst.w	r2, #12
    871a:	d10c      	bne.n	8736 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    871c:	691a      	ldr	r2, [r3, #16]
    871e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    8722:	d1fb      	bne.n	871c <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8724:	8b98      	ldrh	r0, [r3, #28]
    8726:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    8728:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    872a:	691a      	ldr	r2, [r3, #16]
    872c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    8730:	d1fb      	bne.n	872a <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    8732:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    8734:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8736:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8738:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    873c:	2a01      	cmp	r2, #1
    873e:	d001      	beq.n	8744 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    8740:	2000      	movs	r0, #0
}
    8742:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8744:	691a      	ldr	r2, [r3, #16]
    8746:	f012 0f20 	tst.w	r2, #32
    874a:	d1fb      	bne.n	8744 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    874c:	7ed8      	ldrb	r0, [r3, #27]
    874e:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    8750:	4770      	bx	lr

00008752 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8752:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8754:	6913      	ldr	r3, [r2, #16]
    8756:	f013 0f03 	tst.w	r3, #3
    875a:	d1fb      	bne.n	8754 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    875c:	6810      	ldr	r0, [r2, #0]
}
    875e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8762:	4770      	bx	lr

00008764 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8764:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    8766:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8768:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    876a:	f012 0f01 	tst.w	r2, #1
    876e:	d100      	bne.n	8772 <tc_interrupt_handler+0xe>
    8770:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8772:	2201      	movs	r2, #1
    8774:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    8776:	6803      	ldr	r3, [r0, #0]
    8778:	4798      	blx	r3
	}
}
    877a:	e7f9      	b.n	8770 <tc_interrupt_handler+0xc>

0000877c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    877c:	b470      	push	{r4, r5, r6}
    877e:	b089      	sub	sp, #36	; 0x24
    8780:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8782:	466c      	mov	r4, sp
    8784:	4d16      	ldr	r5, [pc, #88]	; (87e0 <get_tc_index+0x64>)
    8786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    878a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    878e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8792:	9b00      	ldr	r3, [sp, #0]
    8794:	42b3      	cmp	r3, r6
    8796:	d00c      	beq.n	87b2 <get_tc_index+0x36>
    8798:	4630      	mov	r0, r6
    879a:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    879c:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    879e:	f852 1b04 	ldr.w	r1, [r2], #4
    87a2:	4281      	cmp	r1, r0
    87a4:	d006      	beq.n	87b4 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    87a6:	3301      	adds	r3, #1
    87a8:	2b08      	cmp	r3, #8
    87aa:	d1f8      	bne.n	879e <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    87ac:	2000      	movs	r0, #0
			return i;
    87ae:	b240      	sxtb	r0, r0
    87b0:	e00d      	b.n	87ce <get_tc_index+0x52>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    87b2:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    87b4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    87b8:	d010      	beq.n	87dc <get_tc_index+0x60>
    87ba:	2b01      	cmp	r3, #1
    87bc:	d00a      	beq.n	87d4 <get_tc_index+0x58>
    87be:	2b02      	cmp	r3, #2
    87c0:	d00a      	beq.n	87d8 <get_tc_index+0x5c>
    87c2:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    87c4:	bf08      	it	eq
    87c6:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    87c8:	d0f1      	beq.n	87ae <get_tc_index+0x32>
	return -1;
    87ca:	f04f 30ff 	mov.w	r0, #4294967295
}
    87ce:	b009      	add	sp, #36	; 0x24
    87d0:	bc70      	pop	{r4, r5, r6}
    87d2:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    87d4:	2001      	movs	r0, #1
    87d6:	e7ea      	b.n	87ae <get_tc_index+0x32>
    87d8:	2002      	movs	r0, #2
    87da:	e7e8      	b.n	87ae <get_tc_index+0x32>
    87dc:	2000      	movs	r0, #0
    87de:	e7e6      	b.n	87ae <get_tc_index+0x32>
    87e0:	0000c8dc 	.word	0x0000c8dc

000087e4 <_tc_timer_deinit>:
{
    87e4:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    87e6:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    87e8:	4620      	mov	r0, r4
    87ea:	4b15      	ldr	r3, [pc, #84]	; (8840 <_tc_timer_deinit+0x5c>)
    87ec:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    87ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    87f2:	4b14      	ldr	r3, [pc, #80]	; (8844 <_tc_timer_deinit+0x60>)
    87f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    87f8:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    87fc:	2b00      	cmp	r3, #0
    87fe:	db0d      	blt.n	881c <_tc_timer_deinit+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8800:	095a      	lsrs	r2, r3, #5
    8802:	f003 031f 	and.w	r3, r3, #31
    8806:	2101      	movs	r1, #1
    8808:	fa01 f303 	lsl.w	r3, r1, r3
    880c:	3220      	adds	r2, #32
    880e:	490e      	ldr	r1, [pc, #56]	; (8848 <_tc_timer_deinit+0x64>)
    8810:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8814:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8818:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    881c:	6823      	ldr	r3, [r4, #0]
    881e:	f023 0302 	bic.w	r3, r3, #2
    8822:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8824:	6923      	ldr	r3, [r4, #16]
    8826:	f013 0f03 	tst.w	r3, #3
    882a:	d1fb      	bne.n	8824 <_tc_timer_deinit+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    882c:	6823      	ldr	r3, [r4, #0]
    882e:	f043 0301 	orr.w	r3, r3, #1
    8832:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8834:	6923      	ldr	r3, [r4, #16]
    8836:	f013 0f01 	tst.w	r3, #1
    883a:	d1fb      	bne.n	8834 <_tc_timer_deinit+0x50>
}
    883c:	bd10      	pop	{r4, pc}
    883e:	bf00      	nop
    8840:	0000877d 	.word	0x0000877d
    8844:	0000c8dc 	.word	0x0000c8dc
    8848:	e000e100 	.word	0xe000e100

0000884c <_tc_timer_init>:
{
    884c:	b538      	push	{r3, r4, r5, lr}
    884e:	4605      	mov	r5, r0
    8850:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    8852:	4608      	mov	r0, r1
    8854:	4b6e      	ldr	r3, [pc, #440]	; (8a10 <_tc_timer_init+0x1c4>)
    8856:	4798      	blx	r3
	device->hw = hw;
    8858:	60ec      	str	r4, [r5, #12]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    885a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    885c:	f013 0f01 	tst.w	r3, #1
    8860:	d119      	bne.n	8896 <_tc_timer_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8862:	6923      	ldr	r3, [r4, #16]
    8864:	f013 0f03 	tst.w	r3, #3
    8868:	d1fb      	bne.n	8862 <_tc_timer_init+0x16>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    886a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    886c:	f013 0f02 	tst.w	r3, #2
    8870:	d00b      	beq.n	888a <_tc_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8872:	6823      	ldr	r3, [r4, #0]
    8874:	f023 0302 	bic.w	r3, r3, #2
    8878:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    887a:	6923      	ldr	r3, [r4, #16]
    887c:	f013 0f03 	tst.w	r3, #3
    8880:	d1fb      	bne.n	887a <_tc_timer_init+0x2e>
    8882:	6923      	ldr	r3, [r4, #16]
    8884:	f013 0f02 	tst.w	r3, #2
    8888:	d1fb      	bne.n	8882 <_tc_timer_init+0x36>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    888a:	2301      	movs	r3, #1
    888c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    888e:	6923      	ldr	r3, [r4, #16]
    8890:	f013 0f03 	tst.w	r3, #3
    8894:	d1fb      	bne.n	888e <_tc_timer_init+0x42>
    8896:	6923      	ldr	r3, [r4, #16]
    8898:	f013 0f01 	tst.w	r3, #1
    889c:	d1fb      	bne.n	8896 <_tc_timer_init+0x4a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    889e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    88a2:	4a5c      	ldr	r2, [pc, #368]	; (8a14 <_tc_timer_init+0x1c8>)
    88a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    88a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    88aa:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    88ac:	6923      	ldr	r3, [r4, #16]
    88ae:	f013 0f03 	tst.w	r3, #3
    88b2:	d1fb      	bne.n	88ac <_tc_timer_init+0x60>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    88b4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    88b8:	4956      	ldr	r1, [pc, #344]	; (8a14 <_tc_timer_init+0x1c8>)
    88ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    88be:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    88c2:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    88c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    88c6:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    88c8:	2301      	movs	r3, #1
    88ca:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    88cc:	f002 020c 	and.w	r2, r2, #12
    88d0:	2a08      	cmp	r2, #8
    88d2:	d056      	beq.n	8982 <_tc_timer_init+0x136>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    88d4:	2a00      	cmp	r2, #0
    88d6:	d16b      	bne.n	89b0 <_tc_timer_init+0x164>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    88d8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    88dc:	4a4d      	ldr	r2, [pc, #308]	; (8a14 <_tc_timer_init+0x1c8>)
    88de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    88e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    88e4:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    88e6:	6923      	ldr	r3, [r4, #16]
    88e8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    88ec:	d1fb      	bne.n	88e6 <_tc_timer_init+0x9a>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    88ee:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    88f2:	4a48      	ldr	r2, [pc, #288]	; (8a14 <_tc_timer_init+0x1c8>)
    88f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    88f8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    88fa:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    88fc:	6923      	ldr	r3, [r4, #16]
    88fe:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8902:	d1fb      	bne.n	88fc <_tc_timer_init+0xb0>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    8904:	2301      	movs	r3, #1
    8906:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    8908:	4b43      	ldr	r3, [pc, #268]	; (8a18 <_tc_timer_init+0x1cc>)
    890a:	429c      	cmp	r4, r3
    890c:	d077      	beq.n	89fe <_tc_timer_init+0x1b2>
	if (hw == TC1) {
    890e:	4b43      	ldr	r3, [pc, #268]	; (8a1c <_tc_timer_init+0x1d0>)
    8910:	429c      	cmp	r4, r3
    8912:	d077      	beq.n	8a04 <_tc_timer_init+0x1b8>
	if (hw == TC2) {
    8914:	4b42      	ldr	r3, [pc, #264]	; (8a20 <_tc_timer_init+0x1d4>)
    8916:	429c      	cmp	r4, r3
    8918:	d077      	beq.n	8a0a <_tc_timer_init+0x1be>
	if (hw == TC3) {
    891a:	4b42      	ldr	r3, [pc, #264]	; (8a24 <_tc_timer_init+0x1d8>)
    891c:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    891e:	bf04      	itt	eq
    8920:	4b41      	ldreq	r3, [pc, #260]	; (8a28 <_tc_timer_init+0x1dc>)
    8922:	60dd      	streq	r5, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    8924:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8928:	4a3a      	ldr	r2, [pc, #232]	; (8a14 <_tc_timer_init+0x1c8>)
    892a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    892e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8932:	2b00      	cmp	r3, #0
    8934:	db23      	blt.n	897e <_tc_timer_init+0x132>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8936:	095a      	lsrs	r2, r3, #5
    8938:	f003 031f 	and.w	r3, r3, #31
    893c:	2101      	movs	r1, #1
    893e:	fa01 f303 	lsl.w	r3, r1, r3
    8942:	3220      	adds	r2, #32
    8944:	4939      	ldr	r1, [pc, #228]	; (8a2c <_tc_timer_init+0x1e0>)
    8946:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    894a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    894e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8952:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8956:	4b2f      	ldr	r3, [pc, #188]	; (8a14 <_tc_timer_init+0x1c8>)
    8958:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    895c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8960:	2b00      	cmp	r3, #0
    8962:	db0c      	blt.n	897e <_tc_timer_init+0x132>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8964:	0959      	lsrs	r1, r3, #5
    8966:	f003 031f 	and.w	r3, r3, #31
    896a:	2201      	movs	r2, #1
    896c:	fa02 f303 	lsl.w	r3, r2, r3
    8970:	4a2e      	ldr	r2, [pc, #184]	; (8a2c <_tc_timer_init+0x1e0>)
    8972:	f101 0060 	add.w	r0, r1, #96	; 0x60
    8976:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    897a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    897e:	2000      	movs	r0, #0
    8980:	bd38      	pop	{r3, r4, r5, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8982:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8986:	4a23      	ldr	r2, [pc, #140]	; (8a14 <_tc_timer_init+0x1c8>)
    8988:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    898e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8990:	6923      	ldr	r3, [r4, #16]
    8992:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8996:	d1fb      	bne.n	8990 <_tc_timer_init+0x144>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8998:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    899c:	4a1d      	ldr	r2, [pc, #116]	; (8a14 <_tc_timer_init+0x1c8>)
    899e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    89a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    89a4:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    89a6:	6923      	ldr	r3, [r4, #16]
    89a8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    89ac:	d1fb      	bne.n	89a6 <_tc_timer_init+0x15a>
    89ae:	e7a9      	b.n	8904 <_tc_timer_init+0xb8>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    89b0:	2a04      	cmp	r2, #4
    89b2:	d1a7      	bne.n	8904 <_tc_timer_init+0xb8>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    89b4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    89b8:	4a16      	ldr	r2, [pc, #88]	; (8a14 <_tc_timer_init+0x1c8>)
    89ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    89be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    89c2:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    89c4:	6923      	ldr	r3, [r4, #16]
    89c6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    89ca:	d1fb      	bne.n	89c4 <_tc_timer_init+0x178>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    89cc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    89d0:	4a10      	ldr	r2, [pc, #64]	; (8a14 <_tc_timer_init+0x1c8>)
    89d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    89d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    89da:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    89dc:	6923      	ldr	r3, [r4, #16]
    89de:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    89e2:	d1fb      	bne.n	89dc <_tc_timer_init+0x190>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    89e4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    89e8:	4a0a      	ldr	r2, [pc, #40]	; (8a14 <_tc_timer_init+0x1c8>)
    89ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    89ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    89f2:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    89f4:	6923      	ldr	r3, [r4, #16]
    89f6:	f013 0f20 	tst.w	r3, #32
    89fa:	d1fb      	bne.n	89f4 <_tc_timer_init+0x1a8>
    89fc:	e782      	b.n	8904 <_tc_timer_init+0xb8>
		_tc0_dev = (struct _timer_device *)dev;
    89fe:	4b0a      	ldr	r3, [pc, #40]	; (8a28 <_tc_timer_init+0x1dc>)
    8a00:	601d      	str	r5, [r3, #0]
    8a02:	e78a      	b.n	891a <_tc_timer_init+0xce>
		_tc1_dev = (struct _timer_device *)dev;
    8a04:	4b08      	ldr	r3, [pc, #32]	; (8a28 <_tc_timer_init+0x1dc>)
    8a06:	605d      	str	r5, [r3, #4]
    8a08:	e78c      	b.n	8924 <_tc_timer_init+0xd8>
		_tc2_dev = (struct _timer_device *)dev;
    8a0a:	4b07      	ldr	r3, [pc, #28]	; (8a28 <_tc_timer_init+0x1dc>)
    8a0c:	609d      	str	r5, [r3, #8]
    8a0e:	e789      	b.n	8924 <_tc_timer_init+0xd8>
    8a10:	0000877d 	.word	0x0000877d
    8a14:	0000c8dc 	.word	0x0000c8dc
    8a18:	40003800 	.word	0x40003800
    8a1c:	40003c00 	.word	0x40003c00
    8a20:	4101a000 	.word	0x4101a000
    8a24:	4101c000 	.word	0x4101c000
    8a28:	20000494 	.word	0x20000494
    8a2c:	e000e100 	.word	0xe000e100

00008a30 <_tc_timer_set_irq>:
{
    8a30:	b508      	push	{r3, lr}
	int8_t      i  = get_tc_index(hw);
    8a32:	68c0      	ldr	r0, [r0, #12]
    8a34:	4b05      	ldr	r3, [pc, #20]	; (8a4c <_tc_timer_set_irq+0x1c>)
    8a36:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    8a38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8a3c:	4b04      	ldr	r3, [pc, #16]	; (8a50 <_tc_timer_set_irq+0x20>)
    8a3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a42:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    8a46:	4b03      	ldr	r3, [pc, #12]	; (8a54 <_tc_timer_set_irq+0x24>)
    8a48:	4798      	blx	r3
    8a4a:	bd08      	pop	{r3, pc}
    8a4c:	0000877d 	.word	0x0000877d
    8a50:	0000c8dc 	.word	0x0000c8dc
    8a54:	00006f05 	.word	0x00006f05

00008a58 <_tc_get_timer>:
}
    8a58:	4800      	ldr	r0, [pc, #0]	; (8a5c <_tc_get_timer+0x4>)
    8a5a:	4770      	bx	lr
    8a5c:	20000024 	.word	0x20000024

00008a60 <TC0_Handler>:
{
    8a60:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    8a62:	4b02      	ldr	r3, [pc, #8]	; (8a6c <TC0_Handler+0xc>)
    8a64:	6818      	ldr	r0, [r3, #0]
    8a66:	4b02      	ldr	r3, [pc, #8]	; (8a70 <TC0_Handler+0x10>)
    8a68:	4798      	blx	r3
    8a6a:	bd08      	pop	{r3, pc}
    8a6c:	20000494 	.word	0x20000494
    8a70:	00008765 	.word	0x00008765

00008a74 <TC1_Handler>:
{
    8a74:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    8a76:	4b02      	ldr	r3, [pc, #8]	; (8a80 <TC1_Handler+0xc>)
    8a78:	6858      	ldr	r0, [r3, #4]
    8a7a:	4b02      	ldr	r3, [pc, #8]	; (8a84 <TC1_Handler+0x10>)
    8a7c:	4798      	blx	r3
    8a7e:	bd08      	pop	{r3, pc}
    8a80:	20000494 	.word	0x20000494
    8a84:	00008765 	.word	0x00008765

00008a88 <TC2_Handler>:
{
    8a88:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    8a8a:	4b02      	ldr	r3, [pc, #8]	; (8a94 <TC2_Handler+0xc>)
    8a8c:	6898      	ldr	r0, [r3, #8]
    8a8e:	4b02      	ldr	r3, [pc, #8]	; (8a98 <TC2_Handler+0x10>)
    8a90:	4798      	blx	r3
    8a92:	bd08      	pop	{r3, pc}
    8a94:	20000494 	.word	0x20000494
    8a98:	00008765 	.word	0x00008765

00008a9c <TC3_Handler>:
{
    8a9c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    8a9e:	4b02      	ldr	r3, [pc, #8]	; (8aa8 <TC3_Handler+0xc>)
    8aa0:	68d8      	ldr	r0, [r3, #12]
    8aa2:	4b02      	ldr	r3, [pc, #8]	; (8aac <TC3_Handler+0x10>)
    8aa4:	4798      	blx	r3
    8aa6:	bd08      	pop	{r3, pc}
    8aa8:	20000494 	.word	0x20000494
    8aac:	00008765 	.word	0x00008765

00008ab0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    8ab0:	2000      	movs	r0, #0
    8ab2:	4770      	bx	lr

00008ab4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8ab4:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8ab6:	7c83      	ldrb	r3, [r0, #18]
    8ab8:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8abc:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    8abe:	f002 0107 	and.w	r1, r2, #7
    8ac2:	2901      	cmp	r1, #1
    8ac4:	d00b      	beq.n	8ade <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8ac6:	015a      	lsls	r2, r3, #5
    8ac8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8acc:	2110      	movs	r1, #16
    8ace:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8ad2:	015b      	lsls	r3, r3, #5
    8ad4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8ad8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    8adc:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    8ade:	f012 0f40 	tst.w	r2, #64	; 0x40
    8ae2:	d00c      	beq.n	8afe <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    8ae4:	7cc2      	ldrb	r2, [r0, #19]
    8ae6:	f36f 1286 	bfc	r2, #6, #1
    8aea:	74c2      	strb	r2, [r0, #19]
    8aec:	015a      	lsls	r2, r3, #5
    8aee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8af2:	2180      	movs	r1, #128	; 0x80
    8af4:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8af8:	2140      	movs	r1, #64	; 0x40
    8afa:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    8afe:	7cc2      	ldrb	r2, [r0, #19]
    8b00:	f36f 02c3 	bfc	r2, #3, #1
    8b04:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    8b06:	490a      	ldr	r1, [pc, #40]	; (8b30 <_usb_d_dev_handle_setup+0x7c>)
    8b08:	015a      	lsls	r2, r3, #5
    8b0a:	188c      	adds	r4, r1, r2
    8b0c:	2500      	movs	r5, #0
    8b0e:	72a5      	strb	r5, [r4, #10]
    8b10:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8b12:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    8b16:	246f      	movs	r4, #111	; 0x6f
    8b18:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8b1c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8b20:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    8b24:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    8b28:	7c80      	ldrb	r0, [r0, #18]
    8b2a:	4798      	blx	r3
    8b2c:	bd38      	pop	{r3, r4, r5, pc}
    8b2e:	bf00      	nop
    8b30:	200004a4 	.word	0x200004a4

00008b34 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8b34:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8b36:	2320      	movs	r3, #32
    8b38:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8b3c:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8b3e:	7c83      	ldrb	r3, [r0, #18]
    8b40:	f003 030f 	and.w	r3, r3, #15
    8b44:	015b      	lsls	r3, r3, #5
    8b46:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8b4a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    8b4e:	4b04      	ldr	r3, [pc, #16]	; (8b60 <_usb_d_dev_handle_stall+0x2c>)
    8b50:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    8b54:	6882      	ldr	r2, [r0, #8]
    8b56:	2101      	movs	r1, #1
    8b58:	7c80      	ldrb	r0, [r0, #18]
    8b5a:	4798      	blx	r3
    8b5c:	bd08      	pop	{r3, pc}
    8b5e:	bf00      	nop
    8b60:	200004a4 	.word	0x200004a4

00008b64 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    8b64:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8b66:	7c84      	ldrb	r4, [r0, #18]
    8b68:	2cff      	cmp	r4, #255	; 0xff
    8b6a:	d003      	beq.n	8b74 <_usb_d_dev_trans_done+0x10>
    8b6c:	7cc3      	ldrb	r3, [r0, #19]
    8b6e:	f013 0f40 	tst.w	r3, #64	; 0x40
    8b72:	d100      	bne.n	8b76 <_usb_d_dev_trans_done+0x12>
    8b74:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    8b76:	7cc2      	ldrb	r2, [r0, #19]
    8b78:	f36f 1286 	bfc	r2, #6, #1
    8b7c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    8b7e:	4a03      	ldr	r2, [pc, #12]	; (8b8c <_usb_d_dev_trans_done+0x28>)
    8b80:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    8b84:	6882      	ldr	r2, [r0, #8]
    8b86:	4620      	mov	r0, r4
    8b88:	47a8      	blx	r5
    8b8a:	e7f3      	b.n	8b74 <_usb_d_dev_trans_done+0x10>
    8b8c:	200004a4 	.word	0x200004a4

00008b90 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8b90:	b530      	push	{r4, r5, lr}
    8b92:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8b94:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    8b96:	2425      	movs	r4, #37	; 0x25
    8b98:	f88d 4004 	strb.w	r4, [sp, #4]
    8b9c:	244a      	movs	r4, #74	; 0x4a
    8b9e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8ba2:	2bff      	cmp	r3, #255	; 0xff
    8ba4:	d01e      	beq.n	8be4 <_usb_d_dev_trans_stop+0x54>
    8ba6:	7cc4      	ldrb	r4, [r0, #19]
    8ba8:	f014 0f40 	tst.w	r4, #64	; 0x40
    8bac:	d01a      	beq.n	8be4 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8bae:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    8bb2:	b1c9      	cbz	r1, 8be8 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8bb4:	0163      	lsls	r3, r4, #5
    8bb6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8bba:	2580      	movs	r5, #128	; 0x80
    8bbc:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    8bc0:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    8bc2:	a902      	add	r1, sp, #8
    8bc4:	440b      	add	r3, r1
    8bc6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8bca:	0163      	lsls	r3, r4, #5
    8bcc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8bd0:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8bd4:	0163      	lsls	r3, r4, #5
    8bd6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8bda:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    8bde:	4611      	mov	r1, r2
    8be0:	4b05      	ldr	r3, [pc, #20]	; (8bf8 <_usb_d_dev_trans_stop+0x68>)
    8be2:	4798      	blx	r3
}
    8be4:	b003      	add	sp, #12
    8be6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8be8:	0163      	lsls	r3, r4, #5
    8bea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8bee:	2540      	movs	r5, #64	; 0x40
    8bf0:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    8bf4:	e7e4      	b.n	8bc0 <_usb_d_dev_trans_stop+0x30>
    8bf6:	bf00      	nop
    8bf8:	00008b65 	.word	0x00008b65

00008bfc <_usb_d_dev_handle_trfail>:
{
    8bfc:	b530      	push	{r4, r5, lr}
    8bfe:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8c00:	7c83      	ldrb	r3, [r0, #18]
    8c02:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    8c06:	2204      	movs	r2, #4
    8c08:	f88d 2004 	strb.w	r2, [sp, #4]
    8c0c:	2208      	movs	r2, #8
    8c0e:	f88d 2005 	strb.w	r2, [sp, #5]
    8c12:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    8c14:	460c      	mov	r4, r1
    8c16:	b391      	cbz	r1, 8c7e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8c18:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    8c1c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8c20:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    8c24:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    8c28:	4a32      	ldr	r2, [pc, #200]	; (8cf4 <_usb_d_dev_handle_trfail+0xf8>)
    8c2a:	440a      	add	r2, r1
    8c2c:	7a91      	ldrb	r1, [r2, #10]
    8c2e:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8c30:	2d02      	cmp	r5, #2
    8c32:	d02c      	beq.n	8c8e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    8c34:	f011 0f02 	tst.w	r1, #2
    8c38:	d045      	beq.n	8cc6 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8c3a:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    8c3c:	7a91      	ldrb	r1, [r2, #10]
    8c3e:	f36f 0141 	bfc	r1, #1, #1
    8c42:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8c44:	aa02      	add	r2, sp, #8
    8c46:	4422      	add	r2, r4
    8c48:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8c4c:	015a      	lsls	r2, r3, #5
    8c4e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8c52:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8c56:	015b      	lsls	r3, r3, #5
    8c58:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8c5c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    8c60:	f005 0307 	and.w	r3, r5, #7
    8c64:	2b01      	cmp	r3, #1
    8c66:	d143      	bne.n	8cf0 <_usb_d_dev_handle_trfail+0xf4>
    8c68:	7cc3      	ldrb	r3, [r0, #19]
    8c6a:	f013 0f40 	tst.w	r3, #64	; 0x40
    8c6e:	d03f      	beq.n	8cf0 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8c70:	09d9      	lsrs	r1, r3, #7
    8c72:	428c      	cmp	r4, r1
    8c74:	d03c      	beq.n	8cf0 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8c76:	2200      	movs	r2, #0
    8c78:	4b1f      	ldr	r3, [pc, #124]	; (8cf8 <_usb_d_dev_handle_trfail+0xfc>)
    8c7a:	4798      	blx	r3
    8c7c:	e038      	b.n	8cf0 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8c7e:	0159      	lsls	r1, r3, #5
    8c80:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8c84:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8c88:	f005 0507 	and.w	r5, r5, #7
    8c8c:	e7ca      	b.n	8c24 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8c8e:	f011 0f01 	tst.w	r1, #1
    8c92:	d0cf      	beq.n	8c34 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8c94:	7a91      	ldrb	r1, [r2, #10]
    8c96:	f36f 0100 	bfc	r1, #0, #1
    8c9a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8c9c:	aa02      	add	r2, sp, #8
    8c9e:	4422      	add	r2, r4
    8ca0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8ca4:	015a      	lsls	r2, r3, #5
    8ca6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8caa:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8cae:	015b      	lsls	r3, r3, #5
    8cb0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8cb4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8cb8:	2204      	movs	r2, #4
    8cba:	1c21      	adds	r1, r4, #0
    8cbc:	bf18      	it	ne
    8cbe:	2101      	movne	r1, #1
    8cc0:	4b0d      	ldr	r3, [pc, #52]	; (8cf8 <_usb_d_dev_handle_trfail+0xfc>)
    8cc2:	4798      	blx	r3
    8cc4:	e014      	b.n	8cf0 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    8cc6:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    8cca:	4a0a      	ldr	r2, [pc, #40]	; (8cf4 <_usb_d_dev_handle_trfail+0xf8>)
    8ccc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    8cd0:	2100      	movs	r1, #0
    8cd2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8cd4:	aa02      	add	r2, sp, #8
    8cd6:	4414      	add	r4, r2
    8cd8:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8cdc:	015a      	lsls	r2, r3, #5
    8cde:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8ce2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8ce6:	015b      	lsls	r3, r3, #5
    8ce8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8cec:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    8cf0:	b003      	add	sp, #12
    8cf2:	bd30      	pop	{r4, r5, pc}
    8cf4:	200004a4 	.word	0x200004a4
    8cf8:	00008b91 	.word	0x00008b91

00008cfc <_usb_d_dev_reset_epts>:
{
    8cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d00:	4d0c      	ldr	r5, [pc, #48]	; (8d34 <_usb_d_dev_reset_epts+0x38>)
    8d02:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    8d06:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8d0a:	f04f 0803 	mov.w	r8, #3
    8d0e:	4f0a      	ldr	r7, [pc, #40]	; (8d38 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    8d10:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8d12:	4641      	mov	r1, r8
    8d14:	4620      	mov	r0, r4
    8d16:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    8d18:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    8d1a:	2300      	movs	r3, #0
    8d1c:	74e3      	strb	r3, [r4, #19]
    8d1e:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8d20:	42ac      	cmp	r4, r5
    8d22:	d1f6      	bne.n	8d12 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    8d24:	22c0      	movs	r2, #192	; 0xc0
    8d26:	4619      	mov	r1, r3
    8d28:	4802      	ldr	r0, [pc, #8]	; (8d34 <_usb_d_dev_reset_epts+0x38>)
    8d2a:	4b04      	ldr	r3, [pc, #16]	; (8d3c <_usb_d_dev_reset_epts+0x40>)
    8d2c:	4798      	blx	r3
    8d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d32:	bf00      	nop
    8d34:	200004a4 	.word	0x200004a4
    8d38:	00008b65 	.word	0x00008b65
    8d3c:	0000b543 	.word	0x0000b543

00008d40 <_usb_d_dev_in_next>:
{
    8d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d44:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    8d46:	7c84      	ldrb	r4, [r0, #18]
    8d48:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8d4c:	4688      	mov	r8, r1
    8d4e:	2900      	cmp	r1, #0
    8d50:	f000 80a0 	beq.w	8e94 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8d54:	4b58      	ldr	r3, [pc, #352]	; (8eb8 <_usb_d_dev_in_next+0x178>)
    8d56:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8d5a:	6958      	ldr	r0, [r3, #20]
    8d5c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8d60:	8a2b      	ldrh	r3, [r5, #16]
    8d62:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8d66:	4293      	cmp	r3, r2
    8d68:	f000 808e 	beq.w	8e88 <_usb_d_dev_in_next+0x148>
    8d6c:	3b01      	subs	r3, #1
    8d6e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8d70:	7cef      	ldrb	r7, [r5, #19]
    8d72:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    8d76:	f1b8 0f00 	cmp.w	r8, #0
    8d7a:	d005      	beq.n	8d88 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8d7c:	0162      	lsls	r2, r4, #5
    8d7e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8d82:	2302      	movs	r3, #2
    8d84:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    8d88:	68a9      	ldr	r1, [r5, #8]
    8d8a:	eb0e 0301 	add.w	r3, lr, r1
    8d8e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    8d90:	686e      	ldr	r6, [r5, #4]
    8d92:	42b3      	cmp	r3, r6
    8d94:	d23f      	bcs.n	8e16 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    8d96:	1af6      	subs	r6, r6, r3
    8d98:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    8d9a:	7cea      	ldrb	r2, [r5, #19]
    8d9c:	f012 0f20 	tst.w	r2, #32
    8da0:	d02d      	beq.n	8dfe <_usb_d_dev_in_next+0xbe>
    8da2:	8a2a      	ldrh	r2, [r5, #16]
    8da4:	4296      	cmp	r6, r2
    8da6:	bf28      	it	cs
    8da8:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8daa:	6829      	ldr	r1, [r5, #0]
    8dac:	4632      	mov	r2, r6
    8dae:	4419      	add	r1, r3
    8db0:	68e8      	ldr	r0, [r5, #12]
    8db2:	4b42      	ldr	r3, [pc, #264]	; (8ebc <_usb_d_dev_in_next+0x17c>)
    8db4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8db6:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    8db8:	4b3f      	ldr	r3, [pc, #252]	; (8eb8 <_usb_d_dev_in_next+0x178>)
    8dba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8dbe:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8dc0:	4b3d      	ldr	r3, [pc, #244]	; (8eb8 <_usb_d_dev_in_next+0x178>)
    8dc2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8dc6:	695a      	ldr	r2, [r3, #20]
    8dc8:	f366 020d 	bfi	r2, r6, #0, #14
    8dcc:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8dce:	695a      	ldr	r2, [r3, #20]
    8dd0:	f36f 329b 	bfc	r2, #14, #14
    8dd4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    8dd6:	f1b8 0f00 	cmp.w	r8, #0
    8dda:	d108      	bne.n	8dee <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    8ddc:	2f01      	cmp	r7, #1
    8dde:	bf0c      	ite	eq
    8de0:	224e      	moveq	r2, #78	; 0x4e
    8de2:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8de4:	0163      	lsls	r3, r4, #5
    8de6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8dea:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8dee:	0164      	lsls	r4, r4, #5
    8df0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8df4:	2380      	movs	r3, #128	; 0x80
    8df6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    8dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dfe:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    8e02:	bf28      	it	cs
    8e04:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8e08:	6829      	ldr	r1, [r5, #0]
    8e0a:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    8e0c:	4a2a      	ldr	r2, [pc, #168]	; (8eb8 <_usb_d_dev_in_next+0x178>)
    8e0e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    8e12:	6113      	str	r3, [r2, #16]
    8e14:	e7d4      	b.n	8dc0 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    8e16:	7ceb      	ldrb	r3, [r5, #19]
    8e18:	f013 0f10 	tst.w	r3, #16
    8e1c:	d00f      	beq.n	8e3e <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    8e1e:	7ceb      	ldrb	r3, [r5, #19]
    8e20:	f36f 1304 	bfc	r3, #4, #1
    8e24:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8e26:	4b24      	ldr	r3, [pc, #144]	; (8eb8 <_usb_d_dev_in_next+0x178>)
    8e28:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8e2c:	695a      	ldr	r2, [r3, #20]
    8e2e:	f36f 020d 	bfc	r2, #0, #14
    8e32:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8e34:	695a      	ldr	r2, [r3, #20]
    8e36:	f36f 329b 	bfc	r2, #14, #14
    8e3a:	615a      	str	r2, [r3, #20]
    8e3c:	e7cb      	b.n	8dd6 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    8e3e:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8e40:	ea4f 1444 	mov.w	r4, r4, lsl #5
    8e44:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8e48:	bf0c      	ite	eq
    8e4a:	234b      	moveq	r3, #75	; 0x4b
    8e4c:	234a      	movne	r3, #74	; 0x4a
    8e4e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    8e52:	8a2a      	ldrh	r2, [r5, #16]
    8e54:	ea00 030e 	and.w	r3, r0, lr
    8e58:	429a      	cmp	r2, r3
    8e5a:	d005      	beq.n	8e68 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8e5c:	2100      	movs	r1, #0
    8e5e:	4628      	mov	r0, r5
    8e60:	4b17      	ldr	r3, [pc, #92]	; (8ec0 <_usb_d_dev_in_next+0x180>)
    8e62:	4798      	blx	r3
	return;
    8e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    8e68:	7ceb      	ldrb	r3, [r5, #19]
    8e6a:	f36f 1386 	bfc	r3, #6, #1
    8e6e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8e70:	4b11      	ldr	r3, [pc, #68]	; (8eb8 <_usb_d_dev_in_next+0x178>)
    8e72:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    8e76:	68a9      	ldr	r1, [r5, #8]
    8e78:	7ca8      	ldrb	r0, [r5, #18]
    8e7a:	4798      	blx	r3
    8e7c:	b9d0      	cbnz	r0, 8eb4 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    8e7e:	7ceb      	ldrb	r3, [r5, #19]
    8e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e84:	74eb      	strb	r3, [r5, #19]
    8e86:	e7e9      	b.n	8e5c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8e88:	7cef      	ldrb	r7, [r5, #19]
    8e8a:	f007 0707 	and.w	r7, r7, #7
    8e8e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8e92:	e773      	b.n	8d7c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8e94:	8a03      	ldrh	r3, [r0, #16]
    8e96:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8e9a:	4293      	cmp	r3, r2
    8e9c:	d107      	bne.n	8eae <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8e9e:	7cef      	ldrb	r7, [r5, #19]
    8ea0:	f007 0707 	and.w	r7, r7, #7
    8ea4:	f04f 0e00 	mov.w	lr, #0
    8ea8:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8eac:	e76c      	b.n	8d88 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8eae:	f04f 0e00 	mov.w	lr, #0
    8eb2:	e75b      	b.n	8d6c <_usb_d_dev_in_next+0x2c>
    8eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8eb8:	200004a4 	.word	0x200004a4
    8ebc:	0000b52d 	.word	0x0000b52d
    8ec0:	00008b65 	.word	0x00008b65

00008ec4 <_usb_d_dev_out_next>:
{
    8ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ec8:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8eca:	7c85      	ldrb	r5, [r0, #18]
    8ecc:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8ed0:	4689      	mov	r9, r1
    8ed2:	2900      	cmp	r1, #0
    8ed4:	d056      	beq.n	8f84 <_usb_d_dev_out_next+0xc0>
    8ed6:	4b74      	ldr	r3, [pc, #464]	; (90a8 <_usb_d_dev_out_next+0x1e4>)
    8ed8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8edc:	685a      	ldr	r2, [r3, #4]
    8ede:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8ee2:	685f      	ldr	r7, [r3, #4]
    8ee4:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8ee8:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8eea:	8a06      	ldrh	r6, [r0, #16]
    8eec:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8ef0:	429e      	cmp	r6, r3
    8ef2:	f000 80ba 	beq.w	906a <_usb_d_dev_out_next+0x1a6>
    8ef6:	3e01      	subs	r6, #1
    8ef8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    8efa:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8efe:	f894 8013 	ldrb.w	r8, [r4, #19]
    8f02:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    8f06:	f1b9 0f00 	cmp.w	r9, #0
    8f0a:	d005      	beq.n	8f18 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8f0c:	016b      	lsls	r3, r5, #5
    8f0e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8f12:	2201      	movs	r2, #1
    8f14:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8f18:	7ce3      	ldrb	r3, [r4, #19]
    8f1a:	f013 0f20 	tst.w	r3, #32
    8f1e:	d00d      	beq.n	8f3c <_usb_d_dev_out_next+0x78>
    8f20:	6862      	ldr	r2, [r4, #4]
    8f22:	2a00      	cmp	r2, #0
    8f24:	d037      	beq.n	8f96 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8f26:	68a0      	ldr	r0, [r4, #8]
    8f28:	1a12      	subs	r2, r2, r0
    8f2a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8f2c:	6823      	ldr	r3, [r4, #0]
    8f2e:	42ba      	cmp	r2, r7
    8f30:	bf28      	it	cs
    8f32:	463a      	movcs	r2, r7
    8f34:	68e1      	ldr	r1, [r4, #12]
    8f36:	4418      	add	r0, r3
    8f38:	4b5c      	ldr	r3, [pc, #368]	; (90ac <_usb_d_dev_out_next+0x1e8>)
    8f3a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8f3c:	6863      	ldr	r3, [r4, #4]
    8f3e:	b353      	cbz	r3, 8f96 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    8f40:	f1b9 0f00 	cmp.w	r9, #0
    8f44:	d040      	beq.n	8fc8 <_usb_d_dev_out_next+0x104>
    8f46:	8a22      	ldrh	r2, [r4, #16]
    8f48:	42ba      	cmp	r2, r7
    8f4a:	d93d      	bls.n	8fc8 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    8f4c:	7ce3      	ldrb	r3, [r4, #19]
    8f4e:	f36f 1304 	bfc	r3, #4, #1
    8f52:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    8f54:	68a3      	ldr	r3, [r4, #8]
    8f56:	445b      	add	r3, fp
    8f58:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    8f5a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8f5e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    8f62:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8f66:	bf0c      	ite	eq
    8f68:	222d      	moveq	r2, #45	; 0x2d
    8f6a:	2225      	movne	r2, #37	; 0x25
    8f6c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    8f70:	b915      	cbnz	r5, 8f78 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8f72:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8f74:	4b4c      	ldr	r3, [pc, #304]	; (90a8 <_usb_d_dev_out_next+0x1e4>)
    8f76:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8f78:	2100      	movs	r1, #0
    8f7a:	4620      	mov	r0, r4
    8f7c:	4b4c      	ldr	r3, [pc, #304]	; (90b0 <_usb_d_dev_out_next+0x1ec>)
    8f7e:	4798      	blx	r3
	return;
    8f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8f84:	8a06      	ldrh	r6, [r0, #16]
    8f86:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8f8a:	429e      	cmp	r6, r3
    8f8c:	d07b      	beq.n	9086 <_usb_d_dev_out_next+0x1c2>
    8f8e:	f04f 0b00 	mov.w	fp, #0
    8f92:	46da      	mov	sl, fp
    8f94:	e7af      	b.n	8ef6 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8f96:	7ce3      	ldrb	r3, [r4, #19]
    8f98:	f013 0f10 	tst.w	r3, #16
    8f9c:	d06c      	beq.n	9078 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    8f9e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8fa0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8fa4:	f043 0320 	orr.w	r3, r3, #32
    8fa8:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8faa:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8fac:	493e      	ldr	r1, [pc, #248]	; (90a8 <_usb_d_dev_out_next+0x1e4>)
    8fae:	016a      	lsls	r2, r5, #5
    8fb0:	188b      	adds	r3, r1, r2
    8fb2:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8fb4:	8a21      	ldrh	r1, [r4, #16]
    8fb6:	685a      	ldr	r2, [r3, #4]
    8fb8:	f361 329b 	bfi	r2, r1, #14, #14
    8fbc:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8fbe:	685a      	ldr	r2, [r3, #4]
    8fc0:	f36f 020d 	bfc	r2, #0, #14
    8fc4:	605a      	str	r2, [r3, #4]
    8fc6:	e01d      	b.n	9004 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8fc8:	68a2      	ldr	r2, [r4, #8]
    8fca:	4452      	add	r2, sl
    8fcc:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    8fce:	4293      	cmp	r3, r2
    8fd0:	d9c3      	bls.n	8f5a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    8fd2:	1a9b      	subs	r3, r3, r2
    8fd4:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    8fd6:	7ce1      	ldrb	r1, [r4, #19]
    8fd8:	f011 0f20 	tst.w	r1, #32
    8fdc:	d026      	beq.n	902c <_usb_d_dev_out_next+0x168>
    8fde:	8a22      	ldrh	r2, [r4, #16]
    8fe0:	4293      	cmp	r3, r2
    8fe2:	bf28      	it	cs
    8fe4:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8fe6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8fe8:	016a      	lsls	r2, r5, #5
    8fea:	492f      	ldr	r1, [pc, #188]	; (90a8 <_usb_d_dev_out_next+0x1e4>)
    8fec:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8fee:	4a2e      	ldr	r2, [pc, #184]	; (90a8 <_usb_d_dev_out_next+0x1e4>)
    8ff0:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    8ff4:	6851      	ldr	r1, [r2, #4]
    8ff6:	f363 319b 	bfi	r1, r3, #14, #14
    8ffa:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8ffc:	6853      	ldr	r3, [r2, #4]
    8ffe:	f36f 030d 	bfc	r3, #0, #14
    9002:	6053      	str	r3, [r2, #4]
	if (!isr) {
    9004:	f1b9 0f00 	cmp.w	r9, #0
    9008:	d108      	bne.n	901c <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    900a:	f1b8 0f01 	cmp.w	r8, #1
    900e:	d025      	beq.n	905c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    9010:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9012:	016b      	lsls	r3, r5, #5
    9014:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9018:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    901c:	016d      	lsls	r5, r5, #5
    901e:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    9022:	2340      	movs	r3, #64	; 0x40
    9024:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    9028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    902c:	8a21      	ldrh	r1, [r4, #16]
    902e:	428b      	cmp	r3, r1
    9030:	d90a      	bls.n	9048 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9036:	d80e      	bhi.n	9056 <_usb_d_dev_out_next+0x192>
    9038:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    903c:	6821      	ldr	r1, [r4, #0]
    903e:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    9040:	0169      	lsls	r1, r5, #5
    9042:	4819      	ldr	r0, [pc, #100]	; (90a8 <_usb_d_dev_out_next+0x1e4>)
    9044:	5042      	str	r2, [r0, r1]
    9046:	e7d2      	b.n	8fee <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    9048:	428b      	cmp	r3, r1
    904a:	d2f7      	bcs.n	903c <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    904c:	7ce1      	ldrb	r1, [r4, #19]
    904e:	f041 0120 	orr.w	r1, r1, #32
    9052:	74e1      	strb	r1, [r4, #19]
    9054:	e7f2      	b.n	903c <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    9056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    905a:	e7ef      	b.n	903c <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    905c:	4b12      	ldr	r3, [pc, #72]	; (90a8 <_usb_d_dev_out_next+0x1e4>)
    905e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    9062:	2200      	movs	r2, #0
    9064:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9066:	222d      	movs	r2, #45	; 0x2d
    9068:	e7d3      	b.n	9012 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    906a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    906e:	f890 8013 	ldrb.w	r8, [r0, #19]
    9072:	f008 0807 	and.w	r8, r8, #7
    9076:	e749      	b.n	8f0c <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    9078:	f1b9 0f00 	cmp.w	r9, #0
    907c:	d10b      	bne.n	9096 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    907e:	68a3      	ldr	r3, [r4, #8]
    9080:	4453      	add	r3, sl
    9082:	60a3      	str	r3, [r4, #8]
    9084:	e769      	b.n	8f5a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9086:	f890 8013 	ldrb.w	r8, [r0, #19]
    908a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    908e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9090:	46bb      	mov	fp, r7
    9092:	46ba      	mov	sl, r7
    9094:	e740      	b.n	8f18 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    9096:	8a23      	ldrh	r3, [r4, #16]
    9098:	42bb      	cmp	r3, r7
    909a:	f63f af57 	bhi.w	8f4c <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    909e:	68a3      	ldr	r3, [r4, #8]
    90a0:	4453      	add	r3, sl
    90a2:	60a3      	str	r3, [r4, #8]
    90a4:	e759      	b.n	8f5a <_usb_d_dev_out_next+0x96>
    90a6:	bf00      	nop
    90a8:	200004a4 	.word	0x200004a4
    90ac:	0000b52d 	.word	0x0000b52d
    90b0:	00008b65 	.word	0x00008b65

000090b4 <_usb_d_dev_handler>:
{
    90b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    90b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    90bc:	8c1e      	ldrh	r6, [r3, #32]
    90be:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    90c0:	b146      	cbz	r6, 90d4 <_usb_d_dev_handler+0x20>
    90c2:	4d96      	ldr	r5, [pc, #600]	; (931c <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    90c4:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    90c6:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    90ca:	f8df 926c 	ldr.w	r9, [pc, #620]	; 9338 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    90ce:	f8df 826c 	ldr.w	r8, [pc, #620]	; 933c <_usb_d_dev_handler+0x288>
    90d2:	e0de      	b.n	9292 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    90d4:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    90d6:	8b1b      	ldrh	r3, [r3, #24]
    90d8:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    90da:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    90dc:	f013 0f04 	tst.w	r3, #4
    90e0:	d11e      	bne.n	9120 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    90e2:	f413 7f00 	tst.w	r3, #512	; 0x200
    90e6:	d125      	bne.n	9134 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    90e8:	f013 0f80 	tst.w	r3, #128	; 0x80
    90ec:	d14f      	bne.n	918e <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    90ee:	f013 0f70 	tst.w	r3, #112	; 0x70
    90f2:	d158      	bne.n	91a6 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    90f4:	f013 0f08 	tst.w	r3, #8
    90f8:	d178      	bne.n	91ec <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    90fa:	f013 0f01 	tst.w	r3, #1
    90fe:	d0e0      	beq.n	90c2 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9100:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9104:	f240 2201 	movw	r2, #513	; 0x201
    9108:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    910a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    910c:	2270      	movs	r2, #112	; 0x70
    910e:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9110:	4b83      	ldr	r3, [pc, #524]	; (9320 <_usb_d_dev_handler+0x26c>)
    9112:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    9116:	2100      	movs	r1, #0
    9118:	2004      	movs	r0, #4
    911a:	4798      	blx	r3
    911c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9120:	2204      	movs	r2, #4
    9122:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9126:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    9128:	4b7d      	ldr	r3, [pc, #500]	; (9320 <_usb_d_dev_handler+0x26c>)
    912a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    912e:	4798      	blx	r3
    9130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9134:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9138:	f240 2201 	movw	r2, #513	; 0x201
    913c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    913e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9140:	2270      	movs	r2, #112	; 0x70
    9142:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9144:	4b76      	ldr	r3, [pc, #472]	; (9320 <_usb_d_dev_handler+0x26c>)
    9146:	891b      	ldrh	r3, [r3, #8]
    9148:	f003 030f 	and.w	r3, r3, #15
    914c:	2b03      	cmp	r3, #3
    914e:	d014      	beq.n	917a <_usb_d_dev_handler+0xc6>
    9150:	2301      	movs	r3, #1
    9152:	4873      	ldr	r0, [pc, #460]	; (9320 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9154:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9156:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    915a:	8912      	ldrh	r2, [r2, #8]
    915c:	f002 020f 	and.w	r2, r2, #15
    9160:	2a03      	cmp	r2, #3
    9162:	d00b      	beq.n	917c <_usb_d_dev_handler+0xc8>
    9164:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9166:	2b05      	cmp	r3, #5
    9168:	d1f4      	bne.n	9154 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    916a:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    916c:	4b6c      	ldr	r3, [pc, #432]	; (9320 <_usb_d_dev_handler+0x26c>)
    916e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    9172:	2003      	movs	r0, #3
    9174:	4798      	blx	r3
    9176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    917a:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    917c:	4b68      	ldr	r3, [pc, #416]	; (9320 <_usb_d_dev_handler+0x26c>)
    917e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    9182:	8919      	ldrh	r1, [r3, #8]
    9184:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    9188:	2200      	movs	r2, #0
    918a:	811a      	strh	r2, [r3, #8]
    918c:	e7ee      	b.n	916c <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    918e:	2280      	movs	r2, #128	; 0x80
    9190:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9194:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9196:	4b62      	ldr	r3, [pc, #392]	; (9320 <_usb_d_dev_handler+0x26c>)
    9198:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    919c:	2100      	movs	r1, #0
    919e:	2005      	movs	r0, #5
    91a0:	4798      	blx	r3
    91a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    91a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    91aa:	2270      	movs	r2, #112	; 0x70
    91ac:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    91ae:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    91b0:	f240 2201 	movw	r2, #513	; 0x201
    91b4:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    91b6:	4b5b      	ldr	r3, [pc, #364]	; (9324 <_usb_d_dev_handler+0x270>)
    91b8:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    91bc:	f013 0f01 	tst.w	r3, #1
    91c0:	d00e      	beq.n	91e0 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    91c2:	4a58      	ldr	r2, [pc, #352]	; (9324 <_usb_d_dev_handler+0x270>)
    91c4:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    91c6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    91ca:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    91ce:	d1f9      	bne.n	91c4 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    91d0:	4b53      	ldr	r3, [pc, #332]	; (9320 <_usb_d_dev_handler+0x26c>)
    91d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    91d6:	2100      	movs	r1, #0
    91d8:	2002      	movs	r0, #2
    91da:	4798      	blx	r3
    91dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    91e0:	4a50      	ldr	r2, [pc, #320]	; (9324 <_usb_d_dev_handler+0x270>)
    91e2:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    91e4:	f413 7f80 	tst.w	r3, #256	; 0x100
    91e8:	d0fb      	beq.n	91e2 <_usb_d_dev_handler+0x12e>
    91ea:	e7f1      	b.n	91d0 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    91ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    91f0:	2400      	movs	r4, #0
    91f2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    91f6:	2208      	movs	r2, #8
    91f8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    91fa:	2270      	movs	r2, #112	; 0x70
    91fc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    91fe:	f240 2201 	movw	r2, #513	; 0x201
    9202:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    9204:	4b48      	ldr	r3, [pc, #288]	; (9328 <_usb_d_dev_handler+0x274>)
    9206:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9208:	4b45      	ldr	r3, [pc, #276]	; (9320 <_usb_d_dev_handler+0x26c>)
    920a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    920e:	4621      	mov	r1, r4
    9210:	2001      	movs	r0, #1
    9212:	4798      	blx	r3
    9214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9218:	f011 0f10 	tst.w	r1, #16
    921c:	d109      	bne.n	9232 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    921e:	f011 0f40 	tst.w	r1, #64	; 0x40
    9222:	d108      	bne.n	9236 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9224:	f011 0f20 	tst.w	r1, #32
    9228:	d02f      	beq.n	928a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    922a:	2100      	movs	r1, #0
    922c:	4b3f      	ldr	r3, [pc, #252]	; (932c <_usb_d_dev_handler+0x278>)
    922e:	4798      	blx	r3
    9230:	e02b      	b.n	928a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    9232:	47c8      	blx	r9
    9234:	e029      	b.n	928a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    9236:	2101      	movs	r1, #1
    9238:	4b3c      	ldr	r3, [pc, #240]	; (932c <_usb_d_dev_handler+0x278>)
    923a:	4798      	blx	r3
    923c:	e025      	b.n	928a <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    923e:	f011 0f40 	tst.w	r1, #64	; 0x40
    9242:	d111      	bne.n	9268 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9244:	f011 0f08 	tst.w	r1, #8
    9248:	d112      	bne.n	9270 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    924a:	f011 0f02 	tst.w	r1, #2
    924e:	d112      	bne.n	9276 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9250:	f003 0307 	and.w	r3, r3, #7
    9254:	2b01      	cmp	r3, #1
    9256:	d118      	bne.n	928a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9258:	f011 0f04 	tst.w	r1, #4
    925c:	d10f      	bne.n	927e <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    925e:	f011 0f10 	tst.w	r1, #16
    9262:	d012      	beq.n	928a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    9264:	47c8      	blx	r9
    9266:	e010      	b.n	928a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    9268:	2101      	movs	r1, #1
    926a:	4b30      	ldr	r3, [pc, #192]	; (932c <_usb_d_dev_handler+0x278>)
    926c:	4798      	blx	r3
    926e:	e00c      	b.n	928a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    9270:	2101      	movs	r1, #1
    9272:	47c0      	blx	r8
    9274:	e009      	b.n	928a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    9276:	2101      	movs	r1, #1
    9278:	4b2d      	ldr	r3, [pc, #180]	; (9330 <_usb_d_dev_handler+0x27c>)
    927a:	4798      	blx	r3
    927c:	e005      	b.n	928a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    927e:	2100      	movs	r1, #0
    9280:	47c0      	blx	r8
    9282:	e002      	b.n	928a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    9284:	2100      	movs	r1, #0
    9286:	4b29      	ldr	r3, [pc, #164]	; (932c <_usb_d_dev_handler+0x278>)
    9288:	4798      	blx	r3
    928a:	3401      	adds	r4, #1
    928c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    928e:	2c1b      	cmp	r4, #27
    9290:	d042      	beq.n	9318 <_usb_d_dev_handler+0x264>
    9292:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    9294:	7cab      	ldrb	r3, [r5, #18]
    9296:	2bff      	cmp	r3, #255	; 0xff
    9298:	d0f7      	beq.n	928a <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    929a:	f003 030f 	and.w	r3, r3, #15
    929e:	2101      	movs	r1, #1
    92a0:	4099      	lsls	r1, r3
    92a2:	4231      	tst	r1, r6
    92a4:	d0f1      	beq.n	928a <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    92a6:	0159      	lsls	r1, r3, #5
    92a8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    92ac:	f501 7180 	add.w	r1, r1, #256	; 0x100
    92b0:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    92b2:	015b      	lsls	r3, r3, #5
    92b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    92b8:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    92bc:	4019      	ands	r1, r3
    92be:	d0e4      	beq.n	928a <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    92c0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    92c4:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    92c8:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    92cc:	f003 0247 	and.w	r2, r3, #71	; 0x47
    92d0:	2a01      	cmp	r2, #1
    92d2:	d0a1      	beq.n	9218 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    92d4:	f013 0f80 	tst.w	r3, #128	; 0x80
    92d8:	d1b1      	bne.n	923e <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    92da:	f011 0f20 	tst.w	r1, #32
    92de:	d1d1      	bne.n	9284 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    92e0:	f011 0f04 	tst.w	r1, #4
    92e4:	d10e      	bne.n	9304 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    92e6:	f011 0f01 	tst.w	r1, #1
    92ea:	d10e      	bne.n	930a <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    92ec:	f003 0307 	and.w	r3, r3, #7
    92f0:	2b01      	cmp	r3, #1
    92f2:	d1ca      	bne.n	928a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    92f4:	f011 0f08 	tst.w	r1, #8
    92f8:	d10b      	bne.n	9312 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    92fa:	f011 0f10 	tst.w	r1, #16
    92fe:	d0c4      	beq.n	928a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    9300:	47c8      	blx	r9
    9302:	e7c2      	b.n	928a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    9304:	2100      	movs	r1, #0
    9306:	47c0      	blx	r8
    9308:	e7bf      	b.n	928a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    930a:	2101      	movs	r1, #1
    930c:	4b09      	ldr	r3, [pc, #36]	; (9334 <_usb_d_dev_handler+0x280>)
    930e:	4798      	blx	r3
    9310:	e7bb      	b.n	928a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    9312:	2101      	movs	r1, #1
    9314:	47c0      	blx	r8
    9316:	e7b8      	b.n	928a <_usb_d_dev_handler+0x1d6>
    9318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    931c:	20000578 	.word	0x20000578
    9320:	200004a4 	.word	0x200004a4
    9324:	40001000 	.word	0x40001000
    9328:	00008cfd 	.word	0x00008cfd
    932c:	00008b35 	.word	0x00008b35
    9330:	00008d41 	.word	0x00008d41
    9334:	00008ec5 	.word	0x00008ec5
    9338:	00008ab5 	.word	0x00008ab5
    933c:	00008bfd 	.word	0x00008bfd

00009340 <_usb_d_dev_init>:
{
    9340:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    9342:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9346:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9348:	f013 0f01 	tst.w	r3, #1
    934c:	d124      	bne.n	9398 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    934e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    9352:	7893      	ldrb	r3, [r2, #2]
    9354:	f013 0f03 	tst.w	r3, #3
    9358:	d1fb      	bne.n	9352 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    935a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    935e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9360:	f013 0f02 	tst.w	r3, #2
    9364:	d00f      	beq.n	9386 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9366:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    936a:	7813      	ldrb	r3, [r2, #0]
    936c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    9370:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9372:	7893      	ldrb	r3, [r2, #2]
    9374:	f013 0f03 	tst.w	r3, #3
    9378:	d1fb      	bne.n	9372 <_usb_d_dev_init+0x32>
    937a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    937e:	7893      	ldrb	r3, [r2, #2]
    9380:	f013 0f02 	tst.w	r3, #2
    9384:	d1fb      	bne.n	937e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9386:	2201      	movs	r2, #1
    9388:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    938c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    938e:	461a      	mov	r2, r3
    9390:	7893      	ldrb	r3, [r2, #2]
    9392:	f013 0f03 	tst.w	r3, #3
    9396:	d1fb      	bne.n	9390 <_usb_d_dev_init+0x50>
    9398:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    939c:	7893      	ldrb	r3, [r2, #2]
    939e:	f013 0f01 	tst.w	r3, #1
    93a2:	d1fb      	bne.n	939c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    93a4:	4b24      	ldr	r3, [pc, #144]	; (9438 <_usb_d_dev_init+0xf8>)
    93a6:	4a25      	ldr	r2, [pc, #148]	; (943c <_usb_d_dev_init+0xfc>)
    93a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    93ac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    93b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    93b4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    93b8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    93bc:	4b20      	ldr	r3, [pc, #128]	; (9440 <_usb_d_dev_init+0x100>)
    93be:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    93c0:	4b20      	ldr	r3, [pc, #128]	; (9444 <_usb_d_dev_init+0x104>)
    93c2:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    93c4:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    93c8:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    93cc:	f011 011f 	ands.w	r1, r1, #31
    93d0:	d02b      	beq.n	942a <_usb_d_dev_init+0xea>
		pad_transn = 9;
    93d2:	291f      	cmp	r1, #31
    93d4:	bf08      	it	eq
    93d6:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    93d8:	b34b      	cbz	r3, 942e <_usb_d_dev_init+0xee>
		pad_transp = 25;
    93da:	2b1f      	cmp	r3, #31
    93dc:	bf08      	it	eq
    93de:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    93e0:	b33a      	cbz	r2, 9432 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    93e2:	2a07      	cmp	r2, #7
    93e4:	bf08      	it	eq
    93e6:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    93e8:	f003 031f 	and.w	r3, r3, #31
    93ec:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    93f0:	0312      	lsls	r2, r2, #12
    93f2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    93f6:	4313      	orrs	r3, r2
    93f8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    93fc:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    93fe:	78d3      	ldrb	r3, [r2, #3]
    9400:	f043 0303 	orr.w	r3, r3, #3
    9404:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    9406:	78d3      	ldrb	r3, [r2, #3]
    9408:	f043 030c 	orr.w	r3, r3, #12
    940c:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    940e:	2304      	movs	r3, #4
    9410:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9412:	7893      	ldrb	r3, [r2, #2]
    9414:	f013 0f03 	tst.w	r3, #3
    9418:	d1fb      	bne.n	9412 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    941a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    941e:	4a06      	ldr	r2, [pc, #24]	; (9438 <_usb_d_dev_init+0xf8>)
    9420:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    9422:	2201      	movs	r2, #1
    9424:	811a      	strh	r2, [r3, #8]
}
    9426:	2000      	movs	r0, #0
    9428:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    942a:	2109      	movs	r1, #9
    942c:	e7d4      	b.n	93d8 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    942e:	2319      	movs	r3, #25
    9430:	e7d6      	b.n	93e0 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    9432:	2206      	movs	r2, #6
    9434:	e7d8      	b.n	93e8 <_usb_d_dev_init+0xa8>
    9436:	bf00      	nop
    9438:	200004a4 	.word	0x200004a4
    943c:	00008ab1 	.word	0x00008ab1
    9440:	00008cfd 	.word	0x00008cfd
    9444:	00800084 	.word	0x00800084

00009448 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9448:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    944c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9450:	7298      	strb	r0, [r3, #10]
    9452:	4770      	bx	lr

00009454 <_usb_d_dev_ep_init>:
{
    9454:	b5f0      	push	{r4, r5, r6, r7, lr}
    9456:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    945a:	f010 050f 	ands.w	r5, r0, #15
    945e:	d04d      	beq.n	94fc <_usb_d_dev_ep_init+0xa8>
    9460:	f1be 0f00 	cmp.w	lr, #0
    9464:	bfb4      	ite	lt
    9466:	1d6c      	addlt	r4, r5, #5
    9468:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    946a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    946e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    9470:	2d05      	cmp	r5, #5
    9472:	d947      	bls.n	9504 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    9474:	f06f 0011 	mvn.w	r0, #17
    9478:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    947a:	f1be 0f00 	cmp.w	lr, #0
    947e:	db1b      	blt.n	94b8 <_usb_d_dev_ep_init+0x64>
    9480:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9484:	4e37      	ldr	r6, [pc, #220]	; (9564 <_usb_d_dev_ep_init+0x110>)
    9486:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    948a:	2d00      	cmp	r5, #0
    948c:	d15e      	bne.n	954c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    948e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9492:	4d34      	ldr	r5, [pc, #208]	; (9564 <_usb_d_dev_ep_init+0x110>)
    9494:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    9498:	4d33      	ldr	r5, [pc, #204]	; (9568 <_usb_d_dev_ep_init+0x114>)
    949a:	00a6      	lsls	r6, r4, #2
    949c:	1933      	adds	r3, r6, r4
    949e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    94a2:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    94a6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    94aa:	3101      	adds	r1, #1
    94ac:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    94b0:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    94b4:	2000      	movs	r0, #0
    94b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    94b8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    94bc:	4e29      	ldr	r6, [pc, #164]	; (9564 <_usb_d_dev_ep_init+0x110>)
    94be:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    94c2:	686d      	ldr	r5, [r5, #4]
    94c4:	b935      	cbnz	r5, 94d4 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    94c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    94ca:	4d26      	ldr	r5, [pc, #152]	; (9564 <_usb_d_dev_ep_init+0x110>)
    94cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    94d0:	685f      	ldr	r7, [r3, #4]
    94d2:	e7e1      	b.n	9498 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    94d4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    94d8:	4e22      	ldr	r6, [pc, #136]	; (9564 <_usb_d_dev_ep_init+0x110>)
    94da:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    94de:	896d      	ldrh	r5, [r5, #10]
    94e0:	4295      	cmp	r5, r2
    94e2:	daf0      	bge.n	94c6 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    94e4:	f06f 0012 	mvn.w	r0, #18
    94e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    94ea:	f06f 0013 	mvn.w	r0, #19
    94ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    94f0:	f06f 0013 	mvn.w	r0, #19
    94f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    94f6:	f06f 0012 	mvn.w	r0, #18
    94fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    94fc:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    9500:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9502:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    9504:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    9508:	4f17      	ldr	r7, [pc, #92]	; (9568 <_usb_d_dev_ep_init+0x114>)
    950a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    950e:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    9512:	2eff      	cmp	r6, #255	; 0xff
    9514:	d1e9      	bne.n	94ea <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9516:	2900      	cmp	r1, #0
    9518:	d1af      	bne.n	947a <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    951a:	b125      	cbz	r5, 9526 <_usb_d_dev_ep_init+0xd2>
    951c:	f1be 0f00 	cmp.w	lr, #0
    9520:	bfa4      	itt	ge
    9522:	3505      	addge	r5, #5
    9524:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    9526:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    952a:	4e0f      	ldr	r6, [pc, #60]	; (9568 <_usb_d_dev_ep_init+0x114>)
    952c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9530:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    9534:	2dff      	cmp	r5, #255	; 0xff
    9536:	d1db      	bne.n	94f0 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    9538:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    953c:	4e09      	ldr	r6, [pc, #36]	; (9564 <_usb_d_dev_ep_init+0x110>)
    953e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    9542:	2d00      	cmp	r5, #0
    9544:	d0d7      	beq.n	94f6 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9546:	f1be 0f00 	cmp.w	lr, #0
    954a:	dbb5      	blt.n	94b8 <_usb_d_dev_ep_init+0x64>
    954c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9550:	4e04      	ldr	r6, [pc, #16]	; (9564 <_usb_d_dev_ep_init+0x110>)
    9552:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9556:	892d      	ldrh	r5, [r5, #8]
    9558:	4295      	cmp	r5, r2
    955a:	da98      	bge.n	948e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    955c:	f06f 0012 	mvn.w	r0, #18
    9560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9562:	bf00      	nop
    9564:	0000c94c 	.word	0x0000c94c
    9568:	200004a4 	.word	0x200004a4

0000956c <_usb_d_dev_ep_deinit>:
{
    956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    956e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9570:	f010 060f 	ands.w	r6, r0, #15
    9574:	d00e      	beq.n	9594 <_usb_d_dev_ep_deinit+0x28>
    9576:	2f00      	cmp	r7, #0
    9578:	bfb4      	ite	lt
    957a:	1d73      	addlt	r3, r6, #5
    957c:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    957e:	2e05      	cmp	r6, #5
    9580:	d900      	bls.n	9584 <_usb_d_dev_ep_deinit+0x18>
    9582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    9584:	461d      	mov	r5, r3
    9586:	3301      	adds	r3, #1
    9588:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    958c:	4a24      	ldr	r2, [pc, #144]	; (9620 <_usb_d_dev_ep_deinit+0xb4>)
    958e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    9592:	e002      	b.n	959a <_usb_d_dev_ep_deinit+0x2e>
    9594:	f8df e094 	ldr.w	lr, [pc, #148]	; 962c <_usb_d_dev_ep_deinit+0xc0>
    9598:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    959a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    959e:	4a21      	ldr	r2, [pc, #132]	; (9624 <_usb_d_dev_ep_deinit+0xb8>)
    95a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    95a4:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    95a8:	2aff      	cmp	r2, #255	; 0xff
    95aa:	d0ea      	beq.n	9582 <_usb_d_dev_ep_deinit+0x16>
    95ac:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    95ae:	2203      	movs	r2, #3
    95b0:	0ff9      	lsrs	r1, r7, #31
    95b2:	4670      	mov	r0, lr
    95b4:	4b1c      	ldr	r3, [pc, #112]	; (9628 <_usb_d_dev_ep_deinit+0xbc>)
    95b6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    95b8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    95bc:	4a19      	ldr	r2, [pc, #100]	; (9624 <_usb_d_dev_ep_deinit+0xb8>)
    95be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    95c2:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    95c6:	f003 0307 	and.w	r3, r3, #7
    95ca:	2b01      	cmp	r3, #1
    95cc:	d016      	beq.n	95fc <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    95ce:	2f00      	cmp	r7, #0
    95d0:	db1b      	blt.n	960a <_usb_d_dev_ep_deinit+0x9e>
    95d2:	0160      	lsls	r0, r4, #5
    95d4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    95d8:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    95dc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    95e0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    95e4:	4b0f      	ldr	r3, [pc, #60]	; (9624 <_usb_d_dev_ep_deinit+0xb8>)
    95e6:	00aa      	lsls	r2, r5, #2
    95e8:	1951      	adds	r1, r2, r5
    95ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    95ee:	2000      	movs	r0, #0
    95f0:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    95f4:	22ff      	movs	r2, #255	; 0xff
    95f6:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    95fa:	e7c2      	b.n	9582 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    95fc:	0160      	lsls	r0, r4, #5
    95fe:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    9602:	2300      	movs	r3, #0
    9604:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    9608:	e7ec      	b.n	95e4 <_usb_d_dev_ep_deinit+0x78>
    960a:	0176      	lsls	r6, r6, #5
    960c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9610:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    9614:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    9618:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    961c:	e7e2      	b.n	95e4 <_usb_d_dev_ep_deinit+0x78>
    961e:	bf00      	nop
    9620:	20000564 	.word	0x20000564
    9624:	200004a4 	.word	0x200004a4
    9628:	00008b91 	.word	0x00008b91
    962c:	20000578 	.word	0x20000578

00009630 <_usb_d_dev_ep_enable>:
{
    9630:	b4f0      	push	{r4, r5, r6, r7}
    9632:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9634:	f010 000f 	ands.w	r0, r0, #15
    9638:	f000 80a7 	beq.w	978a <_usb_d_dev_ep_enable+0x15a>
    963c:	2e00      	cmp	r6, #0
    963e:	bfb4      	ite	lt
    9640:	1d43      	addlt	r3, r0, #5
    9642:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9644:	4605      	mov	r5, r0
    9646:	0142      	lsls	r2, r0, #5
    9648:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    964c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    9650:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9652:	2805      	cmp	r0, #5
    9654:	f240 80a0 	bls.w	9798 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    9658:	f06f 0011 	mvn.w	r0, #17
    965c:	e07d      	b.n	975a <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    965e:	f014 0f77 	tst.w	r4, #119	; 0x77
    9662:	f040 8089 	bne.w	9778 <_usb_d_dev_ep_enable+0x148>
    9666:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    966a:	2111      	movs	r1, #17
    966c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9670:	4c9b      	ldr	r4, [pc, #620]	; (98e0 <_usb_d_dev_ep_enable+0x2b0>)
    9672:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    9676:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    967a:	4c9a      	ldr	r4, [pc, #616]	; (98e4 <_usb_d_dev_ep_enable+0x2b4>)
    967c:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9680:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9684:	f200 80cd 	bhi.w	9822 <_usb_d_dev_ep_enable+0x1f2>
    9688:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    968c:	f200 8112 	bhi.w	98b4 <_usb_d_dev_ep_enable+0x284>
    9690:	2980      	cmp	r1, #128	; 0x80
    9692:	f200 8101 	bhi.w	9898 <_usb_d_dev_ep_enable+0x268>
    9696:	2940      	cmp	r1, #64	; 0x40
    9698:	f200 8113 	bhi.w	98c2 <_usb_d_dev_ep_enable+0x292>
    969c:	2920      	cmp	r1, #32
    969e:	f200 8102 	bhi.w	98a6 <_usb_d_dev_ep_enable+0x276>
    96a2:	2910      	cmp	r1, #16
    96a4:	f200 8114 	bhi.w	98d0 <_usb_d_dev_ep_enable+0x2a0>
    96a8:	2908      	cmp	r1, #8
    96aa:	bf94      	ite	ls
    96ac:	2600      	movls	r6, #0
    96ae:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    96b0:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    96b4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    96b6:	f3c1 010d 	ubfx	r1, r1, #0, #14
    96ba:	e0b8      	b.n	982e <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    96bc:	f014 0f70 	tst.w	r4, #112	; 0x70
    96c0:	d15d      	bne.n	977e <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    96c2:	4e87      	ldr	r6, [pc, #540]	; (98e0 <_usb_d_dev_ep_enable+0x2b0>)
    96c4:	009f      	lsls	r7, r3, #2
    96c6:	18f9      	adds	r1, r7, r3
    96c8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    96cc:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    96d0:	0109      	lsls	r1, r1, #4
    96d2:	f001 0170 	and.w	r1, r1, #112	; 0x70
    96d6:	430c      	orrs	r4, r1
    96d8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    96dc:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    96e0:	443b      	add	r3, r7
    96e2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    96e6:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    96ea:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    96ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    96f2:	d80f      	bhi.n	9714 <_usb_d_dev_ep_enable+0xe4>
    96f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    96f8:	d819      	bhi.n	972e <_usb_d_dev_ep_enable+0xfe>
    96fa:	2b80      	cmp	r3, #128	; 0x80
    96fc:	d819      	bhi.n	9732 <_usb_d_dev_ep_enable+0x102>
    96fe:	2b40      	cmp	r3, #64	; 0x40
    9700:	d819      	bhi.n	9736 <_usb_d_dev_ep_enable+0x106>
    9702:	2b20      	cmp	r3, #32
    9704:	d819      	bhi.n	973a <_usb_d_dev_ep_enable+0x10a>
    9706:	2b10      	cmp	r3, #16
    9708:	d819      	bhi.n	973e <_usb_d_dev_ep_enable+0x10e>
    970a:	2b08      	cmp	r3, #8
    970c:	bf94      	ite	ls
    970e:	2300      	movls	r3, #0
    9710:	2301      	movhi	r3, #1
    9712:	e000      	b.n	9716 <_usb_d_dev_ep_enable+0xe6>
    9714:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9716:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    971a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    971c:	2380      	movs	r3, #128	; 0x80
    971e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    9722:	4b6f      	ldr	r3, [pc, #444]	; (98e0 <_usb_d_dev_ep_enable+0x2b0>)
    9724:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9728:	2000      	movs	r0, #0
    972a:	76a8      	strb	r0, [r5, #26]
    972c:	e015      	b.n	975a <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    972e:	2306      	movs	r3, #6
    9730:	e7f1      	b.n	9716 <_usb_d_dev_ep_enable+0xe6>
    9732:	2305      	movs	r3, #5
    9734:	e7ef      	b.n	9716 <_usb_d_dev_ep_enable+0xe6>
    9736:	2304      	movs	r3, #4
    9738:	e7ed      	b.n	9716 <_usb_d_dev_ep_enable+0xe6>
    973a:	2303      	movs	r3, #3
    973c:	e7eb      	b.n	9716 <_usb_d_dev_ep_enable+0xe6>
    973e:	2302      	movs	r3, #2
    9740:	e7e9      	b.n	9716 <_usb_d_dev_ep_enable+0xe6>
    9742:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9744:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9748:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    974a:	2340      	movs	r3, #64	; 0x40
    974c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    9750:	4b63      	ldr	r3, [pc, #396]	; (98e0 <_usb_d_dev_ep_enable+0x2b0>)
    9752:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9756:	2000      	movs	r0, #0
    9758:	72a8      	strb	r0, [r5, #10]
}
    975a:	bcf0      	pop	{r4, r5, r6, r7}
    975c:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    975e:	2106      	movs	r1, #6
    9760:	e7f0      	b.n	9744 <_usb_d_dev_ep_enable+0x114>
    9762:	2105      	movs	r1, #5
    9764:	e7ee      	b.n	9744 <_usb_d_dev_ep_enable+0x114>
    9766:	2104      	movs	r1, #4
    9768:	e7ec      	b.n	9744 <_usb_d_dev_ep_enable+0x114>
    976a:	2103      	movs	r1, #3
    976c:	e7ea      	b.n	9744 <_usb_d_dev_ep_enable+0x114>
    976e:	2102      	movs	r1, #2
    9770:	e7e8      	b.n	9744 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    9772:	f06f 0011 	mvn.w	r0, #17
    9776:	e7f0      	b.n	975a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9778:	f06f 0013 	mvn.w	r0, #19
    977c:	e7ed      	b.n	975a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    977e:	f06f 0013 	mvn.w	r0, #19
    9782:	e7ea      	b.n	975a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9784:	f06f 0013 	mvn.w	r0, #19
    9788:	e7e7      	b.n	975a <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    978a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    978e:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    9792:	b2e4      	uxtb	r4, r4
    9794:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    9796:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9798:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    979c:	4950      	ldr	r1, [pc, #320]	; (98e0 <_usb_d_dev_ep_enable+0x2b0>)
    979e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    97a2:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    97a6:	2aff      	cmp	r2, #255	; 0xff
    97a8:	d0e3      	beq.n	9772 <_usb_d_dev_ep_enable+0x142>
    97aa:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    97ac:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    97ae:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    97b2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    97b6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    97ba:	f001 0107 	and.w	r1, r1, #7
    97be:	2901      	cmp	r1, #1
    97c0:	f43f af4d 	beq.w	965e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    97c4:	2e00      	cmp	r6, #0
    97c6:	f6ff af79 	blt.w	96bc <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    97ca:	f014 0f07 	tst.w	r4, #7
    97ce:	d1d9      	bne.n	9784 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    97d0:	4e43      	ldr	r6, [pc, #268]	; (98e0 <_usb_d_dev_ep_enable+0x2b0>)
    97d2:	009f      	lsls	r7, r3, #2
    97d4:	18f9      	adds	r1, r7, r3
    97d6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    97da:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    97de:	f001 0107 	and.w	r1, r1, #7
    97e2:	430c      	orrs	r4, r1
    97e4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    97e8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    97ec:	443b      	add	r3, r7
    97ee:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    97f2:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    97f6:	4b3b      	ldr	r3, [pc, #236]	; (98e4 <_usb_d_dev_ep_enable+0x2b4>)
    97f8:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    97fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9800:	d89f      	bhi.n	9742 <_usb_d_dev_ep_enable+0x112>
    9802:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    9806:	d8aa      	bhi.n	975e <_usb_d_dev_ep_enable+0x12e>
    9808:	2980      	cmp	r1, #128	; 0x80
    980a:	d8aa      	bhi.n	9762 <_usb_d_dev_ep_enable+0x132>
    980c:	2940      	cmp	r1, #64	; 0x40
    980e:	d8aa      	bhi.n	9766 <_usb_d_dev_ep_enable+0x136>
    9810:	2920      	cmp	r1, #32
    9812:	d8aa      	bhi.n	976a <_usb_d_dev_ep_enable+0x13a>
    9814:	2910      	cmp	r1, #16
    9816:	d8aa      	bhi.n	976e <_usb_d_dev_ep_enable+0x13e>
    9818:	2908      	cmp	r1, #8
    981a:	bf94      	ite	ls
    981c:	2100      	movls	r1, #0
    981e:	2101      	movhi	r1, #1
    9820:	e790      	b.n	9744 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9822:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9826:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9828:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    982c:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    982e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    9832:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9834:	2640      	movs	r6, #64	; 0x40
    9836:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    983a:	2180      	movs	r1, #128	; 0x80
    983c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    9840:	4f27      	ldr	r7, [pc, #156]	; (98e0 <_usb_d_dev_ep_enable+0x2b0>)
    9842:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    9846:	2000      	movs	r0, #0
    9848:	72a8      	strb	r0, [r5, #10]
    984a:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    984c:	009c      	lsls	r4, r3, #2
    984e:	18e1      	adds	r1, r4, r3
    9850:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    9854:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    9858:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    985c:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    9860:	0152      	lsls	r2, r2, #5
    9862:	18b9      	adds	r1, r7, r2
    9864:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9866:	4423      	add	r3, r4
    9868:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    986c:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    9870:	684b      	ldr	r3, [r1, #4]
    9872:	f364 339b 	bfi	r3, r4, #14, #14
    9876:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9878:	684b      	ldr	r3, [r1, #4]
    987a:	f360 030d 	bfi	r3, r0, #0, #14
    987e:	604b      	str	r3, [r1, #4]
    9880:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    9884:	21b0      	movs	r1, #176	; 0xb0
    9886:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    988a:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    988e:	461a      	mov	r2, r3
    9890:	2310      	movs	r3, #16
    9892:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    9896:	e760      	b.n	975a <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9898:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    989c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    989e:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    98a2:	2605      	movs	r6, #5
    98a4:	e7c3      	b.n	982e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98a6:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    98aa:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98ac:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    98b0:	2603      	movs	r6, #3
    98b2:	e7bc      	b.n	982e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98b4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    98b8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98ba:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    98be:	2606      	movs	r6, #6
    98c0:	e7b5      	b.n	982e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98c2:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    98c6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98c8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    98cc:	2604      	movs	r6, #4
    98ce:	e7ae      	b.n	982e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98d0:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    98d4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98d6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    98da:	2602      	movs	r6, #2
    98dc:	e7a7      	b.n	982e <_usb_d_dev_ep_enable+0x1fe>
    98de:	bf00      	nop
    98e0:	200004a4 	.word	0x200004a4
    98e4:	0fffc000 	.word	0x0fffc000

000098e8 <_usb_d_dev_ep_stall>:
{
    98e8:	b470      	push	{r4, r5, r6}
    98ea:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    98ec:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    98ee:	f010 000f 	ands.w	r0, r0, #15
    98f2:	d008      	beq.n	9906 <_usb_d_dev_ep_stall+0x1e>
    98f4:	2b00      	cmp	r3, #0
    98f6:	bfb4      	ite	lt
    98f8:	1d43      	addlt	r3, r0, #5
    98fa:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    98fc:	2805      	cmp	r0, #5
    98fe:	d903      	bls.n	9908 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    9900:	f06f 0011 	mvn.w	r0, #17
    9904:	e018      	b.n	9938 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    9906:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    9908:	2901      	cmp	r1, #1
    990a:	d017      	beq.n	993c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    990c:	2900      	cmp	r1, #0
    990e:	d03a      	beq.n	9986 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9910:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9914:	4a45      	ldr	r2, [pc, #276]	; (9a2c <_usb_d_dev_ep_stall+0x144>)
    9916:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    991a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    991e:	f003 030f 	and.w	r3, r3, #15
    9922:	015b      	lsls	r3, r3, #5
    9924:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9928:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    992c:	2310      	movs	r3, #16
    992e:	40a3      	lsls	r3, r4
    9930:	421a      	tst	r2, r3
    9932:	bf14      	ite	ne
    9934:	2001      	movne	r0, #1
    9936:	2000      	moveq	r0, #0
}
    9938:	bc70      	pop	{r4, r5, r6}
    993a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    993c:	2510      	movs	r5, #16
    993e:	40a5      	lsls	r5, r4
    9940:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9942:	493a      	ldr	r1, [pc, #232]	; (9a2c <_usb_d_dev_ep_stall+0x144>)
    9944:	009e      	lsls	r6, r3, #2
    9946:	18f2      	adds	r2, r6, r3
    9948:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    994c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9950:	f002 020f 	and.w	r2, r2, #15
    9954:	0150      	lsls	r0, r2, #5
    9956:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    995a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    995e:	2020      	movs	r0, #32
    9960:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9964:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9966:	0152      	lsls	r2, r2, #5
    9968:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    996c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    9970:	4433      	add	r3, r6
    9972:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9976:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    997a:	f042 0208 	orr.w	r2, r2, #8
    997e:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9982:	2000      	movs	r0, #0
    9984:	e7d8      	b.n	9938 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9986:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    998a:	4928      	ldr	r1, [pc, #160]	; (9a2c <_usb_d_dev_ep_stall+0x144>)
    998c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9990:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    9994:	f002 020f 	and.w	r2, r2, #15
    9998:	0151      	lsls	r1, r2, #5
    999a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    999e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    99a2:	2010      	movs	r0, #16
    99a4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    99a6:	4205      	tst	r5, r0
    99a8:	d03c      	beq.n	9a24 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    99aa:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    99ac:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    99b0:	2020      	movs	r0, #32
    99b2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    99b4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    99b6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    99ba:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    99be:	4202      	tst	r2, r0
    99c0:	d007      	beq.n	99d2 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    99c2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    99c6:	2201      	movs	r2, #1
    99c8:	fa02 f404 	lsl.w	r4, r2, r4
    99cc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    99ce:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    99d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    99d6:	4815      	ldr	r0, [pc, #84]	; (9a2c <_usb_d_dev_ep_stall+0x144>)
    99d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    99dc:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    99e0:	f002 0207 	and.w	r2, r2, #7
    99e4:	2a01      	cmp	r2, #1
    99e6:	d00c      	beq.n	9a02 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    99e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    99ec:	4a0f      	ldr	r2, [pc, #60]	; (9a2c <_usb_d_dev_ep_stall+0x144>)
    99ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    99f2:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    99f6:	f36f 02c3 	bfc	r2, #3, #1
    99fa:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    99fe:	2000      	movs	r0, #0
    9a00:	e79a      	b.n	9938 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9a02:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9a06:	f012 0f30 	tst.w	r2, #48	; 0x30
    9a0a:	d10d      	bne.n	9a28 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    9a0c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9a10:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9a14:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9a18:	f36f 02c3 	bfc	r2, #3, #1
    9a1c:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9a20:	2000      	movs	r0, #0
    9a22:	e789      	b.n	9938 <_usb_d_dev_ep_stall+0x50>
    9a24:	2000      	movs	r0, #0
    9a26:	e787      	b.n	9938 <_usb_d_dev_ep_stall+0x50>
    9a28:	2000      	movs	r0, #0
    9a2a:	e785      	b.n	9938 <_usb_d_dev_ep_stall+0x50>
    9a2c:	200004a4 	.word	0x200004a4

00009a30 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9a30:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    9a32:	f000 040f 	and.w	r4, r0, #15
    9a36:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9a38:	4a14      	ldr	r2, [pc, #80]	; (9a8c <_usb_d_dev_ep_read_req+0x5c>)
    9a3a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    9a3c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9a3e:	6840      	ldr	r0, [r0, #4]
    9a40:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9a44:	2c05      	cmp	r4, #5
    9a46:	d817      	bhi.n	9a78 <_usb_d_dev_ep_read_req+0x48>
    9a48:	b1c9      	cbz	r1, 9a7e <_usb_d_dev_ep_read_req+0x4e>
    9a4a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9a4e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    9a52:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9a54:	2a11      	cmp	r2, #17
    9a56:	d115      	bne.n	9a84 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9a58:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    9a5c:	f012 0f10 	tst.w	r2, #16
    9a60:	d102      	bne.n	9a68 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    9a62:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    9a64:	bc30      	pop	{r4, r5}
    9a66:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    9a68:	682c      	ldr	r4, [r5, #0]
    9a6a:	686a      	ldr	r2, [r5, #4]
    9a6c:	600c      	str	r4, [r1, #0]
    9a6e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9a70:	2210      	movs	r2, #16
    9a72:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    9a76:	e7f5      	b.n	9a64 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    9a78:	f06f 0011 	mvn.w	r0, #17
    9a7c:	e7f2      	b.n	9a64 <_usb_d_dev_ep_read_req+0x34>
    9a7e:	f06f 0011 	mvn.w	r0, #17
    9a82:	e7ef      	b.n	9a64 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    9a84:	f06f 0012 	mvn.w	r0, #18
    9a88:	e7ec      	b.n	9a64 <_usb_d_dev_ep_read_req+0x34>
    9a8a:	bf00      	nop
    9a8c:	200004a4 	.word	0x200004a4

00009a90 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a94:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9a96:	7a03      	ldrb	r3, [r0, #8]
    9a98:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9a9a:	f013 030f 	ands.w	r3, r3, #15
    9a9e:	f000 80c2 	beq.w	9c26 <_usb_d_dev_ep_trans+0x196>
    9aa2:	2e00      	cmp	r6, #0
    9aa4:	bfb4      	ite	lt
    9aa6:	1d5a      	addlt	r2, r3, #5
    9aa8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    9aaa:	4614      	mov	r4, r2
    9aac:	4969      	ldr	r1, [pc, #420]	; (9c54 <_usb_d_dev_ep_trans+0x1c4>)
    9aae:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    9ab2:	1c55      	adds	r5, r2, #1
    9ab4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    9ab8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9abc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9ac0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9ac4:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9ac8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9acc:	428a      	cmp	r2, r1
    9ace:	d025      	beq.n	9b1c <_usb_d_dev_ep_trans+0x8c>
    9ad0:	1e55      	subs	r5, r2, #1
    9ad2:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    9ad4:	6841      	ldr	r1, [r0, #4]
    9ad6:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9ad8:	2b05      	cmp	r3, #5
    9ada:	f200 8092 	bhi.w	9c02 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    9ade:	6803      	ldr	r3, [r0, #0]
    9ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9ae4:	d31c      	bcc.n	9b20 <_usb_d_dev_ep_trans+0x90>
    9ae6:	eb03 0c01 	add.w	ip, r3, r1
    9aea:	f8df e180 	ldr.w	lr, [pc, #384]	; 9c6c <_usb_d_dev_ep_trans+0x1dc>
    9aee:	45f4      	cmp	ip, lr
    9af0:	d816      	bhi.n	9b20 <_usb_d_dev_ep_trans+0x90>
    9af2:	f013 0f03 	tst.w	r3, #3
    9af6:	d113      	bne.n	9b20 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    9af8:	2e00      	cmp	r6, #0
    9afa:	db2a      	blt.n	9b52 <_usb_d_dev_ep_trans+0xc2>
    9afc:	428a      	cmp	r2, r1
    9afe:	f200 809c 	bhi.w	9c3a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    9b02:	b34d      	cbz	r5, 9b58 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    9b04:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9b08:	4a52      	ldr	r2, [pc, #328]	; (9c54 <_usb_d_dev_ep_trans+0x1c4>)
    9b0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9b12:	2b00      	cmp	r3, #0
    9b14:	d07b      	beq.n	9c0e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    9b16:	f04f 0800 	mov.w	r8, #0
    9b1a:	e00c      	b.n	9b36 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9b1c:	4615      	mov	r5, r2
    9b1e:	e7d9      	b.n	9ad4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    9b20:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9b24:	4a4b      	ldr	r2, [pc, #300]	; (9c54 <_usb_d_dev_ep_trans+0x1c4>)
    9b26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d06a      	beq.n	9c08 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    9b32:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9b36:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9b3a:	4a46      	ldr	r2, [pc, #280]	; (9c54 <_usb_d_dev_ep_trans+0x1c4>)
    9b3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9b40:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9b44:	f013 0f08 	tst.w	r3, #8
    9b48:	d009      	beq.n	9b5e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    9b4a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    9b4c:	b003      	add	sp, #12
    9b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    9b52:	f04f 0800 	mov.w	r8, #0
    9b56:	e7ee      	b.n	9b36 <_usb_d_dev_ep_trans+0xa6>
    9b58:	f04f 0800 	mov.w	r8, #0
    9b5c:	e7eb      	b.n	9b36 <_usb_d_dev_ep_trans+0xa6>
    9b5e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    9b60:	a801      	add	r0, sp, #4
    9b62:	4b3d      	ldr	r3, [pc, #244]	; (9c58 <_usb_d_dev_ep_trans+0x1c8>)
    9b64:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9b66:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9b6a:	4a3a      	ldr	r2, [pc, #232]	; (9c54 <_usb_d_dev_ep_trans+0x1c4>)
    9b6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9b70:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9b74:	f013 0f40 	tst.w	r3, #64	; 0x40
    9b78:	d13c      	bne.n	9bf4 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    9b7a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    9b7e:	4b35      	ldr	r3, [pc, #212]	; (9c54 <_usb_d_dev_ep_trans+0x1c4>)
    9b80:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    9b84:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    9b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9b8c:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    9b90:	a801      	add	r0, sp, #4
    9b92:	4b32      	ldr	r3, [pc, #200]	; (9c5c <_usb_d_dev_ep_trans+0x1cc>)
    9b94:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    9b96:	f8da 3000 	ldr.w	r3, [sl]
    9b9a:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    9b9e:	f8da 3004 	ldr.w	r3, [sl, #4]
    9ba2:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    9ba6:	2300      	movs	r3, #0
    9ba8:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    9bac:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    9bae:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    9bb2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    9bb6:	f368 1345 	bfi	r3, r8, #5, #1
    9bba:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    9bbe:	f89a 3009 	ldrb.w	r3, [sl, #9]
    9bc2:	b1e3      	cbz	r3, 9bfe <_usb_d_dev_ep_trans+0x16e>
    9bc4:	fab5 f585 	clz	r5, r5
    9bc8:	096d      	lsrs	r5, r5, #5
    9bca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9bce:	4b21      	ldr	r3, [pc, #132]	; (9c54 <_usb_d_dev_ep_trans+0x1c4>)
    9bd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    9bd4:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    9bd8:	f365 1304 	bfi	r3, r5, #4, #1
    9bdc:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    9be0:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    9be2:	f04f 0100 	mov.w	r1, #0
    9be6:	4638      	mov	r0, r7
    9be8:	bfb4      	ite	lt
    9bea:	4b1d      	ldrlt	r3, [pc, #116]	; (9c60 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    9bec:	4b1d      	ldrge	r3, [pc, #116]	; (9c64 <_usb_d_dev_ep_trans+0x1d4>)
    9bee:	4798      	blx	r3
	return ERR_NONE;
    9bf0:	2000      	movs	r0, #0
    9bf2:	e7ab      	b.n	9b4c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    9bf4:	a801      	add	r0, sp, #4
    9bf6:	4b19      	ldr	r3, [pc, #100]	; (9c5c <_usb_d_dev_ep_trans+0x1cc>)
    9bf8:	4798      	blx	r3
		return USB_BUSY;
    9bfa:	2001      	movs	r0, #1
    9bfc:	e7a6      	b.n	9b4c <_usb_d_dev_ep_trans+0xbc>
    9bfe:	2500      	movs	r5, #0
    9c00:	e7e3      	b.n	9bca <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    9c02:	f06f 0011 	mvn.w	r0, #17
    9c06:	e7a1      	b.n	9b4c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9c08:	f06f 0012 	mvn.w	r0, #18
    9c0c:	e79e      	b.n	9b4c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    9c0e:	f06f 0011 	mvn.w	r0, #17
    9c12:	e79b      	b.n	9b4c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9c14:	f06f 0012 	mvn.w	r0, #18
    9c18:	e798      	b.n	9b4c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    9c1a:	6841      	ldr	r1, [r0, #4]
    9c1c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    9c20:	4f11      	ldr	r7, [pc, #68]	; (9c68 <_usb_d_dev_ep_trans+0x1d8>)
    9c22:	2400      	movs	r4, #0
    9c24:	e75b      	b.n	9ade <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9c26:	4a0b      	ldr	r2, [pc, #44]	; (9c54 <_usb_d_dev_ep_trans+0x1c4>)
    9c28:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9c2c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9c30:	428a      	cmp	r2, r1
    9c32:	d0f2      	beq.n	9c1a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    9c34:	4f0c      	ldr	r7, [pc, #48]	; (9c68 <_usb_d_dev_ep_trans+0x1d8>)
    9c36:	2400      	movs	r4, #0
    9c38:	e74a      	b.n	9ad0 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    9c3a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9c3e:	4a05      	ldr	r2, [pc, #20]	; (9c54 <_usb_d_dev_ep_trans+0x1c4>)
    9c40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9c48:	2b00      	cmp	r3, #0
    9c4a:	d0e3      	beq.n	9c14 <_usb_d_dev_ep_trans+0x184>
    9c4c:	f04f 0801 	mov.w	r8, #1
    9c50:	e771      	b.n	9b36 <_usb_d_dev_ep_trans+0xa6>
    9c52:	bf00      	nop
    9c54:	200004a4 	.word	0x200004a4
    9c58:	00005e59 	.word	0x00005e59
    9c5c:	00005e67 	.word	0x00005e67
    9c60:	00008d41 	.word	0x00008d41
    9c64:	00008ec5 	.word	0x00008ec5
    9c68:	20000578 	.word	0x20000578
    9c6c:	20041fff 	.word	0x20041fff

00009c70 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9c70:	4b07      	ldr	r3, [pc, #28]	; (9c90 <_usb_d_dev_register_callback+0x20>)
    9c72:	2900      	cmp	r1, #0
    9c74:	bf08      	it	eq
    9c76:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    9c78:	2801      	cmp	r0, #1
    9c7a:	d004      	beq.n	9c86 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    9c7c:	b910      	cbnz	r0, 9c84 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    9c7e:	4b05      	ldr	r3, [pc, #20]	; (9c94 <_usb_d_dev_register_callback+0x24>)
    9c80:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    9c84:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    9c86:	4b03      	ldr	r3, [pc, #12]	; (9c94 <_usb_d_dev_register_callback+0x24>)
    9c88:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    9c8c:	4770      	bx	lr
    9c8e:	bf00      	nop
    9c90:	00008ab1 	.word	0x00008ab1
    9c94:	200004a4 	.word	0x200004a4

00009c98 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9c98:	4b0a      	ldr	r3, [pc, #40]	; (9cc4 <_usb_d_dev_register_ep_callback+0x2c>)
    9c9a:	2900      	cmp	r1, #0
    9c9c:	bf08      	it	eq
    9c9e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    9ca0:	4603      	mov	r3, r0
    9ca2:	b138      	cbz	r0, 9cb4 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    9ca4:	2801      	cmp	r0, #1
    9ca6:	d009      	beq.n	9cbc <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    9ca8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    9caa:	bf04      	itt	eq
    9cac:	4b06      	ldreq	r3, [pc, #24]	; (9cc8 <_usb_d_dev_register_ep_callback+0x30>)
    9cae:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    9cb2:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    9cb4:	4b04      	ldr	r3, [pc, #16]	; (9cc8 <_usb_d_dev_register_ep_callback+0x30>)
    9cb6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    9cba:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    9cbc:	4b02      	ldr	r3, [pc, #8]	; (9cc8 <_usb_d_dev_register_ep_callback+0x30>)
    9cbe:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    9cc2:	4770      	bx	lr
    9cc4:	00008ab1 	.word	0x00008ab1
    9cc8:	200004a4 	.word	0x200004a4

00009ccc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    9ccc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9cce:	4b01      	ldr	r3, [pc, #4]	; (9cd4 <USB_0_Handler+0x8>)
    9cd0:	4798      	blx	r3
    9cd2:	bd08      	pop	{r3, pc}
    9cd4:	000090b5 	.word	0x000090b5

00009cd8 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    9cd8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9cda:	4b01      	ldr	r3, [pc, #4]	; (9ce0 <USB_1_Handler+0x8>)
    9cdc:	4798      	blx	r3
    9cde:	bd08      	pop	{r3, pc}
    9ce0:	000090b5 	.word	0x000090b5

00009ce4 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    9ce4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9ce6:	4b01      	ldr	r3, [pc, #4]	; (9cec <USB_2_Handler+0x8>)
    9ce8:	4798      	blx	r3
    9cea:	bd08      	pop	{r3, pc}
    9cec:	000090b5 	.word	0x000090b5

00009cf0 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    9cf0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9cf2:	4b01      	ldr	r3, [pc, #4]	; (9cf8 <USB_3_Handler+0x8>)
    9cf4:	4798      	blx	r3
    9cf6:	bd08      	pop	{r3, pc}
    9cf8:	000090b5 	.word	0x000090b5

00009cfc <_wdt_init>:
int32_t _wdt_init(struct wdt_dev *const dev)
{
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    9cfc:	6803      	ldr	r3, [r0, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9cfe:	689a      	ldr	r2, [r3, #8]
    9d00:	f012 0f0e 	tst.w	r2, #14
    9d04:	d1fb      	bne.n	9cfe <_wdt_init+0x2>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9d06:	781a      	ldrb	r2, [r3, #0]
    9d08:	09d2      	lsrs	r2, r2, #7
    9d0a:	d118      	bne.n	9d3e <_wdt_init+0x42>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9d0c:	689a      	ldr	r2, [r3, #8]
    9d0e:	f012 0f0e 	tst.w	r2, #14
    9d12:	d1fb      	bne.n	9d0c <_wdt_init+0x10>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9d14:	781a      	ldrb	r2, [r3, #0]
    9d16:	f012 0f02 	tst.w	r2, #2
    9d1a:	d113      	bne.n	9d44 <_wdt_init+0x48>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    9d1c:	781a      	ldrb	r2, [r3, #0]
    9d1e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    9d22:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9d24:	689a      	ldr	r2, [r3, #8]
    9d26:	f012 0f0e 	tst.w	r2, #14
    9d2a:	d1fb      	bne.n	9d24 <_wdt_init+0x28>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    9d2c:	6802      	ldr	r2, [r0, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9d2e:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    9d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    9d34:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    9d38:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    9d3a:	2000      	movs	r0, #0
    9d3c:	4770      	bx	lr
		return ERR_DENIED;
    9d3e:	f06f 0010 	mvn.w	r0, #16
    9d42:	4770      	bx	lr
    9d44:	f06f 0010 	mvn.w	r0, #16
}
    9d48:	4770      	bx	lr
	...

00009d4c <main>:




int main(void)
{
    9d4c:	b508      	push	{r3, lr}

	atmel_start_init();	
    9d4e:	4b08      	ldr	r3, [pc, #32]	; (9d70 <main+0x24>)
    9d50:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    9d52:	4d08      	ldr	r5, [pc, #32]	; (9d74 <main+0x28>)
    9d54:	4908      	ldr	r1, [pc, #32]	; (9d78 <main+0x2c>)
    9d56:	4628      	mov	r0, r5
    9d58:	4c08      	ldr	r4, [pc, #32]	; (9d7c <main+0x30>)
    9d5a:	47a0      	blx	r4
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Unknow Reset Source");
    9d5c:	4908      	ldr	r1, [pc, #32]	; (9d80 <main+0x34>)
    9d5e:	4628      	mov	r0, r5
    9d60:	47a0      	blx	r4
		{
		}
		
	#else	
	
		GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    9d62:	4908      	ldr	r1, [pc, #32]	; (9d84 <main+0x38>)
    9d64:	4808      	ldr	r0, [pc, #32]	; (9d88 <main+0x3c>)
    9d66:	47a0      	blx	r4
	
	#ifdef HARDWARETEST
	
		#include "grid/grid_hardwaretest.h"
		
		grid_hardwaretest_main();
    9d68:	4b08      	ldr	r3, [pc, #32]	; (9d8c <main+0x40>)
    9d6a:	4798      	blx	r3
    9d6c:	e7fe      	b.n	9d6c <main+0x20>
    9d6e:	bf00      	nop
    9d70:	000042d1 	.word	0x000042d1
    9d74:	0000cc08 	.word	0x0000cc08
    9d78:	0000cbf4 	.word	0x0000cbf4
    9d7c:	0000b6ad 	.word	0x0000b6ad
    9d80:	0000cc2c 	.word	0x0000cc2c
    9d84:	0000cc40 	.word	0x0000cc40
    9d88:	0000c9b8 	.word	0x0000c9b8
    9d8c:	0000563d 	.word	0x0000563d

00009d90 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    9d90:	b940      	cbnz	r0, 9da4 <_read+0x14>
{
    9d92:	b508      	push	{r3, lr}
    9d94:	460b      	mov	r3, r1
    9d96:	4611      	mov	r1, r2
    9d98:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    9d9a:	4b04      	ldr	r3, [pc, #16]	; (9dac <_read+0x1c>)
    9d9c:	4798      	blx	r3
    9d9e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9da2:	bd08      	pop	{r3, pc}
		return -1;
    9da4:	f04f 30ff 	mov.w	r0, #4294967295
    9da8:	4770      	bx	lr
    9daa:	bf00      	nop
    9dac:	00009e01 	.word	0x00009e01

00009db0 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    9db0:	3801      	subs	r0, #1
    9db2:	2802      	cmp	r0, #2
    9db4:	d808      	bhi.n	9dc8 <_write+0x18>
{
    9db6:	b508      	push	{r3, lr}
    9db8:	460b      	mov	r3, r1
    9dba:	4611      	mov	r1, r2
    9dbc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    9dbe:	4b04      	ldr	r3, [pc, #16]	; (9dd0 <_write+0x20>)
    9dc0:	4798      	blx	r3
    9dc2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9dc6:	bd08      	pop	{r3, pc}
		return -1;
    9dc8:	f04f 30ff 	mov.w	r0, #4294967295
    9dcc:	4770      	bx	lr
    9dce:	bf00      	nop
    9dd0:	00009e25 	.word	0x00009e25

00009dd4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    9dd4:	b570      	push	{r4, r5, r6, lr}
    9dd6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    9dd8:	4d06      	ldr	r5, [pc, #24]	; (9df4 <stdio_io_init+0x20>)
    9dda:	682b      	ldr	r3, [r5, #0]
    9ddc:	2100      	movs	r1, #0
    9dde:	6898      	ldr	r0, [r3, #8]
    9de0:	4c05      	ldr	r4, [pc, #20]	; (9df8 <stdio_io_init+0x24>)
    9de2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    9de4:	682b      	ldr	r3, [r5, #0]
    9de6:	2100      	movs	r1, #0
    9de8:	6858      	ldr	r0, [r3, #4]
    9dea:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    9dec:	4b03      	ldr	r3, [pc, #12]	; (9dfc <stdio_io_init+0x28>)
    9dee:	601e      	str	r6, [r3, #0]
    9df0:	bd70      	pop	{r4, r5, r6, pc}
    9df2:	bf00      	nop
    9df4:	2000005c 	.word	0x2000005c
    9df8:	0000b771 	.word	0x0000b771
    9dfc:	20000864 	.word	0x20000864

00009e00 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    9e00:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9e02:	4b06      	ldr	r3, [pc, #24]	; (9e1c <stdio_io_read+0x1c>)
    9e04:	681b      	ldr	r3, [r3, #0]
    9e06:	b133      	cbz	r3, 9e16 <stdio_io_read+0x16>
    9e08:	460a      	mov	r2, r1
    9e0a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    9e0c:	b292      	uxth	r2, r2
    9e0e:	4618      	mov	r0, r3
    9e10:	4b03      	ldr	r3, [pc, #12]	; (9e20 <stdio_io_read+0x20>)
    9e12:	4798      	blx	r3
    9e14:	bd08      	pop	{r3, pc}
		return 0;
    9e16:	2000      	movs	r0, #0
}
    9e18:	bd08      	pop	{r3, pc}
    9e1a:	bf00      	nop
    9e1c:	20000864 	.word	0x20000864
    9e20:	00005fe9 	.word	0x00005fe9

00009e24 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    9e24:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9e26:	4b06      	ldr	r3, [pc, #24]	; (9e40 <stdio_io_write+0x1c>)
    9e28:	681b      	ldr	r3, [r3, #0]
    9e2a:	b133      	cbz	r3, 9e3a <stdio_io_write+0x16>
    9e2c:	460a      	mov	r2, r1
    9e2e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    9e30:	b292      	uxth	r2, r2
    9e32:	4618      	mov	r0, r3
    9e34:	4b03      	ldr	r3, [pc, #12]	; (9e44 <stdio_io_write+0x20>)
    9e36:	4798      	blx	r3
    9e38:	bd08      	pop	{r3, pc}
		return 0;
    9e3a:	2000      	movs	r0, #0
}
    9e3c:	bd08      	pop	{r3, pc}
    9e3e:	bf00      	nop
    9e40:	20000864 	.word	0x20000864
    9e44:	00005fe1 	.word	0x00005fe1

00009e48 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    9e48:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    9e4a:	4c04      	ldr	r4, [pc, #16]	; (9e5c <stdio_redirect_init+0x14>)
    9e4c:	4620      	mov	r0, r4
    9e4e:	4b04      	ldr	r3, [pc, #16]	; (9e60 <stdio_redirect_init+0x18>)
    9e50:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    9e52:	4620      	mov	r0, r4
    9e54:	4b03      	ldr	r3, [pc, #12]	; (9e64 <stdio_redirect_init+0x1c>)
    9e56:	4798      	blx	r3
    9e58:	bd10      	pop	{r4, pc}
    9e5a:	bf00      	nop
    9e5c:	20000a44 	.word	0x20000a44
    9e60:	00006581 	.word	0x00006581
    9e64:	00009dd5 	.word	0x00009dd5

00009e68 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e6a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9e6c:	780b      	ldrb	r3, [r1, #0]
    9e6e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    9e72:	2c01      	cmp	r4, #1
    9e74:	d15e      	bne.n	9f34 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    9e76:	888c      	ldrh	r4, [r1, #4]
    9e78:	4d35      	ldr	r5, [pc, #212]	; (9f50 <cdcdf_acm_req+0xe8>)
    9e7a:	782d      	ldrb	r5, [r5, #0]
    9e7c:	42a5      	cmp	r5, r4
    9e7e:	d003      	beq.n	9e88 <cdcdf_acm_req+0x20>
    9e80:	4d33      	ldr	r5, [pc, #204]	; (9f50 <cdcdf_acm_req+0xe8>)
    9e82:	786d      	ldrb	r5, [r5, #1]
    9e84:	42a5      	cmp	r5, r4
    9e86:	d158      	bne.n	9f3a <cdcdf_acm_req+0xd2>
    9e88:	4616      	mov	r6, r2
    9e8a:	460c      	mov	r4, r1
    9e8c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    9e8e:	f013 0f80 	tst.w	r3, #128	; 0x80
    9e92:	d10c      	bne.n	9eae <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    9e94:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    9e96:	4b2f      	ldr	r3, [pc, #188]	; (9f54 <cdcdf_acm_req+0xec>)
    9e98:	4798      	blx	r3
    9e9a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    9e9c:	7863      	ldrb	r3, [r4, #1]
    9e9e:	2b20      	cmp	r3, #32
    9ea0:	d013      	beq.n	9eca <cdcdf_acm_req+0x62>
    9ea2:	2b22      	cmp	r3, #34	; 0x22
    9ea4:	d032      	beq.n	9f0c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    9ea6:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    9eaa:	b003      	add	sp, #12
    9eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    9eae:	2a01      	cmp	r2, #1
    9eb0:	d046      	beq.n	9f40 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    9eb2:	784b      	ldrb	r3, [r1, #1]
    9eb4:	2b21      	cmp	r3, #33	; 0x21
    9eb6:	d145      	bne.n	9f44 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9eb8:	88cb      	ldrh	r3, [r1, #6]
    9eba:	2b07      	cmp	r3, #7
    9ebc:	d145      	bne.n	9f4a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    9ebe:	2300      	movs	r3, #0
    9ec0:	2207      	movs	r2, #7
    9ec2:	4925      	ldr	r1, [pc, #148]	; (9f58 <cdcdf_acm_req+0xf0>)
    9ec4:	4c25      	ldr	r4, [pc, #148]	; (9f5c <cdcdf_acm_req+0xf4>)
    9ec6:	47a0      	blx	r4
    9ec8:	e7ef      	b.n	9eaa <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9eca:	2f07      	cmp	r7, #7
    9ecc:	d12b      	bne.n	9f26 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    9ece:	b1be      	cbz	r6, 9f00 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    9ed0:	6800      	ldr	r0, [r0, #0]
    9ed2:	9000      	str	r0, [sp, #0]
    9ed4:	888a      	ldrh	r2, [r1, #4]
    9ed6:	798b      	ldrb	r3, [r1, #6]
    9ed8:	f8ad 2004 	strh.w	r2, [sp, #4]
    9edc:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    9ee0:	4b1b      	ldr	r3, [pc, #108]	; (9f50 <cdcdf_acm_req+0xe8>)
    9ee2:	691b      	ldr	r3, [r3, #16]
    9ee4:	b113      	cbz	r3, 9eec <cdcdf_acm_req+0x84>
    9ee6:	4668      	mov	r0, sp
    9ee8:	4798      	blx	r3
    9eea:	b1f8      	cbz	r0, 9f2c <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    9eec:	4b18      	ldr	r3, [pc, #96]	; (9f50 <cdcdf_acm_req+0xe8>)
    9eee:	aa02      	add	r2, sp, #8
    9ef0:	e912 0003 	ldmdb	r2, {r0, r1}
    9ef4:	6098      	str	r0, [r3, #8]
    9ef6:	8199      	strh	r1, [r3, #12]
    9ef8:	0c09      	lsrs	r1, r1, #16
    9efa:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    9efc:	2000      	movs	r0, #0
    9efe:	e7d4      	b.n	9eaa <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    9f00:	2300      	movs	r3, #0
    9f02:	2207      	movs	r2, #7
    9f04:	4628      	mov	r0, r5
    9f06:	4c15      	ldr	r4, [pc, #84]	; (9f5c <cdcdf_acm_req+0xf4>)
    9f08:	47a0      	blx	r4
    9f0a:	e7ce      	b.n	9eaa <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    9f0c:	2300      	movs	r3, #0
    9f0e:	461a      	mov	r2, r3
    9f10:	4619      	mov	r1, r3
    9f12:	4618      	mov	r0, r3
    9f14:	4d11      	ldr	r5, [pc, #68]	; (9f5c <cdcdf_acm_req+0xf4>)
    9f16:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    9f18:	4b0d      	ldr	r3, [pc, #52]	; (9f50 <cdcdf_acm_req+0xe8>)
    9f1a:	695b      	ldr	r3, [r3, #20]
    9f1c:	b143      	cbz	r3, 9f30 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    9f1e:	8860      	ldrh	r0, [r4, #2]
    9f20:	4798      	blx	r3
		return ERR_NONE;
    9f22:	2000      	movs	r0, #0
    9f24:	e7c1      	b.n	9eaa <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9f26:	f04f 30ff 	mov.w	r0, #4294967295
    9f2a:	e7be      	b.n	9eaa <cdcdf_acm_req+0x42>
			return ERR_NONE;
    9f2c:	2000      	movs	r0, #0
    9f2e:	e7bc      	b.n	9eaa <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9f30:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    9f32:	e7ba      	b.n	9eaa <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9f34:	f06f 0009 	mvn.w	r0, #9
    9f38:	e7b7      	b.n	9eaa <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9f3a:	f06f 0009 	mvn.w	r0, #9
    9f3e:	e7b4      	b.n	9eaa <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9f40:	2000      	movs	r0, #0
    9f42:	e7b2      	b.n	9eaa <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    9f44:	f06f 000c 	mvn.w	r0, #12
    9f48:	e7af      	b.n	9eaa <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9f4a:	f04f 30ff 	mov.w	r0, #4294967295
    9f4e:	e7ac      	b.n	9eaa <cdcdf_acm_req+0x42>
    9f50:	20000868 	.word	0x20000868
    9f54:	0000ab79 	.word	0x0000ab79
    9f58:	20000870 	.word	0x20000870
    9f5c:	0000a6ad 	.word	0x0000a6ad

00009f60 <cdcdf_acm_ctrl>:
{
    9f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f64:	b083      	sub	sp, #12
    9f66:	4616      	mov	r6, r2
	switch (ctrl) {
    9f68:	2901      	cmp	r1, #1
    9f6a:	d066      	beq.n	a03a <cdcdf_acm_ctrl+0xda>
    9f6c:	b141      	cbz	r1, 9f80 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    9f6e:	2902      	cmp	r1, #2
    9f70:	bf0c      	ite	eq
    9f72:	f06f 001a 	mvneq.w	r0, #26
    9f76:	f06f 000c 	mvnne.w	r0, #12
}
    9f7a:	b003      	add	sp, #12
    9f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9f80:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    9f84:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    9f86:	2800      	cmp	r0, #0
    9f88:	f000 8085 	beq.w	a096 <cdcdf_acm_ctrl+0x136>
    9f8c:	f10a 3bff 	add.w	fp, sl, #4294967295
    9f90:	f10a 0301 	add.w	r3, sl, #1
    9f94:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9f96:	4f46      	ldr	r7, [pc, #280]	; (a0b0 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    9f98:	f8df 9124 	ldr.w	r9, [pc, #292]	; a0c0 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9f9c:	f8df 8124 	ldr.w	r8, [pc, #292]	; a0c4 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    9fa0:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    9fa2:	7943      	ldrb	r3, [r0, #5]
    9fa4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9fa8:	2b02      	cmp	r3, #2
    9faa:	d002      	beq.n	9fb2 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    9fac:	f06f 0009 	mvn.w	r0, #9
    9fb0:	e7e3      	b.n	9f7a <cdcdf_acm_ctrl+0x1a>
    9fb2:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9fb6:	f89b 3000 	ldrb.w	r3, [fp]
    9fba:	429a      	cmp	r2, r3
    9fbc:	d06e      	beq.n	a09c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    9fbe:	2bff      	cmp	r3, #255	; 0xff
    9fc0:	d16f      	bne.n	a0a2 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    9fc2:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    9fc6:	2205      	movs	r2, #5
    9fc8:	6871      	ldr	r1, [r6, #4]
    9fca:	4b3a      	ldr	r3, [pc, #232]	; (a0b4 <cdcdf_acm_ctrl+0x154>)
    9fcc:	4798      	blx	r3
		while (NULL != ep) {
    9fce:	4604      	mov	r4, r0
    9fd0:	b1f8      	cbz	r0, a012 <cdcdf_acm_ctrl+0xb2>
    9fd2:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    9fd6:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    9fd8:	7963      	ldrb	r3, [r4, #5]
    9fda:	7922      	ldrb	r2, [r4, #4]
    9fdc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9fe0:	b292      	uxth	r2, r2
    9fe2:	78e1      	ldrb	r1, [r4, #3]
    9fe4:	4628      	mov	r0, r5
    9fe6:	47b8      	blx	r7
    9fe8:	2800      	cmp	r0, #0
    9fea:	d15d      	bne.n	a0a8 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9fec:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    9ff0:	bf14      	ite	ne
    9ff2:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9ff6:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    9ffa:	4628      	mov	r0, r5
    9ffc:	47c8      	blx	r9
			desc->sod = ep;
    9ffe:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    a000:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a002:	6871      	ldr	r1, [r6, #4]
    a004:	4420      	add	r0, r4
    a006:	47c0      	blx	r8
		while (NULL != ep) {
    a008:	4604      	mov	r4, r0
    a00a:	2800      	cmp	r0, #0
    a00c:	d1e3      	bne.n	9fd6 <cdcdf_acm_ctrl+0x76>
    a00e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    a012:	6833      	ldr	r3, [r6, #0]
    a014:	7818      	ldrb	r0, [r3, #0]
    a016:	2204      	movs	r2, #4
    a018:	6871      	ldr	r1, [r6, #4]
    a01a:	4418      	add	r0, r3
    a01c:	4b25      	ldr	r3, [pc, #148]	; (a0b4 <cdcdf_acm_ctrl+0x154>)
    a01e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    a020:	9b00      	ldr	r3, [sp, #0]
    a022:	459b      	cmp	fp, r3
    a024:	d004      	beq.n	a030 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    a026:	2800      	cmp	r0, #0
    a028:	d1ba      	bne.n	9fa0 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    a02a:	f06f 0009 	mvn.w	r0, #9
    a02e:	e7a4      	b.n	9f7a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    a030:	2201      	movs	r2, #1
    a032:	4b21      	ldr	r3, [pc, #132]	; (a0b8 <cdcdf_acm_ctrl+0x158>)
    a034:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a036:	2000      	movs	r0, #0
    a038:	e79f      	b.n	9f7a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a03a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a03c:	b142      	cbz	r2, a050 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a03e:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    a040:	795b      	ldrb	r3, [r3, #5]
    a042:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a046:	2b02      	cmp	r3, #2
    a048:	d002      	beq.n	a050 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    a04a:	f06f 0009 	mvn.w	r0, #9
    a04e:	e794      	b.n	9f7a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    a050:	7823      	ldrb	r3, [r4, #0]
    a052:	2bff      	cmp	r3, #255	; 0xff
    a054:	d008      	beq.n	a068 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    a056:	23ff      	movs	r3, #255	; 0xff
    a058:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    a05a:	78a0      	ldrb	r0, [r4, #2]
    a05c:	4298      	cmp	r0, r3
    a05e:	d003      	beq.n	a068 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a060:	4b16      	ldr	r3, [pc, #88]	; (a0bc <cdcdf_acm_ctrl+0x15c>)
    a062:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a064:	23ff      	movs	r3, #255	; 0xff
    a066:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    a068:	7863      	ldrb	r3, [r4, #1]
    a06a:	2bff      	cmp	r3, #255	; 0xff
    a06c:	d008      	beq.n	a080 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    a06e:	23ff      	movs	r3, #255	; 0xff
    a070:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    a072:	78e0      	ldrb	r0, [r4, #3]
    a074:	4298      	cmp	r0, r3
    a076:	d003      	beq.n	a080 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a078:	4b10      	ldr	r3, [pc, #64]	; (a0bc <cdcdf_acm_ctrl+0x15c>)
    a07a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a07c:	23ff      	movs	r3, #255	; 0xff
    a07e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    a080:	7920      	ldrb	r0, [r4, #4]
    a082:	28ff      	cmp	r0, #255	; 0xff
    a084:	d003      	beq.n	a08e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    a086:	4b0d      	ldr	r3, [pc, #52]	; (a0bc <cdcdf_acm_ctrl+0x15c>)
    a088:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a08a:	23ff      	movs	r3, #255	; 0xff
    a08c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    a08e:	2000      	movs	r0, #0
    a090:	4b09      	ldr	r3, [pc, #36]	; (a0b8 <cdcdf_acm_ctrl+0x158>)
    a092:	7158      	strb	r0, [r3, #5]
    a094:	e771      	b.n	9f7a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    a096:	f06f 0009 	mvn.w	r0, #9
    a09a:	e76e      	b.n	9f7a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    a09c:	f06f 0011 	mvn.w	r0, #17
    a0a0:	e76b      	b.n	9f7a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    a0a2:	f06f 001b 	mvn.w	r0, #27
    a0a6:	e768      	b.n	9f7a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    a0a8:	f06f 0013 	mvn.w	r0, #19
    a0ac:	e765      	b.n	9f7a <cdcdf_acm_ctrl+0x1a>
    a0ae:	bf00      	nop
    a0b0:	00006865 	.word	0x00006865
    a0b4:	0000ab99 	.word	0x0000ab99
    a0b8:	20000868 	.word	0x20000868
    a0bc:	000068cd 	.word	0x000068cd
    a0c0:	000068f9 	.word	0x000068f9
    a0c4:	0000abd3 	.word	0x0000abd3

0000a0c8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    a0c8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a0ca:	4b0a      	ldr	r3, [pc, #40]	; (a0f4 <cdcdf_acm_init+0x2c>)
    a0cc:	4798      	blx	r3
    a0ce:	2801      	cmp	r0, #1
    a0d0:	d80c      	bhi.n	a0ec <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    a0d2:	4809      	ldr	r0, [pc, #36]	; (a0f8 <cdcdf_acm_init+0x30>)
    a0d4:	4b09      	ldr	r3, [pc, #36]	; (a0fc <cdcdf_acm_init+0x34>)
    a0d6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    a0d8:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    a0da:	3018      	adds	r0, #24
    a0dc:	4b08      	ldr	r3, [pc, #32]	; (a100 <cdcdf_acm_init+0x38>)
    a0de:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    a0e0:	4908      	ldr	r1, [pc, #32]	; (a104 <cdcdf_acm_init+0x3c>)
    a0e2:	2001      	movs	r0, #1
    a0e4:	4b08      	ldr	r3, [pc, #32]	; (a108 <cdcdf_acm_init+0x40>)
    a0e6:	4798      	blx	r3
	return ERR_NONE;
    a0e8:	2000      	movs	r0, #0
    a0ea:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a0ec:	f06f 0010 	mvn.w	r0, #16
}
    a0f0:	bd08      	pop	{r3, pc}
    a0f2:	bf00      	nop
    a0f4:	0000ab85 	.word	0x0000ab85
    a0f8:	20000868 	.word	0x20000868
    a0fc:	00009f61 	.word	0x00009f61
    a100:	0000ab65 	.word	0x0000ab65
    a104:	20000044 	.word	0x20000044
    a108:	0000aae9 	.word	0x0000aae9

0000a10c <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a10c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a10e:	780b      	ldrb	r3, [r1, #0]
    a110:	2b81      	cmp	r3, #129	; 0x81
    a112:	d010      	beq.n	a136 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a114:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a118:	2b01      	cmp	r3, #1
    a11a:	d13f      	bne.n	a19c <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    a11c:	888a      	ldrh	r2, [r1, #4]
    a11e:	4b22      	ldr	r3, [pc, #136]	; (a1a8 <hid_keyboard_req+0x9c>)
    a120:	7b1b      	ldrb	r3, [r3, #12]
    a122:	429a      	cmp	r2, r3
    a124:	d13d      	bne.n	a1a2 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    a126:	784b      	ldrb	r3, [r1, #1]
    a128:	2b03      	cmp	r3, #3
    a12a:	d028      	beq.n	a17e <hid_keyboard_req+0x72>
    a12c:	2b0b      	cmp	r3, #11
    a12e:	d02c      	beq.n	a18a <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a130:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a134:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a136:	784b      	ldrb	r3, [r1, #1]
    a138:	2b06      	cmp	r3, #6
    a13a:	d002      	beq.n	a142 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    a13c:	f06f 0009 	mvn.w	r0, #9
    a140:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a142:	888a      	ldrh	r2, [r1, #4]
    a144:	4b18      	ldr	r3, [pc, #96]	; (a1a8 <hid_keyboard_req+0x9c>)
    a146:	7b1b      	ldrb	r3, [r3, #12]
    a148:	429a      	cmp	r2, r3
    a14a:	d002      	beq.n	a152 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    a14c:	f06f 0009 	mvn.w	r0, #9
    a150:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a152:	884b      	ldrh	r3, [r1, #2]
    a154:	0a1b      	lsrs	r3, r3, #8
    a156:	2b21      	cmp	r3, #33	; 0x21
    a158:	d004      	beq.n	a164 <hid_keyboard_req+0x58>
    a15a:	2b22      	cmp	r3, #34	; 0x22
    a15c:	d009      	beq.n	a172 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    a15e:	f06f 000c 	mvn.w	r0, #12
    a162:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    a164:	4b10      	ldr	r3, [pc, #64]	; (a1a8 <hid_keyboard_req+0x9c>)
    a166:	6819      	ldr	r1, [r3, #0]
    a168:	2300      	movs	r3, #0
    a16a:	780a      	ldrb	r2, [r1, #0]
    a16c:	4c0f      	ldr	r4, [pc, #60]	; (a1ac <hid_keyboard_req+0xa0>)
    a16e:	47a0      	blx	r4
    a170:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    a172:	2300      	movs	r3, #0
    a174:	223b      	movs	r2, #59	; 0x3b
    a176:	490e      	ldr	r1, [pc, #56]	; (a1b0 <hid_keyboard_req+0xa4>)
    a178:	4c0c      	ldr	r4, [pc, #48]	; (a1ac <hid_keyboard_req+0xa0>)
    a17a:	47a0      	blx	r4
    a17c:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    a17e:	2300      	movs	r3, #0
    a180:	2201      	movs	r2, #1
    a182:	490c      	ldr	r1, [pc, #48]	; (a1b4 <hid_keyboard_req+0xa8>)
    a184:	4c09      	ldr	r4, [pc, #36]	; (a1ac <hid_keyboard_req+0xa0>)
    a186:	47a0      	blx	r4
    a188:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    a18a:	884a      	ldrh	r2, [r1, #2]
    a18c:	4b06      	ldr	r3, [pc, #24]	; (a1a8 <hid_keyboard_req+0x9c>)
    a18e:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    a190:	2300      	movs	r3, #0
    a192:	461a      	mov	r2, r3
    a194:	4619      	mov	r1, r3
    a196:	4c05      	ldr	r4, [pc, #20]	; (a1ac <hid_keyboard_req+0xa0>)
    a198:	47a0      	blx	r4
    a19a:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a19c:	f06f 0009 	mvn.w	r0, #9
    a1a0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a1a2:	f06f 0009 	mvn.w	r0, #9
    a1a6:	bd10      	pop	{r4, pc}
    a1a8:	2000088c 	.word	0x2000088c
    a1ac:	0000a6ad 	.word	0x0000a6ad
    a1b0:	0000cc50 	.word	0x0000cc50
    a1b4:	2000089b 	.word	0x2000089b

0000a1b8 <hid_keyboard_ctrl>:
{
    a1b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1bc:	4614      	mov	r4, r2
	switch (ctrl) {
    a1be:	2901      	cmp	r1, #1
    a1c0:	d050      	beq.n	a264 <hid_keyboard_ctrl+0xac>
    a1c2:	b141      	cbz	r1, a1d6 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    a1c4:	2902      	cmp	r1, #2
    a1c6:	bf0c      	ite	eq
    a1c8:	f06f 051a 	mvneq.w	r5, #26
    a1cc:	f06f 050c 	mvnne.w	r5, #12
}
    a1d0:	4628      	mov	r0, r5
    a1d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a1d6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    a1da:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a1dc:	2b00      	cmp	r3, #0
    a1de:	d05e      	beq.n	a29e <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a1e0:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a1e2:	795b      	ldrb	r3, [r3, #5]
    a1e4:	2b03      	cmp	r3, #3
    a1e6:	d15d      	bne.n	a2a4 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a1e8:	f898 300c 	ldrb.w	r3, [r8, #12]
    a1ec:	429a      	cmp	r2, r3
    a1ee:	d05c      	beq.n	a2aa <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a1f0:	2bff      	cmp	r3, #255	; 0xff
    a1f2:	d15d      	bne.n	a2b0 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a1f4:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a1f8:	6823      	ldr	r3, [r4, #0]
    a1fa:	7818      	ldrb	r0, [r3, #0]
    a1fc:	2221      	movs	r2, #33	; 0x21
    a1fe:	6861      	ldr	r1, [r4, #4]
    a200:	4418      	add	r0, r3
    a202:	4b31      	ldr	r3, [pc, #196]	; (a2c8 <hid_keyboard_ctrl+0x110>)
    a204:	4798      	blx	r3
    a206:	4b31      	ldr	r3, [pc, #196]	; (a2cc <hid_keyboard_ctrl+0x114>)
    a208:	6018      	str	r0, [r3, #0]
    a20a:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a20c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; a2d4 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a210:	f8df a0c4 	ldr.w	sl, [pc, #196]	; a2d8 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    a214:	f8df b0c4 	ldr.w	fp, [pc, #196]	; a2dc <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a218:	6823      	ldr	r3, [r4, #0]
    a21a:	7818      	ldrb	r0, [r3, #0]
    a21c:	6861      	ldr	r1, [r4, #4]
    a21e:	4418      	add	r0, r3
    a220:	47c8      	blx	r9
		desc->sod = ep;
    a222:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    a224:	2800      	cmp	r0, #0
    a226:	d046      	beq.n	a2b6 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    a228:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a22a:	7943      	ldrb	r3, [r0, #5]
    a22c:	7902      	ldrb	r2, [r0, #4]
    a22e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a232:	b292      	uxth	r2, r2
    a234:	78c1      	ldrb	r1, [r0, #3]
    a236:	4638      	mov	r0, r7
    a238:	47d0      	blx	sl
    a23a:	4605      	mov	r5, r0
    a23c:	2800      	cmp	r0, #0
    a23e:	d13d      	bne.n	a2bc <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a240:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    a244:	bf14      	ite	ne
    a246:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a24a:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    a24e:	4638      	mov	r0, r7
    a250:	47d8      	blx	fp
    a252:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    a254:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    a258:	d1de      	bne.n	a218 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    a25a:	4b1c      	ldr	r3, [pc, #112]	; (a2cc <hid_keyboard_ctrl+0x114>)
    a25c:	2201      	movs	r2, #1
    a25e:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    a260:	741a      	strb	r2, [r3, #16]
    a262:	e7b5      	b.n	a1d0 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a264:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a266:	b11a      	cbz	r2, a270 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a268:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a26a:	795b      	ldrb	r3, [r3, #5]
    a26c:	2b03      	cmp	r3, #3
    a26e:	d128      	bne.n	a2c2 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    a270:	7b2b      	ldrb	r3, [r5, #12]
    a272:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a274:	bf1c      	itt	ne
    a276:	23ff      	movne	r3, #255	; 0xff
    a278:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    a27a:	7b68      	ldrb	r0, [r5, #13]
    a27c:	28ff      	cmp	r0, #255	; 0xff
    a27e:	d003      	beq.n	a288 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    a280:	4b13      	ldr	r3, [pc, #76]	; (a2d0 <hid_keyboard_ctrl+0x118>)
    a282:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a284:	23ff      	movs	r3, #255	; 0xff
    a286:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    a288:	7ba8      	ldrb	r0, [r5, #14]
    a28a:	28ff      	cmp	r0, #255	; 0xff
    a28c:	d003      	beq.n	a296 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    a28e:	4b10      	ldr	r3, [pc, #64]	; (a2d0 <hid_keyboard_ctrl+0x118>)
    a290:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a292:	23ff      	movs	r3, #255	; 0xff
    a294:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    a296:	2500      	movs	r5, #0
    a298:	4b0c      	ldr	r3, [pc, #48]	; (a2cc <hid_keyboard_ctrl+0x114>)
    a29a:	741d      	strb	r5, [r3, #16]
    a29c:	e798      	b.n	a1d0 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a29e:	f06f 0509 	mvn.w	r5, #9
    a2a2:	e795      	b.n	a1d0 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a2a4:	f06f 0509 	mvn.w	r5, #9
    a2a8:	e792      	b.n	a1d0 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    a2aa:	f06f 0511 	mvn.w	r5, #17
    a2ae:	e78f      	b.n	a1d0 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    a2b0:	f06f 051b 	mvn.w	r5, #27
    a2b4:	e78c      	b.n	a1d0 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a2b6:	f06f 0509 	mvn.w	r5, #9
    a2ba:	e789      	b.n	a1d0 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    a2bc:	f06f 0513 	mvn.w	r5, #19
    a2c0:	e786      	b.n	a1d0 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a2c2:	f06f 0509 	mvn.w	r5, #9
    a2c6:	e783      	b.n	a1d0 <hid_keyboard_ctrl+0x18>
    a2c8:	0000ab99 	.word	0x0000ab99
    a2cc:	2000088c 	.word	0x2000088c
    a2d0:	000068cd 	.word	0x000068cd
    a2d4:	0000abd3 	.word	0x0000abd3
    a2d8:	00006865 	.word	0x00006865
    a2dc:	000068f9 	.word	0x000068f9

0000a2e0 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    a2e0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a2e2:	4b0a      	ldr	r3, [pc, #40]	; (a30c <hiddf_keyboard_init+0x2c>)
    a2e4:	4798      	blx	r3
    a2e6:	2801      	cmp	r0, #1
    a2e8:	d80c      	bhi.n	a304 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    a2ea:	4809      	ldr	r0, [pc, #36]	; (a310 <hiddf_keyboard_init+0x30>)
    a2ec:	4b09      	ldr	r3, [pc, #36]	; (a314 <hiddf_keyboard_init+0x34>)
    a2ee:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    a2f0:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    a2f2:	3014      	adds	r0, #20
    a2f4:	4b08      	ldr	r3, [pc, #32]	; (a318 <hiddf_keyboard_init+0x38>)
    a2f6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    a2f8:	4908      	ldr	r1, [pc, #32]	; (a31c <hiddf_keyboard_init+0x3c>)
    a2fa:	2001      	movs	r0, #1
    a2fc:	4b08      	ldr	r3, [pc, #32]	; (a320 <hiddf_keyboard_init+0x40>)
    a2fe:	4798      	blx	r3
	return ERR_NONE;
    a300:	2000      	movs	r0, #0
    a302:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a304:	f06f 0010 	mvn.w	r0, #16
}
    a308:	bd08      	pop	{r3, pc}
    a30a:	bf00      	nop
    a30c:	0000ab85 	.word	0x0000ab85
    a310:	2000088c 	.word	0x2000088c
    a314:	0000a1b9 	.word	0x0000a1b9
    a318:	0000ab65 	.word	0x0000ab65
    a31c:	2000004c 	.word	0x2000004c
    a320:	0000aae9 	.word	0x0000aae9

0000a324 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a324:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a326:	780b      	ldrb	r3, [r1, #0]
    a328:	2b81      	cmp	r3, #129	; 0x81
    a32a:	d010      	beq.n	a34e <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a32c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a330:	2b01      	cmp	r3, #1
    a332:	d13f      	bne.n	a3b4 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    a334:	888a      	ldrh	r2, [r1, #4]
    a336:	4b22      	ldr	r3, [pc, #136]	; (a3c0 <hid_mouse_req+0x9c>)
    a338:	7a1b      	ldrb	r3, [r3, #8]
    a33a:	429a      	cmp	r2, r3
    a33c:	d13d      	bne.n	a3ba <hid_mouse_req+0x96>
			switch (req->bRequest) {
    a33e:	784b      	ldrb	r3, [r1, #1]
    a340:	2b03      	cmp	r3, #3
    a342:	d028      	beq.n	a396 <hid_mouse_req+0x72>
    a344:	2b0b      	cmp	r3, #11
    a346:	d02c      	beq.n	a3a2 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a348:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a34c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a34e:	784b      	ldrb	r3, [r1, #1]
    a350:	2b06      	cmp	r3, #6
    a352:	d002      	beq.n	a35a <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    a354:	f06f 0009 	mvn.w	r0, #9
    a358:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a35a:	888a      	ldrh	r2, [r1, #4]
    a35c:	4b18      	ldr	r3, [pc, #96]	; (a3c0 <hid_mouse_req+0x9c>)
    a35e:	7a1b      	ldrb	r3, [r3, #8]
    a360:	429a      	cmp	r2, r3
    a362:	d002      	beq.n	a36a <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    a364:	f06f 0009 	mvn.w	r0, #9
    a368:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a36a:	884b      	ldrh	r3, [r1, #2]
    a36c:	0a1b      	lsrs	r3, r3, #8
    a36e:	2b21      	cmp	r3, #33	; 0x21
    a370:	d004      	beq.n	a37c <hid_mouse_req+0x58>
    a372:	2b22      	cmp	r3, #34	; 0x22
    a374:	d009      	beq.n	a38a <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    a376:	f06f 000c 	mvn.w	r0, #12
    a37a:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    a37c:	4b10      	ldr	r3, [pc, #64]	; (a3c0 <hid_mouse_req+0x9c>)
    a37e:	6819      	ldr	r1, [r3, #0]
    a380:	2300      	movs	r3, #0
    a382:	780a      	ldrb	r2, [r1, #0]
    a384:	4c0f      	ldr	r4, [pc, #60]	; (a3c4 <hid_mouse_req+0xa0>)
    a386:	47a0      	blx	r4
    a388:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    a38a:	2300      	movs	r3, #0
    a38c:	2234      	movs	r2, #52	; 0x34
    a38e:	490e      	ldr	r1, [pc, #56]	; (a3c8 <hid_mouse_req+0xa4>)
    a390:	4c0c      	ldr	r4, [pc, #48]	; (a3c4 <hid_mouse_req+0xa0>)
    a392:	47a0      	blx	r4
    a394:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    a396:	2300      	movs	r3, #0
    a398:	2201      	movs	r2, #1
    a39a:	490c      	ldr	r1, [pc, #48]	; (a3cc <hid_mouse_req+0xa8>)
    a39c:	4c09      	ldr	r4, [pc, #36]	; (a3c4 <hid_mouse_req+0xa0>)
    a39e:	47a0      	blx	r4
    a3a0:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    a3a2:	884a      	ldrh	r2, [r1, #2]
    a3a4:	4b06      	ldr	r3, [pc, #24]	; (a3c0 <hid_mouse_req+0x9c>)
    a3a6:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    a3a8:	2300      	movs	r3, #0
    a3aa:	461a      	mov	r2, r3
    a3ac:	4619      	mov	r1, r3
    a3ae:	4c05      	ldr	r4, [pc, #20]	; (a3c4 <hid_mouse_req+0xa0>)
    a3b0:	47a0      	blx	r4
    a3b2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a3b4:	f06f 0009 	mvn.w	r0, #9
    a3b8:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a3ba:	f06f 0009 	mvn.w	r0, #9
    a3be:	bd10      	pop	{r4, pc}
    a3c0:	200008ac 	.word	0x200008ac
    a3c4:	0000a6ad 	.word	0x0000a6ad
    a3c8:	0000cc8c 	.word	0x0000cc8c
    a3cc:	200008b6 	.word	0x200008b6

0000a3d0 <hid_mouse_ctrl>:
{
    a3d0:	b570      	push	{r4, r5, r6, lr}
    a3d2:	4614      	mov	r4, r2
	switch (ctrl) {
    a3d4:	2901      	cmp	r1, #1
    a3d6:	d040      	beq.n	a45a <hid_mouse_ctrl+0x8a>
    a3d8:	b139      	cbz	r1, a3ea <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    a3da:	2902      	cmp	r1, #2
    a3dc:	bf0c      	ite	eq
    a3de:	f06f 041a 	mvneq.w	r4, #26
    a3e2:	f06f 040c 	mvnne.w	r4, #12
}
    a3e6:	4620      	mov	r0, r4
    a3e8:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a3ea:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    a3ec:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a3ee:	2b00      	cmp	r3, #0
    a3f0:	d049      	beq.n	a486 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a3f2:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a3f4:	795b      	ldrb	r3, [r3, #5]
    a3f6:	2b03      	cmp	r3, #3
    a3f8:	d148      	bne.n	a48c <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a3fa:	7a2b      	ldrb	r3, [r5, #8]
    a3fc:	429a      	cmp	r2, r3
    a3fe:	d048      	beq.n	a492 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a400:	2bff      	cmp	r3, #255	; 0xff
    a402:	d149      	bne.n	a498 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a404:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a406:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    a408:	7818      	ldrb	r0, [r3, #0]
    a40a:	2221      	movs	r2, #33	; 0x21
    a40c:	6861      	ldr	r1, [r4, #4]
    a40e:	4418      	add	r0, r3
    a410:	4b29      	ldr	r3, [pc, #164]	; (a4b8 <hid_mouse_ctrl+0xe8>)
    a412:	4798      	blx	r3
    a414:	4b29      	ldr	r3, [pc, #164]	; (a4bc <hid_mouse_ctrl+0xec>)
    a416:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a418:	6823      	ldr	r3, [r4, #0]
    a41a:	7818      	ldrb	r0, [r3, #0]
    a41c:	6861      	ldr	r1, [r4, #4]
    a41e:	4418      	add	r0, r3
    a420:	4b27      	ldr	r3, [pc, #156]	; (a4c0 <hid_mouse_ctrl+0xf0>)
    a422:	4798      	blx	r3
	desc->sod = ep;
    a424:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    a426:	2800      	cmp	r0, #0
    a428:	d039      	beq.n	a49e <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    a42a:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a42c:	7943      	ldrb	r3, [r0, #5]
    a42e:	7902      	ldrb	r2, [r0, #4]
    a430:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a434:	b292      	uxth	r2, r2
    a436:	78c1      	ldrb	r1, [r0, #3]
    a438:	4630      	mov	r0, r6
    a43a:	4b22      	ldr	r3, [pc, #136]	; (a4c4 <hid_mouse_ctrl+0xf4>)
    a43c:	4798      	blx	r3
    a43e:	4604      	mov	r4, r0
    a440:	bb80      	cbnz	r0, a4a4 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a442:	f016 0f80 	tst.w	r6, #128	; 0x80
    a446:	d030      	beq.n	a4aa <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    a448:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    a44a:	4630      	mov	r0, r6
    a44c:	4b1e      	ldr	r3, [pc, #120]	; (a4c8 <hid_mouse_ctrl+0xf8>)
    a44e:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    a450:	4b1a      	ldr	r3, [pc, #104]	; (a4bc <hid_mouse_ctrl+0xec>)
    a452:	2201      	movs	r2, #1
    a454:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    a456:	72da      	strb	r2, [r3, #11]
    a458:	e7c5      	b.n	a3e6 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a45a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a45c:	b11a      	cbz	r2, a466 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a45e:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a460:	795b      	ldrb	r3, [r3, #5]
    a462:	2b03      	cmp	r3, #3
    a464:	d124      	bne.n	a4b0 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    a466:	7a2b      	ldrb	r3, [r5, #8]
    a468:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a46a:	bf1c      	itt	ne
    a46c:	23ff      	movne	r3, #255	; 0xff
    a46e:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    a470:	7a68      	ldrb	r0, [r5, #9]
    a472:	28ff      	cmp	r0, #255	; 0xff
    a474:	d003      	beq.n	a47e <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    a476:	4b15      	ldr	r3, [pc, #84]	; (a4cc <hid_mouse_ctrl+0xfc>)
    a478:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a47a:	23ff      	movs	r3, #255	; 0xff
    a47c:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    a47e:	2400      	movs	r4, #0
    a480:	4b0e      	ldr	r3, [pc, #56]	; (a4bc <hid_mouse_ctrl+0xec>)
    a482:	72dc      	strb	r4, [r3, #11]
    a484:	e7af      	b.n	a3e6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a486:	f06f 0409 	mvn.w	r4, #9
    a48a:	e7ac      	b.n	a3e6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a48c:	f06f 0409 	mvn.w	r4, #9
    a490:	e7a9      	b.n	a3e6 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    a492:	f06f 0411 	mvn.w	r4, #17
    a496:	e7a6      	b.n	a3e6 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    a498:	f06f 041b 	mvn.w	r4, #27
    a49c:	e7a3      	b.n	a3e6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a49e:	f06f 0409 	mvn.w	r4, #9
    a4a2:	e7a0      	b.n	a3e6 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    a4a4:	f06f 0413 	mvn.w	r4, #19
    a4a8:	e79d      	b.n	a3e6 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    a4aa:	f04f 34ff 	mov.w	r4, #4294967295
    a4ae:	e79a      	b.n	a3e6 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    a4b0:	f06f 0409 	mvn.w	r4, #9
    a4b4:	e797      	b.n	a3e6 <hid_mouse_ctrl+0x16>
    a4b6:	bf00      	nop
    a4b8:	0000ab99 	.word	0x0000ab99
    a4bc:	200008ac 	.word	0x200008ac
    a4c0:	0000abd3 	.word	0x0000abd3
    a4c4:	00006865 	.word	0x00006865
    a4c8:	000068f9 	.word	0x000068f9
    a4cc:	000068cd 	.word	0x000068cd

0000a4d0 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    a4d0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a4d2:	4b0a      	ldr	r3, [pc, #40]	; (a4fc <hiddf_mouse_init+0x2c>)
    a4d4:	4798      	blx	r3
    a4d6:	2801      	cmp	r0, #1
    a4d8:	d80c      	bhi.n	a4f4 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    a4da:	4809      	ldr	r0, [pc, #36]	; (a500 <hiddf_mouse_init+0x30>)
    a4dc:	4b09      	ldr	r3, [pc, #36]	; (a504 <hiddf_mouse_init+0x34>)
    a4de:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    a4e0:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    a4e2:	300c      	adds	r0, #12
    a4e4:	4b08      	ldr	r3, [pc, #32]	; (a508 <hiddf_mouse_init+0x38>)
    a4e6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    a4e8:	4908      	ldr	r1, [pc, #32]	; (a50c <hiddf_mouse_init+0x3c>)
    a4ea:	2001      	movs	r0, #1
    a4ec:	4b08      	ldr	r3, [pc, #32]	; (a510 <hiddf_mouse_init+0x40>)
    a4ee:	4798      	blx	r3
	return ERR_NONE;
    a4f0:	2000      	movs	r0, #0
    a4f2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a4f4:	f06f 0010 	mvn.w	r0, #16
}
    a4f8:	bd08      	pop	{r3, pc}
    a4fa:	bf00      	nop
    a4fc:	0000ab85 	.word	0x0000ab85
    a500:	200008ac 	.word	0x200008ac
    a504:	0000a3d1 	.word	0x0000a3d1
    a508:	0000ab65 	.word	0x0000ab65
    a50c:	20000054 	.word	0x20000054
    a510:	0000aae9 	.word	0x0000aae9

0000a514 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    a514:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a516:	4b07      	ldr	r3, [pc, #28]	; (a534 <usbdc_unconfig+0x20>)
    a518:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    a51a:	b14c      	cbz	r4, a530 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    a51c:	2600      	movs	r6, #0
    a51e:	2501      	movs	r5, #1
    a520:	6863      	ldr	r3, [r4, #4]
    a522:	4632      	mov	r2, r6
    a524:	4629      	mov	r1, r5
    a526:	4620      	mov	r0, r4
    a528:	4798      	blx	r3
		func = func->next;
    a52a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    a52c:	2c00      	cmp	r4, #0
    a52e:	d1f7      	bne.n	a520 <usbdc_unconfig+0xc>
    a530:	bd70      	pop	{r4, r5, r6, pc}
    a532:	bf00      	nop
    a534:	200008c4 	.word	0x200008c4

0000a538 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    a538:	b570      	push	{r4, r5, r6, lr}
    a53a:	4606      	mov	r6, r0
    a53c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a53e:	4b07      	ldr	r3, [pc, #28]	; (a55c <usbdc_change_notify+0x24>)
    a540:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    a542:	b91c      	cbnz	r4, a54c <usbdc_change_notify+0x14>
    a544:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    a546:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    a548:	2c00      	cmp	r4, #0
    a54a:	d0fb      	beq.n	a544 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    a54c:	6863      	ldr	r3, [r4, #4]
    a54e:	2b00      	cmp	r3, #0
    a550:	d0f9      	beq.n	a546 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    a552:	4629      	mov	r1, r5
    a554:	4630      	mov	r0, r6
    a556:	4798      	blx	r3
    a558:	e7f5      	b.n	a546 <usbdc_change_notify+0xe>
    a55a:	bf00      	nop
    a55c:	200008c4 	.word	0x200008c4

0000a560 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a562:	4607      	mov	r7, r0
    a564:	460e      	mov	r6, r1
    a566:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    a568:	4b0c      	ldr	r3, [pc, #48]	; (a59c <usbdc_request_handler+0x3c>)
    a56a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    a56c:	b91c      	cbnz	r4, a576 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    a56e:	2000      	movs	r0, #0
    a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    a572:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    a574:	b16c      	cbz	r4, a592 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    a576:	6863      	ldr	r3, [r4, #4]
    a578:	2b00      	cmp	r3, #0
    a57a:	d0fa      	beq.n	a572 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    a57c:	462a      	mov	r2, r5
    a57e:	4631      	mov	r1, r6
    a580:	4638      	mov	r0, r7
    a582:	4798      	blx	r3
			if (0 == rc) {
    a584:	b138      	cbz	r0, a596 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    a586:	f110 0f0a 	cmn.w	r0, #10
    a58a:	d0f2      	beq.n	a572 <usbdc_request_handler+0x12>
				return -1;
    a58c:	f04f 30ff 	mov.w	r0, #4294967295
}
    a590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a592:	2000      	movs	r0, #0
    a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    a596:	2001      	movs	r0, #1
    a598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a59a:	bf00      	nop
    a59c:	200008c4 	.word	0x200008c4

0000a5a0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    a5a0:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a5a2:	4b06      	ldr	r3, [pc, #24]	; (a5bc <usbd_sof_cb+0x1c>)
    a5a4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    a5a6:	b91c      	cbnz	r4, a5b0 <usbd_sof_cb+0x10>
    a5a8:	bd10      	pop	{r4, pc}
		sof = sof->next;
    a5aa:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    a5ac:	2c00      	cmp	r4, #0
    a5ae:	d0fb      	beq.n	a5a8 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    a5b0:	6863      	ldr	r3, [r4, #4]
    a5b2:	2b00      	cmp	r3, #0
    a5b4:	d0f9      	beq.n	a5aa <usbd_sof_cb+0xa>
			sof->cb();
    a5b6:	4798      	blx	r3
    a5b8:	e7f7      	b.n	a5aa <usbd_sof_cb+0xa>
    a5ba:	bf00      	nop
    a5bc:	200008c4 	.word	0x200008c4

0000a5c0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    a5c0:	b510      	push	{r4, lr}
    a5c2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    a5c4:	b119      	cbz	r1, a5ce <usbdc_cb_ctl_done+0xe>
    a5c6:	2901      	cmp	r1, #1
    a5c8:	d026      	beq.n	a618 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    a5ca:	2000      	movs	r0, #0
    a5cc:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    a5ce:	7813      	ldrb	r3, [r2, #0]
    a5d0:	2b00      	cmp	r3, #0
    a5d2:	d1fa      	bne.n	a5ca <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    a5d4:	7853      	ldrb	r3, [r2, #1]
    a5d6:	2b05      	cmp	r3, #5
    a5d8:	d00f      	beq.n	a5fa <usbdc_cb_ctl_done+0x3a>
    a5da:	2b09      	cmp	r3, #9
    a5dc:	d1f5      	bne.n	a5ca <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    a5de:	8852      	ldrh	r2, [r2, #2]
    a5e0:	4b10      	ldr	r3, [pc, #64]	; (a624 <usbdc_cb_ctl_done+0x64>)
    a5e2:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    a5e4:	8863      	ldrh	r3, [r4, #2]
    a5e6:	2b00      	cmp	r3, #0
    a5e8:	bf14      	ite	ne
    a5ea:	2104      	movne	r1, #4
    a5ec:	2103      	moveq	r1, #3
    a5ee:	4b0d      	ldr	r3, [pc, #52]	; (a624 <usbdc_cb_ctl_done+0x64>)
    a5f0:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a5f2:	2001      	movs	r0, #1
    a5f4:	4b0c      	ldr	r3, [pc, #48]	; (a628 <usbdc_cb_ctl_done+0x68>)
    a5f6:	4798      	blx	r3
    a5f8:	e7e7      	b.n	a5ca <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    a5fa:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    a5fc:	b2c0      	uxtb	r0, r0
    a5fe:	4b0b      	ldr	r3, [pc, #44]	; (a62c <usbdc_cb_ctl_done+0x6c>)
    a600:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    a602:	8863      	ldrh	r3, [r4, #2]
    a604:	2b00      	cmp	r3, #0
    a606:	bf14      	ite	ne
    a608:	2103      	movne	r1, #3
    a60a:	2102      	moveq	r1, #2
    a60c:	4b05      	ldr	r3, [pc, #20]	; (a624 <usbdc_cb_ctl_done+0x64>)
    a60e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a610:	2001      	movs	r0, #1
    a612:	4b05      	ldr	r3, [pc, #20]	; (a628 <usbdc_cb_ctl_done+0x68>)
    a614:	4798      	blx	r3
    a616:	e7d8      	b.n	a5ca <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    a618:	2201      	movs	r2, #1
    a61a:	4621      	mov	r1, r4
    a61c:	2000      	movs	r0, #0
    a61e:	4b04      	ldr	r3, [pc, #16]	; (a630 <usbdc_cb_ctl_done+0x70>)
    a620:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    a622:	e7d2      	b.n	a5ca <usbdc_cb_ctl_done+0xa>
    a624:	200008c4 	.word	0x200008c4
    a628:	0000a539 	.word	0x0000a539
    a62c:	00006859 	.word	0x00006859
    a630:	0000a561 	.word	0x0000a561

0000a634 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    a634:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    a636:	4b0d      	ldr	r3, [pc, #52]	; (a66c <usbdc_reset+0x38>)
    a638:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    a63a:	4d0d      	ldr	r5, [pc, #52]	; (a670 <usbdc_reset+0x3c>)
    a63c:	2602      	movs	r6, #2
    a63e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    a640:	2400      	movs	r4, #0
    a642:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    a644:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    a646:	4620      	mov	r0, r4
    a648:	4b0a      	ldr	r3, [pc, #40]	; (a674 <usbdc_reset+0x40>)
    a64a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    a64c:	7f28      	ldrb	r0, [r5, #28]
    a64e:	4b0a      	ldr	r3, [pc, #40]	; (a678 <usbdc_reset+0x44>)
    a650:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    a652:	4a0a      	ldr	r2, [pc, #40]	; (a67c <usbdc_reset+0x48>)
    a654:	4621      	mov	r1, r4
    a656:	4620      	mov	r0, r4
    a658:	4d09      	ldr	r5, [pc, #36]	; (a680 <usbdc_reset+0x4c>)
    a65a:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    a65c:	4a09      	ldr	r2, [pc, #36]	; (a684 <usbdc_reset+0x50>)
    a65e:	4631      	mov	r1, r6
    a660:	4620      	mov	r0, r4
    a662:	47a8      	blx	r5
	usb_d_ep_enable(0);
    a664:	4620      	mov	r0, r4
    a666:	4b08      	ldr	r3, [pc, #32]	; (a688 <usbdc_reset+0x54>)
    a668:	4798      	blx	r3
    a66a:	bd70      	pop	{r4, r5, r6, pc}
    a66c:	0000a515 	.word	0x0000a515
    a670:	200008c4 	.word	0x200008c4
    a674:	000068cd 	.word	0x000068cd
    a678:	000068b9 	.word	0x000068b9
    a67c:	0000a6cd 	.word	0x0000a6cd
    a680:	00006acd 	.word	0x00006acd
    a684:	0000a5c1 	.word	0x0000a5c1
    a688:	000068f9 	.word	0x000068f9

0000a68c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    a68c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    a68e:	b110      	cbz	r0, a696 <usbd_event_cb+0xa>
    a690:	2801      	cmp	r0, #1
    a692:	d004      	beq.n	a69e <usbd_event_cb+0x12>
    a694:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    a696:	2000      	movs	r0, #0
    a698:	4b02      	ldr	r3, [pc, #8]	; (a6a4 <usbd_event_cb+0x18>)
    a69a:	4798      	blx	r3
		break;
    a69c:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    a69e:	4b02      	ldr	r3, [pc, #8]	; (a6a8 <usbd_event_cb+0x1c>)
    a6a0:	4798      	blx	r3
    a6a2:	bd08      	pop	{r3, pc}
    a6a4:	0000a539 	.word	0x0000a539
    a6a8:	0000a635 	.word	0x0000a635

0000a6ac <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    a6ac:	b500      	push	{lr}
    a6ae:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    a6b0:	9101      	str	r1, [sp, #4]
    a6b2:	9202      	str	r2, [sp, #8]
    a6b4:	f88d 000c 	strb.w	r0, [sp, #12]
    a6b8:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    a6bc:	a801      	add	r0, sp, #4
    a6be:	4b02      	ldr	r3, [pc, #8]	; (a6c8 <usbdc_xfer+0x1c>)
    a6c0:	4798      	blx	r3
}
    a6c2:	b005      	add	sp, #20
    a6c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a6c8:	00006945 	.word	0x00006945

0000a6cc <usbdc_cb_ctl_req>:
{
    a6cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a6d0:	b083      	sub	sp, #12
    a6d2:	4605      	mov	r5, r0
    a6d4:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    a6d6:	2200      	movs	r2, #0
    a6d8:	4b9b      	ldr	r3, [pc, #620]	; (a948 <usbdc_cb_ctl_req+0x27c>)
    a6da:	4798      	blx	r3
    a6dc:	f1b0 3fff 	cmp.w	r0, #4294967295
    a6e0:	d00b      	beq.n	a6fa <usbdc_cb_ctl_req+0x2e>
    a6e2:	2801      	cmp	r0, #1
    a6e4:	f000 81e3 	beq.w	aaae <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    a6e8:	7823      	ldrb	r3, [r4, #0]
    a6ea:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    a6ee:	d008      	beq.n	a702 <usbdc_cb_ctl_req+0x36>
    a6f0:	2a80      	cmp	r2, #128	; 0x80
    a6f2:	f000 80f4 	beq.w	a8de <usbdc_cb_ctl_req+0x212>
		return false;
    a6f6:	2000      	movs	r0, #0
    a6f8:	e000      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return false;
    a6fa:	2000      	movs	r0, #0
}
    a6fc:	b003      	add	sp, #12
    a6fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    a702:	7862      	ldrb	r2, [r4, #1]
    a704:	3a01      	subs	r2, #1
    a706:	2a0a      	cmp	r2, #10
    a708:	f200 81d3 	bhi.w	aab2 <usbdc_cb_ctl_req+0x3e6>
    a70c:	e8df f012 	tbh	[pc, r2, lsl #1]
    a710:	01d10060 	.word	0x01d10060
    a714:	01d10076 	.word	0x01d10076
    a718:	01d1000b 	.word	0x01d1000b
    a71c:	01d101d1 	.word	0x01d101d1
    a720:	01d10015 	.word	0x01d10015
    a724:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a726:	2301      	movs	r3, #1
    a728:	2200      	movs	r2, #0
    a72a:	4611      	mov	r1, r2
    a72c:	4628      	mov	r0, r5
    a72e:	4c87      	ldr	r4, [pc, #540]	; (a94c <usbdc_cb_ctl_req+0x280>)
    a730:	47a0      	blx	r4
    a732:	fab0 f080 	clz	r0, r0
    a736:	0940      	lsrs	r0, r0, #5
    a738:	e7e0      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    a73a:	8862      	ldrh	r2, [r4, #2]
    a73c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    a73e:	b1ca      	cbz	r2, a774 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    a740:	4b83      	ldr	r3, [pc, #524]	; (a950 <usbdc_cb_ctl_req+0x284>)
    a742:	681b      	ldr	r3, [r3, #0]
    a744:	6859      	ldr	r1, [r3, #4]
    a746:	6818      	ldr	r0, [r3, #0]
    a748:	4b82      	ldr	r3, [pc, #520]	; (a954 <usbdc_cb_ctl_req+0x288>)
    a74a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a74c:	2800      	cmp	r0, #0
    a74e:	f000 81be 	beq.w	aace <usbdc_cb_ctl_req+0x402>
    a752:	78c2      	ldrb	r2, [r0, #3]
    a754:	7881      	ldrb	r1, [r0, #2]
    a756:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    a75a:	fa10 f181 	uxtah	r1, r0, r1
    a75e:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a760:	2204      	movs	r2, #4
    a762:	4b7d      	ldr	r3, [pc, #500]	; (a958 <usbdc_cb_ctl_req+0x28c>)
    a764:	4798      	blx	r3
    a766:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a768:	b130      	cbz	r0, a778 <usbdc_cb_ctl_req+0xac>
    a76a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a76c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; a950 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a770:	4f79      	ldr	r7, [pc, #484]	; (a958 <usbdc_cb_ctl_req+0x28c>)
    a772:	e018      	b.n	a7a6 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    a774:	4b79      	ldr	r3, [pc, #484]	; (a95c <usbdc_cb_ctl_req+0x290>)
    a776:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a778:	2301      	movs	r3, #1
    a77a:	2200      	movs	r2, #0
    a77c:	4611      	mov	r1, r2
    a77e:	4628      	mov	r0, r5
    a780:	4c72      	ldr	r4, [pc, #456]	; (a94c <usbdc_cb_ctl_req+0x280>)
    a782:	47a0      	blx	r4
    a784:	fab0 f080 	clz	r0, r0
    a788:	0940      	lsrs	r0, r0, #5
    a78a:	e7b7      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    a78c:	464c      	mov	r4, r9
    a78e:	e000      	b.n	a792 <usbdc_cb_ctl_req+0xc6>
    a790:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    a792:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a794:	7803      	ldrb	r3, [r0, #0]
    a796:	4418      	add	r0, r3
    a798:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a79a:	2204      	movs	r2, #4
    a79c:	9901      	ldr	r1, [sp, #4]
    a79e:	47b8      	blx	r7
    a7a0:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a7a2:	2800      	cmp	r0, #0
    a7a4:	d0e8      	beq.n	a778 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    a7a6:	f890 9002 	ldrb.w	r9, [r0, #2]
    a7aa:	45a1      	cmp	r9, r4
    a7ac:	d0f1      	beq.n	a792 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a7ae:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    a7b2:	2c00      	cmp	r4, #0
    a7b4:	d0ea      	beq.n	a78c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    a7b6:	2600      	movs	r6, #0
    a7b8:	6863      	ldr	r3, [r4, #4]
    a7ba:	466a      	mov	r2, sp
    a7bc:	4631      	mov	r1, r6
    a7be:	4620      	mov	r0, r4
    a7c0:	4798      	blx	r3
    a7c2:	2800      	cmp	r0, #0
    a7c4:	d0e4      	beq.n	a790 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    a7c6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    a7c8:	2c00      	cmp	r4, #0
    a7ca:	d1f5      	bne.n	a7b8 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    a7cc:	464c      	mov	r4, r9
    a7ce:	e7e0      	b.n	a792 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a7d0:	f003 031f 	and.w	r3, r3, #31
    a7d4:	2b02      	cmp	r3, #2
    a7d6:	f040 816e 	bne.w	aab6 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    a7da:	88e3      	ldrh	r3, [r4, #6]
    a7dc:	b10b      	cbz	r3, a7e2 <usbdc_cb_ctl_req+0x116>
			return false;
    a7de:	2000      	movs	r0, #0
    a7e0:	e78c      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    a7e2:	88a0      	ldrh	r0, [r4, #4]
    a7e4:	2100      	movs	r1, #0
    a7e6:	b2c0      	uxtb	r0, r0
    a7e8:	4b5d      	ldr	r3, [pc, #372]	; (a960 <usbdc_cb_ctl_req+0x294>)
    a7ea:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a7ec:	2301      	movs	r3, #1
    a7ee:	2200      	movs	r2, #0
    a7f0:	4611      	mov	r1, r2
    a7f2:	4628      	mov	r0, r5
    a7f4:	4c55      	ldr	r4, [pc, #340]	; (a94c <usbdc_cb_ctl_req+0x280>)
    a7f6:	47a0      	blx	r4
		return true;
    a7f8:	2001      	movs	r0, #1
    a7fa:	e77f      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a7fc:	f003 031f 	and.w	r3, r3, #31
    a800:	2b02      	cmp	r3, #2
    a802:	f040 815a 	bne.w	aaba <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    a806:	88e3      	ldrh	r3, [r4, #6]
    a808:	b10b      	cbz	r3, a80e <usbdc_cb_ctl_req+0x142>
			return false;
    a80a:	2000      	movs	r0, #0
    a80c:	e776      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    a80e:	88a0      	ldrh	r0, [r4, #4]
    a810:	2101      	movs	r1, #1
    a812:	b2c0      	uxtb	r0, r0
    a814:	4b52      	ldr	r3, [pc, #328]	; (a960 <usbdc_cb_ctl_req+0x294>)
    a816:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a818:	2301      	movs	r3, #1
    a81a:	2200      	movs	r2, #0
    a81c:	4611      	mov	r1, r2
    a81e:	4628      	mov	r0, r5
    a820:	4c4a      	ldr	r4, [pc, #296]	; (a94c <usbdc_cb_ctl_req+0x280>)
    a822:	47a0      	blx	r4
		return true;
    a824:	2001      	movs	r0, #1
    a826:	e769      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    a828:	8866      	ldrh	r6, [r4, #2]
    a82a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a82c:	4a48      	ldr	r2, [pc, #288]	; (a950 <usbdc_cb_ctl_req+0x284>)
    a82e:	6813      	ldr	r3, [r2, #0]
    a830:	7ed2      	ldrb	r2, [r2, #27]
    a832:	6859      	ldr	r1, [r3, #4]
    a834:	6818      	ldr	r0, [r3, #0]
    a836:	4b47      	ldr	r3, [pc, #284]	; (a954 <usbdc_cb_ctl_req+0x288>)
    a838:	4798      	blx	r3
	if (NULL == ifc) {
    a83a:	2800      	cmp	r0, #0
    a83c:	d045      	beq.n	a8ca <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    a83e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    a840:	78c2      	ldrb	r2, [r0, #3]
    a842:	7881      	ldrb	r1, [r0, #2]
    a844:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    a848:	fa10 f181 	uxtah	r1, r0, r1
    a84c:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    a84e:	2204      	movs	r2, #4
    a850:	4b41      	ldr	r3, [pc, #260]	; (a958 <usbdc_cb_ctl_req+0x28c>)
    a852:	4798      	blx	r3
    a854:	4603      	mov	r3, r0
    a856:	2800      	cmp	r0, #0
    a858:	d039      	beq.n	a8ce <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a85a:	2704      	movs	r7, #4
    a85c:	4d3e      	ldr	r5, [pc, #248]	; (a958 <usbdc_cb_ctl_req+0x28c>)
    a85e:	e008      	b.n	a872 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    a860:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a862:	7803      	ldrb	r3, [r0, #0]
    a864:	4418      	add	r0, r3
    a866:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a868:	463a      	mov	r2, r7
    a86a:	9901      	ldr	r1, [sp, #4]
    a86c:	47a8      	blx	r5
		if (NULL == ifc) {
    a86e:	4603      	mov	r3, r0
    a870:	b378      	cbz	r0, a8d2 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    a872:	789a      	ldrb	r2, [r3, #2]
    a874:	42a2      	cmp	r2, r4
    a876:	d1f3      	bne.n	a860 <usbdc_cb_ctl_req+0x194>
    a878:	78da      	ldrb	r2, [r3, #3]
    a87a:	42b2      	cmp	r2, r6
    a87c:	d1f0      	bne.n	a860 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    a87e:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    a880:	4b33      	ldr	r3, [pc, #204]	; (a950 <usbdc_cb_ctl_req+0x284>)
    a882:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    a884:	b33d      	cbz	r5, a8d6 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    a886:	2701      	movs	r7, #1
    a888:	686b      	ldr	r3, [r5, #4]
    a88a:	466a      	mov	r2, sp
    a88c:	4639      	mov	r1, r7
    a88e:	4628      	mov	r0, r5
    a890:	4798      	blx	r3
    a892:	b120      	cbz	r0, a89e <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    a894:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a896:	2d00      	cmp	r5, #0
    a898:	d1f6      	bne.n	a888 <usbdc_cb_ctl_req+0x1bc>
	return false;
    a89a:	2000      	movs	r0, #0
    a89c:	e72e      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    a89e:	686b      	ldr	r3, [r5, #4]
    a8a0:	466a      	mov	r2, sp
    a8a2:	2100      	movs	r1, #0
    a8a4:	4628      	mov	r0, r5
    a8a6:	4798      	blx	r3
    a8a8:	b9b8      	cbnz	r0, a8da <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    a8aa:	b136      	cbz	r6, a8ba <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    a8ac:	4a28      	ldr	r2, [pc, #160]	; (a950 <usbdc_cb_ctl_req+0x284>)
    a8ae:	2301      	movs	r3, #1
    a8b0:	fa03 f404 	lsl.w	r4, r3, r4
    a8b4:	7f53      	ldrb	r3, [r2, #29]
    a8b6:	4323      	orrs	r3, r4
    a8b8:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    a8ba:	2300      	movs	r3, #0
    a8bc:	461a      	mov	r2, r3
    a8be:	4619      	mov	r1, r3
    a8c0:	4618      	mov	r0, r3
    a8c2:	4c22      	ldr	r4, [pc, #136]	; (a94c <usbdc_cb_ctl_req+0x280>)
    a8c4:	47a0      	blx	r4
			return true;
    a8c6:	2001      	movs	r0, #1
    a8c8:	e718      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return false;
    a8ca:	2000      	movs	r0, #0
    a8cc:	e716      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return false;
    a8ce:	2000      	movs	r0, #0
    a8d0:	e714      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
			return false;
    a8d2:	2000      	movs	r0, #0
    a8d4:	e712      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
	return false;
    a8d6:	2000      	movs	r0, #0
    a8d8:	e710      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
			return false;
    a8da:	2000      	movs	r0, #0
    a8dc:	e70e      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    a8de:	7862      	ldrb	r2, [r4, #1]
    a8e0:	2a0a      	cmp	r2, #10
    a8e2:	f200 80ec 	bhi.w	aabe <usbdc_cb_ctl_req+0x3f2>
    a8e6:	e8df f012 	tbh	[pc, r2, lsl #1]
    a8ea:	008e      	.short	0x008e
    a8ec:	00ea00ea 	.word	0x00ea00ea
    a8f0:	00ea00ea 	.word	0x00ea00ea
    a8f4:	000b00ea 	.word	0x000b00ea
    a8f8:	008200ea 	.word	0x008200ea
    a8fc:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    a900:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    a902:	0a13      	lsrs	r3, r2, #8
    a904:	2b02      	cmp	r3, #2
    a906:	d02d      	beq.n	a964 <usbdc_cb_ctl_req+0x298>
    a908:	2b03      	cmp	r3, #3
    a90a:	d050      	beq.n	a9ae <usbdc_cb_ctl_req+0x2e2>
    a90c:	2b01      	cmp	r3, #1
    a90e:	d001      	beq.n	a914 <usbdc_cb_ctl_req+0x248>
	return false;
    a910:	2000      	movs	r0, #0
    a912:	e6f3      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    a914:	88e2      	ldrh	r2, [r4, #6]
    a916:	2a12      	cmp	r2, #18
    a918:	bf28      	it	cs
    a91a:	2212      	movcs	r2, #18
    a91c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    a91e:	4b0c      	ldr	r3, [pc, #48]	; (a950 <usbdc_cb_ctl_req+0x284>)
    a920:	681b      	ldr	r3, [r3, #0]
    a922:	2201      	movs	r2, #1
    a924:	6859      	ldr	r1, [r3, #4]
    a926:	6818      	ldr	r0, [r3, #0]
    a928:	4b0b      	ldr	r3, [pc, #44]	; (a958 <usbdc_cb_ctl_req+0x28c>)
    a92a:	4798      	blx	r3
	if (!dev_desc) {
    a92c:	4601      	mov	r1, r0
    a92e:	2800      	cmp	r0, #0
    a930:	f000 80c7 	beq.w	aac2 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    a934:	2300      	movs	r3, #0
    a936:	4622      	mov	r2, r4
    a938:	4628      	mov	r0, r5
    a93a:	4c04      	ldr	r4, [pc, #16]	; (a94c <usbdc_cb_ctl_req+0x280>)
    a93c:	47a0      	blx	r4
    a93e:	fab0 f080 	clz	r0, r0
    a942:	0940      	lsrs	r0, r0, #5
    a944:	e6da      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
    a946:	bf00      	nop
    a948:	0000a561 	.word	0x0000a561
    a94c:	0000a6ad 	.word	0x0000a6ad
    a950:	200008c4 	.word	0x200008c4
    a954:	0000ac19 	.word	0x0000ac19
    a958:	0000ab99 	.word	0x0000ab99
    a95c:	0000a515 	.word	0x0000a515
    a960:	00006a65 	.word	0x00006a65
	uint16_t length   = req->wLength;
    a964:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a966:	4b5b      	ldr	r3, [pc, #364]	; (aad4 <usbdc_cb_ctl_req+0x408>)
    a968:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    a96a:	681b      	ldr	r3, [r3, #0]
    a96c:	3201      	adds	r2, #1
    a96e:	b2d2      	uxtb	r2, r2
    a970:	6859      	ldr	r1, [r3, #4]
    a972:	6818      	ldr	r0, [r3, #0]
    a974:	4b58      	ldr	r3, [pc, #352]	; (aad8 <usbdc_cb_ctl_req+0x40c>)
    a976:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a978:	4601      	mov	r1, r0
    a97a:	2800      	cmp	r0, #0
    a97c:	f000 80a3 	beq.w	aac6 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    a980:	78c3      	ldrb	r3, [r0, #3]
    a982:	7882      	ldrb	r2, [r0, #2]
    a984:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    a988:	b292      	uxth	r2, r2
	if (length <= total_len) {
    a98a:	4294      	cmp	r4, r2
    a98c:	d90d      	bls.n	a9aa <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a98e:	3e01      	subs	r6, #1
    a990:	4226      	tst	r6, r4
    a992:	bf0c      	ite	eq
    a994:	2301      	moveq	r3, #1
    a996:	2300      	movne	r3, #0
		length = total_len;
    a998:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    a99a:	4622      	mov	r2, r4
    a99c:	4628      	mov	r0, r5
    a99e:	4c4f      	ldr	r4, [pc, #316]	; (aadc <usbdc_cb_ctl_req+0x410>)
    a9a0:	47a0      	blx	r4
    a9a2:	fab0 f080 	clz	r0, r0
    a9a6:	0940      	lsrs	r0, r0, #5
    a9a8:	e6a8      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a9aa:	2300      	movs	r3, #0
    a9ac:	e7f5      	b.n	a99a <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    a9ae:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a9b0:	4b48      	ldr	r3, [pc, #288]	; (aad4 <usbdc_cb_ctl_req+0x408>)
    a9b2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    a9b4:	681b      	ldr	r3, [r3, #0]
    a9b6:	b2d2      	uxtb	r2, r2
    a9b8:	6859      	ldr	r1, [r3, #4]
    a9ba:	6818      	ldr	r0, [r3, #0]
    a9bc:	4b48      	ldr	r3, [pc, #288]	; (aae0 <usbdc_cb_ctl_req+0x414>)
    a9be:	4798      	blx	r3
	if (NULL == str_desc) {
    a9c0:	4601      	mov	r1, r0
    a9c2:	2800      	cmp	r0, #0
    a9c4:	f000 8081 	beq.w	aaca <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    a9c8:	7802      	ldrb	r2, [r0, #0]
    a9ca:	4294      	cmp	r4, r2
    a9cc:	d90d      	bls.n	a9ea <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a9ce:	3e01      	subs	r6, #1
    a9d0:	4226      	tst	r6, r4
    a9d2:	bf0c      	ite	eq
    a9d4:	2301      	moveq	r3, #1
    a9d6:	2300      	movne	r3, #0
		length = str_desc[0];
    a9d8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    a9da:	4622      	mov	r2, r4
    a9dc:	4628      	mov	r0, r5
    a9de:	4c3f      	ldr	r4, [pc, #252]	; (aadc <usbdc_cb_ctl_req+0x410>)
    a9e0:	47a0      	blx	r4
    a9e2:	fab0 f080 	clz	r0, r0
    a9e6:	0940      	lsrs	r0, r0, #5
    a9e8:	e688      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a9ea:	2300      	movs	r3, #0
    a9ec:	e7f5      	b.n	a9da <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    a9ee:	4939      	ldr	r1, [pc, #228]	; (aad4 <usbdc_cb_ctl_req+0x408>)
    a9f0:	694b      	ldr	r3, [r1, #20]
    a9f2:	7eca      	ldrb	r2, [r1, #27]
    a9f4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    a9f6:	2300      	movs	r3, #0
    a9f8:	2201      	movs	r2, #1
    a9fa:	6949      	ldr	r1, [r1, #20]
    a9fc:	4628      	mov	r0, r5
    a9fe:	4c37      	ldr	r4, [pc, #220]	; (aadc <usbdc_cb_ctl_req+0x410>)
    aa00:	47a0      	blx	r4
		return true;
    aa02:	2001      	movs	r0, #1
    aa04:	e67a      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    aa06:	f003 031f 	and.w	r3, r3, #31
    aa0a:	2b01      	cmp	r3, #1
    aa0c:	d903      	bls.n	aa16 <usbdc_cb_ctl_req+0x34a>
    aa0e:	2b02      	cmp	r3, #2
    aa10:	d010      	beq.n	aa34 <usbdc_cb_ctl_req+0x368>
		return false;
    aa12:	2000      	movs	r0, #0
    aa14:	e672      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		st = 0;
    aa16:	2300      	movs	r3, #0
    aa18:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    aa1a:	492e      	ldr	r1, [pc, #184]	; (aad4 <usbdc_cb_ctl_req+0x408>)
    aa1c:	694b      	ldr	r3, [r1, #20]
    aa1e:	f8bd 2000 	ldrh.w	r2, [sp]
    aa22:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    aa24:	2300      	movs	r3, #0
    aa26:	2202      	movs	r2, #2
    aa28:	6949      	ldr	r1, [r1, #20]
    aa2a:	4628      	mov	r0, r5
    aa2c:	4c2b      	ldr	r4, [pc, #172]	; (aadc <usbdc_cb_ctl_req+0x410>)
    aa2e:	47a0      	blx	r4
	return true;
    aa30:	2001      	movs	r0, #1
    aa32:	e663      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    aa34:	88a0      	ldrh	r0, [r4, #4]
    aa36:	2102      	movs	r1, #2
    aa38:	b2c0      	uxtb	r0, r0
    aa3a:	4b2a      	ldr	r3, [pc, #168]	; (aae4 <usbdc_cb_ctl_req+0x418>)
    aa3c:	4798      	blx	r3
		if (st < 0) {
    aa3e:	2800      	cmp	r0, #0
    aa40:	db03      	blt.n	aa4a <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    aa42:	f000 0001 	and.w	r0, r0, #1
    aa46:	9000      	str	r0, [sp, #0]
    aa48:	e7e7      	b.n	aa1a <usbdc_cb_ctl_req+0x34e>
			return false;
    aa4a:	2000      	movs	r0, #0
    aa4c:	e656      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    aa4e:	4b21      	ldr	r3, [pc, #132]	; (aad4 <usbdc_cb_ctl_req+0x408>)
    aa50:	7f5b      	ldrb	r3, [r3, #29]
    aa52:	88a2      	ldrh	r2, [r4, #4]
    aa54:	4113      	asrs	r3, r2
    aa56:	f013 0f01 	tst.w	r3, #1
    aa5a:	d012      	beq.n	aa82 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    aa5c:	4b1d      	ldr	r3, [pc, #116]	; (aad4 <usbdc_cb_ctl_req+0x408>)
    aa5e:	691d      	ldr	r5, [r3, #16]
	return false;
    aa60:	2000      	movs	r0, #0
	while (NULL != func) {
    aa62:	2d00      	cmp	r5, #0
    aa64:	f43f ae4a 	beq.w	a6fc <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    aa68:	2602      	movs	r6, #2
    aa6a:	686b      	ldr	r3, [r5, #4]
    aa6c:	4622      	mov	r2, r4
    aa6e:	4631      	mov	r1, r6
    aa70:	4628      	mov	r0, r5
    aa72:	4798      	blx	r3
    aa74:	2800      	cmp	r0, #0
    aa76:	da0f      	bge.n	aa98 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    aa78:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    aa7a:	2d00      	cmp	r5, #0
    aa7c:	d1f5      	bne.n	aa6a <usbdc_cb_ctl_req+0x39e>
	return false;
    aa7e:	2000      	movs	r0, #0
    aa80:	e63c      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    aa82:	4914      	ldr	r1, [pc, #80]	; (aad4 <usbdc_cb_ctl_req+0x408>)
    aa84:	694b      	ldr	r3, [r1, #20]
    aa86:	2000      	movs	r0, #0
    aa88:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    aa8a:	4603      	mov	r3, r0
    aa8c:	2201      	movs	r2, #1
    aa8e:	6949      	ldr	r1, [r1, #20]
    aa90:	4c12      	ldr	r4, [pc, #72]	; (aadc <usbdc_cb_ctl_req+0x410>)
    aa92:	47a0      	blx	r4
		return true;
    aa94:	2001      	movs	r0, #1
    aa96:	e631      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    aa98:	490e      	ldr	r1, [pc, #56]	; (aad4 <usbdc_cb_ctl_req+0x408>)
    aa9a:	694b      	ldr	r3, [r1, #20]
    aa9c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    aa9e:	2300      	movs	r3, #0
    aaa0:	2201      	movs	r2, #1
    aaa2:	6949      	ldr	r1, [r1, #20]
    aaa4:	4618      	mov	r0, r3
    aaa6:	4c0d      	ldr	r4, [pc, #52]	; (aadc <usbdc_cb_ctl_req+0x410>)
    aaa8:	47a0      	blx	r4
			return true;
    aaaa:	2001      	movs	r0, #1
    aaac:	e626      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return true;
    aaae:	2001      	movs	r0, #1
    aab0:	e624      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return false;
    aab2:	2000      	movs	r0, #0
    aab4:	e622      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return false;
    aab6:	2000      	movs	r0, #0
    aab8:	e620      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return false;
    aaba:	2000      	movs	r0, #0
    aabc:	e61e      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return false;
    aabe:	2000      	movs	r0, #0
    aac0:	e61c      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return false;
    aac2:	2000      	movs	r0, #0
    aac4:	e61a      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return false;
    aac6:	2000      	movs	r0, #0
    aac8:	e618      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
		return false;
    aaca:	2000      	movs	r0, #0
    aacc:	e616      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
			return false;
    aace:	2000      	movs	r0, #0
    aad0:	e614      	b.n	a6fc <usbdc_cb_ctl_req+0x30>
    aad2:	bf00      	nop
    aad4:	200008c4 	.word	0x200008c4
    aad8:	0000ac19 	.word	0x0000ac19
    aadc:	0000a6ad 	.word	0x0000a6ad
    aae0:	0000ac81 	.word	0x0000ac81
    aae4:	00006a65 	.word	0x00006a65

0000aae8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    aae8:	b508      	push	{r3, lr}
	switch (type) {
    aaea:	2801      	cmp	r0, #1
    aaec:	d007      	beq.n	aafe <usbdc_register_handler+0x16>
    aaee:	b110      	cbz	r0, aaf6 <usbdc_register_handler+0xe>
    aaf0:	2802      	cmp	r0, #2
    aaf2:	d008      	beq.n	ab06 <usbdc_register_handler+0x1e>
    aaf4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    aaf6:	4806      	ldr	r0, [pc, #24]	; (ab10 <usbdc_register_handler+0x28>)
    aaf8:	4b06      	ldr	r3, [pc, #24]	; (ab14 <usbdc_register_handler+0x2c>)
    aafa:	4798      	blx	r3
		break;
    aafc:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    aafe:	4806      	ldr	r0, [pc, #24]	; (ab18 <usbdc_register_handler+0x30>)
    ab00:	4b04      	ldr	r3, [pc, #16]	; (ab14 <usbdc_register_handler+0x2c>)
    ab02:	4798      	blx	r3
		break;
    ab04:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    ab06:	4805      	ldr	r0, [pc, #20]	; (ab1c <usbdc_register_handler+0x34>)
    ab08:	4b02      	ldr	r3, [pc, #8]	; (ab14 <usbdc_register_handler+0x2c>)
    ab0a:	4798      	blx	r3
    ab0c:	bd08      	pop	{r3, pc}
    ab0e:	bf00      	nop
    ab10:	200008c8 	.word	0x200008c8
    ab14:	00006b29 	.word	0x00006b29
    ab18:	200008cc 	.word	0x200008cc
    ab1c:	200008d0 	.word	0x200008d0

0000ab20 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    ab20:	b538      	push	{r3, r4, r5, lr}
    ab22:	4605      	mov	r5, r0
	ASSERT(ctrl_buf);

	int32_t rc;

	rc = usb_d_init();
    ab24:	4b09      	ldr	r3, [pc, #36]	; (ab4c <usbdc_init+0x2c>)
    ab26:	4798      	blx	r3
	if (rc < 0) {
    ab28:	2800      	cmp	r0, #0
    ab2a:	db0e      	blt.n	ab4a <usbdc_init+0x2a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    ab2c:	4c08      	ldr	r4, [pc, #32]	; (ab50 <usbdc_init+0x30>)
    ab2e:	2220      	movs	r2, #32
    ab30:	2100      	movs	r1, #0
    ab32:	4620      	mov	r0, r4
    ab34:	4b07      	ldr	r3, [pc, #28]	; (ab54 <usbdc_init+0x34>)
    ab36:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    ab38:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    ab3a:	4907      	ldr	r1, [pc, #28]	; (ab58 <usbdc_init+0x38>)
    ab3c:	2000      	movs	r0, #0
    ab3e:	4c07      	ldr	r4, [pc, #28]	; (ab5c <usbdc_init+0x3c>)
    ab40:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    ab42:	4907      	ldr	r1, [pc, #28]	; (ab60 <usbdc_init+0x40>)
    ab44:	2001      	movs	r0, #1
    ab46:	47a0      	blx	r4

	return 0;
    ab48:	2000      	movs	r0, #0
}
    ab4a:	bd38      	pop	{r3, r4, r5, pc}
    ab4c:	000067e5 	.word	0x000067e5
    ab50:	200008c4 	.word	0x200008c4
    ab54:	0000b543 	.word	0x0000b543
    ab58:	0000a5a1 	.word	0x0000a5a1
    ab5c:	0000684d 	.word	0x0000684d
    ab60:	0000a68d 	.word	0x0000a68d

0000ab64 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    ab64:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    ab66:	4601      	mov	r1, r0
    ab68:	4801      	ldr	r0, [pc, #4]	; (ab70 <usbdc_register_function+0xc>)
    ab6a:	4b02      	ldr	r3, [pc, #8]	; (ab74 <usbdc_register_function+0x10>)
    ab6c:	4798      	blx	r3
    ab6e:	bd08      	pop	{r3, pc}
    ab70:	200008d4 	.word	0x200008d4
    ab74:	00006b29 	.word	0x00006b29

0000ab78 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    ab78:	4b01      	ldr	r3, [pc, #4]	; (ab80 <usbdc_get_ctrl_buffer+0x8>)
    ab7a:	6958      	ldr	r0, [r3, #20]
    ab7c:	4770      	bx	lr
    ab7e:	bf00      	nop
    ab80:	200008c4 	.word	0x200008c4

0000ab84 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    ab84:	4b03      	ldr	r3, [pc, #12]	; (ab94 <usbdc_get_state+0x10>)
    ab86:	7e98      	ldrb	r0, [r3, #26]
    ab88:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    ab8c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    ab8e:	bf18      	it	ne
    ab90:	2010      	movne	r0, #16
    ab92:	4770      	bx	lr
    ab94:	200008c4 	.word	0x200008c4

0000ab98 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ab98:	4288      	cmp	r0, r1
    ab9a:	d214      	bcs.n	abc6 <usb_find_desc+0x2e>
	return desc[0];
    ab9c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ab9e:	2b01      	cmp	r3, #1
    aba0:	d913      	bls.n	abca <usb_find_desc+0x32>
{
    aba2:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    aba4:	7844      	ldrb	r4, [r0, #1]
    aba6:	4294      	cmp	r4, r2
    aba8:	d00a      	beq.n	abc0 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    abaa:	4418      	add	r0, r3
	while (desc < eof) {
    abac:	4281      	cmp	r1, r0
    abae:	d906      	bls.n	abbe <usb_find_desc+0x26>
	return desc[0];
    abb0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    abb2:	2b01      	cmp	r3, #1
    abb4:	d90b      	bls.n	abce <usb_find_desc+0x36>
	return desc[1];
    abb6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    abb8:	4294      	cmp	r4, r2
    abba:	d1f6      	bne.n	abaa <usb_find_desc+0x12>
    abbc:	e000      	b.n	abc0 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    abbe:	2000      	movs	r0, #0
}
    abc0:	f85d 4b04 	ldr.w	r4, [sp], #4
    abc4:	4770      	bx	lr
	return NULL;
    abc6:	2000      	movs	r0, #0
    abc8:	4770      	bx	lr
		_desc_len_check();
    abca:	2000      	movs	r0, #0
    abcc:	4770      	bx	lr
    abce:	2000      	movs	r0, #0
    abd0:	e7f6      	b.n	abc0 <usb_find_desc+0x28>

0000abd2 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    abd2:	4288      	cmp	r0, r1
    abd4:	d216      	bcs.n	ac04 <usb_find_ep_desc+0x32>
	return desc[0];
    abd6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    abd8:	2b01      	cmp	r3, #1
    abda:	d915      	bls.n	ac08 <usb_find_ep_desc+0x36>
	return desc[1];
    abdc:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    abde:	2a04      	cmp	r2, #4
    abe0:	d014      	beq.n	ac0c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    abe2:	2a05      	cmp	r2, #5
    abe4:	d00b      	beq.n	abfe <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    abe6:	4418      	add	r0, r3
	while (desc < eof) {
    abe8:	4281      	cmp	r1, r0
    abea:	d909      	bls.n	ac00 <usb_find_ep_desc+0x2e>
	return desc[0];
    abec:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    abee:	2b01      	cmp	r3, #1
    abf0:	d90e      	bls.n	ac10 <usb_find_ep_desc+0x3e>
	return desc[1];
    abf2:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    abf4:	2a04      	cmp	r2, #4
    abf6:	d00d      	beq.n	ac14 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    abf8:	2a05      	cmp	r2, #5
    abfa:	d1f4      	bne.n	abe6 <usb_find_ep_desc+0x14>
    abfc:	e00b      	b.n	ac16 <usb_find_ep_desc+0x44>
    abfe:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    ac00:	2000      	movs	r0, #0
    ac02:	4770      	bx	lr
    ac04:	2000      	movs	r0, #0
    ac06:	4770      	bx	lr
		_desc_len_check();
    ac08:	2000      	movs	r0, #0
    ac0a:	4770      	bx	lr
	return NULL;
    ac0c:	2000      	movs	r0, #0
    ac0e:	4770      	bx	lr
		_desc_len_check();
    ac10:	2000      	movs	r0, #0
    ac12:	4770      	bx	lr
	return NULL;
    ac14:	2000      	movs	r0, #0
}
    ac16:	4770      	bx	lr

0000ac18 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    ac18:	b538      	push	{r3, r4, r5, lr}
    ac1a:	460c      	mov	r4, r1
    ac1c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ac1e:	2202      	movs	r2, #2
    ac20:	4b16      	ldr	r3, [pc, #88]	; (ac7c <usb_find_cfg_desc+0x64>)
    ac22:	4798      	blx	r3
	if (!desc) {
    ac24:	4603      	mov	r3, r0
    ac26:	b1e8      	cbz	r0, ac64 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    ac28:	4284      	cmp	r4, r0
    ac2a:	d91d      	bls.n	ac68 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    ac2c:	7802      	ldrb	r2, [r0, #0]
    ac2e:	2a01      	cmp	r2, #1
    ac30:	d91c      	bls.n	ac6c <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    ac32:	7842      	ldrb	r2, [r0, #1]
    ac34:	2a02      	cmp	r2, #2
    ac36:	d11b      	bne.n	ac70 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    ac38:	7942      	ldrb	r2, [r0, #5]
    ac3a:	42aa      	cmp	r2, r5
    ac3c:	d012      	beq.n	ac64 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    ac3e:	78d9      	ldrb	r1, [r3, #3]
    ac40:	789a      	ldrb	r2, [r3, #2]
    ac42:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    ac46:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    ac4a:	429c      	cmp	r4, r3
    ac4c:	d909      	bls.n	ac62 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    ac4e:	781a      	ldrb	r2, [r3, #0]
    ac50:	2a01      	cmp	r2, #1
    ac52:	d90f      	bls.n	ac74 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    ac54:	785a      	ldrb	r2, [r3, #1]
    ac56:	2a02      	cmp	r2, #2
    ac58:	d10e      	bne.n	ac78 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    ac5a:	795a      	ldrb	r2, [r3, #5]
    ac5c:	42aa      	cmp	r2, r5
    ac5e:	d1ee      	bne.n	ac3e <usb_find_cfg_desc+0x26>
    ac60:	e000      	b.n	ac64 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    ac62:	2300      	movs	r3, #0
}
    ac64:	4618      	mov	r0, r3
    ac66:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    ac68:	2300      	movs	r3, #0
    ac6a:	e7fb      	b.n	ac64 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    ac6c:	2300      	movs	r3, #0
    ac6e:	e7f9      	b.n	ac64 <usb_find_cfg_desc+0x4c>
	return NULL;
    ac70:	2300      	movs	r3, #0
    ac72:	e7f7      	b.n	ac64 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    ac74:	2300      	movs	r3, #0
    ac76:	e7f5      	b.n	ac64 <usb_find_cfg_desc+0x4c>
	return NULL;
    ac78:	2300      	movs	r3, #0
    ac7a:	e7f3      	b.n	ac64 <usb_find_cfg_desc+0x4c>
    ac7c:	0000ab99 	.word	0x0000ab99

0000ac80 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ac80:	4288      	cmp	r0, r1
    ac82:	d217      	bcs.n	acb4 <usb_find_str_desc+0x34>
{
    ac84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac88:	460d      	mov	r5, r1
    ac8a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    ac8c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ac8e:	f04f 0803 	mov.w	r8, #3
    ac92:	4f0c      	ldr	r7, [pc, #48]	; (acc4 <usb_find_str_desc+0x44>)
    ac94:	4642      	mov	r2, r8
    ac96:	4629      	mov	r1, r5
    ac98:	47b8      	blx	r7
		if (desc) {
    ac9a:	4603      	mov	r3, r0
    ac9c:	b170      	cbz	r0, acbc <usb_find_str_desc+0x3c>
	return desc[0];
    ac9e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    aca0:	2801      	cmp	r0, #1
    aca2:	d90a      	bls.n	acba <usb_find_str_desc+0x3a>
			if (i == str_index) {
    aca4:	42a6      	cmp	r6, r4
    aca6:	d009      	beq.n	acbc <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    aca8:	4418      	add	r0, r3
    acaa:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    acac:	4285      	cmp	r5, r0
    acae:	d8f1      	bhi.n	ac94 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    acb0:	2300      	movs	r3, #0
    acb2:	e003      	b.n	acbc <usb_find_str_desc+0x3c>
    acb4:	2300      	movs	r3, #0
}
    acb6:	4618      	mov	r0, r3
    acb8:	4770      	bx	lr
			_desc_len_check();
    acba:	2300      	movs	r3, #0
}
    acbc:	4618      	mov	r0, r3
    acbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acc2:	bf00      	nop
    acc4:	0000ab99 	.word	0x0000ab99

0000acc8 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    acc8:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    acca:	4805      	ldr	r0, [pc, #20]	; (ace0 <composite_device_init+0x18>)
    accc:	4b05      	ldr	r3, [pc, #20]	; (ace4 <composite_device_init+0x1c>)
    acce:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    acd0:	4b05      	ldr	r3, [pc, #20]	; (ace8 <composite_device_init+0x20>)
    acd2:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    acd4:	4b05      	ldr	r3, [pc, #20]	; (acec <composite_device_init+0x24>)
    acd6:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    acd8:	4b05      	ldr	r3, [pc, #20]	; (acf0 <composite_device_init+0x28>)
    acda:	4798      	blx	r3
    acdc:	bd08      	pop	{r3, pc}
    acde:	bf00      	nop
    ace0:	200008fc 	.word	0x200008fc
    ace4:	0000ab21 	.word	0x0000ab21
    ace8:	0000a0c9 	.word	0x0000a0c9
    acec:	0000a4d1 	.word	0x0000a4d1
    acf0:	0000a2e1 	.word	0x0000a2e1

0000acf4 <usb_init>:
		}
	}
}

void usb_init(void)
{
    acf4:	b508      	push	{r3, lr}

	composite_device_init();
    acf6:	4b01      	ldr	r3, [pc, #4]	; (acfc <usb_init+0x8>)
    acf8:	4798      	blx	r3
    acfa:	bd08      	pop	{r3, pc}
    acfc:	0000acc9 	.word	0x0000acc9

0000ad00 <__aeabi_drsub>:
    ad00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    ad04:	e002      	b.n	ad0c <__adddf3>
    ad06:	bf00      	nop

0000ad08 <__aeabi_dsub>:
    ad08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000ad0c <__adddf3>:
    ad0c:	b530      	push	{r4, r5, lr}
    ad0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    ad12:	ea4f 0543 	mov.w	r5, r3, lsl #1
    ad16:	ea94 0f05 	teq	r4, r5
    ad1a:	bf08      	it	eq
    ad1c:	ea90 0f02 	teqeq	r0, r2
    ad20:	bf1f      	itttt	ne
    ad22:	ea54 0c00 	orrsne.w	ip, r4, r0
    ad26:	ea55 0c02 	orrsne.w	ip, r5, r2
    ad2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    ad2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ad32:	f000 80e2 	beq.w	aefa <__adddf3+0x1ee>
    ad36:	ea4f 5454 	mov.w	r4, r4, lsr #21
    ad3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    ad3e:	bfb8      	it	lt
    ad40:	426d      	neglt	r5, r5
    ad42:	dd0c      	ble.n	ad5e <__adddf3+0x52>
    ad44:	442c      	add	r4, r5
    ad46:	ea80 0202 	eor.w	r2, r0, r2
    ad4a:	ea81 0303 	eor.w	r3, r1, r3
    ad4e:	ea82 0000 	eor.w	r0, r2, r0
    ad52:	ea83 0101 	eor.w	r1, r3, r1
    ad56:	ea80 0202 	eor.w	r2, r0, r2
    ad5a:	ea81 0303 	eor.w	r3, r1, r3
    ad5e:	2d36      	cmp	r5, #54	; 0x36
    ad60:	bf88      	it	hi
    ad62:	bd30      	pophi	{r4, r5, pc}
    ad64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ad68:	ea4f 3101 	mov.w	r1, r1, lsl #12
    ad6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    ad70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    ad74:	d002      	beq.n	ad7c <__adddf3+0x70>
    ad76:	4240      	negs	r0, r0
    ad78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ad7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    ad80:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ad84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    ad88:	d002      	beq.n	ad90 <__adddf3+0x84>
    ad8a:	4252      	negs	r2, r2
    ad8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ad90:	ea94 0f05 	teq	r4, r5
    ad94:	f000 80a7 	beq.w	aee6 <__adddf3+0x1da>
    ad98:	f1a4 0401 	sub.w	r4, r4, #1
    ad9c:	f1d5 0e20 	rsbs	lr, r5, #32
    ada0:	db0d      	blt.n	adbe <__adddf3+0xb2>
    ada2:	fa02 fc0e 	lsl.w	ip, r2, lr
    ada6:	fa22 f205 	lsr.w	r2, r2, r5
    adaa:	1880      	adds	r0, r0, r2
    adac:	f141 0100 	adc.w	r1, r1, #0
    adb0:	fa03 f20e 	lsl.w	r2, r3, lr
    adb4:	1880      	adds	r0, r0, r2
    adb6:	fa43 f305 	asr.w	r3, r3, r5
    adba:	4159      	adcs	r1, r3
    adbc:	e00e      	b.n	addc <__adddf3+0xd0>
    adbe:	f1a5 0520 	sub.w	r5, r5, #32
    adc2:	f10e 0e20 	add.w	lr, lr, #32
    adc6:	2a01      	cmp	r2, #1
    adc8:	fa03 fc0e 	lsl.w	ip, r3, lr
    adcc:	bf28      	it	cs
    adce:	f04c 0c02 	orrcs.w	ip, ip, #2
    add2:	fa43 f305 	asr.w	r3, r3, r5
    add6:	18c0      	adds	r0, r0, r3
    add8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    addc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ade0:	d507      	bpl.n	adf2 <__adddf3+0xe6>
    ade2:	f04f 0e00 	mov.w	lr, #0
    ade6:	f1dc 0c00 	rsbs	ip, ip, #0
    adea:	eb7e 0000 	sbcs.w	r0, lr, r0
    adee:	eb6e 0101 	sbc.w	r1, lr, r1
    adf2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    adf6:	d31b      	bcc.n	ae30 <__adddf3+0x124>
    adf8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    adfc:	d30c      	bcc.n	ae18 <__adddf3+0x10c>
    adfe:	0849      	lsrs	r1, r1, #1
    ae00:	ea5f 0030 	movs.w	r0, r0, rrx
    ae04:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ae08:	f104 0401 	add.w	r4, r4, #1
    ae0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    ae10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    ae14:	f080 809a 	bcs.w	af4c <__adddf3+0x240>
    ae18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ae1c:	bf08      	it	eq
    ae1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ae22:	f150 0000 	adcs.w	r0, r0, #0
    ae26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ae2a:	ea41 0105 	orr.w	r1, r1, r5
    ae2e:	bd30      	pop	{r4, r5, pc}
    ae30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    ae34:	4140      	adcs	r0, r0
    ae36:	eb41 0101 	adc.w	r1, r1, r1
    ae3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ae3e:	f1a4 0401 	sub.w	r4, r4, #1
    ae42:	d1e9      	bne.n	ae18 <__adddf3+0x10c>
    ae44:	f091 0f00 	teq	r1, #0
    ae48:	bf04      	itt	eq
    ae4a:	4601      	moveq	r1, r0
    ae4c:	2000      	moveq	r0, #0
    ae4e:	fab1 f381 	clz	r3, r1
    ae52:	bf08      	it	eq
    ae54:	3320      	addeq	r3, #32
    ae56:	f1a3 030b 	sub.w	r3, r3, #11
    ae5a:	f1b3 0220 	subs.w	r2, r3, #32
    ae5e:	da0c      	bge.n	ae7a <__adddf3+0x16e>
    ae60:	320c      	adds	r2, #12
    ae62:	dd08      	ble.n	ae76 <__adddf3+0x16a>
    ae64:	f102 0c14 	add.w	ip, r2, #20
    ae68:	f1c2 020c 	rsb	r2, r2, #12
    ae6c:	fa01 f00c 	lsl.w	r0, r1, ip
    ae70:	fa21 f102 	lsr.w	r1, r1, r2
    ae74:	e00c      	b.n	ae90 <__adddf3+0x184>
    ae76:	f102 0214 	add.w	r2, r2, #20
    ae7a:	bfd8      	it	le
    ae7c:	f1c2 0c20 	rsble	ip, r2, #32
    ae80:	fa01 f102 	lsl.w	r1, r1, r2
    ae84:	fa20 fc0c 	lsr.w	ip, r0, ip
    ae88:	bfdc      	itt	le
    ae8a:	ea41 010c 	orrle.w	r1, r1, ip
    ae8e:	4090      	lslle	r0, r2
    ae90:	1ae4      	subs	r4, r4, r3
    ae92:	bfa2      	ittt	ge
    ae94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    ae98:	4329      	orrge	r1, r5
    ae9a:	bd30      	popge	{r4, r5, pc}
    ae9c:	ea6f 0404 	mvn.w	r4, r4
    aea0:	3c1f      	subs	r4, #31
    aea2:	da1c      	bge.n	aede <__adddf3+0x1d2>
    aea4:	340c      	adds	r4, #12
    aea6:	dc0e      	bgt.n	aec6 <__adddf3+0x1ba>
    aea8:	f104 0414 	add.w	r4, r4, #20
    aeac:	f1c4 0220 	rsb	r2, r4, #32
    aeb0:	fa20 f004 	lsr.w	r0, r0, r4
    aeb4:	fa01 f302 	lsl.w	r3, r1, r2
    aeb8:	ea40 0003 	orr.w	r0, r0, r3
    aebc:	fa21 f304 	lsr.w	r3, r1, r4
    aec0:	ea45 0103 	orr.w	r1, r5, r3
    aec4:	bd30      	pop	{r4, r5, pc}
    aec6:	f1c4 040c 	rsb	r4, r4, #12
    aeca:	f1c4 0220 	rsb	r2, r4, #32
    aece:	fa20 f002 	lsr.w	r0, r0, r2
    aed2:	fa01 f304 	lsl.w	r3, r1, r4
    aed6:	ea40 0003 	orr.w	r0, r0, r3
    aeda:	4629      	mov	r1, r5
    aedc:	bd30      	pop	{r4, r5, pc}
    aede:	fa21 f004 	lsr.w	r0, r1, r4
    aee2:	4629      	mov	r1, r5
    aee4:	bd30      	pop	{r4, r5, pc}
    aee6:	f094 0f00 	teq	r4, #0
    aeea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    aeee:	bf06      	itte	eq
    aef0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    aef4:	3401      	addeq	r4, #1
    aef6:	3d01      	subne	r5, #1
    aef8:	e74e      	b.n	ad98 <__adddf3+0x8c>
    aefa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    aefe:	bf18      	it	ne
    af00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    af04:	d029      	beq.n	af5a <__adddf3+0x24e>
    af06:	ea94 0f05 	teq	r4, r5
    af0a:	bf08      	it	eq
    af0c:	ea90 0f02 	teqeq	r0, r2
    af10:	d005      	beq.n	af1e <__adddf3+0x212>
    af12:	ea54 0c00 	orrs.w	ip, r4, r0
    af16:	bf04      	itt	eq
    af18:	4619      	moveq	r1, r3
    af1a:	4610      	moveq	r0, r2
    af1c:	bd30      	pop	{r4, r5, pc}
    af1e:	ea91 0f03 	teq	r1, r3
    af22:	bf1e      	ittt	ne
    af24:	2100      	movne	r1, #0
    af26:	2000      	movne	r0, #0
    af28:	bd30      	popne	{r4, r5, pc}
    af2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    af2e:	d105      	bne.n	af3c <__adddf3+0x230>
    af30:	0040      	lsls	r0, r0, #1
    af32:	4149      	adcs	r1, r1
    af34:	bf28      	it	cs
    af36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    af3a:	bd30      	pop	{r4, r5, pc}
    af3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    af40:	bf3c      	itt	cc
    af42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    af46:	bd30      	popcc	{r4, r5, pc}
    af48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    af4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    af50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    af54:	f04f 0000 	mov.w	r0, #0
    af58:	bd30      	pop	{r4, r5, pc}
    af5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    af5e:	bf1a      	itte	ne
    af60:	4619      	movne	r1, r3
    af62:	4610      	movne	r0, r2
    af64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    af68:	bf1c      	itt	ne
    af6a:	460b      	movne	r3, r1
    af6c:	4602      	movne	r2, r0
    af6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    af72:	bf06      	itte	eq
    af74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    af78:	ea91 0f03 	teqeq	r1, r3
    af7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    af80:	bd30      	pop	{r4, r5, pc}
    af82:	bf00      	nop

0000af84 <__aeabi_ui2d>:
    af84:	f090 0f00 	teq	r0, #0
    af88:	bf04      	itt	eq
    af8a:	2100      	moveq	r1, #0
    af8c:	4770      	bxeq	lr
    af8e:	b530      	push	{r4, r5, lr}
    af90:	f44f 6480 	mov.w	r4, #1024	; 0x400
    af94:	f104 0432 	add.w	r4, r4, #50	; 0x32
    af98:	f04f 0500 	mov.w	r5, #0
    af9c:	f04f 0100 	mov.w	r1, #0
    afa0:	e750      	b.n	ae44 <__adddf3+0x138>
    afa2:	bf00      	nop

0000afa4 <__aeabi_i2d>:
    afa4:	f090 0f00 	teq	r0, #0
    afa8:	bf04      	itt	eq
    afaa:	2100      	moveq	r1, #0
    afac:	4770      	bxeq	lr
    afae:	b530      	push	{r4, r5, lr}
    afb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    afb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    afb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    afbc:	bf48      	it	mi
    afbe:	4240      	negmi	r0, r0
    afc0:	f04f 0100 	mov.w	r1, #0
    afc4:	e73e      	b.n	ae44 <__adddf3+0x138>
    afc6:	bf00      	nop

0000afc8 <__aeabi_f2d>:
    afc8:	0042      	lsls	r2, r0, #1
    afca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    afce:	ea4f 0131 	mov.w	r1, r1, rrx
    afd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    afd6:	bf1f      	itttt	ne
    afd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    afdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    afe0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    afe4:	4770      	bxne	lr
    afe6:	f092 0f00 	teq	r2, #0
    afea:	bf14      	ite	ne
    afec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    aff0:	4770      	bxeq	lr
    aff2:	b530      	push	{r4, r5, lr}
    aff4:	f44f 7460 	mov.w	r4, #896	; 0x380
    aff8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    affc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b000:	e720      	b.n	ae44 <__adddf3+0x138>
    b002:	bf00      	nop

0000b004 <__aeabi_ul2d>:
    b004:	ea50 0201 	orrs.w	r2, r0, r1
    b008:	bf08      	it	eq
    b00a:	4770      	bxeq	lr
    b00c:	b530      	push	{r4, r5, lr}
    b00e:	f04f 0500 	mov.w	r5, #0
    b012:	e00a      	b.n	b02a <__aeabi_l2d+0x16>

0000b014 <__aeabi_l2d>:
    b014:	ea50 0201 	orrs.w	r2, r0, r1
    b018:	bf08      	it	eq
    b01a:	4770      	bxeq	lr
    b01c:	b530      	push	{r4, r5, lr}
    b01e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b022:	d502      	bpl.n	b02a <__aeabi_l2d+0x16>
    b024:	4240      	negs	r0, r0
    b026:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b02a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b02e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b032:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b036:	f43f aedc 	beq.w	adf2 <__adddf3+0xe6>
    b03a:	f04f 0203 	mov.w	r2, #3
    b03e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b042:	bf18      	it	ne
    b044:	3203      	addne	r2, #3
    b046:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b04a:	bf18      	it	ne
    b04c:	3203      	addne	r2, #3
    b04e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b052:	f1c2 0320 	rsb	r3, r2, #32
    b056:	fa00 fc03 	lsl.w	ip, r0, r3
    b05a:	fa20 f002 	lsr.w	r0, r0, r2
    b05e:	fa01 fe03 	lsl.w	lr, r1, r3
    b062:	ea40 000e 	orr.w	r0, r0, lr
    b066:	fa21 f102 	lsr.w	r1, r1, r2
    b06a:	4414      	add	r4, r2
    b06c:	e6c1      	b.n	adf2 <__adddf3+0xe6>
    b06e:	bf00      	nop

0000b070 <__aeabi_dmul>:
    b070:	b570      	push	{r4, r5, r6, lr}
    b072:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b076:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b07a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b07e:	bf1d      	ittte	ne
    b080:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b084:	ea94 0f0c 	teqne	r4, ip
    b088:	ea95 0f0c 	teqne	r5, ip
    b08c:	f000 f8de 	bleq	b24c <__aeabi_dmul+0x1dc>
    b090:	442c      	add	r4, r5
    b092:	ea81 0603 	eor.w	r6, r1, r3
    b096:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b09a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b09e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b0a2:	bf18      	it	ne
    b0a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b0a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b0ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b0b0:	d038      	beq.n	b124 <__aeabi_dmul+0xb4>
    b0b2:	fba0 ce02 	umull	ip, lr, r0, r2
    b0b6:	f04f 0500 	mov.w	r5, #0
    b0ba:	fbe1 e502 	umlal	lr, r5, r1, r2
    b0be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b0c2:	fbe0 e503 	umlal	lr, r5, r0, r3
    b0c6:	f04f 0600 	mov.w	r6, #0
    b0ca:	fbe1 5603 	umlal	r5, r6, r1, r3
    b0ce:	f09c 0f00 	teq	ip, #0
    b0d2:	bf18      	it	ne
    b0d4:	f04e 0e01 	orrne.w	lr, lr, #1
    b0d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b0dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b0e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b0e4:	d204      	bcs.n	b0f0 <__aeabi_dmul+0x80>
    b0e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b0ea:	416d      	adcs	r5, r5
    b0ec:	eb46 0606 	adc.w	r6, r6, r6
    b0f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b0f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b0f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b0fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b100:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b104:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b108:	bf88      	it	hi
    b10a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b10e:	d81e      	bhi.n	b14e <__aeabi_dmul+0xde>
    b110:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b114:	bf08      	it	eq
    b116:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b11a:	f150 0000 	adcs.w	r0, r0, #0
    b11e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b122:	bd70      	pop	{r4, r5, r6, pc}
    b124:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b128:	ea46 0101 	orr.w	r1, r6, r1
    b12c:	ea40 0002 	orr.w	r0, r0, r2
    b130:	ea81 0103 	eor.w	r1, r1, r3
    b134:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b138:	bfc2      	ittt	gt
    b13a:	ebd4 050c 	rsbsgt	r5, r4, ip
    b13e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b142:	bd70      	popgt	{r4, r5, r6, pc}
    b144:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b148:	f04f 0e00 	mov.w	lr, #0
    b14c:	3c01      	subs	r4, #1
    b14e:	f300 80ab 	bgt.w	b2a8 <__aeabi_dmul+0x238>
    b152:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b156:	bfde      	ittt	le
    b158:	2000      	movle	r0, #0
    b15a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b15e:	bd70      	pople	{r4, r5, r6, pc}
    b160:	f1c4 0400 	rsb	r4, r4, #0
    b164:	3c20      	subs	r4, #32
    b166:	da35      	bge.n	b1d4 <__aeabi_dmul+0x164>
    b168:	340c      	adds	r4, #12
    b16a:	dc1b      	bgt.n	b1a4 <__aeabi_dmul+0x134>
    b16c:	f104 0414 	add.w	r4, r4, #20
    b170:	f1c4 0520 	rsb	r5, r4, #32
    b174:	fa00 f305 	lsl.w	r3, r0, r5
    b178:	fa20 f004 	lsr.w	r0, r0, r4
    b17c:	fa01 f205 	lsl.w	r2, r1, r5
    b180:	ea40 0002 	orr.w	r0, r0, r2
    b184:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b18c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b190:	fa21 f604 	lsr.w	r6, r1, r4
    b194:	eb42 0106 	adc.w	r1, r2, r6
    b198:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b19c:	bf08      	it	eq
    b19e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b1a2:	bd70      	pop	{r4, r5, r6, pc}
    b1a4:	f1c4 040c 	rsb	r4, r4, #12
    b1a8:	f1c4 0520 	rsb	r5, r4, #32
    b1ac:	fa00 f304 	lsl.w	r3, r0, r4
    b1b0:	fa20 f005 	lsr.w	r0, r0, r5
    b1b4:	fa01 f204 	lsl.w	r2, r1, r4
    b1b8:	ea40 0002 	orr.w	r0, r0, r2
    b1bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b1c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b1c4:	f141 0100 	adc.w	r1, r1, #0
    b1c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b1cc:	bf08      	it	eq
    b1ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b1d2:	bd70      	pop	{r4, r5, r6, pc}
    b1d4:	f1c4 0520 	rsb	r5, r4, #32
    b1d8:	fa00 f205 	lsl.w	r2, r0, r5
    b1dc:	ea4e 0e02 	orr.w	lr, lr, r2
    b1e0:	fa20 f304 	lsr.w	r3, r0, r4
    b1e4:	fa01 f205 	lsl.w	r2, r1, r5
    b1e8:	ea43 0302 	orr.w	r3, r3, r2
    b1ec:	fa21 f004 	lsr.w	r0, r1, r4
    b1f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b1f4:	fa21 f204 	lsr.w	r2, r1, r4
    b1f8:	ea20 0002 	bic.w	r0, r0, r2
    b1fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b200:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b204:	bf08      	it	eq
    b206:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b20a:	bd70      	pop	{r4, r5, r6, pc}
    b20c:	f094 0f00 	teq	r4, #0
    b210:	d10f      	bne.n	b232 <__aeabi_dmul+0x1c2>
    b212:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b216:	0040      	lsls	r0, r0, #1
    b218:	eb41 0101 	adc.w	r1, r1, r1
    b21c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b220:	bf08      	it	eq
    b222:	3c01      	subeq	r4, #1
    b224:	d0f7      	beq.n	b216 <__aeabi_dmul+0x1a6>
    b226:	ea41 0106 	orr.w	r1, r1, r6
    b22a:	f095 0f00 	teq	r5, #0
    b22e:	bf18      	it	ne
    b230:	4770      	bxne	lr
    b232:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b236:	0052      	lsls	r2, r2, #1
    b238:	eb43 0303 	adc.w	r3, r3, r3
    b23c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b240:	bf08      	it	eq
    b242:	3d01      	subeq	r5, #1
    b244:	d0f7      	beq.n	b236 <__aeabi_dmul+0x1c6>
    b246:	ea43 0306 	orr.w	r3, r3, r6
    b24a:	4770      	bx	lr
    b24c:	ea94 0f0c 	teq	r4, ip
    b250:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b254:	bf18      	it	ne
    b256:	ea95 0f0c 	teqne	r5, ip
    b25a:	d00c      	beq.n	b276 <__aeabi_dmul+0x206>
    b25c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b260:	bf18      	it	ne
    b262:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b266:	d1d1      	bne.n	b20c <__aeabi_dmul+0x19c>
    b268:	ea81 0103 	eor.w	r1, r1, r3
    b26c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b270:	f04f 0000 	mov.w	r0, #0
    b274:	bd70      	pop	{r4, r5, r6, pc}
    b276:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b27a:	bf06      	itte	eq
    b27c:	4610      	moveq	r0, r2
    b27e:	4619      	moveq	r1, r3
    b280:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b284:	d019      	beq.n	b2ba <__aeabi_dmul+0x24a>
    b286:	ea94 0f0c 	teq	r4, ip
    b28a:	d102      	bne.n	b292 <__aeabi_dmul+0x222>
    b28c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b290:	d113      	bne.n	b2ba <__aeabi_dmul+0x24a>
    b292:	ea95 0f0c 	teq	r5, ip
    b296:	d105      	bne.n	b2a4 <__aeabi_dmul+0x234>
    b298:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b29c:	bf1c      	itt	ne
    b29e:	4610      	movne	r0, r2
    b2a0:	4619      	movne	r1, r3
    b2a2:	d10a      	bne.n	b2ba <__aeabi_dmul+0x24a>
    b2a4:	ea81 0103 	eor.w	r1, r1, r3
    b2a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b2ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b2b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b2b4:	f04f 0000 	mov.w	r0, #0
    b2b8:	bd70      	pop	{r4, r5, r6, pc}
    b2ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b2be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b2c2:	bd70      	pop	{r4, r5, r6, pc}

0000b2c4 <__aeabi_ddiv>:
    b2c4:	b570      	push	{r4, r5, r6, lr}
    b2c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b2ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b2ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b2d2:	bf1d      	ittte	ne
    b2d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b2d8:	ea94 0f0c 	teqne	r4, ip
    b2dc:	ea95 0f0c 	teqne	r5, ip
    b2e0:	f000 f8a7 	bleq	b432 <__aeabi_ddiv+0x16e>
    b2e4:	eba4 0405 	sub.w	r4, r4, r5
    b2e8:	ea81 0e03 	eor.w	lr, r1, r3
    b2ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b2f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b2f4:	f000 8088 	beq.w	b408 <__aeabi_ddiv+0x144>
    b2f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b2fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b300:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b304:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b308:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b30c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b310:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b314:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b318:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b31c:	429d      	cmp	r5, r3
    b31e:	bf08      	it	eq
    b320:	4296      	cmpeq	r6, r2
    b322:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b326:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b32a:	d202      	bcs.n	b332 <__aeabi_ddiv+0x6e>
    b32c:	085b      	lsrs	r3, r3, #1
    b32e:	ea4f 0232 	mov.w	r2, r2, rrx
    b332:	1ab6      	subs	r6, r6, r2
    b334:	eb65 0503 	sbc.w	r5, r5, r3
    b338:	085b      	lsrs	r3, r3, #1
    b33a:	ea4f 0232 	mov.w	r2, r2, rrx
    b33e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b342:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b346:	ebb6 0e02 	subs.w	lr, r6, r2
    b34a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b34e:	bf22      	ittt	cs
    b350:	1ab6      	subcs	r6, r6, r2
    b352:	4675      	movcs	r5, lr
    b354:	ea40 000c 	orrcs.w	r0, r0, ip
    b358:	085b      	lsrs	r3, r3, #1
    b35a:	ea4f 0232 	mov.w	r2, r2, rrx
    b35e:	ebb6 0e02 	subs.w	lr, r6, r2
    b362:	eb75 0e03 	sbcs.w	lr, r5, r3
    b366:	bf22      	ittt	cs
    b368:	1ab6      	subcs	r6, r6, r2
    b36a:	4675      	movcs	r5, lr
    b36c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b370:	085b      	lsrs	r3, r3, #1
    b372:	ea4f 0232 	mov.w	r2, r2, rrx
    b376:	ebb6 0e02 	subs.w	lr, r6, r2
    b37a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b37e:	bf22      	ittt	cs
    b380:	1ab6      	subcs	r6, r6, r2
    b382:	4675      	movcs	r5, lr
    b384:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b388:	085b      	lsrs	r3, r3, #1
    b38a:	ea4f 0232 	mov.w	r2, r2, rrx
    b38e:	ebb6 0e02 	subs.w	lr, r6, r2
    b392:	eb75 0e03 	sbcs.w	lr, r5, r3
    b396:	bf22      	ittt	cs
    b398:	1ab6      	subcs	r6, r6, r2
    b39a:	4675      	movcs	r5, lr
    b39c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b3a0:	ea55 0e06 	orrs.w	lr, r5, r6
    b3a4:	d018      	beq.n	b3d8 <__aeabi_ddiv+0x114>
    b3a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b3aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b3ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b3b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b3b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b3ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b3be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b3c2:	d1c0      	bne.n	b346 <__aeabi_ddiv+0x82>
    b3c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b3c8:	d10b      	bne.n	b3e2 <__aeabi_ddiv+0x11e>
    b3ca:	ea41 0100 	orr.w	r1, r1, r0
    b3ce:	f04f 0000 	mov.w	r0, #0
    b3d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b3d6:	e7b6      	b.n	b346 <__aeabi_ddiv+0x82>
    b3d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b3dc:	bf04      	itt	eq
    b3de:	4301      	orreq	r1, r0
    b3e0:	2000      	moveq	r0, #0
    b3e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b3e6:	bf88      	it	hi
    b3e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b3ec:	f63f aeaf 	bhi.w	b14e <__aeabi_dmul+0xde>
    b3f0:	ebb5 0c03 	subs.w	ip, r5, r3
    b3f4:	bf04      	itt	eq
    b3f6:	ebb6 0c02 	subseq.w	ip, r6, r2
    b3fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b3fe:	f150 0000 	adcs.w	r0, r0, #0
    b402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b406:	bd70      	pop	{r4, r5, r6, pc}
    b408:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b40c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b410:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b414:	bfc2      	ittt	gt
    b416:	ebd4 050c 	rsbsgt	r5, r4, ip
    b41a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b41e:	bd70      	popgt	{r4, r5, r6, pc}
    b420:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b424:	f04f 0e00 	mov.w	lr, #0
    b428:	3c01      	subs	r4, #1
    b42a:	e690      	b.n	b14e <__aeabi_dmul+0xde>
    b42c:	ea45 0e06 	orr.w	lr, r5, r6
    b430:	e68d      	b.n	b14e <__aeabi_dmul+0xde>
    b432:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b436:	ea94 0f0c 	teq	r4, ip
    b43a:	bf08      	it	eq
    b43c:	ea95 0f0c 	teqeq	r5, ip
    b440:	f43f af3b 	beq.w	b2ba <__aeabi_dmul+0x24a>
    b444:	ea94 0f0c 	teq	r4, ip
    b448:	d10a      	bne.n	b460 <__aeabi_ddiv+0x19c>
    b44a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b44e:	f47f af34 	bne.w	b2ba <__aeabi_dmul+0x24a>
    b452:	ea95 0f0c 	teq	r5, ip
    b456:	f47f af25 	bne.w	b2a4 <__aeabi_dmul+0x234>
    b45a:	4610      	mov	r0, r2
    b45c:	4619      	mov	r1, r3
    b45e:	e72c      	b.n	b2ba <__aeabi_dmul+0x24a>
    b460:	ea95 0f0c 	teq	r5, ip
    b464:	d106      	bne.n	b474 <__aeabi_ddiv+0x1b0>
    b466:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b46a:	f43f aefd 	beq.w	b268 <__aeabi_dmul+0x1f8>
    b46e:	4610      	mov	r0, r2
    b470:	4619      	mov	r1, r3
    b472:	e722      	b.n	b2ba <__aeabi_dmul+0x24a>
    b474:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b478:	bf18      	it	ne
    b47a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b47e:	f47f aec5 	bne.w	b20c <__aeabi_dmul+0x19c>
    b482:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b486:	f47f af0d 	bne.w	b2a4 <__aeabi_dmul+0x234>
    b48a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b48e:	f47f aeeb 	bne.w	b268 <__aeabi_dmul+0x1f8>
    b492:	e712      	b.n	b2ba <__aeabi_dmul+0x24a>

0000b494 <__aeabi_d2uiz>:
    b494:	004a      	lsls	r2, r1, #1
    b496:	d211      	bcs.n	b4bc <__aeabi_d2uiz+0x28>
    b498:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b49c:	d211      	bcs.n	b4c2 <__aeabi_d2uiz+0x2e>
    b49e:	d50d      	bpl.n	b4bc <__aeabi_d2uiz+0x28>
    b4a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b4a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b4a8:	d40e      	bmi.n	b4c8 <__aeabi_d2uiz+0x34>
    b4aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b4ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b4b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b4b6:	fa23 f002 	lsr.w	r0, r3, r2
    b4ba:	4770      	bx	lr
    b4bc:	f04f 0000 	mov.w	r0, #0
    b4c0:	4770      	bx	lr
    b4c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b4c6:	d102      	bne.n	b4ce <__aeabi_d2uiz+0x3a>
    b4c8:	f04f 30ff 	mov.w	r0, #4294967295
    b4cc:	4770      	bx	lr
    b4ce:	f04f 0000 	mov.w	r0, #0
    b4d2:	4770      	bx	lr

0000b4d4 <__libc_init_array>:
    b4d4:	b570      	push	{r4, r5, r6, lr}
    b4d6:	4e0d      	ldr	r6, [pc, #52]	; (b50c <__libc_init_array+0x38>)
    b4d8:	4c0d      	ldr	r4, [pc, #52]	; (b510 <__libc_init_array+0x3c>)
    b4da:	1ba4      	subs	r4, r4, r6
    b4dc:	10a4      	asrs	r4, r4, #2
    b4de:	2500      	movs	r5, #0
    b4e0:	42a5      	cmp	r5, r4
    b4e2:	d109      	bne.n	b4f8 <__libc_init_array+0x24>
    b4e4:	4e0b      	ldr	r6, [pc, #44]	; (b514 <__libc_init_array+0x40>)
    b4e6:	4c0c      	ldr	r4, [pc, #48]	; (b518 <__libc_init_array+0x44>)
    b4e8:	f001 fc36 	bl	cd58 <_init>
    b4ec:	1ba4      	subs	r4, r4, r6
    b4ee:	10a4      	asrs	r4, r4, #2
    b4f0:	2500      	movs	r5, #0
    b4f2:	42a5      	cmp	r5, r4
    b4f4:	d105      	bne.n	b502 <__libc_init_array+0x2e>
    b4f6:	bd70      	pop	{r4, r5, r6, pc}
    b4f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b4fc:	4798      	blx	r3
    b4fe:	3501      	adds	r5, #1
    b500:	e7ee      	b.n	b4e0 <__libc_init_array+0xc>
    b502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b506:	4798      	blx	r3
    b508:	3501      	adds	r5, #1
    b50a:	e7f2      	b.n	b4f2 <__libc_init_array+0x1e>
    b50c:	0000cd64 	.word	0x0000cd64
    b510:	0000cd64 	.word	0x0000cd64
    b514:	0000cd64 	.word	0x0000cd64
    b518:	0000cd68 	.word	0x0000cd68

0000b51c <malloc>:
    b51c:	4b02      	ldr	r3, [pc, #8]	; (b528 <malloc+0xc>)
    b51e:	4601      	mov	r1, r0
    b520:	6818      	ldr	r0, [r3, #0]
    b522:	f000 b865 	b.w	b5f0 <_malloc_r>
    b526:	bf00      	nop
    b528:	2000005c 	.word	0x2000005c

0000b52c <memcpy>:
    b52c:	b510      	push	{r4, lr}
    b52e:	1e43      	subs	r3, r0, #1
    b530:	440a      	add	r2, r1
    b532:	4291      	cmp	r1, r2
    b534:	d100      	bne.n	b538 <memcpy+0xc>
    b536:	bd10      	pop	{r4, pc}
    b538:	f811 4b01 	ldrb.w	r4, [r1], #1
    b53c:	f803 4f01 	strb.w	r4, [r3, #1]!
    b540:	e7f7      	b.n	b532 <memcpy+0x6>

0000b542 <memset>:
    b542:	4402      	add	r2, r0
    b544:	4603      	mov	r3, r0
    b546:	4293      	cmp	r3, r2
    b548:	d100      	bne.n	b54c <memset+0xa>
    b54a:	4770      	bx	lr
    b54c:	f803 1b01 	strb.w	r1, [r3], #1
    b550:	e7f9      	b.n	b546 <memset+0x4>
	...

0000b554 <_free_r>:
    b554:	b538      	push	{r3, r4, r5, lr}
    b556:	4605      	mov	r5, r0
    b558:	2900      	cmp	r1, #0
    b55a:	d045      	beq.n	b5e8 <_free_r+0x94>
    b55c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b560:	1f0c      	subs	r4, r1, #4
    b562:	2b00      	cmp	r3, #0
    b564:	bfb8      	it	lt
    b566:	18e4      	addlt	r4, r4, r3
    b568:	f000 fc58 	bl	be1c <__malloc_lock>
    b56c:	4a1f      	ldr	r2, [pc, #124]	; (b5ec <_free_r+0x98>)
    b56e:	6813      	ldr	r3, [r2, #0]
    b570:	4610      	mov	r0, r2
    b572:	b933      	cbnz	r3, b582 <_free_r+0x2e>
    b574:	6063      	str	r3, [r4, #4]
    b576:	6014      	str	r4, [r2, #0]
    b578:	4628      	mov	r0, r5
    b57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b57e:	f000 bc4e 	b.w	be1e <__malloc_unlock>
    b582:	42a3      	cmp	r3, r4
    b584:	d90c      	bls.n	b5a0 <_free_r+0x4c>
    b586:	6821      	ldr	r1, [r4, #0]
    b588:	1862      	adds	r2, r4, r1
    b58a:	4293      	cmp	r3, r2
    b58c:	bf04      	itt	eq
    b58e:	681a      	ldreq	r2, [r3, #0]
    b590:	685b      	ldreq	r3, [r3, #4]
    b592:	6063      	str	r3, [r4, #4]
    b594:	bf04      	itt	eq
    b596:	1852      	addeq	r2, r2, r1
    b598:	6022      	streq	r2, [r4, #0]
    b59a:	6004      	str	r4, [r0, #0]
    b59c:	e7ec      	b.n	b578 <_free_r+0x24>
    b59e:	4613      	mov	r3, r2
    b5a0:	685a      	ldr	r2, [r3, #4]
    b5a2:	b10a      	cbz	r2, b5a8 <_free_r+0x54>
    b5a4:	42a2      	cmp	r2, r4
    b5a6:	d9fa      	bls.n	b59e <_free_r+0x4a>
    b5a8:	6819      	ldr	r1, [r3, #0]
    b5aa:	1858      	adds	r0, r3, r1
    b5ac:	42a0      	cmp	r0, r4
    b5ae:	d10b      	bne.n	b5c8 <_free_r+0x74>
    b5b0:	6820      	ldr	r0, [r4, #0]
    b5b2:	4401      	add	r1, r0
    b5b4:	1858      	adds	r0, r3, r1
    b5b6:	4282      	cmp	r2, r0
    b5b8:	6019      	str	r1, [r3, #0]
    b5ba:	d1dd      	bne.n	b578 <_free_r+0x24>
    b5bc:	6810      	ldr	r0, [r2, #0]
    b5be:	6852      	ldr	r2, [r2, #4]
    b5c0:	605a      	str	r2, [r3, #4]
    b5c2:	4401      	add	r1, r0
    b5c4:	6019      	str	r1, [r3, #0]
    b5c6:	e7d7      	b.n	b578 <_free_r+0x24>
    b5c8:	d902      	bls.n	b5d0 <_free_r+0x7c>
    b5ca:	230c      	movs	r3, #12
    b5cc:	602b      	str	r3, [r5, #0]
    b5ce:	e7d3      	b.n	b578 <_free_r+0x24>
    b5d0:	6820      	ldr	r0, [r4, #0]
    b5d2:	1821      	adds	r1, r4, r0
    b5d4:	428a      	cmp	r2, r1
    b5d6:	bf04      	itt	eq
    b5d8:	6811      	ldreq	r1, [r2, #0]
    b5da:	6852      	ldreq	r2, [r2, #4]
    b5dc:	6062      	str	r2, [r4, #4]
    b5de:	bf04      	itt	eq
    b5e0:	1809      	addeq	r1, r1, r0
    b5e2:	6021      	streq	r1, [r4, #0]
    b5e4:	605c      	str	r4, [r3, #4]
    b5e6:	e7c7      	b.n	b578 <_free_r+0x24>
    b5e8:	bd38      	pop	{r3, r4, r5, pc}
    b5ea:	bf00      	nop
    b5ec:	2000093c 	.word	0x2000093c

0000b5f0 <_malloc_r>:
    b5f0:	b570      	push	{r4, r5, r6, lr}
    b5f2:	1ccd      	adds	r5, r1, #3
    b5f4:	f025 0503 	bic.w	r5, r5, #3
    b5f8:	3508      	adds	r5, #8
    b5fa:	2d0c      	cmp	r5, #12
    b5fc:	bf38      	it	cc
    b5fe:	250c      	movcc	r5, #12
    b600:	2d00      	cmp	r5, #0
    b602:	4606      	mov	r6, r0
    b604:	db01      	blt.n	b60a <_malloc_r+0x1a>
    b606:	42a9      	cmp	r1, r5
    b608:	d903      	bls.n	b612 <_malloc_r+0x22>
    b60a:	230c      	movs	r3, #12
    b60c:	6033      	str	r3, [r6, #0]
    b60e:	2000      	movs	r0, #0
    b610:	bd70      	pop	{r4, r5, r6, pc}
    b612:	f000 fc03 	bl	be1c <__malloc_lock>
    b616:	4a23      	ldr	r2, [pc, #140]	; (b6a4 <_malloc_r+0xb4>)
    b618:	6814      	ldr	r4, [r2, #0]
    b61a:	4621      	mov	r1, r4
    b61c:	b991      	cbnz	r1, b644 <_malloc_r+0x54>
    b61e:	4c22      	ldr	r4, [pc, #136]	; (b6a8 <_malloc_r+0xb8>)
    b620:	6823      	ldr	r3, [r4, #0]
    b622:	b91b      	cbnz	r3, b62c <_malloc_r+0x3c>
    b624:	4630      	mov	r0, r6
    b626:	f000 f893 	bl	b750 <_sbrk_r>
    b62a:	6020      	str	r0, [r4, #0]
    b62c:	4629      	mov	r1, r5
    b62e:	4630      	mov	r0, r6
    b630:	f000 f88e 	bl	b750 <_sbrk_r>
    b634:	1c43      	adds	r3, r0, #1
    b636:	d126      	bne.n	b686 <_malloc_r+0x96>
    b638:	230c      	movs	r3, #12
    b63a:	6033      	str	r3, [r6, #0]
    b63c:	4630      	mov	r0, r6
    b63e:	f000 fbee 	bl	be1e <__malloc_unlock>
    b642:	e7e4      	b.n	b60e <_malloc_r+0x1e>
    b644:	680b      	ldr	r3, [r1, #0]
    b646:	1b5b      	subs	r3, r3, r5
    b648:	d41a      	bmi.n	b680 <_malloc_r+0x90>
    b64a:	2b0b      	cmp	r3, #11
    b64c:	d90f      	bls.n	b66e <_malloc_r+0x7e>
    b64e:	600b      	str	r3, [r1, #0]
    b650:	50cd      	str	r5, [r1, r3]
    b652:	18cc      	adds	r4, r1, r3
    b654:	4630      	mov	r0, r6
    b656:	f000 fbe2 	bl	be1e <__malloc_unlock>
    b65a:	f104 000b 	add.w	r0, r4, #11
    b65e:	1d23      	adds	r3, r4, #4
    b660:	f020 0007 	bic.w	r0, r0, #7
    b664:	1ac3      	subs	r3, r0, r3
    b666:	d01b      	beq.n	b6a0 <_malloc_r+0xb0>
    b668:	425a      	negs	r2, r3
    b66a:	50e2      	str	r2, [r4, r3]
    b66c:	bd70      	pop	{r4, r5, r6, pc}
    b66e:	428c      	cmp	r4, r1
    b670:	bf0d      	iteet	eq
    b672:	6863      	ldreq	r3, [r4, #4]
    b674:	684b      	ldrne	r3, [r1, #4]
    b676:	6063      	strne	r3, [r4, #4]
    b678:	6013      	streq	r3, [r2, #0]
    b67a:	bf18      	it	ne
    b67c:	460c      	movne	r4, r1
    b67e:	e7e9      	b.n	b654 <_malloc_r+0x64>
    b680:	460c      	mov	r4, r1
    b682:	6849      	ldr	r1, [r1, #4]
    b684:	e7ca      	b.n	b61c <_malloc_r+0x2c>
    b686:	1cc4      	adds	r4, r0, #3
    b688:	f024 0403 	bic.w	r4, r4, #3
    b68c:	42a0      	cmp	r0, r4
    b68e:	d005      	beq.n	b69c <_malloc_r+0xac>
    b690:	1a21      	subs	r1, r4, r0
    b692:	4630      	mov	r0, r6
    b694:	f000 f85c 	bl	b750 <_sbrk_r>
    b698:	3001      	adds	r0, #1
    b69a:	d0cd      	beq.n	b638 <_malloc_r+0x48>
    b69c:	6025      	str	r5, [r4, #0]
    b69e:	e7d9      	b.n	b654 <_malloc_r+0x64>
    b6a0:	bd70      	pop	{r4, r5, r6, pc}
    b6a2:	bf00      	nop
    b6a4:	2000093c 	.word	0x2000093c
    b6a8:	20000940 	.word	0x20000940

0000b6ac <iprintf>:
    b6ac:	b40f      	push	{r0, r1, r2, r3}
    b6ae:	4b0a      	ldr	r3, [pc, #40]	; (b6d8 <iprintf+0x2c>)
    b6b0:	b513      	push	{r0, r1, r4, lr}
    b6b2:	681c      	ldr	r4, [r3, #0]
    b6b4:	b124      	cbz	r4, b6c0 <iprintf+0x14>
    b6b6:	69a3      	ldr	r3, [r4, #24]
    b6b8:	b913      	cbnz	r3, b6c0 <iprintf+0x14>
    b6ba:	4620      	mov	r0, r4
    b6bc:	f000 fac0 	bl	bc40 <__sinit>
    b6c0:	ab05      	add	r3, sp, #20
    b6c2:	9a04      	ldr	r2, [sp, #16]
    b6c4:	68a1      	ldr	r1, [r4, #8]
    b6c6:	9301      	str	r3, [sp, #4]
    b6c8:	4620      	mov	r0, r4
    b6ca:	f000 fbd1 	bl	be70 <_vfiprintf_r>
    b6ce:	b002      	add	sp, #8
    b6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6d4:	b004      	add	sp, #16
    b6d6:	4770      	bx	lr
    b6d8:	2000005c 	.word	0x2000005c

0000b6dc <rand>:
    b6dc:	4b19      	ldr	r3, [pc, #100]	; (b744 <rand+0x68>)
    b6de:	b510      	push	{r4, lr}
    b6e0:	681c      	ldr	r4, [r3, #0]
    b6e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b6e4:	b9d3      	cbnz	r3, b71c <rand+0x40>
    b6e6:	2018      	movs	r0, #24
    b6e8:	f7ff ff18 	bl	b51c <malloc>
    b6ec:	f243 330e 	movw	r3, #13070	; 0x330e
    b6f0:	63a0      	str	r0, [r4, #56]	; 0x38
    b6f2:	8003      	strh	r3, [r0, #0]
    b6f4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    b6f8:	8043      	strh	r3, [r0, #2]
    b6fa:	f241 2334 	movw	r3, #4660	; 0x1234
    b6fe:	8083      	strh	r3, [r0, #4]
    b700:	f24e 636d 	movw	r3, #58989	; 0xe66d
    b704:	80c3      	strh	r3, [r0, #6]
    b706:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    b70a:	8103      	strh	r3, [r0, #8]
    b70c:	2305      	movs	r3, #5
    b70e:	8143      	strh	r3, [r0, #10]
    b710:	230b      	movs	r3, #11
    b712:	8183      	strh	r3, [r0, #12]
    b714:	2201      	movs	r2, #1
    b716:	2300      	movs	r3, #0
    b718:	e9c0 2304 	strd	r2, r3, [r0, #16]
    b71c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    b71e:	480a      	ldr	r0, [pc, #40]	; (b748 <rand+0x6c>)
    b720:	690a      	ldr	r2, [r1, #16]
    b722:	694b      	ldr	r3, [r1, #20]
    b724:	4c09      	ldr	r4, [pc, #36]	; (b74c <rand+0x70>)
    b726:	4350      	muls	r0, r2
    b728:	fb04 0003 	mla	r0, r4, r3, r0
    b72c:	fba2 2304 	umull	r2, r3, r2, r4
    b730:	3201      	adds	r2, #1
    b732:	4403      	add	r3, r0
    b734:	f143 0300 	adc.w	r3, r3, #0
    b738:	e9c1 2304 	strd	r2, r3, [r1, #16]
    b73c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    b740:	bd10      	pop	{r4, pc}
    b742:	bf00      	nop
    b744:	2000005c 	.word	0x2000005c
    b748:	5851f42d 	.word	0x5851f42d
    b74c:	4c957f2d 	.word	0x4c957f2d

0000b750 <_sbrk_r>:
    b750:	b538      	push	{r3, r4, r5, lr}
    b752:	4c06      	ldr	r4, [pc, #24]	; (b76c <_sbrk_r+0x1c>)
    b754:	2300      	movs	r3, #0
    b756:	4605      	mov	r5, r0
    b758:	4608      	mov	r0, r1
    b75a:	6023      	str	r3, [r4, #0]
    b75c:	f7fb fa2a 	bl	6bb4 <_sbrk>
    b760:	1c43      	adds	r3, r0, #1
    b762:	d102      	bne.n	b76a <_sbrk_r+0x1a>
    b764:	6823      	ldr	r3, [r4, #0]
    b766:	b103      	cbz	r3, b76a <_sbrk_r+0x1a>
    b768:	602b      	str	r3, [r5, #0]
    b76a:	bd38      	pop	{r3, r4, r5, pc}
    b76c:	200076a0 	.word	0x200076a0

0000b770 <setbuf>:
    b770:	2900      	cmp	r1, #0
    b772:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b776:	bf0c      	ite	eq
    b778:	2202      	moveq	r2, #2
    b77a:	2200      	movne	r2, #0
    b77c:	f000 b800 	b.w	b780 <setvbuf>

0000b780 <setvbuf>:
    b780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b784:	461d      	mov	r5, r3
    b786:	4b51      	ldr	r3, [pc, #324]	; (b8cc <setvbuf+0x14c>)
    b788:	681e      	ldr	r6, [r3, #0]
    b78a:	4604      	mov	r4, r0
    b78c:	460f      	mov	r7, r1
    b78e:	4690      	mov	r8, r2
    b790:	b126      	cbz	r6, b79c <setvbuf+0x1c>
    b792:	69b3      	ldr	r3, [r6, #24]
    b794:	b913      	cbnz	r3, b79c <setvbuf+0x1c>
    b796:	4630      	mov	r0, r6
    b798:	f000 fa52 	bl	bc40 <__sinit>
    b79c:	4b4c      	ldr	r3, [pc, #304]	; (b8d0 <setvbuf+0x150>)
    b79e:	429c      	cmp	r4, r3
    b7a0:	d152      	bne.n	b848 <setvbuf+0xc8>
    b7a2:	6874      	ldr	r4, [r6, #4]
    b7a4:	f1b8 0f02 	cmp.w	r8, #2
    b7a8:	d006      	beq.n	b7b8 <setvbuf+0x38>
    b7aa:	f1b8 0f01 	cmp.w	r8, #1
    b7ae:	f200 8089 	bhi.w	b8c4 <setvbuf+0x144>
    b7b2:	2d00      	cmp	r5, #0
    b7b4:	f2c0 8086 	blt.w	b8c4 <setvbuf+0x144>
    b7b8:	4621      	mov	r1, r4
    b7ba:	4630      	mov	r0, r6
    b7bc:	f000 f9d6 	bl	bb6c <_fflush_r>
    b7c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b7c2:	b141      	cbz	r1, b7d6 <setvbuf+0x56>
    b7c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b7c8:	4299      	cmp	r1, r3
    b7ca:	d002      	beq.n	b7d2 <setvbuf+0x52>
    b7cc:	4630      	mov	r0, r6
    b7ce:	f7ff fec1 	bl	b554 <_free_r>
    b7d2:	2300      	movs	r3, #0
    b7d4:	6363      	str	r3, [r4, #52]	; 0x34
    b7d6:	2300      	movs	r3, #0
    b7d8:	61a3      	str	r3, [r4, #24]
    b7da:	6063      	str	r3, [r4, #4]
    b7dc:	89a3      	ldrh	r3, [r4, #12]
    b7de:	061b      	lsls	r3, r3, #24
    b7e0:	d503      	bpl.n	b7ea <setvbuf+0x6a>
    b7e2:	6921      	ldr	r1, [r4, #16]
    b7e4:	4630      	mov	r0, r6
    b7e6:	f7ff feb5 	bl	b554 <_free_r>
    b7ea:	89a3      	ldrh	r3, [r4, #12]
    b7ec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    b7f0:	f023 0303 	bic.w	r3, r3, #3
    b7f4:	f1b8 0f02 	cmp.w	r8, #2
    b7f8:	81a3      	strh	r3, [r4, #12]
    b7fa:	d05d      	beq.n	b8b8 <setvbuf+0x138>
    b7fc:	ab01      	add	r3, sp, #4
    b7fe:	466a      	mov	r2, sp
    b800:	4621      	mov	r1, r4
    b802:	4630      	mov	r0, r6
    b804:	f000 faa6 	bl	bd54 <__swhatbuf_r>
    b808:	89a3      	ldrh	r3, [r4, #12]
    b80a:	4318      	orrs	r0, r3
    b80c:	81a0      	strh	r0, [r4, #12]
    b80e:	bb2d      	cbnz	r5, b85c <setvbuf+0xdc>
    b810:	9d00      	ldr	r5, [sp, #0]
    b812:	4628      	mov	r0, r5
    b814:	f7ff fe82 	bl	b51c <malloc>
    b818:	4607      	mov	r7, r0
    b81a:	2800      	cmp	r0, #0
    b81c:	d14e      	bne.n	b8bc <setvbuf+0x13c>
    b81e:	f8dd 9000 	ldr.w	r9, [sp]
    b822:	45a9      	cmp	r9, r5
    b824:	d13c      	bne.n	b8a0 <setvbuf+0x120>
    b826:	f04f 30ff 	mov.w	r0, #4294967295
    b82a:	89a3      	ldrh	r3, [r4, #12]
    b82c:	f043 0302 	orr.w	r3, r3, #2
    b830:	81a3      	strh	r3, [r4, #12]
    b832:	2300      	movs	r3, #0
    b834:	60a3      	str	r3, [r4, #8]
    b836:	f104 0347 	add.w	r3, r4, #71	; 0x47
    b83a:	6023      	str	r3, [r4, #0]
    b83c:	6123      	str	r3, [r4, #16]
    b83e:	2301      	movs	r3, #1
    b840:	6163      	str	r3, [r4, #20]
    b842:	b003      	add	sp, #12
    b844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b848:	4b22      	ldr	r3, [pc, #136]	; (b8d4 <setvbuf+0x154>)
    b84a:	429c      	cmp	r4, r3
    b84c:	d101      	bne.n	b852 <setvbuf+0xd2>
    b84e:	68b4      	ldr	r4, [r6, #8]
    b850:	e7a8      	b.n	b7a4 <setvbuf+0x24>
    b852:	4b21      	ldr	r3, [pc, #132]	; (b8d8 <setvbuf+0x158>)
    b854:	429c      	cmp	r4, r3
    b856:	bf08      	it	eq
    b858:	68f4      	ldreq	r4, [r6, #12]
    b85a:	e7a3      	b.n	b7a4 <setvbuf+0x24>
    b85c:	2f00      	cmp	r7, #0
    b85e:	d0d8      	beq.n	b812 <setvbuf+0x92>
    b860:	69b3      	ldr	r3, [r6, #24]
    b862:	b913      	cbnz	r3, b86a <setvbuf+0xea>
    b864:	4630      	mov	r0, r6
    b866:	f000 f9eb 	bl	bc40 <__sinit>
    b86a:	f1b8 0f01 	cmp.w	r8, #1
    b86e:	bf08      	it	eq
    b870:	89a3      	ldrheq	r3, [r4, #12]
    b872:	6027      	str	r7, [r4, #0]
    b874:	bf04      	itt	eq
    b876:	f043 0301 	orreq.w	r3, r3, #1
    b87a:	81a3      	strheq	r3, [r4, #12]
    b87c:	89a3      	ldrh	r3, [r4, #12]
    b87e:	6127      	str	r7, [r4, #16]
    b880:	f013 0008 	ands.w	r0, r3, #8
    b884:	6165      	str	r5, [r4, #20]
    b886:	d01b      	beq.n	b8c0 <setvbuf+0x140>
    b888:	f013 0001 	ands.w	r0, r3, #1
    b88c:	bf18      	it	ne
    b88e:	426d      	negne	r5, r5
    b890:	f04f 0300 	mov.w	r3, #0
    b894:	bf1d      	ittte	ne
    b896:	60a3      	strne	r3, [r4, #8]
    b898:	61a5      	strne	r5, [r4, #24]
    b89a:	4618      	movne	r0, r3
    b89c:	60a5      	streq	r5, [r4, #8]
    b89e:	e7d0      	b.n	b842 <setvbuf+0xc2>
    b8a0:	4648      	mov	r0, r9
    b8a2:	f7ff fe3b 	bl	b51c <malloc>
    b8a6:	4607      	mov	r7, r0
    b8a8:	2800      	cmp	r0, #0
    b8aa:	d0bc      	beq.n	b826 <setvbuf+0xa6>
    b8ac:	89a3      	ldrh	r3, [r4, #12]
    b8ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b8b2:	81a3      	strh	r3, [r4, #12]
    b8b4:	464d      	mov	r5, r9
    b8b6:	e7d3      	b.n	b860 <setvbuf+0xe0>
    b8b8:	2000      	movs	r0, #0
    b8ba:	e7b6      	b.n	b82a <setvbuf+0xaa>
    b8bc:	46a9      	mov	r9, r5
    b8be:	e7f5      	b.n	b8ac <setvbuf+0x12c>
    b8c0:	60a0      	str	r0, [r4, #8]
    b8c2:	e7be      	b.n	b842 <setvbuf+0xc2>
    b8c4:	f04f 30ff 	mov.w	r0, #4294967295
    b8c8:	e7bb      	b.n	b842 <setvbuf+0xc2>
    b8ca:	bf00      	nop
    b8cc:	2000005c 	.word	0x2000005c
    b8d0:	0000cce4 	.word	0x0000cce4
    b8d4:	0000cd04 	.word	0x0000cd04
    b8d8:	0000ccc4 	.word	0x0000ccc4

0000b8dc <__swbuf_r>:
    b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8de:	460e      	mov	r6, r1
    b8e0:	4614      	mov	r4, r2
    b8e2:	4605      	mov	r5, r0
    b8e4:	b118      	cbz	r0, b8ee <__swbuf_r+0x12>
    b8e6:	6983      	ldr	r3, [r0, #24]
    b8e8:	b90b      	cbnz	r3, b8ee <__swbuf_r+0x12>
    b8ea:	f000 f9a9 	bl	bc40 <__sinit>
    b8ee:	4b21      	ldr	r3, [pc, #132]	; (b974 <__swbuf_r+0x98>)
    b8f0:	429c      	cmp	r4, r3
    b8f2:	d12a      	bne.n	b94a <__swbuf_r+0x6e>
    b8f4:	686c      	ldr	r4, [r5, #4]
    b8f6:	69a3      	ldr	r3, [r4, #24]
    b8f8:	60a3      	str	r3, [r4, #8]
    b8fa:	89a3      	ldrh	r3, [r4, #12]
    b8fc:	071a      	lsls	r2, r3, #28
    b8fe:	d52e      	bpl.n	b95e <__swbuf_r+0x82>
    b900:	6923      	ldr	r3, [r4, #16]
    b902:	b363      	cbz	r3, b95e <__swbuf_r+0x82>
    b904:	6923      	ldr	r3, [r4, #16]
    b906:	6820      	ldr	r0, [r4, #0]
    b908:	1ac0      	subs	r0, r0, r3
    b90a:	6963      	ldr	r3, [r4, #20]
    b90c:	b2f6      	uxtb	r6, r6
    b90e:	4298      	cmp	r0, r3
    b910:	4637      	mov	r7, r6
    b912:	db04      	blt.n	b91e <__swbuf_r+0x42>
    b914:	4621      	mov	r1, r4
    b916:	4628      	mov	r0, r5
    b918:	f000 f928 	bl	bb6c <_fflush_r>
    b91c:	bb28      	cbnz	r0, b96a <__swbuf_r+0x8e>
    b91e:	68a3      	ldr	r3, [r4, #8]
    b920:	3b01      	subs	r3, #1
    b922:	60a3      	str	r3, [r4, #8]
    b924:	6823      	ldr	r3, [r4, #0]
    b926:	1c5a      	adds	r2, r3, #1
    b928:	6022      	str	r2, [r4, #0]
    b92a:	701e      	strb	r6, [r3, #0]
    b92c:	6963      	ldr	r3, [r4, #20]
    b92e:	3001      	adds	r0, #1
    b930:	4298      	cmp	r0, r3
    b932:	d004      	beq.n	b93e <__swbuf_r+0x62>
    b934:	89a3      	ldrh	r3, [r4, #12]
    b936:	07db      	lsls	r3, r3, #31
    b938:	d519      	bpl.n	b96e <__swbuf_r+0x92>
    b93a:	2e0a      	cmp	r6, #10
    b93c:	d117      	bne.n	b96e <__swbuf_r+0x92>
    b93e:	4621      	mov	r1, r4
    b940:	4628      	mov	r0, r5
    b942:	f000 f913 	bl	bb6c <_fflush_r>
    b946:	b190      	cbz	r0, b96e <__swbuf_r+0x92>
    b948:	e00f      	b.n	b96a <__swbuf_r+0x8e>
    b94a:	4b0b      	ldr	r3, [pc, #44]	; (b978 <__swbuf_r+0x9c>)
    b94c:	429c      	cmp	r4, r3
    b94e:	d101      	bne.n	b954 <__swbuf_r+0x78>
    b950:	68ac      	ldr	r4, [r5, #8]
    b952:	e7d0      	b.n	b8f6 <__swbuf_r+0x1a>
    b954:	4b09      	ldr	r3, [pc, #36]	; (b97c <__swbuf_r+0xa0>)
    b956:	429c      	cmp	r4, r3
    b958:	bf08      	it	eq
    b95a:	68ec      	ldreq	r4, [r5, #12]
    b95c:	e7cb      	b.n	b8f6 <__swbuf_r+0x1a>
    b95e:	4621      	mov	r1, r4
    b960:	4628      	mov	r0, r5
    b962:	f000 f80d 	bl	b980 <__swsetup_r>
    b966:	2800      	cmp	r0, #0
    b968:	d0cc      	beq.n	b904 <__swbuf_r+0x28>
    b96a:	f04f 37ff 	mov.w	r7, #4294967295
    b96e:	4638      	mov	r0, r7
    b970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b972:	bf00      	nop
    b974:	0000cce4 	.word	0x0000cce4
    b978:	0000cd04 	.word	0x0000cd04
    b97c:	0000ccc4 	.word	0x0000ccc4

0000b980 <__swsetup_r>:
    b980:	4b32      	ldr	r3, [pc, #200]	; (ba4c <__swsetup_r+0xcc>)
    b982:	b570      	push	{r4, r5, r6, lr}
    b984:	681d      	ldr	r5, [r3, #0]
    b986:	4606      	mov	r6, r0
    b988:	460c      	mov	r4, r1
    b98a:	b125      	cbz	r5, b996 <__swsetup_r+0x16>
    b98c:	69ab      	ldr	r3, [r5, #24]
    b98e:	b913      	cbnz	r3, b996 <__swsetup_r+0x16>
    b990:	4628      	mov	r0, r5
    b992:	f000 f955 	bl	bc40 <__sinit>
    b996:	4b2e      	ldr	r3, [pc, #184]	; (ba50 <__swsetup_r+0xd0>)
    b998:	429c      	cmp	r4, r3
    b99a:	d10f      	bne.n	b9bc <__swsetup_r+0x3c>
    b99c:	686c      	ldr	r4, [r5, #4]
    b99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b9a2:	b29a      	uxth	r2, r3
    b9a4:	0715      	lsls	r5, r2, #28
    b9a6:	d42c      	bmi.n	ba02 <__swsetup_r+0x82>
    b9a8:	06d0      	lsls	r0, r2, #27
    b9aa:	d411      	bmi.n	b9d0 <__swsetup_r+0x50>
    b9ac:	2209      	movs	r2, #9
    b9ae:	6032      	str	r2, [r6, #0]
    b9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b9b4:	81a3      	strh	r3, [r4, #12]
    b9b6:	f04f 30ff 	mov.w	r0, #4294967295
    b9ba:	bd70      	pop	{r4, r5, r6, pc}
    b9bc:	4b25      	ldr	r3, [pc, #148]	; (ba54 <__swsetup_r+0xd4>)
    b9be:	429c      	cmp	r4, r3
    b9c0:	d101      	bne.n	b9c6 <__swsetup_r+0x46>
    b9c2:	68ac      	ldr	r4, [r5, #8]
    b9c4:	e7eb      	b.n	b99e <__swsetup_r+0x1e>
    b9c6:	4b24      	ldr	r3, [pc, #144]	; (ba58 <__swsetup_r+0xd8>)
    b9c8:	429c      	cmp	r4, r3
    b9ca:	bf08      	it	eq
    b9cc:	68ec      	ldreq	r4, [r5, #12]
    b9ce:	e7e6      	b.n	b99e <__swsetup_r+0x1e>
    b9d0:	0751      	lsls	r1, r2, #29
    b9d2:	d512      	bpl.n	b9fa <__swsetup_r+0x7a>
    b9d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b9d6:	b141      	cbz	r1, b9ea <__swsetup_r+0x6a>
    b9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b9dc:	4299      	cmp	r1, r3
    b9de:	d002      	beq.n	b9e6 <__swsetup_r+0x66>
    b9e0:	4630      	mov	r0, r6
    b9e2:	f7ff fdb7 	bl	b554 <_free_r>
    b9e6:	2300      	movs	r3, #0
    b9e8:	6363      	str	r3, [r4, #52]	; 0x34
    b9ea:	89a3      	ldrh	r3, [r4, #12]
    b9ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    b9f0:	81a3      	strh	r3, [r4, #12]
    b9f2:	2300      	movs	r3, #0
    b9f4:	6063      	str	r3, [r4, #4]
    b9f6:	6923      	ldr	r3, [r4, #16]
    b9f8:	6023      	str	r3, [r4, #0]
    b9fa:	89a3      	ldrh	r3, [r4, #12]
    b9fc:	f043 0308 	orr.w	r3, r3, #8
    ba00:	81a3      	strh	r3, [r4, #12]
    ba02:	6923      	ldr	r3, [r4, #16]
    ba04:	b94b      	cbnz	r3, ba1a <__swsetup_r+0x9a>
    ba06:	89a3      	ldrh	r3, [r4, #12]
    ba08:	f403 7320 	and.w	r3, r3, #640	; 0x280
    ba0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ba10:	d003      	beq.n	ba1a <__swsetup_r+0x9a>
    ba12:	4621      	mov	r1, r4
    ba14:	4630      	mov	r0, r6
    ba16:	f000 f9c1 	bl	bd9c <__smakebuf_r>
    ba1a:	89a2      	ldrh	r2, [r4, #12]
    ba1c:	f012 0301 	ands.w	r3, r2, #1
    ba20:	d00c      	beq.n	ba3c <__swsetup_r+0xbc>
    ba22:	2300      	movs	r3, #0
    ba24:	60a3      	str	r3, [r4, #8]
    ba26:	6963      	ldr	r3, [r4, #20]
    ba28:	425b      	negs	r3, r3
    ba2a:	61a3      	str	r3, [r4, #24]
    ba2c:	6923      	ldr	r3, [r4, #16]
    ba2e:	b953      	cbnz	r3, ba46 <__swsetup_r+0xc6>
    ba30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ba34:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    ba38:	d1ba      	bne.n	b9b0 <__swsetup_r+0x30>
    ba3a:	bd70      	pop	{r4, r5, r6, pc}
    ba3c:	0792      	lsls	r2, r2, #30
    ba3e:	bf58      	it	pl
    ba40:	6963      	ldrpl	r3, [r4, #20]
    ba42:	60a3      	str	r3, [r4, #8]
    ba44:	e7f2      	b.n	ba2c <__swsetup_r+0xac>
    ba46:	2000      	movs	r0, #0
    ba48:	e7f7      	b.n	ba3a <__swsetup_r+0xba>
    ba4a:	bf00      	nop
    ba4c:	2000005c 	.word	0x2000005c
    ba50:	0000cce4 	.word	0x0000cce4
    ba54:	0000cd04 	.word	0x0000cd04
    ba58:	0000ccc4 	.word	0x0000ccc4

0000ba5c <__sflush_r>:
    ba5c:	898a      	ldrh	r2, [r1, #12]
    ba5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba62:	4605      	mov	r5, r0
    ba64:	0710      	lsls	r0, r2, #28
    ba66:	460c      	mov	r4, r1
    ba68:	d45a      	bmi.n	bb20 <__sflush_r+0xc4>
    ba6a:	684b      	ldr	r3, [r1, #4]
    ba6c:	2b00      	cmp	r3, #0
    ba6e:	dc05      	bgt.n	ba7c <__sflush_r+0x20>
    ba70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    ba72:	2b00      	cmp	r3, #0
    ba74:	dc02      	bgt.n	ba7c <__sflush_r+0x20>
    ba76:	2000      	movs	r0, #0
    ba78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    ba7e:	2e00      	cmp	r6, #0
    ba80:	d0f9      	beq.n	ba76 <__sflush_r+0x1a>
    ba82:	2300      	movs	r3, #0
    ba84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    ba88:	682f      	ldr	r7, [r5, #0]
    ba8a:	602b      	str	r3, [r5, #0]
    ba8c:	d033      	beq.n	baf6 <__sflush_r+0x9a>
    ba8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    ba90:	89a3      	ldrh	r3, [r4, #12]
    ba92:	075a      	lsls	r2, r3, #29
    ba94:	d505      	bpl.n	baa2 <__sflush_r+0x46>
    ba96:	6863      	ldr	r3, [r4, #4]
    ba98:	1ac0      	subs	r0, r0, r3
    ba9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ba9c:	b10b      	cbz	r3, baa2 <__sflush_r+0x46>
    ba9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    baa0:	1ac0      	subs	r0, r0, r3
    baa2:	2300      	movs	r3, #0
    baa4:	4602      	mov	r2, r0
    baa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    baa8:	6a21      	ldr	r1, [r4, #32]
    baaa:	4628      	mov	r0, r5
    baac:	47b0      	blx	r6
    baae:	1c43      	adds	r3, r0, #1
    bab0:	89a3      	ldrh	r3, [r4, #12]
    bab2:	d106      	bne.n	bac2 <__sflush_r+0x66>
    bab4:	6829      	ldr	r1, [r5, #0]
    bab6:	291d      	cmp	r1, #29
    bab8:	d84b      	bhi.n	bb52 <__sflush_r+0xf6>
    baba:	4a2b      	ldr	r2, [pc, #172]	; (bb68 <__sflush_r+0x10c>)
    babc:	40ca      	lsrs	r2, r1
    babe:	07d6      	lsls	r6, r2, #31
    bac0:	d547      	bpl.n	bb52 <__sflush_r+0xf6>
    bac2:	2200      	movs	r2, #0
    bac4:	6062      	str	r2, [r4, #4]
    bac6:	04d9      	lsls	r1, r3, #19
    bac8:	6922      	ldr	r2, [r4, #16]
    baca:	6022      	str	r2, [r4, #0]
    bacc:	d504      	bpl.n	bad8 <__sflush_r+0x7c>
    bace:	1c42      	adds	r2, r0, #1
    bad0:	d101      	bne.n	bad6 <__sflush_r+0x7a>
    bad2:	682b      	ldr	r3, [r5, #0]
    bad4:	b903      	cbnz	r3, bad8 <__sflush_r+0x7c>
    bad6:	6560      	str	r0, [r4, #84]	; 0x54
    bad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bada:	602f      	str	r7, [r5, #0]
    badc:	2900      	cmp	r1, #0
    bade:	d0ca      	beq.n	ba76 <__sflush_r+0x1a>
    bae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    bae4:	4299      	cmp	r1, r3
    bae6:	d002      	beq.n	baee <__sflush_r+0x92>
    bae8:	4628      	mov	r0, r5
    baea:	f7ff fd33 	bl	b554 <_free_r>
    baee:	2000      	movs	r0, #0
    baf0:	6360      	str	r0, [r4, #52]	; 0x34
    baf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    baf6:	6a21      	ldr	r1, [r4, #32]
    baf8:	2301      	movs	r3, #1
    bafa:	4628      	mov	r0, r5
    bafc:	47b0      	blx	r6
    bafe:	1c41      	adds	r1, r0, #1
    bb00:	d1c6      	bne.n	ba90 <__sflush_r+0x34>
    bb02:	682b      	ldr	r3, [r5, #0]
    bb04:	2b00      	cmp	r3, #0
    bb06:	d0c3      	beq.n	ba90 <__sflush_r+0x34>
    bb08:	2b1d      	cmp	r3, #29
    bb0a:	d001      	beq.n	bb10 <__sflush_r+0xb4>
    bb0c:	2b16      	cmp	r3, #22
    bb0e:	d101      	bne.n	bb14 <__sflush_r+0xb8>
    bb10:	602f      	str	r7, [r5, #0]
    bb12:	e7b0      	b.n	ba76 <__sflush_r+0x1a>
    bb14:	89a3      	ldrh	r3, [r4, #12]
    bb16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bb1a:	81a3      	strh	r3, [r4, #12]
    bb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb20:	690f      	ldr	r7, [r1, #16]
    bb22:	2f00      	cmp	r7, #0
    bb24:	d0a7      	beq.n	ba76 <__sflush_r+0x1a>
    bb26:	0793      	lsls	r3, r2, #30
    bb28:	680e      	ldr	r6, [r1, #0]
    bb2a:	bf08      	it	eq
    bb2c:	694b      	ldreq	r3, [r1, #20]
    bb2e:	600f      	str	r7, [r1, #0]
    bb30:	bf18      	it	ne
    bb32:	2300      	movne	r3, #0
    bb34:	eba6 0807 	sub.w	r8, r6, r7
    bb38:	608b      	str	r3, [r1, #8]
    bb3a:	f1b8 0f00 	cmp.w	r8, #0
    bb3e:	dd9a      	ble.n	ba76 <__sflush_r+0x1a>
    bb40:	4643      	mov	r3, r8
    bb42:	463a      	mov	r2, r7
    bb44:	6a21      	ldr	r1, [r4, #32]
    bb46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    bb48:	4628      	mov	r0, r5
    bb4a:	47b0      	blx	r6
    bb4c:	2800      	cmp	r0, #0
    bb4e:	dc07      	bgt.n	bb60 <__sflush_r+0x104>
    bb50:	89a3      	ldrh	r3, [r4, #12]
    bb52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bb56:	81a3      	strh	r3, [r4, #12]
    bb58:	f04f 30ff 	mov.w	r0, #4294967295
    bb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb60:	4407      	add	r7, r0
    bb62:	eba8 0800 	sub.w	r8, r8, r0
    bb66:	e7e8      	b.n	bb3a <__sflush_r+0xde>
    bb68:	20400001 	.word	0x20400001

0000bb6c <_fflush_r>:
    bb6c:	b538      	push	{r3, r4, r5, lr}
    bb6e:	690b      	ldr	r3, [r1, #16]
    bb70:	4605      	mov	r5, r0
    bb72:	460c      	mov	r4, r1
    bb74:	b1db      	cbz	r3, bbae <_fflush_r+0x42>
    bb76:	b118      	cbz	r0, bb80 <_fflush_r+0x14>
    bb78:	6983      	ldr	r3, [r0, #24]
    bb7a:	b90b      	cbnz	r3, bb80 <_fflush_r+0x14>
    bb7c:	f000 f860 	bl	bc40 <__sinit>
    bb80:	4b0c      	ldr	r3, [pc, #48]	; (bbb4 <_fflush_r+0x48>)
    bb82:	429c      	cmp	r4, r3
    bb84:	d109      	bne.n	bb9a <_fflush_r+0x2e>
    bb86:	686c      	ldr	r4, [r5, #4]
    bb88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bb8c:	b17b      	cbz	r3, bbae <_fflush_r+0x42>
    bb8e:	4621      	mov	r1, r4
    bb90:	4628      	mov	r0, r5
    bb92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bb96:	f7ff bf61 	b.w	ba5c <__sflush_r>
    bb9a:	4b07      	ldr	r3, [pc, #28]	; (bbb8 <_fflush_r+0x4c>)
    bb9c:	429c      	cmp	r4, r3
    bb9e:	d101      	bne.n	bba4 <_fflush_r+0x38>
    bba0:	68ac      	ldr	r4, [r5, #8]
    bba2:	e7f1      	b.n	bb88 <_fflush_r+0x1c>
    bba4:	4b05      	ldr	r3, [pc, #20]	; (bbbc <_fflush_r+0x50>)
    bba6:	429c      	cmp	r4, r3
    bba8:	bf08      	it	eq
    bbaa:	68ec      	ldreq	r4, [r5, #12]
    bbac:	e7ec      	b.n	bb88 <_fflush_r+0x1c>
    bbae:	2000      	movs	r0, #0
    bbb0:	bd38      	pop	{r3, r4, r5, pc}
    bbb2:	bf00      	nop
    bbb4:	0000cce4 	.word	0x0000cce4
    bbb8:	0000cd04 	.word	0x0000cd04
    bbbc:	0000ccc4 	.word	0x0000ccc4

0000bbc0 <_cleanup_r>:
    bbc0:	4901      	ldr	r1, [pc, #4]	; (bbc8 <_cleanup_r+0x8>)
    bbc2:	f000 b8a9 	b.w	bd18 <_fwalk_reent>
    bbc6:	bf00      	nop
    bbc8:	0000bb6d 	.word	0x0000bb6d

0000bbcc <std.isra.0>:
    bbcc:	2300      	movs	r3, #0
    bbce:	b510      	push	{r4, lr}
    bbd0:	4604      	mov	r4, r0
    bbd2:	6003      	str	r3, [r0, #0]
    bbd4:	6043      	str	r3, [r0, #4]
    bbd6:	6083      	str	r3, [r0, #8]
    bbd8:	8181      	strh	r1, [r0, #12]
    bbda:	6643      	str	r3, [r0, #100]	; 0x64
    bbdc:	81c2      	strh	r2, [r0, #14]
    bbde:	6103      	str	r3, [r0, #16]
    bbe0:	6143      	str	r3, [r0, #20]
    bbe2:	6183      	str	r3, [r0, #24]
    bbe4:	4619      	mov	r1, r3
    bbe6:	2208      	movs	r2, #8
    bbe8:	305c      	adds	r0, #92	; 0x5c
    bbea:	f7ff fcaa 	bl	b542 <memset>
    bbee:	4b05      	ldr	r3, [pc, #20]	; (bc04 <std.isra.0+0x38>)
    bbf0:	6263      	str	r3, [r4, #36]	; 0x24
    bbf2:	4b05      	ldr	r3, [pc, #20]	; (bc08 <std.isra.0+0x3c>)
    bbf4:	62a3      	str	r3, [r4, #40]	; 0x28
    bbf6:	4b05      	ldr	r3, [pc, #20]	; (bc0c <std.isra.0+0x40>)
    bbf8:	62e3      	str	r3, [r4, #44]	; 0x2c
    bbfa:	4b05      	ldr	r3, [pc, #20]	; (bc10 <std.isra.0+0x44>)
    bbfc:	6224      	str	r4, [r4, #32]
    bbfe:	6323      	str	r3, [r4, #48]	; 0x30
    bc00:	bd10      	pop	{r4, pc}
    bc02:	bf00      	nop
    bc04:	0000c3c9 	.word	0x0000c3c9
    bc08:	0000c3eb 	.word	0x0000c3eb
    bc0c:	0000c423 	.word	0x0000c423
    bc10:	0000c447 	.word	0x0000c447

0000bc14 <__sfmoreglue>:
    bc14:	b570      	push	{r4, r5, r6, lr}
    bc16:	1e4a      	subs	r2, r1, #1
    bc18:	2568      	movs	r5, #104	; 0x68
    bc1a:	4355      	muls	r5, r2
    bc1c:	460e      	mov	r6, r1
    bc1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    bc22:	f7ff fce5 	bl	b5f0 <_malloc_r>
    bc26:	4604      	mov	r4, r0
    bc28:	b140      	cbz	r0, bc3c <__sfmoreglue+0x28>
    bc2a:	2100      	movs	r1, #0
    bc2c:	e880 0042 	stmia.w	r0, {r1, r6}
    bc30:	300c      	adds	r0, #12
    bc32:	60a0      	str	r0, [r4, #8]
    bc34:	f105 0268 	add.w	r2, r5, #104	; 0x68
    bc38:	f7ff fc83 	bl	b542 <memset>
    bc3c:	4620      	mov	r0, r4
    bc3e:	bd70      	pop	{r4, r5, r6, pc}

0000bc40 <__sinit>:
    bc40:	6983      	ldr	r3, [r0, #24]
    bc42:	b510      	push	{r4, lr}
    bc44:	4604      	mov	r4, r0
    bc46:	bb33      	cbnz	r3, bc96 <__sinit+0x56>
    bc48:	6483      	str	r3, [r0, #72]	; 0x48
    bc4a:	64c3      	str	r3, [r0, #76]	; 0x4c
    bc4c:	6503      	str	r3, [r0, #80]	; 0x50
    bc4e:	4b12      	ldr	r3, [pc, #72]	; (bc98 <__sinit+0x58>)
    bc50:	4a12      	ldr	r2, [pc, #72]	; (bc9c <__sinit+0x5c>)
    bc52:	681b      	ldr	r3, [r3, #0]
    bc54:	6282      	str	r2, [r0, #40]	; 0x28
    bc56:	4298      	cmp	r0, r3
    bc58:	bf04      	itt	eq
    bc5a:	2301      	moveq	r3, #1
    bc5c:	6183      	streq	r3, [r0, #24]
    bc5e:	f000 f81f 	bl	bca0 <__sfp>
    bc62:	6060      	str	r0, [r4, #4]
    bc64:	4620      	mov	r0, r4
    bc66:	f000 f81b 	bl	bca0 <__sfp>
    bc6a:	60a0      	str	r0, [r4, #8]
    bc6c:	4620      	mov	r0, r4
    bc6e:	f000 f817 	bl	bca0 <__sfp>
    bc72:	2200      	movs	r2, #0
    bc74:	60e0      	str	r0, [r4, #12]
    bc76:	2104      	movs	r1, #4
    bc78:	6860      	ldr	r0, [r4, #4]
    bc7a:	f7ff ffa7 	bl	bbcc <std.isra.0>
    bc7e:	2201      	movs	r2, #1
    bc80:	2109      	movs	r1, #9
    bc82:	68a0      	ldr	r0, [r4, #8]
    bc84:	f7ff ffa2 	bl	bbcc <std.isra.0>
    bc88:	2202      	movs	r2, #2
    bc8a:	2112      	movs	r1, #18
    bc8c:	68e0      	ldr	r0, [r4, #12]
    bc8e:	f7ff ff9d 	bl	bbcc <std.isra.0>
    bc92:	2301      	movs	r3, #1
    bc94:	61a3      	str	r3, [r4, #24]
    bc96:	bd10      	pop	{r4, pc}
    bc98:	0000ccc0 	.word	0x0000ccc0
    bc9c:	0000bbc1 	.word	0x0000bbc1

0000bca0 <__sfp>:
    bca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bca2:	4b1c      	ldr	r3, [pc, #112]	; (bd14 <__sfp+0x74>)
    bca4:	681e      	ldr	r6, [r3, #0]
    bca6:	69b3      	ldr	r3, [r6, #24]
    bca8:	4607      	mov	r7, r0
    bcaa:	b913      	cbnz	r3, bcb2 <__sfp+0x12>
    bcac:	4630      	mov	r0, r6
    bcae:	f7ff ffc7 	bl	bc40 <__sinit>
    bcb2:	3648      	adds	r6, #72	; 0x48
    bcb4:	68b4      	ldr	r4, [r6, #8]
    bcb6:	6873      	ldr	r3, [r6, #4]
    bcb8:	3b01      	subs	r3, #1
    bcba:	d503      	bpl.n	bcc4 <__sfp+0x24>
    bcbc:	6833      	ldr	r3, [r6, #0]
    bcbe:	b133      	cbz	r3, bcce <__sfp+0x2e>
    bcc0:	6836      	ldr	r6, [r6, #0]
    bcc2:	e7f7      	b.n	bcb4 <__sfp+0x14>
    bcc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    bcc8:	b16d      	cbz	r5, bce6 <__sfp+0x46>
    bcca:	3468      	adds	r4, #104	; 0x68
    bccc:	e7f4      	b.n	bcb8 <__sfp+0x18>
    bcce:	2104      	movs	r1, #4
    bcd0:	4638      	mov	r0, r7
    bcd2:	f7ff ff9f 	bl	bc14 <__sfmoreglue>
    bcd6:	6030      	str	r0, [r6, #0]
    bcd8:	2800      	cmp	r0, #0
    bcda:	d1f1      	bne.n	bcc0 <__sfp+0x20>
    bcdc:	230c      	movs	r3, #12
    bcde:	603b      	str	r3, [r7, #0]
    bce0:	4604      	mov	r4, r0
    bce2:	4620      	mov	r0, r4
    bce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bcea:	81e3      	strh	r3, [r4, #14]
    bcec:	2301      	movs	r3, #1
    bcee:	81a3      	strh	r3, [r4, #12]
    bcf0:	6665      	str	r5, [r4, #100]	; 0x64
    bcf2:	6025      	str	r5, [r4, #0]
    bcf4:	60a5      	str	r5, [r4, #8]
    bcf6:	6065      	str	r5, [r4, #4]
    bcf8:	6125      	str	r5, [r4, #16]
    bcfa:	6165      	str	r5, [r4, #20]
    bcfc:	61a5      	str	r5, [r4, #24]
    bcfe:	2208      	movs	r2, #8
    bd00:	4629      	mov	r1, r5
    bd02:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    bd06:	f7ff fc1c 	bl	b542 <memset>
    bd0a:	6365      	str	r5, [r4, #52]	; 0x34
    bd0c:	63a5      	str	r5, [r4, #56]	; 0x38
    bd0e:	64a5      	str	r5, [r4, #72]	; 0x48
    bd10:	64e5      	str	r5, [r4, #76]	; 0x4c
    bd12:	e7e6      	b.n	bce2 <__sfp+0x42>
    bd14:	0000ccc0 	.word	0x0000ccc0

0000bd18 <_fwalk_reent>:
    bd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bd1c:	4680      	mov	r8, r0
    bd1e:	4689      	mov	r9, r1
    bd20:	f100 0448 	add.w	r4, r0, #72	; 0x48
    bd24:	2600      	movs	r6, #0
    bd26:	b914      	cbnz	r4, bd2e <_fwalk_reent+0x16>
    bd28:	4630      	mov	r0, r6
    bd2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bd2e:	68a5      	ldr	r5, [r4, #8]
    bd30:	6867      	ldr	r7, [r4, #4]
    bd32:	3f01      	subs	r7, #1
    bd34:	d501      	bpl.n	bd3a <_fwalk_reent+0x22>
    bd36:	6824      	ldr	r4, [r4, #0]
    bd38:	e7f5      	b.n	bd26 <_fwalk_reent+0xe>
    bd3a:	89ab      	ldrh	r3, [r5, #12]
    bd3c:	2b01      	cmp	r3, #1
    bd3e:	d907      	bls.n	bd50 <_fwalk_reent+0x38>
    bd40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    bd44:	3301      	adds	r3, #1
    bd46:	d003      	beq.n	bd50 <_fwalk_reent+0x38>
    bd48:	4629      	mov	r1, r5
    bd4a:	4640      	mov	r0, r8
    bd4c:	47c8      	blx	r9
    bd4e:	4306      	orrs	r6, r0
    bd50:	3568      	adds	r5, #104	; 0x68
    bd52:	e7ee      	b.n	bd32 <_fwalk_reent+0x1a>

0000bd54 <__swhatbuf_r>:
    bd54:	b570      	push	{r4, r5, r6, lr}
    bd56:	460e      	mov	r6, r1
    bd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bd5c:	2900      	cmp	r1, #0
    bd5e:	b090      	sub	sp, #64	; 0x40
    bd60:	4614      	mov	r4, r2
    bd62:	461d      	mov	r5, r3
    bd64:	da07      	bge.n	bd76 <__swhatbuf_r+0x22>
    bd66:	2300      	movs	r3, #0
    bd68:	602b      	str	r3, [r5, #0]
    bd6a:	89b3      	ldrh	r3, [r6, #12]
    bd6c:	061a      	lsls	r2, r3, #24
    bd6e:	d410      	bmi.n	bd92 <__swhatbuf_r+0x3e>
    bd70:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bd74:	e00e      	b.n	bd94 <__swhatbuf_r+0x40>
    bd76:	aa01      	add	r2, sp, #4
    bd78:	f000 fb8c 	bl	c494 <_fstat_r>
    bd7c:	2800      	cmp	r0, #0
    bd7e:	dbf2      	blt.n	bd66 <__swhatbuf_r+0x12>
    bd80:	9a02      	ldr	r2, [sp, #8]
    bd82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    bd86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    bd8a:	425a      	negs	r2, r3
    bd8c:	415a      	adcs	r2, r3
    bd8e:	602a      	str	r2, [r5, #0]
    bd90:	e7ee      	b.n	bd70 <__swhatbuf_r+0x1c>
    bd92:	2340      	movs	r3, #64	; 0x40
    bd94:	2000      	movs	r0, #0
    bd96:	6023      	str	r3, [r4, #0]
    bd98:	b010      	add	sp, #64	; 0x40
    bd9a:	bd70      	pop	{r4, r5, r6, pc}

0000bd9c <__smakebuf_r>:
    bd9c:	898b      	ldrh	r3, [r1, #12]
    bd9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bda0:	079d      	lsls	r5, r3, #30
    bda2:	4606      	mov	r6, r0
    bda4:	460c      	mov	r4, r1
    bda6:	d507      	bpl.n	bdb8 <__smakebuf_r+0x1c>
    bda8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    bdac:	6023      	str	r3, [r4, #0]
    bdae:	6123      	str	r3, [r4, #16]
    bdb0:	2301      	movs	r3, #1
    bdb2:	6163      	str	r3, [r4, #20]
    bdb4:	b002      	add	sp, #8
    bdb6:	bd70      	pop	{r4, r5, r6, pc}
    bdb8:	ab01      	add	r3, sp, #4
    bdba:	466a      	mov	r2, sp
    bdbc:	f7ff ffca 	bl	bd54 <__swhatbuf_r>
    bdc0:	9900      	ldr	r1, [sp, #0]
    bdc2:	4605      	mov	r5, r0
    bdc4:	4630      	mov	r0, r6
    bdc6:	f7ff fc13 	bl	b5f0 <_malloc_r>
    bdca:	b948      	cbnz	r0, bde0 <__smakebuf_r+0x44>
    bdcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bdd0:	059a      	lsls	r2, r3, #22
    bdd2:	d4ef      	bmi.n	bdb4 <__smakebuf_r+0x18>
    bdd4:	f023 0303 	bic.w	r3, r3, #3
    bdd8:	f043 0302 	orr.w	r3, r3, #2
    bddc:	81a3      	strh	r3, [r4, #12]
    bdde:	e7e3      	b.n	bda8 <__smakebuf_r+0xc>
    bde0:	4b0d      	ldr	r3, [pc, #52]	; (be18 <__smakebuf_r+0x7c>)
    bde2:	62b3      	str	r3, [r6, #40]	; 0x28
    bde4:	89a3      	ldrh	r3, [r4, #12]
    bde6:	6020      	str	r0, [r4, #0]
    bde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bdec:	81a3      	strh	r3, [r4, #12]
    bdee:	9b00      	ldr	r3, [sp, #0]
    bdf0:	6163      	str	r3, [r4, #20]
    bdf2:	9b01      	ldr	r3, [sp, #4]
    bdf4:	6120      	str	r0, [r4, #16]
    bdf6:	b15b      	cbz	r3, be10 <__smakebuf_r+0x74>
    bdf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    bdfc:	4630      	mov	r0, r6
    bdfe:	f000 fb5b 	bl	c4b8 <_isatty_r>
    be02:	b128      	cbz	r0, be10 <__smakebuf_r+0x74>
    be04:	89a3      	ldrh	r3, [r4, #12]
    be06:	f023 0303 	bic.w	r3, r3, #3
    be0a:	f043 0301 	orr.w	r3, r3, #1
    be0e:	81a3      	strh	r3, [r4, #12]
    be10:	89a3      	ldrh	r3, [r4, #12]
    be12:	431d      	orrs	r5, r3
    be14:	81a5      	strh	r5, [r4, #12]
    be16:	e7cd      	b.n	bdb4 <__smakebuf_r+0x18>
    be18:	0000bbc1 	.word	0x0000bbc1

0000be1c <__malloc_lock>:
    be1c:	4770      	bx	lr

0000be1e <__malloc_unlock>:
    be1e:	4770      	bx	lr

0000be20 <__sfputc_r>:
    be20:	6893      	ldr	r3, [r2, #8]
    be22:	3b01      	subs	r3, #1
    be24:	2b00      	cmp	r3, #0
    be26:	b410      	push	{r4}
    be28:	6093      	str	r3, [r2, #8]
    be2a:	da08      	bge.n	be3e <__sfputc_r+0x1e>
    be2c:	6994      	ldr	r4, [r2, #24]
    be2e:	42a3      	cmp	r3, r4
    be30:	db02      	blt.n	be38 <__sfputc_r+0x18>
    be32:	b2cb      	uxtb	r3, r1
    be34:	2b0a      	cmp	r3, #10
    be36:	d102      	bne.n	be3e <__sfputc_r+0x1e>
    be38:	bc10      	pop	{r4}
    be3a:	f7ff bd4f 	b.w	b8dc <__swbuf_r>
    be3e:	6813      	ldr	r3, [r2, #0]
    be40:	1c58      	adds	r0, r3, #1
    be42:	6010      	str	r0, [r2, #0]
    be44:	7019      	strb	r1, [r3, #0]
    be46:	b2c8      	uxtb	r0, r1
    be48:	bc10      	pop	{r4}
    be4a:	4770      	bx	lr

0000be4c <__sfputs_r>:
    be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be4e:	4606      	mov	r6, r0
    be50:	460f      	mov	r7, r1
    be52:	4614      	mov	r4, r2
    be54:	18d5      	adds	r5, r2, r3
    be56:	42ac      	cmp	r4, r5
    be58:	d101      	bne.n	be5e <__sfputs_r+0x12>
    be5a:	2000      	movs	r0, #0
    be5c:	e007      	b.n	be6e <__sfputs_r+0x22>
    be5e:	463a      	mov	r2, r7
    be60:	f814 1b01 	ldrb.w	r1, [r4], #1
    be64:	4630      	mov	r0, r6
    be66:	f7ff ffdb 	bl	be20 <__sfputc_r>
    be6a:	1c43      	adds	r3, r0, #1
    be6c:	d1f3      	bne.n	be56 <__sfputs_r+0xa>
    be6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000be70 <_vfiprintf_r>:
    be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be74:	b09d      	sub	sp, #116	; 0x74
    be76:	460c      	mov	r4, r1
    be78:	4617      	mov	r7, r2
    be7a:	9303      	str	r3, [sp, #12]
    be7c:	4606      	mov	r6, r0
    be7e:	b118      	cbz	r0, be88 <_vfiprintf_r+0x18>
    be80:	6983      	ldr	r3, [r0, #24]
    be82:	b90b      	cbnz	r3, be88 <_vfiprintf_r+0x18>
    be84:	f7ff fedc 	bl	bc40 <__sinit>
    be88:	4b7c      	ldr	r3, [pc, #496]	; (c07c <_vfiprintf_r+0x20c>)
    be8a:	429c      	cmp	r4, r3
    be8c:	d157      	bne.n	bf3e <_vfiprintf_r+0xce>
    be8e:	6874      	ldr	r4, [r6, #4]
    be90:	89a3      	ldrh	r3, [r4, #12]
    be92:	0718      	lsls	r0, r3, #28
    be94:	d55d      	bpl.n	bf52 <_vfiprintf_r+0xe2>
    be96:	6923      	ldr	r3, [r4, #16]
    be98:	2b00      	cmp	r3, #0
    be9a:	d05a      	beq.n	bf52 <_vfiprintf_r+0xe2>
    be9c:	2300      	movs	r3, #0
    be9e:	9309      	str	r3, [sp, #36]	; 0x24
    bea0:	2320      	movs	r3, #32
    bea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    bea6:	2330      	movs	r3, #48	; 0x30
    bea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    beac:	f04f 0b01 	mov.w	fp, #1
    beb0:	46b8      	mov	r8, r7
    beb2:	4645      	mov	r5, r8
    beb4:	f815 3b01 	ldrb.w	r3, [r5], #1
    beb8:	2b00      	cmp	r3, #0
    beba:	d155      	bne.n	bf68 <_vfiprintf_r+0xf8>
    bebc:	ebb8 0a07 	subs.w	sl, r8, r7
    bec0:	d00b      	beq.n	beda <_vfiprintf_r+0x6a>
    bec2:	4653      	mov	r3, sl
    bec4:	463a      	mov	r2, r7
    bec6:	4621      	mov	r1, r4
    bec8:	4630      	mov	r0, r6
    beca:	f7ff ffbf 	bl	be4c <__sfputs_r>
    bece:	3001      	adds	r0, #1
    bed0:	f000 80c4 	beq.w	c05c <_vfiprintf_r+0x1ec>
    bed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bed6:	4453      	add	r3, sl
    bed8:	9309      	str	r3, [sp, #36]	; 0x24
    beda:	f898 3000 	ldrb.w	r3, [r8]
    bede:	2b00      	cmp	r3, #0
    bee0:	f000 80bc 	beq.w	c05c <_vfiprintf_r+0x1ec>
    bee4:	2300      	movs	r3, #0
    bee6:	f04f 32ff 	mov.w	r2, #4294967295
    beea:	9304      	str	r3, [sp, #16]
    beec:	9307      	str	r3, [sp, #28]
    beee:	9205      	str	r2, [sp, #20]
    bef0:	9306      	str	r3, [sp, #24]
    bef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    bef6:	931a      	str	r3, [sp, #104]	; 0x68
    bef8:	2205      	movs	r2, #5
    befa:	7829      	ldrb	r1, [r5, #0]
    befc:	4860      	ldr	r0, [pc, #384]	; (c080 <_vfiprintf_r+0x210>)
    befe:	f000 faff 	bl	c500 <memchr>
    bf02:	f105 0801 	add.w	r8, r5, #1
    bf06:	9b04      	ldr	r3, [sp, #16]
    bf08:	2800      	cmp	r0, #0
    bf0a:	d131      	bne.n	bf70 <_vfiprintf_r+0x100>
    bf0c:	06d9      	lsls	r1, r3, #27
    bf0e:	bf44      	itt	mi
    bf10:	2220      	movmi	r2, #32
    bf12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    bf16:	071a      	lsls	r2, r3, #28
    bf18:	bf44      	itt	mi
    bf1a:	222b      	movmi	r2, #43	; 0x2b
    bf1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    bf20:	782a      	ldrb	r2, [r5, #0]
    bf22:	2a2a      	cmp	r2, #42	; 0x2a
    bf24:	d02c      	beq.n	bf80 <_vfiprintf_r+0x110>
    bf26:	9a07      	ldr	r2, [sp, #28]
    bf28:	2100      	movs	r1, #0
    bf2a:	200a      	movs	r0, #10
    bf2c:	46a8      	mov	r8, r5
    bf2e:	3501      	adds	r5, #1
    bf30:	f898 3000 	ldrb.w	r3, [r8]
    bf34:	3b30      	subs	r3, #48	; 0x30
    bf36:	2b09      	cmp	r3, #9
    bf38:	d96d      	bls.n	c016 <_vfiprintf_r+0x1a6>
    bf3a:	b371      	cbz	r1, bf9a <_vfiprintf_r+0x12a>
    bf3c:	e026      	b.n	bf8c <_vfiprintf_r+0x11c>
    bf3e:	4b51      	ldr	r3, [pc, #324]	; (c084 <_vfiprintf_r+0x214>)
    bf40:	429c      	cmp	r4, r3
    bf42:	d101      	bne.n	bf48 <_vfiprintf_r+0xd8>
    bf44:	68b4      	ldr	r4, [r6, #8]
    bf46:	e7a3      	b.n	be90 <_vfiprintf_r+0x20>
    bf48:	4b4f      	ldr	r3, [pc, #316]	; (c088 <_vfiprintf_r+0x218>)
    bf4a:	429c      	cmp	r4, r3
    bf4c:	bf08      	it	eq
    bf4e:	68f4      	ldreq	r4, [r6, #12]
    bf50:	e79e      	b.n	be90 <_vfiprintf_r+0x20>
    bf52:	4621      	mov	r1, r4
    bf54:	4630      	mov	r0, r6
    bf56:	f7ff fd13 	bl	b980 <__swsetup_r>
    bf5a:	2800      	cmp	r0, #0
    bf5c:	d09e      	beq.n	be9c <_vfiprintf_r+0x2c>
    bf5e:	f04f 30ff 	mov.w	r0, #4294967295
    bf62:	b01d      	add	sp, #116	; 0x74
    bf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf68:	2b25      	cmp	r3, #37	; 0x25
    bf6a:	d0a7      	beq.n	bebc <_vfiprintf_r+0x4c>
    bf6c:	46a8      	mov	r8, r5
    bf6e:	e7a0      	b.n	beb2 <_vfiprintf_r+0x42>
    bf70:	4a43      	ldr	r2, [pc, #268]	; (c080 <_vfiprintf_r+0x210>)
    bf72:	1a80      	subs	r0, r0, r2
    bf74:	fa0b f000 	lsl.w	r0, fp, r0
    bf78:	4318      	orrs	r0, r3
    bf7a:	9004      	str	r0, [sp, #16]
    bf7c:	4645      	mov	r5, r8
    bf7e:	e7bb      	b.n	bef8 <_vfiprintf_r+0x88>
    bf80:	9a03      	ldr	r2, [sp, #12]
    bf82:	1d11      	adds	r1, r2, #4
    bf84:	6812      	ldr	r2, [r2, #0]
    bf86:	9103      	str	r1, [sp, #12]
    bf88:	2a00      	cmp	r2, #0
    bf8a:	db01      	blt.n	bf90 <_vfiprintf_r+0x120>
    bf8c:	9207      	str	r2, [sp, #28]
    bf8e:	e004      	b.n	bf9a <_vfiprintf_r+0x12a>
    bf90:	4252      	negs	r2, r2
    bf92:	f043 0302 	orr.w	r3, r3, #2
    bf96:	9207      	str	r2, [sp, #28]
    bf98:	9304      	str	r3, [sp, #16]
    bf9a:	f898 3000 	ldrb.w	r3, [r8]
    bf9e:	2b2e      	cmp	r3, #46	; 0x2e
    bfa0:	d110      	bne.n	bfc4 <_vfiprintf_r+0x154>
    bfa2:	f898 3001 	ldrb.w	r3, [r8, #1]
    bfa6:	2b2a      	cmp	r3, #42	; 0x2a
    bfa8:	f108 0101 	add.w	r1, r8, #1
    bfac:	d137      	bne.n	c01e <_vfiprintf_r+0x1ae>
    bfae:	9b03      	ldr	r3, [sp, #12]
    bfb0:	1d1a      	adds	r2, r3, #4
    bfb2:	681b      	ldr	r3, [r3, #0]
    bfb4:	9203      	str	r2, [sp, #12]
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	bfb8      	it	lt
    bfba:	f04f 33ff 	movlt.w	r3, #4294967295
    bfbe:	f108 0802 	add.w	r8, r8, #2
    bfc2:	9305      	str	r3, [sp, #20]
    bfc4:	4d31      	ldr	r5, [pc, #196]	; (c08c <_vfiprintf_r+0x21c>)
    bfc6:	f898 1000 	ldrb.w	r1, [r8]
    bfca:	2203      	movs	r2, #3
    bfcc:	4628      	mov	r0, r5
    bfce:	f000 fa97 	bl	c500 <memchr>
    bfd2:	b140      	cbz	r0, bfe6 <_vfiprintf_r+0x176>
    bfd4:	2340      	movs	r3, #64	; 0x40
    bfd6:	1b40      	subs	r0, r0, r5
    bfd8:	fa03 f000 	lsl.w	r0, r3, r0
    bfdc:	9b04      	ldr	r3, [sp, #16]
    bfde:	4303      	orrs	r3, r0
    bfe0:	9304      	str	r3, [sp, #16]
    bfe2:	f108 0801 	add.w	r8, r8, #1
    bfe6:	f898 1000 	ldrb.w	r1, [r8]
    bfea:	4829      	ldr	r0, [pc, #164]	; (c090 <_vfiprintf_r+0x220>)
    bfec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    bff0:	2206      	movs	r2, #6
    bff2:	f108 0701 	add.w	r7, r8, #1
    bff6:	f000 fa83 	bl	c500 <memchr>
    bffa:	2800      	cmp	r0, #0
    bffc:	d034      	beq.n	c068 <_vfiprintf_r+0x1f8>
    bffe:	4b25      	ldr	r3, [pc, #148]	; (c094 <_vfiprintf_r+0x224>)
    c000:	bb03      	cbnz	r3, c044 <_vfiprintf_r+0x1d4>
    c002:	9b03      	ldr	r3, [sp, #12]
    c004:	3307      	adds	r3, #7
    c006:	f023 0307 	bic.w	r3, r3, #7
    c00a:	3308      	adds	r3, #8
    c00c:	9303      	str	r3, [sp, #12]
    c00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c010:	444b      	add	r3, r9
    c012:	9309      	str	r3, [sp, #36]	; 0x24
    c014:	e74c      	b.n	beb0 <_vfiprintf_r+0x40>
    c016:	fb00 3202 	mla	r2, r0, r2, r3
    c01a:	2101      	movs	r1, #1
    c01c:	e786      	b.n	bf2c <_vfiprintf_r+0xbc>
    c01e:	2300      	movs	r3, #0
    c020:	9305      	str	r3, [sp, #20]
    c022:	4618      	mov	r0, r3
    c024:	250a      	movs	r5, #10
    c026:	4688      	mov	r8, r1
    c028:	3101      	adds	r1, #1
    c02a:	f898 2000 	ldrb.w	r2, [r8]
    c02e:	3a30      	subs	r2, #48	; 0x30
    c030:	2a09      	cmp	r2, #9
    c032:	d903      	bls.n	c03c <_vfiprintf_r+0x1cc>
    c034:	2b00      	cmp	r3, #0
    c036:	d0c5      	beq.n	bfc4 <_vfiprintf_r+0x154>
    c038:	9005      	str	r0, [sp, #20]
    c03a:	e7c3      	b.n	bfc4 <_vfiprintf_r+0x154>
    c03c:	fb05 2000 	mla	r0, r5, r0, r2
    c040:	2301      	movs	r3, #1
    c042:	e7f0      	b.n	c026 <_vfiprintf_r+0x1b6>
    c044:	ab03      	add	r3, sp, #12
    c046:	9300      	str	r3, [sp, #0]
    c048:	4622      	mov	r2, r4
    c04a:	4b13      	ldr	r3, [pc, #76]	; (c098 <_vfiprintf_r+0x228>)
    c04c:	a904      	add	r1, sp, #16
    c04e:	4630      	mov	r0, r6
    c050:	f3af 8000 	nop.w
    c054:	f1b0 3fff 	cmp.w	r0, #4294967295
    c058:	4681      	mov	r9, r0
    c05a:	d1d8      	bne.n	c00e <_vfiprintf_r+0x19e>
    c05c:	89a3      	ldrh	r3, [r4, #12]
    c05e:	065b      	lsls	r3, r3, #25
    c060:	f53f af7d 	bmi.w	bf5e <_vfiprintf_r+0xee>
    c064:	9809      	ldr	r0, [sp, #36]	; 0x24
    c066:	e77c      	b.n	bf62 <_vfiprintf_r+0xf2>
    c068:	ab03      	add	r3, sp, #12
    c06a:	9300      	str	r3, [sp, #0]
    c06c:	4622      	mov	r2, r4
    c06e:	4b0a      	ldr	r3, [pc, #40]	; (c098 <_vfiprintf_r+0x228>)
    c070:	a904      	add	r1, sp, #16
    c072:	4630      	mov	r0, r6
    c074:	f000 f888 	bl	c188 <_printf_i>
    c078:	e7ec      	b.n	c054 <_vfiprintf_r+0x1e4>
    c07a:	bf00      	nop
    c07c:	0000cce4 	.word	0x0000cce4
    c080:	0000cd24 	.word	0x0000cd24
    c084:	0000cd04 	.word	0x0000cd04
    c088:	0000ccc4 	.word	0x0000ccc4
    c08c:	0000cd2a 	.word	0x0000cd2a
    c090:	0000cd2e 	.word	0x0000cd2e
    c094:	00000000 	.word	0x00000000
    c098:	0000be4d 	.word	0x0000be4d

0000c09c <_printf_common>:
    c09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0a0:	4691      	mov	r9, r2
    c0a2:	461f      	mov	r7, r3
    c0a4:	688a      	ldr	r2, [r1, #8]
    c0a6:	690b      	ldr	r3, [r1, #16]
    c0a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    c0ac:	4293      	cmp	r3, r2
    c0ae:	bfb8      	it	lt
    c0b0:	4613      	movlt	r3, r2
    c0b2:	f8c9 3000 	str.w	r3, [r9]
    c0b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    c0ba:	4606      	mov	r6, r0
    c0bc:	460c      	mov	r4, r1
    c0be:	b112      	cbz	r2, c0c6 <_printf_common+0x2a>
    c0c0:	3301      	adds	r3, #1
    c0c2:	f8c9 3000 	str.w	r3, [r9]
    c0c6:	6823      	ldr	r3, [r4, #0]
    c0c8:	0699      	lsls	r1, r3, #26
    c0ca:	bf42      	ittt	mi
    c0cc:	f8d9 3000 	ldrmi.w	r3, [r9]
    c0d0:	3302      	addmi	r3, #2
    c0d2:	f8c9 3000 	strmi.w	r3, [r9]
    c0d6:	6825      	ldr	r5, [r4, #0]
    c0d8:	f015 0506 	ands.w	r5, r5, #6
    c0dc:	d107      	bne.n	c0ee <_printf_common+0x52>
    c0de:	f104 0a19 	add.w	sl, r4, #25
    c0e2:	68e3      	ldr	r3, [r4, #12]
    c0e4:	f8d9 2000 	ldr.w	r2, [r9]
    c0e8:	1a9b      	subs	r3, r3, r2
    c0ea:	429d      	cmp	r5, r3
    c0ec:	db29      	blt.n	c142 <_printf_common+0xa6>
    c0ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    c0f2:	6822      	ldr	r2, [r4, #0]
    c0f4:	3300      	adds	r3, #0
    c0f6:	bf18      	it	ne
    c0f8:	2301      	movne	r3, #1
    c0fa:	0692      	lsls	r2, r2, #26
    c0fc:	d42e      	bmi.n	c15c <_printf_common+0xc0>
    c0fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c102:	4639      	mov	r1, r7
    c104:	4630      	mov	r0, r6
    c106:	47c0      	blx	r8
    c108:	3001      	adds	r0, #1
    c10a:	d021      	beq.n	c150 <_printf_common+0xb4>
    c10c:	6823      	ldr	r3, [r4, #0]
    c10e:	68e5      	ldr	r5, [r4, #12]
    c110:	f8d9 2000 	ldr.w	r2, [r9]
    c114:	f003 0306 	and.w	r3, r3, #6
    c118:	2b04      	cmp	r3, #4
    c11a:	bf08      	it	eq
    c11c:	1aad      	subeq	r5, r5, r2
    c11e:	68a3      	ldr	r3, [r4, #8]
    c120:	6922      	ldr	r2, [r4, #16]
    c122:	bf0c      	ite	eq
    c124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    c128:	2500      	movne	r5, #0
    c12a:	4293      	cmp	r3, r2
    c12c:	bfc4      	itt	gt
    c12e:	1a9b      	subgt	r3, r3, r2
    c130:	18ed      	addgt	r5, r5, r3
    c132:	f04f 0900 	mov.w	r9, #0
    c136:	341a      	adds	r4, #26
    c138:	454d      	cmp	r5, r9
    c13a:	d11b      	bne.n	c174 <_printf_common+0xd8>
    c13c:	2000      	movs	r0, #0
    c13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c142:	2301      	movs	r3, #1
    c144:	4652      	mov	r2, sl
    c146:	4639      	mov	r1, r7
    c148:	4630      	mov	r0, r6
    c14a:	47c0      	blx	r8
    c14c:	3001      	adds	r0, #1
    c14e:	d103      	bne.n	c158 <_printf_common+0xbc>
    c150:	f04f 30ff 	mov.w	r0, #4294967295
    c154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c158:	3501      	adds	r5, #1
    c15a:	e7c2      	b.n	c0e2 <_printf_common+0x46>
    c15c:	18e1      	adds	r1, r4, r3
    c15e:	1c5a      	adds	r2, r3, #1
    c160:	2030      	movs	r0, #48	; 0x30
    c162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    c166:	4422      	add	r2, r4
    c168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    c16c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    c170:	3302      	adds	r3, #2
    c172:	e7c4      	b.n	c0fe <_printf_common+0x62>
    c174:	2301      	movs	r3, #1
    c176:	4622      	mov	r2, r4
    c178:	4639      	mov	r1, r7
    c17a:	4630      	mov	r0, r6
    c17c:	47c0      	blx	r8
    c17e:	3001      	adds	r0, #1
    c180:	d0e6      	beq.n	c150 <_printf_common+0xb4>
    c182:	f109 0901 	add.w	r9, r9, #1
    c186:	e7d7      	b.n	c138 <_printf_common+0x9c>

0000c188 <_printf_i>:
    c188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c18c:	4617      	mov	r7, r2
    c18e:	7e0a      	ldrb	r2, [r1, #24]
    c190:	b085      	sub	sp, #20
    c192:	2a6e      	cmp	r2, #110	; 0x6e
    c194:	4698      	mov	r8, r3
    c196:	4606      	mov	r6, r0
    c198:	460c      	mov	r4, r1
    c19a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c19c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    c1a0:	f000 80bc 	beq.w	c31c <_printf_i+0x194>
    c1a4:	d81a      	bhi.n	c1dc <_printf_i+0x54>
    c1a6:	2a63      	cmp	r2, #99	; 0x63
    c1a8:	d02e      	beq.n	c208 <_printf_i+0x80>
    c1aa:	d80a      	bhi.n	c1c2 <_printf_i+0x3a>
    c1ac:	2a00      	cmp	r2, #0
    c1ae:	f000 80c8 	beq.w	c342 <_printf_i+0x1ba>
    c1b2:	2a58      	cmp	r2, #88	; 0x58
    c1b4:	f000 808a 	beq.w	c2cc <_printf_i+0x144>
    c1b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    c1bc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    c1c0:	e02a      	b.n	c218 <_printf_i+0x90>
    c1c2:	2a64      	cmp	r2, #100	; 0x64
    c1c4:	d001      	beq.n	c1ca <_printf_i+0x42>
    c1c6:	2a69      	cmp	r2, #105	; 0x69
    c1c8:	d1f6      	bne.n	c1b8 <_printf_i+0x30>
    c1ca:	6821      	ldr	r1, [r4, #0]
    c1cc:	681a      	ldr	r2, [r3, #0]
    c1ce:	f011 0f80 	tst.w	r1, #128	; 0x80
    c1d2:	d023      	beq.n	c21c <_printf_i+0x94>
    c1d4:	1d11      	adds	r1, r2, #4
    c1d6:	6019      	str	r1, [r3, #0]
    c1d8:	6813      	ldr	r3, [r2, #0]
    c1da:	e027      	b.n	c22c <_printf_i+0xa4>
    c1dc:	2a73      	cmp	r2, #115	; 0x73
    c1de:	f000 80b4 	beq.w	c34a <_printf_i+0x1c2>
    c1e2:	d808      	bhi.n	c1f6 <_printf_i+0x6e>
    c1e4:	2a6f      	cmp	r2, #111	; 0x6f
    c1e6:	d02a      	beq.n	c23e <_printf_i+0xb6>
    c1e8:	2a70      	cmp	r2, #112	; 0x70
    c1ea:	d1e5      	bne.n	c1b8 <_printf_i+0x30>
    c1ec:	680a      	ldr	r2, [r1, #0]
    c1ee:	f042 0220 	orr.w	r2, r2, #32
    c1f2:	600a      	str	r2, [r1, #0]
    c1f4:	e003      	b.n	c1fe <_printf_i+0x76>
    c1f6:	2a75      	cmp	r2, #117	; 0x75
    c1f8:	d021      	beq.n	c23e <_printf_i+0xb6>
    c1fa:	2a78      	cmp	r2, #120	; 0x78
    c1fc:	d1dc      	bne.n	c1b8 <_printf_i+0x30>
    c1fe:	2278      	movs	r2, #120	; 0x78
    c200:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    c204:	496e      	ldr	r1, [pc, #440]	; (c3c0 <_printf_i+0x238>)
    c206:	e064      	b.n	c2d2 <_printf_i+0x14a>
    c208:	681a      	ldr	r2, [r3, #0]
    c20a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    c20e:	1d11      	adds	r1, r2, #4
    c210:	6019      	str	r1, [r3, #0]
    c212:	6813      	ldr	r3, [r2, #0]
    c214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    c218:	2301      	movs	r3, #1
    c21a:	e0a3      	b.n	c364 <_printf_i+0x1dc>
    c21c:	f011 0f40 	tst.w	r1, #64	; 0x40
    c220:	f102 0104 	add.w	r1, r2, #4
    c224:	6019      	str	r1, [r3, #0]
    c226:	d0d7      	beq.n	c1d8 <_printf_i+0x50>
    c228:	f9b2 3000 	ldrsh.w	r3, [r2]
    c22c:	2b00      	cmp	r3, #0
    c22e:	da03      	bge.n	c238 <_printf_i+0xb0>
    c230:	222d      	movs	r2, #45	; 0x2d
    c232:	425b      	negs	r3, r3
    c234:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    c238:	4962      	ldr	r1, [pc, #392]	; (c3c4 <_printf_i+0x23c>)
    c23a:	220a      	movs	r2, #10
    c23c:	e017      	b.n	c26e <_printf_i+0xe6>
    c23e:	6820      	ldr	r0, [r4, #0]
    c240:	6819      	ldr	r1, [r3, #0]
    c242:	f010 0f80 	tst.w	r0, #128	; 0x80
    c246:	d003      	beq.n	c250 <_printf_i+0xc8>
    c248:	1d08      	adds	r0, r1, #4
    c24a:	6018      	str	r0, [r3, #0]
    c24c:	680b      	ldr	r3, [r1, #0]
    c24e:	e006      	b.n	c25e <_printf_i+0xd6>
    c250:	f010 0f40 	tst.w	r0, #64	; 0x40
    c254:	f101 0004 	add.w	r0, r1, #4
    c258:	6018      	str	r0, [r3, #0]
    c25a:	d0f7      	beq.n	c24c <_printf_i+0xc4>
    c25c:	880b      	ldrh	r3, [r1, #0]
    c25e:	4959      	ldr	r1, [pc, #356]	; (c3c4 <_printf_i+0x23c>)
    c260:	2a6f      	cmp	r2, #111	; 0x6f
    c262:	bf14      	ite	ne
    c264:	220a      	movne	r2, #10
    c266:	2208      	moveq	r2, #8
    c268:	2000      	movs	r0, #0
    c26a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    c26e:	6865      	ldr	r5, [r4, #4]
    c270:	60a5      	str	r5, [r4, #8]
    c272:	2d00      	cmp	r5, #0
    c274:	f2c0 809c 	blt.w	c3b0 <_printf_i+0x228>
    c278:	6820      	ldr	r0, [r4, #0]
    c27a:	f020 0004 	bic.w	r0, r0, #4
    c27e:	6020      	str	r0, [r4, #0]
    c280:	2b00      	cmp	r3, #0
    c282:	d13f      	bne.n	c304 <_printf_i+0x17c>
    c284:	2d00      	cmp	r5, #0
    c286:	f040 8095 	bne.w	c3b4 <_printf_i+0x22c>
    c28a:	4675      	mov	r5, lr
    c28c:	2a08      	cmp	r2, #8
    c28e:	d10b      	bne.n	c2a8 <_printf_i+0x120>
    c290:	6823      	ldr	r3, [r4, #0]
    c292:	07da      	lsls	r2, r3, #31
    c294:	d508      	bpl.n	c2a8 <_printf_i+0x120>
    c296:	6923      	ldr	r3, [r4, #16]
    c298:	6862      	ldr	r2, [r4, #4]
    c29a:	429a      	cmp	r2, r3
    c29c:	bfde      	ittt	le
    c29e:	2330      	movle	r3, #48	; 0x30
    c2a0:	f805 3c01 	strble.w	r3, [r5, #-1]
    c2a4:	f105 35ff 	addle.w	r5, r5, #4294967295
    c2a8:	ebae 0305 	sub.w	r3, lr, r5
    c2ac:	6123      	str	r3, [r4, #16]
    c2ae:	f8cd 8000 	str.w	r8, [sp]
    c2b2:	463b      	mov	r3, r7
    c2b4:	aa03      	add	r2, sp, #12
    c2b6:	4621      	mov	r1, r4
    c2b8:	4630      	mov	r0, r6
    c2ba:	f7ff feef 	bl	c09c <_printf_common>
    c2be:	3001      	adds	r0, #1
    c2c0:	d155      	bne.n	c36e <_printf_i+0x1e6>
    c2c2:	f04f 30ff 	mov.w	r0, #4294967295
    c2c6:	b005      	add	sp, #20
    c2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c2cc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    c2d0:	493c      	ldr	r1, [pc, #240]	; (c3c4 <_printf_i+0x23c>)
    c2d2:	6822      	ldr	r2, [r4, #0]
    c2d4:	6818      	ldr	r0, [r3, #0]
    c2d6:	f012 0f80 	tst.w	r2, #128	; 0x80
    c2da:	f100 0504 	add.w	r5, r0, #4
    c2de:	601d      	str	r5, [r3, #0]
    c2e0:	d001      	beq.n	c2e6 <_printf_i+0x15e>
    c2e2:	6803      	ldr	r3, [r0, #0]
    c2e4:	e002      	b.n	c2ec <_printf_i+0x164>
    c2e6:	0655      	lsls	r5, r2, #25
    c2e8:	d5fb      	bpl.n	c2e2 <_printf_i+0x15a>
    c2ea:	8803      	ldrh	r3, [r0, #0]
    c2ec:	07d0      	lsls	r0, r2, #31
    c2ee:	bf44      	itt	mi
    c2f0:	f042 0220 	orrmi.w	r2, r2, #32
    c2f4:	6022      	strmi	r2, [r4, #0]
    c2f6:	b91b      	cbnz	r3, c300 <_printf_i+0x178>
    c2f8:	6822      	ldr	r2, [r4, #0]
    c2fa:	f022 0220 	bic.w	r2, r2, #32
    c2fe:	6022      	str	r2, [r4, #0]
    c300:	2210      	movs	r2, #16
    c302:	e7b1      	b.n	c268 <_printf_i+0xe0>
    c304:	4675      	mov	r5, lr
    c306:	fbb3 f0f2 	udiv	r0, r3, r2
    c30a:	fb02 3310 	mls	r3, r2, r0, r3
    c30e:	5ccb      	ldrb	r3, [r1, r3]
    c310:	f805 3d01 	strb.w	r3, [r5, #-1]!
    c314:	4603      	mov	r3, r0
    c316:	2800      	cmp	r0, #0
    c318:	d1f5      	bne.n	c306 <_printf_i+0x17e>
    c31a:	e7b7      	b.n	c28c <_printf_i+0x104>
    c31c:	6808      	ldr	r0, [r1, #0]
    c31e:	681a      	ldr	r2, [r3, #0]
    c320:	6949      	ldr	r1, [r1, #20]
    c322:	f010 0f80 	tst.w	r0, #128	; 0x80
    c326:	d004      	beq.n	c332 <_printf_i+0x1aa>
    c328:	1d10      	adds	r0, r2, #4
    c32a:	6018      	str	r0, [r3, #0]
    c32c:	6813      	ldr	r3, [r2, #0]
    c32e:	6019      	str	r1, [r3, #0]
    c330:	e007      	b.n	c342 <_printf_i+0x1ba>
    c332:	f010 0f40 	tst.w	r0, #64	; 0x40
    c336:	f102 0004 	add.w	r0, r2, #4
    c33a:	6018      	str	r0, [r3, #0]
    c33c:	6813      	ldr	r3, [r2, #0]
    c33e:	d0f6      	beq.n	c32e <_printf_i+0x1a6>
    c340:	8019      	strh	r1, [r3, #0]
    c342:	2300      	movs	r3, #0
    c344:	6123      	str	r3, [r4, #16]
    c346:	4675      	mov	r5, lr
    c348:	e7b1      	b.n	c2ae <_printf_i+0x126>
    c34a:	681a      	ldr	r2, [r3, #0]
    c34c:	1d11      	adds	r1, r2, #4
    c34e:	6019      	str	r1, [r3, #0]
    c350:	6815      	ldr	r5, [r2, #0]
    c352:	6862      	ldr	r2, [r4, #4]
    c354:	2100      	movs	r1, #0
    c356:	4628      	mov	r0, r5
    c358:	f000 f8d2 	bl	c500 <memchr>
    c35c:	b108      	cbz	r0, c362 <_printf_i+0x1da>
    c35e:	1b40      	subs	r0, r0, r5
    c360:	6060      	str	r0, [r4, #4]
    c362:	6863      	ldr	r3, [r4, #4]
    c364:	6123      	str	r3, [r4, #16]
    c366:	2300      	movs	r3, #0
    c368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    c36c:	e79f      	b.n	c2ae <_printf_i+0x126>
    c36e:	6923      	ldr	r3, [r4, #16]
    c370:	462a      	mov	r2, r5
    c372:	4639      	mov	r1, r7
    c374:	4630      	mov	r0, r6
    c376:	47c0      	blx	r8
    c378:	3001      	adds	r0, #1
    c37a:	d0a2      	beq.n	c2c2 <_printf_i+0x13a>
    c37c:	6823      	ldr	r3, [r4, #0]
    c37e:	079b      	lsls	r3, r3, #30
    c380:	d507      	bpl.n	c392 <_printf_i+0x20a>
    c382:	2500      	movs	r5, #0
    c384:	f104 0919 	add.w	r9, r4, #25
    c388:	68e3      	ldr	r3, [r4, #12]
    c38a:	9a03      	ldr	r2, [sp, #12]
    c38c:	1a9b      	subs	r3, r3, r2
    c38e:	429d      	cmp	r5, r3
    c390:	db05      	blt.n	c39e <_printf_i+0x216>
    c392:	68e0      	ldr	r0, [r4, #12]
    c394:	9b03      	ldr	r3, [sp, #12]
    c396:	4298      	cmp	r0, r3
    c398:	bfb8      	it	lt
    c39a:	4618      	movlt	r0, r3
    c39c:	e793      	b.n	c2c6 <_printf_i+0x13e>
    c39e:	2301      	movs	r3, #1
    c3a0:	464a      	mov	r2, r9
    c3a2:	4639      	mov	r1, r7
    c3a4:	4630      	mov	r0, r6
    c3a6:	47c0      	blx	r8
    c3a8:	3001      	adds	r0, #1
    c3aa:	d08a      	beq.n	c2c2 <_printf_i+0x13a>
    c3ac:	3501      	adds	r5, #1
    c3ae:	e7eb      	b.n	c388 <_printf_i+0x200>
    c3b0:	2b00      	cmp	r3, #0
    c3b2:	d1a7      	bne.n	c304 <_printf_i+0x17c>
    c3b4:	780b      	ldrb	r3, [r1, #0]
    c3b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    c3ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
    c3be:	e765      	b.n	c28c <_printf_i+0x104>
    c3c0:	0000cd46 	.word	0x0000cd46
    c3c4:	0000cd35 	.word	0x0000cd35

0000c3c8 <__sread>:
    c3c8:	b510      	push	{r4, lr}
    c3ca:	460c      	mov	r4, r1
    c3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c3d0:	f000 f8e6 	bl	c5a0 <_read_r>
    c3d4:	2800      	cmp	r0, #0
    c3d6:	bfab      	itete	ge
    c3d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    c3da:	89a3      	ldrhlt	r3, [r4, #12]
    c3dc:	181b      	addge	r3, r3, r0
    c3de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    c3e2:	bfac      	ite	ge
    c3e4:	6563      	strge	r3, [r4, #84]	; 0x54
    c3e6:	81a3      	strhlt	r3, [r4, #12]
    c3e8:	bd10      	pop	{r4, pc}

0000c3ea <__swrite>:
    c3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3ee:	461f      	mov	r7, r3
    c3f0:	898b      	ldrh	r3, [r1, #12]
    c3f2:	05db      	lsls	r3, r3, #23
    c3f4:	4605      	mov	r5, r0
    c3f6:	460c      	mov	r4, r1
    c3f8:	4616      	mov	r6, r2
    c3fa:	d505      	bpl.n	c408 <__swrite+0x1e>
    c3fc:	2302      	movs	r3, #2
    c3fe:	2200      	movs	r2, #0
    c400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c404:	f000 f868 	bl	c4d8 <_lseek_r>
    c408:	89a3      	ldrh	r3, [r4, #12]
    c40a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c40e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c412:	81a3      	strh	r3, [r4, #12]
    c414:	4632      	mov	r2, r6
    c416:	463b      	mov	r3, r7
    c418:	4628      	mov	r0, r5
    c41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c41e:	f000 b817 	b.w	c450 <_write_r>

0000c422 <__sseek>:
    c422:	b510      	push	{r4, lr}
    c424:	460c      	mov	r4, r1
    c426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c42a:	f000 f855 	bl	c4d8 <_lseek_r>
    c42e:	1c43      	adds	r3, r0, #1
    c430:	89a3      	ldrh	r3, [r4, #12]
    c432:	bf15      	itete	ne
    c434:	6560      	strne	r0, [r4, #84]	; 0x54
    c436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    c43a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    c43e:	81a3      	strheq	r3, [r4, #12]
    c440:	bf18      	it	ne
    c442:	81a3      	strhne	r3, [r4, #12]
    c444:	bd10      	pop	{r4, pc}

0000c446 <__sclose>:
    c446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c44a:	f000 b813 	b.w	c474 <_close_r>
	...

0000c450 <_write_r>:
    c450:	b538      	push	{r3, r4, r5, lr}
    c452:	4c07      	ldr	r4, [pc, #28]	; (c470 <_write_r+0x20>)
    c454:	4605      	mov	r5, r0
    c456:	4608      	mov	r0, r1
    c458:	4611      	mov	r1, r2
    c45a:	2200      	movs	r2, #0
    c45c:	6022      	str	r2, [r4, #0]
    c45e:	461a      	mov	r2, r3
    c460:	f7fd fca6 	bl	9db0 <_write>
    c464:	1c43      	adds	r3, r0, #1
    c466:	d102      	bne.n	c46e <_write_r+0x1e>
    c468:	6823      	ldr	r3, [r4, #0]
    c46a:	b103      	cbz	r3, c46e <_write_r+0x1e>
    c46c:	602b      	str	r3, [r5, #0]
    c46e:	bd38      	pop	{r3, r4, r5, pc}
    c470:	200076a0 	.word	0x200076a0

0000c474 <_close_r>:
    c474:	b538      	push	{r3, r4, r5, lr}
    c476:	4c06      	ldr	r4, [pc, #24]	; (c490 <_close_r+0x1c>)
    c478:	2300      	movs	r3, #0
    c47a:	4605      	mov	r5, r0
    c47c:	4608      	mov	r0, r1
    c47e:	6023      	str	r3, [r4, #0]
    c480:	f7fa fbaa 	bl	6bd8 <_close>
    c484:	1c43      	adds	r3, r0, #1
    c486:	d102      	bne.n	c48e <_close_r+0x1a>
    c488:	6823      	ldr	r3, [r4, #0]
    c48a:	b103      	cbz	r3, c48e <_close_r+0x1a>
    c48c:	602b      	str	r3, [r5, #0]
    c48e:	bd38      	pop	{r3, r4, r5, pc}
    c490:	200076a0 	.word	0x200076a0

0000c494 <_fstat_r>:
    c494:	b538      	push	{r3, r4, r5, lr}
    c496:	4c07      	ldr	r4, [pc, #28]	; (c4b4 <_fstat_r+0x20>)
    c498:	2300      	movs	r3, #0
    c49a:	4605      	mov	r5, r0
    c49c:	4608      	mov	r0, r1
    c49e:	4611      	mov	r1, r2
    c4a0:	6023      	str	r3, [r4, #0]
    c4a2:	f7fa fb9c 	bl	6bde <_fstat>
    c4a6:	1c43      	adds	r3, r0, #1
    c4a8:	d102      	bne.n	c4b0 <_fstat_r+0x1c>
    c4aa:	6823      	ldr	r3, [r4, #0]
    c4ac:	b103      	cbz	r3, c4b0 <_fstat_r+0x1c>
    c4ae:	602b      	str	r3, [r5, #0]
    c4b0:	bd38      	pop	{r3, r4, r5, pc}
    c4b2:	bf00      	nop
    c4b4:	200076a0 	.word	0x200076a0

0000c4b8 <_isatty_r>:
    c4b8:	b538      	push	{r3, r4, r5, lr}
    c4ba:	4c06      	ldr	r4, [pc, #24]	; (c4d4 <_isatty_r+0x1c>)
    c4bc:	2300      	movs	r3, #0
    c4be:	4605      	mov	r5, r0
    c4c0:	4608      	mov	r0, r1
    c4c2:	6023      	str	r3, [r4, #0]
    c4c4:	f7fa fb90 	bl	6be8 <_isatty>
    c4c8:	1c43      	adds	r3, r0, #1
    c4ca:	d102      	bne.n	c4d2 <_isatty_r+0x1a>
    c4cc:	6823      	ldr	r3, [r4, #0]
    c4ce:	b103      	cbz	r3, c4d2 <_isatty_r+0x1a>
    c4d0:	602b      	str	r3, [r5, #0]
    c4d2:	bd38      	pop	{r3, r4, r5, pc}
    c4d4:	200076a0 	.word	0x200076a0

0000c4d8 <_lseek_r>:
    c4d8:	b538      	push	{r3, r4, r5, lr}
    c4da:	4c07      	ldr	r4, [pc, #28]	; (c4f8 <_lseek_r+0x20>)
    c4dc:	4605      	mov	r5, r0
    c4de:	4608      	mov	r0, r1
    c4e0:	4611      	mov	r1, r2
    c4e2:	2200      	movs	r2, #0
    c4e4:	6022      	str	r2, [r4, #0]
    c4e6:	461a      	mov	r2, r3
    c4e8:	f7fa fb80 	bl	6bec <_lseek>
    c4ec:	1c43      	adds	r3, r0, #1
    c4ee:	d102      	bne.n	c4f6 <_lseek_r+0x1e>
    c4f0:	6823      	ldr	r3, [r4, #0]
    c4f2:	b103      	cbz	r3, c4f6 <_lseek_r+0x1e>
    c4f4:	602b      	str	r3, [r5, #0]
    c4f6:	bd38      	pop	{r3, r4, r5, pc}
    c4f8:	200076a0 	.word	0x200076a0
    c4fc:	00000000 	.word	0x00000000

0000c500 <memchr>:
    c500:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c504:	2a10      	cmp	r2, #16
    c506:	db2b      	blt.n	c560 <memchr+0x60>
    c508:	f010 0f07 	tst.w	r0, #7
    c50c:	d008      	beq.n	c520 <memchr+0x20>
    c50e:	f810 3b01 	ldrb.w	r3, [r0], #1
    c512:	3a01      	subs	r2, #1
    c514:	428b      	cmp	r3, r1
    c516:	d02d      	beq.n	c574 <memchr+0x74>
    c518:	f010 0f07 	tst.w	r0, #7
    c51c:	b342      	cbz	r2, c570 <memchr+0x70>
    c51e:	d1f6      	bne.n	c50e <memchr+0xe>
    c520:	b4f0      	push	{r4, r5, r6, r7}
    c522:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c526:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    c52a:	f022 0407 	bic.w	r4, r2, #7
    c52e:	f07f 0700 	mvns.w	r7, #0
    c532:	2300      	movs	r3, #0
    c534:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    c538:	3c08      	subs	r4, #8
    c53a:	ea85 0501 	eor.w	r5, r5, r1
    c53e:	ea86 0601 	eor.w	r6, r6, r1
    c542:	fa85 f547 	uadd8	r5, r5, r7
    c546:	faa3 f587 	sel	r5, r3, r7
    c54a:	fa86 f647 	uadd8	r6, r6, r7
    c54e:	faa5 f687 	sel	r6, r5, r7
    c552:	b98e      	cbnz	r6, c578 <memchr+0x78>
    c554:	d1ee      	bne.n	c534 <memchr+0x34>
    c556:	bcf0      	pop	{r4, r5, r6, r7}
    c558:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c55c:	f002 0207 	and.w	r2, r2, #7
    c560:	b132      	cbz	r2, c570 <memchr+0x70>
    c562:	f810 3b01 	ldrb.w	r3, [r0], #1
    c566:	3a01      	subs	r2, #1
    c568:	ea83 0301 	eor.w	r3, r3, r1
    c56c:	b113      	cbz	r3, c574 <memchr+0x74>
    c56e:	d1f8      	bne.n	c562 <memchr+0x62>
    c570:	2000      	movs	r0, #0
    c572:	4770      	bx	lr
    c574:	3801      	subs	r0, #1
    c576:	4770      	bx	lr
    c578:	2d00      	cmp	r5, #0
    c57a:	bf06      	itte	eq
    c57c:	4635      	moveq	r5, r6
    c57e:	3803      	subeq	r0, #3
    c580:	3807      	subne	r0, #7
    c582:	f015 0f01 	tst.w	r5, #1
    c586:	d107      	bne.n	c598 <memchr+0x98>
    c588:	3001      	adds	r0, #1
    c58a:	f415 7f80 	tst.w	r5, #256	; 0x100
    c58e:	bf02      	ittt	eq
    c590:	3001      	addeq	r0, #1
    c592:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    c596:	3001      	addeq	r0, #1
    c598:	bcf0      	pop	{r4, r5, r6, r7}
    c59a:	3801      	subs	r0, #1
    c59c:	4770      	bx	lr
    c59e:	bf00      	nop

0000c5a0 <_read_r>:
    c5a0:	b538      	push	{r3, r4, r5, lr}
    c5a2:	4c07      	ldr	r4, [pc, #28]	; (c5c0 <_read_r+0x20>)
    c5a4:	4605      	mov	r5, r0
    c5a6:	4608      	mov	r0, r1
    c5a8:	4611      	mov	r1, r2
    c5aa:	2200      	movs	r2, #0
    c5ac:	6022      	str	r2, [r4, #0]
    c5ae:	461a      	mov	r2, r3
    c5b0:	f7fd fbee 	bl	9d90 <_read>
    c5b4:	1c43      	adds	r3, r0, #1
    c5b6:	d102      	bne.n	c5be <_read_r+0x1e>
    c5b8:	6823      	ldr	r3, [r4, #0]
    c5ba:	b103      	cbz	r3, c5be <_read_r+0x1e>
    c5bc:	602b      	str	r3, [r5, #0]
    c5be:	bd38      	pop	{r3, r4, r5, pc}
    c5c0:	200076a0 	.word	0x200076a0
    c5c4:	64726148 	.word	0x64726148
    c5c8:	65726177 	.word	0x65726177
    c5cc:	73655420 	.word	0x73655420
    c5d0:	6e492074 	.word	0x6e492074
    c5d4:	00007469 	.word	0x00007469

0000c5d8 <_adcs>:
    c5d8:	01000000 0003000c 00041807 00000000     ................
    c5e8:	0014080b 00010000 000c0100 18040003     ................
    c5f8:	00000004 080b0000 00000014              ............

0000c604 <_cfgs>:
    c604:	00200600 08068000 00200400 08068000     .. ....... .....
    c614:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    c634:	00200b00 14000003 00200a00 08000002     .. ....... .....
    c644:	00201300 14000003 00000000 00000000     .. .............
	...
    c6f4:	00005400 1c000000 00005300 0c000000     .T.......S......

0000c704 <user_mux_confs>:
	...
    c730:	04030201 04030201 00000000 00000000     ................
	...

0000c748 <channel_confs>:
    c748:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000c788 <interrupt_cfg>:
    c788:	00000002 00000002 00000002 00000002     ................
	...
    c808:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    c818:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000c828 <_usarts>:
    c828:	00000000 40100004 00030000 00700002     .......@......p.
    c838:	0000aaaa 00000000 00000001 40100004     ...............@
    c848:	00030000 00700002 0000aaaa 00000000     ......p.........
    c858:	00000002 40100004 00030000 00700002     .......@......p.
    c868:	00005555 00000000 00000004 40100004     UU.............@
    c878:	00030000 00700002 0000aaaa 00000000     ......p.........
    c888:	00000006 40100004 00030000 00700002     .......@......p.
    c898:	0000aaaa 00000000                       ........

0000c8a0 <_i2cms>:
    c8a0:	00000005 00200014 00000100 0000e6e5     ...... .........
    c8b0:	00d70000 02dc6c00                       .....l..

0000c8b8 <sercomspi_regs>:
    c8b8:	3020000c 00020000 00000000 01ff0005     .. 0............
    c8c8:	20000c03 00000000 00000000 ff000600     ... ............
    c8d8:	00000701 40003800 40003c00 4101a000     .....8.@.<.@...A
    c8e8:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    c8f8:	43001800                                ...C

0000c8fc <_tcs>:
    c8fc:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    c90c:	00000000 006c0001 00000308 00000021     ......l.....!...
    c91c:	00003a98 00000000 006d0002 00000308     .:........m.....
    c92c:	00000021 00003a98 00000000 006e0003     !....:........n.
    c93c:	00000308 00000021 00003a98 00000000     ....!....:......

0000c94c <_usb_ep_cfgs>:
    c94c:	20000824 00000000 00000040 00000000     $.. ....@.......
	...
    c964:	2000081c 00000000 00000008 200007dc     ... ........... 
    c974:	200007d4 00080040 00000000 00000000     ... @...........
	...
    c98c:	20000794 00400000 656d6954 2074756f     ... ..@.Timeout 
    c99c:	63736944 656e6e6f 26207463 73655220     Disconnect & Res
    c9ac:	52207465 69656365 00726576 7974227b     et Receiver.{"ty
    c9bc:	3a226570 52415722 474e494e 22202c22     pe":"WARNING", "
    c9cc:	61746164 5b203a22 22732522 0a0d7d5d     data": ["%s"]}..
    c9dc:	00000000 656d6954 2074756f 65522026     ....Timeout & Re
    c9ec:	20746573 65636552 72657669 00000000     set Receiver....
    c9fc:	645f7872 6c62756f 75625f65 72656666     rx_double_buffer
    ca0c:	65766f20 6e757272 00003120 645f7872      overrun 1..rx_d
    ca1c:	6c62756f 75625f65 72656666 65766f20     ouble_buffer ove
    ca2c:	6e757272 00003220 645f7872 6c62756f     rrun 2..rx_doubl
    ca3c:	75625f65 72656666 65766f20 6e757272     e_buffer overrun
    ca4c:	00003320 6d617246 74532065 20747261      3..Frame Start 
    ca5c:	7366664f 00007465 6e6e6f43 00746365     Offset..Connect.
    ca6c:	7974227b 3a226570 41572220 4e494e52     {"type": "WARNIN
    ca7c:	202c2247 74616422 203a2261 6e55225b     G", "data": ["Un
    ca8c:	776f6e6b 73654d20 65676173 70795420     know Message Typ
    ca9c:	7d5d2265 0000000d 7974227b 3a226570     e"]}....{"type":
    caac:	41572220 4e494e52 202c2247 74616422      "WARNING", "dat
    cabc:	203a2261 6e49225b 696c6176 68432064     a": ["Invalid Ch
    cacc:	736b6365 5d226d75 00000d7d 7974227b     ecksum"]}...{"ty
    cadc:	3a226570 52452220 22524f52 6422202c     pe": "ERROR", "d
    caec:	22617461 225b203a 6d617246 72452065     ata": ["Frame Er
    cafc:	22726f72 000d7d5d 7974227b 3a226570     ror"]}..{"type":
    cb0c:	52452220 22524f52 6422202c 22617461      "ERROR", "data"
    cb1c:	225b203a 69726150 45207974 726f7272     : ["Parity Error
    cb2c:	0d7d5d22 00000000 49505351 6f725020     "]}.....QSPI Pro
    cb3c:	6d617267 61745320 64657472 00000d0a     gram Started....
    cb4c:	73616c46 72652068 20657361 63637573     Flash erase succ
    cb5c:	66737365 0d0a6c75 00000000 73616c46     essful......Flas
    cb6c:	72772068 20657469 63637573 66737365     h write successf
    cb7c:	0d0a6c75 00000000 73616c46 65722068     ul......Flash re
    cb8c:	73206461 65636375 75667373 000d0a6c     ad successful...
    cb9c:	73616c46 61642068 76206174 66697265     Flash data verif
    cbac:	74616369 206e6f69 6c696166 0a2e6465     ication failed..
    cbbc:	0000000d 74697257 202d2065 64616552     ....Write - Read
    cbcc:	20736920 63637573 66737365 69206c75      is successful i
    cbdc:	5351206e 46204950 6873616c 6d656d20     n QSPI Flash mem
    cbec:	2e79726f 00000d0a 72617453 6e492074     ory.....Start In
    cbfc:	61697469 657a696c 00000064 7974227b     itialized...{"ty
    cc0c:	3a226570 474f4c22 22202c22 61746164     pe":"LOG", "data
    cc1c:	5b203a22 22732522 0a0d7d5d 00000000     ": ["%s"]}......
    cc2c:	6e6b6e55 5220776f 74657365 756f5320     Unknow Reset Sou
    cc3c:	00656372 55206f4e 2074696e 74736554     rce.No Unit Test
    cc4c:	00000000                                ....

0000cc50 <keyboard_report_desc>:
    cc50:	06090105 070501a1 e729e019 01250015     ..........)...%.
    cc60:	08950175 01810281 65290019 65250015     u.........)e..%e
    cc70:	06950875 08050081 05290119 01250015     u.........)...%.
    cc80:	05950175 03950291 00c00191              u...........

0000cc8c <mouse_report_desc>:
    cc8c:	02090105 010901a1 090500a1 03290119     ..............).
    cc9c:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    ccac:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    ccbc:	c0c00681                                ....

0000ccc0 <_global_impure_ptr>:
    ccc0:	20000060                                `.. 

0000ccc4 <__sf_fake_stderr>:
	...

0000cce4 <__sf_fake_stdin>:
	...

0000cd04 <__sf_fake_stdout>:
	...
    cd24:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    cd34:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    cd44:	31300046 35343332 39383736 64636261     F.0123456789abcd
    cd54:	00006665                                ef..

0000cd58 <_init>:
    cd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd5a:	bf00      	nop
    cd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cd5e:	bc08      	pop	{r3}
    cd60:	469e      	mov	lr, r3
    cd62:	4770      	bx	lr

0000cd64 <__init_array_start>:
    cd64:	00004289 	.word	0x00004289

0000cd68 <_fini>:
    cd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd6a:	bf00      	nop
    cd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cd6e:	bc08      	pop	{r3}
    cd70:	469e      	mov	lr, r3
    cd72:	4770      	bx	lr

0000cd74 <__fini_array_start>:
    cd74:	00004265 	.word	0x00004265
