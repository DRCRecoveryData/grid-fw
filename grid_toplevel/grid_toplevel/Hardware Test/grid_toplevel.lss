
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008288  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  00008288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200bc  2**0
                  CONTENTS
  4 .bss          00003434  200000c0  00008350  000200c0  2**4
                  ALLOC
  5 .stack        00010004  200034f4  0000b784  000200c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0006a190  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000984b  00000000  00000000  0008a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027cf5  00000000  00000000  00093b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e20  00000000  00000000  000bb813  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000028d8  00000000  00000000  000bd633  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040a62  00000000  00000000  000bff0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003192a  00000000  00000000  0010096d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011971c  00000000  00000000  00132297  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005408  00000000  00000000  0024b9b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 34 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     .4. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	a5 33 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .3..............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 55 30 00 00 69 30 00 00     ........U0..i0..
      bc:	b9 2e 00 00 c5 2e 00 00 d1 2e 00 00 dd 2e 00 00     ................
      cc:	e9 2e 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	5d 32 00 00 f5 3b 00 00 09 3c 00 00 1d 3c 00 00     ]2...;...<...<..
     104:	31 3c 00 00 45 3c 00 00 59 3c 00 00 6d 3c 00 00     1<..E<..Y<..m<..
     114:	81 3c 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .<..............
     124:	ed 02 00 00 95 3c 00 00 a9 3c 00 00 bd 3c 00 00     .....<...<...<..
     134:	d1 3c 00 00 e5 3c 00 00 f9 3c 00 00 0d 3d 00 00     .<...<...<...=..
     144:	21 3d 00 00 35 3d 00 00 49 3d 00 00 5d 3d 00 00     !=..5=..I=..]=..
     154:	71 3d 00 00 85 3d 00 00 99 3d 00 00 ad 3d 00 00     q=...=...=...=..
     164:	c1 3d 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .=..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 6d 59 00 00     ............mY..
     184:	79 59 00 00 85 59 00 00 91 59 00 00 00 00 00 00     yY...Y...Y......
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 01 47 00 00 15 47 00 00     .........G...G..
     1f4:	29 47 00 00 3d 47 00 00 ed 02 00 00 ed 02 00 00     )G..=G..........
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 55 2b 00 00 69 2b 00 00 7d 2b 00 00     ....U+..i+..}+..
     224:	91 2b 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .+..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000c0 	.word	0x200000c0
     280:	00000000 	.word	0x00000000
     284:	00008288 	.word	0x00008288

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00008288 	.word	0x00008288
     2c4:	200000c4 	.word	0x200000c4
     2c8:	00008288 	.word	0x00008288
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e15 	.word	0x00000e15
     2e4:	00006975 	.word	0x00006975
     2e8:	00005ac9 	.word	0x00005ac9

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	00008288 	.word	0x00008288
     36c:	200000bc 	.word	0x200000bc
     370:	200034f4 	.word	0x200034f4
     374:	200000c0 	.word	0x200000c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	00006981 	.word	0x00006981
     384:	000059ed 	.word	0x000059ed

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200000dc 	.word	0x200000dc
     408:	20000a50 	.word	0x20000a50
     40c:	20000b4c 	.word	0x20000b4c
     410:	43001c00 	.word	0x43001c00
     414:	00001a2d 	.word	0x00001a2d
     418:	00001a7d 	.word	0x00001a7d
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200000dc 	.word	0x200000dc
     4ac:	20000c24 	.word	0x20000c24
     4b0:	200009ec 	.word	0x200009ec
     4b4:	43002000 	.word	0x43002000
     4b8:	00001a2d 	.word	0x00001a2d
     4bc:	00001a7d 	.word	0x00001a7d
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	200009e8 	.word	0x200009e8
     4e8:	00001b15 	.word	0x00001b15

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	00001b55 	.word	0x00001b55

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	200009cc 	.word	0x200009cc
     54c:	00001b75 	.word	0x00001b75

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20000c90 	.word	0x20000c90
     718:	00001c91 	.word	0x00001c91
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000104 	.word	0x20000104
     7b4:	40003000 	.word	0x40003000
     7b8:	20000a7c 	.word	0x20000a7c
     7bc:	00002109 	.word	0x00002109
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000114 	.word	0x20000114
     858:	40003400 	.word	0x40003400
     85c:	20000ad0 	.word	0x20000ad0
     860:	00002109 	.word	0x00002109
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	20000a44 	.word	0x20000a44
     8f8:	000021f9 	.word	0x000021f9
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000944 	.word	0x20000944
     a04:	00001e21 	.word	0x00001e21
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000124 	.word	0x20000124
     aa4:	20000b84 	.word	0x20000b84
     aa8:	00002109 	.word	0x00002109
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	20000a04 	.word	0x20000a04
     b54:	00001c31 	.word	0x00001c31
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000134 	.word	0x20000134
     bf0:	43000800 	.word	0x43000800
     bf4:	20000bd4 	.word	0x20000bd4
     bf8:	00002109 	.word	0x00002109
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20000b20 	.word	0x20000b20
     cfc:	00001ead 	.word	0x00001ead
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	00001b21 	.word	0x00001b21

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	00002485 	.word	0x00002485
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b04      	ldr	r3, [pc, #16]	; (e04 <WDT_0_init+0x14>)
     df4:	4798      	blx	r3
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);

	wdt->dev.hw = (void *)hw;
     df6:	4804      	ldr	r0, [pc, #16]	; (e08 <WDT_0_init+0x18>)
     df8:	4b04      	ldr	r3, [pc, #16]	; (e0c <WDT_0_init+0x1c>)
     dfa:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     dfc:	4b04      	ldr	r3, [pc, #16]	; (e10 <WDT_0_init+0x20>)
     dfe:	4798      	blx	r3
     e00:	bd08      	pop	{r3, pc}
     e02:	bf00      	nop
     e04:	00000de1 	.word	0x00000de1
     e08:	20000acc 	.word	0x20000acc
     e0c:	40002000 	.word	0x40002000
     e10:	0000599d 	.word	0x0000599d

00000e14 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e18:	4ba3      	ldr	r3, [pc, #652]	; (10a8 <system_init+0x294>)
     e1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e1c:	4ba3      	ldr	r3, [pc, #652]	; (10ac <system_init+0x298>)
     e1e:	2220      	movs	r2, #32
     e20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e28:	629a      	str	r2, [r3, #40]	; 0x28
     e2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e40:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e42:	4e9b      	ldr	r6, [pc, #620]	; (10b0 <system_init+0x29c>)
     e44:	629e      	str	r6, [r3, #40]	; 0x28
     e46:	499b      	ldr	r1, [pc, #620]	; (10b4 <system_init+0x2a0>)
     e48:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e4a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e4e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e52:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e56:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e5e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e62:	2180      	movs	r1, #128	; 0x80
     e64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e68:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e6c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e70:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e74:	4d90      	ldr	r5, [pc, #576]	; (10b8 <system_init+0x2a4>)
     e76:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e7a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e7e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e82:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e86:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e8e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     e96:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e9a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ea2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     ea6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eaa:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     eae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     eb2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     eb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eba:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ebe:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ec2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ec6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ece:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ed2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ed6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eda:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     ede:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ee2:	4c76      	ldr	r4, [pc, #472]	; (10bc <system_init+0x2a8>)
     ee4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ee8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     eec:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     ef0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     ef4:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ef8:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     efc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f00:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f04:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f08:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f0c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 114c <system_init+0x338>
     f10:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f14:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f1c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f20:	f045 0504 	orr.w	r5, r5, #4
     f24:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f28:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f2c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f30:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f34:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f38:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f3c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f40:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f44:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f48:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f50:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f5c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f60:	4a57      	ldr	r2, [pc, #348]	; (10c0 <system_init+0x2ac>)
     f62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f66:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f6e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f72:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f7a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     f92:	494c      	ldr	r1, [pc, #304]	; (10c4 <system_init+0x2b0>)
     f94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f98:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     f9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fa0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fa4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fa8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fb0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fb4:	4944      	ldr	r1, [pc, #272]	; (10c8 <system_init+0x2b4>)
     fb6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fba:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fbe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fc2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fc6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fca:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fd2:	4a3e      	ldr	r2, [pc, #248]	; (10cc <system_init+0x2b8>)
     fd4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fd8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fe0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     fe4:	4b3a      	ldr	r3, [pc, #232]	; (10d0 <system_init+0x2bc>)
     fe6:	4798      	blx	r3
	ADC_1_init();
     fe8:	4b3a      	ldr	r3, [pc, #232]	; (10d4 <system_init+0x2c0>)
     fea:	4798      	blx	r3

	CRC_0_init();
     fec:	4b3a      	ldr	r3, [pc, #232]	; (10d8 <system_init+0x2c4>)
     fee:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     ff0:	4b3a      	ldr	r3, [pc, #232]	; (10dc <system_init+0x2c8>)
     ff2:	4798      	blx	r3

	FLASH_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2cc>)
     ff6:	4798      	blx	r3

	QSPI_INSTANCE_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2d0>)
     ffa:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     ffc:	4c3a      	ldr	r4, [pc, #232]	; (10e8 <system_init+0x2d4>)
     ffe:	6963      	ldr	r3, [r4, #20]
    1000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1004:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1006:	4b39      	ldr	r3, [pc, #228]	; (10ec <system_init+0x2d8>)
    1008:	4798      	blx	r3
    100a:	4602      	mov	r2, r0
    100c:	4938      	ldr	r1, [pc, #224]	; (10f0 <system_init+0x2dc>)
    100e:	4839      	ldr	r0, [pc, #228]	; (10f4 <system_init+0x2e0>)
    1010:	4d39      	ldr	r5, [pc, #228]	; (10f8 <system_init+0x2e4>)
    1012:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1014:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2e8>)
    1016:	4798      	blx	r3
	USART_NORTH_init();
    1018:	4b39      	ldr	r3, [pc, #228]	; (1100 <system_init+0x2ec>)
    101a:	4798      	blx	r3

	GRID_AUX_init();
    101c:	4b39      	ldr	r3, [pc, #228]	; (1104 <system_init+0x2f0>)
    101e:	4798      	blx	r3

	UI_SPI_init();
    1020:	4b39      	ldr	r3, [pc, #228]	; (1108 <system_init+0x2f4>)
    1022:	4798      	blx	r3
	USART_WEST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2f8>)
    1026:	4798      	blx	r3

	SYS_I2C_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2fc>)
    102a:	4798      	blx	r3
	USART_SOUTH_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x300>)
    102e:	4798      	blx	r3

	GRID_LED_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x304>)
    1032:	4798      	blx	r3

	delay_driver_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x308>)
    1036:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1038:	6963      	ldr	r3, [r4, #20]
    103a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    103e:	6163      	str	r3, [r4, #20]
    1040:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1044:	f04f 0840 	mov.w	r8, #64	; 0x40
    1048:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    104c:	4e34      	ldr	r6, [pc, #208]	; (1120 <system_init+0x30c>)
    104e:	47b0      	blx	r6
    1050:	4602      	mov	r2, r0
    1052:	4934      	ldr	r1, [pc, #208]	; (1124 <system_init+0x310>)
    1054:	4834      	ldr	r0, [pc, #208]	; (1128 <system_init+0x314>)
    1056:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1058:	6963      	ldr	r3, [r4, #20]
    105a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    105e:	6163      	str	r3, [r4, #20]
    1060:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1064:	47b0      	blx	r6
    1066:	4602      	mov	r2, r0
    1068:	4930      	ldr	r1, [pc, #192]	; (112c <system_init+0x318>)
    106a:	4831      	ldr	r0, [pc, #196]	; (1130 <system_init+0x31c>)
    106c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    106e:	69a3      	ldr	r3, [r4, #24]
    1070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1074:	61a3      	str	r3, [r4, #24]
    1076:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    107a:	47b0      	blx	r6
    107c:	4602      	mov	r2, r0
    107e:	492d      	ldr	r1, [pc, #180]	; (1134 <system_init+0x320>)
    1080:	482d      	ldr	r0, [pc, #180]	; (1138 <system_init+0x324>)
    1082:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1084:	69a3      	ldr	r3, [r4, #24]
    1086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    108a:	61a3      	str	r3, [r4, #24]
    108c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    1090:	47b0      	blx	r6
    1092:	4602      	mov	r2, r0
    1094:	4929      	ldr	r1, [pc, #164]	; (113c <system_init+0x328>)
    1096:	482a      	ldr	r0, [pc, #168]	; (1140 <system_init+0x32c>)
    1098:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    109a:	4b2a      	ldr	r3, [pc, #168]	; (1144 <system_init+0x330>)
    109c:	4798      	blx	r3

	WDT_0_init();
    109e:	4b2a      	ldr	r3, [pc, #168]	; (1148 <system_init+0x334>)
    10a0:	4798      	blx	r3
    10a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10a6:	bf00      	nop
    10a8:	00002bcd 	.word	0x00002bcd
    10ac:	41008000 	.word	0x41008000
    10b0:	40020000 	.word	0x40020000
    10b4:	c0020020 	.word	0xc0020020
    10b8:	c0020000 	.word	0xc0020000
    10bc:	40028000 	.word	0x40028000
    10c0:	c0020004 	.word	0xc0020004
    10c4:	c0000008 	.word	0xc0000008
    10c8:	c0000010 	.word	0xc0000010
    10cc:	c0000020 	.word	0xc0000020
    10d0:	00000389 	.word	0x00000389
    10d4:	00000421 	.word	0x00000421
    10d8:	000004c5 	.word	0x000004c5
    10dc:	000004ed 	.word	0x000004ed
    10e0:	00000531 	.word	0x00000531
    10e4:	000006f9 	.word	0x000006f9
    10e8:	40000800 	.word	0x40000800
    10ec:	0000339d 	.word	0x0000339d
    10f0:	40002400 	.word	0x40002400
    10f4:	2000098c 	.word	0x2000098c
    10f8:	00001fd5 	.word	0x00001fd5
    10fc:	0000078d 	.word	0x0000078d
    1100:	00000831 	.word	0x00000831
    1104:	000008d5 	.word	0x000008d5
    1108:	000009e5 	.word	0x000009e5
    110c:	00000a79 	.word	0x00000a79
    1110:	00000b35 	.word	0x00000b35
    1114:	00000bc9 	.word	0x00000bc9
    1118:	00000cdd 	.word	0x00000cdd
    111c:	00000d05 	.word	0x00000d05
    1120:	000046f9 	.word	0x000046f9
    1124:	40003800 	.word	0x40003800
    1128:	20000c70 	.word	0x20000c70
    112c:	40003c00 	.word	0x40003c00
    1130:	20000b64 	.word	0x20000b64
    1134:	4101a000 	.word	0x4101a000
    1138:	200009ac 	.word	0x200009ac
    113c:	4101c000 	.word	0x4101c000
    1140:	20000c50 	.word	0x20000c50
    1144:	00000dc5 	.word	0x00000dc5
    1148:	00000df1 	.word	0x00000df1
    114c:	40020800 	.word	0x40020800

00001150 <grid_hardwaretest_led_test_init>:
		
	}

}

void grid_hardwaretest_led_test_init(struct grid_led_model* mod, uint8_t num){
    1150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1154:	b082      	sub	sp, #8
    1156:	4680      	mov	r8, r0
    1158:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    115a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    115e:	4b0c      	ldr	r3, [pc, #48]	; (1190 <grid_hardwaretest_led_test_init+0x40>)
    1160:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	
	gpio_set_pin_level(UI_PWR_EN, true);
	
	grid_led_init(mod, num);
    1164:	4b0b      	ldr	r3, [pc, #44]	; (1194 <grid_hardwaretest_led_test_init+0x44>)
    1166:	4798      	blx	r3
	
	for(uint8_t i=0; i<num; i++){
    1168:	b176      	cbz	r6, 1188 <grid_hardwaretest_led_test_init+0x38>
    116a:	3e01      	subs	r6, #1
    116c:	b2f6      	uxtb	r6, r6
    116e:	3601      	adds	r6, #1
    1170:	2400      	movs	r4, #0
		
		grid_led_set_color(mod, i, 0, 0, 0);
    1172:	4625      	mov	r5, r4
    1174:	4f08      	ldr	r7, [pc, #32]	; (1198 <grid_hardwaretest_led_test_init+0x48>)
    1176:	9500      	str	r5, [sp, #0]
    1178:	462b      	mov	r3, r5
    117a:	462a      	mov	r2, r5
    117c:	4621      	mov	r1, r4
    117e:	4640      	mov	r0, r8
    1180:	47b8      	blx	r7
    1182:	3401      	adds	r4, #1
	for(uint8_t i=0; i<num; i++){
    1184:	42b4      	cmp	r4, r6
    1186:	d1f6      	bne.n	1176 <grid_hardwaretest_led_test_init+0x26>
		
	}

	
}
    1188:	b002      	add	sp, #8
    118a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    118e:	bf00      	nop
    1190:	41008000 	.word	0x41008000
    1194:	000018bd 	.word	0x000018bd
    1198:	0000153d 	.word	0x0000153d

0000119c <grid_hardwaretest_led_test>:


void grid_hardwaretest_led_test(struct grid_led_model* mod, uint32_t loop){
    119c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    11a0:	b083      	sub	sp, #12
    11a2:	4605      	mov	r5, r0
		
		
	for(uint8_t i=0; i<mod->led_number; i++){
    11a4:	7843      	ldrb	r3, [r0, #1]
    11a6:	b333      	cbz	r3, 11f6 <grid_hardwaretest_led_test+0x5a>
	
		grid_led_set_color(mod, i, loop/10%128*(loop/1280%3==0), loop/10%128*(loop/1280%3==1), loop/10%128*(loop/1280%3==2));
    11a8:	4e18      	ldr	r6, [pc, #96]	; (120c <grid_hardwaretest_led_test+0x70>)
    11aa:	fba6 3601 	umull	r3, r6, r6, r1
    11ae:	f3c6 07c6 	ubfx	r7, r6, #3, #7
    11b2:	0ab6      	lsrs	r6, r6, #10
    11b4:	4b16      	ldr	r3, [pc, #88]	; (1210 <grid_hardwaretest_led_test+0x74>)
    11b6:	fba3 2306 	umull	r2, r3, r3, r6
    11ba:	085b      	lsrs	r3, r3, #1
    11bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    11c0:	1ab3      	subs	r3, r6, r2
    11c2:	4296      	cmp	r6, r2
    11c4:	bf0c      	ite	eq
    11c6:	46b9      	moveq	r9, r7
    11c8:	f04f 0900 	movne.w	r9, #0
    11cc:	2b01      	cmp	r3, #1
    11ce:	bf0c      	ite	eq
    11d0:	46b8      	moveq	r8, r7
    11d2:	f04f 0800 	movne.w	r8, #0
    11d6:	2b02      	cmp	r3, #2
    11d8:	bf18      	it	ne
    11da:	2700      	movne	r7, #0
    11dc:	2400      	movs	r4, #0
    11de:	4e0d      	ldr	r6, [pc, #52]	; (1214 <grid_hardwaretest_led_test+0x78>)
    11e0:	9700      	str	r7, [sp, #0]
    11e2:	4643      	mov	r3, r8
    11e4:	464a      	mov	r2, r9
    11e6:	4621      	mov	r1, r4
    11e8:	4628      	mov	r0, r5
    11ea:	47b0      	blx	r6
	for(uint8_t i=0; i<mod->led_number; i++){
    11ec:	3401      	adds	r4, #1
    11ee:	b2e4      	uxtb	r4, r4
    11f0:	786b      	ldrb	r3, [r5, #1]
    11f2:	42a3      	cmp	r3, r4
    11f4:	d8f4      	bhi.n	11e0 <grid_hardwaretest_led_test+0x44>
		
		
	//grid_led_render_all(mod);
		
		
	while(grid_led_hardware_is_transfer_completed(mod) != 1){
    11f6:	4c08      	ldr	r4, [pc, #32]	; (1218 <grid_hardwaretest_led_test+0x7c>)
    11f8:	4628      	mov	r0, r5
    11fa:	47a0      	blx	r4
    11fc:	2801      	cmp	r0, #1
    11fe:	d1fb      	bne.n	11f8 <grid_hardwaretest_led_test+0x5c>
			
	}
	grid_led_hardware_start_transfer(mod);
    1200:	4628      	mov	r0, r5
    1202:	4b06      	ldr	r3, [pc, #24]	; (121c <grid_hardwaretest_led_test+0x80>)
    1204:	4798      	blx	r3
	
}
    1206:	b003      	add	sp, #12
    1208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    120c:	cccccccd 	.word	0xcccccccd
    1210:	aaaaaaab 	.word	0xaaaaaaab
    1214:	0000153d 	.word	0x0000153d
    1218:	000019ad 	.word	0x000019ad
    121c:	00001981 	.word	0x00001981

00001220 <grid_hardwaretest_port_test>:


void grid_hardwaretest_port_test(uint32_t loop){
    1220:	b410      	push	{r4}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1222:	4baa      	ldr	r3, [pc, #680]	; (14cc <grid_hardwaretest_port_test+0x2ac>)
    1224:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1228:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    122c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1230:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    1234:	4aa6      	ldr	r2, [pc, #664]	; (14d0 <grid_hardwaretest_port_test+0x2b0>)
    1236:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    123a:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    123e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1242:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1246:	2280      	movs	r2, #128	; 0x80
    1248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    124c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1250:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1254:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1258:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    125c:	f893 40c7 	ldrb.w	r4, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    1260:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1264:	f883 40c7 	strb.w	r4, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1268:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
    126c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1270:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    1274:	4c97      	ldr	r4, [pc, #604]	; (14d4 <grid_hardwaretest_port_test+0x2b4>)
    1276:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    127a:	f893 415b 	ldrb.w	r4, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    127e:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1282:	f883 415b 	strb.w	r4, [r3, #347]	; 0x15b
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1286:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    128a:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    128e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    1292:	4c91      	ldr	r4, [pc, #580]	; (14d8 <grid_hardwaretest_port_test+0x2b8>)
    1294:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1298:	f893 415c 	ldrb.w	r4, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    129c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12a0:	f883 415c 	strb.w	r4, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12a4:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    12a8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12ac:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    12b0:	4c8a      	ldr	r4, [pc, #552]	; (14dc <grid_hardwaretest_port_test+0x2bc>)
    12b2:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12b6:	f893 4151 	ldrb.w	r4, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    12ba:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12be:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12c2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    12c6:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12ca:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    12ce:	4984      	ldr	r1, [pc, #528]	; (14e0 <grid_hardwaretest_port_test+0x2c0>)
    12d0:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12d4:	f893 1150 	ldrb.w	r1, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    12d8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12dc:	f883 1150 	strb.w	r1, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    12e4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12e8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    12ec:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    12f0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12f4:	f893 114d 	ldrb.w	r1, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
    12f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12fc:	f883 114d 	strb.w	r1, [r3, #333]	; 0x14d
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1304:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1308:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    130c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    1310:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1314:	f893 114c 	ldrb.w	r1, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    1318:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    131c:	f883 114c 	strb.w	r1, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1320:	f44f 7180 	mov.w	r1, #256	; 0x100
    1324:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1328:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    132c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1330:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1334:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    1338:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    133c:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1340:	f44f 7100 	mov.w	r1, #512	; 0x200
    1344:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1348:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    134c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1350:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1354:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    1358:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    135c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(PB09, GPIO_PIN_FUNCTION_OFF);
			

		
	if (loop%1000 == 0){
    1360:	4b60      	ldr	r3, [pc, #384]	; (14e4 <grid_hardwaretest_port_test+0x2c4>)
    1362:	fba3 2300 	umull	r2, r3, r3, r0
    1366:	099b      	lsrs	r3, r3, #6
    1368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    136c:	fb02 0313 	mls	r3, r2, r3, r0
    1370:	2b00      	cmp	r3, #0
    1372:	d154      	bne.n	141e <grid_hardwaretest_port_test+0x1fe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1374:	4a55      	ldr	r2, [pc, #340]	; (14cc <grid_hardwaretest_port_test+0x2ac>)
    1376:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    137a:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    137e:	2180      	movs	r1, #128	; 0x80
    1380:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
    1384:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1388:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    138c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1390:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    1394:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    1398:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    139c:	f8c2 4114 	str.w	r4, [r2, #276]	; 0x114
    13a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    13a4:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    13a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    13ac:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    13b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    13b4:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
    13b8:	f44f 7100 	mov.w	r1, #512	; 0x200
    13bc:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
			
		gpio_set_pin_level(PB08, true);
		gpio_set_pin_level(PB09, true);
			
	}
	if (loop%1000 == 750){
    13c0:	f240 22ee 	movw	r2, #750	; 0x2ee
    13c4:	4293      	cmp	r3, r2
    13c6:	d127      	bne.n	1418 <grid_hardwaretest_port_test+0x1f8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    13c8:	4b40      	ldr	r3, [pc, #256]	; (14cc <grid_hardwaretest_port_test+0x2ac>)
    13ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    13ce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    13d2:	2280      	movs	r2, #128	; 0x80
    13d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    13d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    13dc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    13e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    13e4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    13e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    13f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    13f4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    13f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    13fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    1400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1404:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    1408:	f44f 7280 	mov.w	r2, #256	; 0x100
    140c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1410:	f44f 7200 	mov.w	r2, #512	; 0x200
    1414:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	}
		

	
	
}
    1418:	f85d 4b04 	ldr.w	r4, [sp], #4
    141c:	4770      	bx	lr
	if (loop%1000 == 250){
    141e:	2bfa      	cmp	r3, #250	; 0xfa
    1420:	d128      	bne.n	1474 <grid_hardwaretest_port_test+0x254>
    1422:	4b2a      	ldr	r3, [pc, #168]	; (14cc <grid_hardwaretest_port_test+0x2ac>)
    1424:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1428:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    142c:	2280      	movs	r2, #128	; 0x80
    142e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    1436:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    143a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    143e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1446:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    144a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    144e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1456:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    145a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    145e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1462:	f44f 7280 	mov.w	r2, #256	; 0x100
    1466:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    146a:	f44f 7200 	mov.w	r2, #512	; 0x200
    146e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1472:	e7d1      	b.n	1418 <grid_hardwaretest_port_test+0x1f8>
	if (loop%1000 == 500){
    1474:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    1478:	d1a2      	bne.n	13c0 <grid_hardwaretest_port_test+0x1a0>
    147a:	4b14      	ldr	r3, [pc, #80]	; (14cc <grid_hardwaretest_port_test+0x2ac>)
    147c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1480:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1484:	2280      	movs	r2, #128	; 0x80
    1486:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    148a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    148e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1496:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    149a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    149e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    14a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    14a6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    14aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    14ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    14b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    14b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    14ba:	f44f 7280 	mov.w	r2, #256	; 0x100
    14be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    14c2:	f44f 7200 	mov.w	r2, #512	; 0x200
    14c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    14ca:	e7a5      	b.n	1418 <grid_hardwaretest_port_test+0x1f8>
    14cc:	41008000 	.word	0x41008000
    14d0:	c0000004 	.word	0xc0000004
    14d4:	c0000800 	.word	0xc0000800
    14d8:	c0001000 	.word	0xc0001000
    14dc:	c0000002 	.word	0xc0000002
    14e0:	c0000001 	.word	0xc0000001
    14e4:	10624dd3 	.word	0x10624dd3

000014e8 <grid_hardwaretest_main>:
void grid_hardwaretest_main(){
    14e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Hardware Test Init");
    14ea:	480a      	ldr	r0, [pc, #40]	; (1514 <grid_hardwaretest_main+0x2c>)
    14ec:	4b0a      	ldr	r3, [pc, #40]	; (1518 <grid_hardwaretest_main+0x30>)
    14ee:	4798      	blx	r3
	grid_hardwaretest_led_test_init(&grid_led_state, 16);
    14f0:	2110      	movs	r1, #16
    14f2:	480a      	ldr	r0, [pc, #40]	; (151c <grid_hardwaretest_main+0x34>)
    14f4:	4b0a      	ldr	r3, [pc, #40]	; (1520 <grid_hardwaretest_main+0x38>)
    14f6:	4798      	blx	r3
	uint32_t counter = 0;
    14f8:	2400      	movs	r4, #0
		grid_hardwaretest_port_test(counter);
    14fa:	4f0a      	ldr	r7, [pc, #40]	; (1524 <grid_hardwaretest_main+0x3c>)
		grid_hardwaretest_led_test(&grid_led_state, counter);
    14fc:	4e07      	ldr	r6, [pc, #28]	; (151c <grid_hardwaretest_main+0x34>)
    14fe:	4d0a      	ldr	r5, [pc, #40]	; (1528 <grid_hardwaretest_main+0x40>)
		grid_hardwaretest_port_test(counter);
    1500:	4620      	mov	r0, r4
    1502:	47b8      	blx	r7
		grid_hardwaretest_led_test(&grid_led_state, counter);
    1504:	4621      	mov	r1, r4
    1506:	4630      	mov	r0, r6
    1508:	47a8      	blx	r5
		delay_ms(1);	
    150a:	2001      	movs	r0, #1
    150c:	4b07      	ldr	r3, [pc, #28]	; (152c <grid_hardwaretest_main+0x44>)
    150e:	4798      	blx	r3
		counter++;			
    1510:	3401      	adds	r4, #1
    1512:	e7f5      	b.n	1500 <grid_hardwaretest_main+0x18>
    1514:	00007ac4 	.word	0x00007ac4
    1518:	00006b59 	.word	0x00006b59
    151c:	200030a4 	.word	0x200030a4
    1520:	00001151 	.word	0x00001151
    1524:	00001221 	.word	0x00001221
    1528:	0000119d 	.word	0x0000119d
    152c:	00001b35 	.word	0x00001b35

00001530 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1530:	2201      	movs	r2, #1
    1532:	4b01      	ldr	r3, [pc, #4]	; (1538 <grid_led_hardware_transfer_complete_cb+0x8>)
    1534:	701a      	strb	r2, [r3, #0]
    1536:	4770      	bx	lr
    1538:	20000ca0 	.word	0x20000ca0

0000153c <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    153c:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    153e:	7844      	ldrb	r4, [r0, #1]
    1540:	428c      	cmp	r4, r1
    1542:	d802      	bhi.n	154a <grid_led_set_color+0xe>
		return -1;		
    1544:	20ff      	movs	r0, #255	; 0xff
}
    1546:	bc30      	pop	{r4, r5}
    1548:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    154a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    154e:	0089      	lsls	r1, r1, #2
    1550:	4c09      	ldr	r4, [pc, #36]	; (1578 <grid_led_set_color+0x3c>)
    1552:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1556:	68c3      	ldr	r3, [r0, #12]
    1558:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    155a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    155e:	68c3      	ldr	r3, [r0, #12]
    1560:	440b      	add	r3, r1
    1562:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1564:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1568:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    156c:	68c3      	ldr	r3, [r0, #12]
    156e:	4419      	add	r1, r3
    1570:	608a      	str	r2, [r1, #8]
		return 0;
    1572:	2000      	movs	r0, #0
    1574:	e7e7      	b.n	1546 <grid_led_set_color+0xa>
    1576:	bf00      	nop
    1578:	200017c0 	.word	0x200017c0

0000157c <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    157c:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    157e:	4c06      	ldr	r4, [pc, #24]	; (1598 <grid_led_hardware_init+0x1c>)
    1580:	f100 0114 	add.w	r1, r0, #20
    1584:	4620      	mov	r0, r4
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <grid_led_hardware_init+0x20>)
    1588:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    158a:	4a05      	ldr	r2, [pc, #20]	; (15a0 <grid_led_hardware_init+0x24>)
    158c:	2100      	movs	r1, #0
    158e:	4620      	mov	r0, r4
    1590:	4b04      	ldr	r3, [pc, #16]	; (15a4 <grid_led_hardware_init+0x28>)
    1592:	4798      	blx	r3
    1594:	bd10      	pop	{r4, pc}
    1596:	bf00      	nop
    1598:	20000b20 	.word	0x20000b20
    159c:	00001ef5 	.word	0x00001ef5
    15a0:	00001531 	.word	0x00001531
    15a4:	00001ee5 	.word	0x00001ee5

000015a8 <grid_led_set_min>:
	/** END */
	
}


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    15a8:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    15aa:	7844      	ldrb	r4, [r0, #1]
    15ac:	fb02 1404 	mla	r4, r2, r4, r1
    15b0:	6905      	ldr	r5, [r0, #16]
    15b2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    15b6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    15ba:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    15bc:	7843      	ldrb	r3, [r0, #1]
    15be:	fb02 1303 	mla	r3, r2, r3, r1
    15c2:	6904      	ldr	r4, [r0, #16]
    15c4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    15c8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    15cc:	4423      	add	r3, r4
    15ce:	f89d 400c 	ldrb.w	r4, [sp, #12]
    15d2:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    15d4:	7843      	ldrb	r3, [r0, #1]
    15d6:	fb02 1203 	mla	r2, r2, r3, r1
    15da:	6903      	ldr	r3, [r0, #16]
    15dc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    15e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    15e4:	441a      	add	r2, r3
    15e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    15ea:	7093      	strb	r3, [r2, #2]
}
    15ec:	bc70      	pop	{r4, r5, r6}
    15ee:	4770      	bx	lr

000015f0 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    15f0:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    15f2:	7844      	ldrb	r4, [r0, #1]
    15f4:	fb02 1404 	mla	r4, r2, r4, r1
    15f8:	6905      	ldr	r5, [r0, #16]
    15fa:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    15fe:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1602:	442c      	add	r4, r5
    1604:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    1606:	7843      	ldrb	r3, [r0, #1]
    1608:	fb02 1303 	mla	r3, r2, r3, r1
    160c:	6904      	ldr	r4, [r0, #16]
    160e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1612:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1616:	4423      	add	r3, r4
    1618:	f89d 400c 	ldrb.w	r4, [sp, #12]
    161c:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    161e:	7843      	ldrb	r3, [r0, #1]
    1620:	fb02 1203 	mla	r2, r2, r3, r1
    1624:	6903      	ldr	r3, [r0, #16]
    1626:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    162a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    162e:	441a      	add	r2, r3
    1630:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1634:	7153      	strb	r3, [r2, #5]
}
    1636:	bc70      	pop	{r4, r5, r6}
    1638:	4770      	bx	lr

0000163a <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    163a:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    163c:	7844      	ldrb	r4, [r0, #1]
    163e:	fb02 1404 	mla	r4, r2, r4, r1
    1642:	6905      	ldr	r5, [r0, #16]
    1644:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1648:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    164c:	442c      	add	r4, r5
    164e:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    1650:	7843      	ldrb	r3, [r0, #1]
    1652:	fb02 1303 	mla	r3, r2, r3, r1
    1656:	6904      	ldr	r4, [r0, #16]
    1658:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    165c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1660:	4423      	add	r3, r4
    1662:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1666:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    1668:	7843      	ldrb	r3, [r0, #1]
    166a:	fb02 1203 	mla	r2, r2, r3, r1
    166e:	6903      	ldr	r3, [r0, #16]
    1670:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1674:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1678:	441a      	add	r2, r3
    167a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    167e:	7213      	strb	r3, [r2, #8]
}
    1680:	bc70      	pop	{r4, r5, r6}
    1682:	4770      	bx	lr

00001684 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1684:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    1686:	7844      	ldrb	r4, [r0, #1]
    1688:	fb02 1204 	mla	r2, r2, r4, r1
    168c:	6901      	ldr	r1, [r0, #16]
    168e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1692:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1696:	440a      	add	r2, r1
    1698:	72d3      	strb	r3, [r2, #11]
}
    169a:	f85d 4b04 	ldr.w	r4, [sp], #4
    169e:	4770      	bx	lr

000016a0 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    16a0:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    16a2:	7844      	ldrb	r4, [r0, #1]
    16a4:	fb02 1204 	mla	r2, r2, r4, r1
    16a8:	6901      	ldr	r1, [r0, #16]
    16aa:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    16ae:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    16b2:	440a      	add	r2, r1
    16b4:	7313      	strb	r3, [r2, #12]
}
    16b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    16ba:	4770      	bx	lr

000016bc <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    16bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16c0:	b083      	sub	sp, #12
    16c2:	4604      	mov	r4, r0
	mod->led_number = length;
    16c4:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    16c6:	b2cd      	uxtb	r5, r1
    16c8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    16cc:	0080      	lsls	r0, r0, #2
    16ce:	3090      	adds	r0, #144	; 0x90
    16d0:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    16d2:	4f3e      	ldr	r7, [pc, #248]	; (17cc <grid_led_buffer_init+0x110>)
    16d4:	47b8      	blx	r7
    16d6:	4606      	mov	r6, r0
    16d8:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    16da:	f100 0390 	add.w	r3, r0, #144	; 0x90
    16de:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    16e0:	201a      	movs	r0, #26
    16e2:	fb00 f005 	mul.w	r0, r0, r5
    16e6:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    16e8:	2e00      	cmp	r6, #0
    16ea:	d06e      	beq.n	17ca <grid_led_buffer_init+0x10e>
    16ec:	2800      	cmp	r0, #0
    16ee:	d06c      	beq.n	17ca <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    16f0:	6120      	str	r0, [r4, #16]
    16f2:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    16f4:	4619      	mov	r1, r3
    16f6:	68a2      	ldr	r2, [r4, #8]
    16f8:	54d1      	strb	r1, [r2, r3]
    16fa:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    16fc:	2b90      	cmp	r3, #144	; 0x90
    16fe:	d1fa      	bne.n	16f6 <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    1700:	7863      	ldrb	r3, [r4, #1]
    1702:	2b00      	cmp	r3, #0
    1704:	d05e      	beq.n	17c4 <grid_led_buffer_init+0x108>
    1706:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    1708:	462e      	mov	r6, r5
    170a:	4f31      	ldr	r7, [pc, #196]	; (17d0 <grid_led_buffer_init+0x114>)
    170c:	9600      	str	r6, [sp, #0]
    170e:	4633      	mov	r3, r6
    1710:	4632      	mov	r2, r6
    1712:	4629      	mov	r1, r5
    1714:	4620      	mov	r0, r4
    1716:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    1718:	3501      	adds	r5, #1
    171a:	7863      	ldrb	r3, [r4, #1]
    171c:	42ab      	cmp	r3, r5
    171e:	d8f5      	bhi.n	170c <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    1720:	2b00      	cmp	r3, #0
    1722:	d04f      	beq.n	17c4 <grid_led_buffer_init+0x108>
    1724:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1726:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 17d8 <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    172a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 17dc <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    172e:	2500      	movs	r5, #0
    1730:	9501      	str	r5, [sp, #4]
    1732:	9500      	str	r5, [sp, #0]
    1734:	462b      	mov	r3, r5
    1736:	462a      	mov	r2, r5
    1738:	4631      	mov	r1, r6
    173a:	4620      	mov	r0, r4
    173c:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    173e:	9501      	str	r5, [sp, #4]
    1740:	237f      	movs	r3, #127	; 0x7f
    1742:	9300      	str	r3, [sp, #0]
    1744:	462b      	mov	r3, r5
    1746:	462a      	mov	r2, r5
    1748:	4631      	mov	r1, r6
    174a:	4620      	mov	r0, r4
    174c:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    174e:	9501      	str	r5, [sp, #4]
    1750:	23ff      	movs	r3, #255	; 0xff
    1752:	9300      	str	r3, [sp, #0]
    1754:	462b      	mov	r3, r5
    1756:	462a      	mov	r2, r5
    1758:	4631      	mov	r1, r6
    175a:	4620      	mov	r0, r4
    175c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 17e0 <grid_led_buffer_init+0x124>
    1760:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    1762:	462b      	mov	r3, r5
    1764:	462a      	mov	r2, r5
    1766:	4631      	mov	r1, r6
    1768:	4620      	mov	r0, r4
    176a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 17e4 <grid_led_buffer_init+0x128>
    176e:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    1770:	462b      	mov	r3, r5
    1772:	462a      	mov	r2, r5
    1774:	4631      	mov	r1, r6
    1776:	4620      	mov	r0, r4
    1778:	4f16      	ldr	r7, [pc, #88]	; (17d4 <grid_led_buffer_init+0x118>)
    177a:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    177c:	9501      	str	r5, [sp, #4]
    177e:	9500      	str	r5, [sp, #0]
    1780:	462b      	mov	r3, r5
    1782:	2201      	movs	r2, #1
    1784:	4631      	mov	r1, r6
    1786:	4620      	mov	r0, r4
    1788:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    178a:	9501      	str	r5, [sp, #4]
    178c:	9500      	str	r5, [sp, #0]
    178e:	462b      	mov	r3, r5
    1790:	2201      	movs	r2, #1
    1792:	4631      	mov	r1, r6
    1794:	4620      	mov	r0, r4
    1796:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    1798:	9501      	str	r5, [sp, #4]
    179a:	9500      	str	r5, [sp, #0]
    179c:	462b      	mov	r3, r5
    179e:	2201      	movs	r2, #1
    17a0:	4631      	mov	r1, r6
    17a2:	4620      	mov	r0, r4
    17a4:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    17a6:	462b      	mov	r3, r5
    17a8:	2201      	movs	r2, #1
    17aa:	4631      	mov	r1, r6
    17ac:	4620      	mov	r0, r4
    17ae:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    17b0:	462b      	mov	r3, r5
    17b2:	2201      	movs	r2, #1
    17b4:	4631      	mov	r1, r6
    17b6:	4620      	mov	r0, r4
    17b8:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    17ba:	3601      	adds	r6, #1
    17bc:	b2f6      	uxtb	r6, r6
    17be:	7863      	ldrb	r3, [r4, #1]
    17c0:	42b3      	cmp	r3, r6
    17c2:	d8b4      	bhi.n	172e <grid_led_buffer_init+0x72>
}
    17c4:	b003      	add	sp, #12
    17c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17ca:	e7fe      	b.n	17ca <grid_led_buffer_init+0x10e>
    17cc:	000069c9 	.word	0x000069c9
    17d0:	0000153d 	.word	0x0000153d
    17d4:	00001685 	.word	0x00001685
    17d8:	000015a9 	.word	0x000015a9
    17dc:	000015f1 	.word	0x000015f1
    17e0:	0000163b 	.word	0x0000163b
    17e4:	000016a1 	.word	0x000016a1

000017e8 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    17e8:	b510      	push	{r4, lr}
    17ea:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    17ec:	2200      	movs	r2, #0
    17ee:	4b08      	ldr	r3, [pc, #32]	; (1810 <grid_led_hardware_start_transfer_blocking+0x28>)
    17f0:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    17f2:	4808      	ldr	r0, [pc, #32]	; (1814 <grid_led_hardware_start_transfer_blocking+0x2c>)
    17f4:	4b08      	ldr	r3, [pc, #32]	; (1818 <grid_led_hardware_start_transfer_blocking+0x30>)
    17f6:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    17f8:	88a2      	ldrh	r2, [r4, #4]
    17fa:	68a1      	ldr	r1, [r4, #8]
    17fc:	6960      	ldr	r0, [r4, #20]
    17fe:	4b07      	ldr	r3, [pc, #28]	; (181c <grid_led_hardware_start_transfer_blocking+0x34>)
    1800:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    1802:	4a03      	ldr	r2, [pc, #12]	; (1810 <grid_led_hardware_start_transfer_blocking+0x28>)
    1804:	7813      	ldrb	r3, [r2, #0]
    1806:	b2db      	uxtb	r3, r3
    1808:	2b01      	cmp	r3, #1
    180a:	d1fb      	bne.n	1804 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    180c:	bd10      	pop	{r4, pc}
    180e:	bf00      	nop
    1810:	20000ca0 	.word	0x20000ca0
    1814:	20000b20 	.word	0x20000b20
    1818:	00001ed5 	.word	0x00001ed5
    181c:	00001c81 	.word	0x00001c81

00001820 <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    1820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1824:	b085      	sub	sp, #20
    1826:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    1828:	4b20      	ldr	r3, [pc, #128]	; (18ac <grid_led_startup_animation+0x8c>)
    182a:	781b      	ldrb	r3, [r3, #0]
    182c:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    182e:	2b20      	cmp	r3, #32
    1830:	d00a      	beq.n	1848 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    1832:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    1836:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    183a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    183e:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    1842:	f8df 8074 	ldr.w	r8, [pc, #116]	; 18b8 <grid_led_startup_animation+0x98>
    1846:	e01e      	b.n	1886 <grid_led_startup_animation+0x66>
		s= 2;
    1848:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    184c:	2300      	movs	r3, #0
    184e:	9303      	str	r3, [sp, #12]
    1850:	e7f3      	b.n	183a <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    1852:	9500      	str	r5, [sp, #0]
    1854:	462b      	mov	r3, r5
    1856:	463a      	mov	r2, r7
    1858:	4621      	mov	r1, r4
    185a:	4630      	mov	r0, r6
    185c:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    185e:	3401      	adds	r4, #1
    1860:	b2e4      	uxtb	r4, r4
    1862:	7873      	ldrb	r3, [r6, #1]
    1864:	42a3      	cmp	r3, r4
    1866:	d8f4      	bhi.n	1852 <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    1868:	4630      	mov	r0, r6
    186a:	4b11      	ldr	r3, [pc, #68]	; (18b0 <grid_led_startup_animation+0x90>)
    186c:	4798      	blx	r3
		delay_ms(1);
    186e:	2001      	movs	r0, #1
    1870:	4b10      	ldr	r3, [pc, #64]	; (18b4 <grid_led_startup_animation+0x94>)
    1872:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    1874:	f109 0901 	add.w	r9, r9, #1
    1878:	fa5f f989 	uxtb.w	r9, r9
    187c:	f10a 3aff 	add.w	sl, sl, #4294967295
    1880:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    1884:	d00f      	beq.n	18a6 <grid_led_startup_animation+0x86>
		for (uint8_t j=0; j<mod->led_number; j++){
    1886:	7873      	ldrb	r3, [r6, #1]
    1888:	2b00      	cmp	r3, #0
    188a:	d0ed      	beq.n	1868 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    188c:	fb0b f709 	mul.w	r7, fp, r9
    1890:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    1894:	9b03      	ldr	r3, [sp, #12]
    1896:	fb09 f503 	mul.w	r5, r9, r3
    189a:	fb0b f505 	mul.w	r5, fp, r5
    189e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    18a2:	2400      	movs	r4, #0
    18a4:	e7d5      	b.n	1852 <grid_led_startup_animation+0x32>
}
    18a6:	b005      	add	sp, #20
    18a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18ac:	40000c00 	.word	0x40000c00
    18b0:	000017e9 	.word	0x000017e9
    18b4:	00001b35 	.word	0x00001b35
    18b8:	0000153d 	.word	0x0000153d

000018bc <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    18bc:	b570      	push	{r4, r5, r6, lr}
    18be:	4604      	mov	r4, r0
    18c0:	4e2b      	ldr	r6, [pc, #172]	; (1970 <grid_led_init+0xb4>)
    18c2:	2200      	movs	r2, #0
    18c4:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    18c6:	f003 0001 	and.w	r0, r3, #1
    18ca:	2800      	cmp	r0, #0
    18cc:	bf14      	ite	ne
    18ce:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    18d2:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    18d6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    18da:	2d00      	cmp	r5, #0
    18dc:	bf14      	ite	ne
    18de:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    18e2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    18e6:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    18e8:	f3c3 0080 	ubfx	r0, r3, #2, #1
    18ec:	2800      	cmp	r0, #0
    18ee:	bf14      	ite	ne
    18f0:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    18f4:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    18f8:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    18fa:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    18fe:	2d00      	cmp	r5, #0
    1900:	bf14      	ite	ne
    1902:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    1906:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    190a:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    190c:	f3c3 1500 	ubfx	r5, r3, #4, #1
    1910:	2d00      	cmp	r5, #0
    1912:	bf14      	ite	ne
    1914:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    1918:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    191c:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    191e:	f3c3 1040 	ubfx	r0, r3, #5, #1
    1922:	2800      	cmp	r0, #0
    1924:	bf14      	ite	ne
    1926:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    192a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    192e:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    1930:	f3c3 1080 	ubfx	r0, r3, #6, #1
    1934:	2800      	cmp	r0, #0
    1936:	bf14      	ite	ne
    1938:	200e      	movne	r0, #14
    193a:	2008      	moveq	r0, #8
    193c:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    193e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    1942:	2b00      	cmp	r3, #0
    1944:	bf14      	ite	ne
    1946:	23e0      	movne	r3, #224	; 0xe0
    1948:	2380      	moveq	r3, #128	; 0x80
    194a:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    194c:	f846 3f04 	str.w	r3, [r6, #4]!
    1950:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    1952:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    1956:	d1b5      	bne.n	18c4 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    1958:	4620      	mov	r0, r4
    195a:	4b06      	ldr	r3, [pc, #24]	; (1974 <grid_led_init+0xb8>)
    195c:	4798      	blx	r3
	grid_led_hardware_init(mod);
    195e:	4620      	mov	r0, r4
    1960:	4b05      	ldr	r3, [pc, #20]	; (1978 <grid_led_init+0xbc>)
    1962:	4798      	blx	r3
	grid_led_startup_animation(mod);
    1964:	4620      	mov	r0, r4
    1966:	4b05      	ldr	r3, [pc, #20]	; (197c <grid_led_init+0xc0>)
    1968:	4798      	blx	r3
}
    196a:	2000      	movs	r0, #0
    196c:	bd70      	pop	{r4, r5, r6, pc}
    196e:	bf00      	nop
    1970:	200017bc 	.word	0x200017bc
    1974:	000016bd 	.word	0x000016bd
    1978:	0000157d 	.word	0x0000157d
    197c:	00001821 	.word	0x00001821

00001980 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    1980:	b510      	push	{r4, lr}
    1982:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    1984:	2200      	movs	r2, #0
    1986:	4b05      	ldr	r3, [pc, #20]	; (199c <grid_led_hardware_start_transfer+0x1c>)
    1988:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    198a:	4805      	ldr	r0, [pc, #20]	; (19a0 <grid_led_hardware_start_transfer+0x20>)
    198c:	4b05      	ldr	r3, [pc, #20]	; (19a4 <grid_led_hardware_start_transfer+0x24>)
    198e:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    1990:	88a2      	ldrh	r2, [r4, #4]
    1992:	68a1      	ldr	r1, [r4, #8]
    1994:	6960      	ldr	r0, [r4, #20]
    1996:	4b04      	ldr	r3, [pc, #16]	; (19a8 <grid_led_hardware_start_transfer+0x28>)
    1998:	4798      	blx	r3
    199a:	bd10      	pop	{r4, pc}
    199c:	20000ca0 	.word	0x20000ca0
    19a0:	20000b20 	.word	0x20000b20
    19a4:	00001ed5 	.word	0x00001ed5
    19a8:	00001c81 	.word	0x00001c81

000019ac <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    19ac:	4b01      	ldr	r3, [pc, #4]	; (19b4 <grid_led_hardware_is_transfer_completed+0x8>)
    19ae:	7818      	ldrb	r0, [r3, #0]
	
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop
    19b4:	20000ca0 	.word	0x20000ca0

000019b8 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    19b8:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    19ba:	6983      	ldr	r3, [r0, #24]
    19bc:	b103      	cbz	r3, 19c0 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    19be:	4798      	blx	r3
    19c0:	bd08      	pop	{r3, pc}

000019c2 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    19c2:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    19c4:	69c3      	ldr	r3, [r0, #28]
    19c6:	b103      	cbz	r3, 19ca <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    19c8:	4798      	blx	r3
    19ca:	bd08      	pop	{r3, pc}

000019cc <adc_async_channel_conversion_done>:
{
    19cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19d0:	4606      	mov	r6, r0
    19d2:	460f      	mov	r7, r1
    19d4:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    19d6:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    19d8:	5c5c      	ldrb	r4, [r3, r1]
    19da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    19de:	00e4      	lsls	r4, r4, #3
    19e0:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    19e4:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    19e8:	f105 0a04 	add.w	sl, r5, #4
    19ec:	b2d1      	uxtb	r1, r2
    19ee:	4650      	mov	r0, sl
    19f0:	4b0c      	ldr	r3, [pc, #48]	; (1a24 <adc_async_channel_conversion_done+0x58>)
    19f2:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    19f4:	4630      	mov	r0, r6
    19f6:	4b0c      	ldr	r3, [pc, #48]	; (1a28 <adc_async_channel_conversion_done+0x5c>)
    19f8:	4798      	blx	r3
    19fa:	2801      	cmp	r0, #1
    19fc:	d907      	bls.n	1a0e <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    19fe:	ea4f 2119 	mov.w	r1, r9, lsr #8
    1a02:	4650      	mov	r0, sl
    1a04:	4b07      	ldr	r3, [pc, #28]	; (1a24 <adc_async_channel_conversion_done+0x58>)
    1a06:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    1a08:	8aab      	ldrh	r3, [r5, #20]
    1a0a:	3301      	adds	r3, #1
    1a0c:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    1a0e:	8aab      	ldrh	r3, [r5, #20]
    1a10:	3301      	adds	r3, #1
    1a12:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    1a14:	f858 3004 	ldr.w	r3, [r8, r4]
    1a18:	b113      	cbz	r3, 1a20 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    1a1a:	4639      	mov	r1, r7
    1a1c:	4630      	mov	r0, r6
    1a1e:	4798      	blx	r3
    1a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a24:	0000282b 	.word	0x0000282b
    1a28:	00002b41 	.word	0x00002b41

00001a2c <adc_async_init>:
{
    1a2c:	b570      	push	{r4, r5, r6, lr}
    1a2e:	4606      	mov	r6, r0
	device = &descr->device;
    1a30:	2000      	movs	r0, #0
		channel_map[i] = 0xFF;
    1a32:	25ff      	movs	r5, #255	; 0xff
    1a34:	b2c4      	uxtb	r4, r0
    1a36:	5515      	strb	r5, [r2, r4]
    1a38:	3001      	adds	r0, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    1a3a:	b2c4      	uxtb	r4, r0
    1a3c:	429c      	cmp	r4, r3
    1a3e:	d9f9      	bls.n	1a34 <adc_async_init+0x8>
	descr->channel_map    = channel_map;
    1a40:	6232      	str	r2, [r6, #32]
	descr->channel_max    = channel_max;
    1a42:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	descr->channel_amount = channel_amount;
    1a46:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1a4a:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    1a4e:	9b05      	ldr	r3, [sp, #20]
    1a50:	62b3      	str	r3, [r6, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    1a52:	4630      	mov	r0, r6
    1a54:	4b05      	ldr	r3, [pc, #20]	; (1a6c <adc_async_init+0x40>)
    1a56:	4798      	blx	r3
	if (init_status) {
    1a58:	4603      	mov	r3, r0
    1a5a:	b928      	cbnz	r0, 1a68 <adc_async_init+0x3c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    1a5c:	4a04      	ldr	r2, [pc, #16]	; (1a70 <adc_async_init+0x44>)
    1a5e:	60b2      	str	r2, [r6, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    1a60:	4a04      	ldr	r2, [pc, #16]	; (1a74 <adc_async_init+0x48>)
    1a62:	6032      	str	r2, [r6, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    1a64:	4a04      	ldr	r2, [pc, #16]	; (1a78 <adc_async_init+0x4c>)
    1a66:	6072      	str	r2, [r6, #4]
}
    1a68:	4618      	mov	r0, r3
    1a6a:	bd70      	pop	{r4, r5, r6, pc}
    1a6c:	00002a3d 	.word	0x00002a3d
    1a70:	000019cd 	.word	0x000019cd
    1a74:	000019b9 	.word	0x000019b9
    1a78:	000019c3 	.word	0x000019c3

00001a7c <adc_async_register_channel_buffer>:
{
    1a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (descr->channel_map[channel] != 0xFF) {
    1a80:	6a07      	ldr	r7, [r0, #32]
    1a82:	5c7c      	ldrb	r4, [r7, r1]
    1a84:	2cff      	cmp	r4, #255	; 0xff
    1a86:	d12b      	bne.n	1ae0 <adc_async_register_channel_buffer+0x64>
	for (i = 0; i <= descr->channel_max; i++) {
    1a88:	f890 e024 	ldrb.w	lr, [r0, #36]	; 0x24
    1a8c:	2400      	movs	r4, #0
    1a8e:	4625      	mov	r5, r4
		if (descr->channel_map[i] != 0xFF) {
    1a90:	b2e6      	uxtb	r6, r4
    1a92:	5dbe      	ldrb	r6, [r7, r6]
    1a94:	2eff      	cmp	r6, #255	; 0xff
			index++;
    1a96:	bf1c      	itt	ne
    1a98:	3501      	addne	r5, #1
    1a9a:	b2ed      	uxtbne	r5, r5
    1a9c:	3401      	adds	r4, #1
	for (i = 0; i <= descr->channel_max; i++) {
    1a9e:	b2e6      	uxtb	r6, r4
    1aa0:	4576      	cmp	r6, lr
    1aa2:	d9f5      	bls.n	1a90 <adc_async_register_channel_buffer+0x14>
	if (index > descr->channel_amount) {
    1aa4:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
    1aa8:	42ac      	cmp	r4, r5
    1aaa:	d31c      	bcc.n	1ae6 <adc_async_register_channel_buffer+0x6a>
    1aac:	4616      	mov	r6, r2
    1aae:	460f      	mov	r7, r1
    1ab0:	4680      	mov	r8, r0
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    1ab2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    1ab6:	00e4      	lsls	r4, r4, #3
    1ab8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1aba:	4420      	add	r0, r4
    1abc:	461a      	mov	r2, r3
    1abe:	4631      	mov	r1, r6
    1ac0:	3004      	adds	r0, #4
    1ac2:	4b0c      	ldr	r3, [pc, #48]	; (1af4 <adc_async_register_channel_buffer+0x78>)
    1ac4:	4798      	blx	r3
    1ac6:	4602      	mov	r2, r0
    1ac8:	b980      	cbnz	r0, 1aec <adc_async_register_channel_buffer+0x70>
	descr->channel_map[channel]            = index;
    1aca:	f8d8 3020 	ldr.w	r3, [r8, #32]
    1ace:	55dd      	strb	r5, [r3, r7]
	descr->descr_ch[index].bytes_in_buffer = 0;
    1ad0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    1ad4:	441c      	add	r4, r3
    1ad6:	2300      	movs	r3, #0
    1ad8:	82a3      	strh	r3, [r4, #20]
}
    1ada:	4610      	mov	r0, r2
    1adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    1ae0:	f06f 020c 	mvn.w	r2, #12
    1ae4:	e7f9      	b.n	1ada <adc_async_register_channel_buffer+0x5e>
		return ERR_NO_RESOURCE;
    1ae6:	f06f 021b 	mvn.w	r2, #27
    1aea:	e7f6      	b.n	1ada <adc_async_register_channel_buffer+0x5e>
		return ERR_INVALID_ARG;
    1aec:	f06f 020c 	mvn.w	r2, #12
    1af0:	e7f3      	b.n	1ada <adc_async_register_channel_buffer+0x5e>
    1af2:	bf00      	nop
    1af4:	000027ef 	.word	0x000027ef

00001af8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1af8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1afc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1afe:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1b00:	f3bf 8f5f 	dmb	sy
    1b04:	4770      	bx	lr

00001b06 <atomic_leave_critical>:
    1b06:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1b0a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1b0c:	f383 8810 	msr	PRIMASK, r3
    1b10:	4770      	bx	lr
	...

00001b14 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1b14:	b508      	push	{r3, lr}
	ASSERT(descr && hw);

	return _crc_sync_init(&descr->dev, hw);
    1b16:	4b01      	ldr	r3, [pc, #4]	; (1b1c <crc_sync_init+0x8>)
    1b18:	4798      	blx	r3
}
    1b1a:	bd08      	pop	{r3, pc}
    1b1c:	00002ef5 	.word	0x00002ef5

00001b20 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1b20:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1b22:	4b02      	ldr	r3, [pc, #8]	; (1b2c <delay_init+0xc>)
    1b24:	6018      	str	r0, [r3, #0]
    1b26:	4b02      	ldr	r3, [pc, #8]	; (1b30 <delay_init+0x10>)
    1b28:	4798      	blx	r3
    1b2a:	bd08      	pop	{r3, pc}
    1b2c:	20000144 	.word	0x20000144
    1b30:	000042c9 	.word	0x000042c9

00001b34 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1b34:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1b36:	4b04      	ldr	r3, [pc, #16]	; (1b48 <delay_ms+0x14>)
    1b38:	681c      	ldr	r4, [r3, #0]
    1b3a:	4b04      	ldr	r3, [pc, #16]	; (1b4c <delay_ms+0x18>)
    1b3c:	4798      	blx	r3
    1b3e:	4601      	mov	r1, r0
    1b40:	4620      	mov	r0, r4
    1b42:	4b03      	ldr	r3, [pc, #12]	; (1b50 <delay_ms+0x1c>)
    1b44:	4798      	blx	r3
    1b46:	bd10      	pop	{r4, pc}
    1b48:	20000144 	.word	0x20000144
    1b4c:	00002bc1 	.word	0x00002bc1
    1b50:	000042dd 	.word	0x000042dd

00001b54 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1b54:	b508      	push	{r3, lr}
	return _event_system_init();
    1b56:	4b01      	ldr	r3, [pc, #4]	; (1b5c <event_system_init+0x8>)
    1b58:	4798      	blx	r3
}
    1b5a:	bd08      	pop	{r3, pc}
    1b5c:	00002efd 	.word	0x00002efd

00001b60 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1b60:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1b62:	6943      	ldr	r3, [r0, #20]
    1b64:	b103      	cbz	r3, 1b68 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1b66:	4798      	blx	r3
    1b68:	bd08      	pop	{r3, pc}

00001b6a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    1b6a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1b6c:	6983      	ldr	r3, [r0, #24]
    1b6e:	b103      	cbz	r3, 1b72 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1b70:	4798      	blx	r3
    1b72:	bd08      	pop	{r3, pc}

00001b74 <flash_init>:
{
    1b74:	b510      	push	{r4, lr}
    1b76:	4604      	mov	r4, r0
	rc = _flash_init(&flash->dev, hw);
    1b78:	4b04      	ldr	r3, [pc, #16]	; (1b8c <flash_init+0x18>)
    1b7a:	4798      	blx	r3
	if (rc) {
    1b7c:	4603      	mov	r3, r0
    1b7e:	b918      	cbnz	r0, 1b88 <flash_init+0x14>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1b80:	4a03      	ldr	r2, [pc, #12]	; (1b90 <flash_init+0x1c>)
    1b82:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    1b84:	4a03      	ldr	r2, [pc, #12]	; (1b94 <flash_init+0x20>)
    1b86:	6062      	str	r2, [r4, #4]
}
    1b88:	4618      	mov	r0, r3
    1b8a:	bd10      	pop	{r4, pc}
    1b8c:	00003009 	.word	0x00003009
    1b90:	00001b61 	.word	0x00001b61
    1b94:	00001b6b 	.word	0x00001b6b

00001b98 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1b98:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1b9a:	8843      	ldrh	r3, [r0, #2]
    1b9c:	f413 7f80 	tst.w	r3, #256	; 0x100
    1ba0:	d102      	bne.n	1ba8 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    1ba2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    1ba4:	b103      	cbz	r3, 1ba8 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    1ba6:	4798      	blx	r3
    1ba8:	bd08      	pop	{r3, pc}

00001baa <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1baa:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1bac:	8843      	ldrh	r3, [r0, #2]
    1bae:	f413 7f80 	tst.w	r3, #256	; 0x100
    1bb2:	d102      	bne.n	1bba <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    1bb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1bb6:	b103      	cbz	r3, 1bba <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    1bb8:	4798      	blx	r3
    1bba:	bd08      	pop	{r3, pc}

00001bbc <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1bbc:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1bbe:	8843      	ldrh	r3, [r0, #2]
    1bc0:	f413 7f80 	tst.w	r3, #256	; 0x100
    1bc4:	d102      	bne.n	1bcc <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    1bc6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1bc8:	b103      	cbz	r3, 1bcc <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    1bca:	4798      	blx	r3
    1bcc:	bd08      	pop	{r3, pc}
	...

00001bd0 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1bd0:	b510      	push	{r4, lr}
    1bd2:	b084      	sub	sp, #16
    1bd4:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1bd6:	8a83      	ldrh	r3, [r0, #20]
    1bd8:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1bdc:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1be2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    1be6:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1be8:	a901      	add	r1, sp, #4
    1bea:	3828      	subs	r0, #40	; 0x28
    1bec:	4b03      	ldr	r3, [pc, #12]	; (1bfc <i2c_m_async_write+0x2c>)
    1bee:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    1bf0:	2800      	cmp	r0, #0
    1bf2:	bf08      	it	eq
    1bf4:	4620      	moveq	r0, r4
    1bf6:	b004      	add	sp, #16
    1bf8:	bd10      	pop	{r4, pc}
    1bfa:	bf00      	nop
    1bfc:	00003afd 	.word	0x00003afd

00001c00 <i2c_m_async_read>:
{
    1c00:	b510      	push	{r4, lr}
    1c02:	b084      	sub	sp, #16
    1c04:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    1c06:	8a83      	ldrh	r3, [r0, #20]
    1c08:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1c0c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1c0e:	f248 0301 	movw	r3, #32769	; 0x8001
    1c12:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    1c16:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1c18:	a901      	add	r1, sp, #4
    1c1a:	3828      	subs	r0, #40	; 0x28
    1c1c:	4b03      	ldr	r3, [pc, #12]	; (1c2c <i2c_m_async_read+0x2c>)
    1c1e:	4798      	blx	r3
}
    1c20:	2800      	cmp	r0, #0
    1c22:	bf08      	it	eq
    1c24:	4620      	moveq	r0, r4
    1c26:	b004      	add	sp, #16
    1c28:	bd10      	pop	{r4, pc}
    1c2a:	bf00      	nop
    1c2c:	00003afd 	.word	0x00003afd

00001c30 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1c30:	b570      	push	{r4, r5, r6, lr}
    1c32:	4604      	mov	r4, r0
	int32_t init_status;
	ASSERT(i2c);

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1c34:	4b0b      	ldr	r3, [pc, #44]	; (1c64 <i2c_m_async_init+0x34>)
    1c36:	4798      	blx	r3
	if (init_status) {
    1c38:	4605      	mov	r5, r0
    1c3a:	b108      	cbz	r0, 1c40 <i2c_m_async_init+0x10>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    1c3c:	4628      	mov	r0, r5
    1c3e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    1c40:	4b09      	ldr	r3, [pc, #36]	; (1c68 <i2c_m_async_init+0x38>)
    1c42:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1c44:	4b09      	ldr	r3, [pc, #36]	; (1c6c <i2c_m_async_init+0x3c>)
    1c46:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1c48:	4a09      	ldr	r2, [pc, #36]	; (1c70 <i2c_m_async_init+0x40>)
    1c4a:	2101      	movs	r1, #1
    1c4c:	4620      	mov	r0, r4
    1c4e:	4e09      	ldr	r6, [pc, #36]	; (1c74 <i2c_m_async_init+0x44>)
    1c50:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1c52:	4a09      	ldr	r2, [pc, #36]	; (1c78 <i2c_m_async_init+0x48>)
    1c54:	2102      	movs	r1, #2
    1c56:	4620      	mov	r0, r4
    1c58:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1c5a:	4a08      	ldr	r2, [pc, #32]	; (1c7c <i2c_m_async_init+0x4c>)
    1c5c:	2100      	movs	r1, #0
    1c5e:	4620      	mov	r0, r4
    1c60:	47b0      	blx	r6
	return ERR_NONE;
    1c62:	e7eb      	b.n	1c3c <i2c_m_async_init+0xc>
    1c64:	00003a99 	.word	0x00003a99
    1c68:	00001c01 	.word	0x00001c01
    1c6c:	00001bd1 	.word	0x00001bd1
    1c70:	00001b99 	.word	0x00001b99
    1c74:	00003bdb 	.word	0x00003bdb
    1c78:	00001bab 	.word	0x00001bab
    1c7c:	00001bbd 	.word	0x00001bbd

00001c80 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1c80:	b508      	push	{r3, lr}
	ASSERT(io_descr && buf);
	return io_descr->write(io_descr, buf, length);
    1c82:	6803      	ldr	r3, [r0, #0]
    1c84:	4798      	blx	r3
}
    1c86:	bd08      	pop	{r3, pc}

00001c88 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1c88:	b508      	push	{r3, lr}
	ASSERT(io_descr && buf);
	return io_descr->read(io_descr, buf, length);
    1c8a:	6843      	ldr	r3, [r0, #4]
    1c8c:	4798      	blx	r3
}
    1c8e:	bd08      	pop	{r3, pc}

00001c90 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    1c90:	b508      	push	{r3, lr}
	ASSERT(qspi && hw);

	return _qspi_dma_init(&qspi->dev, hw);
    1c92:	4b01      	ldr	r3, [pc, #4]	; (1c98 <qspi_dma_init+0x8>)
    1c94:	4798      	blx	r3
}
    1c96:	bd08      	pop	{r3, pc}
    1c98:	000031fd 	.word	0x000031fd

00001c9c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1c9c:	b510      	push	{r4, lr}
	ASSERT(io);
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    1c9e:	2400      	movs	r4, #0
    1ca0:	6184      	str	r4, [r0, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    1ca2:	6141      	str	r1, [r0, #20]
	spi->xfer.size  = length;
    1ca4:	61c2      	str	r2, [r0, #28]
	spi->xfercnt    = 0;
    1ca6:	6204      	str	r4, [r0, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    1ca8:	2310      	movs	r3, #16
    1caa:	7203      	strb	r3, [r0, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    1cac:	2101      	movs	r1, #1
    1cae:	3820      	subs	r0, #32
    1cb0:	4b01      	ldr	r3, [pc, #4]	; (1cb8 <_spi_m_async_io_write+0x1c>)
    1cb2:	4798      	blx	r3

	return ERR_NONE;
}
    1cb4:	4620      	mov	r0, r4
    1cb6:	bd10      	pop	{r4, pc}
    1cb8:	00003fa5 	.word	0x00003fa5

00001cbc <_spi_m_async_io_read>:
{
    1cbc:	b538      	push	{r3, r4, r5, lr}
	spi->xfer.rxbuf = buf;
    1cbe:	6181      	str	r1, [r0, #24]
	spi->xfer.txbuf = NULL;
    1cc0:	2500      	movs	r5, #0
    1cc2:	6145      	str	r5, [r0, #20]
	spi->xfer.size  = length;
    1cc4:	61c2      	str	r2, [r0, #28]
	spi->xfercnt    = 0;
    1cc6:	6205      	str	r5, [r0, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    1cc8:	2310      	movs	r3, #16
    1cca:	7203      	strb	r3, [r0, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    1ccc:	f1a0 0420 	sub.w	r4, r0, #32
    1cd0:	2101      	movs	r1, #1
    1cd2:	4620      	mov	r0, r4
    1cd4:	4b04      	ldr	r3, [pc, #16]	; (1ce8 <_spi_m_async_io_read+0x2c>)
    1cd6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    1cd8:	f240 11ff 	movw	r1, #511	; 0x1ff
    1cdc:	4620      	mov	r0, r4
    1cde:	4b03      	ldr	r3, [pc, #12]	; (1cec <_spi_m_async_io_read+0x30>)
    1ce0:	4798      	blx	r3
}
    1ce2:	4628      	mov	r0, r5
    1ce4:	bd38      	pop	{r3, r4, r5, pc}
    1ce6:	bf00      	nop
    1ce8:	00003fb7 	.word	0x00003fb7
    1cec:	00003fdd 	.word	0x00003fdd

00001cf0 <_spi_dev_error>:
{
    1cf0:	b570      	push	{r4, r5, r6, lr}
    1cf2:	4604      	mov	r4, r0
    1cf4:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1cf6:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    1cf8:	2100      	movs	r1, #0
    1cfa:	4b09      	ldr	r3, [pc, #36]	; (1d20 <_spi_dev_error+0x30>)
    1cfc:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    1cfe:	2100      	movs	r1, #0
    1d00:	4620      	mov	r0, r4
    1d02:	4b08      	ldr	r3, [pc, #32]	; (1d24 <_spi_dev_error+0x34>)
    1d04:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    1d06:	2100      	movs	r1, #0
    1d08:	4620      	mov	r0, r4
    1d0a:	4b07      	ldr	r3, [pc, #28]	; (1d28 <_spi_dev_error+0x38>)
    1d0c:	4798      	blx	r3
	spi->stat = 0;
    1d0e:	2300      	movs	r3, #0
    1d10:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    1d14:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1d16:	b113      	cbz	r3, 1d1e <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    1d18:	4631      	mov	r1, r6
    1d1a:	4628      	mov	r0, r5
    1d1c:	4798      	blx	r3
    1d1e:	bd70      	pop	{r4, r5, r6, pc}
    1d20:	00003fa5 	.word	0x00003fa5
    1d24:	00003fb7 	.word	0x00003fb7
    1d28:	00003fc9 	.word	0x00003fc9

00001d2c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    1d2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1d2e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1d30:	429a      	cmp	r2, r3
    1d32:	d200      	bcs.n	1d36 <_spi_dev_complete+0xa>
    1d34:	4770      	bx	lr
{
    1d36:	b510      	push	{r4, lr}
    1d38:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    1d3a:	2100      	movs	r1, #0
    1d3c:	4b04      	ldr	r3, [pc, #16]	; (1d50 <_spi_dev_complete+0x24>)
    1d3e:	4798      	blx	r3
		spi->stat = 0;
    1d40:	2300      	movs	r3, #0
    1d42:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    1d46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1d48:	b10b      	cbz	r3, 1d4e <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    1d4a:	1f20      	subs	r0, r4, #4
    1d4c:	4798      	blx	r3
    1d4e:	bd10      	pop	{r4, pc}
    1d50:	00003fc9 	.word	0x00003fc9

00001d54 <_spi_dev_tx>:
{
    1d54:	b510      	push	{r4, lr}
    1d56:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    1d58:	7903      	ldrb	r3, [r0, #4]
    1d5a:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1d5c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1d5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1d60:	f103 0101 	add.w	r1, r3, #1
    1d64:	6401      	str	r1, [r0, #64]	; 0x40
    1d66:	bf94      	ite	ls
    1d68:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    1d6a:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1d6e:	4b08      	ldr	r3, [pc, #32]	; (1d90 <_spi_dev_tx+0x3c>)
    1d70:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    1d72:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1d74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1d76:	429a      	cmp	r2, r3
    1d78:	d000      	beq.n	1d7c <_spi_dev_tx+0x28>
    1d7a:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    1d7c:	2100      	movs	r1, #0
    1d7e:	4620      	mov	r0, r4
    1d80:	4b04      	ldr	r3, [pc, #16]	; (1d94 <_spi_dev_tx+0x40>)
    1d82:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    1d84:	2101      	movs	r1, #1
    1d86:	4620      	mov	r0, r4
    1d88:	4b03      	ldr	r3, [pc, #12]	; (1d98 <_spi_dev_tx+0x44>)
    1d8a:	4798      	blx	r3
}
    1d8c:	e7f5      	b.n	1d7a <_spi_dev_tx+0x26>
    1d8e:	bf00      	nop
    1d90:	00003fdd 	.word	0x00003fdd
    1d94:	00003fa5 	.word	0x00003fa5
    1d98:	00003fc9 	.word	0x00003fc9

00001d9c <_spi_dev_rx>:
{
    1d9c:	b570      	push	{r4, r5, r6, lr}
    1d9e:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    1da0:	6b85      	ldr	r5, [r0, #56]	; 0x38
    1da2:	b305      	cbz	r5, 1de6 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    1da4:	7903      	ldrb	r3, [r0, #4]
    1da6:	2b01      	cmp	r3, #1
    1da8:	d916      	bls.n	1dd8 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    1daa:	6c06      	ldr	r6, [r0, #64]	; 0x40
    1dac:	1c73      	adds	r3, r6, #1
    1dae:	6403      	str	r3, [r0, #64]	; 0x40
    1db0:	4b18      	ldr	r3, [pc, #96]	; (1e14 <_spi_dev_rx+0x78>)
    1db2:	4798      	blx	r3
    1db4:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    1db8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1dba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1dbc:	4293      	cmp	r3, r2
    1dbe:	d21d      	bcs.n	1dfc <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    1dc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1dc2:	b1b2      	cbz	r2, 1df2 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    1dc4:	7921      	ldrb	r1, [r4, #4]
    1dc6:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    1dc8:	bf94      	ite	ls
    1dca:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    1dcc:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1dd0:	4620      	mov	r0, r4
    1dd2:	4b11      	ldr	r3, [pc, #68]	; (1e18 <_spi_dev_rx+0x7c>)
    1dd4:	4798      	blx	r3
    1dd6:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    1dd8:	6c06      	ldr	r6, [r0, #64]	; 0x40
    1dda:	1c73      	adds	r3, r6, #1
    1ddc:	6403      	str	r3, [r0, #64]	; 0x40
    1dde:	4b0d      	ldr	r3, [pc, #52]	; (1e14 <_spi_dev_rx+0x78>)
    1de0:	4798      	blx	r3
    1de2:	55a8      	strb	r0, [r5, r6]
    1de4:	e7e8      	b.n	1db8 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    1de6:	4b0b      	ldr	r3, [pc, #44]	; (1e14 <_spi_dev_rx+0x78>)
    1de8:	4798      	blx	r3
		spi->xfercnt++;
    1dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1dec:	3301      	adds	r3, #1
    1dee:	6423      	str	r3, [r4, #64]	; 0x40
    1df0:	e7e2      	b.n	1db8 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    1df2:	88e1      	ldrh	r1, [r4, #6]
    1df4:	4620      	mov	r0, r4
    1df6:	4b08      	ldr	r3, [pc, #32]	; (1e18 <_spi_dev_rx+0x7c>)
    1df8:	4798      	blx	r3
    1dfa:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    1dfc:	2100      	movs	r1, #0
    1dfe:	4620      	mov	r0, r4
    1e00:	4b06      	ldr	r3, [pc, #24]	; (1e1c <_spi_dev_rx+0x80>)
    1e02:	4798      	blx	r3
		spi->stat = 0;
    1e04:	2300      	movs	r3, #0
    1e06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    1e0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1e0c:	b10b      	cbz	r3, 1e12 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    1e0e:	1f20      	subs	r0, r4, #4
    1e10:	4798      	blx	r3
    1e12:	bd70      	pop	{r4, r5, r6, pc}
    1e14:	00003fe5 	.word	0x00003fe5
    1e18:	00003fdd 	.word	0x00003fdd
    1e1c:	00003fb7 	.word	0x00003fb7

00001e20 <spi_m_async_init>:
{
    1e20:	b570      	push	{r4, r5, r6, lr}
    1e22:	4605      	mov	r5, r0
	spi->dev.prvt = (void *)hw;
    1e24:	4604      	mov	r4, r0
    1e26:	f844 1f04 	str.w	r1, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    1e2a:	4620      	mov	r0, r4
    1e2c:	4b0d      	ldr	r3, [pc, #52]	; (1e64 <spi_m_async_init+0x44>)
    1e2e:	4798      	blx	r3
	if (rc >= 0) {
    1e30:	2800      	cmp	r0, #0
    1e32:	db15      	blt.n	1e60 <spi_m_async_init+0x40>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    1e34:	4a0c      	ldr	r2, [pc, #48]	; (1e68 <spi_m_async_init+0x48>)
    1e36:	2100      	movs	r1, #0
    1e38:	4620      	mov	r0, r4
    1e3a:	4e0c      	ldr	r6, [pc, #48]	; (1e6c <spi_m_async_init+0x4c>)
    1e3c:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    1e3e:	4a0c      	ldr	r2, [pc, #48]	; (1e70 <spi_m_async_init+0x50>)
    1e40:	2101      	movs	r1, #1
    1e42:	4620      	mov	r0, r4
    1e44:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    1e46:	4a0b      	ldr	r2, [pc, #44]	; (1e74 <spi_m_async_init+0x54>)
    1e48:	2102      	movs	r1, #2
    1e4a:	4620      	mov	r0, r4
    1e4c:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    1e4e:	4a0a      	ldr	r2, [pc, #40]	; (1e78 <spi_m_async_init+0x58>)
    1e50:	2103      	movs	r1, #3
    1e52:	4620      	mov	r0, r4
    1e54:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
    1e56:	4b09      	ldr	r3, [pc, #36]	; (1e7c <spi_m_async_init+0x5c>)
    1e58:	62ab      	str	r3, [r5, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    1e5a:	4b09      	ldr	r3, [pc, #36]	; (1e80 <spi_m_async_init+0x60>)
    1e5c:	626b      	str	r3, [r5, #36]	; 0x24
	return ERR_NONE;
    1e5e:	2000      	movs	r0, #0
}
    1e60:	bd70      	pop	{r4, r5, r6, pc}
    1e62:	bf00      	nop
    1e64:	00003f3d 	.word	0x00003f3d
    1e68:	00001d55 	.word	0x00001d55
    1e6c:	00003fed 	.word	0x00003fed
    1e70:	00001d9d 	.word	0x00001d9d
    1e74:	00001d2d 	.word	0x00001d2d
    1e78:	00001cf1 	.word	0x00001cf1
    1e7c:	00001cbd 	.word	0x00001cbd
    1e80:	00001c9d 	.word	0x00001c9d

00001e84 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1e84:	b510      	push	{r4, lr}
	ASSERT(io);

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    1e86:	4613      	mov	r3, r2
    1e88:	2200      	movs	r2, #0
    1e8a:	381c      	subs	r0, #28
    1e8c:	4c01      	ldr	r4, [pc, #4]	; (1e94 <_spi_m_dma_io_write+0x10>)
    1e8e:	47a0      	blx	r4
}
    1e90:	bd10      	pop	{r4, pc}
    1e92:	bf00      	nop
    1e94:	000041ad 	.word	0x000041ad

00001e98 <_spi_m_dma_io_read>:
{
    1e98:	b510      	push	{r4, lr}
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    1e9a:	4613      	mov	r3, r2
    1e9c:	460a      	mov	r2, r1
    1e9e:	2100      	movs	r1, #0
    1ea0:	381c      	subs	r0, #28
    1ea2:	4c01      	ldr	r4, [pc, #4]	; (1ea8 <_spi_m_dma_io_read+0x10>)
    1ea4:	47a0      	blx	r4
}
    1ea6:	bd10      	pop	{r4, pc}
    1ea8:	000041ad 	.word	0x000041ad

00001eac <spi_m_dma_init>:
{
    1eac:	b510      	push	{r4, lr}
    1eae:	4604      	mov	r4, r0
	spi->dev.prvt = (void *)hw;
    1eb0:	f840 1f04 	str.w	r1, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    1eb4:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <spi_m_dma_init+0x1c>)
    1eb6:	4798      	blx	r3
	if (rc) {
    1eb8:	4603      	mov	r3, r0
    1eba:	b918      	cbnz	r0, 1ec4 <spi_m_dma_init+0x18>
	spi->io.read  = _spi_m_dma_io_read;
    1ebc:	4a03      	ldr	r2, [pc, #12]	; (1ecc <spi_m_dma_init+0x20>)
    1ebe:	6262      	str	r2, [r4, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    1ec0:	4a03      	ldr	r2, [pc, #12]	; (1ed0 <spi_m_dma_init+0x24>)
    1ec2:	6222      	str	r2, [r4, #32]
}
    1ec4:	4618      	mov	r0, r3
    1ec6:	bd10      	pop	{r4, pc}
    1ec8:	00003ff9 	.word	0x00003ff9
    1ecc:	00001e99 	.word	0x00001e99
    1ed0:	00001e85 	.word	0x00001e85

00001ed4 <spi_m_dma_enable>:
{
    1ed4:	b508      	push	{r3, lr}
	_spi_m_dma_enable(&spi->dev);
    1ed6:	3004      	adds	r0, #4
    1ed8:	4b01      	ldr	r3, [pc, #4]	; (1ee0 <spi_m_dma_enable+0xc>)
    1eda:	4798      	blx	r3
    1edc:	bd08      	pop	{r3, pc}
    1ede:	bf00      	nop
    1ee0:	0000412d 	.word	0x0000412d

00001ee4 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    1ee4:	b508      	push	{r3, lr}
	ASSERT(spi);
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    1ee6:	3004      	adds	r0, #4
    1ee8:	4b01      	ldr	r3, [pc, #4]	; (1ef0 <spi_m_dma_register_callback+0xc>)
    1eea:	4798      	blx	r3
    1eec:	bd08      	pop	{r3, pc}
    1eee:	bf00      	nop
    1ef0:	0000413d 	.word	0x0000413d

00001ef4 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
	ASSERT(spi && io);
	*io = &spi->io;
    1ef4:	3020      	adds	r0, #32
    1ef6:	6008      	str	r0, [r1, #0]

	return 0;
}
    1ef8:	2000      	movs	r0, #0
    1efa:	4770      	bx	lr

00001efc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1efe:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1f00:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1f02:	b12f      	cbz	r7, 1f10 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1f04:	688d      	ldr	r5, [r1, #8]
    1f06:	463c      	mov	r4, r7
    1f08:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1f0a:	f1c2 0e01 	rsb	lr, r2, #1
    1f0e:	e00b      	b.n	1f28 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1f10:	4b0e      	ldr	r3, [pc, #56]	; (1f4c <timer_add_timer_task+0x50>)
    1f12:	4798      	blx	r3
		return;
    1f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1f16:	4473      	add	r3, lr
    1f18:	68a0      	ldr	r0, [r4, #8]
    1f1a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1f1c:	42ab      	cmp	r3, r5
    1f1e:	d20a      	bcs.n	1f36 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1f20:	6823      	ldr	r3, [r4, #0]
    1f22:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1f24:	b153      	cbz	r3, 1f3c <timer_add_timer_task+0x40>
    1f26:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1f28:	6863      	ldr	r3, [r4, #4]
    1f2a:	4293      	cmp	r3, r2
    1f2c:	d8f3      	bhi.n	1f16 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1f2e:	68a0      	ldr	r0, [r4, #8]
    1f30:	4403      	add	r3, r0
    1f32:	1a9b      	subs	r3, r3, r2
    1f34:	e7f2      	b.n	1f1c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1f36:	42a7      	cmp	r7, r4
    1f38:	d004      	beq.n	1f44 <timer_add_timer_task+0x48>
    1f3a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1f3c:	4620      	mov	r0, r4
    1f3e:	4b04      	ldr	r3, [pc, #16]	; (1f50 <timer_add_timer_task+0x54>)
    1f40:	4798      	blx	r3
    1f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1f44:	4660      	mov	r0, ip
    1f46:	4b01      	ldr	r3, [pc, #4]	; (1f4c <timer_add_timer_task+0x50>)
    1f48:	4798      	blx	r3
    1f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f4c:	000027b9 	.word	0x000027b9
    1f50:	000027c1 	.word	0x000027c1

00001f54 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1f58:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1f5a:	6907      	ldr	r7, [r0, #16]
    1f5c:	3701      	adds	r7, #1
    1f5e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1f60:	7e03      	ldrb	r3, [r0, #24]
    1f62:	f013 0f01 	tst.w	r3, #1
    1f66:	d113      	bne.n	1f90 <timer_process_counted+0x3c>
    1f68:	7e03      	ldrb	r3, [r0, #24]
    1f6a:	f013 0f02 	tst.w	r3, #2
    1f6e:	d10f      	bne.n	1f90 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1f70:	b354      	cbz	r4, 1fc8 <timer_process_counted+0x74>
    1f72:	6863      	ldr	r3, [r4, #4]
    1f74:	1afb      	subs	r3, r7, r3
    1f76:	68a2      	ldr	r2, [r4, #8]
    1f78:	4293      	cmp	r3, r2
    1f7a:	d307      	bcc.n	1f8c <timer_process_counted+0x38>
    1f7c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1f7e:	f100 0814 	add.w	r8, r0, #20
    1f82:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1fcc <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1f86:	f8df a048 	ldr.w	sl, [pc, #72]	; 1fd0 <timer_process_counted+0x7c>
    1f8a:	e012      	b.n	1fb2 <timer_process_counted+0x5e>
    1f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1f90:	7e03      	ldrb	r3, [r0, #24]
    1f92:	f043 0302 	orr.w	r3, r3, #2
    1f96:	7603      	strb	r3, [r0, #24]
		return;
    1f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f9c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1f9e:	68e3      	ldr	r3, [r4, #12]
    1fa0:	4620      	mov	r0, r4
    1fa2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1fa4:	b185      	cbz	r5, 1fc8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1fa6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1fa8:	686b      	ldr	r3, [r5, #4]
    1faa:	1afb      	subs	r3, r7, r3
    1fac:	68aa      	ldr	r2, [r5, #8]
    1fae:	4293      	cmp	r3, r2
    1fb0:	d30a      	bcc.n	1fc8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1fb2:	4640      	mov	r0, r8
    1fb4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1fb6:	7c23      	ldrb	r3, [r4, #16]
    1fb8:	2b01      	cmp	r3, #1
    1fba:	d1ef      	bne.n	1f9c <timer_process_counted+0x48>
			tmp->time_label = time;
    1fbc:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1fbe:	463a      	mov	r2, r7
    1fc0:	4621      	mov	r1, r4
    1fc2:	4640      	mov	r0, r8
    1fc4:	47d0      	blx	sl
    1fc6:	e7e9      	b.n	1f9c <timer_process_counted+0x48>
    1fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1fcc:	000027e3 	.word	0x000027e3
    1fd0:	00001efd 	.word	0x00001efd

00001fd4 <timer_init>:
{
    1fd4:	b510      	push	{r4, lr}
    1fd6:	4604      	mov	r4, r0
	descr->func = func;
    1fd8:	f840 2b04 	str.w	r2, [r0], #4
	descr->func->init(&descr->device, hw);
    1fdc:	6813      	ldr	r3, [r2, #0]
    1fde:	4798      	blx	r3
	descr->time                           = 0;
    1fe0:	2000      	movs	r0, #0
    1fe2:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1fe4:	4b01      	ldr	r3, [pc, #4]	; (1fec <timer_init+0x18>)
    1fe6:	6063      	str	r3, [r4, #4]
}
    1fe8:	bd10      	pop	{r4, pc}
    1fea:	bf00      	nop
    1fec:	00001f55 	.word	0x00001f55

00001ff0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1ff0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1ff2:	2300      	movs	r3, #0
    1ff4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1ff6:	69c3      	ldr	r3, [r0, #28]
    1ff8:	b11b      	cbz	r3, 2002 <usart_transmission_complete+0x12>
    1ffa:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    1ffe:	4610      	mov	r0, r2
    2000:	4798      	blx	r3
    2002:	bd08      	pop	{r3, pc}

00002004 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    2004:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    2006:	2300      	movs	r3, #0
    2008:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    200a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    200c:	b11b      	cbz	r3, 2016 <usart_error+0x12>
    200e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    2012:	4610      	mov	r0, r2
    2014:	4798      	blx	r3
    2016:	bd08      	pop	{r3, pc}

00002018 <usart_fill_rx_buffer>:
{
    2018:	b538      	push	{r3, r4, r5, lr}
    201a:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    201c:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    2020:	302c      	adds	r0, #44	; 0x2c
    2022:	4b03      	ldr	r3, [pc, #12]	; (2030 <usart_fill_rx_buffer+0x18>)
    2024:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    2026:	6a23      	ldr	r3, [r4, #32]
    2028:	b10b      	cbz	r3, 202e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    202a:	4628      	mov	r0, r5
    202c:	4798      	blx	r3
    202e:	bd38      	pop	{r3, r4, r5, pc}
    2030:	0000282b 	.word	0x0000282b

00002034 <usart_async_write>:
{
    2034:	b510      	push	{r4, lr}
	if (descr->tx_por != descr->tx_buffer_length) {
    2036:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
    203a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    203e:	429c      	cmp	r4, r3
    2040:	d10d      	bne.n	205e <usart_async_write+0x2a>
    2042:	4614      	mov	r4, r2
	descr->tx_buffer        = (uint8_t *)buf;
    2044:	6481      	str	r1, [r0, #72]	; 0x48
	descr->tx_buffer_length = length;
    2046:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
	descr->tx_por           = 0;
    204a:	2300      	movs	r3, #0
    204c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    2050:	2301      	movs	r3, #1
    2052:	6303      	str	r3, [r0, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    2054:	3008      	adds	r0, #8
    2056:	4b03      	ldr	r3, [pc, #12]	; (2064 <usart_async_write+0x30>)
    2058:	4798      	blx	r3
	return (int32_t)length;
    205a:	4620      	mov	r0, r4
    205c:	bd10      	pop	{r4, pc}
		return ERR_NO_RESOURCE;
    205e:	f06f 001b 	mvn.w	r0, #27
}
    2062:	bd10      	pop	{r4, pc}
    2064:	00003a87 	.word	0x00003a87

00002068 <usart_process_byte_sent>:
{
    2068:	b510      	push	{r4, lr}
    206a:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    206c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    206e:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    2072:	429a      	cmp	r2, r3
    2074:	d009      	beq.n	208a <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    2076:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2078:	1c59      	adds	r1, r3, #1
    207a:	8781      	strh	r1, [r0, #60]	; 0x3c
    207c:	5cd1      	ldrb	r1, [r2, r3]
    207e:	4b04      	ldr	r3, [pc, #16]	; (2090 <usart_process_byte_sent+0x28>)
    2080:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    2082:	4620      	mov	r0, r4
    2084:	4b03      	ldr	r3, [pc, #12]	; (2094 <usart_process_byte_sent+0x2c>)
    2086:	4798      	blx	r3
    2088:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    208a:	4b03      	ldr	r3, [pc, #12]	; (2098 <usart_process_byte_sent+0x30>)
    208c:	4798      	blx	r3
    208e:	bd10      	pop	{r4, pc}
    2090:	00003a5b 	.word	0x00003a5b
    2094:	00003a87 	.word	0x00003a87
    2098:	00003a8f 	.word	0x00003a8f

0000209c <usart_async_read>:
{
    209c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20a0:	b082      	sub	sp, #8
    20a2:	4682      	mov	sl, r0
    20a4:	4688      	mov	r8, r1
    20a6:	4615      	mov	r5, r2
	CRITICAL_SECTION_ENTER()
    20a8:	a801      	add	r0, sp, #4
    20aa:	4b13      	ldr	r3, [pc, #76]	; (20f8 <usart_async_read+0x5c>)
    20ac:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    20ae:	f10a 0a34 	add.w	sl, sl, #52	; 0x34
    20b2:	4650      	mov	r0, sl
    20b4:	4b11      	ldr	r3, [pc, #68]	; (20fc <usart_async_read+0x60>)
    20b6:	4798      	blx	r3
    20b8:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    20ba:	a801      	add	r0, sp, #4
    20bc:	4b10      	ldr	r3, [pc, #64]	; (2100 <usart_async_read+0x64>)
    20be:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    20c0:	b1a7      	cbz	r7, 20ec <usart_async_read+0x50>
    20c2:	b1b5      	cbz	r5, 20f2 <usart_async_read+0x56>
    20c4:	3d01      	subs	r5, #1
    20c6:	b2ad      	uxth	r5, r5
    20c8:	3502      	adds	r5, #2
    20ca:	2401      	movs	r4, #1
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    20cc:	4e0d      	ldr	r6, [pc, #52]	; (2104 <usart_async_read+0x68>)
    20ce:	fa1f f984 	uxth.w	r9, r4
    20d2:	1e61      	subs	r1, r4, #1
    20d4:	4441      	add	r1, r8
    20d6:	4650      	mov	r0, sl
    20d8:	47b0      	blx	r6
	while ((was_read < num) && (was_read < length)) {
    20da:	42bc      	cmp	r4, r7
    20dc:	d002      	beq.n	20e4 <usart_async_read+0x48>
    20de:	3401      	adds	r4, #1
    20e0:	42ac      	cmp	r4, r5
    20e2:	d1f4      	bne.n	20ce <usart_async_read+0x32>
}
    20e4:	4648      	mov	r0, r9
    20e6:	b002      	add	sp, #8
    20e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint16_t                       was_read = 0;
    20ec:	f04f 0900 	mov.w	r9, #0
    20f0:	e7f8      	b.n	20e4 <usart_async_read+0x48>
    20f2:	f04f 0900 	mov.w	r9, #0
    20f6:	e7f5      	b.n	20e4 <usart_async_read+0x48>
    20f8:	00001af9 	.word	0x00001af9
    20fc:	0000284d 	.word	0x0000284d
    2100:	00001b07 	.word	0x00001b07
    2104:	00002809 	.word	0x00002809

00002108 <usart_async_init>:
{
    2108:	b538      	push	{r3, r4, r5, lr}
    210a:	4604      	mov	r4, r0
    210c:	460d      	mov	r5, r1
    210e:	4611      	mov	r1, r2
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    2110:	461a      	mov	r2, r3
    2112:	3034      	adds	r0, #52	; 0x34
    2114:	4b0d      	ldr	r3, [pc, #52]	; (214c <usart_async_init+0x44>)
    2116:	4798      	blx	r3
    2118:	b9a0      	cbnz	r0, 2144 <usart_async_init+0x3c>
	init_status = _usart_async_init(&descr->device, hw);
    211a:	4629      	mov	r1, r5
    211c:	f104 0008 	add.w	r0, r4, #8
    2120:	4b0b      	ldr	r3, [pc, #44]	; (2150 <usart_async_init+0x48>)
    2122:	4798      	blx	r3
	if (init_status) {
    2124:	4603      	mov	r3, r0
    2126:	b958      	cbnz	r0, 2140 <usart_async_init+0x38>
	descr->io.read  = usart_async_read;
    2128:	4a0a      	ldr	r2, [pc, #40]	; (2154 <usart_async_init+0x4c>)
    212a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    212c:	4a0a      	ldr	r2, [pc, #40]	; (2158 <usart_async_init+0x50>)
    212e:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    2130:	4a0a      	ldr	r2, [pc, #40]	; (215c <usart_async_init+0x54>)
    2132:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    2134:	4a0a      	ldr	r2, [pc, #40]	; (2160 <usart_async_init+0x58>)
    2136:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    2138:	4a0a      	ldr	r2, [pc, #40]	; (2164 <usart_async_init+0x5c>)
    213a:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    213c:	4a0a      	ldr	r2, [pc, #40]	; (2168 <usart_async_init+0x60>)
    213e:	6162      	str	r2, [r4, #20]
}
    2140:	4618      	mov	r0, r3
    2142:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_INVALID_ARG;
    2144:	f06f 030c 	mvn.w	r3, #12
    2148:	e7fa      	b.n	2140 <usart_async_init+0x38>
    214a:	bf00      	nop
    214c:	000027ef 	.word	0x000027ef
    2150:	000039d9 	.word	0x000039d9
    2154:	0000209d 	.word	0x0000209d
    2158:	00002035 	.word	0x00002035
    215c:	00002069 	.word	0x00002069
    2160:	00002019 	.word	0x00002019
    2164:	00001ff1 	.word	0x00001ff1
    2168:	00002005 	.word	0x00002005

0000216c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    216c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2170:	460f      	mov	r7, r1
    2172:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
	while (!_usart_sync_is_ready_to_send(&descr->device))
    2174:	f100 0408 	add.w	r4, r0, #8
    2178:	4d0e      	ldr	r5, [pc, #56]	; (21b4 <usart_sync_write+0x48>)
    217a:	4620      	mov	r0, r4
    217c:	47a8      	blx	r5
    217e:	2800      	cmp	r0, #0
    2180:	d0fb      	beq.n	217a <usart_sync_write+0xe>
    2182:	3f01      	subs	r7, #1
    2184:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2186:	f8df 8034 	ldr.w	r8, [pc, #52]	; 21bc <usart_sync_write+0x50>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    218a:	4d0a      	ldr	r5, [pc, #40]	; (21b4 <usart_sync_write+0x48>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    218c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2190:	4620      	mov	r0, r4
    2192:	47c0      	blx	r8
		while (!_usart_sync_is_ready_to_send(&descr->device))
    2194:	4620      	mov	r0, r4
    2196:	47a8      	blx	r5
    2198:	2800      	cmp	r0, #0
    219a:	d0fb      	beq.n	2194 <usart_sync_write+0x28>
			;
	} while (++offset < length);
    219c:	3601      	adds	r6, #1
    219e:	454e      	cmp	r6, r9
    21a0:	d3f4      	bcc.n	218c <usart_sync_write+0x20>
	while (!_usart_sync_is_transmit_done(&descr->device))
    21a2:	4d05      	ldr	r5, [pc, #20]	; (21b8 <usart_sync_write+0x4c>)
    21a4:	4620      	mov	r0, r4
    21a6:	47a8      	blx	r5
    21a8:	2800      	cmp	r0, #0
    21aa:	d0fb      	beq.n	21a4 <usart_sync_write+0x38>
		;
	return (int32_t)offset;
}
    21ac:	4630      	mov	r0, r6
    21ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    21b2:	bf00      	nop
    21b4:	00003a69 	.word	0x00003a69
    21b8:	00003a73 	.word	0x00003a73
    21bc:	00003a55 	.word	0x00003a55

000021c0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    21c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21c4:	4691      	mov	r9, r2
    21c6:	1e4f      	subs	r7, r1, #1
	uint32_t                      offset = 0;
    21c8:	2600      	movs	r6, #0
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    21ca:	f100 0408 	add.w	r4, r0, #8
    21ce:	4d08      	ldr	r5, [pc, #32]	; (21f0 <usart_sync_read+0x30>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    21d0:	f8df 8020 	ldr.w	r8, [pc, #32]	; 21f4 <usart_sync_read+0x34>
		while (!_usart_sync_is_byte_received(&descr->device))
    21d4:	4620      	mov	r0, r4
    21d6:	47a8      	blx	r5
    21d8:	2800      	cmp	r0, #0
    21da:	d0fb      	beq.n	21d4 <usart_sync_read+0x14>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    21dc:	4620      	mov	r0, r4
    21de:	47c0      	blx	r8
    21e0:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    21e4:	3601      	adds	r6, #1
    21e6:	454e      	cmp	r6, r9
    21e8:	d3f4      	bcc.n	21d4 <usart_sync_read+0x14>

	return (int32_t)offset;
}
    21ea:	4630      	mov	r0, r6
    21ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    21f0:	00003a7d 	.word	0x00003a7d
    21f4:	00003a61 	.word	0x00003a61

000021f8 <usart_sync_init>:
{
    21f8:	b510      	push	{r4, lr}
    21fa:	4604      	mov	r4, r0
	init_status = _usart_sync_init(&descr->device, hw);
    21fc:	3008      	adds	r0, #8
    21fe:	4b05      	ldr	r3, [pc, #20]	; (2214 <usart_sync_init+0x1c>)
    2200:	4798      	blx	r3
	if (init_status) {
    2202:	4603      	mov	r3, r0
    2204:	b918      	cbnz	r0, 220e <usart_sync_init+0x16>
	descr->io.read  = usart_sync_read;
    2206:	4a04      	ldr	r2, [pc, #16]	; (2218 <usart_sync_init+0x20>)
    2208:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    220a:	4a04      	ldr	r2, [pc, #16]	; (221c <usart_sync_init+0x24>)
    220c:	6022      	str	r2, [r4, #0]
}
    220e:	4618      	mov	r0, r3
    2210:	bd10      	pop	{r4, pc}
    2212:	bf00      	nop
    2214:	000039c9 	.word	0x000039c9
    2218:	000021c1 	.word	0x000021c1
    221c:	0000216d 	.word	0x0000216d

00002220 <usart_sync_enable>:
{
    2220:	b508      	push	{r3, lr}
	_usart_sync_enable(&descr->device);
    2222:	3008      	adds	r0, #8
    2224:	4b01      	ldr	r3, [pc, #4]	; (222c <usart_sync_enable+0xc>)
    2226:	4798      	blx	r3
}
    2228:	2000      	movs	r0, #0
    222a:	bd08      	pop	{r3, pc}
    222c:	00003a41 	.word	0x00003a41

00002230 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2230:	4b0f      	ldr	r3, [pc, #60]	; (2270 <_usb_d_find_ep+0x40>)
    2232:	7859      	ldrb	r1, [r3, #1]
    2234:	4288      	cmp	r0, r1
    2236:	d018      	beq.n	226a <_usb_d_find_ep+0x3a>
{
    2238:	b430      	push	{r4, r5}
    223a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    223c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    223e:	f000 050f 	and.w	r5, r0, #15
    2242:	e007      	b.n	2254 <_usb_d_find_ep+0x24>
    2244:	3301      	adds	r3, #1
    2246:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2248:	2b0d      	cmp	r3, #13
    224a:	d009      	beq.n	2260 <_usb_d_find_ep+0x30>
    224c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    224e:	7851      	ldrb	r1, [r2, #1]
    2250:	4281      	cmp	r1, r0
    2252:	d007      	beq.n	2264 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2254:	7814      	ldrb	r4, [r2, #0]
    2256:	2c00      	cmp	r4, #0
    2258:	d1f4      	bne.n	2244 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    225a:	428d      	cmp	r5, r1
    225c:	d1f2      	bne.n	2244 <_usb_d_find_ep+0x14>
    225e:	e001      	b.n	2264 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    2260:	f04f 33ff 	mov.w	r3, #4294967295
}
    2264:	4618      	mov	r0, r3
    2266:	bc30      	pop	{r4, r5}
    2268:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    226a:	2300      	movs	r3, #0
}
    226c:	4618      	mov	r0, r3
    226e:	4770      	bx	lr
    2270:	20000148 	.word	0x20000148

00002274 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    2274:	2000      	movs	r0, #0
    2276:	4770      	bx	lr

00002278 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2278:	b538      	push	{r3, r4, r5, lr}
    227a:	4604      	mov	r4, r0
    227c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    227e:	4b09      	ldr	r3, [pc, #36]	; (22a4 <usb_d_cb_trans_more+0x2c>)
    2280:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2282:	4b09      	ldr	r3, [pc, #36]	; (22a8 <usb_d_cb_trans_more+0x30>)
    2284:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    2288:	789b      	ldrb	r3, [r3, #2]
    228a:	2b03      	cmp	r3, #3
    228c:	d001      	beq.n	2292 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    228e:	2000      	movs	r0, #0
}
    2290:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    2292:	4b05      	ldr	r3, [pc, #20]	; (22a8 <usb_d_cb_trans_more+0x30>)
    2294:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2298:	6983      	ldr	r3, [r0, #24]
    229a:	4629      	mov	r1, r5
    229c:	4620      	mov	r0, r4
    229e:	4798      	blx	r3
    22a0:	bd38      	pop	{r3, r4, r5, pc}
    22a2:	bf00      	nop
    22a4:	00002231 	.word	0x00002231
    22a8:	20000148 	.word	0x20000148

000022ac <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    22ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ae:	b085      	sub	sp, #20
    22b0:	4606      	mov	r6, r0
    22b2:	460d      	mov	r5, r1
    22b4:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    22b6:	4b4d      	ldr	r3, [pc, #308]	; (23ec <_usb_d_cb_trans_done+0x140>)
    22b8:	4798      	blx	r3
    22ba:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    22bc:	2d00      	cmp	r5, #0
    22be:	d15b      	bne.n	2378 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    22c0:	4a4b      	ldr	r2, [pc, #300]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    22c2:	0143      	lsls	r3, r0, #5
    22c4:	18d1      	adds	r1, r2, r3
    22c6:	2000      	movs	r0, #0
    22c8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    22ca:	5cd3      	ldrb	r3, [r2, r3]
    22cc:	b173      	cbz	r3, 22ec <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    22ce:	4b48      	ldr	r3, [pc, #288]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    22d0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    22d4:	2201      	movs	r2, #1
    22d6:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    22d8:	4845      	ldr	r0, [pc, #276]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    22da:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    22de:	69c3      	ldr	r3, [r0, #28]
    22e0:	463a      	mov	r2, r7
    22e2:	78c1      	ldrb	r1, [r0, #3]
    22e4:	4630      	mov	r0, r6
    22e6:	4798      	blx	r3
}
    22e8:	b005      	add	sp, #20
    22ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    22ec:	788b      	ldrb	r3, [r1, #2]
    22ee:	2b03      	cmp	r3, #3
    22f0:	d00b      	beq.n	230a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    22f2:	483f      	ldr	r0, [pc, #252]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    22f4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    22f8:	4614      	mov	r4, r2
    22fa:	69d3      	ldr	r3, [r2, #28]
    22fc:	320c      	adds	r2, #12
    22fe:	2100      	movs	r1, #0
    2300:	7860      	ldrb	r0, [r4, #1]
    2302:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2304:	2302      	movs	r3, #2
    2306:	70a3      	strb	r3, [r4, #2]
    2308:	e7ee      	b.n	22e8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    230a:	460b      	mov	r3, r1
    230c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2310:	460a      	mov	r2, r1
    2312:	69ce      	ldr	r6, [r1, #28]
    2314:	320c      	adds	r2, #12
    2316:	2101      	movs	r1, #1
    2318:	7858      	ldrb	r0, [r3, #1]
    231a:	47b0      	blx	r6
		if (err) {
    231c:	b1a0      	cbz	r0, 2348 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    231e:	4b34      	ldr	r3, [pc, #208]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    2320:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2324:	2205      	movs	r2, #5
    2326:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2328:	2202      	movs	r2, #2
    232a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    232c:	2d00      	cmp	r5, #0
    232e:	db09      	blt.n	2344 <_usb_d_cb_trans_done+0x98>
    2330:	482f      	ldr	r0, [pc, #188]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    2332:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    2336:	7840      	ldrb	r0, [r0, #1]
    2338:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    233c:	2101      	movs	r1, #1
    233e:	4b2d      	ldr	r3, [pc, #180]	; (23f4 <_usb_d_cb_trans_done+0x148>)
    2340:	4798      	blx	r3
    2342:	e7d1      	b.n	22e8 <_usb_d_cb_trans_done+0x3c>
    2344:	7858      	ldrb	r0, [r3, #1]
    2346:	e7f9      	b.n	233c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2348:	4829      	ldr	r0, [pc, #164]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    234a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    234e:	2304      	movs	r3, #4
    2350:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2352:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    2354:	2200      	movs	r2, #0
    2356:	9201      	str	r2, [sp, #4]
    2358:	9202      	str	r2, [sp, #8]
    235a:	4295      	cmp	r5, r2
    235c:	bfac      	ite	ge
    235e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    2362:	f003 030f 	andlt.w	r3, r3, #15
    2366:	f88d 300c 	strb.w	r3, [sp, #12]
    236a:	2301      	movs	r3, #1
    236c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    2370:	a801      	add	r0, sp, #4
    2372:	4b21      	ldr	r3, [pc, #132]	; (23f8 <_usb_d_cb_trans_done+0x14c>)
    2374:	4798      	blx	r3
    2376:	e7b7      	b.n	22e8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    2378:	2d01      	cmp	r5, #1
    237a:	d00a      	beq.n	2392 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    237c:	2d02      	cmp	r5, #2
    237e:	d01c      	beq.n	23ba <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    2380:	2d03      	cmp	r5, #3
    2382:	d02a      	beq.n	23da <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2384:	4b1a      	ldr	r3, [pc, #104]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    2386:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    238a:	2206      	movs	r2, #6
    238c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    238e:	70da      	strb	r2, [r3, #3]
    2390:	e7a2      	b.n	22d8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2392:	4a17      	ldr	r2, [pc, #92]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    2394:	0143      	lsls	r3, r0, #5
    2396:	18d1      	adds	r1, r2, r3
    2398:	2002      	movs	r0, #2
    239a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    239c:	5cd3      	ldrb	r3, [r2, r3]
    239e:	b12b      	cbz	r3, 23ac <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    23a0:	4b13      	ldr	r3, [pc, #76]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    23a2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    23a6:	2205      	movs	r2, #5
    23a8:	709a      	strb	r2, [r3, #2]
    23aa:	e795      	b.n	22d8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    23ac:	460b      	mov	r3, r1
    23ae:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    23b0:	2100      	movs	r1, #0
    23b2:	4630      	mov	r0, r6
    23b4:	4b0f      	ldr	r3, [pc, #60]	; (23f4 <_usb_d_cb_trans_done+0x148>)
    23b6:	4798      	blx	r3
    23b8:	e78e      	b.n	22d8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    23ba:	4a0d      	ldr	r2, [pc, #52]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    23bc:	0143      	lsls	r3, r0, #5
    23be:	18d1      	adds	r1, r2, r3
    23c0:	2004      	movs	r0, #4
    23c2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    23c4:	5cd3      	ldrb	r3, [r2, r3]
    23c6:	b12b      	cbz	r3, 23d4 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    23c8:	4b09      	ldr	r3, [pc, #36]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    23ca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    23ce:	2201      	movs	r2, #1
    23d0:	709a      	strb	r2, [r3, #2]
    23d2:	e781      	b.n	22d8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    23d4:	2302      	movs	r3, #2
    23d6:	708b      	strb	r3, [r1, #2]
			return;
    23d8:	e786      	b.n	22e8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    23da:	4b05      	ldr	r3, [pc, #20]	; (23f0 <_usb_d_cb_trans_done+0x144>)
    23dc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    23e0:	2200      	movs	r2, #0
    23e2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    23e4:	2205      	movs	r2, #5
    23e6:	70da      	strb	r2, [r3, #3]
    23e8:	e776      	b.n	22d8 <_usb_d_cb_trans_done+0x2c>
    23ea:	bf00      	nop
    23ec:	00002231 	.word	0x00002231
    23f0:	20000148 	.word	0x20000148
    23f4:	00005589 	.word	0x00005589
    23f8:	00005731 	.word	0x00005731

000023fc <usb_d_cb_trans_setup>:
{
    23fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2400:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2402:	4b1c      	ldr	r3, [pc, #112]	; (2474 <usb_d_cb_trans_setup+0x78>)
    2404:	4798      	blx	r3
    2406:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    2408:	4c1b      	ldr	r4, [pc, #108]	; (2478 <usb_d_cb_trans_setup+0x7c>)
    240a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    240e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2410:	4621      	mov	r1, r4
    2412:	4628      	mov	r0, r5
    2414:	4b19      	ldr	r3, [pc, #100]	; (247c <usb_d_cb_trans_setup+0x80>)
    2416:	4798      	blx	r3
	if (n != 8) {
    2418:	b2c0      	uxtb	r0, r0
    241a:	2808      	cmp	r0, #8
    241c:	d009      	beq.n	2432 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    241e:	2101      	movs	r1, #1
    2420:	4628      	mov	r0, r5
    2422:	4c17      	ldr	r4, [pc, #92]	; (2480 <usb_d_cb_trans_setup+0x84>)
    2424:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2426:	2101      	movs	r1, #1
    2428:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    242c:	47a0      	blx	r4
		return;
    242e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2432:	2100      	movs	r1, #0
    2434:	4628      	mov	r0, r5
    2436:	4f12      	ldr	r7, [pc, #72]	; (2480 <usb_d_cb_trans_setup+0x84>)
    2438:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    243a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    243e:	2100      	movs	r1, #0
    2440:	4640      	mov	r0, r8
    2442:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2444:	4b0c      	ldr	r3, [pc, #48]	; (2478 <usb_d_cb_trans_setup+0x7c>)
    2446:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    244a:	2201      	movs	r2, #1
    244c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    244e:	695b      	ldr	r3, [r3, #20]
    2450:	4621      	mov	r1, r4
    2452:	4628      	mov	r0, r5
    2454:	4798      	blx	r3
    2456:	b108      	cbz	r0, 245c <usb_d_cb_trans_setup+0x60>
    2458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    245c:	4b06      	ldr	r3, [pc, #24]	; (2478 <usb_d_cb_trans_setup+0x7c>)
    245e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2462:	2305      	movs	r3, #5
    2464:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2466:	2101      	movs	r1, #1
    2468:	4628      	mov	r0, r5
    246a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    246c:	2101      	movs	r1, #1
    246e:	4640      	mov	r0, r8
    2470:	47b8      	blx	r7
    2472:	e7f1      	b.n	2458 <usb_d_cb_trans_setup+0x5c>
    2474:	00002231 	.word	0x00002231
    2478:	20000148 	.word	0x20000148
    247c:	000056d1 	.word	0x000056d1
    2480:	00005589 	.word	0x00005589

00002484 <usb_d_init>:

int32_t usb_d_init(void)
{
    2484:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    2486:	4b11      	ldr	r3, [pc, #68]	; (24cc <usb_d_init+0x48>)
    2488:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    248a:	2800      	cmp	r0, #0
    248c:	db1d      	blt.n	24ca <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    248e:	4c10      	ldr	r4, [pc, #64]	; (24d0 <usb_d_init+0x4c>)
    2490:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    2494:	2100      	movs	r1, #0
    2496:	4620      	mov	r0, r4
    2498:	4b0e      	ldr	r3, [pc, #56]	; (24d4 <usb_d_init+0x50>)
    249a:	4798      	blx	r3
    249c:	4623      	mov	r3, r4
    249e:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    24a2:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    24a4:	4a0c      	ldr	r2, [pc, #48]	; (24d8 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    24a6:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    24a8:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    24aa:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    24ac:	61da      	str	r2, [r3, #28]
    24ae:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    24b0:	4283      	cmp	r3, r0
    24b2:	d1f8      	bne.n	24a6 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    24b4:	4909      	ldr	r1, [pc, #36]	; (24dc <usb_d_init+0x58>)
    24b6:	2000      	movs	r0, #0
    24b8:	4c09      	ldr	r4, [pc, #36]	; (24e0 <usb_d_init+0x5c>)
    24ba:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    24bc:	4909      	ldr	r1, [pc, #36]	; (24e4 <usb_d_init+0x60>)
    24be:	2001      	movs	r0, #1
    24c0:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    24c2:	4909      	ldr	r1, [pc, #36]	; (24e8 <usb_d_init+0x64>)
    24c4:	2002      	movs	r0, #2
    24c6:	47a0      	blx	r4
	return ERR_NONE;
    24c8:	2000      	movs	r0, #0
}
    24ca:	bd10      	pop	{r4, pc}
    24cc:	00004fe1 	.word	0x00004fe1
    24d0:	20000148 	.word	0x20000148
    24d4:	000069ef 	.word	0x000069ef
    24d8:	00002275 	.word	0x00002275
    24dc:	000023fd 	.word	0x000023fd
    24e0:	00005939 	.word	0x00005939
    24e4:	00002279 	.word	0x00002279
    24e8:	000022ad 	.word	0x000022ad

000024ec <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    24ec:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    24ee:	4b01      	ldr	r3, [pc, #4]	; (24f4 <usb_d_register_callback+0x8>)
    24f0:	4798      	blx	r3
    24f2:	bd08      	pop	{r3, pc}
    24f4:	00005911 	.word	0x00005911

000024f8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    24f8:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    24fa:	4b01      	ldr	r3, [pc, #4]	; (2500 <usb_d_set_address+0x8>)
    24fc:	4798      	blx	r3
    24fe:	bd08      	pop	{r3, pc}
    2500:	000050e9 	.word	0x000050e9

00002504 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2506:	4606      	mov	r6, r0
    2508:	460c      	mov	r4, r1
    250a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    250c:	4b0f      	ldr	r3, [pc, #60]	; (254c <usb_d_ep_init+0x48>)
    250e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    2510:	2800      	cmp	r0, #0
    2512:	da14      	bge.n	253e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2514:	20ff      	movs	r0, #255	; 0xff
    2516:	4b0d      	ldr	r3, [pc, #52]	; (254c <usb_d_ep_init+0x48>)
    2518:	4798      	blx	r3
		if (ep_index < 0) {
    251a:	1e05      	subs	r5, r0, #0
    251c:	db12      	blt.n	2544 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    251e:	463a      	mov	r2, r7
    2520:	4621      	mov	r1, r4
    2522:	4630      	mov	r0, r6
    2524:	4b0a      	ldr	r3, [pc, #40]	; (2550 <usb_d_ep_init+0x4c>)
    2526:	4798      	blx	r3
	if (rc < 0) {
    2528:	2800      	cmp	r0, #0
    252a:	db0d      	blt.n	2548 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    252c:	4b09      	ldr	r3, [pc, #36]	; (2554 <usb_d_ep_init+0x50>)
    252e:	0168      	lsls	r0, r5, #5
    2530:	181a      	adds	r2, r3, r0
    2532:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2534:	f004 0403 	and.w	r4, r4, #3
    2538:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    253a:	2000      	movs	r0, #0
    253c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    253e:	f06f 0013 	mvn.w	r0, #19
    2542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    2544:	f06f 0014 	mvn.w	r0, #20
}
    2548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    254a:	bf00      	nop
    254c:	00002231 	.word	0x00002231
    2550:	000050f5 	.word	0x000050f5
    2554:	20000148 	.word	0x20000148

00002558 <usb_d_ep0_init>:
{
    2558:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    255a:	4602      	mov	r2, r0
    255c:	2100      	movs	r1, #0
    255e:	4608      	mov	r0, r1
    2560:	4b01      	ldr	r3, [pc, #4]	; (2568 <usb_d_ep0_init+0x10>)
    2562:	4798      	blx	r3
}
    2564:	bd08      	pop	{r3, pc}
    2566:	bf00      	nop
    2568:	00002505 	.word	0x00002505

0000256c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    256c:	b538      	push	{r3, r4, r5, lr}
    256e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2570:	4b06      	ldr	r3, [pc, #24]	; (258c <usb_d_ep_deinit+0x20>)
    2572:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    2574:	1e04      	subs	r4, r0, #0
    2576:	db07      	blt.n	2588 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2578:	4628      	mov	r0, r5
    257a:	4b05      	ldr	r3, [pc, #20]	; (2590 <usb_d_ep_deinit+0x24>)
    257c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    257e:	4805      	ldr	r0, [pc, #20]	; (2594 <usb_d_ep_deinit+0x28>)
    2580:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    2584:	23ff      	movs	r3, #255	; 0xff
    2586:	7043      	strb	r3, [r0, #1]
    2588:	bd38      	pop	{r3, r4, r5, pc}
    258a:	bf00      	nop
    258c:	00002231 	.word	0x00002231
    2590:	0000520d 	.word	0x0000520d
    2594:	20000148 	.word	0x20000148

00002598 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2598:	b538      	push	{r3, r4, r5, lr}
    259a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    259c:	4b0e      	ldr	r3, [pc, #56]	; (25d8 <usb_d_ep_enable+0x40>)
    259e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    25a0:	1e04      	subs	r4, r0, #0
    25a2:	db16      	blt.n	25d2 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    25a4:	0163      	lsls	r3, r4, #5
    25a6:	4a0d      	ldr	r2, [pc, #52]	; (25dc <usb_d_ep_enable+0x44>)
    25a8:	5cd3      	ldrb	r3, [r2, r3]
    25aa:	2b00      	cmp	r3, #0
    25ac:	bf0c      	ite	eq
    25ae:	2202      	moveq	r2, #2
    25b0:	2201      	movne	r2, #1
    25b2:	4b0a      	ldr	r3, [pc, #40]	; (25dc <usb_d_ep_enable+0x44>)
    25b4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    25b8:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    25ba:	4628      	mov	r0, r5
    25bc:	4b08      	ldr	r3, [pc, #32]	; (25e0 <usb_d_ep_enable+0x48>)
    25be:	4798      	blx	r3
	if (rc < 0) {
    25c0:	2800      	cmp	r0, #0
    25c2:	db00      	blt.n	25c6 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    25c4:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    25c6:	4b05      	ldr	r3, [pc, #20]	; (25dc <usb_d_ep_enable+0x44>)
    25c8:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    25cc:	2300      	movs	r3, #0
    25ce:	70a3      	strb	r3, [r4, #2]
    25d0:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    25d2:	f06f 0011 	mvn.w	r0, #17
    25d6:	e7f5      	b.n	25c4 <usb_d_ep_enable+0x2c>
    25d8:	00002231 	.word	0x00002231
    25dc:	20000148 	.word	0x20000148
    25e0:	000052d1 	.word	0x000052d1

000025e4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    25e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    25e8:	b086      	sub	sp, #24
    25ea:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    25ec:	7a07      	ldrb	r7, [r0, #8]
    25ee:	4638      	mov	r0, r7
    25f0:	4b3f      	ldr	r3, [pc, #252]	; (26f0 <usb_d_ep_transfer+0x10c>)
    25f2:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    25f4:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    25f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    25fa:	1e06      	subs	r6, r0, #0
    25fc:	db72      	blt.n	26e4 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    25fe:	a804      	add	r0, sp, #16
    2600:	4b3c      	ldr	r3, [pc, #240]	; (26f4 <usb_d_ep_transfer+0x110>)
    2602:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2604:	4b3c      	ldr	r3, [pc, #240]	; (26f8 <usb_d_ep_transfer+0x114>)
    2606:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    260a:	789b      	ldrb	r3, [r3, #2]
    260c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    2610:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2614:	b2db      	uxtb	r3, r3
    2616:	2b01      	cmp	r3, #1
    2618:	d011      	beq.n	263e <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    261a:	a804      	add	r0, sp, #16
    261c:	4b37      	ldr	r3, [pc, #220]	; (26fc <usb_d_ep_transfer+0x118>)
    261e:	4798      	blx	r3
		switch (state) {
    2620:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2624:	b2db      	uxtb	r3, r3
    2626:	2b05      	cmp	r3, #5
    2628:	d05f      	beq.n	26ea <usb_d_ep_transfer+0x106>
    262a:	2b06      	cmp	r3, #6
    262c:	d023      	beq.n	2676 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    262e:	2b00      	cmp	r3, #0
    2630:	bf0c      	ite	eq
    2632:	f06f 0012 	mvneq.w	r0, #18
    2636:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    2638:	b006      	add	sp, #24
    263a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    263e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 26f8 <usb_d_ep_transfer+0x114>
    2642:	ea4f 1946 	mov.w	r9, r6, lsl #5
    2646:	eb0a 0309 	add.w	r3, sl, r9
    264a:	2203      	movs	r2, #3
    264c:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    264e:	a804      	add	r0, sp, #16
    2650:	4b2a      	ldr	r3, [pc, #168]	; (26fc <usb_d_ep_transfer+0x118>)
    2652:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2654:	f81a 3009 	ldrb.w	r3, [sl, r9]
    2658:	b183      	cbz	r3, 267c <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    265a:	7a22      	ldrb	r2, [r4, #8]
    265c:	3500      	adds	r5, #0
    265e:	bf18      	it	ne
    2660:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    2662:	6823      	ldr	r3, [r4, #0]
    2664:	9301      	str	r3, [sp, #4]
    2666:	f8cd 8008 	str.w	r8, [sp, #8]
    266a:	f017 0f80 	tst.w	r7, #128	; 0x80
    266e:	d119      	bne.n	26a4 <usb_d_ep_transfer+0xc0>
    2670:	f002 030f 	and.w	r3, r2, #15
    2674:	e018      	b.n	26a8 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    2676:	f06f 000f 	mvn.w	r0, #15
    267a:	e7dd      	b.n	2638 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    267c:	4b1e      	ldr	r3, [pc, #120]	; (26f8 <usb_d_ep_transfer+0x114>)
    267e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    2682:	7cda      	ldrb	r2, [r3, #19]
    2684:	7c9d      	ldrb	r5, [r3, #18]
    2686:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    268a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    268c:	b9a5      	cbnz	r5, 26b8 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    268e:	4b1a      	ldr	r3, [pc, #104]	; (26f8 <usb_d_ep_transfer+0x114>)
    2690:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2694:	2304      	movs	r3, #4
    2696:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    2698:	2300      	movs	r3, #0
			zlp                 = true;
    269a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    269c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    269e:	6821      	ldr	r1, [r4, #0]
    26a0:	9101      	str	r1, [sp, #4]
    26a2:	9302      	str	r3, [sp, #8]
    26a4:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    26a8:	f88d 300c 	strb.w	r3, [sp, #12]
    26ac:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    26b0:	a801      	add	r0, sp, #4
    26b2:	4b13      	ldr	r3, [pc, #76]	; (2700 <usb_d_ep_transfer+0x11c>)
    26b4:	4798      	blx	r3
	return rc;
    26b6:	e7bf      	b.n	2638 <usb_d_ep_transfer+0x54>
    26b8:	4643      	mov	r3, r8
    26ba:	45a8      	cmp	r8, r5
    26bc:	bf28      	it	cs
    26be:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    26c0:	4a0d      	ldr	r2, [pc, #52]	; (26f8 <usb_d_ep_transfer+0x114>)
    26c2:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    26c6:	f996 200c 	ldrsb.w	r2, [r6, #12]
    26ca:	2a00      	cmp	r2, #0
    26cc:	db05      	blt.n	26da <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    26ce:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    26d0:	6821      	ldr	r1, [r4, #0]
    26d2:	9101      	str	r1, [sp, #4]
    26d4:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    26d6:	2500      	movs	r5, #0
    26d8:	e7ca      	b.n	2670 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    26da:	429d      	cmp	r5, r3
    26dc:	bf94      	ite	ls
    26de:	2500      	movls	r5, #0
    26e0:	2501      	movhi	r5, #1
    26e2:	e7db      	b.n	269c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    26e4:	f06f 0011 	mvn.w	r0, #17
    26e8:	e7a6      	b.n	2638 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    26ea:	2002      	movs	r0, #2
    26ec:	e7a4      	b.n	2638 <usb_d_ep_transfer+0x54>
    26ee:	bf00      	nop
    26f0:	00002231 	.word	0x00002231
    26f4:	00001af9 	.word	0x00001af9
    26f8:	20000148 	.word	0x20000148
    26fc:	00001b07 	.word	0x00001b07
    2700:	00005731 	.word	0x00005731

00002704 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2704:	b538      	push	{r3, r4, r5, lr}
    2706:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    2708:	b141      	cbz	r1, 271c <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    270a:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    270c:	bf0c      	ite	eq
    270e:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2710:	2102      	movne	r1, #2
    2712:	4b13      	ldr	r3, [pc, #76]	; (2760 <usb_d_ep_halt+0x5c>)
    2714:	4798      	blx	r3
    2716:	4603      	mov	r3, r0
	}
}
    2718:	4618      	mov	r0, r3
    271a:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    271c:	4b11      	ldr	r3, [pc, #68]	; (2764 <usb_d_ep_halt+0x60>)
    271e:	4798      	blx	r3
	if (ep_index < 0) {
    2720:	1e05      	subs	r5, r0, #0
    2722:	db19      	blt.n	2758 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2724:	2102      	movs	r1, #2
    2726:	4620      	mov	r0, r4
    2728:	4b0d      	ldr	r3, [pc, #52]	; (2760 <usb_d_ep_halt+0x5c>)
    272a:	4798      	blx	r3
    272c:	4603      	mov	r3, r0
    272e:	2800      	cmp	r0, #0
    2730:	d0f2      	beq.n	2718 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2732:	2100      	movs	r1, #0
    2734:	4620      	mov	r0, r4
    2736:	4b0a      	ldr	r3, [pc, #40]	; (2760 <usb_d_ep_halt+0x5c>)
    2738:	4798      	blx	r3
		if (rc < 0) {
    273a:	1e03      	subs	r3, r0, #0
    273c:	dbec      	blt.n	2718 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    273e:	4b0a      	ldr	r3, [pc, #40]	; (2768 <usb_d_ep_halt+0x64>)
    2740:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2744:	2201      	movs	r2, #1
    2746:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2748:	2103      	movs	r1, #3
    274a:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    274c:	69db      	ldr	r3, [r3, #28]
    274e:	2200      	movs	r2, #0
    2750:	4620      	mov	r0, r4
    2752:	4798      	blx	r3
	return ERR_NONE;
    2754:	2300      	movs	r3, #0
    2756:	e7df      	b.n	2718 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    2758:	f06f 0311 	mvn.w	r3, #17
    275c:	e7dc      	b.n	2718 <usb_d_ep_halt+0x14>
    275e:	bf00      	nop
    2760:	00005589 	.word	0x00005589
    2764:	00002231 	.word	0x00002231
    2768:	20000148 	.word	0x20000148

0000276c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    276c:	b538      	push	{r3, r4, r5, lr}
    276e:	460d      	mov	r5, r1
    2770:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    2772:	4b0e      	ldr	r3, [pc, #56]	; (27ac <usb_d_ep_register_callback+0x40>)
    2774:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2776:	4b0e      	ldr	r3, [pc, #56]	; (27b0 <usb_d_ep_register_callback+0x44>)
    2778:	2c00      	cmp	r4, #0
    277a:	bf08      	it	eq
    277c:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    277e:	2800      	cmp	r0, #0
    2780:	db13      	blt.n	27aa <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    2782:	2d01      	cmp	r5, #1
    2784:	d008      	beq.n	2798 <usb_d_ep_register_callback+0x2c>
    2786:	b115      	cbz	r5, 278e <usb_d_ep_register_callback+0x22>
    2788:	2d02      	cmp	r5, #2
    278a:	d00a      	beq.n	27a2 <usb_d_ep_register_callback+0x36>
    278c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    278e:	4b09      	ldr	r3, [pc, #36]	; (27b4 <usb_d_ep_register_callback+0x48>)
    2790:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2794:	6144      	str	r4, [r0, #20]
		break;
    2796:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2798:	4b06      	ldr	r3, [pc, #24]	; (27b4 <usb_d_ep_register_callback+0x48>)
    279a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    279e:	6184      	str	r4, [r0, #24]
		break;
    27a0:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    27a2:	4b04      	ldr	r3, [pc, #16]	; (27b4 <usb_d_ep_register_callback+0x48>)
    27a4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    27a8:	61c4      	str	r4, [r0, #28]
    27aa:	bd38      	pop	{r3, r4, r5, pc}
    27ac:	00002231 	.word	0x00002231
    27b0:	00002275 	.word	0x00002275
    27b4:	20000148 	.word	0x20000148

000027b8 <list_insert_as_head>:
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
	ASSERT(!is_list_element(list, element));

	((struct list_element *)element)->next = list->head;
    27b8:	6803      	ldr	r3, [r0, #0]
    27ba:	600b      	str	r3, [r1, #0]
	list->head                             = (struct list_element *)element;
    27bc:	6001      	str	r1, [r0, #0]
    27be:	4770      	bx	lr

000027c0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    27c0:	6803      	ldr	r3, [r0, #0]
    27c2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    27c4:	6001      	str	r1, [r0, #0]
    27c6:	4770      	bx	lr

000027c8 <list_insert_at_end>:
/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
	struct list_element *it = list->head;
    27c8:	6802      	ldr	r2, [r0, #0]

	ASSERT(!is_list_element(list, element));

	if (!list->head) {
    27ca:	b922      	cbnz	r2, 27d6 <list_insert_at_end+0xe>
		list->head                             = (struct list_element *)element;
    27cc:	6001      	str	r1, [r0, #0]
		((struct list_element *)element)->next = NULL;
    27ce:	2300      	movs	r3, #0
    27d0:	600b      	str	r3, [r1, #0]
		return;
    27d2:	4770      	bx	lr
	}

	while (it->next) {
		it = it->next;
    27d4:	461a      	mov	r2, r3
	while (it->next) {
    27d6:	6813      	ldr	r3, [r2, #0]
    27d8:	2b00      	cmp	r3, #0
    27da:	d1fb      	bne.n	27d4 <list_insert_at_end+0xc>
	}
	it->next                               = (struct list_element *)element;
    27dc:	6011      	str	r1, [r2, #0]
	((struct list_element *)element)->next = NULL;
    27de:	600b      	str	r3, [r1, #0]
    27e0:	4770      	bx	lr

000027e2 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    27e2:	6803      	ldr	r3, [r0, #0]
    27e4:	b10b      	cbz	r3, 27ea <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    27e6:	681a      	ldr	r2, [r3, #0]
    27e8:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    27ea:	4618      	mov	r0, r3
    27ec:	4770      	bx	lr

000027ee <ringbuffer_init>:
	ASSERT(rb && buf && size);

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    27ee:	1e53      	subs	r3, r2, #1
    27f0:	421a      	tst	r2, r3
    27f2:	d106      	bne.n	2802 <ringbuffer_init+0x14>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    27f4:	6043      	str	r3, [r0, #4]
	rb->read_index  = 0;
    27f6:	2300      	movs	r3, #0
    27f8:	6083      	str	r3, [r0, #8]
	rb->write_index = rb->read_index;
    27fa:	60c3      	str	r3, [r0, #12]
	rb->buf         = (uint8_t *)buf;
    27fc:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
    27fe:	4618      	mov	r0, r3
    2800:	4770      	bx	lr
		return ERR_INVALID_ARG;
    2802:	f06f 000c 	mvn.w	r0, #12
}
    2806:	4770      	bx	lr

00002808 <ringbuffer_get>:
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
	ASSERT(rb && data);

	if (rb->write_index != rb->read_index) {
    2808:	6883      	ldr	r3, [r0, #8]
    280a:	68c2      	ldr	r2, [r0, #12]
    280c:	429a      	cmp	r2, r3
    280e:	d009      	beq.n	2824 <ringbuffer_get+0x1c>
		*data = rb->buf[rb->read_index & rb->size];
    2810:	6842      	ldr	r2, [r0, #4]
    2812:	4013      	ands	r3, r2
    2814:	6802      	ldr	r2, [r0, #0]
    2816:	5cd3      	ldrb	r3, [r2, r3]
    2818:	700b      	strb	r3, [r1, #0]
		rb->read_index++;
    281a:	6883      	ldr	r3, [r0, #8]
    281c:	3301      	adds	r3, #1
    281e:	6083      	str	r3, [r0, #8]
		return ERR_NONE;
    2820:	2000      	movs	r0, #0
    2822:	4770      	bx	lr
	}

	return ERR_NOT_FOUND;
    2824:	f06f 0009 	mvn.w	r0, #9
}
    2828:	4770      	bx	lr

0000282a <ringbuffer_put>:
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
	ASSERT(rb);

	rb->buf[rb->write_index & rb->size] = data;
    282a:	68c3      	ldr	r3, [r0, #12]
    282c:	6842      	ldr	r2, [r0, #4]
    282e:	4013      	ands	r3, r2
    2830:	6802      	ldr	r2, [r0, #0]
    2832:	54d1      	strb	r1, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2834:	68c3      	ldr	r3, [r0, #12]
    2836:	6841      	ldr	r1, [r0, #4]
    2838:	6882      	ldr	r2, [r0, #8]
    283a:	1a9a      	subs	r2, r3, r2
    283c:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    283e:	bf84      	itt	hi
    2840:	1a59      	subhi	r1, r3, r1
    2842:	6081      	strhi	r1, [r0, #8]
	}

	rb->write_index++;
    2844:	3301      	adds	r3, #1
    2846:	60c3      	str	r3, [r0, #12]

	return ERR_NONE;
}
    2848:	2000      	movs	r0, #0
    284a:	4770      	bx	lr

0000284c <ringbuffer_num>:
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
	ASSERT(rb);

	return rb->write_index - rb->read_index;
    284c:	68c2      	ldr	r2, [r0, #12]
    284e:	6880      	ldr	r0, [r0, #8]
}
    2850:	1a10      	subs	r0, r2, r0
    2852:	4770      	bx	lr

00002854 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2854:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2856:	4a06      	ldr	r2, [pc, #24]	; (2870 <_sbrk+0x1c>)
    2858:	6812      	ldr	r2, [r2, #0]
    285a:	b122      	cbz	r2, 2866 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    285c:	4a04      	ldr	r2, [pc, #16]	; (2870 <_sbrk+0x1c>)
    285e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2860:	4403      	add	r3, r0
    2862:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2864:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2866:	4903      	ldr	r1, [pc, #12]	; (2874 <_sbrk+0x20>)
    2868:	4a01      	ldr	r2, [pc, #4]	; (2870 <_sbrk+0x1c>)
    286a:	6011      	str	r1, [r2, #0]
    286c:	e7f6      	b.n	285c <_sbrk+0x8>
    286e:	bf00      	nop
    2870:	200002e8 	.word	0x200002e8
    2874:	200134f8 	.word	0x200134f8

00002878 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    2878:	f04f 30ff 	mov.w	r0, #4294967295
    287c:	4770      	bx	lr

0000287e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    287e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2882:	604b      	str	r3, [r1, #4]

	return 0;
}
    2884:	2000      	movs	r0, #0
    2886:	4770      	bx	lr

00002888 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    2888:	2001      	movs	r0, #1
    288a:	4770      	bx	lr

0000288c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    288c:	2000      	movs	r0, #0
    288e:	4770      	bx	lr

00002890 <_adc_get_regs>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2890:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2894:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
{
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
		if (_adcs[i].number == n) {
    2898:	f3c0 2087 	ubfx	r0, r0, #10, #8
		}
	}

	ASSERT(false);
	return 0;
}
    289c:	2801      	cmp	r0, #1
    289e:	bf14      	ite	ne
    28a0:	2000      	movne	r0, #0
    28a2:	2001      	moveq	r0, #1
    28a4:	4770      	bx	lr
	...

000028a8 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    28a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    28aa:	f013 0f01 	tst.w	r3, #1
    28ae:	d11b      	bne.n	28e8 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    28b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28b2:	f013 0f03 	tst.w	r3, #3
    28b6:	d1fb      	bne.n	28b0 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    28b8:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    28ba:	f013 0f02 	tst.w	r3, #2
    28be:	d00d      	beq.n	28dc <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    28c0:	8803      	ldrh	r3, [r0, #0]
    28c2:	f023 0302 	bic.w	r3, r3, #2
    28c6:	041b      	lsls	r3, r3, #16
    28c8:	0c1b      	lsrs	r3, r3, #16
    28ca:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    28cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28ce:	f013 0f03 	tst.w	r3, #3
    28d2:	d1fb      	bne.n	28cc <_adc_init+0x24>
    28d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28d6:	f013 0f02 	tst.w	r3, #2
    28da:	d1fb      	bne.n	28d4 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    28dc:	2301      	movs	r3, #1
    28de:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    28e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28e2:	f013 0f03 	tst.w	r3, #3
    28e6:	d1fb      	bne.n	28e0 <_adc_init+0x38>
    28e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28ea:	f013 0f01 	tst.w	r3, #1
    28ee:	d1fb      	bne.n	28e8 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    28f0:	2316      	movs	r3, #22
    28f2:	4a37      	ldr	r2, [pc, #220]	; (29d0 <_adc_init+0x128>)
    28f4:	fb03 2301 	mla	r3, r3, r1, r2
    28f8:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    28fa:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    28fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2902:	2b00      	cmp	r3, #0
    2904:	d1fa      	bne.n	28fc <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2906:	2316      	movs	r3, #22
    2908:	4a31      	ldr	r2, [pc, #196]	; (29d0 <_adc_init+0x128>)
    290a:	fb03 2301 	mla	r3, r3, r1, r2
    290e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2910:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2912:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2914:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2918:	2b00      	cmp	r3, #0
    291a:	d1fa      	bne.n	2912 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    291c:	2316      	movs	r3, #22
    291e:	4a2c      	ldr	r2, [pc, #176]	; (29d0 <_adc_init+0x128>)
    2920:	fb03 2301 	mla	r3, r3, r1, r2
    2924:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    2926:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2928:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    292a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    292c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    292e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2932:	2b00      	cmp	r3, #0
    2934:	d1fa      	bne.n	292c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    2936:	2316      	movs	r3, #22
    2938:	4a25      	ldr	r2, [pc, #148]	; (29d0 <_adc_init+0x128>)
    293a:	fb03 2301 	mla	r3, r3, r1, r2
    293e:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2940:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2942:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2944:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2948:	2b00      	cmp	r3, #0
    294a:	d1fa      	bne.n	2942 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    294c:	2316      	movs	r3, #22
    294e:	4a20      	ldr	r2, [pc, #128]	; (29d0 <_adc_init+0x128>)
    2950:	fb03 2301 	mla	r3, r3, r1, r2
    2954:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2956:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2958:	6b03      	ldr	r3, [r0, #48]	; 0x30
    295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    295e:	2b00      	cmp	r3, #0
    2960:	d1fa      	bne.n	2958 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    2962:	2316      	movs	r3, #22
    2964:	4a1a      	ldr	r2, [pc, #104]	; (29d0 <_adc_init+0x128>)
    2966:	fb03 2301 	mla	r3, r3, r1, r2
    296a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    296c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    296e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2970:	f013 0f80 	tst.w	r3, #128	; 0x80
    2974:	d1fb      	bne.n	296e <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    2976:	2316      	movs	r3, #22
    2978:	4a15      	ldr	r2, [pc, #84]	; (29d0 <_adc_init+0x128>)
    297a:	fb03 2301 	mla	r3, r3, r1, r2
    297e:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2980:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2982:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2984:	f413 7f80 	tst.w	r3, #256	; 0x100
    2988:	d1fb      	bne.n	2982 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    298a:	2316      	movs	r3, #22
    298c:	4a10      	ldr	r2, [pc, #64]	; (29d0 <_adc_init+0x128>)
    298e:	fb03 2301 	mla	r3, r3, r1, r2
    2992:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2994:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2996:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2998:	f413 7f00 	tst.w	r3, #512	; 0x200
    299c:	d1fb      	bne.n	2996 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    299e:	2316      	movs	r3, #22
    29a0:	4a0b      	ldr	r2, [pc, #44]	; (29d0 <_adc_init+0x128>)
    29a2:	fb03 2301 	mla	r3, r3, r1, r2
    29a6:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    29a8:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    29aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    29ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
    29b0:	d1fb      	bne.n	29aa <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    29b2:	2216      	movs	r2, #22
    29b4:	4b06      	ldr	r3, [pc, #24]	; (29d0 <_adc_init+0x128>)
    29b6:	fb02 3101 	mla	r1, r2, r1, r3
    29ba:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    29bc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    29be:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    29c0:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    29c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    29c4:	f013 0f03 	tst.w	r3, #3
    29c8:	d1fb      	bne.n	29c2 <_adc_init+0x11a>

	return ERR_NONE;
}
    29ca:	2000      	movs	r0, #0
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop
    29d0:	00007ad8 	.word	0x00007ad8

000029d4 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    29d4:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    29d6:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    29d8:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    29dc:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    29e0:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    29e2:	f013 0f01 	tst.w	r3, #1
    29e6:	d106      	bne.n	29f6 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    29e8:	f013 0f02 	tst.w	r3, #2
    29ec:	d10d      	bne.n	2a0a <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    29ee:	f013 0f04 	tst.w	r3, #4
    29f2:	d111      	bne.n	2a18 <_adc_interrupt_handler+0x44>
    29f4:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    29f6:	2301      	movs	r3, #1
    29f8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    29fc:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    2a00:	6883      	ldr	r3, [r0, #8]
    2a02:	b292      	uxth	r2, r2
    2a04:	2100      	movs	r1, #0
    2a06:	4798      	blx	r3
    2a08:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2a0a:	2302      	movs	r3, #2
    2a0c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    2a10:	6843      	ldr	r3, [r0, #4]
    2a12:	2100      	movs	r1, #0
    2a14:	4798      	blx	r3
    2a16:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2a18:	2304      	movs	r3, #4
    2a1a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    2a1e:	6803      	ldr	r3, [r0, #0]
    2a20:	2100      	movs	r1, #0
    2a22:	4798      	blx	r3
	}
}
    2a24:	e7e6      	b.n	29f4 <_adc_interrupt_handler+0x20>

00002a26 <_adc_get_irq_num>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2a26:	6940      	ldr	r0, [r0, #20]
    2a28:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2a2c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2a30:	0a80      	lsrs	r0, r0, #10
	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    2a32:	0040      	lsls	r0, r0, #1
    2a34:	3076      	adds	r0, #118	; 0x76
}
    2a36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2a3a:	4770      	bx	lr

00002a3c <_adc_async_init>:
{
    2a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a40:	4605      	mov	r5, r0
    2a42:	460c      	mov	r4, r1
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2a44:	4608      	mov	r0, r1
    2a46:	4b37      	ldr	r3, [pc, #220]	; (2b24 <_adc_async_init+0xe8>)
    2a48:	4798      	blx	r3
    2a4a:	4601      	mov	r1, r0
    2a4c:	4620      	mov	r0, r4
    2a4e:	4b36      	ldr	r3, [pc, #216]	; (2b28 <_adc_async_init+0xec>)
    2a50:	4798      	blx	r3
	if (init_status) {
    2a52:	4606      	mov	r6, r0
    2a54:	b110      	cbz	r0, 2a5c <_adc_async_init+0x20>
}
    2a56:	4630      	mov	r0, r6
    2a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    2a5c:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    2a5e:	4b33      	ldr	r3, [pc, #204]	; (2b2c <_adc_async_init+0xf0>)
    2a60:	429c      	cmp	r4, r3
    2a62:	d05c      	beq.n	2b1e <_adc_async_init+0xe2>
	if (hw == ADC1) {
    2a64:	4b32      	ldr	r3, [pc, #200]	; (2b30 <_adc_async_init+0xf4>)
    2a66:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    2a68:	bf04      	itt	eq
    2a6a:	4b32      	ldreq	r3, [pc, #200]	; (2b34 <_adc_async_init+0xf8>)
    2a6c:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    2a6e:	4628      	mov	r0, r5
    2a70:	4f31      	ldr	r7, [pc, #196]	; (2b38 <_adc_async_init+0xfc>)
    2a72:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a74:	0943      	lsrs	r3, r0, #5
    2a76:	f000 001f 	and.w	r0, r0, #31
    2a7a:	2401      	movs	r4, #1
    2a7c:	fa04 f000 	lsl.w	r0, r4, r0
    2a80:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 2b3c <_adc_async_init+0x100>
    2a84:	3320      	adds	r3, #32
    2a86:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a8e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    2a92:	4628      	mov	r0, r5
    2a94:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a96:	0943      	lsrs	r3, r0, #5
    2a98:	f000 001f 	and.w	r0, r0, #31
    2a9c:	fa04 f000 	lsl.w	r0, r4, r0
    2aa0:	3360      	adds	r3, #96	; 0x60
    2aa2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    2aa6:	4628      	mov	r0, r5
    2aa8:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2aaa:	0943      	lsrs	r3, r0, #5
    2aac:	f000 001f 	and.w	r0, r0, #31
    2ab0:	4084      	lsls	r4, r0
    2ab2:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    2ab6:	4628      	mov	r0, r5
    2ab8:	47b8      	blx	r7
    2aba:	3001      	adds	r0, #1
    2abc:	b280      	uxth	r0, r0
    2abe:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2ac0:	2b00      	cmp	r3, #0
    2ac2:	dbc8      	blt.n	2a56 <_adc_async_init+0x1a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ac4:	095b      	lsrs	r3, r3, #5
    2ac6:	f000 001f 	and.w	r0, r0, #31
    2aca:	2201      	movs	r2, #1
    2acc:	fa02 f000 	lsl.w	r0, r2, r0
    2ad0:	3320      	adds	r3, #32
    2ad2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2ad6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ada:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    2ade:	4628      	mov	r0, r5
    2ae0:	47b8      	blx	r7
    2ae2:	3001      	adds	r0, #1
    2ae4:	b280      	uxth	r0, r0
    2ae6:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2ae8:	2b00      	cmp	r3, #0
    2aea:	dbb4      	blt.n	2a56 <_adc_async_init+0x1a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2aec:	095b      	lsrs	r3, r3, #5
    2aee:	f000 001f 	and.w	r0, r0, #31
    2af2:	2201      	movs	r2, #1
    2af4:	fa02 f000 	lsl.w	r0, r2, r0
    2af8:	3360      	adds	r3, #96	; 0x60
    2afa:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    2afe:	4628      	mov	r0, r5
    2b00:	47b8      	blx	r7
    2b02:	3001      	adds	r0, #1
    2b04:	b280      	uxth	r0, r0
    2b06:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2b08:	2b00      	cmp	r3, #0
    2b0a:	dba4      	blt.n	2a56 <_adc_async_init+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b0c:	095b      	lsrs	r3, r3, #5
    2b0e:	f000 001f 	and.w	r0, r0, #31
    2b12:	2201      	movs	r2, #1
    2b14:	fa02 f000 	lsl.w	r0, r2, r0
    2b18:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    2b1c:	e79b      	b.n	2a56 <_adc_async_init+0x1a>
		_adc0_dev = dev;
    2b1e:	4b05      	ldr	r3, [pc, #20]	; (2b34 <_adc_async_init+0xf8>)
    2b20:	601d      	str	r5, [r3, #0]
    2b22:	e7a4      	b.n	2a6e <_adc_async_init+0x32>
    2b24:	00002891 	.word	0x00002891
    2b28:	000028a9 	.word	0x000028a9
    2b2c:	43001c00 	.word	0x43001c00
    2b30:	43002000 	.word	0x43002000
    2b34:	200002ec 	.word	0x200002ec
    2b38:	00002a27 	.word	0x00002a27
    2b3c:	e000e100 	.word	0xe000e100

00002b40 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    2b40:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    2b42:	88db      	ldrh	r3, [r3, #6]
    2b44:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    2b48:	2b03      	cmp	r3, #3
}
    2b4a:	bf0c      	ite	eq
    2b4c:	2001      	moveq	r0, #1
    2b4e:	2002      	movne	r0, #2
    2b50:	4770      	bx	lr
	...

00002b54 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    2b54:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    2b56:	4b02      	ldr	r3, [pc, #8]	; (2b60 <ADC0_0_Handler+0xc>)
    2b58:	6818      	ldr	r0, [r3, #0]
    2b5a:	4b02      	ldr	r3, [pc, #8]	; (2b64 <ADC0_0_Handler+0x10>)
    2b5c:	4798      	blx	r3
    2b5e:	bd08      	pop	{r3, pc}
    2b60:	200002ec 	.word	0x200002ec
    2b64:	000029d5 	.word	0x000029d5

00002b68 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    2b68:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    2b6a:	4b02      	ldr	r3, [pc, #8]	; (2b74 <ADC0_1_Handler+0xc>)
    2b6c:	6818      	ldr	r0, [r3, #0]
    2b6e:	4b02      	ldr	r3, [pc, #8]	; (2b78 <ADC0_1_Handler+0x10>)
    2b70:	4798      	blx	r3
    2b72:	bd08      	pop	{r3, pc}
    2b74:	200002ec 	.word	0x200002ec
    2b78:	000029d5 	.word	0x000029d5

00002b7c <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    2b7c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    2b7e:	4b02      	ldr	r3, [pc, #8]	; (2b88 <ADC1_0_Handler+0xc>)
    2b80:	6858      	ldr	r0, [r3, #4]
    2b82:	4b02      	ldr	r3, [pc, #8]	; (2b8c <ADC1_0_Handler+0x10>)
    2b84:	4798      	blx	r3
    2b86:	bd08      	pop	{r3, pc}
    2b88:	200002ec 	.word	0x200002ec
    2b8c:	000029d5 	.word	0x000029d5

00002b90 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    2b90:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    2b92:	4b02      	ldr	r3, [pc, #8]	; (2b9c <ADC1_1_Handler+0xc>)
    2b94:	6858      	ldr	r0, [r3, #4]
    2b96:	4b02      	ldr	r3, [pc, #8]	; (2ba0 <ADC1_1_Handler+0x10>)
    2b98:	4798      	blx	r3
    2b9a:	bd08      	pop	{r3, pc}
    2b9c:	200002ec 	.word	0x200002ec
    2ba0:	000029d5 	.word	0x000029d5

00002ba4 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ba4:	0943      	lsrs	r3, r0, #5
    2ba6:	f000 001f 	and.w	r0, r0, #31
    2baa:	2201      	movs	r2, #1
    2bac:	fa02 f000 	lsl.w	r0, r2, r0
    2bb0:	3340      	adds	r3, #64	; 0x40
    2bb2:	4a02      	ldr	r2, [pc, #8]	; (2bbc <_irq_set+0x18>)
    2bb4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2bb8:	4770      	bx	lr
    2bba:	bf00      	nop
    2bbc:	e000e100 	.word	0xe000e100

00002bc0 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2bc0:	4b01      	ldr	r3, [pc, #4]	; (2bc8 <_get_cycles_for_ms+0x8>)
    2bc2:	fb03 f000 	mul.w	r0, r3, r0
    2bc6:	4770      	bx	lr
    2bc8:	0001d4c0 	.word	0x0001d4c0

00002bcc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2bcc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2bce:	4a0e      	ldr	r2, [pc, #56]	; (2c08 <_init_chip+0x3c>)
    2bd0:	8813      	ldrh	r3, [r2, #0]
    2bd2:	b29b      	uxth	r3, r3
    2bd4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    2bd8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    2bda:	4b0c      	ldr	r3, [pc, #48]	; (2c0c <_init_chip+0x40>)
    2bdc:	4798      	blx	r3
	_oscctrl_init_sources();
    2bde:	4b0c      	ldr	r3, [pc, #48]	; (2c10 <_init_chip+0x44>)
    2be0:	4798      	blx	r3
	_mclk_init();
    2be2:	4b0c      	ldr	r3, [pc, #48]	; (2c14 <_init_chip+0x48>)
    2be4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2be6:	2004      	movs	r0, #4
    2be8:	4c0b      	ldr	r4, [pc, #44]	; (2c18 <_init_chip+0x4c>)
    2bea:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    2bec:	4b0b      	ldr	r3, [pc, #44]	; (2c1c <_init_chip+0x50>)
    2bee:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2bf0:	f640 70fb 	movw	r0, #4091	; 0xffb
    2bf4:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2bf6:	4a0a      	ldr	r2, [pc, #40]	; (2c20 <_init_chip+0x54>)
    2bf8:	6913      	ldr	r3, [r2, #16]
    2bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2bfe:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    2c00:	4b08      	ldr	r3, [pc, #32]	; (2c24 <_init_chip+0x58>)
    2c02:	4798      	blx	r3
    2c04:	bd10      	pop	{r4, pc}
    2c06:	bf00      	nop
    2c08:	41004000 	.word	0x41004000
    2c0c:	0000307d 	.word	0x0000307d
    2c10:	00003091 	.word	0x00003091
    2c14:	00002fd1 	.word	0x00002fd1
    2c18:	00002f59 	.word	0x00002f59
    2c1c:	00003095 	.word	0x00003095
    2c20:	40000800 	.word	0x40000800
    2c24:	00002c9d 	.word	0x00002c9d

00002c28 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2c28:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2c2a:	4a1a      	ldr	r2, [pc, #104]	; (2c94 <_dmac_handler+0x6c>)
    2c2c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    2c2e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    2c32:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    2c36:	4818      	ldr	r0, [pc, #96]	; (2c98 <_dmac_handler+0x70>)
    2c38:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2c3c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2c40:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2c44:	f012 0f01 	tst.w	r2, #1
    2c48:	d10a      	bne.n	2c60 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    2c4a:	011a      	lsls	r2, r3, #4
    2c4c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c50:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2c54:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    2c58:	f012 0f02 	tst.w	r2, #2
    2c5c:	d10b      	bne.n	2c76 <_dmac_handler+0x4e>
    2c5e:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2c60:	011a      	lsls	r2, r3, #4
    2c62:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c66:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2c6a:	2101      	movs	r1, #1
    2c6c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2c70:	6843      	ldr	r3, [r0, #4]
    2c72:	4798      	blx	r3
    2c74:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2c76:	011a      	lsls	r2, r3, #4
    2c78:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c7c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2c80:	2102      	movs	r1, #2
    2c82:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2c86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2c8a:	4a03      	ldr	r2, [pc, #12]	; (2c98 <_dmac_handler+0x70>)
    2c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c90:	4798      	blx	r3
	}
}
    2c92:	e7e4      	b.n	2c5e <_dmac_handler+0x36>
    2c94:	4100a000 	.word	0x4100a000
    2c98:	200002f4 	.word	0x200002f4

00002c9c <_dma_init>:
{
    2c9c:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2c9e:	4a32      	ldr	r2, [pc, #200]	; (2d68 <_dma_init+0xcc>)
    2ca0:	8813      	ldrh	r3, [r2, #0]
    2ca2:	f023 0302 	bic.w	r3, r3, #2
    2ca6:	041b      	lsls	r3, r3, #16
    2ca8:	0c1b      	lsrs	r3, r3, #16
    2caa:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2cac:	8853      	ldrh	r3, [r2, #2]
    2cae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    2cb2:	041b      	lsls	r3, r3, #16
    2cb4:	0c1b      	lsrs	r3, r3, #16
    2cb6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2cb8:	8813      	ldrh	r3, [r2, #0]
    2cba:	b29b      	uxth	r3, r3
    2cbc:	f043 0301 	orr.w	r3, r3, #1
    2cc0:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2cc2:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2cc4:	f013 0f01 	tst.w	r3, #1
    2cc8:	d1fb      	bne.n	2cc2 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    2cca:	4b27      	ldr	r3, [pc, #156]	; (2d68 <_dma_init+0xcc>)
    2ccc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2cd0:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2cd2:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    2cd8:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2cdc:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2cde:	2100      	movs	r1, #0
    2ce0:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2ce2:	4a22      	ldr	r2, [pc, #136]	; (2d6c <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    2ce4:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2ce6:	4a22      	ldr	r2, [pc, #136]	; (2d70 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    2ce8:	639a      	str	r2, [r3, #56]	; 0x38
    2cea:	4b22      	ldr	r3, [pc, #136]	; (2d74 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2cec:	4c1f      	ldr	r4, [pc, #124]	; (2d6c <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    2cee:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    2cf0:	681d      	ldr	r5, [r3, #0]
    2cf2:	0108      	lsls	r0, r1, #4
    2cf4:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    2cf8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2cfc:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    2cfe:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2d00:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2d04:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2d06:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2d0a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2d0c:	1822      	adds	r2, r4, r0
    2d0e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    2d10:	60d6      	str	r6, [r2, #12]
    2d12:	3101      	adds	r1, #1
    2d14:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2d16:	2920      	cmp	r1, #32
    2d18:	d1ea      	bne.n	2cf0 <_dma_init+0x54>
    2d1a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d1c:	2001      	movs	r0, #1
    2d1e:	4916      	ldr	r1, [pc, #88]	; (2d78 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    2d20:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2d22:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2d26:	d00b      	beq.n	2d40 <_dma_init+0xa4>
    2d28:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    2d2a:	2b24      	cmp	r3, #36	; 0x24
    2d2c:	d1f8      	bne.n	2d20 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2d2e:	4a0e      	ldr	r2, [pc, #56]	; (2d68 <_dma_init+0xcc>)
    2d30:	8813      	ldrh	r3, [r2, #0]
    2d32:	b29b      	uxth	r3, r3
    2d34:	f043 0302 	orr.w	r3, r3, #2
    2d38:	8013      	strh	r3, [r2, #0]
}
    2d3a:	2000      	movs	r0, #0
    2d3c:	bc70      	pop	{r4, r5, r6}
    2d3e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d40:	095c      	lsrs	r4, r3, #5
    2d42:	f002 021f 	and.w	r2, r2, #31
    2d46:	fa00 f202 	lsl.w	r2, r0, r2
    2d4a:	f104 0520 	add.w	r5, r4, #32
    2d4e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2d52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d56:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d5a:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2d5e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d62:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    2d66:	e7df      	b.n	2d28 <_dma_init+0x8c>
    2d68:	4100a000 	.word	0x4100a000
    2d6c:	200030e0 	.word	0x200030e0
    2d70:	200032e0 	.word	0x200032e0
    2d74:	00007b04 	.word	0x00007b04
    2d78:	e000e100 	.word	0xe000e100

00002d7c <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    2d7c:	b991      	cbnz	r1, 2da4 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    2d7e:	b942      	cbnz	r2, 2d92 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    2d80:	0100      	lsls	r0, r0, #4
    2d82:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2d86:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2d8a:	2302      	movs	r3, #2
    2d8c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    2d90:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    2d92:	0100      	lsls	r0, r0, #4
    2d94:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2d98:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2d9c:	2302      	movs	r3, #2
    2d9e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    2da2:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    2da4:	2901      	cmp	r1, #1
    2da6:	d000      	beq.n	2daa <_dma_set_irq_state+0x2e>
    2da8:	4770      	bx	lr
	if (value == 0x0) {
    2daa:	b142      	cbz	r2, 2dbe <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    2dac:	0100      	lsls	r0, r0, #4
    2dae:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2db2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2db6:	2301      	movs	r3, #1
    2db8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    2dbc:	e7f4      	b.n	2da8 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    2dbe:	0100      	lsls	r0, r0, #4
    2dc0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2dc4:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2dc8:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    2dcc:	4770      	bx	lr
	...

00002dd0 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2dd0:	4b02      	ldr	r3, [pc, #8]	; (2ddc <_dma_set_destination_address+0xc>)
    2dd2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2dd6:	6081      	str	r1, [r0, #8]
}
    2dd8:	2000      	movs	r0, #0
    2dda:	4770      	bx	lr
    2ddc:	200030e0 	.word	0x200030e0

00002de0 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2de0:	4b02      	ldr	r3, [pc, #8]	; (2dec <_dma_set_source_address+0xc>)
    2de2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2de6:	6041      	str	r1, [r0, #4]
}
    2de8:	2000      	movs	r0, #0
    2dea:	4770      	bx	lr
    2dec:	200030e0 	.word	0x200030e0

00002df0 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2df0:	4a05      	ldr	r2, [pc, #20]	; (2e08 <_dma_srcinc_enable+0x18>)
    2df2:	0100      	lsls	r0, r0, #4
    2df4:	5a13      	ldrh	r3, [r2, r0]
    2df6:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    2df8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    2dfc:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    2e00:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    2e02:	5211      	strh	r1, [r2, r0]
}
    2e04:	2000      	movs	r0, #0
    2e06:	4770      	bx	lr
    2e08:	200030e0 	.word	0x200030e0

00002e0c <_dma_set_data_amount>:
{
    2e0c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    2e0e:	4c14      	ldr	r4, [pc, #80]	; (2e60 <_dma_set_data_amount+0x54>)
    2e10:	0102      	lsls	r2, r0, #4
    2e12:	18a3      	adds	r3, r4, r2
    2e14:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2e16:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    2e18:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2e1c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    2e1e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    2e22:	d006      	beq.n	2e32 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2e24:	fa01 f403 	lsl.w	r4, r1, r3
    2e28:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2e2a:	4a0d      	ldr	r2, [pc, #52]	; (2e60 <_dma_set_data_amount+0x54>)
    2e2c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2e30:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2e32:	4c0b      	ldr	r4, [pc, #44]	; (2e60 <_dma_set_data_amount+0x54>)
    2e34:	0102      	lsls	r2, r0, #4
    2e36:	18a5      	adds	r5, r4, r2
    2e38:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2e3a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    2e3c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2e40:	d005      	beq.n	2e4e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2e42:	fa01 f303 	lsl.w	r3, r1, r3
    2e46:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2e48:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    2e4c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2e4e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2e50:	4b03      	ldr	r3, [pc, #12]	; (2e60 <_dma_set_data_amount+0x54>)
    2e52:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2e56:	8041      	strh	r1, [r0, #2]
}
    2e58:	2000      	movs	r0, #0
    2e5a:	bc30      	pop	{r4, r5}
    2e5c:	4770      	bx	lr
    2e5e:	bf00      	nop
    2e60:	200030e0 	.word	0x200030e0

00002e64 <_dma_enable_transaction>:
{
    2e64:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2e66:	4c0d      	ldr	r4, [pc, #52]	; (2e9c <_dma_enable_transaction+0x38>)
    2e68:	0103      	lsls	r3, r0, #4
    2e6a:	5ae2      	ldrh	r2, [r4, r3]
    2e6c:	b292      	uxth	r2, r2
    2e6e:	f042 0201 	orr.w	r2, r2, #1
    2e72:	52e2      	strh	r2, [r4, r3]
    2e74:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e78:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2e7e:	f042 0202 	orr.w	r2, r2, #2
    2e82:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2e84:	b131      	cbz	r1, 2e94 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2e86:	4a06      	ldr	r2, [pc, #24]	; (2ea0 <_dma_enable_transaction+0x3c>)
    2e88:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2e8a:	2301      	movs	r3, #1
    2e8c:	fa03 f000 	lsl.w	r0, r3, r0
    2e90:	4308      	orrs	r0, r1
    2e92:	6110      	str	r0, [r2, #16]
}
    2e94:	2000      	movs	r0, #0
    2e96:	f85d 4b04 	ldr.w	r4, [sp], #4
    2e9a:	4770      	bx	lr
    2e9c:	200030e0 	.word	0x200030e0
    2ea0:	4100a000 	.word	0x4100a000

00002ea4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    2ea4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2ea8:	4b02      	ldr	r3, [pc, #8]	; (2eb4 <_dma_get_channel_resource+0x10>)
    2eaa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2eae:	6001      	str	r1, [r0, #0]
}
    2eb0:	2000      	movs	r0, #0
    2eb2:	4770      	bx	lr
    2eb4:	200002f4 	.word	0x200002f4

00002eb8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    2eb8:	b508      	push	{r3, lr}
	_dmac_handler();
    2eba:	4b01      	ldr	r3, [pc, #4]	; (2ec0 <DMAC_0_Handler+0x8>)
    2ebc:	4798      	blx	r3
    2ebe:	bd08      	pop	{r3, pc}
    2ec0:	00002c29 	.word	0x00002c29

00002ec4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    2ec4:	b508      	push	{r3, lr}
	_dmac_handler();
    2ec6:	4b01      	ldr	r3, [pc, #4]	; (2ecc <DMAC_1_Handler+0x8>)
    2ec8:	4798      	blx	r3
    2eca:	bd08      	pop	{r3, pc}
    2ecc:	00002c29 	.word	0x00002c29

00002ed0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    2ed0:	b508      	push	{r3, lr}
	_dmac_handler();
    2ed2:	4b01      	ldr	r3, [pc, #4]	; (2ed8 <DMAC_2_Handler+0x8>)
    2ed4:	4798      	blx	r3
    2ed6:	bd08      	pop	{r3, pc}
    2ed8:	00002c29 	.word	0x00002c29

00002edc <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    2edc:	b508      	push	{r3, lr}
	_dmac_handler();
    2ede:	4b01      	ldr	r3, [pc, #4]	; (2ee4 <DMAC_3_Handler+0x8>)
    2ee0:	4798      	blx	r3
    2ee2:	bd08      	pop	{r3, pc}
    2ee4:	00002c29 	.word	0x00002c29

00002ee8 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2ee8:	b508      	push	{r3, lr}
	_dmac_handler();
    2eea:	4b01      	ldr	r3, [pc, #4]	; (2ef0 <DMAC_4_Handler+0x8>)
    2eec:	4798      	blx	r3
    2eee:	bd08      	pop	{r3, pc}
    2ef0:	00002c29 	.word	0x00002c29

00002ef4 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2ef4:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2ef6:	2000      	movs	r0, #0
    2ef8:	4770      	bx	lr
	...

00002efc <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2efc:	b430      	push	{r4, r5}
    2efe:	4814      	ldr	r0, [pc, #80]	; (2f50 <_event_system_init+0x54>)
    2f00:	f100 0543 	add.w	r5, r0, #67	; 0x43
    2f04:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2f06:	4c13      	ldr	r4, [pc, #76]	; (2f54 <_event_system_init+0x58>)
    2f08:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2f0a:	f813 1b01 	ldrb.w	r1, [r3], #1
    2f0e:	3248      	adds	r2, #72	; 0x48
    2f10:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    2f14:	42ab      	cmp	r3, r5
    2f16:	d1f7      	bne.n	2f08 <_event_system_init+0xc>
    2f18:	480d      	ldr	r0, [pc, #52]	; (2f50 <_event_system_init+0x54>)
    2f1a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    2f1e:	3080      	adds	r0, #128	; 0x80
    2f20:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2f22:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2f26:	00ca      	lsls	r2, r1, #3
    2f28:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2f2c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    2f30:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    2f32:	f850 3f04 	ldr.w	r3, [r0, #4]!
    2f36:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2f38:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    2f3c:	43db      	mvns	r3, r3
    2f3e:	b2db      	uxtb	r3, r3
    2f40:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    2f44:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2f46:	2920      	cmp	r1, #32
    2f48:	d1eb      	bne.n	2f22 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    2f4a:	2000      	movs	r0, #0
    2f4c:	bc30      	pop	{r4, r5}
    2f4e:	4770      	bx	lr
    2f50:	00007c04 	.word	0x00007c04
    2f54:	4100e000 	.word	0x4100e000

00002f58 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2f58:	f010 0f01 	tst.w	r0, #1
    2f5c:	d008      	beq.n	2f70 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2f5e:	4a17      	ldr	r2, [pc, #92]	; (2fbc <_gclk_init_generators_by_fref+0x64>)
    2f60:	4b17      	ldr	r3, [pc, #92]	; (2fc0 <_gclk_init_generators_by_fref+0x68>)
    2f62:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2f64:	4619      	mov	r1, r3
    2f66:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2f6a:	684b      	ldr	r3, [r1, #4]
    2f6c:	4213      	tst	r3, r2
    2f6e:	d1fc      	bne.n	2f6a <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2f70:	f010 0f02 	tst.w	r0, #2
    2f74:	d008      	beq.n	2f88 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2f76:	4a13      	ldr	r2, [pc, #76]	; (2fc4 <_gclk_init_generators_by_fref+0x6c>)
    2f78:	4b11      	ldr	r3, [pc, #68]	; (2fc0 <_gclk_init_generators_by_fref+0x68>)
    2f7a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2f7c:	4619      	mov	r1, r3
    2f7e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2f82:	684b      	ldr	r3, [r1, #4]
    2f84:	4213      	tst	r3, r2
    2f86:	d1fc      	bne.n	2f82 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2f88:	f010 0f04 	tst.w	r0, #4
    2f8c:	d008      	beq.n	2fa0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2f8e:	4a0e      	ldr	r2, [pc, #56]	; (2fc8 <_gclk_init_generators_by_fref+0x70>)
    2f90:	4b0b      	ldr	r3, [pc, #44]	; (2fc0 <_gclk_init_generators_by_fref+0x68>)
    2f92:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2f94:	4619      	mov	r1, r3
    2f96:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2f9a:	684b      	ldr	r3, [r1, #4]
    2f9c:	4213      	tst	r3, r2
    2f9e:	d1fc      	bne.n	2f9a <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2fa0:	f010 0f08 	tst.w	r0, #8
    2fa4:	d008      	beq.n	2fb8 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2fa6:	4a09      	ldr	r2, [pc, #36]	; (2fcc <_gclk_init_generators_by_fref+0x74>)
    2fa8:	4b05      	ldr	r3, [pc, #20]	; (2fc0 <_gclk_init_generators_by_fref+0x68>)
    2faa:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2fac:	4619      	mov	r1, r3
    2fae:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2fb2:	684b      	ldr	r3, [r1, #4]
    2fb4:	4213      	tst	r3, r2
    2fb6:	d1fc      	bne.n	2fb2 <_gclk_init_generators_by_fref+0x5a>
    2fb8:	4770      	bx	lr
    2fba:	bf00      	nop
    2fbc:	00010108 	.word	0x00010108
    2fc0:	40001c00 	.word	0x40001c00
    2fc4:	00010106 	.word	0x00010106
    2fc8:	00100106 	.word	0x00100106
    2fcc:	00010104 	.word	0x00010104

00002fd0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2fd0:	2201      	movs	r2, #1
    2fd2:	4b01      	ldr	r3, [pc, #4]	; (2fd8 <_mclk_init+0x8>)
    2fd4:	715a      	strb	r2, [r3, #5]
    2fd6:	4770      	bx	lr
    2fd8:	40000800 	.word	0x40000800

00002fdc <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2fdc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2fde:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2fe0:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2fe2:	f012 0f01 	tst.w	r2, #1
    2fe6:	d005      	beq.n	2ff4 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2fe8:	2201      	movs	r2, #1
    2fea:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2fec:	6803      	ldr	r3, [r0, #0]
    2fee:	b153      	cbz	r3, 3006 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    2ff0:	4798      	blx	r3
    2ff2:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2ff4:	8a1a      	ldrh	r2, [r3, #16]
    2ff6:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2ff8:	b12a      	cbz	r2, 3006 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2ffa:	f240 225e 	movw	r2, #606	; 0x25e
    2ffe:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    3000:	6843      	ldr	r3, [r0, #4]
    3002:	b103      	cbz	r3, 3006 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    3004:	4798      	blx	r3
    3006:	bd08      	pop	{r3, pc}

00003008 <_flash_init>:
	device->hw = hw;
    3008:	6101      	str	r1, [r0, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    300a:	880b      	ldrh	r3, [r1, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    300c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    3010:	049b      	lsls	r3, r3, #18
    3012:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    3014:	800b      	strh	r3, [r1, #0]
	_nvm_dev = device;
    3016:	4b0d      	ldr	r3, [pc, #52]	; (304c <_flash_init+0x44>)
    3018:	6018      	str	r0, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    301a:	4b0d      	ldr	r3, [pc, #52]	; (3050 <_flash_init+0x48>)
    301c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3020:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3024:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3028:	f3bf 8f6f 	isb	sy
    302c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3034:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3038:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    303c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3040:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3044:	6019      	str	r1, [r3, #0]
    3046:	601a      	str	r2, [r3, #0]
}
    3048:	2000      	movs	r0, #0
    304a:	4770      	bx	lr
    304c:	20000474 	.word	0x20000474
    3050:	e000e100 	.word	0xe000e100

00003054 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    3054:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    3056:	4b02      	ldr	r3, [pc, #8]	; (3060 <NVMCTRL_0_Handler+0xc>)
    3058:	6818      	ldr	r0, [r3, #0]
    305a:	4b02      	ldr	r3, [pc, #8]	; (3064 <NVMCTRL_0_Handler+0x10>)
    305c:	4798      	blx	r3
    305e:	bd08      	pop	{r3, pc}
    3060:	20000474 	.word	0x20000474
    3064:	00002fdd 	.word	0x00002fdd

00003068 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    3068:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    306a:	4b02      	ldr	r3, [pc, #8]	; (3074 <NVMCTRL_1_Handler+0xc>)
    306c:	6818      	ldr	r0, [r3, #0]
    306e:	4b02      	ldr	r3, [pc, #8]	; (3078 <NVMCTRL_1_Handler+0x10>)
    3070:	4798      	blx	r3
    3072:	bd08      	pop	{r3, pc}
    3074:	20000474 	.word	0x20000474
    3078:	00002fdd 	.word	0x00002fdd

0000307c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    307c:	4b03      	ldr	r3, [pc, #12]	; (308c <_osc32kctrl_init_sources+0x10>)
    307e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    3080:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    3084:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    3086:	2201      	movs	r2, #1
    3088:	741a      	strb	r2, [r3, #16]
    308a:	4770      	bx	lr
    308c:	40001400 	.word	0x40001400

00003090 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    3090:	4770      	bx	lr
	...

00003094 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3094:	4a47      	ldr	r2, [pc, #284]	; (31b4 <_oscctrl_init_referenced_generators+0x120>)
    3096:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3098:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    309c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    30a0:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    30a2:	4611      	mov	r1, r2
    30a4:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    30a8:	684b      	ldr	r3, [r1, #4]
    30aa:	4213      	tst	r3, r2
    30ac:	d1fc      	bne.n	30a8 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    30ae:	4a41      	ldr	r2, [pc, #260]	; (31b4 <_oscctrl_init_referenced_generators+0x120>)
    30b0:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    30b2:	f013 0f04 	tst.w	r3, #4
    30b6:	d1fb      	bne.n	30b0 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    30b8:	4b3f      	ldr	r3, [pc, #252]	; (31b8 <_oscctrl_init_referenced_generators+0x124>)
    30ba:	2200      	movs	r2, #0
    30bc:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    30be:	4a3f      	ldr	r2, [pc, #252]	; (31bc <_oscctrl_init_referenced_generators+0x128>)
    30c0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    30c2:	461a      	mov	r2, r3
    30c4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    30c8:	f013 0f10 	tst.w	r3, #16
    30cc:	d1fa      	bne.n	30c4 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    30ce:	2200      	movs	r2, #0
    30d0:	4b39      	ldr	r3, [pc, #228]	; (31b8 <_oscctrl_init_referenced_generators+0x124>)
    30d2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    30d6:	461a      	mov	r2, r3
    30d8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    30dc:	f013 0f04 	tst.w	r3, #4
    30e0:	d1fa      	bne.n	30d8 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    30e2:	2202      	movs	r2, #2
    30e4:	4b34      	ldr	r3, [pc, #208]	; (31b8 <_oscctrl_init_referenced_generators+0x124>)
    30e6:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    30e8:	461a      	mov	r2, r3
    30ea:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    30ee:	f013 0f02 	tst.w	r3, #2
    30f2:	d1fa      	bne.n	30ea <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    30f4:	4b30      	ldr	r3, [pc, #192]	; (31b8 <_oscctrl_init_referenced_generators+0x124>)
    30f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    30f8:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    30fa:	461a      	mov	r2, r3
    30fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    3100:	f013 0f08 	tst.w	r3, #8
    3104:	d1fa      	bne.n	30fc <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3106:	2288      	movs	r2, #136	; 0x88
    3108:	4b2b      	ldr	r3, [pc, #172]	; (31b8 <_oscctrl_init_referenced_generators+0x124>)
    310a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    310e:	461a      	mov	r2, r3
    3110:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3114:	f013 0f04 	tst.w	r3, #4
    3118:	d1fa      	bne.n	3110 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    311a:	2242      	movs	r2, #66	; 0x42
    311c:	4b25      	ldr	r3, [pc, #148]	; (31b4 <_oscctrl_init_referenced_generators+0x120>)
    311e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    3122:	2227      	movs	r2, #39	; 0x27
    3124:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    3128:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    312a:	461a      	mov	r2, r3
    312c:	6d13      	ldr	r3, [r2, #80]	; 0x50
    312e:	f013 0f06 	tst.w	r3, #6
    3132:	d1fb      	bne.n	312c <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    3134:	4b20      	ldr	r3, [pc, #128]	; (31b8 <_oscctrl_init_referenced_generators+0x124>)
    3136:	f44f 6200 	mov.w	r2, #2048	; 0x800
    313a:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    313c:	2202      	movs	r2, #2
    313e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    3142:	461a      	mov	r2, r3
    3144:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3146:	f013 0f02 	tst.w	r3, #2
    314a:	d1fb      	bne.n	3144 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    314c:	4b1a      	ldr	r3, [pc, #104]	; (31b8 <_oscctrl_init_referenced_generators+0x124>)
    314e:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    3152:	f013 0f01 	tst.w	r3, #1
    3156:	d026      	beq.n	31a6 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3158:	4a17      	ldr	r2, [pc, #92]	; (31b8 <_oscctrl_init_referenced_generators+0x124>)
    315a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    315c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    3160:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3164:	d1f9      	bne.n	315a <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    3166:	4b14      	ldr	r3, [pc, #80]	; (31b8 <_oscctrl_init_referenced_generators+0x124>)
    3168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    316a:	f012 0f01 	tst.w	r2, #1
    316e:	d103      	bne.n	3178 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    3170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    3172:	f012 0f02 	tst.w	r2, #2
    3176:	d0f7      	beq.n	3168 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    3178:	4a0e      	ldr	r2, [pc, #56]	; (31b4 <_oscctrl_init_referenced_generators+0x120>)
    317a:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    317c:	2b00      	cmp	r3, #0
    317e:	d1fc      	bne.n	317a <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3180:	4a0c      	ldr	r2, [pc, #48]	; (31b4 <_oscctrl_init_referenced_generators+0x120>)
    3182:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3184:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3188:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    318c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    318e:	4611      	mov	r1, r2
    3190:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3194:	684b      	ldr	r3, [r1, #4]
    3196:	4213      	tst	r3, r2
    3198:	d1fc      	bne.n	3194 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    319a:	4a06      	ldr	r2, [pc, #24]	; (31b4 <_oscctrl_init_referenced_generators+0x120>)
    319c:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    319e:	f013 0f04 	tst.w	r3, #4
    31a2:	d1fb      	bne.n	319c <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    31a4:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    31a6:	4a04      	ldr	r2, [pc, #16]	; (31b8 <_oscctrl_init_referenced_generators+0x124>)
    31a8:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    31aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    31ae:	d0fb      	beq.n	31a8 <_oscctrl_init_referenced_generators+0x114>
    31b0:	e7d9      	b.n	3166 <_oscctrl_init_referenced_generators+0xd2>
    31b2:	bf00      	nop
    31b4:	40001c00 	.word	0x40001c00
    31b8:	40001000 	.word	0x40001000
    31bc:	04010000 	.word	0x04010000

000031c0 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    31c0:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    31c2:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    31c4:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    31c6:	4903      	ldr	r1, [pc, #12]	; (31d4 <_qspi_dma_rx_complete+0x14>)
    31c8:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    31ca:	685b      	ldr	r3, [r3, #4]
    31cc:	b103      	cbz	r3, 31d0 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    31ce:	4798      	blx	r3
    31d0:	bd08      	pop	{r3, pc}
    31d2:	bf00      	nop
    31d4:	01000002 	.word	0x01000002

000031d8 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    31d8:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    31da:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    31dc:	681a      	ldr	r2, [r3, #0]
    31de:	4903      	ldr	r1, [pc, #12]	; (31ec <_qspi_dma_tx_complete+0x14>)
    31e0:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    31e2:	685b      	ldr	r3, [r3, #4]
    31e4:	b103      	cbz	r3, 31e8 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    31e6:	4798      	blx	r3
    31e8:	bd08      	pop	{r3, pc}
    31ea:	bf00      	nop
    31ec:	01000002 	.word	0x01000002

000031f0 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    31f0:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    31f2:	6883      	ldr	r3, [r0, #8]
    31f4:	689b      	ldr	r3, [r3, #8]
    31f6:	b103      	cbz	r3, 31fa <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    31f8:	4798      	blx	r3
    31fa:	bd08      	pop	{r3, pc}

000031fc <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    31fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31fe:	4604      	mov	r4, r0
	ASSERT(dev && hw);
	dev->prvt = hw;
    3200:	4605      	mov	r5, r0
    3202:	f845 1b0c 	str.w	r1, [r5], #12
    3206:	2301      	movs	r3, #1
    3208:	600b      	str	r3, [r1, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    320a:	4b0e      	ldr	r3, [pc, #56]	; (3244 <_qspi_dma_init+0x48>)
    320c:	604b      	str	r3, [r1, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    320e:	4b0e      	ldr	r3, [pc, #56]	; (3248 <_qspi_dma_init+0x4c>)
    3210:	608b      	str	r3, [r1, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    3212:	211f      	movs	r1, #31
    3214:	4628      	mov	r0, r5
    3216:	4f0d      	ldr	r7, [pc, #52]	; (324c <_qspi_dma_init+0x50>)
    3218:	47b8      	blx	r7
	dev->resource->back                 = dev;
    321a:	68e3      	ldr	r3, [r4, #12]
    321c:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    321e:	68e3      	ldr	r3, [r4, #12]
    3220:	4a0b      	ldr	r2, [pc, #44]	; (3250 <_qspi_dma_init+0x54>)
    3222:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    3224:	68e3      	ldr	r3, [r4, #12]
    3226:	4e0b      	ldr	r6, [pc, #44]	; (3254 <_qspi_dma_init+0x58>)
    3228:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    322a:	211e      	movs	r1, #30
    322c:	4628      	mov	r0, r5
    322e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    3230:	68e3      	ldr	r3, [r4, #12]
    3232:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    3234:	68e3      	ldr	r3, [r4, #12]
    3236:	4a08      	ldr	r2, [pc, #32]	; (3258 <_qspi_dma_init+0x5c>)
    3238:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    323a:	68e3      	ldr	r3, [r4, #12]
    323c:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
}
    323e:	2000      	movs	r0, #0
    3240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3242:	bf00      	nop
    3244:	06000011 	.word	0x06000011
    3248:	00243b00 	.word	0x00243b00
    324c:	00002ea5 	.word	0x00002ea5
    3250:	000031c1 	.word	0x000031c1
    3254:	000031f1 	.word	0x000031f1
    3258:	000031d9 	.word	0x000031d9

0000325c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    325c:	b500      	push	{lr}
    325e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    3260:	4b0d      	ldr	r3, [pc, #52]	; (3298 <RAMECC_Handler+0x3c>)
    3262:	789b      	ldrb	r3, [r3, #2]
    3264:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    3266:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    3268:	9b01      	ldr	r3, [sp, #4]
    326a:	f013 0f02 	tst.w	r3, #2
    326e:	d006      	beq.n	327e <RAMECC_Handler+0x22>
    3270:	4b0a      	ldr	r3, [pc, #40]	; (329c <RAMECC_Handler+0x40>)
    3272:	681b      	ldr	r3, [r3, #0]
    3274:	b11b      	cbz	r3, 327e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    3276:	4a08      	ldr	r2, [pc, #32]	; (3298 <RAMECC_Handler+0x3c>)
    3278:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    327a:	4798      	blx	r3
    327c:	e009      	b.n	3292 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    327e:	9b01      	ldr	r3, [sp, #4]
    3280:	f013 0f01 	tst.w	r3, #1
    3284:	d005      	beq.n	3292 <RAMECC_Handler+0x36>
    3286:	4b05      	ldr	r3, [pc, #20]	; (329c <RAMECC_Handler+0x40>)
    3288:	685b      	ldr	r3, [r3, #4]
    328a:	b113      	cbz	r3, 3292 <RAMECC_Handler+0x36>
    328c:	4a02      	ldr	r2, [pc, #8]	; (3298 <RAMECC_Handler+0x3c>)
    328e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3290:	4798      	blx	r3
	} else {
		return;
	}
}
    3292:	b003      	add	sp, #12
    3294:	f85d fb04 	ldr.w	pc, [sp], #4
    3298:	41020000 	.word	0x41020000
    329c:	200034e0 	.word	0x200034e0

000032a0 <_rtc_timer_init>:
 */
int32_t _rtc_timer_init(struct _timer_device *const dev, void *const hw)
{
	ASSERT(dev);

	dev->hw = hw;
    32a0:	60c1      	str	r1, [r0, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    32a2:	2301      	movs	r3, #1
    32a4:	800b      	strh	r3, [r1, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    32a6:	f248 0203 	movw	r2, #32771	; 0x8003
    32aa:	690b      	ldr	r3, [r1, #16]
    32ac:	4213      	tst	r3, r2
    32ae:	d1fc      	bne.n	32aa <_rtc_timer_init+0xa>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    32b0:	68c3      	ldr	r3, [r0, #12]
    32b2:	691a      	ldr	r2, [r3, #16]
    32b4:	f012 0f01 	tst.w	r2, #1
    32b8:	d1fb      	bne.n	32b2 <_rtc_timer_init+0x12>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    32ba:	f248 0280 	movw	r2, #32896	; 0x8080
    32be:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    32c0:	f248 0103 	movw	r1, #32771	; 0x8003
    32c4:	691a      	ldr	r2, [r3, #16]
    32c6:	420a      	tst	r2, r1
    32c8:	d1fc      	bne.n	32c4 <_rtc_timer_init+0x24>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    32ca:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    32cc:	2301      	movs	r3, #1
    32ce:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    32d0:	6913      	ldr	r3, [r2, #16]
    32d2:	f013 0f60 	tst.w	r3, #96	; 0x60
    32d6:	d1fb      	bne.n	32d0 <_rtc_timer_init+0x30>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    32d8:	68c3      	ldr	r3, [r0, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    32da:	f44f 7280 	mov.w	r2, #256	; 0x100
    32de:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    32e0:	4b01      	ldr	r3, [pc, #4]	; (32e8 <_rtc_timer_init+0x48>)
    32e2:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    32e4:	2000      	movs	r0, #0
    32e6:	4770      	bx	lr
    32e8:	20000478 	.word	0x20000478

000032ec <_rtc_timer_deinit>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    32ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    32f0:	4b07      	ldr	r3, [pc, #28]	; (3310 <_rtc_timer_deinit+0x24>)
    32f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    32f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32fa:	f3bf 8f6f 	isb	sy
{
	ASSERT(dev && dev->hw);

	NVIC_DisableIRQ(RTC_IRQn);

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    32fe:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    3300:	2301      	movs	r3, #1
    3302:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3304:	f248 0103 	movw	r1, #32771	; 0x8003
    3308:	6913      	ldr	r3, [r2, #16]
    330a:	420b      	tst	r3, r1
    330c:	d1fc      	bne.n	3308 <_rtc_timer_deinit+0x1c>
}
    330e:	4770      	bx	lr
    3310:	e000e100 	.word	0xe000e100

00003314 <_rtc_timer_start>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3314:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3318:	4b0c      	ldr	r3, [pc, #48]	; (334c <_rtc_timer_start+0x38>)
    331a:	601a      	str	r2, [r3, #0]
void _rtc_timer_start(struct _timer_device *const dev)
{
	ASSERT(dev && dev->hw);

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    331c:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    331e:	2300      	movs	r3, #0
    3320:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3322:	6913      	ldr	r3, [r2, #16]
    3324:	f013 0f08 	tst.w	r3, #8
    3328:	d1fb      	bne.n	3322 <_rtc_timer_start+0xe>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    332a:	68c3      	ldr	r3, [r0, #12]
    332c:	691a      	ldr	r2, [r3, #16]
    332e:	f012 0f08 	tst.w	r2, #8
    3332:	d1fb      	bne.n	332c <_rtc_timer_start+0x18>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    3334:	881a      	ldrh	r2, [r3, #0]
    3336:	b292      	uxth	r2, r2
    3338:	f042 0202 	orr.w	r2, r2, #2
    333c:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    333e:	f248 0103 	movw	r1, #32771	; 0x8003
    3342:	691a      	ldr	r2, [r3, #16]
    3344:	420a      	tst	r2, r1
    3346:	d1fc      	bne.n	3342 <_rtc_timer_start+0x2e>
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
}
    3348:	4770      	bx	lr
    334a:	bf00      	nop
    334c:	e000e100 	.word	0xe000e100

00003350 <_rtc_timer_stop>:
 */
void _rtc_timer_stop(struct _timer_device *const dev)
{
	ASSERT(dev && dev->hw);

	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    3350:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    3352:	8813      	ldrh	r3, [r2, #0]
    3354:	f023 0302 	bic.w	r3, r3, #2
    3358:	041b      	lsls	r3, r3, #16
    335a:	0c1b      	lsrs	r3, r3, #16
    335c:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    335e:	f248 0103 	movw	r1, #32771	; 0x8003
    3362:	6913      	ldr	r3, [r2, #16]
    3364:	420b      	tst	r3, r1
    3366:	d1fc      	bne.n	3362 <_rtc_timer_stop+0x12>
}
    3368:	4770      	bx	lr

0000336a <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    336a:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    336c:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    336e:	6913      	ldr	r3, [r2, #16]
    3370:	f013 0f60 	tst.w	r3, #96	; 0x60
    3374:	d1fb      	bne.n	336e <_rtc_timer_set_period+0x4>
}
    3376:	4770      	bx	lr

00003378 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    3378:	68c2      	ldr	r2, [r0, #12]
    337a:	6913      	ldr	r3, [r2, #16]
    337c:	f013 0f60 	tst.w	r3, #96	; 0x60
    3380:	d1fb      	bne.n	337a <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    3382:	6a10      	ldr	r0, [r2, #32]
}
    3384:	4770      	bx	lr

00003386 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    3386:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3388:	f248 0103 	movw	r1, #32771	; 0x8003
    338c:	6913      	ldr	r3, [r2, #16]
    338e:	420b      	tst	r3, r1
    3390:	d1fc      	bne.n	338c <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    3392:	8810      	ldrh	r0, [r2, #0]
}
    3394:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3398:	4770      	bx	lr

0000339a <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    339a:	4770      	bx	lr

0000339c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    339c:	4800      	ldr	r0, [pc, #0]	; (33a0 <_rtc_get_timer+0x4>)
    339e:	4770      	bx	lr
    33a0:	20000000 	.word	0x20000000

000033a4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    33a4:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    33a6:	4b08      	ldr	r3, [pc, #32]	; (33c8 <RTC_Handler+0x24>)
    33a8:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    33aa:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    33ac:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    33ae:	f413 7f80 	tst.w	r3, #256	; 0x100
    33b2:	d007      	beq.n	33c4 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    33b4:	6823      	ldr	r3, [r4, #0]
    33b6:	b10b      	cbz	r3, 33bc <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    33b8:	4620      	mov	r0, r4
    33ba:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    33bc:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    33be:	f44f 7280 	mov.w	r2, #256	; 0x100
    33c2:	819a      	strh	r2, [r3, #12]
    33c4:	bd10      	pop	{r4, pc}
    33c6:	bf00      	nop
    33c8:	20000478 	.word	0x20000478

000033cc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    33cc:	b470      	push	{r4, r5, r6}
    33ce:	b089      	sub	sp, #36	; 0x24
    33d0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    33d2:	466c      	mov	r4, sp
    33d4:	4d0d      	ldr	r5, [pc, #52]	; (340c <_sercom_get_hardware_index+0x40>)
    33d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    33d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    33da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    33de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    33e2:	9b00      	ldr	r3, [sp, #0]
    33e4:	42b3      	cmp	r3, r6
    33e6:	d00d      	beq.n	3404 <_sercom_get_hardware_index+0x38>
    33e8:	4631      	mov	r1, r6
    33ea:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    33ec:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    33ee:	f853 2b04 	ldr.w	r2, [r3], #4
    33f2:	428a      	cmp	r2, r1
    33f4:	d007      	beq.n	3406 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    33f6:	3001      	adds	r0, #1
    33f8:	2808      	cmp	r0, #8
    33fa:	d1f8      	bne.n	33ee <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    33fc:	2000      	movs	r0, #0
}
    33fe:	b009      	add	sp, #36	; 0x24
    3400:	bc70      	pop	{r4, r5, r6}
    3402:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3404:	2000      	movs	r0, #0
			return i;
    3406:	b2c0      	uxtb	r0, r0
    3408:	e7f9      	b.n	33fe <_sercom_get_hardware_index+0x32>
    340a:	bf00      	nop
    340c:	00007d08 	.word	0x00007d08

00003410 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    3410:	b510      	push	{r4, lr}
	void *hw = device->hw;
    3412:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3414:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    3416:	f013 0f01 	tst.w	r3, #1
    341a:	d003      	beq.n	3424 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    341c:	7da3      	ldrb	r3, [r4, #22]
    341e:	f013 0f01 	tst.w	r3, #1
    3422:	d112      	bne.n	344a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3424:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    3426:	f013 0f02 	tst.w	r3, #2
    342a:	d003      	beq.n	3434 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    342c:	7da3      	ldrb	r3, [r4, #22]
    342e:	f013 0f02 	tst.w	r3, #2
    3432:	d10f      	bne.n	3454 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3434:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    3436:	f013 0f04 	tst.w	r3, #4
    343a:	d015      	beq.n	3468 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    343c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    343e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    3442:	b163      	cbz	r3, 345e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3444:	23ff      	movs	r3, #255	; 0xff
    3446:	8363      	strh	r3, [r4, #26]
    3448:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    344a:	2301      	movs	r3, #1
    344c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    344e:	6803      	ldr	r3, [r0, #0]
    3450:	4798      	blx	r3
    3452:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3454:	2302      	movs	r3, #2
    3456:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    3458:	6883      	ldr	r3, [r0, #8]
    345a:	4798      	blx	r3
    345c:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    345e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    3460:	6843      	ldr	r3, [r0, #4]
    3462:	b2c9      	uxtb	r1, r1
    3464:	4798      	blx	r3
    3466:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    3468:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    346a:	09db      	lsrs	r3, r3, #7
    346c:	d100      	bne.n	3470 <_sercom_usart_interrupt_handler+0x60>
    346e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    3470:	2380      	movs	r3, #128	; 0x80
    3472:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    3474:	68c3      	ldr	r3, [r0, #12]
    3476:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    3478:	8b63      	ldrh	r3, [r4, #26]
    347a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    347c:	8363      	strh	r3, [r4, #26]
    347e:	e7f6      	b.n	346e <_sercom_usart_interrupt_handler+0x5e>

00003480 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    3480:	4b11      	ldr	r3, [pc, #68]	; (34c8 <_sercom_init_irq_param+0x48>)
    3482:	4298      	cmp	r0, r3
    3484:	d011      	beq.n	34aa <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    3486:	4b11      	ldr	r3, [pc, #68]	; (34cc <_sercom_init_irq_param+0x4c>)
    3488:	4298      	cmp	r0, r3
    348a:	d011      	beq.n	34b0 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    348c:	4b10      	ldr	r3, [pc, #64]	; (34d0 <_sercom_init_irq_param+0x50>)
    348e:	4298      	cmp	r0, r3
    3490:	d011      	beq.n	34b6 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    3492:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    3496:	d011      	beq.n	34bc <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    3498:	4b0e      	ldr	r3, [pc, #56]	; (34d4 <_sercom_init_irq_param+0x54>)
    349a:	4298      	cmp	r0, r3
    349c:	d011      	beq.n	34c2 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    349e:	4b0e      	ldr	r3, [pc, #56]	; (34d8 <_sercom_init_irq_param+0x58>)
    34a0:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    34a2:	bf04      	itt	eq
    34a4:	4b0d      	ldreq	r3, [pc, #52]	; (34dc <_sercom_init_irq_param+0x5c>)
    34a6:	6159      	streq	r1, [r3, #20]
    34a8:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    34aa:	4b0c      	ldr	r3, [pc, #48]	; (34dc <_sercom_init_irq_param+0x5c>)
    34ac:	6019      	str	r1, [r3, #0]
    34ae:	e7f0      	b.n	3492 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    34b0:	4b0a      	ldr	r3, [pc, #40]	; (34dc <_sercom_init_irq_param+0x5c>)
    34b2:	6059      	str	r1, [r3, #4]
    34b4:	e7f0      	b.n	3498 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    34b6:	4b09      	ldr	r3, [pc, #36]	; (34dc <_sercom_init_irq_param+0x5c>)
    34b8:	6099      	str	r1, [r3, #8]
    34ba:	e7f0      	b.n	349e <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    34bc:	4b07      	ldr	r3, [pc, #28]	; (34dc <_sercom_init_irq_param+0x5c>)
    34be:	60d9      	str	r1, [r3, #12]
    34c0:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    34c2:	4b06      	ldr	r3, [pc, #24]	; (34dc <_sercom_init_irq_param+0x5c>)
    34c4:	6119      	str	r1, [r3, #16]
    34c6:	4770      	bx	lr
    34c8:	40003000 	.word	0x40003000
    34cc:	40003400 	.word	0x40003400
    34d0:	41014000 	.word	0x41014000
    34d4:	43000400 	.word	0x43000400
    34d8:	43000800 	.word	0x43000800
    34dc:	2000047c 	.word	0x2000047c

000034e0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    34e0:	b510      	push	{r4, lr}
    34e2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    34e4:	4b44      	ldr	r3, [pc, #272]	; (35f8 <_usart_init+0x118>)
    34e6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    34e8:	2800      	cmp	r0, #0
    34ea:	d063      	beq.n	35b4 <_usart_init+0xd4>
    34ec:	2801      	cmp	r0, #1
    34ee:	d05b      	beq.n	35a8 <_usart_init+0xc8>
    34f0:	2802      	cmp	r0, #2
    34f2:	d05b      	beq.n	35ac <_usart_init+0xcc>
    34f4:	2804      	cmp	r0, #4
    34f6:	d05b      	beq.n	35b0 <_usart_init+0xd0>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    34f8:	2806      	cmp	r0, #6
    34fa:	bf14      	ite	ne
    34fc:	2100      	movne	r1, #0
    34fe:	2104      	moveq	r1, #4
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    3500:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3502:	f013 0f01 	tst.w	r3, #1
    3506:	d122      	bne.n	354e <_usart_init+0x6e>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3508:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    350c:	4a3b      	ldr	r2, [pc, #236]	; (35fc <_usart_init+0x11c>)
    350e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3514:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3518:	69e3      	ldr	r3, [r4, #28]
    351a:	f013 0f03 	tst.w	r3, #3
    351e:	d1fb      	bne.n	3518 <_usart_init+0x38>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3520:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3522:	f013 0f02 	tst.w	r3, #2
    3526:	d00b      	beq.n	3540 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3528:	6823      	ldr	r3, [r4, #0]
    352a:	f023 0302 	bic.w	r3, r3, #2
    352e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3530:	69e3      	ldr	r3, [r4, #28]
    3532:	f013 0f03 	tst.w	r3, #3
    3536:	d1fb      	bne.n	3530 <_usart_init+0x50>
    3538:	69e3      	ldr	r3, [r4, #28]
    353a:	f013 0f02 	tst.w	r3, #2
    353e:	d1fb      	bne.n	3538 <_usart_init+0x58>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    3540:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3544:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3546:	69e3      	ldr	r3, [r4, #28]
    3548:	f013 0f03 	tst.w	r3, #3
    354c:	d1fb      	bne.n	3546 <_usart_init+0x66>
    354e:	69e3      	ldr	r3, [r4, #28]
    3550:	f013 0f01 	tst.w	r3, #1
    3554:	d1fb      	bne.n	354e <_usart_init+0x6e>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3556:	460a      	mov	r2, r1
    3558:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    355c:	4b27      	ldr	r3, [pc, #156]	; (35fc <_usart_init+0x11c>)
    355e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    3562:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3564:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3566:	69e3      	ldr	r3, [r4, #28]
    3568:	f013 0f03 	tst.w	r3, #3
    356c:	d1fb      	bne.n	3566 <_usart_init+0x86>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    356e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3572:	4922      	ldr	r1, [pc, #136]	; (35fc <_usart_init+0x11c>)
    3574:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    357a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    357c:	69e3      	ldr	r3, [r4, #28]
    357e:	f013 0f1f 	tst.w	r3, #31
    3582:	d1fb      	bne.n	357c <_usart_init+0x9c>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    3584:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3588:	491c      	ldr	r1, [pc, #112]	; (35fc <_usart_init+0x11c>)
    358a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    3590:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3592:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    3596:	d10f      	bne.n	35b8 <_usart_init+0xd8>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3598:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    359c:	4917      	ldr	r1, [pc, #92]	; (35fc <_usart_init+0x11c>)
    359e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    35a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    35a4:	81a3      	strh	r3, [r4, #12]
    35a6:	e016      	b.n	35d6 <_usart_init+0xf6>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    35a8:	2101      	movs	r1, #1
    35aa:	e7a9      	b.n	3500 <_usart_init+0x20>
    35ac:	2102      	movs	r1, #2
    35ae:	e7a7      	b.n	3500 <_usart_init+0x20>
    35b0:	2103      	movs	r1, #3
    35b2:	e7a5      	b.n	3500 <_usart_init+0x20>
    35b4:	2100      	movs	r1, #0
    35b6:	e7a3      	b.n	3500 <_usart_init+0x20>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    35b8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    35bc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    35c0:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    35c2:	89a1      	ldrh	r1, [r4, #12]
    35c4:	f360 010c 	bfi	r1, r0, #0, #13
    35c8:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    35ca:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    35ce:	89a3      	ldrh	r3, [r4, #12]
    35d0:	f361 334f 	bfi	r3, r1, #13, #3
    35d4:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    35d6:	4b09      	ldr	r3, [pc, #36]	; (35fc <_usart_init+0x11c>)
    35d8:	0051      	lsls	r1, r2, #1
    35da:	1888      	adds	r0, r1, r2
    35dc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    35e0:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    35e4:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    35e6:	440a      	add	r2, r1
    35e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    35ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    35f0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    35f4:	2000      	movs	r0, #0
    35f6:	bd10      	pop	{r4, pc}
    35f8:	000033cd 	.word	0x000033cd
    35fc:	00007d08 	.word	0x00007d08

00003600 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    3600:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3602:	4b03      	ldr	r3, [pc, #12]	; (3610 <_get_i2cm_index+0x10>)
    3604:	4798      	blx	r3
		}
	}

	ASSERT(false);
	return -1;
}
    3606:	3805      	subs	r0, #5
    3608:	bf18      	it	ne
    360a:	f04f 30ff 	movne.w	r0, #4294967295
    360e:	bd08      	pop	{r3, pc}
    3610:	000033cd 	.word	0x000033cd

00003614 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    3614:	b510      	push	{r4, lr}
	void *   hw    = i2c_dev->hw;
    3616:	6903      	ldr	r3, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    3618:	7e19      	ldrb	r1, [r3, #24]
    361a:	b2c9      	uxtb	r1, r1
	int32_t  ret   = I2C_OK;

	ASSERT(i2c_dev);
	ASSERT(i2c_dev->hw);

	while (!(flags & ERROR_FLAG)) {
    361c:	f011 0f80 	tst.w	r1, #128	; 0x80
    3620:	f040 80eb 	bne.w	37fa <_sercom_i2c_m_irq_handler+0x1e6>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3624:	681c      	ldr	r4, [r3, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3626:	69da      	ldr	r2, [r3, #28]
    3628:	f012 0f04 	tst.w	r2, #4
    362c:	d1fb      	bne.n	3626 <_sercom_i2c_m_irq_handler+0x12>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    362e:	8b5a      	ldrh	r2, [r3, #26]
    3630:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    3632:	f011 0f01 	tst.w	r1, #1
    3636:	f000 808b 	beq.w	3750 <_sercom_i2c_m_irq_handler+0x13c>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    363a:	f012 0f02 	tst.w	r2, #2
    363e:	d01f      	beq.n	3680 <_sercom_i2c_m_irq_handler+0x6c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    3640:	2101      	movs	r1, #1
    3642:	7619      	strb	r1, [r3, #24]
			msg->flags |= I2C_M_FAIL;
    3644:	8843      	ldrh	r3, [r0, #2]
    3646:	b29b      	uxth	r3, r3
    3648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    364c:	8043      	strh	r3, [r0, #2]
			msg->flags &= ~I2C_M_BUSY;
    364e:	8843      	ldrh	r3, [r0, #2]
    3650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3654:	041b      	lsls	r3, r3, #16
    3656:	0c1b      	lsrs	r3, r3, #16
    3658:	8043      	strh	r3, [r0, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    365a:	400a      	ands	r2, r1
			return I2C_ERR_BAD_ADDRESS;
    365c:	2a00      	cmp	r2, #0
    365e:	bf14      	ite	ne
    3660:	f06f 0104 	mvnne.w	r1, #4
    3664:	f06f 0103 	mvneq.w	r1, #3
		}

		return;
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    3668:	8843      	ldrh	r3, [r0, #2]
    366a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    366e:	041b      	lsls	r3, r3, #16
    3670:	0c1b      	lsrs	r3, r3, #16
    3672:	8043      	strh	r3, [r0, #2]
	if (i2c_dev->cb.error) {
    3674:	6943      	ldr	r3, [r0, #20]
    3676:	2b00      	cmp	r3, #0
    3678:	f000 80be 	beq.w	37f8 <_sercom_i2c_m_irq_handler+0x1e4>
		if (ret != I2C_OK) {
			i2c_dev->cb.error(i2c_dev, ret);
    367c:	4798      	blx	r3
    367e:	bd10      	pop	{r4, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    3680:	f012 0f04 	tst.w	r2, #4
    3684:	d122      	bne.n	36cc <_sercom_i2c_m_irq_handler+0xb8>
			if (msg->flags & I2C_M_TEN) {
    3686:	8842      	ldrh	r2, [r0, #2]
    3688:	f412 6f80 	tst.w	r2, #1024	; 0x400
    368c:	d03c      	beq.n	3708 <_sercom_i2c_m_irq_handler+0xf4>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    368e:	8802      	ldrh	r2, [r0, #0]
    3690:	09d2      	lsrs	r2, r2, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3692:	f002 0406 	and.w	r4, r2, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3696:	69da      	ldr	r2, [r3, #28]
    3698:	f012 0f04 	tst.w	r2, #4
    369c:	d1fb      	bne.n	3696 <_sercom_i2c_m_irq_handler+0x82>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    369e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    36a0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    36a4:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
    36a8:	4322      	orrs	r2, r4
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    36aa:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    36ac:	69da      	ldr	r2, [r3, #28]
    36ae:	f012 0f04 	tst.w	r2, #4
    36b2:	d1fb      	bne.n	36ac <_sercom_i2c_m_irq_handler+0x98>
				msg->flags &= ~I2C_M_TEN;
    36b4:	8843      	ldrh	r3, [r0, #2]
    36b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    36ba:	041b      	lsls	r3, r3, #16
    36bc:	0c1b      	lsrs	r3, r3, #16
    36be:	8043      	strh	r3, [r0, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    36c0:	6983      	ldr	r3, [r0, #24]
    36c2:	2b00      	cmp	r3, #0
    36c4:	f000 8084 	beq.w	37d0 <_sercom_i2c_m_irq_handler+0x1bc>
			i2c_dev->cb.tx_complete(i2c_dev);
    36c8:	4798      	blx	r3
    36ca:	bd10      	pop	{r4, pc}
				if (msg->len > 0) {
    36cc:	6842      	ldr	r2, [r0, #4]
    36ce:	2a00      	cmp	r2, #0
    36d0:	dd04      	ble.n	36dc <_sercom_i2c_m_irq_handler+0xc8>
					msg->flags |= I2C_M_FAIL;
    36d2:	8842      	ldrh	r2, [r0, #2]
    36d4:	b292      	uxth	r2, r2
    36d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    36da:	8042      	strh	r2, [r0, #2]
				if (msg->flags & I2C_M_STOP) {
    36dc:	8842      	ldrh	r2, [r0, #2]
    36de:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    36e2:	d108      	bne.n	36f6 <_sercom_i2c_m_irq_handler+0xe2>
				msg->flags &= ~I2C_M_BUSY;
    36e4:	8843      	ldrh	r3, [r0, #2]
    36e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    36ea:	041b      	lsls	r3, r3, #16
    36ec:	0c1b      	lsrs	r3, r3, #16
    36ee:	8043      	strh	r3, [r0, #2]
				return I2C_NACK;
    36f0:	f06f 0101 	mvn.w	r1, #1
    36f4:	e7b8      	b.n	3668 <_sercom_i2c_m_irq_handler+0x54>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    36f6:	685a      	ldr	r2, [r3, #4]
    36f8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    36fc:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    36fe:	69da      	ldr	r2, [r3, #28]
    3700:	f012 0f04 	tst.w	r2, #4
    3704:	d1fb      	bne.n	36fe <_sercom_i2c_m_irq_handler+0xea>
    3706:	e7ed      	b.n	36e4 <_sercom_i2c_m_irq_handler+0xd0>
			if (msg->len == 0) {
    3708:	6842      	ldr	r2, [r0, #4]
    370a:	b99a      	cbnz	r2, 3734 <_sercom_i2c_m_irq_handler+0x120>
				if (msg->flags & I2C_M_STOP) {
    370c:	8842      	ldrh	r2, [r0, #2]
    370e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    3712:	d106      	bne.n	3722 <_sercom_i2c_m_irq_handler+0x10e>
				msg->flags &= ~I2C_M_BUSY;
    3714:	8843      	ldrh	r3, [r0, #2]
    3716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    371a:	041b      	lsls	r3, r3, #16
    371c:	0c1b      	lsrs	r3, r3, #16
    371e:	8043      	strh	r3, [r0, #2]
    3720:	e7ce      	b.n	36c0 <_sercom_i2c_m_irq_handler+0xac>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3722:	685a      	ldr	r2, [r3, #4]
    3724:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    3728:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    372a:	69da      	ldr	r2, [r3, #28]
    372c:	f012 0f04 	tst.w	r2, #4
    3730:	d1fb      	bne.n	372a <_sercom_i2c_m_irq_handler+0x116>
    3732:	e7ef      	b.n	3714 <_sercom_i2c_m_irq_handler+0x100>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    3734:	6882      	ldr	r2, [r0, #8]
    3736:	7812      	ldrb	r2, [r2, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    3738:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    373a:	69da      	ldr	r2, [r3, #28]
    373c:	f012 0f04 	tst.w	r2, #4
    3740:	d1fb      	bne.n	373a <_sercom_i2c_m_irq_handler+0x126>
				msg->buffer++;
    3742:	6883      	ldr	r3, [r0, #8]
    3744:	3301      	adds	r3, #1
    3746:	6083      	str	r3, [r0, #8]
				msg->len--;
    3748:	6843      	ldr	r3, [r0, #4]
    374a:	3b01      	subs	r3, #1
    374c:	6043      	str	r3, [r0, #4]
    374e:	e7b7      	b.n	36c0 <_sercom_i2c_m_irq_handler+0xac>
	} else if (flags & SB_FLAG) {
    3750:	f011 0f02 	tst.w	r1, #2
    3754:	d03f      	beq.n	37d6 <_sercom_i2c_m_irq_handler+0x1c2>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    3756:	6841      	ldr	r1, [r0, #4]
    3758:	2900      	cmp	r1, #0
    375a:	d034      	beq.n	37c6 <_sercom_i2c_m_irq_handler+0x1b2>
    375c:	f012 0f04 	tst.w	r2, #4
    3760:	d131      	bne.n	37c6 <_sercom_i2c_m_irq_handler+0x1b2>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    3762:	f3c4 64c0 	ubfx	r4, r4, #27, #1
			msg->len--;
    3766:	3901      	subs	r1, #1
    3768:	6041      	str	r1, [r0, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    376a:	2900      	cmp	r1, #0
    376c:	d134      	bne.n	37d8 <_sercom_i2c_m_irq_handler+0x1c4>
    376e:	2c00      	cmp	r4, #0
    3770:	d036      	beq.n	37e0 <_sercom_i2c_m_irq_handler+0x1cc>
				if (msg->flags & I2C_M_STOP) {
    3772:	8842      	ldrh	r2, [r0, #2]
    3774:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    3778:	d114      	bne.n	37a4 <_sercom_i2c_m_irq_handler+0x190>
				msg->flags &= ~I2C_M_BUSY;
    377a:	8842      	ldrh	r2, [r0, #2]
    377c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    3780:	0412      	lsls	r2, r2, #16
    3782:	0c12      	lsrs	r2, r2, #16
    3784:	8042      	strh	r2, [r0, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    3786:	6881      	ldr	r1, [r0, #8]
    3788:	1c4a      	adds	r2, r1, #1
    378a:	6082      	str	r2, [r0, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    378c:	69da      	ldr	r2, [r3, #28]
    378e:	f012 0f04 	tst.w	r2, #4
    3792:	d1fb      	bne.n	378c <_sercom_i2c_m_irq_handler+0x178>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    3794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3796:	700a      	strb	r2, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3798:	2202      	movs	r2, #2
    379a:	761a      	strb	r2, [r3, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    379c:	69c3      	ldr	r3, [r0, #28]
    379e:	b1d3      	cbz	r3, 37d6 <_sercom_i2c_m_irq_handler+0x1c2>
			i2c_dev->cb.rx_complete(i2c_dev);
    37a0:	4798      	blx	r3
    37a2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    37a4:	685a      	ldr	r2, [r3, #4]
    37a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    37aa:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37ac:	69da      	ldr	r2, [r3, #28]
    37ae:	f012 0f04 	tst.w	r2, #4
    37b2:	d1fb      	bne.n	37ac <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    37b4:	685a      	ldr	r2, [r3, #4]
    37b6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    37ba:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37bc:	69da      	ldr	r2, [r3, #28]
    37be:	f012 0f04 	tst.w	r2, #4
    37c2:	d1fb      	bne.n	37bc <_sercom_i2c_m_irq_handler+0x1a8>
    37c4:	e7d9      	b.n	377a <_sercom_i2c_m_irq_handler+0x166>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    37c6:	2202      	movs	r2, #2
    37c8:	761a      	strb	r2, [r3, #24]
			return I2C_NACK;
    37ca:	f06f 0101 	mvn.w	r1, #1
    37ce:	e74b      	b.n	3668 <_sercom_i2c_m_irq_handler+0x54>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    37d0:	f011 0f02 	tst.w	r1, #2
    37d4:	d1e2      	bne.n	379c <_sercom_i2c_m_irq_handler+0x188>
    37d6:	bd10      	pop	{r4, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    37d8:	2901      	cmp	r1, #1
    37da:	d1d4      	bne.n	3786 <_sercom_i2c_m_irq_handler+0x172>
    37dc:	2c00      	cmp	r4, #0
    37de:	d0d2      	beq.n	3786 <_sercom_i2c_m_irq_handler+0x172>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    37e0:	685a      	ldr	r2, [r3, #4]
    37e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    37e6:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37e8:	69da      	ldr	r2, [r3, #28]
    37ea:	f012 0f04 	tst.w	r2, #4
    37ee:	d1fb      	bne.n	37e8 <_sercom_i2c_m_irq_handler+0x1d4>
			if (msg->len == 0) {
    37f0:	6842      	ldr	r2, [r0, #4]
    37f2:	2a00      	cmp	r2, #0
    37f4:	d0bd      	beq.n	3772 <_sercom_i2c_m_irq_handler+0x15e>
    37f6:	e7c6      	b.n	3786 <_sercom_i2c_m_irq_handler+0x172>
    37f8:	bd10      	pop	{r4, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    37fa:	8843      	ldrh	r3, [r0, #2]
    37fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3800:	041b      	lsls	r3, r3, #16
    3802:	0c1b      	lsrs	r3, r3, #16
    3804:	8043      	strh	r3, [r0, #2]
	if (i2c_dev->cb.error) {
    3806:	6943      	ldr	r3, [r0, #20]
    3808:	2b00      	cmp	r3, #0
    380a:	d0e4      	beq.n	37d6 <_sercom_i2c_m_irq_handler+0x1c2>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    380c:	f06f 0104 	mvn.w	r1, #4
    3810:	4798      	blx	r3
    3812:	bd10      	pop	{r4, pc}

00003814 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3814:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    3816:	4b03      	ldr	r3, [pc, #12]	; (3824 <_sercom_get_irq_num+0x10>)
    3818:	4798      	blx	r3
    381a:	0080      	lsls	r0, r0, #2
    381c:	302e      	adds	r0, #46	; 0x2e
}
    381e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    3822:	bd08      	pop	{r3, pc}
    3824:	000033cd 	.word	0x000033cd

00003828 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    3828:	b538      	push	{r3, r4, r5, lr}
    382a:	4605      	mov	r5, r0
    382c:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    382e:	4608      	mov	r0, r1
    3830:	4b34      	ldr	r3, [pc, #208]	; (3904 <_i2c_m_sync_init_impl+0xdc>)
    3832:	4798      	blx	r3
    3834:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    3836:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    3838:	f013 0f01 	tst.w	r3, #1
    383c:	d123      	bne.n	3886 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    383e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3842:	4a31      	ldr	r2, [pc, #196]	; (3908 <_i2c_m_sync_init_impl+0xe0>)
    3844:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3848:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    384c:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3850:	69e3      	ldr	r3, [r4, #28]
    3852:	f013 0f03 	tst.w	r3, #3
    3856:	d1fb      	bne.n	3850 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3858:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    385a:	f013 0f02 	tst.w	r3, #2
    385e:	d00b      	beq.n	3878 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    3860:	6823      	ldr	r3, [r4, #0]
    3862:	f023 0302 	bic.w	r3, r3, #2
    3866:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3868:	69e3      	ldr	r3, [r4, #28]
    386a:	f013 0f03 	tst.w	r3, #3
    386e:	d1fb      	bne.n	3868 <_i2c_m_sync_init_impl+0x40>
    3870:	69e3      	ldr	r3, [r4, #28]
    3872:	f013 0f02 	tst.w	r3, #2
    3876:	d1fb      	bne.n	3870 <_i2c_m_sync_init_impl+0x48>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    3878:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    387c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    387e:	69e3      	ldr	r3, [r4, #28]
    3880:	f013 0f03 	tst.w	r3, #3
    3884:	d1fb      	bne.n	387e <_i2c_m_sync_init_impl+0x56>
    3886:	69e3      	ldr	r3, [r4, #28]
    3888:	f013 0f01 	tst.w	r3, #1
    388c:	d1fb      	bne.n	3886 <_i2c_m_sync_init_impl+0x5e>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    388e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3892:	4a1d      	ldr	r2, [pc, #116]	; (3908 <_i2c_m_sync_init_impl+0xe0>)
    3894:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3898:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    389c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    389e:	69e3      	ldr	r3, [r4, #28]
    38a0:	f013 0f03 	tst.w	r3, #3
    38a4:	d1fb      	bne.n	389e <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    38a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    38aa:	4917      	ldr	r1, [pc, #92]	; (3908 <_i2c_m_sync_init_impl+0xe0>)
    38ac:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    38b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    38b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    38b6:	69e3      	ldr	r3, [r4, #28]
    38b8:	f013 0f04 	tst.w	r3, #4
    38bc:	d1fb      	bne.n	38b6 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    38be:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    38c2:	4911      	ldr	r1, [pc, #68]	; (3908 <_i2c_m_sync_init_impl+0xe0>)
    38c4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    38c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    38cc:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    38ce:	f3c2 6301 	ubfx	r3, r2, #24, #2
    38d2:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    38d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    38d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    38da:	2b01      	cmp	r3, #1
    38dc:	bf94      	ite	ls
    38de:	2300      	movls	r3, #0
    38e0:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    38e2:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    38e6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    38e8:	69e3      	ldr	r3, [r4, #28]
    38ea:	f013 0f04 	tst.w	r3, #4
    38ee:	d1fb      	bne.n	38e8 <_i2c_m_sync_init_impl+0xc0>

	service->trise = _i2cms[i].trise;
    38f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    38f4:	4b04      	ldr	r3, [pc, #16]	; (3908 <_i2c_m_sync_init_impl+0xe0>)
    38f6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    38fa:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    38fe:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    3900:	2000      	movs	r0, #0
    3902:	bd38      	pop	{r3, r4, r5, pc}
    3904:	00003601 	.word	0x00003601
    3908:	00007d08 	.word	0x00007d08

0000390c <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    390c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    390e:	f013 0f01 	tst.w	r3, #1
    3912:	d109      	bne.n	3928 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3914:	6803      	ldr	r3, [r0, #0]
    3916:	f043 0302 	orr.w	r3, r3, #2
    391a:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    391c:	69c3      	ldr	r3, [r0, #28]
    391e:	f013 0f03 	tst.w	r3, #3
    3922:	d1fb      	bne.n	391c <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    3924:	2000      	movs	r0, #0
    3926:	4770      	bx	lr
		return ERR_BUSY;
    3928:	f06f 0003 	mvn.w	r0, #3
}
    392c:	4770      	bx	lr

0000392e <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    392e:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    3930:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3932:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    3934:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    3936:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    3938:	f013 0f01 	tst.w	r3, #1
    393c:	d109      	bne.n	3952 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    393e:	f013 0f04 	tst.w	r3, #4
    3942:	d109      	bne.n	3958 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    3944:	f013 0f02 	tst.w	r3, #2
    3948:	d109      	bne.n	395e <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    394a:	f013 0f80 	tst.w	r3, #128	; 0x80
    394e:	d10b      	bne.n	3968 <_spi_handler+0x3a>
    3950:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    3952:	6883      	ldr	r3, [r0, #8]
    3954:	4798      	blx	r3
    3956:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    3958:	68c3      	ldr	r3, [r0, #12]
    395a:	4798      	blx	r3
    395c:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    395e:	2302      	movs	r3, #2
    3960:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    3962:	6903      	ldr	r3, [r0, #16]
    3964:	4798      	blx	r3
    3966:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3968:	2304      	movs	r3, #4
    396a:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    396c:	2380      	movs	r3, #128	; 0x80
    396e:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    3970:	6943      	ldr	r3, [r0, #20]
    3972:	f06f 0112 	mvn.w	r1, #18
    3976:	4798      	blx	r3
	}
}
    3978:	e7ea      	b.n	3950 <_spi_handler+0x22>
	...

0000397c <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    397c:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    397e:	4b03      	ldr	r3, [pc, #12]	; (398c <_spi_get_tx_dma_channel+0x10>)
    3980:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    3982:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    3984:	bf0c      	ite	eq
    3986:	2008      	moveq	r0, #8
    3988:	2000      	movne	r0, #0
    398a:	bd08      	pop	{r3, pc}
    398c:	000033cd 	.word	0x000033cd

00003990 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    3990:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    3992:	4b03      	ldr	r3, [pc, #12]	; (39a0 <_spi_get_rx_dma_channel+0x10>)
    3994:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    3996:	2807      	cmp	r0, #7
    3998:	bf8c      	ite	hi
    399a:	2000      	movhi	r0, #0
    399c:	2001      	movls	r0, #1
    399e:	bd08      	pop	{r3, pc}
    39a0:	000033cd 	.word	0x000033cd

000039a4 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    39a4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    39a6:	6883      	ldr	r3, [r0, #8]
    39a8:	689b      	ldr	r3, [r3, #8]
    39aa:	b103      	cbz	r3, 39ae <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    39ac:	4798      	blx	r3
    39ae:	bd08      	pop	{r3, pc}

000039b0 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    39b0:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    39b2:	6883      	ldr	r3, [r0, #8]
    39b4:	685b      	ldr	r3, [r3, #4]
    39b6:	b103      	cbz	r3, 39ba <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    39b8:	4798      	blx	r3
    39ba:	bd08      	pop	{r3, pc}

000039bc <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    39bc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    39be:	6883      	ldr	r3, [r0, #8]
    39c0:	68db      	ldr	r3, [r3, #12]
    39c2:	b103      	cbz	r3, 39c6 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    39c4:	4798      	blx	r3
    39c6:	bd08      	pop	{r3, pc}

000039c8 <_usart_sync_init>:
{
    39c8:	b508      	push	{r3, lr}
	device->hw = hw;
    39ca:	6001      	str	r1, [r0, #0]
	return _usart_init(hw);
    39cc:	4608      	mov	r0, r1
    39ce:	4b01      	ldr	r3, [pc, #4]	; (39d4 <_usart_sync_init+0xc>)
    39d0:	4798      	blx	r3
}
    39d2:	bd08      	pop	{r3, pc}
    39d4:	000034e1 	.word	0x000034e1

000039d8 <_usart_async_init>:
{
    39d8:	b570      	push	{r4, r5, r6, lr}
    39da:	4606      	mov	r6, r0
    39dc:	460d      	mov	r5, r1
	init_status = _usart_init(hw);
    39de:	4608      	mov	r0, r1
    39e0:	4b14      	ldr	r3, [pc, #80]	; (3a34 <_usart_async_init+0x5c>)
    39e2:	4798      	blx	r3
	if (init_status) {
    39e4:	4604      	mov	r4, r0
    39e6:	b108      	cbz	r0, 39ec <_usart_async_init+0x14>
}
    39e8:	4620      	mov	r0, r4
    39ea:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    39ec:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    39ee:	4631      	mov	r1, r6
    39f0:	4628      	mov	r0, r5
    39f2:	4b11      	ldr	r3, [pc, #68]	; (3a38 <_usart_async_init+0x60>)
    39f4:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    39f6:	4628      	mov	r0, r5
    39f8:	4b10      	ldr	r3, [pc, #64]	; (3a3c <_usart_async_init+0x64>)
    39fa:	4798      	blx	r3
    39fc:	1d01      	adds	r1, r0, #4
    39fe:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a00:	2501      	movs	r5, #1
    3a02:	f000 021f 	and.w	r2, r0, #31
    3a06:	fa05 f202 	lsl.w	r2, r5, r2
    3a0a:	0943      	lsrs	r3, r0, #5
    3a0c:	009b      	lsls	r3, r3, #2
    3a0e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3a12:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3a1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a1e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a22:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a26:	601a      	str	r2, [r3, #0]
		irq++;
    3a28:	3001      	adds	r0, #1
    3a2a:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    3a2c:	4281      	cmp	r1, r0
    3a2e:	d1e8      	bne.n	3a02 <_usart_async_init+0x2a>
    3a30:	e7da      	b.n	39e8 <_usart_async_init+0x10>
    3a32:	bf00      	nop
    3a34:	000034e1 	.word	0x000034e1
    3a38:	00003481 	.word	0x00003481
    3a3c:	00003815 	.word	0x00003815

00003a40 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3a40:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3a42:	6813      	ldr	r3, [r2, #0]
    3a44:	f043 0302 	orr.w	r3, r3, #2
    3a48:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3a4a:	69d3      	ldr	r3, [r2, #28]
    3a4c:	f013 0f03 	tst.w	r3, #3
    3a50:	d1fb      	bne.n	3a4a <_usart_sync_enable+0xa>
}
    3a52:	4770      	bx	lr

00003a54 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3a54:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    3a56:	6299      	str	r1, [r3, #40]	; 0x28
    3a58:	4770      	bx	lr

00003a5a <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3a5a:	6983      	ldr	r3, [r0, #24]
    3a5c:	6299      	str	r1, [r3, #40]	; 0x28
    3a5e:	4770      	bx	lr

00003a60 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    3a60:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    3a62:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    3a64:	b2c0      	uxtb	r0, r0
    3a66:	4770      	bx	lr

00003a68 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3a68:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3a6a:	7e18      	ldrb	r0, [r3, #24]
}
    3a6c:	f000 0001 	and.w	r0, r0, #1
    3a70:	4770      	bx	lr

00003a72 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    3a72:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3a74:	7e18      	ldrb	r0, [r3, #24]
}
    3a76:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3a7a:	4770      	bx	lr

00003a7c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    3a7c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3a7e:	7e18      	ldrb	r0, [r3, #24]
}
    3a80:	f3c0 0080 	ubfx	r0, r0, #2, #1
    3a84:	4770      	bx	lr

00003a86 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3a86:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3a88:	2201      	movs	r2, #1
    3a8a:	759a      	strb	r2, [r3, #22]
    3a8c:	4770      	bx	lr

00003a8e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    3a8e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3a90:	2202      	movs	r2, #2
    3a92:	759a      	strb	r2, [r3, #22]
    3a94:	4770      	bx	lr
	...

00003a98 <_i2c_m_async_init>:
{
    3a98:	b570      	push	{r4, r5, r6, lr}
    3a9a:	4606      	mov	r6, r0
    3a9c:	460d      	mov	r5, r1
	i2c_dev->hw = hw;
    3a9e:	6101      	str	r1, [r0, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    3aa0:	4b13      	ldr	r3, [pc, #76]	; (3af0 <_i2c_m_async_init+0x58>)
    3aa2:	4798      	blx	r3
	if (init_status) {
    3aa4:	4604      	mov	r4, r0
    3aa6:	b108      	cbz	r0, 3aac <_i2c_m_async_init+0x14>
}
    3aa8:	4620      	mov	r0, r4
    3aaa:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    3aac:	4631      	mov	r1, r6
    3aae:	4628      	mov	r0, r5
    3ab0:	4b10      	ldr	r3, [pc, #64]	; (3af4 <_i2c_m_async_init+0x5c>)
    3ab2:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    3ab4:	4628      	mov	r0, r5
    3ab6:	4b10      	ldr	r3, [pc, #64]	; (3af8 <_i2c_m_async_init+0x60>)
    3ab8:	4798      	blx	r3
    3aba:	1d01      	adds	r1, r0, #4
    3abc:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3abe:	2501      	movs	r5, #1
    3ac0:	f000 021f 	and.w	r2, r0, #31
    3ac4:	fa05 f202 	lsl.w	r2, r5, r2
    3ac8:	0943      	lsrs	r3, r0, #5
    3aca:	009b      	lsls	r3, r3, #2
    3acc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3ad0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3ad8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3adc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ae0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ae4:	601a      	str	r2, [r3, #0]
		irq++;
    3ae6:	3001      	adds	r0, #1
    3ae8:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    3aea:	4281      	cmp	r1, r0
    3aec:	d1e8      	bne.n	3ac0 <_i2c_m_async_init+0x28>
    3aee:	e7db      	b.n	3aa8 <_i2c_m_async_init+0x10>
    3af0:	00003829 	.word	0x00003829
    3af4:	00003481 	.word	0x00003481
    3af8:	00003815 	.word	0x00003815

00003afc <_i2c_m_async_transfer>:
{
    3afc:	b410      	push	{r4}
    3afe:	4604      	mov	r4, r0
	if (msg->len == 0) {
    3b00:	6848      	ldr	r0, [r1, #4]
    3b02:	2800      	cmp	r0, #0
    3b04:	d042      	beq.n	3b8c <_i2c_m_async_transfer+0x90>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    3b06:	8863      	ldrh	r3, [r4, #2]
    3b08:	f413 7f80 	tst.w	r3, #256	; 0x100
    3b0c:	d162      	bne.n	3bd4 <_i2c_m_async_transfer+0xd8>
	msg->flags |= I2C_M_BUSY;
    3b0e:	884b      	ldrh	r3, [r1, #2]
    3b10:	b29b      	uxth	r3, r3
    3b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3b16:	804b      	strh	r3, [r1, #2]
	i2c_dev->service.msg = *msg;
    3b18:	c907      	ldmia	r1, {r0, r1, r2}
    3b1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    3b1e:	6922      	ldr	r2, [r4, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    3b20:	6853      	ldr	r3, [r2, #4]
    3b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3b26:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3b28:	69d3      	ldr	r3, [r2, #28]
    3b2a:	f013 0f04 	tst.w	r3, #4
    3b2e:	d1fb      	bne.n	3b28 <_i2c_m_async_transfer+0x2c>
	void *             hw    = i2c_dev->hw;
    3b30:	6923      	ldr	r3, [r4, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3b32:	6819      	ldr	r1, [r3, #0]
	if (msg->len == 1 && sclsm) {
    3b34:	6862      	ldr	r2, [r4, #4]
    3b36:	2a01      	cmp	r2, #1
    3b38:	d02b      	beq.n	3b92 <_i2c_m_async_transfer+0x96>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3b3a:	685a      	ldr	r2, [r3, #4]
    3b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    3b40:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3b42:	69da      	ldr	r2, [r3, #28]
    3b44:	f012 0f04 	tst.w	r2, #4
    3b48:	d1fb      	bne.n	3b42 <_i2c_m_async_transfer+0x46>
	if (msg->addr & I2C_M_TEN) {
    3b4a:	8822      	ldrh	r2, [r4, #0]
    3b4c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    3b50:	d02b      	beq.n	3baa <_i2c_m_async_transfer+0xae>
		if (msg->flags & I2C_M_RD) {
    3b52:	8861      	ldrh	r1, [r4, #2]
    3b54:	f011 0f01 	tst.w	r1, #1
    3b58:	d004      	beq.n	3b64 <_i2c_m_async_transfer+0x68>
			msg->flags |= I2C_M_TEN;
    3b5a:	8861      	ldrh	r1, [r4, #2]
    3b5c:	b289      	uxth	r1, r1
    3b5e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    3b62:	8061      	strh	r1, [r4, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3b64:	f240 71fe 	movw	r1, #2046	; 0x7fe
    3b68:	ea01 0142 	and.w	r1, r1, r2, lsl #1
    3b6c:	69da      	ldr	r2, [r3, #28]
    3b6e:	f012 0f04 	tst.w	r2, #4
    3b72:	d1fb      	bne.n	3b6c <_i2c_m_async_transfer+0x70>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3b76:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    3b7e:	430a      	orrs	r2, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3b80:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3b82:	69da      	ldr	r2, [r3, #28]
    3b84:	f012 0f04 	tst.w	r2, #4
    3b88:	d1fb      	bne.n	3b82 <_i2c_m_async_transfer+0x86>
	return ERR_NONE;
    3b8a:	2000      	movs	r0, #0
}
    3b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3b90:	4770      	bx	lr
	if (msg->len == 1 && sclsm) {
    3b92:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
    3b96:	d0d0      	beq.n	3b3a <_i2c_m_async_transfer+0x3e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3b98:	685a      	ldr	r2, [r3, #4]
    3b9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3b9e:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3ba0:	69da      	ldr	r2, [r3, #28]
    3ba2:	f012 0f04 	tst.w	r2, #4
    3ba6:	d1fb      	bne.n	3ba0 <_i2c_m_async_transfer+0xa4>
    3ba8:	e7cf      	b.n	3b4a <_i2c_m_async_transfer+0x4e>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    3baa:	8860      	ldrh	r0, [r4, #2]
    3bac:	0051      	lsls	r1, r2, #1
    3bae:	b2c9      	uxtb	r1, r1
    3bb0:	f000 0201 	and.w	r2, r0, #1
    3bb4:	4311      	orrs	r1, r2
    3bb6:	69da      	ldr	r2, [r3, #28]
    3bb8:	f012 0f04 	tst.w	r2, #4
    3bbc:	d1fb      	bne.n	3bb6 <_i2c_m_async_transfer+0xba>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3bc0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3bc4:	4311      	orrs	r1, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3bc6:	6259      	str	r1, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3bc8:	69da      	ldr	r2, [r3, #28]
    3bca:	f012 0f04 	tst.w	r2, #4
    3bce:	d1fb      	bne.n	3bc8 <_i2c_m_async_transfer+0xcc>
	return ERR_NONE;
    3bd0:	2000      	movs	r0, #0
    3bd2:	e7db      	b.n	3b8c <_i2c_m_async_transfer+0x90>
		return ERR_BUSY;
    3bd4:	f06f 0003 	mvn.w	r0, #3
    3bd8:	e7d8      	b.n	3b8c <_i2c_m_async_transfer+0x90>

00003bda <_i2c_m_async_register_callback>:
	switch (type) {
    3bda:	2901      	cmp	r1, #1
    3bdc:	d006      	beq.n	3bec <_i2c_m_async_register_callback+0x12>
    3bde:	b119      	cbz	r1, 3be8 <_i2c_m_async_register_callback+0xe>
    3be0:	2902      	cmp	r1, #2
    3be2:	d005      	beq.n	3bf0 <_i2c_m_async_register_callback+0x16>
}
    3be4:	2000      	movs	r0, #0
    3be6:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    3be8:	6142      	str	r2, [r0, #20]
		break;
    3bea:	e7fb      	b.n	3be4 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    3bec:	6182      	str	r2, [r0, #24]
		break;
    3bee:	e7f9      	b.n	3be4 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    3bf0:	61c2      	str	r2, [r0, #28]
		break;
    3bf2:	e7f7      	b.n	3be4 <_i2c_m_async_register_callback+0xa>

00003bf4 <SERCOM0_0_Handler>:
{
    3bf4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3bf6:	4b02      	ldr	r3, [pc, #8]	; (3c00 <SERCOM0_0_Handler+0xc>)
    3bf8:	6818      	ldr	r0, [r3, #0]
    3bfa:	4b02      	ldr	r3, [pc, #8]	; (3c04 <SERCOM0_0_Handler+0x10>)
    3bfc:	4798      	blx	r3
    3bfe:	bd08      	pop	{r3, pc}
    3c00:	2000047c 	.word	0x2000047c
    3c04:	00003411 	.word	0x00003411

00003c08 <SERCOM0_1_Handler>:
{
    3c08:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3c0a:	4b02      	ldr	r3, [pc, #8]	; (3c14 <SERCOM0_1_Handler+0xc>)
    3c0c:	6818      	ldr	r0, [r3, #0]
    3c0e:	4b02      	ldr	r3, [pc, #8]	; (3c18 <SERCOM0_1_Handler+0x10>)
    3c10:	4798      	blx	r3
    3c12:	bd08      	pop	{r3, pc}
    3c14:	2000047c 	.word	0x2000047c
    3c18:	00003411 	.word	0x00003411

00003c1c <SERCOM0_2_Handler>:
{
    3c1c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3c1e:	4b02      	ldr	r3, [pc, #8]	; (3c28 <SERCOM0_2_Handler+0xc>)
    3c20:	6818      	ldr	r0, [r3, #0]
    3c22:	4b02      	ldr	r3, [pc, #8]	; (3c2c <SERCOM0_2_Handler+0x10>)
    3c24:	4798      	blx	r3
    3c26:	bd08      	pop	{r3, pc}
    3c28:	2000047c 	.word	0x2000047c
    3c2c:	00003411 	.word	0x00003411

00003c30 <SERCOM0_3_Handler>:
{
    3c30:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3c32:	4b02      	ldr	r3, [pc, #8]	; (3c3c <SERCOM0_3_Handler+0xc>)
    3c34:	6818      	ldr	r0, [r3, #0]
    3c36:	4b02      	ldr	r3, [pc, #8]	; (3c40 <SERCOM0_3_Handler+0x10>)
    3c38:	4798      	blx	r3
    3c3a:	bd08      	pop	{r3, pc}
    3c3c:	2000047c 	.word	0x2000047c
    3c40:	00003411 	.word	0x00003411

00003c44 <SERCOM1_0_Handler>:
{
    3c44:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3c46:	4b02      	ldr	r3, [pc, #8]	; (3c50 <SERCOM1_0_Handler+0xc>)
    3c48:	6858      	ldr	r0, [r3, #4]
    3c4a:	4b02      	ldr	r3, [pc, #8]	; (3c54 <SERCOM1_0_Handler+0x10>)
    3c4c:	4798      	blx	r3
    3c4e:	bd08      	pop	{r3, pc}
    3c50:	2000047c 	.word	0x2000047c
    3c54:	00003411 	.word	0x00003411

00003c58 <SERCOM1_1_Handler>:
{
    3c58:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3c5a:	4b02      	ldr	r3, [pc, #8]	; (3c64 <SERCOM1_1_Handler+0xc>)
    3c5c:	6858      	ldr	r0, [r3, #4]
    3c5e:	4b02      	ldr	r3, [pc, #8]	; (3c68 <SERCOM1_1_Handler+0x10>)
    3c60:	4798      	blx	r3
    3c62:	bd08      	pop	{r3, pc}
    3c64:	2000047c 	.word	0x2000047c
    3c68:	00003411 	.word	0x00003411

00003c6c <SERCOM1_2_Handler>:
{
    3c6c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3c6e:	4b02      	ldr	r3, [pc, #8]	; (3c78 <SERCOM1_2_Handler+0xc>)
    3c70:	6858      	ldr	r0, [r3, #4]
    3c72:	4b02      	ldr	r3, [pc, #8]	; (3c7c <SERCOM1_2_Handler+0x10>)
    3c74:	4798      	blx	r3
    3c76:	bd08      	pop	{r3, pc}
    3c78:	2000047c 	.word	0x2000047c
    3c7c:	00003411 	.word	0x00003411

00003c80 <SERCOM1_3_Handler>:
{
    3c80:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3c82:	4b02      	ldr	r3, [pc, #8]	; (3c8c <SERCOM1_3_Handler+0xc>)
    3c84:	6858      	ldr	r0, [r3, #4]
    3c86:	4b02      	ldr	r3, [pc, #8]	; (3c90 <SERCOM1_3_Handler+0x10>)
    3c88:	4798      	blx	r3
    3c8a:	bd08      	pop	{r3, pc}
    3c8c:	2000047c 	.word	0x2000047c
    3c90:	00003411 	.word	0x00003411

00003c94 <SERCOM3_0_Handler>:
{
    3c94:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3c96:	4b02      	ldr	r3, [pc, #8]	; (3ca0 <SERCOM3_0_Handler+0xc>)
    3c98:	6898      	ldr	r0, [r3, #8]
    3c9a:	4b02      	ldr	r3, [pc, #8]	; (3ca4 <SERCOM3_0_Handler+0x10>)
    3c9c:	4798      	blx	r3
    3c9e:	bd08      	pop	{r3, pc}
    3ca0:	2000047c 	.word	0x2000047c
    3ca4:	0000392f 	.word	0x0000392f

00003ca8 <SERCOM3_1_Handler>:
{
    3ca8:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3caa:	4b02      	ldr	r3, [pc, #8]	; (3cb4 <SERCOM3_1_Handler+0xc>)
    3cac:	6898      	ldr	r0, [r3, #8]
    3cae:	4b02      	ldr	r3, [pc, #8]	; (3cb8 <SERCOM3_1_Handler+0x10>)
    3cb0:	4798      	blx	r3
    3cb2:	bd08      	pop	{r3, pc}
    3cb4:	2000047c 	.word	0x2000047c
    3cb8:	0000392f 	.word	0x0000392f

00003cbc <SERCOM3_2_Handler>:
{
    3cbc:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3cbe:	4b02      	ldr	r3, [pc, #8]	; (3cc8 <SERCOM3_2_Handler+0xc>)
    3cc0:	6898      	ldr	r0, [r3, #8]
    3cc2:	4b02      	ldr	r3, [pc, #8]	; (3ccc <SERCOM3_2_Handler+0x10>)
    3cc4:	4798      	blx	r3
    3cc6:	bd08      	pop	{r3, pc}
    3cc8:	2000047c 	.word	0x2000047c
    3ccc:	0000392f 	.word	0x0000392f

00003cd0 <SERCOM3_3_Handler>:
{
    3cd0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3cd2:	4b02      	ldr	r3, [pc, #8]	; (3cdc <SERCOM3_3_Handler+0xc>)
    3cd4:	6898      	ldr	r0, [r3, #8]
    3cd6:	4b02      	ldr	r3, [pc, #8]	; (3ce0 <SERCOM3_3_Handler+0x10>)
    3cd8:	4798      	blx	r3
    3cda:	bd08      	pop	{r3, pc}
    3cdc:	2000047c 	.word	0x2000047c
    3ce0:	0000392f 	.word	0x0000392f

00003ce4 <SERCOM4_0_Handler>:
{
    3ce4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3ce6:	4b02      	ldr	r3, [pc, #8]	; (3cf0 <SERCOM4_0_Handler+0xc>)
    3ce8:	68d8      	ldr	r0, [r3, #12]
    3cea:	4b02      	ldr	r3, [pc, #8]	; (3cf4 <SERCOM4_0_Handler+0x10>)
    3cec:	4798      	blx	r3
    3cee:	bd08      	pop	{r3, pc}
    3cf0:	2000047c 	.word	0x2000047c
    3cf4:	00003411 	.word	0x00003411

00003cf8 <SERCOM4_1_Handler>:
{
    3cf8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3cfa:	4b02      	ldr	r3, [pc, #8]	; (3d04 <SERCOM4_1_Handler+0xc>)
    3cfc:	68d8      	ldr	r0, [r3, #12]
    3cfe:	4b02      	ldr	r3, [pc, #8]	; (3d08 <SERCOM4_1_Handler+0x10>)
    3d00:	4798      	blx	r3
    3d02:	bd08      	pop	{r3, pc}
    3d04:	2000047c 	.word	0x2000047c
    3d08:	00003411 	.word	0x00003411

00003d0c <SERCOM4_2_Handler>:
{
    3d0c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3d0e:	4b02      	ldr	r3, [pc, #8]	; (3d18 <SERCOM4_2_Handler+0xc>)
    3d10:	68d8      	ldr	r0, [r3, #12]
    3d12:	4b02      	ldr	r3, [pc, #8]	; (3d1c <SERCOM4_2_Handler+0x10>)
    3d14:	4798      	blx	r3
    3d16:	bd08      	pop	{r3, pc}
    3d18:	2000047c 	.word	0x2000047c
    3d1c:	00003411 	.word	0x00003411

00003d20 <SERCOM4_3_Handler>:
{
    3d20:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3d22:	4b02      	ldr	r3, [pc, #8]	; (3d2c <SERCOM4_3_Handler+0xc>)
    3d24:	68d8      	ldr	r0, [r3, #12]
    3d26:	4b02      	ldr	r3, [pc, #8]	; (3d30 <SERCOM4_3_Handler+0x10>)
    3d28:	4798      	blx	r3
    3d2a:	bd08      	pop	{r3, pc}
    3d2c:	2000047c 	.word	0x2000047c
    3d30:	00003411 	.word	0x00003411

00003d34 <SERCOM5_0_Handler>:
{
    3d34:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3d36:	4b02      	ldr	r3, [pc, #8]	; (3d40 <SERCOM5_0_Handler+0xc>)
    3d38:	6918      	ldr	r0, [r3, #16]
    3d3a:	4b02      	ldr	r3, [pc, #8]	; (3d44 <SERCOM5_0_Handler+0x10>)
    3d3c:	4798      	blx	r3
    3d3e:	bd08      	pop	{r3, pc}
    3d40:	2000047c 	.word	0x2000047c
    3d44:	00003615 	.word	0x00003615

00003d48 <SERCOM5_1_Handler>:
{
    3d48:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3d4a:	4b02      	ldr	r3, [pc, #8]	; (3d54 <SERCOM5_1_Handler+0xc>)
    3d4c:	6918      	ldr	r0, [r3, #16]
    3d4e:	4b02      	ldr	r3, [pc, #8]	; (3d58 <SERCOM5_1_Handler+0x10>)
    3d50:	4798      	blx	r3
    3d52:	bd08      	pop	{r3, pc}
    3d54:	2000047c 	.word	0x2000047c
    3d58:	00003615 	.word	0x00003615

00003d5c <SERCOM5_2_Handler>:
{
    3d5c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3d5e:	4b02      	ldr	r3, [pc, #8]	; (3d68 <SERCOM5_2_Handler+0xc>)
    3d60:	6918      	ldr	r0, [r3, #16]
    3d62:	4b02      	ldr	r3, [pc, #8]	; (3d6c <SERCOM5_2_Handler+0x10>)
    3d64:	4798      	blx	r3
    3d66:	bd08      	pop	{r3, pc}
    3d68:	2000047c 	.word	0x2000047c
    3d6c:	00003615 	.word	0x00003615

00003d70 <SERCOM5_3_Handler>:
{
    3d70:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3d72:	4b02      	ldr	r3, [pc, #8]	; (3d7c <SERCOM5_3_Handler+0xc>)
    3d74:	6918      	ldr	r0, [r3, #16]
    3d76:	4b02      	ldr	r3, [pc, #8]	; (3d80 <SERCOM5_3_Handler+0x10>)
    3d78:	4798      	blx	r3
    3d7a:	bd08      	pop	{r3, pc}
    3d7c:	2000047c 	.word	0x2000047c
    3d80:	00003615 	.word	0x00003615

00003d84 <SERCOM6_0_Handler>:
{
    3d84:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3d86:	4b02      	ldr	r3, [pc, #8]	; (3d90 <SERCOM6_0_Handler+0xc>)
    3d88:	6958      	ldr	r0, [r3, #20]
    3d8a:	4b02      	ldr	r3, [pc, #8]	; (3d94 <SERCOM6_0_Handler+0x10>)
    3d8c:	4798      	blx	r3
    3d8e:	bd08      	pop	{r3, pc}
    3d90:	2000047c 	.word	0x2000047c
    3d94:	00003411 	.word	0x00003411

00003d98 <SERCOM6_1_Handler>:
{
    3d98:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3d9a:	4b02      	ldr	r3, [pc, #8]	; (3da4 <SERCOM6_1_Handler+0xc>)
    3d9c:	6958      	ldr	r0, [r3, #20]
    3d9e:	4b02      	ldr	r3, [pc, #8]	; (3da8 <SERCOM6_1_Handler+0x10>)
    3da0:	4798      	blx	r3
    3da2:	bd08      	pop	{r3, pc}
    3da4:	2000047c 	.word	0x2000047c
    3da8:	00003411 	.word	0x00003411

00003dac <SERCOM6_2_Handler>:
{
    3dac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3dae:	4b02      	ldr	r3, [pc, #8]	; (3db8 <SERCOM6_2_Handler+0xc>)
    3db0:	6958      	ldr	r0, [r3, #20]
    3db2:	4b02      	ldr	r3, [pc, #8]	; (3dbc <SERCOM6_2_Handler+0x10>)
    3db4:	4798      	blx	r3
    3db6:	bd08      	pop	{r3, pc}
    3db8:	2000047c 	.word	0x2000047c
    3dbc:	00003411 	.word	0x00003411

00003dc0 <SERCOM6_3_Handler>:
{
    3dc0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3dc2:	4b02      	ldr	r3, [pc, #8]	; (3dcc <SERCOM6_3_Handler+0xc>)
    3dc4:	6958      	ldr	r0, [r3, #20]
    3dc6:	4b02      	ldr	r3, [pc, #8]	; (3dd0 <SERCOM6_3_Handler+0x10>)
    3dc8:	4798      	blx	r3
    3dca:	bd08      	pop	{r3, pc}
    3dcc:	2000047c 	.word	0x2000047c
    3dd0:	00003411 	.word	0x00003411

00003dd4 <_spi_m_sync_init>:
{
    3dd4:	b538      	push	{r3, r4, r5, lr}
    3dd6:	4605      	mov	r5, r0
    3dd8:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3dda:	4608      	mov	r0, r1
    3ddc:	4b55      	ldr	r3, [pc, #340]	; (3f34 <_spi_m_sync_init+0x160>)
    3dde:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3de0:	2803      	cmp	r0, #3
    3de2:	d006      	beq.n	3df2 <_spi_m_sync_init+0x1e>
    3de4:	2807      	cmp	r0, #7
    3de6:	bf08      	it	eq
    3de8:	2201      	moveq	r2, #1
    3dea:	d003      	beq.n	3df4 <_spi_m_sync_init+0x20>
		return ERR_INVALID_ARG;
    3dec:	f06f 000c 	mvn.w	r0, #12
}
    3df0:	bd38      	pop	{r3, r4, r5, pc}
		if (sercomspi_regs[i].n == n) {
    3df2:	2200      	movs	r2, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3df4:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3df6:	f013 0f01 	tst.w	r3, #1
    3dfa:	d122      	bne.n	3e42 <_spi_m_sync_init+0x6e>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3dfc:	4b4e      	ldr	r3, [pc, #312]	; (3f38 <_spi_m_sync_init+0x164>)
    3dfe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    3e02:	4413      	add	r3, r2
    3e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    3e08:	f003 011c 	and.w	r1, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3e0c:	69e3      	ldr	r3, [r4, #28]
    3e0e:	f013 0f03 	tst.w	r3, #3
    3e12:	d1fb      	bne.n	3e0c <_spi_m_sync_init+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3e14:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3e16:	f013 0f02 	tst.w	r3, #2
    3e1a:	d00b      	beq.n	3e34 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3e1c:	6823      	ldr	r3, [r4, #0]
    3e1e:	f023 0302 	bic.w	r3, r3, #2
    3e22:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3e24:	69e3      	ldr	r3, [r4, #28]
    3e26:	f013 0f03 	tst.w	r3, #3
    3e2a:	d1fb      	bne.n	3e24 <_spi_m_sync_init+0x50>
    3e2c:	69e3      	ldr	r3, [r4, #28]
    3e2e:	f013 0f02 	tst.w	r3, #2
    3e32:	d1fb      	bne.n	3e2c <_spi_m_sync_init+0x58>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3e34:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3e38:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3e3a:	69e3      	ldr	r3, [r4, #28]
    3e3c:	f013 0f03 	tst.w	r3, #3
    3e40:	d1fb      	bne.n	3e3a <_spi_m_sync_init+0x66>
    3e42:	69e3      	ldr	r3, [r4, #28]
    3e44:	f013 0f01 	tst.w	r3, #1
    3e48:	d1fb      	bne.n	3e42 <_spi_m_sync_init+0x6e>
	dev->prvt = hw;
    3e4a:	602c      	str	r4, [r5, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3e4c:	4b3a      	ldr	r3, [pc, #232]	; (3f38 <_spi_m_sync_init+0x164>)
    3e4e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    3e52:	4413      	add	r3, r2
    3e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    3e58:	f003 011c 	and.w	r1, r3, #28
    3e5c:	2908      	cmp	r1, #8
    3e5e:	d03e      	beq.n	3ede <_spi_m_sync_init+0x10a>
	hri_sercomspi_write_CTRLA_reg(
    3e60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3e64:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3e68:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3e6a:	69e3      	ldr	r3, [r4, #28]
    3e6c:	f013 0f03 	tst.w	r3, #3
    3e70:	d1fb      	bne.n	3e6a <_spi_m_sync_init+0x96>
	    (regs->ctrlb
    3e72:	4b31      	ldr	r3, [pc, #196]	; (3f38 <_spi_m_sync_init+0x164>)
    3e74:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    3e78:	4413      	add	r3, r2
    3e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	        | (SERCOM_SPI_CTRLB_RXEN));
    3e7e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    3e82:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    3e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3e8a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3e8c:	69e3      	ldr	r3, [r4, #28]
    3e8e:	f013 0f17 	tst.w	r3, #23
    3e92:	d1fb      	bne.n	3e8c <_spi_m_sync_init+0xb8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3e94:	4b28      	ldr	r3, [pc, #160]	; (3f38 <_spi_m_sync_init+0x164>)
    3e96:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    3e9a:	4413      	add	r3, r2
    3e9c:	f893 10bc 	ldrb.w	r1, [r3, #188]	; 0xbc
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3ea0:	7321      	strb	r1, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3ea2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3ea6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3eaa:	4b23      	ldr	r3, [pc, #140]	; (3f38 <_spi_m_sync_init+0x164>)
    3eac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    3eb0:	4413      	add	r3, r2
    3eb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    3eb6:	f003 0307 	and.w	r3, r3, #7
    3eba:	2b00      	cmp	r3, #0
    3ebc:	bf0c      	ite	eq
    3ebe:	2301      	moveq	r3, #1
    3ec0:	2302      	movne	r3, #2
    3ec2:	712b      	strb	r3, [r5, #4]
	dev->dummy_byte = regs->dummy_byte;
    3ec4:	4b1c      	ldr	r3, [pc, #112]	; (3f38 <_spi_m_sync_init+0x164>)
    3ec6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    3eca:	441a      	add	r2, r3
    3ecc:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
    3ed0:	f892 20bf 	ldrb.w	r2, [r2, #191]	; 0xbf
    3ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3ed8:	80eb      	strh	r3, [r5, #6]
	return ERR_NONE;
    3eda:	2000      	movs	r0, #0
    3edc:	bd38      	pop	{r3, r4, r5, pc}
	hri_sercomspi_write_CTRLA_reg(
    3ede:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3ee2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3ee6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ee8:	69e3      	ldr	r3, [r4, #28]
    3eea:	f013 0f03 	tst.w	r3, #3
    3eee:	d1fb      	bne.n	3ee8 <_spi_m_sync_init+0x114>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3ef0:	4b11      	ldr	r3, [pc, #68]	; (3f38 <_spi_m_sync_init+0x164>)
    3ef2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    3ef6:	4413      	add	r3, r2
    3ef8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3efc:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    3f00:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    3f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f08:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3f0c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3f0e:	69e3      	ldr	r3, [r4, #28]
    3f10:	f013 0f17 	tst.w	r3, #23
    3f14:	d1fb      	bne.n	3f0e <_spi_m_sync_init+0x13a>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3f16:	4b08      	ldr	r3, [pc, #32]	; (3f38 <_spi_m_sync_init+0x164>)
    3f18:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    3f1c:	4413      	add	r3, r2
    3f1e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3f22:	6261      	str	r1, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3f24:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3f28:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3f2c:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d1fc      	bne.n	3f2c <_spi_m_sync_init+0x158>
    3f32:	e7ba      	b.n	3eaa <_spi_m_sync_init+0xd6>
    3f34:	000033cd 	.word	0x000033cd
    3f38:	00007d08 	.word	0x00007d08

00003f3c <_spi_m_async_init>:
{
    3f3c:	b538      	push	{r3, r4, r5, lr}
    3f3e:	4604      	mov	r4, r0
    3f40:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    3f42:	4b15      	ldr	r3, [pc, #84]	; (3f98 <_spi_m_async_init+0x5c>)
    3f44:	4798      	blx	r3
	if (rc < 0) {
    3f46:	2800      	cmp	r0, #0
    3f48:	db24      	blt.n	3f94 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    3f4a:	4621      	mov	r1, r4
    3f4c:	4628      	mov	r0, r5
    3f4e:	4b13      	ldr	r3, [pc, #76]	; (3f9c <_spi_m_async_init+0x60>)
    3f50:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    3f52:	2300      	movs	r3, #0
    3f54:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    3f56:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    3f58:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    3f5a:	4628      	mov	r0, r5
    3f5c:	4b10      	ldr	r3, [pc, #64]	; (3fa0 <_spi_m_async_init+0x64>)
    3f5e:	4798      	blx	r3
    3f60:	1d01      	adds	r1, r0, #4
    3f62:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f64:	2401      	movs	r4, #1
    3f66:	f000 021f 	and.w	r2, r0, #31
    3f6a:	fa04 f202 	lsl.w	r2, r4, r2
    3f6e:	0943      	lsrs	r3, r0, #5
    3f70:	009b      	lsls	r3, r3, #2
    3f72:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3f76:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3f7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f82:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    3f8a:	3001      	adds	r0, #1
    3f8c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    3f8e:	4281      	cmp	r1, r0
    3f90:	d1e9      	bne.n	3f66 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    3f92:	2000      	movs	r0, #0
}
    3f94:	bd38      	pop	{r3, r4, r5, pc}
    3f96:	bf00      	nop
    3f98:	00003dd5 	.word	0x00003dd5
    3f9c:	00003481 	.word	0x00003481
    3fa0:	00003815 	.word	0x00003815

00003fa4 <_spi_m_async_enable_tx>:
	void *hw = dev->prvt;
    3fa4:	6803      	ldr	r3, [r0, #0]
	if (state) {
    3fa6:	b919      	cbnz	r1, 3fb0 <_spi_m_async_enable_tx+0xc>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    3fa8:	2201      	movs	r2, #1
    3faa:	751a      	strb	r2, [r3, #20]
}
    3fac:	2000      	movs	r0, #0
    3fae:	4770      	bx	lr
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    3fb0:	2201      	movs	r2, #1
    3fb2:	759a      	strb	r2, [r3, #22]
    3fb4:	e7fa      	b.n	3fac <_spi_m_async_enable_tx+0x8>

00003fb6 <_spi_m_async_enable_rx>:
	void *hw = dev->prvt;
    3fb6:	6803      	ldr	r3, [r0, #0]
	if (state) {
    3fb8:	b919      	cbnz	r1, 3fc2 <_spi_m_async_enable_rx+0xc>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    3fba:	2204      	movs	r2, #4
    3fbc:	751a      	strb	r2, [r3, #20]
}
    3fbe:	2000      	movs	r0, #0
    3fc0:	4770      	bx	lr
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    3fc2:	2204      	movs	r2, #4
    3fc4:	759a      	strb	r2, [r3, #22]
    3fc6:	e7fa      	b.n	3fbe <_spi_m_async_enable_rx+0x8>

00003fc8 <_spi_m_async_enable_tx_complete>:
	if (state) {
    3fc8:	b921      	cbnz	r1, 3fd4 <_spi_m_async_enable_tx_complete+0xc>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    3fca:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    3fcc:	2202      	movs	r2, #2
    3fce:	751a      	strb	r2, [r3, #20]
}
    3fd0:	2000      	movs	r0, #0
    3fd2:	4770      	bx	lr
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    3fd4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    3fd6:	2202      	movs	r2, #2
    3fd8:	759a      	strb	r2, [r3, #22]
    3fda:	e7f9      	b.n	3fd0 <_spi_m_async_enable_tx_complete+0x8>

00003fdc <_spi_m_async_write_one>:
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    3fdc:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    3fde:	6299      	str	r1, [r3, #40]	; 0x28
}
    3fe0:	2000      	movs	r0, #0
    3fe2:	4770      	bx	lr

00003fe4 <_spi_m_async_read_one>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    3fe4:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    3fe6:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    3fe8:	b280      	uxth	r0, r0
    3fea:	4770      	bx	lr

00003fec <_spi_m_async_register_callback>:
	p_ls[cb_type] = (func_t)func;
    3fec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    3ff0:	608a      	str	r2, [r1, #8]
}
    3ff2:	2000      	movs	r0, #0
    3ff4:	4770      	bx	lr
	...

00003ff8 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    3ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ffc:	4605      	mov	r5, r0
    3ffe:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    4000:	4608      	mov	r0, r1
    4002:	4b42      	ldr	r3, [pc, #264]	; (410c <_spi_m_dma_init+0x114>)
    4004:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    4006:	2803      	cmp	r0, #3
    4008:	d007      	beq.n	401a <_spi_m_dma_init+0x22>
    400a:	2807      	cmp	r0, #7
    400c:	bf08      	it	eq
    400e:	2201      	moveq	r2, #1
    4010:	d004      	beq.n	401c <_spi_m_dma_init+0x24>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    4012:	f06f 000c 	mvn.w	r0, #12
	dev->resource->back                 = dev;
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
	dev->resource->dma_cb.error         = _spi_dma_error_occured;

	return ERR_NONE;
}
    4016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sercomspi_regs[i].n == n) {
    401a:	2200      	movs	r2, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    401c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    401e:	f013 0f01 	tst.w	r3, #1
    4022:	d122      	bne.n	406a <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    4024:	4b3a      	ldr	r3, [pc, #232]	; (4110 <_spi_m_dma_init+0x118>)
    4026:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    402a:	4413      	add	r3, r2
    402c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    4030:	f003 011c 	and.w	r1, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4034:	69e3      	ldr	r3, [r4, #28]
    4036:	f013 0f03 	tst.w	r3, #3
    403a:	d1fb      	bne.n	4034 <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    403c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    403e:	f013 0f02 	tst.w	r3, #2
    4042:	d00b      	beq.n	405c <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4044:	6823      	ldr	r3, [r4, #0]
    4046:	f023 0302 	bic.w	r3, r3, #2
    404a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    404c:	69e3      	ldr	r3, [r4, #28]
    404e:	f013 0f03 	tst.w	r3, #3
    4052:	d1fb      	bne.n	404c <_spi_m_dma_init+0x54>
    4054:	69e3      	ldr	r3, [r4, #28]
    4056:	f013 0f02 	tst.w	r3, #2
    405a:	d1fb      	bne.n	4054 <_spi_m_dma_init+0x5c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    405c:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    4060:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4062:	69e3      	ldr	r3, [r4, #28]
    4064:	f013 0f03 	tst.w	r3, #3
    4068:	d1fb      	bne.n	4062 <_spi_m_dma_init+0x6a>
    406a:	69e3      	ldr	r3, [r4, #28]
    406c:	f013 0f01 	tst.w	r3, #1
    4070:	d1fb      	bne.n	406a <_spi_m_dma_init+0x72>
	dev->prvt = hw;
    4072:	602c      	str	r4, [r5, #0]
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    4074:	4b26      	ldr	r3, [pc, #152]	; (4110 <_spi_m_dma_init+0x118>)
    4076:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    407a:	4413      	add	r3, r2
    407c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	hri_sercomspi_write_CTRLA_reg(
    4080:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    4084:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    4088:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    408a:	69e3      	ldr	r3, [r4, #28]
    408c:	f013 0f03 	tst.w	r3, #3
    4090:	d1fb      	bne.n	408a <_spi_m_dma_init+0x92>
	    (regs->ctrlb
    4092:	4b1f      	ldr	r3, [pc, #124]	; (4110 <_spi_m_dma_init+0x118>)
    4094:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    4098:	4413      	add	r3, r2
    409a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	        | (SERCOM_SPI_CTRLB_RXEN));
    409e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    40a2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    40a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    40aa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    40ac:	69e3      	ldr	r3, [r4, #28]
    40ae:	f013 0f17 	tst.w	r3, #23
    40b2:	d1fb      	bne.n	40ac <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    40b4:	4b16      	ldr	r3, [pc, #88]	; (4110 <_spi_m_dma_init+0x118>)
    40b6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    40ba:	441a      	add	r2, r3
    40bc:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
	((Sercom *)hw)->SPI.BAUD.reg = data;
    40c0:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    40c2:	f892 30bd 	ldrb.w	r3, [r2, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    40c6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    40ca:	f105 0818 	add.w	r8, r5, #24
    40ce:	4620      	mov	r0, r4
    40d0:	4b10      	ldr	r3, [pc, #64]	; (4114 <_spi_m_dma_init+0x11c>)
    40d2:	4798      	blx	r3
    40d4:	4601      	mov	r1, r0
    40d6:	4640      	mov	r0, r8
    40d8:	4f0f      	ldr	r7, [pc, #60]	; (4118 <_spi_m_dma_init+0x120>)
    40da:	47b8      	blx	r7
	dev->resource->back                 = dev;
    40dc:	69ab      	ldr	r3, [r5, #24]
    40de:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    40e0:	69ab      	ldr	r3, [r5, #24]
    40e2:	4a0e      	ldr	r2, [pc, #56]	; (411c <_spi_m_dma_init+0x124>)
    40e4:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    40e6:	69ab      	ldr	r3, [r5, #24]
    40e8:	4e0d      	ldr	r6, [pc, #52]	; (4120 <_spi_m_dma_init+0x128>)
    40ea:	605e      	str	r6, [r3, #4]
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    40ec:	4620      	mov	r0, r4
    40ee:	4b0d      	ldr	r3, [pc, #52]	; (4124 <_spi_m_dma_init+0x12c>)
    40f0:	4798      	blx	r3
    40f2:	4601      	mov	r1, r0
    40f4:	4640      	mov	r0, r8
    40f6:	47b8      	blx	r7
	dev->resource->back                 = dev;
    40f8:	69ab      	ldr	r3, [r5, #24]
    40fa:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    40fc:	69ab      	ldr	r3, [r5, #24]
    40fe:	4a0a      	ldr	r2, [pc, #40]	; (4128 <_spi_m_dma_init+0x130>)
    4100:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    4102:	69ab      	ldr	r3, [r5, #24]
    4104:	605e      	str	r6, [r3, #4]
	return ERR_NONE;
    4106:	2000      	movs	r0, #0
    4108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    410c:	000033cd 	.word	0x000033cd
    4110:	00007d08 	.word	0x00007d08
    4114:	00003991 	.word	0x00003991
    4118:	00002ea5 	.word	0x00002ea5
    411c:	000039a5 	.word	0x000039a5
    4120:	000039bd 	.word	0x000039bd
    4124:	0000397d 	.word	0x0000397d
    4128:	000039b1 	.word	0x000039b1

0000412c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    412c:	b508      	push	{r3, lr}
	ASSERT(dev && dev->prvt);

	return _spi_sync_enable(dev->prvt);
    412e:	6800      	ldr	r0, [r0, #0]
    4130:	4b01      	ldr	r3, [pc, #4]	; (4138 <_spi_m_dma_enable+0xc>)
    4132:	4798      	blx	r3
}
    4134:	bd08      	pop	{r3, pc}
    4136:	bf00      	nop
    4138:	0000390d 	.word	0x0000390d

0000413c <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    413c:	b570      	push	{r4, r5, r6, lr}
    413e:	4605      	mov	r5, r0
    4140:	4614      	mov	r4, r2
	switch (type) {
    4142:	2901      	cmp	r1, #1
    4144:	d00e      	beq.n	4164 <_spi_m_dma_register_callback+0x28>
    4146:	b111      	cbz	r1, 414e <_spi_m_dma_register_callback+0x12>
    4148:	2902      	cmp	r1, #2
    414a:	d016      	beq.n	417a <_spi_m_dma_register_callback+0x3e>
    414c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    414e:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    4150:	6800      	ldr	r0, [r0, #0]
    4152:	4b13      	ldr	r3, [pc, #76]	; (41a0 <_spi_m_dma_register_callback+0x64>)
    4154:	4798      	blx	r3
    4156:	1c22      	adds	r2, r4, #0
    4158:	bf18      	it	ne
    415a:	2201      	movne	r2, #1
    415c:	2100      	movs	r1, #0
    415e:	4b11      	ldr	r3, [pc, #68]	; (41a4 <_spi_m_dma_register_callback+0x68>)
    4160:	4798      	blx	r3
		break;
    4162:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    4164:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    4166:	6800      	ldr	r0, [r0, #0]
    4168:	4b0f      	ldr	r3, [pc, #60]	; (41a8 <_spi_m_dma_register_callback+0x6c>)
    416a:	4798      	blx	r3
    416c:	1c22      	adds	r2, r4, #0
    416e:	bf18      	it	ne
    4170:	2201      	movne	r2, #1
    4172:	2100      	movs	r1, #0
    4174:	4b0b      	ldr	r3, [pc, #44]	; (41a4 <_spi_m_dma_register_callback+0x68>)
    4176:	4798      	blx	r3
		break;
    4178:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    417a:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    417c:	6800      	ldr	r0, [r0, #0]
    417e:	4b0a      	ldr	r3, [pc, #40]	; (41a8 <_spi_m_dma_register_callback+0x6c>)
    4180:	4798      	blx	r3
    4182:	3400      	adds	r4, #0
    4184:	bf18      	it	ne
    4186:	2401      	movne	r4, #1
    4188:	4622      	mov	r2, r4
    418a:	2101      	movs	r1, #1
    418c:	4e05      	ldr	r6, [pc, #20]	; (41a4 <_spi_m_dma_register_callback+0x68>)
    418e:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    4190:	6828      	ldr	r0, [r5, #0]
    4192:	4b03      	ldr	r3, [pc, #12]	; (41a0 <_spi_m_dma_register_callback+0x64>)
    4194:	4798      	blx	r3
    4196:	4622      	mov	r2, r4
    4198:	2101      	movs	r1, #1
    419a:	47b0      	blx	r6
    419c:	bd70      	pop	{r4, r5, r6, pc}
    419e:	bf00      	nop
    41a0:	0000397d 	.word	0x0000397d
    41a4:	00002d7d 	.word	0x00002d7d
    41a8:	00003991 	.word	0x00003991

000041ac <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    41ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41b0:	4607      	mov	r7, r0
    41b2:	468a      	mov	sl, r1
    41b4:	4690      	mov	r8, r2
    41b6:	4699      	mov	r9, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    41b8:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    41ba:	4620      	mov	r0, r4
    41bc:	4b39      	ldr	r3, [pc, #228]	; (42a4 <_spi_m_dma_transfer+0xf8>)
    41be:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    41c0:	2803      	cmp	r0, #3
    41c2:	d048      	beq.n	4256 <_spi_m_dma_transfer+0xaa>
    41c4:	2807      	cmp	r0, #7
    41c6:	bf08      	it	eq
    41c8:	2201      	moveq	r2, #1
    41ca:	d045      	beq.n	4258 <_spi_m_dma_transfer+0xac>
	return NULL;
    41cc:	f04f 0b00 	mov.w	fp, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    41d0:	4620      	mov	r0, r4
    41d2:	4b35      	ldr	r3, [pc, #212]	; (42a8 <_spi_m_dma_transfer+0xfc>)
    41d4:	4798      	blx	r3
    41d6:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    41d8:	4620      	mov	r0, r4
    41da:	4b34      	ldr	r3, [pc, #208]	; (42ac <_spi_m_dma_transfer+0x100>)
    41dc:	4798      	blx	r3
    41de:	4605      	mov	r5, r0

	if (rxbuf) {
    41e0:	f1b8 0f00 	cmp.w	r8, #0
    41e4:	d03d      	beq.n	4262 <_spi_m_dma_transfer+0xb6>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    41e6:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    41e8:	f013 0f04 	tst.w	r3, #4
    41ec:	d107      	bne.n	41fe <_spi_m_dma_transfer+0x52>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    41ee:	6863      	ldr	r3, [r4, #4]
    41f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    41f4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    41f6:	69e3      	ldr	r3, [r4, #28]
    41f8:	f013 0f17 	tst.w	r3, #23
    41fc:	d1fb      	bne.n	41f6 <_spi_m_dma_transfer+0x4a>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    41fe:	6839      	ldr	r1, [r7, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    4200:	3128      	adds	r1, #40	; 0x28
    4202:	4630      	mov	r0, r6
    4204:	4b2a      	ldr	r3, [pc, #168]	; (42b0 <_spi_m_dma_transfer+0x104>)
    4206:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    4208:	4641      	mov	r1, r8
    420a:	4630      	mov	r0, r6
    420c:	4b29      	ldr	r3, [pc, #164]	; (42b4 <_spi_m_dma_transfer+0x108>)
    420e:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    4210:	4649      	mov	r1, r9
    4212:	4630      	mov	r0, r6
    4214:	4b28      	ldr	r3, [pc, #160]	; (42b8 <_spi_m_dma_transfer+0x10c>)
    4216:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    4218:	2100      	movs	r1, #0
    421a:	4630      	mov	r0, r6
    421c:	4b27      	ldr	r3, [pc, #156]	; (42bc <_spi_m_dma_transfer+0x110>)
    421e:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    4220:	f1ba 0f00 	cmp.w	sl, #0
    4224:	d02a      	beq.n	427c <_spi_m_dma_transfer+0xd0>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    4226:	4651      	mov	r1, sl
    4228:	4628      	mov	r0, r5
    422a:	4b21      	ldr	r3, [pc, #132]	; (42b0 <_spi_m_dma_transfer+0x104>)
    422c:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    422e:	6839      	ldr	r1, [r7, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    4230:	3128      	adds	r1, #40	; 0x28
    4232:	4628      	mov	r0, r5
    4234:	4b1f      	ldr	r3, [pc, #124]	; (42b4 <_spi_m_dma_transfer+0x108>)
    4236:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    4238:	2101      	movs	r1, #1
    423a:	4628      	mov	r0, r5
    423c:	4b20      	ldr	r3, [pc, #128]	; (42c0 <_spi_m_dma_transfer+0x114>)
    423e:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    4240:	4649      	mov	r1, r9
    4242:	4628      	mov	r0, r5
    4244:	4b1c      	ldr	r3, [pc, #112]	; (42b8 <_spi_m_dma_transfer+0x10c>)
    4246:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    4248:	2100      	movs	r1, #0
    424a:	4628      	mov	r0, r5
    424c:	4b1b      	ldr	r3, [pc, #108]	; (42bc <_spi_m_dma_transfer+0x110>)
    424e:	4798      	blx	r3

	return ERR_NONE;
}
    4250:	2000      	movs	r0, #0
    4252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    4256:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    4258:	4b1a      	ldr	r3, [pc, #104]	; (42c4 <_spi_m_dma_transfer+0x118>)
    425a:	eb03 1b02 	add.w	fp, r3, r2, lsl #4
    425e:	4493      	add	fp, r2
    4260:	e7b6      	b.n	41d0 <_spi_m_dma_transfer+0x24>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    4262:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    4264:	f013 0f04 	tst.w	r3, #4
    4268:	d1da      	bne.n	4220 <_spi_m_dma_transfer+0x74>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    426a:	6863      	ldr	r3, [r4, #4]
    426c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4270:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4272:	69e3      	ldr	r3, [r4, #28]
    4274:	f013 0f17 	tst.w	r3, #23
    4278:	d1fb      	bne.n	4272 <_spi_m_dma_transfer+0xc6>
    427a:	e7d1      	b.n	4220 <_spi_m_dma_transfer+0x74>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    427c:	f10b 010e 	add.w	r1, fp, #14
    4280:	4628      	mov	r0, r5
    4282:	4b0b      	ldr	r3, [pc, #44]	; (42b0 <_spi_m_dma_transfer+0x104>)
    4284:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    4286:	6839      	ldr	r1, [r7, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    4288:	3128      	adds	r1, #40	; 0x28
    428a:	4628      	mov	r0, r5
    428c:	4b09      	ldr	r3, [pc, #36]	; (42b4 <_spi_m_dma_transfer+0x108>)
    428e:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    4290:	2100      	movs	r1, #0
    4292:	4628      	mov	r0, r5
    4294:	4b0a      	ldr	r3, [pc, #40]	; (42c0 <_spi_m_dma_transfer+0x114>)
    4296:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    4298:	4649      	mov	r1, r9
    429a:	4628      	mov	r0, r5
    429c:	4b06      	ldr	r3, [pc, #24]	; (42b8 <_spi_m_dma_transfer+0x10c>)
    429e:	4798      	blx	r3
    42a0:	e7d2      	b.n	4248 <_spi_m_dma_transfer+0x9c>
    42a2:	bf00      	nop
    42a4:	000033cd 	.word	0x000033cd
    42a8:	00003991 	.word	0x00003991
    42ac:	0000397d 	.word	0x0000397d
    42b0:	00002de1 	.word	0x00002de1
    42b4:	00002dd1 	.word	0x00002dd1
    42b8:	00002e0d 	.word	0x00002e0d
    42bc:	00002e65 	.word	0x00002e65
    42c0:	00002df1 	.word	0x00002df1
    42c4:	00007db8 	.word	0x00007db8

000042c8 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    42c8:	4b03      	ldr	r3, [pc, #12]	; (42d8 <_delay_init+0x10>)
    42ca:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    42ce:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    42d0:	2205      	movs	r2, #5
    42d2:	601a      	str	r2, [r3, #0]
    42d4:	4770      	bx	lr
    42d6:	bf00      	nop
    42d8:	e000e010 	.word	0xe000e010

000042dc <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    42dc:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    42de:	b303      	cbz	r3, 4322 <_delay_cycles+0x46>
{
    42e0:	b430      	push	{r4, r5}
    42e2:	1e5d      	subs	r5, r3, #1
    42e4:	b2ed      	uxtb	r5, r5
	while (n--) {
    42e6:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    42e8:	4a12      	ldr	r2, [pc, #72]	; (4334 <_delay_cycles+0x58>)
    42ea:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    42ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    42f0:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    42f2:	6813      	ldr	r3, [r2, #0]
    42f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    42f8:	d0fb      	beq.n	42f2 <_delay_cycles+0x16>
	while (n--) {
    42fa:	3801      	subs	r0, #1
    42fc:	b2c0      	uxtb	r0, r0
    42fe:	28ff      	cmp	r0, #255	; 0xff
    4300:	d1f5      	bne.n	42ee <_delay_cycles+0x12>
    4302:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    4306:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    430a:	3101      	adds	r1, #1
    430c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    430e:	4b09      	ldr	r3, [pc, #36]	; (4334 <_delay_cycles+0x58>)
    4310:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    4312:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4314:	461a      	mov	r2, r3
    4316:	6813      	ldr	r3, [r2, #0]
    4318:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    431c:	d0fb      	beq.n	4316 <_delay_cycles+0x3a>
		;
}
    431e:	bc30      	pop	{r4, r5}
    4320:	4770      	bx	lr
	SysTick->LOAD = buf;
    4322:	4b04      	ldr	r3, [pc, #16]	; (4334 <_delay_cycles+0x58>)
    4324:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    4326:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4328:	461a      	mov	r2, r3
    432a:	6813      	ldr	r3, [r2, #0]
    432c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4330:	d0fb      	beq.n	432a <_delay_cycles+0x4e>
    4332:	4770      	bx	lr
    4334:	e000e010 	.word	0xe000e010

00004338 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    4338:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    433a:	6813      	ldr	r3, [r2, #0]
    433c:	f043 0302 	orr.w	r3, r3, #2
    4340:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4342:	6913      	ldr	r3, [r2, #16]
    4344:	f013 0f03 	tst.w	r3, #3
    4348:	d1fb      	bne.n	4342 <_tc_timer_start+0xa>
}
    434a:	4770      	bx	lr

0000434c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    434c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    434e:	6813      	ldr	r3, [r2, #0]
    4350:	f023 0302 	bic.w	r3, r3, #2
    4354:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4356:	6913      	ldr	r3, [r2, #16]
    4358:	f013 0f03 	tst.w	r3, #3
    435c:	d1fb      	bne.n	4356 <_tc_timer_stop+0xa>
}
    435e:	4770      	bx	lr

00004360 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    4360:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4362:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4364:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4368:	2a02      	cmp	r2, #2
    436a:	d00a      	beq.n	4382 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    436c:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    436e:	f012 0f0c 	tst.w	r2, #12
    4372:	d10c      	bne.n	438e <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    4374:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4376:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4378:	691a      	ldr	r2, [r3, #16]
    437a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    437e:	d1fb      	bne.n	4378 <_tc_timer_set_period+0x18>
    4380:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4382:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4384:	691a      	ldr	r2, [r3, #16]
    4386:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    438a:	d1fb      	bne.n	4384 <_tc_timer_set_period+0x24>
    438c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    438e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4390:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4394:	2a01      	cmp	r2, #1
    4396:	d000      	beq.n	439a <_tc_timer_set_period+0x3a>
    4398:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    439a:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    439c:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    439e:	691a      	ldr	r2, [r3, #16]
    43a0:	f012 0f20 	tst.w	r2, #32
    43a4:	d1fb      	bne.n	439e <_tc_timer_set_period+0x3e>
    43a6:	e7f7      	b.n	4398 <_tc_timer_set_period+0x38>

000043a8 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    43a8:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    43aa:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    43ac:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    43b0:	2a02      	cmp	r2, #2
    43b2:	d00a      	beq.n	43ca <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    43b4:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    43b6:	f012 0f0c 	tst.w	r2, #12
    43ba:	d10c      	bne.n	43d6 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43bc:	691a      	ldr	r2, [r3, #16]
    43be:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    43c2:	d1fb      	bne.n	43bc <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    43c4:	8b98      	ldrh	r0, [r3, #28]
    43c6:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    43c8:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43ca:	691a      	ldr	r2, [r3, #16]
    43cc:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    43d0:	d1fb      	bne.n	43ca <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    43d2:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    43d4:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    43d6:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    43d8:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    43dc:	2a01      	cmp	r2, #1
    43de:	d001      	beq.n	43e4 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    43e0:	2000      	movs	r0, #0
}
    43e2:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43e4:	691a      	ldr	r2, [r3, #16]
    43e6:	f012 0f20 	tst.w	r2, #32
    43ea:	d1fb      	bne.n	43e4 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    43ec:	7ed8      	ldrb	r0, [r3, #27]
    43ee:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    43f0:	4770      	bx	lr

000043f2 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    43f2:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43f4:	6913      	ldr	r3, [r2, #16]
    43f6:	f013 0f03 	tst.w	r3, #3
    43fa:	d1fb      	bne.n	43f4 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    43fc:	6810      	ldr	r0, [r2, #0]
}
    43fe:	f3c0 0040 	ubfx	r0, r0, #1, #1
    4402:	4770      	bx	lr

00004404 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    4404:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    4406:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4408:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    440a:	f012 0f01 	tst.w	r2, #1
    440e:	d100      	bne.n	4412 <tc_interrupt_handler+0xe>
    4410:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    4412:	2201      	movs	r2, #1
    4414:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    4416:	6803      	ldr	r3, [r0, #0]
    4418:	4798      	blx	r3
	}
}
    441a:	e7f9      	b.n	4410 <tc_interrupt_handler+0xc>

0000441c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    441c:	b470      	push	{r4, r5, r6}
    441e:	b089      	sub	sp, #36	; 0x24
    4420:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    4422:	466c      	mov	r4, sp
    4424:	4d16      	ldr	r5, [pc, #88]	; (4480 <get_tc_index+0x64>)
    4426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    442a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    442e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    4432:	9b00      	ldr	r3, [sp, #0]
    4434:	42b3      	cmp	r3, r6
    4436:	d00c      	beq.n	4452 <get_tc_index+0x36>
    4438:	4630      	mov	r0, r6
    443a:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    443c:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    443e:	f852 1b04 	ldr.w	r1, [r2], #4
    4442:	4281      	cmp	r1, r0
    4444:	d006      	beq.n	4454 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4446:	3301      	adds	r3, #1
    4448:	2b08      	cmp	r3, #8
    444a:	d1f8      	bne.n	443e <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    444c:	2000      	movs	r0, #0
			return i;
    444e:	b240      	sxtb	r0, r0
    4450:	e00d      	b.n	446e <get_tc_index+0x52>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4452:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    4454:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    4458:	d010      	beq.n	447c <get_tc_index+0x60>
    445a:	2b01      	cmp	r3, #1
    445c:	d00a      	beq.n	4474 <get_tc_index+0x58>
    445e:	2b02      	cmp	r3, #2
    4460:	d00a      	beq.n	4478 <get_tc_index+0x5c>
    4462:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4464:	bf08      	it	eq
    4466:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    4468:	d0f1      	beq.n	444e <get_tc_index+0x32>
	return -1;
    446a:	f04f 30ff 	mov.w	r0, #4294967295
}
    446e:	b009      	add	sp, #36	; 0x24
    4470:	bc70      	pop	{r4, r5, r6}
    4472:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4474:	2001      	movs	r0, #1
    4476:	e7ea      	b.n	444e <get_tc_index+0x32>
    4478:	2002      	movs	r0, #2
    447a:	e7e8      	b.n	444e <get_tc_index+0x32>
    447c:	2000      	movs	r0, #0
    447e:	e7e6      	b.n	444e <get_tc_index+0x32>
    4480:	00007ddc 	.word	0x00007ddc

00004484 <_tc_timer_deinit>:
{
    4484:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    4486:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    4488:	4620      	mov	r0, r4
    448a:	4b15      	ldr	r3, [pc, #84]	; (44e0 <_tc_timer_deinit+0x5c>)
    448c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    448e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4492:	4b14      	ldr	r3, [pc, #80]	; (44e4 <_tc_timer_deinit+0x60>)
    4494:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4498:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    449c:	2b00      	cmp	r3, #0
    449e:	db0d      	blt.n	44bc <_tc_timer_deinit+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    44a0:	095a      	lsrs	r2, r3, #5
    44a2:	f003 031f 	and.w	r3, r3, #31
    44a6:	2101      	movs	r1, #1
    44a8:	fa01 f303 	lsl.w	r3, r1, r3
    44ac:	3220      	adds	r2, #32
    44ae:	490e      	ldr	r1, [pc, #56]	; (44e8 <_tc_timer_deinit+0x64>)
    44b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    44b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    44b8:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    44bc:	6823      	ldr	r3, [r4, #0]
    44be:	f023 0302 	bic.w	r3, r3, #2
    44c2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    44c4:	6923      	ldr	r3, [r4, #16]
    44c6:	f013 0f03 	tst.w	r3, #3
    44ca:	d1fb      	bne.n	44c4 <_tc_timer_deinit+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    44cc:	6823      	ldr	r3, [r4, #0]
    44ce:	f043 0301 	orr.w	r3, r3, #1
    44d2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    44d4:	6923      	ldr	r3, [r4, #16]
    44d6:	f013 0f01 	tst.w	r3, #1
    44da:	d1fb      	bne.n	44d4 <_tc_timer_deinit+0x50>
}
    44dc:	bd10      	pop	{r4, pc}
    44de:	bf00      	nop
    44e0:	0000441d 	.word	0x0000441d
    44e4:	00007ddc 	.word	0x00007ddc
    44e8:	e000e100 	.word	0xe000e100

000044ec <_tc_timer_init>:
{
    44ec:	b538      	push	{r3, r4, r5, lr}
    44ee:	4605      	mov	r5, r0
    44f0:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    44f2:	4608      	mov	r0, r1
    44f4:	4b6e      	ldr	r3, [pc, #440]	; (46b0 <_tc_timer_init+0x1c4>)
    44f6:	4798      	blx	r3
	device->hw = hw;
    44f8:	60ec      	str	r4, [r5, #12]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    44fa:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    44fc:	f013 0f01 	tst.w	r3, #1
    4500:	d119      	bne.n	4536 <_tc_timer_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4502:	6923      	ldr	r3, [r4, #16]
    4504:	f013 0f03 	tst.w	r3, #3
    4508:	d1fb      	bne.n	4502 <_tc_timer_init+0x16>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    450a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    450c:	f013 0f02 	tst.w	r3, #2
    4510:	d00b      	beq.n	452a <_tc_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4512:	6823      	ldr	r3, [r4, #0]
    4514:	f023 0302 	bic.w	r3, r3, #2
    4518:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    451a:	6923      	ldr	r3, [r4, #16]
    451c:	f013 0f03 	tst.w	r3, #3
    4520:	d1fb      	bne.n	451a <_tc_timer_init+0x2e>
    4522:	6923      	ldr	r3, [r4, #16]
    4524:	f013 0f02 	tst.w	r3, #2
    4528:	d1fb      	bne.n	4522 <_tc_timer_init+0x36>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    452a:	2301      	movs	r3, #1
    452c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    452e:	6923      	ldr	r3, [r4, #16]
    4530:	f013 0f03 	tst.w	r3, #3
    4534:	d1fb      	bne.n	452e <_tc_timer_init+0x42>
    4536:	6923      	ldr	r3, [r4, #16]
    4538:	f013 0f01 	tst.w	r3, #1
    453c:	d1fb      	bne.n	4536 <_tc_timer_init+0x4a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    453e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4542:	4a5c      	ldr	r2, [pc, #368]	; (46b4 <_tc_timer_init+0x1c8>)
    4544:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    454a:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    454c:	6923      	ldr	r3, [r4, #16]
    454e:	f013 0f03 	tst.w	r3, #3
    4552:	d1fb      	bne.n	454c <_tc_timer_init+0x60>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4554:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4558:	4956      	ldr	r1, [pc, #344]	; (46b4 <_tc_timer_init+0x1c8>)
    455a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    455e:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    4562:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    4564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    4566:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    4568:	2301      	movs	r3, #1
    456a:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    456c:	f002 020c 	and.w	r2, r2, #12
    4570:	2a08      	cmp	r2, #8
    4572:	d056      	beq.n	4622 <_tc_timer_init+0x136>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4574:	2a00      	cmp	r2, #0
    4576:	d16b      	bne.n	4650 <_tc_timer_init+0x164>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    4578:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    457c:	4a4d      	ldr	r2, [pc, #308]	; (46b4 <_tc_timer_init+0x1c8>)
    457e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4582:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4584:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4586:	6923      	ldr	r3, [r4, #16]
    4588:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    458c:	d1fb      	bne.n	4586 <_tc_timer_init+0x9a>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    458e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4592:	4a48      	ldr	r2, [pc, #288]	; (46b4 <_tc_timer_init+0x1c8>)
    4594:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4598:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    459a:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    459c:	6923      	ldr	r3, [r4, #16]
    459e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    45a2:	d1fb      	bne.n	459c <_tc_timer_init+0xb0>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    45a4:	2301      	movs	r3, #1
    45a6:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    45a8:	4b43      	ldr	r3, [pc, #268]	; (46b8 <_tc_timer_init+0x1cc>)
    45aa:	429c      	cmp	r4, r3
    45ac:	d077      	beq.n	469e <_tc_timer_init+0x1b2>
	if (hw == TC1) {
    45ae:	4b43      	ldr	r3, [pc, #268]	; (46bc <_tc_timer_init+0x1d0>)
    45b0:	429c      	cmp	r4, r3
    45b2:	d077      	beq.n	46a4 <_tc_timer_init+0x1b8>
	if (hw == TC2) {
    45b4:	4b42      	ldr	r3, [pc, #264]	; (46c0 <_tc_timer_init+0x1d4>)
    45b6:	429c      	cmp	r4, r3
    45b8:	d077      	beq.n	46aa <_tc_timer_init+0x1be>
	if (hw == TC3) {
    45ba:	4b42      	ldr	r3, [pc, #264]	; (46c4 <_tc_timer_init+0x1d8>)
    45bc:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    45be:	bf04      	itt	eq
    45c0:	4b41      	ldreq	r3, [pc, #260]	; (46c8 <_tc_timer_init+0x1dc>)
    45c2:	60dd      	streq	r5, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    45c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    45c8:	4a3a      	ldr	r2, [pc, #232]	; (46b4 <_tc_timer_init+0x1c8>)
    45ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    45ce:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    45d2:	2b00      	cmp	r3, #0
    45d4:	db23      	blt.n	461e <_tc_timer_init+0x132>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45d6:	095a      	lsrs	r2, r3, #5
    45d8:	f003 031f 	and.w	r3, r3, #31
    45dc:	2101      	movs	r1, #1
    45de:	fa01 f303 	lsl.w	r3, r1, r3
    45e2:	3220      	adds	r2, #32
    45e4:	4939      	ldr	r1, [pc, #228]	; (46cc <_tc_timer_init+0x1e0>)
    45e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    45ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    45ee:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    45f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    45f6:	4b2f      	ldr	r3, [pc, #188]	; (46b4 <_tc_timer_init+0x1c8>)
    45f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    45fc:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4600:	2b00      	cmp	r3, #0
    4602:	db0c      	blt.n	461e <_tc_timer_init+0x132>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4604:	0959      	lsrs	r1, r3, #5
    4606:	f003 031f 	and.w	r3, r3, #31
    460a:	2201      	movs	r2, #1
    460c:	fa02 f303 	lsl.w	r3, r2, r3
    4610:	4a2e      	ldr	r2, [pc, #184]	; (46cc <_tc_timer_init+0x1e0>)
    4612:	f101 0060 	add.w	r0, r1, #96	; 0x60
    4616:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    461a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    461e:	2000      	movs	r0, #0
    4620:	bd38      	pop	{r3, r4, r5, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4622:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4626:	4a23      	ldr	r2, [pc, #140]	; (46b4 <_tc_timer_init+0x1c8>)
    4628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    462e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4630:	6923      	ldr	r3, [r4, #16]
    4632:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4636:	d1fb      	bne.n	4630 <_tc_timer_init+0x144>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    4638:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    463c:	4a1d      	ldr	r2, [pc, #116]	; (46b4 <_tc_timer_init+0x1c8>)
    463e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4644:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4646:	6923      	ldr	r3, [r4, #16]
    4648:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    464c:	d1fb      	bne.n	4646 <_tc_timer_init+0x15a>
    464e:	e7a9      	b.n	45a4 <_tc_timer_init+0xb8>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    4650:	2a04      	cmp	r2, #4
    4652:	d1a7      	bne.n	45a4 <_tc_timer_init+0xb8>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    4654:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4658:	4a16      	ldr	r2, [pc, #88]	; (46b4 <_tc_timer_init+0x1c8>)
    465a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    465e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    4662:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4664:	6923      	ldr	r3, [r4, #16]
    4666:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    466a:	d1fb      	bne.n	4664 <_tc_timer_init+0x178>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    466c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4670:	4a10      	ldr	r2, [pc, #64]	; (46b4 <_tc_timer_init+0x1c8>)
    4672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    467a:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    467c:	6923      	ldr	r3, [r4, #16]
    467e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4682:	d1fb      	bne.n	467c <_tc_timer_init+0x190>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    4684:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4688:	4a0a      	ldr	r2, [pc, #40]	; (46b4 <_tc_timer_init+0x1c8>)
    468a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    468e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    4692:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4694:	6923      	ldr	r3, [r4, #16]
    4696:	f013 0f20 	tst.w	r3, #32
    469a:	d1fb      	bne.n	4694 <_tc_timer_init+0x1a8>
    469c:	e782      	b.n	45a4 <_tc_timer_init+0xb8>
		_tc0_dev = (struct _timer_device *)dev;
    469e:	4b0a      	ldr	r3, [pc, #40]	; (46c8 <_tc_timer_init+0x1dc>)
    46a0:	601d      	str	r5, [r3, #0]
    46a2:	e78a      	b.n	45ba <_tc_timer_init+0xce>
		_tc1_dev = (struct _timer_device *)dev;
    46a4:	4b08      	ldr	r3, [pc, #32]	; (46c8 <_tc_timer_init+0x1dc>)
    46a6:	605d      	str	r5, [r3, #4]
    46a8:	e78c      	b.n	45c4 <_tc_timer_init+0xd8>
		_tc2_dev = (struct _timer_device *)dev;
    46aa:	4b07      	ldr	r3, [pc, #28]	; (46c8 <_tc_timer_init+0x1dc>)
    46ac:	609d      	str	r5, [r3, #8]
    46ae:	e789      	b.n	45c4 <_tc_timer_init+0xd8>
    46b0:	0000441d 	.word	0x0000441d
    46b4:	00007ddc 	.word	0x00007ddc
    46b8:	40003800 	.word	0x40003800
    46bc:	40003c00 	.word	0x40003c00
    46c0:	4101a000 	.word	0x4101a000
    46c4:	4101c000 	.word	0x4101c000
    46c8:	20000494 	.word	0x20000494
    46cc:	e000e100 	.word	0xe000e100

000046d0 <_tc_timer_set_irq>:
{
    46d0:	b508      	push	{r3, lr}
	int8_t      i  = get_tc_index(hw);
    46d2:	68c0      	ldr	r0, [r0, #12]
    46d4:	4b05      	ldr	r3, [pc, #20]	; (46ec <_tc_timer_set_irq+0x1c>)
    46d6:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    46d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    46dc:	4b04      	ldr	r3, [pc, #16]	; (46f0 <_tc_timer_set_irq+0x20>)
    46de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    46e2:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    46e6:	4b03      	ldr	r3, [pc, #12]	; (46f4 <_tc_timer_set_irq+0x24>)
    46e8:	4798      	blx	r3
    46ea:	bd08      	pop	{r3, pc}
    46ec:	0000441d 	.word	0x0000441d
    46f0:	00007ddc 	.word	0x00007ddc
    46f4:	00002ba5 	.word	0x00002ba5

000046f8 <_tc_get_timer>:
}
    46f8:	4800      	ldr	r0, [pc, #0]	; (46fc <_tc_get_timer+0x4>)
    46fa:	4770      	bx	lr
    46fc:	20000020 	.word	0x20000020

00004700 <TC0_Handler>:
{
    4700:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    4702:	4b02      	ldr	r3, [pc, #8]	; (470c <TC0_Handler+0xc>)
    4704:	6818      	ldr	r0, [r3, #0]
    4706:	4b02      	ldr	r3, [pc, #8]	; (4710 <TC0_Handler+0x10>)
    4708:	4798      	blx	r3
    470a:	bd08      	pop	{r3, pc}
    470c:	20000494 	.word	0x20000494
    4710:	00004405 	.word	0x00004405

00004714 <TC1_Handler>:
{
    4714:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    4716:	4b02      	ldr	r3, [pc, #8]	; (4720 <TC1_Handler+0xc>)
    4718:	6858      	ldr	r0, [r3, #4]
    471a:	4b02      	ldr	r3, [pc, #8]	; (4724 <TC1_Handler+0x10>)
    471c:	4798      	blx	r3
    471e:	bd08      	pop	{r3, pc}
    4720:	20000494 	.word	0x20000494
    4724:	00004405 	.word	0x00004405

00004728 <TC2_Handler>:
{
    4728:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    472a:	4b02      	ldr	r3, [pc, #8]	; (4734 <TC2_Handler+0xc>)
    472c:	6898      	ldr	r0, [r3, #8]
    472e:	4b02      	ldr	r3, [pc, #8]	; (4738 <TC2_Handler+0x10>)
    4730:	4798      	blx	r3
    4732:	bd08      	pop	{r3, pc}
    4734:	20000494 	.word	0x20000494
    4738:	00004405 	.word	0x00004405

0000473c <TC3_Handler>:
{
    473c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    473e:	4b02      	ldr	r3, [pc, #8]	; (4748 <TC3_Handler+0xc>)
    4740:	68d8      	ldr	r0, [r3, #12]
    4742:	4b02      	ldr	r3, [pc, #8]	; (474c <TC3_Handler+0x10>)
    4744:	4798      	blx	r3
    4746:	bd08      	pop	{r3, pc}
    4748:	20000494 	.word	0x20000494
    474c:	00004405 	.word	0x00004405

00004750 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    4750:	2000      	movs	r0, #0
    4752:	4770      	bx	lr

00004754 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    4754:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    4756:	7c83      	ldrb	r3, [r0, #18]
    4758:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    475c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    475e:	f002 0107 	and.w	r1, r2, #7
    4762:	2901      	cmp	r1, #1
    4764:	d00b      	beq.n	477e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4766:	015a      	lsls	r2, r3, #5
    4768:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    476c:	2110      	movs	r1, #16
    476e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4772:	015b      	lsls	r3, r3, #5
    4774:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4778:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    477c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    477e:	f012 0f40 	tst.w	r2, #64	; 0x40
    4782:	d00c      	beq.n	479e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    4784:	7cc2      	ldrb	r2, [r0, #19]
    4786:	f36f 1286 	bfc	r2, #6, #1
    478a:	74c2      	strb	r2, [r0, #19]
    478c:	015a      	lsls	r2, r3, #5
    478e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4792:	2180      	movs	r1, #128	; 0x80
    4794:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4798:	2140      	movs	r1, #64	; 0x40
    479a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    479e:	7cc2      	ldrb	r2, [r0, #19]
    47a0:	f36f 02c3 	bfc	r2, #3, #1
    47a4:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    47a6:	490a      	ldr	r1, [pc, #40]	; (47d0 <_usb_d_dev_handle_setup+0x7c>)
    47a8:	015a      	lsls	r2, r3, #5
    47aa:	188c      	adds	r4, r1, r2
    47ac:	2500      	movs	r5, #0
    47ae:	72a5      	strb	r5, [r4, #10]
    47b0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    47b2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    47b6:	246f      	movs	r4, #111	; 0x6f
    47b8:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    47bc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    47c0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    47c4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    47c8:	7c80      	ldrb	r0, [r0, #18]
    47ca:	4798      	blx	r3
    47cc:	bd38      	pop	{r3, r4, r5, pc}
    47ce:	bf00      	nop
    47d0:	200004a4 	.word	0x200004a4

000047d4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    47d4:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    47d6:	2320      	movs	r3, #32
    47d8:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    47dc:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    47de:	7c83      	ldrb	r3, [r0, #18]
    47e0:	f003 030f 	and.w	r3, r3, #15
    47e4:	015b      	lsls	r3, r3, #5
    47e6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    47ea:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    47ee:	4b04      	ldr	r3, [pc, #16]	; (4800 <_usb_d_dev_handle_stall+0x2c>)
    47f0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    47f4:	6882      	ldr	r2, [r0, #8]
    47f6:	2101      	movs	r1, #1
    47f8:	7c80      	ldrb	r0, [r0, #18]
    47fa:	4798      	blx	r3
    47fc:	bd08      	pop	{r3, pc}
    47fe:	bf00      	nop
    4800:	200004a4 	.word	0x200004a4

00004804 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    4804:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4806:	7c84      	ldrb	r4, [r0, #18]
    4808:	2cff      	cmp	r4, #255	; 0xff
    480a:	d003      	beq.n	4814 <_usb_d_dev_trans_done+0x10>
    480c:	7cc3      	ldrb	r3, [r0, #19]
    480e:	f013 0f40 	tst.w	r3, #64	; 0x40
    4812:	d100      	bne.n	4816 <_usb_d_dev_trans_done+0x12>
    4814:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    4816:	7cc2      	ldrb	r2, [r0, #19]
    4818:	f36f 1286 	bfc	r2, #6, #1
    481c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    481e:	4a03      	ldr	r2, [pc, #12]	; (482c <_usb_d_dev_trans_done+0x28>)
    4820:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    4824:	6882      	ldr	r2, [r0, #8]
    4826:	4620      	mov	r0, r4
    4828:	47a8      	blx	r5
    482a:	e7f3      	b.n	4814 <_usb_d_dev_trans_done+0x10>
    482c:	200004a4 	.word	0x200004a4

00004830 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    4830:	b530      	push	{r4, r5, lr}
    4832:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4834:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    4836:	2425      	movs	r4, #37	; 0x25
    4838:	f88d 4004 	strb.w	r4, [sp, #4]
    483c:	244a      	movs	r4, #74	; 0x4a
    483e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4842:	2bff      	cmp	r3, #255	; 0xff
    4844:	d01e      	beq.n	4884 <_usb_d_dev_trans_stop+0x54>
    4846:	7cc4      	ldrb	r4, [r0, #19]
    4848:	f014 0f40 	tst.w	r4, #64	; 0x40
    484c:	d01a      	beq.n	4884 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    484e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    4852:	b1c9      	cbz	r1, 4888 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4854:	0163      	lsls	r3, r4, #5
    4856:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    485a:	2580      	movs	r5, #128	; 0x80
    485c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    4860:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    4862:	a902      	add	r1, sp, #8
    4864:	440b      	add	r3, r1
    4866:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    486a:	0163      	lsls	r3, r4, #5
    486c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4870:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4874:	0163      	lsls	r3, r4, #5
    4876:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    487a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    487e:	4611      	mov	r1, r2
    4880:	4b05      	ldr	r3, [pc, #20]	; (4898 <_usb_d_dev_trans_stop+0x68>)
    4882:	4798      	blx	r3
}
    4884:	b003      	add	sp, #12
    4886:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4888:	0163      	lsls	r3, r4, #5
    488a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    488e:	2540      	movs	r5, #64	; 0x40
    4890:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    4894:	e7e4      	b.n	4860 <_usb_d_dev_trans_stop+0x30>
    4896:	bf00      	nop
    4898:	00004805 	.word	0x00004805

0000489c <_usb_d_dev_handle_trfail>:
{
    489c:	b530      	push	{r4, r5, lr}
    489e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    48a0:	7c83      	ldrb	r3, [r0, #18]
    48a2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    48a6:	2204      	movs	r2, #4
    48a8:	f88d 2004 	strb.w	r2, [sp, #4]
    48ac:	2208      	movs	r2, #8
    48ae:	f88d 2005 	strb.w	r2, [sp, #5]
    48b2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    48b4:	460c      	mov	r4, r1
    48b6:	b391      	cbz	r1, 491e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    48b8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    48bc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    48c0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    48c4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    48c8:	4a32      	ldr	r2, [pc, #200]	; (4994 <_usb_d_dev_handle_trfail+0xf8>)
    48ca:	440a      	add	r2, r1
    48cc:	7a91      	ldrb	r1, [r2, #10]
    48ce:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    48d0:	2d02      	cmp	r5, #2
    48d2:	d02c      	beq.n	492e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    48d4:	f011 0f02 	tst.w	r1, #2
    48d8:	d045      	beq.n	4966 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    48da:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    48dc:	7a91      	ldrb	r1, [r2, #10]
    48de:	f36f 0141 	bfc	r1, #1, #1
    48e2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    48e4:	aa02      	add	r2, sp, #8
    48e6:	4422      	add	r2, r4
    48e8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    48ec:	015a      	lsls	r2, r3, #5
    48ee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    48f2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    48f6:	015b      	lsls	r3, r3, #5
    48f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    48fc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    4900:	f005 0307 	and.w	r3, r5, #7
    4904:	2b01      	cmp	r3, #1
    4906:	d143      	bne.n	4990 <_usb_d_dev_handle_trfail+0xf4>
    4908:	7cc3      	ldrb	r3, [r0, #19]
    490a:	f013 0f40 	tst.w	r3, #64	; 0x40
    490e:	d03f      	beq.n	4990 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    4910:	09d9      	lsrs	r1, r3, #7
    4912:	428c      	cmp	r4, r1
    4914:	d03c      	beq.n	4990 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    4916:	2200      	movs	r2, #0
    4918:	4b1f      	ldr	r3, [pc, #124]	; (4998 <_usb_d_dev_handle_trfail+0xfc>)
    491a:	4798      	blx	r3
    491c:	e038      	b.n	4990 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    491e:	0159      	lsls	r1, r3, #5
    4920:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4924:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4928:	f005 0507 	and.w	r5, r5, #7
    492c:	e7ca      	b.n	48c4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    492e:	f011 0f01 	tst.w	r1, #1
    4932:	d0cf      	beq.n	48d4 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    4934:	7a91      	ldrb	r1, [r2, #10]
    4936:	f36f 0100 	bfc	r1, #0, #1
    493a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    493c:	aa02      	add	r2, sp, #8
    493e:	4422      	add	r2, r4
    4940:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4944:	015a      	lsls	r2, r3, #5
    4946:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    494a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    494e:	015b      	lsls	r3, r3, #5
    4950:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4954:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    4958:	2204      	movs	r2, #4
    495a:	1c21      	adds	r1, r4, #0
    495c:	bf18      	it	ne
    495e:	2101      	movne	r1, #1
    4960:	4b0d      	ldr	r3, [pc, #52]	; (4998 <_usb_d_dev_handle_trfail+0xfc>)
    4962:	4798      	blx	r3
    4964:	e014      	b.n	4990 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    4966:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    496a:	4a0a      	ldr	r2, [pc, #40]	; (4994 <_usb_d_dev_handle_trfail+0xf8>)
    496c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    4970:	2100      	movs	r1, #0
    4972:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4974:	aa02      	add	r2, sp, #8
    4976:	4414      	add	r4, r2
    4978:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    497c:	015a      	lsls	r2, r3, #5
    497e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4982:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4986:	015b      	lsls	r3, r3, #5
    4988:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    498c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    4990:	b003      	add	sp, #12
    4992:	bd30      	pop	{r4, r5, pc}
    4994:	200004a4 	.word	0x200004a4
    4998:	00004831 	.word	0x00004831

0000499c <_usb_d_dev_reset_epts>:
{
    499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49a0:	4d0c      	ldr	r5, [pc, #48]	; (49d4 <_usb_d_dev_reset_epts+0x38>)
    49a2:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    49a6:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    49aa:	f04f 0803 	mov.w	r8, #3
    49ae:	4f0a      	ldr	r7, [pc, #40]	; (49d8 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    49b0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    49b2:	4641      	mov	r1, r8
    49b4:	4620      	mov	r0, r4
    49b6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    49b8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    49ba:	2300      	movs	r3, #0
    49bc:	74e3      	strb	r3, [r4, #19]
    49be:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    49c0:	42ac      	cmp	r4, r5
    49c2:	d1f6      	bne.n	49b2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    49c4:	22c0      	movs	r2, #192	; 0xc0
    49c6:	4619      	mov	r1, r3
    49c8:	4802      	ldr	r0, [pc, #8]	; (49d4 <_usb_d_dev_reset_epts+0x38>)
    49ca:	4b04      	ldr	r3, [pc, #16]	; (49dc <_usb_d_dev_reset_epts+0x40>)
    49cc:	4798      	blx	r3
    49ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49d2:	bf00      	nop
    49d4:	200004a4 	.word	0x200004a4
    49d8:	00004805 	.word	0x00004805
    49dc:	000069ef 	.word	0x000069ef

000049e0 <_usb_d_dev_in_next>:
{
    49e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49e4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    49e6:	7c84      	ldrb	r4, [r0, #18]
    49e8:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    49ec:	4688      	mov	r8, r1
    49ee:	2900      	cmp	r1, #0
    49f0:	f000 80a0 	beq.w	4b34 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    49f4:	4b58      	ldr	r3, [pc, #352]	; (4b58 <_usb_d_dev_in_next+0x178>)
    49f6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    49fa:	6958      	ldr	r0, [r3, #20]
    49fc:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4a00:	8a2b      	ldrh	r3, [r5, #16]
    4a02:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4a06:	4293      	cmp	r3, r2
    4a08:	f000 808e 	beq.w	4b28 <_usb_d_dev_in_next+0x148>
    4a0c:	3b01      	subs	r3, #1
    4a0e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4a10:	7cef      	ldrb	r7, [r5, #19]
    4a12:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    4a16:	f1b8 0f00 	cmp.w	r8, #0
    4a1a:	d005      	beq.n	4a28 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4a1c:	0162      	lsls	r2, r4, #5
    4a1e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4a22:	2302      	movs	r3, #2
    4a24:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    4a28:	68a9      	ldr	r1, [r5, #8]
    4a2a:	eb0e 0301 	add.w	r3, lr, r1
    4a2e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    4a30:	686e      	ldr	r6, [r5, #4]
    4a32:	42b3      	cmp	r3, r6
    4a34:	d23f      	bcs.n	4ab6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    4a36:	1af6      	subs	r6, r6, r3
    4a38:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    4a3a:	7cea      	ldrb	r2, [r5, #19]
    4a3c:	f012 0f20 	tst.w	r2, #32
    4a40:	d02d      	beq.n	4a9e <_usb_d_dev_in_next+0xbe>
    4a42:	8a2a      	ldrh	r2, [r5, #16]
    4a44:	4296      	cmp	r6, r2
    4a46:	bf28      	it	cs
    4a48:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    4a4a:	6829      	ldr	r1, [r5, #0]
    4a4c:	4632      	mov	r2, r6
    4a4e:	4419      	add	r1, r3
    4a50:	68e8      	ldr	r0, [r5, #12]
    4a52:	4b42      	ldr	r3, [pc, #264]	; (4b5c <_usb_d_dev_in_next+0x17c>)
    4a54:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    4a56:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    4a58:	4b3f      	ldr	r3, [pc, #252]	; (4b58 <_usb_d_dev_in_next+0x178>)
    4a5a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4a5e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4a60:	4b3d      	ldr	r3, [pc, #244]	; (4b58 <_usb_d_dev_in_next+0x178>)
    4a62:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4a66:	695a      	ldr	r2, [r3, #20]
    4a68:	f366 020d 	bfi	r2, r6, #0, #14
    4a6c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4a6e:	695a      	ldr	r2, [r3, #20]
    4a70:	f36f 329b 	bfc	r2, #14, #14
    4a74:	615a      	str	r2, [r3, #20]
	if (!isr) {
    4a76:	f1b8 0f00 	cmp.w	r8, #0
    4a7a:	d108      	bne.n	4a8e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    4a7c:	2f01      	cmp	r7, #1
    4a7e:	bf0c      	ite	eq
    4a80:	224e      	moveq	r2, #78	; 0x4e
    4a82:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4a84:	0163      	lsls	r3, r4, #5
    4a86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4a8a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4a8e:	0164      	lsls	r4, r4, #5
    4a90:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4a94:	2380      	movs	r3, #128	; 0x80
    4a96:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    4a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a9e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    4aa2:	bf28      	it	cs
    4aa4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4aa8:	6829      	ldr	r1, [r5, #0]
    4aaa:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    4aac:	4a2a      	ldr	r2, [pc, #168]	; (4b58 <_usb_d_dev_in_next+0x178>)
    4aae:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    4ab2:	6113      	str	r3, [r2, #16]
    4ab4:	e7d4      	b.n	4a60 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    4ab6:	7ceb      	ldrb	r3, [r5, #19]
    4ab8:	f013 0f10 	tst.w	r3, #16
    4abc:	d00f      	beq.n	4ade <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    4abe:	7ceb      	ldrb	r3, [r5, #19]
    4ac0:	f36f 1304 	bfc	r3, #4, #1
    4ac4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4ac6:	4b24      	ldr	r3, [pc, #144]	; (4b58 <_usb_d_dev_in_next+0x178>)
    4ac8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4acc:	695a      	ldr	r2, [r3, #20]
    4ace:	f36f 020d 	bfc	r2, #0, #14
    4ad2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4ad4:	695a      	ldr	r2, [r3, #20]
    4ad6:	f36f 329b 	bfc	r2, #14, #14
    4ada:	615a      	str	r2, [r3, #20]
    4adc:	e7cb      	b.n	4a76 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    4ade:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4ae0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    4ae4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4ae8:	bf0c      	ite	eq
    4aea:	234b      	moveq	r3, #75	; 0x4b
    4aec:	234a      	movne	r3, #74	; 0x4a
    4aee:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    4af2:	8a2a      	ldrh	r2, [r5, #16]
    4af4:	ea00 030e 	and.w	r3, r0, lr
    4af8:	429a      	cmp	r2, r3
    4afa:	d005      	beq.n	4b08 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4afc:	2100      	movs	r1, #0
    4afe:	4628      	mov	r0, r5
    4b00:	4b17      	ldr	r3, [pc, #92]	; (4b60 <_usb_d_dev_in_next+0x180>)
    4b02:	4798      	blx	r3
	return;
    4b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    4b08:	7ceb      	ldrb	r3, [r5, #19]
    4b0a:	f36f 1386 	bfc	r3, #6, #1
    4b0e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    4b10:	4b11      	ldr	r3, [pc, #68]	; (4b58 <_usb_d_dev_in_next+0x178>)
    4b12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4b16:	68a9      	ldr	r1, [r5, #8]
    4b18:	7ca8      	ldrb	r0, [r5, #18]
    4b1a:	4798      	blx	r3
    4b1c:	b9d0      	cbnz	r0, 4b54 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    4b1e:	7ceb      	ldrb	r3, [r5, #19]
    4b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4b24:	74eb      	strb	r3, [r5, #19]
    4b26:	e7e9      	b.n	4afc <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4b28:	7cef      	ldrb	r7, [r5, #19]
    4b2a:	f007 0707 	and.w	r7, r7, #7
    4b2e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4b32:	e773      	b.n	4a1c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4b34:	8a03      	ldrh	r3, [r0, #16]
    4b36:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4b3a:	4293      	cmp	r3, r2
    4b3c:	d107      	bne.n	4b4e <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4b3e:	7cef      	ldrb	r7, [r5, #19]
    4b40:	f007 0707 	and.w	r7, r7, #7
    4b44:	f04f 0e00 	mov.w	lr, #0
    4b48:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4b4c:	e76c      	b.n	4a28 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4b4e:	f04f 0e00 	mov.w	lr, #0
    4b52:	e75b      	b.n	4a0c <_usb_d_dev_in_next+0x2c>
    4b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b58:	200004a4 	.word	0x200004a4
    4b5c:	000069d9 	.word	0x000069d9
    4b60:	00004805 	.word	0x00004805

00004b64 <_usb_d_dev_out_next>:
{
    4b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b68:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    4b6a:	7c85      	ldrb	r5, [r0, #18]
    4b6c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    4b70:	4689      	mov	r9, r1
    4b72:	2900      	cmp	r1, #0
    4b74:	d056      	beq.n	4c24 <_usb_d_dev_out_next+0xc0>
    4b76:	4b74      	ldr	r3, [pc, #464]	; (4d48 <_usb_d_dev_out_next+0x1e4>)
    4b78:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4b7c:	685a      	ldr	r2, [r3, #4]
    4b7e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    4b82:	685f      	ldr	r7, [r3, #4]
    4b84:	f3c7 070d 	ubfx	r7, r7, #0, #14
    4b88:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4b8a:	8a06      	ldrh	r6, [r0, #16]
    4b8c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4b90:	429e      	cmp	r6, r3
    4b92:	f000 80ba 	beq.w	4d0a <_usb_d_dev_out_next+0x1a6>
    4b96:	3e01      	subs	r6, #1
    4b98:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    4b9a:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4b9e:	f894 8013 	ldrb.w	r8, [r4, #19]
    4ba2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    4ba6:	f1b9 0f00 	cmp.w	r9, #0
    4baa:	d005      	beq.n	4bb8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4bac:	016b      	lsls	r3, r5, #5
    4bae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4bb2:	2201      	movs	r2, #1
    4bb4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    4bb8:	7ce3      	ldrb	r3, [r4, #19]
    4bba:	f013 0f20 	tst.w	r3, #32
    4bbe:	d00d      	beq.n	4bdc <_usb_d_dev_out_next+0x78>
    4bc0:	6862      	ldr	r2, [r4, #4]
    4bc2:	2a00      	cmp	r2, #0
    4bc4:	d037      	beq.n	4c36 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    4bc6:	68a0      	ldr	r0, [r4, #8]
    4bc8:	1a12      	subs	r2, r2, r0
    4bca:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    4bcc:	6823      	ldr	r3, [r4, #0]
    4bce:	42ba      	cmp	r2, r7
    4bd0:	bf28      	it	cs
    4bd2:	463a      	movcs	r2, r7
    4bd4:	68e1      	ldr	r1, [r4, #12]
    4bd6:	4418      	add	r0, r3
    4bd8:	4b5c      	ldr	r3, [pc, #368]	; (4d4c <_usb_d_dev_out_next+0x1e8>)
    4bda:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4bdc:	6863      	ldr	r3, [r4, #4]
    4bde:	b353      	cbz	r3, 4c36 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    4be0:	f1b9 0f00 	cmp.w	r9, #0
    4be4:	d040      	beq.n	4c68 <_usb_d_dev_out_next+0x104>
    4be6:	8a22      	ldrh	r2, [r4, #16]
    4be8:	42ba      	cmp	r2, r7
    4bea:	d93d      	bls.n	4c68 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    4bec:	7ce3      	ldrb	r3, [r4, #19]
    4bee:	f36f 1304 	bfc	r3, #4, #1
    4bf2:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    4bf4:	68a3      	ldr	r3, [r4, #8]
    4bf6:	445b      	add	r3, fp
    4bf8:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    4bfa:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4bfe:	ea4f 1345 	mov.w	r3, r5, lsl #5
    4c02:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4c06:	bf0c      	ite	eq
    4c08:	222d      	moveq	r2, #45	; 0x2d
    4c0a:	2225      	movne	r2, #37	; 0x25
    4c0c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    4c10:	b915      	cbnz	r5, 4c18 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4c12:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    4c14:	4b4c      	ldr	r3, [pc, #304]	; (4d48 <_usb_d_dev_out_next+0x1e4>)
    4c16:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4c18:	2100      	movs	r1, #0
    4c1a:	4620      	mov	r0, r4
    4c1c:	4b4c      	ldr	r3, [pc, #304]	; (4d50 <_usb_d_dev_out_next+0x1ec>)
    4c1e:	4798      	blx	r3
	return;
    4c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4c24:	8a06      	ldrh	r6, [r0, #16]
    4c26:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4c2a:	429e      	cmp	r6, r3
    4c2c:	d07b      	beq.n	4d26 <_usb_d_dev_out_next+0x1c2>
    4c2e:	f04f 0b00 	mov.w	fp, #0
    4c32:	46da      	mov	sl, fp
    4c34:	e7af      	b.n	4b96 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4c36:	7ce3      	ldrb	r3, [r4, #19]
    4c38:	f013 0f10 	tst.w	r3, #16
    4c3c:	d06c      	beq.n	4d18 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    4c3e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    4c40:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4c44:	f043 0320 	orr.w	r3, r3, #32
    4c48:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4c4a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4c4c:	493e      	ldr	r1, [pc, #248]	; (4d48 <_usb_d_dev_out_next+0x1e4>)
    4c4e:	016a      	lsls	r2, r5, #5
    4c50:	188b      	adds	r3, r1, r2
    4c52:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4c54:	8a21      	ldrh	r1, [r4, #16]
    4c56:	685a      	ldr	r2, [r3, #4]
    4c58:	f361 329b 	bfi	r2, r1, #14, #14
    4c5c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4c5e:	685a      	ldr	r2, [r3, #4]
    4c60:	f36f 020d 	bfc	r2, #0, #14
    4c64:	605a      	str	r2, [r3, #4]
    4c66:	e01d      	b.n	4ca4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    4c68:	68a2      	ldr	r2, [r4, #8]
    4c6a:	4452      	add	r2, sl
    4c6c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4c6e:	4293      	cmp	r3, r2
    4c70:	d9c3      	bls.n	4bfa <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    4c72:	1a9b      	subs	r3, r3, r2
    4c74:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    4c76:	7ce1      	ldrb	r1, [r4, #19]
    4c78:	f011 0f20 	tst.w	r1, #32
    4c7c:	d026      	beq.n	4ccc <_usb_d_dev_out_next+0x168>
    4c7e:	8a22      	ldrh	r2, [r4, #16]
    4c80:	4293      	cmp	r3, r2
    4c82:	bf28      	it	cs
    4c84:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4c86:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4c88:	016a      	lsls	r2, r5, #5
    4c8a:	492f      	ldr	r1, [pc, #188]	; (4d48 <_usb_d_dev_out_next+0x1e4>)
    4c8c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4c8e:	4a2e      	ldr	r2, [pc, #184]	; (4d48 <_usb_d_dev_out_next+0x1e4>)
    4c90:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    4c94:	6851      	ldr	r1, [r2, #4]
    4c96:	f363 319b 	bfi	r1, r3, #14, #14
    4c9a:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4c9c:	6853      	ldr	r3, [r2, #4]
    4c9e:	f36f 030d 	bfc	r3, #0, #14
    4ca2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    4ca4:	f1b9 0f00 	cmp.w	r9, #0
    4ca8:	d108      	bne.n	4cbc <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    4caa:	f1b8 0f01 	cmp.w	r8, #1
    4cae:	d025      	beq.n	4cfc <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    4cb0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4cb2:	016b      	lsls	r3, r5, #5
    4cb4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4cb8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4cbc:	016d      	lsls	r5, r5, #5
    4cbe:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    4cc2:	2340      	movs	r3, #64	; 0x40
    4cc4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    4cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    4ccc:	8a21      	ldrh	r1, [r4, #16]
    4cce:	428b      	cmp	r3, r1
    4cd0:	d90a      	bls.n	4ce8 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    4cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4cd6:	d80e      	bhi.n	4cf6 <_usb_d_dev_out_next+0x192>
    4cd8:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4cdc:	6821      	ldr	r1, [r4, #0]
    4cde:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    4ce0:	0169      	lsls	r1, r5, #5
    4ce2:	4819      	ldr	r0, [pc, #100]	; (4d48 <_usb_d_dev_out_next+0x1e4>)
    4ce4:	5042      	str	r2, [r0, r1]
    4ce6:	e7d2      	b.n	4c8e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    4ce8:	428b      	cmp	r3, r1
    4cea:	d2f7      	bcs.n	4cdc <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    4cec:	7ce1      	ldrb	r1, [r4, #19]
    4cee:	f041 0120 	orr.w	r1, r1, #32
    4cf2:	74e1      	strb	r1, [r4, #19]
    4cf4:	e7f2      	b.n	4cdc <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    4cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    4cfa:	e7ef      	b.n	4cdc <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    4cfc:	4b12      	ldr	r3, [pc, #72]	; (4d48 <_usb_d_dev_out_next+0x1e4>)
    4cfe:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4d02:	2200      	movs	r2, #0
    4d04:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    4d06:	222d      	movs	r2, #45	; 0x2d
    4d08:	e7d3      	b.n	4cb2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    4d0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4d0e:	f890 8013 	ldrb.w	r8, [r0, #19]
    4d12:	f008 0807 	and.w	r8, r8, #7
    4d16:	e749      	b.n	4bac <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    4d18:	f1b9 0f00 	cmp.w	r9, #0
    4d1c:	d10b      	bne.n	4d36 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    4d1e:	68a3      	ldr	r3, [r4, #8]
    4d20:	4453      	add	r3, sl
    4d22:	60a3      	str	r3, [r4, #8]
    4d24:	e769      	b.n	4bfa <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4d26:	f890 8013 	ldrb.w	r8, [r0, #19]
    4d2a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    4d2e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4d30:	46bb      	mov	fp, r7
    4d32:	46ba      	mov	sl, r7
    4d34:	e740      	b.n	4bb8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    4d36:	8a23      	ldrh	r3, [r4, #16]
    4d38:	42bb      	cmp	r3, r7
    4d3a:	f63f af57 	bhi.w	4bec <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    4d3e:	68a3      	ldr	r3, [r4, #8]
    4d40:	4453      	add	r3, sl
    4d42:	60a3      	str	r3, [r4, #8]
    4d44:	e759      	b.n	4bfa <_usb_d_dev_out_next+0x96>
    4d46:	bf00      	nop
    4d48:	200004a4 	.word	0x200004a4
    4d4c:	000069d9 	.word	0x000069d9
    4d50:	00004805 	.word	0x00004805

00004d54 <_usb_d_dev_handler>:
{
    4d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    4d58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4d5c:	8c1e      	ldrh	r6, [r3, #32]
    4d5e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    4d60:	b146      	cbz	r6, 4d74 <_usb_d_dev_handler+0x20>
    4d62:	4d96      	ldr	r5, [pc, #600]	; (4fbc <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    4d64:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4d66:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    4d6a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 4fd8 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    4d6e:	f8df 826c 	ldr.w	r8, [pc, #620]	; 4fdc <_usb_d_dev_handler+0x288>
    4d72:	e0de      	b.n	4f32 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4d74:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    4d76:	8b1b      	ldrh	r3, [r3, #24]
    4d78:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    4d7a:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    4d7c:	f013 0f04 	tst.w	r3, #4
    4d80:	d11e      	bne.n	4dc0 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    4d82:	f413 7f00 	tst.w	r3, #512	; 0x200
    4d86:	d125      	bne.n	4dd4 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    4d88:	f013 0f80 	tst.w	r3, #128	; 0x80
    4d8c:	d14f      	bne.n	4e2e <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    4d8e:	f013 0f70 	tst.w	r3, #112	; 0x70
    4d92:	d158      	bne.n	4e46 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    4d94:	f013 0f08 	tst.w	r3, #8
    4d98:	d178      	bne.n	4e8c <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    4d9a:	f013 0f01 	tst.w	r3, #1
    4d9e:	d0e0      	beq.n	4d62 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4da0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4da4:	f240 2201 	movw	r2, #513	; 0x201
    4da8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4daa:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4dac:	2270      	movs	r2, #112	; 0x70
    4dae:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    4db0:	4b83      	ldr	r3, [pc, #524]	; (4fc0 <_usb_d_dev_handler+0x26c>)
    4db2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4db6:	2100      	movs	r1, #0
    4db8:	2004      	movs	r0, #4
    4dba:	4798      	blx	r3
    4dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4dc0:	2204      	movs	r2, #4
    4dc2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4dc6:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4dc8:	4b7d      	ldr	r3, [pc, #500]	; (4fc0 <_usb_d_dev_handler+0x26c>)
    4dca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    4dce:	4798      	blx	r3
    4dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4dd4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4dd8:	f240 2201 	movw	r2, #513	; 0x201
    4ddc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4dde:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4de0:	2270      	movs	r2, #112	; 0x70
    4de2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4de4:	4b76      	ldr	r3, [pc, #472]	; (4fc0 <_usb_d_dev_handler+0x26c>)
    4de6:	891b      	ldrh	r3, [r3, #8]
    4de8:	f003 030f 	and.w	r3, r3, #15
    4dec:	2b03      	cmp	r3, #3
    4dee:	d014      	beq.n	4e1a <_usb_d_dev_handler+0xc6>
    4df0:	2301      	movs	r3, #1
    4df2:	4873      	ldr	r0, [pc, #460]	; (4fc0 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4df4:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4df6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    4dfa:	8912      	ldrh	r2, [r2, #8]
    4dfc:	f002 020f 	and.w	r2, r2, #15
    4e00:	2a03      	cmp	r2, #3
    4e02:	d00b      	beq.n	4e1c <_usb_d_dev_handler+0xc8>
    4e04:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    4e06:	2b05      	cmp	r3, #5
    4e08:	d1f4      	bne.n	4df4 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    4e0a:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    4e0c:	4b6c      	ldr	r3, [pc, #432]	; (4fc0 <_usb_d_dev_handler+0x26c>)
    4e0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4e12:	2003      	movs	r0, #3
    4e14:	4798      	blx	r3
    4e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4e1a:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    4e1c:	4b68      	ldr	r3, [pc, #416]	; (4fc0 <_usb_d_dev_handler+0x26c>)
    4e1e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    4e22:	8919      	ldrh	r1, [r3, #8]
    4e24:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    4e28:	2200      	movs	r2, #0
    4e2a:	811a      	strh	r2, [r3, #8]
    4e2c:	e7ee      	b.n	4e0c <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4e2e:	2280      	movs	r2, #128	; 0x80
    4e30:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4e34:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    4e36:	4b62      	ldr	r3, [pc, #392]	; (4fc0 <_usb_d_dev_handler+0x26c>)
    4e38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4e3c:	2100      	movs	r1, #0
    4e3e:	2005      	movs	r0, #5
    4e40:	4798      	blx	r3
    4e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4e46:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4e4a:	2270      	movs	r2, #112	; 0x70
    4e4c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4e4e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4e50:	f240 2201 	movw	r2, #513	; 0x201
    4e54:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4e56:	4b5b      	ldr	r3, [pc, #364]	; (4fc4 <_usb_d_dev_handler+0x270>)
    4e58:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    4e5c:	f013 0f01 	tst.w	r3, #1
    4e60:	d00e      	beq.n	4e80 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4e62:	4a58      	ldr	r2, [pc, #352]	; (4fc4 <_usb_d_dev_handler+0x270>)
    4e64:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    4e66:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    4e6a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4e6e:	d1f9      	bne.n	4e64 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    4e70:	4b53      	ldr	r3, [pc, #332]	; (4fc0 <_usb_d_dev_handler+0x26c>)
    4e72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4e76:	2100      	movs	r1, #0
    4e78:	2002      	movs	r0, #2
    4e7a:	4798      	blx	r3
    4e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4e80:	4a50      	ldr	r2, [pc, #320]	; (4fc4 <_usb_d_dev_handler+0x270>)
    4e82:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    4e84:	f413 7f80 	tst.w	r3, #256	; 0x100
    4e88:	d0fb      	beq.n	4e82 <_usb_d_dev_handler+0x12e>
    4e8a:	e7f1      	b.n	4e70 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4e8c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4e90:	2400      	movs	r4, #0
    4e92:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4e96:	2208      	movs	r2, #8
    4e98:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4e9a:	2270      	movs	r2, #112	; 0x70
    4e9c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4e9e:	f240 2201 	movw	r2, #513	; 0x201
    4ea2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    4ea4:	4b48      	ldr	r3, [pc, #288]	; (4fc8 <_usb_d_dev_handler+0x274>)
    4ea6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    4ea8:	4b45      	ldr	r3, [pc, #276]	; (4fc0 <_usb_d_dev_handler+0x26c>)
    4eaa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4eae:	4621      	mov	r1, r4
    4eb0:	2001      	movs	r0, #1
    4eb2:	4798      	blx	r3
    4eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4eb8:	f011 0f10 	tst.w	r1, #16
    4ebc:	d109      	bne.n	4ed2 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4ebe:	f011 0f40 	tst.w	r1, #64	; 0x40
    4ec2:	d108      	bne.n	4ed6 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4ec4:	f011 0f20 	tst.w	r1, #32
    4ec8:	d02f      	beq.n	4f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    4eca:	2100      	movs	r1, #0
    4ecc:	4b3f      	ldr	r3, [pc, #252]	; (4fcc <_usb_d_dev_handler+0x278>)
    4ece:	4798      	blx	r3
    4ed0:	e02b      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    4ed2:	47c8      	blx	r9
    4ed4:	e029      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    4ed6:	2101      	movs	r1, #1
    4ed8:	4b3c      	ldr	r3, [pc, #240]	; (4fcc <_usb_d_dev_handler+0x278>)
    4eda:	4798      	blx	r3
    4edc:	e025      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4ede:	f011 0f40 	tst.w	r1, #64	; 0x40
    4ee2:	d111      	bne.n	4f08 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4ee4:	f011 0f08 	tst.w	r1, #8
    4ee8:	d112      	bne.n	4f10 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4eea:	f011 0f02 	tst.w	r1, #2
    4eee:	d112      	bne.n	4f16 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4ef0:	f003 0307 	and.w	r3, r3, #7
    4ef4:	2b01      	cmp	r3, #1
    4ef6:	d118      	bne.n	4f2a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4ef8:	f011 0f04 	tst.w	r1, #4
    4efc:	d10f      	bne.n	4f1e <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4efe:	f011 0f10 	tst.w	r1, #16
    4f02:	d012      	beq.n	4f2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    4f04:	47c8      	blx	r9
    4f06:	e010      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    4f08:	2101      	movs	r1, #1
    4f0a:	4b30      	ldr	r3, [pc, #192]	; (4fcc <_usb_d_dev_handler+0x278>)
    4f0c:	4798      	blx	r3
    4f0e:	e00c      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    4f10:	2101      	movs	r1, #1
    4f12:	47c0      	blx	r8
    4f14:	e009      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    4f16:	2101      	movs	r1, #1
    4f18:	4b2d      	ldr	r3, [pc, #180]	; (4fd0 <_usb_d_dev_handler+0x27c>)
    4f1a:	4798      	blx	r3
    4f1c:	e005      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    4f1e:	2100      	movs	r1, #0
    4f20:	47c0      	blx	r8
    4f22:	e002      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    4f24:	2100      	movs	r1, #0
    4f26:	4b29      	ldr	r3, [pc, #164]	; (4fcc <_usb_d_dev_handler+0x278>)
    4f28:	4798      	blx	r3
    4f2a:	3401      	adds	r4, #1
    4f2c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4f2e:	2c1b      	cmp	r4, #27
    4f30:	d042      	beq.n	4fb8 <_usb_d_dev_handler+0x264>
    4f32:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    4f34:	7cab      	ldrb	r3, [r5, #18]
    4f36:	2bff      	cmp	r3, #255	; 0xff
    4f38:	d0f7      	beq.n	4f2a <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    4f3a:	f003 030f 	and.w	r3, r3, #15
    4f3e:	2101      	movs	r1, #1
    4f40:	4099      	lsls	r1, r3
    4f42:	4231      	tst	r1, r6
    4f44:	d0f1      	beq.n	4f2a <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    4f46:	0159      	lsls	r1, r3, #5
    4f48:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4f4c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    4f50:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    4f52:	015b      	lsls	r3, r3, #5
    4f54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4f58:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    4f5c:	4019      	ands	r1, r3
    4f5e:	d0e4      	beq.n	4f2a <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4f60:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4f64:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    4f68:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    4f6c:	f003 0247 	and.w	r2, r3, #71	; 0x47
    4f70:	2a01      	cmp	r2, #1
    4f72:	d0a1      	beq.n	4eb8 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    4f74:	f013 0f80 	tst.w	r3, #128	; 0x80
    4f78:	d1b1      	bne.n	4ede <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4f7a:	f011 0f20 	tst.w	r1, #32
    4f7e:	d1d1      	bne.n	4f24 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4f80:	f011 0f04 	tst.w	r1, #4
    4f84:	d10e      	bne.n	4fa4 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4f86:	f011 0f01 	tst.w	r1, #1
    4f8a:	d10e      	bne.n	4faa <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4f8c:	f003 0307 	and.w	r3, r3, #7
    4f90:	2b01      	cmp	r3, #1
    4f92:	d1ca      	bne.n	4f2a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4f94:	f011 0f08 	tst.w	r1, #8
    4f98:	d10b      	bne.n	4fb2 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4f9a:	f011 0f10 	tst.w	r1, #16
    4f9e:	d0c4      	beq.n	4f2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    4fa0:	47c8      	blx	r9
    4fa2:	e7c2      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    4fa4:	2100      	movs	r1, #0
    4fa6:	47c0      	blx	r8
    4fa8:	e7bf      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    4faa:	2101      	movs	r1, #1
    4fac:	4b09      	ldr	r3, [pc, #36]	; (4fd4 <_usb_d_dev_handler+0x280>)
    4fae:	4798      	blx	r3
    4fb0:	e7bb      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    4fb2:	2101      	movs	r1, #1
    4fb4:	47c0      	blx	r8
    4fb6:	e7b8      	b.n	4f2a <_usb_d_dev_handler+0x1d6>
    4fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4fbc:	20000578 	.word	0x20000578
    4fc0:	200004a4 	.word	0x200004a4
    4fc4:	40001000 	.word	0x40001000
    4fc8:	0000499d 	.word	0x0000499d
    4fcc:	000047d5 	.word	0x000047d5
    4fd0:	000049e1 	.word	0x000049e1
    4fd4:	00004b65 	.word	0x00004b65
    4fd8:	00004755 	.word	0x00004755
    4fdc:	0000489d 	.word	0x0000489d

00004fe0 <_usb_d_dev_init>:
{
    4fe0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    4fe2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4fe6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    4fe8:	f013 0f01 	tst.w	r3, #1
    4fec:	d124      	bne.n	5038 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4fee:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4ff2:	7893      	ldrb	r3, [r2, #2]
    4ff4:	f013 0f03 	tst.w	r3, #3
    4ff8:	d1fb      	bne.n	4ff2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    4ffa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4ffe:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    5000:	f013 0f02 	tst.w	r3, #2
    5004:	d00f      	beq.n	5026 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    5006:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    500a:	7813      	ldrb	r3, [r2, #0]
    500c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5010:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5012:	7893      	ldrb	r3, [r2, #2]
    5014:	f013 0f03 	tst.w	r3, #3
    5018:	d1fb      	bne.n	5012 <_usb_d_dev_init+0x32>
    501a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    501e:	7893      	ldrb	r3, [r2, #2]
    5020:	f013 0f02 	tst.w	r3, #2
    5024:	d1fb      	bne.n	501e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    5026:	2201      	movs	r2, #1
    5028:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    502c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    502e:	461a      	mov	r2, r3
    5030:	7893      	ldrb	r3, [r2, #2]
    5032:	f013 0f03 	tst.w	r3, #3
    5036:	d1fb      	bne.n	5030 <_usb_d_dev_init+0x50>
    5038:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    503c:	7893      	ldrb	r3, [r2, #2]
    503e:	f013 0f01 	tst.w	r3, #1
    5042:	d1fb      	bne.n	503c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    5044:	4b24      	ldr	r3, [pc, #144]	; (50d8 <_usb_d_dev_init+0xf8>)
    5046:	4a25      	ldr	r2, [pc, #148]	; (50dc <_usb_d_dev_init+0xfc>)
    5048:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    504c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    5050:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    5054:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    5058:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    505c:	4b20      	ldr	r3, [pc, #128]	; (50e0 <_usb_d_dev_init+0x100>)
    505e:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    5060:	4b20      	ldr	r3, [pc, #128]	; (50e4 <_usb_d_dev_init+0x104>)
    5062:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    5064:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    5068:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    506c:	f011 011f 	ands.w	r1, r1, #31
    5070:	d02b      	beq.n	50ca <_usb_d_dev_init+0xea>
		pad_transn = 9;
    5072:	291f      	cmp	r1, #31
    5074:	bf08      	it	eq
    5076:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    5078:	b34b      	cbz	r3, 50ce <_usb_d_dev_init+0xee>
		pad_transp = 25;
    507a:	2b1f      	cmp	r3, #31
    507c:	bf08      	it	eq
    507e:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    5080:	b33a      	cbz	r2, 50d2 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    5082:	2a07      	cmp	r2, #7
    5084:	bf08      	it	eq
    5086:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    5088:	f003 031f 	and.w	r3, r3, #31
    508c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    5090:	0312      	lsls	r2, r2, #12
    5092:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    5096:	4313      	orrs	r3, r2
    5098:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    509c:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    509e:	78d3      	ldrb	r3, [r2, #3]
    50a0:	f043 0303 	orr.w	r3, r3, #3
    50a4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    50a6:	78d3      	ldrb	r3, [r2, #3]
    50a8:	f043 030c 	orr.w	r3, r3, #12
    50ac:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    50ae:	2304      	movs	r3, #4
    50b0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    50b2:	7893      	ldrb	r3, [r2, #2]
    50b4:	f013 0f03 	tst.w	r3, #3
    50b8:	d1fb      	bne.n	50b2 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    50ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    50be:	4a06      	ldr	r2, [pc, #24]	; (50d8 <_usb_d_dev_init+0xf8>)
    50c0:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    50c2:	2201      	movs	r2, #1
    50c4:	811a      	strh	r2, [r3, #8]
}
    50c6:	2000      	movs	r0, #0
    50c8:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    50ca:	2109      	movs	r1, #9
    50cc:	e7d4      	b.n	5078 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    50ce:	2319      	movs	r3, #25
    50d0:	e7d6      	b.n	5080 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    50d2:	2206      	movs	r2, #6
    50d4:	e7d8      	b.n	5088 <_usb_d_dev_init+0xa8>
    50d6:	bf00      	nop
    50d8:	200004a4 	.word	0x200004a4
    50dc:	00004751 	.word	0x00004751
    50e0:	0000499d 	.word	0x0000499d
    50e4:	00800084 	.word	0x00800084

000050e8 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    50e8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    50ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    50f0:	7298      	strb	r0, [r3, #10]
    50f2:	4770      	bx	lr

000050f4 <_usb_d_dev_ep_init>:
{
    50f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50f6:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    50fa:	f010 050f 	ands.w	r5, r0, #15
    50fe:	d04d      	beq.n	519c <_usb_d_dev_ep_init+0xa8>
    5100:	f1be 0f00 	cmp.w	lr, #0
    5104:	bfb4      	ite	lt
    5106:	1d6c      	addlt	r4, r5, #5
    5108:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    510a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    510e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    5110:	2d05      	cmp	r5, #5
    5112:	d947      	bls.n	51a4 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    5114:	f06f 0011 	mvn.w	r0, #17
    5118:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    511a:	f1be 0f00 	cmp.w	lr, #0
    511e:	db1b      	blt.n	5158 <_usb_d_dev_ep_init+0x64>
    5120:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5124:	4e37      	ldr	r6, [pc, #220]	; (5204 <_usb_d_dev_ep_init+0x110>)
    5126:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    512a:	2d00      	cmp	r5, #0
    512c:	d15e      	bne.n	51ec <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    512e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5132:	4d34      	ldr	r5, [pc, #208]	; (5204 <_usb_d_dev_ep_init+0x110>)
    5134:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    5138:	4d33      	ldr	r5, [pc, #204]	; (5208 <_usb_d_dev_ep_init+0x114>)
    513a:	00a6      	lsls	r6, r4, #2
    513c:	1933      	adds	r3, r6, r4
    513e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5142:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    5146:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    514a:	3101      	adds	r1, #1
    514c:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    5150:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    5154:	2000      	movs	r0, #0
    5156:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5158:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    515c:	4e29      	ldr	r6, [pc, #164]	; (5204 <_usb_d_dev_ep_init+0x110>)
    515e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5162:	686d      	ldr	r5, [r5, #4]
    5164:	b935      	cbnz	r5, 5174 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    5166:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    516a:	4d26      	ldr	r5, [pc, #152]	; (5204 <_usb_d_dev_ep_init+0x110>)
    516c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5170:	685f      	ldr	r7, [r3, #4]
    5172:	e7e1      	b.n	5138 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5174:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5178:	4e22      	ldr	r6, [pc, #136]	; (5204 <_usb_d_dev_ep_init+0x110>)
    517a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    517e:	896d      	ldrh	r5, [r5, #10]
    5180:	4295      	cmp	r5, r2
    5182:	daf0      	bge.n	5166 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    5184:	f06f 0012 	mvn.w	r0, #18
    5188:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    518a:	f06f 0013 	mvn.w	r0, #19
    518e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    5190:	f06f 0013 	mvn.w	r0, #19
    5194:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    5196:	f06f 0012 	mvn.w	r0, #18
    519a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    519c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    51a0:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    51a2:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    51a4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    51a8:	4f17      	ldr	r7, [pc, #92]	; (5208 <_usb_d_dev_ep_init+0x114>)
    51aa:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    51ae:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    51b2:	2eff      	cmp	r6, #255	; 0xff
    51b4:	d1e9      	bne.n	518a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    51b6:	2900      	cmp	r1, #0
    51b8:	d1af      	bne.n	511a <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    51ba:	b125      	cbz	r5, 51c6 <_usb_d_dev_ep_init+0xd2>
    51bc:	f1be 0f00 	cmp.w	lr, #0
    51c0:	bfa4      	itt	ge
    51c2:	3505      	addge	r5, #5
    51c4:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    51c6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    51ca:	4e0f      	ldr	r6, [pc, #60]	; (5208 <_usb_d_dev_ep_init+0x114>)
    51cc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    51d0:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    51d4:	2dff      	cmp	r5, #255	; 0xff
    51d6:	d1db      	bne.n	5190 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    51d8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    51dc:	4e09      	ldr	r6, [pc, #36]	; (5204 <_usb_d_dev_ep_init+0x110>)
    51de:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    51e2:	2d00      	cmp	r5, #0
    51e4:	d0d7      	beq.n	5196 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    51e6:	f1be 0f00 	cmp.w	lr, #0
    51ea:	dbb5      	blt.n	5158 <_usb_d_dev_ep_init+0x64>
    51ec:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    51f0:	4e04      	ldr	r6, [pc, #16]	; (5204 <_usb_d_dev_ep_init+0x110>)
    51f2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    51f6:	892d      	ldrh	r5, [r5, #8]
    51f8:	4295      	cmp	r5, r2
    51fa:	da98      	bge.n	512e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    51fc:	f06f 0012 	mvn.w	r0, #18
    5200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5202:	bf00      	nop
    5204:	00007e4c 	.word	0x00007e4c
    5208:	200004a4 	.word	0x200004a4

0000520c <_usb_d_dev_ep_deinit>:
{
    520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    520e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5210:	f010 060f 	ands.w	r6, r0, #15
    5214:	d00e      	beq.n	5234 <_usb_d_dev_ep_deinit+0x28>
    5216:	2f00      	cmp	r7, #0
    5218:	bfb4      	ite	lt
    521a:	1d73      	addlt	r3, r6, #5
    521c:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    521e:	2e05      	cmp	r6, #5
    5220:	d900      	bls.n	5224 <_usb_d_dev_ep_deinit+0x18>
    5222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    5224:	461d      	mov	r5, r3
    5226:	3301      	adds	r3, #1
    5228:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    522c:	4a24      	ldr	r2, [pc, #144]	; (52c0 <_usb_d_dev_ep_deinit+0xb4>)
    522e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    5232:	e002      	b.n	523a <_usb_d_dev_ep_deinit+0x2e>
    5234:	f8df e094 	ldr.w	lr, [pc, #148]	; 52cc <_usb_d_dev_ep_deinit+0xc0>
    5238:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    523a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    523e:	4a21      	ldr	r2, [pc, #132]	; (52c4 <_usb_d_dev_ep_deinit+0xb8>)
    5240:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5244:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    5248:	2aff      	cmp	r2, #255	; 0xff
    524a:	d0ea      	beq.n	5222 <_usb_d_dev_ep_deinit+0x16>
    524c:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    524e:	2203      	movs	r2, #3
    5250:	0ff9      	lsrs	r1, r7, #31
    5252:	4670      	mov	r0, lr
    5254:	4b1c      	ldr	r3, [pc, #112]	; (52c8 <_usb_d_dev_ep_deinit+0xbc>)
    5256:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    5258:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    525c:	4a19      	ldr	r2, [pc, #100]	; (52c4 <_usb_d_dev_ep_deinit+0xb8>)
    525e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5262:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5266:	f003 0307 	and.w	r3, r3, #7
    526a:	2b01      	cmp	r3, #1
    526c:	d016      	beq.n	529c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    526e:	2f00      	cmp	r7, #0
    5270:	db1b      	blt.n	52aa <_usb_d_dev_ep_deinit+0x9e>
    5272:	0160      	lsls	r0, r4, #5
    5274:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    5278:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    527c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    5280:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    5284:	4b0f      	ldr	r3, [pc, #60]	; (52c4 <_usb_d_dev_ep_deinit+0xb8>)
    5286:	00aa      	lsls	r2, r5, #2
    5288:	1951      	adds	r1, r2, r5
    528a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    528e:	2000      	movs	r0, #0
    5290:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    5294:	22ff      	movs	r2, #255	; 0xff
    5296:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    529a:	e7c2      	b.n	5222 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    529c:	0160      	lsls	r0, r4, #5
    529e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    52a2:	2300      	movs	r3, #0
    52a4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    52a8:	e7ec      	b.n	5284 <_usb_d_dev_ep_deinit+0x78>
    52aa:	0176      	lsls	r6, r6, #5
    52ac:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    52b0:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    52b4:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    52b8:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    52bc:	e7e2      	b.n	5284 <_usb_d_dev_ep_deinit+0x78>
    52be:	bf00      	nop
    52c0:	20000564 	.word	0x20000564
    52c4:	200004a4 	.word	0x200004a4
    52c8:	00004831 	.word	0x00004831
    52cc:	20000578 	.word	0x20000578

000052d0 <_usb_d_dev_ep_enable>:
{
    52d0:	b4f0      	push	{r4, r5, r6, r7}
    52d2:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    52d4:	f010 000f 	ands.w	r0, r0, #15
    52d8:	f000 80a7 	beq.w	542a <_usb_d_dev_ep_enable+0x15a>
    52dc:	2e00      	cmp	r6, #0
    52de:	bfb4      	ite	lt
    52e0:	1d43      	addlt	r3, r0, #5
    52e2:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    52e4:	4605      	mov	r5, r0
    52e6:	0142      	lsls	r2, r0, #5
    52e8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    52ec:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    52f0:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    52f2:	2805      	cmp	r0, #5
    52f4:	f240 80a0 	bls.w	5438 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    52f8:	f06f 0011 	mvn.w	r0, #17
    52fc:	e07d      	b.n	53fa <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    52fe:	f014 0f77 	tst.w	r4, #119	; 0x77
    5302:	f040 8089 	bne.w	5418 <_usb_d_dev_ep_enable+0x148>
    5306:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    530a:	2111      	movs	r1, #17
    530c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5310:	4c9b      	ldr	r4, [pc, #620]	; (5580 <_usb_d_dev_ep_enable+0x2b0>)
    5312:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    5316:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    531a:	4c9a      	ldr	r4, [pc, #616]	; (5584 <_usb_d_dev_ep_enable+0x2b4>)
    531c:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5320:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5324:	f200 80cd 	bhi.w	54c2 <_usb_d_dev_ep_enable+0x1f2>
    5328:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    532c:	f200 8112 	bhi.w	5554 <_usb_d_dev_ep_enable+0x284>
    5330:	2980      	cmp	r1, #128	; 0x80
    5332:	f200 8101 	bhi.w	5538 <_usb_d_dev_ep_enable+0x268>
    5336:	2940      	cmp	r1, #64	; 0x40
    5338:	f200 8113 	bhi.w	5562 <_usb_d_dev_ep_enable+0x292>
    533c:	2920      	cmp	r1, #32
    533e:	f200 8102 	bhi.w	5546 <_usb_d_dev_ep_enable+0x276>
    5342:	2910      	cmp	r1, #16
    5344:	f200 8114 	bhi.w	5570 <_usb_d_dev_ep_enable+0x2a0>
    5348:	2908      	cmp	r1, #8
    534a:	bf94      	ite	ls
    534c:	2600      	movls	r6, #0
    534e:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5350:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5354:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5356:	f3c1 010d 	ubfx	r1, r1, #0, #14
    535a:	e0b8      	b.n	54ce <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    535c:	f014 0f70 	tst.w	r4, #112	; 0x70
    5360:	d15d      	bne.n	541e <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    5362:	4e87      	ldr	r6, [pc, #540]	; (5580 <_usb_d_dev_ep_enable+0x2b0>)
    5364:	009f      	lsls	r7, r3, #2
    5366:	18f9      	adds	r1, r7, r3
    5368:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    536c:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    5370:	0109      	lsls	r1, r1, #4
    5372:	f001 0170 	and.w	r1, r1, #112	; 0x70
    5376:	430c      	orrs	r4, r1
    5378:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    537c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5380:	443b      	add	r3, r7
    5382:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    5386:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    538a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    538e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5392:	d80f      	bhi.n	53b4 <_usb_d_dev_ep_enable+0xe4>
    5394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5398:	d819      	bhi.n	53ce <_usb_d_dev_ep_enable+0xfe>
    539a:	2b80      	cmp	r3, #128	; 0x80
    539c:	d819      	bhi.n	53d2 <_usb_d_dev_ep_enable+0x102>
    539e:	2b40      	cmp	r3, #64	; 0x40
    53a0:	d819      	bhi.n	53d6 <_usb_d_dev_ep_enable+0x106>
    53a2:	2b20      	cmp	r3, #32
    53a4:	d819      	bhi.n	53da <_usb_d_dev_ep_enable+0x10a>
    53a6:	2b10      	cmp	r3, #16
    53a8:	d819      	bhi.n	53de <_usb_d_dev_ep_enable+0x10e>
    53aa:	2b08      	cmp	r3, #8
    53ac:	bf94      	ite	ls
    53ae:	2300      	movls	r3, #0
    53b0:	2301      	movhi	r3, #1
    53b2:	e000      	b.n	53b6 <_usb_d_dev_ep_enable+0xe6>
    53b4:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53b6:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    53ba:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    53bc:	2380      	movs	r3, #128	; 0x80
    53be:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    53c2:	4b6f      	ldr	r3, [pc, #444]	; (5580 <_usb_d_dev_ep_enable+0x2b0>)
    53c4:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    53c8:	2000      	movs	r0, #0
    53ca:	76a8      	strb	r0, [r5, #26]
    53cc:	e015      	b.n	53fa <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53ce:	2306      	movs	r3, #6
    53d0:	e7f1      	b.n	53b6 <_usb_d_dev_ep_enable+0xe6>
    53d2:	2305      	movs	r3, #5
    53d4:	e7ef      	b.n	53b6 <_usb_d_dev_ep_enable+0xe6>
    53d6:	2304      	movs	r3, #4
    53d8:	e7ed      	b.n	53b6 <_usb_d_dev_ep_enable+0xe6>
    53da:	2303      	movs	r3, #3
    53dc:	e7eb      	b.n	53b6 <_usb_d_dev_ep_enable+0xe6>
    53de:	2302      	movs	r3, #2
    53e0:	e7e9      	b.n	53b6 <_usb_d_dev_ep_enable+0xe6>
    53e2:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53e4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53e8:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    53ea:	2340      	movs	r3, #64	; 0x40
    53ec:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    53f0:	4b63      	ldr	r3, [pc, #396]	; (5580 <_usb_d_dev_ep_enable+0x2b0>)
    53f2:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    53f6:	2000      	movs	r0, #0
    53f8:	72a8      	strb	r0, [r5, #10]
}
    53fa:	bcf0      	pop	{r4, r5, r6, r7}
    53fc:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53fe:	2106      	movs	r1, #6
    5400:	e7f0      	b.n	53e4 <_usb_d_dev_ep_enable+0x114>
    5402:	2105      	movs	r1, #5
    5404:	e7ee      	b.n	53e4 <_usb_d_dev_ep_enable+0x114>
    5406:	2104      	movs	r1, #4
    5408:	e7ec      	b.n	53e4 <_usb_d_dev_ep_enable+0x114>
    540a:	2103      	movs	r1, #3
    540c:	e7ea      	b.n	53e4 <_usb_d_dev_ep_enable+0x114>
    540e:	2102      	movs	r1, #2
    5410:	e7e8      	b.n	53e4 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    5412:	f06f 0011 	mvn.w	r0, #17
    5416:	e7f0      	b.n	53fa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    5418:	f06f 0013 	mvn.w	r0, #19
    541c:	e7ed      	b.n	53fa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    541e:	f06f 0013 	mvn.w	r0, #19
    5422:	e7ea      	b.n	53fa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    5424:	f06f 0013 	mvn.w	r0, #19
    5428:	e7e7      	b.n	53fa <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    542a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    542e:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    5432:	b2e4      	uxtb	r4, r4
    5434:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    5436:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5438:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    543c:	4950      	ldr	r1, [pc, #320]	; (5580 <_usb_d_dev_ep_enable+0x2b0>)
    543e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5442:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    5446:	2aff      	cmp	r2, #255	; 0xff
    5448:	d0e3      	beq.n	5412 <_usb_d_dev_ep_enable+0x142>
    544a:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    544c:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    544e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    5452:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    5456:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    545a:	f001 0107 	and.w	r1, r1, #7
    545e:	2901      	cmp	r1, #1
    5460:	f43f af4d 	beq.w	52fe <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    5464:	2e00      	cmp	r6, #0
    5466:	f6ff af79 	blt.w	535c <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    546a:	f014 0f07 	tst.w	r4, #7
    546e:	d1d9      	bne.n	5424 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    5470:	4e43      	ldr	r6, [pc, #268]	; (5580 <_usb_d_dev_ep_enable+0x2b0>)
    5472:	009f      	lsls	r7, r3, #2
    5474:	18f9      	adds	r1, r7, r3
    5476:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    547a:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    547e:	f001 0107 	and.w	r1, r1, #7
    5482:	430c      	orrs	r4, r1
    5484:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5488:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    548c:	443b      	add	r3, r7
    548e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    5492:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    5496:	4b3b      	ldr	r3, [pc, #236]	; (5584 <_usb_d_dev_ep_enable+0x2b4>)
    5498:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    549c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    54a0:	d89f      	bhi.n	53e2 <_usb_d_dev_ep_enable+0x112>
    54a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    54a6:	d8aa      	bhi.n	53fe <_usb_d_dev_ep_enable+0x12e>
    54a8:	2980      	cmp	r1, #128	; 0x80
    54aa:	d8aa      	bhi.n	5402 <_usb_d_dev_ep_enable+0x132>
    54ac:	2940      	cmp	r1, #64	; 0x40
    54ae:	d8aa      	bhi.n	5406 <_usb_d_dev_ep_enable+0x136>
    54b0:	2920      	cmp	r1, #32
    54b2:	d8aa      	bhi.n	540a <_usb_d_dev_ep_enable+0x13a>
    54b4:	2910      	cmp	r1, #16
    54b6:	d8aa      	bhi.n	540e <_usb_d_dev_ep_enable+0x13e>
    54b8:	2908      	cmp	r1, #8
    54ba:	bf94      	ite	ls
    54bc:	2100      	movls	r1, #0
    54be:	2101      	movhi	r1, #1
    54c0:	e790      	b.n	53e4 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    54c2:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    54c6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    54c8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    54cc:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    54ce:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    54d2:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    54d4:	2640      	movs	r6, #64	; 0x40
    54d6:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    54da:	2180      	movs	r1, #128	; 0x80
    54dc:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    54e0:	4f27      	ldr	r7, [pc, #156]	; (5580 <_usb_d_dev_ep_enable+0x2b0>)
    54e2:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    54e6:	2000      	movs	r0, #0
    54e8:	72a8      	strb	r0, [r5, #10]
    54ea:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    54ec:	009c      	lsls	r4, r3, #2
    54ee:	18e1      	adds	r1, r4, r3
    54f0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    54f4:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    54f8:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    54fc:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    5500:	0152      	lsls	r2, r2, #5
    5502:	18b9      	adds	r1, r7, r2
    5504:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    5506:	4423      	add	r3, r4
    5508:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    550c:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    5510:	684b      	ldr	r3, [r1, #4]
    5512:	f364 339b 	bfi	r3, r4, #14, #14
    5516:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    5518:	684b      	ldr	r3, [r1, #4]
    551a:	f360 030d 	bfi	r3, r0, #0, #14
    551e:	604b      	str	r3, [r1, #4]
    5520:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    5524:	21b0      	movs	r1, #176	; 0xb0
    5526:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    552a:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    552e:	461a      	mov	r2, r3
    5530:	2310      	movs	r3, #16
    5532:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    5536:	e760      	b.n	53fa <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5538:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    553c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    553e:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5542:	2605      	movs	r6, #5
    5544:	e7c3      	b.n	54ce <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5546:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    554a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    554c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5550:	2603      	movs	r6, #3
    5552:	e7bc      	b.n	54ce <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5554:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5558:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    555a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    555e:	2606      	movs	r6, #6
    5560:	e7b5      	b.n	54ce <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5562:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5566:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5568:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    556c:	2604      	movs	r6, #4
    556e:	e7ae      	b.n	54ce <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5570:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5574:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5576:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    557a:	2602      	movs	r6, #2
    557c:	e7a7      	b.n	54ce <_usb_d_dev_ep_enable+0x1fe>
    557e:	bf00      	nop
    5580:	200004a4 	.word	0x200004a4
    5584:	0fffc000 	.word	0x0fffc000

00005588 <_usb_d_dev_ep_stall>:
{
    5588:	b470      	push	{r4, r5, r6}
    558a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    558c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    558e:	f010 000f 	ands.w	r0, r0, #15
    5592:	d008      	beq.n	55a6 <_usb_d_dev_ep_stall+0x1e>
    5594:	2b00      	cmp	r3, #0
    5596:	bfb4      	ite	lt
    5598:	1d43      	addlt	r3, r0, #5
    559a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    559c:	2805      	cmp	r0, #5
    559e:	d903      	bls.n	55a8 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    55a0:	f06f 0011 	mvn.w	r0, #17
    55a4:	e018      	b.n	55d8 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    55a6:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    55a8:	2901      	cmp	r1, #1
    55aa:	d017      	beq.n	55dc <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    55ac:	2900      	cmp	r1, #0
    55ae:	d03a      	beq.n	5626 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    55b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    55b4:	4a45      	ldr	r2, [pc, #276]	; (56cc <_usb_d_dev_ep_stall+0x144>)
    55b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    55ba:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    55be:	f003 030f 	and.w	r3, r3, #15
    55c2:	015b      	lsls	r3, r3, #5
    55c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    55c8:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    55cc:	2310      	movs	r3, #16
    55ce:	40a3      	lsls	r3, r4
    55d0:	421a      	tst	r2, r3
    55d2:	bf14      	ite	ne
    55d4:	2001      	movne	r0, #1
    55d6:	2000      	moveq	r0, #0
}
    55d8:	bc70      	pop	{r4, r5, r6}
    55da:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    55dc:	2510      	movs	r5, #16
    55de:	40a5      	lsls	r5, r4
    55e0:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    55e2:	493a      	ldr	r1, [pc, #232]	; (56cc <_usb_d_dev_ep_stall+0x144>)
    55e4:	009e      	lsls	r6, r3, #2
    55e6:	18f2      	adds	r2, r6, r3
    55e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    55ec:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    55f0:	f002 020f 	and.w	r2, r2, #15
    55f4:	0150      	lsls	r0, r2, #5
    55f6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    55fa:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    55fe:	2020      	movs	r0, #32
    5600:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    5604:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5606:	0152      	lsls	r2, r2, #5
    5608:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    560c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    5610:	4433      	add	r3, r6
    5612:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5616:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    561a:	f042 0208 	orr.w	r2, r2, #8
    561e:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    5622:	2000      	movs	r0, #0
    5624:	e7d8      	b.n	55d8 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    5626:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    562a:	4928      	ldr	r1, [pc, #160]	; (56cc <_usb_d_dev_ep_stall+0x144>)
    562c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5630:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    5634:	f002 020f 	and.w	r2, r2, #15
    5638:	0151      	lsls	r1, r2, #5
    563a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    563e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5642:	2010      	movs	r0, #16
    5644:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    5646:	4205      	tst	r5, r0
    5648:	d03c      	beq.n	56c4 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    564a:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    564c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    5650:	2020      	movs	r0, #32
    5652:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    5654:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    5656:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    565a:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    565e:	4202      	tst	r2, r0
    5660:	d007      	beq.n	5672 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5662:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    5666:	2201      	movs	r2, #1
    5668:	fa02 f404 	lsl.w	r4, r2, r4
    566c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    566e:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    5672:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5676:	4815      	ldr	r0, [pc, #84]	; (56cc <_usb_d_dev_ep_stall+0x144>)
    5678:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    567c:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    5680:	f002 0207 	and.w	r2, r2, #7
    5684:	2a01      	cmp	r2, #1
    5686:	d00c      	beq.n	56a2 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    5688:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    568c:	4a0f      	ldr	r2, [pc, #60]	; (56cc <_usb_d_dev_ep_stall+0x144>)
    568e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5692:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    5696:	f36f 02c3 	bfc	r2, #3, #1
    569a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    569e:	2000      	movs	r0, #0
    56a0:	e79a      	b.n	55d8 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    56a2:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    56a6:	f012 0f30 	tst.w	r2, #48	; 0x30
    56aa:	d10d      	bne.n	56c8 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    56ac:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    56b0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    56b4:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    56b8:	f36f 02c3 	bfc	r2, #3, #1
    56bc:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    56c0:	2000      	movs	r0, #0
    56c2:	e789      	b.n	55d8 <_usb_d_dev_ep_stall+0x50>
    56c4:	2000      	movs	r0, #0
    56c6:	e787      	b.n	55d8 <_usb_d_dev_ep_stall+0x50>
    56c8:	2000      	movs	r0, #0
    56ca:	e785      	b.n	55d8 <_usb_d_dev_ep_stall+0x50>
    56cc:	200004a4 	.word	0x200004a4

000056d0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    56d0:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    56d2:	f000 040f 	and.w	r4, r0, #15
    56d6:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    56d8:	4a14      	ldr	r2, [pc, #80]	; (572c <_usb_d_dev_ep_read_req+0x5c>)
    56da:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    56dc:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    56de:	6840      	ldr	r0, [r0, #4]
    56e0:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    56e4:	2c05      	cmp	r4, #5
    56e6:	d817      	bhi.n	5718 <_usb_d_dev_ep_read_req+0x48>
    56e8:	b1c9      	cbz	r1, 571e <_usb_d_dev_ep_read_req+0x4e>
    56ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    56ee:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    56f2:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    56f4:	2a11      	cmp	r2, #17
    56f6:	d115      	bne.n	5724 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    56f8:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    56fc:	f012 0f10 	tst.w	r2, #16
    5700:	d102      	bne.n	5708 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    5702:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    5704:	bc30      	pop	{r4, r5}
    5706:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    5708:	682c      	ldr	r4, [r5, #0]
    570a:	686a      	ldr	r2, [r5, #4]
    570c:	600c      	str	r4, [r1, #0]
    570e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5710:	2210      	movs	r2, #16
    5712:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    5716:	e7f5      	b.n	5704 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    5718:	f06f 0011 	mvn.w	r0, #17
    571c:	e7f2      	b.n	5704 <_usb_d_dev_ep_read_req+0x34>
    571e:	f06f 0011 	mvn.w	r0, #17
    5722:	e7ef      	b.n	5704 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    5724:	f06f 0012 	mvn.w	r0, #18
    5728:	e7ec      	b.n	5704 <_usb_d_dev_ep_read_req+0x34>
    572a:	bf00      	nop
    572c:	200004a4 	.word	0x200004a4

00005730 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    5730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5734:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    5736:	7a03      	ldrb	r3, [r0, #8]
    5738:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    573a:	f013 030f 	ands.w	r3, r3, #15
    573e:	f000 80c2 	beq.w	58c6 <_usb_d_dev_ep_trans+0x196>
    5742:	2e00      	cmp	r6, #0
    5744:	bfb4      	ite	lt
    5746:	1d5a      	addlt	r2, r3, #5
    5748:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    574a:	4614      	mov	r4, r2
    574c:	4969      	ldr	r1, [pc, #420]	; (58f4 <_usb_d_dev_ep_trans+0x1c4>)
    574e:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    5752:	1c55      	adds	r5, r2, #1
    5754:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    5758:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    575c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5760:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5764:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    5768:	f240 31ff 	movw	r1, #1023	; 0x3ff
    576c:	428a      	cmp	r2, r1
    576e:	d025      	beq.n	57bc <_usb_d_dev_ep_trans+0x8c>
    5770:	1e55      	subs	r5, r2, #1
    5772:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    5774:	6841      	ldr	r1, [r0, #4]
    5776:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    5778:	2b05      	cmp	r3, #5
    577a:	f200 8092 	bhi.w	58a2 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    577e:	6803      	ldr	r3, [r0, #0]
    5780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5784:	d31c      	bcc.n	57c0 <_usb_d_dev_ep_trans+0x90>
    5786:	eb03 0c01 	add.w	ip, r3, r1
    578a:	f8df e180 	ldr.w	lr, [pc, #384]	; 590c <_usb_d_dev_ep_trans+0x1dc>
    578e:	45f4      	cmp	ip, lr
    5790:	d816      	bhi.n	57c0 <_usb_d_dev_ep_trans+0x90>
    5792:	f013 0f03 	tst.w	r3, #3
    5796:	d113      	bne.n	57c0 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    5798:	2e00      	cmp	r6, #0
    579a:	db2a      	blt.n	57f2 <_usb_d_dev_ep_trans+0xc2>
    579c:	428a      	cmp	r2, r1
    579e:	f200 809c 	bhi.w	58da <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    57a2:	b34d      	cbz	r5, 57f8 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    57a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    57a8:	4a52      	ldr	r2, [pc, #328]	; (58f4 <_usb_d_dev_ep_trans+0x1c4>)
    57aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    57ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    57b2:	2b00      	cmp	r3, #0
    57b4:	d07b      	beq.n	58ae <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    57b6:	f04f 0800 	mov.w	r8, #0
    57ba:	e00c      	b.n	57d6 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    57bc:	4615      	mov	r5, r2
    57be:	e7d9      	b.n	5774 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    57c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    57c4:	4a4b      	ldr	r2, [pc, #300]	; (58f4 <_usb_d_dev_ep_trans+0x1c4>)
    57c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    57ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    57ce:	2b00      	cmp	r3, #0
    57d0:	d06a      	beq.n	58a8 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    57d2:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    57d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    57da:	4a46      	ldr	r2, [pc, #280]	; (58f4 <_usb_d_dev_ep_trans+0x1c4>)
    57dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    57e0:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    57e4:	f013 0f08 	tst.w	r3, #8
    57e8:	d009      	beq.n	57fe <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    57ea:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    57ec:	b003      	add	sp, #12
    57ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    57f2:	f04f 0800 	mov.w	r8, #0
    57f6:	e7ee      	b.n	57d6 <_usb_d_dev_ep_trans+0xa6>
    57f8:	f04f 0800 	mov.w	r8, #0
    57fc:	e7eb      	b.n	57d6 <_usb_d_dev_ep_trans+0xa6>
    57fe:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    5800:	a801      	add	r0, sp, #4
    5802:	4b3d      	ldr	r3, [pc, #244]	; (58f8 <_usb_d_dev_ep_trans+0x1c8>)
    5804:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5806:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    580a:	4a3a      	ldr	r2, [pc, #232]	; (58f4 <_usb_d_dev_ep_trans+0x1c4>)
    580c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5810:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5814:	f013 0f40 	tst.w	r3, #64	; 0x40
    5818:	d13c      	bne.n	5894 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    581a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    581e:	4b35      	ldr	r3, [pc, #212]	; (58f4 <_usb_d_dev_ep_trans+0x1c4>)
    5820:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5824:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    5828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    582c:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    5830:	a801      	add	r0, sp, #4
    5832:	4b32      	ldr	r3, [pc, #200]	; (58fc <_usb_d_dev_ep_trans+0x1cc>)
    5834:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    5836:	f8da 3000 	ldr.w	r3, [sl]
    583a:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    583e:	f8da 3004 	ldr.w	r3, [sl, #4]
    5842:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    5846:	2300      	movs	r3, #0
    5848:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    584c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    584e:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    5852:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    5856:	f368 1345 	bfi	r3, r8, #5, #1
    585a:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    585e:	f89a 3009 	ldrb.w	r3, [sl, #9]
    5862:	b1e3      	cbz	r3, 589e <_usb_d_dev_ep_trans+0x16e>
    5864:	fab5 f585 	clz	r5, r5
    5868:	096d      	lsrs	r5, r5, #5
    586a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    586e:	4b21      	ldr	r3, [pc, #132]	; (58f4 <_usb_d_dev_ep_trans+0x1c4>)
    5870:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5874:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    5878:	f365 1304 	bfi	r3, r5, #4, #1
    587c:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    5880:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    5882:	f04f 0100 	mov.w	r1, #0
    5886:	4638      	mov	r0, r7
    5888:	bfb4      	ite	lt
    588a:	4b1d      	ldrlt	r3, [pc, #116]	; (5900 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    588c:	4b1d      	ldrge	r3, [pc, #116]	; (5904 <_usb_d_dev_ep_trans+0x1d4>)
    588e:	4798      	blx	r3
	return ERR_NONE;
    5890:	2000      	movs	r0, #0
    5892:	e7ab      	b.n	57ec <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    5894:	a801      	add	r0, sp, #4
    5896:	4b19      	ldr	r3, [pc, #100]	; (58fc <_usb_d_dev_ep_trans+0x1cc>)
    5898:	4798      	blx	r3
		return USB_BUSY;
    589a:	2001      	movs	r0, #1
    589c:	e7a6      	b.n	57ec <_usb_d_dev_ep_trans+0xbc>
    589e:	2500      	movs	r5, #0
    58a0:	e7e3      	b.n	586a <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    58a2:	f06f 0011 	mvn.w	r0, #17
    58a6:	e7a1      	b.n	57ec <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    58a8:	f06f 0012 	mvn.w	r0, #18
    58ac:	e79e      	b.n	57ec <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    58ae:	f06f 0011 	mvn.w	r0, #17
    58b2:	e79b      	b.n	57ec <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    58b4:	f06f 0012 	mvn.w	r0, #18
    58b8:	e798      	b.n	57ec <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    58ba:	6841      	ldr	r1, [r0, #4]
    58bc:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    58c0:	4f11      	ldr	r7, [pc, #68]	; (5908 <_usb_d_dev_ep_trans+0x1d8>)
    58c2:	2400      	movs	r4, #0
    58c4:	e75b      	b.n	577e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    58c6:	4a0b      	ldr	r2, [pc, #44]	; (58f4 <_usb_d_dev_ep_trans+0x1c4>)
    58c8:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    58cc:	f240 31ff 	movw	r1, #1023	; 0x3ff
    58d0:	428a      	cmp	r2, r1
    58d2:	d0f2      	beq.n	58ba <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    58d4:	4f0c      	ldr	r7, [pc, #48]	; (5908 <_usb_d_dev_ep_trans+0x1d8>)
    58d6:	2400      	movs	r4, #0
    58d8:	e74a      	b.n	5770 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    58da:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    58de:	4a05      	ldr	r2, [pc, #20]	; (58f4 <_usb_d_dev_ep_trans+0x1c4>)
    58e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    58e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    58e8:	2b00      	cmp	r3, #0
    58ea:	d0e3      	beq.n	58b4 <_usb_d_dev_ep_trans+0x184>
    58ec:	f04f 0801 	mov.w	r8, #1
    58f0:	e771      	b.n	57d6 <_usb_d_dev_ep_trans+0xa6>
    58f2:	bf00      	nop
    58f4:	200004a4 	.word	0x200004a4
    58f8:	00001af9 	.word	0x00001af9
    58fc:	00001b07 	.word	0x00001b07
    5900:	000049e1 	.word	0x000049e1
    5904:	00004b65 	.word	0x00004b65
    5908:	20000578 	.word	0x20000578
    590c:	20041fff 	.word	0x20041fff

00005910 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5910:	4b07      	ldr	r3, [pc, #28]	; (5930 <_usb_d_dev_register_callback+0x20>)
    5912:	2900      	cmp	r1, #0
    5914:	bf08      	it	eq
    5916:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    5918:	2801      	cmp	r0, #1
    591a:	d004      	beq.n	5926 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    591c:	b910      	cbnz	r0, 5924 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    591e:	4b05      	ldr	r3, [pc, #20]	; (5934 <_usb_d_dev_register_callback+0x24>)
    5920:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    5924:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    5926:	4b03      	ldr	r3, [pc, #12]	; (5934 <_usb_d_dev_register_callback+0x24>)
    5928:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    592c:	4770      	bx	lr
    592e:	bf00      	nop
    5930:	00004751 	.word	0x00004751
    5934:	200004a4 	.word	0x200004a4

00005938 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5938:	4b0a      	ldr	r3, [pc, #40]	; (5964 <_usb_d_dev_register_ep_callback+0x2c>)
    593a:	2900      	cmp	r1, #0
    593c:	bf08      	it	eq
    593e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    5940:	4603      	mov	r3, r0
    5942:	b138      	cbz	r0, 5954 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    5944:	2801      	cmp	r0, #1
    5946:	d009      	beq.n	595c <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    5948:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    594a:	bf04      	itt	eq
    594c:	4b06      	ldreq	r3, [pc, #24]	; (5968 <_usb_d_dev_register_ep_callback+0x30>)
    594e:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    5952:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    5954:	4b04      	ldr	r3, [pc, #16]	; (5968 <_usb_d_dev_register_ep_callback+0x30>)
    5956:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    595a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    595c:	4b02      	ldr	r3, [pc, #8]	; (5968 <_usb_d_dev_register_ep_callback+0x30>)
    595e:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    5962:	4770      	bx	lr
    5964:	00004751 	.word	0x00004751
    5968:	200004a4 	.word	0x200004a4

0000596c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    596c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    596e:	4b01      	ldr	r3, [pc, #4]	; (5974 <USB_0_Handler+0x8>)
    5970:	4798      	blx	r3
    5972:	bd08      	pop	{r3, pc}
    5974:	00004d55 	.word	0x00004d55

00005978 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    5978:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    597a:	4b01      	ldr	r3, [pc, #4]	; (5980 <USB_1_Handler+0x8>)
    597c:	4798      	blx	r3
    597e:	bd08      	pop	{r3, pc}
    5980:	00004d55 	.word	0x00004d55

00005984 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    5984:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5986:	4b01      	ldr	r3, [pc, #4]	; (598c <USB_2_Handler+0x8>)
    5988:	4798      	blx	r3
    598a:	bd08      	pop	{r3, pc}
    598c:	00004d55 	.word	0x00004d55

00005990 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    5990:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5992:	4b01      	ldr	r3, [pc, #4]	; (5998 <USB_3_Handler+0x8>)
    5994:	4798      	blx	r3
    5996:	bd08      	pop	{r3, pc}
    5998:	00004d55 	.word	0x00004d55

0000599c <_wdt_init>:
int32_t _wdt_init(struct wdt_dev *const dev)
{
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    599c:	6803      	ldr	r3, [r0, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    599e:	689a      	ldr	r2, [r3, #8]
    59a0:	f012 0f0e 	tst.w	r2, #14
    59a4:	d1fb      	bne.n	599e <_wdt_init+0x2>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    59a6:	781a      	ldrb	r2, [r3, #0]
    59a8:	09d2      	lsrs	r2, r2, #7
    59aa:	d118      	bne.n	59de <_wdt_init+0x42>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    59ac:	689a      	ldr	r2, [r3, #8]
    59ae:	f012 0f0e 	tst.w	r2, #14
    59b2:	d1fb      	bne.n	59ac <_wdt_init+0x10>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    59b4:	781a      	ldrb	r2, [r3, #0]
    59b6:	f012 0f02 	tst.w	r2, #2
    59ba:	d113      	bne.n	59e4 <_wdt_init+0x48>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    59bc:	781a      	ldrb	r2, [r3, #0]
    59be:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    59c2:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    59c4:	689a      	ldr	r2, [r3, #8]
    59c6:	f012 0f0e 	tst.w	r2, #14
    59ca:	d1fb      	bne.n	59c4 <_wdt_init+0x28>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    59cc:	6802      	ldr	r2, [r0, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    59ce:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    59d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    59d4:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    59d8:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    59da:	2000      	movs	r0, #0
    59dc:	4770      	bx	lr
		return ERR_DENIED;
    59de:	f06f 0010 	mvn.w	r0, #16
    59e2:	4770      	bx	lr
    59e4:	f06f 0010 	mvn.w	r0, #16
}
    59e8:	4770      	bx	lr
	...

000059ec <main>:




int main(void)
{
    59ec:	b508      	push	{r3, lr}



	atmel_start_init();	
    59ee:	4b04      	ldr	r3, [pc, #16]	; (5a00 <main+0x14>)
    59f0:	4798      	blx	r3

	
	printf("Initialization\r\n");
    59f2:	4804      	ldr	r0, [pc, #16]	; (5a04 <main+0x18>)
    59f4:	4b04      	ldr	r3, [pc, #16]	; (5a08 <main+0x1c>)
    59f6:	4798      	blx	r3
	
	#ifdef HARDWARETEST
	
		#include "grid/grid_hardwaretest.h"
		
		grid_hardwaretest_main();
    59f8:	4b04      	ldr	r3, [pc, #16]	; (5a0c <main+0x20>)
    59fa:	4798      	blx	r3
    59fc:	e7fe      	b.n	59fc <main+0x10>
    59fe:	bf00      	nop
    5a00:	000002d1 	.word	0x000002d1
    5a04:	00008150 	.word	0x00008150
    5a08:	00006c41 	.word	0x00006c41
    5a0c:	000014e9 	.word	0x000014e9

00005a10 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    5a10:	b940      	cbnz	r0, 5a24 <_read+0x14>
{
    5a12:	b508      	push	{r3, lr}
    5a14:	460b      	mov	r3, r1
    5a16:	4611      	mov	r1, r2
    5a18:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    5a1a:	4b04      	ldr	r3, [pc, #16]	; (5a2c <_read+0x1c>)
    5a1c:	4798      	blx	r3
    5a1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    5a22:	bd08      	pop	{r3, pc}
		return -1;
    5a24:	f04f 30ff 	mov.w	r0, #4294967295
    5a28:	4770      	bx	lr
    5a2a:	bf00      	nop
    5a2c:	00005a81 	.word	0x00005a81

00005a30 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    5a30:	3801      	subs	r0, #1
    5a32:	2802      	cmp	r0, #2
    5a34:	d808      	bhi.n	5a48 <_write+0x18>
{
    5a36:	b508      	push	{r3, lr}
    5a38:	460b      	mov	r3, r1
    5a3a:	4611      	mov	r1, r2
    5a3c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    5a3e:	4b04      	ldr	r3, [pc, #16]	; (5a50 <_write+0x20>)
    5a40:	4798      	blx	r3
    5a42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    5a46:	bd08      	pop	{r3, pc}
		return -1;
    5a48:	f04f 30ff 	mov.w	r0, #4294967295
    5a4c:	4770      	bx	lr
    5a4e:	bf00      	nop
    5a50:	00005aa5 	.word	0x00005aa5

00005a54 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    5a54:	b570      	push	{r4, r5, r6, lr}
    5a56:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    5a58:	4d06      	ldr	r5, [pc, #24]	; (5a74 <stdio_io_init+0x20>)
    5a5a:	682b      	ldr	r3, [r5, #0]
    5a5c:	2100      	movs	r1, #0
    5a5e:	6898      	ldr	r0, [r3, #8]
    5a60:	4c05      	ldr	r4, [pc, #20]	; (5a78 <stdio_io_init+0x24>)
    5a62:	47a0      	blx	r4
	setbuf(stdin, NULL);
    5a64:	682b      	ldr	r3, [r5, #0]
    5a66:	2100      	movs	r1, #0
    5a68:	6858      	ldr	r0, [r3, #4]
    5a6a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    5a6c:	4b03      	ldr	r3, [pc, #12]	; (5a7c <stdio_io_init+0x28>)
    5a6e:	601e      	str	r6, [r3, #0]
    5a70:	bd70      	pop	{r4, r5, r6, pc}
    5a72:	bf00      	nop
    5a74:	20000058 	.word	0x20000058
    5a78:	00006c71 	.word	0x00006c71
    5a7c:	20000864 	.word	0x20000864

00005a80 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    5a80:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    5a82:	4b06      	ldr	r3, [pc, #24]	; (5a9c <stdio_io_read+0x1c>)
    5a84:	681b      	ldr	r3, [r3, #0]
    5a86:	b133      	cbz	r3, 5a96 <stdio_io_read+0x16>
    5a88:	460a      	mov	r2, r1
    5a8a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    5a8c:	b292      	uxth	r2, r2
    5a8e:	4618      	mov	r0, r3
    5a90:	4b03      	ldr	r3, [pc, #12]	; (5aa0 <stdio_io_read+0x20>)
    5a92:	4798      	blx	r3
    5a94:	bd08      	pop	{r3, pc}
		return 0;
    5a96:	2000      	movs	r0, #0
}
    5a98:	bd08      	pop	{r3, pc}
    5a9a:	bf00      	nop
    5a9c:	20000864 	.word	0x20000864
    5aa0:	00001c89 	.word	0x00001c89

00005aa4 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    5aa4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    5aa6:	4b06      	ldr	r3, [pc, #24]	; (5ac0 <stdio_io_write+0x1c>)
    5aa8:	681b      	ldr	r3, [r3, #0]
    5aaa:	b133      	cbz	r3, 5aba <stdio_io_write+0x16>
    5aac:	460a      	mov	r2, r1
    5aae:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    5ab0:	b292      	uxth	r2, r2
    5ab2:	4618      	mov	r0, r3
    5ab4:	4b03      	ldr	r3, [pc, #12]	; (5ac4 <stdio_io_write+0x20>)
    5ab6:	4798      	blx	r3
    5ab8:	bd08      	pop	{r3, pc}
		return 0;
    5aba:	2000      	movs	r0, #0
}
    5abc:	bd08      	pop	{r3, pc}
    5abe:	bf00      	nop
    5ac0:	20000864 	.word	0x20000864
    5ac4:	00001c81 	.word	0x00001c81

00005ac8 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    5ac8:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    5aca:	4c04      	ldr	r4, [pc, #16]	; (5adc <stdio_redirect_init+0x14>)
    5acc:	4620      	mov	r0, r4
    5ace:	4b04      	ldr	r3, [pc, #16]	; (5ae0 <stdio_redirect_init+0x18>)
    5ad0:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    5ad2:	4620      	mov	r0, r4
    5ad4:	4b03      	ldr	r3, [pc, #12]	; (5ae4 <stdio_redirect_init+0x1c>)
    5ad6:	4798      	blx	r3
    5ad8:	bd10      	pop	{r4, pc}
    5ada:	bf00      	nop
    5adc:	20000a44 	.word	0x20000a44
    5ae0:	00002221 	.word	0x00002221
    5ae4:	00005a55 	.word	0x00005a55

00005ae8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aea:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    5aec:	780b      	ldrb	r3, [r1, #0]
    5aee:	f3c3 1441 	ubfx	r4, r3, #5, #2
    5af2:	2c01      	cmp	r4, #1
    5af4:	d15e      	bne.n	5bb4 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    5af6:	888c      	ldrh	r4, [r1, #4]
    5af8:	4d35      	ldr	r5, [pc, #212]	; (5bd0 <cdcdf_acm_req+0xe8>)
    5afa:	782d      	ldrb	r5, [r5, #0]
    5afc:	42a5      	cmp	r5, r4
    5afe:	d003      	beq.n	5b08 <cdcdf_acm_req+0x20>
    5b00:	4d33      	ldr	r5, [pc, #204]	; (5bd0 <cdcdf_acm_req+0xe8>)
    5b02:	786d      	ldrb	r5, [r5, #1]
    5b04:	42a5      	cmp	r5, r4
    5b06:	d158      	bne.n	5bba <cdcdf_acm_req+0xd2>
    5b08:	4616      	mov	r6, r2
    5b0a:	460c      	mov	r4, r1
    5b0c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    5b0e:	f013 0f80 	tst.w	r3, #128	; 0x80
    5b12:	d10c      	bne.n	5b2e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    5b14:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    5b16:	4b2f      	ldr	r3, [pc, #188]	; (5bd4 <cdcdf_acm_req+0xec>)
    5b18:	4798      	blx	r3
    5b1a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    5b1c:	7863      	ldrb	r3, [r4, #1]
    5b1e:	2b20      	cmp	r3, #32
    5b20:	d013      	beq.n	5b4a <cdcdf_acm_req+0x62>
    5b22:	2b22      	cmp	r3, #34	; 0x22
    5b24:	d032      	beq.n	5b8c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    5b26:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    5b2a:	b003      	add	sp, #12
    5b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    5b2e:	2a01      	cmp	r2, #1
    5b30:	d046      	beq.n	5bc0 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    5b32:	784b      	ldrb	r3, [r1, #1]
    5b34:	2b21      	cmp	r3, #33	; 0x21
    5b36:	d145      	bne.n	5bc4 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5b38:	88cb      	ldrh	r3, [r1, #6]
    5b3a:	2b07      	cmp	r3, #7
    5b3c:	d145      	bne.n	5bca <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    5b3e:	2300      	movs	r3, #0
    5b40:	2207      	movs	r2, #7
    5b42:	4925      	ldr	r1, [pc, #148]	; (5bd8 <cdcdf_acm_req+0xf0>)
    5b44:	4c25      	ldr	r4, [pc, #148]	; (5bdc <cdcdf_acm_req+0xf4>)
    5b46:	47a0      	blx	r4
    5b48:	e7ef      	b.n	5b2a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5b4a:	2f07      	cmp	r7, #7
    5b4c:	d12b      	bne.n	5ba6 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    5b4e:	b1be      	cbz	r6, 5b80 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    5b50:	6800      	ldr	r0, [r0, #0]
    5b52:	9000      	str	r0, [sp, #0]
    5b54:	888a      	ldrh	r2, [r1, #4]
    5b56:	798b      	ldrb	r3, [r1, #6]
    5b58:	f8ad 2004 	strh.w	r2, [sp, #4]
    5b5c:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    5b60:	4b1b      	ldr	r3, [pc, #108]	; (5bd0 <cdcdf_acm_req+0xe8>)
    5b62:	691b      	ldr	r3, [r3, #16]
    5b64:	b113      	cbz	r3, 5b6c <cdcdf_acm_req+0x84>
    5b66:	4668      	mov	r0, sp
    5b68:	4798      	blx	r3
    5b6a:	b1f8      	cbz	r0, 5bac <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    5b6c:	4b18      	ldr	r3, [pc, #96]	; (5bd0 <cdcdf_acm_req+0xe8>)
    5b6e:	aa02      	add	r2, sp, #8
    5b70:	e912 0003 	ldmdb	r2, {r0, r1}
    5b74:	6098      	str	r0, [r3, #8]
    5b76:	8199      	strh	r1, [r3, #12]
    5b78:	0c09      	lsrs	r1, r1, #16
    5b7a:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    5b7c:	2000      	movs	r0, #0
    5b7e:	e7d4      	b.n	5b2a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    5b80:	2300      	movs	r3, #0
    5b82:	2207      	movs	r2, #7
    5b84:	4628      	mov	r0, r5
    5b86:	4c15      	ldr	r4, [pc, #84]	; (5bdc <cdcdf_acm_req+0xf4>)
    5b88:	47a0      	blx	r4
    5b8a:	e7ce      	b.n	5b2a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    5b8c:	2300      	movs	r3, #0
    5b8e:	461a      	mov	r2, r3
    5b90:	4619      	mov	r1, r3
    5b92:	4618      	mov	r0, r3
    5b94:	4d11      	ldr	r5, [pc, #68]	; (5bdc <cdcdf_acm_req+0xf4>)
    5b96:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    5b98:	4b0d      	ldr	r3, [pc, #52]	; (5bd0 <cdcdf_acm_req+0xe8>)
    5b9a:	695b      	ldr	r3, [r3, #20]
    5b9c:	b143      	cbz	r3, 5bb0 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    5b9e:	8860      	ldrh	r0, [r4, #2]
    5ba0:	4798      	blx	r3
		return ERR_NONE;
    5ba2:	2000      	movs	r0, #0
    5ba4:	e7c1      	b.n	5b2a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    5ba6:	f04f 30ff 	mov.w	r0, #4294967295
    5baa:	e7be      	b.n	5b2a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    5bac:	2000      	movs	r0, #0
    5bae:	e7bc      	b.n	5b2a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    5bb0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    5bb2:	e7ba      	b.n	5b2a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    5bb4:	f06f 0009 	mvn.w	r0, #9
    5bb8:	e7b7      	b.n	5b2a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    5bba:	f06f 0009 	mvn.w	r0, #9
    5bbe:	e7b4      	b.n	5b2a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    5bc0:	2000      	movs	r0, #0
    5bc2:	e7b2      	b.n	5b2a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    5bc4:	f06f 000c 	mvn.w	r0, #12
    5bc8:	e7af      	b.n	5b2a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    5bca:	f04f 30ff 	mov.w	r0, #4294967295
    5bce:	e7ac      	b.n	5b2a <cdcdf_acm_req+0x42>
    5bd0:	20000868 	.word	0x20000868
    5bd4:	000067f9 	.word	0x000067f9
    5bd8:	20000870 	.word	0x20000870
    5bdc:	0000632d 	.word	0x0000632d

00005be0 <cdcdf_acm_ctrl>:
{
    5be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5be4:	b083      	sub	sp, #12
    5be6:	4616      	mov	r6, r2
	switch (ctrl) {
    5be8:	2901      	cmp	r1, #1
    5bea:	d066      	beq.n	5cba <cdcdf_acm_ctrl+0xda>
    5bec:	b141      	cbz	r1, 5c00 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    5bee:	2902      	cmp	r1, #2
    5bf0:	bf0c      	ite	eq
    5bf2:	f06f 001a 	mvneq.w	r0, #26
    5bf6:	f06f 000c 	mvnne.w	r0, #12
}
    5bfa:	b003      	add	sp, #12
    5bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    5c00:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    5c04:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    5c06:	2800      	cmp	r0, #0
    5c08:	f000 8085 	beq.w	5d16 <cdcdf_acm_ctrl+0x136>
    5c0c:	f10a 3bff 	add.w	fp, sl, #4294967295
    5c10:	f10a 0301 	add.w	r3, sl, #1
    5c14:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    5c16:	4f46      	ldr	r7, [pc, #280]	; (5d30 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    5c18:	f8df 9124 	ldr.w	r9, [pc, #292]	; 5d40 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    5c1c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 5d44 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    5c20:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    5c22:	7943      	ldrb	r3, [r0, #5]
    5c24:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    5c28:	2b02      	cmp	r3, #2
    5c2a:	d002      	beq.n	5c32 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    5c2c:	f06f 0009 	mvn.w	r0, #9
    5c30:	e7e3      	b.n	5bfa <cdcdf_acm_ctrl+0x1a>
    5c32:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    5c36:	f89b 3000 	ldrb.w	r3, [fp]
    5c3a:	429a      	cmp	r2, r3
    5c3c:	d06e      	beq.n	5d1c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    5c3e:	2bff      	cmp	r3, #255	; 0xff
    5c40:	d16f      	bne.n	5d22 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    5c42:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    5c46:	2205      	movs	r2, #5
    5c48:	6871      	ldr	r1, [r6, #4]
    5c4a:	4b3a      	ldr	r3, [pc, #232]	; (5d34 <cdcdf_acm_ctrl+0x154>)
    5c4c:	4798      	blx	r3
		while (NULL != ep) {
    5c4e:	4604      	mov	r4, r0
    5c50:	b1f8      	cbz	r0, 5c92 <cdcdf_acm_ctrl+0xb2>
    5c52:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    5c56:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    5c58:	7963      	ldrb	r3, [r4, #5]
    5c5a:	7922      	ldrb	r2, [r4, #4]
    5c5c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    5c60:	b292      	uxth	r2, r2
    5c62:	78e1      	ldrb	r1, [r4, #3]
    5c64:	4628      	mov	r0, r5
    5c66:	47b8      	blx	r7
    5c68:	2800      	cmp	r0, #0
    5c6a:	d15d      	bne.n	5d28 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    5c6c:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    5c70:	bf14      	ite	ne
    5c72:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    5c76:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    5c7a:	4628      	mov	r0, r5
    5c7c:	47c8      	blx	r9
			desc->sod = ep;
    5c7e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    5c80:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    5c82:	6871      	ldr	r1, [r6, #4]
    5c84:	4420      	add	r0, r4
    5c86:	47c0      	blx	r8
		while (NULL != ep) {
    5c88:	4604      	mov	r4, r0
    5c8a:	2800      	cmp	r0, #0
    5c8c:	d1e3      	bne.n	5c56 <cdcdf_acm_ctrl+0x76>
    5c8e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    5c92:	6833      	ldr	r3, [r6, #0]
    5c94:	7818      	ldrb	r0, [r3, #0]
    5c96:	2204      	movs	r2, #4
    5c98:	6871      	ldr	r1, [r6, #4]
    5c9a:	4418      	add	r0, r3
    5c9c:	4b25      	ldr	r3, [pc, #148]	; (5d34 <cdcdf_acm_ctrl+0x154>)
    5c9e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    5ca0:	9b00      	ldr	r3, [sp, #0]
    5ca2:	459b      	cmp	fp, r3
    5ca4:	d004      	beq.n	5cb0 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    5ca6:	2800      	cmp	r0, #0
    5ca8:	d1ba      	bne.n	5c20 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    5caa:	f06f 0009 	mvn.w	r0, #9
    5cae:	e7a4      	b.n	5bfa <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    5cb0:	2201      	movs	r2, #1
    5cb2:	4b21      	ldr	r3, [pc, #132]	; (5d38 <cdcdf_acm_ctrl+0x158>)
    5cb4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    5cb6:	2000      	movs	r0, #0
    5cb8:	e79f      	b.n	5bfa <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    5cba:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    5cbc:	b142      	cbz	r2, 5cd0 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    5cbe:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    5cc0:	795b      	ldrb	r3, [r3, #5]
    5cc2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    5cc6:	2b02      	cmp	r3, #2
    5cc8:	d002      	beq.n	5cd0 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    5cca:	f06f 0009 	mvn.w	r0, #9
    5cce:	e794      	b.n	5bfa <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    5cd0:	7823      	ldrb	r3, [r4, #0]
    5cd2:	2bff      	cmp	r3, #255	; 0xff
    5cd4:	d008      	beq.n	5ce8 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    5cd6:	23ff      	movs	r3, #255	; 0xff
    5cd8:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    5cda:	78a0      	ldrb	r0, [r4, #2]
    5cdc:	4298      	cmp	r0, r3
    5cde:	d003      	beq.n	5ce8 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    5ce0:	4b16      	ldr	r3, [pc, #88]	; (5d3c <cdcdf_acm_ctrl+0x15c>)
    5ce2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    5ce4:	23ff      	movs	r3, #255	; 0xff
    5ce6:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    5ce8:	7863      	ldrb	r3, [r4, #1]
    5cea:	2bff      	cmp	r3, #255	; 0xff
    5cec:	d008      	beq.n	5d00 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    5cee:	23ff      	movs	r3, #255	; 0xff
    5cf0:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    5cf2:	78e0      	ldrb	r0, [r4, #3]
    5cf4:	4298      	cmp	r0, r3
    5cf6:	d003      	beq.n	5d00 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    5cf8:	4b10      	ldr	r3, [pc, #64]	; (5d3c <cdcdf_acm_ctrl+0x15c>)
    5cfa:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    5cfc:	23ff      	movs	r3, #255	; 0xff
    5cfe:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    5d00:	7920      	ldrb	r0, [r4, #4]
    5d02:	28ff      	cmp	r0, #255	; 0xff
    5d04:	d003      	beq.n	5d0e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    5d06:	4b0d      	ldr	r3, [pc, #52]	; (5d3c <cdcdf_acm_ctrl+0x15c>)
    5d08:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    5d0a:	23ff      	movs	r3, #255	; 0xff
    5d0c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    5d0e:	2000      	movs	r0, #0
    5d10:	4b09      	ldr	r3, [pc, #36]	; (5d38 <cdcdf_acm_ctrl+0x158>)
    5d12:	7158      	strb	r0, [r3, #5]
    5d14:	e771      	b.n	5bfa <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    5d16:	f06f 0009 	mvn.w	r0, #9
    5d1a:	e76e      	b.n	5bfa <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    5d1c:	f06f 0011 	mvn.w	r0, #17
    5d20:	e76b      	b.n	5bfa <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    5d22:	f06f 001b 	mvn.w	r0, #27
    5d26:	e768      	b.n	5bfa <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    5d28:	f06f 0013 	mvn.w	r0, #19
    5d2c:	e765      	b.n	5bfa <cdcdf_acm_ctrl+0x1a>
    5d2e:	bf00      	nop
    5d30:	00002505 	.word	0x00002505
    5d34:	00006819 	.word	0x00006819
    5d38:	20000868 	.word	0x20000868
    5d3c:	0000256d 	.word	0x0000256d
    5d40:	00002599 	.word	0x00002599
    5d44:	00006853 	.word	0x00006853

00005d48 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    5d48:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    5d4a:	4b0a      	ldr	r3, [pc, #40]	; (5d74 <cdcdf_acm_init+0x2c>)
    5d4c:	4798      	blx	r3
    5d4e:	2801      	cmp	r0, #1
    5d50:	d80c      	bhi.n	5d6c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    5d52:	4809      	ldr	r0, [pc, #36]	; (5d78 <cdcdf_acm_init+0x30>)
    5d54:	4b09      	ldr	r3, [pc, #36]	; (5d7c <cdcdf_acm_init+0x34>)
    5d56:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    5d58:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    5d5a:	3018      	adds	r0, #24
    5d5c:	4b08      	ldr	r3, [pc, #32]	; (5d80 <cdcdf_acm_init+0x38>)
    5d5e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    5d60:	4908      	ldr	r1, [pc, #32]	; (5d84 <cdcdf_acm_init+0x3c>)
    5d62:	2001      	movs	r0, #1
    5d64:	4b08      	ldr	r3, [pc, #32]	; (5d88 <cdcdf_acm_init+0x40>)
    5d66:	4798      	blx	r3
	return ERR_NONE;
    5d68:	2000      	movs	r0, #0
    5d6a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    5d6c:	f06f 0010 	mvn.w	r0, #16
}
    5d70:	bd08      	pop	{r3, pc}
    5d72:	bf00      	nop
    5d74:	00006805 	.word	0x00006805
    5d78:	20000868 	.word	0x20000868
    5d7c:	00005be1 	.word	0x00005be1
    5d80:	000067e5 	.word	0x000067e5
    5d84:	20000040 	.word	0x20000040
    5d88:	00006769 	.word	0x00006769

00005d8c <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5d8c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    5d8e:	780b      	ldrb	r3, [r1, #0]
    5d90:	2b81      	cmp	r3, #129	; 0x81
    5d92:	d010      	beq.n	5db6 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    5d94:	f3c3 1341 	ubfx	r3, r3, #5, #2
    5d98:	2b01      	cmp	r3, #1
    5d9a:	d13f      	bne.n	5e1c <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    5d9c:	888a      	ldrh	r2, [r1, #4]
    5d9e:	4b22      	ldr	r3, [pc, #136]	; (5e28 <hid_keyboard_req+0x9c>)
    5da0:	7b1b      	ldrb	r3, [r3, #12]
    5da2:	429a      	cmp	r2, r3
    5da4:	d13d      	bne.n	5e22 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    5da6:	784b      	ldrb	r3, [r1, #1]
    5da8:	2b03      	cmp	r3, #3
    5daa:	d028      	beq.n	5dfe <hid_keyboard_req+0x72>
    5dac:	2b0b      	cmp	r3, #11
    5dae:	d02c      	beq.n	5e0a <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    5db0:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    5db4:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    5db6:	784b      	ldrb	r3, [r1, #1]
    5db8:	2b06      	cmp	r3, #6
    5dba:	d002      	beq.n	5dc2 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    5dbc:	f06f 0009 	mvn.w	r0, #9
    5dc0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    5dc2:	888a      	ldrh	r2, [r1, #4]
    5dc4:	4b18      	ldr	r3, [pc, #96]	; (5e28 <hid_keyboard_req+0x9c>)
    5dc6:	7b1b      	ldrb	r3, [r3, #12]
    5dc8:	429a      	cmp	r2, r3
    5dca:	d002      	beq.n	5dd2 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    5dcc:	f06f 0009 	mvn.w	r0, #9
    5dd0:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    5dd2:	884b      	ldrh	r3, [r1, #2]
    5dd4:	0a1b      	lsrs	r3, r3, #8
    5dd6:	2b21      	cmp	r3, #33	; 0x21
    5dd8:	d004      	beq.n	5de4 <hid_keyboard_req+0x58>
    5dda:	2b22      	cmp	r3, #34	; 0x22
    5ddc:	d009      	beq.n	5df2 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    5dde:	f06f 000c 	mvn.w	r0, #12
    5de2:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    5de4:	4b10      	ldr	r3, [pc, #64]	; (5e28 <hid_keyboard_req+0x9c>)
    5de6:	6819      	ldr	r1, [r3, #0]
    5de8:	2300      	movs	r3, #0
    5dea:	780a      	ldrb	r2, [r1, #0]
    5dec:	4c0f      	ldr	r4, [pc, #60]	; (5e2c <hid_keyboard_req+0xa0>)
    5dee:	47a0      	blx	r4
    5df0:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    5df2:	2300      	movs	r3, #0
    5df4:	223b      	movs	r2, #59	; 0x3b
    5df6:	490e      	ldr	r1, [pc, #56]	; (5e30 <hid_keyboard_req+0xa4>)
    5df8:	4c0c      	ldr	r4, [pc, #48]	; (5e2c <hid_keyboard_req+0xa0>)
    5dfa:	47a0      	blx	r4
    5dfc:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    5dfe:	2300      	movs	r3, #0
    5e00:	2201      	movs	r2, #1
    5e02:	490c      	ldr	r1, [pc, #48]	; (5e34 <hid_keyboard_req+0xa8>)
    5e04:	4c09      	ldr	r4, [pc, #36]	; (5e2c <hid_keyboard_req+0xa0>)
    5e06:	47a0      	blx	r4
    5e08:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    5e0a:	884a      	ldrh	r2, [r1, #2]
    5e0c:	4b06      	ldr	r3, [pc, #24]	; (5e28 <hid_keyboard_req+0x9c>)
    5e0e:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    5e10:	2300      	movs	r3, #0
    5e12:	461a      	mov	r2, r3
    5e14:	4619      	mov	r1, r3
    5e16:	4c05      	ldr	r4, [pc, #20]	; (5e2c <hid_keyboard_req+0xa0>)
    5e18:	47a0      	blx	r4
    5e1a:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    5e1c:	f06f 0009 	mvn.w	r0, #9
    5e20:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    5e22:	f06f 0009 	mvn.w	r0, #9
    5e26:	bd10      	pop	{r4, pc}
    5e28:	2000088c 	.word	0x2000088c
    5e2c:	0000632d 	.word	0x0000632d
    5e30:	00008160 	.word	0x00008160
    5e34:	2000089b 	.word	0x2000089b

00005e38 <hid_keyboard_ctrl>:
{
    5e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e3c:	4614      	mov	r4, r2
	switch (ctrl) {
    5e3e:	2901      	cmp	r1, #1
    5e40:	d050      	beq.n	5ee4 <hid_keyboard_ctrl+0xac>
    5e42:	b141      	cbz	r1, 5e56 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    5e44:	2902      	cmp	r1, #2
    5e46:	bf0c      	ite	eq
    5e48:	f06f 051a 	mvneq.w	r5, #26
    5e4c:	f06f 050c 	mvnne.w	r5, #12
}
    5e50:	4628      	mov	r0, r5
    5e52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    5e56:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    5e5a:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d05e      	beq.n	5f1e <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    5e60:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    5e62:	795b      	ldrb	r3, [r3, #5]
    5e64:	2b03      	cmp	r3, #3
    5e66:	d15d      	bne.n	5f24 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    5e68:	f898 300c 	ldrb.w	r3, [r8, #12]
    5e6c:	429a      	cmp	r2, r3
    5e6e:	d05c      	beq.n	5f2a <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    5e70:	2bff      	cmp	r3, #255	; 0xff
    5e72:	d15d      	bne.n	5f30 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    5e74:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    5e78:	6823      	ldr	r3, [r4, #0]
    5e7a:	7818      	ldrb	r0, [r3, #0]
    5e7c:	2221      	movs	r2, #33	; 0x21
    5e7e:	6861      	ldr	r1, [r4, #4]
    5e80:	4418      	add	r0, r3
    5e82:	4b31      	ldr	r3, [pc, #196]	; (5f48 <hid_keyboard_ctrl+0x110>)
    5e84:	4798      	blx	r3
    5e86:	4b31      	ldr	r3, [pc, #196]	; (5f4c <hid_keyboard_ctrl+0x114>)
    5e88:	6018      	str	r0, [r3, #0]
    5e8a:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    5e8c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 5f54 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    5e90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 5f58 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    5e94:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 5f5c <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    5e98:	6823      	ldr	r3, [r4, #0]
    5e9a:	7818      	ldrb	r0, [r3, #0]
    5e9c:	6861      	ldr	r1, [r4, #4]
    5e9e:	4418      	add	r0, r3
    5ea0:	47c8      	blx	r9
		desc->sod = ep;
    5ea2:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    5ea4:	2800      	cmp	r0, #0
    5ea6:	d046      	beq.n	5f36 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    5ea8:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    5eaa:	7943      	ldrb	r3, [r0, #5]
    5eac:	7902      	ldrb	r2, [r0, #4]
    5eae:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    5eb2:	b292      	uxth	r2, r2
    5eb4:	78c1      	ldrb	r1, [r0, #3]
    5eb6:	4638      	mov	r0, r7
    5eb8:	47d0      	blx	sl
    5eba:	4605      	mov	r5, r0
    5ebc:	2800      	cmp	r0, #0
    5ebe:	d13d      	bne.n	5f3c <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    5ec0:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    5ec4:	bf14      	ite	ne
    5ec6:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    5eca:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    5ece:	4638      	mov	r0, r7
    5ed0:	47d8      	blx	fp
    5ed2:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    5ed4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    5ed8:	d1de      	bne.n	5e98 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    5eda:	4b1c      	ldr	r3, [pc, #112]	; (5f4c <hid_keyboard_ctrl+0x114>)
    5edc:	2201      	movs	r2, #1
    5ede:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    5ee0:	741a      	strb	r2, [r3, #16]
    5ee2:	e7b5      	b.n	5e50 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    5ee4:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    5ee6:	b11a      	cbz	r2, 5ef0 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    5ee8:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    5eea:	795b      	ldrb	r3, [r3, #5]
    5eec:	2b03      	cmp	r3, #3
    5eee:	d128      	bne.n	5f42 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    5ef0:	7b2b      	ldrb	r3, [r5, #12]
    5ef2:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    5ef4:	bf1c      	itt	ne
    5ef6:	23ff      	movne	r3, #255	; 0xff
    5ef8:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    5efa:	7b68      	ldrb	r0, [r5, #13]
    5efc:	28ff      	cmp	r0, #255	; 0xff
    5efe:	d003      	beq.n	5f08 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    5f00:	4b13      	ldr	r3, [pc, #76]	; (5f50 <hid_keyboard_ctrl+0x118>)
    5f02:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    5f04:	23ff      	movs	r3, #255	; 0xff
    5f06:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    5f08:	7ba8      	ldrb	r0, [r5, #14]
    5f0a:	28ff      	cmp	r0, #255	; 0xff
    5f0c:	d003      	beq.n	5f16 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    5f0e:	4b10      	ldr	r3, [pc, #64]	; (5f50 <hid_keyboard_ctrl+0x118>)
    5f10:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    5f12:	23ff      	movs	r3, #255	; 0xff
    5f14:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    5f16:	2500      	movs	r5, #0
    5f18:	4b0c      	ldr	r3, [pc, #48]	; (5f4c <hid_keyboard_ctrl+0x114>)
    5f1a:	741d      	strb	r5, [r3, #16]
    5f1c:	e798      	b.n	5e50 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    5f1e:	f06f 0509 	mvn.w	r5, #9
    5f22:	e795      	b.n	5e50 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    5f24:	f06f 0509 	mvn.w	r5, #9
    5f28:	e792      	b.n	5e50 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    5f2a:	f06f 0511 	mvn.w	r5, #17
    5f2e:	e78f      	b.n	5e50 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    5f30:	f06f 051b 	mvn.w	r5, #27
    5f34:	e78c      	b.n	5e50 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    5f36:	f06f 0509 	mvn.w	r5, #9
    5f3a:	e789      	b.n	5e50 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    5f3c:	f06f 0513 	mvn.w	r5, #19
    5f40:	e786      	b.n	5e50 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    5f42:	f06f 0509 	mvn.w	r5, #9
    5f46:	e783      	b.n	5e50 <hid_keyboard_ctrl+0x18>
    5f48:	00006819 	.word	0x00006819
    5f4c:	2000088c 	.word	0x2000088c
    5f50:	0000256d 	.word	0x0000256d
    5f54:	00006853 	.word	0x00006853
    5f58:	00002505 	.word	0x00002505
    5f5c:	00002599 	.word	0x00002599

00005f60 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    5f60:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    5f62:	4b0a      	ldr	r3, [pc, #40]	; (5f8c <hiddf_keyboard_init+0x2c>)
    5f64:	4798      	blx	r3
    5f66:	2801      	cmp	r0, #1
    5f68:	d80c      	bhi.n	5f84 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    5f6a:	4809      	ldr	r0, [pc, #36]	; (5f90 <hiddf_keyboard_init+0x30>)
    5f6c:	4b09      	ldr	r3, [pc, #36]	; (5f94 <hiddf_keyboard_init+0x34>)
    5f6e:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    5f70:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    5f72:	3014      	adds	r0, #20
    5f74:	4b08      	ldr	r3, [pc, #32]	; (5f98 <hiddf_keyboard_init+0x38>)
    5f76:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    5f78:	4908      	ldr	r1, [pc, #32]	; (5f9c <hiddf_keyboard_init+0x3c>)
    5f7a:	2001      	movs	r0, #1
    5f7c:	4b08      	ldr	r3, [pc, #32]	; (5fa0 <hiddf_keyboard_init+0x40>)
    5f7e:	4798      	blx	r3
	return ERR_NONE;
    5f80:	2000      	movs	r0, #0
    5f82:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    5f84:	f06f 0010 	mvn.w	r0, #16
}
    5f88:	bd08      	pop	{r3, pc}
    5f8a:	bf00      	nop
    5f8c:	00006805 	.word	0x00006805
    5f90:	2000088c 	.word	0x2000088c
    5f94:	00005e39 	.word	0x00005e39
    5f98:	000067e5 	.word	0x000067e5
    5f9c:	20000048 	.word	0x20000048
    5fa0:	00006769 	.word	0x00006769

00005fa4 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5fa4:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    5fa6:	780b      	ldrb	r3, [r1, #0]
    5fa8:	2b81      	cmp	r3, #129	; 0x81
    5faa:	d010      	beq.n	5fce <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    5fac:	f3c3 1341 	ubfx	r3, r3, #5, #2
    5fb0:	2b01      	cmp	r3, #1
    5fb2:	d13f      	bne.n	6034 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    5fb4:	888a      	ldrh	r2, [r1, #4]
    5fb6:	4b22      	ldr	r3, [pc, #136]	; (6040 <hid_mouse_req+0x9c>)
    5fb8:	7a1b      	ldrb	r3, [r3, #8]
    5fba:	429a      	cmp	r2, r3
    5fbc:	d13d      	bne.n	603a <hid_mouse_req+0x96>
			switch (req->bRequest) {
    5fbe:	784b      	ldrb	r3, [r1, #1]
    5fc0:	2b03      	cmp	r3, #3
    5fc2:	d028      	beq.n	6016 <hid_mouse_req+0x72>
    5fc4:	2b0b      	cmp	r3, #11
    5fc6:	d02c      	beq.n	6022 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    5fc8:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    5fcc:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    5fce:	784b      	ldrb	r3, [r1, #1]
    5fd0:	2b06      	cmp	r3, #6
    5fd2:	d002      	beq.n	5fda <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    5fd4:	f06f 0009 	mvn.w	r0, #9
    5fd8:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    5fda:	888a      	ldrh	r2, [r1, #4]
    5fdc:	4b18      	ldr	r3, [pc, #96]	; (6040 <hid_mouse_req+0x9c>)
    5fde:	7a1b      	ldrb	r3, [r3, #8]
    5fe0:	429a      	cmp	r2, r3
    5fe2:	d002      	beq.n	5fea <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    5fe4:	f06f 0009 	mvn.w	r0, #9
    5fe8:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    5fea:	884b      	ldrh	r3, [r1, #2]
    5fec:	0a1b      	lsrs	r3, r3, #8
    5fee:	2b21      	cmp	r3, #33	; 0x21
    5ff0:	d004      	beq.n	5ffc <hid_mouse_req+0x58>
    5ff2:	2b22      	cmp	r3, #34	; 0x22
    5ff4:	d009      	beq.n	600a <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    5ff6:	f06f 000c 	mvn.w	r0, #12
    5ffa:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    5ffc:	4b10      	ldr	r3, [pc, #64]	; (6040 <hid_mouse_req+0x9c>)
    5ffe:	6819      	ldr	r1, [r3, #0]
    6000:	2300      	movs	r3, #0
    6002:	780a      	ldrb	r2, [r1, #0]
    6004:	4c0f      	ldr	r4, [pc, #60]	; (6044 <hid_mouse_req+0xa0>)
    6006:	47a0      	blx	r4
    6008:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    600a:	2300      	movs	r3, #0
    600c:	2234      	movs	r2, #52	; 0x34
    600e:	490e      	ldr	r1, [pc, #56]	; (6048 <hid_mouse_req+0xa4>)
    6010:	4c0c      	ldr	r4, [pc, #48]	; (6044 <hid_mouse_req+0xa0>)
    6012:	47a0      	blx	r4
    6014:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    6016:	2300      	movs	r3, #0
    6018:	2201      	movs	r2, #1
    601a:	490c      	ldr	r1, [pc, #48]	; (604c <hid_mouse_req+0xa8>)
    601c:	4c09      	ldr	r4, [pc, #36]	; (6044 <hid_mouse_req+0xa0>)
    601e:	47a0      	blx	r4
    6020:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    6022:	884a      	ldrh	r2, [r1, #2]
    6024:	4b06      	ldr	r3, [pc, #24]	; (6040 <hid_mouse_req+0x9c>)
    6026:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    6028:	2300      	movs	r3, #0
    602a:	461a      	mov	r2, r3
    602c:	4619      	mov	r1, r3
    602e:	4c05      	ldr	r4, [pc, #20]	; (6044 <hid_mouse_req+0xa0>)
    6030:	47a0      	blx	r4
    6032:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    6034:	f06f 0009 	mvn.w	r0, #9
    6038:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    603a:	f06f 0009 	mvn.w	r0, #9
    603e:	bd10      	pop	{r4, pc}
    6040:	200008ac 	.word	0x200008ac
    6044:	0000632d 	.word	0x0000632d
    6048:	0000819c 	.word	0x0000819c
    604c:	200008b6 	.word	0x200008b6

00006050 <hid_mouse_ctrl>:
{
    6050:	b570      	push	{r4, r5, r6, lr}
    6052:	4614      	mov	r4, r2
	switch (ctrl) {
    6054:	2901      	cmp	r1, #1
    6056:	d040      	beq.n	60da <hid_mouse_ctrl+0x8a>
    6058:	b139      	cbz	r1, 606a <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    605a:	2902      	cmp	r1, #2
    605c:	bf0c      	ite	eq
    605e:	f06f 041a 	mvneq.w	r4, #26
    6062:	f06f 040c 	mvnne.w	r4, #12
}
    6066:	4620      	mov	r0, r4
    6068:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    606a:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    606c:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    606e:	2b00      	cmp	r3, #0
    6070:	d049      	beq.n	6106 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    6072:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    6074:	795b      	ldrb	r3, [r3, #5]
    6076:	2b03      	cmp	r3, #3
    6078:	d148      	bne.n	610c <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    607a:	7a2b      	ldrb	r3, [r5, #8]
    607c:	429a      	cmp	r2, r3
    607e:	d048      	beq.n	6112 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    6080:	2bff      	cmp	r3, #255	; 0xff
    6082:	d149      	bne.n	6118 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    6084:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    6086:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    6088:	7818      	ldrb	r0, [r3, #0]
    608a:	2221      	movs	r2, #33	; 0x21
    608c:	6861      	ldr	r1, [r4, #4]
    608e:	4418      	add	r0, r3
    6090:	4b29      	ldr	r3, [pc, #164]	; (6138 <hid_mouse_ctrl+0xe8>)
    6092:	4798      	blx	r3
    6094:	4b29      	ldr	r3, [pc, #164]	; (613c <hid_mouse_ctrl+0xec>)
    6096:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    6098:	6823      	ldr	r3, [r4, #0]
    609a:	7818      	ldrb	r0, [r3, #0]
    609c:	6861      	ldr	r1, [r4, #4]
    609e:	4418      	add	r0, r3
    60a0:	4b27      	ldr	r3, [pc, #156]	; (6140 <hid_mouse_ctrl+0xf0>)
    60a2:	4798      	blx	r3
	desc->sod = ep;
    60a4:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    60a6:	2800      	cmp	r0, #0
    60a8:	d039      	beq.n	611e <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    60aa:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    60ac:	7943      	ldrb	r3, [r0, #5]
    60ae:	7902      	ldrb	r2, [r0, #4]
    60b0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    60b4:	b292      	uxth	r2, r2
    60b6:	78c1      	ldrb	r1, [r0, #3]
    60b8:	4630      	mov	r0, r6
    60ba:	4b22      	ldr	r3, [pc, #136]	; (6144 <hid_mouse_ctrl+0xf4>)
    60bc:	4798      	blx	r3
    60be:	4604      	mov	r4, r0
    60c0:	bb80      	cbnz	r0, 6124 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    60c2:	f016 0f80 	tst.w	r6, #128	; 0x80
    60c6:	d030      	beq.n	612a <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    60c8:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    60ca:	4630      	mov	r0, r6
    60cc:	4b1e      	ldr	r3, [pc, #120]	; (6148 <hid_mouse_ctrl+0xf8>)
    60ce:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    60d0:	4b1a      	ldr	r3, [pc, #104]	; (613c <hid_mouse_ctrl+0xec>)
    60d2:	2201      	movs	r2, #1
    60d4:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    60d6:	72da      	strb	r2, [r3, #11]
    60d8:	e7c5      	b.n	6066 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    60da:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    60dc:	b11a      	cbz	r2, 60e6 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    60de:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    60e0:	795b      	ldrb	r3, [r3, #5]
    60e2:	2b03      	cmp	r3, #3
    60e4:	d124      	bne.n	6130 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    60e6:	7a2b      	ldrb	r3, [r5, #8]
    60e8:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    60ea:	bf1c      	itt	ne
    60ec:	23ff      	movne	r3, #255	; 0xff
    60ee:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    60f0:	7a68      	ldrb	r0, [r5, #9]
    60f2:	28ff      	cmp	r0, #255	; 0xff
    60f4:	d003      	beq.n	60fe <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    60f6:	4b15      	ldr	r3, [pc, #84]	; (614c <hid_mouse_ctrl+0xfc>)
    60f8:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    60fa:	23ff      	movs	r3, #255	; 0xff
    60fc:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    60fe:	2400      	movs	r4, #0
    6100:	4b0e      	ldr	r3, [pc, #56]	; (613c <hid_mouse_ctrl+0xec>)
    6102:	72dc      	strb	r4, [r3, #11]
    6104:	e7af      	b.n	6066 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    6106:	f06f 0409 	mvn.w	r4, #9
    610a:	e7ac      	b.n	6066 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    610c:	f06f 0409 	mvn.w	r4, #9
    6110:	e7a9      	b.n	6066 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    6112:	f06f 0411 	mvn.w	r4, #17
    6116:	e7a6      	b.n	6066 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    6118:	f06f 041b 	mvn.w	r4, #27
    611c:	e7a3      	b.n	6066 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    611e:	f06f 0409 	mvn.w	r4, #9
    6122:	e7a0      	b.n	6066 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    6124:	f06f 0413 	mvn.w	r4, #19
    6128:	e79d      	b.n	6066 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    612a:	f04f 34ff 	mov.w	r4, #4294967295
    612e:	e79a      	b.n	6066 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    6130:	f06f 0409 	mvn.w	r4, #9
    6134:	e797      	b.n	6066 <hid_mouse_ctrl+0x16>
    6136:	bf00      	nop
    6138:	00006819 	.word	0x00006819
    613c:	200008ac 	.word	0x200008ac
    6140:	00006853 	.word	0x00006853
    6144:	00002505 	.word	0x00002505
    6148:	00002599 	.word	0x00002599
    614c:	0000256d 	.word	0x0000256d

00006150 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    6150:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    6152:	4b0a      	ldr	r3, [pc, #40]	; (617c <hiddf_mouse_init+0x2c>)
    6154:	4798      	blx	r3
    6156:	2801      	cmp	r0, #1
    6158:	d80c      	bhi.n	6174 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    615a:	4809      	ldr	r0, [pc, #36]	; (6180 <hiddf_mouse_init+0x30>)
    615c:	4b09      	ldr	r3, [pc, #36]	; (6184 <hiddf_mouse_init+0x34>)
    615e:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    6160:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    6162:	300c      	adds	r0, #12
    6164:	4b08      	ldr	r3, [pc, #32]	; (6188 <hiddf_mouse_init+0x38>)
    6166:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    6168:	4908      	ldr	r1, [pc, #32]	; (618c <hiddf_mouse_init+0x3c>)
    616a:	2001      	movs	r0, #1
    616c:	4b08      	ldr	r3, [pc, #32]	; (6190 <hiddf_mouse_init+0x40>)
    616e:	4798      	blx	r3
	return ERR_NONE;
    6170:	2000      	movs	r0, #0
    6172:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    6174:	f06f 0010 	mvn.w	r0, #16
}
    6178:	bd08      	pop	{r3, pc}
    617a:	bf00      	nop
    617c:	00006805 	.word	0x00006805
    6180:	200008ac 	.word	0x200008ac
    6184:	00006051 	.word	0x00006051
    6188:	000067e5 	.word	0x000067e5
    618c:	20000050 	.word	0x20000050
    6190:	00006769 	.word	0x00006769

00006194 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    6194:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    6196:	4b07      	ldr	r3, [pc, #28]	; (61b4 <usbdc_unconfig+0x20>)
    6198:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    619a:	b14c      	cbz	r4, 61b0 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    619c:	2600      	movs	r6, #0
    619e:	2501      	movs	r5, #1
    61a0:	6863      	ldr	r3, [r4, #4]
    61a2:	4632      	mov	r2, r6
    61a4:	4629      	mov	r1, r5
    61a6:	4620      	mov	r0, r4
    61a8:	4798      	blx	r3
		func = func->next;
    61aa:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    61ac:	2c00      	cmp	r4, #0
    61ae:	d1f7      	bne.n	61a0 <usbdc_unconfig+0xc>
    61b0:	bd70      	pop	{r4, r5, r6, pc}
    61b2:	bf00      	nop
    61b4:	200008c4 	.word	0x200008c4

000061b8 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    61b8:	b570      	push	{r4, r5, r6, lr}
    61ba:	4606      	mov	r6, r0
    61bc:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    61be:	4b07      	ldr	r3, [pc, #28]	; (61dc <usbdc_change_notify+0x24>)
    61c0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    61c2:	b91c      	cbnz	r4, 61cc <usbdc_change_notify+0x14>
    61c4:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    61c6:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    61c8:	2c00      	cmp	r4, #0
    61ca:	d0fb      	beq.n	61c4 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    61cc:	6863      	ldr	r3, [r4, #4]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d0f9      	beq.n	61c6 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    61d2:	4629      	mov	r1, r5
    61d4:	4630      	mov	r0, r6
    61d6:	4798      	blx	r3
    61d8:	e7f5      	b.n	61c6 <usbdc_change_notify+0xe>
    61da:	bf00      	nop
    61dc:	200008c4 	.word	0x200008c4

000061e0 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    61e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61e2:	4607      	mov	r7, r0
    61e4:	460e      	mov	r6, r1
    61e6:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    61e8:	4b0c      	ldr	r3, [pc, #48]	; (621c <usbdc_request_handler+0x3c>)
    61ea:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    61ec:	b91c      	cbnz	r4, 61f6 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    61ee:	2000      	movs	r0, #0
    61f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    61f2:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    61f4:	b16c      	cbz	r4, 6212 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    61f6:	6863      	ldr	r3, [r4, #4]
    61f8:	2b00      	cmp	r3, #0
    61fa:	d0fa      	beq.n	61f2 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    61fc:	462a      	mov	r2, r5
    61fe:	4631      	mov	r1, r6
    6200:	4638      	mov	r0, r7
    6202:	4798      	blx	r3
			if (0 == rc) {
    6204:	b138      	cbz	r0, 6216 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    6206:	f110 0f0a 	cmn.w	r0, #10
    620a:	d0f2      	beq.n	61f2 <usbdc_request_handler+0x12>
				return -1;
    620c:	f04f 30ff 	mov.w	r0, #4294967295
}
    6210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    6212:	2000      	movs	r0, #0
    6214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    6216:	2001      	movs	r0, #1
    6218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    621a:	bf00      	nop
    621c:	200008c4 	.word	0x200008c4

00006220 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    6220:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    6222:	4b06      	ldr	r3, [pc, #24]	; (623c <usbd_sof_cb+0x1c>)
    6224:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    6226:	b91c      	cbnz	r4, 6230 <usbd_sof_cb+0x10>
    6228:	bd10      	pop	{r4, pc}
		sof = sof->next;
    622a:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    622c:	2c00      	cmp	r4, #0
    622e:	d0fb      	beq.n	6228 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    6230:	6863      	ldr	r3, [r4, #4]
    6232:	2b00      	cmp	r3, #0
    6234:	d0f9      	beq.n	622a <usbd_sof_cb+0xa>
			sof->cb();
    6236:	4798      	blx	r3
    6238:	e7f7      	b.n	622a <usbd_sof_cb+0xa>
    623a:	bf00      	nop
    623c:	200008c4 	.word	0x200008c4

00006240 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    6240:	b510      	push	{r4, lr}
    6242:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    6244:	b119      	cbz	r1, 624e <usbdc_cb_ctl_done+0xe>
    6246:	2901      	cmp	r1, #1
    6248:	d026      	beq.n	6298 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    624a:	2000      	movs	r0, #0
    624c:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    624e:	7813      	ldrb	r3, [r2, #0]
    6250:	2b00      	cmp	r3, #0
    6252:	d1fa      	bne.n	624a <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    6254:	7853      	ldrb	r3, [r2, #1]
    6256:	2b05      	cmp	r3, #5
    6258:	d00f      	beq.n	627a <usbdc_cb_ctl_done+0x3a>
    625a:	2b09      	cmp	r3, #9
    625c:	d1f5      	bne.n	624a <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    625e:	8852      	ldrh	r2, [r2, #2]
    6260:	4b10      	ldr	r3, [pc, #64]	; (62a4 <usbdc_cb_ctl_done+0x64>)
    6262:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    6264:	8863      	ldrh	r3, [r4, #2]
    6266:	2b00      	cmp	r3, #0
    6268:	bf14      	ite	ne
    626a:	2104      	movne	r1, #4
    626c:	2103      	moveq	r1, #3
    626e:	4b0d      	ldr	r3, [pc, #52]	; (62a4 <usbdc_cb_ctl_done+0x64>)
    6270:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    6272:	2001      	movs	r0, #1
    6274:	4b0c      	ldr	r3, [pc, #48]	; (62a8 <usbdc_cb_ctl_done+0x68>)
    6276:	4798      	blx	r3
    6278:	e7e7      	b.n	624a <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    627a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    627c:	b2c0      	uxtb	r0, r0
    627e:	4b0b      	ldr	r3, [pc, #44]	; (62ac <usbdc_cb_ctl_done+0x6c>)
    6280:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    6282:	8863      	ldrh	r3, [r4, #2]
    6284:	2b00      	cmp	r3, #0
    6286:	bf14      	ite	ne
    6288:	2103      	movne	r1, #3
    628a:	2102      	moveq	r1, #2
    628c:	4b05      	ldr	r3, [pc, #20]	; (62a4 <usbdc_cb_ctl_done+0x64>)
    628e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    6290:	2001      	movs	r0, #1
    6292:	4b05      	ldr	r3, [pc, #20]	; (62a8 <usbdc_cb_ctl_done+0x68>)
    6294:	4798      	blx	r3
    6296:	e7d8      	b.n	624a <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    6298:	2201      	movs	r2, #1
    629a:	4621      	mov	r1, r4
    629c:	2000      	movs	r0, #0
    629e:	4b04      	ldr	r3, [pc, #16]	; (62b0 <usbdc_cb_ctl_done+0x70>)
    62a0:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    62a2:	e7d2      	b.n	624a <usbdc_cb_ctl_done+0xa>
    62a4:	200008c4 	.word	0x200008c4
    62a8:	000061b9 	.word	0x000061b9
    62ac:	000024f9 	.word	0x000024f9
    62b0:	000061e1 	.word	0x000061e1

000062b4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    62b4:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    62b6:	4b0d      	ldr	r3, [pc, #52]	; (62ec <usbdc_reset+0x38>)
    62b8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    62ba:	4d0d      	ldr	r5, [pc, #52]	; (62f0 <usbdc_reset+0x3c>)
    62bc:	2602      	movs	r6, #2
    62be:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    62c0:	2400      	movs	r4, #0
    62c2:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    62c4:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    62c6:	4620      	mov	r0, r4
    62c8:	4b0a      	ldr	r3, [pc, #40]	; (62f4 <usbdc_reset+0x40>)
    62ca:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    62cc:	7f28      	ldrb	r0, [r5, #28]
    62ce:	4b0a      	ldr	r3, [pc, #40]	; (62f8 <usbdc_reset+0x44>)
    62d0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    62d2:	4a0a      	ldr	r2, [pc, #40]	; (62fc <usbdc_reset+0x48>)
    62d4:	4621      	mov	r1, r4
    62d6:	4620      	mov	r0, r4
    62d8:	4d09      	ldr	r5, [pc, #36]	; (6300 <usbdc_reset+0x4c>)
    62da:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    62dc:	4a09      	ldr	r2, [pc, #36]	; (6304 <usbdc_reset+0x50>)
    62de:	4631      	mov	r1, r6
    62e0:	4620      	mov	r0, r4
    62e2:	47a8      	blx	r5
	usb_d_ep_enable(0);
    62e4:	4620      	mov	r0, r4
    62e6:	4b08      	ldr	r3, [pc, #32]	; (6308 <usbdc_reset+0x54>)
    62e8:	4798      	blx	r3
    62ea:	bd70      	pop	{r4, r5, r6, pc}
    62ec:	00006195 	.word	0x00006195
    62f0:	200008c4 	.word	0x200008c4
    62f4:	0000256d 	.word	0x0000256d
    62f8:	00002559 	.word	0x00002559
    62fc:	0000634d 	.word	0x0000634d
    6300:	0000276d 	.word	0x0000276d
    6304:	00006241 	.word	0x00006241
    6308:	00002599 	.word	0x00002599

0000630c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    630c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    630e:	b110      	cbz	r0, 6316 <usbd_event_cb+0xa>
    6310:	2801      	cmp	r0, #1
    6312:	d004      	beq.n	631e <usbd_event_cb+0x12>
    6314:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    6316:	2000      	movs	r0, #0
    6318:	4b02      	ldr	r3, [pc, #8]	; (6324 <usbd_event_cb+0x18>)
    631a:	4798      	blx	r3
		break;
    631c:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    631e:	4b02      	ldr	r3, [pc, #8]	; (6328 <usbd_event_cb+0x1c>)
    6320:	4798      	blx	r3
    6322:	bd08      	pop	{r3, pc}
    6324:	000061b9 	.word	0x000061b9
    6328:	000062b5 	.word	0x000062b5

0000632c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    632c:	b500      	push	{lr}
    632e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    6330:	9101      	str	r1, [sp, #4]
    6332:	9202      	str	r2, [sp, #8]
    6334:	f88d 000c 	strb.w	r0, [sp, #12]
    6338:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    633c:	a801      	add	r0, sp, #4
    633e:	4b02      	ldr	r3, [pc, #8]	; (6348 <usbdc_xfer+0x1c>)
    6340:	4798      	blx	r3
}
    6342:	b005      	add	sp, #20
    6344:	f85d fb04 	ldr.w	pc, [sp], #4
    6348:	000025e5 	.word	0x000025e5

0000634c <usbdc_cb_ctl_req>:
{
    634c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6350:	b083      	sub	sp, #12
    6352:	4605      	mov	r5, r0
    6354:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    6356:	2200      	movs	r2, #0
    6358:	4b9b      	ldr	r3, [pc, #620]	; (65c8 <usbdc_cb_ctl_req+0x27c>)
    635a:	4798      	blx	r3
    635c:	f1b0 3fff 	cmp.w	r0, #4294967295
    6360:	d00b      	beq.n	637a <usbdc_cb_ctl_req+0x2e>
    6362:	2801      	cmp	r0, #1
    6364:	f000 81e3 	beq.w	672e <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    6368:	7823      	ldrb	r3, [r4, #0]
    636a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    636e:	d008      	beq.n	6382 <usbdc_cb_ctl_req+0x36>
    6370:	2a80      	cmp	r2, #128	; 0x80
    6372:	f000 80f4 	beq.w	655e <usbdc_cb_ctl_req+0x212>
		return false;
    6376:	2000      	movs	r0, #0
    6378:	e000      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return false;
    637a:	2000      	movs	r0, #0
}
    637c:	b003      	add	sp, #12
    637e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    6382:	7862      	ldrb	r2, [r4, #1]
    6384:	3a01      	subs	r2, #1
    6386:	2a0a      	cmp	r2, #10
    6388:	f200 81d3 	bhi.w	6732 <usbdc_cb_ctl_req+0x3e6>
    638c:	e8df f012 	tbh	[pc, r2, lsl #1]
    6390:	01d10060 	.word	0x01d10060
    6394:	01d10076 	.word	0x01d10076
    6398:	01d1000b 	.word	0x01d1000b
    639c:	01d101d1 	.word	0x01d101d1
    63a0:	01d10015 	.word	0x01d10015
    63a4:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    63a6:	2301      	movs	r3, #1
    63a8:	2200      	movs	r2, #0
    63aa:	4611      	mov	r1, r2
    63ac:	4628      	mov	r0, r5
    63ae:	4c87      	ldr	r4, [pc, #540]	; (65cc <usbdc_cb_ctl_req+0x280>)
    63b0:	47a0      	blx	r4
    63b2:	fab0 f080 	clz	r0, r0
    63b6:	0940      	lsrs	r0, r0, #5
    63b8:	e7e0      	b.n	637c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    63ba:	8862      	ldrh	r2, [r4, #2]
    63bc:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    63be:	b1ca      	cbz	r2, 63f4 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    63c0:	4b83      	ldr	r3, [pc, #524]	; (65d0 <usbdc_cb_ctl_req+0x284>)
    63c2:	681b      	ldr	r3, [r3, #0]
    63c4:	6859      	ldr	r1, [r3, #4]
    63c6:	6818      	ldr	r0, [r3, #0]
    63c8:	4b82      	ldr	r3, [pc, #520]	; (65d4 <usbdc_cb_ctl_req+0x288>)
    63ca:	4798      	blx	r3
	if (NULL == cfg_desc) {
    63cc:	2800      	cmp	r0, #0
    63ce:	f000 81be 	beq.w	674e <usbdc_cb_ctl_req+0x402>
    63d2:	78c2      	ldrb	r2, [r0, #3]
    63d4:	7881      	ldrb	r1, [r0, #2]
    63d6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    63da:	fa10 f181 	uxtah	r1, r0, r1
    63de:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    63e0:	2204      	movs	r2, #4
    63e2:	4b7d      	ldr	r3, [pc, #500]	; (65d8 <usbdc_cb_ctl_req+0x28c>)
    63e4:	4798      	blx	r3
    63e6:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    63e8:	b130      	cbz	r0, 63f8 <usbdc_cb_ctl_req+0xac>
    63ea:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    63ec:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 65d0 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    63f0:	4f79      	ldr	r7, [pc, #484]	; (65d8 <usbdc_cb_ctl_req+0x28c>)
    63f2:	e018      	b.n	6426 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    63f4:	4b79      	ldr	r3, [pc, #484]	; (65dc <usbdc_cb_ctl_req+0x290>)
    63f6:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    63f8:	2301      	movs	r3, #1
    63fa:	2200      	movs	r2, #0
    63fc:	4611      	mov	r1, r2
    63fe:	4628      	mov	r0, r5
    6400:	4c72      	ldr	r4, [pc, #456]	; (65cc <usbdc_cb_ctl_req+0x280>)
    6402:	47a0      	blx	r4
    6404:	fab0 f080 	clz	r0, r0
    6408:	0940      	lsrs	r0, r0, #5
    640a:	e7b7      	b.n	637c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    640c:	464c      	mov	r4, r9
    640e:	e000      	b.n	6412 <usbdc_cb_ctl_req+0xc6>
    6410:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    6412:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    6414:	7803      	ldrb	r3, [r0, #0]
    6416:	4418      	add	r0, r3
    6418:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    641a:	2204      	movs	r2, #4
    641c:	9901      	ldr	r1, [sp, #4]
    641e:	47b8      	blx	r7
    6420:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    6422:	2800      	cmp	r0, #0
    6424:	d0e8      	beq.n	63f8 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    6426:	f890 9002 	ldrb.w	r9, [r0, #2]
    642a:	45a1      	cmp	r9, r4
    642c:	d0f1      	beq.n	6412 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    642e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    6432:	2c00      	cmp	r4, #0
    6434:	d0ea      	beq.n	640c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    6436:	2600      	movs	r6, #0
    6438:	6863      	ldr	r3, [r4, #4]
    643a:	466a      	mov	r2, sp
    643c:	4631      	mov	r1, r6
    643e:	4620      	mov	r0, r4
    6440:	4798      	blx	r3
    6442:	2800      	cmp	r0, #0
    6444:	d0e4      	beq.n	6410 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    6446:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    6448:	2c00      	cmp	r4, #0
    644a:	d1f5      	bne.n	6438 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    644c:	464c      	mov	r4, r9
    644e:	e7e0      	b.n	6412 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    6450:	f003 031f 	and.w	r3, r3, #31
    6454:	2b02      	cmp	r3, #2
    6456:	f040 816e 	bne.w	6736 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    645a:	88e3      	ldrh	r3, [r4, #6]
    645c:	b10b      	cbz	r3, 6462 <usbdc_cb_ctl_req+0x116>
			return false;
    645e:	2000      	movs	r0, #0
    6460:	e78c      	b.n	637c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    6462:	88a0      	ldrh	r0, [r4, #4]
    6464:	2100      	movs	r1, #0
    6466:	b2c0      	uxtb	r0, r0
    6468:	4b5d      	ldr	r3, [pc, #372]	; (65e0 <usbdc_cb_ctl_req+0x294>)
    646a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    646c:	2301      	movs	r3, #1
    646e:	2200      	movs	r2, #0
    6470:	4611      	mov	r1, r2
    6472:	4628      	mov	r0, r5
    6474:	4c55      	ldr	r4, [pc, #340]	; (65cc <usbdc_cb_ctl_req+0x280>)
    6476:	47a0      	blx	r4
		return true;
    6478:	2001      	movs	r0, #1
    647a:	e77f      	b.n	637c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    647c:	f003 031f 	and.w	r3, r3, #31
    6480:	2b02      	cmp	r3, #2
    6482:	f040 815a 	bne.w	673a <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    6486:	88e3      	ldrh	r3, [r4, #6]
    6488:	b10b      	cbz	r3, 648e <usbdc_cb_ctl_req+0x142>
			return false;
    648a:	2000      	movs	r0, #0
    648c:	e776      	b.n	637c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    648e:	88a0      	ldrh	r0, [r4, #4]
    6490:	2101      	movs	r1, #1
    6492:	b2c0      	uxtb	r0, r0
    6494:	4b52      	ldr	r3, [pc, #328]	; (65e0 <usbdc_cb_ctl_req+0x294>)
    6496:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    6498:	2301      	movs	r3, #1
    649a:	2200      	movs	r2, #0
    649c:	4611      	mov	r1, r2
    649e:	4628      	mov	r0, r5
    64a0:	4c4a      	ldr	r4, [pc, #296]	; (65cc <usbdc_cb_ctl_req+0x280>)
    64a2:	47a0      	blx	r4
		return true;
    64a4:	2001      	movs	r0, #1
    64a6:	e769      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    64a8:	8866      	ldrh	r6, [r4, #2]
    64aa:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    64ac:	4a48      	ldr	r2, [pc, #288]	; (65d0 <usbdc_cb_ctl_req+0x284>)
    64ae:	6813      	ldr	r3, [r2, #0]
    64b0:	7ed2      	ldrb	r2, [r2, #27]
    64b2:	6859      	ldr	r1, [r3, #4]
    64b4:	6818      	ldr	r0, [r3, #0]
    64b6:	4b47      	ldr	r3, [pc, #284]	; (65d4 <usbdc_cb_ctl_req+0x288>)
    64b8:	4798      	blx	r3
	if (NULL == ifc) {
    64ba:	2800      	cmp	r0, #0
    64bc:	d045      	beq.n	654a <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    64be:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    64c0:	78c2      	ldrb	r2, [r0, #3]
    64c2:	7881      	ldrb	r1, [r0, #2]
    64c4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    64c8:	fa10 f181 	uxtah	r1, r0, r1
    64cc:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    64ce:	2204      	movs	r2, #4
    64d0:	4b41      	ldr	r3, [pc, #260]	; (65d8 <usbdc_cb_ctl_req+0x28c>)
    64d2:	4798      	blx	r3
    64d4:	4603      	mov	r3, r0
    64d6:	2800      	cmp	r0, #0
    64d8:	d039      	beq.n	654e <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    64da:	2704      	movs	r7, #4
    64dc:	4d3e      	ldr	r5, [pc, #248]	; (65d8 <usbdc_cb_ctl_req+0x28c>)
    64de:	e008      	b.n	64f2 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    64e0:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    64e2:	7803      	ldrb	r3, [r0, #0]
    64e4:	4418      	add	r0, r3
    64e6:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    64e8:	463a      	mov	r2, r7
    64ea:	9901      	ldr	r1, [sp, #4]
    64ec:	47a8      	blx	r5
		if (NULL == ifc) {
    64ee:	4603      	mov	r3, r0
    64f0:	b378      	cbz	r0, 6552 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    64f2:	789a      	ldrb	r2, [r3, #2]
    64f4:	42a2      	cmp	r2, r4
    64f6:	d1f3      	bne.n	64e0 <usbdc_cb_ctl_req+0x194>
    64f8:	78da      	ldrb	r2, [r3, #3]
    64fa:	42b2      	cmp	r2, r6
    64fc:	d1f0      	bne.n	64e0 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    64fe:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    6500:	4b33      	ldr	r3, [pc, #204]	; (65d0 <usbdc_cb_ctl_req+0x284>)
    6502:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    6504:	b33d      	cbz	r5, 6556 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    6506:	2701      	movs	r7, #1
    6508:	686b      	ldr	r3, [r5, #4]
    650a:	466a      	mov	r2, sp
    650c:	4639      	mov	r1, r7
    650e:	4628      	mov	r0, r5
    6510:	4798      	blx	r3
    6512:	b120      	cbz	r0, 651e <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    6514:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    6516:	2d00      	cmp	r5, #0
    6518:	d1f6      	bne.n	6508 <usbdc_cb_ctl_req+0x1bc>
	return false;
    651a:	2000      	movs	r0, #0
    651c:	e72e      	b.n	637c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    651e:	686b      	ldr	r3, [r5, #4]
    6520:	466a      	mov	r2, sp
    6522:	2100      	movs	r1, #0
    6524:	4628      	mov	r0, r5
    6526:	4798      	blx	r3
    6528:	b9b8      	cbnz	r0, 655a <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    652a:	b136      	cbz	r6, 653a <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    652c:	4a28      	ldr	r2, [pc, #160]	; (65d0 <usbdc_cb_ctl_req+0x284>)
    652e:	2301      	movs	r3, #1
    6530:	fa03 f404 	lsl.w	r4, r3, r4
    6534:	7f53      	ldrb	r3, [r2, #29]
    6536:	4323      	orrs	r3, r4
    6538:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    653a:	2300      	movs	r3, #0
    653c:	461a      	mov	r2, r3
    653e:	4619      	mov	r1, r3
    6540:	4618      	mov	r0, r3
    6542:	4c22      	ldr	r4, [pc, #136]	; (65cc <usbdc_cb_ctl_req+0x280>)
    6544:	47a0      	blx	r4
			return true;
    6546:	2001      	movs	r0, #1
    6548:	e718      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return false;
    654a:	2000      	movs	r0, #0
    654c:	e716      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return false;
    654e:	2000      	movs	r0, #0
    6550:	e714      	b.n	637c <usbdc_cb_ctl_req+0x30>
			return false;
    6552:	2000      	movs	r0, #0
    6554:	e712      	b.n	637c <usbdc_cb_ctl_req+0x30>
	return false;
    6556:	2000      	movs	r0, #0
    6558:	e710      	b.n	637c <usbdc_cb_ctl_req+0x30>
			return false;
    655a:	2000      	movs	r0, #0
    655c:	e70e      	b.n	637c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    655e:	7862      	ldrb	r2, [r4, #1]
    6560:	2a0a      	cmp	r2, #10
    6562:	f200 80ec 	bhi.w	673e <usbdc_cb_ctl_req+0x3f2>
    6566:	e8df f012 	tbh	[pc, r2, lsl #1]
    656a:	008e      	.short	0x008e
    656c:	00ea00ea 	.word	0x00ea00ea
    6570:	00ea00ea 	.word	0x00ea00ea
    6574:	000b00ea 	.word	0x000b00ea
    6578:	008200ea 	.word	0x008200ea
    657c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    6580:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    6582:	0a13      	lsrs	r3, r2, #8
    6584:	2b02      	cmp	r3, #2
    6586:	d02d      	beq.n	65e4 <usbdc_cb_ctl_req+0x298>
    6588:	2b03      	cmp	r3, #3
    658a:	d050      	beq.n	662e <usbdc_cb_ctl_req+0x2e2>
    658c:	2b01      	cmp	r3, #1
    658e:	d001      	beq.n	6594 <usbdc_cb_ctl_req+0x248>
	return false;
    6590:	2000      	movs	r0, #0
    6592:	e6f3      	b.n	637c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    6594:	88e2      	ldrh	r2, [r4, #6]
    6596:	2a12      	cmp	r2, #18
    6598:	bf28      	it	cs
    659a:	2212      	movcs	r2, #18
    659c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    659e:	4b0c      	ldr	r3, [pc, #48]	; (65d0 <usbdc_cb_ctl_req+0x284>)
    65a0:	681b      	ldr	r3, [r3, #0]
    65a2:	2201      	movs	r2, #1
    65a4:	6859      	ldr	r1, [r3, #4]
    65a6:	6818      	ldr	r0, [r3, #0]
    65a8:	4b0b      	ldr	r3, [pc, #44]	; (65d8 <usbdc_cb_ctl_req+0x28c>)
    65aa:	4798      	blx	r3
	if (!dev_desc) {
    65ac:	4601      	mov	r1, r0
    65ae:	2800      	cmp	r0, #0
    65b0:	f000 80c7 	beq.w	6742 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    65b4:	2300      	movs	r3, #0
    65b6:	4622      	mov	r2, r4
    65b8:	4628      	mov	r0, r5
    65ba:	4c04      	ldr	r4, [pc, #16]	; (65cc <usbdc_cb_ctl_req+0x280>)
    65bc:	47a0      	blx	r4
    65be:	fab0 f080 	clz	r0, r0
    65c2:	0940      	lsrs	r0, r0, #5
    65c4:	e6da      	b.n	637c <usbdc_cb_ctl_req+0x30>
    65c6:	bf00      	nop
    65c8:	000061e1 	.word	0x000061e1
    65cc:	0000632d 	.word	0x0000632d
    65d0:	200008c4 	.word	0x200008c4
    65d4:	00006899 	.word	0x00006899
    65d8:	00006819 	.word	0x00006819
    65dc:	00006195 	.word	0x00006195
    65e0:	00002705 	.word	0x00002705
	uint16_t length   = req->wLength;
    65e4:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    65e6:	4b5b      	ldr	r3, [pc, #364]	; (6754 <usbdc_cb_ctl_req+0x408>)
    65e8:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    65ea:	681b      	ldr	r3, [r3, #0]
    65ec:	3201      	adds	r2, #1
    65ee:	b2d2      	uxtb	r2, r2
    65f0:	6859      	ldr	r1, [r3, #4]
    65f2:	6818      	ldr	r0, [r3, #0]
    65f4:	4b58      	ldr	r3, [pc, #352]	; (6758 <usbdc_cb_ctl_req+0x40c>)
    65f6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    65f8:	4601      	mov	r1, r0
    65fa:	2800      	cmp	r0, #0
    65fc:	f000 80a3 	beq.w	6746 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    6600:	78c3      	ldrb	r3, [r0, #3]
    6602:	7882      	ldrb	r2, [r0, #2]
    6604:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    6608:	b292      	uxth	r2, r2
	if (length <= total_len) {
    660a:	4294      	cmp	r4, r2
    660c:	d90d      	bls.n	662a <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    660e:	3e01      	subs	r6, #1
    6610:	4226      	tst	r6, r4
    6612:	bf0c      	ite	eq
    6614:	2301      	moveq	r3, #1
    6616:	2300      	movne	r3, #0
		length = total_len;
    6618:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    661a:	4622      	mov	r2, r4
    661c:	4628      	mov	r0, r5
    661e:	4c4f      	ldr	r4, [pc, #316]	; (675c <usbdc_cb_ctl_req+0x410>)
    6620:	47a0      	blx	r4
    6622:	fab0 f080 	clz	r0, r0
    6626:	0940      	lsrs	r0, r0, #5
    6628:	e6a8      	b.n	637c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    662a:	2300      	movs	r3, #0
    662c:	e7f5      	b.n	661a <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    662e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    6630:	4b48      	ldr	r3, [pc, #288]	; (6754 <usbdc_cb_ctl_req+0x408>)
    6632:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    6634:	681b      	ldr	r3, [r3, #0]
    6636:	b2d2      	uxtb	r2, r2
    6638:	6859      	ldr	r1, [r3, #4]
    663a:	6818      	ldr	r0, [r3, #0]
    663c:	4b48      	ldr	r3, [pc, #288]	; (6760 <usbdc_cb_ctl_req+0x414>)
    663e:	4798      	blx	r3
	if (NULL == str_desc) {
    6640:	4601      	mov	r1, r0
    6642:	2800      	cmp	r0, #0
    6644:	f000 8081 	beq.w	674a <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    6648:	7802      	ldrb	r2, [r0, #0]
    664a:	4294      	cmp	r4, r2
    664c:	d90d      	bls.n	666a <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    664e:	3e01      	subs	r6, #1
    6650:	4226      	tst	r6, r4
    6652:	bf0c      	ite	eq
    6654:	2301      	moveq	r3, #1
    6656:	2300      	movne	r3, #0
		length = str_desc[0];
    6658:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    665a:	4622      	mov	r2, r4
    665c:	4628      	mov	r0, r5
    665e:	4c3f      	ldr	r4, [pc, #252]	; (675c <usbdc_cb_ctl_req+0x410>)
    6660:	47a0      	blx	r4
    6662:	fab0 f080 	clz	r0, r0
    6666:	0940      	lsrs	r0, r0, #5
    6668:	e688      	b.n	637c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    666a:	2300      	movs	r3, #0
    666c:	e7f5      	b.n	665a <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    666e:	4939      	ldr	r1, [pc, #228]	; (6754 <usbdc_cb_ctl_req+0x408>)
    6670:	694b      	ldr	r3, [r1, #20]
    6672:	7eca      	ldrb	r2, [r1, #27]
    6674:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    6676:	2300      	movs	r3, #0
    6678:	2201      	movs	r2, #1
    667a:	6949      	ldr	r1, [r1, #20]
    667c:	4628      	mov	r0, r5
    667e:	4c37      	ldr	r4, [pc, #220]	; (675c <usbdc_cb_ctl_req+0x410>)
    6680:	47a0      	blx	r4
		return true;
    6682:	2001      	movs	r0, #1
    6684:	e67a      	b.n	637c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    6686:	f003 031f 	and.w	r3, r3, #31
    668a:	2b01      	cmp	r3, #1
    668c:	d903      	bls.n	6696 <usbdc_cb_ctl_req+0x34a>
    668e:	2b02      	cmp	r3, #2
    6690:	d010      	beq.n	66b4 <usbdc_cb_ctl_req+0x368>
		return false;
    6692:	2000      	movs	r0, #0
    6694:	e672      	b.n	637c <usbdc_cb_ctl_req+0x30>
		st = 0;
    6696:	2300      	movs	r3, #0
    6698:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    669a:	492e      	ldr	r1, [pc, #184]	; (6754 <usbdc_cb_ctl_req+0x408>)
    669c:	694b      	ldr	r3, [r1, #20]
    669e:	f8bd 2000 	ldrh.w	r2, [sp]
    66a2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    66a4:	2300      	movs	r3, #0
    66a6:	2202      	movs	r2, #2
    66a8:	6949      	ldr	r1, [r1, #20]
    66aa:	4628      	mov	r0, r5
    66ac:	4c2b      	ldr	r4, [pc, #172]	; (675c <usbdc_cb_ctl_req+0x410>)
    66ae:	47a0      	blx	r4
	return true;
    66b0:	2001      	movs	r0, #1
    66b2:	e663      	b.n	637c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    66b4:	88a0      	ldrh	r0, [r4, #4]
    66b6:	2102      	movs	r1, #2
    66b8:	b2c0      	uxtb	r0, r0
    66ba:	4b2a      	ldr	r3, [pc, #168]	; (6764 <usbdc_cb_ctl_req+0x418>)
    66bc:	4798      	blx	r3
		if (st < 0) {
    66be:	2800      	cmp	r0, #0
    66c0:	db03      	blt.n	66ca <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    66c2:	f000 0001 	and.w	r0, r0, #1
    66c6:	9000      	str	r0, [sp, #0]
    66c8:	e7e7      	b.n	669a <usbdc_cb_ctl_req+0x34e>
			return false;
    66ca:	2000      	movs	r0, #0
    66cc:	e656      	b.n	637c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    66ce:	4b21      	ldr	r3, [pc, #132]	; (6754 <usbdc_cb_ctl_req+0x408>)
    66d0:	7f5b      	ldrb	r3, [r3, #29]
    66d2:	88a2      	ldrh	r2, [r4, #4]
    66d4:	4113      	asrs	r3, r2
    66d6:	f013 0f01 	tst.w	r3, #1
    66da:	d012      	beq.n	6702 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    66dc:	4b1d      	ldr	r3, [pc, #116]	; (6754 <usbdc_cb_ctl_req+0x408>)
    66de:	691d      	ldr	r5, [r3, #16]
	return false;
    66e0:	2000      	movs	r0, #0
	while (NULL != func) {
    66e2:	2d00      	cmp	r5, #0
    66e4:	f43f ae4a 	beq.w	637c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    66e8:	2602      	movs	r6, #2
    66ea:	686b      	ldr	r3, [r5, #4]
    66ec:	4622      	mov	r2, r4
    66ee:	4631      	mov	r1, r6
    66f0:	4628      	mov	r0, r5
    66f2:	4798      	blx	r3
    66f4:	2800      	cmp	r0, #0
    66f6:	da0f      	bge.n	6718 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    66f8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    66fa:	2d00      	cmp	r5, #0
    66fc:	d1f5      	bne.n	66ea <usbdc_cb_ctl_req+0x39e>
	return false;
    66fe:	2000      	movs	r0, #0
    6700:	e63c      	b.n	637c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    6702:	4914      	ldr	r1, [pc, #80]	; (6754 <usbdc_cb_ctl_req+0x408>)
    6704:	694b      	ldr	r3, [r1, #20]
    6706:	2000      	movs	r0, #0
    6708:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    670a:	4603      	mov	r3, r0
    670c:	2201      	movs	r2, #1
    670e:	6949      	ldr	r1, [r1, #20]
    6710:	4c12      	ldr	r4, [pc, #72]	; (675c <usbdc_cb_ctl_req+0x410>)
    6712:	47a0      	blx	r4
		return true;
    6714:	2001      	movs	r0, #1
    6716:	e631      	b.n	637c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    6718:	490e      	ldr	r1, [pc, #56]	; (6754 <usbdc_cb_ctl_req+0x408>)
    671a:	694b      	ldr	r3, [r1, #20]
    671c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    671e:	2300      	movs	r3, #0
    6720:	2201      	movs	r2, #1
    6722:	6949      	ldr	r1, [r1, #20]
    6724:	4618      	mov	r0, r3
    6726:	4c0d      	ldr	r4, [pc, #52]	; (675c <usbdc_cb_ctl_req+0x410>)
    6728:	47a0      	blx	r4
			return true;
    672a:	2001      	movs	r0, #1
    672c:	e626      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return true;
    672e:	2001      	movs	r0, #1
    6730:	e624      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return false;
    6732:	2000      	movs	r0, #0
    6734:	e622      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return false;
    6736:	2000      	movs	r0, #0
    6738:	e620      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return false;
    673a:	2000      	movs	r0, #0
    673c:	e61e      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return false;
    673e:	2000      	movs	r0, #0
    6740:	e61c      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return false;
    6742:	2000      	movs	r0, #0
    6744:	e61a      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return false;
    6746:	2000      	movs	r0, #0
    6748:	e618      	b.n	637c <usbdc_cb_ctl_req+0x30>
		return false;
    674a:	2000      	movs	r0, #0
    674c:	e616      	b.n	637c <usbdc_cb_ctl_req+0x30>
			return false;
    674e:	2000      	movs	r0, #0
    6750:	e614      	b.n	637c <usbdc_cb_ctl_req+0x30>
    6752:	bf00      	nop
    6754:	200008c4 	.word	0x200008c4
    6758:	00006899 	.word	0x00006899
    675c:	0000632d 	.word	0x0000632d
    6760:	00006901 	.word	0x00006901
    6764:	00002705 	.word	0x00002705

00006768 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    6768:	b508      	push	{r3, lr}
	switch (type) {
    676a:	2801      	cmp	r0, #1
    676c:	d007      	beq.n	677e <usbdc_register_handler+0x16>
    676e:	b110      	cbz	r0, 6776 <usbdc_register_handler+0xe>
    6770:	2802      	cmp	r0, #2
    6772:	d008      	beq.n	6786 <usbdc_register_handler+0x1e>
    6774:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    6776:	4806      	ldr	r0, [pc, #24]	; (6790 <usbdc_register_handler+0x28>)
    6778:	4b06      	ldr	r3, [pc, #24]	; (6794 <usbdc_register_handler+0x2c>)
    677a:	4798      	blx	r3
		break;
    677c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    677e:	4806      	ldr	r0, [pc, #24]	; (6798 <usbdc_register_handler+0x30>)
    6780:	4b04      	ldr	r3, [pc, #16]	; (6794 <usbdc_register_handler+0x2c>)
    6782:	4798      	blx	r3
		break;
    6784:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    6786:	4805      	ldr	r0, [pc, #20]	; (679c <usbdc_register_handler+0x34>)
    6788:	4b02      	ldr	r3, [pc, #8]	; (6794 <usbdc_register_handler+0x2c>)
    678a:	4798      	blx	r3
    678c:	bd08      	pop	{r3, pc}
    678e:	bf00      	nop
    6790:	200008c8 	.word	0x200008c8
    6794:	000027c9 	.word	0x000027c9
    6798:	200008cc 	.word	0x200008cc
    679c:	200008d0 	.word	0x200008d0

000067a0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    67a0:	b538      	push	{r3, r4, r5, lr}
    67a2:	4605      	mov	r5, r0
	ASSERT(ctrl_buf);

	int32_t rc;

	rc = usb_d_init();
    67a4:	4b09      	ldr	r3, [pc, #36]	; (67cc <usbdc_init+0x2c>)
    67a6:	4798      	blx	r3
	if (rc < 0) {
    67a8:	2800      	cmp	r0, #0
    67aa:	db0e      	blt.n	67ca <usbdc_init+0x2a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    67ac:	4c08      	ldr	r4, [pc, #32]	; (67d0 <usbdc_init+0x30>)
    67ae:	2220      	movs	r2, #32
    67b0:	2100      	movs	r1, #0
    67b2:	4620      	mov	r0, r4
    67b4:	4b07      	ldr	r3, [pc, #28]	; (67d4 <usbdc_init+0x34>)
    67b6:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    67b8:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    67ba:	4907      	ldr	r1, [pc, #28]	; (67d8 <usbdc_init+0x38>)
    67bc:	2000      	movs	r0, #0
    67be:	4c07      	ldr	r4, [pc, #28]	; (67dc <usbdc_init+0x3c>)
    67c0:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    67c2:	4907      	ldr	r1, [pc, #28]	; (67e0 <usbdc_init+0x40>)
    67c4:	2001      	movs	r0, #1
    67c6:	47a0      	blx	r4

	return 0;
    67c8:	2000      	movs	r0, #0
}
    67ca:	bd38      	pop	{r3, r4, r5, pc}
    67cc:	00002485 	.word	0x00002485
    67d0:	200008c4 	.word	0x200008c4
    67d4:	000069ef 	.word	0x000069ef
    67d8:	00006221 	.word	0x00006221
    67dc:	000024ed 	.word	0x000024ed
    67e0:	0000630d 	.word	0x0000630d

000067e4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    67e4:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    67e6:	4601      	mov	r1, r0
    67e8:	4801      	ldr	r0, [pc, #4]	; (67f0 <usbdc_register_function+0xc>)
    67ea:	4b02      	ldr	r3, [pc, #8]	; (67f4 <usbdc_register_function+0x10>)
    67ec:	4798      	blx	r3
    67ee:	bd08      	pop	{r3, pc}
    67f0:	200008d4 	.word	0x200008d4
    67f4:	000027c9 	.word	0x000027c9

000067f8 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    67f8:	4b01      	ldr	r3, [pc, #4]	; (6800 <usbdc_get_ctrl_buffer+0x8>)
    67fa:	6958      	ldr	r0, [r3, #20]
    67fc:	4770      	bx	lr
    67fe:	bf00      	nop
    6800:	200008c4 	.word	0x200008c4

00006804 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    6804:	4b03      	ldr	r3, [pc, #12]	; (6814 <usbdc_get_state+0x10>)
    6806:	7e98      	ldrb	r0, [r3, #26]
    6808:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    680c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    680e:	bf18      	it	ne
    6810:	2010      	movne	r0, #16
    6812:	4770      	bx	lr
    6814:	200008c4 	.word	0x200008c4

00006818 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    6818:	4288      	cmp	r0, r1
    681a:	d214      	bcs.n	6846 <usb_find_desc+0x2e>
	return desc[0];
    681c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    681e:	2b01      	cmp	r3, #1
    6820:	d913      	bls.n	684a <usb_find_desc+0x32>
{
    6822:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    6824:	7844      	ldrb	r4, [r0, #1]
    6826:	4294      	cmp	r4, r2
    6828:	d00a      	beq.n	6840 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    682a:	4418      	add	r0, r3
	while (desc < eof) {
    682c:	4281      	cmp	r1, r0
    682e:	d906      	bls.n	683e <usb_find_desc+0x26>
	return desc[0];
    6830:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6832:	2b01      	cmp	r3, #1
    6834:	d90b      	bls.n	684e <usb_find_desc+0x36>
	return desc[1];
    6836:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    6838:	4294      	cmp	r4, r2
    683a:	d1f6      	bne.n	682a <usb_find_desc+0x12>
    683c:	e000      	b.n	6840 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    683e:	2000      	movs	r0, #0
}
    6840:	f85d 4b04 	ldr.w	r4, [sp], #4
    6844:	4770      	bx	lr
	return NULL;
    6846:	2000      	movs	r0, #0
    6848:	4770      	bx	lr
		_desc_len_check();
    684a:	2000      	movs	r0, #0
    684c:	4770      	bx	lr
    684e:	2000      	movs	r0, #0
    6850:	e7f6      	b.n	6840 <usb_find_desc+0x28>

00006852 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    6852:	4288      	cmp	r0, r1
    6854:	d216      	bcs.n	6884 <usb_find_ep_desc+0x32>
	return desc[0];
    6856:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6858:	2b01      	cmp	r3, #1
    685a:	d915      	bls.n	6888 <usb_find_ep_desc+0x36>
	return desc[1];
    685c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    685e:	2a04      	cmp	r2, #4
    6860:	d014      	beq.n	688c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    6862:	2a05      	cmp	r2, #5
    6864:	d00b      	beq.n	687e <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    6866:	4418      	add	r0, r3
	while (desc < eof) {
    6868:	4281      	cmp	r1, r0
    686a:	d909      	bls.n	6880 <usb_find_ep_desc+0x2e>
	return desc[0];
    686c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    686e:	2b01      	cmp	r3, #1
    6870:	d90e      	bls.n	6890 <usb_find_ep_desc+0x3e>
	return desc[1];
    6872:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    6874:	2a04      	cmp	r2, #4
    6876:	d00d      	beq.n	6894 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    6878:	2a05      	cmp	r2, #5
    687a:	d1f4      	bne.n	6866 <usb_find_ep_desc+0x14>
    687c:	e00b      	b.n	6896 <usb_find_ep_desc+0x44>
    687e:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    6880:	2000      	movs	r0, #0
    6882:	4770      	bx	lr
    6884:	2000      	movs	r0, #0
    6886:	4770      	bx	lr
		_desc_len_check();
    6888:	2000      	movs	r0, #0
    688a:	4770      	bx	lr
	return NULL;
    688c:	2000      	movs	r0, #0
    688e:	4770      	bx	lr
		_desc_len_check();
    6890:	2000      	movs	r0, #0
    6892:	4770      	bx	lr
	return NULL;
    6894:	2000      	movs	r0, #0
}
    6896:	4770      	bx	lr

00006898 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    6898:	b538      	push	{r3, r4, r5, lr}
    689a:	460c      	mov	r4, r1
    689c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    689e:	2202      	movs	r2, #2
    68a0:	4b16      	ldr	r3, [pc, #88]	; (68fc <usb_find_cfg_desc+0x64>)
    68a2:	4798      	blx	r3
	if (!desc) {
    68a4:	4603      	mov	r3, r0
    68a6:	b1e8      	cbz	r0, 68e4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    68a8:	4284      	cmp	r4, r0
    68aa:	d91d      	bls.n	68e8 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    68ac:	7802      	ldrb	r2, [r0, #0]
    68ae:	2a01      	cmp	r2, #1
    68b0:	d91c      	bls.n	68ec <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    68b2:	7842      	ldrb	r2, [r0, #1]
    68b4:	2a02      	cmp	r2, #2
    68b6:	d11b      	bne.n	68f0 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    68b8:	7942      	ldrb	r2, [r0, #5]
    68ba:	42aa      	cmp	r2, r5
    68bc:	d012      	beq.n	68e4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    68be:	78d9      	ldrb	r1, [r3, #3]
    68c0:	789a      	ldrb	r2, [r3, #2]
    68c2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    68c6:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    68ca:	429c      	cmp	r4, r3
    68cc:	d909      	bls.n	68e2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    68ce:	781a      	ldrb	r2, [r3, #0]
    68d0:	2a01      	cmp	r2, #1
    68d2:	d90f      	bls.n	68f4 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    68d4:	785a      	ldrb	r2, [r3, #1]
    68d6:	2a02      	cmp	r2, #2
    68d8:	d10e      	bne.n	68f8 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    68da:	795a      	ldrb	r2, [r3, #5]
    68dc:	42aa      	cmp	r2, r5
    68de:	d1ee      	bne.n	68be <usb_find_cfg_desc+0x26>
    68e0:	e000      	b.n	68e4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    68e2:	2300      	movs	r3, #0
}
    68e4:	4618      	mov	r0, r3
    68e6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    68e8:	2300      	movs	r3, #0
    68ea:	e7fb      	b.n	68e4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    68ec:	2300      	movs	r3, #0
    68ee:	e7f9      	b.n	68e4 <usb_find_cfg_desc+0x4c>
	return NULL;
    68f0:	2300      	movs	r3, #0
    68f2:	e7f7      	b.n	68e4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    68f4:	2300      	movs	r3, #0
    68f6:	e7f5      	b.n	68e4 <usb_find_cfg_desc+0x4c>
	return NULL;
    68f8:	2300      	movs	r3, #0
    68fa:	e7f3      	b.n	68e4 <usb_find_cfg_desc+0x4c>
    68fc:	00006819 	.word	0x00006819

00006900 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    6900:	4288      	cmp	r0, r1
    6902:	d217      	bcs.n	6934 <usb_find_str_desc+0x34>
{
    6904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6908:	460d      	mov	r5, r1
    690a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    690c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    690e:	f04f 0803 	mov.w	r8, #3
    6912:	4f0c      	ldr	r7, [pc, #48]	; (6944 <usb_find_str_desc+0x44>)
    6914:	4642      	mov	r2, r8
    6916:	4629      	mov	r1, r5
    6918:	47b8      	blx	r7
		if (desc) {
    691a:	4603      	mov	r3, r0
    691c:	b170      	cbz	r0, 693c <usb_find_str_desc+0x3c>
	return desc[0];
    691e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    6920:	2801      	cmp	r0, #1
    6922:	d90a      	bls.n	693a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    6924:	42a6      	cmp	r6, r4
    6926:	d009      	beq.n	693c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    6928:	4418      	add	r0, r3
    692a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    692c:	4285      	cmp	r5, r0
    692e:	d8f1      	bhi.n	6914 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    6930:	2300      	movs	r3, #0
    6932:	e003      	b.n	693c <usb_find_str_desc+0x3c>
    6934:	2300      	movs	r3, #0
}
    6936:	4618      	mov	r0, r3
    6938:	4770      	bx	lr
			_desc_len_check();
    693a:	2300      	movs	r3, #0
}
    693c:	4618      	mov	r0, r3
    693e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6942:	bf00      	nop
    6944:	00006819 	.word	0x00006819

00006948 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    6948:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    694a:	4805      	ldr	r0, [pc, #20]	; (6960 <composite_device_init+0x18>)
    694c:	4b05      	ldr	r3, [pc, #20]	; (6964 <composite_device_init+0x1c>)
    694e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    6950:	4b05      	ldr	r3, [pc, #20]	; (6968 <composite_device_init+0x20>)
    6952:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    6954:	4b05      	ldr	r3, [pc, #20]	; (696c <composite_device_init+0x24>)
    6956:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    6958:	4b05      	ldr	r3, [pc, #20]	; (6970 <composite_device_init+0x28>)
    695a:	4798      	blx	r3
    695c:	bd08      	pop	{r3, pc}
    695e:	bf00      	nop
    6960:	200008fc 	.word	0x200008fc
    6964:	000067a1 	.word	0x000067a1
    6968:	00005d49 	.word	0x00005d49
    696c:	00006151 	.word	0x00006151
    6970:	00005f61 	.word	0x00005f61

00006974 <usb_init>:
		}
	}
}

void usb_init(void)
{
    6974:	b508      	push	{r3, lr}

	composite_device_init();
    6976:	4b01      	ldr	r3, [pc, #4]	; (697c <usb_init+0x8>)
    6978:	4798      	blx	r3
    697a:	bd08      	pop	{r3, pc}
    697c:	00006949 	.word	0x00006949

00006980 <__libc_init_array>:
    6980:	b570      	push	{r4, r5, r6, lr}
    6982:	4e0d      	ldr	r6, [pc, #52]	; (69b8 <__libc_init_array+0x38>)
    6984:	4c0d      	ldr	r4, [pc, #52]	; (69bc <__libc_init_array+0x3c>)
    6986:	1ba4      	subs	r4, r4, r6
    6988:	10a4      	asrs	r4, r4, #2
    698a:	2500      	movs	r5, #0
    698c:	42a5      	cmp	r5, r4
    698e:	d109      	bne.n	69a4 <__libc_init_array+0x24>
    6990:	4e0b      	ldr	r6, [pc, #44]	; (69c0 <__libc_init_array+0x40>)
    6992:	4c0c      	ldr	r4, [pc, #48]	; (69c4 <__libc_init_array+0x44>)
    6994:	f001 fc68 	bl	8268 <_init>
    6998:	1ba4      	subs	r4, r4, r6
    699a:	10a4      	asrs	r4, r4, #2
    699c:	2500      	movs	r5, #0
    699e:	42a5      	cmp	r5, r4
    69a0:	d105      	bne.n	69ae <__libc_init_array+0x2e>
    69a2:	bd70      	pop	{r4, r5, r6, pc}
    69a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    69a8:	4798      	blx	r3
    69aa:	3501      	adds	r5, #1
    69ac:	e7ee      	b.n	698c <__libc_init_array+0xc>
    69ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    69b2:	4798      	blx	r3
    69b4:	3501      	adds	r5, #1
    69b6:	e7f2      	b.n	699e <__libc_init_array+0x1e>
    69b8:	00008274 	.word	0x00008274
    69bc:	00008274 	.word	0x00008274
    69c0:	00008274 	.word	0x00008274
    69c4:	00008278 	.word	0x00008278

000069c8 <malloc>:
    69c8:	4b02      	ldr	r3, [pc, #8]	; (69d4 <malloc+0xc>)
    69ca:	4601      	mov	r1, r0
    69cc:	6818      	ldr	r0, [r3, #0]
    69ce:	f000 b865 	b.w	6a9c <_malloc_r>
    69d2:	bf00      	nop
    69d4:	20000058 	.word	0x20000058

000069d8 <memcpy>:
    69d8:	b510      	push	{r4, lr}
    69da:	1e43      	subs	r3, r0, #1
    69dc:	440a      	add	r2, r1
    69de:	4291      	cmp	r1, r2
    69e0:	d100      	bne.n	69e4 <memcpy+0xc>
    69e2:	bd10      	pop	{r4, pc}
    69e4:	f811 4b01 	ldrb.w	r4, [r1], #1
    69e8:	f803 4f01 	strb.w	r4, [r3, #1]!
    69ec:	e7f7      	b.n	69de <memcpy+0x6>

000069ee <memset>:
    69ee:	4402      	add	r2, r0
    69f0:	4603      	mov	r3, r0
    69f2:	4293      	cmp	r3, r2
    69f4:	d100      	bne.n	69f8 <memset+0xa>
    69f6:	4770      	bx	lr
    69f8:	f803 1b01 	strb.w	r1, [r3], #1
    69fc:	e7f9      	b.n	69f2 <memset+0x4>
	...

00006a00 <_free_r>:
    6a00:	b538      	push	{r3, r4, r5, lr}
    6a02:	4605      	mov	r5, r0
    6a04:	2900      	cmp	r1, #0
    6a06:	d045      	beq.n	6a94 <_free_r+0x94>
    6a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6a0c:	1f0c      	subs	r4, r1, #4
    6a0e:	2b00      	cmp	r3, #0
    6a10:	bfb8      	it	lt
    6a12:	18e4      	addlt	r4, r4, r3
    6a14:	f000 fc82 	bl	731c <__malloc_lock>
    6a18:	4a1f      	ldr	r2, [pc, #124]	; (6a98 <_free_r+0x98>)
    6a1a:	6813      	ldr	r3, [r2, #0]
    6a1c:	4610      	mov	r0, r2
    6a1e:	b933      	cbnz	r3, 6a2e <_free_r+0x2e>
    6a20:	6063      	str	r3, [r4, #4]
    6a22:	6014      	str	r4, [r2, #0]
    6a24:	4628      	mov	r0, r5
    6a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6a2a:	f000 bc78 	b.w	731e <__malloc_unlock>
    6a2e:	42a3      	cmp	r3, r4
    6a30:	d90c      	bls.n	6a4c <_free_r+0x4c>
    6a32:	6821      	ldr	r1, [r4, #0]
    6a34:	1862      	adds	r2, r4, r1
    6a36:	4293      	cmp	r3, r2
    6a38:	bf04      	itt	eq
    6a3a:	681a      	ldreq	r2, [r3, #0]
    6a3c:	685b      	ldreq	r3, [r3, #4]
    6a3e:	6063      	str	r3, [r4, #4]
    6a40:	bf04      	itt	eq
    6a42:	1852      	addeq	r2, r2, r1
    6a44:	6022      	streq	r2, [r4, #0]
    6a46:	6004      	str	r4, [r0, #0]
    6a48:	e7ec      	b.n	6a24 <_free_r+0x24>
    6a4a:	4613      	mov	r3, r2
    6a4c:	685a      	ldr	r2, [r3, #4]
    6a4e:	b10a      	cbz	r2, 6a54 <_free_r+0x54>
    6a50:	42a2      	cmp	r2, r4
    6a52:	d9fa      	bls.n	6a4a <_free_r+0x4a>
    6a54:	6819      	ldr	r1, [r3, #0]
    6a56:	1858      	adds	r0, r3, r1
    6a58:	42a0      	cmp	r0, r4
    6a5a:	d10b      	bne.n	6a74 <_free_r+0x74>
    6a5c:	6820      	ldr	r0, [r4, #0]
    6a5e:	4401      	add	r1, r0
    6a60:	1858      	adds	r0, r3, r1
    6a62:	4282      	cmp	r2, r0
    6a64:	6019      	str	r1, [r3, #0]
    6a66:	d1dd      	bne.n	6a24 <_free_r+0x24>
    6a68:	6810      	ldr	r0, [r2, #0]
    6a6a:	6852      	ldr	r2, [r2, #4]
    6a6c:	605a      	str	r2, [r3, #4]
    6a6e:	4401      	add	r1, r0
    6a70:	6019      	str	r1, [r3, #0]
    6a72:	e7d7      	b.n	6a24 <_free_r+0x24>
    6a74:	d902      	bls.n	6a7c <_free_r+0x7c>
    6a76:	230c      	movs	r3, #12
    6a78:	602b      	str	r3, [r5, #0]
    6a7a:	e7d3      	b.n	6a24 <_free_r+0x24>
    6a7c:	6820      	ldr	r0, [r4, #0]
    6a7e:	1821      	adds	r1, r4, r0
    6a80:	428a      	cmp	r2, r1
    6a82:	bf04      	itt	eq
    6a84:	6811      	ldreq	r1, [r2, #0]
    6a86:	6852      	ldreq	r2, [r2, #4]
    6a88:	6062      	str	r2, [r4, #4]
    6a8a:	bf04      	itt	eq
    6a8c:	1809      	addeq	r1, r1, r0
    6a8e:	6021      	streq	r1, [r4, #0]
    6a90:	605c      	str	r4, [r3, #4]
    6a92:	e7c7      	b.n	6a24 <_free_r+0x24>
    6a94:	bd38      	pop	{r3, r4, r5, pc}
    6a96:	bf00      	nop
    6a98:	2000093c 	.word	0x2000093c

00006a9c <_malloc_r>:
    6a9c:	b570      	push	{r4, r5, r6, lr}
    6a9e:	1ccd      	adds	r5, r1, #3
    6aa0:	f025 0503 	bic.w	r5, r5, #3
    6aa4:	3508      	adds	r5, #8
    6aa6:	2d0c      	cmp	r5, #12
    6aa8:	bf38      	it	cc
    6aaa:	250c      	movcc	r5, #12
    6aac:	2d00      	cmp	r5, #0
    6aae:	4606      	mov	r6, r0
    6ab0:	db01      	blt.n	6ab6 <_malloc_r+0x1a>
    6ab2:	42a9      	cmp	r1, r5
    6ab4:	d903      	bls.n	6abe <_malloc_r+0x22>
    6ab6:	230c      	movs	r3, #12
    6ab8:	6033      	str	r3, [r6, #0]
    6aba:	2000      	movs	r0, #0
    6abc:	bd70      	pop	{r4, r5, r6, pc}
    6abe:	f000 fc2d 	bl	731c <__malloc_lock>
    6ac2:	4a23      	ldr	r2, [pc, #140]	; (6b50 <_malloc_r+0xb4>)
    6ac4:	6814      	ldr	r4, [r2, #0]
    6ac6:	4621      	mov	r1, r4
    6ac8:	b991      	cbnz	r1, 6af0 <_malloc_r+0x54>
    6aca:	4c22      	ldr	r4, [pc, #136]	; (6b54 <_malloc_r+0xb8>)
    6acc:	6823      	ldr	r3, [r4, #0]
    6ace:	b91b      	cbnz	r3, 6ad8 <_malloc_r+0x3c>
    6ad0:	4630      	mov	r0, r6
    6ad2:	f000 f8bd 	bl	6c50 <_sbrk_r>
    6ad6:	6020      	str	r0, [r4, #0]
    6ad8:	4629      	mov	r1, r5
    6ada:	4630      	mov	r0, r6
    6adc:	f000 f8b8 	bl	6c50 <_sbrk_r>
    6ae0:	1c43      	adds	r3, r0, #1
    6ae2:	d126      	bne.n	6b32 <_malloc_r+0x96>
    6ae4:	230c      	movs	r3, #12
    6ae6:	6033      	str	r3, [r6, #0]
    6ae8:	4630      	mov	r0, r6
    6aea:	f000 fc18 	bl	731e <__malloc_unlock>
    6aee:	e7e4      	b.n	6aba <_malloc_r+0x1e>
    6af0:	680b      	ldr	r3, [r1, #0]
    6af2:	1b5b      	subs	r3, r3, r5
    6af4:	d41a      	bmi.n	6b2c <_malloc_r+0x90>
    6af6:	2b0b      	cmp	r3, #11
    6af8:	d90f      	bls.n	6b1a <_malloc_r+0x7e>
    6afa:	600b      	str	r3, [r1, #0]
    6afc:	50cd      	str	r5, [r1, r3]
    6afe:	18cc      	adds	r4, r1, r3
    6b00:	4630      	mov	r0, r6
    6b02:	f000 fc0c 	bl	731e <__malloc_unlock>
    6b06:	f104 000b 	add.w	r0, r4, #11
    6b0a:	1d23      	adds	r3, r4, #4
    6b0c:	f020 0007 	bic.w	r0, r0, #7
    6b10:	1ac3      	subs	r3, r0, r3
    6b12:	d01b      	beq.n	6b4c <_malloc_r+0xb0>
    6b14:	425a      	negs	r2, r3
    6b16:	50e2      	str	r2, [r4, r3]
    6b18:	bd70      	pop	{r4, r5, r6, pc}
    6b1a:	428c      	cmp	r4, r1
    6b1c:	bf0d      	iteet	eq
    6b1e:	6863      	ldreq	r3, [r4, #4]
    6b20:	684b      	ldrne	r3, [r1, #4]
    6b22:	6063      	strne	r3, [r4, #4]
    6b24:	6013      	streq	r3, [r2, #0]
    6b26:	bf18      	it	ne
    6b28:	460c      	movne	r4, r1
    6b2a:	e7e9      	b.n	6b00 <_malloc_r+0x64>
    6b2c:	460c      	mov	r4, r1
    6b2e:	6849      	ldr	r1, [r1, #4]
    6b30:	e7ca      	b.n	6ac8 <_malloc_r+0x2c>
    6b32:	1cc4      	adds	r4, r0, #3
    6b34:	f024 0403 	bic.w	r4, r4, #3
    6b38:	42a0      	cmp	r0, r4
    6b3a:	d005      	beq.n	6b48 <_malloc_r+0xac>
    6b3c:	1a21      	subs	r1, r4, r0
    6b3e:	4630      	mov	r0, r6
    6b40:	f000 f886 	bl	6c50 <_sbrk_r>
    6b44:	3001      	adds	r0, #1
    6b46:	d0cd      	beq.n	6ae4 <_malloc_r+0x48>
    6b48:	6025      	str	r5, [r4, #0]
    6b4a:	e7d9      	b.n	6b00 <_malloc_r+0x64>
    6b4c:	bd70      	pop	{r4, r5, r6, pc}
    6b4e:	bf00      	nop
    6b50:	2000093c 	.word	0x2000093c
    6b54:	20000940 	.word	0x20000940

00006b58 <iprintf>:
    6b58:	b40f      	push	{r0, r1, r2, r3}
    6b5a:	4b0a      	ldr	r3, [pc, #40]	; (6b84 <iprintf+0x2c>)
    6b5c:	b513      	push	{r0, r1, r4, lr}
    6b5e:	681c      	ldr	r4, [r3, #0]
    6b60:	b124      	cbz	r4, 6b6c <iprintf+0x14>
    6b62:	69a3      	ldr	r3, [r4, #24]
    6b64:	b913      	cbnz	r3, 6b6c <iprintf+0x14>
    6b66:	4620      	mov	r0, r4
    6b68:	f000 faea 	bl	7140 <__sinit>
    6b6c:	ab05      	add	r3, sp, #20
    6b6e:	9a04      	ldr	r2, [sp, #16]
    6b70:	68a1      	ldr	r1, [r4, #8]
    6b72:	9301      	str	r3, [sp, #4]
    6b74:	4620      	mov	r0, r4
    6b76:	f000 fbfb 	bl	7370 <_vfiprintf_r>
    6b7a:	b002      	add	sp, #8
    6b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b80:	b004      	add	sp, #16
    6b82:	4770      	bx	lr
    6b84:	20000058 	.word	0x20000058

00006b88 <_puts_r>:
    6b88:	b570      	push	{r4, r5, r6, lr}
    6b8a:	460e      	mov	r6, r1
    6b8c:	4605      	mov	r5, r0
    6b8e:	b118      	cbz	r0, 6b98 <_puts_r+0x10>
    6b90:	6983      	ldr	r3, [r0, #24]
    6b92:	b90b      	cbnz	r3, 6b98 <_puts_r+0x10>
    6b94:	f000 fad4 	bl	7140 <__sinit>
    6b98:	69ab      	ldr	r3, [r5, #24]
    6b9a:	68ac      	ldr	r4, [r5, #8]
    6b9c:	b913      	cbnz	r3, 6ba4 <_puts_r+0x1c>
    6b9e:	4628      	mov	r0, r5
    6ba0:	f000 face 	bl	7140 <__sinit>
    6ba4:	4b23      	ldr	r3, [pc, #140]	; (6c34 <_puts_r+0xac>)
    6ba6:	429c      	cmp	r4, r3
    6ba8:	d117      	bne.n	6bda <_puts_r+0x52>
    6baa:	686c      	ldr	r4, [r5, #4]
    6bac:	89a3      	ldrh	r3, [r4, #12]
    6bae:	071b      	lsls	r3, r3, #28
    6bb0:	d51d      	bpl.n	6bee <_puts_r+0x66>
    6bb2:	6923      	ldr	r3, [r4, #16]
    6bb4:	b1db      	cbz	r3, 6bee <_puts_r+0x66>
    6bb6:	3e01      	subs	r6, #1
    6bb8:	68a3      	ldr	r3, [r4, #8]
    6bba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    6bbe:	3b01      	subs	r3, #1
    6bc0:	60a3      	str	r3, [r4, #8]
    6bc2:	b9e9      	cbnz	r1, 6c00 <_puts_r+0x78>
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	da2e      	bge.n	6c26 <_puts_r+0x9e>
    6bc8:	4622      	mov	r2, r4
    6bca:	210a      	movs	r1, #10
    6bcc:	4628      	mov	r0, r5
    6bce:	f000 f905 	bl	6ddc <__swbuf_r>
    6bd2:	3001      	adds	r0, #1
    6bd4:	d011      	beq.n	6bfa <_puts_r+0x72>
    6bd6:	200a      	movs	r0, #10
    6bd8:	bd70      	pop	{r4, r5, r6, pc}
    6bda:	4b17      	ldr	r3, [pc, #92]	; (6c38 <_puts_r+0xb0>)
    6bdc:	429c      	cmp	r4, r3
    6bde:	d101      	bne.n	6be4 <_puts_r+0x5c>
    6be0:	68ac      	ldr	r4, [r5, #8]
    6be2:	e7e3      	b.n	6bac <_puts_r+0x24>
    6be4:	4b15      	ldr	r3, [pc, #84]	; (6c3c <_puts_r+0xb4>)
    6be6:	429c      	cmp	r4, r3
    6be8:	bf08      	it	eq
    6bea:	68ec      	ldreq	r4, [r5, #12]
    6bec:	e7de      	b.n	6bac <_puts_r+0x24>
    6bee:	4621      	mov	r1, r4
    6bf0:	4628      	mov	r0, r5
    6bf2:	f000 f945 	bl	6e80 <__swsetup_r>
    6bf6:	2800      	cmp	r0, #0
    6bf8:	d0dd      	beq.n	6bb6 <_puts_r+0x2e>
    6bfa:	f04f 30ff 	mov.w	r0, #4294967295
    6bfe:	bd70      	pop	{r4, r5, r6, pc}
    6c00:	2b00      	cmp	r3, #0
    6c02:	da04      	bge.n	6c0e <_puts_r+0x86>
    6c04:	69a2      	ldr	r2, [r4, #24]
    6c06:	4293      	cmp	r3, r2
    6c08:	db06      	blt.n	6c18 <_puts_r+0x90>
    6c0a:	290a      	cmp	r1, #10
    6c0c:	d004      	beq.n	6c18 <_puts_r+0x90>
    6c0e:	6823      	ldr	r3, [r4, #0]
    6c10:	1c5a      	adds	r2, r3, #1
    6c12:	6022      	str	r2, [r4, #0]
    6c14:	7019      	strb	r1, [r3, #0]
    6c16:	e7cf      	b.n	6bb8 <_puts_r+0x30>
    6c18:	4622      	mov	r2, r4
    6c1a:	4628      	mov	r0, r5
    6c1c:	f000 f8de 	bl	6ddc <__swbuf_r>
    6c20:	3001      	adds	r0, #1
    6c22:	d1c9      	bne.n	6bb8 <_puts_r+0x30>
    6c24:	e7e9      	b.n	6bfa <_puts_r+0x72>
    6c26:	6823      	ldr	r3, [r4, #0]
    6c28:	200a      	movs	r0, #10
    6c2a:	1c5a      	adds	r2, r3, #1
    6c2c:	6022      	str	r2, [r4, #0]
    6c2e:	7018      	strb	r0, [r3, #0]
    6c30:	bd70      	pop	{r4, r5, r6, pc}
    6c32:	bf00      	nop
    6c34:	000081f4 	.word	0x000081f4
    6c38:	00008214 	.word	0x00008214
    6c3c:	000081d4 	.word	0x000081d4

00006c40 <puts>:
    6c40:	4b02      	ldr	r3, [pc, #8]	; (6c4c <puts+0xc>)
    6c42:	4601      	mov	r1, r0
    6c44:	6818      	ldr	r0, [r3, #0]
    6c46:	f7ff bf9f 	b.w	6b88 <_puts_r>
    6c4a:	bf00      	nop
    6c4c:	20000058 	.word	0x20000058

00006c50 <_sbrk_r>:
    6c50:	b538      	push	{r3, r4, r5, lr}
    6c52:	4c06      	ldr	r4, [pc, #24]	; (6c6c <_sbrk_r+0x1c>)
    6c54:	2300      	movs	r3, #0
    6c56:	4605      	mov	r5, r0
    6c58:	4608      	mov	r0, r1
    6c5a:	6023      	str	r3, [r4, #0]
    6c5c:	f7fb fdfa 	bl	2854 <_sbrk>
    6c60:	1c43      	adds	r3, r0, #1
    6c62:	d102      	bne.n	6c6a <_sbrk_r+0x1a>
    6c64:	6823      	ldr	r3, [r4, #0]
    6c66:	b103      	cbz	r3, 6c6a <_sbrk_r+0x1a>
    6c68:	602b      	str	r3, [r5, #0]
    6c6a:	bd38      	pop	{r3, r4, r5, pc}
    6c6c:	200034f0 	.word	0x200034f0

00006c70 <setbuf>:
    6c70:	2900      	cmp	r1, #0
    6c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6c76:	bf0c      	ite	eq
    6c78:	2202      	moveq	r2, #2
    6c7a:	2200      	movne	r2, #0
    6c7c:	f000 b800 	b.w	6c80 <setvbuf>

00006c80 <setvbuf>:
    6c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6c84:	461d      	mov	r5, r3
    6c86:	4b51      	ldr	r3, [pc, #324]	; (6dcc <setvbuf+0x14c>)
    6c88:	681e      	ldr	r6, [r3, #0]
    6c8a:	4604      	mov	r4, r0
    6c8c:	460f      	mov	r7, r1
    6c8e:	4690      	mov	r8, r2
    6c90:	b126      	cbz	r6, 6c9c <setvbuf+0x1c>
    6c92:	69b3      	ldr	r3, [r6, #24]
    6c94:	b913      	cbnz	r3, 6c9c <setvbuf+0x1c>
    6c96:	4630      	mov	r0, r6
    6c98:	f000 fa52 	bl	7140 <__sinit>
    6c9c:	4b4c      	ldr	r3, [pc, #304]	; (6dd0 <setvbuf+0x150>)
    6c9e:	429c      	cmp	r4, r3
    6ca0:	d152      	bne.n	6d48 <setvbuf+0xc8>
    6ca2:	6874      	ldr	r4, [r6, #4]
    6ca4:	f1b8 0f02 	cmp.w	r8, #2
    6ca8:	d006      	beq.n	6cb8 <setvbuf+0x38>
    6caa:	f1b8 0f01 	cmp.w	r8, #1
    6cae:	f200 8089 	bhi.w	6dc4 <setvbuf+0x144>
    6cb2:	2d00      	cmp	r5, #0
    6cb4:	f2c0 8086 	blt.w	6dc4 <setvbuf+0x144>
    6cb8:	4621      	mov	r1, r4
    6cba:	4630      	mov	r0, r6
    6cbc:	f000 f9d6 	bl	706c <_fflush_r>
    6cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6cc2:	b141      	cbz	r1, 6cd6 <setvbuf+0x56>
    6cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6cc8:	4299      	cmp	r1, r3
    6cca:	d002      	beq.n	6cd2 <setvbuf+0x52>
    6ccc:	4630      	mov	r0, r6
    6cce:	f7ff fe97 	bl	6a00 <_free_r>
    6cd2:	2300      	movs	r3, #0
    6cd4:	6363      	str	r3, [r4, #52]	; 0x34
    6cd6:	2300      	movs	r3, #0
    6cd8:	61a3      	str	r3, [r4, #24]
    6cda:	6063      	str	r3, [r4, #4]
    6cdc:	89a3      	ldrh	r3, [r4, #12]
    6cde:	061b      	lsls	r3, r3, #24
    6ce0:	d503      	bpl.n	6cea <setvbuf+0x6a>
    6ce2:	6921      	ldr	r1, [r4, #16]
    6ce4:	4630      	mov	r0, r6
    6ce6:	f7ff fe8b 	bl	6a00 <_free_r>
    6cea:	89a3      	ldrh	r3, [r4, #12]
    6cec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    6cf0:	f023 0303 	bic.w	r3, r3, #3
    6cf4:	f1b8 0f02 	cmp.w	r8, #2
    6cf8:	81a3      	strh	r3, [r4, #12]
    6cfa:	d05d      	beq.n	6db8 <setvbuf+0x138>
    6cfc:	ab01      	add	r3, sp, #4
    6cfe:	466a      	mov	r2, sp
    6d00:	4621      	mov	r1, r4
    6d02:	4630      	mov	r0, r6
    6d04:	f000 faa6 	bl	7254 <__swhatbuf_r>
    6d08:	89a3      	ldrh	r3, [r4, #12]
    6d0a:	4318      	orrs	r0, r3
    6d0c:	81a0      	strh	r0, [r4, #12]
    6d0e:	bb2d      	cbnz	r5, 6d5c <setvbuf+0xdc>
    6d10:	9d00      	ldr	r5, [sp, #0]
    6d12:	4628      	mov	r0, r5
    6d14:	f7ff fe58 	bl	69c8 <malloc>
    6d18:	4607      	mov	r7, r0
    6d1a:	2800      	cmp	r0, #0
    6d1c:	d14e      	bne.n	6dbc <setvbuf+0x13c>
    6d1e:	f8dd 9000 	ldr.w	r9, [sp]
    6d22:	45a9      	cmp	r9, r5
    6d24:	d13c      	bne.n	6da0 <setvbuf+0x120>
    6d26:	f04f 30ff 	mov.w	r0, #4294967295
    6d2a:	89a3      	ldrh	r3, [r4, #12]
    6d2c:	f043 0302 	orr.w	r3, r3, #2
    6d30:	81a3      	strh	r3, [r4, #12]
    6d32:	2300      	movs	r3, #0
    6d34:	60a3      	str	r3, [r4, #8]
    6d36:	f104 0347 	add.w	r3, r4, #71	; 0x47
    6d3a:	6023      	str	r3, [r4, #0]
    6d3c:	6123      	str	r3, [r4, #16]
    6d3e:	2301      	movs	r3, #1
    6d40:	6163      	str	r3, [r4, #20]
    6d42:	b003      	add	sp, #12
    6d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6d48:	4b22      	ldr	r3, [pc, #136]	; (6dd4 <setvbuf+0x154>)
    6d4a:	429c      	cmp	r4, r3
    6d4c:	d101      	bne.n	6d52 <setvbuf+0xd2>
    6d4e:	68b4      	ldr	r4, [r6, #8]
    6d50:	e7a8      	b.n	6ca4 <setvbuf+0x24>
    6d52:	4b21      	ldr	r3, [pc, #132]	; (6dd8 <setvbuf+0x158>)
    6d54:	429c      	cmp	r4, r3
    6d56:	bf08      	it	eq
    6d58:	68f4      	ldreq	r4, [r6, #12]
    6d5a:	e7a3      	b.n	6ca4 <setvbuf+0x24>
    6d5c:	2f00      	cmp	r7, #0
    6d5e:	d0d8      	beq.n	6d12 <setvbuf+0x92>
    6d60:	69b3      	ldr	r3, [r6, #24]
    6d62:	b913      	cbnz	r3, 6d6a <setvbuf+0xea>
    6d64:	4630      	mov	r0, r6
    6d66:	f000 f9eb 	bl	7140 <__sinit>
    6d6a:	f1b8 0f01 	cmp.w	r8, #1
    6d6e:	bf08      	it	eq
    6d70:	89a3      	ldrheq	r3, [r4, #12]
    6d72:	6027      	str	r7, [r4, #0]
    6d74:	bf04      	itt	eq
    6d76:	f043 0301 	orreq.w	r3, r3, #1
    6d7a:	81a3      	strheq	r3, [r4, #12]
    6d7c:	89a3      	ldrh	r3, [r4, #12]
    6d7e:	6127      	str	r7, [r4, #16]
    6d80:	f013 0008 	ands.w	r0, r3, #8
    6d84:	6165      	str	r5, [r4, #20]
    6d86:	d01b      	beq.n	6dc0 <setvbuf+0x140>
    6d88:	f013 0001 	ands.w	r0, r3, #1
    6d8c:	bf18      	it	ne
    6d8e:	426d      	negne	r5, r5
    6d90:	f04f 0300 	mov.w	r3, #0
    6d94:	bf1d      	ittte	ne
    6d96:	60a3      	strne	r3, [r4, #8]
    6d98:	61a5      	strne	r5, [r4, #24]
    6d9a:	4618      	movne	r0, r3
    6d9c:	60a5      	streq	r5, [r4, #8]
    6d9e:	e7d0      	b.n	6d42 <setvbuf+0xc2>
    6da0:	4648      	mov	r0, r9
    6da2:	f7ff fe11 	bl	69c8 <malloc>
    6da6:	4607      	mov	r7, r0
    6da8:	2800      	cmp	r0, #0
    6daa:	d0bc      	beq.n	6d26 <setvbuf+0xa6>
    6dac:	89a3      	ldrh	r3, [r4, #12]
    6dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6db2:	81a3      	strh	r3, [r4, #12]
    6db4:	464d      	mov	r5, r9
    6db6:	e7d3      	b.n	6d60 <setvbuf+0xe0>
    6db8:	2000      	movs	r0, #0
    6dba:	e7b6      	b.n	6d2a <setvbuf+0xaa>
    6dbc:	46a9      	mov	r9, r5
    6dbe:	e7f5      	b.n	6dac <setvbuf+0x12c>
    6dc0:	60a0      	str	r0, [r4, #8]
    6dc2:	e7be      	b.n	6d42 <setvbuf+0xc2>
    6dc4:	f04f 30ff 	mov.w	r0, #4294967295
    6dc8:	e7bb      	b.n	6d42 <setvbuf+0xc2>
    6dca:	bf00      	nop
    6dcc:	20000058 	.word	0x20000058
    6dd0:	000081f4 	.word	0x000081f4
    6dd4:	00008214 	.word	0x00008214
    6dd8:	000081d4 	.word	0x000081d4

00006ddc <__swbuf_r>:
    6ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dde:	460e      	mov	r6, r1
    6de0:	4614      	mov	r4, r2
    6de2:	4605      	mov	r5, r0
    6de4:	b118      	cbz	r0, 6dee <__swbuf_r+0x12>
    6de6:	6983      	ldr	r3, [r0, #24]
    6de8:	b90b      	cbnz	r3, 6dee <__swbuf_r+0x12>
    6dea:	f000 f9a9 	bl	7140 <__sinit>
    6dee:	4b21      	ldr	r3, [pc, #132]	; (6e74 <__swbuf_r+0x98>)
    6df0:	429c      	cmp	r4, r3
    6df2:	d12a      	bne.n	6e4a <__swbuf_r+0x6e>
    6df4:	686c      	ldr	r4, [r5, #4]
    6df6:	69a3      	ldr	r3, [r4, #24]
    6df8:	60a3      	str	r3, [r4, #8]
    6dfa:	89a3      	ldrh	r3, [r4, #12]
    6dfc:	071a      	lsls	r2, r3, #28
    6dfe:	d52e      	bpl.n	6e5e <__swbuf_r+0x82>
    6e00:	6923      	ldr	r3, [r4, #16]
    6e02:	b363      	cbz	r3, 6e5e <__swbuf_r+0x82>
    6e04:	6923      	ldr	r3, [r4, #16]
    6e06:	6820      	ldr	r0, [r4, #0]
    6e08:	1ac0      	subs	r0, r0, r3
    6e0a:	6963      	ldr	r3, [r4, #20]
    6e0c:	b2f6      	uxtb	r6, r6
    6e0e:	4298      	cmp	r0, r3
    6e10:	4637      	mov	r7, r6
    6e12:	db04      	blt.n	6e1e <__swbuf_r+0x42>
    6e14:	4621      	mov	r1, r4
    6e16:	4628      	mov	r0, r5
    6e18:	f000 f928 	bl	706c <_fflush_r>
    6e1c:	bb28      	cbnz	r0, 6e6a <__swbuf_r+0x8e>
    6e1e:	68a3      	ldr	r3, [r4, #8]
    6e20:	3b01      	subs	r3, #1
    6e22:	60a3      	str	r3, [r4, #8]
    6e24:	6823      	ldr	r3, [r4, #0]
    6e26:	1c5a      	adds	r2, r3, #1
    6e28:	6022      	str	r2, [r4, #0]
    6e2a:	701e      	strb	r6, [r3, #0]
    6e2c:	6963      	ldr	r3, [r4, #20]
    6e2e:	3001      	adds	r0, #1
    6e30:	4298      	cmp	r0, r3
    6e32:	d004      	beq.n	6e3e <__swbuf_r+0x62>
    6e34:	89a3      	ldrh	r3, [r4, #12]
    6e36:	07db      	lsls	r3, r3, #31
    6e38:	d519      	bpl.n	6e6e <__swbuf_r+0x92>
    6e3a:	2e0a      	cmp	r6, #10
    6e3c:	d117      	bne.n	6e6e <__swbuf_r+0x92>
    6e3e:	4621      	mov	r1, r4
    6e40:	4628      	mov	r0, r5
    6e42:	f000 f913 	bl	706c <_fflush_r>
    6e46:	b190      	cbz	r0, 6e6e <__swbuf_r+0x92>
    6e48:	e00f      	b.n	6e6a <__swbuf_r+0x8e>
    6e4a:	4b0b      	ldr	r3, [pc, #44]	; (6e78 <__swbuf_r+0x9c>)
    6e4c:	429c      	cmp	r4, r3
    6e4e:	d101      	bne.n	6e54 <__swbuf_r+0x78>
    6e50:	68ac      	ldr	r4, [r5, #8]
    6e52:	e7d0      	b.n	6df6 <__swbuf_r+0x1a>
    6e54:	4b09      	ldr	r3, [pc, #36]	; (6e7c <__swbuf_r+0xa0>)
    6e56:	429c      	cmp	r4, r3
    6e58:	bf08      	it	eq
    6e5a:	68ec      	ldreq	r4, [r5, #12]
    6e5c:	e7cb      	b.n	6df6 <__swbuf_r+0x1a>
    6e5e:	4621      	mov	r1, r4
    6e60:	4628      	mov	r0, r5
    6e62:	f000 f80d 	bl	6e80 <__swsetup_r>
    6e66:	2800      	cmp	r0, #0
    6e68:	d0cc      	beq.n	6e04 <__swbuf_r+0x28>
    6e6a:	f04f 37ff 	mov.w	r7, #4294967295
    6e6e:	4638      	mov	r0, r7
    6e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e72:	bf00      	nop
    6e74:	000081f4 	.word	0x000081f4
    6e78:	00008214 	.word	0x00008214
    6e7c:	000081d4 	.word	0x000081d4

00006e80 <__swsetup_r>:
    6e80:	4b32      	ldr	r3, [pc, #200]	; (6f4c <__swsetup_r+0xcc>)
    6e82:	b570      	push	{r4, r5, r6, lr}
    6e84:	681d      	ldr	r5, [r3, #0]
    6e86:	4606      	mov	r6, r0
    6e88:	460c      	mov	r4, r1
    6e8a:	b125      	cbz	r5, 6e96 <__swsetup_r+0x16>
    6e8c:	69ab      	ldr	r3, [r5, #24]
    6e8e:	b913      	cbnz	r3, 6e96 <__swsetup_r+0x16>
    6e90:	4628      	mov	r0, r5
    6e92:	f000 f955 	bl	7140 <__sinit>
    6e96:	4b2e      	ldr	r3, [pc, #184]	; (6f50 <__swsetup_r+0xd0>)
    6e98:	429c      	cmp	r4, r3
    6e9a:	d10f      	bne.n	6ebc <__swsetup_r+0x3c>
    6e9c:	686c      	ldr	r4, [r5, #4]
    6e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6ea2:	b29a      	uxth	r2, r3
    6ea4:	0715      	lsls	r5, r2, #28
    6ea6:	d42c      	bmi.n	6f02 <__swsetup_r+0x82>
    6ea8:	06d0      	lsls	r0, r2, #27
    6eaa:	d411      	bmi.n	6ed0 <__swsetup_r+0x50>
    6eac:	2209      	movs	r2, #9
    6eae:	6032      	str	r2, [r6, #0]
    6eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6eb4:	81a3      	strh	r3, [r4, #12]
    6eb6:	f04f 30ff 	mov.w	r0, #4294967295
    6eba:	bd70      	pop	{r4, r5, r6, pc}
    6ebc:	4b25      	ldr	r3, [pc, #148]	; (6f54 <__swsetup_r+0xd4>)
    6ebe:	429c      	cmp	r4, r3
    6ec0:	d101      	bne.n	6ec6 <__swsetup_r+0x46>
    6ec2:	68ac      	ldr	r4, [r5, #8]
    6ec4:	e7eb      	b.n	6e9e <__swsetup_r+0x1e>
    6ec6:	4b24      	ldr	r3, [pc, #144]	; (6f58 <__swsetup_r+0xd8>)
    6ec8:	429c      	cmp	r4, r3
    6eca:	bf08      	it	eq
    6ecc:	68ec      	ldreq	r4, [r5, #12]
    6ece:	e7e6      	b.n	6e9e <__swsetup_r+0x1e>
    6ed0:	0751      	lsls	r1, r2, #29
    6ed2:	d512      	bpl.n	6efa <__swsetup_r+0x7a>
    6ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6ed6:	b141      	cbz	r1, 6eea <__swsetup_r+0x6a>
    6ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6edc:	4299      	cmp	r1, r3
    6ede:	d002      	beq.n	6ee6 <__swsetup_r+0x66>
    6ee0:	4630      	mov	r0, r6
    6ee2:	f7ff fd8d 	bl	6a00 <_free_r>
    6ee6:	2300      	movs	r3, #0
    6ee8:	6363      	str	r3, [r4, #52]	; 0x34
    6eea:	89a3      	ldrh	r3, [r4, #12]
    6eec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    6ef0:	81a3      	strh	r3, [r4, #12]
    6ef2:	2300      	movs	r3, #0
    6ef4:	6063      	str	r3, [r4, #4]
    6ef6:	6923      	ldr	r3, [r4, #16]
    6ef8:	6023      	str	r3, [r4, #0]
    6efa:	89a3      	ldrh	r3, [r4, #12]
    6efc:	f043 0308 	orr.w	r3, r3, #8
    6f00:	81a3      	strh	r3, [r4, #12]
    6f02:	6923      	ldr	r3, [r4, #16]
    6f04:	b94b      	cbnz	r3, 6f1a <__swsetup_r+0x9a>
    6f06:	89a3      	ldrh	r3, [r4, #12]
    6f08:	f403 7320 	and.w	r3, r3, #640	; 0x280
    6f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6f10:	d003      	beq.n	6f1a <__swsetup_r+0x9a>
    6f12:	4621      	mov	r1, r4
    6f14:	4630      	mov	r0, r6
    6f16:	f000 f9c1 	bl	729c <__smakebuf_r>
    6f1a:	89a2      	ldrh	r2, [r4, #12]
    6f1c:	f012 0301 	ands.w	r3, r2, #1
    6f20:	d00c      	beq.n	6f3c <__swsetup_r+0xbc>
    6f22:	2300      	movs	r3, #0
    6f24:	60a3      	str	r3, [r4, #8]
    6f26:	6963      	ldr	r3, [r4, #20]
    6f28:	425b      	negs	r3, r3
    6f2a:	61a3      	str	r3, [r4, #24]
    6f2c:	6923      	ldr	r3, [r4, #16]
    6f2e:	b953      	cbnz	r3, 6f46 <__swsetup_r+0xc6>
    6f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6f34:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    6f38:	d1ba      	bne.n	6eb0 <__swsetup_r+0x30>
    6f3a:	bd70      	pop	{r4, r5, r6, pc}
    6f3c:	0792      	lsls	r2, r2, #30
    6f3e:	bf58      	it	pl
    6f40:	6963      	ldrpl	r3, [r4, #20]
    6f42:	60a3      	str	r3, [r4, #8]
    6f44:	e7f2      	b.n	6f2c <__swsetup_r+0xac>
    6f46:	2000      	movs	r0, #0
    6f48:	e7f7      	b.n	6f3a <__swsetup_r+0xba>
    6f4a:	bf00      	nop
    6f4c:	20000058 	.word	0x20000058
    6f50:	000081f4 	.word	0x000081f4
    6f54:	00008214 	.word	0x00008214
    6f58:	000081d4 	.word	0x000081d4

00006f5c <__sflush_r>:
    6f5c:	898a      	ldrh	r2, [r1, #12]
    6f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f62:	4605      	mov	r5, r0
    6f64:	0710      	lsls	r0, r2, #28
    6f66:	460c      	mov	r4, r1
    6f68:	d45a      	bmi.n	7020 <__sflush_r+0xc4>
    6f6a:	684b      	ldr	r3, [r1, #4]
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	dc05      	bgt.n	6f7c <__sflush_r+0x20>
    6f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6f72:	2b00      	cmp	r3, #0
    6f74:	dc02      	bgt.n	6f7c <__sflush_r+0x20>
    6f76:	2000      	movs	r0, #0
    6f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    6f7e:	2e00      	cmp	r6, #0
    6f80:	d0f9      	beq.n	6f76 <__sflush_r+0x1a>
    6f82:	2300      	movs	r3, #0
    6f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    6f88:	682f      	ldr	r7, [r5, #0]
    6f8a:	602b      	str	r3, [r5, #0]
    6f8c:	d033      	beq.n	6ff6 <__sflush_r+0x9a>
    6f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6f90:	89a3      	ldrh	r3, [r4, #12]
    6f92:	075a      	lsls	r2, r3, #29
    6f94:	d505      	bpl.n	6fa2 <__sflush_r+0x46>
    6f96:	6863      	ldr	r3, [r4, #4]
    6f98:	1ac0      	subs	r0, r0, r3
    6f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6f9c:	b10b      	cbz	r3, 6fa2 <__sflush_r+0x46>
    6f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6fa0:	1ac0      	subs	r0, r0, r3
    6fa2:	2300      	movs	r3, #0
    6fa4:	4602      	mov	r2, r0
    6fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    6fa8:	6a21      	ldr	r1, [r4, #32]
    6faa:	4628      	mov	r0, r5
    6fac:	47b0      	blx	r6
    6fae:	1c43      	adds	r3, r0, #1
    6fb0:	89a3      	ldrh	r3, [r4, #12]
    6fb2:	d106      	bne.n	6fc2 <__sflush_r+0x66>
    6fb4:	6829      	ldr	r1, [r5, #0]
    6fb6:	291d      	cmp	r1, #29
    6fb8:	d84b      	bhi.n	7052 <__sflush_r+0xf6>
    6fba:	4a2b      	ldr	r2, [pc, #172]	; (7068 <__sflush_r+0x10c>)
    6fbc:	40ca      	lsrs	r2, r1
    6fbe:	07d6      	lsls	r6, r2, #31
    6fc0:	d547      	bpl.n	7052 <__sflush_r+0xf6>
    6fc2:	2200      	movs	r2, #0
    6fc4:	6062      	str	r2, [r4, #4]
    6fc6:	04d9      	lsls	r1, r3, #19
    6fc8:	6922      	ldr	r2, [r4, #16]
    6fca:	6022      	str	r2, [r4, #0]
    6fcc:	d504      	bpl.n	6fd8 <__sflush_r+0x7c>
    6fce:	1c42      	adds	r2, r0, #1
    6fd0:	d101      	bne.n	6fd6 <__sflush_r+0x7a>
    6fd2:	682b      	ldr	r3, [r5, #0]
    6fd4:	b903      	cbnz	r3, 6fd8 <__sflush_r+0x7c>
    6fd6:	6560      	str	r0, [r4, #84]	; 0x54
    6fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6fda:	602f      	str	r7, [r5, #0]
    6fdc:	2900      	cmp	r1, #0
    6fde:	d0ca      	beq.n	6f76 <__sflush_r+0x1a>
    6fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6fe4:	4299      	cmp	r1, r3
    6fe6:	d002      	beq.n	6fee <__sflush_r+0x92>
    6fe8:	4628      	mov	r0, r5
    6fea:	f7ff fd09 	bl	6a00 <_free_r>
    6fee:	2000      	movs	r0, #0
    6ff0:	6360      	str	r0, [r4, #52]	; 0x34
    6ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ff6:	6a21      	ldr	r1, [r4, #32]
    6ff8:	2301      	movs	r3, #1
    6ffa:	4628      	mov	r0, r5
    6ffc:	47b0      	blx	r6
    6ffe:	1c41      	adds	r1, r0, #1
    7000:	d1c6      	bne.n	6f90 <__sflush_r+0x34>
    7002:	682b      	ldr	r3, [r5, #0]
    7004:	2b00      	cmp	r3, #0
    7006:	d0c3      	beq.n	6f90 <__sflush_r+0x34>
    7008:	2b1d      	cmp	r3, #29
    700a:	d001      	beq.n	7010 <__sflush_r+0xb4>
    700c:	2b16      	cmp	r3, #22
    700e:	d101      	bne.n	7014 <__sflush_r+0xb8>
    7010:	602f      	str	r7, [r5, #0]
    7012:	e7b0      	b.n	6f76 <__sflush_r+0x1a>
    7014:	89a3      	ldrh	r3, [r4, #12]
    7016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    701a:	81a3      	strh	r3, [r4, #12]
    701c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7020:	690f      	ldr	r7, [r1, #16]
    7022:	2f00      	cmp	r7, #0
    7024:	d0a7      	beq.n	6f76 <__sflush_r+0x1a>
    7026:	0793      	lsls	r3, r2, #30
    7028:	680e      	ldr	r6, [r1, #0]
    702a:	bf08      	it	eq
    702c:	694b      	ldreq	r3, [r1, #20]
    702e:	600f      	str	r7, [r1, #0]
    7030:	bf18      	it	ne
    7032:	2300      	movne	r3, #0
    7034:	eba6 0807 	sub.w	r8, r6, r7
    7038:	608b      	str	r3, [r1, #8]
    703a:	f1b8 0f00 	cmp.w	r8, #0
    703e:	dd9a      	ble.n	6f76 <__sflush_r+0x1a>
    7040:	4643      	mov	r3, r8
    7042:	463a      	mov	r2, r7
    7044:	6a21      	ldr	r1, [r4, #32]
    7046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7048:	4628      	mov	r0, r5
    704a:	47b0      	blx	r6
    704c:	2800      	cmp	r0, #0
    704e:	dc07      	bgt.n	7060 <__sflush_r+0x104>
    7050:	89a3      	ldrh	r3, [r4, #12]
    7052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7056:	81a3      	strh	r3, [r4, #12]
    7058:	f04f 30ff 	mov.w	r0, #4294967295
    705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7060:	4407      	add	r7, r0
    7062:	eba8 0800 	sub.w	r8, r8, r0
    7066:	e7e8      	b.n	703a <__sflush_r+0xde>
    7068:	20400001 	.word	0x20400001

0000706c <_fflush_r>:
    706c:	b538      	push	{r3, r4, r5, lr}
    706e:	690b      	ldr	r3, [r1, #16]
    7070:	4605      	mov	r5, r0
    7072:	460c      	mov	r4, r1
    7074:	b1db      	cbz	r3, 70ae <_fflush_r+0x42>
    7076:	b118      	cbz	r0, 7080 <_fflush_r+0x14>
    7078:	6983      	ldr	r3, [r0, #24]
    707a:	b90b      	cbnz	r3, 7080 <_fflush_r+0x14>
    707c:	f000 f860 	bl	7140 <__sinit>
    7080:	4b0c      	ldr	r3, [pc, #48]	; (70b4 <_fflush_r+0x48>)
    7082:	429c      	cmp	r4, r3
    7084:	d109      	bne.n	709a <_fflush_r+0x2e>
    7086:	686c      	ldr	r4, [r5, #4]
    7088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    708c:	b17b      	cbz	r3, 70ae <_fflush_r+0x42>
    708e:	4621      	mov	r1, r4
    7090:	4628      	mov	r0, r5
    7092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7096:	f7ff bf61 	b.w	6f5c <__sflush_r>
    709a:	4b07      	ldr	r3, [pc, #28]	; (70b8 <_fflush_r+0x4c>)
    709c:	429c      	cmp	r4, r3
    709e:	d101      	bne.n	70a4 <_fflush_r+0x38>
    70a0:	68ac      	ldr	r4, [r5, #8]
    70a2:	e7f1      	b.n	7088 <_fflush_r+0x1c>
    70a4:	4b05      	ldr	r3, [pc, #20]	; (70bc <_fflush_r+0x50>)
    70a6:	429c      	cmp	r4, r3
    70a8:	bf08      	it	eq
    70aa:	68ec      	ldreq	r4, [r5, #12]
    70ac:	e7ec      	b.n	7088 <_fflush_r+0x1c>
    70ae:	2000      	movs	r0, #0
    70b0:	bd38      	pop	{r3, r4, r5, pc}
    70b2:	bf00      	nop
    70b4:	000081f4 	.word	0x000081f4
    70b8:	00008214 	.word	0x00008214
    70bc:	000081d4 	.word	0x000081d4

000070c0 <_cleanup_r>:
    70c0:	4901      	ldr	r1, [pc, #4]	; (70c8 <_cleanup_r+0x8>)
    70c2:	f000 b8a9 	b.w	7218 <_fwalk_reent>
    70c6:	bf00      	nop
    70c8:	0000706d 	.word	0x0000706d

000070cc <std.isra.0>:
    70cc:	2300      	movs	r3, #0
    70ce:	b510      	push	{r4, lr}
    70d0:	4604      	mov	r4, r0
    70d2:	6003      	str	r3, [r0, #0]
    70d4:	6043      	str	r3, [r0, #4]
    70d6:	6083      	str	r3, [r0, #8]
    70d8:	8181      	strh	r1, [r0, #12]
    70da:	6643      	str	r3, [r0, #100]	; 0x64
    70dc:	81c2      	strh	r2, [r0, #14]
    70de:	6103      	str	r3, [r0, #16]
    70e0:	6143      	str	r3, [r0, #20]
    70e2:	6183      	str	r3, [r0, #24]
    70e4:	4619      	mov	r1, r3
    70e6:	2208      	movs	r2, #8
    70e8:	305c      	adds	r0, #92	; 0x5c
    70ea:	f7ff fc80 	bl	69ee <memset>
    70ee:	4b05      	ldr	r3, [pc, #20]	; (7104 <std.isra.0+0x38>)
    70f0:	6263      	str	r3, [r4, #36]	; 0x24
    70f2:	4b05      	ldr	r3, [pc, #20]	; (7108 <std.isra.0+0x3c>)
    70f4:	62a3      	str	r3, [r4, #40]	; 0x28
    70f6:	4b05      	ldr	r3, [pc, #20]	; (710c <std.isra.0+0x40>)
    70f8:	62e3      	str	r3, [r4, #44]	; 0x2c
    70fa:	4b05      	ldr	r3, [pc, #20]	; (7110 <std.isra.0+0x44>)
    70fc:	6224      	str	r4, [r4, #32]
    70fe:	6323      	str	r3, [r4, #48]	; 0x30
    7100:	bd10      	pop	{r4, pc}
    7102:	bf00      	nop
    7104:	000078c9 	.word	0x000078c9
    7108:	000078eb 	.word	0x000078eb
    710c:	00007923 	.word	0x00007923
    7110:	00007947 	.word	0x00007947

00007114 <__sfmoreglue>:
    7114:	b570      	push	{r4, r5, r6, lr}
    7116:	1e4a      	subs	r2, r1, #1
    7118:	2568      	movs	r5, #104	; 0x68
    711a:	4355      	muls	r5, r2
    711c:	460e      	mov	r6, r1
    711e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    7122:	f7ff fcbb 	bl	6a9c <_malloc_r>
    7126:	4604      	mov	r4, r0
    7128:	b140      	cbz	r0, 713c <__sfmoreglue+0x28>
    712a:	2100      	movs	r1, #0
    712c:	e880 0042 	stmia.w	r0, {r1, r6}
    7130:	300c      	adds	r0, #12
    7132:	60a0      	str	r0, [r4, #8]
    7134:	f105 0268 	add.w	r2, r5, #104	; 0x68
    7138:	f7ff fc59 	bl	69ee <memset>
    713c:	4620      	mov	r0, r4
    713e:	bd70      	pop	{r4, r5, r6, pc}

00007140 <__sinit>:
    7140:	6983      	ldr	r3, [r0, #24]
    7142:	b510      	push	{r4, lr}
    7144:	4604      	mov	r4, r0
    7146:	bb33      	cbnz	r3, 7196 <__sinit+0x56>
    7148:	6483      	str	r3, [r0, #72]	; 0x48
    714a:	64c3      	str	r3, [r0, #76]	; 0x4c
    714c:	6503      	str	r3, [r0, #80]	; 0x50
    714e:	4b12      	ldr	r3, [pc, #72]	; (7198 <__sinit+0x58>)
    7150:	4a12      	ldr	r2, [pc, #72]	; (719c <__sinit+0x5c>)
    7152:	681b      	ldr	r3, [r3, #0]
    7154:	6282      	str	r2, [r0, #40]	; 0x28
    7156:	4298      	cmp	r0, r3
    7158:	bf04      	itt	eq
    715a:	2301      	moveq	r3, #1
    715c:	6183      	streq	r3, [r0, #24]
    715e:	f000 f81f 	bl	71a0 <__sfp>
    7162:	6060      	str	r0, [r4, #4]
    7164:	4620      	mov	r0, r4
    7166:	f000 f81b 	bl	71a0 <__sfp>
    716a:	60a0      	str	r0, [r4, #8]
    716c:	4620      	mov	r0, r4
    716e:	f000 f817 	bl	71a0 <__sfp>
    7172:	2200      	movs	r2, #0
    7174:	60e0      	str	r0, [r4, #12]
    7176:	2104      	movs	r1, #4
    7178:	6860      	ldr	r0, [r4, #4]
    717a:	f7ff ffa7 	bl	70cc <std.isra.0>
    717e:	2201      	movs	r2, #1
    7180:	2109      	movs	r1, #9
    7182:	68a0      	ldr	r0, [r4, #8]
    7184:	f7ff ffa2 	bl	70cc <std.isra.0>
    7188:	2202      	movs	r2, #2
    718a:	2112      	movs	r1, #18
    718c:	68e0      	ldr	r0, [r4, #12]
    718e:	f7ff ff9d 	bl	70cc <std.isra.0>
    7192:	2301      	movs	r3, #1
    7194:	61a3      	str	r3, [r4, #24]
    7196:	bd10      	pop	{r4, pc}
    7198:	000081d0 	.word	0x000081d0
    719c:	000070c1 	.word	0x000070c1

000071a0 <__sfp>:
    71a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71a2:	4b1c      	ldr	r3, [pc, #112]	; (7214 <__sfp+0x74>)
    71a4:	681e      	ldr	r6, [r3, #0]
    71a6:	69b3      	ldr	r3, [r6, #24]
    71a8:	4607      	mov	r7, r0
    71aa:	b913      	cbnz	r3, 71b2 <__sfp+0x12>
    71ac:	4630      	mov	r0, r6
    71ae:	f7ff ffc7 	bl	7140 <__sinit>
    71b2:	3648      	adds	r6, #72	; 0x48
    71b4:	68b4      	ldr	r4, [r6, #8]
    71b6:	6873      	ldr	r3, [r6, #4]
    71b8:	3b01      	subs	r3, #1
    71ba:	d503      	bpl.n	71c4 <__sfp+0x24>
    71bc:	6833      	ldr	r3, [r6, #0]
    71be:	b133      	cbz	r3, 71ce <__sfp+0x2e>
    71c0:	6836      	ldr	r6, [r6, #0]
    71c2:	e7f7      	b.n	71b4 <__sfp+0x14>
    71c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    71c8:	b16d      	cbz	r5, 71e6 <__sfp+0x46>
    71ca:	3468      	adds	r4, #104	; 0x68
    71cc:	e7f4      	b.n	71b8 <__sfp+0x18>
    71ce:	2104      	movs	r1, #4
    71d0:	4638      	mov	r0, r7
    71d2:	f7ff ff9f 	bl	7114 <__sfmoreglue>
    71d6:	6030      	str	r0, [r6, #0]
    71d8:	2800      	cmp	r0, #0
    71da:	d1f1      	bne.n	71c0 <__sfp+0x20>
    71dc:	230c      	movs	r3, #12
    71de:	603b      	str	r3, [r7, #0]
    71e0:	4604      	mov	r4, r0
    71e2:	4620      	mov	r0, r4
    71e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    71ea:	81e3      	strh	r3, [r4, #14]
    71ec:	2301      	movs	r3, #1
    71ee:	81a3      	strh	r3, [r4, #12]
    71f0:	6665      	str	r5, [r4, #100]	; 0x64
    71f2:	6025      	str	r5, [r4, #0]
    71f4:	60a5      	str	r5, [r4, #8]
    71f6:	6065      	str	r5, [r4, #4]
    71f8:	6125      	str	r5, [r4, #16]
    71fa:	6165      	str	r5, [r4, #20]
    71fc:	61a5      	str	r5, [r4, #24]
    71fe:	2208      	movs	r2, #8
    7200:	4629      	mov	r1, r5
    7202:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7206:	f7ff fbf2 	bl	69ee <memset>
    720a:	6365      	str	r5, [r4, #52]	; 0x34
    720c:	63a5      	str	r5, [r4, #56]	; 0x38
    720e:	64a5      	str	r5, [r4, #72]	; 0x48
    7210:	64e5      	str	r5, [r4, #76]	; 0x4c
    7212:	e7e6      	b.n	71e2 <__sfp+0x42>
    7214:	000081d0 	.word	0x000081d0

00007218 <_fwalk_reent>:
    7218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    721c:	4680      	mov	r8, r0
    721e:	4689      	mov	r9, r1
    7220:	f100 0448 	add.w	r4, r0, #72	; 0x48
    7224:	2600      	movs	r6, #0
    7226:	b914      	cbnz	r4, 722e <_fwalk_reent+0x16>
    7228:	4630      	mov	r0, r6
    722a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    722e:	68a5      	ldr	r5, [r4, #8]
    7230:	6867      	ldr	r7, [r4, #4]
    7232:	3f01      	subs	r7, #1
    7234:	d501      	bpl.n	723a <_fwalk_reent+0x22>
    7236:	6824      	ldr	r4, [r4, #0]
    7238:	e7f5      	b.n	7226 <_fwalk_reent+0xe>
    723a:	89ab      	ldrh	r3, [r5, #12]
    723c:	2b01      	cmp	r3, #1
    723e:	d907      	bls.n	7250 <_fwalk_reent+0x38>
    7240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    7244:	3301      	adds	r3, #1
    7246:	d003      	beq.n	7250 <_fwalk_reent+0x38>
    7248:	4629      	mov	r1, r5
    724a:	4640      	mov	r0, r8
    724c:	47c8      	blx	r9
    724e:	4306      	orrs	r6, r0
    7250:	3568      	adds	r5, #104	; 0x68
    7252:	e7ee      	b.n	7232 <_fwalk_reent+0x1a>

00007254 <__swhatbuf_r>:
    7254:	b570      	push	{r4, r5, r6, lr}
    7256:	460e      	mov	r6, r1
    7258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    725c:	2900      	cmp	r1, #0
    725e:	b090      	sub	sp, #64	; 0x40
    7260:	4614      	mov	r4, r2
    7262:	461d      	mov	r5, r3
    7264:	da07      	bge.n	7276 <__swhatbuf_r+0x22>
    7266:	2300      	movs	r3, #0
    7268:	602b      	str	r3, [r5, #0]
    726a:	89b3      	ldrh	r3, [r6, #12]
    726c:	061a      	lsls	r2, r3, #24
    726e:	d410      	bmi.n	7292 <__swhatbuf_r+0x3e>
    7270:	f44f 6380 	mov.w	r3, #1024	; 0x400
    7274:	e00e      	b.n	7294 <__swhatbuf_r+0x40>
    7276:	aa01      	add	r2, sp, #4
    7278:	f000 fb8c 	bl	7994 <_fstat_r>
    727c:	2800      	cmp	r0, #0
    727e:	dbf2      	blt.n	7266 <__swhatbuf_r+0x12>
    7280:	9a02      	ldr	r2, [sp, #8]
    7282:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    7286:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    728a:	425a      	negs	r2, r3
    728c:	415a      	adcs	r2, r3
    728e:	602a      	str	r2, [r5, #0]
    7290:	e7ee      	b.n	7270 <__swhatbuf_r+0x1c>
    7292:	2340      	movs	r3, #64	; 0x40
    7294:	2000      	movs	r0, #0
    7296:	6023      	str	r3, [r4, #0]
    7298:	b010      	add	sp, #64	; 0x40
    729a:	bd70      	pop	{r4, r5, r6, pc}

0000729c <__smakebuf_r>:
    729c:	898b      	ldrh	r3, [r1, #12]
    729e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    72a0:	079d      	lsls	r5, r3, #30
    72a2:	4606      	mov	r6, r0
    72a4:	460c      	mov	r4, r1
    72a6:	d507      	bpl.n	72b8 <__smakebuf_r+0x1c>
    72a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    72ac:	6023      	str	r3, [r4, #0]
    72ae:	6123      	str	r3, [r4, #16]
    72b0:	2301      	movs	r3, #1
    72b2:	6163      	str	r3, [r4, #20]
    72b4:	b002      	add	sp, #8
    72b6:	bd70      	pop	{r4, r5, r6, pc}
    72b8:	ab01      	add	r3, sp, #4
    72ba:	466a      	mov	r2, sp
    72bc:	f7ff ffca 	bl	7254 <__swhatbuf_r>
    72c0:	9900      	ldr	r1, [sp, #0]
    72c2:	4605      	mov	r5, r0
    72c4:	4630      	mov	r0, r6
    72c6:	f7ff fbe9 	bl	6a9c <_malloc_r>
    72ca:	b948      	cbnz	r0, 72e0 <__smakebuf_r+0x44>
    72cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    72d0:	059a      	lsls	r2, r3, #22
    72d2:	d4ef      	bmi.n	72b4 <__smakebuf_r+0x18>
    72d4:	f023 0303 	bic.w	r3, r3, #3
    72d8:	f043 0302 	orr.w	r3, r3, #2
    72dc:	81a3      	strh	r3, [r4, #12]
    72de:	e7e3      	b.n	72a8 <__smakebuf_r+0xc>
    72e0:	4b0d      	ldr	r3, [pc, #52]	; (7318 <__smakebuf_r+0x7c>)
    72e2:	62b3      	str	r3, [r6, #40]	; 0x28
    72e4:	89a3      	ldrh	r3, [r4, #12]
    72e6:	6020      	str	r0, [r4, #0]
    72e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    72ec:	81a3      	strh	r3, [r4, #12]
    72ee:	9b00      	ldr	r3, [sp, #0]
    72f0:	6163      	str	r3, [r4, #20]
    72f2:	9b01      	ldr	r3, [sp, #4]
    72f4:	6120      	str	r0, [r4, #16]
    72f6:	b15b      	cbz	r3, 7310 <__smakebuf_r+0x74>
    72f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    72fc:	4630      	mov	r0, r6
    72fe:	f000 fb5b 	bl	79b8 <_isatty_r>
    7302:	b128      	cbz	r0, 7310 <__smakebuf_r+0x74>
    7304:	89a3      	ldrh	r3, [r4, #12]
    7306:	f023 0303 	bic.w	r3, r3, #3
    730a:	f043 0301 	orr.w	r3, r3, #1
    730e:	81a3      	strh	r3, [r4, #12]
    7310:	89a3      	ldrh	r3, [r4, #12]
    7312:	431d      	orrs	r5, r3
    7314:	81a5      	strh	r5, [r4, #12]
    7316:	e7cd      	b.n	72b4 <__smakebuf_r+0x18>
    7318:	000070c1 	.word	0x000070c1

0000731c <__malloc_lock>:
    731c:	4770      	bx	lr

0000731e <__malloc_unlock>:
    731e:	4770      	bx	lr

00007320 <__sfputc_r>:
    7320:	6893      	ldr	r3, [r2, #8]
    7322:	3b01      	subs	r3, #1
    7324:	2b00      	cmp	r3, #0
    7326:	b410      	push	{r4}
    7328:	6093      	str	r3, [r2, #8]
    732a:	da08      	bge.n	733e <__sfputc_r+0x1e>
    732c:	6994      	ldr	r4, [r2, #24]
    732e:	42a3      	cmp	r3, r4
    7330:	db02      	blt.n	7338 <__sfputc_r+0x18>
    7332:	b2cb      	uxtb	r3, r1
    7334:	2b0a      	cmp	r3, #10
    7336:	d102      	bne.n	733e <__sfputc_r+0x1e>
    7338:	bc10      	pop	{r4}
    733a:	f7ff bd4f 	b.w	6ddc <__swbuf_r>
    733e:	6813      	ldr	r3, [r2, #0]
    7340:	1c58      	adds	r0, r3, #1
    7342:	6010      	str	r0, [r2, #0]
    7344:	7019      	strb	r1, [r3, #0]
    7346:	b2c8      	uxtb	r0, r1
    7348:	bc10      	pop	{r4}
    734a:	4770      	bx	lr

0000734c <__sfputs_r>:
    734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    734e:	4606      	mov	r6, r0
    7350:	460f      	mov	r7, r1
    7352:	4614      	mov	r4, r2
    7354:	18d5      	adds	r5, r2, r3
    7356:	42ac      	cmp	r4, r5
    7358:	d101      	bne.n	735e <__sfputs_r+0x12>
    735a:	2000      	movs	r0, #0
    735c:	e007      	b.n	736e <__sfputs_r+0x22>
    735e:	463a      	mov	r2, r7
    7360:	f814 1b01 	ldrb.w	r1, [r4], #1
    7364:	4630      	mov	r0, r6
    7366:	f7ff ffdb 	bl	7320 <__sfputc_r>
    736a:	1c43      	adds	r3, r0, #1
    736c:	d1f3      	bne.n	7356 <__sfputs_r+0xa>
    736e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007370 <_vfiprintf_r>:
    7370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7374:	b09d      	sub	sp, #116	; 0x74
    7376:	460c      	mov	r4, r1
    7378:	4617      	mov	r7, r2
    737a:	9303      	str	r3, [sp, #12]
    737c:	4606      	mov	r6, r0
    737e:	b118      	cbz	r0, 7388 <_vfiprintf_r+0x18>
    7380:	6983      	ldr	r3, [r0, #24]
    7382:	b90b      	cbnz	r3, 7388 <_vfiprintf_r+0x18>
    7384:	f7ff fedc 	bl	7140 <__sinit>
    7388:	4b7c      	ldr	r3, [pc, #496]	; (757c <_vfiprintf_r+0x20c>)
    738a:	429c      	cmp	r4, r3
    738c:	d157      	bne.n	743e <_vfiprintf_r+0xce>
    738e:	6874      	ldr	r4, [r6, #4]
    7390:	89a3      	ldrh	r3, [r4, #12]
    7392:	0718      	lsls	r0, r3, #28
    7394:	d55d      	bpl.n	7452 <_vfiprintf_r+0xe2>
    7396:	6923      	ldr	r3, [r4, #16]
    7398:	2b00      	cmp	r3, #0
    739a:	d05a      	beq.n	7452 <_vfiprintf_r+0xe2>
    739c:	2300      	movs	r3, #0
    739e:	9309      	str	r3, [sp, #36]	; 0x24
    73a0:	2320      	movs	r3, #32
    73a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    73a6:	2330      	movs	r3, #48	; 0x30
    73a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    73ac:	f04f 0b01 	mov.w	fp, #1
    73b0:	46b8      	mov	r8, r7
    73b2:	4645      	mov	r5, r8
    73b4:	f815 3b01 	ldrb.w	r3, [r5], #1
    73b8:	2b00      	cmp	r3, #0
    73ba:	d155      	bne.n	7468 <_vfiprintf_r+0xf8>
    73bc:	ebb8 0a07 	subs.w	sl, r8, r7
    73c0:	d00b      	beq.n	73da <_vfiprintf_r+0x6a>
    73c2:	4653      	mov	r3, sl
    73c4:	463a      	mov	r2, r7
    73c6:	4621      	mov	r1, r4
    73c8:	4630      	mov	r0, r6
    73ca:	f7ff ffbf 	bl	734c <__sfputs_r>
    73ce:	3001      	adds	r0, #1
    73d0:	f000 80c4 	beq.w	755c <_vfiprintf_r+0x1ec>
    73d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    73d6:	4453      	add	r3, sl
    73d8:	9309      	str	r3, [sp, #36]	; 0x24
    73da:	f898 3000 	ldrb.w	r3, [r8]
    73de:	2b00      	cmp	r3, #0
    73e0:	f000 80bc 	beq.w	755c <_vfiprintf_r+0x1ec>
    73e4:	2300      	movs	r3, #0
    73e6:	f04f 32ff 	mov.w	r2, #4294967295
    73ea:	9304      	str	r3, [sp, #16]
    73ec:	9307      	str	r3, [sp, #28]
    73ee:	9205      	str	r2, [sp, #20]
    73f0:	9306      	str	r3, [sp, #24]
    73f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    73f6:	931a      	str	r3, [sp, #104]	; 0x68
    73f8:	2205      	movs	r2, #5
    73fa:	7829      	ldrb	r1, [r5, #0]
    73fc:	4860      	ldr	r0, [pc, #384]	; (7580 <_vfiprintf_r+0x210>)
    73fe:	f000 faff 	bl	7a00 <memchr>
    7402:	f105 0801 	add.w	r8, r5, #1
    7406:	9b04      	ldr	r3, [sp, #16]
    7408:	2800      	cmp	r0, #0
    740a:	d131      	bne.n	7470 <_vfiprintf_r+0x100>
    740c:	06d9      	lsls	r1, r3, #27
    740e:	bf44      	itt	mi
    7410:	2220      	movmi	r2, #32
    7412:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    7416:	071a      	lsls	r2, r3, #28
    7418:	bf44      	itt	mi
    741a:	222b      	movmi	r2, #43	; 0x2b
    741c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    7420:	782a      	ldrb	r2, [r5, #0]
    7422:	2a2a      	cmp	r2, #42	; 0x2a
    7424:	d02c      	beq.n	7480 <_vfiprintf_r+0x110>
    7426:	9a07      	ldr	r2, [sp, #28]
    7428:	2100      	movs	r1, #0
    742a:	200a      	movs	r0, #10
    742c:	46a8      	mov	r8, r5
    742e:	3501      	adds	r5, #1
    7430:	f898 3000 	ldrb.w	r3, [r8]
    7434:	3b30      	subs	r3, #48	; 0x30
    7436:	2b09      	cmp	r3, #9
    7438:	d96d      	bls.n	7516 <_vfiprintf_r+0x1a6>
    743a:	b371      	cbz	r1, 749a <_vfiprintf_r+0x12a>
    743c:	e026      	b.n	748c <_vfiprintf_r+0x11c>
    743e:	4b51      	ldr	r3, [pc, #324]	; (7584 <_vfiprintf_r+0x214>)
    7440:	429c      	cmp	r4, r3
    7442:	d101      	bne.n	7448 <_vfiprintf_r+0xd8>
    7444:	68b4      	ldr	r4, [r6, #8]
    7446:	e7a3      	b.n	7390 <_vfiprintf_r+0x20>
    7448:	4b4f      	ldr	r3, [pc, #316]	; (7588 <_vfiprintf_r+0x218>)
    744a:	429c      	cmp	r4, r3
    744c:	bf08      	it	eq
    744e:	68f4      	ldreq	r4, [r6, #12]
    7450:	e79e      	b.n	7390 <_vfiprintf_r+0x20>
    7452:	4621      	mov	r1, r4
    7454:	4630      	mov	r0, r6
    7456:	f7ff fd13 	bl	6e80 <__swsetup_r>
    745a:	2800      	cmp	r0, #0
    745c:	d09e      	beq.n	739c <_vfiprintf_r+0x2c>
    745e:	f04f 30ff 	mov.w	r0, #4294967295
    7462:	b01d      	add	sp, #116	; 0x74
    7464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7468:	2b25      	cmp	r3, #37	; 0x25
    746a:	d0a7      	beq.n	73bc <_vfiprintf_r+0x4c>
    746c:	46a8      	mov	r8, r5
    746e:	e7a0      	b.n	73b2 <_vfiprintf_r+0x42>
    7470:	4a43      	ldr	r2, [pc, #268]	; (7580 <_vfiprintf_r+0x210>)
    7472:	1a80      	subs	r0, r0, r2
    7474:	fa0b f000 	lsl.w	r0, fp, r0
    7478:	4318      	orrs	r0, r3
    747a:	9004      	str	r0, [sp, #16]
    747c:	4645      	mov	r5, r8
    747e:	e7bb      	b.n	73f8 <_vfiprintf_r+0x88>
    7480:	9a03      	ldr	r2, [sp, #12]
    7482:	1d11      	adds	r1, r2, #4
    7484:	6812      	ldr	r2, [r2, #0]
    7486:	9103      	str	r1, [sp, #12]
    7488:	2a00      	cmp	r2, #0
    748a:	db01      	blt.n	7490 <_vfiprintf_r+0x120>
    748c:	9207      	str	r2, [sp, #28]
    748e:	e004      	b.n	749a <_vfiprintf_r+0x12a>
    7490:	4252      	negs	r2, r2
    7492:	f043 0302 	orr.w	r3, r3, #2
    7496:	9207      	str	r2, [sp, #28]
    7498:	9304      	str	r3, [sp, #16]
    749a:	f898 3000 	ldrb.w	r3, [r8]
    749e:	2b2e      	cmp	r3, #46	; 0x2e
    74a0:	d110      	bne.n	74c4 <_vfiprintf_r+0x154>
    74a2:	f898 3001 	ldrb.w	r3, [r8, #1]
    74a6:	2b2a      	cmp	r3, #42	; 0x2a
    74a8:	f108 0101 	add.w	r1, r8, #1
    74ac:	d137      	bne.n	751e <_vfiprintf_r+0x1ae>
    74ae:	9b03      	ldr	r3, [sp, #12]
    74b0:	1d1a      	adds	r2, r3, #4
    74b2:	681b      	ldr	r3, [r3, #0]
    74b4:	9203      	str	r2, [sp, #12]
    74b6:	2b00      	cmp	r3, #0
    74b8:	bfb8      	it	lt
    74ba:	f04f 33ff 	movlt.w	r3, #4294967295
    74be:	f108 0802 	add.w	r8, r8, #2
    74c2:	9305      	str	r3, [sp, #20]
    74c4:	4d31      	ldr	r5, [pc, #196]	; (758c <_vfiprintf_r+0x21c>)
    74c6:	f898 1000 	ldrb.w	r1, [r8]
    74ca:	2203      	movs	r2, #3
    74cc:	4628      	mov	r0, r5
    74ce:	f000 fa97 	bl	7a00 <memchr>
    74d2:	b140      	cbz	r0, 74e6 <_vfiprintf_r+0x176>
    74d4:	2340      	movs	r3, #64	; 0x40
    74d6:	1b40      	subs	r0, r0, r5
    74d8:	fa03 f000 	lsl.w	r0, r3, r0
    74dc:	9b04      	ldr	r3, [sp, #16]
    74de:	4303      	orrs	r3, r0
    74e0:	9304      	str	r3, [sp, #16]
    74e2:	f108 0801 	add.w	r8, r8, #1
    74e6:	f898 1000 	ldrb.w	r1, [r8]
    74ea:	4829      	ldr	r0, [pc, #164]	; (7590 <_vfiprintf_r+0x220>)
    74ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    74f0:	2206      	movs	r2, #6
    74f2:	f108 0701 	add.w	r7, r8, #1
    74f6:	f000 fa83 	bl	7a00 <memchr>
    74fa:	2800      	cmp	r0, #0
    74fc:	d034      	beq.n	7568 <_vfiprintf_r+0x1f8>
    74fe:	4b25      	ldr	r3, [pc, #148]	; (7594 <_vfiprintf_r+0x224>)
    7500:	bb03      	cbnz	r3, 7544 <_vfiprintf_r+0x1d4>
    7502:	9b03      	ldr	r3, [sp, #12]
    7504:	3307      	adds	r3, #7
    7506:	f023 0307 	bic.w	r3, r3, #7
    750a:	3308      	adds	r3, #8
    750c:	9303      	str	r3, [sp, #12]
    750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7510:	444b      	add	r3, r9
    7512:	9309      	str	r3, [sp, #36]	; 0x24
    7514:	e74c      	b.n	73b0 <_vfiprintf_r+0x40>
    7516:	fb00 3202 	mla	r2, r0, r2, r3
    751a:	2101      	movs	r1, #1
    751c:	e786      	b.n	742c <_vfiprintf_r+0xbc>
    751e:	2300      	movs	r3, #0
    7520:	9305      	str	r3, [sp, #20]
    7522:	4618      	mov	r0, r3
    7524:	250a      	movs	r5, #10
    7526:	4688      	mov	r8, r1
    7528:	3101      	adds	r1, #1
    752a:	f898 2000 	ldrb.w	r2, [r8]
    752e:	3a30      	subs	r2, #48	; 0x30
    7530:	2a09      	cmp	r2, #9
    7532:	d903      	bls.n	753c <_vfiprintf_r+0x1cc>
    7534:	2b00      	cmp	r3, #0
    7536:	d0c5      	beq.n	74c4 <_vfiprintf_r+0x154>
    7538:	9005      	str	r0, [sp, #20]
    753a:	e7c3      	b.n	74c4 <_vfiprintf_r+0x154>
    753c:	fb05 2000 	mla	r0, r5, r0, r2
    7540:	2301      	movs	r3, #1
    7542:	e7f0      	b.n	7526 <_vfiprintf_r+0x1b6>
    7544:	ab03      	add	r3, sp, #12
    7546:	9300      	str	r3, [sp, #0]
    7548:	4622      	mov	r2, r4
    754a:	4b13      	ldr	r3, [pc, #76]	; (7598 <_vfiprintf_r+0x228>)
    754c:	a904      	add	r1, sp, #16
    754e:	4630      	mov	r0, r6
    7550:	f3af 8000 	nop.w
    7554:	f1b0 3fff 	cmp.w	r0, #4294967295
    7558:	4681      	mov	r9, r0
    755a:	d1d8      	bne.n	750e <_vfiprintf_r+0x19e>
    755c:	89a3      	ldrh	r3, [r4, #12]
    755e:	065b      	lsls	r3, r3, #25
    7560:	f53f af7d 	bmi.w	745e <_vfiprintf_r+0xee>
    7564:	9809      	ldr	r0, [sp, #36]	; 0x24
    7566:	e77c      	b.n	7462 <_vfiprintf_r+0xf2>
    7568:	ab03      	add	r3, sp, #12
    756a:	9300      	str	r3, [sp, #0]
    756c:	4622      	mov	r2, r4
    756e:	4b0a      	ldr	r3, [pc, #40]	; (7598 <_vfiprintf_r+0x228>)
    7570:	a904      	add	r1, sp, #16
    7572:	4630      	mov	r0, r6
    7574:	f000 f888 	bl	7688 <_printf_i>
    7578:	e7ec      	b.n	7554 <_vfiprintf_r+0x1e4>
    757a:	bf00      	nop
    757c:	000081f4 	.word	0x000081f4
    7580:	00008234 	.word	0x00008234
    7584:	00008214 	.word	0x00008214
    7588:	000081d4 	.word	0x000081d4
    758c:	0000823a 	.word	0x0000823a
    7590:	0000823e 	.word	0x0000823e
    7594:	00000000 	.word	0x00000000
    7598:	0000734d 	.word	0x0000734d

0000759c <_printf_common>:
    759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    75a0:	4691      	mov	r9, r2
    75a2:	461f      	mov	r7, r3
    75a4:	688a      	ldr	r2, [r1, #8]
    75a6:	690b      	ldr	r3, [r1, #16]
    75a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    75ac:	4293      	cmp	r3, r2
    75ae:	bfb8      	it	lt
    75b0:	4613      	movlt	r3, r2
    75b2:	f8c9 3000 	str.w	r3, [r9]
    75b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    75ba:	4606      	mov	r6, r0
    75bc:	460c      	mov	r4, r1
    75be:	b112      	cbz	r2, 75c6 <_printf_common+0x2a>
    75c0:	3301      	adds	r3, #1
    75c2:	f8c9 3000 	str.w	r3, [r9]
    75c6:	6823      	ldr	r3, [r4, #0]
    75c8:	0699      	lsls	r1, r3, #26
    75ca:	bf42      	ittt	mi
    75cc:	f8d9 3000 	ldrmi.w	r3, [r9]
    75d0:	3302      	addmi	r3, #2
    75d2:	f8c9 3000 	strmi.w	r3, [r9]
    75d6:	6825      	ldr	r5, [r4, #0]
    75d8:	f015 0506 	ands.w	r5, r5, #6
    75dc:	d107      	bne.n	75ee <_printf_common+0x52>
    75de:	f104 0a19 	add.w	sl, r4, #25
    75e2:	68e3      	ldr	r3, [r4, #12]
    75e4:	f8d9 2000 	ldr.w	r2, [r9]
    75e8:	1a9b      	subs	r3, r3, r2
    75ea:	429d      	cmp	r5, r3
    75ec:	db29      	blt.n	7642 <_printf_common+0xa6>
    75ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    75f2:	6822      	ldr	r2, [r4, #0]
    75f4:	3300      	adds	r3, #0
    75f6:	bf18      	it	ne
    75f8:	2301      	movne	r3, #1
    75fa:	0692      	lsls	r2, r2, #26
    75fc:	d42e      	bmi.n	765c <_printf_common+0xc0>
    75fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
    7602:	4639      	mov	r1, r7
    7604:	4630      	mov	r0, r6
    7606:	47c0      	blx	r8
    7608:	3001      	adds	r0, #1
    760a:	d021      	beq.n	7650 <_printf_common+0xb4>
    760c:	6823      	ldr	r3, [r4, #0]
    760e:	68e5      	ldr	r5, [r4, #12]
    7610:	f8d9 2000 	ldr.w	r2, [r9]
    7614:	f003 0306 	and.w	r3, r3, #6
    7618:	2b04      	cmp	r3, #4
    761a:	bf08      	it	eq
    761c:	1aad      	subeq	r5, r5, r2
    761e:	68a3      	ldr	r3, [r4, #8]
    7620:	6922      	ldr	r2, [r4, #16]
    7622:	bf0c      	ite	eq
    7624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    7628:	2500      	movne	r5, #0
    762a:	4293      	cmp	r3, r2
    762c:	bfc4      	itt	gt
    762e:	1a9b      	subgt	r3, r3, r2
    7630:	18ed      	addgt	r5, r5, r3
    7632:	f04f 0900 	mov.w	r9, #0
    7636:	341a      	adds	r4, #26
    7638:	454d      	cmp	r5, r9
    763a:	d11b      	bne.n	7674 <_printf_common+0xd8>
    763c:	2000      	movs	r0, #0
    763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7642:	2301      	movs	r3, #1
    7644:	4652      	mov	r2, sl
    7646:	4639      	mov	r1, r7
    7648:	4630      	mov	r0, r6
    764a:	47c0      	blx	r8
    764c:	3001      	adds	r0, #1
    764e:	d103      	bne.n	7658 <_printf_common+0xbc>
    7650:	f04f 30ff 	mov.w	r0, #4294967295
    7654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7658:	3501      	adds	r5, #1
    765a:	e7c2      	b.n	75e2 <_printf_common+0x46>
    765c:	18e1      	adds	r1, r4, r3
    765e:	1c5a      	adds	r2, r3, #1
    7660:	2030      	movs	r0, #48	; 0x30
    7662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    7666:	4422      	add	r2, r4
    7668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    766c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    7670:	3302      	adds	r3, #2
    7672:	e7c4      	b.n	75fe <_printf_common+0x62>
    7674:	2301      	movs	r3, #1
    7676:	4622      	mov	r2, r4
    7678:	4639      	mov	r1, r7
    767a:	4630      	mov	r0, r6
    767c:	47c0      	blx	r8
    767e:	3001      	adds	r0, #1
    7680:	d0e6      	beq.n	7650 <_printf_common+0xb4>
    7682:	f109 0901 	add.w	r9, r9, #1
    7686:	e7d7      	b.n	7638 <_printf_common+0x9c>

00007688 <_printf_i>:
    7688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    768c:	4617      	mov	r7, r2
    768e:	7e0a      	ldrb	r2, [r1, #24]
    7690:	b085      	sub	sp, #20
    7692:	2a6e      	cmp	r2, #110	; 0x6e
    7694:	4698      	mov	r8, r3
    7696:	4606      	mov	r6, r0
    7698:	460c      	mov	r4, r1
    769a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    769c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    76a0:	f000 80bc 	beq.w	781c <_printf_i+0x194>
    76a4:	d81a      	bhi.n	76dc <_printf_i+0x54>
    76a6:	2a63      	cmp	r2, #99	; 0x63
    76a8:	d02e      	beq.n	7708 <_printf_i+0x80>
    76aa:	d80a      	bhi.n	76c2 <_printf_i+0x3a>
    76ac:	2a00      	cmp	r2, #0
    76ae:	f000 80c8 	beq.w	7842 <_printf_i+0x1ba>
    76b2:	2a58      	cmp	r2, #88	; 0x58
    76b4:	f000 808a 	beq.w	77cc <_printf_i+0x144>
    76b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    76bc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    76c0:	e02a      	b.n	7718 <_printf_i+0x90>
    76c2:	2a64      	cmp	r2, #100	; 0x64
    76c4:	d001      	beq.n	76ca <_printf_i+0x42>
    76c6:	2a69      	cmp	r2, #105	; 0x69
    76c8:	d1f6      	bne.n	76b8 <_printf_i+0x30>
    76ca:	6821      	ldr	r1, [r4, #0]
    76cc:	681a      	ldr	r2, [r3, #0]
    76ce:	f011 0f80 	tst.w	r1, #128	; 0x80
    76d2:	d023      	beq.n	771c <_printf_i+0x94>
    76d4:	1d11      	adds	r1, r2, #4
    76d6:	6019      	str	r1, [r3, #0]
    76d8:	6813      	ldr	r3, [r2, #0]
    76da:	e027      	b.n	772c <_printf_i+0xa4>
    76dc:	2a73      	cmp	r2, #115	; 0x73
    76de:	f000 80b4 	beq.w	784a <_printf_i+0x1c2>
    76e2:	d808      	bhi.n	76f6 <_printf_i+0x6e>
    76e4:	2a6f      	cmp	r2, #111	; 0x6f
    76e6:	d02a      	beq.n	773e <_printf_i+0xb6>
    76e8:	2a70      	cmp	r2, #112	; 0x70
    76ea:	d1e5      	bne.n	76b8 <_printf_i+0x30>
    76ec:	680a      	ldr	r2, [r1, #0]
    76ee:	f042 0220 	orr.w	r2, r2, #32
    76f2:	600a      	str	r2, [r1, #0]
    76f4:	e003      	b.n	76fe <_printf_i+0x76>
    76f6:	2a75      	cmp	r2, #117	; 0x75
    76f8:	d021      	beq.n	773e <_printf_i+0xb6>
    76fa:	2a78      	cmp	r2, #120	; 0x78
    76fc:	d1dc      	bne.n	76b8 <_printf_i+0x30>
    76fe:	2278      	movs	r2, #120	; 0x78
    7700:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    7704:	496e      	ldr	r1, [pc, #440]	; (78c0 <_printf_i+0x238>)
    7706:	e064      	b.n	77d2 <_printf_i+0x14a>
    7708:	681a      	ldr	r2, [r3, #0]
    770a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    770e:	1d11      	adds	r1, r2, #4
    7710:	6019      	str	r1, [r3, #0]
    7712:	6813      	ldr	r3, [r2, #0]
    7714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    7718:	2301      	movs	r3, #1
    771a:	e0a3      	b.n	7864 <_printf_i+0x1dc>
    771c:	f011 0f40 	tst.w	r1, #64	; 0x40
    7720:	f102 0104 	add.w	r1, r2, #4
    7724:	6019      	str	r1, [r3, #0]
    7726:	d0d7      	beq.n	76d8 <_printf_i+0x50>
    7728:	f9b2 3000 	ldrsh.w	r3, [r2]
    772c:	2b00      	cmp	r3, #0
    772e:	da03      	bge.n	7738 <_printf_i+0xb0>
    7730:	222d      	movs	r2, #45	; 0x2d
    7732:	425b      	negs	r3, r3
    7734:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    7738:	4962      	ldr	r1, [pc, #392]	; (78c4 <_printf_i+0x23c>)
    773a:	220a      	movs	r2, #10
    773c:	e017      	b.n	776e <_printf_i+0xe6>
    773e:	6820      	ldr	r0, [r4, #0]
    7740:	6819      	ldr	r1, [r3, #0]
    7742:	f010 0f80 	tst.w	r0, #128	; 0x80
    7746:	d003      	beq.n	7750 <_printf_i+0xc8>
    7748:	1d08      	adds	r0, r1, #4
    774a:	6018      	str	r0, [r3, #0]
    774c:	680b      	ldr	r3, [r1, #0]
    774e:	e006      	b.n	775e <_printf_i+0xd6>
    7750:	f010 0f40 	tst.w	r0, #64	; 0x40
    7754:	f101 0004 	add.w	r0, r1, #4
    7758:	6018      	str	r0, [r3, #0]
    775a:	d0f7      	beq.n	774c <_printf_i+0xc4>
    775c:	880b      	ldrh	r3, [r1, #0]
    775e:	4959      	ldr	r1, [pc, #356]	; (78c4 <_printf_i+0x23c>)
    7760:	2a6f      	cmp	r2, #111	; 0x6f
    7762:	bf14      	ite	ne
    7764:	220a      	movne	r2, #10
    7766:	2208      	moveq	r2, #8
    7768:	2000      	movs	r0, #0
    776a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    776e:	6865      	ldr	r5, [r4, #4]
    7770:	60a5      	str	r5, [r4, #8]
    7772:	2d00      	cmp	r5, #0
    7774:	f2c0 809c 	blt.w	78b0 <_printf_i+0x228>
    7778:	6820      	ldr	r0, [r4, #0]
    777a:	f020 0004 	bic.w	r0, r0, #4
    777e:	6020      	str	r0, [r4, #0]
    7780:	2b00      	cmp	r3, #0
    7782:	d13f      	bne.n	7804 <_printf_i+0x17c>
    7784:	2d00      	cmp	r5, #0
    7786:	f040 8095 	bne.w	78b4 <_printf_i+0x22c>
    778a:	4675      	mov	r5, lr
    778c:	2a08      	cmp	r2, #8
    778e:	d10b      	bne.n	77a8 <_printf_i+0x120>
    7790:	6823      	ldr	r3, [r4, #0]
    7792:	07da      	lsls	r2, r3, #31
    7794:	d508      	bpl.n	77a8 <_printf_i+0x120>
    7796:	6923      	ldr	r3, [r4, #16]
    7798:	6862      	ldr	r2, [r4, #4]
    779a:	429a      	cmp	r2, r3
    779c:	bfde      	ittt	le
    779e:	2330      	movle	r3, #48	; 0x30
    77a0:	f805 3c01 	strble.w	r3, [r5, #-1]
    77a4:	f105 35ff 	addle.w	r5, r5, #4294967295
    77a8:	ebae 0305 	sub.w	r3, lr, r5
    77ac:	6123      	str	r3, [r4, #16]
    77ae:	f8cd 8000 	str.w	r8, [sp]
    77b2:	463b      	mov	r3, r7
    77b4:	aa03      	add	r2, sp, #12
    77b6:	4621      	mov	r1, r4
    77b8:	4630      	mov	r0, r6
    77ba:	f7ff feef 	bl	759c <_printf_common>
    77be:	3001      	adds	r0, #1
    77c0:	d155      	bne.n	786e <_printf_i+0x1e6>
    77c2:	f04f 30ff 	mov.w	r0, #4294967295
    77c6:	b005      	add	sp, #20
    77c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    77cc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    77d0:	493c      	ldr	r1, [pc, #240]	; (78c4 <_printf_i+0x23c>)
    77d2:	6822      	ldr	r2, [r4, #0]
    77d4:	6818      	ldr	r0, [r3, #0]
    77d6:	f012 0f80 	tst.w	r2, #128	; 0x80
    77da:	f100 0504 	add.w	r5, r0, #4
    77de:	601d      	str	r5, [r3, #0]
    77e0:	d001      	beq.n	77e6 <_printf_i+0x15e>
    77e2:	6803      	ldr	r3, [r0, #0]
    77e4:	e002      	b.n	77ec <_printf_i+0x164>
    77e6:	0655      	lsls	r5, r2, #25
    77e8:	d5fb      	bpl.n	77e2 <_printf_i+0x15a>
    77ea:	8803      	ldrh	r3, [r0, #0]
    77ec:	07d0      	lsls	r0, r2, #31
    77ee:	bf44      	itt	mi
    77f0:	f042 0220 	orrmi.w	r2, r2, #32
    77f4:	6022      	strmi	r2, [r4, #0]
    77f6:	b91b      	cbnz	r3, 7800 <_printf_i+0x178>
    77f8:	6822      	ldr	r2, [r4, #0]
    77fa:	f022 0220 	bic.w	r2, r2, #32
    77fe:	6022      	str	r2, [r4, #0]
    7800:	2210      	movs	r2, #16
    7802:	e7b1      	b.n	7768 <_printf_i+0xe0>
    7804:	4675      	mov	r5, lr
    7806:	fbb3 f0f2 	udiv	r0, r3, r2
    780a:	fb02 3310 	mls	r3, r2, r0, r3
    780e:	5ccb      	ldrb	r3, [r1, r3]
    7810:	f805 3d01 	strb.w	r3, [r5, #-1]!
    7814:	4603      	mov	r3, r0
    7816:	2800      	cmp	r0, #0
    7818:	d1f5      	bne.n	7806 <_printf_i+0x17e>
    781a:	e7b7      	b.n	778c <_printf_i+0x104>
    781c:	6808      	ldr	r0, [r1, #0]
    781e:	681a      	ldr	r2, [r3, #0]
    7820:	6949      	ldr	r1, [r1, #20]
    7822:	f010 0f80 	tst.w	r0, #128	; 0x80
    7826:	d004      	beq.n	7832 <_printf_i+0x1aa>
    7828:	1d10      	adds	r0, r2, #4
    782a:	6018      	str	r0, [r3, #0]
    782c:	6813      	ldr	r3, [r2, #0]
    782e:	6019      	str	r1, [r3, #0]
    7830:	e007      	b.n	7842 <_printf_i+0x1ba>
    7832:	f010 0f40 	tst.w	r0, #64	; 0x40
    7836:	f102 0004 	add.w	r0, r2, #4
    783a:	6018      	str	r0, [r3, #0]
    783c:	6813      	ldr	r3, [r2, #0]
    783e:	d0f6      	beq.n	782e <_printf_i+0x1a6>
    7840:	8019      	strh	r1, [r3, #0]
    7842:	2300      	movs	r3, #0
    7844:	6123      	str	r3, [r4, #16]
    7846:	4675      	mov	r5, lr
    7848:	e7b1      	b.n	77ae <_printf_i+0x126>
    784a:	681a      	ldr	r2, [r3, #0]
    784c:	1d11      	adds	r1, r2, #4
    784e:	6019      	str	r1, [r3, #0]
    7850:	6815      	ldr	r5, [r2, #0]
    7852:	6862      	ldr	r2, [r4, #4]
    7854:	2100      	movs	r1, #0
    7856:	4628      	mov	r0, r5
    7858:	f000 f8d2 	bl	7a00 <memchr>
    785c:	b108      	cbz	r0, 7862 <_printf_i+0x1da>
    785e:	1b40      	subs	r0, r0, r5
    7860:	6060      	str	r0, [r4, #4]
    7862:	6863      	ldr	r3, [r4, #4]
    7864:	6123      	str	r3, [r4, #16]
    7866:	2300      	movs	r3, #0
    7868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    786c:	e79f      	b.n	77ae <_printf_i+0x126>
    786e:	6923      	ldr	r3, [r4, #16]
    7870:	462a      	mov	r2, r5
    7872:	4639      	mov	r1, r7
    7874:	4630      	mov	r0, r6
    7876:	47c0      	blx	r8
    7878:	3001      	adds	r0, #1
    787a:	d0a2      	beq.n	77c2 <_printf_i+0x13a>
    787c:	6823      	ldr	r3, [r4, #0]
    787e:	079b      	lsls	r3, r3, #30
    7880:	d507      	bpl.n	7892 <_printf_i+0x20a>
    7882:	2500      	movs	r5, #0
    7884:	f104 0919 	add.w	r9, r4, #25
    7888:	68e3      	ldr	r3, [r4, #12]
    788a:	9a03      	ldr	r2, [sp, #12]
    788c:	1a9b      	subs	r3, r3, r2
    788e:	429d      	cmp	r5, r3
    7890:	db05      	blt.n	789e <_printf_i+0x216>
    7892:	68e0      	ldr	r0, [r4, #12]
    7894:	9b03      	ldr	r3, [sp, #12]
    7896:	4298      	cmp	r0, r3
    7898:	bfb8      	it	lt
    789a:	4618      	movlt	r0, r3
    789c:	e793      	b.n	77c6 <_printf_i+0x13e>
    789e:	2301      	movs	r3, #1
    78a0:	464a      	mov	r2, r9
    78a2:	4639      	mov	r1, r7
    78a4:	4630      	mov	r0, r6
    78a6:	47c0      	blx	r8
    78a8:	3001      	adds	r0, #1
    78aa:	d08a      	beq.n	77c2 <_printf_i+0x13a>
    78ac:	3501      	adds	r5, #1
    78ae:	e7eb      	b.n	7888 <_printf_i+0x200>
    78b0:	2b00      	cmp	r3, #0
    78b2:	d1a7      	bne.n	7804 <_printf_i+0x17c>
    78b4:	780b      	ldrb	r3, [r1, #0]
    78b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    78ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
    78be:	e765      	b.n	778c <_printf_i+0x104>
    78c0:	00008256 	.word	0x00008256
    78c4:	00008245 	.word	0x00008245

000078c8 <__sread>:
    78c8:	b510      	push	{r4, lr}
    78ca:	460c      	mov	r4, r1
    78cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    78d0:	f000 f8e6 	bl	7aa0 <_read_r>
    78d4:	2800      	cmp	r0, #0
    78d6:	bfab      	itete	ge
    78d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    78da:	89a3      	ldrhlt	r3, [r4, #12]
    78dc:	181b      	addge	r3, r3, r0
    78de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    78e2:	bfac      	ite	ge
    78e4:	6563      	strge	r3, [r4, #84]	; 0x54
    78e6:	81a3      	strhlt	r3, [r4, #12]
    78e8:	bd10      	pop	{r4, pc}

000078ea <__swrite>:
    78ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78ee:	461f      	mov	r7, r3
    78f0:	898b      	ldrh	r3, [r1, #12]
    78f2:	05db      	lsls	r3, r3, #23
    78f4:	4605      	mov	r5, r0
    78f6:	460c      	mov	r4, r1
    78f8:	4616      	mov	r6, r2
    78fa:	d505      	bpl.n	7908 <__swrite+0x1e>
    78fc:	2302      	movs	r3, #2
    78fe:	2200      	movs	r2, #0
    7900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7904:	f000 f868 	bl	79d8 <_lseek_r>
    7908:	89a3      	ldrh	r3, [r4, #12]
    790a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    790e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    7912:	81a3      	strh	r3, [r4, #12]
    7914:	4632      	mov	r2, r6
    7916:	463b      	mov	r3, r7
    7918:	4628      	mov	r0, r5
    791a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    791e:	f000 b817 	b.w	7950 <_write_r>

00007922 <__sseek>:
    7922:	b510      	push	{r4, lr}
    7924:	460c      	mov	r4, r1
    7926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    792a:	f000 f855 	bl	79d8 <_lseek_r>
    792e:	1c43      	adds	r3, r0, #1
    7930:	89a3      	ldrh	r3, [r4, #12]
    7932:	bf15      	itete	ne
    7934:	6560      	strne	r0, [r4, #84]	; 0x54
    7936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    793a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    793e:	81a3      	strheq	r3, [r4, #12]
    7940:	bf18      	it	ne
    7942:	81a3      	strhne	r3, [r4, #12]
    7944:	bd10      	pop	{r4, pc}

00007946 <__sclose>:
    7946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    794a:	f000 b813 	b.w	7974 <_close_r>
	...

00007950 <_write_r>:
    7950:	b538      	push	{r3, r4, r5, lr}
    7952:	4c07      	ldr	r4, [pc, #28]	; (7970 <_write_r+0x20>)
    7954:	4605      	mov	r5, r0
    7956:	4608      	mov	r0, r1
    7958:	4611      	mov	r1, r2
    795a:	2200      	movs	r2, #0
    795c:	6022      	str	r2, [r4, #0]
    795e:	461a      	mov	r2, r3
    7960:	f7fe f866 	bl	5a30 <_write>
    7964:	1c43      	adds	r3, r0, #1
    7966:	d102      	bne.n	796e <_write_r+0x1e>
    7968:	6823      	ldr	r3, [r4, #0]
    796a:	b103      	cbz	r3, 796e <_write_r+0x1e>
    796c:	602b      	str	r3, [r5, #0]
    796e:	bd38      	pop	{r3, r4, r5, pc}
    7970:	200034f0 	.word	0x200034f0

00007974 <_close_r>:
    7974:	b538      	push	{r3, r4, r5, lr}
    7976:	4c06      	ldr	r4, [pc, #24]	; (7990 <_close_r+0x1c>)
    7978:	2300      	movs	r3, #0
    797a:	4605      	mov	r5, r0
    797c:	4608      	mov	r0, r1
    797e:	6023      	str	r3, [r4, #0]
    7980:	f7fa ff7a 	bl	2878 <_close>
    7984:	1c43      	adds	r3, r0, #1
    7986:	d102      	bne.n	798e <_close_r+0x1a>
    7988:	6823      	ldr	r3, [r4, #0]
    798a:	b103      	cbz	r3, 798e <_close_r+0x1a>
    798c:	602b      	str	r3, [r5, #0]
    798e:	bd38      	pop	{r3, r4, r5, pc}
    7990:	200034f0 	.word	0x200034f0

00007994 <_fstat_r>:
    7994:	b538      	push	{r3, r4, r5, lr}
    7996:	4c07      	ldr	r4, [pc, #28]	; (79b4 <_fstat_r+0x20>)
    7998:	2300      	movs	r3, #0
    799a:	4605      	mov	r5, r0
    799c:	4608      	mov	r0, r1
    799e:	4611      	mov	r1, r2
    79a0:	6023      	str	r3, [r4, #0]
    79a2:	f7fa ff6c 	bl	287e <_fstat>
    79a6:	1c43      	adds	r3, r0, #1
    79a8:	d102      	bne.n	79b0 <_fstat_r+0x1c>
    79aa:	6823      	ldr	r3, [r4, #0]
    79ac:	b103      	cbz	r3, 79b0 <_fstat_r+0x1c>
    79ae:	602b      	str	r3, [r5, #0]
    79b0:	bd38      	pop	{r3, r4, r5, pc}
    79b2:	bf00      	nop
    79b4:	200034f0 	.word	0x200034f0

000079b8 <_isatty_r>:
    79b8:	b538      	push	{r3, r4, r5, lr}
    79ba:	4c06      	ldr	r4, [pc, #24]	; (79d4 <_isatty_r+0x1c>)
    79bc:	2300      	movs	r3, #0
    79be:	4605      	mov	r5, r0
    79c0:	4608      	mov	r0, r1
    79c2:	6023      	str	r3, [r4, #0]
    79c4:	f7fa ff60 	bl	2888 <_isatty>
    79c8:	1c43      	adds	r3, r0, #1
    79ca:	d102      	bne.n	79d2 <_isatty_r+0x1a>
    79cc:	6823      	ldr	r3, [r4, #0]
    79ce:	b103      	cbz	r3, 79d2 <_isatty_r+0x1a>
    79d0:	602b      	str	r3, [r5, #0]
    79d2:	bd38      	pop	{r3, r4, r5, pc}
    79d4:	200034f0 	.word	0x200034f0

000079d8 <_lseek_r>:
    79d8:	b538      	push	{r3, r4, r5, lr}
    79da:	4c07      	ldr	r4, [pc, #28]	; (79f8 <_lseek_r+0x20>)
    79dc:	4605      	mov	r5, r0
    79de:	4608      	mov	r0, r1
    79e0:	4611      	mov	r1, r2
    79e2:	2200      	movs	r2, #0
    79e4:	6022      	str	r2, [r4, #0]
    79e6:	461a      	mov	r2, r3
    79e8:	f7fa ff50 	bl	288c <_lseek>
    79ec:	1c43      	adds	r3, r0, #1
    79ee:	d102      	bne.n	79f6 <_lseek_r+0x1e>
    79f0:	6823      	ldr	r3, [r4, #0]
    79f2:	b103      	cbz	r3, 79f6 <_lseek_r+0x1e>
    79f4:	602b      	str	r3, [r5, #0]
    79f6:	bd38      	pop	{r3, r4, r5, pc}
    79f8:	200034f0 	.word	0x200034f0
    79fc:	00000000 	.word	0x00000000

00007a00 <memchr>:
    7a00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7a04:	2a10      	cmp	r2, #16
    7a06:	db2b      	blt.n	7a60 <memchr+0x60>
    7a08:	f010 0f07 	tst.w	r0, #7
    7a0c:	d008      	beq.n	7a20 <memchr+0x20>
    7a0e:	f810 3b01 	ldrb.w	r3, [r0], #1
    7a12:	3a01      	subs	r2, #1
    7a14:	428b      	cmp	r3, r1
    7a16:	d02d      	beq.n	7a74 <memchr+0x74>
    7a18:	f010 0f07 	tst.w	r0, #7
    7a1c:	b342      	cbz	r2, 7a70 <memchr+0x70>
    7a1e:	d1f6      	bne.n	7a0e <memchr+0xe>
    7a20:	b4f0      	push	{r4, r5, r6, r7}
    7a22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    7a26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    7a2a:	f022 0407 	bic.w	r4, r2, #7
    7a2e:	f07f 0700 	mvns.w	r7, #0
    7a32:	2300      	movs	r3, #0
    7a34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    7a38:	3c08      	subs	r4, #8
    7a3a:	ea85 0501 	eor.w	r5, r5, r1
    7a3e:	ea86 0601 	eor.w	r6, r6, r1
    7a42:	fa85 f547 	uadd8	r5, r5, r7
    7a46:	faa3 f587 	sel	r5, r3, r7
    7a4a:	fa86 f647 	uadd8	r6, r6, r7
    7a4e:	faa5 f687 	sel	r6, r5, r7
    7a52:	b98e      	cbnz	r6, 7a78 <memchr+0x78>
    7a54:	d1ee      	bne.n	7a34 <memchr+0x34>
    7a56:	bcf0      	pop	{r4, r5, r6, r7}
    7a58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7a5c:	f002 0207 	and.w	r2, r2, #7
    7a60:	b132      	cbz	r2, 7a70 <memchr+0x70>
    7a62:	f810 3b01 	ldrb.w	r3, [r0], #1
    7a66:	3a01      	subs	r2, #1
    7a68:	ea83 0301 	eor.w	r3, r3, r1
    7a6c:	b113      	cbz	r3, 7a74 <memchr+0x74>
    7a6e:	d1f8      	bne.n	7a62 <memchr+0x62>
    7a70:	2000      	movs	r0, #0
    7a72:	4770      	bx	lr
    7a74:	3801      	subs	r0, #1
    7a76:	4770      	bx	lr
    7a78:	2d00      	cmp	r5, #0
    7a7a:	bf06      	itte	eq
    7a7c:	4635      	moveq	r5, r6
    7a7e:	3803      	subeq	r0, #3
    7a80:	3807      	subne	r0, #7
    7a82:	f015 0f01 	tst.w	r5, #1
    7a86:	d107      	bne.n	7a98 <memchr+0x98>
    7a88:	3001      	adds	r0, #1
    7a8a:	f415 7f80 	tst.w	r5, #256	; 0x100
    7a8e:	bf02      	ittt	eq
    7a90:	3001      	addeq	r0, #1
    7a92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    7a96:	3001      	addeq	r0, #1
    7a98:	bcf0      	pop	{r4, r5, r6, r7}
    7a9a:	3801      	subs	r0, #1
    7a9c:	4770      	bx	lr
    7a9e:	bf00      	nop

00007aa0 <_read_r>:
    7aa0:	b538      	push	{r3, r4, r5, lr}
    7aa2:	4c07      	ldr	r4, [pc, #28]	; (7ac0 <_read_r+0x20>)
    7aa4:	4605      	mov	r5, r0
    7aa6:	4608      	mov	r0, r1
    7aa8:	4611      	mov	r1, r2
    7aaa:	2200      	movs	r2, #0
    7aac:	6022      	str	r2, [r4, #0]
    7aae:	461a      	mov	r2, r3
    7ab0:	f7fd ffae 	bl	5a10 <_read>
    7ab4:	1c43      	adds	r3, r0, #1
    7ab6:	d102      	bne.n	7abe <_read_r+0x1e>
    7ab8:	6823      	ldr	r3, [r4, #0]
    7aba:	b103      	cbz	r3, 7abe <_read_r+0x1e>
    7abc:	602b      	str	r3, [r5, #0]
    7abe:	bd38      	pop	{r3, r4, r5, pc}
    7ac0:	200034f0 	.word	0x200034f0
    7ac4:	64726148 	.word	0x64726148
    7ac8:	65726177 	.word	0x65726177
    7acc:	73655420 	.word	0x73655420
    7ad0:	6e492074 	.word	0x6e492074
    7ad4:	00007469 	.word	0x00007469

00007ad8 <_adcs>:
    7ad8:	01000000 0003000c 00041807 00000000     ................
    7ae8:	0014080b 00010000 000c0100 18040003     ................
    7af8:	00000004 080b0000 00000014              ............

00007b04 <_cfgs>:
    7b04:	00200600 08068000 00200400 08068000     .. ....... .....
    7b14:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    7b34:	00200b00 14000003 00200a00 08000002     .. ....... .....
    7b44:	00201300 14000003 00000000 00000000     .. .............
	...
    7bf4:	00005400 1c000000 00005300 0c000000     .T.......S......

00007c04 <user_mux_confs>:
	...
    7c30:	04030201 04030201 00000000 00000000     ................
	...

00007c48 <channel_confs>:
    7c48:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

00007c88 <interrupt_cfg>:
    7c88:	00000002 00000002 00000002 00000002     ................
	...
    7d08:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    7d18:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00007d28 <_usarts>:
    7d28:	00000000 40100004 00030000 00700002     .......@......p.
    7d38:	0000aaaa 00000000 00000001 40100004     ...............@
    7d48:	00030000 00700002 0000aaaa 00000000     ......p.........
    7d58:	00000002 40100004 00030000 00700002     .......@......p.
    7d68:	00005555 00000000 00000004 40100004     UU.............@
    7d78:	00030000 00700002 0000aaaa 00000000     ......p.........
    7d88:	00000006 40100004 00030000 00700002     .......@......p.
    7d98:	0000aaaa 00000000                       ........

00007da0 <_i2cms>:
    7da0:	00000005 00200014 00000100 0000e6e5     ...... .........
    7db0:	00d70000 02dc6c00                       .....l..

00007db8 <sercomspi_regs>:
    7db8:	3020000c 00020000 00000000 01ff0005     .. 0............
    7dc8:	20000c03 00000000 00000000 ff000600     ... ............
    7dd8:	00000701 40003800 40003c00 4101a000     .....8.@.<.@...A
    7de8:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    7df8:	43001800                                ...C

00007dfc <_tcs>:
    7dfc:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    7e0c:	00000000 006c0001 00000308 00000021     ......l.....!...
    7e1c:	00003a98 00000000 006d0002 00000308     .:........m.....
    7e2c:	00000021 00003a98 00000000 006e0003     !....:........n.
    7e3c:	00000308 00000021 00003a98 00000000     ....!....:......

00007e4c <_usb_ep_cfgs>:
    7e4c:	20000824 00000000 00000040 00000000     $.. ....@.......
	...
    7e64:	2000081c 00000000 00000008 200007dc     ... ........... 
    7e74:	200007d4 00080040 00000000 00000000     ... @...........
	...
    7e8c:	20000794 00400000 7974227b 3a226570     ... ..@.{"type":
    7e9c:	524f5022 202c2254 74616422 203a2261     "PORT", "data": 
    7eac:	6954225b 756f656d 44203a74 6f637369     ["Timeout: Disco
    7ebc:	63656e6e 7d5d2274 0000000d 7974227b     nnect"]}....{"ty
    7ecc:	3a226570 52524522 2c22524f 61642220     pe":"ERROR", "da
    7edc:	3a226174 42225b20 65666675 764f2072     ta": ["Buffer Ov
    7eec:	75727265 7d5d226e 0000000d 7974227b     errun"]}....{"ty
    7efc:	3a226570 41525422 202c2250 74616422     pe":"TRAP", "dat
    7f0c:	203a2261 5254225b 22315041 000d7d5d     a": ["TRAP1"]}..
    7f1c:	7974227b 3a226570 41525422 202c2250     {"type":"TRAP", 
    7f2c:	74616422 203a2261 5254225b 22325041     "data": ["TRAP2"
    7f3c:	000d7d5d 7974227b 3a226570 524f5022     ]}..{"type":"POR
    7f4c:	202c2254 74616422 203a2261 6544225b     T", "data": ["De
    7f5c:	65646f63 0d7d5d22 00000000 7974227b     code"]}.....{"ty
    7f6c:	3a226570 41572220 4e494e52 202c2247     pe": "WARNING", 
    7f7c:	74616422 203a2261 7246225b 20656d61     "data": ["Frame 
    7f8c:	72617453 664f2074 74657366 0d7d5d22     Start Offset"]}.
    7f9c:	00000000 7974227b 3a226570 524f5022     ....{"type":"POR
    7fac:	202c2254 74616422 203a2261 6f43225b     T", "data": ["Co
    7fbc:	63656e6e 43203a74 656e6e6f 5d227463     nnect: Connect"]
    7fcc:	00000d7d 7974227b 3a226570 524f5022     }...{"type":"POR
    7fdc:	202c2254 74616422 203a2261 6f43225b     T", "data": ["Co
    7fec:	63656e6e 44203a74 6f637369 63656e6e     nnect: Disconnec
    7ffc:	7d5d2274 0000000d 7974227b 3a226570     t"]}....{"type":
    800c:	524f5022 202c2254 74616422 203a2261     "PORT", "data": 
    801c:	6f43225b 63656e6e 56203a74 64696c61     ["Connect: Valid
    802c:	22657461 000d7d5d 7974227b 3a226570     ate"]}..{"type":
    803c:	52452220 22524f52 6422202c 22617461      "ERROR", "data"
    804c:	225b203a 6d617246 72452065 22726f72     : ["Frame Error"
    805c:	000d7d5d 7974227b 3a226570 52452220     ]}..{"type": "ER
    806c:	22524f52 6422202c 22617461 225b203a     ROR", "data": ["
    807c:	69726150 45207974 726f7272 0d7d5d22     Parity Error"]}.
    808c:	00000000 49505351 6f725020 6d617267     ....QSPI Program
    809c:	61745320 64657472 00000d0a 73616c46      Started....Flas
    80ac:	72652068 20657361 63637573 66737365     h erase successf
    80bc:	0d0a6c75 00000000 73616c46 72772068     ul......Flash wr
    80cc:	20657469 63637573 66737365 0d0a6c75     ite successful..
    80dc:	00000000 73616c46 65722068 73206461     ....Flash read s
    80ec:	65636375 75667373 000d0a6c 73616c46     uccessful...Flas
    80fc:	61642068 76206174 66697265 74616369     h data verificat
    810c:	206e6f69 6c696166 0a2e6465 0000000d     ion failed......
    811c:	74697257 202d2065 64616552 20736920     Write - Read is 
    812c:	63637573 66737365 69206c75 5351206e     successful in QS
    813c:	46204950 6873616c 6d656d20 2e79726f     PI Flash memory.
    814c:	00000d0a 74696e49 696c6169 6974617a     ....Initializati
    815c:	000d6e6f                                on..

00008160 <keyboard_report_desc>:
    8160:	06090105 070501a1 e729e019 01250015     ..........)...%.
    8170:	08950175 01810281 65290019 65250015     u.........)e..%e
    8180:	06950875 08050081 05290119 01250015     u.........)...%.
    8190:	05950175 03950291 00c00191              u...........

0000819c <mouse_report_desc>:
    819c:	02090105 010901a1 090500a1 03290119     ..............).
    81ac:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    81bc:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    81cc:	c0c00681                                ....

000081d0 <_global_impure_ptr>:
    81d0:	2000005c                                \.. 

000081d4 <__sf_fake_stderr>:
	...

000081f4 <__sf_fake_stdin>:
	...

00008214 <__sf_fake_stdout>:
	...
    8234:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8244:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8254:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8264:	00006665                                ef..

00008268 <_init>:
    8268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    826a:	bf00      	nop
    826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    826e:	bc08      	pop	{r3}
    8270:	469e      	mov	lr, r3
    8272:	4770      	bx	lr

00008274 <__init_array_start>:
    8274:	00000289 	.word	0x00000289

00008278 <_fini>:
    8278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    827a:	bf00      	nop
    827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    827e:	bc08      	pop	{r3}
    8280:	469e      	mov	lr, r3
    8282:	4770      	bx	lr

00008284 <__fini_array_start>:
    8284:	00000265 	.word	0x00000265
