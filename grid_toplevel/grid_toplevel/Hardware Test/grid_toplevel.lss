
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008238  00004000  00004000  00004000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  0000c238  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000100bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000100bc  2**0
                  CONTENTS
  4 .bss          00003444  200000c0  0000c300  000100c0  2**4
                  ALLOC
  5 .stack        00010004  20003504  0000f744  000100c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000100bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000100ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0006a477  00000000  00000000  00010143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000984b  00000000  00000000  0007a5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027ec0  00000000  00000000  00083e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e20  00000000  00000000  000abcc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000028f0  00000000  00000000  000adae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040a6e  00000000  00000000  000b03d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031945  00000000  00000000  000f0e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001197fa  00000000  00000000  00122788  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000541c  00000000  00000000  0023bf84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	08 35 01 20 f1 42 00 00 ed 42 00 00 ed 42 00 00     .5. .B...B...B..
    4010:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	ed 42 00 00 ed 42 00 00 00 00 00 00 ed 42 00 00     .B...B.......B..
    403c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    404c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    405c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    406c:	a5 73 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .s...B...B...B..
    407c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    408c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    409c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40ac:	ed 42 00 00 ed 42 00 00 55 70 00 00 69 70 00 00     .B...B..Up..ip..
    40bc:	b9 6e 00 00 c5 6e 00 00 d1 6e 00 00 dd 6e 00 00     .n...n...n...n..
    40cc:	e9 6e 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .n...B...B...B..
    40dc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	5d 72 00 00 f5 7b 00 00 09 7c 00 00 1d 7c 00 00     ]r...{...|...|..
    4104:	31 7c 00 00 45 7c 00 00 59 7c 00 00 6d 7c 00 00     1|..E|..Y|..m|..
    4114:	81 7c 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .|...B...B...B..
    4124:	ed 42 00 00 95 7c 00 00 a9 7c 00 00 bd 7c 00 00     .B...|...|...|..
    4134:	d1 7c 00 00 e5 7c 00 00 f9 7c 00 00 0d 7d 00 00     .|...|...|...}..
    4144:	21 7d 00 00 35 7d 00 00 49 7d 00 00 5d 7d 00 00     !}..5}..I}..]}..
    4154:	71 7d 00 00 85 7d 00 00 99 7d 00 00 ad 7d 00 00     q}...}...}...}..
    4164:	c1 7d 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .}...B...B...B..
    4174:	ed 42 00 00 00 00 00 00 00 00 00 00 6d 99 00 00     .B..........m...
    4184:	79 99 00 00 85 99 00 00 91 99 00 00 00 00 00 00     y...............
    4194:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41a4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41b4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41c4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41d4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41e4:	ed 42 00 00 ed 42 00 00 01 87 00 00 15 87 00 00     .B...B..........
    41f4:	29 87 00 00 3d 87 00 00 ed 42 00 00 ed 42 00 00     )...=....B...B..
    4204:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4214:	ed 42 00 00 55 6b 00 00 69 6b 00 00 7d 6b 00 00     .B..Uk..ik..}k..
    4224:	91 6b 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .k...B...B...B..
    4234:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4244:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4254:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	200000c0 	.word	0x200000c0
    4280:	00000000 	.word	0x00000000
    4284:	0000c238 	.word	0x0000c238

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	0000c238 	.word	0x0000c238
    42c4:	200000c4 	.word	0x200000c4
    42c8:	0000c238 	.word	0x0000c238
    42cc:	00000000 	.word	0x00000000

000042d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    42d0:	b508      	push	{r3, lr}
	system_init();
    42d2:	4b03      	ldr	r3, [pc, #12]	; (42e0 <atmel_start_init+0x10>)
    42d4:	4798      	blx	r3
	usb_init();
    42d6:	4b03      	ldr	r3, [pc, #12]	; (42e4 <atmel_start_init+0x14>)
    42d8:	4798      	blx	r3
	stdio_redirect_init();
    42da:	4b03      	ldr	r3, [pc, #12]	; (42e8 <atmel_start_init+0x18>)
    42dc:	4798      	blx	r3
    42de:	bd08      	pop	{r3, pc}
    42e0:	00004e15 	.word	0x00004e15
    42e4:	0000a975 	.word	0x0000a975
    42e8:	00009ac9 	.word	0x00009ac9

000042ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42ec:	e7fe      	b.n	42ec <Dummy_Handler>
	...

000042f0 <Reset_Handler>:
{
    42f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    42f2:	4b1c      	ldr	r3, [pc, #112]	; (4364 <Reset_Handler+0x74>)
    42f4:	4a1c      	ldr	r2, [pc, #112]	; (4368 <Reset_Handler+0x78>)
    42f6:	429a      	cmp	r2, r3
    42f8:	d010      	beq.n	431c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    42fa:	4b1c      	ldr	r3, [pc, #112]	; (436c <Reset_Handler+0x7c>)
    42fc:	4a19      	ldr	r2, [pc, #100]	; (4364 <Reset_Handler+0x74>)
    42fe:	429a      	cmp	r2, r3
    4300:	d20c      	bcs.n	431c <Reset_Handler+0x2c>
    4302:	3b01      	subs	r3, #1
    4304:	1a9b      	subs	r3, r3, r2
    4306:	f023 0303 	bic.w	r3, r3, #3
    430a:	3304      	adds	r3, #4
    430c:	4413      	add	r3, r2
    430e:	4916      	ldr	r1, [pc, #88]	; (4368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    4310:	f851 0b04 	ldr.w	r0, [r1], #4
    4314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    4318:	429a      	cmp	r2, r3
    431a:	d1f9      	bne.n	4310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    431c:	4b14      	ldr	r3, [pc, #80]	; (4370 <Reset_Handler+0x80>)
    431e:	4a15      	ldr	r2, [pc, #84]	; (4374 <Reset_Handler+0x84>)
    4320:	429a      	cmp	r2, r3
    4322:	d20a      	bcs.n	433a <Reset_Handler+0x4a>
    4324:	3b01      	subs	r3, #1
    4326:	1a9b      	subs	r3, r3, r2
    4328:	f023 0303 	bic.w	r3, r3, #3
    432c:	3304      	adds	r3, #4
    432e:	4413      	add	r3, r2
                *pDest++ = 0;
    4330:	2100      	movs	r1, #0
    4332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    4336:	4293      	cmp	r3, r2
    4338:	d1fb      	bne.n	4332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    433a:	4b0f      	ldr	r3, [pc, #60]	; (4378 <Reset_Handler+0x88>)
    433c:	4a0f      	ldr	r2, [pc, #60]	; (437c <Reset_Handler+0x8c>)
    433e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    4344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    434c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    4358:	4b09      	ldr	r3, [pc, #36]	; (4380 <Reset_Handler+0x90>)
    435a:	4798      	blx	r3
        main();
    435c:	4b09      	ldr	r3, [pc, #36]	; (4384 <Reset_Handler+0x94>)
    435e:	4798      	blx	r3
    4360:	e7fe      	b.n	4360 <Reset_Handler+0x70>
    4362:	bf00      	nop
    4364:	20000000 	.word	0x20000000
    4368:	0000c238 	.word	0x0000c238
    436c:	200000bc 	.word	0x200000bc
    4370:	20003504 	.word	0x20003504
    4374:	200000c0 	.word	0x200000c0
    4378:	e000ed00 	.word	0xe000ed00
    437c:	00004000 	.word	0x00004000
    4380:	0000a981 	.word	0x0000a981
    4384:	000099ed 	.word	0x000099ed

00004388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
    4388:	b5f0      	push	{r4, r5, r6, r7, lr}
    438a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    438c:	4a1b      	ldr	r2, [pc, #108]	; (43fc <ADC_0_init+0x74>)
    438e:	6a13      	ldr	r3, [r2, #32]
    4390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4396:	2241      	movs	r2, #65	; 0x41
    4398:	4b19      	ldr	r3, [pc, #100]	; (4400 <ADC_0_init+0x78>)
    439a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    439e:	4e19      	ldr	r6, [pc, #100]	; (4404 <ADC_0_init+0x7c>)
    43a0:	4d19      	ldr	r5, [pc, #100]	; (4408 <ADC_0_init+0x80>)
    43a2:	2400      	movs	r4, #0
    43a4:	9402      	str	r4, [sp, #8]
    43a6:	4b19      	ldr	r3, [pc, #100]	; (440c <ADC_0_init+0x84>)
    43a8:	9301      	str	r3, [sp, #4]
    43aa:	2301      	movs	r3, #1
    43ac:	9300      	str	r3, [sp, #0]
    43ae:	4623      	mov	r3, r4
    43b0:	4632      	mov	r2, r6
    43b2:	4917      	ldr	r1, [pc, #92]	; (4410 <ADC_0_init+0x88>)
    43b4:	4628      	mov	r0, r5
    43b6:	4f17      	ldr	r7, [pc, #92]	; (4414 <ADC_0_init+0x8c>)
    43b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
    43ba:	2310      	movs	r3, #16
    43bc:	1d32      	adds	r2, r6, #4
    43be:	4621      	mov	r1, r4
    43c0:	4628      	mov	r0, r5
    43c2:	4c15      	ldr	r4, [pc, #84]	; (4418 <ADC_0_init+0x90>)
    43c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    43c6:	4b15      	ldr	r3, [pc, #84]	; (441c <ADC_0_init+0x94>)
    43c8:	2280      	movs	r2, #128	; 0x80
    43ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    43cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    43d0:	629a      	str	r2, [r3, #40]	; 0x28
    43d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    43d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    43d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    43dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    43e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    43e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    43e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    43ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    43f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    43f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
    43f8:	b005      	add	sp, #20
    43fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43fc:	40000800 	.word	0x40000800
    4400:	40001c00 	.word	0x40001c00
    4404:	200000dc 	.word	0x200000dc
    4408:	20000a50 	.word	0x20000a50
    440c:	20000b4c 	.word	0x20000b4c
    4410:	43001c00 	.word	0x43001c00
    4414:	00005a2d 	.word	0x00005a2d
    4418:	00005a7d 	.word	0x00005a7d
    441c:	41008000 	.word	0x41008000

00004420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
    4420:	b5f0      	push	{r4, r5, r6, r7, lr}
    4422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    4424:	4a1e      	ldr	r2, [pc, #120]	; (44a0 <ADC_1_init+0x80>)
    4426:	6a13      	ldr	r3, [r2, #32]
    4428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    442c:	6213      	str	r3, [r2, #32]
    442e:	2241      	movs	r2, #65	; 0x41
    4430:	4b1c      	ldr	r3, [pc, #112]	; (44a4 <ADC_1_init+0x84>)
    4432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    4436:	4e1c      	ldr	r6, [pc, #112]	; (44a8 <ADC_1_init+0x88>)
    4438:	4d1c      	ldr	r5, [pc, #112]	; (44ac <ADC_1_init+0x8c>)
    443a:	2400      	movs	r4, #0
    443c:	9402      	str	r4, [sp, #8]
    443e:	4b1c      	ldr	r3, [pc, #112]	; (44b0 <ADC_1_init+0x90>)
    4440:	9301      	str	r3, [sp, #4]
    4442:	2301      	movs	r3, #1
    4444:	9300      	str	r3, [sp, #0]
    4446:	4623      	mov	r3, r4
    4448:	f106 0214 	add.w	r2, r6, #20
    444c:	4919      	ldr	r1, [pc, #100]	; (44b4 <ADC_1_init+0x94>)
    444e:	4628      	mov	r0, r5
    4450:	4f19      	ldr	r7, [pc, #100]	; (44b8 <ADC_1_init+0x98>)
    4452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
    4454:	2310      	movs	r3, #16
    4456:	f106 0218 	add.w	r2, r6, #24
    445a:	4621      	mov	r1, r4
    445c:	4628      	mov	r0, r5
    445e:	4c17      	ldr	r4, [pc, #92]	; (44bc <ADC_1_init+0x9c>)
    4460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4462:	4b17      	ldr	r3, [pc, #92]	; (44c0 <ADC_1_init+0xa0>)
    4464:	2204      	movs	r2, #4
    4466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    446a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    446e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    4476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    447a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
    447e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    448a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    448e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
    449a:	b005      	add	sp, #20
    449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    449e:	bf00      	nop
    44a0:	40000800 	.word	0x40000800
    44a4:	40001c00 	.word	0x40001c00
    44a8:	200000dc 	.word	0x200000dc
    44ac:	20000c24 	.word	0x20000c24
    44b0:	200009ec 	.word	0x200009ec
    44b4:	43002000 	.word	0x43002000
    44b8:	00005a2d 	.word	0x00005a2d
    44bc:	00005a7d 	.word	0x00005a7d
    44c0:	41008000 	.word	0x41008000

000044c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
    44c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    44c6:	4a05      	ldr	r2, [pc, #20]	; (44dc <CRC_0_init+0x18>)
    44c8:	6993      	ldr	r3, [r2, #24]
    44ca:	f043 0302 	orr.w	r3, r3, #2
    44ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
    44d0:	4903      	ldr	r1, [pc, #12]	; (44e0 <CRC_0_init+0x1c>)
    44d2:	4804      	ldr	r0, [pc, #16]	; (44e4 <CRC_0_init+0x20>)
    44d4:	4b04      	ldr	r3, [pc, #16]	; (44e8 <CRC_0_init+0x24>)
    44d6:	4798      	blx	r3
    44d8:	bd08      	pop	{r3, pc}
    44da:	bf00      	nop
    44dc:	40000800 	.word	0x40000800
    44e0:	41002000 	.word	0x41002000
    44e4:	200009e8 	.word	0x200009e8
    44e8:	00005b15 	.word	0x00005b15

000044ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    44ec:	b508      	push	{r3, lr}
    44ee:	4b09      	ldr	r3, [pc, #36]	; (4514 <EVENT_SYSTEM_0_init+0x28>)
    44f0:	2240      	movs	r2, #64	; 0x40
    44f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    44f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    44fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    44fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    4502:	4a05      	ldr	r2, [pc, #20]	; (4518 <EVENT_SYSTEM_0_init+0x2c>)
    4504:	6993      	ldr	r3, [r2, #24]
    4506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    450a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    450c:	4b03      	ldr	r3, [pc, #12]	; (451c <EVENT_SYSTEM_0_init+0x30>)
    450e:	4798      	blx	r3
    4510:	bd08      	pop	{r3, pc}
    4512:	bf00      	nop
    4514:	40001c00 	.word	0x40001c00
    4518:	40000800 	.word	0x40000800
    451c:	00005b55 	.word	0x00005b55

00004520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    4520:	4a02      	ldr	r2, [pc, #8]	; (452c <FLASH_0_CLOCK_init+0xc>)
    4522:	6913      	ldr	r3, [r2, #16]
    4524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4528:	6113      	str	r3, [r2, #16]
    452a:	4770      	bx	lr
    452c:	40000800 	.word	0x40000800

00004530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    4530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    4532:	4b03      	ldr	r3, [pc, #12]	; (4540 <FLASH_0_init+0x10>)
    4534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    4536:	4903      	ldr	r1, [pc, #12]	; (4544 <FLASH_0_init+0x14>)
    4538:	4803      	ldr	r0, [pc, #12]	; (4548 <FLASH_0_init+0x18>)
    453a:	4b04      	ldr	r3, [pc, #16]	; (454c <FLASH_0_init+0x1c>)
    453c:	4798      	blx	r3
    453e:	bd08      	pop	{r3, pc}
    4540:	00004521 	.word	0x00004521
    4544:	41004000 	.word	0x41004000
    4548:	200009cc 	.word	0x200009cc
    454c:	00005b75 	.word	0x00005b75

00004550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
    4550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4552:	4b5a      	ldr	r3, [pc, #360]	; (46bc <QSPI_INSTANCE_PORT_init+0x16c>)
    4554:	f44f 6500 	mov.w	r5, #2048	; 0x800
    4558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    455c:	4a58      	ldr	r2, [pc, #352]	; (46c0 <QSPI_INSTANCE_PORT_init+0x170>)
    455e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4562:	4858      	ldr	r0, [pc, #352]	; (46c4 <QSPI_INSTANCE_PORT_init+0x174>)
    4564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
    456c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
    4578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    457c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    458c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4594:	f44f 7280 	mov.w	r2, #256	; 0x100
    4598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    459a:	494b      	ldr	r1, [pc, #300]	; (46c8 <QSPI_INSTANCE_PORT_init+0x178>)
    459c:	6299      	str	r1, [r3, #40]	; 0x28
    459e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
    45a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    45a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    45aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    45ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    45b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
    45b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    45ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    45be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    45c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    45c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    45ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    45ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    45d2:	f44f 7200 	mov.w	r2, #512	; 0x200
    45d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    45d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
    45dc:	6299      	str	r1, [r3, #40]	; 0x28
    45de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    45e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
    45e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    45ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    45ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
    45f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    45f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    45fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    45fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    460e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4614:	4a2d      	ldr	r2, [pc, #180]	; (46cc <QSPI_INSTANCE_PORT_init+0x17c>)
    4616:	629a      	str	r2, [r3, #40]	; 0x28
    4618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    461a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    461c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    4620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
    462c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    463c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    464a:	4a21      	ldr	r2, [pc, #132]	; (46d0 <QSPI_INSTANCE_PORT_init+0x180>)
    464c:	629a      	str	r2, [r3, #40]	; 0x28
    464e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    4656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    465a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    465e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
    4662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    466a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    466e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    467e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4682:	4a14      	ldr	r2, [pc, #80]	; (46d4 <QSPI_INSTANCE_PORT_init+0x184>)
    4684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    468c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
    4690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
    469c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    46a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    46a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    46a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    46ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    46b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    46b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
    46b8:	bc30      	pop	{r4, r5}
    46ba:	4770      	bx	lr
    46bc:	41008000 	.word	0x41008000
    46c0:	40020800 	.word	0x40020800
    46c4:	c0020000 	.word	0xc0020000
    46c8:	40000100 	.word	0x40000100
    46cc:	40000400 	.word	0x40000400
    46d0:	40000800 	.word	0x40000800
    46d4:	40020400 	.word	0x40020400

000046d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    46d8:	4b06      	ldr	r3, [pc, #24]	; (46f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
    46da:	691a      	ldr	r2, [r3, #16]
    46dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    46e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    46e2:	691a      	ldr	r2, [r3, #16]
    46e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    46e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    46ea:	69da      	ldr	r2, [r3, #28]
    46ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    46f0:	61da      	str	r2, [r3, #28]
    46f2:	4770      	bx	lr
    46f4:	40000800 	.word	0x40000800

000046f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
    46f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
    46fa:	4b04      	ldr	r3, [pc, #16]	; (470c <QSPI_INSTANCE_init+0x14>)
    46fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
    46fe:	4904      	ldr	r1, [pc, #16]	; (4710 <QSPI_INSTANCE_init+0x18>)
    4700:	4804      	ldr	r0, [pc, #16]	; (4714 <QSPI_INSTANCE_init+0x1c>)
    4702:	4b05      	ldr	r3, [pc, #20]	; (4718 <QSPI_INSTANCE_init+0x20>)
    4704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
    4706:	4b05      	ldr	r3, [pc, #20]	; (471c <QSPI_INSTANCE_init+0x24>)
    4708:	4798      	blx	r3
    470a:	bd08      	pop	{r3, pc}
    470c:	000046d9 	.word	0x000046d9
    4710:	42003400 	.word	0x42003400
    4714:	20000c90 	.word	0x20000c90
    4718:	00005c91 	.word	0x00005c91
    471c:	00004551 	.word	0x00004551

00004720 <USART_EAST_CLOCK_init>:
    4720:	4b06      	ldr	r3, [pc, #24]	; (473c <USART_EAST_CLOCK_init+0x1c>)
    4722:	2241      	movs	r2, #65	; 0x41
    4724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    4728:	2242      	movs	r2, #66	; 0x42
    472a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    472e:	4a04      	ldr	r2, [pc, #16]	; (4740 <USART_EAST_CLOCK_init+0x20>)
    4730:	6953      	ldr	r3, [r2, #20]
    4732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    4736:	6153      	str	r3, [r2, #20]
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	40001c00 	.word	0x40001c00
    4740:	40000800 	.word	0x40000800

00004744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4744:	4b10      	ldr	r3, [pc, #64]	; (4788 <USART_EAST_PORT_init+0x44>)
    4746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    474a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    474e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    475a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    475e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    476a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    476e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    477a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    477e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    4786:	4770      	bx	lr
    4788:	41008000 	.word	0x41008000

0000478c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
    478c:	b510      	push	{r4, lr}
    478e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
    4790:	4b06      	ldr	r3, [pc, #24]	; (47ac <USART_EAST_init+0x20>)
    4792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
    4794:	2300      	movs	r3, #0
    4796:	9300      	str	r3, [sp, #0]
    4798:	2310      	movs	r3, #16
    479a:	4a05      	ldr	r2, [pc, #20]	; (47b0 <USART_EAST_init+0x24>)
    479c:	4905      	ldr	r1, [pc, #20]	; (47b4 <USART_EAST_init+0x28>)
    479e:	4806      	ldr	r0, [pc, #24]	; (47b8 <USART_EAST_init+0x2c>)
    47a0:	4c06      	ldr	r4, [pc, #24]	; (47bc <USART_EAST_init+0x30>)
    47a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
    47a4:	4b06      	ldr	r3, [pc, #24]	; (47c0 <USART_EAST_init+0x34>)
    47a6:	4798      	blx	r3
}
    47a8:	b002      	add	sp, #8
    47aa:	bd10      	pop	{r4, pc}
    47ac:	00004721 	.word	0x00004721
    47b0:	20000104 	.word	0x20000104
    47b4:	40003000 	.word	0x40003000
    47b8:	20000a7c 	.word	0x20000a7c
    47bc:	00006109 	.word	0x00006109
    47c0:	00004745 	.word	0x00004745

000047c4 <USART_NORTH_CLOCK_init>:
    47c4:	4b06      	ldr	r3, [pc, #24]	; (47e0 <USART_NORTH_CLOCK_init+0x1c>)
    47c6:	2241      	movs	r2, #65	; 0x41
    47c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    47cc:	2242      	movs	r2, #66	; 0x42
    47ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    47d2:	4a04      	ldr	r2, [pc, #16]	; (47e4 <USART_NORTH_CLOCK_init+0x20>)
    47d4:	6953      	ldr	r3, [r2, #20]
    47d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    47da:	6153      	str	r3, [r2, #20]
    47dc:	4770      	bx	lr
    47de:	bf00      	nop
    47e0:	40001c00 	.word	0x40001c00
    47e4:	40000800 	.word	0x40000800

000047e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    47e8:	4b10      	ldr	r3, [pc, #64]	; (482c <USART_NORTH_PORT_init+0x44>)
    47ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    47ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    47f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    47f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    47fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    47fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    480a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    480e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    481a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    481e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    482a:	4770      	bx	lr
    482c:	41008000 	.word	0x41008000

00004830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
    4830:	b510      	push	{r4, lr}
    4832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
    4834:	4b06      	ldr	r3, [pc, #24]	; (4850 <USART_NORTH_init+0x20>)
    4836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
    4838:	2300      	movs	r3, #0
    483a:	9300      	str	r3, [sp, #0]
    483c:	2310      	movs	r3, #16
    483e:	4a05      	ldr	r2, [pc, #20]	; (4854 <USART_NORTH_init+0x24>)
    4840:	4905      	ldr	r1, [pc, #20]	; (4858 <USART_NORTH_init+0x28>)
    4842:	4806      	ldr	r0, [pc, #24]	; (485c <USART_NORTH_init+0x2c>)
    4844:	4c06      	ldr	r4, [pc, #24]	; (4860 <USART_NORTH_init+0x30>)
    4846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
    4848:	4b06      	ldr	r3, [pc, #24]	; (4864 <USART_NORTH_init+0x34>)
    484a:	4798      	blx	r3
}
    484c:	b002      	add	sp, #8
    484e:	bd10      	pop	{r4, pc}
    4850:	000047c5 	.word	0x000047c5
    4854:	20000114 	.word	0x20000114
    4858:	40003400 	.word	0x40003400
    485c:	20000ad0 	.word	0x20000ad0
    4860:	00006109 	.word	0x00006109
    4864:	000047e9 	.word	0x000047e9

00004868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4868:	4b10      	ldr	r3, [pc, #64]	; (48ac <GRID_AUX_PORT_init+0x44>)
    486a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    486e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    487a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    487e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    488a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    488e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    489a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    489e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    48a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    48a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    48aa:	4770      	bx	lr
    48ac:	41008000 	.word	0x41008000

000048b0 <GRID_AUX_CLOCK_init>:
    48b0:	4b06      	ldr	r3, [pc, #24]	; (48cc <GRID_AUX_CLOCK_init+0x1c>)
    48b2:	2241      	movs	r2, #65	; 0x41
    48b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    48b8:	2242      	movs	r2, #66	; 0x42
    48ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    48be:	4a04      	ldr	r2, [pc, #16]	; (48d0 <GRID_AUX_CLOCK_init+0x20>)
    48c0:	6993      	ldr	r3, [r2, #24]
    48c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    48c6:	6193      	str	r3, [r2, #24]
    48c8:	4770      	bx	lr
    48ca:	bf00      	nop
    48cc:	40001c00 	.word	0x40001c00
    48d0:	40000800 	.word	0x40000800

000048d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
    48d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
    48d6:	4b05      	ldr	r3, [pc, #20]	; (48ec <GRID_AUX_init+0x18>)
    48d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
    48da:	2200      	movs	r2, #0
    48dc:	4904      	ldr	r1, [pc, #16]	; (48f0 <GRID_AUX_init+0x1c>)
    48de:	4805      	ldr	r0, [pc, #20]	; (48f4 <GRID_AUX_init+0x20>)
    48e0:	4b05      	ldr	r3, [pc, #20]	; (48f8 <GRID_AUX_init+0x24>)
    48e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
    48e4:	4b05      	ldr	r3, [pc, #20]	; (48fc <GRID_AUX_init+0x28>)
    48e6:	4798      	blx	r3
    48e8:	bd08      	pop	{r3, pc}
    48ea:	bf00      	nop
    48ec:	000048b1 	.word	0x000048b1
    48f0:	41012000 	.word	0x41012000
    48f4:	20000a44 	.word	0x20000a44
    48f8:	000061f9 	.word	0x000061f9
    48fc:	00004869 	.word	0x00004869

00004900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4900:	4b2b      	ldr	r3, [pc, #172]	; (49b0 <UI_SPI_PORT_init+0xb0>)
    4902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    4906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    490a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    490e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    4916:	4a27      	ldr	r2, [pc, #156]	; (49b4 <UI_SPI_PORT_init+0xb4>)
    4918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    491c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
    4920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    492c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    493c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    494c:	4a1a      	ldr	r2, [pc, #104]	; (49b8 <UI_SPI_PORT_init+0xb8>)
    494e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
    4956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    495a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    495e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    496a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    496e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4974:	4a11      	ldr	r2, [pc, #68]	; (49bc <UI_SPI_PORT_init+0xbc>)
    4976:	629a      	str	r2, [r3, #40]	; 0x28
    4978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    497c:	3210      	adds	r2, #16
    497e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
    4984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    498c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
    4990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    499c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    49a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    49a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    49a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    49ac:	4770      	bx	lr
    49ae:	bf00      	nop
    49b0:	41008000 	.word	0x41008000
    49b4:	c0000010 	.word	0xc0000010
    49b8:	c0000020 	.word	0xc0000020
    49bc:	40020000 	.word	0x40020000

000049c0 <UI_SPI_CLOCK_init>:
    49c0:	4b06      	ldr	r3, [pc, #24]	; (49dc <UI_SPI_CLOCK_init+0x1c>)
    49c2:	2241      	movs	r2, #65	; 0x41
    49c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    49c8:	2243      	movs	r2, #67	; 0x43
    49ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    49ce:	4a04      	ldr	r2, [pc, #16]	; (49e0 <UI_SPI_CLOCK_init+0x20>)
    49d0:	6993      	ldr	r3, [r2, #24]
    49d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    49d6:	6193      	str	r3, [r2, #24]
    49d8:	4770      	bx	lr
    49da:	bf00      	nop
    49dc:	40001c00 	.word	0x40001c00
    49e0:	40000800 	.word	0x40000800

000049e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
    49e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
    49e6:	4b04      	ldr	r3, [pc, #16]	; (49f8 <UI_SPI_init+0x14>)
    49e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
    49ea:	4904      	ldr	r1, [pc, #16]	; (49fc <UI_SPI_init+0x18>)
    49ec:	4804      	ldr	r0, [pc, #16]	; (4a00 <UI_SPI_init+0x1c>)
    49ee:	4b05      	ldr	r3, [pc, #20]	; (4a04 <UI_SPI_init+0x20>)
    49f0:	4798      	blx	r3
	UI_SPI_PORT_init();
    49f2:	4b05      	ldr	r3, [pc, #20]	; (4a08 <UI_SPI_init+0x24>)
    49f4:	4798      	blx	r3
    49f6:	bd08      	pop	{r3, pc}
    49f8:	000049c1 	.word	0x000049c1
    49fc:	41014000 	.word	0x41014000
    4a00:	20000944 	.word	0x20000944
    4a04:	00005e21 	.word	0x00005e21
    4a08:	00004901 	.word	0x00004901

00004a0c <USART_WEST_CLOCK_init>:
    4a0c:	4b06      	ldr	r3, [pc, #24]	; (4a28 <USART_WEST_CLOCK_init+0x1c>)
    4a0e:	2241      	movs	r2, #65	; 0x41
    4a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    4a14:	2242      	movs	r2, #66	; 0x42
    4a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4a1a:	4a04      	ldr	r2, [pc, #16]	; (4a2c <USART_WEST_CLOCK_init+0x20>)
    4a1c:	6a13      	ldr	r3, [r2, #32]
    4a1e:	f043 0301 	orr.w	r3, r3, #1
    4a22:	6213      	str	r3, [r2, #32]
    4a24:	4770      	bx	lr
    4a26:	bf00      	nop
    4a28:	40001c00 	.word	0x40001c00
    4a2c:	40000800 	.word	0x40000800

00004a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4a30:	4b10      	ldr	r3, [pc, #64]	; (4a74 <USART_WEST_PORT_init+0x44>)
    4a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    4a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    4a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    4a72:	4770      	bx	lr
    4a74:	41008000 	.word	0x41008000

00004a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
    4a78:	b510      	push	{r4, lr}
    4a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
    4a7c:	4b07      	ldr	r3, [pc, #28]	; (4a9c <USART_WEST_init+0x24>)
    4a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
    4a80:	2300      	movs	r3, #0
    4a82:	9300      	str	r3, [sp, #0]
    4a84:	2310      	movs	r3, #16
    4a86:	4a06      	ldr	r2, [pc, #24]	; (4aa0 <USART_WEST_init+0x28>)
    4a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    4a8c:	4805      	ldr	r0, [pc, #20]	; (4aa4 <USART_WEST_init+0x2c>)
    4a8e:	4c06      	ldr	r4, [pc, #24]	; (4aa8 <USART_WEST_init+0x30>)
    4a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
    4a92:	4b06      	ldr	r3, [pc, #24]	; (4aac <USART_WEST_init+0x34>)
    4a94:	4798      	blx	r3
}
    4a96:	b002      	add	sp, #8
    4a98:	bd10      	pop	{r4, pc}
    4a9a:	bf00      	nop
    4a9c:	00004a0d 	.word	0x00004a0d
    4aa0:	20000124 	.word	0x20000124
    4aa4:	20000b84 	.word	0x20000b84
    4aa8:	00006109 	.word	0x00006109
    4aac:	00004a31 	.word	0x00004a31

00004ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4ab0:	4b16      	ldr	r3, [pc, #88]	; (4b0c <SYS_I2C_PORT_init+0x5c>)
    4ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
    4ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
    4ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
    4aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    4b0a:	4770      	bx	lr
    4b0c:	41008000 	.word	0x41008000

00004b10 <SYS_I2C_CLOCK_init>:
    4b10:	4b06      	ldr	r3, [pc, #24]	; (4b2c <SYS_I2C_CLOCK_init+0x1c>)
    4b12:	2241      	movs	r2, #65	; 0x41
    4b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    4b18:	2242      	movs	r2, #66	; 0x42
    4b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4b1e:	4a04      	ldr	r2, [pc, #16]	; (4b30 <SYS_I2C_CLOCK_init+0x20>)
    4b20:	6a13      	ldr	r3, [r2, #32]
    4b22:	f043 0302 	orr.w	r3, r3, #2
    4b26:	6213      	str	r3, [r2, #32]
    4b28:	4770      	bx	lr
    4b2a:	bf00      	nop
    4b2c:	40001c00 	.word	0x40001c00
    4b30:	40000800 	.word	0x40000800

00004b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
    4b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
    4b36:	4b04      	ldr	r3, [pc, #16]	; (4b48 <SYS_I2C_init+0x14>)
    4b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
    4b3a:	4904      	ldr	r1, [pc, #16]	; (4b4c <SYS_I2C_init+0x18>)
    4b3c:	4804      	ldr	r0, [pc, #16]	; (4b50 <SYS_I2C_init+0x1c>)
    4b3e:	4b05      	ldr	r3, [pc, #20]	; (4b54 <SYS_I2C_init+0x20>)
    4b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
    4b42:	4b05      	ldr	r3, [pc, #20]	; (4b58 <SYS_I2C_init+0x24>)
    4b44:	4798      	blx	r3
    4b46:	bd08      	pop	{r3, pc}
    4b48:	00004b11 	.word	0x00004b11
    4b4c:	43000400 	.word	0x43000400
    4b50:	20000a04 	.word	0x20000a04
    4b54:	00005c31 	.word	0x00005c31
    4b58:	00004ab1 	.word	0x00004ab1

00004b5c <USART_SOUTH_CLOCK_init>:
    4b5c:	4b06      	ldr	r3, [pc, #24]	; (4b78 <USART_SOUTH_CLOCK_init+0x1c>)
    4b5e:	2241      	movs	r2, #65	; 0x41
    4b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    4b64:	2242      	movs	r2, #66	; 0x42
    4b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4b6a:	4a04      	ldr	r2, [pc, #16]	; (4b7c <USART_SOUTH_CLOCK_init+0x20>)
    4b6c:	6a13      	ldr	r3, [r2, #32]
    4b6e:	f043 0304 	orr.w	r3, r3, #4
    4b72:	6213      	str	r3, [r2, #32]
    4b74:	4770      	bx	lr
    4b76:	bf00      	nop
    4b78:	40001c00 	.word	0x40001c00
    4b7c:	40000800 	.word	0x40000800

00004b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4b80:	4b10      	ldr	r3, [pc, #64]	; (4bc4 <USART_SOUTH_PORT_init+0x44>)
    4b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
    4b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    4bc2:	4770      	bx	lr
    4bc4:	41008000 	.word	0x41008000

00004bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
    4bc8:	b510      	push	{r4, lr}
    4bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
    4bcc:	4b06      	ldr	r3, [pc, #24]	; (4be8 <USART_SOUTH_init+0x20>)
    4bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
    4bd0:	2300      	movs	r3, #0
    4bd2:	9300      	str	r3, [sp, #0]
    4bd4:	2310      	movs	r3, #16
    4bd6:	4a05      	ldr	r2, [pc, #20]	; (4bec <USART_SOUTH_init+0x24>)
    4bd8:	4905      	ldr	r1, [pc, #20]	; (4bf0 <USART_SOUTH_init+0x28>)
    4bda:	4806      	ldr	r0, [pc, #24]	; (4bf4 <USART_SOUTH_init+0x2c>)
    4bdc:	4c06      	ldr	r4, [pc, #24]	; (4bf8 <USART_SOUTH_init+0x30>)
    4bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
    4be0:	4b06      	ldr	r3, [pc, #24]	; (4bfc <USART_SOUTH_init+0x34>)
    4be2:	4798      	blx	r3
}
    4be4:	b002      	add	sp, #8
    4be6:	bd10      	pop	{r4, pc}
    4be8:	00004b5d 	.word	0x00004b5d
    4bec:	20000134 	.word	0x20000134
    4bf0:	43000800 	.word	0x43000800
    4bf4:	20000bd4 	.word	0x20000bd4
    4bf8:	00006109 	.word	0x00006109
    4bfc:	00004b81 	.word	0x00004b81

00004c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4c00:	4b29      	ldr	r3, [pc, #164]	; (4ca8 <GRID_LED_PORT_init+0xa8>)
    4c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4c12:	4926      	ldr	r1, [pc, #152]	; (4cac <GRID_LED_PORT_init+0xac>)
    4c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    4c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4c48:	4919      	ldr	r1, [pc, #100]	; (4cb0 <GRID_LED_PORT_init+0xb0>)
    4c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    4c74:	629a      	str	r2, [r3, #40]	; 0x28
    4c76:	4a0f      	ldr	r2, [pc, #60]	; (4cb4 <GRID_LED_PORT_init+0xb4>)
    4c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
    4c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    4ca6:	4770      	bx	lr
    4ca8:	41008000 	.word	0x41008000
    4cac:	c0004000 	.word	0xc0004000
    4cb0:	c0008000 	.word	0xc0008000
    4cb4:	c0024000 	.word	0xc0024000

00004cb8 <GRID_LED_CLOCK_init>:
    4cb8:	4b06      	ldr	r3, [pc, #24]	; (4cd4 <GRID_LED_CLOCK_init+0x1c>)
    4cba:	2241      	movs	r2, #65	; 0x41
    4cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    4cc0:	2242      	movs	r2, #66	; 0x42
    4cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4cc6:	4a04      	ldr	r2, [pc, #16]	; (4cd8 <GRID_LED_CLOCK_init+0x20>)
    4cc8:	6a13      	ldr	r3, [r2, #32]
    4cca:	f043 0308 	orr.w	r3, r3, #8
    4cce:	6213      	str	r3, [r2, #32]
    4cd0:	4770      	bx	lr
    4cd2:	bf00      	nop
    4cd4:	40001c00 	.word	0x40001c00
    4cd8:	40000800 	.word	0x40000800

00004cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
    4cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
    4cde:	4b04      	ldr	r3, [pc, #16]	; (4cf0 <GRID_LED_init+0x14>)
    4ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
    4ce2:	4904      	ldr	r1, [pc, #16]	; (4cf4 <GRID_LED_init+0x18>)
    4ce4:	4804      	ldr	r0, [pc, #16]	; (4cf8 <GRID_LED_init+0x1c>)
    4ce6:	4b05      	ldr	r3, [pc, #20]	; (4cfc <GRID_LED_init+0x20>)
    4ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
    4cea:	4b05      	ldr	r3, [pc, #20]	; (4d00 <GRID_LED_init+0x24>)
    4cec:	4798      	blx	r3
    4cee:	bd08      	pop	{r3, pc}
    4cf0:	00004cb9 	.word	0x00004cb9
    4cf4:	43000c00 	.word	0x43000c00
    4cf8:	20000b20 	.word	0x20000b20
    4cfc:	00005ead 	.word	0x00005ead
    4d00:	00004c01 	.word	0x00004c01

00004d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
    4d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
    4d06:	4802      	ldr	r0, [pc, #8]	; (4d10 <delay_driver_init+0xc>)
    4d08:	4b02      	ldr	r3, [pc, #8]	; (4d14 <delay_driver_init+0x10>)
    4d0a:	4798      	blx	r3
    4d0c:	bd08      	pop	{r3, pc}
    4d0e:	bf00      	nop
    4d10:	e000e010 	.word	0xe000e010
    4d14:	00005b21 	.word	0x00005b21

00004d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4d18:	4b1e      	ldr	r3, [pc, #120]	; (4d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
    4d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4d24:	6299      	str	r1, [r3, #40]	; 0x28
    4d26:	481c      	ldr	r0, [pc, #112]	; (4d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
    4d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    4d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    4d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    4d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4d5e:	6299      	str	r1, [r3, #40]	; 0x28
    4d60:	490e      	ldr	r1, [pc, #56]	; (4d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    4d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    4d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    4d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    4d92:	4770      	bx	lr
    4d94:	41008000 	.word	0x41008000
    4d98:	c0000100 	.word	0xc0000100
    4d9c:	c0000200 	.word	0xc0000200

00004da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
    4da0:	2241      	movs	r2, #65	; 0x41
    4da2:	4b07      	ldr	r3, [pc, #28]	; (4dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    4da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    4da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    4dac:	691a      	ldr	r2, [r3, #16]
    4dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    4db4:	699a      	ldr	r2, [r3, #24]
    4db6:	f042 0201 	orr.w	r2, r2, #1
    4dba:	619a      	str	r2, [r3, #24]
    4dbc:	4770      	bx	lr
    4dbe:	bf00      	nop
    4dc0:	40001c00 	.word	0x40001c00

00004dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
    4dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    4dc6:	4b03      	ldr	r3, [pc, #12]	; (4dd4 <USB_DEVICE_INSTANCE_init+0x10>)
    4dc8:	4798      	blx	r3
	usb_d_init();
    4dca:	4b03      	ldr	r3, [pc, #12]	; (4dd8 <USB_DEVICE_INSTANCE_init+0x14>)
    4dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    4dce:	4b03      	ldr	r3, [pc, #12]	; (4ddc <USB_DEVICE_INSTANCE_init+0x18>)
    4dd0:	4798      	blx	r3
    4dd2:	bd08      	pop	{r3, pc}
    4dd4:	00004da1 	.word	0x00004da1
    4dd8:	00006485 	.word	0x00006485
    4ddc:	00004d19 	.word	0x00004d19

00004de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    4de0:	4a02      	ldr	r2, [pc, #8]	; (4dec <WDT_0_CLOCK_init+0xc>)
    4de2:	6953      	ldr	r3, [r2, #20]
    4de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4de8:	6153      	str	r3, [r2, #20]
    4dea:	4770      	bx	lr
    4dec:	40000800 	.word	0x40000800

00004df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    4df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    4df2:	4b04      	ldr	r3, [pc, #16]	; (4e04 <WDT_0_init+0x14>)
    4df4:	4798      	blx	r3
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);

	wdt->dev.hw = (void *)hw;
    4df6:	4804      	ldr	r0, [pc, #16]	; (4e08 <WDT_0_init+0x18>)
    4df8:	4b04      	ldr	r3, [pc, #16]	; (4e0c <WDT_0_init+0x1c>)
    4dfa:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
    4dfc:	4b04      	ldr	r3, [pc, #16]	; (4e10 <WDT_0_init+0x20>)
    4dfe:	4798      	blx	r3
    4e00:	bd08      	pop	{r3, pc}
    4e02:	bf00      	nop
    4e04:	00004de1 	.word	0x00004de1
    4e08:	20000acc 	.word	0x20000acc
    4e0c:	40002000 	.word	0x40002000
    4e10:	0000999d 	.word	0x0000999d

00004e14 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
    4e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    4e18:	4ba3      	ldr	r3, [pc, #652]	; (50a8 <system_init+0x294>)
    4e1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4e1c:	4ba3      	ldr	r3, [pc, #652]	; (50ac <system_init+0x298>)
    4e1e:	2220      	movs	r2, #32
    4e20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4e22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4e28:	629a      	str	r2, [r3, #40]	; 0x28
    4e2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    4e2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4e3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    4e40:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e42:	4e9b      	ldr	r6, [pc, #620]	; (50b0 <system_init+0x29c>)
    4e44:	629e      	str	r6, [r3, #40]	; 0x28
    4e46:	499b      	ldr	r1, [pc, #620]	; (50b4 <system_init+0x2a0>)
    4e48:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4e4a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
    4e4e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    4e52:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e56:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e5e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4e62:	2180      	movs	r1, #128	; 0x80
    4e64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e68:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4e6c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
    4e70:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4e74:	4d90      	ldr	r5, [pc, #576]	; (50b8 <system_init+0x2a4>)
    4e76:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4e7a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
    4e7e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    4e82:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e86:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e8e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    4e96:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4e9a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4ea2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4ea6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4eaa:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
    4eae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4eb2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4eb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4eba:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4ebe:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4ec2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
    4ec6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
    4eca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ece:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ed2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4ed6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4eda:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    4ede:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4ee2:	4c76      	ldr	r4, [pc, #472]	; (50bc <system_init+0x2a8>)
    4ee4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    4ee8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4eec:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
    4ef0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    4ef4:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ef8:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
    4efc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f00:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f04:	f44f 6400 	mov.w	r4, #2048	; 0x800
    4f08:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f0c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 514c <system_init+0x338>
    4f10:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
    4f14:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4f1c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
    4f20:	f045 0504 	orr.w	r5, r5, #4
    4f24:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4f28:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f2c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f30:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f34:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f38:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4f3c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f40:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
    4f44:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f48:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f50:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4f58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f5c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
    4f60:	4a57      	ldr	r2, [pc, #348]	; (50c0 <system_init+0x2ac>)
    4f62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4f66:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
    4f6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4f6e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f72:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f7a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4f82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4f86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4f8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4f92:	494c      	ldr	r1, [pc, #304]	; (50c4 <system_init+0x2b0>)
    4f94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f98:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fa0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fa4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    4fa8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4fac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fb0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4fb4:	4944      	ldr	r1, [pc, #272]	; (50c8 <system_init+0x2b4>)
    4fb6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4fba:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
    4fbe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fc2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fc6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4fca:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4fd2:	4a3e      	ldr	r2, [pc, #248]	; (50cc <system_init+0x2b8>)
    4fd4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4fd8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
    4fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fe0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
    4fe4:	4b3a      	ldr	r3, [pc, #232]	; (50d0 <system_init+0x2bc>)
    4fe6:	4798      	blx	r3
	ADC_1_init();
    4fe8:	4b3a      	ldr	r3, [pc, #232]	; (50d4 <system_init+0x2c0>)
    4fea:	4798      	blx	r3

	CRC_0_init();
    4fec:	4b3a      	ldr	r3, [pc, #232]	; (50d8 <system_init+0x2c4>)
    4fee:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    4ff0:	4b3a      	ldr	r3, [pc, #232]	; (50dc <system_init+0x2c8>)
    4ff2:	4798      	blx	r3

	FLASH_0_init();
    4ff4:	4b3a      	ldr	r3, [pc, #232]	; (50e0 <system_init+0x2cc>)
    4ff6:	4798      	blx	r3

	QSPI_INSTANCE_init();
    4ff8:	4b3a      	ldr	r3, [pc, #232]	; (50e4 <system_init+0x2d0>)
    4ffa:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    4ffc:	4c3a      	ldr	r4, [pc, #232]	; (50e8 <system_init+0x2d4>)
    4ffe:	6963      	ldr	r3, [r4, #20]
    5000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5004:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    5006:	4b39      	ldr	r3, [pc, #228]	; (50ec <system_init+0x2d8>)
    5008:	4798      	blx	r3
    500a:	4602      	mov	r2, r0
    500c:	4938      	ldr	r1, [pc, #224]	; (50f0 <system_init+0x2dc>)
    500e:	4839      	ldr	r0, [pc, #228]	; (50f4 <system_init+0x2e0>)
    5010:	4d39      	ldr	r5, [pc, #228]	; (50f8 <system_init+0x2e4>)
    5012:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    5014:	4b39      	ldr	r3, [pc, #228]	; (50fc <system_init+0x2e8>)
    5016:	4798      	blx	r3
	USART_NORTH_init();
    5018:	4b39      	ldr	r3, [pc, #228]	; (5100 <system_init+0x2ec>)
    501a:	4798      	blx	r3

	GRID_AUX_init();
    501c:	4b39      	ldr	r3, [pc, #228]	; (5104 <system_init+0x2f0>)
    501e:	4798      	blx	r3

	UI_SPI_init();
    5020:	4b39      	ldr	r3, [pc, #228]	; (5108 <system_init+0x2f4>)
    5022:	4798      	blx	r3
	USART_WEST_init();
    5024:	4b39      	ldr	r3, [pc, #228]	; (510c <system_init+0x2f8>)
    5026:	4798      	blx	r3

	SYS_I2C_init();
    5028:	4b39      	ldr	r3, [pc, #228]	; (5110 <system_init+0x2fc>)
    502a:	4798      	blx	r3
	USART_SOUTH_init();
    502c:	4b39      	ldr	r3, [pc, #228]	; (5114 <system_init+0x300>)
    502e:	4798      	blx	r3

	GRID_LED_init();
    5030:	4b39      	ldr	r3, [pc, #228]	; (5118 <system_init+0x304>)
    5032:	4798      	blx	r3

	delay_driver_init();
    5034:	4b39      	ldr	r3, [pc, #228]	; (511c <system_init+0x308>)
    5036:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    5038:	6963      	ldr	r3, [r4, #20]
    503a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    503e:	6163      	str	r3, [r4, #20]
    5040:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    5044:	f04f 0840 	mov.w	r8, #64	; 0x40
    5048:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    504c:	4e34      	ldr	r6, [pc, #208]	; (5120 <system_init+0x30c>)
    504e:	47b0      	blx	r6
    5050:	4602      	mov	r2, r0
    5052:	4934      	ldr	r1, [pc, #208]	; (5124 <system_init+0x310>)
    5054:	4834      	ldr	r0, [pc, #208]	; (5128 <system_init+0x314>)
    5056:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    5058:	6963      	ldr	r3, [r4, #20]
    505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    505e:	6163      	str	r3, [r4, #20]
    5060:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    5064:	47b0      	blx	r6
    5066:	4602      	mov	r2, r0
    5068:	4930      	ldr	r1, [pc, #192]	; (512c <system_init+0x318>)
    506a:	4831      	ldr	r0, [pc, #196]	; (5130 <system_init+0x31c>)
    506c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    506e:	69a3      	ldr	r3, [r4, #24]
    5070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    5074:	61a3      	str	r3, [r4, #24]
    5076:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    507a:	47b0      	blx	r6
    507c:	4602      	mov	r2, r0
    507e:	492d      	ldr	r1, [pc, #180]	; (5134 <system_init+0x320>)
    5080:	482d      	ldr	r0, [pc, #180]	; (5138 <system_init+0x324>)
    5082:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    5084:	69a3      	ldr	r3, [r4, #24]
    5086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    508a:	61a3      	str	r3, [r4, #24]
    508c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    5090:	47b0      	blx	r6
    5092:	4602      	mov	r2, r0
    5094:	4929      	ldr	r1, [pc, #164]	; (513c <system_init+0x328>)
    5096:	482a      	ldr	r0, [pc, #168]	; (5140 <system_init+0x32c>)
    5098:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    509a:	4b2a      	ldr	r3, [pc, #168]	; (5144 <system_init+0x330>)
    509c:	4798      	blx	r3

	WDT_0_init();
    509e:	4b2a      	ldr	r3, [pc, #168]	; (5148 <system_init+0x334>)
    50a0:	4798      	blx	r3
    50a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50a6:	bf00      	nop
    50a8:	00006bcd 	.word	0x00006bcd
    50ac:	41008000 	.word	0x41008000
    50b0:	40020000 	.word	0x40020000
    50b4:	c0020020 	.word	0xc0020020
    50b8:	c0020000 	.word	0xc0020000
    50bc:	40028000 	.word	0x40028000
    50c0:	c0020004 	.word	0xc0020004
    50c4:	c0000008 	.word	0xc0000008
    50c8:	c0000010 	.word	0xc0000010
    50cc:	c0000020 	.word	0xc0000020
    50d0:	00004389 	.word	0x00004389
    50d4:	00004421 	.word	0x00004421
    50d8:	000044c5 	.word	0x000044c5
    50dc:	000044ed 	.word	0x000044ed
    50e0:	00004531 	.word	0x00004531
    50e4:	000046f9 	.word	0x000046f9
    50e8:	40000800 	.word	0x40000800
    50ec:	0000739d 	.word	0x0000739d
    50f0:	40002400 	.word	0x40002400
    50f4:	2000098c 	.word	0x2000098c
    50f8:	00005fd5 	.word	0x00005fd5
    50fc:	0000478d 	.word	0x0000478d
    5100:	00004831 	.word	0x00004831
    5104:	000048d5 	.word	0x000048d5
    5108:	000049e5 	.word	0x000049e5
    510c:	00004a79 	.word	0x00004a79
    5110:	00004b35 	.word	0x00004b35
    5114:	00004bc9 	.word	0x00004bc9
    5118:	00004cdd 	.word	0x00004cdd
    511c:	00004d05 	.word	0x00004d05
    5120:	000086f9 	.word	0x000086f9
    5124:	40003800 	.word	0x40003800
    5128:	20000c70 	.word	0x20000c70
    512c:	40003c00 	.word	0x40003c00
    5130:	20000b64 	.word	0x20000b64
    5134:	4101a000 	.word	0x4101a000
    5138:	200009ac 	.word	0x200009ac
    513c:	4101c000 	.word	0x4101c000
    5140:	20000c50 	.word	0x20000c50
    5144:	00004dc5 	.word	0x00004dc5
    5148:	00004df1 	.word	0x00004df1
    514c:	40020800 	.word	0x40020800

00005150 <grid_hardwaretest_led_test_init>:
		
	}

}

void grid_hardwaretest_led_test_init(struct grid_led_model* mod, uint8_t num){
    5150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5154:	b082      	sub	sp, #8
    5156:	4680      	mov	r8, r0
    5158:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    515a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    515e:	4b0c      	ldr	r3, [pc, #48]	; (5190 <grid_hardwaretest_led_test_init+0x40>)
    5160:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	
	gpio_set_pin_level(UI_PWR_EN, true);
	
	grid_led_init(mod, num);
    5164:	4b0b      	ldr	r3, [pc, #44]	; (5194 <grid_hardwaretest_led_test_init+0x44>)
    5166:	4798      	blx	r3
	
	for(uint8_t i=0; i<num; i++){
    5168:	b176      	cbz	r6, 5188 <grid_hardwaretest_led_test_init+0x38>
    516a:	3e01      	subs	r6, #1
    516c:	b2f6      	uxtb	r6, r6
    516e:	3601      	adds	r6, #1
    5170:	2400      	movs	r4, #0
		
		grid_led_set_color(mod, i, 0, 0, 0);
    5172:	4625      	mov	r5, r4
    5174:	4f08      	ldr	r7, [pc, #32]	; (5198 <grid_hardwaretest_led_test_init+0x48>)
    5176:	9500      	str	r5, [sp, #0]
    5178:	462b      	mov	r3, r5
    517a:	462a      	mov	r2, r5
    517c:	4621      	mov	r1, r4
    517e:	4640      	mov	r0, r8
    5180:	47b8      	blx	r7
    5182:	3401      	adds	r4, #1
	for(uint8_t i=0; i<num; i++){
    5184:	42b4      	cmp	r4, r6
    5186:	d1f6      	bne.n	5176 <grid_hardwaretest_led_test_init+0x26>
		
	}

	
}
    5188:	b002      	add	sp, #8
    518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    518e:	bf00      	nop
    5190:	41008000 	.word	0x41008000
    5194:	000058bd 	.word	0x000058bd
    5198:	0000553d 	.word	0x0000553d

0000519c <grid_hardwaretest_led_test>:


void grid_hardwaretest_led_test(struct grid_led_model* mod, uint32_t loop){
    519c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    51a0:	b083      	sub	sp, #12
    51a2:	4605      	mov	r5, r0
		
		
	for(uint8_t i=0; i<mod->led_number; i++){
    51a4:	7843      	ldrb	r3, [r0, #1]
    51a6:	b333      	cbz	r3, 51f6 <grid_hardwaretest_led_test+0x5a>
	
		grid_led_set_color(mod, i, loop/10%128*(loop/1280%3==0), loop/10%128*(loop/1280%3==1), loop/10%128*(loop/1280%3==2));
    51a8:	4e18      	ldr	r6, [pc, #96]	; (520c <grid_hardwaretest_led_test+0x70>)
    51aa:	fba6 3601 	umull	r3, r6, r6, r1
    51ae:	f3c6 07c6 	ubfx	r7, r6, #3, #7
    51b2:	0ab6      	lsrs	r6, r6, #10
    51b4:	4b16      	ldr	r3, [pc, #88]	; (5210 <grid_hardwaretest_led_test+0x74>)
    51b6:	fba3 2306 	umull	r2, r3, r3, r6
    51ba:	085b      	lsrs	r3, r3, #1
    51bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    51c0:	1ab3      	subs	r3, r6, r2
    51c2:	4296      	cmp	r6, r2
    51c4:	bf0c      	ite	eq
    51c6:	46b9      	moveq	r9, r7
    51c8:	f04f 0900 	movne.w	r9, #0
    51cc:	2b01      	cmp	r3, #1
    51ce:	bf0c      	ite	eq
    51d0:	46b8      	moveq	r8, r7
    51d2:	f04f 0800 	movne.w	r8, #0
    51d6:	2b02      	cmp	r3, #2
    51d8:	bf18      	it	ne
    51da:	2700      	movne	r7, #0
    51dc:	2400      	movs	r4, #0
    51de:	4e0d      	ldr	r6, [pc, #52]	; (5214 <grid_hardwaretest_led_test+0x78>)
    51e0:	9700      	str	r7, [sp, #0]
    51e2:	4643      	mov	r3, r8
    51e4:	464a      	mov	r2, r9
    51e6:	4621      	mov	r1, r4
    51e8:	4628      	mov	r0, r5
    51ea:	47b0      	blx	r6
	for(uint8_t i=0; i<mod->led_number; i++){
    51ec:	3401      	adds	r4, #1
    51ee:	b2e4      	uxtb	r4, r4
    51f0:	786b      	ldrb	r3, [r5, #1]
    51f2:	42a3      	cmp	r3, r4
    51f4:	d8f4      	bhi.n	51e0 <grid_hardwaretest_led_test+0x44>
		
		
	//grid_led_render_all(mod);
		
		
	while(grid_led_hardware_is_transfer_completed(mod) != 1){
    51f6:	4c08      	ldr	r4, [pc, #32]	; (5218 <grid_hardwaretest_led_test+0x7c>)
    51f8:	4628      	mov	r0, r5
    51fa:	47a0      	blx	r4
    51fc:	2801      	cmp	r0, #1
    51fe:	d1fb      	bne.n	51f8 <grid_hardwaretest_led_test+0x5c>
			
	}
	grid_led_hardware_start_transfer(mod);
    5200:	4628      	mov	r0, r5
    5202:	4b06      	ldr	r3, [pc, #24]	; (521c <grid_hardwaretest_led_test+0x80>)
    5204:	4798      	blx	r3
	
}
    5206:	b003      	add	sp, #12
    5208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    520c:	cccccccd 	.word	0xcccccccd
    5210:	aaaaaaab 	.word	0xaaaaaaab
    5214:	0000553d 	.word	0x0000553d
    5218:	000059ad 	.word	0x000059ad
    521c:	00005981 	.word	0x00005981

00005220 <grid_hardwaretest_port_test>:


void grid_hardwaretest_port_test(uint32_t loop){
    5220:	b410      	push	{r4}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5222:	4baa      	ldr	r3, [pc, #680]	; (54cc <grid_hardwaretest_port_test+0x2ac>)
    5224:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5228:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    522c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5230:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5234:	4aa6      	ldr	r2, [pc, #664]	; (54d0 <grid_hardwaretest_port_test+0x2b0>)
    5236:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    523a:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    523e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5242:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5246:	2280      	movs	r2, #128	; 0x80
    5248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    524c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5250:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    5254:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    5258:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    525c:	f893 40c7 	ldrb.w	r4, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    5260:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5264:	f883 40c7 	strb.w	r4, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5268:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
    526c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5270:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5274:	4c97      	ldr	r4, [pc, #604]	; (54d4 <grid_hardwaretest_port_test+0x2b4>)
    5276:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    527a:	f893 415b 	ldrb.w	r4, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    527e:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5282:	f883 415b 	strb.w	r4, [r3, #347]	; 0x15b
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5286:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    528a:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    528e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5292:	4c91      	ldr	r4, [pc, #580]	; (54d8 <grid_hardwaretest_port_test+0x2b8>)
    5294:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5298:	f893 415c 	ldrb.w	r4, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    529c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    52a0:	f883 415c 	strb.w	r4, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    52a4:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    52a8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    52ac:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    52b0:	4c8a      	ldr	r4, [pc, #552]	; (54dc <grid_hardwaretest_port_test+0x2bc>)
    52b2:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    52b6:	f893 4151 	ldrb.w	r4, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    52ba:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    52be:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    52c2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    52c6:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    52ca:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    52ce:	4984      	ldr	r1, [pc, #528]	; (54e0 <grid_hardwaretest_port_test+0x2c0>)
    52d0:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    52d4:	f893 1150 	ldrb.w	r1, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    52d8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    52dc:	f883 1150 	strb.w	r1, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    52e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    52e4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    52e8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    52ec:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    52f0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    52f4:	f893 114d 	ldrb.w	r1, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
    52f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    52fc:	f883 114d 	strb.w	r1, [r3, #333]	; 0x14d
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5304:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5308:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    530c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5310:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5314:	f893 114c 	ldrb.w	r1, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    5318:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    531c:	f883 114c 	strb.w	r1, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5320:	f44f 7180 	mov.w	r1, #256	; 0x100
    5324:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5328:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    532c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    5330:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5334:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    5338:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    533c:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5340:	f44f 7100 	mov.w	r1, #512	; 0x200
    5344:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5348:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    534c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    5350:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5354:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    5358:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    535c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(PB09, GPIO_PIN_FUNCTION_OFF);
			

		
	if (loop%1000 == 0){
    5360:	4b60      	ldr	r3, [pc, #384]	; (54e4 <grid_hardwaretest_port_test+0x2c4>)
    5362:	fba3 2300 	umull	r2, r3, r3, r0
    5366:	099b      	lsrs	r3, r3, #6
    5368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    536c:	fb02 0313 	mls	r3, r2, r3, r0
    5370:	2b00      	cmp	r3, #0
    5372:	d154      	bne.n	541e <grid_hardwaretest_port_test+0x1fe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5374:	4a55      	ldr	r2, [pc, #340]	; (54cc <grid_hardwaretest_port_test+0x2ac>)
    5376:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    537a:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    537e:	2180      	movs	r1, #128	; 0x80
    5380:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
    5384:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    5388:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    538c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5390:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    5394:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    5398:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    539c:	f8c2 4114 	str.w	r4, [r2, #276]	; 0x114
    53a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    53a4:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    53a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    53ac:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    53b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    53b4:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
    53b8:	f44f 7100 	mov.w	r1, #512	; 0x200
    53bc:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
			
		gpio_set_pin_level(PB08, true);
		gpio_set_pin_level(PB09, true);
			
	}
	if (loop%1000 == 750){
    53c0:	f240 22ee 	movw	r2, #750	; 0x2ee
    53c4:	4293      	cmp	r3, r2
    53c6:	d127      	bne.n	5418 <grid_hardwaretest_port_test+0x1f8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    53c8:	4b40      	ldr	r3, [pc, #256]	; (54cc <grid_hardwaretest_port_test+0x2ac>)
    53ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    53ce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    53d2:	2280      	movs	r2, #128	; 0x80
    53d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    53d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    53dc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    53e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    53e4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    53e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    53ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    53f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    53f4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    53f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    53fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5404:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5408:	f44f 7280 	mov.w	r2, #256	; 0x100
    540c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    5410:	f44f 7200 	mov.w	r2, #512	; 0x200
    5414:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	}
		

	
	
}
    5418:	f85d 4b04 	ldr.w	r4, [sp], #4
    541c:	4770      	bx	lr
	if (loop%1000 == 250){
    541e:	2bfa      	cmp	r3, #250	; 0xfa
    5420:	d128      	bne.n	5474 <grid_hardwaretest_port_test+0x254>
    5422:	4b2a      	ldr	r3, [pc, #168]	; (54cc <grid_hardwaretest_port_test+0x2ac>)
    5424:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5428:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    542c:	2280      	movs	r2, #128	; 0x80
    542e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    5436:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    543e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5446:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    544a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    544e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    5456:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    545a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    545e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5462:	f44f 7280 	mov.w	r2, #256	; 0x100
    5466:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    546a:	f44f 7200 	mov.w	r2, #512	; 0x200
    546e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    5472:	e7d1      	b.n	5418 <grid_hardwaretest_port_test+0x1f8>
	if (loop%1000 == 500){
    5474:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    5478:	d1a2      	bne.n	53c0 <grid_hardwaretest_port_test+0x1a0>
    547a:	4b14      	ldr	r3, [pc, #80]	; (54cc <grid_hardwaretest_port_test+0x2ac>)
    547c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5480:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5484:	2280      	movs	r2, #128	; 0x80
    5486:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    548a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    548e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5496:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    549a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    549e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    54a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    54a6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    54aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    54ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    54b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    54b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    54ba:	f44f 7280 	mov.w	r2, #256	; 0x100
    54be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    54c2:	f44f 7200 	mov.w	r2, #512	; 0x200
    54c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    54ca:	e7a5      	b.n	5418 <grid_hardwaretest_port_test+0x1f8>
    54cc:	41008000 	.word	0x41008000
    54d0:	c0000004 	.word	0xc0000004
    54d4:	c0000800 	.word	0xc0000800
    54d8:	c0001000 	.word	0xc0001000
    54dc:	c0000002 	.word	0xc0000002
    54e0:	c0000001 	.word	0xc0000001
    54e4:	10624dd3 	.word	0x10624dd3

000054e8 <grid_hardwaretest_main>:
void grid_hardwaretest_main(){
    54e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Hardware Test Init");
    54ea:	480a      	ldr	r0, [pc, #40]	; (5514 <grid_hardwaretest_main+0x2c>)
    54ec:	4b0a      	ldr	r3, [pc, #40]	; (5518 <grid_hardwaretest_main+0x30>)
    54ee:	4798      	blx	r3
	grid_hardwaretest_led_test_init(&grid_led_state, 16);
    54f0:	2110      	movs	r1, #16
    54f2:	480a      	ldr	r0, [pc, #40]	; (551c <grid_hardwaretest_main+0x34>)
    54f4:	4b0a      	ldr	r3, [pc, #40]	; (5520 <grid_hardwaretest_main+0x38>)
    54f6:	4798      	blx	r3
	uint32_t counter = 0;
    54f8:	2400      	movs	r4, #0
		grid_hardwaretest_port_test(counter);
    54fa:	4f0a      	ldr	r7, [pc, #40]	; (5524 <grid_hardwaretest_main+0x3c>)
		grid_hardwaretest_led_test(&grid_led_state, counter);
    54fc:	4e07      	ldr	r6, [pc, #28]	; (551c <grid_hardwaretest_main+0x34>)
    54fe:	4d0a      	ldr	r5, [pc, #40]	; (5528 <grid_hardwaretest_main+0x40>)
		grid_hardwaretest_port_test(counter);
    5500:	4620      	mov	r0, r4
    5502:	47b8      	blx	r7
		grid_hardwaretest_led_test(&grid_led_state, counter);
    5504:	4621      	mov	r1, r4
    5506:	4630      	mov	r0, r6
    5508:	47a8      	blx	r5
		delay_ms(1);	
    550a:	2001      	movs	r0, #1
    550c:	4b07      	ldr	r3, [pc, #28]	; (552c <grid_hardwaretest_main+0x44>)
    550e:	4798      	blx	r3
		counter++;			
    5510:	3401      	adds	r4, #1
    5512:	e7f5      	b.n	5500 <grid_hardwaretest_main+0x18>
    5514:	0000bac4 	.word	0x0000bac4
    5518:	0000ab59 	.word	0x0000ab59
    551c:	200030bc 	.word	0x200030bc
    5520:	00005151 	.word	0x00005151
    5524:	00005221 	.word	0x00005221
    5528:	0000519d 	.word	0x0000519d
    552c:	00005b35 	.word	0x00005b35

00005530 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    5530:	2201      	movs	r2, #1
    5532:	4b01      	ldr	r3, [pc, #4]	; (5538 <grid_led_hardware_transfer_complete_cb+0x8>)
    5534:	701a      	strb	r2, [r3, #0]
    5536:	4770      	bx	lr
    5538:	20000ca0 	.word	0x20000ca0

0000553c <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    553c:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    553e:	7844      	ldrb	r4, [r0, #1]
    5540:	428c      	cmp	r4, r1
    5542:	d802      	bhi.n	554a <grid_led_set_color+0xe>
		return -1;		
    5544:	20ff      	movs	r0, #255	; 0xff
}
    5546:	bc30      	pop	{r4, r5}
    5548:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    554a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    554e:	0089      	lsls	r1, r1, #2
    5550:	4c09      	ldr	r4, [pc, #36]	; (5578 <grid_led_set_color+0x3c>)
    5552:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    5556:	68c3      	ldr	r3, [r0, #12]
    5558:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    555a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    555e:	68c3      	ldr	r3, [r0, #12]
    5560:	440b      	add	r3, r1
    5562:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    5564:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5568:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    556c:	68c3      	ldr	r3, [r0, #12]
    556e:	4419      	add	r1, r3
    5570:	608a      	str	r2, [r1, #8]
		return 0;
    5572:	2000      	movs	r0, #0
    5574:	e7e7      	b.n	5546 <grid_led_set_color+0xa>
    5576:	bf00      	nop
    5578:	200017c8 	.word	0x200017c8

0000557c <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    557c:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    557e:	4c06      	ldr	r4, [pc, #24]	; (5598 <grid_led_hardware_init+0x1c>)
    5580:	f100 0114 	add.w	r1, r0, #20
    5584:	4620      	mov	r0, r4
    5586:	4b05      	ldr	r3, [pc, #20]	; (559c <grid_led_hardware_init+0x20>)
    5588:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    558a:	4a05      	ldr	r2, [pc, #20]	; (55a0 <grid_led_hardware_init+0x24>)
    558c:	2100      	movs	r1, #0
    558e:	4620      	mov	r0, r4
    5590:	4b04      	ldr	r3, [pc, #16]	; (55a4 <grid_led_hardware_init+0x28>)
    5592:	4798      	blx	r3
    5594:	bd10      	pop	{r4, pc}
    5596:	bf00      	nop
    5598:	20000b20 	.word	0x20000b20
    559c:	00005ef5 	.word	0x00005ef5
    55a0:	00005531 	.word	0x00005531
    55a4:	00005ee5 	.word	0x00005ee5

000055a8 <grid_led_set_min>:
	/** END */
	
}


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    55a8:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    55aa:	7844      	ldrb	r4, [r0, #1]
    55ac:	fb02 1404 	mla	r4, r2, r4, r1
    55b0:	6905      	ldr	r5, [r0, #16]
    55b2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    55b6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    55ba:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    55bc:	7843      	ldrb	r3, [r0, #1]
    55be:	fb02 1303 	mla	r3, r2, r3, r1
    55c2:	6904      	ldr	r4, [r0, #16]
    55c4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    55c8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    55cc:	4423      	add	r3, r4
    55ce:	f89d 400c 	ldrb.w	r4, [sp, #12]
    55d2:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    55d4:	7843      	ldrb	r3, [r0, #1]
    55d6:	fb02 1203 	mla	r2, r2, r3, r1
    55da:	6903      	ldr	r3, [r0, #16]
    55dc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    55e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    55e4:	441a      	add	r2, r3
    55e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    55ea:	7093      	strb	r3, [r2, #2]
}
    55ec:	bc70      	pop	{r4, r5, r6}
    55ee:	4770      	bx	lr

000055f0 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    55f0:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    55f2:	7844      	ldrb	r4, [r0, #1]
    55f4:	fb02 1404 	mla	r4, r2, r4, r1
    55f8:	6905      	ldr	r5, [r0, #16]
    55fa:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    55fe:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    5602:	442c      	add	r4, r5
    5604:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    5606:	7843      	ldrb	r3, [r0, #1]
    5608:	fb02 1303 	mla	r3, r2, r3, r1
    560c:	6904      	ldr	r4, [r0, #16]
    560e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5612:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5616:	4423      	add	r3, r4
    5618:	f89d 400c 	ldrb.w	r4, [sp, #12]
    561c:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    561e:	7843      	ldrb	r3, [r0, #1]
    5620:	fb02 1203 	mla	r2, r2, r3, r1
    5624:	6903      	ldr	r3, [r0, #16]
    5626:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    562a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    562e:	441a      	add	r2, r3
    5630:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5634:	7153      	strb	r3, [r2, #5]
}
    5636:	bc70      	pop	{r4, r5, r6}
    5638:	4770      	bx	lr

0000563a <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    563a:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    563c:	7844      	ldrb	r4, [r0, #1]
    563e:	fb02 1404 	mla	r4, r2, r4, r1
    5642:	6905      	ldr	r5, [r0, #16]
    5644:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    5648:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    564c:	442c      	add	r4, r5
    564e:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    5650:	7843      	ldrb	r3, [r0, #1]
    5652:	fb02 1303 	mla	r3, r2, r3, r1
    5656:	6904      	ldr	r4, [r0, #16]
    5658:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    565c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5660:	4423      	add	r3, r4
    5662:	f89d 400c 	ldrb.w	r4, [sp, #12]
    5666:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    5668:	7843      	ldrb	r3, [r0, #1]
    566a:	fb02 1203 	mla	r2, r2, r3, r1
    566e:	6903      	ldr	r3, [r0, #16]
    5670:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    5674:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5678:	441a      	add	r2, r3
    567a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    567e:	7213      	strb	r3, [r2, #8]
}
    5680:	bc70      	pop	{r4, r5, r6}
    5682:	4770      	bx	lr

00005684 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    5684:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    5686:	7844      	ldrb	r4, [r0, #1]
    5688:	fb02 1204 	mla	r2, r2, r4, r1
    568c:	6901      	ldr	r1, [r0, #16]
    568e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    5692:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    5696:	440a      	add	r2, r1
    5698:	72d3      	strb	r3, [r2, #11]
}
    569a:	f85d 4b04 	ldr.w	r4, [sp], #4
    569e:	4770      	bx	lr

000056a0 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    56a0:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    56a2:	7844      	ldrb	r4, [r0, #1]
    56a4:	fb02 1204 	mla	r2, r2, r4, r1
    56a8:	6901      	ldr	r1, [r0, #16]
    56aa:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    56ae:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    56b2:	440a      	add	r2, r1
    56b4:	7313      	strb	r3, [r2, #12]
}
    56b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    56ba:	4770      	bx	lr

000056bc <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    56bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56c0:	b083      	sub	sp, #12
    56c2:	4604      	mov	r4, r0
	mod->led_number = length;
    56c4:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    56c6:	b2cd      	uxtb	r5, r1
    56c8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    56cc:	0080      	lsls	r0, r0, #2
    56ce:	3090      	adds	r0, #144	; 0x90
    56d0:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    56d2:	4f3e      	ldr	r7, [pc, #248]	; (57cc <grid_led_buffer_init+0x110>)
    56d4:	47b8      	blx	r7
    56d6:	4606      	mov	r6, r0
    56d8:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    56da:	f100 0390 	add.w	r3, r0, #144	; 0x90
    56de:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    56e0:	201a      	movs	r0, #26
    56e2:	fb00 f005 	mul.w	r0, r0, r5
    56e6:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    56e8:	2e00      	cmp	r6, #0
    56ea:	d06e      	beq.n	57ca <grid_led_buffer_init+0x10e>
    56ec:	2800      	cmp	r0, #0
    56ee:	d06c      	beq.n	57ca <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    56f0:	6120      	str	r0, [r4, #16]
    56f2:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    56f4:	4619      	mov	r1, r3
    56f6:	68a2      	ldr	r2, [r4, #8]
    56f8:	54d1      	strb	r1, [r2, r3]
    56fa:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    56fc:	2b90      	cmp	r3, #144	; 0x90
    56fe:	d1fa      	bne.n	56f6 <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    5700:	7863      	ldrb	r3, [r4, #1]
    5702:	2b00      	cmp	r3, #0
    5704:	d05e      	beq.n	57c4 <grid_led_buffer_init+0x108>
    5706:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    5708:	462e      	mov	r6, r5
    570a:	4f31      	ldr	r7, [pc, #196]	; (57d0 <grid_led_buffer_init+0x114>)
    570c:	9600      	str	r6, [sp, #0]
    570e:	4633      	mov	r3, r6
    5710:	4632      	mov	r2, r6
    5712:	4629      	mov	r1, r5
    5714:	4620      	mov	r0, r4
    5716:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    5718:	3501      	adds	r5, #1
    571a:	7863      	ldrb	r3, [r4, #1]
    571c:	42ab      	cmp	r3, r5
    571e:	d8f5      	bhi.n	570c <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    5720:	2b00      	cmp	r3, #0
    5722:	d04f      	beq.n	57c4 <grid_led_buffer_init+0x108>
    5724:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    5726:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 57d8 <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    572a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 57dc <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    572e:	2500      	movs	r5, #0
    5730:	9501      	str	r5, [sp, #4]
    5732:	9500      	str	r5, [sp, #0]
    5734:	462b      	mov	r3, r5
    5736:	462a      	mov	r2, r5
    5738:	4631      	mov	r1, r6
    573a:	4620      	mov	r0, r4
    573c:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    573e:	9501      	str	r5, [sp, #4]
    5740:	237f      	movs	r3, #127	; 0x7f
    5742:	9300      	str	r3, [sp, #0]
    5744:	462b      	mov	r3, r5
    5746:	462a      	mov	r2, r5
    5748:	4631      	mov	r1, r6
    574a:	4620      	mov	r0, r4
    574c:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    574e:	9501      	str	r5, [sp, #4]
    5750:	23ff      	movs	r3, #255	; 0xff
    5752:	9300      	str	r3, [sp, #0]
    5754:	462b      	mov	r3, r5
    5756:	462a      	mov	r2, r5
    5758:	4631      	mov	r1, r6
    575a:	4620      	mov	r0, r4
    575c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 57e0 <grid_led_buffer_init+0x124>
    5760:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    5762:	462b      	mov	r3, r5
    5764:	462a      	mov	r2, r5
    5766:	4631      	mov	r1, r6
    5768:	4620      	mov	r0, r4
    576a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 57e4 <grid_led_buffer_init+0x128>
    576e:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    5770:	462b      	mov	r3, r5
    5772:	462a      	mov	r2, r5
    5774:	4631      	mov	r1, r6
    5776:	4620      	mov	r0, r4
    5778:	4f16      	ldr	r7, [pc, #88]	; (57d4 <grid_led_buffer_init+0x118>)
    577a:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    577c:	9501      	str	r5, [sp, #4]
    577e:	9500      	str	r5, [sp, #0]
    5780:	462b      	mov	r3, r5
    5782:	2201      	movs	r2, #1
    5784:	4631      	mov	r1, r6
    5786:	4620      	mov	r0, r4
    5788:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    578a:	9501      	str	r5, [sp, #4]
    578c:	9500      	str	r5, [sp, #0]
    578e:	462b      	mov	r3, r5
    5790:	2201      	movs	r2, #1
    5792:	4631      	mov	r1, r6
    5794:	4620      	mov	r0, r4
    5796:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    5798:	9501      	str	r5, [sp, #4]
    579a:	9500      	str	r5, [sp, #0]
    579c:	462b      	mov	r3, r5
    579e:	2201      	movs	r2, #1
    57a0:	4631      	mov	r1, r6
    57a2:	4620      	mov	r0, r4
    57a4:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    57a6:	462b      	mov	r3, r5
    57a8:	2201      	movs	r2, #1
    57aa:	4631      	mov	r1, r6
    57ac:	4620      	mov	r0, r4
    57ae:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    57b0:	462b      	mov	r3, r5
    57b2:	2201      	movs	r2, #1
    57b4:	4631      	mov	r1, r6
    57b6:	4620      	mov	r0, r4
    57b8:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    57ba:	3601      	adds	r6, #1
    57bc:	b2f6      	uxtb	r6, r6
    57be:	7863      	ldrb	r3, [r4, #1]
    57c0:	42b3      	cmp	r3, r6
    57c2:	d8b4      	bhi.n	572e <grid_led_buffer_init+0x72>
}
    57c4:	b003      	add	sp, #12
    57c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57ca:	e7fe      	b.n	57ca <grid_led_buffer_init+0x10e>
    57cc:	0000a9c9 	.word	0x0000a9c9
    57d0:	0000553d 	.word	0x0000553d
    57d4:	00005685 	.word	0x00005685
    57d8:	000055a9 	.word	0x000055a9
    57dc:	000055f1 	.word	0x000055f1
    57e0:	0000563b 	.word	0x0000563b
    57e4:	000056a1 	.word	0x000056a1

000057e8 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    57e8:	b510      	push	{r4, lr}
    57ea:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    57ec:	2200      	movs	r2, #0
    57ee:	4b08      	ldr	r3, [pc, #32]	; (5810 <grid_led_hardware_start_transfer_blocking+0x28>)
    57f0:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    57f2:	4808      	ldr	r0, [pc, #32]	; (5814 <grid_led_hardware_start_transfer_blocking+0x2c>)
    57f4:	4b08      	ldr	r3, [pc, #32]	; (5818 <grid_led_hardware_start_transfer_blocking+0x30>)
    57f6:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    57f8:	88a2      	ldrh	r2, [r4, #4]
    57fa:	68a1      	ldr	r1, [r4, #8]
    57fc:	6960      	ldr	r0, [r4, #20]
    57fe:	4b07      	ldr	r3, [pc, #28]	; (581c <grid_led_hardware_start_transfer_blocking+0x34>)
    5800:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    5802:	4a03      	ldr	r2, [pc, #12]	; (5810 <grid_led_hardware_start_transfer_blocking+0x28>)
    5804:	7813      	ldrb	r3, [r2, #0]
    5806:	b2db      	uxtb	r3, r3
    5808:	2b01      	cmp	r3, #1
    580a:	d1fb      	bne.n	5804 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    580c:	bd10      	pop	{r4, pc}
    580e:	bf00      	nop
    5810:	20000ca0 	.word	0x20000ca0
    5814:	20000b20 	.word	0x20000b20
    5818:	00005ed5 	.word	0x00005ed5
    581c:	00005c81 	.word	0x00005c81

00005820 <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    5820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5824:	b085      	sub	sp, #20
    5826:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    5828:	4b20      	ldr	r3, [pc, #128]	; (58ac <grid_led_startup_animation+0x8c>)
    582a:	781b      	ldrb	r3, [r3, #0]
    582c:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    582e:	2b20      	cmp	r3, #32
    5830:	d00a      	beq.n	5848 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    5832:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    5836:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    583a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    583e:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    5842:	f8df 8074 	ldr.w	r8, [pc, #116]	; 58b8 <grid_led_startup_animation+0x98>
    5846:	e01e      	b.n	5886 <grid_led_startup_animation+0x66>
		s= 2;
    5848:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    584c:	2300      	movs	r3, #0
    584e:	9303      	str	r3, [sp, #12]
    5850:	e7f3      	b.n	583a <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    5852:	9500      	str	r5, [sp, #0]
    5854:	462b      	mov	r3, r5
    5856:	463a      	mov	r2, r7
    5858:	4621      	mov	r1, r4
    585a:	4630      	mov	r0, r6
    585c:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    585e:	3401      	adds	r4, #1
    5860:	b2e4      	uxtb	r4, r4
    5862:	7873      	ldrb	r3, [r6, #1]
    5864:	42a3      	cmp	r3, r4
    5866:	d8f4      	bhi.n	5852 <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    5868:	4630      	mov	r0, r6
    586a:	4b11      	ldr	r3, [pc, #68]	; (58b0 <grid_led_startup_animation+0x90>)
    586c:	4798      	blx	r3
		delay_ms(1);
    586e:	2001      	movs	r0, #1
    5870:	4b10      	ldr	r3, [pc, #64]	; (58b4 <grid_led_startup_animation+0x94>)
    5872:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    5874:	f109 0901 	add.w	r9, r9, #1
    5878:	fa5f f989 	uxtb.w	r9, r9
    587c:	f10a 3aff 	add.w	sl, sl, #4294967295
    5880:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    5884:	d00f      	beq.n	58a6 <grid_led_startup_animation+0x86>
		for (uint8_t j=0; j<mod->led_number; j++){
    5886:	7873      	ldrb	r3, [r6, #1]
    5888:	2b00      	cmp	r3, #0
    588a:	d0ed      	beq.n	5868 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    588c:	fb0b f709 	mul.w	r7, fp, r9
    5890:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    5894:	9b03      	ldr	r3, [sp, #12]
    5896:	fb09 f503 	mul.w	r5, r9, r3
    589a:	fb0b f505 	mul.w	r5, fp, r5
    589e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    58a2:	2400      	movs	r4, #0
    58a4:	e7d5      	b.n	5852 <grid_led_startup_animation+0x32>
}
    58a6:	b005      	add	sp, #20
    58a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58ac:	40000c00 	.word	0x40000c00
    58b0:	000057e9 	.word	0x000057e9
    58b4:	00005b35 	.word	0x00005b35
    58b8:	0000553d 	.word	0x0000553d

000058bc <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    58bc:	b570      	push	{r4, r5, r6, lr}
    58be:	4604      	mov	r4, r0
    58c0:	4e2b      	ldr	r6, [pc, #172]	; (5970 <grid_led_init+0xb4>)
    58c2:	2200      	movs	r2, #0
    58c4:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    58c6:	f003 0001 	and.w	r0, r3, #1
    58ca:	2800      	cmp	r0, #0
    58cc:	bf14      	ite	ne
    58ce:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    58d2:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    58d6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    58da:	2d00      	cmp	r5, #0
    58dc:	bf14      	ite	ne
    58de:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    58e2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    58e6:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    58e8:	f3c3 0080 	ubfx	r0, r3, #2, #1
    58ec:	2800      	cmp	r0, #0
    58ee:	bf14      	ite	ne
    58f0:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    58f4:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    58f8:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    58fa:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    58fe:	2d00      	cmp	r5, #0
    5900:	bf14      	ite	ne
    5902:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    5906:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    590a:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    590c:	f3c3 1500 	ubfx	r5, r3, #4, #1
    5910:	2d00      	cmp	r5, #0
    5912:	bf14      	ite	ne
    5914:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    5918:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    591c:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    591e:	f3c3 1040 	ubfx	r0, r3, #5, #1
    5922:	2800      	cmp	r0, #0
    5924:	bf14      	ite	ne
    5926:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    592a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    592e:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    5930:	f3c3 1080 	ubfx	r0, r3, #6, #1
    5934:	2800      	cmp	r0, #0
    5936:	bf14      	ite	ne
    5938:	200e      	movne	r0, #14
    593a:	2008      	moveq	r0, #8
    593c:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    593e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    5942:	2b00      	cmp	r3, #0
    5944:	bf14      	ite	ne
    5946:	23e0      	movne	r3, #224	; 0xe0
    5948:	2380      	moveq	r3, #128	; 0x80
    594a:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    594c:	f846 3f04 	str.w	r3, [r6, #4]!
    5950:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    5952:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    5956:	d1b5      	bne.n	58c4 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    5958:	4620      	mov	r0, r4
    595a:	4b06      	ldr	r3, [pc, #24]	; (5974 <grid_led_init+0xb8>)
    595c:	4798      	blx	r3
	grid_led_hardware_init(mod);
    595e:	4620      	mov	r0, r4
    5960:	4b05      	ldr	r3, [pc, #20]	; (5978 <grid_led_init+0xbc>)
    5962:	4798      	blx	r3
	grid_led_startup_animation(mod);
    5964:	4620      	mov	r0, r4
    5966:	4b05      	ldr	r3, [pc, #20]	; (597c <grid_led_init+0xc0>)
    5968:	4798      	blx	r3
}
    596a:	2000      	movs	r0, #0
    596c:	bd70      	pop	{r4, r5, r6, pc}
    596e:	bf00      	nop
    5970:	200017c4 	.word	0x200017c4
    5974:	000056bd 	.word	0x000056bd
    5978:	0000557d 	.word	0x0000557d
    597c:	00005821 	.word	0x00005821

00005980 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    5980:	b510      	push	{r4, lr}
    5982:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    5984:	2200      	movs	r2, #0
    5986:	4b05      	ldr	r3, [pc, #20]	; (599c <grid_led_hardware_start_transfer+0x1c>)
    5988:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    598a:	4805      	ldr	r0, [pc, #20]	; (59a0 <grid_led_hardware_start_transfer+0x20>)
    598c:	4b05      	ldr	r3, [pc, #20]	; (59a4 <grid_led_hardware_start_transfer+0x24>)
    598e:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    5990:	88a2      	ldrh	r2, [r4, #4]
    5992:	68a1      	ldr	r1, [r4, #8]
    5994:	6960      	ldr	r0, [r4, #20]
    5996:	4b04      	ldr	r3, [pc, #16]	; (59a8 <grid_led_hardware_start_transfer+0x28>)
    5998:	4798      	blx	r3
    599a:	bd10      	pop	{r4, pc}
    599c:	20000ca0 	.word	0x20000ca0
    59a0:	20000b20 	.word	0x20000b20
    59a4:	00005ed5 	.word	0x00005ed5
    59a8:	00005c81 	.word	0x00005c81

000059ac <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    59ac:	4b01      	ldr	r3, [pc, #4]	; (59b4 <grid_led_hardware_is_transfer_completed+0x8>)
    59ae:	7818      	ldrb	r0, [r3, #0]
	
    59b0:	4770      	bx	lr
    59b2:	bf00      	nop
    59b4:	20000ca0 	.word	0x20000ca0

000059b8 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    59b8:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    59ba:	6983      	ldr	r3, [r0, #24]
    59bc:	b103      	cbz	r3, 59c0 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    59be:	4798      	blx	r3
    59c0:	bd08      	pop	{r3, pc}

000059c2 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    59c2:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    59c4:	69c3      	ldr	r3, [r0, #28]
    59c6:	b103      	cbz	r3, 59ca <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    59c8:	4798      	blx	r3
    59ca:	bd08      	pop	{r3, pc}

000059cc <adc_async_channel_conversion_done>:
{
    59cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59d0:	4606      	mov	r6, r0
    59d2:	460f      	mov	r7, r1
    59d4:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    59d6:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    59d8:	5c5c      	ldrb	r4, [r3, r1]
    59da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    59de:	00e4      	lsls	r4, r4, #3
    59e0:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    59e4:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    59e8:	f105 0a04 	add.w	sl, r5, #4
    59ec:	b2d1      	uxtb	r1, r2
    59ee:	4650      	mov	r0, sl
    59f0:	4b0c      	ldr	r3, [pc, #48]	; (5a24 <adc_async_channel_conversion_done+0x58>)
    59f2:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    59f4:	4630      	mov	r0, r6
    59f6:	4b0c      	ldr	r3, [pc, #48]	; (5a28 <adc_async_channel_conversion_done+0x5c>)
    59f8:	4798      	blx	r3
    59fa:	2801      	cmp	r0, #1
    59fc:	d907      	bls.n	5a0e <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    59fe:	ea4f 2119 	mov.w	r1, r9, lsr #8
    5a02:	4650      	mov	r0, sl
    5a04:	4b07      	ldr	r3, [pc, #28]	; (5a24 <adc_async_channel_conversion_done+0x58>)
    5a06:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    5a08:	8aab      	ldrh	r3, [r5, #20]
    5a0a:	3301      	adds	r3, #1
    5a0c:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    5a0e:	8aab      	ldrh	r3, [r5, #20]
    5a10:	3301      	adds	r3, #1
    5a12:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    5a14:	f858 3004 	ldr.w	r3, [r8, r4]
    5a18:	b113      	cbz	r3, 5a20 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    5a1a:	4639      	mov	r1, r7
    5a1c:	4630      	mov	r0, r6
    5a1e:	4798      	blx	r3
    5a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a24:	0000682b 	.word	0x0000682b
    5a28:	00006b41 	.word	0x00006b41

00005a2c <adc_async_init>:
{
    5a2c:	b570      	push	{r4, r5, r6, lr}
    5a2e:	4606      	mov	r6, r0
	device = &descr->device;
    5a30:	2000      	movs	r0, #0
		channel_map[i] = 0xFF;
    5a32:	25ff      	movs	r5, #255	; 0xff
    5a34:	b2c4      	uxtb	r4, r0
    5a36:	5515      	strb	r5, [r2, r4]
    5a38:	3001      	adds	r0, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    5a3a:	b2c4      	uxtb	r4, r0
    5a3c:	429c      	cmp	r4, r3
    5a3e:	d9f9      	bls.n	5a34 <adc_async_init+0x8>
	descr->channel_map    = channel_map;
    5a40:	6232      	str	r2, [r6, #32]
	descr->channel_max    = channel_max;
    5a42:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	descr->channel_amount = channel_amount;
    5a46:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5a4a:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    5a4e:	9b05      	ldr	r3, [sp, #20]
    5a50:	62b3      	str	r3, [r6, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    5a52:	4630      	mov	r0, r6
    5a54:	4b05      	ldr	r3, [pc, #20]	; (5a6c <adc_async_init+0x40>)
    5a56:	4798      	blx	r3
	if (init_status) {
    5a58:	4603      	mov	r3, r0
    5a5a:	b928      	cbnz	r0, 5a68 <adc_async_init+0x3c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    5a5c:	4a04      	ldr	r2, [pc, #16]	; (5a70 <adc_async_init+0x44>)
    5a5e:	60b2      	str	r2, [r6, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    5a60:	4a04      	ldr	r2, [pc, #16]	; (5a74 <adc_async_init+0x48>)
    5a62:	6032      	str	r2, [r6, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    5a64:	4a04      	ldr	r2, [pc, #16]	; (5a78 <adc_async_init+0x4c>)
    5a66:	6072      	str	r2, [r6, #4]
}
    5a68:	4618      	mov	r0, r3
    5a6a:	bd70      	pop	{r4, r5, r6, pc}
    5a6c:	00006a3d 	.word	0x00006a3d
    5a70:	000059cd 	.word	0x000059cd
    5a74:	000059b9 	.word	0x000059b9
    5a78:	000059c3 	.word	0x000059c3

00005a7c <adc_async_register_channel_buffer>:
{
    5a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (descr->channel_map[channel] != 0xFF) {
    5a80:	6a07      	ldr	r7, [r0, #32]
    5a82:	5c7c      	ldrb	r4, [r7, r1]
    5a84:	2cff      	cmp	r4, #255	; 0xff
    5a86:	d12b      	bne.n	5ae0 <adc_async_register_channel_buffer+0x64>
	for (i = 0; i <= descr->channel_max; i++) {
    5a88:	f890 e024 	ldrb.w	lr, [r0, #36]	; 0x24
    5a8c:	2400      	movs	r4, #0
    5a8e:	4625      	mov	r5, r4
		if (descr->channel_map[i] != 0xFF) {
    5a90:	b2e6      	uxtb	r6, r4
    5a92:	5dbe      	ldrb	r6, [r7, r6]
    5a94:	2eff      	cmp	r6, #255	; 0xff
			index++;
    5a96:	bf1c      	itt	ne
    5a98:	3501      	addne	r5, #1
    5a9a:	b2ed      	uxtbne	r5, r5
    5a9c:	3401      	adds	r4, #1
	for (i = 0; i <= descr->channel_max; i++) {
    5a9e:	b2e6      	uxtb	r6, r4
    5aa0:	4576      	cmp	r6, lr
    5aa2:	d9f5      	bls.n	5a90 <adc_async_register_channel_buffer+0x14>
	if (index > descr->channel_amount) {
    5aa4:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
    5aa8:	42ac      	cmp	r4, r5
    5aaa:	d31c      	bcc.n	5ae6 <adc_async_register_channel_buffer+0x6a>
    5aac:	4616      	mov	r6, r2
    5aae:	460f      	mov	r7, r1
    5ab0:	4680      	mov	r8, r0
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    5ab2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    5ab6:	00e4      	lsls	r4, r4, #3
    5ab8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5aba:	4420      	add	r0, r4
    5abc:	461a      	mov	r2, r3
    5abe:	4631      	mov	r1, r6
    5ac0:	3004      	adds	r0, #4
    5ac2:	4b0c      	ldr	r3, [pc, #48]	; (5af4 <adc_async_register_channel_buffer+0x78>)
    5ac4:	4798      	blx	r3
    5ac6:	4602      	mov	r2, r0
    5ac8:	b980      	cbnz	r0, 5aec <adc_async_register_channel_buffer+0x70>
	descr->channel_map[channel]            = index;
    5aca:	f8d8 3020 	ldr.w	r3, [r8, #32]
    5ace:	55dd      	strb	r5, [r3, r7]
	descr->descr_ch[index].bytes_in_buffer = 0;
    5ad0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5ad4:	441c      	add	r4, r3
    5ad6:	2300      	movs	r3, #0
    5ad8:	82a3      	strh	r3, [r4, #20]
}
    5ada:	4610      	mov	r0, r2
    5adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    5ae0:	f06f 020c 	mvn.w	r2, #12
    5ae4:	e7f9      	b.n	5ada <adc_async_register_channel_buffer+0x5e>
		return ERR_NO_RESOURCE;
    5ae6:	f06f 021b 	mvn.w	r2, #27
    5aea:	e7f6      	b.n	5ada <adc_async_register_channel_buffer+0x5e>
		return ERR_INVALID_ARG;
    5aec:	f06f 020c 	mvn.w	r2, #12
    5af0:	e7f3      	b.n	5ada <adc_async_register_channel_buffer+0x5e>
    5af2:	bf00      	nop
    5af4:	000067ef 	.word	0x000067ef

00005af8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    5af8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    5afc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5afe:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    5b00:	f3bf 8f5f 	dmb	sy
    5b04:	4770      	bx	lr

00005b06 <atomic_leave_critical>:
    5b06:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    5b0a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5b0c:	f383 8810 	msr	PRIMASK, r3
    5b10:	4770      	bx	lr
	...

00005b14 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    5b14:	b508      	push	{r3, lr}
	ASSERT(descr && hw);

	return _crc_sync_init(&descr->dev, hw);
    5b16:	4b01      	ldr	r3, [pc, #4]	; (5b1c <crc_sync_init+0x8>)
    5b18:	4798      	blx	r3
}
    5b1a:	bd08      	pop	{r3, pc}
    5b1c:	00006ef5 	.word	0x00006ef5

00005b20 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    5b20:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    5b22:	4b02      	ldr	r3, [pc, #8]	; (5b2c <delay_init+0xc>)
    5b24:	6018      	str	r0, [r3, #0]
    5b26:	4b02      	ldr	r3, [pc, #8]	; (5b30 <delay_init+0x10>)
    5b28:	4798      	blx	r3
    5b2a:	bd08      	pop	{r3, pc}
    5b2c:	20000144 	.word	0x20000144
    5b30:	000082c9 	.word	0x000082c9

00005b34 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    5b34:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    5b36:	4b04      	ldr	r3, [pc, #16]	; (5b48 <delay_ms+0x14>)
    5b38:	681c      	ldr	r4, [r3, #0]
    5b3a:	4b04      	ldr	r3, [pc, #16]	; (5b4c <delay_ms+0x18>)
    5b3c:	4798      	blx	r3
    5b3e:	4601      	mov	r1, r0
    5b40:	4620      	mov	r0, r4
    5b42:	4b03      	ldr	r3, [pc, #12]	; (5b50 <delay_ms+0x1c>)
    5b44:	4798      	blx	r3
    5b46:	bd10      	pop	{r4, pc}
    5b48:	20000144 	.word	0x20000144
    5b4c:	00006bc1 	.word	0x00006bc1
    5b50:	000082dd 	.word	0x000082dd

00005b54 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    5b54:	b508      	push	{r3, lr}
	return _event_system_init();
    5b56:	4b01      	ldr	r3, [pc, #4]	; (5b5c <event_system_init+0x8>)
    5b58:	4798      	blx	r3
}
    5b5a:	bd08      	pop	{r3, pc}
    5b5c:	00006efd 	.word	0x00006efd

00005b60 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    5b60:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    5b62:	6943      	ldr	r3, [r0, #20]
    5b64:	b103      	cbz	r3, 5b68 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    5b66:	4798      	blx	r3
    5b68:	bd08      	pop	{r3, pc}

00005b6a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    5b6a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    5b6c:	6983      	ldr	r3, [r0, #24]
    5b6e:	b103      	cbz	r3, 5b72 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    5b70:	4798      	blx	r3
    5b72:	bd08      	pop	{r3, pc}

00005b74 <flash_init>:
{
    5b74:	b510      	push	{r4, lr}
    5b76:	4604      	mov	r4, r0
	rc = _flash_init(&flash->dev, hw);
    5b78:	4b04      	ldr	r3, [pc, #16]	; (5b8c <flash_init+0x18>)
    5b7a:	4798      	blx	r3
	if (rc) {
    5b7c:	4603      	mov	r3, r0
    5b7e:	b918      	cbnz	r0, 5b88 <flash_init+0x14>
	flash->dev.flash_cb.ready_cb = flash_ready;
    5b80:	4a03      	ldr	r2, [pc, #12]	; (5b90 <flash_init+0x1c>)
    5b82:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    5b84:	4a03      	ldr	r2, [pc, #12]	; (5b94 <flash_init+0x20>)
    5b86:	6062      	str	r2, [r4, #4]
}
    5b88:	4618      	mov	r0, r3
    5b8a:	bd10      	pop	{r4, pc}
    5b8c:	00007009 	.word	0x00007009
    5b90:	00005b61 	.word	0x00005b61
    5b94:	00005b6b 	.word	0x00005b6b

00005b98 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5b98:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5b9a:	8843      	ldrh	r3, [r0, #2]
    5b9c:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ba0:	d102      	bne.n	5ba8 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    5ba2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5ba4:	b103      	cbz	r3, 5ba8 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    5ba6:	4798      	blx	r3
    5ba8:	bd08      	pop	{r3, pc}

00005baa <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5baa:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5bac:	8843      	ldrh	r3, [r0, #2]
    5bae:	f413 7f80 	tst.w	r3, #256	; 0x100
    5bb2:	d102      	bne.n	5bba <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    5bb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5bb6:	b103      	cbz	r3, 5bba <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    5bb8:	4798      	blx	r3
    5bba:	bd08      	pop	{r3, pc}

00005bbc <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    5bbc:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5bbe:	8843      	ldrh	r3, [r0, #2]
    5bc0:	f413 7f80 	tst.w	r3, #256	; 0x100
    5bc4:	d102      	bne.n	5bcc <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    5bc6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5bc8:	b103      	cbz	r3, 5bcc <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    5bca:	4798      	blx	r3
    5bcc:	bd08      	pop	{r3, pc}
	...

00005bd0 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    5bd0:	b510      	push	{r4, lr}
    5bd2:	b084      	sub	sp, #16
    5bd4:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    5bd6:	8a83      	ldrh	r3, [r0, #20]
    5bd8:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    5bdc:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    5bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    5be2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    5be6:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5be8:	a901      	add	r1, sp, #4
    5bea:	3828      	subs	r0, #40	; 0x28
    5bec:	4b03      	ldr	r3, [pc, #12]	; (5bfc <i2c_m_async_write+0x2c>)
    5bee:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    5bf0:	2800      	cmp	r0, #0
    5bf2:	bf08      	it	eq
    5bf4:	4620      	moveq	r0, r4
    5bf6:	b004      	add	sp, #16
    5bf8:	bd10      	pop	{r4, pc}
    5bfa:	bf00      	nop
    5bfc:	00007afd 	.word	0x00007afd

00005c00 <i2c_m_async_read>:
{
    5c00:	b510      	push	{r4, lr}
    5c02:	b084      	sub	sp, #16
    5c04:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    5c06:	8a83      	ldrh	r3, [r0, #20]
    5c08:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    5c0c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    5c0e:	f248 0301 	movw	r3, #32769	; 0x8001
    5c12:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    5c16:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5c18:	a901      	add	r1, sp, #4
    5c1a:	3828      	subs	r0, #40	; 0x28
    5c1c:	4b03      	ldr	r3, [pc, #12]	; (5c2c <i2c_m_async_read+0x2c>)
    5c1e:	4798      	blx	r3
}
    5c20:	2800      	cmp	r0, #0
    5c22:	bf08      	it	eq
    5c24:	4620      	moveq	r0, r4
    5c26:	b004      	add	sp, #16
    5c28:	bd10      	pop	{r4, pc}
    5c2a:	bf00      	nop
    5c2c:	00007afd 	.word	0x00007afd

00005c30 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    5c30:	b570      	push	{r4, r5, r6, lr}
    5c32:	4604      	mov	r4, r0
	int32_t init_status;
	ASSERT(i2c);

	init_status = _i2c_m_async_init(&i2c->device, hw);
    5c34:	4b0b      	ldr	r3, [pc, #44]	; (5c64 <i2c_m_async_init+0x34>)
    5c36:	4798      	blx	r3
	if (init_status) {
    5c38:	4605      	mov	r5, r0
    5c3a:	b108      	cbz	r0, 5c40 <i2c_m_async_init+0x10>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    5c3c:	4628      	mov	r0, r5
    5c3e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    5c40:	4b09      	ldr	r3, [pc, #36]	; (5c68 <i2c_m_async_init+0x38>)
    5c42:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    5c44:	4b09      	ldr	r3, [pc, #36]	; (5c6c <i2c_m_async_init+0x3c>)
    5c46:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    5c48:	4a09      	ldr	r2, [pc, #36]	; (5c70 <i2c_m_async_init+0x40>)
    5c4a:	2101      	movs	r1, #1
    5c4c:	4620      	mov	r0, r4
    5c4e:	4e09      	ldr	r6, [pc, #36]	; (5c74 <i2c_m_async_init+0x44>)
    5c50:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    5c52:	4a09      	ldr	r2, [pc, #36]	; (5c78 <i2c_m_async_init+0x48>)
    5c54:	2102      	movs	r1, #2
    5c56:	4620      	mov	r0, r4
    5c58:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    5c5a:	4a08      	ldr	r2, [pc, #32]	; (5c7c <i2c_m_async_init+0x4c>)
    5c5c:	2100      	movs	r1, #0
    5c5e:	4620      	mov	r0, r4
    5c60:	47b0      	blx	r6
	return ERR_NONE;
    5c62:	e7eb      	b.n	5c3c <i2c_m_async_init+0xc>
    5c64:	00007a99 	.word	0x00007a99
    5c68:	00005c01 	.word	0x00005c01
    5c6c:	00005bd1 	.word	0x00005bd1
    5c70:	00005b99 	.word	0x00005b99
    5c74:	00007bdb 	.word	0x00007bdb
    5c78:	00005bab 	.word	0x00005bab
    5c7c:	00005bbd 	.word	0x00005bbd

00005c80 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5c80:	b508      	push	{r3, lr}
	ASSERT(io_descr && buf);
	return io_descr->write(io_descr, buf, length);
    5c82:	6803      	ldr	r3, [r0, #0]
    5c84:	4798      	blx	r3
}
    5c86:	bd08      	pop	{r3, pc}

00005c88 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    5c88:	b508      	push	{r3, lr}
	ASSERT(io_descr && buf);
	return io_descr->read(io_descr, buf, length);
    5c8a:	6843      	ldr	r3, [r0, #4]
    5c8c:	4798      	blx	r3
}
    5c8e:	bd08      	pop	{r3, pc}

00005c90 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    5c90:	b508      	push	{r3, lr}
	ASSERT(qspi && hw);

	return _qspi_dma_init(&qspi->dev, hw);
    5c92:	4b01      	ldr	r3, [pc, #4]	; (5c98 <qspi_dma_init+0x8>)
    5c94:	4798      	blx	r3
}
    5c96:	bd08      	pop	{r3, pc}
    5c98:	000071fd 	.word	0x000071fd

00005c9c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5c9c:	b510      	push	{r4, lr}
	ASSERT(io);
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    5c9e:	2400      	movs	r4, #0
    5ca0:	6184      	str	r4, [r0, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    5ca2:	6141      	str	r1, [r0, #20]
	spi->xfer.size  = length;
    5ca4:	61c2      	str	r2, [r0, #28]
	spi->xfercnt    = 0;
    5ca6:	6204      	str	r4, [r0, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5ca8:	2310      	movs	r3, #16
    5caa:	7203      	strb	r3, [r0, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    5cac:	2101      	movs	r1, #1
    5cae:	3820      	subs	r0, #32
    5cb0:	4b01      	ldr	r3, [pc, #4]	; (5cb8 <_spi_m_async_io_write+0x1c>)
    5cb2:	4798      	blx	r3

	return ERR_NONE;
}
    5cb4:	4620      	mov	r0, r4
    5cb6:	bd10      	pop	{r4, pc}
    5cb8:	00007fa5 	.word	0x00007fa5

00005cbc <_spi_m_async_io_read>:
{
    5cbc:	b538      	push	{r3, r4, r5, lr}
	spi->xfer.rxbuf = buf;
    5cbe:	6181      	str	r1, [r0, #24]
	spi->xfer.txbuf = NULL;
    5cc0:	2500      	movs	r5, #0
    5cc2:	6145      	str	r5, [r0, #20]
	spi->xfer.size  = length;
    5cc4:	61c2      	str	r2, [r0, #28]
	spi->xfercnt    = 0;
    5cc6:	6205      	str	r5, [r0, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5cc8:	2310      	movs	r3, #16
    5cca:	7203      	strb	r3, [r0, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    5ccc:	f1a0 0420 	sub.w	r4, r0, #32
    5cd0:	2101      	movs	r1, #1
    5cd2:	4620      	mov	r0, r4
    5cd4:	4b04      	ldr	r3, [pc, #16]	; (5ce8 <_spi_m_async_io_read+0x2c>)
    5cd6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    5cd8:	f240 11ff 	movw	r1, #511	; 0x1ff
    5cdc:	4620      	mov	r0, r4
    5cde:	4b03      	ldr	r3, [pc, #12]	; (5cec <_spi_m_async_io_read+0x30>)
    5ce0:	4798      	blx	r3
}
    5ce2:	4628      	mov	r0, r5
    5ce4:	bd38      	pop	{r3, r4, r5, pc}
    5ce6:	bf00      	nop
    5ce8:	00007fb7 	.word	0x00007fb7
    5cec:	00007fdd 	.word	0x00007fdd

00005cf0 <_spi_dev_error>:
{
    5cf0:	b570      	push	{r4, r5, r6, lr}
    5cf2:	4604      	mov	r4, r0
    5cf4:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    5cf6:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    5cf8:	2100      	movs	r1, #0
    5cfa:	4b09      	ldr	r3, [pc, #36]	; (5d20 <_spi_dev_error+0x30>)
    5cfc:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    5cfe:	2100      	movs	r1, #0
    5d00:	4620      	mov	r0, r4
    5d02:	4b08      	ldr	r3, [pc, #32]	; (5d24 <_spi_dev_error+0x34>)
    5d04:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    5d06:	2100      	movs	r1, #0
    5d08:	4620      	mov	r0, r4
    5d0a:	4b07      	ldr	r3, [pc, #28]	; (5d28 <_spi_dev_error+0x38>)
    5d0c:	4798      	blx	r3
	spi->stat = 0;
    5d0e:	2300      	movs	r3, #0
    5d10:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    5d14:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5d16:	b113      	cbz	r3, 5d1e <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    5d18:	4631      	mov	r1, r6
    5d1a:	4628      	mov	r0, r5
    5d1c:	4798      	blx	r3
    5d1e:	bd70      	pop	{r4, r5, r6, pc}
    5d20:	00007fa5 	.word	0x00007fa5
    5d24:	00007fb7 	.word	0x00007fb7
    5d28:	00007fc9 	.word	0x00007fc9

00005d2c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    5d2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5d2e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    5d30:	429a      	cmp	r2, r3
    5d32:	d200      	bcs.n	5d36 <_spi_dev_complete+0xa>
    5d34:	4770      	bx	lr
{
    5d36:	b510      	push	{r4, lr}
    5d38:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    5d3a:	2100      	movs	r1, #0
    5d3c:	4b04      	ldr	r3, [pc, #16]	; (5d50 <_spi_dev_complete+0x24>)
    5d3e:	4798      	blx	r3
		spi->stat = 0;
    5d40:	2300      	movs	r3, #0
    5d42:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    5d46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5d48:	b10b      	cbz	r3, 5d4e <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    5d4a:	1f20      	subs	r0, r4, #4
    5d4c:	4798      	blx	r3
    5d4e:	bd10      	pop	{r4, pc}
    5d50:	00007fc9 	.word	0x00007fc9

00005d54 <_spi_dev_tx>:
{
    5d54:	b510      	push	{r4, lr}
    5d56:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    5d58:	7903      	ldrb	r3, [r0, #4]
    5d5a:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    5d5c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    5d5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5d60:	f103 0101 	add.w	r1, r3, #1
    5d64:	6401      	str	r1, [r0, #64]	; 0x40
    5d66:	bf94      	ite	ls
    5d68:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    5d6a:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    5d6e:	4b08      	ldr	r3, [pc, #32]	; (5d90 <_spi_dev_tx+0x3c>)
    5d70:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    5d72:	6c22      	ldr	r2, [r4, #64]	; 0x40
    5d74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5d76:	429a      	cmp	r2, r3
    5d78:	d000      	beq.n	5d7c <_spi_dev_tx+0x28>
    5d7a:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    5d7c:	2100      	movs	r1, #0
    5d7e:	4620      	mov	r0, r4
    5d80:	4b04      	ldr	r3, [pc, #16]	; (5d94 <_spi_dev_tx+0x40>)
    5d82:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    5d84:	2101      	movs	r1, #1
    5d86:	4620      	mov	r0, r4
    5d88:	4b03      	ldr	r3, [pc, #12]	; (5d98 <_spi_dev_tx+0x44>)
    5d8a:	4798      	blx	r3
}
    5d8c:	e7f5      	b.n	5d7a <_spi_dev_tx+0x26>
    5d8e:	bf00      	nop
    5d90:	00007fdd 	.word	0x00007fdd
    5d94:	00007fa5 	.word	0x00007fa5
    5d98:	00007fc9 	.word	0x00007fc9

00005d9c <_spi_dev_rx>:
{
    5d9c:	b570      	push	{r4, r5, r6, lr}
    5d9e:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    5da0:	6b85      	ldr	r5, [r0, #56]	; 0x38
    5da2:	b305      	cbz	r5, 5de6 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    5da4:	7903      	ldrb	r3, [r0, #4]
    5da6:	2b01      	cmp	r3, #1
    5da8:	d916      	bls.n	5dd8 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    5daa:	6c06      	ldr	r6, [r0, #64]	; 0x40
    5dac:	1c73      	adds	r3, r6, #1
    5dae:	6403      	str	r3, [r0, #64]	; 0x40
    5db0:	4b18      	ldr	r3, [pc, #96]	; (5e14 <_spi_dev_rx+0x78>)
    5db2:	4798      	blx	r3
    5db4:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    5db8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5dba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    5dbc:	4293      	cmp	r3, r2
    5dbe:	d21d      	bcs.n	5dfc <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    5dc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    5dc2:	b1b2      	cbz	r2, 5df2 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    5dc4:	7921      	ldrb	r1, [r4, #4]
    5dc6:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    5dc8:	bf94      	ite	ls
    5dca:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    5dcc:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    5dd0:	4620      	mov	r0, r4
    5dd2:	4b11      	ldr	r3, [pc, #68]	; (5e18 <_spi_dev_rx+0x7c>)
    5dd4:	4798      	blx	r3
    5dd6:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    5dd8:	6c06      	ldr	r6, [r0, #64]	; 0x40
    5dda:	1c73      	adds	r3, r6, #1
    5ddc:	6403      	str	r3, [r0, #64]	; 0x40
    5dde:	4b0d      	ldr	r3, [pc, #52]	; (5e14 <_spi_dev_rx+0x78>)
    5de0:	4798      	blx	r3
    5de2:	55a8      	strb	r0, [r5, r6]
    5de4:	e7e8      	b.n	5db8 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    5de6:	4b0b      	ldr	r3, [pc, #44]	; (5e14 <_spi_dev_rx+0x78>)
    5de8:	4798      	blx	r3
		spi->xfercnt++;
    5dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5dec:	3301      	adds	r3, #1
    5dee:	6423      	str	r3, [r4, #64]	; 0x40
    5df0:	e7e2      	b.n	5db8 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    5df2:	88e1      	ldrh	r1, [r4, #6]
    5df4:	4620      	mov	r0, r4
    5df6:	4b08      	ldr	r3, [pc, #32]	; (5e18 <_spi_dev_rx+0x7c>)
    5df8:	4798      	blx	r3
    5dfa:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    5dfc:	2100      	movs	r1, #0
    5dfe:	4620      	mov	r0, r4
    5e00:	4b06      	ldr	r3, [pc, #24]	; (5e1c <_spi_dev_rx+0x80>)
    5e02:	4798      	blx	r3
		spi->stat = 0;
    5e04:	2300      	movs	r3, #0
    5e06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    5e0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5e0c:	b10b      	cbz	r3, 5e12 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    5e0e:	1f20      	subs	r0, r4, #4
    5e10:	4798      	blx	r3
    5e12:	bd70      	pop	{r4, r5, r6, pc}
    5e14:	00007fe5 	.word	0x00007fe5
    5e18:	00007fdd 	.word	0x00007fdd
    5e1c:	00007fb7 	.word	0x00007fb7

00005e20 <spi_m_async_init>:
{
    5e20:	b570      	push	{r4, r5, r6, lr}
    5e22:	4605      	mov	r5, r0
	spi->dev.prvt = (void *)hw;
    5e24:	4604      	mov	r4, r0
    5e26:	f844 1f04 	str.w	r1, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    5e2a:	4620      	mov	r0, r4
    5e2c:	4b0d      	ldr	r3, [pc, #52]	; (5e64 <spi_m_async_init+0x44>)
    5e2e:	4798      	blx	r3
	if (rc >= 0) {
    5e30:	2800      	cmp	r0, #0
    5e32:	db15      	blt.n	5e60 <spi_m_async_init+0x40>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    5e34:	4a0c      	ldr	r2, [pc, #48]	; (5e68 <spi_m_async_init+0x48>)
    5e36:	2100      	movs	r1, #0
    5e38:	4620      	mov	r0, r4
    5e3a:	4e0c      	ldr	r6, [pc, #48]	; (5e6c <spi_m_async_init+0x4c>)
    5e3c:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    5e3e:	4a0c      	ldr	r2, [pc, #48]	; (5e70 <spi_m_async_init+0x50>)
    5e40:	2101      	movs	r1, #1
    5e42:	4620      	mov	r0, r4
    5e44:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    5e46:	4a0b      	ldr	r2, [pc, #44]	; (5e74 <spi_m_async_init+0x54>)
    5e48:	2102      	movs	r1, #2
    5e4a:	4620      	mov	r0, r4
    5e4c:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    5e4e:	4a0a      	ldr	r2, [pc, #40]	; (5e78 <spi_m_async_init+0x58>)
    5e50:	2103      	movs	r1, #3
    5e52:	4620      	mov	r0, r4
    5e54:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
    5e56:	4b09      	ldr	r3, [pc, #36]	; (5e7c <spi_m_async_init+0x5c>)
    5e58:	62ab      	str	r3, [r5, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    5e5a:	4b09      	ldr	r3, [pc, #36]	; (5e80 <spi_m_async_init+0x60>)
    5e5c:	626b      	str	r3, [r5, #36]	; 0x24
	return ERR_NONE;
    5e5e:	2000      	movs	r0, #0
}
    5e60:	bd70      	pop	{r4, r5, r6, pc}
    5e62:	bf00      	nop
    5e64:	00007f3d 	.word	0x00007f3d
    5e68:	00005d55 	.word	0x00005d55
    5e6c:	00007fed 	.word	0x00007fed
    5e70:	00005d9d 	.word	0x00005d9d
    5e74:	00005d2d 	.word	0x00005d2d
    5e78:	00005cf1 	.word	0x00005cf1
    5e7c:	00005cbd 	.word	0x00005cbd
    5e80:	00005c9d 	.word	0x00005c9d

00005e84 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5e84:	b510      	push	{r4, lr}
	ASSERT(io);

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    5e86:	4613      	mov	r3, r2
    5e88:	2200      	movs	r2, #0
    5e8a:	381c      	subs	r0, #28
    5e8c:	4c01      	ldr	r4, [pc, #4]	; (5e94 <_spi_m_dma_io_write+0x10>)
    5e8e:	47a0      	blx	r4
}
    5e90:	bd10      	pop	{r4, pc}
    5e92:	bf00      	nop
    5e94:	000081ad 	.word	0x000081ad

00005e98 <_spi_m_dma_io_read>:
{
    5e98:	b510      	push	{r4, lr}
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    5e9a:	4613      	mov	r3, r2
    5e9c:	460a      	mov	r2, r1
    5e9e:	2100      	movs	r1, #0
    5ea0:	381c      	subs	r0, #28
    5ea2:	4c01      	ldr	r4, [pc, #4]	; (5ea8 <_spi_m_dma_io_read+0x10>)
    5ea4:	47a0      	blx	r4
}
    5ea6:	bd10      	pop	{r4, pc}
    5ea8:	000081ad 	.word	0x000081ad

00005eac <spi_m_dma_init>:
{
    5eac:	b510      	push	{r4, lr}
    5eae:	4604      	mov	r4, r0
	spi->dev.prvt = (void *)hw;
    5eb0:	f840 1f04 	str.w	r1, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    5eb4:	4b04      	ldr	r3, [pc, #16]	; (5ec8 <spi_m_dma_init+0x1c>)
    5eb6:	4798      	blx	r3
	if (rc) {
    5eb8:	4603      	mov	r3, r0
    5eba:	b918      	cbnz	r0, 5ec4 <spi_m_dma_init+0x18>
	spi->io.read  = _spi_m_dma_io_read;
    5ebc:	4a03      	ldr	r2, [pc, #12]	; (5ecc <spi_m_dma_init+0x20>)
    5ebe:	6262      	str	r2, [r4, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    5ec0:	4a03      	ldr	r2, [pc, #12]	; (5ed0 <spi_m_dma_init+0x24>)
    5ec2:	6222      	str	r2, [r4, #32]
}
    5ec4:	4618      	mov	r0, r3
    5ec6:	bd10      	pop	{r4, pc}
    5ec8:	00007ff9 	.word	0x00007ff9
    5ecc:	00005e99 	.word	0x00005e99
    5ed0:	00005e85 	.word	0x00005e85

00005ed4 <spi_m_dma_enable>:
{
    5ed4:	b508      	push	{r3, lr}
	_spi_m_dma_enable(&spi->dev);
    5ed6:	3004      	adds	r0, #4
    5ed8:	4b01      	ldr	r3, [pc, #4]	; (5ee0 <spi_m_dma_enable+0xc>)
    5eda:	4798      	blx	r3
    5edc:	bd08      	pop	{r3, pc}
    5ede:	bf00      	nop
    5ee0:	0000812d 	.word	0x0000812d

00005ee4 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    5ee4:	b508      	push	{r3, lr}
	ASSERT(spi);
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    5ee6:	3004      	adds	r0, #4
    5ee8:	4b01      	ldr	r3, [pc, #4]	; (5ef0 <spi_m_dma_register_callback+0xc>)
    5eea:	4798      	blx	r3
    5eec:	bd08      	pop	{r3, pc}
    5eee:	bf00      	nop
    5ef0:	0000813d 	.word	0x0000813d

00005ef4 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
	ASSERT(spi && io);
	*io = &spi->io;
    5ef4:	3020      	adds	r0, #32
    5ef6:	6008      	str	r0, [r1, #0]

	return 0;
}
    5ef8:	2000      	movs	r0, #0
    5efa:	4770      	bx	lr

00005efc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5efe:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    5f00:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    5f02:	b12f      	cbz	r7, 5f10 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    5f04:	688d      	ldr	r5, [r1, #8]
    5f06:	463c      	mov	r4, r7
    5f08:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5f0a:	f1c2 0e01 	rsb	lr, r2, #1
    5f0e:	e00b      	b.n	5f28 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    5f10:	4b0e      	ldr	r3, [pc, #56]	; (5f4c <timer_add_timer_task+0x50>)
    5f12:	4798      	blx	r3
		return;
    5f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5f16:	4473      	add	r3, lr
    5f18:	68a0      	ldr	r0, [r4, #8]
    5f1a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    5f1c:	42ab      	cmp	r3, r5
    5f1e:	d20a      	bcs.n	5f36 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    5f20:	6823      	ldr	r3, [r4, #0]
    5f22:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5f24:	b153      	cbz	r3, 5f3c <timer_add_timer_task+0x40>
    5f26:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    5f28:	6863      	ldr	r3, [r4, #4]
    5f2a:	4293      	cmp	r3, r2
    5f2c:	d8f3      	bhi.n	5f16 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    5f2e:	68a0      	ldr	r0, [r4, #8]
    5f30:	4403      	add	r3, r0
    5f32:	1a9b      	subs	r3, r3, r2
    5f34:	e7f2      	b.n	5f1c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    5f36:	42a7      	cmp	r7, r4
    5f38:	d004      	beq.n	5f44 <timer_add_timer_task+0x48>
    5f3a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    5f3c:	4620      	mov	r0, r4
    5f3e:	4b04      	ldr	r3, [pc, #16]	; (5f50 <timer_add_timer_task+0x54>)
    5f40:	4798      	blx	r3
    5f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    5f44:	4660      	mov	r0, ip
    5f46:	4b01      	ldr	r3, [pc, #4]	; (5f4c <timer_add_timer_task+0x50>)
    5f48:	4798      	blx	r3
    5f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f4c:	000067b9 	.word	0x000067b9
    5f50:	000067c1 	.word	0x000067c1

00005f54 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    5f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    5f58:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    5f5a:	6907      	ldr	r7, [r0, #16]
    5f5c:	3701      	adds	r7, #1
    5f5e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    5f60:	7e03      	ldrb	r3, [r0, #24]
    5f62:	f013 0f01 	tst.w	r3, #1
    5f66:	d113      	bne.n	5f90 <timer_process_counted+0x3c>
    5f68:	7e03      	ldrb	r3, [r0, #24]
    5f6a:	f013 0f02 	tst.w	r3, #2
    5f6e:	d10f      	bne.n	5f90 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    5f70:	b354      	cbz	r4, 5fc8 <timer_process_counted+0x74>
    5f72:	6863      	ldr	r3, [r4, #4]
    5f74:	1afb      	subs	r3, r7, r3
    5f76:	68a2      	ldr	r2, [r4, #8]
    5f78:	4293      	cmp	r3, r2
    5f7a:	d307      	bcc.n	5f8c <timer_process_counted+0x38>
    5f7c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    5f7e:	f100 0814 	add.w	r8, r0, #20
    5f82:	f8df 9048 	ldr.w	r9, [pc, #72]	; 5fcc <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    5f86:	f8df a048 	ldr.w	sl, [pc, #72]	; 5fd0 <timer_process_counted+0x7c>
    5f8a:	e012      	b.n	5fb2 <timer_process_counted+0x5e>
    5f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    5f90:	7e03      	ldrb	r3, [r0, #24]
    5f92:	f043 0302 	orr.w	r3, r3, #2
    5f96:	7603      	strb	r3, [r0, #24]
		return;
    5f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f9c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    5f9e:	68e3      	ldr	r3, [r4, #12]
    5fa0:	4620      	mov	r0, r4
    5fa2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    5fa4:	b185      	cbz	r5, 5fc8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    5fa6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    5fa8:	686b      	ldr	r3, [r5, #4]
    5faa:	1afb      	subs	r3, r7, r3
    5fac:	68aa      	ldr	r2, [r5, #8]
    5fae:	4293      	cmp	r3, r2
    5fb0:	d30a      	bcc.n	5fc8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    5fb2:	4640      	mov	r0, r8
    5fb4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    5fb6:	7c23      	ldrb	r3, [r4, #16]
    5fb8:	2b01      	cmp	r3, #1
    5fba:	d1ef      	bne.n	5f9c <timer_process_counted+0x48>
			tmp->time_label = time;
    5fbc:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    5fbe:	463a      	mov	r2, r7
    5fc0:	4621      	mov	r1, r4
    5fc2:	4640      	mov	r0, r8
    5fc4:	47d0      	blx	sl
    5fc6:	e7e9      	b.n	5f9c <timer_process_counted+0x48>
    5fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fcc:	000067e3 	.word	0x000067e3
    5fd0:	00005efd 	.word	0x00005efd

00005fd4 <timer_init>:
{
    5fd4:	b510      	push	{r4, lr}
    5fd6:	4604      	mov	r4, r0
	descr->func = func;
    5fd8:	f840 2b04 	str.w	r2, [r0], #4
	descr->func->init(&descr->device, hw);
    5fdc:	6813      	ldr	r3, [r2, #0]
    5fde:	4798      	blx	r3
	descr->time                           = 0;
    5fe0:	2000      	movs	r0, #0
    5fe2:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    5fe4:	4b01      	ldr	r3, [pc, #4]	; (5fec <timer_init+0x18>)
    5fe6:	6063      	str	r3, [r4, #4]
}
    5fe8:	bd10      	pop	{r4, pc}
    5fea:	bf00      	nop
    5fec:	00005f55 	.word	0x00005f55

00005ff0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    5ff0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    5ff2:	2300      	movs	r3, #0
    5ff4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    5ff6:	69c3      	ldr	r3, [r0, #28]
    5ff8:	b11b      	cbz	r3, 6002 <usart_transmission_complete+0x12>
    5ffa:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    5ffe:	4610      	mov	r0, r2
    6000:	4798      	blx	r3
    6002:	bd08      	pop	{r3, pc}

00006004 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    6004:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    6006:	2300      	movs	r3, #0
    6008:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    600a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    600c:	b11b      	cbz	r3, 6016 <usart_error+0x12>
    600e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    6012:	4610      	mov	r0, r2
    6014:	4798      	blx	r3
    6016:	bd08      	pop	{r3, pc}

00006018 <usart_fill_rx_buffer>:
{
    6018:	b538      	push	{r3, r4, r5, lr}
    601a:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    601c:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    6020:	302c      	adds	r0, #44	; 0x2c
    6022:	4b03      	ldr	r3, [pc, #12]	; (6030 <usart_fill_rx_buffer+0x18>)
    6024:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    6026:	6a23      	ldr	r3, [r4, #32]
    6028:	b10b      	cbz	r3, 602e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    602a:	4628      	mov	r0, r5
    602c:	4798      	blx	r3
    602e:	bd38      	pop	{r3, r4, r5, pc}
    6030:	0000682b 	.word	0x0000682b

00006034 <usart_async_write>:
{
    6034:	b510      	push	{r4, lr}
	if (descr->tx_por != descr->tx_buffer_length) {
    6036:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
    603a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    603e:	429c      	cmp	r4, r3
    6040:	d10d      	bne.n	605e <usart_async_write+0x2a>
    6042:	4614      	mov	r4, r2
	descr->tx_buffer        = (uint8_t *)buf;
    6044:	6481      	str	r1, [r0, #72]	; 0x48
	descr->tx_buffer_length = length;
    6046:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
	descr->tx_por           = 0;
    604a:	2300      	movs	r3, #0
    604c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    6050:	2301      	movs	r3, #1
    6052:	6303      	str	r3, [r0, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    6054:	3008      	adds	r0, #8
    6056:	4b03      	ldr	r3, [pc, #12]	; (6064 <usart_async_write+0x30>)
    6058:	4798      	blx	r3
	return (int32_t)length;
    605a:	4620      	mov	r0, r4
    605c:	bd10      	pop	{r4, pc}
		return ERR_NO_RESOURCE;
    605e:	f06f 001b 	mvn.w	r0, #27
}
    6062:	bd10      	pop	{r4, pc}
    6064:	00007a87 	.word	0x00007a87

00006068 <usart_process_byte_sent>:
{
    6068:	b510      	push	{r4, lr}
    606a:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    606c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    606e:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    6072:	429a      	cmp	r2, r3
    6074:	d009      	beq.n	608a <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    6076:	6c02      	ldr	r2, [r0, #64]	; 0x40
    6078:	1c59      	adds	r1, r3, #1
    607a:	8781      	strh	r1, [r0, #60]	; 0x3c
    607c:	5cd1      	ldrb	r1, [r2, r3]
    607e:	4b04      	ldr	r3, [pc, #16]	; (6090 <usart_process_byte_sent+0x28>)
    6080:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    6082:	4620      	mov	r0, r4
    6084:	4b03      	ldr	r3, [pc, #12]	; (6094 <usart_process_byte_sent+0x2c>)
    6086:	4798      	blx	r3
    6088:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    608a:	4b03      	ldr	r3, [pc, #12]	; (6098 <usart_process_byte_sent+0x30>)
    608c:	4798      	blx	r3
    608e:	bd10      	pop	{r4, pc}
    6090:	00007a5b 	.word	0x00007a5b
    6094:	00007a87 	.word	0x00007a87
    6098:	00007a8f 	.word	0x00007a8f

0000609c <usart_async_read>:
{
    609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    60a0:	b082      	sub	sp, #8
    60a2:	4682      	mov	sl, r0
    60a4:	4688      	mov	r8, r1
    60a6:	4615      	mov	r5, r2
	CRITICAL_SECTION_ENTER()
    60a8:	a801      	add	r0, sp, #4
    60aa:	4b13      	ldr	r3, [pc, #76]	; (60f8 <usart_async_read+0x5c>)
    60ac:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    60ae:	f10a 0a34 	add.w	sl, sl, #52	; 0x34
    60b2:	4650      	mov	r0, sl
    60b4:	4b11      	ldr	r3, [pc, #68]	; (60fc <usart_async_read+0x60>)
    60b6:	4798      	blx	r3
    60b8:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    60ba:	a801      	add	r0, sp, #4
    60bc:	4b10      	ldr	r3, [pc, #64]	; (6100 <usart_async_read+0x64>)
    60be:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    60c0:	b1a7      	cbz	r7, 60ec <usart_async_read+0x50>
    60c2:	b1b5      	cbz	r5, 60f2 <usart_async_read+0x56>
    60c4:	3d01      	subs	r5, #1
    60c6:	b2ad      	uxth	r5, r5
    60c8:	3502      	adds	r5, #2
    60ca:	2401      	movs	r4, #1
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    60cc:	4e0d      	ldr	r6, [pc, #52]	; (6104 <usart_async_read+0x68>)
    60ce:	fa1f f984 	uxth.w	r9, r4
    60d2:	1e61      	subs	r1, r4, #1
    60d4:	4441      	add	r1, r8
    60d6:	4650      	mov	r0, sl
    60d8:	47b0      	blx	r6
	while ((was_read < num) && (was_read < length)) {
    60da:	42bc      	cmp	r4, r7
    60dc:	d002      	beq.n	60e4 <usart_async_read+0x48>
    60de:	3401      	adds	r4, #1
    60e0:	42ac      	cmp	r4, r5
    60e2:	d1f4      	bne.n	60ce <usart_async_read+0x32>
}
    60e4:	4648      	mov	r0, r9
    60e6:	b002      	add	sp, #8
    60e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint16_t                       was_read = 0;
    60ec:	f04f 0900 	mov.w	r9, #0
    60f0:	e7f8      	b.n	60e4 <usart_async_read+0x48>
    60f2:	f04f 0900 	mov.w	r9, #0
    60f6:	e7f5      	b.n	60e4 <usart_async_read+0x48>
    60f8:	00005af9 	.word	0x00005af9
    60fc:	0000684d 	.word	0x0000684d
    6100:	00005b07 	.word	0x00005b07
    6104:	00006809 	.word	0x00006809

00006108 <usart_async_init>:
{
    6108:	b538      	push	{r3, r4, r5, lr}
    610a:	4604      	mov	r4, r0
    610c:	460d      	mov	r5, r1
    610e:	4611      	mov	r1, r2
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    6110:	461a      	mov	r2, r3
    6112:	3034      	adds	r0, #52	; 0x34
    6114:	4b0d      	ldr	r3, [pc, #52]	; (614c <usart_async_init+0x44>)
    6116:	4798      	blx	r3
    6118:	b9a0      	cbnz	r0, 6144 <usart_async_init+0x3c>
	init_status = _usart_async_init(&descr->device, hw);
    611a:	4629      	mov	r1, r5
    611c:	f104 0008 	add.w	r0, r4, #8
    6120:	4b0b      	ldr	r3, [pc, #44]	; (6150 <usart_async_init+0x48>)
    6122:	4798      	blx	r3
	if (init_status) {
    6124:	4603      	mov	r3, r0
    6126:	b958      	cbnz	r0, 6140 <usart_async_init+0x38>
	descr->io.read  = usart_async_read;
    6128:	4a0a      	ldr	r2, [pc, #40]	; (6154 <usart_async_init+0x4c>)
    612a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    612c:	4a0a      	ldr	r2, [pc, #40]	; (6158 <usart_async_init+0x50>)
    612e:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    6130:	4a0a      	ldr	r2, [pc, #40]	; (615c <usart_async_init+0x54>)
    6132:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    6134:	4a0a      	ldr	r2, [pc, #40]	; (6160 <usart_async_init+0x58>)
    6136:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    6138:	4a0a      	ldr	r2, [pc, #40]	; (6164 <usart_async_init+0x5c>)
    613a:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    613c:	4a0a      	ldr	r2, [pc, #40]	; (6168 <usart_async_init+0x60>)
    613e:	6162      	str	r2, [r4, #20]
}
    6140:	4618      	mov	r0, r3
    6142:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_INVALID_ARG;
    6144:	f06f 030c 	mvn.w	r3, #12
    6148:	e7fa      	b.n	6140 <usart_async_init+0x38>
    614a:	bf00      	nop
    614c:	000067ef 	.word	0x000067ef
    6150:	000079d9 	.word	0x000079d9
    6154:	0000609d 	.word	0x0000609d
    6158:	00006035 	.word	0x00006035
    615c:	00006069 	.word	0x00006069
    6160:	00006019 	.word	0x00006019
    6164:	00005ff1 	.word	0x00005ff1
    6168:	00006005 	.word	0x00006005

0000616c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    616c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6170:	460f      	mov	r7, r1
    6172:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
	while (!_usart_sync_is_ready_to_send(&descr->device))
    6174:	f100 0408 	add.w	r4, r0, #8
    6178:	4d0e      	ldr	r5, [pc, #56]	; (61b4 <usart_sync_write+0x48>)
    617a:	4620      	mov	r0, r4
    617c:	47a8      	blx	r5
    617e:	2800      	cmp	r0, #0
    6180:	d0fb      	beq.n	617a <usart_sync_write+0xe>
    6182:	3f01      	subs	r7, #1
    6184:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    6186:	f8df 8034 	ldr.w	r8, [pc, #52]	; 61bc <usart_sync_write+0x50>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    618a:	4d0a      	ldr	r5, [pc, #40]	; (61b4 <usart_sync_write+0x48>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    618c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    6190:	4620      	mov	r0, r4
    6192:	47c0      	blx	r8
		while (!_usart_sync_is_ready_to_send(&descr->device))
    6194:	4620      	mov	r0, r4
    6196:	47a8      	blx	r5
    6198:	2800      	cmp	r0, #0
    619a:	d0fb      	beq.n	6194 <usart_sync_write+0x28>
			;
	} while (++offset < length);
    619c:	3601      	adds	r6, #1
    619e:	454e      	cmp	r6, r9
    61a0:	d3f4      	bcc.n	618c <usart_sync_write+0x20>
	while (!_usart_sync_is_transmit_done(&descr->device))
    61a2:	4d05      	ldr	r5, [pc, #20]	; (61b8 <usart_sync_write+0x4c>)
    61a4:	4620      	mov	r0, r4
    61a6:	47a8      	blx	r5
    61a8:	2800      	cmp	r0, #0
    61aa:	d0fb      	beq.n	61a4 <usart_sync_write+0x38>
		;
	return (int32_t)offset;
}
    61ac:	4630      	mov	r0, r6
    61ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    61b2:	bf00      	nop
    61b4:	00007a69 	.word	0x00007a69
    61b8:	00007a73 	.word	0x00007a73
    61bc:	00007a55 	.word	0x00007a55

000061c0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    61c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    61c4:	4691      	mov	r9, r2
    61c6:	1e4f      	subs	r7, r1, #1
	uint32_t                      offset = 0;
    61c8:	2600      	movs	r6, #0
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    61ca:	f100 0408 	add.w	r4, r0, #8
    61ce:	4d08      	ldr	r5, [pc, #32]	; (61f0 <usart_sync_read+0x30>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    61d0:	f8df 8020 	ldr.w	r8, [pc, #32]	; 61f4 <usart_sync_read+0x34>
		while (!_usart_sync_is_byte_received(&descr->device))
    61d4:	4620      	mov	r0, r4
    61d6:	47a8      	blx	r5
    61d8:	2800      	cmp	r0, #0
    61da:	d0fb      	beq.n	61d4 <usart_sync_read+0x14>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    61dc:	4620      	mov	r0, r4
    61de:	47c0      	blx	r8
    61e0:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    61e4:	3601      	adds	r6, #1
    61e6:	454e      	cmp	r6, r9
    61e8:	d3f4      	bcc.n	61d4 <usart_sync_read+0x14>

	return (int32_t)offset;
}
    61ea:	4630      	mov	r0, r6
    61ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    61f0:	00007a7d 	.word	0x00007a7d
    61f4:	00007a61 	.word	0x00007a61

000061f8 <usart_sync_init>:
{
    61f8:	b510      	push	{r4, lr}
    61fa:	4604      	mov	r4, r0
	init_status = _usart_sync_init(&descr->device, hw);
    61fc:	3008      	adds	r0, #8
    61fe:	4b05      	ldr	r3, [pc, #20]	; (6214 <usart_sync_init+0x1c>)
    6200:	4798      	blx	r3
	if (init_status) {
    6202:	4603      	mov	r3, r0
    6204:	b918      	cbnz	r0, 620e <usart_sync_init+0x16>
	descr->io.read  = usart_sync_read;
    6206:	4a04      	ldr	r2, [pc, #16]	; (6218 <usart_sync_init+0x20>)
    6208:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    620a:	4a04      	ldr	r2, [pc, #16]	; (621c <usart_sync_init+0x24>)
    620c:	6022      	str	r2, [r4, #0]
}
    620e:	4618      	mov	r0, r3
    6210:	bd10      	pop	{r4, pc}
    6212:	bf00      	nop
    6214:	000079c9 	.word	0x000079c9
    6218:	000061c1 	.word	0x000061c1
    621c:	0000616d 	.word	0x0000616d

00006220 <usart_sync_enable>:
{
    6220:	b508      	push	{r3, lr}
	_usart_sync_enable(&descr->device);
    6222:	3008      	adds	r0, #8
    6224:	4b01      	ldr	r3, [pc, #4]	; (622c <usart_sync_enable+0xc>)
    6226:	4798      	blx	r3
}
    6228:	2000      	movs	r0, #0
    622a:	bd08      	pop	{r3, pc}
    622c:	00007a41 	.word	0x00007a41

00006230 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6230:	4b0f      	ldr	r3, [pc, #60]	; (6270 <_usb_d_find_ep+0x40>)
    6232:	7859      	ldrb	r1, [r3, #1]
    6234:	4288      	cmp	r0, r1
    6236:	d018      	beq.n	626a <_usb_d_find_ep+0x3a>
{
    6238:	b430      	push	{r4, r5}
    623a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    623c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    623e:	f000 050f 	and.w	r5, r0, #15
    6242:	e007      	b.n	6254 <_usb_d_find_ep+0x24>
    6244:	3301      	adds	r3, #1
    6246:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6248:	2b0d      	cmp	r3, #13
    624a:	d009      	beq.n	6260 <_usb_d_find_ep+0x30>
    624c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    624e:	7851      	ldrb	r1, [r2, #1]
    6250:	4281      	cmp	r1, r0
    6252:	d007      	beq.n	6264 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    6254:	7814      	ldrb	r4, [r2, #0]
    6256:	2c00      	cmp	r4, #0
    6258:	d1f4      	bne.n	6244 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    625a:	428d      	cmp	r5, r1
    625c:	d1f2      	bne.n	6244 <_usb_d_find_ep+0x14>
    625e:	e001      	b.n	6264 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    6260:	f04f 33ff 	mov.w	r3, #4294967295
}
    6264:	4618      	mov	r0, r3
    6266:	bc30      	pop	{r4, r5}
    6268:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    626a:	2300      	movs	r3, #0
}
    626c:	4618      	mov	r0, r3
    626e:	4770      	bx	lr
    6270:	20000148 	.word	0x20000148

00006274 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    6274:	2000      	movs	r0, #0
    6276:	4770      	bx	lr

00006278 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    6278:	b538      	push	{r3, r4, r5, lr}
    627a:	4604      	mov	r4, r0
    627c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    627e:	4b09      	ldr	r3, [pc, #36]	; (62a4 <usb_d_cb_trans_more+0x2c>)
    6280:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    6282:	4b09      	ldr	r3, [pc, #36]	; (62a8 <usb_d_cb_trans_more+0x30>)
    6284:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    6288:	789b      	ldrb	r3, [r3, #2]
    628a:	2b03      	cmp	r3, #3
    628c:	d001      	beq.n	6292 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    628e:	2000      	movs	r0, #0
}
    6290:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    6292:	4b05      	ldr	r3, [pc, #20]	; (62a8 <usb_d_cb_trans_more+0x30>)
    6294:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6298:	6983      	ldr	r3, [r0, #24]
    629a:	4629      	mov	r1, r5
    629c:	4620      	mov	r0, r4
    629e:	4798      	blx	r3
    62a0:	bd38      	pop	{r3, r4, r5, pc}
    62a2:	bf00      	nop
    62a4:	00006231 	.word	0x00006231
    62a8:	20000148 	.word	0x20000148

000062ac <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    62ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ae:	b085      	sub	sp, #20
    62b0:	4606      	mov	r6, r0
    62b2:	460d      	mov	r5, r1
    62b4:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    62b6:	4b4d      	ldr	r3, [pc, #308]	; (63ec <_usb_d_cb_trans_done+0x140>)
    62b8:	4798      	blx	r3
    62ba:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    62bc:	2d00      	cmp	r5, #0
    62be:	d15b      	bne.n	6378 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    62c0:	4a4b      	ldr	r2, [pc, #300]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    62c2:	0143      	lsls	r3, r0, #5
    62c4:	18d1      	adds	r1, r2, r3
    62c6:	2000      	movs	r0, #0
    62c8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    62ca:	5cd3      	ldrb	r3, [r2, r3]
    62cc:	b173      	cbz	r3, 62ec <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    62ce:	4b48      	ldr	r3, [pc, #288]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    62d0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    62d4:	2201      	movs	r2, #1
    62d6:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    62d8:	4845      	ldr	r0, [pc, #276]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    62da:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    62de:	69c3      	ldr	r3, [r0, #28]
    62e0:	463a      	mov	r2, r7
    62e2:	78c1      	ldrb	r1, [r0, #3]
    62e4:	4630      	mov	r0, r6
    62e6:	4798      	blx	r3
}
    62e8:	b005      	add	sp, #20
    62ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    62ec:	788b      	ldrb	r3, [r1, #2]
    62ee:	2b03      	cmp	r3, #3
    62f0:	d00b      	beq.n	630a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    62f2:	483f      	ldr	r0, [pc, #252]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    62f4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    62f8:	4614      	mov	r4, r2
    62fa:	69d3      	ldr	r3, [r2, #28]
    62fc:	320c      	adds	r2, #12
    62fe:	2100      	movs	r1, #0
    6300:	7860      	ldrb	r0, [r4, #1]
    6302:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6304:	2302      	movs	r3, #2
    6306:	70a3      	strb	r3, [r4, #2]
    6308:	e7ee      	b.n	62e8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    630a:	460b      	mov	r3, r1
    630c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    6310:	460a      	mov	r2, r1
    6312:	69ce      	ldr	r6, [r1, #28]
    6314:	320c      	adds	r2, #12
    6316:	2101      	movs	r1, #1
    6318:	7858      	ldrb	r0, [r3, #1]
    631a:	47b0      	blx	r6
		if (err) {
    631c:	b1a0      	cbz	r0, 6348 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    631e:	4b34      	ldr	r3, [pc, #208]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    6320:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6324:	2205      	movs	r2, #5
    6326:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    6328:	2202      	movs	r2, #2
    632a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    632c:	2d00      	cmp	r5, #0
    632e:	db09      	blt.n	6344 <_usb_d_cb_trans_done+0x98>
    6330:	482f      	ldr	r0, [pc, #188]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    6332:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6336:	7840      	ldrb	r0, [r0, #1]
    6338:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    633c:	2101      	movs	r1, #1
    633e:	4b2d      	ldr	r3, [pc, #180]	; (63f4 <_usb_d_cb_trans_done+0x148>)
    6340:	4798      	blx	r3
    6342:	e7d1      	b.n	62e8 <_usb_d_cb_trans_done+0x3c>
    6344:	7858      	ldrb	r0, [r3, #1]
    6346:	e7f9      	b.n	633c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6348:	4829      	ldr	r0, [pc, #164]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    634a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    634e:	2304      	movs	r3, #4
    6350:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    6352:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    6354:	2200      	movs	r2, #0
    6356:	9201      	str	r2, [sp, #4]
    6358:	9202      	str	r2, [sp, #8]
    635a:	4295      	cmp	r5, r2
    635c:	bfac      	ite	ge
    635e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    6362:	f003 030f 	andlt.w	r3, r3, #15
    6366:	f88d 300c 	strb.w	r3, [sp, #12]
    636a:	2301      	movs	r3, #1
    636c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    6370:	a801      	add	r0, sp, #4
    6372:	4b21      	ldr	r3, [pc, #132]	; (63f8 <_usb_d_cb_trans_done+0x14c>)
    6374:	4798      	blx	r3
    6376:	e7b7      	b.n	62e8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    6378:	2d01      	cmp	r5, #1
    637a:	d00a      	beq.n	6392 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    637c:	2d02      	cmp	r5, #2
    637e:	d01c      	beq.n	63ba <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    6380:	2d03      	cmp	r5, #3
    6382:	d02a      	beq.n	63da <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    6384:	4b1a      	ldr	r3, [pc, #104]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    6386:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    638a:	2206      	movs	r2, #6
    638c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    638e:	70da      	strb	r2, [r3, #3]
    6390:	e7a2      	b.n	62d8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    6392:	4a17      	ldr	r2, [pc, #92]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    6394:	0143      	lsls	r3, r0, #5
    6396:	18d1      	adds	r1, r2, r3
    6398:	2002      	movs	r0, #2
    639a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    639c:	5cd3      	ldrb	r3, [r2, r3]
    639e:	b12b      	cbz	r3, 63ac <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    63a0:	4b13      	ldr	r3, [pc, #76]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    63a2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    63a6:	2205      	movs	r2, #5
    63a8:	709a      	strb	r2, [r3, #2]
    63aa:	e795      	b.n	62d8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    63ac:	460b      	mov	r3, r1
    63ae:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    63b0:	2100      	movs	r1, #0
    63b2:	4630      	mov	r0, r6
    63b4:	4b0f      	ldr	r3, [pc, #60]	; (63f4 <_usb_d_cb_trans_done+0x148>)
    63b6:	4798      	blx	r3
    63b8:	e78e      	b.n	62d8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    63ba:	4a0d      	ldr	r2, [pc, #52]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    63bc:	0143      	lsls	r3, r0, #5
    63be:	18d1      	adds	r1, r2, r3
    63c0:	2004      	movs	r0, #4
    63c2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    63c4:	5cd3      	ldrb	r3, [r2, r3]
    63c6:	b12b      	cbz	r3, 63d4 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    63c8:	4b09      	ldr	r3, [pc, #36]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    63ca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    63ce:	2201      	movs	r2, #1
    63d0:	709a      	strb	r2, [r3, #2]
    63d2:	e781      	b.n	62d8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    63d4:	2302      	movs	r3, #2
    63d6:	708b      	strb	r3, [r1, #2]
			return;
    63d8:	e786      	b.n	62e8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    63da:	4b05      	ldr	r3, [pc, #20]	; (63f0 <_usb_d_cb_trans_done+0x144>)
    63dc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    63e0:	2200      	movs	r2, #0
    63e2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    63e4:	2205      	movs	r2, #5
    63e6:	70da      	strb	r2, [r3, #3]
    63e8:	e776      	b.n	62d8 <_usb_d_cb_trans_done+0x2c>
    63ea:	bf00      	nop
    63ec:	00006231 	.word	0x00006231
    63f0:	20000148 	.word	0x20000148
    63f4:	00009589 	.word	0x00009589
    63f8:	00009731 	.word	0x00009731

000063fc <usb_d_cb_trans_setup>:
{
    63fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6400:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6402:	4b1c      	ldr	r3, [pc, #112]	; (6474 <usb_d_cb_trans_setup+0x78>)
    6404:	4798      	blx	r3
    6406:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    6408:	4c1b      	ldr	r4, [pc, #108]	; (6478 <usb_d_cb_trans_setup+0x7c>)
    640a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    640e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    6410:	4621      	mov	r1, r4
    6412:	4628      	mov	r0, r5
    6414:	4b19      	ldr	r3, [pc, #100]	; (647c <usb_d_cb_trans_setup+0x80>)
    6416:	4798      	blx	r3
	if (n != 8) {
    6418:	b2c0      	uxtb	r0, r0
    641a:	2808      	cmp	r0, #8
    641c:	d009      	beq.n	6432 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    641e:	2101      	movs	r1, #1
    6420:	4628      	mov	r0, r5
    6422:	4c17      	ldr	r4, [pc, #92]	; (6480 <usb_d_cb_trans_setup+0x84>)
    6424:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6426:	2101      	movs	r1, #1
    6428:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    642c:	47a0      	blx	r4
		return;
    642e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6432:	2100      	movs	r1, #0
    6434:	4628      	mov	r0, r5
    6436:	4f12      	ldr	r7, [pc, #72]	; (6480 <usb_d_cb_trans_setup+0x84>)
    6438:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    643a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    643e:	2100      	movs	r1, #0
    6440:	4640      	mov	r0, r8
    6442:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    6444:	4b0c      	ldr	r3, [pc, #48]	; (6478 <usb_d_cb_trans_setup+0x7c>)
    6446:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    644a:	2201      	movs	r2, #1
    644c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    644e:	695b      	ldr	r3, [r3, #20]
    6450:	4621      	mov	r1, r4
    6452:	4628      	mov	r0, r5
    6454:	4798      	blx	r3
    6456:	b108      	cbz	r0, 645c <usb_d_cb_trans_setup+0x60>
    6458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    645c:	4b06      	ldr	r3, [pc, #24]	; (6478 <usb_d_cb_trans_setup+0x7c>)
    645e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    6462:	2305      	movs	r3, #5
    6464:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6466:	2101      	movs	r1, #1
    6468:	4628      	mov	r0, r5
    646a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    646c:	2101      	movs	r1, #1
    646e:	4640      	mov	r0, r8
    6470:	47b8      	blx	r7
    6472:	e7f1      	b.n	6458 <usb_d_cb_trans_setup+0x5c>
    6474:	00006231 	.word	0x00006231
    6478:	20000148 	.word	0x20000148
    647c:	000096d1 	.word	0x000096d1
    6480:	00009589 	.word	0x00009589

00006484 <usb_d_init>:

int32_t usb_d_init(void)
{
    6484:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    6486:	4b11      	ldr	r3, [pc, #68]	; (64cc <usb_d_init+0x48>)
    6488:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    648a:	2800      	cmp	r0, #0
    648c:	db1d      	blt.n	64ca <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    648e:	4c10      	ldr	r4, [pc, #64]	; (64d0 <usb_d_init+0x4c>)
    6490:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    6494:	2100      	movs	r1, #0
    6496:	4620      	mov	r0, r4
    6498:	4b0e      	ldr	r3, [pc, #56]	; (64d4 <usb_d_init+0x50>)
    649a:	4798      	blx	r3
    649c:	4623      	mov	r3, r4
    649e:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    64a2:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    64a4:	4a0c      	ldr	r2, [pc, #48]	; (64d8 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    64a6:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    64a8:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    64aa:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    64ac:	61da      	str	r2, [r3, #28]
    64ae:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    64b0:	4283      	cmp	r3, r0
    64b2:	d1f8      	bne.n	64a6 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    64b4:	4909      	ldr	r1, [pc, #36]	; (64dc <usb_d_init+0x58>)
    64b6:	2000      	movs	r0, #0
    64b8:	4c09      	ldr	r4, [pc, #36]	; (64e0 <usb_d_init+0x5c>)
    64ba:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    64bc:	4909      	ldr	r1, [pc, #36]	; (64e4 <usb_d_init+0x60>)
    64be:	2001      	movs	r0, #1
    64c0:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    64c2:	4909      	ldr	r1, [pc, #36]	; (64e8 <usb_d_init+0x64>)
    64c4:	2002      	movs	r0, #2
    64c6:	47a0      	blx	r4
	return ERR_NONE;
    64c8:	2000      	movs	r0, #0
}
    64ca:	bd10      	pop	{r4, pc}
    64cc:	00008fe1 	.word	0x00008fe1
    64d0:	20000148 	.word	0x20000148
    64d4:	0000a9ef 	.word	0x0000a9ef
    64d8:	00006275 	.word	0x00006275
    64dc:	000063fd 	.word	0x000063fd
    64e0:	00009939 	.word	0x00009939
    64e4:	00006279 	.word	0x00006279
    64e8:	000062ad 	.word	0x000062ad

000064ec <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    64ec:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    64ee:	4b01      	ldr	r3, [pc, #4]	; (64f4 <usb_d_register_callback+0x8>)
    64f0:	4798      	blx	r3
    64f2:	bd08      	pop	{r3, pc}
    64f4:	00009911 	.word	0x00009911

000064f8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    64f8:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    64fa:	4b01      	ldr	r3, [pc, #4]	; (6500 <usb_d_set_address+0x8>)
    64fc:	4798      	blx	r3
    64fe:	bd08      	pop	{r3, pc}
    6500:	000090e9 	.word	0x000090e9

00006504 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    6504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6506:	4606      	mov	r6, r0
    6508:	460c      	mov	r4, r1
    650a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    650c:	4b0f      	ldr	r3, [pc, #60]	; (654c <usb_d_ep_init+0x48>)
    650e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    6510:	2800      	cmp	r0, #0
    6512:	da14      	bge.n	653e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    6514:	20ff      	movs	r0, #255	; 0xff
    6516:	4b0d      	ldr	r3, [pc, #52]	; (654c <usb_d_ep_init+0x48>)
    6518:	4798      	blx	r3
		if (ep_index < 0) {
    651a:	1e05      	subs	r5, r0, #0
    651c:	db12      	blt.n	6544 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    651e:	463a      	mov	r2, r7
    6520:	4621      	mov	r1, r4
    6522:	4630      	mov	r0, r6
    6524:	4b0a      	ldr	r3, [pc, #40]	; (6550 <usb_d_ep_init+0x4c>)
    6526:	4798      	blx	r3
	if (rc < 0) {
    6528:	2800      	cmp	r0, #0
    652a:	db0d      	blt.n	6548 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    652c:	4b09      	ldr	r3, [pc, #36]	; (6554 <usb_d_ep_init+0x50>)
    652e:	0168      	lsls	r0, r5, #5
    6530:	181a      	adds	r2, r3, r0
    6532:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    6534:	f004 0403 	and.w	r4, r4, #3
    6538:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    653a:	2000      	movs	r0, #0
    653c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    653e:	f06f 0013 	mvn.w	r0, #19
    6542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    6544:	f06f 0014 	mvn.w	r0, #20
}
    6548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    654a:	bf00      	nop
    654c:	00006231 	.word	0x00006231
    6550:	000090f5 	.word	0x000090f5
    6554:	20000148 	.word	0x20000148

00006558 <usb_d_ep0_init>:
{
    6558:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    655a:	4602      	mov	r2, r0
    655c:	2100      	movs	r1, #0
    655e:	4608      	mov	r0, r1
    6560:	4b01      	ldr	r3, [pc, #4]	; (6568 <usb_d_ep0_init+0x10>)
    6562:	4798      	blx	r3
}
    6564:	bd08      	pop	{r3, pc}
    6566:	bf00      	nop
    6568:	00006505 	.word	0x00006505

0000656c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    656c:	b538      	push	{r3, r4, r5, lr}
    656e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6570:	4b06      	ldr	r3, [pc, #24]	; (658c <usb_d_ep_deinit+0x20>)
    6572:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    6574:	1e04      	subs	r4, r0, #0
    6576:	db07      	blt.n	6588 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    6578:	4628      	mov	r0, r5
    657a:	4b05      	ldr	r3, [pc, #20]	; (6590 <usb_d_ep_deinit+0x24>)
    657c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    657e:	4805      	ldr	r0, [pc, #20]	; (6594 <usb_d_ep_deinit+0x28>)
    6580:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6584:	23ff      	movs	r3, #255	; 0xff
    6586:	7043      	strb	r3, [r0, #1]
    6588:	bd38      	pop	{r3, r4, r5, pc}
    658a:	bf00      	nop
    658c:	00006231 	.word	0x00006231
    6590:	0000920d 	.word	0x0000920d
    6594:	20000148 	.word	0x20000148

00006598 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    6598:	b538      	push	{r3, r4, r5, lr}
    659a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    659c:	4b0e      	ldr	r3, [pc, #56]	; (65d8 <usb_d_ep_enable+0x40>)
    659e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    65a0:	1e04      	subs	r4, r0, #0
    65a2:	db16      	blt.n	65d2 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    65a4:	0163      	lsls	r3, r4, #5
    65a6:	4a0d      	ldr	r2, [pc, #52]	; (65dc <usb_d_ep_enable+0x44>)
    65a8:	5cd3      	ldrb	r3, [r2, r3]
    65aa:	2b00      	cmp	r3, #0
    65ac:	bf0c      	ite	eq
    65ae:	2202      	moveq	r2, #2
    65b0:	2201      	movne	r2, #1
    65b2:	4b0a      	ldr	r3, [pc, #40]	; (65dc <usb_d_ep_enable+0x44>)
    65b4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    65b8:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    65ba:	4628      	mov	r0, r5
    65bc:	4b08      	ldr	r3, [pc, #32]	; (65e0 <usb_d_ep_enable+0x48>)
    65be:	4798      	blx	r3
	if (rc < 0) {
    65c0:	2800      	cmp	r0, #0
    65c2:	db00      	blt.n	65c6 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    65c4:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    65c6:	4b05      	ldr	r3, [pc, #20]	; (65dc <usb_d_ep_enable+0x44>)
    65c8:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    65cc:	2300      	movs	r3, #0
    65ce:	70a3      	strb	r3, [r4, #2]
    65d0:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    65d2:	f06f 0011 	mvn.w	r0, #17
    65d6:	e7f5      	b.n	65c4 <usb_d_ep_enable+0x2c>
    65d8:	00006231 	.word	0x00006231
    65dc:	20000148 	.word	0x20000148
    65e0:	000092d1 	.word	0x000092d1

000065e4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    65e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65e8:	b086      	sub	sp, #24
    65ea:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    65ec:	7a07      	ldrb	r7, [r0, #8]
    65ee:	4638      	mov	r0, r7
    65f0:	4b3f      	ldr	r3, [pc, #252]	; (66f0 <usb_d_ep_transfer+0x10c>)
    65f2:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    65f4:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    65f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    65fa:	1e06      	subs	r6, r0, #0
    65fc:	db72      	blt.n	66e4 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    65fe:	a804      	add	r0, sp, #16
    6600:	4b3c      	ldr	r3, [pc, #240]	; (66f4 <usb_d_ep_transfer+0x110>)
    6602:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    6604:	4b3c      	ldr	r3, [pc, #240]	; (66f8 <usb_d_ep_transfer+0x114>)
    6606:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    660a:	789b      	ldrb	r3, [r3, #2]
    660c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    6610:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6614:	b2db      	uxtb	r3, r3
    6616:	2b01      	cmp	r3, #1
    6618:	d011      	beq.n	663e <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    661a:	a804      	add	r0, sp, #16
    661c:	4b37      	ldr	r3, [pc, #220]	; (66fc <usb_d_ep_transfer+0x118>)
    661e:	4798      	blx	r3
		switch (state) {
    6620:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6624:	b2db      	uxtb	r3, r3
    6626:	2b05      	cmp	r3, #5
    6628:	d05f      	beq.n	66ea <usb_d_ep_transfer+0x106>
    662a:	2b06      	cmp	r3, #6
    662c:	d023      	beq.n	6676 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    662e:	2b00      	cmp	r3, #0
    6630:	bf0c      	ite	eq
    6632:	f06f 0012 	mvneq.w	r0, #18
    6636:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    6638:	b006      	add	sp, #24
    663a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    663e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 66f8 <usb_d_ep_transfer+0x114>
    6642:	ea4f 1946 	mov.w	r9, r6, lsl #5
    6646:	eb0a 0309 	add.w	r3, sl, r9
    664a:	2203      	movs	r2, #3
    664c:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    664e:	a804      	add	r0, sp, #16
    6650:	4b2a      	ldr	r3, [pc, #168]	; (66fc <usb_d_ep_transfer+0x118>)
    6652:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6654:	f81a 3009 	ldrb.w	r3, [sl, r9]
    6658:	b183      	cbz	r3, 667c <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    665a:	7a22      	ldrb	r2, [r4, #8]
    665c:	3500      	adds	r5, #0
    665e:	bf18      	it	ne
    6660:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    6662:	6823      	ldr	r3, [r4, #0]
    6664:	9301      	str	r3, [sp, #4]
    6666:	f8cd 8008 	str.w	r8, [sp, #8]
    666a:	f017 0f80 	tst.w	r7, #128	; 0x80
    666e:	d119      	bne.n	66a4 <usb_d_ep_transfer+0xc0>
    6670:	f002 030f 	and.w	r3, r2, #15
    6674:	e018      	b.n	66a8 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    6676:	f06f 000f 	mvn.w	r0, #15
    667a:	e7dd      	b.n	6638 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    667c:	4b1e      	ldr	r3, [pc, #120]	; (66f8 <usb_d_ep_transfer+0x114>)
    667e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    6682:	7cda      	ldrb	r2, [r3, #19]
    6684:	7c9d      	ldrb	r5, [r3, #18]
    6686:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    668a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    668c:	b9a5      	cbnz	r5, 66b8 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    668e:	4b1a      	ldr	r3, [pc, #104]	; (66f8 <usb_d_ep_transfer+0x114>)
    6690:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    6694:	2304      	movs	r3, #4
    6696:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    6698:	2300      	movs	r3, #0
			zlp                 = true;
    669a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    669c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    669e:	6821      	ldr	r1, [r4, #0]
    66a0:	9101      	str	r1, [sp, #4]
    66a2:	9302      	str	r3, [sp, #8]
    66a4:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    66a8:	f88d 300c 	strb.w	r3, [sp, #12]
    66ac:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    66b0:	a801      	add	r0, sp, #4
    66b2:	4b13      	ldr	r3, [pc, #76]	; (6700 <usb_d_ep_transfer+0x11c>)
    66b4:	4798      	blx	r3
	return rc;
    66b6:	e7bf      	b.n	6638 <usb_d_ep_transfer+0x54>
    66b8:	4643      	mov	r3, r8
    66ba:	45a8      	cmp	r8, r5
    66bc:	bf28      	it	cs
    66be:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    66c0:	4a0d      	ldr	r2, [pc, #52]	; (66f8 <usb_d_ep_transfer+0x114>)
    66c2:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    66c6:	f996 200c 	ldrsb.w	r2, [r6, #12]
    66ca:	2a00      	cmp	r2, #0
    66cc:	db05      	blt.n	66da <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    66ce:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    66d0:	6821      	ldr	r1, [r4, #0]
    66d2:	9101      	str	r1, [sp, #4]
    66d4:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    66d6:	2500      	movs	r5, #0
    66d8:	e7ca      	b.n	6670 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    66da:	429d      	cmp	r5, r3
    66dc:	bf94      	ite	ls
    66de:	2500      	movls	r5, #0
    66e0:	2501      	movhi	r5, #1
    66e2:	e7db      	b.n	669c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    66e4:	f06f 0011 	mvn.w	r0, #17
    66e8:	e7a6      	b.n	6638 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    66ea:	2002      	movs	r0, #2
    66ec:	e7a4      	b.n	6638 <usb_d_ep_transfer+0x54>
    66ee:	bf00      	nop
    66f0:	00006231 	.word	0x00006231
    66f4:	00005af9 	.word	0x00005af9
    66f8:	20000148 	.word	0x20000148
    66fc:	00005b07 	.word	0x00005b07
    6700:	00009731 	.word	0x00009731

00006704 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    6704:	b538      	push	{r3, r4, r5, lr}
    6706:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    6708:	b141      	cbz	r1, 671c <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    670a:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    670c:	bf0c      	ite	eq
    670e:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    6710:	2102      	movne	r1, #2
    6712:	4b13      	ldr	r3, [pc, #76]	; (6760 <usb_d_ep_halt+0x5c>)
    6714:	4798      	blx	r3
    6716:	4603      	mov	r3, r0
	}
}
    6718:	4618      	mov	r0, r3
    671a:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    671c:	4b11      	ldr	r3, [pc, #68]	; (6764 <usb_d_ep_halt+0x60>)
    671e:	4798      	blx	r3
	if (ep_index < 0) {
    6720:	1e05      	subs	r5, r0, #0
    6722:	db19      	blt.n	6758 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    6724:	2102      	movs	r1, #2
    6726:	4620      	mov	r0, r4
    6728:	4b0d      	ldr	r3, [pc, #52]	; (6760 <usb_d_ep_halt+0x5c>)
    672a:	4798      	blx	r3
    672c:	4603      	mov	r3, r0
    672e:	2800      	cmp	r0, #0
    6730:	d0f2      	beq.n	6718 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6732:	2100      	movs	r1, #0
    6734:	4620      	mov	r0, r4
    6736:	4b0a      	ldr	r3, [pc, #40]	; (6760 <usb_d_ep_halt+0x5c>)
    6738:	4798      	blx	r3
		if (rc < 0) {
    673a:	1e03      	subs	r3, r0, #0
    673c:	dbec      	blt.n	6718 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    673e:	4b0a      	ldr	r3, [pc, #40]	; (6768 <usb_d_ep_halt+0x64>)
    6740:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    6744:	2201      	movs	r2, #1
    6746:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    6748:	2103      	movs	r1, #3
    674a:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    674c:	69db      	ldr	r3, [r3, #28]
    674e:	2200      	movs	r2, #0
    6750:	4620      	mov	r0, r4
    6752:	4798      	blx	r3
	return ERR_NONE;
    6754:	2300      	movs	r3, #0
    6756:	e7df      	b.n	6718 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    6758:	f06f 0311 	mvn.w	r3, #17
    675c:	e7dc      	b.n	6718 <usb_d_ep_halt+0x14>
    675e:	bf00      	nop
    6760:	00009589 	.word	0x00009589
    6764:	00006231 	.word	0x00006231
    6768:	20000148 	.word	0x20000148

0000676c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    676c:	b538      	push	{r3, r4, r5, lr}
    676e:	460d      	mov	r5, r1
    6770:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    6772:	4b0e      	ldr	r3, [pc, #56]	; (67ac <usb_d_ep_register_callback+0x40>)
    6774:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    6776:	4b0e      	ldr	r3, [pc, #56]	; (67b0 <usb_d_ep_register_callback+0x44>)
    6778:	2c00      	cmp	r4, #0
    677a:	bf08      	it	eq
    677c:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    677e:	2800      	cmp	r0, #0
    6780:	db13      	blt.n	67aa <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    6782:	2d01      	cmp	r5, #1
    6784:	d008      	beq.n	6798 <usb_d_ep_register_callback+0x2c>
    6786:	b115      	cbz	r5, 678e <usb_d_ep_register_callback+0x22>
    6788:	2d02      	cmp	r5, #2
    678a:	d00a      	beq.n	67a2 <usb_d_ep_register_callback+0x36>
    678c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    678e:	4b09      	ldr	r3, [pc, #36]	; (67b4 <usb_d_ep_register_callback+0x48>)
    6790:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6794:	6144      	str	r4, [r0, #20]
		break;
    6796:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    6798:	4b06      	ldr	r3, [pc, #24]	; (67b4 <usb_d_ep_register_callback+0x48>)
    679a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    679e:	6184      	str	r4, [r0, #24]
		break;
    67a0:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    67a2:	4b04      	ldr	r3, [pc, #16]	; (67b4 <usb_d_ep_register_callback+0x48>)
    67a4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    67a8:	61c4      	str	r4, [r0, #28]
    67aa:	bd38      	pop	{r3, r4, r5, pc}
    67ac:	00006231 	.word	0x00006231
    67b0:	00006275 	.word	0x00006275
    67b4:	20000148 	.word	0x20000148

000067b8 <list_insert_as_head>:
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
	ASSERT(!is_list_element(list, element));

	((struct list_element *)element)->next = list->head;
    67b8:	6803      	ldr	r3, [r0, #0]
    67ba:	600b      	str	r3, [r1, #0]
	list->head                             = (struct list_element *)element;
    67bc:	6001      	str	r1, [r0, #0]
    67be:	4770      	bx	lr

000067c0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    67c0:	6803      	ldr	r3, [r0, #0]
    67c2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    67c4:	6001      	str	r1, [r0, #0]
    67c6:	4770      	bx	lr

000067c8 <list_insert_at_end>:
/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
	struct list_element *it = list->head;
    67c8:	6802      	ldr	r2, [r0, #0]

	ASSERT(!is_list_element(list, element));

	if (!list->head) {
    67ca:	b922      	cbnz	r2, 67d6 <list_insert_at_end+0xe>
		list->head                             = (struct list_element *)element;
    67cc:	6001      	str	r1, [r0, #0]
		((struct list_element *)element)->next = NULL;
    67ce:	2300      	movs	r3, #0
    67d0:	600b      	str	r3, [r1, #0]
		return;
    67d2:	4770      	bx	lr
	}

	while (it->next) {
		it = it->next;
    67d4:	461a      	mov	r2, r3
	while (it->next) {
    67d6:	6813      	ldr	r3, [r2, #0]
    67d8:	2b00      	cmp	r3, #0
    67da:	d1fb      	bne.n	67d4 <list_insert_at_end+0xc>
	}
	it->next                               = (struct list_element *)element;
    67dc:	6011      	str	r1, [r2, #0]
	((struct list_element *)element)->next = NULL;
    67de:	600b      	str	r3, [r1, #0]
    67e0:	4770      	bx	lr

000067e2 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    67e2:	6803      	ldr	r3, [r0, #0]
    67e4:	b10b      	cbz	r3, 67ea <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    67e6:	681a      	ldr	r2, [r3, #0]
    67e8:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    67ea:	4618      	mov	r0, r3
    67ec:	4770      	bx	lr

000067ee <ringbuffer_init>:
	ASSERT(rb && buf && size);

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    67ee:	1e53      	subs	r3, r2, #1
    67f0:	421a      	tst	r2, r3
    67f2:	d106      	bne.n	6802 <ringbuffer_init+0x14>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    67f4:	6043      	str	r3, [r0, #4]
	rb->read_index  = 0;
    67f6:	2300      	movs	r3, #0
    67f8:	6083      	str	r3, [r0, #8]
	rb->write_index = rb->read_index;
    67fa:	60c3      	str	r3, [r0, #12]
	rb->buf         = (uint8_t *)buf;
    67fc:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
    67fe:	4618      	mov	r0, r3
    6800:	4770      	bx	lr
		return ERR_INVALID_ARG;
    6802:	f06f 000c 	mvn.w	r0, #12
}
    6806:	4770      	bx	lr

00006808 <ringbuffer_get>:
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
	ASSERT(rb && data);

	if (rb->write_index != rb->read_index) {
    6808:	6883      	ldr	r3, [r0, #8]
    680a:	68c2      	ldr	r2, [r0, #12]
    680c:	429a      	cmp	r2, r3
    680e:	d009      	beq.n	6824 <ringbuffer_get+0x1c>
		*data = rb->buf[rb->read_index & rb->size];
    6810:	6842      	ldr	r2, [r0, #4]
    6812:	4013      	ands	r3, r2
    6814:	6802      	ldr	r2, [r0, #0]
    6816:	5cd3      	ldrb	r3, [r2, r3]
    6818:	700b      	strb	r3, [r1, #0]
		rb->read_index++;
    681a:	6883      	ldr	r3, [r0, #8]
    681c:	3301      	adds	r3, #1
    681e:	6083      	str	r3, [r0, #8]
		return ERR_NONE;
    6820:	2000      	movs	r0, #0
    6822:	4770      	bx	lr
	}

	return ERR_NOT_FOUND;
    6824:	f06f 0009 	mvn.w	r0, #9
}
    6828:	4770      	bx	lr

0000682a <ringbuffer_put>:
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
	ASSERT(rb);

	rb->buf[rb->write_index & rb->size] = data;
    682a:	68c3      	ldr	r3, [r0, #12]
    682c:	6842      	ldr	r2, [r0, #4]
    682e:	4013      	ands	r3, r2
    6830:	6802      	ldr	r2, [r0, #0]
    6832:	54d1      	strb	r1, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    6834:	68c3      	ldr	r3, [r0, #12]
    6836:	6841      	ldr	r1, [r0, #4]
    6838:	6882      	ldr	r2, [r0, #8]
    683a:	1a9a      	subs	r2, r3, r2
    683c:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    683e:	bf84      	itt	hi
    6840:	1a59      	subhi	r1, r3, r1
    6842:	6081      	strhi	r1, [r0, #8]
	}

	rb->write_index++;
    6844:	3301      	adds	r3, #1
    6846:	60c3      	str	r3, [r0, #12]

	return ERR_NONE;
}
    6848:	2000      	movs	r0, #0
    684a:	4770      	bx	lr

0000684c <ringbuffer_num>:
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
	ASSERT(rb);

	return rb->write_index - rb->read_index;
    684c:	68c2      	ldr	r2, [r0, #12]
    684e:	6880      	ldr	r0, [r0, #8]
}
    6850:	1a10      	subs	r0, r2, r0
    6852:	4770      	bx	lr

00006854 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    6854:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    6856:	4a06      	ldr	r2, [pc, #24]	; (6870 <_sbrk+0x1c>)
    6858:	6812      	ldr	r2, [r2, #0]
    685a:	b122      	cbz	r2, 6866 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    685c:	4a04      	ldr	r2, [pc, #16]	; (6870 <_sbrk+0x1c>)
    685e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6860:	4403      	add	r3, r0
    6862:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    6864:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6866:	4903      	ldr	r1, [pc, #12]	; (6874 <_sbrk+0x20>)
    6868:	4a01      	ldr	r2, [pc, #4]	; (6870 <_sbrk+0x1c>)
    686a:	6011      	str	r1, [r2, #0]
    686c:	e7f6      	b.n	685c <_sbrk+0x8>
    686e:	bf00      	nop
    6870:	200002e8 	.word	0x200002e8
    6874:	20013508 	.word	0x20013508

00006878 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    6878:	f04f 30ff 	mov.w	r0, #4294967295
    687c:	4770      	bx	lr

0000687e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    687e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    6882:	604b      	str	r3, [r1, #4]

	return 0;
}
    6884:	2000      	movs	r0, #0
    6886:	4770      	bx	lr

00006888 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    6888:	2001      	movs	r0, #1
    688a:	4770      	bx	lr

0000688c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    688c:	2000      	movs	r0, #0
    688e:	4770      	bx	lr

00006890 <_adc_get_regs>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    6890:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    6894:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
{
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
		if (_adcs[i].number == n) {
    6898:	f3c0 2087 	ubfx	r0, r0, #10, #8
		}
	}

	ASSERT(false);
	return 0;
}
    689c:	2801      	cmp	r0, #1
    689e:	bf14      	ite	ne
    68a0:	2000      	movne	r0, #0
    68a2:	2001      	moveq	r0, #1
    68a4:	4770      	bx	lr
	...

000068a8 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    68a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    68aa:	f013 0f01 	tst.w	r3, #1
    68ae:	d11b      	bne.n	68e8 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    68b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    68b2:	f013 0f03 	tst.w	r3, #3
    68b6:	d1fb      	bne.n	68b0 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    68b8:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    68ba:	f013 0f02 	tst.w	r3, #2
    68be:	d00d      	beq.n	68dc <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    68c0:	8803      	ldrh	r3, [r0, #0]
    68c2:	f023 0302 	bic.w	r3, r3, #2
    68c6:	041b      	lsls	r3, r3, #16
    68c8:	0c1b      	lsrs	r3, r3, #16
    68ca:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    68cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    68ce:	f013 0f03 	tst.w	r3, #3
    68d2:	d1fb      	bne.n	68cc <_adc_init+0x24>
    68d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    68d6:	f013 0f02 	tst.w	r3, #2
    68da:	d1fb      	bne.n	68d4 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    68dc:	2301      	movs	r3, #1
    68de:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    68e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    68e2:	f013 0f03 	tst.w	r3, #3
    68e6:	d1fb      	bne.n	68e0 <_adc_init+0x38>
    68e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    68ea:	f013 0f01 	tst.w	r3, #1
    68ee:	d1fb      	bne.n	68e8 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    68f0:	2316      	movs	r3, #22
    68f2:	4a37      	ldr	r2, [pc, #220]	; (69d0 <_adc_init+0x128>)
    68f4:	fb03 2301 	mla	r3, r3, r1, r2
    68f8:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    68fa:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    68fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    68fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6902:	2b00      	cmp	r3, #0
    6904:	d1fa      	bne.n	68fc <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    6906:	2316      	movs	r3, #22
    6908:	4a31      	ldr	r2, [pc, #196]	; (69d0 <_adc_init+0x128>)
    690a:	fb03 2301 	mla	r3, r3, r1, r2
    690e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    6910:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6912:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6914:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6918:	2b00      	cmp	r3, #0
    691a:	d1fa      	bne.n	6912 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    691c:	2316      	movs	r3, #22
    691e:	4a2c      	ldr	r2, [pc, #176]	; (69d0 <_adc_init+0x128>)
    6920:	fb03 2301 	mla	r3, r3, r1, r2
    6924:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    6926:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    6928:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    692a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    692c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    692e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6932:	2b00      	cmp	r3, #0
    6934:	d1fa      	bne.n	692c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    6936:	2316      	movs	r3, #22
    6938:	4a25      	ldr	r2, [pc, #148]	; (69d0 <_adc_init+0x128>)
    693a:	fb03 2301 	mla	r3, r3, r1, r2
    693e:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    6940:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6942:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6944:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6948:	2b00      	cmp	r3, #0
    694a:	d1fa      	bne.n	6942 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    694c:	2316      	movs	r3, #22
    694e:	4a20      	ldr	r2, [pc, #128]	; (69d0 <_adc_init+0x128>)
    6950:	fb03 2301 	mla	r3, r3, r1, r2
    6954:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    6956:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6958:	6b03      	ldr	r3, [r0, #48]	; 0x30
    695a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    695e:	2b00      	cmp	r3, #0
    6960:	d1fa      	bne.n	6958 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    6962:	2316      	movs	r3, #22
    6964:	4a1a      	ldr	r2, [pc, #104]	; (69d0 <_adc_init+0x128>)
    6966:	fb03 2301 	mla	r3, r3, r1, r2
    696a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    696c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    696e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6970:	f013 0f80 	tst.w	r3, #128	; 0x80
    6974:	d1fb      	bne.n	696e <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    6976:	2316      	movs	r3, #22
    6978:	4a15      	ldr	r2, [pc, #84]	; (69d0 <_adc_init+0x128>)
    697a:	fb03 2301 	mla	r3, r3, r1, r2
    697e:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    6980:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6982:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6984:	f413 7f80 	tst.w	r3, #256	; 0x100
    6988:	d1fb      	bne.n	6982 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    698a:	2316      	movs	r3, #22
    698c:	4a10      	ldr	r2, [pc, #64]	; (69d0 <_adc_init+0x128>)
    698e:	fb03 2301 	mla	r3, r3, r1, r2
    6992:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    6994:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6996:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6998:	f413 7f00 	tst.w	r3, #512	; 0x200
    699c:	d1fb      	bne.n	6996 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    699e:	2316      	movs	r3, #22
    69a0:	4a0b      	ldr	r2, [pc, #44]	; (69d0 <_adc_init+0x128>)
    69a2:	fb03 2301 	mla	r3, r3, r1, r2
    69a6:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    69a8:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    69aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    69ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
    69b0:	d1fb      	bne.n	69aa <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    69b2:	2216      	movs	r2, #22
    69b4:	4b06      	ldr	r3, [pc, #24]	; (69d0 <_adc_init+0x128>)
    69b6:	fb02 3101 	mla	r1, r2, r1, r3
    69ba:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    69bc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    69be:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    69c0:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    69c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    69c4:	f013 0f03 	tst.w	r3, #3
    69c8:	d1fb      	bne.n	69c2 <_adc_init+0x11a>

	return ERR_NONE;
}
    69ca:	2000      	movs	r0, #0
    69cc:	4770      	bx	lr
    69ce:	bf00      	nop
    69d0:	0000bad8 	.word	0x0000bad8

000069d4 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    69d4:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    69d6:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    69d8:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    69dc:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    69e0:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    69e2:	f013 0f01 	tst.w	r3, #1
    69e6:	d106      	bne.n	69f6 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    69e8:	f013 0f02 	tst.w	r3, #2
    69ec:	d10d      	bne.n	6a0a <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    69ee:	f013 0f04 	tst.w	r3, #4
    69f2:	d111      	bne.n	6a18 <_adc_interrupt_handler+0x44>
    69f4:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    69f6:	2301      	movs	r3, #1
    69f8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    69fc:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    6a00:	6883      	ldr	r3, [r0, #8]
    6a02:	b292      	uxth	r2, r2
    6a04:	2100      	movs	r1, #0
    6a06:	4798      	blx	r3
    6a08:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    6a0a:	2302      	movs	r3, #2
    6a0c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    6a10:	6843      	ldr	r3, [r0, #4]
    6a12:	2100      	movs	r1, #0
    6a14:	4798      	blx	r3
    6a16:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    6a18:	2304      	movs	r3, #4
    6a1a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    6a1e:	6803      	ldr	r3, [r0, #0]
    6a20:	2100      	movs	r1, #0
    6a22:	4798      	blx	r3
	}
}
    6a24:	e7e6      	b.n	69f4 <_adc_interrupt_handler+0x20>

00006a26 <_adc_get_irq_num>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    6a26:	6940      	ldr	r0, [r0, #20]
    6a28:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    6a2c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    6a30:	0a80      	lsrs	r0, r0, #10
	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    6a32:	0040      	lsls	r0, r0, #1
    6a34:	3076      	adds	r0, #118	; 0x76
}
    6a36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6a3a:	4770      	bx	lr

00006a3c <_adc_async_init>:
{
    6a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a40:	4605      	mov	r5, r0
    6a42:	460c      	mov	r4, r1
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    6a44:	4608      	mov	r0, r1
    6a46:	4b37      	ldr	r3, [pc, #220]	; (6b24 <_adc_async_init+0xe8>)
    6a48:	4798      	blx	r3
    6a4a:	4601      	mov	r1, r0
    6a4c:	4620      	mov	r0, r4
    6a4e:	4b36      	ldr	r3, [pc, #216]	; (6b28 <_adc_async_init+0xec>)
    6a50:	4798      	blx	r3
	if (init_status) {
    6a52:	4606      	mov	r6, r0
    6a54:	b110      	cbz	r0, 6a5c <_adc_async_init+0x20>
}
    6a56:	4630      	mov	r0, r6
    6a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    6a5c:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    6a5e:	4b33      	ldr	r3, [pc, #204]	; (6b2c <_adc_async_init+0xf0>)
    6a60:	429c      	cmp	r4, r3
    6a62:	d05c      	beq.n	6b1e <_adc_async_init+0xe2>
	if (hw == ADC1) {
    6a64:	4b32      	ldr	r3, [pc, #200]	; (6b30 <_adc_async_init+0xf4>)
    6a66:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    6a68:	bf04      	itt	eq
    6a6a:	4b32      	ldreq	r3, [pc, #200]	; (6b34 <_adc_async_init+0xf8>)
    6a6c:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    6a6e:	4628      	mov	r0, r5
    6a70:	4f31      	ldr	r7, [pc, #196]	; (6b38 <_adc_async_init+0xfc>)
    6a72:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6a74:	0943      	lsrs	r3, r0, #5
    6a76:	f000 001f 	and.w	r0, r0, #31
    6a7a:	2401      	movs	r4, #1
    6a7c:	fa04 f000 	lsl.w	r0, r4, r0
    6a80:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 6b3c <_adc_async_init+0x100>
    6a84:	3320      	adds	r3, #32
    6a86:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a8e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    6a92:	4628      	mov	r0, r5
    6a94:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6a96:	0943      	lsrs	r3, r0, #5
    6a98:	f000 001f 	and.w	r0, r0, #31
    6a9c:	fa04 f000 	lsl.w	r0, r4, r0
    6aa0:	3360      	adds	r3, #96	; 0x60
    6aa2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    6aa6:	4628      	mov	r0, r5
    6aa8:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6aaa:	0943      	lsrs	r3, r0, #5
    6aac:	f000 001f 	and.w	r0, r0, #31
    6ab0:	4084      	lsls	r4, r0
    6ab2:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    6ab6:	4628      	mov	r0, r5
    6ab8:	47b8      	blx	r7
    6aba:	3001      	adds	r0, #1
    6abc:	b280      	uxth	r0, r0
    6abe:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6ac0:	2b00      	cmp	r3, #0
    6ac2:	dbc8      	blt.n	6a56 <_adc_async_init+0x1a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ac4:	095b      	lsrs	r3, r3, #5
    6ac6:	f000 001f 	and.w	r0, r0, #31
    6aca:	2201      	movs	r2, #1
    6acc:	fa02 f000 	lsl.w	r0, r2, r0
    6ad0:	3320      	adds	r3, #32
    6ad2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6ad6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6ada:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    6ade:	4628      	mov	r0, r5
    6ae0:	47b8      	blx	r7
    6ae2:	3001      	adds	r0, #1
    6ae4:	b280      	uxth	r0, r0
    6ae6:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6ae8:	2b00      	cmp	r3, #0
    6aea:	dbb4      	blt.n	6a56 <_adc_async_init+0x1a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6aec:	095b      	lsrs	r3, r3, #5
    6aee:	f000 001f 	and.w	r0, r0, #31
    6af2:	2201      	movs	r2, #1
    6af4:	fa02 f000 	lsl.w	r0, r2, r0
    6af8:	3360      	adds	r3, #96	; 0x60
    6afa:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    6afe:	4628      	mov	r0, r5
    6b00:	47b8      	blx	r7
    6b02:	3001      	adds	r0, #1
    6b04:	b280      	uxth	r0, r0
    6b06:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6b08:	2b00      	cmp	r3, #0
    6b0a:	dba4      	blt.n	6a56 <_adc_async_init+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b0c:	095b      	lsrs	r3, r3, #5
    6b0e:	f000 001f 	and.w	r0, r0, #31
    6b12:	2201      	movs	r2, #1
    6b14:	fa02 f000 	lsl.w	r0, r2, r0
    6b18:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    6b1c:	e79b      	b.n	6a56 <_adc_async_init+0x1a>
		_adc0_dev = dev;
    6b1e:	4b05      	ldr	r3, [pc, #20]	; (6b34 <_adc_async_init+0xf8>)
    6b20:	601d      	str	r5, [r3, #0]
    6b22:	e7a4      	b.n	6a6e <_adc_async_init+0x32>
    6b24:	00006891 	.word	0x00006891
    6b28:	000068a9 	.word	0x000068a9
    6b2c:	43001c00 	.word	0x43001c00
    6b30:	43002000 	.word	0x43002000
    6b34:	200002ec 	.word	0x200002ec
    6b38:	00006a27 	.word	0x00006a27
    6b3c:	e000e100 	.word	0xe000e100

00006b40 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    6b40:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    6b42:	88db      	ldrh	r3, [r3, #6]
    6b44:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    6b48:	2b03      	cmp	r3, #3
}
    6b4a:	bf0c      	ite	eq
    6b4c:	2001      	moveq	r0, #1
    6b4e:	2002      	movne	r0, #2
    6b50:	4770      	bx	lr
	...

00006b54 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    6b54:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    6b56:	4b02      	ldr	r3, [pc, #8]	; (6b60 <ADC0_0_Handler+0xc>)
    6b58:	6818      	ldr	r0, [r3, #0]
    6b5a:	4b02      	ldr	r3, [pc, #8]	; (6b64 <ADC0_0_Handler+0x10>)
    6b5c:	4798      	blx	r3
    6b5e:	bd08      	pop	{r3, pc}
    6b60:	200002ec 	.word	0x200002ec
    6b64:	000069d5 	.word	0x000069d5

00006b68 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    6b68:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    6b6a:	4b02      	ldr	r3, [pc, #8]	; (6b74 <ADC0_1_Handler+0xc>)
    6b6c:	6818      	ldr	r0, [r3, #0]
    6b6e:	4b02      	ldr	r3, [pc, #8]	; (6b78 <ADC0_1_Handler+0x10>)
    6b70:	4798      	blx	r3
    6b72:	bd08      	pop	{r3, pc}
    6b74:	200002ec 	.word	0x200002ec
    6b78:	000069d5 	.word	0x000069d5

00006b7c <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    6b7c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    6b7e:	4b02      	ldr	r3, [pc, #8]	; (6b88 <ADC1_0_Handler+0xc>)
    6b80:	6858      	ldr	r0, [r3, #4]
    6b82:	4b02      	ldr	r3, [pc, #8]	; (6b8c <ADC1_0_Handler+0x10>)
    6b84:	4798      	blx	r3
    6b86:	bd08      	pop	{r3, pc}
    6b88:	200002ec 	.word	0x200002ec
    6b8c:	000069d5 	.word	0x000069d5

00006b90 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    6b90:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    6b92:	4b02      	ldr	r3, [pc, #8]	; (6b9c <ADC1_1_Handler+0xc>)
    6b94:	6858      	ldr	r0, [r3, #4]
    6b96:	4b02      	ldr	r3, [pc, #8]	; (6ba0 <ADC1_1_Handler+0x10>)
    6b98:	4798      	blx	r3
    6b9a:	bd08      	pop	{r3, pc}
    6b9c:	200002ec 	.word	0x200002ec
    6ba0:	000069d5 	.word	0x000069d5

00006ba4 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ba4:	0943      	lsrs	r3, r0, #5
    6ba6:	f000 001f 	and.w	r0, r0, #31
    6baa:	2201      	movs	r2, #1
    6bac:	fa02 f000 	lsl.w	r0, r2, r0
    6bb0:	3340      	adds	r3, #64	; 0x40
    6bb2:	4a02      	ldr	r2, [pc, #8]	; (6bbc <_irq_set+0x18>)
    6bb4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6bb8:	4770      	bx	lr
    6bba:	bf00      	nop
    6bbc:	e000e100 	.word	0xe000e100

00006bc0 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6bc0:	4b01      	ldr	r3, [pc, #4]	; (6bc8 <_get_cycles_for_ms+0x8>)
    6bc2:	fb03 f000 	mul.w	r0, r3, r0
    6bc6:	4770      	bx	lr
    6bc8:	0001d4c0 	.word	0x0001d4c0

00006bcc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6bcc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6bce:	4a0e      	ldr	r2, [pc, #56]	; (6c08 <_init_chip+0x3c>)
    6bd0:	8813      	ldrh	r3, [r2, #0]
    6bd2:	b29b      	uxth	r3, r3
    6bd4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    6bd8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    6bda:	4b0c      	ldr	r3, [pc, #48]	; (6c0c <_init_chip+0x40>)
    6bdc:	4798      	blx	r3
	_oscctrl_init_sources();
    6bde:	4b0c      	ldr	r3, [pc, #48]	; (6c10 <_init_chip+0x44>)
    6be0:	4798      	blx	r3
	_mclk_init();
    6be2:	4b0c      	ldr	r3, [pc, #48]	; (6c14 <_init_chip+0x48>)
    6be4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6be6:	2004      	movs	r0, #4
    6be8:	4c0b      	ldr	r4, [pc, #44]	; (6c18 <_init_chip+0x4c>)
    6bea:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    6bec:	4b0b      	ldr	r3, [pc, #44]	; (6c1c <_init_chip+0x50>)
    6bee:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6bf0:	f640 70fb 	movw	r0, #4091	; 0xffb
    6bf4:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    6bf6:	4a0a      	ldr	r2, [pc, #40]	; (6c20 <_init_chip+0x54>)
    6bf8:	6913      	ldr	r3, [r2, #16]
    6bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6bfe:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    6c00:	4b08      	ldr	r3, [pc, #32]	; (6c24 <_init_chip+0x58>)
    6c02:	4798      	blx	r3
    6c04:	bd10      	pop	{r4, pc}
    6c06:	bf00      	nop
    6c08:	41004000 	.word	0x41004000
    6c0c:	0000707d 	.word	0x0000707d
    6c10:	00007091 	.word	0x00007091
    6c14:	00006fd1 	.word	0x00006fd1
    6c18:	00006f59 	.word	0x00006f59
    6c1c:	00007095 	.word	0x00007095
    6c20:	40000800 	.word	0x40000800
    6c24:	00006c9d 	.word	0x00006c9d

00006c28 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    6c28:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    6c2a:	4a1a      	ldr	r2, [pc, #104]	; (6c94 <_dmac_handler+0x6c>)
    6c2c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    6c2e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    6c32:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    6c36:	4818      	ldr	r0, [pc, #96]	; (6c98 <_dmac_handler+0x70>)
    6c38:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    6c3c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6c40:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    6c44:	f012 0f01 	tst.w	r2, #1
    6c48:	d10a      	bne.n	6c60 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    6c4a:	011a      	lsls	r2, r3, #4
    6c4c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6c50:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6c54:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    6c58:	f012 0f02 	tst.w	r2, #2
    6c5c:	d10b      	bne.n	6c76 <_dmac_handler+0x4e>
    6c5e:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    6c60:	011a      	lsls	r2, r3, #4
    6c62:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6c66:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6c6a:	2101      	movs	r1, #1
    6c6c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    6c70:	6843      	ldr	r3, [r0, #4]
    6c72:	4798      	blx	r3
    6c74:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    6c76:	011a      	lsls	r2, r3, #4
    6c78:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6c7c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6c80:	2102      	movs	r1, #2
    6c82:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    6c86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6c8a:	4a03      	ldr	r2, [pc, #12]	; (6c98 <_dmac_handler+0x70>)
    6c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c90:	4798      	blx	r3
	}
}
    6c92:	e7e4      	b.n	6c5e <_dmac_handler+0x36>
    6c94:	4100a000 	.word	0x4100a000
    6c98:	200002f4 	.word	0x200002f4

00006c9c <_dma_init>:
{
    6c9c:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    6c9e:	4a32      	ldr	r2, [pc, #200]	; (6d68 <_dma_init+0xcc>)
    6ca0:	8813      	ldrh	r3, [r2, #0]
    6ca2:	f023 0302 	bic.w	r3, r3, #2
    6ca6:	041b      	lsls	r3, r3, #16
    6ca8:	0c1b      	lsrs	r3, r3, #16
    6caa:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    6cac:	8853      	ldrh	r3, [r2, #2]
    6cae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    6cb2:	041b      	lsls	r3, r3, #16
    6cb4:	0c1b      	lsrs	r3, r3, #16
    6cb6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    6cb8:	8813      	ldrh	r3, [r2, #0]
    6cba:	b29b      	uxth	r3, r3
    6cbc:	f043 0301 	orr.w	r3, r3, #1
    6cc0:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    6cc2:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    6cc4:	f013 0f01 	tst.w	r3, #1
    6cc8:	d1fb      	bne.n	6cc2 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    6cca:	4b27      	ldr	r3, [pc, #156]	; (6d68 <_dma_init+0xcc>)
    6ccc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    6cd0:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    6cd2:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    6cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    6cd8:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    6cdc:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    6cde:	2100      	movs	r1, #0
    6ce0:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    6ce2:	4a22      	ldr	r2, [pc, #136]	; (6d6c <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    6ce4:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    6ce6:	4a22      	ldr	r2, [pc, #136]	; (6d70 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    6ce8:	639a      	str	r2, [r3, #56]	; 0x38
    6cea:	4b22      	ldr	r3, [pc, #136]	; (6d74 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6cec:	4c1f      	ldr	r4, [pc, #124]	; (6d6c <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6cee:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    6cf0:	681d      	ldr	r5, [r3, #0]
    6cf2:	0108      	lsls	r0, r1, #4
    6cf4:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    6cf8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    6cfc:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    6cfe:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    6d00:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    6d04:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    6d06:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    6d0a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6d0c:	1822      	adds	r2, r4, r0
    6d0e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6d10:	60d6      	str	r6, [r2, #12]
    6d12:	3101      	adds	r1, #1
    6d14:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    6d16:	2920      	cmp	r1, #32
    6d18:	d1ea      	bne.n	6cf0 <_dma_init+0x54>
    6d1a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d1c:	2001      	movs	r0, #1
    6d1e:	4916      	ldr	r1, [pc, #88]	; (6d78 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    6d20:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    6d22:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6d26:	d00b      	beq.n	6d40 <_dma_init+0xa4>
    6d28:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    6d2a:	2b24      	cmp	r3, #36	; 0x24
    6d2c:	d1f8      	bne.n	6d20 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    6d2e:	4a0e      	ldr	r2, [pc, #56]	; (6d68 <_dma_init+0xcc>)
    6d30:	8813      	ldrh	r3, [r2, #0]
    6d32:	b29b      	uxth	r3, r3
    6d34:	f043 0302 	orr.w	r3, r3, #2
    6d38:	8013      	strh	r3, [r2, #0]
}
    6d3a:	2000      	movs	r0, #0
    6d3c:	bc70      	pop	{r4, r5, r6}
    6d3e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d40:	095c      	lsrs	r4, r3, #5
    6d42:	f002 021f 	and.w	r2, r2, #31
    6d46:	fa00 f202 	lsl.w	r2, r0, r2
    6d4a:	f104 0520 	add.w	r5, r4, #32
    6d4e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6d52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d56:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d5a:	f104 0560 	add.w	r5, r4, #96	; 0x60
    6d5e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d62:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    6d66:	e7df      	b.n	6d28 <_dma_init+0x8c>
    6d68:	4100a000 	.word	0x4100a000
    6d6c:	200030f0 	.word	0x200030f0
    6d70:	200032f0 	.word	0x200032f0
    6d74:	0000bb04 	.word	0x0000bb04
    6d78:	e000e100 	.word	0xe000e100

00006d7c <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    6d7c:	b991      	cbnz	r1, 6da4 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    6d7e:	b942      	cbnz	r2, 6d92 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    6d80:	0100      	lsls	r0, r0, #4
    6d82:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6d86:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6d8a:	2302      	movs	r3, #2
    6d8c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    6d90:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    6d92:	0100      	lsls	r0, r0, #4
    6d94:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6d98:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6d9c:	2302      	movs	r3, #2
    6d9e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    6da2:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    6da4:	2901      	cmp	r1, #1
    6da6:	d000      	beq.n	6daa <_dma_set_irq_state+0x2e>
    6da8:	4770      	bx	lr
	if (value == 0x0) {
    6daa:	b142      	cbz	r2, 6dbe <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    6dac:	0100      	lsls	r0, r0, #4
    6dae:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6db2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6db6:	2301      	movs	r3, #1
    6db8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    6dbc:	e7f4      	b.n	6da8 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    6dbe:	0100      	lsls	r0, r0, #4
    6dc0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6dc4:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6dc8:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    6dcc:	4770      	bx	lr
	...

00006dd0 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6dd0:	4b02      	ldr	r3, [pc, #8]	; (6ddc <_dma_set_destination_address+0xc>)
    6dd2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6dd6:	6081      	str	r1, [r0, #8]
}
    6dd8:	2000      	movs	r0, #0
    6dda:	4770      	bx	lr
    6ddc:	200030f0 	.word	0x200030f0

00006de0 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6de0:	4b02      	ldr	r3, [pc, #8]	; (6dec <_dma_set_source_address+0xc>)
    6de2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6de6:	6041      	str	r1, [r0, #4]
}
    6de8:	2000      	movs	r0, #0
    6dea:	4770      	bx	lr
    6dec:	200030f0 	.word	0x200030f0

00006df0 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6df0:	4a05      	ldr	r2, [pc, #20]	; (6e08 <_dma_srcinc_enable+0x18>)
    6df2:	0100      	lsls	r0, r0, #4
    6df4:	5a13      	ldrh	r3, [r2, r0]
    6df6:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    6df8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    6dfc:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    6e00:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    6e02:	5211      	strh	r1, [r2, r0]
}
    6e04:	2000      	movs	r0, #0
    6e06:	4770      	bx	lr
    6e08:	200030f0 	.word	0x200030f0

00006e0c <_dma_set_data_amount>:
{
    6e0c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    6e0e:	4c14      	ldr	r4, [pc, #80]	; (6e60 <_dma_set_data_amount+0x54>)
    6e10:	0102      	lsls	r2, r0, #4
    6e12:	18a3      	adds	r3, r4, r2
    6e14:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6e16:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    6e18:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6e1c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    6e1e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    6e22:	d006      	beq.n	6e32 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6e24:	fa01 f403 	lsl.w	r4, r1, r3
    6e28:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6e2a:	4a0d      	ldr	r2, [pc, #52]	; (6e60 <_dma_set_data_amount+0x54>)
    6e2c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    6e30:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    6e32:	4c0b      	ldr	r4, [pc, #44]	; (6e60 <_dma_set_data_amount+0x54>)
    6e34:	0102      	lsls	r2, r0, #4
    6e36:	18a5      	adds	r5, r4, r2
    6e38:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6e3a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    6e3c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    6e40:	d005      	beq.n	6e4e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6e42:	fa01 f303 	lsl.w	r3, r1, r3
    6e46:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6e48:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    6e4c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    6e4e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    6e50:	4b03      	ldr	r3, [pc, #12]	; (6e60 <_dma_set_data_amount+0x54>)
    6e52:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6e56:	8041      	strh	r1, [r0, #2]
}
    6e58:	2000      	movs	r0, #0
    6e5a:	bc30      	pop	{r4, r5}
    6e5c:	4770      	bx	lr
    6e5e:	bf00      	nop
    6e60:	200030f0 	.word	0x200030f0

00006e64 <_dma_enable_transaction>:
{
    6e64:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    6e66:	4c0d      	ldr	r4, [pc, #52]	; (6e9c <_dma_enable_transaction+0x38>)
    6e68:	0103      	lsls	r3, r0, #4
    6e6a:	5ae2      	ldrh	r2, [r4, r3]
    6e6c:	b292      	uxth	r2, r2
    6e6e:	f042 0201 	orr.w	r2, r2, #1
    6e72:	52e2      	strh	r2, [r4, r3]
    6e74:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6e78:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    6e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6e7e:	f042 0202 	orr.w	r2, r2, #2
    6e82:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    6e84:	b131      	cbz	r1, 6e94 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    6e86:	4a06      	ldr	r2, [pc, #24]	; (6ea0 <_dma_enable_transaction+0x3c>)
    6e88:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    6e8a:	2301      	movs	r3, #1
    6e8c:	fa03 f000 	lsl.w	r0, r3, r0
    6e90:	4308      	orrs	r0, r1
    6e92:	6110      	str	r0, [r2, #16]
}
    6e94:	2000      	movs	r0, #0
    6e96:	f85d 4b04 	ldr.w	r4, [sp], #4
    6e9a:	4770      	bx	lr
    6e9c:	200030f0 	.word	0x200030f0
    6ea0:	4100a000 	.word	0x4100a000

00006ea4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    6ea4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6ea8:	4b02      	ldr	r3, [pc, #8]	; (6eb4 <_dma_get_channel_resource+0x10>)
    6eaa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6eae:	6001      	str	r1, [r0, #0]
}
    6eb0:	2000      	movs	r0, #0
    6eb2:	4770      	bx	lr
    6eb4:	200002f4 	.word	0x200002f4

00006eb8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    6eb8:	b508      	push	{r3, lr}
	_dmac_handler();
    6eba:	4b01      	ldr	r3, [pc, #4]	; (6ec0 <DMAC_0_Handler+0x8>)
    6ebc:	4798      	blx	r3
    6ebe:	bd08      	pop	{r3, pc}
    6ec0:	00006c29 	.word	0x00006c29

00006ec4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    6ec4:	b508      	push	{r3, lr}
	_dmac_handler();
    6ec6:	4b01      	ldr	r3, [pc, #4]	; (6ecc <DMAC_1_Handler+0x8>)
    6ec8:	4798      	blx	r3
    6eca:	bd08      	pop	{r3, pc}
    6ecc:	00006c29 	.word	0x00006c29

00006ed0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    6ed0:	b508      	push	{r3, lr}
	_dmac_handler();
    6ed2:	4b01      	ldr	r3, [pc, #4]	; (6ed8 <DMAC_2_Handler+0x8>)
    6ed4:	4798      	blx	r3
    6ed6:	bd08      	pop	{r3, pc}
    6ed8:	00006c29 	.word	0x00006c29

00006edc <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    6edc:	b508      	push	{r3, lr}
	_dmac_handler();
    6ede:	4b01      	ldr	r3, [pc, #4]	; (6ee4 <DMAC_3_Handler+0x8>)
    6ee0:	4798      	blx	r3
    6ee2:	bd08      	pop	{r3, pc}
    6ee4:	00006c29 	.word	0x00006c29

00006ee8 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    6ee8:	b508      	push	{r3, lr}
	_dmac_handler();
    6eea:	4b01      	ldr	r3, [pc, #4]	; (6ef0 <DMAC_4_Handler+0x8>)
    6eec:	4798      	blx	r3
    6eee:	bd08      	pop	{r3, pc}
    6ef0:	00006c29 	.word	0x00006c29

00006ef4 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    6ef4:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    6ef6:	2000      	movs	r0, #0
    6ef8:	4770      	bx	lr
	...

00006efc <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6efc:	b430      	push	{r4, r5}
    6efe:	4814      	ldr	r0, [pc, #80]	; (6f50 <_event_system_init+0x54>)
    6f00:	f100 0543 	add.w	r5, r0, #67	; 0x43
    6f04:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6f06:	4c13      	ldr	r4, [pc, #76]	; (6f54 <_event_system_init+0x58>)
    6f08:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6f0a:	f813 1b01 	ldrb.w	r1, [r3], #1
    6f0e:	3248      	adds	r2, #72	; 0x48
    6f10:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    6f14:	42ab      	cmp	r3, r5
    6f16:	d1f7      	bne.n	6f08 <_event_system_init+0xc>
    6f18:	480d      	ldr	r0, [pc, #52]	; (6f50 <_event_system_init+0x54>)
    6f1a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    6f1e:	3080      	adds	r0, #128	; 0x80
    6f20:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6f22:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6f26:	00ca      	lsls	r2, r1, #3
    6f28:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6f2c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6f30:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6f32:	f850 3f04 	ldr.w	r3, [r0, #4]!
    6f36:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6f38:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6f3c:	43db      	mvns	r3, r3
    6f3e:	b2db      	uxtb	r3, r3
    6f40:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    6f44:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6f46:	2920      	cmp	r1, #32
    6f48:	d1eb      	bne.n	6f22 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    6f4a:	2000      	movs	r0, #0
    6f4c:	bc30      	pop	{r4, r5}
    6f4e:	4770      	bx	lr
    6f50:	0000bc04 	.word	0x0000bc04
    6f54:	4100e000 	.word	0x4100e000

00006f58 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6f58:	f010 0f01 	tst.w	r0, #1
    6f5c:	d008      	beq.n	6f70 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6f5e:	4a17      	ldr	r2, [pc, #92]	; (6fbc <_gclk_init_generators_by_fref+0x64>)
    6f60:	4b17      	ldr	r3, [pc, #92]	; (6fc0 <_gclk_init_generators_by_fref+0x68>)
    6f62:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6f64:	4619      	mov	r1, r3
    6f66:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6f6a:	684b      	ldr	r3, [r1, #4]
    6f6c:	4213      	tst	r3, r2
    6f6e:	d1fc      	bne.n	6f6a <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6f70:	f010 0f02 	tst.w	r0, #2
    6f74:	d008      	beq.n	6f88 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6f76:	4a13      	ldr	r2, [pc, #76]	; (6fc4 <_gclk_init_generators_by_fref+0x6c>)
    6f78:	4b11      	ldr	r3, [pc, #68]	; (6fc0 <_gclk_init_generators_by_fref+0x68>)
    6f7a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6f7c:	4619      	mov	r1, r3
    6f7e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6f82:	684b      	ldr	r3, [r1, #4]
    6f84:	4213      	tst	r3, r2
    6f86:	d1fc      	bne.n	6f82 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    6f88:	f010 0f04 	tst.w	r0, #4
    6f8c:	d008      	beq.n	6fa0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6f8e:	4a0e      	ldr	r2, [pc, #56]	; (6fc8 <_gclk_init_generators_by_fref+0x70>)
    6f90:	4b0b      	ldr	r3, [pc, #44]	; (6fc0 <_gclk_init_generators_by_fref+0x68>)
    6f92:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6f94:	4619      	mov	r1, r3
    6f96:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6f9a:	684b      	ldr	r3, [r1, #4]
    6f9c:	4213      	tst	r3, r2
    6f9e:	d1fc      	bne.n	6f9a <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    6fa0:	f010 0f08 	tst.w	r0, #8
    6fa4:	d008      	beq.n	6fb8 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6fa6:	4a09      	ldr	r2, [pc, #36]	; (6fcc <_gclk_init_generators_by_fref+0x74>)
    6fa8:	4b05      	ldr	r3, [pc, #20]	; (6fc0 <_gclk_init_generators_by_fref+0x68>)
    6faa:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6fac:	4619      	mov	r1, r3
    6fae:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6fb2:	684b      	ldr	r3, [r1, #4]
    6fb4:	4213      	tst	r3, r2
    6fb6:	d1fc      	bne.n	6fb2 <_gclk_init_generators_by_fref+0x5a>
    6fb8:	4770      	bx	lr
    6fba:	bf00      	nop
    6fbc:	00010108 	.word	0x00010108
    6fc0:	40001c00 	.word	0x40001c00
    6fc4:	00010106 	.word	0x00010106
    6fc8:	00100106 	.word	0x00100106
    6fcc:	00010104 	.word	0x00010104

00006fd0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    6fd0:	2201      	movs	r2, #1
    6fd2:	4b01      	ldr	r3, [pc, #4]	; (6fd8 <_mclk_init+0x8>)
    6fd4:	715a      	strb	r2, [r3, #5]
    6fd6:	4770      	bx	lr
    6fd8:	40000800 	.word	0x40000800

00006fdc <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    6fdc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    6fde:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    6fe0:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    6fe2:	f012 0f01 	tst.w	r2, #1
    6fe6:	d005      	beq.n	6ff4 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    6fe8:	2201      	movs	r2, #1
    6fea:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    6fec:	6803      	ldr	r3, [r0, #0]
    6fee:	b153      	cbz	r3, 7006 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    6ff0:	4798      	blx	r3
    6ff2:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    6ff4:	8a1a      	ldrh	r2, [r3, #16]
    6ff6:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    6ff8:	b12a      	cbz	r2, 7006 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    6ffa:	f240 225e 	movw	r2, #606	; 0x25e
    6ffe:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    7000:	6843      	ldr	r3, [r0, #4]
    7002:	b103      	cbz	r3, 7006 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    7004:	4798      	blx	r3
    7006:	bd08      	pop	{r3, pc}

00007008 <_flash_init>:
	device->hw = hw;
    7008:	6101      	str	r1, [r0, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    700a:	880b      	ldrh	r3, [r1, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    700c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    7010:	049b      	lsls	r3, r3, #18
    7012:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    7014:	800b      	strh	r3, [r1, #0]
	_nvm_dev = device;
    7016:	4b0d      	ldr	r3, [pc, #52]	; (704c <_flash_init+0x44>)
    7018:	6018      	str	r0, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    701a:	4b0d      	ldr	r3, [pc, #52]	; (7050 <_flash_init+0x48>)
    701c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    7020:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7024:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7028:	f3bf 8f6f 	isb	sy
    702c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7034:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7038:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    703c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    7040:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7044:	6019      	str	r1, [r3, #0]
    7046:	601a      	str	r2, [r3, #0]
}
    7048:	2000      	movs	r0, #0
    704a:	4770      	bx	lr
    704c:	20000474 	.word	0x20000474
    7050:	e000e100 	.word	0xe000e100

00007054 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    7054:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    7056:	4b02      	ldr	r3, [pc, #8]	; (7060 <NVMCTRL_0_Handler+0xc>)
    7058:	6818      	ldr	r0, [r3, #0]
    705a:	4b02      	ldr	r3, [pc, #8]	; (7064 <NVMCTRL_0_Handler+0x10>)
    705c:	4798      	blx	r3
    705e:	bd08      	pop	{r3, pc}
    7060:	20000474 	.word	0x20000474
    7064:	00006fdd 	.word	0x00006fdd

00007068 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    7068:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    706a:	4b02      	ldr	r3, [pc, #8]	; (7074 <NVMCTRL_1_Handler+0xc>)
    706c:	6818      	ldr	r0, [r3, #0]
    706e:	4b02      	ldr	r3, [pc, #8]	; (7078 <NVMCTRL_1_Handler+0x10>)
    7070:	4798      	blx	r3
    7072:	bd08      	pop	{r3, pc}
    7074:	20000474 	.word	0x20000474
    7078:	00006fdd 	.word	0x00006fdd

0000707c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    707c:	4b03      	ldr	r3, [pc, #12]	; (708c <_osc32kctrl_init_sources+0x10>)
    707e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    7080:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    7084:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    7086:	2201      	movs	r2, #1
    7088:	741a      	strb	r2, [r3, #16]
    708a:	4770      	bx	lr
    708c:	40001400 	.word	0x40001400

00007090 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    7090:	4770      	bx	lr
	...

00007094 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    7094:	4a47      	ldr	r2, [pc, #284]	; (71b4 <_oscctrl_init_referenced_generators+0x120>)
    7096:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7098:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    709c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    70a0:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    70a2:	4611      	mov	r1, r2
    70a4:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    70a8:	684b      	ldr	r3, [r1, #4]
    70aa:	4213      	tst	r3, r2
    70ac:	d1fc      	bne.n	70a8 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    70ae:	4a41      	ldr	r2, [pc, #260]	; (71b4 <_oscctrl_init_referenced_generators+0x120>)
    70b0:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    70b2:	f013 0f04 	tst.w	r3, #4
    70b6:	d1fb      	bne.n	70b0 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    70b8:	4b3f      	ldr	r3, [pc, #252]	; (71b8 <_oscctrl_init_referenced_generators+0x124>)
    70ba:	2200      	movs	r2, #0
    70bc:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    70be:	4a3f      	ldr	r2, [pc, #252]	; (71bc <_oscctrl_init_referenced_generators+0x128>)
    70c0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    70c2:	461a      	mov	r2, r3
    70c4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    70c8:	f013 0f10 	tst.w	r3, #16
    70cc:	d1fa      	bne.n	70c4 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    70ce:	2200      	movs	r2, #0
    70d0:	4b39      	ldr	r3, [pc, #228]	; (71b8 <_oscctrl_init_referenced_generators+0x124>)
    70d2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    70d6:	461a      	mov	r2, r3
    70d8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    70dc:	f013 0f04 	tst.w	r3, #4
    70e0:	d1fa      	bne.n	70d8 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    70e2:	2202      	movs	r2, #2
    70e4:	4b34      	ldr	r3, [pc, #208]	; (71b8 <_oscctrl_init_referenced_generators+0x124>)
    70e6:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    70e8:	461a      	mov	r2, r3
    70ea:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    70ee:	f013 0f02 	tst.w	r3, #2
    70f2:	d1fa      	bne.n	70ea <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    70f4:	4b30      	ldr	r3, [pc, #192]	; (71b8 <_oscctrl_init_referenced_generators+0x124>)
    70f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    70f8:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    70fa:	461a      	mov	r2, r3
    70fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    7100:	f013 0f08 	tst.w	r3, #8
    7104:	d1fa      	bne.n	70fc <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    7106:	2288      	movs	r2, #136	; 0x88
    7108:	4b2b      	ldr	r3, [pc, #172]	; (71b8 <_oscctrl_init_referenced_generators+0x124>)
    710a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    710e:	461a      	mov	r2, r3
    7110:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7114:	f013 0f04 	tst.w	r3, #4
    7118:	d1fa      	bne.n	7110 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    711a:	2242      	movs	r2, #66	; 0x42
    711c:	4b25      	ldr	r3, [pc, #148]	; (71b4 <_oscctrl_init_referenced_generators+0x120>)
    711e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    7122:	2227      	movs	r2, #39	; 0x27
    7124:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    7128:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    712a:	461a      	mov	r2, r3
    712c:	6d13      	ldr	r3, [r2, #80]	; 0x50
    712e:	f013 0f06 	tst.w	r3, #6
    7132:	d1fb      	bne.n	712c <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    7134:	4b20      	ldr	r3, [pc, #128]	; (71b8 <_oscctrl_init_referenced_generators+0x124>)
    7136:	f44f 6200 	mov.w	r2, #2048	; 0x800
    713a:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    713c:	2202      	movs	r2, #2
    713e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    7142:	461a      	mov	r2, r3
    7144:	6d13      	ldr	r3, [r2, #80]	; 0x50
    7146:	f013 0f02 	tst.w	r3, #2
    714a:	d1fb      	bne.n	7144 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    714c:	4b1a      	ldr	r3, [pc, #104]	; (71b8 <_oscctrl_init_referenced_generators+0x124>)
    714e:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    7152:	f013 0f01 	tst.w	r3, #1
    7156:	d026      	beq.n	71a6 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7158:	4a17      	ldr	r2, [pc, #92]	; (71b8 <_oscctrl_init_referenced_generators+0x124>)
    715a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    715c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    7160:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    7164:	d1f9      	bne.n	715a <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    7166:	4b14      	ldr	r3, [pc, #80]	; (71b8 <_oscctrl_init_referenced_generators+0x124>)
    7168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    716a:	f012 0f01 	tst.w	r2, #1
    716e:	d103      	bne.n	7178 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    7170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    7172:	f012 0f02 	tst.w	r2, #2
    7176:	d0f7      	beq.n	7168 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    7178:	4a0e      	ldr	r2, [pc, #56]	; (71b4 <_oscctrl_init_referenced_generators+0x120>)
    717a:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    717c:	2b00      	cmp	r3, #0
    717e:	d1fc      	bne.n	717a <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    7180:	4a0c      	ldr	r2, [pc, #48]	; (71b4 <_oscctrl_init_referenced_generators+0x120>)
    7182:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7184:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    7188:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    718c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    718e:	4611      	mov	r1, r2
    7190:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7194:	684b      	ldr	r3, [r1, #4]
    7196:	4213      	tst	r3, r2
    7198:	d1fc      	bne.n	7194 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    719a:	4a06      	ldr	r2, [pc, #24]	; (71b4 <_oscctrl_init_referenced_generators+0x120>)
    719c:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    719e:	f013 0f04 	tst.w	r3, #4
    71a2:	d1fb      	bne.n	719c <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    71a4:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    71a6:	4a04      	ldr	r2, [pc, #16]	; (71b8 <_oscctrl_init_referenced_generators+0x124>)
    71a8:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    71aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    71ae:	d0fb      	beq.n	71a8 <_oscctrl_init_referenced_generators+0x114>
    71b0:	e7d9      	b.n	7166 <_oscctrl_init_referenced_generators+0xd2>
    71b2:	bf00      	nop
    71b4:	40001c00 	.word	0x40001c00
    71b8:	40001000 	.word	0x40001000
    71bc:	04010000 	.word	0x04010000

000071c0 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    71c0:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    71c2:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    71c4:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    71c6:	4903      	ldr	r1, [pc, #12]	; (71d4 <_qspi_dma_rx_complete+0x14>)
    71c8:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    71ca:	685b      	ldr	r3, [r3, #4]
    71cc:	b103      	cbz	r3, 71d0 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    71ce:	4798      	blx	r3
    71d0:	bd08      	pop	{r3, pc}
    71d2:	bf00      	nop
    71d4:	01000002 	.word	0x01000002

000071d8 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    71d8:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    71da:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    71dc:	681a      	ldr	r2, [r3, #0]
    71de:	4903      	ldr	r1, [pc, #12]	; (71ec <_qspi_dma_tx_complete+0x14>)
    71e0:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    71e2:	685b      	ldr	r3, [r3, #4]
    71e4:	b103      	cbz	r3, 71e8 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    71e6:	4798      	blx	r3
    71e8:	bd08      	pop	{r3, pc}
    71ea:	bf00      	nop
    71ec:	01000002 	.word	0x01000002

000071f0 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    71f0:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    71f2:	6883      	ldr	r3, [r0, #8]
    71f4:	689b      	ldr	r3, [r3, #8]
    71f6:	b103      	cbz	r3, 71fa <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    71f8:	4798      	blx	r3
    71fa:	bd08      	pop	{r3, pc}

000071fc <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    71fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71fe:	4604      	mov	r4, r0
	ASSERT(dev && hw);
	dev->prvt = hw;
    7200:	4605      	mov	r5, r0
    7202:	f845 1b0c 	str.w	r1, [r5], #12
    7206:	2301      	movs	r3, #1
    7208:	600b      	str	r3, [r1, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    720a:	4b0e      	ldr	r3, [pc, #56]	; (7244 <_qspi_dma_init+0x48>)
    720c:	604b      	str	r3, [r1, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    720e:	4b0e      	ldr	r3, [pc, #56]	; (7248 <_qspi_dma_init+0x4c>)
    7210:	608b      	str	r3, [r1, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    7212:	211f      	movs	r1, #31
    7214:	4628      	mov	r0, r5
    7216:	4f0d      	ldr	r7, [pc, #52]	; (724c <_qspi_dma_init+0x50>)
    7218:	47b8      	blx	r7
	dev->resource->back                 = dev;
    721a:	68e3      	ldr	r3, [r4, #12]
    721c:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    721e:	68e3      	ldr	r3, [r4, #12]
    7220:	4a0b      	ldr	r2, [pc, #44]	; (7250 <_qspi_dma_init+0x54>)
    7222:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    7224:	68e3      	ldr	r3, [r4, #12]
    7226:	4e0b      	ldr	r6, [pc, #44]	; (7254 <_qspi_dma_init+0x58>)
    7228:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    722a:	211e      	movs	r1, #30
    722c:	4628      	mov	r0, r5
    722e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7230:	68e3      	ldr	r3, [r4, #12]
    7232:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    7234:	68e3      	ldr	r3, [r4, #12]
    7236:	4a08      	ldr	r2, [pc, #32]	; (7258 <_qspi_dma_init+0x5c>)
    7238:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    723a:	68e3      	ldr	r3, [r4, #12]
    723c:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
}
    723e:	2000      	movs	r0, #0
    7240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7242:	bf00      	nop
    7244:	06000011 	.word	0x06000011
    7248:	00243b00 	.word	0x00243b00
    724c:	00006ea5 	.word	0x00006ea5
    7250:	000071c1 	.word	0x000071c1
    7254:	000071f1 	.word	0x000071f1
    7258:	000071d9 	.word	0x000071d9

0000725c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    725c:	b500      	push	{lr}
    725e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    7260:	4b0d      	ldr	r3, [pc, #52]	; (7298 <RAMECC_Handler+0x3c>)
    7262:	789b      	ldrb	r3, [r3, #2]
    7264:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    7266:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    7268:	9b01      	ldr	r3, [sp, #4]
    726a:	f013 0f02 	tst.w	r3, #2
    726e:	d006      	beq.n	727e <RAMECC_Handler+0x22>
    7270:	4b0a      	ldr	r3, [pc, #40]	; (729c <RAMECC_Handler+0x40>)
    7272:	681b      	ldr	r3, [r3, #0]
    7274:	b11b      	cbz	r3, 727e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    7276:	4a08      	ldr	r2, [pc, #32]	; (7298 <RAMECC_Handler+0x3c>)
    7278:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    727a:	4798      	blx	r3
    727c:	e009      	b.n	7292 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    727e:	9b01      	ldr	r3, [sp, #4]
    7280:	f013 0f01 	tst.w	r3, #1
    7284:	d005      	beq.n	7292 <RAMECC_Handler+0x36>
    7286:	4b05      	ldr	r3, [pc, #20]	; (729c <RAMECC_Handler+0x40>)
    7288:	685b      	ldr	r3, [r3, #4]
    728a:	b113      	cbz	r3, 7292 <RAMECC_Handler+0x36>
    728c:	4a02      	ldr	r2, [pc, #8]	; (7298 <RAMECC_Handler+0x3c>)
    728e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    7290:	4798      	blx	r3
	} else {
		return;
	}
}
    7292:	b003      	add	sp, #12
    7294:	f85d fb04 	ldr.w	pc, [sp], #4
    7298:	41020000 	.word	0x41020000
    729c:	200034f0 	.word	0x200034f0

000072a0 <_rtc_timer_init>:
 */
int32_t _rtc_timer_init(struct _timer_device *const dev, void *const hw)
{
	ASSERT(dev);

	dev->hw = hw;
    72a0:	60c1      	str	r1, [r0, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    72a2:	2301      	movs	r3, #1
    72a4:	800b      	strh	r3, [r1, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    72a6:	f248 0203 	movw	r2, #32771	; 0x8003
    72aa:	690b      	ldr	r3, [r1, #16]
    72ac:	4213      	tst	r3, r2
    72ae:	d1fc      	bne.n	72aa <_rtc_timer_init+0xa>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    72b0:	68c3      	ldr	r3, [r0, #12]
    72b2:	691a      	ldr	r2, [r3, #16]
    72b4:	f012 0f01 	tst.w	r2, #1
    72b8:	d1fb      	bne.n	72b2 <_rtc_timer_init+0x12>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    72ba:	f248 0280 	movw	r2, #32896	; 0x8080
    72be:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    72c0:	f248 0103 	movw	r1, #32771	; 0x8003
    72c4:	691a      	ldr	r2, [r3, #16]
    72c6:	420a      	tst	r2, r1
    72c8:	d1fc      	bne.n	72c4 <_rtc_timer_init+0x24>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    72ca:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    72cc:	2301      	movs	r3, #1
    72ce:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    72d0:	6913      	ldr	r3, [r2, #16]
    72d2:	f013 0f60 	tst.w	r3, #96	; 0x60
    72d6:	d1fb      	bne.n	72d0 <_rtc_timer_init+0x30>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    72d8:	68c3      	ldr	r3, [r0, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    72da:	f44f 7280 	mov.w	r2, #256	; 0x100
    72de:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    72e0:	4b01      	ldr	r3, [pc, #4]	; (72e8 <_rtc_timer_init+0x48>)
    72e2:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    72e4:	2000      	movs	r0, #0
    72e6:	4770      	bx	lr
    72e8:	20000478 	.word	0x20000478

000072ec <_rtc_timer_deinit>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    72ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    72f0:	4b07      	ldr	r3, [pc, #28]	; (7310 <_rtc_timer_deinit+0x24>)
    72f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    72f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    72fa:	f3bf 8f6f 	isb	sy
{
	ASSERT(dev && dev->hw);

	NVIC_DisableIRQ(RTC_IRQn);

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    72fe:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7300:	2301      	movs	r3, #1
    7302:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7304:	f248 0103 	movw	r1, #32771	; 0x8003
    7308:	6913      	ldr	r3, [r2, #16]
    730a:	420b      	tst	r3, r1
    730c:	d1fc      	bne.n	7308 <_rtc_timer_deinit+0x1c>
}
    730e:	4770      	bx	lr
    7310:	e000e100 	.word	0xe000e100

00007314 <_rtc_timer_start>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7314:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7318:	4b0c      	ldr	r3, [pc, #48]	; (734c <_rtc_timer_start+0x38>)
    731a:	601a      	str	r2, [r3, #0]
void _rtc_timer_start(struct _timer_device *const dev)
{
	ASSERT(dev && dev->hw);

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    731c:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    731e:	2300      	movs	r3, #0
    7320:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7322:	6913      	ldr	r3, [r2, #16]
    7324:	f013 0f08 	tst.w	r3, #8
    7328:	d1fb      	bne.n	7322 <_rtc_timer_start+0xe>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    732a:	68c3      	ldr	r3, [r0, #12]
    732c:	691a      	ldr	r2, [r3, #16]
    732e:	f012 0f08 	tst.w	r2, #8
    7332:	d1fb      	bne.n	732c <_rtc_timer_start+0x18>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    7334:	881a      	ldrh	r2, [r3, #0]
    7336:	b292      	uxth	r2, r2
    7338:	f042 0202 	orr.w	r2, r2, #2
    733c:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    733e:	f248 0103 	movw	r1, #32771	; 0x8003
    7342:	691a      	ldr	r2, [r3, #16]
    7344:	420a      	tst	r2, r1
    7346:	d1fc      	bne.n	7342 <_rtc_timer_start+0x2e>
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
}
    7348:	4770      	bx	lr
    734a:	bf00      	nop
    734c:	e000e100 	.word	0xe000e100

00007350 <_rtc_timer_stop>:
 */
void _rtc_timer_stop(struct _timer_device *const dev)
{
	ASSERT(dev && dev->hw);

	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    7350:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    7352:	8813      	ldrh	r3, [r2, #0]
    7354:	f023 0302 	bic.w	r3, r3, #2
    7358:	041b      	lsls	r3, r3, #16
    735a:	0c1b      	lsrs	r3, r3, #16
    735c:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    735e:	f248 0103 	movw	r1, #32771	; 0x8003
    7362:	6913      	ldr	r3, [r2, #16]
    7364:	420b      	tst	r3, r1
    7366:	d1fc      	bne.n	7362 <_rtc_timer_stop+0x12>
}
    7368:	4770      	bx	lr

0000736a <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    736a:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    736c:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    736e:	6913      	ldr	r3, [r2, #16]
    7370:	f013 0f60 	tst.w	r3, #96	; 0x60
    7374:	d1fb      	bne.n	736e <_rtc_timer_set_period+0x4>
}
    7376:	4770      	bx	lr

00007378 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    7378:	68c2      	ldr	r2, [r0, #12]
    737a:	6913      	ldr	r3, [r2, #16]
    737c:	f013 0f60 	tst.w	r3, #96	; 0x60
    7380:	d1fb      	bne.n	737a <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    7382:	6a10      	ldr	r0, [r2, #32]
}
    7384:	4770      	bx	lr

00007386 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    7386:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7388:	f248 0103 	movw	r1, #32771	; 0x8003
    738c:	6913      	ldr	r3, [r2, #16]
    738e:	420b      	tst	r3, r1
    7390:	d1fc      	bne.n	738c <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    7392:	8810      	ldrh	r0, [r2, #0]
}
    7394:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7398:	4770      	bx	lr

0000739a <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    739a:	4770      	bx	lr

0000739c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    739c:	4800      	ldr	r0, [pc, #0]	; (73a0 <_rtc_get_timer+0x4>)
    739e:	4770      	bx	lr
    73a0:	20000000 	.word	0x20000000

000073a4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    73a4:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    73a6:	4b08      	ldr	r3, [pc, #32]	; (73c8 <RTC_Handler+0x24>)
    73a8:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    73aa:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    73ac:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    73ae:	f413 7f80 	tst.w	r3, #256	; 0x100
    73b2:	d007      	beq.n	73c4 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    73b4:	6823      	ldr	r3, [r4, #0]
    73b6:	b10b      	cbz	r3, 73bc <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    73b8:	4620      	mov	r0, r4
    73ba:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    73bc:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    73be:	f44f 7280 	mov.w	r2, #256	; 0x100
    73c2:	819a      	strh	r2, [r3, #12]
    73c4:	bd10      	pop	{r4, pc}
    73c6:	bf00      	nop
    73c8:	20000478 	.word	0x20000478

000073cc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    73cc:	b470      	push	{r4, r5, r6}
    73ce:	b089      	sub	sp, #36	; 0x24
    73d0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    73d2:	466c      	mov	r4, sp
    73d4:	4d0d      	ldr	r5, [pc, #52]	; (740c <_sercom_get_hardware_index+0x40>)
    73d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    73d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    73da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    73de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    73e2:	9b00      	ldr	r3, [sp, #0]
    73e4:	42b3      	cmp	r3, r6
    73e6:	d00d      	beq.n	7404 <_sercom_get_hardware_index+0x38>
    73e8:	4631      	mov	r1, r6
    73ea:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    73ec:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    73ee:	f853 2b04 	ldr.w	r2, [r3], #4
    73f2:	428a      	cmp	r2, r1
    73f4:	d007      	beq.n	7406 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    73f6:	3001      	adds	r0, #1
    73f8:	2808      	cmp	r0, #8
    73fa:	d1f8      	bne.n	73ee <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    73fc:	2000      	movs	r0, #0
}
    73fe:	b009      	add	sp, #36	; 0x24
    7400:	bc70      	pop	{r4, r5, r6}
    7402:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7404:	2000      	movs	r0, #0
			return i;
    7406:	b2c0      	uxtb	r0, r0
    7408:	e7f9      	b.n	73fe <_sercom_get_hardware_index+0x32>
    740a:	bf00      	nop
    740c:	0000bd08 	.word	0x0000bd08

00007410 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    7410:	b510      	push	{r4, lr}
	void *hw = device->hw;
    7412:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    7414:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    7416:	f013 0f01 	tst.w	r3, #1
    741a:	d003      	beq.n	7424 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    741c:	7da3      	ldrb	r3, [r4, #22]
    741e:	f013 0f01 	tst.w	r3, #1
    7422:	d112      	bne.n	744a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7424:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    7426:	f013 0f02 	tst.w	r3, #2
    742a:	d003      	beq.n	7434 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    742c:	7da3      	ldrb	r3, [r4, #22]
    742e:	f013 0f02 	tst.w	r3, #2
    7432:	d10f      	bne.n	7454 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    7434:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    7436:	f013 0f04 	tst.w	r3, #4
    743a:	d015      	beq.n	7468 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    743c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    743e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    7442:	b163      	cbz	r3, 745e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    7444:	23ff      	movs	r3, #255	; 0xff
    7446:	8363      	strh	r3, [r4, #26]
    7448:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    744a:	2301      	movs	r3, #1
    744c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    744e:	6803      	ldr	r3, [r0, #0]
    7450:	4798      	blx	r3
    7452:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    7454:	2302      	movs	r3, #2
    7456:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    7458:	6883      	ldr	r3, [r0, #8]
    745a:	4798      	blx	r3
    745c:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    745e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    7460:	6843      	ldr	r3, [r0, #4]
    7462:	b2c9      	uxtb	r1, r1
    7464:	4798      	blx	r3
    7466:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    7468:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    746a:	09db      	lsrs	r3, r3, #7
    746c:	d100      	bne.n	7470 <_sercom_usart_interrupt_handler+0x60>
    746e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    7470:	2380      	movs	r3, #128	; 0x80
    7472:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    7474:	68c3      	ldr	r3, [r0, #12]
    7476:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    7478:	8b63      	ldrh	r3, [r4, #26]
    747a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    747c:	8363      	strh	r3, [r4, #26]
    747e:	e7f6      	b.n	746e <_sercom_usart_interrupt_handler+0x5e>

00007480 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    7480:	4b11      	ldr	r3, [pc, #68]	; (74c8 <_sercom_init_irq_param+0x48>)
    7482:	4298      	cmp	r0, r3
    7484:	d011      	beq.n	74aa <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    7486:	4b11      	ldr	r3, [pc, #68]	; (74cc <_sercom_init_irq_param+0x4c>)
    7488:	4298      	cmp	r0, r3
    748a:	d011      	beq.n	74b0 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    748c:	4b10      	ldr	r3, [pc, #64]	; (74d0 <_sercom_init_irq_param+0x50>)
    748e:	4298      	cmp	r0, r3
    7490:	d011      	beq.n	74b6 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    7492:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    7496:	d011      	beq.n	74bc <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    7498:	4b0e      	ldr	r3, [pc, #56]	; (74d4 <_sercom_init_irq_param+0x54>)
    749a:	4298      	cmp	r0, r3
    749c:	d011      	beq.n	74c2 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    749e:	4b0e      	ldr	r3, [pc, #56]	; (74d8 <_sercom_init_irq_param+0x58>)
    74a0:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    74a2:	bf04      	itt	eq
    74a4:	4b0d      	ldreq	r3, [pc, #52]	; (74dc <_sercom_init_irq_param+0x5c>)
    74a6:	6159      	streq	r1, [r3, #20]
    74a8:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    74aa:	4b0c      	ldr	r3, [pc, #48]	; (74dc <_sercom_init_irq_param+0x5c>)
    74ac:	6019      	str	r1, [r3, #0]
    74ae:	e7f0      	b.n	7492 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    74b0:	4b0a      	ldr	r3, [pc, #40]	; (74dc <_sercom_init_irq_param+0x5c>)
    74b2:	6059      	str	r1, [r3, #4]
    74b4:	e7f0      	b.n	7498 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    74b6:	4b09      	ldr	r3, [pc, #36]	; (74dc <_sercom_init_irq_param+0x5c>)
    74b8:	6099      	str	r1, [r3, #8]
    74ba:	e7f0      	b.n	749e <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    74bc:	4b07      	ldr	r3, [pc, #28]	; (74dc <_sercom_init_irq_param+0x5c>)
    74be:	60d9      	str	r1, [r3, #12]
    74c0:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    74c2:	4b06      	ldr	r3, [pc, #24]	; (74dc <_sercom_init_irq_param+0x5c>)
    74c4:	6119      	str	r1, [r3, #16]
    74c6:	4770      	bx	lr
    74c8:	40003000 	.word	0x40003000
    74cc:	40003400 	.word	0x40003400
    74d0:	41014000 	.word	0x41014000
    74d4:	43000400 	.word	0x43000400
    74d8:	43000800 	.word	0x43000800
    74dc:	2000047c 	.word	0x2000047c

000074e0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    74e0:	b510      	push	{r4, lr}
    74e2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    74e4:	4b44      	ldr	r3, [pc, #272]	; (75f8 <_usart_init+0x118>)
    74e6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    74e8:	2800      	cmp	r0, #0
    74ea:	d063      	beq.n	75b4 <_usart_init+0xd4>
    74ec:	2801      	cmp	r0, #1
    74ee:	d05b      	beq.n	75a8 <_usart_init+0xc8>
    74f0:	2802      	cmp	r0, #2
    74f2:	d05b      	beq.n	75ac <_usart_init+0xcc>
    74f4:	2804      	cmp	r0, #4
    74f6:	d05b      	beq.n	75b0 <_usart_init+0xd0>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    74f8:	2806      	cmp	r0, #6
    74fa:	bf14      	ite	ne
    74fc:	2100      	movne	r1, #0
    74fe:	2104      	moveq	r1, #4
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    7500:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    7502:	f013 0f01 	tst.w	r3, #1
    7506:	d122      	bne.n	754e <_usart_init+0x6e>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    7508:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    750c:	4a3b      	ldr	r2, [pc, #236]	; (75fc <_usart_init+0x11c>)
    750e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7514:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7518:	69e3      	ldr	r3, [r4, #28]
    751a:	f013 0f03 	tst.w	r3, #3
    751e:	d1fb      	bne.n	7518 <_usart_init+0x38>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    7520:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    7522:	f013 0f02 	tst.w	r3, #2
    7526:	d00b      	beq.n	7540 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7528:	6823      	ldr	r3, [r4, #0]
    752a:	f023 0302 	bic.w	r3, r3, #2
    752e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7530:	69e3      	ldr	r3, [r4, #28]
    7532:	f013 0f03 	tst.w	r3, #3
    7536:	d1fb      	bne.n	7530 <_usart_init+0x50>
    7538:	69e3      	ldr	r3, [r4, #28]
    753a:	f013 0f02 	tst.w	r3, #2
    753e:	d1fb      	bne.n	7538 <_usart_init+0x58>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    7540:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    7544:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7546:	69e3      	ldr	r3, [r4, #28]
    7548:	f013 0f03 	tst.w	r3, #3
    754c:	d1fb      	bne.n	7546 <_usart_init+0x66>
    754e:	69e3      	ldr	r3, [r4, #28]
    7550:	f013 0f01 	tst.w	r3, #1
    7554:	d1fb      	bne.n	754e <_usart_init+0x6e>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    7556:	460a      	mov	r2, r1
    7558:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    755c:	4b27      	ldr	r3, [pc, #156]	; (75fc <_usart_init+0x11c>)
    755e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    7562:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    7564:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7566:	69e3      	ldr	r3, [r4, #28]
    7568:	f013 0f03 	tst.w	r3, #3
    756c:	d1fb      	bne.n	7566 <_usart_init+0x86>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    756e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    7572:	4922      	ldr	r1, [pc, #136]	; (75fc <_usart_init+0x11c>)
    7574:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    757a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    757c:	69e3      	ldr	r3, [r4, #28]
    757e:	f013 0f1f 	tst.w	r3, #31
    7582:	d1fb      	bne.n	757c <_usart_init+0x9c>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    7584:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    7588:	491c      	ldr	r1, [pc, #112]	; (75fc <_usart_init+0x11c>)
    758a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    7590:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    7592:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    7596:	d10f      	bne.n	75b8 <_usart_init+0xd8>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    7598:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    759c:	4917      	ldr	r1, [pc, #92]	; (75fc <_usart_init+0x11c>)
    759e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    75a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    75a4:	81a3      	strh	r3, [r4, #12]
    75a6:	e016      	b.n	75d6 <_usart_init+0xf6>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    75a8:	2101      	movs	r1, #1
    75aa:	e7a9      	b.n	7500 <_usart_init+0x20>
    75ac:	2102      	movs	r1, #2
    75ae:	e7a7      	b.n	7500 <_usart_init+0x20>
    75b0:	2103      	movs	r1, #3
    75b2:	e7a5      	b.n	7500 <_usart_init+0x20>
    75b4:	2100      	movs	r1, #0
    75b6:	e7a3      	b.n	7500 <_usart_init+0x20>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    75b8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    75bc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    75c0:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    75c2:	89a1      	ldrh	r1, [r4, #12]
    75c4:	f360 010c 	bfi	r1, r0, #0, #13
    75c8:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    75ca:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    75ce:	89a3      	ldrh	r3, [r4, #12]
    75d0:	f361 334f 	bfi	r3, r1, #13, #3
    75d4:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    75d6:	4b09      	ldr	r3, [pc, #36]	; (75fc <_usart_init+0x11c>)
    75d8:	0051      	lsls	r1, r2, #1
    75da:	1888      	adds	r0, r1, r2
    75dc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    75e0:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    75e4:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    75e6:	440a      	add	r2, r1
    75e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    75ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    75f0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    75f4:	2000      	movs	r0, #0
    75f6:	bd10      	pop	{r4, pc}
    75f8:	000073cd 	.word	0x000073cd
    75fc:	0000bd08 	.word	0x0000bd08

00007600 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    7600:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7602:	4b03      	ldr	r3, [pc, #12]	; (7610 <_get_i2cm_index+0x10>)
    7604:	4798      	blx	r3
		}
	}

	ASSERT(false);
	return -1;
}
    7606:	3805      	subs	r0, #5
    7608:	bf18      	it	ne
    760a:	f04f 30ff 	movne.w	r0, #4294967295
    760e:	bd08      	pop	{r3, pc}
    7610:	000073cd 	.word	0x000073cd

00007614 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    7614:	b510      	push	{r4, lr}
	void *   hw    = i2c_dev->hw;
    7616:	6903      	ldr	r3, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7618:	7e19      	ldrb	r1, [r3, #24]
    761a:	b2c9      	uxtb	r1, r1
	int32_t  ret   = I2C_OK;

	ASSERT(i2c_dev);
	ASSERT(i2c_dev->hw);

	while (!(flags & ERROR_FLAG)) {
    761c:	f011 0f80 	tst.w	r1, #128	; 0x80
    7620:	f040 80eb 	bne.w	77fa <_sercom_i2c_m_irq_handler+0x1e6>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7624:	681c      	ldr	r4, [r3, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7626:	69da      	ldr	r2, [r3, #28]
    7628:	f012 0f04 	tst.w	r2, #4
    762c:	d1fb      	bne.n	7626 <_sercom_i2c_m_irq_handler+0x12>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    762e:	8b5a      	ldrh	r2, [r3, #26]
    7630:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    7632:	f011 0f01 	tst.w	r1, #1
    7636:	f000 808b 	beq.w	7750 <_sercom_i2c_m_irq_handler+0x13c>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    763a:	f012 0f02 	tst.w	r2, #2
    763e:	d01f      	beq.n	7680 <_sercom_i2c_m_irq_handler+0x6c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    7640:	2101      	movs	r1, #1
    7642:	7619      	strb	r1, [r3, #24]
			msg->flags |= I2C_M_FAIL;
    7644:	8843      	ldrh	r3, [r0, #2]
    7646:	b29b      	uxth	r3, r3
    7648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    764c:	8043      	strh	r3, [r0, #2]
			msg->flags &= ~I2C_M_BUSY;
    764e:	8843      	ldrh	r3, [r0, #2]
    7650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7654:	041b      	lsls	r3, r3, #16
    7656:	0c1b      	lsrs	r3, r3, #16
    7658:	8043      	strh	r3, [r0, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    765a:	400a      	ands	r2, r1
			return I2C_ERR_BAD_ADDRESS;
    765c:	2a00      	cmp	r2, #0
    765e:	bf14      	ite	ne
    7660:	f06f 0104 	mvnne.w	r1, #4
    7664:	f06f 0103 	mvneq.w	r1, #3
		}

		return;
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7668:	8843      	ldrh	r3, [r0, #2]
    766a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    766e:	041b      	lsls	r3, r3, #16
    7670:	0c1b      	lsrs	r3, r3, #16
    7672:	8043      	strh	r3, [r0, #2]
	if (i2c_dev->cb.error) {
    7674:	6943      	ldr	r3, [r0, #20]
    7676:	2b00      	cmp	r3, #0
    7678:	f000 80be 	beq.w	77f8 <_sercom_i2c_m_irq_handler+0x1e4>
		if (ret != I2C_OK) {
			i2c_dev->cb.error(i2c_dev, ret);
    767c:	4798      	blx	r3
    767e:	bd10      	pop	{r4, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    7680:	f012 0f04 	tst.w	r2, #4
    7684:	d122      	bne.n	76cc <_sercom_i2c_m_irq_handler+0xb8>
			if (msg->flags & I2C_M_TEN) {
    7686:	8842      	ldrh	r2, [r0, #2]
    7688:	f412 6f80 	tst.w	r2, #1024	; 0x400
    768c:	d03c      	beq.n	7708 <_sercom_i2c_m_irq_handler+0xf4>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    768e:	8802      	ldrh	r2, [r0, #0]
    7690:	09d2      	lsrs	r2, r2, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7692:	f002 0406 	and.w	r4, r2, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7696:	69da      	ldr	r2, [r3, #28]
    7698:	f012 0f04 	tst.w	r2, #4
    769c:	d1fb      	bne.n	7696 <_sercom_i2c_m_irq_handler+0x82>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    769e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    76a0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    76a4:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
    76a8:	4322      	orrs	r2, r4
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    76aa:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    76ac:	69da      	ldr	r2, [r3, #28]
    76ae:	f012 0f04 	tst.w	r2, #4
    76b2:	d1fb      	bne.n	76ac <_sercom_i2c_m_irq_handler+0x98>
				msg->flags &= ~I2C_M_TEN;
    76b4:	8843      	ldrh	r3, [r0, #2]
    76b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    76ba:	041b      	lsls	r3, r3, #16
    76bc:	0c1b      	lsrs	r3, r3, #16
    76be:	8043      	strh	r3, [r0, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    76c0:	6983      	ldr	r3, [r0, #24]
    76c2:	2b00      	cmp	r3, #0
    76c4:	f000 8084 	beq.w	77d0 <_sercom_i2c_m_irq_handler+0x1bc>
			i2c_dev->cb.tx_complete(i2c_dev);
    76c8:	4798      	blx	r3
    76ca:	bd10      	pop	{r4, pc}
				if (msg->len > 0) {
    76cc:	6842      	ldr	r2, [r0, #4]
    76ce:	2a00      	cmp	r2, #0
    76d0:	dd04      	ble.n	76dc <_sercom_i2c_m_irq_handler+0xc8>
					msg->flags |= I2C_M_FAIL;
    76d2:	8842      	ldrh	r2, [r0, #2]
    76d4:	b292      	uxth	r2, r2
    76d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    76da:	8042      	strh	r2, [r0, #2]
				if (msg->flags & I2C_M_STOP) {
    76dc:	8842      	ldrh	r2, [r0, #2]
    76de:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    76e2:	d108      	bne.n	76f6 <_sercom_i2c_m_irq_handler+0xe2>
				msg->flags &= ~I2C_M_BUSY;
    76e4:	8843      	ldrh	r3, [r0, #2]
    76e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    76ea:	041b      	lsls	r3, r3, #16
    76ec:	0c1b      	lsrs	r3, r3, #16
    76ee:	8043      	strh	r3, [r0, #2]
				return I2C_NACK;
    76f0:	f06f 0101 	mvn.w	r1, #1
    76f4:	e7b8      	b.n	7668 <_sercom_i2c_m_irq_handler+0x54>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    76f6:	685a      	ldr	r2, [r3, #4]
    76f8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    76fc:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    76fe:	69da      	ldr	r2, [r3, #28]
    7700:	f012 0f04 	tst.w	r2, #4
    7704:	d1fb      	bne.n	76fe <_sercom_i2c_m_irq_handler+0xea>
    7706:	e7ed      	b.n	76e4 <_sercom_i2c_m_irq_handler+0xd0>
			if (msg->len == 0) {
    7708:	6842      	ldr	r2, [r0, #4]
    770a:	b99a      	cbnz	r2, 7734 <_sercom_i2c_m_irq_handler+0x120>
				if (msg->flags & I2C_M_STOP) {
    770c:	8842      	ldrh	r2, [r0, #2]
    770e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    7712:	d106      	bne.n	7722 <_sercom_i2c_m_irq_handler+0x10e>
				msg->flags &= ~I2C_M_BUSY;
    7714:	8843      	ldrh	r3, [r0, #2]
    7716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    771a:	041b      	lsls	r3, r3, #16
    771c:	0c1b      	lsrs	r3, r3, #16
    771e:	8043      	strh	r3, [r0, #2]
    7720:	e7ce      	b.n	76c0 <_sercom_i2c_m_irq_handler+0xac>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7722:	685a      	ldr	r2, [r3, #4]
    7724:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    7728:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    772a:	69da      	ldr	r2, [r3, #28]
    772c:	f012 0f04 	tst.w	r2, #4
    7730:	d1fb      	bne.n	772a <_sercom_i2c_m_irq_handler+0x116>
    7732:	e7ef      	b.n	7714 <_sercom_i2c_m_irq_handler+0x100>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    7734:	6882      	ldr	r2, [r0, #8]
    7736:	7812      	ldrb	r2, [r2, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7738:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    773a:	69da      	ldr	r2, [r3, #28]
    773c:	f012 0f04 	tst.w	r2, #4
    7740:	d1fb      	bne.n	773a <_sercom_i2c_m_irq_handler+0x126>
				msg->buffer++;
    7742:	6883      	ldr	r3, [r0, #8]
    7744:	3301      	adds	r3, #1
    7746:	6083      	str	r3, [r0, #8]
				msg->len--;
    7748:	6843      	ldr	r3, [r0, #4]
    774a:	3b01      	subs	r3, #1
    774c:	6043      	str	r3, [r0, #4]
    774e:	e7b7      	b.n	76c0 <_sercom_i2c_m_irq_handler+0xac>
	} else if (flags & SB_FLAG) {
    7750:	f011 0f02 	tst.w	r1, #2
    7754:	d03f      	beq.n	77d6 <_sercom_i2c_m_irq_handler+0x1c2>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    7756:	6841      	ldr	r1, [r0, #4]
    7758:	2900      	cmp	r1, #0
    775a:	d034      	beq.n	77c6 <_sercom_i2c_m_irq_handler+0x1b2>
    775c:	f012 0f04 	tst.w	r2, #4
    7760:	d131      	bne.n	77c6 <_sercom_i2c_m_irq_handler+0x1b2>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    7762:	f3c4 64c0 	ubfx	r4, r4, #27, #1
			msg->len--;
    7766:	3901      	subs	r1, #1
    7768:	6041      	str	r1, [r0, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    776a:	2900      	cmp	r1, #0
    776c:	d134      	bne.n	77d8 <_sercom_i2c_m_irq_handler+0x1c4>
    776e:	2c00      	cmp	r4, #0
    7770:	d036      	beq.n	77e0 <_sercom_i2c_m_irq_handler+0x1cc>
				if (msg->flags & I2C_M_STOP) {
    7772:	8842      	ldrh	r2, [r0, #2]
    7774:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    7778:	d114      	bne.n	77a4 <_sercom_i2c_m_irq_handler+0x190>
				msg->flags &= ~I2C_M_BUSY;
    777a:	8842      	ldrh	r2, [r0, #2]
    777c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    7780:	0412      	lsls	r2, r2, #16
    7782:	0c12      	lsrs	r2, r2, #16
    7784:	8042      	strh	r2, [r0, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    7786:	6881      	ldr	r1, [r0, #8]
    7788:	1c4a      	adds	r2, r1, #1
    778a:	6082      	str	r2, [r0, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    778c:	69da      	ldr	r2, [r3, #28]
    778e:	f012 0f04 	tst.w	r2, #4
    7792:	d1fb      	bne.n	778c <_sercom_i2c_m_irq_handler+0x178>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7796:	700a      	strb	r2, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7798:	2202      	movs	r2, #2
    779a:	761a      	strb	r2, [r3, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    779c:	69c3      	ldr	r3, [r0, #28]
    779e:	b1d3      	cbz	r3, 77d6 <_sercom_i2c_m_irq_handler+0x1c2>
			i2c_dev->cb.rx_complete(i2c_dev);
    77a0:	4798      	blx	r3
    77a2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    77a4:	685a      	ldr	r2, [r3, #4]
    77a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    77aa:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    77ac:	69da      	ldr	r2, [r3, #28]
    77ae:	f012 0f04 	tst.w	r2, #4
    77b2:	d1fb      	bne.n	77ac <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    77b4:	685a      	ldr	r2, [r3, #4]
    77b6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    77ba:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    77bc:	69da      	ldr	r2, [r3, #28]
    77be:	f012 0f04 	tst.w	r2, #4
    77c2:	d1fb      	bne.n	77bc <_sercom_i2c_m_irq_handler+0x1a8>
    77c4:	e7d9      	b.n	777a <_sercom_i2c_m_irq_handler+0x166>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    77c6:	2202      	movs	r2, #2
    77c8:	761a      	strb	r2, [r3, #24]
			return I2C_NACK;
    77ca:	f06f 0101 	mvn.w	r1, #1
    77ce:	e74b      	b.n	7668 <_sercom_i2c_m_irq_handler+0x54>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    77d0:	f011 0f02 	tst.w	r1, #2
    77d4:	d1e2      	bne.n	779c <_sercom_i2c_m_irq_handler+0x188>
    77d6:	bd10      	pop	{r4, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    77d8:	2901      	cmp	r1, #1
    77da:	d1d4      	bne.n	7786 <_sercom_i2c_m_irq_handler+0x172>
    77dc:	2c00      	cmp	r4, #0
    77de:	d0d2      	beq.n	7786 <_sercom_i2c_m_irq_handler+0x172>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    77e0:	685a      	ldr	r2, [r3, #4]
    77e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    77e6:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    77e8:	69da      	ldr	r2, [r3, #28]
    77ea:	f012 0f04 	tst.w	r2, #4
    77ee:	d1fb      	bne.n	77e8 <_sercom_i2c_m_irq_handler+0x1d4>
			if (msg->len == 0) {
    77f0:	6842      	ldr	r2, [r0, #4]
    77f2:	2a00      	cmp	r2, #0
    77f4:	d0bd      	beq.n	7772 <_sercom_i2c_m_irq_handler+0x15e>
    77f6:	e7c6      	b.n	7786 <_sercom_i2c_m_irq_handler+0x172>
    77f8:	bd10      	pop	{r4, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    77fa:	8843      	ldrh	r3, [r0, #2]
    77fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7800:	041b      	lsls	r3, r3, #16
    7802:	0c1b      	lsrs	r3, r3, #16
    7804:	8043      	strh	r3, [r0, #2]
	if (i2c_dev->cb.error) {
    7806:	6943      	ldr	r3, [r0, #20]
    7808:	2b00      	cmp	r3, #0
    780a:	d0e4      	beq.n	77d6 <_sercom_i2c_m_irq_handler+0x1c2>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    780c:	f06f 0104 	mvn.w	r1, #4
    7810:	4798      	blx	r3
    7812:	bd10      	pop	{r4, pc}

00007814 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    7814:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    7816:	4b03      	ldr	r3, [pc, #12]	; (7824 <_sercom_get_irq_num+0x10>)
    7818:	4798      	blx	r3
    781a:	0080      	lsls	r0, r0, #2
    781c:	302e      	adds	r0, #46	; 0x2e
}
    781e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    7822:	bd08      	pop	{r3, pc}
    7824:	000073cd 	.word	0x000073cd

00007828 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    7828:	b538      	push	{r3, r4, r5, lr}
    782a:	4605      	mov	r5, r0
    782c:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    782e:	4608      	mov	r0, r1
    7830:	4b34      	ldr	r3, [pc, #208]	; (7904 <_i2c_m_sync_init_impl+0xdc>)
    7832:	4798      	blx	r3
    7834:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    7836:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7838:	f013 0f01 	tst.w	r3, #1
    783c:	d123      	bne.n	7886 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    783e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7842:	4a31      	ldr	r2, [pc, #196]	; (7908 <_i2c_m_sync_init_impl+0xe0>)
    7844:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7848:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    784c:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7850:	69e3      	ldr	r3, [r4, #28]
    7852:	f013 0f03 	tst.w	r3, #3
    7856:	d1fb      	bne.n	7850 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7858:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    785a:	f013 0f02 	tst.w	r3, #2
    785e:	d00b      	beq.n	7878 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7860:	6823      	ldr	r3, [r4, #0]
    7862:	f023 0302 	bic.w	r3, r3, #2
    7866:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7868:	69e3      	ldr	r3, [r4, #28]
    786a:	f013 0f03 	tst.w	r3, #3
    786e:	d1fb      	bne.n	7868 <_i2c_m_sync_init_impl+0x40>
    7870:	69e3      	ldr	r3, [r4, #28]
    7872:	f013 0f02 	tst.w	r3, #2
    7876:	d1fb      	bne.n	7870 <_i2c_m_sync_init_impl+0x48>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    7878:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    787c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    787e:	69e3      	ldr	r3, [r4, #28]
    7880:	f013 0f03 	tst.w	r3, #3
    7884:	d1fb      	bne.n	787e <_i2c_m_sync_init_impl+0x56>
    7886:	69e3      	ldr	r3, [r4, #28]
    7888:	f013 0f01 	tst.w	r3, #1
    788c:	d1fb      	bne.n	7886 <_i2c_m_sync_init_impl+0x5e>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    788e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7892:	4a1d      	ldr	r2, [pc, #116]	; (7908 <_i2c_m_sync_init_impl+0xe0>)
    7894:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7898:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    789c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    789e:	69e3      	ldr	r3, [r4, #28]
    78a0:	f013 0f03 	tst.w	r3, #3
    78a4:	d1fb      	bne.n	789e <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    78a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    78aa:	4917      	ldr	r1, [pc, #92]	; (7908 <_i2c_m_sync_init_impl+0xe0>)
    78ac:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    78b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    78b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    78b6:	69e3      	ldr	r3, [r4, #28]
    78b8:	f013 0f04 	tst.w	r3, #4
    78bc:	d1fb      	bne.n	78b6 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    78be:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    78c2:	4911      	ldr	r1, [pc, #68]	; (7908 <_i2c_m_sync_init_impl+0xe0>)
    78c4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    78c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    78cc:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    78ce:	f3c2 6301 	ubfx	r3, r2, #24, #2
    78d2:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    78d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    78d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    78da:	2b01      	cmp	r3, #1
    78dc:	bf94      	ite	ls
    78de:	2300      	movls	r3, #0
    78e0:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    78e2:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    78e6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    78e8:	69e3      	ldr	r3, [r4, #28]
    78ea:	f013 0f04 	tst.w	r3, #4
    78ee:	d1fb      	bne.n	78e8 <_i2c_m_sync_init_impl+0xc0>

	service->trise = _i2cms[i].trise;
    78f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    78f4:	4b04      	ldr	r3, [pc, #16]	; (7908 <_i2c_m_sync_init_impl+0xe0>)
    78f6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    78fa:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    78fe:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    7900:	2000      	movs	r0, #0
    7902:	bd38      	pop	{r3, r4, r5, pc}
    7904:	00007601 	.word	0x00007601
    7908:	0000bd08 	.word	0x0000bd08

0000790c <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    790c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    790e:	f013 0f01 	tst.w	r3, #1
    7912:	d109      	bne.n	7928 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7914:	6803      	ldr	r3, [r0, #0]
    7916:	f043 0302 	orr.w	r3, r3, #2
    791a:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    791c:	69c3      	ldr	r3, [r0, #28]
    791e:	f013 0f03 	tst.w	r3, #3
    7922:	d1fb      	bne.n	791c <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    7924:	2000      	movs	r0, #0
    7926:	4770      	bx	lr
		return ERR_BUSY;
    7928:	f06f 0003 	mvn.w	r0, #3
}
    792c:	4770      	bx	lr

0000792e <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    792e:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    7930:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    7932:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    7934:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    7936:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    7938:	f013 0f01 	tst.w	r3, #1
    793c:	d109      	bne.n	7952 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    793e:	f013 0f04 	tst.w	r3, #4
    7942:	d109      	bne.n	7958 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    7944:	f013 0f02 	tst.w	r3, #2
    7948:	d109      	bne.n	795e <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    794a:	f013 0f80 	tst.w	r3, #128	; 0x80
    794e:	d10b      	bne.n	7968 <_spi_handler+0x3a>
    7950:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    7952:	6883      	ldr	r3, [r0, #8]
    7954:	4798      	blx	r3
    7956:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    7958:	68c3      	ldr	r3, [r0, #12]
    795a:	4798      	blx	r3
    795c:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    795e:	2302      	movs	r3, #2
    7960:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    7962:	6903      	ldr	r3, [r0, #16]
    7964:	4798      	blx	r3
    7966:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    7968:	2304      	movs	r3, #4
    796a:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    796c:	2380      	movs	r3, #128	; 0x80
    796e:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    7970:	6943      	ldr	r3, [r0, #20]
    7972:	f06f 0112 	mvn.w	r1, #18
    7976:	4798      	blx	r3
	}
}
    7978:	e7ea      	b.n	7950 <_spi_handler+0x22>
	...

0000797c <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    797c:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    797e:	4b03      	ldr	r3, [pc, #12]	; (798c <_spi_get_tx_dma_channel+0x10>)
    7980:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    7982:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    7984:	bf0c      	ite	eq
    7986:	2008      	moveq	r0, #8
    7988:	2000      	movne	r0, #0
    798a:	bd08      	pop	{r3, pc}
    798c:	000073cd 	.word	0x000073cd

00007990 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    7990:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    7992:	4b03      	ldr	r3, [pc, #12]	; (79a0 <_spi_get_rx_dma_channel+0x10>)
    7994:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    7996:	2807      	cmp	r0, #7
    7998:	bf8c      	ite	hi
    799a:	2000      	movhi	r0, #0
    799c:	2001      	movls	r0, #1
    799e:	bd08      	pop	{r3, pc}
    79a0:	000073cd 	.word	0x000073cd

000079a4 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    79a4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    79a6:	6883      	ldr	r3, [r0, #8]
    79a8:	689b      	ldr	r3, [r3, #8]
    79aa:	b103      	cbz	r3, 79ae <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    79ac:	4798      	blx	r3
    79ae:	bd08      	pop	{r3, pc}

000079b0 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    79b0:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    79b2:	6883      	ldr	r3, [r0, #8]
    79b4:	685b      	ldr	r3, [r3, #4]
    79b6:	b103      	cbz	r3, 79ba <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    79b8:	4798      	blx	r3
    79ba:	bd08      	pop	{r3, pc}

000079bc <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    79bc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    79be:	6883      	ldr	r3, [r0, #8]
    79c0:	68db      	ldr	r3, [r3, #12]
    79c2:	b103      	cbz	r3, 79c6 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    79c4:	4798      	blx	r3
    79c6:	bd08      	pop	{r3, pc}

000079c8 <_usart_sync_init>:
{
    79c8:	b508      	push	{r3, lr}
	device->hw = hw;
    79ca:	6001      	str	r1, [r0, #0]
	return _usart_init(hw);
    79cc:	4608      	mov	r0, r1
    79ce:	4b01      	ldr	r3, [pc, #4]	; (79d4 <_usart_sync_init+0xc>)
    79d0:	4798      	blx	r3
}
    79d2:	bd08      	pop	{r3, pc}
    79d4:	000074e1 	.word	0x000074e1

000079d8 <_usart_async_init>:
{
    79d8:	b570      	push	{r4, r5, r6, lr}
    79da:	4606      	mov	r6, r0
    79dc:	460d      	mov	r5, r1
	init_status = _usart_init(hw);
    79de:	4608      	mov	r0, r1
    79e0:	4b14      	ldr	r3, [pc, #80]	; (7a34 <_usart_async_init+0x5c>)
    79e2:	4798      	blx	r3
	if (init_status) {
    79e4:	4604      	mov	r4, r0
    79e6:	b108      	cbz	r0, 79ec <_usart_async_init+0x14>
}
    79e8:	4620      	mov	r0, r4
    79ea:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    79ec:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    79ee:	4631      	mov	r1, r6
    79f0:	4628      	mov	r0, r5
    79f2:	4b11      	ldr	r3, [pc, #68]	; (7a38 <_usart_async_init+0x60>)
    79f4:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    79f6:	4628      	mov	r0, r5
    79f8:	4b10      	ldr	r3, [pc, #64]	; (7a3c <_usart_async_init+0x64>)
    79fa:	4798      	blx	r3
    79fc:	1d01      	adds	r1, r0, #4
    79fe:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a00:	2501      	movs	r5, #1
    7a02:	f000 021f 	and.w	r2, r0, #31
    7a06:	fa05 f202 	lsl.w	r2, r5, r2
    7a0a:	0943      	lsrs	r3, r0, #5
    7a0c:	009b      	lsls	r3, r3, #2
    7a0e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7a12:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7a1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7a1e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a22:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a26:	601a      	str	r2, [r3, #0]
		irq++;
    7a28:	3001      	adds	r0, #1
    7a2a:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7a2c:	4281      	cmp	r1, r0
    7a2e:	d1e8      	bne.n	7a02 <_usart_async_init+0x2a>
    7a30:	e7da      	b.n	79e8 <_usart_async_init+0x10>
    7a32:	bf00      	nop
    7a34:	000074e1 	.word	0x000074e1
    7a38:	00007481 	.word	0x00007481
    7a3c:	00007815 	.word	0x00007815

00007a40 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    7a40:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7a42:	6813      	ldr	r3, [r2, #0]
    7a44:	f043 0302 	orr.w	r3, r3, #2
    7a48:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7a4a:	69d3      	ldr	r3, [r2, #28]
    7a4c:	f013 0f03 	tst.w	r3, #3
    7a50:	d1fb      	bne.n	7a4a <_usart_sync_enable+0xa>
}
    7a52:	4770      	bx	lr

00007a54 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7a54:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    7a56:	6299      	str	r1, [r3, #40]	; 0x28
    7a58:	4770      	bx	lr

00007a5a <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7a5a:	6983      	ldr	r3, [r0, #24]
    7a5c:	6299      	str	r1, [r3, #40]	; 0x28
    7a5e:	4770      	bx	lr

00007a60 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    7a60:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    7a62:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7a64:	b2c0      	uxtb	r0, r0
    7a66:	4770      	bx	lr

00007a68 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    7a68:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    7a6a:	7e18      	ldrb	r0, [r3, #24]
}
    7a6c:	f000 0001 	and.w	r0, r0, #1
    7a70:	4770      	bx	lr

00007a72 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    7a72:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7a74:	7e18      	ldrb	r0, [r3, #24]
}
    7a76:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7a7a:	4770      	bx	lr

00007a7c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    7a7c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    7a7e:	7e18      	ldrb	r0, [r3, #24]
}
    7a80:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7a84:	4770      	bx	lr

00007a86 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    7a86:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    7a88:	2201      	movs	r2, #1
    7a8a:	759a      	strb	r2, [r3, #22]
    7a8c:	4770      	bx	lr

00007a8e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    7a8e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    7a90:	2202      	movs	r2, #2
    7a92:	759a      	strb	r2, [r3, #22]
    7a94:	4770      	bx	lr
	...

00007a98 <_i2c_m_async_init>:
{
    7a98:	b570      	push	{r4, r5, r6, lr}
    7a9a:	4606      	mov	r6, r0
    7a9c:	460d      	mov	r5, r1
	i2c_dev->hw = hw;
    7a9e:	6101      	str	r1, [r0, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7aa0:	4b13      	ldr	r3, [pc, #76]	; (7af0 <_i2c_m_async_init+0x58>)
    7aa2:	4798      	blx	r3
	if (init_status) {
    7aa4:	4604      	mov	r4, r0
    7aa6:	b108      	cbz	r0, 7aac <_i2c_m_async_init+0x14>
}
    7aa8:	4620      	mov	r0, r4
    7aaa:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    7aac:	4631      	mov	r1, r6
    7aae:	4628      	mov	r0, r5
    7ab0:	4b10      	ldr	r3, [pc, #64]	; (7af4 <_i2c_m_async_init+0x5c>)
    7ab2:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7ab4:	4628      	mov	r0, r5
    7ab6:	4b10      	ldr	r3, [pc, #64]	; (7af8 <_i2c_m_async_init+0x60>)
    7ab8:	4798      	blx	r3
    7aba:	1d01      	adds	r1, r0, #4
    7abc:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7abe:	2501      	movs	r5, #1
    7ac0:	f000 021f 	and.w	r2, r0, #31
    7ac4:	fa05 f202 	lsl.w	r2, r5, r2
    7ac8:	0943      	lsrs	r3, r0, #5
    7aca:	009b      	lsls	r3, r3, #2
    7acc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7ad0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7ad8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7adc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ae0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ae4:	601a      	str	r2, [r3, #0]
		irq++;
    7ae6:	3001      	adds	r0, #1
    7ae8:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7aea:	4281      	cmp	r1, r0
    7aec:	d1e8      	bne.n	7ac0 <_i2c_m_async_init+0x28>
    7aee:	e7db      	b.n	7aa8 <_i2c_m_async_init+0x10>
    7af0:	00007829 	.word	0x00007829
    7af4:	00007481 	.word	0x00007481
    7af8:	00007815 	.word	0x00007815

00007afc <_i2c_m_async_transfer>:
{
    7afc:	b410      	push	{r4}
    7afe:	4604      	mov	r4, r0
	if (msg->len == 0) {
    7b00:	6848      	ldr	r0, [r1, #4]
    7b02:	2800      	cmp	r0, #0
    7b04:	d042      	beq.n	7b8c <_i2c_m_async_transfer+0x90>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7b06:	8863      	ldrh	r3, [r4, #2]
    7b08:	f413 7f80 	tst.w	r3, #256	; 0x100
    7b0c:	d162      	bne.n	7bd4 <_i2c_m_async_transfer+0xd8>
	msg->flags |= I2C_M_BUSY;
    7b0e:	884b      	ldrh	r3, [r1, #2]
    7b10:	b29b      	uxth	r3, r3
    7b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7b16:	804b      	strh	r3, [r1, #2]
	i2c_dev->service.msg = *msg;
    7b18:	c907      	ldmia	r1, {r0, r1, r2}
    7b1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    7b1e:	6922      	ldr	r2, [r4, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7b20:	6853      	ldr	r3, [r2, #4]
    7b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7b26:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7b28:	69d3      	ldr	r3, [r2, #28]
    7b2a:	f013 0f04 	tst.w	r3, #4
    7b2e:	d1fb      	bne.n	7b28 <_i2c_m_async_transfer+0x2c>
	void *             hw    = i2c_dev->hw;
    7b30:	6923      	ldr	r3, [r4, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7b32:	6819      	ldr	r1, [r3, #0]
	if (msg->len == 1 && sclsm) {
    7b34:	6862      	ldr	r2, [r4, #4]
    7b36:	2a01      	cmp	r2, #1
    7b38:	d02b      	beq.n	7b92 <_i2c_m_async_transfer+0x96>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7b3a:	685a      	ldr	r2, [r3, #4]
    7b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    7b40:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7b42:	69da      	ldr	r2, [r3, #28]
    7b44:	f012 0f04 	tst.w	r2, #4
    7b48:	d1fb      	bne.n	7b42 <_i2c_m_async_transfer+0x46>
	if (msg->addr & I2C_M_TEN) {
    7b4a:	8822      	ldrh	r2, [r4, #0]
    7b4c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    7b50:	d02b      	beq.n	7baa <_i2c_m_async_transfer+0xae>
		if (msg->flags & I2C_M_RD) {
    7b52:	8861      	ldrh	r1, [r4, #2]
    7b54:	f011 0f01 	tst.w	r1, #1
    7b58:	d004      	beq.n	7b64 <_i2c_m_async_transfer+0x68>
			msg->flags |= I2C_M_TEN;
    7b5a:	8861      	ldrh	r1, [r4, #2]
    7b5c:	b289      	uxth	r1, r1
    7b5e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    7b62:	8061      	strh	r1, [r4, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7b64:	f240 71fe 	movw	r1, #2046	; 0x7fe
    7b68:	ea01 0142 	and.w	r1, r1, r2, lsl #1
    7b6c:	69da      	ldr	r2, [r3, #28]
    7b6e:	f012 0f04 	tst.w	r2, #4
    7b72:	d1fb      	bne.n	7b6c <_i2c_m_async_transfer+0x70>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7b76:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    7b7e:	430a      	orrs	r2, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7b80:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7b82:	69da      	ldr	r2, [r3, #28]
    7b84:	f012 0f04 	tst.w	r2, #4
    7b88:	d1fb      	bne.n	7b82 <_i2c_m_async_transfer+0x86>
	return ERR_NONE;
    7b8a:	2000      	movs	r0, #0
}
    7b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    7b90:	4770      	bx	lr
	if (msg->len == 1 && sclsm) {
    7b92:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
    7b96:	d0d0      	beq.n	7b3a <_i2c_m_async_transfer+0x3e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7b98:	685a      	ldr	r2, [r3, #4]
    7b9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    7b9e:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7ba0:	69da      	ldr	r2, [r3, #28]
    7ba2:	f012 0f04 	tst.w	r2, #4
    7ba6:	d1fb      	bne.n	7ba0 <_i2c_m_async_transfer+0xa4>
    7ba8:	e7cf      	b.n	7b4a <_i2c_m_async_transfer+0x4e>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7baa:	8860      	ldrh	r0, [r4, #2]
    7bac:	0051      	lsls	r1, r2, #1
    7bae:	b2c9      	uxtb	r1, r1
    7bb0:	f000 0201 	and.w	r2, r0, #1
    7bb4:	4311      	orrs	r1, r2
    7bb6:	69da      	ldr	r2, [r3, #28]
    7bb8:	f012 0f04 	tst.w	r2, #4
    7bbc:	d1fb      	bne.n	7bb6 <_i2c_m_async_transfer+0xba>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7bc0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7bc4:	4311      	orrs	r1, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7bc6:	6259      	str	r1, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7bc8:	69da      	ldr	r2, [r3, #28]
    7bca:	f012 0f04 	tst.w	r2, #4
    7bce:	d1fb      	bne.n	7bc8 <_i2c_m_async_transfer+0xcc>
	return ERR_NONE;
    7bd0:	2000      	movs	r0, #0
    7bd2:	e7db      	b.n	7b8c <_i2c_m_async_transfer+0x90>
		return ERR_BUSY;
    7bd4:	f06f 0003 	mvn.w	r0, #3
    7bd8:	e7d8      	b.n	7b8c <_i2c_m_async_transfer+0x90>

00007bda <_i2c_m_async_register_callback>:
	switch (type) {
    7bda:	2901      	cmp	r1, #1
    7bdc:	d006      	beq.n	7bec <_i2c_m_async_register_callback+0x12>
    7bde:	b119      	cbz	r1, 7be8 <_i2c_m_async_register_callback+0xe>
    7be0:	2902      	cmp	r1, #2
    7be2:	d005      	beq.n	7bf0 <_i2c_m_async_register_callback+0x16>
}
    7be4:	2000      	movs	r0, #0
    7be6:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    7be8:	6142      	str	r2, [r0, #20]
		break;
    7bea:	e7fb      	b.n	7be4 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    7bec:	6182      	str	r2, [r0, #24]
		break;
    7bee:	e7f9      	b.n	7be4 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    7bf0:	61c2      	str	r2, [r0, #28]
		break;
    7bf2:	e7f7      	b.n	7be4 <_i2c_m_async_register_callback+0xa>

00007bf4 <SERCOM0_0_Handler>:
{
    7bf4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7bf6:	4b02      	ldr	r3, [pc, #8]	; (7c00 <SERCOM0_0_Handler+0xc>)
    7bf8:	6818      	ldr	r0, [r3, #0]
    7bfa:	4b02      	ldr	r3, [pc, #8]	; (7c04 <SERCOM0_0_Handler+0x10>)
    7bfc:	4798      	blx	r3
    7bfe:	bd08      	pop	{r3, pc}
    7c00:	2000047c 	.word	0x2000047c
    7c04:	00007411 	.word	0x00007411

00007c08 <SERCOM0_1_Handler>:
{
    7c08:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7c0a:	4b02      	ldr	r3, [pc, #8]	; (7c14 <SERCOM0_1_Handler+0xc>)
    7c0c:	6818      	ldr	r0, [r3, #0]
    7c0e:	4b02      	ldr	r3, [pc, #8]	; (7c18 <SERCOM0_1_Handler+0x10>)
    7c10:	4798      	blx	r3
    7c12:	bd08      	pop	{r3, pc}
    7c14:	2000047c 	.word	0x2000047c
    7c18:	00007411 	.word	0x00007411

00007c1c <SERCOM0_2_Handler>:
{
    7c1c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7c1e:	4b02      	ldr	r3, [pc, #8]	; (7c28 <SERCOM0_2_Handler+0xc>)
    7c20:	6818      	ldr	r0, [r3, #0]
    7c22:	4b02      	ldr	r3, [pc, #8]	; (7c2c <SERCOM0_2_Handler+0x10>)
    7c24:	4798      	blx	r3
    7c26:	bd08      	pop	{r3, pc}
    7c28:	2000047c 	.word	0x2000047c
    7c2c:	00007411 	.word	0x00007411

00007c30 <SERCOM0_3_Handler>:
{
    7c30:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7c32:	4b02      	ldr	r3, [pc, #8]	; (7c3c <SERCOM0_3_Handler+0xc>)
    7c34:	6818      	ldr	r0, [r3, #0]
    7c36:	4b02      	ldr	r3, [pc, #8]	; (7c40 <SERCOM0_3_Handler+0x10>)
    7c38:	4798      	blx	r3
    7c3a:	bd08      	pop	{r3, pc}
    7c3c:	2000047c 	.word	0x2000047c
    7c40:	00007411 	.word	0x00007411

00007c44 <SERCOM1_0_Handler>:
{
    7c44:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7c46:	4b02      	ldr	r3, [pc, #8]	; (7c50 <SERCOM1_0_Handler+0xc>)
    7c48:	6858      	ldr	r0, [r3, #4]
    7c4a:	4b02      	ldr	r3, [pc, #8]	; (7c54 <SERCOM1_0_Handler+0x10>)
    7c4c:	4798      	blx	r3
    7c4e:	bd08      	pop	{r3, pc}
    7c50:	2000047c 	.word	0x2000047c
    7c54:	00007411 	.word	0x00007411

00007c58 <SERCOM1_1_Handler>:
{
    7c58:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7c5a:	4b02      	ldr	r3, [pc, #8]	; (7c64 <SERCOM1_1_Handler+0xc>)
    7c5c:	6858      	ldr	r0, [r3, #4]
    7c5e:	4b02      	ldr	r3, [pc, #8]	; (7c68 <SERCOM1_1_Handler+0x10>)
    7c60:	4798      	blx	r3
    7c62:	bd08      	pop	{r3, pc}
    7c64:	2000047c 	.word	0x2000047c
    7c68:	00007411 	.word	0x00007411

00007c6c <SERCOM1_2_Handler>:
{
    7c6c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7c6e:	4b02      	ldr	r3, [pc, #8]	; (7c78 <SERCOM1_2_Handler+0xc>)
    7c70:	6858      	ldr	r0, [r3, #4]
    7c72:	4b02      	ldr	r3, [pc, #8]	; (7c7c <SERCOM1_2_Handler+0x10>)
    7c74:	4798      	blx	r3
    7c76:	bd08      	pop	{r3, pc}
    7c78:	2000047c 	.word	0x2000047c
    7c7c:	00007411 	.word	0x00007411

00007c80 <SERCOM1_3_Handler>:
{
    7c80:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7c82:	4b02      	ldr	r3, [pc, #8]	; (7c8c <SERCOM1_3_Handler+0xc>)
    7c84:	6858      	ldr	r0, [r3, #4]
    7c86:	4b02      	ldr	r3, [pc, #8]	; (7c90 <SERCOM1_3_Handler+0x10>)
    7c88:	4798      	blx	r3
    7c8a:	bd08      	pop	{r3, pc}
    7c8c:	2000047c 	.word	0x2000047c
    7c90:	00007411 	.word	0x00007411

00007c94 <SERCOM3_0_Handler>:
{
    7c94:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7c96:	4b02      	ldr	r3, [pc, #8]	; (7ca0 <SERCOM3_0_Handler+0xc>)
    7c98:	6898      	ldr	r0, [r3, #8]
    7c9a:	4b02      	ldr	r3, [pc, #8]	; (7ca4 <SERCOM3_0_Handler+0x10>)
    7c9c:	4798      	blx	r3
    7c9e:	bd08      	pop	{r3, pc}
    7ca0:	2000047c 	.word	0x2000047c
    7ca4:	0000792f 	.word	0x0000792f

00007ca8 <SERCOM3_1_Handler>:
{
    7ca8:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7caa:	4b02      	ldr	r3, [pc, #8]	; (7cb4 <SERCOM3_1_Handler+0xc>)
    7cac:	6898      	ldr	r0, [r3, #8]
    7cae:	4b02      	ldr	r3, [pc, #8]	; (7cb8 <SERCOM3_1_Handler+0x10>)
    7cb0:	4798      	blx	r3
    7cb2:	bd08      	pop	{r3, pc}
    7cb4:	2000047c 	.word	0x2000047c
    7cb8:	0000792f 	.word	0x0000792f

00007cbc <SERCOM3_2_Handler>:
{
    7cbc:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7cbe:	4b02      	ldr	r3, [pc, #8]	; (7cc8 <SERCOM3_2_Handler+0xc>)
    7cc0:	6898      	ldr	r0, [r3, #8]
    7cc2:	4b02      	ldr	r3, [pc, #8]	; (7ccc <SERCOM3_2_Handler+0x10>)
    7cc4:	4798      	blx	r3
    7cc6:	bd08      	pop	{r3, pc}
    7cc8:	2000047c 	.word	0x2000047c
    7ccc:	0000792f 	.word	0x0000792f

00007cd0 <SERCOM3_3_Handler>:
{
    7cd0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7cd2:	4b02      	ldr	r3, [pc, #8]	; (7cdc <SERCOM3_3_Handler+0xc>)
    7cd4:	6898      	ldr	r0, [r3, #8]
    7cd6:	4b02      	ldr	r3, [pc, #8]	; (7ce0 <SERCOM3_3_Handler+0x10>)
    7cd8:	4798      	blx	r3
    7cda:	bd08      	pop	{r3, pc}
    7cdc:	2000047c 	.word	0x2000047c
    7ce0:	0000792f 	.word	0x0000792f

00007ce4 <SERCOM4_0_Handler>:
{
    7ce4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7ce6:	4b02      	ldr	r3, [pc, #8]	; (7cf0 <SERCOM4_0_Handler+0xc>)
    7ce8:	68d8      	ldr	r0, [r3, #12]
    7cea:	4b02      	ldr	r3, [pc, #8]	; (7cf4 <SERCOM4_0_Handler+0x10>)
    7cec:	4798      	blx	r3
    7cee:	bd08      	pop	{r3, pc}
    7cf0:	2000047c 	.word	0x2000047c
    7cf4:	00007411 	.word	0x00007411

00007cf8 <SERCOM4_1_Handler>:
{
    7cf8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7cfa:	4b02      	ldr	r3, [pc, #8]	; (7d04 <SERCOM4_1_Handler+0xc>)
    7cfc:	68d8      	ldr	r0, [r3, #12]
    7cfe:	4b02      	ldr	r3, [pc, #8]	; (7d08 <SERCOM4_1_Handler+0x10>)
    7d00:	4798      	blx	r3
    7d02:	bd08      	pop	{r3, pc}
    7d04:	2000047c 	.word	0x2000047c
    7d08:	00007411 	.word	0x00007411

00007d0c <SERCOM4_2_Handler>:
{
    7d0c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7d0e:	4b02      	ldr	r3, [pc, #8]	; (7d18 <SERCOM4_2_Handler+0xc>)
    7d10:	68d8      	ldr	r0, [r3, #12]
    7d12:	4b02      	ldr	r3, [pc, #8]	; (7d1c <SERCOM4_2_Handler+0x10>)
    7d14:	4798      	blx	r3
    7d16:	bd08      	pop	{r3, pc}
    7d18:	2000047c 	.word	0x2000047c
    7d1c:	00007411 	.word	0x00007411

00007d20 <SERCOM4_3_Handler>:
{
    7d20:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7d22:	4b02      	ldr	r3, [pc, #8]	; (7d2c <SERCOM4_3_Handler+0xc>)
    7d24:	68d8      	ldr	r0, [r3, #12]
    7d26:	4b02      	ldr	r3, [pc, #8]	; (7d30 <SERCOM4_3_Handler+0x10>)
    7d28:	4798      	blx	r3
    7d2a:	bd08      	pop	{r3, pc}
    7d2c:	2000047c 	.word	0x2000047c
    7d30:	00007411 	.word	0x00007411

00007d34 <SERCOM5_0_Handler>:
{
    7d34:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7d36:	4b02      	ldr	r3, [pc, #8]	; (7d40 <SERCOM5_0_Handler+0xc>)
    7d38:	6918      	ldr	r0, [r3, #16]
    7d3a:	4b02      	ldr	r3, [pc, #8]	; (7d44 <SERCOM5_0_Handler+0x10>)
    7d3c:	4798      	blx	r3
    7d3e:	bd08      	pop	{r3, pc}
    7d40:	2000047c 	.word	0x2000047c
    7d44:	00007615 	.word	0x00007615

00007d48 <SERCOM5_1_Handler>:
{
    7d48:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7d4a:	4b02      	ldr	r3, [pc, #8]	; (7d54 <SERCOM5_1_Handler+0xc>)
    7d4c:	6918      	ldr	r0, [r3, #16]
    7d4e:	4b02      	ldr	r3, [pc, #8]	; (7d58 <SERCOM5_1_Handler+0x10>)
    7d50:	4798      	blx	r3
    7d52:	bd08      	pop	{r3, pc}
    7d54:	2000047c 	.word	0x2000047c
    7d58:	00007615 	.word	0x00007615

00007d5c <SERCOM5_2_Handler>:
{
    7d5c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7d5e:	4b02      	ldr	r3, [pc, #8]	; (7d68 <SERCOM5_2_Handler+0xc>)
    7d60:	6918      	ldr	r0, [r3, #16]
    7d62:	4b02      	ldr	r3, [pc, #8]	; (7d6c <SERCOM5_2_Handler+0x10>)
    7d64:	4798      	blx	r3
    7d66:	bd08      	pop	{r3, pc}
    7d68:	2000047c 	.word	0x2000047c
    7d6c:	00007615 	.word	0x00007615

00007d70 <SERCOM5_3_Handler>:
{
    7d70:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7d72:	4b02      	ldr	r3, [pc, #8]	; (7d7c <SERCOM5_3_Handler+0xc>)
    7d74:	6918      	ldr	r0, [r3, #16]
    7d76:	4b02      	ldr	r3, [pc, #8]	; (7d80 <SERCOM5_3_Handler+0x10>)
    7d78:	4798      	blx	r3
    7d7a:	bd08      	pop	{r3, pc}
    7d7c:	2000047c 	.word	0x2000047c
    7d80:	00007615 	.word	0x00007615

00007d84 <SERCOM6_0_Handler>:
{
    7d84:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7d86:	4b02      	ldr	r3, [pc, #8]	; (7d90 <SERCOM6_0_Handler+0xc>)
    7d88:	6958      	ldr	r0, [r3, #20]
    7d8a:	4b02      	ldr	r3, [pc, #8]	; (7d94 <SERCOM6_0_Handler+0x10>)
    7d8c:	4798      	blx	r3
    7d8e:	bd08      	pop	{r3, pc}
    7d90:	2000047c 	.word	0x2000047c
    7d94:	00007411 	.word	0x00007411

00007d98 <SERCOM6_1_Handler>:
{
    7d98:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7d9a:	4b02      	ldr	r3, [pc, #8]	; (7da4 <SERCOM6_1_Handler+0xc>)
    7d9c:	6958      	ldr	r0, [r3, #20]
    7d9e:	4b02      	ldr	r3, [pc, #8]	; (7da8 <SERCOM6_1_Handler+0x10>)
    7da0:	4798      	blx	r3
    7da2:	bd08      	pop	{r3, pc}
    7da4:	2000047c 	.word	0x2000047c
    7da8:	00007411 	.word	0x00007411

00007dac <SERCOM6_2_Handler>:
{
    7dac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7dae:	4b02      	ldr	r3, [pc, #8]	; (7db8 <SERCOM6_2_Handler+0xc>)
    7db0:	6958      	ldr	r0, [r3, #20]
    7db2:	4b02      	ldr	r3, [pc, #8]	; (7dbc <SERCOM6_2_Handler+0x10>)
    7db4:	4798      	blx	r3
    7db6:	bd08      	pop	{r3, pc}
    7db8:	2000047c 	.word	0x2000047c
    7dbc:	00007411 	.word	0x00007411

00007dc0 <SERCOM6_3_Handler>:
{
    7dc0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7dc2:	4b02      	ldr	r3, [pc, #8]	; (7dcc <SERCOM6_3_Handler+0xc>)
    7dc4:	6958      	ldr	r0, [r3, #20]
    7dc6:	4b02      	ldr	r3, [pc, #8]	; (7dd0 <SERCOM6_3_Handler+0x10>)
    7dc8:	4798      	blx	r3
    7dca:	bd08      	pop	{r3, pc}
    7dcc:	2000047c 	.word	0x2000047c
    7dd0:	00007411 	.word	0x00007411

00007dd4 <_spi_m_sync_init>:
{
    7dd4:	b538      	push	{r3, r4, r5, lr}
    7dd6:	4605      	mov	r5, r0
    7dd8:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7dda:	4608      	mov	r0, r1
    7ddc:	4b55      	ldr	r3, [pc, #340]	; (7f34 <_spi_m_sync_init+0x160>)
    7dde:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7de0:	2803      	cmp	r0, #3
    7de2:	d006      	beq.n	7df2 <_spi_m_sync_init+0x1e>
    7de4:	2807      	cmp	r0, #7
    7de6:	bf08      	it	eq
    7de8:	2201      	moveq	r2, #1
    7dea:	d003      	beq.n	7df4 <_spi_m_sync_init+0x20>
		return ERR_INVALID_ARG;
    7dec:	f06f 000c 	mvn.w	r0, #12
}
    7df0:	bd38      	pop	{r3, r4, r5, pc}
		if (sercomspi_regs[i].n == n) {
    7df2:	2200      	movs	r2, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7df4:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7df6:	f013 0f01 	tst.w	r3, #1
    7dfa:	d122      	bne.n	7e42 <_spi_m_sync_init+0x6e>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7dfc:	4b4e      	ldr	r3, [pc, #312]	; (7f38 <_spi_m_sync_init+0x164>)
    7dfe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7e02:	4413      	add	r3, r2
    7e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    7e08:	f003 011c 	and.w	r1, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e0c:	69e3      	ldr	r3, [r4, #28]
    7e0e:	f013 0f03 	tst.w	r3, #3
    7e12:	d1fb      	bne.n	7e0c <_spi_m_sync_init+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7e14:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7e16:	f013 0f02 	tst.w	r3, #2
    7e1a:	d00b      	beq.n	7e34 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7e1c:	6823      	ldr	r3, [r4, #0]
    7e1e:	f023 0302 	bic.w	r3, r3, #2
    7e22:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e24:	69e3      	ldr	r3, [r4, #28]
    7e26:	f013 0f03 	tst.w	r3, #3
    7e2a:	d1fb      	bne.n	7e24 <_spi_m_sync_init+0x50>
    7e2c:	69e3      	ldr	r3, [r4, #28]
    7e2e:	f013 0f02 	tst.w	r3, #2
    7e32:	d1fb      	bne.n	7e2c <_spi_m_sync_init+0x58>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7e34:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7e38:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e3a:	69e3      	ldr	r3, [r4, #28]
    7e3c:	f013 0f03 	tst.w	r3, #3
    7e40:	d1fb      	bne.n	7e3a <_spi_m_sync_init+0x66>
    7e42:	69e3      	ldr	r3, [r4, #28]
    7e44:	f013 0f01 	tst.w	r3, #1
    7e48:	d1fb      	bne.n	7e42 <_spi_m_sync_init+0x6e>
	dev->prvt = hw;
    7e4a:	602c      	str	r4, [r5, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7e4c:	4b3a      	ldr	r3, [pc, #232]	; (7f38 <_spi_m_sync_init+0x164>)
    7e4e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7e52:	4413      	add	r3, r2
    7e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    7e58:	f003 011c 	and.w	r1, r3, #28
    7e5c:	2908      	cmp	r1, #8
    7e5e:	d03e      	beq.n	7ede <_spi_m_sync_init+0x10a>
	hri_sercomspi_write_CTRLA_reg(
    7e60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7e64:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7e68:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e6a:	69e3      	ldr	r3, [r4, #28]
    7e6c:	f013 0f03 	tst.w	r3, #3
    7e70:	d1fb      	bne.n	7e6a <_spi_m_sync_init+0x96>
	    (regs->ctrlb
    7e72:	4b31      	ldr	r3, [pc, #196]	; (7f38 <_spi_m_sync_init+0x164>)
    7e74:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7e78:	4413      	add	r3, r2
    7e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	        | (SERCOM_SPI_CTRLB_RXEN));
    7e7e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7e82:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7e8a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e8c:	69e3      	ldr	r3, [r4, #28]
    7e8e:	f013 0f17 	tst.w	r3, #23
    7e92:	d1fb      	bne.n	7e8c <_spi_m_sync_init+0xb8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7e94:	4b28      	ldr	r3, [pc, #160]	; (7f38 <_spi_m_sync_init+0x164>)
    7e96:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7e9a:	4413      	add	r3, r2
    7e9c:	f893 10bc 	ldrb.w	r1, [r3, #188]	; 0xbc
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7ea0:	7321      	strb	r1, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7ea2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7ea6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7eaa:	4b23      	ldr	r3, [pc, #140]	; (7f38 <_spi_m_sync_init+0x164>)
    7eac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7eb0:	4413      	add	r3, r2
    7eb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    7eb6:	f003 0307 	and.w	r3, r3, #7
    7eba:	2b00      	cmp	r3, #0
    7ebc:	bf0c      	ite	eq
    7ebe:	2301      	moveq	r3, #1
    7ec0:	2302      	movne	r3, #2
    7ec2:	712b      	strb	r3, [r5, #4]
	dev->dummy_byte = regs->dummy_byte;
    7ec4:	4b1c      	ldr	r3, [pc, #112]	; (7f38 <_spi_m_sync_init+0x164>)
    7ec6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7eca:	441a      	add	r2, r3
    7ecc:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
    7ed0:	f892 20bf 	ldrb.w	r2, [r2, #191]	; 0xbf
    7ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7ed8:	80eb      	strh	r3, [r5, #6]
	return ERR_NONE;
    7eda:	2000      	movs	r0, #0
    7edc:	bd38      	pop	{r3, r4, r5, pc}
	hri_sercomspi_write_CTRLA_reg(
    7ede:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7ee2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7ee6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7ee8:	69e3      	ldr	r3, [r4, #28]
    7eea:	f013 0f03 	tst.w	r3, #3
    7eee:	d1fb      	bne.n	7ee8 <_spi_m_sync_init+0x114>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7ef0:	4b11      	ldr	r3, [pc, #68]	; (7f38 <_spi_m_sync_init+0x164>)
    7ef2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7ef6:	4413      	add	r3, r2
    7ef8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7efc:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7f00:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7f08:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7f0c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7f0e:	69e3      	ldr	r3, [r4, #28]
    7f10:	f013 0f17 	tst.w	r3, #23
    7f14:	d1fb      	bne.n	7f0e <_spi_m_sync_init+0x13a>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7f16:	4b08      	ldr	r3, [pc, #32]	; (7f38 <_spi_m_sync_init+0x164>)
    7f18:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7f1c:	4413      	add	r3, r2
    7f1e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7f22:	6261      	str	r1, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7f24:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7f28:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7f2c:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7f2e:	2b00      	cmp	r3, #0
    7f30:	d1fc      	bne.n	7f2c <_spi_m_sync_init+0x158>
    7f32:	e7ba      	b.n	7eaa <_spi_m_sync_init+0xd6>
    7f34:	000073cd 	.word	0x000073cd
    7f38:	0000bd08 	.word	0x0000bd08

00007f3c <_spi_m_async_init>:
{
    7f3c:	b538      	push	{r3, r4, r5, lr}
    7f3e:	4604      	mov	r4, r0
    7f40:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    7f42:	4b15      	ldr	r3, [pc, #84]	; (7f98 <_spi_m_async_init+0x5c>)
    7f44:	4798      	blx	r3
	if (rc < 0) {
    7f46:	2800      	cmp	r0, #0
    7f48:	db24      	blt.n	7f94 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    7f4a:	4621      	mov	r1, r4
    7f4c:	4628      	mov	r0, r5
    7f4e:	4b13      	ldr	r3, [pc, #76]	; (7f9c <_spi_m_async_init+0x60>)
    7f50:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    7f52:	2300      	movs	r3, #0
    7f54:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    7f56:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    7f58:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    7f5a:	4628      	mov	r0, r5
    7f5c:	4b10      	ldr	r3, [pc, #64]	; (7fa0 <_spi_m_async_init+0x64>)
    7f5e:	4798      	blx	r3
    7f60:	1d01      	adds	r1, r0, #4
    7f62:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f64:	2401      	movs	r4, #1
    7f66:	f000 021f 	and.w	r2, r0, #31
    7f6a:	fa04 f202 	lsl.w	r2, r4, r2
    7f6e:	0943      	lsrs	r3, r0, #5
    7f70:	009b      	lsls	r3, r3, #2
    7f72:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7f76:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7f7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7f82:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    7f8a:	3001      	adds	r0, #1
    7f8c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7f8e:	4281      	cmp	r1, r0
    7f90:	d1e9      	bne.n	7f66 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    7f92:	2000      	movs	r0, #0
}
    7f94:	bd38      	pop	{r3, r4, r5, pc}
    7f96:	bf00      	nop
    7f98:	00007dd5 	.word	0x00007dd5
    7f9c:	00007481 	.word	0x00007481
    7fa0:	00007815 	.word	0x00007815

00007fa4 <_spi_m_async_enable_tx>:
	void *hw = dev->prvt;
    7fa4:	6803      	ldr	r3, [r0, #0]
	if (state) {
    7fa6:	b919      	cbnz	r1, 7fb0 <_spi_m_async_enable_tx+0xc>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    7fa8:	2201      	movs	r2, #1
    7faa:	751a      	strb	r2, [r3, #20]
}
    7fac:	2000      	movs	r0, #0
    7fae:	4770      	bx	lr
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    7fb0:	2201      	movs	r2, #1
    7fb2:	759a      	strb	r2, [r3, #22]
    7fb4:	e7fa      	b.n	7fac <_spi_m_async_enable_tx+0x8>

00007fb6 <_spi_m_async_enable_rx>:
	void *hw = dev->prvt;
    7fb6:	6803      	ldr	r3, [r0, #0]
	if (state) {
    7fb8:	b919      	cbnz	r1, 7fc2 <_spi_m_async_enable_rx+0xc>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    7fba:	2204      	movs	r2, #4
    7fbc:	751a      	strb	r2, [r3, #20]
}
    7fbe:	2000      	movs	r0, #0
    7fc0:	4770      	bx	lr
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    7fc2:	2204      	movs	r2, #4
    7fc4:	759a      	strb	r2, [r3, #22]
    7fc6:	e7fa      	b.n	7fbe <_spi_m_async_enable_rx+0x8>

00007fc8 <_spi_m_async_enable_tx_complete>:
	if (state) {
    7fc8:	b921      	cbnz	r1, 7fd4 <_spi_m_async_enable_tx_complete+0xc>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7fca:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    7fcc:	2202      	movs	r2, #2
    7fce:	751a      	strb	r2, [r3, #20]
}
    7fd0:	2000      	movs	r0, #0
    7fd2:	4770      	bx	lr
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7fd4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7fd6:	2202      	movs	r2, #2
    7fd8:	759a      	strb	r2, [r3, #22]
    7fda:	e7f9      	b.n	7fd0 <_spi_m_async_enable_tx_complete+0x8>

00007fdc <_spi_m_async_write_one>:
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    7fdc:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    7fde:	6299      	str	r1, [r3, #40]	; 0x28
}
    7fe0:	2000      	movs	r0, #0
    7fe2:	4770      	bx	lr

00007fe4 <_spi_m_async_read_one>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7fe4:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7fe6:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7fe8:	b280      	uxth	r0, r0
    7fea:	4770      	bx	lr

00007fec <_spi_m_async_register_callback>:
	p_ls[cb_type] = (func_t)func;
    7fec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    7ff0:	608a      	str	r2, [r1, #8]
}
    7ff2:	2000      	movs	r0, #0
    7ff4:	4770      	bx	lr
	...

00007ff8 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    7ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ffc:	4605      	mov	r5, r0
    7ffe:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8000:	4608      	mov	r0, r1
    8002:	4b42      	ldr	r3, [pc, #264]	; (810c <_spi_m_dma_init+0x114>)
    8004:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    8006:	2803      	cmp	r0, #3
    8008:	d007      	beq.n	801a <_spi_m_dma_init+0x22>
    800a:	2807      	cmp	r0, #7
    800c:	bf08      	it	eq
    800e:	2201      	moveq	r2, #1
    8010:	d004      	beq.n	801c <_spi_m_dma_init+0x24>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    8012:	f06f 000c 	mvn.w	r0, #12
	dev->resource->back                 = dev;
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
	dev->resource->dma_cb.error         = _spi_dma_error_occured;

	return ERR_NONE;
}
    8016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sercomspi_regs[i].n == n) {
    801a:	2200      	movs	r2, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    801c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    801e:	f013 0f01 	tst.w	r3, #1
    8022:	d122      	bne.n	806a <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8024:	4b3a      	ldr	r3, [pc, #232]	; (8110 <_spi_m_dma_init+0x118>)
    8026:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    802a:	4413      	add	r3, r2
    802c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    8030:	f003 011c 	and.w	r1, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8034:	69e3      	ldr	r3, [r4, #28]
    8036:	f013 0f03 	tst.w	r3, #3
    803a:	d1fb      	bne.n	8034 <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    803c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    803e:	f013 0f02 	tst.w	r3, #2
    8042:	d00b      	beq.n	805c <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    8044:	6823      	ldr	r3, [r4, #0]
    8046:	f023 0302 	bic.w	r3, r3, #2
    804a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    804c:	69e3      	ldr	r3, [r4, #28]
    804e:	f013 0f03 	tst.w	r3, #3
    8052:	d1fb      	bne.n	804c <_spi_m_dma_init+0x54>
    8054:	69e3      	ldr	r3, [r4, #28]
    8056:	f013 0f02 	tst.w	r3, #2
    805a:	d1fb      	bne.n	8054 <_spi_m_dma_init+0x5c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    805c:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8060:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8062:	69e3      	ldr	r3, [r4, #28]
    8064:	f013 0f03 	tst.w	r3, #3
    8068:	d1fb      	bne.n	8062 <_spi_m_dma_init+0x6a>
    806a:	69e3      	ldr	r3, [r4, #28]
    806c:	f013 0f01 	tst.w	r3, #1
    8070:	d1fb      	bne.n	806a <_spi_m_dma_init+0x72>
	dev->prvt = hw;
    8072:	602c      	str	r4, [r5, #0]
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8074:	4b26      	ldr	r3, [pc, #152]	; (8110 <_spi_m_dma_init+0x118>)
    8076:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    807a:	4413      	add	r3, r2
    807c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	hri_sercomspi_write_CTRLA_reg(
    8080:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8084:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8088:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    808a:	69e3      	ldr	r3, [r4, #28]
    808c:	f013 0f03 	tst.w	r3, #3
    8090:	d1fb      	bne.n	808a <_spi_m_dma_init+0x92>
	    (regs->ctrlb
    8092:	4b1f      	ldr	r3, [pc, #124]	; (8110 <_spi_m_dma_init+0x118>)
    8094:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    8098:	4413      	add	r3, r2
    809a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	        | (SERCOM_SPI_CTRLB_RXEN));
    809e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    80a2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    80a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    80aa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    80ac:	69e3      	ldr	r3, [r4, #28]
    80ae:	f013 0f17 	tst.w	r3, #23
    80b2:	d1fb      	bne.n	80ac <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    80b4:	4b16      	ldr	r3, [pc, #88]	; (8110 <_spi_m_dma_init+0x118>)
    80b6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    80ba:	441a      	add	r2, r3
    80bc:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
	((Sercom *)hw)->SPI.BAUD.reg = data;
    80c0:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    80c2:	f892 30bd 	ldrb.w	r3, [r2, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    80c6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    80ca:	f105 0818 	add.w	r8, r5, #24
    80ce:	4620      	mov	r0, r4
    80d0:	4b10      	ldr	r3, [pc, #64]	; (8114 <_spi_m_dma_init+0x11c>)
    80d2:	4798      	blx	r3
    80d4:	4601      	mov	r1, r0
    80d6:	4640      	mov	r0, r8
    80d8:	4f0f      	ldr	r7, [pc, #60]	; (8118 <_spi_m_dma_init+0x120>)
    80da:	47b8      	blx	r7
	dev->resource->back                 = dev;
    80dc:	69ab      	ldr	r3, [r5, #24]
    80de:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    80e0:	69ab      	ldr	r3, [r5, #24]
    80e2:	4a0e      	ldr	r2, [pc, #56]	; (811c <_spi_m_dma_init+0x124>)
    80e4:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    80e6:	69ab      	ldr	r3, [r5, #24]
    80e8:	4e0d      	ldr	r6, [pc, #52]	; (8120 <_spi_m_dma_init+0x128>)
    80ea:	605e      	str	r6, [r3, #4]
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    80ec:	4620      	mov	r0, r4
    80ee:	4b0d      	ldr	r3, [pc, #52]	; (8124 <_spi_m_dma_init+0x12c>)
    80f0:	4798      	blx	r3
    80f2:	4601      	mov	r1, r0
    80f4:	4640      	mov	r0, r8
    80f6:	47b8      	blx	r7
	dev->resource->back                 = dev;
    80f8:	69ab      	ldr	r3, [r5, #24]
    80fa:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    80fc:	69ab      	ldr	r3, [r5, #24]
    80fe:	4a0a      	ldr	r2, [pc, #40]	; (8128 <_spi_m_dma_init+0x130>)
    8100:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    8102:	69ab      	ldr	r3, [r5, #24]
    8104:	605e      	str	r6, [r3, #4]
	return ERR_NONE;
    8106:	2000      	movs	r0, #0
    8108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    810c:	000073cd 	.word	0x000073cd
    8110:	0000bd08 	.word	0x0000bd08
    8114:	00007991 	.word	0x00007991
    8118:	00006ea5 	.word	0x00006ea5
    811c:	000079a5 	.word	0x000079a5
    8120:	000079bd 	.word	0x000079bd
    8124:	0000797d 	.word	0x0000797d
    8128:	000079b1 	.word	0x000079b1

0000812c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    812c:	b508      	push	{r3, lr}
	ASSERT(dev && dev->prvt);

	return _spi_sync_enable(dev->prvt);
    812e:	6800      	ldr	r0, [r0, #0]
    8130:	4b01      	ldr	r3, [pc, #4]	; (8138 <_spi_m_dma_enable+0xc>)
    8132:	4798      	blx	r3
}
    8134:	bd08      	pop	{r3, pc}
    8136:	bf00      	nop
    8138:	0000790d 	.word	0x0000790d

0000813c <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    813c:	b570      	push	{r4, r5, r6, lr}
    813e:	4605      	mov	r5, r0
    8140:	4614      	mov	r4, r2
	switch (type) {
    8142:	2901      	cmp	r1, #1
    8144:	d00e      	beq.n	8164 <_spi_m_dma_register_callback+0x28>
    8146:	b111      	cbz	r1, 814e <_spi_m_dma_register_callback+0x12>
    8148:	2902      	cmp	r1, #2
    814a:	d016      	beq.n	817a <_spi_m_dma_register_callback+0x3e>
    814c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    814e:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    8150:	6800      	ldr	r0, [r0, #0]
    8152:	4b13      	ldr	r3, [pc, #76]	; (81a0 <_spi_m_dma_register_callback+0x64>)
    8154:	4798      	blx	r3
    8156:	1c22      	adds	r2, r4, #0
    8158:	bf18      	it	ne
    815a:	2201      	movne	r2, #1
    815c:	2100      	movs	r1, #0
    815e:	4b11      	ldr	r3, [pc, #68]	; (81a4 <_spi_m_dma_register_callback+0x68>)
    8160:	4798      	blx	r3
		break;
    8162:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    8164:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    8166:	6800      	ldr	r0, [r0, #0]
    8168:	4b0f      	ldr	r3, [pc, #60]	; (81a8 <_spi_m_dma_register_callback+0x6c>)
    816a:	4798      	blx	r3
    816c:	1c22      	adds	r2, r4, #0
    816e:	bf18      	it	ne
    8170:	2201      	movne	r2, #1
    8172:	2100      	movs	r1, #0
    8174:	4b0b      	ldr	r3, [pc, #44]	; (81a4 <_spi_m_dma_register_callback+0x68>)
    8176:	4798      	blx	r3
		break;
    8178:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    817a:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    817c:	6800      	ldr	r0, [r0, #0]
    817e:	4b0a      	ldr	r3, [pc, #40]	; (81a8 <_spi_m_dma_register_callback+0x6c>)
    8180:	4798      	blx	r3
    8182:	3400      	adds	r4, #0
    8184:	bf18      	it	ne
    8186:	2401      	movne	r4, #1
    8188:	4622      	mov	r2, r4
    818a:	2101      	movs	r1, #1
    818c:	4e05      	ldr	r6, [pc, #20]	; (81a4 <_spi_m_dma_register_callback+0x68>)
    818e:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    8190:	6828      	ldr	r0, [r5, #0]
    8192:	4b03      	ldr	r3, [pc, #12]	; (81a0 <_spi_m_dma_register_callback+0x64>)
    8194:	4798      	blx	r3
    8196:	4622      	mov	r2, r4
    8198:	2101      	movs	r1, #1
    819a:	47b0      	blx	r6
    819c:	bd70      	pop	{r4, r5, r6, pc}
    819e:	bf00      	nop
    81a0:	0000797d 	.word	0x0000797d
    81a4:	00006d7d 	.word	0x00006d7d
    81a8:	00007991 	.word	0x00007991

000081ac <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    81ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81b0:	4607      	mov	r7, r0
    81b2:	468a      	mov	sl, r1
    81b4:	4690      	mov	r8, r2
    81b6:	4699      	mov	r9, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    81b8:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    81ba:	4620      	mov	r0, r4
    81bc:	4b39      	ldr	r3, [pc, #228]	; (82a4 <_spi_m_dma_transfer+0xf8>)
    81be:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    81c0:	2803      	cmp	r0, #3
    81c2:	d048      	beq.n	8256 <_spi_m_dma_transfer+0xaa>
    81c4:	2807      	cmp	r0, #7
    81c6:	bf08      	it	eq
    81c8:	2201      	moveq	r2, #1
    81ca:	d045      	beq.n	8258 <_spi_m_dma_transfer+0xac>
	return NULL;
    81cc:	f04f 0b00 	mov.w	fp, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    81d0:	4620      	mov	r0, r4
    81d2:	4b35      	ldr	r3, [pc, #212]	; (82a8 <_spi_m_dma_transfer+0xfc>)
    81d4:	4798      	blx	r3
    81d6:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    81d8:	4620      	mov	r0, r4
    81da:	4b34      	ldr	r3, [pc, #208]	; (82ac <_spi_m_dma_transfer+0x100>)
    81dc:	4798      	blx	r3
    81de:	4605      	mov	r5, r0

	if (rxbuf) {
    81e0:	f1b8 0f00 	cmp.w	r8, #0
    81e4:	d03d      	beq.n	8262 <_spi_m_dma_transfer+0xb6>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    81e6:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    81e8:	f013 0f04 	tst.w	r3, #4
    81ec:	d107      	bne.n	81fe <_spi_m_dma_transfer+0x52>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    81ee:	6863      	ldr	r3, [r4, #4]
    81f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    81f4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    81f6:	69e3      	ldr	r3, [r4, #28]
    81f8:	f013 0f17 	tst.w	r3, #23
    81fc:	d1fb      	bne.n	81f6 <_spi_m_dma_transfer+0x4a>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    81fe:	6839      	ldr	r1, [r7, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    8200:	3128      	adds	r1, #40	; 0x28
    8202:	4630      	mov	r0, r6
    8204:	4b2a      	ldr	r3, [pc, #168]	; (82b0 <_spi_m_dma_transfer+0x104>)
    8206:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    8208:	4641      	mov	r1, r8
    820a:	4630      	mov	r0, r6
    820c:	4b29      	ldr	r3, [pc, #164]	; (82b4 <_spi_m_dma_transfer+0x108>)
    820e:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    8210:	4649      	mov	r1, r9
    8212:	4630      	mov	r0, r6
    8214:	4b28      	ldr	r3, [pc, #160]	; (82b8 <_spi_m_dma_transfer+0x10c>)
    8216:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    8218:	2100      	movs	r1, #0
    821a:	4630      	mov	r0, r6
    821c:	4b27      	ldr	r3, [pc, #156]	; (82bc <_spi_m_dma_transfer+0x110>)
    821e:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    8220:	f1ba 0f00 	cmp.w	sl, #0
    8224:	d02a      	beq.n	827c <_spi_m_dma_transfer+0xd0>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    8226:	4651      	mov	r1, sl
    8228:	4628      	mov	r0, r5
    822a:	4b21      	ldr	r3, [pc, #132]	; (82b0 <_spi_m_dma_transfer+0x104>)
    822c:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    822e:	6839      	ldr	r1, [r7, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    8230:	3128      	adds	r1, #40	; 0x28
    8232:	4628      	mov	r0, r5
    8234:	4b1f      	ldr	r3, [pc, #124]	; (82b4 <_spi_m_dma_transfer+0x108>)
    8236:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    8238:	2101      	movs	r1, #1
    823a:	4628      	mov	r0, r5
    823c:	4b20      	ldr	r3, [pc, #128]	; (82c0 <_spi_m_dma_transfer+0x114>)
    823e:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    8240:	4649      	mov	r1, r9
    8242:	4628      	mov	r0, r5
    8244:	4b1c      	ldr	r3, [pc, #112]	; (82b8 <_spi_m_dma_transfer+0x10c>)
    8246:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    8248:	2100      	movs	r1, #0
    824a:	4628      	mov	r0, r5
    824c:	4b1b      	ldr	r3, [pc, #108]	; (82bc <_spi_m_dma_transfer+0x110>)
    824e:	4798      	blx	r3

	return ERR_NONE;
}
    8250:	2000      	movs	r0, #0
    8252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    8256:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    8258:	4b1a      	ldr	r3, [pc, #104]	; (82c4 <_spi_m_dma_transfer+0x118>)
    825a:	eb03 1b02 	add.w	fp, r3, r2, lsl #4
    825e:	4493      	add	fp, r2
    8260:	e7b6      	b.n	81d0 <_spi_m_dma_transfer+0x24>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8262:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    8264:	f013 0f04 	tst.w	r3, #4
    8268:	d1da      	bne.n	8220 <_spi_m_dma_transfer+0x74>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    826a:	6863      	ldr	r3, [r4, #4]
    826c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    8270:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8272:	69e3      	ldr	r3, [r4, #28]
    8274:	f013 0f17 	tst.w	r3, #23
    8278:	d1fb      	bne.n	8272 <_spi_m_dma_transfer+0xc6>
    827a:	e7d1      	b.n	8220 <_spi_m_dma_transfer+0x74>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    827c:	f10b 010e 	add.w	r1, fp, #14
    8280:	4628      	mov	r0, r5
    8282:	4b0b      	ldr	r3, [pc, #44]	; (82b0 <_spi_m_dma_transfer+0x104>)
    8284:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    8286:	6839      	ldr	r1, [r7, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    8288:	3128      	adds	r1, #40	; 0x28
    828a:	4628      	mov	r0, r5
    828c:	4b09      	ldr	r3, [pc, #36]	; (82b4 <_spi_m_dma_transfer+0x108>)
    828e:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    8290:	2100      	movs	r1, #0
    8292:	4628      	mov	r0, r5
    8294:	4b0a      	ldr	r3, [pc, #40]	; (82c0 <_spi_m_dma_transfer+0x114>)
    8296:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    8298:	4649      	mov	r1, r9
    829a:	4628      	mov	r0, r5
    829c:	4b06      	ldr	r3, [pc, #24]	; (82b8 <_spi_m_dma_transfer+0x10c>)
    829e:	4798      	blx	r3
    82a0:	e7d2      	b.n	8248 <_spi_m_dma_transfer+0x9c>
    82a2:	bf00      	nop
    82a4:	000073cd 	.word	0x000073cd
    82a8:	00007991 	.word	0x00007991
    82ac:	0000797d 	.word	0x0000797d
    82b0:	00006de1 	.word	0x00006de1
    82b4:	00006dd1 	.word	0x00006dd1
    82b8:	00006e0d 	.word	0x00006e0d
    82bc:	00006e65 	.word	0x00006e65
    82c0:	00006df1 	.word	0x00006df1
    82c4:	0000bdb8 	.word	0x0000bdb8

000082c8 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    82c8:	4b03      	ldr	r3, [pc, #12]	; (82d8 <_delay_init+0x10>)
    82ca:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    82ce:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    82d0:	2205      	movs	r2, #5
    82d2:	601a      	str	r2, [r3, #0]
    82d4:	4770      	bx	lr
    82d6:	bf00      	nop
    82d8:	e000e010 	.word	0xe000e010

000082dc <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    82dc:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    82de:	b303      	cbz	r3, 8322 <_delay_cycles+0x46>
{
    82e0:	b430      	push	{r4, r5}
    82e2:	1e5d      	subs	r5, r3, #1
    82e4:	b2ed      	uxtb	r5, r5
	while (n--) {
    82e6:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    82e8:	4a12      	ldr	r2, [pc, #72]	; (8334 <_delay_cycles+0x58>)
    82ea:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    82ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    82f0:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    82f2:	6813      	ldr	r3, [r2, #0]
    82f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    82f8:	d0fb      	beq.n	82f2 <_delay_cycles+0x16>
	while (n--) {
    82fa:	3801      	subs	r0, #1
    82fc:	b2c0      	uxtb	r0, r0
    82fe:	28ff      	cmp	r0, #255	; 0xff
    8300:	d1f5      	bne.n	82ee <_delay_cycles+0x12>
    8302:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    8306:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    830a:	3101      	adds	r1, #1
    830c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    830e:	4b09      	ldr	r3, [pc, #36]	; (8334 <_delay_cycles+0x58>)
    8310:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    8312:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8314:	461a      	mov	r2, r3
    8316:	6813      	ldr	r3, [r2, #0]
    8318:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    831c:	d0fb      	beq.n	8316 <_delay_cycles+0x3a>
		;
}
    831e:	bc30      	pop	{r4, r5}
    8320:	4770      	bx	lr
	SysTick->LOAD = buf;
    8322:	4b04      	ldr	r3, [pc, #16]	; (8334 <_delay_cycles+0x58>)
    8324:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    8326:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8328:	461a      	mov	r2, r3
    832a:	6813      	ldr	r3, [r2, #0]
    832c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8330:	d0fb      	beq.n	832a <_delay_cycles+0x4e>
    8332:	4770      	bx	lr
    8334:	e000e010 	.word	0xe000e010

00008338 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8338:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    833a:	6813      	ldr	r3, [r2, #0]
    833c:	f043 0302 	orr.w	r3, r3, #2
    8340:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8342:	6913      	ldr	r3, [r2, #16]
    8344:	f013 0f03 	tst.w	r3, #3
    8348:	d1fb      	bne.n	8342 <_tc_timer_start+0xa>
}
    834a:	4770      	bx	lr

0000834c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    834c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    834e:	6813      	ldr	r3, [r2, #0]
    8350:	f023 0302 	bic.w	r3, r3, #2
    8354:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8356:	6913      	ldr	r3, [r2, #16]
    8358:	f013 0f03 	tst.w	r3, #3
    835c:	d1fb      	bne.n	8356 <_tc_timer_stop+0xa>
}
    835e:	4770      	bx	lr

00008360 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    8360:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8362:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8364:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8368:	2a02      	cmp	r2, #2
    836a:	d00a      	beq.n	8382 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    836c:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    836e:	f012 0f0c 	tst.w	r2, #12
    8372:	d10c      	bne.n	838e <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8374:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8376:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8378:	691a      	ldr	r2, [r3, #16]
    837a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    837e:	d1fb      	bne.n	8378 <_tc_timer_set_period+0x18>
    8380:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8382:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8384:	691a      	ldr	r2, [r3, #16]
    8386:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    838a:	d1fb      	bne.n	8384 <_tc_timer_set_period+0x24>
    838c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    838e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8390:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8394:	2a01      	cmp	r2, #1
    8396:	d000      	beq.n	839a <_tc_timer_set_period+0x3a>
    8398:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    839a:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    839c:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    839e:	691a      	ldr	r2, [r3, #16]
    83a0:	f012 0f20 	tst.w	r2, #32
    83a4:	d1fb      	bne.n	839e <_tc_timer_set_period+0x3e>
    83a6:	e7f7      	b.n	8398 <_tc_timer_set_period+0x38>

000083a8 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    83a8:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83aa:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    83ac:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    83b0:	2a02      	cmp	r2, #2
    83b2:	d00a      	beq.n	83ca <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83b4:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    83b6:	f012 0f0c 	tst.w	r2, #12
    83ba:	d10c      	bne.n	83d6 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83bc:	691a      	ldr	r2, [r3, #16]
    83be:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    83c2:	d1fb      	bne.n	83bc <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    83c4:	8b98      	ldrh	r0, [r3, #28]
    83c6:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    83c8:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83ca:	691a      	ldr	r2, [r3, #16]
    83cc:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    83d0:	d1fb      	bne.n	83ca <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    83d2:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    83d4:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83d6:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    83d8:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    83dc:	2a01      	cmp	r2, #1
    83de:	d001      	beq.n	83e4 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    83e0:	2000      	movs	r0, #0
}
    83e2:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83e4:	691a      	ldr	r2, [r3, #16]
    83e6:	f012 0f20 	tst.w	r2, #32
    83ea:	d1fb      	bne.n	83e4 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    83ec:	7ed8      	ldrb	r0, [r3, #27]
    83ee:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    83f0:	4770      	bx	lr

000083f2 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    83f2:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83f4:	6913      	ldr	r3, [r2, #16]
    83f6:	f013 0f03 	tst.w	r3, #3
    83fa:	d1fb      	bne.n	83f4 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83fc:	6810      	ldr	r0, [r2, #0]
}
    83fe:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8402:	4770      	bx	lr

00008404 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8404:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    8406:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8408:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    840a:	f012 0f01 	tst.w	r2, #1
    840e:	d100      	bne.n	8412 <tc_interrupt_handler+0xe>
    8410:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8412:	2201      	movs	r2, #1
    8414:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    8416:	6803      	ldr	r3, [r0, #0]
    8418:	4798      	blx	r3
	}
}
    841a:	e7f9      	b.n	8410 <tc_interrupt_handler+0xc>

0000841c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    841c:	b470      	push	{r4, r5, r6}
    841e:	b089      	sub	sp, #36	; 0x24
    8420:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8422:	466c      	mov	r4, sp
    8424:	4d16      	ldr	r5, [pc, #88]	; (8480 <get_tc_index+0x64>)
    8426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    842a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    842e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8432:	9b00      	ldr	r3, [sp, #0]
    8434:	42b3      	cmp	r3, r6
    8436:	d00c      	beq.n	8452 <get_tc_index+0x36>
    8438:	4630      	mov	r0, r6
    843a:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    843c:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    843e:	f852 1b04 	ldr.w	r1, [r2], #4
    8442:	4281      	cmp	r1, r0
    8444:	d006      	beq.n	8454 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8446:	3301      	adds	r3, #1
    8448:	2b08      	cmp	r3, #8
    844a:	d1f8      	bne.n	843e <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    844c:	2000      	movs	r0, #0
			return i;
    844e:	b240      	sxtb	r0, r0
    8450:	e00d      	b.n	846e <get_tc_index+0x52>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8452:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    8454:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    8458:	d010      	beq.n	847c <get_tc_index+0x60>
    845a:	2b01      	cmp	r3, #1
    845c:	d00a      	beq.n	8474 <get_tc_index+0x58>
    845e:	2b02      	cmp	r3, #2
    8460:	d00a      	beq.n	8478 <get_tc_index+0x5c>
    8462:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8464:	bf08      	it	eq
    8466:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    8468:	d0f1      	beq.n	844e <get_tc_index+0x32>
	return -1;
    846a:	f04f 30ff 	mov.w	r0, #4294967295
}
    846e:	b009      	add	sp, #36	; 0x24
    8470:	bc70      	pop	{r4, r5, r6}
    8472:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8474:	2001      	movs	r0, #1
    8476:	e7ea      	b.n	844e <get_tc_index+0x32>
    8478:	2002      	movs	r0, #2
    847a:	e7e8      	b.n	844e <get_tc_index+0x32>
    847c:	2000      	movs	r0, #0
    847e:	e7e6      	b.n	844e <get_tc_index+0x32>
    8480:	0000bddc 	.word	0x0000bddc

00008484 <_tc_timer_deinit>:
{
    8484:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    8486:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    8488:	4620      	mov	r0, r4
    848a:	4b15      	ldr	r3, [pc, #84]	; (84e0 <_tc_timer_deinit+0x5c>)
    848c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    848e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8492:	4b14      	ldr	r3, [pc, #80]	; (84e4 <_tc_timer_deinit+0x60>)
    8494:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8498:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    849c:	2b00      	cmp	r3, #0
    849e:	db0d      	blt.n	84bc <_tc_timer_deinit+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    84a0:	095a      	lsrs	r2, r3, #5
    84a2:	f003 031f 	and.w	r3, r3, #31
    84a6:	2101      	movs	r1, #1
    84a8:	fa01 f303 	lsl.w	r3, r1, r3
    84ac:	3220      	adds	r2, #32
    84ae:	490e      	ldr	r1, [pc, #56]	; (84e8 <_tc_timer_deinit+0x64>)
    84b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    84b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    84b8:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    84bc:	6823      	ldr	r3, [r4, #0]
    84be:	f023 0302 	bic.w	r3, r3, #2
    84c2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    84c4:	6923      	ldr	r3, [r4, #16]
    84c6:	f013 0f03 	tst.w	r3, #3
    84ca:	d1fb      	bne.n	84c4 <_tc_timer_deinit+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    84cc:	6823      	ldr	r3, [r4, #0]
    84ce:	f043 0301 	orr.w	r3, r3, #1
    84d2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    84d4:	6923      	ldr	r3, [r4, #16]
    84d6:	f013 0f01 	tst.w	r3, #1
    84da:	d1fb      	bne.n	84d4 <_tc_timer_deinit+0x50>
}
    84dc:	bd10      	pop	{r4, pc}
    84de:	bf00      	nop
    84e0:	0000841d 	.word	0x0000841d
    84e4:	0000bddc 	.word	0x0000bddc
    84e8:	e000e100 	.word	0xe000e100

000084ec <_tc_timer_init>:
{
    84ec:	b538      	push	{r3, r4, r5, lr}
    84ee:	4605      	mov	r5, r0
    84f0:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    84f2:	4608      	mov	r0, r1
    84f4:	4b6e      	ldr	r3, [pc, #440]	; (86b0 <_tc_timer_init+0x1c4>)
    84f6:	4798      	blx	r3
	device->hw = hw;
    84f8:	60ec      	str	r4, [r5, #12]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    84fa:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    84fc:	f013 0f01 	tst.w	r3, #1
    8500:	d119      	bne.n	8536 <_tc_timer_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8502:	6923      	ldr	r3, [r4, #16]
    8504:	f013 0f03 	tst.w	r3, #3
    8508:	d1fb      	bne.n	8502 <_tc_timer_init+0x16>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    850a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    850c:	f013 0f02 	tst.w	r3, #2
    8510:	d00b      	beq.n	852a <_tc_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8512:	6823      	ldr	r3, [r4, #0]
    8514:	f023 0302 	bic.w	r3, r3, #2
    8518:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    851a:	6923      	ldr	r3, [r4, #16]
    851c:	f013 0f03 	tst.w	r3, #3
    8520:	d1fb      	bne.n	851a <_tc_timer_init+0x2e>
    8522:	6923      	ldr	r3, [r4, #16]
    8524:	f013 0f02 	tst.w	r3, #2
    8528:	d1fb      	bne.n	8522 <_tc_timer_init+0x36>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    852a:	2301      	movs	r3, #1
    852c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    852e:	6923      	ldr	r3, [r4, #16]
    8530:	f013 0f03 	tst.w	r3, #3
    8534:	d1fb      	bne.n	852e <_tc_timer_init+0x42>
    8536:	6923      	ldr	r3, [r4, #16]
    8538:	f013 0f01 	tst.w	r3, #1
    853c:	d1fb      	bne.n	8536 <_tc_timer_init+0x4a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    853e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8542:	4a5c      	ldr	r2, [pc, #368]	; (86b4 <_tc_timer_init+0x1c8>)
    8544:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    854a:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    854c:	6923      	ldr	r3, [r4, #16]
    854e:	f013 0f03 	tst.w	r3, #3
    8552:	d1fb      	bne.n	854c <_tc_timer_init+0x60>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8554:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8558:	4956      	ldr	r1, [pc, #344]	; (86b4 <_tc_timer_init+0x1c8>)
    855a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    855e:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    8562:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8566:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    8568:	2301      	movs	r3, #1
    856a:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    856c:	f002 020c 	and.w	r2, r2, #12
    8570:	2a08      	cmp	r2, #8
    8572:	d056      	beq.n	8622 <_tc_timer_init+0x136>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8574:	2a00      	cmp	r2, #0
    8576:	d16b      	bne.n	8650 <_tc_timer_init+0x164>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8578:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    857c:	4a4d      	ldr	r2, [pc, #308]	; (86b4 <_tc_timer_init+0x1c8>)
    857e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8582:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8584:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8586:	6923      	ldr	r3, [r4, #16]
    8588:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    858c:	d1fb      	bne.n	8586 <_tc_timer_init+0x9a>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    858e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8592:	4a48      	ldr	r2, [pc, #288]	; (86b4 <_tc_timer_init+0x1c8>)
    8594:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8598:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    859a:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    859c:	6923      	ldr	r3, [r4, #16]
    859e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    85a2:	d1fb      	bne.n	859c <_tc_timer_init+0xb0>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    85a4:	2301      	movs	r3, #1
    85a6:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    85a8:	4b43      	ldr	r3, [pc, #268]	; (86b8 <_tc_timer_init+0x1cc>)
    85aa:	429c      	cmp	r4, r3
    85ac:	d077      	beq.n	869e <_tc_timer_init+0x1b2>
	if (hw == TC1) {
    85ae:	4b43      	ldr	r3, [pc, #268]	; (86bc <_tc_timer_init+0x1d0>)
    85b0:	429c      	cmp	r4, r3
    85b2:	d077      	beq.n	86a4 <_tc_timer_init+0x1b8>
	if (hw == TC2) {
    85b4:	4b42      	ldr	r3, [pc, #264]	; (86c0 <_tc_timer_init+0x1d4>)
    85b6:	429c      	cmp	r4, r3
    85b8:	d077      	beq.n	86aa <_tc_timer_init+0x1be>
	if (hw == TC3) {
    85ba:	4b42      	ldr	r3, [pc, #264]	; (86c4 <_tc_timer_init+0x1d8>)
    85bc:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    85be:	bf04      	itt	eq
    85c0:	4b41      	ldreq	r3, [pc, #260]	; (86c8 <_tc_timer_init+0x1dc>)
    85c2:	60dd      	streq	r5, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    85c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    85c8:	4a3a      	ldr	r2, [pc, #232]	; (86b4 <_tc_timer_init+0x1c8>)
    85ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    85ce:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    85d2:	2b00      	cmp	r3, #0
    85d4:	db23      	blt.n	861e <_tc_timer_init+0x132>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    85d6:	095a      	lsrs	r2, r3, #5
    85d8:	f003 031f 	and.w	r3, r3, #31
    85dc:	2101      	movs	r1, #1
    85de:	fa01 f303 	lsl.w	r3, r1, r3
    85e2:	3220      	adds	r2, #32
    85e4:	4939      	ldr	r1, [pc, #228]	; (86cc <_tc_timer_init+0x1e0>)
    85e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    85ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    85ee:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    85f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    85f6:	4b2f      	ldr	r3, [pc, #188]	; (86b4 <_tc_timer_init+0x1c8>)
    85f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    85fc:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8600:	2b00      	cmp	r3, #0
    8602:	db0c      	blt.n	861e <_tc_timer_init+0x132>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8604:	0959      	lsrs	r1, r3, #5
    8606:	f003 031f 	and.w	r3, r3, #31
    860a:	2201      	movs	r2, #1
    860c:	fa02 f303 	lsl.w	r3, r2, r3
    8610:	4a2e      	ldr	r2, [pc, #184]	; (86cc <_tc_timer_init+0x1e0>)
    8612:	f101 0060 	add.w	r0, r1, #96	; 0x60
    8616:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    861a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    861e:	2000      	movs	r0, #0
    8620:	bd38      	pop	{r3, r4, r5, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8622:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8626:	4a23      	ldr	r2, [pc, #140]	; (86b4 <_tc_timer_init+0x1c8>)
    8628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    862e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8630:	6923      	ldr	r3, [r4, #16]
    8632:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8636:	d1fb      	bne.n	8630 <_tc_timer_init+0x144>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8638:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    863c:	4a1d      	ldr	r2, [pc, #116]	; (86b4 <_tc_timer_init+0x1c8>)
    863e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8644:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8646:	6923      	ldr	r3, [r4, #16]
    8648:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    864c:	d1fb      	bne.n	8646 <_tc_timer_init+0x15a>
    864e:	e7a9      	b.n	85a4 <_tc_timer_init+0xb8>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8650:	2a04      	cmp	r2, #4
    8652:	d1a7      	bne.n	85a4 <_tc_timer_init+0xb8>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8654:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8658:	4a16      	ldr	r2, [pc, #88]	; (86b4 <_tc_timer_init+0x1c8>)
    865a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    865e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    8662:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8664:	6923      	ldr	r3, [r4, #16]
    8666:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    866a:	d1fb      	bne.n	8664 <_tc_timer_init+0x178>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    866c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8670:	4a10      	ldr	r2, [pc, #64]	; (86b4 <_tc_timer_init+0x1c8>)
    8672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    867a:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    867c:	6923      	ldr	r3, [r4, #16]
    867e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8682:	d1fb      	bne.n	867c <_tc_timer_init+0x190>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8684:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8688:	4a0a      	ldr	r2, [pc, #40]	; (86b4 <_tc_timer_init+0x1c8>)
    868a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    868e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    8692:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8694:	6923      	ldr	r3, [r4, #16]
    8696:	f013 0f20 	tst.w	r3, #32
    869a:	d1fb      	bne.n	8694 <_tc_timer_init+0x1a8>
    869c:	e782      	b.n	85a4 <_tc_timer_init+0xb8>
		_tc0_dev = (struct _timer_device *)dev;
    869e:	4b0a      	ldr	r3, [pc, #40]	; (86c8 <_tc_timer_init+0x1dc>)
    86a0:	601d      	str	r5, [r3, #0]
    86a2:	e78a      	b.n	85ba <_tc_timer_init+0xce>
		_tc1_dev = (struct _timer_device *)dev;
    86a4:	4b08      	ldr	r3, [pc, #32]	; (86c8 <_tc_timer_init+0x1dc>)
    86a6:	605d      	str	r5, [r3, #4]
    86a8:	e78c      	b.n	85c4 <_tc_timer_init+0xd8>
		_tc2_dev = (struct _timer_device *)dev;
    86aa:	4b07      	ldr	r3, [pc, #28]	; (86c8 <_tc_timer_init+0x1dc>)
    86ac:	609d      	str	r5, [r3, #8]
    86ae:	e789      	b.n	85c4 <_tc_timer_init+0xd8>
    86b0:	0000841d 	.word	0x0000841d
    86b4:	0000bddc 	.word	0x0000bddc
    86b8:	40003800 	.word	0x40003800
    86bc:	40003c00 	.word	0x40003c00
    86c0:	4101a000 	.word	0x4101a000
    86c4:	4101c000 	.word	0x4101c000
    86c8:	20000494 	.word	0x20000494
    86cc:	e000e100 	.word	0xe000e100

000086d0 <_tc_timer_set_irq>:
{
    86d0:	b508      	push	{r3, lr}
	int8_t      i  = get_tc_index(hw);
    86d2:	68c0      	ldr	r0, [r0, #12]
    86d4:	4b05      	ldr	r3, [pc, #20]	; (86ec <_tc_timer_set_irq+0x1c>)
    86d6:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    86d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    86dc:	4b04      	ldr	r3, [pc, #16]	; (86f0 <_tc_timer_set_irq+0x20>)
    86de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    86e2:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    86e6:	4b03      	ldr	r3, [pc, #12]	; (86f4 <_tc_timer_set_irq+0x24>)
    86e8:	4798      	blx	r3
    86ea:	bd08      	pop	{r3, pc}
    86ec:	0000841d 	.word	0x0000841d
    86f0:	0000bddc 	.word	0x0000bddc
    86f4:	00006ba5 	.word	0x00006ba5

000086f8 <_tc_get_timer>:
}
    86f8:	4800      	ldr	r0, [pc, #0]	; (86fc <_tc_get_timer+0x4>)
    86fa:	4770      	bx	lr
    86fc:	20000020 	.word	0x20000020

00008700 <TC0_Handler>:
{
    8700:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    8702:	4b02      	ldr	r3, [pc, #8]	; (870c <TC0_Handler+0xc>)
    8704:	6818      	ldr	r0, [r3, #0]
    8706:	4b02      	ldr	r3, [pc, #8]	; (8710 <TC0_Handler+0x10>)
    8708:	4798      	blx	r3
    870a:	bd08      	pop	{r3, pc}
    870c:	20000494 	.word	0x20000494
    8710:	00008405 	.word	0x00008405

00008714 <TC1_Handler>:
{
    8714:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    8716:	4b02      	ldr	r3, [pc, #8]	; (8720 <TC1_Handler+0xc>)
    8718:	6858      	ldr	r0, [r3, #4]
    871a:	4b02      	ldr	r3, [pc, #8]	; (8724 <TC1_Handler+0x10>)
    871c:	4798      	blx	r3
    871e:	bd08      	pop	{r3, pc}
    8720:	20000494 	.word	0x20000494
    8724:	00008405 	.word	0x00008405

00008728 <TC2_Handler>:
{
    8728:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    872a:	4b02      	ldr	r3, [pc, #8]	; (8734 <TC2_Handler+0xc>)
    872c:	6898      	ldr	r0, [r3, #8]
    872e:	4b02      	ldr	r3, [pc, #8]	; (8738 <TC2_Handler+0x10>)
    8730:	4798      	blx	r3
    8732:	bd08      	pop	{r3, pc}
    8734:	20000494 	.word	0x20000494
    8738:	00008405 	.word	0x00008405

0000873c <TC3_Handler>:
{
    873c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    873e:	4b02      	ldr	r3, [pc, #8]	; (8748 <TC3_Handler+0xc>)
    8740:	68d8      	ldr	r0, [r3, #12]
    8742:	4b02      	ldr	r3, [pc, #8]	; (874c <TC3_Handler+0x10>)
    8744:	4798      	blx	r3
    8746:	bd08      	pop	{r3, pc}
    8748:	20000494 	.word	0x20000494
    874c:	00008405 	.word	0x00008405

00008750 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    8750:	2000      	movs	r0, #0
    8752:	4770      	bx	lr

00008754 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8754:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8756:	7c83      	ldrb	r3, [r0, #18]
    8758:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    875c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    875e:	f002 0107 	and.w	r1, r2, #7
    8762:	2901      	cmp	r1, #1
    8764:	d00b      	beq.n	877e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8766:	015a      	lsls	r2, r3, #5
    8768:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    876c:	2110      	movs	r1, #16
    876e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8772:	015b      	lsls	r3, r3, #5
    8774:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8778:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    877c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    877e:	f012 0f40 	tst.w	r2, #64	; 0x40
    8782:	d00c      	beq.n	879e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    8784:	7cc2      	ldrb	r2, [r0, #19]
    8786:	f36f 1286 	bfc	r2, #6, #1
    878a:	74c2      	strb	r2, [r0, #19]
    878c:	015a      	lsls	r2, r3, #5
    878e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8792:	2180      	movs	r1, #128	; 0x80
    8794:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8798:	2140      	movs	r1, #64	; 0x40
    879a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    879e:	7cc2      	ldrb	r2, [r0, #19]
    87a0:	f36f 02c3 	bfc	r2, #3, #1
    87a4:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    87a6:	490a      	ldr	r1, [pc, #40]	; (87d0 <_usb_d_dev_handle_setup+0x7c>)
    87a8:	015a      	lsls	r2, r3, #5
    87aa:	188c      	adds	r4, r1, r2
    87ac:	2500      	movs	r5, #0
    87ae:	72a5      	strb	r5, [r4, #10]
    87b0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    87b2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    87b6:	246f      	movs	r4, #111	; 0x6f
    87b8:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    87bc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    87c0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    87c4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    87c8:	7c80      	ldrb	r0, [r0, #18]
    87ca:	4798      	blx	r3
    87cc:	bd38      	pop	{r3, r4, r5, pc}
    87ce:	bf00      	nop
    87d0:	200004a4 	.word	0x200004a4

000087d4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    87d4:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    87d6:	2320      	movs	r3, #32
    87d8:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    87dc:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    87de:	7c83      	ldrb	r3, [r0, #18]
    87e0:	f003 030f 	and.w	r3, r3, #15
    87e4:	015b      	lsls	r3, r3, #5
    87e6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    87ea:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    87ee:	4b04      	ldr	r3, [pc, #16]	; (8800 <_usb_d_dev_handle_stall+0x2c>)
    87f0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    87f4:	6882      	ldr	r2, [r0, #8]
    87f6:	2101      	movs	r1, #1
    87f8:	7c80      	ldrb	r0, [r0, #18]
    87fa:	4798      	blx	r3
    87fc:	bd08      	pop	{r3, pc}
    87fe:	bf00      	nop
    8800:	200004a4 	.word	0x200004a4

00008804 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    8804:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8806:	7c84      	ldrb	r4, [r0, #18]
    8808:	2cff      	cmp	r4, #255	; 0xff
    880a:	d003      	beq.n	8814 <_usb_d_dev_trans_done+0x10>
    880c:	7cc3      	ldrb	r3, [r0, #19]
    880e:	f013 0f40 	tst.w	r3, #64	; 0x40
    8812:	d100      	bne.n	8816 <_usb_d_dev_trans_done+0x12>
    8814:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    8816:	7cc2      	ldrb	r2, [r0, #19]
    8818:	f36f 1286 	bfc	r2, #6, #1
    881c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    881e:	4a03      	ldr	r2, [pc, #12]	; (882c <_usb_d_dev_trans_done+0x28>)
    8820:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    8824:	6882      	ldr	r2, [r0, #8]
    8826:	4620      	mov	r0, r4
    8828:	47a8      	blx	r5
    882a:	e7f3      	b.n	8814 <_usb_d_dev_trans_done+0x10>
    882c:	200004a4 	.word	0x200004a4

00008830 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8830:	b530      	push	{r4, r5, lr}
    8832:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8834:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    8836:	2425      	movs	r4, #37	; 0x25
    8838:	f88d 4004 	strb.w	r4, [sp, #4]
    883c:	244a      	movs	r4, #74	; 0x4a
    883e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8842:	2bff      	cmp	r3, #255	; 0xff
    8844:	d01e      	beq.n	8884 <_usb_d_dev_trans_stop+0x54>
    8846:	7cc4      	ldrb	r4, [r0, #19]
    8848:	f014 0f40 	tst.w	r4, #64	; 0x40
    884c:	d01a      	beq.n	8884 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    884e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    8852:	b1c9      	cbz	r1, 8888 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8854:	0163      	lsls	r3, r4, #5
    8856:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    885a:	2580      	movs	r5, #128	; 0x80
    885c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    8860:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    8862:	a902      	add	r1, sp, #8
    8864:	440b      	add	r3, r1
    8866:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    886a:	0163      	lsls	r3, r4, #5
    886c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8870:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8874:	0163      	lsls	r3, r4, #5
    8876:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    887a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    887e:	4611      	mov	r1, r2
    8880:	4b05      	ldr	r3, [pc, #20]	; (8898 <_usb_d_dev_trans_stop+0x68>)
    8882:	4798      	blx	r3
}
    8884:	b003      	add	sp, #12
    8886:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8888:	0163      	lsls	r3, r4, #5
    888a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    888e:	2540      	movs	r5, #64	; 0x40
    8890:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    8894:	e7e4      	b.n	8860 <_usb_d_dev_trans_stop+0x30>
    8896:	bf00      	nop
    8898:	00008805 	.word	0x00008805

0000889c <_usb_d_dev_handle_trfail>:
{
    889c:	b530      	push	{r4, r5, lr}
    889e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    88a0:	7c83      	ldrb	r3, [r0, #18]
    88a2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    88a6:	2204      	movs	r2, #4
    88a8:	f88d 2004 	strb.w	r2, [sp, #4]
    88ac:	2208      	movs	r2, #8
    88ae:	f88d 2005 	strb.w	r2, [sp, #5]
    88b2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    88b4:	460c      	mov	r4, r1
    88b6:	b391      	cbz	r1, 891e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    88b8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    88bc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    88c0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    88c4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    88c8:	4a32      	ldr	r2, [pc, #200]	; (8994 <_usb_d_dev_handle_trfail+0xf8>)
    88ca:	440a      	add	r2, r1
    88cc:	7a91      	ldrb	r1, [r2, #10]
    88ce:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    88d0:	2d02      	cmp	r5, #2
    88d2:	d02c      	beq.n	892e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    88d4:	f011 0f02 	tst.w	r1, #2
    88d8:	d045      	beq.n	8966 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    88da:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    88dc:	7a91      	ldrb	r1, [r2, #10]
    88de:	f36f 0141 	bfc	r1, #1, #1
    88e2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    88e4:	aa02      	add	r2, sp, #8
    88e6:	4422      	add	r2, r4
    88e8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    88ec:	015a      	lsls	r2, r3, #5
    88ee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    88f2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    88f6:	015b      	lsls	r3, r3, #5
    88f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    88fc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    8900:	f005 0307 	and.w	r3, r5, #7
    8904:	2b01      	cmp	r3, #1
    8906:	d143      	bne.n	8990 <_usb_d_dev_handle_trfail+0xf4>
    8908:	7cc3      	ldrb	r3, [r0, #19]
    890a:	f013 0f40 	tst.w	r3, #64	; 0x40
    890e:	d03f      	beq.n	8990 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8910:	09d9      	lsrs	r1, r3, #7
    8912:	428c      	cmp	r4, r1
    8914:	d03c      	beq.n	8990 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8916:	2200      	movs	r2, #0
    8918:	4b1f      	ldr	r3, [pc, #124]	; (8998 <_usb_d_dev_handle_trfail+0xfc>)
    891a:	4798      	blx	r3
    891c:	e038      	b.n	8990 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    891e:	0159      	lsls	r1, r3, #5
    8920:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8924:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8928:	f005 0507 	and.w	r5, r5, #7
    892c:	e7ca      	b.n	88c4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    892e:	f011 0f01 	tst.w	r1, #1
    8932:	d0cf      	beq.n	88d4 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8934:	7a91      	ldrb	r1, [r2, #10]
    8936:	f36f 0100 	bfc	r1, #0, #1
    893a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    893c:	aa02      	add	r2, sp, #8
    893e:	4422      	add	r2, r4
    8940:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8944:	015a      	lsls	r2, r3, #5
    8946:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    894a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    894e:	015b      	lsls	r3, r3, #5
    8950:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8954:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8958:	2204      	movs	r2, #4
    895a:	1c21      	adds	r1, r4, #0
    895c:	bf18      	it	ne
    895e:	2101      	movne	r1, #1
    8960:	4b0d      	ldr	r3, [pc, #52]	; (8998 <_usb_d_dev_handle_trfail+0xfc>)
    8962:	4798      	blx	r3
    8964:	e014      	b.n	8990 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    8966:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    896a:	4a0a      	ldr	r2, [pc, #40]	; (8994 <_usb_d_dev_handle_trfail+0xf8>)
    896c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    8970:	2100      	movs	r1, #0
    8972:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8974:	aa02      	add	r2, sp, #8
    8976:	4414      	add	r4, r2
    8978:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    897c:	015a      	lsls	r2, r3, #5
    897e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8982:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8986:	015b      	lsls	r3, r3, #5
    8988:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    898c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    8990:	b003      	add	sp, #12
    8992:	bd30      	pop	{r4, r5, pc}
    8994:	200004a4 	.word	0x200004a4
    8998:	00008831 	.word	0x00008831

0000899c <_usb_d_dev_reset_epts>:
{
    899c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89a0:	4d0c      	ldr	r5, [pc, #48]	; (89d4 <_usb_d_dev_reset_epts+0x38>)
    89a2:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    89a6:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    89aa:	f04f 0803 	mov.w	r8, #3
    89ae:	4f0a      	ldr	r7, [pc, #40]	; (89d8 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    89b0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    89b2:	4641      	mov	r1, r8
    89b4:	4620      	mov	r0, r4
    89b6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    89b8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    89ba:	2300      	movs	r3, #0
    89bc:	74e3      	strb	r3, [r4, #19]
    89be:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    89c0:	42ac      	cmp	r4, r5
    89c2:	d1f6      	bne.n	89b2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    89c4:	22c0      	movs	r2, #192	; 0xc0
    89c6:	4619      	mov	r1, r3
    89c8:	4802      	ldr	r0, [pc, #8]	; (89d4 <_usb_d_dev_reset_epts+0x38>)
    89ca:	4b04      	ldr	r3, [pc, #16]	; (89dc <_usb_d_dev_reset_epts+0x40>)
    89cc:	4798      	blx	r3
    89ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89d2:	bf00      	nop
    89d4:	200004a4 	.word	0x200004a4
    89d8:	00008805 	.word	0x00008805
    89dc:	0000a9ef 	.word	0x0000a9ef

000089e0 <_usb_d_dev_in_next>:
{
    89e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89e4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    89e6:	7c84      	ldrb	r4, [r0, #18]
    89e8:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    89ec:	4688      	mov	r8, r1
    89ee:	2900      	cmp	r1, #0
    89f0:	f000 80a0 	beq.w	8b34 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    89f4:	4b58      	ldr	r3, [pc, #352]	; (8b58 <_usb_d_dev_in_next+0x178>)
    89f6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    89fa:	6958      	ldr	r0, [r3, #20]
    89fc:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8a00:	8a2b      	ldrh	r3, [r5, #16]
    8a02:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8a06:	4293      	cmp	r3, r2
    8a08:	f000 808e 	beq.w	8b28 <_usb_d_dev_in_next+0x148>
    8a0c:	3b01      	subs	r3, #1
    8a0e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8a10:	7cef      	ldrb	r7, [r5, #19]
    8a12:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    8a16:	f1b8 0f00 	cmp.w	r8, #0
    8a1a:	d005      	beq.n	8a28 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8a1c:	0162      	lsls	r2, r4, #5
    8a1e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8a22:	2302      	movs	r3, #2
    8a24:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    8a28:	68a9      	ldr	r1, [r5, #8]
    8a2a:	eb0e 0301 	add.w	r3, lr, r1
    8a2e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    8a30:	686e      	ldr	r6, [r5, #4]
    8a32:	42b3      	cmp	r3, r6
    8a34:	d23f      	bcs.n	8ab6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    8a36:	1af6      	subs	r6, r6, r3
    8a38:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    8a3a:	7cea      	ldrb	r2, [r5, #19]
    8a3c:	f012 0f20 	tst.w	r2, #32
    8a40:	d02d      	beq.n	8a9e <_usb_d_dev_in_next+0xbe>
    8a42:	8a2a      	ldrh	r2, [r5, #16]
    8a44:	4296      	cmp	r6, r2
    8a46:	bf28      	it	cs
    8a48:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8a4a:	6829      	ldr	r1, [r5, #0]
    8a4c:	4632      	mov	r2, r6
    8a4e:	4419      	add	r1, r3
    8a50:	68e8      	ldr	r0, [r5, #12]
    8a52:	4b42      	ldr	r3, [pc, #264]	; (8b5c <_usb_d_dev_in_next+0x17c>)
    8a54:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8a56:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    8a58:	4b3f      	ldr	r3, [pc, #252]	; (8b58 <_usb_d_dev_in_next+0x178>)
    8a5a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8a5e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8a60:	4b3d      	ldr	r3, [pc, #244]	; (8b58 <_usb_d_dev_in_next+0x178>)
    8a62:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8a66:	695a      	ldr	r2, [r3, #20]
    8a68:	f366 020d 	bfi	r2, r6, #0, #14
    8a6c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8a6e:	695a      	ldr	r2, [r3, #20]
    8a70:	f36f 329b 	bfc	r2, #14, #14
    8a74:	615a      	str	r2, [r3, #20]
	if (!isr) {
    8a76:	f1b8 0f00 	cmp.w	r8, #0
    8a7a:	d108      	bne.n	8a8e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    8a7c:	2f01      	cmp	r7, #1
    8a7e:	bf0c      	ite	eq
    8a80:	224e      	moveq	r2, #78	; 0x4e
    8a82:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8a84:	0163      	lsls	r3, r4, #5
    8a86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8a8a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8a8e:	0164      	lsls	r4, r4, #5
    8a90:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8a94:	2380      	movs	r3, #128	; 0x80
    8a96:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    8a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a9e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    8aa2:	bf28      	it	cs
    8aa4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8aa8:	6829      	ldr	r1, [r5, #0]
    8aaa:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    8aac:	4a2a      	ldr	r2, [pc, #168]	; (8b58 <_usb_d_dev_in_next+0x178>)
    8aae:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    8ab2:	6113      	str	r3, [r2, #16]
    8ab4:	e7d4      	b.n	8a60 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    8ab6:	7ceb      	ldrb	r3, [r5, #19]
    8ab8:	f013 0f10 	tst.w	r3, #16
    8abc:	d00f      	beq.n	8ade <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    8abe:	7ceb      	ldrb	r3, [r5, #19]
    8ac0:	f36f 1304 	bfc	r3, #4, #1
    8ac4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8ac6:	4b24      	ldr	r3, [pc, #144]	; (8b58 <_usb_d_dev_in_next+0x178>)
    8ac8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8acc:	695a      	ldr	r2, [r3, #20]
    8ace:	f36f 020d 	bfc	r2, #0, #14
    8ad2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8ad4:	695a      	ldr	r2, [r3, #20]
    8ad6:	f36f 329b 	bfc	r2, #14, #14
    8ada:	615a      	str	r2, [r3, #20]
    8adc:	e7cb      	b.n	8a76 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    8ade:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8ae0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    8ae4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8ae8:	bf0c      	ite	eq
    8aea:	234b      	moveq	r3, #75	; 0x4b
    8aec:	234a      	movne	r3, #74	; 0x4a
    8aee:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    8af2:	8a2a      	ldrh	r2, [r5, #16]
    8af4:	ea00 030e 	and.w	r3, r0, lr
    8af8:	429a      	cmp	r2, r3
    8afa:	d005      	beq.n	8b08 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8afc:	2100      	movs	r1, #0
    8afe:	4628      	mov	r0, r5
    8b00:	4b17      	ldr	r3, [pc, #92]	; (8b60 <_usb_d_dev_in_next+0x180>)
    8b02:	4798      	blx	r3
	return;
    8b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    8b08:	7ceb      	ldrb	r3, [r5, #19]
    8b0a:	f36f 1386 	bfc	r3, #6, #1
    8b0e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8b10:	4b11      	ldr	r3, [pc, #68]	; (8b58 <_usb_d_dev_in_next+0x178>)
    8b12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    8b16:	68a9      	ldr	r1, [r5, #8]
    8b18:	7ca8      	ldrb	r0, [r5, #18]
    8b1a:	4798      	blx	r3
    8b1c:	b9d0      	cbnz	r0, 8b54 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    8b1e:	7ceb      	ldrb	r3, [r5, #19]
    8b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8b24:	74eb      	strb	r3, [r5, #19]
    8b26:	e7e9      	b.n	8afc <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8b28:	7cef      	ldrb	r7, [r5, #19]
    8b2a:	f007 0707 	and.w	r7, r7, #7
    8b2e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8b32:	e773      	b.n	8a1c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8b34:	8a03      	ldrh	r3, [r0, #16]
    8b36:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8b3a:	4293      	cmp	r3, r2
    8b3c:	d107      	bne.n	8b4e <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8b3e:	7cef      	ldrb	r7, [r5, #19]
    8b40:	f007 0707 	and.w	r7, r7, #7
    8b44:	f04f 0e00 	mov.w	lr, #0
    8b48:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8b4c:	e76c      	b.n	8a28 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8b4e:	f04f 0e00 	mov.w	lr, #0
    8b52:	e75b      	b.n	8a0c <_usb_d_dev_in_next+0x2c>
    8b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b58:	200004a4 	.word	0x200004a4
    8b5c:	0000a9d9 	.word	0x0000a9d9
    8b60:	00008805 	.word	0x00008805

00008b64 <_usb_d_dev_out_next>:
{
    8b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b68:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8b6a:	7c85      	ldrb	r5, [r0, #18]
    8b6c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8b70:	4689      	mov	r9, r1
    8b72:	2900      	cmp	r1, #0
    8b74:	d056      	beq.n	8c24 <_usb_d_dev_out_next+0xc0>
    8b76:	4b74      	ldr	r3, [pc, #464]	; (8d48 <_usb_d_dev_out_next+0x1e4>)
    8b78:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8b7c:	685a      	ldr	r2, [r3, #4]
    8b7e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8b82:	685f      	ldr	r7, [r3, #4]
    8b84:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8b88:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8b8a:	8a06      	ldrh	r6, [r0, #16]
    8b8c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8b90:	429e      	cmp	r6, r3
    8b92:	f000 80ba 	beq.w	8d0a <_usb_d_dev_out_next+0x1a6>
    8b96:	3e01      	subs	r6, #1
    8b98:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    8b9a:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8b9e:	f894 8013 	ldrb.w	r8, [r4, #19]
    8ba2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    8ba6:	f1b9 0f00 	cmp.w	r9, #0
    8baa:	d005      	beq.n	8bb8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8bac:	016b      	lsls	r3, r5, #5
    8bae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8bb2:	2201      	movs	r2, #1
    8bb4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8bb8:	7ce3      	ldrb	r3, [r4, #19]
    8bba:	f013 0f20 	tst.w	r3, #32
    8bbe:	d00d      	beq.n	8bdc <_usb_d_dev_out_next+0x78>
    8bc0:	6862      	ldr	r2, [r4, #4]
    8bc2:	2a00      	cmp	r2, #0
    8bc4:	d037      	beq.n	8c36 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8bc6:	68a0      	ldr	r0, [r4, #8]
    8bc8:	1a12      	subs	r2, r2, r0
    8bca:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8bcc:	6823      	ldr	r3, [r4, #0]
    8bce:	42ba      	cmp	r2, r7
    8bd0:	bf28      	it	cs
    8bd2:	463a      	movcs	r2, r7
    8bd4:	68e1      	ldr	r1, [r4, #12]
    8bd6:	4418      	add	r0, r3
    8bd8:	4b5c      	ldr	r3, [pc, #368]	; (8d4c <_usb_d_dev_out_next+0x1e8>)
    8bda:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8bdc:	6863      	ldr	r3, [r4, #4]
    8bde:	b353      	cbz	r3, 8c36 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    8be0:	f1b9 0f00 	cmp.w	r9, #0
    8be4:	d040      	beq.n	8c68 <_usb_d_dev_out_next+0x104>
    8be6:	8a22      	ldrh	r2, [r4, #16]
    8be8:	42ba      	cmp	r2, r7
    8bea:	d93d      	bls.n	8c68 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    8bec:	7ce3      	ldrb	r3, [r4, #19]
    8bee:	f36f 1304 	bfc	r3, #4, #1
    8bf2:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    8bf4:	68a3      	ldr	r3, [r4, #8]
    8bf6:	445b      	add	r3, fp
    8bf8:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    8bfa:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8bfe:	ea4f 1345 	mov.w	r3, r5, lsl #5
    8c02:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8c06:	bf0c      	ite	eq
    8c08:	222d      	moveq	r2, #45	; 0x2d
    8c0a:	2225      	movne	r2, #37	; 0x25
    8c0c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    8c10:	b915      	cbnz	r5, 8c18 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c12:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8c14:	4b4c      	ldr	r3, [pc, #304]	; (8d48 <_usb_d_dev_out_next+0x1e4>)
    8c16:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8c18:	2100      	movs	r1, #0
    8c1a:	4620      	mov	r0, r4
    8c1c:	4b4c      	ldr	r3, [pc, #304]	; (8d50 <_usb_d_dev_out_next+0x1ec>)
    8c1e:	4798      	blx	r3
	return;
    8c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8c24:	8a06      	ldrh	r6, [r0, #16]
    8c26:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8c2a:	429e      	cmp	r6, r3
    8c2c:	d07b      	beq.n	8d26 <_usb_d_dev_out_next+0x1c2>
    8c2e:	f04f 0b00 	mov.w	fp, #0
    8c32:	46da      	mov	sl, fp
    8c34:	e7af      	b.n	8b96 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8c36:	7ce3      	ldrb	r3, [r4, #19]
    8c38:	f013 0f10 	tst.w	r3, #16
    8c3c:	d06c      	beq.n	8d18 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    8c3e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8c40:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8c44:	f043 0320 	orr.w	r3, r3, #32
    8c48:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c4a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8c4c:	493e      	ldr	r1, [pc, #248]	; (8d48 <_usb_d_dev_out_next+0x1e4>)
    8c4e:	016a      	lsls	r2, r5, #5
    8c50:	188b      	adds	r3, r1, r2
    8c52:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8c54:	8a21      	ldrh	r1, [r4, #16]
    8c56:	685a      	ldr	r2, [r3, #4]
    8c58:	f361 329b 	bfi	r2, r1, #14, #14
    8c5c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8c5e:	685a      	ldr	r2, [r3, #4]
    8c60:	f36f 020d 	bfc	r2, #0, #14
    8c64:	605a      	str	r2, [r3, #4]
    8c66:	e01d      	b.n	8ca4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8c68:	68a2      	ldr	r2, [r4, #8]
    8c6a:	4452      	add	r2, sl
    8c6c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    8c6e:	4293      	cmp	r3, r2
    8c70:	d9c3      	bls.n	8bfa <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    8c72:	1a9b      	subs	r3, r3, r2
    8c74:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    8c76:	7ce1      	ldrb	r1, [r4, #19]
    8c78:	f011 0f20 	tst.w	r1, #32
    8c7c:	d026      	beq.n	8ccc <_usb_d_dev_out_next+0x168>
    8c7e:	8a22      	ldrh	r2, [r4, #16]
    8c80:	4293      	cmp	r3, r2
    8c82:	bf28      	it	cs
    8c84:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c86:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8c88:	016a      	lsls	r2, r5, #5
    8c8a:	492f      	ldr	r1, [pc, #188]	; (8d48 <_usb_d_dev_out_next+0x1e4>)
    8c8c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8c8e:	4a2e      	ldr	r2, [pc, #184]	; (8d48 <_usb_d_dev_out_next+0x1e4>)
    8c90:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    8c94:	6851      	ldr	r1, [r2, #4]
    8c96:	f363 319b 	bfi	r1, r3, #14, #14
    8c9a:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8c9c:	6853      	ldr	r3, [r2, #4]
    8c9e:	f36f 030d 	bfc	r3, #0, #14
    8ca2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    8ca4:	f1b9 0f00 	cmp.w	r9, #0
    8ca8:	d108      	bne.n	8cbc <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    8caa:	f1b8 0f01 	cmp.w	r8, #1
    8cae:	d025      	beq.n	8cfc <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    8cb0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8cb2:	016b      	lsls	r3, r5, #5
    8cb4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8cb8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8cbc:	016d      	lsls	r5, r5, #5
    8cbe:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    8cc2:	2340      	movs	r3, #64	; 0x40
    8cc4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    8cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    8ccc:	8a21      	ldrh	r1, [r4, #16]
    8cce:	428b      	cmp	r3, r1
    8cd0:	d90a      	bls.n	8ce8 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8cd6:	d80e      	bhi.n	8cf6 <_usb_d_dev_out_next+0x192>
    8cd8:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8cdc:	6821      	ldr	r1, [r4, #0]
    8cde:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    8ce0:	0169      	lsls	r1, r5, #5
    8ce2:	4819      	ldr	r0, [pc, #100]	; (8d48 <_usb_d_dev_out_next+0x1e4>)
    8ce4:	5042      	str	r2, [r0, r1]
    8ce6:	e7d2      	b.n	8c8e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    8ce8:	428b      	cmp	r3, r1
    8cea:	d2f7      	bcs.n	8cdc <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    8cec:	7ce1      	ldrb	r1, [r4, #19]
    8cee:	f041 0120 	orr.w	r1, r1, #32
    8cf2:	74e1      	strb	r1, [r4, #19]
    8cf4:	e7f2      	b.n	8cdc <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    8cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8cfa:	e7ef      	b.n	8cdc <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    8cfc:	4b12      	ldr	r3, [pc, #72]	; (8d48 <_usb_d_dev_out_next+0x1e4>)
    8cfe:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8d02:	2200      	movs	r2, #0
    8d04:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8d06:	222d      	movs	r2, #45	; 0x2d
    8d08:	e7d3      	b.n	8cb2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    8d0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8d0e:	f890 8013 	ldrb.w	r8, [r0, #19]
    8d12:	f008 0807 	and.w	r8, r8, #7
    8d16:	e749      	b.n	8bac <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    8d18:	f1b9 0f00 	cmp.w	r9, #0
    8d1c:	d10b      	bne.n	8d36 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    8d1e:	68a3      	ldr	r3, [r4, #8]
    8d20:	4453      	add	r3, sl
    8d22:	60a3      	str	r3, [r4, #8]
    8d24:	e769      	b.n	8bfa <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8d26:	f890 8013 	ldrb.w	r8, [r0, #19]
    8d2a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    8d2e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8d30:	46bb      	mov	fp, r7
    8d32:	46ba      	mov	sl, r7
    8d34:	e740      	b.n	8bb8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    8d36:	8a23      	ldrh	r3, [r4, #16]
    8d38:	42bb      	cmp	r3, r7
    8d3a:	f63f af57 	bhi.w	8bec <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    8d3e:	68a3      	ldr	r3, [r4, #8]
    8d40:	4453      	add	r3, sl
    8d42:	60a3      	str	r3, [r4, #8]
    8d44:	e759      	b.n	8bfa <_usb_d_dev_out_next+0x96>
    8d46:	bf00      	nop
    8d48:	200004a4 	.word	0x200004a4
    8d4c:	0000a9d9 	.word	0x0000a9d9
    8d50:	00008805 	.word	0x00008805

00008d54 <_usb_d_dev_handler>:
{
    8d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8d58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d5c:	8c1e      	ldrh	r6, [r3, #32]
    8d5e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    8d60:	b146      	cbz	r6, 8d74 <_usb_d_dev_handler+0x20>
    8d62:	4d96      	ldr	r5, [pc, #600]	; (8fbc <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    8d64:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8d66:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    8d6a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8fd8 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    8d6e:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8fdc <_usb_d_dev_handler+0x288>
    8d72:	e0de      	b.n	8f32 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8d74:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8d76:	8b1b      	ldrh	r3, [r3, #24]
    8d78:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8d7a:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8d7c:	f013 0f04 	tst.w	r3, #4
    8d80:	d11e      	bne.n	8dc0 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8d82:	f413 7f00 	tst.w	r3, #512	; 0x200
    8d86:	d125      	bne.n	8dd4 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8d88:	f013 0f80 	tst.w	r3, #128	; 0x80
    8d8c:	d14f      	bne.n	8e2e <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8d8e:	f013 0f70 	tst.w	r3, #112	; 0x70
    8d92:	d158      	bne.n	8e46 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8d94:	f013 0f08 	tst.w	r3, #8
    8d98:	d178      	bne.n	8e8c <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8d9a:	f013 0f01 	tst.w	r3, #1
    8d9e:	d0e0      	beq.n	8d62 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8da0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8da4:	f240 2201 	movw	r2, #513	; 0x201
    8da8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8daa:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8dac:	2270      	movs	r2, #112	; 0x70
    8dae:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8db0:	4b83      	ldr	r3, [pc, #524]	; (8fc0 <_usb_d_dev_handler+0x26c>)
    8db2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8db6:	2100      	movs	r1, #0
    8db8:	2004      	movs	r0, #4
    8dba:	4798      	blx	r3
    8dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8dc0:	2204      	movs	r2, #4
    8dc2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8dc6:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    8dc8:	4b7d      	ldr	r3, [pc, #500]	; (8fc0 <_usb_d_dev_handler+0x26c>)
    8dca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    8dce:	4798      	blx	r3
    8dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8dd4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8dd8:	f240 2201 	movw	r2, #513	; 0x201
    8ddc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8dde:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8de0:	2270      	movs	r2, #112	; 0x70
    8de2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8de4:	4b76      	ldr	r3, [pc, #472]	; (8fc0 <_usb_d_dev_handler+0x26c>)
    8de6:	891b      	ldrh	r3, [r3, #8]
    8de8:	f003 030f 	and.w	r3, r3, #15
    8dec:	2b03      	cmp	r3, #3
    8dee:	d014      	beq.n	8e1a <_usb_d_dev_handler+0xc6>
    8df0:	2301      	movs	r3, #1
    8df2:	4873      	ldr	r0, [pc, #460]	; (8fc0 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8df4:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8df6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    8dfa:	8912      	ldrh	r2, [r2, #8]
    8dfc:	f002 020f 	and.w	r2, r2, #15
    8e00:	2a03      	cmp	r2, #3
    8e02:	d00b      	beq.n	8e1c <_usb_d_dev_handler+0xc8>
    8e04:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8e06:	2b05      	cmp	r3, #5
    8e08:	d1f4      	bne.n	8df4 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    8e0a:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8e0c:	4b6c      	ldr	r3, [pc, #432]	; (8fc0 <_usb_d_dev_handler+0x26c>)
    8e0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8e12:	2003      	movs	r0, #3
    8e14:	4798      	blx	r3
    8e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8e1a:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8e1c:	4b68      	ldr	r3, [pc, #416]	; (8fc0 <_usb_d_dev_handler+0x26c>)
    8e1e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8e22:	8919      	ldrh	r1, [r3, #8]
    8e24:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    8e28:	2200      	movs	r2, #0
    8e2a:	811a      	strh	r2, [r3, #8]
    8e2c:	e7ee      	b.n	8e0c <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8e2e:	2280      	movs	r2, #128	; 0x80
    8e30:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e34:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8e36:	4b62      	ldr	r3, [pc, #392]	; (8fc0 <_usb_d_dev_handler+0x26c>)
    8e38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8e3c:	2100      	movs	r1, #0
    8e3e:	2005      	movs	r0, #5
    8e40:	4798      	blx	r3
    8e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8e46:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e4a:	2270      	movs	r2, #112	; 0x70
    8e4c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8e4e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8e50:	f240 2201 	movw	r2, #513	; 0x201
    8e54:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8e56:	4b5b      	ldr	r3, [pc, #364]	; (8fc4 <_usb_d_dev_handler+0x270>)
    8e58:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8e5c:	f013 0f01 	tst.w	r3, #1
    8e60:	d00e      	beq.n	8e80 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8e62:	4a58      	ldr	r2, [pc, #352]	; (8fc4 <_usb_d_dev_handler+0x270>)
    8e64:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    8e66:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8e6a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8e6e:	d1f9      	bne.n	8e64 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8e70:	4b53      	ldr	r3, [pc, #332]	; (8fc0 <_usb_d_dev_handler+0x26c>)
    8e72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8e76:	2100      	movs	r1, #0
    8e78:	2002      	movs	r0, #2
    8e7a:	4798      	blx	r3
    8e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8e80:	4a50      	ldr	r2, [pc, #320]	; (8fc4 <_usb_d_dev_handler+0x270>)
    8e82:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8e84:	f413 7f80 	tst.w	r3, #256	; 0x100
    8e88:	d0fb      	beq.n	8e82 <_usb_d_dev_handler+0x12e>
    8e8a:	e7f1      	b.n	8e70 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8e8c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e90:	2400      	movs	r4, #0
    8e92:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8e96:	2208      	movs	r2, #8
    8e98:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8e9a:	2270      	movs	r2, #112	; 0x70
    8e9c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8e9e:	f240 2201 	movw	r2, #513	; 0x201
    8ea2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    8ea4:	4b48      	ldr	r3, [pc, #288]	; (8fc8 <_usb_d_dev_handler+0x274>)
    8ea6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8ea8:	4b45      	ldr	r3, [pc, #276]	; (8fc0 <_usb_d_dev_handler+0x26c>)
    8eaa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8eae:	4621      	mov	r1, r4
    8eb0:	2001      	movs	r0, #1
    8eb2:	4798      	blx	r3
    8eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8eb8:	f011 0f10 	tst.w	r1, #16
    8ebc:	d109      	bne.n	8ed2 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8ebe:	f011 0f40 	tst.w	r1, #64	; 0x40
    8ec2:	d108      	bne.n	8ed6 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8ec4:	f011 0f20 	tst.w	r1, #32
    8ec8:	d02f      	beq.n	8f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8eca:	2100      	movs	r1, #0
    8ecc:	4b3f      	ldr	r3, [pc, #252]	; (8fcc <_usb_d_dev_handler+0x278>)
    8ece:	4798      	blx	r3
    8ed0:	e02b      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    8ed2:	47c8      	blx	r9
    8ed4:	e029      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8ed6:	2101      	movs	r1, #1
    8ed8:	4b3c      	ldr	r3, [pc, #240]	; (8fcc <_usb_d_dev_handler+0x278>)
    8eda:	4798      	blx	r3
    8edc:	e025      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8ede:	f011 0f40 	tst.w	r1, #64	; 0x40
    8ee2:	d111      	bne.n	8f08 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8ee4:	f011 0f08 	tst.w	r1, #8
    8ee8:	d112      	bne.n	8f10 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8eea:	f011 0f02 	tst.w	r1, #2
    8eee:	d112      	bne.n	8f16 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8ef0:	f003 0307 	and.w	r3, r3, #7
    8ef4:	2b01      	cmp	r3, #1
    8ef6:	d118      	bne.n	8f2a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8ef8:	f011 0f04 	tst.w	r1, #4
    8efc:	d10f      	bne.n	8f1e <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8efe:	f011 0f10 	tst.w	r1, #16
    8f02:	d012      	beq.n	8f2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8f04:	47c8      	blx	r9
    8f06:	e010      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8f08:	2101      	movs	r1, #1
    8f0a:	4b30      	ldr	r3, [pc, #192]	; (8fcc <_usb_d_dev_handler+0x278>)
    8f0c:	4798      	blx	r3
    8f0e:	e00c      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    8f10:	2101      	movs	r1, #1
    8f12:	47c0      	blx	r8
    8f14:	e009      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8f16:	2101      	movs	r1, #1
    8f18:	4b2d      	ldr	r3, [pc, #180]	; (8fd0 <_usb_d_dev_handler+0x27c>)
    8f1a:	4798      	blx	r3
    8f1c:	e005      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    8f1e:	2100      	movs	r1, #0
    8f20:	47c0      	blx	r8
    8f22:	e002      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8f24:	2100      	movs	r1, #0
    8f26:	4b29      	ldr	r3, [pc, #164]	; (8fcc <_usb_d_dev_handler+0x278>)
    8f28:	4798      	blx	r3
    8f2a:	3401      	adds	r4, #1
    8f2c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8f2e:	2c1b      	cmp	r4, #27
    8f30:	d042      	beq.n	8fb8 <_usb_d_dev_handler+0x264>
    8f32:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8f34:	7cab      	ldrb	r3, [r5, #18]
    8f36:	2bff      	cmp	r3, #255	; 0xff
    8f38:	d0f7      	beq.n	8f2a <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    8f3a:	f003 030f 	and.w	r3, r3, #15
    8f3e:	2101      	movs	r1, #1
    8f40:	4099      	lsls	r1, r3
    8f42:	4231      	tst	r1, r6
    8f44:	d0f1      	beq.n	8f2a <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8f46:	0159      	lsls	r1, r3, #5
    8f48:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8f4c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    8f50:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    8f52:	015b      	lsls	r3, r3, #5
    8f54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8f58:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    8f5c:	4019      	ands	r1, r3
    8f5e:	d0e4      	beq.n	8f2a <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8f60:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8f64:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8f68:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    8f6c:	f003 0247 	and.w	r2, r3, #71	; 0x47
    8f70:	2a01      	cmp	r2, #1
    8f72:	d0a1      	beq.n	8eb8 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8f74:	f013 0f80 	tst.w	r3, #128	; 0x80
    8f78:	d1b1      	bne.n	8ede <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8f7a:	f011 0f20 	tst.w	r1, #32
    8f7e:	d1d1      	bne.n	8f24 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8f80:	f011 0f04 	tst.w	r1, #4
    8f84:	d10e      	bne.n	8fa4 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8f86:	f011 0f01 	tst.w	r1, #1
    8f8a:	d10e      	bne.n	8faa <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8f8c:	f003 0307 	and.w	r3, r3, #7
    8f90:	2b01      	cmp	r3, #1
    8f92:	d1ca      	bne.n	8f2a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8f94:	f011 0f08 	tst.w	r1, #8
    8f98:	d10b      	bne.n	8fb2 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8f9a:	f011 0f10 	tst.w	r1, #16
    8f9e:	d0c4      	beq.n	8f2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8fa0:	47c8      	blx	r9
    8fa2:	e7c2      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    8fa4:	2100      	movs	r1, #0
    8fa6:	47c0      	blx	r8
    8fa8:	e7bf      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    8faa:	2101      	movs	r1, #1
    8fac:	4b09      	ldr	r3, [pc, #36]	; (8fd4 <_usb_d_dev_handler+0x280>)
    8fae:	4798      	blx	r3
    8fb0:	e7bb      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    8fb2:	2101      	movs	r1, #1
    8fb4:	47c0      	blx	r8
    8fb6:	e7b8      	b.n	8f2a <_usb_d_dev_handler+0x1d6>
    8fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8fbc:	20000578 	.word	0x20000578
    8fc0:	200004a4 	.word	0x200004a4
    8fc4:	40001000 	.word	0x40001000
    8fc8:	0000899d 	.word	0x0000899d
    8fcc:	000087d5 	.word	0x000087d5
    8fd0:	000089e1 	.word	0x000089e1
    8fd4:	00008b65 	.word	0x00008b65
    8fd8:	00008755 	.word	0x00008755
    8fdc:	0000889d 	.word	0x0000889d

00008fe0 <_usb_d_dev_init>:
{
    8fe0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8fe2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8fe6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    8fe8:	f013 0f01 	tst.w	r3, #1
    8fec:	d124      	bne.n	9038 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8fee:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8ff2:	7893      	ldrb	r3, [r2, #2]
    8ff4:	f013 0f03 	tst.w	r3, #3
    8ff8:	d1fb      	bne.n	8ff2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8ffa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ffe:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9000:	f013 0f02 	tst.w	r3, #2
    9004:	d00f      	beq.n	9026 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9006:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    900a:	7813      	ldrb	r3, [r2, #0]
    900c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    9010:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9012:	7893      	ldrb	r3, [r2, #2]
    9014:	f013 0f03 	tst.w	r3, #3
    9018:	d1fb      	bne.n	9012 <_usb_d_dev_init+0x32>
    901a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    901e:	7893      	ldrb	r3, [r2, #2]
    9020:	f013 0f02 	tst.w	r3, #2
    9024:	d1fb      	bne.n	901e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9026:	2201      	movs	r2, #1
    9028:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    902c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    902e:	461a      	mov	r2, r3
    9030:	7893      	ldrb	r3, [r2, #2]
    9032:	f013 0f03 	tst.w	r3, #3
    9036:	d1fb      	bne.n	9030 <_usb_d_dev_init+0x50>
    9038:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    903c:	7893      	ldrb	r3, [r2, #2]
    903e:	f013 0f01 	tst.w	r3, #1
    9042:	d1fb      	bne.n	903c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9044:	4b24      	ldr	r3, [pc, #144]	; (90d8 <_usb_d_dev_init+0xf8>)
    9046:	4a25      	ldr	r2, [pc, #148]	; (90dc <_usb_d_dev_init+0xfc>)
    9048:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    904c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9050:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9054:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9058:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    905c:	4b20      	ldr	r3, [pc, #128]	; (90e0 <_usb_d_dev_init+0x100>)
    905e:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    9060:	4b20      	ldr	r3, [pc, #128]	; (90e4 <_usb_d_dev_init+0x104>)
    9062:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    9064:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9068:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    906c:	f011 011f 	ands.w	r1, r1, #31
    9070:	d02b      	beq.n	90ca <_usb_d_dev_init+0xea>
		pad_transn = 9;
    9072:	291f      	cmp	r1, #31
    9074:	bf08      	it	eq
    9076:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    9078:	b34b      	cbz	r3, 90ce <_usb_d_dev_init+0xee>
		pad_transp = 25;
    907a:	2b1f      	cmp	r3, #31
    907c:	bf08      	it	eq
    907e:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    9080:	b33a      	cbz	r2, 90d2 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    9082:	2a07      	cmp	r2, #7
    9084:	bf08      	it	eq
    9086:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    9088:	f003 031f 	and.w	r3, r3, #31
    908c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    9090:	0312      	lsls	r2, r2, #12
    9092:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    9096:	4313      	orrs	r3, r2
    9098:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    909c:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    909e:	78d3      	ldrb	r3, [r2, #3]
    90a0:	f043 0303 	orr.w	r3, r3, #3
    90a4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    90a6:	78d3      	ldrb	r3, [r2, #3]
    90a8:	f043 030c 	orr.w	r3, r3, #12
    90ac:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    90ae:	2304      	movs	r3, #4
    90b0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    90b2:	7893      	ldrb	r3, [r2, #2]
    90b4:	f013 0f03 	tst.w	r3, #3
    90b8:	d1fb      	bne.n	90b2 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    90ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    90be:	4a06      	ldr	r2, [pc, #24]	; (90d8 <_usb_d_dev_init+0xf8>)
    90c0:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    90c2:	2201      	movs	r2, #1
    90c4:	811a      	strh	r2, [r3, #8]
}
    90c6:	2000      	movs	r0, #0
    90c8:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    90ca:	2109      	movs	r1, #9
    90cc:	e7d4      	b.n	9078 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    90ce:	2319      	movs	r3, #25
    90d0:	e7d6      	b.n	9080 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    90d2:	2206      	movs	r2, #6
    90d4:	e7d8      	b.n	9088 <_usb_d_dev_init+0xa8>
    90d6:	bf00      	nop
    90d8:	200004a4 	.word	0x200004a4
    90dc:	00008751 	.word	0x00008751
    90e0:	0000899d 	.word	0x0000899d
    90e4:	00800084 	.word	0x00800084

000090e8 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    90e8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    90ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    90f0:	7298      	strb	r0, [r3, #10]
    90f2:	4770      	bx	lr

000090f4 <_usb_d_dev_ep_init>:
{
    90f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    90f6:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    90fa:	f010 050f 	ands.w	r5, r0, #15
    90fe:	d04d      	beq.n	919c <_usb_d_dev_ep_init+0xa8>
    9100:	f1be 0f00 	cmp.w	lr, #0
    9104:	bfb4      	ite	lt
    9106:	1d6c      	addlt	r4, r5, #5
    9108:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    910a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    910e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    9110:	2d05      	cmp	r5, #5
    9112:	d947      	bls.n	91a4 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    9114:	f06f 0011 	mvn.w	r0, #17
    9118:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    911a:	f1be 0f00 	cmp.w	lr, #0
    911e:	db1b      	blt.n	9158 <_usb_d_dev_ep_init+0x64>
    9120:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9124:	4e37      	ldr	r6, [pc, #220]	; (9204 <_usb_d_dev_ep_init+0x110>)
    9126:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    912a:	2d00      	cmp	r5, #0
    912c:	d15e      	bne.n	91ec <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    912e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9132:	4d34      	ldr	r5, [pc, #208]	; (9204 <_usb_d_dev_ep_init+0x110>)
    9134:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    9138:	4d33      	ldr	r5, [pc, #204]	; (9208 <_usb_d_dev_ep_init+0x114>)
    913a:	00a6      	lsls	r6, r4, #2
    913c:	1933      	adds	r3, r6, r4
    913e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9142:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    9146:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    914a:	3101      	adds	r1, #1
    914c:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    9150:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    9154:	2000      	movs	r0, #0
    9156:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9158:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    915c:	4e29      	ldr	r6, [pc, #164]	; (9204 <_usb_d_dev_ep_init+0x110>)
    915e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9162:	686d      	ldr	r5, [r5, #4]
    9164:	b935      	cbnz	r5, 9174 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9166:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    916a:	4d26      	ldr	r5, [pc, #152]	; (9204 <_usb_d_dev_ep_init+0x110>)
    916c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9170:	685f      	ldr	r7, [r3, #4]
    9172:	e7e1      	b.n	9138 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9174:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9178:	4e22      	ldr	r6, [pc, #136]	; (9204 <_usb_d_dev_ep_init+0x110>)
    917a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    917e:	896d      	ldrh	r5, [r5, #10]
    9180:	4295      	cmp	r5, r2
    9182:	daf0      	bge.n	9166 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    9184:	f06f 0012 	mvn.w	r0, #18
    9188:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    918a:	f06f 0013 	mvn.w	r0, #19
    918e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    9190:	f06f 0013 	mvn.w	r0, #19
    9194:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    9196:	f06f 0012 	mvn.w	r0, #18
    919a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    919c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    91a0:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    91a2:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    91a4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    91a8:	4f17      	ldr	r7, [pc, #92]	; (9208 <_usb_d_dev_ep_init+0x114>)
    91aa:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    91ae:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    91b2:	2eff      	cmp	r6, #255	; 0xff
    91b4:	d1e9      	bne.n	918a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    91b6:	2900      	cmp	r1, #0
    91b8:	d1af      	bne.n	911a <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    91ba:	b125      	cbz	r5, 91c6 <_usb_d_dev_ep_init+0xd2>
    91bc:	f1be 0f00 	cmp.w	lr, #0
    91c0:	bfa4      	itt	ge
    91c2:	3505      	addge	r5, #5
    91c4:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    91c6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    91ca:	4e0f      	ldr	r6, [pc, #60]	; (9208 <_usb_d_dev_ep_init+0x114>)
    91cc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    91d0:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    91d4:	2dff      	cmp	r5, #255	; 0xff
    91d6:	d1db      	bne.n	9190 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    91d8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    91dc:	4e09      	ldr	r6, [pc, #36]	; (9204 <_usb_d_dev_ep_init+0x110>)
    91de:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    91e2:	2d00      	cmp	r5, #0
    91e4:	d0d7      	beq.n	9196 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    91e6:	f1be 0f00 	cmp.w	lr, #0
    91ea:	dbb5      	blt.n	9158 <_usb_d_dev_ep_init+0x64>
    91ec:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    91f0:	4e04      	ldr	r6, [pc, #16]	; (9204 <_usb_d_dev_ep_init+0x110>)
    91f2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    91f6:	892d      	ldrh	r5, [r5, #8]
    91f8:	4295      	cmp	r5, r2
    91fa:	da98      	bge.n	912e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    91fc:	f06f 0012 	mvn.w	r0, #18
    9200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9202:	bf00      	nop
    9204:	0000be4c 	.word	0x0000be4c
    9208:	200004a4 	.word	0x200004a4

0000920c <_usb_d_dev_ep_deinit>:
{
    920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    920e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9210:	f010 060f 	ands.w	r6, r0, #15
    9214:	d00e      	beq.n	9234 <_usb_d_dev_ep_deinit+0x28>
    9216:	2f00      	cmp	r7, #0
    9218:	bfb4      	ite	lt
    921a:	1d73      	addlt	r3, r6, #5
    921c:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    921e:	2e05      	cmp	r6, #5
    9220:	d900      	bls.n	9224 <_usb_d_dev_ep_deinit+0x18>
    9222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    9224:	461d      	mov	r5, r3
    9226:	3301      	adds	r3, #1
    9228:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    922c:	4a24      	ldr	r2, [pc, #144]	; (92c0 <_usb_d_dev_ep_deinit+0xb4>)
    922e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    9232:	e002      	b.n	923a <_usb_d_dev_ep_deinit+0x2e>
    9234:	f8df e094 	ldr.w	lr, [pc, #148]	; 92cc <_usb_d_dev_ep_deinit+0xc0>
    9238:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    923a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    923e:	4a21      	ldr	r2, [pc, #132]	; (92c4 <_usb_d_dev_ep_deinit+0xb8>)
    9240:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9244:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    9248:	2aff      	cmp	r2, #255	; 0xff
    924a:	d0ea      	beq.n	9222 <_usb_d_dev_ep_deinit+0x16>
    924c:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    924e:	2203      	movs	r2, #3
    9250:	0ff9      	lsrs	r1, r7, #31
    9252:	4670      	mov	r0, lr
    9254:	4b1c      	ldr	r3, [pc, #112]	; (92c8 <_usb_d_dev_ep_deinit+0xbc>)
    9256:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9258:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    925c:	4a19      	ldr	r2, [pc, #100]	; (92c4 <_usb_d_dev_ep_deinit+0xb8>)
    925e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9262:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9266:	f003 0307 	and.w	r3, r3, #7
    926a:	2b01      	cmp	r3, #1
    926c:	d016      	beq.n	929c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    926e:	2f00      	cmp	r7, #0
    9270:	db1b      	blt.n	92aa <_usb_d_dev_ep_deinit+0x9e>
    9272:	0160      	lsls	r0, r4, #5
    9274:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9278:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    927c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    9280:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    9284:	4b0f      	ldr	r3, [pc, #60]	; (92c4 <_usb_d_dev_ep_deinit+0xb8>)
    9286:	00aa      	lsls	r2, r5, #2
    9288:	1951      	adds	r1, r2, r5
    928a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    928e:	2000      	movs	r0, #0
    9290:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    9294:	22ff      	movs	r2, #255	; 0xff
    9296:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    929a:	e7c2      	b.n	9222 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    929c:	0160      	lsls	r0, r4, #5
    929e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    92a2:	2300      	movs	r3, #0
    92a4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    92a8:	e7ec      	b.n	9284 <_usb_d_dev_ep_deinit+0x78>
    92aa:	0176      	lsls	r6, r6, #5
    92ac:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    92b0:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    92b4:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    92b8:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    92bc:	e7e2      	b.n	9284 <_usb_d_dev_ep_deinit+0x78>
    92be:	bf00      	nop
    92c0:	20000564 	.word	0x20000564
    92c4:	200004a4 	.word	0x200004a4
    92c8:	00008831 	.word	0x00008831
    92cc:	20000578 	.word	0x20000578

000092d0 <_usb_d_dev_ep_enable>:
{
    92d0:	b4f0      	push	{r4, r5, r6, r7}
    92d2:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    92d4:	f010 000f 	ands.w	r0, r0, #15
    92d8:	f000 80a7 	beq.w	942a <_usb_d_dev_ep_enable+0x15a>
    92dc:	2e00      	cmp	r6, #0
    92de:	bfb4      	ite	lt
    92e0:	1d43      	addlt	r3, r0, #5
    92e2:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    92e4:	4605      	mov	r5, r0
    92e6:	0142      	lsls	r2, r0, #5
    92e8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    92ec:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    92f0:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    92f2:	2805      	cmp	r0, #5
    92f4:	f240 80a0 	bls.w	9438 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    92f8:	f06f 0011 	mvn.w	r0, #17
    92fc:	e07d      	b.n	93fa <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    92fe:	f014 0f77 	tst.w	r4, #119	; 0x77
    9302:	f040 8089 	bne.w	9418 <_usb_d_dev_ep_enable+0x148>
    9306:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    930a:	2111      	movs	r1, #17
    930c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9310:	4c9b      	ldr	r4, [pc, #620]	; (9580 <_usb_d_dev_ep_enable+0x2b0>)
    9312:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    9316:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    931a:	4c9a      	ldr	r4, [pc, #616]	; (9584 <_usb_d_dev_ep_enable+0x2b4>)
    931c:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9320:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9324:	f200 80cd 	bhi.w	94c2 <_usb_d_dev_ep_enable+0x1f2>
    9328:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    932c:	f200 8112 	bhi.w	9554 <_usb_d_dev_ep_enable+0x284>
    9330:	2980      	cmp	r1, #128	; 0x80
    9332:	f200 8101 	bhi.w	9538 <_usb_d_dev_ep_enable+0x268>
    9336:	2940      	cmp	r1, #64	; 0x40
    9338:	f200 8113 	bhi.w	9562 <_usb_d_dev_ep_enable+0x292>
    933c:	2920      	cmp	r1, #32
    933e:	f200 8102 	bhi.w	9546 <_usb_d_dev_ep_enable+0x276>
    9342:	2910      	cmp	r1, #16
    9344:	f200 8114 	bhi.w	9570 <_usb_d_dev_ep_enable+0x2a0>
    9348:	2908      	cmp	r1, #8
    934a:	bf94      	ite	ls
    934c:	2600      	movls	r6, #0
    934e:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9350:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9354:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9356:	f3c1 010d 	ubfx	r1, r1, #0, #14
    935a:	e0b8      	b.n	94ce <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    935c:	f014 0f70 	tst.w	r4, #112	; 0x70
    9360:	d15d      	bne.n	941e <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    9362:	4e87      	ldr	r6, [pc, #540]	; (9580 <_usb_d_dev_ep_enable+0x2b0>)
    9364:	009f      	lsls	r7, r3, #2
    9366:	18f9      	adds	r1, r7, r3
    9368:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    936c:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    9370:	0109      	lsls	r1, r1, #4
    9372:	f001 0170 	and.w	r1, r1, #112	; 0x70
    9376:	430c      	orrs	r4, r1
    9378:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    937c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9380:	443b      	add	r3, r7
    9382:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    9386:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    938a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    938e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9392:	d80f      	bhi.n	93b4 <_usb_d_dev_ep_enable+0xe4>
    9394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9398:	d819      	bhi.n	93ce <_usb_d_dev_ep_enable+0xfe>
    939a:	2b80      	cmp	r3, #128	; 0x80
    939c:	d819      	bhi.n	93d2 <_usb_d_dev_ep_enable+0x102>
    939e:	2b40      	cmp	r3, #64	; 0x40
    93a0:	d819      	bhi.n	93d6 <_usb_d_dev_ep_enable+0x106>
    93a2:	2b20      	cmp	r3, #32
    93a4:	d819      	bhi.n	93da <_usb_d_dev_ep_enable+0x10a>
    93a6:	2b10      	cmp	r3, #16
    93a8:	d819      	bhi.n	93de <_usb_d_dev_ep_enable+0x10e>
    93aa:	2b08      	cmp	r3, #8
    93ac:	bf94      	ite	ls
    93ae:	2300      	movls	r3, #0
    93b0:	2301      	movhi	r3, #1
    93b2:	e000      	b.n	93b6 <_usb_d_dev_ep_enable+0xe6>
    93b4:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93b6:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    93ba:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    93bc:	2380      	movs	r3, #128	; 0x80
    93be:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    93c2:	4b6f      	ldr	r3, [pc, #444]	; (9580 <_usb_d_dev_ep_enable+0x2b0>)
    93c4:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    93c8:	2000      	movs	r0, #0
    93ca:	76a8      	strb	r0, [r5, #26]
    93cc:	e015      	b.n	93fa <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    93ce:	2306      	movs	r3, #6
    93d0:	e7f1      	b.n	93b6 <_usb_d_dev_ep_enable+0xe6>
    93d2:	2305      	movs	r3, #5
    93d4:	e7ef      	b.n	93b6 <_usb_d_dev_ep_enable+0xe6>
    93d6:	2304      	movs	r3, #4
    93d8:	e7ed      	b.n	93b6 <_usb_d_dev_ep_enable+0xe6>
    93da:	2303      	movs	r3, #3
    93dc:	e7eb      	b.n	93b6 <_usb_d_dev_ep_enable+0xe6>
    93de:	2302      	movs	r3, #2
    93e0:	e7e9      	b.n	93b6 <_usb_d_dev_ep_enable+0xe6>
    93e2:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93e4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    93e8:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    93ea:	2340      	movs	r3, #64	; 0x40
    93ec:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    93f0:	4b63      	ldr	r3, [pc, #396]	; (9580 <_usb_d_dev_ep_enable+0x2b0>)
    93f2:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    93f6:	2000      	movs	r0, #0
    93f8:	72a8      	strb	r0, [r5, #10]
}
    93fa:	bcf0      	pop	{r4, r5, r6, r7}
    93fc:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    93fe:	2106      	movs	r1, #6
    9400:	e7f0      	b.n	93e4 <_usb_d_dev_ep_enable+0x114>
    9402:	2105      	movs	r1, #5
    9404:	e7ee      	b.n	93e4 <_usb_d_dev_ep_enable+0x114>
    9406:	2104      	movs	r1, #4
    9408:	e7ec      	b.n	93e4 <_usb_d_dev_ep_enable+0x114>
    940a:	2103      	movs	r1, #3
    940c:	e7ea      	b.n	93e4 <_usb_d_dev_ep_enable+0x114>
    940e:	2102      	movs	r1, #2
    9410:	e7e8      	b.n	93e4 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    9412:	f06f 0011 	mvn.w	r0, #17
    9416:	e7f0      	b.n	93fa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9418:	f06f 0013 	mvn.w	r0, #19
    941c:	e7ed      	b.n	93fa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    941e:	f06f 0013 	mvn.w	r0, #19
    9422:	e7ea      	b.n	93fa <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9424:	f06f 0013 	mvn.w	r0, #19
    9428:	e7e7      	b.n	93fa <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    942a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    942e:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    9432:	b2e4      	uxtb	r4, r4
    9434:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    9436:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9438:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    943c:	4950      	ldr	r1, [pc, #320]	; (9580 <_usb_d_dev_ep_enable+0x2b0>)
    943e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9442:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    9446:	2aff      	cmp	r2, #255	; 0xff
    9448:	d0e3      	beq.n	9412 <_usb_d_dev_ep_enable+0x142>
    944a:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    944c:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    944e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    9452:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    9456:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    945a:	f001 0107 	and.w	r1, r1, #7
    945e:	2901      	cmp	r1, #1
    9460:	f43f af4d 	beq.w	92fe <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    9464:	2e00      	cmp	r6, #0
    9466:	f6ff af79 	blt.w	935c <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    946a:	f014 0f07 	tst.w	r4, #7
    946e:	d1d9      	bne.n	9424 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9470:	4e43      	ldr	r6, [pc, #268]	; (9580 <_usb_d_dev_ep_enable+0x2b0>)
    9472:	009f      	lsls	r7, r3, #2
    9474:	18f9      	adds	r1, r7, r3
    9476:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    947a:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    947e:	f001 0107 	and.w	r1, r1, #7
    9482:	430c      	orrs	r4, r1
    9484:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9488:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    948c:	443b      	add	r3, r7
    948e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    9492:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    9496:	4b3b      	ldr	r3, [pc, #236]	; (9584 <_usb_d_dev_ep_enable+0x2b4>)
    9498:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    949c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    94a0:	d89f      	bhi.n	93e2 <_usb_d_dev_ep_enable+0x112>
    94a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    94a6:	d8aa      	bhi.n	93fe <_usb_d_dev_ep_enable+0x12e>
    94a8:	2980      	cmp	r1, #128	; 0x80
    94aa:	d8aa      	bhi.n	9402 <_usb_d_dev_ep_enable+0x132>
    94ac:	2940      	cmp	r1, #64	; 0x40
    94ae:	d8aa      	bhi.n	9406 <_usb_d_dev_ep_enable+0x136>
    94b0:	2920      	cmp	r1, #32
    94b2:	d8aa      	bhi.n	940a <_usb_d_dev_ep_enable+0x13a>
    94b4:	2910      	cmp	r1, #16
    94b6:	d8aa      	bhi.n	940e <_usb_d_dev_ep_enable+0x13e>
    94b8:	2908      	cmp	r1, #8
    94ba:	bf94      	ite	ls
    94bc:	2100      	movls	r1, #0
    94be:	2101      	movhi	r1, #1
    94c0:	e790      	b.n	93e4 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94c2:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    94c6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94c8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    94cc:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94ce:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    94d2:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    94d4:	2640      	movs	r6, #64	; 0x40
    94d6:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    94da:	2180      	movs	r1, #128	; 0x80
    94dc:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    94e0:	4f27      	ldr	r7, [pc, #156]	; (9580 <_usb_d_dev_ep_enable+0x2b0>)
    94e2:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    94e6:	2000      	movs	r0, #0
    94e8:	72a8      	strb	r0, [r5, #10]
    94ea:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    94ec:	009c      	lsls	r4, r3, #2
    94ee:	18e1      	adds	r1, r4, r3
    94f0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    94f4:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    94f8:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    94fc:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    9500:	0152      	lsls	r2, r2, #5
    9502:	18b9      	adds	r1, r7, r2
    9504:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9506:	4423      	add	r3, r4
    9508:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    950c:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    9510:	684b      	ldr	r3, [r1, #4]
    9512:	f364 339b 	bfi	r3, r4, #14, #14
    9516:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9518:	684b      	ldr	r3, [r1, #4]
    951a:	f360 030d 	bfi	r3, r0, #0, #14
    951e:	604b      	str	r3, [r1, #4]
    9520:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    9524:	21b0      	movs	r1, #176	; 0xb0
    9526:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    952a:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    952e:	461a      	mov	r2, r3
    9530:	2310      	movs	r3, #16
    9532:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    9536:	e760      	b.n	93fa <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9538:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    953c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    953e:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9542:	2605      	movs	r6, #5
    9544:	e7c3      	b.n	94ce <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9546:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    954a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    954c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9550:	2603      	movs	r6, #3
    9552:	e7bc      	b.n	94ce <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9554:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9558:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    955a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    955e:	2606      	movs	r6, #6
    9560:	e7b5      	b.n	94ce <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9562:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9566:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9568:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    956c:	2604      	movs	r6, #4
    956e:	e7ae      	b.n	94ce <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9570:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9574:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9576:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    957a:	2602      	movs	r6, #2
    957c:	e7a7      	b.n	94ce <_usb_d_dev_ep_enable+0x1fe>
    957e:	bf00      	nop
    9580:	200004a4 	.word	0x200004a4
    9584:	0fffc000 	.word	0x0fffc000

00009588 <_usb_d_dev_ep_stall>:
{
    9588:	b470      	push	{r4, r5, r6}
    958a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    958c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    958e:	f010 000f 	ands.w	r0, r0, #15
    9592:	d008      	beq.n	95a6 <_usb_d_dev_ep_stall+0x1e>
    9594:	2b00      	cmp	r3, #0
    9596:	bfb4      	ite	lt
    9598:	1d43      	addlt	r3, r0, #5
    959a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    959c:	2805      	cmp	r0, #5
    959e:	d903      	bls.n	95a8 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    95a0:	f06f 0011 	mvn.w	r0, #17
    95a4:	e018      	b.n	95d8 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    95a6:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    95a8:	2901      	cmp	r1, #1
    95aa:	d017      	beq.n	95dc <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    95ac:	2900      	cmp	r1, #0
    95ae:	d03a      	beq.n	9626 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    95b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    95b4:	4a45      	ldr	r2, [pc, #276]	; (96cc <_usb_d_dev_ep_stall+0x144>)
    95b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    95ba:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    95be:	f003 030f 	and.w	r3, r3, #15
    95c2:	015b      	lsls	r3, r3, #5
    95c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    95c8:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    95cc:	2310      	movs	r3, #16
    95ce:	40a3      	lsls	r3, r4
    95d0:	421a      	tst	r2, r3
    95d2:	bf14      	ite	ne
    95d4:	2001      	movne	r0, #1
    95d6:	2000      	moveq	r0, #0
}
    95d8:	bc70      	pop	{r4, r5, r6}
    95da:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    95dc:	2510      	movs	r5, #16
    95de:	40a5      	lsls	r5, r4
    95e0:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    95e2:	493a      	ldr	r1, [pc, #232]	; (96cc <_usb_d_dev_ep_stall+0x144>)
    95e4:	009e      	lsls	r6, r3, #2
    95e6:	18f2      	adds	r2, r6, r3
    95e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    95ec:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    95f0:	f002 020f 	and.w	r2, r2, #15
    95f4:	0150      	lsls	r0, r2, #5
    95f6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    95fa:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    95fe:	2020      	movs	r0, #32
    9600:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9604:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9606:	0152      	lsls	r2, r2, #5
    9608:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    960c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    9610:	4433      	add	r3, r6
    9612:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9616:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    961a:	f042 0208 	orr.w	r2, r2, #8
    961e:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9622:	2000      	movs	r0, #0
    9624:	e7d8      	b.n	95d8 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9626:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    962a:	4928      	ldr	r1, [pc, #160]	; (96cc <_usb_d_dev_ep_stall+0x144>)
    962c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9630:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    9634:	f002 020f 	and.w	r2, r2, #15
    9638:	0151      	lsls	r1, r2, #5
    963a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    963e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9642:	2010      	movs	r0, #16
    9644:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    9646:	4205      	tst	r5, r0
    9648:	d03c      	beq.n	96c4 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    964a:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    964c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9650:	2020      	movs	r0, #32
    9652:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9654:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9656:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    965a:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    965e:	4202      	tst	r2, r0
    9660:	d007      	beq.n	9672 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9662:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9666:	2201      	movs	r2, #1
    9668:	fa02 f404 	lsl.w	r4, r2, r4
    966c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    966e:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9672:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9676:	4815      	ldr	r0, [pc, #84]	; (96cc <_usb_d_dev_ep_stall+0x144>)
    9678:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    967c:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    9680:	f002 0207 	and.w	r2, r2, #7
    9684:	2a01      	cmp	r2, #1
    9686:	d00c      	beq.n	96a2 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    9688:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    968c:	4a0f      	ldr	r2, [pc, #60]	; (96cc <_usb_d_dev_ep_stall+0x144>)
    968e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9692:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9696:	f36f 02c3 	bfc	r2, #3, #1
    969a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    969e:	2000      	movs	r0, #0
    96a0:	e79a      	b.n	95d8 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    96a2:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    96a6:	f012 0f30 	tst.w	r2, #48	; 0x30
    96aa:	d10d      	bne.n	96c8 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    96ac:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    96b0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    96b4:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    96b8:	f36f 02c3 	bfc	r2, #3, #1
    96bc:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    96c0:	2000      	movs	r0, #0
    96c2:	e789      	b.n	95d8 <_usb_d_dev_ep_stall+0x50>
    96c4:	2000      	movs	r0, #0
    96c6:	e787      	b.n	95d8 <_usb_d_dev_ep_stall+0x50>
    96c8:	2000      	movs	r0, #0
    96ca:	e785      	b.n	95d8 <_usb_d_dev_ep_stall+0x50>
    96cc:	200004a4 	.word	0x200004a4

000096d0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    96d0:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    96d2:	f000 040f 	and.w	r4, r0, #15
    96d6:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    96d8:	4a14      	ldr	r2, [pc, #80]	; (972c <_usb_d_dev_ep_read_req+0x5c>)
    96da:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    96dc:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    96de:	6840      	ldr	r0, [r0, #4]
    96e0:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    96e4:	2c05      	cmp	r4, #5
    96e6:	d817      	bhi.n	9718 <_usb_d_dev_ep_read_req+0x48>
    96e8:	b1c9      	cbz	r1, 971e <_usb_d_dev_ep_read_req+0x4e>
    96ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    96ee:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    96f2:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    96f4:	2a11      	cmp	r2, #17
    96f6:	d115      	bne.n	9724 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    96f8:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    96fc:	f012 0f10 	tst.w	r2, #16
    9700:	d102      	bne.n	9708 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    9702:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    9704:	bc30      	pop	{r4, r5}
    9706:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    9708:	682c      	ldr	r4, [r5, #0]
    970a:	686a      	ldr	r2, [r5, #4]
    970c:	600c      	str	r4, [r1, #0]
    970e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9710:	2210      	movs	r2, #16
    9712:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    9716:	e7f5      	b.n	9704 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    9718:	f06f 0011 	mvn.w	r0, #17
    971c:	e7f2      	b.n	9704 <_usb_d_dev_ep_read_req+0x34>
    971e:	f06f 0011 	mvn.w	r0, #17
    9722:	e7ef      	b.n	9704 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    9724:	f06f 0012 	mvn.w	r0, #18
    9728:	e7ec      	b.n	9704 <_usb_d_dev_ep_read_req+0x34>
    972a:	bf00      	nop
    972c:	200004a4 	.word	0x200004a4

00009730 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9734:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9736:	7a03      	ldrb	r3, [r0, #8]
    9738:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    973a:	f013 030f 	ands.w	r3, r3, #15
    973e:	f000 80c2 	beq.w	98c6 <_usb_d_dev_ep_trans+0x196>
    9742:	2e00      	cmp	r6, #0
    9744:	bfb4      	ite	lt
    9746:	1d5a      	addlt	r2, r3, #5
    9748:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    974a:	4614      	mov	r4, r2
    974c:	4969      	ldr	r1, [pc, #420]	; (98f4 <_usb_d_dev_ep_trans+0x1c4>)
    974e:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    9752:	1c55      	adds	r5, r2, #1
    9754:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    9758:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    975c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9760:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9764:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9768:	f240 31ff 	movw	r1, #1023	; 0x3ff
    976c:	428a      	cmp	r2, r1
    976e:	d025      	beq.n	97bc <_usb_d_dev_ep_trans+0x8c>
    9770:	1e55      	subs	r5, r2, #1
    9772:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    9774:	6841      	ldr	r1, [r0, #4]
    9776:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9778:	2b05      	cmp	r3, #5
    977a:	f200 8092 	bhi.w	98a2 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    977e:	6803      	ldr	r3, [r0, #0]
    9780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9784:	d31c      	bcc.n	97c0 <_usb_d_dev_ep_trans+0x90>
    9786:	eb03 0c01 	add.w	ip, r3, r1
    978a:	f8df e180 	ldr.w	lr, [pc, #384]	; 990c <_usb_d_dev_ep_trans+0x1dc>
    978e:	45f4      	cmp	ip, lr
    9790:	d816      	bhi.n	97c0 <_usb_d_dev_ep_trans+0x90>
    9792:	f013 0f03 	tst.w	r3, #3
    9796:	d113      	bne.n	97c0 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    9798:	2e00      	cmp	r6, #0
    979a:	db2a      	blt.n	97f2 <_usb_d_dev_ep_trans+0xc2>
    979c:	428a      	cmp	r2, r1
    979e:	f200 809c 	bhi.w	98da <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    97a2:	b34d      	cbz	r5, 97f8 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    97a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    97a8:	4a52      	ldr	r2, [pc, #328]	; (98f4 <_usb_d_dev_ep_trans+0x1c4>)
    97aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    97ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    97b2:	2b00      	cmp	r3, #0
    97b4:	d07b      	beq.n	98ae <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    97b6:	f04f 0800 	mov.w	r8, #0
    97ba:	e00c      	b.n	97d6 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    97bc:	4615      	mov	r5, r2
    97be:	e7d9      	b.n	9774 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    97c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    97c4:	4a4b      	ldr	r2, [pc, #300]	; (98f4 <_usb_d_dev_ep_trans+0x1c4>)
    97c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    97ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    97ce:	2b00      	cmp	r3, #0
    97d0:	d06a      	beq.n	98a8 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    97d2:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    97d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    97da:	4a46      	ldr	r2, [pc, #280]	; (98f4 <_usb_d_dev_ep_trans+0x1c4>)
    97dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    97e0:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    97e4:	f013 0f08 	tst.w	r3, #8
    97e8:	d009      	beq.n	97fe <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    97ea:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    97ec:	b003      	add	sp, #12
    97ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    97f2:	f04f 0800 	mov.w	r8, #0
    97f6:	e7ee      	b.n	97d6 <_usb_d_dev_ep_trans+0xa6>
    97f8:	f04f 0800 	mov.w	r8, #0
    97fc:	e7eb      	b.n	97d6 <_usb_d_dev_ep_trans+0xa6>
    97fe:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    9800:	a801      	add	r0, sp, #4
    9802:	4b3d      	ldr	r3, [pc, #244]	; (98f8 <_usb_d_dev_ep_trans+0x1c8>)
    9804:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9806:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    980a:	4a3a      	ldr	r2, [pc, #232]	; (98f4 <_usb_d_dev_ep_trans+0x1c4>)
    980c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9810:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9814:	f013 0f40 	tst.w	r3, #64	; 0x40
    9818:	d13c      	bne.n	9894 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    981a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    981e:	4b35      	ldr	r3, [pc, #212]	; (98f4 <_usb_d_dev_ep_trans+0x1c4>)
    9820:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    9824:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    9828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    982c:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    9830:	a801      	add	r0, sp, #4
    9832:	4b32      	ldr	r3, [pc, #200]	; (98fc <_usb_d_dev_ep_trans+0x1cc>)
    9834:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    9836:	f8da 3000 	ldr.w	r3, [sl]
    983a:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    983e:	f8da 3004 	ldr.w	r3, [sl, #4]
    9842:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    9846:	2300      	movs	r3, #0
    9848:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    984c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    984e:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    9852:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    9856:	f368 1345 	bfi	r3, r8, #5, #1
    985a:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    985e:	f89a 3009 	ldrb.w	r3, [sl, #9]
    9862:	b1e3      	cbz	r3, 989e <_usb_d_dev_ep_trans+0x16e>
    9864:	fab5 f585 	clz	r5, r5
    9868:	096d      	lsrs	r5, r5, #5
    986a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    986e:	4b21      	ldr	r3, [pc, #132]	; (98f4 <_usb_d_dev_ep_trans+0x1c4>)
    9870:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    9874:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    9878:	f365 1304 	bfi	r3, r5, #4, #1
    987c:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    9880:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    9882:	f04f 0100 	mov.w	r1, #0
    9886:	4638      	mov	r0, r7
    9888:	bfb4      	ite	lt
    988a:	4b1d      	ldrlt	r3, [pc, #116]	; (9900 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    988c:	4b1d      	ldrge	r3, [pc, #116]	; (9904 <_usb_d_dev_ep_trans+0x1d4>)
    988e:	4798      	blx	r3
	return ERR_NONE;
    9890:	2000      	movs	r0, #0
    9892:	e7ab      	b.n	97ec <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    9894:	a801      	add	r0, sp, #4
    9896:	4b19      	ldr	r3, [pc, #100]	; (98fc <_usb_d_dev_ep_trans+0x1cc>)
    9898:	4798      	blx	r3
		return USB_BUSY;
    989a:	2001      	movs	r0, #1
    989c:	e7a6      	b.n	97ec <_usb_d_dev_ep_trans+0xbc>
    989e:	2500      	movs	r5, #0
    98a0:	e7e3      	b.n	986a <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    98a2:	f06f 0011 	mvn.w	r0, #17
    98a6:	e7a1      	b.n	97ec <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    98a8:	f06f 0012 	mvn.w	r0, #18
    98ac:	e79e      	b.n	97ec <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    98ae:	f06f 0011 	mvn.w	r0, #17
    98b2:	e79b      	b.n	97ec <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    98b4:	f06f 0012 	mvn.w	r0, #18
    98b8:	e798      	b.n	97ec <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    98ba:	6841      	ldr	r1, [r0, #4]
    98bc:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    98c0:	4f11      	ldr	r7, [pc, #68]	; (9908 <_usb_d_dev_ep_trans+0x1d8>)
    98c2:	2400      	movs	r4, #0
    98c4:	e75b      	b.n	977e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    98c6:	4a0b      	ldr	r2, [pc, #44]	; (98f4 <_usb_d_dev_ep_trans+0x1c4>)
    98c8:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    98cc:	f240 31ff 	movw	r1, #1023	; 0x3ff
    98d0:	428a      	cmp	r2, r1
    98d2:	d0f2      	beq.n	98ba <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    98d4:	4f0c      	ldr	r7, [pc, #48]	; (9908 <_usb_d_dev_ep_trans+0x1d8>)
    98d6:	2400      	movs	r4, #0
    98d8:	e74a      	b.n	9770 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    98da:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    98de:	4a05      	ldr	r2, [pc, #20]	; (98f4 <_usb_d_dev_ep_trans+0x1c4>)
    98e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    98e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    98e8:	2b00      	cmp	r3, #0
    98ea:	d0e3      	beq.n	98b4 <_usb_d_dev_ep_trans+0x184>
    98ec:	f04f 0801 	mov.w	r8, #1
    98f0:	e771      	b.n	97d6 <_usb_d_dev_ep_trans+0xa6>
    98f2:	bf00      	nop
    98f4:	200004a4 	.word	0x200004a4
    98f8:	00005af9 	.word	0x00005af9
    98fc:	00005b07 	.word	0x00005b07
    9900:	000089e1 	.word	0x000089e1
    9904:	00008b65 	.word	0x00008b65
    9908:	20000578 	.word	0x20000578
    990c:	20041fff 	.word	0x20041fff

00009910 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9910:	4b07      	ldr	r3, [pc, #28]	; (9930 <_usb_d_dev_register_callback+0x20>)
    9912:	2900      	cmp	r1, #0
    9914:	bf08      	it	eq
    9916:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    9918:	2801      	cmp	r0, #1
    991a:	d004      	beq.n	9926 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    991c:	b910      	cbnz	r0, 9924 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    991e:	4b05      	ldr	r3, [pc, #20]	; (9934 <_usb_d_dev_register_callback+0x24>)
    9920:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    9924:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    9926:	4b03      	ldr	r3, [pc, #12]	; (9934 <_usb_d_dev_register_callback+0x24>)
    9928:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    992c:	4770      	bx	lr
    992e:	bf00      	nop
    9930:	00008751 	.word	0x00008751
    9934:	200004a4 	.word	0x200004a4

00009938 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9938:	4b0a      	ldr	r3, [pc, #40]	; (9964 <_usb_d_dev_register_ep_callback+0x2c>)
    993a:	2900      	cmp	r1, #0
    993c:	bf08      	it	eq
    993e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    9940:	4603      	mov	r3, r0
    9942:	b138      	cbz	r0, 9954 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    9944:	2801      	cmp	r0, #1
    9946:	d009      	beq.n	995c <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    9948:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    994a:	bf04      	itt	eq
    994c:	4b06      	ldreq	r3, [pc, #24]	; (9968 <_usb_d_dev_register_ep_callback+0x30>)
    994e:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    9952:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    9954:	4b04      	ldr	r3, [pc, #16]	; (9968 <_usb_d_dev_register_ep_callback+0x30>)
    9956:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    995a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    995c:	4b02      	ldr	r3, [pc, #8]	; (9968 <_usb_d_dev_register_ep_callback+0x30>)
    995e:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    9962:	4770      	bx	lr
    9964:	00008751 	.word	0x00008751
    9968:	200004a4 	.word	0x200004a4

0000996c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    996c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    996e:	4b01      	ldr	r3, [pc, #4]	; (9974 <USB_0_Handler+0x8>)
    9970:	4798      	blx	r3
    9972:	bd08      	pop	{r3, pc}
    9974:	00008d55 	.word	0x00008d55

00009978 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    9978:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    997a:	4b01      	ldr	r3, [pc, #4]	; (9980 <USB_1_Handler+0x8>)
    997c:	4798      	blx	r3
    997e:	bd08      	pop	{r3, pc}
    9980:	00008d55 	.word	0x00008d55

00009984 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    9984:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9986:	4b01      	ldr	r3, [pc, #4]	; (998c <USB_2_Handler+0x8>)
    9988:	4798      	blx	r3
    998a:	bd08      	pop	{r3, pc}
    998c:	00008d55 	.word	0x00008d55

00009990 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    9990:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9992:	4b01      	ldr	r3, [pc, #4]	; (9998 <USB_3_Handler+0x8>)
    9994:	4798      	blx	r3
    9996:	bd08      	pop	{r3, pc}
    9998:	00008d55 	.word	0x00008d55

0000999c <_wdt_init>:
int32_t _wdt_init(struct wdt_dev *const dev)
{
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    999c:	6803      	ldr	r3, [r0, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    999e:	689a      	ldr	r2, [r3, #8]
    99a0:	f012 0f0e 	tst.w	r2, #14
    99a4:	d1fb      	bne.n	999e <_wdt_init+0x2>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    99a6:	781a      	ldrb	r2, [r3, #0]
    99a8:	09d2      	lsrs	r2, r2, #7
    99aa:	d118      	bne.n	99de <_wdt_init+0x42>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    99ac:	689a      	ldr	r2, [r3, #8]
    99ae:	f012 0f0e 	tst.w	r2, #14
    99b2:	d1fb      	bne.n	99ac <_wdt_init+0x10>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    99b4:	781a      	ldrb	r2, [r3, #0]
    99b6:	f012 0f02 	tst.w	r2, #2
    99ba:	d113      	bne.n	99e4 <_wdt_init+0x48>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    99bc:	781a      	ldrb	r2, [r3, #0]
    99be:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    99c2:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    99c4:	689a      	ldr	r2, [r3, #8]
    99c6:	f012 0f0e 	tst.w	r2, #14
    99ca:	d1fb      	bne.n	99c4 <_wdt_init+0x28>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    99cc:	6802      	ldr	r2, [r0, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    99ce:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    99d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    99d4:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    99d8:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    99da:	2000      	movs	r0, #0
    99dc:	4770      	bx	lr
		return ERR_DENIED;
    99de:	f06f 0010 	mvn.w	r0, #16
    99e2:	4770      	bx	lr
    99e4:	f06f 0010 	mvn.w	r0, #16
}
    99e8:	4770      	bx	lr
	...

000099ec <main>:




int main(void)
{
    99ec:	b508      	push	{r3, lr}



	atmel_start_init();	
    99ee:	4b04      	ldr	r3, [pc, #16]	; (9a00 <main+0x14>)
    99f0:	4798      	blx	r3

	
	printf("Initialization\r\n");
    99f2:	4804      	ldr	r0, [pc, #16]	; (9a04 <main+0x18>)
    99f4:	4b04      	ldr	r3, [pc, #16]	; (9a08 <main+0x1c>)
    99f6:	4798      	blx	r3
	
	#ifdef HARDWARETEST
	
		#include "grid/grid_hardwaretest.h"
		
		grid_hardwaretest_main();
    99f8:	4b04      	ldr	r3, [pc, #16]	; (9a0c <main+0x20>)
    99fa:	4798      	blx	r3
    99fc:	e7fe      	b.n	99fc <main+0x10>
    99fe:	bf00      	nop
    9a00:	000042d1 	.word	0x000042d1
    9a04:	0000c100 	.word	0x0000c100
    9a08:	0000ac41 	.word	0x0000ac41
    9a0c:	000054e9 	.word	0x000054e9

00009a10 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    9a10:	b940      	cbnz	r0, 9a24 <_read+0x14>
{
    9a12:	b508      	push	{r3, lr}
    9a14:	460b      	mov	r3, r1
    9a16:	4611      	mov	r1, r2
    9a18:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    9a1a:	4b04      	ldr	r3, [pc, #16]	; (9a2c <_read+0x1c>)
    9a1c:	4798      	blx	r3
    9a1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9a22:	bd08      	pop	{r3, pc}
		return -1;
    9a24:	f04f 30ff 	mov.w	r0, #4294967295
    9a28:	4770      	bx	lr
    9a2a:	bf00      	nop
    9a2c:	00009a81 	.word	0x00009a81

00009a30 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    9a30:	3801      	subs	r0, #1
    9a32:	2802      	cmp	r0, #2
    9a34:	d808      	bhi.n	9a48 <_write+0x18>
{
    9a36:	b508      	push	{r3, lr}
    9a38:	460b      	mov	r3, r1
    9a3a:	4611      	mov	r1, r2
    9a3c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    9a3e:	4b04      	ldr	r3, [pc, #16]	; (9a50 <_write+0x20>)
    9a40:	4798      	blx	r3
    9a42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9a46:	bd08      	pop	{r3, pc}
		return -1;
    9a48:	f04f 30ff 	mov.w	r0, #4294967295
    9a4c:	4770      	bx	lr
    9a4e:	bf00      	nop
    9a50:	00009aa5 	.word	0x00009aa5

00009a54 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    9a54:	b570      	push	{r4, r5, r6, lr}
    9a56:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    9a58:	4d06      	ldr	r5, [pc, #24]	; (9a74 <stdio_io_init+0x20>)
    9a5a:	682b      	ldr	r3, [r5, #0]
    9a5c:	2100      	movs	r1, #0
    9a5e:	6898      	ldr	r0, [r3, #8]
    9a60:	4c05      	ldr	r4, [pc, #20]	; (9a78 <stdio_io_init+0x24>)
    9a62:	47a0      	blx	r4
	setbuf(stdin, NULL);
    9a64:	682b      	ldr	r3, [r5, #0]
    9a66:	2100      	movs	r1, #0
    9a68:	6858      	ldr	r0, [r3, #4]
    9a6a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    9a6c:	4b03      	ldr	r3, [pc, #12]	; (9a7c <stdio_io_init+0x28>)
    9a6e:	601e      	str	r6, [r3, #0]
    9a70:	bd70      	pop	{r4, r5, r6, pc}
    9a72:	bf00      	nop
    9a74:	20000058 	.word	0x20000058
    9a78:	0000ac71 	.word	0x0000ac71
    9a7c:	20000864 	.word	0x20000864

00009a80 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    9a80:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9a82:	4b06      	ldr	r3, [pc, #24]	; (9a9c <stdio_io_read+0x1c>)
    9a84:	681b      	ldr	r3, [r3, #0]
    9a86:	b133      	cbz	r3, 9a96 <stdio_io_read+0x16>
    9a88:	460a      	mov	r2, r1
    9a8a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    9a8c:	b292      	uxth	r2, r2
    9a8e:	4618      	mov	r0, r3
    9a90:	4b03      	ldr	r3, [pc, #12]	; (9aa0 <stdio_io_read+0x20>)
    9a92:	4798      	blx	r3
    9a94:	bd08      	pop	{r3, pc}
		return 0;
    9a96:	2000      	movs	r0, #0
}
    9a98:	bd08      	pop	{r3, pc}
    9a9a:	bf00      	nop
    9a9c:	20000864 	.word	0x20000864
    9aa0:	00005c89 	.word	0x00005c89

00009aa4 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    9aa4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9aa6:	4b06      	ldr	r3, [pc, #24]	; (9ac0 <stdio_io_write+0x1c>)
    9aa8:	681b      	ldr	r3, [r3, #0]
    9aaa:	b133      	cbz	r3, 9aba <stdio_io_write+0x16>
    9aac:	460a      	mov	r2, r1
    9aae:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    9ab0:	b292      	uxth	r2, r2
    9ab2:	4618      	mov	r0, r3
    9ab4:	4b03      	ldr	r3, [pc, #12]	; (9ac4 <stdio_io_write+0x20>)
    9ab6:	4798      	blx	r3
    9ab8:	bd08      	pop	{r3, pc}
		return 0;
    9aba:	2000      	movs	r0, #0
}
    9abc:	bd08      	pop	{r3, pc}
    9abe:	bf00      	nop
    9ac0:	20000864 	.word	0x20000864
    9ac4:	00005c81 	.word	0x00005c81

00009ac8 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    9ac8:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    9aca:	4c04      	ldr	r4, [pc, #16]	; (9adc <stdio_redirect_init+0x14>)
    9acc:	4620      	mov	r0, r4
    9ace:	4b04      	ldr	r3, [pc, #16]	; (9ae0 <stdio_redirect_init+0x18>)
    9ad0:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    9ad2:	4620      	mov	r0, r4
    9ad4:	4b03      	ldr	r3, [pc, #12]	; (9ae4 <stdio_redirect_init+0x1c>)
    9ad6:	4798      	blx	r3
    9ad8:	bd10      	pop	{r4, pc}
    9ada:	bf00      	nop
    9adc:	20000a44 	.word	0x20000a44
    9ae0:	00006221 	.word	0x00006221
    9ae4:	00009a55 	.word	0x00009a55

00009ae8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aea:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9aec:	780b      	ldrb	r3, [r1, #0]
    9aee:	f3c3 1441 	ubfx	r4, r3, #5, #2
    9af2:	2c01      	cmp	r4, #1
    9af4:	d15e      	bne.n	9bb4 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    9af6:	888c      	ldrh	r4, [r1, #4]
    9af8:	4d35      	ldr	r5, [pc, #212]	; (9bd0 <cdcdf_acm_req+0xe8>)
    9afa:	782d      	ldrb	r5, [r5, #0]
    9afc:	42a5      	cmp	r5, r4
    9afe:	d003      	beq.n	9b08 <cdcdf_acm_req+0x20>
    9b00:	4d33      	ldr	r5, [pc, #204]	; (9bd0 <cdcdf_acm_req+0xe8>)
    9b02:	786d      	ldrb	r5, [r5, #1]
    9b04:	42a5      	cmp	r5, r4
    9b06:	d158      	bne.n	9bba <cdcdf_acm_req+0xd2>
    9b08:	4616      	mov	r6, r2
    9b0a:	460c      	mov	r4, r1
    9b0c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    9b0e:	f013 0f80 	tst.w	r3, #128	; 0x80
    9b12:	d10c      	bne.n	9b2e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    9b14:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    9b16:	4b2f      	ldr	r3, [pc, #188]	; (9bd4 <cdcdf_acm_req+0xec>)
    9b18:	4798      	blx	r3
    9b1a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    9b1c:	7863      	ldrb	r3, [r4, #1]
    9b1e:	2b20      	cmp	r3, #32
    9b20:	d013      	beq.n	9b4a <cdcdf_acm_req+0x62>
    9b22:	2b22      	cmp	r3, #34	; 0x22
    9b24:	d032      	beq.n	9b8c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    9b26:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    9b2a:	b003      	add	sp, #12
    9b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    9b2e:	2a01      	cmp	r2, #1
    9b30:	d046      	beq.n	9bc0 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    9b32:	784b      	ldrb	r3, [r1, #1]
    9b34:	2b21      	cmp	r3, #33	; 0x21
    9b36:	d145      	bne.n	9bc4 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9b38:	88cb      	ldrh	r3, [r1, #6]
    9b3a:	2b07      	cmp	r3, #7
    9b3c:	d145      	bne.n	9bca <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    9b3e:	2300      	movs	r3, #0
    9b40:	2207      	movs	r2, #7
    9b42:	4925      	ldr	r1, [pc, #148]	; (9bd8 <cdcdf_acm_req+0xf0>)
    9b44:	4c25      	ldr	r4, [pc, #148]	; (9bdc <cdcdf_acm_req+0xf4>)
    9b46:	47a0      	blx	r4
    9b48:	e7ef      	b.n	9b2a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9b4a:	2f07      	cmp	r7, #7
    9b4c:	d12b      	bne.n	9ba6 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    9b4e:	b1be      	cbz	r6, 9b80 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    9b50:	6800      	ldr	r0, [r0, #0]
    9b52:	9000      	str	r0, [sp, #0]
    9b54:	888a      	ldrh	r2, [r1, #4]
    9b56:	798b      	ldrb	r3, [r1, #6]
    9b58:	f8ad 2004 	strh.w	r2, [sp, #4]
    9b5c:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    9b60:	4b1b      	ldr	r3, [pc, #108]	; (9bd0 <cdcdf_acm_req+0xe8>)
    9b62:	691b      	ldr	r3, [r3, #16]
    9b64:	b113      	cbz	r3, 9b6c <cdcdf_acm_req+0x84>
    9b66:	4668      	mov	r0, sp
    9b68:	4798      	blx	r3
    9b6a:	b1f8      	cbz	r0, 9bac <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    9b6c:	4b18      	ldr	r3, [pc, #96]	; (9bd0 <cdcdf_acm_req+0xe8>)
    9b6e:	aa02      	add	r2, sp, #8
    9b70:	e912 0003 	ldmdb	r2, {r0, r1}
    9b74:	6098      	str	r0, [r3, #8]
    9b76:	8199      	strh	r1, [r3, #12]
    9b78:	0c09      	lsrs	r1, r1, #16
    9b7a:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    9b7c:	2000      	movs	r0, #0
    9b7e:	e7d4      	b.n	9b2a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    9b80:	2300      	movs	r3, #0
    9b82:	2207      	movs	r2, #7
    9b84:	4628      	mov	r0, r5
    9b86:	4c15      	ldr	r4, [pc, #84]	; (9bdc <cdcdf_acm_req+0xf4>)
    9b88:	47a0      	blx	r4
    9b8a:	e7ce      	b.n	9b2a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    9b8c:	2300      	movs	r3, #0
    9b8e:	461a      	mov	r2, r3
    9b90:	4619      	mov	r1, r3
    9b92:	4618      	mov	r0, r3
    9b94:	4d11      	ldr	r5, [pc, #68]	; (9bdc <cdcdf_acm_req+0xf4>)
    9b96:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    9b98:	4b0d      	ldr	r3, [pc, #52]	; (9bd0 <cdcdf_acm_req+0xe8>)
    9b9a:	695b      	ldr	r3, [r3, #20]
    9b9c:	b143      	cbz	r3, 9bb0 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    9b9e:	8860      	ldrh	r0, [r4, #2]
    9ba0:	4798      	blx	r3
		return ERR_NONE;
    9ba2:	2000      	movs	r0, #0
    9ba4:	e7c1      	b.n	9b2a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9ba6:	f04f 30ff 	mov.w	r0, #4294967295
    9baa:	e7be      	b.n	9b2a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    9bac:	2000      	movs	r0, #0
    9bae:	e7bc      	b.n	9b2a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9bb0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    9bb2:	e7ba      	b.n	9b2a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9bb4:	f06f 0009 	mvn.w	r0, #9
    9bb8:	e7b7      	b.n	9b2a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9bba:	f06f 0009 	mvn.w	r0, #9
    9bbe:	e7b4      	b.n	9b2a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9bc0:	2000      	movs	r0, #0
    9bc2:	e7b2      	b.n	9b2a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    9bc4:	f06f 000c 	mvn.w	r0, #12
    9bc8:	e7af      	b.n	9b2a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9bca:	f04f 30ff 	mov.w	r0, #4294967295
    9bce:	e7ac      	b.n	9b2a <cdcdf_acm_req+0x42>
    9bd0:	20000868 	.word	0x20000868
    9bd4:	0000a7f9 	.word	0x0000a7f9
    9bd8:	20000870 	.word	0x20000870
    9bdc:	0000a32d 	.word	0x0000a32d

00009be0 <cdcdf_acm_ctrl>:
{
    9be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9be4:	b083      	sub	sp, #12
    9be6:	4616      	mov	r6, r2
	switch (ctrl) {
    9be8:	2901      	cmp	r1, #1
    9bea:	d066      	beq.n	9cba <cdcdf_acm_ctrl+0xda>
    9bec:	b141      	cbz	r1, 9c00 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    9bee:	2902      	cmp	r1, #2
    9bf0:	bf0c      	ite	eq
    9bf2:	f06f 001a 	mvneq.w	r0, #26
    9bf6:	f06f 000c 	mvnne.w	r0, #12
}
    9bfa:	b003      	add	sp, #12
    9bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9c00:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    9c04:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    9c06:	2800      	cmp	r0, #0
    9c08:	f000 8085 	beq.w	9d16 <cdcdf_acm_ctrl+0x136>
    9c0c:	f10a 3bff 	add.w	fp, sl, #4294967295
    9c10:	f10a 0301 	add.w	r3, sl, #1
    9c14:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9c16:	4f46      	ldr	r7, [pc, #280]	; (9d30 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    9c18:	f8df 9124 	ldr.w	r9, [pc, #292]	; 9d40 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9c1c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 9d44 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    9c20:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    9c22:	7943      	ldrb	r3, [r0, #5]
    9c24:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9c28:	2b02      	cmp	r3, #2
    9c2a:	d002      	beq.n	9c32 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    9c2c:	f06f 0009 	mvn.w	r0, #9
    9c30:	e7e3      	b.n	9bfa <cdcdf_acm_ctrl+0x1a>
    9c32:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9c36:	f89b 3000 	ldrb.w	r3, [fp]
    9c3a:	429a      	cmp	r2, r3
    9c3c:	d06e      	beq.n	9d1c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    9c3e:	2bff      	cmp	r3, #255	; 0xff
    9c40:	d16f      	bne.n	9d22 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    9c42:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    9c46:	2205      	movs	r2, #5
    9c48:	6871      	ldr	r1, [r6, #4]
    9c4a:	4b3a      	ldr	r3, [pc, #232]	; (9d34 <cdcdf_acm_ctrl+0x154>)
    9c4c:	4798      	blx	r3
		while (NULL != ep) {
    9c4e:	4604      	mov	r4, r0
    9c50:	b1f8      	cbz	r0, 9c92 <cdcdf_acm_ctrl+0xb2>
    9c52:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    9c56:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    9c58:	7963      	ldrb	r3, [r4, #5]
    9c5a:	7922      	ldrb	r2, [r4, #4]
    9c5c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9c60:	b292      	uxth	r2, r2
    9c62:	78e1      	ldrb	r1, [r4, #3]
    9c64:	4628      	mov	r0, r5
    9c66:	47b8      	blx	r7
    9c68:	2800      	cmp	r0, #0
    9c6a:	d15d      	bne.n	9d28 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9c6c:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    9c70:	bf14      	ite	ne
    9c72:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9c76:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    9c7a:	4628      	mov	r0, r5
    9c7c:	47c8      	blx	r9
			desc->sod = ep;
    9c7e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    9c80:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9c82:	6871      	ldr	r1, [r6, #4]
    9c84:	4420      	add	r0, r4
    9c86:	47c0      	blx	r8
		while (NULL != ep) {
    9c88:	4604      	mov	r4, r0
    9c8a:	2800      	cmp	r0, #0
    9c8c:	d1e3      	bne.n	9c56 <cdcdf_acm_ctrl+0x76>
    9c8e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    9c92:	6833      	ldr	r3, [r6, #0]
    9c94:	7818      	ldrb	r0, [r3, #0]
    9c96:	2204      	movs	r2, #4
    9c98:	6871      	ldr	r1, [r6, #4]
    9c9a:	4418      	add	r0, r3
    9c9c:	4b25      	ldr	r3, [pc, #148]	; (9d34 <cdcdf_acm_ctrl+0x154>)
    9c9e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    9ca0:	9b00      	ldr	r3, [sp, #0]
    9ca2:	459b      	cmp	fp, r3
    9ca4:	d004      	beq.n	9cb0 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    9ca6:	2800      	cmp	r0, #0
    9ca8:	d1ba      	bne.n	9c20 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    9caa:	f06f 0009 	mvn.w	r0, #9
    9cae:	e7a4      	b.n	9bfa <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    9cb0:	2201      	movs	r2, #1
    9cb2:	4b21      	ldr	r3, [pc, #132]	; (9d38 <cdcdf_acm_ctrl+0x158>)
    9cb4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    9cb6:	2000      	movs	r0, #0
    9cb8:	e79f      	b.n	9bfa <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9cba:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    9cbc:	b142      	cbz	r2, 9cd0 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9cbe:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    9cc0:	795b      	ldrb	r3, [r3, #5]
    9cc2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9cc6:	2b02      	cmp	r3, #2
    9cc8:	d002      	beq.n	9cd0 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    9cca:	f06f 0009 	mvn.w	r0, #9
    9cce:	e794      	b.n	9bfa <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    9cd0:	7823      	ldrb	r3, [r4, #0]
    9cd2:	2bff      	cmp	r3, #255	; 0xff
    9cd4:	d008      	beq.n	9ce8 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    9cd6:	23ff      	movs	r3, #255	; 0xff
    9cd8:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    9cda:	78a0      	ldrb	r0, [r4, #2]
    9cdc:	4298      	cmp	r0, r3
    9cde:	d003      	beq.n	9ce8 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9ce0:	4b16      	ldr	r3, [pc, #88]	; (9d3c <cdcdf_acm_ctrl+0x15c>)
    9ce2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9ce4:	23ff      	movs	r3, #255	; 0xff
    9ce6:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    9ce8:	7863      	ldrb	r3, [r4, #1]
    9cea:	2bff      	cmp	r3, #255	; 0xff
    9cec:	d008      	beq.n	9d00 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    9cee:	23ff      	movs	r3, #255	; 0xff
    9cf0:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    9cf2:	78e0      	ldrb	r0, [r4, #3]
    9cf4:	4298      	cmp	r0, r3
    9cf6:	d003      	beq.n	9d00 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9cf8:	4b10      	ldr	r3, [pc, #64]	; (9d3c <cdcdf_acm_ctrl+0x15c>)
    9cfa:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9cfc:	23ff      	movs	r3, #255	; 0xff
    9cfe:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    9d00:	7920      	ldrb	r0, [r4, #4]
    9d02:	28ff      	cmp	r0, #255	; 0xff
    9d04:	d003      	beq.n	9d0e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    9d06:	4b0d      	ldr	r3, [pc, #52]	; (9d3c <cdcdf_acm_ctrl+0x15c>)
    9d08:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9d0a:	23ff      	movs	r3, #255	; 0xff
    9d0c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    9d0e:	2000      	movs	r0, #0
    9d10:	4b09      	ldr	r3, [pc, #36]	; (9d38 <cdcdf_acm_ctrl+0x158>)
    9d12:	7158      	strb	r0, [r3, #5]
    9d14:	e771      	b.n	9bfa <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    9d16:	f06f 0009 	mvn.w	r0, #9
    9d1a:	e76e      	b.n	9bfa <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    9d1c:	f06f 0011 	mvn.w	r0, #17
    9d20:	e76b      	b.n	9bfa <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    9d22:	f06f 001b 	mvn.w	r0, #27
    9d26:	e768      	b.n	9bfa <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    9d28:	f06f 0013 	mvn.w	r0, #19
    9d2c:	e765      	b.n	9bfa <cdcdf_acm_ctrl+0x1a>
    9d2e:	bf00      	nop
    9d30:	00006505 	.word	0x00006505
    9d34:	0000a819 	.word	0x0000a819
    9d38:	20000868 	.word	0x20000868
    9d3c:	0000656d 	.word	0x0000656d
    9d40:	00006599 	.word	0x00006599
    9d44:	0000a853 	.word	0x0000a853

00009d48 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    9d48:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9d4a:	4b0a      	ldr	r3, [pc, #40]	; (9d74 <cdcdf_acm_init+0x2c>)
    9d4c:	4798      	blx	r3
    9d4e:	2801      	cmp	r0, #1
    9d50:	d80c      	bhi.n	9d6c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    9d52:	4809      	ldr	r0, [pc, #36]	; (9d78 <cdcdf_acm_init+0x30>)
    9d54:	4b09      	ldr	r3, [pc, #36]	; (9d7c <cdcdf_acm_init+0x34>)
    9d56:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    9d58:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    9d5a:	3018      	adds	r0, #24
    9d5c:	4b08      	ldr	r3, [pc, #32]	; (9d80 <cdcdf_acm_init+0x38>)
    9d5e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    9d60:	4908      	ldr	r1, [pc, #32]	; (9d84 <cdcdf_acm_init+0x3c>)
    9d62:	2001      	movs	r0, #1
    9d64:	4b08      	ldr	r3, [pc, #32]	; (9d88 <cdcdf_acm_init+0x40>)
    9d66:	4798      	blx	r3
	return ERR_NONE;
    9d68:	2000      	movs	r0, #0
    9d6a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9d6c:	f06f 0010 	mvn.w	r0, #16
}
    9d70:	bd08      	pop	{r3, pc}
    9d72:	bf00      	nop
    9d74:	0000a805 	.word	0x0000a805
    9d78:	20000868 	.word	0x20000868
    9d7c:	00009be1 	.word	0x00009be1
    9d80:	0000a7e5 	.word	0x0000a7e5
    9d84:	20000040 	.word	0x20000040
    9d88:	0000a769 	.word	0x0000a769

00009d8c <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9d8c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9d8e:	780b      	ldrb	r3, [r1, #0]
    9d90:	2b81      	cmp	r3, #129	; 0x81
    9d92:	d010      	beq.n	9db6 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9d94:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9d98:	2b01      	cmp	r3, #1
    9d9a:	d13f      	bne.n	9e1c <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    9d9c:	888a      	ldrh	r2, [r1, #4]
    9d9e:	4b22      	ldr	r3, [pc, #136]	; (9e28 <hid_keyboard_req+0x9c>)
    9da0:	7b1b      	ldrb	r3, [r3, #12]
    9da2:	429a      	cmp	r2, r3
    9da4:	d13d      	bne.n	9e22 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    9da6:	784b      	ldrb	r3, [r1, #1]
    9da8:	2b03      	cmp	r3, #3
    9daa:	d028      	beq.n	9dfe <hid_keyboard_req+0x72>
    9dac:	2b0b      	cmp	r3, #11
    9dae:	d02c      	beq.n	9e0a <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9db0:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9db4:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9db6:	784b      	ldrb	r3, [r1, #1]
    9db8:	2b06      	cmp	r3, #6
    9dba:	d002      	beq.n	9dc2 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    9dbc:	f06f 0009 	mvn.w	r0, #9
    9dc0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9dc2:	888a      	ldrh	r2, [r1, #4]
    9dc4:	4b18      	ldr	r3, [pc, #96]	; (9e28 <hid_keyboard_req+0x9c>)
    9dc6:	7b1b      	ldrb	r3, [r3, #12]
    9dc8:	429a      	cmp	r2, r3
    9dca:	d002      	beq.n	9dd2 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    9dcc:	f06f 0009 	mvn.w	r0, #9
    9dd0:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    9dd2:	884b      	ldrh	r3, [r1, #2]
    9dd4:	0a1b      	lsrs	r3, r3, #8
    9dd6:	2b21      	cmp	r3, #33	; 0x21
    9dd8:	d004      	beq.n	9de4 <hid_keyboard_req+0x58>
    9dda:	2b22      	cmp	r3, #34	; 0x22
    9ddc:	d009      	beq.n	9df2 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    9dde:	f06f 000c 	mvn.w	r0, #12
    9de2:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    9de4:	4b10      	ldr	r3, [pc, #64]	; (9e28 <hid_keyboard_req+0x9c>)
    9de6:	6819      	ldr	r1, [r3, #0]
    9de8:	2300      	movs	r3, #0
    9dea:	780a      	ldrb	r2, [r1, #0]
    9dec:	4c0f      	ldr	r4, [pc, #60]	; (9e2c <hid_keyboard_req+0xa0>)
    9dee:	47a0      	blx	r4
    9df0:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    9df2:	2300      	movs	r3, #0
    9df4:	223b      	movs	r2, #59	; 0x3b
    9df6:	490e      	ldr	r1, [pc, #56]	; (9e30 <hid_keyboard_req+0xa4>)
    9df8:	4c0c      	ldr	r4, [pc, #48]	; (9e2c <hid_keyboard_req+0xa0>)
    9dfa:	47a0      	blx	r4
    9dfc:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    9dfe:	2300      	movs	r3, #0
    9e00:	2201      	movs	r2, #1
    9e02:	490c      	ldr	r1, [pc, #48]	; (9e34 <hid_keyboard_req+0xa8>)
    9e04:	4c09      	ldr	r4, [pc, #36]	; (9e2c <hid_keyboard_req+0xa0>)
    9e06:	47a0      	blx	r4
    9e08:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    9e0a:	884a      	ldrh	r2, [r1, #2]
    9e0c:	4b06      	ldr	r3, [pc, #24]	; (9e28 <hid_keyboard_req+0x9c>)
    9e0e:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    9e10:	2300      	movs	r3, #0
    9e12:	461a      	mov	r2, r3
    9e14:	4619      	mov	r1, r3
    9e16:	4c05      	ldr	r4, [pc, #20]	; (9e2c <hid_keyboard_req+0xa0>)
    9e18:	47a0      	blx	r4
    9e1a:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9e1c:	f06f 0009 	mvn.w	r0, #9
    9e20:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9e22:	f06f 0009 	mvn.w	r0, #9
    9e26:	bd10      	pop	{r4, pc}
    9e28:	2000088c 	.word	0x2000088c
    9e2c:	0000a32d 	.word	0x0000a32d
    9e30:	0000c110 	.word	0x0000c110
    9e34:	2000089b 	.word	0x2000089b

00009e38 <hid_keyboard_ctrl>:
{
    9e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e3c:	4614      	mov	r4, r2
	switch (ctrl) {
    9e3e:	2901      	cmp	r1, #1
    9e40:	d050      	beq.n	9ee4 <hid_keyboard_ctrl+0xac>
    9e42:	b141      	cbz	r1, 9e56 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    9e44:	2902      	cmp	r1, #2
    9e46:	bf0c      	ite	eq
    9e48:	f06f 051a 	mvneq.w	r5, #26
    9e4c:	f06f 050c 	mvnne.w	r5, #12
}
    9e50:	4628      	mov	r0, r5
    9e52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    9e56:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    9e5a:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	d05e      	beq.n	9f1e <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    9e60:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    9e62:	795b      	ldrb	r3, [r3, #5]
    9e64:	2b03      	cmp	r3, #3
    9e66:	d15d      	bne.n	9f24 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    9e68:	f898 300c 	ldrb.w	r3, [r8, #12]
    9e6c:	429a      	cmp	r2, r3
    9e6e:	d05c      	beq.n	9f2a <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    9e70:	2bff      	cmp	r3, #255	; 0xff
    9e72:	d15d      	bne.n	9f30 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    9e74:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    9e78:	6823      	ldr	r3, [r4, #0]
    9e7a:	7818      	ldrb	r0, [r3, #0]
    9e7c:	2221      	movs	r2, #33	; 0x21
    9e7e:	6861      	ldr	r1, [r4, #4]
    9e80:	4418      	add	r0, r3
    9e82:	4b31      	ldr	r3, [pc, #196]	; (9f48 <hid_keyboard_ctrl+0x110>)
    9e84:	4798      	blx	r3
    9e86:	4b31      	ldr	r3, [pc, #196]	; (9f4c <hid_keyboard_ctrl+0x114>)
    9e88:	6018      	str	r0, [r3, #0]
    9e8a:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9e8c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 9f54 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9e90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9f58 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    9e94:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9f5c <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9e98:	6823      	ldr	r3, [r4, #0]
    9e9a:	7818      	ldrb	r0, [r3, #0]
    9e9c:	6861      	ldr	r1, [r4, #4]
    9e9e:	4418      	add	r0, r3
    9ea0:	47c8      	blx	r9
		desc->sod = ep;
    9ea2:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    9ea4:	2800      	cmp	r0, #0
    9ea6:	d046      	beq.n	9f36 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    9ea8:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    9eaa:	7943      	ldrb	r3, [r0, #5]
    9eac:	7902      	ldrb	r2, [r0, #4]
    9eae:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9eb2:	b292      	uxth	r2, r2
    9eb4:	78c1      	ldrb	r1, [r0, #3]
    9eb6:	4638      	mov	r0, r7
    9eb8:	47d0      	blx	sl
    9eba:	4605      	mov	r5, r0
    9ebc:	2800      	cmp	r0, #0
    9ebe:	d13d      	bne.n	9f3c <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9ec0:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    9ec4:	bf14      	ite	ne
    9ec6:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9eca:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    9ece:	4638      	mov	r0, r7
    9ed0:	47d8      	blx	fp
    9ed2:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    9ed4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    9ed8:	d1de      	bne.n	9e98 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    9eda:	4b1c      	ldr	r3, [pc, #112]	; (9f4c <hid_keyboard_ctrl+0x114>)
    9edc:	2201      	movs	r2, #1
    9ede:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    9ee0:	741a      	strb	r2, [r3, #16]
    9ee2:	e7b5      	b.n	9e50 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    9ee4:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    9ee6:	b11a      	cbz	r2, 9ef0 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9ee8:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    9eea:	795b      	ldrb	r3, [r3, #5]
    9eec:	2b03      	cmp	r3, #3
    9eee:	d128      	bne.n	9f42 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    9ef0:	7b2b      	ldrb	r3, [r5, #12]
    9ef2:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    9ef4:	bf1c      	itt	ne
    9ef6:	23ff      	movne	r3, #255	; 0xff
    9ef8:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    9efa:	7b68      	ldrb	r0, [r5, #13]
    9efc:	28ff      	cmp	r0, #255	; 0xff
    9efe:	d003      	beq.n	9f08 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    9f00:	4b13      	ldr	r3, [pc, #76]	; (9f50 <hid_keyboard_ctrl+0x118>)
    9f02:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9f04:	23ff      	movs	r3, #255	; 0xff
    9f06:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    9f08:	7ba8      	ldrb	r0, [r5, #14]
    9f0a:	28ff      	cmp	r0, #255	; 0xff
    9f0c:	d003      	beq.n	9f16 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    9f0e:	4b10      	ldr	r3, [pc, #64]	; (9f50 <hid_keyboard_ctrl+0x118>)
    9f10:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9f12:	23ff      	movs	r3, #255	; 0xff
    9f14:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    9f16:	2500      	movs	r5, #0
    9f18:	4b0c      	ldr	r3, [pc, #48]	; (9f4c <hid_keyboard_ctrl+0x114>)
    9f1a:	741d      	strb	r5, [r3, #16]
    9f1c:	e798      	b.n	9e50 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    9f1e:	f06f 0509 	mvn.w	r5, #9
    9f22:	e795      	b.n	9e50 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    9f24:	f06f 0509 	mvn.w	r5, #9
    9f28:	e792      	b.n	9e50 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    9f2a:	f06f 0511 	mvn.w	r5, #17
    9f2e:	e78f      	b.n	9e50 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    9f30:	f06f 051b 	mvn.w	r5, #27
    9f34:	e78c      	b.n	9e50 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    9f36:	f06f 0509 	mvn.w	r5, #9
    9f3a:	e789      	b.n	9e50 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    9f3c:	f06f 0513 	mvn.w	r5, #19
    9f40:	e786      	b.n	9e50 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    9f42:	f06f 0509 	mvn.w	r5, #9
    9f46:	e783      	b.n	9e50 <hid_keyboard_ctrl+0x18>
    9f48:	0000a819 	.word	0x0000a819
    9f4c:	2000088c 	.word	0x2000088c
    9f50:	0000656d 	.word	0x0000656d
    9f54:	0000a853 	.word	0x0000a853
    9f58:	00006505 	.word	0x00006505
    9f5c:	00006599 	.word	0x00006599

00009f60 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    9f60:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9f62:	4b0a      	ldr	r3, [pc, #40]	; (9f8c <hiddf_keyboard_init+0x2c>)
    9f64:	4798      	blx	r3
    9f66:	2801      	cmp	r0, #1
    9f68:	d80c      	bhi.n	9f84 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    9f6a:	4809      	ldr	r0, [pc, #36]	; (9f90 <hiddf_keyboard_init+0x30>)
    9f6c:	4b09      	ldr	r3, [pc, #36]	; (9f94 <hiddf_keyboard_init+0x34>)
    9f6e:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    9f70:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    9f72:	3014      	adds	r0, #20
    9f74:	4b08      	ldr	r3, [pc, #32]	; (9f98 <hiddf_keyboard_init+0x38>)
    9f76:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    9f78:	4908      	ldr	r1, [pc, #32]	; (9f9c <hiddf_keyboard_init+0x3c>)
    9f7a:	2001      	movs	r0, #1
    9f7c:	4b08      	ldr	r3, [pc, #32]	; (9fa0 <hiddf_keyboard_init+0x40>)
    9f7e:	4798      	blx	r3
	return ERR_NONE;
    9f80:	2000      	movs	r0, #0
    9f82:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9f84:	f06f 0010 	mvn.w	r0, #16
}
    9f88:	bd08      	pop	{r3, pc}
    9f8a:	bf00      	nop
    9f8c:	0000a805 	.word	0x0000a805
    9f90:	2000088c 	.word	0x2000088c
    9f94:	00009e39 	.word	0x00009e39
    9f98:	0000a7e5 	.word	0x0000a7e5
    9f9c:	20000048 	.word	0x20000048
    9fa0:	0000a769 	.word	0x0000a769

00009fa4 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9fa4:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9fa6:	780b      	ldrb	r3, [r1, #0]
    9fa8:	2b81      	cmp	r3, #129	; 0x81
    9faa:	d010      	beq.n	9fce <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9fac:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9fb0:	2b01      	cmp	r3, #1
    9fb2:	d13f      	bne.n	a034 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    9fb4:	888a      	ldrh	r2, [r1, #4]
    9fb6:	4b22      	ldr	r3, [pc, #136]	; (a040 <hid_mouse_req+0x9c>)
    9fb8:	7a1b      	ldrb	r3, [r3, #8]
    9fba:	429a      	cmp	r2, r3
    9fbc:	d13d      	bne.n	a03a <hid_mouse_req+0x96>
			switch (req->bRequest) {
    9fbe:	784b      	ldrb	r3, [r1, #1]
    9fc0:	2b03      	cmp	r3, #3
    9fc2:	d028      	beq.n	a016 <hid_mouse_req+0x72>
    9fc4:	2b0b      	cmp	r3, #11
    9fc6:	d02c      	beq.n	a022 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9fc8:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9fcc:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9fce:	784b      	ldrb	r3, [r1, #1]
    9fd0:	2b06      	cmp	r3, #6
    9fd2:	d002      	beq.n	9fda <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    9fd4:	f06f 0009 	mvn.w	r0, #9
    9fd8:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    9fda:	888a      	ldrh	r2, [r1, #4]
    9fdc:	4b18      	ldr	r3, [pc, #96]	; (a040 <hid_mouse_req+0x9c>)
    9fde:	7a1b      	ldrb	r3, [r3, #8]
    9fe0:	429a      	cmp	r2, r3
    9fe2:	d002      	beq.n	9fea <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    9fe4:	f06f 0009 	mvn.w	r0, #9
    9fe8:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    9fea:	884b      	ldrh	r3, [r1, #2]
    9fec:	0a1b      	lsrs	r3, r3, #8
    9fee:	2b21      	cmp	r3, #33	; 0x21
    9ff0:	d004      	beq.n	9ffc <hid_mouse_req+0x58>
    9ff2:	2b22      	cmp	r3, #34	; 0x22
    9ff4:	d009      	beq.n	a00a <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    9ff6:	f06f 000c 	mvn.w	r0, #12
    9ffa:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    9ffc:	4b10      	ldr	r3, [pc, #64]	; (a040 <hid_mouse_req+0x9c>)
    9ffe:	6819      	ldr	r1, [r3, #0]
    a000:	2300      	movs	r3, #0
    a002:	780a      	ldrb	r2, [r1, #0]
    a004:	4c0f      	ldr	r4, [pc, #60]	; (a044 <hid_mouse_req+0xa0>)
    a006:	47a0      	blx	r4
    a008:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    a00a:	2300      	movs	r3, #0
    a00c:	2234      	movs	r2, #52	; 0x34
    a00e:	490e      	ldr	r1, [pc, #56]	; (a048 <hid_mouse_req+0xa4>)
    a010:	4c0c      	ldr	r4, [pc, #48]	; (a044 <hid_mouse_req+0xa0>)
    a012:	47a0      	blx	r4
    a014:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    a016:	2300      	movs	r3, #0
    a018:	2201      	movs	r2, #1
    a01a:	490c      	ldr	r1, [pc, #48]	; (a04c <hid_mouse_req+0xa8>)
    a01c:	4c09      	ldr	r4, [pc, #36]	; (a044 <hid_mouse_req+0xa0>)
    a01e:	47a0      	blx	r4
    a020:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    a022:	884a      	ldrh	r2, [r1, #2]
    a024:	4b06      	ldr	r3, [pc, #24]	; (a040 <hid_mouse_req+0x9c>)
    a026:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    a028:	2300      	movs	r3, #0
    a02a:	461a      	mov	r2, r3
    a02c:	4619      	mov	r1, r3
    a02e:	4c05      	ldr	r4, [pc, #20]	; (a044 <hid_mouse_req+0xa0>)
    a030:	47a0      	blx	r4
    a032:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a034:	f06f 0009 	mvn.w	r0, #9
    a038:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a03a:	f06f 0009 	mvn.w	r0, #9
    a03e:	bd10      	pop	{r4, pc}
    a040:	200008ac 	.word	0x200008ac
    a044:	0000a32d 	.word	0x0000a32d
    a048:	0000c14c 	.word	0x0000c14c
    a04c:	200008b6 	.word	0x200008b6

0000a050 <hid_mouse_ctrl>:
{
    a050:	b570      	push	{r4, r5, r6, lr}
    a052:	4614      	mov	r4, r2
	switch (ctrl) {
    a054:	2901      	cmp	r1, #1
    a056:	d040      	beq.n	a0da <hid_mouse_ctrl+0x8a>
    a058:	b139      	cbz	r1, a06a <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    a05a:	2902      	cmp	r1, #2
    a05c:	bf0c      	ite	eq
    a05e:	f06f 041a 	mvneq.w	r4, #26
    a062:	f06f 040c 	mvnne.w	r4, #12
}
    a066:	4620      	mov	r0, r4
    a068:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a06a:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    a06c:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a06e:	2b00      	cmp	r3, #0
    a070:	d049      	beq.n	a106 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a072:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a074:	795b      	ldrb	r3, [r3, #5]
    a076:	2b03      	cmp	r3, #3
    a078:	d148      	bne.n	a10c <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a07a:	7a2b      	ldrb	r3, [r5, #8]
    a07c:	429a      	cmp	r2, r3
    a07e:	d048      	beq.n	a112 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a080:	2bff      	cmp	r3, #255	; 0xff
    a082:	d149      	bne.n	a118 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a084:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a086:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    a088:	7818      	ldrb	r0, [r3, #0]
    a08a:	2221      	movs	r2, #33	; 0x21
    a08c:	6861      	ldr	r1, [r4, #4]
    a08e:	4418      	add	r0, r3
    a090:	4b29      	ldr	r3, [pc, #164]	; (a138 <hid_mouse_ctrl+0xe8>)
    a092:	4798      	blx	r3
    a094:	4b29      	ldr	r3, [pc, #164]	; (a13c <hid_mouse_ctrl+0xec>)
    a096:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a098:	6823      	ldr	r3, [r4, #0]
    a09a:	7818      	ldrb	r0, [r3, #0]
    a09c:	6861      	ldr	r1, [r4, #4]
    a09e:	4418      	add	r0, r3
    a0a0:	4b27      	ldr	r3, [pc, #156]	; (a140 <hid_mouse_ctrl+0xf0>)
    a0a2:	4798      	blx	r3
	desc->sod = ep;
    a0a4:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    a0a6:	2800      	cmp	r0, #0
    a0a8:	d039      	beq.n	a11e <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    a0aa:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a0ac:	7943      	ldrb	r3, [r0, #5]
    a0ae:	7902      	ldrb	r2, [r0, #4]
    a0b0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a0b4:	b292      	uxth	r2, r2
    a0b6:	78c1      	ldrb	r1, [r0, #3]
    a0b8:	4630      	mov	r0, r6
    a0ba:	4b22      	ldr	r3, [pc, #136]	; (a144 <hid_mouse_ctrl+0xf4>)
    a0bc:	4798      	blx	r3
    a0be:	4604      	mov	r4, r0
    a0c0:	bb80      	cbnz	r0, a124 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a0c2:	f016 0f80 	tst.w	r6, #128	; 0x80
    a0c6:	d030      	beq.n	a12a <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    a0c8:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    a0ca:	4630      	mov	r0, r6
    a0cc:	4b1e      	ldr	r3, [pc, #120]	; (a148 <hid_mouse_ctrl+0xf8>)
    a0ce:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    a0d0:	4b1a      	ldr	r3, [pc, #104]	; (a13c <hid_mouse_ctrl+0xec>)
    a0d2:	2201      	movs	r2, #1
    a0d4:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    a0d6:	72da      	strb	r2, [r3, #11]
    a0d8:	e7c5      	b.n	a066 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a0da:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a0dc:	b11a      	cbz	r2, a0e6 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a0de:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a0e0:	795b      	ldrb	r3, [r3, #5]
    a0e2:	2b03      	cmp	r3, #3
    a0e4:	d124      	bne.n	a130 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    a0e6:	7a2b      	ldrb	r3, [r5, #8]
    a0e8:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a0ea:	bf1c      	itt	ne
    a0ec:	23ff      	movne	r3, #255	; 0xff
    a0ee:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    a0f0:	7a68      	ldrb	r0, [r5, #9]
    a0f2:	28ff      	cmp	r0, #255	; 0xff
    a0f4:	d003      	beq.n	a0fe <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    a0f6:	4b15      	ldr	r3, [pc, #84]	; (a14c <hid_mouse_ctrl+0xfc>)
    a0f8:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a0fa:	23ff      	movs	r3, #255	; 0xff
    a0fc:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    a0fe:	2400      	movs	r4, #0
    a100:	4b0e      	ldr	r3, [pc, #56]	; (a13c <hid_mouse_ctrl+0xec>)
    a102:	72dc      	strb	r4, [r3, #11]
    a104:	e7af      	b.n	a066 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a106:	f06f 0409 	mvn.w	r4, #9
    a10a:	e7ac      	b.n	a066 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a10c:	f06f 0409 	mvn.w	r4, #9
    a110:	e7a9      	b.n	a066 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    a112:	f06f 0411 	mvn.w	r4, #17
    a116:	e7a6      	b.n	a066 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    a118:	f06f 041b 	mvn.w	r4, #27
    a11c:	e7a3      	b.n	a066 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a11e:	f06f 0409 	mvn.w	r4, #9
    a122:	e7a0      	b.n	a066 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    a124:	f06f 0413 	mvn.w	r4, #19
    a128:	e79d      	b.n	a066 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    a12a:	f04f 34ff 	mov.w	r4, #4294967295
    a12e:	e79a      	b.n	a066 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    a130:	f06f 0409 	mvn.w	r4, #9
    a134:	e797      	b.n	a066 <hid_mouse_ctrl+0x16>
    a136:	bf00      	nop
    a138:	0000a819 	.word	0x0000a819
    a13c:	200008ac 	.word	0x200008ac
    a140:	0000a853 	.word	0x0000a853
    a144:	00006505 	.word	0x00006505
    a148:	00006599 	.word	0x00006599
    a14c:	0000656d 	.word	0x0000656d

0000a150 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    a150:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a152:	4b0a      	ldr	r3, [pc, #40]	; (a17c <hiddf_mouse_init+0x2c>)
    a154:	4798      	blx	r3
    a156:	2801      	cmp	r0, #1
    a158:	d80c      	bhi.n	a174 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    a15a:	4809      	ldr	r0, [pc, #36]	; (a180 <hiddf_mouse_init+0x30>)
    a15c:	4b09      	ldr	r3, [pc, #36]	; (a184 <hiddf_mouse_init+0x34>)
    a15e:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    a160:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    a162:	300c      	adds	r0, #12
    a164:	4b08      	ldr	r3, [pc, #32]	; (a188 <hiddf_mouse_init+0x38>)
    a166:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    a168:	4908      	ldr	r1, [pc, #32]	; (a18c <hiddf_mouse_init+0x3c>)
    a16a:	2001      	movs	r0, #1
    a16c:	4b08      	ldr	r3, [pc, #32]	; (a190 <hiddf_mouse_init+0x40>)
    a16e:	4798      	blx	r3
	return ERR_NONE;
    a170:	2000      	movs	r0, #0
    a172:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a174:	f06f 0010 	mvn.w	r0, #16
}
    a178:	bd08      	pop	{r3, pc}
    a17a:	bf00      	nop
    a17c:	0000a805 	.word	0x0000a805
    a180:	200008ac 	.word	0x200008ac
    a184:	0000a051 	.word	0x0000a051
    a188:	0000a7e5 	.word	0x0000a7e5
    a18c:	20000050 	.word	0x20000050
    a190:	0000a769 	.word	0x0000a769

0000a194 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    a194:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a196:	4b07      	ldr	r3, [pc, #28]	; (a1b4 <usbdc_unconfig+0x20>)
    a198:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    a19a:	b14c      	cbz	r4, a1b0 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    a19c:	2600      	movs	r6, #0
    a19e:	2501      	movs	r5, #1
    a1a0:	6863      	ldr	r3, [r4, #4]
    a1a2:	4632      	mov	r2, r6
    a1a4:	4629      	mov	r1, r5
    a1a6:	4620      	mov	r0, r4
    a1a8:	4798      	blx	r3
		func = func->next;
    a1aa:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    a1ac:	2c00      	cmp	r4, #0
    a1ae:	d1f7      	bne.n	a1a0 <usbdc_unconfig+0xc>
    a1b0:	bd70      	pop	{r4, r5, r6, pc}
    a1b2:	bf00      	nop
    a1b4:	200008c4 	.word	0x200008c4

0000a1b8 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    a1b8:	b570      	push	{r4, r5, r6, lr}
    a1ba:	4606      	mov	r6, r0
    a1bc:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a1be:	4b07      	ldr	r3, [pc, #28]	; (a1dc <usbdc_change_notify+0x24>)
    a1c0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    a1c2:	b91c      	cbnz	r4, a1cc <usbdc_change_notify+0x14>
    a1c4:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    a1c6:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    a1c8:	2c00      	cmp	r4, #0
    a1ca:	d0fb      	beq.n	a1c4 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    a1cc:	6863      	ldr	r3, [r4, #4]
    a1ce:	2b00      	cmp	r3, #0
    a1d0:	d0f9      	beq.n	a1c6 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    a1d2:	4629      	mov	r1, r5
    a1d4:	4630      	mov	r0, r6
    a1d6:	4798      	blx	r3
    a1d8:	e7f5      	b.n	a1c6 <usbdc_change_notify+0xe>
    a1da:	bf00      	nop
    a1dc:	200008c4 	.word	0x200008c4

0000a1e0 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1e2:	4607      	mov	r7, r0
    a1e4:	460e      	mov	r6, r1
    a1e6:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    a1e8:	4b0c      	ldr	r3, [pc, #48]	; (a21c <usbdc_request_handler+0x3c>)
    a1ea:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    a1ec:	b91c      	cbnz	r4, a1f6 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    a1ee:	2000      	movs	r0, #0
    a1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    a1f2:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    a1f4:	b16c      	cbz	r4, a212 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    a1f6:	6863      	ldr	r3, [r4, #4]
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d0fa      	beq.n	a1f2 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    a1fc:	462a      	mov	r2, r5
    a1fe:	4631      	mov	r1, r6
    a200:	4638      	mov	r0, r7
    a202:	4798      	blx	r3
			if (0 == rc) {
    a204:	b138      	cbz	r0, a216 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    a206:	f110 0f0a 	cmn.w	r0, #10
    a20a:	d0f2      	beq.n	a1f2 <usbdc_request_handler+0x12>
				return -1;
    a20c:	f04f 30ff 	mov.w	r0, #4294967295
}
    a210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a212:	2000      	movs	r0, #0
    a214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    a216:	2001      	movs	r0, #1
    a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a21a:	bf00      	nop
    a21c:	200008c4 	.word	0x200008c4

0000a220 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    a220:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a222:	4b06      	ldr	r3, [pc, #24]	; (a23c <usbd_sof_cb+0x1c>)
    a224:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    a226:	b91c      	cbnz	r4, a230 <usbd_sof_cb+0x10>
    a228:	bd10      	pop	{r4, pc}
		sof = sof->next;
    a22a:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    a22c:	2c00      	cmp	r4, #0
    a22e:	d0fb      	beq.n	a228 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    a230:	6863      	ldr	r3, [r4, #4]
    a232:	2b00      	cmp	r3, #0
    a234:	d0f9      	beq.n	a22a <usbd_sof_cb+0xa>
			sof->cb();
    a236:	4798      	blx	r3
    a238:	e7f7      	b.n	a22a <usbd_sof_cb+0xa>
    a23a:	bf00      	nop
    a23c:	200008c4 	.word	0x200008c4

0000a240 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    a240:	b510      	push	{r4, lr}
    a242:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    a244:	b119      	cbz	r1, a24e <usbdc_cb_ctl_done+0xe>
    a246:	2901      	cmp	r1, #1
    a248:	d026      	beq.n	a298 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    a24a:	2000      	movs	r0, #0
    a24c:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    a24e:	7813      	ldrb	r3, [r2, #0]
    a250:	2b00      	cmp	r3, #0
    a252:	d1fa      	bne.n	a24a <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    a254:	7853      	ldrb	r3, [r2, #1]
    a256:	2b05      	cmp	r3, #5
    a258:	d00f      	beq.n	a27a <usbdc_cb_ctl_done+0x3a>
    a25a:	2b09      	cmp	r3, #9
    a25c:	d1f5      	bne.n	a24a <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    a25e:	8852      	ldrh	r2, [r2, #2]
    a260:	4b10      	ldr	r3, [pc, #64]	; (a2a4 <usbdc_cb_ctl_done+0x64>)
    a262:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    a264:	8863      	ldrh	r3, [r4, #2]
    a266:	2b00      	cmp	r3, #0
    a268:	bf14      	ite	ne
    a26a:	2104      	movne	r1, #4
    a26c:	2103      	moveq	r1, #3
    a26e:	4b0d      	ldr	r3, [pc, #52]	; (a2a4 <usbdc_cb_ctl_done+0x64>)
    a270:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a272:	2001      	movs	r0, #1
    a274:	4b0c      	ldr	r3, [pc, #48]	; (a2a8 <usbdc_cb_ctl_done+0x68>)
    a276:	4798      	blx	r3
    a278:	e7e7      	b.n	a24a <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    a27a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    a27c:	b2c0      	uxtb	r0, r0
    a27e:	4b0b      	ldr	r3, [pc, #44]	; (a2ac <usbdc_cb_ctl_done+0x6c>)
    a280:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    a282:	8863      	ldrh	r3, [r4, #2]
    a284:	2b00      	cmp	r3, #0
    a286:	bf14      	ite	ne
    a288:	2103      	movne	r1, #3
    a28a:	2102      	moveq	r1, #2
    a28c:	4b05      	ldr	r3, [pc, #20]	; (a2a4 <usbdc_cb_ctl_done+0x64>)
    a28e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a290:	2001      	movs	r0, #1
    a292:	4b05      	ldr	r3, [pc, #20]	; (a2a8 <usbdc_cb_ctl_done+0x68>)
    a294:	4798      	blx	r3
    a296:	e7d8      	b.n	a24a <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    a298:	2201      	movs	r2, #1
    a29a:	4621      	mov	r1, r4
    a29c:	2000      	movs	r0, #0
    a29e:	4b04      	ldr	r3, [pc, #16]	; (a2b0 <usbdc_cb_ctl_done+0x70>)
    a2a0:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    a2a2:	e7d2      	b.n	a24a <usbdc_cb_ctl_done+0xa>
    a2a4:	200008c4 	.word	0x200008c4
    a2a8:	0000a1b9 	.word	0x0000a1b9
    a2ac:	000064f9 	.word	0x000064f9
    a2b0:	0000a1e1 	.word	0x0000a1e1

0000a2b4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    a2b4:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    a2b6:	4b0d      	ldr	r3, [pc, #52]	; (a2ec <usbdc_reset+0x38>)
    a2b8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    a2ba:	4d0d      	ldr	r5, [pc, #52]	; (a2f0 <usbdc_reset+0x3c>)
    a2bc:	2602      	movs	r6, #2
    a2be:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    a2c0:	2400      	movs	r4, #0
    a2c2:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    a2c4:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    a2c6:	4620      	mov	r0, r4
    a2c8:	4b0a      	ldr	r3, [pc, #40]	; (a2f4 <usbdc_reset+0x40>)
    a2ca:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    a2cc:	7f28      	ldrb	r0, [r5, #28]
    a2ce:	4b0a      	ldr	r3, [pc, #40]	; (a2f8 <usbdc_reset+0x44>)
    a2d0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    a2d2:	4a0a      	ldr	r2, [pc, #40]	; (a2fc <usbdc_reset+0x48>)
    a2d4:	4621      	mov	r1, r4
    a2d6:	4620      	mov	r0, r4
    a2d8:	4d09      	ldr	r5, [pc, #36]	; (a300 <usbdc_reset+0x4c>)
    a2da:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    a2dc:	4a09      	ldr	r2, [pc, #36]	; (a304 <usbdc_reset+0x50>)
    a2de:	4631      	mov	r1, r6
    a2e0:	4620      	mov	r0, r4
    a2e2:	47a8      	blx	r5
	usb_d_ep_enable(0);
    a2e4:	4620      	mov	r0, r4
    a2e6:	4b08      	ldr	r3, [pc, #32]	; (a308 <usbdc_reset+0x54>)
    a2e8:	4798      	blx	r3
    a2ea:	bd70      	pop	{r4, r5, r6, pc}
    a2ec:	0000a195 	.word	0x0000a195
    a2f0:	200008c4 	.word	0x200008c4
    a2f4:	0000656d 	.word	0x0000656d
    a2f8:	00006559 	.word	0x00006559
    a2fc:	0000a34d 	.word	0x0000a34d
    a300:	0000676d 	.word	0x0000676d
    a304:	0000a241 	.word	0x0000a241
    a308:	00006599 	.word	0x00006599

0000a30c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    a30c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    a30e:	b110      	cbz	r0, a316 <usbd_event_cb+0xa>
    a310:	2801      	cmp	r0, #1
    a312:	d004      	beq.n	a31e <usbd_event_cb+0x12>
    a314:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    a316:	2000      	movs	r0, #0
    a318:	4b02      	ldr	r3, [pc, #8]	; (a324 <usbd_event_cb+0x18>)
    a31a:	4798      	blx	r3
		break;
    a31c:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    a31e:	4b02      	ldr	r3, [pc, #8]	; (a328 <usbd_event_cb+0x1c>)
    a320:	4798      	blx	r3
    a322:	bd08      	pop	{r3, pc}
    a324:	0000a1b9 	.word	0x0000a1b9
    a328:	0000a2b5 	.word	0x0000a2b5

0000a32c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    a32c:	b500      	push	{lr}
    a32e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    a330:	9101      	str	r1, [sp, #4]
    a332:	9202      	str	r2, [sp, #8]
    a334:	f88d 000c 	strb.w	r0, [sp, #12]
    a338:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    a33c:	a801      	add	r0, sp, #4
    a33e:	4b02      	ldr	r3, [pc, #8]	; (a348 <usbdc_xfer+0x1c>)
    a340:	4798      	blx	r3
}
    a342:	b005      	add	sp, #20
    a344:	f85d fb04 	ldr.w	pc, [sp], #4
    a348:	000065e5 	.word	0x000065e5

0000a34c <usbdc_cb_ctl_req>:
{
    a34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a350:	b083      	sub	sp, #12
    a352:	4605      	mov	r5, r0
    a354:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    a356:	2200      	movs	r2, #0
    a358:	4b9b      	ldr	r3, [pc, #620]	; (a5c8 <usbdc_cb_ctl_req+0x27c>)
    a35a:	4798      	blx	r3
    a35c:	f1b0 3fff 	cmp.w	r0, #4294967295
    a360:	d00b      	beq.n	a37a <usbdc_cb_ctl_req+0x2e>
    a362:	2801      	cmp	r0, #1
    a364:	f000 81e3 	beq.w	a72e <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    a368:	7823      	ldrb	r3, [r4, #0]
    a36a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    a36e:	d008      	beq.n	a382 <usbdc_cb_ctl_req+0x36>
    a370:	2a80      	cmp	r2, #128	; 0x80
    a372:	f000 80f4 	beq.w	a55e <usbdc_cb_ctl_req+0x212>
		return false;
    a376:	2000      	movs	r0, #0
    a378:	e000      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return false;
    a37a:	2000      	movs	r0, #0
}
    a37c:	b003      	add	sp, #12
    a37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    a382:	7862      	ldrb	r2, [r4, #1]
    a384:	3a01      	subs	r2, #1
    a386:	2a0a      	cmp	r2, #10
    a388:	f200 81d3 	bhi.w	a732 <usbdc_cb_ctl_req+0x3e6>
    a38c:	e8df f012 	tbh	[pc, r2, lsl #1]
    a390:	01d10060 	.word	0x01d10060
    a394:	01d10076 	.word	0x01d10076
    a398:	01d1000b 	.word	0x01d1000b
    a39c:	01d101d1 	.word	0x01d101d1
    a3a0:	01d10015 	.word	0x01d10015
    a3a4:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a3a6:	2301      	movs	r3, #1
    a3a8:	2200      	movs	r2, #0
    a3aa:	4611      	mov	r1, r2
    a3ac:	4628      	mov	r0, r5
    a3ae:	4c87      	ldr	r4, [pc, #540]	; (a5cc <usbdc_cb_ctl_req+0x280>)
    a3b0:	47a0      	blx	r4
    a3b2:	fab0 f080 	clz	r0, r0
    a3b6:	0940      	lsrs	r0, r0, #5
    a3b8:	e7e0      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    a3ba:	8862      	ldrh	r2, [r4, #2]
    a3bc:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    a3be:	b1ca      	cbz	r2, a3f4 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    a3c0:	4b83      	ldr	r3, [pc, #524]	; (a5d0 <usbdc_cb_ctl_req+0x284>)
    a3c2:	681b      	ldr	r3, [r3, #0]
    a3c4:	6859      	ldr	r1, [r3, #4]
    a3c6:	6818      	ldr	r0, [r3, #0]
    a3c8:	4b82      	ldr	r3, [pc, #520]	; (a5d4 <usbdc_cb_ctl_req+0x288>)
    a3ca:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a3cc:	2800      	cmp	r0, #0
    a3ce:	f000 81be 	beq.w	a74e <usbdc_cb_ctl_req+0x402>
    a3d2:	78c2      	ldrb	r2, [r0, #3]
    a3d4:	7881      	ldrb	r1, [r0, #2]
    a3d6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    a3da:	fa10 f181 	uxtah	r1, r0, r1
    a3de:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a3e0:	2204      	movs	r2, #4
    a3e2:	4b7d      	ldr	r3, [pc, #500]	; (a5d8 <usbdc_cb_ctl_req+0x28c>)
    a3e4:	4798      	blx	r3
    a3e6:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a3e8:	b130      	cbz	r0, a3f8 <usbdc_cb_ctl_req+0xac>
    a3ea:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a3ec:	f8df 81e0 	ldr.w	r8, [pc, #480]	; a5d0 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a3f0:	4f79      	ldr	r7, [pc, #484]	; (a5d8 <usbdc_cb_ctl_req+0x28c>)
    a3f2:	e018      	b.n	a426 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    a3f4:	4b79      	ldr	r3, [pc, #484]	; (a5dc <usbdc_cb_ctl_req+0x290>)
    a3f6:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a3f8:	2301      	movs	r3, #1
    a3fa:	2200      	movs	r2, #0
    a3fc:	4611      	mov	r1, r2
    a3fe:	4628      	mov	r0, r5
    a400:	4c72      	ldr	r4, [pc, #456]	; (a5cc <usbdc_cb_ctl_req+0x280>)
    a402:	47a0      	blx	r4
    a404:	fab0 f080 	clz	r0, r0
    a408:	0940      	lsrs	r0, r0, #5
    a40a:	e7b7      	b.n	a37c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    a40c:	464c      	mov	r4, r9
    a40e:	e000      	b.n	a412 <usbdc_cb_ctl_req+0xc6>
    a410:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    a412:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a414:	7803      	ldrb	r3, [r0, #0]
    a416:	4418      	add	r0, r3
    a418:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a41a:	2204      	movs	r2, #4
    a41c:	9901      	ldr	r1, [sp, #4]
    a41e:	47b8      	blx	r7
    a420:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a422:	2800      	cmp	r0, #0
    a424:	d0e8      	beq.n	a3f8 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    a426:	f890 9002 	ldrb.w	r9, [r0, #2]
    a42a:	45a1      	cmp	r9, r4
    a42c:	d0f1      	beq.n	a412 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a42e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    a432:	2c00      	cmp	r4, #0
    a434:	d0ea      	beq.n	a40c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    a436:	2600      	movs	r6, #0
    a438:	6863      	ldr	r3, [r4, #4]
    a43a:	466a      	mov	r2, sp
    a43c:	4631      	mov	r1, r6
    a43e:	4620      	mov	r0, r4
    a440:	4798      	blx	r3
    a442:	2800      	cmp	r0, #0
    a444:	d0e4      	beq.n	a410 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    a446:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    a448:	2c00      	cmp	r4, #0
    a44a:	d1f5      	bne.n	a438 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    a44c:	464c      	mov	r4, r9
    a44e:	e7e0      	b.n	a412 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a450:	f003 031f 	and.w	r3, r3, #31
    a454:	2b02      	cmp	r3, #2
    a456:	f040 816e 	bne.w	a736 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    a45a:	88e3      	ldrh	r3, [r4, #6]
    a45c:	b10b      	cbz	r3, a462 <usbdc_cb_ctl_req+0x116>
			return false;
    a45e:	2000      	movs	r0, #0
    a460:	e78c      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    a462:	88a0      	ldrh	r0, [r4, #4]
    a464:	2100      	movs	r1, #0
    a466:	b2c0      	uxtb	r0, r0
    a468:	4b5d      	ldr	r3, [pc, #372]	; (a5e0 <usbdc_cb_ctl_req+0x294>)
    a46a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a46c:	2301      	movs	r3, #1
    a46e:	2200      	movs	r2, #0
    a470:	4611      	mov	r1, r2
    a472:	4628      	mov	r0, r5
    a474:	4c55      	ldr	r4, [pc, #340]	; (a5cc <usbdc_cb_ctl_req+0x280>)
    a476:	47a0      	blx	r4
		return true;
    a478:	2001      	movs	r0, #1
    a47a:	e77f      	b.n	a37c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a47c:	f003 031f 	and.w	r3, r3, #31
    a480:	2b02      	cmp	r3, #2
    a482:	f040 815a 	bne.w	a73a <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    a486:	88e3      	ldrh	r3, [r4, #6]
    a488:	b10b      	cbz	r3, a48e <usbdc_cb_ctl_req+0x142>
			return false;
    a48a:	2000      	movs	r0, #0
    a48c:	e776      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    a48e:	88a0      	ldrh	r0, [r4, #4]
    a490:	2101      	movs	r1, #1
    a492:	b2c0      	uxtb	r0, r0
    a494:	4b52      	ldr	r3, [pc, #328]	; (a5e0 <usbdc_cb_ctl_req+0x294>)
    a496:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a498:	2301      	movs	r3, #1
    a49a:	2200      	movs	r2, #0
    a49c:	4611      	mov	r1, r2
    a49e:	4628      	mov	r0, r5
    a4a0:	4c4a      	ldr	r4, [pc, #296]	; (a5cc <usbdc_cb_ctl_req+0x280>)
    a4a2:	47a0      	blx	r4
		return true;
    a4a4:	2001      	movs	r0, #1
    a4a6:	e769      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    a4a8:	8866      	ldrh	r6, [r4, #2]
    a4aa:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a4ac:	4a48      	ldr	r2, [pc, #288]	; (a5d0 <usbdc_cb_ctl_req+0x284>)
    a4ae:	6813      	ldr	r3, [r2, #0]
    a4b0:	7ed2      	ldrb	r2, [r2, #27]
    a4b2:	6859      	ldr	r1, [r3, #4]
    a4b4:	6818      	ldr	r0, [r3, #0]
    a4b6:	4b47      	ldr	r3, [pc, #284]	; (a5d4 <usbdc_cb_ctl_req+0x288>)
    a4b8:	4798      	blx	r3
	if (NULL == ifc) {
    a4ba:	2800      	cmp	r0, #0
    a4bc:	d045      	beq.n	a54a <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    a4be:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    a4c0:	78c2      	ldrb	r2, [r0, #3]
    a4c2:	7881      	ldrb	r1, [r0, #2]
    a4c4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    a4c8:	fa10 f181 	uxtah	r1, r0, r1
    a4cc:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    a4ce:	2204      	movs	r2, #4
    a4d0:	4b41      	ldr	r3, [pc, #260]	; (a5d8 <usbdc_cb_ctl_req+0x28c>)
    a4d2:	4798      	blx	r3
    a4d4:	4603      	mov	r3, r0
    a4d6:	2800      	cmp	r0, #0
    a4d8:	d039      	beq.n	a54e <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a4da:	2704      	movs	r7, #4
    a4dc:	4d3e      	ldr	r5, [pc, #248]	; (a5d8 <usbdc_cb_ctl_req+0x28c>)
    a4de:	e008      	b.n	a4f2 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    a4e0:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a4e2:	7803      	ldrb	r3, [r0, #0]
    a4e4:	4418      	add	r0, r3
    a4e6:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a4e8:	463a      	mov	r2, r7
    a4ea:	9901      	ldr	r1, [sp, #4]
    a4ec:	47a8      	blx	r5
		if (NULL == ifc) {
    a4ee:	4603      	mov	r3, r0
    a4f0:	b378      	cbz	r0, a552 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    a4f2:	789a      	ldrb	r2, [r3, #2]
    a4f4:	42a2      	cmp	r2, r4
    a4f6:	d1f3      	bne.n	a4e0 <usbdc_cb_ctl_req+0x194>
    a4f8:	78da      	ldrb	r2, [r3, #3]
    a4fa:	42b2      	cmp	r2, r6
    a4fc:	d1f0      	bne.n	a4e0 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    a4fe:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    a500:	4b33      	ldr	r3, [pc, #204]	; (a5d0 <usbdc_cb_ctl_req+0x284>)
    a502:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    a504:	b33d      	cbz	r5, a556 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    a506:	2701      	movs	r7, #1
    a508:	686b      	ldr	r3, [r5, #4]
    a50a:	466a      	mov	r2, sp
    a50c:	4639      	mov	r1, r7
    a50e:	4628      	mov	r0, r5
    a510:	4798      	blx	r3
    a512:	b120      	cbz	r0, a51e <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    a514:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a516:	2d00      	cmp	r5, #0
    a518:	d1f6      	bne.n	a508 <usbdc_cb_ctl_req+0x1bc>
	return false;
    a51a:	2000      	movs	r0, #0
    a51c:	e72e      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    a51e:	686b      	ldr	r3, [r5, #4]
    a520:	466a      	mov	r2, sp
    a522:	2100      	movs	r1, #0
    a524:	4628      	mov	r0, r5
    a526:	4798      	blx	r3
    a528:	b9b8      	cbnz	r0, a55a <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    a52a:	b136      	cbz	r6, a53a <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    a52c:	4a28      	ldr	r2, [pc, #160]	; (a5d0 <usbdc_cb_ctl_req+0x284>)
    a52e:	2301      	movs	r3, #1
    a530:	fa03 f404 	lsl.w	r4, r3, r4
    a534:	7f53      	ldrb	r3, [r2, #29]
    a536:	4323      	orrs	r3, r4
    a538:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    a53a:	2300      	movs	r3, #0
    a53c:	461a      	mov	r2, r3
    a53e:	4619      	mov	r1, r3
    a540:	4618      	mov	r0, r3
    a542:	4c22      	ldr	r4, [pc, #136]	; (a5cc <usbdc_cb_ctl_req+0x280>)
    a544:	47a0      	blx	r4
			return true;
    a546:	2001      	movs	r0, #1
    a548:	e718      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return false;
    a54a:	2000      	movs	r0, #0
    a54c:	e716      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return false;
    a54e:	2000      	movs	r0, #0
    a550:	e714      	b.n	a37c <usbdc_cb_ctl_req+0x30>
			return false;
    a552:	2000      	movs	r0, #0
    a554:	e712      	b.n	a37c <usbdc_cb_ctl_req+0x30>
	return false;
    a556:	2000      	movs	r0, #0
    a558:	e710      	b.n	a37c <usbdc_cb_ctl_req+0x30>
			return false;
    a55a:	2000      	movs	r0, #0
    a55c:	e70e      	b.n	a37c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    a55e:	7862      	ldrb	r2, [r4, #1]
    a560:	2a0a      	cmp	r2, #10
    a562:	f200 80ec 	bhi.w	a73e <usbdc_cb_ctl_req+0x3f2>
    a566:	e8df f012 	tbh	[pc, r2, lsl #1]
    a56a:	008e      	.short	0x008e
    a56c:	00ea00ea 	.word	0x00ea00ea
    a570:	00ea00ea 	.word	0x00ea00ea
    a574:	000b00ea 	.word	0x000b00ea
    a578:	008200ea 	.word	0x008200ea
    a57c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    a580:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    a582:	0a13      	lsrs	r3, r2, #8
    a584:	2b02      	cmp	r3, #2
    a586:	d02d      	beq.n	a5e4 <usbdc_cb_ctl_req+0x298>
    a588:	2b03      	cmp	r3, #3
    a58a:	d050      	beq.n	a62e <usbdc_cb_ctl_req+0x2e2>
    a58c:	2b01      	cmp	r3, #1
    a58e:	d001      	beq.n	a594 <usbdc_cb_ctl_req+0x248>
	return false;
    a590:	2000      	movs	r0, #0
    a592:	e6f3      	b.n	a37c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    a594:	88e2      	ldrh	r2, [r4, #6]
    a596:	2a12      	cmp	r2, #18
    a598:	bf28      	it	cs
    a59a:	2212      	movcs	r2, #18
    a59c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    a59e:	4b0c      	ldr	r3, [pc, #48]	; (a5d0 <usbdc_cb_ctl_req+0x284>)
    a5a0:	681b      	ldr	r3, [r3, #0]
    a5a2:	2201      	movs	r2, #1
    a5a4:	6859      	ldr	r1, [r3, #4]
    a5a6:	6818      	ldr	r0, [r3, #0]
    a5a8:	4b0b      	ldr	r3, [pc, #44]	; (a5d8 <usbdc_cb_ctl_req+0x28c>)
    a5aa:	4798      	blx	r3
	if (!dev_desc) {
    a5ac:	4601      	mov	r1, r0
    a5ae:	2800      	cmp	r0, #0
    a5b0:	f000 80c7 	beq.w	a742 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    a5b4:	2300      	movs	r3, #0
    a5b6:	4622      	mov	r2, r4
    a5b8:	4628      	mov	r0, r5
    a5ba:	4c04      	ldr	r4, [pc, #16]	; (a5cc <usbdc_cb_ctl_req+0x280>)
    a5bc:	47a0      	blx	r4
    a5be:	fab0 f080 	clz	r0, r0
    a5c2:	0940      	lsrs	r0, r0, #5
    a5c4:	e6da      	b.n	a37c <usbdc_cb_ctl_req+0x30>
    a5c6:	bf00      	nop
    a5c8:	0000a1e1 	.word	0x0000a1e1
    a5cc:	0000a32d 	.word	0x0000a32d
    a5d0:	200008c4 	.word	0x200008c4
    a5d4:	0000a899 	.word	0x0000a899
    a5d8:	0000a819 	.word	0x0000a819
    a5dc:	0000a195 	.word	0x0000a195
    a5e0:	00006705 	.word	0x00006705
	uint16_t length   = req->wLength;
    a5e4:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a5e6:	4b5b      	ldr	r3, [pc, #364]	; (a754 <usbdc_cb_ctl_req+0x408>)
    a5e8:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    a5ea:	681b      	ldr	r3, [r3, #0]
    a5ec:	3201      	adds	r2, #1
    a5ee:	b2d2      	uxtb	r2, r2
    a5f0:	6859      	ldr	r1, [r3, #4]
    a5f2:	6818      	ldr	r0, [r3, #0]
    a5f4:	4b58      	ldr	r3, [pc, #352]	; (a758 <usbdc_cb_ctl_req+0x40c>)
    a5f6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a5f8:	4601      	mov	r1, r0
    a5fa:	2800      	cmp	r0, #0
    a5fc:	f000 80a3 	beq.w	a746 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    a600:	78c3      	ldrb	r3, [r0, #3]
    a602:	7882      	ldrb	r2, [r0, #2]
    a604:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    a608:	b292      	uxth	r2, r2
	if (length <= total_len) {
    a60a:	4294      	cmp	r4, r2
    a60c:	d90d      	bls.n	a62a <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a60e:	3e01      	subs	r6, #1
    a610:	4226      	tst	r6, r4
    a612:	bf0c      	ite	eq
    a614:	2301      	moveq	r3, #1
    a616:	2300      	movne	r3, #0
		length = total_len;
    a618:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    a61a:	4622      	mov	r2, r4
    a61c:	4628      	mov	r0, r5
    a61e:	4c4f      	ldr	r4, [pc, #316]	; (a75c <usbdc_cb_ctl_req+0x410>)
    a620:	47a0      	blx	r4
    a622:	fab0 f080 	clz	r0, r0
    a626:	0940      	lsrs	r0, r0, #5
    a628:	e6a8      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a62a:	2300      	movs	r3, #0
    a62c:	e7f5      	b.n	a61a <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    a62e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a630:	4b48      	ldr	r3, [pc, #288]	; (a754 <usbdc_cb_ctl_req+0x408>)
    a632:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    a634:	681b      	ldr	r3, [r3, #0]
    a636:	b2d2      	uxtb	r2, r2
    a638:	6859      	ldr	r1, [r3, #4]
    a63a:	6818      	ldr	r0, [r3, #0]
    a63c:	4b48      	ldr	r3, [pc, #288]	; (a760 <usbdc_cb_ctl_req+0x414>)
    a63e:	4798      	blx	r3
	if (NULL == str_desc) {
    a640:	4601      	mov	r1, r0
    a642:	2800      	cmp	r0, #0
    a644:	f000 8081 	beq.w	a74a <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    a648:	7802      	ldrb	r2, [r0, #0]
    a64a:	4294      	cmp	r4, r2
    a64c:	d90d      	bls.n	a66a <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a64e:	3e01      	subs	r6, #1
    a650:	4226      	tst	r6, r4
    a652:	bf0c      	ite	eq
    a654:	2301      	moveq	r3, #1
    a656:	2300      	movne	r3, #0
		length = str_desc[0];
    a658:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    a65a:	4622      	mov	r2, r4
    a65c:	4628      	mov	r0, r5
    a65e:	4c3f      	ldr	r4, [pc, #252]	; (a75c <usbdc_cb_ctl_req+0x410>)
    a660:	47a0      	blx	r4
    a662:	fab0 f080 	clz	r0, r0
    a666:	0940      	lsrs	r0, r0, #5
    a668:	e688      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a66a:	2300      	movs	r3, #0
    a66c:	e7f5      	b.n	a65a <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    a66e:	4939      	ldr	r1, [pc, #228]	; (a754 <usbdc_cb_ctl_req+0x408>)
    a670:	694b      	ldr	r3, [r1, #20]
    a672:	7eca      	ldrb	r2, [r1, #27]
    a674:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    a676:	2300      	movs	r3, #0
    a678:	2201      	movs	r2, #1
    a67a:	6949      	ldr	r1, [r1, #20]
    a67c:	4628      	mov	r0, r5
    a67e:	4c37      	ldr	r4, [pc, #220]	; (a75c <usbdc_cb_ctl_req+0x410>)
    a680:	47a0      	blx	r4
		return true;
    a682:	2001      	movs	r0, #1
    a684:	e67a      	b.n	a37c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a686:	f003 031f 	and.w	r3, r3, #31
    a68a:	2b01      	cmp	r3, #1
    a68c:	d903      	bls.n	a696 <usbdc_cb_ctl_req+0x34a>
    a68e:	2b02      	cmp	r3, #2
    a690:	d010      	beq.n	a6b4 <usbdc_cb_ctl_req+0x368>
		return false;
    a692:	2000      	movs	r0, #0
    a694:	e672      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		st = 0;
    a696:	2300      	movs	r3, #0
    a698:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    a69a:	492e      	ldr	r1, [pc, #184]	; (a754 <usbdc_cb_ctl_req+0x408>)
    a69c:	694b      	ldr	r3, [r1, #20]
    a69e:	f8bd 2000 	ldrh.w	r2, [sp]
    a6a2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    a6a4:	2300      	movs	r3, #0
    a6a6:	2202      	movs	r2, #2
    a6a8:	6949      	ldr	r1, [r1, #20]
    a6aa:	4628      	mov	r0, r5
    a6ac:	4c2b      	ldr	r4, [pc, #172]	; (a75c <usbdc_cb_ctl_req+0x410>)
    a6ae:	47a0      	blx	r4
	return true;
    a6b0:	2001      	movs	r0, #1
    a6b2:	e663      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    a6b4:	88a0      	ldrh	r0, [r4, #4]
    a6b6:	2102      	movs	r1, #2
    a6b8:	b2c0      	uxtb	r0, r0
    a6ba:	4b2a      	ldr	r3, [pc, #168]	; (a764 <usbdc_cb_ctl_req+0x418>)
    a6bc:	4798      	blx	r3
		if (st < 0) {
    a6be:	2800      	cmp	r0, #0
    a6c0:	db03      	blt.n	a6ca <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    a6c2:	f000 0001 	and.w	r0, r0, #1
    a6c6:	9000      	str	r0, [sp, #0]
    a6c8:	e7e7      	b.n	a69a <usbdc_cb_ctl_req+0x34e>
			return false;
    a6ca:	2000      	movs	r0, #0
    a6cc:	e656      	b.n	a37c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    a6ce:	4b21      	ldr	r3, [pc, #132]	; (a754 <usbdc_cb_ctl_req+0x408>)
    a6d0:	7f5b      	ldrb	r3, [r3, #29]
    a6d2:	88a2      	ldrh	r2, [r4, #4]
    a6d4:	4113      	asrs	r3, r2
    a6d6:	f013 0f01 	tst.w	r3, #1
    a6da:	d012      	beq.n	a702 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a6dc:	4b1d      	ldr	r3, [pc, #116]	; (a754 <usbdc_cb_ctl_req+0x408>)
    a6de:	691d      	ldr	r5, [r3, #16]
	return false;
    a6e0:	2000      	movs	r0, #0
	while (NULL != func) {
    a6e2:	2d00      	cmp	r5, #0
    a6e4:	f43f ae4a 	beq.w	a37c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    a6e8:	2602      	movs	r6, #2
    a6ea:	686b      	ldr	r3, [r5, #4]
    a6ec:	4622      	mov	r2, r4
    a6ee:	4631      	mov	r1, r6
    a6f0:	4628      	mov	r0, r5
    a6f2:	4798      	blx	r3
    a6f4:	2800      	cmp	r0, #0
    a6f6:	da0f      	bge.n	a718 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    a6f8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a6fa:	2d00      	cmp	r5, #0
    a6fc:	d1f5      	bne.n	a6ea <usbdc_cb_ctl_req+0x39e>
	return false;
    a6fe:	2000      	movs	r0, #0
    a700:	e63c      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    a702:	4914      	ldr	r1, [pc, #80]	; (a754 <usbdc_cb_ctl_req+0x408>)
    a704:	694b      	ldr	r3, [r1, #20]
    a706:	2000      	movs	r0, #0
    a708:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a70a:	4603      	mov	r3, r0
    a70c:	2201      	movs	r2, #1
    a70e:	6949      	ldr	r1, [r1, #20]
    a710:	4c12      	ldr	r4, [pc, #72]	; (a75c <usbdc_cb_ctl_req+0x410>)
    a712:	47a0      	blx	r4
		return true;
    a714:	2001      	movs	r0, #1
    a716:	e631      	b.n	a37c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    a718:	490e      	ldr	r1, [pc, #56]	; (a754 <usbdc_cb_ctl_req+0x408>)
    a71a:	694b      	ldr	r3, [r1, #20]
    a71c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a71e:	2300      	movs	r3, #0
    a720:	2201      	movs	r2, #1
    a722:	6949      	ldr	r1, [r1, #20]
    a724:	4618      	mov	r0, r3
    a726:	4c0d      	ldr	r4, [pc, #52]	; (a75c <usbdc_cb_ctl_req+0x410>)
    a728:	47a0      	blx	r4
			return true;
    a72a:	2001      	movs	r0, #1
    a72c:	e626      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return true;
    a72e:	2001      	movs	r0, #1
    a730:	e624      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return false;
    a732:	2000      	movs	r0, #0
    a734:	e622      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return false;
    a736:	2000      	movs	r0, #0
    a738:	e620      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return false;
    a73a:	2000      	movs	r0, #0
    a73c:	e61e      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return false;
    a73e:	2000      	movs	r0, #0
    a740:	e61c      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return false;
    a742:	2000      	movs	r0, #0
    a744:	e61a      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return false;
    a746:	2000      	movs	r0, #0
    a748:	e618      	b.n	a37c <usbdc_cb_ctl_req+0x30>
		return false;
    a74a:	2000      	movs	r0, #0
    a74c:	e616      	b.n	a37c <usbdc_cb_ctl_req+0x30>
			return false;
    a74e:	2000      	movs	r0, #0
    a750:	e614      	b.n	a37c <usbdc_cb_ctl_req+0x30>
    a752:	bf00      	nop
    a754:	200008c4 	.word	0x200008c4
    a758:	0000a899 	.word	0x0000a899
    a75c:	0000a32d 	.word	0x0000a32d
    a760:	0000a901 	.word	0x0000a901
    a764:	00006705 	.word	0x00006705

0000a768 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    a768:	b508      	push	{r3, lr}
	switch (type) {
    a76a:	2801      	cmp	r0, #1
    a76c:	d007      	beq.n	a77e <usbdc_register_handler+0x16>
    a76e:	b110      	cbz	r0, a776 <usbdc_register_handler+0xe>
    a770:	2802      	cmp	r0, #2
    a772:	d008      	beq.n	a786 <usbdc_register_handler+0x1e>
    a774:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    a776:	4806      	ldr	r0, [pc, #24]	; (a790 <usbdc_register_handler+0x28>)
    a778:	4b06      	ldr	r3, [pc, #24]	; (a794 <usbdc_register_handler+0x2c>)
    a77a:	4798      	blx	r3
		break;
    a77c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    a77e:	4806      	ldr	r0, [pc, #24]	; (a798 <usbdc_register_handler+0x30>)
    a780:	4b04      	ldr	r3, [pc, #16]	; (a794 <usbdc_register_handler+0x2c>)
    a782:	4798      	blx	r3
		break;
    a784:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    a786:	4805      	ldr	r0, [pc, #20]	; (a79c <usbdc_register_handler+0x34>)
    a788:	4b02      	ldr	r3, [pc, #8]	; (a794 <usbdc_register_handler+0x2c>)
    a78a:	4798      	blx	r3
    a78c:	bd08      	pop	{r3, pc}
    a78e:	bf00      	nop
    a790:	200008c8 	.word	0x200008c8
    a794:	000067c9 	.word	0x000067c9
    a798:	200008cc 	.word	0x200008cc
    a79c:	200008d0 	.word	0x200008d0

0000a7a0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    a7a0:	b538      	push	{r3, r4, r5, lr}
    a7a2:	4605      	mov	r5, r0
	ASSERT(ctrl_buf);

	int32_t rc;

	rc = usb_d_init();
    a7a4:	4b09      	ldr	r3, [pc, #36]	; (a7cc <usbdc_init+0x2c>)
    a7a6:	4798      	blx	r3
	if (rc < 0) {
    a7a8:	2800      	cmp	r0, #0
    a7aa:	db0e      	blt.n	a7ca <usbdc_init+0x2a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    a7ac:	4c08      	ldr	r4, [pc, #32]	; (a7d0 <usbdc_init+0x30>)
    a7ae:	2220      	movs	r2, #32
    a7b0:	2100      	movs	r1, #0
    a7b2:	4620      	mov	r0, r4
    a7b4:	4b07      	ldr	r3, [pc, #28]	; (a7d4 <usbdc_init+0x34>)
    a7b6:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    a7b8:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    a7ba:	4907      	ldr	r1, [pc, #28]	; (a7d8 <usbdc_init+0x38>)
    a7bc:	2000      	movs	r0, #0
    a7be:	4c07      	ldr	r4, [pc, #28]	; (a7dc <usbdc_init+0x3c>)
    a7c0:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    a7c2:	4907      	ldr	r1, [pc, #28]	; (a7e0 <usbdc_init+0x40>)
    a7c4:	2001      	movs	r0, #1
    a7c6:	47a0      	blx	r4

	return 0;
    a7c8:	2000      	movs	r0, #0
}
    a7ca:	bd38      	pop	{r3, r4, r5, pc}
    a7cc:	00006485 	.word	0x00006485
    a7d0:	200008c4 	.word	0x200008c4
    a7d4:	0000a9ef 	.word	0x0000a9ef
    a7d8:	0000a221 	.word	0x0000a221
    a7dc:	000064ed 	.word	0x000064ed
    a7e0:	0000a30d 	.word	0x0000a30d

0000a7e4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    a7e4:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    a7e6:	4601      	mov	r1, r0
    a7e8:	4801      	ldr	r0, [pc, #4]	; (a7f0 <usbdc_register_function+0xc>)
    a7ea:	4b02      	ldr	r3, [pc, #8]	; (a7f4 <usbdc_register_function+0x10>)
    a7ec:	4798      	blx	r3
    a7ee:	bd08      	pop	{r3, pc}
    a7f0:	200008d4 	.word	0x200008d4
    a7f4:	000067c9 	.word	0x000067c9

0000a7f8 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    a7f8:	4b01      	ldr	r3, [pc, #4]	; (a800 <usbdc_get_ctrl_buffer+0x8>)
    a7fa:	6958      	ldr	r0, [r3, #20]
    a7fc:	4770      	bx	lr
    a7fe:	bf00      	nop
    a800:	200008c4 	.word	0x200008c4

0000a804 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    a804:	4b03      	ldr	r3, [pc, #12]	; (a814 <usbdc_get_state+0x10>)
    a806:	7e98      	ldrb	r0, [r3, #26]
    a808:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    a80c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    a80e:	bf18      	it	ne
    a810:	2010      	movne	r0, #16
    a812:	4770      	bx	lr
    a814:	200008c4 	.word	0x200008c4

0000a818 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    a818:	4288      	cmp	r0, r1
    a81a:	d214      	bcs.n	a846 <usb_find_desc+0x2e>
	return desc[0];
    a81c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a81e:	2b01      	cmp	r3, #1
    a820:	d913      	bls.n	a84a <usb_find_desc+0x32>
{
    a822:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    a824:	7844      	ldrb	r4, [r0, #1]
    a826:	4294      	cmp	r4, r2
    a828:	d00a      	beq.n	a840 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    a82a:	4418      	add	r0, r3
	while (desc < eof) {
    a82c:	4281      	cmp	r1, r0
    a82e:	d906      	bls.n	a83e <usb_find_desc+0x26>
	return desc[0];
    a830:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a832:	2b01      	cmp	r3, #1
    a834:	d90b      	bls.n	a84e <usb_find_desc+0x36>
	return desc[1];
    a836:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    a838:	4294      	cmp	r4, r2
    a83a:	d1f6      	bne.n	a82a <usb_find_desc+0x12>
    a83c:	e000      	b.n	a840 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    a83e:	2000      	movs	r0, #0
}
    a840:	f85d 4b04 	ldr.w	r4, [sp], #4
    a844:	4770      	bx	lr
	return NULL;
    a846:	2000      	movs	r0, #0
    a848:	4770      	bx	lr
		_desc_len_check();
    a84a:	2000      	movs	r0, #0
    a84c:	4770      	bx	lr
    a84e:	2000      	movs	r0, #0
    a850:	e7f6      	b.n	a840 <usb_find_desc+0x28>

0000a852 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    a852:	4288      	cmp	r0, r1
    a854:	d216      	bcs.n	a884 <usb_find_ep_desc+0x32>
	return desc[0];
    a856:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a858:	2b01      	cmp	r3, #1
    a85a:	d915      	bls.n	a888 <usb_find_ep_desc+0x36>
	return desc[1];
    a85c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    a85e:	2a04      	cmp	r2, #4
    a860:	d014      	beq.n	a88c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    a862:	2a05      	cmp	r2, #5
    a864:	d00b      	beq.n	a87e <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    a866:	4418      	add	r0, r3
	while (desc < eof) {
    a868:	4281      	cmp	r1, r0
    a86a:	d909      	bls.n	a880 <usb_find_ep_desc+0x2e>
	return desc[0];
    a86c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a86e:	2b01      	cmp	r3, #1
    a870:	d90e      	bls.n	a890 <usb_find_ep_desc+0x3e>
	return desc[1];
    a872:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    a874:	2a04      	cmp	r2, #4
    a876:	d00d      	beq.n	a894 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    a878:	2a05      	cmp	r2, #5
    a87a:	d1f4      	bne.n	a866 <usb_find_ep_desc+0x14>
    a87c:	e00b      	b.n	a896 <usb_find_ep_desc+0x44>
    a87e:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    a880:	2000      	movs	r0, #0
    a882:	4770      	bx	lr
    a884:	2000      	movs	r0, #0
    a886:	4770      	bx	lr
		_desc_len_check();
    a888:	2000      	movs	r0, #0
    a88a:	4770      	bx	lr
	return NULL;
    a88c:	2000      	movs	r0, #0
    a88e:	4770      	bx	lr
		_desc_len_check();
    a890:	2000      	movs	r0, #0
    a892:	4770      	bx	lr
	return NULL;
    a894:	2000      	movs	r0, #0
}
    a896:	4770      	bx	lr

0000a898 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    a898:	b538      	push	{r3, r4, r5, lr}
    a89a:	460c      	mov	r4, r1
    a89c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    a89e:	2202      	movs	r2, #2
    a8a0:	4b16      	ldr	r3, [pc, #88]	; (a8fc <usb_find_cfg_desc+0x64>)
    a8a2:	4798      	blx	r3
	if (!desc) {
    a8a4:	4603      	mov	r3, r0
    a8a6:	b1e8      	cbz	r0, a8e4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    a8a8:	4284      	cmp	r4, r0
    a8aa:	d91d      	bls.n	a8e8 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    a8ac:	7802      	ldrb	r2, [r0, #0]
    a8ae:	2a01      	cmp	r2, #1
    a8b0:	d91c      	bls.n	a8ec <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    a8b2:	7842      	ldrb	r2, [r0, #1]
    a8b4:	2a02      	cmp	r2, #2
    a8b6:	d11b      	bne.n	a8f0 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    a8b8:	7942      	ldrb	r2, [r0, #5]
    a8ba:	42aa      	cmp	r2, r5
    a8bc:	d012      	beq.n	a8e4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    a8be:	78d9      	ldrb	r1, [r3, #3]
    a8c0:	789a      	ldrb	r2, [r3, #2]
    a8c2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    a8c6:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    a8ca:	429c      	cmp	r4, r3
    a8cc:	d909      	bls.n	a8e2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    a8ce:	781a      	ldrb	r2, [r3, #0]
    a8d0:	2a01      	cmp	r2, #1
    a8d2:	d90f      	bls.n	a8f4 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    a8d4:	785a      	ldrb	r2, [r3, #1]
    a8d6:	2a02      	cmp	r2, #2
    a8d8:	d10e      	bne.n	a8f8 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    a8da:	795a      	ldrb	r2, [r3, #5]
    a8dc:	42aa      	cmp	r2, r5
    a8de:	d1ee      	bne.n	a8be <usb_find_cfg_desc+0x26>
    a8e0:	e000      	b.n	a8e4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    a8e2:	2300      	movs	r3, #0
}
    a8e4:	4618      	mov	r0, r3
    a8e6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    a8e8:	2300      	movs	r3, #0
    a8ea:	e7fb      	b.n	a8e4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    a8ec:	2300      	movs	r3, #0
    a8ee:	e7f9      	b.n	a8e4 <usb_find_cfg_desc+0x4c>
	return NULL;
    a8f0:	2300      	movs	r3, #0
    a8f2:	e7f7      	b.n	a8e4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    a8f4:	2300      	movs	r3, #0
    a8f6:	e7f5      	b.n	a8e4 <usb_find_cfg_desc+0x4c>
	return NULL;
    a8f8:	2300      	movs	r3, #0
    a8fa:	e7f3      	b.n	a8e4 <usb_find_cfg_desc+0x4c>
    a8fc:	0000a819 	.word	0x0000a819

0000a900 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    a900:	4288      	cmp	r0, r1
    a902:	d217      	bcs.n	a934 <usb_find_str_desc+0x34>
{
    a904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a908:	460d      	mov	r5, r1
    a90a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    a90c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    a90e:	f04f 0803 	mov.w	r8, #3
    a912:	4f0c      	ldr	r7, [pc, #48]	; (a944 <usb_find_str_desc+0x44>)
    a914:	4642      	mov	r2, r8
    a916:	4629      	mov	r1, r5
    a918:	47b8      	blx	r7
		if (desc) {
    a91a:	4603      	mov	r3, r0
    a91c:	b170      	cbz	r0, a93c <usb_find_str_desc+0x3c>
	return desc[0];
    a91e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    a920:	2801      	cmp	r0, #1
    a922:	d90a      	bls.n	a93a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    a924:	42a6      	cmp	r6, r4
    a926:	d009      	beq.n	a93c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    a928:	4418      	add	r0, r3
    a92a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    a92c:	4285      	cmp	r5, r0
    a92e:	d8f1      	bhi.n	a914 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    a930:	2300      	movs	r3, #0
    a932:	e003      	b.n	a93c <usb_find_str_desc+0x3c>
    a934:	2300      	movs	r3, #0
}
    a936:	4618      	mov	r0, r3
    a938:	4770      	bx	lr
			_desc_len_check();
    a93a:	2300      	movs	r3, #0
}
    a93c:	4618      	mov	r0, r3
    a93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a942:	bf00      	nop
    a944:	0000a819 	.word	0x0000a819

0000a948 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    a948:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a94a:	4805      	ldr	r0, [pc, #20]	; (a960 <composite_device_init+0x18>)
    a94c:	4b05      	ldr	r3, [pc, #20]	; (a964 <composite_device_init+0x1c>)
    a94e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    a950:	4b05      	ldr	r3, [pc, #20]	; (a968 <composite_device_init+0x20>)
    a952:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    a954:	4b05      	ldr	r3, [pc, #20]	; (a96c <composite_device_init+0x24>)
    a956:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    a958:	4b05      	ldr	r3, [pc, #20]	; (a970 <composite_device_init+0x28>)
    a95a:	4798      	blx	r3
    a95c:	bd08      	pop	{r3, pc}
    a95e:	bf00      	nop
    a960:	200008fc 	.word	0x200008fc
    a964:	0000a7a1 	.word	0x0000a7a1
    a968:	00009d49 	.word	0x00009d49
    a96c:	0000a151 	.word	0x0000a151
    a970:	00009f61 	.word	0x00009f61

0000a974 <usb_init>:
		}
	}
}

void usb_init(void)
{
    a974:	b508      	push	{r3, lr}

	composite_device_init();
    a976:	4b01      	ldr	r3, [pc, #4]	; (a97c <usb_init+0x8>)
    a978:	4798      	blx	r3
    a97a:	bd08      	pop	{r3, pc}
    a97c:	0000a949 	.word	0x0000a949

0000a980 <__libc_init_array>:
    a980:	b570      	push	{r4, r5, r6, lr}
    a982:	4e0d      	ldr	r6, [pc, #52]	; (a9b8 <__libc_init_array+0x38>)
    a984:	4c0d      	ldr	r4, [pc, #52]	; (a9bc <__libc_init_array+0x3c>)
    a986:	1ba4      	subs	r4, r4, r6
    a988:	10a4      	asrs	r4, r4, #2
    a98a:	2500      	movs	r5, #0
    a98c:	42a5      	cmp	r5, r4
    a98e:	d109      	bne.n	a9a4 <__libc_init_array+0x24>
    a990:	4e0b      	ldr	r6, [pc, #44]	; (a9c0 <__libc_init_array+0x40>)
    a992:	4c0c      	ldr	r4, [pc, #48]	; (a9c4 <__libc_init_array+0x44>)
    a994:	f001 fc40 	bl	c218 <_init>
    a998:	1ba4      	subs	r4, r4, r6
    a99a:	10a4      	asrs	r4, r4, #2
    a99c:	2500      	movs	r5, #0
    a99e:	42a5      	cmp	r5, r4
    a9a0:	d105      	bne.n	a9ae <__libc_init_array+0x2e>
    a9a2:	bd70      	pop	{r4, r5, r6, pc}
    a9a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    a9a8:	4798      	blx	r3
    a9aa:	3501      	adds	r5, #1
    a9ac:	e7ee      	b.n	a98c <__libc_init_array+0xc>
    a9ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    a9b2:	4798      	blx	r3
    a9b4:	3501      	adds	r5, #1
    a9b6:	e7f2      	b.n	a99e <__libc_init_array+0x1e>
    a9b8:	0000c224 	.word	0x0000c224
    a9bc:	0000c224 	.word	0x0000c224
    a9c0:	0000c224 	.word	0x0000c224
    a9c4:	0000c228 	.word	0x0000c228

0000a9c8 <malloc>:
    a9c8:	4b02      	ldr	r3, [pc, #8]	; (a9d4 <malloc+0xc>)
    a9ca:	4601      	mov	r1, r0
    a9cc:	6818      	ldr	r0, [r3, #0]
    a9ce:	f000 b865 	b.w	aa9c <_malloc_r>
    a9d2:	bf00      	nop
    a9d4:	20000058 	.word	0x20000058

0000a9d8 <memcpy>:
    a9d8:	b510      	push	{r4, lr}
    a9da:	1e43      	subs	r3, r0, #1
    a9dc:	440a      	add	r2, r1
    a9de:	4291      	cmp	r1, r2
    a9e0:	d100      	bne.n	a9e4 <memcpy+0xc>
    a9e2:	bd10      	pop	{r4, pc}
    a9e4:	f811 4b01 	ldrb.w	r4, [r1], #1
    a9e8:	f803 4f01 	strb.w	r4, [r3, #1]!
    a9ec:	e7f7      	b.n	a9de <memcpy+0x6>

0000a9ee <memset>:
    a9ee:	4402      	add	r2, r0
    a9f0:	4603      	mov	r3, r0
    a9f2:	4293      	cmp	r3, r2
    a9f4:	d100      	bne.n	a9f8 <memset+0xa>
    a9f6:	4770      	bx	lr
    a9f8:	f803 1b01 	strb.w	r1, [r3], #1
    a9fc:	e7f9      	b.n	a9f2 <memset+0x4>
	...

0000aa00 <_free_r>:
    aa00:	b538      	push	{r3, r4, r5, lr}
    aa02:	4605      	mov	r5, r0
    aa04:	2900      	cmp	r1, #0
    aa06:	d045      	beq.n	aa94 <_free_r+0x94>
    aa08:	f851 3c04 	ldr.w	r3, [r1, #-4]
    aa0c:	1f0c      	subs	r4, r1, #4
    aa0e:	2b00      	cmp	r3, #0
    aa10:	bfb8      	it	lt
    aa12:	18e4      	addlt	r4, r4, r3
    aa14:	f000 fc82 	bl	b31c <__malloc_lock>
    aa18:	4a1f      	ldr	r2, [pc, #124]	; (aa98 <_free_r+0x98>)
    aa1a:	6813      	ldr	r3, [r2, #0]
    aa1c:	4610      	mov	r0, r2
    aa1e:	b933      	cbnz	r3, aa2e <_free_r+0x2e>
    aa20:	6063      	str	r3, [r4, #4]
    aa22:	6014      	str	r4, [r2, #0]
    aa24:	4628      	mov	r0, r5
    aa26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    aa2a:	f000 bc78 	b.w	b31e <__malloc_unlock>
    aa2e:	42a3      	cmp	r3, r4
    aa30:	d90c      	bls.n	aa4c <_free_r+0x4c>
    aa32:	6821      	ldr	r1, [r4, #0]
    aa34:	1862      	adds	r2, r4, r1
    aa36:	4293      	cmp	r3, r2
    aa38:	bf04      	itt	eq
    aa3a:	681a      	ldreq	r2, [r3, #0]
    aa3c:	685b      	ldreq	r3, [r3, #4]
    aa3e:	6063      	str	r3, [r4, #4]
    aa40:	bf04      	itt	eq
    aa42:	1852      	addeq	r2, r2, r1
    aa44:	6022      	streq	r2, [r4, #0]
    aa46:	6004      	str	r4, [r0, #0]
    aa48:	e7ec      	b.n	aa24 <_free_r+0x24>
    aa4a:	4613      	mov	r3, r2
    aa4c:	685a      	ldr	r2, [r3, #4]
    aa4e:	b10a      	cbz	r2, aa54 <_free_r+0x54>
    aa50:	42a2      	cmp	r2, r4
    aa52:	d9fa      	bls.n	aa4a <_free_r+0x4a>
    aa54:	6819      	ldr	r1, [r3, #0]
    aa56:	1858      	adds	r0, r3, r1
    aa58:	42a0      	cmp	r0, r4
    aa5a:	d10b      	bne.n	aa74 <_free_r+0x74>
    aa5c:	6820      	ldr	r0, [r4, #0]
    aa5e:	4401      	add	r1, r0
    aa60:	1858      	adds	r0, r3, r1
    aa62:	4282      	cmp	r2, r0
    aa64:	6019      	str	r1, [r3, #0]
    aa66:	d1dd      	bne.n	aa24 <_free_r+0x24>
    aa68:	6810      	ldr	r0, [r2, #0]
    aa6a:	6852      	ldr	r2, [r2, #4]
    aa6c:	605a      	str	r2, [r3, #4]
    aa6e:	4401      	add	r1, r0
    aa70:	6019      	str	r1, [r3, #0]
    aa72:	e7d7      	b.n	aa24 <_free_r+0x24>
    aa74:	d902      	bls.n	aa7c <_free_r+0x7c>
    aa76:	230c      	movs	r3, #12
    aa78:	602b      	str	r3, [r5, #0]
    aa7a:	e7d3      	b.n	aa24 <_free_r+0x24>
    aa7c:	6820      	ldr	r0, [r4, #0]
    aa7e:	1821      	adds	r1, r4, r0
    aa80:	428a      	cmp	r2, r1
    aa82:	bf04      	itt	eq
    aa84:	6811      	ldreq	r1, [r2, #0]
    aa86:	6852      	ldreq	r2, [r2, #4]
    aa88:	6062      	str	r2, [r4, #4]
    aa8a:	bf04      	itt	eq
    aa8c:	1809      	addeq	r1, r1, r0
    aa8e:	6021      	streq	r1, [r4, #0]
    aa90:	605c      	str	r4, [r3, #4]
    aa92:	e7c7      	b.n	aa24 <_free_r+0x24>
    aa94:	bd38      	pop	{r3, r4, r5, pc}
    aa96:	bf00      	nop
    aa98:	2000093c 	.word	0x2000093c

0000aa9c <_malloc_r>:
    aa9c:	b570      	push	{r4, r5, r6, lr}
    aa9e:	1ccd      	adds	r5, r1, #3
    aaa0:	f025 0503 	bic.w	r5, r5, #3
    aaa4:	3508      	adds	r5, #8
    aaa6:	2d0c      	cmp	r5, #12
    aaa8:	bf38      	it	cc
    aaaa:	250c      	movcc	r5, #12
    aaac:	2d00      	cmp	r5, #0
    aaae:	4606      	mov	r6, r0
    aab0:	db01      	blt.n	aab6 <_malloc_r+0x1a>
    aab2:	42a9      	cmp	r1, r5
    aab4:	d903      	bls.n	aabe <_malloc_r+0x22>
    aab6:	230c      	movs	r3, #12
    aab8:	6033      	str	r3, [r6, #0]
    aaba:	2000      	movs	r0, #0
    aabc:	bd70      	pop	{r4, r5, r6, pc}
    aabe:	f000 fc2d 	bl	b31c <__malloc_lock>
    aac2:	4a23      	ldr	r2, [pc, #140]	; (ab50 <_malloc_r+0xb4>)
    aac4:	6814      	ldr	r4, [r2, #0]
    aac6:	4621      	mov	r1, r4
    aac8:	b991      	cbnz	r1, aaf0 <_malloc_r+0x54>
    aaca:	4c22      	ldr	r4, [pc, #136]	; (ab54 <_malloc_r+0xb8>)
    aacc:	6823      	ldr	r3, [r4, #0]
    aace:	b91b      	cbnz	r3, aad8 <_malloc_r+0x3c>
    aad0:	4630      	mov	r0, r6
    aad2:	f000 f8bd 	bl	ac50 <_sbrk_r>
    aad6:	6020      	str	r0, [r4, #0]
    aad8:	4629      	mov	r1, r5
    aada:	4630      	mov	r0, r6
    aadc:	f000 f8b8 	bl	ac50 <_sbrk_r>
    aae0:	1c43      	adds	r3, r0, #1
    aae2:	d126      	bne.n	ab32 <_malloc_r+0x96>
    aae4:	230c      	movs	r3, #12
    aae6:	6033      	str	r3, [r6, #0]
    aae8:	4630      	mov	r0, r6
    aaea:	f000 fc18 	bl	b31e <__malloc_unlock>
    aaee:	e7e4      	b.n	aaba <_malloc_r+0x1e>
    aaf0:	680b      	ldr	r3, [r1, #0]
    aaf2:	1b5b      	subs	r3, r3, r5
    aaf4:	d41a      	bmi.n	ab2c <_malloc_r+0x90>
    aaf6:	2b0b      	cmp	r3, #11
    aaf8:	d90f      	bls.n	ab1a <_malloc_r+0x7e>
    aafa:	600b      	str	r3, [r1, #0]
    aafc:	50cd      	str	r5, [r1, r3]
    aafe:	18cc      	adds	r4, r1, r3
    ab00:	4630      	mov	r0, r6
    ab02:	f000 fc0c 	bl	b31e <__malloc_unlock>
    ab06:	f104 000b 	add.w	r0, r4, #11
    ab0a:	1d23      	adds	r3, r4, #4
    ab0c:	f020 0007 	bic.w	r0, r0, #7
    ab10:	1ac3      	subs	r3, r0, r3
    ab12:	d01b      	beq.n	ab4c <_malloc_r+0xb0>
    ab14:	425a      	negs	r2, r3
    ab16:	50e2      	str	r2, [r4, r3]
    ab18:	bd70      	pop	{r4, r5, r6, pc}
    ab1a:	428c      	cmp	r4, r1
    ab1c:	bf0d      	iteet	eq
    ab1e:	6863      	ldreq	r3, [r4, #4]
    ab20:	684b      	ldrne	r3, [r1, #4]
    ab22:	6063      	strne	r3, [r4, #4]
    ab24:	6013      	streq	r3, [r2, #0]
    ab26:	bf18      	it	ne
    ab28:	460c      	movne	r4, r1
    ab2a:	e7e9      	b.n	ab00 <_malloc_r+0x64>
    ab2c:	460c      	mov	r4, r1
    ab2e:	6849      	ldr	r1, [r1, #4]
    ab30:	e7ca      	b.n	aac8 <_malloc_r+0x2c>
    ab32:	1cc4      	adds	r4, r0, #3
    ab34:	f024 0403 	bic.w	r4, r4, #3
    ab38:	42a0      	cmp	r0, r4
    ab3a:	d005      	beq.n	ab48 <_malloc_r+0xac>
    ab3c:	1a21      	subs	r1, r4, r0
    ab3e:	4630      	mov	r0, r6
    ab40:	f000 f886 	bl	ac50 <_sbrk_r>
    ab44:	3001      	adds	r0, #1
    ab46:	d0cd      	beq.n	aae4 <_malloc_r+0x48>
    ab48:	6025      	str	r5, [r4, #0]
    ab4a:	e7d9      	b.n	ab00 <_malloc_r+0x64>
    ab4c:	bd70      	pop	{r4, r5, r6, pc}
    ab4e:	bf00      	nop
    ab50:	2000093c 	.word	0x2000093c
    ab54:	20000940 	.word	0x20000940

0000ab58 <iprintf>:
    ab58:	b40f      	push	{r0, r1, r2, r3}
    ab5a:	4b0a      	ldr	r3, [pc, #40]	; (ab84 <iprintf+0x2c>)
    ab5c:	b513      	push	{r0, r1, r4, lr}
    ab5e:	681c      	ldr	r4, [r3, #0]
    ab60:	b124      	cbz	r4, ab6c <iprintf+0x14>
    ab62:	69a3      	ldr	r3, [r4, #24]
    ab64:	b913      	cbnz	r3, ab6c <iprintf+0x14>
    ab66:	4620      	mov	r0, r4
    ab68:	f000 faea 	bl	b140 <__sinit>
    ab6c:	ab05      	add	r3, sp, #20
    ab6e:	9a04      	ldr	r2, [sp, #16]
    ab70:	68a1      	ldr	r1, [r4, #8]
    ab72:	9301      	str	r3, [sp, #4]
    ab74:	4620      	mov	r0, r4
    ab76:	f000 fbfb 	bl	b370 <_vfiprintf_r>
    ab7a:	b002      	add	sp, #8
    ab7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab80:	b004      	add	sp, #16
    ab82:	4770      	bx	lr
    ab84:	20000058 	.word	0x20000058

0000ab88 <_puts_r>:
    ab88:	b570      	push	{r4, r5, r6, lr}
    ab8a:	460e      	mov	r6, r1
    ab8c:	4605      	mov	r5, r0
    ab8e:	b118      	cbz	r0, ab98 <_puts_r+0x10>
    ab90:	6983      	ldr	r3, [r0, #24]
    ab92:	b90b      	cbnz	r3, ab98 <_puts_r+0x10>
    ab94:	f000 fad4 	bl	b140 <__sinit>
    ab98:	69ab      	ldr	r3, [r5, #24]
    ab9a:	68ac      	ldr	r4, [r5, #8]
    ab9c:	b913      	cbnz	r3, aba4 <_puts_r+0x1c>
    ab9e:	4628      	mov	r0, r5
    aba0:	f000 face 	bl	b140 <__sinit>
    aba4:	4b23      	ldr	r3, [pc, #140]	; (ac34 <_puts_r+0xac>)
    aba6:	429c      	cmp	r4, r3
    aba8:	d117      	bne.n	abda <_puts_r+0x52>
    abaa:	686c      	ldr	r4, [r5, #4]
    abac:	89a3      	ldrh	r3, [r4, #12]
    abae:	071b      	lsls	r3, r3, #28
    abb0:	d51d      	bpl.n	abee <_puts_r+0x66>
    abb2:	6923      	ldr	r3, [r4, #16]
    abb4:	b1db      	cbz	r3, abee <_puts_r+0x66>
    abb6:	3e01      	subs	r6, #1
    abb8:	68a3      	ldr	r3, [r4, #8]
    abba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    abbe:	3b01      	subs	r3, #1
    abc0:	60a3      	str	r3, [r4, #8]
    abc2:	b9e9      	cbnz	r1, ac00 <_puts_r+0x78>
    abc4:	2b00      	cmp	r3, #0
    abc6:	da2e      	bge.n	ac26 <_puts_r+0x9e>
    abc8:	4622      	mov	r2, r4
    abca:	210a      	movs	r1, #10
    abcc:	4628      	mov	r0, r5
    abce:	f000 f905 	bl	addc <__swbuf_r>
    abd2:	3001      	adds	r0, #1
    abd4:	d011      	beq.n	abfa <_puts_r+0x72>
    abd6:	200a      	movs	r0, #10
    abd8:	bd70      	pop	{r4, r5, r6, pc}
    abda:	4b17      	ldr	r3, [pc, #92]	; (ac38 <_puts_r+0xb0>)
    abdc:	429c      	cmp	r4, r3
    abde:	d101      	bne.n	abe4 <_puts_r+0x5c>
    abe0:	68ac      	ldr	r4, [r5, #8]
    abe2:	e7e3      	b.n	abac <_puts_r+0x24>
    abe4:	4b15      	ldr	r3, [pc, #84]	; (ac3c <_puts_r+0xb4>)
    abe6:	429c      	cmp	r4, r3
    abe8:	bf08      	it	eq
    abea:	68ec      	ldreq	r4, [r5, #12]
    abec:	e7de      	b.n	abac <_puts_r+0x24>
    abee:	4621      	mov	r1, r4
    abf0:	4628      	mov	r0, r5
    abf2:	f000 f945 	bl	ae80 <__swsetup_r>
    abf6:	2800      	cmp	r0, #0
    abf8:	d0dd      	beq.n	abb6 <_puts_r+0x2e>
    abfa:	f04f 30ff 	mov.w	r0, #4294967295
    abfe:	bd70      	pop	{r4, r5, r6, pc}
    ac00:	2b00      	cmp	r3, #0
    ac02:	da04      	bge.n	ac0e <_puts_r+0x86>
    ac04:	69a2      	ldr	r2, [r4, #24]
    ac06:	4293      	cmp	r3, r2
    ac08:	db06      	blt.n	ac18 <_puts_r+0x90>
    ac0a:	290a      	cmp	r1, #10
    ac0c:	d004      	beq.n	ac18 <_puts_r+0x90>
    ac0e:	6823      	ldr	r3, [r4, #0]
    ac10:	1c5a      	adds	r2, r3, #1
    ac12:	6022      	str	r2, [r4, #0]
    ac14:	7019      	strb	r1, [r3, #0]
    ac16:	e7cf      	b.n	abb8 <_puts_r+0x30>
    ac18:	4622      	mov	r2, r4
    ac1a:	4628      	mov	r0, r5
    ac1c:	f000 f8de 	bl	addc <__swbuf_r>
    ac20:	3001      	adds	r0, #1
    ac22:	d1c9      	bne.n	abb8 <_puts_r+0x30>
    ac24:	e7e9      	b.n	abfa <_puts_r+0x72>
    ac26:	6823      	ldr	r3, [r4, #0]
    ac28:	200a      	movs	r0, #10
    ac2a:	1c5a      	adds	r2, r3, #1
    ac2c:	6022      	str	r2, [r4, #0]
    ac2e:	7018      	strb	r0, [r3, #0]
    ac30:	bd70      	pop	{r4, r5, r6, pc}
    ac32:	bf00      	nop
    ac34:	0000c1a4 	.word	0x0000c1a4
    ac38:	0000c1c4 	.word	0x0000c1c4
    ac3c:	0000c184 	.word	0x0000c184

0000ac40 <puts>:
    ac40:	4b02      	ldr	r3, [pc, #8]	; (ac4c <puts+0xc>)
    ac42:	4601      	mov	r1, r0
    ac44:	6818      	ldr	r0, [r3, #0]
    ac46:	f7ff bf9f 	b.w	ab88 <_puts_r>
    ac4a:	bf00      	nop
    ac4c:	20000058 	.word	0x20000058

0000ac50 <_sbrk_r>:
    ac50:	b538      	push	{r3, r4, r5, lr}
    ac52:	4c06      	ldr	r4, [pc, #24]	; (ac6c <_sbrk_r+0x1c>)
    ac54:	2300      	movs	r3, #0
    ac56:	4605      	mov	r5, r0
    ac58:	4608      	mov	r0, r1
    ac5a:	6023      	str	r3, [r4, #0]
    ac5c:	f7fb fdfa 	bl	6854 <_sbrk>
    ac60:	1c43      	adds	r3, r0, #1
    ac62:	d102      	bne.n	ac6a <_sbrk_r+0x1a>
    ac64:	6823      	ldr	r3, [r4, #0]
    ac66:	b103      	cbz	r3, ac6a <_sbrk_r+0x1a>
    ac68:	602b      	str	r3, [r5, #0]
    ac6a:	bd38      	pop	{r3, r4, r5, pc}
    ac6c:	20003500 	.word	0x20003500

0000ac70 <setbuf>:
    ac70:	2900      	cmp	r1, #0
    ac72:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ac76:	bf0c      	ite	eq
    ac78:	2202      	moveq	r2, #2
    ac7a:	2200      	movne	r2, #0
    ac7c:	f000 b800 	b.w	ac80 <setvbuf>

0000ac80 <setvbuf>:
    ac80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ac84:	461d      	mov	r5, r3
    ac86:	4b51      	ldr	r3, [pc, #324]	; (adcc <setvbuf+0x14c>)
    ac88:	681e      	ldr	r6, [r3, #0]
    ac8a:	4604      	mov	r4, r0
    ac8c:	460f      	mov	r7, r1
    ac8e:	4690      	mov	r8, r2
    ac90:	b126      	cbz	r6, ac9c <setvbuf+0x1c>
    ac92:	69b3      	ldr	r3, [r6, #24]
    ac94:	b913      	cbnz	r3, ac9c <setvbuf+0x1c>
    ac96:	4630      	mov	r0, r6
    ac98:	f000 fa52 	bl	b140 <__sinit>
    ac9c:	4b4c      	ldr	r3, [pc, #304]	; (add0 <setvbuf+0x150>)
    ac9e:	429c      	cmp	r4, r3
    aca0:	d152      	bne.n	ad48 <setvbuf+0xc8>
    aca2:	6874      	ldr	r4, [r6, #4]
    aca4:	f1b8 0f02 	cmp.w	r8, #2
    aca8:	d006      	beq.n	acb8 <setvbuf+0x38>
    acaa:	f1b8 0f01 	cmp.w	r8, #1
    acae:	f200 8089 	bhi.w	adc4 <setvbuf+0x144>
    acb2:	2d00      	cmp	r5, #0
    acb4:	f2c0 8086 	blt.w	adc4 <setvbuf+0x144>
    acb8:	4621      	mov	r1, r4
    acba:	4630      	mov	r0, r6
    acbc:	f000 f9d6 	bl	b06c <_fflush_r>
    acc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    acc2:	b141      	cbz	r1, acd6 <setvbuf+0x56>
    acc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    acc8:	4299      	cmp	r1, r3
    acca:	d002      	beq.n	acd2 <setvbuf+0x52>
    accc:	4630      	mov	r0, r6
    acce:	f7ff fe97 	bl	aa00 <_free_r>
    acd2:	2300      	movs	r3, #0
    acd4:	6363      	str	r3, [r4, #52]	; 0x34
    acd6:	2300      	movs	r3, #0
    acd8:	61a3      	str	r3, [r4, #24]
    acda:	6063      	str	r3, [r4, #4]
    acdc:	89a3      	ldrh	r3, [r4, #12]
    acde:	061b      	lsls	r3, r3, #24
    ace0:	d503      	bpl.n	acea <setvbuf+0x6a>
    ace2:	6921      	ldr	r1, [r4, #16]
    ace4:	4630      	mov	r0, r6
    ace6:	f7ff fe8b 	bl	aa00 <_free_r>
    acea:	89a3      	ldrh	r3, [r4, #12]
    acec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    acf0:	f023 0303 	bic.w	r3, r3, #3
    acf4:	f1b8 0f02 	cmp.w	r8, #2
    acf8:	81a3      	strh	r3, [r4, #12]
    acfa:	d05d      	beq.n	adb8 <setvbuf+0x138>
    acfc:	ab01      	add	r3, sp, #4
    acfe:	466a      	mov	r2, sp
    ad00:	4621      	mov	r1, r4
    ad02:	4630      	mov	r0, r6
    ad04:	f000 faa6 	bl	b254 <__swhatbuf_r>
    ad08:	89a3      	ldrh	r3, [r4, #12]
    ad0a:	4318      	orrs	r0, r3
    ad0c:	81a0      	strh	r0, [r4, #12]
    ad0e:	bb2d      	cbnz	r5, ad5c <setvbuf+0xdc>
    ad10:	9d00      	ldr	r5, [sp, #0]
    ad12:	4628      	mov	r0, r5
    ad14:	f7ff fe58 	bl	a9c8 <malloc>
    ad18:	4607      	mov	r7, r0
    ad1a:	2800      	cmp	r0, #0
    ad1c:	d14e      	bne.n	adbc <setvbuf+0x13c>
    ad1e:	f8dd 9000 	ldr.w	r9, [sp]
    ad22:	45a9      	cmp	r9, r5
    ad24:	d13c      	bne.n	ada0 <setvbuf+0x120>
    ad26:	f04f 30ff 	mov.w	r0, #4294967295
    ad2a:	89a3      	ldrh	r3, [r4, #12]
    ad2c:	f043 0302 	orr.w	r3, r3, #2
    ad30:	81a3      	strh	r3, [r4, #12]
    ad32:	2300      	movs	r3, #0
    ad34:	60a3      	str	r3, [r4, #8]
    ad36:	f104 0347 	add.w	r3, r4, #71	; 0x47
    ad3a:	6023      	str	r3, [r4, #0]
    ad3c:	6123      	str	r3, [r4, #16]
    ad3e:	2301      	movs	r3, #1
    ad40:	6163      	str	r3, [r4, #20]
    ad42:	b003      	add	sp, #12
    ad44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ad48:	4b22      	ldr	r3, [pc, #136]	; (add4 <setvbuf+0x154>)
    ad4a:	429c      	cmp	r4, r3
    ad4c:	d101      	bne.n	ad52 <setvbuf+0xd2>
    ad4e:	68b4      	ldr	r4, [r6, #8]
    ad50:	e7a8      	b.n	aca4 <setvbuf+0x24>
    ad52:	4b21      	ldr	r3, [pc, #132]	; (add8 <setvbuf+0x158>)
    ad54:	429c      	cmp	r4, r3
    ad56:	bf08      	it	eq
    ad58:	68f4      	ldreq	r4, [r6, #12]
    ad5a:	e7a3      	b.n	aca4 <setvbuf+0x24>
    ad5c:	2f00      	cmp	r7, #0
    ad5e:	d0d8      	beq.n	ad12 <setvbuf+0x92>
    ad60:	69b3      	ldr	r3, [r6, #24]
    ad62:	b913      	cbnz	r3, ad6a <setvbuf+0xea>
    ad64:	4630      	mov	r0, r6
    ad66:	f000 f9eb 	bl	b140 <__sinit>
    ad6a:	f1b8 0f01 	cmp.w	r8, #1
    ad6e:	bf08      	it	eq
    ad70:	89a3      	ldrheq	r3, [r4, #12]
    ad72:	6027      	str	r7, [r4, #0]
    ad74:	bf04      	itt	eq
    ad76:	f043 0301 	orreq.w	r3, r3, #1
    ad7a:	81a3      	strheq	r3, [r4, #12]
    ad7c:	89a3      	ldrh	r3, [r4, #12]
    ad7e:	6127      	str	r7, [r4, #16]
    ad80:	f013 0008 	ands.w	r0, r3, #8
    ad84:	6165      	str	r5, [r4, #20]
    ad86:	d01b      	beq.n	adc0 <setvbuf+0x140>
    ad88:	f013 0001 	ands.w	r0, r3, #1
    ad8c:	bf18      	it	ne
    ad8e:	426d      	negne	r5, r5
    ad90:	f04f 0300 	mov.w	r3, #0
    ad94:	bf1d      	ittte	ne
    ad96:	60a3      	strne	r3, [r4, #8]
    ad98:	61a5      	strne	r5, [r4, #24]
    ad9a:	4618      	movne	r0, r3
    ad9c:	60a5      	streq	r5, [r4, #8]
    ad9e:	e7d0      	b.n	ad42 <setvbuf+0xc2>
    ada0:	4648      	mov	r0, r9
    ada2:	f7ff fe11 	bl	a9c8 <malloc>
    ada6:	4607      	mov	r7, r0
    ada8:	2800      	cmp	r0, #0
    adaa:	d0bc      	beq.n	ad26 <setvbuf+0xa6>
    adac:	89a3      	ldrh	r3, [r4, #12]
    adae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    adb2:	81a3      	strh	r3, [r4, #12]
    adb4:	464d      	mov	r5, r9
    adb6:	e7d3      	b.n	ad60 <setvbuf+0xe0>
    adb8:	2000      	movs	r0, #0
    adba:	e7b6      	b.n	ad2a <setvbuf+0xaa>
    adbc:	46a9      	mov	r9, r5
    adbe:	e7f5      	b.n	adac <setvbuf+0x12c>
    adc0:	60a0      	str	r0, [r4, #8]
    adc2:	e7be      	b.n	ad42 <setvbuf+0xc2>
    adc4:	f04f 30ff 	mov.w	r0, #4294967295
    adc8:	e7bb      	b.n	ad42 <setvbuf+0xc2>
    adca:	bf00      	nop
    adcc:	20000058 	.word	0x20000058
    add0:	0000c1a4 	.word	0x0000c1a4
    add4:	0000c1c4 	.word	0x0000c1c4
    add8:	0000c184 	.word	0x0000c184

0000addc <__swbuf_r>:
    addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    adde:	460e      	mov	r6, r1
    ade0:	4614      	mov	r4, r2
    ade2:	4605      	mov	r5, r0
    ade4:	b118      	cbz	r0, adee <__swbuf_r+0x12>
    ade6:	6983      	ldr	r3, [r0, #24]
    ade8:	b90b      	cbnz	r3, adee <__swbuf_r+0x12>
    adea:	f000 f9a9 	bl	b140 <__sinit>
    adee:	4b21      	ldr	r3, [pc, #132]	; (ae74 <__swbuf_r+0x98>)
    adf0:	429c      	cmp	r4, r3
    adf2:	d12a      	bne.n	ae4a <__swbuf_r+0x6e>
    adf4:	686c      	ldr	r4, [r5, #4]
    adf6:	69a3      	ldr	r3, [r4, #24]
    adf8:	60a3      	str	r3, [r4, #8]
    adfa:	89a3      	ldrh	r3, [r4, #12]
    adfc:	071a      	lsls	r2, r3, #28
    adfe:	d52e      	bpl.n	ae5e <__swbuf_r+0x82>
    ae00:	6923      	ldr	r3, [r4, #16]
    ae02:	b363      	cbz	r3, ae5e <__swbuf_r+0x82>
    ae04:	6923      	ldr	r3, [r4, #16]
    ae06:	6820      	ldr	r0, [r4, #0]
    ae08:	1ac0      	subs	r0, r0, r3
    ae0a:	6963      	ldr	r3, [r4, #20]
    ae0c:	b2f6      	uxtb	r6, r6
    ae0e:	4298      	cmp	r0, r3
    ae10:	4637      	mov	r7, r6
    ae12:	db04      	blt.n	ae1e <__swbuf_r+0x42>
    ae14:	4621      	mov	r1, r4
    ae16:	4628      	mov	r0, r5
    ae18:	f000 f928 	bl	b06c <_fflush_r>
    ae1c:	bb28      	cbnz	r0, ae6a <__swbuf_r+0x8e>
    ae1e:	68a3      	ldr	r3, [r4, #8]
    ae20:	3b01      	subs	r3, #1
    ae22:	60a3      	str	r3, [r4, #8]
    ae24:	6823      	ldr	r3, [r4, #0]
    ae26:	1c5a      	adds	r2, r3, #1
    ae28:	6022      	str	r2, [r4, #0]
    ae2a:	701e      	strb	r6, [r3, #0]
    ae2c:	6963      	ldr	r3, [r4, #20]
    ae2e:	3001      	adds	r0, #1
    ae30:	4298      	cmp	r0, r3
    ae32:	d004      	beq.n	ae3e <__swbuf_r+0x62>
    ae34:	89a3      	ldrh	r3, [r4, #12]
    ae36:	07db      	lsls	r3, r3, #31
    ae38:	d519      	bpl.n	ae6e <__swbuf_r+0x92>
    ae3a:	2e0a      	cmp	r6, #10
    ae3c:	d117      	bne.n	ae6e <__swbuf_r+0x92>
    ae3e:	4621      	mov	r1, r4
    ae40:	4628      	mov	r0, r5
    ae42:	f000 f913 	bl	b06c <_fflush_r>
    ae46:	b190      	cbz	r0, ae6e <__swbuf_r+0x92>
    ae48:	e00f      	b.n	ae6a <__swbuf_r+0x8e>
    ae4a:	4b0b      	ldr	r3, [pc, #44]	; (ae78 <__swbuf_r+0x9c>)
    ae4c:	429c      	cmp	r4, r3
    ae4e:	d101      	bne.n	ae54 <__swbuf_r+0x78>
    ae50:	68ac      	ldr	r4, [r5, #8]
    ae52:	e7d0      	b.n	adf6 <__swbuf_r+0x1a>
    ae54:	4b09      	ldr	r3, [pc, #36]	; (ae7c <__swbuf_r+0xa0>)
    ae56:	429c      	cmp	r4, r3
    ae58:	bf08      	it	eq
    ae5a:	68ec      	ldreq	r4, [r5, #12]
    ae5c:	e7cb      	b.n	adf6 <__swbuf_r+0x1a>
    ae5e:	4621      	mov	r1, r4
    ae60:	4628      	mov	r0, r5
    ae62:	f000 f80d 	bl	ae80 <__swsetup_r>
    ae66:	2800      	cmp	r0, #0
    ae68:	d0cc      	beq.n	ae04 <__swbuf_r+0x28>
    ae6a:	f04f 37ff 	mov.w	r7, #4294967295
    ae6e:	4638      	mov	r0, r7
    ae70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae72:	bf00      	nop
    ae74:	0000c1a4 	.word	0x0000c1a4
    ae78:	0000c1c4 	.word	0x0000c1c4
    ae7c:	0000c184 	.word	0x0000c184

0000ae80 <__swsetup_r>:
    ae80:	4b32      	ldr	r3, [pc, #200]	; (af4c <__swsetup_r+0xcc>)
    ae82:	b570      	push	{r4, r5, r6, lr}
    ae84:	681d      	ldr	r5, [r3, #0]
    ae86:	4606      	mov	r6, r0
    ae88:	460c      	mov	r4, r1
    ae8a:	b125      	cbz	r5, ae96 <__swsetup_r+0x16>
    ae8c:	69ab      	ldr	r3, [r5, #24]
    ae8e:	b913      	cbnz	r3, ae96 <__swsetup_r+0x16>
    ae90:	4628      	mov	r0, r5
    ae92:	f000 f955 	bl	b140 <__sinit>
    ae96:	4b2e      	ldr	r3, [pc, #184]	; (af50 <__swsetup_r+0xd0>)
    ae98:	429c      	cmp	r4, r3
    ae9a:	d10f      	bne.n	aebc <__swsetup_r+0x3c>
    ae9c:	686c      	ldr	r4, [r5, #4]
    ae9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    aea2:	b29a      	uxth	r2, r3
    aea4:	0715      	lsls	r5, r2, #28
    aea6:	d42c      	bmi.n	af02 <__swsetup_r+0x82>
    aea8:	06d0      	lsls	r0, r2, #27
    aeaa:	d411      	bmi.n	aed0 <__swsetup_r+0x50>
    aeac:	2209      	movs	r2, #9
    aeae:	6032      	str	r2, [r6, #0]
    aeb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aeb4:	81a3      	strh	r3, [r4, #12]
    aeb6:	f04f 30ff 	mov.w	r0, #4294967295
    aeba:	bd70      	pop	{r4, r5, r6, pc}
    aebc:	4b25      	ldr	r3, [pc, #148]	; (af54 <__swsetup_r+0xd4>)
    aebe:	429c      	cmp	r4, r3
    aec0:	d101      	bne.n	aec6 <__swsetup_r+0x46>
    aec2:	68ac      	ldr	r4, [r5, #8]
    aec4:	e7eb      	b.n	ae9e <__swsetup_r+0x1e>
    aec6:	4b24      	ldr	r3, [pc, #144]	; (af58 <__swsetup_r+0xd8>)
    aec8:	429c      	cmp	r4, r3
    aeca:	bf08      	it	eq
    aecc:	68ec      	ldreq	r4, [r5, #12]
    aece:	e7e6      	b.n	ae9e <__swsetup_r+0x1e>
    aed0:	0751      	lsls	r1, r2, #29
    aed2:	d512      	bpl.n	aefa <__swsetup_r+0x7a>
    aed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    aed6:	b141      	cbz	r1, aeea <__swsetup_r+0x6a>
    aed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    aedc:	4299      	cmp	r1, r3
    aede:	d002      	beq.n	aee6 <__swsetup_r+0x66>
    aee0:	4630      	mov	r0, r6
    aee2:	f7ff fd8d 	bl	aa00 <_free_r>
    aee6:	2300      	movs	r3, #0
    aee8:	6363      	str	r3, [r4, #52]	; 0x34
    aeea:	89a3      	ldrh	r3, [r4, #12]
    aeec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    aef0:	81a3      	strh	r3, [r4, #12]
    aef2:	2300      	movs	r3, #0
    aef4:	6063      	str	r3, [r4, #4]
    aef6:	6923      	ldr	r3, [r4, #16]
    aef8:	6023      	str	r3, [r4, #0]
    aefa:	89a3      	ldrh	r3, [r4, #12]
    aefc:	f043 0308 	orr.w	r3, r3, #8
    af00:	81a3      	strh	r3, [r4, #12]
    af02:	6923      	ldr	r3, [r4, #16]
    af04:	b94b      	cbnz	r3, af1a <__swsetup_r+0x9a>
    af06:	89a3      	ldrh	r3, [r4, #12]
    af08:	f403 7320 	and.w	r3, r3, #640	; 0x280
    af0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    af10:	d003      	beq.n	af1a <__swsetup_r+0x9a>
    af12:	4621      	mov	r1, r4
    af14:	4630      	mov	r0, r6
    af16:	f000 f9c1 	bl	b29c <__smakebuf_r>
    af1a:	89a2      	ldrh	r2, [r4, #12]
    af1c:	f012 0301 	ands.w	r3, r2, #1
    af20:	d00c      	beq.n	af3c <__swsetup_r+0xbc>
    af22:	2300      	movs	r3, #0
    af24:	60a3      	str	r3, [r4, #8]
    af26:	6963      	ldr	r3, [r4, #20]
    af28:	425b      	negs	r3, r3
    af2a:	61a3      	str	r3, [r4, #24]
    af2c:	6923      	ldr	r3, [r4, #16]
    af2e:	b953      	cbnz	r3, af46 <__swsetup_r+0xc6>
    af30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    af34:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    af38:	d1ba      	bne.n	aeb0 <__swsetup_r+0x30>
    af3a:	bd70      	pop	{r4, r5, r6, pc}
    af3c:	0792      	lsls	r2, r2, #30
    af3e:	bf58      	it	pl
    af40:	6963      	ldrpl	r3, [r4, #20]
    af42:	60a3      	str	r3, [r4, #8]
    af44:	e7f2      	b.n	af2c <__swsetup_r+0xac>
    af46:	2000      	movs	r0, #0
    af48:	e7f7      	b.n	af3a <__swsetup_r+0xba>
    af4a:	bf00      	nop
    af4c:	20000058 	.word	0x20000058
    af50:	0000c1a4 	.word	0x0000c1a4
    af54:	0000c1c4 	.word	0x0000c1c4
    af58:	0000c184 	.word	0x0000c184

0000af5c <__sflush_r>:
    af5c:	898a      	ldrh	r2, [r1, #12]
    af5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af62:	4605      	mov	r5, r0
    af64:	0710      	lsls	r0, r2, #28
    af66:	460c      	mov	r4, r1
    af68:	d45a      	bmi.n	b020 <__sflush_r+0xc4>
    af6a:	684b      	ldr	r3, [r1, #4]
    af6c:	2b00      	cmp	r3, #0
    af6e:	dc05      	bgt.n	af7c <__sflush_r+0x20>
    af70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    af72:	2b00      	cmp	r3, #0
    af74:	dc02      	bgt.n	af7c <__sflush_r+0x20>
    af76:	2000      	movs	r0, #0
    af78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    af7e:	2e00      	cmp	r6, #0
    af80:	d0f9      	beq.n	af76 <__sflush_r+0x1a>
    af82:	2300      	movs	r3, #0
    af84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    af88:	682f      	ldr	r7, [r5, #0]
    af8a:	602b      	str	r3, [r5, #0]
    af8c:	d033      	beq.n	aff6 <__sflush_r+0x9a>
    af8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    af90:	89a3      	ldrh	r3, [r4, #12]
    af92:	075a      	lsls	r2, r3, #29
    af94:	d505      	bpl.n	afa2 <__sflush_r+0x46>
    af96:	6863      	ldr	r3, [r4, #4]
    af98:	1ac0      	subs	r0, r0, r3
    af9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    af9c:	b10b      	cbz	r3, afa2 <__sflush_r+0x46>
    af9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    afa0:	1ac0      	subs	r0, r0, r3
    afa2:	2300      	movs	r3, #0
    afa4:	4602      	mov	r2, r0
    afa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    afa8:	6a21      	ldr	r1, [r4, #32]
    afaa:	4628      	mov	r0, r5
    afac:	47b0      	blx	r6
    afae:	1c43      	adds	r3, r0, #1
    afb0:	89a3      	ldrh	r3, [r4, #12]
    afb2:	d106      	bne.n	afc2 <__sflush_r+0x66>
    afb4:	6829      	ldr	r1, [r5, #0]
    afb6:	291d      	cmp	r1, #29
    afb8:	d84b      	bhi.n	b052 <__sflush_r+0xf6>
    afba:	4a2b      	ldr	r2, [pc, #172]	; (b068 <__sflush_r+0x10c>)
    afbc:	40ca      	lsrs	r2, r1
    afbe:	07d6      	lsls	r6, r2, #31
    afc0:	d547      	bpl.n	b052 <__sflush_r+0xf6>
    afc2:	2200      	movs	r2, #0
    afc4:	6062      	str	r2, [r4, #4]
    afc6:	04d9      	lsls	r1, r3, #19
    afc8:	6922      	ldr	r2, [r4, #16]
    afca:	6022      	str	r2, [r4, #0]
    afcc:	d504      	bpl.n	afd8 <__sflush_r+0x7c>
    afce:	1c42      	adds	r2, r0, #1
    afd0:	d101      	bne.n	afd6 <__sflush_r+0x7a>
    afd2:	682b      	ldr	r3, [r5, #0]
    afd4:	b903      	cbnz	r3, afd8 <__sflush_r+0x7c>
    afd6:	6560      	str	r0, [r4, #84]	; 0x54
    afd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    afda:	602f      	str	r7, [r5, #0]
    afdc:	2900      	cmp	r1, #0
    afde:	d0ca      	beq.n	af76 <__sflush_r+0x1a>
    afe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    afe4:	4299      	cmp	r1, r3
    afe6:	d002      	beq.n	afee <__sflush_r+0x92>
    afe8:	4628      	mov	r0, r5
    afea:	f7ff fd09 	bl	aa00 <_free_r>
    afee:	2000      	movs	r0, #0
    aff0:	6360      	str	r0, [r4, #52]	; 0x34
    aff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aff6:	6a21      	ldr	r1, [r4, #32]
    aff8:	2301      	movs	r3, #1
    affa:	4628      	mov	r0, r5
    affc:	47b0      	blx	r6
    affe:	1c41      	adds	r1, r0, #1
    b000:	d1c6      	bne.n	af90 <__sflush_r+0x34>
    b002:	682b      	ldr	r3, [r5, #0]
    b004:	2b00      	cmp	r3, #0
    b006:	d0c3      	beq.n	af90 <__sflush_r+0x34>
    b008:	2b1d      	cmp	r3, #29
    b00a:	d001      	beq.n	b010 <__sflush_r+0xb4>
    b00c:	2b16      	cmp	r3, #22
    b00e:	d101      	bne.n	b014 <__sflush_r+0xb8>
    b010:	602f      	str	r7, [r5, #0]
    b012:	e7b0      	b.n	af76 <__sflush_r+0x1a>
    b014:	89a3      	ldrh	r3, [r4, #12]
    b016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b01a:	81a3      	strh	r3, [r4, #12]
    b01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b020:	690f      	ldr	r7, [r1, #16]
    b022:	2f00      	cmp	r7, #0
    b024:	d0a7      	beq.n	af76 <__sflush_r+0x1a>
    b026:	0793      	lsls	r3, r2, #30
    b028:	680e      	ldr	r6, [r1, #0]
    b02a:	bf08      	it	eq
    b02c:	694b      	ldreq	r3, [r1, #20]
    b02e:	600f      	str	r7, [r1, #0]
    b030:	bf18      	it	ne
    b032:	2300      	movne	r3, #0
    b034:	eba6 0807 	sub.w	r8, r6, r7
    b038:	608b      	str	r3, [r1, #8]
    b03a:	f1b8 0f00 	cmp.w	r8, #0
    b03e:	dd9a      	ble.n	af76 <__sflush_r+0x1a>
    b040:	4643      	mov	r3, r8
    b042:	463a      	mov	r2, r7
    b044:	6a21      	ldr	r1, [r4, #32]
    b046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    b048:	4628      	mov	r0, r5
    b04a:	47b0      	blx	r6
    b04c:	2800      	cmp	r0, #0
    b04e:	dc07      	bgt.n	b060 <__sflush_r+0x104>
    b050:	89a3      	ldrh	r3, [r4, #12]
    b052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b056:	81a3      	strh	r3, [r4, #12]
    b058:	f04f 30ff 	mov.w	r0, #4294967295
    b05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b060:	4407      	add	r7, r0
    b062:	eba8 0800 	sub.w	r8, r8, r0
    b066:	e7e8      	b.n	b03a <__sflush_r+0xde>
    b068:	20400001 	.word	0x20400001

0000b06c <_fflush_r>:
    b06c:	b538      	push	{r3, r4, r5, lr}
    b06e:	690b      	ldr	r3, [r1, #16]
    b070:	4605      	mov	r5, r0
    b072:	460c      	mov	r4, r1
    b074:	b1db      	cbz	r3, b0ae <_fflush_r+0x42>
    b076:	b118      	cbz	r0, b080 <_fflush_r+0x14>
    b078:	6983      	ldr	r3, [r0, #24]
    b07a:	b90b      	cbnz	r3, b080 <_fflush_r+0x14>
    b07c:	f000 f860 	bl	b140 <__sinit>
    b080:	4b0c      	ldr	r3, [pc, #48]	; (b0b4 <_fflush_r+0x48>)
    b082:	429c      	cmp	r4, r3
    b084:	d109      	bne.n	b09a <_fflush_r+0x2e>
    b086:	686c      	ldr	r4, [r5, #4]
    b088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b08c:	b17b      	cbz	r3, b0ae <_fflush_r+0x42>
    b08e:	4621      	mov	r1, r4
    b090:	4628      	mov	r0, r5
    b092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b096:	f7ff bf61 	b.w	af5c <__sflush_r>
    b09a:	4b07      	ldr	r3, [pc, #28]	; (b0b8 <_fflush_r+0x4c>)
    b09c:	429c      	cmp	r4, r3
    b09e:	d101      	bne.n	b0a4 <_fflush_r+0x38>
    b0a0:	68ac      	ldr	r4, [r5, #8]
    b0a2:	e7f1      	b.n	b088 <_fflush_r+0x1c>
    b0a4:	4b05      	ldr	r3, [pc, #20]	; (b0bc <_fflush_r+0x50>)
    b0a6:	429c      	cmp	r4, r3
    b0a8:	bf08      	it	eq
    b0aa:	68ec      	ldreq	r4, [r5, #12]
    b0ac:	e7ec      	b.n	b088 <_fflush_r+0x1c>
    b0ae:	2000      	movs	r0, #0
    b0b0:	bd38      	pop	{r3, r4, r5, pc}
    b0b2:	bf00      	nop
    b0b4:	0000c1a4 	.word	0x0000c1a4
    b0b8:	0000c1c4 	.word	0x0000c1c4
    b0bc:	0000c184 	.word	0x0000c184

0000b0c0 <_cleanup_r>:
    b0c0:	4901      	ldr	r1, [pc, #4]	; (b0c8 <_cleanup_r+0x8>)
    b0c2:	f000 b8a9 	b.w	b218 <_fwalk_reent>
    b0c6:	bf00      	nop
    b0c8:	0000b06d 	.word	0x0000b06d

0000b0cc <std.isra.0>:
    b0cc:	2300      	movs	r3, #0
    b0ce:	b510      	push	{r4, lr}
    b0d0:	4604      	mov	r4, r0
    b0d2:	6003      	str	r3, [r0, #0]
    b0d4:	6043      	str	r3, [r0, #4]
    b0d6:	6083      	str	r3, [r0, #8]
    b0d8:	8181      	strh	r1, [r0, #12]
    b0da:	6643      	str	r3, [r0, #100]	; 0x64
    b0dc:	81c2      	strh	r2, [r0, #14]
    b0de:	6103      	str	r3, [r0, #16]
    b0e0:	6143      	str	r3, [r0, #20]
    b0e2:	6183      	str	r3, [r0, #24]
    b0e4:	4619      	mov	r1, r3
    b0e6:	2208      	movs	r2, #8
    b0e8:	305c      	adds	r0, #92	; 0x5c
    b0ea:	f7ff fc80 	bl	a9ee <memset>
    b0ee:	4b05      	ldr	r3, [pc, #20]	; (b104 <std.isra.0+0x38>)
    b0f0:	6263      	str	r3, [r4, #36]	; 0x24
    b0f2:	4b05      	ldr	r3, [pc, #20]	; (b108 <std.isra.0+0x3c>)
    b0f4:	62a3      	str	r3, [r4, #40]	; 0x28
    b0f6:	4b05      	ldr	r3, [pc, #20]	; (b10c <std.isra.0+0x40>)
    b0f8:	62e3      	str	r3, [r4, #44]	; 0x2c
    b0fa:	4b05      	ldr	r3, [pc, #20]	; (b110 <std.isra.0+0x44>)
    b0fc:	6224      	str	r4, [r4, #32]
    b0fe:	6323      	str	r3, [r4, #48]	; 0x30
    b100:	bd10      	pop	{r4, pc}
    b102:	bf00      	nop
    b104:	0000b8c9 	.word	0x0000b8c9
    b108:	0000b8eb 	.word	0x0000b8eb
    b10c:	0000b923 	.word	0x0000b923
    b110:	0000b947 	.word	0x0000b947

0000b114 <__sfmoreglue>:
    b114:	b570      	push	{r4, r5, r6, lr}
    b116:	1e4a      	subs	r2, r1, #1
    b118:	2568      	movs	r5, #104	; 0x68
    b11a:	4355      	muls	r5, r2
    b11c:	460e      	mov	r6, r1
    b11e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    b122:	f7ff fcbb 	bl	aa9c <_malloc_r>
    b126:	4604      	mov	r4, r0
    b128:	b140      	cbz	r0, b13c <__sfmoreglue+0x28>
    b12a:	2100      	movs	r1, #0
    b12c:	e880 0042 	stmia.w	r0, {r1, r6}
    b130:	300c      	adds	r0, #12
    b132:	60a0      	str	r0, [r4, #8]
    b134:	f105 0268 	add.w	r2, r5, #104	; 0x68
    b138:	f7ff fc59 	bl	a9ee <memset>
    b13c:	4620      	mov	r0, r4
    b13e:	bd70      	pop	{r4, r5, r6, pc}

0000b140 <__sinit>:
    b140:	6983      	ldr	r3, [r0, #24]
    b142:	b510      	push	{r4, lr}
    b144:	4604      	mov	r4, r0
    b146:	bb33      	cbnz	r3, b196 <__sinit+0x56>
    b148:	6483      	str	r3, [r0, #72]	; 0x48
    b14a:	64c3      	str	r3, [r0, #76]	; 0x4c
    b14c:	6503      	str	r3, [r0, #80]	; 0x50
    b14e:	4b12      	ldr	r3, [pc, #72]	; (b198 <__sinit+0x58>)
    b150:	4a12      	ldr	r2, [pc, #72]	; (b19c <__sinit+0x5c>)
    b152:	681b      	ldr	r3, [r3, #0]
    b154:	6282      	str	r2, [r0, #40]	; 0x28
    b156:	4298      	cmp	r0, r3
    b158:	bf04      	itt	eq
    b15a:	2301      	moveq	r3, #1
    b15c:	6183      	streq	r3, [r0, #24]
    b15e:	f000 f81f 	bl	b1a0 <__sfp>
    b162:	6060      	str	r0, [r4, #4]
    b164:	4620      	mov	r0, r4
    b166:	f000 f81b 	bl	b1a0 <__sfp>
    b16a:	60a0      	str	r0, [r4, #8]
    b16c:	4620      	mov	r0, r4
    b16e:	f000 f817 	bl	b1a0 <__sfp>
    b172:	2200      	movs	r2, #0
    b174:	60e0      	str	r0, [r4, #12]
    b176:	2104      	movs	r1, #4
    b178:	6860      	ldr	r0, [r4, #4]
    b17a:	f7ff ffa7 	bl	b0cc <std.isra.0>
    b17e:	2201      	movs	r2, #1
    b180:	2109      	movs	r1, #9
    b182:	68a0      	ldr	r0, [r4, #8]
    b184:	f7ff ffa2 	bl	b0cc <std.isra.0>
    b188:	2202      	movs	r2, #2
    b18a:	2112      	movs	r1, #18
    b18c:	68e0      	ldr	r0, [r4, #12]
    b18e:	f7ff ff9d 	bl	b0cc <std.isra.0>
    b192:	2301      	movs	r3, #1
    b194:	61a3      	str	r3, [r4, #24]
    b196:	bd10      	pop	{r4, pc}
    b198:	0000c180 	.word	0x0000c180
    b19c:	0000b0c1 	.word	0x0000b0c1

0000b1a0 <__sfp>:
    b1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b1a2:	4b1c      	ldr	r3, [pc, #112]	; (b214 <__sfp+0x74>)
    b1a4:	681e      	ldr	r6, [r3, #0]
    b1a6:	69b3      	ldr	r3, [r6, #24]
    b1a8:	4607      	mov	r7, r0
    b1aa:	b913      	cbnz	r3, b1b2 <__sfp+0x12>
    b1ac:	4630      	mov	r0, r6
    b1ae:	f7ff ffc7 	bl	b140 <__sinit>
    b1b2:	3648      	adds	r6, #72	; 0x48
    b1b4:	68b4      	ldr	r4, [r6, #8]
    b1b6:	6873      	ldr	r3, [r6, #4]
    b1b8:	3b01      	subs	r3, #1
    b1ba:	d503      	bpl.n	b1c4 <__sfp+0x24>
    b1bc:	6833      	ldr	r3, [r6, #0]
    b1be:	b133      	cbz	r3, b1ce <__sfp+0x2e>
    b1c0:	6836      	ldr	r6, [r6, #0]
    b1c2:	e7f7      	b.n	b1b4 <__sfp+0x14>
    b1c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    b1c8:	b16d      	cbz	r5, b1e6 <__sfp+0x46>
    b1ca:	3468      	adds	r4, #104	; 0x68
    b1cc:	e7f4      	b.n	b1b8 <__sfp+0x18>
    b1ce:	2104      	movs	r1, #4
    b1d0:	4638      	mov	r0, r7
    b1d2:	f7ff ff9f 	bl	b114 <__sfmoreglue>
    b1d6:	6030      	str	r0, [r6, #0]
    b1d8:	2800      	cmp	r0, #0
    b1da:	d1f1      	bne.n	b1c0 <__sfp+0x20>
    b1dc:	230c      	movs	r3, #12
    b1de:	603b      	str	r3, [r7, #0]
    b1e0:	4604      	mov	r4, r0
    b1e2:	4620      	mov	r0, r4
    b1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b1ea:	81e3      	strh	r3, [r4, #14]
    b1ec:	2301      	movs	r3, #1
    b1ee:	81a3      	strh	r3, [r4, #12]
    b1f0:	6665      	str	r5, [r4, #100]	; 0x64
    b1f2:	6025      	str	r5, [r4, #0]
    b1f4:	60a5      	str	r5, [r4, #8]
    b1f6:	6065      	str	r5, [r4, #4]
    b1f8:	6125      	str	r5, [r4, #16]
    b1fa:	6165      	str	r5, [r4, #20]
    b1fc:	61a5      	str	r5, [r4, #24]
    b1fe:	2208      	movs	r2, #8
    b200:	4629      	mov	r1, r5
    b202:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b206:	f7ff fbf2 	bl	a9ee <memset>
    b20a:	6365      	str	r5, [r4, #52]	; 0x34
    b20c:	63a5      	str	r5, [r4, #56]	; 0x38
    b20e:	64a5      	str	r5, [r4, #72]	; 0x48
    b210:	64e5      	str	r5, [r4, #76]	; 0x4c
    b212:	e7e6      	b.n	b1e2 <__sfp+0x42>
    b214:	0000c180 	.word	0x0000c180

0000b218 <_fwalk_reent>:
    b218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b21c:	4680      	mov	r8, r0
    b21e:	4689      	mov	r9, r1
    b220:	f100 0448 	add.w	r4, r0, #72	; 0x48
    b224:	2600      	movs	r6, #0
    b226:	b914      	cbnz	r4, b22e <_fwalk_reent+0x16>
    b228:	4630      	mov	r0, r6
    b22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b22e:	68a5      	ldr	r5, [r4, #8]
    b230:	6867      	ldr	r7, [r4, #4]
    b232:	3f01      	subs	r7, #1
    b234:	d501      	bpl.n	b23a <_fwalk_reent+0x22>
    b236:	6824      	ldr	r4, [r4, #0]
    b238:	e7f5      	b.n	b226 <_fwalk_reent+0xe>
    b23a:	89ab      	ldrh	r3, [r5, #12]
    b23c:	2b01      	cmp	r3, #1
    b23e:	d907      	bls.n	b250 <_fwalk_reent+0x38>
    b240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    b244:	3301      	adds	r3, #1
    b246:	d003      	beq.n	b250 <_fwalk_reent+0x38>
    b248:	4629      	mov	r1, r5
    b24a:	4640      	mov	r0, r8
    b24c:	47c8      	blx	r9
    b24e:	4306      	orrs	r6, r0
    b250:	3568      	adds	r5, #104	; 0x68
    b252:	e7ee      	b.n	b232 <_fwalk_reent+0x1a>

0000b254 <__swhatbuf_r>:
    b254:	b570      	push	{r4, r5, r6, lr}
    b256:	460e      	mov	r6, r1
    b258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b25c:	2900      	cmp	r1, #0
    b25e:	b090      	sub	sp, #64	; 0x40
    b260:	4614      	mov	r4, r2
    b262:	461d      	mov	r5, r3
    b264:	da07      	bge.n	b276 <__swhatbuf_r+0x22>
    b266:	2300      	movs	r3, #0
    b268:	602b      	str	r3, [r5, #0]
    b26a:	89b3      	ldrh	r3, [r6, #12]
    b26c:	061a      	lsls	r2, r3, #24
    b26e:	d410      	bmi.n	b292 <__swhatbuf_r+0x3e>
    b270:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b274:	e00e      	b.n	b294 <__swhatbuf_r+0x40>
    b276:	aa01      	add	r2, sp, #4
    b278:	f000 fb8c 	bl	b994 <_fstat_r>
    b27c:	2800      	cmp	r0, #0
    b27e:	dbf2      	blt.n	b266 <__swhatbuf_r+0x12>
    b280:	9a02      	ldr	r2, [sp, #8]
    b282:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    b286:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    b28a:	425a      	negs	r2, r3
    b28c:	415a      	adcs	r2, r3
    b28e:	602a      	str	r2, [r5, #0]
    b290:	e7ee      	b.n	b270 <__swhatbuf_r+0x1c>
    b292:	2340      	movs	r3, #64	; 0x40
    b294:	2000      	movs	r0, #0
    b296:	6023      	str	r3, [r4, #0]
    b298:	b010      	add	sp, #64	; 0x40
    b29a:	bd70      	pop	{r4, r5, r6, pc}

0000b29c <__smakebuf_r>:
    b29c:	898b      	ldrh	r3, [r1, #12]
    b29e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b2a0:	079d      	lsls	r5, r3, #30
    b2a2:	4606      	mov	r6, r0
    b2a4:	460c      	mov	r4, r1
    b2a6:	d507      	bpl.n	b2b8 <__smakebuf_r+0x1c>
    b2a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    b2ac:	6023      	str	r3, [r4, #0]
    b2ae:	6123      	str	r3, [r4, #16]
    b2b0:	2301      	movs	r3, #1
    b2b2:	6163      	str	r3, [r4, #20]
    b2b4:	b002      	add	sp, #8
    b2b6:	bd70      	pop	{r4, r5, r6, pc}
    b2b8:	ab01      	add	r3, sp, #4
    b2ba:	466a      	mov	r2, sp
    b2bc:	f7ff ffca 	bl	b254 <__swhatbuf_r>
    b2c0:	9900      	ldr	r1, [sp, #0]
    b2c2:	4605      	mov	r5, r0
    b2c4:	4630      	mov	r0, r6
    b2c6:	f7ff fbe9 	bl	aa9c <_malloc_r>
    b2ca:	b948      	cbnz	r0, b2e0 <__smakebuf_r+0x44>
    b2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b2d0:	059a      	lsls	r2, r3, #22
    b2d2:	d4ef      	bmi.n	b2b4 <__smakebuf_r+0x18>
    b2d4:	f023 0303 	bic.w	r3, r3, #3
    b2d8:	f043 0302 	orr.w	r3, r3, #2
    b2dc:	81a3      	strh	r3, [r4, #12]
    b2de:	e7e3      	b.n	b2a8 <__smakebuf_r+0xc>
    b2e0:	4b0d      	ldr	r3, [pc, #52]	; (b318 <__smakebuf_r+0x7c>)
    b2e2:	62b3      	str	r3, [r6, #40]	; 0x28
    b2e4:	89a3      	ldrh	r3, [r4, #12]
    b2e6:	6020      	str	r0, [r4, #0]
    b2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b2ec:	81a3      	strh	r3, [r4, #12]
    b2ee:	9b00      	ldr	r3, [sp, #0]
    b2f0:	6163      	str	r3, [r4, #20]
    b2f2:	9b01      	ldr	r3, [sp, #4]
    b2f4:	6120      	str	r0, [r4, #16]
    b2f6:	b15b      	cbz	r3, b310 <__smakebuf_r+0x74>
    b2f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b2fc:	4630      	mov	r0, r6
    b2fe:	f000 fb5b 	bl	b9b8 <_isatty_r>
    b302:	b128      	cbz	r0, b310 <__smakebuf_r+0x74>
    b304:	89a3      	ldrh	r3, [r4, #12]
    b306:	f023 0303 	bic.w	r3, r3, #3
    b30a:	f043 0301 	orr.w	r3, r3, #1
    b30e:	81a3      	strh	r3, [r4, #12]
    b310:	89a3      	ldrh	r3, [r4, #12]
    b312:	431d      	orrs	r5, r3
    b314:	81a5      	strh	r5, [r4, #12]
    b316:	e7cd      	b.n	b2b4 <__smakebuf_r+0x18>
    b318:	0000b0c1 	.word	0x0000b0c1

0000b31c <__malloc_lock>:
    b31c:	4770      	bx	lr

0000b31e <__malloc_unlock>:
    b31e:	4770      	bx	lr

0000b320 <__sfputc_r>:
    b320:	6893      	ldr	r3, [r2, #8]
    b322:	3b01      	subs	r3, #1
    b324:	2b00      	cmp	r3, #0
    b326:	b410      	push	{r4}
    b328:	6093      	str	r3, [r2, #8]
    b32a:	da08      	bge.n	b33e <__sfputc_r+0x1e>
    b32c:	6994      	ldr	r4, [r2, #24]
    b32e:	42a3      	cmp	r3, r4
    b330:	db02      	blt.n	b338 <__sfputc_r+0x18>
    b332:	b2cb      	uxtb	r3, r1
    b334:	2b0a      	cmp	r3, #10
    b336:	d102      	bne.n	b33e <__sfputc_r+0x1e>
    b338:	bc10      	pop	{r4}
    b33a:	f7ff bd4f 	b.w	addc <__swbuf_r>
    b33e:	6813      	ldr	r3, [r2, #0]
    b340:	1c58      	adds	r0, r3, #1
    b342:	6010      	str	r0, [r2, #0]
    b344:	7019      	strb	r1, [r3, #0]
    b346:	b2c8      	uxtb	r0, r1
    b348:	bc10      	pop	{r4}
    b34a:	4770      	bx	lr

0000b34c <__sfputs_r>:
    b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b34e:	4606      	mov	r6, r0
    b350:	460f      	mov	r7, r1
    b352:	4614      	mov	r4, r2
    b354:	18d5      	adds	r5, r2, r3
    b356:	42ac      	cmp	r4, r5
    b358:	d101      	bne.n	b35e <__sfputs_r+0x12>
    b35a:	2000      	movs	r0, #0
    b35c:	e007      	b.n	b36e <__sfputs_r+0x22>
    b35e:	463a      	mov	r2, r7
    b360:	f814 1b01 	ldrb.w	r1, [r4], #1
    b364:	4630      	mov	r0, r6
    b366:	f7ff ffdb 	bl	b320 <__sfputc_r>
    b36a:	1c43      	adds	r3, r0, #1
    b36c:	d1f3      	bne.n	b356 <__sfputs_r+0xa>
    b36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b370 <_vfiprintf_r>:
    b370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b374:	b09d      	sub	sp, #116	; 0x74
    b376:	460c      	mov	r4, r1
    b378:	4617      	mov	r7, r2
    b37a:	9303      	str	r3, [sp, #12]
    b37c:	4606      	mov	r6, r0
    b37e:	b118      	cbz	r0, b388 <_vfiprintf_r+0x18>
    b380:	6983      	ldr	r3, [r0, #24]
    b382:	b90b      	cbnz	r3, b388 <_vfiprintf_r+0x18>
    b384:	f7ff fedc 	bl	b140 <__sinit>
    b388:	4b7c      	ldr	r3, [pc, #496]	; (b57c <_vfiprintf_r+0x20c>)
    b38a:	429c      	cmp	r4, r3
    b38c:	d157      	bne.n	b43e <_vfiprintf_r+0xce>
    b38e:	6874      	ldr	r4, [r6, #4]
    b390:	89a3      	ldrh	r3, [r4, #12]
    b392:	0718      	lsls	r0, r3, #28
    b394:	d55d      	bpl.n	b452 <_vfiprintf_r+0xe2>
    b396:	6923      	ldr	r3, [r4, #16]
    b398:	2b00      	cmp	r3, #0
    b39a:	d05a      	beq.n	b452 <_vfiprintf_r+0xe2>
    b39c:	2300      	movs	r3, #0
    b39e:	9309      	str	r3, [sp, #36]	; 0x24
    b3a0:	2320      	movs	r3, #32
    b3a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    b3a6:	2330      	movs	r3, #48	; 0x30
    b3a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    b3ac:	f04f 0b01 	mov.w	fp, #1
    b3b0:	46b8      	mov	r8, r7
    b3b2:	4645      	mov	r5, r8
    b3b4:	f815 3b01 	ldrb.w	r3, [r5], #1
    b3b8:	2b00      	cmp	r3, #0
    b3ba:	d155      	bne.n	b468 <_vfiprintf_r+0xf8>
    b3bc:	ebb8 0a07 	subs.w	sl, r8, r7
    b3c0:	d00b      	beq.n	b3da <_vfiprintf_r+0x6a>
    b3c2:	4653      	mov	r3, sl
    b3c4:	463a      	mov	r2, r7
    b3c6:	4621      	mov	r1, r4
    b3c8:	4630      	mov	r0, r6
    b3ca:	f7ff ffbf 	bl	b34c <__sfputs_r>
    b3ce:	3001      	adds	r0, #1
    b3d0:	f000 80c4 	beq.w	b55c <_vfiprintf_r+0x1ec>
    b3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b3d6:	4453      	add	r3, sl
    b3d8:	9309      	str	r3, [sp, #36]	; 0x24
    b3da:	f898 3000 	ldrb.w	r3, [r8]
    b3de:	2b00      	cmp	r3, #0
    b3e0:	f000 80bc 	beq.w	b55c <_vfiprintf_r+0x1ec>
    b3e4:	2300      	movs	r3, #0
    b3e6:	f04f 32ff 	mov.w	r2, #4294967295
    b3ea:	9304      	str	r3, [sp, #16]
    b3ec:	9307      	str	r3, [sp, #28]
    b3ee:	9205      	str	r2, [sp, #20]
    b3f0:	9306      	str	r3, [sp, #24]
    b3f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    b3f6:	931a      	str	r3, [sp, #104]	; 0x68
    b3f8:	2205      	movs	r2, #5
    b3fa:	7829      	ldrb	r1, [r5, #0]
    b3fc:	4860      	ldr	r0, [pc, #384]	; (b580 <_vfiprintf_r+0x210>)
    b3fe:	f000 faff 	bl	ba00 <memchr>
    b402:	f105 0801 	add.w	r8, r5, #1
    b406:	9b04      	ldr	r3, [sp, #16]
    b408:	2800      	cmp	r0, #0
    b40a:	d131      	bne.n	b470 <_vfiprintf_r+0x100>
    b40c:	06d9      	lsls	r1, r3, #27
    b40e:	bf44      	itt	mi
    b410:	2220      	movmi	r2, #32
    b412:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b416:	071a      	lsls	r2, r3, #28
    b418:	bf44      	itt	mi
    b41a:	222b      	movmi	r2, #43	; 0x2b
    b41c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b420:	782a      	ldrb	r2, [r5, #0]
    b422:	2a2a      	cmp	r2, #42	; 0x2a
    b424:	d02c      	beq.n	b480 <_vfiprintf_r+0x110>
    b426:	9a07      	ldr	r2, [sp, #28]
    b428:	2100      	movs	r1, #0
    b42a:	200a      	movs	r0, #10
    b42c:	46a8      	mov	r8, r5
    b42e:	3501      	adds	r5, #1
    b430:	f898 3000 	ldrb.w	r3, [r8]
    b434:	3b30      	subs	r3, #48	; 0x30
    b436:	2b09      	cmp	r3, #9
    b438:	d96d      	bls.n	b516 <_vfiprintf_r+0x1a6>
    b43a:	b371      	cbz	r1, b49a <_vfiprintf_r+0x12a>
    b43c:	e026      	b.n	b48c <_vfiprintf_r+0x11c>
    b43e:	4b51      	ldr	r3, [pc, #324]	; (b584 <_vfiprintf_r+0x214>)
    b440:	429c      	cmp	r4, r3
    b442:	d101      	bne.n	b448 <_vfiprintf_r+0xd8>
    b444:	68b4      	ldr	r4, [r6, #8]
    b446:	e7a3      	b.n	b390 <_vfiprintf_r+0x20>
    b448:	4b4f      	ldr	r3, [pc, #316]	; (b588 <_vfiprintf_r+0x218>)
    b44a:	429c      	cmp	r4, r3
    b44c:	bf08      	it	eq
    b44e:	68f4      	ldreq	r4, [r6, #12]
    b450:	e79e      	b.n	b390 <_vfiprintf_r+0x20>
    b452:	4621      	mov	r1, r4
    b454:	4630      	mov	r0, r6
    b456:	f7ff fd13 	bl	ae80 <__swsetup_r>
    b45a:	2800      	cmp	r0, #0
    b45c:	d09e      	beq.n	b39c <_vfiprintf_r+0x2c>
    b45e:	f04f 30ff 	mov.w	r0, #4294967295
    b462:	b01d      	add	sp, #116	; 0x74
    b464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b468:	2b25      	cmp	r3, #37	; 0x25
    b46a:	d0a7      	beq.n	b3bc <_vfiprintf_r+0x4c>
    b46c:	46a8      	mov	r8, r5
    b46e:	e7a0      	b.n	b3b2 <_vfiprintf_r+0x42>
    b470:	4a43      	ldr	r2, [pc, #268]	; (b580 <_vfiprintf_r+0x210>)
    b472:	1a80      	subs	r0, r0, r2
    b474:	fa0b f000 	lsl.w	r0, fp, r0
    b478:	4318      	orrs	r0, r3
    b47a:	9004      	str	r0, [sp, #16]
    b47c:	4645      	mov	r5, r8
    b47e:	e7bb      	b.n	b3f8 <_vfiprintf_r+0x88>
    b480:	9a03      	ldr	r2, [sp, #12]
    b482:	1d11      	adds	r1, r2, #4
    b484:	6812      	ldr	r2, [r2, #0]
    b486:	9103      	str	r1, [sp, #12]
    b488:	2a00      	cmp	r2, #0
    b48a:	db01      	blt.n	b490 <_vfiprintf_r+0x120>
    b48c:	9207      	str	r2, [sp, #28]
    b48e:	e004      	b.n	b49a <_vfiprintf_r+0x12a>
    b490:	4252      	negs	r2, r2
    b492:	f043 0302 	orr.w	r3, r3, #2
    b496:	9207      	str	r2, [sp, #28]
    b498:	9304      	str	r3, [sp, #16]
    b49a:	f898 3000 	ldrb.w	r3, [r8]
    b49e:	2b2e      	cmp	r3, #46	; 0x2e
    b4a0:	d110      	bne.n	b4c4 <_vfiprintf_r+0x154>
    b4a2:	f898 3001 	ldrb.w	r3, [r8, #1]
    b4a6:	2b2a      	cmp	r3, #42	; 0x2a
    b4a8:	f108 0101 	add.w	r1, r8, #1
    b4ac:	d137      	bne.n	b51e <_vfiprintf_r+0x1ae>
    b4ae:	9b03      	ldr	r3, [sp, #12]
    b4b0:	1d1a      	adds	r2, r3, #4
    b4b2:	681b      	ldr	r3, [r3, #0]
    b4b4:	9203      	str	r2, [sp, #12]
    b4b6:	2b00      	cmp	r3, #0
    b4b8:	bfb8      	it	lt
    b4ba:	f04f 33ff 	movlt.w	r3, #4294967295
    b4be:	f108 0802 	add.w	r8, r8, #2
    b4c2:	9305      	str	r3, [sp, #20]
    b4c4:	4d31      	ldr	r5, [pc, #196]	; (b58c <_vfiprintf_r+0x21c>)
    b4c6:	f898 1000 	ldrb.w	r1, [r8]
    b4ca:	2203      	movs	r2, #3
    b4cc:	4628      	mov	r0, r5
    b4ce:	f000 fa97 	bl	ba00 <memchr>
    b4d2:	b140      	cbz	r0, b4e6 <_vfiprintf_r+0x176>
    b4d4:	2340      	movs	r3, #64	; 0x40
    b4d6:	1b40      	subs	r0, r0, r5
    b4d8:	fa03 f000 	lsl.w	r0, r3, r0
    b4dc:	9b04      	ldr	r3, [sp, #16]
    b4de:	4303      	orrs	r3, r0
    b4e0:	9304      	str	r3, [sp, #16]
    b4e2:	f108 0801 	add.w	r8, r8, #1
    b4e6:	f898 1000 	ldrb.w	r1, [r8]
    b4ea:	4829      	ldr	r0, [pc, #164]	; (b590 <_vfiprintf_r+0x220>)
    b4ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    b4f0:	2206      	movs	r2, #6
    b4f2:	f108 0701 	add.w	r7, r8, #1
    b4f6:	f000 fa83 	bl	ba00 <memchr>
    b4fa:	2800      	cmp	r0, #0
    b4fc:	d034      	beq.n	b568 <_vfiprintf_r+0x1f8>
    b4fe:	4b25      	ldr	r3, [pc, #148]	; (b594 <_vfiprintf_r+0x224>)
    b500:	bb03      	cbnz	r3, b544 <_vfiprintf_r+0x1d4>
    b502:	9b03      	ldr	r3, [sp, #12]
    b504:	3307      	adds	r3, #7
    b506:	f023 0307 	bic.w	r3, r3, #7
    b50a:	3308      	adds	r3, #8
    b50c:	9303      	str	r3, [sp, #12]
    b50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b510:	444b      	add	r3, r9
    b512:	9309      	str	r3, [sp, #36]	; 0x24
    b514:	e74c      	b.n	b3b0 <_vfiprintf_r+0x40>
    b516:	fb00 3202 	mla	r2, r0, r2, r3
    b51a:	2101      	movs	r1, #1
    b51c:	e786      	b.n	b42c <_vfiprintf_r+0xbc>
    b51e:	2300      	movs	r3, #0
    b520:	9305      	str	r3, [sp, #20]
    b522:	4618      	mov	r0, r3
    b524:	250a      	movs	r5, #10
    b526:	4688      	mov	r8, r1
    b528:	3101      	adds	r1, #1
    b52a:	f898 2000 	ldrb.w	r2, [r8]
    b52e:	3a30      	subs	r2, #48	; 0x30
    b530:	2a09      	cmp	r2, #9
    b532:	d903      	bls.n	b53c <_vfiprintf_r+0x1cc>
    b534:	2b00      	cmp	r3, #0
    b536:	d0c5      	beq.n	b4c4 <_vfiprintf_r+0x154>
    b538:	9005      	str	r0, [sp, #20]
    b53a:	e7c3      	b.n	b4c4 <_vfiprintf_r+0x154>
    b53c:	fb05 2000 	mla	r0, r5, r0, r2
    b540:	2301      	movs	r3, #1
    b542:	e7f0      	b.n	b526 <_vfiprintf_r+0x1b6>
    b544:	ab03      	add	r3, sp, #12
    b546:	9300      	str	r3, [sp, #0]
    b548:	4622      	mov	r2, r4
    b54a:	4b13      	ldr	r3, [pc, #76]	; (b598 <_vfiprintf_r+0x228>)
    b54c:	a904      	add	r1, sp, #16
    b54e:	4630      	mov	r0, r6
    b550:	f3af 8000 	nop.w
    b554:	f1b0 3fff 	cmp.w	r0, #4294967295
    b558:	4681      	mov	r9, r0
    b55a:	d1d8      	bne.n	b50e <_vfiprintf_r+0x19e>
    b55c:	89a3      	ldrh	r3, [r4, #12]
    b55e:	065b      	lsls	r3, r3, #25
    b560:	f53f af7d 	bmi.w	b45e <_vfiprintf_r+0xee>
    b564:	9809      	ldr	r0, [sp, #36]	; 0x24
    b566:	e77c      	b.n	b462 <_vfiprintf_r+0xf2>
    b568:	ab03      	add	r3, sp, #12
    b56a:	9300      	str	r3, [sp, #0]
    b56c:	4622      	mov	r2, r4
    b56e:	4b0a      	ldr	r3, [pc, #40]	; (b598 <_vfiprintf_r+0x228>)
    b570:	a904      	add	r1, sp, #16
    b572:	4630      	mov	r0, r6
    b574:	f000 f888 	bl	b688 <_printf_i>
    b578:	e7ec      	b.n	b554 <_vfiprintf_r+0x1e4>
    b57a:	bf00      	nop
    b57c:	0000c1a4 	.word	0x0000c1a4
    b580:	0000c1e4 	.word	0x0000c1e4
    b584:	0000c1c4 	.word	0x0000c1c4
    b588:	0000c184 	.word	0x0000c184
    b58c:	0000c1ea 	.word	0x0000c1ea
    b590:	0000c1ee 	.word	0x0000c1ee
    b594:	00000000 	.word	0x00000000
    b598:	0000b34d 	.word	0x0000b34d

0000b59c <_printf_common>:
    b59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5a0:	4691      	mov	r9, r2
    b5a2:	461f      	mov	r7, r3
    b5a4:	688a      	ldr	r2, [r1, #8]
    b5a6:	690b      	ldr	r3, [r1, #16]
    b5a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    b5ac:	4293      	cmp	r3, r2
    b5ae:	bfb8      	it	lt
    b5b0:	4613      	movlt	r3, r2
    b5b2:	f8c9 3000 	str.w	r3, [r9]
    b5b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    b5ba:	4606      	mov	r6, r0
    b5bc:	460c      	mov	r4, r1
    b5be:	b112      	cbz	r2, b5c6 <_printf_common+0x2a>
    b5c0:	3301      	adds	r3, #1
    b5c2:	f8c9 3000 	str.w	r3, [r9]
    b5c6:	6823      	ldr	r3, [r4, #0]
    b5c8:	0699      	lsls	r1, r3, #26
    b5ca:	bf42      	ittt	mi
    b5cc:	f8d9 3000 	ldrmi.w	r3, [r9]
    b5d0:	3302      	addmi	r3, #2
    b5d2:	f8c9 3000 	strmi.w	r3, [r9]
    b5d6:	6825      	ldr	r5, [r4, #0]
    b5d8:	f015 0506 	ands.w	r5, r5, #6
    b5dc:	d107      	bne.n	b5ee <_printf_common+0x52>
    b5de:	f104 0a19 	add.w	sl, r4, #25
    b5e2:	68e3      	ldr	r3, [r4, #12]
    b5e4:	f8d9 2000 	ldr.w	r2, [r9]
    b5e8:	1a9b      	subs	r3, r3, r2
    b5ea:	429d      	cmp	r5, r3
    b5ec:	db29      	blt.n	b642 <_printf_common+0xa6>
    b5ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    b5f2:	6822      	ldr	r2, [r4, #0]
    b5f4:	3300      	adds	r3, #0
    b5f6:	bf18      	it	ne
    b5f8:	2301      	movne	r3, #1
    b5fa:	0692      	lsls	r2, r2, #26
    b5fc:	d42e      	bmi.n	b65c <_printf_common+0xc0>
    b5fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
    b602:	4639      	mov	r1, r7
    b604:	4630      	mov	r0, r6
    b606:	47c0      	blx	r8
    b608:	3001      	adds	r0, #1
    b60a:	d021      	beq.n	b650 <_printf_common+0xb4>
    b60c:	6823      	ldr	r3, [r4, #0]
    b60e:	68e5      	ldr	r5, [r4, #12]
    b610:	f8d9 2000 	ldr.w	r2, [r9]
    b614:	f003 0306 	and.w	r3, r3, #6
    b618:	2b04      	cmp	r3, #4
    b61a:	bf08      	it	eq
    b61c:	1aad      	subeq	r5, r5, r2
    b61e:	68a3      	ldr	r3, [r4, #8]
    b620:	6922      	ldr	r2, [r4, #16]
    b622:	bf0c      	ite	eq
    b624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    b628:	2500      	movne	r5, #0
    b62a:	4293      	cmp	r3, r2
    b62c:	bfc4      	itt	gt
    b62e:	1a9b      	subgt	r3, r3, r2
    b630:	18ed      	addgt	r5, r5, r3
    b632:	f04f 0900 	mov.w	r9, #0
    b636:	341a      	adds	r4, #26
    b638:	454d      	cmp	r5, r9
    b63a:	d11b      	bne.n	b674 <_printf_common+0xd8>
    b63c:	2000      	movs	r0, #0
    b63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b642:	2301      	movs	r3, #1
    b644:	4652      	mov	r2, sl
    b646:	4639      	mov	r1, r7
    b648:	4630      	mov	r0, r6
    b64a:	47c0      	blx	r8
    b64c:	3001      	adds	r0, #1
    b64e:	d103      	bne.n	b658 <_printf_common+0xbc>
    b650:	f04f 30ff 	mov.w	r0, #4294967295
    b654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b658:	3501      	adds	r5, #1
    b65a:	e7c2      	b.n	b5e2 <_printf_common+0x46>
    b65c:	18e1      	adds	r1, r4, r3
    b65e:	1c5a      	adds	r2, r3, #1
    b660:	2030      	movs	r0, #48	; 0x30
    b662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    b666:	4422      	add	r2, r4
    b668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    b66c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    b670:	3302      	adds	r3, #2
    b672:	e7c4      	b.n	b5fe <_printf_common+0x62>
    b674:	2301      	movs	r3, #1
    b676:	4622      	mov	r2, r4
    b678:	4639      	mov	r1, r7
    b67a:	4630      	mov	r0, r6
    b67c:	47c0      	blx	r8
    b67e:	3001      	adds	r0, #1
    b680:	d0e6      	beq.n	b650 <_printf_common+0xb4>
    b682:	f109 0901 	add.w	r9, r9, #1
    b686:	e7d7      	b.n	b638 <_printf_common+0x9c>

0000b688 <_printf_i>:
    b688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b68c:	4617      	mov	r7, r2
    b68e:	7e0a      	ldrb	r2, [r1, #24]
    b690:	b085      	sub	sp, #20
    b692:	2a6e      	cmp	r2, #110	; 0x6e
    b694:	4698      	mov	r8, r3
    b696:	4606      	mov	r6, r0
    b698:	460c      	mov	r4, r1
    b69a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b69c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    b6a0:	f000 80bc 	beq.w	b81c <_printf_i+0x194>
    b6a4:	d81a      	bhi.n	b6dc <_printf_i+0x54>
    b6a6:	2a63      	cmp	r2, #99	; 0x63
    b6a8:	d02e      	beq.n	b708 <_printf_i+0x80>
    b6aa:	d80a      	bhi.n	b6c2 <_printf_i+0x3a>
    b6ac:	2a00      	cmp	r2, #0
    b6ae:	f000 80c8 	beq.w	b842 <_printf_i+0x1ba>
    b6b2:	2a58      	cmp	r2, #88	; 0x58
    b6b4:	f000 808a 	beq.w	b7cc <_printf_i+0x144>
    b6b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    b6bc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    b6c0:	e02a      	b.n	b718 <_printf_i+0x90>
    b6c2:	2a64      	cmp	r2, #100	; 0x64
    b6c4:	d001      	beq.n	b6ca <_printf_i+0x42>
    b6c6:	2a69      	cmp	r2, #105	; 0x69
    b6c8:	d1f6      	bne.n	b6b8 <_printf_i+0x30>
    b6ca:	6821      	ldr	r1, [r4, #0]
    b6cc:	681a      	ldr	r2, [r3, #0]
    b6ce:	f011 0f80 	tst.w	r1, #128	; 0x80
    b6d2:	d023      	beq.n	b71c <_printf_i+0x94>
    b6d4:	1d11      	adds	r1, r2, #4
    b6d6:	6019      	str	r1, [r3, #0]
    b6d8:	6813      	ldr	r3, [r2, #0]
    b6da:	e027      	b.n	b72c <_printf_i+0xa4>
    b6dc:	2a73      	cmp	r2, #115	; 0x73
    b6de:	f000 80b4 	beq.w	b84a <_printf_i+0x1c2>
    b6e2:	d808      	bhi.n	b6f6 <_printf_i+0x6e>
    b6e4:	2a6f      	cmp	r2, #111	; 0x6f
    b6e6:	d02a      	beq.n	b73e <_printf_i+0xb6>
    b6e8:	2a70      	cmp	r2, #112	; 0x70
    b6ea:	d1e5      	bne.n	b6b8 <_printf_i+0x30>
    b6ec:	680a      	ldr	r2, [r1, #0]
    b6ee:	f042 0220 	orr.w	r2, r2, #32
    b6f2:	600a      	str	r2, [r1, #0]
    b6f4:	e003      	b.n	b6fe <_printf_i+0x76>
    b6f6:	2a75      	cmp	r2, #117	; 0x75
    b6f8:	d021      	beq.n	b73e <_printf_i+0xb6>
    b6fa:	2a78      	cmp	r2, #120	; 0x78
    b6fc:	d1dc      	bne.n	b6b8 <_printf_i+0x30>
    b6fe:	2278      	movs	r2, #120	; 0x78
    b700:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    b704:	496e      	ldr	r1, [pc, #440]	; (b8c0 <_printf_i+0x238>)
    b706:	e064      	b.n	b7d2 <_printf_i+0x14a>
    b708:	681a      	ldr	r2, [r3, #0]
    b70a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    b70e:	1d11      	adds	r1, r2, #4
    b710:	6019      	str	r1, [r3, #0]
    b712:	6813      	ldr	r3, [r2, #0]
    b714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    b718:	2301      	movs	r3, #1
    b71a:	e0a3      	b.n	b864 <_printf_i+0x1dc>
    b71c:	f011 0f40 	tst.w	r1, #64	; 0x40
    b720:	f102 0104 	add.w	r1, r2, #4
    b724:	6019      	str	r1, [r3, #0]
    b726:	d0d7      	beq.n	b6d8 <_printf_i+0x50>
    b728:	f9b2 3000 	ldrsh.w	r3, [r2]
    b72c:	2b00      	cmp	r3, #0
    b72e:	da03      	bge.n	b738 <_printf_i+0xb0>
    b730:	222d      	movs	r2, #45	; 0x2d
    b732:	425b      	negs	r3, r3
    b734:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    b738:	4962      	ldr	r1, [pc, #392]	; (b8c4 <_printf_i+0x23c>)
    b73a:	220a      	movs	r2, #10
    b73c:	e017      	b.n	b76e <_printf_i+0xe6>
    b73e:	6820      	ldr	r0, [r4, #0]
    b740:	6819      	ldr	r1, [r3, #0]
    b742:	f010 0f80 	tst.w	r0, #128	; 0x80
    b746:	d003      	beq.n	b750 <_printf_i+0xc8>
    b748:	1d08      	adds	r0, r1, #4
    b74a:	6018      	str	r0, [r3, #0]
    b74c:	680b      	ldr	r3, [r1, #0]
    b74e:	e006      	b.n	b75e <_printf_i+0xd6>
    b750:	f010 0f40 	tst.w	r0, #64	; 0x40
    b754:	f101 0004 	add.w	r0, r1, #4
    b758:	6018      	str	r0, [r3, #0]
    b75a:	d0f7      	beq.n	b74c <_printf_i+0xc4>
    b75c:	880b      	ldrh	r3, [r1, #0]
    b75e:	4959      	ldr	r1, [pc, #356]	; (b8c4 <_printf_i+0x23c>)
    b760:	2a6f      	cmp	r2, #111	; 0x6f
    b762:	bf14      	ite	ne
    b764:	220a      	movne	r2, #10
    b766:	2208      	moveq	r2, #8
    b768:	2000      	movs	r0, #0
    b76a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    b76e:	6865      	ldr	r5, [r4, #4]
    b770:	60a5      	str	r5, [r4, #8]
    b772:	2d00      	cmp	r5, #0
    b774:	f2c0 809c 	blt.w	b8b0 <_printf_i+0x228>
    b778:	6820      	ldr	r0, [r4, #0]
    b77a:	f020 0004 	bic.w	r0, r0, #4
    b77e:	6020      	str	r0, [r4, #0]
    b780:	2b00      	cmp	r3, #0
    b782:	d13f      	bne.n	b804 <_printf_i+0x17c>
    b784:	2d00      	cmp	r5, #0
    b786:	f040 8095 	bne.w	b8b4 <_printf_i+0x22c>
    b78a:	4675      	mov	r5, lr
    b78c:	2a08      	cmp	r2, #8
    b78e:	d10b      	bne.n	b7a8 <_printf_i+0x120>
    b790:	6823      	ldr	r3, [r4, #0]
    b792:	07da      	lsls	r2, r3, #31
    b794:	d508      	bpl.n	b7a8 <_printf_i+0x120>
    b796:	6923      	ldr	r3, [r4, #16]
    b798:	6862      	ldr	r2, [r4, #4]
    b79a:	429a      	cmp	r2, r3
    b79c:	bfde      	ittt	le
    b79e:	2330      	movle	r3, #48	; 0x30
    b7a0:	f805 3c01 	strble.w	r3, [r5, #-1]
    b7a4:	f105 35ff 	addle.w	r5, r5, #4294967295
    b7a8:	ebae 0305 	sub.w	r3, lr, r5
    b7ac:	6123      	str	r3, [r4, #16]
    b7ae:	f8cd 8000 	str.w	r8, [sp]
    b7b2:	463b      	mov	r3, r7
    b7b4:	aa03      	add	r2, sp, #12
    b7b6:	4621      	mov	r1, r4
    b7b8:	4630      	mov	r0, r6
    b7ba:	f7ff feef 	bl	b59c <_printf_common>
    b7be:	3001      	adds	r0, #1
    b7c0:	d155      	bne.n	b86e <_printf_i+0x1e6>
    b7c2:	f04f 30ff 	mov.w	r0, #4294967295
    b7c6:	b005      	add	sp, #20
    b7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b7cc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    b7d0:	493c      	ldr	r1, [pc, #240]	; (b8c4 <_printf_i+0x23c>)
    b7d2:	6822      	ldr	r2, [r4, #0]
    b7d4:	6818      	ldr	r0, [r3, #0]
    b7d6:	f012 0f80 	tst.w	r2, #128	; 0x80
    b7da:	f100 0504 	add.w	r5, r0, #4
    b7de:	601d      	str	r5, [r3, #0]
    b7e0:	d001      	beq.n	b7e6 <_printf_i+0x15e>
    b7e2:	6803      	ldr	r3, [r0, #0]
    b7e4:	e002      	b.n	b7ec <_printf_i+0x164>
    b7e6:	0655      	lsls	r5, r2, #25
    b7e8:	d5fb      	bpl.n	b7e2 <_printf_i+0x15a>
    b7ea:	8803      	ldrh	r3, [r0, #0]
    b7ec:	07d0      	lsls	r0, r2, #31
    b7ee:	bf44      	itt	mi
    b7f0:	f042 0220 	orrmi.w	r2, r2, #32
    b7f4:	6022      	strmi	r2, [r4, #0]
    b7f6:	b91b      	cbnz	r3, b800 <_printf_i+0x178>
    b7f8:	6822      	ldr	r2, [r4, #0]
    b7fa:	f022 0220 	bic.w	r2, r2, #32
    b7fe:	6022      	str	r2, [r4, #0]
    b800:	2210      	movs	r2, #16
    b802:	e7b1      	b.n	b768 <_printf_i+0xe0>
    b804:	4675      	mov	r5, lr
    b806:	fbb3 f0f2 	udiv	r0, r3, r2
    b80a:	fb02 3310 	mls	r3, r2, r0, r3
    b80e:	5ccb      	ldrb	r3, [r1, r3]
    b810:	f805 3d01 	strb.w	r3, [r5, #-1]!
    b814:	4603      	mov	r3, r0
    b816:	2800      	cmp	r0, #0
    b818:	d1f5      	bne.n	b806 <_printf_i+0x17e>
    b81a:	e7b7      	b.n	b78c <_printf_i+0x104>
    b81c:	6808      	ldr	r0, [r1, #0]
    b81e:	681a      	ldr	r2, [r3, #0]
    b820:	6949      	ldr	r1, [r1, #20]
    b822:	f010 0f80 	tst.w	r0, #128	; 0x80
    b826:	d004      	beq.n	b832 <_printf_i+0x1aa>
    b828:	1d10      	adds	r0, r2, #4
    b82a:	6018      	str	r0, [r3, #0]
    b82c:	6813      	ldr	r3, [r2, #0]
    b82e:	6019      	str	r1, [r3, #0]
    b830:	e007      	b.n	b842 <_printf_i+0x1ba>
    b832:	f010 0f40 	tst.w	r0, #64	; 0x40
    b836:	f102 0004 	add.w	r0, r2, #4
    b83a:	6018      	str	r0, [r3, #0]
    b83c:	6813      	ldr	r3, [r2, #0]
    b83e:	d0f6      	beq.n	b82e <_printf_i+0x1a6>
    b840:	8019      	strh	r1, [r3, #0]
    b842:	2300      	movs	r3, #0
    b844:	6123      	str	r3, [r4, #16]
    b846:	4675      	mov	r5, lr
    b848:	e7b1      	b.n	b7ae <_printf_i+0x126>
    b84a:	681a      	ldr	r2, [r3, #0]
    b84c:	1d11      	adds	r1, r2, #4
    b84e:	6019      	str	r1, [r3, #0]
    b850:	6815      	ldr	r5, [r2, #0]
    b852:	6862      	ldr	r2, [r4, #4]
    b854:	2100      	movs	r1, #0
    b856:	4628      	mov	r0, r5
    b858:	f000 f8d2 	bl	ba00 <memchr>
    b85c:	b108      	cbz	r0, b862 <_printf_i+0x1da>
    b85e:	1b40      	subs	r0, r0, r5
    b860:	6060      	str	r0, [r4, #4]
    b862:	6863      	ldr	r3, [r4, #4]
    b864:	6123      	str	r3, [r4, #16]
    b866:	2300      	movs	r3, #0
    b868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    b86c:	e79f      	b.n	b7ae <_printf_i+0x126>
    b86e:	6923      	ldr	r3, [r4, #16]
    b870:	462a      	mov	r2, r5
    b872:	4639      	mov	r1, r7
    b874:	4630      	mov	r0, r6
    b876:	47c0      	blx	r8
    b878:	3001      	adds	r0, #1
    b87a:	d0a2      	beq.n	b7c2 <_printf_i+0x13a>
    b87c:	6823      	ldr	r3, [r4, #0]
    b87e:	079b      	lsls	r3, r3, #30
    b880:	d507      	bpl.n	b892 <_printf_i+0x20a>
    b882:	2500      	movs	r5, #0
    b884:	f104 0919 	add.w	r9, r4, #25
    b888:	68e3      	ldr	r3, [r4, #12]
    b88a:	9a03      	ldr	r2, [sp, #12]
    b88c:	1a9b      	subs	r3, r3, r2
    b88e:	429d      	cmp	r5, r3
    b890:	db05      	blt.n	b89e <_printf_i+0x216>
    b892:	68e0      	ldr	r0, [r4, #12]
    b894:	9b03      	ldr	r3, [sp, #12]
    b896:	4298      	cmp	r0, r3
    b898:	bfb8      	it	lt
    b89a:	4618      	movlt	r0, r3
    b89c:	e793      	b.n	b7c6 <_printf_i+0x13e>
    b89e:	2301      	movs	r3, #1
    b8a0:	464a      	mov	r2, r9
    b8a2:	4639      	mov	r1, r7
    b8a4:	4630      	mov	r0, r6
    b8a6:	47c0      	blx	r8
    b8a8:	3001      	adds	r0, #1
    b8aa:	d08a      	beq.n	b7c2 <_printf_i+0x13a>
    b8ac:	3501      	adds	r5, #1
    b8ae:	e7eb      	b.n	b888 <_printf_i+0x200>
    b8b0:	2b00      	cmp	r3, #0
    b8b2:	d1a7      	bne.n	b804 <_printf_i+0x17c>
    b8b4:	780b      	ldrb	r3, [r1, #0]
    b8b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    b8ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
    b8be:	e765      	b.n	b78c <_printf_i+0x104>
    b8c0:	0000c206 	.word	0x0000c206
    b8c4:	0000c1f5 	.word	0x0000c1f5

0000b8c8 <__sread>:
    b8c8:	b510      	push	{r4, lr}
    b8ca:	460c      	mov	r4, r1
    b8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b8d0:	f000 f8e6 	bl	baa0 <_read_r>
    b8d4:	2800      	cmp	r0, #0
    b8d6:	bfab      	itete	ge
    b8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    b8da:	89a3      	ldrhlt	r3, [r4, #12]
    b8dc:	181b      	addge	r3, r3, r0
    b8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    b8e2:	bfac      	ite	ge
    b8e4:	6563      	strge	r3, [r4, #84]	; 0x54
    b8e6:	81a3      	strhlt	r3, [r4, #12]
    b8e8:	bd10      	pop	{r4, pc}

0000b8ea <__swrite>:
    b8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8ee:	461f      	mov	r7, r3
    b8f0:	898b      	ldrh	r3, [r1, #12]
    b8f2:	05db      	lsls	r3, r3, #23
    b8f4:	4605      	mov	r5, r0
    b8f6:	460c      	mov	r4, r1
    b8f8:	4616      	mov	r6, r2
    b8fa:	d505      	bpl.n	b908 <__swrite+0x1e>
    b8fc:	2302      	movs	r3, #2
    b8fe:	2200      	movs	r2, #0
    b900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b904:	f000 f868 	bl	b9d8 <_lseek_r>
    b908:	89a3      	ldrh	r3, [r4, #12]
    b90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b90e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b912:	81a3      	strh	r3, [r4, #12]
    b914:	4632      	mov	r2, r6
    b916:	463b      	mov	r3, r7
    b918:	4628      	mov	r0, r5
    b91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b91e:	f000 b817 	b.w	b950 <_write_r>

0000b922 <__sseek>:
    b922:	b510      	push	{r4, lr}
    b924:	460c      	mov	r4, r1
    b926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b92a:	f000 f855 	bl	b9d8 <_lseek_r>
    b92e:	1c43      	adds	r3, r0, #1
    b930:	89a3      	ldrh	r3, [r4, #12]
    b932:	bf15      	itete	ne
    b934:	6560      	strne	r0, [r4, #84]	; 0x54
    b936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b93e:	81a3      	strheq	r3, [r4, #12]
    b940:	bf18      	it	ne
    b942:	81a3      	strhne	r3, [r4, #12]
    b944:	bd10      	pop	{r4, pc}

0000b946 <__sclose>:
    b946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b94a:	f000 b813 	b.w	b974 <_close_r>
	...

0000b950 <_write_r>:
    b950:	b538      	push	{r3, r4, r5, lr}
    b952:	4c07      	ldr	r4, [pc, #28]	; (b970 <_write_r+0x20>)
    b954:	4605      	mov	r5, r0
    b956:	4608      	mov	r0, r1
    b958:	4611      	mov	r1, r2
    b95a:	2200      	movs	r2, #0
    b95c:	6022      	str	r2, [r4, #0]
    b95e:	461a      	mov	r2, r3
    b960:	f7fe f866 	bl	9a30 <_write>
    b964:	1c43      	adds	r3, r0, #1
    b966:	d102      	bne.n	b96e <_write_r+0x1e>
    b968:	6823      	ldr	r3, [r4, #0]
    b96a:	b103      	cbz	r3, b96e <_write_r+0x1e>
    b96c:	602b      	str	r3, [r5, #0]
    b96e:	bd38      	pop	{r3, r4, r5, pc}
    b970:	20003500 	.word	0x20003500

0000b974 <_close_r>:
    b974:	b538      	push	{r3, r4, r5, lr}
    b976:	4c06      	ldr	r4, [pc, #24]	; (b990 <_close_r+0x1c>)
    b978:	2300      	movs	r3, #0
    b97a:	4605      	mov	r5, r0
    b97c:	4608      	mov	r0, r1
    b97e:	6023      	str	r3, [r4, #0]
    b980:	f7fa ff7a 	bl	6878 <_close>
    b984:	1c43      	adds	r3, r0, #1
    b986:	d102      	bne.n	b98e <_close_r+0x1a>
    b988:	6823      	ldr	r3, [r4, #0]
    b98a:	b103      	cbz	r3, b98e <_close_r+0x1a>
    b98c:	602b      	str	r3, [r5, #0]
    b98e:	bd38      	pop	{r3, r4, r5, pc}
    b990:	20003500 	.word	0x20003500

0000b994 <_fstat_r>:
    b994:	b538      	push	{r3, r4, r5, lr}
    b996:	4c07      	ldr	r4, [pc, #28]	; (b9b4 <_fstat_r+0x20>)
    b998:	2300      	movs	r3, #0
    b99a:	4605      	mov	r5, r0
    b99c:	4608      	mov	r0, r1
    b99e:	4611      	mov	r1, r2
    b9a0:	6023      	str	r3, [r4, #0]
    b9a2:	f7fa ff6c 	bl	687e <_fstat>
    b9a6:	1c43      	adds	r3, r0, #1
    b9a8:	d102      	bne.n	b9b0 <_fstat_r+0x1c>
    b9aa:	6823      	ldr	r3, [r4, #0]
    b9ac:	b103      	cbz	r3, b9b0 <_fstat_r+0x1c>
    b9ae:	602b      	str	r3, [r5, #0]
    b9b0:	bd38      	pop	{r3, r4, r5, pc}
    b9b2:	bf00      	nop
    b9b4:	20003500 	.word	0x20003500

0000b9b8 <_isatty_r>:
    b9b8:	b538      	push	{r3, r4, r5, lr}
    b9ba:	4c06      	ldr	r4, [pc, #24]	; (b9d4 <_isatty_r+0x1c>)
    b9bc:	2300      	movs	r3, #0
    b9be:	4605      	mov	r5, r0
    b9c0:	4608      	mov	r0, r1
    b9c2:	6023      	str	r3, [r4, #0]
    b9c4:	f7fa ff60 	bl	6888 <_isatty>
    b9c8:	1c43      	adds	r3, r0, #1
    b9ca:	d102      	bne.n	b9d2 <_isatty_r+0x1a>
    b9cc:	6823      	ldr	r3, [r4, #0]
    b9ce:	b103      	cbz	r3, b9d2 <_isatty_r+0x1a>
    b9d0:	602b      	str	r3, [r5, #0]
    b9d2:	bd38      	pop	{r3, r4, r5, pc}
    b9d4:	20003500 	.word	0x20003500

0000b9d8 <_lseek_r>:
    b9d8:	b538      	push	{r3, r4, r5, lr}
    b9da:	4c07      	ldr	r4, [pc, #28]	; (b9f8 <_lseek_r+0x20>)
    b9dc:	4605      	mov	r5, r0
    b9de:	4608      	mov	r0, r1
    b9e0:	4611      	mov	r1, r2
    b9e2:	2200      	movs	r2, #0
    b9e4:	6022      	str	r2, [r4, #0]
    b9e6:	461a      	mov	r2, r3
    b9e8:	f7fa ff50 	bl	688c <_lseek>
    b9ec:	1c43      	adds	r3, r0, #1
    b9ee:	d102      	bne.n	b9f6 <_lseek_r+0x1e>
    b9f0:	6823      	ldr	r3, [r4, #0]
    b9f2:	b103      	cbz	r3, b9f6 <_lseek_r+0x1e>
    b9f4:	602b      	str	r3, [r5, #0]
    b9f6:	bd38      	pop	{r3, r4, r5, pc}
    b9f8:	20003500 	.word	0x20003500
    b9fc:	00000000 	.word	0x00000000

0000ba00 <memchr>:
    ba00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ba04:	2a10      	cmp	r2, #16
    ba06:	db2b      	blt.n	ba60 <memchr+0x60>
    ba08:	f010 0f07 	tst.w	r0, #7
    ba0c:	d008      	beq.n	ba20 <memchr+0x20>
    ba0e:	f810 3b01 	ldrb.w	r3, [r0], #1
    ba12:	3a01      	subs	r2, #1
    ba14:	428b      	cmp	r3, r1
    ba16:	d02d      	beq.n	ba74 <memchr+0x74>
    ba18:	f010 0f07 	tst.w	r0, #7
    ba1c:	b342      	cbz	r2, ba70 <memchr+0x70>
    ba1e:	d1f6      	bne.n	ba0e <memchr+0xe>
    ba20:	b4f0      	push	{r4, r5, r6, r7}
    ba22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ba26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ba2a:	f022 0407 	bic.w	r4, r2, #7
    ba2e:	f07f 0700 	mvns.w	r7, #0
    ba32:	2300      	movs	r3, #0
    ba34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    ba38:	3c08      	subs	r4, #8
    ba3a:	ea85 0501 	eor.w	r5, r5, r1
    ba3e:	ea86 0601 	eor.w	r6, r6, r1
    ba42:	fa85 f547 	uadd8	r5, r5, r7
    ba46:	faa3 f587 	sel	r5, r3, r7
    ba4a:	fa86 f647 	uadd8	r6, r6, r7
    ba4e:	faa5 f687 	sel	r6, r5, r7
    ba52:	b98e      	cbnz	r6, ba78 <memchr+0x78>
    ba54:	d1ee      	bne.n	ba34 <memchr+0x34>
    ba56:	bcf0      	pop	{r4, r5, r6, r7}
    ba58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ba5c:	f002 0207 	and.w	r2, r2, #7
    ba60:	b132      	cbz	r2, ba70 <memchr+0x70>
    ba62:	f810 3b01 	ldrb.w	r3, [r0], #1
    ba66:	3a01      	subs	r2, #1
    ba68:	ea83 0301 	eor.w	r3, r3, r1
    ba6c:	b113      	cbz	r3, ba74 <memchr+0x74>
    ba6e:	d1f8      	bne.n	ba62 <memchr+0x62>
    ba70:	2000      	movs	r0, #0
    ba72:	4770      	bx	lr
    ba74:	3801      	subs	r0, #1
    ba76:	4770      	bx	lr
    ba78:	2d00      	cmp	r5, #0
    ba7a:	bf06      	itte	eq
    ba7c:	4635      	moveq	r5, r6
    ba7e:	3803      	subeq	r0, #3
    ba80:	3807      	subne	r0, #7
    ba82:	f015 0f01 	tst.w	r5, #1
    ba86:	d107      	bne.n	ba98 <memchr+0x98>
    ba88:	3001      	adds	r0, #1
    ba8a:	f415 7f80 	tst.w	r5, #256	; 0x100
    ba8e:	bf02      	ittt	eq
    ba90:	3001      	addeq	r0, #1
    ba92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    ba96:	3001      	addeq	r0, #1
    ba98:	bcf0      	pop	{r4, r5, r6, r7}
    ba9a:	3801      	subs	r0, #1
    ba9c:	4770      	bx	lr
    ba9e:	bf00      	nop

0000baa0 <_read_r>:
    baa0:	b538      	push	{r3, r4, r5, lr}
    baa2:	4c07      	ldr	r4, [pc, #28]	; (bac0 <_read_r+0x20>)
    baa4:	4605      	mov	r5, r0
    baa6:	4608      	mov	r0, r1
    baa8:	4611      	mov	r1, r2
    baaa:	2200      	movs	r2, #0
    baac:	6022      	str	r2, [r4, #0]
    baae:	461a      	mov	r2, r3
    bab0:	f7fd ffae 	bl	9a10 <_read>
    bab4:	1c43      	adds	r3, r0, #1
    bab6:	d102      	bne.n	babe <_read_r+0x1e>
    bab8:	6823      	ldr	r3, [r4, #0]
    baba:	b103      	cbz	r3, babe <_read_r+0x1e>
    babc:	602b      	str	r3, [r5, #0]
    babe:	bd38      	pop	{r3, r4, r5, pc}
    bac0:	20003500 	.word	0x20003500
    bac4:	64726148 	.word	0x64726148
    bac8:	65726177 	.word	0x65726177
    bacc:	73655420 	.word	0x73655420
    bad0:	6e492074 	.word	0x6e492074
    bad4:	00007469 	.word	0x00007469

0000bad8 <_adcs>:
    bad8:	01000000 0003000c 00041807 00000000     ................
    bae8:	0014080b 00010000 000c0100 18040003     ................
    baf8:	00000004 080b0000 00000014              ............

0000bb04 <_cfgs>:
    bb04:	00200600 08068000 00200400 08068000     .. ....... .....
    bb14:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    bb34:	00200b00 14000003 00200a00 08000002     .. ....... .....
    bb44:	00201300 14000003 00000000 00000000     .. .............
	...
    bbf4:	00005400 1c000000 00005300 0c000000     .T.......S......

0000bc04 <user_mux_confs>:
	...
    bc30:	04030201 04030201 00000000 00000000     ................
	...

0000bc48 <channel_confs>:
    bc48:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000bc88 <interrupt_cfg>:
    bc88:	00000002 00000002 00000002 00000002     ................
	...
    bd08:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    bd18:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000bd28 <_usarts>:
    bd28:	00000000 40100004 00030000 00700002     .......@......p.
    bd38:	0000aaaa 00000000 00000001 40100004     ...............@
    bd48:	00030000 00700002 0000aaaa 00000000     ......p.........
    bd58:	00000002 40100004 00030000 00700002     .......@......p.
    bd68:	00005555 00000000 00000004 40100004     UU.............@
    bd78:	00030000 00700002 0000aaaa 00000000     ......p.........
    bd88:	00000006 40100004 00030000 00700002     .......@......p.
    bd98:	0000aaaa 00000000                       ........

0000bda0 <_i2cms>:
    bda0:	00000005 00200014 00000100 0000e6e5     ...... .........
    bdb0:	00d70000 02dc6c00                       .....l..

0000bdb8 <sercomspi_regs>:
    bdb8:	3020000c 00020000 00000000 01ff0005     .. 0............
    bdc8:	20000c03 00000000 00000000 ff000600     ... ............
    bdd8:	00000701 40003800 40003c00 4101a000     .....8.@.<.@...A
    bde8:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    bdf8:	43001800                                ...C

0000bdfc <_tcs>:
    bdfc:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    be0c:	00000000 006c0001 00000308 00000021     ......l.....!...
    be1c:	00003a98 00000000 006d0002 00000308     .:........m.....
    be2c:	00000021 00003a98 00000000 006e0003     !....:........n.
    be3c:	00000308 00000021 00003a98 00000000     ....!....:......

0000be4c <_usb_ep_cfgs>:
    be4c:	20000824 00000000 00000040 00000000     $.. ....@.......
	...
    be64:	2000081c 00000000 00000008 200007dc     ... ........... 
    be74:	200007d4 00080040 00000000 00000000     ... @...........
	...
    be8c:	20000794 00400000 7974227b 3a226570     ... ..@.{"type":
    be9c:	52524522 2c22524f 61642220 3a226174     "ERROR", "data":
    beac:	54225b20 6f656d69 203a7475 63736944      ["Timeout: Disc
    bebc:	656e6e6f 5d227463 00000d7d 7974227b     onnect"]}...{"ty
    becc:	3a226570 41525422 202c2250 74616422     pe":"TRAP", "dat
    bedc:	203a2261 5254225b 22315041 000d7d5d     a": ["TRAP1"]}..
    beec:	7974227b 3a226570 41525422 202c2250     {"type":"TRAP", 
    befc:	74616422 203a2261 5254225b 22325041     "data": ["TRAP2"
    bf0c:	000d7d5d 7974227b 3a226570 52524522     ]}..{"type":"ERR
    bf1c:	2c22524f 61642220 3a226174 42225b20     OR", "data": ["B
    bf2c:	65666675 764f2072 75727265 7d5d226e     uffer Overrun"]}
    bf3c:	0000000d 7974227b 3a226570 41572220     ....{"type": "WA
    bf4c:	4e494e52 202c2247 74616422 203a2261     RNING", "data": 
    bf5c:	7246225b 20656d61 72617453 664f2074     ["Frame Start Of
    bf6c:	74657366 0d7d5d22 00000000 7974227b     fset"]}.....{"ty
    bf7c:	3a226570 41572220 4e494e52 202c2247     pe": "WARNING", 
    bf8c:	74616422 203a2261 6e55225b 776f6e6b     "data": ["Unknow
    bf9c:	73654d20 65676173 70795420 7d5d2265      Message Type"]}
    bfac:	0000000d 7974227b 3a226570 41572220     ....{"type": "WA
    bfbc:	4e494e52 202c2247 74616422 203a2261     RNING", "data": 
    bfcc:	6e49225b 696c6176 68432064 736b6365     ["Invalid Checks
    bfdc:	5d226d75 00000d7d 7974227b 3a226570     um"]}...{"type":
    bfec:	52452220 22524f52 6422202c 22617461      "ERROR", "data"
    bffc:	225b203a 6d617246 72452065 22726f72     : ["Frame Error"
    c00c:	000d7d5d 7974227b 3a226570 52452220     ]}..{"type": "ER
    c01c:	22524f52 6422202c 22617461 225b203a     ROR", "data": ["
    c02c:	69726150 45207974 726f7272 0d7d5d22     Parity Error"]}.
    c03c:	00000000 49505351 6f725020 6d617267     ....QSPI Program
    c04c:	61745320 64657472 00000d0a 73616c46      Started....Flas
    c05c:	72652068 20657361 63637573 66737365     h erase successf
    c06c:	0d0a6c75 00000000 73616c46 72772068     ul......Flash wr
    c07c:	20657469 63637573 66737365 0d0a6c75     ite successful..
    c08c:	00000000 73616c46 65722068 73206461     ....Flash read s
    c09c:	65636375 75667373 000d0a6c 73616c46     uccessful...Flas
    c0ac:	61642068 76206174 66697265 74616369     h data verificat
    c0bc:	206e6f69 6c696166 0a2e6465 0000000d     ion failed......
    c0cc:	74697257 202d2065 64616552 20736920     Write - Read is 
    c0dc:	63637573 66737365 69206c75 5351206e     successful in QS
    c0ec:	46204950 6873616c 6d656d20 2e79726f     PI Flash memory.
    c0fc:	00000d0a 74696e49 696c6169 6974617a     ....Initializati
    c10c:	000d6e6f                                on..

0000c110 <keyboard_report_desc>:
    c110:	06090105 070501a1 e729e019 01250015     ..........)...%.
    c120:	08950175 01810281 65290019 65250015     u.........)e..%e
    c130:	06950875 08050081 05290119 01250015     u.........)...%.
    c140:	05950175 03950291 00c00191              u...........

0000c14c <mouse_report_desc>:
    c14c:	02090105 010901a1 090500a1 03290119     ..............).
    c15c:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    c16c:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    c17c:	c0c00681                                ....

0000c180 <_global_impure_ptr>:
    c180:	2000005c                                \.. 

0000c184 <__sf_fake_stderr>:
	...

0000c1a4 <__sf_fake_stdin>:
	...

0000c1c4 <__sf_fake_stdout>:
	...
    c1e4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c1f4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c204:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c214:	00006665                                ef..

0000c218 <_init>:
    c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c21a:	bf00      	nop
    c21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c21e:	bc08      	pop	{r3}
    c220:	469e      	mov	lr, r3
    c222:	4770      	bx	lr

0000c224 <__init_array_start>:
    c224:	00004289 	.word	0x00004289

0000c228 <_fini>:
    c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c22a:	bf00      	nop
    c22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c22e:	bc08      	pop	{r3}
    c230:	469e      	mov	lr, r3
    c232:	4770      	bx	lr

0000c234 <__fini_array_start>:
    c234:	00004265 	.word	0x00004265
