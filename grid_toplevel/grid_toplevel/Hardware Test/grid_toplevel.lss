
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008248  00004000  00004000  00004000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  0000c248  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000100bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000100bc  2**0
                  CONTENTS
  4 .bss          000075e4  200000c0  0000c310  000100c0  2**4
                  ALLOC
  5 .stack        00010004  200076a4  000138f4  000100c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000100bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000100ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0006a5cf  00000000  00000000  00010143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000985c  00000000  00000000  0007a712  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027e9a  00000000  00000000  00083f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e20  00000000  00000000  000abe08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000028f8  00000000  00000000  000adc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040ad9  00000000  00000000  000b0520  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031999  00000000  00000000  000f0ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00119a53  00000000  00000000  00122992  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000053ec  00000000  00000000  0023c3e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	a8 76 01 20 f1 42 00 00 ed 42 00 00 ed 42 00 00     .v. .B...B...B..
    4010:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	ed 42 00 00 ed 42 00 00 00 00 00 00 ed 42 00 00     .B...B.......B..
    403c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    404c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    405c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    406c:	15 74 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .t...B...B...B..
    407c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    408c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    409c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40ac:	ed 42 00 00 ed 42 00 00 c5 70 00 00 d9 70 00 00     .B...B...p...p..
    40bc:	29 6f 00 00 35 6f 00 00 41 6f 00 00 4d 6f 00 00     )o..5o..Ao..Mo..
    40cc:	59 6f 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     Yo...B...B...B..
    40dc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	cd 72 00 00 65 7c 00 00 79 7c 00 00 8d 7c 00 00     .r..e|..y|...|..
    4104:	a1 7c 00 00 b5 7c 00 00 c9 7c 00 00 dd 7c 00 00     .|...|...|...|..
    4114:	f1 7c 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .|...B...B...B..
    4124:	ed 42 00 00 05 7d 00 00 19 7d 00 00 2d 7d 00 00     .B...}...}..-}..
    4134:	41 7d 00 00 55 7d 00 00 69 7d 00 00 7d 7d 00 00     A}..U}..i}..}}..
    4144:	91 7d 00 00 a5 7d 00 00 b9 7d 00 00 cd 7d 00 00     .}...}...}...}..
    4154:	e1 7d 00 00 f5 7d 00 00 09 7e 00 00 1d 7e 00 00     .}...}...~...~..
    4164:	31 7e 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     1~...B...B...B..
    4174:	ed 42 00 00 00 00 00 00 00 00 00 00 dd 99 00 00     .B..............
    4184:	e9 99 00 00 f5 99 00 00 01 9a 00 00 00 00 00 00     ................
    4194:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41a4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41b4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41c4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41d4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41e4:	ed 42 00 00 ed 42 00 00 71 87 00 00 85 87 00 00     .B...B..q.......
    41f4:	99 87 00 00 ad 87 00 00 ed 42 00 00 ed 42 00 00     .........B...B..
    4204:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4214:	ed 42 00 00 c5 6b 00 00 d9 6b 00 00 ed 6b 00 00     .B...k...k...k..
    4224:	01 6c 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .l...B...B...B..
    4234:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4244:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4254:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	200000c0 	.word	0x200000c0
    4280:	00000000 	.word	0x00000000
    4284:	0000c248 	.word	0x0000c248

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	0000c248 	.word	0x0000c248
    42c4:	200000c4 	.word	0x200000c4
    42c8:	0000c248 	.word	0x0000c248
    42cc:	00000000 	.word	0x00000000

000042d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    42d0:	b508      	push	{r3, lr}
	system_init();
    42d2:	4b03      	ldr	r3, [pc, #12]	; (42e0 <atmel_start_init+0x10>)
    42d4:	4798      	blx	r3
	usb_init();
    42d6:	4b03      	ldr	r3, [pc, #12]	; (42e4 <atmel_start_init+0x14>)
    42d8:	4798      	blx	r3
	stdio_redirect_init();
    42da:	4b03      	ldr	r3, [pc, #12]	; (42e8 <atmel_start_init+0x18>)
    42dc:	4798      	blx	r3
    42de:	bd08      	pop	{r3, pc}
    42e0:	00004e15 	.word	0x00004e15
    42e4:	0000aa05 	.word	0x0000aa05
    42e8:	00009b59 	.word	0x00009b59

000042ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42ec:	e7fe      	b.n	42ec <Dummy_Handler>
	...

000042f0 <Reset_Handler>:
{
    42f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    42f2:	4b1c      	ldr	r3, [pc, #112]	; (4364 <Reset_Handler+0x74>)
    42f4:	4a1c      	ldr	r2, [pc, #112]	; (4368 <Reset_Handler+0x78>)
    42f6:	429a      	cmp	r2, r3
    42f8:	d010      	beq.n	431c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    42fa:	4b1c      	ldr	r3, [pc, #112]	; (436c <Reset_Handler+0x7c>)
    42fc:	4a19      	ldr	r2, [pc, #100]	; (4364 <Reset_Handler+0x74>)
    42fe:	429a      	cmp	r2, r3
    4300:	d20c      	bcs.n	431c <Reset_Handler+0x2c>
    4302:	3b01      	subs	r3, #1
    4304:	1a9b      	subs	r3, r3, r2
    4306:	f023 0303 	bic.w	r3, r3, #3
    430a:	3304      	adds	r3, #4
    430c:	4413      	add	r3, r2
    430e:	4916      	ldr	r1, [pc, #88]	; (4368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    4310:	f851 0b04 	ldr.w	r0, [r1], #4
    4314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    4318:	429a      	cmp	r2, r3
    431a:	d1f9      	bne.n	4310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    431c:	4b14      	ldr	r3, [pc, #80]	; (4370 <Reset_Handler+0x80>)
    431e:	4a15      	ldr	r2, [pc, #84]	; (4374 <Reset_Handler+0x84>)
    4320:	429a      	cmp	r2, r3
    4322:	d20a      	bcs.n	433a <Reset_Handler+0x4a>
    4324:	3b01      	subs	r3, #1
    4326:	1a9b      	subs	r3, r3, r2
    4328:	f023 0303 	bic.w	r3, r3, #3
    432c:	3304      	adds	r3, #4
    432e:	4413      	add	r3, r2
                *pDest++ = 0;
    4330:	2100      	movs	r1, #0
    4332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    4336:	4293      	cmp	r3, r2
    4338:	d1fb      	bne.n	4332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    433a:	4b0f      	ldr	r3, [pc, #60]	; (4378 <Reset_Handler+0x88>)
    433c:	4a0f      	ldr	r2, [pc, #60]	; (437c <Reset_Handler+0x8c>)
    433e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    4344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    434c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    4358:	4b09      	ldr	r3, [pc, #36]	; (4380 <Reset_Handler+0x90>)
    435a:	4798      	blx	r3
        main();
    435c:	4b09      	ldr	r3, [pc, #36]	; (4384 <Reset_Handler+0x94>)
    435e:	4798      	blx	r3
    4360:	e7fe      	b.n	4360 <Reset_Handler+0x70>
    4362:	bf00      	nop
    4364:	20000000 	.word	0x20000000
    4368:	0000c248 	.word	0x0000c248
    436c:	200000bc 	.word	0x200000bc
    4370:	200076a4 	.word	0x200076a4
    4374:	200000c0 	.word	0x200000c0
    4378:	e000ed00 	.word	0xe000ed00
    437c:	00004000 	.word	0x00004000
    4380:	0000aa11 	.word	0x0000aa11
    4384:	00009a5d 	.word	0x00009a5d

00004388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
    4388:	b5f0      	push	{r4, r5, r6, r7, lr}
    438a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    438c:	4a1b      	ldr	r2, [pc, #108]	; (43fc <ADC_0_init+0x74>)
    438e:	6a13      	ldr	r3, [r2, #32]
    4390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4396:	2241      	movs	r2, #65	; 0x41
    4398:	4b19      	ldr	r3, [pc, #100]	; (4400 <ADC_0_init+0x78>)
    439a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    439e:	4e19      	ldr	r6, [pc, #100]	; (4404 <ADC_0_init+0x7c>)
    43a0:	4d19      	ldr	r5, [pc, #100]	; (4408 <ADC_0_init+0x80>)
    43a2:	2400      	movs	r4, #0
    43a4:	9402      	str	r4, [sp, #8]
    43a6:	4b19      	ldr	r3, [pc, #100]	; (440c <ADC_0_init+0x84>)
    43a8:	9301      	str	r3, [sp, #4]
    43aa:	2301      	movs	r3, #1
    43ac:	9300      	str	r3, [sp, #0]
    43ae:	4623      	mov	r3, r4
    43b0:	4632      	mov	r2, r6
    43b2:	4917      	ldr	r1, [pc, #92]	; (4410 <ADC_0_init+0x88>)
    43b4:	4628      	mov	r0, r5
    43b6:	4f17      	ldr	r7, [pc, #92]	; (4414 <ADC_0_init+0x8c>)
    43b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
    43ba:	2310      	movs	r3, #16
    43bc:	1d32      	adds	r2, r6, #4
    43be:	4621      	mov	r1, r4
    43c0:	4628      	mov	r0, r5
    43c2:	4c15      	ldr	r4, [pc, #84]	; (4418 <ADC_0_init+0x90>)
    43c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    43c6:	4b15      	ldr	r3, [pc, #84]	; (441c <ADC_0_init+0x94>)
    43c8:	2280      	movs	r2, #128	; 0x80
    43ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    43cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    43d0:	629a      	str	r2, [r3, #40]	; 0x28
    43d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    43d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    43d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    43dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    43e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    43e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    43e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    43ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    43f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    43f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
    43f8:	b005      	add	sp, #20
    43fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43fc:	40000800 	.word	0x40000800
    4400:	40001c00 	.word	0x40001c00
    4404:	200000dc 	.word	0x200000dc
    4408:	20000a50 	.word	0x20000a50
    440c:	20000b4c 	.word	0x20000b4c
    4410:	43001c00 	.word	0x43001c00
    4414:	00005a9d 	.word	0x00005a9d
    4418:	00005aed 	.word	0x00005aed
    441c:	41008000 	.word	0x41008000

00004420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
    4420:	b5f0      	push	{r4, r5, r6, r7, lr}
    4422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    4424:	4a1e      	ldr	r2, [pc, #120]	; (44a0 <ADC_1_init+0x80>)
    4426:	6a13      	ldr	r3, [r2, #32]
    4428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    442c:	6213      	str	r3, [r2, #32]
    442e:	2241      	movs	r2, #65	; 0x41
    4430:	4b1c      	ldr	r3, [pc, #112]	; (44a4 <ADC_1_init+0x84>)
    4432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    4436:	4e1c      	ldr	r6, [pc, #112]	; (44a8 <ADC_1_init+0x88>)
    4438:	4d1c      	ldr	r5, [pc, #112]	; (44ac <ADC_1_init+0x8c>)
    443a:	2400      	movs	r4, #0
    443c:	9402      	str	r4, [sp, #8]
    443e:	4b1c      	ldr	r3, [pc, #112]	; (44b0 <ADC_1_init+0x90>)
    4440:	9301      	str	r3, [sp, #4]
    4442:	2301      	movs	r3, #1
    4444:	9300      	str	r3, [sp, #0]
    4446:	4623      	mov	r3, r4
    4448:	f106 0214 	add.w	r2, r6, #20
    444c:	4919      	ldr	r1, [pc, #100]	; (44b4 <ADC_1_init+0x94>)
    444e:	4628      	mov	r0, r5
    4450:	4f19      	ldr	r7, [pc, #100]	; (44b8 <ADC_1_init+0x98>)
    4452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
    4454:	2310      	movs	r3, #16
    4456:	f106 0218 	add.w	r2, r6, #24
    445a:	4621      	mov	r1, r4
    445c:	4628      	mov	r0, r5
    445e:	4c17      	ldr	r4, [pc, #92]	; (44bc <ADC_1_init+0x9c>)
    4460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4462:	4b17      	ldr	r3, [pc, #92]	; (44c0 <ADC_1_init+0xa0>)
    4464:	2204      	movs	r2, #4
    4466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    446a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    446e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    4476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    447a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
    447e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    448a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    448e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
    449a:	b005      	add	sp, #20
    449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    449e:	bf00      	nop
    44a0:	40000800 	.word	0x40000800
    44a4:	40001c00 	.word	0x40001c00
    44a8:	200000dc 	.word	0x200000dc
    44ac:	20000c24 	.word	0x20000c24
    44b0:	200009ec 	.word	0x200009ec
    44b4:	43002000 	.word	0x43002000
    44b8:	00005a9d 	.word	0x00005a9d
    44bc:	00005aed 	.word	0x00005aed
    44c0:	41008000 	.word	0x41008000

000044c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
    44c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    44c6:	4a05      	ldr	r2, [pc, #20]	; (44dc <CRC_0_init+0x18>)
    44c8:	6993      	ldr	r3, [r2, #24]
    44ca:	f043 0302 	orr.w	r3, r3, #2
    44ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
    44d0:	4903      	ldr	r1, [pc, #12]	; (44e0 <CRC_0_init+0x1c>)
    44d2:	4804      	ldr	r0, [pc, #16]	; (44e4 <CRC_0_init+0x20>)
    44d4:	4b04      	ldr	r3, [pc, #16]	; (44e8 <CRC_0_init+0x24>)
    44d6:	4798      	blx	r3
    44d8:	bd08      	pop	{r3, pc}
    44da:	bf00      	nop
    44dc:	40000800 	.word	0x40000800
    44e0:	41002000 	.word	0x41002000
    44e4:	200009e8 	.word	0x200009e8
    44e8:	00005b85 	.word	0x00005b85

000044ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    44ec:	b508      	push	{r3, lr}
    44ee:	4b09      	ldr	r3, [pc, #36]	; (4514 <EVENT_SYSTEM_0_init+0x28>)
    44f0:	2240      	movs	r2, #64	; 0x40
    44f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    44f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    44fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    44fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    4502:	4a05      	ldr	r2, [pc, #20]	; (4518 <EVENT_SYSTEM_0_init+0x2c>)
    4504:	6993      	ldr	r3, [r2, #24]
    4506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    450a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    450c:	4b03      	ldr	r3, [pc, #12]	; (451c <EVENT_SYSTEM_0_init+0x30>)
    450e:	4798      	blx	r3
    4510:	bd08      	pop	{r3, pc}
    4512:	bf00      	nop
    4514:	40001c00 	.word	0x40001c00
    4518:	40000800 	.word	0x40000800
    451c:	00005bc5 	.word	0x00005bc5

00004520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    4520:	4a02      	ldr	r2, [pc, #8]	; (452c <FLASH_0_CLOCK_init+0xc>)
    4522:	6913      	ldr	r3, [r2, #16]
    4524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4528:	6113      	str	r3, [r2, #16]
    452a:	4770      	bx	lr
    452c:	40000800 	.word	0x40000800

00004530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    4530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    4532:	4b03      	ldr	r3, [pc, #12]	; (4540 <FLASH_0_init+0x10>)
    4534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    4536:	4903      	ldr	r1, [pc, #12]	; (4544 <FLASH_0_init+0x14>)
    4538:	4803      	ldr	r0, [pc, #12]	; (4548 <FLASH_0_init+0x18>)
    453a:	4b04      	ldr	r3, [pc, #16]	; (454c <FLASH_0_init+0x1c>)
    453c:	4798      	blx	r3
    453e:	bd08      	pop	{r3, pc}
    4540:	00004521 	.word	0x00004521
    4544:	41004000 	.word	0x41004000
    4548:	200009cc 	.word	0x200009cc
    454c:	00005be5 	.word	0x00005be5

00004550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
    4550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4552:	4b5a      	ldr	r3, [pc, #360]	; (46bc <QSPI_INSTANCE_PORT_init+0x16c>)
    4554:	f44f 6500 	mov.w	r5, #2048	; 0x800
    4558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    455c:	4a58      	ldr	r2, [pc, #352]	; (46c0 <QSPI_INSTANCE_PORT_init+0x170>)
    455e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4562:	4858      	ldr	r0, [pc, #352]	; (46c4 <QSPI_INSTANCE_PORT_init+0x174>)
    4564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
    456c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
    4578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    457c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    458c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4594:	f44f 7280 	mov.w	r2, #256	; 0x100
    4598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    459a:	494b      	ldr	r1, [pc, #300]	; (46c8 <QSPI_INSTANCE_PORT_init+0x178>)
    459c:	6299      	str	r1, [r3, #40]	; 0x28
    459e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
    45a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    45a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    45aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    45ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    45b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
    45b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    45ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    45be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    45c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    45c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    45ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    45ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    45d2:	f44f 7200 	mov.w	r2, #512	; 0x200
    45d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    45d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
    45dc:	6299      	str	r1, [r3, #40]	; 0x28
    45de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    45e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
    45e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    45ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    45ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
    45f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    45f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    45fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    45fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    460e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4614:	4a2d      	ldr	r2, [pc, #180]	; (46cc <QSPI_INSTANCE_PORT_init+0x17c>)
    4616:	629a      	str	r2, [r3, #40]	; 0x28
    4618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    461a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    461c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    4620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
    462c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    463c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    464a:	4a21      	ldr	r2, [pc, #132]	; (46d0 <QSPI_INSTANCE_PORT_init+0x180>)
    464c:	629a      	str	r2, [r3, #40]	; 0x28
    464e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    4656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    465a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    465e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
    4662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    466a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    466e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    467e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4682:	4a14      	ldr	r2, [pc, #80]	; (46d4 <QSPI_INSTANCE_PORT_init+0x184>)
    4684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    468c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
    4690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
    469c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    46a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    46a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    46a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    46ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    46b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    46b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
    46b8:	bc30      	pop	{r4, r5}
    46ba:	4770      	bx	lr
    46bc:	41008000 	.word	0x41008000
    46c0:	40020800 	.word	0x40020800
    46c4:	c0020000 	.word	0xc0020000
    46c8:	40000100 	.word	0x40000100
    46cc:	40000400 	.word	0x40000400
    46d0:	40000800 	.word	0x40000800
    46d4:	40020400 	.word	0x40020400

000046d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    46d8:	4b06      	ldr	r3, [pc, #24]	; (46f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
    46da:	691a      	ldr	r2, [r3, #16]
    46dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    46e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    46e2:	691a      	ldr	r2, [r3, #16]
    46e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    46e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    46ea:	69da      	ldr	r2, [r3, #28]
    46ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    46f0:	61da      	str	r2, [r3, #28]
    46f2:	4770      	bx	lr
    46f4:	40000800 	.word	0x40000800

000046f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
    46f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
    46fa:	4b04      	ldr	r3, [pc, #16]	; (470c <QSPI_INSTANCE_init+0x14>)
    46fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
    46fe:	4904      	ldr	r1, [pc, #16]	; (4710 <QSPI_INSTANCE_init+0x18>)
    4700:	4804      	ldr	r0, [pc, #16]	; (4714 <QSPI_INSTANCE_init+0x1c>)
    4702:	4b05      	ldr	r3, [pc, #20]	; (4718 <QSPI_INSTANCE_init+0x20>)
    4704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
    4706:	4b05      	ldr	r3, [pc, #20]	; (471c <QSPI_INSTANCE_init+0x24>)
    4708:	4798      	blx	r3
    470a:	bd08      	pop	{r3, pc}
    470c:	000046d9 	.word	0x000046d9
    4710:	42003400 	.word	0x42003400
    4714:	20000c90 	.word	0x20000c90
    4718:	00005d01 	.word	0x00005d01
    471c:	00004551 	.word	0x00004551

00004720 <USART_EAST_CLOCK_init>:
    4720:	4b06      	ldr	r3, [pc, #24]	; (473c <USART_EAST_CLOCK_init+0x1c>)
    4722:	2241      	movs	r2, #65	; 0x41
    4724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    4728:	2242      	movs	r2, #66	; 0x42
    472a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    472e:	4a04      	ldr	r2, [pc, #16]	; (4740 <USART_EAST_CLOCK_init+0x20>)
    4730:	6953      	ldr	r3, [r2, #20]
    4732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    4736:	6153      	str	r3, [r2, #20]
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	40001c00 	.word	0x40001c00
    4740:	40000800 	.word	0x40000800

00004744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4744:	4b10      	ldr	r3, [pc, #64]	; (4788 <USART_EAST_PORT_init+0x44>)
    4746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    474a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    474e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    475a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    475e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    476a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    476e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    477a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    477e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    4786:	4770      	bx	lr
    4788:	41008000 	.word	0x41008000

0000478c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
    478c:	b510      	push	{r4, lr}
    478e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
    4790:	4b06      	ldr	r3, [pc, #24]	; (47ac <USART_EAST_init+0x20>)
    4792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
    4794:	2300      	movs	r3, #0
    4796:	9300      	str	r3, [sp, #0]
    4798:	2310      	movs	r3, #16
    479a:	4a05      	ldr	r2, [pc, #20]	; (47b0 <USART_EAST_init+0x24>)
    479c:	4905      	ldr	r1, [pc, #20]	; (47b4 <USART_EAST_init+0x28>)
    479e:	4806      	ldr	r0, [pc, #24]	; (47b8 <USART_EAST_init+0x2c>)
    47a0:	4c06      	ldr	r4, [pc, #24]	; (47bc <USART_EAST_init+0x30>)
    47a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
    47a4:	4b06      	ldr	r3, [pc, #24]	; (47c0 <USART_EAST_init+0x34>)
    47a6:	4798      	blx	r3
}
    47a8:	b002      	add	sp, #8
    47aa:	bd10      	pop	{r4, pc}
    47ac:	00004721 	.word	0x00004721
    47b0:	20000104 	.word	0x20000104
    47b4:	40003000 	.word	0x40003000
    47b8:	20000a7c 	.word	0x20000a7c
    47bc:	00006179 	.word	0x00006179
    47c0:	00004745 	.word	0x00004745

000047c4 <USART_NORTH_CLOCK_init>:
    47c4:	4b06      	ldr	r3, [pc, #24]	; (47e0 <USART_NORTH_CLOCK_init+0x1c>)
    47c6:	2241      	movs	r2, #65	; 0x41
    47c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    47cc:	2242      	movs	r2, #66	; 0x42
    47ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    47d2:	4a04      	ldr	r2, [pc, #16]	; (47e4 <USART_NORTH_CLOCK_init+0x20>)
    47d4:	6953      	ldr	r3, [r2, #20]
    47d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    47da:	6153      	str	r3, [r2, #20]
    47dc:	4770      	bx	lr
    47de:	bf00      	nop
    47e0:	40001c00 	.word	0x40001c00
    47e4:	40000800 	.word	0x40000800

000047e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    47e8:	4b10      	ldr	r3, [pc, #64]	; (482c <USART_NORTH_PORT_init+0x44>)
    47ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    47ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    47f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    47f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    47fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    47fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    480a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    480e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    481a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    481e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    482a:	4770      	bx	lr
    482c:	41008000 	.word	0x41008000

00004830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
    4830:	b510      	push	{r4, lr}
    4832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
    4834:	4b06      	ldr	r3, [pc, #24]	; (4850 <USART_NORTH_init+0x20>)
    4836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
    4838:	2300      	movs	r3, #0
    483a:	9300      	str	r3, [sp, #0]
    483c:	2310      	movs	r3, #16
    483e:	4a05      	ldr	r2, [pc, #20]	; (4854 <USART_NORTH_init+0x24>)
    4840:	4905      	ldr	r1, [pc, #20]	; (4858 <USART_NORTH_init+0x28>)
    4842:	4806      	ldr	r0, [pc, #24]	; (485c <USART_NORTH_init+0x2c>)
    4844:	4c06      	ldr	r4, [pc, #24]	; (4860 <USART_NORTH_init+0x30>)
    4846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
    4848:	4b06      	ldr	r3, [pc, #24]	; (4864 <USART_NORTH_init+0x34>)
    484a:	4798      	blx	r3
}
    484c:	b002      	add	sp, #8
    484e:	bd10      	pop	{r4, pc}
    4850:	000047c5 	.word	0x000047c5
    4854:	20000114 	.word	0x20000114
    4858:	40003400 	.word	0x40003400
    485c:	20000ad0 	.word	0x20000ad0
    4860:	00006179 	.word	0x00006179
    4864:	000047e9 	.word	0x000047e9

00004868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4868:	4b10      	ldr	r3, [pc, #64]	; (48ac <GRID_AUX_PORT_init+0x44>)
    486a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    486e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    487a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    487e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    488a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    488e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    489a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    489e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    48a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    48a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    48aa:	4770      	bx	lr
    48ac:	41008000 	.word	0x41008000

000048b0 <GRID_AUX_CLOCK_init>:
    48b0:	4b06      	ldr	r3, [pc, #24]	; (48cc <GRID_AUX_CLOCK_init+0x1c>)
    48b2:	2241      	movs	r2, #65	; 0x41
    48b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    48b8:	2242      	movs	r2, #66	; 0x42
    48ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    48be:	4a04      	ldr	r2, [pc, #16]	; (48d0 <GRID_AUX_CLOCK_init+0x20>)
    48c0:	6993      	ldr	r3, [r2, #24]
    48c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    48c6:	6193      	str	r3, [r2, #24]
    48c8:	4770      	bx	lr
    48ca:	bf00      	nop
    48cc:	40001c00 	.word	0x40001c00
    48d0:	40000800 	.word	0x40000800

000048d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
    48d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
    48d6:	4b05      	ldr	r3, [pc, #20]	; (48ec <GRID_AUX_init+0x18>)
    48d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
    48da:	2200      	movs	r2, #0
    48dc:	4904      	ldr	r1, [pc, #16]	; (48f0 <GRID_AUX_init+0x1c>)
    48de:	4805      	ldr	r0, [pc, #20]	; (48f4 <GRID_AUX_init+0x20>)
    48e0:	4b05      	ldr	r3, [pc, #20]	; (48f8 <GRID_AUX_init+0x24>)
    48e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
    48e4:	4b05      	ldr	r3, [pc, #20]	; (48fc <GRID_AUX_init+0x28>)
    48e6:	4798      	blx	r3
    48e8:	bd08      	pop	{r3, pc}
    48ea:	bf00      	nop
    48ec:	000048b1 	.word	0x000048b1
    48f0:	41012000 	.word	0x41012000
    48f4:	20000a44 	.word	0x20000a44
    48f8:	00006269 	.word	0x00006269
    48fc:	00004869 	.word	0x00004869

00004900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4900:	4b2b      	ldr	r3, [pc, #172]	; (49b0 <UI_SPI_PORT_init+0xb0>)
    4902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    4906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    490a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    490e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    4916:	4a27      	ldr	r2, [pc, #156]	; (49b4 <UI_SPI_PORT_init+0xb4>)
    4918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    491c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
    4920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    492c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    493c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    494c:	4a1a      	ldr	r2, [pc, #104]	; (49b8 <UI_SPI_PORT_init+0xb8>)
    494e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
    4956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    495a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    495e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    496a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    496e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4974:	4a11      	ldr	r2, [pc, #68]	; (49bc <UI_SPI_PORT_init+0xbc>)
    4976:	629a      	str	r2, [r3, #40]	; 0x28
    4978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    497c:	3210      	adds	r2, #16
    497e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
    4984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    498c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
    4990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    499c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    49a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    49a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    49a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    49ac:	4770      	bx	lr
    49ae:	bf00      	nop
    49b0:	41008000 	.word	0x41008000
    49b4:	c0000010 	.word	0xc0000010
    49b8:	c0000020 	.word	0xc0000020
    49bc:	40020000 	.word	0x40020000

000049c0 <UI_SPI_CLOCK_init>:
    49c0:	4b06      	ldr	r3, [pc, #24]	; (49dc <UI_SPI_CLOCK_init+0x1c>)
    49c2:	2241      	movs	r2, #65	; 0x41
    49c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    49c8:	2243      	movs	r2, #67	; 0x43
    49ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    49ce:	4a04      	ldr	r2, [pc, #16]	; (49e0 <UI_SPI_CLOCK_init+0x20>)
    49d0:	6993      	ldr	r3, [r2, #24]
    49d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    49d6:	6193      	str	r3, [r2, #24]
    49d8:	4770      	bx	lr
    49da:	bf00      	nop
    49dc:	40001c00 	.word	0x40001c00
    49e0:	40000800 	.word	0x40000800

000049e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
    49e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
    49e6:	4b04      	ldr	r3, [pc, #16]	; (49f8 <UI_SPI_init+0x14>)
    49e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
    49ea:	4904      	ldr	r1, [pc, #16]	; (49fc <UI_SPI_init+0x18>)
    49ec:	4804      	ldr	r0, [pc, #16]	; (4a00 <UI_SPI_init+0x1c>)
    49ee:	4b05      	ldr	r3, [pc, #20]	; (4a04 <UI_SPI_init+0x20>)
    49f0:	4798      	blx	r3
	UI_SPI_PORT_init();
    49f2:	4b05      	ldr	r3, [pc, #20]	; (4a08 <UI_SPI_init+0x24>)
    49f4:	4798      	blx	r3
    49f6:	bd08      	pop	{r3, pc}
    49f8:	000049c1 	.word	0x000049c1
    49fc:	41014000 	.word	0x41014000
    4a00:	20000944 	.word	0x20000944
    4a04:	00005e91 	.word	0x00005e91
    4a08:	00004901 	.word	0x00004901

00004a0c <USART_WEST_CLOCK_init>:
    4a0c:	4b06      	ldr	r3, [pc, #24]	; (4a28 <USART_WEST_CLOCK_init+0x1c>)
    4a0e:	2241      	movs	r2, #65	; 0x41
    4a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    4a14:	2242      	movs	r2, #66	; 0x42
    4a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4a1a:	4a04      	ldr	r2, [pc, #16]	; (4a2c <USART_WEST_CLOCK_init+0x20>)
    4a1c:	6a13      	ldr	r3, [r2, #32]
    4a1e:	f043 0301 	orr.w	r3, r3, #1
    4a22:	6213      	str	r3, [r2, #32]
    4a24:	4770      	bx	lr
    4a26:	bf00      	nop
    4a28:	40001c00 	.word	0x40001c00
    4a2c:	40000800 	.word	0x40000800

00004a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4a30:	4b10      	ldr	r3, [pc, #64]	; (4a74 <USART_WEST_PORT_init+0x44>)
    4a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    4a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    4a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    4a72:	4770      	bx	lr
    4a74:	41008000 	.word	0x41008000

00004a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
    4a78:	b510      	push	{r4, lr}
    4a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
    4a7c:	4b07      	ldr	r3, [pc, #28]	; (4a9c <USART_WEST_init+0x24>)
    4a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
    4a80:	2300      	movs	r3, #0
    4a82:	9300      	str	r3, [sp, #0]
    4a84:	2310      	movs	r3, #16
    4a86:	4a06      	ldr	r2, [pc, #24]	; (4aa0 <USART_WEST_init+0x28>)
    4a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    4a8c:	4805      	ldr	r0, [pc, #20]	; (4aa4 <USART_WEST_init+0x2c>)
    4a8e:	4c06      	ldr	r4, [pc, #24]	; (4aa8 <USART_WEST_init+0x30>)
    4a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
    4a92:	4b06      	ldr	r3, [pc, #24]	; (4aac <USART_WEST_init+0x34>)
    4a94:	4798      	blx	r3
}
    4a96:	b002      	add	sp, #8
    4a98:	bd10      	pop	{r4, pc}
    4a9a:	bf00      	nop
    4a9c:	00004a0d 	.word	0x00004a0d
    4aa0:	20000124 	.word	0x20000124
    4aa4:	20000b84 	.word	0x20000b84
    4aa8:	00006179 	.word	0x00006179
    4aac:	00004a31 	.word	0x00004a31

00004ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4ab0:	4b16      	ldr	r3, [pc, #88]	; (4b0c <SYS_I2C_PORT_init+0x5c>)
    4ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
    4ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
    4ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
    4aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    4b0a:	4770      	bx	lr
    4b0c:	41008000 	.word	0x41008000

00004b10 <SYS_I2C_CLOCK_init>:
    4b10:	4b06      	ldr	r3, [pc, #24]	; (4b2c <SYS_I2C_CLOCK_init+0x1c>)
    4b12:	2241      	movs	r2, #65	; 0x41
    4b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    4b18:	2242      	movs	r2, #66	; 0x42
    4b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4b1e:	4a04      	ldr	r2, [pc, #16]	; (4b30 <SYS_I2C_CLOCK_init+0x20>)
    4b20:	6a13      	ldr	r3, [r2, #32]
    4b22:	f043 0302 	orr.w	r3, r3, #2
    4b26:	6213      	str	r3, [r2, #32]
    4b28:	4770      	bx	lr
    4b2a:	bf00      	nop
    4b2c:	40001c00 	.word	0x40001c00
    4b30:	40000800 	.word	0x40000800

00004b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
    4b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
    4b36:	4b04      	ldr	r3, [pc, #16]	; (4b48 <SYS_I2C_init+0x14>)
    4b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
    4b3a:	4904      	ldr	r1, [pc, #16]	; (4b4c <SYS_I2C_init+0x18>)
    4b3c:	4804      	ldr	r0, [pc, #16]	; (4b50 <SYS_I2C_init+0x1c>)
    4b3e:	4b05      	ldr	r3, [pc, #20]	; (4b54 <SYS_I2C_init+0x20>)
    4b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
    4b42:	4b05      	ldr	r3, [pc, #20]	; (4b58 <SYS_I2C_init+0x24>)
    4b44:	4798      	blx	r3
    4b46:	bd08      	pop	{r3, pc}
    4b48:	00004b11 	.word	0x00004b11
    4b4c:	43000400 	.word	0x43000400
    4b50:	20000a04 	.word	0x20000a04
    4b54:	00005ca1 	.word	0x00005ca1
    4b58:	00004ab1 	.word	0x00004ab1

00004b5c <USART_SOUTH_CLOCK_init>:
    4b5c:	4b06      	ldr	r3, [pc, #24]	; (4b78 <USART_SOUTH_CLOCK_init+0x1c>)
    4b5e:	2241      	movs	r2, #65	; 0x41
    4b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    4b64:	2242      	movs	r2, #66	; 0x42
    4b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4b6a:	4a04      	ldr	r2, [pc, #16]	; (4b7c <USART_SOUTH_CLOCK_init+0x20>)
    4b6c:	6a13      	ldr	r3, [r2, #32]
    4b6e:	f043 0304 	orr.w	r3, r3, #4
    4b72:	6213      	str	r3, [r2, #32]
    4b74:	4770      	bx	lr
    4b76:	bf00      	nop
    4b78:	40001c00 	.word	0x40001c00
    4b7c:	40000800 	.word	0x40000800

00004b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4b80:	4b10      	ldr	r3, [pc, #64]	; (4bc4 <USART_SOUTH_PORT_init+0x44>)
    4b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
    4b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    4bc2:	4770      	bx	lr
    4bc4:	41008000 	.word	0x41008000

00004bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
    4bc8:	b510      	push	{r4, lr}
    4bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
    4bcc:	4b06      	ldr	r3, [pc, #24]	; (4be8 <USART_SOUTH_init+0x20>)
    4bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
    4bd0:	2300      	movs	r3, #0
    4bd2:	9300      	str	r3, [sp, #0]
    4bd4:	2310      	movs	r3, #16
    4bd6:	4a05      	ldr	r2, [pc, #20]	; (4bec <USART_SOUTH_init+0x24>)
    4bd8:	4905      	ldr	r1, [pc, #20]	; (4bf0 <USART_SOUTH_init+0x28>)
    4bda:	4806      	ldr	r0, [pc, #24]	; (4bf4 <USART_SOUTH_init+0x2c>)
    4bdc:	4c06      	ldr	r4, [pc, #24]	; (4bf8 <USART_SOUTH_init+0x30>)
    4bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
    4be0:	4b06      	ldr	r3, [pc, #24]	; (4bfc <USART_SOUTH_init+0x34>)
    4be2:	4798      	blx	r3
}
    4be4:	b002      	add	sp, #8
    4be6:	bd10      	pop	{r4, pc}
    4be8:	00004b5d 	.word	0x00004b5d
    4bec:	20000134 	.word	0x20000134
    4bf0:	43000800 	.word	0x43000800
    4bf4:	20000bd4 	.word	0x20000bd4
    4bf8:	00006179 	.word	0x00006179
    4bfc:	00004b81 	.word	0x00004b81

00004c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4c00:	4b29      	ldr	r3, [pc, #164]	; (4ca8 <GRID_LED_PORT_init+0xa8>)
    4c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4c12:	4926      	ldr	r1, [pc, #152]	; (4cac <GRID_LED_PORT_init+0xac>)
    4c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    4c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4c48:	4919      	ldr	r1, [pc, #100]	; (4cb0 <GRID_LED_PORT_init+0xb0>)
    4c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    4c74:	629a      	str	r2, [r3, #40]	; 0x28
    4c76:	4a0f      	ldr	r2, [pc, #60]	; (4cb4 <GRID_LED_PORT_init+0xb4>)
    4c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
    4c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    4ca6:	4770      	bx	lr
    4ca8:	41008000 	.word	0x41008000
    4cac:	c0004000 	.word	0xc0004000
    4cb0:	c0008000 	.word	0xc0008000
    4cb4:	c0024000 	.word	0xc0024000

00004cb8 <GRID_LED_CLOCK_init>:
    4cb8:	4b06      	ldr	r3, [pc, #24]	; (4cd4 <GRID_LED_CLOCK_init+0x1c>)
    4cba:	2241      	movs	r2, #65	; 0x41
    4cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    4cc0:	2242      	movs	r2, #66	; 0x42
    4cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4cc6:	4a04      	ldr	r2, [pc, #16]	; (4cd8 <GRID_LED_CLOCK_init+0x20>)
    4cc8:	6a13      	ldr	r3, [r2, #32]
    4cca:	f043 0308 	orr.w	r3, r3, #8
    4cce:	6213      	str	r3, [r2, #32]
    4cd0:	4770      	bx	lr
    4cd2:	bf00      	nop
    4cd4:	40001c00 	.word	0x40001c00
    4cd8:	40000800 	.word	0x40000800

00004cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
    4cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
    4cde:	4b04      	ldr	r3, [pc, #16]	; (4cf0 <GRID_LED_init+0x14>)
    4ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
    4ce2:	4904      	ldr	r1, [pc, #16]	; (4cf4 <GRID_LED_init+0x18>)
    4ce4:	4804      	ldr	r0, [pc, #16]	; (4cf8 <GRID_LED_init+0x1c>)
    4ce6:	4b05      	ldr	r3, [pc, #20]	; (4cfc <GRID_LED_init+0x20>)
    4ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
    4cea:	4b05      	ldr	r3, [pc, #20]	; (4d00 <GRID_LED_init+0x24>)
    4cec:	4798      	blx	r3
    4cee:	bd08      	pop	{r3, pc}
    4cf0:	00004cb9 	.word	0x00004cb9
    4cf4:	43000c00 	.word	0x43000c00
    4cf8:	20000b20 	.word	0x20000b20
    4cfc:	00005f1d 	.word	0x00005f1d
    4d00:	00004c01 	.word	0x00004c01

00004d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
    4d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
    4d06:	4802      	ldr	r0, [pc, #8]	; (4d10 <delay_driver_init+0xc>)
    4d08:	4b02      	ldr	r3, [pc, #8]	; (4d14 <delay_driver_init+0x10>)
    4d0a:	4798      	blx	r3
    4d0c:	bd08      	pop	{r3, pc}
    4d0e:	bf00      	nop
    4d10:	e000e010 	.word	0xe000e010
    4d14:	00005b91 	.word	0x00005b91

00004d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4d18:	4b1e      	ldr	r3, [pc, #120]	; (4d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
    4d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4d24:	6299      	str	r1, [r3, #40]	; 0x28
    4d26:	481c      	ldr	r0, [pc, #112]	; (4d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
    4d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    4d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    4d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    4d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4d5e:	6299      	str	r1, [r3, #40]	; 0x28
    4d60:	490e      	ldr	r1, [pc, #56]	; (4d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    4d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    4d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    4d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    4d92:	4770      	bx	lr
    4d94:	41008000 	.word	0x41008000
    4d98:	c0000100 	.word	0xc0000100
    4d9c:	c0000200 	.word	0xc0000200

00004da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
    4da0:	2241      	movs	r2, #65	; 0x41
    4da2:	4b07      	ldr	r3, [pc, #28]	; (4dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    4da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    4da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    4dac:	691a      	ldr	r2, [r3, #16]
    4dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    4db4:	699a      	ldr	r2, [r3, #24]
    4db6:	f042 0201 	orr.w	r2, r2, #1
    4dba:	619a      	str	r2, [r3, #24]
    4dbc:	4770      	bx	lr
    4dbe:	bf00      	nop
    4dc0:	40001c00 	.word	0x40001c00

00004dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
    4dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    4dc6:	4b03      	ldr	r3, [pc, #12]	; (4dd4 <USB_DEVICE_INSTANCE_init+0x10>)
    4dc8:	4798      	blx	r3
	usb_d_init();
    4dca:	4b03      	ldr	r3, [pc, #12]	; (4dd8 <USB_DEVICE_INSTANCE_init+0x14>)
    4dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    4dce:	4b03      	ldr	r3, [pc, #12]	; (4ddc <USB_DEVICE_INSTANCE_init+0x18>)
    4dd0:	4798      	blx	r3
    4dd2:	bd08      	pop	{r3, pc}
    4dd4:	00004da1 	.word	0x00004da1
    4dd8:	000064f5 	.word	0x000064f5
    4ddc:	00004d19 	.word	0x00004d19

00004de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    4de0:	4a02      	ldr	r2, [pc, #8]	; (4dec <WDT_0_CLOCK_init+0xc>)
    4de2:	6953      	ldr	r3, [r2, #20]
    4de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4de8:	6153      	str	r3, [r2, #20]
    4dea:	4770      	bx	lr
    4dec:	40000800 	.word	0x40000800

00004df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    4df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    4df2:	4b04      	ldr	r3, [pc, #16]	; (4e04 <WDT_0_init+0x14>)
    4df4:	4798      	blx	r3
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);

	wdt->dev.hw = (void *)hw;
    4df6:	4804      	ldr	r0, [pc, #16]	; (4e08 <WDT_0_init+0x18>)
    4df8:	4b04      	ldr	r3, [pc, #16]	; (4e0c <WDT_0_init+0x1c>)
    4dfa:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
    4dfc:	4b04      	ldr	r3, [pc, #16]	; (4e10 <WDT_0_init+0x20>)
    4dfe:	4798      	blx	r3
    4e00:	bd08      	pop	{r3, pc}
    4e02:	bf00      	nop
    4e04:	00004de1 	.word	0x00004de1
    4e08:	20000acc 	.word	0x20000acc
    4e0c:	40002000 	.word	0x40002000
    4e10:	00009a0d 	.word	0x00009a0d

00004e14 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
    4e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    4e18:	4ba3      	ldr	r3, [pc, #652]	; (50a8 <system_init+0x294>)
    4e1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4e1c:	4ba3      	ldr	r3, [pc, #652]	; (50ac <system_init+0x298>)
    4e1e:	2220      	movs	r2, #32
    4e20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4e22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4e28:	629a      	str	r2, [r3, #40]	; 0x28
    4e2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    4e2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4e3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    4e40:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e42:	4e9b      	ldr	r6, [pc, #620]	; (50b0 <system_init+0x29c>)
    4e44:	629e      	str	r6, [r3, #40]	; 0x28
    4e46:	499b      	ldr	r1, [pc, #620]	; (50b4 <system_init+0x2a0>)
    4e48:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4e4a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
    4e4e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    4e52:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e56:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e5e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4e62:	2180      	movs	r1, #128	; 0x80
    4e64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e68:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4e6c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
    4e70:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4e74:	4d90      	ldr	r5, [pc, #576]	; (50b8 <system_init+0x2a4>)
    4e76:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4e7a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
    4e7e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    4e82:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e86:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e8e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    4e96:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4e9a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4ea2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4ea6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4eaa:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
    4eae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4eb2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4eb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4eba:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4ebe:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4ec2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
    4ec6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
    4eca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ece:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ed2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4ed6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4eda:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    4ede:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4ee2:	4c76      	ldr	r4, [pc, #472]	; (50bc <system_init+0x2a8>)
    4ee4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    4ee8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4eec:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
    4ef0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    4ef4:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ef8:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
    4efc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f00:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f04:	f44f 6400 	mov.w	r4, #2048	; 0x800
    4f08:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f0c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 514c <system_init+0x338>
    4f10:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
    4f14:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4f1c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
    4f20:	f045 0504 	orr.w	r5, r5, #4
    4f24:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4f28:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f2c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f30:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f34:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f38:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4f3c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f40:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
    4f44:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f48:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f50:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4f58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f5c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
    4f60:	4a57      	ldr	r2, [pc, #348]	; (50c0 <system_init+0x2ac>)
    4f62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4f66:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
    4f6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4f6e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f72:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f7a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4f82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4f86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4f8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4f92:	494c      	ldr	r1, [pc, #304]	; (50c4 <system_init+0x2b0>)
    4f94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f98:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fa0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fa4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    4fa8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4fac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fb0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4fb4:	4944      	ldr	r1, [pc, #272]	; (50c8 <system_init+0x2b4>)
    4fb6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4fba:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
    4fbe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fc2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fc6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4fca:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4fd2:	4a3e      	ldr	r2, [pc, #248]	; (50cc <system_init+0x2b8>)
    4fd4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4fd8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
    4fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fe0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
    4fe4:	4b3a      	ldr	r3, [pc, #232]	; (50d0 <system_init+0x2bc>)
    4fe6:	4798      	blx	r3
	ADC_1_init();
    4fe8:	4b3a      	ldr	r3, [pc, #232]	; (50d4 <system_init+0x2c0>)
    4fea:	4798      	blx	r3

	CRC_0_init();
    4fec:	4b3a      	ldr	r3, [pc, #232]	; (50d8 <system_init+0x2c4>)
    4fee:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    4ff0:	4b3a      	ldr	r3, [pc, #232]	; (50dc <system_init+0x2c8>)
    4ff2:	4798      	blx	r3

	FLASH_0_init();
    4ff4:	4b3a      	ldr	r3, [pc, #232]	; (50e0 <system_init+0x2cc>)
    4ff6:	4798      	blx	r3

	QSPI_INSTANCE_init();
    4ff8:	4b3a      	ldr	r3, [pc, #232]	; (50e4 <system_init+0x2d0>)
    4ffa:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    4ffc:	4c3a      	ldr	r4, [pc, #232]	; (50e8 <system_init+0x2d4>)
    4ffe:	6963      	ldr	r3, [r4, #20]
    5000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5004:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    5006:	4b39      	ldr	r3, [pc, #228]	; (50ec <system_init+0x2d8>)
    5008:	4798      	blx	r3
    500a:	4602      	mov	r2, r0
    500c:	4938      	ldr	r1, [pc, #224]	; (50f0 <system_init+0x2dc>)
    500e:	4839      	ldr	r0, [pc, #228]	; (50f4 <system_init+0x2e0>)
    5010:	4d39      	ldr	r5, [pc, #228]	; (50f8 <system_init+0x2e4>)
    5012:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    5014:	4b39      	ldr	r3, [pc, #228]	; (50fc <system_init+0x2e8>)
    5016:	4798      	blx	r3
	USART_NORTH_init();
    5018:	4b39      	ldr	r3, [pc, #228]	; (5100 <system_init+0x2ec>)
    501a:	4798      	blx	r3

	GRID_AUX_init();
    501c:	4b39      	ldr	r3, [pc, #228]	; (5104 <system_init+0x2f0>)
    501e:	4798      	blx	r3

	UI_SPI_init();
    5020:	4b39      	ldr	r3, [pc, #228]	; (5108 <system_init+0x2f4>)
    5022:	4798      	blx	r3
	USART_WEST_init();
    5024:	4b39      	ldr	r3, [pc, #228]	; (510c <system_init+0x2f8>)
    5026:	4798      	blx	r3

	SYS_I2C_init();
    5028:	4b39      	ldr	r3, [pc, #228]	; (5110 <system_init+0x2fc>)
    502a:	4798      	blx	r3
	USART_SOUTH_init();
    502c:	4b39      	ldr	r3, [pc, #228]	; (5114 <system_init+0x300>)
    502e:	4798      	blx	r3

	GRID_LED_init();
    5030:	4b39      	ldr	r3, [pc, #228]	; (5118 <system_init+0x304>)
    5032:	4798      	blx	r3

	delay_driver_init();
    5034:	4b39      	ldr	r3, [pc, #228]	; (511c <system_init+0x308>)
    5036:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    5038:	6963      	ldr	r3, [r4, #20]
    503a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    503e:	6163      	str	r3, [r4, #20]
    5040:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    5044:	f04f 0840 	mov.w	r8, #64	; 0x40
    5048:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    504c:	4e34      	ldr	r6, [pc, #208]	; (5120 <system_init+0x30c>)
    504e:	47b0      	blx	r6
    5050:	4602      	mov	r2, r0
    5052:	4934      	ldr	r1, [pc, #208]	; (5124 <system_init+0x310>)
    5054:	4834      	ldr	r0, [pc, #208]	; (5128 <system_init+0x314>)
    5056:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    5058:	6963      	ldr	r3, [r4, #20]
    505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    505e:	6163      	str	r3, [r4, #20]
    5060:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    5064:	47b0      	blx	r6
    5066:	4602      	mov	r2, r0
    5068:	4930      	ldr	r1, [pc, #192]	; (512c <system_init+0x318>)
    506a:	4831      	ldr	r0, [pc, #196]	; (5130 <system_init+0x31c>)
    506c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    506e:	69a3      	ldr	r3, [r4, #24]
    5070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    5074:	61a3      	str	r3, [r4, #24]
    5076:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    507a:	47b0      	blx	r6
    507c:	4602      	mov	r2, r0
    507e:	492d      	ldr	r1, [pc, #180]	; (5134 <system_init+0x320>)
    5080:	482d      	ldr	r0, [pc, #180]	; (5138 <system_init+0x324>)
    5082:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    5084:	69a3      	ldr	r3, [r4, #24]
    5086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    508a:	61a3      	str	r3, [r4, #24]
    508c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    5090:	47b0      	blx	r6
    5092:	4602      	mov	r2, r0
    5094:	4929      	ldr	r1, [pc, #164]	; (513c <system_init+0x328>)
    5096:	482a      	ldr	r0, [pc, #168]	; (5140 <system_init+0x32c>)
    5098:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    509a:	4b2a      	ldr	r3, [pc, #168]	; (5144 <system_init+0x330>)
    509c:	4798      	blx	r3

	WDT_0_init();
    509e:	4b2a      	ldr	r3, [pc, #168]	; (5148 <system_init+0x334>)
    50a0:	4798      	blx	r3
    50a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50a6:	bf00      	nop
    50a8:	00006c3d 	.word	0x00006c3d
    50ac:	41008000 	.word	0x41008000
    50b0:	40020000 	.word	0x40020000
    50b4:	c0020020 	.word	0xc0020020
    50b8:	c0020000 	.word	0xc0020000
    50bc:	40028000 	.word	0x40028000
    50c0:	c0020004 	.word	0xc0020004
    50c4:	c0000008 	.word	0xc0000008
    50c8:	c0000010 	.word	0xc0000010
    50cc:	c0000020 	.word	0xc0000020
    50d0:	00004389 	.word	0x00004389
    50d4:	00004421 	.word	0x00004421
    50d8:	000044c5 	.word	0x000044c5
    50dc:	000044ed 	.word	0x000044ed
    50e0:	00004531 	.word	0x00004531
    50e4:	000046f9 	.word	0x000046f9
    50e8:	40000800 	.word	0x40000800
    50ec:	0000740d 	.word	0x0000740d
    50f0:	40002400 	.word	0x40002400
    50f4:	2000098c 	.word	0x2000098c
    50f8:	00006045 	.word	0x00006045
    50fc:	0000478d 	.word	0x0000478d
    5100:	00004831 	.word	0x00004831
    5104:	000048d5 	.word	0x000048d5
    5108:	000049e5 	.word	0x000049e5
    510c:	00004a79 	.word	0x00004a79
    5110:	00004b35 	.word	0x00004b35
    5114:	00004bc9 	.word	0x00004bc9
    5118:	00004cdd 	.word	0x00004cdd
    511c:	00004d05 	.word	0x00004d05
    5120:	00008769 	.word	0x00008769
    5124:	40003800 	.word	0x40003800
    5128:	20000c70 	.word	0x20000c70
    512c:	40003c00 	.word	0x40003c00
    5130:	20000b64 	.word	0x20000b64
    5134:	4101a000 	.word	0x4101a000
    5138:	200009ac 	.word	0x200009ac
    513c:	4101c000 	.word	0x4101c000
    5140:	20000c50 	.word	0x20000c50
    5144:	00004dc5 	.word	0x00004dc5
    5148:	00004df1 	.word	0x00004df1
    514c:	40020800 	.word	0x40020800

00005150 <grid_hardwaretest_led_test_init>:
		
	}

}

void grid_hardwaretest_led_test_init(struct grid_led_model* mod, uint8_t num){
    5150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5154:	b082      	sub	sp, #8
    5156:	4680      	mov	r8, r0
    5158:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    515a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    515e:	4b0c      	ldr	r3, [pc, #48]	; (5190 <grid_hardwaretest_led_test_init+0x40>)
    5160:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	
	gpio_set_pin_level(UI_PWR_EN, true);
	
	grid_led_init(mod, num);
    5164:	4b0b      	ldr	r3, [pc, #44]	; (5194 <grid_hardwaretest_led_test_init+0x44>)
    5166:	4798      	blx	r3
	
	for(uint8_t i=0; i<num; i++){
    5168:	b176      	cbz	r6, 5188 <grid_hardwaretest_led_test_init+0x38>
    516a:	3e01      	subs	r6, #1
    516c:	b2f6      	uxtb	r6, r6
    516e:	3601      	adds	r6, #1
    5170:	2400      	movs	r4, #0
		
		grid_led_set_color(mod, i, 0, 0, 0);
    5172:	4625      	mov	r5, r4
    5174:	4f08      	ldr	r7, [pc, #32]	; (5198 <grid_hardwaretest_led_test_init+0x48>)
    5176:	9500      	str	r5, [sp, #0]
    5178:	462b      	mov	r3, r5
    517a:	462a      	mov	r2, r5
    517c:	4621      	mov	r1, r4
    517e:	4640      	mov	r0, r8
    5180:	47b8      	blx	r7
    5182:	3401      	adds	r4, #1
	for(uint8_t i=0; i<num; i++){
    5184:	42b4      	cmp	r4, r6
    5186:	d1f6      	bne.n	5176 <grid_hardwaretest_led_test_init+0x26>
		
	}

	
}
    5188:	b002      	add	sp, #8
    518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    518e:	bf00      	nop
    5190:	41008000 	.word	0x41008000
    5194:	0000592d 	.word	0x0000592d
    5198:	0000553d 	.word	0x0000553d

0000519c <grid_hardwaretest_led_test>:


void grid_hardwaretest_led_test(struct grid_led_model* mod, uint32_t loop){
    519c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    51a0:	b083      	sub	sp, #12
    51a2:	4605      	mov	r5, r0
		
		
	for(uint8_t i=0; i<mod->led_number; i++){
    51a4:	7843      	ldrb	r3, [r0, #1]
    51a6:	b333      	cbz	r3, 51f6 <grid_hardwaretest_led_test+0x5a>
	
		grid_led_set_color(mod, i, loop/10%128*(loop/1280%3==0), loop/10%128*(loop/1280%3==1), loop/10%128*(loop/1280%3==2));
    51a8:	4e18      	ldr	r6, [pc, #96]	; (520c <grid_hardwaretest_led_test+0x70>)
    51aa:	fba6 3601 	umull	r3, r6, r6, r1
    51ae:	f3c6 07c6 	ubfx	r7, r6, #3, #7
    51b2:	0ab6      	lsrs	r6, r6, #10
    51b4:	4b16      	ldr	r3, [pc, #88]	; (5210 <grid_hardwaretest_led_test+0x74>)
    51b6:	fba3 2306 	umull	r2, r3, r3, r6
    51ba:	085b      	lsrs	r3, r3, #1
    51bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    51c0:	1ab3      	subs	r3, r6, r2
    51c2:	4296      	cmp	r6, r2
    51c4:	bf0c      	ite	eq
    51c6:	46b9      	moveq	r9, r7
    51c8:	f04f 0900 	movne.w	r9, #0
    51cc:	2b01      	cmp	r3, #1
    51ce:	bf0c      	ite	eq
    51d0:	46b8      	moveq	r8, r7
    51d2:	f04f 0800 	movne.w	r8, #0
    51d6:	2b02      	cmp	r3, #2
    51d8:	bf18      	it	ne
    51da:	2700      	movne	r7, #0
    51dc:	2400      	movs	r4, #0
    51de:	4e0d      	ldr	r6, [pc, #52]	; (5214 <grid_hardwaretest_led_test+0x78>)
    51e0:	9700      	str	r7, [sp, #0]
    51e2:	4643      	mov	r3, r8
    51e4:	464a      	mov	r2, r9
    51e6:	4621      	mov	r1, r4
    51e8:	4628      	mov	r0, r5
    51ea:	47b0      	blx	r6
	for(uint8_t i=0; i<mod->led_number; i++){
    51ec:	3401      	adds	r4, #1
    51ee:	b2e4      	uxtb	r4, r4
    51f0:	786b      	ldrb	r3, [r5, #1]
    51f2:	42a3      	cmp	r3, r4
    51f4:	d8f4      	bhi.n	51e0 <grid_hardwaretest_led_test+0x44>
		
		
	//grid_led_render_all(mod);
		
		
	while(grid_led_hardware_is_transfer_completed(mod) != 1){
    51f6:	4c08      	ldr	r4, [pc, #32]	; (5218 <grid_hardwaretest_led_test+0x7c>)
    51f8:	4628      	mov	r0, r5
    51fa:	47a0      	blx	r4
    51fc:	2801      	cmp	r0, #1
    51fe:	d1fb      	bne.n	51f8 <grid_hardwaretest_led_test+0x5c>
			
	}
	grid_led_hardware_start_transfer(mod);
    5200:	4628      	mov	r0, r5
    5202:	4b06      	ldr	r3, [pc, #24]	; (521c <grid_hardwaretest_led_test+0x80>)
    5204:	4798      	blx	r3
	
}
    5206:	b003      	add	sp, #12
    5208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    520c:	cccccccd 	.word	0xcccccccd
    5210:	aaaaaaab 	.word	0xaaaaaaab
    5214:	0000553d 	.word	0x0000553d
    5218:	00005a1d 	.word	0x00005a1d
    521c:	000059f1 	.word	0x000059f1

00005220 <grid_hardwaretest_port_test>:


void grid_hardwaretest_port_test(uint32_t loop){
    5220:	b410      	push	{r4}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5222:	4baa      	ldr	r3, [pc, #680]	; (54cc <grid_hardwaretest_port_test+0x2ac>)
    5224:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5228:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    522c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5230:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5234:	4aa6      	ldr	r2, [pc, #664]	; (54d0 <grid_hardwaretest_port_test+0x2b0>)
    5236:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    523a:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    523e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5242:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5246:	2280      	movs	r2, #128	; 0x80
    5248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    524c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5250:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    5254:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    5258:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    525c:	f893 40c7 	ldrb.w	r4, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    5260:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5264:	f883 40c7 	strb.w	r4, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5268:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
    526c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5270:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5274:	4c97      	ldr	r4, [pc, #604]	; (54d4 <grid_hardwaretest_port_test+0x2b4>)
    5276:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    527a:	f893 415b 	ldrb.w	r4, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    527e:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5282:	f883 415b 	strb.w	r4, [r3, #347]	; 0x15b
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5286:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    528a:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    528e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5292:	4c91      	ldr	r4, [pc, #580]	; (54d8 <grid_hardwaretest_port_test+0x2b8>)
    5294:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5298:	f893 415c 	ldrb.w	r4, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    529c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    52a0:	f883 415c 	strb.w	r4, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    52a4:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    52a8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    52ac:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    52b0:	4c8a      	ldr	r4, [pc, #552]	; (54dc <grid_hardwaretest_port_test+0x2bc>)
    52b2:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    52b6:	f893 4151 	ldrb.w	r4, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    52ba:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    52be:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    52c2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    52c6:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    52ca:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    52ce:	4984      	ldr	r1, [pc, #528]	; (54e0 <grid_hardwaretest_port_test+0x2c0>)
    52d0:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    52d4:	f893 1150 	ldrb.w	r1, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    52d8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    52dc:	f883 1150 	strb.w	r1, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    52e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    52e4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    52e8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    52ec:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    52f0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    52f4:	f893 114d 	ldrb.w	r1, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
    52f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    52fc:	f883 114d 	strb.w	r1, [r3, #333]	; 0x14d
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5304:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5308:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    530c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5310:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5314:	f893 114c 	ldrb.w	r1, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    5318:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    531c:	f883 114c 	strb.w	r1, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5320:	f44f 7180 	mov.w	r1, #256	; 0x100
    5324:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5328:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    532c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    5330:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5334:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    5338:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    533c:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5340:	f44f 7100 	mov.w	r1, #512	; 0x200
    5344:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5348:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    534c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    5350:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5354:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    5358:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    535c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(PB09, GPIO_PIN_FUNCTION_OFF);
			

		
	if (loop%1000 == 0){
    5360:	4b60      	ldr	r3, [pc, #384]	; (54e4 <grid_hardwaretest_port_test+0x2c4>)
    5362:	fba3 2300 	umull	r2, r3, r3, r0
    5366:	099b      	lsrs	r3, r3, #6
    5368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    536c:	fb02 0313 	mls	r3, r2, r3, r0
    5370:	2b00      	cmp	r3, #0
    5372:	d154      	bne.n	541e <grid_hardwaretest_port_test+0x1fe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5374:	4a55      	ldr	r2, [pc, #340]	; (54cc <grid_hardwaretest_port_test+0x2ac>)
    5376:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    537a:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    537e:	2180      	movs	r1, #128	; 0x80
    5380:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
    5384:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    5388:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    538c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5390:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    5394:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    5398:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    539c:	f8c2 4114 	str.w	r4, [r2, #276]	; 0x114
    53a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    53a4:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    53a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    53ac:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    53b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    53b4:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
    53b8:	f44f 7100 	mov.w	r1, #512	; 0x200
    53bc:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
			
		gpio_set_pin_level(PB08, true);
		gpio_set_pin_level(PB09, true);
			
	}
	if (loop%1000 == 750){
    53c0:	f240 22ee 	movw	r2, #750	; 0x2ee
    53c4:	4293      	cmp	r3, r2
    53c6:	d127      	bne.n	5418 <grid_hardwaretest_port_test+0x1f8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    53c8:	4b40      	ldr	r3, [pc, #256]	; (54cc <grid_hardwaretest_port_test+0x2ac>)
    53ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    53ce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    53d2:	2280      	movs	r2, #128	; 0x80
    53d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    53d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    53dc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    53e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    53e4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    53e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    53ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    53f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    53f4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    53f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    53fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5404:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5408:	f44f 7280 	mov.w	r2, #256	; 0x100
    540c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    5410:	f44f 7200 	mov.w	r2, #512	; 0x200
    5414:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	}
		

	
	
}
    5418:	f85d 4b04 	ldr.w	r4, [sp], #4
    541c:	4770      	bx	lr
	if (loop%1000 == 250){
    541e:	2bfa      	cmp	r3, #250	; 0xfa
    5420:	d128      	bne.n	5474 <grid_hardwaretest_port_test+0x254>
    5422:	4b2a      	ldr	r3, [pc, #168]	; (54cc <grid_hardwaretest_port_test+0x2ac>)
    5424:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5428:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    542c:	2280      	movs	r2, #128	; 0x80
    542e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    5436:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    543e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5446:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    544a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    544e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    5456:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    545a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    545e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5462:	f44f 7280 	mov.w	r2, #256	; 0x100
    5466:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    546a:	f44f 7200 	mov.w	r2, #512	; 0x200
    546e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    5472:	e7d1      	b.n	5418 <grid_hardwaretest_port_test+0x1f8>
	if (loop%1000 == 500){
    5474:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    5478:	d1a2      	bne.n	53c0 <grid_hardwaretest_port_test+0x1a0>
    547a:	4b14      	ldr	r3, [pc, #80]	; (54cc <grid_hardwaretest_port_test+0x2ac>)
    547c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5480:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5484:	2280      	movs	r2, #128	; 0x80
    5486:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    548a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    548e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5496:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    549a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    549e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    54a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    54a6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    54aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    54ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    54b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    54b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    54ba:	f44f 7280 	mov.w	r2, #256	; 0x100
    54be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    54c2:	f44f 7200 	mov.w	r2, #512	; 0x200
    54c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    54ca:	e7a5      	b.n	5418 <grid_hardwaretest_port_test+0x1f8>
    54cc:	41008000 	.word	0x41008000
    54d0:	c0000004 	.word	0xc0000004
    54d4:	c0000800 	.word	0xc0000800
    54d8:	c0001000 	.word	0xc0001000
    54dc:	c0000002 	.word	0xc0000002
    54e0:	c0000001 	.word	0xc0000001
    54e4:	10624dd3 	.word	0x10624dd3

000054e8 <grid_hardwaretest_main>:
void grid_hardwaretest_main(){
    54e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Hardware Test Init");
    54ea:	480a      	ldr	r0, [pc, #40]	; (5514 <grid_hardwaretest_main+0x2c>)
    54ec:	4b0a      	ldr	r3, [pc, #40]	; (5518 <grid_hardwaretest_main+0x30>)
    54ee:	4798      	blx	r3
	grid_hardwaretest_led_test_init(&grid_led_state, 16);
    54f0:	2110      	movs	r1, #16
    54f2:	480a      	ldr	r0, [pc, #40]	; (551c <grid_hardwaretest_main+0x34>)
    54f4:	4b0a      	ldr	r3, [pc, #40]	; (5520 <grid_hardwaretest_main+0x38>)
    54f6:	4798      	blx	r3
	uint32_t counter = 0;
    54f8:	2400      	movs	r4, #0
		grid_hardwaretest_port_test(counter);
    54fa:	4f0a      	ldr	r7, [pc, #40]	; (5524 <grid_hardwaretest_main+0x3c>)
		grid_hardwaretest_led_test(&grid_led_state, counter);
    54fc:	4e07      	ldr	r6, [pc, #28]	; (551c <grid_hardwaretest_main+0x34>)
    54fe:	4d0a      	ldr	r5, [pc, #40]	; (5528 <grid_hardwaretest_main+0x40>)
		grid_hardwaretest_port_test(counter);
    5500:	4620      	mov	r0, r4
    5502:	47b8      	blx	r7
		grid_hardwaretest_led_test(&grid_led_state, counter);
    5504:	4621      	mov	r1, r4
    5506:	4630      	mov	r0, r6
    5508:	47a8      	blx	r5
		delay_ms(1);	
    550a:	2001      	movs	r0, #1
    550c:	4b07      	ldr	r3, [pc, #28]	; (552c <grid_hardwaretest_main+0x44>)
    550e:	4798      	blx	r3
		counter++;			
    5510:	3401      	adds	r4, #1
    5512:	e7f5      	b.n	5500 <grid_hardwaretest_main+0x18>
    5514:	0000ba94 	.word	0x0000ba94
    5518:	0000abe9 	.word	0x0000abe9
    551c:	2000725c 	.word	0x2000725c
    5520:	00005151 	.word	0x00005151
    5524:	00005221 	.word	0x00005221
    5528:	0000519d 	.word	0x0000519d
    552c:	00005ba5 	.word	0x00005ba5

00005530 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    5530:	2201      	movs	r2, #1
    5532:	4b01      	ldr	r3, [pc, #4]	; (5538 <grid_led_hardware_transfer_complete_cb+0x8>)
    5534:	701a      	strb	r2, [r3, #0]
    5536:	4770      	bx	lr
    5538:	20000ca0 	.word	0x20000ca0

0000553c <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint16_t led_r, uint16_t led_g, uint16_t led_b){
    553c:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    553e:	7844      	ldrb	r4, [r0, #1]
    5540:	428c      	cmp	r4, r1
    5542:	d802      	bhi.n	554a <grid_led_set_color+0xe>
		return -1;		
    5544:	20ff      	movs	r0, #255	; 0xff
}
    5546:	bc30      	pop	{r4, r5}
    5548:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    554a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    554e:	0089      	lsls	r1, r1, #2
    5550:	4c0d      	ldr	r4, [pc, #52]	; (5588 <grid_led_set_color+0x4c>)
    5552:	2bff      	cmp	r3, #255	; 0xff
    5554:	bf28      	it	cs
    5556:	23ff      	movcs	r3, #255	; 0xff
    5558:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    555c:	68c3      	ldr	r3, [r0, #12]
    555e:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    5560:	2aff      	cmp	r2, #255	; 0xff
    5562:	bf28      	it	cs
    5564:	22ff      	movcs	r2, #255	; 0xff
    5566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    556a:	68c3      	ldr	r3, [r0, #12]
    556c:	440b      	add	r3, r1
    556e:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    5570:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5574:	2bff      	cmp	r3, #255	; 0xff
    5576:	bf28      	it	cs
    5578:	23ff      	movcs	r3, #255	; 0xff
    557a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    557e:	68c3      	ldr	r3, [r0, #12]
    5580:	4419      	add	r1, r3
    5582:	608a      	str	r2, [r1, #8]
		return 0;
    5584:	2000      	movs	r0, #0
    5586:	e7de      	b.n	5546 <grid_led_set_color+0xa>
    5588:	20002da8 	.word	0x20002da8

0000558c <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    558c:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    558e:	4c06      	ldr	r4, [pc, #24]	; (55a8 <grid_led_hardware_init+0x1c>)
    5590:	f100 0114 	add.w	r1, r0, #20
    5594:	4620      	mov	r0, r4
    5596:	4b05      	ldr	r3, [pc, #20]	; (55ac <grid_led_hardware_init+0x20>)
    5598:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    559a:	4a05      	ldr	r2, [pc, #20]	; (55b0 <grid_led_hardware_init+0x24>)
    559c:	2100      	movs	r1, #0
    559e:	4620      	mov	r0, r4
    55a0:	4b04      	ldr	r3, [pc, #16]	; (55b4 <grid_led_hardware_init+0x28>)
    55a2:	4798      	blx	r3
    55a4:	bd10      	pop	{r4, pc}
    55a6:	bf00      	nop
    55a8:	20000b20 	.word	0x20000b20
    55ac:	00005f65 	.word	0x00005f65
    55b0:	00005531 	.word	0x00005531
    55b4:	00005f55 	.word	0x00005f55

000055b8 <grid_led_set_min>:
	/** END */
	
}


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    55b8:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    55ba:	7844      	ldrb	r4, [r0, #1]
    55bc:	fb02 1404 	mla	r4, r2, r4, r1
    55c0:	6905      	ldr	r5, [r0, #16]
    55c2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    55c6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    55ca:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    55cc:	7843      	ldrb	r3, [r0, #1]
    55ce:	fb02 1303 	mla	r3, r2, r3, r1
    55d2:	6904      	ldr	r4, [r0, #16]
    55d4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    55d8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    55dc:	4423      	add	r3, r4
    55de:	f89d 400c 	ldrb.w	r4, [sp, #12]
    55e2:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    55e4:	7843      	ldrb	r3, [r0, #1]
    55e6:	fb02 1203 	mla	r2, r2, r3, r1
    55ea:	6903      	ldr	r3, [r0, #16]
    55ec:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    55f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    55f4:	441a      	add	r2, r3
    55f6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    55fa:	7093      	strb	r3, [r2, #2]
}
    55fc:	bc70      	pop	{r4, r5, r6}
    55fe:	4770      	bx	lr

00005600 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5600:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    5602:	7844      	ldrb	r4, [r0, #1]
    5604:	fb02 1404 	mla	r4, r2, r4, r1
    5608:	6905      	ldr	r5, [r0, #16]
    560a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    560e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    5612:	442c      	add	r4, r5
    5614:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    5616:	7843      	ldrb	r3, [r0, #1]
    5618:	fb02 1303 	mla	r3, r2, r3, r1
    561c:	6904      	ldr	r4, [r0, #16]
    561e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5622:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5626:	4423      	add	r3, r4
    5628:	f89d 400c 	ldrb.w	r4, [sp, #12]
    562c:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    562e:	7843      	ldrb	r3, [r0, #1]
    5630:	fb02 1203 	mla	r2, r2, r3, r1
    5634:	6903      	ldr	r3, [r0, #16]
    5636:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    563a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    563e:	441a      	add	r2, r3
    5640:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5644:	7153      	strb	r3, [r2, #5]
}
    5646:	bc70      	pop	{r4, r5, r6}
    5648:	4770      	bx	lr

0000564a <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    564a:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    564c:	7844      	ldrb	r4, [r0, #1]
    564e:	fb02 1404 	mla	r4, r2, r4, r1
    5652:	6905      	ldr	r5, [r0, #16]
    5654:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    5658:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    565c:	442c      	add	r4, r5
    565e:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    5660:	7843      	ldrb	r3, [r0, #1]
    5662:	fb02 1303 	mla	r3, r2, r3, r1
    5666:	6904      	ldr	r4, [r0, #16]
    5668:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    566c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5670:	4423      	add	r3, r4
    5672:	f89d 400c 	ldrb.w	r4, [sp, #12]
    5676:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    5678:	7843      	ldrb	r3, [r0, #1]
    567a:	fb02 1203 	mla	r2, r2, r3, r1
    567e:	6903      	ldr	r3, [r0, #16]
    5680:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    5684:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5688:	441a      	add	r2, r3
    568a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    568e:	7213      	strb	r3, [r2, #8]
}
    5690:	bc70      	pop	{r4, r5, r6}
    5692:	4770      	bx	lr

00005694 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    5694:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    5696:	7844      	ldrb	r4, [r0, #1]
    5698:	fb02 1204 	mla	r2, r2, r4, r1
    569c:	6901      	ldr	r1, [r0, #16]
    569e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    56a2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    56a6:	440a      	add	r2, r1
    56a8:	72d3      	strb	r3, [r2, #11]
}
    56aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    56ae:	4770      	bx	lr

000056b0 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    56b0:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    56b2:	7844      	ldrb	r4, [r0, #1]
    56b4:	fb02 1204 	mla	r2, r2, r4, r1
    56b8:	6901      	ldr	r1, [r0, #16]
    56ba:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    56be:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    56c2:	440a      	add	r2, r1
    56c4:	7313      	strb	r3, [r2, #12]
}
    56c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    56ca:	4770      	bx	lr

000056cc <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    56cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56d0:	b083      	sub	sp, #12
    56d2:	4605      	mov	r5, r0
	mod->led_number = length;
    56d4:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    56d6:	b2cc      	uxtb	r4, r1
    56d8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    56dc:	0080      	lsls	r0, r0, #2
    56de:	3090      	adds	r0, #144	; 0x90
    56e0:	6068      	str	r0, [r5, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    56e2:	4f52      	ldr	r7, [pc, #328]	; (582c <grid_led_buffer_init+0x160>)
    56e4:	47b8      	blx	r7
    56e6:	4606      	mov	r6, r0
    56e8:	60a8      	str	r0, [r5, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    56ea:	f100 0390 	add.w	r3, r0, #144	; 0x90
    56ee:	60eb      	str	r3, [r5, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    56f0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    56f4:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
    56f8:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    56fa:	2e00      	cmp	r6, #0
    56fc:	f000 8094 	beq.w	5828 <grid_led_buffer_init+0x15c>
    5700:	2800      	cmp	r0, #0
    5702:	f000 8091 	beq.w	5828 <grid_led_buffer_init+0x15c>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    5706:	6128      	str	r0, [r5, #16]
    5708:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    570a:	4619      	mov	r1, r3
    570c:	68aa      	ldr	r2, [r5, #8]
    570e:	54d1      	strb	r1, [r2, r3]
    5710:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    5712:	2b90      	cmp	r3, #144	; 0x90
    5714:	d1fa      	bne.n	570c <grid_led_buffer_init+0x40>
	for (uint32_t i = 0; i<mod->led_number; i++){
    5716:	786b      	ldrb	r3, [r5, #1]
    5718:	2b00      	cmp	r3, #0
    571a:	f000 8082 	beq.w	5822 <grid_led_buffer_init+0x156>
    571e:	2400      	movs	r4, #0
		grid_led_set_color(mod,i,0,0,0);
    5720:	4626      	mov	r6, r4
    5722:	4f43      	ldr	r7, [pc, #268]	; (5830 <grid_led_buffer_init+0x164>)
    5724:	9600      	str	r6, [sp, #0]
    5726:	4633      	mov	r3, r6
    5728:	4632      	mov	r2, r6
    572a:	4621      	mov	r1, r4
    572c:	4628      	mov	r0, r5
    572e:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    5730:	3401      	adds	r4, #1
    5732:	786b      	ldrb	r3, [r5, #1]
    5734:	42a3      	cmp	r3, r4
    5736:	d8f5      	bhi.n	5724 <grid_led_buffer_init+0x58>
	for(uint8_t i = 0; i<mod->led_number; i++){
    5738:	2b00      	cmp	r3, #0
    573a:	d072      	beq.n	5822 <grid_led_buffer_init+0x156>
    573c:	f04f 0b00 	mov.w	fp, #0
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    5740:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 583c <grid_led_buffer_init+0x170>
    5744:	2400      	movs	r4, #0
    5746:	9401      	str	r4, [sp, #4]
    5748:	9400      	str	r4, [sp, #0]
    574a:	4623      	mov	r3, r4
    574c:	2201      	movs	r2, #1
    574e:	4659      	mov	r1, fp
    5750:	4628      	mov	r0, r5
    5752:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    5754:	9401      	str	r4, [sp, #4]
    5756:	237f      	movs	r3, #127	; 0x7f
    5758:	9300      	str	r3, [sp, #0]
    575a:	4623      	mov	r3, r4
    575c:	2201      	movs	r2, #1
    575e:	4659      	mov	r1, fp
    5760:	4628      	mov	r0, r5
    5762:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 5840 <grid_led_buffer_init+0x174>
    5766:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    5768:	9401      	str	r4, [sp, #4]
    576a:	23ff      	movs	r3, #255	; 0xff
    576c:	9300      	str	r3, [sp, #0]
    576e:	4623      	mov	r3, r4
    5770:	2201      	movs	r2, #1
    5772:	4659      	mov	r1, fp
    5774:	4628      	mov	r0, r5
    5776:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 5844 <grid_led_buffer_init+0x178>
    577a:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    577c:	4623      	mov	r3, r4
    577e:	2201      	movs	r2, #1
    5780:	4659      	mov	r1, fp
    5782:	4628      	mov	r0, r5
    5784:	4f2b      	ldr	r7, [pc, #172]	; (5834 <grid_led_buffer_init+0x168>)
    5786:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    5788:	4623      	mov	r3, r4
    578a:	2201      	movs	r2, #1
    578c:	4659      	mov	r1, fp
    578e:	4628      	mov	r0, r5
    5790:	4e29      	ldr	r6, [pc, #164]	; (5838 <grid_led_buffer_init+0x16c>)
    5792:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x00, 0x00);
    5794:	9401      	str	r4, [sp, #4]
    5796:	9400      	str	r4, [sp, #0]
    5798:	4623      	mov	r3, r4
    579a:	2202      	movs	r2, #2
    579c:	4659      	mov	r1, fp
    579e:	4628      	mov	r0, r5
    57a0:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x7F, 0x00);
    57a2:	9401      	str	r4, [sp, #4]
    57a4:	237f      	movs	r3, #127	; 0x7f
    57a6:	9300      	str	r3, [sp, #0]
    57a8:	4623      	mov	r3, r4
    57aa:	2202      	movs	r2, #2
    57ac:	4659      	mov	r1, fp
    57ae:	4628      	mov	r0, r5
    57b0:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0xFF, 0x00);
    57b2:	9401      	str	r4, [sp, #4]
    57b4:	23ff      	movs	r3, #255	; 0xff
    57b6:	9300      	str	r3, [sp, #0]
    57b8:	4623      	mov	r3, r4
    57ba:	2202      	movs	r2, #2
    57bc:	4659      	mov	r1, fp
    57be:	4628      	mov	r0, r5
    57c0:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_B, 0);
    57c2:	4623      	mov	r3, r4
    57c4:	2202      	movs	r2, #2
    57c6:	4659      	mov	r1, fp
    57c8:	4628      	mov	r0, r5
    57ca:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_B, 0);
    57cc:	4623      	mov	r3, r4
    57ce:	2202      	movs	r2, #2
    57d0:	4659      	mov	r1, fp
    57d2:	4628      	mov	r0, r5
    57d4:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    57d6:	9401      	str	r4, [sp, #4]
    57d8:	9400      	str	r4, [sp, #0]
    57da:	4623      	mov	r3, r4
    57dc:	4622      	mov	r2, r4
    57de:	4659      	mov	r1, fp
    57e0:	4628      	mov	r0, r5
    57e2:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    57e4:	9401      	str	r4, [sp, #4]
    57e6:	9400      	str	r4, [sp, #0]
    57e8:	4623      	mov	r3, r4
    57ea:	4622      	mov	r2, r4
    57ec:	4659      	mov	r1, fp
    57ee:	4628      	mov	r0, r5
    57f0:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    57f2:	9401      	str	r4, [sp, #4]
    57f4:	9400      	str	r4, [sp, #0]
    57f6:	4623      	mov	r3, r4
    57f8:	4622      	mov	r2, r4
    57fa:	4659      	mov	r1, fp
    57fc:	4628      	mov	r0, r5
    57fe:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_ALERT, 0);
    5800:	4623      	mov	r3, r4
    5802:	4622      	mov	r2, r4
    5804:	4659      	mov	r1, fp
    5806:	4628      	mov	r0, r5
    5808:	47b8      	blx	r7
		grid_led_set_phase(mod, i, GRID_LED_LAYER_ALERT, 0);
    580a:	4623      	mov	r3, r4
    580c:	4622      	mov	r2, r4
    580e:	4659      	mov	r1, fp
    5810:	4628      	mov	r0, r5
    5812:	47b0      	blx	r6
	for(uint8_t i = 0; i<mod->led_number; i++){
    5814:	f10b 0b01 	add.w	fp, fp, #1
    5818:	fa5f fb8b 	uxtb.w	fp, fp
    581c:	786b      	ldrb	r3, [r5, #1]
    581e:	455b      	cmp	r3, fp
    5820:	d890      	bhi.n	5744 <grid_led_buffer_init+0x78>
}
    5822:	b003      	add	sp, #12
    5824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5828:	e7fe      	b.n	5828 <grid_led_buffer_init+0x15c>
    582a:	bf00      	nop
    582c:	0000aa59 	.word	0x0000aa59
    5830:	0000553d 	.word	0x0000553d
    5834:	000056b1 	.word	0x000056b1
    5838:	00005695 	.word	0x00005695
    583c:	000055b9 	.word	0x000055b9
    5840:	00005601 	.word	0x00005601
    5844:	0000564b 	.word	0x0000564b

00005848 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    5848:	b510      	push	{r4, lr}
    584a:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    584c:	2200      	movs	r2, #0
    584e:	4b08      	ldr	r3, [pc, #32]	; (5870 <grid_led_hardware_start_transfer_blocking+0x28>)
    5850:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    5852:	4808      	ldr	r0, [pc, #32]	; (5874 <grid_led_hardware_start_transfer_blocking+0x2c>)
    5854:	4b08      	ldr	r3, [pc, #32]	; (5878 <grid_led_hardware_start_transfer_blocking+0x30>)
    5856:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    5858:	88a2      	ldrh	r2, [r4, #4]
    585a:	68a1      	ldr	r1, [r4, #8]
    585c:	6960      	ldr	r0, [r4, #20]
    585e:	4b07      	ldr	r3, [pc, #28]	; (587c <grid_led_hardware_start_transfer_blocking+0x34>)
    5860:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    5862:	4a03      	ldr	r2, [pc, #12]	; (5870 <grid_led_hardware_start_transfer_blocking+0x28>)
    5864:	7813      	ldrb	r3, [r2, #0]
    5866:	b2db      	uxtb	r3, r3
    5868:	2b01      	cmp	r3, #1
    586a:	d1fb      	bne.n	5864 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    586c:	bd10      	pop	{r4, pc}
    586e:	bf00      	nop
    5870:	20000ca0 	.word	0x20000ca0
    5874:	20000b20 	.word	0x20000b20
    5878:	00005f45 	.word	0x00005f45
    587c:	00005cf1 	.word	0x00005cf1

00005880 <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    5880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5884:	b085      	sub	sp, #20
    5886:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    5888:	4b24      	ldr	r3, [pc, #144]	; (591c <grid_led_startup_animation+0x9c>)
    588a:	781b      	ldrb	r3, [r3, #0]
    588c:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    588e:	2b20      	cmp	r3, #32
    5890:	d00a      	beq.n	58a8 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    5892:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    5896:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    589a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    589e:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    58a2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 5928 <grid_led_startup_animation+0xa8>
    58a6:	e01e      	b.n	58e6 <grid_led_startup_animation+0x66>
		s= 2;
    58a8:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    58ac:	2300      	movs	r3, #0
    58ae:	9303      	str	r3, [sp, #12]
    58b0:	e7f3      	b.n	589a <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    58b2:	9500      	str	r5, [sp, #0]
    58b4:	462b      	mov	r3, r5
    58b6:	463a      	mov	r2, r7
    58b8:	4621      	mov	r1, r4
    58ba:	4630      	mov	r0, r6
    58bc:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    58be:	3401      	adds	r4, #1
    58c0:	b2e4      	uxtb	r4, r4
    58c2:	7873      	ldrb	r3, [r6, #1]
    58c4:	42a3      	cmp	r3, r4
    58c6:	d8f4      	bhi.n	58b2 <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    58c8:	4630      	mov	r0, r6
    58ca:	4b15      	ldr	r3, [pc, #84]	; (5920 <grid_led_startup_animation+0xa0>)
    58cc:	4798      	blx	r3
		delay_ms(1);
    58ce:	2001      	movs	r0, #1
    58d0:	4b14      	ldr	r3, [pc, #80]	; (5924 <grid_led_startup_animation+0xa4>)
    58d2:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    58d4:	f109 0901 	add.w	r9, r9, #1
    58d8:	fa5f f989 	uxtb.w	r9, r9
    58dc:	f10a 3aff 	add.w	sl, sl, #4294967295
    58e0:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    58e4:	d017      	beq.n	5916 <grid_led_startup_animation+0x96>
		for (uint8_t j=0; j<mod->led_number; j++){
    58e6:	7873      	ldrb	r3, [r6, #1]
    58e8:	2b00      	cmp	r3, #0
    58ea:	d0ed      	beq.n	58c8 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    58ec:	fb0b f709 	mul.w	r7, fp, r9
    58f0:	427b      	negs	r3, r7
    58f2:	b2ff      	uxtb	r7, r7
    58f4:	b2db      	uxtb	r3, r3
    58f6:	bf58      	it	pl
    58f8:	425f      	negpl	r7, r3
    58fa:	b2bf      	uxth	r7, r7
    58fc:	9b03      	ldr	r3, [sp, #12]
    58fe:	fb09 f503 	mul.w	r5, r9, r3
    5902:	fb0b f505 	mul.w	r5, fp, r5
    5906:	426b      	negs	r3, r5
    5908:	b2ed      	uxtb	r5, r5
    590a:	b2db      	uxtb	r3, r3
    590c:	bf58      	it	pl
    590e:	425d      	negpl	r5, r3
    5910:	b2ad      	uxth	r5, r5
    5912:	2400      	movs	r4, #0
    5914:	e7cd      	b.n	58b2 <grid_led_startup_animation+0x32>
}
    5916:	b005      	add	sp, #20
    5918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    591c:	40000c00 	.word	0x40000c00
    5920:	00005849 	.word	0x00005849
    5924:	00005ba5 	.word	0x00005ba5
    5928:	0000553d 	.word	0x0000553d

0000592c <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    592c:	b570      	push	{r4, r5, r6, lr}
    592e:	4604      	mov	r4, r0
    5930:	4e2b      	ldr	r6, [pc, #172]	; (59e0 <grid_led_init+0xb4>)
    5932:	2200      	movs	r2, #0
    5934:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    5936:	f003 0001 	and.w	r0, r3, #1
    593a:	2800      	cmp	r0, #0
    593c:	bf14      	ite	ne
    593e:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    5942:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    5946:	f3c3 0540 	ubfx	r5, r3, #1, #1
    594a:	2d00      	cmp	r5, #0
    594c:	bf14      	ite	ne
    594e:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    5952:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    5956:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    5958:	f3c3 0080 	ubfx	r0, r3, #2, #1
    595c:	2800      	cmp	r0, #0
    595e:	bf14      	ite	ne
    5960:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    5964:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    5968:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    596a:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    596e:	2d00      	cmp	r5, #0
    5970:	bf14      	ite	ne
    5972:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    5976:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    597a:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    597c:	f3c3 1500 	ubfx	r5, r3, #4, #1
    5980:	2d00      	cmp	r5, #0
    5982:	bf14      	ite	ne
    5984:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    5988:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    598c:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    598e:	f3c3 1040 	ubfx	r0, r3, #5, #1
    5992:	2800      	cmp	r0, #0
    5994:	bf14      	ite	ne
    5996:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    599a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    599e:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    59a0:	f3c3 1080 	ubfx	r0, r3, #6, #1
    59a4:	2800      	cmp	r0, #0
    59a6:	bf14      	ite	ne
    59a8:	200e      	movne	r0, #14
    59aa:	2008      	moveq	r0, #8
    59ac:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    59ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    59b2:	2b00      	cmp	r3, #0
    59b4:	bf14      	ite	ne
    59b6:	23e0      	movne	r3, #224	; 0xe0
    59b8:	2380      	moveq	r3, #128	; 0x80
    59ba:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    59bc:	f846 3f04 	str.w	r3, [r6, #4]!
    59c0:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    59c2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    59c6:	d1b5      	bne.n	5934 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    59c8:	4620      	mov	r0, r4
    59ca:	4b06      	ldr	r3, [pc, #24]	; (59e4 <grid_led_init+0xb8>)
    59cc:	4798      	blx	r3
	grid_led_hardware_init(mod);
    59ce:	4620      	mov	r0, r4
    59d0:	4b05      	ldr	r3, [pc, #20]	; (59e8 <grid_led_init+0xbc>)
    59d2:	4798      	blx	r3
	grid_led_startup_animation(mod);
    59d4:	4620      	mov	r0, r4
    59d6:	4b05      	ldr	r3, [pc, #20]	; (59ec <grid_led_init+0xc0>)
    59d8:	4798      	blx	r3
}
    59da:	2000      	movs	r0, #0
    59dc:	bd70      	pop	{r4, r5, r6, pc}
    59de:	bf00      	nop
    59e0:	20002da4 	.word	0x20002da4
    59e4:	000056cd 	.word	0x000056cd
    59e8:	0000558d 	.word	0x0000558d
    59ec:	00005881 	.word	0x00005881

000059f0 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    59f0:	b510      	push	{r4, lr}
    59f2:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    59f4:	2200      	movs	r2, #0
    59f6:	4b05      	ldr	r3, [pc, #20]	; (5a0c <grid_led_hardware_start_transfer+0x1c>)
    59f8:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    59fa:	4805      	ldr	r0, [pc, #20]	; (5a10 <grid_led_hardware_start_transfer+0x20>)
    59fc:	4b05      	ldr	r3, [pc, #20]	; (5a14 <grid_led_hardware_start_transfer+0x24>)
    59fe:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    5a00:	88a2      	ldrh	r2, [r4, #4]
    5a02:	68a1      	ldr	r1, [r4, #8]
    5a04:	6960      	ldr	r0, [r4, #20]
    5a06:	4b04      	ldr	r3, [pc, #16]	; (5a18 <grid_led_hardware_start_transfer+0x28>)
    5a08:	4798      	blx	r3
    5a0a:	bd10      	pop	{r4, pc}
    5a0c:	20000ca0 	.word	0x20000ca0
    5a10:	20000b20 	.word	0x20000b20
    5a14:	00005f45 	.word	0x00005f45
    5a18:	00005cf1 	.word	0x00005cf1

00005a1c <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    5a1c:	4b01      	ldr	r3, [pc, #4]	; (5a24 <grid_led_hardware_is_transfer_completed+0x8>)
    5a1e:	7818      	ldrb	r0, [r3, #0]
	
    5a20:	4770      	bx	lr
    5a22:	bf00      	nop
    5a24:	20000ca0 	.word	0x20000ca0

00005a28 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    5a28:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    5a2a:	6983      	ldr	r3, [r0, #24]
    5a2c:	b103      	cbz	r3, 5a30 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    5a2e:	4798      	blx	r3
    5a30:	bd08      	pop	{r3, pc}

00005a32 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    5a32:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    5a34:	69c3      	ldr	r3, [r0, #28]
    5a36:	b103      	cbz	r3, 5a3a <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    5a38:	4798      	blx	r3
    5a3a:	bd08      	pop	{r3, pc}

00005a3c <adc_async_channel_conversion_done>:
{
    5a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a40:	4606      	mov	r6, r0
    5a42:	460f      	mov	r7, r1
    5a44:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    5a46:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    5a48:	5c5c      	ldrb	r4, [r3, r1]
    5a4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5a4e:	00e4      	lsls	r4, r4, #3
    5a50:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    5a54:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    5a58:	f105 0a04 	add.w	sl, r5, #4
    5a5c:	b2d1      	uxtb	r1, r2
    5a5e:	4650      	mov	r0, sl
    5a60:	4b0c      	ldr	r3, [pc, #48]	; (5a94 <adc_async_channel_conversion_done+0x58>)
    5a62:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    5a64:	4630      	mov	r0, r6
    5a66:	4b0c      	ldr	r3, [pc, #48]	; (5a98 <adc_async_channel_conversion_done+0x5c>)
    5a68:	4798      	blx	r3
    5a6a:	2801      	cmp	r0, #1
    5a6c:	d907      	bls.n	5a7e <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    5a6e:	ea4f 2119 	mov.w	r1, r9, lsr #8
    5a72:	4650      	mov	r0, sl
    5a74:	4b07      	ldr	r3, [pc, #28]	; (5a94 <adc_async_channel_conversion_done+0x58>)
    5a76:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    5a78:	8aab      	ldrh	r3, [r5, #20]
    5a7a:	3301      	adds	r3, #1
    5a7c:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    5a7e:	8aab      	ldrh	r3, [r5, #20]
    5a80:	3301      	adds	r3, #1
    5a82:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    5a84:	f858 3004 	ldr.w	r3, [r8, r4]
    5a88:	b113      	cbz	r3, 5a90 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    5a8a:	4639      	mov	r1, r7
    5a8c:	4630      	mov	r0, r6
    5a8e:	4798      	blx	r3
    5a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a94:	0000689b 	.word	0x0000689b
    5a98:	00006bb1 	.word	0x00006bb1

00005a9c <adc_async_init>:
{
    5a9c:	b570      	push	{r4, r5, r6, lr}
    5a9e:	4606      	mov	r6, r0
	device = &descr->device;
    5aa0:	2000      	movs	r0, #0
		channel_map[i] = 0xFF;
    5aa2:	25ff      	movs	r5, #255	; 0xff
    5aa4:	b2c4      	uxtb	r4, r0
    5aa6:	5515      	strb	r5, [r2, r4]
    5aa8:	3001      	adds	r0, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    5aaa:	b2c4      	uxtb	r4, r0
    5aac:	429c      	cmp	r4, r3
    5aae:	d9f9      	bls.n	5aa4 <adc_async_init+0x8>
	descr->channel_map    = channel_map;
    5ab0:	6232      	str	r2, [r6, #32]
	descr->channel_max    = channel_max;
    5ab2:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	descr->channel_amount = channel_amount;
    5ab6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5aba:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    5abe:	9b05      	ldr	r3, [sp, #20]
    5ac0:	62b3      	str	r3, [r6, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    5ac2:	4630      	mov	r0, r6
    5ac4:	4b05      	ldr	r3, [pc, #20]	; (5adc <adc_async_init+0x40>)
    5ac6:	4798      	blx	r3
	if (init_status) {
    5ac8:	4603      	mov	r3, r0
    5aca:	b928      	cbnz	r0, 5ad8 <adc_async_init+0x3c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    5acc:	4a04      	ldr	r2, [pc, #16]	; (5ae0 <adc_async_init+0x44>)
    5ace:	60b2      	str	r2, [r6, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    5ad0:	4a04      	ldr	r2, [pc, #16]	; (5ae4 <adc_async_init+0x48>)
    5ad2:	6032      	str	r2, [r6, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    5ad4:	4a04      	ldr	r2, [pc, #16]	; (5ae8 <adc_async_init+0x4c>)
    5ad6:	6072      	str	r2, [r6, #4]
}
    5ad8:	4618      	mov	r0, r3
    5ada:	bd70      	pop	{r4, r5, r6, pc}
    5adc:	00006aad 	.word	0x00006aad
    5ae0:	00005a3d 	.word	0x00005a3d
    5ae4:	00005a29 	.word	0x00005a29
    5ae8:	00005a33 	.word	0x00005a33

00005aec <adc_async_register_channel_buffer>:
{
    5aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (descr->channel_map[channel] != 0xFF) {
    5af0:	6a07      	ldr	r7, [r0, #32]
    5af2:	5c7c      	ldrb	r4, [r7, r1]
    5af4:	2cff      	cmp	r4, #255	; 0xff
    5af6:	d12b      	bne.n	5b50 <adc_async_register_channel_buffer+0x64>
	for (i = 0; i <= descr->channel_max; i++) {
    5af8:	f890 e024 	ldrb.w	lr, [r0, #36]	; 0x24
    5afc:	2400      	movs	r4, #0
    5afe:	4625      	mov	r5, r4
		if (descr->channel_map[i] != 0xFF) {
    5b00:	b2e6      	uxtb	r6, r4
    5b02:	5dbe      	ldrb	r6, [r7, r6]
    5b04:	2eff      	cmp	r6, #255	; 0xff
			index++;
    5b06:	bf1c      	itt	ne
    5b08:	3501      	addne	r5, #1
    5b0a:	b2ed      	uxtbne	r5, r5
    5b0c:	3401      	adds	r4, #1
	for (i = 0; i <= descr->channel_max; i++) {
    5b0e:	b2e6      	uxtb	r6, r4
    5b10:	4576      	cmp	r6, lr
    5b12:	d9f5      	bls.n	5b00 <adc_async_register_channel_buffer+0x14>
	if (index > descr->channel_amount) {
    5b14:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
    5b18:	42ac      	cmp	r4, r5
    5b1a:	d31c      	bcc.n	5b56 <adc_async_register_channel_buffer+0x6a>
    5b1c:	4616      	mov	r6, r2
    5b1e:	460f      	mov	r7, r1
    5b20:	4680      	mov	r8, r0
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    5b22:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    5b26:	00e4      	lsls	r4, r4, #3
    5b28:	6a80      	ldr	r0, [r0, #40]	; 0x28
    5b2a:	4420      	add	r0, r4
    5b2c:	461a      	mov	r2, r3
    5b2e:	4631      	mov	r1, r6
    5b30:	3004      	adds	r0, #4
    5b32:	4b0c      	ldr	r3, [pc, #48]	; (5b64 <adc_async_register_channel_buffer+0x78>)
    5b34:	4798      	blx	r3
    5b36:	4602      	mov	r2, r0
    5b38:	b980      	cbnz	r0, 5b5c <adc_async_register_channel_buffer+0x70>
	descr->channel_map[channel]            = index;
    5b3a:	f8d8 3020 	ldr.w	r3, [r8, #32]
    5b3e:	55dd      	strb	r5, [r3, r7]
	descr->descr_ch[index].bytes_in_buffer = 0;
    5b40:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5b44:	441c      	add	r4, r3
    5b46:	2300      	movs	r3, #0
    5b48:	82a3      	strh	r3, [r4, #20]
}
    5b4a:	4610      	mov	r0, r2
    5b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    5b50:	f06f 020c 	mvn.w	r2, #12
    5b54:	e7f9      	b.n	5b4a <adc_async_register_channel_buffer+0x5e>
		return ERR_NO_RESOURCE;
    5b56:	f06f 021b 	mvn.w	r2, #27
    5b5a:	e7f6      	b.n	5b4a <adc_async_register_channel_buffer+0x5e>
		return ERR_INVALID_ARG;
    5b5c:	f06f 020c 	mvn.w	r2, #12
    5b60:	e7f3      	b.n	5b4a <adc_async_register_channel_buffer+0x5e>
    5b62:	bf00      	nop
    5b64:	0000685f 	.word	0x0000685f

00005b68 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    5b68:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    5b6c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5b6e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    5b70:	f3bf 8f5f 	dmb	sy
    5b74:	4770      	bx	lr

00005b76 <atomic_leave_critical>:
    5b76:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    5b7a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5b7c:	f383 8810 	msr	PRIMASK, r3
    5b80:	4770      	bx	lr
	...

00005b84 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    5b84:	b508      	push	{r3, lr}
	ASSERT(descr && hw);

	return _crc_sync_init(&descr->dev, hw);
    5b86:	4b01      	ldr	r3, [pc, #4]	; (5b8c <crc_sync_init+0x8>)
    5b88:	4798      	blx	r3
}
    5b8a:	bd08      	pop	{r3, pc}
    5b8c:	00006f65 	.word	0x00006f65

00005b90 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    5b90:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    5b92:	4b02      	ldr	r3, [pc, #8]	; (5b9c <delay_init+0xc>)
    5b94:	6018      	str	r0, [r3, #0]
    5b96:	4b02      	ldr	r3, [pc, #8]	; (5ba0 <delay_init+0x10>)
    5b98:	4798      	blx	r3
    5b9a:	bd08      	pop	{r3, pc}
    5b9c:	20000144 	.word	0x20000144
    5ba0:	00008339 	.word	0x00008339

00005ba4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    5ba4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    5ba6:	4b04      	ldr	r3, [pc, #16]	; (5bb8 <delay_ms+0x14>)
    5ba8:	681c      	ldr	r4, [r3, #0]
    5baa:	4b04      	ldr	r3, [pc, #16]	; (5bbc <delay_ms+0x18>)
    5bac:	4798      	blx	r3
    5bae:	4601      	mov	r1, r0
    5bb0:	4620      	mov	r0, r4
    5bb2:	4b03      	ldr	r3, [pc, #12]	; (5bc0 <delay_ms+0x1c>)
    5bb4:	4798      	blx	r3
    5bb6:	bd10      	pop	{r4, pc}
    5bb8:	20000144 	.word	0x20000144
    5bbc:	00006c31 	.word	0x00006c31
    5bc0:	0000834d 	.word	0x0000834d

00005bc4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    5bc4:	b508      	push	{r3, lr}
	return _event_system_init();
    5bc6:	4b01      	ldr	r3, [pc, #4]	; (5bcc <event_system_init+0x8>)
    5bc8:	4798      	blx	r3
}
    5bca:	bd08      	pop	{r3, pc}
    5bcc:	00006f6d 	.word	0x00006f6d

00005bd0 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    5bd0:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    5bd2:	6943      	ldr	r3, [r0, #20]
    5bd4:	b103      	cbz	r3, 5bd8 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    5bd6:	4798      	blx	r3
    5bd8:	bd08      	pop	{r3, pc}

00005bda <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    5bda:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    5bdc:	6983      	ldr	r3, [r0, #24]
    5bde:	b103      	cbz	r3, 5be2 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    5be0:	4798      	blx	r3
    5be2:	bd08      	pop	{r3, pc}

00005be4 <flash_init>:
{
    5be4:	b510      	push	{r4, lr}
    5be6:	4604      	mov	r4, r0
	rc = _flash_init(&flash->dev, hw);
    5be8:	4b04      	ldr	r3, [pc, #16]	; (5bfc <flash_init+0x18>)
    5bea:	4798      	blx	r3
	if (rc) {
    5bec:	4603      	mov	r3, r0
    5bee:	b918      	cbnz	r0, 5bf8 <flash_init+0x14>
	flash->dev.flash_cb.ready_cb = flash_ready;
    5bf0:	4a03      	ldr	r2, [pc, #12]	; (5c00 <flash_init+0x1c>)
    5bf2:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    5bf4:	4a03      	ldr	r2, [pc, #12]	; (5c04 <flash_init+0x20>)
    5bf6:	6062      	str	r2, [r4, #4]
}
    5bf8:	4618      	mov	r0, r3
    5bfa:	bd10      	pop	{r4, pc}
    5bfc:	00007079 	.word	0x00007079
    5c00:	00005bd1 	.word	0x00005bd1
    5c04:	00005bdb 	.word	0x00005bdb

00005c08 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5c08:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5c0a:	8843      	ldrh	r3, [r0, #2]
    5c0c:	f413 7f80 	tst.w	r3, #256	; 0x100
    5c10:	d102      	bne.n	5c18 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    5c12:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5c14:	b103      	cbz	r3, 5c18 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    5c16:	4798      	blx	r3
    5c18:	bd08      	pop	{r3, pc}

00005c1a <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5c1a:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5c1c:	8843      	ldrh	r3, [r0, #2]
    5c1e:	f413 7f80 	tst.w	r3, #256	; 0x100
    5c22:	d102      	bne.n	5c2a <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    5c24:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5c26:	b103      	cbz	r3, 5c2a <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    5c28:	4798      	blx	r3
    5c2a:	bd08      	pop	{r3, pc}

00005c2c <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    5c2c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5c2e:	8843      	ldrh	r3, [r0, #2]
    5c30:	f413 7f80 	tst.w	r3, #256	; 0x100
    5c34:	d102      	bne.n	5c3c <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    5c36:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c38:	b103      	cbz	r3, 5c3c <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    5c3a:	4798      	blx	r3
    5c3c:	bd08      	pop	{r3, pc}
	...

00005c40 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    5c40:	b510      	push	{r4, lr}
    5c42:	b084      	sub	sp, #16
    5c44:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    5c46:	8a83      	ldrh	r3, [r0, #20]
    5c48:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    5c4c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    5c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    5c52:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    5c56:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5c58:	a901      	add	r1, sp, #4
    5c5a:	3828      	subs	r0, #40	; 0x28
    5c5c:	4b03      	ldr	r3, [pc, #12]	; (5c6c <i2c_m_async_write+0x2c>)
    5c5e:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    5c60:	2800      	cmp	r0, #0
    5c62:	bf08      	it	eq
    5c64:	4620      	moveq	r0, r4
    5c66:	b004      	add	sp, #16
    5c68:	bd10      	pop	{r4, pc}
    5c6a:	bf00      	nop
    5c6c:	00007b6d 	.word	0x00007b6d

00005c70 <i2c_m_async_read>:
{
    5c70:	b510      	push	{r4, lr}
    5c72:	b084      	sub	sp, #16
    5c74:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    5c76:	8a83      	ldrh	r3, [r0, #20]
    5c78:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    5c7c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    5c7e:	f248 0301 	movw	r3, #32769	; 0x8001
    5c82:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    5c86:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5c88:	a901      	add	r1, sp, #4
    5c8a:	3828      	subs	r0, #40	; 0x28
    5c8c:	4b03      	ldr	r3, [pc, #12]	; (5c9c <i2c_m_async_read+0x2c>)
    5c8e:	4798      	blx	r3
}
    5c90:	2800      	cmp	r0, #0
    5c92:	bf08      	it	eq
    5c94:	4620      	moveq	r0, r4
    5c96:	b004      	add	sp, #16
    5c98:	bd10      	pop	{r4, pc}
    5c9a:	bf00      	nop
    5c9c:	00007b6d 	.word	0x00007b6d

00005ca0 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    5ca0:	b570      	push	{r4, r5, r6, lr}
    5ca2:	4604      	mov	r4, r0
	int32_t init_status;
	ASSERT(i2c);

	init_status = _i2c_m_async_init(&i2c->device, hw);
    5ca4:	4b0b      	ldr	r3, [pc, #44]	; (5cd4 <i2c_m_async_init+0x34>)
    5ca6:	4798      	blx	r3
	if (init_status) {
    5ca8:	4605      	mov	r5, r0
    5caa:	b108      	cbz	r0, 5cb0 <i2c_m_async_init+0x10>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    5cac:	4628      	mov	r0, r5
    5cae:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    5cb0:	4b09      	ldr	r3, [pc, #36]	; (5cd8 <i2c_m_async_init+0x38>)
    5cb2:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    5cb4:	4b09      	ldr	r3, [pc, #36]	; (5cdc <i2c_m_async_init+0x3c>)
    5cb6:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    5cb8:	4a09      	ldr	r2, [pc, #36]	; (5ce0 <i2c_m_async_init+0x40>)
    5cba:	2101      	movs	r1, #1
    5cbc:	4620      	mov	r0, r4
    5cbe:	4e09      	ldr	r6, [pc, #36]	; (5ce4 <i2c_m_async_init+0x44>)
    5cc0:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    5cc2:	4a09      	ldr	r2, [pc, #36]	; (5ce8 <i2c_m_async_init+0x48>)
    5cc4:	2102      	movs	r1, #2
    5cc6:	4620      	mov	r0, r4
    5cc8:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    5cca:	4a08      	ldr	r2, [pc, #32]	; (5cec <i2c_m_async_init+0x4c>)
    5ccc:	2100      	movs	r1, #0
    5cce:	4620      	mov	r0, r4
    5cd0:	47b0      	blx	r6
	return ERR_NONE;
    5cd2:	e7eb      	b.n	5cac <i2c_m_async_init+0xc>
    5cd4:	00007b09 	.word	0x00007b09
    5cd8:	00005c71 	.word	0x00005c71
    5cdc:	00005c41 	.word	0x00005c41
    5ce0:	00005c09 	.word	0x00005c09
    5ce4:	00007c4b 	.word	0x00007c4b
    5ce8:	00005c1b 	.word	0x00005c1b
    5cec:	00005c2d 	.word	0x00005c2d

00005cf0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5cf0:	b508      	push	{r3, lr}
	ASSERT(io_descr && buf);
	return io_descr->write(io_descr, buf, length);
    5cf2:	6803      	ldr	r3, [r0, #0]
    5cf4:	4798      	blx	r3
}
    5cf6:	bd08      	pop	{r3, pc}

00005cf8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    5cf8:	b508      	push	{r3, lr}
	ASSERT(io_descr && buf);
	return io_descr->read(io_descr, buf, length);
    5cfa:	6843      	ldr	r3, [r0, #4]
    5cfc:	4798      	blx	r3
}
    5cfe:	bd08      	pop	{r3, pc}

00005d00 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    5d00:	b508      	push	{r3, lr}
	ASSERT(qspi && hw);

	return _qspi_dma_init(&qspi->dev, hw);
    5d02:	4b01      	ldr	r3, [pc, #4]	; (5d08 <qspi_dma_init+0x8>)
    5d04:	4798      	blx	r3
}
    5d06:	bd08      	pop	{r3, pc}
    5d08:	0000726d 	.word	0x0000726d

00005d0c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5d0c:	b510      	push	{r4, lr}
	ASSERT(io);
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    5d0e:	2400      	movs	r4, #0
    5d10:	6184      	str	r4, [r0, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    5d12:	6141      	str	r1, [r0, #20]
	spi->xfer.size  = length;
    5d14:	61c2      	str	r2, [r0, #28]
	spi->xfercnt    = 0;
    5d16:	6204      	str	r4, [r0, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5d18:	2310      	movs	r3, #16
    5d1a:	7203      	strb	r3, [r0, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    5d1c:	2101      	movs	r1, #1
    5d1e:	3820      	subs	r0, #32
    5d20:	4b01      	ldr	r3, [pc, #4]	; (5d28 <_spi_m_async_io_write+0x1c>)
    5d22:	4798      	blx	r3

	return ERR_NONE;
}
    5d24:	4620      	mov	r0, r4
    5d26:	bd10      	pop	{r4, pc}
    5d28:	00008015 	.word	0x00008015

00005d2c <_spi_m_async_io_read>:
{
    5d2c:	b538      	push	{r3, r4, r5, lr}
	spi->xfer.rxbuf = buf;
    5d2e:	6181      	str	r1, [r0, #24]
	spi->xfer.txbuf = NULL;
    5d30:	2500      	movs	r5, #0
    5d32:	6145      	str	r5, [r0, #20]
	spi->xfer.size  = length;
    5d34:	61c2      	str	r2, [r0, #28]
	spi->xfercnt    = 0;
    5d36:	6205      	str	r5, [r0, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5d38:	2310      	movs	r3, #16
    5d3a:	7203      	strb	r3, [r0, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    5d3c:	f1a0 0420 	sub.w	r4, r0, #32
    5d40:	2101      	movs	r1, #1
    5d42:	4620      	mov	r0, r4
    5d44:	4b04      	ldr	r3, [pc, #16]	; (5d58 <_spi_m_async_io_read+0x2c>)
    5d46:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    5d48:	f240 11ff 	movw	r1, #511	; 0x1ff
    5d4c:	4620      	mov	r0, r4
    5d4e:	4b03      	ldr	r3, [pc, #12]	; (5d5c <_spi_m_async_io_read+0x30>)
    5d50:	4798      	blx	r3
}
    5d52:	4628      	mov	r0, r5
    5d54:	bd38      	pop	{r3, r4, r5, pc}
    5d56:	bf00      	nop
    5d58:	00008027 	.word	0x00008027
    5d5c:	0000804d 	.word	0x0000804d

00005d60 <_spi_dev_error>:
{
    5d60:	b570      	push	{r4, r5, r6, lr}
    5d62:	4604      	mov	r4, r0
    5d64:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    5d66:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    5d68:	2100      	movs	r1, #0
    5d6a:	4b09      	ldr	r3, [pc, #36]	; (5d90 <_spi_dev_error+0x30>)
    5d6c:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    5d6e:	2100      	movs	r1, #0
    5d70:	4620      	mov	r0, r4
    5d72:	4b08      	ldr	r3, [pc, #32]	; (5d94 <_spi_dev_error+0x34>)
    5d74:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    5d76:	2100      	movs	r1, #0
    5d78:	4620      	mov	r0, r4
    5d7a:	4b07      	ldr	r3, [pc, #28]	; (5d98 <_spi_dev_error+0x38>)
    5d7c:	4798      	blx	r3
	spi->stat = 0;
    5d7e:	2300      	movs	r3, #0
    5d80:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    5d84:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5d86:	b113      	cbz	r3, 5d8e <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    5d88:	4631      	mov	r1, r6
    5d8a:	4628      	mov	r0, r5
    5d8c:	4798      	blx	r3
    5d8e:	bd70      	pop	{r4, r5, r6, pc}
    5d90:	00008015 	.word	0x00008015
    5d94:	00008027 	.word	0x00008027
    5d98:	00008039 	.word	0x00008039

00005d9c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    5d9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5d9e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    5da0:	429a      	cmp	r2, r3
    5da2:	d200      	bcs.n	5da6 <_spi_dev_complete+0xa>
    5da4:	4770      	bx	lr
{
    5da6:	b510      	push	{r4, lr}
    5da8:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    5daa:	2100      	movs	r1, #0
    5dac:	4b04      	ldr	r3, [pc, #16]	; (5dc0 <_spi_dev_complete+0x24>)
    5dae:	4798      	blx	r3
		spi->stat = 0;
    5db0:	2300      	movs	r3, #0
    5db2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    5db6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5db8:	b10b      	cbz	r3, 5dbe <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    5dba:	1f20      	subs	r0, r4, #4
    5dbc:	4798      	blx	r3
    5dbe:	bd10      	pop	{r4, pc}
    5dc0:	00008039 	.word	0x00008039

00005dc4 <_spi_dev_tx>:
{
    5dc4:	b510      	push	{r4, lr}
    5dc6:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    5dc8:	7903      	ldrb	r3, [r0, #4]
    5dca:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    5dcc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    5dce:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5dd0:	f103 0101 	add.w	r1, r3, #1
    5dd4:	6401      	str	r1, [r0, #64]	; 0x40
    5dd6:	bf94      	ite	ls
    5dd8:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    5dda:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    5dde:	4b08      	ldr	r3, [pc, #32]	; (5e00 <_spi_dev_tx+0x3c>)
    5de0:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    5de2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    5de4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5de6:	429a      	cmp	r2, r3
    5de8:	d000      	beq.n	5dec <_spi_dev_tx+0x28>
    5dea:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    5dec:	2100      	movs	r1, #0
    5dee:	4620      	mov	r0, r4
    5df0:	4b04      	ldr	r3, [pc, #16]	; (5e04 <_spi_dev_tx+0x40>)
    5df2:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    5df4:	2101      	movs	r1, #1
    5df6:	4620      	mov	r0, r4
    5df8:	4b03      	ldr	r3, [pc, #12]	; (5e08 <_spi_dev_tx+0x44>)
    5dfa:	4798      	blx	r3
}
    5dfc:	e7f5      	b.n	5dea <_spi_dev_tx+0x26>
    5dfe:	bf00      	nop
    5e00:	0000804d 	.word	0x0000804d
    5e04:	00008015 	.word	0x00008015
    5e08:	00008039 	.word	0x00008039

00005e0c <_spi_dev_rx>:
{
    5e0c:	b570      	push	{r4, r5, r6, lr}
    5e0e:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    5e10:	6b85      	ldr	r5, [r0, #56]	; 0x38
    5e12:	b305      	cbz	r5, 5e56 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    5e14:	7903      	ldrb	r3, [r0, #4]
    5e16:	2b01      	cmp	r3, #1
    5e18:	d916      	bls.n	5e48 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    5e1a:	6c06      	ldr	r6, [r0, #64]	; 0x40
    5e1c:	1c73      	adds	r3, r6, #1
    5e1e:	6403      	str	r3, [r0, #64]	; 0x40
    5e20:	4b18      	ldr	r3, [pc, #96]	; (5e84 <_spi_dev_rx+0x78>)
    5e22:	4798      	blx	r3
    5e24:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    5e28:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5e2a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    5e2c:	4293      	cmp	r3, r2
    5e2e:	d21d      	bcs.n	5e6c <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    5e30:	6b62      	ldr	r2, [r4, #52]	; 0x34
    5e32:	b1b2      	cbz	r2, 5e62 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    5e34:	7921      	ldrb	r1, [r4, #4]
    5e36:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    5e38:	bf94      	ite	ls
    5e3a:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    5e3c:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    5e40:	4620      	mov	r0, r4
    5e42:	4b11      	ldr	r3, [pc, #68]	; (5e88 <_spi_dev_rx+0x7c>)
    5e44:	4798      	blx	r3
    5e46:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    5e48:	6c06      	ldr	r6, [r0, #64]	; 0x40
    5e4a:	1c73      	adds	r3, r6, #1
    5e4c:	6403      	str	r3, [r0, #64]	; 0x40
    5e4e:	4b0d      	ldr	r3, [pc, #52]	; (5e84 <_spi_dev_rx+0x78>)
    5e50:	4798      	blx	r3
    5e52:	55a8      	strb	r0, [r5, r6]
    5e54:	e7e8      	b.n	5e28 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    5e56:	4b0b      	ldr	r3, [pc, #44]	; (5e84 <_spi_dev_rx+0x78>)
    5e58:	4798      	blx	r3
		spi->xfercnt++;
    5e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5e5c:	3301      	adds	r3, #1
    5e5e:	6423      	str	r3, [r4, #64]	; 0x40
    5e60:	e7e2      	b.n	5e28 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    5e62:	88e1      	ldrh	r1, [r4, #6]
    5e64:	4620      	mov	r0, r4
    5e66:	4b08      	ldr	r3, [pc, #32]	; (5e88 <_spi_dev_rx+0x7c>)
    5e68:	4798      	blx	r3
    5e6a:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    5e6c:	2100      	movs	r1, #0
    5e6e:	4620      	mov	r0, r4
    5e70:	4b06      	ldr	r3, [pc, #24]	; (5e8c <_spi_dev_rx+0x80>)
    5e72:	4798      	blx	r3
		spi->stat = 0;
    5e74:	2300      	movs	r3, #0
    5e76:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    5e7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5e7c:	b10b      	cbz	r3, 5e82 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    5e7e:	1f20      	subs	r0, r4, #4
    5e80:	4798      	blx	r3
    5e82:	bd70      	pop	{r4, r5, r6, pc}
    5e84:	00008055 	.word	0x00008055
    5e88:	0000804d 	.word	0x0000804d
    5e8c:	00008027 	.word	0x00008027

00005e90 <spi_m_async_init>:
{
    5e90:	b570      	push	{r4, r5, r6, lr}
    5e92:	4605      	mov	r5, r0
	spi->dev.prvt = (void *)hw;
    5e94:	4604      	mov	r4, r0
    5e96:	f844 1f04 	str.w	r1, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    5e9a:	4620      	mov	r0, r4
    5e9c:	4b0d      	ldr	r3, [pc, #52]	; (5ed4 <spi_m_async_init+0x44>)
    5e9e:	4798      	blx	r3
	if (rc >= 0) {
    5ea0:	2800      	cmp	r0, #0
    5ea2:	db15      	blt.n	5ed0 <spi_m_async_init+0x40>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    5ea4:	4a0c      	ldr	r2, [pc, #48]	; (5ed8 <spi_m_async_init+0x48>)
    5ea6:	2100      	movs	r1, #0
    5ea8:	4620      	mov	r0, r4
    5eaa:	4e0c      	ldr	r6, [pc, #48]	; (5edc <spi_m_async_init+0x4c>)
    5eac:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    5eae:	4a0c      	ldr	r2, [pc, #48]	; (5ee0 <spi_m_async_init+0x50>)
    5eb0:	2101      	movs	r1, #1
    5eb2:	4620      	mov	r0, r4
    5eb4:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    5eb6:	4a0b      	ldr	r2, [pc, #44]	; (5ee4 <spi_m_async_init+0x54>)
    5eb8:	2102      	movs	r1, #2
    5eba:	4620      	mov	r0, r4
    5ebc:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    5ebe:	4a0a      	ldr	r2, [pc, #40]	; (5ee8 <spi_m_async_init+0x58>)
    5ec0:	2103      	movs	r1, #3
    5ec2:	4620      	mov	r0, r4
    5ec4:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
    5ec6:	4b09      	ldr	r3, [pc, #36]	; (5eec <spi_m_async_init+0x5c>)
    5ec8:	62ab      	str	r3, [r5, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    5eca:	4b09      	ldr	r3, [pc, #36]	; (5ef0 <spi_m_async_init+0x60>)
    5ecc:	626b      	str	r3, [r5, #36]	; 0x24
	return ERR_NONE;
    5ece:	2000      	movs	r0, #0
}
    5ed0:	bd70      	pop	{r4, r5, r6, pc}
    5ed2:	bf00      	nop
    5ed4:	00007fad 	.word	0x00007fad
    5ed8:	00005dc5 	.word	0x00005dc5
    5edc:	0000805d 	.word	0x0000805d
    5ee0:	00005e0d 	.word	0x00005e0d
    5ee4:	00005d9d 	.word	0x00005d9d
    5ee8:	00005d61 	.word	0x00005d61
    5eec:	00005d2d 	.word	0x00005d2d
    5ef0:	00005d0d 	.word	0x00005d0d

00005ef4 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5ef4:	b510      	push	{r4, lr}
	ASSERT(io);

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    5ef6:	4613      	mov	r3, r2
    5ef8:	2200      	movs	r2, #0
    5efa:	381c      	subs	r0, #28
    5efc:	4c01      	ldr	r4, [pc, #4]	; (5f04 <_spi_m_dma_io_write+0x10>)
    5efe:	47a0      	blx	r4
}
    5f00:	bd10      	pop	{r4, pc}
    5f02:	bf00      	nop
    5f04:	0000821d 	.word	0x0000821d

00005f08 <_spi_m_dma_io_read>:
{
    5f08:	b510      	push	{r4, lr}
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    5f0a:	4613      	mov	r3, r2
    5f0c:	460a      	mov	r2, r1
    5f0e:	2100      	movs	r1, #0
    5f10:	381c      	subs	r0, #28
    5f12:	4c01      	ldr	r4, [pc, #4]	; (5f18 <_spi_m_dma_io_read+0x10>)
    5f14:	47a0      	blx	r4
}
    5f16:	bd10      	pop	{r4, pc}
    5f18:	0000821d 	.word	0x0000821d

00005f1c <spi_m_dma_init>:
{
    5f1c:	b510      	push	{r4, lr}
    5f1e:	4604      	mov	r4, r0
	spi->dev.prvt = (void *)hw;
    5f20:	f840 1f04 	str.w	r1, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    5f24:	4b04      	ldr	r3, [pc, #16]	; (5f38 <spi_m_dma_init+0x1c>)
    5f26:	4798      	blx	r3
	if (rc) {
    5f28:	4603      	mov	r3, r0
    5f2a:	b918      	cbnz	r0, 5f34 <spi_m_dma_init+0x18>
	spi->io.read  = _spi_m_dma_io_read;
    5f2c:	4a03      	ldr	r2, [pc, #12]	; (5f3c <spi_m_dma_init+0x20>)
    5f2e:	6262      	str	r2, [r4, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    5f30:	4a03      	ldr	r2, [pc, #12]	; (5f40 <spi_m_dma_init+0x24>)
    5f32:	6222      	str	r2, [r4, #32]
}
    5f34:	4618      	mov	r0, r3
    5f36:	bd10      	pop	{r4, pc}
    5f38:	00008069 	.word	0x00008069
    5f3c:	00005f09 	.word	0x00005f09
    5f40:	00005ef5 	.word	0x00005ef5

00005f44 <spi_m_dma_enable>:
{
    5f44:	b508      	push	{r3, lr}
	_spi_m_dma_enable(&spi->dev);
    5f46:	3004      	adds	r0, #4
    5f48:	4b01      	ldr	r3, [pc, #4]	; (5f50 <spi_m_dma_enable+0xc>)
    5f4a:	4798      	blx	r3
    5f4c:	bd08      	pop	{r3, pc}
    5f4e:	bf00      	nop
    5f50:	0000819d 	.word	0x0000819d

00005f54 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    5f54:	b508      	push	{r3, lr}
	ASSERT(spi);
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    5f56:	3004      	adds	r0, #4
    5f58:	4b01      	ldr	r3, [pc, #4]	; (5f60 <spi_m_dma_register_callback+0xc>)
    5f5a:	4798      	blx	r3
    5f5c:	bd08      	pop	{r3, pc}
    5f5e:	bf00      	nop
    5f60:	000081ad 	.word	0x000081ad

00005f64 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
	ASSERT(spi && io);
	*io = &spi->io;
    5f64:	3020      	adds	r0, #32
    5f66:	6008      	str	r0, [r1, #0]

	return 0;
}
    5f68:	2000      	movs	r0, #0
    5f6a:	4770      	bx	lr

00005f6c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f6e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    5f70:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    5f72:	b12f      	cbz	r7, 5f80 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    5f74:	688d      	ldr	r5, [r1, #8]
    5f76:	463c      	mov	r4, r7
    5f78:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5f7a:	f1c2 0e01 	rsb	lr, r2, #1
    5f7e:	e00b      	b.n	5f98 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    5f80:	4b0e      	ldr	r3, [pc, #56]	; (5fbc <timer_add_timer_task+0x50>)
    5f82:	4798      	blx	r3
		return;
    5f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5f86:	4473      	add	r3, lr
    5f88:	68a0      	ldr	r0, [r4, #8]
    5f8a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    5f8c:	42ab      	cmp	r3, r5
    5f8e:	d20a      	bcs.n	5fa6 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    5f90:	6823      	ldr	r3, [r4, #0]
    5f92:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5f94:	b153      	cbz	r3, 5fac <timer_add_timer_task+0x40>
    5f96:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    5f98:	6863      	ldr	r3, [r4, #4]
    5f9a:	4293      	cmp	r3, r2
    5f9c:	d8f3      	bhi.n	5f86 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    5f9e:	68a0      	ldr	r0, [r4, #8]
    5fa0:	4403      	add	r3, r0
    5fa2:	1a9b      	subs	r3, r3, r2
    5fa4:	e7f2      	b.n	5f8c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    5fa6:	42a7      	cmp	r7, r4
    5fa8:	d004      	beq.n	5fb4 <timer_add_timer_task+0x48>
    5faa:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    5fac:	4620      	mov	r0, r4
    5fae:	4b04      	ldr	r3, [pc, #16]	; (5fc0 <timer_add_timer_task+0x54>)
    5fb0:	4798      	blx	r3
    5fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    5fb4:	4660      	mov	r0, ip
    5fb6:	4b01      	ldr	r3, [pc, #4]	; (5fbc <timer_add_timer_task+0x50>)
    5fb8:	4798      	blx	r3
    5fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5fbc:	00006829 	.word	0x00006829
    5fc0:	00006831 	.word	0x00006831

00005fc4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    5fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    5fc8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    5fca:	6907      	ldr	r7, [r0, #16]
    5fcc:	3701      	adds	r7, #1
    5fce:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    5fd0:	7e03      	ldrb	r3, [r0, #24]
    5fd2:	f013 0f01 	tst.w	r3, #1
    5fd6:	d113      	bne.n	6000 <timer_process_counted+0x3c>
    5fd8:	7e03      	ldrb	r3, [r0, #24]
    5fda:	f013 0f02 	tst.w	r3, #2
    5fde:	d10f      	bne.n	6000 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    5fe0:	b354      	cbz	r4, 6038 <timer_process_counted+0x74>
    5fe2:	6863      	ldr	r3, [r4, #4]
    5fe4:	1afb      	subs	r3, r7, r3
    5fe6:	68a2      	ldr	r2, [r4, #8]
    5fe8:	4293      	cmp	r3, r2
    5fea:	d307      	bcc.n	5ffc <timer_process_counted+0x38>
    5fec:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    5fee:	f100 0814 	add.w	r8, r0, #20
    5ff2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 603c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    5ff6:	f8df a048 	ldr.w	sl, [pc, #72]	; 6040 <timer_process_counted+0x7c>
    5ffa:	e012      	b.n	6022 <timer_process_counted+0x5e>
    5ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    6000:	7e03      	ldrb	r3, [r0, #24]
    6002:	f043 0302 	orr.w	r3, r3, #2
    6006:	7603      	strb	r3, [r0, #24]
		return;
    6008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    600c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    600e:	68e3      	ldr	r3, [r4, #12]
    6010:	4620      	mov	r0, r4
    6012:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    6014:	b185      	cbz	r5, 6038 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    6016:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    6018:	686b      	ldr	r3, [r5, #4]
    601a:	1afb      	subs	r3, r7, r3
    601c:	68aa      	ldr	r2, [r5, #8]
    601e:	4293      	cmp	r3, r2
    6020:	d30a      	bcc.n	6038 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    6022:	4640      	mov	r0, r8
    6024:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    6026:	7c23      	ldrb	r3, [r4, #16]
    6028:	2b01      	cmp	r3, #1
    602a:	d1ef      	bne.n	600c <timer_process_counted+0x48>
			tmp->time_label = time;
    602c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    602e:	463a      	mov	r2, r7
    6030:	4621      	mov	r1, r4
    6032:	4640      	mov	r0, r8
    6034:	47d0      	blx	sl
    6036:	e7e9      	b.n	600c <timer_process_counted+0x48>
    6038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    603c:	00006853 	.word	0x00006853
    6040:	00005f6d 	.word	0x00005f6d

00006044 <timer_init>:
{
    6044:	b510      	push	{r4, lr}
    6046:	4604      	mov	r4, r0
	descr->func = func;
    6048:	f840 2b04 	str.w	r2, [r0], #4
	descr->func->init(&descr->device, hw);
    604c:	6813      	ldr	r3, [r2, #0]
    604e:	4798      	blx	r3
	descr->time                           = 0;
    6050:	2000      	movs	r0, #0
    6052:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    6054:	4b01      	ldr	r3, [pc, #4]	; (605c <timer_init+0x18>)
    6056:	6063      	str	r3, [r4, #4]
}
    6058:	bd10      	pop	{r4, pc}
    605a:	bf00      	nop
    605c:	00005fc5 	.word	0x00005fc5

00006060 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    6060:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    6062:	2300      	movs	r3, #0
    6064:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    6066:	69c3      	ldr	r3, [r0, #28]
    6068:	b11b      	cbz	r3, 6072 <usart_transmission_complete+0x12>
    606a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    606e:	4610      	mov	r0, r2
    6070:	4798      	blx	r3
    6072:	bd08      	pop	{r3, pc}

00006074 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    6074:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    6076:	2300      	movs	r3, #0
    6078:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    607a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    607c:	b11b      	cbz	r3, 6086 <usart_error+0x12>
    607e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    6082:	4610      	mov	r0, r2
    6084:	4798      	blx	r3
    6086:	bd08      	pop	{r3, pc}

00006088 <usart_fill_rx_buffer>:
{
    6088:	b538      	push	{r3, r4, r5, lr}
    608a:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    608c:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    6090:	302c      	adds	r0, #44	; 0x2c
    6092:	4b03      	ldr	r3, [pc, #12]	; (60a0 <usart_fill_rx_buffer+0x18>)
    6094:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    6096:	6a23      	ldr	r3, [r4, #32]
    6098:	b10b      	cbz	r3, 609e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    609a:	4628      	mov	r0, r5
    609c:	4798      	blx	r3
    609e:	bd38      	pop	{r3, r4, r5, pc}
    60a0:	0000689b 	.word	0x0000689b

000060a4 <usart_async_write>:
{
    60a4:	b510      	push	{r4, lr}
	if (descr->tx_por != descr->tx_buffer_length) {
    60a6:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
    60aa:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    60ae:	429c      	cmp	r4, r3
    60b0:	d10d      	bne.n	60ce <usart_async_write+0x2a>
    60b2:	4614      	mov	r4, r2
	descr->tx_buffer        = (uint8_t *)buf;
    60b4:	6481      	str	r1, [r0, #72]	; 0x48
	descr->tx_buffer_length = length;
    60b6:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
	descr->tx_por           = 0;
    60ba:	2300      	movs	r3, #0
    60bc:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    60c0:	2301      	movs	r3, #1
    60c2:	6303      	str	r3, [r0, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    60c4:	3008      	adds	r0, #8
    60c6:	4b03      	ldr	r3, [pc, #12]	; (60d4 <usart_async_write+0x30>)
    60c8:	4798      	blx	r3
	return (int32_t)length;
    60ca:	4620      	mov	r0, r4
    60cc:	bd10      	pop	{r4, pc}
		return ERR_NO_RESOURCE;
    60ce:	f06f 001b 	mvn.w	r0, #27
}
    60d2:	bd10      	pop	{r4, pc}
    60d4:	00007af7 	.word	0x00007af7

000060d8 <usart_process_byte_sent>:
{
    60d8:	b510      	push	{r4, lr}
    60da:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    60dc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    60de:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    60e2:	429a      	cmp	r2, r3
    60e4:	d009      	beq.n	60fa <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    60e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    60e8:	1c59      	adds	r1, r3, #1
    60ea:	8781      	strh	r1, [r0, #60]	; 0x3c
    60ec:	5cd1      	ldrb	r1, [r2, r3]
    60ee:	4b04      	ldr	r3, [pc, #16]	; (6100 <usart_process_byte_sent+0x28>)
    60f0:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    60f2:	4620      	mov	r0, r4
    60f4:	4b03      	ldr	r3, [pc, #12]	; (6104 <usart_process_byte_sent+0x2c>)
    60f6:	4798      	blx	r3
    60f8:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    60fa:	4b03      	ldr	r3, [pc, #12]	; (6108 <usart_process_byte_sent+0x30>)
    60fc:	4798      	blx	r3
    60fe:	bd10      	pop	{r4, pc}
    6100:	00007acb 	.word	0x00007acb
    6104:	00007af7 	.word	0x00007af7
    6108:	00007aff 	.word	0x00007aff

0000610c <usart_async_read>:
{
    610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6110:	b082      	sub	sp, #8
    6112:	4682      	mov	sl, r0
    6114:	4688      	mov	r8, r1
    6116:	4615      	mov	r5, r2
	CRITICAL_SECTION_ENTER()
    6118:	a801      	add	r0, sp, #4
    611a:	4b13      	ldr	r3, [pc, #76]	; (6168 <usart_async_read+0x5c>)
    611c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    611e:	f10a 0a34 	add.w	sl, sl, #52	; 0x34
    6122:	4650      	mov	r0, sl
    6124:	4b11      	ldr	r3, [pc, #68]	; (616c <usart_async_read+0x60>)
    6126:	4798      	blx	r3
    6128:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    612a:	a801      	add	r0, sp, #4
    612c:	4b10      	ldr	r3, [pc, #64]	; (6170 <usart_async_read+0x64>)
    612e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    6130:	b1a7      	cbz	r7, 615c <usart_async_read+0x50>
    6132:	b1b5      	cbz	r5, 6162 <usart_async_read+0x56>
    6134:	3d01      	subs	r5, #1
    6136:	b2ad      	uxth	r5, r5
    6138:	3502      	adds	r5, #2
    613a:	2401      	movs	r4, #1
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    613c:	4e0d      	ldr	r6, [pc, #52]	; (6174 <usart_async_read+0x68>)
    613e:	fa1f f984 	uxth.w	r9, r4
    6142:	1e61      	subs	r1, r4, #1
    6144:	4441      	add	r1, r8
    6146:	4650      	mov	r0, sl
    6148:	47b0      	blx	r6
	while ((was_read < num) && (was_read < length)) {
    614a:	42bc      	cmp	r4, r7
    614c:	d002      	beq.n	6154 <usart_async_read+0x48>
    614e:	3401      	adds	r4, #1
    6150:	42ac      	cmp	r4, r5
    6152:	d1f4      	bne.n	613e <usart_async_read+0x32>
}
    6154:	4648      	mov	r0, r9
    6156:	b002      	add	sp, #8
    6158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint16_t                       was_read = 0;
    615c:	f04f 0900 	mov.w	r9, #0
    6160:	e7f8      	b.n	6154 <usart_async_read+0x48>
    6162:	f04f 0900 	mov.w	r9, #0
    6166:	e7f5      	b.n	6154 <usart_async_read+0x48>
    6168:	00005b69 	.word	0x00005b69
    616c:	000068bd 	.word	0x000068bd
    6170:	00005b77 	.word	0x00005b77
    6174:	00006879 	.word	0x00006879

00006178 <usart_async_init>:
{
    6178:	b538      	push	{r3, r4, r5, lr}
    617a:	4604      	mov	r4, r0
    617c:	460d      	mov	r5, r1
    617e:	4611      	mov	r1, r2
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    6180:	461a      	mov	r2, r3
    6182:	3034      	adds	r0, #52	; 0x34
    6184:	4b0d      	ldr	r3, [pc, #52]	; (61bc <usart_async_init+0x44>)
    6186:	4798      	blx	r3
    6188:	b9a0      	cbnz	r0, 61b4 <usart_async_init+0x3c>
	init_status = _usart_async_init(&descr->device, hw);
    618a:	4629      	mov	r1, r5
    618c:	f104 0008 	add.w	r0, r4, #8
    6190:	4b0b      	ldr	r3, [pc, #44]	; (61c0 <usart_async_init+0x48>)
    6192:	4798      	blx	r3
	if (init_status) {
    6194:	4603      	mov	r3, r0
    6196:	b958      	cbnz	r0, 61b0 <usart_async_init+0x38>
	descr->io.read  = usart_async_read;
    6198:	4a0a      	ldr	r2, [pc, #40]	; (61c4 <usart_async_init+0x4c>)
    619a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    619c:	4a0a      	ldr	r2, [pc, #40]	; (61c8 <usart_async_init+0x50>)
    619e:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    61a0:	4a0a      	ldr	r2, [pc, #40]	; (61cc <usart_async_init+0x54>)
    61a2:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    61a4:	4a0a      	ldr	r2, [pc, #40]	; (61d0 <usart_async_init+0x58>)
    61a6:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    61a8:	4a0a      	ldr	r2, [pc, #40]	; (61d4 <usart_async_init+0x5c>)
    61aa:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    61ac:	4a0a      	ldr	r2, [pc, #40]	; (61d8 <usart_async_init+0x60>)
    61ae:	6162      	str	r2, [r4, #20]
}
    61b0:	4618      	mov	r0, r3
    61b2:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_INVALID_ARG;
    61b4:	f06f 030c 	mvn.w	r3, #12
    61b8:	e7fa      	b.n	61b0 <usart_async_init+0x38>
    61ba:	bf00      	nop
    61bc:	0000685f 	.word	0x0000685f
    61c0:	00007a49 	.word	0x00007a49
    61c4:	0000610d 	.word	0x0000610d
    61c8:	000060a5 	.word	0x000060a5
    61cc:	000060d9 	.word	0x000060d9
    61d0:	00006089 	.word	0x00006089
    61d4:	00006061 	.word	0x00006061
    61d8:	00006075 	.word	0x00006075

000061dc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    61dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    61e0:	460f      	mov	r7, r1
    61e2:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
	while (!_usart_sync_is_ready_to_send(&descr->device))
    61e4:	f100 0408 	add.w	r4, r0, #8
    61e8:	4d0e      	ldr	r5, [pc, #56]	; (6224 <usart_sync_write+0x48>)
    61ea:	4620      	mov	r0, r4
    61ec:	47a8      	blx	r5
    61ee:	2800      	cmp	r0, #0
    61f0:	d0fb      	beq.n	61ea <usart_sync_write+0xe>
    61f2:	3f01      	subs	r7, #1
    61f4:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    61f6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 622c <usart_sync_write+0x50>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    61fa:	4d0a      	ldr	r5, [pc, #40]	; (6224 <usart_sync_write+0x48>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    61fc:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    6200:	4620      	mov	r0, r4
    6202:	47c0      	blx	r8
		while (!_usart_sync_is_ready_to_send(&descr->device))
    6204:	4620      	mov	r0, r4
    6206:	47a8      	blx	r5
    6208:	2800      	cmp	r0, #0
    620a:	d0fb      	beq.n	6204 <usart_sync_write+0x28>
			;
	} while (++offset < length);
    620c:	3601      	adds	r6, #1
    620e:	454e      	cmp	r6, r9
    6210:	d3f4      	bcc.n	61fc <usart_sync_write+0x20>
	while (!_usart_sync_is_transmit_done(&descr->device))
    6212:	4d05      	ldr	r5, [pc, #20]	; (6228 <usart_sync_write+0x4c>)
    6214:	4620      	mov	r0, r4
    6216:	47a8      	blx	r5
    6218:	2800      	cmp	r0, #0
    621a:	d0fb      	beq.n	6214 <usart_sync_write+0x38>
		;
	return (int32_t)offset;
}
    621c:	4630      	mov	r0, r6
    621e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6222:	bf00      	nop
    6224:	00007ad9 	.word	0x00007ad9
    6228:	00007ae3 	.word	0x00007ae3
    622c:	00007ac5 	.word	0x00007ac5

00006230 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    6230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6234:	4691      	mov	r9, r2
    6236:	1e4f      	subs	r7, r1, #1
	uint32_t                      offset = 0;
    6238:	2600      	movs	r6, #0
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    623a:	f100 0408 	add.w	r4, r0, #8
    623e:	4d08      	ldr	r5, [pc, #32]	; (6260 <usart_sync_read+0x30>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    6240:	f8df 8020 	ldr.w	r8, [pc, #32]	; 6264 <usart_sync_read+0x34>
		while (!_usart_sync_is_byte_received(&descr->device))
    6244:	4620      	mov	r0, r4
    6246:	47a8      	blx	r5
    6248:	2800      	cmp	r0, #0
    624a:	d0fb      	beq.n	6244 <usart_sync_read+0x14>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    624c:	4620      	mov	r0, r4
    624e:	47c0      	blx	r8
    6250:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    6254:	3601      	adds	r6, #1
    6256:	454e      	cmp	r6, r9
    6258:	d3f4      	bcc.n	6244 <usart_sync_read+0x14>

	return (int32_t)offset;
}
    625a:	4630      	mov	r0, r6
    625c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6260:	00007aed 	.word	0x00007aed
    6264:	00007ad1 	.word	0x00007ad1

00006268 <usart_sync_init>:
{
    6268:	b510      	push	{r4, lr}
    626a:	4604      	mov	r4, r0
	init_status = _usart_sync_init(&descr->device, hw);
    626c:	3008      	adds	r0, #8
    626e:	4b05      	ldr	r3, [pc, #20]	; (6284 <usart_sync_init+0x1c>)
    6270:	4798      	blx	r3
	if (init_status) {
    6272:	4603      	mov	r3, r0
    6274:	b918      	cbnz	r0, 627e <usart_sync_init+0x16>
	descr->io.read  = usart_sync_read;
    6276:	4a04      	ldr	r2, [pc, #16]	; (6288 <usart_sync_init+0x20>)
    6278:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    627a:	4a04      	ldr	r2, [pc, #16]	; (628c <usart_sync_init+0x24>)
    627c:	6022      	str	r2, [r4, #0]
}
    627e:	4618      	mov	r0, r3
    6280:	bd10      	pop	{r4, pc}
    6282:	bf00      	nop
    6284:	00007a39 	.word	0x00007a39
    6288:	00006231 	.word	0x00006231
    628c:	000061dd 	.word	0x000061dd

00006290 <usart_sync_enable>:
{
    6290:	b508      	push	{r3, lr}
	_usart_sync_enable(&descr->device);
    6292:	3008      	adds	r0, #8
    6294:	4b01      	ldr	r3, [pc, #4]	; (629c <usart_sync_enable+0xc>)
    6296:	4798      	blx	r3
}
    6298:	2000      	movs	r0, #0
    629a:	bd08      	pop	{r3, pc}
    629c:	00007ab1 	.word	0x00007ab1

000062a0 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    62a0:	4b0f      	ldr	r3, [pc, #60]	; (62e0 <_usb_d_find_ep+0x40>)
    62a2:	7859      	ldrb	r1, [r3, #1]
    62a4:	4288      	cmp	r0, r1
    62a6:	d018      	beq.n	62da <_usb_d_find_ep+0x3a>
{
    62a8:	b430      	push	{r4, r5}
    62aa:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    62ac:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    62ae:	f000 050f 	and.w	r5, r0, #15
    62b2:	e007      	b.n	62c4 <_usb_d_find_ep+0x24>
    62b4:	3301      	adds	r3, #1
    62b6:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    62b8:	2b0d      	cmp	r3, #13
    62ba:	d009      	beq.n	62d0 <_usb_d_find_ep+0x30>
    62bc:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    62be:	7851      	ldrb	r1, [r2, #1]
    62c0:	4281      	cmp	r1, r0
    62c2:	d007      	beq.n	62d4 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    62c4:	7814      	ldrb	r4, [r2, #0]
    62c6:	2c00      	cmp	r4, #0
    62c8:	d1f4      	bne.n	62b4 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    62ca:	428d      	cmp	r5, r1
    62cc:	d1f2      	bne.n	62b4 <_usb_d_find_ep+0x14>
    62ce:	e001      	b.n	62d4 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    62d0:	f04f 33ff 	mov.w	r3, #4294967295
}
    62d4:	4618      	mov	r0, r3
    62d6:	bc30      	pop	{r4, r5}
    62d8:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    62da:	2300      	movs	r3, #0
}
    62dc:	4618      	mov	r0, r3
    62de:	4770      	bx	lr
    62e0:	20000148 	.word	0x20000148

000062e4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    62e4:	2000      	movs	r0, #0
    62e6:	4770      	bx	lr

000062e8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    62e8:	b538      	push	{r3, r4, r5, lr}
    62ea:	4604      	mov	r4, r0
    62ec:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    62ee:	4b09      	ldr	r3, [pc, #36]	; (6314 <usb_d_cb_trans_more+0x2c>)
    62f0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    62f2:	4b09      	ldr	r3, [pc, #36]	; (6318 <usb_d_cb_trans_more+0x30>)
    62f4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    62f8:	789b      	ldrb	r3, [r3, #2]
    62fa:	2b03      	cmp	r3, #3
    62fc:	d001      	beq.n	6302 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    62fe:	2000      	movs	r0, #0
}
    6300:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    6302:	4b05      	ldr	r3, [pc, #20]	; (6318 <usb_d_cb_trans_more+0x30>)
    6304:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6308:	6983      	ldr	r3, [r0, #24]
    630a:	4629      	mov	r1, r5
    630c:	4620      	mov	r0, r4
    630e:	4798      	blx	r3
    6310:	bd38      	pop	{r3, r4, r5, pc}
    6312:	bf00      	nop
    6314:	000062a1 	.word	0x000062a1
    6318:	20000148 	.word	0x20000148

0000631c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    631c:	b5f0      	push	{r4, r5, r6, r7, lr}
    631e:	b085      	sub	sp, #20
    6320:	4606      	mov	r6, r0
    6322:	460d      	mov	r5, r1
    6324:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    6326:	4b4d      	ldr	r3, [pc, #308]	; (645c <_usb_d_cb_trans_done+0x140>)
    6328:	4798      	blx	r3
    632a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    632c:	2d00      	cmp	r5, #0
    632e:	d15b      	bne.n	63e8 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    6330:	4a4b      	ldr	r2, [pc, #300]	; (6460 <_usb_d_cb_trans_done+0x144>)
    6332:	0143      	lsls	r3, r0, #5
    6334:	18d1      	adds	r1, r2, r3
    6336:	2000      	movs	r0, #0
    6338:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    633a:	5cd3      	ldrb	r3, [r2, r3]
    633c:	b173      	cbz	r3, 635c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    633e:	4b48      	ldr	r3, [pc, #288]	; (6460 <_usb_d_cb_trans_done+0x144>)
    6340:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6344:	2201      	movs	r2, #1
    6346:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    6348:	4845      	ldr	r0, [pc, #276]	; (6460 <_usb_d_cb_trans_done+0x144>)
    634a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    634e:	69c3      	ldr	r3, [r0, #28]
    6350:	463a      	mov	r2, r7
    6352:	78c1      	ldrb	r1, [r0, #3]
    6354:	4630      	mov	r0, r6
    6356:	4798      	blx	r3
}
    6358:	b005      	add	sp, #20
    635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    635c:	788b      	ldrb	r3, [r1, #2]
    635e:	2b03      	cmp	r3, #3
    6360:	d00b      	beq.n	637a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    6362:	483f      	ldr	r0, [pc, #252]	; (6460 <_usb_d_cb_trans_done+0x144>)
    6364:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    6368:	4614      	mov	r4, r2
    636a:	69d3      	ldr	r3, [r2, #28]
    636c:	320c      	adds	r2, #12
    636e:	2100      	movs	r1, #0
    6370:	7860      	ldrb	r0, [r4, #1]
    6372:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6374:	2302      	movs	r3, #2
    6376:	70a3      	strb	r3, [r4, #2]
    6378:	e7ee      	b.n	6358 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    637a:	460b      	mov	r3, r1
    637c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    6380:	460a      	mov	r2, r1
    6382:	69ce      	ldr	r6, [r1, #28]
    6384:	320c      	adds	r2, #12
    6386:	2101      	movs	r1, #1
    6388:	7858      	ldrb	r0, [r3, #1]
    638a:	47b0      	blx	r6
		if (err) {
    638c:	b1a0      	cbz	r0, 63b8 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    638e:	4b34      	ldr	r3, [pc, #208]	; (6460 <_usb_d_cb_trans_done+0x144>)
    6390:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6394:	2205      	movs	r2, #5
    6396:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    6398:	2202      	movs	r2, #2
    639a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    639c:	2d00      	cmp	r5, #0
    639e:	db09      	blt.n	63b4 <_usb_d_cb_trans_done+0x98>
    63a0:	482f      	ldr	r0, [pc, #188]	; (6460 <_usb_d_cb_trans_done+0x144>)
    63a2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    63a6:	7840      	ldrb	r0, [r0, #1]
    63a8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    63ac:	2101      	movs	r1, #1
    63ae:	4b2d      	ldr	r3, [pc, #180]	; (6464 <_usb_d_cb_trans_done+0x148>)
    63b0:	4798      	blx	r3
    63b2:	e7d1      	b.n	6358 <_usb_d_cb_trans_done+0x3c>
    63b4:	7858      	ldrb	r0, [r3, #1]
    63b6:	e7f9      	b.n	63ac <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    63b8:	4829      	ldr	r0, [pc, #164]	; (6460 <_usb_d_cb_trans_done+0x144>)
    63ba:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    63be:	2304      	movs	r3, #4
    63c0:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    63c2:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    63c4:	2200      	movs	r2, #0
    63c6:	9201      	str	r2, [sp, #4]
    63c8:	9202      	str	r2, [sp, #8]
    63ca:	4295      	cmp	r5, r2
    63cc:	bfac      	ite	ge
    63ce:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    63d2:	f003 030f 	andlt.w	r3, r3, #15
    63d6:	f88d 300c 	strb.w	r3, [sp, #12]
    63da:	2301      	movs	r3, #1
    63dc:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    63e0:	a801      	add	r0, sp, #4
    63e2:	4b21      	ldr	r3, [pc, #132]	; (6468 <_usb_d_cb_trans_done+0x14c>)
    63e4:	4798      	blx	r3
    63e6:	e7b7      	b.n	6358 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    63e8:	2d01      	cmp	r5, #1
    63ea:	d00a      	beq.n	6402 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    63ec:	2d02      	cmp	r5, #2
    63ee:	d01c      	beq.n	642a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    63f0:	2d03      	cmp	r5, #3
    63f2:	d02a      	beq.n	644a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    63f4:	4b1a      	ldr	r3, [pc, #104]	; (6460 <_usb_d_cb_trans_done+0x144>)
    63f6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    63fa:	2206      	movs	r2, #6
    63fc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    63fe:	70da      	strb	r2, [r3, #3]
    6400:	e7a2      	b.n	6348 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    6402:	4a17      	ldr	r2, [pc, #92]	; (6460 <_usb_d_cb_trans_done+0x144>)
    6404:	0143      	lsls	r3, r0, #5
    6406:	18d1      	adds	r1, r2, r3
    6408:	2002      	movs	r0, #2
    640a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    640c:	5cd3      	ldrb	r3, [r2, r3]
    640e:	b12b      	cbz	r3, 641c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    6410:	4b13      	ldr	r3, [pc, #76]	; (6460 <_usb_d_cb_trans_done+0x144>)
    6412:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6416:	2205      	movs	r2, #5
    6418:	709a      	strb	r2, [r3, #2]
    641a:	e795      	b.n	6348 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    641c:	460b      	mov	r3, r1
    641e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6420:	2100      	movs	r1, #0
    6422:	4630      	mov	r0, r6
    6424:	4b0f      	ldr	r3, [pc, #60]	; (6464 <_usb_d_cb_trans_done+0x148>)
    6426:	4798      	blx	r3
    6428:	e78e      	b.n	6348 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    642a:	4a0d      	ldr	r2, [pc, #52]	; (6460 <_usb_d_cb_trans_done+0x144>)
    642c:	0143      	lsls	r3, r0, #5
    642e:	18d1      	adds	r1, r2, r3
    6430:	2004      	movs	r0, #4
    6432:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6434:	5cd3      	ldrb	r3, [r2, r3]
    6436:	b12b      	cbz	r3, 6444 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6438:	4b09      	ldr	r3, [pc, #36]	; (6460 <_usb_d_cb_trans_done+0x144>)
    643a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    643e:	2201      	movs	r2, #1
    6440:	709a      	strb	r2, [r3, #2]
    6442:	e781      	b.n	6348 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6444:	2302      	movs	r3, #2
    6446:	708b      	strb	r3, [r1, #2]
			return;
    6448:	e786      	b.n	6358 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    644a:	4b05      	ldr	r3, [pc, #20]	; (6460 <_usb_d_cb_trans_done+0x144>)
    644c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    6450:	2200      	movs	r2, #0
    6452:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    6454:	2205      	movs	r2, #5
    6456:	70da      	strb	r2, [r3, #3]
    6458:	e776      	b.n	6348 <_usb_d_cb_trans_done+0x2c>
    645a:	bf00      	nop
    645c:	000062a1 	.word	0x000062a1
    6460:	20000148 	.word	0x20000148
    6464:	000095f9 	.word	0x000095f9
    6468:	000097a1 	.word	0x000097a1

0000646c <usb_d_cb_trans_setup>:
{
    646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6470:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6472:	4b1c      	ldr	r3, [pc, #112]	; (64e4 <usb_d_cb_trans_setup+0x78>)
    6474:	4798      	blx	r3
    6476:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    6478:	4c1b      	ldr	r4, [pc, #108]	; (64e8 <usb_d_cb_trans_setup+0x7c>)
    647a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    647e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    6480:	4621      	mov	r1, r4
    6482:	4628      	mov	r0, r5
    6484:	4b19      	ldr	r3, [pc, #100]	; (64ec <usb_d_cb_trans_setup+0x80>)
    6486:	4798      	blx	r3
	if (n != 8) {
    6488:	b2c0      	uxtb	r0, r0
    648a:	2808      	cmp	r0, #8
    648c:	d009      	beq.n	64a2 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    648e:	2101      	movs	r1, #1
    6490:	4628      	mov	r0, r5
    6492:	4c17      	ldr	r4, [pc, #92]	; (64f0 <usb_d_cb_trans_setup+0x84>)
    6494:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6496:	2101      	movs	r1, #1
    6498:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    649c:	47a0      	blx	r4
		return;
    649e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    64a2:	2100      	movs	r1, #0
    64a4:	4628      	mov	r0, r5
    64a6:	4f12      	ldr	r7, [pc, #72]	; (64f0 <usb_d_cb_trans_setup+0x84>)
    64a8:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    64aa:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    64ae:	2100      	movs	r1, #0
    64b0:	4640      	mov	r0, r8
    64b2:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    64b4:	4b0c      	ldr	r3, [pc, #48]	; (64e8 <usb_d_cb_trans_setup+0x7c>)
    64b6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    64ba:	2201      	movs	r2, #1
    64bc:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    64be:	695b      	ldr	r3, [r3, #20]
    64c0:	4621      	mov	r1, r4
    64c2:	4628      	mov	r0, r5
    64c4:	4798      	blx	r3
    64c6:	b108      	cbz	r0, 64cc <usb_d_cb_trans_setup+0x60>
    64c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    64cc:	4b06      	ldr	r3, [pc, #24]	; (64e8 <usb_d_cb_trans_setup+0x7c>)
    64ce:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    64d2:	2305      	movs	r3, #5
    64d4:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    64d6:	2101      	movs	r1, #1
    64d8:	4628      	mov	r0, r5
    64da:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    64dc:	2101      	movs	r1, #1
    64de:	4640      	mov	r0, r8
    64e0:	47b8      	blx	r7
    64e2:	e7f1      	b.n	64c8 <usb_d_cb_trans_setup+0x5c>
    64e4:	000062a1 	.word	0x000062a1
    64e8:	20000148 	.word	0x20000148
    64ec:	00009741 	.word	0x00009741
    64f0:	000095f9 	.word	0x000095f9

000064f4 <usb_d_init>:

int32_t usb_d_init(void)
{
    64f4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    64f6:	4b11      	ldr	r3, [pc, #68]	; (653c <usb_d_init+0x48>)
    64f8:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    64fa:	2800      	cmp	r0, #0
    64fc:	db1d      	blt.n	653a <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    64fe:	4c10      	ldr	r4, [pc, #64]	; (6540 <usb_d_init+0x4c>)
    6500:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    6504:	2100      	movs	r1, #0
    6506:	4620      	mov	r0, r4
    6508:	4b0e      	ldr	r3, [pc, #56]	; (6544 <usb_d_init+0x50>)
    650a:	4798      	blx	r3
    650c:	4623      	mov	r3, r4
    650e:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6512:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6514:	4a0c      	ldr	r2, [pc, #48]	; (6548 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6516:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6518:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    651a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    651c:	61da      	str	r2, [r3, #28]
    651e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6520:	4283      	cmp	r3, r0
    6522:	d1f8      	bne.n	6516 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    6524:	4909      	ldr	r1, [pc, #36]	; (654c <usb_d_init+0x58>)
    6526:	2000      	movs	r0, #0
    6528:	4c09      	ldr	r4, [pc, #36]	; (6550 <usb_d_init+0x5c>)
    652a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    652c:	4909      	ldr	r1, [pc, #36]	; (6554 <usb_d_init+0x60>)
    652e:	2001      	movs	r0, #1
    6530:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    6532:	4909      	ldr	r1, [pc, #36]	; (6558 <usb_d_init+0x64>)
    6534:	2002      	movs	r0, #2
    6536:	47a0      	blx	r4
	return ERR_NONE;
    6538:	2000      	movs	r0, #0
}
    653a:	bd10      	pop	{r4, pc}
    653c:	00009051 	.word	0x00009051
    6540:	20000148 	.word	0x20000148
    6544:	0000aa7f 	.word	0x0000aa7f
    6548:	000062e5 	.word	0x000062e5
    654c:	0000646d 	.word	0x0000646d
    6550:	000099a9 	.word	0x000099a9
    6554:	000062e9 	.word	0x000062e9
    6558:	0000631d 	.word	0x0000631d

0000655c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    655c:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    655e:	4b01      	ldr	r3, [pc, #4]	; (6564 <usb_d_register_callback+0x8>)
    6560:	4798      	blx	r3
    6562:	bd08      	pop	{r3, pc}
    6564:	00009981 	.word	0x00009981

00006568 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    6568:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    656a:	4b01      	ldr	r3, [pc, #4]	; (6570 <usb_d_set_address+0x8>)
    656c:	4798      	blx	r3
    656e:	bd08      	pop	{r3, pc}
    6570:	00009159 	.word	0x00009159

00006574 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    6574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6576:	4606      	mov	r6, r0
    6578:	460c      	mov	r4, r1
    657a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    657c:	4b0f      	ldr	r3, [pc, #60]	; (65bc <usb_d_ep_init+0x48>)
    657e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    6580:	2800      	cmp	r0, #0
    6582:	da14      	bge.n	65ae <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    6584:	20ff      	movs	r0, #255	; 0xff
    6586:	4b0d      	ldr	r3, [pc, #52]	; (65bc <usb_d_ep_init+0x48>)
    6588:	4798      	blx	r3
		if (ep_index < 0) {
    658a:	1e05      	subs	r5, r0, #0
    658c:	db12      	blt.n	65b4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    658e:	463a      	mov	r2, r7
    6590:	4621      	mov	r1, r4
    6592:	4630      	mov	r0, r6
    6594:	4b0a      	ldr	r3, [pc, #40]	; (65c0 <usb_d_ep_init+0x4c>)
    6596:	4798      	blx	r3
	if (rc < 0) {
    6598:	2800      	cmp	r0, #0
    659a:	db0d      	blt.n	65b8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    659c:	4b09      	ldr	r3, [pc, #36]	; (65c4 <usb_d_ep_init+0x50>)
    659e:	0168      	lsls	r0, r5, #5
    65a0:	181a      	adds	r2, r3, r0
    65a2:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    65a4:	f004 0403 	and.w	r4, r4, #3
    65a8:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    65aa:	2000      	movs	r0, #0
    65ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    65ae:	f06f 0013 	mvn.w	r0, #19
    65b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    65b4:	f06f 0014 	mvn.w	r0, #20
}
    65b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65ba:	bf00      	nop
    65bc:	000062a1 	.word	0x000062a1
    65c0:	00009165 	.word	0x00009165
    65c4:	20000148 	.word	0x20000148

000065c8 <usb_d_ep0_init>:
{
    65c8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    65ca:	4602      	mov	r2, r0
    65cc:	2100      	movs	r1, #0
    65ce:	4608      	mov	r0, r1
    65d0:	4b01      	ldr	r3, [pc, #4]	; (65d8 <usb_d_ep0_init+0x10>)
    65d2:	4798      	blx	r3
}
    65d4:	bd08      	pop	{r3, pc}
    65d6:	bf00      	nop
    65d8:	00006575 	.word	0x00006575

000065dc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    65dc:	b538      	push	{r3, r4, r5, lr}
    65de:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    65e0:	4b06      	ldr	r3, [pc, #24]	; (65fc <usb_d_ep_deinit+0x20>)
    65e2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    65e4:	1e04      	subs	r4, r0, #0
    65e6:	db07      	blt.n	65f8 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    65e8:	4628      	mov	r0, r5
    65ea:	4b05      	ldr	r3, [pc, #20]	; (6600 <usb_d_ep_deinit+0x24>)
    65ec:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    65ee:	4805      	ldr	r0, [pc, #20]	; (6604 <usb_d_ep_deinit+0x28>)
    65f0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    65f4:	23ff      	movs	r3, #255	; 0xff
    65f6:	7043      	strb	r3, [r0, #1]
    65f8:	bd38      	pop	{r3, r4, r5, pc}
    65fa:	bf00      	nop
    65fc:	000062a1 	.word	0x000062a1
    6600:	0000927d 	.word	0x0000927d
    6604:	20000148 	.word	0x20000148

00006608 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    6608:	b538      	push	{r3, r4, r5, lr}
    660a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    660c:	4b0e      	ldr	r3, [pc, #56]	; (6648 <usb_d_ep_enable+0x40>)
    660e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    6610:	1e04      	subs	r4, r0, #0
    6612:	db16      	blt.n	6642 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    6614:	0163      	lsls	r3, r4, #5
    6616:	4a0d      	ldr	r2, [pc, #52]	; (664c <usb_d_ep_enable+0x44>)
    6618:	5cd3      	ldrb	r3, [r2, r3]
    661a:	2b00      	cmp	r3, #0
    661c:	bf0c      	ite	eq
    661e:	2202      	moveq	r2, #2
    6620:	2201      	movne	r2, #1
    6622:	4b0a      	ldr	r3, [pc, #40]	; (664c <usb_d_ep_enable+0x44>)
    6624:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6628:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    662a:	4628      	mov	r0, r5
    662c:	4b08      	ldr	r3, [pc, #32]	; (6650 <usb_d_ep_enable+0x48>)
    662e:	4798      	blx	r3
	if (rc < 0) {
    6630:	2800      	cmp	r0, #0
    6632:	db00      	blt.n	6636 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    6634:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    6636:	4b05      	ldr	r3, [pc, #20]	; (664c <usb_d_ep_enable+0x44>)
    6638:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    663c:	2300      	movs	r3, #0
    663e:	70a3      	strb	r3, [r4, #2]
    6640:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    6642:	f06f 0011 	mvn.w	r0, #17
    6646:	e7f5      	b.n	6634 <usb_d_ep_enable+0x2c>
    6648:	000062a1 	.word	0x000062a1
    664c:	20000148 	.word	0x20000148
    6650:	00009341 	.word	0x00009341

00006654 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    6654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6658:	b086      	sub	sp, #24
    665a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    665c:	7a07      	ldrb	r7, [r0, #8]
    665e:	4638      	mov	r0, r7
    6660:	4b3f      	ldr	r3, [pc, #252]	; (6760 <usb_d_ep_transfer+0x10c>)
    6662:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    6664:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    6666:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    666a:	1e06      	subs	r6, r0, #0
    666c:	db72      	blt.n	6754 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    666e:	a804      	add	r0, sp, #16
    6670:	4b3c      	ldr	r3, [pc, #240]	; (6764 <usb_d_ep_transfer+0x110>)
    6672:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    6674:	4b3c      	ldr	r3, [pc, #240]	; (6768 <usb_d_ep_transfer+0x114>)
    6676:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    667a:	789b      	ldrb	r3, [r3, #2]
    667c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    6680:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6684:	b2db      	uxtb	r3, r3
    6686:	2b01      	cmp	r3, #1
    6688:	d011      	beq.n	66ae <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    668a:	a804      	add	r0, sp, #16
    668c:	4b37      	ldr	r3, [pc, #220]	; (676c <usb_d_ep_transfer+0x118>)
    668e:	4798      	blx	r3
		switch (state) {
    6690:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6694:	b2db      	uxtb	r3, r3
    6696:	2b05      	cmp	r3, #5
    6698:	d05f      	beq.n	675a <usb_d_ep_transfer+0x106>
    669a:	2b06      	cmp	r3, #6
    669c:	d023      	beq.n	66e6 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    669e:	2b00      	cmp	r3, #0
    66a0:	bf0c      	ite	eq
    66a2:	f06f 0012 	mvneq.w	r0, #18
    66a6:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    66a8:	b006      	add	sp, #24
    66aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    66ae:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 6768 <usb_d_ep_transfer+0x114>
    66b2:	ea4f 1946 	mov.w	r9, r6, lsl #5
    66b6:	eb0a 0309 	add.w	r3, sl, r9
    66ba:	2203      	movs	r2, #3
    66bc:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    66be:	a804      	add	r0, sp, #16
    66c0:	4b2a      	ldr	r3, [pc, #168]	; (676c <usb_d_ep_transfer+0x118>)
    66c2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    66c4:	f81a 3009 	ldrb.w	r3, [sl, r9]
    66c8:	b183      	cbz	r3, 66ec <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    66ca:	7a22      	ldrb	r2, [r4, #8]
    66cc:	3500      	adds	r5, #0
    66ce:	bf18      	it	ne
    66d0:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    66d2:	6823      	ldr	r3, [r4, #0]
    66d4:	9301      	str	r3, [sp, #4]
    66d6:	f8cd 8008 	str.w	r8, [sp, #8]
    66da:	f017 0f80 	tst.w	r7, #128	; 0x80
    66de:	d119      	bne.n	6714 <usb_d_ep_transfer+0xc0>
    66e0:	f002 030f 	and.w	r3, r2, #15
    66e4:	e018      	b.n	6718 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    66e6:	f06f 000f 	mvn.w	r0, #15
    66ea:	e7dd      	b.n	66a8 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    66ec:	4b1e      	ldr	r3, [pc, #120]	; (6768 <usb_d_ep_transfer+0x114>)
    66ee:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    66f2:	7cda      	ldrb	r2, [r3, #19]
    66f4:	7c9d      	ldrb	r5, [r3, #18]
    66f6:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    66fa:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    66fc:	b9a5      	cbnz	r5, 6728 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    66fe:	4b1a      	ldr	r3, [pc, #104]	; (6768 <usb_d_ep_transfer+0x114>)
    6700:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    6704:	2304      	movs	r3, #4
    6706:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    6708:	2300      	movs	r3, #0
			zlp                 = true;
    670a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    670c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    670e:	6821      	ldr	r1, [r4, #0]
    6710:	9101      	str	r1, [sp, #4]
    6712:	9302      	str	r3, [sp, #8]
    6714:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    6718:	f88d 300c 	strb.w	r3, [sp, #12]
    671c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    6720:	a801      	add	r0, sp, #4
    6722:	4b13      	ldr	r3, [pc, #76]	; (6770 <usb_d_ep_transfer+0x11c>)
    6724:	4798      	blx	r3
	return rc;
    6726:	e7bf      	b.n	66a8 <usb_d_ep_transfer+0x54>
    6728:	4643      	mov	r3, r8
    672a:	45a8      	cmp	r8, r5
    672c:	bf28      	it	cs
    672e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    6730:	4a0d      	ldr	r2, [pc, #52]	; (6768 <usb_d_ep_transfer+0x114>)
    6732:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    6736:	f996 200c 	ldrsb.w	r2, [r6, #12]
    673a:	2a00      	cmp	r2, #0
    673c:	db05      	blt.n	674a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    673e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    6740:	6821      	ldr	r1, [r4, #0]
    6742:	9101      	str	r1, [sp, #4]
    6744:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6746:	2500      	movs	r5, #0
    6748:	e7ca      	b.n	66e0 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    674a:	429d      	cmp	r5, r3
    674c:	bf94      	ite	ls
    674e:	2500      	movls	r5, #0
    6750:	2501      	movhi	r5, #1
    6752:	e7db      	b.n	670c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    6754:	f06f 0011 	mvn.w	r0, #17
    6758:	e7a6      	b.n	66a8 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    675a:	2002      	movs	r0, #2
    675c:	e7a4      	b.n	66a8 <usb_d_ep_transfer+0x54>
    675e:	bf00      	nop
    6760:	000062a1 	.word	0x000062a1
    6764:	00005b69 	.word	0x00005b69
    6768:	20000148 	.word	0x20000148
    676c:	00005b77 	.word	0x00005b77
    6770:	000097a1 	.word	0x000097a1

00006774 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    6774:	b538      	push	{r3, r4, r5, lr}
    6776:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    6778:	b141      	cbz	r1, 678c <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    677a:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    677c:	bf0c      	ite	eq
    677e:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    6780:	2102      	movne	r1, #2
    6782:	4b13      	ldr	r3, [pc, #76]	; (67d0 <usb_d_ep_halt+0x5c>)
    6784:	4798      	blx	r3
    6786:	4603      	mov	r3, r0
	}
}
    6788:	4618      	mov	r0, r3
    678a:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    678c:	4b11      	ldr	r3, [pc, #68]	; (67d4 <usb_d_ep_halt+0x60>)
    678e:	4798      	blx	r3
	if (ep_index < 0) {
    6790:	1e05      	subs	r5, r0, #0
    6792:	db19      	blt.n	67c8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    6794:	2102      	movs	r1, #2
    6796:	4620      	mov	r0, r4
    6798:	4b0d      	ldr	r3, [pc, #52]	; (67d0 <usb_d_ep_halt+0x5c>)
    679a:	4798      	blx	r3
    679c:	4603      	mov	r3, r0
    679e:	2800      	cmp	r0, #0
    67a0:	d0f2      	beq.n	6788 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    67a2:	2100      	movs	r1, #0
    67a4:	4620      	mov	r0, r4
    67a6:	4b0a      	ldr	r3, [pc, #40]	; (67d0 <usb_d_ep_halt+0x5c>)
    67a8:	4798      	blx	r3
		if (rc < 0) {
    67aa:	1e03      	subs	r3, r0, #0
    67ac:	dbec      	blt.n	6788 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    67ae:	4b0a      	ldr	r3, [pc, #40]	; (67d8 <usb_d_ep_halt+0x64>)
    67b0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    67b4:	2201      	movs	r2, #1
    67b6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    67b8:	2103      	movs	r1, #3
    67ba:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    67bc:	69db      	ldr	r3, [r3, #28]
    67be:	2200      	movs	r2, #0
    67c0:	4620      	mov	r0, r4
    67c2:	4798      	blx	r3
	return ERR_NONE;
    67c4:	2300      	movs	r3, #0
    67c6:	e7df      	b.n	6788 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    67c8:	f06f 0311 	mvn.w	r3, #17
    67cc:	e7dc      	b.n	6788 <usb_d_ep_halt+0x14>
    67ce:	bf00      	nop
    67d0:	000095f9 	.word	0x000095f9
    67d4:	000062a1 	.word	0x000062a1
    67d8:	20000148 	.word	0x20000148

000067dc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    67dc:	b538      	push	{r3, r4, r5, lr}
    67de:	460d      	mov	r5, r1
    67e0:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    67e2:	4b0e      	ldr	r3, [pc, #56]	; (681c <usb_d_ep_register_callback+0x40>)
    67e4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    67e6:	4b0e      	ldr	r3, [pc, #56]	; (6820 <usb_d_ep_register_callback+0x44>)
    67e8:	2c00      	cmp	r4, #0
    67ea:	bf08      	it	eq
    67ec:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    67ee:	2800      	cmp	r0, #0
    67f0:	db13      	blt.n	681a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    67f2:	2d01      	cmp	r5, #1
    67f4:	d008      	beq.n	6808 <usb_d_ep_register_callback+0x2c>
    67f6:	b115      	cbz	r5, 67fe <usb_d_ep_register_callback+0x22>
    67f8:	2d02      	cmp	r5, #2
    67fa:	d00a      	beq.n	6812 <usb_d_ep_register_callback+0x36>
    67fc:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    67fe:	4b09      	ldr	r3, [pc, #36]	; (6824 <usb_d_ep_register_callback+0x48>)
    6800:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6804:	6144      	str	r4, [r0, #20]
		break;
    6806:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    6808:	4b06      	ldr	r3, [pc, #24]	; (6824 <usb_d_ep_register_callback+0x48>)
    680a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    680e:	6184      	str	r4, [r0, #24]
		break;
    6810:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    6812:	4b04      	ldr	r3, [pc, #16]	; (6824 <usb_d_ep_register_callback+0x48>)
    6814:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6818:	61c4      	str	r4, [r0, #28]
    681a:	bd38      	pop	{r3, r4, r5, pc}
    681c:	000062a1 	.word	0x000062a1
    6820:	000062e5 	.word	0x000062e5
    6824:	20000148 	.word	0x20000148

00006828 <list_insert_as_head>:
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
	ASSERT(!is_list_element(list, element));

	((struct list_element *)element)->next = list->head;
    6828:	6803      	ldr	r3, [r0, #0]
    682a:	600b      	str	r3, [r1, #0]
	list->head                             = (struct list_element *)element;
    682c:	6001      	str	r1, [r0, #0]
    682e:	4770      	bx	lr

00006830 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    6830:	6803      	ldr	r3, [r0, #0]
    6832:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    6834:	6001      	str	r1, [r0, #0]
    6836:	4770      	bx	lr

00006838 <list_insert_at_end>:
/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
	struct list_element *it = list->head;
    6838:	6802      	ldr	r2, [r0, #0]

	ASSERT(!is_list_element(list, element));

	if (!list->head) {
    683a:	b922      	cbnz	r2, 6846 <list_insert_at_end+0xe>
		list->head                             = (struct list_element *)element;
    683c:	6001      	str	r1, [r0, #0]
		((struct list_element *)element)->next = NULL;
    683e:	2300      	movs	r3, #0
    6840:	600b      	str	r3, [r1, #0]
		return;
    6842:	4770      	bx	lr
	}

	while (it->next) {
		it = it->next;
    6844:	461a      	mov	r2, r3
	while (it->next) {
    6846:	6813      	ldr	r3, [r2, #0]
    6848:	2b00      	cmp	r3, #0
    684a:	d1fb      	bne.n	6844 <list_insert_at_end+0xc>
	}
	it->next                               = (struct list_element *)element;
    684c:	6011      	str	r1, [r2, #0]
	((struct list_element *)element)->next = NULL;
    684e:	600b      	str	r3, [r1, #0]
    6850:	4770      	bx	lr

00006852 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    6852:	6803      	ldr	r3, [r0, #0]
    6854:	b10b      	cbz	r3, 685a <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    6856:	681a      	ldr	r2, [r3, #0]
    6858:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    685a:	4618      	mov	r0, r3
    685c:	4770      	bx	lr

0000685e <ringbuffer_init>:
	ASSERT(rb && buf && size);

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    685e:	1e53      	subs	r3, r2, #1
    6860:	421a      	tst	r2, r3
    6862:	d106      	bne.n	6872 <ringbuffer_init+0x14>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    6864:	6043      	str	r3, [r0, #4]
	rb->read_index  = 0;
    6866:	2300      	movs	r3, #0
    6868:	6083      	str	r3, [r0, #8]
	rb->write_index = rb->read_index;
    686a:	60c3      	str	r3, [r0, #12]
	rb->buf         = (uint8_t *)buf;
    686c:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
    686e:	4618      	mov	r0, r3
    6870:	4770      	bx	lr
		return ERR_INVALID_ARG;
    6872:	f06f 000c 	mvn.w	r0, #12
}
    6876:	4770      	bx	lr

00006878 <ringbuffer_get>:
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
	ASSERT(rb && data);

	if (rb->write_index != rb->read_index) {
    6878:	6883      	ldr	r3, [r0, #8]
    687a:	68c2      	ldr	r2, [r0, #12]
    687c:	429a      	cmp	r2, r3
    687e:	d009      	beq.n	6894 <ringbuffer_get+0x1c>
		*data = rb->buf[rb->read_index & rb->size];
    6880:	6842      	ldr	r2, [r0, #4]
    6882:	4013      	ands	r3, r2
    6884:	6802      	ldr	r2, [r0, #0]
    6886:	5cd3      	ldrb	r3, [r2, r3]
    6888:	700b      	strb	r3, [r1, #0]
		rb->read_index++;
    688a:	6883      	ldr	r3, [r0, #8]
    688c:	3301      	adds	r3, #1
    688e:	6083      	str	r3, [r0, #8]
		return ERR_NONE;
    6890:	2000      	movs	r0, #0
    6892:	4770      	bx	lr
	}

	return ERR_NOT_FOUND;
    6894:	f06f 0009 	mvn.w	r0, #9
}
    6898:	4770      	bx	lr

0000689a <ringbuffer_put>:
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
	ASSERT(rb);

	rb->buf[rb->write_index & rb->size] = data;
    689a:	68c3      	ldr	r3, [r0, #12]
    689c:	6842      	ldr	r2, [r0, #4]
    689e:	4013      	ands	r3, r2
    68a0:	6802      	ldr	r2, [r0, #0]
    68a2:	54d1      	strb	r1, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    68a4:	68c3      	ldr	r3, [r0, #12]
    68a6:	6841      	ldr	r1, [r0, #4]
    68a8:	6882      	ldr	r2, [r0, #8]
    68aa:	1a9a      	subs	r2, r3, r2
    68ac:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    68ae:	bf84      	itt	hi
    68b0:	1a59      	subhi	r1, r3, r1
    68b2:	6081      	strhi	r1, [r0, #8]
	}

	rb->write_index++;
    68b4:	3301      	adds	r3, #1
    68b6:	60c3      	str	r3, [r0, #12]

	return ERR_NONE;
}
    68b8:	2000      	movs	r0, #0
    68ba:	4770      	bx	lr

000068bc <ringbuffer_num>:
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
	ASSERT(rb);

	return rb->write_index - rb->read_index;
    68bc:	68c2      	ldr	r2, [r0, #12]
    68be:	6880      	ldr	r0, [r0, #8]
}
    68c0:	1a10      	subs	r0, r2, r0
    68c2:	4770      	bx	lr

000068c4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    68c4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    68c6:	4a06      	ldr	r2, [pc, #24]	; (68e0 <_sbrk+0x1c>)
    68c8:	6812      	ldr	r2, [r2, #0]
    68ca:	b122      	cbz	r2, 68d6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    68cc:	4a04      	ldr	r2, [pc, #16]	; (68e0 <_sbrk+0x1c>)
    68ce:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    68d0:	4403      	add	r3, r0
    68d2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    68d4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    68d6:	4903      	ldr	r1, [pc, #12]	; (68e4 <_sbrk+0x20>)
    68d8:	4a01      	ldr	r2, [pc, #4]	; (68e0 <_sbrk+0x1c>)
    68da:	6011      	str	r1, [r2, #0]
    68dc:	e7f6      	b.n	68cc <_sbrk+0x8>
    68de:	bf00      	nop
    68e0:	200002e8 	.word	0x200002e8
    68e4:	200176a8 	.word	0x200176a8

000068e8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    68e8:	f04f 30ff 	mov.w	r0, #4294967295
    68ec:	4770      	bx	lr

000068ee <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    68ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    68f2:	604b      	str	r3, [r1, #4]

	return 0;
}
    68f4:	2000      	movs	r0, #0
    68f6:	4770      	bx	lr

000068f8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    68f8:	2001      	movs	r0, #1
    68fa:	4770      	bx	lr

000068fc <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    68fc:	2000      	movs	r0, #0
    68fe:	4770      	bx	lr

00006900 <_adc_get_regs>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    6900:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    6904:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
{
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
		if (_adcs[i].number == n) {
    6908:	f3c0 2087 	ubfx	r0, r0, #10, #8
		}
	}

	ASSERT(false);
	return 0;
}
    690c:	2801      	cmp	r0, #1
    690e:	bf14      	ite	ne
    6910:	2000      	movne	r0, #0
    6912:	2001      	moveq	r0, #1
    6914:	4770      	bx	lr
	...

00006918 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    6918:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    691a:	f013 0f01 	tst.w	r3, #1
    691e:	d11b      	bne.n	6958 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6920:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6922:	f013 0f03 	tst.w	r3, #3
    6926:	d1fb      	bne.n	6920 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    6928:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    692a:	f013 0f02 	tst.w	r3, #2
    692e:	d00d      	beq.n	694c <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    6930:	8803      	ldrh	r3, [r0, #0]
    6932:	f023 0302 	bic.w	r3, r3, #2
    6936:	041b      	lsls	r3, r3, #16
    6938:	0c1b      	lsrs	r3, r3, #16
    693a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    693c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    693e:	f013 0f03 	tst.w	r3, #3
    6942:	d1fb      	bne.n	693c <_adc_init+0x24>
    6944:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6946:	f013 0f02 	tst.w	r3, #2
    694a:	d1fb      	bne.n	6944 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    694c:	2301      	movs	r3, #1
    694e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6950:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6952:	f013 0f03 	tst.w	r3, #3
    6956:	d1fb      	bne.n	6950 <_adc_init+0x38>
    6958:	6b03      	ldr	r3, [r0, #48]	; 0x30
    695a:	f013 0f01 	tst.w	r3, #1
    695e:	d1fb      	bne.n	6958 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    6960:	2316      	movs	r3, #22
    6962:	4a37      	ldr	r2, [pc, #220]	; (6a40 <_adc_init+0x128>)
    6964:	fb03 2301 	mla	r3, r3, r1, r2
    6968:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    696a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    696c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    696e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6972:	2b00      	cmp	r3, #0
    6974:	d1fa      	bne.n	696c <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    6976:	2316      	movs	r3, #22
    6978:	4a31      	ldr	r2, [pc, #196]	; (6a40 <_adc_init+0x128>)
    697a:	fb03 2301 	mla	r3, r3, r1, r2
    697e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    6980:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6982:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6984:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6988:	2b00      	cmp	r3, #0
    698a:	d1fa      	bne.n	6982 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    698c:	2316      	movs	r3, #22
    698e:	4a2c      	ldr	r2, [pc, #176]	; (6a40 <_adc_init+0x128>)
    6990:	fb03 2301 	mla	r3, r3, r1, r2
    6994:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    6996:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    6998:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    699a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    699c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    699e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    69a2:	2b00      	cmp	r3, #0
    69a4:	d1fa      	bne.n	699c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    69a6:	2316      	movs	r3, #22
    69a8:	4a25      	ldr	r2, [pc, #148]	; (6a40 <_adc_init+0x128>)
    69aa:	fb03 2301 	mla	r3, r3, r1, r2
    69ae:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    69b0:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    69b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    69b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    69b8:	2b00      	cmp	r3, #0
    69ba:	d1fa      	bne.n	69b2 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    69bc:	2316      	movs	r3, #22
    69be:	4a20      	ldr	r2, [pc, #128]	; (6a40 <_adc_init+0x128>)
    69c0:	fb03 2301 	mla	r3, r3, r1, r2
    69c4:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    69c6:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    69c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    69ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
    69ce:	2b00      	cmp	r3, #0
    69d0:	d1fa      	bne.n	69c8 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    69d2:	2316      	movs	r3, #22
    69d4:	4a1a      	ldr	r2, [pc, #104]	; (6a40 <_adc_init+0x128>)
    69d6:	fb03 2301 	mla	r3, r3, r1, r2
    69da:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    69dc:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    69de:	6b03      	ldr	r3, [r0, #48]	; 0x30
    69e0:	f013 0f80 	tst.w	r3, #128	; 0x80
    69e4:	d1fb      	bne.n	69de <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    69e6:	2316      	movs	r3, #22
    69e8:	4a15      	ldr	r2, [pc, #84]	; (6a40 <_adc_init+0x128>)
    69ea:	fb03 2301 	mla	r3, r3, r1, r2
    69ee:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    69f0:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    69f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    69f4:	f413 7f80 	tst.w	r3, #256	; 0x100
    69f8:	d1fb      	bne.n	69f2 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    69fa:	2316      	movs	r3, #22
    69fc:	4a10      	ldr	r2, [pc, #64]	; (6a40 <_adc_init+0x128>)
    69fe:	fb03 2301 	mla	r3, r3, r1, r2
    6a02:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    6a04:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6a06:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6a08:	f413 7f00 	tst.w	r3, #512	; 0x200
    6a0c:	d1fb      	bne.n	6a06 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    6a0e:	2316      	movs	r3, #22
    6a10:	4a0b      	ldr	r2, [pc, #44]	; (6a40 <_adc_init+0x128>)
    6a12:	fb03 2301 	mla	r3, r3, r1, r2
    6a16:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    6a18:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6a1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6a1c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6a20:	d1fb      	bne.n	6a1a <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    6a22:	2216      	movs	r2, #22
    6a24:	4b06      	ldr	r3, [pc, #24]	; (6a40 <_adc_init+0x128>)
    6a26:	fb02 3101 	mla	r1, r2, r1, r3
    6a2a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    6a2c:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    6a2e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    6a30:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6a32:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6a34:	f013 0f03 	tst.w	r3, #3
    6a38:	d1fb      	bne.n	6a32 <_adc_init+0x11a>

	return ERR_NONE;
}
    6a3a:	2000      	movs	r0, #0
    6a3c:	4770      	bx	lr
    6a3e:	bf00      	nop
    6a40:	0000baa8 	.word	0x0000baa8

00006a44 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    6a44:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    6a46:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    6a48:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    6a4c:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    6a50:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    6a52:	f013 0f01 	tst.w	r3, #1
    6a56:	d106      	bne.n	6a66 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    6a58:	f013 0f02 	tst.w	r3, #2
    6a5c:	d10d      	bne.n	6a7a <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    6a5e:	f013 0f04 	tst.w	r3, #4
    6a62:	d111      	bne.n	6a88 <_adc_interrupt_handler+0x44>
    6a64:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    6a66:	2301      	movs	r3, #1
    6a68:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    6a6c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    6a70:	6883      	ldr	r3, [r0, #8]
    6a72:	b292      	uxth	r2, r2
    6a74:	2100      	movs	r1, #0
    6a76:	4798      	blx	r3
    6a78:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    6a7a:	2302      	movs	r3, #2
    6a7c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    6a80:	6843      	ldr	r3, [r0, #4]
    6a82:	2100      	movs	r1, #0
    6a84:	4798      	blx	r3
    6a86:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    6a88:	2304      	movs	r3, #4
    6a8a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    6a8e:	6803      	ldr	r3, [r0, #0]
    6a90:	2100      	movs	r1, #0
    6a92:	4798      	blx	r3
	}
}
    6a94:	e7e6      	b.n	6a64 <_adc_interrupt_handler+0x20>

00006a96 <_adc_get_irq_num>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    6a96:	6940      	ldr	r0, [r0, #20]
    6a98:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    6a9c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    6aa0:	0a80      	lsrs	r0, r0, #10
	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    6aa2:	0040      	lsls	r0, r0, #1
    6aa4:	3076      	adds	r0, #118	; 0x76
}
    6aa6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6aaa:	4770      	bx	lr

00006aac <_adc_async_init>:
{
    6aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ab0:	4605      	mov	r5, r0
    6ab2:	460c      	mov	r4, r1
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    6ab4:	4608      	mov	r0, r1
    6ab6:	4b37      	ldr	r3, [pc, #220]	; (6b94 <_adc_async_init+0xe8>)
    6ab8:	4798      	blx	r3
    6aba:	4601      	mov	r1, r0
    6abc:	4620      	mov	r0, r4
    6abe:	4b36      	ldr	r3, [pc, #216]	; (6b98 <_adc_async_init+0xec>)
    6ac0:	4798      	blx	r3
	if (init_status) {
    6ac2:	4606      	mov	r6, r0
    6ac4:	b110      	cbz	r0, 6acc <_adc_async_init+0x20>
}
    6ac6:	4630      	mov	r0, r6
    6ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    6acc:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    6ace:	4b33      	ldr	r3, [pc, #204]	; (6b9c <_adc_async_init+0xf0>)
    6ad0:	429c      	cmp	r4, r3
    6ad2:	d05c      	beq.n	6b8e <_adc_async_init+0xe2>
	if (hw == ADC1) {
    6ad4:	4b32      	ldr	r3, [pc, #200]	; (6ba0 <_adc_async_init+0xf4>)
    6ad6:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    6ad8:	bf04      	itt	eq
    6ada:	4b32      	ldreq	r3, [pc, #200]	; (6ba4 <_adc_async_init+0xf8>)
    6adc:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    6ade:	4628      	mov	r0, r5
    6ae0:	4f31      	ldr	r7, [pc, #196]	; (6ba8 <_adc_async_init+0xfc>)
    6ae2:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ae4:	0943      	lsrs	r3, r0, #5
    6ae6:	f000 001f 	and.w	r0, r0, #31
    6aea:	2401      	movs	r4, #1
    6aec:	fa04 f000 	lsl.w	r0, r4, r0
    6af0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 6bac <_adc_async_init+0x100>
    6af4:	3320      	adds	r3, #32
    6af6:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6afa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6afe:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    6b02:	4628      	mov	r0, r5
    6b04:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b06:	0943      	lsrs	r3, r0, #5
    6b08:	f000 001f 	and.w	r0, r0, #31
    6b0c:	fa04 f000 	lsl.w	r0, r4, r0
    6b10:	3360      	adds	r3, #96	; 0x60
    6b12:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    6b16:	4628      	mov	r0, r5
    6b18:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b1a:	0943      	lsrs	r3, r0, #5
    6b1c:	f000 001f 	and.w	r0, r0, #31
    6b20:	4084      	lsls	r4, r0
    6b22:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    6b26:	4628      	mov	r0, r5
    6b28:	47b8      	blx	r7
    6b2a:	3001      	adds	r0, #1
    6b2c:	b280      	uxth	r0, r0
    6b2e:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6b30:	2b00      	cmp	r3, #0
    6b32:	dbc8      	blt.n	6ac6 <_adc_async_init+0x1a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b34:	095b      	lsrs	r3, r3, #5
    6b36:	f000 001f 	and.w	r0, r0, #31
    6b3a:	2201      	movs	r2, #1
    6b3c:	fa02 f000 	lsl.w	r0, r2, r0
    6b40:	3320      	adds	r3, #32
    6b42:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6b46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6b4a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    6b4e:	4628      	mov	r0, r5
    6b50:	47b8      	blx	r7
    6b52:	3001      	adds	r0, #1
    6b54:	b280      	uxth	r0, r0
    6b56:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6b58:	2b00      	cmp	r3, #0
    6b5a:	dbb4      	blt.n	6ac6 <_adc_async_init+0x1a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b5c:	095b      	lsrs	r3, r3, #5
    6b5e:	f000 001f 	and.w	r0, r0, #31
    6b62:	2201      	movs	r2, #1
    6b64:	fa02 f000 	lsl.w	r0, r2, r0
    6b68:	3360      	adds	r3, #96	; 0x60
    6b6a:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    6b6e:	4628      	mov	r0, r5
    6b70:	47b8      	blx	r7
    6b72:	3001      	adds	r0, #1
    6b74:	b280      	uxth	r0, r0
    6b76:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6b78:	2b00      	cmp	r3, #0
    6b7a:	dba4      	blt.n	6ac6 <_adc_async_init+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b7c:	095b      	lsrs	r3, r3, #5
    6b7e:	f000 001f 	and.w	r0, r0, #31
    6b82:	2201      	movs	r2, #1
    6b84:	fa02 f000 	lsl.w	r0, r2, r0
    6b88:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    6b8c:	e79b      	b.n	6ac6 <_adc_async_init+0x1a>
		_adc0_dev = dev;
    6b8e:	4b05      	ldr	r3, [pc, #20]	; (6ba4 <_adc_async_init+0xf8>)
    6b90:	601d      	str	r5, [r3, #0]
    6b92:	e7a4      	b.n	6ade <_adc_async_init+0x32>
    6b94:	00006901 	.word	0x00006901
    6b98:	00006919 	.word	0x00006919
    6b9c:	43001c00 	.word	0x43001c00
    6ba0:	43002000 	.word	0x43002000
    6ba4:	200002ec 	.word	0x200002ec
    6ba8:	00006a97 	.word	0x00006a97
    6bac:	e000e100 	.word	0xe000e100

00006bb0 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    6bb0:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    6bb2:	88db      	ldrh	r3, [r3, #6]
    6bb4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    6bb8:	2b03      	cmp	r3, #3
}
    6bba:	bf0c      	ite	eq
    6bbc:	2001      	moveq	r0, #1
    6bbe:	2002      	movne	r0, #2
    6bc0:	4770      	bx	lr
	...

00006bc4 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    6bc4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    6bc6:	4b02      	ldr	r3, [pc, #8]	; (6bd0 <ADC0_0_Handler+0xc>)
    6bc8:	6818      	ldr	r0, [r3, #0]
    6bca:	4b02      	ldr	r3, [pc, #8]	; (6bd4 <ADC0_0_Handler+0x10>)
    6bcc:	4798      	blx	r3
    6bce:	bd08      	pop	{r3, pc}
    6bd0:	200002ec 	.word	0x200002ec
    6bd4:	00006a45 	.word	0x00006a45

00006bd8 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    6bd8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    6bda:	4b02      	ldr	r3, [pc, #8]	; (6be4 <ADC0_1_Handler+0xc>)
    6bdc:	6818      	ldr	r0, [r3, #0]
    6bde:	4b02      	ldr	r3, [pc, #8]	; (6be8 <ADC0_1_Handler+0x10>)
    6be0:	4798      	blx	r3
    6be2:	bd08      	pop	{r3, pc}
    6be4:	200002ec 	.word	0x200002ec
    6be8:	00006a45 	.word	0x00006a45

00006bec <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    6bec:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    6bee:	4b02      	ldr	r3, [pc, #8]	; (6bf8 <ADC1_0_Handler+0xc>)
    6bf0:	6858      	ldr	r0, [r3, #4]
    6bf2:	4b02      	ldr	r3, [pc, #8]	; (6bfc <ADC1_0_Handler+0x10>)
    6bf4:	4798      	blx	r3
    6bf6:	bd08      	pop	{r3, pc}
    6bf8:	200002ec 	.word	0x200002ec
    6bfc:	00006a45 	.word	0x00006a45

00006c00 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    6c00:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    6c02:	4b02      	ldr	r3, [pc, #8]	; (6c0c <ADC1_1_Handler+0xc>)
    6c04:	6858      	ldr	r0, [r3, #4]
    6c06:	4b02      	ldr	r3, [pc, #8]	; (6c10 <ADC1_1_Handler+0x10>)
    6c08:	4798      	blx	r3
    6c0a:	bd08      	pop	{r3, pc}
    6c0c:	200002ec 	.word	0x200002ec
    6c10:	00006a45 	.word	0x00006a45

00006c14 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c14:	0943      	lsrs	r3, r0, #5
    6c16:	f000 001f 	and.w	r0, r0, #31
    6c1a:	2201      	movs	r2, #1
    6c1c:	fa02 f000 	lsl.w	r0, r2, r0
    6c20:	3340      	adds	r3, #64	; 0x40
    6c22:	4a02      	ldr	r2, [pc, #8]	; (6c2c <_irq_set+0x18>)
    6c24:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6c28:	4770      	bx	lr
    6c2a:	bf00      	nop
    6c2c:	e000e100 	.word	0xe000e100

00006c30 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6c30:	4b01      	ldr	r3, [pc, #4]	; (6c38 <_get_cycles_for_ms+0x8>)
    6c32:	fb03 f000 	mul.w	r0, r3, r0
    6c36:	4770      	bx	lr
    6c38:	0001d4c0 	.word	0x0001d4c0

00006c3c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6c3c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6c3e:	4a0e      	ldr	r2, [pc, #56]	; (6c78 <_init_chip+0x3c>)
    6c40:	8813      	ldrh	r3, [r2, #0]
    6c42:	b29b      	uxth	r3, r3
    6c44:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    6c48:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    6c4a:	4b0c      	ldr	r3, [pc, #48]	; (6c7c <_init_chip+0x40>)
    6c4c:	4798      	blx	r3
	_oscctrl_init_sources();
    6c4e:	4b0c      	ldr	r3, [pc, #48]	; (6c80 <_init_chip+0x44>)
    6c50:	4798      	blx	r3
	_mclk_init();
    6c52:	4b0c      	ldr	r3, [pc, #48]	; (6c84 <_init_chip+0x48>)
    6c54:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6c56:	2004      	movs	r0, #4
    6c58:	4c0b      	ldr	r4, [pc, #44]	; (6c88 <_init_chip+0x4c>)
    6c5a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    6c5c:	4b0b      	ldr	r3, [pc, #44]	; (6c8c <_init_chip+0x50>)
    6c5e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6c60:	f640 70fb 	movw	r0, #4091	; 0xffb
    6c64:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    6c66:	4a0a      	ldr	r2, [pc, #40]	; (6c90 <_init_chip+0x54>)
    6c68:	6913      	ldr	r3, [r2, #16]
    6c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6c6e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    6c70:	4b08      	ldr	r3, [pc, #32]	; (6c94 <_init_chip+0x58>)
    6c72:	4798      	blx	r3
    6c74:	bd10      	pop	{r4, pc}
    6c76:	bf00      	nop
    6c78:	41004000 	.word	0x41004000
    6c7c:	000070ed 	.word	0x000070ed
    6c80:	00007101 	.word	0x00007101
    6c84:	00007041 	.word	0x00007041
    6c88:	00006fc9 	.word	0x00006fc9
    6c8c:	00007105 	.word	0x00007105
    6c90:	40000800 	.word	0x40000800
    6c94:	00006d0d 	.word	0x00006d0d

00006c98 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    6c98:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    6c9a:	4a1a      	ldr	r2, [pc, #104]	; (6d04 <_dmac_handler+0x6c>)
    6c9c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    6c9e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    6ca2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    6ca6:	4818      	ldr	r0, [pc, #96]	; (6d08 <_dmac_handler+0x70>)
    6ca8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    6cac:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6cb0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    6cb4:	f012 0f01 	tst.w	r2, #1
    6cb8:	d10a      	bne.n	6cd0 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    6cba:	011a      	lsls	r2, r3, #4
    6cbc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6cc0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6cc4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    6cc8:	f012 0f02 	tst.w	r2, #2
    6ccc:	d10b      	bne.n	6ce6 <_dmac_handler+0x4e>
    6cce:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    6cd0:	011a      	lsls	r2, r3, #4
    6cd2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6cd6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6cda:	2101      	movs	r1, #1
    6cdc:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    6ce0:	6843      	ldr	r3, [r0, #4]
    6ce2:	4798      	blx	r3
    6ce4:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    6ce6:	011a      	lsls	r2, r3, #4
    6ce8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6cec:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6cf0:	2102      	movs	r1, #2
    6cf2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    6cf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6cfa:	4a03      	ldr	r2, [pc, #12]	; (6d08 <_dmac_handler+0x70>)
    6cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d00:	4798      	blx	r3
	}
}
    6d02:	e7e4      	b.n	6cce <_dmac_handler+0x36>
    6d04:	4100a000 	.word	0x4100a000
    6d08:	200002f4 	.word	0x200002f4

00006d0c <_dma_init>:
{
    6d0c:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    6d0e:	4a32      	ldr	r2, [pc, #200]	; (6dd8 <_dma_init+0xcc>)
    6d10:	8813      	ldrh	r3, [r2, #0]
    6d12:	f023 0302 	bic.w	r3, r3, #2
    6d16:	041b      	lsls	r3, r3, #16
    6d18:	0c1b      	lsrs	r3, r3, #16
    6d1a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    6d1c:	8853      	ldrh	r3, [r2, #2]
    6d1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    6d22:	041b      	lsls	r3, r3, #16
    6d24:	0c1b      	lsrs	r3, r3, #16
    6d26:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    6d28:	8813      	ldrh	r3, [r2, #0]
    6d2a:	b29b      	uxth	r3, r3
    6d2c:	f043 0301 	orr.w	r3, r3, #1
    6d30:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    6d32:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    6d34:	f013 0f01 	tst.w	r3, #1
    6d38:	d1fb      	bne.n	6d32 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    6d3a:	4b27      	ldr	r3, [pc, #156]	; (6dd8 <_dma_init+0xcc>)
    6d3c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    6d40:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    6d42:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    6d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    6d48:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    6d4c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    6d4e:	2100      	movs	r1, #0
    6d50:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    6d52:	4a22      	ldr	r2, [pc, #136]	; (6ddc <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    6d54:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    6d56:	4a22      	ldr	r2, [pc, #136]	; (6de0 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    6d58:	639a      	str	r2, [r3, #56]	; 0x38
    6d5a:	4b22      	ldr	r3, [pc, #136]	; (6de4 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6d5c:	4c1f      	ldr	r4, [pc, #124]	; (6ddc <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6d5e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    6d60:	681d      	ldr	r5, [r3, #0]
    6d62:	0108      	lsls	r0, r1, #4
    6d64:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    6d68:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    6d6c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    6d6e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    6d70:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    6d74:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    6d76:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    6d7a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6d7c:	1822      	adds	r2, r4, r0
    6d7e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6d80:	60d6      	str	r6, [r2, #12]
    6d82:	3101      	adds	r1, #1
    6d84:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    6d86:	2920      	cmp	r1, #32
    6d88:	d1ea      	bne.n	6d60 <_dma_init+0x54>
    6d8a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d8c:	2001      	movs	r0, #1
    6d8e:	4916      	ldr	r1, [pc, #88]	; (6de8 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    6d90:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    6d92:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6d96:	d00b      	beq.n	6db0 <_dma_init+0xa4>
    6d98:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    6d9a:	2b24      	cmp	r3, #36	; 0x24
    6d9c:	d1f8      	bne.n	6d90 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    6d9e:	4a0e      	ldr	r2, [pc, #56]	; (6dd8 <_dma_init+0xcc>)
    6da0:	8813      	ldrh	r3, [r2, #0]
    6da2:	b29b      	uxth	r3, r3
    6da4:	f043 0302 	orr.w	r3, r3, #2
    6da8:	8013      	strh	r3, [r2, #0]
}
    6daa:	2000      	movs	r0, #0
    6dac:	bc70      	pop	{r4, r5, r6}
    6dae:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6db0:	095c      	lsrs	r4, r3, #5
    6db2:	f002 021f 	and.w	r2, r2, #31
    6db6:	fa00 f202 	lsl.w	r2, r0, r2
    6dba:	f104 0520 	add.w	r5, r4, #32
    6dbe:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6dc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6dc6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6dca:	f104 0560 	add.w	r5, r4, #96	; 0x60
    6dce:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6dd2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    6dd6:	e7df      	b.n	6d98 <_dma_init+0x8c>
    6dd8:	4100a000 	.word	0x4100a000
    6ddc:	20007290 	.word	0x20007290
    6de0:	20007490 	.word	0x20007490
    6de4:	0000bad4 	.word	0x0000bad4
    6de8:	e000e100 	.word	0xe000e100

00006dec <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    6dec:	b991      	cbnz	r1, 6e14 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    6dee:	b942      	cbnz	r2, 6e02 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    6df0:	0100      	lsls	r0, r0, #4
    6df2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6df6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6dfa:	2302      	movs	r3, #2
    6dfc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    6e00:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    6e02:	0100      	lsls	r0, r0, #4
    6e04:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6e08:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6e0c:	2302      	movs	r3, #2
    6e0e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    6e12:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    6e14:	2901      	cmp	r1, #1
    6e16:	d000      	beq.n	6e1a <_dma_set_irq_state+0x2e>
    6e18:	4770      	bx	lr
	if (value == 0x0) {
    6e1a:	b142      	cbz	r2, 6e2e <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    6e1c:	0100      	lsls	r0, r0, #4
    6e1e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6e22:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6e26:	2301      	movs	r3, #1
    6e28:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    6e2c:	e7f4      	b.n	6e18 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    6e2e:	0100      	lsls	r0, r0, #4
    6e30:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6e34:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6e38:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    6e3c:	4770      	bx	lr
	...

00006e40 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6e40:	4b02      	ldr	r3, [pc, #8]	; (6e4c <_dma_set_destination_address+0xc>)
    6e42:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6e46:	6081      	str	r1, [r0, #8]
}
    6e48:	2000      	movs	r0, #0
    6e4a:	4770      	bx	lr
    6e4c:	20007290 	.word	0x20007290

00006e50 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6e50:	4b02      	ldr	r3, [pc, #8]	; (6e5c <_dma_set_source_address+0xc>)
    6e52:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6e56:	6041      	str	r1, [r0, #4]
}
    6e58:	2000      	movs	r0, #0
    6e5a:	4770      	bx	lr
    6e5c:	20007290 	.word	0x20007290

00006e60 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6e60:	4a05      	ldr	r2, [pc, #20]	; (6e78 <_dma_srcinc_enable+0x18>)
    6e62:	0100      	lsls	r0, r0, #4
    6e64:	5a13      	ldrh	r3, [r2, r0]
    6e66:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    6e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    6e6c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    6e70:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    6e72:	5211      	strh	r1, [r2, r0]
}
    6e74:	2000      	movs	r0, #0
    6e76:	4770      	bx	lr
    6e78:	20007290 	.word	0x20007290

00006e7c <_dma_set_data_amount>:
{
    6e7c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    6e7e:	4c14      	ldr	r4, [pc, #80]	; (6ed0 <_dma_set_data_amount+0x54>)
    6e80:	0102      	lsls	r2, r0, #4
    6e82:	18a3      	adds	r3, r4, r2
    6e84:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6e86:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    6e88:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6e8c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    6e8e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    6e92:	d006      	beq.n	6ea2 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6e94:	fa01 f403 	lsl.w	r4, r1, r3
    6e98:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6e9a:	4a0d      	ldr	r2, [pc, #52]	; (6ed0 <_dma_set_data_amount+0x54>)
    6e9c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    6ea0:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    6ea2:	4c0b      	ldr	r4, [pc, #44]	; (6ed0 <_dma_set_data_amount+0x54>)
    6ea4:	0102      	lsls	r2, r0, #4
    6ea6:	18a5      	adds	r5, r4, r2
    6ea8:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6eaa:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    6eac:	f412 6f80 	tst.w	r2, #1024	; 0x400
    6eb0:	d005      	beq.n	6ebe <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6eb2:	fa01 f303 	lsl.w	r3, r1, r3
    6eb6:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6eb8:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    6ebc:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    6ebe:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    6ec0:	4b03      	ldr	r3, [pc, #12]	; (6ed0 <_dma_set_data_amount+0x54>)
    6ec2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6ec6:	8041      	strh	r1, [r0, #2]
}
    6ec8:	2000      	movs	r0, #0
    6eca:	bc30      	pop	{r4, r5}
    6ecc:	4770      	bx	lr
    6ece:	bf00      	nop
    6ed0:	20007290 	.word	0x20007290

00006ed4 <_dma_enable_transaction>:
{
    6ed4:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    6ed6:	4c0d      	ldr	r4, [pc, #52]	; (6f0c <_dma_enable_transaction+0x38>)
    6ed8:	0103      	lsls	r3, r0, #4
    6eda:	5ae2      	ldrh	r2, [r4, r3]
    6edc:	b292      	uxth	r2, r2
    6ede:	f042 0201 	orr.w	r2, r2, #1
    6ee2:	52e2      	strh	r2, [r4, r3]
    6ee4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6ee8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    6eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6eee:	f042 0202 	orr.w	r2, r2, #2
    6ef2:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    6ef4:	b131      	cbz	r1, 6f04 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    6ef6:	4a06      	ldr	r2, [pc, #24]	; (6f10 <_dma_enable_transaction+0x3c>)
    6ef8:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    6efa:	2301      	movs	r3, #1
    6efc:	fa03 f000 	lsl.w	r0, r3, r0
    6f00:	4308      	orrs	r0, r1
    6f02:	6110      	str	r0, [r2, #16]
}
    6f04:	2000      	movs	r0, #0
    6f06:	f85d 4b04 	ldr.w	r4, [sp], #4
    6f0a:	4770      	bx	lr
    6f0c:	20007290 	.word	0x20007290
    6f10:	4100a000 	.word	0x4100a000

00006f14 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    6f14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6f18:	4b02      	ldr	r3, [pc, #8]	; (6f24 <_dma_get_channel_resource+0x10>)
    6f1a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6f1e:	6001      	str	r1, [r0, #0]
}
    6f20:	2000      	movs	r0, #0
    6f22:	4770      	bx	lr
    6f24:	200002f4 	.word	0x200002f4

00006f28 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    6f28:	b508      	push	{r3, lr}
	_dmac_handler();
    6f2a:	4b01      	ldr	r3, [pc, #4]	; (6f30 <DMAC_0_Handler+0x8>)
    6f2c:	4798      	blx	r3
    6f2e:	bd08      	pop	{r3, pc}
    6f30:	00006c99 	.word	0x00006c99

00006f34 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    6f34:	b508      	push	{r3, lr}
	_dmac_handler();
    6f36:	4b01      	ldr	r3, [pc, #4]	; (6f3c <DMAC_1_Handler+0x8>)
    6f38:	4798      	blx	r3
    6f3a:	bd08      	pop	{r3, pc}
    6f3c:	00006c99 	.word	0x00006c99

00006f40 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    6f40:	b508      	push	{r3, lr}
	_dmac_handler();
    6f42:	4b01      	ldr	r3, [pc, #4]	; (6f48 <DMAC_2_Handler+0x8>)
    6f44:	4798      	blx	r3
    6f46:	bd08      	pop	{r3, pc}
    6f48:	00006c99 	.word	0x00006c99

00006f4c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    6f4c:	b508      	push	{r3, lr}
	_dmac_handler();
    6f4e:	4b01      	ldr	r3, [pc, #4]	; (6f54 <DMAC_3_Handler+0x8>)
    6f50:	4798      	blx	r3
    6f52:	bd08      	pop	{r3, pc}
    6f54:	00006c99 	.word	0x00006c99

00006f58 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    6f58:	b508      	push	{r3, lr}
	_dmac_handler();
    6f5a:	4b01      	ldr	r3, [pc, #4]	; (6f60 <DMAC_4_Handler+0x8>)
    6f5c:	4798      	blx	r3
    6f5e:	bd08      	pop	{r3, pc}
    6f60:	00006c99 	.word	0x00006c99

00006f64 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    6f64:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    6f66:	2000      	movs	r0, #0
    6f68:	4770      	bx	lr
	...

00006f6c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6f6c:	b430      	push	{r4, r5}
    6f6e:	4814      	ldr	r0, [pc, #80]	; (6fc0 <_event_system_init+0x54>)
    6f70:	f100 0543 	add.w	r5, r0, #67	; 0x43
    6f74:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6f76:	4c13      	ldr	r4, [pc, #76]	; (6fc4 <_event_system_init+0x58>)
    6f78:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6f7a:	f813 1b01 	ldrb.w	r1, [r3], #1
    6f7e:	3248      	adds	r2, #72	; 0x48
    6f80:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    6f84:	42ab      	cmp	r3, r5
    6f86:	d1f7      	bne.n	6f78 <_event_system_init+0xc>
    6f88:	480d      	ldr	r0, [pc, #52]	; (6fc0 <_event_system_init+0x54>)
    6f8a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    6f8e:	3080      	adds	r0, #128	; 0x80
    6f90:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6f92:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6f96:	00ca      	lsls	r2, r1, #3
    6f98:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6f9c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6fa0:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6fa2:	f850 3f04 	ldr.w	r3, [r0, #4]!
    6fa6:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6fa8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6fac:	43db      	mvns	r3, r3
    6fae:	b2db      	uxtb	r3, r3
    6fb0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    6fb4:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6fb6:	2920      	cmp	r1, #32
    6fb8:	d1eb      	bne.n	6f92 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    6fba:	2000      	movs	r0, #0
    6fbc:	bc30      	pop	{r4, r5}
    6fbe:	4770      	bx	lr
    6fc0:	0000bbd4 	.word	0x0000bbd4
    6fc4:	4100e000 	.word	0x4100e000

00006fc8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6fc8:	f010 0f01 	tst.w	r0, #1
    6fcc:	d008      	beq.n	6fe0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6fce:	4a17      	ldr	r2, [pc, #92]	; (702c <_gclk_init_generators_by_fref+0x64>)
    6fd0:	4b17      	ldr	r3, [pc, #92]	; (7030 <_gclk_init_generators_by_fref+0x68>)
    6fd2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6fd4:	4619      	mov	r1, r3
    6fd6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6fda:	684b      	ldr	r3, [r1, #4]
    6fdc:	4213      	tst	r3, r2
    6fde:	d1fc      	bne.n	6fda <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6fe0:	f010 0f02 	tst.w	r0, #2
    6fe4:	d008      	beq.n	6ff8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6fe6:	4a13      	ldr	r2, [pc, #76]	; (7034 <_gclk_init_generators_by_fref+0x6c>)
    6fe8:	4b11      	ldr	r3, [pc, #68]	; (7030 <_gclk_init_generators_by_fref+0x68>)
    6fea:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6fec:	4619      	mov	r1, r3
    6fee:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6ff2:	684b      	ldr	r3, [r1, #4]
    6ff4:	4213      	tst	r3, r2
    6ff6:	d1fc      	bne.n	6ff2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    6ff8:	f010 0f04 	tst.w	r0, #4
    6ffc:	d008      	beq.n	7010 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6ffe:	4a0e      	ldr	r2, [pc, #56]	; (7038 <_gclk_init_generators_by_fref+0x70>)
    7000:	4b0b      	ldr	r3, [pc, #44]	; (7030 <_gclk_init_generators_by_fref+0x68>)
    7002:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7004:	4619      	mov	r1, r3
    7006:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    700a:	684b      	ldr	r3, [r1, #4]
    700c:	4213      	tst	r3, r2
    700e:	d1fc      	bne.n	700a <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    7010:	f010 0f08 	tst.w	r0, #8
    7014:	d008      	beq.n	7028 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7016:	4a09      	ldr	r2, [pc, #36]	; (703c <_gclk_init_generators_by_fref+0x74>)
    7018:	4b05      	ldr	r3, [pc, #20]	; (7030 <_gclk_init_generators_by_fref+0x68>)
    701a:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    701c:	4619      	mov	r1, r3
    701e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7022:	684b      	ldr	r3, [r1, #4]
    7024:	4213      	tst	r3, r2
    7026:	d1fc      	bne.n	7022 <_gclk_init_generators_by_fref+0x5a>
    7028:	4770      	bx	lr
    702a:	bf00      	nop
    702c:	00010108 	.word	0x00010108
    7030:	40001c00 	.word	0x40001c00
    7034:	00010106 	.word	0x00010106
    7038:	00100106 	.word	0x00100106
    703c:	00010104 	.word	0x00010104

00007040 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    7040:	2201      	movs	r2, #1
    7042:	4b01      	ldr	r3, [pc, #4]	; (7048 <_mclk_init+0x8>)
    7044:	715a      	strb	r2, [r3, #5]
    7046:	4770      	bx	lr
    7048:	40000800 	.word	0x40000800

0000704c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    704c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    704e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    7050:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    7052:	f012 0f01 	tst.w	r2, #1
    7056:	d005      	beq.n	7064 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    7058:	2201      	movs	r2, #1
    705a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    705c:	6803      	ldr	r3, [r0, #0]
    705e:	b153      	cbz	r3, 7076 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    7060:	4798      	blx	r3
    7062:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    7064:	8a1a      	ldrh	r2, [r3, #16]
    7066:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    7068:	b12a      	cbz	r2, 7076 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    706a:	f240 225e 	movw	r2, #606	; 0x25e
    706e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    7070:	6843      	ldr	r3, [r0, #4]
    7072:	b103      	cbz	r3, 7076 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    7074:	4798      	blx	r3
    7076:	bd08      	pop	{r3, pc}

00007078 <_flash_init>:
	device->hw = hw;
    7078:	6101      	str	r1, [r0, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    707a:	880b      	ldrh	r3, [r1, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    707c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    7080:	049b      	lsls	r3, r3, #18
    7082:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    7084:	800b      	strh	r3, [r1, #0]
	_nvm_dev = device;
    7086:	4b0d      	ldr	r3, [pc, #52]	; (70bc <_flash_init+0x44>)
    7088:	6018      	str	r0, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    708a:	4b0d      	ldr	r3, [pc, #52]	; (70c0 <_flash_init+0x48>)
    708c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    7090:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7094:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7098:	f3bf 8f6f 	isb	sy
    709c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    70a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    70a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    70a8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70ac:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    70b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70b4:	6019      	str	r1, [r3, #0]
    70b6:	601a      	str	r2, [r3, #0]
}
    70b8:	2000      	movs	r0, #0
    70ba:	4770      	bx	lr
    70bc:	20000474 	.word	0x20000474
    70c0:	e000e100 	.word	0xe000e100

000070c4 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    70c4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    70c6:	4b02      	ldr	r3, [pc, #8]	; (70d0 <NVMCTRL_0_Handler+0xc>)
    70c8:	6818      	ldr	r0, [r3, #0]
    70ca:	4b02      	ldr	r3, [pc, #8]	; (70d4 <NVMCTRL_0_Handler+0x10>)
    70cc:	4798      	blx	r3
    70ce:	bd08      	pop	{r3, pc}
    70d0:	20000474 	.word	0x20000474
    70d4:	0000704d 	.word	0x0000704d

000070d8 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    70d8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    70da:	4b02      	ldr	r3, [pc, #8]	; (70e4 <NVMCTRL_1_Handler+0xc>)
    70dc:	6818      	ldr	r0, [r3, #0]
    70de:	4b02      	ldr	r3, [pc, #8]	; (70e8 <NVMCTRL_1_Handler+0x10>)
    70e0:	4798      	blx	r3
    70e2:	bd08      	pop	{r3, pc}
    70e4:	20000474 	.word	0x20000474
    70e8:	0000704d 	.word	0x0000704d

000070ec <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    70ec:	4b03      	ldr	r3, [pc, #12]	; (70fc <_osc32kctrl_init_sources+0x10>)
    70ee:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    70f0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    70f4:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    70f6:	2201      	movs	r2, #1
    70f8:	741a      	strb	r2, [r3, #16]
    70fa:	4770      	bx	lr
    70fc:	40001400 	.word	0x40001400

00007100 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    7100:	4770      	bx	lr
	...

00007104 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    7104:	4a47      	ldr	r2, [pc, #284]	; (7224 <_oscctrl_init_referenced_generators+0x120>)
    7106:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7108:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    710c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    7110:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7112:	4611      	mov	r1, r2
    7114:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7118:	684b      	ldr	r3, [r1, #4]
    711a:	4213      	tst	r3, r2
    711c:	d1fc      	bne.n	7118 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    711e:	4a41      	ldr	r2, [pc, #260]	; (7224 <_oscctrl_init_referenced_generators+0x120>)
    7120:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7122:	f013 0f04 	tst.w	r3, #4
    7126:	d1fb      	bne.n	7120 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7128:	4b3f      	ldr	r3, [pc, #252]	; (7228 <_oscctrl_init_referenced_generators+0x124>)
    712a:	2200      	movs	r2, #0
    712c:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    712e:	4a3f      	ldr	r2, [pc, #252]	; (722c <_oscctrl_init_referenced_generators+0x128>)
    7130:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7132:	461a      	mov	r2, r3
    7134:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7138:	f013 0f10 	tst.w	r3, #16
    713c:	d1fa      	bne.n	7134 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    713e:	2200      	movs	r2, #0
    7140:	4b39      	ldr	r3, [pc, #228]	; (7228 <_oscctrl_init_referenced_generators+0x124>)
    7142:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7146:	461a      	mov	r2, r3
    7148:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    714c:	f013 0f04 	tst.w	r3, #4
    7150:	d1fa      	bne.n	7148 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7152:	2202      	movs	r2, #2
    7154:	4b34      	ldr	r3, [pc, #208]	; (7228 <_oscctrl_init_referenced_generators+0x124>)
    7156:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7158:	461a      	mov	r2, r3
    715a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    715e:	f013 0f02 	tst.w	r3, #2
    7162:	d1fa      	bne.n	715a <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    7164:	4b30      	ldr	r3, [pc, #192]	; (7228 <_oscctrl_init_referenced_generators+0x124>)
    7166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    7168:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    716a:	461a      	mov	r2, r3
    716c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    7170:	f013 0f08 	tst.w	r3, #8
    7174:	d1fa      	bne.n	716c <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    7176:	2288      	movs	r2, #136	; 0x88
    7178:	4b2b      	ldr	r3, [pc, #172]	; (7228 <_oscctrl_init_referenced_generators+0x124>)
    717a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    717e:	461a      	mov	r2, r3
    7180:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7184:	f013 0f04 	tst.w	r3, #4
    7188:	d1fa      	bne.n	7180 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    718a:	2242      	movs	r2, #66	; 0x42
    718c:	4b25      	ldr	r3, [pc, #148]	; (7224 <_oscctrl_init_referenced_generators+0x120>)
    718e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    7192:	2227      	movs	r2, #39	; 0x27
    7194:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    7198:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    719a:	461a      	mov	r2, r3
    719c:	6d13      	ldr	r3, [r2, #80]	; 0x50
    719e:	f013 0f06 	tst.w	r3, #6
    71a2:	d1fb      	bne.n	719c <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    71a4:	4b20      	ldr	r3, [pc, #128]	; (7228 <_oscctrl_init_referenced_generators+0x124>)
    71a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    71aa:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    71ac:	2202      	movs	r2, #2
    71ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    71b2:	461a      	mov	r2, r3
    71b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
    71b6:	f013 0f02 	tst.w	r3, #2
    71ba:	d1fb      	bne.n	71b4 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    71bc:	4b1a      	ldr	r3, [pc, #104]	; (7228 <_oscctrl_init_referenced_generators+0x124>)
    71be:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    71c2:	f013 0f01 	tst.w	r3, #1
    71c6:	d026      	beq.n	7216 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    71c8:	4a17      	ldr	r2, [pc, #92]	; (7228 <_oscctrl_init_referenced_generators+0x124>)
    71ca:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    71cc:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    71d0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    71d4:	d1f9      	bne.n	71ca <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    71d6:	4b14      	ldr	r3, [pc, #80]	; (7228 <_oscctrl_init_referenced_generators+0x124>)
    71d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    71da:	f012 0f01 	tst.w	r2, #1
    71de:	d103      	bne.n	71e8 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    71e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    71e2:	f012 0f02 	tst.w	r2, #2
    71e6:	d0f7      	beq.n	71d8 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    71e8:	4a0e      	ldr	r2, [pc, #56]	; (7224 <_oscctrl_init_referenced_generators+0x120>)
    71ea:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    71ec:	2b00      	cmp	r3, #0
    71ee:	d1fc      	bne.n	71ea <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    71f0:	4a0c      	ldr	r2, [pc, #48]	; (7224 <_oscctrl_init_referenced_generators+0x120>)
    71f2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    71f4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    71f8:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    71fc:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    71fe:	4611      	mov	r1, r2
    7200:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7204:	684b      	ldr	r3, [r1, #4]
    7206:	4213      	tst	r3, r2
    7208:	d1fc      	bne.n	7204 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    720a:	4a06      	ldr	r2, [pc, #24]	; (7224 <_oscctrl_init_referenced_generators+0x120>)
    720c:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    720e:	f013 0f04 	tst.w	r3, #4
    7212:	d1fb      	bne.n	720c <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    7214:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    7216:	4a04      	ldr	r2, [pc, #16]	; (7228 <_oscctrl_init_referenced_generators+0x124>)
    7218:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    721a:	f413 7f80 	tst.w	r3, #256	; 0x100
    721e:	d0fb      	beq.n	7218 <_oscctrl_init_referenced_generators+0x114>
    7220:	e7d9      	b.n	71d6 <_oscctrl_init_referenced_generators+0xd2>
    7222:	bf00      	nop
    7224:	40001c00 	.word	0x40001c00
    7228:	40001000 	.word	0x40001000
    722c:	04010000 	.word	0x04010000

00007230 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    7230:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    7232:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    7234:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7236:	4903      	ldr	r1, [pc, #12]	; (7244 <_qspi_dma_rx_complete+0x14>)
    7238:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    723a:	685b      	ldr	r3, [r3, #4]
    723c:	b103      	cbz	r3, 7240 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    723e:	4798      	blx	r3
    7240:	bd08      	pop	{r3, pc}
    7242:	bf00      	nop
    7244:	01000002 	.word	0x01000002

00007248 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    7248:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    724a:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    724c:	681a      	ldr	r2, [r3, #0]
    724e:	4903      	ldr	r1, [pc, #12]	; (725c <_qspi_dma_tx_complete+0x14>)
    7250:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    7252:	685b      	ldr	r3, [r3, #4]
    7254:	b103      	cbz	r3, 7258 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    7256:	4798      	blx	r3
    7258:	bd08      	pop	{r3, pc}
    725a:	bf00      	nop
    725c:	01000002 	.word	0x01000002

00007260 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    7260:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    7262:	6883      	ldr	r3, [r0, #8]
    7264:	689b      	ldr	r3, [r3, #8]
    7266:	b103      	cbz	r3, 726a <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    7268:	4798      	blx	r3
    726a:	bd08      	pop	{r3, pc}

0000726c <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    726e:	4604      	mov	r4, r0
	ASSERT(dev && hw);
	dev->prvt = hw;
    7270:	4605      	mov	r5, r0
    7272:	f845 1b0c 	str.w	r1, [r5], #12
    7276:	2301      	movs	r3, #1
    7278:	600b      	str	r3, [r1, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    727a:	4b0e      	ldr	r3, [pc, #56]	; (72b4 <_qspi_dma_init+0x48>)
    727c:	604b      	str	r3, [r1, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    727e:	4b0e      	ldr	r3, [pc, #56]	; (72b8 <_qspi_dma_init+0x4c>)
    7280:	608b      	str	r3, [r1, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    7282:	211f      	movs	r1, #31
    7284:	4628      	mov	r0, r5
    7286:	4f0d      	ldr	r7, [pc, #52]	; (72bc <_qspi_dma_init+0x50>)
    7288:	47b8      	blx	r7
	dev->resource->back                 = dev;
    728a:	68e3      	ldr	r3, [r4, #12]
    728c:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    728e:	68e3      	ldr	r3, [r4, #12]
    7290:	4a0b      	ldr	r2, [pc, #44]	; (72c0 <_qspi_dma_init+0x54>)
    7292:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    7294:	68e3      	ldr	r3, [r4, #12]
    7296:	4e0b      	ldr	r6, [pc, #44]	; (72c4 <_qspi_dma_init+0x58>)
    7298:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    729a:	211e      	movs	r1, #30
    729c:	4628      	mov	r0, r5
    729e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    72a0:	68e3      	ldr	r3, [r4, #12]
    72a2:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    72a4:	68e3      	ldr	r3, [r4, #12]
    72a6:	4a08      	ldr	r2, [pc, #32]	; (72c8 <_qspi_dma_init+0x5c>)
    72a8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    72aa:	68e3      	ldr	r3, [r4, #12]
    72ac:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
}
    72ae:	2000      	movs	r0, #0
    72b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72b2:	bf00      	nop
    72b4:	06000011 	.word	0x06000011
    72b8:	00243b00 	.word	0x00243b00
    72bc:	00006f15 	.word	0x00006f15
    72c0:	00007231 	.word	0x00007231
    72c4:	00007261 	.word	0x00007261
    72c8:	00007249 	.word	0x00007249

000072cc <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    72cc:	b500      	push	{lr}
    72ce:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    72d0:	4b0d      	ldr	r3, [pc, #52]	; (7308 <RAMECC_Handler+0x3c>)
    72d2:	789b      	ldrb	r3, [r3, #2]
    72d4:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    72d6:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    72d8:	9b01      	ldr	r3, [sp, #4]
    72da:	f013 0f02 	tst.w	r3, #2
    72de:	d006      	beq.n	72ee <RAMECC_Handler+0x22>
    72e0:	4b0a      	ldr	r3, [pc, #40]	; (730c <RAMECC_Handler+0x40>)
    72e2:	681b      	ldr	r3, [r3, #0]
    72e4:	b11b      	cbz	r3, 72ee <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    72e6:	4a08      	ldr	r2, [pc, #32]	; (7308 <RAMECC_Handler+0x3c>)
    72e8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    72ea:	4798      	blx	r3
    72ec:	e009      	b.n	7302 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    72ee:	9b01      	ldr	r3, [sp, #4]
    72f0:	f013 0f01 	tst.w	r3, #1
    72f4:	d005      	beq.n	7302 <RAMECC_Handler+0x36>
    72f6:	4b05      	ldr	r3, [pc, #20]	; (730c <RAMECC_Handler+0x40>)
    72f8:	685b      	ldr	r3, [r3, #4]
    72fa:	b113      	cbz	r3, 7302 <RAMECC_Handler+0x36>
    72fc:	4a02      	ldr	r2, [pc, #8]	; (7308 <RAMECC_Handler+0x3c>)
    72fe:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    7300:	4798      	blx	r3
	} else {
		return;
	}
}
    7302:	b003      	add	sp, #12
    7304:	f85d fb04 	ldr.w	pc, [sp], #4
    7308:	41020000 	.word	0x41020000
    730c:	20007690 	.word	0x20007690

00007310 <_rtc_timer_init>:
 */
int32_t _rtc_timer_init(struct _timer_device *const dev, void *const hw)
{
	ASSERT(dev);

	dev->hw = hw;
    7310:	60c1      	str	r1, [r0, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7312:	2301      	movs	r3, #1
    7314:	800b      	strh	r3, [r1, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7316:	f248 0203 	movw	r2, #32771	; 0x8003
    731a:	690b      	ldr	r3, [r1, #16]
    731c:	4213      	tst	r3, r2
    731e:	d1fc      	bne.n	731a <_rtc_timer_init+0xa>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    7320:	68c3      	ldr	r3, [r0, #12]
    7322:	691a      	ldr	r2, [r3, #16]
    7324:	f012 0f01 	tst.w	r2, #1
    7328:	d1fb      	bne.n	7322 <_rtc_timer_init+0x12>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    732a:	f248 0280 	movw	r2, #32896	; 0x8080
    732e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7330:	f248 0103 	movw	r1, #32771	; 0x8003
    7334:	691a      	ldr	r2, [r3, #16]
    7336:	420a      	tst	r2, r1
    7338:	d1fc      	bne.n	7334 <_rtc_timer_init+0x24>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    733a:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    733c:	2301      	movs	r3, #1
    733e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7340:	6913      	ldr	r3, [r2, #16]
    7342:	f013 0f60 	tst.w	r3, #96	; 0x60
    7346:	d1fb      	bne.n	7340 <_rtc_timer_init+0x30>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    7348:	68c3      	ldr	r3, [r0, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    734a:	f44f 7280 	mov.w	r2, #256	; 0x100
    734e:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    7350:	4b01      	ldr	r3, [pc, #4]	; (7358 <_rtc_timer_init+0x48>)
    7352:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    7354:	2000      	movs	r0, #0
    7356:	4770      	bx	lr
    7358:	20000478 	.word	0x20000478

0000735c <_rtc_timer_deinit>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    735c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7360:	4b07      	ldr	r3, [pc, #28]	; (7380 <_rtc_timer_deinit+0x24>)
    7362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7366:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    736a:	f3bf 8f6f 	isb	sy
{
	ASSERT(dev && dev->hw);

	NVIC_DisableIRQ(RTC_IRQn);

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    736e:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7370:	2301      	movs	r3, #1
    7372:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7374:	f248 0103 	movw	r1, #32771	; 0x8003
    7378:	6913      	ldr	r3, [r2, #16]
    737a:	420b      	tst	r3, r1
    737c:	d1fc      	bne.n	7378 <_rtc_timer_deinit+0x1c>
}
    737e:	4770      	bx	lr
    7380:	e000e100 	.word	0xe000e100

00007384 <_rtc_timer_start>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7384:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7388:	4b0c      	ldr	r3, [pc, #48]	; (73bc <_rtc_timer_start+0x38>)
    738a:	601a      	str	r2, [r3, #0]
void _rtc_timer_start(struct _timer_device *const dev)
{
	ASSERT(dev && dev->hw);

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    738c:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    738e:	2300      	movs	r3, #0
    7390:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7392:	6913      	ldr	r3, [r2, #16]
    7394:	f013 0f08 	tst.w	r3, #8
    7398:	d1fb      	bne.n	7392 <_rtc_timer_start+0xe>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    739a:	68c3      	ldr	r3, [r0, #12]
    739c:	691a      	ldr	r2, [r3, #16]
    739e:	f012 0f08 	tst.w	r2, #8
    73a2:	d1fb      	bne.n	739c <_rtc_timer_start+0x18>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    73a4:	881a      	ldrh	r2, [r3, #0]
    73a6:	b292      	uxth	r2, r2
    73a8:	f042 0202 	orr.w	r2, r2, #2
    73ac:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    73ae:	f248 0103 	movw	r1, #32771	; 0x8003
    73b2:	691a      	ldr	r2, [r3, #16]
    73b4:	420a      	tst	r2, r1
    73b6:	d1fc      	bne.n	73b2 <_rtc_timer_start+0x2e>
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
}
    73b8:	4770      	bx	lr
    73ba:	bf00      	nop
    73bc:	e000e100 	.word	0xe000e100

000073c0 <_rtc_timer_stop>:
 */
void _rtc_timer_stop(struct _timer_device *const dev)
{
	ASSERT(dev && dev->hw);

	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    73c0:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    73c2:	8813      	ldrh	r3, [r2, #0]
    73c4:	f023 0302 	bic.w	r3, r3, #2
    73c8:	041b      	lsls	r3, r3, #16
    73ca:	0c1b      	lsrs	r3, r3, #16
    73cc:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    73ce:	f248 0103 	movw	r1, #32771	; 0x8003
    73d2:	6913      	ldr	r3, [r2, #16]
    73d4:	420b      	tst	r3, r1
    73d6:	d1fc      	bne.n	73d2 <_rtc_timer_stop+0x12>
}
    73d8:	4770      	bx	lr

000073da <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    73da:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    73dc:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    73de:	6913      	ldr	r3, [r2, #16]
    73e0:	f013 0f60 	tst.w	r3, #96	; 0x60
    73e4:	d1fb      	bne.n	73de <_rtc_timer_set_period+0x4>
}
    73e6:	4770      	bx	lr

000073e8 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    73e8:	68c2      	ldr	r2, [r0, #12]
    73ea:	6913      	ldr	r3, [r2, #16]
    73ec:	f013 0f60 	tst.w	r3, #96	; 0x60
    73f0:	d1fb      	bne.n	73ea <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    73f2:	6a10      	ldr	r0, [r2, #32]
}
    73f4:	4770      	bx	lr

000073f6 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    73f6:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    73f8:	f248 0103 	movw	r1, #32771	; 0x8003
    73fc:	6913      	ldr	r3, [r2, #16]
    73fe:	420b      	tst	r3, r1
    7400:	d1fc      	bne.n	73fc <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    7402:	8810      	ldrh	r0, [r2, #0]
}
    7404:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7408:	4770      	bx	lr

0000740a <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    740a:	4770      	bx	lr

0000740c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    740c:	4800      	ldr	r0, [pc, #0]	; (7410 <_rtc_get_timer+0x4>)
    740e:	4770      	bx	lr
    7410:	20000000 	.word	0x20000000

00007414 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    7414:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    7416:	4b08      	ldr	r3, [pc, #32]	; (7438 <RTC_Handler+0x24>)
    7418:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    741a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    741c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    741e:	f413 7f80 	tst.w	r3, #256	; 0x100
    7422:	d007      	beq.n	7434 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    7424:	6823      	ldr	r3, [r4, #0]
    7426:	b10b      	cbz	r3, 742c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    7428:	4620      	mov	r0, r4
    742a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    742c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    742e:	f44f 7280 	mov.w	r2, #256	; 0x100
    7432:	819a      	strh	r2, [r3, #12]
    7434:	bd10      	pop	{r4, pc}
    7436:	bf00      	nop
    7438:	20000478 	.word	0x20000478

0000743c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    743c:	b470      	push	{r4, r5, r6}
    743e:	b089      	sub	sp, #36	; 0x24
    7440:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    7442:	466c      	mov	r4, sp
    7444:	4d0d      	ldr	r5, [pc, #52]	; (747c <_sercom_get_hardware_index+0x40>)
    7446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    744a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    744e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    7452:	9b00      	ldr	r3, [sp, #0]
    7454:	42b3      	cmp	r3, r6
    7456:	d00d      	beq.n	7474 <_sercom_get_hardware_index+0x38>
    7458:	4631      	mov	r1, r6
    745a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    745c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    745e:	f853 2b04 	ldr.w	r2, [r3], #4
    7462:	428a      	cmp	r2, r1
    7464:	d007      	beq.n	7476 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7466:	3001      	adds	r0, #1
    7468:	2808      	cmp	r0, #8
    746a:	d1f8      	bne.n	745e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    746c:	2000      	movs	r0, #0
}
    746e:	b009      	add	sp, #36	; 0x24
    7470:	bc70      	pop	{r4, r5, r6}
    7472:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7474:	2000      	movs	r0, #0
			return i;
    7476:	b2c0      	uxtb	r0, r0
    7478:	e7f9      	b.n	746e <_sercom_get_hardware_index+0x32>
    747a:	bf00      	nop
    747c:	0000bcd8 	.word	0x0000bcd8

00007480 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    7480:	b510      	push	{r4, lr}
	void *hw = device->hw;
    7482:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    7484:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    7486:	f013 0f01 	tst.w	r3, #1
    748a:	d003      	beq.n	7494 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    748c:	7da3      	ldrb	r3, [r4, #22]
    748e:	f013 0f01 	tst.w	r3, #1
    7492:	d112      	bne.n	74ba <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7494:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    7496:	f013 0f02 	tst.w	r3, #2
    749a:	d003      	beq.n	74a4 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    749c:	7da3      	ldrb	r3, [r4, #22]
    749e:	f013 0f02 	tst.w	r3, #2
    74a2:	d10f      	bne.n	74c4 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    74a4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    74a6:	f013 0f04 	tst.w	r3, #4
    74aa:	d015      	beq.n	74d8 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    74ac:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    74ae:	f003 0337 	and.w	r3, r3, #55	; 0x37
    74b2:	b163      	cbz	r3, 74ce <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    74b4:	23ff      	movs	r3, #255	; 0xff
    74b6:	8363      	strh	r3, [r4, #26]
    74b8:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    74ba:	2301      	movs	r3, #1
    74bc:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    74be:	6803      	ldr	r3, [r0, #0]
    74c0:	4798      	blx	r3
    74c2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    74c4:	2302      	movs	r3, #2
    74c6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    74c8:	6883      	ldr	r3, [r0, #8]
    74ca:	4798      	blx	r3
    74cc:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    74ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    74d0:	6843      	ldr	r3, [r0, #4]
    74d2:	b2c9      	uxtb	r1, r1
    74d4:	4798      	blx	r3
    74d6:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    74d8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    74da:	09db      	lsrs	r3, r3, #7
    74dc:	d100      	bne.n	74e0 <_sercom_usart_interrupt_handler+0x60>
    74de:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    74e0:	2380      	movs	r3, #128	; 0x80
    74e2:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    74e4:	68c3      	ldr	r3, [r0, #12]
    74e6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    74e8:	8b63      	ldrh	r3, [r4, #26]
    74ea:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    74ec:	8363      	strh	r3, [r4, #26]
    74ee:	e7f6      	b.n	74de <_sercom_usart_interrupt_handler+0x5e>

000074f0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    74f0:	4b11      	ldr	r3, [pc, #68]	; (7538 <_sercom_init_irq_param+0x48>)
    74f2:	4298      	cmp	r0, r3
    74f4:	d011      	beq.n	751a <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    74f6:	4b11      	ldr	r3, [pc, #68]	; (753c <_sercom_init_irq_param+0x4c>)
    74f8:	4298      	cmp	r0, r3
    74fa:	d011      	beq.n	7520 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    74fc:	4b10      	ldr	r3, [pc, #64]	; (7540 <_sercom_init_irq_param+0x50>)
    74fe:	4298      	cmp	r0, r3
    7500:	d011      	beq.n	7526 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    7502:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    7506:	d011      	beq.n	752c <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    7508:	4b0e      	ldr	r3, [pc, #56]	; (7544 <_sercom_init_irq_param+0x54>)
    750a:	4298      	cmp	r0, r3
    750c:	d011      	beq.n	7532 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    750e:	4b0e      	ldr	r3, [pc, #56]	; (7548 <_sercom_init_irq_param+0x58>)
    7510:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    7512:	bf04      	itt	eq
    7514:	4b0d      	ldreq	r3, [pc, #52]	; (754c <_sercom_init_irq_param+0x5c>)
    7516:	6159      	streq	r1, [r3, #20]
    7518:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    751a:	4b0c      	ldr	r3, [pc, #48]	; (754c <_sercom_init_irq_param+0x5c>)
    751c:	6019      	str	r1, [r3, #0]
    751e:	e7f0      	b.n	7502 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    7520:	4b0a      	ldr	r3, [pc, #40]	; (754c <_sercom_init_irq_param+0x5c>)
    7522:	6059      	str	r1, [r3, #4]
    7524:	e7f0      	b.n	7508 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    7526:	4b09      	ldr	r3, [pc, #36]	; (754c <_sercom_init_irq_param+0x5c>)
    7528:	6099      	str	r1, [r3, #8]
    752a:	e7f0      	b.n	750e <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    752c:	4b07      	ldr	r3, [pc, #28]	; (754c <_sercom_init_irq_param+0x5c>)
    752e:	60d9      	str	r1, [r3, #12]
    7530:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    7532:	4b06      	ldr	r3, [pc, #24]	; (754c <_sercom_init_irq_param+0x5c>)
    7534:	6119      	str	r1, [r3, #16]
    7536:	4770      	bx	lr
    7538:	40003000 	.word	0x40003000
    753c:	40003400 	.word	0x40003400
    7540:	41014000 	.word	0x41014000
    7544:	43000400 	.word	0x43000400
    7548:	43000800 	.word	0x43000800
    754c:	2000047c 	.word	0x2000047c

00007550 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    7550:	b510      	push	{r4, lr}
    7552:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7554:	4b44      	ldr	r3, [pc, #272]	; (7668 <_usart_init+0x118>)
    7556:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    7558:	2800      	cmp	r0, #0
    755a:	d063      	beq.n	7624 <_usart_init+0xd4>
    755c:	2801      	cmp	r0, #1
    755e:	d05b      	beq.n	7618 <_usart_init+0xc8>
    7560:	2802      	cmp	r0, #2
    7562:	d05b      	beq.n	761c <_usart_init+0xcc>
    7564:	2804      	cmp	r0, #4
    7566:	d05b      	beq.n	7620 <_usart_init+0xd0>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    7568:	2806      	cmp	r0, #6
    756a:	bf14      	ite	ne
    756c:	2100      	movne	r1, #0
    756e:	2104      	moveq	r1, #4
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    7570:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    7572:	f013 0f01 	tst.w	r3, #1
    7576:	d122      	bne.n	75be <_usart_init+0x6e>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    7578:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    757c:	4a3b      	ldr	r2, [pc, #236]	; (766c <_usart_init+0x11c>)
    757e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7584:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7588:	69e3      	ldr	r3, [r4, #28]
    758a:	f013 0f03 	tst.w	r3, #3
    758e:	d1fb      	bne.n	7588 <_usart_init+0x38>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    7590:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    7592:	f013 0f02 	tst.w	r3, #2
    7596:	d00b      	beq.n	75b0 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7598:	6823      	ldr	r3, [r4, #0]
    759a:	f023 0302 	bic.w	r3, r3, #2
    759e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    75a0:	69e3      	ldr	r3, [r4, #28]
    75a2:	f013 0f03 	tst.w	r3, #3
    75a6:	d1fb      	bne.n	75a0 <_usart_init+0x50>
    75a8:	69e3      	ldr	r3, [r4, #28]
    75aa:	f013 0f02 	tst.w	r3, #2
    75ae:	d1fb      	bne.n	75a8 <_usart_init+0x58>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    75b0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    75b4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    75b6:	69e3      	ldr	r3, [r4, #28]
    75b8:	f013 0f03 	tst.w	r3, #3
    75bc:	d1fb      	bne.n	75b6 <_usart_init+0x66>
    75be:	69e3      	ldr	r3, [r4, #28]
    75c0:	f013 0f01 	tst.w	r3, #1
    75c4:	d1fb      	bne.n	75be <_usart_init+0x6e>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    75c6:	460a      	mov	r2, r1
    75c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    75cc:	4b27      	ldr	r3, [pc, #156]	; (766c <_usart_init+0x11c>)
    75ce:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    75d2:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    75d4:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    75d6:	69e3      	ldr	r3, [r4, #28]
    75d8:	f013 0f03 	tst.w	r3, #3
    75dc:	d1fb      	bne.n	75d6 <_usart_init+0x86>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    75de:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    75e2:	4922      	ldr	r1, [pc, #136]	; (766c <_usart_init+0x11c>)
    75e4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    75e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    75ea:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    75ec:	69e3      	ldr	r3, [r4, #28]
    75ee:	f013 0f1f 	tst.w	r3, #31
    75f2:	d1fb      	bne.n	75ec <_usart_init+0x9c>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    75f4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    75f8:	491c      	ldr	r1, [pc, #112]	; (766c <_usart_init+0x11c>)
    75fa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    75fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    7600:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    7602:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    7606:	d10f      	bne.n	7628 <_usart_init+0xd8>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    7608:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    760c:	4917      	ldr	r1, [pc, #92]	; (766c <_usart_init+0x11c>)
    760e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7612:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    7614:	81a3      	strh	r3, [r4, #12]
    7616:	e016      	b.n	7646 <_usart_init+0xf6>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    7618:	2101      	movs	r1, #1
    761a:	e7a9      	b.n	7570 <_usart_init+0x20>
    761c:	2102      	movs	r1, #2
    761e:	e7a7      	b.n	7570 <_usart_init+0x20>
    7620:	2103      	movs	r1, #3
    7622:	e7a5      	b.n	7570 <_usart_init+0x20>
    7624:	2100      	movs	r1, #0
    7626:	e7a3      	b.n	7570 <_usart_init+0x20>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    7628:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    762c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7630:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    7632:	89a1      	ldrh	r1, [r4, #12]
    7634:	f360 010c 	bfi	r1, r0, #0, #13
    7638:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    763a:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    763e:	89a3      	ldrh	r3, [r4, #12]
    7640:	f361 334f 	bfi	r3, r1, #13, #3
    7644:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    7646:	4b09      	ldr	r3, [pc, #36]	; (766c <_usart_init+0x11c>)
    7648:	0051      	lsls	r1, r2, #1
    764a:	1888      	adds	r0, r1, r2
    764c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7650:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    7654:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    7656:	440a      	add	r2, r1
    7658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    765c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    7660:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    7664:	2000      	movs	r0, #0
    7666:	bd10      	pop	{r4, pc}
    7668:	0000743d 	.word	0x0000743d
    766c:	0000bcd8 	.word	0x0000bcd8

00007670 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    7670:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7672:	4b03      	ldr	r3, [pc, #12]	; (7680 <_get_i2cm_index+0x10>)
    7674:	4798      	blx	r3
		}
	}

	ASSERT(false);
	return -1;
}
    7676:	3805      	subs	r0, #5
    7678:	bf18      	it	ne
    767a:	f04f 30ff 	movne.w	r0, #4294967295
    767e:	bd08      	pop	{r3, pc}
    7680:	0000743d 	.word	0x0000743d

00007684 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    7684:	b510      	push	{r4, lr}
	void *   hw    = i2c_dev->hw;
    7686:	6903      	ldr	r3, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7688:	7e19      	ldrb	r1, [r3, #24]
    768a:	b2c9      	uxtb	r1, r1
	int32_t  ret   = I2C_OK;

	ASSERT(i2c_dev);
	ASSERT(i2c_dev->hw);

	while (!(flags & ERROR_FLAG)) {
    768c:	f011 0f80 	tst.w	r1, #128	; 0x80
    7690:	f040 80eb 	bne.w	786a <_sercom_i2c_m_irq_handler+0x1e6>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7694:	681c      	ldr	r4, [r3, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7696:	69da      	ldr	r2, [r3, #28]
    7698:	f012 0f04 	tst.w	r2, #4
    769c:	d1fb      	bne.n	7696 <_sercom_i2c_m_irq_handler+0x12>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    769e:	8b5a      	ldrh	r2, [r3, #26]
    76a0:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    76a2:	f011 0f01 	tst.w	r1, #1
    76a6:	f000 808b 	beq.w	77c0 <_sercom_i2c_m_irq_handler+0x13c>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    76aa:	f012 0f02 	tst.w	r2, #2
    76ae:	d01f      	beq.n	76f0 <_sercom_i2c_m_irq_handler+0x6c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    76b0:	2101      	movs	r1, #1
    76b2:	7619      	strb	r1, [r3, #24]
			msg->flags |= I2C_M_FAIL;
    76b4:	8843      	ldrh	r3, [r0, #2]
    76b6:	b29b      	uxth	r3, r3
    76b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    76bc:	8043      	strh	r3, [r0, #2]
			msg->flags &= ~I2C_M_BUSY;
    76be:	8843      	ldrh	r3, [r0, #2]
    76c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    76c4:	041b      	lsls	r3, r3, #16
    76c6:	0c1b      	lsrs	r3, r3, #16
    76c8:	8043      	strh	r3, [r0, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    76ca:	400a      	ands	r2, r1
			return I2C_ERR_BAD_ADDRESS;
    76cc:	2a00      	cmp	r2, #0
    76ce:	bf14      	ite	ne
    76d0:	f06f 0104 	mvnne.w	r1, #4
    76d4:	f06f 0103 	mvneq.w	r1, #3
		}

		return;
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    76d8:	8843      	ldrh	r3, [r0, #2]
    76da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    76de:	041b      	lsls	r3, r3, #16
    76e0:	0c1b      	lsrs	r3, r3, #16
    76e2:	8043      	strh	r3, [r0, #2]
	if (i2c_dev->cb.error) {
    76e4:	6943      	ldr	r3, [r0, #20]
    76e6:	2b00      	cmp	r3, #0
    76e8:	f000 80be 	beq.w	7868 <_sercom_i2c_m_irq_handler+0x1e4>
		if (ret != I2C_OK) {
			i2c_dev->cb.error(i2c_dev, ret);
    76ec:	4798      	blx	r3
    76ee:	bd10      	pop	{r4, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    76f0:	f012 0f04 	tst.w	r2, #4
    76f4:	d122      	bne.n	773c <_sercom_i2c_m_irq_handler+0xb8>
			if (msg->flags & I2C_M_TEN) {
    76f6:	8842      	ldrh	r2, [r0, #2]
    76f8:	f412 6f80 	tst.w	r2, #1024	; 0x400
    76fc:	d03c      	beq.n	7778 <_sercom_i2c_m_irq_handler+0xf4>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    76fe:	8802      	ldrh	r2, [r0, #0]
    7700:	09d2      	lsrs	r2, r2, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7702:	f002 0406 	and.w	r4, r2, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7706:	69da      	ldr	r2, [r3, #28]
    7708:	f012 0f04 	tst.w	r2, #4
    770c:	d1fb      	bne.n	7706 <_sercom_i2c_m_irq_handler+0x82>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    770e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7710:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    7714:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
    7718:	4322      	orrs	r2, r4
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    771a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    771c:	69da      	ldr	r2, [r3, #28]
    771e:	f012 0f04 	tst.w	r2, #4
    7722:	d1fb      	bne.n	771c <_sercom_i2c_m_irq_handler+0x98>
				msg->flags &= ~I2C_M_TEN;
    7724:	8843      	ldrh	r3, [r0, #2]
    7726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    772a:	041b      	lsls	r3, r3, #16
    772c:	0c1b      	lsrs	r3, r3, #16
    772e:	8043      	strh	r3, [r0, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    7730:	6983      	ldr	r3, [r0, #24]
    7732:	2b00      	cmp	r3, #0
    7734:	f000 8084 	beq.w	7840 <_sercom_i2c_m_irq_handler+0x1bc>
			i2c_dev->cb.tx_complete(i2c_dev);
    7738:	4798      	blx	r3
    773a:	bd10      	pop	{r4, pc}
				if (msg->len > 0) {
    773c:	6842      	ldr	r2, [r0, #4]
    773e:	2a00      	cmp	r2, #0
    7740:	dd04      	ble.n	774c <_sercom_i2c_m_irq_handler+0xc8>
					msg->flags |= I2C_M_FAIL;
    7742:	8842      	ldrh	r2, [r0, #2]
    7744:	b292      	uxth	r2, r2
    7746:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    774a:	8042      	strh	r2, [r0, #2]
				if (msg->flags & I2C_M_STOP) {
    774c:	8842      	ldrh	r2, [r0, #2]
    774e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    7752:	d108      	bne.n	7766 <_sercom_i2c_m_irq_handler+0xe2>
				msg->flags &= ~I2C_M_BUSY;
    7754:	8843      	ldrh	r3, [r0, #2]
    7756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    775a:	041b      	lsls	r3, r3, #16
    775c:	0c1b      	lsrs	r3, r3, #16
    775e:	8043      	strh	r3, [r0, #2]
				return I2C_NACK;
    7760:	f06f 0101 	mvn.w	r1, #1
    7764:	e7b8      	b.n	76d8 <_sercom_i2c_m_irq_handler+0x54>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7766:	685a      	ldr	r2, [r3, #4]
    7768:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    776c:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    776e:	69da      	ldr	r2, [r3, #28]
    7770:	f012 0f04 	tst.w	r2, #4
    7774:	d1fb      	bne.n	776e <_sercom_i2c_m_irq_handler+0xea>
    7776:	e7ed      	b.n	7754 <_sercom_i2c_m_irq_handler+0xd0>
			if (msg->len == 0) {
    7778:	6842      	ldr	r2, [r0, #4]
    777a:	b99a      	cbnz	r2, 77a4 <_sercom_i2c_m_irq_handler+0x120>
				if (msg->flags & I2C_M_STOP) {
    777c:	8842      	ldrh	r2, [r0, #2]
    777e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    7782:	d106      	bne.n	7792 <_sercom_i2c_m_irq_handler+0x10e>
				msg->flags &= ~I2C_M_BUSY;
    7784:	8843      	ldrh	r3, [r0, #2]
    7786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    778a:	041b      	lsls	r3, r3, #16
    778c:	0c1b      	lsrs	r3, r3, #16
    778e:	8043      	strh	r3, [r0, #2]
    7790:	e7ce      	b.n	7730 <_sercom_i2c_m_irq_handler+0xac>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7792:	685a      	ldr	r2, [r3, #4]
    7794:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    7798:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    779a:	69da      	ldr	r2, [r3, #28]
    779c:	f012 0f04 	tst.w	r2, #4
    77a0:	d1fb      	bne.n	779a <_sercom_i2c_m_irq_handler+0x116>
    77a2:	e7ef      	b.n	7784 <_sercom_i2c_m_irq_handler+0x100>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    77a4:	6882      	ldr	r2, [r0, #8]
    77a6:	7812      	ldrb	r2, [r2, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    77a8:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    77aa:	69da      	ldr	r2, [r3, #28]
    77ac:	f012 0f04 	tst.w	r2, #4
    77b0:	d1fb      	bne.n	77aa <_sercom_i2c_m_irq_handler+0x126>
				msg->buffer++;
    77b2:	6883      	ldr	r3, [r0, #8]
    77b4:	3301      	adds	r3, #1
    77b6:	6083      	str	r3, [r0, #8]
				msg->len--;
    77b8:	6843      	ldr	r3, [r0, #4]
    77ba:	3b01      	subs	r3, #1
    77bc:	6043      	str	r3, [r0, #4]
    77be:	e7b7      	b.n	7730 <_sercom_i2c_m_irq_handler+0xac>
	} else if (flags & SB_FLAG) {
    77c0:	f011 0f02 	tst.w	r1, #2
    77c4:	d03f      	beq.n	7846 <_sercom_i2c_m_irq_handler+0x1c2>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    77c6:	6841      	ldr	r1, [r0, #4]
    77c8:	2900      	cmp	r1, #0
    77ca:	d034      	beq.n	7836 <_sercom_i2c_m_irq_handler+0x1b2>
    77cc:	f012 0f04 	tst.w	r2, #4
    77d0:	d131      	bne.n	7836 <_sercom_i2c_m_irq_handler+0x1b2>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    77d2:	f3c4 64c0 	ubfx	r4, r4, #27, #1
			msg->len--;
    77d6:	3901      	subs	r1, #1
    77d8:	6041      	str	r1, [r0, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    77da:	2900      	cmp	r1, #0
    77dc:	d134      	bne.n	7848 <_sercom_i2c_m_irq_handler+0x1c4>
    77de:	2c00      	cmp	r4, #0
    77e0:	d036      	beq.n	7850 <_sercom_i2c_m_irq_handler+0x1cc>
				if (msg->flags & I2C_M_STOP) {
    77e2:	8842      	ldrh	r2, [r0, #2]
    77e4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    77e8:	d114      	bne.n	7814 <_sercom_i2c_m_irq_handler+0x190>
				msg->flags &= ~I2C_M_BUSY;
    77ea:	8842      	ldrh	r2, [r0, #2]
    77ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    77f0:	0412      	lsls	r2, r2, #16
    77f2:	0c12      	lsrs	r2, r2, #16
    77f4:	8042      	strh	r2, [r0, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    77f6:	6881      	ldr	r1, [r0, #8]
    77f8:	1c4a      	adds	r2, r1, #1
    77fa:	6082      	str	r2, [r0, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    77fc:	69da      	ldr	r2, [r3, #28]
    77fe:	f012 0f04 	tst.w	r2, #4
    7802:	d1fb      	bne.n	77fc <_sercom_i2c_m_irq_handler+0x178>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7806:	700a      	strb	r2, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7808:	2202      	movs	r2, #2
    780a:	761a      	strb	r2, [r3, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    780c:	69c3      	ldr	r3, [r0, #28]
    780e:	b1d3      	cbz	r3, 7846 <_sercom_i2c_m_irq_handler+0x1c2>
			i2c_dev->cb.rx_complete(i2c_dev);
    7810:	4798      	blx	r3
    7812:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7814:	685a      	ldr	r2, [r3, #4]
    7816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    781a:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    781c:	69da      	ldr	r2, [r3, #28]
    781e:	f012 0f04 	tst.w	r2, #4
    7822:	d1fb      	bne.n	781c <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7824:	685a      	ldr	r2, [r3, #4]
    7826:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    782a:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    782c:	69da      	ldr	r2, [r3, #28]
    782e:	f012 0f04 	tst.w	r2, #4
    7832:	d1fb      	bne.n	782c <_sercom_i2c_m_irq_handler+0x1a8>
    7834:	e7d9      	b.n	77ea <_sercom_i2c_m_irq_handler+0x166>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7836:	2202      	movs	r2, #2
    7838:	761a      	strb	r2, [r3, #24]
			return I2C_NACK;
    783a:	f06f 0101 	mvn.w	r1, #1
    783e:	e74b      	b.n	76d8 <_sercom_i2c_m_irq_handler+0x54>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    7840:	f011 0f02 	tst.w	r1, #2
    7844:	d1e2      	bne.n	780c <_sercom_i2c_m_irq_handler+0x188>
    7846:	bd10      	pop	{r4, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7848:	2901      	cmp	r1, #1
    784a:	d1d4      	bne.n	77f6 <_sercom_i2c_m_irq_handler+0x172>
    784c:	2c00      	cmp	r4, #0
    784e:	d0d2      	beq.n	77f6 <_sercom_i2c_m_irq_handler+0x172>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7850:	685a      	ldr	r2, [r3, #4]
    7852:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    7856:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7858:	69da      	ldr	r2, [r3, #28]
    785a:	f012 0f04 	tst.w	r2, #4
    785e:	d1fb      	bne.n	7858 <_sercom_i2c_m_irq_handler+0x1d4>
			if (msg->len == 0) {
    7860:	6842      	ldr	r2, [r0, #4]
    7862:	2a00      	cmp	r2, #0
    7864:	d0bd      	beq.n	77e2 <_sercom_i2c_m_irq_handler+0x15e>
    7866:	e7c6      	b.n	77f6 <_sercom_i2c_m_irq_handler+0x172>
    7868:	bd10      	pop	{r4, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    786a:	8843      	ldrh	r3, [r0, #2]
    786c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7870:	041b      	lsls	r3, r3, #16
    7872:	0c1b      	lsrs	r3, r3, #16
    7874:	8043      	strh	r3, [r0, #2]
	if (i2c_dev->cb.error) {
    7876:	6943      	ldr	r3, [r0, #20]
    7878:	2b00      	cmp	r3, #0
    787a:	d0e4      	beq.n	7846 <_sercom_i2c_m_irq_handler+0x1c2>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    787c:	f06f 0104 	mvn.w	r1, #4
    7880:	4798      	blx	r3
    7882:	bd10      	pop	{r4, pc}

00007884 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    7884:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    7886:	4b03      	ldr	r3, [pc, #12]	; (7894 <_sercom_get_irq_num+0x10>)
    7888:	4798      	blx	r3
    788a:	0080      	lsls	r0, r0, #2
    788c:	302e      	adds	r0, #46	; 0x2e
}
    788e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    7892:	bd08      	pop	{r3, pc}
    7894:	0000743d 	.word	0x0000743d

00007898 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    7898:	b538      	push	{r3, r4, r5, lr}
    789a:	4605      	mov	r5, r0
    789c:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    789e:	4608      	mov	r0, r1
    78a0:	4b34      	ldr	r3, [pc, #208]	; (7974 <_i2c_m_sync_init_impl+0xdc>)
    78a2:	4798      	blx	r3
    78a4:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    78a6:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    78a8:	f013 0f01 	tst.w	r3, #1
    78ac:	d123      	bne.n	78f6 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    78ae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    78b2:	4a31      	ldr	r2, [pc, #196]	; (7978 <_i2c_m_sync_init_impl+0xe0>)
    78b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    78b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    78bc:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    78c0:	69e3      	ldr	r3, [r4, #28]
    78c2:	f013 0f03 	tst.w	r3, #3
    78c6:	d1fb      	bne.n	78c0 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    78c8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    78ca:	f013 0f02 	tst.w	r3, #2
    78ce:	d00b      	beq.n	78e8 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    78d0:	6823      	ldr	r3, [r4, #0]
    78d2:	f023 0302 	bic.w	r3, r3, #2
    78d6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    78d8:	69e3      	ldr	r3, [r4, #28]
    78da:	f013 0f03 	tst.w	r3, #3
    78de:	d1fb      	bne.n	78d8 <_i2c_m_sync_init_impl+0x40>
    78e0:	69e3      	ldr	r3, [r4, #28]
    78e2:	f013 0f02 	tst.w	r3, #2
    78e6:	d1fb      	bne.n	78e0 <_i2c_m_sync_init_impl+0x48>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    78e8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    78ec:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    78ee:	69e3      	ldr	r3, [r4, #28]
    78f0:	f013 0f03 	tst.w	r3, #3
    78f4:	d1fb      	bne.n	78ee <_i2c_m_sync_init_impl+0x56>
    78f6:	69e3      	ldr	r3, [r4, #28]
    78f8:	f013 0f01 	tst.w	r3, #1
    78fc:	d1fb      	bne.n	78f6 <_i2c_m_sync_init_impl+0x5e>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    78fe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7902:	4a1d      	ldr	r2, [pc, #116]	; (7978 <_i2c_m_sync_init_impl+0xe0>)
    7904:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7908:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    790c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    790e:	69e3      	ldr	r3, [r4, #28]
    7910:	f013 0f03 	tst.w	r3, #3
    7914:	d1fb      	bne.n	790e <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    7916:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    791a:	4917      	ldr	r1, [pc, #92]	; (7978 <_i2c_m_sync_init_impl+0xe0>)
    791c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7920:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7924:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7926:	69e3      	ldr	r3, [r4, #28]
    7928:	f013 0f04 	tst.w	r3, #4
    792c:	d1fb      	bne.n	7926 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    792e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7932:	4911      	ldr	r1, [pc, #68]	; (7978 <_i2c_m_sync_init_impl+0xe0>)
    7934:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    793c:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    793e:	f3c2 6301 	ubfx	r3, r2, #24, #2
    7942:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7944:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    7946:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    794a:	2b01      	cmp	r3, #1
    794c:	bf94      	ite	ls
    794e:	2300      	movls	r3, #0
    7950:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    7952:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    7956:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7958:	69e3      	ldr	r3, [r4, #28]
    795a:	f013 0f04 	tst.w	r3, #4
    795e:	d1fb      	bne.n	7958 <_i2c_m_sync_init_impl+0xc0>

	service->trise = _i2cms[i].trise;
    7960:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7964:	4b04      	ldr	r3, [pc, #16]	; (7978 <_i2c_m_sync_init_impl+0xe0>)
    7966:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    796a:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    796e:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    7970:	2000      	movs	r0, #0
    7972:	bd38      	pop	{r3, r4, r5, pc}
    7974:	00007671 	.word	0x00007671
    7978:	0000bcd8 	.word	0x0000bcd8

0000797c <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    797c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    797e:	f013 0f01 	tst.w	r3, #1
    7982:	d109      	bne.n	7998 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7984:	6803      	ldr	r3, [r0, #0]
    7986:	f043 0302 	orr.w	r3, r3, #2
    798a:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    798c:	69c3      	ldr	r3, [r0, #28]
    798e:	f013 0f03 	tst.w	r3, #3
    7992:	d1fb      	bne.n	798c <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    7994:	2000      	movs	r0, #0
    7996:	4770      	bx	lr
		return ERR_BUSY;
    7998:	f06f 0003 	mvn.w	r0, #3
}
    799c:	4770      	bx	lr

0000799e <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    799e:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    79a0:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    79a2:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    79a4:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    79a6:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    79a8:	f013 0f01 	tst.w	r3, #1
    79ac:	d109      	bne.n	79c2 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    79ae:	f013 0f04 	tst.w	r3, #4
    79b2:	d109      	bne.n	79c8 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    79b4:	f013 0f02 	tst.w	r3, #2
    79b8:	d109      	bne.n	79ce <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    79ba:	f013 0f80 	tst.w	r3, #128	; 0x80
    79be:	d10b      	bne.n	79d8 <_spi_handler+0x3a>
    79c0:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    79c2:	6883      	ldr	r3, [r0, #8]
    79c4:	4798      	blx	r3
    79c6:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    79c8:	68c3      	ldr	r3, [r0, #12]
    79ca:	4798      	blx	r3
    79cc:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    79ce:	2302      	movs	r3, #2
    79d0:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    79d2:	6903      	ldr	r3, [r0, #16]
    79d4:	4798      	blx	r3
    79d6:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    79d8:	2304      	movs	r3, #4
    79da:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    79dc:	2380      	movs	r3, #128	; 0x80
    79de:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    79e0:	6943      	ldr	r3, [r0, #20]
    79e2:	f06f 0112 	mvn.w	r1, #18
    79e6:	4798      	blx	r3
	}
}
    79e8:	e7ea      	b.n	79c0 <_spi_handler+0x22>
	...

000079ec <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    79ec:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    79ee:	4b03      	ldr	r3, [pc, #12]	; (79fc <_spi_get_tx_dma_channel+0x10>)
    79f0:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    79f2:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    79f4:	bf0c      	ite	eq
    79f6:	2008      	moveq	r0, #8
    79f8:	2000      	movne	r0, #0
    79fa:	bd08      	pop	{r3, pc}
    79fc:	0000743d 	.word	0x0000743d

00007a00 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    7a00:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    7a02:	4b03      	ldr	r3, [pc, #12]	; (7a10 <_spi_get_rx_dma_channel+0x10>)
    7a04:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    7a06:	2807      	cmp	r0, #7
    7a08:	bf8c      	ite	hi
    7a0a:	2000      	movhi	r0, #0
    7a0c:	2001      	movls	r0, #1
    7a0e:	bd08      	pop	{r3, pc}
    7a10:	0000743d 	.word	0x0000743d

00007a14 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    7a14:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    7a16:	6883      	ldr	r3, [r0, #8]
    7a18:	689b      	ldr	r3, [r3, #8]
    7a1a:	b103      	cbz	r3, 7a1e <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    7a1c:	4798      	blx	r3
    7a1e:	bd08      	pop	{r3, pc}

00007a20 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    7a20:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    7a22:	6883      	ldr	r3, [r0, #8]
    7a24:	685b      	ldr	r3, [r3, #4]
    7a26:	b103      	cbz	r3, 7a2a <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    7a28:	4798      	blx	r3
    7a2a:	bd08      	pop	{r3, pc}

00007a2c <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    7a2c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    7a2e:	6883      	ldr	r3, [r0, #8]
    7a30:	68db      	ldr	r3, [r3, #12]
    7a32:	b103      	cbz	r3, 7a36 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    7a34:	4798      	blx	r3
    7a36:	bd08      	pop	{r3, pc}

00007a38 <_usart_sync_init>:
{
    7a38:	b508      	push	{r3, lr}
	device->hw = hw;
    7a3a:	6001      	str	r1, [r0, #0]
	return _usart_init(hw);
    7a3c:	4608      	mov	r0, r1
    7a3e:	4b01      	ldr	r3, [pc, #4]	; (7a44 <_usart_sync_init+0xc>)
    7a40:	4798      	blx	r3
}
    7a42:	bd08      	pop	{r3, pc}
    7a44:	00007551 	.word	0x00007551

00007a48 <_usart_async_init>:
{
    7a48:	b570      	push	{r4, r5, r6, lr}
    7a4a:	4606      	mov	r6, r0
    7a4c:	460d      	mov	r5, r1
	init_status = _usart_init(hw);
    7a4e:	4608      	mov	r0, r1
    7a50:	4b14      	ldr	r3, [pc, #80]	; (7aa4 <_usart_async_init+0x5c>)
    7a52:	4798      	blx	r3
	if (init_status) {
    7a54:	4604      	mov	r4, r0
    7a56:	b108      	cbz	r0, 7a5c <_usart_async_init+0x14>
}
    7a58:	4620      	mov	r0, r4
    7a5a:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    7a5c:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    7a5e:	4631      	mov	r1, r6
    7a60:	4628      	mov	r0, r5
    7a62:	4b11      	ldr	r3, [pc, #68]	; (7aa8 <_usart_async_init+0x60>)
    7a64:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7a66:	4628      	mov	r0, r5
    7a68:	4b10      	ldr	r3, [pc, #64]	; (7aac <_usart_async_init+0x64>)
    7a6a:	4798      	blx	r3
    7a6c:	1d01      	adds	r1, r0, #4
    7a6e:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a70:	2501      	movs	r5, #1
    7a72:	f000 021f 	and.w	r2, r0, #31
    7a76:	fa05 f202 	lsl.w	r2, r5, r2
    7a7a:	0943      	lsrs	r3, r0, #5
    7a7c:	009b      	lsls	r3, r3, #2
    7a7e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7a82:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7a8e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a92:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a96:	601a      	str	r2, [r3, #0]
		irq++;
    7a98:	3001      	adds	r0, #1
    7a9a:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7a9c:	4281      	cmp	r1, r0
    7a9e:	d1e8      	bne.n	7a72 <_usart_async_init+0x2a>
    7aa0:	e7da      	b.n	7a58 <_usart_async_init+0x10>
    7aa2:	bf00      	nop
    7aa4:	00007551 	.word	0x00007551
    7aa8:	000074f1 	.word	0x000074f1
    7aac:	00007885 	.word	0x00007885

00007ab0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    7ab0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7ab2:	6813      	ldr	r3, [r2, #0]
    7ab4:	f043 0302 	orr.w	r3, r3, #2
    7ab8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7aba:	69d3      	ldr	r3, [r2, #28]
    7abc:	f013 0f03 	tst.w	r3, #3
    7ac0:	d1fb      	bne.n	7aba <_usart_sync_enable+0xa>
}
    7ac2:	4770      	bx	lr

00007ac4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7ac4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    7ac6:	6299      	str	r1, [r3, #40]	; 0x28
    7ac8:	4770      	bx	lr

00007aca <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7aca:	6983      	ldr	r3, [r0, #24]
    7acc:	6299      	str	r1, [r3, #40]	; 0x28
    7ace:	4770      	bx	lr

00007ad0 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    7ad0:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    7ad2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7ad4:	b2c0      	uxtb	r0, r0
    7ad6:	4770      	bx	lr

00007ad8 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    7ad8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    7ada:	7e18      	ldrb	r0, [r3, #24]
}
    7adc:	f000 0001 	and.w	r0, r0, #1
    7ae0:	4770      	bx	lr

00007ae2 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    7ae2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7ae4:	7e18      	ldrb	r0, [r3, #24]
}
    7ae6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7aea:	4770      	bx	lr

00007aec <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    7aec:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    7aee:	7e18      	ldrb	r0, [r3, #24]
}
    7af0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7af4:	4770      	bx	lr

00007af6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    7af6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    7af8:	2201      	movs	r2, #1
    7afa:	759a      	strb	r2, [r3, #22]
    7afc:	4770      	bx	lr

00007afe <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    7afe:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    7b00:	2202      	movs	r2, #2
    7b02:	759a      	strb	r2, [r3, #22]
    7b04:	4770      	bx	lr
	...

00007b08 <_i2c_m_async_init>:
{
    7b08:	b570      	push	{r4, r5, r6, lr}
    7b0a:	4606      	mov	r6, r0
    7b0c:	460d      	mov	r5, r1
	i2c_dev->hw = hw;
    7b0e:	6101      	str	r1, [r0, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7b10:	4b13      	ldr	r3, [pc, #76]	; (7b60 <_i2c_m_async_init+0x58>)
    7b12:	4798      	blx	r3
	if (init_status) {
    7b14:	4604      	mov	r4, r0
    7b16:	b108      	cbz	r0, 7b1c <_i2c_m_async_init+0x14>
}
    7b18:	4620      	mov	r0, r4
    7b1a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    7b1c:	4631      	mov	r1, r6
    7b1e:	4628      	mov	r0, r5
    7b20:	4b10      	ldr	r3, [pc, #64]	; (7b64 <_i2c_m_async_init+0x5c>)
    7b22:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7b24:	4628      	mov	r0, r5
    7b26:	4b10      	ldr	r3, [pc, #64]	; (7b68 <_i2c_m_async_init+0x60>)
    7b28:	4798      	blx	r3
    7b2a:	1d01      	adds	r1, r0, #4
    7b2c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b2e:	2501      	movs	r5, #1
    7b30:	f000 021f 	and.w	r2, r0, #31
    7b34:	fa05 f202 	lsl.w	r2, r5, r2
    7b38:	0943      	lsrs	r3, r0, #5
    7b3a:	009b      	lsls	r3, r3, #2
    7b3c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7b40:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7b48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7b4c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b54:	601a      	str	r2, [r3, #0]
		irq++;
    7b56:	3001      	adds	r0, #1
    7b58:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7b5a:	4281      	cmp	r1, r0
    7b5c:	d1e8      	bne.n	7b30 <_i2c_m_async_init+0x28>
    7b5e:	e7db      	b.n	7b18 <_i2c_m_async_init+0x10>
    7b60:	00007899 	.word	0x00007899
    7b64:	000074f1 	.word	0x000074f1
    7b68:	00007885 	.word	0x00007885

00007b6c <_i2c_m_async_transfer>:
{
    7b6c:	b410      	push	{r4}
    7b6e:	4604      	mov	r4, r0
	if (msg->len == 0) {
    7b70:	6848      	ldr	r0, [r1, #4]
    7b72:	2800      	cmp	r0, #0
    7b74:	d042      	beq.n	7bfc <_i2c_m_async_transfer+0x90>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7b76:	8863      	ldrh	r3, [r4, #2]
    7b78:	f413 7f80 	tst.w	r3, #256	; 0x100
    7b7c:	d162      	bne.n	7c44 <_i2c_m_async_transfer+0xd8>
	msg->flags |= I2C_M_BUSY;
    7b7e:	884b      	ldrh	r3, [r1, #2]
    7b80:	b29b      	uxth	r3, r3
    7b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7b86:	804b      	strh	r3, [r1, #2]
	i2c_dev->service.msg = *msg;
    7b88:	c907      	ldmia	r1, {r0, r1, r2}
    7b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    7b8e:	6922      	ldr	r2, [r4, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7b90:	6853      	ldr	r3, [r2, #4]
    7b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7b96:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7b98:	69d3      	ldr	r3, [r2, #28]
    7b9a:	f013 0f04 	tst.w	r3, #4
    7b9e:	d1fb      	bne.n	7b98 <_i2c_m_async_transfer+0x2c>
	void *             hw    = i2c_dev->hw;
    7ba0:	6923      	ldr	r3, [r4, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7ba2:	6819      	ldr	r1, [r3, #0]
	if (msg->len == 1 && sclsm) {
    7ba4:	6862      	ldr	r2, [r4, #4]
    7ba6:	2a01      	cmp	r2, #1
    7ba8:	d02b      	beq.n	7c02 <_i2c_m_async_transfer+0x96>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7baa:	685a      	ldr	r2, [r3, #4]
    7bac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    7bb0:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7bb2:	69da      	ldr	r2, [r3, #28]
    7bb4:	f012 0f04 	tst.w	r2, #4
    7bb8:	d1fb      	bne.n	7bb2 <_i2c_m_async_transfer+0x46>
	if (msg->addr & I2C_M_TEN) {
    7bba:	8822      	ldrh	r2, [r4, #0]
    7bbc:	f412 6f80 	tst.w	r2, #1024	; 0x400
    7bc0:	d02b      	beq.n	7c1a <_i2c_m_async_transfer+0xae>
		if (msg->flags & I2C_M_RD) {
    7bc2:	8861      	ldrh	r1, [r4, #2]
    7bc4:	f011 0f01 	tst.w	r1, #1
    7bc8:	d004      	beq.n	7bd4 <_i2c_m_async_transfer+0x68>
			msg->flags |= I2C_M_TEN;
    7bca:	8861      	ldrh	r1, [r4, #2]
    7bcc:	b289      	uxth	r1, r1
    7bce:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    7bd2:	8061      	strh	r1, [r4, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7bd4:	f240 71fe 	movw	r1, #2046	; 0x7fe
    7bd8:	ea01 0142 	and.w	r1, r1, r2, lsl #1
    7bdc:	69da      	ldr	r2, [r3, #28]
    7bde:	f012 0f04 	tst.w	r2, #4
    7be2:	d1fb      	bne.n	7bdc <_i2c_m_async_transfer+0x70>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7be6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    7bee:	430a      	orrs	r2, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7bf0:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7bf2:	69da      	ldr	r2, [r3, #28]
    7bf4:	f012 0f04 	tst.w	r2, #4
    7bf8:	d1fb      	bne.n	7bf2 <_i2c_m_async_transfer+0x86>
	return ERR_NONE;
    7bfa:	2000      	movs	r0, #0
}
    7bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    7c00:	4770      	bx	lr
	if (msg->len == 1 && sclsm) {
    7c02:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
    7c06:	d0d0      	beq.n	7baa <_i2c_m_async_transfer+0x3e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7c08:	685a      	ldr	r2, [r3, #4]
    7c0a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    7c0e:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7c10:	69da      	ldr	r2, [r3, #28]
    7c12:	f012 0f04 	tst.w	r2, #4
    7c16:	d1fb      	bne.n	7c10 <_i2c_m_async_transfer+0xa4>
    7c18:	e7cf      	b.n	7bba <_i2c_m_async_transfer+0x4e>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7c1a:	8860      	ldrh	r0, [r4, #2]
    7c1c:	0051      	lsls	r1, r2, #1
    7c1e:	b2c9      	uxtb	r1, r1
    7c20:	f000 0201 	and.w	r2, r0, #1
    7c24:	4311      	orrs	r1, r2
    7c26:	69da      	ldr	r2, [r3, #28]
    7c28:	f012 0f04 	tst.w	r2, #4
    7c2c:	d1fb      	bne.n	7c26 <_i2c_m_async_transfer+0xba>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7c30:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7c34:	4311      	orrs	r1, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7c36:	6259      	str	r1, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7c38:	69da      	ldr	r2, [r3, #28]
    7c3a:	f012 0f04 	tst.w	r2, #4
    7c3e:	d1fb      	bne.n	7c38 <_i2c_m_async_transfer+0xcc>
	return ERR_NONE;
    7c40:	2000      	movs	r0, #0
    7c42:	e7db      	b.n	7bfc <_i2c_m_async_transfer+0x90>
		return ERR_BUSY;
    7c44:	f06f 0003 	mvn.w	r0, #3
    7c48:	e7d8      	b.n	7bfc <_i2c_m_async_transfer+0x90>

00007c4a <_i2c_m_async_register_callback>:
	switch (type) {
    7c4a:	2901      	cmp	r1, #1
    7c4c:	d006      	beq.n	7c5c <_i2c_m_async_register_callback+0x12>
    7c4e:	b119      	cbz	r1, 7c58 <_i2c_m_async_register_callback+0xe>
    7c50:	2902      	cmp	r1, #2
    7c52:	d005      	beq.n	7c60 <_i2c_m_async_register_callback+0x16>
}
    7c54:	2000      	movs	r0, #0
    7c56:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    7c58:	6142      	str	r2, [r0, #20]
		break;
    7c5a:	e7fb      	b.n	7c54 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    7c5c:	6182      	str	r2, [r0, #24]
		break;
    7c5e:	e7f9      	b.n	7c54 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    7c60:	61c2      	str	r2, [r0, #28]
		break;
    7c62:	e7f7      	b.n	7c54 <_i2c_m_async_register_callback+0xa>

00007c64 <SERCOM0_0_Handler>:
{
    7c64:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7c66:	4b02      	ldr	r3, [pc, #8]	; (7c70 <SERCOM0_0_Handler+0xc>)
    7c68:	6818      	ldr	r0, [r3, #0]
    7c6a:	4b02      	ldr	r3, [pc, #8]	; (7c74 <SERCOM0_0_Handler+0x10>)
    7c6c:	4798      	blx	r3
    7c6e:	bd08      	pop	{r3, pc}
    7c70:	2000047c 	.word	0x2000047c
    7c74:	00007481 	.word	0x00007481

00007c78 <SERCOM0_1_Handler>:
{
    7c78:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7c7a:	4b02      	ldr	r3, [pc, #8]	; (7c84 <SERCOM0_1_Handler+0xc>)
    7c7c:	6818      	ldr	r0, [r3, #0]
    7c7e:	4b02      	ldr	r3, [pc, #8]	; (7c88 <SERCOM0_1_Handler+0x10>)
    7c80:	4798      	blx	r3
    7c82:	bd08      	pop	{r3, pc}
    7c84:	2000047c 	.word	0x2000047c
    7c88:	00007481 	.word	0x00007481

00007c8c <SERCOM0_2_Handler>:
{
    7c8c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7c8e:	4b02      	ldr	r3, [pc, #8]	; (7c98 <SERCOM0_2_Handler+0xc>)
    7c90:	6818      	ldr	r0, [r3, #0]
    7c92:	4b02      	ldr	r3, [pc, #8]	; (7c9c <SERCOM0_2_Handler+0x10>)
    7c94:	4798      	blx	r3
    7c96:	bd08      	pop	{r3, pc}
    7c98:	2000047c 	.word	0x2000047c
    7c9c:	00007481 	.word	0x00007481

00007ca0 <SERCOM0_3_Handler>:
{
    7ca0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7ca2:	4b02      	ldr	r3, [pc, #8]	; (7cac <SERCOM0_3_Handler+0xc>)
    7ca4:	6818      	ldr	r0, [r3, #0]
    7ca6:	4b02      	ldr	r3, [pc, #8]	; (7cb0 <SERCOM0_3_Handler+0x10>)
    7ca8:	4798      	blx	r3
    7caa:	bd08      	pop	{r3, pc}
    7cac:	2000047c 	.word	0x2000047c
    7cb0:	00007481 	.word	0x00007481

00007cb4 <SERCOM1_0_Handler>:
{
    7cb4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7cb6:	4b02      	ldr	r3, [pc, #8]	; (7cc0 <SERCOM1_0_Handler+0xc>)
    7cb8:	6858      	ldr	r0, [r3, #4]
    7cba:	4b02      	ldr	r3, [pc, #8]	; (7cc4 <SERCOM1_0_Handler+0x10>)
    7cbc:	4798      	blx	r3
    7cbe:	bd08      	pop	{r3, pc}
    7cc0:	2000047c 	.word	0x2000047c
    7cc4:	00007481 	.word	0x00007481

00007cc8 <SERCOM1_1_Handler>:
{
    7cc8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7cca:	4b02      	ldr	r3, [pc, #8]	; (7cd4 <SERCOM1_1_Handler+0xc>)
    7ccc:	6858      	ldr	r0, [r3, #4]
    7cce:	4b02      	ldr	r3, [pc, #8]	; (7cd8 <SERCOM1_1_Handler+0x10>)
    7cd0:	4798      	blx	r3
    7cd2:	bd08      	pop	{r3, pc}
    7cd4:	2000047c 	.word	0x2000047c
    7cd8:	00007481 	.word	0x00007481

00007cdc <SERCOM1_2_Handler>:
{
    7cdc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7cde:	4b02      	ldr	r3, [pc, #8]	; (7ce8 <SERCOM1_2_Handler+0xc>)
    7ce0:	6858      	ldr	r0, [r3, #4]
    7ce2:	4b02      	ldr	r3, [pc, #8]	; (7cec <SERCOM1_2_Handler+0x10>)
    7ce4:	4798      	blx	r3
    7ce6:	bd08      	pop	{r3, pc}
    7ce8:	2000047c 	.word	0x2000047c
    7cec:	00007481 	.word	0x00007481

00007cf0 <SERCOM1_3_Handler>:
{
    7cf0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7cf2:	4b02      	ldr	r3, [pc, #8]	; (7cfc <SERCOM1_3_Handler+0xc>)
    7cf4:	6858      	ldr	r0, [r3, #4]
    7cf6:	4b02      	ldr	r3, [pc, #8]	; (7d00 <SERCOM1_3_Handler+0x10>)
    7cf8:	4798      	blx	r3
    7cfa:	bd08      	pop	{r3, pc}
    7cfc:	2000047c 	.word	0x2000047c
    7d00:	00007481 	.word	0x00007481

00007d04 <SERCOM3_0_Handler>:
{
    7d04:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7d06:	4b02      	ldr	r3, [pc, #8]	; (7d10 <SERCOM3_0_Handler+0xc>)
    7d08:	6898      	ldr	r0, [r3, #8]
    7d0a:	4b02      	ldr	r3, [pc, #8]	; (7d14 <SERCOM3_0_Handler+0x10>)
    7d0c:	4798      	blx	r3
    7d0e:	bd08      	pop	{r3, pc}
    7d10:	2000047c 	.word	0x2000047c
    7d14:	0000799f 	.word	0x0000799f

00007d18 <SERCOM3_1_Handler>:
{
    7d18:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7d1a:	4b02      	ldr	r3, [pc, #8]	; (7d24 <SERCOM3_1_Handler+0xc>)
    7d1c:	6898      	ldr	r0, [r3, #8]
    7d1e:	4b02      	ldr	r3, [pc, #8]	; (7d28 <SERCOM3_1_Handler+0x10>)
    7d20:	4798      	blx	r3
    7d22:	bd08      	pop	{r3, pc}
    7d24:	2000047c 	.word	0x2000047c
    7d28:	0000799f 	.word	0x0000799f

00007d2c <SERCOM3_2_Handler>:
{
    7d2c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7d2e:	4b02      	ldr	r3, [pc, #8]	; (7d38 <SERCOM3_2_Handler+0xc>)
    7d30:	6898      	ldr	r0, [r3, #8]
    7d32:	4b02      	ldr	r3, [pc, #8]	; (7d3c <SERCOM3_2_Handler+0x10>)
    7d34:	4798      	blx	r3
    7d36:	bd08      	pop	{r3, pc}
    7d38:	2000047c 	.word	0x2000047c
    7d3c:	0000799f 	.word	0x0000799f

00007d40 <SERCOM3_3_Handler>:
{
    7d40:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7d42:	4b02      	ldr	r3, [pc, #8]	; (7d4c <SERCOM3_3_Handler+0xc>)
    7d44:	6898      	ldr	r0, [r3, #8]
    7d46:	4b02      	ldr	r3, [pc, #8]	; (7d50 <SERCOM3_3_Handler+0x10>)
    7d48:	4798      	blx	r3
    7d4a:	bd08      	pop	{r3, pc}
    7d4c:	2000047c 	.word	0x2000047c
    7d50:	0000799f 	.word	0x0000799f

00007d54 <SERCOM4_0_Handler>:
{
    7d54:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7d56:	4b02      	ldr	r3, [pc, #8]	; (7d60 <SERCOM4_0_Handler+0xc>)
    7d58:	68d8      	ldr	r0, [r3, #12]
    7d5a:	4b02      	ldr	r3, [pc, #8]	; (7d64 <SERCOM4_0_Handler+0x10>)
    7d5c:	4798      	blx	r3
    7d5e:	bd08      	pop	{r3, pc}
    7d60:	2000047c 	.word	0x2000047c
    7d64:	00007481 	.word	0x00007481

00007d68 <SERCOM4_1_Handler>:
{
    7d68:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7d6a:	4b02      	ldr	r3, [pc, #8]	; (7d74 <SERCOM4_1_Handler+0xc>)
    7d6c:	68d8      	ldr	r0, [r3, #12]
    7d6e:	4b02      	ldr	r3, [pc, #8]	; (7d78 <SERCOM4_1_Handler+0x10>)
    7d70:	4798      	blx	r3
    7d72:	bd08      	pop	{r3, pc}
    7d74:	2000047c 	.word	0x2000047c
    7d78:	00007481 	.word	0x00007481

00007d7c <SERCOM4_2_Handler>:
{
    7d7c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7d7e:	4b02      	ldr	r3, [pc, #8]	; (7d88 <SERCOM4_2_Handler+0xc>)
    7d80:	68d8      	ldr	r0, [r3, #12]
    7d82:	4b02      	ldr	r3, [pc, #8]	; (7d8c <SERCOM4_2_Handler+0x10>)
    7d84:	4798      	blx	r3
    7d86:	bd08      	pop	{r3, pc}
    7d88:	2000047c 	.word	0x2000047c
    7d8c:	00007481 	.word	0x00007481

00007d90 <SERCOM4_3_Handler>:
{
    7d90:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7d92:	4b02      	ldr	r3, [pc, #8]	; (7d9c <SERCOM4_3_Handler+0xc>)
    7d94:	68d8      	ldr	r0, [r3, #12]
    7d96:	4b02      	ldr	r3, [pc, #8]	; (7da0 <SERCOM4_3_Handler+0x10>)
    7d98:	4798      	blx	r3
    7d9a:	bd08      	pop	{r3, pc}
    7d9c:	2000047c 	.word	0x2000047c
    7da0:	00007481 	.word	0x00007481

00007da4 <SERCOM5_0_Handler>:
{
    7da4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7da6:	4b02      	ldr	r3, [pc, #8]	; (7db0 <SERCOM5_0_Handler+0xc>)
    7da8:	6918      	ldr	r0, [r3, #16]
    7daa:	4b02      	ldr	r3, [pc, #8]	; (7db4 <SERCOM5_0_Handler+0x10>)
    7dac:	4798      	blx	r3
    7dae:	bd08      	pop	{r3, pc}
    7db0:	2000047c 	.word	0x2000047c
    7db4:	00007685 	.word	0x00007685

00007db8 <SERCOM5_1_Handler>:
{
    7db8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7dba:	4b02      	ldr	r3, [pc, #8]	; (7dc4 <SERCOM5_1_Handler+0xc>)
    7dbc:	6918      	ldr	r0, [r3, #16]
    7dbe:	4b02      	ldr	r3, [pc, #8]	; (7dc8 <SERCOM5_1_Handler+0x10>)
    7dc0:	4798      	blx	r3
    7dc2:	bd08      	pop	{r3, pc}
    7dc4:	2000047c 	.word	0x2000047c
    7dc8:	00007685 	.word	0x00007685

00007dcc <SERCOM5_2_Handler>:
{
    7dcc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7dce:	4b02      	ldr	r3, [pc, #8]	; (7dd8 <SERCOM5_2_Handler+0xc>)
    7dd0:	6918      	ldr	r0, [r3, #16]
    7dd2:	4b02      	ldr	r3, [pc, #8]	; (7ddc <SERCOM5_2_Handler+0x10>)
    7dd4:	4798      	blx	r3
    7dd6:	bd08      	pop	{r3, pc}
    7dd8:	2000047c 	.word	0x2000047c
    7ddc:	00007685 	.word	0x00007685

00007de0 <SERCOM5_3_Handler>:
{
    7de0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7de2:	4b02      	ldr	r3, [pc, #8]	; (7dec <SERCOM5_3_Handler+0xc>)
    7de4:	6918      	ldr	r0, [r3, #16]
    7de6:	4b02      	ldr	r3, [pc, #8]	; (7df0 <SERCOM5_3_Handler+0x10>)
    7de8:	4798      	blx	r3
    7dea:	bd08      	pop	{r3, pc}
    7dec:	2000047c 	.word	0x2000047c
    7df0:	00007685 	.word	0x00007685

00007df4 <SERCOM6_0_Handler>:
{
    7df4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7df6:	4b02      	ldr	r3, [pc, #8]	; (7e00 <SERCOM6_0_Handler+0xc>)
    7df8:	6958      	ldr	r0, [r3, #20]
    7dfa:	4b02      	ldr	r3, [pc, #8]	; (7e04 <SERCOM6_0_Handler+0x10>)
    7dfc:	4798      	blx	r3
    7dfe:	bd08      	pop	{r3, pc}
    7e00:	2000047c 	.word	0x2000047c
    7e04:	00007481 	.word	0x00007481

00007e08 <SERCOM6_1_Handler>:
{
    7e08:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7e0a:	4b02      	ldr	r3, [pc, #8]	; (7e14 <SERCOM6_1_Handler+0xc>)
    7e0c:	6958      	ldr	r0, [r3, #20]
    7e0e:	4b02      	ldr	r3, [pc, #8]	; (7e18 <SERCOM6_1_Handler+0x10>)
    7e10:	4798      	blx	r3
    7e12:	bd08      	pop	{r3, pc}
    7e14:	2000047c 	.word	0x2000047c
    7e18:	00007481 	.word	0x00007481

00007e1c <SERCOM6_2_Handler>:
{
    7e1c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7e1e:	4b02      	ldr	r3, [pc, #8]	; (7e28 <SERCOM6_2_Handler+0xc>)
    7e20:	6958      	ldr	r0, [r3, #20]
    7e22:	4b02      	ldr	r3, [pc, #8]	; (7e2c <SERCOM6_2_Handler+0x10>)
    7e24:	4798      	blx	r3
    7e26:	bd08      	pop	{r3, pc}
    7e28:	2000047c 	.word	0x2000047c
    7e2c:	00007481 	.word	0x00007481

00007e30 <SERCOM6_3_Handler>:
{
    7e30:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7e32:	4b02      	ldr	r3, [pc, #8]	; (7e3c <SERCOM6_3_Handler+0xc>)
    7e34:	6958      	ldr	r0, [r3, #20]
    7e36:	4b02      	ldr	r3, [pc, #8]	; (7e40 <SERCOM6_3_Handler+0x10>)
    7e38:	4798      	blx	r3
    7e3a:	bd08      	pop	{r3, pc}
    7e3c:	2000047c 	.word	0x2000047c
    7e40:	00007481 	.word	0x00007481

00007e44 <_spi_m_sync_init>:
{
    7e44:	b538      	push	{r3, r4, r5, lr}
    7e46:	4605      	mov	r5, r0
    7e48:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7e4a:	4608      	mov	r0, r1
    7e4c:	4b55      	ldr	r3, [pc, #340]	; (7fa4 <_spi_m_sync_init+0x160>)
    7e4e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7e50:	2803      	cmp	r0, #3
    7e52:	d006      	beq.n	7e62 <_spi_m_sync_init+0x1e>
    7e54:	2807      	cmp	r0, #7
    7e56:	bf08      	it	eq
    7e58:	2201      	moveq	r2, #1
    7e5a:	d003      	beq.n	7e64 <_spi_m_sync_init+0x20>
		return ERR_INVALID_ARG;
    7e5c:	f06f 000c 	mvn.w	r0, #12
}
    7e60:	bd38      	pop	{r3, r4, r5, pc}
		if (sercomspi_regs[i].n == n) {
    7e62:	2200      	movs	r2, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7e64:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7e66:	f013 0f01 	tst.w	r3, #1
    7e6a:	d122      	bne.n	7eb2 <_spi_m_sync_init+0x6e>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7e6c:	4b4e      	ldr	r3, [pc, #312]	; (7fa8 <_spi_m_sync_init+0x164>)
    7e6e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7e72:	4413      	add	r3, r2
    7e74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    7e78:	f003 011c 	and.w	r1, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e7c:	69e3      	ldr	r3, [r4, #28]
    7e7e:	f013 0f03 	tst.w	r3, #3
    7e82:	d1fb      	bne.n	7e7c <_spi_m_sync_init+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7e84:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7e86:	f013 0f02 	tst.w	r3, #2
    7e8a:	d00b      	beq.n	7ea4 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7e8c:	6823      	ldr	r3, [r4, #0]
    7e8e:	f023 0302 	bic.w	r3, r3, #2
    7e92:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e94:	69e3      	ldr	r3, [r4, #28]
    7e96:	f013 0f03 	tst.w	r3, #3
    7e9a:	d1fb      	bne.n	7e94 <_spi_m_sync_init+0x50>
    7e9c:	69e3      	ldr	r3, [r4, #28]
    7e9e:	f013 0f02 	tst.w	r3, #2
    7ea2:	d1fb      	bne.n	7e9c <_spi_m_sync_init+0x58>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7ea4:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7ea8:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7eaa:	69e3      	ldr	r3, [r4, #28]
    7eac:	f013 0f03 	tst.w	r3, #3
    7eb0:	d1fb      	bne.n	7eaa <_spi_m_sync_init+0x66>
    7eb2:	69e3      	ldr	r3, [r4, #28]
    7eb4:	f013 0f01 	tst.w	r3, #1
    7eb8:	d1fb      	bne.n	7eb2 <_spi_m_sync_init+0x6e>
	dev->prvt = hw;
    7eba:	602c      	str	r4, [r5, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7ebc:	4b3a      	ldr	r3, [pc, #232]	; (7fa8 <_spi_m_sync_init+0x164>)
    7ebe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7ec2:	4413      	add	r3, r2
    7ec4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    7ec8:	f003 011c 	and.w	r1, r3, #28
    7ecc:	2908      	cmp	r1, #8
    7ece:	d03e      	beq.n	7f4e <_spi_m_sync_init+0x10a>
	hri_sercomspi_write_CTRLA_reg(
    7ed0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7ed4:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7ed8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7eda:	69e3      	ldr	r3, [r4, #28]
    7edc:	f013 0f03 	tst.w	r3, #3
    7ee0:	d1fb      	bne.n	7eda <_spi_m_sync_init+0x96>
	    (regs->ctrlb
    7ee2:	4b31      	ldr	r3, [pc, #196]	; (7fa8 <_spi_m_sync_init+0x164>)
    7ee4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7ee8:	4413      	add	r3, r2
    7eea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	        | (SERCOM_SPI_CTRLB_RXEN));
    7eee:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7ef2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7efa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7efc:	69e3      	ldr	r3, [r4, #28]
    7efe:	f013 0f17 	tst.w	r3, #23
    7f02:	d1fb      	bne.n	7efc <_spi_m_sync_init+0xb8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7f04:	4b28      	ldr	r3, [pc, #160]	; (7fa8 <_spi_m_sync_init+0x164>)
    7f06:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7f0a:	4413      	add	r3, r2
    7f0c:	f893 10bc 	ldrb.w	r1, [r3, #188]	; 0xbc
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7f10:	7321      	strb	r1, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7f12:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7f16:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7f1a:	4b23      	ldr	r3, [pc, #140]	; (7fa8 <_spi_m_sync_init+0x164>)
    7f1c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7f20:	4413      	add	r3, r2
    7f22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    7f26:	f003 0307 	and.w	r3, r3, #7
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	bf0c      	ite	eq
    7f2e:	2301      	moveq	r3, #1
    7f30:	2302      	movne	r3, #2
    7f32:	712b      	strb	r3, [r5, #4]
	dev->dummy_byte = regs->dummy_byte;
    7f34:	4b1c      	ldr	r3, [pc, #112]	; (7fa8 <_spi_m_sync_init+0x164>)
    7f36:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7f3a:	441a      	add	r2, r3
    7f3c:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
    7f40:	f892 20bf 	ldrb.w	r2, [r2, #191]	; 0xbf
    7f44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7f48:	80eb      	strh	r3, [r5, #6]
	return ERR_NONE;
    7f4a:	2000      	movs	r0, #0
    7f4c:	bd38      	pop	{r3, r4, r5, pc}
	hri_sercomspi_write_CTRLA_reg(
    7f4e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7f52:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7f56:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7f58:	69e3      	ldr	r3, [r4, #28]
    7f5a:	f013 0f03 	tst.w	r3, #3
    7f5e:	d1fb      	bne.n	7f58 <_spi_m_sync_init+0x114>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7f60:	4b11      	ldr	r3, [pc, #68]	; (7fa8 <_spi_m_sync_init+0x164>)
    7f62:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7f66:	4413      	add	r3, r2
    7f68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7f6c:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7f70:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7f78:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7f7c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7f7e:	69e3      	ldr	r3, [r4, #28]
    7f80:	f013 0f17 	tst.w	r3, #23
    7f84:	d1fb      	bne.n	7f7e <_spi_m_sync_init+0x13a>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7f86:	4b08      	ldr	r3, [pc, #32]	; (7fa8 <_spi_m_sync_init+0x164>)
    7f88:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    7f8c:	4413      	add	r3, r2
    7f8e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7f92:	6261      	str	r1, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7f94:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7f98:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7f9c:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	d1fc      	bne.n	7f9c <_spi_m_sync_init+0x158>
    7fa2:	e7ba      	b.n	7f1a <_spi_m_sync_init+0xd6>
    7fa4:	0000743d 	.word	0x0000743d
    7fa8:	0000bcd8 	.word	0x0000bcd8

00007fac <_spi_m_async_init>:
{
    7fac:	b538      	push	{r3, r4, r5, lr}
    7fae:	4604      	mov	r4, r0
    7fb0:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    7fb2:	4b15      	ldr	r3, [pc, #84]	; (8008 <_spi_m_async_init+0x5c>)
    7fb4:	4798      	blx	r3
	if (rc < 0) {
    7fb6:	2800      	cmp	r0, #0
    7fb8:	db24      	blt.n	8004 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    7fba:	4621      	mov	r1, r4
    7fbc:	4628      	mov	r0, r5
    7fbe:	4b13      	ldr	r3, [pc, #76]	; (800c <_spi_m_async_init+0x60>)
    7fc0:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    7fc2:	2300      	movs	r3, #0
    7fc4:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    7fc6:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    7fc8:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    7fca:	4628      	mov	r0, r5
    7fcc:	4b10      	ldr	r3, [pc, #64]	; (8010 <_spi_m_async_init+0x64>)
    7fce:	4798      	blx	r3
    7fd0:	1d01      	adds	r1, r0, #4
    7fd2:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7fd4:	2401      	movs	r4, #1
    7fd6:	f000 021f 	and.w	r2, r0, #31
    7fda:	fa04 f202 	lsl.w	r2, r4, r2
    7fde:	0943      	lsrs	r3, r0, #5
    7fe0:	009b      	lsls	r3, r3, #2
    7fe2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7fe6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7fee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ff2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ff6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    7ffa:	3001      	adds	r0, #1
    7ffc:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7ffe:	4281      	cmp	r1, r0
    8000:	d1e9      	bne.n	7fd6 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    8002:	2000      	movs	r0, #0
}
    8004:	bd38      	pop	{r3, r4, r5, pc}
    8006:	bf00      	nop
    8008:	00007e45 	.word	0x00007e45
    800c:	000074f1 	.word	0x000074f1
    8010:	00007885 	.word	0x00007885

00008014 <_spi_m_async_enable_tx>:
	void *hw = dev->prvt;
    8014:	6803      	ldr	r3, [r0, #0]
	if (state) {
    8016:	b919      	cbnz	r1, 8020 <_spi_m_async_enable_tx+0xc>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    8018:	2201      	movs	r2, #1
    801a:	751a      	strb	r2, [r3, #20]
}
    801c:	2000      	movs	r0, #0
    801e:	4770      	bx	lr
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    8020:	2201      	movs	r2, #1
    8022:	759a      	strb	r2, [r3, #22]
    8024:	e7fa      	b.n	801c <_spi_m_async_enable_tx+0x8>

00008026 <_spi_m_async_enable_rx>:
	void *hw = dev->prvt;
    8026:	6803      	ldr	r3, [r0, #0]
	if (state) {
    8028:	b919      	cbnz	r1, 8032 <_spi_m_async_enable_rx+0xc>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    802a:	2204      	movs	r2, #4
    802c:	751a      	strb	r2, [r3, #20]
}
    802e:	2000      	movs	r0, #0
    8030:	4770      	bx	lr
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    8032:	2204      	movs	r2, #4
    8034:	759a      	strb	r2, [r3, #22]
    8036:	e7fa      	b.n	802e <_spi_m_async_enable_rx+0x8>

00008038 <_spi_m_async_enable_tx_complete>:
	if (state) {
    8038:	b921      	cbnz	r1, 8044 <_spi_m_async_enable_tx_complete+0xc>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    803a:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    803c:	2202      	movs	r2, #2
    803e:	751a      	strb	r2, [r3, #20]
}
    8040:	2000      	movs	r0, #0
    8042:	4770      	bx	lr
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    8044:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    8046:	2202      	movs	r2, #2
    8048:	759a      	strb	r2, [r3, #22]
    804a:	e7f9      	b.n	8040 <_spi_m_async_enable_tx_complete+0x8>

0000804c <_spi_m_async_write_one>:
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    804c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    804e:	6299      	str	r1, [r3, #40]	; 0x28
}
    8050:	2000      	movs	r0, #0
    8052:	4770      	bx	lr

00008054 <_spi_m_async_read_one>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    8054:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    8056:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    8058:	b280      	uxth	r0, r0
    805a:	4770      	bx	lr

0000805c <_spi_m_async_register_callback>:
	p_ls[cb_type] = (func_t)func;
    805c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    8060:	608a      	str	r2, [r1, #8]
}
    8062:	2000      	movs	r0, #0
    8064:	4770      	bx	lr
	...

00008068 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    8068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    806c:	4605      	mov	r5, r0
    806e:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8070:	4608      	mov	r0, r1
    8072:	4b42      	ldr	r3, [pc, #264]	; (817c <_spi_m_dma_init+0x114>)
    8074:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    8076:	2803      	cmp	r0, #3
    8078:	d007      	beq.n	808a <_spi_m_dma_init+0x22>
    807a:	2807      	cmp	r0, #7
    807c:	bf08      	it	eq
    807e:	2201      	moveq	r2, #1
    8080:	d004      	beq.n	808c <_spi_m_dma_init+0x24>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    8082:	f06f 000c 	mvn.w	r0, #12
	dev->resource->back                 = dev;
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
	dev->resource->dma_cb.error         = _spi_dma_error_occured;

	return ERR_NONE;
}
    8086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sercomspi_regs[i].n == n) {
    808a:	2200      	movs	r2, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    808c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    808e:	f013 0f01 	tst.w	r3, #1
    8092:	d122      	bne.n	80da <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8094:	4b3a      	ldr	r3, [pc, #232]	; (8180 <_spi_m_dma_init+0x118>)
    8096:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    809a:	4413      	add	r3, r2
    809c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    80a0:	f003 011c 	and.w	r1, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    80a4:	69e3      	ldr	r3, [r4, #28]
    80a6:	f013 0f03 	tst.w	r3, #3
    80aa:	d1fb      	bne.n	80a4 <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    80ac:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    80ae:	f013 0f02 	tst.w	r3, #2
    80b2:	d00b      	beq.n	80cc <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    80b4:	6823      	ldr	r3, [r4, #0]
    80b6:	f023 0302 	bic.w	r3, r3, #2
    80ba:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    80bc:	69e3      	ldr	r3, [r4, #28]
    80be:	f013 0f03 	tst.w	r3, #3
    80c2:	d1fb      	bne.n	80bc <_spi_m_dma_init+0x54>
    80c4:	69e3      	ldr	r3, [r4, #28]
    80c6:	f013 0f02 	tst.w	r3, #2
    80ca:	d1fb      	bne.n	80c4 <_spi_m_dma_init+0x5c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    80cc:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    80d0:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    80d2:	69e3      	ldr	r3, [r4, #28]
    80d4:	f013 0f03 	tst.w	r3, #3
    80d8:	d1fb      	bne.n	80d2 <_spi_m_dma_init+0x6a>
    80da:	69e3      	ldr	r3, [r4, #28]
    80dc:	f013 0f01 	tst.w	r3, #1
    80e0:	d1fb      	bne.n	80da <_spi_m_dma_init+0x72>
	dev->prvt = hw;
    80e2:	602c      	str	r4, [r5, #0]
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    80e4:	4b26      	ldr	r3, [pc, #152]	; (8180 <_spi_m_dma_init+0x118>)
    80e6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    80ea:	4413      	add	r3, r2
    80ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	hri_sercomspi_write_CTRLA_reg(
    80f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    80f4:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    80f8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    80fa:	69e3      	ldr	r3, [r4, #28]
    80fc:	f013 0f03 	tst.w	r3, #3
    8100:	d1fb      	bne.n	80fa <_spi_m_dma_init+0x92>
	    (regs->ctrlb
    8102:	4b1f      	ldr	r3, [pc, #124]	; (8180 <_spi_m_dma_init+0x118>)
    8104:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    8108:	4413      	add	r3, r2
    810a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	        | (SERCOM_SPI_CTRLB_RXEN));
    810e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    8112:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    8116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    811a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    811c:	69e3      	ldr	r3, [r4, #28]
    811e:	f013 0f17 	tst.w	r3, #23
    8122:	d1fb      	bne.n	811c <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    8124:	4b16      	ldr	r3, [pc, #88]	; (8180 <_spi_m_dma_init+0x118>)
    8126:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    812a:	441a      	add	r2, r3
    812c:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
	((Sercom *)hw)->SPI.BAUD.reg = data;
    8130:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8132:	f892 30bd 	ldrb.w	r3, [r2, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    8136:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    813a:	f105 0818 	add.w	r8, r5, #24
    813e:	4620      	mov	r0, r4
    8140:	4b10      	ldr	r3, [pc, #64]	; (8184 <_spi_m_dma_init+0x11c>)
    8142:	4798      	blx	r3
    8144:	4601      	mov	r1, r0
    8146:	4640      	mov	r0, r8
    8148:	4f0f      	ldr	r7, [pc, #60]	; (8188 <_spi_m_dma_init+0x120>)
    814a:	47b8      	blx	r7
	dev->resource->back                 = dev;
    814c:	69ab      	ldr	r3, [r5, #24]
    814e:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    8150:	69ab      	ldr	r3, [r5, #24]
    8152:	4a0e      	ldr	r2, [pc, #56]	; (818c <_spi_m_dma_init+0x124>)
    8154:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    8156:	69ab      	ldr	r3, [r5, #24]
    8158:	4e0d      	ldr	r6, [pc, #52]	; (8190 <_spi_m_dma_init+0x128>)
    815a:	605e      	str	r6, [r3, #4]
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    815c:	4620      	mov	r0, r4
    815e:	4b0d      	ldr	r3, [pc, #52]	; (8194 <_spi_m_dma_init+0x12c>)
    8160:	4798      	blx	r3
    8162:	4601      	mov	r1, r0
    8164:	4640      	mov	r0, r8
    8166:	47b8      	blx	r7
	dev->resource->back                 = dev;
    8168:	69ab      	ldr	r3, [r5, #24]
    816a:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    816c:	69ab      	ldr	r3, [r5, #24]
    816e:	4a0a      	ldr	r2, [pc, #40]	; (8198 <_spi_m_dma_init+0x130>)
    8170:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    8172:	69ab      	ldr	r3, [r5, #24]
    8174:	605e      	str	r6, [r3, #4]
	return ERR_NONE;
    8176:	2000      	movs	r0, #0
    8178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    817c:	0000743d 	.word	0x0000743d
    8180:	0000bcd8 	.word	0x0000bcd8
    8184:	00007a01 	.word	0x00007a01
    8188:	00006f15 	.word	0x00006f15
    818c:	00007a15 	.word	0x00007a15
    8190:	00007a2d 	.word	0x00007a2d
    8194:	000079ed 	.word	0x000079ed
    8198:	00007a21 	.word	0x00007a21

0000819c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    819c:	b508      	push	{r3, lr}
	ASSERT(dev && dev->prvt);

	return _spi_sync_enable(dev->prvt);
    819e:	6800      	ldr	r0, [r0, #0]
    81a0:	4b01      	ldr	r3, [pc, #4]	; (81a8 <_spi_m_dma_enable+0xc>)
    81a2:	4798      	blx	r3
}
    81a4:	bd08      	pop	{r3, pc}
    81a6:	bf00      	nop
    81a8:	0000797d 	.word	0x0000797d

000081ac <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    81ac:	b570      	push	{r4, r5, r6, lr}
    81ae:	4605      	mov	r5, r0
    81b0:	4614      	mov	r4, r2
	switch (type) {
    81b2:	2901      	cmp	r1, #1
    81b4:	d00e      	beq.n	81d4 <_spi_m_dma_register_callback+0x28>
    81b6:	b111      	cbz	r1, 81be <_spi_m_dma_register_callback+0x12>
    81b8:	2902      	cmp	r1, #2
    81ba:	d016      	beq.n	81ea <_spi_m_dma_register_callback+0x3e>
    81bc:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    81be:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    81c0:	6800      	ldr	r0, [r0, #0]
    81c2:	4b13      	ldr	r3, [pc, #76]	; (8210 <_spi_m_dma_register_callback+0x64>)
    81c4:	4798      	blx	r3
    81c6:	1c22      	adds	r2, r4, #0
    81c8:	bf18      	it	ne
    81ca:	2201      	movne	r2, #1
    81cc:	2100      	movs	r1, #0
    81ce:	4b11      	ldr	r3, [pc, #68]	; (8214 <_spi_m_dma_register_callback+0x68>)
    81d0:	4798      	blx	r3
		break;
    81d2:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    81d4:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    81d6:	6800      	ldr	r0, [r0, #0]
    81d8:	4b0f      	ldr	r3, [pc, #60]	; (8218 <_spi_m_dma_register_callback+0x6c>)
    81da:	4798      	blx	r3
    81dc:	1c22      	adds	r2, r4, #0
    81de:	bf18      	it	ne
    81e0:	2201      	movne	r2, #1
    81e2:	2100      	movs	r1, #0
    81e4:	4b0b      	ldr	r3, [pc, #44]	; (8214 <_spi_m_dma_register_callback+0x68>)
    81e6:	4798      	blx	r3
		break;
    81e8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    81ea:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    81ec:	6800      	ldr	r0, [r0, #0]
    81ee:	4b0a      	ldr	r3, [pc, #40]	; (8218 <_spi_m_dma_register_callback+0x6c>)
    81f0:	4798      	blx	r3
    81f2:	3400      	adds	r4, #0
    81f4:	bf18      	it	ne
    81f6:	2401      	movne	r4, #1
    81f8:	4622      	mov	r2, r4
    81fa:	2101      	movs	r1, #1
    81fc:	4e05      	ldr	r6, [pc, #20]	; (8214 <_spi_m_dma_register_callback+0x68>)
    81fe:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    8200:	6828      	ldr	r0, [r5, #0]
    8202:	4b03      	ldr	r3, [pc, #12]	; (8210 <_spi_m_dma_register_callback+0x64>)
    8204:	4798      	blx	r3
    8206:	4622      	mov	r2, r4
    8208:	2101      	movs	r1, #1
    820a:	47b0      	blx	r6
    820c:	bd70      	pop	{r4, r5, r6, pc}
    820e:	bf00      	nop
    8210:	000079ed 	.word	0x000079ed
    8214:	00006ded 	.word	0x00006ded
    8218:	00007a01 	.word	0x00007a01

0000821c <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    821c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8220:	4607      	mov	r7, r0
    8222:	468a      	mov	sl, r1
    8224:	4690      	mov	r8, r2
    8226:	4699      	mov	r9, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    8228:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    822a:	4620      	mov	r0, r4
    822c:	4b39      	ldr	r3, [pc, #228]	; (8314 <_spi_m_dma_transfer+0xf8>)
    822e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    8230:	2803      	cmp	r0, #3
    8232:	d048      	beq.n	82c6 <_spi_m_dma_transfer+0xaa>
    8234:	2807      	cmp	r0, #7
    8236:	bf08      	it	eq
    8238:	2201      	moveq	r2, #1
    823a:	d045      	beq.n	82c8 <_spi_m_dma_transfer+0xac>
	return NULL;
    823c:	f04f 0b00 	mov.w	fp, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    8240:	4620      	mov	r0, r4
    8242:	4b35      	ldr	r3, [pc, #212]	; (8318 <_spi_m_dma_transfer+0xfc>)
    8244:	4798      	blx	r3
    8246:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    8248:	4620      	mov	r0, r4
    824a:	4b34      	ldr	r3, [pc, #208]	; (831c <_spi_m_dma_transfer+0x100>)
    824c:	4798      	blx	r3
    824e:	4605      	mov	r5, r0

	if (rxbuf) {
    8250:	f1b8 0f00 	cmp.w	r8, #0
    8254:	d03d      	beq.n	82d2 <_spi_m_dma_transfer+0xb6>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8256:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    8258:	f013 0f04 	tst.w	r3, #4
    825c:	d107      	bne.n	826e <_spi_m_dma_transfer+0x52>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    825e:	6863      	ldr	r3, [r4, #4]
    8260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8264:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8266:	69e3      	ldr	r3, [r4, #28]
    8268:	f013 0f17 	tst.w	r3, #23
    826c:	d1fb      	bne.n	8266 <_spi_m_dma_transfer+0x4a>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    826e:	6839      	ldr	r1, [r7, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    8270:	3128      	adds	r1, #40	; 0x28
    8272:	4630      	mov	r0, r6
    8274:	4b2a      	ldr	r3, [pc, #168]	; (8320 <_spi_m_dma_transfer+0x104>)
    8276:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    8278:	4641      	mov	r1, r8
    827a:	4630      	mov	r0, r6
    827c:	4b29      	ldr	r3, [pc, #164]	; (8324 <_spi_m_dma_transfer+0x108>)
    827e:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    8280:	4649      	mov	r1, r9
    8282:	4630      	mov	r0, r6
    8284:	4b28      	ldr	r3, [pc, #160]	; (8328 <_spi_m_dma_transfer+0x10c>)
    8286:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    8288:	2100      	movs	r1, #0
    828a:	4630      	mov	r0, r6
    828c:	4b27      	ldr	r3, [pc, #156]	; (832c <_spi_m_dma_transfer+0x110>)
    828e:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    8290:	f1ba 0f00 	cmp.w	sl, #0
    8294:	d02a      	beq.n	82ec <_spi_m_dma_transfer+0xd0>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    8296:	4651      	mov	r1, sl
    8298:	4628      	mov	r0, r5
    829a:	4b21      	ldr	r3, [pc, #132]	; (8320 <_spi_m_dma_transfer+0x104>)
    829c:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    829e:	6839      	ldr	r1, [r7, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    82a0:	3128      	adds	r1, #40	; 0x28
    82a2:	4628      	mov	r0, r5
    82a4:	4b1f      	ldr	r3, [pc, #124]	; (8324 <_spi_m_dma_transfer+0x108>)
    82a6:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    82a8:	2101      	movs	r1, #1
    82aa:	4628      	mov	r0, r5
    82ac:	4b20      	ldr	r3, [pc, #128]	; (8330 <_spi_m_dma_transfer+0x114>)
    82ae:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    82b0:	4649      	mov	r1, r9
    82b2:	4628      	mov	r0, r5
    82b4:	4b1c      	ldr	r3, [pc, #112]	; (8328 <_spi_m_dma_transfer+0x10c>)
    82b6:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    82b8:	2100      	movs	r1, #0
    82ba:	4628      	mov	r0, r5
    82bc:	4b1b      	ldr	r3, [pc, #108]	; (832c <_spi_m_dma_transfer+0x110>)
    82be:	4798      	blx	r3

	return ERR_NONE;
}
    82c0:	2000      	movs	r0, #0
    82c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    82c6:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    82c8:	4b1a      	ldr	r3, [pc, #104]	; (8334 <_spi_m_dma_transfer+0x118>)
    82ca:	eb03 1b02 	add.w	fp, r3, r2, lsl #4
    82ce:	4493      	add	fp, r2
    82d0:	e7b6      	b.n	8240 <_spi_m_dma_transfer+0x24>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    82d2:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    82d4:	f013 0f04 	tst.w	r3, #4
    82d8:	d1da      	bne.n	8290 <_spi_m_dma_transfer+0x74>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    82da:	6863      	ldr	r3, [r4, #4]
    82dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    82e0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    82e2:	69e3      	ldr	r3, [r4, #28]
    82e4:	f013 0f17 	tst.w	r3, #23
    82e8:	d1fb      	bne.n	82e2 <_spi_m_dma_transfer+0xc6>
    82ea:	e7d1      	b.n	8290 <_spi_m_dma_transfer+0x74>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    82ec:	f10b 010e 	add.w	r1, fp, #14
    82f0:	4628      	mov	r0, r5
    82f2:	4b0b      	ldr	r3, [pc, #44]	; (8320 <_spi_m_dma_transfer+0x104>)
    82f4:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    82f6:	6839      	ldr	r1, [r7, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    82f8:	3128      	adds	r1, #40	; 0x28
    82fa:	4628      	mov	r0, r5
    82fc:	4b09      	ldr	r3, [pc, #36]	; (8324 <_spi_m_dma_transfer+0x108>)
    82fe:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    8300:	2100      	movs	r1, #0
    8302:	4628      	mov	r0, r5
    8304:	4b0a      	ldr	r3, [pc, #40]	; (8330 <_spi_m_dma_transfer+0x114>)
    8306:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    8308:	4649      	mov	r1, r9
    830a:	4628      	mov	r0, r5
    830c:	4b06      	ldr	r3, [pc, #24]	; (8328 <_spi_m_dma_transfer+0x10c>)
    830e:	4798      	blx	r3
    8310:	e7d2      	b.n	82b8 <_spi_m_dma_transfer+0x9c>
    8312:	bf00      	nop
    8314:	0000743d 	.word	0x0000743d
    8318:	00007a01 	.word	0x00007a01
    831c:	000079ed 	.word	0x000079ed
    8320:	00006e51 	.word	0x00006e51
    8324:	00006e41 	.word	0x00006e41
    8328:	00006e7d 	.word	0x00006e7d
    832c:	00006ed5 	.word	0x00006ed5
    8330:	00006e61 	.word	0x00006e61
    8334:	0000bd88 	.word	0x0000bd88

00008338 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    8338:	4b03      	ldr	r3, [pc, #12]	; (8348 <_delay_init+0x10>)
    833a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    833e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    8340:	2205      	movs	r2, #5
    8342:	601a      	str	r2, [r3, #0]
    8344:	4770      	bx	lr
    8346:	bf00      	nop
    8348:	e000e010 	.word	0xe000e010

0000834c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    834c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    834e:	b303      	cbz	r3, 8392 <_delay_cycles+0x46>
{
    8350:	b430      	push	{r4, r5}
    8352:	1e5d      	subs	r5, r3, #1
    8354:	b2ed      	uxtb	r5, r5
	while (n--) {
    8356:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    8358:	4a12      	ldr	r2, [pc, #72]	; (83a4 <_delay_cycles+0x58>)
    835a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    835e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    8360:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8362:	6813      	ldr	r3, [r2, #0]
    8364:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8368:	d0fb      	beq.n	8362 <_delay_cycles+0x16>
	while (n--) {
    836a:	3801      	subs	r0, #1
    836c:	b2c0      	uxtb	r0, r0
    836e:	28ff      	cmp	r0, #255	; 0xff
    8370:	d1f5      	bne.n	835e <_delay_cycles+0x12>
    8372:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    8376:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    837a:	3101      	adds	r1, #1
    837c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    837e:	4b09      	ldr	r3, [pc, #36]	; (83a4 <_delay_cycles+0x58>)
    8380:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    8382:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8384:	461a      	mov	r2, r3
    8386:	6813      	ldr	r3, [r2, #0]
    8388:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    838c:	d0fb      	beq.n	8386 <_delay_cycles+0x3a>
		;
}
    838e:	bc30      	pop	{r4, r5}
    8390:	4770      	bx	lr
	SysTick->LOAD = buf;
    8392:	4b04      	ldr	r3, [pc, #16]	; (83a4 <_delay_cycles+0x58>)
    8394:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    8396:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8398:	461a      	mov	r2, r3
    839a:	6813      	ldr	r3, [r2, #0]
    839c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    83a0:	d0fb      	beq.n	839a <_delay_cycles+0x4e>
    83a2:	4770      	bx	lr
    83a4:	e000e010 	.word	0xe000e010

000083a8 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    83a8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    83aa:	6813      	ldr	r3, [r2, #0]
    83ac:	f043 0302 	orr.w	r3, r3, #2
    83b0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83b2:	6913      	ldr	r3, [r2, #16]
    83b4:	f013 0f03 	tst.w	r3, #3
    83b8:	d1fb      	bne.n	83b2 <_tc_timer_start+0xa>
}
    83ba:	4770      	bx	lr

000083bc <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    83bc:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    83be:	6813      	ldr	r3, [r2, #0]
    83c0:	f023 0302 	bic.w	r3, r3, #2
    83c4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83c6:	6913      	ldr	r3, [r2, #16]
    83c8:	f013 0f03 	tst.w	r3, #3
    83cc:	d1fb      	bne.n	83c6 <_tc_timer_stop+0xa>
}
    83ce:	4770      	bx	lr

000083d0 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    83d0:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83d2:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    83d4:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    83d8:	2a02      	cmp	r2, #2
    83da:	d00a      	beq.n	83f2 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83dc:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    83de:	f012 0f0c 	tst.w	r2, #12
    83e2:	d10c      	bne.n	83fe <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    83e4:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    83e6:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83e8:	691a      	ldr	r2, [r3, #16]
    83ea:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    83ee:	d1fb      	bne.n	83e8 <_tc_timer_set_period+0x18>
    83f0:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    83f2:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83f4:	691a      	ldr	r2, [r3, #16]
    83f6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    83fa:	d1fb      	bne.n	83f4 <_tc_timer_set_period+0x24>
    83fc:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    83fe:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8400:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8404:	2a01      	cmp	r2, #1
    8406:	d000      	beq.n	840a <_tc_timer_set_period+0x3a>
    8408:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    840a:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    840c:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    840e:	691a      	ldr	r2, [r3, #16]
    8410:	f012 0f20 	tst.w	r2, #32
    8414:	d1fb      	bne.n	840e <_tc_timer_set_period+0x3e>
    8416:	e7f7      	b.n	8408 <_tc_timer_set_period+0x38>

00008418 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    8418:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    841a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    841c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8420:	2a02      	cmp	r2, #2
    8422:	d00a      	beq.n	843a <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8424:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8426:	f012 0f0c 	tst.w	r2, #12
    842a:	d10c      	bne.n	8446 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    842c:	691a      	ldr	r2, [r3, #16]
    842e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    8432:	d1fb      	bne.n	842c <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8434:	8b98      	ldrh	r0, [r3, #28]
    8436:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    8438:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    843a:	691a      	ldr	r2, [r3, #16]
    843c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    8440:	d1fb      	bne.n	843a <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    8442:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    8444:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8446:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8448:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    844c:	2a01      	cmp	r2, #1
    844e:	d001      	beq.n	8454 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    8450:	2000      	movs	r0, #0
}
    8452:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8454:	691a      	ldr	r2, [r3, #16]
    8456:	f012 0f20 	tst.w	r2, #32
    845a:	d1fb      	bne.n	8454 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    845c:	7ed8      	ldrb	r0, [r3, #27]
    845e:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    8460:	4770      	bx	lr

00008462 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8462:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8464:	6913      	ldr	r3, [r2, #16]
    8466:	f013 0f03 	tst.w	r3, #3
    846a:	d1fb      	bne.n	8464 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    846c:	6810      	ldr	r0, [r2, #0]
}
    846e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8472:	4770      	bx	lr

00008474 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8474:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    8476:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8478:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    847a:	f012 0f01 	tst.w	r2, #1
    847e:	d100      	bne.n	8482 <tc_interrupt_handler+0xe>
    8480:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8482:	2201      	movs	r2, #1
    8484:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    8486:	6803      	ldr	r3, [r0, #0]
    8488:	4798      	blx	r3
	}
}
    848a:	e7f9      	b.n	8480 <tc_interrupt_handler+0xc>

0000848c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    848c:	b470      	push	{r4, r5, r6}
    848e:	b089      	sub	sp, #36	; 0x24
    8490:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8492:	466c      	mov	r4, sp
    8494:	4d16      	ldr	r5, [pc, #88]	; (84f0 <get_tc_index+0x64>)
    8496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    849a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    849e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    84a2:	9b00      	ldr	r3, [sp, #0]
    84a4:	42b3      	cmp	r3, r6
    84a6:	d00c      	beq.n	84c2 <get_tc_index+0x36>
    84a8:	4630      	mov	r0, r6
    84aa:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    84ac:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    84ae:	f852 1b04 	ldr.w	r1, [r2], #4
    84b2:	4281      	cmp	r1, r0
    84b4:	d006      	beq.n	84c4 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    84b6:	3301      	adds	r3, #1
    84b8:	2b08      	cmp	r3, #8
    84ba:	d1f8      	bne.n	84ae <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    84bc:	2000      	movs	r0, #0
			return i;
    84be:	b240      	sxtb	r0, r0
    84c0:	e00d      	b.n	84de <get_tc_index+0x52>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    84c2:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    84c4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    84c8:	d010      	beq.n	84ec <get_tc_index+0x60>
    84ca:	2b01      	cmp	r3, #1
    84cc:	d00a      	beq.n	84e4 <get_tc_index+0x58>
    84ce:	2b02      	cmp	r3, #2
    84d0:	d00a      	beq.n	84e8 <get_tc_index+0x5c>
    84d2:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    84d4:	bf08      	it	eq
    84d6:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    84d8:	d0f1      	beq.n	84be <get_tc_index+0x32>
	return -1;
    84da:	f04f 30ff 	mov.w	r0, #4294967295
}
    84de:	b009      	add	sp, #36	; 0x24
    84e0:	bc70      	pop	{r4, r5, r6}
    84e2:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    84e4:	2001      	movs	r0, #1
    84e6:	e7ea      	b.n	84be <get_tc_index+0x32>
    84e8:	2002      	movs	r0, #2
    84ea:	e7e8      	b.n	84be <get_tc_index+0x32>
    84ec:	2000      	movs	r0, #0
    84ee:	e7e6      	b.n	84be <get_tc_index+0x32>
    84f0:	0000bdac 	.word	0x0000bdac

000084f4 <_tc_timer_deinit>:
{
    84f4:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    84f6:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    84f8:	4620      	mov	r0, r4
    84fa:	4b15      	ldr	r3, [pc, #84]	; (8550 <_tc_timer_deinit+0x5c>)
    84fc:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    84fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8502:	4b14      	ldr	r3, [pc, #80]	; (8554 <_tc_timer_deinit+0x60>)
    8504:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8508:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    850c:	2b00      	cmp	r3, #0
    850e:	db0d      	blt.n	852c <_tc_timer_deinit+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8510:	095a      	lsrs	r2, r3, #5
    8512:	f003 031f 	and.w	r3, r3, #31
    8516:	2101      	movs	r1, #1
    8518:	fa01 f303 	lsl.w	r3, r1, r3
    851c:	3220      	adds	r2, #32
    851e:	490e      	ldr	r1, [pc, #56]	; (8558 <_tc_timer_deinit+0x64>)
    8520:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8524:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8528:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    852c:	6823      	ldr	r3, [r4, #0]
    852e:	f023 0302 	bic.w	r3, r3, #2
    8532:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8534:	6923      	ldr	r3, [r4, #16]
    8536:	f013 0f03 	tst.w	r3, #3
    853a:	d1fb      	bne.n	8534 <_tc_timer_deinit+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    853c:	6823      	ldr	r3, [r4, #0]
    853e:	f043 0301 	orr.w	r3, r3, #1
    8542:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8544:	6923      	ldr	r3, [r4, #16]
    8546:	f013 0f01 	tst.w	r3, #1
    854a:	d1fb      	bne.n	8544 <_tc_timer_deinit+0x50>
}
    854c:	bd10      	pop	{r4, pc}
    854e:	bf00      	nop
    8550:	0000848d 	.word	0x0000848d
    8554:	0000bdac 	.word	0x0000bdac
    8558:	e000e100 	.word	0xe000e100

0000855c <_tc_timer_init>:
{
    855c:	b538      	push	{r3, r4, r5, lr}
    855e:	4605      	mov	r5, r0
    8560:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    8562:	4608      	mov	r0, r1
    8564:	4b6e      	ldr	r3, [pc, #440]	; (8720 <_tc_timer_init+0x1c4>)
    8566:	4798      	blx	r3
	device->hw = hw;
    8568:	60ec      	str	r4, [r5, #12]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    856a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    856c:	f013 0f01 	tst.w	r3, #1
    8570:	d119      	bne.n	85a6 <_tc_timer_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8572:	6923      	ldr	r3, [r4, #16]
    8574:	f013 0f03 	tst.w	r3, #3
    8578:	d1fb      	bne.n	8572 <_tc_timer_init+0x16>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    857a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    857c:	f013 0f02 	tst.w	r3, #2
    8580:	d00b      	beq.n	859a <_tc_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8582:	6823      	ldr	r3, [r4, #0]
    8584:	f023 0302 	bic.w	r3, r3, #2
    8588:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    858a:	6923      	ldr	r3, [r4, #16]
    858c:	f013 0f03 	tst.w	r3, #3
    8590:	d1fb      	bne.n	858a <_tc_timer_init+0x2e>
    8592:	6923      	ldr	r3, [r4, #16]
    8594:	f013 0f02 	tst.w	r3, #2
    8598:	d1fb      	bne.n	8592 <_tc_timer_init+0x36>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    859a:	2301      	movs	r3, #1
    859c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    859e:	6923      	ldr	r3, [r4, #16]
    85a0:	f013 0f03 	tst.w	r3, #3
    85a4:	d1fb      	bne.n	859e <_tc_timer_init+0x42>
    85a6:	6923      	ldr	r3, [r4, #16]
    85a8:	f013 0f01 	tst.w	r3, #1
    85ac:	d1fb      	bne.n	85a6 <_tc_timer_init+0x4a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    85ae:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    85b2:	4a5c      	ldr	r2, [pc, #368]	; (8724 <_tc_timer_init+0x1c8>)
    85b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    85b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    85ba:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    85bc:	6923      	ldr	r3, [r4, #16]
    85be:	f013 0f03 	tst.w	r3, #3
    85c2:	d1fb      	bne.n	85bc <_tc_timer_init+0x60>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    85c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    85c8:	4956      	ldr	r1, [pc, #344]	; (8724 <_tc_timer_init+0x1c8>)
    85ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    85ce:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    85d2:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    85d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    85d6:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    85d8:	2301      	movs	r3, #1
    85da:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    85dc:	f002 020c 	and.w	r2, r2, #12
    85e0:	2a08      	cmp	r2, #8
    85e2:	d056      	beq.n	8692 <_tc_timer_init+0x136>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    85e4:	2a00      	cmp	r2, #0
    85e6:	d16b      	bne.n	86c0 <_tc_timer_init+0x164>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    85e8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    85ec:	4a4d      	ldr	r2, [pc, #308]	; (8724 <_tc_timer_init+0x1c8>)
    85ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    85f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    85f4:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    85f6:	6923      	ldr	r3, [r4, #16]
    85f8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    85fc:	d1fb      	bne.n	85f6 <_tc_timer_init+0x9a>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    85fe:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8602:	4a48      	ldr	r2, [pc, #288]	; (8724 <_tc_timer_init+0x1c8>)
    8604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8608:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    860a:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    860c:	6923      	ldr	r3, [r4, #16]
    860e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8612:	d1fb      	bne.n	860c <_tc_timer_init+0xb0>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    8614:	2301      	movs	r3, #1
    8616:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    8618:	4b43      	ldr	r3, [pc, #268]	; (8728 <_tc_timer_init+0x1cc>)
    861a:	429c      	cmp	r4, r3
    861c:	d077      	beq.n	870e <_tc_timer_init+0x1b2>
	if (hw == TC1) {
    861e:	4b43      	ldr	r3, [pc, #268]	; (872c <_tc_timer_init+0x1d0>)
    8620:	429c      	cmp	r4, r3
    8622:	d077      	beq.n	8714 <_tc_timer_init+0x1b8>
	if (hw == TC2) {
    8624:	4b42      	ldr	r3, [pc, #264]	; (8730 <_tc_timer_init+0x1d4>)
    8626:	429c      	cmp	r4, r3
    8628:	d077      	beq.n	871a <_tc_timer_init+0x1be>
	if (hw == TC3) {
    862a:	4b42      	ldr	r3, [pc, #264]	; (8734 <_tc_timer_init+0x1d8>)
    862c:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    862e:	bf04      	itt	eq
    8630:	4b41      	ldreq	r3, [pc, #260]	; (8738 <_tc_timer_init+0x1dc>)
    8632:	60dd      	streq	r5, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    8634:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8638:	4a3a      	ldr	r2, [pc, #232]	; (8724 <_tc_timer_init+0x1c8>)
    863a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    863e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8642:	2b00      	cmp	r3, #0
    8644:	db23      	blt.n	868e <_tc_timer_init+0x132>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8646:	095a      	lsrs	r2, r3, #5
    8648:	f003 031f 	and.w	r3, r3, #31
    864c:	2101      	movs	r1, #1
    864e:	fa01 f303 	lsl.w	r3, r1, r3
    8652:	3220      	adds	r2, #32
    8654:	4939      	ldr	r1, [pc, #228]	; (873c <_tc_timer_init+0x1e0>)
    8656:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    865a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    865e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8662:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8666:	4b2f      	ldr	r3, [pc, #188]	; (8724 <_tc_timer_init+0x1c8>)
    8668:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    866c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8670:	2b00      	cmp	r3, #0
    8672:	db0c      	blt.n	868e <_tc_timer_init+0x132>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8674:	0959      	lsrs	r1, r3, #5
    8676:	f003 031f 	and.w	r3, r3, #31
    867a:	2201      	movs	r2, #1
    867c:	fa02 f303 	lsl.w	r3, r2, r3
    8680:	4a2e      	ldr	r2, [pc, #184]	; (873c <_tc_timer_init+0x1e0>)
    8682:	f101 0060 	add.w	r0, r1, #96	; 0x60
    8686:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    868a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    868e:	2000      	movs	r0, #0
    8690:	bd38      	pop	{r3, r4, r5, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8692:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8696:	4a23      	ldr	r2, [pc, #140]	; (8724 <_tc_timer_init+0x1c8>)
    8698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    869e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86a0:	6923      	ldr	r3, [r4, #16]
    86a2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    86a6:	d1fb      	bne.n	86a0 <_tc_timer_init+0x144>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    86a8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    86ac:	4a1d      	ldr	r2, [pc, #116]	; (8724 <_tc_timer_init+0x1c8>)
    86ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    86b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    86b4:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86b6:	6923      	ldr	r3, [r4, #16]
    86b8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    86bc:	d1fb      	bne.n	86b6 <_tc_timer_init+0x15a>
    86be:	e7a9      	b.n	8614 <_tc_timer_init+0xb8>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    86c0:	2a04      	cmp	r2, #4
    86c2:	d1a7      	bne.n	8614 <_tc_timer_init+0xb8>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    86c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    86c8:	4a16      	ldr	r2, [pc, #88]	; (8724 <_tc_timer_init+0x1c8>)
    86ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    86ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    86d2:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86d4:	6923      	ldr	r3, [r4, #16]
    86d6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    86da:	d1fb      	bne.n	86d4 <_tc_timer_init+0x178>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    86dc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    86e0:	4a10      	ldr	r2, [pc, #64]	; (8724 <_tc_timer_init+0x1c8>)
    86e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    86e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    86ea:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86ec:	6923      	ldr	r3, [r4, #16]
    86ee:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    86f2:	d1fb      	bne.n	86ec <_tc_timer_init+0x190>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    86f4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    86f8:	4a0a      	ldr	r2, [pc, #40]	; (8724 <_tc_timer_init+0x1c8>)
    86fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    86fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    8702:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8704:	6923      	ldr	r3, [r4, #16]
    8706:	f013 0f20 	tst.w	r3, #32
    870a:	d1fb      	bne.n	8704 <_tc_timer_init+0x1a8>
    870c:	e782      	b.n	8614 <_tc_timer_init+0xb8>
		_tc0_dev = (struct _timer_device *)dev;
    870e:	4b0a      	ldr	r3, [pc, #40]	; (8738 <_tc_timer_init+0x1dc>)
    8710:	601d      	str	r5, [r3, #0]
    8712:	e78a      	b.n	862a <_tc_timer_init+0xce>
		_tc1_dev = (struct _timer_device *)dev;
    8714:	4b08      	ldr	r3, [pc, #32]	; (8738 <_tc_timer_init+0x1dc>)
    8716:	605d      	str	r5, [r3, #4]
    8718:	e78c      	b.n	8634 <_tc_timer_init+0xd8>
		_tc2_dev = (struct _timer_device *)dev;
    871a:	4b07      	ldr	r3, [pc, #28]	; (8738 <_tc_timer_init+0x1dc>)
    871c:	609d      	str	r5, [r3, #8]
    871e:	e789      	b.n	8634 <_tc_timer_init+0xd8>
    8720:	0000848d 	.word	0x0000848d
    8724:	0000bdac 	.word	0x0000bdac
    8728:	40003800 	.word	0x40003800
    872c:	40003c00 	.word	0x40003c00
    8730:	4101a000 	.word	0x4101a000
    8734:	4101c000 	.word	0x4101c000
    8738:	20000494 	.word	0x20000494
    873c:	e000e100 	.word	0xe000e100

00008740 <_tc_timer_set_irq>:
{
    8740:	b508      	push	{r3, lr}
	int8_t      i  = get_tc_index(hw);
    8742:	68c0      	ldr	r0, [r0, #12]
    8744:	4b05      	ldr	r3, [pc, #20]	; (875c <_tc_timer_set_irq+0x1c>)
    8746:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    8748:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    874c:	4b04      	ldr	r3, [pc, #16]	; (8760 <_tc_timer_set_irq+0x20>)
    874e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8752:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    8756:	4b03      	ldr	r3, [pc, #12]	; (8764 <_tc_timer_set_irq+0x24>)
    8758:	4798      	blx	r3
    875a:	bd08      	pop	{r3, pc}
    875c:	0000848d 	.word	0x0000848d
    8760:	0000bdac 	.word	0x0000bdac
    8764:	00006c15 	.word	0x00006c15

00008768 <_tc_get_timer>:
}
    8768:	4800      	ldr	r0, [pc, #0]	; (876c <_tc_get_timer+0x4>)
    876a:	4770      	bx	lr
    876c:	20000020 	.word	0x20000020

00008770 <TC0_Handler>:
{
    8770:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    8772:	4b02      	ldr	r3, [pc, #8]	; (877c <TC0_Handler+0xc>)
    8774:	6818      	ldr	r0, [r3, #0]
    8776:	4b02      	ldr	r3, [pc, #8]	; (8780 <TC0_Handler+0x10>)
    8778:	4798      	blx	r3
    877a:	bd08      	pop	{r3, pc}
    877c:	20000494 	.word	0x20000494
    8780:	00008475 	.word	0x00008475

00008784 <TC1_Handler>:
{
    8784:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    8786:	4b02      	ldr	r3, [pc, #8]	; (8790 <TC1_Handler+0xc>)
    8788:	6858      	ldr	r0, [r3, #4]
    878a:	4b02      	ldr	r3, [pc, #8]	; (8794 <TC1_Handler+0x10>)
    878c:	4798      	blx	r3
    878e:	bd08      	pop	{r3, pc}
    8790:	20000494 	.word	0x20000494
    8794:	00008475 	.word	0x00008475

00008798 <TC2_Handler>:
{
    8798:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    879a:	4b02      	ldr	r3, [pc, #8]	; (87a4 <TC2_Handler+0xc>)
    879c:	6898      	ldr	r0, [r3, #8]
    879e:	4b02      	ldr	r3, [pc, #8]	; (87a8 <TC2_Handler+0x10>)
    87a0:	4798      	blx	r3
    87a2:	bd08      	pop	{r3, pc}
    87a4:	20000494 	.word	0x20000494
    87a8:	00008475 	.word	0x00008475

000087ac <TC3_Handler>:
{
    87ac:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    87ae:	4b02      	ldr	r3, [pc, #8]	; (87b8 <TC3_Handler+0xc>)
    87b0:	68d8      	ldr	r0, [r3, #12]
    87b2:	4b02      	ldr	r3, [pc, #8]	; (87bc <TC3_Handler+0x10>)
    87b4:	4798      	blx	r3
    87b6:	bd08      	pop	{r3, pc}
    87b8:	20000494 	.word	0x20000494
    87bc:	00008475 	.word	0x00008475

000087c0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    87c0:	2000      	movs	r0, #0
    87c2:	4770      	bx	lr

000087c4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    87c4:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    87c6:	7c83      	ldrb	r3, [r0, #18]
    87c8:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    87cc:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    87ce:	f002 0107 	and.w	r1, r2, #7
    87d2:	2901      	cmp	r1, #1
    87d4:	d00b      	beq.n	87ee <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    87d6:	015a      	lsls	r2, r3, #5
    87d8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    87dc:	2110      	movs	r1, #16
    87de:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    87e2:	015b      	lsls	r3, r3, #5
    87e4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    87e8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    87ec:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    87ee:	f012 0f40 	tst.w	r2, #64	; 0x40
    87f2:	d00c      	beq.n	880e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    87f4:	7cc2      	ldrb	r2, [r0, #19]
    87f6:	f36f 1286 	bfc	r2, #6, #1
    87fa:	74c2      	strb	r2, [r0, #19]
    87fc:	015a      	lsls	r2, r3, #5
    87fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8802:	2180      	movs	r1, #128	; 0x80
    8804:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8808:	2140      	movs	r1, #64	; 0x40
    880a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    880e:	7cc2      	ldrb	r2, [r0, #19]
    8810:	f36f 02c3 	bfc	r2, #3, #1
    8814:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    8816:	490a      	ldr	r1, [pc, #40]	; (8840 <_usb_d_dev_handle_setup+0x7c>)
    8818:	015a      	lsls	r2, r3, #5
    881a:	188c      	adds	r4, r1, r2
    881c:	2500      	movs	r5, #0
    881e:	72a5      	strb	r5, [r4, #10]
    8820:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8822:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    8826:	246f      	movs	r4, #111	; 0x6f
    8828:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    882c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8830:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    8834:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    8838:	7c80      	ldrb	r0, [r0, #18]
    883a:	4798      	blx	r3
    883c:	bd38      	pop	{r3, r4, r5, pc}
    883e:	bf00      	nop
    8840:	200004a4 	.word	0x200004a4

00008844 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8844:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8846:	2320      	movs	r3, #32
    8848:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    884c:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    884e:	7c83      	ldrb	r3, [r0, #18]
    8850:	f003 030f 	and.w	r3, r3, #15
    8854:	015b      	lsls	r3, r3, #5
    8856:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    885a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    885e:	4b04      	ldr	r3, [pc, #16]	; (8870 <_usb_d_dev_handle_stall+0x2c>)
    8860:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    8864:	6882      	ldr	r2, [r0, #8]
    8866:	2101      	movs	r1, #1
    8868:	7c80      	ldrb	r0, [r0, #18]
    886a:	4798      	blx	r3
    886c:	bd08      	pop	{r3, pc}
    886e:	bf00      	nop
    8870:	200004a4 	.word	0x200004a4

00008874 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    8874:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8876:	7c84      	ldrb	r4, [r0, #18]
    8878:	2cff      	cmp	r4, #255	; 0xff
    887a:	d003      	beq.n	8884 <_usb_d_dev_trans_done+0x10>
    887c:	7cc3      	ldrb	r3, [r0, #19]
    887e:	f013 0f40 	tst.w	r3, #64	; 0x40
    8882:	d100      	bne.n	8886 <_usb_d_dev_trans_done+0x12>
    8884:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    8886:	7cc2      	ldrb	r2, [r0, #19]
    8888:	f36f 1286 	bfc	r2, #6, #1
    888c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    888e:	4a03      	ldr	r2, [pc, #12]	; (889c <_usb_d_dev_trans_done+0x28>)
    8890:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    8894:	6882      	ldr	r2, [r0, #8]
    8896:	4620      	mov	r0, r4
    8898:	47a8      	blx	r5
    889a:	e7f3      	b.n	8884 <_usb_d_dev_trans_done+0x10>
    889c:	200004a4 	.word	0x200004a4

000088a0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    88a0:	b530      	push	{r4, r5, lr}
    88a2:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    88a4:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    88a6:	2425      	movs	r4, #37	; 0x25
    88a8:	f88d 4004 	strb.w	r4, [sp, #4]
    88ac:	244a      	movs	r4, #74	; 0x4a
    88ae:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    88b2:	2bff      	cmp	r3, #255	; 0xff
    88b4:	d01e      	beq.n	88f4 <_usb_d_dev_trans_stop+0x54>
    88b6:	7cc4      	ldrb	r4, [r0, #19]
    88b8:	f014 0f40 	tst.w	r4, #64	; 0x40
    88bc:	d01a      	beq.n	88f4 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    88be:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    88c2:	b1c9      	cbz	r1, 88f8 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    88c4:	0163      	lsls	r3, r4, #5
    88c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    88ca:	2580      	movs	r5, #128	; 0x80
    88cc:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    88d0:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    88d2:	a902      	add	r1, sp, #8
    88d4:	440b      	add	r3, r1
    88d6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    88da:	0163      	lsls	r3, r4, #5
    88dc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    88e0:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    88e4:	0163      	lsls	r3, r4, #5
    88e6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    88ea:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    88ee:	4611      	mov	r1, r2
    88f0:	4b05      	ldr	r3, [pc, #20]	; (8908 <_usb_d_dev_trans_stop+0x68>)
    88f2:	4798      	blx	r3
}
    88f4:	b003      	add	sp, #12
    88f6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    88f8:	0163      	lsls	r3, r4, #5
    88fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    88fe:	2540      	movs	r5, #64	; 0x40
    8900:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    8904:	e7e4      	b.n	88d0 <_usb_d_dev_trans_stop+0x30>
    8906:	bf00      	nop
    8908:	00008875 	.word	0x00008875

0000890c <_usb_d_dev_handle_trfail>:
{
    890c:	b530      	push	{r4, r5, lr}
    890e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8910:	7c83      	ldrb	r3, [r0, #18]
    8912:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    8916:	2204      	movs	r2, #4
    8918:	f88d 2004 	strb.w	r2, [sp, #4]
    891c:	2208      	movs	r2, #8
    891e:	f88d 2005 	strb.w	r2, [sp, #5]
    8922:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    8924:	460c      	mov	r4, r1
    8926:	b391      	cbz	r1, 898e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8928:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    892c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8930:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    8934:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    8938:	4a32      	ldr	r2, [pc, #200]	; (8a04 <_usb_d_dev_handle_trfail+0xf8>)
    893a:	440a      	add	r2, r1
    893c:	7a91      	ldrb	r1, [r2, #10]
    893e:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8940:	2d02      	cmp	r5, #2
    8942:	d02c      	beq.n	899e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    8944:	f011 0f02 	tst.w	r1, #2
    8948:	d045      	beq.n	89d6 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    894a:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    894c:	7a91      	ldrb	r1, [r2, #10]
    894e:	f36f 0141 	bfc	r1, #1, #1
    8952:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8954:	aa02      	add	r2, sp, #8
    8956:	4422      	add	r2, r4
    8958:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    895c:	015a      	lsls	r2, r3, #5
    895e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8962:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8966:	015b      	lsls	r3, r3, #5
    8968:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    896c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    8970:	f005 0307 	and.w	r3, r5, #7
    8974:	2b01      	cmp	r3, #1
    8976:	d143      	bne.n	8a00 <_usb_d_dev_handle_trfail+0xf4>
    8978:	7cc3      	ldrb	r3, [r0, #19]
    897a:	f013 0f40 	tst.w	r3, #64	; 0x40
    897e:	d03f      	beq.n	8a00 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8980:	09d9      	lsrs	r1, r3, #7
    8982:	428c      	cmp	r4, r1
    8984:	d03c      	beq.n	8a00 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8986:	2200      	movs	r2, #0
    8988:	4b1f      	ldr	r3, [pc, #124]	; (8a08 <_usb_d_dev_handle_trfail+0xfc>)
    898a:	4798      	blx	r3
    898c:	e038      	b.n	8a00 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    898e:	0159      	lsls	r1, r3, #5
    8990:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8994:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8998:	f005 0507 	and.w	r5, r5, #7
    899c:	e7ca      	b.n	8934 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    899e:	f011 0f01 	tst.w	r1, #1
    89a2:	d0cf      	beq.n	8944 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    89a4:	7a91      	ldrb	r1, [r2, #10]
    89a6:	f36f 0100 	bfc	r1, #0, #1
    89aa:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    89ac:	aa02      	add	r2, sp, #8
    89ae:	4422      	add	r2, r4
    89b0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    89b4:	015a      	lsls	r2, r3, #5
    89b6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    89ba:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    89be:	015b      	lsls	r3, r3, #5
    89c0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    89c4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    89c8:	2204      	movs	r2, #4
    89ca:	1c21      	adds	r1, r4, #0
    89cc:	bf18      	it	ne
    89ce:	2101      	movne	r1, #1
    89d0:	4b0d      	ldr	r3, [pc, #52]	; (8a08 <_usb_d_dev_handle_trfail+0xfc>)
    89d2:	4798      	blx	r3
    89d4:	e014      	b.n	8a00 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    89d6:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    89da:	4a0a      	ldr	r2, [pc, #40]	; (8a04 <_usb_d_dev_handle_trfail+0xf8>)
    89dc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    89e0:	2100      	movs	r1, #0
    89e2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    89e4:	aa02      	add	r2, sp, #8
    89e6:	4414      	add	r4, r2
    89e8:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    89ec:	015a      	lsls	r2, r3, #5
    89ee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    89f2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    89f6:	015b      	lsls	r3, r3, #5
    89f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    89fc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    8a00:	b003      	add	sp, #12
    8a02:	bd30      	pop	{r4, r5, pc}
    8a04:	200004a4 	.word	0x200004a4
    8a08:	000088a1 	.word	0x000088a1

00008a0c <_usb_d_dev_reset_epts>:
{
    8a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a10:	4d0c      	ldr	r5, [pc, #48]	; (8a44 <_usb_d_dev_reset_epts+0x38>)
    8a12:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    8a16:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8a1a:	f04f 0803 	mov.w	r8, #3
    8a1e:	4f0a      	ldr	r7, [pc, #40]	; (8a48 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    8a20:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8a22:	4641      	mov	r1, r8
    8a24:	4620      	mov	r0, r4
    8a26:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    8a28:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    8a2a:	2300      	movs	r3, #0
    8a2c:	74e3      	strb	r3, [r4, #19]
    8a2e:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8a30:	42ac      	cmp	r4, r5
    8a32:	d1f6      	bne.n	8a22 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    8a34:	22c0      	movs	r2, #192	; 0xc0
    8a36:	4619      	mov	r1, r3
    8a38:	4802      	ldr	r0, [pc, #8]	; (8a44 <_usb_d_dev_reset_epts+0x38>)
    8a3a:	4b04      	ldr	r3, [pc, #16]	; (8a4c <_usb_d_dev_reset_epts+0x40>)
    8a3c:	4798      	blx	r3
    8a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a42:	bf00      	nop
    8a44:	200004a4 	.word	0x200004a4
    8a48:	00008875 	.word	0x00008875
    8a4c:	0000aa7f 	.word	0x0000aa7f

00008a50 <_usb_d_dev_in_next>:
{
    8a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a54:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    8a56:	7c84      	ldrb	r4, [r0, #18]
    8a58:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8a5c:	4688      	mov	r8, r1
    8a5e:	2900      	cmp	r1, #0
    8a60:	f000 80a0 	beq.w	8ba4 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8a64:	4b58      	ldr	r3, [pc, #352]	; (8bc8 <_usb_d_dev_in_next+0x178>)
    8a66:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8a6a:	6958      	ldr	r0, [r3, #20]
    8a6c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8a70:	8a2b      	ldrh	r3, [r5, #16]
    8a72:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8a76:	4293      	cmp	r3, r2
    8a78:	f000 808e 	beq.w	8b98 <_usb_d_dev_in_next+0x148>
    8a7c:	3b01      	subs	r3, #1
    8a7e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8a80:	7cef      	ldrb	r7, [r5, #19]
    8a82:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    8a86:	f1b8 0f00 	cmp.w	r8, #0
    8a8a:	d005      	beq.n	8a98 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8a8c:	0162      	lsls	r2, r4, #5
    8a8e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8a92:	2302      	movs	r3, #2
    8a94:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    8a98:	68a9      	ldr	r1, [r5, #8]
    8a9a:	eb0e 0301 	add.w	r3, lr, r1
    8a9e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    8aa0:	686e      	ldr	r6, [r5, #4]
    8aa2:	42b3      	cmp	r3, r6
    8aa4:	d23f      	bcs.n	8b26 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    8aa6:	1af6      	subs	r6, r6, r3
    8aa8:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    8aaa:	7cea      	ldrb	r2, [r5, #19]
    8aac:	f012 0f20 	tst.w	r2, #32
    8ab0:	d02d      	beq.n	8b0e <_usb_d_dev_in_next+0xbe>
    8ab2:	8a2a      	ldrh	r2, [r5, #16]
    8ab4:	4296      	cmp	r6, r2
    8ab6:	bf28      	it	cs
    8ab8:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8aba:	6829      	ldr	r1, [r5, #0]
    8abc:	4632      	mov	r2, r6
    8abe:	4419      	add	r1, r3
    8ac0:	68e8      	ldr	r0, [r5, #12]
    8ac2:	4b42      	ldr	r3, [pc, #264]	; (8bcc <_usb_d_dev_in_next+0x17c>)
    8ac4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8ac6:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    8ac8:	4b3f      	ldr	r3, [pc, #252]	; (8bc8 <_usb_d_dev_in_next+0x178>)
    8aca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8ace:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8ad0:	4b3d      	ldr	r3, [pc, #244]	; (8bc8 <_usb_d_dev_in_next+0x178>)
    8ad2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8ad6:	695a      	ldr	r2, [r3, #20]
    8ad8:	f366 020d 	bfi	r2, r6, #0, #14
    8adc:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8ade:	695a      	ldr	r2, [r3, #20]
    8ae0:	f36f 329b 	bfc	r2, #14, #14
    8ae4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    8ae6:	f1b8 0f00 	cmp.w	r8, #0
    8aea:	d108      	bne.n	8afe <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    8aec:	2f01      	cmp	r7, #1
    8aee:	bf0c      	ite	eq
    8af0:	224e      	moveq	r2, #78	; 0x4e
    8af2:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8af4:	0163      	lsls	r3, r4, #5
    8af6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8afa:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8afe:	0164      	lsls	r4, r4, #5
    8b00:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8b04:	2380      	movs	r3, #128	; 0x80
    8b06:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    8b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b0e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    8b12:	bf28      	it	cs
    8b14:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8b18:	6829      	ldr	r1, [r5, #0]
    8b1a:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    8b1c:	4a2a      	ldr	r2, [pc, #168]	; (8bc8 <_usb_d_dev_in_next+0x178>)
    8b1e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    8b22:	6113      	str	r3, [r2, #16]
    8b24:	e7d4      	b.n	8ad0 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    8b26:	7ceb      	ldrb	r3, [r5, #19]
    8b28:	f013 0f10 	tst.w	r3, #16
    8b2c:	d00f      	beq.n	8b4e <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    8b2e:	7ceb      	ldrb	r3, [r5, #19]
    8b30:	f36f 1304 	bfc	r3, #4, #1
    8b34:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8b36:	4b24      	ldr	r3, [pc, #144]	; (8bc8 <_usb_d_dev_in_next+0x178>)
    8b38:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8b3c:	695a      	ldr	r2, [r3, #20]
    8b3e:	f36f 020d 	bfc	r2, #0, #14
    8b42:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8b44:	695a      	ldr	r2, [r3, #20]
    8b46:	f36f 329b 	bfc	r2, #14, #14
    8b4a:	615a      	str	r2, [r3, #20]
    8b4c:	e7cb      	b.n	8ae6 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    8b4e:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8b50:	ea4f 1444 	mov.w	r4, r4, lsl #5
    8b54:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8b58:	bf0c      	ite	eq
    8b5a:	234b      	moveq	r3, #75	; 0x4b
    8b5c:	234a      	movne	r3, #74	; 0x4a
    8b5e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    8b62:	8a2a      	ldrh	r2, [r5, #16]
    8b64:	ea00 030e 	and.w	r3, r0, lr
    8b68:	429a      	cmp	r2, r3
    8b6a:	d005      	beq.n	8b78 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8b6c:	2100      	movs	r1, #0
    8b6e:	4628      	mov	r0, r5
    8b70:	4b17      	ldr	r3, [pc, #92]	; (8bd0 <_usb_d_dev_in_next+0x180>)
    8b72:	4798      	blx	r3
	return;
    8b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    8b78:	7ceb      	ldrb	r3, [r5, #19]
    8b7a:	f36f 1386 	bfc	r3, #6, #1
    8b7e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8b80:	4b11      	ldr	r3, [pc, #68]	; (8bc8 <_usb_d_dev_in_next+0x178>)
    8b82:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    8b86:	68a9      	ldr	r1, [r5, #8]
    8b88:	7ca8      	ldrb	r0, [r5, #18]
    8b8a:	4798      	blx	r3
    8b8c:	b9d0      	cbnz	r0, 8bc4 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    8b8e:	7ceb      	ldrb	r3, [r5, #19]
    8b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8b94:	74eb      	strb	r3, [r5, #19]
    8b96:	e7e9      	b.n	8b6c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8b98:	7cef      	ldrb	r7, [r5, #19]
    8b9a:	f007 0707 	and.w	r7, r7, #7
    8b9e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8ba2:	e773      	b.n	8a8c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8ba4:	8a03      	ldrh	r3, [r0, #16]
    8ba6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8baa:	4293      	cmp	r3, r2
    8bac:	d107      	bne.n	8bbe <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8bae:	7cef      	ldrb	r7, [r5, #19]
    8bb0:	f007 0707 	and.w	r7, r7, #7
    8bb4:	f04f 0e00 	mov.w	lr, #0
    8bb8:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8bbc:	e76c      	b.n	8a98 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8bbe:	f04f 0e00 	mov.w	lr, #0
    8bc2:	e75b      	b.n	8a7c <_usb_d_dev_in_next+0x2c>
    8bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8bc8:	200004a4 	.word	0x200004a4
    8bcc:	0000aa69 	.word	0x0000aa69
    8bd0:	00008875 	.word	0x00008875

00008bd4 <_usb_d_dev_out_next>:
{
    8bd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bd8:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8bda:	7c85      	ldrb	r5, [r0, #18]
    8bdc:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8be0:	4689      	mov	r9, r1
    8be2:	2900      	cmp	r1, #0
    8be4:	d056      	beq.n	8c94 <_usb_d_dev_out_next+0xc0>
    8be6:	4b74      	ldr	r3, [pc, #464]	; (8db8 <_usb_d_dev_out_next+0x1e4>)
    8be8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8bec:	685a      	ldr	r2, [r3, #4]
    8bee:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8bf2:	685f      	ldr	r7, [r3, #4]
    8bf4:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8bf8:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8bfa:	8a06      	ldrh	r6, [r0, #16]
    8bfc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8c00:	429e      	cmp	r6, r3
    8c02:	f000 80ba 	beq.w	8d7a <_usb_d_dev_out_next+0x1a6>
    8c06:	3e01      	subs	r6, #1
    8c08:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    8c0a:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8c0e:	f894 8013 	ldrb.w	r8, [r4, #19]
    8c12:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    8c16:	f1b9 0f00 	cmp.w	r9, #0
    8c1a:	d005      	beq.n	8c28 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8c1c:	016b      	lsls	r3, r5, #5
    8c1e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8c22:	2201      	movs	r2, #1
    8c24:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8c28:	7ce3      	ldrb	r3, [r4, #19]
    8c2a:	f013 0f20 	tst.w	r3, #32
    8c2e:	d00d      	beq.n	8c4c <_usb_d_dev_out_next+0x78>
    8c30:	6862      	ldr	r2, [r4, #4]
    8c32:	2a00      	cmp	r2, #0
    8c34:	d037      	beq.n	8ca6 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8c36:	68a0      	ldr	r0, [r4, #8]
    8c38:	1a12      	subs	r2, r2, r0
    8c3a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8c3c:	6823      	ldr	r3, [r4, #0]
    8c3e:	42ba      	cmp	r2, r7
    8c40:	bf28      	it	cs
    8c42:	463a      	movcs	r2, r7
    8c44:	68e1      	ldr	r1, [r4, #12]
    8c46:	4418      	add	r0, r3
    8c48:	4b5c      	ldr	r3, [pc, #368]	; (8dbc <_usb_d_dev_out_next+0x1e8>)
    8c4a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8c4c:	6863      	ldr	r3, [r4, #4]
    8c4e:	b353      	cbz	r3, 8ca6 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    8c50:	f1b9 0f00 	cmp.w	r9, #0
    8c54:	d040      	beq.n	8cd8 <_usb_d_dev_out_next+0x104>
    8c56:	8a22      	ldrh	r2, [r4, #16]
    8c58:	42ba      	cmp	r2, r7
    8c5a:	d93d      	bls.n	8cd8 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    8c5c:	7ce3      	ldrb	r3, [r4, #19]
    8c5e:	f36f 1304 	bfc	r3, #4, #1
    8c62:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    8c64:	68a3      	ldr	r3, [r4, #8]
    8c66:	445b      	add	r3, fp
    8c68:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    8c6a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8c6e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    8c72:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8c76:	bf0c      	ite	eq
    8c78:	222d      	moveq	r2, #45	; 0x2d
    8c7a:	2225      	movne	r2, #37	; 0x25
    8c7c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    8c80:	b915      	cbnz	r5, 8c88 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8c82:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8c84:	4b4c      	ldr	r3, [pc, #304]	; (8db8 <_usb_d_dev_out_next+0x1e4>)
    8c86:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8c88:	2100      	movs	r1, #0
    8c8a:	4620      	mov	r0, r4
    8c8c:	4b4c      	ldr	r3, [pc, #304]	; (8dc0 <_usb_d_dev_out_next+0x1ec>)
    8c8e:	4798      	blx	r3
	return;
    8c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8c94:	8a06      	ldrh	r6, [r0, #16]
    8c96:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8c9a:	429e      	cmp	r6, r3
    8c9c:	d07b      	beq.n	8d96 <_usb_d_dev_out_next+0x1c2>
    8c9e:	f04f 0b00 	mov.w	fp, #0
    8ca2:	46da      	mov	sl, fp
    8ca4:	e7af      	b.n	8c06 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8ca6:	7ce3      	ldrb	r3, [r4, #19]
    8ca8:	f013 0f10 	tst.w	r3, #16
    8cac:	d06c      	beq.n	8d88 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    8cae:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8cb0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8cb4:	f043 0320 	orr.w	r3, r3, #32
    8cb8:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8cba:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8cbc:	493e      	ldr	r1, [pc, #248]	; (8db8 <_usb_d_dev_out_next+0x1e4>)
    8cbe:	016a      	lsls	r2, r5, #5
    8cc0:	188b      	adds	r3, r1, r2
    8cc2:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8cc4:	8a21      	ldrh	r1, [r4, #16]
    8cc6:	685a      	ldr	r2, [r3, #4]
    8cc8:	f361 329b 	bfi	r2, r1, #14, #14
    8ccc:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8cce:	685a      	ldr	r2, [r3, #4]
    8cd0:	f36f 020d 	bfc	r2, #0, #14
    8cd4:	605a      	str	r2, [r3, #4]
    8cd6:	e01d      	b.n	8d14 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8cd8:	68a2      	ldr	r2, [r4, #8]
    8cda:	4452      	add	r2, sl
    8cdc:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    8cde:	4293      	cmp	r3, r2
    8ce0:	d9c3      	bls.n	8c6a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    8ce2:	1a9b      	subs	r3, r3, r2
    8ce4:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    8ce6:	7ce1      	ldrb	r1, [r4, #19]
    8ce8:	f011 0f20 	tst.w	r1, #32
    8cec:	d026      	beq.n	8d3c <_usb_d_dev_out_next+0x168>
    8cee:	8a22      	ldrh	r2, [r4, #16]
    8cf0:	4293      	cmp	r3, r2
    8cf2:	bf28      	it	cs
    8cf4:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8cf6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8cf8:	016a      	lsls	r2, r5, #5
    8cfa:	492f      	ldr	r1, [pc, #188]	; (8db8 <_usb_d_dev_out_next+0x1e4>)
    8cfc:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8cfe:	4a2e      	ldr	r2, [pc, #184]	; (8db8 <_usb_d_dev_out_next+0x1e4>)
    8d00:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    8d04:	6851      	ldr	r1, [r2, #4]
    8d06:	f363 319b 	bfi	r1, r3, #14, #14
    8d0a:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8d0c:	6853      	ldr	r3, [r2, #4]
    8d0e:	f36f 030d 	bfc	r3, #0, #14
    8d12:	6053      	str	r3, [r2, #4]
	if (!isr) {
    8d14:	f1b9 0f00 	cmp.w	r9, #0
    8d18:	d108      	bne.n	8d2c <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    8d1a:	f1b8 0f01 	cmp.w	r8, #1
    8d1e:	d025      	beq.n	8d6c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    8d20:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8d22:	016b      	lsls	r3, r5, #5
    8d24:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8d28:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8d2c:	016d      	lsls	r5, r5, #5
    8d2e:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    8d32:	2340      	movs	r3, #64	; 0x40
    8d34:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    8d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    8d3c:	8a21      	ldrh	r1, [r4, #16]
    8d3e:	428b      	cmp	r3, r1
    8d40:	d90a      	bls.n	8d58 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8d46:	d80e      	bhi.n	8d66 <_usb_d_dev_out_next+0x192>
    8d48:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8d4c:	6821      	ldr	r1, [r4, #0]
    8d4e:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    8d50:	0169      	lsls	r1, r5, #5
    8d52:	4819      	ldr	r0, [pc, #100]	; (8db8 <_usb_d_dev_out_next+0x1e4>)
    8d54:	5042      	str	r2, [r0, r1]
    8d56:	e7d2      	b.n	8cfe <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    8d58:	428b      	cmp	r3, r1
    8d5a:	d2f7      	bcs.n	8d4c <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    8d5c:	7ce1      	ldrb	r1, [r4, #19]
    8d5e:	f041 0120 	orr.w	r1, r1, #32
    8d62:	74e1      	strb	r1, [r4, #19]
    8d64:	e7f2      	b.n	8d4c <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    8d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8d6a:	e7ef      	b.n	8d4c <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    8d6c:	4b12      	ldr	r3, [pc, #72]	; (8db8 <_usb_d_dev_out_next+0x1e4>)
    8d6e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8d72:	2200      	movs	r2, #0
    8d74:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8d76:	222d      	movs	r2, #45	; 0x2d
    8d78:	e7d3      	b.n	8d22 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    8d7a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8d7e:	f890 8013 	ldrb.w	r8, [r0, #19]
    8d82:	f008 0807 	and.w	r8, r8, #7
    8d86:	e749      	b.n	8c1c <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    8d88:	f1b9 0f00 	cmp.w	r9, #0
    8d8c:	d10b      	bne.n	8da6 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    8d8e:	68a3      	ldr	r3, [r4, #8]
    8d90:	4453      	add	r3, sl
    8d92:	60a3      	str	r3, [r4, #8]
    8d94:	e769      	b.n	8c6a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8d96:	f890 8013 	ldrb.w	r8, [r0, #19]
    8d9a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    8d9e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8da0:	46bb      	mov	fp, r7
    8da2:	46ba      	mov	sl, r7
    8da4:	e740      	b.n	8c28 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    8da6:	8a23      	ldrh	r3, [r4, #16]
    8da8:	42bb      	cmp	r3, r7
    8daa:	f63f af57 	bhi.w	8c5c <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    8dae:	68a3      	ldr	r3, [r4, #8]
    8db0:	4453      	add	r3, sl
    8db2:	60a3      	str	r3, [r4, #8]
    8db4:	e759      	b.n	8c6a <_usb_d_dev_out_next+0x96>
    8db6:	bf00      	nop
    8db8:	200004a4 	.word	0x200004a4
    8dbc:	0000aa69 	.word	0x0000aa69
    8dc0:	00008875 	.word	0x00008875

00008dc4 <_usb_d_dev_handler>:
{
    8dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8dc8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8dcc:	8c1e      	ldrh	r6, [r3, #32]
    8dce:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    8dd0:	b146      	cbz	r6, 8de4 <_usb_d_dev_handler+0x20>
    8dd2:	4d96      	ldr	r5, [pc, #600]	; (902c <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    8dd4:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8dd6:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    8dda:	f8df 926c 	ldr.w	r9, [pc, #620]	; 9048 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    8dde:	f8df 826c 	ldr.w	r8, [pc, #620]	; 904c <_usb_d_dev_handler+0x288>
    8de2:	e0de      	b.n	8fa2 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8de4:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8de6:	8b1b      	ldrh	r3, [r3, #24]
    8de8:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8dea:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8dec:	f013 0f04 	tst.w	r3, #4
    8df0:	d11e      	bne.n	8e30 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8df2:	f413 7f00 	tst.w	r3, #512	; 0x200
    8df6:	d125      	bne.n	8e44 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8df8:	f013 0f80 	tst.w	r3, #128	; 0x80
    8dfc:	d14f      	bne.n	8e9e <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8dfe:	f013 0f70 	tst.w	r3, #112	; 0x70
    8e02:	d158      	bne.n	8eb6 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8e04:	f013 0f08 	tst.w	r3, #8
    8e08:	d178      	bne.n	8efc <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8e0a:	f013 0f01 	tst.w	r3, #1
    8e0e:	d0e0      	beq.n	8dd2 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8e10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e14:	f240 2201 	movw	r2, #513	; 0x201
    8e18:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8e1a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8e1c:	2270      	movs	r2, #112	; 0x70
    8e1e:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8e20:	4b83      	ldr	r3, [pc, #524]	; (9030 <_usb_d_dev_handler+0x26c>)
    8e22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8e26:	2100      	movs	r1, #0
    8e28:	2004      	movs	r0, #4
    8e2a:	4798      	blx	r3
    8e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8e30:	2204      	movs	r2, #4
    8e32:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e36:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    8e38:	4b7d      	ldr	r3, [pc, #500]	; (9030 <_usb_d_dev_handler+0x26c>)
    8e3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    8e3e:	4798      	blx	r3
    8e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8e44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e48:	f240 2201 	movw	r2, #513	; 0x201
    8e4c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8e4e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8e50:	2270      	movs	r2, #112	; 0x70
    8e52:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8e54:	4b76      	ldr	r3, [pc, #472]	; (9030 <_usb_d_dev_handler+0x26c>)
    8e56:	891b      	ldrh	r3, [r3, #8]
    8e58:	f003 030f 	and.w	r3, r3, #15
    8e5c:	2b03      	cmp	r3, #3
    8e5e:	d014      	beq.n	8e8a <_usb_d_dev_handler+0xc6>
    8e60:	2301      	movs	r3, #1
    8e62:	4873      	ldr	r0, [pc, #460]	; (9030 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8e64:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8e66:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    8e6a:	8912      	ldrh	r2, [r2, #8]
    8e6c:	f002 020f 	and.w	r2, r2, #15
    8e70:	2a03      	cmp	r2, #3
    8e72:	d00b      	beq.n	8e8c <_usb_d_dev_handler+0xc8>
    8e74:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8e76:	2b05      	cmp	r3, #5
    8e78:	d1f4      	bne.n	8e64 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    8e7a:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8e7c:	4b6c      	ldr	r3, [pc, #432]	; (9030 <_usb_d_dev_handler+0x26c>)
    8e7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8e82:	2003      	movs	r0, #3
    8e84:	4798      	blx	r3
    8e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8e8a:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8e8c:	4b68      	ldr	r3, [pc, #416]	; (9030 <_usb_d_dev_handler+0x26c>)
    8e8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8e92:	8919      	ldrh	r1, [r3, #8]
    8e94:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    8e98:	2200      	movs	r2, #0
    8e9a:	811a      	strh	r2, [r3, #8]
    8e9c:	e7ee      	b.n	8e7c <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8e9e:	2280      	movs	r2, #128	; 0x80
    8ea0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ea4:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8ea6:	4b62      	ldr	r3, [pc, #392]	; (9030 <_usb_d_dev_handler+0x26c>)
    8ea8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8eac:	2100      	movs	r1, #0
    8eae:	2005      	movs	r0, #5
    8eb0:	4798      	blx	r3
    8eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8eb6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8eba:	2270      	movs	r2, #112	; 0x70
    8ebc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8ebe:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8ec0:	f240 2201 	movw	r2, #513	; 0x201
    8ec4:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8ec6:	4b5b      	ldr	r3, [pc, #364]	; (9034 <_usb_d_dev_handler+0x270>)
    8ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8ecc:	f013 0f01 	tst.w	r3, #1
    8ed0:	d00e      	beq.n	8ef0 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8ed2:	4a58      	ldr	r2, [pc, #352]	; (9034 <_usb_d_dev_handler+0x270>)
    8ed4:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    8ed6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8eda:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8ede:	d1f9      	bne.n	8ed4 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8ee0:	4b53      	ldr	r3, [pc, #332]	; (9030 <_usb_d_dev_handler+0x26c>)
    8ee2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8ee6:	2100      	movs	r1, #0
    8ee8:	2002      	movs	r0, #2
    8eea:	4798      	blx	r3
    8eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8ef0:	4a50      	ldr	r2, [pc, #320]	; (9034 <_usb_d_dev_handler+0x270>)
    8ef2:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8ef4:	f413 7f80 	tst.w	r3, #256	; 0x100
    8ef8:	d0fb      	beq.n	8ef2 <_usb_d_dev_handler+0x12e>
    8efa:	e7f1      	b.n	8ee0 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8efc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f00:	2400      	movs	r4, #0
    8f02:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8f06:	2208      	movs	r2, #8
    8f08:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8f0a:	2270      	movs	r2, #112	; 0x70
    8f0c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8f0e:	f240 2201 	movw	r2, #513	; 0x201
    8f12:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    8f14:	4b48      	ldr	r3, [pc, #288]	; (9038 <_usb_d_dev_handler+0x274>)
    8f16:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8f18:	4b45      	ldr	r3, [pc, #276]	; (9030 <_usb_d_dev_handler+0x26c>)
    8f1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8f1e:	4621      	mov	r1, r4
    8f20:	2001      	movs	r0, #1
    8f22:	4798      	blx	r3
    8f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8f28:	f011 0f10 	tst.w	r1, #16
    8f2c:	d109      	bne.n	8f42 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8f2e:	f011 0f40 	tst.w	r1, #64	; 0x40
    8f32:	d108      	bne.n	8f46 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8f34:	f011 0f20 	tst.w	r1, #32
    8f38:	d02f      	beq.n	8f9a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8f3a:	2100      	movs	r1, #0
    8f3c:	4b3f      	ldr	r3, [pc, #252]	; (903c <_usb_d_dev_handler+0x278>)
    8f3e:	4798      	blx	r3
    8f40:	e02b      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    8f42:	47c8      	blx	r9
    8f44:	e029      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8f46:	2101      	movs	r1, #1
    8f48:	4b3c      	ldr	r3, [pc, #240]	; (903c <_usb_d_dev_handler+0x278>)
    8f4a:	4798      	blx	r3
    8f4c:	e025      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8f4e:	f011 0f40 	tst.w	r1, #64	; 0x40
    8f52:	d111      	bne.n	8f78 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8f54:	f011 0f08 	tst.w	r1, #8
    8f58:	d112      	bne.n	8f80 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8f5a:	f011 0f02 	tst.w	r1, #2
    8f5e:	d112      	bne.n	8f86 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8f60:	f003 0307 	and.w	r3, r3, #7
    8f64:	2b01      	cmp	r3, #1
    8f66:	d118      	bne.n	8f9a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8f68:	f011 0f04 	tst.w	r1, #4
    8f6c:	d10f      	bne.n	8f8e <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8f6e:	f011 0f10 	tst.w	r1, #16
    8f72:	d012      	beq.n	8f9a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8f74:	47c8      	blx	r9
    8f76:	e010      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8f78:	2101      	movs	r1, #1
    8f7a:	4b30      	ldr	r3, [pc, #192]	; (903c <_usb_d_dev_handler+0x278>)
    8f7c:	4798      	blx	r3
    8f7e:	e00c      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    8f80:	2101      	movs	r1, #1
    8f82:	47c0      	blx	r8
    8f84:	e009      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8f86:	2101      	movs	r1, #1
    8f88:	4b2d      	ldr	r3, [pc, #180]	; (9040 <_usb_d_dev_handler+0x27c>)
    8f8a:	4798      	blx	r3
    8f8c:	e005      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    8f8e:	2100      	movs	r1, #0
    8f90:	47c0      	blx	r8
    8f92:	e002      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8f94:	2100      	movs	r1, #0
    8f96:	4b29      	ldr	r3, [pc, #164]	; (903c <_usb_d_dev_handler+0x278>)
    8f98:	4798      	blx	r3
    8f9a:	3401      	adds	r4, #1
    8f9c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8f9e:	2c1b      	cmp	r4, #27
    8fa0:	d042      	beq.n	9028 <_usb_d_dev_handler+0x264>
    8fa2:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8fa4:	7cab      	ldrb	r3, [r5, #18]
    8fa6:	2bff      	cmp	r3, #255	; 0xff
    8fa8:	d0f7      	beq.n	8f9a <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    8faa:	f003 030f 	and.w	r3, r3, #15
    8fae:	2101      	movs	r1, #1
    8fb0:	4099      	lsls	r1, r3
    8fb2:	4231      	tst	r1, r6
    8fb4:	d0f1      	beq.n	8f9a <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8fb6:	0159      	lsls	r1, r3, #5
    8fb8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8fbc:	f501 7180 	add.w	r1, r1, #256	; 0x100
    8fc0:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    8fc2:	015b      	lsls	r3, r3, #5
    8fc4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8fc8:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    8fcc:	4019      	ands	r1, r3
    8fce:	d0e4      	beq.n	8f9a <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8fd0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8fd4:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8fd8:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    8fdc:	f003 0247 	and.w	r2, r3, #71	; 0x47
    8fe0:	2a01      	cmp	r2, #1
    8fe2:	d0a1      	beq.n	8f28 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8fe4:	f013 0f80 	tst.w	r3, #128	; 0x80
    8fe8:	d1b1      	bne.n	8f4e <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8fea:	f011 0f20 	tst.w	r1, #32
    8fee:	d1d1      	bne.n	8f94 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8ff0:	f011 0f04 	tst.w	r1, #4
    8ff4:	d10e      	bne.n	9014 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8ff6:	f011 0f01 	tst.w	r1, #1
    8ffa:	d10e      	bne.n	901a <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8ffc:	f003 0307 	and.w	r3, r3, #7
    9000:	2b01      	cmp	r3, #1
    9002:	d1ca      	bne.n	8f9a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9004:	f011 0f08 	tst.w	r1, #8
    9008:	d10b      	bne.n	9022 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    900a:	f011 0f10 	tst.w	r1, #16
    900e:	d0c4      	beq.n	8f9a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    9010:	47c8      	blx	r9
    9012:	e7c2      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    9014:	2100      	movs	r1, #0
    9016:	47c0      	blx	r8
    9018:	e7bf      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    901a:	2101      	movs	r1, #1
    901c:	4b09      	ldr	r3, [pc, #36]	; (9044 <_usb_d_dev_handler+0x280>)
    901e:	4798      	blx	r3
    9020:	e7bb      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    9022:	2101      	movs	r1, #1
    9024:	47c0      	blx	r8
    9026:	e7b8      	b.n	8f9a <_usb_d_dev_handler+0x1d6>
    9028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    902c:	20000578 	.word	0x20000578
    9030:	200004a4 	.word	0x200004a4
    9034:	40001000 	.word	0x40001000
    9038:	00008a0d 	.word	0x00008a0d
    903c:	00008845 	.word	0x00008845
    9040:	00008a51 	.word	0x00008a51
    9044:	00008bd5 	.word	0x00008bd5
    9048:	000087c5 	.word	0x000087c5
    904c:	0000890d 	.word	0x0000890d

00009050 <_usb_d_dev_init>:
{
    9050:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    9052:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9056:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9058:	f013 0f01 	tst.w	r3, #1
    905c:	d124      	bne.n	90a8 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    905e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    9062:	7893      	ldrb	r3, [r2, #2]
    9064:	f013 0f03 	tst.w	r3, #3
    9068:	d1fb      	bne.n	9062 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    906a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    906e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9070:	f013 0f02 	tst.w	r3, #2
    9074:	d00f      	beq.n	9096 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9076:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    907a:	7813      	ldrb	r3, [r2, #0]
    907c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    9080:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9082:	7893      	ldrb	r3, [r2, #2]
    9084:	f013 0f03 	tst.w	r3, #3
    9088:	d1fb      	bne.n	9082 <_usb_d_dev_init+0x32>
    908a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    908e:	7893      	ldrb	r3, [r2, #2]
    9090:	f013 0f02 	tst.w	r3, #2
    9094:	d1fb      	bne.n	908e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9096:	2201      	movs	r2, #1
    9098:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    909c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    909e:	461a      	mov	r2, r3
    90a0:	7893      	ldrb	r3, [r2, #2]
    90a2:	f013 0f03 	tst.w	r3, #3
    90a6:	d1fb      	bne.n	90a0 <_usb_d_dev_init+0x50>
    90a8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    90ac:	7893      	ldrb	r3, [r2, #2]
    90ae:	f013 0f01 	tst.w	r3, #1
    90b2:	d1fb      	bne.n	90ac <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    90b4:	4b24      	ldr	r3, [pc, #144]	; (9148 <_usb_d_dev_init+0xf8>)
    90b6:	4a25      	ldr	r2, [pc, #148]	; (914c <_usb_d_dev_init+0xfc>)
    90b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    90bc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    90c0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    90c4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    90c8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    90cc:	4b20      	ldr	r3, [pc, #128]	; (9150 <_usb_d_dev_init+0x100>)
    90ce:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    90d0:	4b20      	ldr	r3, [pc, #128]	; (9154 <_usb_d_dev_init+0x104>)
    90d2:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    90d4:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    90d8:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    90dc:	f011 011f 	ands.w	r1, r1, #31
    90e0:	d02b      	beq.n	913a <_usb_d_dev_init+0xea>
		pad_transn = 9;
    90e2:	291f      	cmp	r1, #31
    90e4:	bf08      	it	eq
    90e6:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    90e8:	b34b      	cbz	r3, 913e <_usb_d_dev_init+0xee>
		pad_transp = 25;
    90ea:	2b1f      	cmp	r3, #31
    90ec:	bf08      	it	eq
    90ee:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    90f0:	b33a      	cbz	r2, 9142 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    90f2:	2a07      	cmp	r2, #7
    90f4:	bf08      	it	eq
    90f6:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    90f8:	f003 031f 	and.w	r3, r3, #31
    90fc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    9100:	0312      	lsls	r2, r2, #12
    9102:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    9106:	4313      	orrs	r3, r2
    9108:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    910c:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    910e:	78d3      	ldrb	r3, [r2, #3]
    9110:	f043 0303 	orr.w	r3, r3, #3
    9114:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    9116:	78d3      	ldrb	r3, [r2, #3]
    9118:	f043 030c 	orr.w	r3, r3, #12
    911c:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    911e:	2304      	movs	r3, #4
    9120:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9122:	7893      	ldrb	r3, [r2, #2]
    9124:	f013 0f03 	tst.w	r3, #3
    9128:	d1fb      	bne.n	9122 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    912a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    912e:	4a06      	ldr	r2, [pc, #24]	; (9148 <_usb_d_dev_init+0xf8>)
    9130:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    9132:	2201      	movs	r2, #1
    9134:	811a      	strh	r2, [r3, #8]
}
    9136:	2000      	movs	r0, #0
    9138:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    913a:	2109      	movs	r1, #9
    913c:	e7d4      	b.n	90e8 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    913e:	2319      	movs	r3, #25
    9140:	e7d6      	b.n	90f0 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    9142:	2206      	movs	r2, #6
    9144:	e7d8      	b.n	90f8 <_usb_d_dev_init+0xa8>
    9146:	bf00      	nop
    9148:	200004a4 	.word	0x200004a4
    914c:	000087c1 	.word	0x000087c1
    9150:	00008a0d 	.word	0x00008a0d
    9154:	00800084 	.word	0x00800084

00009158 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9158:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    915c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9160:	7298      	strb	r0, [r3, #10]
    9162:	4770      	bx	lr

00009164 <_usb_d_dev_ep_init>:
{
    9164:	b5f0      	push	{r4, r5, r6, r7, lr}
    9166:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    916a:	f010 050f 	ands.w	r5, r0, #15
    916e:	d04d      	beq.n	920c <_usb_d_dev_ep_init+0xa8>
    9170:	f1be 0f00 	cmp.w	lr, #0
    9174:	bfb4      	ite	lt
    9176:	1d6c      	addlt	r4, r5, #5
    9178:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    917a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    917e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    9180:	2d05      	cmp	r5, #5
    9182:	d947      	bls.n	9214 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    9184:	f06f 0011 	mvn.w	r0, #17
    9188:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    918a:	f1be 0f00 	cmp.w	lr, #0
    918e:	db1b      	blt.n	91c8 <_usb_d_dev_ep_init+0x64>
    9190:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9194:	4e37      	ldr	r6, [pc, #220]	; (9274 <_usb_d_dev_ep_init+0x110>)
    9196:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    919a:	2d00      	cmp	r5, #0
    919c:	d15e      	bne.n	925c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    919e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91a2:	4d34      	ldr	r5, [pc, #208]	; (9274 <_usb_d_dev_ep_init+0x110>)
    91a4:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    91a8:	4d33      	ldr	r5, [pc, #204]	; (9278 <_usb_d_dev_ep_init+0x114>)
    91aa:	00a6      	lsls	r6, r4, #2
    91ac:	1933      	adds	r3, r6, r4
    91ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    91b2:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    91b6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    91ba:	3101      	adds	r1, #1
    91bc:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    91c0:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    91c4:	2000      	movs	r0, #0
    91c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    91c8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    91cc:	4e29      	ldr	r6, [pc, #164]	; (9274 <_usb_d_dev_ep_init+0x110>)
    91ce:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    91d2:	686d      	ldr	r5, [r5, #4]
    91d4:	b935      	cbnz	r5, 91e4 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    91d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91da:	4d26      	ldr	r5, [pc, #152]	; (9274 <_usb_d_dev_ep_init+0x110>)
    91dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    91e0:	685f      	ldr	r7, [r3, #4]
    91e2:	e7e1      	b.n	91a8 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    91e4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    91e8:	4e22      	ldr	r6, [pc, #136]	; (9274 <_usb_d_dev_ep_init+0x110>)
    91ea:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    91ee:	896d      	ldrh	r5, [r5, #10]
    91f0:	4295      	cmp	r5, r2
    91f2:	daf0      	bge.n	91d6 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    91f4:	f06f 0012 	mvn.w	r0, #18
    91f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    91fa:	f06f 0013 	mvn.w	r0, #19
    91fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    9200:	f06f 0013 	mvn.w	r0, #19
    9204:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    9206:	f06f 0012 	mvn.w	r0, #18
    920a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    920c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    9210:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9212:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    9214:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    9218:	4f17      	ldr	r7, [pc, #92]	; (9278 <_usb_d_dev_ep_init+0x114>)
    921a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    921e:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    9222:	2eff      	cmp	r6, #255	; 0xff
    9224:	d1e9      	bne.n	91fa <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9226:	2900      	cmp	r1, #0
    9228:	d1af      	bne.n	918a <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    922a:	b125      	cbz	r5, 9236 <_usb_d_dev_ep_init+0xd2>
    922c:	f1be 0f00 	cmp.w	lr, #0
    9230:	bfa4      	itt	ge
    9232:	3505      	addge	r5, #5
    9234:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    9236:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    923a:	4e0f      	ldr	r6, [pc, #60]	; (9278 <_usb_d_dev_ep_init+0x114>)
    923c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9240:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    9244:	2dff      	cmp	r5, #255	; 0xff
    9246:	d1db      	bne.n	9200 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    9248:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    924c:	4e09      	ldr	r6, [pc, #36]	; (9274 <_usb_d_dev_ep_init+0x110>)
    924e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    9252:	2d00      	cmp	r5, #0
    9254:	d0d7      	beq.n	9206 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9256:	f1be 0f00 	cmp.w	lr, #0
    925a:	dbb5      	blt.n	91c8 <_usb_d_dev_ep_init+0x64>
    925c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9260:	4e04      	ldr	r6, [pc, #16]	; (9274 <_usb_d_dev_ep_init+0x110>)
    9262:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9266:	892d      	ldrh	r5, [r5, #8]
    9268:	4295      	cmp	r5, r2
    926a:	da98      	bge.n	919e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    926c:	f06f 0012 	mvn.w	r0, #18
    9270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9272:	bf00      	nop
    9274:	0000be1c 	.word	0x0000be1c
    9278:	200004a4 	.word	0x200004a4

0000927c <_usb_d_dev_ep_deinit>:
{
    927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    927e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9280:	f010 060f 	ands.w	r6, r0, #15
    9284:	d00e      	beq.n	92a4 <_usb_d_dev_ep_deinit+0x28>
    9286:	2f00      	cmp	r7, #0
    9288:	bfb4      	ite	lt
    928a:	1d73      	addlt	r3, r6, #5
    928c:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    928e:	2e05      	cmp	r6, #5
    9290:	d900      	bls.n	9294 <_usb_d_dev_ep_deinit+0x18>
    9292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    9294:	461d      	mov	r5, r3
    9296:	3301      	adds	r3, #1
    9298:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    929c:	4a24      	ldr	r2, [pc, #144]	; (9330 <_usb_d_dev_ep_deinit+0xb4>)
    929e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    92a2:	e002      	b.n	92aa <_usb_d_dev_ep_deinit+0x2e>
    92a4:	f8df e094 	ldr.w	lr, [pc, #148]	; 933c <_usb_d_dev_ep_deinit+0xc0>
    92a8:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    92aa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    92ae:	4a21      	ldr	r2, [pc, #132]	; (9334 <_usb_d_dev_ep_deinit+0xb8>)
    92b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    92b4:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    92b8:	2aff      	cmp	r2, #255	; 0xff
    92ba:	d0ea      	beq.n	9292 <_usb_d_dev_ep_deinit+0x16>
    92bc:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    92be:	2203      	movs	r2, #3
    92c0:	0ff9      	lsrs	r1, r7, #31
    92c2:	4670      	mov	r0, lr
    92c4:	4b1c      	ldr	r3, [pc, #112]	; (9338 <_usb_d_dev_ep_deinit+0xbc>)
    92c6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    92c8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    92cc:	4a19      	ldr	r2, [pc, #100]	; (9334 <_usb_d_dev_ep_deinit+0xb8>)
    92ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    92d2:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    92d6:	f003 0307 	and.w	r3, r3, #7
    92da:	2b01      	cmp	r3, #1
    92dc:	d016      	beq.n	930c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    92de:	2f00      	cmp	r7, #0
    92e0:	db1b      	blt.n	931a <_usb_d_dev_ep_deinit+0x9e>
    92e2:	0160      	lsls	r0, r4, #5
    92e4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    92e8:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    92ec:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    92f0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    92f4:	4b0f      	ldr	r3, [pc, #60]	; (9334 <_usb_d_dev_ep_deinit+0xb8>)
    92f6:	00aa      	lsls	r2, r5, #2
    92f8:	1951      	adds	r1, r2, r5
    92fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    92fe:	2000      	movs	r0, #0
    9300:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    9304:	22ff      	movs	r2, #255	; 0xff
    9306:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    930a:	e7c2      	b.n	9292 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    930c:	0160      	lsls	r0, r4, #5
    930e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    9312:	2300      	movs	r3, #0
    9314:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    9318:	e7ec      	b.n	92f4 <_usb_d_dev_ep_deinit+0x78>
    931a:	0176      	lsls	r6, r6, #5
    931c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9320:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    9324:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    9328:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    932c:	e7e2      	b.n	92f4 <_usb_d_dev_ep_deinit+0x78>
    932e:	bf00      	nop
    9330:	20000564 	.word	0x20000564
    9334:	200004a4 	.word	0x200004a4
    9338:	000088a1 	.word	0x000088a1
    933c:	20000578 	.word	0x20000578

00009340 <_usb_d_dev_ep_enable>:
{
    9340:	b4f0      	push	{r4, r5, r6, r7}
    9342:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9344:	f010 000f 	ands.w	r0, r0, #15
    9348:	f000 80a7 	beq.w	949a <_usb_d_dev_ep_enable+0x15a>
    934c:	2e00      	cmp	r6, #0
    934e:	bfb4      	ite	lt
    9350:	1d43      	addlt	r3, r0, #5
    9352:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9354:	4605      	mov	r5, r0
    9356:	0142      	lsls	r2, r0, #5
    9358:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    935c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    9360:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9362:	2805      	cmp	r0, #5
    9364:	f240 80a0 	bls.w	94a8 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    9368:	f06f 0011 	mvn.w	r0, #17
    936c:	e07d      	b.n	946a <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    936e:	f014 0f77 	tst.w	r4, #119	; 0x77
    9372:	f040 8089 	bne.w	9488 <_usb_d_dev_ep_enable+0x148>
    9376:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    937a:	2111      	movs	r1, #17
    937c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9380:	4c9b      	ldr	r4, [pc, #620]	; (95f0 <_usb_d_dev_ep_enable+0x2b0>)
    9382:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    9386:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    938a:	4c9a      	ldr	r4, [pc, #616]	; (95f4 <_usb_d_dev_ep_enable+0x2b4>)
    938c:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9390:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9394:	f200 80cd 	bhi.w	9532 <_usb_d_dev_ep_enable+0x1f2>
    9398:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    939c:	f200 8112 	bhi.w	95c4 <_usb_d_dev_ep_enable+0x284>
    93a0:	2980      	cmp	r1, #128	; 0x80
    93a2:	f200 8101 	bhi.w	95a8 <_usb_d_dev_ep_enable+0x268>
    93a6:	2940      	cmp	r1, #64	; 0x40
    93a8:	f200 8113 	bhi.w	95d2 <_usb_d_dev_ep_enable+0x292>
    93ac:	2920      	cmp	r1, #32
    93ae:	f200 8102 	bhi.w	95b6 <_usb_d_dev_ep_enable+0x276>
    93b2:	2910      	cmp	r1, #16
    93b4:	f200 8114 	bhi.w	95e0 <_usb_d_dev_ep_enable+0x2a0>
    93b8:	2908      	cmp	r1, #8
    93ba:	bf94      	ite	ls
    93bc:	2600      	movls	r6, #0
    93be:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93c0:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    93c4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93c6:	f3c1 010d 	ubfx	r1, r1, #0, #14
    93ca:	e0b8      	b.n	953e <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    93cc:	f014 0f70 	tst.w	r4, #112	; 0x70
    93d0:	d15d      	bne.n	948e <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    93d2:	4e87      	ldr	r6, [pc, #540]	; (95f0 <_usb_d_dev_ep_enable+0x2b0>)
    93d4:	009f      	lsls	r7, r3, #2
    93d6:	18f9      	adds	r1, r7, r3
    93d8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    93dc:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    93e0:	0109      	lsls	r1, r1, #4
    93e2:	f001 0170 	and.w	r1, r1, #112	; 0x70
    93e6:	430c      	orrs	r4, r1
    93e8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    93ec:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    93f0:	443b      	add	r3, r7
    93f2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    93f6:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    93fa:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    93fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9402:	d80f      	bhi.n	9424 <_usb_d_dev_ep_enable+0xe4>
    9404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9408:	d819      	bhi.n	943e <_usb_d_dev_ep_enable+0xfe>
    940a:	2b80      	cmp	r3, #128	; 0x80
    940c:	d819      	bhi.n	9442 <_usb_d_dev_ep_enable+0x102>
    940e:	2b40      	cmp	r3, #64	; 0x40
    9410:	d819      	bhi.n	9446 <_usb_d_dev_ep_enable+0x106>
    9412:	2b20      	cmp	r3, #32
    9414:	d819      	bhi.n	944a <_usb_d_dev_ep_enable+0x10a>
    9416:	2b10      	cmp	r3, #16
    9418:	d819      	bhi.n	944e <_usb_d_dev_ep_enable+0x10e>
    941a:	2b08      	cmp	r3, #8
    941c:	bf94      	ite	ls
    941e:	2300      	movls	r3, #0
    9420:	2301      	movhi	r3, #1
    9422:	e000      	b.n	9426 <_usb_d_dev_ep_enable+0xe6>
    9424:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9426:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    942a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    942c:	2380      	movs	r3, #128	; 0x80
    942e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    9432:	4b6f      	ldr	r3, [pc, #444]	; (95f0 <_usb_d_dev_ep_enable+0x2b0>)
    9434:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9438:	2000      	movs	r0, #0
    943a:	76a8      	strb	r0, [r5, #26]
    943c:	e015      	b.n	946a <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    943e:	2306      	movs	r3, #6
    9440:	e7f1      	b.n	9426 <_usb_d_dev_ep_enable+0xe6>
    9442:	2305      	movs	r3, #5
    9444:	e7ef      	b.n	9426 <_usb_d_dev_ep_enable+0xe6>
    9446:	2304      	movs	r3, #4
    9448:	e7ed      	b.n	9426 <_usb_d_dev_ep_enable+0xe6>
    944a:	2303      	movs	r3, #3
    944c:	e7eb      	b.n	9426 <_usb_d_dev_ep_enable+0xe6>
    944e:	2302      	movs	r3, #2
    9450:	e7e9      	b.n	9426 <_usb_d_dev_ep_enable+0xe6>
    9452:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9454:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9458:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    945a:	2340      	movs	r3, #64	; 0x40
    945c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    9460:	4b63      	ldr	r3, [pc, #396]	; (95f0 <_usb_d_dev_ep_enable+0x2b0>)
    9462:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9466:	2000      	movs	r0, #0
    9468:	72a8      	strb	r0, [r5, #10]
}
    946a:	bcf0      	pop	{r4, r5, r6, r7}
    946c:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    946e:	2106      	movs	r1, #6
    9470:	e7f0      	b.n	9454 <_usb_d_dev_ep_enable+0x114>
    9472:	2105      	movs	r1, #5
    9474:	e7ee      	b.n	9454 <_usb_d_dev_ep_enable+0x114>
    9476:	2104      	movs	r1, #4
    9478:	e7ec      	b.n	9454 <_usb_d_dev_ep_enable+0x114>
    947a:	2103      	movs	r1, #3
    947c:	e7ea      	b.n	9454 <_usb_d_dev_ep_enable+0x114>
    947e:	2102      	movs	r1, #2
    9480:	e7e8      	b.n	9454 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    9482:	f06f 0011 	mvn.w	r0, #17
    9486:	e7f0      	b.n	946a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9488:	f06f 0013 	mvn.w	r0, #19
    948c:	e7ed      	b.n	946a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    948e:	f06f 0013 	mvn.w	r0, #19
    9492:	e7ea      	b.n	946a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9494:	f06f 0013 	mvn.w	r0, #19
    9498:	e7e7      	b.n	946a <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    949a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    949e:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    94a2:	b2e4      	uxtb	r4, r4
    94a4:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    94a6:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    94a8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    94ac:	4950      	ldr	r1, [pc, #320]	; (95f0 <_usb_d_dev_ep_enable+0x2b0>)
    94ae:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    94b2:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    94b6:	2aff      	cmp	r2, #255	; 0xff
    94b8:	d0e3      	beq.n	9482 <_usb_d_dev_ep_enable+0x142>
    94ba:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    94bc:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    94be:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    94c2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    94c6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    94ca:	f001 0107 	and.w	r1, r1, #7
    94ce:	2901      	cmp	r1, #1
    94d0:	f43f af4d 	beq.w	936e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    94d4:	2e00      	cmp	r6, #0
    94d6:	f6ff af79 	blt.w	93cc <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    94da:	f014 0f07 	tst.w	r4, #7
    94de:	d1d9      	bne.n	9494 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    94e0:	4e43      	ldr	r6, [pc, #268]	; (95f0 <_usb_d_dev_ep_enable+0x2b0>)
    94e2:	009f      	lsls	r7, r3, #2
    94e4:	18f9      	adds	r1, r7, r3
    94e6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    94ea:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    94ee:	f001 0107 	and.w	r1, r1, #7
    94f2:	430c      	orrs	r4, r1
    94f4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    94f8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    94fc:	443b      	add	r3, r7
    94fe:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    9502:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    9506:	4b3b      	ldr	r3, [pc, #236]	; (95f4 <_usb_d_dev_ep_enable+0x2b4>)
    9508:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    950c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9510:	d89f      	bhi.n	9452 <_usb_d_dev_ep_enable+0x112>
    9512:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    9516:	d8aa      	bhi.n	946e <_usb_d_dev_ep_enable+0x12e>
    9518:	2980      	cmp	r1, #128	; 0x80
    951a:	d8aa      	bhi.n	9472 <_usb_d_dev_ep_enable+0x132>
    951c:	2940      	cmp	r1, #64	; 0x40
    951e:	d8aa      	bhi.n	9476 <_usb_d_dev_ep_enable+0x136>
    9520:	2920      	cmp	r1, #32
    9522:	d8aa      	bhi.n	947a <_usb_d_dev_ep_enable+0x13a>
    9524:	2910      	cmp	r1, #16
    9526:	d8aa      	bhi.n	947e <_usb_d_dev_ep_enable+0x13e>
    9528:	2908      	cmp	r1, #8
    952a:	bf94      	ite	ls
    952c:	2100      	movls	r1, #0
    952e:	2101      	movhi	r1, #1
    9530:	e790      	b.n	9454 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9532:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9536:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9538:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    953c:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    953e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    9542:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9544:	2640      	movs	r6, #64	; 0x40
    9546:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    954a:	2180      	movs	r1, #128	; 0x80
    954c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    9550:	4f27      	ldr	r7, [pc, #156]	; (95f0 <_usb_d_dev_ep_enable+0x2b0>)
    9552:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    9556:	2000      	movs	r0, #0
    9558:	72a8      	strb	r0, [r5, #10]
    955a:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    955c:	009c      	lsls	r4, r3, #2
    955e:	18e1      	adds	r1, r4, r3
    9560:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    9564:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    9568:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    956c:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    9570:	0152      	lsls	r2, r2, #5
    9572:	18b9      	adds	r1, r7, r2
    9574:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9576:	4423      	add	r3, r4
    9578:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    957c:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    9580:	684b      	ldr	r3, [r1, #4]
    9582:	f364 339b 	bfi	r3, r4, #14, #14
    9586:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9588:	684b      	ldr	r3, [r1, #4]
    958a:	f360 030d 	bfi	r3, r0, #0, #14
    958e:	604b      	str	r3, [r1, #4]
    9590:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    9594:	21b0      	movs	r1, #176	; 0xb0
    9596:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    959a:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    959e:	461a      	mov	r2, r3
    95a0:	2310      	movs	r3, #16
    95a2:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    95a6:	e760      	b.n	946a <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95a8:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    95ac:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95ae:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    95b2:	2605      	movs	r6, #5
    95b4:	e7c3      	b.n	953e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95b6:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    95ba:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95bc:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    95c0:	2603      	movs	r6, #3
    95c2:	e7bc      	b.n	953e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95c4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    95c8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95ca:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    95ce:	2606      	movs	r6, #6
    95d0:	e7b5      	b.n	953e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95d2:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    95d6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95d8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    95dc:	2604      	movs	r6, #4
    95de:	e7ae      	b.n	953e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95e0:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    95e4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    95e6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    95ea:	2602      	movs	r6, #2
    95ec:	e7a7      	b.n	953e <_usb_d_dev_ep_enable+0x1fe>
    95ee:	bf00      	nop
    95f0:	200004a4 	.word	0x200004a4
    95f4:	0fffc000 	.word	0x0fffc000

000095f8 <_usb_d_dev_ep_stall>:
{
    95f8:	b470      	push	{r4, r5, r6}
    95fa:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    95fc:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    95fe:	f010 000f 	ands.w	r0, r0, #15
    9602:	d008      	beq.n	9616 <_usb_d_dev_ep_stall+0x1e>
    9604:	2b00      	cmp	r3, #0
    9606:	bfb4      	ite	lt
    9608:	1d43      	addlt	r3, r0, #5
    960a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    960c:	2805      	cmp	r0, #5
    960e:	d903      	bls.n	9618 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    9610:	f06f 0011 	mvn.w	r0, #17
    9614:	e018      	b.n	9648 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    9616:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    9618:	2901      	cmp	r1, #1
    961a:	d017      	beq.n	964c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    961c:	2900      	cmp	r1, #0
    961e:	d03a      	beq.n	9696 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9620:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9624:	4a45      	ldr	r2, [pc, #276]	; (973c <_usb_d_dev_ep_stall+0x144>)
    9626:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    962a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    962e:	f003 030f 	and.w	r3, r3, #15
    9632:	015b      	lsls	r3, r3, #5
    9634:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9638:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    963c:	2310      	movs	r3, #16
    963e:	40a3      	lsls	r3, r4
    9640:	421a      	tst	r2, r3
    9642:	bf14      	ite	ne
    9644:	2001      	movne	r0, #1
    9646:	2000      	moveq	r0, #0
}
    9648:	bc70      	pop	{r4, r5, r6}
    964a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    964c:	2510      	movs	r5, #16
    964e:	40a5      	lsls	r5, r4
    9650:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9652:	493a      	ldr	r1, [pc, #232]	; (973c <_usb_d_dev_ep_stall+0x144>)
    9654:	009e      	lsls	r6, r3, #2
    9656:	18f2      	adds	r2, r6, r3
    9658:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    965c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9660:	f002 020f 	and.w	r2, r2, #15
    9664:	0150      	lsls	r0, r2, #5
    9666:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    966a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    966e:	2020      	movs	r0, #32
    9670:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9674:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9676:	0152      	lsls	r2, r2, #5
    9678:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    967c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    9680:	4433      	add	r3, r6
    9682:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9686:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    968a:	f042 0208 	orr.w	r2, r2, #8
    968e:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9692:	2000      	movs	r0, #0
    9694:	e7d8      	b.n	9648 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9696:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    969a:	4928      	ldr	r1, [pc, #160]	; (973c <_usb_d_dev_ep_stall+0x144>)
    969c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    96a0:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    96a4:	f002 020f 	and.w	r2, r2, #15
    96a8:	0151      	lsls	r1, r2, #5
    96aa:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    96ae:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    96b2:	2010      	movs	r0, #16
    96b4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    96b6:	4205      	tst	r5, r0
    96b8:	d03c      	beq.n	9734 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    96ba:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    96bc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    96c0:	2020      	movs	r0, #32
    96c2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    96c4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    96c6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    96ca:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    96ce:	4202      	tst	r2, r0
    96d0:	d007      	beq.n	96e2 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    96d2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    96d6:	2201      	movs	r2, #1
    96d8:	fa02 f404 	lsl.w	r4, r2, r4
    96dc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    96de:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    96e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    96e6:	4815      	ldr	r0, [pc, #84]	; (973c <_usb_d_dev_ep_stall+0x144>)
    96e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    96ec:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    96f0:	f002 0207 	and.w	r2, r2, #7
    96f4:	2a01      	cmp	r2, #1
    96f6:	d00c      	beq.n	9712 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    96f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    96fc:	4a0f      	ldr	r2, [pc, #60]	; (973c <_usb_d_dev_ep_stall+0x144>)
    96fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9702:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9706:	f36f 02c3 	bfc	r2, #3, #1
    970a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    970e:	2000      	movs	r0, #0
    9710:	e79a      	b.n	9648 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9712:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9716:	f012 0f30 	tst.w	r2, #48	; 0x30
    971a:	d10d      	bne.n	9738 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    971c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9720:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9724:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9728:	f36f 02c3 	bfc	r2, #3, #1
    972c:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9730:	2000      	movs	r0, #0
    9732:	e789      	b.n	9648 <_usb_d_dev_ep_stall+0x50>
    9734:	2000      	movs	r0, #0
    9736:	e787      	b.n	9648 <_usb_d_dev_ep_stall+0x50>
    9738:	2000      	movs	r0, #0
    973a:	e785      	b.n	9648 <_usb_d_dev_ep_stall+0x50>
    973c:	200004a4 	.word	0x200004a4

00009740 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9740:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    9742:	f000 040f 	and.w	r4, r0, #15
    9746:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9748:	4a14      	ldr	r2, [pc, #80]	; (979c <_usb_d_dev_ep_read_req+0x5c>)
    974a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    974c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    974e:	6840      	ldr	r0, [r0, #4]
    9750:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9754:	2c05      	cmp	r4, #5
    9756:	d817      	bhi.n	9788 <_usb_d_dev_ep_read_req+0x48>
    9758:	b1c9      	cbz	r1, 978e <_usb_d_dev_ep_read_req+0x4e>
    975a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    975e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    9762:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9764:	2a11      	cmp	r2, #17
    9766:	d115      	bne.n	9794 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9768:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    976c:	f012 0f10 	tst.w	r2, #16
    9770:	d102      	bne.n	9778 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    9772:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    9774:	bc30      	pop	{r4, r5}
    9776:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    9778:	682c      	ldr	r4, [r5, #0]
    977a:	686a      	ldr	r2, [r5, #4]
    977c:	600c      	str	r4, [r1, #0]
    977e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9780:	2210      	movs	r2, #16
    9782:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    9786:	e7f5      	b.n	9774 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    9788:	f06f 0011 	mvn.w	r0, #17
    978c:	e7f2      	b.n	9774 <_usb_d_dev_ep_read_req+0x34>
    978e:	f06f 0011 	mvn.w	r0, #17
    9792:	e7ef      	b.n	9774 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    9794:	f06f 0012 	mvn.w	r0, #18
    9798:	e7ec      	b.n	9774 <_usb_d_dev_ep_read_req+0x34>
    979a:	bf00      	nop
    979c:	200004a4 	.word	0x200004a4

000097a0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    97a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97a4:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    97a6:	7a03      	ldrb	r3, [r0, #8]
    97a8:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    97aa:	f013 030f 	ands.w	r3, r3, #15
    97ae:	f000 80c2 	beq.w	9936 <_usb_d_dev_ep_trans+0x196>
    97b2:	2e00      	cmp	r6, #0
    97b4:	bfb4      	ite	lt
    97b6:	1d5a      	addlt	r2, r3, #5
    97b8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    97ba:	4614      	mov	r4, r2
    97bc:	4969      	ldr	r1, [pc, #420]	; (9964 <_usb_d_dev_ep_trans+0x1c4>)
    97be:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    97c2:	1c55      	adds	r5, r2, #1
    97c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    97c8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    97cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    97d0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    97d4:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    97d8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    97dc:	428a      	cmp	r2, r1
    97de:	d025      	beq.n	982c <_usb_d_dev_ep_trans+0x8c>
    97e0:	1e55      	subs	r5, r2, #1
    97e2:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    97e4:	6841      	ldr	r1, [r0, #4]
    97e6:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    97e8:	2b05      	cmp	r3, #5
    97ea:	f200 8092 	bhi.w	9912 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    97ee:	6803      	ldr	r3, [r0, #0]
    97f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    97f4:	d31c      	bcc.n	9830 <_usb_d_dev_ep_trans+0x90>
    97f6:	eb03 0c01 	add.w	ip, r3, r1
    97fa:	f8df e180 	ldr.w	lr, [pc, #384]	; 997c <_usb_d_dev_ep_trans+0x1dc>
    97fe:	45f4      	cmp	ip, lr
    9800:	d816      	bhi.n	9830 <_usb_d_dev_ep_trans+0x90>
    9802:	f013 0f03 	tst.w	r3, #3
    9806:	d113      	bne.n	9830 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    9808:	2e00      	cmp	r6, #0
    980a:	db2a      	blt.n	9862 <_usb_d_dev_ep_trans+0xc2>
    980c:	428a      	cmp	r2, r1
    980e:	f200 809c 	bhi.w	994a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    9812:	b34d      	cbz	r5, 9868 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    9814:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9818:	4a52      	ldr	r2, [pc, #328]	; (9964 <_usb_d_dev_ep_trans+0x1c4>)
    981a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    981e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9822:	2b00      	cmp	r3, #0
    9824:	d07b      	beq.n	991e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    9826:	f04f 0800 	mov.w	r8, #0
    982a:	e00c      	b.n	9846 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    982c:	4615      	mov	r5, r2
    982e:	e7d9      	b.n	97e4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    9830:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9834:	4a4b      	ldr	r2, [pc, #300]	; (9964 <_usb_d_dev_ep_trans+0x1c4>)
    9836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    983a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    983e:	2b00      	cmp	r3, #0
    9840:	d06a      	beq.n	9918 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    9842:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9846:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    984a:	4a46      	ldr	r2, [pc, #280]	; (9964 <_usb_d_dev_ep_trans+0x1c4>)
    984c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9850:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9854:	f013 0f08 	tst.w	r3, #8
    9858:	d009      	beq.n	986e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    985a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    985c:	b003      	add	sp, #12
    985e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    9862:	f04f 0800 	mov.w	r8, #0
    9866:	e7ee      	b.n	9846 <_usb_d_dev_ep_trans+0xa6>
    9868:	f04f 0800 	mov.w	r8, #0
    986c:	e7eb      	b.n	9846 <_usb_d_dev_ep_trans+0xa6>
    986e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    9870:	a801      	add	r0, sp, #4
    9872:	4b3d      	ldr	r3, [pc, #244]	; (9968 <_usb_d_dev_ep_trans+0x1c8>)
    9874:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9876:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    987a:	4a3a      	ldr	r2, [pc, #232]	; (9964 <_usb_d_dev_ep_trans+0x1c4>)
    987c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9880:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9884:	f013 0f40 	tst.w	r3, #64	; 0x40
    9888:	d13c      	bne.n	9904 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    988a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    988e:	4b35      	ldr	r3, [pc, #212]	; (9964 <_usb_d_dev_ep_trans+0x1c4>)
    9890:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    9894:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    9898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    989c:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    98a0:	a801      	add	r0, sp, #4
    98a2:	4b32      	ldr	r3, [pc, #200]	; (996c <_usb_d_dev_ep_trans+0x1cc>)
    98a4:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    98a6:	f8da 3000 	ldr.w	r3, [sl]
    98aa:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    98ae:	f8da 3004 	ldr.w	r3, [sl, #4]
    98b2:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    98b6:	2300      	movs	r3, #0
    98b8:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    98bc:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    98be:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    98c2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    98c6:	f368 1345 	bfi	r3, r8, #5, #1
    98ca:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    98ce:	f89a 3009 	ldrb.w	r3, [sl, #9]
    98d2:	b1e3      	cbz	r3, 990e <_usb_d_dev_ep_trans+0x16e>
    98d4:	fab5 f585 	clz	r5, r5
    98d8:	096d      	lsrs	r5, r5, #5
    98da:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    98de:	4b21      	ldr	r3, [pc, #132]	; (9964 <_usb_d_dev_ep_trans+0x1c4>)
    98e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    98e4:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    98e8:	f365 1304 	bfi	r3, r5, #4, #1
    98ec:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    98f0:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    98f2:	f04f 0100 	mov.w	r1, #0
    98f6:	4638      	mov	r0, r7
    98f8:	bfb4      	ite	lt
    98fa:	4b1d      	ldrlt	r3, [pc, #116]	; (9970 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    98fc:	4b1d      	ldrge	r3, [pc, #116]	; (9974 <_usb_d_dev_ep_trans+0x1d4>)
    98fe:	4798      	blx	r3
	return ERR_NONE;
    9900:	2000      	movs	r0, #0
    9902:	e7ab      	b.n	985c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    9904:	a801      	add	r0, sp, #4
    9906:	4b19      	ldr	r3, [pc, #100]	; (996c <_usb_d_dev_ep_trans+0x1cc>)
    9908:	4798      	blx	r3
		return USB_BUSY;
    990a:	2001      	movs	r0, #1
    990c:	e7a6      	b.n	985c <_usb_d_dev_ep_trans+0xbc>
    990e:	2500      	movs	r5, #0
    9910:	e7e3      	b.n	98da <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    9912:	f06f 0011 	mvn.w	r0, #17
    9916:	e7a1      	b.n	985c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9918:	f06f 0012 	mvn.w	r0, #18
    991c:	e79e      	b.n	985c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    991e:	f06f 0011 	mvn.w	r0, #17
    9922:	e79b      	b.n	985c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9924:	f06f 0012 	mvn.w	r0, #18
    9928:	e798      	b.n	985c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    992a:	6841      	ldr	r1, [r0, #4]
    992c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    9930:	4f11      	ldr	r7, [pc, #68]	; (9978 <_usb_d_dev_ep_trans+0x1d8>)
    9932:	2400      	movs	r4, #0
    9934:	e75b      	b.n	97ee <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9936:	4a0b      	ldr	r2, [pc, #44]	; (9964 <_usb_d_dev_ep_trans+0x1c4>)
    9938:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    993c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9940:	428a      	cmp	r2, r1
    9942:	d0f2      	beq.n	992a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    9944:	4f0c      	ldr	r7, [pc, #48]	; (9978 <_usb_d_dev_ep_trans+0x1d8>)
    9946:	2400      	movs	r4, #0
    9948:	e74a      	b.n	97e0 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    994a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    994e:	4a05      	ldr	r2, [pc, #20]	; (9964 <_usb_d_dev_ep_trans+0x1c4>)
    9950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9958:	2b00      	cmp	r3, #0
    995a:	d0e3      	beq.n	9924 <_usb_d_dev_ep_trans+0x184>
    995c:	f04f 0801 	mov.w	r8, #1
    9960:	e771      	b.n	9846 <_usb_d_dev_ep_trans+0xa6>
    9962:	bf00      	nop
    9964:	200004a4 	.word	0x200004a4
    9968:	00005b69 	.word	0x00005b69
    996c:	00005b77 	.word	0x00005b77
    9970:	00008a51 	.word	0x00008a51
    9974:	00008bd5 	.word	0x00008bd5
    9978:	20000578 	.word	0x20000578
    997c:	20041fff 	.word	0x20041fff

00009980 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9980:	4b07      	ldr	r3, [pc, #28]	; (99a0 <_usb_d_dev_register_callback+0x20>)
    9982:	2900      	cmp	r1, #0
    9984:	bf08      	it	eq
    9986:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    9988:	2801      	cmp	r0, #1
    998a:	d004      	beq.n	9996 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    998c:	b910      	cbnz	r0, 9994 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    998e:	4b05      	ldr	r3, [pc, #20]	; (99a4 <_usb_d_dev_register_callback+0x24>)
    9990:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    9994:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    9996:	4b03      	ldr	r3, [pc, #12]	; (99a4 <_usb_d_dev_register_callback+0x24>)
    9998:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    999c:	4770      	bx	lr
    999e:	bf00      	nop
    99a0:	000087c1 	.word	0x000087c1
    99a4:	200004a4 	.word	0x200004a4

000099a8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    99a8:	4b0a      	ldr	r3, [pc, #40]	; (99d4 <_usb_d_dev_register_ep_callback+0x2c>)
    99aa:	2900      	cmp	r1, #0
    99ac:	bf08      	it	eq
    99ae:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    99b0:	4603      	mov	r3, r0
    99b2:	b138      	cbz	r0, 99c4 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    99b4:	2801      	cmp	r0, #1
    99b6:	d009      	beq.n	99cc <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    99b8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    99ba:	bf04      	itt	eq
    99bc:	4b06      	ldreq	r3, [pc, #24]	; (99d8 <_usb_d_dev_register_ep_callback+0x30>)
    99be:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    99c2:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    99c4:	4b04      	ldr	r3, [pc, #16]	; (99d8 <_usb_d_dev_register_ep_callback+0x30>)
    99c6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    99ca:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    99cc:	4b02      	ldr	r3, [pc, #8]	; (99d8 <_usb_d_dev_register_ep_callback+0x30>)
    99ce:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    99d2:	4770      	bx	lr
    99d4:	000087c1 	.word	0x000087c1
    99d8:	200004a4 	.word	0x200004a4

000099dc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    99dc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    99de:	4b01      	ldr	r3, [pc, #4]	; (99e4 <USB_0_Handler+0x8>)
    99e0:	4798      	blx	r3
    99e2:	bd08      	pop	{r3, pc}
    99e4:	00008dc5 	.word	0x00008dc5

000099e8 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    99e8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    99ea:	4b01      	ldr	r3, [pc, #4]	; (99f0 <USB_1_Handler+0x8>)
    99ec:	4798      	blx	r3
    99ee:	bd08      	pop	{r3, pc}
    99f0:	00008dc5 	.word	0x00008dc5

000099f4 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    99f4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    99f6:	4b01      	ldr	r3, [pc, #4]	; (99fc <USB_2_Handler+0x8>)
    99f8:	4798      	blx	r3
    99fa:	bd08      	pop	{r3, pc}
    99fc:	00008dc5 	.word	0x00008dc5

00009a00 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    9a00:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9a02:	4b01      	ldr	r3, [pc, #4]	; (9a08 <USB_3_Handler+0x8>)
    9a04:	4798      	blx	r3
    9a06:	bd08      	pop	{r3, pc}
    9a08:	00008dc5 	.word	0x00008dc5

00009a0c <_wdt_init>:
int32_t _wdt_init(struct wdt_dev *const dev)
{
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    9a0c:	6803      	ldr	r3, [r0, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9a0e:	689a      	ldr	r2, [r3, #8]
    9a10:	f012 0f0e 	tst.w	r2, #14
    9a14:	d1fb      	bne.n	9a0e <_wdt_init+0x2>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9a16:	781a      	ldrb	r2, [r3, #0]
    9a18:	09d2      	lsrs	r2, r2, #7
    9a1a:	d118      	bne.n	9a4e <_wdt_init+0x42>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9a1c:	689a      	ldr	r2, [r3, #8]
    9a1e:	f012 0f0e 	tst.w	r2, #14
    9a22:	d1fb      	bne.n	9a1c <_wdt_init+0x10>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9a24:	781a      	ldrb	r2, [r3, #0]
    9a26:	f012 0f02 	tst.w	r2, #2
    9a2a:	d113      	bne.n	9a54 <_wdt_init+0x48>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    9a2c:	781a      	ldrb	r2, [r3, #0]
    9a2e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    9a32:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9a34:	689a      	ldr	r2, [r3, #8]
    9a36:	f012 0f0e 	tst.w	r2, #14
    9a3a:	d1fb      	bne.n	9a34 <_wdt_init+0x28>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    9a3c:	6802      	ldr	r2, [r0, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9a3e:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    9a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    9a44:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    9a48:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    9a4a:	2000      	movs	r0, #0
    9a4c:	4770      	bx	lr
		return ERR_DENIED;
    9a4e:	f06f 0010 	mvn.w	r0, #16
    9a52:	4770      	bx	lr
    9a54:	f06f 0010 	mvn.w	r0, #16
}
    9a58:	4770      	bx	lr
	...

00009a5c <main>:




int main(void)
{
    9a5c:	b508      	push	{r3, lr}

	atmel_start_init();	
    9a5e:	4b08      	ldr	r3, [pc, #32]	; (9a80 <main+0x24>)
    9a60:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    9a62:	4d08      	ldr	r5, [pc, #32]	; (9a84 <main+0x28>)
    9a64:	4908      	ldr	r1, [pc, #32]	; (9a88 <main+0x2c>)
    9a66:	4628      	mov	r0, r5
    9a68:	4c08      	ldr	r4, [pc, #32]	; (9a8c <main+0x30>)
    9a6a:	47a0      	blx	r4
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Unknow Reset Source");
    9a6c:	4908      	ldr	r1, [pc, #32]	; (9a90 <main+0x34>)
    9a6e:	4628      	mov	r0, r5
    9a70:	47a0      	blx	r4
		{
		}
		
	#else	
	
		GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    9a72:	4908      	ldr	r1, [pc, #32]	; (9a94 <main+0x38>)
    9a74:	4808      	ldr	r0, [pc, #32]	; (9a98 <main+0x3c>)
    9a76:	47a0      	blx	r4
	
	#ifdef HARDWARETEST
	
		#include "grid/grid_hardwaretest.h"
		
		grid_hardwaretest_main();
    9a78:	4b08      	ldr	r3, [pc, #32]	; (9a9c <main+0x40>)
    9a7a:	4798      	blx	r3
    9a7c:	e7fe      	b.n	9a7c <main+0x20>
    9a7e:	bf00      	nop
    9a80:	000042d1 	.word	0x000042d1
    9a84:	0000c0d8 	.word	0x0000c0d8
    9a88:	0000c0c4 	.word	0x0000c0c4
    9a8c:	0000abe9 	.word	0x0000abe9
    9a90:	0000c0fc 	.word	0x0000c0fc
    9a94:	0000c110 	.word	0x0000c110
    9a98:	0000be88 	.word	0x0000be88
    9a9c:	000054e9 	.word	0x000054e9

00009aa0 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    9aa0:	b940      	cbnz	r0, 9ab4 <_read+0x14>
{
    9aa2:	b508      	push	{r3, lr}
    9aa4:	460b      	mov	r3, r1
    9aa6:	4611      	mov	r1, r2
    9aa8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    9aaa:	4b04      	ldr	r3, [pc, #16]	; (9abc <_read+0x1c>)
    9aac:	4798      	blx	r3
    9aae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9ab2:	bd08      	pop	{r3, pc}
		return -1;
    9ab4:	f04f 30ff 	mov.w	r0, #4294967295
    9ab8:	4770      	bx	lr
    9aba:	bf00      	nop
    9abc:	00009b11 	.word	0x00009b11

00009ac0 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    9ac0:	3801      	subs	r0, #1
    9ac2:	2802      	cmp	r0, #2
    9ac4:	d808      	bhi.n	9ad8 <_write+0x18>
{
    9ac6:	b508      	push	{r3, lr}
    9ac8:	460b      	mov	r3, r1
    9aca:	4611      	mov	r1, r2
    9acc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    9ace:	4b04      	ldr	r3, [pc, #16]	; (9ae0 <_write+0x20>)
    9ad0:	4798      	blx	r3
    9ad2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9ad6:	bd08      	pop	{r3, pc}
		return -1;
    9ad8:	f04f 30ff 	mov.w	r0, #4294967295
    9adc:	4770      	bx	lr
    9ade:	bf00      	nop
    9ae0:	00009b35 	.word	0x00009b35

00009ae4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    9ae4:	b570      	push	{r4, r5, r6, lr}
    9ae6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    9ae8:	4d06      	ldr	r5, [pc, #24]	; (9b04 <stdio_io_init+0x20>)
    9aea:	682b      	ldr	r3, [r5, #0]
    9aec:	2100      	movs	r1, #0
    9aee:	6898      	ldr	r0, [r3, #8]
    9af0:	4c05      	ldr	r4, [pc, #20]	; (9b08 <stdio_io_init+0x24>)
    9af2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    9af4:	682b      	ldr	r3, [r5, #0]
    9af6:	2100      	movs	r1, #0
    9af8:	6858      	ldr	r0, [r3, #4]
    9afa:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    9afc:	4b03      	ldr	r3, [pc, #12]	; (9b0c <stdio_io_init+0x28>)
    9afe:	601e      	str	r6, [r3, #0]
    9b00:	bd70      	pop	{r4, r5, r6, pc}
    9b02:	bf00      	nop
    9b04:	20000058 	.word	0x20000058
    9b08:	0000ac39 	.word	0x0000ac39
    9b0c:	20000864 	.word	0x20000864

00009b10 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    9b10:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9b12:	4b06      	ldr	r3, [pc, #24]	; (9b2c <stdio_io_read+0x1c>)
    9b14:	681b      	ldr	r3, [r3, #0]
    9b16:	b133      	cbz	r3, 9b26 <stdio_io_read+0x16>
    9b18:	460a      	mov	r2, r1
    9b1a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    9b1c:	b292      	uxth	r2, r2
    9b1e:	4618      	mov	r0, r3
    9b20:	4b03      	ldr	r3, [pc, #12]	; (9b30 <stdio_io_read+0x20>)
    9b22:	4798      	blx	r3
    9b24:	bd08      	pop	{r3, pc}
		return 0;
    9b26:	2000      	movs	r0, #0
}
    9b28:	bd08      	pop	{r3, pc}
    9b2a:	bf00      	nop
    9b2c:	20000864 	.word	0x20000864
    9b30:	00005cf9 	.word	0x00005cf9

00009b34 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    9b34:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9b36:	4b06      	ldr	r3, [pc, #24]	; (9b50 <stdio_io_write+0x1c>)
    9b38:	681b      	ldr	r3, [r3, #0]
    9b3a:	b133      	cbz	r3, 9b4a <stdio_io_write+0x16>
    9b3c:	460a      	mov	r2, r1
    9b3e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    9b40:	b292      	uxth	r2, r2
    9b42:	4618      	mov	r0, r3
    9b44:	4b03      	ldr	r3, [pc, #12]	; (9b54 <stdio_io_write+0x20>)
    9b46:	4798      	blx	r3
    9b48:	bd08      	pop	{r3, pc}
		return 0;
    9b4a:	2000      	movs	r0, #0
}
    9b4c:	bd08      	pop	{r3, pc}
    9b4e:	bf00      	nop
    9b50:	20000864 	.word	0x20000864
    9b54:	00005cf1 	.word	0x00005cf1

00009b58 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    9b58:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    9b5a:	4c04      	ldr	r4, [pc, #16]	; (9b6c <stdio_redirect_init+0x14>)
    9b5c:	4620      	mov	r0, r4
    9b5e:	4b04      	ldr	r3, [pc, #16]	; (9b70 <stdio_redirect_init+0x18>)
    9b60:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    9b62:	4620      	mov	r0, r4
    9b64:	4b03      	ldr	r3, [pc, #12]	; (9b74 <stdio_redirect_init+0x1c>)
    9b66:	4798      	blx	r3
    9b68:	bd10      	pop	{r4, pc}
    9b6a:	bf00      	nop
    9b6c:	20000a44 	.word	0x20000a44
    9b70:	00006291 	.word	0x00006291
    9b74:	00009ae5 	.word	0x00009ae5

00009b78 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b7a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9b7c:	780b      	ldrb	r3, [r1, #0]
    9b7e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    9b82:	2c01      	cmp	r4, #1
    9b84:	d15e      	bne.n	9c44 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    9b86:	888c      	ldrh	r4, [r1, #4]
    9b88:	4d35      	ldr	r5, [pc, #212]	; (9c60 <cdcdf_acm_req+0xe8>)
    9b8a:	782d      	ldrb	r5, [r5, #0]
    9b8c:	42a5      	cmp	r5, r4
    9b8e:	d003      	beq.n	9b98 <cdcdf_acm_req+0x20>
    9b90:	4d33      	ldr	r5, [pc, #204]	; (9c60 <cdcdf_acm_req+0xe8>)
    9b92:	786d      	ldrb	r5, [r5, #1]
    9b94:	42a5      	cmp	r5, r4
    9b96:	d158      	bne.n	9c4a <cdcdf_acm_req+0xd2>
    9b98:	4616      	mov	r6, r2
    9b9a:	460c      	mov	r4, r1
    9b9c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    9b9e:	f013 0f80 	tst.w	r3, #128	; 0x80
    9ba2:	d10c      	bne.n	9bbe <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    9ba4:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    9ba6:	4b2f      	ldr	r3, [pc, #188]	; (9c64 <cdcdf_acm_req+0xec>)
    9ba8:	4798      	blx	r3
    9baa:	4601      	mov	r1, r0
	switch (req->bRequest) {
    9bac:	7863      	ldrb	r3, [r4, #1]
    9bae:	2b20      	cmp	r3, #32
    9bb0:	d013      	beq.n	9bda <cdcdf_acm_req+0x62>
    9bb2:	2b22      	cmp	r3, #34	; 0x22
    9bb4:	d032      	beq.n	9c1c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    9bb6:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    9bba:	b003      	add	sp, #12
    9bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    9bbe:	2a01      	cmp	r2, #1
    9bc0:	d046      	beq.n	9c50 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    9bc2:	784b      	ldrb	r3, [r1, #1]
    9bc4:	2b21      	cmp	r3, #33	; 0x21
    9bc6:	d145      	bne.n	9c54 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9bc8:	88cb      	ldrh	r3, [r1, #6]
    9bca:	2b07      	cmp	r3, #7
    9bcc:	d145      	bne.n	9c5a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    9bce:	2300      	movs	r3, #0
    9bd0:	2207      	movs	r2, #7
    9bd2:	4925      	ldr	r1, [pc, #148]	; (9c68 <cdcdf_acm_req+0xf0>)
    9bd4:	4c25      	ldr	r4, [pc, #148]	; (9c6c <cdcdf_acm_req+0xf4>)
    9bd6:	47a0      	blx	r4
    9bd8:	e7ef      	b.n	9bba <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9bda:	2f07      	cmp	r7, #7
    9bdc:	d12b      	bne.n	9c36 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    9bde:	b1be      	cbz	r6, 9c10 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    9be0:	6800      	ldr	r0, [r0, #0]
    9be2:	9000      	str	r0, [sp, #0]
    9be4:	888a      	ldrh	r2, [r1, #4]
    9be6:	798b      	ldrb	r3, [r1, #6]
    9be8:	f8ad 2004 	strh.w	r2, [sp, #4]
    9bec:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    9bf0:	4b1b      	ldr	r3, [pc, #108]	; (9c60 <cdcdf_acm_req+0xe8>)
    9bf2:	691b      	ldr	r3, [r3, #16]
    9bf4:	b113      	cbz	r3, 9bfc <cdcdf_acm_req+0x84>
    9bf6:	4668      	mov	r0, sp
    9bf8:	4798      	blx	r3
    9bfa:	b1f8      	cbz	r0, 9c3c <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    9bfc:	4b18      	ldr	r3, [pc, #96]	; (9c60 <cdcdf_acm_req+0xe8>)
    9bfe:	aa02      	add	r2, sp, #8
    9c00:	e912 0003 	ldmdb	r2, {r0, r1}
    9c04:	6098      	str	r0, [r3, #8]
    9c06:	8199      	strh	r1, [r3, #12]
    9c08:	0c09      	lsrs	r1, r1, #16
    9c0a:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    9c0c:	2000      	movs	r0, #0
    9c0e:	e7d4      	b.n	9bba <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    9c10:	2300      	movs	r3, #0
    9c12:	2207      	movs	r2, #7
    9c14:	4628      	mov	r0, r5
    9c16:	4c15      	ldr	r4, [pc, #84]	; (9c6c <cdcdf_acm_req+0xf4>)
    9c18:	47a0      	blx	r4
    9c1a:	e7ce      	b.n	9bba <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    9c1c:	2300      	movs	r3, #0
    9c1e:	461a      	mov	r2, r3
    9c20:	4619      	mov	r1, r3
    9c22:	4618      	mov	r0, r3
    9c24:	4d11      	ldr	r5, [pc, #68]	; (9c6c <cdcdf_acm_req+0xf4>)
    9c26:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    9c28:	4b0d      	ldr	r3, [pc, #52]	; (9c60 <cdcdf_acm_req+0xe8>)
    9c2a:	695b      	ldr	r3, [r3, #20]
    9c2c:	b143      	cbz	r3, 9c40 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    9c2e:	8860      	ldrh	r0, [r4, #2]
    9c30:	4798      	blx	r3
		return ERR_NONE;
    9c32:	2000      	movs	r0, #0
    9c34:	e7c1      	b.n	9bba <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9c36:	f04f 30ff 	mov.w	r0, #4294967295
    9c3a:	e7be      	b.n	9bba <cdcdf_acm_req+0x42>
			return ERR_NONE;
    9c3c:	2000      	movs	r0, #0
    9c3e:	e7bc      	b.n	9bba <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9c40:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    9c42:	e7ba      	b.n	9bba <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9c44:	f06f 0009 	mvn.w	r0, #9
    9c48:	e7b7      	b.n	9bba <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9c4a:	f06f 0009 	mvn.w	r0, #9
    9c4e:	e7b4      	b.n	9bba <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9c50:	2000      	movs	r0, #0
    9c52:	e7b2      	b.n	9bba <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    9c54:	f06f 000c 	mvn.w	r0, #12
    9c58:	e7af      	b.n	9bba <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9c5a:	f04f 30ff 	mov.w	r0, #4294967295
    9c5e:	e7ac      	b.n	9bba <cdcdf_acm_req+0x42>
    9c60:	20000868 	.word	0x20000868
    9c64:	0000a889 	.word	0x0000a889
    9c68:	20000870 	.word	0x20000870
    9c6c:	0000a3bd 	.word	0x0000a3bd

00009c70 <cdcdf_acm_ctrl>:
{
    9c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c74:	b083      	sub	sp, #12
    9c76:	4616      	mov	r6, r2
	switch (ctrl) {
    9c78:	2901      	cmp	r1, #1
    9c7a:	d066      	beq.n	9d4a <cdcdf_acm_ctrl+0xda>
    9c7c:	b141      	cbz	r1, 9c90 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    9c7e:	2902      	cmp	r1, #2
    9c80:	bf0c      	ite	eq
    9c82:	f06f 001a 	mvneq.w	r0, #26
    9c86:	f06f 000c 	mvnne.w	r0, #12
}
    9c8a:	b003      	add	sp, #12
    9c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9c90:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    9c94:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    9c96:	2800      	cmp	r0, #0
    9c98:	f000 8085 	beq.w	9da6 <cdcdf_acm_ctrl+0x136>
    9c9c:	f10a 3bff 	add.w	fp, sl, #4294967295
    9ca0:	f10a 0301 	add.w	r3, sl, #1
    9ca4:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9ca6:	4f46      	ldr	r7, [pc, #280]	; (9dc0 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    9ca8:	f8df 9124 	ldr.w	r9, [pc, #292]	; 9dd0 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9cac:	f8df 8124 	ldr.w	r8, [pc, #292]	; 9dd4 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    9cb0:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    9cb2:	7943      	ldrb	r3, [r0, #5]
    9cb4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9cb8:	2b02      	cmp	r3, #2
    9cba:	d002      	beq.n	9cc2 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    9cbc:	f06f 0009 	mvn.w	r0, #9
    9cc0:	e7e3      	b.n	9c8a <cdcdf_acm_ctrl+0x1a>
    9cc2:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9cc6:	f89b 3000 	ldrb.w	r3, [fp]
    9cca:	429a      	cmp	r2, r3
    9ccc:	d06e      	beq.n	9dac <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    9cce:	2bff      	cmp	r3, #255	; 0xff
    9cd0:	d16f      	bne.n	9db2 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    9cd2:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    9cd6:	2205      	movs	r2, #5
    9cd8:	6871      	ldr	r1, [r6, #4]
    9cda:	4b3a      	ldr	r3, [pc, #232]	; (9dc4 <cdcdf_acm_ctrl+0x154>)
    9cdc:	4798      	blx	r3
		while (NULL != ep) {
    9cde:	4604      	mov	r4, r0
    9ce0:	b1f8      	cbz	r0, 9d22 <cdcdf_acm_ctrl+0xb2>
    9ce2:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    9ce6:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    9ce8:	7963      	ldrb	r3, [r4, #5]
    9cea:	7922      	ldrb	r2, [r4, #4]
    9cec:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9cf0:	b292      	uxth	r2, r2
    9cf2:	78e1      	ldrb	r1, [r4, #3]
    9cf4:	4628      	mov	r0, r5
    9cf6:	47b8      	blx	r7
    9cf8:	2800      	cmp	r0, #0
    9cfa:	d15d      	bne.n	9db8 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9cfc:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    9d00:	bf14      	ite	ne
    9d02:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9d06:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    9d0a:	4628      	mov	r0, r5
    9d0c:	47c8      	blx	r9
			desc->sod = ep;
    9d0e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    9d10:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9d12:	6871      	ldr	r1, [r6, #4]
    9d14:	4420      	add	r0, r4
    9d16:	47c0      	blx	r8
		while (NULL != ep) {
    9d18:	4604      	mov	r4, r0
    9d1a:	2800      	cmp	r0, #0
    9d1c:	d1e3      	bne.n	9ce6 <cdcdf_acm_ctrl+0x76>
    9d1e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    9d22:	6833      	ldr	r3, [r6, #0]
    9d24:	7818      	ldrb	r0, [r3, #0]
    9d26:	2204      	movs	r2, #4
    9d28:	6871      	ldr	r1, [r6, #4]
    9d2a:	4418      	add	r0, r3
    9d2c:	4b25      	ldr	r3, [pc, #148]	; (9dc4 <cdcdf_acm_ctrl+0x154>)
    9d2e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    9d30:	9b00      	ldr	r3, [sp, #0]
    9d32:	459b      	cmp	fp, r3
    9d34:	d004      	beq.n	9d40 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    9d36:	2800      	cmp	r0, #0
    9d38:	d1ba      	bne.n	9cb0 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    9d3a:	f06f 0009 	mvn.w	r0, #9
    9d3e:	e7a4      	b.n	9c8a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    9d40:	2201      	movs	r2, #1
    9d42:	4b21      	ldr	r3, [pc, #132]	; (9dc8 <cdcdf_acm_ctrl+0x158>)
    9d44:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    9d46:	2000      	movs	r0, #0
    9d48:	e79f      	b.n	9c8a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9d4a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    9d4c:	b142      	cbz	r2, 9d60 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9d4e:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    9d50:	795b      	ldrb	r3, [r3, #5]
    9d52:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9d56:	2b02      	cmp	r3, #2
    9d58:	d002      	beq.n	9d60 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    9d5a:	f06f 0009 	mvn.w	r0, #9
    9d5e:	e794      	b.n	9c8a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    9d60:	7823      	ldrb	r3, [r4, #0]
    9d62:	2bff      	cmp	r3, #255	; 0xff
    9d64:	d008      	beq.n	9d78 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    9d66:	23ff      	movs	r3, #255	; 0xff
    9d68:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    9d6a:	78a0      	ldrb	r0, [r4, #2]
    9d6c:	4298      	cmp	r0, r3
    9d6e:	d003      	beq.n	9d78 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9d70:	4b16      	ldr	r3, [pc, #88]	; (9dcc <cdcdf_acm_ctrl+0x15c>)
    9d72:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9d74:	23ff      	movs	r3, #255	; 0xff
    9d76:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    9d78:	7863      	ldrb	r3, [r4, #1]
    9d7a:	2bff      	cmp	r3, #255	; 0xff
    9d7c:	d008      	beq.n	9d90 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    9d7e:	23ff      	movs	r3, #255	; 0xff
    9d80:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    9d82:	78e0      	ldrb	r0, [r4, #3]
    9d84:	4298      	cmp	r0, r3
    9d86:	d003      	beq.n	9d90 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9d88:	4b10      	ldr	r3, [pc, #64]	; (9dcc <cdcdf_acm_ctrl+0x15c>)
    9d8a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9d8c:	23ff      	movs	r3, #255	; 0xff
    9d8e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    9d90:	7920      	ldrb	r0, [r4, #4]
    9d92:	28ff      	cmp	r0, #255	; 0xff
    9d94:	d003      	beq.n	9d9e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    9d96:	4b0d      	ldr	r3, [pc, #52]	; (9dcc <cdcdf_acm_ctrl+0x15c>)
    9d98:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9d9a:	23ff      	movs	r3, #255	; 0xff
    9d9c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    9d9e:	2000      	movs	r0, #0
    9da0:	4b09      	ldr	r3, [pc, #36]	; (9dc8 <cdcdf_acm_ctrl+0x158>)
    9da2:	7158      	strb	r0, [r3, #5]
    9da4:	e771      	b.n	9c8a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    9da6:	f06f 0009 	mvn.w	r0, #9
    9daa:	e76e      	b.n	9c8a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    9dac:	f06f 0011 	mvn.w	r0, #17
    9db0:	e76b      	b.n	9c8a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    9db2:	f06f 001b 	mvn.w	r0, #27
    9db6:	e768      	b.n	9c8a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    9db8:	f06f 0013 	mvn.w	r0, #19
    9dbc:	e765      	b.n	9c8a <cdcdf_acm_ctrl+0x1a>
    9dbe:	bf00      	nop
    9dc0:	00006575 	.word	0x00006575
    9dc4:	0000a8a9 	.word	0x0000a8a9
    9dc8:	20000868 	.word	0x20000868
    9dcc:	000065dd 	.word	0x000065dd
    9dd0:	00006609 	.word	0x00006609
    9dd4:	0000a8e3 	.word	0x0000a8e3

00009dd8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    9dd8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9dda:	4b0a      	ldr	r3, [pc, #40]	; (9e04 <cdcdf_acm_init+0x2c>)
    9ddc:	4798      	blx	r3
    9dde:	2801      	cmp	r0, #1
    9de0:	d80c      	bhi.n	9dfc <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    9de2:	4809      	ldr	r0, [pc, #36]	; (9e08 <cdcdf_acm_init+0x30>)
    9de4:	4b09      	ldr	r3, [pc, #36]	; (9e0c <cdcdf_acm_init+0x34>)
    9de6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    9de8:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    9dea:	3018      	adds	r0, #24
    9dec:	4b08      	ldr	r3, [pc, #32]	; (9e10 <cdcdf_acm_init+0x38>)
    9dee:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    9df0:	4908      	ldr	r1, [pc, #32]	; (9e14 <cdcdf_acm_init+0x3c>)
    9df2:	2001      	movs	r0, #1
    9df4:	4b08      	ldr	r3, [pc, #32]	; (9e18 <cdcdf_acm_init+0x40>)
    9df6:	4798      	blx	r3
	return ERR_NONE;
    9df8:	2000      	movs	r0, #0
    9dfa:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    9dfc:	f06f 0010 	mvn.w	r0, #16
}
    9e00:	bd08      	pop	{r3, pc}
    9e02:	bf00      	nop
    9e04:	0000a895 	.word	0x0000a895
    9e08:	20000868 	.word	0x20000868
    9e0c:	00009c71 	.word	0x00009c71
    9e10:	0000a875 	.word	0x0000a875
    9e14:	20000040 	.word	0x20000040
    9e18:	0000a7f9 	.word	0x0000a7f9

00009e1c <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9e1c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9e1e:	780b      	ldrb	r3, [r1, #0]
    9e20:	2b81      	cmp	r3, #129	; 0x81
    9e22:	d010      	beq.n	9e46 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9e24:	f3c3 1341 	ubfx	r3, r3, #5, #2
    9e28:	2b01      	cmp	r3, #1
    9e2a:	d13f      	bne.n	9eac <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    9e2c:	888a      	ldrh	r2, [r1, #4]
    9e2e:	4b22      	ldr	r3, [pc, #136]	; (9eb8 <hid_keyboard_req+0x9c>)
    9e30:	7b1b      	ldrb	r3, [r3, #12]
    9e32:	429a      	cmp	r2, r3
    9e34:	d13d      	bne.n	9eb2 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    9e36:	784b      	ldrb	r3, [r1, #1]
    9e38:	2b03      	cmp	r3, #3
    9e3a:	d028      	beq.n	9e8e <hid_keyboard_req+0x72>
    9e3c:	2b0b      	cmp	r3, #11
    9e3e:	d02c      	beq.n	9e9a <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    9e40:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    9e44:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9e46:	784b      	ldrb	r3, [r1, #1]
    9e48:	2b06      	cmp	r3, #6
    9e4a:	d002      	beq.n	9e52 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    9e4c:	f06f 0009 	mvn.w	r0, #9
    9e50:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    9e52:	888a      	ldrh	r2, [r1, #4]
    9e54:	4b18      	ldr	r3, [pc, #96]	; (9eb8 <hid_keyboard_req+0x9c>)
    9e56:	7b1b      	ldrb	r3, [r3, #12]
    9e58:	429a      	cmp	r2, r3
    9e5a:	d002      	beq.n	9e62 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    9e5c:	f06f 0009 	mvn.w	r0, #9
    9e60:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    9e62:	884b      	ldrh	r3, [r1, #2]
    9e64:	0a1b      	lsrs	r3, r3, #8
    9e66:	2b21      	cmp	r3, #33	; 0x21
    9e68:	d004      	beq.n	9e74 <hid_keyboard_req+0x58>
    9e6a:	2b22      	cmp	r3, #34	; 0x22
    9e6c:	d009      	beq.n	9e82 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    9e6e:	f06f 000c 	mvn.w	r0, #12
    9e72:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    9e74:	4b10      	ldr	r3, [pc, #64]	; (9eb8 <hid_keyboard_req+0x9c>)
    9e76:	6819      	ldr	r1, [r3, #0]
    9e78:	2300      	movs	r3, #0
    9e7a:	780a      	ldrb	r2, [r1, #0]
    9e7c:	4c0f      	ldr	r4, [pc, #60]	; (9ebc <hid_keyboard_req+0xa0>)
    9e7e:	47a0      	blx	r4
    9e80:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    9e82:	2300      	movs	r3, #0
    9e84:	223b      	movs	r2, #59	; 0x3b
    9e86:	490e      	ldr	r1, [pc, #56]	; (9ec0 <hid_keyboard_req+0xa4>)
    9e88:	4c0c      	ldr	r4, [pc, #48]	; (9ebc <hid_keyboard_req+0xa0>)
    9e8a:	47a0      	blx	r4
    9e8c:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    9e8e:	2300      	movs	r3, #0
    9e90:	2201      	movs	r2, #1
    9e92:	490c      	ldr	r1, [pc, #48]	; (9ec4 <hid_keyboard_req+0xa8>)
    9e94:	4c09      	ldr	r4, [pc, #36]	; (9ebc <hid_keyboard_req+0xa0>)
    9e96:	47a0      	blx	r4
    9e98:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    9e9a:	884a      	ldrh	r2, [r1, #2]
    9e9c:	4b06      	ldr	r3, [pc, #24]	; (9eb8 <hid_keyboard_req+0x9c>)
    9e9e:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    9ea0:	2300      	movs	r3, #0
    9ea2:	461a      	mov	r2, r3
    9ea4:	4619      	mov	r1, r3
    9ea6:	4c05      	ldr	r4, [pc, #20]	; (9ebc <hid_keyboard_req+0xa0>)
    9ea8:	47a0      	blx	r4
    9eaa:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9eac:	f06f 0009 	mvn.w	r0, #9
    9eb0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    9eb2:	f06f 0009 	mvn.w	r0, #9
    9eb6:	bd10      	pop	{r4, pc}
    9eb8:	2000088c 	.word	0x2000088c
    9ebc:	0000a3bd 	.word	0x0000a3bd
    9ec0:	0000c120 	.word	0x0000c120
    9ec4:	2000089b 	.word	0x2000089b

00009ec8 <hid_keyboard_ctrl>:
{
    9ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ecc:	4614      	mov	r4, r2
	switch (ctrl) {
    9ece:	2901      	cmp	r1, #1
    9ed0:	d050      	beq.n	9f74 <hid_keyboard_ctrl+0xac>
    9ed2:	b141      	cbz	r1, 9ee6 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    9ed4:	2902      	cmp	r1, #2
    9ed6:	bf0c      	ite	eq
    9ed8:	f06f 051a 	mvneq.w	r5, #26
    9edc:	f06f 050c 	mvnne.w	r5, #12
}
    9ee0:	4628      	mov	r0, r5
    9ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    9ee6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    9eea:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    9eec:	2b00      	cmp	r3, #0
    9eee:	d05e      	beq.n	9fae <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    9ef0:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    9ef2:	795b      	ldrb	r3, [r3, #5]
    9ef4:	2b03      	cmp	r3, #3
    9ef6:	d15d      	bne.n	9fb4 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    9ef8:	f898 300c 	ldrb.w	r3, [r8, #12]
    9efc:	429a      	cmp	r2, r3
    9efe:	d05c      	beq.n	9fba <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    9f00:	2bff      	cmp	r3, #255	; 0xff
    9f02:	d15d      	bne.n	9fc0 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    9f04:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    9f08:	6823      	ldr	r3, [r4, #0]
    9f0a:	7818      	ldrb	r0, [r3, #0]
    9f0c:	2221      	movs	r2, #33	; 0x21
    9f0e:	6861      	ldr	r1, [r4, #4]
    9f10:	4418      	add	r0, r3
    9f12:	4b31      	ldr	r3, [pc, #196]	; (9fd8 <hid_keyboard_ctrl+0x110>)
    9f14:	4798      	blx	r3
    9f16:	4b31      	ldr	r3, [pc, #196]	; (9fdc <hid_keyboard_ctrl+0x114>)
    9f18:	6018      	str	r0, [r3, #0]
    9f1a:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9f1c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 9fe4 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9f20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9fe8 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    9f24:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9fec <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9f28:	6823      	ldr	r3, [r4, #0]
    9f2a:	7818      	ldrb	r0, [r3, #0]
    9f2c:	6861      	ldr	r1, [r4, #4]
    9f2e:	4418      	add	r0, r3
    9f30:	47c8      	blx	r9
		desc->sod = ep;
    9f32:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    9f34:	2800      	cmp	r0, #0
    9f36:	d046      	beq.n	9fc6 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    9f38:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    9f3a:	7943      	ldrb	r3, [r0, #5]
    9f3c:	7902      	ldrb	r2, [r0, #4]
    9f3e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9f42:	b292      	uxth	r2, r2
    9f44:	78c1      	ldrb	r1, [r0, #3]
    9f46:	4638      	mov	r0, r7
    9f48:	47d0      	blx	sl
    9f4a:	4605      	mov	r5, r0
    9f4c:	2800      	cmp	r0, #0
    9f4e:	d13d      	bne.n	9fcc <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9f50:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    9f54:	bf14      	ite	ne
    9f56:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9f5a:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    9f5e:	4638      	mov	r0, r7
    9f60:	47d8      	blx	fp
    9f62:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    9f64:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    9f68:	d1de      	bne.n	9f28 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    9f6a:	4b1c      	ldr	r3, [pc, #112]	; (9fdc <hid_keyboard_ctrl+0x114>)
    9f6c:	2201      	movs	r2, #1
    9f6e:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    9f70:	741a      	strb	r2, [r3, #16]
    9f72:	e7b5      	b.n	9ee0 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    9f74:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    9f76:	b11a      	cbz	r2, 9f80 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9f78:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    9f7a:	795b      	ldrb	r3, [r3, #5]
    9f7c:	2b03      	cmp	r3, #3
    9f7e:	d128      	bne.n	9fd2 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    9f80:	7b2b      	ldrb	r3, [r5, #12]
    9f82:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    9f84:	bf1c      	itt	ne
    9f86:	23ff      	movne	r3, #255	; 0xff
    9f88:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    9f8a:	7b68      	ldrb	r0, [r5, #13]
    9f8c:	28ff      	cmp	r0, #255	; 0xff
    9f8e:	d003      	beq.n	9f98 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    9f90:	4b13      	ldr	r3, [pc, #76]	; (9fe0 <hid_keyboard_ctrl+0x118>)
    9f92:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9f94:	23ff      	movs	r3, #255	; 0xff
    9f96:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    9f98:	7ba8      	ldrb	r0, [r5, #14]
    9f9a:	28ff      	cmp	r0, #255	; 0xff
    9f9c:	d003      	beq.n	9fa6 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    9f9e:	4b10      	ldr	r3, [pc, #64]	; (9fe0 <hid_keyboard_ctrl+0x118>)
    9fa0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9fa2:	23ff      	movs	r3, #255	; 0xff
    9fa4:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    9fa6:	2500      	movs	r5, #0
    9fa8:	4b0c      	ldr	r3, [pc, #48]	; (9fdc <hid_keyboard_ctrl+0x114>)
    9faa:	741d      	strb	r5, [r3, #16]
    9fac:	e798      	b.n	9ee0 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    9fae:	f06f 0509 	mvn.w	r5, #9
    9fb2:	e795      	b.n	9ee0 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    9fb4:	f06f 0509 	mvn.w	r5, #9
    9fb8:	e792      	b.n	9ee0 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    9fba:	f06f 0511 	mvn.w	r5, #17
    9fbe:	e78f      	b.n	9ee0 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    9fc0:	f06f 051b 	mvn.w	r5, #27
    9fc4:	e78c      	b.n	9ee0 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    9fc6:	f06f 0509 	mvn.w	r5, #9
    9fca:	e789      	b.n	9ee0 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    9fcc:	f06f 0513 	mvn.w	r5, #19
    9fd0:	e786      	b.n	9ee0 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    9fd2:	f06f 0509 	mvn.w	r5, #9
    9fd6:	e783      	b.n	9ee0 <hid_keyboard_ctrl+0x18>
    9fd8:	0000a8a9 	.word	0x0000a8a9
    9fdc:	2000088c 	.word	0x2000088c
    9fe0:	000065dd 	.word	0x000065dd
    9fe4:	0000a8e3 	.word	0x0000a8e3
    9fe8:	00006575 	.word	0x00006575
    9fec:	00006609 	.word	0x00006609

00009ff0 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    9ff0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9ff2:	4b0a      	ldr	r3, [pc, #40]	; (a01c <hiddf_keyboard_init+0x2c>)
    9ff4:	4798      	blx	r3
    9ff6:	2801      	cmp	r0, #1
    9ff8:	d80c      	bhi.n	a014 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    9ffa:	4809      	ldr	r0, [pc, #36]	; (a020 <hiddf_keyboard_init+0x30>)
    9ffc:	4b09      	ldr	r3, [pc, #36]	; (a024 <hiddf_keyboard_init+0x34>)
    9ffe:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    a000:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    a002:	3014      	adds	r0, #20
    a004:	4b08      	ldr	r3, [pc, #32]	; (a028 <hiddf_keyboard_init+0x38>)
    a006:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    a008:	4908      	ldr	r1, [pc, #32]	; (a02c <hiddf_keyboard_init+0x3c>)
    a00a:	2001      	movs	r0, #1
    a00c:	4b08      	ldr	r3, [pc, #32]	; (a030 <hiddf_keyboard_init+0x40>)
    a00e:	4798      	blx	r3
	return ERR_NONE;
    a010:	2000      	movs	r0, #0
    a012:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a014:	f06f 0010 	mvn.w	r0, #16
}
    a018:	bd08      	pop	{r3, pc}
    a01a:	bf00      	nop
    a01c:	0000a895 	.word	0x0000a895
    a020:	2000088c 	.word	0x2000088c
    a024:	00009ec9 	.word	0x00009ec9
    a028:	0000a875 	.word	0x0000a875
    a02c:	20000048 	.word	0x20000048
    a030:	0000a7f9 	.word	0x0000a7f9

0000a034 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a034:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a036:	780b      	ldrb	r3, [r1, #0]
    a038:	2b81      	cmp	r3, #129	; 0x81
    a03a:	d010      	beq.n	a05e <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a03c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a040:	2b01      	cmp	r3, #1
    a042:	d13f      	bne.n	a0c4 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    a044:	888a      	ldrh	r2, [r1, #4]
    a046:	4b22      	ldr	r3, [pc, #136]	; (a0d0 <hid_mouse_req+0x9c>)
    a048:	7a1b      	ldrb	r3, [r3, #8]
    a04a:	429a      	cmp	r2, r3
    a04c:	d13d      	bne.n	a0ca <hid_mouse_req+0x96>
			switch (req->bRequest) {
    a04e:	784b      	ldrb	r3, [r1, #1]
    a050:	2b03      	cmp	r3, #3
    a052:	d028      	beq.n	a0a6 <hid_mouse_req+0x72>
    a054:	2b0b      	cmp	r3, #11
    a056:	d02c      	beq.n	a0b2 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a058:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a05c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a05e:	784b      	ldrb	r3, [r1, #1]
    a060:	2b06      	cmp	r3, #6
    a062:	d002      	beq.n	a06a <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    a064:	f06f 0009 	mvn.w	r0, #9
    a068:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a06a:	888a      	ldrh	r2, [r1, #4]
    a06c:	4b18      	ldr	r3, [pc, #96]	; (a0d0 <hid_mouse_req+0x9c>)
    a06e:	7a1b      	ldrb	r3, [r3, #8]
    a070:	429a      	cmp	r2, r3
    a072:	d002      	beq.n	a07a <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    a074:	f06f 0009 	mvn.w	r0, #9
    a078:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a07a:	884b      	ldrh	r3, [r1, #2]
    a07c:	0a1b      	lsrs	r3, r3, #8
    a07e:	2b21      	cmp	r3, #33	; 0x21
    a080:	d004      	beq.n	a08c <hid_mouse_req+0x58>
    a082:	2b22      	cmp	r3, #34	; 0x22
    a084:	d009      	beq.n	a09a <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    a086:	f06f 000c 	mvn.w	r0, #12
    a08a:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    a08c:	4b10      	ldr	r3, [pc, #64]	; (a0d0 <hid_mouse_req+0x9c>)
    a08e:	6819      	ldr	r1, [r3, #0]
    a090:	2300      	movs	r3, #0
    a092:	780a      	ldrb	r2, [r1, #0]
    a094:	4c0f      	ldr	r4, [pc, #60]	; (a0d4 <hid_mouse_req+0xa0>)
    a096:	47a0      	blx	r4
    a098:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    a09a:	2300      	movs	r3, #0
    a09c:	2234      	movs	r2, #52	; 0x34
    a09e:	490e      	ldr	r1, [pc, #56]	; (a0d8 <hid_mouse_req+0xa4>)
    a0a0:	4c0c      	ldr	r4, [pc, #48]	; (a0d4 <hid_mouse_req+0xa0>)
    a0a2:	47a0      	blx	r4
    a0a4:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    a0a6:	2300      	movs	r3, #0
    a0a8:	2201      	movs	r2, #1
    a0aa:	490c      	ldr	r1, [pc, #48]	; (a0dc <hid_mouse_req+0xa8>)
    a0ac:	4c09      	ldr	r4, [pc, #36]	; (a0d4 <hid_mouse_req+0xa0>)
    a0ae:	47a0      	blx	r4
    a0b0:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    a0b2:	884a      	ldrh	r2, [r1, #2]
    a0b4:	4b06      	ldr	r3, [pc, #24]	; (a0d0 <hid_mouse_req+0x9c>)
    a0b6:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    a0b8:	2300      	movs	r3, #0
    a0ba:	461a      	mov	r2, r3
    a0bc:	4619      	mov	r1, r3
    a0be:	4c05      	ldr	r4, [pc, #20]	; (a0d4 <hid_mouse_req+0xa0>)
    a0c0:	47a0      	blx	r4
    a0c2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a0c4:	f06f 0009 	mvn.w	r0, #9
    a0c8:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a0ca:	f06f 0009 	mvn.w	r0, #9
    a0ce:	bd10      	pop	{r4, pc}
    a0d0:	200008ac 	.word	0x200008ac
    a0d4:	0000a3bd 	.word	0x0000a3bd
    a0d8:	0000c15c 	.word	0x0000c15c
    a0dc:	200008b6 	.word	0x200008b6

0000a0e0 <hid_mouse_ctrl>:
{
    a0e0:	b570      	push	{r4, r5, r6, lr}
    a0e2:	4614      	mov	r4, r2
	switch (ctrl) {
    a0e4:	2901      	cmp	r1, #1
    a0e6:	d040      	beq.n	a16a <hid_mouse_ctrl+0x8a>
    a0e8:	b139      	cbz	r1, a0fa <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    a0ea:	2902      	cmp	r1, #2
    a0ec:	bf0c      	ite	eq
    a0ee:	f06f 041a 	mvneq.w	r4, #26
    a0f2:	f06f 040c 	mvnne.w	r4, #12
}
    a0f6:	4620      	mov	r0, r4
    a0f8:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a0fa:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    a0fc:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a0fe:	2b00      	cmp	r3, #0
    a100:	d049      	beq.n	a196 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a102:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a104:	795b      	ldrb	r3, [r3, #5]
    a106:	2b03      	cmp	r3, #3
    a108:	d148      	bne.n	a19c <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a10a:	7a2b      	ldrb	r3, [r5, #8]
    a10c:	429a      	cmp	r2, r3
    a10e:	d048      	beq.n	a1a2 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a110:	2bff      	cmp	r3, #255	; 0xff
    a112:	d149      	bne.n	a1a8 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a114:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a116:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    a118:	7818      	ldrb	r0, [r3, #0]
    a11a:	2221      	movs	r2, #33	; 0x21
    a11c:	6861      	ldr	r1, [r4, #4]
    a11e:	4418      	add	r0, r3
    a120:	4b29      	ldr	r3, [pc, #164]	; (a1c8 <hid_mouse_ctrl+0xe8>)
    a122:	4798      	blx	r3
    a124:	4b29      	ldr	r3, [pc, #164]	; (a1cc <hid_mouse_ctrl+0xec>)
    a126:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a128:	6823      	ldr	r3, [r4, #0]
    a12a:	7818      	ldrb	r0, [r3, #0]
    a12c:	6861      	ldr	r1, [r4, #4]
    a12e:	4418      	add	r0, r3
    a130:	4b27      	ldr	r3, [pc, #156]	; (a1d0 <hid_mouse_ctrl+0xf0>)
    a132:	4798      	blx	r3
	desc->sod = ep;
    a134:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    a136:	2800      	cmp	r0, #0
    a138:	d039      	beq.n	a1ae <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    a13a:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a13c:	7943      	ldrb	r3, [r0, #5]
    a13e:	7902      	ldrb	r2, [r0, #4]
    a140:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a144:	b292      	uxth	r2, r2
    a146:	78c1      	ldrb	r1, [r0, #3]
    a148:	4630      	mov	r0, r6
    a14a:	4b22      	ldr	r3, [pc, #136]	; (a1d4 <hid_mouse_ctrl+0xf4>)
    a14c:	4798      	blx	r3
    a14e:	4604      	mov	r4, r0
    a150:	bb80      	cbnz	r0, a1b4 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a152:	f016 0f80 	tst.w	r6, #128	; 0x80
    a156:	d030      	beq.n	a1ba <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    a158:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    a15a:	4630      	mov	r0, r6
    a15c:	4b1e      	ldr	r3, [pc, #120]	; (a1d8 <hid_mouse_ctrl+0xf8>)
    a15e:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    a160:	4b1a      	ldr	r3, [pc, #104]	; (a1cc <hid_mouse_ctrl+0xec>)
    a162:	2201      	movs	r2, #1
    a164:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    a166:	72da      	strb	r2, [r3, #11]
    a168:	e7c5      	b.n	a0f6 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a16a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a16c:	b11a      	cbz	r2, a176 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a16e:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a170:	795b      	ldrb	r3, [r3, #5]
    a172:	2b03      	cmp	r3, #3
    a174:	d124      	bne.n	a1c0 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    a176:	7a2b      	ldrb	r3, [r5, #8]
    a178:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a17a:	bf1c      	itt	ne
    a17c:	23ff      	movne	r3, #255	; 0xff
    a17e:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    a180:	7a68      	ldrb	r0, [r5, #9]
    a182:	28ff      	cmp	r0, #255	; 0xff
    a184:	d003      	beq.n	a18e <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    a186:	4b15      	ldr	r3, [pc, #84]	; (a1dc <hid_mouse_ctrl+0xfc>)
    a188:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a18a:	23ff      	movs	r3, #255	; 0xff
    a18c:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    a18e:	2400      	movs	r4, #0
    a190:	4b0e      	ldr	r3, [pc, #56]	; (a1cc <hid_mouse_ctrl+0xec>)
    a192:	72dc      	strb	r4, [r3, #11]
    a194:	e7af      	b.n	a0f6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a196:	f06f 0409 	mvn.w	r4, #9
    a19a:	e7ac      	b.n	a0f6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a19c:	f06f 0409 	mvn.w	r4, #9
    a1a0:	e7a9      	b.n	a0f6 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    a1a2:	f06f 0411 	mvn.w	r4, #17
    a1a6:	e7a6      	b.n	a0f6 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    a1a8:	f06f 041b 	mvn.w	r4, #27
    a1ac:	e7a3      	b.n	a0f6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a1ae:	f06f 0409 	mvn.w	r4, #9
    a1b2:	e7a0      	b.n	a0f6 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    a1b4:	f06f 0413 	mvn.w	r4, #19
    a1b8:	e79d      	b.n	a0f6 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    a1ba:	f04f 34ff 	mov.w	r4, #4294967295
    a1be:	e79a      	b.n	a0f6 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    a1c0:	f06f 0409 	mvn.w	r4, #9
    a1c4:	e797      	b.n	a0f6 <hid_mouse_ctrl+0x16>
    a1c6:	bf00      	nop
    a1c8:	0000a8a9 	.word	0x0000a8a9
    a1cc:	200008ac 	.word	0x200008ac
    a1d0:	0000a8e3 	.word	0x0000a8e3
    a1d4:	00006575 	.word	0x00006575
    a1d8:	00006609 	.word	0x00006609
    a1dc:	000065dd 	.word	0x000065dd

0000a1e0 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    a1e0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a1e2:	4b0a      	ldr	r3, [pc, #40]	; (a20c <hiddf_mouse_init+0x2c>)
    a1e4:	4798      	blx	r3
    a1e6:	2801      	cmp	r0, #1
    a1e8:	d80c      	bhi.n	a204 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    a1ea:	4809      	ldr	r0, [pc, #36]	; (a210 <hiddf_mouse_init+0x30>)
    a1ec:	4b09      	ldr	r3, [pc, #36]	; (a214 <hiddf_mouse_init+0x34>)
    a1ee:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    a1f0:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    a1f2:	300c      	adds	r0, #12
    a1f4:	4b08      	ldr	r3, [pc, #32]	; (a218 <hiddf_mouse_init+0x38>)
    a1f6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    a1f8:	4908      	ldr	r1, [pc, #32]	; (a21c <hiddf_mouse_init+0x3c>)
    a1fa:	2001      	movs	r0, #1
    a1fc:	4b08      	ldr	r3, [pc, #32]	; (a220 <hiddf_mouse_init+0x40>)
    a1fe:	4798      	blx	r3
	return ERR_NONE;
    a200:	2000      	movs	r0, #0
    a202:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a204:	f06f 0010 	mvn.w	r0, #16
}
    a208:	bd08      	pop	{r3, pc}
    a20a:	bf00      	nop
    a20c:	0000a895 	.word	0x0000a895
    a210:	200008ac 	.word	0x200008ac
    a214:	0000a0e1 	.word	0x0000a0e1
    a218:	0000a875 	.word	0x0000a875
    a21c:	20000050 	.word	0x20000050
    a220:	0000a7f9 	.word	0x0000a7f9

0000a224 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    a224:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a226:	4b07      	ldr	r3, [pc, #28]	; (a244 <usbdc_unconfig+0x20>)
    a228:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    a22a:	b14c      	cbz	r4, a240 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    a22c:	2600      	movs	r6, #0
    a22e:	2501      	movs	r5, #1
    a230:	6863      	ldr	r3, [r4, #4]
    a232:	4632      	mov	r2, r6
    a234:	4629      	mov	r1, r5
    a236:	4620      	mov	r0, r4
    a238:	4798      	blx	r3
		func = func->next;
    a23a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    a23c:	2c00      	cmp	r4, #0
    a23e:	d1f7      	bne.n	a230 <usbdc_unconfig+0xc>
    a240:	bd70      	pop	{r4, r5, r6, pc}
    a242:	bf00      	nop
    a244:	200008c4 	.word	0x200008c4

0000a248 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    a248:	b570      	push	{r4, r5, r6, lr}
    a24a:	4606      	mov	r6, r0
    a24c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a24e:	4b07      	ldr	r3, [pc, #28]	; (a26c <usbdc_change_notify+0x24>)
    a250:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    a252:	b91c      	cbnz	r4, a25c <usbdc_change_notify+0x14>
    a254:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    a256:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    a258:	2c00      	cmp	r4, #0
    a25a:	d0fb      	beq.n	a254 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    a25c:	6863      	ldr	r3, [r4, #4]
    a25e:	2b00      	cmp	r3, #0
    a260:	d0f9      	beq.n	a256 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    a262:	4629      	mov	r1, r5
    a264:	4630      	mov	r0, r6
    a266:	4798      	blx	r3
    a268:	e7f5      	b.n	a256 <usbdc_change_notify+0xe>
    a26a:	bf00      	nop
    a26c:	200008c4 	.word	0x200008c4

0000a270 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a272:	4607      	mov	r7, r0
    a274:	460e      	mov	r6, r1
    a276:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    a278:	4b0c      	ldr	r3, [pc, #48]	; (a2ac <usbdc_request_handler+0x3c>)
    a27a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    a27c:	b91c      	cbnz	r4, a286 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    a27e:	2000      	movs	r0, #0
    a280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    a282:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    a284:	b16c      	cbz	r4, a2a2 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    a286:	6863      	ldr	r3, [r4, #4]
    a288:	2b00      	cmp	r3, #0
    a28a:	d0fa      	beq.n	a282 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    a28c:	462a      	mov	r2, r5
    a28e:	4631      	mov	r1, r6
    a290:	4638      	mov	r0, r7
    a292:	4798      	blx	r3
			if (0 == rc) {
    a294:	b138      	cbz	r0, a2a6 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    a296:	f110 0f0a 	cmn.w	r0, #10
    a29a:	d0f2      	beq.n	a282 <usbdc_request_handler+0x12>
				return -1;
    a29c:	f04f 30ff 	mov.w	r0, #4294967295
}
    a2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a2a2:	2000      	movs	r0, #0
    a2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    a2a6:	2001      	movs	r0, #1
    a2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2aa:	bf00      	nop
    a2ac:	200008c4 	.word	0x200008c4

0000a2b0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    a2b0:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a2b2:	4b06      	ldr	r3, [pc, #24]	; (a2cc <usbd_sof_cb+0x1c>)
    a2b4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    a2b6:	b91c      	cbnz	r4, a2c0 <usbd_sof_cb+0x10>
    a2b8:	bd10      	pop	{r4, pc}
		sof = sof->next;
    a2ba:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    a2bc:	2c00      	cmp	r4, #0
    a2be:	d0fb      	beq.n	a2b8 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    a2c0:	6863      	ldr	r3, [r4, #4]
    a2c2:	2b00      	cmp	r3, #0
    a2c4:	d0f9      	beq.n	a2ba <usbd_sof_cb+0xa>
			sof->cb();
    a2c6:	4798      	blx	r3
    a2c8:	e7f7      	b.n	a2ba <usbd_sof_cb+0xa>
    a2ca:	bf00      	nop
    a2cc:	200008c4 	.word	0x200008c4

0000a2d0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    a2d0:	b510      	push	{r4, lr}
    a2d2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    a2d4:	b119      	cbz	r1, a2de <usbdc_cb_ctl_done+0xe>
    a2d6:	2901      	cmp	r1, #1
    a2d8:	d026      	beq.n	a328 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    a2da:	2000      	movs	r0, #0
    a2dc:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    a2de:	7813      	ldrb	r3, [r2, #0]
    a2e0:	2b00      	cmp	r3, #0
    a2e2:	d1fa      	bne.n	a2da <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    a2e4:	7853      	ldrb	r3, [r2, #1]
    a2e6:	2b05      	cmp	r3, #5
    a2e8:	d00f      	beq.n	a30a <usbdc_cb_ctl_done+0x3a>
    a2ea:	2b09      	cmp	r3, #9
    a2ec:	d1f5      	bne.n	a2da <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    a2ee:	8852      	ldrh	r2, [r2, #2]
    a2f0:	4b10      	ldr	r3, [pc, #64]	; (a334 <usbdc_cb_ctl_done+0x64>)
    a2f2:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    a2f4:	8863      	ldrh	r3, [r4, #2]
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	bf14      	ite	ne
    a2fa:	2104      	movne	r1, #4
    a2fc:	2103      	moveq	r1, #3
    a2fe:	4b0d      	ldr	r3, [pc, #52]	; (a334 <usbdc_cb_ctl_done+0x64>)
    a300:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a302:	2001      	movs	r0, #1
    a304:	4b0c      	ldr	r3, [pc, #48]	; (a338 <usbdc_cb_ctl_done+0x68>)
    a306:	4798      	blx	r3
    a308:	e7e7      	b.n	a2da <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    a30a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    a30c:	b2c0      	uxtb	r0, r0
    a30e:	4b0b      	ldr	r3, [pc, #44]	; (a33c <usbdc_cb_ctl_done+0x6c>)
    a310:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    a312:	8863      	ldrh	r3, [r4, #2]
    a314:	2b00      	cmp	r3, #0
    a316:	bf14      	ite	ne
    a318:	2103      	movne	r1, #3
    a31a:	2102      	moveq	r1, #2
    a31c:	4b05      	ldr	r3, [pc, #20]	; (a334 <usbdc_cb_ctl_done+0x64>)
    a31e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a320:	2001      	movs	r0, #1
    a322:	4b05      	ldr	r3, [pc, #20]	; (a338 <usbdc_cb_ctl_done+0x68>)
    a324:	4798      	blx	r3
    a326:	e7d8      	b.n	a2da <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    a328:	2201      	movs	r2, #1
    a32a:	4621      	mov	r1, r4
    a32c:	2000      	movs	r0, #0
    a32e:	4b04      	ldr	r3, [pc, #16]	; (a340 <usbdc_cb_ctl_done+0x70>)
    a330:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    a332:	e7d2      	b.n	a2da <usbdc_cb_ctl_done+0xa>
    a334:	200008c4 	.word	0x200008c4
    a338:	0000a249 	.word	0x0000a249
    a33c:	00006569 	.word	0x00006569
    a340:	0000a271 	.word	0x0000a271

0000a344 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    a344:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    a346:	4b0d      	ldr	r3, [pc, #52]	; (a37c <usbdc_reset+0x38>)
    a348:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    a34a:	4d0d      	ldr	r5, [pc, #52]	; (a380 <usbdc_reset+0x3c>)
    a34c:	2602      	movs	r6, #2
    a34e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    a350:	2400      	movs	r4, #0
    a352:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    a354:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    a356:	4620      	mov	r0, r4
    a358:	4b0a      	ldr	r3, [pc, #40]	; (a384 <usbdc_reset+0x40>)
    a35a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    a35c:	7f28      	ldrb	r0, [r5, #28]
    a35e:	4b0a      	ldr	r3, [pc, #40]	; (a388 <usbdc_reset+0x44>)
    a360:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    a362:	4a0a      	ldr	r2, [pc, #40]	; (a38c <usbdc_reset+0x48>)
    a364:	4621      	mov	r1, r4
    a366:	4620      	mov	r0, r4
    a368:	4d09      	ldr	r5, [pc, #36]	; (a390 <usbdc_reset+0x4c>)
    a36a:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    a36c:	4a09      	ldr	r2, [pc, #36]	; (a394 <usbdc_reset+0x50>)
    a36e:	4631      	mov	r1, r6
    a370:	4620      	mov	r0, r4
    a372:	47a8      	blx	r5
	usb_d_ep_enable(0);
    a374:	4620      	mov	r0, r4
    a376:	4b08      	ldr	r3, [pc, #32]	; (a398 <usbdc_reset+0x54>)
    a378:	4798      	blx	r3
    a37a:	bd70      	pop	{r4, r5, r6, pc}
    a37c:	0000a225 	.word	0x0000a225
    a380:	200008c4 	.word	0x200008c4
    a384:	000065dd 	.word	0x000065dd
    a388:	000065c9 	.word	0x000065c9
    a38c:	0000a3dd 	.word	0x0000a3dd
    a390:	000067dd 	.word	0x000067dd
    a394:	0000a2d1 	.word	0x0000a2d1
    a398:	00006609 	.word	0x00006609

0000a39c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    a39c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    a39e:	b110      	cbz	r0, a3a6 <usbd_event_cb+0xa>
    a3a0:	2801      	cmp	r0, #1
    a3a2:	d004      	beq.n	a3ae <usbd_event_cb+0x12>
    a3a4:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    a3a6:	2000      	movs	r0, #0
    a3a8:	4b02      	ldr	r3, [pc, #8]	; (a3b4 <usbd_event_cb+0x18>)
    a3aa:	4798      	blx	r3
		break;
    a3ac:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    a3ae:	4b02      	ldr	r3, [pc, #8]	; (a3b8 <usbd_event_cb+0x1c>)
    a3b0:	4798      	blx	r3
    a3b2:	bd08      	pop	{r3, pc}
    a3b4:	0000a249 	.word	0x0000a249
    a3b8:	0000a345 	.word	0x0000a345

0000a3bc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    a3bc:	b500      	push	{lr}
    a3be:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    a3c0:	9101      	str	r1, [sp, #4]
    a3c2:	9202      	str	r2, [sp, #8]
    a3c4:	f88d 000c 	strb.w	r0, [sp, #12]
    a3c8:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    a3cc:	a801      	add	r0, sp, #4
    a3ce:	4b02      	ldr	r3, [pc, #8]	; (a3d8 <usbdc_xfer+0x1c>)
    a3d0:	4798      	blx	r3
}
    a3d2:	b005      	add	sp, #20
    a3d4:	f85d fb04 	ldr.w	pc, [sp], #4
    a3d8:	00006655 	.word	0x00006655

0000a3dc <usbdc_cb_ctl_req>:
{
    a3dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a3e0:	b083      	sub	sp, #12
    a3e2:	4605      	mov	r5, r0
    a3e4:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    a3e6:	2200      	movs	r2, #0
    a3e8:	4b9b      	ldr	r3, [pc, #620]	; (a658 <usbdc_cb_ctl_req+0x27c>)
    a3ea:	4798      	blx	r3
    a3ec:	f1b0 3fff 	cmp.w	r0, #4294967295
    a3f0:	d00b      	beq.n	a40a <usbdc_cb_ctl_req+0x2e>
    a3f2:	2801      	cmp	r0, #1
    a3f4:	f000 81e3 	beq.w	a7be <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    a3f8:	7823      	ldrb	r3, [r4, #0]
    a3fa:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    a3fe:	d008      	beq.n	a412 <usbdc_cb_ctl_req+0x36>
    a400:	2a80      	cmp	r2, #128	; 0x80
    a402:	f000 80f4 	beq.w	a5ee <usbdc_cb_ctl_req+0x212>
		return false;
    a406:	2000      	movs	r0, #0
    a408:	e000      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return false;
    a40a:	2000      	movs	r0, #0
}
    a40c:	b003      	add	sp, #12
    a40e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    a412:	7862      	ldrb	r2, [r4, #1]
    a414:	3a01      	subs	r2, #1
    a416:	2a0a      	cmp	r2, #10
    a418:	f200 81d3 	bhi.w	a7c2 <usbdc_cb_ctl_req+0x3e6>
    a41c:	e8df f012 	tbh	[pc, r2, lsl #1]
    a420:	01d10060 	.word	0x01d10060
    a424:	01d10076 	.word	0x01d10076
    a428:	01d1000b 	.word	0x01d1000b
    a42c:	01d101d1 	.word	0x01d101d1
    a430:	01d10015 	.word	0x01d10015
    a434:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a436:	2301      	movs	r3, #1
    a438:	2200      	movs	r2, #0
    a43a:	4611      	mov	r1, r2
    a43c:	4628      	mov	r0, r5
    a43e:	4c87      	ldr	r4, [pc, #540]	; (a65c <usbdc_cb_ctl_req+0x280>)
    a440:	47a0      	blx	r4
    a442:	fab0 f080 	clz	r0, r0
    a446:	0940      	lsrs	r0, r0, #5
    a448:	e7e0      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    a44a:	8862      	ldrh	r2, [r4, #2]
    a44c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    a44e:	b1ca      	cbz	r2, a484 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    a450:	4b83      	ldr	r3, [pc, #524]	; (a660 <usbdc_cb_ctl_req+0x284>)
    a452:	681b      	ldr	r3, [r3, #0]
    a454:	6859      	ldr	r1, [r3, #4]
    a456:	6818      	ldr	r0, [r3, #0]
    a458:	4b82      	ldr	r3, [pc, #520]	; (a664 <usbdc_cb_ctl_req+0x288>)
    a45a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a45c:	2800      	cmp	r0, #0
    a45e:	f000 81be 	beq.w	a7de <usbdc_cb_ctl_req+0x402>
    a462:	78c2      	ldrb	r2, [r0, #3]
    a464:	7881      	ldrb	r1, [r0, #2]
    a466:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    a46a:	fa10 f181 	uxtah	r1, r0, r1
    a46e:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a470:	2204      	movs	r2, #4
    a472:	4b7d      	ldr	r3, [pc, #500]	; (a668 <usbdc_cb_ctl_req+0x28c>)
    a474:	4798      	blx	r3
    a476:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a478:	b130      	cbz	r0, a488 <usbdc_cb_ctl_req+0xac>
    a47a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a47c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; a660 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a480:	4f79      	ldr	r7, [pc, #484]	; (a668 <usbdc_cb_ctl_req+0x28c>)
    a482:	e018      	b.n	a4b6 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    a484:	4b79      	ldr	r3, [pc, #484]	; (a66c <usbdc_cb_ctl_req+0x290>)
    a486:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a488:	2301      	movs	r3, #1
    a48a:	2200      	movs	r2, #0
    a48c:	4611      	mov	r1, r2
    a48e:	4628      	mov	r0, r5
    a490:	4c72      	ldr	r4, [pc, #456]	; (a65c <usbdc_cb_ctl_req+0x280>)
    a492:	47a0      	blx	r4
    a494:	fab0 f080 	clz	r0, r0
    a498:	0940      	lsrs	r0, r0, #5
    a49a:	e7b7      	b.n	a40c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    a49c:	464c      	mov	r4, r9
    a49e:	e000      	b.n	a4a2 <usbdc_cb_ctl_req+0xc6>
    a4a0:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    a4a2:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a4a4:	7803      	ldrb	r3, [r0, #0]
    a4a6:	4418      	add	r0, r3
    a4a8:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a4aa:	2204      	movs	r2, #4
    a4ac:	9901      	ldr	r1, [sp, #4]
    a4ae:	47b8      	blx	r7
    a4b0:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    a4b2:	2800      	cmp	r0, #0
    a4b4:	d0e8      	beq.n	a488 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    a4b6:	f890 9002 	ldrb.w	r9, [r0, #2]
    a4ba:	45a1      	cmp	r9, r4
    a4bc:	d0f1      	beq.n	a4a2 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a4be:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    a4c2:	2c00      	cmp	r4, #0
    a4c4:	d0ea      	beq.n	a49c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    a4c6:	2600      	movs	r6, #0
    a4c8:	6863      	ldr	r3, [r4, #4]
    a4ca:	466a      	mov	r2, sp
    a4cc:	4631      	mov	r1, r6
    a4ce:	4620      	mov	r0, r4
    a4d0:	4798      	blx	r3
    a4d2:	2800      	cmp	r0, #0
    a4d4:	d0e4      	beq.n	a4a0 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    a4d6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    a4d8:	2c00      	cmp	r4, #0
    a4da:	d1f5      	bne.n	a4c8 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    a4dc:	464c      	mov	r4, r9
    a4de:	e7e0      	b.n	a4a2 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a4e0:	f003 031f 	and.w	r3, r3, #31
    a4e4:	2b02      	cmp	r3, #2
    a4e6:	f040 816e 	bne.w	a7c6 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    a4ea:	88e3      	ldrh	r3, [r4, #6]
    a4ec:	b10b      	cbz	r3, a4f2 <usbdc_cb_ctl_req+0x116>
			return false;
    a4ee:	2000      	movs	r0, #0
    a4f0:	e78c      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    a4f2:	88a0      	ldrh	r0, [r4, #4]
    a4f4:	2100      	movs	r1, #0
    a4f6:	b2c0      	uxtb	r0, r0
    a4f8:	4b5d      	ldr	r3, [pc, #372]	; (a670 <usbdc_cb_ctl_req+0x294>)
    a4fa:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a4fc:	2301      	movs	r3, #1
    a4fe:	2200      	movs	r2, #0
    a500:	4611      	mov	r1, r2
    a502:	4628      	mov	r0, r5
    a504:	4c55      	ldr	r4, [pc, #340]	; (a65c <usbdc_cb_ctl_req+0x280>)
    a506:	47a0      	blx	r4
		return true;
    a508:	2001      	movs	r0, #1
    a50a:	e77f      	b.n	a40c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a50c:	f003 031f 	and.w	r3, r3, #31
    a510:	2b02      	cmp	r3, #2
    a512:	f040 815a 	bne.w	a7ca <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    a516:	88e3      	ldrh	r3, [r4, #6]
    a518:	b10b      	cbz	r3, a51e <usbdc_cb_ctl_req+0x142>
			return false;
    a51a:	2000      	movs	r0, #0
    a51c:	e776      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    a51e:	88a0      	ldrh	r0, [r4, #4]
    a520:	2101      	movs	r1, #1
    a522:	b2c0      	uxtb	r0, r0
    a524:	4b52      	ldr	r3, [pc, #328]	; (a670 <usbdc_cb_ctl_req+0x294>)
    a526:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a528:	2301      	movs	r3, #1
    a52a:	2200      	movs	r2, #0
    a52c:	4611      	mov	r1, r2
    a52e:	4628      	mov	r0, r5
    a530:	4c4a      	ldr	r4, [pc, #296]	; (a65c <usbdc_cb_ctl_req+0x280>)
    a532:	47a0      	blx	r4
		return true;
    a534:	2001      	movs	r0, #1
    a536:	e769      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    a538:	8866      	ldrh	r6, [r4, #2]
    a53a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a53c:	4a48      	ldr	r2, [pc, #288]	; (a660 <usbdc_cb_ctl_req+0x284>)
    a53e:	6813      	ldr	r3, [r2, #0]
    a540:	7ed2      	ldrb	r2, [r2, #27]
    a542:	6859      	ldr	r1, [r3, #4]
    a544:	6818      	ldr	r0, [r3, #0]
    a546:	4b47      	ldr	r3, [pc, #284]	; (a664 <usbdc_cb_ctl_req+0x288>)
    a548:	4798      	blx	r3
	if (NULL == ifc) {
    a54a:	2800      	cmp	r0, #0
    a54c:	d045      	beq.n	a5da <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    a54e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    a550:	78c2      	ldrb	r2, [r0, #3]
    a552:	7881      	ldrb	r1, [r0, #2]
    a554:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    a558:	fa10 f181 	uxtah	r1, r0, r1
    a55c:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    a55e:	2204      	movs	r2, #4
    a560:	4b41      	ldr	r3, [pc, #260]	; (a668 <usbdc_cb_ctl_req+0x28c>)
    a562:	4798      	blx	r3
    a564:	4603      	mov	r3, r0
    a566:	2800      	cmp	r0, #0
    a568:	d039      	beq.n	a5de <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a56a:	2704      	movs	r7, #4
    a56c:	4d3e      	ldr	r5, [pc, #248]	; (a668 <usbdc_cb_ctl_req+0x28c>)
    a56e:	e008      	b.n	a582 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    a570:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    a572:	7803      	ldrb	r3, [r0, #0]
    a574:	4418      	add	r0, r3
    a576:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a578:	463a      	mov	r2, r7
    a57a:	9901      	ldr	r1, [sp, #4]
    a57c:	47a8      	blx	r5
		if (NULL == ifc) {
    a57e:	4603      	mov	r3, r0
    a580:	b378      	cbz	r0, a5e2 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    a582:	789a      	ldrb	r2, [r3, #2]
    a584:	42a2      	cmp	r2, r4
    a586:	d1f3      	bne.n	a570 <usbdc_cb_ctl_req+0x194>
    a588:	78da      	ldrb	r2, [r3, #3]
    a58a:	42b2      	cmp	r2, r6
    a58c:	d1f0      	bne.n	a570 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    a58e:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    a590:	4b33      	ldr	r3, [pc, #204]	; (a660 <usbdc_cb_ctl_req+0x284>)
    a592:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    a594:	b33d      	cbz	r5, a5e6 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    a596:	2701      	movs	r7, #1
    a598:	686b      	ldr	r3, [r5, #4]
    a59a:	466a      	mov	r2, sp
    a59c:	4639      	mov	r1, r7
    a59e:	4628      	mov	r0, r5
    a5a0:	4798      	blx	r3
    a5a2:	b120      	cbz	r0, a5ae <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    a5a4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a5a6:	2d00      	cmp	r5, #0
    a5a8:	d1f6      	bne.n	a598 <usbdc_cb_ctl_req+0x1bc>
	return false;
    a5aa:	2000      	movs	r0, #0
    a5ac:	e72e      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    a5ae:	686b      	ldr	r3, [r5, #4]
    a5b0:	466a      	mov	r2, sp
    a5b2:	2100      	movs	r1, #0
    a5b4:	4628      	mov	r0, r5
    a5b6:	4798      	blx	r3
    a5b8:	b9b8      	cbnz	r0, a5ea <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    a5ba:	b136      	cbz	r6, a5ca <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    a5bc:	4a28      	ldr	r2, [pc, #160]	; (a660 <usbdc_cb_ctl_req+0x284>)
    a5be:	2301      	movs	r3, #1
    a5c0:	fa03 f404 	lsl.w	r4, r3, r4
    a5c4:	7f53      	ldrb	r3, [r2, #29]
    a5c6:	4323      	orrs	r3, r4
    a5c8:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    a5ca:	2300      	movs	r3, #0
    a5cc:	461a      	mov	r2, r3
    a5ce:	4619      	mov	r1, r3
    a5d0:	4618      	mov	r0, r3
    a5d2:	4c22      	ldr	r4, [pc, #136]	; (a65c <usbdc_cb_ctl_req+0x280>)
    a5d4:	47a0      	blx	r4
			return true;
    a5d6:	2001      	movs	r0, #1
    a5d8:	e718      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return false;
    a5da:	2000      	movs	r0, #0
    a5dc:	e716      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return false;
    a5de:	2000      	movs	r0, #0
    a5e0:	e714      	b.n	a40c <usbdc_cb_ctl_req+0x30>
			return false;
    a5e2:	2000      	movs	r0, #0
    a5e4:	e712      	b.n	a40c <usbdc_cb_ctl_req+0x30>
	return false;
    a5e6:	2000      	movs	r0, #0
    a5e8:	e710      	b.n	a40c <usbdc_cb_ctl_req+0x30>
			return false;
    a5ea:	2000      	movs	r0, #0
    a5ec:	e70e      	b.n	a40c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    a5ee:	7862      	ldrb	r2, [r4, #1]
    a5f0:	2a0a      	cmp	r2, #10
    a5f2:	f200 80ec 	bhi.w	a7ce <usbdc_cb_ctl_req+0x3f2>
    a5f6:	e8df f012 	tbh	[pc, r2, lsl #1]
    a5fa:	008e      	.short	0x008e
    a5fc:	00ea00ea 	.word	0x00ea00ea
    a600:	00ea00ea 	.word	0x00ea00ea
    a604:	000b00ea 	.word	0x000b00ea
    a608:	008200ea 	.word	0x008200ea
    a60c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    a610:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    a612:	0a13      	lsrs	r3, r2, #8
    a614:	2b02      	cmp	r3, #2
    a616:	d02d      	beq.n	a674 <usbdc_cb_ctl_req+0x298>
    a618:	2b03      	cmp	r3, #3
    a61a:	d050      	beq.n	a6be <usbdc_cb_ctl_req+0x2e2>
    a61c:	2b01      	cmp	r3, #1
    a61e:	d001      	beq.n	a624 <usbdc_cb_ctl_req+0x248>
	return false;
    a620:	2000      	movs	r0, #0
    a622:	e6f3      	b.n	a40c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    a624:	88e2      	ldrh	r2, [r4, #6]
    a626:	2a12      	cmp	r2, #18
    a628:	bf28      	it	cs
    a62a:	2212      	movcs	r2, #18
    a62c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    a62e:	4b0c      	ldr	r3, [pc, #48]	; (a660 <usbdc_cb_ctl_req+0x284>)
    a630:	681b      	ldr	r3, [r3, #0]
    a632:	2201      	movs	r2, #1
    a634:	6859      	ldr	r1, [r3, #4]
    a636:	6818      	ldr	r0, [r3, #0]
    a638:	4b0b      	ldr	r3, [pc, #44]	; (a668 <usbdc_cb_ctl_req+0x28c>)
    a63a:	4798      	blx	r3
	if (!dev_desc) {
    a63c:	4601      	mov	r1, r0
    a63e:	2800      	cmp	r0, #0
    a640:	f000 80c7 	beq.w	a7d2 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    a644:	2300      	movs	r3, #0
    a646:	4622      	mov	r2, r4
    a648:	4628      	mov	r0, r5
    a64a:	4c04      	ldr	r4, [pc, #16]	; (a65c <usbdc_cb_ctl_req+0x280>)
    a64c:	47a0      	blx	r4
    a64e:	fab0 f080 	clz	r0, r0
    a652:	0940      	lsrs	r0, r0, #5
    a654:	e6da      	b.n	a40c <usbdc_cb_ctl_req+0x30>
    a656:	bf00      	nop
    a658:	0000a271 	.word	0x0000a271
    a65c:	0000a3bd 	.word	0x0000a3bd
    a660:	200008c4 	.word	0x200008c4
    a664:	0000a929 	.word	0x0000a929
    a668:	0000a8a9 	.word	0x0000a8a9
    a66c:	0000a225 	.word	0x0000a225
    a670:	00006775 	.word	0x00006775
	uint16_t length   = req->wLength;
    a674:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a676:	4b5b      	ldr	r3, [pc, #364]	; (a7e4 <usbdc_cb_ctl_req+0x408>)
    a678:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    a67a:	681b      	ldr	r3, [r3, #0]
    a67c:	3201      	adds	r2, #1
    a67e:	b2d2      	uxtb	r2, r2
    a680:	6859      	ldr	r1, [r3, #4]
    a682:	6818      	ldr	r0, [r3, #0]
    a684:	4b58      	ldr	r3, [pc, #352]	; (a7e8 <usbdc_cb_ctl_req+0x40c>)
    a686:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a688:	4601      	mov	r1, r0
    a68a:	2800      	cmp	r0, #0
    a68c:	f000 80a3 	beq.w	a7d6 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    a690:	78c3      	ldrb	r3, [r0, #3]
    a692:	7882      	ldrb	r2, [r0, #2]
    a694:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    a698:	b292      	uxth	r2, r2
	if (length <= total_len) {
    a69a:	4294      	cmp	r4, r2
    a69c:	d90d      	bls.n	a6ba <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a69e:	3e01      	subs	r6, #1
    a6a0:	4226      	tst	r6, r4
    a6a2:	bf0c      	ite	eq
    a6a4:	2301      	moveq	r3, #1
    a6a6:	2300      	movne	r3, #0
		length = total_len;
    a6a8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    a6aa:	4622      	mov	r2, r4
    a6ac:	4628      	mov	r0, r5
    a6ae:	4c4f      	ldr	r4, [pc, #316]	; (a7ec <usbdc_cb_ctl_req+0x410>)
    a6b0:	47a0      	blx	r4
    a6b2:	fab0 f080 	clz	r0, r0
    a6b6:	0940      	lsrs	r0, r0, #5
    a6b8:	e6a8      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a6ba:	2300      	movs	r3, #0
    a6bc:	e7f5      	b.n	a6aa <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    a6be:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a6c0:	4b48      	ldr	r3, [pc, #288]	; (a7e4 <usbdc_cb_ctl_req+0x408>)
    a6c2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    a6c4:	681b      	ldr	r3, [r3, #0]
    a6c6:	b2d2      	uxtb	r2, r2
    a6c8:	6859      	ldr	r1, [r3, #4]
    a6ca:	6818      	ldr	r0, [r3, #0]
    a6cc:	4b48      	ldr	r3, [pc, #288]	; (a7f0 <usbdc_cb_ctl_req+0x414>)
    a6ce:	4798      	blx	r3
	if (NULL == str_desc) {
    a6d0:	4601      	mov	r1, r0
    a6d2:	2800      	cmp	r0, #0
    a6d4:	f000 8081 	beq.w	a7da <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    a6d8:	7802      	ldrb	r2, [r0, #0]
    a6da:	4294      	cmp	r4, r2
    a6dc:	d90d      	bls.n	a6fa <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a6de:	3e01      	subs	r6, #1
    a6e0:	4226      	tst	r6, r4
    a6e2:	bf0c      	ite	eq
    a6e4:	2301      	moveq	r3, #1
    a6e6:	2300      	movne	r3, #0
		length = str_desc[0];
    a6e8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    a6ea:	4622      	mov	r2, r4
    a6ec:	4628      	mov	r0, r5
    a6ee:	4c3f      	ldr	r4, [pc, #252]	; (a7ec <usbdc_cb_ctl_req+0x410>)
    a6f0:	47a0      	blx	r4
    a6f2:	fab0 f080 	clz	r0, r0
    a6f6:	0940      	lsrs	r0, r0, #5
    a6f8:	e688      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    a6fa:	2300      	movs	r3, #0
    a6fc:	e7f5      	b.n	a6ea <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    a6fe:	4939      	ldr	r1, [pc, #228]	; (a7e4 <usbdc_cb_ctl_req+0x408>)
    a700:	694b      	ldr	r3, [r1, #20]
    a702:	7eca      	ldrb	r2, [r1, #27]
    a704:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    a706:	2300      	movs	r3, #0
    a708:	2201      	movs	r2, #1
    a70a:	6949      	ldr	r1, [r1, #20]
    a70c:	4628      	mov	r0, r5
    a70e:	4c37      	ldr	r4, [pc, #220]	; (a7ec <usbdc_cb_ctl_req+0x410>)
    a710:	47a0      	blx	r4
		return true;
    a712:	2001      	movs	r0, #1
    a714:	e67a      	b.n	a40c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a716:	f003 031f 	and.w	r3, r3, #31
    a71a:	2b01      	cmp	r3, #1
    a71c:	d903      	bls.n	a726 <usbdc_cb_ctl_req+0x34a>
    a71e:	2b02      	cmp	r3, #2
    a720:	d010      	beq.n	a744 <usbdc_cb_ctl_req+0x368>
		return false;
    a722:	2000      	movs	r0, #0
    a724:	e672      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		st = 0;
    a726:	2300      	movs	r3, #0
    a728:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    a72a:	492e      	ldr	r1, [pc, #184]	; (a7e4 <usbdc_cb_ctl_req+0x408>)
    a72c:	694b      	ldr	r3, [r1, #20]
    a72e:	f8bd 2000 	ldrh.w	r2, [sp]
    a732:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    a734:	2300      	movs	r3, #0
    a736:	2202      	movs	r2, #2
    a738:	6949      	ldr	r1, [r1, #20]
    a73a:	4628      	mov	r0, r5
    a73c:	4c2b      	ldr	r4, [pc, #172]	; (a7ec <usbdc_cb_ctl_req+0x410>)
    a73e:	47a0      	blx	r4
	return true;
    a740:	2001      	movs	r0, #1
    a742:	e663      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    a744:	88a0      	ldrh	r0, [r4, #4]
    a746:	2102      	movs	r1, #2
    a748:	b2c0      	uxtb	r0, r0
    a74a:	4b2a      	ldr	r3, [pc, #168]	; (a7f4 <usbdc_cb_ctl_req+0x418>)
    a74c:	4798      	blx	r3
		if (st < 0) {
    a74e:	2800      	cmp	r0, #0
    a750:	db03      	blt.n	a75a <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    a752:	f000 0001 	and.w	r0, r0, #1
    a756:	9000      	str	r0, [sp, #0]
    a758:	e7e7      	b.n	a72a <usbdc_cb_ctl_req+0x34e>
			return false;
    a75a:	2000      	movs	r0, #0
    a75c:	e656      	b.n	a40c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    a75e:	4b21      	ldr	r3, [pc, #132]	; (a7e4 <usbdc_cb_ctl_req+0x408>)
    a760:	7f5b      	ldrb	r3, [r3, #29]
    a762:	88a2      	ldrh	r2, [r4, #4]
    a764:	4113      	asrs	r3, r2
    a766:	f013 0f01 	tst.w	r3, #1
    a76a:	d012      	beq.n	a792 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a76c:	4b1d      	ldr	r3, [pc, #116]	; (a7e4 <usbdc_cb_ctl_req+0x408>)
    a76e:	691d      	ldr	r5, [r3, #16]
	return false;
    a770:	2000      	movs	r0, #0
	while (NULL != func) {
    a772:	2d00      	cmp	r5, #0
    a774:	f43f ae4a 	beq.w	a40c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    a778:	2602      	movs	r6, #2
    a77a:	686b      	ldr	r3, [r5, #4]
    a77c:	4622      	mov	r2, r4
    a77e:	4631      	mov	r1, r6
    a780:	4628      	mov	r0, r5
    a782:	4798      	blx	r3
    a784:	2800      	cmp	r0, #0
    a786:	da0f      	bge.n	a7a8 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    a788:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a78a:	2d00      	cmp	r5, #0
    a78c:	d1f5      	bne.n	a77a <usbdc_cb_ctl_req+0x39e>
	return false;
    a78e:	2000      	movs	r0, #0
    a790:	e63c      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    a792:	4914      	ldr	r1, [pc, #80]	; (a7e4 <usbdc_cb_ctl_req+0x408>)
    a794:	694b      	ldr	r3, [r1, #20]
    a796:	2000      	movs	r0, #0
    a798:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a79a:	4603      	mov	r3, r0
    a79c:	2201      	movs	r2, #1
    a79e:	6949      	ldr	r1, [r1, #20]
    a7a0:	4c12      	ldr	r4, [pc, #72]	; (a7ec <usbdc_cb_ctl_req+0x410>)
    a7a2:	47a0      	blx	r4
		return true;
    a7a4:	2001      	movs	r0, #1
    a7a6:	e631      	b.n	a40c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    a7a8:	490e      	ldr	r1, [pc, #56]	; (a7e4 <usbdc_cb_ctl_req+0x408>)
    a7aa:	694b      	ldr	r3, [r1, #20]
    a7ac:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a7ae:	2300      	movs	r3, #0
    a7b0:	2201      	movs	r2, #1
    a7b2:	6949      	ldr	r1, [r1, #20]
    a7b4:	4618      	mov	r0, r3
    a7b6:	4c0d      	ldr	r4, [pc, #52]	; (a7ec <usbdc_cb_ctl_req+0x410>)
    a7b8:	47a0      	blx	r4
			return true;
    a7ba:	2001      	movs	r0, #1
    a7bc:	e626      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return true;
    a7be:	2001      	movs	r0, #1
    a7c0:	e624      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return false;
    a7c2:	2000      	movs	r0, #0
    a7c4:	e622      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return false;
    a7c6:	2000      	movs	r0, #0
    a7c8:	e620      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return false;
    a7ca:	2000      	movs	r0, #0
    a7cc:	e61e      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return false;
    a7ce:	2000      	movs	r0, #0
    a7d0:	e61c      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return false;
    a7d2:	2000      	movs	r0, #0
    a7d4:	e61a      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return false;
    a7d6:	2000      	movs	r0, #0
    a7d8:	e618      	b.n	a40c <usbdc_cb_ctl_req+0x30>
		return false;
    a7da:	2000      	movs	r0, #0
    a7dc:	e616      	b.n	a40c <usbdc_cb_ctl_req+0x30>
			return false;
    a7de:	2000      	movs	r0, #0
    a7e0:	e614      	b.n	a40c <usbdc_cb_ctl_req+0x30>
    a7e2:	bf00      	nop
    a7e4:	200008c4 	.word	0x200008c4
    a7e8:	0000a929 	.word	0x0000a929
    a7ec:	0000a3bd 	.word	0x0000a3bd
    a7f0:	0000a991 	.word	0x0000a991
    a7f4:	00006775 	.word	0x00006775

0000a7f8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    a7f8:	b508      	push	{r3, lr}
	switch (type) {
    a7fa:	2801      	cmp	r0, #1
    a7fc:	d007      	beq.n	a80e <usbdc_register_handler+0x16>
    a7fe:	b110      	cbz	r0, a806 <usbdc_register_handler+0xe>
    a800:	2802      	cmp	r0, #2
    a802:	d008      	beq.n	a816 <usbdc_register_handler+0x1e>
    a804:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    a806:	4806      	ldr	r0, [pc, #24]	; (a820 <usbdc_register_handler+0x28>)
    a808:	4b06      	ldr	r3, [pc, #24]	; (a824 <usbdc_register_handler+0x2c>)
    a80a:	4798      	blx	r3
		break;
    a80c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    a80e:	4806      	ldr	r0, [pc, #24]	; (a828 <usbdc_register_handler+0x30>)
    a810:	4b04      	ldr	r3, [pc, #16]	; (a824 <usbdc_register_handler+0x2c>)
    a812:	4798      	blx	r3
		break;
    a814:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    a816:	4805      	ldr	r0, [pc, #20]	; (a82c <usbdc_register_handler+0x34>)
    a818:	4b02      	ldr	r3, [pc, #8]	; (a824 <usbdc_register_handler+0x2c>)
    a81a:	4798      	blx	r3
    a81c:	bd08      	pop	{r3, pc}
    a81e:	bf00      	nop
    a820:	200008c8 	.word	0x200008c8
    a824:	00006839 	.word	0x00006839
    a828:	200008cc 	.word	0x200008cc
    a82c:	200008d0 	.word	0x200008d0

0000a830 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    a830:	b538      	push	{r3, r4, r5, lr}
    a832:	4605      	mov	r5, r0
	ASSERT(ctrl_buf);

	int32_t rc;

	rc = usb_d_init();
    a834:	4b09      	ldr	r3, [pc, #36]	; (a85c <usbdc_init+0x2c>)
    a836:	4798      	blx	r3
	if (rc < 0) {
    a838:	2800      	cmp	r0, #0
    a83a:	db0e      	blt.n	a85a <usbdc_init+0x2a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    a83c:	4c08      	ldr	r4, [pc, #32]	; (a860 <usbdc_init+0x30>)
    a83e:	2220      	movs	r2, #32
    a840:	2100      	movs	r1, #0
    a842:	4620      	mov	r0, r4
    a844:	4b07      	ldr	r3, [pc, #28]	; (a864 <usbdc_init+0x34>)
    a846:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    a848:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    a84a:	4907      	ldr	r1, [pc, #28]	; (a868 <usbdc_init+0x38>)
    a84c:	2000      	movs	r0, #0
    a84e:	4c07      	ldr	r4, [pc, #28]	; (a86c <usbdc_init+0x3c>)
    a850:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    a852:	4907      	ldr	r1, [pc, #28]	; (a870 <usbdc_init+0x40>)
    a854:	2001      	movs	r0, #1
    a856:	47a0      	blx	r4

	return 0;
    a858:	2000      	movs	r0, #0
}
    a85a:	bd38      	pop	{r3, r4, r5, pc}
    a85c:	000064f5 	.word	0x000064f5
    a860:	200008c4 	.word	0x200008c4
    a864:	0000aa7f 	.word	0x0000aa7f
    a868:	0000a2b1 	.word	0x0000a2b1
    a86c:	0000655d 	.word	0x0000655d
    a870:	0000a39d 	.word	0x0000a39d

0000a874 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    a874:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    a876:	4601      	mov	r1, r0
    a878:	4801      	ldr	r0, [pc, #4]	; (a880 <usbdc_register_function+0xc>)
    a87a:	4b02      	ldr	r3, [pc, #8]	; (a884 <usbdc_register_function+0x10>)
    a87c:	4798      	blx	r3
    a87e:	bd08      	pop	{r3, pc}
    a880:	200008d4 	.word	0x200008d4
    a884:	00006839 	.word	0x00006839

0000a888 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    a888:	4b01      	ldr	r3, [pc, #4]	; (a890 <usbdc_get_ctrl_buffer+0x8>)
    a88a:	6958      	ldr	r0, [r3, #20]
    a88c:	4770      	bx	lr
    a88e:	bf00      	nop
    a890:	200008c4 	.word	0x200008c4

0000a894 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    a894:	4b03      	ldr	r3, [pc, #12]	; (a8a4 <usbdc_get_state+0x10>)
    a896:	7e98      	ldrb	r0, [r3, #26]
    a898:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    a89c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    a89e:	bf18      	it	ne
    a8a0:	2010      	movne	r0, #16
    a8a2:	4770      	bx	lr
    a8a4:	200008c4 	.word	0x200008c4

0000a8a8 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    a8a8:	4288      	cmp	r0, r1
    a8aa:	d214      	bcs.n	a8d6 <usb_find_desc+0x2e>
	return desc[0];
    a8ac:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a8ae:	2b01      	cmp	r3, #1
    a8b0:	d913      	bls.n	a8da <usb_find_desc+0x32>
{
    a8b2:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    a8b4:	7844      	ldrb	r4, [r0, #1]
    a8b6:	4294      	cmp	r4, r2
    a8b8:	d00a      	beq.n	a8d0 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    a8ba:	4418      	add	r0, r3
	while (desc < eof) {
    a8bc:	4281      	cmp	r1, r0
    a8be:	d906      	bls.n	a8ce <usb_find_desc+0x26>
	return desc[0];
    a8c0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a8c2:	2b01      	cmp	r3, #1
    a8c4:	d90b      	bls.n	a8de <usb_find_desc+0x36>
	return desc[1];
    a8c6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    a8c8:	4294      	cmp	r4, r2
    a8ca:	d1f6      	bne.n	a8ba <usb_find_desc+0x12>
    a8cc:	e000      	b.n	a8d0 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    a8ce:	2000      	movs	r0, #0
}
    a8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    a8d4:	4770      	bx	lr
	return NULL;
    a8d6:	2000      	movs	r0, #0
    a8d8:	4770      	bx	lr
		_desc_len_check();
    a8da:	2000      	movs	r0, #0
    a8dc:	4770      	bx	lr
    a8de:	2000      	movs	r0, #0
    a8e0:	e7f6      	b.n	a8d0 <usb_find_desc+0x28>

0000a8e2 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    a8e2:	4288      	cmp	r0, r1
    a8e4:	d216      	bcs.n	a914 <usb_find_ep_desc+0x32>
	return desc[0];
    a8e6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a8e8:	2b01      	cmp	r3, #1
    a8ea:	d915      	bls.n	a918 <usb_find_ep_desc+0x36>
	return desc[1];
    a8ec:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    a8ee:	2a04      	cmp	r2, #4
    a8f0:	d014      	beq.n	a91c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    a8f2:	2a05      	cmp	r2, #5
    a8f4:	d00b      	beq.n	a90e <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    a8f6:	4418      	add	r0, r3
	while (desc < eof) {
    a8f8:	4281      	cmp	r1, r0
    a8fa:	d909      	bls.n	a910 <usb_find_ep_desc+0x2e>
	return desc[0];
    a8fc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    a8fe:	2b01      	cmp	r3, #1
    a900:	d90e      	bls.n	a920 <usb_find_ep_desc+0x3e>
	return desc[1];
    a902:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    a904:	2a04      	cmp	r2, #4
    a906:	d00d      	beq.n	a924 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    a908:	2a05      	cmp	r2, #5
    a90a:	d1f4      	bne.n	a8f6 <usb_find_ep_desc+0x14>
    a90c:	e00b      	b.n	a926 <usb_find_ep_desc+0x44>
    a90e:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    a910:	2000      	movs	r0, #0
    a912:	4770      	bx	lr
    a914:	2000      	movs	r0, #0
    a916:	4770      	bx	lr
		_desc_len_check();
    a918:	2000      	movs	r0, #0
    a91a:	4770      	bx	lr
	return NULL;
    a91c:	2000      	movs	r0, #0
    a91e:	4770      	bx	lr
		_desc_len_check();
    a920:	2000      	movs	r0, #0
    a922:	4770      	bx	lr
	return NULL;
    a924:	2000      	movs	r0, #0
}
    a926:	4770      	bx	lr

0000a928 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    a928:	b538      	push	{r3, r4, r5, lr}
    a92a:	460c      	mov	r4, r1
    a92c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    a92e:	2202      	movs	r2, #2
    a930:	4b16      	ldr	r3, [pc, #88]	; (a98c <usb_find_cfg_desc+0x64>)
    a932:	4798      	blx	r3
	if (!desc) {
    a934:	4603      	mov	r3, r0
    a936:	b1e8      	cbz	r0, a974 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    a938:	4284      	cmp	r4, r0
    a93a:	d91d      	bls.n	a978 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    a93c:	7802      	ldrb	r2, [r0, #0]
    a93e:	2a01      	cmp	r2, #1
    a940:	d91c      	bls.n	a97c <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    a942:	7842      	ldrb	r2, [r0, #1]
    a944:	2a02      	cmp	r2, #2
    a946:	d11b      	bne.n	a980 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    a948:	7942      	ldrb	r2, [r0, #5]
    a94a:	42aa      	cmp	r2, r5
    a94c:	d012      	beq.n	a974 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    a94e:	78d9      	ldrb	r1, [r3, #3]
    a950:	789a      	ldrb	r2, [r3, #2]
    a952:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    a956:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    a95a:	429c      	cmp	r4, r3
    a95c:	d909      	bls.n	a972 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    a95e:	781a      	ldrb	r2, [r3, #0]
    a960:	2a01      	cmp	r2, #1
    a962:	d90f      	bls.n	a984 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    a964:	785a      	ldrb	r2, [r3, #1]
    a966:	2a02      	cmp	r2, #2
    a968:	d10e      	bne.n	a988 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    a96a:	795a      	ldrb	r2, [r3, #5]
    a96c:	42aa      	cmp	r2, r5
    a96e:	d1ee      	bne.n	a94e <usb_find_cfg_desc+0x26>
    a970:	e000      	b.n	a974 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    a972:	2300      	movs	r3, #0
}
    a974:	4618      	mov	r0, r3
    a976:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    a978:	2300      	movs	r3, #0
    a97a:	e7fb      	b.n	a974 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    a97c:	2300      	movs	r3, #0
    a97e:	e7f9      	b.n	a974 <usb_find_cfg_desc+0x4c>
	return NULL;
    a980:	2300      	movs	r3, #0
    a982:	e7f7      	b.n	a974 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    a984:	2300      	movs	r3, #0
    a986:	e7f5      	b.n	a974 <usb_find_cfg_desc+0x4c>
	return NULL;
    a988:	2300      	movs	r3, #0
    a98a:	e7f3      	b.n	a974 <usb_find_cfg_desc+0x4c>
    a98c:	0000a8a9 	.word	0x0000a8a9

0000a990 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    a990:	4288      	cmp	r0, r1
    a992:	d217      	bcs.n	a9c4 <usb_find_str_desc+0x34>
{
    a994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a998:	460d      	mov	r5, r1
    a99a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    a99c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    a99e:	f04f 0803 	mov.w	r8, #3
    a9a2:	4f0c      	ldr	r7, [pc, #48]	; (a9d4 <usb_find_str_desc+0x44>)
    a9a4:	4642      	mov	r2, r8
    a9a6:	4629      	mov	r1, r5
    a9a8:	47b8      	blx	r7
		if (desc) {
    a9aa:	4603      	mov	r3, r0
    a9ac:	b170      	cbz	r0, a9cc <usb_find_str_desc+0x3c>
	return desc[0];
    a9ae:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    a9b0:	2801      	cmp	r0, #1
    a9b2:	d90a      	bls.n	a9ca <usb_find_str_desc+0x3a>
			if (i == str_index) {
    a9b4:	42a6      	cmp	r6, r4
    a9b6:	d009      	beq.n	a9cc <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    a9b8:	4418      	add	r0, r3
    a9ba:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    a9bc:	4285      	cmp	r5, r0
    a9be:	d8f1      	bhi.n	a9a4 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    a9c0:	2300      	movs	r3, #0
    a9c2:	e003      	b.n	a9cc <usb_find_str_desc+0x3c>
    a9c4:	2300      	movs	r3, #0
}
    a9c6:	4618      	mov	r0, r3
    a9c8:	4770      	bx	lr
			_desc_len_check();
    a9ca:	2300      	movs	r3, #0
}
    a9cc:	4618      	mov	r0, r3
    a9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9d2:	bf00      	nop
    a9d4:	0000a8a9 	.word	0x0000a8a9

0000a9d8 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    a9d8:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a9da:	4805      	ldr	r0, [pc, #20]	; (a9f0 <composite_device_init+0x18>)
    a9dc:	4b05      	ldr	r3, [pc, #20]	; (a9f4 <composite_device_init+0x1c>)
    a9de:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    a9e0:	4b05      	ldr	r3, [pc, #20]	; (a9f8 <composite_device_init+0x20>)
    a9e2:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    a9e4:	4b05      	ldr	r3, [pc, #20]	; (a9fc <composite_device_init+0x24>)
    a9e6:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    a9e8:	4b05      	ldr	r3, [pc, #20]	; (aa00 <composite_device_init+0x28>)
    a9ea:	4798      	blx	r3
    a9ec:	bd08      	pop	{r3, pc}
    a9ee:	bf00      	nop
    a9f0:	200008fc 	.word	0x200008fc
    a9f4:	0000a831 	.word	0x0000a831
    a9f8:	00009dd9 	.word	0x00009dd9
    a9fc:	0000a1e1 	.word	0x0000a1e1
    aa00:	00009ff1 	.word	0x00009ff1

0000aa04 <usb_init>:
		}
	}
}

void usb_init(void)
{
    aa04:	b508      	push	{r3, lr}

	composite_device_init();
    aa06:	4b01      	ldr	r3, [pc, #4]	; (aa0c <usb_init+0x8>)
    aa08:	4798      	blx	r3
    aa0a:	bd08      	pop	{r3, pc}
    aa0c:	0000a9d9 	.word	0x0000a9d9

0000aa10 <__libc_init_array>:
    aa10:	b570      	push	{r4, r5, r6, lr}
    aa12:	4e0d      	ldr	r6, [pc, #52]	; (aa48 <__libc_init_array+0x38>)
    aa14:	4c0d      	ldr	r4, [pc, #52]	; (aa4c <__libc_init_array+0x3c>)
    aa16:	1ba4      	subs	r4, r4, r6
    aa18:	10a4      	asrs	r4, r4, #2
    aa1a:	2500      	movs	r5, #0
    aa1c:	42a5      	cmp	r5, r4
    aa1e:	d109      	bne.n	aa34 <__libc_init_array+0x24>
    aa20:	4e0b      	ldr	r6, [pc, #44]	; (aa50 <__libc_init_array+0x40>)
    aa22:	4c0c      	ldr	r4, [pc, #48]	; (aa54 <__libc_init_array+0x44>)
    aa24:	f001 fc00 	bl	c228 <_init>
    aa28:	1ba4      	subs	r4, r4, r6
    aa2a:	10a4      	asrs	r4, r4, #2
    aa2c:	2500      	movs	r5, #0
    aa2e:	42a5      	cmp	r5, r4
    aa30:	d105      	bne.n	aa3e <__libc_init_array+0x2e>
    aa32:	bd70      	pop	{r4, r5, r6, pc}
    aa34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    aa38:	4798      	blx	r3
    aa3a:	3501      	adds	r5, #1
    aa3c:	e7ee      	b.n	aa1c <__libc_init_array+0xc>
    aa3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    aa42:	4798      	blx	r3
    aa44:	3501      	adds	r5, #1
    aa46:	e7f2      	b.n	aa2e <__libc_init_array+0x1e>
    aa48:	0000c234 	.word	0x0000c234
    aa4c:	0000c234 	.word	0x0000c234
    aa50:	0000c234 	.word	0x0000c234
    aa54:	0000c238 	.word	0x0000c238

0000aa58 <malloc>:
    aa58:	4b02      	ldr	r3, [pc, #8]	; (aa64 <malloc+0xc>)
    aa5a:	4601      	mov	r1, r0
    aa5c:	6818      	ldr	r0, [r3, #0]
    aa5e:	f000 b865 	b.w	ab2c <_malloc_r>
    aa62:	bf00      	nop
    aa64:	20000058 	.word	0x20000058

0000aa68 <memcpy>:
    aa68:	b510      	push	{r4, lr}
    aa6a:	1e43      	subs	r3, r0, #1
    aa6c:	440a      	add	r2, r1
    aa6e:	4291      	cmp	r1, r2
    aa70:	d100      	bne.n	aa74 <memcpy+0xc>
    aa72:	bd10      	pop	{r4, pc}
    aa74:	f811 4b01 	ldrb.w	r4, [r1], #1
    aa78:	f803 4f01 	strb.w	r4, [r3, #1]!
    aa7c:	e7f7      	b.n	aa6e <memcpy+0x6>

0000aa7e <memset>:
    aa7e:	4402      	add	r2, r0
    aa80:	4603      	mov	r3, r0
    aa82:	4293      	cmp	r3, r2
    aa84:	d100      	bne.n	aa88 <memset+0xa>
    aa86:	4770      	bx	lr
    aa88:	f803 1b01 	strb.w	r1, [r3], #1
    aa8c:	e7f9      	b.n	aa82 <memset+0x4>
	...

0000aa90 <_free_r>:
    aa90:	b538      	push	{r3, r4, r5, lr}
    aa92:	4605      	mov	r5, r0
    aa94:	2900      	cmp	r1, #0
    aa96:	d045      	beq.n	ab24 <_free_r+0x94>
    aa98:	f851 3c04 	ldr.w	r3, [r1, #-4]
    aa9c:	1f0c      	subs	r4, r1, #4
    aa9e:	2b00      	cmp	r3, #0
    aaa0:	bfb8      	it	lt
    aaa2:	18e4      	addlt	r4, r4, r3
    aaa4:	f000 fc1e 	bl	b2e4 <__malloc_lock>
    aaa8:	4a1f      	ldr	r2, [pc, #124]	; (ab28 <_free_r+0x98>)
    aaaa:	6813      	ldr	r3, [r2, #0]
    aaac:	4610      	mov	r0, r2
    aaae:	b933      	cbnz	r3, aabe <_free_r+0x2e>
    aab0:	6063      	str	r3, [r4, #4]
    aab2:	6014      	str	r4, [r2, #0]
    aab4:	4628      	mov	r0, r5
    aab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    aaba:	f000 bc14 	b.w	b2e6 <__malloc_unlock>
    aabe:	42a3      	cmp	r3, r4
    aac0:	d90c      	bls.n	aadc <_free_r+0x4c>
    aac2:	6821      	ldr	r1, [r4, #0]
    aac4:	1862      	adds	r2, r4, r1
    aac6:	4293      	cmp	r3, r2
    aac8:	bf04      	itt	eq
    aaca:	681a      	ldreq	r2, [r3, #0]
    aacc:	685b      	ldreq	r3, [r3, #4]
    aace:	6063      	str	r3, [r4, #4]
    aad0:	bf04      	itt	eq
    aad2:	1852      	addeq	r2, r2, r1
    aad4:	6022      	streq	r2, [r4, #0]
    aad6:	6004      	str	r4, [r0, #0]
    aad8:	e7ec      	b.n	aab4 <_free_r+0x24>
    aada:	4613      	mov	r3, r2
    aadc:	685a      	ldr	r2, [r3, #4]
    aade:	b10a      	cbz	r2, aae4 <_free_r+0x54>
    aae0:	42a2      	cmp	r2, r4
    aae2:	d9fa      	bls.n	aada <_free_r+0x4a>
    aae4:	6819      	ldr	r1, [r3, #0]
    aae6:	1858      	adds	r0, r3, r1
    aae8:	42a0      	cmp	r0, r4
    aaea:	d10b      	bne.n	ab04 <_free_r+0x74>
    aaec:	6820      	ldr	r0, [r4, #0]
    aaee:	4401      	add	r1, r0
    aaf0:	1858      	adds	r0, r3, r1
    aaf2:	4282      	cmp	r2, r0
    aaf4:	6019      	str	r1, [r3, #0]
    aaf6:	d1dd      	bne.n	aab4 <_free_r+0x24>
    aaf8:	6810      	ldr	r0, [r2, #0]
    aafa:	6852      	ldr	r2, [r2, #4]
    aafc:	605a      	str	r2, [r3, #4]
    aafe:	4401      	add	r1, r0
    ab00:	6019      	str	r1, [r3, #0]
    ab02:	e7d7      	b.n	aab4 <_free_r+0x24>
    ab04:	d902      	bls.n	ab0c <_free_r+0x7c>
    ab06:	230c      	movs	r3, #12
    ab08:	602b      	str	r3, [r5, #0]
    ab0a:	e7d3      	b.n	aab4 <_free_r+0x24>
    ab0c:	6820      	ldr	r0, [r4, #0]
    ab0e:	1821      	adds	r1, r4, r0
    ab10:	428a      	cmp	r2, r1
    ab12:	bf04      	itt	eq
    ab14:	6811      	ldreq	r1, [r2, #0]
    ab16:	6852      	ldreq	r2, [r2, #4]
    ab18:	6062      	str	r2, [r4, #4]
    ab1a:	bf04      	itt	eq
    ab1c:	1809      	addeq	r1, r1, r0
    ab1e:	6021      	streq	r1, [r4, #0]
    ab20:	605c      	str	r4, [r3, #4]
    ab22:	e7c7      	b.n	aab4 <_free_r+0x24>
    ab24:	bd38      	pop	{r3, r4, r5, pc}
    ab26:	bf00      	nop
    ab28:	2000093c 	.word	0x2000093c

0000ab2c <_malloc_r>:
    ab2c:	b570      	push	{r4, r5, r6, lr}
    ab2e:	1ccd      	adds	r5, r1, #3
    ab30:	f025 0503 	bic.w	r5, r5, #3
    ab34:	3508      	adds	r5, #8
    ab36:	2d0c      	cmp	r5, #12
    ab38:	bf38      	it	cc
    ab3a:	250c      	movcc	r5, #12
    ab3c:	2d00      	cmp	r5, #0
    ab3e:	4606      	mov	r6, r0
    ab40:	db01      	blt.n	ab46 <_malloc_r+0x1a>
    ab42:	42a9      	cmp	r1, r5
    ab44:	d903      	bls.n	ab4e <_malloc_r+0x22>
    ab46:	230c      	movs	r3, #12
    ab48:	6033      	str	r3, [r6, #0]
    ab4a:	2000      	movs	r0, #0
    ab4c:	bd70      	pop	{r4, r5, r6, pc}
    ab4e:	f000 fbc9 	bl	b2e4 <__malloc_lock>
    ab52:	4a23      	ldr	r2, [pc, #140]	; (abe0 <_malloc_r+0xb4>)
    ab54:	6814      	ldr	r4, [r2, #0]
    ab56:	4621      	mov	r1, r4
    ab58:	b991      	cbnz	r1, ab80 <_malloc_r+0x54>
    ab5a:	4c22      	ldr	r4, [pc, #136]	; (abe4 <_malloc_r+0xb8>)
    ab5c:	6823      	ldr	r3, [r4, #0]
    ab5e:	b91b      	cbnz	r3, ab68 <_malloc_r+0x3c>
    ab60:	4630      	mov	r0, r6
    ab62:	f000 f859 	bl	ac18 <_sbrk_r>
    ab66:	6020      	str	r0, [r4, #0]
    ab68:	4629      	mov	r1, r5
    ab6a:	4630      	mov	r0, r6
    ab6c:	f000 f854 	bl	ac18 <_sbrk_r>
    ab70:	1c43      	adds	r3, r0, #1
    ab72:	d126      	bne.n	abc2 <_malloc_r+0x96>
    ab74:	230c      	movs	r3, #12
    ab76:	6033      	str	r3, [r6, #0]
    ab78:	4630      	mov	r0, r6
    ab7a:	f000 fbb4 	bl	b2e6 <__malloc_unlock>
    ab7e:	e7e4      	b.n	ab4a <_malloc_r+0x1e>
    ab80:	680b      	ldr	r3, [r1, #0]
    ab82:	1b5b      	subs	r3, r3, r5
    ab84:	d41a      	bmi.n	abbc <_malloc_r+0x90>
    ab86:	2b0b      	cmp	r3, #11
    ab88:	d90f      	bls.n	abaa <_malloc_r+0x7e>
    ab8a:	600b      	str	r3, [r1, #0]
    ab8c:	50cd      	str	r5, [r1, r3]
    ab8e:	18cc      	adds	r4, r1, r3
    ab90:	4630      	mov	r0, r6
    ab92:	f000 fba8 	bl	b2e6 <__malloc_unlock>
    ab96:	f104 000b 	add.w	r0, r4, #11
    ab9a:	1d23      	adds	r3, r4, #4
    ab9c:	f020 0007 	bic.w	r0, r0, #7
    aba0:	1ac3      	subs	r3, r0, r3
    aba2:	d01b      	beq.n	abdc <_malloc_r+0xb0>
    aba4:	425a      	negs	r2, r3
    aba6:	50e2      	str	r2, [r4, r3]
    aba8:	bd70      	pop	{r4, r5, r6, pc}
    abaa:	428c      	cmp	r4, r1
    abac:	bf0d      	iteet	eq
    abae:	6863      	ldreq	r3, [r4, #4]
    abb0:	684b      	ldrne	r3, [r1, #4]
    abb2:	6063      	strne	r3, [r4, #4]
    abb4:	6013      	streq	r3, [r2, #0]
    abb6:	bf18      	it	ne
    abb8:	460c      	movne	r4, r1
    abba:	e7e9      	b.n	ab90 <_malloc_r+0x64>
    abbc:	460c      	mov	r4, r1
    abbe:	6849      	ldr	r1, [r1, #4]
    abc0:	e7ca      	b.n	ab58 <_malloc_r+0x2c>
    abc2:	1cc4      	adds	r4, r0, #3
    abc4:	f024 0403 	bic.w	r4, r4, #3
    abc8:	42a0      	cmp	r0, r4
    abca:	d005      	beq.n	abd8 <_malloc_r+0xac>
    abcc:	1a21      	subs	r1, r4, r0
    abce:	4630      	mov	r0, r6
    abd0:	f000 f822 	bl	ac18 <_sbrk_r>
    abd4:	3001      	adds	r0, #1
    abd6:	d0cd      	beq.n	ab74 <_malloc_r+0x48>
    abd8:	6025      	str	r5, [r4, #0]
    abda:	e7d9      	b.n	ab90 <_malloc_r+0x64>
    abdc:	bd70      	pop	{r4, r5, r6, pc}
    abde:	bf00      	nop
    abe0:	2000093c 	.word	0x2000093c
    abe4:	20000940 	.word	0x20000940

0000abe8 <iprintf>:
    abe8:	b40f      	push	{r0, r1, r2, r3}
    abea:	4b0a      	ldr	r3, [pc, #40]	; (ac14 <iprintf+0x2c>)
    abec:	b513      	push	{r0, r1, r4, lr}
    abee:	681c      	ldr	r4, [r3, #0]
    abf0:	b124      	cbz	r4, abfc <iprintf+0x14>
    abf2:	69a3      	ldr	r3, [r4, #24]
    abf4:	b913      	cbnz	r3, abfc <iprintf+0x14>
    abf6:	4620      	mov	r0, r4
    abf8:	f000 fa86 	bl	b108 <__sinit>
    abfc:	ab05      	add	r3, sp, #20
    abfe:	9a04      	ldr	r2, [sp, #16]
    ac00:	68a1      	ldr	r1, [r4, #8]
    ac02:	9301      	str	r3, [sp, #4]
    ac04:	4620      	mov	r0, r4
    ac06:	f000 fb97 	bl	b338 <_vfiprintf_r>
    ac0a:	b002      	add	sp, #8
    ac0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac10:	b004      	add	sp, #16
    ac12:	4770      	bx	lr
    ac14:	20000058 	.word	0x20000058

0000ac18 <_sbrk_r>:
    ac18:	b538      	push	{r3, r4, r5, lr}
    ac1a:	4c06      	ldr	r4, [pc, #24]	; (ac34 <_sbrk_r+0x1c>)
    ac1c:	2300      	movs	r3, #0
    ac1e:	4605      	mov	r5, r0
    ac20:	4608      	mov	r0, r1
    ac22:	6023      	str	r3, [r4, #0]
    ac24:	f7fb fe4e 	bl	68c4 <_sbrk>
    ac28:	1c43      	adds	r3, r0, #1
    ac2a:	d102      	bne.n	ac32 <_sbrk_r+0x1a>
    ac2c:	6823      	ldr	r3, [r4, #0]
    ac2e:	b103      	cbz	r3, ac32 <_sbrk_r+0x1a>
    ac30:	602b      	str	r3, [r5, #0]
    ac32:	bd38      	pop	{r3, r4, r5, pc}
    ac34:	200076a0 	.word	0x200076a0

0000ac38 <setbuf>:
    ac38:	2900      	cmp	r1, #0
    ac3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ac3e:	bf0c      	ite	eq
    ac40:	2202      	moveq	r2, #2
    ac42:	2200      	movne	r2, #0
    ac44:	f000 b800 	b.w	ac48 <setvbuf>

0000ac48 <setvbuf>:
    ac48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ac4c:	461d      	mov	r5, r3
    ac4e:	4b51      	ldr	r3, [pc, #324]	; (ad94 <setvbuf+0x14c>)
    ac50:	681e      	ldr	r6, [r3, #0]
    ac52:	4604      	mov	r4, r0
    ac54:	460f      	mov	r7, r1
    ac56:	4690      	mov	r8, r2
    ac58:	b126      	cbz	r6, ac64 <setvbuf+0x1c>
    ac5a:	69b3      	ldr	r3, [r6, #24]
    ac5c:	b913      	cbnz	r3, ac64 <setvbuf+0x1c>
    ac5e:	4630      	mov	r0, r6
    ac60:	f000 fa52 	bl	b108 <__sinit>
    ac64:	4b4c      	ldr	r3, [pc, #304]	; (ad98 <setvbuf+0x150>)
    ac66:	429c      	cmp	r4, r3
    ac68:	d152      	bne.n	ad10 <setvbuf+0xc8>
    ac6a:	6874      	ldr	r4, [r6, #4]
    ac6c:	f1b8 0f02 	cmp.w	r8, #2
    ac70:	d006      	beq.n	ac80 <setvbuf+0x38>
    ac72:	f1b8 0f01 	cmp.w	r8, #1
    ac76:	f200 8089 	bhi.w	ad8c <setvbuf+0x144>
    ac7a:	2d00      	cmp	r5, #0
    ac7c:	f2c0 8086 	blt.w	ad8c <setvbuf+0x144>
    ac80:	4621      	mov	r1, r4
    ac82:	4630      	mov	r0, r6
    ac84:	f000 f9d6 	bl	b034 <_fflush_r>
    ac88:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ac8a:	b141      	cbz	r1, ac9e <setvbuf+0x56>
    ac8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    ac90:	4299      	cmp	r1, r3
    ac92:	d002      	beq.n	ac9a <setvbuf+0x52>
    ac94:	4630      	mov	r0, r6
    ac96:	f7ff fefb 	bl	aa90 <_free_r>
    ac9a:	2300      	movs	r3, #0
    ac9c:	6363      	str	r3, [r4, #52]	; 0x34
    ac9e:	2300      	movs	r3, #0
    aca0:	61a3      	str	r3, [r4, #24]
    aca2:	6063      	str	r3, [r4, #4]
    aca4:	89a3      	ldrh	r3, [r4, #12]
    aca6:	061b      	lsls	r3, r3, #24
    aca8:	d503      	bpl.n	acb2 <setvbuf+0x6a>
    acaa:	6921      	ldr	r1, [r4, #16]
    acac:	4630      	mov	r0, r6
    acae:	f7ff feef 	bl	aa90 <_free_r>
    acb2:	89a3      	ldrh	r3, [r4, #12]
    acb4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    acb8:	f023 0303 	bic.w	r3, r3, #3
    acbc:	f1b8 0f02 	cmp.w	r8, #2
    acc0:	81a3      	strh	r3, [r4, #12]
    acc2:	d05d      	beq.n	ad80 <setvbuf+0x138>
    acc4:	ab01      	add	r3, sp, #4
    acc6:	466a      	mov	r2, sp
    acc8:	4621      	mov	r1, r4
    acca:	4630      	mov	r0, r6
    accc:	f000 faa6 	bl	b21c <__swhatbuf_r>
    acd0:	89a3      	ldrh	r3, [r4, #12]
    acd2:	4318      	orrs	r0, r3
    acd4:	81a0      	strh	r0, [r4, #12]
    acd6:	bb2d      	cbnz	r5, ad24 <setvbuf+0xdc>
    acd8:	9d00      	ldr	r5, [sp, #0]
    acda:	4628      	mov	r0, r5
    acdc:	f7ff febc 	bl	aa58 <malloc>
    ace0:	4607      	mov	r7, r0
    ace2:	2800      	cmp	r0, #0
    ace4:	d14e      	bne.n	ad84 <setvbuf+0x13c>
    ace6:	f8dd 9000 	ldr.w	r9, [sp]
    acea:	45a9      	cmp	r9, r5
    acec:	d13c      	bne.n	ad68 <setvbuf+0x120>
    acee:	f04f 30ff 	mov.w	r0, #4294967295
    acf2:	89a3      	ldrh	r3, [r4, #12]
    acf4:	f043 0302 	orr.w	r3, r3, #2
    acf8:	81a3      	strh	r3, [r4, #12]
    acfa:	2300      	movs	r3, #0
    acfc:	60a3      	str	r3, [r4, #8]
    acfe:	f104 0347 	add.w	r3, r4, #71	; 0x47
    ad02:	6023      	str	r3, [r4, #0]
    ad04:	6123      	str	r3, [r4, #16]
    ad06:	2301      	movs	r3, #1
    ad08:	6163      	str	r3, [r4, #20]
    ad0a:	b003      	add	sp, #12
    ad0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ad10:	4b22      	ldr	r3, [pc, #136]	; (ad9c <setvbuf+0x154>)
    ad12:	429c      	cmp	r4, r3
    ad14:	d101      	bne.n	ad1a <setvbuf+0xd2>
    ad16:	68b4      	ldr	r4, [r6, #8]
    ad18:	e7a8      	b.n	ac6c <setvbuf+0x24>
    ad1a:	4b21      	ldr	r3, [pc, #132]	; (ada0 <setvbuf+0x158>)
    ad1c:	429c      	cmp	r4, r3
    ad1e:	bf08      	it	eq
    ad20:	68f4      	ldreq	r4, [r6, #12]
    ad22:	e7a3      	b.n	ac6c <setvbuf+0x24>
    ad24:	2f00      	cmp	r7, #0
    ad26:	d0d8      	beq.n	acda <setvbuf+0x92>
    ad28:	69b3      	ldr	r3, [r6, #24]
    ad2a:	b913      	cbnz	r3, ad32 <setvbuf+0xea>
    ad2c:	4630      	mov	r0, r6
    ad2e:	f000 f9eb 	bl	b108 <__sinit>
    ad32:	f1b8 0f01 	cmp.w	r8, #1
    ad36:	bf08      	it	eq
    ad38:	89a3      	ldrheq	r3, [r4, #12]
    ad3a:	6027      	str	r7, [r4, #0]
    ad3c:	bf04      	itt	eq
    ad3e:	f043 0301 	orreq.w	r3, r3, #1
    ad42:	81a3      	strheq	r3, [r4, #12]
    ad44:	89a3      	ldrh	r3, [r4, #12]
    ad46:	6127      	str	r7, [r4, #16]
    ad48:	f013 0008 	ands.w	r0, r3, #8
    ad4c:	6165      	str	r5, [r4, #20]
    ad4e:	d01b      	beq.n	ad88 <setvbuf+0x140>
    ad50:	f013 0001 	ands.w	r0, r3, #1
    ad54:	bf18      	it	ne
    ad56:	426d      	negne	r5, r5
    ad58:	f04f 0300 	mov.w	r3, #0
    ad5c:	bf1d      	ittte	ne
    ad5e:	60a3      	strne	r3, [r4, #8]
    ad60:	61a5      	strne	r5, [r4, #24]
    ad62:	4618      	movne	r0, r3
    ad64:	60a5      	streq	r5, [r4, #8]
    ad66:	e7d0      	b.n	ad0a <setvbuf+0xc2>
    ad68:	4648      	mov	r0, r9
    ad6a:	f7ff fe75 	bl	aa58 <malloc>
    ad6e:	4607      	mov	r7, r0
    ad70:	2800      	cmp	r0, #0
    ad72:	d0bc      	beq.n	acee <setvbuf+0xa6>
    ad74:	89a3      	ldrh	r3, [r4, #12]
    ad76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ad7a:	81a3      	strh	r3, [r4, #12]
    ad7c:	464d      	mov	r5, r9
    ad7e:	e7d3      	b.n	ad28 <setvbuf+0xe0>
    ad80:	2000      	movs	r0, #0
    ad82:	e7b6      	b.n	acf2 <setvbuf+0xaa>
    ad84:	46a9      	mov	r9, r5
    ad86:	e7f5      	b.n	ad74 <setvbuf+0x12c>
    ad88:	60a0      	str	r0, [r4, #8]
    ad8a:	e7be      	b.n	ad0a <setvbuf+0xc2>
    ad8c:	f04f 30ff 	mov.w	r0, #4294967295
    ad90:	e7bb      	b.n	ad0a <setvbuf+0xc2>
    ad92:	bf00      	nop
    ad94:	20000058 	.word	0x20000058
    ad98:	0000c1b4 	.word	0x0000c1b4
    ad9c:	0000c1d4 	.word	0x0000c1d4
    ada0:	0000c194 	.word	0x0000c194

0000ada4 <__swbuf_r>:
    ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ada6:	460e      	mov	r6, r1
    ada8:	4614      	mov	r4, r2
    adaa:	4605      	mov	r5, r0
    adac:	b118      	cbz	r0, adb6 <__swbuf_r+0x12>
    adae:	6983      	ldr	r3, [r0, #24]
    adb0:	b90b      	cbnz	r3, adb6 <__swbuf_r+0x12>
    adb2:	f000 f9a9 	bl	b108 <__sinit>
    adb6:	4b21      	ldr	r3, [pc, #132]	; (ae3c <__swbuf_r+0x98>)
    adb8:	429c      	cmp	r4, r3
    adba:	d12a      	bne.n	ae12 <__swbuf_r+0x6e>
    adbc:	686c      	ldr	r4, [r5, #4]
    adbe:	69a3      	ldr	r3, [r4, #24]
    adc0:	60a3      	str	r3, [r4, #8]
    adc2:	89a3      	ldrh	r3, [r4, #12]
    adc4:	071a      	lsls	r2, r3, #28
    adc6:	d52e      	bpl.n	ae26 <__swbuf_r+0x82>
    adc8:	6923      	ldr	r3, [r4, #16]
    adca:	b363      	cbz	r3, ae26 <__swbuf_r+0x82>
    adcc:	6923      	ldr	r3, [r4, #16]
    adce:	6820      	ldr	r0, [r4, #0]
    add0:	1ac0      	subs	r0, r0, r3
    add2:	6963      	ldr	r3, [r4, #20]
    add4:	b2f6      	uxtb	r6, r6
    add6:	4298      	cmp	r0, r3
    add8:	4637      	mov	r7, r6
    adda:	db04      	blt.n	ade6 <__swbuf_r+0x42>
    addc:	4621      	mov	r1, r4
    adde:	4628      	mov	r0, r5
    ade0:	f000 f928 	bl	b034 <_fflush_r>
    ade4:	bb28      	cbnz	r0, ae32 <__swbuf_r+0x8e>
    ade6:	68a3      	ldr	r3, [r4, #8]
    ade8:	3b01      	subs	r3, #1
    adea:	60a3      	str	r3, [r4, #8]
    adec:	6823      	ldr	r3, [r4, #0]
    adee:	1c5a      	adds	r2, r3, #1
    adf0:	6022      	str	r2, [r4, #0]
    adf2:	701e      	strb	r6, [r3, #0]
    adf4:	6963      	ldr	r3, [r4, #20]
    adf6:	3001      	adds	r0, #1
    adf8:	4298      	cmp	r0, r3
    adfa:	d004      	beq.n	ae06 <__swbuf_r+0x62>
    adfc:	89a3      	ldrh	r3, [r4, #12]
    adfe:	07db      	lsls	r3, r3, #31
    ae00:	d519      	bpl.n	ae36 <__swbuf_r+0x92>
    ae02:	2e0a      	cmp	r6, #10
    ae04:	d117      	bne.n	ae36 <__swbuf_r+0x92>
    ae06:	4621      	mov	r1, r4
    ae08:	4628      	mov	r0, r5
    ae0a:	f000 f913 	bl	b034 <_fflush_r>
    ae0e:	b190      	cbz	r0, ae36 <__swbuf_r+0x92>
    ae10:	e00f      	b.n	ae32 <__swbuf_r+0x8e>
    ae12:	4b0b      	ldr	r3, [pc, #44]	; (ae40 <__swbuf_r+0x9c>)
    ae14:	429c      	cmp	r4, r3
    ae16:	d101      	bne.n	ae1c <__swbuf_r+0x78>
    ae18:	68ac      	ldr	r4, [r5, #8]
    ae1a:	e7d0      	b.n	adbe <__swbuf_r+0x1a>
    ae1c:	4b09      	ldr	r3, [pc, #36]	; (ae44 <__swbuf_r+0xa0>)
    ae1e:	429c      	cmp	r4, r3
    ae20:	bf08      	it	eq
    ae22:	68ec      	ldreq	r4, [r5, #12]
    ae24:	e7cb      	b.n	adbe <__swbuf_r+0x1a>
    ae26:	4621      	mov	r1, r4
    ae28:	4628      	mov	r0, r5
    ae2a:	f000 f80d 	bl	ae48 <__swsetup_r>
    ae2e:	2800      	cmp	r0, #0
    ae30:	d0cc      	beq.n	adcc <__swbuf_r+0x28>
    ae32:	f04f 37ff 	mov.w	r7, #4294967295
    ae36:	4638      	mov	r0, r7
    ae38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae3a:	bf00      	nop
    ae3c:	0000c1b4 	.word	0x0000c1b4
    ae40:	0000c1d4 	.word	0x0000c1d4
    ae44:	0000c194 	.word	0x0000c194

0000ae48 <__swsetup_r>:
    ae48:	4b32      	ldr	r3, [pc, #200]	; (af14 <__swsetup_r+0xcc>)
    ae4a:	b570      	push	{r4, r5, r6, lr}
    ae4c:	681d      	ldr	r5, [r3, #0]
    ae4e:	4606      	mov	r6, r0
    ae50:	460c      	mov	r4, r1
    ae52:	b125      	cbz	r5, ae5e <__swsetup_r+0x16>
    ae54:	69ab      	ldr	r3, [r5, #24]
    ae56:	b913      	cbnz	r3, ae5e <__swsetup_r+0x16>
    ae58:	4628      	mov	r0, r5
    ae5a:	f000 f955 	bl	b108 <__sinit>
    ae5e:	4b2e      	ldr	r3, [pc, #184]	; (af18 <__swsetup_r+0xd0>)
    ae60:	429c      	cmp	r4, r3
    ae62:	d10f      	bne.n	ae84 <__swsetup_r+0x3c>
    ae64:	686c      	ldr	r4, [r5, #4]
    ae66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ae6a:	b29a      	uxth	r2, r3
    ae6c:	0715      	lsls	r5, r2, #28
    ae6e:	d42c      	bmi.n	aeca <__swsetup_r+0x82>
    ae70:	06d0      	lsls	r0, r2, #27
    ae72:	d411      	bmi.n	ae98 <__swsetup_r+0x50>
    ae74:	2209      	movs	r2, #9
    ae76:	6032      	str	r2, [r6, #0]
    ae78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ae7c:	81a3      	strh	r3, [r4, #12]
    ae7e:	f04f 30ff 	mov.w	r0, #4294967295
    ae82:	bd70      	pop	{r4, r5, r6, pc}
    ae84:	4b25      	ldr	r3, [pc, #148]	; (af1c <__swsetup_r+0xd4>)
    ae86:	429c      	cmp	r4, r3
    ae88:	d101      	bne.n	ae8e <__swsetup_r+0x46>
    ae8a:	68ac      	ldr	r4, [r5, #8]
    ae8c:	e7eb      	b.n	ae66 <__swsetup_r+0x1e>
    ae8e:	4b24      	ldr	r3, [pc, #144]	; (af20 <__swsetup_r+0xd8>)
    ae90:	429c      	cmp	r4, r3
    ae92:	bf08      	it	eq
    ae94:	68ec      	ldreq	r4, [r5, #12]
    ae96:	e7e6      	b.n	ae66 <__swsetup_r+0x1e>
    ae98:	0751      	lsls	r1, r2, #29
    ae9a:	d512      	bpl.n	aec2 <__swsetup_r+0x7a>
    ae9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ae9e:	b141      	cbz	r1, aeb2 <__swsetup_r+0x6a>
    aea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    aea4:	4299      	cmp	r1, r3
    aea6:	d002      	beq.n	aeae <__swsetup_r+0x66>
    aea8:	4630      	mov	r0, r6
    aeaa:	f7ff fdf1 	bl	aa90 <_free_r>
    aeae:	2300      	movs	r3, #0
    aeb0:	6363      	str	r3, [r4, #52]	; 0x34
    aeb2:	89a3      	ldrh	r3, [r4, #12]
    aeb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    aeb8:	81a3      	strh	r3, [r4, #12]
    aeba:	2300      	movs	r3, #0
    aebc:	6063      	str	r3, [r4, #4]
    aebe:	6923      	ldr	r3, [r4, #16]
    aec0:	6023      	str	r3, [r4, #0]
    aec2:	89a3      	ldrh	r3, [r4, #12]
    aec4:	f043 0308 	orr.w	r3, r3, #8
    aec8:	81a3      	strh	r3, [r4, #12]
    aeca:	6923      	ldr	r3, [r4, #16]
    aecc:	b94b      	cbnz	r3, aee2 <__swsetup_r+0x9a>
    aece:	89a3      	ldrh	r3, [r4, #12]
    aed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    aed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    aed8:	d003      	beq.n	aee2 <__swsetup_r+0x9a>
    aeda:	4621      	mov	r1, r4
    aedc:	4630      	mov	r0, r6
    aede:	f000 f9c1 	bl	b264 <__smakebuf_r>
    aee2:	89a2      	ldrh	r2, [r4, #12]
    aee4:	f012 0301 	ands.w	r3, r2, #1
    aee8:	d00c      	beq.n	af04 <__swsetup_r+0xbc>
    aeea:	2300      	movs	r3, #0
    aeec:	60a3      	str	r3, [r4, #8]
    aeee:	6963      	ldr	r3, [r4, #20]
    aef0:	425b      	negs	r3, r3
    aef2:	61a3      	str	r3, [r4, #24]
    aef4:	6923      	ldr	r3, [r4, #16]
    aef6:	b953      	cbnz	r3, af0e <__swsetup_r+0xc6>
    aef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    aefc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    af00:	d1ba      	bne.n	ae78 <__swsetup_r+0x30>
    af02:	bd70      	pop	{r4, r5, r6, pc}
    af04:	0792      	lsls	r2, r2, #30
    af06:	bf58      	it	pl
    af08:	6963      	ldrpl	r3, [r4, #20]
    af0a:	60a3      	str	r3, [r4, #8]
    af0c:	e7f2      	b.n	aef4 <__swsetup_r+0xac>
    af0e:	2000      	movs	r0, #0
    af10:	e7f7      	b.n	af02 <__swsetup_r+0xba>
    af12:	bf00      	nop
    af14:	20000058 	.word	0x20000058
    af18:	0000c1b4 	.word	0x0000c1b4
    af1c:	0000c1d4 	.word	0x0000c1d4
    af20:	0000c194 	.word	0x0000c194

0000af24 <__sflush_r>:
    af24:	898a      	ldrh	r2, [r1, #12]
    af26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af2a:	4605      	mov	r5, r0
    af2c:	0710      	lsls	r0, r2, #28
    af2e:	460c      	mov	r4, r1
    af30:	d45a      	bmi.n	afe8 <__sflush_r+0xc4>
    af32:	684b      	ldr	r3, [r1, #4]
    af34:	2b00      	cmp	r3, #0
    af36:	dc05      	bgt.n	af44 <__sflush_r+0x20>
    af38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    af3a:	2b00      	cmp	r3, #0
    af3c:	dc02      	bgt.n	af44 <__sflush_r+0x20>
    af3e:	2000      	movs	r0, #0
    af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    af46:	2e00      	cmp	r6, #0
    af48:	d0f9      	beq.n	af3e <__sflush_r+0x1a>
    af4a:	2300      	movs	r3, #0
    af4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    af50:	682f      	ldr	r7, [r5, #0]
    af52:	602b      	str	r3, [r5, #0]
    af54:	d033      	beq.n	afbe <__sflush_r+0x9a>
    af56:	6d60      	ldr	r0, [r4, #84]	; 0x54
    af58:	89a3      	ldrh	r3, [r4, #12]
    af5a:	075a      	lsls	r2, r3, #29
    af5c:	d505      	bpl.n	af6a <__sflush_r+0x46>
    af5e:	6863      	ldr	r3, [r4, #4]
    af60:	1ac0      	subs	r0, r0, r3
    af62:	6b63      	ldr	r3, [r4, #52]	; 0x34
    af64:	b10b      	cbz	r3, af6a <__sflush_r+0x46>
    af66:	6c23      	ldr	r3, [r4, #64]	; 0x40
    af68:	1ac0      	subs	r0, r0, r3
    af6a:	2300      	movs	r3, #0
    af6c:	4602      	mov	r2, r0
    af6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    af70:	6a21      	ldr	r1, [r4, #32]
    af72:	4628      	mov	r0, r5
    af74:	47b0      	blx	r6
    af76:	1c43      	adds	r3, r0, #1
    af78:	89a3      	ldrh	r3, [r4, #12]
    af7a:	d106      	bne.n	af8a <__sflush_r+0x66>
    af7c:	6829      	ldr	r1, [r5, #0]
    af7e:	291d      	cmp	r1, #29
    af80:	d84b      	bhi.n	b01a <__sflush_r+0xf6>
    af82:	4a2b      	ldr	r2, [pc, #172]	; (b030 <__sflush_r+0x10c>)
    af84:	40ca      	lsrs	r2, r1
    af86:	07d6      	lsls	r6, r2, #31
    af88:	d547      	bpl.n	b01a <__sflush_r+0xf6>
    af8a:	2200      	movs	r2, #0
    af8c:	6062      	str	r2, [r4, #4]
    af8e:	04d9      	lsls	r1, r3, #19
    af90:	6922      	ldr	r2, [r4, #16]
    af92:	6022      	str	r2, [r4, #0]
    af94:	d504      	bpl.n	afa0 <__sflush_r+0x7c>
    af96:	1c42      	adds	r2, r0, #1
    af98:	d101      	bne.n	af9e <__sflush_r+0x7a>
    af9a:	682b      	ldr	r3, [r5, #0]
    af9c:	b903      	cbnz	r3, afa0 <__sflush_r+0x7c>
    af9e:	6560      	str	r0, [r4, #84]	; 0x54
    afa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    afa2:	602f      	str	r7, [r5, #0]
    afa4:	2900      	cmp	r1, #0
    afa6:	d0ca      	beq.n	af3e <__sflush_r+0x1a>
    afa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    afac:	4299      	cmp	r1, r3
    afae:	d002      	beq.n	afb6 <__sflush_r+0x92>
    afb0:	4628      	mov	r0, r5
    afb2:	f7ff fd6d 	bl	aa90 <_free_r>
    afb6:	2000      	movs	r0, #0
    afb8:	6360      	str	r0, [r4, #52]	; 0x34
    afba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afbe:	6a21      	ldr	r1, [r4, #32]
    afc0:	2301      	movs	r3, #1
    afc2:	4628      	mov	r0, r5
    afc4:	47b0      	blx	r6
    afc6:	1c41      	adds	r1, r0, #1
    afc8:	d1c6      	bne.n	af58 <__sflush_r+0x34>
    afca:	682b      	ldr	r3, [r5, #0]
    afcc:	2b00      	cmp	r3, #0
    afce:	d0c3      	beq.n	af58 <__sflush_r+0x34>
    afd0:	2b1d      	cmp	r3, #29
    afd2:	d001      	beq.n	afd8 <__sflush_r+0xb4>
    afd4:	2b16      	cmp	r3, #22
    afd6:	d101      	bne.n	afdc <__sflush_r+0xb8>
    afd8:	602f      	str	r7, [r5, #0]
    afda:	e7b0      	b.n	af3e <__sflush_r+0x1a>
    afdc:	89a3      	ldrh	r3, [r4, #12]
    afde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    afe2:	81a3      	strh	r3, [r4, #12]
    afe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afe8:	690f      	ldr	r7, [r1, #16]
    afea:	2f00      	cmp	r7, #0
    afec:	d0a7      	beq.n	af3e <__sflush_r+0x1a>
    afee:	0793      	lsls	r3, r2, #30
    aff0:	680e      	ldr	r6, [r1, #0]
    aff2:	bf08      	it	eq
    aff4:	694b      	ldreq	r3, [r1, #20]
    aff6:	600f      	str	r7, [r1, #0]
    aff8:	bf18      	it	ne
    affa:	2300      	movne	r3, #0
    affc:	eba6 0807 	sub.w	r8, r6, r7
    b000:	608b      	str	r3, [r1, #8]
    b002:	f1b8 0f00 	cmp.w	r8, #0
    b006:	dd9a      	ble.n	af3e <__sflush_r+0x1a>
    b008:	4643      	mov	r3, r8
    b00a:	463a      	mov	r2, r7
    b00c:	6a21      	ldr	r1, [r4, #32]
    b00e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    b010:	4628      	mov	r0, r5
    b012:	47b0      	blx	r6
    b014:	2800      	cmp	r0, #0
    b016:	dc07      	bgt.n	b028 <__sflush_r+0x104>
    b018:	89a3      	ldrh	r3, [r4, #12]
    b01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b01e:	81a3      	strh	r3, [r4, #12]
    b020:	f04f 30ff 	mov.w	r0, #4294967295
    b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b028:	4407      	add	r7, r0
    b02a:	eba8 0800 	sub.w	r8, r8, r0
    b02e:	e7e8      	b.n	b002 <__sflush_r+0xde>
    b030:	20400001 	.word	0x20400001

0000b034 <_fflush_r>:
    b034:	b538      	push	{r3, r4, r5, lr}
    b036:	690b      	ldr	r3, [r1, #16]
    b038:	4605      	mov	r5, r0
    b03a:	460c      	mov	r4, r1
    b03c:	b1db      	cbz	r3, b076 <_fflush_r+0x42>
    b03e:	b118      	cbz	r0, b048 <_fflush_r+0x14>
    b040:	6983      	ldr	r3, [r0, #24]
    b042:	b90b      	cbnz	r3, b048 <_fflush_r+0x14>
    b044:	f000 f860 	bl	b108 <__sinit>
    b048:	4b0c      	ldr	r3, [pc, #48]	; (b07c <_fflush_r+0x48>)
    b04a:	429c      	cmp	r4, r3
    b04c:	d109      	bne.n	b062 <_fflush_r+0x2e>
    b04e:	686c      	ldr	r4, [r5, #4]
    b050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b054:	b17b      	cbz	r3, b076 <_fflush_r+0x42>
    b056:	4621      	mov	r1, r4
    b058:	4628      	mov	r0, r5
    b05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b05e:	f7ff bf61 	b.w	af24 <__sflush_r>
    b062:	4b07      	ldr	r3, [pc, #28]	; (b080 <_fflush_r+0x4c>)
    b064:	429c      	cmp	r4, r3
    b066:	d101      	bne.n	b06c <_fflush_r+0x38>
    b068:	68ac      	ldr	r4, [r5, #8]
    b06a:	e7f1      	b.n	b050 <_fflush_r+0x1c>
    b06c:	4b05      	ldr	r3, [pc, #20]	; (b084 <_fflush_r+0x50>)
    b06e:	429c      	cmp	r4, r3
    b070:	bf08      	it	eq
    b072:	68ec      	ldreq	r4, [r5, #12]
    b074:	e7ec      	b.n	b050 <_fflush_r+0x1c>
    b076:	2000      	movs	r0, #0
    b078:	bd38      	pop	{r3, r4, r5, pc}
    b07a:	bf00      	nop
    b07c:	0000c1b4 	.word	0x0000c1b4
    b080:	0000c1d4 	.word	0x0000c1d4
    b084:	0000c194 	.word	0x0000c194

0000b088 <_cleanup_r>:
    b088:	4901      	ldr	r1, [pc, #4]	; (b090 <_cleanup_r+0x8>)
    b08a:	f000 b8a9 	b.w	b1e0 <_fwalk_reent>
    b08e:	bf00      	nop
    b090:	0000b035 	.word	0x0000b035

0000b094 <std.isra.0>:
    b094:	2300      	movs	r3, #0
    b096:	b510      	push	{r4, lr}
    b098:	4604      	mov	r4, r0
    b09a:	6003      	str	r3, [r0, #0]
    b09c:	6043      	str	r3, [r0, #4]
    b09e:	6083      	str	r3, [r0, #8]
    b0a0:	8181      	strh	r1, [r0, #12]
    b0a2:	6643      	str	r3, [r0, #100]	; 0x64
    b0a4:	81c2      	strh	r2, [r0, #14]
    b0a6:	6103      	str	r3, [r0, #16]
    b0a8:	6143      	str	r3, [r0, #20]
    b0aa:	6183      	str	r3, [r0, #24]
    b0ac:	4619      	mov	r1, r3
    b0ae:	2208      	movs	r2, #8
    b0b0:	305c      	adds	r0, #92	; 0x5c
    b0b2:	f7ff fce4 	bl	aa7e <memset>
    b0b6:	4b05      	ldr	r3, [pc, #20]	; (b0cc <std.isra.0+0x38>)
    b0b8:	6263      	str	r3, [r4, #36]	; 0x24
    b0ba:	4b05      	ldr	r3, [pc, #20]	; (b0d0 <std.isra.0+0x3c>)
    b0bc:	62a3      	str	r3, [r4, #40]	; 0x28
    b0be:	4b05      	ldr	r3, [pc, #20]	; (b0d4 <std.isra.0+0x40>)
    b0c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    b0c2:	4b05      	ldr	r3, [pc, #20]	; (b0d8 <std.isra.0+0x44>)
    b0c4:	6224      	str	r4, [r4, #32]
    b0c6:	6323      	str	r3, [r4, #48]	; 0x30
    b0c8:	bd10      	pop	{r4, pc}
    b0ca:	bf00      	nop
    b0cc:	0000b891 	.word	0x0000b891
    b0d0:	0000b8b3 	.word	0x0000b8b3
    b0d4:	0000b8eb 	.word	0x0000b8eb
    b0d8:	0000b90f 	.word	0x0000b90f

0000b0dc <__sfmoreglue>:
    b0dc:	b570      	push	{r4, r5, r6, lr}
    b0de:	1e4a      	subs	r2, r1, #1
    b0e0:	2568      	movs	r5, #104	; 0x68
    b0e2:	4355      	muls	r5, r2
    b0e4:	460e      	mov	r6, r1
    b0e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
    b0ea:	f7ff fd1f 	bl	ab2c <_malloc_r>
    b0ee:	4604      	mov	r4, r0
    b0f0:	b140      	cbz	r0, b104 <__sfmoreglue+0x28>
    b0f2:	2100      	movs	r1, #0
    b0f4:	e880 0042 	stmia.w	r0, {r1, r6}
    b0f8:	300c      	adds	r0, #12
    b0fa:	60a0      	str	r0, [r4, #8]
    b0fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
    b100:	f7ff fcbd 	bl	aa7e <memset>
    b104:	4620      	mov	r0, r4
    b106:	bd70      	pop	{r4, r5, r6, pc}

0000b108 <__sinit>:
    b108:	6983      	ldr	r3, [r0, #24]
    b10a:	b510      	push	{r4, lr}
    b10c:	4604      	mov	r4, r0
    b10e:	bb33      	cbnz	r3, b15e <__sinit+0x56>
    b110:	6483      	str	r3, [r0, #72]	; 0x48
    b112:	64c3      	str	r3, [r0, #76]	; 0x4c
    b114:	6503      	str	r3, [r0, #80]	; 0x50
    b116:	4b12      	ldr	r3, [pc, #72]	; (b160 <__sinit+0x58>)
    b118:	4a12      	ldr	r2, [pc, #72]	; (b164 <__sinit+0x5c>)
    b11a:	681b      	ldr	r3, [r3, #0]
    b11c:	6282      	str	r2, [r0, #40]	; 0x28
    b11e:	4298      	cmp	r0, r3
    b120:	bf04      	itt	eq
    b122:	2301      	moveq	r3, #1
    b124:	6183      	streq	r3, [r0, #24]
    b126:	f000 f81f 	bl	b168 <__sfp>
    b12a:	6060      	str	r0, [r4, #4]
    b12c:	4620      	mov	r0, r4
    b12e:	f000 f81b 	bl	b168 <__sfp>
    b132:	60a0      	str	r0, [r4, #8]
    b134:	4620      	mov	r0, r4
    b136:	f000 f817 	bl	b168 <__sfp>
    b13a:	2200      	movs	r2, #0
    b13c:	60e0      	str	r0, [r4, #12]
    b13e:	2104      	movs	r1, #4
    b140:	6860      	ldr	r0, [r4, #4]
    b142:	f7ff ffa7 	bl	b094 <std.isra.0>
    b146:	2201      	movs	r2, #1
    b148:	2109      	movs	r1, #9
    b14a:	68a0      	ldr	r0, [r4, #8]
    b14c:	f7ff ffa2 	bl	b094 <std.isra.0>
    b150:	2202      	movs	r2, #2
    b152:	2112      	movs	r1, #18
    b154:	68e0      	ldr	r0, [r4, #12]
    b156:	f7ff ff9d 	bl	b094 <std.isra.0>
    b15a:	2301      	movs	r3, #1
    b15c:	61a3      	str	r3, [r4, #24]
    b15e:	bd10      	pop	{r4, pc}
    b160:	0000c190 	.word	0x0000c190
    b164:	0000b089 	.word	0x0000b089

0000b168 <__sfp>:
    b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b16a:	4b1c      	ldr	r3, [pc, #112]	; (b1dc <__sfp+0x74>)
    b16c:	681e      	ldr	r6, [r3, #0]
    b16e:	69b3      	ldr	r3, [r6, #24]
    b170:	4607      	mov	r7, r0
    b172:	b913      	cbnz	r3, b17a <__sfp+0x12>
    b174:	4630      	mov	r0, r6
    b176:	f7ff ffc7 	bl	b108 <__sinit>
    b17a:	3648      	adds	r6, #72	; 0x48
    b17c:	68b4      	ldr	r4, [r6, #8]
    b17e:	6873      	ldr	r3, [r6, #4]
    b180:	3b01      	subs	r3, #1
    b182:	d503      	bpl.n	b18c <__sfp+0x24>
    b184:	6833      	ldr	r3, [r6, #0]
    b186:	b133      	cbz	r3, b196 <__sfp+0x2e>
    b188:	6836      	ldr	r6, [r6, #0]
    b18a:	e7f7      	b.n	b17c <__sfp+0x14>
    b18c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    b190:	b16d      	cbz	r5, b1ae <__sfp+0x46>
    b192:	3468      	adds	r4, #104	; 0x68
    b194:	e7f4      	b.n	b180 <__sfp+0x18>
    b196:	2104      	movs	r1, #4
    b198:	4638      	mov	r0, r7
    b19a:	f7ff ff9f 	bl	b0dc <__sfmoreglue>
    b19e:	6030      	str	r0, [r6, #0]
    b1a0:	2800      	cmp	r0, #0
    b1a2:	d1f1      	bne.n	b188 <__sfp+0x20>
    b1a4:	230c      	movs	r3, #12
    b1a6:	603b      	str	r3, [r7, #0]
    b1a8:	4604      	mov	r4, r0
    b1aa:	4620      	mov	r0, r4
    b1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b1b2:	81e3      	strh	r3, [r4, #14]
    b1b4:	2301      	movs	r3, #1
    b1b6:	81a3      	strh	r3, [r4, #12]
    b1b8:	6665      	str	r5, [r4, #100]	; 0x64
    b1ba:	6025      	str	r5, [r4, #0]
    b1bc:	60a5      	str	r5, [r4, #8]
    b1be:	6065      	str	r5, [r4, #4]
    b1c0:	6125      	str	r5, [r4, #16]
    b1c2:	6165      	str	r5, [r4, #20]
    b1c4:	61a5      	str	r5, [r4, #24]
    b1c6:	2208      	movs	r2, #8
    b1c8:	4629      	mov	r1, r5
    b1ca:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b1ce:	f7ff fc56 	bl	aa7e <memset>
    b1d2:	6365      	str	r5, [r4, #52]	; 0x34
    b1d4:	63a5      	str	r5, [r4, #56]	; 0x38
    b1d6:	64a5      	str	r5, [r4, #72]	; 0x48
    b1d8:	64e5      	str	r5, [r4, #76]	; 0x4c
    b1da:	e7e6      	b.n	b1aa <__sfp+0x42>
    b1dc:	0000c190 	.word	0x0000c190

0000b1e0 <_fwalk_reent>:
    b1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b1e4:	4680      	mov	r8, r0
    b1e6:	4689      	mov	r9, r1
    b1e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
    b1ec:	2600      	movs	r6, #0
    b1ee:	b914      	cbnz	r4, b1f6 <_fwalk_reent+0x16>
    b1f0:	4630      	mov	r0, r6
    b1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b1f6:	68a5      	ldr	r5, [r4, #8]
    b1f8:	6867      	ldr	r7, [r4, #4]
    b1fa:	3f01      	subs	r7, #1
    b1fc:	d501      	bpl.n	b202 <_fwalk_reent+0x22>
    b1fe:	6824      	ldr	r4, [r4, #0]
    b200:	e7f5      	b.n	b1ee <_fwalk_reent+0xe>
    b202:	89ab      	ldrh	r3, [r5, #12]
    b204:	2b01      	cmp	r3, #1
    b206:	d907      	bls.n	b218 <_fwalk_reent+0x38>
    b208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    b20c:	3301      	adds	r3, #1
    b20e:	d003      	beq.n	b218 <_fwalk_reent+0x38>
    b210:	4629      	mov	r1, r5
    b212:	4640      	mov	r0, r8
    b214:	47c8      	blx	r9
    b216:	4306      	orrs	r6, r0
    b218:	3568      	adds	r5, #104	; 0x68
    b21a:	e7ee      	b.n	b1fa <_fwalk_reent+0x1a>

0000b21c <__swhatbuf_r>:
    b21c:	b570      	push	{r4, r5, r6, lr}
    b21e:	460e      	mov	r6, r1
    b220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b224:	2900      	cmp	r1, #0
    b226:	b090      	sub	sp, #64	; 0x40
    b228:	4614      	mov	r4, r2
    b22a:	461d      	mov	r5, r3
    b22c:	da07      	bge.n	b23e <__swhatbuf_r+0x22>
    b22e:	2300      	movs	r3, #0
    b230:	602b      	str	r3, [r5, #0]
    b232:	89b3      	ldrh	r3, [r6, #12]
    b234:	061a      	lsls	r2, r3, #24
    b236:	d410      	bmi.n	b25a <__swhatbuf_r+0x3e>
    b238:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b23c:	e00e      	b.n	b25c <__swhatbuf_r+0x40>
    b23e:	aa01      	add	r2, sp, #4
    b240:	f000 fb8c 	bl	b95c <_fstat_r>
    b244:	2800      	cmp	r0, #0
    b246:	dbf2      	blt.n	b22e <__swhatbuf_r+0x12>
    b248:	9a02      	ldr	r2, [sp, #8]
    b24a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    b24e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    b252:	425a      	negs	r2, r3
    b254:	415a      	adcs	r2, r3
    b256:	602a      	str	r2, [r5, #0]
    b258:	e7ee      	b.n	b238 <__swhatbuf_r+0x1c>
    b25a:	2340      	movs	r3, #64	; 0x40
    b25c:	2000      	movs	r0, #0
    b25e:	6023      	str	r3, [r4, #0]
    b260:	b010      	add	sp, #64	; 0x40
    b262:	bd70      	pop	{r4, r5, r6, pc}

0000b264 <__smakebuf_r>:
    b264:	898b      	ldrh	r3, [r1, #12]
    b266:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b268:	079d      	lsls	r5, r3, #30
    b26a:	4606      	mov	r6, r0
    b26c:	460c      	mov	r4, r1
    b26e:	d507      	bpl.n	b280 <__smakebuf_r+0x1c>
    b270:	f104 0347 	add.w	r3, r4, #71	; 0x47
    b274:	6023      	str	r3, [r4, #0]
    b276:	6123      	str	r3, [r4, #16]
    b278:	2301      	movs	r3, #1
    b27a:	6163      	str	r3, [r4, #20]
    b27c:	b002      	add	sp, #8
    b27e:	bd70      	pop	{r4, r5, r6, pc}
    b280:	ab01      	add	r3, sp, #4
    b282:	466a      	mov	r2, sp
    b284:	f7ff ffca 	bl	b21c <__swhatbuf_r>
    b288:	9900      	ldr	r1, [sp, #0]
    b28a:	4605      	mov	r5, r0
    b28c:	4630      	mov	r0, r6
    b28e:	f7ff fc4d 	bl	ab2c <_malloc_r>
    b292:	b948      	cbnz	r0, b2a8 <__smakebuf_r+0x44>
    b294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b298:	059a      	lsls	r2, r3, #22
    b29a:	d4ef      	bmi.n	b27c <__smakebuf_r+0x18>
    b29c:	f023 0303 	bic.w	r3, r3, #3
    b2a0:	f043 0302 	orr.w	r3, r3, #2
    b2a4:	81a3      	strh	r3, [r4, #12]
    b2a6:	e7e3      	b.n	b270 <__smakebuf_r+0xc>
    b2a8:	4b0d      	ldr	r3, [pc, #52]	; (b2e0 <__smakebuf_r+0x7c>)
    b2aa:	62b3      	str	r3, [r6, #40]	; 0x28
    b2ac:	89a3      	ldrh	r3, [r4, #12]
    b2ae:	6020      	str	r0, [r4, #0]
    b2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b2b4:	81a3      	strh	r3, [r4, #12]
    b2b6:	9b00      	ldr	r3, [sp, #0]
    b2b8:	6163      	str	r3, [r4, #20]
    b2ba:	9b01      	ldr	r3, [sp, #4]
    b2bc:	6120      	str	r0, [r4, #16]
    b2be:	b15b      	cbz	r3, b2d8 <__smakebuf_r+0x74>
    b2c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b2c4:	4630      	mov	r0, r6
    b2c6:	f000 fb5b 	bl	b980 <_isatty_r>
    b2ca:	b128      	cbz	r0, b2d8 <__smakebuf_r+0x74>
    b2cc:	89a3      	ldrh	r3, [r4, #12]
    b2ce:	f023 0303 	bic.w	r3, r3, #3
    b2d2:	f043 0301 	orr.w	r3, r3, #1
    b2d6:	81a3      	strh	r3, [r4, #12]
    b2d8:	89a3      	ldrh	r3, [r4, #12]
    b2da:	431d      	orrs	r5, r3
    b2dc:	81a5      	strh	r5, [r4, #12]
    b2de:	e7cd      	b.n	b27c <__smakebuf_r+0x18>
    b2e0:	0000b089 	.word	0x0000b089

0000b2e4 <__malloc_lock>:
    b2e4:	4770      	bx	lr

0000b2e6 <__malloc_unlock>:
    b2e6:	4770      	bx	lr

0000b2e8 <__sfputc_r>:
    b2e8:	6893      	ldr	r3, [r2, #8]
    b2ea:	3b01      	subs	r3, #1
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	b410      	push	{r4}
    b2f0:	6093      	str	r3, [r2, #8]
    b2f2:	da08      	bge.n	b306 <__sfputc_r+0x1e>
    b2f4:	6994      	ldr	r4, [r2, #24]
    b2f6:	42a3      	cmp	r3, r4
    b2f8:	db02      	blt.n	b300 <__sfputc_r+0x18>
    b2fa:	b2cb      	uxtb	r3, r1
    b2fc:	2b0a      	cmp	r3, #10
    b2fe:	d102      	bne.n	b306 <__sfputc_r+0x1e>
    b300:	bc10      	pop	{r4}
    b302:	f7ff bd4f 	b.w	ada4 <__swbuf_r>
    b306:	6813      	ldr	r3, [r2, #0]
    b308:	1c58      	adds	r0, r3, #1
    b30a:	6010      	str	r0, [r2, #0]
    b30c:	7019      	strb	r1, [r3, #0]
    b30e:	b2c8      	uxtb	r0, r1
    b310:	bc10      	pop	{r4}
    b312:	4770      	bx	lr

0000b314 <__sfputs_r>:
    b314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b316:	4606      	mov	r6, r0
    b318:	460f      	mov	r7, r1
    b31a:	4614      	mov	r4, r2
    b31c:	18d5      	adds	r5, r2, r3
    b31e:	42ac      	cmp	r4, r5
    b320:	d101      	bne.n	b326 <__sfputs_r+0x12>
    b322:	2000      	movs	r0, #0
    b324:	e007      	b.n	b336 <__sfputs_r+0x22>
    b326:	463a      	mov	r2, r7
    b328:	f814 1b01 	ldrb.w	r1, [r4], #1
    b32c:	4630      	mov	r0, r6
    b32e:	f7ff ffdb 	bl	b2e8 <__sfputc_r>
    b332:	1c43      	adds	r3, r0, #1
    b334:	d1f3      	bne.n	b31e <__sfputs_r+0xa>
    b336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b338 <_vfiprintf_r>:
    b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b33c:	b09d      	sub	sp, #116	; 0x74
    b33e:	460c      	mov	r4, r1
    b340:	4617      	mov	r7, r2
    b342:	9303      	str	r3, [sp, #12]
    b344:	4606      	mov	r6, r0
    b346:	b118      	cbz	r0, b350 <_vfiprintf_r+0x18>
    b348:	6983      	ldr	r3, [r0, #24]
    b34a:	b90b      	cbnz	r3, b350 <_vfiprintf_r+0x18>
    b34c:	f7ff fedc 	bl	b108 <__sinit>
    b350:	4b7c      	ldr	r3, [pc, #496]	; (b544 <_vfiprintf_r+0x20c>)
    b352:	429c      	cmp	r4, r3
    b354:	d157      	bne.n	b406 <_vfiprintf_r+0xce>
    b356:	6874      	ldr	r4, [r6, #4]
    b358:	89a3      	ldrh	r3, [r4, #12]
    b35a:	0718      	lsls	r0, r3, #28
    b35c:	d55d      	bpl.n	b41a <_vfiprintf_r+0xe2>
    b35e:	6923      	ldr	r3, [r4, #16]
    b360:	2b00      	cmp	r3, #0
    b362:	d05a      	beq.n	b41a <_vfiprintf_r+0xe2>
    b364:	2300      	movs	r3, #0
    b366:	9309      	str	r3, [sp, #36]	; 0x24
    b368:	2320      	movs	r3, #32
    b36a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    b36e:	2330      	movs	r3, #48	; 0x30
    b370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    b374:	f04f 0b01 	mov.w	fp, #1
    b378:	46b8      	mov	r8, r7
    b37a:	4645      	mov	r5, r8
    b37c:	f815 3b01 	ldrb.w	r3, [r5], #1
    b380:	2b00      	cmp	r3, #0
    b382:	d155      	bne.n	b430 <_vfiprintf_r+0xf8>
    b384:	ebb8 0a07 	subs.w	sl, r8, r7
    b388:	d00b      	beq.n	b3a2 <_vfiprintf_r+0x6a>
    b38a:	4653      	mov	r3, sl
    b38c:	463a      	mov	r2, r7
    b38e:	4621      	mov	r1, r4
    b390:	4630      	mov	r0, r6
    b392:	f7ff ffbf 	bl	b314 <__sfputs_r>
    b396:	3001      	adds	r0, #1
    b398:	f000 80c4 	beq.w	b524 <_vfiprintf_r+0x1ec>
    b39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b39e:	4453      	add	r3, sl
    b3a0:	9309      	str	r3, [sp, #36]	; 0x24
    b3a2:	f898 3000 	ldrb.w	r3, [r8]
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	f000 80bc 	beq.w	b524 <_vfiprintf_r+0x1ec>
    b3ac:	2300      	movs	r3, #0
    b3ae:	f04f 32ff 	mov.w	r2, #4294967295
    b3b2:	9304      	str	r3, [sp, #16]
    b3b4:	9307      	str	r3, [sp, #28]
    b3b6:	9205      	str	r2, [sp, #20]
    b3b8:	9306      	str	r3, [sp, #24]
    b3ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    b3be:	931a      	str	r3, [sp, #104]	; 0x68
    b3c0:	2205      	movs	r2, #5
    b3c2:	7829      	ldrb	r1, [r5, #0]
    b3c4:	4860      	ldr	r0, [pc, #384]	; (b548 <_vfiprintf_r+0x210>)
    b3c6:	f000 fb03 	bl	b9d0 <memchr>
    b3ca:	f105 0801 	add.w	r8, r5, #1
    b3ce:	9b04      	ldr	r3, [sp, #16]
    b3d0:	2800      	cmp	r0, #0
    b3d2:	d131      	bne.n	b438 <_vfiprintf_r+0x100>
    b3d4:	06d9      	lsls	r1, r3, #27
    b3d6:	bf44      	itt	mi
    b3d8:	2220      	movmi	r2, #32
    b3da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b3de:	071a      	lsls	r2, r3, #28
    b3e0:	bf44      	itt	mi
    b3e2:	222b      	movmi	r2, #43	; 0x2b
    b3e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    b3e8:	782a      	ldrb	r2, [r5, #0]
    b3ea:	2a2a      	cmp	r2, #42	; 0x2a
    b3ec:	d02c      	beq.n	b448 <_vfiprintf_r+0x110>
    b3ee:	9a07      	ldr	r2, [sp, #28]
    b3f0:	2100      	movs	r1, #0
    b3f2:	200a      	movs	r0, #10
    b3f4:	46a8      	mov	r8, r5
    b3f6:	3501      	adds	r5, #1
    b3f8:	f898 3000 	ldrb.w	r3, [r8]
    b3fc:	3b30      	subs	r3, #48	; 0x30
    b3fe:	2b09      	cmp	r3, #9
    b400:	d96d      	bls.n	b4de <_vfiprintf_r+0x1a6>
    b402:	b371      	cbz	r1, b462 <_vfiprintf_r+0x12a>
    b404:	e026      	b.n	b454 <_vfiprintf_r+0x11c>
    b406:	4b51      	ldr	r3, [pc, #324]	; (b54c <_vfiprintf_r+0x214>)
    b408:	429c      	cmp	r4, r3
    b40a:	d101      	bne.n	b410 <_vfiprintf_r+0xd8>
    b40c:	68b4      	ldr	r4, [r6, #8]
    b40e:	e7a3      	b.n	b358 <_vfiprintf_r+0x20>
    b410:	4b4f      	ldr	r3, [pc, #316]	; (b550 <_vfiprintf_r+0x218>)
    b412:	429c      	cmp	r4, r3
    b414:	bf08      	it	eq
    b416:	68f4      	ldreq	r4, [r6, #12]
    b418:	e79e      	b.n	b358 <_vfiprintf_r+0x20>
    b41a:	4621      	mov	r1, r4
    b41c:	4630      	mov	r0, r6
    b41e:	f7ff fd13 	bl	ae48 <__swsetup_r>
    b422:	2800      	cmp	r0, #0
    b424:	d09e      	beq.n	b364 <_vfiprintf_r+0x2c>
    b426:	f04f 30ff 	mov.w	r0, #4294967295
    b42a:	b01d      	add	sp, #116	; 0x74
    b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b430:	2b25      	cmp	r3, #37	; 0x25
    b432:	d0a7      	beq.n	b384 <_vfiprintf_r+0x4c>
    b434:	46a8      	mov	r8, r5
    b436:	e7a0      	b.n	b37a <_vfiprintf_r+0x42>
    b438:	4a43      	ldr	r2, [pc, #268]	; (b548 <_vfiprintf_r+0x210>)
    b43a:	1a80      	subs	r0, r0, r2
    b43c:	fa0b f000 	lsl.w	r0, fp, r0
    b440:	4318      	orrs	r0, r3
    b442:	9004      	str	r0, [sp, #16]
    b444:	4645      	mov	r5, r8
    b446:	e7bb      	b.n	b3c0 <_vfiprintf_r+0x88>
    b448:	9a03      	ldr	r2, [sp, #12]
    b44a:	1d11      	adds	r1, r2, #4
    b44c:	6812      	ldr	r2, [r2, #0]
    b44e:	9103      	str	r1, [sp, #12]
    b450:	2a00      	cmp	r2, #0
    b452:	db01      	blt.n	b458 <_vfiprintf_r+0x120>
    b454:	9207      	str	r2, [sp, #28]
    b456:	e004      	b.n	b462 <_vfiprintf_r+0x12a>
    b458:	4252      	negs	r2, r2
    b45a:	f043 0302 	orr.w	r3, r3, #2
    b45e:	9207      	str	r2, [sp, #28]
    b460:	9304      	str	r3, [sp, #16]
    b462:	f898 3000 	ldrb.w	r3, [r8]
    b466:	2b2e      	cmp	r3, #46	; 0x2e
    b468:	d110      	bne.n	b48c <_vfiprintf_r+0x154>
    b46a:	f898 3001 	ldrb.w	r3, [r8, #1]
    b46e:	2b2a      	cmp	r3, #42	; 0x2a
    b470:	f108 0101 	add.w	r1, r8, #1
    b474:	d137      	bne.n	b4e6 <_vfiprintf_r+0x1ae>
    b476:	9b03      	ldr	r3, [sp, #12]
    b478:	1d1a      	adds	r2, r3, #4
    b47a:	681b      	ldr	r3, [r3, #0]
    b47c:	9203      	str	r2, [sp, #12]
    b47e:	2b00      	cmp	r3, #0
    b480:	bfb8      	it	lt
    b482:	f04f 33ff 	movlt.w	r3, #4294967295
    b486:	f108 0802 	add.w	r8, r8, #2
    b48a:	9305      	str	r3, [sp, #20]
    b48c:	4d31      	ldr	r5, [pc, #196]	; (b554 <_vfiprintf_r+0x21c>)
    b48e:	f898 1000 	ldrb.w	r1, [r8]
    b492:	2203      	movs	r2, #3
    b494:	4628      	mov	r0, r5
    b496:	f000 fa9b 	bl	b9d0 <memchr>
    b49a:	b140      	cbz	r0, b4ae <_vfiprintf_r+0x176>
    b49c:	2340      	movs	r3, #64	; 0x40
    b49e:	1b40      	subs	r0, r0, r5
    b4a0:	fa03 f000 	lsl.w	r0, r3, r0
    b4a4:	9b04      	ldr	r3, [sp, #16]
    b4a6:	4303      	orrs	r3, r0
    b4a8:	9304      	str	r3, [sp, #16]
    b4aa:	f108 0801 	add.w	r8, r8, #1
    b4ae:	f898 1000 	ldrb.w	r1, [r8]
    b4b2:	4829      	ldr	r0, [pc, #164]	; (b558 <_vfiprintf_r+0x220>)
    b4b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    b4b8:	2206      	movs	r2, #6
    b4ba:	f108 0701 	add.w	r7, r8, #1
    b4be:	f000 fa87 	bl	b9d0 <memchr>
    b4c2:	2800      	cmp	r0, #0
    b4c4:	d034      	beq.n	b530 <_vfiprintf_r+0x1f8>
    b4c6:	4b25      	ldr	r3, [pc, #148]	; (b55c <_vfiprintf_r+0x224>)
    b4c8:	bb03      	cbnz	r3, b50c <_vfiprintf_r+0x1d4>
    b4ca:	9b03      	ldr	r3, [sp, #12]
    b4cc:	3307      	adds	r3, #7
    b4ce:	f023 0307 	bic.w	r3, r3, #7
    b4d2:	3308      	adds	r3, #8
    b4d4:	9303      	str	r3, [sp, #12]
    b4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b4d8:	444b      	add	r3, r9
    b4da:	9309      	str	r3, [sp, #36]	; 0x24
    b4dc:	e74c      	b.n	b378 <_vfiprintf_r+0x40>
    b4de:	fb00 3202 	mla	r2, r0, r2, r3
    b4e2:	2101      	movs	r1, #1
    b4e4:	e786      	b.n	b3f4 <_vfiprintf_r+0xbc>
    b4e6:	2300      	movs	r3, #0
    b4e8:	9305      	str	r3, [sp, #20]
    b4ea:	4618      	mov	r0, r3
    b4ec:	250a      	movs	r5, #10
    b4ee:	4688      	mov	r8, r1
    b4f0:	3101      	adds	r1, #1
    b4f2:	f898 2000 	ldrb.w	r2, [r8]
    b4f6:	3a30      	subs	r2, #48	; 0x30
    b4f8:	2a09      	cmp	r2, #9
    b4fa:	d903      	bls.n	b504 <_vfiprintf_r+0x1cc>
    b4fc:	2b00      	cmp	r3, #0
    b4fe:	d0c5      	beq.n	b48c <_vfiprintf_r+0x154>
    b500:	9005      	str	r0, [sp, #20]
    b502:	e7c3      	b.n	b48c <_vfiprintf_r+0x154>
    b504:	fb05 2000 	mla	r0, r5, r0, r2
    b508:	2301      	movs	r3, #1
    b50a:	e7f0      	b.n	b4ee <_vfiprintf_r+0x1b6>
    b50c:	ab03      	add	r3, sp, #12
    b50e:	9300      	str	r3, [sp, #0]
    b510:	4622      	mov	r2, r4
    b512:	4b13      	ldr	r3, [pc, #76]	; (b560 <_vfiprintf_r+0x228>)
    b514:	a904      	add	r1, sp, #16
    b516:	4630      	mov	r0, r6
    b518:	f3af 8000 	nop.w
    b51c:	f1b0 3fff 	cmp.w	r0, #4294967295
    b520:	4681      	mov	r9, r0
    b522:	d1d8      	bne.n	b4d6 <_vfiprintf_r+0x19e>
    b524:	89a3      	ldrh	r3, [r4, #12]
    b526:	065b      	lsls	r3, r3, #25
    b528:	f53f af7d 	bmi.w	b426 <_vfiprintf_r+0xee>
    b52c:	9809      	ldr	r0, [sp, #36]	; 0x24
    b52e:	e77c      	b.n	b42a <_vfiprintf_r+0xf2>
    b530:	ab03      	add	r3, sp, #12
    b532:	9300      	str	r3, [sp, #0]
    b534:	4622      	mov	r2, r4
    b536:	4b0a      	ldr	r3, [pc, #40]	; (b560 <_vfiprintf_r+0x228>)
    b538:	a904      	add	r1, sp, #16
    b53a:	4630      	mov	r0, r6
    b53c:	f000 f888 	bl	b650 <_printf_i>
    b540:	e7ec      	b.n	b51c <_vfiprintf_r+0x1e4>
    b542:	bf00      	nop
    b544:	0000c1b4 	.word	0x0000c1b4
    b548:	0000c1f4 	.word	0x0000c1f4
    b54c:	0000c1d4 	.word	0x0000c1d4
    b550:	0000c194 	.word	0x0000c194
    b554:	0000c1fa 	.word	0x0000c1fa
    b558:	0000c1fe 	.word	0x0000c1fe
    b55c:	00000000 	.word	0x00000000
    b560:	0000b315 	.word	0x0000b315

0000b564 <_printf_common>:
    b564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b568:	4691      	mov	r9, r2
    b56a:	461f      	mov	r7, r3
    b56c:	688a      	ldr	r2, [r1, #8]
    b56e:	690b      	ldr	r3, [r1, #16]
    b570:	f8dd 8020 	ldr.w	r8, [sp, #32]
    b574:	4293      	cmp	r3, r2
    b576:	bfb8      	it	lt
    b578:	4613      	movlt	r3, r2
    b57a:	f8c9 3000 	str.w	r3, [r9]
    b57e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    b582:	4606      	mov	r6, r0
    b584:	460c      	mov	r4, r1
    b586:	b112      	cbz	r2, b58e <_printf_common+0x2a>
    b588:	3301      	adds	r3, #1
    b58a:	f8c9 3000 	str.w	r3, [r9]
    b58e:	6823      	ldr	r3, [r4, #0]
    b590:	0699      	lsls	r1, r3, #26
    b592:	bf42      	ittt	mi
    b594:	f8d9 3000 	ldrmi.w	r3, [r9]
    b598:	3302      	addmi	r3, #2
    b59a:	f8c9 3000 	strmi.w	r3, [r9]
    b59e:	6825      	ldr	r5, [r4, #0]
    b5a0:	f015 0506 	ands.w	r5, r5, #6
    b5a4:	d107      	bne.n	b5b6 <_printf_common+0x52>
    b5a6:	f104 0a19 	add.w	sl, r4, #25
    b5aa:	68e3      	ldr	r3, [r4, #12]
    b5ac:	f8d9 2000 	ldr.w	r2, [r9]
    b5b0:	1a9b      	subs	r3, r3, r2
    b5b2:	429d      	cmp	r5, r3
    b5b4:	db29      	blt.n	b60a <_printf_common+0xa6>
    b5b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    b5ba:	6822      	ldr	r2, [r4, #0]
    b5bc:	3300      	adds	r3, #0
    b5be:	bf18      	it	ne
    b5c0:	2301      	movne	r3, #1
    b5c2:	0692      	lsls	r2, r2, #26
    b5c4:	d42e      	bmi.n	b624 <_printf_common+0xc0>
    b5c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    b5ca:	4639      	mov	r1, r7
    b5cc:	4630      	mov	r0, r6
    b5ce:	47c0      	blx	r8
    b5d0:	3001      	adds	r0, #1
    b5d2:	d021      	beq.n	b618 <_printf_common+0xb4>
    b5d4:	6823      	ldr	r3, [r4, #0]
    b5d6:	68e5      	ldr	r5, [r4, #12]
    b5d8:	f8d9 2000 	ldr.w	r2, [r9]
    b5dc:	f003 0306 	and.w	r3, r3, #6
    b5e0:	2b04      	cmp	r3, #4
    b5e2:	bf08      	it	eq
    b5e4:	1aad      	subeq	r5, r5, r2
    b5e6:	68a3      	ldr	r3, [r4, #8]
    b5e8:	6922      	ldr	r2, [r4, #16]
    b5ea:	bf0c      	ite	eq
    b5ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    b5f0:	2500      	movne	r5, #0
    b5f2:	4293      	cmp	r3, r2
    b5f4:	bfc4      	itt	gt
    b5f6:	1a9b      	subgt	r3, r3, r2
    b5f8:	18ed      	addgt	r5, r5, r3
    b5fa:	f04f 0900 	mov.w	r9, #0
    b5fe:	341a      	adds	r4, #26
    b600:	454d      	cmp	r5, r9
    b602:	d11b      	bne.n	b63c <_printf_common+0xd8>
    b604:	2000      	movs	r0, #0
    b606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b60a:	2301      	movs	r3, #1
    b60c:	4652      	mov	r2, sl
    b60e:	4639      	mov	r1, r7
    b610:	4630      	mov	r0, r6
    b612:	47c0      	blx	r8
    b614:	3001      	adds	r0, #1
    b616:	d103      	bne.n	b620 <_printf_common+0xbc>
    b618:	f04f 30ff 	mov.w	r0, #4294967295
    b61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b620:	3501      	adds	r5, #1
    b622:	e7c2      	b.n	b5aa <_printf_common+0x46>
    b624:	18e1      	adds	r1, r4, r3
    b626:	1c5a      	adds	r2, r3, #1
    b628:	2030      	movs	r0, #48	; 0x30
    b62a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    b62e:	4422      	add	r2, r4
    b630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    b634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    b638:	3302      	adds	r3, #2
    b63a:	e7c4      	b.n	b5c6 <_printf_common+0x62>
    b63c:	2301      	movs	r3, #1
    b63e:	4622      	mov	r2, r4
    b640:	4639      	mov	r1, r7
    b642:	4630      	mov	r0, r6
    b644:	47c0      	blx	r8
    b646:	3001      	adds	r0, #1
    b648:	d0e6      	beq.n	b618 <_printf_common+0xb4>
    b64a:	f109 0901 	add.w	r9, r9, #1
    b64e:	e7d7      	b.n	b600 <_printf_common+0x9c>

0000b650 <_printf_i>:
    b650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b654:	4617      	mov	r7, r2
    b656:	7e0a      	ldrb	r2, [r1, #24]
    b658:	b085      	sub	sp, #20
    b65a:	2a6e      	cmp	r2, #110	; 0x6e
    b65c:	4698      	mov	r8, r3
    b65e:	4606      	mov	r6, r0
    b660:	460c      	mov	r4, r1
    b662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b664:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    b668:	f000 80bc 	beq.w	b7e4 <_printf_i+0x194>
    b66c:	d81a      	bhi.n	b6a4 <_printf_i+0x54>
    b66e:	2a63      	cmp	r2, #99	; 0x63
    b670:	d02e      	beq.n	b6d0 <_printf_i+0x80>
    b672:	d80a      	bhi.n	b68a <_printf_i+0x3a>
    b674:	2a00      	cmp	r2, #0
    b676:	f000 80c8 	beq.w	b80a <_printf_i+0x1ba>
    b67a:	2a58      	cmp	r2, #88	; 0x58
    b67c:	f000 808a 	beq.w	b794 <_printf_i+0x144>
    b680:	f104 0542 	add.w	r5, r4, #66	; 0x42
    b684:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    b688:	e02a      	b.n	b6e0 <_printf_i+0x90>
    b68a:	2a64      	cmp	r2, #100	; 0x64
    b68c:	d001      	beq.n	b692 <_printf_i+0x42>
    b68e:	2a69      	cmp	r2, #105	; 0x69
    b690:	d1f6      	bne.n	b680 <_printf_i+0x30>
    b692:	6821      	ldr	r1, [r4, #0]
    b694:	681a      	ldr	r2, [r3, #0]
    b696:	f011 0f80 	tst.w	r1, #128	; 0x80
    b69a:	d023      	beq.n	b6e4 <_printf_i+0x94>
    b69c:	1d11      	adds	r1, r2, #4
    b69e:	6019      	str	r1, [r3, #0]
    b6a0:	6813      	ldr	r3, [r2, #0]
    b6a2:	e027      	b.n	b6f4 <_printf_i+0xa4>
    b6a4:	2a73      	cmp	r2, #115	; 0x73
    b6a6:	f000 80b4 	beq.w	b812 <_printf_i+0x1c2>
    b6aa:	d808      	bhi.n	b6be <_printf_i+0x6e>
    b6ac:	2a6f      	cmp	r2, #111	; 0x6f
    b6ae:	d02a      	beq.n	b706 <_printf_i+0xb6>
    b6b0:	2a70      	cmp	r2, #112	; 0x70
    b6b2:	d1e5      	bne.n	b680 <_printf_i+0x30>
    b6b4:	680a      	ldr	r2, [r1, #0]
    b6b6:	f042 0220 	orr.w	r2, r2, #32
    b6ba:	600a      	str	r2, [r1, #0]
    b6bc:	e003      	b.n	b6c6 <_printf_i+0x76>
    b6be:	2a75      	cmp	r2, #117	; 0x75
    b6c0:	d021      	beq.n	b706 <_printf_i+0xb6>
    b6c2:	2a78      	cmp	r2, #120	; 0x78
    b6c4:	d1dc      	bne.n	b680 <_printf_i+0x30>
    b6c6:	2278      	movs	r2, #120	; 0x78
    b6c8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    b6cc:	496e      	ldr	r1, [pc, #440]	; (b888 <_printf_i+0x238>)
    b6ce:	e064      	b.n	b79a <_printf_i+0x14a>
    b6d0:	681a      	ldr	r2, [r3, #0]
    b6d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
    b6d6:	1d11      	adds	r1, r2, #4
    b6d8:	6019      	str	r1, [r3, #0]
    b6da:	6813      	ldr	r3, [r2, #0]
    b6dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    b6e0:	2301      	movs	r3, #1
    b6e2:	e0a3      	b.n	b82c <_printf_i+0x1dc>
    b6e4:	f011 0f40 	tst.w	r1, #64	; 0x40
    b6e8:	f102 0104 	add.w	r1, r2, #4
    b6ec:	6019      	str	r1, [r3, #0]
    b6ee:	d0d7      	beq.n	b6a0 <_printf_i+0x50>
    b6f0:	f9b2 3000 	ldrsh.w	r3, [r2]
    b6f4:	2b00      	cmp	r3, #0
    b6f6:	da03      	bge.n	b700 <_printf_i+0xb0>
    b6f8:	222d      	movs	r2, #45	; 0x2d
    b6fa:	425b      	negs	r3, r3
    b6fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    b700:	4962      	ldr	r1, [pc, #392]	; (b88c <_printf_i+0x23c>)
    b702:	220a      	movs	r2, #10
    b704:	e017      	b.n	b736 <_printf_i+0xe6>
    b706:	6820      	ldr	r0, [r4, #0]
    b708:	6819      	ldr	r1, [r3, #0]
    b70a:	f010 0f80 	tst.w	r0, #128	; 0x80
    b70e:	d003      	beq.n	b718 <_printf_i+0xc8>
    b710:	1d08      	adds	r0, r1, #4
    b712:	6018      	str	r0, [r3, #0]
    b714:	680b      	ldr	r3, [r1, #0]
    b716:	e006      	b.n	b726 <_printf_i+0xd6>
    b718:	f010 0f40 	tst.w	r0, #64	; 0x40
    b71c:	f101 0004 	add.w	r0, r1, #4
    b720:	6018      	str	r0, [r3, #0]
    b722:	d0f7      	beq.n	b714 <_printf_i+0xc4>
    b724:	880b      	ldrh	r3, [r1, #0]
    b726:	4959      	ldr	r1, [pc, #356]	; (b88c <_printf_i+0x23c>)
    b728:	2a6f      	cmp	r2, #111	; 0x6f
    b72a:	bf14      	ite	ne
    b72c:	220a      	movne	r2, #10
    b72e:	2208      	moveq	r2, #8
    b730:	2000      	movs	r0, #0
    b732:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    b736:	6865      	ldr	r5, [r4, #4]
    b738:	60a5      	str	r5, [r4, #8]
    b73a:	2d00      	cmp	r5, #0
    b73c:	f2c0 809c 	blt.w	b878 <_printf_i+0x228>
    b740:	6820      	ldr	r0, [r4, #0]
    b742:	f020 0004 	bic.w	r0, r0, #4
    b746:	6020      	str	r0, [r4, #0]
    b748:	2b00      	cmp	r3, #0
    b74a:	d13f      	bne.n	b7cc <_printf_i+0x17c>
    b74c:	2d00      	cmp	r5, #0
    b74e:	f040 8095 	bne.w	b87c <_printf_i+0x22c>
    b752:	4675      	mov	r5, lr
    b754:	2a08      	cmp	r2, #8
    b756:	d10b      	bne.n	b770 <_printf_i+0x120>
    b758:	6823      	ldr	r3, [r4, #0]
    b75a:	07da      	lsls	r2, r3, #31
    b75c:	d508      	bpl.n	b770 <_printf_i+0x120>
    b75e:	6923      	ldr	r3, [r4, #16]
    b760:	6862      	ldr	r2, [r4, #4]
    b762:	429a      	cmp	r2, r3
    b764:	bfde      	ittt	le
    b766:	2330      	movle	r3, #48	; 0x30
    b768:	f805 3c01 	strble.w	r3, [r5, #-1]
    b76c:	f105 35ff 	addle.w	r5, r5, #4294967295
    b770:	ebae 0305 	sub.w	r3, lr, r5
    b774:	6123      	str	r3, [r4, #16]
    b776:	f8cd 8000 	str.w	r8, [sp]
    b77a:	463b      	mov	r3, r7
    b77c:	aa03      	add	r2, sp, #12
    b77e:	4621      	mov	r1, r4
    b780:	4630      	mov	r0, r6
    b782:	f7ff feef 	bl	b564 <_printf_common>
    b786:	3001      	adds	r0, #1
    b788:	d155      	bne.n	b836 <_printf_i+0x1e6>
    b78a:	f04f 30ff 	mov.w	r0, #4294967295
    b78e:	b005      	add	sp, #20
    b790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b794:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    b798:	493c      	ldr	r1, [pc, #240]	; (b88c <_printf_i+0x23c>)
    b79a:	6822      	ldr	r2, [r4, #0]
    b79c:	6818      	ldr	r0, [r3, #0]
    b79e:	f012 0f80 	tst.w	r2, #128	; 0x80
    b7a2:	f100 0504 	add.w	r5, r0, #4
    b7a6:	601d      	str	r5, [r3, #0]
    b7a8:	d001      	beq.n	b7ae <_printf_i+0x15e>
    b7aa:	6803      	ldr	r3, [r0, #0]
    b7ac:	e002      	b.n	b7b4 <_printf_i+0x164>
    b7ae:	0655      	lsls	r5, r2, #25
    b7b0:	d5fb      	bpl.n	b7aa <_printf_i+0x15a>
    b7b2:	8803      	ldrh	r3, [r0, #0]
    b7b4:	07d0      	lsls	r0, r2, #31
    b7b6:	bf44      	itt	mi
    b7b8:	f042 0220 	orrmi.w	r2, r2, #32
    b7bc:	6022      	strmi	r2, [r4, #0]
    b7be:	b91b      	cbnz	r3, b7c8 <_printf_i+0x178>
    b7c0:	6822      	ldr	r2, [r4, #0]
    b7c2:	f022 0220 	bic.w	r2, r2, #32
    b7c6:	6022      	str	r2, [r4, #0]
    b7c8:	2210      	movs	r2, #16
    b7ca:	e7b1      	b.n	b730 <_printf_i+0xe0>
    b7cc:	4675      	mov	r5, lr
    b7ce:	fbb3 f0f2 	udiv	r0, r3, r2
    b7d2:	fb02 3310 	mls	r3, r2, r0, r3
    b7d6:	5ccb      	ldrb	r3, [r1, r3]
    b7d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
    b7dc:	4603      	mov	r3, r0
    b7de:	2800      	cmp	r0, #0
    b7e0:	d1f5      	bne.n	b7ce <_printf_i+0x17e>
    b7e2:	e7b7      	b.n	b754 <_printf_i+0x104>
    b7e4:	6808      	ldr	r0, [r1, #0]
    b7e6:	681a      	ldr	r2, [r3, #0]
    b7e8:	6949      	ldr	r1, [r1, #20]
    b7ea:	f010 0f80 	tst.w	r0, #128	; 0x80
    b7ee:	d004      	beq.n	b7fa <_printf_i+0x1aa>
    b7f0:	1d10      	adds	r0, r2, #4
    b7f2:	6018      	str	r0, [r3, #0]
    b7f4:	6813      	ldr	r3, [r2, #0]
    b7f6:	6019      	str	r1, [r3, #0]
    b7f8:	e007      	b.n	b80a <_printf_i+0x1ba>
    b7fa:	f010 0f40 	tst.w	r0, #64	; 0x40
    b7fe:	f102 0004 	add.w	r0, r2, #4
    b802:	6018      	str	r0, [r3, #0]
    b804:	6813      	ldr	r3, [r2, #0]
    b806:	d0f6      	beq.n	b7f6 <_printf_i+0x1a6>
    b808:	8019      	strh	r1, [r3, #0]
    b80a:	2300      	movs	r3, #0
    b80c:	6123      	str	r3, [r4, #16]
    b80e:	4675      	mov	r5, lr
    b810:	e7b1      	b.n	b776 <_printf_i+0x126>
    b812:	681a      	ldr	r2, [r3, #0]
    b814:	1d11      	adds	r1, r2, #4
    b816:	6019      	str	r1, [r3, #0]
    b818:	6815      	ldr	r5, [r2, #0]
    b81a:	6862      	ldr	r2, [r4, #4]
    b81c:	2100      	movs	r1, #0
    b81e:	4628      	mov	r0, r5
    b820:	f000 f8d6 	bl	b9d0 <memchr>
    b824:	b108      	cbz	r0, b82a <_printf_i+0x1da>
    b826:	1b40      	subs	r0, r0, r5
    b828:	6060      	str	r0, [r4, #4]
    b82a:	6863      	ldr	r3, [r4, #4]
    b82c:	6123      	str	r3, [r4, #16]
    b82e:	2300      	movs	r3, #0
    b830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    b834:	e79f      	b.n	b776 <_printf_i+0x126>
    b836:	6923      	ldr	r3, [r4, #16]
    b838:	462a      	mov	r2, r5
    b83a:	4639      	mov	r1, r7
    b83c:	4630      	mov	r0, r6
    b83e:	47c0      	blx	r8
    b840:	3001      	adds	r0, #1
    b842:	d0a2      	beq.n	b78a <_printf_i+0x13a>
    b844:	6823      	ldr	r3, [r4, #0]
    b846:	079b      	lsls	r3, r3, #30
    b848:	d507      	bpl.n	b85a <_printf_i+0x20a>
    b84a:	2500      	movs	r5, #0
    b84c:	f104 0919 	add.w	r9, r4, #25
    b850:	68e3      	ldr	r3, [r4, #12]
    b852:	9a03      	ldr	r2, [sp, #12]
    b854:	1a9b      	subs	r3, r3, r2
    b856:	429d      	cmp	r5, r3
    b858:	db05      	blt.n	b866 <_printf_i+0x216>
    b85a:	68e0      	ldr	r0, [r4, #12]
    b85c:	9b03      	ldr	r3, [sp, #12]
    b85e:	4298      	cmp	r0, r3
    b860:	bfb8      	it	lt
    b862:	4618      	movlt	r0, r3
    b864:	e793      	b.n	b78e <_printf_i+0x13e>
    b866:	2301      	movs	r3, #1
    b868:	464a      	mov	r2, r9
    b86a:	4639      	mov	r1, r7
    b86c:	4630      	mov	r0, r6
    b86e:	47c0      	blx	r8
    b870:	3001      	adds	r0, #1
    b872:	d08a      	beq.n	b78a <_printf_i+0x13a>
    b874:	3501      	adds	r5, #1
    b876:	e7eb      	b.n	b850 <_printf_i+0x200>
    b878:	2b00      	cmp	r3, #0
    b87a:	d1a7      	bne.n	b7cc <_printf_i+0x17c>
    b87c:	780b      	ldrb	r3, [r1, #0]
    b87e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    b882:	f104 0542 	add.w	r5, r4, #66	; 0x42
    b886:	e765      	b.n	b754 <_printf_i+0x104>
    b888:	0000c216 	.word	0x0000c216
    b88c:	0000c205 	.word	0x0000c205

0000b890 <__sread>:
    b890:	b510      	push	{r4, lr}
    b892:	460c      	mov	r4, r1
    b894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b898:	f000 f8ea 	bl	ba70 <_read_r>
    b89c:	2800      	cmp	r0, #0
    b89e:	bfab      	itete	ge
    b8a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    b8a2:	89a3      	ldrhlt	r3, [r4, #12]
    b8a4:	181b      	addge	r3, r3, r0
    b8a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    b8aa:	bfac      	ite	ge
    b8ac:	6563      	strge	r3, [r4, #84]	; 0x54
    b8ae:	81a3      	strhlt	r3, [r4, #12]
    b8b0:	bd10      	pop	{r4, pc}

0000b8b2 <__swrite>:
    b8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8b6:	461f      	mov	r7, r3
    b8b8:	898b      	ldrh	r3, [r1, #12]
    b8ba:	05db      	lsls	r3, r3, #23
    b8bc:	4605      	mov	r5, r0
    b8be:	460c      	mov	r4, r1
    b8c0:	4616      	mov	r6, r2
    b8c2:	d505      	bpl.n	b8d0 <__swrite+0x1e>
    b8c4:	2302      	movs	r3, #2
    b8c6:	2200      	movs	r2, #0
    b8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b8cc:	f000 f868 	bl	b9a0 <_lseek_r>
    b8d0:	89a3      	ldrh	r3, [r4, #12]
    b8d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b8d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b8da:	81a3      	strh	r3, [r4, #12]
    b8dc:	4632      	mov	r2, r6
    b8de:	463b      	mov	r3, r7
    b8e0:	4628      	mov	r0, r5
    b8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b8e6:	f000 b817 	b.w	b918 <_write_r>

0000b8ea <__sseek>:
    b8ea:	b510      	push	{r4, lr}
    b8ec:	460c      	mov	r4, r1
    b8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b8f2:	f000 f855 	bl	b9a0 <_lseek_r>
    b8f6:	1c43      	adds	r3, r0, #1
    b8f8:	89a3      	ldrh	r3, [r4, #12]
    b8fa:	bf15      	itete	ne
    b8fc:	6560      	strne	r0, [r4, #84]	; 0x54
    b8fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b906:	81a3      	strheq	r3, [r4, #12]
    b908:	bf18      	it	ne
    b90a:	81a3      	strhne	r3, [r4, #12]
    b90c:	bd10      	pop	{r4, pc}

0000b90e <__sclose>:
    b90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b912:	f000 b813 	b.w	b93c <_close_r>
	...

0000b918 <_write_r>:
    b918:	b538      	push	{r3, r4, r5, lr}
    b91a:	4c07      	ldr	r4, [pc, #28]	; (b938 <_write_r+0x20>)
    b91c:	4605      	mov	r5, r0
    b91e:	4608      	mov	r0, r1
    b920:	4611      	mov	r1, r2
    b922:	2200      	movs	r2, #0
    b924:	6022      	str	r2, [r4, #0]
    b926:	461a      	mov	r2, r3
    b928:	f7fe f8ca 	bl	9ac0 <_write>
    b92c:	1c43      	adds	r3, r0, #1
    b92e:	d102      	bne.n	b936 <_write_r+0x1e>
    b930:	6823      	ldr	r3, [r4, #0]
    b932:	b103      	cbz	r3, b936 <_write_r+0x1e>
    b934:	602b      	str	r3, [r5, #0]
    b936:	bd38      	pop	{r3, r4, r5, pc}
    b938:	200076a0 	.word	0x200076a0

0000b93c <_close_r>:
    b93c:	b538      	push	{r3, r4, r5, lr}
    b93e:	4c06      	ldr	r4, [pc, #24]	; (b958 <_close_r+0x1c>)
    b940:	2300      	movs	r3, #0
    b942:	4605      	mov	r5, r0
    b944:	4608      	mov	r0, r1
    b946:	6023      	str	r3, [r4, #0]
    b948:	f7fa ffce 	bl	68e8 <_close>
    b94c:	1c43      	adds	r3, r0, #1
    b94e:	d102      	bne.n	b956 <_close_r+0x1a>
    b950:	6823      	ldr	r3, [r4, #0]
    b952:	b103      	cbz	r3, b956 <_close_r+0x1a>
    b954:	602b      	str	r3, [r5, #0]
    b956:	bd38      	pop	{r3, r4, r5, pc}
    b958:	200076a0 	.word	0x200076a0

0000b95c <_fstat_r>:
    b95c:	b538      	push	{r3, r4, r5, lr}
    b95e:	4c07      	ldr	r4, [pc, #28]	; (b97c <_fstat_r+0x20>)
    b960:	2300      	movs	r3, #0
    b962:	4605      	mov	r5, r0
    b964:	4608      	mov	r0, r1
    b966:	4611      	mov	r1, r2
    b968:	6023      	str	r3, [r4, #0]
    b96a:	f7fa ffc0 	bl	68ee <_fstat>
    b96e:	1c43      	adds	r3, r0, #1
    b970:	d102      	bne.n	b978 <_fstat_r+0x1c>
    b972:	6823      	ldr	r3, [r4, #0]
    b974:	b103      	cbz	r3, b978 <_fstat_r+0x1c>
    b976:	602b      	str	r3, [r5, #0]
    b978:	bd38      	pop	{r3, r4, r5, pc}
    b97a:	bf00      	nop
    b97c:	200076a0 	.word	0x200076a0

0000b980 <_isatty_r>:
    b980:	b538      	push	{r3, r4, r5, lr}
    b982:	4c06      	ldr	r4, [pc, #24]	; (b99c <_isatty_r+0x1c>)
    b984:	2300      	movs	r3, #0
    b986:	4605      	mov	r5, r0
    b988:	4608      	mov	r0, r1
    b98a:	6023      	str	r3, [r4, #0]
    b98c:	f7fa ffb4 	bl	68f8 <_isatty>
    b990:	1c43      	adds	r3, r0, #1
    b992:	d102      	bne.n	b99a <_isatty_r+0x1a>
    b994:	6823      	ldr	r3, [r4, #0]
    b996:	b103      	cbz	r3, b99a <_isatty_r+0x1a>
    b998:	602b      	str	r3, [r5, #0]
    b99a:	bd38      	pop	{r3, r4, r5, pc}
    b99c:	200076a0 	.word	0x200076a0

0000b9a0 <_lseek_r>:
    b9a0:	b538      	push	{r3, r4, r5, lr}
    b9a2:	4c07      	ldr	r4, [pc, #28]	; (b9c0 <_lseek_r+0x20>)
    b9a4:	4605      	mov	r5, r0
    b9a6:	4608      	mov	r0, r1
    b9a8:	4611      	mov	r1, r2
    b9aa:	2200      	movs	r2, #0
    b9ac:	6022      	str	r2, [r4, #0]
    b9ae:	461a      	mov	r2, r3
    b9b0:	f7fa ffa4 	bl	68fc <_lseek>
    b9b4:	1c43      	adds	r3, r0, #1
    b9b6:	d102      	bne.n	b9be <_lseek_r+0x1e>
    b9b8:	6823      	ldr	r3, [r4, #0]
    b9ba:	b103      	cbz	r3, b9be <_lseek_r+0x1e>
    b9bc:	602b      	str	r3, [r5, #0]
    b9be:	bd38      	pop	{r3, r4, r5, pc}
    b9c0:	200076a0 	.word	0x200076a0
	...

0000b9d0 <memchr>:
    b9d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b9d4:	2a10      	cmp	r2, #16
    b9d6:	db2b      	blt.n	ba30 <memchr+0x60>
    b9d8:	f010 0f07 	tst.w	r0, #7
    b9dc:	d008      	beq.n	b9f0 <memchr+0x20>
    b9de:	f810 3b01 	ldrb.w	r3, [r0], #1
    b9e2:	3a01      	subs	r2, #1
    b9e4:	428b      	cmp	r3, r1
    b9e6:	d02d      	beq.n	ba44 <memchr+0x74>
    b9e8:	f010 0f07 	tst.w	r0, #7
    b9ec:	b342      	cbz	r2, ba40 <memchr+0x70>
    b9ee:	d1f6      	bne.n	b9de <memchr+0xe>
    b9f0:	b4f0      	push	{r4, r5, r6, r7}
    b9f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b9f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b9fa:	f022 0407 	bic.w	r4, r2, #7
    b9fe:	f07f 0700 	mvns.w	r7, #0
    ba02:	2300      	movs	r3, #0
    ba04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    ba08:	3c08      	subs	r4, #8
    ba0a:	ea85 0501 	eor.w	r5, r5, r1
    ba0e:	ea86 0601 	eor.w	r6, r6, r1
    ba12:	fa85 f547 	uadd8	r5, r5, r7
    ba16:	faa3 f587 	sel	r5, r3, r7
    ba1a:	fa86 f647 	uadd8	r6, r6, r7
    ba1e:	faa5 f687 	sel	r6, r5, r7
    ba22:	b98e      	cbnz	r6, ba48 <memchr+0x78>
    ba24:	d1ee      	bne.n	ba04 <memchr+0x34>
    ba26:	bcf0      	pop	{r4, r5, r6, r7}
    ba28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ba2c:	f002 0207 	and.w	r2, r2, #7
    ba30:	b132      	cbz	r2, ba40 <memchr+0x70>
    ba32:	f810 3b01 	ldrb.w	r3, [r0], #1
    ba36:	3a01      	subs	r2, #1
    ba38:	ea83 0301 	eor.w	r3, r3, r1
    ba3c:	b113      	cbz	r3, ba44 <memchr+0x74>
    ba3e:	d1f8      	bne.n	ba32 <memchr+0x62>
    ba40:	2000      	movs	r0, #0
    ba42:	4770      	bx	lr
    ba44:	3801      	subs	r0, #1
    ba46:	4770      	bx	lr
    ba48:	2d00      	cmp	r5, #0
    ba4a:	bf06      	itte	eq
    ba4c:	4635      	moveq	r5, r6
    ba4e:	3803      	subeq	r0, #3
    ba50:	3807      	subne	r0, #7
    ba52:	f015 0f01 	tst.w	r5, #1
    ba56:	d107      	bne.n	ba68 <memchr+0x98>
    ba58:	3001      	adds	r0, #1
    ba5a:	f415 7f80 	tst.w	r5, #256	; 0x100
    ba5e:	bf02      	ittt	eq
    ba60:	3001      	addeq	r0, #1
    ba62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    ba66:	3001      	addeq	r0, #1
    ba68:	bcf0      	pop	{r4, r5, r6, r7}
    ba6a:	3801      	subs	r0, #1
    ba6c:	4770      	bx	lr
    ba6e:	bf00      	nop

0000ba70 <_read_r>:
    ba70:	b538      	push	{r3, r4, r5, lr}
    ba72:	4c07      	ldr	r4, [pc, #28]	; (ba90 <_read_r+0x20>)
    ba74:	4605      	mov	r5, r0
    ba76:	4608      	mov	r0, r1
    ba78:	4611      	mov	r1, r2
    ba7a:	2200      	movs	r2, #0
    ba7c:	6022      	str	r2, [r4, #0]
    ba7e:	461a      	mov	r2, r3
    ba80:	f7fe f80e 	bl	9aa0 <_read>
    ba84:	1c43      	adds	r3, r0, #1
    ba86:	d102      	bne.n	ba8e <_read_r+0x1e>
    ba88:	6823      	ldr	r3, [r4, #0]
    ba8a:	b103      	cbz	r3, ba8e <_read_r+0x1e>
    ba8c:	602b      	str	r3, [r5, #0]
    ba8e:	bd38      	pop	{r3, r4, r5, pc}
    ba90:	200076a0 	.word	0x200076a0
    ba94:	64726148 	.word	0x64726148
    ba98:	65726177 	.word	0x65726177
    ba9c:	73655420 	.word	0x73655420
    baa0:	6e492074 	.word	0x6e492074
    baa4:	00007469 	.word	0x00007469

0000baa8 <_adcs>:
    baa8:	01000000 0003000c 00041807 00000000     ................
    bab8:	0014080b 00010000 000c0100 18040003     ................
    bac8:	00000004 080b0000 00000014              ............

0000bad4 <_cfgs>:
    bad4:	00200600 08068000 00200400 08068000     .. ....... .....
    bae4:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    bb04:	00200b00 14000003 00200a00 08000002     .. ....... .....
    bb14:	00201300 14000003 00000000 00000000     .. .............
	...
    bbc4:	00005400 1c000000 00005300 0c000000     .T.......S......

0000bbd4 <user_mux_confs>:
	...
    bc00:	04030201 04030201 00000000 00000000     ................
	...

0000bc18 <channel_confs>:
    bc18:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000bc58 <interrupt_cfg>:
    bc58:	00000002 00000002 00000002 00000002     ................
	...
    bcd8:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    bce8:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000bcf8 <_usarts>:
    bcf8:	00000000 40100004 00030000 00700002     .......@......p.
    bd08:	0000aaaa 00000000 00000001 40100004     ...............@
    bd18:	00030000 00700002 0000aaaa 00000000     ......p.........
    bd28:	00000002 40100004 00030000 00700002     .......@......p.
    bd38:	00005555 00000000 00000004 40100004     UU.............@
    bd48:	00030000 00700002 0000aaaa 00000000     ......p.........
    bd58:	00000006 40100004 00030000 00700002     .......@......p.
    bd68:	0000aaaa 00000000                       ........

0000bd70 <_i2cms>:
    bd70:	00000005 00200014 00000100 0000e6e5     ...... .........
    bd80:	00d70000 02dc6c00                       .....l..

0000bd88 <sercomspi_regs>:
    bd88:	3020000c 00020000 00000000 01ff0005     .. 0............
    bd98:	20000c03 00000000 00000000 ff000600     ... ............
    bda8:	00000701 40003800 40003c00 4101a000     .....8.@.<.@...A
    bdb8:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    bdc8:	43001800                                ...C

0000bdcc <_tcs>:
    bdcc:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    bddc:	00000000 006c0001 00000308 00000021     ......l.....!...
    bdec:	00003a98 00000000 006d0002 00000308     .:........m.....
    bdfc:	00000021 00003a98 00000000 006e0003     !....:........n.
    be0c:	00000308 00000021 00003a98 00000000     ....!....:......

0000be1c <_usb_ep_cfgs>:
    be1c:	20000824 00000000 00000040 00000000     $.. ....@.......
	...
    be34:	2000081c 00000000 00000008 200007dc     ... ........... 
    be44:	200007d4 00080040 00000000 00000000     ... @...........
	...
    be5c:	20000794 00400000 656d6954 2074756f     ... ..@.Timeout 
    be6c:	63736944 656e6e6f 26207463 73655220     Disconnect & Res
    be7c:	52207465 69656365 00726576 7974227b     et Receiver.{"ty
    be8c:	3a226570 52415722 474e494e 22202c22     pe":"WARNING", "
    be9c:	61746164 5b203a22 22732522 0a0d7d5d     data": ["%s"]}..
    beac:	00000000 656d6954 2074756f 65522026     ....Timeout & Re
    bebc:	20746573 65636552 72657669 00000000     set Receiver....
    becc:	645f7872 6c62756f 75625f65 72656666     rx_double_buffer
    bedc:	65766f20 6e757272 00003120 645f7872      overrun 1..rx_d
    beec:	6c62756f 75625f65 72656666 65766f20     ouble_buffer ove
    befc:	6e757272 00003220 645f7872 6c62756f     rrun 2..rx_doubl
    bf0c:	75625f65 72656666 65766f20 6e757272     e_buffer overrun
    bf1c:	00003320 6d617246 74532065 20747261      3..Frame Start 
    bf2c:	7366664f 00007465 6e6e6f43 00746365     Offset..Connect.
    bf3c:	7974227b 3a226570 41572220 4e494e52     {"type": "WARNIN
    bf4c:	202c2247 74616422 203a2261 6e55225b     G", "data": ["Un
    bf5c:	776f6e6b 73654d20 65676173 70795420     know Message Typ
    bf6c:	7d5d2265 0000000d 7974227b 3a226570     e"]}....{"type":
    bf7c:	41572220 4e494e52 202c2247 74616422      "WARNING", "dat
    bf8c:	203a2261 6e49225b 696c6176 68432064     a": ["Invalid Ch
    bf9c:	736b6365 5d226d75 00000d7d 7974227b     ecksum"]}...{"ty
    bfac:	3a226570 52452220 22524f52 6422202c     pe": "ERROR", "d
    bfbc:	22617461 225b203a 6d617246 72452065     ata": ["Frame Er
    bfcc:	22726f72 000d7d5d 7974227b 3a226570     ror"]}..{"type":
    bfdc:	52452220 22524f52 6422202c 22617461      "ERROR", "data"
    bfec:	225b203a 69726150 45207974 726f7272     : ["Parity Error
    bffc:	0d7d5d22 00000000 49505351 6f725020     "]}.....QSPI Pro
    c00c:	6d617267 61745320 64657472 00000d0a     gram Started....
    c01c:	73616c46 72652068 20657361 63637573     Flash erase succ
    c02c:	66737365 0d0a6c75 00000000 73616c46     essful......Flas
    c03c:	72772068 20657469 63637573 66737365     h write successf
    c04c:	0d0a6c75 00000000 73616c46 65722068     ul......Flash re
    c05c:	73206461 65636375 75667373 000d0a6c     ad successful...
    c06c:	73616c46 61642068 76206174 66697265     Flash data verif
    c07c:	74616369 206e6f69 6c696166 0a2e6465     ication failed..
    c08c:	0000000d 74697257 202d2065 64616552     ....Write - Read
    c09c:	20736920 63637573 66737365 69206c75      is successful i
    c0ac:	5351206e 46204950 6873616c 6d656d20     n QSPI Flash mem
    c0bc:	2e79726f 00000d0a 72617453 6e492074     ory.....Start In
    c0cc:	61697469 657a696c 00000064 7974227b     itialized...{"ty
    c0dc:	3a226570 474f4c22 22202c22 61746164     pe":"LOG", "data
    c0ec:	5b203a22 22732522 0a0d7d5d 00000000     ": ["%s"]}......
    c0fc:	6e6b6e55 5220776f 74657365 756f5320     Unknow Reset Sou
    c10c:	00656372 55206f4e 2074696e 74736554     rce.No Unit Test
    c11c:	00000000                                ....

0000c120 <keyboard_report_desc>:
    c120:	06090105 070501a1 e729e019 01250015     ..........)...%.
    c130:	08950175 01810281 65290019 65250015     u.........)e..%e
    c140:	06950875 08050081 05290119 01250015     u.........)...%.
    c150:	05950175 03950291 00c00191              u...........

0000c15c <mouse_report_desc>:
    c15c:	02090105 010901a1 090500a1 03290119     ..............).
    c16c:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    c17c:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    c18c:	c0c00681                                ....

0000c190 <_global_impure_ptr>:
    c190:	2000005c                                \.. 

0000c194 <__sf_fake_stderr>:
	...

0000c1b4 <__sf_fake_stdin>:
	...

0000c1d4 <__sf_fake_stdout>:
	...
    c1f4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c204:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c214:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c224:	00006665                                ef..

0000c228 <_init>:
    c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c22a:	bf00      	nop
    c22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c22e:	bc08      	pop	{r3}
    c230:	469e      	mov	lr, r3
    c232:	4770      	bx	lr

0000c234 <__init_array_start>:
    c234:	00004289 	.word	0x00004289

0000c238 <_fini>:
    c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c23a:	bf00      	nop
    c23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c23e:	bc08      	pop	{r3}
    c240:	469e      	mov	lr, r3
    c242:	4770      	bx	lr

0000c244 <__fini_array_start>:
    c244:	00004265 	.word	0x00004265
