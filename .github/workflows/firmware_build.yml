name: Combined Firmware Workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
  push:
    paths:
      - 'grid_common/**'
      - 'grid_esp/**'
      - 'grid_make/**'
      - 'grid_pico/**'
      - '.github/workflows/**'
  tags:
    - 'v*.*.*'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo and submodules
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Install RP2040 SDK and build co-processor firmware
        run: |
          sudo apt update
          sudo apt install -y git python3 cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential
          git clone https://github.com/raspberrypi/pico-sdk.git --branch master
          cd pico-sdk/
          git submodule update --init
          cd ..
          export PICO_SDK_PATH=$(pwd)/pico-sdk/
          echo "The Path: $PICO_SDK_PATH"
          cd grid_pico/
          mkdir -p build
          cd build
          cmake ..
          make
          cd main
          xxd -i main.bin > pico_firmware.h
          sed -i '1i\const \\' pico_firmware.h
          sed -i 's/main_bin/pico_firmware/g' pico_firmware.h
          cat pico_firmware.h
          cp pico_firmware.h ../../../grid_esp/main/pico_firmware.h

      - name: Install GNU Arm Embedded Toolchain (arm-none-eabi-gcc)
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: '9-2020-q2' # <-- The compiler release to use

      - name: Test ARM GCC and build D51 firmware variant
        run: |
          arm-none-eabi-gcc -v
          cd grid_make/gcc && make release_automation

      - name: esp-idf build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.1.2
          target: esp32s3
          path: 'grid_esp'
          command: idf.py build

      - name: Convert ESP firmware to UF2
        run: |
          cd ./grid_esp
          mkdir ./output
          python3 ./tools/uf2conv.py -f ESP32S3 ./build/grid_fw.bin -b 0x0 -c -o ./output/grid_fw.uf2

      - name: Set env
        shell: bash
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "action_date=$(date +'%Y-%m-%d-%H%M')" >> $GITHUB_ENV

      - name: See env
        run: echo "${{ env.RELEASE_VERSION }}"

      - name: Copy and rename the artifacts
        run: |
          ls
          cp binary/grid_release.uf2 grid_d51_release_${{ env.action_date }}.uf2
          cp grid_esp/output/grid_fw.uf2 grid_esp32_release_${{ env.action_date }}.uf2
          cp binary/grid_release.uf2 grid_d51_nightly_${{ env.action_date }}.uf2
          cp grid_esp/output/grid_fw.uf2 grid_esp32_nightly_${{ env.action_date }}.uf2
          cp .github/workflows/INSTRUCTIONS.txt INSTRUCTIONS__USE_D51_VERSION_IF_UNSURE.txt

      - uses: actions/upload-artifact@v3
        with:
          name: ESP32 Nightly
          path: grid_esp32_nightly_${{ env.action_date }}.uf2

      - name: Zipping artifacts for Github Release
        uses: vimtor/action-zip@v1
        if: ${{ github.event_name == 'tag' }}
        with:
          files: grid_d51_release_${{ env.action_date }}.uf2 grid_esp32_release_${{ env.action_date }}.uf2 INSTRUCTIONS__USE_D51_VERSION_IF_UNSURE.txt
          dest: grid_release.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ github.event_name == 'tag' }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Grid  ${{ env.RELEASE_VERSION }} (${{ env.action_date }})
          files: grid_release.zip
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
