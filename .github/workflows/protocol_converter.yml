# This is a basic workflow that is manually triggered

name: Frontpanel mfg workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true
  push:
    paths:
      - 'grid_make/grid/grid_protocol.h'
      - '.github/workflows/protocol_converter.yml'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
		import sys
		import re
		import json

		def build_json(file_name='grid_make/grid/grid_protocol.h'):
		    data = {};
		    for line in get_lines(file_name):
			key, value = get_macro_key_value(line)
			if key:
			    data[key] = value
		    return data

		def get_lines(file_name):
		    with open(file_name) as fp:
			for line in fp:
			    yield line

		def get_macro_key_value(line):
		    m = re.search('^#define\s+(?P<key>\w+)\s+"?(?P<value>[\w\.,%]+)"?', line);
		    if m is None:
			return (None, None)
		    return (m.group('key'), m.group('value'));

		def write_output(data, file_name='out.json'):
		    with open(file_name, 'w+') as fp:
			json.dump(data, fp, indent=4)

		def convert(input_file_name, output_file_name):
		    write_output(build_json(input_file_name), output_file_name)

		if __name__ == '__main__':
		    if len(sys.argv) < 2:
			print('Provide input file name as first argument')
			sys.exit()
		    input_file = sys.argv[1]
		    output_file = sys.argv[2] if len(sys.argv) > 2 else 'out.json'
		    print('input:', input_file)
		    print('output:', output_file)
		    convert(input_file, output_file)

      - name: Check file
      	run: |
        	cat -v out.json
