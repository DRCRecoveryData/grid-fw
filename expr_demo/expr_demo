/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/
#include <stdio.h>
#include <stdlib.h> 
#include <string.h> 
  
//https://www.geeksforgeeks.org/c-program-replace-word-text-another-given-word/
// Function to replace a string with another 
// string 
char* replaceWord(const char* s, const char* oldW, 
                  const char* newW) 
{ 
    char* result; 
    int i, cnt = 0; 
    int newWlen = strlen(newW); 
    int oldWlen = strlen(oldW); 
  
    // Counting the number of times old word 
    // occur in the string 
    for (i = 0; s[i] != '\0'; i++) { 
        if (strstr(&s[i], oldW) == &s[i]) { 
            cnt++; 
  
            // Jumping to index after the old word. 
            i += oldWlen - 1; 
        } 
    } 
  
    // Making new string of enough length 
    result = (char*)malloc(i + cnt * (newWlen - oldWlen) + 1); 
  
    i = 0; 
    while (*s) { 
        // compare the substring with the result 
        if (strstr(s, oldW) == s) { 
            strcpy(&result[i], newW); 
            i += newWlen; 
            s += oldWlen; 
        } 
        else
            result[i++] = *s++; 
    } 
  
    result[i] = '\0'; 
    return result; 
} 

//https://stackoverflow.com/questions/9329406/evaluating-arithmetic-expressions-from-string-in-c
char peek(char** e)
{
    return **e;
}

char get(char** e)
{
    char ret = **e;
    ++*e;
    return ret;
}

int expression();

int number(char** e)
{
    int result = get(e) - '0';
    while (peek(e) >= '0' && peek(e) <= '9')
    {
        result = 10*result + get(e) - '0';
    }
    return result;
}

int factor(char** e)
{
    if (peek(e) >= '0' && peek(e) <= '9')
        return number(e);
    else if (peek(e) == '(')
    {
        get(e); // '('
        int result = expression(e);
        get(e); // ')'
        return result;
    }
    else if (peek(e) == '-')
    {
        get(e);
        return -factor(e);
    }
    return 0; // error
}

int term(char ** e)
{
    int result = factor(e);
    while (peek(e) == '*' || peek(e) == '/')
        if (get(e) == '*')
            result *= factor(e);
        else
            result /= factor(e);
    return result;
}

int expression(char ** e)
{
    int result = term(e);
    while (peek(e) == '+' || peek(e) == '-')
        if (get(e) == '+')
            result += term(e);
        else
            result -= term(e);
    return result;
}

int alma(char** a){
    ++(*a);
}

int main()
{
    char exprArr[100] = {0};
    sprintf(exprArr,"1+10");
    
    char * expressionToParse = exprArr;
    
    int result = expression(&expressionToParse);

    //char * expressionToParse2= "3*2+x*1+(4+9)*x";
    //char* expr2 = setVariable("x",10);
    
    
    //int result2 = expression(&expressionToParse2);
    
    printf("%i",result);
    //printf("%i",result2);
    return 10;
}
