
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f1ec  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005ac  20000000  0000f1ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205ac  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205ac  2**0
                  CONTENTS
  4 .bss          000077e0  200005b0  0000f7a0  000205b0  2**4
                  ALLOC
  5 .stack        00010000  20007d90  00016f80  000205b0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205ac  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205da  2**0
                  CONTENTS, READONLY
  8 .debug_info   00094e8c  00000000  00000000  00020633  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c27c  00000000  00000000  000b54bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002eb32  00000000  00000000  000c173b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023a0  00000000  00000000  000f026d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003428  00000000  00000000  000f260d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004961e  00000000  00000000  000f5a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00041d60  00000000  00000000  0013f053  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011c0ca  00000000  00000000  00180db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006a20  00000000  00000000  0029ce80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 7d 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     .}. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	61 7f 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     a...............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 6d 7b 00 00 81 7b 00 00     ........m{...{..
      bc:	71 79 00 00 7d 79 00 00 89 79 00 00 95 79 00 00     qy..}y...y...y..
      cc:	a1 79 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .y..............
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	95 7d 00 00 7d 8a 00 00 91 8a 00 00 a5 8a 00 00     .}..}...........
     104:	b9 8a 00 00 cd 8a 00 00 e1 8a 00 00 f5 8a 00 00     ................
     114:	09 8b 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 1d 8b 00 00 31 8b 00 00 45 8b 00 00     ........1...E...
     134:	59 8b 00 00 6d 8b 00 00 81 8b 00 00 95 8b 00 00     Y...m...........
     144:	a9 8b 00 00 bd 8b 00 00 d1 8b 00 00 e5 8b 00 00     ................
     154:	f9 8b 00 00 0d 8c 00 00 21 8c 00 00 35 8c 00 00     ........!...5...
     164:	49 8c 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     I...............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 65 ab 00 00     ............e...
     184:	71 ab 00 00 7d ab 00 00 89 ab 00 00 00 00 00 00     q...}...........
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 6d 98 00 00 81 98 00 00     ........m.......
     1f4:	95 98 00 00 a9 98 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 05 76 00 00 19 76 00 00 2d 76 00 00     .....v...v..-v..
     224:	41 76 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     Av..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005b0 	.word	0x200005b0
     280:	00000000 	.word	0x00000000
     284:	0000f1ec 	.word	0x0000f1ec

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f1ec 	.word	0x0000f1ec
     2c4:	200005b4 	.word	0x200005b4
     2c8:	0000f1ec 	.word	0x0000f1ec
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000c899 	.word	0x0000c899
     2e8:	0000b401 	.word	0x0000b401

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000f1ec 	.word	0x0000f1ec
     36c:	200005ac 	.word	0x200005ac
     370:	20007d90 	.word	0x20007d90
     374:	200005b0 	.word	0x200005b0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000d079 	.word	0x0000d079
     384:	0000adb1 	.word	0x0000adb1

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005cc 	.word	0x200005cc
     408:	20001050 	.word	0x20001050
     40c:	2000114c 	.word	0x2000114c
     410:	43001c00 	.word	0x43001c00
     414:	000058dd 	.word	0x000058dd
     418:	00005981 	.word	0x00005981
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005cc 	.word	0x200005cc
     4ac:	20001224 	.word	0x20001224
     4b0:	20000fec 	.word	0x20000fec
     4b4:	43002000 	.word	0x43002000
     4b8:	000058dd 	.word	0x000058dd
     4bc:	00005981 	.word	0x00005981
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000fe8 	.word	0x20000fe8
     4e8:	00005c1d 	.word	0x00005c1d

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	00005ca1 	.word	0x00005ca1

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000fcc 	.word	0x20000fcc
     54c:	00005cc1 	.word	0x00005cc1

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001290 	.word	0x20001290
     718:	00005f39 	.word	0x00005f39
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	200005f4 	.word	0x200005f4
     7b4:	40003000 	.word	0x40003000
     7b8:	2000107c 	.word	0x2000107c
     7bc:	00006819 	.word	0x00006819
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000604 	.word	0x20000604
     858:	40003400 	.word	0x40003400
     85c:	200010d0 	.word	0x200010d0
     860:	00006819 	.word	0x00006819
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	20001044 	.word	0x20001044
     8f8:	00006aa1 	.word	0x00006aa1
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000f44 	.word	0x20000f44
     a04:	00006129 	.word	0x00006129
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000614 	.word	0x20000614
     aa4:	20001184 	.word	0x20001184
     aa8:	00006819 	.word	0x00006819
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	20001004 	.word	0x20001004
     b54:	00005e6d 	.word	0x00005e6d
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000624 	.word	0x20000624
     bf0:	43000800 	.word	0x43000800
     bf4:	200011d4 	.word	0x200011d4
     bf8:	00006819 	.word	0x00006819
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001120 	.word	0x20001120
     cfc:	0000638d 	.word	0x0000638d
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	00005c4d 	.word	0x00005c4d

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	00006d69 	.word	0x00006d69
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000e548 	.word	0x0000e548
     e14:	000070c1 	.word	0x000070c1
     e18:	200010cc 	.word	0x200010cc
     e1c:	40002000 	.word	0x40002000
     e20:	0000ab95 	.word	0x0000ab95

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	00007685 	.word	0x00007685
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	00007f59 	.word	0x00007f59
    1100:	40002400 	.word	0x40002400
    1104:	20000f8c 	.word	0x20000f8c
    1108:	00006535 	.word	0x00006535
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	00009865 	.word	0x00009865
    1134:	40003800 	.word	0x40003800
    1138:	20001270 	.word	0x20001270
    113c:	40003c00 	.word	0x40003c00
    1140:	20001164 	.word	0x20001164
    1144:	4101a000 	.word	0x4101a000
    1148:	20000fac 	.word	0x20000fac
    114c:	4101c000 	.word	0x4101c000
    1150:	20001250 	.word	0x20001250
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_d51_init>:
	
}



void grid_d51_init(){
    1160:	b538      	push	{r3, r4, r5, lr}
	
	uint32_t hwid = grid_sys_get_hwcfg();
    1162:	4b08      	ldr	r3, [pc, #32]	; (1184 <grid_d51_init+0x24>)
    1164:	4798      	blx	r3
	
	printf("{\"type\":\"HWCFG\", \"data\": \"%d\"}\r\n", hwid);
    1166:	4601      	mov	r1, r0
    1168:	4807      	ldr	r0, [pc, #28]	; (1188 <grid_d51_init+0x28>)
    116a:	4c08      	ldr	r4, [pc, #32]	; (118c <grid_d51_init+0x2c>)
    116c:	47a0      	blx	r4
	
	#ifdef NDEBUG		
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "USER ROW CHECK!");
	grid_d51_verify_user_row();
	#else
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "NO USER ROW CHECK!");
    116e:	4d08      	ldr	r5, [pc, #32]	; (1190 <grid_d51_init+0x30>)
    1170:	4908      	ldr	r1, [pc, #32]	; (1194 <grid_d51_init+0x34>)
    1172:	4628      	mov	r0, r5
    1174:	47a0      	blx	r4
	{
	}
	
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    1176:	4908      	ldr	r1, [pc, #32]	; (1198 <grid_d51_init+0x38>)
    1178:	4628      	mov	r0, r5
    117a:	47a0      	blx	r4
	while (1)
	{
	}
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    117c:	4907      	ldr	r1, [pc, #28]	; (119c <grid_d51_init+0x3c>)
    117e:	4628      	mov	r0, r5
    1180:	47a0      	blx	r4
    1182:	bd38      	pop	{r3, r4, r5, pc}
    1184:	000048dd 	.word	0x000048dd
    1188:	0000e564 	.word	0x0000e564
    118c:	0000d251 	.word	0x0000d251
    1190:	0000e59c 	.word	0x0000e59c
    1194:	0000e588 	.word	0x0000e588
    1198:	0000e5c4 	.word	0x0000e5c4
    119c:	0000e5d4 	.word	0x0000e5d4

000011a0 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    11a0:	b538      	push	{r3, r4, r5, lr}
    11a2:	4604      	mov	r4, r0
    11a4:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    11a6:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    11a8:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    11aa:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    11ac:	2300      	movs	r3, #0
    11ae:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    11b0:	0048      	lsls	r0, r1, #1
    11b2:	4b09      	ldr	r3, [pc, #36]	; (11d8 <grid_ain_channel_init+0x38>)
    11b4:	4798      	blx	r3
    11b6:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    11b8:	b14d      	cbz	r5, 11ce <grid_ain_channel_init+0x2e>
    11ba:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    11bc:	4619      	mov	r1, r3
    11be:	6822      	ldr	r2, [r4, #0]
    11c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    11c4:	3301      	adds	r3, #1
    11c6:	b2db      	uxtb	r3, r3
    11c8:	7922      	ldrb	r2, [r4, #4]
    11ca:	429a      	cmp	r2, r3
    11cc:	d8f7      	bhi.n	11be <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    11ce:	2000      	movs	r0, #0
    11d0:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    11d2:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    11d4:	bd38      	pop	{r3, r4, r5, pc}
    11d6:	bf00      	nop
    11d8:	0000d0c1 	.word	0x0000d0c1

000011dc <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    11dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11e0:	4605      	mov	r5, r0
    11e2:	4689      	mov	r9, r1
    11e4:	4617      	mov	r7, r2
    11e6:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    11e8:	0100      	lsls	r0, r0, #4
    11ea:	4b0c      	ldr	r3, [pc, #48]	; (121c <grid_ain_init+0x40>)
    11ec:	4798      	blx	r3
    11ee:	4b0c      	ldr	r3, [pc, #48]	; (1220 <grid_ain_init+0x44>)
    11f0:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    11f2:	b185      	cbz	r5, 1216 <grid_ain_init+0x3a>
    11f4:	3d01      	subs	r5, #1
    11f6:	b2ed      	uxtb	r5, r5
    11f8:	3501      	adds	r5, #1
    11fa:	012d      	lsls	r5, r5, #4
    11fc:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    11fe:	469a      	mov	sl, r3
    1200:	4e08      	ldr	r6, [pc, #32]	; (1224 <grid_ain_init+0x48>)
    1202:	4643      	mov	r3, r8
    1204:	463a      	mov	r2, r7
    1206:	4649      	mov	r1, r9
    1208:	f8da 0000 	ldr.w	r0, [sl]
    120c:	4420      	add	r0, r4
    120e:	47b0      	blx	r6
    1210:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    1212:	42ac      	cmp	r4, r5
    1214:	d1f5      	bne.n	1202 <grid_ain_init+0x26>
	}

	return 0;
}
    1216:	2000      	movs	r0, #0
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	0000d0c1 	.word	0x0000d0c1
    1220:	200022b4 	.word	0x200022b4
    1224:	000011a1 	.word	0x000011a1

00001228 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    1228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    122c:	0100      	lsls	r0, r0, #4
    122e:	4b3c      	ldr	r3, [pc, #240]	; (1320 <grid_ain_add_sample+0xf8>)
    1230:	f8d3 a000 	ldr.w	sl, [r3]
    1234:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1238:	f89c 6004 	ldrb.w	r6, [ip, #4]
    123c:	2e00      	cmp	r6, #0
    123e:	d05b      	beq.n	12f8 <grid_ain_add_sample+0xd0>
    1240:	f85a 5000 	ldr.w	r5, [sl, r0]
    1244:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1246:	2200      	movs	r2, #0
    1248:	4690      	mov	r8, r2
    124a:	4691      	mov	r9, r2
    124c:	4696      	mov	lr, r2
    124e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1252:	4614      	mov	r4, r2
    1254:	fa5f fb82 	uxtb.w	fp, r2
    1258:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    125c:	441c      	add	r4, r3
		
		if (current > maximum){
    125e:	4573      	cmp	r3, lr
    1260:	bf84      	itt	hi
    1262:	46d8      	movhi	r8, fp
			maximum = current;
    1264:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1266:	42bb      	cmp	r3, r7
    1268:	bf3c      	itt	cc
    126a:	46d9      	movcc	r9, fp
			minimum = current;
    126c:	461f      	movcc	r7, r3
    126e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1270:	b2d3      	uxtb	r3, r2
    1272:	42b3      	cmp	r3, r6
    1274:	d3ee      	bcc.n	1254 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1276:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    127a:	b2b6      	uxth	r6, r6
    127c:	428e      	cmp	r6, r1
    127e:	d23f      	bcs.n	1300 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1280:	f85a 3000 	ldr.w	r3, [sl, r0]
    1284:	440c      	add	r4, r1
    1286:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    128a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    128c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1290:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1294:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1298:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    129c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    12a0:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    12a2:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    12a6:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    12a8:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    12aa:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    12ac:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    12b0:	b29b      	uxth	r3, r3
    12b2:	408b      	lsls	r3, r1
    12b4:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    12b6:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    12ba:	1b92      	subs	r2, r2, r6
    12bc:	2a00      	cmp	r2, #0
    12be:	bfb8      	it	lt
    12c0:	4252      	neglt	r2, r2
    12c2:	2601      	movs	r6, #1
    12c4:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12c8:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    12cc:	42be      	cmp	r6, r7
    12ce:	d020      	beq.n	1312 <grid_ain_add_sample+0xea>
    12d0:	4282      	cmp	r2, r0
    12d2:	dc08      	bgt.n	12e6 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    12d4:	2201      	movs	r2, #1
    12d6:	fa02 f505 	lsl.w	r5, r2, r5
    12da:	fa02 f101 	lsl.w	r1, r2, r1
    12de:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12e0:	428f      	cmp	r7, r1
    12e2:	d000      	beq.n	12e6 <grid_ain_add_sample+0xbe>
    12e4:	b9c7      	cbnz	r7, 1318 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    12e6:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    12ea:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    12ee:	2001      	movs	r0, #1
    12f0:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    12f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    12f8:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    12fa:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    12fc:	2400      	movs	r4, #0
    12fe:	e7ba      	b.n	1276 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    1300:	f85a 3000 	ldr.w	r3, [sl, r0]
    1304:	440c      	add	r4, r1
    1306:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    130a:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    130c:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    1310:	e7be      	b.n	1290 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    1312:	2000      	movs	r0, #0
    1314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1318:	2000      	movs	r0, #0
	}
	
}
    131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    131e:	bf00      	nop
    1320:	200022b4 	.word	0x200022b4

00001324 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    1324:	4b02      	ldr	r3, [pc, #8]	; (1330 <grid_ain_get_changed+0xc>)
    1326:	681b      	ldr	r3, [r3, #0]
    1328:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    132c:	7b00      	ldrb	r0, [r0, #12]
    132e:	4770      	bx	lr
    1330:	200022b4 	.word	0x200022b4

00001334 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    1334:	4b09      	ldr	r3, [pc, #36]	; (135c <grid_ain_get_average+0x28>)
    1336:	681b      	ldr	r3, [r3, #0]
    1338:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    133c:	2300      	movs	r3, #0
    133e:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1340:	1fcb      	subs	r3, r1, #7
    1342:	b2db      	uxtb	r3, r3
    1344:	2b07      	cmp	r3, #7
    1346:	d806      	bhi.n	1356 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1348:	8903      	ldrh	r3, [r0, #8]
    134a:	7940      	ldrb	r0, [r0, #5]
    134c:	1a40      	subs	r0, r0, r1
    134e:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    1352:	b280      	uxth	r0, r0
    1354:	4770      	bx	lr
    1356:	2000      	movs	r0, #0
    1358:	e7fb      	b.n	1352 <grid_ain_get_average+0x1e>
    135a:	bf00      	nop
    135c:	200022b4 	.word	0x200022b4

00001360 <grid_port_reset_receiver>:
#include "grid_buf.h"

// PORTS


void grid_port_reset_receiver(struct grid_port* por){
    1360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1362:	4604      	mov	r4, r0
	
	usart_async_disable(por->usart);
    1364:	6880      	ldr	r0, [r0, #8]
    1366:	4b19      	ldr	r3, [pc, #100]	; (13cc <grid_port_reset_receiver+0x6c>)
    1368:	4798      	blx	r3
	
	por->rx_double_buffer_seek_start_index = 0;
    136a:	2500      	movs	r5, #0
    136c:	62a5      	str	r5, [r4, #40]	; 0x28
	por->rx_double_buffer_read_start_index = 0;
    136e:	62e5      	str	r5, [r4, #44]	; 0x2c
	por->partner_status = 0;
    1370:	f241 0307 	movw	r3, #4103	; 0x1007
    1374:	54e5      	strb	r5, [r4, r3]
	
	struct grid_ui_report* stored_report = por->ping_report;
    1376:	6866      	ldr	r6, [r4, #4]
	grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    1378:	6870      	ldr	r0, [r6, #4]
    137a:	22ff      	movs	r2, #255	; 0xff
    137c:	2102      	movs	r1, #2
    137e:	3008      	adds	r0, #8
    1380:	4f13      	ldr	r7, [pc, #76]	; (13d0 <grid_port_reset_receiver+0x70>)
    1382:	47b8      	blx	r7
	grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    1384:	6870      	ldr	r0, [r6, #4]
    1386:	22ff      	movs	r2, #255	; 0xff
    1388:	2102      	movs	r1, #2
    138a:	3006      	adds	r0, #6
    138c:	47b8      	blx	r7
	grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    138e:	6877      	ldr	r7, [r6, #4]
    1390:	78b6      	ldrb	r6, [r6, #2]
    1392:	4631      	mov	r1, r6
    1394:	4638      	mov	r0, r7
    1396:	4b0f      	ldr	r3, [pc, #60]	; (13d4 <grid_port_reset_receiver+0x74>)
    1398:	4798      	blx	r3
    139a:	4602      	mov	r2, r0
    139c:	4631      	mov	r1, r6
    139e:	4638      	mov	r0, r7
    13a0:	4b0d      	ldr	r3, [pc, #52]	; (13d8 <grid_port_reset_receiver+0x78>)
    13a2:	4798      	blx	r3
	
	
	por->rx_double_buffer_timeout = 0;
    13a4:	6225      	str	r5, [r4, #32]
	grid_sys_port_reset_dma(por);
    13a6:	4620      	mov	r0, r4
    13a8:	4b0c      	ldr	r3, [pc, #48]	; (13dc <grid_port_reset_receiver+0x7c>)
    13aa:	4798      	blx	r3
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[por->rx_double_buffer_seek_start_index] = 0;
    13ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    13ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    13b2:	3b01      	subs	r3, #1
    13b4:	b29b      	uxth	r3, r3
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    13b6:	2b00      	cmp	r3, #0
    13b8:	d1fb      	bne.n	13b2 <grid_port_reset_receiver+0x52>
    13ba:	18a3      	adds	r3, r4, r2
    13bc:	2200      	movs	r2, #0
    13be:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	}
	
	usart_async_enable(por->usart);
    13c2:	68a0      	ldr	r0, [r4, #8]
    13c4:	4b06      	ldr	r3, [pc, #24]	; (13e0 <grid_port_reset_receiver+0x80>)
    13c6:	4798      	blx	r3
    13c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13ca:	bf00      	nop
    13cc:	000068d5 	.word	0x000068d5
    13d0:	000048a5 	.word	0x000048a5
    13d4:	00004b95 	.word	0x00004b95
    13d8:	00004bd1 	.word	0x00004bd1
    13dc:	0000448d 	.word	0x0000448d
    13e0:	000068a9 	.word	0x000068a9

000013e4 <grid_port_receive_task>:
void grid_port_receive_task(struct grid_port* por){
	

	
	// THERE IS ALREADY DATA, PROCESS THAT FIRST
	if	(por->rx_double_buffer_status != 0){
    13e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    13e6:	2b00      	cmp	r3, #0
    13e8:	f040 80b5 	bne.w	1556 <grid_port_receive_task+0x172>
void grid_port_receive_task(struct grid_port* por){
    13ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13f0:	b082      	sub	sp, #8
    13f2:	4604      	mov	r4, r0
		return;
	}
	
	
	
	if (por->rx_double_buffer_timeout > 1000){
    13f4:	6a03      	ldr	r3, [r0, #32]
    13f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    13fa:	d923      	bls.n	1444 <grid_port_receive_task+0x60>
		
		if (por->partner_status == 1){
    13fc:	f241 0307 	movw	r3, #4103	; 0x1007
    1400:	5cc3      	ldrb	r3, [r0, r3]
    1402:	2b01      	cmp	r3, #1
    1404:	d00b      	beq.n	141e <grid_port_receive_task+0x3a>
			
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500);
		}
		else{
			
			if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    1406:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1408:	b90b      	cbnz	r3, 140e <grid_port_receive_task+0x2a>
    140a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    140c:	b1e3      	cbz	r3, 1448 <grid_port_receive_task+0x64>
				// Ready to receive
			}
			else{
				
				GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout & Reset Receiver");
    140e:	4952      	ldr	r1, [pc, #328]	; (1558 <grid_port_receive_task+0x174>)
    1410:	4852      	ldr	r0, [pc, #328]	; (155c <grid_port_receive_task+0x178>)
    1412:	4b53      	ldr	r3, [pc, #332]	; (1560 <grid_port_receive_task+0x17c>)
    1414:	4798      	blx	r3
				grid_port_reset_receiver(por);
    1416:	4620      	mov	r0, r4
    1418:	4b52      	ldr	r3, [pc, #328]	; (1564 <grid_port_receive_task+0x180>)
    141a:	4798      	blx	r3
    141c:	e014      	b.n	1448 <grid_port_receive_task+0x64>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout Disconnect & Reset Receiver");
    141e:	4952      	ldr	r1, [pc, #328]	; (1568 <grid_port_receive_task+0x184>)
    1420:	484e      	ldr	r0, [pc, #312]	; (155c <grid_port_receive_task+0x178>)
    1422:	4b4f      	ldr	r3, [pc, #316]	; (1560 <grid_port_receive_task+0x17c>)
    1424:	4798      	blx	r3
			grid_port_reset_receiver(por);
    1426:	4620      	mov	r0, r4
    1428:	4b4e      	ldr	r3, [pc, #312]	; (1564 <grid_port_receive_task+0x180>)
    142a:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500);
    142c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1430:	9301      	str	r3, [sp, #4]
    1432:	2300      	movs	r3, #0
    1434:	9300      	str	r3, [sp, #0]
    1436:	23ff      	movs	r3, #255	; 0xff
    1438:	461a      	mov	r2, r3
    143a:	4619      	mov	r1, r3
    143c:	484b      	ldr	r0, [pc, #300]	; (156c <grid_port_receive_task+0x188>)
    143e:	4d4c      	ldr	r5, [pc, #304]	; (1570 <grid_port_receive_task+0x18c>)
    1440:	47a8      	blx	r5
    1442:	e001      	b.n	1448 <grid_port_receive_task+0x64>
		}
		
	}
	else{
		
		por->rx_double_buffer_timeout++;
    1444:	3301      	adds	r3, #1
    1446:	6203      	str	r3, [r0, #32]
	}
	

	for(uint16_t i = 0; i<490; i++){
		
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    1448:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    144a:	18e2      	adds	r2, r4, r3
    144c:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    1450:	2a0a      	cmp	r2, #10
    1452:	d010      	beq.n	1476 <grid_port_receive_task+0x92>
			por->rx_double_buffer_status = 1;
			por->rx_double_buffer_timeout = 0;
			
			return;
		}
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    1454:	b19a      	cbz	r2, 147e <grid_port_receive_task+0x9a>
			return;
		}
		
		
		// Buffer overrun error
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    1456:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1458:	1e51      	subs	r1, r2, #1
    145a:	428b      	cmp	r3, r1
    145c:	d012      	beq.n	1484 <grid_port_receive_task+0xa0>
    145e:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
			return;
		}
		
		// Buffer overrun error
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){
    1462:	f240 76cf 	movw	r6, #1999	; 0x7cf
			por->rx_double_buffer_timeout = 0;
			por->rx_double_buffer_seek_start_index++;
		}
		else{
			
			por->rx_double_buffer_timeout = 0;
    1466:	2500      	movs	r5, #0
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){
    1468:	f8df e114 	ldr.w	lr, [pc, #276]	; 1580 <grid_port_receive_task+0x19c>
    146c:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    1470:	f240 7cce 	movw	ip, #1998	; 0x7ce
    1474:	e05e      	b.n	1534 <grid_port_receive_task+0x150>
			por->rx_double_buffer_status = 1;
    1476:	2301      	movs	r3, #1
    1478:	6263      	str	r3, [r4, #36]	; 0x24
			por->rx_double_buffer_timeout = 0;
    147a:	2300      	movs	r3, #0
    147c:	6223      	str	r3, [r4, #32]
		}
		
	}
	
	
}
    147e:	b002      	add	sp, #8
    1480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 1");
    1484:	493b      	ldr	r1, [pc, #236]	; (1574 <grid_port_receive_task+0x190>)
    1486:	4835      	ldr	r0, [pc, #212]	; (155c <grid_port_receive_task+0x178>)
    1488:	4b35      	ldr	r3, [pc, #212]	; (1560 <grid_port_receive_task+0x17c>)
    148a:	4798      	blx	r3
			grid_port_reset_receiver(por);
    148c:	4620      	mov	r0, r4
    148e:	4b35      	ldr	r3, [pc, #212]	; (1564 <grid_port_receive_task+0x180>)
    1490:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    1492:	23c8      	movs	r3, #200	; 0xc8
    1494:	9301      	str	r3, [sp, #4]
    1496:	2302      	movs	r3, #2
    1498:	9300      	str	r3, [sp, #0]
    149a:	2300      	movs	r3, #0
    149c:	461a      	mov	r2, r3
    149e:	21ff      	movs	r1, #255	; 0xff
    14a0:	4832      	ldr	r0, [pc, #200]	; (156c <grid_port_receive_task+0x188>)
    14a2:	4c33      	ldr	r4, [pc, #204]	; (1570 <grid_port_receive_task+0x18c>)
    14a4:	47a0      	blx	r4
			return;
    14a6:	e7ea      	b.n	147e <grid_port_receive_task+0x9a>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){
    14a8:	b16a      	cbz	r2, 14c6 <grid_port_receive_task+0xe2>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){
    14aa:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    14ae:	fbae 1302 	umull	r1, r3, lr, r2
    14b2:	09db      	lsrs	r3, r3, #7
    14b4:	fb07 2213 	mls	r2, r7, r3, r2
    14b8:	4422      	add	r2, r4
    14ba:	f892 3800 	ldrb.w	r3, [r2, #2048]	; 0x800
    14be:	b9a3      	cbnz	r3, 14ea <grid_port_receive_task+0x106>
			por->rx_double_buffer_timeout = 0;
    14c0:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    14c2:	62a5      	str	r5, [r4, #40]	; 0x28
    14c4:	e026      	b.n	1514 <grid_port_receive_task+0x130>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 2");
    14c6:	492c      	ldr	r1, [pc, #176]	; (1578 <grid_port_receive_task+0x194>)
    14c8:	4824      	ldr	r0, [pc, #144]	; (155c <grid_port_receive_task+0x178>)
    14ca:	4b25      	ldr	r3, [pc, #148]	; (1560 <grid_port_receive_task+0x17c>)
    14cc:	4798      	blx	r3
			grid_port_reset_receiver(por);
    14ce:	4620      	mov	r0, r4
    14d0:	4b24      	ldr	r3, [pc, #144]	; (1564 <grid_port_receive_task+0x180>)
    14d2:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    14d4:	23c8      	movs	r3, #200	; 0xc8
    14d6:	9301      	str	r3, [sp, #4]
    14d8:	2302      	movs	r3, #2
    14da:	9300      	str	r3, [sp, #0]
    14dc:	2300      	movs	r3, #0
    14de:	461a      	mov	r2, r3
    14e0:	21ff      	movs	r1, #255	; 0xff
    14e2:	4822      	ldr	r0, [pc, #136]	; (156c <grid_port_receive_task+0x188>)
    14e4:	4c22      	ldr	r4, [pc, #136]	; (1570 <grid_port_receive_task+0x18c>)
    14e6:	47a0      	blx	r4
			return;
    14e8:	e7c9      	b.n	147e <grid_port_receive_task+0x9a>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 3");
    14ea:	4924      	ldr	r1, [pc, #144]	; (157c <grid_port_receive_task+0x198>)
    14ec:	481b      	ldr	r0, [pc, #108]	; (155c <grid_port_receive_task+0x178>)
    14ee:	4b1c      	ldr	r3, [pc, #112]	; (1560 <grid_port_receive_task+0x17c>)
    14f0:	4798      	blx	r3
			grid_port_reset_receiver(por);
    14f2:	4620      	mov	r0, r4
    14f4:	4b1b      	ldr	r3, [pc, #108]	; (1564 <grid_port_receive_task+0x180>)
    14f6:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    14f8:	23c8      	movs	r3, #200	; 0xc8
    14fa:	9301      	str	r3, [sp, #4]
    14fc:	2302      	movs	r3, #2
    14fe:	9300      	str	r3, [sp, #0]
    1500:	2300      	movs	r3, #0
    1502:	461a      	mov	r2, r3
    1504:	21ff      	movs	r1, #255	; 0xff
    1506:	4819      	ldr	r0, [pc, #100]	; (156c <grid_port_receive_task+0x188>)
    1508:	4c19      	ldr	r4, [pc, #100]	; (1570 <grid_port_receive_task+0x18c>)
    150a:	47a0      	blx	r4
			return;
    150c:	e7b7      	b.n	147e <grid_port_receive_task+0x9a>
			por->rx_double_buffer_timeout = 0;
    150e:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index++;
    1510:	3301      	adds	r3, #1
    1512:	62a3      	str	r3, [r4, #40]	; 0x28
    1514:	3801      	subs	r0, #1
    1516:	b280      	uxth	r0, r0
	for(uint16_t i = 0; i<490; i++){
    1518:	2800      	cmp	r0, #0
    151a:	d0b0      	beq.n	147e <grid_port_receive_task+0x9a>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    151c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    151e:	18e2      	adds	r2, r4, r3
    1520:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    1524:	2a0a      	cmp	r2, #10
    1526:	d0a6      	beq.n	1476 <grid_port_receive_task+0x92>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    1528:	2a00      	cmp	r2, #0
    152a:	d0a8      	beq.n	147e <grid_port_receive_task+0x9a>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    152c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    152e:	1e51      	subs	r1, r2, #1
    1530:	428b      	cmp	r3, r1
    1532:	d0a7      	beq.n	1484 <grid_port_receive_task+0xa0>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){
    1534:	42b3      	cmp	r3, r6
    1536:	d0b7      	beq.n	14a8 <grid_port_receive_task+0xc4>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){
    1538:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    153c:	fbae 8102 	umull	r8, r1, lr, r2
    1540:	09c9      	lsrs	r1, r1, #7
    1542:	fb07 2211 	mls	r2, r7, r1, r2
    1546:	4422      	add	r2, r4
    1548:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    154c:	2a00      	cmp	r2, #0
    154e:	d1cc      	bne.n	14ea <grid_port_receive_task+0x106>
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    1550:	4563      	cmp	r3, ip
    1552:	d9dc      	bls.n	150e <grid_port_receive_task+0x12a>
    1554:	e7b4      	b.n	14c0 <grid_port_receive_task+0xdc>
    1556:	4770      	bx	lr
    1558:	0000e690 	.word	0x0000e690
    155c:	0000e59c 	.word	0x0000e59c
    1560:	0000d251 	.word	0x0000d251
    1564:	00001361 	.word	0x00001361
    1568:	0000e66c 	.word	0x0000e66c
    156c:	200032d0 	.word	0x200032d0
    1570:	00004811 	.word	0x00004811
    1574:	0000e6ac 	.word	0x0000e6ac
    1578:	0000e6c8 	.word	0x0000e6c8
    157c:	0000e6e4 	.word	0x0000e6e4
    1580:	10624dd3 	.word	0x10624dd3

00001584 <grid_buffer_init>:





uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1584:	b538      	push	{r3, r4, r5, lr}
    1586:	4604      	mov	r4, r0
    1588:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    158a:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    158c:	2300      	movs	r3, #0
    158e:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    1590:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    1592:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1594:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    1596:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1598:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    159a:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    159c:	4608      	mov	r0, r1
    159e:	4b08      	ldr	r3, [pc, #32]	; (15c0 <grid_buffer_init+0x3c>)
    15a0:	4798      	blx	r3
    15a2:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    15a4:	b900      	cbnz	r0, 15a8 <grid_buffer_init+0x24>
    15a6:	e7fe      	b.n	15a6 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    15a8:	b145      	cbz	r5, 15bc <grid_buffer_init+0x38>
    15aa:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    15ac:	4619      	mov	r1, r3
    15ae:	6862      	ldr	r2, [r4, #4]
    15b0:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    15b2:	3301      	adds	r3, #1
    15b4:	b29b      	uxth	r3, r3
    15b6:	8822      	ldrh	r2, [r4, #0]
    15b8:	429a      	cmp	r2, r3
    15ba:	d8f8      	bhi.n	15ae <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    15bc:	2001      	movs	r0, #1
    15be:	bd38      	pop	{r3, r4, r5, pc}
    15c0:	0000d0c1 	.word	0x0000d0c1

000015c4 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    15c4:	8903      	ldrh	r3, [r0, #8]
    15c6:	8a02      	ldrh	r2, [r0, #16]
    15c8:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    15ca:	bf8f      	iteee	hi
    15cc:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    15ce:	8800      	ldrhls	r0, [r0, #0]
    15d0:	18c0      	addls	r0, r0, r3
    15d2:	1a80      	subls	r0, r0, r2
    15d4:	b280      	uxth	r0, r0

	return space;

	
	
}
    15d6:	4770      	bx	lr

000015d8 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    15d8:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    15da:	8903      	ldrh	r3, [r0, #8]
    15dc:	8a02      	ldrh	r2, [r0, #16]
    15de:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    15e0:	bf9c      	itt	ls
    15e2:	8804      	ldrhls	r4, [r0, #0]
    15e4:	191b      	addls	r3, r3, r4
    15e6:	1a9b      	subs	r3, r3, r2
    15e8:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    15ea:	428b      	cmp	r3, r1
    15ec:	d90a      	bls.n	1604 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    15ee:	440a      	add	r2, r1
    15f0:	8804      	ldrh	r4, [r0, #0]
    15f2:	fb92 f3f4 	sdiv	r3, r2, r4
    15f6:	fb04 2213 	mls	r2, r4, r3, r2
    15fa:	8242      	strh	r2, [r0, #18]
		
		return length;
    15fc:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    15fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    1602:	4770      	bx	lr
		return 0; // failed
    1604:	2000      	movs	r0, #0
    1606:	e7fa      	b.n	15fe <grid_buffer_write_init+0x26>

00001608 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    1608:	8a83      	ldrh	r3, [r0, #20]
    160a:	6842      	ldr	r2, [r0, #4]
    160c:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    160e:	8a83      	ldrh	r3, [r0, #20]
    1610:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    1612:	b29b      	uxth	r3, r3
    1614:	8801      	ldrh	r1, [r0, #0]
    1616:	fbb3 f2f1 	udiv	r2, r3, r1
    161a:	fb01 3312 	mls	r3, r1, r2, r3
    161e:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    1620:	2001      	movs	r0, #1
    1622:	4770      	bx	lr

00001624 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    1624:	8a83      	ldrh	r3, [r0, #20]
    1626:	8a42      	ldrh	r2, [r0, #18]
    1628:	429a      	cmp	r2, r3
    162a:	d000      	beq.n	162e <grid_buffer_write_acknowledge+0xa>
    162c:	e7fe      	b.n	162c <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    162e:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    1630:	2001      	movs	r0, #1
    1632:	4770      	bx	lr

00001634 <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    1634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1638:	b08d      	sub	sp, #52	; 0x34
    163a:	af02      	add	r7, sp, #8
    163c:	4604      	mov	r4, r0
    163e:	4615      	mov	r5, r2
	uint8_t buffer[length];
    1640:	61fa      	str	r2, [r7, #28]
    1642:	1dd3      	adds	r3, r2, #7
    1644:	f023 0307 	bic.w	r3, r3, #7
    1648:	ebad 0d03 	sub.w	sp, sp, r3
    164c:	f10d 0a08 	add.w	sl, sp, #8
	for (uint16_t i = 0; i<length; i++){
    1650:	2a00      	cmp	r2, #0
    1652:	f000 829c 	beq.w	1b8e <grid_port_receive_decode+0x55a>
    1656:	4656      	mov	r6, sl
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    1658:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    165a:	f10a 31ff 	add.w	r1, sl, #4294967295
    165e:	1e6b      	subs	r3, r5, #1
    1660:	b29b      	uxth	r3, r3
    1662:	617b      	str	r3, [r7, #20]
    1664:	eb0a 0903 	add.w	r9, sl, r3
    1668:	1c53      	adds	r3, r2, #1
    166a:	61bb      	str	r3, [r7, #24]
    166c:	eba3 080a 	sub.w	r8, r3, sl
    1670:	f8df c360 	ldr.w	ip, [pc, #864]	; 19d4 <grid_port_receive_decode+0x3a0>
    1674:	f44f 6efa 	mov.w	lr, #2000	; 0x7d0
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    1678:	2000      	movs	r0, #0
    167a:	613a      	str	r2, [r7, #16]
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    167c:	eb08 0b01 	add.w	fp, r8, r1
    1680:	fbac 230b 	umull	r2, r3, ip, fp
    1684:	09db      	lsrs	r3, r3, #7
    1686:	fb0e b313 	mls	r3, lr, r3, fp
    168a:	4423      	add	r3, r4
    168c:	f893 b800 	ldrb.w	fp, [r3, #2048]	; 0x800
    1690:	f801 bf01 	strb.w	fp, [r1, #1]!
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    1694:	f883 0800 	strb.w	r0, [r3, #2048]	; 0x800
	for (uint16_t i = 0; i<length; i++){
    1698:	4549      	cmp	r1, r9
    169a:	d1ef      	bne.n	167c <grid_port_receive_decode+0x48>
    169c:	693a      	ldr	r2, [r7, #16]
    169e:	69bb      	ldr	r3, [r7, #24]
    16a0:	6979      	ldr	r1, [r7, #20]
    16a2:	440b      	add	r3, r1
    16a4:	469c      	mov	ip, r3
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    16a6:	f8df e32c 	ldr.w	lr, [pc, #812]	; 19d4 <grid_port_receive_decode+0x3a0>
    16aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    16ae:	2100      	movs	r1, #0
    16b0:	fbae 8302 	umull	r8, r3, lr, r2
    16b4:	09db      	lsrs	r3, r3, #7
    16b6:	fb00 2313 	mls	r3, r0, r3, r2
    16ba:	4423      	add	r3, r4
    16bc:	f883 1800 	strb.w	r1, [r3, #2048]	; 0x800
    16c0:	3201      	adds	r2, #1
	for (uint16_t i = 0; i<length; i++){
    16c2:	4594      	cmp	ip, r2
    16c4:	d1f4      	bne.n	16b0 <grid_port_receive_decode+0x7c>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    16c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    16c8:	69fb      	ldr	r3, [r7, #28]
    16ca:	4413      	add	r3, r2
    16cc:	461a      	mov	r2, r3
    16ce:	4bc1      	ldr	r3, [pc, #772]	; (19d4 <grid_port_receive_decode+0x3a0>)
    16d0:	fba3 1302 	umull	r1, r3, r3, r2
    16d4:	09db      	lsrs	r3, r3, #7
    16d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    16da:	fb01 2313 	mls	r3, r1, r3, r2
    16de:	62e3      	str	r3, [r4, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    16e0:	62a3      	str	r3, [r4, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    16e2:	2300      	movs	r3, #0
    16e4:	6263      	str	r3, [r4, #36]	; 0x24
	for (uint16_t i = 1; i<length; i++){
    16e6:	2d01      	cmp	r5, #1
    16e8:	f240 825f 	bls.w	1baa <grid_port_receive_decode+0x576>
    16ec:	f04f 0801 	mov.w	r8, #1
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    16f0:	f8df b32c 	ldr.w	fp, [pc, #812]	; 1a20 <grid_port_receive_decode+0x3ec>
    16f4:	f8df 9304 	ldr.w	r9, [pc, #772]	; 19fc <grid_port_receive_decode+0x3c8>
    16f8:	e006      	b.n	1708 <grid_port_receive_decode+0xd4>
	for (uint16_t i = 1; i<length; i++){
    16fa:	f108 0801 	add.w	r8, r8, #1
    16fe:	fa1f f888 	uxth.w	r8, r8
    1702:	4545      	cmp	r5, r8
    1704:	f240 8251 	bls.w	1baa <grid_port_receive_decode+0x576>
		if (buffer[i] == GRID_CONST_SOH){
    1708:	f816 3008 	ldrb.w	r3, [r6, r8]
    170c:	2b01      	cmp	r3, #1
    170e:	d1f4      	bne.n	16fa <grid_port_receive_decode+0xc6>
			length -= i;
    1710:	eba5 0508 	sub.w	r5, r5, r8
    1714:	b2ad      	uxth	r5, r5
			message = &buffer[i];
    1716:	eb06 0a08 	add.w	sl, r6, r8
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    171a:	4659      	mov	r1, fp
    171c:	48ae      	ldr	r0, [pc, #696]	; (19d8 <grid_port_receive_decode+0x3a4>)
    171e:	47c8      	blx	r9
    1720:	e7eb      	b.n	16fa <grid_port_receive_decode+0xc6>
	if (message[0] == GRID_CONST_SOH && message [length-1] == GRID_CONST_LF){
    1722:	61fd      	str	r5, [r7, #28]
    1724:	eb0a 0305 	add.w	r3, sl, r5
    1728:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    172c:	2b0a      	cmp	r3, #10
    172e:	f040 8241 	bne.w	1bb4 <grid_port_receive_decode+0x580>
		checksum_received = grid_msg_checksum_read(message, length);
    1732:	4629      	mov	r1, r5
    1734:	4650      	mov	r0, sl
    1736:	4ba9      	ldr	r3, [pc, #676]	; (19dc <grid_port_receive_decode+0x3a8>)
    1738:	4798      	blx	r3
    173a:	4606      	mov	r6, r0
		checksum_calculated = grid_msg_checksum_calculate(message, length);
    173c:	4629      	mov	r1, r5
    173e:	4650      	mov	r0, sl
    1740:	4ba7      	ldr	r3, [pc, #668]	; (19e0 <grid_port_receive_decode+0x3ac>)
    1742:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    1744:	4286      	cmp	r6, r0
    1746:	f040 8214 	bne.w	1b72 <grid_port_receive_decode+0x53e>
			if (message[1] == GRID_CONST_BRC){ // Broadcast message
    174a:	f89a 3001 	ldrb.w	r3, [sl, #1]
    174e:	2b0f      	cmp	r3, #15
    1750:	f000 8087 	beq.w	1862 <grid_port_receive_decode+0x22e>
			else if (message[1] == GRID_CONST_DCT){ // Direct Message
    1754:	2b0e      	cmp	r3, #14
    1756:	f040 81fe 	bne.w	1b56 <grid_port_receive_decode+0x522>
				if (message[2] == GRID_CONST_ACK){
    175a:	f89a 3002 	ldrb.w	r3, [sl, #2]
    175e:	2b07      	cmp	r3, #7
    1760:	f040 822b 	bne.w	1bba <grid_port_receive_decode+0x586>
					struct grid_ui_report* stored_report = por->ping_report;
    1764:	6865      	ldr	r5, [r4, #4]
					local_stored = grid_sys_read_hex_string_value(&stored_report->payload[6], 2, error_flag);
    1766:	6868      	ldr	r0, [r5, #4]
    1768:	2200      	movs	r2, #0
    176a:	2102      	movs	r1, #2
    176c:	3006      	adds	r0, #6
    176e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 19ec <grid_port_receive_decode+0x3b8>
    1772:	47c8      	blx	r9
    1774:	b2c6      	uxtb	r6, r0
					remote_stored = grid_sys_read_hex_string_value(&stored_report->payload[8], 2, error_flag);
    1776:	6868      	ldr	r0, [r5, #4]
    1778:	2200      	movs	r2, #0
    177a:	2102      	movs	r1, #2
    177c:	3008      	adds	r0, #8
    177e:	47c8      	blx	r9
    1780:	fa5f fb80 	uxtb.w	fp, r0
					local_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    1784:	2200      	movs	r2, #0
    1786:	2102      	movs	r1, #2
    1788:	f10a 0008 	add.w	r0, sl, #8
    178c:	47c8      	blx	r9
    178e:	fa5f f880 	uxtb.w	r8, r0
					remote_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    1792:	2200      	movs	r2, #0
    1794:	2102      	movs	r1, #2
    1796:	f10a 0006 	add.w	r0, sl, #6
    179a:	47c8      	blx	r9
    179c:	61b8      	str	r0, [r7, #24]
    179e:	fa5f f980 	uxtb.w	r9, r0
					if (por->partner_status == 0){
    17a2:	f241 0307 	movw	r3, #4103	; 0x1007
    17a6:	5ce3      	ldrb	r3, [r4, r3]
    17a8:	2b00      	cmp	r3, #0
    17aa:	f040 8185 	bne.w	1ab8 <grid_port_receive_decode+0x484>
						if (por->direction == GRID_CONST_NORTH){
    17ae:	7b63      	ldrb	r3, [r4, #13]
    17b0:	2b11      	cmp	r3, #17
    17b2:	f000 8154 	beq.w	1a5e <grid_port_receive_decode+0x42a>
							}else if (por->direction == GRID_CONST_EAST){
    17b6:	2b12      	cmp	r3, #18
    17b8:	f000 8156 	beq.w	1a68 <grid_port_receive_decode+0x434>
							}else if (por->direction == GRID_CONST_SOUTH){
    17bc:	2b13      	cmp	r3, #19
    17be:	f000 8158 	beq.w	1a72 <grid_port_receive_decode+0x43e>
							}else if (por->direction == GRID_CONST_WEST){
    17c2:	2b14      	cmp	r3, #20
    17c4:	f000 815a 	beq.w	1a7c <grid_port_receive_decode+0x448>
						if (local_stored == 255){ // I have no clue
    17c8:	2eff      	cmp	r6, #255	; 0xff
    17ca:	f000 815c 	beq.w	1a86 <grid_port_receive_decode+0x452>
						if (remote_received != remote_stored){
    17ce:	45cb      	cmp	fp, r9
    17d0:	d011      	beq.n	17f6 <grid_port_receive_decode+0x1c2>
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, remote_received);
    17d2:	6868      	ldr	r0, [r5, #4]
    17d4:	7e3a      	ldrb	r2, [r7, #24]
    17d6:	2102      	movs	r1, #2
    17d8:	3008      	adds	r0, #8
    17da:	4b82      	ldr	r3, [pc, #520]	; (19e4 <grid_port_receive_decode+0x3b0>)
    17dc:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    17de:	f8d5 9004 	ldr.w	r9, [r5, #4]
    17e2:	78ad      	ldrb	r5, [r5, #2]
    17e4:	4629      	mov	r1, r5
    17e6:	4648      	mov	r0, r9
    17e8:	4b7d      	ldr	r3, [pc, #500]	; (19e0 <grid_port_receive_decode+0x3ac>)
    17ea:	4798      	blx	r3
    17ec:	4602      	mov	r2, r0
    17ee:	4629      	mov	r1, r5
    17f0:	4648      	mov	r0, r9
    17f2:	4b7d      	ldr	r3, [pc, #500]	; (19e8 <grid_port_receive_decode+0x3b4>)
    17f4:	4798      	blx	r3
						if (local_stored != local_received){
    17f6:	4546      	cmp	r6, r8
    17f8:	f040 81df 	bne.w	1bba <grid_port_receive_decode+0x586>
							por->partner_fi = (message[3] - por->direction + 6)%4;
    17fc:	f89a 3003 	ldrb.w	r3, [sl, #3]
    1800:	7b62      	ldrb	r2, [r4, #13]
    1802:	1a9b      	subs	r3, r3, r2
    1804:	3306      	adds	r3, #6
    1806:	425a      	negs	r2, r3
    1808:	f003 0303 	and.w	r3, r3, #3
    180c:	f002 0203 	and.w	r2, r2, #3
    1810:	bf58      	it	pl
    1812:	4253      	negpl	r3, r2
    1814:	f241 0204 	movw	r2, #4100	; 0x1004
    1818:	54a3      	strb	r3, [r4, r2]
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    181a:	69fb      	ldr	r3, [r7, #28]
    181c:	f1a3 000a 	sub.w	r0, r3, #10
    1820:	2200      	movs	r2, #0
    1822:	2102      	movs	r1, #2
    1824:	4450      	add	r0, sl
    1826:	4b71      	ldr	r3, [pc, #452]	; (19ec <grid_port_receive_decode+0x3b8>)
    1828:	4798      	blx	r3
    182a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    182e:	6018      	str	r0, [r3, #0]
							por->partner_status = 1;
    1830:	2201      	movs	r2, #1
    1832:	f241 0307 	movw	r3, #4103	; 0x1007
    1836:	54e2      	strb	r2, [r4, r3]
							grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    1838:	4c6d      	ldr	r4, [pc, #436]	; (19f0 <grid_port_receive_decode+0x3bc>)
    183a:	4620      	mov	r0, r4
    183c:	4b6d      	ldr	r3, [pc, #436]	; (19f4 <grid_port_receive_decode+0x3c0>)
    183e:	4798      	blx	r3
    1840:	b2c0      	uxtb	r0, r0
    1842:	7020      	strb	r0, [r4, #0]
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    1844:	496c      	ldr	r1, [pc, #432]	; (19f8 <grid_port_receive_decode+0x3c4>)
    1846:	4864      	ldr	r0, [pc, #400]	; (19d8 <grid_port_receive_decode+0x3a4>)
    1848:	4b6c      	ldr	r3, [pc, #432]	; (19fc <grid_port_receive_decode+0x3c8>)
    184a:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN
    184c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1850:	9301      	str	r3, [sp, #4]
    1852:	2100      	movs	r1, #0
    1854:	9100      	str	r1, [sp, #0]
    1856:	460b      	mov	r3, r1
    1858:	22ff      	movs	r2, #255	; 0xff
    185a:	4620      	mov	r0, r4
    185c:	4c68      	ldr	r4, [pc, #416]	; (1a00 <grid_port_receive_decode+0x3cc>)
    185e:	47a0      	blx	r4
    1860:	e1ab      	b.n	1bba <grid_port_receive_decode+0x586>
				uint8_t error=0;
    1862:	f107 0328 	add.w	r3, r7, #40	; 0x28
    1866:	461a      	mov	r2, r3
    1868:	2300      	movs	r3, #0
    186a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    186e:	4613      	mov	r3, r2
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    1870:	4690      	mov	r8, r2
    1872:	2202      	movs	r2, #2
    1874:	2104      	movs	r1, #4
    1876:	4650      	mov	r0, sl
    1878:	4e62      	ldr	r6, [pc, #392]	; (1a04 <grid_port_receive_decode+0x3d0>)
    187a:	47b0      	blx	r6
    187c:	6178      	str	r0, [r7, #20]
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    187e:	4643      	mov	r3, r8
    1880:	2202      	movs	r2, #2
    1882:	210a      	movs	r1, #10
    1884:	4650      	mov	r0, sl
    1886:	47b0      	blx	r6
    1888:	6138      	str	r0, [r7, #16]
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    188a:	4643      	mov	r3, r8
    188c:	2202      	movs	r2, #2
    188e:	2106      	movs	r1, #6
    1890:	4650      	mov	r0, sl
    1892:	47b0      	blx	r6
    1894:	fa5f f980 	uxtb.w	r9, r0
    1898:	f1a9 037f 	sub.w	r3, r9, #127	; 0x7f
    189c:	b2db      	uxtb	r3, r3
    189e:	60fb      	str	r3, [r7, #12]
    18a0:	fa4f fb83 	sxtb.w	fp, r3
				int8_t received_dy  = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;
    18a4:	f8c7 8004 	str.w	r8, [r7, #4]
    18a8:	4643      	mov	r3, r8
    18aa:	2202      	movs	r2, #2
    18ac:	2108      	movs	r1, #8
    18ae:	4650      	mov	r0, sl
    18b0:	47b0      	blx	r6
    18b2:	fa5f f880 	uxtb.w	r8, r0
    18b6:	f1a8 037f 	sub.w	r3, r8, #127	; 0x7f
    18ba:	b2da      	uxtb	r2, r3
    18bc:	60ba      	str	r2, [r7, #8]
    18be:	b252      	sxtb	r2, r2
    18c0:	61ba      	str	r2, [r7, #24]
				uint8_t received_rot = grid_msg_get_parameter(message, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, &error);
    18c2:	687b      	ldr	r3, [r7, #4]
    18c4:	2202      	movs	r2, #2
    18c6:	210c      	movs	r1, #12
    18c8:	4650      	mov	r0, sl
    18ca:	47b0      	blx	r6
				uint8_t updated_rot = (received_rot + por->partner_fi)%4;
    18cc:	f241 0304 	movw	r3, #4100	; 0x1004
    18d0:	5ce3      	ldrb	r3, [r4, r3]
    18d2:	4418      	add	r0, r3
    18d4:	f000 0203 	and.w	r2, r0, #3
    18d8:	607a      	str	r2, [r7, #4]
				if (por->partner_fi == 0){ // 0 deg
    18da:	b143      	cbz	r3, 18ee <grid_port_receive_decode+0x2ba>
				else if(por->partner_fi == 1){ // 90 deg
    18dc:	2b01      	cmp	r3, #1
    18de:	f040 80a1 	bne.w	1a24 <grid_port_receive_decode+0x3f0>
					rotated_dx  -= received_dy;
    18e2:	f1c8 087f 	rsb	r8, r8, #127	; 0x7f
					rotated_dy  += received_dx;
    18e6:	f8c7 b018 	str.w	fp, [r7, #24]
					rotated_dx  -= received_dy;
    18ea:	fa4f fb88 	sxtb.w	fp, r8
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    18ee:	f241 0305 	movw	r3, #4101	; 0x1005
    18f2:	f814 8003 	ldrb.w	r8, [r4, r3]
    18f6:	f108 087f 	add.w	r8, r8, #127	; 0x7f
    18fa:	44d8      	add	r8, fp
    18fc:	fa5f f888 	uxtb.w	r8, r8
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    1900:	f241 0306 	movw	r3, #4102	; 0x1006
    1904:	5ce3      	ldrb	r3, [r4, r3]
    1906:	337f      	adds	r3, #127	; 0x7f
    1908:	69ba      	ldr	r2, [r7, #24]
    190a:	441a      	add	r2, r3
    190c:	fa5f fb82 	uxtb.w	fp, r2
				if (received_dx + GRID_SYS_DEFAULT_POSITION == 0 && received_dy + GRID_SYS_DEFAULT_POSITION == 0)
    1910:	68fb      	ldr	r3, [r7, #12]
    1912:	2b81      	cmp	r3, #129	; 0x81
    1914:	f000 809e 	beq.w	1a54 <grid_port_receive_decode+0x420>
					grid_msg_set_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, updated_id, &error);
    1918:	f107 0927 	add.w	r9, r7, #39	; 0x27
    191c:	f8cd 9000 	str.w	r9, [sp]
    1920:	7d3b      	ldrb	r3, [r7, #20]
    1922:	2202      	movs	r2, #2
    1924:	2104      	movs	r1, #4
    1926:	4650      	mov	r0, sl
    1928:	4e37      	ldr	r6, [pc, #220]	; (1a08 <grid_port_receive_decode+0x3d4>)
    192a:	47b0      	blx	r6
					grid_msg_set_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, updated_dx, &error);
    192c:	f8cd 9000 	str.w	r9, [sp]
    1930:	4643      	mov	r3, r8
    1932:	2202      	movs	r2, #2
    1934:	2106      	movs	r1, #6
    1936:	4650      	mov	r0, sl
    1938:	47b0      	blx	r6
					grid_msg_set_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, updated_dy, &error);
    193a:	f8cd 9000 	str.w	r9, [sp]
    193e:	465b      	mov	r3, fp
    1940:	2202      	movs	r2, #2
    1942:	2108      	movs	r1, #8
    1944:	4650      	mov	r0, sl
    1946:	47b0      	blx	r6
					grid_msg_set_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, updated_age, &error);
    1948:	f8cd 9000 	str.w	r9, [sp]
    194c:	7c3b      	ldrb	r3, [r7, #16]
    194e:	2202      	movs	r2, #2
    1950:	210a      	movs	r1, #10
    1952:	4650      	mov	r0, sl
    1954:	47b0      	blx	r6
					grid_msg_set_parameter(message, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, updated_rot, &error);
    1956:	f8cd 9000 	str.w	r9, [sp]
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	2202      	movs	r2, #2
    195e:	210c      	movs	r1, #12
    1960:	4650      	mov	r0, sl
    1962:	47b0      	blx	r6
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    1964:	7d3e      	ldrb	r6, [r7, #20]
    1966:	eb08 2606 	add.w	r6, r8, r6, lsl #8
    196a:	eb0b 2306 	add.w	r3, fp, r6, lsl #8
    196e:	7c3e      	ldrb	r6, [r7, #16]
    1970:	eb06 2603 	add.w	r6, r6, r3, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    1974:	4631      	mov	r1, r6
    1976:	481e      	ldr	r0, [pc, #120]	; (19f0 <grid_port_receive_decode+0x3bc>)
    1978:	4b24      	ldr	r3, [pc, #144]	; (1a0c <grid_port_receive_decode+0x3d8>)
    197a:	4798      	blx	r3
    197c:	2800      	cmp	r0, #0
    197e:	f040 811c 	bne.w	1bba <grid_port_receive_decode+0x586>
					grid_msg_checksum_write(message, length, grid_msg_checksum_calculate(message, length));
    1982:	f8d7 801c 	ldr.w	r8, [r7, #28]
    1986:	4641      	mov	r1, r8
    1988:	4650      	mov	r0, sl
    198a:	4b15      	ldr	r3, [pc, #84]	; (19e0 <grid_port_receive_decode+0x3ac>)
    198c:	4798      	blx	r3
    198e:	4602      	mov	r2, r0
    1990:	4641      	mov	r1, r8
    1992:	4650      	mov	r0, sl
    1994:	4b14      	ldr	r3, [pc, #80]	; (19e8 <grid_port_receive_decode+0x3b4>)
    1996:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    1998:	f604 74e8 	addw	r4, r4, #4072	; 0xfe8
    199c:	4629      	mov	r1, r5
    199e:	4620      	mov	r0, r4
    19a0:	4b1b      	ldr	r3, [pc, #108]	; (1a10 <grid_port_receive_decode+0x3dc>)
    19a2:	4798      	blx	r3
    19a4:	2800      	cmp	r0, #0
    19a6:	f000 8108 	beq.w	1bba <grid_port_receive_decode+0x586>
						for (uint16_t i=0; i<length; i++){
    19aa:	b15d      	cbz	r5, 19c4 <grid_port_receive_decode+0x390>
    19ac:	f10a 38ff 	add.w	r8, sl, #4294967295
    19b0:	3d01      	subs	r5, #1
    19b2:	fa1a fa85 	uxtah	sl, sl, r5
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    19b6:	4d17      	ldr	r5, [pc, #92]	; (1a14 <grid_port_receive_decode+0x3e0>)
    19b8:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    19bc:	4620      	mov	r0, r4
    19be:	47a8      	blx	r5
						for (uint16_t i=0; i<length; i++){
    19c0:	45c2      	cmp	sl, r8
    19c2:	d1f9      	bne.n	19b8 <grid_port_receive_decode+0x384>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    19c4:	4620      	mov	r0, r4
    19c6:	4b14      	ldr	r3, [pc, #80]	; (1a18 <grid_port_receive_decode+0x3e4>)
    19c8:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    19ca:	4631      	mov	r1, r6
    19cc:	4808      	ldr	r0, [pc, #32]	; (19f0 <grid_port_receive_decode+0x3bc>)
    19ce:	4b13      	ldr	r3, [pc, #76]	; (1a1c <grid_port_receive_decode+0x3e8>)
    19d0:	4798      	blx	r3
    19d2:	e0f2      	b.n	1bba <grid_port_receive_decode+0x586>
    19d4:	10624dd3 	.word	0x10624dd3
    19d8:	0000e59c 	.word	0x0000e59c
    19dc:	00004bb1 	.word	0x00004bb1
    19e0:	00004b95 	.word	0x00004b95
    19e4:	000048a5 	.word	0x000048a5
    19e8:	00004bd1 	.word	0x00004bd1
    19ec:	00004865 	.word	0x00004865
    19f0:	200032d0 	.word	0x200032d0
    19f4:	000047ad 	.word	0x000047ad
    19f8:	0000e714 	.word	0x0000e714
    19fc:	0000d251 	.word	0x0000d251
    1a00:	00004811 	.word	0x00004811
    1a04:	00004be5 	.word	0x00004be5
    1a08:	00004bf9 	.word	0x00004bf9
    1a0c:	00004c0d 	.word	0x00004c0d
    1a10:	000015d9 	.word	0x000015d9
    1a14:	00001609 	.word	0x00001609
    1a18:	00001625 	.word	0x00001625
    1a1c:	00004c37 	.word	0x00004c37
    1a20:	0000e700 	.word	0x0000e700
				else if(por->partner_fi == 2){ // 180 deg
    1a24:	2b02      	cmp	r3, #2
    1a26:	d108      	bne.n	1a3a <grid_port_receive_decode+0x406>
					rotated_dx  -= received_dx;
    1a28:	f1c9 0b7f 	rsb	fp, r9, #127	; 0x7f
    1a2c:	fa4f fb8b 	sxtb.w	fp, fp
					rotated_dy  -= received_dy;
    1a30:	f1c8 067f 	rsb	r6, r8, #127	; 0x7f
    1a34:	b273      	sxtb	r3, r6
    1a36:	61bb      	str	r3, [r7, #24]
    1a38:	e759      	b.n	18ee <grid_port_receive_decode+0x2ba>
				else if(por->partner_fi == 3){ // 270 deg
    1a3a:	2b03      	cmp	r3, #3
    1a3c:	d003      	beq.n	1a46 <grid_port_receive_decode+0x412>
				int8_t rotated_dy = 0;
    1a3e:	2300      	movs	r3, #0
    1a40:	61bb      	str	r3, [r7, #24]
				int8_t rotated_dx = 0;
    1a42:	469b      	mov	fp, r3
    1a44:	e753      	b.n	18ee <grid_port_receive_decode+0x2ba>
					rotated_dy  -= received_dx;
    1a46:	f1c9 037f 	rsb	r3, r9, #127	; 0x7f
					rotated_dx  += received_dy;
    1a4a:	f8d7 b018 	ldr.w	fp, [r7, #24]
					rotated_dy  -= received_dx;
    1a4e:	b25b      	sxtb	r3, r3
    1a50:	61bb      	str	r3, [r7, #24]
    1a52:	e74c      	b.n	18ee <grid_port_receive_decode+0x2ba>
				if (received_dx + GRID_SYS_DEFAULT_POSITION == 0 && received_dy + GRID_SYS_DEFAULT_POSITION == 0)
    1a54:	68bb      	ldr	r3, [r7, #8]
    1a56:	2b81      	cmp	r3, #129	; 0x81
    1a58:	f47f af5e 	bne.w	1918 <grid_port_receive_decode+0x2e4>
    1a5c:	e782      	b.n	1964 <grid_port_receive_decode+0x330>
							grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_PING_NORTH);
    1a5e:	2100      	movs	r1, #0
    1a60:	4858      	ldr	r0, [pc, #352]	; (1bc4 <grid_port_receive_decode+0x590>)
    1a62:	4b59      	ldr	r3, [pc, #356]	; (1bc8 <grid_port_receive_decode+0x594>)
    1a64:	4798      	blx	r3
    1a66:	e6af      	b.n	17c8 <grid_port_receive_decode+0x194>
							grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_PING_EAST);
    1a68:	2101      	movs	r1, #1
    1a6a:	4856      	ldr	r0, [pc, #344]	; (1bc4 <grid_port_receive_decode+0x590>)
    1a6c:	4b56      	ldr	r3, [pc, #344]	; (1bc8 <grid_port_receive_decode+0x594>)
    1a6e:	4798      	blx	r3
    1a70:	e6aa      	b.n	17c8 <grid_port_receive_decode+0x194>
							grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_PING_SOUTH);
    1a72:	2102      	movs	r1, #2
    1a74:	4853      	ldr	r0, [pc, #332]	; (1bc4 <grid_port_receive_decode+0x590>)
    1a76:	4b54      	ldr	r3, [pc, #336]	; (1bc8 <grid_port_receive_decode+0x594>)
    1a78:	4798      	blx	r3
    1a7a:	e6a5      	b.n	17c8 <grid_port_receive_decode+0x194>
							grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_PING_WEST);
    1a7c:	2103      	movs	r1, #3
    1a7e:	4851      	ldr	r0, [pc, #324]	; (1bc4 <grid_port_receive_decode+0x590>)
    1a80:	4b51      	ldr	r3, [pc, #324]	; (1bc8 <grid_port_receive_decode+0x594>)
    1a82:	4798      	blx	r3
    1a84:	e6a0      	b.n	17c8 <grid_port_receive_decode+0x194>
							uint8_t new_local = grid_sys_rtc_get_time(&grid_sys_state)%128;
    1a86:	4851      	ldr	r0, [pc, #324]	; (1bcc <grid_port_receive_decode+0x598>)
    1a88:	4b51      	ldr	r3, [pc, #324]	; (1bd0 <grid_port_receive_decode+0x59c>)
    1a8a:	4798      	blx	r3
    1a8c:	f000 067f 	and.w	r6, r0, #127	; 0x7f
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, new_local);
    1a90:	6868      	ldr	r0, [r5, #4]
    1a92:	4632      	mov	r2, r6
    1a94:	2102      	movs	r1, #2
    1a96:	3006      	adds	r0, #6
    1a98:	4b4e      	ldr	r3, [pc, #312]	; (1bd4 <grid_port_receive_decode+0x5a0>)
    1a9a:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    1a9c:	686b      	ldr	r3, [r5, #4]
    1a9e:	78aa      	ldrb	r2, [r5, #2]
    1aa0:	613a      	str	r2, [r7, #16]
    1aa2:	4611      	mov	r1, r2
    1aa4:	617b      	str	r3, [r7, #20]
    1aa6:	4618      	mov	r0, r3
    1aa8:	4b4b      	ldr	r3, [pc, #300]	; (1bd8 <grid_port_receive_decode+0x5a4>)
    1aaa:	4798      	blx	r3
    1aac:	4602      	mov	r2, r0
    1aae:	6939      	ldr	r1, [r7, #16]
    1ab0:	6978      	ldr	r0, [r7, #20]
    1ab2:	4b4a      	ldr	r3, [pc, #296]	; (1bdc <grid_port_receive_decode+0x5a8>)
    1ab4:	4798      	blx	r3
    1ab6:	e68a      	b.n	17ce <grid_port_receive_decode+0x19a>
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    1ab8:	f89a 3003 	ldrb.w	r3, [sl, #3]
    1abc:	7b62      	ldrb	r2, [r4, #13]
    1abe:	1a9b      	subs	r3, r3, r2
    1ac0:	3306      	adds	r3, #6
    1ac2:	425a      	negs	r2, r3
    1ac4:	f003 0303 	and.w	r3, r3, #3
    1ac8:	f002 0203 	and.w	r2, r2, #3
    1acc:	bf58      	it	pl
    1ace:	4253      	negpl	r3, r2
    1ad0:	f241 0204 	movw	r2, #4100	; 0x1004
    1ad4:	5ca2      	ldrb	r2, [r4, r2]
    1ad6:	4546      	cmp	r6, r8
    1ad8:	bf08      	it	eq
    1ada:	45cb      	cmpeq	fp, r9
    1adc:	bf0c      	ite	eq
    1ade:	2601      	moveq	r6, #1
    1ae0:	2600      	movne	r6, #0
    1ae2:	4293      	cmp	r3, r2
    1ae4:	bf14      	ite	ne
    1ae6:	2600      	movne	r6, #0
    1ae8:	f006 0601 	andeq.w	r6, r6, #1
						validator &= por->partner_hwcfg == grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    1aec:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    1af0:	f8d3 8000 	ldr.w	r8, [r3]
    1af4:	69fb      	ldr	r3, [r7, #28]
    1af6:	f1a3 000a 	sub.w	r0, r3, #10
    1afa:	2200      	movs	r2, #0
    1afc:	2102      	movs	r1, #2
    1afe:	4450      	add	r0, sl
    1b00:	4b37      	ldr	r3, [pc, #220]	; (1be0 <grid_port_receive_decode+0x5ac>)
    1b02:	4798      	blx	r3
						if (validator == 1){
    1b04:	4540      	cmp	r0, r8
    1b06:	d101      	bne.n	1b0c <grid_port_receive_decode+0x4d8>
    1b08:	2e00      	cmp	r6, #0
    1b0a:	d156      	bne.n	1bba <grid_port_receive_decode+0x586>
							por->partner_status = 0;
    1b0c:	2600      	movs	r6, #0
    1b0e:	f241 0307 	movw	r3, #4103	; 0x1007
    1b12:	54e6      	strb	r6, [r4, r3]
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    1b14:	6868      	ldr	r0, [r5, #4]
    1b16:	22ff      	movs	r2, #255	; 0xff
    1b18:	2102      	movs	r1, #2
    1b1a:	3008      	adds	r0, #8
    1b1c:	4c2d      	ldr	r4, [pc, #180]	; (1bd4 <grid_port_receive_decode+0x5a0>)
    1b1e:	47a0      	blx	r4
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    1b20:	6868      	ldr	r0, [r5, #4]
    1b22:	22ff      	movs	r2, #255	; 0xff
    1b24:	2102      	movs	r1, #2
    1b26:	3006      	adds	r0, #6
    1b28:	47a0      	blx	r4
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    1b2a:	686c      	ldr	r4, [r5, #4]
    1b2c:	78ad      	ldrb	r5, [r5, #2]
    1b2e:	4629      	mov	r1, r5
    1b30:	4620      	mov	r0, r4
    1b32:	4b29      	ldr	r3, [pc, #164]	; (1bd8 <grid_port_receive_decode+0x5a4>)
    1b34:	4798      	blx	r3
    1b36:	4602      	mov	r2, r0
    1b38:	4629      	mov	r1, r5
    1b3a:	4620      	mov	r0, r4
    1b3c:	4b27      	ldr	r3, [pc, #156]	; (1bdc <grid_port_receive_decode+0x5a8>)
    1b3e:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 255, 2, 200); // Purple
    1b40:	23c8      	movs	r3, #200	; 0xc8
    1b42:	9301      	str	r3, [sp, #4]
    1b44:	2302      	movs	r3, #2
    1b46:	9300      	str	r3, [sp, #0]
    1b48:	23ff      	movs	r3, #255	; 0xff
    1b4a:	4632      	mov	r2, r6
    1b4c:	4619      	mov	r1, r3
    1b4e:	481f      	ldr	r0, [pc, #124]	; (1bcc <grid_port_receive_decode+0x598>)
    1b50:	4c24      	ldr	r4, [pc, #144]	; (1be4 <grid_port_receive_decode+0x5b0>)
    1b52:	47a0      	blx	r4
    1b54:	e031      	b.n	1bba <grid_port_receive_decode+0x586>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    1b56:	23c8      	movs	r3, #200	; 0xc8
    1b58:	9301      	str	r3, [sp, #4]
    1b5a:	2302      	movs	r3, #2
    1b5c:	9300      	str	r3, [sp, #0]
    1b5e:	2300      	movs	r3, #0
    1b60:	461a      	mov	r2, r3
    1b62:	21ff      	movs	r1, #255	; 0xff
    1b64:	4819      	ldr	r0, [pc, #100]	; (1bcc <grid_port_receive_decode+0x598>)
    1b66:	4c1f      	ldr	r4, [pc, #124]	; (1be4 <grid_port_receive_decode+0x5b0>)
    1b68:	47a0      	blx	r4
				printf("{\"type\": \"WARNING\", \"data\": [\"Unknow Message Type\"]}\r\n");
    1b6a:	481f      	ldr	r0, [pc, #124]	; (1be8 <grid_port_receive_decode+0x5b4>)
    1b6c:	4b1f      	ldr	r3, [pc, #124]	; (1bec <grid_port_receive_decode+0x5b8>)
    1b6e:	4798      	blx	r3
    1b70:	e023      	b.n	1bba <grid_port_receive_decode+0x586>
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    1b72:	481f      	ldr	r0, [pc, #124]	; (1bf0 <grid_port_receive_decode+0x5bc>)
    1b74:	4b1d      	ldr	r3, [pc, #116]	; (1bec <grid_port_receive_decode+0x5b8>)
    1b76:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // BLUE BLINKY
    1b78:	23c8      	movs	r3, #200	; 0xc8
    1b7a:	9301      	str	r3, [sp, #4]
    1b7c:	2301      	movs	r3, #1
    1b7e:	9300      	str	r3, [sp, #0]
    1b80:	23ff      	movs	r3, #255	; 0xff
    1b82:	2200      	movs	r2, #0
    1b84:	2114      	movs	r1, #20
    1b86:	4811      	ldr	r0, [pc, #68]	; (1bcc <grid_port_receive_decode+0x598>)
    1b88:	4c16      	ldr	r4, [pc, #88]	; (1be4 <grid_port_receive_decode+0x5b0>)
    1b8a:	47a0      	blx	r4
    1b8c:	e015      	b.n	1bba <grid_port_receive_decode+0x586>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    1b8e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1b90:	442a      	add	r2, r5
    1b92:	4b18      	ldr	r3, [pc, #96]	; (1bf4 <grid_port_receive_decode+0x5c0>)
    1b94:	fba3 1302 	umull	r1, r3, r3, r2
    1b98:	09db      	lsrs	r3, r3, #7
    1b9a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    1b9e:	fb01 2313 	mls	r3, r1, r3, r2
    1ba2:	62c3      	str	r3, [r0, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    1ba4:	6283      	str	r3, [r0, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    1ba6:	2300      	movs	r3, #0
    1ba8:	6243      	str	r3, [r0, #36]	; 0x24
	if (message[0] == GRID_CONST_SOH && message [length-1] == GRID_CONST_LF){
    1baa:	f89a 3000 	ldrb.w	r3, [sl]
    1bae:	2b01      	cmp	r3, #1
    1bb0:	f43f adb7 	beq.w	1722 <grid_port_receive_decode+0xee>
		printf("{\"type\": \"ERROR\", \"data\": [\"Frame Error\"]}\r\n");
    1bb4:	4810      	ldr	r0, [pc, #64]	; (1bf8 <grid_port_receive_decode+0x5c4>)
    1bb6:	4b0d      	ldr	r3, [pc, #52]	; (1bec <grid_port_receive_decode+0x5b8>)
    1bb8:	4798      	blx	r3
}
    1bba:	372c      	adds	r7, #44	; 0x2c
    1bbc:	46bd      	mov	sp, r7
    1bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bc2:	bf00      	nop
    1bc4:	200078c4 	.word	0x200078c4
    1bc8:	0000520f 	.word	0x0000520f
    1bcc:	200032d0 	.word	0x200032d0
    1bd0:	000047ad 	.word	0x000047ad
    1bd4:	000048a5 	.word	0x000048a5
    1bd8:	00004b95 	.word	0x00004b95
    1bdc:	00004bd1 	.word	0x00004bd1
    1be0:	00004865 	.word	0x00004865
    1be4:	00004811 	.word	0x00004811
    1be8:	0000e71c 	.word	0x0000e71c
    1bec:	0000d339 	.word	0x0000d339
    1bf0:	0000e754 	.word	0x0000e754
    1bf4:	10624dd3 	.word	0x10624dd3
    1bf8:	0000e788 	.word	0x0000e788

00001bfc <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    1bfc:	b530      	push	{r4, r5, lr}
    1bfe:	b083      	sub	sp, #12
    1c00:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    1c02:	7f03      	ldrb	r3, [r0, #28]
    1c04:	2b01      	cmp	r3, #1
    1c06:	d015      	beq.n	1c34 <grid_port_receive_complete_task+0x38>
	grid_port_receive_task(por);
    1c08:	4620      	mov	r0, r4
    1c0a:	4b13      	ldr	r3, [pc, #76]	; (1c58 <grid_port_receive_complete_task+0x5c>)
    1c0c:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    1c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1c10:	b173      	cbz	r3, 1c30 <grid_port_receive_complete_task+0x34>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    1c12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1c14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1c16:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    1c18:	bf34      	ite	cc
    1c1a:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    1c1c:	f202 72d1 	addwcs	r2, r2, #2001	; 0x7d1
    1c20:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    1c22:	b292      	uxth	r2, r2
    1c24:	b289      	uxth	r1, r1
    1c26:	4620      	mov	r0, r4
    1c28:	4b0c      	ldr	r3, [pc, #48]	; (1c5c <grid_port_receive_complete_task+0x60>)
    1c2a:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    1c2c:	2300      	movs	r3, #0
    1c2e:	6263      	str	r3, [r4, #36]	; 0x24
}
    1c30:	b003      	add	sp, #12
    1c32:	bd30      	pop	{r4, r5, pc}
		por->usart_error_flag = 0;
    1c34:	2500      	movs	r5, #0
    1c36:	7705      	strb	r5, [r0, #28]
		grid_port_reset_receiver(por);
    1c38:	4b09      	ldr	r3, [pc, #36]	; (1c60 <grid_port_receive_complete_task+0x64>)
    1c3a:	4798      	blx	r3
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500); // White triangle
    1c3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1c40:	9301      	str	r3, [sp, #4]
    1c42:	9500      	str	r5, [sp, #0]
    1c44:	23ff      	movs	r3, #255	; 0xff
    1c46:	461a      	mov	r2, r3
    1c48:	4619      	mov	r1, r3
    1c4a:	4806      	ldr	r0, [pc, #24]	; (1c64 <grid_port_receive_complete_task+0x68>)
    1c4c:	4d06      	ldr	r5, [pc, #24]	; (1c68 <grid_port_receive_complete_task+0x6c>)
    1c4e:	47a8      	blx	r5
		printf("{\"type\": \"ERROR\", \"data\": [\"Parity Error\"]}\r\n");
    1c50:	4806      	ldr	r0, [pc, #24]	; (1c6c <grid_port_receive_complete_task+0x70>)
    1c52:	4b07      	ldr	r3, [pc, #28]	; (1c70 <grid_port_receive_complete_task+0x74>)
    1c54:	4798      	blx	r3
    1c56:	e7d7      	b.n	1c08 <grid_port_receive_complete_task+0xc>
    1c58:	000013e5 	.word	0x000013e5
    1c5c:	00001635 	.word	0x00001635
    1c60:	00001361 	.word	0x00001361
    1c64:	200032d0 	.word	0x200032d0
    1c68:	00004811 	.word	0x00004811
    1c6c:	0000e7b4 	.word	0x0000e7b4
    1c70:	0000d339 	.word	0x0000d339

00001c74 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1c74:	8983      	ldrh	r3, [r0, #12]
    1c76:	8942      	ldrh	r2, [r0, #10]
    1c78:	429a      	cmp	r2, r3
    1c7a:	d000      	beq.n	1c7e <grid_buffer_read_size+0xa>
    1c7c:	e7fe      	b.n	1c7c <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1c7e:	8902      	ldrh	r2, [r0, #8]
    1c80:	429a      	cmp	r2, r3
    1c82:	d000      	beq.n	1c86 <grid_buffer_read_size+0x12>
    1c84:	e7fe      	b.n	1c84 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    1c86:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    1c88:	8a05      	ldrh	r5, [r0, #16]
    1c8a:	42ab      	cmp	r3, r5
    1c8c:	d025      	beq.n	1cda <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1c8e:	8804      	ldrh	r4, [r0, #0]
    1c90:	b1fc      	cbz	r4, 1cd2 <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1c92:	4626      	mov	r6, r4
    1c94:	fb93 f2f4 	sdiv	r2, r3, r4
    1c98:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    1c9c:	b291      	uxth	r1, r2
    1c9e:	428d      	cmp	r5, r1
    1ca0:	d01d      	beq.n	1cde <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    1ca2:	6840      	ldr	r0, [r0, #4]
    1ca4:	5c42      	ldrb	r2, [r0, r1]
    1ca6:	2a0a      	cmp	r2, #10
    1ca8:	d114      	bne.n	1cd4 <grid_buffer_read_size+0x60>
    1caa:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1cac:	3301      	adds	r3, #1
    1cae:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    1cb0:	bcf0      	pop	{r4, r5, r6, r7}
    1cb2:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1cb4:	fb92 f1f6 	sdiv	r1, r2, r6
    1cb8:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1cbc:	b28f      	uxth	r7, r1
    1cbe:	42bd      	cmp	r5, r7
    1cc0:	d00f      	beq.n	1ce2 <grid_buffer_read_size+0x6e>
    1cc2:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1cc4:	5dc1      	ldrb	r1, [r0, r7]
    1cc6:	290a      	cmp	r1, #10
    1cc8:	d0f0      	beq.n	1cac <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1cca:	3301      	adds	r3, #1
    1ccc:	b29b      	uxth	r3, r3
    1cce:	42a3      	cmp	r3, r4
    1cd0:	d1f0      	bne.n	1cb4 <grid_buffer_read_size+0x40>
    1cd2:	e7fe      	b.n	1cd2 <grid_buffer_read_size+0x5e>
    1cd4:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1cd6:	2300      	movs	r3, #0
    1cd8:	e7f7      	b.n	1cca <grid_buffer_read_size+0x56>
		return 0;
    1cda:	2000      	movs	r0, #0
    1cdc:	e7e8      	b.n	1cb0 <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    1cde:	2000      	movs	r0, #0
    1ce0:	e7e6      	b.n	1cb0 <grid_buffer_read_size+0x3c>
    1ce2:	2000      	movs	r0, #0
    1ce4:	e7e4      	b.n	1cb0 <grid_buffer_read_size+0x3c>

00001ce6 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1ce6:	8982      	ldrh	r2, [r0, #12]
    1ce8:	8943      	ldrh	r3, [r0, #10]
    1cea:	4293      	cmp	r3, r2
    1cec:	d000      	beq.n	1cf0 <grid_buffer_read_init+0xa>
    1cee:	e7fe      	b.n	1cee <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1cf0:	8903      	ldrh	r3, [r0, #8]
    1cf2:	4293      	cmp	r3, r2
    1cf4:	d000      	beq.n	1cf8 <grid_buffer_read_init+0x12>
    1cf6:	e7fe      	b.n	1cf6 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1cfa:	8a05      	ldrh	r5, [r0, #16]
    1cfc:	42aa      	cmp	r2, r5
    1cfe:	d031      	beq.n	1d64 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1d00:	8804      	ldrh	r4, [r0, #0]
    1d02:	b35c      	cbz	r4, 1d5c <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1d04:	4626      	mov	r6, r4
    1d06:	fb92 f3f4 	sdiv	r3, r2, r4
    1d0a:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    1d0e:	b299      	uxth	r1, r3
    1d10:	428d      	cmp	r5, r1
    1d12:	d029      	beq.n	1d68 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1d14:	6847      	ldr	r7, [r0, #4]
    1d16:	460b      	mov	r3, r1
    1d18:	5c79      	ldrb	r1, [r7, r1]
    1d1a:	290a      	cmp	r1, #10
    1d1c:	d11f      	bne.n	1d5e <grid_buffer_read_init+0x78>
    1d1e:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    1d20:	3301      	adds	r3, #1
    1d22:	fb93 f2f4 	sdiv	r2, r3, r4
    1d26:	fb04 3312 	mls	r3, r4, r2, r3
    1d2a:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1d2c:	1c4b      	adds	r3, r1, #1
    1d2e:	b29b      	uxth	r3, r3
    1d30:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    1d32:	4618      	mov	r0, r3
    1d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1d36:	fb92 f3f6 	sdiv	r3, r2, r6
    1d3a:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    1d3e:	fa1f fe83 	uxth.w	lr, r3
    1d42:	4575      	cmp	r5, lr
    1d44:	d012      	beq.n	1d6c <grid_buffer_read_init+0x86>
    1d46:	4673      	mov	r3, lr
    1d48:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1d4a:	f817 e00e 	ldrb.w	lr, [r7, lr]
    1d4e:	f1be 0f0a 	cmp.w	lr, #10
    1d52:	d0e5      	beq.n	1d20 <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1d54:	3101      	adds	r1, #1
    1d56:	b289      	uxth	r1, r1
    1d58:	42a1      	cmp	r1, r4
    1d5a:	d1ec      	bne.n	1d36 <grid_buffer_read_init+0x50>
    1d5c:	e7fe      	b.n	1d5c <grid_buffer_read_init+0x76>
    1d5e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1d60:	2100      	movs	r1, #0
    1d62:	e7f7      	b.n	1d54 <grid_buffer_read_init+0x6e>
		return 0;
    1d64:	2300      	movs	r3, #0
    1d66:	e7e4      	b.n	1d32 <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    1d68:	2300      	movs	r3, #0
    1d6a:	e7e2      	b.n	1d32 <grid_buffer_read_init+0x4c>
    1d6c:	2300      	movs	r3, #0
    1d6e:	e7e0      	b.n	1d32 <grid_buffer_read_init+0x4c>

00001d70 <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    1d70:	8983      	ldrh	r3, [r0, #12]
    1d72:	8941      	ldrh	r1, [r0, #10]
    1d74:	4299      	cmp	r1, r3
    1d76:	d00e      	beq.n	1d96 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    1d78:	b410      	push	{r4}
    1d7a:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    1d7c:	6841      	ldr	r1, [r0, #4]
    1d7e:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    1d80:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    1d82:	b29b      	uxth	r3, r3
    1d84:	8814      	ldrh	r4, [r2, #0]
    1d86:	fbb3 f1f4 	udiv	r1, r3, r4
    1d8a:	fb04 3311 	mls	r3, r4, r1, r3
    1d8e:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    1d90:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d94:	4770      	bx	lr
    1d96:	e7fe      	b.n	1d96 <grid_buffer_read_character+0x26>

00001d98 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    1d98:	8983      	ldrh	r3, [r0, #12]
    1d9a:	8942      	ldrh	r2, [r0, #10]
    1d9c:	429a      	cmp	r2, r3
    1d9e:	d000      	beq.n	1da2 <grid_buffer_read_acknowledge+0xa>
    1da0:	e7fe      	b.n	1da0 <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    1da2:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1da4:	2001      	movs	r0, #1
    1da6:	4770      	bx	lr

00001da8 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma, struct grid_ui_report* p_report){
    1da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1dac:	4604      	mov	r4, r0
    1dae:	4690      	mov	r8, r2
    1db0:	461f      	mov	r7, r3
    1db2:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    1db6:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1dba:	4e3b      	ldr	r6, [pc, #236]	; (1ea8 <grid_port_init+0x100>)
    1dbc:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    1dbe:	4641      	mov	r1, r8
    1dc0:	f604 70e8 	addw	r0, r4, #4072	; 0xfe8
    1dc4:	47b0      	blx	r6
	
	por->ping_report = p_report;
    1dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1dc8:	6063      	str	r3, [r4, #4]
	
	por->cooldown = 0;
    1dca:	2300      	movs	r3, #0
    1dcc:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    1dce:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1dd2:	73a2      	strb	r2, [r4, #14]
	
	por->direction = dir;
    1dd4:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1dd8:	7362      	strb	r2, [r4, #13]
	
	por->usart	= usart;
    1dda:	60a7      	str	r7, [r4, #8]
	por->type		= type;
    1ddc:	7325      	strb	r5, [r4, #12]
	
	por->tx_double_buffer_status	= 0;
    1dde:	8223      	strh	r3, [r4, #16]
	por->rx_double_buffer_status	= 0;
    1de0:	6263      	str	r3, [r4, #36]	; 0x24
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    1de2:	4619      	mov	r1, r3
    1de4:	18e2      	adds	r2, r4, r3
    1de6:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1dea:	3301      	adds	r3, #1
    1dec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1df0:	d1f8      	bne.n	1de4 <grid_port_init+0x3c>
    1df2:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    1df4:	4619      	mov	r1, r3
    1df6:	18e2      	adds	r2, r4, r3
    1df8:	f882 1800 	strb.w	r1, [r2, #2048]	; 0x800
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1dfc:	3301      	adds	r3, #1
    1dfe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1e02:	d1f8      	bne.n	1df6 <grid_port_init+0x4e>
	}
	
	por->partner_fi = 0;
    1e04:	2300      	movs	r3, #0
    1e06:	f241 0204 	movw	r2, #4100	; 0x1004
    1e0a:	54a3      	strb	r3, [r4, r2]
	
	por->partner_hwcfg = 0;
    1e0c:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    1e10:	6013      	str	r3, [r2, #0]
	por->partner_status = 1;
    1e12:	2201      	movs	r2, #1
    1e14:	f241 0307 	movw	r3, #4103	; 0x1007
    1e18:	54e2      	strb	r2, [r4, r3]
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    1e1a:	4295      	cmp	r5, r2
    1e1c:	d005      	beq.n	1e2a <grid_port_init+0x82>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    1e1e:	2201      	movs	r2, #1
    1e20:	f241 0307 	movw	r3, #4103	; 0x1007
    1e24:	54e2      	strb	r2, [r4, r3]
    1e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    1e2a:	2300      	movs	r3, #0
    1e2c:	f241 0207 	movw	r2, #4103	; 0x1007
    1e30:	54a3      	strb	r3, [r4, r2]
		por->partner_fi = 0;
    1e32:	f241 0204 	movw	r2, #4100	; 0x1004
    1e36:	54a3      	strb	r3, [r4, r2]
		if (por->direction == GRID_CONST_NORTH){
    1e38:	7b63      	ldrb	r3, [r4, #13]
    1e3a:	b2db      	uxtb	r3, r3
    1e3c:	2b11      	cmp	r3, #17
    1e3e:	d015      	beq.n	1e6c <grid_port_init+0xc4>
		else if (por->direction == GRID_CONST_EAST){
    1e40:	7b63      	ldrb	r3, [r4, #13]
    1e42:	b2db      	uxtb	r3, r3
    1e44:	2b12      	cmp	r3, #18
    1e46:	d01b      	beq.n	1e80 <grid_port_init+0xd8>
		else if (por->direction == GRID_CONST_SOUTH){
    1e48:	7b63      	ldrb	r3, [r4, #13]
    1e4a:	b2db      	uxtb	r3, r3
    1e4c:	2b13      	cmp	r3, #19
    1e4e:	d021      	beq.n	1e94 <grid_port_init+0xec>
		else if (por->direction == GRID_CONST_WEST){
    1e50:	7b63      	ldrb	r3, [r4, #13]
    1e52:	b2db      	uxtb	r3, r3
    1e54:	2b14      	cmp	r3, #20
    1e56:	d1e6      	bne.n	1e26 <grid_port_init+0x7e>
			por->dx = -1;
    1e58:	22ff      	movs	r2, #255	; 0xff
    1e5a:	f241 0305 	movw	r3, #4101	; 0x1005
    1e5e:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    1e60:	2200      	movs	r2, #0
    1e62:	f241 0306 	movw	r3, #4102	; 0x1006
    1e66:	54e2      	strb	r2, [r4, r3]
    1e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    1e6c:	2200      	movs	r2, #0
    1e6e:	f241 0305 	movw	r3, #4101	; 0x1005
    1e72:	54e2      	strb	r2, [r4, r3]
			por->dy = 1;
    1e74:	2201      	movs	r2, #1
    1e76:	f241 0306 	movw	r3, #4102	; 0x1006
    1e7a:	54e2      	strb	r2, [r4, r3]
    1e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    1e80:	2201      	movs	r2, #1
    1e82:	f241 0305 	movw	r3, #4101	; 0x1005
    1e86:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    1e88:	2200      	movs	r2, #0
    1e8a:	f241 0306 	movw	r3, #4102	; 0x1006
    1e8e:	54e2      	strb	r2, [r4, r3]
    1e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    1e94:	2200      	movs	r2, #0
    1e96:	f241 0305 	movw	r3, #4101	; 0x1005
    1e9a:	54e2      	strb	r2, [r4, r3]
			por->dy = -1;
    1e9c:	22ff      	movs	r2, #255	; 0xff
    1e9e:	f241 0306 	movw	r3, #4102	; 0x1006
    1ea2:	54e2      	strb	r2, [r4, r3]
    1ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ea8:	00001585 	.word	0x00001585

00001eac <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    1eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1eb0:	b084      	sub	sp, #16
	
	struct grid_report_model* mod = &grid_report_state;
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_CONST_NORTH ,0, &mod->report_array[GRID_REPORT_INDEX_PING_NORTH]);
    1eb2:	4f2f      	ldr	r7, [pc, #188]	; (1f70 <grid_port_init_all+0xc4>)
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	9303      	str	r3, [sp, #12]
    1eb8:	2500      	movs	r5, #0
    1eba:	9502      	str	r5, [sp, #8]
    1ebc:	2311      	movs	r3, #17
    1ebe:	9301      	str	r3, [sp, #4]
    1ec0:	2401      	movs	r4, #1
    1ec2:	9400      	str	r4, [sp, #0]
    1ec4:	4b2b      	ldr	r3, [pc, #172]	; (1f74 <grid_port_init_all+0xc8>)
    1ec6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1eca:	4611      	mov	r1, r2
    1ecc:	482a      	ldr	r0, [pc, #168]	; (1f78 <grid_port_init_all+0xcc>)
    1ece:	4e2b      	ldr	r6, [pc, #172]	; (1f7c <grid_port_init_all+0xd0>)
    1ed0:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_CONST_EAST  ,1, &mod->report_array[GRID_REPORT_INDEX_PING_EAST]);
    1ed2:	687b      	ldr	r3, [r7, #4]
    1ed4:	3310      	adds	r3, #16
    1ed6:	9303      	str	r3, [sp, #12]
    1ed8:	9402      	str	r4, [sp, #8]
    1eda:	2312      	movs	r3, #18
    1edc:	9301      	str	r3, [sp, #4]
    1ede:	9400      	str	r4, [sp, #0]
    1ee0:	4b27      	ldr	r3, [pc, #156]	; (1f80 <grid_port_init_all+0xd4>)
    1ee2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1ee6:	4611      	mov	r1, r2
    1ee8:	4826      	ldr	r0, [pc, #152]	; (1f84 <grid_port_init_all+0xd8>)
    1eea:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_CONST_SOUTH ,2, &mod->report_array[GRID_REPORT_INDEX_PING_SOUTH]);
    1eec:	687b      	ldr	r3, [r7, #4]
    1eee:	3320      	adds	r3, #32
    1ef0:	9303      	str	r3, [sp, #12]
    1ef2:	f04f 0802 	mov.w	r8, #2
    1ef6:	f8cd 8008 	str.w	r8, [sp, #8]
    1efa:	2313      	movs	r3, #19
    1efc:	9301      	str	r3, [sp, #4]
    1efe:	9400      	str	r4, [sp, #0]
    1f00:	4b21      	ldr	r3, [pc, #132]	; (1f88 <grid_port_init_all+0xdc>)
    1f02:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1f06:	4611      	mov	r1, r2
    1f08:	4820      	ldr	r0, [pc, #128]	; (1f8c <grid_port_init_all+0xe0>)
    1f0a:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_CONST_WEST  ,3, &mod->report_array[GRID_REPORT_INDEX_PING_WEST]);
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	3330      	adds	r3, #48	; 0x30
    1f10:	9303      	str	r3, [sp, #12]
    1f12:	2703      	movs	r7, #3
    1f14:	9702      	str	r7, [sp, #8]
    1f16:	2314      	movs	r3, #20
    1f18:	9301      	str	r3, [sp, #4]
    1f1a:	9400      	str	r4, [sp, #0]
    1f1c:	4b1c      	ldr	r3, [pc, #112]	; (1f90 <grid_port_init_all+0xe4>)
    1f1e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1f22:	4611      	mov	r1, r2
    1f24:	481b      	ldr	r0, [pc, #108]	; (1f94 <grid_port_init_all+0xe8>)
    1f26:	47b0      	blx	r6
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1, NULL);
    1f28:	f8df 9070 	ldr.w	r9, [pc, #112]	; 1f9c <grid_port_init_all+0xf0>
    1f2c:	9503      	str	r5, [sp, #12]
    1f2e:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1f32:	f8cd a008 	str.w	sl, [sp, #8]
    1f36:	9501      	str	r5, [sp, #4]
    1f38:	9700      	str	r7, [sp, #0]
    1f3a:	462b      	mov	r3, r5
    1f3c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1f40:	4611      	mov	r1, r2
    1f42:	4648      	mov	r0, r9
    1f44:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1, NULL);	
    1f46:	4f14      	ldr	r7, [pc, #80]	; (1f98 <grid_port_init_all+0xec>)
    1f48:	9503      	str	r5, [sp, #12]
    1f4a:	f8cd a008 	str.w	sl, [sp, #8]
    1f4e:	9501      	str	r5, [sp, #4]
    1f50:	f8cd 8000 	str.w	r8, [sp]
    1f54:	462b      	mov	r3, r5
    1f56:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1f5a:	4611      	mov	r1, r2
    1f5c:	4638      	mov	r0, r7
    1f5e:	47b0      	blx	r6
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    1f60:	f241 0307 	movw	r3, #4103	; 0x1007
    1f64:	f809 4003 	strb.w	r4, [r9, r3]
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    1f68:	54fc      	strb	r4, [r7, r3]
	
	
}
    1f6a:	b004      	add	sp, #16
    1f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f70:	200078c4 	.word	0x200078c4
    1f74:	200010d0 	.word	0x200010d0
    1f78:	200012a4 	.word	0x200012a4
    1f7c:	00001da9 	.word	0x00001da9
    1f80:	2000107c 	.word	0x2000107c
    1f84:	200068b8 	.word	0x200068b8
    1f88:	200011d4 	.word	0x200011d4
    1f8c:	200047a4 	.word	0x200047a4
    1f90:	20001184 	.word	0x20001184
    1f94:	20003798 	.word	0x20003798
    1f98:	200057b0 	.word	0x200057b0
    1f9c:	200022bc 	.word	0x200022bc

00001fa0 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    1fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fa4:	b093      	sub	sp, #76	; 0x4c
    1fa6:	af02      	add	r7, sp, #8
    1fa8:	4605      	mov	r5, r0
    1faa:	468a      	mov	sl, r1
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    1fac:	f600 73e8 	addw	r3, r0, #4072	; 0xfe8
    1fb0:	60bb      	str	r3, [r7, #8]
    1fb2:	4618      	mov	r0, r3
    1fb4:	4b5f      	ldr	r3, [pc, #380]	; (2134 <grid_port_process_inbound+0x194>)
    1fb6:	4798      	blx	r3
	
	if (!packet_size){
    1fb8:	b920      	cbnz	r0, 1fc4 <grid_port_process_inbound+0x24>
		
		// NO PACKET IN RX BUFFER
		return 0;
    1fba:	2000      	movs	r0, #0
		}	

		return 1;
	}
		
}
    1fbc:	3744      	adds	r7, #68	; 0x44
    1fbe:	46bd      	mov	sp, r7
    1fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fc4:	4680      	mov	r8, r0
	}else{
    1fc6:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    1fca:	4b5b      	ldr	r3, [pc, #364]	; (2138 <grid_port_process_inbound+0x198>)
    1fcc:	613b      	str	r3, [r7, #16]
		port_array_default[1] = &GRID_PORT_E;
    1fce:	4b5b      	ldr	r3, [pc, #364]	; (213c <grid_port_process_inbound+0x19c>)
    1fd0:	617b      	str	r3, [r7, #20]
		port_array_default[2] = &GRID_PORT_S;
    1fd2:	4b5b      	ldr	r3, [pc, #364]	; (2140 <grid_port_process_inbound+0x1a0>)
    1fd4:	61bb      	str	r3, [r7, #24]
		port_array_default[3] = &GRID_PORT_W;
    1fd6:	4b5b      	ldr	r3, [pc, #364]	; (2144 <grid_port_process_inbound+0x1a4>)
    1fd8:	61fb      	str	r3, [r7, #28]
		port_array_default[4] = &GRID_PORT_U;
    1fda:	4b5b      	ldr	r3, [pc, #364]	; (2148 <grid_port_process_inbound+0x1a8>)
    1fdc:	623b      	str	r3, [r7, #32]
		port_array_default[5] = &GRID_PORT_H;
    1fde:	4b5b      	ldr	r3, [pc, #364]	; (214c <grid_port_process_inbound+0x1ac>)
    1fe0:	627b      	str	r3, [r7, #36]	; 0x24
    1fe2:	f107 0310 	add.w	r3, r7, #16
    1fe6:	f107 0028 	add.w	r0, r7, #40	; 0x28
		uint8_t j=0;
    1fea:	2400      	movs	r4, #0
			if (port_array_default[i]->partner_status != 0){
    1fec:	f241 0107 	movw	r1, #4103	; 0x1007
    1ff0:	e001      	b.n	1ff6 <grid_port_process_inbound+0x56>
		for(uint8_t i=0; i<port_count; i++){
    1ff2:	4283      	cmp	r3, r0
    1ff4:	d00d      	beq.n	2012 <grid_port_process_inbound+0x72>
			if (port_array_default[i]->partner_status != 0){
    1ff6:	f853 2b04 	ldr.w	r2, [r3], #4
    1ffa:	5c56      	ldrb	r6, [r2, r1]
    1ffc:	2e00      	cmp	r6, #0
    1ffe:	d0f8      	beq.n	1ff2 <grid_port_process_inbound+0x52>
				port_array[j] = port_array_default[i];
    2000:	f107 0640 	add.w	r6, r7, #64	; 0x40
    2004:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    2008:	f846 2c18 	str.w	r2, [r6, #-24]
				j++;
    200c:	3401      	adds	r4, #1
    200e:	b2e4      	uxtb	r4, r4
    2010:	e7ef      	b.n	1ff2 <grid_port_process_inbound+0x52>
		for (uint8_t i=0; i<port_count; i++)
    2012:	2c00      	cmp	r4, #0
    2014:	d07b      	beq.n	210e <grid_port_process_inbound+0x16e>
    2016:	f107 0928 	add.w	r9, r7, #40	; 0x28
    201a:	1e66      	subs	r6, r4, #1
    201c:	b2f6      	uxtb	r6, r6
    201e:	3601      	adds	r6, #1
    2020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    2024:	f8df b144 	ldr.w	fp, [pc, #324]	; 216c <grid_port_process_inbound+0x1cc>
    2028:	f8c7 900c 	str.w	r9, [r7, #12]
    202c:	e007      	b.n	203e <grid_port_process_inbound+0x9e>
    202e:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    2032:	47d8      	blx	fp
    2034:	4580      	cmp	r8, r0
    2036:	d80c      	bhi.n	2052 <grid_port_process_inbound+0xb2>
		for (uint8_t i=0; i<port_count; i++)
    2038:	68fb      	ldr	r3, [r7, #12]
    203a:	42b3      	cmp	r3, r6
    203c:	d017      	beq.n	206e <grid_port_process_inbound+0xce>
			if (port_array[i] != por || loopback){
    203e:	68fb      	ldr	r3, [r7, #12]
    2040:	f853 0b04 	ldr.w	r0, [r3], #4
    2044:	60fb      	str	r3, [r7, #12]
    2046:	4285      	cmp	r5, r0
    2048:	d1f1      	bne.n	202e <grid_port_process_inbound+0x8e>
    204a:	f1ba 0f00 	cmp.w	sl, #0
    204e:	d0f3      	beq.n	2038 <grid_port_process_inbound+0x98>
    2050:	e7ed      	b.n	202e <grid_port_process_inbound+0x8e>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    2052:	23c8      	movs	r3, #200	; 0xc8
    2054:	9301      	str	r3, [sp, #4]
    2056:	2302      	movs	r3, #2
    2058:	9300      	str	r3, [sp, #0]
    205a:	2300      	movs	r3, #0
    205c:	2264      	movs	r2, #100	; 0x64
    205e:	4611      	mov	r1, r2
    2060:	483b      	ldr	r0, [pc, #236]	; (2150 <grid_port_process_inbound+0x1b0>)
    2062:	4c3c      	ldr	r4, [pc, #240]	; (2154 <grid_port_process_inbound+0x1b4>)
    2064:	47a0      	blx	r4
					return 0;
    2066:	2000      	movs	r0, #0
    2068:	f8d7 d000 	ldr.w	sp, [r7]
    206c:	e7a6      	b.n	1fbc <grid_port_process_inbound+0x1c>
    206e:	469b      	mov	fp, r3
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    2070:	68b8      	ldr	r0, [r7, #8]
    2072:	4b39      	ldr	r3, [pc, #228]	; (2158 <grid_port_process_inbound+0x1b8>)
    2074:	4798      	blx	r3
    2076:	4580      	cmp	r8, r0
    2078:	d000      	beq.n	207c <grid_port_process_inbound+0xdc>
    207a:	e7fe      	b.n	207a <grid_port_process_inbound+0xda>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    207c:	4e37      	ldr	r6, [pc, #220]	; (215c <grid_port_process_inbound+0x1bc>)
    207e:	e004      	b.n	208a <grid_port_process_inbound+0xea>
			if (port_array[i] != por || loopback){
    2080:	f1ba 0f00 	cmp.w	sl, #0
    2084:	d105      	bne.n	2092 <grid_port_process_inbound+0xf2>
		for (uint8_t i=0; i<port_count; i++)
    2086:	45d9      	cmp	r9, fp
    2088:	d046      	beq.n	2118 <grid_port_process_inbound+0x178>
			if (port_array[i] != por || loopback){
    208a:	f859 0b04 	ldr.w	r0, [r9], #4
    208e:	4285      	cmp	r5, r0
    2090:	d0f6      	beq.n	2080 <grid_port_process_inbound+0xe0>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    2092:	4641      	mov	r1, r8
    2094:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    2098:	47b0      	blx	r6
    209a:	e7f4      	b.n	2086 <grid_port_process_inbound+0xe6>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    209c:	6879      	ldr	r1, [r7, #4]
    209e:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    20a2:	47c8      	blx	r9
			for (uint8_t i=0; i<port_count; i++){
    20a4:	68fb      	ldr	r3, [r7, #12]
    20a6:	42b3      	cmp	r3, r6
    20a8:	d007      	beq.n	20ba <grid_port_process_inbound+0x11a>
				if (port_array[i] != por || loopback){
    20aa:	f856 0b04 	ldr.w	r0, [r6], #4
    20ae:	4285      	cmp	r5, r0
    20b0:	d1f4      	bne.n	209c <grid_port_process_inbound+0xfc>
    20b2:	f1ba 0f00 	cmp.w	sl, #0
    20b6:	d0f5      	beq.n	20a4 <grid_port_process_inbound+0x104>
    20b8:	e7f0      	b.n	209c <grid_port_process_inbound+0xfc>
    20ba:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t j=0; j<packet_size; j++)
    20be:	fa1f f38b 	uxth.w	r3, fp
    20c2:	4543      	cmp	r3, r8
    20c4:	d208      	bcs.n	20d8 <grid_port_process_inbound+0x138>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    20c6:	68b8      	ldr	r0, [r7, #8]
    20c8:	4b25      	ldr	r3, [pc, #148]	; (2160 <grid_port_process_inbound+0x1c0>)
    20ca:	4798      	blx	r3
    20cc:	6078      	str	r0, [r7, #4]
			for (uint8_t i=0; i<port_count; i++){
    20ce:	2c00      	cmp	r4, #0
    20d0:	d0f3      	beq.n	20ba <grid_port_process_inbound+0x11a>
    20d2:	f107 0628 	add.w	r6, r7, #40	; 0x28
    20d6:	e7e8      	b.n	20aa <grid_port_process_inbound+0x10a>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    20d8:	68b8      	ldr	r0, [r7, #8]
    20da:	4b22      	ldr	r3, [pc, #136]	; (2164 <grid_port_process_inbound+0x1c4>)
    20dc:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    20de:	b1a4      	cbz	r4, 210a <grid_port_process_inbound+0x16a>
    20e0:	f107 0428 	add.w	r4, r7, #40	; 0x28
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    20e4:	4e20      	ldr	r6, [pc, #128]	; (2168 <grid_port_process_inbound+0x1c8>)
    20e6:	68fb      	ldr	r3, [r7, #12]
    20e8:	4698      	mov	r8, r3
    20ea:	e004      	b.n	20f6 <grid_port_process_inbound+0x156>
			if (port_array[i] != por || loopback){
    20ec:	f1ba 0f00 	cmp.w	sl, #0
    20f0:	d105      	bne.n	20fe <grid_port_process_inbound+0x15e>
		for (uint8_t i=0; i<port_count; i++)
    20f2:	45a0      	cmp	r8, r4
    20f4:	d007      	beq.n	2106 <grid_port_process_inbound+0x166>
			if (port_array[i] != por || loopback){
    20f6:	f854 0b04 	ldr.w	r0, [r4], #4
    20fa:	4285      	cmp	r5, r0
    20fc:	d0f6      	beq.n	20ec <grid_port_process_inbound+0x14c>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    20fe:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    2102:	47b0      	blx	r6
    2104:	e7f5      	b.n	20f2 <grid_port_process_inbound+0x152>
		return 1;
    2106:	2001      	movs	r0, #1
    2108:	e7ae      	b.n	2068 <grid_port_process_inbound+0xc8>
    210a:	2001      	movs	r0, #1
    210c:	e7ac      	b.n	2068 <grid_port_process_inbound+0xc8>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    210e:	68b8      	ldr	r0, [r7, #8]
    2110:	4b11      	ldr	r3, [pc, #68]	; (2158 <grid_port_process_inbound+0x1b8>)
    2112:	4798      	blx	r3
    2114:	4540      	cmp	r0, r8
    2116:	d1b0      	bne.n	207a <grid_port_process_inbound+0xda>
    2118:	1e63      	subs	r3, r4, #1
    211a:	b2db      	uxtb	r3, r3
    211c:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2120:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2124:	3b14      	subs	r3, #20
		for (uint8_t i=0; i<port_count; i++)
    2126:	f04f 0b00 	mov.w	fp, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    212a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2170 <grid_port_process_inbound+0x1d0>
    212e:	60fb      	str	r3, [r7, #12]
    2130:	e7c9      	b.n	20c6 <grid_port_process_inbound+0x126>
    2132:	bf00      	nop
    2134:	00001c75 	.word	0x00001c75
    2138:	200012a4 	.word	0x200012a4
    213c:	200068b8 	.word	0x200068b8
    2140:	200047a4 	.word	0x200047a4
    2144:	20003798 	.word	0x20003798
    2148:	200022bc 	.word	0x200022bc
    214c:	200057b0 	.word	0x200057b0
    2150:	200032d0 	.word	0x200032d0
    2154:	00004811 	.word	0x00004811
    2158:	00001ce7 	.word	0x00001ce7
    215c:	000015d9 	.word	0x000015d9
    2160:	00001d71 	.word	0x00001d71
    2164:	00001d99 	.word	0x00001d99
    2168:	00001625 	.word	0x00001625
    216c:	000015c5 	.word	0x000015c5
    2170:	00001609 	.word	0x00001609

00002174 <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    2174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2178:	b0d3      	sub	sp, #332	; 0x14c
    217a:	4682      	mov	sl, r0
			

	// OLD DEBUG IMPLEMENTATION
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    217c:	f500 677d 	add.w	r7, r0, #4048	; 0xfd0
    2180:	4638      	mov	r0, r7
    2182:	4b6d      	ldr	r3, [pc, #436]	; (2338 <grid_port_process_outbound_usb+0x1c4>)
    2184:	4798      	blx	r3
	
	if (!length){		
    2186:	9002      	str	r0, [sp, #8]
    2188:	2800      	cmp	r0, #0
    218a:	f000 80d2 	beq.w	2332 <grid_port_process_outbound_usb+0x1be>
    218e:	f10a 052f 	add.w	r5, sl, #47	; 0x2f
    2192:	f20a 71ff 	addw	r1, sl, #2047	; 0x7ff
    2196:	462b      	mov	r3, r5


	if (length){
		
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    2198:	2200      	movs	r2, #0
    219a:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    219e:	428b      	cmp	r3, r1
    21a0:	d1fb      	bne.n	219a <grid_port_process_outbound_usb+0x26>
		}
		
		
		
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    21a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
    21a6:	2100      	movs	r1, #0
    21a8:	a807      	add	r0, sp, #28
    21aa:	4b64      	ldr	r3, [pc, #400]	; (233c <grid_port_process_outbound_usb+0x1c8>)
    21ac:	4798      	blx	r3
			
		
		//uint8_t message[length];
		
		// Let's transfer the packet to local memory
		grid_buffer_read_init(&por->tx_buffer);
    21ae:	4638      	mov	r0, r7
    21b0:	4b63      	ldr	r3, [pc, #396]	; (2340 <grid_port_process_outbound_usb+0x1cc>)
    21b2:	4798      	blx	r3
    21b4:	f10d 041b 	add.w	r4, sp, #27
    21b8:	9b02      	ldr	r3, [sp, #8]
    21ba:	1e5e      	subs	r6, r3, #1
    21bc:	fa1f f986 	uxth.w	r9, r6
    21c0:	ab07      	add	r3, sp, #28
    21c2:	eb03 0809 	add.w	r8, r3, r9
		
		for (uint16_t i = 0; i<length; i++){
			
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    21c6:	4e5f      	ldr	r6, [pc, #380]	; (2344 <grid_port_process_outbound_usb+0x1d0>)
    21c8:	4638      	mov	r0, r7
    21ca:	47b0      	blx	r6
    21cc:	f804 0f01 	strb.w	r0, [r4, #1]!
			
			por->tx_double_buffer[i] = message[i];
    21d0:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (uint16_t i = 0; i<length; i++){
    21d4:	4544      	cmp	r4, r8
    21d6:	d1f7      	bne.n	21c8 <grid_port_process_outbound_usb+0x54>
			
		}
				
		// Let's acknowledge the transactions	(should wait for partner to send ack)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    21d8:	4638      	mov	r0, r7
    21da:	4b5b      	ldr	r3, [pc, #364]	; (2348 <grid_port_process_outbound_usb+0x1d4>)
    21dc:	4798      	blx	r3
// 		return;


		// GRID-2-HOST TRANSLATOR
		
		uint8_t error=0;
    21de:	2500      	movs	r5, #0
    21e0:	f88d 501a 	strb.w	r5, [sp, #26]
			
		int8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    21e4:	ac07      	add	r4, sp, #28
    21e6:	f10d 031a 	add.w	r3, sp, #26
    21ea:	2202      	movs	r2, #2
    21ec:	2106      	movs	r1, #6
    21ee:	4620      	mov	r0, r4
    21f0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 234c <grid_port_process_outbound_usb+0x1d8>
    21f4:	47c0      	blx	r8
    21f6:	4607      	mov	r7, r0
		int8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;	
    21f8:	f10d 031a 	add.w	r3, sp, #26
    21fc:	2202      	movs	r2, #2
    21fe:	2108      	movs	r1, #8
    2200:	4620      	mov	r0, r4
    2202:	47c0      	blx	r8
				
		uint8_t current_start		= 0;
		uint8_t current_stop		= 0;
		
		
		uint8_t error_flag = 0;
    2204:	f88d 501b 	strb.w	r5, [sp, #27]
		int8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;	
    2208:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
					uint8_t midi_channel = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length, &error);
					uint8_t midi_command = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length,  &error);
					uint8_t midi_param1  = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_PARAM1_offset  , GRID_CLASS_MIDIRELATIVE_PARAM1_length,   &error);
					uint8_t midi_param2  = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_PARAM2_offset  , GRID_CLASS_MIDIRELATIVE_PARAM2_length,   &error);
											
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_active*8)%16;
    220c:	b25b      	sxtb	r3, r3
    220e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
    2212:	005b      	lsls	r3, r3, #1
    2214:	1aea      	subs	r2, r5, r3
    2216:	f003 0b07 	and.w	fp, r3, #7
    221a:	f002 0307 	and.w	r3, r2, #7
    221e:	bf58      	it	pl
    2220:	f1c3 0b00 	rsbpl	fp, r3, #0
		int8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    2224:	f1a7 037f 	sub.w	r3, r7, #127	; 0x7f
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    2228:	b25b      	sxtb	r3, r3
    222a:	011b      	lsls	r3, r3, #4
    222c:	9303      	str	r3, [sp, #12]
    222e:	4627      	mov	r7, r4
    2230:	f109 0601 	add.w	r6, r9, #1
    2234:	4426      	add	r6, r4
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    2236:	f8df 9124 	ldr.w	r9, [pc, #292]	; 235c <grid_port_process_outbound_usb+0x1e8>
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    223a:	46a8      	mov	r8, r5
    223c:	e006      	b.n	224c <grid_port_process_outbound_usb+0xd8>
    223e:	eba4 0807 	sub.w	r8, r4, r7
    2242:	fa5f f888 	uxtb.w	r8, r8
    2246:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    2248:	42b4      	cmp	r4, r6
    224a:	d06d      	beq.n	2328 <grid_port_process_outbound_usb+0x1b4>
			if (message[i] == GRID_CONST_STX){
    224c:	7823      	ldrb	r3, [r4, #0]
    224e:	2b02      	cmp	r3, #2
    2250:	d0f5      	beq.n	223e <grid_port_process_outbound_usb+0xca>
			else if (message[i] == GRID_CONST_ETX && current_start!=0){
    2252:	2b03      	cmp	r3, #3
    2254:	d1f7      	bne.n	2246 <grid_port_process_outbound_usb+0xd2>
    2256:	f1b8 0f00 	cmp.w	r8, #0
    225a:	d0f4      	beq.n	2246 <grid_port_process_outbound_usb+0xd2>
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    225c:	f108 0001 	add.w	r0, r8, #1
    2260:	f10d 021b 	add.w	r2, sp, #27
    2264:	2103      	movs	r1, #3
    2266:	ab07      	add	r3, sp, #28
    2268:	4418      	add	r0, r3
    226a:	47c8      	blx	r9
    226c:	b2c3      	uxtb	r3, r0
    226e:	461d      	mov	r5, r3
    2270:	9301      	str	r3, [sp, #4]
				uint8_t msg_instr = grid_sys_read_hex_string_value(&message[current_start+GRID_INSTR_offset], GRID_INSTR_length, &error_flag);
    2272:	f108 0004 	add.w	r0, r8, #4
    2276:	f10d 021b 	add.w	r2, sp, #27
    227a:	2101      	movs	r1, #1
    227c:	ab07      	add	r3, sp, #28
    227e:	4418      	add	r0, r3
    2280:	47c8      	blx	r9
				if (msg_class == GRID_CLASS_MIDIRELATIVE_code && msg_instr == GRID_INSTR_REP_code){
    2282:	2d00      	cmp	r5, #0
    2284:	d14d      	bne.n	2322 <grid_port_process_outbound_usb+0x1ae>
    2286:	b2c0      	uxtb	r0, r0
    2288:	280f      	cmp	r0, #15
    228a:	d002      	beq.n	2292 <grid_port_process_outbound_usb+0x11e>
// 					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
// 					
// 					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
				}
				
				current_start = 0;
    228c:	f8dd 8004 	ldr.w	r8, [sp, #4]
    2290:	e7d9      	b.n	2246 <grid_port_process_outbound_usb+0xd2>
					uint8_t midi_channel = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length, &error);
    2292:	ab07      	add	r3, sp, #28
    2294:	4443      	add	r3, r8
    2296:	4618      	mov	r0, r3
    2298:	f10d 031a 	add.w	r3, sp, #26
    229c:	2202      	movs	r2, #2
    229e:	2105      	movs	r1, #5
    22a0:	4680      	mov	r8, r0
    22a2:	4d2a      	ldr	r5, [pc, #168]	; (234c <grid_port_process_outbound_usb+0x1d8>)
    22a4:	47a8      	blx	r5
					uint8_t midi_command = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length,  &error);
    22a6:	f10d 031a 	add.w	r3, sp, #26
    22aa:	2202      	movs	r2, #2
    22ac:	2107      	movs	r1, #7
    22ae:	f8cd 8010 	str.w	r8, [sp, #16]
    22b2:	4640      	mov	r0, r8
    22b4:	47a8      	blx	r5
    22b6:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_PARAM1_offset  , GRID_CLASS_MIDIRELATIVE_PARAM1_length,   &error);
    22ba:	f10d 031a 	add.w	r3, sp, #26
    22be:	2202      	movs	r2, #2
    22c0:	2109      	movs	r1, #9
    22c2:	9804      	ldr	r0, [sp, #16]
    22c4:	47a8      	blx	r5
    22c6:	9005      	str	r0, [sp, #20]
					uint8_t midi_param2  = grid_msg_get_parameter(&message[current_start], GRID_CLASS_MIDIRELATIVE_PARAM2_offset  , GRID_CLASS_MIDIRELATIVE_PARAM2_length,   &error);
    22c8:	f10d 031a 	add.w	r3, sp, #26
    22cc:	2202      	movs	r2, #2
    22ce:	210b      	movs	r1, #11
    22d0:	9804      	ldr	r0, [sp, #16]
    22d2:	47a8      	blx	r5
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_active*8)%16;
    22d4:	4b1e      	ldr	r3, [pc, #120]	; (2350 <grid_port_process_outbound_usb+0x1dc>)
    22d6:	7a5b      	ldrb	r3, [r3, #9]
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    22d8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    22dc:	32e0      	adds	r2, #224	; 0xe0
    22de:	9903      	ldr	r1, [sp, #12]
    22e0:	440a      	add	r2, r1
    22e2:	491c      	ldr	r1, [pc, #112]	; (2354 <grid_port_process_outbound_usb+0x1e0>)
    22e4:	fb81 1e02 	smull	r1, lr, r1, r2
    22e8:	17d1      	asrs	r1, r2, #31
    22ea:	ebc1 112e 	rsb	r1, r1, lr, asr #4
    22ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    22f2:	eba2 1241 	sub.w	r2, r2, r1, lsl #5
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_active*8)%16;
    22f6:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
    22fa:	4259      	negs	r1, r3
    22fc:	f003 030f 	and.w	r3, r3, #15
    2300:	f001 010f 	and.w	r1, r1, #15
    2304:	bf58      	it	pl
    2306:	424b      	negpl	r3, r1
					audiodf_midi_write(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    2308:	ea48 0103 	orr.w	r1, r8, r3
    230c:	b2c3      	uxtb	r3, r0
    230e:	b2d2      	uxtb	r2, r2
    2310:	b2c9      	uxtb	r1, r1
    2312:	ea4f 1018 	mov.w	r0, r8, lsr #4
    2316:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2360 <grid_port_process_outbound_usb+0x1ec>
    231a:	47c0      	blx	r8
				current_start = 0;
    231c:	f8dd 8004 	ldr.w	r8, [sp, #4]
    2320:	e791      	b.n	2246 <grid_port_process_outbound_usb+0xd2>
    2322:	f04f 0800 	mov.w	r8, #0
    2326:	e78e      	b.n	2246 <grid_port_process_outbound_usb+0xd2>
		
		
					
		
		// Let's send the packet through USB
		cdcdf_acm_write(por->tx_double_buffer, length);
    2328:	9902      	ldr	r1, [sp, #8]
    232a:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    232e:	4b0a      	ldr	r3, [pc, #40]	; (2358 <grid_port_process_outbound_usb+0x1e4>)
    2330:	4798      	blx	r3
				
		
	}
	
	
}
    2332:	b053      	add	sp, #332	; 0x14c
    2334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2338:	00001c75 	.word	0x00001c75
    233c:	0000d0e7 	.word	0x0000d0e7
    2340:	00001ce7 	.word	0x00001ce7
    2344:	00001d71 	.word	0x00001d71
    2348:	00001d99 	.word	0x00001d99
    234c:	00004be5 	.word	0x00004be5
    2350:	200032d0 	.word	0x200032d0
    2354:	2aaaaaab 	.word	0x2aaaaaab
    2358:	0000b6ed 	.word	0x0000b6ed
    235c:	00004865 	.word	0x00004865
    2360:	0000bec5 	.word	0x0000bec5

00002364 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    2364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2368:	b0d1      	sub	sp, #324	; 0x144
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    236a:	f500 657d 	add.w	r5, r0, #4048	; 0xfd0
    236e:	4628      	mov	r0, r5
    2370:	4bad      	ldr	r3, [pc, #692]	; (2628 <grid_port_process_outbound_ui+0x2c4>)
    2372:	4798      	blx	r3
	
	if (!length){
    2374:	b910      	cbnz	r0, 237c <grid_port_process_outbound_ui+0x18>

		
	}
	
	
}
    2376:	b051      	add	sp, #324	; 0x144
    2378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    237c:	4606      	mov	r6, r0
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    237e:	f44f 7296 	mov.w	r2, #300	; 0x12c
    2382:	2100      	movs	r1, #0
    2384:	a805      	add	r0, sp, #20
    2386:	4ba9      	ldr	r3, [pc, #676]	; (262c <grid_port_process_outbound_ui+0x2c8>)
    2388:	4798      	blx	r3
		grid_buffer_read_init(&por->tx_buffer);
    238a:	4628      	mov	r0, r5
    238c:	4ba8      	ldr	r3, [pc, #672]	; (2630 <grid_port_process_outbound_ui+0x2cc>)
    238e:	4798      	blx	r3
    2390:	f10d 0413 	add.w	r4, sp, #19
    2394:	3e01      	subs	r6, #1
    2396:	fa1f f886 	uxth.w	r8, r6
    239a:	ab05      	add	r3, sp, #20
    239c:	eb03 0608 	add.w	r6, r3, r8
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    23a0:	4fa4      	ldr	r7, [pc, #656]	; (2634 <grid_port_process_outbound_ui+0x2d0>)
    23a2:	4628      	mov	r0, r5
    23a4:	47b8      	blx	r7
    23a6:	f804 0f01 	strb.w	r0, [r4, #1]!
		for (uint16_t i = 0; i<length; i++){
    23aa:	42b4      	cmp	r4, r6
    23ac:	d1f9      	bne.n	23a2 <grid_port_process_outbound_ui+0x3e>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    23ae:	4628      	mov	r0, r5
    23b0:	4ba1      	ldr	r3, [pc, #644]	; (2638 <grid_port_process_outbound_ui+0x2d4>)
    23b2:	4798      	blx	r3
		uint8_t error=0;
    23b4:	2500      	movs	r5, #0
    23b6:	f88d 5012 	strb.w	r5, [sp, #18]
		int8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    23ba:	ac05      	add	r4, sp, #20
    23bc:	f10d 0312 	add.w	r3, sp, #18
    23c0:	2202      	movs	r2, #2
    23c2:	2106      	movs	r1, #6
    23c4:	4620      	mov	r0, r4
    23c6:	4e9d      	ldr	r6, [pc, #628]	; (263c <grid_port_process_outbound_ui+0x2d8>)
    23c8:	47b0      	blx	r6
    23ca:	b2c3      	uxtb	r3, r0
    23cc:	9302      	str	r3, [sp, #8]
		int8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;
    23ce:	f10d 0312 	add.w	r3, sp, #18
    23d2:	2202      	movs	r2, #2
    23d4:	2108      	movs	r1, #8
    23d6:	4620      	mov	r0, r4
    23d8:	47b0      	blx	r6
    23da:	b2c3      	uxtb	r3, r0
    23dc:	9303      	str	r3, [sp, #12]
		uint8_t error_flag = 0;	
    23de:	f88d 5013 	strb.w	r5, [sp, #19]
    23e2:	4627      	mov	r7, r4
    23e4:	f108 0601 	add.w	r6, r8, #1
    23e8:	4426      	add	r6, r4
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    23ea:	f8df 928c 	ldr.w	r9, [pc, #652]	; 2678 <grid_port_process_outbound_ui+0x314>
    23ee:	e004      	b.n	23fa <grid_port_process_outbound_ui+0x96>
    23f0:	1be5      	subs	r5, r4, r7
    23f2:	b2ed      	uxtb	r5, r5
    23f4:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    23f6:	42b4      	cmp	r4, r6
    23f8:	d0bd      	beq.n	2376 <grid_port_process_outbound_ui+0x12>
			if (message[i] == GRID_CONST_STX){
    23fa:	7823      	ldrb	r3, [r4, #0]
    23fc:	2b02      	cmp	r3, #2
    23fe:	d0f7      	beq.n	23f0 <grid_port_process_outbound_ui+0x8c>
			else if (message[i] == GRID_CONST_ETX && current_start!=0){
    2400:	2b03      	cmp	r3, #3
    2402:	d1f7      	bne.n	23f4 <grid_port_process_outbound_ui+0x90>
    2404:	2d00      	cmp	r5, #0
    2406:	d0f5      	beq.n	23f4 <grid_port_process_outbound_ui+0x90>
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    2408:	46aa      	mov	sl, r5
    240a:	1c68      	adds	r0, r5, #1
    240c:	f10d 0213 	add.w	r2, sp, #19
    2410:	2103      	movs	r1, #3
    2412:	ab05      	add	r3, sp, #20
    2414:	4418      	add	r0, r3
    2416:	47c8      	blx	r9
    2418:	fa5f f880 	uxtb.w	r8, r0
				uint8_t msg_instr = grid_sys_read_hex_string_value(&message[current_start+GRID_INSTR_offset], GRID_INSTR_length, &error_flag);
    241c:	1d28      	adds	r0, r5, #4
    241e:	f10d 0213 	add.w	r2, sp, #19
    2422:	2101      	movs	r1, #1
    2424:	ab05      	add	r3, sp, #20
    2426:	4418      	add	r0, r3
    2428:	47c8      	blx	r9
    242a:	fa5f fb80 	uxtb.w	fp, r0
				if (msg_class == GRID_CLASS_BANKACTIVE_code){
    242e:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
    2432:	d010      	beq.n	2456 <grid_port_process_outbound_ui+0xf2>
				else if (msg_class == GRID_CLASS_BANKENABLED_code && msg_instr == GRID_INSTR_REP_code){
    2434:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
    2438:	d054      	beq.n	24e4 <grid_port_process_outbound_ui+0x180>
				else if (msg_class == GRID_CLASS_BANKCOLOR_code && msg_instr == GRID_INSTR_REP_code){
    243a:	f1b8 0f32 	cmp.w	r8, #50	; 0x32
    243e:	f000 8081 	beq.w	2544 <grid_port_process_outbound_ui+0x1e0>
				else if (msg_class == GRID_CLASS_LEDPHASE_code && msg_instr == GRID_INSTR_REP_code){
    2442:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    2446:	f040 80ea 	bne.w	261e <grid_port_process_outbound_ui+0x2ba>
    244a:	f1bb 0f0f 	cmp.w	fp, #15
    244e:	f000 80bb 	beq.w	25c8 <grid_port_process_outbound_ui+0x264>
				current_start = 0;
    2452:	2500      	movs	r5, #0
    2454:	e7ce      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKACTIVE_BANKNUMBER_offset], GRID_CLASS_BANKACTIVE_BANKNUMBER_length, &error_flag);
    2456:	ab50      	add	r3, sp, #320	; 0x140
    2458:	1958      	adds	r0, r3, r5
    245a:	f10d 0213 	add.w	r2, sp, #19
    245e:	2102      	movs	r1, #2
    2460:	f2a0 1027 	subw	r0, r0, #295	; 0x127
    2464:	47c8      	blx	r9
    2466:	4605      	mov	r5, r0
					if (msg_instr == GRID_INSTR_REP_code){ //SET BANK
    2468:	f1bb 0f0f 	cmp.w	fp, #15
    246c:	d004      	beq.n	2478 <grid_port_process_outbound_ui+0x114>
					else if (msg_instr == GRID_INSTR_REQ_code){ //GET BANK
    246e:	f1bb 0f0e 	cmp.w	fp, #14
    2472:	d02b      	beq.n	24cc <grid_port_process_outbound_ui+0x168>
				current_start = 0;
    2474:	2500      	movs	r5, #0
    2476:	e7bd      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
						if (grid_sys_get_bank(&grid_sys_state) == 255){
    2478:	4871      	ldr	r0, [pc, #452]	; (2640 <grid_port_process_outbound_ui+0x2dc>)
    247a:	4b72      	ldr	r3, [pc, #456]	; (2644 <grid_port_process_outbound_ui+0x2e0>)
    247c:	4798      	blx	r3
    247e:	28ff      	cmp	r0, #255	; 0xff
    2480:	d013      	beq.n	24aa <grid_port_process_outbound_ui+0x146>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKACTIVE_BANKNUMBER_offset], GRID_CLASS_BANKACTIVE_BANKNUMBER_length, &error_flag);
    2482:	b2ed      	uxtb	r5, r5
						grid_sys_set_bank(&grid_sys_state, banknumber);
    2484:	4629      	mov	r1, r5
    2486:	486e      	ldr	r0, [pc, #440]	; (2640 <grid_port_process_outbound_ui+0x2dc>)
    2488:	4b6f      	ldr	r3, [pc, #444]	; (2648 <grid_port_process_outbound_ui+0x2e4>)
    248a:	4798      	blx	r3
						grid_report_sys_set_payload_parameter(&grid_report_state, GRID_REPORT_INDEX_MAPMODE,GRID_CLASS_BANKACTIVE_BANKNUMBER_offset,GRID_CLASS_BANKACTIVE_BANKNUMBER_length, banknumber);
    248c:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 265c <grid_port_process_outbound_ui+0x2f8>
    2490:	9500      	str	r5, [sp, #0]
    2492:	2302      	movs	r3, #2
    2494:	2205      	movs	r2, #5
    2496:	2104      	movs	r1, #4
    2498:	4640      	mov	r0, r8
    249a:	4d6c      	ldr	r5, [pc, #432]	; (264c <grid_port_process_outbound_ui+0x2e8>)
    249c:	47a8      	blx	r5
						grid_report_sys_clear_changed_flag(&grid_report_state, GRID_REPORT_INDEX_CFG_REQUEST);
    249e:	2105      	movs	r1, #5
    24a0:	4640      	mov	r0, r8
    24a2:	4b6b      	ldr	r3, [pc, #428]	; (2650 <grid_port_process_outbound_ui+0x2ec>)
    24a4:	4798      	blx	r3
				current_start = 0;
    24a6:	2500      	movs	r5, #0
    24a8:	e7a4      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
							uint8_t event_index = grid_ui_event_find(&grid_core_state.element[0], GRID_UI_EVENT_HEARTBEAT);
    24aa:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 267c <grid_port_process_outbound_ui+0x318>
    24ae:	f8d8 0004 	ldr.w	r0, [r8, #4]
    24b2:	2101      	movs	r1, #1
    24b4:	4b67      	ldr	r3, [pc, #412]	; (2654 <grid_port_process_outbound_ui+0x2f0>)
    24b6:	4798      	blx	r3
							grid_ui_event_trigger(&grid_core_state.element[0].event_list[event_index]);
    24b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    24bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    24c0:	68db      	ldr	r3, [r3, #12]
    24c2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    24c6:	4b64      	ldr	r3, [pc, #400]	; (2658 <grid_port_process_outbound_ui+0x2f4>)
    24c8:	4798      	blx	r3
    24ca:	e7da      	b.n	2482 <grid_port_process_outbound_ui+0x11e>
						if (grid_sys_get_bank(&grid_sys_state) != 255){
    24cc:	485c      	ldr	r0, [pc, #368]	; (2640 <grid_port_process_outbound_ui+0x2dc>)
    24ce:	4b5d      	ldr	r3, [pc, #372]	; (2644 <grid_port_process_outbound_ui+0x2e0>)
    24d0:	4798      	blx	r3
    24d2:	28ff      	cmp	r0, #255	; 0xff
    24d4:	f000 80a1 	beq.w	261a <grid_port_process_outbound_ui+0x2b6>
							grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_MAPMODE);
    24d8:	2104      	movs	r1, #4
    24da:	4860      	ldr	r0, [pc, #384]	; (265c <grid_port_process_outbound_ui+0x2f8>)
    24dc:	4b60      	ldr	r3, [pc, #384]	; (2660 <grid_port_process_outbound_ui+0x2fc>)
    24de:	4798      	blx	r3
				current_start = 0;
    24e0:	2500      	movs	r5, #0
    24e2:	e787      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
				else if (msg_class == GRID_CLASS_BANKENABLED_code && msg_instr == GRID_INSTR_REP_code){
    24e4:	f1bb 0f0f 	cmp.w	fp, #15
    24e8:	d001      	beq.n	24ee <grid_port_process_outbound_ui+0x18a>
				current_start = 0;
    24ea:	2500      	movs	r5, #0
    24ec:	e782      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKENABLED_BANKNUMBER_offset], GRID_CLASS_BANKENABLED_BANKNUMBER_length, &error_flag);
    24ee:	1d68      	adds	r0, r5, #5
    24f0:	f10d 0213 	add.w	r2, sp, #19
    24f4:	2102      	movs	r1, #2
    24f6:	ab05      	add	r3, sp, #20
    24f8:	4418      	add	r0, r3
    24fa:	47c8      	blx	r9
    24fc:	fa5f f880 	uxtb.w	r8, r0
					uint8_t isenabled  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKENABLED_ISENABLED_offset], GRID_CLASS_BANKENABLED_ISENABLED_length, &error_flag);
    2500:	1de8      	adds	r0, r5, #7
    2502:	f10d 0213 	add.w	r2, sp, #19
    2506:	2102      	movs	r1, #2
    2508:	ab05      	add	r3, sp, #20
    250a:	4418      	add	r0, r3
    250c:	47c8      	blx	r9
    250e:	b2c5      	uxtb	r5, r0
					if (isenabled == 1){
    2510:	2d01      	cmp	r5, #1
    2512:	d002      	beq.n	251a <grid_port_process_outbound_ui+0x1b6>
					}else if (isenabled == 0){	
    2514:	b13d      	cbz	r5, 2526 <grid_port_process_outbound_ui+0x1c2>
				current_start = 0;
    2516:	2500      	movs	r5, #0
    2518:	e76c      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
						grid_sys_bank_enable(&grid_sys_state, banknumber);
    251a:	4641      	mov	r1, r8
    251c:	4848      	ldr	r0, [pc, #288]	; (2640 <grid_port_process_outbound_ui+0x2dc>)
    251e:	4b51      	ldr	r3, [pc, #324]	; (2664 <grid_port_process_outbound_ui+0x300>)
    2520:	4798      	blx	r3
				current_start = 0;
    2522:	2500      	movs	r5, #0
    2524:	e766      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
						if (grid_sys_get_bank(&grid_sys_state) == banknumber){
    2526:	4846      	ldr	r0, [pc, #280]	; (2640 <grid_port_process_outbound_ui+0x2dc>)
    2528:	4b46      	ldr	r3, [pc, #280]	; (2644 <grid_port_process_outbound_ui+0x2e0>)
    252a:	4798      	blx	r3
    252c:	4580      	cmp	r8, r0
    252e:	d004      	beq.n	253a <grid_port_process_outbound_ui+0x1d6>
						grid_sys_bank_disable(&grid_sys_state, banknumber);
    2530:	4641      	mov	r1, r8
    2532:	4843      	ldr	r0, [pc, #268]	; (2640 <grid_port_process_outbound_ui+0x2dc>)
    2534:	4b4c      	ldr	r3, [pc, #304]	; (2668 <grid_port_process_outbound_ui+0x304>)
    2536:	4798      	blx	r3
    2538:	e75c      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
							grid_sys_set_bank(&grid_sys_state, 255);
    253a:	21ff      	movs	r1, #255	; 0xff
    253c:	4840      	ldr	r0, [pc, #256]	; (2640 <grid_port_process_outbound_ui+0x2dc>)
    253e:	4b42      	ldr	r3, [pc, #264]	; (2648 <grid_port_process_outbound_ui+0x2e4>)
    2540:	4798      	blx	r3
    2542:	e7f5      	b.n	2530 <grid_port_process_outbound_ui+0x1cc>
				else if (msg_class == GRID_CLASS_BANKCOLOR_code && msg_instr == GRID_INSTR_REP_code){
    2544:	f1bb 0f0f 	cmp.w	fp, #15
    2548:	d001      	beq.n	254e <grid_port_process_outbound_ui+0x1ea>
				current_start = 0;
    254a:	2500      	movs	r5, #0
    254c:	e752      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_BANKNUMBER_offset], GRID_CLASS_BANKCOLOR_BANKNUMBER_length, &error_flag);
    254e:	1d68      	adds	r0, r5, #5
    2550:	f10d 0213 	add.w	r2, sp, #19
    2554:	2102      	movs	r1, #2
    2556:	ab05      	add	r3, sp, #20
    2558:	4418      	add	r0, r3
    255a:	47c8      	blx	r9
    255c:	fa5f f880 	uxtb.w	r8, r0
					uint8_t red		   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_RED_offset], GRID_CLASS_BANKCOLOR_RED_length, &error_flag);
    2560:	1de8      	adds	r0, r5, #7
    2562:	f10d 0213 	add.w	r2, sp, #19
    2566:	2102      	movs	r1, #2
    2568:	ab05      	add	r3, sp, #20
    256a:	4418      	add	r0, r3
    256c:	47c8      	blx	r9
    256e:	4605      	mov	r5, r0
					uint8_t green	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_GREEN_offset], GRID_CLASS_BANKCOLOR_GREEN_length, &error_flag);
    2570:	f10a 0009 	add.w	r0, sl, #9
    2574:	f10d 0213 	add.w	r2, sp, #19
    2578:	2102      	movs	r1, #2
    257a:	ab05      	add	r3, sp, #20
    257c:	4418      	add	r0, r3
    257e:	47c8      	blx	r9
    2580:	4683      	mov	fp, r0
					uint8_t blue	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_BLUE_offset], GRID_CLASS_BANKCOLOR_BLUE_length, &error_flag);
    2582:	f10a 000b 	add.w	r0, sl, #11
    2586:	f10d 0213 	add.w	r2, sp, #19
    258a:	2102      	movs	r1, #2
    258c:	ab05      	add	r3, sp, #20
    258e:	4418      	add	r0, r3
    2590:	47c8      	blx	r9
					grid_sys_bank_set_color(&grid_sys_state, banknumber, (red<<16) + (green<<8) + (blue<<0) );
    2592:	042a      	lsls	r2, r5, #16
    2594:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    2598:	ea4f 230b 	mov.w	r3, fp, lsl #8
    259c:	b29b      	uxth	r3, r3
    259e:	431a      	orrs	r2, r3
    25a0:	4d27      	ldr	r5, [pc, #156]	; (2640 <grid_port_process_outbound_ui+0x2dc>)
    25a2:	fa52 f280 	uxtab	r2, r2, r0
    25a6:	4641      	mov	r1, r8
    25a8:	4628      	mov	r0, r5
    25aa:	4b30      	ldr	r3, [pc, #192]	; (266c <grid_port_process_outbound_ui+0x308>)
    25ac:	4798      	blx	r3
					if (grid_sys_get_bank(&grid_sys_state) == banknumber){
    25ae:	4628      	mov	r0, r5
    25b0:	4b24      	ldr	r3, [pc, #144]	; (2644 <grid_port_process_outbound_ui+0x2e0>)
    25b2:	4798      	blx	r3
    25b4:	4580      	cmp	r8, r0
    25b6:	d001      	beq.n	25bc <grid_port_process_outbound_ui+0x258>
				current_start = 0;
    25b8:	2500      	movs	r5, #0
    25ba:	e71b      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
						grid_sys_set_bank(&grid_sys_state, banknumber);
    25bc:	4641      	mov	r1, r8
    25be:	4628      	mov	r0, r5
    25c0:	4b21      	ldr	r3, [pc, #132]	; (2648 <grid_port_process_outbound_ui+0x2e4>)
    25c2:	4798      	blx	r3
				current_start = 0;
    25c4:	2500      	movs	r5, #0
    25c6:	e715      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
					if (dx == 0 && dy == 0){
    25c8:	9b02      	ldr	r3, [sp, #8]
    25ca:	2b7f      	cmp	r3, #127	; 0x7f
    25cc:	d129      	bne.n	2622 <grid_port_process_outbound_ui+0x2be>
    25ce:	9b03      	ldr	r3, [sp, #12]
    25d0:	2b7f      	cmp	r3, #127	; 0x7f
    25d2:	d001      	beq.n	25d8 <grid_port_process_outbound_ui+0x274>
				current_start = 0;
    25d4:	2500      	movs	r5, #0
    25d6:	e70d      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
						uint8_t led_layer = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_LAYERNUMBER_offset], GRID_CLASS_LEDPHASE_LAYERNUMBER_length, &error_flag);
    25d8:	1d68      	adds	r0, r5, #5
    25da:	f10d 0213 	add.w	r2, sp, #19
    25de:	2102      	movs	r1, #2
    25e0:	ab05      	add	r3, sp, #20
    25e2:	4418      	add	r0, r3
    25e4:	47c8      	blx	r9
    25e6:	4680      	mov	r8, r0
						uint8_t led_number  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_LEDNUMBER_offset], GRID_CLASS_LEDPHASE_LEDNUMBER_length, &error_flag);
    25e8:	1de8      	adds	r0, r5, #7
    25ea:	f10d 0213 	add.w	r2, sp, #19
    25ee:	2102      	movs	r1, #2
    25f0:	ab05      	add	r3, sp, #20
    25f2:	4418      	add	r0, r3
    25f4:	47c8      	blx	r9
    25f6:	4605      	mov	r5, r0
						uint8_t led_value  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_PHASE_offset], GRID_CLASS_LEDPHASE_PHASE_length, &error_flag);						
    25f8:	f10a 0009 	add.w	r0, sl, #9
    25fc:	f10d 0213 	add.w	r2, sp, #19
    2600:	2102      	movs	r1, #2
    2602:	ab05      	add	r3, sp, #20
    2604:	4418      	add	r0, r3
    2606:	47c8      	blx	r9
						grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);		
    2608:	b2c3      	uxtb	r3, r0
    260a:	fa5f f288 	uxtb.w	r2, r8
    260e:	b2e9      	uxtb	r1, r5
    2610:	4817      	ldr	r0, [pc, #92]	; (2670 <grid_port_process_outbound_ui+0x30c>)
    2612:	4d18      	ldr	r5, [pc, #96]	; (2674 <grid_port_process_outbound_ui+0x310>)
    2614:	47a8      	blx	r5
				current_start = 0;
    2616:	2500      	movs	r5, #0
    2618:	e6ec      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
    261a:	2500      	movs	r5, #0
    261c:	e6ea      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
    261e:	2500      	movs	r5, #0
    2620:	e6e8      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
    2622:	2500      	movs	r5, #0
    2624:	e6e6      	b.n	23f4 <grid_port_process_outbound_ui+0x90>
    2626:	bf00      	nop
    2628:	00001c75 	.word	0x00001c75
    262c:	0000d0e7 	.word	0x0000d0e7
    2630:	00001ce7 	.word	0x00001ce7
    2634:	00001d71 	.word	0x00001d71
    2638:	00001d99 	.word	0x00001d99
    263c:	00004be5 	.word	0x00004be5
    2640:	200032d0 	.word	0x200032d0
    2644:	0000475b 	.word	0x0000475b
    2648:	000049cd 	.word	0x000049cd
    264c:	00005219 	.word	0x00005219
    2650:	00005235 	.word	0x00005235
    2654:	00004e51 	.word	0x00004e51
    2658:	00004e79 	.word	0x00004e79
    265c:	200078c4 	.word	0x200078c4
    2660:	0000520f 	.word	0x0000520f
    2664:	00004725 	.word	0x00004725
    2668:	00004735 	.word	0x00004735
    266c:	00004745 	.word	0x00004745
    2670:	20007944 	.word	0x20007944
    2674:	0000289f 	.word	0x0000289f
    2678:	00004865 	.word	0x00004865
    267c:	200078d0 	.word	0x200078d0

00002680 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    2680:	8a03      	ldrh	r3, [r0, #16]
    2682:	b10b      	cbz	r3, 2688 <grid_port_process_outbound_usart+0x8>
			return 1;
		}
		
	}
	
	return 0;
    2684:	2000      	movs	r0, #0
    2686:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    2688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    268c:	4680      	mov	r8, r0
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    268e:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    2692:	4630      	mov	r0, r6
    2694:	4b13      	ldr	r3, [pc, #76]	; (26e4 <grid_port_process_outbound_usart+0x64>)
    2696:	4798      	blx	r3
		if (!packet_size){
    2698:	4605      	mov	r5, r0
    269a:	b910      	cbnz	r0, 26a2 <grid_port_process_outbound_usart+0x22>
			return 0;
    269c:	2000      	movs	r0, #0
}
    269e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_buffer_read_init(&por->tx_buffer);
    26a2:	4630      	mov	r0, r6
    26a4:	4b10      	ldr	r3, [pc, #64]	; (26e8 <grid_port_process_outbound_usart+0x68>)
    26a6:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    26a8:	f8a8 5010 	strh.w	r5, [r8, #16]
    26ac:	f108 042f 	add.w	r4, r8, #47	; 0x2f
    26b0:	3d01      	subs	r5, #1
    26b2:	b2ad      	uxth	r5, r5
    26b4:	3530      	adds	r5, #48	; 0x30
    26b6:	4445      	add	r5, r8
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    26b8:	4f0c      	ldr	r7, [pc, #48]	; (26ec <grid_port_process_outbound_usart+0x6c>)
    26ba:	4630      	mov	r0, r6
    26bc:	47b8      	blx	r7
				por->tx_double_buffer[i] = character;
    26be:	f804 0f01 	strb.w	r0, [r4, #1]!
			for (uint16_t i = 0; i<packet_size; i++){
    26c2:	42ac      	cmp	r4, r5
    26c4:	d1f9      	bne.n	26ba <grid_port_process_outbound_usart+0x3a>
			grid_buffer_read_acknowledge(&por->tx_buffer);
    26c6:	4630      	mov	r0, r6
    26c8:	4b09      	ldr	r3, [pc, #36]	; (26f0 <grid_port_process_outbound_usart+0x70>)
    26ca:	4798      	blx	r3
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    26cc:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    26d0:	f108 0130 	add.w	r1, r8, #48	; 0x30
    26d4:	f8d8 0008 	ldr.w	r0, [r8, #8]
    26d8:	4b06      	ldr	r3, [pc, #24]	; (26f4 <grid_port_process_outbound_usart+0x74>)
    26da:	4798      	blx	r3
			return 1;
    26dc:	2001      	movs	r0, #1
    26de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26e2:	bf00      	nop
    26e4:	00001c75 	.word	0x00001c75
    26e8:	00001ce7 	.word	0x00001ce7
    26ec:	00001d71 	.word	0x00001d71
    26f0:	00001d99 	.word	0x00001d99
    26f4:	00005ed9 	.word	0x00005ed9

000026f8 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    26f8:	2201      	movs	r2, #1
    26fa:	4b01      	ldr	r3, [pc, #4]	; (2700 <grid_led_hardware_transfer_complete_cb+0x8>)
    26fc:	701a      	strb	r2, [r3, #0]
    26fe:	4770      	bx	lr
    2700:	200012a0 	.word	0x200012a0

00002704 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint16_t led_r, uint16_t led_g, uint16_t led_b){
    2704:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    2706:	7844      	ldrb	r4, [r0, #1]
    2708:	428c      	cmp	r4, r1
    270a:	d802      	bhi.n	2712 <grid_led_set_color+0xe>
		return -1;		
    270c:	20ff      	movs	r0, #255	; 0xff
}
    270e:	bc30      	pop	{r4, r5}
    2710:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    2712:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2716:	0089      	lsls	r1, r1, #2
    2718:	4c0d      	ldr	r4, [pc, #52]	; (2750 <grid_led_set_color+0x4c>)
    271a:	2bff      	cmp	r3, #255	; 0xff
    271c:	bf28      	it	cs
    271e:	23ff      	movcs	r3, #255	; 0xff
    2720:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    2724:	68c3      	ldr	r3, [r0, #12]
    2726:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    2728:	2aff      	cmp	r2, #255	; 0xff
    272a:	bf28      	it	cs
    272c:	22ff      	movcs	r2, #255	; 0xff
    272e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    2732:	68c3      	ldr	r3, [r0, #12]
    2734:	440b      	add	r3, r1
    2736:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    2738:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    273c:	2bff      	cmp	r3, #255	; 0xff
    273e:	bf28      	it	cs
    2740:	23ff      	movcs	r3, #255	; 0xff
    2742:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    2746:	68c3      	ldr	r3, [r0, #12]
    2748:	4419      	add	r1, r3
    274a:	608a      	str	r2, [r1, #8]
		return 0;
    274c:	2000      	movs	r0, #0
    274e:	e7de      	b.n	270e <grid_led_set_color+0xa>
    2750:	20003374 	.word	0x20003374

00002754 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    2754:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    2756:	4c06      	ldr	r4, [pc, #24]	; (2770 <grid_led_hardware_init+0x1c>)
    2758:	f100 0114 	add.w	r1, r0, #20
    275c:	4620      	mov	r0, r4
    275e:	4b05      	ldr	r3, [pc, #20]	; (2774 <grid_led_hardware_init+0x20>)
    2760:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    2762:	4a05      	ldr	r2, [pc, #20]	; (2778 <grid_led_hardware_init+0x24>)
    2764:	2100      	movs	r1, #0
    2766:	4620      	mov	r0, r4
    2768:	4b04      	ldr	r3, [pc, #16]	; (277c <grid_led_hardware_init+0x28>)
    276a:	4798      	blx	r3
    276c:	bd10      	pop	{r4, pc}
    276e:	bf00      	nop
    2770:	20001120 	.word	0x20001120
    2774:	00006431 	.word	0x00006431
    2778:	000026f9 	.word	0x000026f9
    277c:	00006401 	.word	0x00006401

00002780 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    2780:	7840      	ldrb	r0, [r0, #1]
    2782:	4770      	bx	lr

00002784 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    2784:	7843      	ldrb	r3, [r0, #1]
    2786:	b113      	cbz	r3, 278e <grid_led_tick+0xa>
void grid_led_tick(struct grid_led_model* mod){
    2788:	b430      	push	{r4, r5}
	for (uint8_t j=0; j<mod->led_number; j++){
    278a:	2400      	movs	r4, #0
    278c:	e005      	b.n	279a <grid_led_tick+0x16>
    278e:	4770      	bx	lr
    2790:	3401      	adds	r4, #1
    2792:	b2e4      	uxtb	r4, r4
    2794:	7843      	ldrb	r3, [r0, #1]
    2796:	42a3      	cmp	r3, r4
    2798:	d911      	bls.n	27be <grid_led_tick+0x3a>
void grid_led_tick(struct grid_led_model* mod){
    279a:	2100      	movs	r1, #0
					
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    279c:	7843      	ldrb	r3, [r0, #1]
    279e:	fb01 4303 	mla	r3, r1, r3, r4
    27a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    27a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    27aa:	6902      	ldr	r2, [r0, #16]
    27ac:	4413      	add	r3, r2
    27ae:	7ada      	ldrb	r2, [r3, #11]
    27b0:	7b1d      	ldrb	r5, [r3, #12]
    27b2:	442a      	add	r2, r5
    27b4:	72da      	strb	r2, [r3, #11]
    27b6:	3101      	adds	r1, #1
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    27b8:	2903      	cmp	r1, #3
    27ba:	d1ef      	bne.n	279c <grid_led_tick+0x18>
    27bc:	e7e8      	b.n	2790 <grid_led_tick+0xc>
		}	
	}
	/** END */
	
}
    27be:	bc30      	pop	{r4, r5}
    27c0:	4770      	bx	lr

000027c2 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    27c2:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    27c4:	7844      	ldrb	r4, [r0, #1]
    27c6:	fb02 1404 	mla	r4, r2, r4, r1
    27ca:	6905      	ldr	r5, [r0, #16]
    27cc:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    27d0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    27d4:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    27d6:	7843      	ldrb	r3, [r0, #1]
    27d8:	fb02 1303 	mla	r3, r2, r3, r1
    27dc:	6904      	ldr	r4, [r0, #16]
    27de:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    27e2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    27e6:	4423      	add	r3, r4
    27e8:	f89d 400c 	ldrb.w	r4, [sp, #12]
    27ec:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    27ee:	7843      	ldrb	r3, [r0, #1]
    27f0:	fb02 1203 	mla	r2, r2, r3, r1
    27f4:	6903      	ldr	r3, [r0, #16]
    27f6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    27fa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    27fe:	441a      	add	r2, r3
    2800:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2804:	7093      	strb	r3, [r2, #2]
}
    2806:	bc70      	pop	{r4, r5, r6}
    2808:	4770      	bx	lr

0000280a <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    280a:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    280c:	7844      	ldrb	r4, [r0, #1]
    280e:	fb02 1404 	mla	r4, r2, r4, r1
    2812:	6905      	ldr	r5, [r0, #16]
    2814:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2818:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    281c:	442c      	add	r4, r5
    281e:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    2820:	7843      	ldrb	r3, [r0, #1]
    2822:	fb02 1303 	mla	r3, r2, r3, r1
    2826:	6904      	ldr	r4, [r0, #16]
    2828:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    282c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2830:	4423      	add	r3, r4
    2832:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2836:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    2838:	7843      	ldrb	r3, [r0, #1]
    283a:	fb02 1203 	mla	r2, r2, r3, r1
    283e:	6903      	ldr	r3, [r0, #16]
    2840:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2844:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2848:	441a      	add	r2, r3
    284a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    284e:	7153      	strb	r3, [r2, #5]
}
    2850:	bc70      	pop	{r4, r5, r6}
    2852:	4770      	bx	lr

00002854 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2854:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    2856:	7844      	ldrb	r4, [r0, #1]
    2858:	fb02 1404 	mla	r4, r2, r4, r1
    285c:	6905      	ldr	r5, [r0, #16]
    285e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2862:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2866:	442c      	add	r4, r5
    2868:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    286a:	7843      	ldrb	r3, [r0, #1]
    286c:	fb02 1303 	mla	r3, r2, r3, r1
    2870:	6904      	ldr	r4, [r0, #16]
    2872:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2876:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    287a:	4423      	add	r3, r4
    287c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2880:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    2882:	7843      	ldrb	r3, [r0, #1]
    2884:	fb02 1203 	mla	r2, r2, r3, r1
    2888:	6903      	ldr	r3, [r0, #16]
    288a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    288e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2892:	441a      	add	r2, r3
    2894:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2898:	7213      	strb	r3, [r2, #8]
}
    289a:	bc70      	pop	{r4, r5, r6}
    289c:	4770      	bx	lr

0000289e <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    289e:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    28a0:	7844      	ldrb	r4, [r0, #1]
    28a2:	fb02 1204 	mla	r2, r2, r4, r1
    28a6:	6901      	ldr	r1, [r0, #16]
    28a8:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    28ac:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    28b0:	440a      	add	r2, r1
    28b2:	72d3      	strb	r3, [r2, #11]
}
    28b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    28b8:	4770      	bx	lr

000028ba <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    28ba:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    28bc:	7844      	ldrb	r4, [r0, #1]
    28be:	fb02 1204 	mla	r2, r2, r4, r1
    28c2:	6901      	ldr	r1, [r0, #16]
    28c4:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    28c8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    28cc:	440a      	add	r2, r1
    28ce:	7313      	strb	r3, [r2, #12]
}
    28d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    28d4:	4770      	bx	lr
	...

000028d8 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    28d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28dc:	b083      	sub	sp, #12
    28de:	4605      	mov	r5, r0
	mod->led_number = length;
    28e0:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    28e2:	b2cc      	uxtb	r4, r1
    28e4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    28e8:	0080      	lsls	r0, r0, #2
    28ea:	3090      	adds	r0, #144	; 0x90
    28ec:	6068      	str	r0, [r5, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    28ee:	4f52      	ldr	r7, [pc, #328]	; (2a38 <grid_led_buffer_init+0x160>)
    28f0:	47b8      	blx	r7
    28f2:	4606      	mov	r6, r0
    28f4:	60a8      	str	r0, [r5, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    28f6:	f100 0390 	add.w	r3, r0, #144	; 0x90
    28fa:	60eb      	str	r3, [r5, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    28fc:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2900:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
    2904:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    2906:	2e00      	cmp	r6, #0
    2908:	f000 8094 	beq.w	2a34 <grid_led_buffer_init+0x15c>
    290c:	2800      	cmp	r0, #0
    290e:	f000 8091 	beq.w	2a34 <grid_led_buffer_init+0x15c>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    2912:	6128      	str	r0, [r5, #16]
    2914:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    2916:	4619      	mov	r1, r3
    2918:	68aa      	ldr	r2, [r5, #8]
    291a:	54d1      	strb	r1, [r2, r3]
    291c:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    291e:	2b90      	cmp	r3, #144	; 0x90
    2920:	d1fa      	bne.n	2918 <grid_led_buffer_init+0x40>
	for (uint32_t i = 0; i<mod->led_number; i++){
    2922:	786b      	ldrb	r3, [r5, #1]
    2924:	2b00      	cmp	r3, #0
    2926:	f000 8082 	beq.w	2a2e <grid_led_buffer_init+0x156>
    292a:	2400      	movs	r4, #0
		grid_led_set_color(mod,i,0,0,0);
    292c:	4626      	mov	r6, r4
    292e:	4f43      	ldr	r7, [pc, #268]	; (2a3c <grid_led_buffer_init+0x164>)
    2930:	9600      	str	r6, [sp, #0]
    2932:	4633      	mov	r3, r6
    2934:	4632      	mov	r2, r6
    2936:	4621      	mov	r1, r4
    2938:	4628      	mov	r0, r5
    293a:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    293c:	3401      	adds	r4, #1
    293e:	786b      	ldrb	r3, [r5, #1]
    2940:	42a3      	cmp	r3, r4
    2942:	d8f5      	bhi.n	2930 <grid_led_buffer_init+0x58>
	for(uint8_t i = 0; i<mod->led_number; i++){
    2944:	2b00      	cmp	r3, #0
    2946:	d072      	beq.n	2a2e <grid_led_buffer_init+0x156>
    2948:	f04f 0b00 	mov.w	fp, #0
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    294c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 2a48 <grid_led_buffer_init+0x170>
    2950:	2400      	movs	r4, #0
    2952:	9401      	str	r4, [sp, #4]
    2954:	9400      	str	r4, [sp, #0]
    2956:	4623      	mov	r3, r4
    2958:	2201      	movs	r2, #1
    295a:	4659      	mov	r1, fp
    295c:	4628      	mov	r0, r5
    295e:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    2960:	9401      	str	r4, [sp, #4]
    2962:	237f      	movs	r3, #127	; 0x7f
    2964:	9300      	str	r3, [sp, #0]
    2966:	4623      	mov	r3, r4
    2968:	2201      	movs	r2, #1
    296a:	4659      	mov	r1, fp
    296c:	4628      	mov	r0, r5
    296e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 2a4c <grid_led_buffer_init+0x174>
    2972:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    2974:	9401      	str	r4, [sp, #4]
    2976:	23ff      	movs	r3, #255	; 0xff
    2978:	9300      	str	r3, [sp, #0]
    297a:	4623      	mov	r3, r4
    297c:	2201      	movs	r2, #1
    297e:	4659      	mov	r1, fp
    2980:	4628      	mov	r0, r5
    2982:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 2a50 <grid_led_buffer_init+0x178>
    2986:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    2988:	4623      	mov	r3, r4
    298a:	2201      	movs	r2, #1
    298c:	4659      	mov	r1, fp
    298e:	4628      	mov	r0, r5
    2990:	4f2b      	ldr	r7, [pc, #172]	; (2a40 <grid_led_buffer_init+0x168>)
    2992:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    2994:	4623      	mov	r3, r4
    2996:	2201      	movs	r2, #1
    2998:	4659      	mov	r1, fp
    299a:	4628      	mov	r0, r5
    299c:	4e29      	ldr	r6, [pc, #164]	; (2a44 <grid_led_buffer_init+0x16c>)
    299e:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x00, 0x00);
    29a0:	9401      	str	r4, [sp, #4]
    29a2:	9400      	str	r4, [sp, #0]
    29a4:	4623      	mov	r3, r4
    29a6:	2202      	movs	r2, #2
    29a8:	4659      	mov	r1, fp
    29aa:	4628      	mov	r0, r5
    29ac:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x7F, 0x00);
    29ae:	9401      	str	r4, [sp, #4]
    29b0:	237f      	movs	r3, #127	; 0x7f
    29b2:	9300      	str	r3, [sp, #0]
    29b4:	4623      	mov	r3, r4
    29b6:	2202      	movs	r2, #2
    29b8:	4659      	mov	r1, fp
    29ba:	4628      	mov	r0, r5
    29bc:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0xFF, 0x00);
    29be:	9401      	str	r4, [sp, #4]
    29c0:	23ff      	movs	r3, #255	; 0xff
    29c2:	9300      	str	r3, [sp, #0]
    29c4:	4623      	mov	r3, r4
    29c6:	2202      	movs	r2, #2
    29c8:	4659      	mov	r1, fp
    29ca:	4628      	mov	r0, r5
    29cc:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_B, 0);
    29ce:	4623      	mov	r3, r4
    29d0:	2202      	movs	r2, #2
    29d2:	4659      	mov	r1, fp
    29d4:	4628      	mov	r0, r5
    29d6:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_B, 0);
    29d8:	4623      	mov	r3, r4
    29da:	2202      	movs	r2, #2
    29dc:	4659      	mov	r1, fp
    29de:	4628      	mov	r0, r5
    29e0:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    29e2:	9401      	str	r4, [sp, #4]
    29e4:	9400      	str	r4, [sp, #0]
    29e6:	4623      	mov	r3, r4
    29e8:	4622      	mov	r2, r4
    29ea:	4659      	mov	r1, fp
    29ec:	4628      	mov	r0, r5
    29ee:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    29f0:	9401      	str	r4, [sp, #4]
    29f2:	9400      	str	r4, [sp, #0]
    29f4:	4623      	mov	r3, r4
    29f6:	4622      	mov	r2, r4
    29f8:	4659      	mov	r1, fp
    29fa:	4628      	mov	r0, r5
    29fc:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    29fe:	9401      	str	r4, [sp, #4]
    2a00:	9400      	str	r4, [sp, #0]
    2a02:	4623      	mov	r3, r4
    2a04:	4622      	mov	r2, r4
    2a06:	4659      	mov	r1, fp
    2a08:	4628      	mov	r0, r5
    2a0a:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_ALERT, 0);
    2a0c:	4623      	mov	r3, r4
    2a0e:	4622      	mov	r2, r4
    2a10:	4659      	mov	r1, fp
    2a12:	4628      	mov	r0, r5
    2a14:	47b8      	blx	r7
		grid_led_set_phase(mod, i, GRID_LED_LAYER_ALERT, 0);
    2a16:	4623      	mov	r3, r4
    2a18:	4622      	mov	r2, r4
    2a1a:	4659      	mov	r1, fp
    2a1c:	4628      	mov	r0, r5
    2a1e:	47b0      	blx	r6
	for(uint8_t i = 0; i<mod->led_number; i++){
    2a20:	f10b 0b01 	add.w	fp, fp, #1
    2a24:	fa5f fb8b 	uxtb.w	fp, fp
    2a28:	786b      	ldrb	r3, [r5, #1]
    2a2a:	455b      	cmp	r3, fp
    2a2c:	d890      	bhi.n	2950 <grid_led_buffer_init+0x78>
}
    2a2e:	b003      	add	sp, #12
    2a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a34:	e7fe      	b.n	2a34 <grid_led_buffer_init+0x15c>
    2a36:	bf00      	nop
    2a38:	0000d0c1 	.word	0x0000d0c1
    2a3c:	00002705 	.word	0x00002705
    2a40:	000028bb 	.word	0x000028bb
    2a44:	0000289f 	.word	0x0000289f
    2a48:	000027c3 	.word	0x000027c3
    2a4c:	0000280b 	.word	0x0000280b
    2a50:	00002855 	.word	0x00002855

00002a54 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    2a54:	b570      	push	{r4, r5, r6, lr}
    2a56:	4604      	mov	r4, r0
    2a58:	4e29      	ldr	r6, [pc, #164]	; (2b00 <grid_led_init+0xac>)
    2a5a:	2200      	movs	r2, #0
    2a5c:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2a5e:	f003 0001 	and.w	r0, r3, #1
    2a62:	2800      	cmp	r0, #0
    2a64:	bf14      	ite	ne
    2a66:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    2a6a:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2a6e:	f3c3 0540 	ubfx	r5, r3, #1, #1
    2a72:	2d00      	cmp	r5, #0
    2a74:	bf14      	ite	ne
    2a76:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    2a7a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2a7e:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    2a80:	f3c3 0080 	ubfx	r0, r3, #2, #1
    2a84:	2800      	cmp	r0, #0
    2a86:	bf14      	ite	ne
    2a88:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    2a8c:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    2a90:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    2a92:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    2a96:	2d00      	cmp	r5, #0
    2a98:	bf14      	ite	ne
    2a9a:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    2a9e:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    2aa2:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    2aa4:	f3c3 1500 	ubfx	r5, r3, #4, #1
    2aa8:	2d00      	cmp	r5, #0
    2aaa:	bf14      	ite	ne
    2aac:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    2ab0:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    2ab4:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    2ab6:	f3c3 1040 	ubfx	r0, r3, #5, #1
    2aba:	2800      	cmp	r0, #0
    2abc:	bf14      	ite	ne
    2abe:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    2ac2:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    2ac6:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    2ac8:	f3c3 1080 	ubfx	r0, r3, #6, #1
    2acc:	2800      	cmp	r0, #0
    2ace:	bf14      	ite	ne
    2ad0:	200e      	movne	r0, #14
    2ad2:	2008      	moveq	r0, #8
    2ad4:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    2ad6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    2ada:	2b00      	cmp	r3, #0
    2adc:	bf14      	ite	ne
    2ade:	23e0      	movne	r3, #224	; 0xe0
    2ae0:	2380      	moveq	r3, #128	; 0x80
    2ae2:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    2ae4:	f846 3f04 	str.w	r3, [r6, #4]!
    2ae8:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    2aea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    2aee:	d1b5      	bne.n	2a5c <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    2af0:	4620      	mov	r0, r4
    2af2:	4b04      	ldr	r3, [pc, #16]	; (2b04 <grid_led_init+0xb0>)
    2af4:	4798      	blx	r3
	grid_led_hardware_init(mod);
    2af6:	4620      	mov	r0, r4
    2af8:	4b03      	ldr	r3, [pc, #12]	; (2b08 <grid_led_init+0xb4>)
    2afa:	4798      	blx	r3
}
    2afc:	2000      	movs	r0, #0
    2afe:	bd70      	pop	{r4, r5, r6, pc}
    2b00:	20003370 	.word	0x20003370
    2b04:	000028d9 	.word	0x000028d9
    2b08:	00002755 	.word	0x00002755

00002b0c <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    2b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b10:	b083      	sub	sp, #12
    2b12:	f890 c001 	ldrb.w	ip, [r0, #1]
    2b16:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    2b1a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    2b1e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    2b22:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    2b26:	6904      	ldr	r4, [r0, #16]
    2b28:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    2b2a:	2703      	movs	r7, #3
	uint32_t mix_b = 0;
    2b2c:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    2b30:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    2b32:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2b34:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2bbc <grid_led_render+0xb0>
    2b38:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2b3a:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2b3e:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2b40:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    2b44:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    2b48:	f894 a000 	ldrb.w	sl, [r4]
    2b4c:	f894 b003 	ldrb.w	fp, [r4, #3]
    2b50:	fb05 fb0b 	mul.w	fp, r5, fp
    2b54:	fb09 bb0a 	mla	fp, r9, sl, fp
    2b58:	f894 a006 	ldrb.w	sl, [r4, #6]
    2b5c:	fb06 ba0a 	mla	sl, r6, sl, fp
    2b60:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    2b62:	f894 a001 	ldrb.w	sl, [r4, #1]
    2b66:	f894 b004 	ldrb.w	fp, [r4, #4]
    2b6a:	fb05 fb0b 	mul.w	fp, r5, fp
    2b6e:	fb09 bb0a 	mla	fp, r9, sl, fp
    2b72:	f894 a007 	ldrb.w	sl, [r4, #7]
    2b76:	fb06 ba0a 	mla	sl, r6, sl, fp
    2b7a:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    2b7c:	f894 a002 	ldrb.w	sl, [r4, #2]
    2b80:	f894 b005 	ldrb.w	fp, [r4, #5]
    2b84:	fb05 f50b 	mul.w	r5, r5, fp
    2b88:	fb09 590a 	mla	r9, r9, sl, r5
    2b8c:	7a25      	ldrb	r5, [r4, #8]
    2b8e:	fb06 9505 	mla	r5, r6, r5, r9
    2b92:	44ae      	add	lr, r5
    2b94:	3f01      	subs	r7, #1
    2b96:	4464      	add	r4, ip
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    2b98:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    2b9c:	d1cc      	bne.n	2b38 <grid_led_render+0x2c>

	mix_r = (mix_r)/2/256;
	mix_g = (mix_g)/2/256;
	mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    2b9e:	f3ce 244f 	ubfx	r4, lr, #9, #16
    2ba2:	9400      	str	r4, [sp, #0]
    2ba4:	f3c3 234f 	ubfx	r3, r3, #9, #16
    2ba8:	f3c2 224f 	ubfx	r2, r2, #9, #16
    2bac:	4c02      	ldr	r4, [pc, #8]	; (2bb8 <grid_led_render+0xac>)
    2bae:	47a0      	blx	r4
	
}
    2bb0:	b003      	add	sp, #12
    2bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bb6:	bf00      	nop
    2bb8:	00002705 	.word	0x00002705
    2bbc:	20000000 	.word	0x20000000

00002bc0 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    2bc0:	7843      	ldrb	r3, [r0, #1]
    2bc2:	b15b      	cbz	r3, 2bdc <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    2bc4:	b570      	push	{r4, r5, r6, lr}
    2bc6:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    2bc8:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    2bca:	4e05      	ldr	r6, [pc, #20]	; (2be0 <grid_led_render_all+0x20>)
    2bcc:	4621      	mov	r1, r4
    2bce:	4628      	mov	r0, r5
    2bd0:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    2bd2:	3401      	adds	r4, #1
    2bd4:	786b      	ldrb	r3, [r5, #1]
    2bd6:	42a3      	cmp	r3, r4
    2bd8:	d8f8      	bhi.n	2bcc <grid_led_render_all+0xc>
    2bda:	bd70      	pop	{r4, r5, r6, pc}
    2bdc:	4770      	bx	lr
    2bde:	bf00      	nop
    2be0:	00002b0d 	.word	0x00002b0d

00002be4 <grid_led_hardware_start_transfer>:
			
	}
	
}

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    2be4:	b510      	push	{r4, lr}
    2be6:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2be8:	2200      	movs	r2, #0
    2bea:	4b05      	ldr	r3, [pc, #20]	; (2c00 <grid_led_hardware_start_transfer+0x1c>)
    2bec:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    2bee:	4805      	ldr	r0, [pc, #20]	; (2c04 <grid_led_hardware_start_transfer+0x20>)
    2bf0:	4b05      	ldr	r3, [pc, #20]	; (2c08 <grid_led_hardware_start_transfer+0x24>)
    2bf2:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2bf4:	88a2      	ldrh	r2, [r4, #4]
    2bf6:	68a1      	ldr	r1, [r4, #8]
    2bf8:	6960      	ldr	r0, [r4, #20]
    2bfa:	4b04      	ldr	r3, [pc, #16]	; (2c0c <grid_led_hardware_start_transfer+0x28>)
    2bfc:	4798      	blx	r3
    2bfe:	bd10      	pop	{r4, pc}
    2c00:	200012a0 	.word	0x200012a0
    2c04:	20001120 	.word	0x20001120
    2c08:	000063d9 	.word	0x000063d9
    2c0c:	00005ed9 	.word	0x00005ed9

00002c10 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    2c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c14:	b0a0      	sub	sp, #128	; 0x80
				

	grid_ui_model_init(&grid_core_state, 1);
    2c16:	4f4a      	ldr	r7, [pc, #296]	; (2d40 <grid_module_common_init+0x130>)
    2c18:	2101      	movs	r1, #1
    2c1a:	4638      	mov	r0, r7
    2c1c:	4b49      	ldr	r3, [pc, #292]	; (2d44 <grid_module_common_init+0x134>)
    2c1e:	4798      	blx	r3
	grid_ui_element_init(&grid_core_state.element[0], GRID_UI_ELEMENT_SYSTEM);
    2c20:	6878      	ldr	r0, [r7, #4]
    2c22:	2100      	movs	r1, #0
    2c24:	4b48      	ldr	r3, [pc, #288]	; (2d48 <grid_module_common_init+0x138>)
    2c26:	4798      	blx	r3
	
	uint8_t payload_template[100] = {0};
    2c28:	2264      	movs	r2, #100	; 0x64
    2c2a:	2100      	movs	r1, #0
    2c2c:	a807      	add	r0, sp, #28
    2c2e:	4b47      	ldr	r3, [pc, #284]	; (2d4c <grid_module_common_init+0x13c>)
    2c30:	4798      	blx	r3
	uint8_t payload_length = 0;

	struct grid_ui_action_parameter parameter_list[3];
	uint8_t parameter_list_length = 0;
	
	sprintf(payload_template, GRID_CLASS_HEARTBEAT_frame);
    2c32:	2303      	movs	r3, #3
    2c34:	9300      	str	r3, [sp, #0]
    2c36:	2310      	movs	r3, #16
    2c38:	2202      	movs	r2, #2
    2c3a:	4945      	ldr	r1, [pc, #276]	; (2d50 <grid_module_common_init+0x140>)
    2c3c:	a807      	add	r0, sp, #28
    2c3e:	4c45      	ldr	r4, [pc, #276]	; (2d54 <grid_module_common_init+0x144>)
    2c40:	47a0      	blx	r4
	uint8_t error = 0;
    2c42:	2600      	movs	r6, #0
    2c44:	ac20      	add	r4, sp, #128	; 0x80
    2c46:	f804 6d71 	strb.w	r6, [r4, #-113]!
	grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    2c4a:	9400      	str	r4, [sp, #0]
    2c4c:	230f      	movs	r3, #15
    2c4e:	2201      	movs	r2, #1
    2c50:	2104      	movs	r1, #4
    2c52:	a807      	add	r0, sp, #28
    2c54:	4d40      	ldr	r5, [pc, #256]	; (2d58 <grid_module_common_init+0x148>)
    2c56:	47a8      	blx	r5
	
	grid_msg_set_parameter(payload_template, GRID_CLASS_HEARTBEAT_HWCFG_offset, GRID_CLASS_HEARTBEAT_HWCFG_length, grid_sys_get_hwcfg(), &error);
    2c58:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2d74 <grid_module_common_init+0x164>
    2c5c:	47c0      	blx	r8
    2c5e:	9400      	str	r4, [sp, #0]
    2c60:	4603      	mov	r3, r0
    2c62:	2202      	movs	r2, #2
    2c64:	2105      	movs	r1, #5
    2c66:	a807      	add	r0, sp, #28
    2c68:	47a8      	blx	r5
	grid_msg_set_parameter(payload_template, GRID_CLASS_HEARTBEAT_VMAJOR_offset, GRID_CLASS_HEARTBEAT_VMAJOR_length , GRID_PROTOCOL_VERSION_MAJOR, &error);
    2c6a:	9400      	str	r4, [sp, #0]
    2c6c:	2301      	movs	r3, #1
    2c6e:	2202      	movs	r2, #2
    2c70:	2107      	movs	r1, #7
    2c72:	a807      	add	r0, sp, #28
    2c74:	47a8      	blx	r5
	grid_msg_set_parameter(payload_template, GRID_CLASS_HEARTBEAT_VMINOR_offset, GRID_CLASS_HEARTBEAT_VMINOR_length  , GRID_PROTOCOL_VERSION_MINOR, &error);
    2c76:	9400      	str	r4, [sp, #0]
    2c78:	4633      	mov	r3, r6
    2c7a:	2202      	movs	r2, #2
    2c7c:	2109      	movs	r1, #9
    2c7e:	a807      	add	r0, sp, #28
    2c80:	47a8      	blx	r5
	grid_msg_set_parameter(payload_template, GRID_CLASS_HEARTBEAT_VPATCH_offset, GRID_CLASS_HEARTBEAT_VPATCH_length  , GRID_PROTOCOL_VERSION_PATCH, &error);
    2c82:	9400      	str	r4, [sp, #0]
    2c84:	2305      	movs	r3, #5
    2c86:	2202      	movs	r2, #2
    2c88:	210b      	movs	r1, #11
    2c8a:	a807      	add	r0, sp, #28
    2c8c:	47a8      	blx	r5
	
	payload_length = strlen(payload_template);
    2c8e:	a807      	add	r0, sp, #28
    2c90:	4b32      	ldr	r3, [pc, #200]	; (2d5c <grid_module_common_init+0x14c>)
    2c92:	4798      	blx	r3
	
	grid_ui_event_register_action(&grid_core_state.element[0], GRID_UI_EVENT_HEARTBEAT, payload_template, payload_length, parameter_list, parameter_list_length);
    2c94:	687c      	ldr	r4, [r7, #4]
    2c96:	9601      	str	r6, [sp, #4]
    2c98:	ab04      	add	r3, sp, #16
    2c9a:	9300      	str	r3, [sp, #0]
    2c9c:	b2c3      	uxtb	r3, r0
    2c9e:	aa07      	add	r2, sp, #28
    2ca0:	2101      	movs	r1, #1
    2ca2:	4620      	mov	r0, r4
    2ca4:	4c2e      	ldr	r4, [pc, #184]	; (2d60 <grid_module_common_init+0x150>)
    2ca6:	47a0      	blx	r4
	
	
	
	//enable pwr!
	
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "UI Power Enable");
    2ca8:	492e      	ldr	r1, [pc, #184]	; (2d64 <grid_module_common_init+0x154>)
    2caa:	482f      	ldr	r0, [pc, #188]	; (2d68 <grid_module_common_init+0x158>)
    2cac:	4b2f      	ldr	r3, [pc, #188]	; (2d6c <grid_module_common_init+0x15c>)
    2cae:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2cb4:	4b2e      	ldr	r3, [pc, #184]	; (2d70 <grid_module_common_init+0x160>)
    2cb6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){	
    2cba:	47c0      	blx	r8
    2cbc:	b1d8      	cbz	r0, 2cf6 <grid_module_common_init+0xe6>
    2cbe:	47c0      	blx	r8
    2cc0:	2808      	cmp	r0, #8
    2cc2:	d018      	beq.n	2cf6 <grid_module_common_init+0xe6>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PO16");				
		grid_module_po16_revb_init(&grid_report_state);	
	}	
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
    2cc4:	4b2b      	ldr	r3, [pc, #172]	; (2d74 <grid_module_common_init+0x164>)
    2cc6:	4798      	blx	r3
    2cc8:	2880      	cmp	r0, #128	; 0x80
    2cca:	d021      	beq.n	2d10 <grid_module_common_init+0x100>
    2ccc:	4b29      	ldr	r3, [pc, #164]	; (2d74 <grid_module_common_init+0x164>)
    2cce:	4798      	blx	r3
    2cd0:	2888      	cmp	r0, #136	; 0x88
    2cd2:	d01d      	beq.n	2d10 <grid_module_common_init+0x100>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: BU16");
		grid_module_bu16_revb_init(&grid_report_state);
	
	}	
	else if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    2cd4:	4b27      	ldr	r3, [pc, #156]	; (2d74 <grid_module_common_init+0x164>)
    2cd6:	4798      	blx	r3
    2cd8:	2840      	cmp	r0, #64	; 0x40
    2cda:	d021      	beq.n	2d20 <grid_module_common_init+0x110>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PBF4");					
		grid_module_pbf4_reva_init(&grid_report_state);			
	}
	else if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){
    2cdc:	4b25      	ldr	r3, [pc, #148]	; (2d74 <grid_module_common_init+0x164>)
    2cde:	4798      	blx	r3
    2ce0:	28c0      	cmp	r0, #192	; 0xc0
    2ce2:	d025      	beq.n	2d30 <grid_module_common_init+0x120>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: EN16");
		grid_module_en16_reva_init(&grid_report_state);
		//grid_module_bu16_revb_init(&grid_ui_state);		
	}	
	else{
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: Unknown Module");
    2ce4:	4d20      	ldr	r5, [pc, #128]	; (2d68 <grid_module_common_init+0x158>)
    2ce6:	4924      	ldr	r1, [pc, #144]	; (2d78 <grid_module_common_init+0x168>)
    2ce8:	4628      	mov	r0, r5
    2cea:	4c20      	ldr	r4, [pc, #128]	; (2d6c <grid_module_common_init+0x15c>)
    2cec:	47a0      	blx	r4
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "HWCFG Mismatch");
    2cee:	4923      	ldr	r1, [pc, #140]	; (2d7c <grid_module_common_init+0x16c>)
    2cf0:	4628      	mov	r0, r5
    2cf2:	47a0      	blx	r4
    2cf4:	e006      	b.n	2d04 <grid_module_common_init+0xf4>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PO16");				
    2cf6:	4922      	ldr	r1, [pc, #136]	; (2d80 <grid_module_common_init+0x170>)
    2cf8:	481b      	ldr	r0, [pc, #108]	; (2d68 <grid_module_common_init+0x158>)
    2cfa:	4b1c      	ldr	r3, [pc, #112]	; (2d6c <grid_module_common_init+0x15c>)
    2cfc:	4798      	blx	r3
		grid_module_po16_revb_init(&grid_report_state);	
    2cfe:	4821      	ldr	r0, [pc, #132]	; (2d84 <grid_module_common_init+0x174>)
    2d00:	4b21      	ldr	r3, [pc, #132]	; (2d88 <grid_module_common_init+0x178>)
    2d02:	4798      	blx	r3
	}


	grid_sys_init(&grid_sys_state);
    2d04:	4821      	ldr	r0, [pc, #132]	; (2d8c <grid_module_common_init+0x17c>)
    2d06:	4b22      	ldr	r3, [pc, #136]	; (2d90 <grid_module_common_init+0x180>)
    2d08:	4798      	blx	r3



	
		
}
    2d0a:	b020      	add	sp, #128	; 0x80
    2d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: BU16");
    2d10:	4920      	ldr	r1, [pc, #128]	; (2d94 <grid_module_common_init+0x184>)
    2d12:	4815      	ldr	r0, [pc, #84]	; (2d68 <grid_module_common_init+0x158>)
    2d14:	4b15      	ldr	r3, [pc, #84]	; (2d6c <grid_module_common_init+0x15c>)
    2d16:	4798      	blx	r3
		grid_module_bu16_revb_init(&grid_report_state);
    2d18:	481a      	ldr	r0, [pc, #104]	; (2d84 <grid_module_common_init+0x174>)
    2d1a:	4b1f      	ldr	r3, [pc, #124]	; (2d98 <grid_module_common_init+0x188>)
    2d1c:	4798      	blx	r3
    2d1e:	e7f1      	b.n	2d04 <grid_module_common_init+0xf4>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PBF4");					
    2d20:	491e      	ldr	r1, [pc, #120]	; (2d9c <grid_module_common_init+0x18c>)
    2d22:	4811      	ldr	r0, [pc, #68]	; (2d68 <grid_module_common_init+0x158>)
    2d24:	4b11      	ldr	r3, [pc, #68]	; (2d6c <grid_module_common_init+0x15c>)
    2d26:	4798      	blx	r3
		grid_module_pbf4_reva_init(&grid_report_state);			
    2d28:	4816      	ldr	r0, [pc, #88]	; (2d84 <grid_module_common_init+0x174>)
    2d2a:	4b1d      	ldr	r3, [pc, #116]	; (2da0 <grid_module_common_init+0x190>)
    2d2c:	4798      	blx	r3
    2d2e:	e7e9      	b.n	2d04 <grid_module_common_init+0xf4>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: EN16");
    2d30:	491c      	ldr	r1, [pc, #112]	; (2da4 <grid_module_common_init+0x194>)
    2d32:	480d      	ldr	r0, [pc, #52]	; (2d68 <grid_module_common_init+0x158>)
    2d34:	4b0d      	ldr	r3, [pc, #52]	; (2d6c <grid_module_common_init+0x15c>)
    2d36:	4798      	blx	r3
		grid_module_en16_reva_init(&grid_report_state);
    2d38:	4812      	ldr	r0, [pc, #72]	; (2d84 <grid_module_common_init+0x174>)
    2d3a:	4b1b      	ldr	r3, [pc, #108]	; (2da8 <grid_module_common_init+0x198>)
    2d3c:	4798      	blx	r3
    2d3e:	e7e1      	b.n	2d04 <grid_module_common_init+0xf4>
    2d40:	200078d0 	.word	0x200078d0
    2d44:	00004c6d 	.word	0x00004c6d
    2d48:	00004cf9 	.word	0x00004cf9
    2d4c:	0000d0e7 	.word	0x0000d0e7
    2d50:	0000e7e4 	.word	0x0000e7e4
    2d54:	0000d4d5 	.word	0x0000d4d5
    2d58:	00004bf9 	.word	0x00004bf9
    2d5c:	0000d51d 	.word	0x0000d51d
    2d60:	00004dbd 	.word	0x00004dbd
    2d64:	0000e7f8 	.word	0x0000e7f8
    2d68:	0000e5fc 	.word	0x0000e5fc
    2d6c:	0000d251 	.word	0x0000d251
    2d70:	41008000 	.word	0x41008000
    2d74:	000048dd 	.word	0x000048dd
    2d78:	0000e858 	.word	0x0000e858
    2d7c:	0000e874 	.word	0x0000e874
    2d80:	0000e808 	.word	0x0000e808
    2d84:	200078c4 	.word	0x200078c4
    2d88:	000041f9 	.word	0x000041f9
    2d8c:	200032d0 	.word	0x200032d0
    2d90:	00004b3d 	.word	0x00004b3d
    2d94:	0000e81c 	.word	0x0000e81c
    2d98:	00003011 	.word	0x00003011
    2d9c:	0000e830 	.word	0x0000e830
    2da0:	00003cd1 	.word	0x00003cd1
    2da4:	0000e844 	.word	0x0000e844
    2da8:	00003659 	.word	0x00003659

00002dac <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


static uint8_t helper[16] = {0};

void grid_module_bu16_revb_hardware_start_transfer(void){
    2dac:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2dae:	4803      	ldr	r0, [pc, #12]	; (2dbc <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    2db0:	4c03      	ldr	r4, [pc, #12]	; (2dc0 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    2db2:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2db4:	4803      	ldr	r0, [pc, #12]	; (2dc4 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    2db6:	47a0      	blx	r4
    2db8:	bd10      	pop	{r4, pc}
    2dba:	bf00      	nop
    2dbc:	20001050 	.word	0x20001050
    2dc0:	00005bd9 	.word	0x00005bd9
    2dc4:	20001224 	.word	0x20001224

00002dc8 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    2dc8:	4b74      	ldr	r3, [pc, #464]	; (2f9c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    2dca:	781b      	ldrb	r3, [r3, #0]
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d06e      	beq.n	2eae <grid_module_bu16_revb_hardware_transfer_complete_cb+0xe6>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    2dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dd4:	b089      	sub	sp, #36	; 0x24
	struct grid_report_model* mod = &grid_report_state;
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2dd6:	2300      	movs	r3, #0
    2dd8:	f8ad 301e 	strh.w	r3, [sp, #30]
	uint16_t adcresult_1 = 0;
    2ddc:	f8ad 301c 	strh.w	r3, [sp, #28]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    2de0:	4b6e      	ldr	r3, [pc, #440]	; (2f9c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    2de2:	785a      	ldrb	r2, [r3, #1]
    2de4:	3208      	adds	r2, #8
    2de6:	496e      	ldr	r1, [pc, #440]	; (2fa0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    2de8:	5c8d      	ldrb	r5, [r1, r2]
    2dea:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    2dec:	785a      	ldrb	r2, [r3, #1]
    2dee:	b2d2      	uxtb	r2, r2
    2df0:	5c8c      	ldrb	r4, [r1, r2]
    2df2:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    2df4:	785a      	ldrb	r2, [r3, #1]
    2df6:	3201      	adds	r2, #1
    2df8:	b2d2      	uxtb	r2, r2
    2dfa:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    2dfc:	785a      	ldrb	r2, [r3, #1]
    2dfe:	f002 0207 	and.w	r2, r2, #7
    2e02:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    2e04:	785b      	ldrb	r3, [r3, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2e06:	f013 0f01 	tst.w	r3, #1
    2e0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2e0e:	4b65      	ldr	r3, [pc, #404]	; (2fa4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2e10:	bf14      	ite	ne
    2e12:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e16:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    2e1a:	4b60      	ldr	r3, [pc, #384]	; (2f9c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    2e1c:	785b      	ldrb	r3, [r3, #1]
    2e1e:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2e26:	4b5f      	ldr	r3, [pc, #380]	; (2fa4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2e28:	bf14      	ite	ne
    2e2a:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e2e:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    2e32:	4b5a      	ldr	r3, [pc, #360]	; (2f9c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    2e34:	785b      	ldrb	r3, [r3, #1]
    2e36:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2e3e:	4b59      	ldr	r3, [pc, #356]	; (2fa4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2e40:	bf14      	ite	ne
    2e42:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e46:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2e4a:	2302      	movs	r3, #2
    2e4c:	f10d 021e 	add.w	r2, sp, #30
    2e50:	2100      	movs	r1, #0
    2e52:	4855      	ldr	r0, [pc, #340]	; (2fa8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    2e54:	4e55      	ldr	r6, [pc, #340]	; (2fac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>)
    2e56:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2e58:	2302      	movs	r3, #2
    2e5a:	aa07      	add	r2, sp, #28
    2e5c:	2100      	movs	r1, #0
    2e5e:	4854      	ldr	r0, [pc, #336]	; (2fb0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>)
    2e60:	47b0      	blx	r6
	
	uint8_t result_index[2] = {0};
    2e62:	2300      	movs	r3, #0
	uint8_t result_value[2] = {0};
    2e64:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t result_valid[2] = {0};
    2e68:	f8ad 3010 	strh.w	r3, [sp, #16]
		
	result_index[0] = adc_index_0;
    2e6c:	f88d 5018 	strb.w	r5, [sp, #24]
	result_index[1] = adc_index_1;
    2e70:	f88d 4019 	strb.w	r4, [sp, #25]
		
		
	uint8_t adcresult_0_valid = 0;
	
	if (adcresult_0>60000){
    2e74:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    2e78:	f64e 2260 	movw	r2, #60000	; 0xea60
    2e7c:	4293      	cmp	r3, r2
    2e7e:	d91c      	bls.n	2eba <grid_module_bu16_revb_hardware_transfer_complete_cb+0xf2>
		result_value[0] = 0;
		result_valid[0] = 1;
    2e80:	2301      	movs	r3, #1
    2e82:	f88d 3010 	strb.w	r3, [sp, #16]
		result_valid[0] = 1;
	}
		
	uint8_t adcresult_1_valid = 0;
	
	if (adcresult_1>60000){
    2e86:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    2e8a:	f64e 2260 	movw	r2, #60000	; 0xea60
    2e8e:	4293      	cmp	r3, r2
    2e90:	d91c      	bls.n	2ecc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x104>
		result_value[1] = 0;
		result_valid[1] = 1;
    2e92:	2301      	movs	r3, #1
    2e94:	f88d 3011 	strb.w	r3, [sp, #17]
		result_value[1] = 127;
		result_valid[1] = 1;
	}


	uint8_t grid_module_bu16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};	
    2e98:	4b46      	ldr	r3, [pc, #280]	; (2fb4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1ec>)
    2e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2e9c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    2ea0:	2400      	movs	r4, #0
		// Helper variable for readability
		uint8_t res_index = result_index[i];
		uint8_t res_valid = result_valid[i];
		uint8_t res_value = result_value[i];
		
		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;		
    2ea2:	4f45      	ldr	r7, [pc, #276]	; (2fb8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f0>)
		
		if (res_value != helper[res_index] && res_valid == 1){
    2ea4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2f9c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>

				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7] = 0;
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8] = 0;

				
				uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DR);		
    2ea8:	f8df 911c 	ldr.w	r9, [pc, #284]	; 2fc8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x200>
    2eac:	e039      	b.n	2f22 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x15a>
		grid_module_bu16_revb_hardware_transfer_complete++;
    2eae:	4a3b      	ldr	r2, [pc, #236]	; (2f9c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    2eb0:	7813      	ldrb	r3, [r2, #0]
    2eb2:	3301      	adds	r3, #1
    2eb4:	b2db      	uxtb	r3, r3
    2eb6:	7013      	strb	r3, [r2, #0]
    2eb8:	4770      	bx	lr
	else if (adcresult_0<200){
    2eba:	2bc7      	cmp	r3, #199	; 0xc7
    2ebc:	d8e3      	bhi.n	2e86 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xbe>
		result_value[0] = 127;
    2ebe:	237f      	movs	r3, #127	; 0x7f
    2ec0:	f88d 3014 	strb.w	r3, [sp, #20]
		result_valid[0] = 1;
    2ec4:	2301      	movs	r3, #1
    2ec6:	f88d 3010 	strb.w	r3, [sp, #16]
    2eca:	e7dc      	b.n	2e86 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xbe>
	else if (adcresult_1<200){
    2ecc:	2bc7      	cmp	r3, #199	; 0xc7
    2ece:	d8e3      	bhi.n	2e98 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xd0>
		result_value[1] = 127;
    2ed0:	237f      	movs	r3, #127	; 0x7f
    2ed2:	f88d 3015 	strb.w	r3, [sp, #21]
		result_valid[1] = 1;
    2ed6:	2301      	movs	r3, #1
    2ed8:	f88d 3011 	strb.w	r3, [sp, #17]
    2edc:	e7dc      	b.n	2e98 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xd0>
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;
    2ede:	6015      	str	r5, [r2, #0]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_bu16_mux_reversed_lookup[res_index];
    2ee0:	ab08      	add	r3, sp, #32
    2ee2:	442b      	add	r3, r5
    2ee4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
    2ee8:	6053      	str	r3, [r2, #4]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7] = 0;
    2eea:	2300      	movs	r3, #0
    2eec:	6193      	str	r3, [r2, #24]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8] = 0;
    2eee:	61d3      	str	r3, [r2, #28]
				uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DR);		
    2ef0:	6878      	ldr	r0, [r7, #4]
    2ef2:	2106      	movs	r1, #6
    2ef4:	4450      	add	r0, sl
    2ef6:	47c8      	blx	r9
    2ef8:	4683      	mov	fp, r0
				
				grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    2efa:	6878      	ldr	r0, [r7, #4]
    2efc:	4659      	mov	r1, fp
    2efe:	4450      	add	r0, sl
    2f00:	4b2e      	ldr	r3, [pc, #184]	; (2fbc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f4>)
    2f02:	4798      	blx	r3
				
				grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    2f04:	687b      	ldr	r3, [r7, #4]
    2f06:	449a      	add	sl, r3
    2f08:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    2f0c:	f8da 000c 	ldr.w	r0, [sl, #12]
    2f10:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
    2f14:	4b2a      	ldr	r3, [pc, #168]	; (2fc0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f8>)
    2f16:	4798      	blx	r3

				helper[result_index[i]] = res_value;
    2f18:	4445      	add	r5, r8
    2f1a:	712e      	strb	r6, [r5, #4]
    2f1c:	3401      	adds	r4, #1
	for (uint8_t i=0; i<2; i++)
    2f1e:	2c02      	cmp	r4, #2
    2f20:	d034      	beq.n	2f8c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>
		uint8_t res_index = result_index[i];
    2f22:	ab06      	add	r3, sp, #24
    2f24:	5ce5      	ldrb	r5, [r4, r3]
		uint8_t res_value = result_value[i];
    2f26:	ab05      	add	r3, sp, #20
    2f28:	5ce6      	ldrb	r6, [r4, r3]
		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;		
    2f2a:	687a      	ldr	r2, [r7, #4]
		if (res_value != helper[res_index] && res_valid == 1){
    2f2c:	eb08 0305 	add.w	r3, r8, r5
    2f30:	791b      	ldrb	r3, [r3, #4]
    2f32:	429e      	cmp	r6, r3
    2f34:	d0f2      	beq.n	2f1c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x154>
		uint8_t res_valid = result_valid[i];
    2f36:	a904      	add	r1, sp, #16
		if (res_value != helper[res_index] && res_valid == 1){
    2f38:	5c61      	ldrb	r1, [r4, r1]
    2f3a:	2901      	cmp	r1, #1
    2f3c:	d1ee      	bne.n	2f1c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x154>
		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;		
    2f3e:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    2f42:	4452      	add	r2, sl
    2f44:	6852      	ldr	r2, [r2, #4]
			if (helper[res_index] == 0){ // Button Press Event
    2f46:	2b00      	cmp	r3, #0
    2f48:	d1c9      	bne.n	2ede <grid_module_bu16_revb_hardware_transfer_complete_cb+0x116>
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;						
    2f4a:	6015      	str	r5, [r2, #0]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_bu16_mux_reversed_lookup[res_index];
    2f4c:	ab08      	add	r3, sp, #32
    2f4e:	442b      	add	r3, r5
    2f50:	f813 3c20 	ldrb.w	r3, [r3, #-32]
    2f54:	6053      	str	r3, [r2, #4]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7] = 127;
    2f56:	237f      	movs	r3, #127	; 0x7f
    2f58:	6193      	str	r3, [r2, #24]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8] = 255;
    2f5a:	23ff      	movs	r3, #255	; 0xff
    2f5c:	61d3      	str	r3, [r2, #28]
				uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DP);
    2f5e:	6878      	ldr	r0, [r7, #4]
    2f60:	2105      	movs	r1, #5
    2f62:	4450      	add	r0, sl
    2f64:	47c8      	blx	r9
    2f66:	4683      	mov	fp, r0
				grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    2f68:	6878      	ldr	r0, [r7, #4]
    2f6a:	4659      	mov	r1, fp
    2f6c:	4450      	add	r0, sl
    2f6e:	4b13      	ldr	r3, [pc, #76]	; (2fbc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f4>)
    2f70:	4798      	blx	r3
				grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    2f72:	687b      	ldr	r3, [r7, #4]
    2f74:	449a      	add	sl, r3
    2f76:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    2f7a:	f8da 000c 	ldr.w	r0, [sl, #12]
    2f7e:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
    2f82:	4b0f      	ldr	r3, [pc, #60]	; (2fc0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f8>)
    2f84:	4798      	blx	r3
				helper[result_index[i]] = res_value;
    2f86:	4445      	add	r5, r8
    2f88:	712e      	strb	r6, [r5, #4]
    2f8a:	e7c7      	b.n	2f1c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x154>
		}

	}
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    2f8c:	2200      	movs	r2, #0
    2f8e:	4b03      	ldr	r3, [pc, #12]	; (2f9c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    2f90:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    2f92:	4b0c      	ldr	r3, [pc, #48]	; (2fc4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1fc>)
    2f94:	4798      	blx	r3
}
    2f96:	b009      	add	sp, #36	; 0x24
    2f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f9c:	20000634 	.word	0x20000634
    2fa0:	20000300 	.word	0x20000300
    2fa4:	41008000 	.word	0x41008000
    2fa8:	20001050 	.word	0x20001050
    2fac:	00005af9 	.word	0x00005af9
    2fb0:	20001224 	.word	0x20001224
    2fb4:	0000e884 	.word	0x0000e884
    2fb8:	200032c4 	.word	0x200032c4
    2fbc:	00004ea9 	.word	0x00004ea9
    2fc0:	00004e79 	.word	0x00004e79
    2fc4:	00002dad 	.word	0x00002dad
    2fc8:	00004e51 	.word	0x00004e51

00002fcc <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    2fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    2fce:	4f0b      	ldr	r7, [pc, #44]	; (2ffc <grid_module_bu16_revb_hardware_init+0x30>)
    2fd0:	4c0b      	ldr	r4, [pc, #44]	; (3000 <grid_module_bu16_revb_hardware_init+0x34>)
    2fd2:	463b      	mov	r3, r7
    2fd4:	2200      	movs	r2, #0
    2fd6:	4611      	mov	r1, r2
    2fd8:	4620      	mov	r0, r4
    2fda:	4e0a      	ldr	r6, [pc, #40]	; (3004 <grid_module_bu16_revb_hardware_init+0x38>)
    2fdc:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    2fde:	4d0a      	ldr	r5, [pc, #40]	; (3008 <grid_module_bu16_revb_hardware_init+0x3c>)
    2fe0:	463b      	mov	r3, r7
    2fe2:	2200      	movs	r2, #0
    2fe4:	4611      	mov	r1, r2
    2fe6:	4628      	mov	r0, r5
    2fe8:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    2fea:	2100      	movs	r1, #0
    2fec:	4620      	mov	r0, r4
    2fee:	4c07      	ldr	r4, [pc, #28]	; (300c <grid_module_bu16_revb_hardware_init+0x40>)
    2ff0:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    2ff2:	2100      	movs	r1, #0
    2ff4:	4628      	mov	r0, r5
    2ff6:	47a0      	blx	r4
    2ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ffa:	bf00      	nop
    2ffc:	00002dc9 	.word	0x00002dc9
    3000:	20001050 	.word	0x20001050
    3004:	00005a79 	.word	0x00005a79
    3008:	20001224 	.word	0x20001224
    300c:	00005a39 	.word	0x00005a39

00003010 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_report_model* mod){
    3010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3014:	b0a3      	sub	sp, #140	; 0x8c
    3016:	4604      	mov	r4, r0
    3018:	9003      	str	r0, [sp, #12]

	grid_led_init(&grid_led_state, 16);
    301a:	2110      	movs	r1, #16
    301c:	4857      	ldr	r0, [pc, #348]	; (317c <grid_module_bu16_revb_init+0x16c>)
    301e:	4b58      	ldr	r3, [pc, #352]	; (3180 <grid_module_bu16_revb_init+0x170>)
    3020:	4798      	blx	r3
	grid_report_model_init(mod, 0); // 0 ui reports
    3022:	2100      	movs	r1, #0
    3024:	4620      	mov	r0, r4
    3026:	4b57      	ldr	r3, [pc, #348]	; (3184 <grid_module_bu16_revb_init+0x174>)
    3028:	4798      	blx	r3
	
	grid_ui_model_init(&grid_ui_state, 16);
    302a:	2110      	movs	r1, #16
    302c:	4856      	ldr	r0, [pc, #344]	; (3188 <grid_module_bu16_revb_init+0x178>)
    302e:	4b57      	ldr	r3, [pc, #348]	; (318c <grid_module_bu16_revb_init+0x17c>)
    3030:	4798      	blx	r3
    3032:	f04f 0800 	mov.w	r8, #0
	
	for (uint8_t i=0; i<16; i++){
		grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_BUTTON);
    3036:	f04f 0902 	mov.w	r9, #2
    303a:	4b53      	ldr	r3, [pc, #332]	; (3188 <grid_module_bu16_revb_init+0x178>)
    303c:	6858      	ldr	r0, [r3, #4]
    303e:	4649      	mov	r1, r9
    3040:	4440      	add	r0, r8
    3042:	4b53      	ldr	r3, [pc, #332]	; (3190 <grid_module_bu16_revb_init+0x180>)
    3044:	4798      	blx	r3
		
		uint8_t payload_template[100] = {0};
    3046:	2264      	movs	r2, #100	; 0x64
    3048:	2100      	movs	r1, #0
    304a:	a809      	add	r0, sp, #36	; 0x24
    304c:	4b51      	ldr	r3, [pc, #324]	; (3194 <grid_module_bu16_revb_init+0x184>)
    304e:	4798      	blx	r3
		uint8_t payload_length = 0;
			
		sprintf(payload_template, GRID_CLASS_MIDIRELATIVE_frame);
    3050:	f04f 0b03 	mov.w	fp, #3
    3054:	f8cd b000 	str.w	fp, [sp]
    3058:	2300      	movs	r3, #0
    305a:	464a      	mov	r2, r9
    305c:	494e      	ldr	r1, [pc, #312]	; (3198 <grid_module_bu16_revb_init+0x188>)
    305e:	a809      	add	r0, sp, #36	; 0x24
    3060:	f8df a150 	ldr.w	sl, [pc, #336]	; 31b4 <grid_module_bu16_revb_init+0x1a4>
    3064:	47d0      	blx	sl
		
		uint8_t error = 0;
    3066:	ad22      	add	r5, sp, #136	; 0x88
    3068:	f04f 0300 	mov.w	r3, #0
    306c:	f805 3d75 	strb.w	r3, [r5, #-117]!
		
		grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    3070:	9500      	str	r5, [sp, #0]
    3072:	230f      	movs	r3, #15
    3074:	2201      	movs	r2, #1
    3076:	2104      	movs	r1, #4
    3078:	a809      	add	r0, sp, #36	; 0x24
    307a:	4e48      	ldr	r6, [pc, #288]	; (319c <grid_module_bu16_revb_init+0x18c>)
    307c:	47b0      	blx	r6
		
		grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length, 0, &error);
    307e:	9500      	str	r5, [sp, #0]
    3080:	2300      	movs	r3, #0
    3082:	464a      	mov	r2, r9
    3084:	2105      	movs	r1, #5
    3086:	a809      	add	r0, sp, #36	; 0x24
    3088:	47b0      	blx	r6
		grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length , GRID_PARAMETER_MIDI_NOTEON, &error);
    308a:	9500      	str	r5, [sp, #0]
    308c:	2390      	movs	r3, #144	; 0x90
    308e:	464a      	mov	r2, r9
    3090:	2107      	movs	r1, #7
    3092:	a809      	add	r0, sp, #36	; 0x24
    3094:	47b0      	blx	r6
			
		payload_length = strlen(payload_template);
    3096:	a809      	add	r0, sp, #36	; 0x24
    3098:	4f41      	ldr	r7, [pc, #260]	; (31a0 <grid_module_bu16_revb_init+0x190>)
    309a:	47b8      	blx	r7
    309c:	b2c4      	uxtb	r4, r0

		uint8_t payload_length0 = payload_length;


		sprintf(&payload_template[payload_length], GRID_CLASS_LEDPHASE_frame);
    309e:	ab09      	add	r3, sp, #36	; 0x24
    30a0:	4423      	add	r3, r4
    30a2:	4618      	mov	r0, r3
    30a4:	f8cd b000 	str.w	fp, [sp]
    30a8:	2340      	movs	r3, #64	; 0x40
    30aa:	464a      	mov	r2, r9
    30ac:	493d      	ldr	r1, [pc, #244]	; (31a4 <grid_module_bu16_revb_init+0x194>)
    30ae:	4683      	mov	fp, r0
    30b0:	47d0      	blx	sl
		
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    30b2:	9500      	str	r5, [sp, #0]
    30b4:	230f      	movs	r3, #15
    30b6:	2201      	movs	r2, #1
    30b8:	2104      	movs	r1, #4
    30ba:	4658      	mov	r0, fp
    30bc:	47b0      	blx	r6
			
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_LEDPHASE_LAYERNUMBER_offset, GRID_CLASS_LEDPHASE_LAYERNUMBER_length, GRID_LED_LAYER_UI_A, &error);
    30be:	9500      	str	r5, [sp, #0]
    30c0:	2301      	movs	r3, #1
    30c2:	464a      	mov	r2, r9
    30c4:	2105      	movs	r1, #5
    30c6:	4658      	mov	r0, fp
    30c8:	47b0      	blx	r6

		
		payload_length += strlen(&payload_template[payload_length]);		
    30ca:	4658      	mov	r0, fp
    30cc:	47b8      	blx	r7
		
		uint8_t parameter_list_length = 4; 
		struct grid_ui_action_parameter parameter_list[4];
		
		// MIDI NOTE NUMBER
		parameter_list[0].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    30ce:	f04f 0300 	mov.w	r3, #0
    30d2:	f88d 3015 	strb.w	r3, [sp, #21]
		parameter_list[0].offset  = GRID_CLASS_MIDIRELATIVE_PARAM1_offset;
    30d6:	2309      	movs	r3, #9
    30d8:	f88d 3017 	strb.w	r3, [sp, #23]
		parameter_list[0].length  = GRID_CLASS_MIDIRELATIVE_PARAM1_length;
    30dc:	f88d 9016 	strb.w	r9, [sp, #22]
		
		// MIDI NOTE VELOCITY
		parameter_list[1].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7;
    30e0:	f04f 0b06 	mov.w	fp, #6
    30e4:	f88d b019 	strb.w	fp, [sp, #25]
		parameter_list[1].offset  = GRID_CLASS_MIDIRELATIVE_PARAM2_offset;
    30e8:	230b      	movs	r3, #11
    30ea:	f88d 301b 	strb.w	r3, [sp, #27]
		parameter_list[1].length  = GRID_CLASS_MIDIRELATIVE_PARAM2_length;
    30ee:	f88d 901a 	strb.w	r9, [sp, #26]
		
		// LED NUMBER
		parameter_list[2].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    30f2:	f04f 0300 	mov.w	r3, #0
    30f6:	f88d 301d 	strb.w	r3, [sp, #29]
		parameter_list[2].offset  = payload_length0 + GRID_CLASS_LEDPHASE_LEDNUMBER_offset;
    30fa:	1de3      	adds	r3, r4, #7
    30fc:	f88d 301f 	strb.w	r3, [sp, #31]
		parameter_list[2].length  = GRID_CLASS_LEDPHASE_LEDNUMBER_length;
    3100:	f88d 901e 	strb.w	r9, [sp, #30]
		
		// LED PHASE VALUE
		parameter_list[3].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8;
    3104:	f04f 0307 	mov.w	r3, #7
    3108:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		parameter_list[3].offset  = payload_length0 + GRID_CLASS_LEDPHASE_PHASE_offset;
    310c:	f104 0309 	add.w	r3, r4, #9
    3110:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		parameter_list[3].length  = GRID_CLASS_LEDPHASE_PHASE_length;
    3114:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
		
		
		// Register Digital Press Action		
		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DP, payload_template, payload_length, parameter_list, parameter_list_length);
    3118:	4b1b      	ldr	r3, [pc, #108]	; (3188 <grid_module_bu16_revb_init+0x178>)
    311a:	f8d3 e004 	ldr.w	lr, [r3, #4]
		payload_length += strlen(&payload_template[payload_length]);		
    311e:	4404      	add	r4, r0
		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DP, payload_template, payload_length, parameter_list, parameter_list_length);
    3120:	b2e4      	uxtb	r4, r4
    3122:	2304      	movs	r3, #4
    3124:	9301      	str	r3, [sp, #4]
    3126:	af05      	add	r7, sp, #20
    3128:	9700      	str	r7, [sp, #0]
    312a:	4623      	mov	r3, r4
    312c:	aa09      	add	r2, sp, #36	; 0x24
    312e:	2105      	movs	r1, #5
    3130:	eb0e 0008 	add.w	r0, lr, r8
    3134:	f8df a080 	ldr.w	sl, [pc, #128]	; 31b8 <grid_module_bu16_revb_init+0x1a8>
    3138:	47d0      	blx	sl
		
		grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length , GRID_PARAMETER_MIDI_NOTEOFF, &error);
    313a:	9500      	str	r5, [sp, #0]
    313c:	2380      	movs	r3, #128	; 0x80
    313e:	464a      	mov	r2, r9
    3140:	2107      	movs	r1, #7
    3142:	a809      	add	r0, sp, #36	; 0x24
    3144:	47b0      	blx	r6
		
 		// Register Digital Release Action	
 		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DR, payload_template, payload_length, parameter_list, parameter_list_length);
    3146:	4b10      	ldr	r3, [pc, #64]	; (3188 <grid_module_bu16_revb_init+0x178>)
    3148:	6858      	ldr	r0, [r3, #4]
    314a:	2304      	movs	r3, #4
    314c:	9301      	str	r3, [sp, #4]
    314e:	9700      	str	r7, [sp, #0]
    3150:	4623      	mov	r3, r4
    3152:	aa09      	add	r2, sp, #36	; 0x24
    3154:	4659      	mov	r1, fp
    3156:	4440      	add	r0, r8
    3158:	47d0      	blx	sl
    315a:	f108 0810 	add.w	r8, r8, #16
	for (uint8_t i=0; i<16; i++){
    315e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    3162:	f47f af6a 	bne.w	303a <grid_module_bu16_revb_init+0x2a>
				
			
	}
	
	grid_report_sys_init(mod);
    3166:	9803      	ldr	r0, [sp, #12]
    3168:	4b0f      	ldr	r3, [pc, #60]	; (31a8 <grid_module_bu16_revb_init+0x198>)
    316a:	4798      	blx	r3
			
	grid_module_bu16_revb_hardware_init();
    316c:	4b0f      	ldr	r3, [pc, #60]	; (31ac <grid_module_bu16_revb_init+0x19c>)
    316e:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    3170:	4b0f      	ldr	r3, [pc, #60]	; (31b0 <grid_module_bu16_revb_init+0x1a0>)
    3172:	4798      	blx	r3

};
    3174:	b023      	add	sp, #140	; 0x8c
    3176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    317a:	bf00      	nop
    317c:	20007944 	.word	0x20007944
    3180:	00002a55 	.word	0x00002a55
    3184:	00004c4d 	.word	0x00004c4d
    3188:	200032c4 	.word	0x200032c4
    318c:	00004c6d 	.word	0x00004c6d
    3190:	00004cf9 	.word	0x00004cf9
    3194:	0000d0e7 	.word	0x0000d0e7
    3198:	0000e7e4 	.word	0x0000e7e4
    319c:	00004bf9 	.word	0x00004bf9
    31a0:	0000d51d 	.word	0x0000d51d
    31a4:	0000e894 	.word	0x0000e894
    31a8:	00004fad 	.word	0x00004fad
    31ac:	00002fcd 	.word	0x00002fcd
    31b0:	00002dad 	.word	0x00002dad
    31b4:	0000d4d5 	.word	0x0000d4d5
    31b8:	00004dbd 	.word	0x00004dbd

000031bc <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    31bc:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    31be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    31c2:	4b07      	ldr	r3, [pc, #28]	; (31e0 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    31c4:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    31c6:	4c07      	ldr	r4, [pc, #28]	; (31e4 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    31c8:	4620      	mov	r0, r4
    31ca:	4b07      	ldr	r3, [pc, #28]	; (31e8 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    31cc:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    31ce:	4907      	ldr	r1, [pc, #28]	; (31ec <grid_module_en16_reva_hardware_start_transfer+0x30>)
    31d0:	2308      	movs	r3, #8
    31d2:	460a      	mov	r2, r1
    31d4:	3110      	adds	r1, #16
    31d6:	4620      	mov	r0, r4
    31d8:	4c05      	ldr	r4, [pc, #20]	; (31f0 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    31da:	47a0      	blx	r4
    31dc:	bd10      	pop	{r4, pc}
    31de:	bf00      	nop
    31e0:	41008000 	.word	0x41008000
    31e4:	20000f44 	.word	0x20000f44
    31e8:	000061ad 	.word	0x000061ad
    31ec:	20000648 	.word	0x20000648
    31f0:	0000624d 	.word	0x0000624d
    31f4:	00000000 	.word	0x00000000

000031f8 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    31f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31fc:	ed2d 8b04 	vpush	{d8-d9}
    3200:	b089      	sub	sp, #36	; 0x24
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3202:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3206:	4b76      	ldr	r3, [pc, #472]	; (33e0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1e8>)
    3208:	615a      	str	r2, [r3, #20]
	
	// Set the shift registers to continuously load data until new transaction is issued
	gpio_set_pin_level(PIN_UI_SPI_CS0, false);


	uint8_t bank = grid_sys_get_bank(&grid_sys_state);
    320a:	4876      	ldr	r0, [pc, #472]	; (33e4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1ec>)
    320c:	4b76      	ldr	r3, [pc, #472]	; (33e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1f0>)
    320e:	4798      	blx	r3
    3210:	4603      	mov	r3, r0
	
	if (bank == 255){
		bank=0;
    3212:	28ff      	cmp	r0, #255	; 0xff
    3214:	bf14      	ite	ne
    3216:	4603      	movne	r3, r0
    3218:	2300      	moveq	r3, #0
    321a:	461a      	mov	r2, r3
    321c:	9301      	str	r3, [sp, #4]
	}


	uint8_t bank_changed = grid_sys_state.bank_changed;
    321e:	4b71      	ldr	r3, [pc, #452]	; (33e4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1ec>)
    3220:	7a9b      	ldrb	r3, [r3, #10]
		
	if (bank_changed){
    3222:	2b00      	cmp	r3, #0
    3224:	d041      	beq.n	32aa <grid_module_en16_reva_hardware_transfer_complete_cb+0xb2>
		grid_sys_state.bank_changed = 0;
    3226:	2600      	movs	r6, #0
    3228:	4b6e      	ldr	r3, [pc, #440]	; (33e4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1ec>)
    322a:	729e      	strb	r6, [r3, #10]
    322c:	4b6f      	ldr	r3, [pc, #444]	; (33ec <grid_module_en16_reva_hardware_transfer_complete_cb+0x1f4>)
    322e:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    3232:	f10a 3aff 	add.w	sl, sl, #4294967295
    3236:	f10d 090f 	add.w	r9, sp, #15
    323a:	f10d 0b1f 	add.w	fp, sp, #31
// 			grid_report_ui_set_changed_flag(mod, i+16+16);


			uint8_t value = helper[bank][i];
			uint8_t res_index = i;
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    323e:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 340c <grid_module_en16_reva_hardware_transfer_complete_cb+0x214>
			uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    3242:	4f6b      	ldr	r7, [pc, #428]	; (33f0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1f8>)
			uint8_t value = helper[bank][i];
    3244:	f81a ef01 	ldrb.w	lr, [sl, #1]!
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3248:	f8d8 3004 	ldr.w	r3, [r8, #4]
    324c:	0135      	lsls	r5, r6, #4
    324e:	442b      	add	r3, r5
    3250:	685c      	ldr	r4, [r3, #4]
			uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    3252:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    3256:	f10d 0c20 	add.w	ip, sp, #32
    325a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
			
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;
    325e:	6026      	str	r6, [r4, #0]
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    3260:	f819 3f01 	ldrb.w	r3, [r9, #1]!
    3264:	6063      	str	r3, [r4, #4]

			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV7] = value;
    3266:	f8c4 e008 	str.w	lr, [r4, #8]
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV8] = value*2;
    326a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    326e:	60e3      	str	r3, [r4, #12]
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV14U] = 0;
    3270:	2300      	movs	r3, #0
    3272:	6123      	str	r3, [r4, #16]
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV14L] = 0;
    3274:	6163      	str	r3, [r4, #20]
			
			uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_AVC7);
    3276:	f8d8 0004 	ldr.w	r0, [r8, #4]
    327a:	2102      	movs	r1, #2
    327c:	4428      	add	r0, r5
    327e:	4b5d      	ldr	r3, [pc, #372]	; (33f4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1fc>)
    3280:	4798      	blx	r3
    3282:	4604      	mov	r4, r0

			grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    3284:	f8d8 0004 	ldr.w	r0, [r8, #4]
    3288:	4621      	mov	r1, r4
    328a:	4428      	add	r0, r5
    328c:	4b5a      	ldr	r3, [pc, #360]	; (33f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x200>)
    328e:	4798      	blx	r3
			
			grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    3290:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3294:	441d      	add	r5, r3
    3296:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    329a:	68e8      	ldr	r0, [r5, #12]
    329c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    32a0:	4b56      	ldr	r3, [pc, #344]	; (33fc <grid_module_en16_reva_hardware_transfer_complete_cb+0x204>)
    32a2:	4798      	blx	r3
    32a4:	3601      	adds	r6, #1
		for (uint8_t i = 0; i<16; i++)
    32a6:	45d9      	cmp	r9, fp
    32a8:	d1cc      	bne.n	3244 <grid_module_en16_reva_hardware_transfer_complete_cb+0x4c>
		grid_sys_state.bank_changed = 0;
    32aa:	2700      	movs	r7, #0
		

		uint8_t i = UI_ENCODER_LOOKUP[j];
		

		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    32ac:	f8df 9160 	ldr.w	r9, [pc, #352]	; 3410 <grid_module_en16_reva_hardware_transfer_complete_cb+0x218>
				if (elapsed_time<20){
					elapsed_time = 20;
				}
			
				
				uint16_t velocityfactor = (160000-elapsed_time*elapsed_time)/60000.0 + 1;
    32b0:	ed9f 9b47 	vldr	d9, [pc, #284]	; 33d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1d8>
    32b4:	ed9f 8b48 	vldr	d8, [pc, #288]	; 33d8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1e0>
    32b8:	e0b3      	b.n	3422 <grid_module_en16_reva_hardware_transfer_complete_cb+0x22a>
 					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;
    32ba:	f8cc 5000 	str.w	r5, [ip]
 					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    32be:	ab08      	add	r3, sp, #32
    32c0:	442b      	add	r3, r5
    32c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    32c6:	f8cc 3004 	str.w	r3, [ip, #4]
 					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7] = 0;
    32ca:	2300      	movs	r3, #0
    32cc:	f8cc 3018 	str.w	r3, [ip, #24]
 					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8] = 0;
    32d0:	f8cc 301c 	str.w	r3, [ip, #28]
 					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DR);
    32d4:	f8df b134 	ldr.w	fp, [pc, #308]	; 340c <grid_module_en16_reva_hardware_transfer_complete_cb+0x214>
    32d8:	f8db 0004 	ldr.w	r0, [fp, #4]
    32dc:	2106      	movs	r1, #6
    32de:	4440      	add	r0, r8
    32e0:	4b44      	ldr	r3, [pc, #272]	; (33f4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1fc>)
    32e2:	4798      	blx	r3
    32e4:	4682      	mov	sl, r0
					grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    32e6:	f8db 0004 	ldr.w	r0, [fp, #4]
    32ea:	4651      	mov	r1, sl
    32ec:	4440      	add	r0, r8
    32ee:	4b42      	ldr	r3, [pc, #264]	; (33f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x200>)
    32f0:	4798      	blx	r3
					grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    32f2:	f8db 3004 	ldr.w	r3, [fp, #4]
    32f6:	4498      	add	r8, r3
    32f8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    32fc:	f8d8 000c 	ldr.w	r0, [r8, #12]
    3300:	eb00 00ca 	add.w	r0, r0, sl, lsl #3
    3304:	4b3d      	ldr	r3, [pc, #244]	; (33fc <grid_module_en16_reva_hardware_transfer_complete_cb+0x204>)
    3306:	4798      	blx	r3
    3308:	e0ed      	b.n	34e6 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ee>
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[i].rotation_value + xi >= 0){
    330a:	493d      	ldr	r1, [pc, #244]	; (3400 <grid_module_en16_reva_hardware_transfer_complete_cb+0x208>)
    330c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    3310:	78c9      	ldrb	r1, [r1, #3]
    3312:	42d1      	cmn	r1, r2
    3314:	d405      	bmi.n	3322 <grid_module_en16_reva_hardware_transfer_complete_cb+0x12a>
						grid_ui_encoder_array[i].rotation_value += xi;
    3316:	4a3a      	ldr	r2, [pc, #232]	; (3400 <grid_module_en16_reva_hardware_transfer_complete_cb+0x208>)
    3318:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    331c:	440b      	add	r3, r1
    331e:	70d3      	strb	r3, [r2, #3]
    3320:	e138      	b.n	3594 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39c>
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 0;
    3322:	4b37      	ldr	r3, [pc, #220]	; (3400 <grid_module_en16_reva_hardware_transfer_complete_cb+0x208>)
    3324:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3328:	2200      	movs	r2, #0
    332a:	70da      	strb	r2, [r3, #3]
    332c:	e132      	b.n	3594 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39c>
				else if (delta>0){
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
						grid_ui_encoder_array[i].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 127;
    332e:	4b34      	ldr	r3, [pc, #208]	; (3400 <grid_module_en16_reva_hardware_transfer_complete_cb+0x208>)
    3330:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3334:	227f      	movs	r2, #127	; 0x7f
    3336:	70da      	strb	r2, [r3, #3]
    3338:	e12c      	b.n	3594 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39c>
				
					
				value = helper[bank][i];
				
				if (value + delta*velocityfactor < 0){
					value = 0;
    333a:	2400      	movs	r4, #0
    333c:	e000      	b.n	3340 <grid_module_en16_reva_hardware_transfer_complete_cb+0x148>
				}
				else if (value + delta*velocityfactor > 127){
					value = 127;
    333e:	247f      	movs	r4, #127	; 0x7f
					value += delta*velocityfactor;
				}
								
				uint8_t actuator = value*2;
				
				if (value != helper[bank][i]){
    3340:	429c      	cmp	r4, r3
    3342:	d06b      	beq.n	341c <grid_module_en16_reva_hardware_transfer_complete_cb+0x224>
						
					helper[bank][i] = value;
    3344:	eb09 1202 	add.w	r2, r9, r2, lsl #4
    3348:	442a      	add	r2, r5
    334a:	f882 4020 	strb.w	r4, [r2, #32]
					uint8_t res_index = i;
					uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    334e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 340c <grid_module_en16_reva_hardware_transfer_complete_cb+0x214>
    3352:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3356:	012e      	lsls	r6, r5, #4
    3358:	4433      	add	r3, r6
    335a:	f8d3 e004 	ldr.w	lr, [r3, #4]
					uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};				
    335e:	4b24      	ldr	r3, [pc, #144]	; (33f0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1f8>)
    3360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3362:	f10d 0c20 	add.w	ip, sp, #32
    3366:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
															
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;
    336a:	f8ce 5000 	str.w	r5, [lr]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    336e:	4465      	add	r5, ip
    3370:	f815 3c10 	ldrb.w	r3, [r5, #-16]
    3374:	f8ce 3004 	str.w	r3, [lr, #4]

					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV7] = value;
    3378:	f8ce 4008 	str.w	r4, [lr, #8]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV8] = value*2;
    337c:	0064      	lsls	r4, r4, #1
    337e:	f8ce 400c 	str.w	r4, [lr, #12]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV14U] = 0;
    3382:	2300      	movs	r3, #0
    3384:	f8ce 3010 	str.w	r3, [lr, #16]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV14L] = 0;
    3388:	f8ce 3014 	str.w	r3, [lr, #20]
					
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_AVC7);
    338c:	f8d8 0004 	ldr.w	r0, [r8, #4]
    3390:	2102      	movs	r1, #2
    3392:	4430      	add	r0, r6
    3394:	4b17      	ldr	r3, [pc, #92]	; (33f4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1fc>)
    3396:	4798      	blx	r3
    3398:	4604      	mov	r4, r0

					grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    339a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    339e:	4621      	mov	r1, r4
    33a0:	4430      	add	r0, r6
    33a2:	4b15      	ldr	r3, [pc, #84]	; (33f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x200>)
    33a4:	4798      	blx	r3
					
					grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    33a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    33aa:	441e      	add	r6, r3
    33ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    33b0:	68f0      	ldr	r0, [r6, #12]
    33b2:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    33b6:	4b11      	ldr	r3, [pc, #68]	; (33fc <grid_module_en16_reva_hardware_transfer_complete_cb+0x204>)
    33b8:	4798      	blx	r3
    33ba:	e02f      	b.n	341c <grid_module_en16_reva_hardware_transfer_complete_cb+0x224>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    33bc:	2200      	movs	r2, #0
    33be:	4b11      	ldr	r3, [pc, #68]	; (3404 <grid_module_en16_reva_hardware_transfer_complete_cb+0x20c>)
    33c0:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    33c2:	4b11      	ldr	r3, [pc, #68]	; (3408 <grid_module_en16_reva_hardware_transfer_complete_cb+0x210>)
    33c4:	4798      	blx	r3
}
    33c6:	b009      	add	sp, #36	; 0x24
    33c8:	ecbd 8b04 	vpop	{d8-d9}
    33cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33d0:	00000000 	.word	0x00000000
    33d4:	40ed4c00 	.word	0x40ed4c00
    33d8:	00000000 	.word	0x00000000
    33dc:	3ff00000 	.word	0x3ff00000
    33e0:	41008000 	.word	0x41008000
    33e4:	200032d0 	.word	0x200032d0
    33e8:	0000475b 	.word	0x0000475b
    33ec:	20000668 	.word	0x20000668
    33f0:	0000e8a4 	.word	0x0000e8a4
    33f4:	00004e51 	.word	0x00004e51
    33f8:	00004ea9 	.word	0x00004ea9
    33fc:	00004e79 	.word	0x00004e79
    3400:	200067b8 	.word	0x200067b8
    3404:	20007960 	.word	0x20007960
    3408:	000031bd 	.word	0x000031bd
    340c:	200032c4 	.word	0x200032c4
    3410:	20000648 	.word	0x20000648
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    3414:	4b68      	ldr	r3, [pc, #416]	; (35b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c0>)
    3416:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    341a:	73ac      	strb	r4, [r5, #14]
    341c:	3701      	adds	r7, #1
	for (uint8_t j=0; j<16; j++){
    341e:	2f10      	cmp	r7, #16
    3420:	d0cc      	beq.n	33bc <grid_module_en16_reva_hardware_transfer_complete_cb+0x1c4>
    3422:	b2fa      	uxtb	r2, r7
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    3424:	0853      	lsrs	r3, r2, #1
    3426:	f819 4003 	ldrb.w	r4, [r9, r3]
    342a:	f002 0301 	and.w	r3, r2, #1
    342e:	009b      	lsls	r3, r3, #2
    3430:	411c      	asrs	r4, r3
    3432:	b2e4      	uxtb	r4, r4
    3434:	f004 060f 	and.w	r6, r4, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    3438:	eb09 0307 	add.w	r3, r9, r7
    343c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    3440:	b2db      	uxtb	r3, r3
		if (old_value != new_value){
    3442:	429e      	cmp	r6, r3
    3444:	d0ea      	beq.n	341c <grid_module_en16_reva_hardware_transfer_complete_cb+0x224>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    3446:	4b5d      	ldr	r3, [pc, #372]	; (35bc <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c4>)
    3448:	5cfd      	ldrb	r5, [r7, r3]
			UI_SPI_DEBUG = j;
    344a:	4b5d      	ldr	r3, [pc, #372]	; (35c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c8>)
    344c:	701a      	strb	r2, [r3, #0]
			uint8_t button_value = new_value>>2;
    344e:	ea4f 0e96 	mov.w	lr, r6, lsr #2
			uint8_t phase_a = (new_value>>1)&1;
    3452:	f3c6 0640 	ubfx	r6, r6, #1, #1
			uint8_t phase_b = (new_value)&1;
    3456:	f004 0401 	and.w	r4, r4, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    345a:	4b57      	ldr	r3, [pc, #348]	; (35b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c0>)
    345c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3460:	785b      	ldrb	r3, [r3, #1]
    3462:	4573      	cmp	r3, lr
    3464:	d03f      	beq.n	34e6 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ee>
				grid_ui_encoder_array[i].button_changed = 1;
    3466:	4b54      	ldr	r3, [pc, #336]	; (35b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c0>)
    3468:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    346c:	2201      	movs	r2, #1
    346e:	709a      	strb	r2, [r3, #2]
				grid_ui_encoder_array[i].button_value = new_value>>2;
    3470:	f883 e001 	strb.w	lr, [r3, #1]
				uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;						
    3474:	4b53      	ldr	r3, [pc, #332]	; (35c4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3cc>)
    3476:	685b      	ldr	r3, [r3, #4]
    3478:	ea4f 1805 	mov.w	r8, r5, lsl #4
    347c:	4443      	add	r3, r8
    347e:	f8d3 c004 	ldr.w	ip, [r3, #4]
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    3482:	4b51      	ldr	r3, [pc, #324]	; (35c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d0>)
    3484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3486:	f10d 0a20 	add.w	sl, sp, #32
    348a:	e90a 000f 	stmdb	sl, {r0, r1, r2, r3}
				if (grid_ui_encoder_array[i].button_value == 0){ // Button Press Event
    348e:	f1be 0f00 	cmp.w	lr, #0
    3492:	f47f af12 	bne.w	32ba <grid_module_en16_reva_hardware_transfer_complete_cb+0xc2>
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;
    3496:	f8cc 5000 	str.w	r5, [ip]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    349a:	4653      	mov	r3, sl
    349c:	442b      	add	r3, r5
    349e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    34a2:	f8cc 3004 	str.w	r3, [ip, #4]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7] = 127;
    34a6:	237f      	movs	r3, #127	; 0x7f
    34a8:	f8cc 3018 	str.w	r3, [ip, #24]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8] = 255;
    34ac:	23ff      	movs	r3, #255	; 0xff
    34ae:	f8cc 301c 	str.w	r3, [ip, #28]
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DP);
    34b2:	f8df b110 	ldr.w	fp, [pc, #272]	; 35c4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3cc>
    34b6:	f8db 0004 	ldr.w	r0, [fp, #4]
    34ba:	2105      	movs	r1, #5
    34bc:	4440      	add	r0, r8
    34be:	4b43      	ldr	r3, [pc, #268]	; (35cc <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d4>)
    34c0:	4798      	blx	r3
    34c2:	4682      	mov	sl, r0
					grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    34c4:	f8db 0004 	ldr.w	r0, [fp, #4]
    34c8:	4651      	mov	r1, sl
    34ca:	4440      	add	r0, r8
    34cc:	4b40      	ldr	r3, [pc, #256]	; (35d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d8>)
    34ce:	4798      	blx	r3
					grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    34d0:	f8db 3004 	ldr.w	r3, [fp, #4]
    34d4:	4498      	add	r8, r3
    34d6:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    34da:	f8d8 000c 	ldr.w	r0, [r8, #12]
    34de:	eb00 00ca 	add.w	r0, r0, sl, lsl #3
    34e2:	4b3c      	ldr	r3, [pc, #240]	; (35d4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3dc>)
    34e4:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[i].phase_a_previous;
    34e6:	4b34      	ldr	r3, [pc, #208]	; (35b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c0>)
    34e8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
			if (a_now != a_prev){
    34ec:	7b5b      	ldrb	r3, [r3, #13]
    34ee:	42b3      	cmp	r3, r6
    34f0:	d090      	beq.n	3414 <grid_module_en16_reva_hardware_transfer_complete_cb+0x21c>
					delta = +1;
    34f2:	42a6      	cmp	r6, r4
    34f4:	bf14      	ite	ne
    34f6:	f04f 38ff 	movne.w	r8, #4294967295
    34fa:	f04f 0801 	moveq.w	r8, #1
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    34fe:	4b2e      	ldr	r3, [pc, #184]	; (35b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c0>)
    3500:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3504:	735e      	strb	r6, [r3, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    3506:	739c      	strb	r4, [r3, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time);
    3508:	6899      	ldr	r1, [r3, #8]
    350a:	4833      	ldr	r0, [pc, #204]	; (35d8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    350c:	4b33      	ldr	r3, [pc, #204]	; (35dc <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>)
    350e:	4798      	blx	r3
    3510:	9003      	str	r0, [sp, #12]
				if (elapsed_time>400){
    3512:	9b03      	ldr	r3, [sp, #12]
    3514:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    3518:	bf84      	itt	hi
    351a:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    351e:	9303      	strhi	r3, [sp, #12]
				if (elapsed_time<20){
    3520:	9b03      	ldr	r3, [sp, #12]
    3522:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    3524:	bf9c      	itt	ls
    3526:	2314      	movls	r3, #20
    3528:	9303      	strls	r3, [sp, #12]
				uint16_t velocityfactor = (160000-elapsed_time*elapsed_time)/60000.0 + 1;
    352a:	9b03      	ldr	r3, [sp, #12]
    352c:	9803      	ldr	r0, [sp, #12]
    352e:	fb00 f003 	mul.w	r0, r0, r3
    3532:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    3536:	f500 7080 	add.w	r0, r0, #256	; 0x100
    353a:	4b29      	ldr	r3, [pc, #164]	; (35e0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e8>)
    353c:	4798      	blx	r3
    353e:	ec53 2b19 	vmov	r2, r3, d9
    3542:	4c28      	ldr	r4, [pc, #160]	; (35e4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ec>)
    3544:	47a0      	blx	r4
    3546:	ec53 2b18 	vmov	r2, r3, d8
    354a:	4c27      	ldr	r4, [pc, #156]	; (35e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f0>)
    354c:	47a0      	blx	r4
    354e:	4b27      	ldr	r3, [pc, #156]	; (35ec <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f4>)
    3550:	4798      	blx	r3
    3552:	b284      	uxth	r4, r0
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    3554:	4820      	ldr	r0, [pc, #128]	; (35d8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e0>)
    3556:	4b26      	ldr	r3, [pc, #152]	; (35f0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f8>)
    3558:	4798      	blx	r3
    355a:	4b17      	ldr	r3, [pc, #92]	; (35b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c0>)
    355c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3560:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    3562:	1c63      	adds	r3, r4, #1
    3564:	fb13 f308 	smulbb	r3, r3, r8
    3568:	b29b      	uxth	r3, r3
    356a:	b21a      	sxth	r2, r3
				if (delta<0){
    356c:	f1b8 0f00 	cmp.w	r8, #0
    3570:	f6ff aecb 	blt.w	330a <grid_module_en16_reva_hardware_transfer_complete_cb+0x112>
				else if (delta>0){
    3574:	f1b8 0f00 	cmp.w	r8, #0
    3578:	dd0c      	ble.n	3594 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39c>
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
    357a:	490f      	ldr	r1, [pc, #60]	; (35b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c0>)
    357c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    3580:	78c9      	ldrb	r1, [r1, #3]
    3582:	440a      	add	r2, r1
    3584:	2a7f      	cmp	r2, #127	; 0x7f
    3586:	f73f aed2 	bgt.w	332e <grid_module_en16_reva_hardware_transfer_complete_cb+0x136>
						grid_ui_encoder_array[i].rotation_value += xi;
    358a:	4a0b      	ldr	r2, [pc, #44]	; (35b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c0>)
    358c:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    3590:	440b      	add	r3, r1
    3592:	70d3      	strb	r3, [r2, #3]
				value = helper[bank][i];
    3594:	9b01      	ldr	r3, [sp, #4]
    3596:	461a      	mov	r2, r3
    3598:	eb09 1303 	add.w	r3, r9, r3, lsl #4
    359c:	442b      	add	r3, r5
    359e:	f893 3020 	ldrb.w	r3, [r3, #32]
				if (value + delta*velocityfactor < 0){
    35a2:	fb04 3108 	mla	r1, r4, r8, r3
    35a6:	2900      	cmp	r1, #0
    35a8:	f6ff aec7 	blt.w	333a <grid_module_en16_reva_hardware_transfer_complete_cb+0x142>
				else if (value + delta*velocityfactor > 127){
    35ac:	297f      	cmp	r1, #127	; 0x7f
    35ae:	f73f aec6 	bgt.w	333e <grid_module_en16_reva_hardware_transfer_complete_cb+0x146>
					value += delta*velocityfactor;
    35b2:	f001 04ff 	and.w	r4, r1, #255	; 0xff
    35b6:	e6c3      	b.n	3340 <grid_module_en16_reva_hardware_transfer_complete_cb+0x148>
    35b8:	200067b8 	.word	0x200067b8
    35bc:	20000310 	.word	0x20000310
    35c0:	200022ac 	.word	0x200022ac
    35c4:	200032c4 	.word	0x200032c4
    35c8:	0000e8a4 	.word	0x0000e8a4
    35cc:	00004e51 	.word	0x00004e51
    35d0:	00004ea9 	.word	0x00004ea9
    35d4:	00004e79 	.word	0x00004e79
    35d8:	200032d0 	.word	0x200032d0
    35dc:	000047b1 	.word	0x000047b1
    35e0:	0000cb29 	.word	0x0000cb29
    35e4:	0000ce69 	.word	0x0000ce69
    35e8:	0000c8b1 	.word	0x0000c8b1
    35ec:	0000d039 	.word	0x0000d039
    35f0:	000047ad 	.word	0x000047ad

000035f4 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    35f4:	b510      	push	{r4, lr}
    35f6:	4b0e      	ldr	r3, [pc, #56]	; (3630 <grid_module_en16_reva_hardware_init+0x3c>)
    35f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    35fc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    35fe:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3600:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3604:	629a      	str	r2, [r3, #40]	; 0x28
    3606:	4a0b      	ldr	r2, [pc, #44]	; (3634 <grid_module_en16_reva_hardware_init+0x40>)
    3608:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    360a:	4c0b      	ldr	r4, [pc, #44]	; (3638 <grid_module_en16_reva_hardware_init+0x44>)
    360c:	2103      	movs	r1, #3
    360e:	4620      	mov	r0, r4
    3610:	4b0a      	ldr	r3, [pc, #40]	; (363c <grid_module_en16_reva_hardware_init+0x48>)
    3612:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    3614:	490a      	ldr	r1, [pc, #40]	; (3640 <grid_module_en16_reva_hardware_init+0x4c>)
    3616:	4620      	mov	r0, r4
    3618:	4b0a      	ldr	r3, [pc, #40]	; (3644 <grid_module_en16_reva_hardware_init+0x50>)
    361a:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    361c:	490a      	ldr	r1, [pc, #40]	; (3648 <grid_module_en16_reva_hardware_init+0x54>)
    361e:	4620      	mov	r0, r4
    3620:	4b0a      	ldr	r3, [pc, #40]	; (364c <grid_module_en16_reva_hardware_init+0x58>)
    3622:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    3624:	4a0a      	ldr	r2, [pc, #40]	; (3650 <grid_module_en16_reva_hardware_init+0x5c>)
    3626:	2100      	movs	r1, #0
    3628:	4620      	mov	r0, r4
    362a:	4b0a      	ldr	r3, [pc, #40]	; (3654 <grid_module_en16_reva_hardware_init+0x60>)
    362c:	4798      	blx	r3
    362e:	bd10      	pop	{r4, pc}
    3630:	41008000 	.word	0x41008000
    3634:	c0000020 	.word	0xc0000020
    3638:	20000f44 	.word	0x20000f44
    363c:	00006211 	.word	0x00006211
    3640:	00061a80 	.word	0x00061a80
    3644:	000061d5 	.word	0x000061d5
    3648:	200022b0 	.word	0x200022b0
    364c:	000062f9 	.word	0x000062f9
    3650:	000031f9 	.word	0x000031f9
    3654:	000062b5 	.word	0x000062b5

00003658 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_report_model* mod){
    3658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    365c:	b0a3      	sub	sp, #140	; 0x8c
    365e:	4604      	mov	r4, r0
    3660:	9003      	str	r0, [sp, #12]
	
	
	grid_led_init(&grid_led_state, 16);
    3662:	2110      	movs	r1, #16
    3664:	4898      	ldr	r0, [pc, #608]	; (38c8 <grid_module_en16_reva_init+0x270>)
    3666:	4b99      	ldr	r3, [pc, #612]	; (38cc <grid_module_en16_reva_init+0x274>)
    3668:	4798      	blx	r3
	grid_report_model_init(mod, 0);
    366a:	2100      	movs	r1, #0
    366c:	4620      	mov	r0, r4
    366e:	4b98      	ldr	r3, [pc, #608]	; (38d0 <grid_module_en16_reva_init+0x278>)
    3670:	4798      	blx	r3
	
	grid_ui_model_init(&grid_ui_state, 16);	
    3672:	2110      	movs	r1, #16
    3674:	4897      	ldr	r0, [pc, #604]	; (38d4 <grid_module_en16_reva_init+0x27c>)
    3676:	4b98      	ldr	r3, [pc, #608]	; (38d8 <grid_module_en16_reva_init+0x280>)
    3678:	4798      	blx	r3
    367a:	f04f 0800 	mov.w	r8, #0
	
		grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_ENCODER);
		
		if (1){ // REGISTER BUTTON ACTION

			uint8_t payload_template[100] = {0};
    367e:	46c3      	mov	fp, r8
			uint8_t payload_length = 0;

			sprintf(payload_template, GRID_CLASS_MIDIRELATIVE_frame);
    3680:	f04f 0902 	mov.w	r9, #2

			uint8_t error = 0;

			grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);

			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length, 0, &error);
    3684:	46c2      	mov	sl, r8
		grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_ENCODER);
    3686:	4b93      	ldr	r3, [pc, #588]	; (38d4 <grid_module_en16_reva_init+0x27c>)
    3688:	6858      	ldr	r0, [r3, #4]
    368a:	2103      	movs	r1, #3
    368c:	4450      	add	r0, sl
    368e:	4b93      	ldr	r3, [pc, #588]	; (38dc <grid_module_en16_reva_init+0x284>)
    3690:	4798      	blx	r3
			uint8_t payload_template[100] = {0};
    3692:	2264      	movs	r2, #100	; 0x64
    3694:	4659      	mov	r1, fp
    3696:	a809      	add	r0, sp, #36	; 0x24
    3698:	4b91      	ldr	r3, [pc, #580]	; (38e0 <grid_module_en16_reva_init+0x288>)
    369a:	4798      	blx	r3
			sprintf(payload_template, GRID_CLASS_MIDIRELATIVE_frame);
    369c:	f04f 0803 	mov.w	r8, #3
    36a0:	f8cd 8000 	str.w	r8, [sp]
    36a4:	465b      	mov	r3, fp
    36a6:	464a      	mov	r2, r9
    36a8:	498e      	ldr	r1, [pc, #568]	; (38e4 <grid_module_en16_reva_init+0x28c>)
    36aa:	a809      	add	r0, sp, #36	; 0x24
    36ac:	4c8e      	ldr	r4, [pc, #568]	; (38e8 <grid_module_en16_reva_init+0x290>)
    36ae:	47a0      	blx	r4
			uint8_t error = 0;
    36b0:	ac22      	add	r4, sp, #136	; 0x88
    36b2:	f804 bd75 	strb.w	fp, [r4, #-117]!
			grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    36b6:	9400      	str	r4, [sp, #0]
    36b8:	230f      	movs	r3, #15
    36ba:	2201      	movs	r2, #1
    36bc:	2104      	movs	r1, #4
    36be:	a809      	add	r0, sp, #36	; 0x24
    36c0:	4d8a      	ldr	r5, [pc, #552]	; (38ec <grid_module_en16_reva_init+0x294>)
    36c2:	47a8      	blx	r5
			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length, 0, &error);
    36c4:	9400      	str	r4, [sp, #0]
    36c6:	465b      	mov	r3, fp
    36c8:	464a      	mov	r2, r9
    36ca:	2105      	movs	r1, #5
    36cc:	a809      	add	r0, sp, #36	; 0x24
    36ce:	47a8      	blx	r5
			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length , GRID_PARAMETER_MIDI_NOTEON, &error);
    36d0:	9400      	str	r4, [sp, #0]
    36d2:	2390      	movs	r3, #144	; 0x90
    36d4:	464a      	mov	r2, r9
    36d6:	2107      	movs	r1, #7
    36d8:	a809      	add	r0, sp, #36	; 0x24
    36da:	47a8      	blx	r5

			payload_length = strlen(payload_template);
    36dc:	a809      	add	r0, sp, #36	; 0x24
    36de:	4b84      	ldr	r3, [pc, #528]	; (38f0 <grid_module_en16_reva_init+0x298>)
    36e0:	4798      	blx	r3
    36e2:	b2c2      	uxtb	r2, r0

			uint8_t payload_length0 = payload_length;


			sprintf(&payload_template[payload_length], GRID_CLASS_LEDPHASE_frame);
    36e4:	ab09      	add	r3, sp, #36	; 0x24
    36e6:	9202      	str	r2, [sp, #8]
    36e8:	189f      	adds	r7, r3, r2
    36ea:	f8cd 8000 	str.w	r8, [sp]
    36ee:	2340      	movs	r3, #64	; 0x40
    36f0:	464a      	mov	r2, r9
    36f2:	4980      	ldr	r1, [pc, #512]	; (38f4 <grid_module_en16_reva_init+0x29c>)
    36f4:	4638      	mov	r0, r7
    36f6:	4e7c      	ldr	r6, [pc, #496]	; (38e8 <grid_module_en16_reva_init+0x290>)
    36f8:	47b0      	blx	r6

			grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    36fa:	9400      	str	r4, [sp, #0]
    36fc:	230f      	movs	r3, #15
    36fe:	2201      	movs	r2, #1
    3700:	2104      	movs	r1, #4
    3702:	4638      	mov	r0, r7
    3704:	47a8      	blx	r5

			grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_LEDPHASE_LAYERNUMBER_offset, GRID_CLASS_LEDPHASE_LAYERNUMBER_length, GRID_LED_LAYER_UI_B, &error);
    3706:	9400      	str	r4, [sp, #0]
    3708:	464b      	mov	r3, r9
    370a:	464a      	mov	r2, r9
    370c:	2105      	movs	r1, #5
    370e:	4638      	mov	r0, r7
    3710:	47a8      	blx	r5


			payload_length += strlen(&payload_template[payload_length]);
    3712:	4638      	mov	r0, r7
    3714:	4b76      	ldr	r3, [pc, #472]	; (38f0 <grid_module_en16_reva_init+0x298>)
    3716:	4798      	blx	r3

			uint8_t parameter_list_length = 4;
			struct grid_ui_action_parameter parameter_list[4];

			// MIDI NOTE NUMBER
			parameter_list[0].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    3718:	f88d b015 	strb.w	fp, [sp, #21]
			parameter_list[0].offset  = GRID_CLASS_MIDIRELATIVE_PARAM1_offset;
    371c:	f04f 0309 	mov.w	r3, #9
    3720:	f88d 3017 	strb.w	r3, [sp, #23]
			parameter_list[0].length  = GRID_CLASS_MIDIRELATIVE_PARAM1_length;
    3724:	f88d 9016 	strb.w	r9, [sp, #22]

			// MIDI NOTE VELOCITY
			parameter_list[1].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7;
    3728:	f04f 0306 	mov.w	r3, #6
    372c:	f88d 3019 	strb.w	r3, [sp, #25]
			parameter_list[1].offset  = GRID_CLASS_MIDIRELATIVE_PARAM2_offset;
    3730:	f04f 030b 	mov.w	r3, #11
    3734:	f88d 301b 	strb.w	r3, [sp, #27]
			parameter_list[1].length  = GRID_CLASS_MIDIRELATIVE_PARAM2_length;
    3738:	f88d 901a 	strb.w	r9, [sp, #26]

			// LED NUMBER
			parameter_list[2].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    373c:	f88d b01d 	strb.w	fp, [sp, #29]
			parameter_list[2].offset  = payload_length0 + GRID_CLASS_LEDPHASE_LEDNUMBER_offset;
    3740:	9902      	ldr	r1, [sp, #8]
    3742:	460b      	mov	r3, r1
    3744:	3307      	adds	r3, #7
    3746:	f88d 301f 	strb.w	r3, [sp, #31]
			parameter_list[2].length  = GRID_CLASS_LEDPHASE_LEDNUMBER_length;
    374a:	f88d 901e 	strb.w	r9, [sp, #30]

			// LED PHASE VALUE
			parameter_list[3].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8;
    374e:	f04f 0307 	mov.w	r3, #7
    3752:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			parameter_list[3].offset  = payload_length0 + GRID_CLASS_LEDPHASE_PHASE_offset;
    3756:	f101 0309 	add.w	r3, r1, #9
    375a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			parameter_list[3].length  = GRID_CLASS_LEDPHASE_PHASE_length;
    375e:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22


			// Register Digital Press Action
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DP, payload_template, payload_length, parameter_list, parameter_list_length);
    3762:	4b5c      	ldr	r3, [pc, #368]	; (38d4 <grid_module_en16_reva_init+0x27c>)
    3764:	685f      	ldr	r7, [r3, #4]
			payload_length += strlen(&payload_template[payload_length]);
    3766:	460b      	mov	r3, r1
    3768:	4403      	add	r3, r0
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DP, payload_template, payload_length, parameter_list, parameter_list_length);
    376a:	b2de      	uxtb	r6, r3
    376c:	2304      	movs	r3, #4
    376e:	9301      	str	r3, [sp, #4]
    3770:	ab05      	add	r3, sp, #20
    3772:	9300      	str	r3, [sp, #0]
    3774:	4633      	mov	r3, r6
    3776:	aa09      	add	r2, sp, #36	; 0x24
    3778:	2105      	movs	r1, #5
    377a:	eb07 000a 	add.w	r0, r7, sl
    377e:	4f5e      	ldr	r7, [pc, #376]	; (38f8 <grid_module_en16_reva_init+0x2a0>)
    3780:	47b8      	blx	r7

			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length , GRID_PARAMETER_MIDI_NOTEOFF, &error);
    3782:	9400      	str	r4, [sp, #0]
    3784:	2380      	movs	r3, #128	; 0x80
    3786:	464a      	mov	r2, r9
    3788:	2107      	movs	r1, #7
    378a:	a809      	add	r0, sp, #36	; 0x24
    378c:	47a8      	blx	r5

			// Register Digital Release Action
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DR, payload_template, payload_length, parameter_list, parameter_list_length);
    378e:	4b51      	ldr	r3, [pc, #324]	; (38d4 <grid_module_en16_reva_init+0x27c>)
    3790:	6858      	ldr	r0, [r3, #4]
    3792:	2304      	movs	r3, #4
    3794:	9301      	str	r3, [sp, #4]
    3796:	ab05      	add	r3, sp, #20
    3798:	9300      	str	r3, [sp, #0]
    379a:	4633      	mov	r3, r6
    379c:	aa09      	add	r2, sp, #36	; 0x24
    379e:	2106      	movs	r1, #6
    37a0:	4450      	add	r0, sl
    37a2:	47b8      	blx	r7
			
		}
						
		if (1){ // Register rotation action
			
			uint8_t payload_template[100] = {0};
    37a4:	2264      	movs	r2, #100	; 0x64
    37a6:	4659      	mov	r1, fp
    37a8:	a809      	add	r0, sp, #36	; 0x24
    37aa:	4b4d      	ldr	r3, [pc, #308]	; (38e0 <grid_module_en16_reva_init+0x288>)
    37ac:	4798      	blx	r3
			uint8_t payload_length = 0;			
			
			sprintf(payload_template, GRID_CLASS_MIDIRELATIVE_frame);
    37ae:	f8cd 8000 	str.w	r8, [sp]
    37b2:	465b      	mov	r3, fp
    37b4:	464a      	mov	r2, r9
    37b6:	494b      	ldr	r1, [pc, #300]	; (38e4 <grid_module_en16_reva_init+0x28c>)
    37b8:	a809      	add	r0, sp, #36	; 0x24
    37ba:	4e4b      	ldr	r6, [pc, #300]	; (38e8 <grid_module_en16_reva_init+0x290>)
    37bc:	47b0      	blx	r6
			uint8_t error = 0;
    37be:	f88d b013 	strb.w	fp, [sp, #19]

			grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    37c2:	9400      	str	r4, [sp, #0]
    37c4:	230f      	movs	r3, #15
    37c6:	2201      	movs	r2, #1
    37c8:	2104      	movs	r1, #4
    37ca:	a809      	add	r0, sp, #36	; 0x24
    37cc:	47a8      	blx	r5

			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length, 0, &error);
    37ce:	9400      	str	r4, [sp, #0]
    37d0:	465b      	mov	r3, fp
    37d2:	464a      	mov	r2, r9
    37d4:	2105      	movs	r1, #5
    37d6:	a809      	add	r0, sp, #36	; 0x24
    37d8:	47a8      	blx	r5
			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length , GRID_PARAMETER_MIDI_CONTROLCHANGE, &error);
    37da:	9400      	str	r4, [sp, #0]
    37dc:	23b0      	movs	r3, #176	; 0xb0
    37de:	464a      	mov	r2, r9
    37e0:	2107      	movs	r1, #7
    37e2:	a809      	add	r0, sp, #36	; 0x24
    37e4:	47a8      	blx	r5

			payload_length = strlen(payload_template);
    37e6:	a809      	add	r0, sp, #36	; 0x24
    37e8:	4b41      	ldr	r3, [pc, #260]	; (38f0 <grid_module_en16_reva_init+0x298>)
    37ea:	4798      	blx	r3
    37ec:	b2c6      	uxtb	r6, r0

			uint8_t payload_length0 = payload_length;


			sprintf(&payload_template[payload_length], GRID_CLASS_LEDPHASE_frame);
    37ee:	ab09      	add	r3, sp, #36	; 0x24
    37f0:	4433      	add	r3, r6
    37f2:	4618      	mov	r0, r3
    37f4:	f8cd 8000 	str.w	r8, [sp]
    37f8:	2340      	movs	r3, #64	; 0x40
    37fa:	464a      	mov	r2, r9
    37fc:	493d      	ldr	r1, [pc, #244]	; (38f4 <grid_module_en16_reva_init+0x29c>)
    37fe:	9002      	str	r0, [sp, #8]
    3800:	4f39      	ldr	r7, [pc, #228]	; (38e8 <grid_module_en16_reva_init+0x290>)
    3802:	47b8      	blx	r7

			grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    3804:	9400      	str	r4, [sp, #0]
    3806:	230f      	movs	r3, #15
    3808:	2201      	movs	r2, #1
    380a:	2104      	movs	r1, #4
    380c:	9f02      	ldr	r7, [sp, #8]
    380e:	4638      	mov	r0, r7
    3810:	47a8      	blx	r5

			grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_LEDPHASE_LAYERNUMBER_offset, GRID_CLASS_LEDPHASE_LAYERNUMBER_length, GRID_LED_LAYER_UI_A, &error);
    3812:	9400      	str	r4, [sp, #0]
    3814:	2301      	movs	r3, #1
    3816:	464a      	mov	r2, r9
    3818:	2105      	movs	r1, #5
    381a:	4638      	mov	r0, r7
    381c:	47a8      	blx	r5


			payload_length += strlen(&payload_template[payload_length]);
    381e:	4638      	mov	r0, r7
    3820:	4b33      	ldr	r3, [pc, #204]	; (38f0 <grid_module_en16_reva_init+0x298>)
    3822:	4798      	blx	r3

			uint8_t parameter_list_length = 4;
			struct grid_ui_action_parameter parameter_list[4];

			// MIDI NOTE NUMBER
			parameter_list[0].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    3824:	f88d b015 	strb.w	fp, [sp, #21]
			parameter_list[0].offset  = GRID_CLASS_MIDIRELATIVE_PARAM1_offset;
    3828:	f04f 0309 	mov.w	r3, #9
    382c:	f88d 3017 	strb.w	r3, [sp, #23]
			parameter_list[0].length  = GRID_CLASS_MIDIRELATIVE_PARAM1_length;
    3830:	f88d 9016 	strb.w	r9, [sp, #22]

			// MIDI NOTE VELOCITY
			parameter_list[1].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_AV7;
    3834:	f88d 9019 	strb.w	r9, [sp, #25]
			parameter_list[1].offset  = GRID_CLASS_MIDIRELATIVE_PARAM2_offset;
    3838:	f04f 030b 	mov.w	r3, #11
    383c:	f88d 301b 	strb.w	r3, [sp, #27]
			parameter_list[1].length  = GRID_CLASS_MIDIRELATIVE_PARAM2_length;
    3840:	f88d 901a 	strb.w	r9, [sp, #26]

			// LED NUMBER
			parameter_list[2].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    3844:	f88d b01d 	strb.w	fp, [sp, #29]
			parameter_list[2].offset  = payload_length0 + GRID_CLASS_LEDPHASE_LEDNUMBER_offset;
    3848:	1df3      	adds	r3, r6, #7
    384a:	f88d 301f 	strb.w	r3, [sp, #31]
			parameter_list[2].length  = GRID_CLASS_LEDPHASE_LEDNUMBER_length;
    384e:	f88d 901e 	strb.w	r9, [sp, #30]

			// LED PHASE VALUE
			parameter_list[3].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_AV8;
    3852:	f88d 8021 	strb.w	r8, [sp, #33]	; 0x21
			parameter_list[3].offset  = payload_length0 + GRID_CLASS_LEDPHASE_PHASE_offset;
    3856:	f106 0309 	add.w	r3, r6, #9
    385a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			parameter_list[3].length  = GRID_CLASS_LEDPHASE_PHASE_length;
    385e:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22


			// Register Absolute Value Change
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_AVC7, payload_template, payload_length, parameter_list, parameter_list_length);
    3862:	4b1c      	ldr	r3, [pc, #112]	; (38d4 <grid_module_en16_reva_init+0x27c>)
    3864:	685c      	ldr	r4, [r3, #4]
			payload_length += strlen(&payload_template[payload_length]);
    3866:	1833      	adds	r3, r6, r0
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_AVC7, payload_template, payload_length, parameter_list, parameter_list_length);
    3868:	2204      	movs	r2, #4
    386a:	9201      	str	r2, [sp, #4]
    386c:	aa05      	add	r2, sp, #20
    386e:	9200      	str	r2, [sp, #0]
    3870:	b2db      	uxtb	r3, r3
    3872:	aa09      	add	r2, sp, #36	; 0x24
    3874:	4649      	mov	r1, r9
    3876:	eb04 000a 	add.w	r0, r4, sl
    387a:	4c1f      	ldr	r4, [pc, #124]	; (38f8 <grid_module_en16_reva_init+0x2a0>)
    387c:	47a0      	blx	r4
    387e:	f10a 0a10 	add.w	sl, sl, #16
	for(uint8_t i=0; i<16; i++){
    3882:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
    3886:	f47f aefe 	bne.w	3686 <grid_module_en16_reva_init+0x2e>
			
		}		
						
	}
	
	grid_report_sys_init(mod);
    388a:	9803      	ldr	r0, [sp, #12]
    388c:	4b1b      	ldr	r3, [pc, #108]	; (38fc <grid_module_en16_reva_init+0x2a4>)
    388e:	4798      	blx	r3
    3890:	4b1b      	ldr	r3, [pc, #108]	; (3900 <grid_module_en16_reva_init+0x2a8>)
    3892:	2000      	movs	r0, #0
	// initialize local encoder helper struct
	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
		
		grid_ui_encoder_array[i].button_value = 1;
    3894:	2101      	movs	r1, #1
		grid_ui_encoder_array[i].button_changed = 0; 
    3896:	4602      	mov	r2, r0
		grid_ui_encoder_array[i].rotation_value = 0;
		grid_ui_encoder_array[i].rotation_changed = 1;
		grid_ui_encoder_array[i].rotation_direction = 0;
		grid_ui_encoder_array[i].last_real_time = -1;
    3898:	f04f 34ff 	mov.w	r4, #4294967295
		grid_ui_encoder_array[i].controller_number = i;
    389c:	7018      	strb	r0, [r3, #0]
		grid_ui_encoder_array[i].button_value = 1;
    389e:	7059      	strb	r1, [r3, #1]
		grid_ui_encoder_array[i].button_changed = 0; 
    38a0:	709a      	strb	r2, [r3, #2]
		grid_ui_encoder_array[i].rotation_value = 0;
    38a2:	70da      	strb	r2, [r3, #3]
		grid_ui_encoder_array[i].rotation_changed = 1;
    38a4:	7119      	strb	r1, [r3, #4]
		grid_ui_encoder_array[i].rotation_direction = 0;
    38a6:	715a      	strb	r2, [r3, #5]
		grid_ui_encoder_array[i].last_real_time = -1;
    38a8:	609c      	str	r4, [r3, #8]
		grid_ui_encoder_array[i].velocity = 0;
    38aa:	731a      	strb	r2, [r3, #12]
		grid_ui_encoder_array[i].phase_a_previous = 1;
    38ac:	7359      	strb	r1, [r3, #13]
		grid_ui_encoder_array[i].phase_b_previous = 1;	
    38ae:	7399      	strb	r1, [r3, #14]
    38b0:	3001      	adds	r0, #1
    38b2:	3310      	adds	r3, #16
	for (uint8_t i = 0; i<16; i++)
    38b4:	2810      	cmp	r0, #16
    38b6:	d1f1      	bne.n	389c <grid_module_en16_reva_init+0x244>
		
	}
	
	
	grid_module_en16_reva_hardware_init();
    38b8:	4b12      	ldr	r3, [pc, #72]	; (3904 <grid_module_en16_reva_init+0x2ac>)
    38ba:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    38bc:	4b12      	ldr	r3, [pc, #72]	; (3908 <grid_module_en16_reva_init+0x2b0>)
    38be:	4798      	blx	r3
	
}
    38c0:	b023      	add	sp, #140	; 0x8c
    38c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38c6:	bf00      	nop
    38c8:	20007944 	.word	0x20007944
    38cc:	00002a55 	.word	0x00002a55
    38d0:	00004c4d 	.word	0x00004c4d
    38d4:	200032c4 	.word	0x200032c4
    38d8:	00004c6d 	.word	0x00004c6d
    38dc:	00004cf9 	.word	0x00004cf9
    38e0:	0000d0e7 	.word	0x0000d0e7
    38e4:	0000e7e4 	.word	0x0000e7e4
    38e8:	0000d4d5 	.word	0x0000d4d5
    38ec:	00004bf9 	.word	0x00004bf9
    38f0:	0000d51d 	.word	0x0000d51d
    38f4:	0000e894 	.word	0x0000e894
    38f8:	00004dbd 	.word	0x00004dbd
    38fc:	00004fad 	.word	0x00004fad
    3900:	200067b8 	.word	0x200067b8
    3904:	000035f5 	.word	0x000035f5
    3908:	000031bd 	.word	0x000031bd

0000390c <grid_module_pbf4_reva_hardware_start_transfer>:
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

static uint8_t helper[16] = {0};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    390c:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    390e:	4803      	ldr	r0, [pc, #12]	; (391c <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    3910:	4c03      	ldr	r4, [pc, #12]	; (3920 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    3912:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3914:	4803      	ldr	r0, [pc, #12]	; (3924 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    3916:	47a0      	blx	r4
    3918:	bd10      	pop	{r4, pc}
    391a:	bf00      	nop
    391c:	20001050 	.word	0x20001050
    3920:	00005bd9 	.word	0x00005bd9
    3924:	20001224 	.word	0x20001224

00003928 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    3928:	4ba9      	ldr	r3, [pc, #676]	; (3bd0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    392a:	781b      	ldrb	r3, [r3, #0]
    392c:	2b00      	cmp	r3, #0
    392e:	f000 809d 	beq.w	3a6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x144>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    3932:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3936:	b089      	sub	sp, #36	; 0x24
	struct grid_report_model* mod = &grid_report_state;
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3938:	2300      	movs	r3, #0
    393a:	f8ad 301e 	strh.w	r3, [sp, #30]
	uint16_t adcresult_1 = 0;
    393e:	f8ad 301c 	strh.w	r3, [sp, #28]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    3942:	4ba4      	ldr	r3, [pc, #656]	; (3bd4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    3944:	781a      	ldrb	r2, [r3, #0]
    3946:	3208      	adds	r2, #8
    3948:	49a3      	ldr	r1, [pc, #652]	; (3bd8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    394a:	5c8e      	ldrb	r6, [r1, r2]
    394c:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    394e:	781a      	ldrb	r2, [r3, #0]
    3950:	b2d2      	uxtb	r2, r2
    3952:	5c8d      	ldrb	r5, [r1, r2]
    3954:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    3956:	781a      	ldrb	r2, [r3, #0]
    3958:	3201      	adds	r2, #1
    395a:	b2d2      	uxtb	r2, r2
    395c:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    395e:	781a      	ldrb	r2, [r3, #0]
    3960:	f002 0207 	and.w	r2, r2, #7
    3964:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    3966:	781b      	ldrb	r3, [r3, #0]
    3968:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    396c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3970:	4b9a      	ldr	r3, [pc, #616]	; (3bdc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    3972:	bf14      	ite	ne
    3974:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3978:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    397c:	4b95      	ldr	r3, [pc, #596]	; (3bd4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    397e:	781b      	ldrb	r3, [r3, #0]
    3980:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3984:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3988:	4b94      	ldr	r3, [pc, #592]	; (3bdc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    398a:	bf14      	ite	ne
    398c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3990:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    3994:	4b8f      	ldr	r3, [pc, #572]	; (3bd4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    3996:	781b      	ldrb	r3, [r3, #0]
    3998:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    399c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    39a0:	4b8e      	ldr	r3, [pc, #568]	; (3bdc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    39a2:	bf14      	ite	ne
    39a4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    39a8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    39ac:	2302      	movs	r3, #2
    39ae:	f10d 021e 	add.w	r2, sp, #30
    39b2:	2100      	movs	r1, #0
    39b4:	488a      	ldr	r0, [pc, #552]	; (3be0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    39b6:	4c8b      	ldr	r4, [pc, #556]	; (3be4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    39b8:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    39ba:	2302      	movs	r3, #2
    39bc:	aa07      	add	r2, sp, #28
    39be:	2100      	movs	r1, #0
    39c0:	4889      	ldr	r0, [pc, #548]	; (3be8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    39c2:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    39c4:	f8df b240 	ldr.w	fp, [pc, #576]	; 3c08 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>
    39c8:	f8bd 001e 	ldrh.w	r0, [sp, #30]
    39cc:	47d8      	blx	fp
    39ce:	f8df a23c 	ldr.w	sl, [pc, #572]	; 3c0c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>
    39d2:	a37d      	add	r3, pc, #500	; (adr r3, 3bc8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    39d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    39d8:	47d0      	blx	sl
    39da:	f8df 9234 	ldr.w	r9, [pc, #564]	; 3c10 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>
    39de:	47c8      	blx	r9
    39e0:	f64f 74ff 	movw	r4, #65535	; 0xffff
    39e4:	42a0      	cmp	r0, r4
    39e6:	bf28      	it	cs
    39e8:	4620      	movcs	r0, r4
    39ea:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    39ec:	fa1f f880 	uxth.w	r8, r0
    39f0:	f8ad 801e 	strh.w	r8, [sp, #30]
	
	uint32_t input_1 = adcresult_1*1.03;
    39f4:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    39f8:	47d8      	blx	fp
    39fa:	a373      	add	r3, pc, #460	; (adr r3, 3bc8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    39fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a00:	47d0      	blx	sl
    3a02:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    3a04:	42a0      	cmp	r0, r4
    3a06:	bf28      	it	cs
    3a08:	4620      	movcs	r0, r4
    3a0a:	b280      	uxth	r0, r0
    3a0c:	f8ad 001c 	strh.w	r0, [sp, #28]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    3a10:	f1a5 0308 	sub.w	r3, r5, #8
    3a14:	b2db      	uxtb	r3, r3
    3a16:	2b01      	cmp	r3, #1
    3a18:	f240 80bf 	bls.w	3b9a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x272>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    3a1c:	2e0d      	cmp	r6, #13
    3a1e:	f240 8094 	bls.w	3b4a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x222>

		uint8_t result_index[2] = {0};
    3a22:	2300      	movs	r3, #0
		uint8_t result_value[2] = {0};
    3a24:	f8ad 3004 	strh.w	r3, [sp, #4]
		uint8_t result_valid[2] = {0};
    3a28:	f8ad 3008 	strh.w	r3, [sp, #8]
		
		result_index[0] = adc_index_0-4;
    3a2c:	3e04      	subs	r6, #4
    3a2e:	f88d 6000 	strb.w	r6, [sp]
		result_index[1] = adc_index_1-4;
    3a32:	3d04      	subs	r5, #4
    3a34:	f88d 5001 	strb.w	r5, [sp, #1]
		
		uint8_t adcresult_0_valid = 0;
	
		if (adcresult_0>60000){
    3a38:	f64e 2360 	movw	r3, #60000	; 0xea60
    3a3c:	4598      	cmp	r8, r3
    3a3e:	d91b      	bls.n	3a78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x150>
			result_value[0] = 0;
			result_valid[0] = 1;
    3a40:	2301      	movs	r3, #1
    3a42:	f88d 3008 	strb.w	r3, [sp, #8]
			result_valid[0] = 1;
		}
	
		uint8_t adcresult_1_valid = 0;
	
		if (adcresult_1>60000){
    3a46:	f64e 2360 	movw	r3, #60000	; 0xea60
    3a4a:	4298      	cmp	r0, r3
    3a4c:	d91e      	bls.n	3a8c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x164>
			result_value[1] = 0;
			result_valid[1] = 1;
    3a4e:	2301      	movs	r3, #1
    3a50:	f88d 3009 	strb.w	r3, [sp, #9]
			result_value[1] = 127;
			result_valid[1] = 1;
		}


		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    3a54:	4b65      	ldr	r3, [pc, #404]	; (3bec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    3a56:	ac03      	add	r4, sp, #12
    3a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3a5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3a5e:	2400      	movs	r4, #0
			// Helper variable for readability
			uint8_t res_index = result_index[i];
			uint8_t res_valid = result_valid[i];
			uint8_t res_value = result_value[i];
		
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3a60:	4f63      	ldr	r7, [pc, #396]	; (3bf0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
		
			if (res_value != helper[res_index] && res_valid == 1){
    3a62:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 3c14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>

					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7] = 0;
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8] = 0;

				
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DR);
    3a66:	f8df 919c 	ldr.w	r9, [pc, #412]	; 3c04 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>
    3a6a:	e03a      	b.n	3ae2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1ba>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    3a6c:	4a58      	ldr	r2, [pc, #352]	; (3bd0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    3a6e:	7813      	ldrb	r3, [r2, #0]
    3a70:	3301      	adds	r3, #1
    3a72:	b2db      	uxtb	r3, r3
    3a74:	7013      	strb	r3, [r2, #0]
    3a76:	4770      	bx	lr
		else if (adcresult_0<200){
    3a78:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
    3a7c:	d8e3      	bhi.n	3a46 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x11e>
			result_value[0] = 127;
    3a7e:	237f      	movs	r3, #127	; 0x7f
    3a80:	f88d 3004 	strb.w	r3, [sp, #4]
			result_valid[0] = 1;
    3a84:	2301      	movs	r3, #1
    3a86:	f88d 3008 	strb.w	r3, [sp, #8]
    3a8a:	e7dc      	b.n	3a46 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x11e>
		else if (adcresult_1<200){
    3a8c:	28c7      	cmp	r0, #199	; 0xc7
    3a8e:	d8e1      	bhi.n	3a54 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x12c>
			result_value[1] = 127;
    3a90:	237f      	movs	r3, #127	; 0x7f
    3a92:	f88d 3005 	strb.w	r3, [sp, #5]
			result_valid[1] = 1;
    3a96:	2301      	movs	r3, #1
    3a98:	f88d 3009 	strb.w	r3, [sp, #9]
    3a9c:	e7da      	b.n	3a54 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x12c>
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;
    3a9e:	6015      	str	r5, [r2, #0]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    3aa0:	ab08      	add	r3, sp, #32
    3aa2:	442b      	add	r3, r5
    3aa4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    3aa8:	6053      	str	r3, [r2, #4]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7] = 0;
    3aaa:	2300      	movs	r3, #0
    3aac:	6193      	str	r3, [r2, #24]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8] = 0;
    3aae:	61d3      	str	r3, [r2, #28]
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DR);
    3ab0:	6878      	ldr	r0, [r7, #4]
    3ab2:	2106      	movs	r1, #6
    3ab4:	4450      	add	r0, sl
    3ab6:	47c8      	blx	r9
    3ab8:	4683      	mov	fp, r0
				
					grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    3aba:	6878      	ldr	r0, [r7, #4]
    3abc:	4659      	mov	r1, fp
    3abe:	4450      	add	r0, sl
    3ac0:	4b4c      	ldr	r3, [pc, #304]	; (3bf4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    3ac2:	4798      	blx	r3
				
					grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    3ac4:	687b      	ldr	r3, [r7, #4]
    3ac6:	449a      	add	sl, r3
    3ac8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    3acc:	f8da 000c 	ldr.w	r0, [sl, #12]
    3ad0:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
    3ad4:	4b48      	ldr	r3, [pc, #288]	; (3bf8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    3ad6:	4798      	blx	r3

					helper[result_index[i]] = res_value;
    3ad8:	f808 6005 	strb.w	r6, [r8, r5]
    3adc:	3401      	adds	r4, #1
		for (uint8_t i=0; i<2; i++)
    3ade:	2c02      	cmp	r4, #2
    3ae0:	d05b      	beq.n	3b9a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x272>
			uint8_t res_index = result_index[i];
    3ae2:	f81d 5004 	ldrb.w	r5, [sp, r4]
			uint8_t res_value = result_value[i];
    3ae6:	ab01      	add	r3, sp, #4
    3ae8:	5ce6      	ldrb	r6, [r4, r3]
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3aea:	687a      	ldr	r2, [r7, #4]
			if (res_value != helper[res_index] && res_valid == 1){
    3aec:	f818 3005 	ldrb.w	r3, [r8, r5]
    3af0:	429e      	cmp	r6, r3
    3af2:	d0f3      	beq.n	3adc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b4>
			uint8_t res_valid = result_valid[i];
    3af4:	a902      	add	r1, sp, #8
			if (res_value != helper[res_index] && res_valid == 1){
    3af6:	5c61      	ldrb	r1, [r4, r1]
    3af8:	2901      	cmp	r1, #1
    3afa:	d1ef      	bne.n	3adc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b4>
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3afc:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    3b00:	4452      	add	r2, sl
    3b02:	6852      	ldr	r2, [r2, #4]
				if (helper[res_index] == 0){ // Button Press Event
    3b04:	2b00      	cmp	r3, #0
    3b06:	d1ca      	bne.n	3a9e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x176>
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;
    3b08:	6015      	str	r5, [r2, #0]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    3b0a:	ab08      	add	r3, sp, #32
    3b0c:	442b      	add	r3, r5
    3b0e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    3b12:	6053      	str	r3, [r2, #4]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7] = 127;
    3b14:	237f      	movs	r3, #127	; 0x7f
    3b16:	6193      	str	r3, [r2, #24]
					template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8] = 255;
    3b18:	23ff      	movs	r3, #255	; 0xff
    3b1a:	61d3      	str	r3, [r2, #28]
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_DP);
    3b1c:	6878      	ldr	r0, [r7, #4]
    3b1e:	2105      	movs	r1, #5
    3b20:	4450      	add	r0, sl
    3b22:	47c8      	blx	r9
    3b24:	4683      	mov	fp, r0
					grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    3b26:	6878      	ldr	r0, [r7, #4]
    3b28:	4659      	mov	r1, fp
    3b2a:	4450      	add	r0, sl
    3b2c:	4b31      	ldr	r3, [pc, #196]	; (3bf4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    3b2e:	4798      	blx	r3
					grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	449a      	add	sl, r3
    3b34:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    3b38:	f8da 000c 	ldr.w	r0, [sl, #12]
    3b3c:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
    3b40:	4b2d      	ldr	r3, [pc, #180]	; (3bf8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    3b42:	4798      	blx	r3
					helper[result_index[i]] = res_value;
    3b44:	f808 6005 	strb.w	r6, [r8, r5]
    3b48:	e7c8      	b.n	3adc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b4>
		

	}
	else{ // POTENTIOMETER OR FADER
		
		if (adc_index_1 == 0 || adc_index_1 == 1){
    3b4a:	2d01      	cmp	r5, #1
    3b4c:	d92d      	bls.n	3baa <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x282>
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
			
		}
		else{
			// normal fader polarity			
			grid_ain_add_sample(adc_index_0, adcresult_0);
    3b4e:	b2b9      	uxth	r1, r7
    3b50:	4630      	mov	r0, r6
    3b52:	4c2a      	ldr	r4, [pc, #168]	; (3bfc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    3b54:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    3b56:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    3b5a:	4628      	mov	r0, r5
    3b5c:	47a0      	blx	r4
		}
			

		uint8_t result_index[2] = {0};
	
		result_index[0] = adc_index_0;
    3b5e:	f88d 6008 	strb.w	r6, [sp, #8]
		result_index[1] = adc_index_1;
    3b62:	f88d 5009 	strb.w	r5, [sp, #9]


		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    3b66:	4b21      	ldr	r3, [pc, #132]	; (3bec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    3b68:	ac03      	add	r4, sp, #12
    3b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3b70:	ad02      	add	r5, sp, #8
    3b72:	f10d 090a 	add.w	r9, sp, #10
		{
		
			// Helper variable for readability
			uint8_t res_index = result_index[i];

			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3b76:	4f1e      	ldr	r7, [pc, #120]	; (3bf0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
		
			if (grid_ain_get_changed(res_index)){
    3b78:	f8df 809c 	ldr.w	r8, [pc, #156]	; 3c18 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>
			
				uint8_t res_value = grid_ain_get_average(res_index, 7);
    3b7c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 3c1c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>
			uint8_t res_index = result_index[i];
    3b80:	f815 4b01 	ldrb.w	r4, [r5], #1
			uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    3b84:	687b      	ldr	r3, [r7, #4]
    3b86:	0126      	lsls	r6, r4, #4
    3b88:	4433      	add	r3, r6
    3b8a:	f8d3 b004 	ldr.w	fp, [r3, #4]
			if (grid_ain_get_changed(res_index)){
    3b8e:	4620      	mov	r0, r4
    3b90:	47c0      	blx	r8
    3b92:	2800      	cmp	r0, #0
    3b94:	d144      	bne.n	3c20 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>
		for (uint8_t i=0; i<2; i++)
    3b96:	454d      	cmp	r5, r9
    3b98:	d1f2      	bne.n	3b80 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x258>
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    3b9a:	2200      	movs	r2, #0
    3b9c:	4b0c      	ldr	r3, [pc, #48]	; (3bd0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    3b9e:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    3ba0:	4b17      	ldr	r3, [pc, #92]	; (3c00 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    3ba2:	4798      	blx	r3
}
    3ba4:	b009      	add	sp, #36	; 0x24
    3ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    3baa:	b2b9      	uxth	r1, r7
    3bac:	f64f 78ff 	movw	r8, #65535	; 0xffff
    3bb0:	eba8 0101 	sub.w	r1, r8, r1
    3bb4:	4630      	mov	r0, r6
    3bb6:	4c11      	ldr	r4, [pc, #68]	; (3bfc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    3bb8:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    3bba:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    3bbe:	eba8 0101 	sub.w	r1, r8, r1
    3bc2:	4628      	mov	r0, r5
    3bc4:	47a0      	blx	r4
    3bc6:	e7ca      	b.n	3b5e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x236>
    3bc8:	47ae147b 	.word	0x47ae147b
    3bcc:	3ff07ae1 	.word	0x3ff07ae1
    3bd0:	200022b8 	.word	0x200022b8
    3bd4:	200078d8 	.word	0x200078d8
    3bd8:	20000324 	.word	0x20000324
    3bdc:	41008000 	.word	0x41008000
    3be0:	20001050 	.word	0x20001050
    3be4:	00005af9 	.word	0x00005af9
    3be8:	20001224 	.word	0x20001224
    3bec:	0000e8b4 	.word	0x0000e8b4
    3bf0:	200032c4 	.word	0x200032c4
    3bf4:	00004ea9 	.word	0x00004ea9
    3bf8:	00004e79 	.word	0x00004e79
    3bfc:	00001229 	.word	0x00001229
    3c00:	0000390d 	.word	0x0000390d
    3c04:	00004e51 	.word	0x00004e51
    3c08:	0000cb49 	.word	0x0000cb49
    3c0c:	0000cc15 	.word	0x0000cc15
    3c10:	0000d039 	.word	0x0000d039
    3c14:	200006bc 	.word	0x200006bc
    3c18:	00001325 	.word	0x00001325
    3c1c:	00001335 	.word	0x00001335
				uint8_t res_value = grid_ain_get_average(res_index, 7);
    3c20:	2107      	movs	r1, #7
    3c22:	4620      	mov	r0, r4
    3c24:	47d0      	blx	sl
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;
    3c26:	f8cb 4000 	str.w	r4, [fp]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    3c2a:	ab08      	add	r3, sp, #32
    3c2c:	4423      	add	r3, r4
    3c2e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    3c32:	f8cb 3004 	str.w	r3, [fp, #4]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV7] = grid_ain_get_average(res_index, 7);
    3c36:	2107      	movs	r1, #7
    3c38:	4620      	mov	r0, r4
    3c3a:	47d0      	blx	sl
    3c3c:	f8cb 0008 	str.w	r0, [fp, #8]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV8] = grid_ain_get_average(res_index, 8);
    3c40:	2108      	movs	r1, #8
    3c42:	4620      	mov	r0, r4
    3c44:	47d0      	blx	sl
    3c46:	f8cb 000c 	str.w	r0, [fp, #12]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV14U] = 0;
    3c4a:	2300      	movs	r3, #0
    3c4c:	f8cb 3010 	str.w	r3, [fp, #16]
				template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV14L] = 0;
    3c50:	f8cb 3014 	str.w	r3, [fp, #20]
				uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_AVC7);
    3c54:	6878      	ldr	r0, [r7, #4]
    3c56:	2102      	movs	r1, #2
    3c58:	4430      	add	r0, r6
    3c5a:	4b09      	ldr	r3, [pc, #36]	; (3c80 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x358>)
    3c5c:	4798      	blx	r3
    3c5e:	4604      	mov	r4, r0
				grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    3c60:	6878      	ldr	r0, [r7, #4]
    3c62:	4621      	mov	r1, r4
    3c64:	4430      	add	r0, r6
    3c66:	4b07      	ldr	r3, [pc, #28]	; (3c84 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x35c>)
    3c68:	4798      	blx	r3
				grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	441e      	add	r6, r3
    3c6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3c72:	68f0      	ldr	r0, [r6, #12]
    3c74:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    3c78:	4b03      	ldr	r3, [pc, #12]	; (3c88 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x360>)
    3c7a:	4798      	blx	r3
    3c7c:	e78b      	b.n	3b96 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x26e>
    3c7e:	bf00      	nop
    3c80:	00004e51 	.word	0x00004e51
    3c84:	00004ea9 	.word	0x00004ea9
    3c88:	00004e79 	.word	0x00004e79

00003c8c <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    3c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    3c8e:	4f0b      	ldr	r7, [pc, #44]	; (3cbc <grid_module_pbf4_reva_hardware_init+0x30>)
    3c90:	4c0b      	ldr	r4, [pc, #44]	; (3cc0 <grid_module_pbf4_reva_hardware_init+0x34>)
    3c92:	463b      	mov	r3, r7
    3c94:	2200      	movs	r2, #0
    3c96:	4611      	mov	r1, r2
    3c98:	4620      	mov	r0, r4
    3c9a:	4e0a      	ldr	r6, [pc, #40]	; (3cc4 <grid_module_pbf4_reva_hardware_init+0x38>)
    3c9c:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    3c9e:	4d0a      	ldr	r5, [pc, #40]	; (3cc8 <grid_module_pbf4_reva_hardware_init+0x3c>)
    3ca0:	463b      	mov	r3, r7
    3ca2:	2200      	movs	r2, #0
    3ca4:	4611      	mov	r1, r2
    3ca6:	4628      	mov	r0, r5
    3ca8:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    3caa:	2100      	movs	r1, #0
    3cac:	4620      	mov	r0, r4
    3cae:	4c07      	ldr	r4, [pc, #28]	; (3ccc <grid_module_pbf4_reva_hardware_init+0x40>)
    3cb0:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    3cb2:	2100      	movs	r1, #0
    3cb4:	4628      	mov	r0, r5
    3cb6:	47a0      	blx	r4
    3cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cba:	bf00      	nop
    3cbc:	00003929 	.word	0x00003929
    3cc0:	20001050 	.word	0x20001050
    3cc4:	00005a79 	.word	0x00005a79
    3cc8:	20001224 	.word	0x20001224
    3ccc:	00005a39 	.word	0x00005a39

00003cd0 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_report_model* mod){
    3cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cd4:	b0a3      	sub	sp, #140	; 0x8c
    3cd6:	4605      	mov	r5, r0
    3cd8:	9003      	str	r0, [sp, #12]
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    3cda:	2307      	movs	r3, #7
    3cdc:	220e      	movs	r2, #14
    3cde:	2105      	movs	r1, #5
    3ce0:	2010      	movs	r0, #16
    3ce2:	4c97      	ldr	r4, [pc, #604]	; (3f40 <grid_module_pbf4_reva_init+0x270>)
    3ce4:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 12);	
    3ce6:	210c      	movs	r1, #12
    3ce8:	4896      	ldr	r0, [pc, #600]	; (3f44 <grid_module_pbf4_reva_init+0x274>)
    3cea:	4b97      	ldr	r3, [pc, #604]	; (3f48 <grid_module_pbf4_reva_init+0x278>)
    3cec:	4798      	blx	r3
	grid_report_model_init(mod, 0);
    3cee:	2100      	movs	r1, #0
    3cf0:	4628      	mov	r0, r5
    3cf2:	4b96      	ldr	r3, [pc, #600]	; (3f4c <grid_module_pbf4_reva_init+0x27c>)
    3cf4:	4798      	blx	r3
	
	grid_ui_model_init(&grid_ui_state, 12);
    3cf6:	210c      	movs	r1, #12
    3cf8:	4895      	ldr	r0, [pc, #596]	; (3f50 <grid_module_pbf4_reva_init+0x280>)
    3cfa:	4b96      	ldr	r3, [pc, #600]	; (3f54 <grid_module_pbf4_reva_init+0x284>)
    3cfc:	4798      	blx	r3
    3cfe:	f04f 0a00 	mov.w	sl, #0
		}
		else{ // BUTTONS -> MIDI Note On/Off
			
			grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_BUTTON);
		
			uint8_t payload_template[100] = {0};
    3d02:	46d0      	mov	r8, sl
    3d04:	e094      	b.n	3e30 <grid_module_pbf4_reva_init+0x160>
			grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_BUTTON);
    3d06:	4b92      	ldr	r3, [pc, #584]	; (3f50 <grid_module_pbf4_reva_init+0x280>)
    3d08:	6858      	ldr	r0, [r3, #4]
    3d0a:	2102      	movs	r1, #2
    3d0c:	4450      	add	r0, sl
    3d0e:	4b92      	ldr	r3, [pc, #584]	; (3f58 <grid_module_pbf4_reva_init+0x288>)
    3d10:	4798      	blx	r3
			uint8_t payload_template[100] = {0};
    3d12:	2264      	movs	r2, #100	; 0x64
    3d14:	2100      	movs	r1, #0
    3d16:	a809      	add	r0, sp, #36	; 0x24
    3d18:	4b90      	ldr	r3, [pc, #576]	; (3f5c <grid_module_pbf4_reva_init+0x28c>)
    3d1a:	4798      	blx	r3
			uint8_t payload_length = 0;
		
			sprintf(payload_template, GRID_CLASS_MIDIRELATIVE_frame);
    3d1c:	f04f 0903 	mov.w	r9, #3
    3d20:	f8cd 9000 	str.w	r9, [sp]
    3d24:	2300      	movs	r3, #0
    3d26:	2202      	movs	r2, #2
    3d28:	498d      	ldr	r1, [pc, #564]	; (3f60 <grid_module_pbf4_reva_init+0x290>)
    3d2a:	a809      	add	r0, sp, #36	; 0x24
    3d2c:	4c8d      	ldr	r4, [pc, #564]	; (3f64 <grid_module_pbf4_reva_init+0x294>)
    3d2e:	47a0      	blx	r4
		
			uint8_t error = 0;
    3d30:	2600      	movs	r6, #0
    3d32:	ac22      	add	r4, sp, #136	; 0x88
    3d34:	f804 6d75 	strb.w	r6, [r4, #-117]!
		
			grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    3d38:	9400      	str	r4, [sp, #0]
    3d3a:	230f      	movs	r3, #15
    3d3c:	2201      	movs	r2, #1
    3d3e:	2104      	movs	r1, #4
    3d40:	a809      	add	r0, sp, #36	; 0x24
    3d42:	f8df b230 	ldr.w	fp, [pc, #560]	; 3f74 <grid_module_pbf4_reva_init+0x2a4>
    3d46:	47d8      	blx	fp
		
			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length, 0, &error);
    3d48:	9400      	str	r4, [sp, #0]
    3d4a:	4633      	mov	r3, r6
    3d4c:	2202      	movs	r2, #2
    3d4e:	2105      	movs	r1, #5
    3d50:	a809      	add	r0, sp, #36	; 0x24
    3d52:	47d8      	blx	fp
			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length , GRID_PARAMETER_MIDI_NOTEON, &error);
    3d54:	9400      	str	r4, [sp, #0]
    3d56:	2390      	movs	r3, #144	; 0x90
    3d58:	2202      	movs	r2, #2
    3d5a:	2107      	movs	r1, #7
    3d5c:	a809      	add	r0, sp, #36	; 0x24
    3d5e:	47d8      	blx	fp
		
			payload_length = strlen(payload_template);
    3d60:	a809      	add	r0, sp, #36	; 0x24
    3d62:	4b81      	ldr	r3, [pc, #516]	; (3f68 <grid_module_pbf4_reva_init+0x298>)
    3d64:	4798      	blx	r3
    3d66:	b2c5      	uxtb	r5, r0

			uint8_t payload_length0 = payload_length;


			sprintf(&payload_template[payload_length], GRID_CLASS_LEDPHASE_frame);
    3d68:	ab09      	add	r3, sp, #36	; 0x24
    3d6a:	442b      	add	r3, r5
    3d6c:	4618      	mov	r0, r3
    3d6e:	f8cd 9000 	str.w	r9, [sp]
    3d72:	2340      	movs	r3, #64	; 0x40
    3d74:	2202      	movs	r2, #2
    3d76:	497d      	ldr	r1, [pc, #500]	; (3f6c <grid_module_pbf4_reva_init+0x29c>)
    3d78:	4681      	mov	r9, r0
    3d7a:	4f7a      	ldr	r7, [pc, #488]	; (3f64 <grid_module_pbf4_reva_init+0x294>)
    3d7c:	47b8      	blx	r7
		
			grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    3d7e:	9400      	str	r4, [sp, #0]
    3d80:	230f      	movs	r3, #15
    3d82:	2201      	movs	r2, #1
    3d84:	2104      	movs	r1, #4
    3d86:	4648      	mov	r0, r9
    3d88:	47d8      	blx	fp
		
			grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_LEDPHASE_LAYERNUMBER_offset, GRID_CLASS_LEDPHASE_LAYERNUMBER_length, GRID_LED_LAYER_UI_A, &error);
    3d8a:	9400      	str	r4, [sp, #0]
    3d8c:	2301      	movs	r3, #1
    3d8e:	2202      	movs	r2, #2
    3d90:	2105      	movs	r1, #5
    3d92:	4648      	mov	r0, r9
    3d94:	47d8      	blx	fp

		
			payload_length += strlen(&payload_template[payload_length]);
    3d96:	4648      	mov	r0, r9
    3d98:	4b73      	ldr	r3, [pc, #460]	; (3f68 <grid_module_pbf4_reva_init+0x298>)
    3d9a:	4798      	blx	r3
		
			uint8_t parameter_list_length = 4;
			struct grid_ui_action_parameter parameter_list[4];
		
			// MIDI NOTE NUMBER
			parameter_list[0].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    3d9c:	f88d 6015 	strb.w	r6, [sp, #21]
			parameter_list[0].offset  = GRID_CLASS_MIDIRELATIVE_PARAM1_offset;
    3da0:	2309      	movs	r3, #9
    3da2:	f88d 3017 	strb.w	r3, [sp, #23]
			parameter_list[0].length  = GRID_CLASS_MIDIRELATIVE_PARAM1_length;
    3da6:	2702      	movs	r7, #2
    3da8:	f88d 7016 	strb.w	r7, [sp, #22]
		
			// MIDI NOTE VELOCITY
			parameter_list[1].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_DV7;
    3dac:	f04f 0306 	mov.w	r3, #6
    3db0:	f88d 3019 	strb.w	r3, [sp, #25]
			parameter_list[1].offset  = GRID_CLASS_MIDIRELATIVE_PARAM2_offset;
    3db4:	230b      	movs	r3, #11
    3db6:	f88d 301b 	strb.w	r3, [sp, #27]
			parameter_list[1].length  = GRID_CLASS_MIDIRELATIVE_PARAM2_length;
    3dba:	f88d 701a 	strb.w	r7, [sp, #26]
		
			// LED NUMBER
			parameter_list[2].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    3dbe:	f88d 601d 	strb.w	r6, [sp, #29]
			parameter_list[2].offset  = payload_length0 + GRID_CLASS_LEDPHASE_LEDNUMBER_offset;
    3dc2:	1deb      	adds	r3, r5, #7
    3dc4:	f88d 301f 	strb.w	r3, [sp, #31]
			parameter_list[2].length  = GRID_CLASS_LEDPHASE_LEDNUMBER_length;
    3dc8:	f88d 701e 	strb.w	r7, [sp, #30]
		
			// LED PHASE VALUE
			parameter_list[3].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_DV8;
    3dcc:	f04f 0307 	mov.w	r3, #7
    3dd0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			parameter_list[3].offset  = payload_length0 + GRID_CLASS_LEDPHASE_PHASE_offset;
    3dd4:	f105 0309 	add.w	r3, r5, #9
    3dd8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			parameter_list[3].length  = GRID_CLASS_LEDPHASE_PHASE_length;
    3ddc:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
		
		
			// Register Digital Press Action
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DP, payload_template, payload_length, parameter_list, parameter_list_length);
    3de0:	4b5b      	ldr	r3, [pc, #364]	; (3f50 <grid_module_pbf4_reva_init+0x280>)
    3de2:	685e      	ldr	r6, [r3, #4]
			payload_length += strlen(&payload_template[payload_length]);
    3de4:	4428      	add	r0, r5
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DP, payload_template, payload_length, parameter_list, parameter_list_length);
    3de6:	b2c3      	uxtb	r3, r0
    3de8:	f04f 0904 	mov.w	r9, #4
    3dec:	f8cd 9004 	str.w	r9, [sp, #4]
    3df0:	ad05      	add	r5, sp, #20
    3df2:	9500      	str	r5, [sp, #0]
    3df4:	9302      	str	r3, [sp, #8]
    3df6:	aa09      	add	r2, sp, #36	; 0x24
    3df8:	2105      	movs	r1, #5
    3dfa:	eb06 000a 	add.w	r0, r6, sl
    3dfe:	4e5c      	ldr	r6, [pc, #368]	; (3f70 <grid_module_pbf4_reva_init+0x2a0>)
    3e00:	47b0      	blx	r6
		
			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length , GRID_PARAMETER_MIDI_NOTEOFF, &error);
    3e02:	9400      	str	r4, [sp, #0]
    3e04:	2380      	movs	r3, #128	; 0x80
    3e06:	463a      	mov	r2, r7
    3e08:	2107      	movs	r1, #7
    3e0a:	a809      	add	r0, sp, #36	; 0x24
    3e0c:	47d8      	blx	fp
		
			// Register Digital Release Action
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_DR, payload_template, payload_length, parameter_list, parameter_list_length);
    3e0e:	4a50      	ldr	r2, [pc, #320]	; (3f50 <grid_module_pbf4_reva_init+0x280>)
    3e10:	6850      	ldr	r0, [r2, #4]
    3e12:	f8cd 9004 	str.w	r9, [sp, #4]
    3e16:	9500      	str	r5, [sp, #0]
    3e18:	9b02      	ldr	r3, [sp, #8]
    3e1a:	aa09      	add	r2, sp, #36	; 0x24
    3e1c:	2106      	movs	r1, #6
    3e1e:	4450      	add	r0, sl
    3e20:	47b0      	blx	r6
    3e22:	f108 0801 	add.w	r8, r8, #1
    3e26:	f10a 0a10 	add.w	sl, sl, #16
	for(uint8_t i=0; i<12; i++){
    3e2a:	f1b8 0f0c 	cmp.w	r8, #12
    3e2e:	d07c      	beq.n	3f2a <grid_module_pbf4_reva_init+0x25a>
		if (i<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
    3e30:	fa5f f388 	uxtb.w	r3, r8
    3e34:	2b07      	cmp	r3, #7
    3e36:	f63f af66 	bhi.w	3d06 <grid_module_pbf4_reva_init+0x36>
			grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_POTENTIOMETER);
    3e3a:	4b45      	ldr	r3, [pc, #276]	; (3f50 <grid_module_pbf4_reva_init+0x280>)
    3e3c:	6858      	ldr	r0, [r3, #4]
    3e3e:	2101      	movs	r1, #1
    3e40:	4450      	add	r0, sl
    3e42:	4b45      	ldr	r3, [pc, #276]	; (3f58 <grid_module_pbf4_reva_init+0x288>)
    3e44:	4798      	blx	r3
			uint8_t payload_template[100] = {0};
    3e46:	2264      	movs	r2, #100	; 0x64
    3e48:	2100      	movs	r1, #0
    3e4a:	a809      	add	r0, sp, #36	; 0x24
    3e4c:	4b43      	ldr	r3, [pc, #268]	; (3f5c <grid_module_pbf4_reva_init+0x28c>)
    3e4e:	4798      	blx	r3
			sprintf(payload_template, GRID_CLASS_MIDIRELATIVE_frame);
    3e50:	f04f 0903 	mov.w	r9, #3
    3e54:	f8cd 9000 	str.w	r9, [sp]
    3e58:	2300      	movs	r3, #0
    3e5a:	2202      	movs	r2, #2
    3e5c:	4940      	ldr	r1, [pc, #256]	; (3f60 <grid_module_pbf4_reva_init+0x290>)
    3e5e:	a809      	add	r0, sp, #36	; 0x24
    3e60:	f8df b100 	ldr.w	fp, [pc, #256]	; 3f64 <grid_module_pbf4_reva_init+0x294>
    3e64:	47d8      	blx	fp
			uint8_t error = 0;
    3e66:	2700      	movs	r7, #0
    3e68:	ac22      	add	r4, sp, #136	; 0x88
    3e6a:	f804 7d75 	strb.w	r7, [r4, #-117]!
			grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    3e6e:	9400      	str	r4, [sp, #0]
    3e70:	230f      	movs	r3, #15
    3e72:	2201      	movs	r2, #1
    3e74:	2104      	movs	r1, #4
    3e76:	a809      	add	r0, sp, #36	; 0x24
    3e78:	4e3e      	ldr	r6, [pc, #248]	; (3f74 <grid_module_pbf4_reva_init+0x2a4>)
    3e7a:	47b0      	blx	r6
			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length, 0, &error);
    3e7c:	9400      	str	r4, [sp, #0]
    3e7e:	463b      	mov	r3, r7
    3e80:	2202      	movs	r2, #2
    3e82:	2105      	movs	r1, #5
    3e84:	a809      	add	r0, sp, #36	; 0x24
    3e86:	47b0      	blx	r6
			grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length , GRID_PARAMETER_MIDI_CONTROLCHANGE, &error);
    3e88:	9400      	str	r4, [sp, #0]
    3e8a:	23b0      	movs	r3, #176	; 0xb0
    3e8c:	2202      	movs	r2, #2
    3e8e:	2107      	movs	r1, #7
    3e90:	a809      	add	r0, sp, #36	; 0x24
    3e92:	47b0      	blx	r6
			payload_length = strlen(payload_template);
    3e94:	a809      	add	r0, sp, #36	; 0x24
    3e96:	4b34      	ldr	r3, [pc, #208]	; (3f68 <grid_module_pbf4_reva_init+0x298>)
    3e98:	4798      	blx	r3
    3e9a:	b2c5      	uxtb	r5, r0
			sprintf(&payload_template[payload_length], GRID_CLASS_LEDPHASE_frame);
    3e9c:	ab09      	add	r3, sp, #36	; 0x24
    3e9e:	442b      	add	r3, r5
    3ea0:	4618      	mov	r0, r3
    3ea2:	f8cd 9000 	str.w	r9, [sp]
    3ea6:	2340      	movs	r3, #64	; 0x40
    3ea8:	2202      	movs	r2, #2
    3eaa:	4930      	ldr	r1, [pc, #192]	; (3f6c <grid_module_pbf4_reva_init+0x29c>)
    3eac:	9002      	str	r0, [sp, #8]
    3eae:	47d8      	blx	fp
			grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    3eb0:	9400      	str	r4, [sp, #0]
    3eb2:	230f      	movs	r3, #15
    3eb4:	2201      	movs	r2, #1
    3eb6:	2104      	movs	r1, #4
    3eb8:	f8dd b008 	ldr.w	fp, [sp, #8]
    3ebc:	4658      	mov	r0, fp
    3ebe:	47b0      	blx	r6
			grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_LEDPHASE_LAYERNUMBER_offset, GRID_CLASS_LEDPHASE_LAYERNUMBER_length, GRID_LED_LAYER_UI_A, &error);
    3ec0:	9400      	str	r4, [sp, #0]
    3ec2:	2301      	movs	r3, #1
    3ec4:	2202      	movs	r2, #2
    3ec6:	2105      	movs	r1, #5
    3ec8:	4658      	mov	r0, fp
    3eca:	47b0      	blx	r6
			payload_length += strlen(&payload_template[payload_length]);
    3ecc:	4658      	mov	r0, fp
    3ece:	4b26      	ldr	r3, [pc, #152]	; (3f68 <grid_module_pbf4_reva_init+0x298>)
    3ed0:	4798      	blx	r3
			parameter_list[0].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    3ed2:	f88d 7015 	strb.w	r7, [sp, #21]
			parameter_list[0].offset  = GRID_CLASS_MIDIRELATIVE_PARAM1_offset;
    3ed6:	2309      	movs	r3, #9
    3ed8:	f88d 3017 	strb.w	r3, [sp, #23]
			parameter_list[0].length  = GRID_CLASS_MIDIRELATIVE_PARAM1_length;
    3edc:	2102      	movs	r1, #2
    3ede:	f88d 1016 	strb.w	r1, [sp, #22]
			parameter_list[1].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_AV7;
    3ee2:	f88d 1019 	strb.w	r1, [sp, #25]
			parameter_list[1].offset  = GRID_CLASS_MIDIRELATIVE_PARAM2_offset;
    3ee6:	230b      	movs	r3, #11
    3ee8:	f88d 301b 	strb.w	r3, [sp, #27]
			parameter_list[1].length  = GRID_CLASS_MIDIRELATIVE_PARAM2_length;
    3eec:	f88d 101a 	strb.w	r1, [sp, #26]
			parameter_list[2].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    3ef0:	f88d 701d 	strb.w	r7, [sp, #29]
			parameter_list[2].offset  = payload_length0 + GRID_CLASS_LEDPHASE_LEDNUMBER_offset;
    3ef4:	1deb      	adds	r3, r5, #7
    3ef6:	f88d 301f 	strb.w	r3, [sp, #31]
			parameter_list[2].length  = GRID_CLASS_LEDPHASE_LEDNUMBER_length;
    3efa:	f88d 101e 	strb.w	r1, [sp, #30]
			parameter_list[3].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_AV8;
    3efe:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
			parameter_list[3].offset  = payload_length0 + GRID_CLASS_LEDPHASE_PHASE_offset;
    3f02:	f105 0309 	add.w	r3, r5, #9
    3f06:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			parameter_list[3].length  = GRID_CLASS_LEDPHASE_PHASE_length;
    3f0a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_AVC7, payload_template, payload_length, parameter_list, parameter_list_length);	
    3f0e:	4b10      	ldr	r3, [pc, #64]	; (3f50 <grid_module_pbf4_reva_init+0x280>)
    3f10:	685c      	ldr	r4, [r3, #4]
			payload_length += strlen(&payload_template[payload_length]);
    3f12:	182b      	adds	r3, r5, r0
			grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_AVC7, payload_template, payload_length, parameter_list, parameter_list_length);	
    3f14:	2204      	movs	r2, #4
    3f16:	9201      	str	r2, [sp, #4]
    3f18:	aa05      	add	r2, sp, #20
    3f1a:	9200      	str	r2, [sp, #0]
    3f1c:	b2db      	uxtb	r3, r3
    3f1e:	aa09      	add	r2, sp, #36	; 0x24
    3f20:	eb04 000a 	add.w	r0, r4, sl
    3f24:	4c12      	ldr	r4, [pc, #72]	; (3f70 <grid_module_pbf4_reva_init+0x2a0>)
    3f26:	47a0      	blx	r4
    3f28:	e77b      	b.n	3e22 <grid_module_pbf4_reva_init+0x152>
									
		}
		
	}
	
	grid_report_sys_init(mod);
    3f2a:	9803      	ldr	r0, [sp, #12]
    3f2c:	4b12      	ldr	r3, [pc, #72]	; (3f78 <grid_module_pbf4_reva_init+0x2a8>)
    3f2e:	4798      	blx	r3
		
	grid_module_pbf4_reva_hardware_init();
    3f30:	4b12      	ldr	r3, [pc, #72]	; (3f7c <grid_module_pbf4_reva_init+0x2ac>)
    3f32:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    3f34:	4b12      	ldr	r3, [pc, #72]	; (3f80 <grid_module_pbf4_reva_init+0x2b0>)
    3f36:	4798      	blx	r3
	
    3f38:	b023      	add	sp, #140	; 0x8c
    3f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f3e:	bf00      	nop
    3f40:	000011dd 	.word	0x000011dd
    3f44:	20007944 	.word	0x20007944
    3f48:	00002a55 	.word	0x00002a55
    3f4c:	00004c4d 	.word	0x00004c4d
    3f50:	200032c4 	.word	0x200032c4
    3f54:	00004c6d 	.word	0x00004c6d
    3f58:	00004cf9 	.word	0x00004cf9
    3f5c:	0000d0e7 	.word	0x0000d0e7
    3f60:	0000e7e4 	.word	0x0000e7e4
    3f64:	0000d4d5 	.word	0x0000d4d5
    3f68:	0000d51d 	.word	0x0000d51d
    3f6c:	0000e894 	.word	0x0000e894
    3f70:	00004dbd 	.word	0x00004dbd
    3f74:	00004bf9 	.word	0x00004bf9
    3f78:	00004fad 	.word	0x00004fad
    3f7c:	00003c8d 	.word	0x00003c8d
    3f80:	0000390d 	.word	0x0000390d

00003f84 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    3f84:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    3f86:	4803      	ldr	r0, [pc, #12]	; (3f94 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    3f88:	4c03      	ldr	r4, [pc, #12]	; (3f98 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    3f8a:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3f8c:	4803      	ldr	r0, [pc, #12]	; (3f9c <grid_module_po16_revb_hardware_start_transfer+0x18>)
    3f8e:	47a0      	blx	r4
    3f90:	bd10      	pop	{r4, pc}
    3f92:	bf00      	nop
    3f94:	20001050 	.word	0x20001050
    3f98:	00005bd9 	.word	0x00005bd9
    3f9c:	20001224 	.word	0x20001224

00003fa0 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3fa0:	4b71      	ldr	r3, [pc, #452]	; (4168 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c8>)
    3fa2:	781b      	ldrb	r3, [r3, #0]
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	f000 809b 	beq.w	40e0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x140>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    3faa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fae:	b087      	sub	sp, #28
	
	struct grid_report_model* mod = &grid_report_state;
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3fb0:	2300      	movs	r3, #0
    3fb2:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint16_t adcresult_1 = 0;
    3fb6:	f8ad 3014 	strh.w	r3, [sp, #20]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    3fba:	4b6b      	ldr	r3, [pc, #428]	; (4168 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c8>)
    3fbc:	785a      	ldrb	r2, [r3, #1]
    3fbe:	3208      	adds	r2, #8
    3fc0:	496a      	ldr	r1, [pc, #424]	; (416c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1cc>)
    3fc2:	5c8d      	ldrb	r5, [r1, r2]
    3fc4:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    3fc6:	785a      	ldrb	r2, [r3, #1]
    3fc8:	b2d2      	uxtb	r2, r2
    3fca:	5c8c      	ldrb	r4, [r1, r2]
    3fcc:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    3fce:	785a      	ldrb	r2, [r3, #1]
    3fd0:	3201      	adds	r2, #1
    3fd2:	b2d2      	uxtb	r2, r2
    3fd4:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    3fd6:	785a      	ldrb	r2, [r3, #1]
    3fd8:	f002 0207 	and.w	r2, r2, #7
    3fdc:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    3fde:	785b      	ldrb	r3, [r3, #1]
    3fe0:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3fe4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3fe8:	4b61      	ldr	r3, [pc, #388]	; (4170 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    3fea:	bf14      	ite	ne
    3fec:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3ff0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    3ff4:	4b5c      	ldr	r3, [pc, #368]	; (4168 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c8>)
    3ff6:	785b      	ldrb	r3, [r3, #1]
    3ff8:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3ffc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    4000:	4b5b      	ldr	r3, [pc, #364]	; (4170 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    4002:	bf14      	ite	ne
    4004:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4008:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    400c:	4b56      	ldr	r3, [pc, #344]	; (4168 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c8>)
    400e:	785b      	ldrb	r3, [r3, #1]
    4010:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4014:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4018:	4b55      	ldr	r3, [pc, #340]	; (4170 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    401a:	bf14      	ite	ne
    401c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4020:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    4024:	2302      	movs	r3, #2
    4026:	f10d 0216 	add.w	r2, sp, #22
    402a:	2100      	movs	r1, #0
    402c:	4851      	ldr	r0, [pc, #324]	; (4174 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d4>)
    402e:	4e52      	ldr	r6, [pc, #328]	; (4178 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    4030:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    4032:	2302      	movs	r3, #2
    4034:	aa05      	add	r2, sp, #20
    4036:	2100      	movs	r1, #0
    4038:	4850      	ldr	r0, [pc, #320]	; (417c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1dc>)
    403a:	47b0      	blx	r6

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    403c:	f8df 9164 	ldr.w	r9, [pc, #356]	; 41a4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>
    4040:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    4044:	47c8      	blx	r9
    4046:	f8df 8160 	ldr.w	r8, [pc, #352]	; 41a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>
    404a:	a345      	add	r3, pc, #276	; (adr r3, 4160 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c0>)
    404c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4050:	47c0      	blx	r8
    4052:	4f4b      	ldr	r7, [pc, #300]	; (4180 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    4054:	47b8      	blx	r7
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    4056:	f64f 76ff 	movw	r6, #65535	; 0xffff
    405a:	42b0      	cmp	r0, r6
    405c:	bf28      	it	cs
    405e:	4630      	movcs	r0, r6
    4060:	f8ad 0016 	strh.w	r0, [sp, #22]
	
	uint32_t input_1 = adcresult_1*1.03;	
    4064:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    4068:	47c8      	blx	r9
    406a:	a33d      	add	r3, pc, #244	; (adr r3, 4160 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c0>)
    406c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4070:	47c0      	blx	r8
    4072:	47b8      	blx	r7
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    4074:	42b0      	cmp	r0, r6
    4076:	bf28      	it	cs
    4078:	4630      	movcs	r0, r6
    407a:	f8ad 0014 	strh.w	r0, [sp, #20]

	// POT POLARITY IS REVERSED ON PO16_RevC
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    407e:	4b41      	ldr	r3, [pc, #260]	; (4184 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e4>)
    4080:	4798      	blx	r3
    4082:	2808      	cmp	r0, #8
    4084:	d032      	beq.n	40ec <grid_module_po16_revb_hardware_transfer_complete_cb+0x14c>
		// Reverse the 16bit result
		adcresult_0	= 65535 - adcresult_0;
		adcresult_1 = 65535 - adcresult_1;
	}

	grid_ain_add_sample(adc_index_0, adcresult_0);
    4086:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    408a:	4628      	mov	r0, r5
    408c:	4e3e      	ldr	r6, [pc, #248]	; (4188 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    408e:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    4090:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    4094:	4620      	mov	r0, r4
    4096:	47b0      	blx	r6


	uint8_t result_index[2] = {0};
	
	result_index[0] = adc_index_0;
    4098:	f88d 5010 	strb.w	r5, [sp, #16]
	result_index[1] = adc_index_1;
    409c:	f88d 4011 	strb.w	r4, [sp, #17]


	uint8_t grid_module_po16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    40a0:	4b3a      	ldr	r3, [pc, #232]	; (418c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1ec>)
    40a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    40a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    40a8:	ad04      	add	r5, sp, #16
    40aa:	f10d 0812 	add.w	r8, sp, #18
	{
	
		// Helper variable for readability
		uint8_t res_index = result_index[i];

		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    40ae:	4f38      	ldr	r7, [pc, #224]	; (4190 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
	
		if (grid_ain_get_changed(res_index)){
    40b0:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 41ac <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>
		
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];

			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV7] = grid_ain_get_average(res_index, 7);
    40b4:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 41b0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x210>
		uint8_t res_index = result_index[i];
    40b8:	f815 4b01 	ldrb.w	r4, [r5], #1
		uint32_t* template_parameter_list = grid_ui_state.element[res_index].template_parameter_list;
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	0126      	lsls	r6, r4, #4
    40c0:	4433      	add	r3, r6
    40c2:	f8d3 b004 	ldr.w	fp, [r3, #4]
		if (grid_ain_get_changed(res_index)){
    40c6:	4620      	mov	r0, r4
    40c8:	47c8      	blx	r9
    40ca:	b9d0      	cbnz	r0, 4102 <grid_module_po16_revb_hardware_transfer_complete_cb+0x162>
	for (uint8_t i=0; i<2; i++)
    40cc:	4545      	cmp	r5, r8
    40ce:	d1f3      	bne.n	40b8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x118>
		}

	}
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    40d0:	2200      	movs	r2, #0
    40d2:	4b25      	ldr	r3, [pc, #148]	; (4168 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c8>)
    40d4:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    40d6:	4b2f      	ldr	r3, [pc, #188]	; (4194 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    40d8:	4798      	blx	r3
}
    40da:	b007      	add	sp, #28
    40dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    40e0:	4a21      	ldr	r2, [pc, #132]	; (4168 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c8>)
    40e2:	7813      	ldrb	r3, [r2, #0]
    40e4:	3301      	adds	r3, #1
    40e6:	b2db      	uxtb	r3, r3
    40e8:	7013      	strb	r3, [r2, #0]
    40ea:	4770      	bx	lr
		adcresult_0	= 65535 - adcresult_0;
    40ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    40f0:	43db      	mvns	r3, r3
    40f2:	f8ad 3016 	strh.w	r3, [sp, #22]
		adcresult_1 = 65535 - adcresult_1;
    40f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    40fa:	43db      	mvns	r3, r3
    40fc:	f8ad 3014 	strh.w	r3, [sp, #20]
    4100:	e7c1      	b.n	4086 <grid_module_po16_revb_hardware_transfer_complete_cb+0xe6>
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER] = res_index;
    4102:	f8cb 4000 	str.w	r4, [fp]
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    4106:	ab06      	add	r3, sp, #24
    4108:	4423      	add	r3, r4
    410a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
    410e:	f8cb 3004 	str.w	r3, [fp, #4]
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV7] = grid_ain_get_average(res_index, 7);
    4112:	2107      	movs	r1, #7
    4114:	4620      	mov	r0, r4
    4116:	47d0      	blx	sl
    4118:	f8cb 0008 	str.w	r0, [fp, #8]
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV8] = grid_ain_get_average(res_index, 8);
    411c:	2108      	movs	r1, #8
    411e:	4620      	mov	r0, r4
    4120:	47d0      	blx	sl
    4122:	f8cb 000c 	str.w	r0, [fp, #12]
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV14U] = 0;
    4126:	2300      	movs	r3, #0
    4128:	f8cb 3010 	str.w	r3, [fp, #16]
			template_parameter_list[GRID_TEMPLATE_PARAMETER_CONTROLLER_AV14L] = 0;
    412c:	f8cb 3014 	str.w	r3, [fp, #20]
			uint8_t event_index = grid_ui_event_find(&grid_ui_state.element[res_index], GRID_UI_EVENT_AVC7);
    4130:	6878      	ldr	r0, [r7, #4]
    4132:	2102      	movs	r1, #2
    4134:	4430      	add	r0, r6
    4136:	4b18      	ldr	r3, [pc, #96]	; (4198 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    4138:	4798      	blx	r3
    413a:	4604      	mov	r4, r0
			grid_ui_event_template_action(&grid_ui_state.element[res_index], event_index);
    413c:	6878      	ldr	r0, [r7, #4]
    413e:	4621      	mov	r1, r4
    4140:	4430      	add	r0, r6
    4142:	4b16      	ldr	r3, [pc, #88]	; (419c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    4144:	4798      	blx	r3
			grid_ui_event_trigger(&grid_ui_state.element[res_index].event_list[event_index]);			
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	441e      	add	r6, r3
    414a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    414e:	68f0      	ldr	r0, [r6, #12]
    4150:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    4154:	4b12      	ldr	r3, [pc, #72]	; (41a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    4156:	4798      	blx	r3
    4158:	e7b8      	b.n	40cc <grid_module_po16_revb_hardware_transfer_complete_cb+0x12c>
    415a:	bf00      	nop
    415c:	f3af 8000 	nop.w
    4160:	47ae147b 	.word	0x47ae147b
    4164:	3ff07ae1 	.word	0x3ff07ae1
    4168:	200006ce 	.word	0x200006ce
    416c:	20000334 	.word	0x20000334
    4170:	41008000 	.word	0x41008000
    4174:	20001050 	.word	0x20001050
    4178:	00005af9 	.word	0x00005af9
    417c:	20001224 	.word	0x20001224
    4180:	0000d039 	.word	0x0000d039
    4184:	000048dd 	.word	0x000048dd
    4188:	00001229 	.word	0x00001229
    418c:	0000e8c4 	.word	0x0000e8c4
    4190:	200032c4 	.word	0x200032c4
    4194:	00003f85 	.word	0x00003f85
    4198:	00004e51 	.word	0x00004e51
    419c:	00004ea9 	.word	0x00004ea9
    41a0:	00004e79 	.word	0x00004e79
    41a4:	0000cb49 	.word	0x0000cb49
    41a8:	0000cc15 	.word	0x0000cc15
    41ac:	00001325 	.word	0x00001325
    41b0:	00001335 	.word	0x00001335

000041b4 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    41b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    41b6:	4f0b      	ldr	r7, [pc, #44]	; (41e4 <grid_module_po16_revb_hardware_init+0x30>)
    41b8:	4c0b      	ldr	r4, [pc, #44]	; (41e8 <grid_module_po16_revb_hardware_init+0x34>)
    41ba:	463b      	mov	r3, r7
    41bc:	2200      	movs	r2, #0
    41be:	4611      	mov	r1, r2
    41c0:	4620      	mov	r0, r4
    41c2:	4e0a      	ldr	r6, [pc, #40]	; (41ec <grid_module_po16_revb_hardware_init+0x38>)
    41c4:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    41c6:	4d0a      	ldr	r5, [pc, #40]	; (41f0 <grid_module_po16_revb_hardware_init+0x3c>)
    41c8:	463b      	mov	r3, r7
    41ca:	2200      	movs	r2, #0
    41cc:	4611      	mov	r1, r2
    41ce:	4628      	mov	r0, r5
    41d0:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    41d2:	2100      	movs	r1, #0
    41d4:	4620      	mov	r0, r4
    41d6:	4c07      	ldr	r4, [pc, #28]	; (41f4 <grid_module_po16_revb_hardware_init+0x40>)
    41d8:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    41da:	2100      	movs	r1, #0
    41dc:	4628      	mov	r0, r5
    41de:	47a0      	blx	r4
    41e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41e2:	bf00      	nop
    41e4:	00003fa1 	.word	0x00003fa1
    41e8:	20001050 	.word	0x20001050
    41ec:	00005a79 	.word	0x00005a79
    41f0:	20001224 	.word	0x20001224
    41f4:	00005a39 	.word	0x00005a39

000041f8 <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_report_model* mod){
    41f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41fc:	b0a5      	sub	sp, #148	; 0x94
    41fe:	4605      	mov	r5, r0
    4200:	9005      	str	r0, [sp, #20]
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    4202:	2307      	movs	r3, #7
    4204:	220e      	movs	r2, #14
    4206:	2105      	movs	r1, #5
    4208:	2010      	movs	r0, #16
    420a:	4c4f      	ldr	r4, [pc, #316]	; (4348 <grid_module_po16_revb_init+0x150>)
    420c:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 16);
    420e:	2110      	movs	r1, #16
    4210:	484e      	ldr	r0, [pc, #312]	; (434c <grid_module_po16_revb_init+0x154>)
    4212:	4b4f      	ldr	r3, [pc, #316]	; (4350 <grid_module_po16_revb_init+0x158>)
    4214:	4798      	blx	r3
	grid_report_model_init(mod, 0);
    4216:	2100      	movs	r1, #0
    4218:	4628      	mov	r0, r5
    421a:	4b4e      	ldr	r3, [pc, #312]	; (4354 <grid_module_po16_revb_init+0x15c>)
    421c:	4798      	blx	r3
	
	grid_ui_model_init(&grid_ui_state, 16);
    421e:	2110      	movs	r1, #16
    4220:	484d      	ldr	r0, [pc, #308]	; (4358 <grid_module_po16_revb_init+0x160>)
    4222:	4b4e      	ldr	r3, [pc, #312]	; (435c <grid_module_po16_revb_init+0x164>)
    4224:	4798      	blx	r3
    4226:	f04f 0b00 	mov.w	fp, #0
	
	for(uint8_t i=0; i<16; i++){
			
		grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_POTENTIOMETER);
    422a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 4358 <grid_module_po16_revb_init+0x160>

		uint8_t payload_template[100] = {0};
    422e:	46d8      	mov	r8, fp
		uint8_t payload_length = 0;

		sprintf(payload_template, GRID_CLASS_MIDIRELATIVE_frame);
    4230:	2402      	movs	r4, #2

		uint8_t error = 0;

		grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    4232:	f8cd b00c 	str.w	fp, [sp, #12]
		grid_ui_element_init(&grid_ui_state.element[i], GRID_UI_ELEMENT_POTENTIOMETER);
    4236:	f8da 0004 	ldr.w	r0, [sl, #4]
    423a:	2101      	movs	r1, #1
    423c:	9a03      	ldr	r2, [sp, #12]
    423e:	4410      	add	r0, r2
    4240:	4b47      	ldr	r3, [pc, #284]	; (4360 <grid_module_po16_revb_init+0x168>)
    4242:	4798      	blx	r3
		uint8_t payload_template[100] = {0};
    4244:	2264      	movs	r2, #100	; 0x64
    4246:	4641      	mov	r1, r8
    4248:	a80b      	add	r0, sp, #44	; 0x2c
    424a:	4b46      	ldr	r3, [pc, #280]	; (4364 <grid_module_po16_revb_init+0x16c>)
    424c:	4798      	blx	r3
		sprintf(payload_template, GRID_CLASS_MIDIRELATIVE_frame);
    424e:	f04f 0b03 	mov.w	fp, #3
    4252:	f8cd b000 	str.w	fp, [sp]
    4256:	4643      	mov	r3, r8
    4258:	4622      	mov	r2, r4
    425a:	4943      	ldr	r1, [pc, #268]	; (4368 <grid_module_po16_revb_init+0x170>)
    425c:	a80b      	add	r0, sp, #44	; 0x2c
    425e:	4d43      	ldr	r5, [pc, #268]	; (436c <grid_module_po16_revb_init+0x174>)
    4260:	47a8      	blx	r5
		uint8_t error = 0;
    4262:	ad24      	add	r5, sp, #144	; 0x90
    4264:	f805 8d75 	strb.w	r8, [r5, #-117]!
		grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    4268:	9500      	str	r5, [sp, #0]
    426a:	230f      	movs	r3, #15
    426c:	2201      	movs	r2, #1
    426e:	2104      	movs	r1, #4
    4270:	a80b      	add	r0, sp, #44	; 0x2c
    4272:	4e3f      	ldr	r6, [pc, #252]	; (4370 <grid_module_po16_revb_init+0x178>)
    4274:	47b0      	blx	r6

		grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length, 0, &error);
    4276:	9500      	str	r5, [sp, #0]
    4278:	4643      	mov	r3, r8
    427a:	4622      	mov	r2, r4
    427c:	2105      	movs	r1, #5
    427e:	a80b      	add	r0, sp, #44	; 0x2c
    4280:	47b0      	blx	r6
		grid_msg_set_parameter(payload_template, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset , GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length , GRID_PARAMETER_MIDI_CONTROLCHANGE, &error);
    4282:	9500      	str	r5, [sp, #0]
    4284:	23b0      	movs	r3, #176	; 0xb0
    4286:	4622      	mov	r2, r4
    4288:	2107      	movs	r1, #7
    428a:	a80b      	add	r0, sp, #44	; 0x2c
    428c:	47b0      	blx	r6

		payload_length = strlen(payload_template);
    428e:	a80b      	add	r0, sp, #44	; 0x2c
    4290:	4b38      	ldr	r3, [pc, #224]	; (4374 <grid_module_po16_revb_init+0x17c>)
    4292:	4798      	blx	r3
    4294:	fa5f f980 	uxtb.w	r9, r0

		uint8_t payload_length0 = payload_length;


		sprintf(&payload_template[payload_length], GRID_CLASS_LEDPHASE_frame);
    4298:	ab0b      	add	r3, sp, #44	; 0x2c
    429a:	444b      	add	r3, r9
    429c:	4618      	mov	r0, r3
    429e:	f8cd b000 	str.w	fp, [sp]
    42a2:	2340      	movs	r3, #64	; 0x40
    42a4:	4622      	mov	r2, r4
    42a6:	4934      	ldr	r1, [pc, #208]	; (4378 <grid_module_po16_revb_init+0x180>)
    42a8:	9004      	str	r0, [sp, #16]
    42aa:	4f30      	ldr	r7, [pc, #192]	; (436c <grid_module_po16_revb_init+0x174>)
    42ac:	47b8      	blx	r7

		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);
    42ae:	9500      	str	r5, [sp, #0]
    42b0:	230f      	movs	r3, #15
    42b2:	2201      	movs	r2, #1
    42b4:	2104      	movs	r1, #4
    42b6:	9f04      	ldr	r7, [sp, #16]
    42b8:	4638      	mov	r0, r7
    42ba:	47b0      	blx	r6

		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_LEDPHASE_LAYERNUMBER_offset, GRID_CLASS_LEDPHASE_LAYERNUMBER_length, GRID_LED_LAYER_UI_A, &error);
    42bc:	9500      	str	r5, [sp, #0]
    42be:	2301      	movs	r3, #1
    42c0:	4622      	mov	r2, r4
    42c2:	2105      	movs	r1, #5
    42c4:	4638      	mov	r0, r7
    42c6:	47b0      	blx	r6


		payload_length += strlen(&payload_template[payload_length]);
    42c8:	4638      	mov	r0, r7
    42ca:	4b2a      	ldr	r3, [pc, #168]	; (4374 <grid_module_po16_revb_init+0x17c>)
    42cc:	4798      	blx	r3

		uint8_t parameter_list_length = 4;
		struct grid_ui_action_parameter parameter_list[4];

		// MIDI NOTE NUMBER
		parameter_list[0].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    42ce:	f88d 801d 	strb.w	r8, [sp, #29]
		parameter_list[0].offset  = GRID_CLASS_MIDIRELATIVE_PARAM1_offset;
    42d2:	2309      	movs	r3, #9
    42d4:	f88d 301f 	strb.w	r3, [sp, #31]
		parameter_list[0].length  = GRID_CLASS_MIDIRELATIVE_PARAM1_length;
    42d8:	f88d 401e 	strb.w	r4, [sp, #30]

		// MIDI NOTE VELOCITY
		parameter_list[1].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_AV7;
    42dc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		parameter_list[1].offset  = GRID_CLASS_MIDIRELATIVE_PARAM2_offset;
    42e0:	230b      	movs	r3, #11
    42e2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		parameter_list[1].length  = GRID_CLASS_MIDIRELATIVE_PARAM2_length;
    42e6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22

		// LED NUMBER
		parameter_list[2].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_NUMBER;
    42ea:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
		parameter_list[2].offset  = payload_length0 + GRID_CLASS_LEDPHASE_LEDNUMBER_offset;
    42ee:	f109 0307 	add.w	r3, r9, #7
    42f2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		parameter_list[2].length  = GRID_CLASS_LEDPHASE_LEDNUMBER_length;
    42f6:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26

		// LED PHASE VALUE
		parameter_list[3].address = GRID_TEMPLATE_PARAMETER_CONTROLLER_AV8;
    42fa:	f88d b029 	strb.w	fp, [sp, #41]	; 0x29
		parameter_list[3].offset  = payload_length0 + GRID_CLASS_LEDPHASE_PHASE_offset;
    42fe:	f109 0309 	add.w	r3, r9, #9
    4302:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
		parameter_list[3].length  = GRID_CLASS_LEDPHASE_PHASE_length;
    4306:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a


		// Register Absolute Value Change
		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_AVC7, payload_template, payload_length, parameter_list, parameter_list_length);
    430a:	f8da 5004 	ldr.w	r5, [sl, #4]
		payload_length += strlen(&payload_template[payload_length]);
    430e:	eb09 0300 	add.w	r3, r9, r0
		grid_ui_event_register_action(&grid_ui_state.element[i], GRID_UI_EVENT_AVC7, payload_template, payload_length, parameter_list, parameter_list_length);
    4312:	2204      	movs	r2, #4
    4314:	9201      	str	r2, [sp, #4]
    4316:	aa07      	add	r2, sp, #28
    4318:	9200      	str	r2, [sp, #0]
    431a:	b2db      	uxtb	r3, r3
    431c:	aa0b      	add	r2, sp, #44	; 0x2c
    431e:	4621      	mov	r1, r4
    4320:	9e03      	ldr	r6, [sp, #12]
    4322:	19a8      	adds	r0, r5, r6
    4324:	4d15      	ldr	r5, [pc, #84]	; (437c <grid_module_po16_revb_init+0x184>)
    4326:	47a8      	blx	r5
    4328:	4633      	mov	r3, r6
    432a:	3310      	adds	r3, #16
    432c:	9303      	str	r3, [sp, #12]
	for(uint8_t i=0; i<16; i++){
    432e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4332:	d180      	bne.n	4236 <grid_module_po16_revb_init+0x3e>
		
	}
	
	grid_report_sys_init(mod);
    4334:	9805      	ldr	r0, [sp, #20]
    4336:	4b12      	ldr	r3, [pc, #72]	; (4380 <grid_module_po16_revb_init+0x188>)
    4338:	4798      	blx	r3

	grid_module_po16_revb_hardware_init();
    433a:	4b12      	ldr	r3, [pc, #72]	; (4384 <grid_module_po16_revb_init+0x18c>)
    433c:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    433e:	4b12      	ldr	r3, [pc, #72]	; (4388 <grid_module_po16_revb_init+0x190>)
    4340:	4798      	blx	r3
	
    4342:	b025      	add	sp, #148	; 0x94
    4344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4348:	000011dd 	.word	0x000011dd
    434c:	20007944 	.word	0x20007944
    4350:	00002a55 	.word	0x00002a55
    4354:	00004c4d 	.word	0x00004c4d
    4358:	200032c4 	.word	0x200032c4
    435c:	00004c6d 	.word	0x00004c6d
    4360:	00004cf9 	.word	0x00004cf9
    4364:	0000d0e7 	.word	0x0000d0e7
    4368:	0000e7e4 	.word	0x0000e7e4
    436c:	0000d4d5 	.word	0x0000d4d5
    4370:	00004bf9 	.word	0x00004bf9
    4374:	0000d51d 	.word	0x0000d51d
    4378:	0000e894 	.word	0x0000e894
    437c:	00004dbd 	.word	0x00004dbd
    4380:	00004fad 	.word	0x00004fad
    4384:	000041b5 	.word	0x000041b5
    4388:	00003f85 	.word	0x00003f85

0000438c <grid_task_enter_task>:
 * Author : SUKU WC
*/

#include "grid_sys.h"

enum grid_task grid_task_enter_task(struct grid_task_model* mod, enum grid_task next_task){
    438c:	4603      	mov	r3, r0
	
	
	enum grid_task previous_task = mod->current_task;
    438e:	7840      	ldrb	r0, [r0, #1]
	mod->current_task = next_task;
    4390:	7059      	strb	r1, [r3, #1]
	return previous_task;
	
}
    4392:	4770      	bx	lr

00004394 <grid_task_timer_tick>:
	
	mod->current_task = previous_task;
	
}

void grid_task_timer_tick(struct grid_task_model* mod){
    4394:	7843      	ldrb	r3, [r0, #1]
    4396:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	
	mod->timer[mod->current_task]++;
    439a:	6843      	ldr	r3, [r0, #4]
    439c:	3301      	adds	r3, #1
    439e:	6043      	str	r3, [r0, #4]
    43a0:	4770      	bx	lr

000043a2 <grid_task_timer_reset>:
	
}

void grid_task_timer_reset(struct grid_task_model* mod){
    43a2:	1d03      	adds	r3, r0, #4
    43a4:	3024      	adds	r0, #36	; 0x24
	
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
		mod->timer[i] = 0;
    43a6:	2200      	movs	r2, #0
    43a8:	f843 2b04 	str.w	r2, [r3], #4
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
    43ac:	4283      	cmp	r3, r0
    43ae:	d1fb      	bne.n	43a8 <grid_task_timer_reset+0x6>
	}
	
}
    43b0:	4770      	bx	lr

000043b2 <grid_task_timer_read>:

uint32_t grid_task_timer_read(struct grid_task_model* mod, enum grid_task task){

	return 	mod->timer[task];
    43b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	
}
    43b6:	6848      	ldr	r0, [r1, #4]
    43b8:	4770      	bx	lr

000043ba <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    43ba:	8a02      	ldrh	r2, [r0, #16]
    43bc:	b142      	cbz	r2, 43d0 <tx_cb_USART_GRID+0x16>
    43be:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    43c2:	322f      	adds	r2, #47	; 0x2f
    43c4:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    43c6:	2100      	movs	r1, #0
    43c8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    43cc:	4293      	cmp	r3, r2
    43ce:	d1fb      	bne.n	43c8 <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    43d0:	2300      	movs	r3, #0
    43d2:	8203      	strh	r3, [r0, #16]
    43d4:	4770      	bx	lr
	...

000043d8 <tx_cb_USART_GRID_W>:
{
    43d8:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    43da:	4802      	ldr	r0, [pc, #8]	; (43e4 <tx_cb_USART_GRID_W+0xc>)
    43dc:	4b02      	ldr	r3, [pc, #8]	; (43e8 <tx_cb_USART_GRID_W+0x10>)
    43de:	4798      	blx	r3
    43e0:	bd08      	pop	{r3, pc}
    43e2:	bf00      	nop
    43e4:	20003798 	.word	0x20003798
    43e8:	000043bb 	.word	0x000043bb

000043ec <tx_cb_USART_GRID_S>:
{
    43ec:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    43ee:	4802      	ldr	r0, [pc, #8]	; (43f8 <tx_cb_USART_GRID_S+0xc>)
    43f0:	4b02      	ldr	r3, [pc, #8]	; (43fc <tx_cb_USART_GRID_S+0x10>)
    43f2:	4798      	blx	r3
    43f4:	bd08      	pop	{r3, pc}
    43f6:	bf00      	nop
    43f8:	200047a4 	.word	0x200047a4
    43fc:	000043bb 	.word	0x000043bb

00004400 <tx_cb_USART_GRID_E>:
{
    4400:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    4402:	4802      	ldr	r0, [pc, #8]	; (440c <tx_cb_USART_GRID_E+0xc>)
    4404:	4b02      	ldr	r3, [pc, #8]	; (4410 <tx_cb_USART_GRID_E+0x10>)
    4406:	4798      	blx	r3
    4408:	bd08      	pop	{r3, pc}
    440a:	bf00      	nop
    440c:	200068b8 	.word	0x200068b8
    4410:	000043bb 	.word	0x000043bb

00004414 <tx_cb_USART_GRID_N>:
{
    4414:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    4416:	4802      	ldr	r0, [pc, #8]	; (4420 <tx_cb_USART_GRID_N+0xc>)
    4418:	4b02      	ldr	r3, [pc, #8]	; (4424 <tx_cb_USART_GRID_N+0x10>)
    441a:	4798      	blx	r3
    441c:	bd08      	pop	{r3, pc}
    441e:	bf00      	nop
    4420:	200012a4 	.word	0x200012a4
    4424:	000043bb 	.word	0x000043bb

00004428 <err_cb_USART_GRID>:
{
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
    4428:	b508      	push	{r3, lr}
	por->usart_error_flag = 1;	
    442a:	2301      	movs	r3, #1
    442c:	7703      	strb	r3, [r0, #28]
	
	usart_async_disable(por->usart);
    442e:	6880      	ldr	r0, [r0, #8]
    4430:	4b01      	ldr	r3, [pc, #4]	; (4438 <err_cb_USART_GRID+0x10>)
    4432:	4798      	blx	r3
    4434:	bd08      	pop	{r3, pc}
    4436:	bf00      	nop
    4438:	000068d5 	.word	0x000068d5

0000443c <err_cb_USART_GRID_W>:
{
    443c:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_W);
    443e:	4802      	ldr	r0, [pc, #8]	; (4448 <err_cb_USART_GRID_W+0xc>)
    4440:	4b02      	ldr	r3, [pc, #8]	; (444c <err_cb_USART_GRID_W+0x10>)
    4442:	4798      	blx	r3
    4444:	bd08      	pop	{r3, pc}
    4446:	bf00      	nop
    4448:	20003798 	.word	0x20003798
    444c:	00004429 	.word	0x00004429

00004450 <err_cb_USART_GRID_S>:
{
    4450:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_S);
    4452:	4802      	ldr	r0, [pc, #8]	; (445c <err_cb_USART_GRID_S+0xc>)
    4454:	4b02      	ldr	r3, [pc, #8]	; (4460 <err_cb_USART_GRID_S+0x10>)
    4456:	4798      	blx	r3
    4458:	bd08      	pop	{r3, pc}
    445a:	bf00      	nop
    445c:	200047a4 	.word	0x200047a4
    4460:	00004429 	.word	0x00004429

00004464 <err_cb_USART_GRID_E>:
{
    4464:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_E);
    4466:	4802      	ldr	r0, [pc, #8]	; (4470 <err_cb_USART_GRID_E+0xc>)
    4468:	4b02      	ldr	r3, [pc, #8]	; (4474 <err_cb_USART_GRID_E+0x10>)
    446a:	4798      	blx	r3
    446c:	bd08      	pop	{r3, pc}
    446e:	bf00      	nop
    4470:	200068b8 	.word	0x200068b8
    4474:	00004429 	.word	0x00004429

00004478 <err_cb_USART_GRID_N>:
{
    4478:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_N);
    447a:	4802      	ldr	r0, [pc, #8]	; (4484 <err_cb_USART_GRID_N+0xc>)
    447c:	4b02      	ldr	r3, [pc, #8]	; (4488 <err_cb_USART_GRID_N+0x10>)
    447e:	4798      	blx	r3
    4480:	bd08      	pop	{r3, pc}
    4482:	bf00      	nop
    4484:	200012a4 	.word	0x200012a4
    4488:	00004429 	.word	0x00004429

0000448c <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    448c:	b508      	push	{r3, lr}
    448e:	7b83      	ldrb	r3, [r0, #14]
    4490:	011b      	lsls	r3, r3, #4
    4492:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4496:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    449a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    449c:	f022 0202 	bic.w	r2, r2, #2
    44a0:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    44a2:	2100      	movs	r1, #0
    44a4:	7b80      	ldrb	r0, [r0, #14]
    44a6:	4b01      	ldr	r3, [pc, #4]	; (44ac <grid_sys_port_reset_dma+0x20>)
    44a8:	4798      	blx	r3
    44aa:	bd08      	pop	{r3, pc}
    44ac:	0000791d 	.word	0x0000791d

000044b0 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    44b0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    44b2:	4802      	ldr	r0, [pc, #8]	; (44bc <dma_transfer_complete_w_cb+0xc>)
    44b4:	4b02      	ldr	r3, [pc, #8]	; (44c0 <dma_transfer_complete_w_cb+0x10>)
    44b6:	4798      	blx	r3
    44b8:	bd08      	pop	{r3, pc}
    44ba:	bf00      	nop
    44bc:	20003798 	.word	0x20003798
    44c0:	0000448d 	.word	0x0000448d

000044c4 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    44c4:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    44c6:	4802      	ldr	r0, [pc, #8]	; (44d0 <dma_transfer_complete_s_cb+0xc>)
    44c8:	4b02      	ldr	r3, [pc, #8]	; (44d4 <dma_transfer_complete_s_cb+0x10>)
    44ca:	4798      	blx	r3
    44cc:	bd08      	pop	{r3, pc}
    44ce:	bf00      	nop
    44d0:	200047a4 	.word	0x200047a4
    44d4:	0000448d 	.word	0x0000448d

000044d8 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    44d8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    44da:	4802      	ldr	r0, [pc, #8]	; (44e4 <dma_transfer_complete_e_cb+0xc>)
    44dc:	4b02      	ldr	r3, [pc, #8]	; (44e8 <dma_transfer_complete_e_cb+0x10>)
    44de:	4798      	blx	r3
    44e0:	bd08      	pop	{r3, pc}
    44e2:	bf00      	nop
    44e4:	200068b8 	.word	0x200068b8
    44e8:	0000448d 	.word	0x0000448d

000044ec <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    44ec:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    44ee:	4802      	ldr	r0, [pc, #8]	; (44f8 <dma_transfer_complete_n_cb+0xc>)
    44f0:	4b02      	ldr	r3, [pc, #8]	; (44fc <dma_transfer_complete_n_cb+0x10>)
    44f2:	4798      	blx	r3
    44f4:	bd08      	pop	{r3, pc}
    44f6:	bf00      	nop
    44f8:	200012a4 	.word	0x200012a4
    44fc:	0000448d 	.word	0x0000448d

00004500 <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    4500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4504:	4b3e      	ldr	r3, [pc, #248]	; (4600 <grid_sys_uart_init+0x100>)
    4506:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    450a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    450e:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    4512:	f042 0204 	orr.w	r2, r2, #4
    4516:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    451a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    451e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    4522:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4526:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    452a:	f042 0204 	orr.w	r2, r2, #4
    452e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4532:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    453a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    453e:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    4542:	f042 0204 	orr.w	r2, r2, #4
    4546:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    454a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    454e:	f44f 7100 	mov.w	r1, #512	; 0x200
    4552:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4556:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    455a:	f042 0204 	orr.w	r2, r2, #4
    455e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4562:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    4566:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 464c <grid_sys_uart_init+0x14c>
    456a:	4a26      	ldr	r2, [pc, #152]	; (4604 <grid_sys_uart_init+0x104>)
    456c:	2101      	movs	r1, #1
    456e:	4640      	mov	r0, r8
    4570:	4c25      	ldr	r4, [pc, #148]	; (4608 <grid_sys_uart_init+0x108>)
    4572:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    4574:	4f25      	ldr	r7, [pc, #148]	; (460c <grid_sys_uart_init+0x10c>)
    4576:	4a26      	ldr	r2, [pc, #152]	; (4610 <grid_sys_uart_init+0x110>)
    4578:	2101      	movs	r1, #1
    457a:	4638      	mov	r0, r7
    457c:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    457e:	4e25      	ldr	r6, [pc, #148]	; (4614 <grid_sys_uart_init+0x114>)
    4580:	4a25      	ldr	r2, [pc, #148]	; (4618 <grid_sys_uart_init+0x118>)
    4582:	2101      	movs	r1, #1
    4584:	4630      	mov	r0, r6
    4586:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    4588:	4d24      	ldr	r5, [pc, #144]	; (461c <grid_sys_uart_init+0x11c>)
    458a:	4a25      	ldr	r2, [pc, #148]	; (4620 <grid_sys_uart_init+0x120>)
    458c:	2101      	movs	r1, #1
    458e:	4628      	mov	r0, r5
    4590:	47a0      	blx	r4
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    4592:	2101      	movs	r1, #1
    4594:	4640      	mov	r0, r8
    4596:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4650 <grid_sys_uart_init+0x150>
    459a:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    459c:	2101      	movs	r1, #1
    459e:	4638      	mov	r0, r7
    45a0:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    45a2:	2101      	movs	r1, #1
    45a4:	4630      	mov	r0, r6
    45a6:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    45a8:	2101      	movs	r1, #1
    45aa:	4628      	mov	r0, r5
    45ac:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    45ae:	4a1d      	ldr	r2, [pc, #116]	; (4624 <grid_sys_uart_init+0x124>)
    45b0:	2102      	movs	r1, #2
    45b2:	4640      	mov	r0, r8
    45b4:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    45b6:	4a1c      	ldr	r2, [pc, #112]	; (4628 <grid_sys_uart_init+0x128>)
    45b8:	2102      	movs	r1, #2
    45ba:	4638      	mov	r0, r7
    45bc:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    45be:	4a1b      	ldr	r2, [pc, #108]	; (462c <grid_sys_uart_init+0x12c>)
    45c0:	2102      	movs	r1, #2
    45c2:	4630      	mov	r0, r6
    45c4:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    45c6:	4a1a      	ldr	r2, [pc, #104]	; (4630 <grid_sys_uart_init+0x130>)
    45c8:	2102      	movs	r1, #2
    45ca:	4628      	mov	r0, r5
    45cc:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    45ce:	4919      	ldr	r1, [pc, #100]	; (4634 <grid_sys_uart_init+0x134>)
    45d0:	4640      	mov	r0, r8
    45d2:	4c19      	ldr	r4, [pc, #100]	; (4638 <grid_sys_uart_init+0x138>)
    45d4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    45d6:	4919      	ldr	r1, [pc, #100]	; (463c <grid_sys_uart_init+0x13c>)
    45d8:	4638      	mov	r0, r7
    45da:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    45dc:	4918      	ldr	r1, [pc, #96]	; (4640 <grid_sys_uart_init+0x140>)
    45de:	4630      	mov	r0, r6
    45e0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    45e2:	4918      	ldr	r1, [pc, #96]	; (4644 <grid_sys_uart_init+0x144>)
    45e4:	4628      	mov	r0, r5
    45e6:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    45e8:	4640      	mov	r0, r8
    45ea:	4c17      	ldr	r4, [pc, #92]	; (4648 <grid_sys_uart_init+0x148>)
    45ec:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    45ee:	4638      	mov	r0, r7
    45f0:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    45f2:	4630      	mov	r0, r6
    45f4:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    45f6:	4628      	mov	r0, r5
    45f8:	47a0      	blx	r4
    45fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    45fe:	bf00      	nop
    4600:	41008000 	.word	0x41008000
    4604:	00004415 	.word	0x00004415
    4608:	00006929 	.word	0x00006929
    460c:	2000107c 	.word	0x2000107c
    4610:	00004401 	.word	0x00004401
    4614:	200011d4 	.word	0x200011d4
    4618:	000043ed 	.word	0x000043ed
    461c:	20001184 	.word	0x20001184
    4620:	000043d9 	.word	0x000043d9
    4624:	00004479 	.word	0x00004479
    4628:	00004465 	.word	0x00004465
    462c:	00004451 	.word	0x00004451
    4630:	0000443d 	.word	0x0000443d
    4634:	200032cc 	.word	0x200032cc
    4638:	00006901 	.word	0x00006901
    463c:	200047a0 	.word	0x200047a0
    4640:	200057ac 	.word	0x200057ac
    4644:	2000795c 	.word	0x2000795c
    4648:	000068a9 	.word	0x000068a9
    464c:	200010d0 	.word	0x200010d0
    4650:	0000699d 	.word	0x0000699d

00004654 <grid_sys_dma_rx_init_one>:

}



void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    4654:	b5f0      	push	{r4, r5, r6, r7, lr}
    4656:	b083      	sub	sp, #12
    4658:	4605      	mov	r5, r0
    465a:	460f      	mov	r7, r1
    465c:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    465e:	7b84      	ldrb	r4, [r0, #14]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    4660:	6883      	ldr	r3, [r0, #8]
    4662:	6a19      	ldr	r1, [r3, #32]
    4664:	3128      	adds	r1, #40	; 0x28
    4666:	4620      	mov	r0, r4
    4668:	4b0d      	ldr	r3, [pc, #52]	; (46a0 <grid_sys_dma_rx_init_one+0x4c>)
    466a:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    466c:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    4670:	4620      	mov	r0, r4
    4672:	4b0c      	ldr	r3, [pc, #48]	; (46a4 <grid_sys_dma_rx_init_one+0x50>)
    4674:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    4676:	4639      	mov	r1, r7
    4678:	4620      	mov	r0, r4
    467a:	4b0b      	ldr	r3, [pc, #44]	; (46a8 <grid_sys_dma_rx_init_one+0x54>)
    467c:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    467e:	4621      	mov	r1, r4
    4680:	a801      	add	r0, sp, #4
    4682:	4b0a      	ldr	r3, [pc, #40]	; (46ac <grid_sys_dma_rx_init_one+0x58>)
    4684:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    4686:	9b01      	ldr	r3, [sp, #4]
    4688:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    468a:	2201      	movs	r2, #1
    468c:	2100      	movs	r1, #0
    468e:	4620      	mov	r0, r4
    4690:	4b07      	ldr	r3, [pc, #28]	; (46b0 <grid_sys_dma_rx_init_one+0x5c>)
    4692:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    4694:	2100      	movs	r1, #0
    4696:	4620      	mov	r0, r4
    4698:	4b06      	ldr	r3, [pc, #24]	; (46b4 <grid_sys_dma_rx_init_one+0x60>)
    469a:	4798      	blx	r3
	

}
    469c:	b003      	add	sp, #12
    469e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46a0:	00007899 	.word	0x00007899
    46a4:	00007889 	.word	0x00007889
    46a8:	000078c5 	.word	0x000078c5
    46ac:	0000795d 	.word	0x0000795d
    46b0:	00007835 	.word	0x00007835
    46b4:	0000791d 	.word	0x0000791d

000046b8 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    46b8:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    46ba:	4a10      	ldr	r2, [pc, #64]	; (46fc <grid_sys_dma_rx_init+0x44>)
    46bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    46c0:	480f      	ldr	r0, [pc, #60]	; (4700 <grid_sys_dma_rx_init+0x48>)
    46c2:	4c10      	ldr	r4, [pc, #64]	; (4704 <grid_sys_dma_rx_init+0x4c>)
    46c4:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    46c6:	4a10      	ldr	r2, [pc, #64]	; (4708 <grid_sys_dma_rx_init+0x50>)
    46c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    46cc:	480f      	ldr	r0, [pc, #60]	; (470c <grid_sys_dma_rx_init+0x54>)
    46ce:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    46d0:	4a0f      	ldr	r2, [pc, #60]	; (4710 <grid_sys_dma_rx_init+0x58>)
    46d2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    46d6:	480f      	ldr	r0, [pc, #60]	; (4714 <grid_sys_dma_rx_init+0x5c>)
    46d8:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    46da:	4a0f      	ldr	r2, [pc, #60]	; (4718 <grid_sys_dma_rx_init+0x60>)
    46dc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    46e0:	480e      	ldr	r0, [pc, #56]	; (471c <grid_sys_dma_rx_init+0x64>)
    46e2:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    46e4:	4b0e      	ldr	r3, [pc, #56]	; (4720 <grid_sys_dma_rx_init+0x68>)
    46e6:	2200      	movs	r2, #0
    46e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    46ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    46f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    46f4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    46f8:	bd10      	pop	{r4, pc}
    46fa:	bf00      	nop
    46fc:	000044ed 	.word	0x000044ed
    4700:	200012a4 	.word	0x200012a4
    4704:	00004655 	.word	0x00004655
    4708:	000044d9 	.word	0x000044d9
    470c:	200068b8 	.word	0x200068b8
    4710:	000044c5 	.word	0x000044c5
    4714:	200047a4 	.word	0x200047a4
    4718:	000044b1 	.word	0x000044b1
    471c:	20003798 	.word	0x20003798
    4720:	e000e100 	.word	0xe000e100

00004724 <grid_sys_bank_enable>:
}


uint8_t grid_sys_bank_enable(struct grid_sys_model* mod, uint8_t banknumber){
	
	if (banknumber>GRID_SYS_BANK_MAXNUMBER){
    4724:	2904      	cmp	r1, #4
    4726:	d901      	bls.n	472c <grid_sys_bank_enable+0x8>
		return false;
    4728:	2000      	movs	r0, #0
    472a:	4770      	bx	lr
	}
	
	mod->bank_enabled[banknumber] = 1;
    472c:	4401      	add	r1, r0
    472e:	2301      	movs	r3, #1
    4730:	72cb      	strb	r3, [r1, #11]
}
    4732:	4770      	bx	lr

00004734 <grid_sys_bank_disable>:

uint8_t grid_sys_bank_disable(struct grid_sys_model* mod, uint8_t banknumber){
	
	if (banknumber>GRID_SYS_BANK_MAXNUMBER){
    4734:	2904      	cmp	r1, #4
    4736:	d901      	bls.n	473c <grid_sys_bank_disable+0x8>
		return false;
    4738:	2000      	movs	r0, #0
    473a:	4770      	bx	lr
	}
	
	mod->bank_enabled[banknumber] = 0;
    473c:	4401      	add	r1, r0
    473e:	2300      	movs	r3, #0
    4740:	72cb      	strb	r3, [r1, #11]
	
}
    4742:	4770      	bx	lr

00004744 <grid_sys_bank_set_color>:

uint8_t grid_sys_bank_set_color(struct grid_sys_model* mod, uint8_t banknumber, uint32_t rgb){
	
	if (banknumber>GRID_SYS_BANK_MAXNUMBER){
    4744:	2904      	cmp	r1, #4
    4746:	d901      	bls.n	474c <grid_sys_bank_set_color+0x8>
		return false;
    4748:	2000      	movs	r0, #0
    474a:	4770      	bx	lr
	}
	
	// 0x00RRGGBB
	
	mod->bank_color_r[banknumber] = ((rgb&0x00FF0000)>>16);
    474c:	4408      	add	r0, r1
    474e:	0c13      	lsrs	r3, r2, #16
    4750:	73c3      	strb	r3, [r0, #15]
	mod->bank_color_g[banknumber] = ((rgb&0x0000FF00)>>8);
    4752:	0a13      	lsrs	r3, r2, #8
    4754:	74c3      	strb	r3, [r0, #19]
	mod->bank_color_b[banknumber] = ((rgb&0x000000FF)>>0);
    4756:	75c2      	strb	r2, [r0, #23]
	
}
    4758:	4770      	bx	lr

0000475a <grid_sys_get_bank>:


uint8_t grid_sys_get_bank(struct grid_sys_model* mod){
	
	return mod->bank_active;
}
    475a:	7a40      	ldrb	r0, [r0, #9]
    475c:	4770      	bx	lr

0000475e <grid_sys_get_bank_next>:


uint8_t grid_sys_get_bank_next(struct grid_sys_model* mod){
    475e:	b430      	push	{r4, r5}
	return mod->bank_active;
    4760:	7a44      	ldrb	r4, [r0, #9]
		
	uint8_t current_active = grid_sys_get_bank(mod);
		
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
		
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    4762:	1c63      	adds	r3, r4, #1
    4764:	425a      	negs	r2, r3
    4766:	f003 0303 	and.w	r3, r3, #3
    476a:	f002 0203 	and.w	r2, r2, #3
    476e:	bf58      	it	pl
    4770:	4253      	negpl	r3, r2
		
		if (mod->bank_enabled[bank_check] == 1){
    4772:	fa50 f283 	uxtab	r2, r0, r3
    4776:	7ad2      	ldrb	r2, [r2, #11]
    4778:	2a01      	cmp	r2, #1
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    477a:	bf08      	it	eq
    477c:	b2dc      	uxtbeq	r4, r3
		if (mod->bank_enabled[bank_check] == 1){
    477e:	d010      	beq.n	47a2 <grid_sys_get_bank_next+0x44>
    4780:	1ca3      	adds	r3, r4, #2
    4782:	1d65      	adds	r5, r4, #5
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    4784:	4259      	negs	r1, r3
    4786:	f003 0203 	and.w	r2, r3, #3
    478a:	f001 0103 	and.w	r1, r1, #3
    478e:	bf58      	it	pl
    4790:	424a      	negpl	r2, r1
		if (mod->bank_enabled[bank_check] == 1){
    4792:	fa50 f182 	uxtab	r1, r0, r2
    4796:	7ac9      	ldrb	r1, [r1, #11]
    4798:	2901      	cmp	r1, #1
    479a:	d005      	beq.n	47a8 <grid_sys_get_bank_next+0x4a>
    479c:	3301      	adds	r3, #1
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    479e:	42ab      	cmp	r3, r5
    47a0:	d1f0      	bne.n	4784 <grid_sys_get_bank_next+0x26>
		
	}
	
	return current_active;
	
}
    47a2:	4620      	mov	r0, r4
    47a4:	bc30      	pop	{r4, r5}
    47a6:	4770      	bx	lr
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    47a8:	b2d4      	uxtb	r4, r2
    47aa:	e7fa      	b.n	47a2 <grid_sys_get_bank_next+0x44>

000047ac <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    47ac:	69c0      	ldr	r0, [r0, #28]
    47ae:	4770      	bx	lr

000047b0 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    47b0:	69c0      	ldr	r0, [r0, #28]
	
	

}
    47b2:	1a40      	subs	r0, r0, r1
    47b4:	4770      	bx	lr

000047b6 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    47b6:	69c3      	ldr	r3, [r0, #28]
    47b8:	3301      	adds	r3, #1
    47ba:	61c3      	str	r3, [r0, #28]
    47bc:	4770      	bx	lr

000047be <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    47be:	7a00      	ldrb	r0, [r0, #8]
    47c0:	4770      	bx	lr

000047c2 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    47c2:	2300      	movs	r3, #0
    47c4:	7203      	strb	r3, [r0, #8]
    47c6:	4770      	bx	lr

000047c8 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    47c8:	7983      	ldrb	r3, [r0, #6]
    47ca:	b123      	cbz	r3, 47d6 <grid_sys_alert_get_color_intensity+0xe>
		
		return (250-abs(mod->alert_state/2-250))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    47cc:	2b01      	cmp	r3, #1
    47ce:	d00f      	beq.n	47f0 <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    47d0:	2b02      	cmp	r3, #2
    47d2:	d015      	beq.n	4800 <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    47d4:	4770      	bx	lr
		return (250-abs(mod->alert_state/2-250))/2;
    47d6:	8880      	ldrh	r0, [r0, #4]
    47d8:	0840      	lsrs	r0, r0, #1
    47da:	38fa      	subs	r0, #250	; 0xfa
    47dc:	2800      	cmp	r0, #0
    47de:	bfb8      	it	lt
    47e0:	4240      	neglt	r0, r0
    47e2:	f1c0 00fa 	rsb	r0, r0, #250	; 0xfa
    47e6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    47ea:	f3c0 0047 	ubfx	r0, r0, #1, #8
    47ee:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    47f0:	8880      	ldrh	r0, [r0, #4]
    47f2:	4b06      	ldr	r3, [pc, #24]	; (480c <grid_sys_alert_get_color_intensity+0x44>)
    47f4:	fba3 3000 	umull	r3, r0, r3, r0
    47f8:	f340 1000 	sbfx	r0, r0, #4, #1
    47fc:	b2c0      	uxtb	r0, r0
    47fe:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    4800:	8880      	ldrh	r0, [r0, #4]
    4802:	2864      	cmp	r0, #100	; 0x64
    4804:	bf8c      	ite	hi
    4806:	20ff      	movhi	r0, #255	; 0xff
    4808:	2000      	movls	r0, #0
    480a:	4770      	bx	lr
    480c:	10624dd3 	.word	0x10624dd3

00004810 <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    4810:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    4812:	2401      	movs	r4, #1
    4814:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    4816:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    4818:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    481a:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    481c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    4820:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    4822:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4826:	7183      	strb	r3, [r0, #6]
	
}
    4828:	f85d 4b04 	ldr.w	r4, [sp], #4
    482c:	4770      	bx	lr

0000482e <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    482e:	7840      	ldrb	r0, [r0, #1]
    4830:	4770      	bx	lr

00004832 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    4832:	7880      	ldrb	r0, [r0, #2]
    4834:	4770      	bx	lr

00004836 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    4836:	78c0      	ldrb	r0, [r0, #3]
    4838:	4770      	bx	lr

0000483a <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    483a:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    483c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4840:	b2d8      	uxtb	r0, r3
    4842:	2809      	cmp	r0, #9
    4844:	d90d      	bls.n	4862 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    4846:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    484a:	b2db      	uxtb	r3, r3
    484c:	2b05      	cmp	r3, #5
    484e:	d903      	bls.n	4858 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    4850:	b131      	cbz	r1, 4860 <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    4852:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    4854:	2000      	movs	r0, #0
    4856:	4770      	bx	lr
		result = ascii - 97 + 10;
    4858:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    485c:	b2c0      	uxtb	r0, r0
    485e:	4770      	bx	lr
	uint8_t result = 0;
    4860:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    4862:	4770      	bx	lr

00004864 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    4864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    4868:	b1c1      	cbz	r1, 489c <grid_sys_read_hex_string_value+0x38>
    486a:	4690      	mov	r8, r2
    486c:	1e45      	subs	r5, r0, #1
    486e:	1e4b      	subs	r3, r1, #1
    4870:	009c      	lsls	r4, r3, #2
    4872:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    4876:	3f02      	subs	r7, #2
    4878:	b2db      	uxtb	r3, r3
    487a:	1aff      	subs	r7, r7, r3
    487c:	00bf      	lsls	r7, r7, #2
    487e:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    4880:	f8df 901c 	ldr.w	r9, [pc, #28]	; 48a0 <grid_sys_read_hex_string_value+0x3c>
    4884:	4641      	mov	r1, r8
    4886:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    488a:	47c8      	blx	r9
    488c:	40a0      	lsls	r0, r4
    488e:	4406      	add	r6, r0
    4890:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    4892:	42bc      	cmp	r4, r7
    4894:	d1f6      	bne.n	4884 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    4896:	4630      	mov	r0, r6
    4898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    489c:	2600      	movs	r6, #0
	return result;
    489e:	e7fa      	b.n	4896 <grid_sys_read_hex_string_value+0x32>
    48a0:	0000483b 	.word	0x0000483b

000048a4 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    48a4:	b530      	push	{r4, r5, lr}
    48a6:	b085      	sub	sp, #20
    48a8:	4605      	mov	r5, r0
    48aa:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    48ac:	4909      	ldr	r1, [pc, #36]	; (48d4 <grid_sys_write_hex_string_value+0x30>)
    48ae:	a801      	add	r0, sp, #4
    48b0:	4b09      	ldr	r3, [pc, #36]	; (48d8 <grid_sys_write_hex_string_value+0x34>)
    48b2:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    48b4:	b164      	cbz	r4, 48d0 <grid_sys_write_hex_string_value+0x2c>
    48b6:	ab04      	add	r3, sp, #16
    48b8:	1b1a      	subs	r2, r3, r4
    48ba:	3a05      	subs	r2, #5
    48bc:	1e6b      	subs	r3, r5, #1
    48be:	1e60      	subs	r0, r4, #1
    48c0:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    48c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    48c8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    48cc:	4283      	cmp	r3, r0
    48ce:	d1f9      	bne.n	48c4 <grid_sys_write_hex_string_value+0x20>
	}

}
    48d0:	b005      	add	sp, #20
    48d2:	bd30      	pop	{r4, r5, pc}
    48d4:	0000e8d4 	.word	0x0000e8d4
    48d8:	0000d4d5 	.word	0x0000d4d5

000048dc <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    48dc:	4b34      	ldr	r3, [pc, #208]	; (49b0 <grid_sys_get_hwcfg+0xd4>)
    48de:	681b      	ldr	r3, [r3, #0]
    48e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    48e4:	d002      	beq.n	48ec <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    48e6:	4b32      	ldr	r3, [pc, #200]	; (49b0 <grid_sys_get_hwcfg+0xd4>)
    48e8:	6818      	ldr	r0, [r3, #0]
    48ea:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    48ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    48f0:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    48f2:	4b30      	ldr	r3, [pc, #192]	; (49b4 <grid_sys_get_hwcfg+0xd8>)
    48f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    48f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    48fc:	492e      	ldr	r1, [pc, #184]	; (49b8 <grid_sys_get_hwcfg+0xdc>)
    48fe:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4902:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    4906:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    490a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    490e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4912:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    4916:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    491a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    491e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4922:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4926:	4925      	ldr	r1, [pc, #148]	; (49bc <grid_sys_get_hwcfg+0xe0>)
    4928:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    492c:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    4930:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4934:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    4938:	2001      	movs	r0, #1
    493a:	4b21      	ldr	r3, [pc, #132]	; (49c0 <grid_sys_get_hwcfg+0xe4>)
    493c:	4798      	blx	r3
    493e:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    4940:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4942:	4d1c      	ldr	r5, [pc, #112]	; (49b4 <grid_sys_get_hwcfg+0xd8>)
    4944:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    4948:	4f1d      	ldr	r7, [pc, #116]	; (49c0 <grid_sys_get_hwcfg+0xe4>)
    494a:	e00c      	b.n	4966 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    494c:	2e07      	cmp	r6, #7
    494e:	d027      	beq.n	49a0 <grid_sys_get_hwcfg+0xc4>
    4950:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    4954:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    4958:	2001      	movs	r0, #1
    495a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    495c:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    4960:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    4962:	2e08      	cmp	r6, #8
    4964:	d01c      	beq.n	49a0 <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4966:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    496a:	2001      	movs	r0, #1
    496c:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    496e:	a801      	add	r0, sp, #4
    4970:	4b14      	ldr	r3, [pc, #80]	; (49c4 <grid_sys_get_hwcfg+0xe8>)
    4972:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4974:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4978:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    497c:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4980:	405c      	eors	r4, r3
    4982:	4014      	ands	r4, r2
    4984:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    4986:	a801      	add	r0, sp, #4
    4988:	4b0f      	ldr	r3, [pc, #60]	; (49c8 <grid_sys_get_hwcfg+0xec>)
    498a:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    498c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    4990:	d0dc      	beq.n	494c <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    4992:	2301      	movs	r3, #1
    4994:	40b3      	lsls	r3, r6
    4996:	ea43 0808 	orr.w	r8, r3, r8
    499a:	fa5f f888 	uxtb.w	r8, r8
    499e:	e7d5      	b.n	494c <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    49a0:	4b03      	ldr	r3, [pc, #12]	; (49b0 <grid_sys_get_hwcfg+0xd4>)
    49a2:	f8c3 8000 	str.w	r8, [r3]
}
    49a6:	4b02      	ldr	r3, [pc, #8]	; (49b0 <grid_sys_get_hwcfg+0xd4>)
    49a8:	6818      	ldr	r0, [r3, #0]
    49aa:	b003      	add	sp, #12
    49ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    49b0:	20000344 	.word	0x20000344
    49b4:	41008000 	.word	0x41008000
    49b8:	40002000 	.word	0x40002000
    49bc:	40028000 	.word	0x40028000
    49c0:	00005c81 	.word	0x00005c81
    49c4:	00005c01 	.word	0x00005c01
    49c8:	00005c0f 	.word	0x00005c0f

000049cc <grid_sys_set_bank>:
void grid_sys_set_bank(struct grid_sys_model* mod, uint8_t banknumber){
    49cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49d0:	b087      	sub	sp, #28
    49d2:	4680      	mov	r8, r0
    49d4:	460c      	mov	r4, r1
	mod->bank_changed = 1;
    49d6:	2301      	movs	r3, #1
    49d8:	7283      	strb	r3, [r0, #10]
	uint32_t hwtype = grid_sys_get_hwcfg();
    49da:	4b52      	ldr	r3, [pc, #328]	; (4b24 <grid_sys_set_bank+0x158>)
    49dc:	4798      	blx	r3
	if (banknumber == 255){
    49de:	2cff      	cmp	r4, #255	; 0xff
    49e0:	d009      	beq.n	49f6 <grid_sys_set_bank+0x2a>
    49e2:	f004 0403 	and.w	r4, r4, #3
		if (mod->bank_enabled[banknumber%GRID_SYS_BANK_MAXNUMBER] == 1){
    49e6:	eb08 0304 	add.w	r3, r8, r4
    49ea:	7adb      	ldrb	r3, [r3, #11]
    49ec:	2b01      	cmp	r3, #1
    49ee:	d042      	beq.n	4a76 <grid_sys_set_bank+0xaa>
}
    49f0:	b007      	add	sp, #28
    49f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mod->bank_active = 255;
    49f6:	23ff      	movs	r3, #255	; 0xff
    49f8:	f888 3009 	strb.w	r3, [r8, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    49fc:	2700      	movs	r7, #0
    49fe:	f8df b134 	ldr.w	fp, [pc, #308]	; 4b34 <grid_sys_set_bank+0x168>
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/20, g/20, b/20);
    4a02:	f8df a128 	ldr.w	sl, [pc, #296]	; 4b2c <grid_sys_set_bank+0x160>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    4a06:	e02f      	b.n	4a68 <grid_sys_set_bank+0x9c>
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/20, g/20, b/20);
    4a08:	2306      	movs	r3, #6
    4a0a:	9301      	str	r3, [sp, #4]
    4a0c:	9300      	str	r3, [sp, #0]
    4a0e:	2201      	movs	r2, #1
    4a10:	4621      	mov	r1, r4
    4a12:	4845      	ldr	r0, [pc, #276]	; (4b28 <grid_sys_set_bank+0x15c>)
    4a14:	47d0      	blx	sl
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/2, g/2, b/2);
    4a16:	263f      	movs	r6, #63	; 0x3f
    4a18:	9601      	str	r6, [sp, #4]
    4a1a:	9600      	str	r6, [sp, #0]
    4a1c:	4633      	mov	r3, r6
    4a1e:	2201      	movs	r2, #1
    4a20:	4621      	mov	r1, r4
    4a22:	4841      	ldr	r0, [pc, #260]	; (4b28 <grid_sys_set_bank+0x15c>)
    4a24:	f8df 9110 	ldr.w	r9, [pc, #272]	; 4b38 <grid_sys_set_bank+0x16c>
    4a28:	47c8      	blx	r9
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_A, r, g, b);
    4a2a:	257f      	movs	r5, #127	; 0x7f
    4a2c:	9501      	str	r5, [sp, #4]
    4a2e:	9500      	str	r5, [sp, #0]
    4a30:	462b      	mov	r3, r5
    4a32:	2201      	movs	r2, #1
    4a34:	4621      	mov	r1, r4
    4a36:	483c      	ldr	r0, [pc, #240]	; (4b28 <grid_sys_set_bank+0x15c>)
    4a38:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4b30 <grid_sys_set_bank+0x164>
    4a3c:	47c0      	blx	r8
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_B, 0, 0, 0);
    4a3e:	2300      	movs	r3, #0
    4a40:	9301      	str	r3, [sp, #4]
    4a42:	9300      	str	r3, [sp, #0]
    4a44:	2202      	movs	r2, #2
    4a46:	4621      	mov	r1, r4
    4a48:	4837      	ldr	r0, [pc, #220]	; (4b28 <grid_sys_set_bank+0x15c>)
    4a4a:	47d0      	blx	sl
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_B, r/2, g/2, b/2);
    4a4c:	9601      	str	r6, [sp, #4]
    4a4e:	9600      	str	r6, [sp, #0]
    4a50:	4633      	mov	r3, r6
    4a52:	2202      	movs	r2, #2
    4a54:	4621      	mov	r1, r4
    4a56:	4834      	ldr	r0, [pc, #208]	; (4b28 <grid_sys_set_bank+0x15c>)
    4a58:	47c8      	blx	r9
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_B, r, g, b);
    4a5a:	9501      	str	r5, [sp, #4]
    4a5c:	9500      	str	r5, [sp, #0]
    4a5e:	462b      	mov	r3, r5
    4a60:	2202      	movs	r2, #2
    4a62:	4621      	mov	r1, r4
    4a64:	4830      	ldr	r0, [pc, #192]	; (4b28 <grid_sys_set_bank+0x15c>)
    4a66:	47c0      	blx	r8
    4a68:	b2fc      	uxtb	r4, r7
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    4a6a:	482f      	ldr	r0, [pc, #188]	; (4b28 <grid_sys_set_bank+0x15c>)
    4a6c:	47d8      	blx	fp
    4a6e:	3701      	adds	r7, #1
    4a70:	42a0      	cmp	r0, r4
    4a72:	d8c9      	bhi.n	4a08 <grid_sys_set_bank+0x3c>
    4a74:	e7bc      	b.n	49f0 <grid_sys_set_bank+0x24>
			mod->bank_active = banknumber%GRID_SYS_BANK_MAXNUMBER;
    4a76:	f888 4009 	strb.w	r4, [r8, #9]
			for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    4a7a:	2300      	movs	r3, #0
    4a7c:	9303      	str	r3, [sp, #12]
    4a7e:	f8cd 8014 	str.w	r8, [sp, #20]
    4a82:	e043      	b.n	4b0c <grid_sys_set_bank+0x140>
				uint8_t r = mod->bank_color_r[mod->bank_active];
    4a84:	9a05      	ldr	r2, [sp, #20]
    4a86:	7a53      	ldrb	r3, [r2, #9]
    4a88:	4413      	add	r3, r2
    4a8a:	f893 900f 	ldrb.w	r9, [r3, #15]
				uint8_t g = mod->bank_color_g[mod->bank_active];
    4a8e:	7cdd      	ldrb	r5, [r3, #19]
				uint8_t b = mod->bank_color_b[mod->bank_active];
    4a90:	7dde      	ldrb	r6, [r3, #23]
				grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/32, g/32, b/32);
    4a92:	0973      	lsrs	r3, r6, #5
    4a94:	9301      	str	r3, [sp, #4]
    4a96:	096b      	lsrs	r3, r5, #5
    4a98:	9300      	str	r3, [sp, #0]
    4a9a:	ea4f 1359 	mov.w	r3, r9, lsr #5
    4a9e:	2201      	movs	r2, #1
    4aa0:	4621      	mov	r1, r4
    4aa2:	4821      	ldr	r0, [pc, #132]	; (4b28 <grid_sys_set_bank+0x15c>)
    4aa4:	4f21      	ldr	r7, [pc, #132]	; (4b2c <grid_sys_set_bank+0x160>)
    4aa6:	47b8      	blx	r7
				grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/2, g/2, b/2);
    4aa8:	ea4f 0359 	mov.w	r3, r9, lsr #1
    4aac:	ea4f 0a55 	mov.w	sl, r5, lsr #1
    4ab0:	ea4f 0b56 	mov.w	fp, r6, lsr #1
    4ab4:	f8cd b004 	str.w	fp, [sp, #4]
    4ab8:	f8cd a000 	str.w	sl, [sp]
    4abc:	9304      	str	r3, [sp, #16]
    4abe:	2201      	movs	r2, #1
    4ac0:	4621      	mov	r1, r4
    4ac2:	4819      	ldr	r0, [pc, #100]	; (4b28 <grid_sys_set_bank+0x15c>)
    4ac4:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4b38 <grid_sys_set_bank+0x16c>
    4ac8:	47c0      	blx	r8
				grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_A, r, g, b);
    4aca:	9601      	str	r6, [sp, #4]
    4acc:	9500      	str	r5, [sp, #0]
    4ace:	464b      	mov	r3, r9
    4ad0:	2201      	movs	r2, #1
    4ad2:	4621      	mov	r1, r4
    4ad4:	4814      	ldr	r0, [pc, #80]	; (4b28 <grid_sys_set_bank+0x15c>)
    4ad6:	4f16      	ldr	r7, [pc, #88]	; (4b30 <grid_sys_set_bank+0x164>)
    4ad8:	47b8      	blx	r7
				grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_B, 0, 0, 0);
    4ada:	2300      	movs	r3, #0
    4adc:	9301      	str	r3, [sp, #4]
    4ade:	9300      	str	r3, [sp, #0]
    4ae0:	2202      	movs	r2, #2
    4ae2:	4621      	mov	r1, r4
    4ae4:	4810      	ldr	r0, [pc, #64]	; (4b28 <grid_sys_set_bank+0x15c>)
    4ae6:	4f11      	ldr	r7, [pc, #68]	; (4b2c <grid_sys_set_bank+0x160>)
    4ae8:	47b8      	blx	r7
				grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_B, r/2, g/2, b/2);
    4aea:	f8cd b004 	str.w	fp, [sp, #4]
    4aee:	f8cd a000 	str.w	sl, [sp]
    4af2:	9b04      	ldr	r3, [sp, #16]
    4af4:	2202      	movs	r2, #2
    4af6:	4621      	mov	r1, r4
    4af8:	480b      	ldr	r0, [pc, #44]	; (4b28 <grid_sys_set_bank+0x15c>)
    4afa:	47c0      	blx	r8
				grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_B, r, g, b);
    4afc:	9601      	str	r6, [sp, #4]
    4afe:	9500      	str	r5, [sp, #0]
    4b00:	464b      	mov	r3, r9
    4b02:	2202      	movs	r2, #2
    4b04:	4621      	mov	r1, r4
    4b06:	4808      	ldr	r0, [pc, #32]	; (4b28 <grid_sys_set_bank+0x15c>)
    4b08:	4c09      	ldr	r4, [pc, #36]	; (4b30 <grid_sys_set_bank+0x164>)
    4b0a:	47a0      	blx	r4
    4b0c:	9d03      	ldr	r5, [sp, #12]
    4b0e:	b2ec      	uxtb	r4, r5
			for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    4b10:	4805      	ldr	r0, [pc, #20]	; (4b28 <grid_sys_set_bank+0x15c>)
    4b12:	4a08      	ldr	r2, [pc, #32]	; (4b34 <grid_sys_set_bank+0x168>)
    4b14:	4790      	blx	r2
    4b16:	462b      	mov	r3, r5
    4b18:	3301      	adds	r3, #1
    4b1a:	9303      	str	r3, [sp, #12]
    4b1c:	4284      	cmp	r4, r0
    4b1e:	d3b1      	bcc.n	4a84 <grid_sys_set_bank+0xb8>
    4b20:	e766      	b.n	49f0 <grid_sys_set_bank+0x24>
    4b22:	bf00      	nop
    4b24:	000048dd 	.word	0x000048dd
    4b28:	20007944 	.word	0x20007944
    4b2c:	000027c3 	.word	0x000027c3
    4b30:	00002855 	.word	0x00002855
    4b34:	00002781 	.word	0x00002781
    4b38:	0000280b 	.word	0x0000280b

00004b3c <grid_sys_init>:
void grid_sys_init(struct grid_sys_model* mod){
    4b3c:	b510      	push	{r4, lr}
	mod->bank_color_r[0] = 0;
    4b3e:	2200      	movs	r2, #0
    4b40:	73c2      	strb	r2, [r0, #15]
	mod->bank_color_g[0] = 100;
    4b42:	2164      	movs	r1, #100	; 0x64
    4b44:	74c1      	strb	r1, [r0, #19]
	mod->bank_color_b[0] = 200;
    4b46:	23c8      	movs	r3, #200	; 0xc8
    4b48:	75c3      	strb	r3, [r0, #23]
	mod->bank_color_r[1] = 200;
    4b4a:	7403      	strb	r3, [r0, #16]
	mod->bank_color_g[1] = 100;
    4b4c:	7501      	strb	r1, [r0, #20]
	mod->bank_color_b[1] = 0;
    4b4e:	7602      	strb	r2, [r0, #24]
	mod->bank_color_r[2] = 50;
    4b50:	2432      	movs	r4, #50	; 0x32
    4b52:	7444      	strb	r4, [r0, #17]
	mod->bank_color_g[2] = 200;
    4b54:	7543      	strb	r3, [r0, #21]
	mod->bank_color_b[2] = 50;
    4b56:	7644      	strb	r4, [r0, #25]
	mod->bank_color_r[3] = 100;
    4b58:	7481      	strb	r1, [r0, #18]
	mod->bank_color_g[3] = 0;
    4b5a:	7582      	strb	r2, [r0, #22]
	mod->bank_color_b[3] = 200;
    4b5c:	7683      	strb	r3, [r0, #26]
	mod->bank_enabled[0] = 1;
    4b5e:	2301      	movs	r3, #1
    4b60:	72c3      	strb	r3, [r0, #11]
	mod->bank_enabled[1] = 1;
    4b62:	7303      	strb	r3, [r0, #12]
	mod->bank_enabled[2] = 1;
    4b64:	7343      	strb	r3, [r0, #13]
	mod->bank_enabled[3] = 1;
    4b66:	7383      	strb	r3, [r0, #14]
	grid_sys_set_bank(&grid_sys_state, 255);
    4b68:	21ff      	movs	r1, #255	; 0xff
    4b6a:	4805      	ldr	r0, [pc, #20]	; (4b80 <grid_sys_init+0x44>)
    4b6c:	4b05      	ldr	r3, [pc, #20]	; (4b84 <grid_sys_init+0x48>)
    4b6e:	4798      	blx	r3
	grid_port_init_all();
    4b70:	4b05      	ldr	r3, [pc, #20]	; (4b88 <grid_sys_init+0x4c>)
    4b72:	4798      	blx	r3
	grid_sys_uart_init();
    4b74:	4b05      	ldr	r3, [pc, #20]	; (4b8c <grid_sys_init+0x50>)
    4b76:	4798      	blx	r3
	grid_sys_dma_rx_init();
    4b78:	4b05      	ldr	r3, [pc, #20]	; (4b90 <grid_sys_init+0x54>)
    4b7a:	4798      	blx	r3
    4b7c:	bd10      	pop	{r4, pc}
    4b7e:	bf00      	nop
    4b80:	200032d0 	.word	0x200032d0
    4b84:	000049cd 	.word	0x000049cd
    4b88:	00001ead 	.word	0x00001ead
    4b8c:	00004501 	.word	0x00004501
    4b90:	000046b9 	.word	0x000046b9

00004b94 <grid_msg_checksum_calculate>:
}

uint8_t grid_msg_checksum_calculate(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    4b94:	2903      	cmp	r1, #3
    4b96:	d009      	beq.n	4bac <grid_msg_checksum_calculate+0x18>
    4b98:	1e43      	subs	r3, r0, #1
    4b9a:	3904      	subs	r1, #4
    4b9c:	4401      	add	r1, r0
    4b9e:	2000      	movs	r0, #0
		checksum ^= str[i];
    4ba0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4ba4:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    4ba6:	428b      	cmp	r3, r1
    4ba8:	d1fa      	bne.n	4ba0 <grid_msg_checksum_calculate+0xc>
    4baa:	4770      	bx	lr
	uint8_t checksum = 0;
    4bac:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    4bae:	4770      	bx	lr

00004bb0 <grid_msg_checksum_read>:

uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    4bb0:	b500      	push	{lr}
    4bb2:	b083      	sub	sp, #12
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    4bb4:	1ecb      	subs	r3, r1, #3
    4bb6:	f10d 0207 	add.w	r2, sp, #7
    4bba:	2102      	movs	r1, #2
    4bbc:	4418      	add	r0, r3
    4bbe:	4b03      	ldr	r3, [pc, #12]	; (4bcc <grid_msg_checksum_read+0x1c>)
    4bc0:	4798      	blx	r3
}
    4bc2:	b2c0      	uxtb	r0, r0
    4bc4:	b003      	add	sp, #12
    4bc6:	f85d fb04 	ldr.w	pc, [sp], #4
    4bca:	bf00      	nop
    4bcc:	00004865 	.word	0x00004865

00004bd0 <grid_msg_checksum_write>:

void grid_msg_checksum_write(uint8_t* message, uint32_t length, uint8_t checksum){
    4bd0:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    4bd2:	1ecb      	subs	r3, r1, #3
    4bd4:	2102      	movs	r1, #2
    4bd6:	4418      	add	r0, r3
    4bd8:	4b01      	ldr	r3, [pc, #4]	; (4be0 <grid_msg_checksum_write+0x10>)
    4bda:	4798      	blx	r3
    4bdc:	bd08      	pop	{r3, pc}
    4bde:	bf00      	nop
    4be0:	000048a5 	.word	0x000048a5

00004be4 <grid_msg_get_parameter>:
}


// MESSAGE PARAMETER FUNCTIONS

uint32_t grid_msg_get_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint8_t* error){
    4be4:	b510      	push	{r4, lr}
    4be6:	4614      	mov	r4, r2
		
	return grid_sys_read_hex_string_value(&message[offset], length, error);	
    4be8:	4408      	add	r0, r1
    4bea:	461a      	mov	r2, r3
    4bec:	4621      	mov	r1, r4
    4bee:	4b01      	ldr	r3, [pc, #4]	; (4bf4 <grid_msg_get_parameter+0x10>)
    4bf0:	4798      	blx	r3
}
    4bf2:	bd10      	pop	{r4, pc}
    4bf4:	00004865 	.word	0x00004865

00004bf8 <grid_msg_set_parameter>:

uint32_t grid_msg_set_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint32_t value, uint8_t* error){
    4bf8:	b510      	push	{r4, lr}
    4bfa:	4614      	mov	r4, r2
	
	grid_sys_write_hex_string_value(&message[offset], length, value);
    4bfc:	4408      	add	r0, r1
    4bfe:	461a      	mov	r2, r3
    4c00:	4621      	mov	r1, r4
    4c02:	4b01      	ldr	r3, [pc, #4]	; (4c08 <grid_msg_set_parameter+0x10>)
    4c04:	4798      	blx	r3
	
}
    4c06:	bd10      	pop	{r4, pc}
    4c08:	000048a5 	.word	0x000048a5

00004c0c <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    4c0c:	6a03      	ldr	r3, [r0, #32]
    4c0e:	4299      	cmp	r1, r3
    4c10:	d00d      	beq.n	4c2e <grid_msg_find_recent+0x22>
    4c12:	2301      	movs	r3, #1
    4c14:	f003 021f 	and.w	r2, r3, #31
    4c18:	3208      	adds	r2, #8
    4c1a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4c1e:	428a      	cmp	r2, r1
    4c20:	d007      	beq.n	4c32 <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    4c22:	3301      	adds	r3, #1
    4c24:	b2db      	uxtb	r3, r3
    4c26:	2b20      	cmp	r3, #32
    4c28:	d1f4      	bne.n	4c14 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    4c2a:	2000      	movs	r0, #0
    4c2c:	4770      	bx	lr
			return 1;
    4c2e:	2001      	movs	r0, #1
    4c30:	4770      	bx	lr
    4c32:	2001      	movs	r0, #1
}
    4c34:	4770      	bx	lr

00004c36 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    4c36:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
    4c3a:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    4c3c:	f003 031f 	and.w	r3, r3, #31
    4c40:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    4c44:	3308      	adds	r3, #8
    4c46:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    4c4a:	4770      	bx	lr

00004c4c <grid_report_model_init>:
	
	}
	
}

uint8_t grid_report_model_init(struct grid_report_model* mod, uint8_t len){
    4c4c:	b510      	push	{r4, lr}
    4c4e:	4604      	mov	r4, r0
	
	
	mod->report_offset = GRID_REPORT_OFFSET; // System Reserved Report Elements
    4c50:	2306      	movs	r3, #6
    4c52:	8043      	strh	r3, [r0, #2]
	
	mod->report_length = len + mod->report_offset;
    4c54:	4419      	add	r1, r3
    4c56:	8001      	strh	r1, [r0, #0]
	
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    4c58:	0108      	lsls	r0, r1, #4
    4c5a:	4b03      	ldr	r3, [pc, #12]	; (4c68 <grid_report_model_init+0x1c>)
    4c5c:	4798      	blx	r3
    4c5e:	6060      	str	r0, [r4, #4]
	
	mod->report_ui_array = &mod->report_array[mod->report_offset];
    4c60:	3060      	adds	r0, #96	; 0x60
    4c62:	60a0      	str	r0, [r4, #8]
		
}
    4c64:	bd10      	pop	{r4, pc}
    4c66:	bf00      	nop
    4c68:	0000d0c1 	.word	0x0000d0c1

00004c6c <grid_ui_model_init>:

void grid_ui_model_init(struct grid_ui_model* mod, uint8_t element_list_length){
    4c6c:	b538      	push	{r3, r4, r5, lr}
    4c6e:	4604      	mov	r4, r0
    4c70:	460d      	mov	r5, r1
	
	mod->status = GRID_UI_STATUS_INITIALIZED;
    4c72:	2301      	movs	r3, #1
    4c74:	7003      	strb	r3, [r0, #0]
	
	mod->element_list_length = element_list_length;	
    4c76:	7041      	strb	r1, [r0, #1]
	mod->element = malloc(mod->element_list_length*sizeof(struct grid_ui_element));
    4c78:	0108      	lsls	r0, r1, #4
    4c7a:	4b09      	ldr	r3, [pc, #36]	; (4ca0 <grid_ui_model_init+0x34>)
    4c7c:	4798      	blx	r3
    4c7e:	6060      	str	r0, [r4, #4]
	
	for(uint8_t i=0; i<element_list_length; i++){
    4c80:	b16d      	cbz	r5, 4c9e <grid_ui_model_init+0x32>
    4c82:	1e69      	subs	r1, r5, #1
    4c84:	b2c9      	uxtb	r1, r1
    4c86:	3101      	adds	r1, #1
    4c88:	0109      	lsls	r1, r1, #4
    4c8a:	2300      	movs	r3, #0
		
		mod->element[i].status = GRID_UI_STATUS_UNDEFINED;		
    4c8c:	4618      	mov	r0, r3
    4c8e:	6862      	ldr	r2, [r4, #4]
    4c90:	54d0      	strb	r0, [r2, r3]
		mod->element[i].event_list_length = 0;
    4c92:	6862      	ldr	r2, [r4, #4]
    4c94:	441a      	add	r2, r3
    4c96:	7210      	strb	r0, [r2, #8]
    4c98:	3310      	adds	r3, #16
	for(uint8_t i=0; i<element_list_length; i++){
    4c9a:	428b      	cmp	r3, r1
    4c9c:	d1f7      	bne.n	4c8e <grid_ui_model_init+0x22>
    4c9e:	bd38      	pop	{r3, r4, r5, pc}
    4ca0:	0000d0c1 	.word	0x0000d0c1

00004ca4 <grid_ui_event_init>:
		
	}
	
}

void grid_ui_event_init(struct grid_ui_event* eve, enum grid_ui_event_t event_type){
    4ca4:	b538      	push	{r3, r4, r5, lr}
    4ca6:	4604      	mov	r4, r0
	
	eve->status = GRID_UI_STATUS_INITIALIZED;
    4ca8:	2301      	movs	r3, #1
    4caa:	7003      	strb	r3, [r0, #0]
	
	eve->type   = event_type;	
    4cac:	7081      	strb	r1, [r0, #2]
	eve->status = GRID_UI_EVENT_STATUS_READY;

	eve->action_string = malloc(GRID_UI_ACTION_STRING_LENGTH*sizeof(uint8_t));
    4cae:	2064      	movs	r0, #100	; 0x64
    4cb0:	4b10      	ldr	r3, [pc, #64]	; (4cf4 <grid_ui_event_init+0x50>)
    4cb2:	4798      	blx	r3
    4cb4:	60e0      	str	r0, [r4, #12]
	
	for (uint32_t i=0; i<GRID_UI_ACTION_STRING_LENGTH; i++){
    4cb6:	2300      	movs	r3, #0
		eve->action_string[i] = 0;
    4cb8:	4619      	mov	r1, r3
    4cba:	68e2      	ldr	r2, [r4, #12]
    4cbc:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i=0; i<GRID_UI_ACTION_STRING_LENGTH; i++){
    4cbe:	3301      	adds	r3, #1
    4cc0:	2b64      	cmp	r3, #100	; 0x64
    4cc2:	d1fa      	bne.n	4cba <grid_ui_event_init+0x16>
	}	
	
	eve->action_length = 0;
    4cc4:	2500      	movs	r5, #0
    4cc6:	6065      	str	r5, [r4, #4]
	
	eve->action_parameter_count = 0;
    4cc8:	7425      	strb	r5, [r4, #16]
	
	eve->action_parameter_list = malloc(GRID_UI_ACTION_PARAMETER_COUNT*sizeof(struct grid_ui_action_parameter));
    4cca:	2028      	movs	r0, #40	; 0x28
    4ccc:	4b09      	ldr	r3, [pc, #36]	; (4cf4 <grid_ui_event_init+0x50>)
    4cce:	4798      	blx	r3
    4cd0:	6160      	str	r0, [r4, #20]
    4cd2:	462b      	mov	r3, r5

	for (uint32_t i=0; i<GRID_UI_ACTION_PARAMETER_COUNT; i++){
		eve->action_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    4cd4:	462a      	mov	r2, r5
    4cd6:	6961      	ldr	r1, [r4, #20]
    4cd8:	54ca      	strb	r2, [r1, r3]
		eve->action_parameter_list[i].address = 0;
    4cda:	6961      	ldr	r1, [r4, #20]
    4cdc:	4419      	add	r1, r3
    4cde:	704a      	strb	r2, [r1, #1]
		eve->action_parameter_list[i].offset = 0;
    4ce0:	6961      	ldr	r1, [r4, #20]
    4ce2:	4419      	add	r1, r3
    4ce4:	70ca      	strb	r2, [r1, #3]
		eve->action_parameter_list[i].length = 0;
    4ce6:	6961      	ldr	r1, [r4, #20]
    4ce8:	4419      	add	r1, r3
    4cea:	708a      	strb	r2, [r1, #2]
    4cec:	3304      	adds	r3, #4
	for (uint32_t i=0; i<GRID_UI_ACTION_PARAMETER_COUNT; i++){
    4cee:	2b28      	cmp	r3, #40	; 0x28
    4cf0:	d1f1      	bne.n	4cd6 <grid_ui_event_init+0x32>
	}	
			
}
    4cf2:	bd38      	pop	{r3, r4, r5, pc}
    4cf4:	0000d0c1 	.word	0x0000d0c1

00004cf8 <grid_ui_element_init>:




void grid_ui_element_init(struct grid_ui_element* ele, enum grid_ui_element_t element_type){
    4cf8:	b570      	push	{r4, r5, r6, lr}
    4cfa:	4604      	mov	r4, r0
    4cfc:	460d      	mov	r5, r1

	ele->status = GRID_UI_STATUS_INITIALIZED;
    4cfe:	2301      	movs	r3, #1
    4d00:	7003      	strb	r3, [r0, #0]
	
	ele->type = element_type;
    4d02:	7061      	strb	r1, [r4, #1]
	
	
	ele->template_parameter_list = malloc(GRID_TEMPLATE_PARAMETER_LIST_LENGTH*sizeof(uint32_t));
    4d04:	2020      	movs	r0, #32
    4d06:	4b2b      	ldr	r3, [pc, #172]	; (4db4 <grid_ui_element_init+0xbc>)
    4d08:	4798      	blx	r3
    4d0a:	6060      	str	r0, [r4, #4]
    4d0c:	2300      	movs	r3, #0
	
	// initialize all of the template parameter values
	for(uint8_t i=0; i<GRID_TEMPLATE_PARAMETER_LIST_LENGTH; i++){
		ele->template_parameter_list[i] = 0;
    4d0e:	4619      	mov	r1, r3
    4d10:	6862      	ldr	r2, [r4, #4]
    4d12:	50d1      	str	r1, [r2, r3]
    4d14:	3304      	adds	r3, #4
	for(uint8_t i=0; i<GRID_TEMPLATE_PARAMETER_LIST_LENGTH; i++){
    4d16:	2b20      	cmp	r3, #32
    4d18:	d1fa      	bne.n	4d10 <grid_ui_element_init+0x18>
	}
	
	
	if (element_type == GRID_UI_ELEMENT_SYSTEM){
    4d1a:	b135      	cbz	r5, 4d2a <grid_ui_element_init+0x32>
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));	
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_HEARTBEAT); // Heartbeat
		
	}
	else if (element_type == GRID_UI_ELEMENT_POTENTIOMETER){
    4d1c:	2d01      	cmp	r5, #1
    4d1e:	d012      	beq.n	4d46 <grid_ui_element_init+0x4e>
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
		
					
	}
	else if (element_type == GRID_UI_ELEMENT_BUTTON){
    4d20:	2d02      	cmp	r5, #2
    4d22:	d01e      	beq.n	4d62 <grid_ui_element_init+0x6a>
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_DP);	// Press
		grid_ui_event_init(&ele->event_list[2], GRID_UI_EVENT_DR);	// Release
		
	}
	else if (element_type == GRID_UI_ELEMENT_ENCODER){
    4d24:	2d03      	cmp	r5, #3
    4d26:	d02e      	beq.n	4d86 <grid_ui_element_init+0x8e>
    4d28:	bd70      	pop	{r4, r5, r6, pc}
		ele->event_list_length = 2;
    4d2a:	2302      	movs	r3, #2
    4d2c:	7223      	strb	r3, [r4, #8]
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));	
    4d2e:	2030      	movs	r0, #48	; 0x30
    4d30:	4b20      	ldr	r3, [pc, #128]	; (4db4 <grid_ui_element_init+0xbc>)
    4d32:	4798      	blx	r3
    4d34:	60e0      	str	r0, [r4, #12]
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
    4d36:	2100      	movs	r1, #0
    4d38:	4d1f      	ldr	r5, [pc, #124]	; (4db8 <grid_ui_element_init+0xc0>)
    4d3a:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_HEARTBEAT); // Heartbeat
    4d3c:	68e0      	ldr	r0, [r4, #12]
    4d3e:	2101      	movs	r1, #1
    4d40:	3018      	adds	r0, #24
    4d42:	47a8      	blx	r5
    4d44:	bd70      	pop	{r4, r5, r6, pc}
		ele->event_list_length = 2;
    4d46:	2602      	movs	r6, #2
    4d48:	7226      	strb	r6, [r4, #8]
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    4d4a:	2030      	movs	r0, #48	; 0x30
    4d4c:	4b19      	ldr	r3, [pc, #100]	; (4db4 <grid_ui_element_init+0xbc>)
    4d4e:	4798      	blx	r3
    4d50:	60e0      	str	r0, [r4, #12]
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
    4d52:	2100      	movs	r1, #0
    4d54:	4d18      	ldr	r5, [pc, #96]	; (4db8 <grid_ui_element_init+0xc0>)
    4d56:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
    4d58:	68e0      	ldr	r0, [r4, #12]
    4d5a:	4631      	mov	r1, r6
    4d5c:	3018      	adds	r0, #24
    4d5e:	47a8      	blx	r5
    4d60:	bd70      	pop	{r4, r5, r6, pc}
		ele->event_list_length = 3;
    4d62:	2303      	movs	r3, #3
    4d64:	7223      	strb	r3, [r4, #8]
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    4d66:	2048      	movs	r0, #72	; 0x48
    4d68:	4b12      	ldr	r3, [pc, #72]	; (4db4 <grid_ui_element_init+0xbc>)
    4d6a:	4798      	blx	r3
    4d6c:	60e0      	str	r0, [r4, #12]
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
    4d6e:	2100      	movs	r1, #0
    4d70:	4d11      	ldr	r5, [pc, #68]	; (4db8 <grid_ui_element_init+0xc0>)
    4d72:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_DP);	// Press
    4d74:	68e0      	ldr	r0, [r4, #12]
    4d76:	2105      	movs	r1, #5
    4d78:	3018      	adds	r0, #24
    4d7a:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[2], GRID_UI_EVENT_DR);	// Release
    4d7c:	68e0      	ldr	r0, [r4, #12]
    4d7e:	2106      	movs	r1, #6
    4d80:	3030      	adds	r0, #48	; 0x30
    4d82:	47a8      	blx	r5
    4d84:	bd70      	pop	{r4, r5, r6, pc}
		
		ele->event_list_length = 4;
    4d86:	2304      	movs	r3, #4
    4d88:	7223      	strb	r3, [r4, #8]
		
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    4d8a:	2060      	movs	r0, #96	; 0x60
    4d8c:	4b09      	ldr	r3, [pc, #36]	; (4db4 <grid_ui_element_init+0xbc>)
    4d8e:	4798      	blx	r3
    4d90:	60e0      	str	r0, [r4, #12]
		
		grid_ui_event_init(&ele->event_list[0], GRID_UI_EVENT_INIT); // Element Initialization Event
    4d92:	2100      	movs	r1, #0
    4d94:	4d08      	ldr	r5, [pc, #32]	; (4db8 <grid_ui_element_init+0xc0>)
    4d96:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[1], GRID_UI_EVENT_DP);	// Press
    4d98:	68e0      	ldr	r0, [r4, #12]
    4d9a:	2105      	movs	r1, #5
    4d9c:	3018      	adds	r0, #24
    4d9e:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[2], GRID_UI_EVENT_DR);	// Release
    4da0:	68e0      	ldr	r0, [r4, #12]
    4da2:	2106      	movs	r1, #6
    4da4:	3030      	adds	r0, #48	; 0x30
    4da6:	47a8      	blx	r5
		grid_ui_event_init(&ele->event_list[3], GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
    4da8:	68e0      	ldr	r0, [r4, #12]
    4daa:	2102      	movs	r1, #2
    4dac:	3048      	adds	r0, #72	; 0x48
    4dae:	47a8      	blx	r5
	}
	else{
		//UNKNOWN ELEMENT TYPE
	}	
		
}
    4db0:	e7ba      	b.n	4d28 <grid_ui_element_init+0x30>
    4db2:	bf00      	nop
    4db4:	0000d0c1 	.word	0x0000d0c1
    4db8:	00004ca5 	.word	0x00004ca5

00004dbc <grid_ui_event_register_action>:

void grid_ui_event_register_action(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* event_string, uint32_t event_string_length, struct grid_ui_action_parameter* parameter_list, uint8_t parameter_list_length){
    4dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4dc0:	9f07      	ldr	r7, [sp, #28]
    4dc2:	f89d e020 	ldrb.w	lr, [sp, #32]
	
	uint8_t event_index = 255;
	
	for(uint8_t i=0; i<ele->event_list_length; i++){
    4dc6:	f890 9008 	ldrb.w	r9, [r0, #8]
    4dca:	f1b9 0f00 	cmp.w	r9, #0
    4dce:	d03d      	beq.n	4e4c <grid_ui_event_register_action+0x90>
    4dd0:	68c5      	ldr	r5, [r0, #12]
		if (ele->event_list[i].type == event_type){	
    4dd2:	2400      	movs	r4, #0
    4dd4:	26ff      	movs	r6, #255	; 0xff
    4dd6:	fa5f fc84 	uxtb.w	ip, r4
    4dda:	f895 8002 	ldrb.w	r8, [r5, #2]
    4dde:	4588      	cmp	r8, r1
    4de0:	bf08      	it	eq
    4de2:	4666      	moveq	r6, ip
    4de4:	3401      	adds	r4, #1
    4de6:	3518      	adds	r5, #24
	for(uint8_t i=0; i<ele->event_list_length; i++){
    4de8:	fa5f fc84 	uxtb.w	ip, r4
    4dec:	45e1      	cmp	r9, ip
    4dee:	d8f2      	bhi.n	4dd6 <grid_ui_event_register_action+0x1a>
			event_index = i;
		}
	}
	
	if (event_index == 255){
    4df0:	2eff      	cmp	r6, #255	; 0xff
    4df2:	d02b      	beq.n	4e4c <grid_ui_event_register_action+0x90>
		return; // EVENT NOT FOUND	
	}
	
	// COPY THE ACTION STRING
	for(uint32_t i=0; i<event_string_length; i++){
    4df4:	b173      	cbz	r3, 4e14 <grid_ui_event_register_action+0x58>
		ele->event_list[event_index].action_string[i] = event_string[i];
    4df6:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
    4dfa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    4dfe:	3a01      	subs	r2, #1
    4e00:	2100      	movs	r1, #0
    4e02:	f812 5f01 	ldrb.w	r5, [r2, #1]!
    4e06:	68c4      	ldr	r4, [r0, #12]
    4e08:	4464      	add	r4, ip
    4e0a:	68e4      	ldr	r4, [r4, #12]
    4e0c:	5465      	strb	r5, [r4, r1]
	for(uint32_t i=0; i<event_string_length; i++){
    4e0e:	3101      	adds	r1, #1
    4e10:	428b      	cmp	r3, r1
    4e12:	d1f6      	bne.n	4e02 <grid_ui_event_register_action+0x46>
	}
	ele->event_list[event_index].action_length = event_string_length;
    4e14:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    4e18:	00f6      	lsls	r6, r6, #3
    4e1a:	4635      	mov	r5, r6
    4e1c:	68c2      	ldr	r2, [r0, #12]
    4e1e:	4432      	add	r2, r6
    4e20:	6053      	str	r3, [r2, #4]
	
	

	// COPY THE PARAMETER DESCRIPTORS
	for(uint8_t i=0; i<parameter_list_length; i++){
    4e22:	f1be 0f00 	cmp.w	lr, #0
    4e26:	d00d      	beq.n	4e44 <grid_ui_event_register_action+0x88>
    4e28:	f10e 34ff 	add.w	r4, lr, #4294967295
    4e2c:	b2e4      	uxtb	r4, r4
    4e2e:	3401      	adds	r4, #1
    4e30:	00a4      	lsls	r4, r4, #2
    4e32:	2300      	movs	r3, #0
		
		ele->event_list[event_index].action_parameter_list[i] = parameter_list[i];	
    4e34:	68c2      	ldr	r2, [r0, #12]
    4e36:	442a      	add	r2, r5
    4e38:	6952      	ldr	r2, [r2, #20]
    4e3a:	58f9      	ldr	r1, [r7, r3]
    4e3c:	50d1      	str	r1, [r2, r3]
    4e3e:	3304      	adds	r3, #4
	for(uint8_t i=0; i<parameter_list_length; i++){
    4e40:	429c      	cmp	r4, r3
    4e42:	d1f7      	bne.n	4e34 <grid_ui_event_register_action+0x78>
	}
	ele->event_list[event_index].action_parameter_count = parameter_list_length;
    4e44:	68c3      	ldr	r3, [r0, #12]
    4e46:	441e      	add	r6, r3
    4e48:	f886 e010 	strb.w	lr, [r6, #16]
    4e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00004e50 <grid_ui_event_find>:
		
	
}


uint8_t grid_ui_event_find(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    4e50:	b470      	push	{r4, r5, r6}

	uint8_t event_index = 255;
		
	for(uint8_t i=0; i<ele->event_list_length; i++){
    4e52:	7a06      	ldrb	r6, [r0, #8]
    4e54:	b176      	cbz	r6, 4e74 <grid_ui_event_find+0x24>
    4e56:	68c2      	ldr	r2, [r0, #12]
		if (ele->event_list[i].type == event_type){
    4e58:	2300      	movs	r3, #0
    4e5a:	20ff      	movs	r0, #255	; 0xff
    4e5c:	b2dc      	uxtb	r4, r3
    4e5e:	7895      	ldrb	r5, [r2, #2]
    4e60:	428d      	cmp	r5, r1
    4e62:	bf08      	it	eq
    4e64:	4620      	moveq	r0, r4
    4e66:	3301      	adds	r3, #1
    4e68:	3218      	adds	r2, #24
	for(uint8_t i=0; i<ele->event_list_length; i++){
    4e6a:	b2dc      	uxtb	r4, r3
    4e6c:	42a6      	cmp	r6, r4
    4e6e:	d8f5      	bhi.n	4e5c <grid_ui_event_find+0xc>
		}
	}
		
	return event_index;
	
}
    4e70:	bc70      	pop	{r4, r5, r6}
    4e72:	4770      	bx	lr
	uint8_t event_index = 255;
    4e74:	20ff      	movs	r0, #255	; 0xff
    4e76:	e7fb      	b.n	4e70 <grid_ui_event_find+0x20>

00004e78 <grid_ui_event_trigger>:

void grid_ui_event_trigger(struct grid_ui_event* eve){
		
	if (eve->action_status == GRID_UI_STATUS_UNDEFINED){
    4e78:	7a03      	ldrb	r3, [r0, #8]
    4e7a:	b10b      	cbz	r3, 4e80 <grid_ui_event_trigger+0x8>
		return;
	}	
		
	eve->trigger = GRID_UI_EVENT_STATUS_TRIGGERED;
    4e7c:	2302      	movs	r3, #2
    4e7e:	7043      	strb	r3, [r0, #1]
    4e80:	4770      	bx	lr

00004e82 <grid_ui_event_render_action>:
		return 0;
	}
			
}

uint8_t grid_ui_event_render_action(struct grid_ui_event* eve, uint8_t* target_string){
    4e82:	b410      	push	{r4}
	
	for(uint8_t i=0; i<eve->action_length; i++){
    4e84:	6844      	ldr	r4, [r0, #4]
    4e86:	b154      	cbz	r4, 4e9e <grid_ui_event_render_action+0x1c>
    4e88:	2200      	movs	r2, #0
    4e8a:	4613      	mov	r3, r2
		target_string[i] = eve->action_string[i];
    4e8c:	68c4      	ldr	r4, [r0, #12]
    4e8e:	5ca4      	ldrb	r4, [r4, r2]
    4e90:	548c      	strb	r4, [r1, r2]
	for(uint8_t i=0; i<eve->action_length; i++){
    4e92:	3301      	adds	r3, #1
    4e94:	b2db      	uxtb	r3, r3
    4e96:	461a      	mov	r2, r3
    4e98:	6844      	ldr	r4, [r0, #4]
    4e9a:	42a3      	cmp	r3, r4
    4e9c:	d3f6      	bcc.n	4e8c <grid_ui_event_render_action+0xa>
	}
	
	return eve->action_length;
		
}
    4e9e:	b2e0      	uxtb	r0, r4
    4ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
    4ea4:	4770      	bx	lr
	...

00004ea8 <grid_ui_event_template_action>:

uint8_t grid_ui_event_template_action(struct grid_ui_element* ele, uint8_t event_index){
	
	if (event_index == 255){
    4ea8:	29ff      	cmp	r1, #255	; 0xff
    4eaa:	d029      	beq.n	4f00 <grid_ui_event_template_action+0x58>
uint8_t grid_ui_event_template_action(struct grid_ui_element* ele, uint8_t event_index){
    4eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4eb0:	b085      	sub	sp, #20
		return;
	}
	
	for (uint8_t i=0; i<ele->event_list[event_index].action_parameter_count; i++){
    4eb2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4eb6:	00c9      	lsls	r1, r1, #3
    4eb8:	460e      	mov	r6, r1
    4eba:	68c3      	ldr	r3, [r0, #12]
    4ebc:	440b      	add	r3, r1
    4ebe:	7c1a      	ldrb	r2, [r3, #16]
    4ec0:	b1da      	cbz	r2, 4efa <grid_ui_event_template_action+0x52>
    4ec2:	4605      	mov	r5, r0
    4ec4:	2400      	movs	r4, #0
		
		uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
		uint8_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
		uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
		
		uint8_t error = 0;
    4ec6:	46a1      	mov	r9, r4
		grid_msg_set_parameter(message, parameter_offset, parameter_length, parameter_value, &error);
    4ec8:	f10d 080f 	add.w	r8, sp, #15
    4ecc:	4f0d      	ldr	r7, [pc, #52]	; (4f04 <grid_ui_event_template_action+0x5c>)
		uint8_t* message = ele->event_list[event_index].action_string;
    4ece:	68d8      	ldr	r0, [r3, #12]
		uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    4ed0:	695a      	ldr	r2, [r3, #20]
    4ed2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    4ed6:	7851      	ldrb	r1, [r2, #1]
    4ed8:	686b      	ldr	r3, [r5, #4]
    4eda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		uint8_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    4ede:	78d1      	ldrb	r1, [r2, #3]
		uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    4ee0:	7892      	ldrb	r2, [r2, #2]
		uint8_t error = 0;
    4ee2:	f88d 900f 	strb.w	r9, [sp, #15]
		grid_msg_set_parameter(message, parameter_offset, parameter_length, parameter_value, &error);
    4ee6:	f8cd 8000 	str.w	r8, [sp]
    4eea:	47b8      	blx	r7
	for (uint8_t i=0; i<ele->event_list[event_index].action_parameter_count; i++){
    4eec:	3401      	adds	r4, #1
    4eee:	b2e4      	uxtb	r4, r4
    4ef0:	68eb      	ldr	r3, [r5, #12]
    4ef2:	4433      	add	r3, r6
    4ef4:	7c1a      	ldrb	r2, [r3, #16]
    4ef6:	42a2      	cmp	r2, r4
    4ef8:	d8e9      	bhi.n	4ece <grid_ui_event_template_action+0x26>
	
	
	
	
	
}
    4efa:	b005      	add	sp, #20
    4efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4f00:	4770      	bx	lr
    4f02:	bf00      	nop
    4f04:	00004bf9 	.word	0x00004bf9

00004f08 <grid_report_init>:



uint8_t grid_report_init(struct grid_report_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    4f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f0c:	4605      	mov	r5, r0
    4f0e:	4698      	mov	r8, r3
    4f10:	9808      	ldr	r0, [sp, #32]
    4f12:	9e09      	ldr	r6, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    4f14:	010c      	lsls	r4, r1, #4
    4f16:	686b      	ldr	r3, [r5, #4]
    4f18:	2100      	movs	r1, #0
    4f1a:	5519      	strb	r1, [r3, r4]
	mod->report_array[index].type = type;
    4f1c:	686b      	ldr	r3, [r5, #4]
    4f1e:	4423      	add	r3, r4
    4f20:	705a      	strb	r2, [r3, #1]
	
	mod->report_array[index].payload_length = p_len;
    4f22:	686b      	ldr	r3, [r5, #4]
    4f24:	4423      	add	r3, r4
    4f26:	7098      	strb	r0, [r3, #2]
	mod->report_array[index].helper_length = h_len;
    4f28:	686b      	ldr	r3, [r5, #4]
    4f2a:	4423      	add	r3, r4
    4f2c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    4f30:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    4f32:	686b      	ldr	r3, [r5, #4]
    4f34:	eb03 0904 	add.w	r9, r3, r4
    4f38:	4f1b      	ldr	r7, [pc, #108]	; (4fa8 <grid_report_init+0xa0>)
    4f3a:	47b8      	blx	r7
    4f3c:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    4f40:	686b      	ldr	r3, [r5, #4]
    4f42:	eb03 0904 	add.w	r9, r3, r4
    4f46:	980a      	ldr	r0, [sp, #40]	; 0x28
    4f48:	47b8      	blx	r7
    4f4a:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    4f4e:	686a      	ldr	r2, [r5, #4]
    4f50:	4422      	add	r2, r4
    4f52:	6853      	ldr	r3, [r2, #4]
    4f54:	b30b      	cbz	r3, 4f9a <grid_report_init+0x92>
    4f56:	68d3      	ldr	r3, [r2, #12]
    4f58:	b313      	cbz	r3, 4fa0 <grid_report_init+0x98>
		return -1;
	}
	else{
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    4f5a:	7893      	ldrb	r3, [r2, #2]
    4f5c:	b15b      	cbz	r3, 4f76 <grid_report_init+0x6e>
    4f5e:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    4f60:	f818 1003 	ldrb.w	r1, [r8, r3]
    4f64:	6852      	ldr	r2, [r2, #4]
    4f66:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    4f68:	3301      	adds	r3, #1
    4f6a:	b2db      	uxtb	r3, r3
    4f6c:	686a      	ldr	r2, [r5, #4]
    4f6e:	4422      	add	r2, r4
    4f70:	7891      	ldrb	r1, [r2, #2]
    4f72:	4299      	cmp	r1, r3
    4f74:	d8f4      	bhi.n	4f60 <grid_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    4f76:	686a      	ldr	r2, [r5, #4]
    4f78:	4422      	add	r2, r4
    4f7a:	7a10      	ldrb	r0, [r2, #8]
    4f7c:	b188      	cbz	r0, 4fa2 <grid_report_init+0x9a>
    4f7e:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    4f80:	5cf1      	ldrb	r1, [r6, r3]
    4f82:	68d2      	ldr	r2, [r2, #12]
    4f84:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    4f86:	3301      	adds	r3, #1
    4f88:	b2db      	uxtb	r3, r3
    4f8a:	686a      	ldr	r2, [r5, #4]
    4f8c:	4422      	add	r2, r4
    4f8e:	7a11      	ldrb	r1, [r2, #8]
    4f90:	4299      	cmp	r1, r3
    4f92:	d8f5      	bhi.n	4f80 <grid_report_init+0x78>
	}
	
	return 0;
    4f94:	2000      	movs	r0, #0
    4f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    4f9a:	20ff      	movs	r0, #255	; 0xff
    4f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4fa0:	20ff      	movs	r0, #255	; 0xff
	
}
    4fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4fa6:	bf00      	nop
    4fa8:	0000d0c1 	.word	0x0000d0c1

00004fac <grid_report_sys_init>:
	grid_report_init(mod, index+mod->report_offset, type, p, p_len, h, h_len);
}

uint8_t grid_report_sys_init(struct grid_report_model* mod){
		
	for(uint8_t i=0; i<mod->report_offset; i++){
    4fac:	8843      	ldrh	r3, [r0, #2]
    4fae:	2b00      	cmp	r3, #0
    4fb0:	f000 8109 	beq.w	51c6 <grid_report_sys_init+0x21a>
uint8_t grid_report_sys_init(struct grid_report_model* mod){
    4fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4fb8:	b0ba      	sub	sp, #232	; 0xe8
    4fba:	4606      	mov	r6, r0
	for(uint8_t i=0; i<mod->report_offset; i++){
    4fbc:	2400      	movs	r4, #0
			
		uint8_t payload_template[200] = {0};
    4fbe:	4625      	mov	r5, r4
    4fc0:	f8df 8224 	ldr.w	r8, [pc, #548]	; 51e8 <grid_report_sys_init+0x23c>
    4fc4:	e077      	b.n	50b6 <grid_report_sys_init+0x10a>
		if (i == GRID_REPORT_INDEX_MAPMODE){ // MAPMODE: BANKACTIVE REP
			
			type = GRID_REPORT_TYPE_BROADCAST;


			sprintf(payload_template, GRID_CLASS_BANKACTIVE_frame);
    4fc6:	2303      	movs	r3, #3
    4fc8:	9300      	str	r3, [sp, #0]
    4fca:	2330      	movs	r3, #48	; 0x30
    4fcc:	2202      	movs	r2, #2
    4fce:	497e      	ldr	r1, [pc, #504]	; (51c8 <grid_report_sys_init+0x21c>)
    4fd0:	a808      	add	r0, sp, #32
    4fd2:	4f7e      	ldr	r7, [pc, #504]	; (51cc <grid_report_sys_init+0x220>)
    4fd4:	47b8      	blx	r7
			
			uint8_t error = 0;	
    4fd6:	af3a      	add	r7, sp, #232	; 0xe8
    4fd8:	f807 5dcc 	strb.w	r5, [r7, #-204]!
					
			grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REP_code, &error);			
    4fdc:	9700      	str	r7, [sp, #0]
    4fde:	230f      	movs	r3, #15
    4fe0:	2201      	movs	r2, #1
    4fe2:	2104      	movs	r1, #4
    4fe4:	a808      	add	r0, sp, #32
    4fe6:	f8df 9204 	ldr.w	r9, [pc, #516]	; 51ec <grid_report_sys_init+0x240>
    4fea:	47c8      	blx	r9
			grid_msg_set_parameter(payload_template, GRID_CLASS_BANKACTIVE_BANKNUMBER_offset, GRID_CLASS_BANKACTIVE_BANKNUMBER_length, 0, &error);
    4fec:	9700      	str	r7, [sp, #0]
    4fee:	462b      	mov	r3, r5
    4ff0:	2202      	movs	r2, #2
    4ff2:	2105      	movs	r1, #5
    4ff4:	a808      	add	r0, sp, #32
    4ff6:	47c8      	blx	r9
				
			payload_length = strlen(payload_template);
    4ff8:	a808      	add	r0, sp, #32
    4ffa:	4b75      	ldr	r3, [pc, #468]	; (51d0 <grid_report_sys_init+0x224>)
    4ffc:	4798      	blx	r3
    4ffe:	b2c0      	uxtb	r0, r0
			type = GRID_REPORT_TYPE_BROADCAST;
    5000:	2202      	movs	r2, #2
    5002:	e041      	b.n	5088 <grid_report_sys_init+0xdc>
		}
		else if (i == GRID_REPORT_INDEX_CFG_REQUEST){ // CONFIGURATION REQUEST:  BANKACTIVE REQ
			
			type = GRID_REPORT_TYPE_BROADCAST;

			sprintf(payload_template, GRID_CLASS_BANKACTIVE_frame);
    5004:	2303      	movs	r3, #3
    5006:	9300      	str	r3, [sp, #0]
    5008:	2330      	movs	r3, #48	; 0x30
    500a:	2202      	movs	r2, #2
    500c:	496e      	ldr	r1, [pc, #440]	; (51c8 <grid_report_sys_init+0x21c>)
    500e:	a808      	add	r0, sp, #32
    5010:	4f6e      	ldr	r7, [pc, #440]	; (51cc <grid_report_sys_init+0x220>)
    5012:	47b8      	blx	r7
			
			uint8_t error = 0;
    5014:	af3a      	add	r7, sp, #232	; 0xe8
    5016:	f807 5dcc 	strb.w	r5, [r7, #-204]!
			
			grid_msg_set_parameter(payload_template, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REQ_code, &error);
    501a:	9700      	str	r7, [sp, #0]
    501c:	230e      	movs	r3, #14
    501e:	2201      	movs	r2, #1
    5020:	2104      	movs	r1, #4
    5022:	a808      	add	r0, sp, #32
    5024:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 51ec <grid_report_sys_init+0x240>
    5028:	47c8      	blx	r9
			grid_msg_set_parameter(payload_template, GRID_CLASS_BANKACTIVE_BANKNUMBER_offset, GRID_CLASS_BANKACTIVE_BANKNUMBER_length, 0, &error);
    502a:	9700      	str	r7, [sp, #0]
    502c:	462b      	mov	r3, r5
    502e:	2202      	movs	r2, #2
    5030:	2105      	movs	r1, #5
    5032:	a808      	add	r0, sp, #32
    5034:	47c8      	blx	r9
			
			payload_length = strlen(payload_template);
    5036:	a808      	add	r0, sp, #32
    5038:	4b65      	ldr	r3, [pc, #404]	; (51d0 <grid_report_sys_init+0x224>)
    503a:	4798      	blx	r3
    503c:	b2c0      	uxtb	r0, r0
			type = GRID_REPORT_TYPE_BROADCAST;
    503e:	2202      	movs	r2, #2
    5040:	e022      	b.n	5088 <grid_report_sys_init+0xdc>
		
			uint8_t direction = GRID_CONST_NORTH;
			
			type = GRID_REPORT_TYPE_DIRECT_NORTH;
			
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_CONST_SOH, GRID_CONST_DCT, GRID_CONST_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_CONST_EOT);
    5042:	4b64      	ldr	r3, [pc, #400]	; (51d4 <grid_report_sys_init+0x228>)
    5044:	4798      	blx	r3
    5046:	2304      	movs	r3, #4
    5048:	9305      	str	r3, [sp, #20]
    504a:	23ff      	movs	r3, #255	; 0xff
    504c:	9304      	str	r3, [sp, #16]
    504e:	9303      	str	r3, [sp, #12]
    5050:	9002      	str	r0, [sp, #8]
    5052:	2311      	movs	r3, #17
    5054:	9301      	str	r3, [sp, #4]
    5056:	2307      	movs	r3, #7
    5058:	9300      	str	r3, [sp, #0]
    505a:	230e      	movs	r3, #14
    505c:	2201      	movs	r2, #1
    505e:	495e      	ldr	r1, [pc, #376]	; (51d8 <grid_report_sys_init+0x22c>)
    5060:	a808      	add	r0, sp, #32
    5062:	4f5a      	ldr	r7, [pc, #360]	; (51cc <grid_report_sys_init+0x220>)
    5064:	47b8      	blx	r7
			
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    5066:	a808      	add	r0, sp, #32
    5068:	4f59      	ldr	r7, [pc, #356]	; (51d0 <grid_report_sys_init+0x224>)
    506a:	47b8      	blx	r7
    506c:	4681      	mov	r9, r0
    506e:	4601      	mov	r1, r0
    5070:	a808      	add	r0, sp, #32
    5072:	4b5a      	ldr	r3, [pc, #360]	; (51dc <grid_report_sys_init+0x230>)
    5074:	4798      	blx	r3
    5076:	4602      	mov	r2, r0
    5078:	4649      	mov	r1, r9
    507a:	a808      	add	r0, sp, #32
    507c:	4b58      	ldr	r3, [pc, #352]	; (51e0 <grid_report_sys_init+0x234>)
    507e:	4798      	blx	r3
			
			payload_length = strlen(payload_template);		
    5080:	a808      	add	r0, sp, #32
    5082:	47b8      	blx	r7
    5084:	b2c0      	uxtb	r0, r0
			type = GRID_REPORT_TYPE_DIRECT_NORTH;
    5086:	2203      	movs	r2, #3
		
		

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    5088:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    508c:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;
		
	
		
		uint8_t error = grid_report_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    5090:	2302      	movs	r3, #2
    5092:	9302      	str	r3, [sp, #8]
    5094:	ab07      	add	r3, sp, #28
    5096:	9301      	str	r3, [sp, #4]
    5098:	9000      	str	r0, [sp, #0]
    509a:	ab08      	add	r3, sp, #32
    509c:	4621      	mov	r1, r4
    509e:	4630      	mov	r0, r6
    50a0:	4f50      	ldr	r7, [pc, #320]	; (51e4 <grid_report_sys_init+0x238>)
    50a2:	47b8      	blx	r7
		
		if (error != 0){
    50a4:	2800      	cmp	r0, #0
    50a6:	f040 808b 	bne.w	51c0 <grid_report_sys_init+0x214>
	for(uint8_t i=0; i<mod->report_offset; i++){
    50aa:	3401      	adds	r4, #1
    50ac:	b2e4      	uxtb	r4, r4
    50ae:	8873      	ldrh	r3, [r6, #2]
    50b0:	42a3      	cmp	r3, r4
    50b2:	f240 8085 	bls.w	51c0 <grid_report_sys_init+0x214>
		uint8_t payload_template[200] = {0};
    50b6:	22c8      	movs	r2, #200	; 0xc8
    50b8:	4629      	mov	r1, r5
    50ba:	a808      	add	r0, sp, #32
    50bc:	47c0      	blx	r8
		uint8_t payload_length = strlen(payload_template);
    50be:	a808      	add	r0, sp, #32
    50c0:	4b43      	ldr	r3, [pc, #268]	; (51d0 <grid_report_sys_init+0x224>)
    50c2:	4798      	blx	r3
		if (i == GRID_REPORT_INDEX_MAPMODE){ // MAPMODE: BANKACTIVE REP
    50c4:	2c04      	cmp	r4, #4
    50c6:	f43f af7e 	beq.w	4fc6 <grid_report_sys_init+0x1a>
		else if (i == GRID_REPORT_INDEX_CFG_REQUEST){ // CONFIGURATION REQUEST:  BANKACTIVE REQ
    50ca:	2c05      	cmp	r4, #5
    50cc:	d09a      	beq.n	5004 <grid_report_sys_init+0x58>
		else if (i == GRID_REPORT_INDEX_PING_NORTH){ // PING NORTH
    50ce:	2c00      	cmp	r4, #0
    50d0:	d0b7      	beq.n	5042 <grid_report_sys_init+0x96>
		else if (i == GRID_REPORT_INDEX_PING_EAST){ // PING EAST 
    50d2:	2c01      	cmp	r4, #1
    50d4:	d006      	beq.n	50e4 <grid_report_sys_init+0x138>
		else if (i == GRID_REPORT_INDEX_PING_SOUTH){ // PING SOUTH
    50d6:	2c02      	cmp	r4, #2
    50d8:	d02a      	beq.n	5130 <grid_report_sys_init+0x184>
		else if (i == GRID_REPORT_INDEX_PING_WEST){ // PING WEST
    50da:	2c03      	cmp	r4, #3
    50dc:	d04c      	beq.n	5178 <grid_report_sys_init+0x1cc>
		uint8_t payload_length = strlen(payload_template);
    50de:	b2c0      	uxtb	r0, r0
		enum grid_report_type_t type = GRID_REPORT_TYPE_UNDEFINED;	
    50e0:	462a      	mov	r2, r5
    50e2:	e7d1      	b.n	5088 <grid_report_sys_init+0xdc>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_CONST_SOH, GRID_CONST_DCT, GRID_CONST_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_CONST_EOT);
    50e4:	4b3b      	ldr	r3, [pc, #236]	; (51d4 <grid_report_sys_init+0x228>)
    50e6:	4798      	blx	r3
    50e8:	2704      	movs	r7, #4
    50ea:	9705      	str	r7, [sp, #20]
    50ec:	23ff      	movs	r3, #255	; 0xff
    50ee:	9304      	str	r3, [sp, #16]
    50f0:	9303      	str	r3, [sp, #12]
    50f2:	9002      	str	r0, [sp, #8]
    50f4:	2312      	movs	r3, #18
    50f6:	9301      	str	r3, [sp, #4]
    50f8:	2307      	movs	r3, #7
    50fa:	9300      	str	r3, [sp, #0]
    50fc:	230e      	movs	r3, #14
    50fe:	2201      	movs	r2, #1
    5100:	4935      	ldr	r1, [pc, #212]	; (51d8 <grid_report_sys_init+0x22c>)
    5102:	a808      	add	r0, sp, #32
    5104:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 51cc <grid_report_sys_init+0x220>
    5108:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    510a:	a808      	add	r0, sp, #32
    510c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 51d0 <grid_report_sys_init+0x224>
    5110:	47c8      	blx	r9
    5112:	4682      	mov	sl, r0
    5114:	4601      	mov	r1, r0
    5116:	a808      	add	r0, sp, #32
    5118:	4b30      	ldr	r3, [pc, #192]	; (51dc <grid_report_sys_init+0x230>)
    511a:	4798      	blx	r3
    511c:	4602      	mov	r2, r0
    511e:	4651      	mov	r1, sl
    5120:	a808      	add	r0, sp, #32
    5122:	4b2f      	ldr	r3, [pc, #188]	; (51e0 <grid_report_sys_init+0x234>)
    5124:	4798      	blx	r3
			payload_length = strlen(payload_template);			
    5126:	a808      	add	r0, sp, #32
    5128:	47c8      	blx	r9
    512a:	b2c0      	uxtb	r0, r0
			type = GRID_REPORT_TYPE_DIRECT_EAST;
    512c:	463a      	mov	r2, r7
    512e:	e7ab      	b.n	5088 <grid_report_sys_init+0xdc>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_CONST_SOH, GRID_CONST_DCT, GRID_CONST_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_CONST_EOT);
    5130:	4b28      	ldr	r3, [pc, #160]	; (51d4 <grid_report_sys_init+0x228>)
    5132:	4798      	blx	r3
    5134:	2304      	movs	r3, #4
    5136:	9305      	str	r3, [sp, #20]
    5138:	23ff      	movs	r3, #255	; 0xff
    513a:	9304      	str	r3, [sp, #16]
    513c:	9303      	str	r3, [sp, #12]
    513e:	9002      	str	r0, [sp, #8]
    5140:	2313      	movs	r3, #19
    5142:	9301      	str	r3, [sp, #4]
    5144:	2307      	movs	r3, #7
    5146:	9300      	str	r3, [sp, #0]
    5148:	230e      	movs	r3, #14
    514a:	2201      	movs	r2, #1
    514c:	4922      	ldr	r1, [pc, #136]	; (51d8 <grid_report_sys_init+0x22c>)
    514e:	a808      	add	r0, sp, #32
    5150:	4f1e      	ldr	r7, [pc, #120]	; (51cc <grid_report_sys_init+0x220>)
    5152:	47b8      	blx	r7
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    5154:	a808      	add	r0, sp, #32
    5156:	4f1e      	ldr	r7, [pc, #120]	; (51d0 <grid_report_sys_init+0x224>)
    5158:	47b8      	blx	r7
    515a:	4681      	mov	r9, r0
    515c:	4601      	mov	r1, r0
    515e:	a808      	add	r0, sp, #32
    5160:	4b1e      	ldr	r3, [pc, #120]	; (51dc <grid_report_sys_init+0x230>)
    5162:	4798      	blx	r3
    5164:	4602      	mov	r2, r0
    5166:	4649      	mov	r1, r9
    5168:	a808      	add	r0, sp, #32
    516a:	4b1d      	ldr	r3, [pc, #116]	; (51e0 <grid_report_sys_init+0x234>)
    516c:	4798      	blx	r3
			payload_length = strlen(payload_template);			
    516e:	a808      	add	r0, sp, #32
    5170:	47b8      	blx	r7
    5172:	b2c0      	uxtb	r0, r0
			type = GRID_REPORT_TYPE_DIRECT_SOUTH;
    5174:	2205      	movs	r2, #5
    5176:	e787      	b.n	5088 <grid_report_sys_init+0xdc>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_CONST_SOH, GRID_CONST_DCT, GRID_CONST_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_CONST_EOT);
    5178:	4b16      	ldr	r3, [pc, #88]	; (51d4 <grid_report_sys_init+0x228>)
    517a:	4798      	blx	r3
    517c:	2304      	movs	r3, #4
    517e:	9305      	str	r3, [sp, #20]
    5180:	23ff      	movs	r3, #255	; 0xff
    5182:	9304      	str	r3, [sp, #16]
    5184:	9303      	str	r3, [sp, #12]
    5186:	9002      	str	r0, [sp, #8]
    5188:	2314      	movs	r3, #20
    518a:	9301      	str	r3, [sp, #4]
    518c:	2307      	movs	r3, #7
    518e:	9300      	str	r3, [sp, #0]
    5190:	230e      	movs	r3, #14
    5192:	2201      	movs	r2, #1
    5194:	4910      	ldr	r1, [pc, #64]	; (51d8 <grid_report_sys_init+0x22c>)
    5196:	a808      	add	r0, sp, #32
    5198:	4f0c      	ldr	r7, [pc, #48]	; (51cc <grid_report_sys_init+0x220>)
    519a:	47b8      	blx	r7
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    519c:	a808      	add	r0, sp, #32
    519e:	4f0c      	ldr	r7, [pc, #48]	; (51d0 <grid_report_sys_init+0x224>)
    51a0:	47b8      	blx	r7
    51a2:	4681      	mov	r9, r0
    51a4:	4601      	mov	r1, r0
    51a6:	a808      	add	r0, sp, #32
    51a8:	4b0c      	ldr	r3, [pc, #48]	; (51dc <grid_report_sys_init+0x230>)
    51aa:	4798      	blx	r3
    51ac:	4602      	mov	r2, r0
    51ae:	4649      	mov	r1, r9
    51b0:	a808      	add	r0, sp, #32
    51b2:	4b0b      	ldr	r3, [pc, #44]	; (51e0 <grid_report_sys_init+0x234>)
    51b4:	4798      	blx	r3
			payload_length = strlen(payload_template);			
    51b6:	a808      	add	r0, sp, #32
    51b8:	47b8      	blx	r7
    51ba:	b2c0      	uxtb	r0, r0
			type = GRID_REPORT_TYPE_DIRECT_WEST;
    51bc:	2206      	movs	r2, #6
    51be:	e763      	b.n	5088 <grid_report_sys_init+0xdc>
			}
			
		}
	
	}
}
    51c0:	b03a      	add	sp, #232	; 0xe8
    51c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51c6:	4770      	bx	lr
    51c8:	0000e988 	.word	0x0000e988
    51cc:	0000d4d5 	.word	0x0000d4d5
    51d0:	0000d51d 	.word	0x0000d51d
    51d4:	000048dd 	.word	0x000048dd
    51d8:	0000e994 	.word	0x0000e994
    51dc:	00004b95 	.word	0x00004b95
    51e0:	00004bd1 	.word	0x00004bd1
    51e4:	00004f09 	.word	0x00004f09
    51e8:	0000d0e7 	.word	0x0000d0e7
    51ec:	00004bf9 	.word	0x00004bf9

000051f0 <grid_report_render>:



uint8_t grid_report_render(struct grid_report_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    51f0:	6843      	ldr	r3, [r0, #4]
    51f2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    51f6:	7888      	ldrb	r0, [r1, #2]
    51f8:	b140      	cbz	r0, 520c <grid_report_render+0x1c>
    51fa:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    51fc:	6848      	ldr	r0, [r1, #4]
    51fe:	5cc0      	ldrb	r0, [r0, r3]
    5200:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    5202:	3301      	adds	r3, #1
    5204:	b2db      	uxtb	r3, r3
    5206:	7888      	ldrb	r0, [r1, #2]
    5208:	4298      	cmp	r0, r3
    520a:	d8f7      	bhi.n	51fc <grid_report_render+0xc>
	}
	
	return rep->payload_length;
}
    520c:	4770      	bx	lr

0000520e <grid_report_sys_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_report_sys_set_changed_flag(struct grid_report_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    520e:	6843      	ldr	r3, [r0, #4]
    5210:	0109      	lsls	r1, r1, #4
    5212:	2201      	movs	r2, #1
    5214:	545a      	strb	r2, [r3, r1]
    5216:	4770      	bx	lr

00005218 <grid_report_sys_set_payload_parameter>:
}

void grid_report_sys_set_payload_parameter(struct grid_report_model* mod, uint8_t index, uint8_t offset, uint8_t length, uint8_t value){
    5218:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&mod->report_array[index].payload[offset],length,value);
    521a:	6840      	ldr	r0, [r0, #4]
    521c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    5220:	6848      	ldr	r0, [r1, #4]
    5222:	4410      	add	r0, r2
    5224:	f89d 2008 	ldrb.w	r2, [sp, #8]
    5228:	4619      	mov	r1, r3
    522a:	4b01      	ldr	r3, [pc, #4]	; (5230 <grid_report_sys_set_payload_parameter+0x18>)
    522c:	4798      	blx	r3
    522e:	bd08      	pop	{r3, pc}
    5230:	000048a5 	.word	0x000048a5

00005234 <grid_report_sys_clear_changed_flag>:
	
}

void grid_report_sys_clear_changed_flag(struct grid_report_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    5234:	6843      	ldr	r3, [r0, #4]
    5236:	0109      	lsls	r1, r1, #4
    5238:	2200      	movs	r2, #0
    523a:	545a      	strb	r2, [r3, r1]
    523c:	4770      	bx	lr
	...

00005240 <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    5240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5244:	b0d5      	sub	sp, #340	; 0x154
    5246:	9003      	str	r0, [sp, #12]
	for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    5248:	4b76      	ldr	r3, [pc, #472]	; (5424 <grid_port_process_ui+0x1e4>)
    524a:	785b      	ldrb	r3, [r3, #1]
    524c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    5250:	b32b      	cbz	r3, 529e <grid_port_process_ui+0x5e>
    5252:	2600      	movs	r6, #0
    5254:	4634      	mov	r4, r6
		for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    5256:	4873      	ldr	r0, [pc, #460]	; (5424 <grid_port_process_ui+0x1e4>)
    5258:	4637      	mov	r7, r6
    525a:	e019      	b.n	5290 <grid_port_process_ui+0x50>
    525c:	463b      	mov	r3, r7
			if (grid_ui_event_istriggered(&grid_ui_state.element[i].event_list[j])){
    525e:	6842      	ldr	r2, [r0, #4]
	if (eve->trigger == GRID_UI_EVENT_STATUS_TRIGGERED){
    5260:	440a      	add	r2, r1
    5262:	68d2      	ldr	r2, [r2, #12]
    5264:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5268:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
			if (grid_ui_event_istriggered(&grid_ui_state.element[i].event_list[j])){
    526c:	7852      	ldrb	r2, [r2, #1]
    526e:	2a02      	cmp	r2, #2
				message_broadcast_action_available++;
    5270:	bf04      	itt	eq
    5272:	3401      	addeq	r4, #1
    5274:	b2e4      	uxtbeq	r4, r4
		for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    5276:	3301      	adds	r3, #1
    5278:	b2db      	uxtb	r3, r3
    527a:	6842      	ldr	r2, [r0, #4]
    527c:	440a      	add	r2, r1
    527e:	7a12      	ldrb	r2, [r2, #8]
    5280:	429a      	cmp	r2, r3
    5282:	d8ec      	bhi.n	525e <grid_port_process_ui+0x1e>
	for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    5284:	3601      	adds	r6, #1
    5286:	b2f6      	uxtb	r6, r6
    5288:	7843      	ldrb	r3, [r0, #1]
    528a:	b2db      	uxtb	r3, r3
    528c:	42b3      	cmp	r3, r6
    528e:	d906      	bls.n	529e <grid_port_process_ui+0x5e>
		for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    5290:	6843      	ldr	r3, [r0, #4]
    5292:	0131      	lsls	r1, r6, #4
    5294:	440b      	add	r3, r1
    5296:	7a1b      	ldrb	r3, [r3, #8]
    5298:	2b00      	cmp	r3, #0
    529a:	d1df      	bne.n	525c <grid_port_process_ui+0x1c>
    529c:	e7f2      	b.n	5284 <grid_port_process_ui+0x44>
	for (uint8_t i=0; i<grid_core_state.element_list_length; i++){
    529e:	4b62      	ldr	r3, [pc, #392]	; (5428 <grid_port_process_ui+0x1e8>)
    52a0:	785b      	ldrb	r3, [r3, #1]
    52a2:	b323      	cbz	r3, 52ee <grid_port_process_ui+0xae>
    52a4:	2600      	movs	r6, #0
		for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    52a6:	4860      	ldr	r0, [pc, #384]	; (5428 <grid_port_process_ui+0x1e8>)
    52a8:	4637      	mov	r7, r6
    52aa:	e019      	b.n	52e0 <grid_port_process_ui+0xa0>
    52ac:	463b      	mov	r3, r7
			if (grid_ui_event_istriggered(&grid_core_state.element[i].event_list[j])){
    52ae:	6842      	ldr	r2, [r0, #4]
	if (eve->trigger == GRID_UI_EVENT_STATUS_TRIGGERED){
    52b0:	440a      	add	r2, r1
    52b2:	68d2      	ldr	r2, [r2, #12]
    52b4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    52b8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
			if (grid_ui_event_istriggered(&grid_core_state.element[i].event_list[j])){
    52bc:	7852      	ldrb	r2, [r2, #1]
    52be:	2a02      	cmp	r2, #2
				message_broadcast_action_available++;
    52c0:	bf04      	itt	eq
    52c2:	3401      	addeq	r4, #1
    52c4:	b2e4      	uxtbeq	r4, r4
		for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    52c6:	3301      	adds	r3, #1
    52c8:	b2db      	uxtb	r3, r3
    52ca:	6842      	ldr	r2, [r0, #4]
    52cc:	440a      	add	r2, r1
    52ce:	7a12      	ldrb	r2, [r2, #8]
    52d0:	429a      	cmp	r2, r3
    52d2:	d8ec      	bhi.n	52ae <grid_port_process_ui+0x6e>
	for (uint8_t i=0; i<grid_core_state.element_list_length; i++){
    52d4:	3601      	adds	r6, #1
    52d6:	b2f6      	uxtb	r6, r6
    52d8:	7843      	ldrb	r3, [r0, #1]
    52da:	b2db      	uxtb	r3, r3
    52dc:	42b3      	cmp	r3, r6
    52de:	d906      	bls.n	52ee <grid_port_process_ui+0xae>
		for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    52e0:	6843      	ldr	r3, [r0, #4]
    52e2:	0131      	lsls	r1, r6, #4
    52e4:	440b      	add	r3, r1
    52e6:	7a1b      	ldrb	r3, [r3, #8]
    52e8:	2b00      	cmp	r3, #0
    52ea:	d1df      	bne.n	52ac <grid_port_process_ui+0x6c>
    52ec:	e7f2      	b.n	52d4 <grid_port_process_ui+0x94>
	for (uint8_t i=0; i<grid_report_state.report_length; i++){
    52ee:	4b4f      	ldr	r3, [pc, #316]	; (542c <grid_port_process_ui+0x1ec>)
    52f0:	881b      	ldrh	r3, [r3, #0]
    52f2:	b29b      	uxth	r3, r3
    52f4:	2b00      	cmp	r3, #0
    52f6:	f000 810e 	beq.w	5516 <grid_port_process_ui+0x2d6>
	return mod->report_array[index].changed;
    52fa:	4b4c      	ldr	r3, [pc, #304]	; (542c <grid_port_process_ui+0x1ec>)
    52fc:	6858      	ldr	r0, [r3, #4]
    52fe:	2300      	movs	r3, #0
    5300:	469b      	mov	fp, r3
    5302:	4619      	mov	r1, r3
	for (uint8_t i=0; i<grid_report_state.report_length; i++){
    5304:	4d49      	ldr	r5, [pc, #292]	; (542c <grid_port_process_ui+0x1ec>)
    5306:	e014      	b.n	5332 <grid_port_process_ui+0xf2>
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    5308:	f10b 0b01 	add.w	fp, fp, #1
    530c:	fa5f fb8b 	uxtb.w	fp, fp
			(type == GRID_REPORT_TYPE_DIRECT_SOUTH)?message_direct_available++:1;
    5310:	2a05      	cmp	r2, #5
    5312:	d104      	bne.n	531e <grid_port_process_ui+0xde>
    5314:	3101      	adds	r1, #1
    5316:	b2c9      	uxtb	r1, r1
    5318:	e005      	b.n	5326 <grid_port_process_ui+0xe6>
			(type == GRID_REPORT_TYPE_DIRECT_NORTH)?message_direct_available++:1;
    531a:	3101      	adds	r1, #1
    531c:	b2c9      	uxtb	r1, r1
			(type == GRID_REPORT_TYPE_DIRECT_WEST)?message_direct_available++:1;
    531e:	2a06      	cmp	r2, #6
    5320:	bf04      	itt	eq
    5322:	3101      	addeq	r1, #1
    5324:	b2c9      	uxtbeq	r1, r1
	for (uint8_t i=0; i<grid_report_state.report_length; i++){
    5326:	3301      	adds	r3, #1
    5328:	b2db      	uxtb	r3, r3
    532a:	882a      	ldrh	r2, [r5, #0]
    532c:	b292      	uxth	r2, r2
    532e:	429a      	cmp	r2, r3
    5330:	d90e      	bls.n	5350 <grid_port_process_ui+0x110>
	return mod->report_array[index].changed;
    5332:	011a      	lsls	r2, r3, #4
    5334:	1886      	adds	r6, r0, r2
		if (grid_report_sys_get_changed_flag(mod, i)){
    5336:	5c82      	ldrb	r2, [r0, r2]
    5338:	2a00      	cmp	r2, #0
    533a:	d0f4      	beq.n	5326 <grid_port_process_ui+0xe6>
	return mod->report_array[index].type;
    533c:	7872      	ldrb	r2, [r6, #1]
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    533e:	2a02      	cmp	r2, #2
    5340:	d0e2      	beq.n	5308 <grid_port_process_ui+0xc8>
			(type == GRID_REPORT_TYPE_DIRECT_NORTH)?message_direct_available++:1;
    5342:	2a03      	cmp	r2, #3
    5344:	d0e9      	beq.n	531a <grid_port_process_ui+0xda>
			(type == GRID_REPORT_TYPE_DIRECT_EAST)?message_direct_available++:1;
    5346:	2a04      	cmp	r2, #4
    5348:	d1e2      	bne.n	5310 <grid_port_process_ui+0xd0>
    534a:	3101      	adds	r1, #1
    534c:	b2c9      	uxtb	r1, r1
    534e:	e7ea      	b.n	5326 <grid_port_process_ui+0xe6>
	if (message_direct_available){
    5350:	2900      	cmp	r1, #0
    5352:	f000 8088 	beq.w	5466 <grid_port_process_ui+0x226>
		for (uint8_t i=0; i<grid_report_state.report_length; i++){
    5356:	4b35      	ldr	r3, [pc, #212]	; (542c <grid_port_process_ui+0x1ec>)
    5358:	881b      	ldrh	r3, [r3, #0]
    535a:	b29b      	uxth	r3, r3
    535c:	2b00      	cmp	r3, #0
    535e:	f000 8082 	beq.w	5466 <grid_port_process_ui+0x226>
    5362:	2600      	movs	r6, #0
	return mod->report_array[index].changed;
    5364:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 542c <grid_port_process_ui+0x1ec>
				CRITICAL_SECTION_ENTER()			
    5368:	46a1      	mov	r9, r4
    536a:	e00e      	b.n	538a <grid_port_process_ui+0x14a>
					target_buffer = &GRID_PORT_N.tx_buffer;
    536c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 5458 <grid_port_process_ui+0x218>
				if (grid_buffer_write_init(target_buffer, length)){
    5370:	b2b9      	uxth	r1, r7
    5372:	4640      	mov	r0, r8
    5374:	4b2e      	ldr	r3, [pc, #184]	; (5430 <grid_port_process_ui+0x1f0>)
    5376:	4798      	blx	r3
    5378:	2800      	cmp	r0, #0
    537a:	d13c      	bne.n	53f6 <grid_port_process_ui+0x1b6>
		for (uint8_t i=0; i<grid_report_state.report_length; i++){
    537c:	3601      	adds	r6, #1
    537e:	b2f6      	uxtb	r6, r6
    5380:	f8ba 3000 	ldrh.w	r3, [sl]
    5384:	b29b      	uxth	r3, r3
    5386:	42b3      	cmp	r3, r6
    5388:	d96c      	bls.n	5464 <grid_port_process_ui+0x224>
	return mod->report_array[index].changed;
    538a:	0135      	lsls	r5, r6, #4
    538c:	f8da 3004 	ldr.w	r3, [sl, #4]
    5390:	195a      	adds	r2, r3, r5
			if (changed && (type == GRID_REPORT_TYPE_DIRECT_NORTH || type == GRID_REPORT_TYPE_DIRECT_EAST || type == GRID_REPORT_TYPE_DIRECT_SOUTH || type == GRID_REPORT_TYPE_DIRECT_WEST)){
    5392:	5d5b      	ldrb	r3, [r3, r5]
    5394:	2b00      	cmp	r3, #0
    5396:	d0f1      	beq.n	537c <grid_port_process_ui+0x13c>
    5398:	7853      	ldrb	r3, [r2, #1]
    539a:	3b03      	subs	r3, #3
    539c:	b2db      	uxtb	r3, r3
    539e:	2b03      	cmp	r3, #3
    53a0:	d8ec      	bhi.n	537c <grid_port_process_ui+0x13c>
				uint8_t message[256] = {0};
    53a2:	f44f 7280 	mov.w	r2, #256	; 0x100
    53a6:	2100      	movs	r1, #0
    53a8:	a809      	add	r0, sp, #36	; 0x24
    53aa:	4b22      	ldr	r3, [pc, #136]	; (5434 <grid_port_process_ui+0x1f4>)
    53ac:	4798      	blx	r3
				CRITICAL_SECTION_ENTER()			
    53ae:	a805      	add	r0, sp, #20
    53b0:	4b21      	ldr	r3, [pc, #132]	; (5438 <grid_port_process_ui+0x1f8>)
    53b2:	4798      	blx	r3
				grid_report_render(mod, i, &message[length]);
    53b4:	aa09      	add	r2, sp, #36	; 0x24
    53b6:	4631      	mov	r1, r6
    53b8:	4650      	mov	r0, sl
    53ba:	4b20      	ldr	r3, [pc, #128]	; (543c <grid_port_process_ui+0x1fc>)
    53bc:	4798      	blx	r3
				length += strlen(&message[length]);
    53be:	a809      	add	r0, sp, #36	; 0x24
    53c0:	4b1f      	ldr	r3, [pc, #124]	; (5440 <grid_port_process_ui+0x200>)
    53c2:	4798      	blx	r3
    53c4:	4607      	mov	r7, r0
				CRITICAL_SECTION_LEAVE()			
    53c6:	a805      	add	r0, sp, #20
    53c8:	4b1e      	ldr	r3, [pc, #120]	; (5444 <grid_port_process_ui+0x204>)
    53ca:	4798      	blx	r3
	return mod->report_array[index].type;
    53cc:	f8da 3004 	ldr.w	r3, [sl, #4]
    53d0:	441d      	add	r5, r3
    53d2:	786b      	ldrb	r3, [r5, #1]
				if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    53d4:	2b03      	cmp	r3, #3
    53d6:	d0c9      	beq.n	536c <grid_port_process_ui+0x12c>
				else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    53d8:	2b04      	cmp	r3, #4
    53da:	d006      	beq.n	53ea <grid_port_process_ui+0x1aa>
				else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    53dc:	2b05      	cmp	r3, #5
    53de:	d007      	beq.n	53f0 <grid_port_process_ui+0x1b0>
					target_buffer = &GRID_PORT_W.tx_buffer;
    53e0:	4a19      	ldr	r2, [pc, #100]	; (5448 <grid_port_process_ui+0x208>)
    53e2:	2b06      	cmp	r3, #6
    53e4:	bf08      	it	eq
    53e6:	4690      	moveq	r8, r2
    53e8:	e7c2      	b.n	5370 <grid_port_process_ui+0x130>
					target_buffer = &GRID_PORT_E.tx_buffer;
    53ea:	f8df 8070 	ldr.w	r8, [pc, #112]	; 545c <grid_port_process_ui+0x21c>
    53ee:	e7bf      	b.n	5370 <grid_port_process_ui+0x130>
					target_buffer = &GRID_PORT_S.tx_buffer;
    53f0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 5460 <grid_port_process_ui+0x220>
    53f4:	e7bc      	b.n	5370 <grid_port_process_ui+0x130>
					grid_report_sys_clear_changed_flag(mod, i);
    53f6:	4631      	mov	r1, r6
    53f8:	4650      	mov	r0, sl
    53fa:	4b14      	ldr	r3, [pc, #80]	; (544c <grid_port_process_ui+0x20c>)
    53fc:	4798      	blx	r3
					for(uint32_t i = 0; i<length; i++){
    53fe:	b167      	cbz	r7, 541a <grid_port_process_ui+0x1da>
    5400:	f10d 0523 	add.w	r5, sp, #35	; 0x23
    5404:	ab54      	add	r3, sp, #336	; 0x150
    5406:	441f      	add	r7, r3
    5408:	f2a7 172d 	subw	r7, r7, #301	; 0x12d
						grid_buffer_write_character(target_buffer, message[i]);
    540c:	4c10      	ldr	r4, [pc, #64]	; (5450 <grid_port_process_ui+0x210>)
    540e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    5412:	4640      	mov	r0, r8
    5414:	47a0      	blx	r4
					for(uint32_t i = 0; i<length; i++){
    5416:	42af      	cmp	r7, r5
    5418:	d1f9      	bne.n	540e <grid_port_process_ui+0x1ce>
					grid_buffer_write_acknowledge(target_buffer);
    541a:	4640      	mov	r0, r8
    541c:	4b0d      	ldr	r3, [pc, #52]	; (5454 <grid_port_process_ui+0x214>)
    541e:	4798      	blx	r3
    5420:	e7ac      	b.n	537c <grid_port_process_ui+0x13c>
    5422:	bf00      	nop
    5424:	200032c4 	.word	0x200032c4
    5428:	200078d0 	.word	0x200078d0
    542c:	200078c4 	.word	0x200078c4
    5430:	000015d9 	.word	0x000015d9
    5434:	0000d0e7 	.word	0x0000d0e7
    5438:	00005c01 	.word	0x00005c01
    543c:	000051f1 	.word	0x000051f1
    5440:	0000d51d 	.word	0x0000d51d
    5444:	00005c0f 	.word	0x00005c0f
    5448:	20004768 	.word	0x20004768
    544c:	00005235 	.word	0x00005235
    5450:	00001609 	.word	0x00001609
    5454:	00001625 	.word	0x00001625
    5458:	20002274 	.word	0x20002274
    545c:	20007888 	.word	0x20007888
    5460:	20005774 	.word	0x20005774
    5464:	464c      	mov	r4, r9
	if (por->cooldown > 15){
    5466:	9b03      	ldr	r3, [sp, #12]
    5468:	681b      	ldr	r3, [r3, #0]
    546a:	2b0f      	cmp	r3, #15
    546c:	d856      	bhi.n	551c <grid_port_process_ui+0x2dc>
	else if (por->cooldown>0){
    546e:	b113      	cbz	r3, 5476 <grid_port_process_ui+0x236>
		por->cooldown--;
    5470:	3b01      	subs	r3, #1
    5472:	9a03      	ldr	r2, [sp, #12]
    5474:	6013      	str	r3, [r2, #0]
	if (message_broadcast_available || message_broadcast_action_available){
    5476:	f1bb 0f00 	cmp.w	fp, #0
    547a:	d101      	bne.n	5480 <grid_port_process_ui+0x240>
    547c:	2c00      	cmp	r4, #0
    547e:	d050      	beq.n	5522 <grid_port_process_ui+0x2e2>
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    5480:	f44f 7296 	mov.w	r2, #300	; 0x12c
    5484:	2100      	movs	r1, #0
    5486:	a809      	add	r0, sp, #36	; 0x24
    5488:	4b8b      	ldr	r3, [pc, #556]	; (56b8 <grid_port_process_ui+0x478>)
    548a:	4798      	blx	r3
		sprintf(&message[length], GRID_BRC_frame);
    548c:	2317      	movs	r3, #23
    548e:	9300      	str	r3, [sp, #0]
    5490:	230f      	movs	r3, #15
    5492:	2201      	movs	r2, #1
    5494:	4989      	ldr	r1, [pc, #548]	; (56bc <grid_port_process_ui+0x47c>)
    5496:	a809      	add	r0, sp, #36	; 0x24
    5498:	4c89      	ldr	r4, [pc, #548]	; (56c0 <grid_port_process_ui+0x480>)
    549a:	47a0      	blx	r4
		uint8_t error = 0;
    549c:	f10d 0412 	add.w	r4, sp, #18
    54a0:	2600      	movs	r6, #0
    54a2:	f88d 6012 	strb.w	r6, [sp, #18]
		grid_msg_set_parameter(&message[length], GRID_BRC_LEN_offset, GRID_BRC_LEN_length, 0, &error);
    54a6:	9400      	str	r4, [sp, #0]
    54a8:	4633      	mov	r3, r6
    54aa:	2202      	movs	r2, #2
    54ac:	4611      	mov	r1, r2
    54ae:	a809      	add	r0, sp, #36	; 0x24
    54b0:	4d84      	ldr	r5, [pc, #528]	; (56c4 <grid_port_process_ui+0x484>)
    54b2:	47a8      	blx	r5
		grid_msg_set_parameter(&message[length], GRID_BRC_ID_offset , GRID_BRC_ID_length , grid_sys_state.next_broadcast_message_id,  &error);
    54b4:	4f84      	ldr	r7, [pc, #528]	; (56c8 <grid_port_process_ui+0x488>)
    54b6:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
    54ba:	9400      	str	r4, [sp, #0]
    54bc:	2202      	movs	r2, #2
    54be:	2104      	movs	r1, #4
    54c0:	a809      	add	r0, sp, #36	; 0x24
    54c2:	47a8      	blx	r5
		grid_msg_set_parameter(&message[length], GRID_BRC_DX_offset , GRID_BRC_DX_length , GRID_SYS_DEFAULT_POSITION,  &error);
    54c4:	9400      	str	r4, [sp, #0]
    54c6:	237f      	movs	r3, #127	; 0x7f
    54c8:	2202      	movs	r2, #2
    54ca:	2106      	movs	r1, #6
    54cc:	a809      	add	r0, sp, #36	; 0x24
    54ce:	47a8      	blx	r5
		grid_msg_set_parameter(&message[length], GRID_BRC_DY_offset , GRID_BRC_DY_length , GRID_SYS_DEFAULT_POSITION,  &error);
    54d0:	9400      	str	r4, [sp, #0]
    54d2:	237f      	movs	r3, #127	; 0x7f
    54d4:	2202      	movs	r2, #2
    54d6:	2108      	movs	r1, #8
    54d8:	a809      	add	r0, sp, #36	; 0x24
    54da:	47a8      	blx	r5
		grid_msg_set_parameter(&message[length], GRID_BRC_AGE_offset, GRID_BRC_AGE_length, grid_sys_state.age, &error);
    54dc:	783b      	ldrb	r3, [r7, #0]
    54de:	9400      	str	r4, [sp, #0]
    54e0:	2202      	movs	r2, #2
    54e2:	210a      	movs	r1, #10
    54e4:	a809      	add	r0, sp, #36	; 0x24
    54e6:	47a8      	blx	r5
		grid_msg_set_parameter(&message[length], GRID_BRC_ROT_offset, GRID_BRC_ROT_length, GRID_SYS_DEFAULT_ROTATION, &error);
    54e8:	9400      	str	r4, [sp, #0]
    54ea:	4633      	mov	r3, r6
    54ec:	2202      	movs	r2, #2
    54ee:	210c      	movs	r1, #12
    54f0:	a809      	add	r0, sp, #36	; 0x24
    54f2:	47a8      	blx	r5
		length += strlen(&message[length]);
    54f4:	a809      	add	r0, sp, #36	; 0x24
    54f6:	4b75      	ldr	r3, [pc, #468]	; (56cc <grid_port_process_ui+0x48c>)
    54f8:	4798      	blx	r3
    54fa:	b285      	uxth	r5, r0
		for (uint8_t i=0; i<grid_core_state.element_list_length; i++){
    54fc:	4b74      	ldr	r3, [pc, #464]	; (56d0 <grid_port_process_ui+0x490>)
    54fe:	785b      	ldrb	r3, [r3, #1]
    5500:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    5504:	2b00      	cmp	r3, #0
    5506:	d052      	beq.n	55ae <grid_port_process_ui+0x36e>
    5508:	f04f 0900 	mov.w	r9, #0
    550c:	46ca      	mov	sl, r9
			for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    550e:	4e70      	ldr	r6, [pc, #448]	; (56d0 <grid_port_process_ui+0x490>)
				CRITICAL_SECTION_ENTER()
    5510:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 56ec <grid_port_process_ui+0x4ac>
    5514:	e042      	b.n	559c <grid_port_process_ui+0x35c>
	for (uint8_t i=0; i<grid_report_state.report_length; i++){
    5516:	f04f 0b00 	mov.w	fp, #0
    551a:	e7a4      	b.n	5466 <grid_port_process_ui+0x226>
		por->cooldown--;
    551c:	3b01      	subs	r3, #1
    551e:	9a03      	ldr	r2, [sp, #12]
    5520:	6013      	str	r3, [r2, #0]
}
    5522:	b055      	add	sp, #340	; 0x154
    5524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				CRITICAL_SECTION_LEAVE()
    5528:	a806      	add	r0, sp, #24
    552a:	4b6a      	ldr	r3, [pc, #424]	; (56d4 <grid_port_process_ui+0x494>)
    552c:	4798      	blx	r3
			for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    552e:	3401      	adds	r4, #1
    5530:	b2e4      	uxtb	r4, r4
    5532:	6873      	ldr	r3, [r6, #4]
    5534:	4443      	add	r3, r8
    5536:	7a1b      	ldrb	r3, [r3, #8]
    5538:	42a3      	cmp	r3, r4
    553a:	d927      	bls.n	558c <grid_port_process_ui+0x34c>
				if (length>GRID_PARAMETER_PACKET_marign){
    553c:	2dc8      	cmp	r5, #200	; 0xc8
    553e:	d8f6      	bhi.n	552e <grid_port_process_ui+0x2ee>
				CRITICAL_SECTION_ENTER()
    5540:	a806      	add	r0, sp, #24
    5542:	47d8      	blx	fp
				if (grid_ui_event_istriggered(&grid_core_state.element[i].event_list[j])){
    5544:	6873      	ldr	r3, [r6, #4]
    5546:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    554a:	00ff      	lsls	r7, r7, #3
	if (eve->trigger == GRID_UI_EVENT_STATUS_TRIGGERED){
    554c:	4443      	add	r3, r8
    554e:	68db      	ldr	r3, [r3, #12]
    5550:	443b      	add	r3, r7
				if (grid_ui_event_istriggered(&grid_core_state.element[i].event_list[j])){
    5552:	785b      	ldrb	r3, [r3, #1]
    5554:	2b02      	cmp	r3, #2
    5556:	d1e7      	bne.n	5528 <grid_port_process_ui+0x2e8>
					packetvalid++;
    5558:	f10a 0a01 	add.w	sl, sl, #1
    555c:	fa5f fa8a 	uxtb.w	sl, sl
					grid_ui_event_render_action(&grid_core_state.element[i].event_list[j], &message[length]);
    5560:	6873      	ldr	r3, [r6, #4]
    5562:	aa09      	add	r2, sp, #36	; 0x24
    5564:	442a      	add	r2, r5
    5566:	4443      	add	r3, r8
    5568:	68d8      	ldr	r0, [r3, #12]
    556a:	9202      	str	r2, [sp, #8]
    556c:	4611      	mov	r1, r2
    556e:	4438      	add	r0, r7
    5570:	4b59      	ldr	r3, [pc, #356]	; (56d8 <grid_port_process_ui+0x498>)
    5572:	4798      	blx	r3
					length += strlen(&message[length]);
    5574:	9802      	ldr	r0, [sp, #8]
    5576:	4b55      	ldr	r3, [pc, #340]	; (56cc <grid_port_process_ui+0x48c>)
    5578:	4798      	blx	r3
    557a:	4405      	add	r5, r0
    557c:	b2ad      	uxth	r5, r5
					grid_ui_event_reset(&grid_core_state.element[i].event_list[j]);
    557e:	6873      	ldr	r3, [r6, #4]
	eve->trigger = GRID_UI_EVENT_STATUS_READY;
    5580:	4443      	add	r3, r8
    5582:	68db      	ldr	r3, [r3, #12]
    5584:	441f      	add	r7, r3
    5586:	2301      	movs	r3, #1
    5588:	707b      	strb	r3, [r7, #1]
    558a:	e7cd      	b.n	5528 <grid_port_process_ui+0x2e8>
		for (uint8_t i=0; i<grid_core_state.element_list_length; i++){
    558c:	f109 0901 	add.w	r9, r9, #1
    5590:	fa5f f989 	uxtb.w	r9, r9
    5594:	7873      	ldrb	r3, [r6, #1]
    5596:	b2db      	uxtb	r3, r3
    5598:	454b      	cmp	r3, r9
    559a:	d908      	bls.n	55ae <grid_port_process_ui+0x36e>
			for (uint8_t j=0; j<grid_core_state.element[i].event_list_length; j++){
    559c:	6873      	ldr	r3, [r6, #4]
    559e:	ea4f 1809 	mov.w	r8, r9, lsl #4
    55a2:	4443      	add	r3, r8
    55a4:	7a1b      	ldrb	r3, [r3, #8]
    55a6:	2400      	movs	r4, #0
    55a8:	2b00      	cmp	r3, #0
    55aa:	d1c7      	bne.n	553c <grid_port_process_ui+0x2fc>
    55ac:	e7ee      	b.n	558c <grid_port_process_ui+0x34c>
		for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    55ae:	4b4b      	ldr	r3, [pc, #300]	; (56dc <grid_port_process_ui+0x49c>)
    55b0:	785b      	ldrb	r3, [r3, #1]
    55b2:	2b00      	cmp	r3, #0
    55b4:	d048      	beq.n	5648 <grid_port_process_ui+0x408>
    55b6:	f04f 0900 	mov.w	r9, #0
			for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    55ba:	4e48      	ldr	r6, [pc, #288]	; (56dc <grid_port_process_ui+0x49c>)
				CRITICAL_SECTION_ENTER()
    55bc:	f8df b12c 	ldr.w	fp, [pc, #300]	; 56ec <grid_port_process_ui+0x4ac>
    55c0:	e039      	b.n	5636 <grid_port_process_ui+0x3f6>
				CRITICAL_SECTION_LEAVE()
    55c2:	a807      	add	r0, sp, #28
    55c4:	4b43      	ldr	r3, [pc, #268]	; (56d4 <grid_port_process_ui+0x494>)
    55c6:	4798      	blx	r3
			for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    55c8:	3401      	adds	r4, #1
    55ca:	b2e4      	uxtb	r4, r4
    55cc:	6873      	ldr	r3, [r6, #4]
    55ce:	4443      	add	r3, r8
    55d0:	7a1b      	ldrb	r3, [r3, #8]
    55d2:	42a3      	cmp	r3, r4
    55d4:	d927      	bls.n	5626 <grid_port_process_ui+0x3e6>
				if (length>GRID_PARAMETER_PACKET_marign){
    55d6:	2dc8      	cmp	r5, #200	; 0xc8
    55d8:	d8f6      	bhi.n	55c8 <grid_port_process_ui+0x388>
				CRITICAL_SECTION_ENTER()
    55da:	a807      	add	r0, sp, #28
    55dc:	47d8      	blx	fp
				if (grid_ui_event_istriggered(&grid_ui_state.element[i].event_list[j])){
    55de:	6873      	ldr	r3, [r6, #4]
    55e0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    55e4:	00ff      	lsls	r7, r7, #3
	if (eve->trigger == GRID_UI_EVENT_STATUS_TRIGGERED){
    55e6:	4443      	add	r3, r8
    55e8:	68db      	ldr	r3, [r3, #12]
    55ea:	443b      	add	r3, r7
				if (grid_ui_event_istriggered(&grid_ui_state.element[i].event_list[j])){
    55ec:	785b      	ldrb	r3, [r3, #1]
    55ee:	2b02      	cmp	r3, #2
    55f0:	d1e7      	bne.n	55c2 <grid_port_process_ui+0x382>
					packetvalid++;				
    55f2:	f10a 0a01 	add.w	sl, sl, #1
    55f6:	fa5f fa8a 	uxtb.w	sl, sl
					grid_ui_event_render_action(&grid_ui_state.element[i].event_list[j], &message[length]);
    55fa:	6873      	ldr	r3, [r6, #4]
    55fc:	aa09      	add	r2, sp, #36	; 0x24
    55fe:	442a      	add	r2, r5
    5600:	4443      	add	r3, r8
    5602:	68d8      	ldr	r0, [r3, #12]
    5604:	9202      	str	r2, [sp, #8]
    5606:	4611      	mov	r1, r2
    5608:	4438      	add	r0, r7
    560a:	4b33      	ldr	r3, [pc, #204]	; (56d8 <grid_port_process_ui+0x498>)
    560c:	4798      	blx	r3
					length += strlen(&message[length]);
    560e:	9802      	ldr	r0, [sp, #8]
    5610:	4b2e      	ldr	r3, [pc, #184]	; (56cc <grid_port_process_ui+0x48c>)
    5612:	4798      	blx	r3
    5614:	4405      	add	r5, r0
    5616:	b2ad      	uxth	r5, r5
					grid_ui_event_reset(&grid_ui_state.element[i].event_list[j]);
    5618:	6873      	ldr	r3, [r6, #4]
	eve->trigger = GRID_UI_EVENT_STATUS_READY;
    561a:	4443      	add	r3, r8
    561c:	68db      	ldr	r3, [r3, #12]
    561e:	441f      	add	r7, r3
    5620:	2301      	movs	r3, #1
    5622:	707b      	strb	r3, [r7, #1]
    5624:	e7cd      	b.n	55c2 <grid_port_process_ui+0x382>
		for (uint8_t i=0; i<grid_ui_state.element_list_length; i++){
    5626:	f109 0901 	add.w	r9, r9, #1
    562a:	fa5f f989 	uxtb.w	r9, r9
    562e:	7873      	ldrb	r3, [r6, #1]
    5630:	b2db      	uxtb	r3, r3
    5632:	454b      	cmp	r3, r9
    5634:	d908      	bls.n	5648 <grid_port_process_ui+0x408>
			for (uint8_t j=0; j<grid_ui_state.element[i].event_list_length; j++){
    5636:	6873      	ldr	r3, [r6, #4]
    5638:	ea4f 1809 	mov.w	r8, r9, lsl #4
    563c:	4443      	add	r3, r8
    563e:	7a1b      	ldrb	r3, [r3, #8]
    5640:	2400      	movs	r4, #0
    5642:	2b00      	cmp	r3, #0
    5644:	d1c7      	bne.n	55d6 <grid_port_process_ui+0x396>
    5646:	e7ee      	b.n	5626 <grid_port_process_ui+0x3e6>
		for (uint16_t i = 0; i<grid_report_state.report_length; i++)
    5648:	4b25      	ldr	r3, [pc, #148]	; (56e0 <grid_port_process_ui+0x4a0>)
    564a:	881b      	ldrh	r3, [r3, #0]
    564c:	b29b      	uxth	r3, r3
    564e:	2b00      	cmp	r3, #0
    5650:	d04e      	beq.n	56f0 <grid_port_process_ui+0x4b0>
    5652:	2400      	movs	r4, #0
			CRITICAL_SECTION_ENTER()
    5654:	f8df 9094 	ldr.w	r9, [pc, #148]	; 56ec <grid_port_process_ui+0x4ac>
	return mod->report_array[index].changed;
    5658:	4e21      	ldr	r6, [pc, #132]	; (56e0 <grid_port_process_ui+0x4a0>)
			CRITICAL_SECTION_LEAVE()
    565a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 56d4 <grid_port_process_ui+0x494>
    565e:	e007      	b.n	5670 <grid_port_process_ui+0x430>
    5660:	a808      	add	r0, sp, #32
    5662:	47c0      	blx	r8
		for (uint16_t i = 0; i<grid_report_state.report_length; i++)
    5664:	3401      	adds	r4, #1
    5666:	b2a4      	uxth	r4, r4
    5668:	8833      	ldrh	r3, [r6, #0]
    566a:	b29b      	uxth	r3, r3
    566c:	42a3      	cmp	r3, r4
    566e:	d93f      	bls.n	56f0 <grid_port_process_ui+0x4b0>
			if (length>GRID_PARAMETER_PACKET_marign){
    5670:	2dc8      	cmp	r5, #200	; 0xc8
    5672:	d8f7      	bhi.n	5664 <grid_port_process_ui+0x424>
			CRITICAL_SECTION_ENTER()
    5674:	a808      	add	r0, sp, #32
    5676:	47c8      	blx	r9
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_BROADCAST){
    5678:	b2e7      	uxtb	r7, r4
	return mod->report_array[index].changed;
    567a:	013b      	lsls	r3, r7, #4
    567c:	6872      	ldr	r2, [r6, #4]
    567e:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_BROADCAST){
    5680:	5cd3      	ldrb	r3, [r2, r3]
    5682:	2b00      	cmp	r3, #0
    5684:	d0ec      	beq.n	5660 <grid_port_process_ui+0x420>
    5686:	784b      	ldrb	r3, [r1, #1]
    5688:	2b02      	cmp	r3, #2
    568a:	d1e9      	bne.n	5660 <grid_port_process_ui+0x420>
				packetvalid++;
    568c:	f10a 0a01 	add.w	sl, sl, #1
    5690:	fa5f fa8a 	uxtb.w	sl, sl
				grid_report_render(mod, i, &message[length]);
    5694:	ab09      	add	r3, sp, #36	; 0x24
    5696:	eb03 0b05 	add.w	fp, r3, r5
    569a:	465a      	mov	r2, fp
    569c:	4639      	mov	r1, r7
    569e:	4630      	mov	r0, r6
    56a0:	4b10      	ldr	r3, [pc, #64]	; (56e4 <grid_port_process_ui+0x4a4>)
    56a2:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    56a4:	4639      	mov	r1, r7
    56a6:	4630      	mov	r0, r6
    56a8:	4b0f      	ldr	r3, [pc, #60]	; (56e8 <grid_port_process_ui+0x4a8>)
    56aa:	4798      	blx	r3
				length += strlen(&message[length]);
    56ac:	4658      	mov	r0, fp
    56ae:	4b07      	ldr	r3, [pc, #28]	; (56cc <grid_port_process_ui+0x48c>)
    56b0:	4798      	blx	r3
    56b2:	4405      	add	r5, r0
    56b4:	b2ad      	uxth	r5, r5
    56b6:	e7d3      	b.n	5660 <grid_port_process_ui+0x420>
    56b8:	0000d0e7 	.word	0x0000d0e7
    56bc:	0000e9b0 	.word	0x0000e9b0
    56c0:	0000d4d5 	.word	0x0000d4d5
    56c4:	00004bf9 	.word	0x00004bf9
    56c8:	200032d0 	.word	0x200032d0
    56cc:	0000d51d 	.word	0x0000d51d
    56d0:	200078d0 	.word	0x200078d0
    56d4:	00005c0f 	.word	0x00005c0f
    56d8:	00004e83 	.word	0x00004e83
    56dc:	200032c4 	.word	0x200032c4
    56e0:	200078c4 	.word	0x200078c4
    56e4:	000051f1 	.word	0x000051f1
    56e8:	00005235 	.word	0x00005235
    56ec:	00005c01 	.word	0x00005c01
		if (packetvalid){
    56f0:	f1ba 0f00 	cmp.w	sl, #0
    56f4:	f43f af15 	beq.w	5522 <grid_port_process_ui+0x2e2>
			por->cooldown += (10+por->cooldown);
    56f8:	9a03      	ldr	r2, [sp, #12]
    56fa:	6813      	ldr	r3, [r2, #0]
    56fc:	005b      	lsls	r3, r3, #1
    56fe:	330a      	adds	r3, #10
    5700:	6013      	str	r3, [r2, #0]
			grid_sys_state.next_broadcast_message_id++;
    5702:	4a21      	ldr	r2, [pc, #132]	; (5788 <grid_port_process_ui+0x548>)
    5704:	f892 30a1 	ldrb.w	r3, [r2, #161]	; 0xa1
    5708:	3301      	adds	r3, #1
    570a:	b2db      	uxtb	r3, r3
    570c:	f882 30a1 	strb.w	r3, [r2, #161]	; 0xa1
			uint8_t error = 0;
    5710:	f10d 0313 	add.w	r3, sp, #19
    5714:	2200      	movs	r2, #0
    5716:	f88d 2013 	strb.w	r2, [sp, #19]
			grid_msg_set_parameter(message, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, length+1, &error);
    571a:	9300      	str	r3, [sp, #0]
    571c:	1c6b      	adds	r3, r5, #1
    571e:	2202      	movs	r2, #2
    5720:	4611      	mov	r1, r2
    5722:	a809      	add	r0, sp, #36	; 0x24
    5724:	4c19      	ldr	r4, [pc, #100]	; (578c <grid_port_process_ui+0x54c>)
    5726:	47a0      	blx	r4
			sprintf(&message[length], "%c..\n", GRID_CONST_EOT);
    5728:	ab09      	add	r3, sp, #36	; 0x24
    572a:	195c      	adds	r4, r3, r5
    572c:	2204      	movs	r2, #4
    572e:	4918      	ldr	r1, [pc, #96]	; (5790 <grid_port_process_ui+0x550>)
    5730:	4620      	mov	r0, r4
    5732:	4b18      	ldr	r3, [pc, #96]	; (5794 <grid_port_process_ui+0x554>)
    5734:	4798      	blx	r3
			length += strlen(&message[length]);
    5736:	4620      	mov	r0, r4
    5738:	4b17      	ldr	r3, [pc, #92]	; (5798 <grid_port_process_ui+0x558>)
    573a:	4798      	blx	r3
    573c:	4428      	add	r0, r5
    573e:	b284      	uxth	r4, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    5740:	4621      	mov	r1, r4
    5742:	a809      	add	r0, sp, #36	; 0x24
    5744:	4b15      	ldr	r3, [pc, #84]	; (579c <grid_port_process_ui+0x55c>)
    5746:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    5748:	4602      	mov	r2, r0
    574a:	4621      	mov	r1, r4
    574c:	a809      	add	r0, sp, #36	; 0x24
    574e:	4b14      	ldr	r3, [pc, #80]	; (57a0 <grid_port_process_ui+0x560>)
    5750:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    5752:	4621      	mov	r1, r4
    5754:	4813      	ldr	r0, [pc, #76]	; (57a4 <grid_port_process_ui+0x564>)
    5756:	4b14      	ldr	r3, [pc, #80]	; (57a8 <grid_port_process_ui+0x568>)
    5758:	4798      	blx	r3
    575a:	2800      	cmp	r0, #0
    575c:	f43f aee1 	beq.w	5522 <grid_port_process_ui+0x2e2>
				for(uint16_t i = 0; i<length; i++){
    5760:	b16c      	cbz	r4, 577e <grid_port_process_ui+0x53e>
    5762:	f10d 0523 	add.w	r5, sp, #35	; 0x23
    5766:	3c01      	subs	r4, #1
    5768:	ab09      	add	r3, sp, #36	; 0x24
    576a:	fa13 f484 	uxtah	r4, r3, r4
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    576e:	4f0d      	ldr	r7, [pc, #52]	; (57a4 <grid_port_process_ui+0x564>)
    5770:	4e0e      	ldr	r6, [pc, #56]	; (57ac <grid_port_process_ui+0x56c>)
    5772:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    5776:	4638      	mov	r0, r7
    5778:	47b0      	blx	r6
				for(uint16_t i = 0; i<length; i++){
    577a:	42ac      	cmp	r4, r5
    577c:	d1f9      	bne.n	5772 <grid_port_process_ui+0x532>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    577e:	4809      	ldr	r0, [pc, #36]	; (57a4 <grid_port_process_ui+0x564>)
    5780:	4b0b      	ldr	r3, [pc, #44]	; (57b0 <grid_port_process_ui+0x570>)
    5782:	4798      	blx	r3
    5784:	e6cd      	b.n	5522 <grid_port_process_ui+0x2e2>
    5786:	bf00      	nop
    5788:	200032d0 	.word	0x200032d0
    578c:	00004bf9 	.word	0x00004bf9
    5790:	0000e9c4 	.word	0x0000e9c4
    5794:	0000d4d5 	.word	0x0000d4d5
    5798:	0000d51d 	.word	0x0000d51d
    579c:	00004b95 	.word	0x00004b95
    57a0:	00004bd1 	.word	0x00004bd1
    57a4:	200032a4 	.word	0x200032a4
    57a8:	000015d9 	.word	0x000015d9
    57ac:	00001609 	.word	0x00001609
    57b0:	00001625 	.word	0x00001625

000057b4 <grid_usb_serial_bulkout_cb>:
	//grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
//	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	
	//cdcdf_acm_write(cdcdf_demo_buf, count); /* Echo data */
	return false;                           /* No error. */
}
    57b4:	2000      	movs	r0, #0
    57b6:	4770      	bx	lr

000057b8 <grid_usb_serial_bulkin_cb>:
	
	//grid_sys_alert_set_alert(&grid_sys_state, 255,0,255,2,300);

//	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS); /* Another read */
	return false;                                                                                 /* No error. */
}
    57b8:	2000      	movs	r0, #0
    57ba:	4770      	bx	lr

000057bc <grid_usb_serial_statechange_cb>:
static bool grid_usb_serial_statechange_cb(usb_cdc_control_signal_t state)
{
    57bc:	b510      	push	{r4, lr}
    57be:	b082      	sub	sp, #8
    57c0:	f8ad 0004 	strh.w	r0, [sp, #4]
	
	//grid_sys_alert_set_alert(&grid_sys_state, 0,255,255,2,300);
	
	if (state.rs232.DTR || 1) {
		/* After connection the R/W callbacks can be registered */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)grid_usb_serial_bulkout_cb);
    57c4:	4904      	ldr	r1, [pc, #16]	; (57d8 <grid_usb_serial_statechange_cb+0x1c>)
    57c6:	2000      	movs	r0, #0
    57c8:	4c04      	ldr	r4, [pc, #16]	; (57dc <grid_usb_serial_statechange_cb+0x20>)
    57ca:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)grid_usb_serial_bulkin_cb);
    57cc:	4904      	ldr	r1, [pc, #16]	; (57e0 <grid_usb_serial_statechange_cb+0x24>)
    57ce:	2001      	movs	r0, #1
    57d0:	47a0      	blx	r4
		/* Start Rx */
		//cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	}
	return false; /* No error. */
}
    57d2:	2000      	movs	r0, #0
    57d4:	b002      	add	sp, #8
    57d6:	bd10      	pop	{r4, pc}
    57d8:	000057b5 	.word	0x000057b5
    57dc:	0000b715 	.word	0x0000b715
    57e0:	000057b9 	.word	0x000057b9

000057e4 <grid_usb_midi_bulkin_cb>:
{
	grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
	return false;
}
static bool grid_usb_midi_bulkin_cb(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    57e4:	b510      	push	{r4, lr}
    57e6:	b082      	sub	sp, #8
	
	grid_sys_alert_set_alert(&grid_sys_state, 255,0,255,2,300);
    57e8:	f44f 7396 	mov.w	r3, #300	; 0x12c
    57ec:	9301      	str	r3, [sp, #4]
    57ee:	2302      	movs	r3, #2
    57f0:	9300      	str	r3, [sp, #0]
    57f2:	23ff      	movs	r3, #255	; 0xff
    57f4:	2200      	movs	r2, #0
    57f6:	4619      	mov	r1, r3
    57f8:	4802      	ldr	r0, [pc, #8]	; (5804 <grid_usb_midi_bulkin_cb+0x20>)
    57fa:	4c03      	ldr	r4, [pc, #12]	; (5808 <grid_usb_midi_bulkin_cb+0x24>)
    57fc:	47a0      	blx	r4
	return false;
}
    57fe:	2000      	movs	r0, #0
    5800:	b002      	add	sp, #8
    5802:	bd10      	pop	{r4, pc}
    5804:	200032d0 	.word	0x200032d0
    5808:	00004811 	.word	0x00004811

0000580c <grid_usb_midi_bulkout_cb>:
{
    580c:	b510      	push	{r4, lr}
    580e:	b082      	sub	sp, #8
	grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
    5810:	f44f 7396 	mov.w	r3, #300	; 0x12c
    5814:	9301      	str	r3, [sp, #4]
    5816:	2302      	movs	r3, #2
    5818:	9300      	str	r3, [sp, #0]
    581a:	2300      	movs	r3, #0
    581c:	22ff      	movs	r2, #255	; 0xff
    581e:	4611      	mov	r1, r2
    5820:	4802      	ldr	r0, [pc, #8]	; (582c <grid_usb_midi_bulkout_cb+0x20>)
    5822:	4c03      	ldr	r4, [pc, #12]	; (5830 <grid_usb_midi_bulkout_cb+0x24>)
    5824:	47a0      	blx	r4
}
    5826:	2000      	movs	r0, #0
    5828:	b002      	add	sp, #8
    582a:	bd10      	pop	{r4, pc}
    582c:	200032d0 	.word	0x200032d0
    5830:	00004811 	.word	0x00004811

00005834 <grid_usb_serial_init>:
{
    5834:	b508      	push	{r3, lr}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)grid_usb_serial_statechange_cb);
    5836:	4902      	ldr	r1, [pc, #8]	; (5840 <grid_usb_serial_init+0xc>)
    5838:	2003      	movs	r0, #3
    583a:	4b02      	ldr	r3, [pc, #8]	; (5844 <grid_usb_serial_init+0x10>)
    583c:	4798      	blx	r3
    583e:	bd08      	pop	{r3, pc}
    5840:	000057bd 	.word	0x000057bd
    5844:	0000b715 	.word	0x0000b715

00005848 <grid_usb_midi_init>:




void grid_usb_midi_init()
{
    5848:	b510      	push	{r4, lr}
	
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_READ, (FUNC_PTR)grid_usb_midi_bulkout_cb);
    584a:	4904      	ldr	r1, [pc, #16]	; (585c <grid_usb_midi_init+0x14>)
    584c:	2000      	movs	r0, #0
    584e:	4c04      	ldr	r4, [pc, #16]	; (5860 <grid_usb_midi_init+0x18>)
    5850:	47a0      	blx	r4
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_WRITE, (FUNC_PTR)grid_usb_midi_bulkin_cb);
    5852:	4904      	ldr	r1, [pc, #16]	; (5864 <grid_usb_midi_init+0x1c>)
    5854:	2001      	movs	r0, #1
    5856:	47a0      	blx	r4
    5858:	bd10      	pop	{r4, pc}
    585a:	bf00      	nop
    585c:	0000580d 	.word	0x0000580d
    5860:	0000bf05 	.word	0x0000bf05
    5864:	000057e5 	.word	0x000057e5

00005868 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    5868:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    586a:	6983      	ldr	r3, [r0, #24]
    586c:	b103      	cbz	r3, 5870 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    586e:	4798      	blx	r3
    5870:	bd08      	pop	{r3, pc}

00005872 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    5872:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    5874:	69c3      	ldr	r3, [r0, #28]
    5876:	b103      	cbz	r3, 587a <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    5878:	4798      	blx	r3
    587a:	bd08      	pop	{r3, pc}

0000587c <adc_async_channel_conversion_done>:
{
    587c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5880:	4606      	mov	r6, r0
    5882:	460f      	mov	r7, r1
    5884:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    5886:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    5888:	5c5c      	ldrb	r4, [r3, r1]
    588a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    588e:	00e4      	lsls	r4, r4, #3
    5890:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    5894:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    5898:	f105 0a04 	add.w	sl, r5, #4
    589c:	b2d1      	uxtb	r1, r2
    589e:	4650      	mov	r0, sl
    58a0:	4b0c      	ldr	r3, [pc, #48]	; (58d4 <adc_async_channel_conversion_done+0x58>)
    58a2:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    58a4:	4630      	mov	r0, r6
    58a6:	4b0c      	ldr	r3, [pc, #48]	; (58d8 <adc_async_channel_conversion_done+0x5c>)
    58a8:	4798      	blx	r3
    58aa:	2801      	cmp	r0, #1
    58ac:	d907      	bls.n	58be <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    58ae:	ea4f 2119 	mov.w	r1, r9, lsr #8
    58b2:	4650      	mov	r0, sl
    58b4:	4b07      	ldr	r3, [pc, #28]	; (58d4 <adc_async_channel_conversion_done+0x58>)
    58b6:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    58b8:	8aab      	ldrh	r3, [r5, #20]
    58ba:	3301      	adds	r3, #1
    58bc:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    58be:	8aab      	ldrh	r3, [r5, #20]
    58c0:	3301      	adds	r3, #1
    58c2:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    58c4:	f858 3004 	ldr.w	r3, [r8, r4]
    58c8:	b113      	cbz	r3, 58d0 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    58ca:	4639      	mov	r1, r7
    58cc:	4630      	mov	r0, r6
    58ce:	4798      	blx	r3
    58d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58d4:	000071fd 	.word	0x000071fd
    58d8:	0000759b 	.word	0x0000759b

000058dc <adc_async_init>:
{
    58dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58e0:	4689      	mov	r9, r1
    58e2:	4616      	mov	r6, r2
    58e4:	461c      	mov	r4, r3
    58e6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    58ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    58ec:	4607      	mov	r7, r0
    58ee:	b140      	cbz	r0, 5902 <adc_async_init+0x26>
    58f0:	b149      	cbz	r1, 5906 <adc_async_init+0x2a>
    58f2:	b152      	cbz	r2, 590a <adc_async_init+0x2e>
    58f4:	f1b8 0f00 	cmp.w	r8, #0
    58f8:	d009      	beq.n	590e <adc_async_init+0x32>
    58fa:	1c28      	adds	r0, r5, #0
    58fc:	bf18      	it	ne
    58fe:	2001      	movne	r0, #1
    5900:	e006      	b.n	5910 <adc_async_init+0x34>
    5902:	2000      	movs	r0, #0
    5904:	e004      	b.n	5910 <adc_async_init+0x34>
    5906:	2000      	movs	r0, #0
    5908:	e002      	b.n	5910 <adc_async_init+0x34>
    590a:	2000      	movs	r0, #0
    590c:	e000      	b.n	5910 <adc_async_init+0x34>
    590e:	2000      	movs	r0, #0
    5910:	f8df b064 	ldr.w	fp, [pc, #100]	; 5978 <adc_async_init+0x9c>
    5914:	223f      	movs	r2, #63	; 0x3f
    5916:	4659      	mov	r1, fp
    5918:	f8df a060 	ldr.w	sl, [pc, #96]	; 597c <adc_async_init+0xa0>
    591c:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    591e:	1c60      	adds	r0, r4, #1
    5920:	2240      	movs	r2, #64	; 0x40
    5922:	4659      	mov	r1, fp
    5924:	4580      	cmp	r8, r0
    5926:	bfcc      	ite	gt
    5928:	2000      	movgt	r0, #0
    592a:	2001      	movle	r0, #1
    592c:	47d0      	blx	sl
	device = &descr->device;
    592e:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    5930:	21ff      	movs	r1, #255	; 0xff
    5932:	b2da      	uxtb	r2, r3
    5934:	54b1      	strb	r1, [r6, r2]
    5936:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    5938:	b2da      	uxtb	r2, r3
    593a:	42a2      	cmp	r2, r4
    593c:	d9f9      	bls.n	5932 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    593e:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    5940:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    5944:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    5948:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    594a:	4649      	mov	r1, r9
    594c:	4638      	mov	r0, r7
    594e:	4b06      	ldr	r3, [pc, #24]	; (5968 <adc_async_init+0x8c>)
    5950:	4798      	blx	r3
	if (init_status) {
    5952:	4603      	mov	r3, r0
    5954:	b928      	cbnz	r0, 5962 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    5956:	4a05      	ldr	r2, [pc, #20]	; (596c <adc_async_init+0x90>)
    5958:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    595a:	4a05      	ldr	r2, [pc, #20]	; (5970 <adc_async_init+0x94>)
    595c:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    595e:	4a05      	ldr	r2, [pc, #20]	; (5974 <adc_async_init+0x98>)
    5960:	607a      	str	r2, [r7, #4]
}
    5962:	4618      	mov	r0, r3
    5964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5968:	00007469 	.word	0x00007469
    596c:	0000587d 	.word	0x0000587d
    5970:	00005869 	.word	0x00005869
    5974:	00005873 	.word	0x00005873
    5978:	0000e9cc 	.word	0x0000e9cc
    597c:	000070c1 	.word	0x000070c1

00005980 <adc_async_register_channel_buffer>:
{
    5980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5984:	460e      	mov	r6, r1
    5986:	4617      	mov	r7, r2
    5988:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    598a:	4605      	mov	r5, r0
    598c:	2800      	cmp	r0, #0
    598e:	d040      	beq.n	5a12 <adc_async_register_channel_buffer+0x92>
    5990:	2a00      	cmp	r2, #0
    5992:	d040      	beq.n	5a16 <adc_async_register_channel_buffer+0x96>
    5994:	1c18      	adds	r0, r3, #0
    5996:	bf18      	it	ne
    5998:	2001      	movne	r0, #1
    599a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5a34 <adc_async_register_channel_buffer+0xb4>
    599e:	2266      	movs	r2, #102	; 0x66
    59a0:	4649      	mov	r1, r9
    59a2:	4c22      	ldr	r4, [pc, #136]	; (5a2c <adc_async_register_channel_buffer+0xac>)
    59a4:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    59a6:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    59aa:	2267      	movs	r2, #103	; 0x67
    59ac:	4649      	mov	r1, r9
    59ae:	42b0      	cmp	r0, r6
    59b0:	bf34      	ite	cc
    59b2:	2000      	movcc	r0, #0
    59b4:	2001      	movcs	r0, #1
    59b6:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    59b8:	6a29      	ldr	r1, [r5, #32]
    59ba:	5d8b      	ldrb	r3, [r1, r6]
    59bc:	2bff      	cmp	r3, #255	; 0xff
    59be:	d12c      	bne.n	5a1a <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    59c0:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    59c4:	2300      	movs	r3, #0
    59c6:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    59c8:	b2da      	uxtb	r2, r3
    59ca:	5c8a      	ldrb	r2, [r1, r2]
    59cc:	2aff      	cmp	r2, #255	; 0xff
			index++;
    59ce:	bf1c      	itt	ne
    59d0:	3401      	addne	r4, #1
    59d2:	b2e4      	uxtbne	r4, r4
    59d4:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    59d6:	b2da      	uxtb	r2, r3
    59d8:	4282      	cmp	r2, r0
    59da:	d9f5      	bls.n	59c8 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    59dc:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    59e0:	42a3      	cmp	r3, r4
    59e2:	d31d      	bcc.n	5a20 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    59e4:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    59e8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    59ec:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    59ee:	4448      	add	r0, r9
    59f0:	4642      	mov	r2, r8
    59f2:	4639      	mov	r1, r7
    59f4:	3004      	adds	r0, #4
    59f6:	4b0e      	ldr	r3, [pc, #56]	; (5a30 <adc_async_register_channel_buffer+0xb0>)
    59f8:	4798      	blx	r3
    59fa:	4602      	mov	r2, r0
    59fc:	b998      	cbnz	r0, 5a26 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    59fe:	6a2b      	ldr	r3, [r5, #32]
    5a00:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    5a02:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5a04:	4499      	add	r9, r3
    5a06:	2300      	movs	r3, #0
    5a08:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    5a0c:	4610      	mov	r0, r2
    5a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    5a12:	2000      	movs	r0, #0
    5a14:	e7c1      	b.n	599a <adc_async_register_channel_buffer+0x1a>
    5a16:	2000      	movs	r0, #0
    5a18:	e7bf      	b.n	599a <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    5a1a:	f06f 020c 	mvn.w	r2, #12
    5a1e:	e7f5      	b.n	5a0c <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    5a20:	f06f 021b 	mvn.w	r2, #27
    5a24:	e7f2      	b.n	5a0c <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    5a26:	f06f 020c 	mvn.w	r2, #12
    5a2a:	e7ef      	b.n	5a0c <adc_async_register_channel_buffer+0x8c>
    5a2c:	000070c1 	.word	0x000070c1
    5a30:	00007169 	.word	0x00007169
    5a34:	0000e9cc 	.word	0x0000e9cc

00005a38 <adc_async_enable_channel>:
{
    5a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a3a:	460d      	mov	r5, r1
	ASSERT(descr);
    5a3c:	4f0b      	ldr	r7, [pc, #44]	; (5a6c <adc_async_enable_channel+0x34>)
    5a3e:	4604      	mov	r4, r0
    5a40:	2283      	movs	r2, #131	; 0x83
    5a42:	4639      	mov	r1, r7
    5a44:	3000      	adds	r0, #0
    5a46:	bf18      	it	ne
    5a48:	2001      	movne	r0, #1
    5a4a:	4e09      	ldr	r6, [pc, #36]	; (5a70 <adc_async_enable_channel+0x38>)
    5a4c:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    5a4e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    5a52:	2284      	movs	r2, #132	; 0x84
    5a54:	4639      	mov	r1, r7
    5a56:	42a8      	cmp	r0, r5
    5a58:	bf34      	ite	cc
    5a5a:	2000      	movcc	r0, #0
    5a5c:	2001      	movcs	r0, #1
    5a5e:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    5a60:	4629      	mov	r1, r5
    5a62:	4620      	mov	r0, r4
    5a64:	4b03      	ldr	r3, [pc, #12]	; (5a74 <adc_async_enable_channel+0x3c>)
    5a66:	4798      	blx	r3
}
    5a68:	2000      	movs	r0, #0
    5a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a6c:	0000e9cc 	.word	0x0000e9cc
    5a70:	000070c1 	.word	0x000070c1
    5a74:	00007585 	.word	0x00007585

00005a78 <adc_async_register_callback>:
{
    5a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a7c:	460e      	mov	r6, r1
    5a7e:	4614      	mov	r4, r2
    5a80:	4699      	mov	r9, r3
	ASSERT(descr);
    5a82:	f8df 8070 	ldr.w	r8, [pc, #112]	; 5af4 <adc_async_register_callback+0x7c>
    5a86:	4605      	mov	r5, r0
    5a88:	229c      	movs	r2, #156	; 0x9c
    5a8a:	4641      	mov	r1, r8
    5a8c:	3000      	adds	r0, #0
    5a8e:	bf18      	it	ne
    5a90:	2001      	movne	r0, #1
    5a92:	4f16      	ldr	r7, [pc, #88]	; (5aec <adc_async_register_callback+0x74>)
    5a94:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    5a96:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5a9a:	229d      	movs	r2, #157	; 0x9d
    5a9c:	4641      	mov	r1, r8
    5a9e:	42b0      	cmp	r0, r6
    5aa0:	bf34      	ite	cc
    5aa2:	2000      	movcc	r0, #0
    5aa4:	2001      	movcs	r0, #1
    5aa6:	47b8      	blx	r7
	switch (type) {
    5aa8:	2c01      	cmp	r4, #1
    5aaa:	d019      	beq.n	5ae0 <adc_async_register_callback+0x68>
    5aac:	b12c      	cbz	r4, 5aba <adc_async_register_callback+0x42>
    5aae:	2c02      	cmp	r4, #2
    5ab0:	d019      	beq.n	5ae6 <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    5ab2:	f06f 000c 	mvn.w	r0, #12
}
    5ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    5aba:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    5abc:	5d9b      	ldrb	r3, [r3, r6]
    5abe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5ac0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5ac4:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    5ac8:	f119 0300 	adds.w	r3, r9, #0
    5acc:	bf18      	it	ne
    5ace:	2301      	movne	r3, #1
    5ad0:	4622      	mov	r2, r4
    5ad2:	4631      	mov	r1, r6
    5ad4:	4628      	mov	r0, r5
    5ad6:	4c06      	ldr	r4, [pc, #24]	; (5af0 <adc_async_register_callback+0x78>)
    5ad8:	47a0      	blx	r4
	return ERR_NONE;
    5ada:	2000      	movs	r0, #0
    5adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    5ae0:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    5ae4:	e7f0      	b.n	5ac8 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    5ae6:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    5aea:	e7ed      	b.n	5ac8 <adc_async_register_callback+0x50>
    5aec:	000070c1 	.word	0x000070c1
    5af0:	000075c3 	.word	0x000075c3
    5af4:	0000e9cc 	.word	0x0000e9cc

00005af8 <adc_async_read_channel>:
{
    5af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5afc:	b083      	sub	sp, #12
    5afe:	4688      	mov	r8, r1
    5b00:	4691      	mov	r9, r2
    5b02:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    5b04:	4604      	mov	r4, r0
    5b06:	2800      	cmp	r0, #0
    5b08:	d04f      	beq.n	5baa <adc_async_read_channel+0xb2>
    5b0a:	2a00      	cmp	r2, #0
    5b0c:	d04f      	beq.n	5bae <adc_async_read_channel+0xb6>
    5b0e:	1c18      	adds	r0, r3, #0
    5b10:	bf18      	it	ne
    5b12:	2001      	movne	r0, #1
    5b14:	4f29      	ldr	r7, [pc, #164]	; (5bbc <adc_async_read_channel+0xc4>)
    5b16:	22bc      	movs	r2, #188	; 0xbc
    5b18:	4639      	mov	r1, r7
    5b1a:	4e29      	ldr	r6, [pc, #164]	; (5bc0 <adc_async_read_channel+0xc8>)
    5b1c:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    5b1e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    5b22:	22bd      	movs	r2, #189	; 0xbd
    5b24:	4639      	mov	r1, r7
    5b26:	4540      	cmp	r0, r8
    5b28:	bf34      	ite	cc
    5b2a:	2000      	movcc	r0, #0
    5b2c:	2001      	movcs	r0, #1
    5b2e:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    5b30:	4620      	mov	r0, r4
    5b32:	4b24      	ldr	r3, [pc, #144]	; (5bc4 <adc_async_read_channel+0xcc>)
    5b34:	4798      	blx	r3
	ASSERT(!(length % data_size));
    5b36:	fb95 f3f0 	sdiv	r3, r5, r0
    5b3a:	fb03 5010 	mls	r0, r3, r0, r5
    5b3e:	22bf      	movs	r2, #191	; 0xbf
    5b40:	4639      	mov	r1, r7
    5b42:	fab0 f080 	clz	r0, r0
    5b46:	0940      	lsrs	r0, r0, #5
    5b48:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    5b4a:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    5b4c:	f813 b008 	ldrb.w	fp, [r3, r8]
    5b50:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    5b54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5b56:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    5b5a:	a801      	add	r0, sp, #4
    5b5c:	4b1a      	ldr	r3, [pc, #104]	; (5bc8 <adc_async_read_channel+0xd0>)
    5b5e:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    5b60:	f10b 0a04 	add.w	sl, fp, #4
    5b64:	4650      	mov	r0, sl
    5b66:	4b19      	ldr	r3, [pc, #100]	; (5bcc <adc_async_read_channel+0xd4>)
    5b68:	4798      	blx	r3
    5b6a:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    5b6c:	a801      	add	r0, sp, #4
    5b6e:	4b18      	ldr	r3, [pc, #96]	; (5bd0 <adc_async_read_channel+0xd8>)
    5b70:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    5b72:	f1b8 0f00 	cmp.w	r8, #0
    5b76:	d01c      	beq.n	5bb2 <adc_async_read_channel+0xba>
    5b78:	b1ed      	cbz	r5, 5bb6 <adc_async_read_channel+0xbe>
    5b7a:	3d01      	subs	r5, #1
    5b7c:	b2ad      	uxth	r5, r5
    5b7e:	3502      	adds	r5, #2
    5b80:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    5b82:	4f14      	ldr	r7, [pc, #80]	; (5bd4 <adc_async_read_channel+0xdc>)
    5b84:	b2a6      	uxth	r6, r4
    5b86:	1e61      	subs	r1, r4, #1
    5b88:	4449      	add	r1, r9
    5b8a:	4650      	mov	r0, sl
    5b8c:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    5b8e:	4544      	cmp	r4, r8
    5b90:	d002      	beq.n	5b98 <adc_async_read_channel+0xa0>
    5b92:	3401      	adds	r4, #1
    5b94:	42ac      	cmp	r4, r5
    5b96:	d1f5      	bne.n	5b84 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    5b98:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    5b9c:	1b9b      	subs	r3, r3, r6
    5b9e:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    5ba2:	4630      	mov	r0, r6
    5ba4:	b003      	add	sp, #12
    5ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    5baa:	2000      	movs	r0, #0
    5bac:	e7b2      	b.n	5b14 <adc_async_read_channel+0x1c>
    5bae:	2000      	movs	r0, #0
    5bb0:	e7b0      	b.n	5b14 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    5bb2:	2600      	movs	r6, #0
    5bb4:	e7f0      	b.n	5b98 <adc_async_read_channel+0xa0>
    5bb6:	2600      	movs	r6, #0
    5bb8:	e7ee      	b.n	5b98 <adc_async_read_channel+0xa0>
    5bba:	bf00      	nop
    5bbc:	0000e9cc 	.word	0x0000e9cc
    5bc0:	000070c1 	.word	0x000070c1
    5bc4:	0000759b 	.word	0x0000759b
    5bc8:	00005c01 	.word	0x00005c01
    5bcc:	0000723d 	.word	0x0000723d
    5bd0:	00005c0f 	.word	0x00005c0f
    5bd4:	000071b9 	.word	0x000071b9

00005bd8 <adc_async_start_conversion>:
{
    5bd8:	b510      	push	{r4, lr}
	ASSERT(descr);
    5bda:	4604      	mov	r4, r0
    5bdc:	22d6      	movs	r2, #214	; 0xd6
    5bde:	4905      	ldr	r1, [pc, #20]	; (5bf4 <adc_async_start_conversion+0x1c>)
    5be0:	3000      	adds	r0, #0
    5be2:	bf18      	it	ne
    5be4:	2001      	movne	r0, #1
    5be6:	4b04      	ldr	r3, [pc, #16]	; (5bf8 <adc_async_start_conversion+0x20>)
    5be8:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    5bea:	4620      	mov	r0, r4
    5bec:	4b03      	ldr	r3, [pc, #12]	; (5bfc <adc_async_start_conversion+0x24>)
    5bee:	4798      	blx	r3
}
    5bf0:	2000      	movs	r0, #0
    5bf2:	bd10      	pop	{r4, pc}
    5bf4:	0000e9cc 	.word	0x0000e9cc
    5bf8:	000070c1 	.word	0x000070c1
    5bfc:	000075ad 	.word	0x000075ad

00005c00 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    5c00:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    5c04:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5c06:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    5c08:	f3bf 8f5f 	dmb	sy
    5c0c:	4770      	bx	lr

00005c0e <atomic_leave_critical>:
    5c0e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    5c12:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5c14:	f383 8810 	msr	PRIMASK, r3
    5c18:	4770      	bx	lr
	...

00005c1c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    5c1c:	b538      	push	{r3, r4, r5, lr}
    5c1e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    5c20:	4605      	mov	r5, r0
    5c22:	b158      	cbz	r0, 5c3c <crc_sync_init+0x20>
    5c24:	1c08      	adds	r0, r1, #0
    5c26:	bf18      	it	ne
    5c28:	2001      	movne	r0, #1
    5c2a:	222b      	movs	r2, #43	; 0x2b
    5c2c:	4904      	ldr	r1, [pc, #16]	; (5c40 <crc_sync_init+0x24>)
    5c2e:	4b05      	ldr	r3, [pc, #20]	; (5c44 <crc_sync_init+0x28>)
    5c30:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    5c32:	4621      	mov	r1, r4
    5c34:	4628      	mov	r0, r5
    5c36:	4b04      	ldr	r3, [pc, #16]	; (5c48 <crc_sync_init+0x2c>)
    5c38:	4798      	blx	r3
}
    5c3a:	bd38      	pop	{r3, r4, r5, pc}
    5c3c:	2000      	movs	r0, #0
    5c3e:	e7f4      	b.n	5c2a <crc_sync_init+0xe>
    5c40:	0000e9e8 	.word	0x0000e9e8
    5c44:	000070c1 	.word	0x000070c1
    5c48:	000079ad 	.word	0x000079ad

00005c4c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    5c4c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    5c4e:	4b02      	ldr	r3, [pc, #8]	; (5c58 <delay_init+0xc>)
    5c50:	6018      	str	r0, [r3, #0]
    5c52:	4b02      	ldr	r3, [pc, #8]	; (5c5c <delay_init+0x10>)
    5c54:	4798      	blx	r3
    5c56:	bd08      	pop	{r3, pc}
    5c58:	200006d0 	.word	0x200006d0
    5c5c:	000093e1 	.word	0x000093e1

00005c60 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    5c60:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    5c62:	4b04      	ldr	r3, [pc, #16]	; (5c74 <delay_us+0x14>)
    5c64:	681c      	ldr	r4, [r3, #0]
    5c66:	4b04      	ldr	r3, [pc, #16]	; (5c78 <delay_us+0x18>)
    5c68:	4798      	blx	r3
    5c6a:	4601      	mov	r1, r0
    5c6c:	4620      	mov	r0, r4
    5c6e:	4b03      	ldr	r3, [pc, #12]	; (5c7c <delay_us+0x1c>)
    5c70:	4798      	blx	r3
    5c72:	bd10      	pop	{r4, pc}
    5c74:	200006d0 	.word	0x200006d0
    5c78:	00007671 	.word	0x00007671
    5c7c:	000093f5 	.word	0x000093f5

00005c80 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    5c80:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    5c82:	4b04      	ldr	r3, [pc, #16]	; (5c94 <delay_ms+0x14>)
    5c84:	681c      	ldr	r4, [r3, #0]
    5c86:	4b04      	ldr	r3, [pc, #16]	; (5c98 <delay_ms+0x18>)
    5c88:	4798      	blx	r3
    5c8a:	4601      	mov	r1, r0
    5c8c:	4620      	mov	r0, r4
    5c8e:	4b03      	ldr	r3, [pc, #12]	; (5c9c <delay_ms+0x1c>)
    5c90:	4798      	blx	r3
    5c92:	bd10      	pop	{r4, pc}
    5c94:	200006d0 	.word	0x200006d0
    5c98:	00007679 	.word	0x00007679
    5c9c:	000093f5 	.word	0x000093f5

00005ca0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    5ca0:	b508      	push	{r3, lr}
	return _event_system_init();
    5ca2:	4b01      	ldr	r3, [pc, #4]	; (5ca8 <event_system_init+0x8>)
    5ca4:	4798      	blx	r3
}
    5ca6:	bd08      	pop	{r3, pc}
    5ca8:	000079b5 	.word	0x000079b5

00005cac <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    5cac:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    5cae:	6943      	ldr	r3, [r0, #20]
    5cb0:	b103      	cbz	r3, 5cb4 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    5cb2:	4798      	blx	r3
    5cb4:	bd08      	pop	{r3, pc}

00005cb6 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    5cb6:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    5cb8:	6983      	ldr	r3, [r0, #24]
    5cba:	b103      	cbz	r3, 5cbe <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    5cbc:	4798      	blx	r3
    5cbe:	bd08      	pop	{r3, pc}

00005cc0 <flash_init>:
{
    5cc0:	b538      	push	{r3, r4, r5, lr}
    5cc2:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    5cc4:	4604      	mov	r4, r0
    5cc6:	b190      	cbz	r0, 5cee <flash_init+0x2e>
    5cc8:	1c08      	adds	r0, r1, #0
    5cca:	bf18      	it	ne
    5ccc:	2001      	movne	r0, #1
    5cce:	2238      	movs	r2, #56	; 0x38
    5cd0:	4908      	ldr	r1, [pc, #32]	; (5cf4 <flash_init+0x34>)
    5cd2:	4b09      	ldr	r3, [pc, #36]	; (5cf8 <flash_init+0x38>)
    5cd4:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    5cd6:	4629      	mov	r1, r5
    5cd8:	4620      	mov	r0, r4
    5cda:	4b08      	ldr	r3, [pc, #32]	; (5cfc <flash_init+0x3c>)
    5cdc:	4798      	blx	r3
	if (rc) {
    5cde:	4603      	mov	r3, r0
    5ce0:	b918      	cbnz	r0, 5cea <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    5ce2:	4a07      	ldr	r2, [pc, #28]	; (5d00 <flash_init+0x40>)
    5ce4:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    5ce6:	4a07      	ldr	r2, [pc, #28]	; (5d04 <flash_init+0x44>)
    5ce8:	6062      	str	r2, [r4, #4]
}
    5cea:	4618      	mov	r0, r3
    5cec:	bd38      	pop	{r3, r4, r5, pc}
    5cee:	2000      	movs	r0, #0
    5cf0:	e7ed      	b.n	5cce <flash_init+0xe>
    5cf2:	bf00      	nop
    5cf4:	0000ea04 	.word	0x0000ea04
    5cf8:	000070c1 	.word	0x000070c1
    5cfc:	00007ac1 	.word	0x00007ac1
    5d00:	00005cad 	.word	0x00005cad
    5d04:	00005cb7 	.word	0x00005cb7

00005d08 <flash_read>:
{
    5d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5d0c:	460d      	mov	r5, r1
    5d0e:	4690      	mov	r8, r2
    5d10:	461e      	mov	r6, r3
	ASSERT(flash && buffer && length);
    5d12:	4604      	mov	r4, r0
    5d14:	b1f0      	cbz	r0, 5d54 <flash_read+0x4c>
    5d16:	b1fa      	cbz	r2, 5d58 <flash_read+0x50>
    5d18:	b343      	cbz	r3, 5d6c <flash_read+0x64>
    5d1a:	2001      	movs	r0, #1
    5d1c:	2256      	movs	r2, #86	; 0x56
    5d1e:	491e      	ldr	r1, [pc, #120]	; (5d98 <flash_read+0x90>)
    5d20:	4b1e      	ldr	r3, [pc, #120]	; (5d9c <flash_read+0x94>)
    5d22:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    5d24:	46a1      	mov	r9, r4
    5d26:	4620      	mov	r0, r4
    5d28:	4b1d      	ldr	r3, [pc, #116]	; (5da0 <flash_read+0x98>)
    5d2a:	4798      	blx	r3
    5d2c:	4607      	mov	r7, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    5d2e:	4620      	mov	r0, r4
    5d30:	4b1c      	ldr	r3, [pc, #112]	; (5da4 <flash_read+0x9c>)
    5d32:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    5d34:	fb00 f007 	mul.w	r0, r0, r7
    5d38:	42a8      	cmp	r0, r5
    5d3a:	d30f      	bcc.n	5d5c <flash_read+0x54>
    5d3c:	1973      	adds	r3, r6, r5
    5d3e:	4298      	cmp	r0, r3
    5d40:	d310      	bcc.n	5d64 <flash_read+0x5c>
	_flash_read(&flash->dev, src_addr, buffer, length);
    5d42:	4633      	mov	r3, r6
    5d44:	4642      	mov	r2, r8
    5d46:	4629      	mov	r1, r5
    5d48:	4648      	mov	r0, r9
    5d4a:	4c17      	ldr	r4, [pc, #92]	; (5da8 <flash_read+0xa0>)
    5d4c:	47a0      	blx	r4
	return ERR_NONE;
    5d4e:	2000      	movs	r0, #0
    5d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    5d54:	2000      	movs	r0, #0
    5d56:	e7e1      	b.n	5d1c <flash_read+0x14>
    5d58:	2000      	movs	r0, #0
    5d5a:	e7df      	b.n	5d1c <flash_read+0x14>
		return ERR_BAD_ADDRESS;
    5d5c:	f06f 000d 	mvn.w	r0, #13
    5d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d64:	f06f 000d 	mvn.w	r0, #13
    5d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    5d6c:	2256      	movs	r2, #86	; 0x56
    5d6e:	490a      	ldr	r1, [pc, #40]	; (5d98 <flash_read+0x90>)
    5d70:	2000      	movs	r0, #0
    5d72:	4b0a      	ldr	r3, [pc, #40]	; (5d9c <flash_read+0x94>)
    5d74:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    5d76:	46a1      	mov	r9, r4
    5d78:	4620      	mov	r0, r4
    5d7a:	4b09      	ldr	r3, [pc, #36]	; (5da0 <flash_read+0x98>)
    5d7c:	4798      	blx	r3
    5d7e:	4607      	mov	r7, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    5d80:	4620      	mov	r0, r4
    5d82:	4b08      	ldr	r3, [pc, #32]	; (5da4 <flash_read+0x9c>)
    5d84:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    5d86:	fb00 f007 	mul.w	r0, r0, r7
    5d8a:	4285      	cmp	r5, r0
    5d8c:	d9d9      	bls.n	5d42 <flash_read+0x3a>
		return ERR_BAD_ADDRESS;
    5d8e:	f06f 000d 	mvn.w	r0, #13
    5d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d96:	bf00      	nop
    5d98:	0000ea04 	.word	0x0000ea04
    5d9c:	000070c1 	.word	0x000070c1
    5da0:	00007b39 	.word	0x00007b39
    5da4:	00007b3f 	.word	0x00007b3f
    5da8:	00007b47 	.word	0x00007b47

00005dac <flash_get_page_size>:
{
    5dac:	b510      	push	{r4, lr}
	ASSERT(flash);
    5dae:	4604      	mov	r4, r0
    5db0:	22f7      	movs	r2, #247	; 0xf7
    5db2:	4905      	ldr	r1, [pc, #20]	; (5dc8 <flash_get_page_size+0x1c>)
    5db4:	3000      	adds	r0, #0
    5db6:	bf18      	it	ne
    5db8:	2001      	movne	r0, #1
    5dba:	4b04      	ldr	r3, [pc, #16]	; (5dcc <flash_get_page_size+0x20>)
    5dbc:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
    5dbe:	4620      	mov	r0, r4
    5dc0:	4b03      	ldr	r3, [pc, #12]	; (5dd0 <flash_get_page_size+0x24>)
    5dc2:	4798      	blx	r3
}
    5dc4:	bd10      	pop	{r4, pc}
    5dc6:	bf00      	nop
    5dc8:	0000ea04 	.word	0x0000ea04
    5dcc:	000070c1 	.word	0x000070c1
    5dd0:	00007b39 	.word	0x00007b39

00005dd4 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5dd4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5dd6:	8843      	ldrh	r3, [r0, #2]
    5dd8:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ddc:	d102      	bne.n	5de4 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    5dde:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5de0:	b103      	cbz	r3, 5de4 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    5de2:	4798      	blx	r3
    5de4:	bd08      	pop	{r3, pc}

00005de6 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5de6:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5de8:	8843      	ldrh	r3, [r0, #2]
    5dea:	f413 7f80 	tst.w	r3, #256	; 0x100
    5dee:	d102      	bne.n	5df6 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    5df0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5df2:	b103      	cbz	r3, 5df6 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    5df4:	4798      	blx	r3
    5df6:	bd08      	pop	{r3, pc}

00005df8 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    5df8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    5dfa:	8843      	ldrh	r3, [r0, #2]
    5dfc:	f413 7f80 	tst.w	r3, #256	; 0x100
    5e00:	d102      	bne.n	5e08 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    5e02:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5e04:	b103      	cbz	r3, 5e08 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    5e06:	4798      	blx	r3
    5e08:	bd08      	pop	{r3, pc}
	...

00005e0c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    5e0c:	b510      	push	{r4, lr}
    5e0e:	b084      	sub	sp, #16
    5e10:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    5e12:	8a83      	ldrh	r3, [r0, #20]
    5e14:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    5e18:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    5e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    5e1e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    5e22:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5e24:	a901      	add	r1, sp, #4
    5e26:	3828      	subs	r0, #40	; 0x28
    5e28:	4b03      	ldr	r3, [pc, #12]	; (5e38 <i2c_m_async_write+0x2c>)
    5e2a:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    5e2c:	2800      	cmp	r0, #0
    5e2e:	bf08      	it	eq
    5e30:	4620      	moveq	r0, r4
    5e32:	b004      	add	sp, #16
    5e34:	bd10      	pop	{r4, pc}
    5e36:	bf00      	nop
    5e38:	00008931 	.word	0x00008931

00005e3c <i2c_m_async_read>:
{
    5e3c:	b510      	push	{r4, lr}
    5e3e:	b084      	sub	sp, #16
    5e40:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    5e42:	8a83      	ldrh	r3, [r0, #20]
    5e44:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    5e48:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    5e4a:	f248 0301 	movw	r3, #32769	; 0x8001
    5e4e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    5e52:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5e54:	a901      	add	r1, sp, #4
    5e56:	3828      	subs	r0, #40	; 0x28
    5e58:	4b03      	ldr	r3, [pc, #12]	; (5e68 <i2c_m_async_read+0x2c>)
    5e5a:	4798      	blx	r3
}
    5e5c:	2800      	cmp	r0, #0
    5e5e:	bf08      	it	eq
    5e60:	4620      	moveq	r0, r4
    5e62:	b004      	add	sp, #16
    5e64:	bd10      	pop	{r4, pc}
    5e66:	bf00      	nop
    5e68:	00008931 	.word	0x00008931

00005e6c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    5e6c:	b570      	push	{r4, r5, r6, lr}
    5e6e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    5e70:	4604      	mov	r4, r0
    5e72:	2289      	movs	r2, #137	; 0x89
    5e74:	490f      	ldr	r1, [pc, #60]	; (5eb4 <i2c_m_async_init+0x48>)
    5e76:	3000      	adds	r0, #0
    5e78:	bf18      	it	ne
    5e7a:	2001      	movne	r0, #1
    5e7c:	4b0e      	ldr	r3, [pc, #56]	; (5eb8 <i2c_m_async_init+0x4c>)
    5e7e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    5e80:	4629      	mov	r1, r5
    5e82:	4620      	mov	r0, r4
    5e84:	4b0d      	ldr	r3, [pc, #52]	; (5ebc <i2c_m_async_init+0x50>)
    5e86:	4798      	blx	r3
	if (init_status) {
    5e88:	4605      	mov	r5, r0
    5e8a:	b108      	cbz	r0, 5e90 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    5e8c:	4628      	mov	r0, r5
    5e8e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    5e90:	4b0b      	ldr	r3, [pc, #44]	; (5ec0 <i2c_m_async_init+0x54>)
    5e92:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    5e94:	4b0b      	ldr	r3, [pc, #44]	; (5ec4 <i2c_m_async_init+0x58>)
    5e96:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    5e98:	4a0b      	ldr	r2, [pc, #44]	; (5ec8 <i2c_m_async_init+0x5c>)
    5e9a:	2101      	movs	r1, #1
    5e9c:	4620      	mov	r0, r4
    5e9e:	4e0b      	ldr	r6, [pc, #44]	; (5ecc <i2c_m_async_init+0x60>)
    5ea0:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    5ea2:	4a0b      	ldr	r2, [pc, #44]	; (5ed0 <i2c_m_async_init+0x64>)
    5ea4:	2102      	movs	r1, #2
    5ea6:	4620      	mov	r0, r4
    5ea8:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    5eaa:	4a0a      	ldr	r2, [pc, #40]	; (5ed4 <i2c_m_async_init+0x68>)
    5eac:	2100      	movs	r1, #0
    5eae:	4620      	mov	r0, r4
    5eb0:	47b0      	blx	r6
	return ERR_NONE;
    5eb2:	e7eb      	b.n	5e8c <i2c_m_async_init+0x20>
    5eb4:	0000ea1c 	.word	0x0000ea1c
    5eb8:	000070c1 	.word	0x000070c1
    5ebc:	000088b1 	.word	0x000088b1
    5ec0:	00005e3d 	.word	0x00005e3d
    5ec4:	00005e0d 	.word	0x00005e0d
    5ec8:	00005dd5 	.word	0x00005dd5
    5ecc:	00008a61 	.word	0x00008a61
    5ed0:	00005de7 	.word	0x00005de7
    5ed4:	00005df9 	.word	0x00005df9

00005ed8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5ed8:	b570      	push	{r4, r5, r6, lr}
    5eda:	460d      	mov	r5, r1
    5edc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    5ede:	4604      	mov	r4, r0
    5ee0:	b160      	cbz	r0, 5efc <io_write+0x24>
    5ee2:	1c08      	adds	r0, r1, #0
    5ee4:	bf18      	it	ne
    5ee6:	2001      	movne	r0, #1
    5ee8:	2234      	movs	r2, #52	; 0x34
    5eea:	4905      	ldr	r1, [pc, #20]	; (5f00 <io_write+0x28>)
    5eec:	4b05      	ldr	r3, [pc, #20]	; (5f04 <io_write+0x2c>)
    5eee:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    5ef0:	6823      	ldr	r3, [r4, #0]
    5ef2:	4632      	mov	r2, r6
    5ef4:	4629      	mov	r1, r5
    5ef6:	4620      	mov	r0, r4
    5ef8:	4798      	blx	r3
}
    5efa:	bd70      	pop	{r4, r5, r6, pc}
    5efc:	2000      	movs	r0, #0
    5efe:	e7f3      	b.n	5ee8 <io_write+0x10>
    5f00:	0000ea3c 	.word	0x0000ea3c
    5f04:	000070c1 	.word	0x000070c1

00005f08 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    5f08:	b570      	push	{r4, r5, r6, lr}
    5f0a:	460d      	mov	r5, r1
    5f0c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    5f0e:	4604      	mov	r4, r0
    5f10:	b160      	cbz	r0, 5f2c <io_read+0x24>
    5f12:	1c08      	adds	r0, r1, #0
    5f14:	bf18      	it	ne
    5f16:	2001      	movne	r0, #1
    5f18:	223d      	movs	r2, #61	; 0x3d
    5f1a:	4905      	ldr	r1, [pc, #20]	; (5f30 <io_read+0x28>)
    5f1c:	4b05      	ldr	r3, [pc, #20]	; (5f34 <io_read+0x2c>)
    5f1e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    5f20:	6863      	ldr	r3, [r4, #4]
    5f22:	4632      	mov	r2, r6
    5f24:	4629      	mov	r1, r5
    5f26:	4620      	mov	r0, r4
    5f28:	4798      	blx	r3
}
    5f2a:	bd70      	pop	{r4, r5, r6, pc}
    5f2c:	2000      	movs	r0, #0
    5f2e:	e7f3      	b.n	5f18 <io_read+0x10>
    5f30:	0000ea3c 	.word	0x0000ea3c
    5f34:	000070c1 	.word	0x000070c1

00005f38 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    5f38:	b538      	push	{r3, r4, r5, lr}
    5f3a:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    5f3c:	4605      	mov	r5, r0
    5f3e:	b158      	cbz	r0, 5f58 <qspi_dma_init+0x20>
    5f40:	1c08      	adds	r0, r1, #0
    5f42:	bf18      	it	ne
    5f44:	2001      	movne	r0, #1
    5f46:	2231      	movs	r2, #49	; 0x31
    5f48:	4904      	ldr	r1, [pc, #16]	; (5f5c <qspi_dma_init+0x24>)
    5f4a:	4b05      	ldr	r3, [pc, #20]	; (5f60 <qspi_dma_init+0x28>)
    5f4c:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    5f4e:	4621      	mov	r1, r4
    5f50:	4628      	mov	r0, r5
    5f52:	4b04      	ldr	r3, [pc, #16]	; (5f64 <qspi_dma_init+0x2c>)
    5f54:	4798      	blx	r3
}
    5f56:	bd38      	pop	{r3, r4, r5, pc}
    5f58:	2000      	movs	r0, #0
    5f5a:	e7f4      	b.n	5f46 <qspi_dma_init+0xe>
    5f5c:	0000ea50 	.word	0x0000ea50
    5f60:	000070c1 	.word	0x000070c1
    5f64:	00007d15 	.word	0x00007d15

00005f68 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f6a:	460f      	mov	r7, r1
    5f6c:	4616      	mov	r6, r2
	ASSERT(io);
    5f6e:	4604      	mov	r4, r0
    5f70:	f240 1227 	movw	r2, #295	; 0x127
    5f74:	4909      	ldr	r1, [pc, #36]	; (5f9c <_spi_m_async_io_write+0x34>)
    5f76:	3000      	adds	r0, #0
    5f78:	bf18      	it	ne
    5f7a:	2001      	movne	r0, #1
    5f7c:	4b08      	ldr	r3, [pc, #32]	; (5fa0 <_spi_m_async_io_write+0x38>)
    5f7e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    5f80:	2500      	movs	r5, #0
    5f82:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    5f84:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    5f86:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    5f88:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5f8a:	2310      	movs	r3, #16
    5f8c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    5f8e:	2101      	movs	r1, #1
    5f90:	f1a4 0020 	sub.w	r0, r4, #32
    5f94:	4b03      	ldr	r3, [pc, #12]	; (5fa4 <_spi_m_async_io_write+0x3c>)
    5f96:	4798      	blx	r3

	return ERR_NONE;
}
    5f98:	4628      	mov	r0, r5
    5f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f9c:	0000ea6c 	.word	0x0000ea6c
    5fa0:	000070c1 	.word	0x000070c1
    5fa4:	00008ef5 	.word	0x00008ef5

00005fa8 <_spi_m_async_io_read>:
{
    5fa8:	b570      	push	{r4, r5, r6, lr}
    5faa:	460d      	mov	r5, r1
    5fac:	4616      	mov	r6, r2
	ASSERT(io);
    5fae:	4604      	mov	r4, r0
    5fb0:	f240 1205 	movw	r2, #261	; 0x105
    5fb4:	490c      	ldr	r1, [pc, #48]	; (5fe8 <_spi_m_async_io_read+0x40>)
    5fb6:	3000      	adds	r0, #0
    5fb8:	bf18      	it	ne
    5fba:	2001      	movne	r0, #1
    5fbc:	4b0b      	ldr	r3, [pc, #44]	; (5fec <_spi_m_async_io_read+0x44>)
    5fbe:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    5fc0:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    5fc2:	2500      	movs	r5, #0
    5fc4:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    5fc6:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    5fc8:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5fca:	2310      	movs	r3, #16
    5fcc:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    5fce:	3c20      	subs	r4, #32
    5fd0:	2101      	movs	r1, #1
    5fd2:	4620      	mov	r0, r4
    5fd4:	4b06      	ldr	r3, [pc, #24]	; (5ff0 <_spi_m_async_io_read+0x48>)
    5fd6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    5fd8:	f240 11ff 	movw	r1, #511	; 0x1ff
    5fdc:	4620      	mov	r0, r4
    5fde:	4b05      	ldr	r3, [pc, #20]	; (5ff4 <_spi_m_async_io_read+0x4c>)
    5fe0:	4798      	blx	r3
}
    5fe2:	4628      	mov	r0, r5
    5fe4:	bd70      	pop	{r4, r5, r6, pc}
    5fe6:	bf00      	nop
    5fe8:	0000ea6c 	.word	0x0000ea6c
    5fec:	000070c1 	.word	0x000070c1
    5ff0:	00008f29 	.word	0x00008f29
    5ff4:	00008fa5 	.word	0x00008fa5

00005ff8 <_spi_dev_error>:
{
    5ff8:	b570      	push	{r4, r5, r6, lr}
    5ffa:	4604      	mov	r4, r0
    5ffc:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    5ffe:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    6000:	2100      	movs	r1, #0
    6002:	4b09      	ldr	r3, [pc, #36]	; (6028 <_spi_dev_error+0x30>)
    6004:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    6006:	2100      	movs	r1, #0
    6008:	4620      	mov	r0, r4
    600a:	4b08      	ldr	r3, [pc, #32]	; (602c <_spi_dev_error+0x34>)
    600c:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    600e:	2100      	movs	r1, #0
    6010:	4620      	mov	r0, r4
    6012:	4b07      	ldr	r3, [pc, #28]	; (6030 <_spi_dev_error+0x38>)
    6014:	4798      	blx	r3
	spi->stat = 0;
    6016:	2300      	movs	r3, #0
    6018:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    601c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    601e:	b113      	cbz	r3, 6026 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    6020:	4631      	mov	r1, r6
    6022:	4628      	mov	r0, r5
    6024:	4798      	blx	r3
    6026:	bd70      	pop	{r4, r5, r6, pc}
    6028:	00008ef5 	.word	0x00008ef5
    602c:	00008f29 	.word	0x00008f29
    6030:	00008f69 	.word	0x00008f69

00006034 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    6034:	6c02      	ldr	r2, [r0, #64]	; 0x40
    6036:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6038:	429a      	cmp	r2, r3
    603a:	d200      	bcs.n	603e <_spi_dev_complete+0xa>
    603c:	4770      	bx	lr
{
    603e:	b510      	push	{r4, lr}
    6040:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    6042:	2100      	movs	r1, #0
    6044:	4b04      	ldr	r3, [pc, #16]	; (6058 <_spi_dev_complete+0x24>)
    6046:	4798      	blx	r3
		spi->stat = 0;
    6048:	2300      	movs	r3, #0
    604a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    604e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6050:	b10b      	cbz	r3, 6056 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    6052:	1f20      	subs	r0, r4, #4
    6054:	4798      	blx	r3
    6056:	bd10      	pop	{r4, pc}
    6058:	00008f69 	.word	0x00008f69

0000605c <_spi_dev_tx>:
{
    605c:	b510      	push	{r4, lr}
    605e:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    6060:	7903      	ldrb	r3, [r0, #4]
    6062:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    6064:	6b42      	ldr	r2, [r0, #52]	; 0x34
    6066:	6c03      	ldr	r3, [r0, #64]	; 0x40
    6068:	f103 0101 	add.w	r1, r3, #1
    606c:	6401      	str	r1, [r0, #64]	; 0x40
    606e:	bf94      	ite	ls
    6070:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    6072:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    6076:	4b08      	ldr	r3, [pc, #32]	; (6098 <_spi_dev_tx+0x3c>)
    6078:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    607a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    607c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    607e:	429a      	cmp	r2, r3
    6080:	d000      	beq.n	6084 <_spi_dev_tx+0x28>
    6082:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    6084:	2100      	movs	r1, #0
    6086:	4620      	mov	r0, r4
    6088:	4b04      	ldr	r3, [pc, #16]	; (609c <_spi_dev_tx+0x40>)
    608a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    608c:	2101      	movs	r1, #1
    608e:	4620      	mov	r0, r4
    6090:	4b03      	ldr	r3, [pc, #12]	; (60a0 <_spi_dev_tx+0x44>)
    6092:	4798      	blx	r3
}
    6094:	e7f5      	b.n	6082 <_spi_dev_tx+0x26>
    6096:	bf00      	nop
    6098:	00008fa5 	.word	0x00008fa5
    609c:	00008ef5 	.word	0x00008ef5
    60a0:	00008f69 	.word	0x00008f69

000060a4 <_spi_dev_rx>:
{
    60a4:	b570      	push	{r4, r5, r6, lr}
    60a6:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    60a8:	6b85      	ldr	r5, [r0, #56]	; 0x38
    60aa:	b305      	cbz	r5, 60ee <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    60ac:	7903      	ldrb	r3, [r0, #4]
    60ae:	2b01      	cmp	r3, #1
    60b0:	d916      	bls.n	60e0 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    60b2:	6c06      	ldr	r6, [r0, #64]	; 0x40
    60b4:	1c73      	adds	r3, r6, #1
    60b6:	6403      	str	r3, [r0, #64]	; 0x40
    60b8:	4b18      	ldr	r3, [pc, #96]	; (611c <_spi_dev_rx+0x78>)
    60ba:	4798      	blx	r3
    60bc:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    60c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    60c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    60c4:	4293      	cmp	r3, r2
    60c6:	d21d      	bcs.n	6104 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    60c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    60ca:	b1b2      	cbz	r2, 60fa <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    60cc:	7921      	ldrb	r1, [r4, #4]
    60ce:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    60d0:	bf94      	ite	ls
    60d2:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    60d4:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    60d8:	4620      	mov	r0, r4
    60da:	4b11      	ldr	r3, [pc, #68]	; (6120 <_spi_dev_rx+0x7c>)
    60dc:	4798      	blx	r3
    60de:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    60e0:	6c06      	ldr	r6, [r0, #64]	; 0x40
    60e2:	1c73      	adds	r3, r6, #1
    60e4:	6403      	str	r3, [r0, #64]	; 0x40
    60e6:	4b0d      	ldr	r3, [pc, #52]	; (611c <_spi_dev_rx+0x78>)
    60e8:	4798      	blx	r3
    60ea:	55a8      	strb	r0, [r5, r6]
    60ec:	e7e8      	b.n	60c0 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    60ee:	4b0b      	ldr	r3, [pc, #44]	; (611c <_spi_dev_rx+0x78>)
    60f0:	4798      	blx	r3
		spi->xfercnt++;
    60f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    60f4:	3301      	adds	r3, #1
    60f6:	6423      	str	r3, [r4, #64]	; 0x40
    60f8:	e7e2      	b.n	60c0 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    60fa:	88e1      	ldrh	r1, [r4, #6]
    60fc:	4620      	mov	r0, r4
    60fe:	4b08      	ldr	r3, [pc, #32]	; (6120 <_spi_dev_rx+0x7c>)
    6100:	4798      	blx	r3
    6102:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    6104:	2100      	movs	r1, #0
    6106:	4620      	mov	r0, r4
    6108:	4b06      	ldr	r3, [pc, #24]	; (6124 <_spi_dev_rx+0x80>)
    610a:	4798      	blx	r3
		spi->stat = 0;
    610c:	2300      	movs	r3, #0
    610e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    6112:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6114:	b10b      	cbz	r3, 611a <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    6116:	1f20      	subs	r0, r4, #4
    6118:	4798      	blx	r3
    611a:	bd70      	pop	{r4, r5, r6, pc}
    611c:	00008fd5 	.word	0x00008fd5
    6120:	00008fa5 	.word	0x00008fa5
    6124:	00008f29 	.word	0x00008f29

00006128 <spi_m_async_init>:
{
    6128:	b570      	push	{r4, r5, r6, lr}
    612a:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    612c:	4606      	mov	r6, r0
    612e:	b330      	cbz	r0, 617e <spi_m_async_init+0x56>
    6130:	1c08      	adds	r0, r1, #0
    6132:	bf18      	it	ne
    6134:	2001      	movne	r0, #1
    6136:	22a5      	movs	r2, #165	; 0xa5
    6138:	4912      	ldr	r1, [pc, #72]	; (6184 <spi_m_async_init+0x5c>)
    613a:	4b13      	ldr	r3, [pc, #76]	; (6188 <spi_m_async_init+0x60>)
    613c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    613e:	4634      	mov	r4, r6
    6140:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    6144:	4629      	mov	r1, r5
    6146:	4620      	mov	r0, r4
    6148:	4b10      	ldr	r3, [pc, #64]	; (618c <spi_m_async_init+0x64>)
    614a:	4798      	blx	r3
	if (rc >= 0) {
    614c:	2800      	cmp	r0, #0
    614e:	db15      	blt.n	617c <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    6150:	4a0f      	ldr	r2, [pc, #60]	; (6190 <spi_m_async_init+0x68>)
    6152:	2100      	movs	r1, #0
    6154:	4620      	mov	r0, r4
    6156:	4d0f      	ldr	r5, [pc, #60]	; (6194 <spi_m_async_init+0x6c>)
    6158:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    615a:	4a0f      	ldr	r2, [pc, #60]	; (6198 <spi_m_async_init+0x70>)
    615c:	2101      	movs	r1, #1
    615e:	4620      	mov	r0, r4
    6160:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    6162:	4a0e      	ldr	r2, [pc, #56]	; (619c <spi_m_async_init+0x74>)
    6164:	2102      	movs	r1, #2
    6166:	4620      	mov	r0, r4
    6168:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    616a:	4a0d      	ldr	r2, [pc, #52]	; (61a0 <spi_m_async_init+0x78>)
    616c:	2103      	movs	r1, #3
    616e:	4620      	mov	r0, r4
    6170:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    6172:	4b0c      	ldr	r3, [pc, #48]	; (61a4 <spi_m_async_init+0x7c>)
    6174:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    6176:	4b0c      	ldr	r3, [pc, #48]	; (61a8 <spi_m_async_init+0x80>)
    6178:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    617a:	2000      	movs	r0, #0
}
    617c:	bd70      	pop	{r4, r5, r6, pc}
    617e:	2000      	movs	r0, #0
    6180:	e7d9      	b.n	6136 <spi_m_async_init+0xe>
    6182:	bf00      	nop
    6184:	0000ea6c 	.word	0x0000ea6c
    6188:	000070c1 	.word	0x000070c1
    618c:	00008ded 	.word	0x00008ded
    6190:	0000605d 	.word	0x0000605d
    6194:	00009001 	.word	0x00009001
    6198:	000060a5 	.word	0x000060a5
    619c:	00006035 	.word	0x00006035
    61a0:	00005ff9 	.word	0x00005ff9
    61a4:	00005fa9 	.word	0x00005fa9
    61a8:	00005f69 	.word	0x00005f69

000061ac <spi_m_async_enable>:
{
    61ac:	b510      	push	{r4, lr}
	ASSERT(spi);
    61ae:	4604      	mov	r4, r0
    61b0:	22c1      	movs	r2, #193	; 0xc1
    61b2:	4905      	ldr	r1, [pc, #20]	; (61c8 <spi_m_async_enable+0x1c>)
    61b4:	3000      	adds	r0, #0
    61b6:	bf18      	it	ne
    61b8:	2001      	movne	r0, #1
    61ba:	4b04      	ldr	r3, [pc, #16]	; (61cc <spi_m_async_enable+0x20>)
    61bc:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    61be:	1d20      	adds	r0, r4, #4
    61c0:	4b03      	ldr	r3, [pc, #12]	; (61d0 <spi_m_async_enable+0x24>)
    61c2:	4798      	blx	r3
    61c4:	bd10      	pop	{r4, pc}
    61c6:	bf00      	nop
    61c8:	0000ea6c 	.word	0x0000ea6c
    61cc:	000070c1 	.word	0x000070c1
    61d0:	00008e55 	.word	0x00008e55

000061d4 <spi_m_async_set_baudrate>:
{
    61d4:	b538      	push	{r3, r4, r5, lr}
    61d6:	460d      	mov	r5, r1
	ASSERT(spi);
    61d8:	4604      	mov	r4, r0
    61da:	22cf      	movs	r2, #207	; 0xcf
    61dc:	4909      	ldr	r1, [pc, #36]	; (6204 <spi_m_async_set_baudrate+0x30>)
    61de:	3000      	adds	r0, #0
    61e0:	bf18      	it	ne
    61e2:	2001      	movne	r0, #1
    61e4:	4b08      	ldr	r3, [pc, #32]	; (6208 <spi_m_async_set_baudrate+0x34>)
    61e6:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    61e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    61ec:	f013 0f10 	tst.w	r3, #16
    61f0:	d104      	bne.n	61fc <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    61f2:	4629      	mov	r1, r5
    61f4:	1d20      	adds	r0, r4, #4
    61f6:	4b05      	ldr	r3, [pc, #20]	; (620c <spi_m_async_set_baudrate+0x38>)
    61f8:	4798      	blx	r3
    61fa:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    61fc:	f06f 0003 	mvn.w	r0, #3
}
    6200:	bd38      	pop	{r3, r4, r5, pc}
    6202:	bf00      	nop
    6204:	0000ea6c 	.word	0x0000ea6c
    6208:	000070c1 	.word	0x000070c1
    620c:	00008eb9 	.word	0x00008eb9

00006210 <spi_m_async_set_mode>:
{
    6210:	b538      	push	{r3, r4, r5, lr}
    6212:	460d      	mov	r5, r1
	ASSERT(spi);
    6214:	4604      	mov	r4, r0
    6216:	22d9      	movs	r2, #217	; 0xd9
    6218:	4909      	ldr	r1, [pc, #36]	; (6240 <spi_m_async_set_mode+0x30>)
    621a:	3000      	adds	r0, #0
    621c:	bf18      	it	ne
    621e:	2001      	movne	r0, #1
    6220:	4b08      	ldr	r3, [pc, #32]	; (6244 <spi_m_async_set_mode+0x34>)
    6222:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    6224:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    6228:	f013 0f10 	tst.w	r3, #16
    622c:	d104      	bne.n	6238 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    622e:	4629      	mov	r1, r5
    6230:	1d20      	adds	r0, r4, #4
    6232:	4b05      	ldr	r3, [pc, #20]	; (6248 <spi_m_async_set_mode+0x38>)
    6234:	4798      	blx	r3
    6236:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    6238:	f06f 0003 	mvn.w	r0, #3
}
    623c:	bd38      	pop	{r3, r4, r5, pc}
    623e:	bf00      	nop
    6240:	0000ea6c 	.word	0x0000ea6c
    6244:	000070c1 	.word	0x000070c1
    6248:	00008e85 	.word	0x00008e85

0000624c <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    624e:	460d      	mov	r5, r1
    6250:	4617      	mov	r7, r2
    6252:	461e      	mov	r6, r3
	ASSERT(spi);
    6254:	4604      	mov	r4, r0
    6256:	f44f 729c 	mov.w	r2, #312	; 0x138
    625a:	4912      	ldr	r1, [pc, #72]	; (62a4 <spi_m_async_transfer+0x58>)
    625c:	3000      	adds	r0, #0
    625e:	bf18      	it	ne
    6260:	2001      	movne	r0, #1
    6262:	4b11      	ldr	r3, [pc, #68]	; (62a8 <spi_m_async_transfer+0x5c>)
    6264:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    6266:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    6268:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    626a:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    626c:	2300      	movs	r3, #0
    626e:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    6270:	2310      	movs	r3, #16
    6272:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    6276:	1d26      	adds	r6, r4, #4
    6278:	2101      	movs	r1, #1
    627a:	4630      	mov	r0, r6
    627c:	4b0b      	ldr	r3, [pc, #44]	; (62ac <spi_m_async_transfer+0x60>)
    627e:	4798      	blx	r3
	if (txbuf) {
    6280:	b15d      	cbz	r5, 629a <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    6282:	7a23      	ldrb	r3, [r4, #8]
    6284:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    6286:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6288:	bf94      	ite	ls
    628a:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    628c:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    6290:	4630      	mov	r0, r6
    6292:	4b07      	ldr	r3, [pc, #28]	; (62b0 <spi_m_async_transfer+0x64>)
    6294:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    6296:	2000      	movs	r0, #0
    6298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    629a:	8961      	ldrh	r1, [r4, #10]
    629c:	4630      	mov	r0, r6
    629e:	4b04      	ldr	r3, [pc, #16]	; (62b0 <spi_m_async_transfer+0x64>)
    62a0:	4798      	blx	r3
    62a2:	e7f8      	b.n	6296 <spi_m_async_transfer+0x4a>
    62a4:	0000ea6c 	.word	0x0000ea6c
    62a8:	000070c1 	.word	0x000070c1
    62ac:	00008f29 	.word	0x00008f29
    62b0:	00008fa5 	.word	0x00008fa5

000062b4 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    62b4:	b570      	push	{r4, r5, r6, lr}
    62b6:	460c      	mov	r4, r1
    62b8:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    62ba:	4605      	mov	r5, r0
    62bc:	b158      	cbz	r0, 62d6 <spi_m_async_register_callback+0x22>
    62be:	2901      	cmp	r1, #1
    62c0:	bf8c      	ite	hi
    62c2:	2000      	movhi	r0, #0
    62c4:	2001      	movls	r0, #1
    62c6:	f240 1263 	movw	r2, #355	; 0x163
    62ca:	4908      	ldr	r1, [pc, #32]	; (62ec <spi_m_async_register_callback+0x38>)
    62cc:	4b08      	ldr	r3, [pc, #32]	; (62f0 <spi_m_async_register_callback+0x3c>)
    62ce:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    62d0:	b91c      	cbnz	r4, 62da <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    62d2:	632e      	str	r6, [r5, #48]	; 0x30
    62d4:	bd70      	pop	{r4, r5, r6, pc}
    62d6:	2000      	movs	r0, #0
    62d8:	e7f5      	b.n	62c6 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    62da:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    62dc:	1c32      	adds	r2, r6, #0
    62de:	bf18      	it	ne
    62e0:	2201      	movne	r2, #1
    62e2:	2103      	movs	r1, #3
    62e4:	1d28      	adds	r0, r5, #4
    62e6:	4b03      	ldr	r3, [pc, #12]	; (62f4 <spi_m_async_register_callback+0x40>)
    62e8:	4798      	blx	r3
    62ea:	bd70      	pop	{r4, r5, r6, pc}
    62ec:	0000ea6c 	.word	0x0000ea6c
    62f0:	000070c1 	.word	0x000070c1
    62f4:	00009035 	.word	0x00009035

000062f8 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    62f8:	b538      	push	{r3, r4, r5, lr}
    62fa:	460d      	mov	r5, r1
	ASSERT(spi && io);
    62fc:	4604      	mov	r4, r0
    62fe:	b158      	cbz	r0, 6318 <spi_m_async_get_io_descriptor+0x20>
    6300:	1c08      	adds	r0, r1, #0
    6302:	bf18      	it	ne
    6304:	2001      	movne	r0, #1
    6306:	f240 126f 	movw	r2, #367	; 0x16f
    630a:	4904      	ldr	r1, [pc, #16]	; (631c <spi_m_async_get_io_descriptor+0x24>)
    630c:	4b04      	ldr	r3, [pc, #16]	; (6320 <spi_m_async_get_io_descriptor+0x28>)
    630e:	4798      	blx	r3
	*io = &spi->io;
    6310:	3424      	adds	r4, #36	; 0x24
    6312:	602c      	str	r4, [r5, #0]
	return 0;
}
    6314:	2000      	movs	r0, #0
    6316:	bd38      	pop	{r3, r4, r5, pc}
    6318:	2000      	movs	r0, #0
    631a:	e7f4      	b.n	6306 <spi_m_async_get_io_descriptor+0xe>
    631c:	0000ea6c 	.word	0x0000ea6c
    6320:	000070c1 	.word	0x000070c1

00006324 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    6324:	b570      	push	{r4, r5, r6, lr}
    6326:	460d      	mov	r5, r1
    6328:	4616      	mov	r6, r2
	ASSERT(io);
    632a:	4604      	mov	r4, r0
    632c:	2298      	movs	r2, #152	; 0x98
    632e:	4907      	ldr	r1, [pc, #28]	; (634c <_spi_m_dma_io_write+0x28>)
    6330:	3000      	adds	r0, #0
    6332:	bf18      	it	ne
    6334:	2001      	movne	r0, #1
    6336:	4b06      	ldr	r3, [pc, #24]	; (6350 <_spi_m_dma_io_write+0x2c>)
    6338:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    633a:	4633      	mov	r3, r6
    633c:	2200      	movs	r2, #0
    633e:	4629      	mov	r1, r5
    6340:	f1a4 001c 	sub.w	r0, r4, #28
    6344:	4c03      	ldr	r4, [pc, #12]	; (6354 <_spi_m_dma_io_write+0x30>)
    6346:	47a0      	blx	r4
}
    6348:	bd70      	pop	{r4, r5, r6, pc}
    634a:	bf00      	nop
    634c:	0000ea8c 	.word	0x0000ea8c
    6350:	000070c1 	.word	0x000070c1
    6354:	00009289 	.word	0x00009289

00006358 <_spi_m_dma_io_read>:
{
    6358:	b570      	push	{r4, r5, r6, lr}
    635a:	460d      	mov	r5, r1
    635c:	4616      	mov	r6, r2
	ASSERT(io);
    635e:	4604      	mov	r4, r0
    6360:	2281      	movs	r2, #129	; 0x81
    6362:	4907      	ldr	r1, [pc, #28]	; (6380 <_spi_m_dma_io_read+0x28>)
    6364:	3000      	adds	r0, #0
    6366:	bf18      	it	ne
    6368:	2001      	movne	r0, #1
    636a:	4b06      	ldr	r3, [pc, #24]	; (6384 <_spi_m_dma_io_read+0x2c>)
    636c:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    636e:	4633      	mov	r3, r6
    6370:	462a      	mov	r2, r5
    6372:	2100      	movs	r1, #0
    6374:	f1a4 001c 	sub.w	r0, r4, #28
    6378:	4c03      	ldr	r4, [pc, #12]	; (6388 <_spi_m_dma_io_read+0x30>)
    637a:	47a0      	blx	r4
}
    637c:	bd70      	pop	{r4, r5, r6, pc}
    637e:	bf00      	nop
    6380:	0000ea8c 	.word	0x0000ea8c
    6384:	000070c1 	.word	0x000070c1
    6388:	00009289 	.word	0x00009289

0000638c <spi_m_dma_init>:
{
    638c:	b538      	push	{r3, r4, r5, lr}
    638e:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    6390:	4605      	mov	r5, r0
    6392:	b1a0      	cbz	r0, 63be <spi_m_dma_init+0x32>
    6394:	1c08      	adds	r0, r1, #0
    6396:	bf18      	it	ne
    6398:	2001      	movne	r0, #1
    639a:	223b      	movs	r2, #59	; 0x3b
    639c:	4909      	ldr	r1, [pc, #36]	; (63c4 <spi_m_dma_init+0x38>)
    639e:	4b0a      	ldr	r3, [pc, #40]	; (63c8 <spi_m_dma_init+0x3c>)
    63a0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    63a2:	4628      	mov	r0, r5
    63a4:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    63a8:	4621      	mov	r1, r4
    63aa:	4b08      	ldr	r3, [pc, #32]	; (63cc <spi_m_dma_init+0x40>)
    63ac:	4798      	blx	r3
	if (rc) {
    63ae:	4603      	mov	r3, r0
    63b0:	b918      	cbnz	r0, 63ba <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    63b2:	4a07      	ldr	r2, [pc, #28]	; (63d0 <spi_m_dma_init+0x44>)
    63b4:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    63b6:	4a07      	ldr	r2, [pc, #28]	; (63d4 <spi_m_dma_init+0x48>)
    63b8:	622a      	str	r2, [r5, #32]
}
    63ba:	4618      	mov	r0, r3
    63bc:	bd38      	pop	{r3, r4, r5, pc}
    63be:	2000      	movs	r0, #0
    63c0:	e7eb      	b.n	639a <spi_m_dma_init+0xe>
    63c2:	bf00      	nop
    63c4:	0000ea8c 	.word	0x0000ea8c
    63c8:	000070c1 	.word	0x000070c1
    63cc:	0000906d 	.word	0x0000906d
    63d0:	00006359 	.word	0x00006359
    63d4:	00006325 	.word	0x00006325

000063d8 <spi_m_dma_enable>:
{
    63d8:	b510      	push	{r4, lr}
	ASSERT(spi);
    63da:	4604      	mov	r4, r0
    63dc:	2251      	movs	r2, #81	; 0x51
    63de:	4905      	ldr	r1, [pc, #20]	; (63f4 <spi_m_dma_enable+0x1c>)
    63e0:	3000      	adds	r0, #0
    63e2:	bf18      	it	ne
    63e4:	2001      	movne	r0, #1
    63e6:	4b04      	ldr	r3, [pc, #16]	; (63f8 <spi_m_dma_enable+0x20>)
    63e8:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    63ea:	1d20      	adds	r0, r4, #4
    63ec:	4b03      	ldr	r3, [pc, #12]	; (63fc <spi_m_dma_enable+0x24>)
    63ee:	4798      	blx	r3
    63f0:	bd10      	pop	{r4, pc}
    63f2:	bf00      	nop
    63f4:	0000ea8c 	.word	0x0000ea8c
    63f8:	000070c1 	.word	0x000070c1
    63fc:	000091e9 	.word	0x000091e9

00006400 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    6400:	b570      	push	{r4, r5, r6, lr}
    6402:	460d      	mov	r5, r1
    6404:	4616      	mov	r6, r2
	ASSERT(spi);
    6406:	4604      	mov	r4, r0
    6408:	22a8      	movs	r2, #168	; 0xa8
    640a:	4906      	ldr	r1, [pc, #24]	; (6424 <spi_m_dma_register_callback+0x24>)
    640c:	3000      	adds	r0, #0
    640e:	bf18      	it	ne
    6410:	2001      	movne	r0, #1
    6412:	4b05      	ldr	r3, [pc, #20]	; (6428 <spi_m_dma_register_callback+0x28>)
    6414:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    6416:	4632      	mov	r2, r6
    6418:	4629      	mov	r1, r5
    641a:	1d20      	adds	r0, r4, #4
    641c:	4b03      	ldr	r3, [pc, #12]	; (642c <spi_m_dma_register_callback+0x2c>)
    641e:	4798      	blx	r3
    6420:	bd70      	pop	{r4, r5, r6, pc}
    6422:	bf00      	nop
    6424:	0000ea8c 	.word	0x0000ea8c
    6428:	000070c1 	.word	0x000070c1
    642c:	00009219 	.word	0x00009219

00006430 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    6430:	b538      	push	{r3, r4, r5, lr}
    6432:	460d      	mov	r5, r1
	ASSERT(spi && io);
    6434:	4604      	mov	r4, r0
    6436:	b150      	cbz	r0, 644e <spi_m_dma_get_io_descriptor+0x1e>
    6438:	1c08      	adds	r0, r1, #0
    643a:	bf18      	it	ne
    643c:	2001      	movne	r0, #1
    643e:	22ae      	movs	r2, #174	; 0xae
    6440:	4904      	ldr	r1, [pc, #16]	; (6454 <spi_m_dma_get_io_descriptor+0x24>)
    6442:	4b05      	ldr	r3, [pc, #20]	; (6458 <spi_m_dma_get_io_descriptor+0x28>)
    6444:	4798      	blx	r3
	*io = &spi->io;
    6446:	3420      	adds	r4, #32
    6448:	602c      	str	r4, [r5, #0]

	return 0;
}
    644a:	2000      	movs	r0, #0
    644c:	bd38      	pop	{r3, r4, r5, pc}
    644e:	2000      	movs	r0, #0
    6450:	e7f5      	b.n	643e <spi_m_dma_get_io_descriptor+0xe>
    6452:	bf00      	nop
    6454:	0000ea8c 	.word	0x0000ea8c
    6458:	000070c1 	.word	0x000070c1

0000645c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    645e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    6460:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    6462:	b12f      	cbz	r7, 6470 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    6464:	688d      	ldr	r5, [r1, #8]
    6466:	463c      	mov	r4, r7
    6468:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    646a:	f1c2 0e01 	rsb	lr, r2, #1
    646e:	e00b      	b.n	6488 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    6470:	4b0e      	ldr	r3, [pc, #56]	; (64ac <timer_add_timer_task+0x50>)
    6472:	4798      	blx	r3
		return;
    6474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    6476:	4473      	add	r3, lr
    6478:	68a0      	ldr	r0, [r4, #8]
    647a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    647c:	42ab      	cmp	r3, r5
    647e:	d20a      	bcs.n	6496 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    6480:	6823      	ldr	r3, [r4, #0]
    6482:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    6484:	b153      	cbz	r3, 649c <timer_add_timer_task+0x40>
    6486:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    6488:	6863      	ldr	r3, [r4, #4]
    648a:	4293      	cmp	r3, r2
    648c:	d8f3      	bhi.n	6476 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    648e:	68a0      	ldr	r0, [r4, #8]
    6490:	4403      	add	r3, r0
    6492:	1a9b      	subs	r3, r3, r2
    6494:	e7f2      	b.n	647c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    6496:	42a7      	cmp	r7, r4
    6498:	d004      	beq.n	64a4 <timer_add_timer_task+0x48>
    649a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    649c:	4620      	mov	r0, r4
    649e:	4b04      	ldr	r3, [pc, #16]	; (64b0 <timer_add_timer_task+0x54>)
    64a0:	4798      	blx	r3
    64a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    64a4:	4660      	mov	r0, ip
    64a6:	4b01      	ldr	r3, [pc, #4]	; (64ac <timer_add_timer_task+0x50>)
    64a8:	4798      	blx	r3
    64aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64ac:	000070e9 	.word	0x000070e9
    64b0:	00007115 	.word	0x00007115

000064b4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    64b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    64b8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    64ba:	6907      	ldr	r7, [r0, #16]
    64bc:	3701      	adds	r7, #1
    64be:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    64c0:	7e03      	ldrb	r3, [r0, #24]
    64c2:	f013 0f01 	tst.w	r3, #1
    64c6:	d113      	bne.n	64f0 <timer_process_counted+0x3c>
    64c8:	7e03      	ldrb	r3, [r0, #24]
    64ca:	f013 0f02 	tst.w	r3, #2
    64ce:	d10f      	bne.n	64f0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    64d0:	b354      	cbz	r4, 6528 <timer_process_counted+0x74>
    64d2:	6863      	ldr	r3, [r4, #4]
    64d4:	1afb      	subs	r3, r7, r3
    64d6:	68a2      	ldr	r2, [r4, #8]
    64d8:	4293      	cmp	r3, r2
    64da:	d307      	bcc.n	64ec <timer_process_counted+0x38>
    64dc:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    64de:	f100 0814 	add.w	r8, r0, #20
    64e2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 652c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    64e6:	f8df a048 	ldr.w	sl, [pc, #72]	; 6530 <timer_process_counted+0x7c>
    64ea:	e012      	b.n	6512 <timer_process_counted+0x5e>
    64ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    64f0:	7e03      	ldrb	r3, [r0, #24]
    64f2:	f043 0302 	orr.w	r3, r3, #2
    64f6:	7603      	strb	r3, [r0, #24]
		return;
    64f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    64fc:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    64fe:	68e3      	ldr	r3, [r4, #12]
    6500:	4620      	mov	r0, r4
    6502:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    6504:	b185      	cbz	r5, 6528 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    6506:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    6508:	686b      	ldr	r3, [r5, #4]
    650a:	1afb      	subs	r3, r7, r3
    650c:	68aa      	ldr	r2, [r5, #8]
    650e:	4293      	cmp	r3, r2
    6510:	d30a      	bcc.n	6528 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    6512:	4640      	mov	r0, r8
    6514:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    6516:	7c23      	ldrb	r3, [r4, #16]
    6518:	2b01      	cmp	r3, #1
    651a:	d1ef      	bne.n	64fc <timer_process_counted+0x48>
			tmp->time_label = time;
    651c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    651e:	463a      	mov	r2, r7
    6520:	4621      	mov	r1, r4
    6522:	4640      	mov	r0, r8
    6524:	47d0      	blx	sl
    6526:	e7e9      	b.n	64fc <timer_process_counted+0x48>
    6528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    652c:	0000715d 	.word	0x0000715d
    6530:	0000645d 	.word	0x0000645d

00006534 <timer_init>:
{
    6534:	b570      	push	{r4, r5, r6, lr}
    6536:	460e      	mov	r6, r1
    6538:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    653a:	4604      	mov	r4, r0
    653c:	b190      	cbz	r0, 6564 <timer_init+0x30>
    653e:	b199      	cbz	r1, 6568 <timer_init+0x34>
    6540:	1c10      	adds	r0, r2, #0
    6542:	bf18      	it	ne
    6544:	2001      	movne	r0, #1
    6546:	223b      	movs	r2, #59	; 0x3b
    6548:	4908      	ldr	r1, [pc, #32]	; (656c <timer_init+0x38>)
    654a:	4b09      	ldr	r3, [pc, #36]	; (6570 <timer_init+0x3c>)
    654c:	4798      	blx	r3
	descr->func = func;
    654e:	4620      	mov	r0, r4
    6550:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    6554:	682b      	ldr	r3, [r5, #0]
    6556:	4631      	mov	r1, r6
    6558:	4798      	blx	r3
	descr->time                           = 0;
    655a:	2000      	movs	r0, #0
    655c:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    655e:	4b05      	ldr	r3, [pc, #20]	; (6574 <timer_init+0x40>)
    6560:	6063      	str	r3, [r4, #4]
}
    6562:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    6564:	2000      	movs	r0, #0
    6566:	e7ee      	b.n	6546 <timer_init+0x12>
    6568:	2000      	movs	r0, #0
    656a:	e7ec      	b.n	6546 <timer_init+0x12>
    656c:	0000eaa8 	.word	0x0000eaa8
    6570:	000070c1 	.word	0x000070c1
    6574:	000064b5 	.word	0x000064b5

00006578 <timer_start>:
{
    6578:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    657a:	4604      	mov	r4, r0
    657c:	b198      	cbz	r0, 65a6 <timer_start+0x2e>
    657e:	6800      	ldr	r0, [r0, #0]
    6580:	3000      	adds	r0, #0
    6582:	bf18      	it	ne
    6584:	2001      	movne	r0, #1
    6586:	2254      	movs	r2, #84	; 0x54
    6588:	4909      	ldr	r1, [pc, #36]	; (65b0 <timer_start+0x38>)
    658a:	4b0a      	ldr	r3, [pc, #40]	; (65b4 <timer_start+0x3c>)
    658c:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    658e:	1d25      	adds	r5, r4, #4
    6590:	6823      	ldr	r3, [r4, #0]
    6592:	699b      	ldr	r3, [r3, #24]
    6594:	4628      	mov	r0, r5
    6596:	4798      	blx	r3
    6598:	b938      	cbnz	r0, 65aa <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    659a:	6823      	ldr	r3, [r4, #0]
    659c:	689b      	ldr	r3, [r3, #8]
    659e:	4628      	mov	r0, r5
    65a0:	4798      	blx	r3
	return ERR_NONE;
    65a2:	2000      	movs	r0, #0
    65a4:	bd38      	pop	{r3, r4, r5, pc}
    65a6:	2000      	movs	r0, #0
    65a8:	e7ed      	b.n	6586 <timer_start+0xe>
		return ERR_DENIED;
    65aa:	f06f 0010 	mvn.w	r0, #16
}
    65ae:	bd38      	pop	{r3, r4, r5, pc}
    65b0:	0000eaa8 	.word	0x0000eaa8
    65b4:	000070c1 	.word	0x000070c1

000065b8 <timer_add_task>:
{
    65b8:	b570      	push	{r4, r5, r6, lr}
    65ba:	b082      	sub	sp, #8
    65bc:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    65be:	4604      	mov	r4, r0
    65c0:	b328      	cbz	r0, 660e <timer_add_task+0x56>
    65c2:	b331      	cbz	r1, 6612 <timer_add_task+0x5a>
    65c4:	6800      	ldr	r0, [r0, #0]
    65c6:	3000      	adds	r0, #0
    65c8:	bf18      	it	ne
    65ca:	2001      	movne	r0, #1
    65cc:	227b      	movs	r2, #123	; 0x7b
    65ce:	4920      	ldr	r1, [pc, #128]	; (6650 <timer_add_task+0x98>)
    65d0:	4b20      	ldr	r3, [pc, #128]	; (6654 <timer_add_task+0x9c>)
    65d2:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    65d4:	7f23      	ldrb	r3, [r4, #28]
    65d6:	f043 0301 	orr.w	r3, r3, #1
    65da:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    65dc:	f104 0618 	add.w	r6, r4, #24
    65e0:	4629      	mov	r1, r5
    65e2:	4630      	mov	r0, r6
    65e4:	4b1c      	ldr	r3, [pc, #112]	; (6658 <timer_add_task+0xa0>)
    65e6:	4798      	blx	r3
    65e8:	b9a8      	cbnz	r0, 6616 <timer_add_task+0x5e>
	task->time_label = descr->time;
    65ea:	6963      	ldr	r3, [r4, #20]
    65ec:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    65ee:	6962      	ldr	r2, [r4, #20]
    65f0:	4629      	mov	r1, r5
    65f2:	4630      	mov	r0, r6
    65f4:	4b19      	ldr	r3, [pc, #100]	; (665c <timer_add_task+0xa4>)
    65f6:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    65f8:	7f23      	ldrb	r3, [r4, #28]
    65fa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    65fe:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    6600:	7f23      	ldrb	r3, [r4, #28]
    6602:	f013 0f02 	tst.w	r3, #2
    6606:	d112      	bne.n	662e <timer_add_task+0x76>
	return ERR_NONE;
    6608:	2000      	movs	r0, #0
}
    660a:	b002      	add	sp, #8
    660c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    660e:	2000      	movs	r0, #0
    6610:	e7dc      	b.n	65cc <timer_add_task+0x14>
    6612:	2000      	movs	r0, #0
    6614:	e7da      	b.n	65cc <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6616:	7f23      	ldrb	r3, [r4, #28]
    6618:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    661c:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    661e:	2280      	movs	r2, #128	; 0x80
    6620:	490b      	ldr	r1, [pc, #44]	; (6650 <timer_add_task+0x98>)
    6622:	2000      	movs	r0, #0
    6624:	4b0b      	ldr	r3, [pc, #44]	; (6654 <timer_add_task+0x9c>)
    6626:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    6628:	f06f 0011 	mvn.w	r0, #17
    662c:	e7ed      	b.n	660a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    662e:	a801      	add	r0, sp, #4
    6630:	4b0b      	ldr	r3, [pc, #44]	; (6660 <timer_add_task+0xa8>)
    6632:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    6634:	7f23      	ldrb	r3, [r4, #28]
    6636:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    663a:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    663c:	6823      	ldr	r3, [r4, #0]
    663e:	69db      	ldr	r3, [r3, #28]
    6640:	1d20      	adds	r0, r4, #4
    6642:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    6644:	a801      	add	r0, sp, #4
    6646:	4b07      	ldr	r3, [pc, #28]	; (6664 <timer_add_task+0xac>)
    6648:	4798      	blx	r3
	return ERR_NONE;
    664a:	2000      	movs	r0, #0
    664c:	e7dd      	b.n	660a <timer_add_task+0x52>
    664e:	bf00      	nop
    6650:	0000eaa8 	.word	0x0000eaa8
    6654:	000070c1 	.word	0x000070c1
    6658:	000070c7 	.word	0x000070c7
    665c:	0000645d 	.word	0x0000645d
    6660:	00005c01 	.word	0x00005c01
    6664:	00005c0f 	.word	0x00005c0f

00006668 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    6668:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    666a:	2300      	movs	r3, #0
    666c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    666e:	69c3      	ldr	r3, [r0, #28]
    6670:	b11b      	cbz	r3, 667a <usart_transmission_complete+0x12>
    6672:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    6676:	4610      	mov	r0, r2
    6678:	4798      	blx	r3
    667a:	bd08      	pop	{r3, pc}

0000667c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    667c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    667e:	2300      	movs	r3, #0
    6680:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    6682:	6a43      	ldr	r3, [r0, #36]	; 0x24
    6684:	b11b      	cbz	r3, 668e <usart_error+0x12>
    6686:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    668a:	4610      	mov	r0, r2
    668c:	4798      	blx	r3
    668e:	bd08      	pop	{r3, pc}

00006690 <usart_fill_rx_buffer>:
{
    6690:	b538      	push	{r3, r4, r5, lr}
    6692:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    6694:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    6698:	302c      	adds	r0, #44	; 0x2c
    669a:	4b03      	ldr	r3, [pc, #12]	; (66a8 <usart_fill_rx_buffer+0x18>)
    669c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    669e:	6a23      	ldr	r3, [r4, #32]
    66a0:	b10b      	cbz	r3, 66a6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    66a2:	4628      	mov	r0, r5
    66a4:	4798      	blx	r3
    66a6:	bd38      	pop	{r3, r4, r5, pc}
    66a8:	000071fd 	.word	0x000071fd

000066ac <usart_async_write>:
{
    66ac:	b570      	push	{r4, r5, r6, lr}
    66ae:	460e      	mov	r6, r1
    66b0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    66b2:	4604      	mov	r4, r0
    66b4:	b1e0      	cbz	r0, 66f0 <usart_async_write+0x44>
    66b6:	b1e9      	cbz	r1, 66f4 <usart_async_write+0x48>
    66b8:	1c10      	adds	r0, r2, #0
    66ba:	bf18      	it	ne
    66bc:	2001      	movne	r0, #1
    66be:	f240 123b 	movw	r2, #315	; 0x13b
    66c2:	490f      	ldr	r1, [pc, #60]	; (6700 <usart_async_write+0x54>)
    66c4:	4b0f      	ldr	r3, [pc, #60]	; (6704 <usart_async_write+0x58>)
    66c6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    66c8:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    66cc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    66d0:	429a      	cmp	r2, r3
    66d2:	d111      	bne.n	66f8 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    66d4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    66d6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    66da:	2300      	movs	r3, #0
    66dc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    66e0:	2301      	movs	r3, #1
    66e2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    66e4:	f104 0008 	add.w	r0, r4, #8
    66e8:	4b07      	ldr	r3, [pc, #28]	; (6708 <usart_async_write+0x5c>)
    66ea:	4798      	blx	r3
	return (int32_t)length;
    66ec:	4628      	mov	r0, r5
    66ee:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    66f0:	2000      	movs	r0, #0
    66f2:	e7e4      	b.n	66be <usart_async_write+0x12>
    66f4:	2000      	movs	r0, #0
    66f6:	e7e2      	b.n	66be <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    66f8:	f06f 001b 	mvn.w	r0, #27
}
    66fc:	bd70      	pop	{r4, r5, r6, pc}
    66fe:	bf00      	nop
    6700:	0000eac0 	.word	0x0000eac0
    6704:	000070c1 	.word	0x000070c1
    6708:	00008833 	.word	0x00008833

0000670c <usart_process_byte_sent>:
{
    670c:	b510      	push	{r4, lr}
    670e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    6710:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    6712:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    6716:	429a      	cmp	r2, r3
    6718:	d009      	beq.n	672e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    671a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    671c:	1c59      	adds	r1, r3, #1
    671e:	8781      	strh	r1, [r0, #60]	; 0x3c
    6720:	5cd1      	ldrb	r1, [r2, r3]
    6722:	4b04      	ldr	r3, [pc, #16]	; (6734 <usart_process_byte_sent+0x28>)
    6724:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    6726:	4620      	mov	r0, r4
    6728:	4b03      	ldr	r3, [pc, #12]	; (6738 <usart_process_byte_sent+0x2c>)
    672a:	4798      	blx	r3
    672c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    672e:	4b03      	ldr	r3, [pc, #12]	; (673c <usart_process_byte_sent+0x30>)
    6730:	4798      	blx	r3
    6732:	bd10      	pop	{r4, pc}
    6734:	00008807 	.word	0x00008807
    6738:	00008833 	.word	0x00008833
    673c:	0000883b 	.word	0x0000883b

00006740 <usart_async_read>:
{
    6740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6744:	b082      	sub	sp, #8
    6746:	460f      	mov	r7, r1
    6748:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    674a:	4606      	mov	r6, r0
    674c:	b1a0      	cbz	r0, 6778 <usart_async_read+0x38>
    674e:	b199      	cbz	r1, 6778 <usart_async_read+0x38>
    6750:	2a00      	cmp	r2, #0
    6752:	d12d      	bne.n	67b0 <usart_async_read+0x70>
    6754:	f44f 72ac 	mov.w	r2, #344	; 0x158
    6758:	4929      	ldr	r1, [pc, #164]	; (6800 <usart_async_read+0xc0>)
    675a:	2000      	movs	r0, #0
    675c:	4b29      	ldr	r3, [pc, #164]	; (6804 <usart_async_read+0xc4>)
    675e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    6760:	a801      	add	r0, sp, #4
    6762:	4b29      	ldr	r3, [pc, #164]	; (6808 <usart_async_read+0xc8>)
    6764:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    6766:	f106 0034 	add.w	r0, r6, #52	; 0x34
    676a:	4b28      	ldr	r3, [pc, #160]	; (680c <usart_async_read+0xcc>)
    676c:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    676e:	a801      	add	r0, sp, #4
    6770:	4b27      	ldr	r3, [pc, #156]	; (6810 <usart_async_read+0xd0>)
    6772:	4798      	blx	r3
	uint16_t                       was_read = 0;
    6774:	2500      	movs	r5, #0
	return (int32_t)was_read;
    6776:	e03e      	b.n	67f6 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    6778:	f44f 72ac 	mov.w	r2, #344	; 0x158
    677c:	4920      	ldr	r1, [pc, #128]	; (6800 <usart_async_read+0xc0>)
    677e:	2000      	movs	r0, #0
    6780:	4b20      	ldr	r3, [pc, #128]	; (6804 <usart_async_read+0xc4>)
    6782:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    6784:	a801      	add	r0, sp, #4
    6786:	4b20      	ldr	r3, [pc, #128]	; (6808 <usart_async_read+0xc8>)
    6788:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    678a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    678e:	4650      	mov	r0, sl
    6790:	4b1e      	ldr	r3, [pc, #120]	; (680c <usart_async_read+0xcc>)
    6792:	4798      	blx	r3
    6794:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    6796:	a801      	add	r0, sp, #4
    6798:	4b1d      	ldr	r3, [pc, #116]	; (6810 <usart_async_read+0xd0>)
    679a:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    679c:	f1b9 0f00 	cmp.w	r9, #0
    67a0:	d004      	beq.n	67ac <usart_async_read+0x6c>
    67a2:	f1b8 0f00 	cmp.w	r8, #0
    67a6:	d119      	bne.n	67dc <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    67a8:	2500      	movs	r5, #0
    67aa:	e024      	b.n	67f6 <usart_async_read+0xb6>
    67ac:	2500      	movs	r5, #0
    67ae:	e022      	b.n	67f6 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    67b0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    67b4:	4912      	ldr	r1, [pc, #72]	; (6800 <usart_async_read+0xc0>)
    67b6:	2001      	movs	r0, #1
    67b8:	4b12      	ldr	r3, [pc, #72]	; (6804 <usart_async_read+0xc4>)
    67ba:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    67bc:	a801      	add	r0, sp, #4
    67be:	4b12      	ldr	r3, [pc, #72]	; (6808 <usart_async_read+0xc8>)
    67c0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    67c2:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    67c6:	4650      	mov	r0, sl
    67c8:	4b10      	ldr	r3, [pc, #64]	; (680c <usart_async_read+0xcc>)
    67ca:	4798      	blx	r3
    67cc:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    67ce:	a801      	add	r0, sp, #4
    67d0:	4b0f      	ldr	r3, [pc, #60]	; (6810 <usart_async_read+0xd0>)
    67d2:	4798      	blx	r3
	uint16_t                       was_read = 0;
    67d4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    67d6:	f1b9 0f00 	cmp.w	r9, #0
    67da:	d00c      	beq.n	67f6 <usart_async_read+0xb6>
{
    67dc:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    67de:	4e0d      	ldr	r6, [pc, #52]	; (6814 <usart_async_read+0xd4>)
    67e0:	1c60      	adds	r0, r4, #1
    67e2:	b285      	uxth	r5, r0
    67e4:	1939      	adds	r1, r7, r4
    67e6:	4650      	mov	r0, sl
    67e8:	47b0      	blx	r6
    67ea:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    67ec:	454c      	cmp	r4, r9
    67ee:	d202      	bcs.n	67f6 <usart_async_read+0xb6>
    67f0:	b2a3      	uxth	r3, r4
    67f2:	4598      	cmp	r8, r3
    67f4:	d8f4      	bhi.n	67e0 <usart_async_read+0xa0>
}
    67f6:	4628      	mov	r0, r5
    67f8:	b002      	add	sp, #8
    67fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67fe:	bf00      	nop
    6800:	0000eac0 	.word	0x0000eac0
    6804:	000070c1 	.word	0x000070c1
    6808:	00005c01 	.word	0x00005c01
    680c:	0000723d 	.word	0x0000723d
    6810:	00005c0f 	.word	0x00005c0f
    6814:	000071b9 	.word	0x000071b9

00006818 <usart_async_init>:
{
    6818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    681a:	460d      	mov	r5, r1
    681c:	4616      	mov	r6, r2
    681e:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    6820:	4604      	mov	r4, r0
    6822:	b320      	cbz	r0, 686e <usart_async_init+0x56>
    6824:	b329      	cbz	r1, 6872 <usart_async_init+0x5a>
    6826:	b332      	cbz	r2, 6876 <usart_async_init+0x5e>
    6828:	1c18      	adds	r0, r3, #0
    682a:	bf18      	it	ne
    682c:	2001      	movne	r0, #1
    682e:	223a      	movs	r2, #58	; 0x3a
    6830:	4913      	ldr	r1, [pc, #76]	; (6880 <usart_async_init+0x68>)
    6832:	4b14      	ldr	r3, [pc, #80]	; (6884 <usart_async_init+0x6c>)
    6834:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    6836:	463a      	mov	r2, r7
    6838:	4631      	mov	r1, r6
    683a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    683e:	4b12      	ldr	r3, [pc, #72]	; (6888 <usart_async_init+0x70>)
    6840:	4798      	blx	r3
    6842:	b9d0      	cbnz	r0, 687a <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    6844:	4629      	mov	r1, r5
    6846:	f104 0008 	add.w	r0, r4, #8
    684a:	4b10      	ldr	r3, [pc, #64]	; (688c <usart_async_init+0x74>)
    684c:	4798      	blx	r3
	if (init_status) {
    684e:	4603      	mov	r3, r0
    6850:	b958      	cbnz	r0, 686a <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    6852:	4a0f      	ldr	r2, [pc, #60]	; (6890 <usart_async_init+0x78>)
    6854:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    6856:	4a0f      	ldr	r2, [pc, #60]	; (6894 <usart_async_init+0x7c>)
    6858:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    685a:	4a0f      	ldr	r2, [pc, #60]	; (6898 <usart_async_init+0x80>)
    685c:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    685e:	4a0f      	ldr	r2, [pc, #60]	; (689c <usart_async_init+0x84>)
    6860:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    6862:	4a0f      	ldr	r2, [pc, #60]	; (68a0 <usart_async_init+0x88>)
    6864:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    6866:	4a0f      	ldr	r2, [pc, #60]	; (68a4 <usart_async_init+0x8c>)
    6868:	6162      	str	r2, [r4, #20]
}
    686a:	4618      	mov	r0, r3
    686c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    686e:	2000      	movs	r0, #0
    6870:	e7dd      	b.n	682e <usart_async_init+0x16>
    6872:	2000      	movs	r0, #0
    6874:	e7db      	b.n	682e <usart_async_init+0x16>
    6876:	2000      	movs	r0, #0
    6878:	e7d9      	b.n	682e <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    687a:	f06f 030c 	mvn.w	r3, #12
    687e:	e7f4      	b.n	686a <usart_async_init+0x52>
    6880:	0000eac0 	.word	0x0000eac0
    6884:	000070c1 	.word	0x000070c1
    6888:	00007169 	.word	0x00007169
    688c:	00008739 	.word	0x00008739
    6890:	00006741 	.word	0x00006741
    6894:	000066ad 	.word	0x000066ad
    6898:	0000670d 	.word	0x0000670d
    689c:	00006691 	.word	0x00006691
    68a0:	00006669 	.word	0x00006669
    68a4:	0000667d 	.word	0x0000667d

000068a8 <usart_async_enable>:
{
    68a8:	b510      	push	{r4, lr}
	ASSERT(descr);
    68aa:	4604      	mov	r4, r0
    68ac:	2261      	movs	r2, #97	; 0x61
    68ae:	4906      	ldr	r1, [pc, #24]	; (68c8 <usart_async_enable+0x20>)
    68b0:	3000      	adds	r0, #0
    68b2:	bf18      	it	ne
    68b4:	2001      	movne	r0, #1
    68b6:	4b05      	ldr	r3, [pc, #20]	; (68cc <usart_async_enable+0x24>)
    68b8:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    68ba:	f104 0008 	add.w	r0, r4, #8
    68be:	4b04      	ldr	r3, [pc, #16]	; (68d0 <usart_async_enable+0x28>)
    68c0:	4798      	blx	r3
}
    68c2:	2000      	movs	r0, #0
    68c4:	bd10      	pop	{r4, pc}
    68c6:	bf00      	nop
    68c8:	0000eac0 	.word	0x0000eac0
    68cc:	000070c1 	.word	0x000070c1
    68d0:	000087c9 	.word	0x000087c9

000068d4 <usart_async_disable>:
{
    68d4:	b510      	push	{r4, lr}
	ASSERT(descr);
    68d6:	4604      	mov	r4, r0
    68d8:	226c      	movs	r2, #108	; 0x6c
    68da:	4906      	ldr	r1, [pc, #24]	; (68f4 <usart_async_disable+0x20>)
    68dc:	3000      	adds	r0, #0
    68de:	bf18      	it	ne
    68e0:	2001      	movne	r0, #1
    68e2:	4b05      	ldr	r3, [pc, #20]	; (68f8 <usart_async_disable+0x24>)
    68e4:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    68e6:	f104 0008 	add.w	r0, r4, #8
    68ea:	4b04      	ldr	r3, [pc, #16]	; (68fc <usart_async_disable+0x28>)
    68ec:	4798      	blx	r3
}
    68ee:	2000      	movs	r0, #0
    68f0:	bd10      	pop	{r4, pc}
    68f2:	bf00      	nop
    68f4:	0000eac0 	.word	0x0000eac0
    68f8:	000070c1 	.word	0x000070c1
    68fc:	000087dd 	.word	0x000087dd

00006900 <usart_async_get_io_descriptor>:
{
    6900:	b538      	push	{r3, r4, r5, lr}
    6902:	460c      	mov	r4, r1
	ASSERT(descr && io);
    6904:	4605      	mov	r5, r0
    6906:	b148      	cbz	r0, 691c <usart_async_get_io_descriptor+0x1c>
    6908:	1c08      	adds	r0, r1, #0
    690a:	bf18      	it	ne
    690c:	2001      	movne	r0, #1
    690e:	2277      	movs	r2, #119	; 0x77
    6910:	4903      	ldr	r1, [pc, #12]	; (6920 <usart_async_get_io_descriptor+0x20>)
    6912:	4b04      	ldr	r3, [pc, #16]	; (6924 <usart_async_get_io_descriptor+0x24>)
    6914:	4798      	blx	r3
	*io = &descr->io;
    6916:	6025      	str	r5, [r4, #0]
}
    6918:	2000      	movs	r0, #0
    691a:	bd38      	pop	{r3, r4, r5, pc}
    691c:	2000      	movs	r0, #0
    691e:	e7f6      	b.n	690e <usart_async_get_io_descriptor+0xe>
    6920:	0000eac0 	.word	0x0000eac0
    6924:	000070c1 	.word	0x000070c1

00006928 <usart_async_register_callback>:
{
    6928:	b570      	push	{r4, r5, r6, lr}
    692a:	460c      	mov	r4, r1
    692c:	4616      	mov	r6, r2
	ASSERT(descr);
    692e:	4605      	mov	r5, r0
    6930:	2283      	movs	r2, #131	; 0x83
    6932:	4917      	ldr	r1, [pc, #92]	; (6990 <usart_async_register_callback+0x68>)
    6934:	3000      	adds	r0, #0
    6936:	bf18      	it	ne
    6938:	2001      	movne	r0, #1
    693a:	4b16      	ldr	r3, [pc, #88]	; (6994 <usart_async_register_callback+0x6c>)
    693c:	4798      	blx	r3
	switch (type) {
    693e:	2c01      	cmp	r4, #1
    6940:	d010      	beq.n	6964 <usart_async_register_callback+0x3c>
    6942:	b124      	cbz	r4, 694e <usart_async_register_callback+0x26>
    6944:	2c02      	cmp	r4, #2
    6946:	d018      	beq.n	697a <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    6948:	f06f 000c 	mvn.w	r0, #12
}
    694c:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    694e:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    6950:	1c32      	adds	r2, r6, #0
    6952:	bf18      	it	ne
    6954:	2201      	movne	r2, #1
    6956:	2101      	movs	r1, #1
    6958:	f105 0008 	add.w	r0, r5, #8
    695c:	4b0e      	ldr	r3, [pc, #56]	; (6998 <usart_async_register_callback+0x70>)
    695e:	4798      	blx	r3
	return ERR_NONE;
    6960:	2000      	movs	r0, #0
		break;
    6962:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    6964:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    6966:	1c32      	adds	r2, r6, #0
    6968:	bf18      	it	ne
    696a:	2201      	movne	r2, #1
    696c:	2102      	movs	r1, #2
    696e:	f105 0008 	add.w	r0, r5, #8
    6972:	4b09      	ldr	r3, [pc, #36]	; (6998 <usart_async_register_callback+0x70>)
    6974:	4798      	blx	r3
	return ERR_NONE;
    6976:	2000      	movs	r0, #0
		break;
    6978:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    697a:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    697c:	1c32      	adds	r2, r6, #0
    697e:	bf18      	it	ne
    6980:	2201      	movne	r2, #1
    6982:	2103      	movs	r1, #3
    6984:	f105 0008 	add.w	r0, r5, #8
    6988:	4b03      	ldr	r3, [pc, #12]	; (6998 <usart_async_register_callback+0x70>)
    698a:	4798      	blx	r3
	return ERR_NONE;
    698c:	2000      	movs	r0, #0
		break;
    698e:	bd70      	pop	{r4, r5, r6, pc}
    6990:	0000eac0 	.word	0x0000eac0
    6994:	000070c1 	.word	0x000070c1
    6998:	00008845 	.word	0x00008845

0000699c <usart_async_set_parity>:
{
    699c:	b538      	push	{r3, r4, r5, lr}
    699e:	460d      	mov	r5, r1
	ASSERT(descr);
    69a0:	4604      	mov	r4, r0
    69a2:	22cb      	movs	r2, #203	; 0xcb
    69a4:	4906      	ldr	r1, [pc, #24]	; (69c0 <usart_async_set_parity+0x24>)
    69a6:	3000      	adds	r0, #0
    69a8:	bf18      	it	ne
    69aa:	2001      	movne	r0, #1
    69ac:	4b05      	ldr	r3, [pc, #20]	; (69c4 <usart_async_set_parity+0x28>)
    69ae:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    69b0:	4629      	mov	r1, r5
    69b2:	f104 0008 	add.w	r0, r4, #8
    69b6:	4b04      	ldr	r3, [pc, #16]	; (69c8 <usart_async_set_parity+0x2c>)
    69b8:	4798      	blx	r3
}
    69ba:	2000      	movs	r0, #0
    69bc:	bd38      	pop	{r3, r4, r5, pc}
    69be:	bf00      	nop
    69c0:	0000eac0 	.word	0x0000eac0
    69c4:	000070c1 	.word	0x000070c1
    69c8:	000087f1 	.word	0x000087f1

000069cc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    69cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    69d0:	460f      	mov	r7, r1
    69d2:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    69d4:	4604      	mov	r4, r0
    69d6:	b328      	cbz	r0, 6a24 <usart_sync_write+0x58>
    69d8:	b331      	cbz	r1, 6a28 <usart_sync_write+0x5c>
    69da:	1c10      	adds	r0, r2, #0
    69dc:	bf18      	it	ne
    69de:	2001      	movne	r0, #1
    69e0:	22f1      	movs	r2, #241	; 0xf1
    69e2:	4912      	ldr	r1, [pc, #72]	; (6a2c <usart_sync_write+0x60>)
    69e4:	4b12      	ldr	r3, [pc, #72]	; (6a30 <usart_sync_write+0x64>)
    69e6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    69e8:	3408      	adds	r4, #8
    69ea:	4d12      	ldr	r5, [pc, #72]	; (6a34 <usart_sync_write+0x68>)
    69ec:	4620      	mov	r0, r4
    69ee:	47a8      	blx	r5
    69f0:	2800      	cmp	r0, #0
    69f2:	d0fb      	beq.n	69ec <usart_sync_write+0x20>
    69f4:	3f01      	subs	r7, #1
    69f6:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    69f8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 6a3c <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    69fc:	4d0d      	ldr	r5, [pc, #52]	; (6a34 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    69fe:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    6a02:	4620      	mov	r0, r4
    6a04:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    6a06:	4620      	mov	r0, r4
    6a08:	47a8      	blx	r5
    6a0a:	2800      	cmp	r0, #0
    6a0c:	d0fb      	beq.n	6a06 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    6a0e:	3601      	adds	r6, #1
    6a10:	4546      	cmp	r6, r8
    6a12:	d3f4      	bcc.n	69fe <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    6a14:	4d08      	ldr	r5, [pc, #32]	; (6a38 <usart_sync_write+0x6c>)
    6a16:	4620      	mov	r0, r4
    6a18:	47a8      	blx	r5
    6a1a:	2800      	cmp	r0, #0
    6a1c:	d0fb      	beq.n	6a16 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    6a1e:	4630      	mov	r0, r6
    6a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    6a24:	2000      	movs	r0, #0
    6a26:	e7db      	b.n	69e0 <usart_sync_write+0x14>
    6a28:	2000      	movs	r0, #0
    6a2a:	e7d9      	b.n	69e0 <usart_sync_write+0x14>
    6a2c:	0000eae0 	.word	0x0000eae0
    6a30:	000070c1 	.word	0x000070c1
    6a34:	00008815 	.word	0x00008815
    6a38:	0000881f 	.word	0x0000881f
    6a3c:	00008801 	.word	0x00008801

00006a40 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    6a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a44:	460f      	mov	r7, r1
    6a46:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    6a48:	4604      	mov	r4, r0
    6a4a:	b1e0      	cbz	r0, 6a86 <usart_sync_read+0x46>
    6a4c:	b1e9      	cbz	r1, 6a8a <usart_sync_read+0x4a>
    6a4e:	1c10      	adds	r0, r2, #0
    6a50:	bf18      	it	ne
    6a52:	2001      	movne	r0, #1
    6a54:	f44f 7286 	mov.w	r2, #268	; 0x10c
    6a58:	490d      	ldr	r1, [pc, #52]	; (6a90 <usart_sync_read+0x50>)
    6a5a:	4b0e      	ldr	r3, [pc, #56]	; (6a94 <usart_sync_read+0x54>)
    6a5c:	4798      	blx	r3
    6a5e:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    6a60:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    6a62:	3408      	adds	r4, #8
    6a64:	4d0c      	ldr	r5, [pc, #48]	; (6a98 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    6a66:	f8df 9034 	ldr.w	r9, [pc, #52]	; 6a9c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    6a6a:	4620      	mov	r0, r4
    6a6c:	47a8      	blx	r5
    6a6e:	2800      	cmp	r0, #0
    6a70:	d0fb      	beq.n	6a6a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    6a72:	4620      	mov	r0, r4
    6a74:	47c8      	blx	r9
    6a76:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    6a7a:	3601      	adds	r6, #1
    6a7c:	4546      	cmp	r6, r8
    6a7e:	d3f4      	bcc.n	6a6a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    6a80:	4630      	mov	r0, r6
    6a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    6a86:	2000      	movs	r0, #0
    6a88:	e7e4      	b.n	6a54 <usart_sync_read+0x14>
    6a8a:	2000      	movs	r0, #0
    6a8c:	e7e2      	b.n	6a54 <usart_sync_read+0x14>
    6a8e:	bf00      	nop
    6a90:	0000eae0 	.word	0x0000eae0
    6a94:	000070c1 	.word	0x000070c1
    6a98:	00008829 	.word	0x00008829
    6a9c:	0000880d 	.word	0x0000880d

00006aa0 <usart_sync_init>:
{
    6aa0:	b538      	push	{r3, r4, r5, lr}
    6aa2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    6aa4:	4604      	mov	r4, r0
    6aa6:	b198      	cbz	r0, 6ad0 <usart_sync_init+0x30>
    6aa8:	1c08      	adds	r0, r1, #0
    6aaa:	bf18      	it	ne
    6aac:	2001      	movne	r0, #1
    6aae:	2234      	movs	r2, #52	; 0x34
    6ab0:	4908      	ldr	r1, [pc, #32]	; (6ad4 <usart_sync_init+0x34>)
    6ab2:	4b09      	ldr	r3, [pc, #36]	; (6ad8 <usart_sync_init+0x38>)
    6ab4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    6ab6:	4629      	mov	r1, r5
    6ab8:	f104 0008 	add.w	r0, r4, #8
    6abc:	4b07      	ldr	r3, [pc, #28]	; (6adc <usart_sync_init+0x3c>)
    6abe:	4798      	blx	r3
	if (init_status) {
    6ac0:	4603      	mov	r3, r0
    6ac2:	b918      	cbnz	r0, 6acc <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    6ac4:	4a06      	ldr	r2, [pc, #24]	; (6ae0 <usart_sync_init+0x40>)
    6ac6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    6ac8:	4a06      	ldr	r2, [pc, #24]	; (6ae4 <usart_sync_init+0x44>)
    6aca:	6022      	str	r2, [r4, #0]
}
    6acc:	4618      	mov	r0, r3
    6ace:	bd38      	pop	{r3, r4, r5, pc}
    6ad0:	2000      	movs	r0, #0
    6ad2:	e7ec      	b.n	6aae <usart_sync_init+0xe>
    6ad4:	0000eae0 	.word	0x0000eae0
    6ad8:	000070c1 	.word	0x000070c1
    6adc:	0000870d 	.word	0x0000870d
    6ae0:	00006a41 	.word	0x00006a41
    6ae4:	000069cd 	.word	0x000069cd

00006ae8 <usart_sync_enable>:
{
    6ae8:	b510      	push	{r4, lr}
	ASSERT(descr);
    6aea:	4604      	mov	r4, r0
    6aec:	2253      	movs	r2, #83	; 0x53
    6aee:	4906      	ldr	r1, [pc, #24]	; (6b08 <usart_sync_enable+0x20>)
    6af0:	3000      	adds	r0, #0
    6af2:	bf18      	it	ne
    6af4:	2001      	movne	r0, #1
    6af6:	4b05      	ldr	r3, [pc, #20]	; (6b0c <usart_sync_enable+0x24>)
    6af8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    6afa:	f104 0008 	add.w	r0, r4, #8
    6afe:	4b04      	ldr	r3, [pc, #16]	; (6b10 <usart_sync_enable+0x28>)
    6b00:	4798      	blx	r3
}
    6b02:	2000      	movs	r0, #0
    6b04:	bd10      	pop	{r4, pc}
    6b06:	bf00      	nop
    6b08:	0000eae0 	.word	0x0000eae0
    6b0c:	000070c1 	.word	0x000070c1
    6b10:	000087b5 	.word	0x000087b5

00006b14 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6b14:	4b0f      	ldr	r3, [pc, #60]	; (6b54 <_usb_d_find_ep+0x40>)
    6b16:	7859      	ldrb	r1, [r3, #1]
    6b18:	4288      	cmp	r0, r1
    6b1a:	d018      	beq.n	6b4e <_usb_d_find_ep+0x3a>
{
    6b1c:	b430      	push	{r4, r5}
    6b1e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6b20:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    6b22:	f000 050f 	and.w	r5, r0, #15
    6b26:	e007      	b.n	6b38 <_usb_d_find_ep+0x24>
    6b28:	3301      	adds	r3, #1
    6b2a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6b2c:	2b0d      	cmp	r3, #13
    6b2e:	d009      	beq.n	6b44 <_usb_d_find_ep+0x30>
    6b30:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6b32:	7851      	ldrb	r1, [r2, #1]
    6b34:	4281      	cmp	r1, r0
    6b36:	d007      	beq.n	6b48 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    6b38:	7814      	ldrb	r4, [r2, #0]
    6b3a:	2c00      	cmp	r4, #0
    6b3c:	d1f4      	bne.n	6b28 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    6b3e:	428d      	cmp	r5, r1
    6b40:	d1f2      	bne.n	6b28 <_usb_d_find_ep+0x14>
    6b42:	e001      	b.n	6b48 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    6b44:	f04f 33ff 	mov.w	r3, #4294967295
}
    6b48:	4618      	mov	r0, r3
    6b4a:	bc30      	pop	{r4, r5}
    6b4c:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6b4e:	2300      	movs	r3, #0
}
    6b50:	4618      	mov	r0, r3
    6b52:	4770      	bx	lr
    6b54:	200006d4 	.word	0x200006d4

00006b58 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    6b58:	2000      	movs	r0, #0
    6b5a:	4770      	bx	lr

00006b5c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    6b5c:	b538      	push	{r3, r4, r5, lr}
    6b5e:	4604      	mov	r4, r0
    6b60:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    6b62:	4b09      	ldr	r3, [pc, #36]	; (6b88 <usb_d_cb_trans_more+0x2c>)
    6b64:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    6b66:	4b09      	ldr	r3, [pc, #36]	; (6b8c <usb_d_cb_trans_more+0x30>)
    6b68:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    6b6c:	789b      	ldrb	r3, [r3, #2]
    6b6e:	2b03      	cmp	r3, #3
    6b70:	d001      	beq.n	6b76 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    6b72:	2000      	movs	r0, #0
}
    6b74:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    6b76:	4b05      	ldr	r3, [pc, #20]	; (6b8c <usb_d_cb_trans_more+0x30>)
    6b78:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6b7c:	6983      	ldr	r3, [r0, #24]
    6b7e:	4629      	mov	r1, r5
    6b80:	4620      	mov	r0, r4
    6b82:	4798      	blx	r3
    6b84:	bd38      	pop	{r3, r4, r5, pc}
    6b86:	bf00      	nop
    6b88:	00006b15 	.word	0x00006b15
    6b8c:	200006d4 	.word	0x200006d4

00006b90 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    6b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b92:	b085      	sub	sp, #20
    6b94:	4606      	mov	r6, r0
    6b96:	460d      	mov	r5, r1
    6b98:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    6b9a:	4b4d      	ldr	r3, [pc, #308]	; (6cd0 <_usb_d_cb_trans_done+0x140>)
    6b9c:	4798      	blx	r3
    6b9e:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    6ba0:	2d00      	cmp	r5, #0
    6ba2:	d15b      	bne.n	6c5c <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    6ba4:	4a4b      	ldr	r2, [pc, #300]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6ba6:	0143      	lsls	r3, r0, #5
    6ba8:	18d1      	adds	r1, r2, r3
    6baa:	2000      	movs	r0, #0
    6bac:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6bae:	5cd3      	ldrb	r3, [r2, r3]
    6bb0:	b173      	cbz	r3, 6bd0 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6bb2:	4b48      	ldr	r3, [pc, #288]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6bb4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6bb8:	2201      	movs	r2, #1
    6bba:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    6bbc:	4845      	ldr	r0, [pc, #276]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6bbe:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6bc2:	69c3      	ldr	r3, [r0, #28]
    6bc4:	463a      	mov	r2, r7
    6bc6:	78c1      	ldrb	r1, [r0, #3]
    6bc8:	4630      	mov	r0, r6
    6bca:	4798      	blx	r3
}
    6bcc:	b005      	add	sp, #20
    6bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    6bd0:	788b      	ldrb	r3, [r1, #2]
    6bd2:	2b03      	cmp	r3, #3
    6bd4:	d00b      	beq.n	6bee <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    6bd6:	483f      	ldr	r0, [pc, #252]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6bd8:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    6bdc:	4614      	mov	r4, r2
    6bde:	69d3      	ldr	r3, [r2, #28]
    6be0:	320c      	adds	r2, #12
    6be2:	2100      	movs	r1, #0
    6be4:	7860      	ldrb	r0, [r4, #1]
    6be6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6be8:	2302      	movs	r3, #2
    6bea:	70a3      	strb	r3, [r4, #2]
    6bec:	e7ee      	b.n	6bcc <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    6bee:	460b      	mov	r3, r1
    6bf0:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    6bf4:	460a      	mov	r2, r1
    6bf6:	69ce      	ldr	r6, [r1, #28]
    6bf8:	320c      	adds	r2, #12
    6bfa:	2101      	movs	r1, #1
    6bfc:	7858      	ldrb	r0, [r3, #1]
    6bfe:	47b0      	blx	r6
		if (err) {
    6c00:	b1a0      	cbz	r0, 6c2c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    6c02:	4b34      	ldr	r3, [pc, #208]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6c04:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6c08:	2205      	movs	r2, #5
    6c0a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    6c0c:	2202      	movs	r2, #2
    6c0e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    6c10:	2d00      	cmp	r5, #0
    6c12:	db09      	blt.n	6c28 <_usb_d_cb_trans_done+0x98>
    6c14:	482f      	ldr	r0, [pc, #188]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6c16:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6c1a:	7840      	ldrb	r0, [r0, #1]
    6c1c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    6c20:	2101      	movs	r1, #1
    6c22:	4b2d      	ldr	r3, [pc, #180]	; (6cd8 <_usb_d_cb_trans_done+0x148>)
    6c24:	4798      	blx	r3
    6c26:	e7d1      	b.n	6bcc <_usb_d_cb_trans_done+0x3c>
    6c28:	7858      	ldrb	r0, [r3, #1]
    6c2a:	e7f9      	b.n	6c20 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6c2c:	4829      	ldr	r0, [pc, #164]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6c2e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6c32:	2304      	movs	r3, #4
    6c34:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    6c36:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    6c38:	2200      	movs	r2, #0
    6c3a:	9201      	str	r2, [sp, #4]
    6c3c:	9202      	str	r2, [sp, #8]
    6c3e:	4295      	cmp	r5, r2
    6c40:	bfac      	ite	ge
    6c42:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    6c46:	f003 030f 	andlt.w	r3, r3, #15
    6c4a:	f88d 300c 	strb.w	r3, [sp, #12]
    6c4e:	2301      	movs	r3, #1
    6c50:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    6c54:	a801      	add	r0, sp, #4
    6c56:	4b21      	ldr	r3, [pc, #132]	; (6cdc <_usb_d_cb_trans_done+0x14c>)
    6c58:	4798      	blx	r3
    6c5a:	e7b7      	b.n	6bcc <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    6c5c:	2d01      	cmp	r5, #1
    6c5e:	d00a      	beq.n	6c76 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    6c60:	2d02      	cmp	r5, #2
    6c62:	d01c      	beq.n	6c9e <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    6c64:	2d03      	cmp	r5, #3
    6c66:	d02a      	beq.n	6cbe <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    6c68:	4b1a      	ldr	r3, [pc, #104]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6c6a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    6c6e:	2206      	movs	r2, #6
    6c70:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    6c72:	70da      	strb	r2, [r3, #3]
    6c74:	e7a2      	b.n	6bbc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    6c76:	4a17      	ldr	r2, [pc, #92]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6c78:	0143      	lsls	r3, r0, #5
    6c7a:	18d1      	adds	r1, r2, r3
    6c7c:	2002      	movs	r0, #2
    6c7e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6c80:	5cd3      	ldrb	r3, [r2, r3]
    6c82:	b12b      	cbz	r3, 6c90 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    6c84:	4b13      	ldr	r3, [pc, #76]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6c86:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6c8a:	2205      	movs	r2, #5
    6c8c:	709a      	strb	r2, [r3, #2]
    6c8e:	e795      	b.n	6bbc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6c90:	460b      	mov	r3, r1
    6c92:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6c94:	2100      	movs	r1, #0
    6c96:	4630      	mov	r0, r6
    6c98:	4b0f      	ldr	r3, [pc, #60]	; (6cd8 <_usb_d_cb_trans_done+0x148>)
    6c9a:	4798      	blx	r3
    6c9c:	e78e      	b.n	6bbc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    6c9e:	4a0d      	ldr	r2, [pc, #52]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6ca0:	0143      	lsls	r3, r0, #5
    6ca2:	18d1      	adds	r1, r2, r3
    6ca4:	2004      	movs	r0, #4
    6ca6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6ca8:	5cd3      	ldrb	r3, [r2, r3]
    6caa:	b12b      	cbz	r3, 6cb8 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6cac:	4b09      	ldr	r3, [pc, #36]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6cae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6cb2:	2201      	movs	r2, #1
    6cb4:	709a      	strb	r2, [r3, #2]
    6cb6:	e781      	b.n	6bbc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6cb8:	2302      	movs	r3, #2
    6cba:	708b      	strb	r3, [r1, #2]
			return;
    6cbc:	e786      	b.n	6bcc <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    6cbe:	4b05      	ldr	r3, [pc, #20]	; (6cd4 <_usb_d_cb_trans_done+0x144>)
    6cc0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    6cc4:	2200      	movs	r2, #0
    6cc6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    6cc8:	2205      	movs	r2, #5
    6cca:	70da      	strb	r2, [r3, #3]
    6ccc:	e776      	b.n	6bbc <_usb_d_cb_trans_done+0x2c>
    6cce:	bf00      	nop
    6cd0:	00006b15 	.word	0x00006b15
    6cd4:	200006d4 	.word	0x200006d4
    6cd8:	0000a781 	.word	0x0000a781
    6cdc:	0000a929 	.word	0x0000a929

00006ce0 <usb_d_cb_trans_setup>:
{
    6ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ce4:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6ce6:	4b1c      	ldr	r3, [pc, #112]	; (6d58 <usb_d_cb_trans_setup+0x78>)
    6ce8:	4798      	blx	r3
    6cea:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    6cec:	4c1b      	ldr	r4, [pc, #108]	; (6d5c <usb_d_cb_trans_setup+0x7c>)
    6cee:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    6cf2:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    6cf4:	4621      	mov	r1, r4
    6cf6:	4628      	mov	r0, r5
    6cf8:	4b19      	ldr	r3, [pc, #100]	; (6d60 <usb_d_cb_trans_setup+0x80>)
    6cfa:	4798      	blx	r3
	if (n != 8) {
    6cfc:	b2c0      	uxtb	r0, r0
    6cfe:	2808      	cmp	r0, #8
    6d00:	d009      	beq.n	6d16 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6d02:	2101      	movs	r1, #1
    6d04:	4628      	mov	r0, r5
    6d06:	4c17      	ldr	r4, [pc, #92]	; (6d64 <usb_d_cb_trans_setup+0x84>)
    6d08:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6d0a:	2101      	movs	r1, #1
    6d0c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    6d10:	47a0      	blx	r4
		return;
    6d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6d16:	2100      	movs	r1, #0
    6d18:	4628      	mov	r0, r5
    6d1a:	4f12      	ldr	r7, [pc, #72]	; (6d64 <usb_d_cb_trans_setup+0x84>)
    6d1c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    6d1e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    6d22:	2100      	movs	r1, #0
    6d24:	4640      	mov	r0, r8
    6d26:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    6d28:	4b0c      	ldr	r3, [pc, #48]	; (6d5c <usb_d_cb_trans_setup+0x7c>)
    6d2a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    6d2e:	2201      	movs	r2, #1
    6d30:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    6d32:	695b      	ldr	r3, [r3, #20]
    6d34:	4621      	mov	r1, r4
    6d36:	4628      	mov	r0, r5
    6d38:	4798      	blx	r3
    6d3a:	b108      	cbz	r0, 6d40 <usb_d_cb_trans_setup+0x60>
    6d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    6d40:	4b06      	ldr	r3, [pc, #24]	; (6d5c <usb_d_cb_trans_setup+0x7c>)
    6d42:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    6d46:	2305      	movs	r3, #5
    6d48:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6d4a:	2101      	movs	r1, #1
    6d4c:	4628      	mov	r0, r5
    6d4e:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6d50:	2101      	movs	r1, #1
    6d52:	4640      	mov	r0, r8
    6d54:	47b8      	blx	r7
    6d56:	e7f1      	b.n	6d3c <usb_d_cb_trans_setup+0x5c>
    6d58:	00006b15 	.word	0x00006b15
    6d5c:	200006d4 	.word	0x200006d4
    6d60:	0000a8c9 	.word	0x0000a8c9
    6d64:	0000a781 	.word	0x0000a781

00006d68 <usb_d_init>:

int32_t usb_d_init(void)
{
    6d68:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    6d6a:	4b11      	ldr	r3, [pc, #68]	; (6db0 <usb_d_init+0x48>)
    6d6c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    6d6e:	2800      	cmp	r0, #0
    6d70:	db1d      	blt.n	6dae <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    6d72:	4c10      	ldr	r4, [pc, #64]	; (6db4 <usb_d_init+0x4c>)
    6d74:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    6d78:	2100      	movs	r1, #0
    6d7a:	4620      	mov	r0, r4
    6d7c:	4b0e      	ldr	r3, [pc, #56]	; (6db8 <usb_d_init+0x50>)
    6d7e:	4798      	blx	r3
    6d80:	4623      	mov	r3, r4
    6d82:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6d86:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6d88:	4a0c      	ldr	r2, [pc, #48]	; (6dbc <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6d8a:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6d8c:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    6d8e:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    6d90:	61da      	str	r2, [r3, #28]
    6d92:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6d94:	4283      	cmp	r3, r0
    6d96:	d1f8      	bne.n	6d8a <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    6d98:	4909      	ldr	r1, [pc, #36]	; (6dc0 <usb_d_init+0x58>)
    6d9a:	2000      	movs	r0, #0
    6d9c:	4c09      	ldr	r4, [pc, #36]	; (6dc4 <usb_d_init+0x5c>)
    6d9e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    6da0:	4909      	ldr	r1, [pc, #36]	; (6dc8 <usb_d_init+0x60>)
    6da2:	2001      	movs	r0, #1
    6da4:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    6da6:	4909      	ldr	r1, [pc, #36]	; (6dcc <usb_d_init+0x64>)
    6da8:	2002      	movs	r0, #2
    6daa:	47a0      	blx	r4
	return ERR_NONE;
    6dac:	2000      	movs	r0, #0
}
    6dae:	bd10      	pop	{r4, pc}
    6db0:	0000a14d 	.word	0x0000a14d
    6db4:	200006d4 	.word	0x200006d4
    6db8:	0000d0e7 	.word	0x0000d0e7
    6dbc:	00006b59 	.word	0x00006b59
    6dc0:	00006ce1 	.word	0x00006ce1
    6dc4:	0000ab31 	.word	0x0000ab31
    6dc8:	00006b5d 	.word	0x00006b5d
    6dcc:	00006b91 	.word	0x00006b91

00006dd0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    6dd0:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    6dd2:	4b01      	ldr	r3, [pc, #4]	; (6dd8 <usb_d_register_callback+0x8>)
    6dd4:	4798      	blx	r3
    6dd6:	bd08      	pop	{r3, pc}
    6dd8:	0000ab09 	.word	0x0000ab09

00006ddc <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    6ddc:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    6dde:	4b01      	ldr	r3, [pc, #4]	; (6de4 <usb_d_enable+0x8>)
    6de0:	4798      	blx	r3
}
    6de2:	bd08      	pop	{r3, pc}
    6de4:	0000a255 	.word	0x0000a255

00006de8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    6de8:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    6dea:	4b01      	ldr	r3, [pc, #4]	; (6df0 <usb_d_attach+0x8>)
    6dec:	4798      	blx	r3
    6dee:	bd08      	pop	{r3, pc}
    6df0:	0000a2c1 	.word	0x0000a2c1

00006df4 <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    6df4:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    6df6:	4b01      	ldr	r3, [pc, #4]	; (6dfc <usb_d_get_frame_num+0x8>)
    6df8:	4798      	blx	r3
}
    6dfa:	bd08      	pop	{r3, pc}
    6dfc:	0000a2df 	.word	0x0000a2df

00006e00 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    6e00:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    6e02:	4b01      	ldr	r3, [pc, #4]	; (6e08 <usb_d_set_address+0x8>)
    6e04:	4798      	blx	r3
    6e06:	bd08      	pop	{r3, pc}
    6e08:	0000a2d3 	.word	0x0000a2d3

00006e0c <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    6e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e0e:	4606      	mov	r6, r0
    6e10:	460c      	mov	r4, r1
    6e12:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    6e14:	4b0f      	ldr	r3, [pc, #60]	; (6e54 <usb_d_ep_init+0x48>)
    6e16:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    6e18:	2800      	cmp	r0, #0
    6e1a:	da14      	bge.n	6e46 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    6e1c:	20ff      	movs	r0, #255	; 0xff
    6e1e:	4b0d      	ldr	r3, [pc, #52]	; (6e54 <usb_d_ep_init+0x48>)
    6e20:	4798      	blx	r3
		if (ep_index < 0) {
    6e22:	1e05      	subs	r5, r0, #0
    6e24:	db12      	blt.n	6e4c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    6e26:	463a      	mov	r2, r7
    6e28:	4621      	mov	r1, r4
    6e2a:	4630      	mov	r0, r6
    6e2c:	4b0a      	ldr	r3, [pc, #40]	; (6e58 <usb_d_ep_init+0x4c>)
    6e2e:	4798      	blx	r3
	if (rc < 0) {
    6e30:	2800      	cmp	r0, #0
    6e32:	db0d      	blt.n	6e50 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    6e34:	4b09      	ldr	r3, [pc, #36]	; (6e5c <usb_d_ep_init+0x50>)
    6e36:	0168      	lsls	r0, r5, #5
    6e38:	181a      	adds	r2, r3, r0
    6e3a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    6e3c:	f004 0403 	and.w	r4, r4, #3
    6e40:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    6e42:	2000      	movs	r0, #0
    6e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    6e46:	f06f 0013 	mvn.w	r0, #19
    6e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    6e4c:	f06f 0014 	mvn.w	r0, #20
}
    6e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e52:	bf00      	nop
    6e54:	00006b15 	.word	0x00006b15
    6e58:	0000a2ed 	.word	0x0000a2ed
    6e5c:	200006d4 	.word	0x200006d4

00006e60 <usb_d_ep0_init>:
{
    6e60:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    6e62:	4602      	mov	r2, r0
    6e64:	2100      	movs	r1, #0
    6e66:	4608      	mov	r0, r1
    6e68:	4b01      	ldr	r3, [pc, #4]	; (6e70 <usb_d_ep0_init+0x10>)
    6e6a:	4798      	blx	r3
}
    6e6c:	bd08      	pop	{r3, pc}
    6e6e:	bf00      	nop
    6e70:	00006e0d 	.word	0x00006e0d

00006e74 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    6e74:	b538      	push	{r3, r4, r5, lr}
    6e76:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6e78:	4b06      	ldr	r3, [pc, #24]	; (6e94 <usb_d_ep_deinit+0x20>)
    6e7a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    6e7c:	1e04      	subs	r4, r0, #0
    6e7e:	db07      	blt.n	6e90 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    6e80:	4628      	mov	r0, r5
    6e82:	4b05      	ldr	r3, [pc, #20]	; (6e98 <usb_d_ep_deinit+0x24>)
    6e84:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    6e86:	4805      	ldr	r0, [pc, #20]	; (6e9c <usb_d_ep_deinit+0x28>)
    6e88:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6e8c:	23ff      	movs	r3, #255	; 0xff
    6e8e:	7043      	strb	r3, [r0, #1]
    6e90:	bd38      	pop	{r3, r4, r5, pc}
    6e92:	bf00      	nop
    6e94:	00006b15 	.word	0x00006b15
    6e98:	0000a405 	.word	0x0000a405
    6e9c:	200006d4 	.word	0x200006d4

00006ea0 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    6ea0:	b538      	push	{r3, r4, r5, lr}
    6ea2:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    6ea4:	4b0e      	ldr	r3, [pc, #56]	; (6ee0 <usb_d_ep_enable+0x40>)
    6ea6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    6ea8:	1e04      	subs	r4, r0, #0
    6eaa:	db16      	blt.n	6eda <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    6eac:	0163      	lsls	r3, r4, #5
    6eae:	4a0d      	ldr	r2, [pc, #52]	; (6ee4 <usb_d_ep_enable+0x44>)
    6eb0:	5cd3      	ldrb	r3, [r2, r3]
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	bf0c      	ite	eq
    6eb6:	2202      	moveq	r2, #2
    6eb8:	2201      	movne	r2, #1
    6eba:	4b0a      	ldr	r3, [pc, #40]	; (6ee4 <usb_d_ep_enable+0x44>)
    6ebc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    6ec0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    6ec2:	4628      	mov	r0, r5
    6ec4:	4b08      	ldr	r3, [pc, #32]	; (6ee8 <usb_d_ep_enable+0x48>)
    6ec6:	4798      	blx	r3
	if (rc < 0) {
    6ec8:	2800      	cmp	r0, #0
    6eca:	db00      	blt.n	6ece <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    6ecc:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    6ece:	4b05      	ldr	r3, [pc, #20]	; (6ee4 <usb_d_ep_enable+0x44>)
    6ed0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    6ed4:	2300      	movs	r3, #0
    6ed6:	70a3      	strb	r3, [r4, #2]
    6ed8:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    6eda:	f06f 0011 	mvn.w	r0, #17
    6ede:	e7f5      	b.n	6ecc <usb_d_ep_enable+0x2c>
    6ee0:	00006b15 	.word	0x00006b15
    6ee4:	200006d4 	.word	0x200006d4
    6ee8:	0000a4c9 	.word	0x0000a4c9

00006eec <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    6eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ef0:	b086      	sub	sp, #24
    6ef2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    6ef4:	7a07      	ldrb	r7, [r0, #8]
    6ef6:	4638      	mov	r0, r7
    6ef8:	4b3f      	ldr	r3, [pc, #252]	; (6ff8 <usb_d_ep_transfer+0x10c>)
    6efa:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    6efc:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    6efe:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    6f02:	1e06      	subs	r6, r0, #0
    6f04:	db72      	blt.n	6fec <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    6f06:	a804      	add	r0, sp, #16
    6f08:	4b3c      	ldr	r3, [pc, #240]	; (6ffc <usb_d_ep_transfer+0x110>)
    6f0a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    6f0c:	4b3c      	ldr	r3, [pc, #240]	; (7000 <usb_d_ep_transfer+0x114>)
    6f0e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    6f12:	789b      	ldrb	r3, [r3, #2]
    6f14:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    6f18:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6f1c:	b2db      	uxtb	r3, r3
    6f1e:	2b01      	cmp	r3, #1
    6f20:	d011      	beq.n	6f46 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    6f22:	a804      	add	r0, sp, #16
    6f24:	4b37      	ldr	r3, [pc, #220]	; (7004 <usb_d_ep_transfer+0x118>)
    6f26:	4798      	blx	r3
		switch (state) {
    6f28:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6f2c:	b2db      	uxtb	r3, r3
    6f2e:	2b05      	cmp	r3, #5
    6f30:	d05f      	beq.n	6ff2 <usb_d_ep_transfer+0x106>
    6f32:	2b06      	cmp	r3, #6
    6f34:	d023      	beq.n	6f7e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    6f36:	2b00      	cmp	r3, #0
    6f38:	bf0c      	ite	eq
    6f3a:	f06f 0012 	mvneq.w	r0, #18
    6f3e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    6f40:	b006      	add	sp, #24
    6f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    6f46:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 7000 <usb_d_ep_transfer+0x114>
    6f4a:	ea4f 1946 	mov.w	r9, r6, lsl #5
    6f4e:	eb0a 0309 	add.w	r3, sl, r9
    6f52:	2203      	movs	r2, #3
    6f54:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    6f56:	a804      	add	r0, sp, #16
    6f58:	4b2a      	ldr	r3, [pc, #168]	; (7004 <usb_d_ep_transfer+0x118>)
    6f5a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6f5c:	f81a 3009 	ldrb.w	r3, [sl, r9]
    6f60:	b183      	cbz	r3, 6f84 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6f62:	7a22      	ldrb	r2, [r4, #8]
    6f64:	3500      	adds	r5, #0
    6f66:	bf18      	it	ne
    6f68:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    6f6a:	6823      	ldr	r3, [r4, #0]
    6f6c:	9301      	str	r3, [sp, #4]
    6f6e:	f8cd 8008 	str.w	r8, [sp, #8]
    6f72:	f017 0f80 	tst.w	r7, #128	; 0x80
    6f76:	d119      	bne.n	6fac <usb_d_ep_transfer+0xc0>
    6f78:	f002 030f 	and.w	r3, r2, #15
    6f7c:	e018      	b.n	6fb0 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    6f7e:	f06f 000f 	mvn.w	r0, #15
    6f82:	e7dd      	b.n	6f40 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    6f84:	4b1e      	ldr	r3, [pc, #120]	; (7000 <usb_d_ep_transfer+0x114>)
    6f86:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    6f8a:	7cda      	ldrb	r2, [r3, #19]
    6f8c:	7c9d      	ldrb	r5, [r3, #18]
    6f8e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    6f92:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    6f94:	b9a5      	cbnz	r5, 6fc0 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6f96:	4b1a      	ldr	r3, [pc, #104]	; (7000 <usb_d_ep_transfer+0x114>)
    6f98:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    6f9c:	2304      	movs	r3, #4
    6f9e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    6fa0:	2300      	movs	r3, #0
			zlp                 = true;
    6fa2:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6fa4:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    6fa6:	6821      	ldr	r1, [r4, #0]
    6fa8:	9101      	str	r1, [sp, #4]
    6faa:	9302      	str	r3, [sp, #8]
    6fac:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    6fb0:	f88d 300c 	strb.w	r3, [sp, #12]
    6fb4:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    6fb8:	a801      	add	r0, sp, #4
    6fba:	4b13      	ldr	r3, [pc, #76]	; (7008 <usb_d_ep_transfer+0x11c>)
    6fbc:	4798      	blx	r3
	return rc;
    6fbe:	e7bf      	b.n	6f40 <usb_d_ep_transfer+0x54>
    6fc0:	4643      	mov	r3, r8
    6fc2:	45a8      	cmp	r8, r5
    6fc4:	bf28      	it	cs
    6fc6:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    6fc8:	4a0d      	ldr	r2, [pc, #52]	; (7000 <usb_d_ep_transfer+0x114>)
    6fca:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    6fce:	f996 200c 	ldrsb.w	r2, [r6, #12]
    6fd2:	2a00      	cmp	r2, #0
    6fd4:	db05      	blt.n	6fe2 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6fd6:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    6fd8:	6821      	ldr	r1, [r4, #0]
    6fda:	9101      	str	r1, [sp, #4]
    6fdc:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6fde:	2500      	movs	r5, #0
    6fe0:	e7ca      	b.n	6f78 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    6fe2:	429d      	cmp	r5, r3
    6fe4:	bf94      	ite	ls
    6fe6:	2500      	movls	r5, #0
    6fe8:	2501      	movhi	r5, #1
    6fea:	e7db      	b.n	6fa4 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    6fec:	f06f 0011 	mvn.w	r0, #17
    6ff0:	e7a6      	b.n	6f40 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    6ff2:	2002      	movs	r0, #2
    6ff4:	e7a4      	b.n	6f40 <usb_d_ep_transfer+0x54>
    6ff6:	bf00      	nop
    6ff8:	00006b15 	.word	0x00006b15
    6ffc:	00005c01 	.word	0x00005c01
    7000:	200006d4 	.word	0x200006d4
    7004:	00005c0f 	.word	0x00005c0f
    7008:	0000a929 	.word	0x0000a929

0000700c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    700c:	b538      	push	{r3, r4, r5, lr}
    700e:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    7010:	b141      	cbz	r1, 7024 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    7012:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7014:	bf0c      	ite	eq
    7016:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    7018:	2102      	movne	r1, #2
    701a:	4b13      	ldr	r3, [pc, #76]	; (7068 <usb_d_ep_halt+0x5c>)
    701c:	4798      	blx	r3
    701e:	4603      	mov	r3, r0
	}
}
    7020:	4618      	mov	r0, r3
    7022:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    7024:	4b11      	ldr	r3, [pc, #68]	; (706c <usb_d_ep_halt+0x60>)
    7026:	4798      	blx	r3
	if (ep_index < 0) {
    7028:	1e05      	subs	r5, r0, #0
    702a:	db19      	blt.n	7060 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    702c:	2102      	movs	r1, #2
    702e:	4620      	mov	r0, r4
    7030:	4b0d      	ldr	r3, [pc, #52]	; (7068 <usb_d_ep_halt+0x5c>)
    7032:	4798      	blx	r3
    7034:	4603      	mov	r3, r0
    7036:	2800      	cmp	r0, #0
    7038:	d0f2      	beq.n	7020 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    703a:	2100      	movs	r1, #0
    703c:	4620      	mov	r0, r4
    703e:	4b0a      	ldr	r3, [pc, #40]	; (7068 <usb_d_ep_halt+0x5c>)
    7040:	4798      	blx	r3
		if (rc < 0) {
    7042:	1e03      	subs	r3, r0, #0
    7044:	dbec      	blt.n	7020 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7046:	4b0a      	ldr	r3, [pc, #40]	; (7070 <usb_d_ep_halt+0x64>)
    7048:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    704c:	2201      	movs	r2, #1
    704e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    7050:	2103      	movs	r1, #3
    7052:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    7054:	69db      	ldr	r3, [r3, #28]
    7056:	2200      	movs	r2, #0
    7058:	4620      	mov	r0, r4
    705a:	4798      	blx	r3
	return ERR_NONE;
    705c:	2300      	movs	r3, #0
    705e:	e7df      	b.n	7020 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    7060:	f06f 0311 	mvn.w	r3, #17
    7064:	e7dc      	b.n	7020 <usb_d_ep_halt+0x14>
    7066:	bf00      	nop
    7068:	0000a781 	.word	0x0000a781
    706c:	00006b15 	.word	0x00006b15
    7070:	200006d4 	.word	0x200006d4

00007074 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    7074:	b538      	push	{r3, r4, r5, lr}
    7076:	460d      	mov	r5, r1
    7078:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    707a:	4b0e      	ldr	r3, [pc, #56]	; (70b4 <usb_d_ep_register_callback+0x40>)
    707c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    707e:	4b0e      	ldr	r3, [pc, #56]	; (70b8 <usb_d_ep_register_callback+0x44>)
    7080:	2c00      	cmp	r4, #0
    7082:	bf08      	it	eq
    7084:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    7086:	2800      	cmp	r0, #0
    7088:	db13      	blt.n	70b2 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    708a:	2d01      	cmp	r5, #1
    708c:	d008      	beq.n	70a0 <usb_d_ep_register_callback+0x2c>
    708e:	b115      	cbz	r5, 7096 <usb_d_ep_register_callback+0x22>
    7090:	2d02      	cmp	r5, #2
    7092:	d00a      	beq.n	70aa <usb_d_ep_register_callback+0x36>
    7094:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    7096:	4b09      	ldr	r3, [pc, #36]	; (70bc <usb_d_ep_register_callback+0x48>)
    7098:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    709c:	6144      	str	r4, [r0, #20]
		break;
    709e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    70a0:	4b06      	ldr	r3, [pc, #24]	; (70bc <usb_d_ep_register_callback+0x48>)
    70a2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    70a6:	6184      	str	r4, [r0, #24]
		break;
    70a8:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    70aa:	4b04      	ldr	r3, [pc, #16]	; (70bc <usb_d_ep_register_callback+0x48>)
    70ac:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    70b0:	61c4      	str	r4, [r0, #28]
    70b2:	bd38      	pop	{r3, r4, r5, pc}
    70b4:	00006b15 	.word	0x00006b15
    70b8:	00006b59 	.word	0x00006b59
    70bc:	200006d4 	.word	0x200006d4

000070c0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    70c0:	b900      	cbnz	r0, 70c4 <assert+0x4>
		__asm("BKPT #0");
    70c2:	be00      	bkpt	0x0000
    70c4:	4770      	bx	lr

000070c6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    70c6:	6803      	ldr	r3, [r0, #0]
    70c8:	b14b      	cbz	r3, 70de <is_list_element+0x18>
		if (it == element) {
    70ca:	428b      	cmp	r3, r1
    70cc:	d009      	beq.n	70e2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    70ce:	681b      	ldr	r3, [r3, #0]
    70d0:	b11b      	cbz	r3, 70da <is_list_element+0x14>
		if (it == element) {
    70d2:	4299      	cmp	r1, r3
    70d4:	d1fb      	bne.n	70ce <is_list_element+0x8>
			return true;
    70d6:	2001      	movs	r0, #1
		}
	}

	return false;
}
    70d8:	4770      	bx	lr
	return false;
    70da:	2000      	movs	r0, #0
    70dc:	4770      	bx	lr
    70de:	2000      	movs	r0, #0
    70e0:	4770      	bx	lr
			return true;
    70e2:	2001      	movs	r0, #1
    70e4:	4770      	bx	lr
	...

000070e8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    70e8:	b538      	push	{r3, r4, r5, lr}
    70ea:	4604      	mov	r4, r0
    70ec:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    70ee:	4b06      	ldr	r3, [pc, #24]	; (7108 <list_insert_as_head+0x20>)
    70f0:	4798      	blx	r3
    70f2:	f080 0001 	eor.w	r0, r0, #1
    70f6:	2239      	movs	r2, #57	; 0x39
    70f8:	4904      	ldr	r1, [pc, #16]	; (710c <list_insert_as_head+0x24>)
    70fa:	b2c0      	uxtb	r0, r0
    70fc:	4b04      	ldr	r3, [pc, #16]	; (7110 <list_insert_as_head+0x28>)
    70fe:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    7100:	6823      	ldr	r3, [r4, #0]
    7102:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    7104:	6025      	str	r5, [r4, #0]
    7106:	bd38      	pop	{r3, r4, r5, pc}
    7108:	000070c7 	.word	0x000070c7
    710c:	0000eafc 	.word	0x0000eafc
    7110:	000070c1 	.word	0x000070c1

00007114 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    7114:	6803      	ldr	r3, [r0, #0]
    7116:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    7118:	6001      	str	r1, [r0, #0]
    711a:	4770      	bx	lr

0000711c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    711c:	b570      	push	{r4, r5, r6, lr}
    711e:	4605      	mov	r5, r0
    7120:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    7122:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    7124:	4b0a      	ldr	r3, [pc, #40]	; (7150 <list_insert_at_end+0x34>)
    7126:	4798      	blx	r3
    7128:	f080 0001 	eor.w	r0, r0, #1
    712c:	224f      	movs	r2, #79	; 0x4f
    712e:	4909      	ldr	r1, [pc, #36]	; (7154 <list_insert_at_end+0x38>)
    7130:	b2c0      	uxtb	r0, r0
    7132:	4b09      	ldr	r3, [pc, #36]	; (7158 <list_insert_at_end+0x3c>)
    7134:	4798      	blx	r3

	if (!list->head) {
    7136:	682b      	ldr	r3, [r5, #0]
    7138:	b91b      	cbnz	r3, 7142 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    713a:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    713c:	6033      	str	r3, [r6, #0]
		return;
    713e:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    7140:	461c      	mov	r4, r3
	while (it->next) {
    7142:	6823      	ldr	r3, [r4, #0]
    7144:	2b00      	cmp	r3, #0
    7146:	d1fb      	bne.n	7140 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    7148:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    714a:	6033      	str	r3, [r6, #0]
    714c:	bd70      	pop	{r4, r5, r6, pc}
    714e:	bf00      	nop
    7150:	000070c7 	.word	0x000070c7
    7154:	0000eafc 	.word	0x0000eafc
    7158:	000070c1 	.word	0x000070c1

0000715c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    715c:	6803      	ldr	r3, [r0, #0]
    715e:	b10b      	cbz	r3, 7164 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    7160:	681a      	ldr	r2, [r3, #0]
    7162:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    7164:	4618      	mov	r0, r3
    7166:	4770      	bx	lr

00007168 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    7168:	b570      	push	{r4, r5, r6, lr}
    716a:	460e      	mov	r6, r1
    716c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    716e:	4604      	mov	r4, r0
    7170:	b178      	cbz	r0, 7192 <ringbuffer_init+0x2a>
    7172:	b181      	cbz	r1, 7196 <ringbuffer_init+0x2e>
    7174:	b1a2      	cbz	r2, 71a0 <ringbuffer_init+0x38>
    7176:	2001      	movs	r0, #1
    7178:	2228      	movs	r2, #40	; 0x28
    717a:	490d      	ldr	r1, [pc, #52]	; (71b0 <ringbuffer_init+0x48>)
    717c:	4b0d      	ldr	r3, [pc, #52]	; (71b4 <ringbuffer_init+0x4c>)
    717e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    7180:	1e6b      	subs	r3, r5, #1
    7182:	421d      	tst	r5, r3
    7184:	d109      	bne.n	719a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    7186:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    7188:	2000      	movs	r0, #0
    718a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    718c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    718e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    7190:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    7192:	2000      	movs	r0, #0
    7194:	e7f0      	b.n	7178 <ringbuffer_init+0x10>
    7196:	2000      	movs	r0, #0
    7198:	e7ee      	b.n	7178 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    719a:	f06f 000c 	mvn.w	r0, #12
    719e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    71a0:	2228      	movs	r2, #40	; 0x28
    71a2:	4903      	ldr	r1, [pc, #12]	; (71b0 <ringbuffer_init+0x48>)
    71a4:	2000      	movs	r0, #0
    71a6:	4b03      	ldr	r3, [pc, #12]	; (71b4 <ringbuffer_init+0x4c>)
    71a8:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    71aa:	1e6b      	subs	r3, r5, #1
    71ac:	e7eb      	b.n	7186 <ringbuffer_init+0x1e>
    71ae:	bf00      	nop
    71b0:	0000eb1c 	.word	0x0000eb1c
    71b4:	000070c1 	.word	0x000070c1

000071b8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    71b8:	b538      	push	{r3, r4, r5, lr}
    71ba:	460d      	mov	r5, r1
	ASSERT(rb && data);
    71bc:	4604      	mov	r4, r0
    71be:	b1a0      	cbz	r0, 71ea <ringbuffer_get+0x32>
    71c0:	1c08      	adds	r0, r1, #0
    71c2:	bf18      	it	ne
    71c4:	2001      	movne	r0, #1
    71c6:	2240      	movs	r2, #64	; 0x40
    71c8:	490a      	ldr	r1, [pc, #40]	; (71f4 <ringbuffer_get+0x3c>)
    71ca:	4b0b      	ldr	r3, [pc, #44]	; (71f8 <ringbuffer_get+0x40>)
    71cc:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    71ce:	68a3      	ldr	r3, [r4, #8]
    71d0:	68e2      	ldr	r2, [r4, #12]
    71d2:	429a      	cmp	r2, r3
    71d4:	d00b      	beq.n	71ee <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    71d6:	6862      	ldr	r2, [r4, #4]
    71d8:	4013      	ands	r3, r2
    71da:	6822      	ldr	r2, [r4, #0]
    71dc:	5cd3      	ldrb	r3, [r2, r3]
    71de:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    71e0:	68a3      	ldr	r3, [r4, #8]
    71e2:	3301      	adds	r3, #1
    71e4:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    71e6:	2000      	movs	r0, #0
    71e8:	bd38      	pop	{r3, r4, r5, pc}
    71ea:	2000      	movs	r0, #0
    71ec:	e7eb      	b.n	71c6 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    71ee:	f06f 0009 	mvn.w	r0, #9
}
    71f2:	bd38      	pop	{r3, r4, r5, pc}
    71f4:	0000eb1c 	.word	0x0000eb1c
    71f8:	000070c1 	.word	0x000070c1

000071fc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    71fc:	b538      	push	{r3, r4, r5, lr}
    71fe:	460d      	mov	r5, r1
	ASSERT(rb);
    7200:	4604      	mov	r4, r0
    7202:	2251      	movs	r2, #81	; 0x51
    7204:	490b      	ldr	r1, [pc, #44]	; (7234 <ringbuffer_put+0x38>)
    7206:	3000      	adds	r0, #0
    7208:	bf18      	it	ne
    720a:	2001      	movne	r0, #1
    720c:	4b0a      	ldr	r3, [pc, #40]	; (7238 <ringbuffer_put+0x3c>)
    720e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    7210:	68e3      	ldr	r3, [r4, #12]
    7212:	6862      	ldr	r2, [r4, #4]
    7214:	4013      	ands	r3, r2
    7216:	6822      	ldr	r2, [r4, #0]
    7218:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    721a:	68e3      	ldr	r3, [r4, #12]
    721c:	6861      	ldr	r1, [r4, #4]
    721e:	68a2      	ldr	r2, [r4, #8]
    7220:	1a9a      	subs	r2, r3, r2
    7222:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    7224:	bf84      	itt	hi
    7226:	1a59      	subhi	r1, r3, r1
    7228:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    722a:	3301      	adds	r3, #1
    722c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    722e:	2000      	movs	r0, #0
    7230:	bd38      	pop	{r3, r4, r5, pc}
    7232:	bf00      	nop
    7234:	0000eb1c 	.word	0x0000eb1c
    7238:	000070c1 	.word	0x000070c1

0000723c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    723c:	b510      	push	{r4, lr}
	ASSERT(rb);
    723e:	4604      	mov	r4, r0
    7240:	2267      	movs	r2, #103	; 0x67
    7242:	4905      	ldr	r1, [pc, #20]	; (7258 <ringbuffer_num+0x1c>)
    7244:	3000      	adds	r0, #0
    7246:	bf18      	it	ne
    7248:	2001      	movne	r0, #1
    724a:	4b04      	ldr	r3, [pc, #16]	; (725c <ringbuffer_num+0x20>)
    724c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    724e:	68e0      	ldr	r0, [r4, #12]
    7250:	68a3      	ldr	r3, [r4, #8]
}
    7252:	1ac0      	subs	r0, r0, r3
    7254:	bd10      	pop	{r4, pc}
    7256:	bf00      	nop
    7258:	0000eb1c 	.word	0x0000eb1c
    725c:	000070c1 	.word	0x000070c1

00007260 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    7260:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    7262:	4a06      	ldr	r2, [pc, #24]	; (727c <_sbrk+0x1c>)
    7264:	6812      	ldr	r2, [r2, #0]
    7266:	b122      	cbz	r2, 7272 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    7268:	4a04      	ldr	r2, [pc, #16]	; (727c <_sbrk+0x1c>)
    726a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    726c:	4403      	add	r3, r0
    726e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    7270:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    7272:	4903      	ldr	r1, [pc, #12]	; (7280 <_sbrk+0x20>)
    7274:	4a01      	ldr	r2, [pc, #4]	; (727c <_sbrk+0x1c>)
    7276:	6011      	str	r1, [r2, #0]
    7278:	e7f6      	b.n	7268 <_sbrk+0x8>
    727a:	bf00      	nop
    727c:	20000874 	.word	0x20000874
    7280:	20017d90 	.word	0x20017d90

00007284 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    7284:	f04f 30ff 	mov.w	r0, #4294967295
    7288:	4770      	bx	lr

0000728a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    728a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    728e:	604b      	str	r3, [r1, #4]

	return 0;
}
    7290:	2000      	movs	r0, #0
    7292:	4770      	bx	lr

00007294 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    7294:	2001      	movs	r0, #1
    7296:	4770      	bx	lr

00007298 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    7298:	2000      	movs	r0, #0
    729a:	4770      	bx	lr

0000729c <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    729c:	6940      	ldr	r0, [r0, #20]
    729e:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    72a2:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    72a6:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    72a8:	0040      	lsls	r0, r0, #1
    72aa:	3076      	adds	r0, #118	; 0x76
}
    72ac:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    72b0:	4770      	bx	lr
	...

000072b4 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    72b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    72b6:	f013 0f01 	tst.w	r3, #1
    72ba:	d11b      	bne.n	72f4 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    72bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    72be:	f013 0f03 	tst.w	r3, #3
    72c2:	d1fb      	bne.n	72bc <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    72c4:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    72c6:	f013 0f02 	tst.w	r3, #2
    72ca:	d00d      	beq.n	72e8 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    72cc:	8803      	ldrh	r3, [r0, #0]
    72ce:	f023 0302 	bic.w	r3, r3, #2
    72d2:	041b      	lsls	r3, r3, #16
    72d4:	0c1b      	lsrs	r3, r3, #16
    72d6:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    72d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    72da:	f013 0f03 	tst.w	r3, #3
    72de:	d1fb      	bne.n	72d8 <_adc_init+0x24>
    72e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    72e2:	f013 0f02 	tst.w	r3, #2
    72e6:	d1fb      	bne.n	72e0 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    72e8:	2301      	movs	r3, #1
    72ea:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    72ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    72ee:	f013 0f03 	tst.w	r3, #3
    72f2:	d1fb      	bne.n	72ec <_adc_init+0x38>
    72f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    72f6:	f013 0f01 	tst.w	r3, #1
    72fa:	d1fb      	bne.n	72f4 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    72fc:	2316      	movs	r3, #22
    72fe:	4a37      	ldr	r2, [pc, #220]	; (73dc <_adc_init+0x128>)
    7300:	fb03 2301 	mla	r3, r3, r1, r2
    7304:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    7306:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    7308:	6b03      	ldr	r3, [r0, #48]	; 0x30
    730a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    730e:	2b00      	cmp	r3, #0
    7310:	d1fa      	bne.n	7308 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    7312:	2316      	movs	r3, #22
    7314:	4a31      	ldr	r2, [pc, #196]	; (73dc <_adc_init+0x128>)
    7316:	fb03 2301 	mla	r3, r3, r1, r2
    731a:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    731c:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    731e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7320:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7324:	2b00      	cmp	r3, #0
    7326:	d1fa      	bne.n	731e <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    7328:	2316      	movs	r3, #22
    732a:	4a2c      	ldr	r2, [pc, #176]	; (73dc <_adc_init+0x128>)
    732c:	fb03 2301 	mla	r3, r3, r1, r2
    7330:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    7332:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    7334:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    7336:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    7338:	6b03      	ldr	r3, [r0, #48]	; 0x30
    733a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    733e:	2b00      	cmp	r3, #0
    7340:	d1fa      	bne.n	7338 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    7342:	2316      	movs	r3, #22
    7344:	4a25      	ldr	r2, [pc, #148]	; (73dc <_adc_init+0x128>)
    7346:	fb03 2301 	mla	r3, r3, r1, r2
    734a:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    734c:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    734e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7350:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7354:	2b00      	cmp	r3, #0
    7356:	d1fa      	bne.n	734e <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    7358:	2316      	movs	r3, #22
    735a:	4a20      	ldr	r2, [pc, #128]	; (73dc <_adc_init+0x128>)
    735c:	fb03 2301 	mla	r3, r3, r1, r2
    7360:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    7362:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    7364:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7366:	f3c3 030b 	ubfx	r3, r3, #0, #12
    736a:	2b00      	cmp	r3, #0
    736c:	d1fa      	bne.n	7364 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    736e:	2316      	movs	r3, #22
    7370:	4a1a      	ldr	r2, [pc, #104]	; (73dc <_adc_init+0x128>)
    7372:	fb03 2301 	mla	r3, r3, r1, r2
    7376:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    7378:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    737a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    737c:	f013 0f80 	tst.w	r3, #128	; 0x80
    7380:	d1fb      	bne.n	737a <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    7382:	2316      	movs	r3, #22
    7384:	4a15      	ldr	r2, [pc, #84]	; (73dc <_adc_init+0x128>)
    7386:	fb03 2301 	mla	r3, r3, r1, r2
    738a:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    738c:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    738e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7390:	f413 7f80 	tst.w	r3, #256	; 0x100
    7394:	d1fb      	bne.n	738e <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    7396:	2316      	movs	r3, #22
    7398:	4a10      	ldr	r2, [pc, #64]	; (73dc <_adc_init+0x128>)
    739a:	fb03 2301 	mla	r3, r3, r1, r2
    739e:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    73a0:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    73a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    73a4:	f413 7f00 	tst.w	r3, #512	; 0x200
    73a8:	d1fb      	bne.n	73a2 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    73aa:	2316      	movs	r3, #22
    73ac:	4a0b      	ldr	r2, [pc, #44]	; (73dc <_adc_init+0x128>)
    73ae:	fb03 2301 	mla	r3, r3, r1, r2
    73b2:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    73b4:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    73b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    73b8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    73bc:	d1fb      	bne.n	73b6 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    73be:	2216      	movs	r2, #22
    73c0:	4b06      	ldr	r3, [pc, #24]	; (73dc <_adc_init+0x128>)
    73c2:	fb02 3101 	mla	r1, r2, r1, r3
    73c6:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    73c8:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    73ca:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    73cc:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    73ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    73d0:	f013 0f03 	tst.w	r3, #3
    73d4:	d1fb      	bne.n	73ce <_adc_init+0x11a>

	return ERR_NONE;
}
    73d6:	2000      	movs	r0, #0
    73d8:	4770      	bx	lr
    73da:	bf00      	nop
    73dc:	0000eb40 	.word	0x0000eb40

000073e0 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    73e0:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    73e2:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    73e4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    73e8:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    73ec:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    73ee:	f013 0f01 	tst.w	r3, #1
    73f2:	d106      	bne.n	7402 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    73f4:	f013 0f02 	tst.w	r3, #2
    73f8:	d10d      	bne.n	7416 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    73fa:	f013 0f04 	tst.w	r3, #4
    73fe:	d111      	bne.n	7424 <_adc_interrupt_handler+0x44>
    7400:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    7402:	2301      	movs	r3, #1
    7404:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    7408:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    740c:	6883      	ldr	r3, [r0, #8]
    740e:	b292      	uxth	r2, r2
    7410:	2100      	movs	r1, #0
    7412:	4798      	blx	r3
    7414:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    7416:	2302      	movs	r3, #2
    7418:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    741c:	6843      	ldr	r3, [r0, #4]
    741e:	2100      	movs	r1, #0
    7420:	4798      	blx	r3
    7422:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    7424:	2304      	movs	r3, #4
    7426:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    742a:	6803      	ldr	r3, [r0, #0]
    742c:	2100      	movs	r1, #0
    742e:	4798      	blx	r3
	}
}
    7430:	e7e6      	b.n	7400 <_adc_interrupt_handler+0x20>
	...

00007434 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    7434:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    7438:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    743c:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    7440:	b148      	cbz	r0, 7456 <_adc_get_regs+0x22>
    7442:	2801      	cmp	r0, #1
    7444:	d009      	beq.n	745a <_adc_get_regs+0x26>
{
    7446:	b508      	push	{r3, lr}
	ASSERT(false);
    7448:	228c      	movs	r2, #140	; 0x8c
    744a:	4905      	ldr	r1, [pc, #20]	; (7460 <_adc_get_regs+0x2c>)
    744c:	2000      	movs	r0, #0
    744e:	4b05      	ldr	r3, [pc, #20]	; (7464 <_adc_get_regs+0x30>)
    7450:	4798      	blx	r3
	return 0;
    7452:	2000      	movs	r0, #0
    7454:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    7456:	2000      	movs	r0, #0
    7458:	4770      	bx	lr
    745a:	2001      	movs	r0, #1
    745c:	4770      	bx	lr
    745e:	bf00      	nop
    7460:	0000eb6c 	.word	0x0000eb6c
    7464:	000070c1 	.word	0x000070c1

00007468 <_adc_async_init>:
{
    7468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    746c:	460c      	mov	r4, r1
	ASSERT(device);
    746e:	4605      	mov	r5, r0
    7470:	22e6      	movs	r2, #230	; 0xe6
    7472:	493b      	ldr	r1, [pc, #236]	; (7560 <_adc_async_init+0xf8>)
    7474:	3000      	adds	r0, #0
    7476:	bf18      	it	ne
    7478:	2001      	movne	r0, #1
    747a:	4b3a      	ldr	r3, [pc, #232]	; (7564 <_adc_async_init+0xfc>)
    747c:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    747e:	4620      	mov	r0, r4
    7480:	4b39      	ldr	r3, [pc, #228]	; (7568 <_adc_async_init+0x100>)
    7482:	4798      	blx	r3
    7484:	4601      	mov	r1, r0
    7486:	4620      	mov	r0, r4
    7488:	4b38      	ldr	r3, [pc, #224]	; (756c <_adc_async_init+0x104>)
    748a:	4798      	blx	r3
	if (init_status) {
    748c:	4606      	mov	r6, r0
    748e:	b110      	cbz	r0, 7496 <_adc_async_init+0x2e>
}
    7490:	4630      	mov	r0, r6
    7492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    7496:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    7498:	4b35      	ldr	r3, [pc, #212]	; (7570 <_adc_async_init+0x108>)
    749a:	429c      	cmp	r4, r3
    749c:	d05c      	beq.n	7558 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    749e:	4b35      	ldr	r3, [pc, #212]	; (7574 <_adc_async_init+0x10c>)
    74a0:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    74a2:	bf04      	itt	eq
    74a4:	4b34      	ldreq	r3, [pc, #208]	; (7578 <_adc_async_init+0x110>)
    74a6:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    74a8:	4628      	mov	r0, r5
    74aa:	4f34      	ldr	r7, [pc, #208]	; (757c <_adc_async_init+0x114>)
    74ac:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74ae:	0943      	lsrs	r3, r0, #5
    74b0:	f000 001f 	and.w	r0, r0, #31
    74b4:	2401      	movs	r4, #1
    74b6:	fa04 f000 	lsl.w	r0, r4, r0
    74ba:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 7580 <_adc_async_init+0x118>
    74be:	3320      	adds	r3, #32
    74c0:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    74c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    74c8:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    74cc:	4628      	mov	r0, r5
    74ce:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74d0:	0943      	lsrs	r3, r0, #5
    74d2:	f000 001f 	and.w	r0, r0, #31
    74d6:	fa04 f000 	lsl.w	r0, r4, r0
    74da:	3360      	adds	r3, #96	; 0x60
    74dc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    74e0:	4628      	mov	r0, r5
    74e2:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74e4:	0943      	lsrs	r3, r0, #5
    74e6:	f000 001f 	and.w	r0, r0, #31
    74ea:	4084      	lsls	r4, r0
    74ec:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    74f0:	4628      	mov	r0, r5
    74f2:	47b8      	blx	r7
    74f4:	3001      	adds	r0, #1
    74f6:	b280      	uxth	r0, r0
    74f8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    74fa:	2b00      	cmp	r3, #0
    74fc:	dbc8      	blt.n	7490 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74fe:	095b      	lsrs	r3, r3, #5
    7500:	f000 001f 	and.w	r0, r0, #31
    7504:	2201      	movs	r2, #1
    7506:	fa02 f000 	lsl.w	r0, r2, r0
    750a:	3320      	adds	r3, #32
    750c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7510:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7514:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    7518:	4628      	mov	r0, r5
    751a:	47b8      	blx	r7
    751c:	3001      	adds	r0, #1
    751e:	b280      	uxth	r0, r0
    7520:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    7522:	2b00      	cmp	r3, #0
    7524:	dbb4      	blt.n	7490 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7526:	095b      	lsrs	r3, r3, #5
    7528:	f000 001f 	and.w	r0, r0, #31
    752c:	2201      	movs	r2, #1
    752e:	fa02 f000 	lsl.w	r0, r2, r0
    7532:	3360      	adds	r3, #96	; 0x60
    7534:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    7538:	4628      	mov	r0, r5
    753a:	47b8      	blx	r7
    753c:	3001      	adds	r0, #1
    753e:	b280      	uxth	r0, r0
    7540:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    7542:	2b00      	cmp	r3, #0
    7544:	dba4      	blt.n	7490 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7546:	095b      	lsrs	r3, r3, #5
    7548:	f000 001f 	and.w	r0, r0, #31
    754c:	2201      	movs	r2, #1
    754e:	fa02 f000 	lsl.w	r0, r2, r0
    7552:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    7556:	e79b      	b.n	7490 <_adc_async_init+0x28>
		_adc0_dev = dev;
    7558:	4b07      	ldr	r3, [pc, #28]	; (7578 <_adc_async_init+0x110>)
    755a:	601d      	str	r5, [r3, #0]
    755c:	e7a4      	b.n	74a8 <_adc_async_init+0x40>
    755e:	bf00      	nop
    7560:	0000eb6c 	.word	0x0000eb6c
    7564:	000070c1 	.word	0x000070c1
    7568:	00007435 	.word	0x00007435
    756c:	000072b5 	.word	0x000072b5
    7570:	43001c00 	.word	0x43001c00
    7574:	43002000 	.word	0x43002000
    7578:	20000878 	.word	0x20000878
    757c:	0000729d 	.word	0x0000729d
    7580:	e000e100 	.word	0xe000e100

00007584 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    7584:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    7586:	8813      	ldrh	r3, [r2, #0]
    7588:	b29b      	uxth	r3, r3
    758a:	f043 0302 	orr.w	r3, r3, #2
    758e:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    7590:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7592:	f013 0f03 	tst.w	r3, #3
    7596:	d1fb      	bne.n	7590 <_adc_async_enable_channel+0xc>
}
    7598:	4770      	bx	lr

0000759a <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    759a:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    759c:	88db      	ldrh	r3, [r3, #6]
    759e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    75a2:	2b03      	cmp	r3, #3
}
    75a4:	bf0c      	ite	eq
    75a6:	2001      	moveq	r0, #1
    75a8:	2002      	movne	r0, #2
    75aa:	4770      	bx	lr

000075ac <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    75ac:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    75ae:	7d13      	ldrb	r3, [r2, #20]
    75b0:	f043 0302 	orr.w	r3, r3, #2
    75b4:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    75b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    75b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    75bc:	2b00      	cmp	r3, #0
    75be:	d1fa      	bne.n	75b6 <_adc_async_convert+0xa>
}
    75c0:	4770      	bx	lr

000075c2 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    75c2:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    75c4:	2a01      	cmp	r2, #1
    75c6:	d007      	beq.n	75d8 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    75c8:	2a02      	cmp	r2, #2
    75ca:	d00e      	beq.n	75ea <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    75cc:	b91a      	cbnz	r2, 75d6 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    75ce:	b1ab      	cbz	r3, 75fc <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    75d0:	2301      	movs	r3, #1
    75d2:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    75d6:	4770      	bx	lr
	if (value == 0x0) {
    75d8:	b91b      	cbnz	r3, 75e2 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    75da:	2304      	movs	r3, #4
    75dc:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    75e0:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    75e2:	2304      	movs	r3, #4
    75e4:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    75e8:	4770      	bx	lr
	if (value == 0x0) {
    75ea:	b91b      	cbnz	r3, 75f4 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    75ec:	2302      	movs	r3, #2
    75ee:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    75f2:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    75f4:	2302      	movs	r3, #2
    75f6:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    75fa:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    75fc:	2301      	movs	r3, #1
    75fe:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    7602:	4770      	bx	lr

00007604 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    7604:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    7606:	4b02      	ldr	r3, [pc, #8]	; (7610 <ADC0_0_Handler+0xc>)
    7608:	6818      	ldr	r0, [r3, #0]
    760a:	4b02      	ldr	r3, [pc, #8]	; (7614 <ADC0_0_Handler+0x10>)
    760c:	4798      	blx	r3
    760e:	bd08      	pop	{r3, pc}
    7610:	20000878 	.word	0x20000878
    7614:	000073e1 	.word	0x000073e1

00007618 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    7618:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    761a:	4b02      	ldr	r3, [pc, #8]	; (7624 <ADC0_1_Handler+0xc>)
    761c:	6818      	ldr	r0, [r3, #0]
    761e:	4b02      	ldr	r3, [pc, #8]	; (7628 <ADC0_1_Handler+0x10>)
    7620:	4798      	blx	r3
    7622:	bd08      	pop	{r3, pc}
    7624:	20000878 	.word	0x20000878
    7628:	000073e1 	.word	0x000073e1

0000762c <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    762c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    762e:	4b02      	ldr	r3, [pc, #8]	; (7638 <ADC1_0_Handler+0xc>)
    7630:	6858      	ldr	r0, [r3, #4]
    7632:	4b02      	ldr	r3, [pc, #8]	; (763c <ADC1_0_Handler+0x10>)
    7634:	4798      	blx	r3
    7636:	bd08      	pop	{r3, pc}
    7638:	20000878 	.word	0x20000878
    763c:	000073e1 	.word	0x000073e1

00007640 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    7640:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    7642:	4b02      	ldr	r3, [pc, #8]	; (764c <ADC1_1_Handler+0xc>)
    7644:	6858      	ldr	r0, [r3, #4]
    7646:	4b02      	ldr	r3, [pc, #8]	; (7650 <ADC1_1_Handler+0x10>)
    7648:	4798      	blx	r3
    764a:	bd08      	pop	{r3, pc}
    764c:	20000878 	.word	0x20000878
    7650:	000073e1 	.word	0x000073e1

00007654 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7654:	0943      	lsrs	r3, r0, #5
    7656:	f000 001f 	and.w	r0, r0, #31
    765a:	2201      	movs	r2, #1
    765c:	fa02 f000 	lsl.w	r0, r2, r0
    7660:	3340      	adds	r3, #64	; 0x40
    7662:	4a02      	ldr	r2, [pc, #8]	; (766c <_irq_set+0x18>)
    7664:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    7668:	4770      	bx	lr
    766a:	bf00      	nop
    766c:	e000e100 	.word	0xe000e100

00007670 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    7670:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    7674:	00c0      	lsls	r0, r0, #3
    7676:	4770      	bx	lr

00007678 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    7678:	4b01      	ldr	r3, [pc, #4]	; (7680 <_get_cycles_for_ms+0x8>)
    767a:	fb03 f000 	mul.w	r0, r3, r0
    767e:	4770      	bx	lr
    7680:	0001d4c0 	.word	0x0001d4c0

00007684 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    7684:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    7686:	4a0e      	ldr	r2, [pc, #56]	; (76c0 <_init_chip+0x3c>)
    7688:	8813      	ldrh	r3, [r2, #0]
    768a:	b29b      	uxth	r3, r3
    768c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    7690:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    7692:	4b0c      	ldr	r3, [pc, #48]	; (76c4 <_init_chip+0x40>)
    7694:	4798      	blx	r3
	_oscctrl_init_sources();
    7696:	4b0c      	ldr	r3, [pc, #48]	; (76c8 <_init_chip+0x44>)
    7698:	4798      	blx	r3
	_mclk_init();
    769a:	4b0c      	ldr	r3, [pc, #48]	; (76cc <_init_chip+0x48>)
    769c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    769e:	2004      	movs	r0, #4
    76a0:	4c0b      	ldr	r4, [pc, #44]	; (76d0 <_init_chip+0x4c>)
    76a2:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    76a4:	4b0b      	ldr	r3, [pc, #44]	; (76d4 <_init_chip+0x50>)
    76a6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    76a8:	f640 70fb 	movw	r0, #4091	; 0xffb
    76ac:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    76ae:	4a0a      	ldr	r2, [pc, #40]	; (76d8 <_init_chip+0x54>)
    76b0:	6913      	ldr	r3, [r2, #16]
    76b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    76b6:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    76b8:	4b08      	ldr	r3, [pc, #32]	; (76dc <_init_chip+0x58>)
    76ba:	4798      	blx	r3
    76bc:	bd10      	pop	{r4, pc}
    76be:	bf00      	nop
    76c0:	41004000 	.word	0x41004000
    76c4:	00007b95 	.word	0x00007b95
    76c8:	00007ba9 	.word	0x00007ba9
    76cc:	00007a89 	.word	0x00007a89
    76d0:	00007a11 	.word	0x00007a11
    76d4:	00007bad 	.word	0x00007bad
    76d8:	40000800 	.word	0x40000800
    76dc:	00007755 	.word	0x00007755

000076e0 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    76e0:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    76e2:	4a1a      	ldr	r2, [pc, #104]	; (774c <_dmac_handler+0x6c>)
    76e4:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    76e6:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    76ea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    76ee:	4818      	ldr	r0, [pc, #96]	; (7750 <_dmac_handler+0x70>)
    76f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    76f4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    76f8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    76fc:	f012 0f01 	tst.w	r2, #1
    7700:	d10a      	bne.n	7718 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    7702:	011a      	lsls	r2, r3, #4
    7704:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7708:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    770c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    7710:	f012 0f02 	tst.w	r2, #2
    7714:	d10b      	bne.n	772e <_dmac_handler+0x4e>
    7716:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    7718:	011a      	lsls	r2, r3, #4
    771a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    771e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    7722:	2101      	movs	r1, #1
    7724:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    7728:	6843      	ldr	r3, [r0, #4]
    772a:	4798      	blx	r3
    772c:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    772e:	011a      	lsls	r2, r3, #4
    7730:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    7734:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    7738:	2102      	movs	r1, #2
    773a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    773e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7742:	4a03      	ldr	r2, [pc, #12]	; (7750 <_dmac_handler+0x70>)
    7744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7748:	4798      	blx	r3
	}
}
    774a:	e7e4      	b.n	7716 <_dmac_handler+0x36>
    774c:	4100a000 	.word	0x4100a000
    7750:	20000880 	.word	0x20000880

00007754 <_dma_init>:
{
    7754:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    7756:	4a32      	ldr	r2, [pc, #200]	; (7820 <_dma_init+0xcc>)
    7758:	8813      	ldrh	r3, [r2, #0]
    775a:	f023 0302 	bic.w	r3, r3, #2
    775e:	041b      	lsls	r3, r3, #16
    7760:	0c1b      	lsrs	r3, r3, #16
    7762:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    7764:	8853      	ldrh	r3, [r2, #2]
    7766:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    776a:	041b      	lsls	r3, r3, #16
    776c:	0c1b      	lsrs	r3, r3, #16
    776e:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    7770:	8813      	ldrh	r3, [r2, #0]
    7772:	b29b      	uxth	r3, r3
    7774:	f043 0301 	orr.w	r3, r3, #1
    7778:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    777a:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    777c:	f013 0f01 	tst.w	r3, #1
    7780:	d1fb      	bne.n	777a <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    7782:	4b27      	ldr	r3, [pc, #156]	; (7820 <_dma_init+0xcc>)
    7784:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    7788:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    778a:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    778c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    7790:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    7794:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    7796:	2100      	movs	r1, #0
    7798:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    779a:	4a22      	ldr	r2, [pc, #136]	; (7824 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    779c:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    779e:	4a22      	ldr	r2, [pc, #136]	; (7828 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    77a0:	639a      	str	r2, [r3, #56]	; 0x38
    77a2:	4b22      	ldr	r3, [pc, #136]	; (782c <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    77a4:	4c1f      	ldr	r4, [pc, #124]	; (7824 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    77a6:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    77a8:	681d      	ldr	r5, [r3, #0]
    77aa:	0108      	lsls	r0, r1, #4
    77ac:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    77b0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    77b4:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    77b6:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    77b8:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    77bc:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    77be:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    77c2:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    77c4:	1822      	adds	r2, r4, r0
    77c6:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    77c8:	60d6      	str	r6, [r2, #12]
    77ca:	3101      	adds	r1, #1
    77cc:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    77ce:	2920      	cmp	r1, #32
    77d0:	d1ea      	bne.n	77a8 <_dma_init+0x54>
    77d2:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    77d4:	2001      	movs	r0, #1
    77d6:	4916      	ldr	r1, [pc, #88]	; (7830 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    77d8:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    77da:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    77de:	d00b      	beq.n	77f8 <_dma_init+0xa4>
    77e0:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    77e2:	2b24      	cmp	r3, #36	; 0x24
    77e4:	d1f8      	bne.n	77d8 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    77e6:	4a0e      	ldr	r2, [pc, #56]	; (7820 <_dma_init+0xcc>)
    77e8:	8813      	ldrh	r3, [r2, #0]
    77ea:	b29b      	uxth	r3, r3
    77ec:	f043 0302 	orr.w	r3, r3, #2
    77f0:	8013      	strh	r3, [r2, #0]
}
    77f2:	2000      	movs	r0, #0
    77f4:	bc70      	pop	{r4, r5, r6}
    77f6:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    77f8:	095c      	lsrs	r4, r3, #5
    77fa:	f002 021f 	and.w	r2, r2, #31
    77fe:	fa00 f202 	lsl.w	r2, r0, r2
    7802:	f104 0520 	add.w	r5, r4, #32
    7806:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    780a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    780e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7812:	f104 0560 	add.w	r5, r4, #96	; 0x60
    7816:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    781a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    781e:	e7df      	b.n	77e0 <_dma_init+0x8c>
    7820:	4100a000 	.word	0x4100a000
    7824:	20007970 	.word	0x20007970
    7828:	20007b70 	.word	0x20007b70
    782c:	0000eb84 	.word	0x0000eb84
    7830:	e000e100 	.word	0xe000e100

00007834 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    7834:	b991      	cbnz	r1, 785c <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    7836:	b942      	cbnz	r2, 784a <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    7838:	0100      	lsls	r0, r0, #4
    783a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    783e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    7842:	2302      	movs	r3, #2
    7844:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    7848:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    784a:	0100      	lsls	r0, r0, #4
    784c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    7850:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    7854:	2302      	movs	r3, #2
    7856:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    785a:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    785c:	2901      	cmp	r1, #1
    785e:	d000      	beq.n	7862 <_dma_set_irq_state+0x2e>
    7860:	4770      	bx	lr
	if (value == 0x0) {
    7862:	b142      	cbz	r2, 7876 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    7864:	0100      	lsls	r0, r0, #4
    7866:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    786a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    786e:	2301      	movs	r3, #1
    7870:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    7874:	e7f4      	b.n	7860 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    7876:	0100      	lsls	r0, r0, #4
    7878:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    787c:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    7880:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    7884:	4770      	bx	lr
	...

00007888 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    7888:	4b02      	ldr	r3, [pc, #8]	; (7894 <_dma_set_destination_address+0xc>)
    788a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    788e:	6081      	str	r1, [r0, #8]
}
    7890:	2000      	movs	r0, #0
    7892:	4770      	bx	lr
    7894:	20007970 	.word	0x20007970

00007898 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    7898:	4b02      	ldr	r3, [pc, #8]	; (78a4 <_dma_set_source_address+0xc>)
    789a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    789e:	6041      	str	r1, [r0, #4]
}
    78a0:	2000      	movs	r0, #0
    78a2:	4770      	bx	lr
    78a4:	20007970 	.word	0x20007970

000078a8 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    78a8:	4a05      	ldr	r2, [pc, #20]	; (78c0 <_dma_srcinc_enable+0x18>)
    78aa:	0100      	lsls	r0, r0, #4
    78ac:	5a13      	ldrh	r3, [r2, r0]
    78ae:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    78b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    78b4:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    78b8:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    78ba:	5211      	strh	r1, [r2, r0]
}
    78bc:	2000      	movs	r0, #0
    78be:	4770      	bx	lr
    78c0:	20007970 	.word	0x20007970

000078c4 <_dma_set_data_amount>:
{
    78c4:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    78c6:	4c14      	ldr	r4, [pc, #80]	; (7918 <_dma_set_data_amount+0x54>)
    78c8:	0102      	lsls	r2, r0, #4
    78ca:	18a3      	adds	r3, r4, r2
    78cc:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    78ce:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    78d0:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    78d4:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    78d6:	f412 6f00 	tst.w	r2, #2048	; 0x800
    78da:	d006      	beq.n	78ea <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    78dc:	fa01 f403 	lsl.w	r4, r1, r3
    78e0:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    78e2:	4a0d      	ldr	r2, [pc, #52]	; (7918 <_dma_set_data_amount+0x54>)
    78e4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    78e8:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    78ea:	4c0b      	ldr	r4, [pc, #44]	; (7918 <_dma_set_data_amount+0x54>)
    78ec:	0102      	lsls	r2, r0, #4
    78ee:	18a5      	adds	r5, r4, r2
    78f0:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    78f2:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    78f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
    78f8:	d005      	beq.n	7906 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    78fa:	fa01 f303 	lsl.w	r3, r1, r3
    78fe:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    7900:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    7904:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    7906:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    7908:	4b03      	ldr	r3, [pc, #12]	; (7918 <_dma_set_data_amount+0x54>)
    790a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    790e:	8041      	strh	r1, [r0, #2]
}
    7910:	2000      	movs	r0, #0
    7912:	bc30      	pop	{r4, r5}
    7914:	4770      	bx	lr
    7916:	bf00      	nop
    7918:	20007970 	.word	0x20007970

0000791c <_dma_enable_transaction>:
{
    791c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    791e:	4c0d      	ldr	r4, [pc, #52]	; (7954 <_dma_enable_transaction+0x38>)
    7920:	0103      	lsls	r3, r0, #4
    7922:	5ae2      	ldrh	r2, [r4, r3]
    7924:	b292      	uxth	r2, r2
    7926:	f042 0201 	orr.w	r2, r2, #1
    792a:	52e2      	strh	r2, [r4, r3]
    792c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7930:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    7934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7936:	f042 0202 	orr.w	r2, r2, #2
    793a:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    793c:	b131      	cbz	r1, 794c <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    793e:	4a06      	ldr	r2, [pc, #24]	; (7958 <_dma_enable_transaction+0x3c>)
    7940:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    7942:	2301      	movs	r3, #1
    7944:	fa03 f000 	lsl.w	r0, r3, r0
    7948:	4308      	orrs	r0, r1
    794a:	6110      	str	r0, [r2, #16]
}
    794c:	2000      	movs	r0, #0
    794e:	f85d 4b04 	ldr.w	r4, [sp], #4
    7952:	4770      	bx	lr
    7954:	20007970 	.word	0x20007970
    7958:	4100a000 	.word	0x4100a000

0000795c <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    795c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7960:	4b02      	ldr	r3, [pc, #8]	; (796c <_dma_get_channel_resource+0x10>)
    7962:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7966:	6001      	str	r1, [r0, #0]
}
    7968:	2000      	movs	r0, #0
    796a:	4770      	bx	lr
    796c:	20000880 	.word	0x20000880

00007970 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    7970:	b508      	push	{r3, lr}
	_dmac_handler();
    7972:	4b01      	ldr	r3, [pc, #4]	; (7978 <DMAC_0_Handler+0x8>)
    7974:	4798      	blx	r3
    7976:	bd08      	pop	{r3, pc}
    7978:	000076e1 	.word	0x000076e1

0000797c <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    797c:	b508      	push	{r3, lr}
	_dmac_handler();
    797e:	4b01      	ldr	r3, [pc, #4]	; (7984 <DMAC_1_Handler+0x8>)
    7980:	4798      	blx	r3
    7982:	bd08      	pop	{r3, pc}
    7984:	000076e1 	.word	0x000076e1

00007988 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    7988:	b508      	push	{r3, lr}
	_dmac_handler();
    798a:	4b01      	ldr	r3, [pc, #4]	; (7990 <DMAC_2_Handler+0x8>)
    798c:	4798      	blx	r3
    798e:	bd08      	pop	{r3, pc}
    7990:	000076e1 	.word	0x000076e1

00007994 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    7994:	b508      	push	{r3, lr}
	_dmac_handler();
    7996:	4b01      	ldr	r3, [pc, #4]	; (799c <DMAC_3_Handler+0x8>)
    7998:	4798      	blx	r3
    799a:	bd08      	pop	{r3, pc}
    799c:	000076e1 	.word	0x000076e1

000079a0 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    79a0:	b508      	push	{r3, lr}
	_dmac_handler();
    79a2:	4b01      	ldr	r3, [pc, #4]	; (79a8 <DMAC_4_Handler+0x8>)
    79a4:	4798      	blx	r3
    79a6:	bd08      	pop	{r3, pc}
    79a8:	000076e1 	.word	0x000076e1

000079ac <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    79ac:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    79ae:	2000      	movs	r0, #0
    79b0:	4770      	bx	lr
	...

000079b4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    79b4:	b430      	push	{r4, r5}
    79b6:	4814      	ldr	r0, [pc, #80]	; (7a08 <_event_system_init+0x54>)
    79b8:	f100 0543 	add.w	r5, r0, #67	; 0x43
    79bc:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    79be:	4c13      	ldr	r4, [pc, #76]	; (7a0c <_event_system_init+0x58>)
    79c0:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    79c2:	f813 1b01 	ldrb.w	r1, [r3], #1
    79c6:	3248      	adds	r2, #72	; 0x48
    79c8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    79cc:	42ab      	cmp	r3, r5
    79ce:	d1f7      	bne.n	79c0 <_event_system_init+0xc>
    79d0:	480d      	ldr	r0, [pc, #52]	; (7a08 <_event_system_init+0x54>)
    79d2:	f100 0442 	add.w	r4, r0, #66	; 0x42
    79d6:	3080      	adds	r0, #128	; 0x80
    79d8:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    79da:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    79de:	00ca      	lsls	r2, r1, #3
    79e0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    79e4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    79e8:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    79ea:	f850 3f04 	ldr.w	r3, [r0, #4]!
    79ee:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    79f0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    79f4:	43db      	mvns	r3, r3
    79f6:	b2db      	uxtb	r3, r3
    79f8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    79fc:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    79fe:	2920      	cmp	r1, #32
    7a00:	d1eb      	bne.n	79da <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    7a02:	2000      	movs	r0, #0
    7a04:	bc30      	pop	{r4, r5}
    7a06:	4770      	bx	lr
    7a08:	0000ec84 	.word	0x0000ec84
    7a0c:	4100e000 	.word	0x4100e000

00007a10 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    7a10:	f010 0f01 	tst.w	r0, #1
    7a14:	d008      	beq.n	7a28 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7a16:	4a17      	ldr	r2, [pc, #92]	; (7a74 <_gclk_init_generators_by_fref+0x64>)
    7a18:	4b17      	ldr	r3, [pc, #92]	; (7a78 <_gclk_init_generators_by_fref+0x68>)
    7a1a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7a1c:	4619      	mov	r1, r3
    7a1e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7a22:	684b      	ldr	r3, [r1, #4]
    7a24:	4213      	tst	r3, r2
    7a26:	d1fc      	bne.n	7a22 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    7a28:	f010 0f02 	tst.w	r0, #2
    7a2c:	d008      	beq.n	7a40 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7a2e:	4a13      	ldr	r2, [pc, #76]	; (7a7c <_gclk_init_generators_by_fref+0x6c>)
    7a30:	4b11      	ldr	r3, [pc, #68]	; (7a78 <_gclk_init_generators_by_fref+0x68>)
    7a32:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7a34:	4619      	mov	r1, r3
    7a36:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7a3a:	684b      	ldr	r3, [r1, #4]
    7a3c:	4213      	tst	r3, r2
    7a3e:	d1fc      	bne.n	7a3a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    7a40:	f010 0f04 	tst.w	r0, #4
    7a44:	d008      	beq.n	7a58 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7a46:	4a0e      	ldr	r2, [pc, #56]	; (7a80 <_gclk_init_generators_by_fref+0x70>)
    7a48:	4b0b      	ldr	r3, [pc, #44]	; (7a78 <_gclk_init_generators_by_fref+0x68>)
    7a4a:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7a4c:	4619      	mov	r1, r3
    7a4e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7a52:	684b      	ldr	r3, [r1, #4]
    7a54:	4213      	tst	r3, r2
    7a56:	d1fc      	bne.n	7a52 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    7a58:	f010 0f08 	tst.w	r0, #8
    7a5c:	d008      	beq.n	7a70 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7a5e:	4a09      	ldr	r2, [pc, #36]	; (7a84 <_gclk_init_generators_by_fref+0x74>)
    7a60:	4b05      	ldr	r3, [pc, #20]	; (7a78 <_gclk_init_generators_by_fref+0x68>)
    7a62:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7a64:	4619      	mov	r1, r3
    7a66:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7a6a:	684b      	ldr	r3, [r1, #4]
    7a6c:	4213      	tst	r3, r2
    7a6e:	d1fc      	bne.n	7a6a <_gclk_init_generators_by_fref+0x5a>
    7a70:	4770      	bx	lr
    7a72:	bf00      	nop
    7a74:	00010108 	.word	0x00010108
    7a78:	40001c00 	.word	0x40001c00
    7a7c:	00010106 	.word	0x00010106
    7a80:	00100106 	.word	0x00100106
    7a84:	00010104 	.word	0x00010104

00007a88 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    7a88:	2201      	movs	r2, #1
    7a8a:	4b01      	ldr	r3, [pc, #4]	; (7a90 <_mclk_init+0x8>)
    7a8c:	715a      	strb	r2, [r3, #5]
    7a8e:	4770      	bx	lr
    7a90:	40000800 	.word	0x40000800

00007a94 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    7a94:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    7a96:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    7a98:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    7a9a:	f012 0f01 	tst.w	r2, #1
    7a9e:	d005      	beq.n	7aac <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    7aa0:	2201      	movs	r2, #1
    7aa2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    7aa4:	6803      	ldr	r3, [r0, #0]
    7aa6:	b153      	cbz	r3, 7abe <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    7aa8:	4798      	blx	r3
    7aaa:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    7aac:	8a1a      	ldrh	r2, [r3, #16]
    7aae:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    7ab0:	b12a      	cbz	r2, 7abe <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    7ab2:	f240 225e 	movw	r2, #606	; 0x25e
    7ab6:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    7ab8:	6843      	ldr	r3, [r0, #4]
    7aba:	b103      	cbz	r3, 7abe <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    7abc:	4798      	blx	r3
    7abe:	bd08      	pop	{r3, pc}

00007ac0 <_flash_init>:
{
    7ac0:	b538      	push	{r3, r4, r5, lr}
    7ac2:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    7ac4:	4605      	mov	r5, r0
    7ac6:	b350      	cbz	r0, 7b1e <_flash_init+0x5e>
    7ac8:	4816      	ldr	r0, [pc, #88]	; (7b24 <_flash_init+0x64>)
    7aca:	4281      	cmp	r1, r0
    7acc:	bf14      	ite	ne
    7ace:	2000      	movne	r0, #0
    7ad0:	2001      	moveq	r0, #1
    7ad2:	224b      	movs	r2, #75	; 0x4b
    7ad4:	4914      	ldr	r1, [pc, #80]	; (7b28 <_flash_init+0x68>)
    7ad6:	4b15      	ldr	r3, [pc, #84]	; (7b2c <_flash_init+0x6c>)
    7ad8:	4798      	blx	r3
	device->hw = hw;
    7ada:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    7adc:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    7ade:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    7ae2:	049b      	lsls	r3, r3, #18
    7ae4:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    7ae6:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    7ae8:	4b11      	ldr	r3, [pc, #68]	; (7b30 <_flash_init+0x70>)
    7aea:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7aec:	4b11      	ldr	r3, [pc, #68]	; (7b34 <_flash_init+0x74>)
    7aee:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    7af2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7afa:	f3bf 8f6f 	isb	sy
    7afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7b06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7b0a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b0e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    7b12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b16:	6019      	str	r1, [r3, #0]
    7b18:	601a      	str	r2, [r3, #0]
}
    7b1a:	2000      	movs	r0, #0
    7b1c:	bd38      	pop	{r3, r4, r5, pc}
    7b1e:	2000      	movs	r0, #0
    7b20:	e7d7      	b.n	7ad2 <_flash_init+0x12>
    7b22:	bf00      	nop
    7b24:	41004000 	.word	0x41004000
    7b28:	0000ed88 	.word	0x0000ed88
    7b2c:	000070c1 	.word	0x000070c1
    7b30:	20000a00 	.word	0x20000a00
    7b34:	e000e100 	.word	0xe000e100

00007b38 <_flash_get_page_size>:
}
    7b38:	f44f 7000 	mov.w	r0, #512	; 0x200
    7b3c:	4770      	bx	lr

00007b3e <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    7b3e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    7b40:	6898      	ldr	r0, [r3, #8]
}
    7b42:	b280      	uxth	r0, r0
    7b44:	4770      	bx	lr

00007b46 <_flash_read>:
{
    7b46:	b410      	push	{r4}
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    7b48:	6904      	ldr	r4, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    7b4a:	8a60      	ldrh	r0, [r4, #18]
    7b4c:	f010 0f01 	tst.w	r0, #1
    7b50:	d0fb      	beq.n	7b4a <_flash_read+0x4>
	for (i = 0; i < length; i++) {
    7b52:	b143      	cbz	r3, 7b66 <_flash_read+0x20>
    7b54:	3901      	subs	r1, #1
    7b56:	4610      	mov	r0, r2
    7b58:	4413      	add	r3, r2
		buffer[i] = nvm_addr[src_addr + i];
    7b5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    7b5e:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < length; i++) {
    7b62:	4298      	cmp	r0, r3
    7b64:	d1f9      	bne.n	7b5a <_flash_read+0x14>
}
    7b66:	f85d 4b04 	ldr.w	r4, [sp], #4
    7b6a:	4770      	bx	lr

00007b6c <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    7b6c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    7b6e:	4b02      	ldr	r3, [pc, #8]	; (7b78 <NVMCTRL_0_Handler+0xc>)
    7b70:	6818      	ldr	r0, [r3, #0]
    7b72:	4b02      	ldr	r3, [pc, #8]	; (7b7c <NVMCTRL_0_Handler+0x10>)
    7b74:	4798      	blx	r3
    7b76:	bd08      	pop	{r3, pc}
    7b78:	20000a00 	.word	0x20000a00
    7b7c:	00007a95 	.word	0x00007a95

00007b80 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    7b80:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    7b82:	4b02      	ldr	r3, [pc, #8]	; (7b8c <NVMCTRL_1_Handler+0xc>)
    7b84:	6818      	ldr	r0, [r3, #0]
    7b86:	4b02      	ldr	r3, [pc, #8]	; (7b90 <NVMCTRL_1_Handler+0x10>)
    7b88:	4798      	blx	r3
    7b8a:	bd08      	pop	{r3, pc}
    7b8c:	20000a00 	.word	0x20000a00
    7b90:	00007a95 	.word	0x00007a95

00007b94 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    7b94:	4b03      	ldr	r3, [pc, #12]	; (7ba4 <_osc32kctrl_init_sources+0x10>)
    7b96:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    7b98:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    7b9c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    7b9e:	2201      	movs	r2, #1
    7ba0:	741a      	strb	r2, [r3, #16]
    7ba2:	4770      	bx	lr
    7ba4:	40001400 	.word	0x40001400

00007ba8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    7ba8:	4770      	bx	lr
	...

00007bac <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    7bac:	4a47      	ldr	r2, [pc, #284]	; (7ccc <_oscctrl_init_referenced_generators+0x120>)
    7bae:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7bb0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    7bb4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    7bb8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7bba:	4611      	mov	r1, r2
    7bbc:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7bc0:	684b      	ldr	r3, [r1, #4]
    7bc2:	4213      	tst	r3, r2
    7bc4:	d1fc      	bne.n	7bc0 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    7bc6:	4a41      	ldr	r2, [pc, #260]	; (7ccc <_oscctrl_init_referenced_generators+0x120>)
    7bc8:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7bca:	f013 0f04 	tst.w	r3, #4
    7bce:	d1fb      	bne.n	7bc8 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7bd0:	4b3f      	ldr	r3, [pc, #252]	; (7cd0 <_oscctrl_init_referenced_generators+0x124>)
    7bd2:	2200      	movs	r2, #0
    7bd4:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    7bd6:	4a3f      	ldr	r2, [pc, #252]	; (7cd4 <_oscctrl_init_referenced_generators+0x128>)
    7bd8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7bda:	461a      	mov	r2, r3
    7bdc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7be0:	f013 0f10 	tst.w	r3, #16
    7be4:	d1fa      	bne.n	7bdc <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    7be6:	2200      	movs	r2, #0
    7be8:	4b39      	ldr	r3, [pc, #228]	; (7cd0 <_oscctrl_init_referenced_generators+0x124>)
    7bea:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7bee:	461a      	mov	r2, r3
    7bf0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7bf4:	f013 0f04 	tst.w	r3, #4
    7bf8:	d1fa      	bne.n	7bf0 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7bfa:	2202      	movs	r2, #2
    7bfc:	4b34      	ldr	r3, [pc, #208]	; (7cd0 <_oscctrl_init_referenced_generators+0x124>)
    7bfe:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7c00:	461a      	mov	r2, r3
    7c02:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    7c06:	f013 0f02 	tst.w	r3, #2
    7c0a:	d1fa      	bne.n	7c02 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    7c0c:	4b30      	ldr	r3, [pc, #192]	; (7cd0 <_oscctrl_init_referenced_generators+0x124>)
    7c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    7c10:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7c12:	461a      	mov	r2, r3
    7c14:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    7c18:	f013 0f08 	tst.w	r3, #8
    7c1c:	d1fa      	bne.n	7c14 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    7c1e:	2288      	movs	r2, #136	; 0x88
    7c20:	4b2b      	ldr	r3, [pc, #172]	; (7cd0 <_oscctrl_init_referenced_generators+0x124>)
    7c22:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7c26:	461a      	mov	r2, r3
    7c28:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7c2c:	f013 0f04 	tst.w	r3, #4
    7c30:	d1fa      	bne.n	7c28 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    7c32:	2242      	movs	r2, #66	; 0x42
    7c34:	4b25      	ldr	r3, [pc, #148]	; (7ccc <_oscctrl_init_referenced_generators+0x120>)
    7c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    7c3a:	2227      	movs	r2, #39	; 0x27
    7c3c:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    7c40:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    7c42:	461a      	mov	r2, r3
    7c44:	6d13      	ldr	r3, [r2, #80]	; 0x50
    7c46:	f013 0f06 	tst.w	r3, #6
    7c4a:	d1fb      	bne.n	7c44 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    7c4c:	4b20      	ldr	r3, [pc, #128]	; (7cd0 <_oscctrl_init_referenced_generators+0x124>)
    7c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7c52:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    7c54:	2202      	movs	r2, #2
    7c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    7c5a:	461a      	mov	r2, r3
    7c5c:	6d13      	ldr	r3, [r2, #80]	; 0x50
    7c5e:	f013 0f02 	tst.w	r3, #2
    7c62:	d1fb      	bne.n	7c5c <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7c64:	4b1a      	ldr	r3, [pc, #104]	; (7cd0 <_oscctrl_init_referenced_generators+0x124>)
    7c66:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    7c6a:	f013 0f01 	tst.w	r3, #1
    7c6e:	d026      	beq.n	7cbe <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7c70:	4a17      	ldr	r2, [pc, #92]	; (7cd0 <_oscctrl_init_referenced_generators+0x124>)
    7c72:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    7c74:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    7c78:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    7c7c:	d1f9      	bne.n	7c72 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    7c7e:	4b14      	ldr	r3, [pc, #80]	; (7cd0 <_oscctrl_init_referenced_generators+0x124>)
    7c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    7c82:	f012 0f01 	tst.w	r2, #1
    7c86:	d103      	bne.n	7c90 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    7c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    7c8a:	f012 0f02 	tst.w	r2, #2
    7c8e:	d0f7      	beq.n	7c80 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    7c90:	4a0e      	ldr	r2, [pc, #56]	; (7ccc <_oscctrl_init_referenced_generators+0x120>)
    7c92:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    7c94:	2b00      	cmp	r3, #0
    7c96:	d1fc      	bne.n	7c92 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    7c98:	4a0c      	ldr	r2, [pc, #48]	; (7ccc <_oscctrl_init_referenced_generators+0x120>)
    7c9a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7c9c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    7ca0:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    7ca4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7ca6:	4611      	mov	r1, r2
    7ca8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    7cac:	684b      	ldr	r3, [r1, #4]
    7cae:	4213      	tst	r3, r2
    7cb0:	d1fc      	bne.n	7cac <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    7cb2:	4a06      	ldr	r2, [pc, #24]	; (7ccc <_oscctrl_init_referenced_generators+0x120>)
    7cb4:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7cb6:	f013 0f04 	tst.w	r3, #4
    7cba:	d1fb      	bne.n	7cb4 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    7cbc:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    7cbe:	4a04      	ldr	r2, [pc, #16]	; (7cd0 <_oscctrl_init_referenced_generators+0x124>)
    7cc0:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    7cc2:	f413 7f80 	tst.w	r3, #256	; 0x100
    7cc6:	d0fb      	beq.n	7cc0 <_oscctrl_init_referenced_generators+0x114>
    7cc8:	e7d9      	b.n	7c7e <_oscctrl_init_referenced_generators+0xd2>
    7cca:	bf00      	nop
    7ccc:	40001c00 	.word	0x40001c00
    7cd0:	40001000 	.word	0x40001000
    7cd4:	04010000 	.word	0x04010000

00007cd8 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    7cd8:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    7cda:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    7cdc:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7cde:	4903      	ldr	r1, [pc, #12]	; (7cec <_qspi_dma_rx_complete+0x14>)
    7ce0:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    7ce2:	685b      	ldr	r3, [r3, #4]
    7ce4:	b103      	cbz	r3, 7ce8 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    7ce6:	4798      	blx	r3
    7ce8:	bd08      	pop	{r3, pc}
    7cea:	bf00      	nop
    7cec:	01000002 	.word	0x01000002

00007cf0 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    7cf0:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    7cf2:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    7cf4:	681a      	ldr	r2, [r3, #0]
    7cf6:	4903      	ldr	r1, [pc, #12]	; (7d04 <_qspi_dma_tx_complete+0x14>)
    7cf8:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    7cfa:	685b      	ldr	r3, [r3, #4]
    7cfc:	b103      	cbz	r3, 7d00 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    7cfe:	4798      	blx	r3
    7d00:	bd08      	pop	{r3, pc}
    7d02:	bf00      	nop
    7d04:	01000002 	.word	0x01000002

00007d08 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    7d08:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    7d0a:	6883      	ldr	r3, [r0, #8]
    7d0c:	689b      	ldr	r3, [r3, #8]
    7d0e:	b103      	cbz	r3, 7d12 <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    7d10:	4798      	blx	r3
    7d12:	bd08      	pop	{r3, pc}

00007d14 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    7d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d16:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    7d18:	4604      	mov	r4, r0
    7d1a:	2800      	cmp	r0, #0
    7d1c:	d027      	beq.n	7d6e <_qspi_dma_init+0x5a>
    7d1e:	1c08      	adds	r0, r1, #0
    7d20:	bf18      	it	ne
    7d22:	2001      	movne	r0, #1
    7d24:	22cb      	movs	r2, #203	; 0xcb
    7d26:	4913      	ldr	r1, [pc, #76]	; (7d74 <_qspi_dma_init+0x60>)
    7d28:	4b13      	ldr	r3, [pc, #76]	; (7d78 <_qspi_dma_init+0x64>)
    7d2a:	4798      	blx	r3
	dev->prvt = hw;
    7d2c:	4626      	mov	r6, r4
    7d2e:	f846 5b0c 	str.w	r5, [r6], #12
    7d32:	2301      	movs	r3, #1
    7d34:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    7d36:	4b11      	ldr	r3, [pc, #68]	; (7d7c <_qspi_dma_init+0x68>)
    7d38:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    7d3a:	4b11      	ldr	r3, [pc, #68]	; (7d80 <_qspi_dma_init+0x6c>)
    7d3c:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    7d3e:	211f      	movs	r1, #31
    7d40:	4630      	mov	r0, r6
    7d42:	4f10      	ldr	r7, [pc, #64]	; (7d84 <_qspi_dma_init+0x70>)
    7d44:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7d46:	68e3      	ldr	r3, [r4, #12]
    7d48:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    7d4a:	68e3      	ldr	r3, [r4, #12]
    7d4c:	4a0e      	ldr	r2, [pc, #56]	; (7d88 <_qspi_dma_init+0x74>)
    7d4e:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    7d50:	68e3      	ldr	r3, [r4, #12]
    7d52:	4d0e      	ldr	r5, [pc, #56]	; (7d8c <_qspi_dma_init+0x78>)
    7d54:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    7d56:	211e      	movs	r1, #30
    7d58:	4630      	mov	r0, r6
    7d5a:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7d5c:	68e3      	ldr	r3, [r4, #12]
    7d5e:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    7d60:	68e3      	ldr	r3, [r4, #12]
    7d62:	4a0b      	ldr	r2, [pc, #44]	; (7d90 <_qspi_dma_init+0x7c>)
    7d64:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    7d66:	68e3      	ldr	r3, [r4, #12]
    7d68:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    7d6a:	2000      	movs	r0, #0
    7d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d6e:	2000      	movs	r0, #0
    7d70:	e7d8      	b.n	7d24 <_qspi_dma_init+0x10>
    7d72:	bf00      	nop
    7d74:	0000eda8 	.word	0x0000eda8
    7d78:	000070c1 	.word	0x000070c1
    7d7c:	06000011 	.word	0x06000011
    7d80:	00243b00 	.word	0x00243b00
    7d84:	0000795d 	.word	0x0000795d
    7d88:	00007cd9 	.word	0x00007cd9
    7d8c:	00007d09 	.word	0x00007d09
    7d90:	00007cf1 	.word	0x00007cf1

00007d94 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    7d94:	b500      	push	{lr}
    7d96:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    7d98:	4b0d      	ldr	r3, [pc, #52]	; (7dd0 <RAMECC_Handler+0x3c>)
    7d9a:	789b      	ldrb	r3, [r3, #2]
    7d9c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    7d9e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    7da0:	9b01      	ldr	r3, [sp, #4]
    7da2:	f013 0f02 	tst.w	r3, #2
    7da6:	d006      	beq.n	7db6 <RAMECC_Handler+0x22>
    7da8:	4b0a      	ldr	r3, [pc, #40]	; (7dd4 <RAMECC_Handler+0x40>)
    7daa:	681b      	ldr	r3, [r3, #0]
    7dac:	b11b      	cbz	r3, 7db6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    7dae:	4a08      	ldr	r2, [pc, #32]	; (7dd0 <RAMECC_Handler+0x3c>)
    7db0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    7db2:	4798      	blx	r3
    7db4:	e009      	b.n	7dca <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    7db6:	9b01      	ldr	r3, [sp, #4]
    7db8:	f013 0f01 	tst.w	r3, #1
    7dbc:	d005      	beq.n	7dca <RAMECC_Handler+0x36>
    7dbe:	4b05      	ldr	r3, [pc, #20]	; (7dd4 <RAMECC_Handler+0x40>)
    7dc0:	685b      	ldr	r3, [r3, #4]
    7dc2:	b113      	cbz	r3, 7dca <RAMECC_Handler+0x36>
    7dc4:	4a02      	ldr	r2, [pc, #8]	; (7dd0 <RAMECC_Handler+0x3c>)
    7dc6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    7dc8:	4798      	blx	r3
	} else {
		return;
	}
}
    7dca:	b003      	add	sp, #12
    7dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    7dd0:	41020000 	.word	0x41020000
    7dd4:	20007d70 	.word	0x20007d70

00007dd8 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    7dd8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    7dda:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7ddc:	6913      	ldr	r3, [r2, #16]
    7dde:	f013 0f60 	tst.w	r3, #96	; 0x60
    7de2:	d1fb      	bne.n	7ddc <_rtc_timer_set_period+0x4>
}
    7de4:	4770      	bx	lr

00007de6 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    7de6:	68c2      	ldr	r2, [r0, #12]
    7de8:	6913      	ldr	r3, [r2, #16]
    7dea:	f013 0f60 	tst.w	r3, #96	; 0x60
    7dee:	d1fb      	bne.n	7de8 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    7df0:	6a10      	ldr	r0, [r2, #32]
}
    7df2:	4770      	bx	lr

00007df4 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    7df4:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7df6:	f248 0103 	movw	r1, #32771	; 0x8003
    7dfa:	6913      	ldr	r3, [r2, #16]
    7dfc:	420b      	tst	r3, r1
    7dfe:	d1fc      	bne.n	7dfa <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    7e00:	8810      	ldrh	r0, [r2, #0]
}
    7e02:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7e06:	4770      	bx	lr

00007e08 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    7e08:	4770      	bx	lr
	...

00007e0c <_rtc_timer_init>:
{
    7e0c:	b538      	push	{r3, r4, r5, lr}
    7e0e:	460c      	mov	r4, r1
	ASSERT(dev);
    7e10:	4605      	mov	r5, r0
    7e12:	2230      	movs	r2, #48	; 0x30
    7e14:	4914      	ldr	r1, [pc, #80]	; (7e68 <_rtc_timer_init+0x5c>)
    7e16:	3000      	adds	r0, #0
    7e18:	bf18      	it	ne
    7e1a:	2001      	movne	r0, #1
    7e1c:	4b13      	ldr	r3, [pc, #76]	; (7e6c <_rtc_timer_init+0x60>)
    7e1e:	4798      	blx	r3
	dev->hw = hw;
    7e20:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7e22:	2301      	movs	r3, #1
    7e24:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7e26:	f248 0203 	movw	r2, #32771	; 0x8003
    7e2a:	6923      	ldr	r3, [r4, #16]
    7e2c:	4213      	tst	r3, r2
    7e2e:	d1fc      	bne.n	7e2a <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    7e30:	68eb      	ldr	r3, [r5, #12]
    7e32:	691a      	ldr	r2, [r3, #16]
    7e34:	f012 0f01 	tst.w	r2, #1
    7e38:	d1fb      	bne.n	7e32 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7e3a:	f248 0280 	movw	r2, #32896	; 0x8080
    7e3e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7e40:	f248 0103 	movw	r1, #32771	; 0x8003
    7e44:	691a      	ldr	r2, [r3, #16]
    7e46:	420a      	tst	r2, r1
    7e48:	d1fc      	bne.n	7e44 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    7e4a:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    7e4c:	2301      	movs	r3, #1
    7e4e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7e50:	6913      	ldr	r3, [r2, #16]
    7e52:	f013 0f60 	tst.w	r3, #96	; 0x60
    7e56:	d1fb      	bne.n	7e50 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    7e58:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    7e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
    7e5e:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    7e60:	4b03      	ldr	r3, [pc, #12]	; (7e70 <_rtc_timer_init+0x64>)
    7e62:	601d      	str	r5, [r3, #0]
}
    7e64:	2000      	movs	r0, #0
    7e66:	bd38      	pop	{r3, r4, r5, pc}
    7e68:	0000edc0 	.word	0x0000edc0
    7e6c:	000070c1 	.word	0x000070c1
    7e70:	20000a04 	.word	0x20000a04

00007e74 <_rtc_timer_deinit>:
{
    7e74:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    7e76:	4604      	mov	r4, r0
    7e78:	b1c8      	cbz	r0, 7eae <_rtc_timer_deinit+0x3a>
    7e7a:	68c0      	ldr	r0, [r0, #12]
    7e7c:	3000      	adds	r0, #0
    7e7e:	bf18      	it	ne
    7e80:	2001      	movne	r0, #1
    7e82:	2252      	movs	r2, #82	; 0x52
    7e84:	490b      	ldr	r1, [pc, #44]	; (7eb4 <_rtc_timer_deinit+0x40>)
    7e86:	4b0c      	ldr	r3, [pc, #48]	; (7eb8 <_rtc_timer_deinit+0x44>)
    7e88:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7e8e:	4b0b      	ldr	r3, [pc, #44]	; (7ebc <_rtc_timer_deinit+0x48>)
    7e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7e94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7e98:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    7e9c:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7e9e:	2301      	movs	r3, #1
    7ea0:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7ea2:	f248 0103 	movw	r1, #32771	; 0x8003
    7ea6:	6913      	ldr	r3, [r2, #16]
    7ea8:	420b      	tst	r3, r1
    7eaa:	d1fc      	bne.n	7ea6 <_rtc_timer_deinit+0x32>
}
    7eac:	bd10      	pop	{r4, pc}
    7eae:	2000      	movs	r0, #0
    7eb0:	e7e7      	b.n	7e82 <_rtc_timer_deinit+0xe>
    7eb2:	bf00      	nop
    7eb4:	0000edc0 	.word	0x0000edc0
    7eb8:	000070c1 	.word	0x000070c1
    7ebc:	e000e100 	.word	0xe000e100

00007ec0 <_rtc_timer_start>:
{
    7ec0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    7ec2:	4604      	mov	r4, r0
    7ec4:	b310      	cbz	r0, 7f0c <_rtc_timer_start+0x4c>
    7ec6:	68c0      	ldr	r0, [r0, #12]
    7ec8:	3000      	adds	r0, #0
    7eca:	bf18      	it	ne
    7ecc:	2001      	movne	r0, #1
    7ece:	225e      	movs	r2, #94	; 0x5e
    7ed0:	490f      	ldr	r1, [pc, #60]	; (7f10 <_rtc_timer_start+0x50>)
    7ed2:	4b10      	ldr	r3, [pc, #64]	; (7f14 <_rtc_timer_start+0x54>)
    7ed4:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ed6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7eda:	4b0f      	ldr	r3, [pc, #60]	; (7f18 <_rtc_timer_start+0x58>)
    7edc:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    7ede:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    7ee0:	2300      	movs	r3, #0
    7ee2:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7ee4:	6913      	ldr	r3, [r2, #16]
    7ee6:	f013 0f08 	tst.w	r3, #8
    7eea:	d1fb      	bne.n	7ee4 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    7eec:	68e3      	ldr	r3, [r4, #12]
    7eee:	691a      	ldr	r2, [r3, #16]
    7ef0:	f012 0f08 	tst.w	r2, #8
    7ef4:	d1fb      	bne.n	7eee <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    7ef6:	881a      	ldrh	r2, [r3, #0]
    7ef8:	b292      	uxth	r2, r2
    7efa:	f042 0202 	orr.w	r2, r2, #2
    7efe:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7f00:	f248 0103 	movw	r1, #32771	; 0x8003
    7f04:	691a      	ldr	r2, [r3, #16]
    7f06:	420a      	tst	r2, r1
    7f08:	d1fc      	bne.n	7f04 <_rtc_timer_start+0x44>
}
    7f0a:	bd10      	pop	{r4, pc}
    7f0c:	2000      	movs	r0, #0
    7f0e:	e7de      	b.n	7ece <_rtc_timer_start+0xe>
    7f10:	0000edc0 	.word	0x0000edc0
    7f14:	000070c1 	.word	0x000070c1
    7f18:	e000e100 	.word	0xe000e100

00007f1c <_rtc_timer_stop>:
{
    7f1c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    7f1e:	4604      	mov	r4, r0
    7f20:	b1a0      	cbz	r0, 7f4c <_rtc_timer_stop+0x30>
    7f22:	68c0      	ldr	r0, [r0, #12]
    7f24:	3000      	adds	r0, #0
    7f26:	bf18      	it	ne
    7f28:	2001      	movne	r0, #1
    7f2a:	226b      	movs	r2, #107	; 0x6b
    7f2c:	4908      	ldr	r1, [pc, #32]	; (7f50 <_rtc_timer_stop+0x34>)
    7f2e:	4b09      	ldr	r3, [pc, #36]	; (7f54 <_rtc_timer_stop+0x38>)
    7f30:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    7f32:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    7f34:	8813      	ldrh	r3, [r2, #0]
    7f36:	f023 0302 	bic.w	r3, r3, #2
    7f3a:	041b      	lsls	r3, r3, #16
    7f3c:	0c1b      	lsrs	r3, r3, #16
    7f3e:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7f40:	f248 0103 	movw	r1, #32771	; 0x8003
    7f44:	6913      	ldr	r3, [r2, #16]
    7f46:	420b      	tst	r3, r1
    7f48:	d1fc      	bne.n	7f44 <_rtc_timer_stop+0x28>
}
    7f4a:	bd10      	pop	{r4, pc}
    7f4c:	2000      	movs	r0, #0
    7f4e:	e7ec      	b.n	7f2a <_rtc_timer_stop+0xe>
    7f50:	0000edc0 	.word	0x0000edc0
    7f54:	000070c1 	.word	0x000070c1

00007f58 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    7f58:	4800      	ldr	r0, [pc, #0]	; (7f5c <_rtc_get_timer+0x4>)
    7f5a:	4770      	bx	lr
    7f5c:	20000348 	.word	0x20000348

00007f60 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    7f60:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    7f62:	4b08      	ldr	r3, [pc, #32]	; (7f84 <RTC_Handler+0x24>)
    7f64:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    7f66:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    7f68:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    7f6a:	f413 7f80 	tst.w	r3, #256	; 0x100
    7f6e:	d007      	beq.n	7f80 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    7f70:	6823      	ldr	r3, [r4, #0]
    7f72:	b10b      	cbz	r3, 7f78 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    7f74:	4620      	mov	r0, r4
    7f76:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    7f78:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    7f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
    7f7e:	819a      	strh	r2, [r3, #12]
    7f80:	bd10      	pop	{r4, pc}
    7f82:	bf00      	nop
    7f84:	20000a04 	.word	0x20000a04

00007f88 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    7f88:	b470      	push	{r4, r5, r6}
    7f8a:	b089      	sub	sp, #36	; 0x24
    7f8c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    7f8e:	466c      	mov	r4, sp
    7f90:	4d0d      	ldr	r5, [pc, #52]	; (7fc8 <_sercom_get_hardware_index+0x40>)
    7f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7f96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    7f9e:	9b00      	ldr	r3, [sp, #0]
    7fa0:	42b3      	cmp	r3, r6
    7fa2:	d00d      	beq.n	7fc0 <_sercom_get_hardware_index+0x38>
    7fa4:	4631      	mov	r1, r6
    7fa6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7fa8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    7faa:	f853 2b04 	ldr.w	r2, [r3], #4
    7fae:	428a      	cmp	r2, r1
    7fb0:	d007      	beq.n	7fc2 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7fb2:	3001      	adds	r0, #1
    7fb4:	2808      	cmp	r0, #8
    7fb6:	d1f8      	bne.n	7faa <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    7fb8:	2000      	movs	r0, #0
}
    7fba:	b009      	add	sp, #36	; 0x24
    7fbc:	bc70      	pop	{r4, r5, r6}
    7fbe:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7fc0:	2000      	movs	r0, #0
			return i;
    7fc2:	b2c0      	uxtb	r0, r0
    7fc4:	e7f9      	b.n	7fba <_sercom_get_hardware_index+0x32>
    7fc6:	bf00      	nop
    7fc8:	0000edd8 	.word	0x0000edd8

00007fcc <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    7fcc:	b510      	push	{r4, lr}
	void *hw = device->hw;
    7fce:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    7fd0:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    7fd2:	f013 0f01 	tst.w	r3, #1
    7fd6:	d003      	beq.n	7fe0 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    7fd8:	7da3      	ldrb	r3, [r4, #22]
    7fda:	f013 0f01 	tst.w	r3, #1
    7fde:	d112      	bne.n	8006 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7fe0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    7fe2:	f013 0f02 	tst.w	r3, #2
    7fe6:	d003      	beq.n	7ff0 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    7fe8:	7da3      	ldrb	r3, [r4, #22]
    7fea:	f013 0f02 	tst.w	r3, #2
    7fee:	d10f      	bne.n	8010 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    7ff0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    7ff2:	f013 0f04 	tst.w	r3, #4
    7ff6:	d015      	beq.n	8024 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    7ff8:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    7ffa:	f003 0337 	and.w	r3, r3, #55	; 0x37
    7ffe:	b163      	cbz	r3, 801a <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    8000:	23ff      	movs	r3, #255	; 0xff
    8002:	8363      	strh	r3, [r4, #26]
    8004:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    8006:	2301      	movs	r3, #1
    8008:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    800a:	6803      	ldr	r3, [r0, #0]
    800c:	4798      	blx	r3
    800e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    8010:	2302      	movs	r3, #2
    8012:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    8014:	6883      	ldr	r3, [r0, #8]
    8016:	4798      	blx	r3
    8018:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    801a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    801c:	6843      	ldr	r3, [r0, #4]
    801e:	b2c9      	uxtb	r1, r1
    8020:	4798      	blx	r3
    8022:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    8024:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    8026:	09db      	lsrs	r3, r3, #7
    8028:	d100      	bne.n	802c <_sercom_usart_interrupt_handler+0x60>
    802a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    802c:	2380      	movs	r3, #128	; 0x80
    802e:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    8030:	68c3      	ldr	r3, [r0, #12]
    8032:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    8034:	8b63      	ldrh	r3, [r4, #26]
    8036:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    8038:	8363      	strh	r3, [r4, #26]
    803a:	e7f6      	b.n	802a <_sercom_usart_interrupt_handler+0x5e>

0000803c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    803c:	4b11      	ldr	r3, [pc, #68]	; (8084 <_sercom_init_irq_param+0x48>)
    803e:	4298      	cmp	r0, r3
    8040:	d011      	beq.n	8066 <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    8042:	4b11      	ldr	r3, [pc, #68]	; (8088 <_sercom_init_irq_param+0x4c>)
    8044:	4298      	cmp	r0, r3
    8046:	d011      	beq.n	806c <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    8048:	4b10      	ldr	r3, [pc, #64]	; (808c <_sercom_init_irq_param+0x50>)
    804a:	4298      	cmp	r0, r3
    804c:	d011      	beq.n	8072 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    804e:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    8052:	d011      	beq.n	8078 <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    8054:	4b0e      	ldr	r3, [pc, #56]	; (8090 <_sercom_init_irq_param+0x54>)
    8056:	4298      	cmp	r0, r3
    8058:	d011      	beq.n	807e <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    805a:	4b0e      	ldr	r3, [pc, #56]	; (8094 <_sercom_init_irq_param+0x58>)
    805c:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    805e:	bf04      	itt	eq
    8060:	4b0d      	ldreq	r3, [pc, #52]	; (8098 <_sercom_init_irq_param+0x5c>)
    8062:	6159      	streq	r1, [r3, #20]
    8064:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    8066:	4b0c      	ldr	r3, [pc, #48]	; (8098 <_sercom_init_irq_param+0x5c>)
    8068:	6019      	str	r1, [r3, #0]
    806a:	e7f0      	b.n	804e <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    806c:	4b0a      	ldr	r3, [pc, #40]	; (8098 <_sercom_init_irq_param+0x5c>)
    806e:	6059      	str	r1, [r3, #4]
    8070:	e7f0      	b.n	8054 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    8072:	4b09      	ldr	r3, [pc, #36]	; (8098 <_sercom_init_irq_param+0x5c>)
    8074:	6099      	str	r1, [r3, #8]
    8076:	e7f0      	b.n	805a <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    8078:	4b07      	ldr	r3, [pc, #28]	; (8098 <_sercom_init_irq_param+0x5c>)
    807a:	60d9      	str	r1, [r3, #12]
    807c:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    807e:	4b06      	ldr	r3, [pc, #24]	; (8098 <_sercom_init_irq_param+0x5c>)
    8080:	6119      	str	r1, [r3, #16]
    8082:	4770      	bx	lr
    8084:	40003000 	.word	0x40003000
    8088:	40003400 	.word	0x40003400
    808c:	41014000 	.word	0x41014000
    8090:	43000400 	.word	0x43000400
    8094:	43000800 	.word	0x43000800
    8098:	20000a08 	.word	0x20000a08

0000809c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    809c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    809e:	4b03      	ldr	r3, [pc, #12]	; (80ac <_sercom_get_irq_num+0x10>)
    80a0:	4798      	blx	r3
    80a2:	0080      	lsls	r0, r0, #2
    80a4:	302e      	adds	r0, #46	; 0x2e
}
    80a6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    80aa:	bd08      	pop	{r3, pc}
    80ac:	00007f89 	.word	0x00007f89

000080b0 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    80b0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    80b2:	f013 0f01 	tst.w	r3, #1
    80b6:	d109      	bne.n	80cc <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    80b8:	6803      	ldr	r3, [r0, #0]
    80ba:	f043 0302 	orr.w	r3, r3, #2
    80be:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    80c0:	69c3      	ldr	r3, [r0, #28]
    80c2:	f013 0f03 	tst.w	r3, #3
    80c6:	d1fb      	bne.n	80c0 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    80c8:	2000      	movs	r0, #0
    80ca:	4770      	bx	lr
		return ERR_BUSY;
    80cc:	f06f 0003 	mvn.w	r0, #3
}
    80d0:	4770      	bx	lr
	...

000080d4 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    80d4:	b538      	push	{r3, r4, r5, lr}
    80d6:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    80d8:	4b0b      	ldr	r3, [pc, #44]	; (8108 <_spi_async_enable+0x34>)
    80da:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    80dc:	4620      	mov	r0, r4
    80de:	4b0b      	ldr	r3, [pc, #44]	; (810c <_spi_async_enable+0x38>)
    80e0:	4798      	blx	r3
    80e2:	1d01      	adds	r1, r0, #4
    80e4:	b2c9      	uxtb	r1, r1
    80e6:	2501      	movs	r5, #1
    80e8:	4c09      	ldr	r4, [pc, #36]	; (8110 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    80ea:	1c43      	adds	r3, r0, #1
    80ec:	b2db      	uxtb	r3, r3
    80ee:	0942      	lsrs	r2, r0, #5
    80f0:	f000 001f 	and.w	r0, r0, #31
    80f4:	fa05 f000 	lsl.w	r0, r5, r0
    80f8:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    80fc:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    80fe:	4299      	cmp	r1, r3
    8100:	d1f3      	bne.n	80ea <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    8102:	2000      	movs	r0, #0
    8104:	bd38      	pop	{r3, r4, r5, pc}
    8106:	bf00      	nop
    8108:	000080b1 	.word	0x000080b1
    810c:	0000809d 	.word	0x0000809d
    8110:	e000e100 	.word	0xe000e100

00008114 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8114:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    8116:	f013 0f03 	tst.w	r3, #3
    811a:	d111      	bne.n	8140 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    811c:	69c3      	ldr	r3, [r0, #28]
    811e:	f013 0f03 	tst.w	r3, #3
    8122:	d1fb      	bne.n	811c <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    8124:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    8126:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    812a:	0709      	lsls	r1, r1, #28
    812c:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    8130:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8132:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8134:	69c3      	ldr	r3, [r0, #28]
    8136:	f013 0f03 	tst.w	r3, #3
    813a:	d1fb      	bne.n	8134 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    813c:	2000      	movs	r0, #0
    813e:	4770      	bx	lr
		return ERR_BUSY;
    8140:	f06f 0003 	mvn.w	r0, #3
}
    8144:	4770      	bx	lr

00008146 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    8146:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    8148:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    814a:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    814c:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    814e:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    8150:	f013 0f01 	tst.w	r3, #1
    8154:	d109      	bne.n	816a <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    8156:	f013 0f04 	tst.w	r3, #4
    815a:	d109      	bne.n	8170 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    815c:	f013 0f02 	tst.w	r3, #2
    8160:	d109      	bne.n	8176 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    8162:	f013 0f80 	tst.w	r3, #128	; 0x80
    8166:	d10b      	bne.n	8180 <_spi_handler+0x3a>
    8168:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    816a:	6883      	ldr	r3, [r0, #8]
    816c:	4798      	blx	r3
    816e:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    8170:	68c3      	ldr	r3, [r0, #12]
    8172:	4798      	blx	r3
    8174:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    8176:	2302      	movs	r3, #2
    8178:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    817a:	6903      	ldr	r3, [r0, #16]
    817c:	4798      	blx	r3
    817e:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    8180:	2304      	movs	r3, #4
    8182:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    8184:	2380      	movs	r3, #128	; 0x80
    8186:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    8188:	6943      	ldr	r3, [r0, #20]
    818a:	f06f 0112 	mvn.w	r1, #18
    818e:	4798      	blx	r3
	}
}
    8190:	e7ea      	b.n	8168 <_spi_handler+0x22>
	...

00008194 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    8194:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    8196:	4b03      	ldr	r3, [pc, #12]	; (81a4 <_spi_get_tx_dma_channel+0x10>)
    8198:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    819a:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    819c:	bf0c      	ite	eq
    819e:	2008      	moveq	r0, #8
    81a0:	2000      	movne	r0, #0
    81a2:	bd08      	pop	{r3, pc}
    81a4:	00007f89 	.word	0x00007f89

000081a8 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    81a8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    81aa:	4b03      	ldr	r3, [pc, #12]	; (81b8 <_spi_get_rx_dma_channel+0x10>)
    81ac:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    81ae:	2807      	cmp	r0, #7
    81b0:	bf8c      	ite	hi
    81b2:	2000      	movhi	r0, #0
    81b4:	2001      	movls	r0, #1
    81b6:	bd08      	pop	{r3, pc}
    81b8:	00007f89 	.word	0x00007f89

000081bc <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    81bc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    81be:	6883      	ldr	r3, [r0, #8]
    81c0:	689b      	ldr	r3, [r3, #8]
    81c2:	b103      	cbz	r3, 81c6 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    81c4:	4798      	blx	r3
    81c6:	bd08      	pop	{r3, pc}

000081c8 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    81c8:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    81ca:	6883      	ldr	r3, [r0, #8]
    81cc:	685b      	ldr	r3, [r3, #4]
    81ce:	b103      	cbz	r3, 81d2 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    81d0:	4798      	blx	r3
    81d2:	bd08      	pop	{r3, pc}

000081d4 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    81d4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    81d6:	6883      	ldr	r3, [r0, #8]
    81d8:	68db      	ldr	r3, [r3, #12]
    81da:	b103      	cbz	r3, 81de <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    81dc:	4798      	blx	r3
    81de:	bd08      	pop	{r3, pc}

000081e0 <_usart_init>:
{
    81e0:	b510      	push	{r4, lr}
    81e2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    81e4:	4b48      	ldr	r3, [pc, #288]	; (8308 <_usart_init+0x128>)
    81e6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    81e8:	2800      	cmp	r0, #0
    81ea:	d06a      	beq.n	82c2 <_usart_init+0xe2>
    81ec:	2801      	cmp	r0, #1
    81ee:	d062      	beq.n	82b6 <_usart_init+0xd6>
    81f0:	2802      	cmp	r0, #2
    81f2:	d062      	beq.n	82ba <_usart_init+0xda>
    81f4:	2804      	cmp	r0, #4
    81f6:	d062      	beq.n	82be <_usart_init+0xde>
    81f8:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    81fa:	bf08      	it	eq
    81fc:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    81fe:	d006      	beq.n	820e <_usart_init+0x2e>
	ASSERT(false);
    8200:	f240 2276 	movw	r2, #630	; 0x276
    8204:	4941      	ldr	r1, [pc, #260]	; (830c <_usart_init+0x12c>)
    8206:	2000      	movs	r0, #0
    8208:	4b41      	ldr	r3, [pc, #260]	; (8310 <_usart_init+0x130>)
    820a:	4798      	blx	r3
	return 0;
    820c:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    820e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    8210:	f013 0f01 	tst.w	r3, #1
    8214:	d122      	bne.n	825c <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    8216:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    821a:	4a3e      	ldr	r2, [pc, #248]	; (8314 <_usart_init+0x134>)
    821c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8222:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8226:	69e3      	ldr	r3, [r4, #28]
    8228:	f013 0f03 	tst.w	r3, #3
    822c:	d1fb      	bne.n	8226 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    822e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    8230:	f013 0f02 	tst.w	r3, #2
    8234:	d00b      	beq.n	824e <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    8236:	6823      	ldr	r3, [r4, #0]
    8238:	f023 0302 	bic.w	r3, r3, #2
    823c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    823e:	69e3      	ldr	r3, [r4, #28]
    8240:	f013 0f03 	tst.w	r3, #3
    8244:	d1fb      	bne.n	823e <_usart_init+0x5e>
    8246:	69e3      	ldr	r3, [r4, #28]
    8248:	f013 0f02 	tst.w	r3, #2
    824c:	d1fb      	bne.n	8246 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    824e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    8252:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8254:	69e3      	ldr	r3, [r4, #28]
    8256:	f013 0f03 	tst.w	r3, #3
    825a:	d1fb      	bne.n	8254 <_usart_init+0x74>
    825c:	69e3      	ldr	r3, [r4, #28]
    825e:	f013 0f01 	tst.w	r3, #1
    8262:	d1fb      	bne.n	825c <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    8264:	460a      	mov	r2, r1
    8266:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    826a:	4b2a      	ldr	r3, [pc, #168]	; (8314 <_usart_init+0x134>)
    826c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    8270:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    8272:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8274:	69e3      	ldr	r3, [r4, #28]
    8276:	f013 0f03 	tst.w	r3, #3
    827a:	d1fb      	bne.n	8274 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    827c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    8280:	4924      	ldr	r1, [pc, #144]	; (8314 <_usart_init+0x134>)
    8282:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    8286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    8288:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    828a:	69e3      	ldr	r3, [r4, #28]
    828c:	f013 0f1f 	tst.w	r3, #31
    8290:	d1fb      	bne.n	828a <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    8292:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    8296:	491f      	ldr	r1, [pc, #124]	; (8314 <_usart_init+0x134>)
    8298:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    829e:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    82a0:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    82a4:	d10f      	bne.n	82c6 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    82a6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    82aa:	491a      	ldr	r1, [pc, #104]	; (8314 <_usart_init+0x134>)
    82ac:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    82b0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    82b2:	81a3      	strh	r3, [r4, #12]
    82b4:	e016      	b.n	82e4 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    82b6:	2101      	movs	r1, #1
    82b8:	e7a9      	b.n	820e <_usart_init+0x2e>
    82ba:	2102      	movs	r1, #2
    82bc:	e7a7      	b.n	820e <_usart_init+0x2e>
    82be:	2103      	movs	r1, #3
    82c0:	e7a5      	b.n	820e <_usart_init+0x2e>
    82c2:	2100      	movs	r1, #0
    82c4:	e7a3      	b.n	820e <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    82c6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    82ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    82ce:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    82d0:	89a1      	ldrh	r1, [r4, #12]
    82d2:	f360 010c 	bfi	r1, r0, #0, #13
    82d6:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    82d8:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    82dc:	89a3      	ldrh	r3, [r4, #12]
    82de:	f361 334f 	bfi	r3, r1, #13, #3
    82e2:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    82e4:	4b0b      	ldr	r3, [pc, #44]	; (8314 <_usart_init+0x134>)
    82e6:	0051      	lsls	r1, r2, #1
    82e8:	1888      	adds	r0, r1, r2
    82ea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    82ee:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    82f2:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    82f4:	440a      	add	r2, r1
    82f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    82fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    82fe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    8302:	2000      	movs	r0, #0
    8304:	bd10      	pop	{r4, pc}
    8306:	bf00      	nop
    8308:	00007f89 	.word	0x00007f89
    830c:	0000eeac 	.word	0x0000eeac
    8310:	000070c1 	.word	0x000070c1
    8314:	0000edd8 	.word	0x0000edd8

00008318 <_get_i2cm_index>:
{
    8318:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    831a:	4b07      	ldr	r3, [pc, #28]	; (8338 <_get_i2cm_index+0x20>)
    831c:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    831e:	2805      	cmp	r0, #5
    8320:	d008      	beq.n	8334 <_get_i2cm_index+0x1c>
	ASSERT(false);
    8322:	f240 32ed 	movw	r2, #1005	; 0x3ed
    8326:	4905      	ldr	r1, [pc, #20]	; (833c <_get_i2cm_index+0x24>)
    8328:	2000      	movs	r0, #0
    832a:	4b05      	ldr	r3, [pc, #20]	; (8340 <_get_i2cm_index+0x28>)
    832c:	4798      	blx	r3
	return -1;
    832e:	f04f 30ff 	mov.w	r0, #4294967295
}
    8332:	bd08      	pop	{r3, pc}
			return i;
    8334:	2000      	movs	r0, #0
    8336:	bd08      	pop	{r3, pc}
    8338:	00007f89 	.word	0x00007f89
    833c:	0000eeac 	.word	0x0000eeac
    8340:	000070c1 	.word	0x000070c1

00008344 <_i2c_m_sync_init_impl>:
{
    8344:	b538      	push	{r3, r4, r5, lr}
    8346:	4605      	mov	r5, r0
    8348:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    834a:	4608      	mov	r0, r1
    834c:	4b34      	ldr	r3, [pc, #208]	; (8420 <_i2c_m_sync_init_impl+0xdc>)
    834e:	4798      	blx	r3
    8350:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    8352:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    8354:	f013 0f01 	tst.w	r3, #1
    8358:	d123      	bne.n	83a2 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    835a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    835e:	4a31      	ldr	r2, [pc, #196]	; (8424 <_i2c_m_sync_init_impl+0xe0>)
    8360:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8364:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    8368:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    836c:	69e3      	ldr	r3, [r4, #28]
    836e:	f013 0f03 	tst.w	r3, #3
    8372:	d1fb      	bne.n	836c <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    8374:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    8376:	f013 0f02 	tst.w	r3, #2
    837a:	d00b      	beq.n	8394 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    837c:	6823      	ldr	r3, [r4, #0]
    837e:	f023 0302 	bic.w	r3, r3, #2
    8382:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8384:	69e3      	ldr	r3, [r4, #28]
    8386:	f013 0f03 	tst.w	r3, #3
    838a:	d1fb      	bne.n	8384 <_i2c_m_sync_init_impl+0x40>
    838c:	69e3      	ldr	r3, [r4, #28]
    838e:	f013 0f02 	tst.w	r3, #2
    8392:	d1fb      	bne.n	838c <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    8394:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    8398:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    839a:	69e3      	ldr	r3, [r4, #28]
    839c:	f013 0f03 	tst.w	r3, #3
    83a0:	d1fb      	bne.n	839a <_i2c_m_sync_init_impl+0x56>
    83a2:	69e3      	ldr	r3, [r4, #28]
    83a4:	f013 0f01 	tst.w	r3, #1
    83a8:	d1fb      	bne.n	83a2 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    83aa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    83ae:	4a1d      	ldr	r2, [pc, #116]	; (8424 <_i2c_m_sync_init_impl+0xe0>)
    83b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    83b4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    83b8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    83ba:	69e3      	ldr	r3, [r4, #28]
    83bc:	f013 0f03 	tst.w	r3, #3
    83c0:	d1fb      	bne.n	83ba <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    83c2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    83c6:	4917      	ldr	r1, [pc, #92]	; (8424 <_i2c_m_sync_init_impl+0xe0>)
    83c8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    83cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    83d0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    83d2:	69e3      	ldr	r3, [r4, #28]
    83d4:	f013 0f04 	tst.w	r3, #4
    83d8:	d1fb      	bne.n	83d2 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    83da:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    83de:	4911      	ldr	r1, [pc, #68]	; (8424 <_i2c_m_sync_init_impl+0xe0>)
    83e0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    83e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    83e8:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    83ea:	f3c2 6301 	ubfx	r3, r2, #24, #2
    83ee:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    83f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    83f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    83f6:	2b01      	cmp	r3, #1
    83f8:	bf94      	ite	ls
    83fa:	2300      	movls	r3, #0
    83fc:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    83fe:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    8402:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8404:	69e3      	ldr	r3, [r4, #28]
    8406:	f013 0f04 	tst.w	r3, #4
    840a:	d1fb      	bne.n	8404 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    840c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8410:	4b04      	ldr	r3, [pc, #16]	; (8424 <_i2c_m_sync_init_impl+0xe0>)
    8412:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8416:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    841a:	81eb      	strh	r3, [r5, #14]
}
    841c:	2000      	movs	r0, #0
    841e:	bd38      	pop	{r3, r4, r5, pc}
    8420:	00008319 	.word	0x00008319
    8424:	0000edd8 	.word	0x0000edd8

00008428 <_sercom_i2c_m_irq_handler>:
{
    8428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    842c:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    842e:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    8430:	7e26      	ldrb	r6, [r4, #24]
    8432:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    8434:	f8df 8234 	ldr.w	r8, [pc, #564]	; 866c <_sercom_i2c_m_irq_handler+0x244>
    8438:	f240 425f 	movw	r2, #1119	; 0x45f
    843c:	4641      	mov	r1, r8
    843e:	3000      	adds	r0, #0
    8440:	bf18      	it	ne
    8442:	2001      	movne	r0, #1
    8444:	4f88      	ldr	r7, [pc, #544]	; (8668 <_sercom_i2c_m_irq_handler+0x240>)
    8446:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    8448:	6928      	ldr	r0, [r5, #16]
    844a:	f44f 628c 	mov.w	r2, #1120	; 0x460
    844e:	4641      	mov	r1, r8
    8450:	3000      	adds	r0, #0
    8452:	bf18      	it	ne
    8454:	2001      	movne	r0, #1
    8456:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    8458:	f016 0f80 	tst.w	r6, #128	; 0x80
    845c:	f040 80f4 	bne.w	8648 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    8460:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8462:	69e3      	ldr	r3, [r4, #28]
    8464:	f013 0f04 	tst.w	r3, #4
    8468:	d1fb      	bne.n	8462 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    846a:	8b63      	ldrh	r3, [r4, #26]
    846c:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    846e:	f016 0f01 	tst.w	r6, #1
    8472:	f000 8090 	beq.w	8596 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    8476:	f013 0f02 	tst.w	r3, #2
    847a:	d022      	beq.n	84c2 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    847c:	2201      	movs	r2, #1
    847e:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    8480:	886a      	ldrh	r2, [r5, #2]
    8482:	b292      	uxth	r2, r2
    8484:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    8488:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    848a:	886a      	ldrh	r2, [r5, #2]
    848c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    8490:	0412      	lsls	r2, r2, #16
    8492:	0c12      	lsrs	r2, r2, #16
    8494:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    8496:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    849a:	2b00      	cmp	r3, #0
    849c:	bf14      	ite	ne
    849e:	f06f 0104 	mvnne.w	r1, #4
    84a2:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    84a6:	886b      	ldrh	r3, [r5, #2]
    84a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    84ac:	041b      	lsls	r3, r3, #16
    84ae:	0c1b      	lsrs	r3, r3, #16
    84b0:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    84b2:	696b      	ldr	r3, [r5, #20]
    84b4:	2b00      	cmp	r3, #0
    84b6:	f000 80c5 	beq.w	8644 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    84ba:	4628      	mov	r0, r5
    84bc:	4798      	blx	r3
    84be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    84c2:	f013 0f04 	tst.w	r3, #4
    84c6:	d124      	bne.n	8512 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    84c8:	886b      	ldrh	r3, [r5, #2]
    84ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
    84ce:	d03e      	beq.n	854e <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    84d0:	882b      	ldrh	r3, [r5, #0]
    84d2:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    84d4:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    84d8:	69e3      	ldr	r3, [r4, #28]
    84da:	f013 0f04 	tst.w	r3, #4
    84de:	d1fb      	bne.n	84d8 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    84e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    84e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    84e6:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    84ea:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    84ec:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    84ee:	69e3      	ldr	r3, [r4, #28]
    84f0:	f013 0f04 	tst.w	r3, #4
    84f4:	d1fb      	bne.n	84ee <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    84f6:	886b      	ldrh	r3, [r5, #2]
    84f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    84fc:	041b      	lsls	r3, r3, #16
    84fe:	0c1b      	lsrs	r3, r3, #16
    8500:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    8502:	69ab      	ldr	r3, [r5, #24]
    8504:	2b00      	cmp	r3, #0
    8506:	f000 8088 	beq.w	861a <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    850a:	4628      	mov	r0, r5
    850c:	4798      	blx	r3
    850e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    8512:	686b      	ldr	r3, [r5, #4]
    8514:	2b00      	cmp	r3, #0
    8516:	dd04      	ble.n	8522 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    8518:	886b      	ldrh	r3, [r5, #2]
    851a:	b29b      	uxth	r3, r3
    851c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8520:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    8522:	886b      	ldrh	r3, [r5, #2]
    8524:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    8528:	d108      	bne.n	853c <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    852a:	886b      	ldrh	r3, [r5, #2]
    852c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8530:	041b      	lsls	r3, r3, #16
    8532:	0c1b      	lsrs	r3, r3, #16
    8534:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    8536:	f06f 0101 	mvn.w	r1, #1
    853a:	e7b4      	b.n	84a6 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    853c:	6863      	ldr	r3, [r4, #4]
    853e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    8542:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8544:	69e3      	ldr	r3, [r4, #28]
    8546:	f013 0f04 	tst.w	r3, #4
    854a:	d1fb      	bne.n	8544 <_sercom_i2c_m_irq_handler+0x11c>
    854c:	e7ed      	b.n	852a <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    854e:	686b      	ldr	r3, [r5, #4]
    8550:	b99b      	cbnz	r3, 857a <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    8552:	886b      	ldrh	r3, [r5, #2]
    8554:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    8558:	d106      	bne.n	8568 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    855a:	886b      	ldrh	r3, [r5, #2]
    855c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8560:	041b      	lsls	r3, r3, #16
    8562:	0c1b      	lsrs	r3, r3, #16
    8564:	806b      	strh	r3, [r5, #2]
    8566:	e7cc      	b.n	8502 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    8568:	6863      	ldr	r3, [r4, #4]
    856a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    856e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8570:	69e3      	ldr	r3, [r4, #28]
    8572:	f013 0f04 	tst.w	r3, #4
    8576:	d1fb      	bne.n	8570 <_sercom_i2c_m_irq_handler+0x148>
    8578:	e7ef      	b.n	855a <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    857a:	68ab      	ldr	r3, [r5, #8]
    857c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    857e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8580:	69e3      	ldr	r3, [r4, #28]
    8582:	f013 0f04 	tst.w	r3, #4
    8586:	d1fb      	bne.n	8580 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    8588:	68ab      	ldr	r3, [r5, #8]
    858a:	3301      	adds	r3, #1
    858c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    858e:	686b      	ldr	r3, [r5, #4]
    8590:	3b01      	subs	r3, #1
    8592:	606b      	str	r3, [r5, #4]
    8594:	e7b5      	b.n	8502 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    8596:	f016 0f02 	tst.w	r6, #2
    859a:	d041      	beq.n	8620 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    859c:	686a      	ldr	r2, [r5, #4]
    859e:	2a00      	cmp	r2, #0
    85a0:	d036      	beq.n	8610 <_sercom_i2c_m_irq_handler+0x1e8>
    85a2:	f013 0f04 	tst.w	r3, #4
    85a6:	d133      	bne.n	8610 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    85a8:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    85ac:	3a01      	subs	r2, #1
    85ae:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    85b0:	2a00      	cmp	r2, #0
    85b2:	d137      	bne.n	8624 <_sercom_i2c_m_irq_handler+0x1fc>
    85b4:	2900      	cmp	r1, #0
    85b6:	d039      	beq.n	862c <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    85b8:	886b      	ldrh	r3, [r5, #2]
    85ba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    85be:	d116      	bne.n	85ee <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    85c0:	886b      	ldrh	r3, [r5, #2]
    85c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    85c6:	041b      	lsls	r3, r3, #16
    85c8:	0c1b      	lsrs	r3, r3, #16
    85ca:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    85cc:	68aa      	ldr	r2, [r5, #8]
    85ce:	1c53      	adds	r3, r2, #1
    85d0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    85d2:	69e3      	ldr	r3, [r4, #28]
    85d4:	f013 0f04 	tst.w	r3, #4
    85d8:	d1fb      	bne.n	85d2 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    85da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    85dc:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    85de:	2302      	movs	r3, #2
    85e0:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    85e2:	69eb      	ldr	r3, [r5, #28]
    85e4:	b1e3      	cbz	r3, 8620 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    85e6:	4628      	mov	r0, r5
    85e8:	4798      	blx	r3
    85ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    85ee:	6863      	ldr	r3, [r4, #4]
    85f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    85f4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    85f6:	69e3      	ldr	r3, [r4, #28]
    85f8:	f013 0f04 	tst.w	r3, #4
    85fc:	d1fb      	bne.n	85f6 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    85fe:	6863      	ldr	r3, [r4, #4]
    8600:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    8604:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8606:	69e3      	ldr	r3, [r4, #28]
    8608:	f013 0f04 	tst.w	r3, #4
    860c:	d1fb      	bne.n	8606 <_sercom_i2c_m_irq_handler+0x1de>
    860e:	e7d7      	b.n	85c0 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    8610:	2302      	movs	r3, #2
    8612:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    8614:	f06f 0101 	mvn.w	r1, #1
    8618:	e745      	b.n	84a6 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    861a:	f016 0f02 	tst.w	r6, #2
    861e:	d1e0      	bne.n	85e2 <_sercom_i2c_m_irq_handler+0x1ba>
    8620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    8624:	2a01      	cmp	r2, #1
    8626:	d1d1      	bne.n	85cc <_sercom_i2c_m_irq_handler+0x1a4>
    8628:	2900      	cmp	r1, #0
    862a:	d0cf      	beq.n	85cc <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    862c:	6863      	ldr	r3, [r4, #4]
    862e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    8632:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8634:	69e3      	ldr	r3, [r4, #28]
    8636:	f013 0f04 	tst.w	r3, #4
    863a:	d1fb      	bne.n	8634 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    863c:	686b      	ldr	r3, [r5, #4]
    863e:	2b00      	cmp	r3, #0
    8640:	d0ba      	beq.n	85b8 <_sercom_i2c_m_irq_handler+0x190>
    8642:	e7c3      	b.n	85cc <_sercom_i2c_m_irq_handler+0x1a4>
    8644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8648:	886b      	ldrh	r3, [r5, #2]
    864a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    864e:	041b      	lsls	r3, r3, #16
    8650:	0c1b      	lsrs	r3, r3, #16
    8652:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    8654:	696b      	ldr	r3, [r5, #20]
    8656:	2b00      	cmp	r3, #0
    8658:	d0e2      	beq.n	8620 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    865a:	f06f 0104 	mvn.w	r1, #4
    865e:	4628      	mov	r0, r5
    8660:	4798      	blx	r3
    8662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8666:	bf00      	nop
    8668:	000070c1 	.word	0x000070c1
    866c:	0000eeac 	.word	0x0000eeac

00008670 <_usart_set_parity>:
{
    8670:	b570      	push	{r4, r5, r6, lr}
    8672:	b082      	sub	sp, #8
    8674:	4604      	mov	r4, r0
    8676:	460e      	mov	r6, r1
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    8678:	69e3      	ldr	r3, [r4, #28]
    867a:	f013 0f03 	tst.w	r3, #3
    867e:	d1fb      	bne.n	8678 <_usart_set_parity+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    8680:	6825      	ldr	r5, [r4, #0]
	return (bool)tmp;
    8682:	f3c5 0540 	ubfx	r5, r5, #1, #1
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    8686:	6823      	ldr	r3, [r4, #0]
    8688:	f023 0302 	bic.w	r3, r3, #2
    868c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    868e:	69e3      	ldr	r3, [r4, #28]
    8690:	f013 0f03 	tst.w	r3, #3
    8694:	d1fb      	bne.n	868e <_usart_set_parity+0x1e>
	CRITICAL_SECTION_ENTER()
    8696:	a801      	add	r0, sp, #4
    8698:	4b1a      	ldr	r3, [pc, #104]	; (8704 <_usart_set_parity+0x94>)
    869a:	4798      	blx	r3
    869c:	69e3      	ldr	r3, [r4, #28]
    869e:	f013 0f02 	tst.w	r3, #2
    86a2:	d1fb      	bne.n	869c <_usart_set_parity+0x2c>
	if (USART_PARITY_NONE != parity) {
    86a4:	2e02      	cmp	r6, #2
    86a6:	d023      	beq.n	86f0 <_usart_set_parity+0x80>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    86a8:	6823      	ldr	r3, [r4, #0]
    86aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    86ae:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    86b0:	69e3      	ldr	r3, [r4, #28]
    86b2:	f013 0f1f 	tst.w	r3, #31
    86b6:	d1fb      	bne.n	86b0 <_usart_set_parity+0x40>
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    86b8:	6863      	ldr	r3, [r4, #4]
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    86ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    86be:	3600      	adds	r6, #0
    86c0:	bf18      	it	ne
    86c2:	2601      	movne	r6, #1
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    86c4:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    86c8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    86ca:	69e3      	ldr	r3, [r4, #28]
    86cc:	f013 0f1f 	tst.w	r3, #31
    86d0:	d1fb      	bne.n	86ca <_usart_set_parity+0x5a>
	CRITICAL_SECTION_LEAVE()
    86d2:	a801      	add	r0, sp, #4
    86d4:	4b0c      	ldr	r3, [pc, #48]	; (8708 <_usart_set_parity+0x98>)
    86d6:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    86d8:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    86da:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    86de:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    86e2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    86e4:	69e3      	ldr	r3, [r4, #28]
    86e6:	f013 0f03 	tst.w	r3, #3
    86ea:	d1fb      	bne.n	86e4 <_usart_set_parity+0x74>
}
    86ec:	b002      	add	sp, #8
    86ee:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    86f0:	6823      	ldr	r3, [r4, #0]
    86f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    86f6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    86f8:	69e3      	ldr	r3, [r4, #28]
    86fa:	f013 0f1f 	tst.w	r3, #31
    86fe:	d1fb      	bne.n	86f8 <_usart_set_parity+0x88>
    8700:	e7da      	b.n	86b8 <_usart_set_parity+0x48>
    8702:	bf00      	nop
    8704:	00005c01 	.word	0x00005c01
    8708:	00005c0f 	.word	0x00005c0f

0000870c <_usart_sync_init>:
{
    870c:	b538      	push	{r3, r4, r5, lr}
    870e:	460c      	mov	r4, r1
	ASSERT(device);
    8710:	4605      	mov	r5, r0
    8712:	22c8      	movs	r2, #200	; 0xc8
    8714:	4905      	ldr	r1, [pc, #20]	; (872c <_usart_sync_init+0x20>)
    8716:	3000      	adds	r0, #0
    8718:	bf18      	it	ne
    871a:	2001      	movne	r0, #1
    871c:	4b04      	ldr	r3, [pc, #16]	; (8730 <_usart_sync_init+0x24>)
    871e:	4798      	blx	r3
	device->hw = hw;
    8720:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    8722:	4620      	mov	r0, r4
    8724:	4b03      	ldr	r3, [pc, #12]	; (8734 <_usart_sync_init+0x28>)
    8726:	4798      	blx	r3
}
    8728:	bd38      	pop	{r3, r4, r5, pc}
    872a:	bf00      	nop
    872c:	0000eeac 	.word	0x0000eeac
    8730:	000070c1 	.word	0x000070c1
    8734:	000081e1 	.word	0x000081e1

00008738 <_usart_async_init>:
{
    8738:	b570      	push	{r4, r5, r6, lr}
    873a:	460d      	mov	r5, r1
	ASSERT(device);
    873c:	4606      	mov	r6, r0
    873e:	22d6      	movs	r2, #214	; 0xd6
    8740:	4917      	ldr	r1, [pc, #92]	; (87a0 <_usart_async_init+0x68>)
    8742:	3000      	adds	r0, #0
    8744:	bf18      	it	ne
    8746:	2001      	movne	r0, #1
    8748:	4b16      	ldr	r3, [pc, #88]	; (87a4 <_usart_async_init+0x6c>)
    874a:	4798      	blx	r3
	init_status = _usart_init(hw);
    874c:	4628      	mov	r0, r5
    874e:	4b16      	ldr	r3, [pc, #88]	; (87a8 <_usart_async_init+0x70>)
    8750:	4798      	blx	r3
	if (init_status) {
    8752:	4604      	mov	r4, r0
    8754:	b108      	cbz	r0, 875a <_usart_async_init+0x22>
}
    8756:	4620      	mov	r0, r4
    8758:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    875a:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    875c:	4631      	mov	r1, r6
    875e:	4628      	mov	r0, r5
    8760:	4b12      	ldr	r3, [pc, #72]	; (87ac <_usart_async_init+0x74>)
    8762:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    8764:	4628      	mov	r0, r5
    8766:	4b12      	ldr	r3, [pc, #72]	; (87b0 <_usart_async_init+0x78>)
    8768:	4798      	blx	r3
    876a:	1d01      	adds	r1, r0, #4
    876c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    876e:	2501      	movs	r5, #1
    8770:	f000 021f 	and.w	r2, r0, #31
    8774:	fa05 f202 	lsl.w	r2, r5, r2
    8778:	0943      	lsrs	r3, r0, #5
    877a:	009b      	lsls	r3, r3, #2
    877c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    8780:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    8784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    8788:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    878c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8790:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8794:	601a      	str	r2, [r3, #0]
		irq++;
    8796:	3001      	adds	r0, #1
    8798:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    879a:	4281      	cmp	r1, r0
    879c:	d1e8      	bne.n	8770 <_usart_async_init+0x38>
    879e:	e7da      	b.n	8756 <_usart_async_init+0x1e>
    87a0:	0000eeac 	.word	0x0000eeac
    87a4:	000070c1 	.word	0x000070c1
    87a8:	000081e1 	.word	0x000081e1
    87ac:	0000803d 	.word	0x0000803d
    87b0:	0000809d 	.word	0x0000809d

000087b4 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    87b4:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    87b6:	6813      	ldr	r3, [r2, #0]
    87b8:	f043 0302 	orr.w	r3, r3, #2
    87bc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    87be:	69d3      	ldr	r3, [r2, #28]
    87c0:	f013 0f03 	tst.w	r3, #3
    87c4:	d1fb      	bne.n	87be <_usart_sync_enable+0xa>
}
    87c6:	4770      	bx	lr

000087c8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    87c8:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    87ca:	6813      	ldr	r3, [r2, #0]
    87cc:	f043 0302 	orr.w	r3, r3, #2
    87d0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    87d2:	69d3      	ldr	r3, [r2, #28]
    87d4:	f013 0f03 	tst.w	r3, #3
    87d8:	d1fb      	bne.n	87d2 <_usart_async_enable+0xa>
}
    87da:	4770      	bx	lr

000087dc <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    87dc:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    87de:	6813      	ldr	r3, [r2, #0]
    87e0:	f023 0302 	bic.w	r3, r3, #2
    87e4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    87e6:	69d3      	ldr	r3, [r2, #28]
    87e8:	f013 0f03 	tst.w	r3, #3
    87ec:	d1fb      	bne.n	87e6 <_usart_async_disable+0xa>
}
    87ee:	4770      	bx	lr

000087f0 <_usart_async_set_parity>:
{
    87f0:	b508      	push	{r3, lr}
	_usart_set_parity(device->hw, parity);
    87f2:	6980      	ldr	r0, [r0, #24]
    87f4:	4b01      	ldr	r3, [pc, #4]	; (87fc <_usart_async_set_parity+0xc>)
    87f6:	4798      	blx	r3
    87f8:	bd08      	pop	{r3, pc}
    87fa:	bf00      	nop
    87fc:	00008671 	.word	0x00008671

00008800 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    8800:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    8802:	6299      	str	r1, [r3, #40]	; 0x28
    8804:	4770      	bx	lr

00008806 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    8806:	6983      	ldr	r3, [r0, #24]
    8808:	6299      	str	r1, [r3, #40]	; 0x28
    880a:	4770      	bx	lr

0000880c <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    880c:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    880e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    8810:	b2c0      	uxtb	r0, r0
    8812:	4770      	bx	lr

00008814 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    8814:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    8816:	7e18      	ldrb	r0, [r3, #24]
}
    8818:	f000 0001 	and.w	r0, r0, #1
    881c:	4770      	bx	lr

0000881e <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    881e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    8820:	7e18      	ldrb	r0, [r3, #24]
}
    8822:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8826:	4770      	bx	lr

00008828 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    8828:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    882a:	7e18      	ldrb	r0, [r3, #24]
}
    882c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    8830:	4770      	bx	lr

00008832 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    8832:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    8834:	2201      	movs	r2, #1
    8836:	759a      	strb	r2, [r3, #22]
    8838:	4770      	bx	lr

0000883a <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    883a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    883c:	2202      	movs	r2, #2
    883e:	759a      	strb	r2, [r3, #22]
    8840:	4770      	bx	lr
	...

00008844 <_usart_async_set_irq_state>:
{
    8844:	b570      	push	{r4, r5, r6, lr}
    8846:	460c      	mov	r4, r1
    8848:	4616      	mov	r6, r2
	ASSERT(device);
    884a:	4605      	mov	r5, r0
    884c:	f240 2236 	movw	r2, #566	; 0x236
    8850:	4915      	ldr	r1, [pc, #84]	; (88a8 <_usart_async_set_irq_state+0x64>)
    8852:	3000      	adds	r0, #0
    8854:	bf18      	it	ne
    8856:	2001      	movne	r0, #1
    8858:	4b14      	ldr	r3, [pc, #80]	; (88ac <_usart_async_set_irq_state+0x68>)
    885a:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    885c:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    8860:	d10d      	bne.n	887e <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    8862:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    8864:	b92e      	cbnz	r6, 8872 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    8866:	2201      	movs	r2, #1
    8868:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    886a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    886c:	2202      	movs	r2, #2
    886e:	751a      	strb	r2, [r3, #20]
    8870:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    8872:	2201      	movs	r2, #1
    8874:	759a      	strb	r2, [r3, #22]
    8876:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    8878:	2202      	movs	r2, #2
    887a:	759a      	strb	r2, [r3, #22]
    887c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    887e:	2c01      	cmp	r4, #1
    8880:	d002      	beq.n	8888 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    8882:	2c03      	cmp	r4, #3
    8884:	d008      	beq.n	8898 <_usart_async_set_irq_state+0x54>
    8886:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    8888:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    888a:	b916      	cbnz	r6, 8892 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    888c:	2204      	movs	r2, #4
    888e:	751a      	strb	r2, [r3, #20]
    8890:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    8892:	2204      	movs	r2, #4
    8894:	759a      	strb	r2, [r3, #22]
    8896:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    8898:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    889a:	b116      	cbz	r6, 88a2 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    889c:	2280      	movs	r2, #128	; 0x80
    889e:	759a      	strb	r2, [r3, #22]
}
    88a0:	e7f1      	b.n	8886 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    88a2:	2280      	movs	r2, #128	; 0x80
    88a4:	751a      	strb	r2, [r3, #20]
    88a6:	bd70      	pop	{r4, r5, r6, pc}
    88a8:	0000eeac 	.word	0x0000eeac
    88ac:	000070c1 	.word	0x000070c1

000088b0 <_i2c_m_async_init>:
{
    88b0:	b570      	push	{r4, r5, r6, lr}
    88b2:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    88b4:	4606      	mov	r6, r0
    88b6:	f240 42d2 	movw	r2, #1234	; 0x4d2
    88ba:	4918      	ldr	r1, [pc, #96]	; (891c <_i2c_m_async_init+0x6c>)
    88bc:	3000      	adds	r0, #0
    88be:	bf18      	it	ne
    88c0:	2001      	movne	r0, #1
    88c2:	4b17      	ldr	r3, [pc, #92]	; (8920 <_i2c_m_async_init+0x70>)
    88c4:	4798      	blx	r3
	i2c_dev->hw = hw;
    88c6:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    88c8:	4629      	mov	r1, r5
    88ca:	4630      	mov	r0, r6
    88cc:	4b15      	ldr	r3, [pc, #84]	; (8924 <_i2c_m_async_init+0x74>)
    88ce:	4798      	blx	r3
	if (init_status) {
    88d0:	4604      	mov	r4, r0
    88d2:	b108      	cbz	r0, 88d8 <_i2c_m_async_init+0x28>
}
    88d4:	4620      	mov	r0, r4
    88d6:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    88d8:	4631      	mov	r1, r6
    88da:	4628      	mov	r0, r5
    88dc:	4b12      	ldr	r3, [pc, #72]	; (8928 <_i2c_m_async_init+0x78>)
    88de:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    88e0:	4628      	mov	r0, r5
    88e2:	4b12      	ldr	r3, [pc, #72]	; (892c <_i2c_m_async_init+0x7c>)
    88e4:	4798      	blx	r3
    88e6:	1d01      	adds	r1, r0, #4
    88e8:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    88ea:	2501      	movs	r5, #1
    88ec:	f000 021f 	and.w	r2, r0, #31
    88f0:	fa05 f202 	lsl.w	r2, r5, r2
    88f4:	0943      	lsrs	r3, r0, #5
    88f6:	009b      	lsls	r3, r3, #2
    88f8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    88fc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    8900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    8904:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8908:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    890c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8910:	601a      	str	r2, [r3, #0]
		irq++;
    8912:	3001      	adds	r0, #1
    8914:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    8916:	4281      	cmp	r1, r0
    8918:	d1e8      	bne.n	88ec <_i2c_m_async_init+0x3c>
    891a:	e7db      	b.n	88d4 <_i2c_m_async_init+0x24>
    891c:	0000eeac 	.word	0x0000eeac
    8920:	000070c1 	.word	0x000070c1
    8924:	00008345 	.word	0x00008345
    8928:	0000803d 	.word	0x0000803d
    892c:	0000809d 	.word	0x0000809d

00008930 <_i2c_m_async_transfer>:
{
    8930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8934:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    8936:	4605      	mov	r5, r0
    8938:	f110 0800 	adds.w	r8, r0, #0
    893c:	bf18      	it	ne
    893e:	f04f 0801 	movne.w	r8, #1
    8942:	4f45      	ldr	r7, [pc, #276]	; (8a58 <_i2c_m_async_transfer+0x128>)
    8944:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    8948:	4639      	mov	r1, r7
    894a:	4640      	mov	r0, r8
    894c:	4e43      	ldr	r6, [pc, #268]	; (8a5c <_i2c_m_async_transfer+0x12c>)
    894e:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    8950:	6928      	ldr	r0, [r5, #16]
    8952:	f240 5229 	movw	r2, #1321	; 0x529
    8956:	4639      	mov	r1, r7
    8958:	3000      	adds	r0, #0
    895a:	bf18      	it	ne
    895c:	2001      	movne	r0, #1
    895e:	47b0      	blx	r6
	ASSERT(msg);
    8960:	f240 522a 	movw	r2, #1322	; 0x52a
    8964:	4639      	mov	r1, r7
    8966:	1c20      	adds	r0, r4, #0
    8968:	bf18      	it	ne
    896a:	2001      	movne	r0, #1
    896c:	47b0      	blx	r6
	if (msg->len == 0) {
    896e:	6860      	ldr	r0, [r4, #4]
    8970:	2800      	cmp	r0, #0
    8972:	d06f      	beq.n	8a54 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8974:	886b      	ldrh	r3, [r5, #2]
    8976:	f413 7f80 	tst.w	r3, #256	; 0x100
    897a:	d169      	bne.n	8a50 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    897c:	8863      	ldrh	r3, [r4, #2]
    897e:	b29b      	uxth	r3, r3
    8980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8984:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    8986:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    898a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    898e:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    8990:	6853      	ldr	r3, [r2, #4]
    8992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8996:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8998:	69d3      	ldr	r3, [r2, #28]
    899a:	f013 0f04 	tst.w	r3, #4
    899e:	d1fb      	bne.n	8998 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    89a0:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    89a2:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    89a4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    89a8:	492b      	ldr	r1, [pc, #172]	; (8a58 <_i2c_m_async_transfer+0x128>)
    89aa:	4640      	mov	r0, r8
    89ac:	4b2b      	ldr	r3, [pc, #172]	; (8a5c <_i2c_m_async_transfer+0x12c>)
    89ae:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    89b0:	686b      	ldr	r3, [r5, #4]
    89b2:	2b01      	cmp	r3, #1
    89b4:	d02a      	beq.n	8a0c <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    89b6:	6863      	ldr	r3, [r4, #4]
    89b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    89bc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    89be:	69e3      	ldr	r3, [r4, #28]
    89c0:	f013 0f04 	tst.w	r3, #4
    89c4:	d1fb      	bne.n	89be <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    89c6:	882b      	ldrh	r3, [r5, #0]
    89c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    89cc:	d02a      	beq.n	8a24 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    89ce:	886a      	ldrh	r2, [r5, #2]
    89d0:	f012 0f01 	tst.w	r2, #1
    89d4:	d004      	beq.n	89e0 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    89d6:	886a      	ldrh	r2, [r5, #2]
    89d8:	b292      	uxth	r2, r2
    89da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    89de:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    89e0:	f240 72fe 	movw	r2, #2046	; 0x7fe
    89e4:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    89e8:	69e3      	ldr	r3, [r4, #28]
    89ea:	f013 0f04 	tst.w	r3, #4
    89ee:	d1fb      	bne.n	89e8 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    89f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    89f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    89f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    89fa:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    89fc:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    89fe:	69e3      	ldr	r3, [r4, #28]
    8a00:	f013 0f04 	tst.w	r3, #4
    8a04:	d1fb      	bne.n	89fe <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    8a06:	2000      	movs	r0, #0
    8a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    8a0c:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    8a10:	d0d1      	beq.n	89b6 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    8a12:	6863      	ldr	r3, [r4, #4]
    8a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    8a18:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8a1a:	69e3      	ldr	r3, [r4, #28]
    8a1c:	f013 0f04 	tst.w	r3, #4
    8a20:	d1fb      	bne.n	8a1a <_i2c_m_async_transfer+0xea>
    8a22:	e7d0      	b.n	89c6 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    8a24:	8869      	ldrh	r1, [r5, #2]
    8a26:	005a      	lsls	r2, r3, #1
    8a28:	b2d2      	uxtb	r2, r2
    8a2a:	f001 0301 	and.w	r3, r1, #1
    8a2e:	431a      	orrs	r2, r3
    8a30:	69e3      	ldr	r3, [r4, #28]
    8a32:	f013 0f04 	tst.w	r3, #4
    8a36:	d1fb      	bne.n	8a30 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    8a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    8a3e:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    8a40:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8a42:	69e3      	ldr	r3, [r4, #28]
    8a44:	f013 0f04 	tst.w	r3, #4
    8a48:	d1fb      	bne.n	8a42 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    8a4a:	2000      	movs	r0, #0
    8a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    8a50:	f06f 0003 	mvn.w	r0, #3
}
    8a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a58:	0000eeac 	.word	0x0000eeac
    8a5c:	000070c1 	.word	0x000070c1

00008a60 <_i2c_m_async_register_callback>:
	switch (type) {
    8a60:	2901      	cmp	r1, #1
    8a62:	d006      	beq.n	8a72 <_i2c_m_async_register_callback+0x12>
    8a64:	b119      	cbz	r1, 8a6e <_i2c_m_async_register_callback+0xe>
    8a66:	2902      	cmp	r1, #2
    8a68:	d005      	beq.n	8a76 <_i2c_m_async_register_callback+0x16>
}
    8a6a:	2000      	movs	r0, #0
    8a6c:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    8a6e:	6142      	str	r2, [r0, #20]
		break;
    8a70:	e7fb      	b.n	8a6a <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    8a72:	6182      	str	r2, [r0, #24]
		break;
    8a74:	e7f9      	b.n	8a6a <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    8a76:	61c2      	str	r2, [r0, #28]
		break;
    8a78:	e7f7      	b.n	8a6a <_i2c_m_async_register_callback+0xa>
	...

00008a7c <SERCOM0_0_Handler>:
{
    8a7c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    8a7e:	4b02      	ldr	r3, [pc, #8]	; (8a88 <SERCOM0_0_Handler+0xc>)
    8a80:	6818      	ldr	r0, [r3, #0]
    8a82:	4b02      	ldr	r3, [pc, #8]	; (8a8c <SERCOM0_0_Handler+0x10>)
    8a84:	4798      	blx	r3
    8a86:	bd08      	pop	{r3, pc}
    8a88:	20000a08 	.word	0x20000a08
    8a8c:	00007fcd 	.word	0x00007fcd

00008a90 <SERCOM0_1_Handler>:
{
    8a90:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    8a92:	4b02      	ldr	r3, [pc, #8]	; (8a9c <SERCOM0_1_Handler+0xc>)
    8a94:	6818      	ldr	r0, [r3, #0]
    8a96:	4b02      	ldr	r3, [pc, #8]	; (8aa0 <SERCOM0_1_Handler+0x10>)
    8a98:	4798      	blx	r3
    8a9a:	bd08      	pop	{r3, pc}
    8a9c:	20000a08 	.word	0x20000a08
    8aa0:	00007fcd 	.word	0x00007fcd

00008aa4 <SERCOM0_2_Handler>:
{
    8aa4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    8aa6:	4b02      	ldr	r3, [pc, #8]	; (8ab0 <SERCOM0_2_Handler+0xc>)
    8aa8:	6818      	ldr	r0, [r3, #0]
    8aaa:	4b02      	ldr	r3, [pc, #8]	; (8ab4 <SERCOM0_2_Handler+0x10>)
    8aac:	4798      	blx	r3
    8aae:	bd08      	pop	{r3, pc}
    8ab0:	20000a08 	.word	0x20000a08
    8ab4:	00007fcd 	.word	0x00007fcd

00008ab8 <SERCOM0_3_Handler>:
{
    8ab8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    8aba:	4b02      	ldr	r3, [pc, #8]	; (8ac4 <SERCOM0_3_Handler+0xc>)
    8abc:	6818      	ldr	r0, [r3, #0]
    8abe:	4b02      	ldr	r3, [pc, #8]	; (8ac8 <SERCOM0_3_Handler+0x10>)
    8ac0:	4798      	blx	r3
    8ac2:	bd08      	pop	{r3, pc}
    8ac4:	20000a08 	.word	0x20000a08
    8ac8:	00007fcd 	.word	0x00007fcd

00008acc <SERCOM1_0_Handler>:
{
    8acc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    8ace:	4b02      	ldr	r3, [pc, #8]	; (8ad8 <SERCOM1_0_Handler+0xc>)
    8ad0:	6858      	ldr	r0, [r3, #4]
    8ad2:	4b02      	ldr	r3, [pc, #8]	; (8adc <SERCOM1_0_Handler+0x10>)
    8ad4:	4798      	blx	r3
    8ad6:	bd08      	pop	{r3, pc}
    8ad8:	20000a08 	.word	0x20000a08
    8adc:	00007fcd 	.word	0x00007fcd

00008ae0 <SERCOM1_1_Handler>:
{
    8ae0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    8ae2:	4b02      	ldr	r3, [pc, #8]	; (8aec <SERCOM1_1_Handler+0xc>)
    8ae4:	6858      	ldr	r0, [r3, #4]
    8ae6:	4b02      	ldr	r3, [pc, #8]	; (8af0 <SERCOM1_1_Handler+0x10>)
    8ae8:	4798      	blx	r3
    8aea:	bd08      	pop	{r3, pc}
    8aec:	20000a08 	.word	0x20000a08
    8af0:	00007fcd 	.word	0x00007fcd

00008af4 <SERCOM1_2_Handler>:
{
    8af4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    8af6:	4b02      	ldr	r3, [pc, #8]	; (8b00 <SERCOM1_2_Handler+0xc>)
    8af8:	6858      	ldr	r0, [r3, #4]
    8afa:	4b02      	ldr	r3, [pc, #8]	; (8b04 <SERCOM1_2_Handler+0x10>)
    8afc:	4798      	blx	r3
    8afe:	bd08      	pop	{r3, pc}
    8b00:	20000a08 	.word	0x20000a08
    8b04:	00007fcd 	.word	0x00007fcd

00008b08 <SERCOM1_3_Handler>:
{
    8b08:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    8b0a:	4b02      	ldr	r3, [pc, #8]	; (8b14 <SERCOM1_3_Handler+0xc>)
    8b0c:	6858      	ldr	r0, [r3, #4]
    8b0e:	4b02      	ldr	r3, [pc, #8]	; (8b18 <SERCOM1_3_Handler+0x10>)
    8b10:	4798      	blx	r3
    8b12:	bd08      	pop	{r3, pc}
    8b14:	20000a08 	.word	0x20000a08
    8b18:	00007fcd 	.word	0x00007fcd

00008b1c <SERCOM3_0_Handler>:
{
    8b1c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    8b1e:	4b02      	ldr	r3, [pc, #8]	; (8b28 <SERCOM3_0_Handler+0xc>)
    8b20:	6898      	ldr	r0, [r3, #8]
    8b22:	4b02      	ldr	r3, [pc, #8]	; (8b2c <SERCOM3_0_Handler+0x10>)
    8b24:	4798      	blx	r3
    8b26:	bd08      	pop	{r3, pc}
    8b28:	20000a08 	.word	0x20000a08
    8b2c:	00008147 	.word	0x00008147

00008b30 <SERCOM3_1_Handler>:
{
    8b30:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    8b32:	4b02      	ldr	r3, [pc, #8]	; (8b3c <SERCOM3_1_Handler+0xc>)
    8b34:	6898      	ldr	r0, [r3, #8]
    8b36:	4b02      	ldr	r3, [pc, #8]	; (8b40 <SERCOM3_1_Handler+0x10>)
    8b38:	4798      	blx	r3
    8b3a:	bd08      	pop	{r3, pc}
    8b3c:	20000a08 	.word	0x20000a08
    8b40:	00008147 	.word	0x00008147

00008b44 <SERCOM3_2_Handler>:
{
    8b44:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    8b46:	4b02      	ldr	r3, [pc, #8]	; (8b50 <SERCOM3_2_Handler+0xc>)
    8b48:	6898      	ldr	r0, [r3, #8]
    8b4a:	4b02      	ldr	r3, [pc, #8]	; (8b54 <SERCOM3_2_Handler+0x10>)
    8b4c:	4798      	blx	r3
    8b4e:	bd08      	pop	{r3, pc}
    8b50:	20000a08 	.word	0x20000a08
    8b54:	00008147 	.word	0x00008147

00008b58 <SERCOM3_3_Handler>:
{
    8b58:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    8b5a:	4b02      	ldr	r3, [pc, #8]	; (8b64 <SERCOM3_3_Handler+0xc>)
    8b5c:	6898      	ldr	r0, [r3, #8]
    8b5e:	4b02      	ldr	r3, [pc, #8]	; (8b68 <SERCOM3_3_Handler+0x10>)
    8b60:	4798      	blx	r3
    8b62:	bd08      	pop	{r3, pc}
    8b64:	20000a08 	.word	0x20000a08
    8b68:	00008147 	.word	0x00008147

00008b6c <SERCOM4_0_Handler>:
{
    8b6c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    8b6e:	4b02      	ldr	r3, [pc, #8]	; (8b78 <SERCOM4_0_Handler+0xc>)
    8b70:	68d8      	ldr	r0, [r3, #12]
    8b72:	4b02      	ldr	r3, [pc, #8]	; (8b7c <SERCOM4_0_Handler+0x10>)
    8b74:	4798      	blx	r3
    8b76:	bd08      	pop	{r3, pc}
    8b78:	20000a08 	.word	0x20000a08
    8b7c:	00007fcd 	.word	0x00007fcd

00008b80 <SERCOM4_1_Handler>:
{
    8b80:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    8b82:	4b02      	ldr	r3, [pc, #8]	; (8b8c <SERCOM4_1_Handler+0xc>)
    8b84:	68d8      	ldr	r0, [r3, #12]
    8b86:	4b02      	ldr	r3, [pc, #8]	; (8b90 <SERCOM4_1_Handler+0x10>)
    8b88:	4798      	blx	r3
    8b8a:	bd08      	pop	{r3, pc}
    8b8c:	20000a08 	.word	0x20000a08
    8b90:	00007fcd 	.word	0x00007fcd

00008b94 <SERCOM4_2_Handler>:
{
    8b94:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    8b96:	4b02      	ldr	r3, [pc, #8]	; (8ba0 <SERCOM4_2_Handler+0xc>)
    8b98:	68d8      	ldr	r0, [r3, #12]
    8b9a:	4b02      	ldr	r3, [pc, #8]	; (8ba4 <SERCOM4_2_Handler+0x10>)
    8b9c:	4798      	blx	r3
    8b9e:	bd08      	pop	{r3, pc}
    8ba0:	20000a08 	.word	0x20000a08
    8ba4:	00007fcd 	.word	0x00007fcd

00008ba8 <SERCOM4_3_Handler>:
{
    8ba8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    8baa:	4b02      	ldr	r3, [pc, #8]	; (8bb4 <SERCOM4_3_Handler+0xc>)
    8bac:	68d8      	ldr	r0, [r3, #12]
    8bae:	4b02      	ldr	r3, [pc, #8]	; (8bb8 <SERCOM4_3_Handler+0x10>)
    8bb0:	4798      	blx	r3
    8bb2:	bd08      	pop	{r3, pc}
    8bb4:	20000a08 	.word	0x20000a08
    8bb8:	00007fcd 	.word	0x00007fcd

00008bbc <SERCOM5_0_Handler>:
{
    8bbc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8bbe:	4b02      	ldr	r3, [pc, #8]	; (8bc8 <SERCOM5_0_Handler+0xc>)
    8bc0:	6918      	ldr	r0, [r3, #16]
    8bc2:	4b02      	ldr	r3, [pc, #8]	; (8bcc <SERCOM5_0_Handler+0x10>)
    8bc4:	4798      	blx	r3
    8bc6:	bd08      	pop	{r3, pc}
    8bc8:	20000a08 	.word	0x20000a08
    8bcc:	00008429 	.word	0x00008429

00008bd0 <SERCOM5_1_Handler>:
{
    8bd0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8bd2:	4b02      	ldr	r3, [pc, #8]	; (8bdc <SERCOM5_1_Handler+0xc>)
    8bd4:	6918      	ldr	r0, [r3, #16]
    8bd6:	4b02      	ldr	r3, [pc, #8]	; (8be0 <SERCOM5_1_Handler+0x10>)
    8bd8:	4798      	blx	r3
    8bda:	bd08      	pop	{r3, pc}
    8bdc:	20000a08 	.word	0x20000a08
    8be0:	00008429 	.word	0x00008429

00008be4 <SERCOM5_2_Handler>:
{
    8be4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8be6:	4b02      	ldr	r3, [pc, #8]	; (8bf0 <SERCOM5_2_Handler+0xc>)
    8be8:	6918      	ldr	r0, [r3, #16]
    8bea:	4b02      	ldr	r3, [pc, #8]	; (8bf4 <SERCOM5_2_Handler+0x10>)
    8bec:	4798      	blx	r3
    8bee:	bd08      	pop	{r3, pc}
    8bf0:	20000a08 	.word	0x20000a08
    8bf4:	00008429 	.word	0x00008429

00008bf8 <SERCOM5_3_Handler>:
{
    8bf8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8bfa:	4b02      	ldr	r3, [pc, #8]	; (8c04 <SERCOM5_3_Handler+0xc>)
    8bfc:	6918      	ldr	r0, [r3, #16]
    8bfe:	4b02      	ldr	r3, [pc, #8]	; (8c08 <SERCOM5_3_Handler+0x10>)
    8c00:	4798      	blx	r3
    8c02:	bd08      	pop	{r3, pc}
    8c04:	20000a08 	.word	0x20000a08
    8c08:	00008429 	.word	0x00008429

00008c0c <SERCOM6_0_Handler>:
{
    8c0c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    8c0e:	4b02      	ldr	r3, [pc, #8]	; (8c18 <SERCOM6_0_Handler+0xc>)
    8c10:	6958      	ldr	r0, [r3, #20]
    8c12:	4b02      	ldr	r3, [pc, #8]	; (8c1c <SERCOM6_0_Handler+0x10>)
    8c14:	4798      	blx	r3
    8c16:	bd08      	pop	{r3, pc}
    8c18:	20000a08 	.word	0x20000a08
    8c1c:	00007fcd 	.word	0x00007fcd

00008c20 <SERCOM6_1_Handler>:
{
    8c20:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    8c22:	4b02      	ldr	r3, [pc, #8]	; (8c2c <SERCOM6_1_Handler+0xc>)
    8c24:	6958      	ldr	r0, [r3, #20]
    8c26:	4b02      	ldr	r3, [pc, #8]	; (8c30 <SERCOM6_1_Handler+0x10>)
    8c28:	4798      	blx	r3
    8c2a:	bd08      	pop	{r3, pc}
    8c2c:	20000a08 	.word	0x20000a08
    8c30:	00007fcd 	.word	0x00007fcd

00008c34 <SERCOM6_2_Handler>:
{
    8c34:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    8c36:	4b02      	ldr	r3, [pc, #8]	; (8c40 <SERCOM6_2_Handler+0xc>)
    8c38:	6958      	ldr	r0, [r3, #20]
    8c3a:	4b02      	ldr	r3, [pc, #8]	; (8c44 <SERCOM6_2_Handler+0x10>)
    8c3c:	4798      	blx	r3
    8c3e:	bd08      	pop	{r3, pc}
    8c40:	20000a08 	.word	0x20000a08
    8c44:	00007fcd 	.word	0x00007fcd

00008c48 <SERCOM6_3_Handler>:
{
    8c48:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    8c4a:	4b02      	ldr	r3, [pc, #8]	; (8c54 <SERCOM6_3_Handler+0xc>)
    8c4c:	6958      	ldr	r0, [r3, #20]
    8c4e:	4b02      	ldr	r3, [pc, #8]	; (8c58 <SERCOM6_3_Handler+0x10>)
    8c50:	4798      	blx	r3
    8c52:	bd08      	pop	{r3, pc}
    8c54:	20000a08 	.word	0x20000a08
    8c58:	00007fcd 	.word	0x00007fcd

00008c5c <_spi_m_sync_init>:
{
    8c5c:	b570      	push	{r4, r5, r6, lr}
    8c5e:	4606      	mov	r6, r0
    8c60:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8c62:	4608      	mov	r0, r1
    8c64:	4b5d      	ldr	r3, [pc, #372]	; (8ddc <_spi_m_sync_init+0x180>)
    8c66:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    8c68:	2803      	cmp	r0, #3
    8c6a:	d00c      	beq.n	8c86 <_spi_m_sync_init+0x2a>
    8c6c:	2807      	cmp	r0, #7
    8c6e:	bf08      	it	eq
    8c70:	2301      	moveq	r3, #1
    8c72:	d009      	beq.n	8c88 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    8c74:	2e00      	cmp	r6, #0
    8c76:	f000 809f 	beq.w	8db8 <_spi_m_sync_init+0x15c>
    8c7a:	2c00      	cmp	r4, #0
    8c7c:	f040 80a5 	bne.w	8dca <_spi_m_sync_init+0x16e>
	return NULL;
    8c80:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    8c82:	2000      	movs	r0, #0
    8c84:	e009      	b.n	8c9a <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    8c86:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    8c88:	4d55      	ldr	r5, [pc, #340]	; (8de0 <_spi_m_sync_init+0x184>)
    8c8a:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    8c8e:	441d      	add	r5, r3
	ASSERT(dev && hw);
    8c90:	2e00      	cmp	r6, #0
    8c92:	d0f6      	beq.n	8c82 <_spi_m_sync_init+0x26>
    8c94:	2001      	movs	r0, #1
    8c96:	2c00      	cmp	r4, #0
    8c98:	d0f3      	beq.n	8c82 <_spi_m_sync_init+0x26>
    8c9a:	f640 226e 	movw	r2, #2670	; 0xa6e
    8c9e:	4951      	ldr	r1, [pc, #324]	; (8de4 <_spi_m_sync_init+0x188>)
    8ca0:	4b51      	ldr	r3, [pc, #324]	; (8de8 <_spi_m_sync_init+0x18c>)
    8ca2:	4798      	blx	r3
	if (regs == NULL) {
    8ca4:	2d00      	cmp	r5, #0
    8ca6:	f000 8084 	beq.w	8db2 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8caa:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8cac:	f013 0f01 	tst.w	r3, #1
    8cb0:	d11d      	bne.n	8cee <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8cb2:	682b      	ldr	r3, [r5, #0]
    8cb4:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8cb8:	69e3      	ldr	r3, [r4, #28]
    8cba:	f013 0f03 	tst.w	r3, #3
    8cbe:	d1fb      	bne.n	8cb8 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    8cc0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8cc2:	f013 0f02 	tst.w	r3, #2
    8cc6:	d00b      	beq.n	8ce0 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    8cc8:	6823      	ldr	r3, [r4, #0]
    8cca:	f023 0302 	bic.w	r3, r3, #2
    8cce:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8cd0:	69e3      	ldr	r3, [r4, #28]
    8cd2:	f013 0f03 	tst.w	r3, #3
    8cd6:	d1fb      	bne.n	8cd0 <_spi_m_sync_init+0x74>
    8cd8:	69e3      	ldr	r3, [r4, #28]
    8cda:	f013 0f02 	tst.w	r3, #2
    8cde:	d1fb      	bne.n	8cd8 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8ce0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8ce4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8ce6:	69e3      	ldr	r3, [r4, #28]
    8ce8:	f013 0f03 	tst.w	r3, #3
    8cec:	d1fb      	bne.n	8ce6 <_spi_m_sync_init+0x8a>
    8cee:	69e3      	ldr	r3, [r4, #28]
    8cf0:	f013 0f01 	tst.w	r3, #1
    8cf4:	d1fb      	bne.n	8cee <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    8cf6:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    8cf8:	682b      	ldr	r3, [r5, #0]
    8cfa:	f003 031c 	and.w	r3, r3, #28
    8cfe:	2b08      	cmp	r3, #8
    8d00:	d02e      	beq.n	8d60 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    8d02:	f44f 6217 	mov.w	r2, #2416	; 0x970
    8d06:	4937      	ldr	r1, [pc, #220]	; (8de4 <_spi_m_sync_init+0x188>)
    8d08:	1c20      	adds	r0, r4, #0
    8d0a:	bf18      	it	ne
    8d0c:	2001      	movne	r0, #1
    8d0e:	4b36      	ldr	r3, [pc, #216]	; (8de8 <_spi_m_sync_init+0x18c>)
    8d10:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8d12:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    8d14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8d18:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8d1c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8d1e:	69e3      	ldr	r3, [r4, #28]
    8d20:	f013 0f03 	tst.w	r3, #3
    8d24:	d1fb      	bne.n	8d1e <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    8d26:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    8d28:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    8d2c:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    8d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    8d34:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8d36:	69e3      	ldr	r3, [r4, #28]
    8d38:	f013 0f17 	tst.w	r3, #23
    8d3c:	d1fb      	bne.n	8d36 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    8d3e:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    8d40:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8d42:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    8d44:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    8d48:	686b      	ldr	r3, [r5, #4]
    8d4a:	f003 0307 	and.w	r3, r3, #7
    8d4e:	2b00      	cmp	r3, #0
    8d50:	bf0c      	ite	eq
    8d52:	2301      	moveq	r3, #1
    8d54:	2302      	movne	r3, #2
    8d56:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    8d58:	89eb      	ldrh	r3, [r5, #14]
    8d5a:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    8d5c:	2000      	movs	r0, #0
    8d5e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    8d60:	f640 1284 	movw	r2, #2436	; 0x984
    8d64:	491f      	ldr	r1, [pc, #124]	; (8de4 <_spi_m_sync_init+0x188>)
    8d66:	1c20      	adds	r0, r4, #0
    8d68:	bf18      	it	ne
    8d6a:	2001      	movne	r0, #1
    8d6c:	4b1e      	ldr	r3, [pc, #120]	; (8de8 <_spi_m_sync_init+0x18c>)
    8d6e:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8d70:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    8d72:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8d76:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8d7a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8d7c:	69e3      	ldr	r3, [r4, #28]
    8d7e:	f013 0f03 	tst.w	r3, #3
    8d82:	d1fb      	bne.n	8d7c <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    8d84:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    8d86:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    8d8a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    8d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8d92:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    8d96:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8d98:	69e3      	ldr	r3, [r4, #28]
    8d9a:	f013 0f17 	tst.w	r3, #23
    8d9e:	d1fb      	bne.n	8d98 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    8da0:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    8da2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8da4:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    8da6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8daa:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    8dac:	2b00      	cmp	r3, #0
    8dae:	d1fc      	bne.n	8daa <_spi_m_sync_init+0x14e>
    8db0:	e7ca      	b.n	8d48 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    8db2:	f06f 000c 	mvn.w	r0, #12
    8db6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    8db8:	f640 226e 	movw	r2, #2670	; 0xa6e
    8dbc:	4909      	ldr	r1, [pc, #36]	; (8de4 <_spi_m_sync_init+0x188>)
    8dbe:	2000      	movs	r0, #0
    8dc0:	4b09      	ldr	r3, [pc, #36]	; (8de8 <_spi_m_sync_init+0x18c>)
    8dc2:	4798      	blx	r3
		return ERR_INVALID_ARG;
    8dc4:	f06f 000c 	mvn.w	r0, #12
    8dc8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    8dca:	f640 226e 	movw	r2, #2670	; 0xa6e
    8dce:	4905      	ldr	r1, [pc, #20]	; (8de4 <_spi_m_sync_init+0x188>)
    8dd0:	2001      	movs	r0, #1
    8dd2:	4b05      	ldr	r3, [pc, #20]	; (8de8 <_spi_m_sync_init+0x18c>)
    8dd4:	4798      	blx	r3
		return ERR_INVALID_ARG;
    8dd6:	f06f 000c 	mvn.w	r0, #12
    8dda:	bd70      	pop	{r4, r5, r6, pc}
    8ddc:	00007f89 	.word	0x00007f89
    8de0:	0000ee88 	.word	0x0000ee88
    8de4:	0000eeac 	.word	0x0000eeac
    8de8:	000070c1 	.word	0x000070c1

00008dec <_spi_m_async_init>:
{
    8dec:	b538      	push	{r3, r4, r5, lr}
    8dee:	4604      	mov	r4, r0
    8df0:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    8df2:	4b15      	ldr	r3, [pc, #84]	; (8e48 <_spi_m_async_init+0x5c>)
    8df4:	4798      	blx	r3
	if (rc < 0) {
    8df6:	2800      	cmp	r0, #0
    8df8:	db24      	blt.n	8e44 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    8dfa:	4621      	mov	r1, r4
    8dfc:	4628      	mov	r0, r5
    8dfe:	4b13      	ldr	r3, [pc, #76]	; (8e4c <_spi_m_async_init+0x60>)
    8e00:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    8e02:	2300      	movs	r3, #0
    8e04:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    8e06:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    8e08:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    8e0a:	4628      	mov	r0, r5
    8e0c:	4b10      	ldr	r3, [pc, #64]	; (8e50 <_spi_m_async_init+0x64>)
    8e0e:	4798      	blx	r3
    8e10:	1d01      	adds	r1, r0, #4
    8e12:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e14:	2401      	movs	r4, #1
    8e16:	f000 021f 	and.w	r2, r0, #31
    8e1a:	fa04 f202 	lsl.w	r2, r4, r2
    8e1e:	0943      	lsrs	r3, r0, #5
    8e20:	009b      	lsls	r3, r3, #2
    8e22:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    8e26:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    8e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    8e2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8e32:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e36:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    8e3a:	3001      	adds	r0, #1
    8e3c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    8e3e:	4281      	cmp	r1, r0
    8e40:	d1e9      	bne.n	8e16 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    8e42:	2000      	movs	r0, #0
}
    8e44:	bd38      	pop	{r3, r4, r5, pc}
    8e46:	bf00      	nop
    8e48:	00008c5d 	.word	0x00008c5d
    8e4c:	0000803d 	.word	0x0000803d
    8e50:	0000809d 	.word	0x0000809d

00008e54 <_spi_m_async_enable>:
{
    8e54:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    8e56:	4604      	mov	r4, r0
    8e58:	b160      	cbz	r0, 8e74 <_spi_m_async_enable+0x20>
    8e5a:	6800      	ldr	r0, [r0, #0]
    8e5c:	3000      	adds	r0, #0
    8e5e:	bf18      	it	ne
    8e60:	2001      	movne	r0, #1
    8e62:	f640 22db 	movw	r2, #2779	; 0xadb
    8e66:	4904      	ldr	r1, [pc, #16]	; (8e78 <_spi_m_async_enable+0x24>)
    8e68:	4b04      	ldr	r3, [pc, #16]	; (8e7c <_spi_m_async_enable+0x28>)
    8e6a:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    8e6c:	6820      	ldr	r0, [r4, #0]
    8e6e:	4b04      	ldr	r3, [pc, #16]	; (8e80 <_spi_m_async_enable+0x2c>)
    8e70:	4798      	blx	r3
}
    8e72:	bd10      	pop	{r4, pc}
    8e74:	2000      	movs	r0, #0
    8e76:	e7f4      	b.n	8e62 <_spi_m_async_enable+0xe>
    8e78:	0000eeac 	.word	0x0000eeac
    8e7c:	000070c1 	.word	0x000070c1
    8e80:	000080d5 	.word	0x000080d5

00008e84 <_spi_m_async_set_mode>:
{
    8e84:	b538      	push	{r3, r4, r5, lr}
    8e86:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    8e88:	4604      	mov	r4, r0
    8e8a:	b168      	cbz	r0, 8ea8 <_spi_m_async_set_mode+0x24>
    8e8c:	6800      	ldr	r0, [r0, #0]
    8e8e:	3000      	adds	r0, #0
    8e90:	bf18      	it	ne
    8e92:	2001      	movne	r0, #1
    8e94:	f640 320c 	movw	r2, #2828	; 0xb0c
    8e98:	4904      	ldr	r1, [pc, #16]	; (8eac <_spi_m_async_set_mode+0x28>)
    8e9a:	4b05      	ldr	r3, [pc, #20]	; (8eb0 <_spi_m_async_set_mode+0x2c>)
    8e9c:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    8e9e:	4629      	mov	r1, r5
    8ea0:	6820      	ldr	r0, [r4, #0]
    8ea2:	4b04      	ldr	r3, [pc, #16]	; (8eb4 <_spi_m_async_set_mode+0x30>)
    8ea4:	4798      	blx	r3
}
    8ea6:	bd38      	pop	{r3, r4, r5, pc}
    8ea8:	2000      	movs	r0, #0
    8eaa:	e7f3      	b.n	8e94 <_spi_m_async_set_mode+0x10>
    8eac:	0000eeac 	.word	0x0000eeac
    8eb0:	000070c1 	.word	0x000070c1
    8eb4:	00008115 	.word	0x00008115

00008eb8 <_spi_m_async_set_baudrate>:
{
    8eb8:	b538      	push	{r3, r4, r5, lr}
    8eba:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    8ebc:	4605      	mov	r5, r0
    8ebe:	b198      	cbz	r0, 8ee8 <_spi_m_async_set_baudrate+0x30>
    8ec0:	6800      	ldr	r0, [r0, #0]
    8ec2:	3000      	adds	r0, #0
    8ec4:	bf18      	it	ne
    8ec6:	2001      	movne	r0, #1
    8ec8:	f640 323b 	movw	r2, #2875	; 0xb3b
    8ecc:	4907      	ldr	r1, [pc, #28]	; (8eec <_spi_m_async_set_baudrate+0x34>)
    8ece:	4b08      	ldr	r3, [pc, #32]	; (8ef0 <_spi_m_async_set_baudrate+0x38>)
    8ed0:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    8ed2:	682b      	ldr	r3, [r5, #0]
    8ed4:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8ed6:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    8eda:	bf03      	ittte	eq
    8edc:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    8ede:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    8ee0:	2000      	moveq	r0, #0
		return ERR_BUSY;
    8ee2:	f06f 0003 	mvnne.w	r0, #3
}
    8ee6:	bd38      	pop	{r3, r4, r5, pc}
    8ee8:	2000      	movs	r0, #0
    8eea:	e7ed      	b.n	8ec8 <_spi_m_async_set_baudrate+0x10>
    8eec:	0000eeac 	.word	0x0000eeac
    8ef0:	000070c1 	.word	0x000070c1

00008ef4 <_spi_m_async_enable_tx>:
{
    8ef4:	b538      	push	{r3, r4, r5, lr}
    8ef6:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    8ef8:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    8efa:	b160      	cbz	r0, 8f16 <_spi_m_async_enable_tx+0x22>
    8efc:	1c20      	adds	r0, r4, #0
    8efe:	bf18      	it	ne
    8f00:	2001      	movne	r0, #1
    8f02:	f640 32fe 	movw	r2, #3070	; 0xbfe
    8f06:	4906      	ldr	r1, [pc, #24]	; (8f20 <_spi_m_async_enable_tx+0x2c>)
    8f08:	4b06      	ldr	r3, [pc, #24]	; (8f24 <_spi_m_async_enable_tx+0x30>)
    8f0a:	4798      	blx	r3
	if (state) {
    8f0c:	b92d      	cbnz	r5, 8f1a <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    8f0e:	2301      	movs	r3, #1
    8f10:	7523      	strb	r3, [r4, #20]
}
    8f12:	2000      	movs	r0, #0
    8f14:	bd38      	pop	{r3, r4, r5, pc}
    8f16:	2000      	movs	r0, #0
    8f18:	e7f3      	b.n	8f02 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    8f1a:	2301      	movs	r3, #1
    8f1c:	75a3      	strb	r3, [r4, #22]
    8f1e:	e7f8      	b.n	8f12 <_spi_m_async_enable_tx+0x1e>
    8f20:	0000eeac 	.word	0x0000eeac
    8f24:	000070c1 	.word	0x000070c1

00008f28 <_spi_m_async_enable_rx>:
{
    8f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f2a:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    8f2c:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    8f2e:	4e0c      	ldr	r6, [pc, #48]	; (8f60 <_spi_m_async_enable_rx+0x38>)
    8f30:	f640 4212 	movw	r2, #3090	; 0xc12
    8f34:	4631      	mov	r1, r6
    8f36:	3000      	adds	r0, #0
    8f38:	bf18      	it	ne
    8f3a:	2001      	movne	r0, #1
    8f3c:	4d09      	ldr	r5, [pc, #36]	; (8f64 <_spi_m_async_enable_rx+0x3c>)
    8f3e:	47a8      	blx	r5
	ASSERT(hw);
    8f40:	f640 4213 	movw	r2, #3091	; 0xc13
    8f44:	4631      	mov	r1, r6
    8f46:	1c20      	adds	r0, r4, #0
    8f48:	bf18      	it	ne
    8f4a:	2001      	movne	r0, #1
    8f4c:	47a8      	blx	r5
	if (state) {
    8f4e:	b91f      	cbnz	r7, 8f58 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    8f50:	2304      	movs	r3, #4
    8f52:	7523      	strb	r3, [r4, #20]
}
    8f54:	2000      	movs	r0, #0
    8f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    8f58:	2304      	movs	r3, #4
    8f5a:	75a3      	strb	r3, [r4, #22]
    8f5c:	e7fa      	b.n	8f54 <_spi_m_async_enable_rx+0x2c>
    8f5e:	bf00      	nop
    8f60:	0000eeac 	.word	0x0000eeac
    8f64:	000070c1 	.word	0x000070c1

00008f68 <_spi_m_async_enable_tx_complete>:
{
    8f68:	b538      	push	{r3, r4, r5, lr}
    8f6a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    8f6c:	4604      	mov	r4, r0
    8f6e:	b170      	cbz	r0, 8f8e <_spi_m_async_enable_tx_complete+0x26>
    8f70:	6800      	ldr	r0, [r0, #0]
    8f72:	3000      	adds	r0, #0
    8f74:	bf18      	it	ne
    8f76:	2001      	movne	r0, #1
    8f78:	f640 4225 	movw	r2, #3109	; 0xc25
    8f7c:	4907      	ldr	r1, [pc, #28]	; (8f9c <_spi_m_async_enable_tx_complete+0x34>)
    8f7e:	4b08      	ldr	r3, [pc, #32]	; (8fa0 <_spi_m_async_enable_tx_complete+0x38>)
    8f80:	4798      	blx	r3
	if (state) {
    8f82:	b935      	cbnz	r5, 8f92 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    8f84:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    8f86:	2202      	movs	r2, #2
    8f88:	751a      	strb	r2, [r3, #20]
}
    8f8a:	2000      	movs	r0, #0
    8f8c:	bd38      	pop	{r3, r4, r5, pc}
    8f8e:	2000      	movs	r0, #0
    8f90:	e7f2      	b.n	8f78 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    8f92:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    8f94:	2202      	movs	r2, #2
    8f96:	759a      	strb	r2, [r3, #22]
    8f98:	e7f7      	b.n	8f8a <_spi_m_async_enable_tx_complete+0x22>
    8f9a:	bf00      	nop
    8f9c:	0000eeac 	.word	0x0000eeac
    8fa0:	000070c1 	.word	0x000070c1

00008fa4 <_spi_m_async_write_one>:
{
    8fa4:	b538      	push	{r3, r4, r5, lr}
    8fa6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    8fa8:	4604      	mov	r4, r0
    8faa:	b160      	cbz	r0, 8fc6 <_spi_m_async_write_one+0x22>
    8fac:	6800      	ldr	r0, [r0, #0]
    8fae:	3000      	adds	r0, #0
    8fb0:	bf18      	it	ne
    8fb2:	2001      	movne	r0, #1
    8fb4:	f640 4237 	movw	r2, #3127	; 0xc37
    8fb8:	4904      	ldr	r1, [pc, #16]	; (8fcc <_spi_m_async_write_one+0x28>)
    8fba:	4b05      	ldr	r3, [pc, #20]	; (8fd0 <_spi_m_async_write_one+0x2c>)
    8fbc:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    8fbe:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    8fc0:	629d      	str	r5, [r3, #40]	; 0x28
}
    8fc2:	2000      	movs	r0, #0
    8fc4:	bd38      	pop	{r3, r4, r5, pc}
    8fc6:	2000      	movs	r0, #0
    8fc8:	e7f4      	b.n	8fb4 <_spi_m_async_write_one+0x10>
    8fca:	bf00      	nop
    8fcc:	0000eeac 	.word	0x0000eeac
    8fd0:	000070c1 	.word	0x000070c1

00008fd4 <_spi_m_async_read_one>:
{
    8fd4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    8fd6:	4604      	mov	r4, r0
    8fd8:	b160      	cbz	r0, 8ff4 <_spi_m_async_read_one+0x20>
    8fda:	6800      	ldr	r0, [r0, #0]
    8fdc:	3000      	adds	r0, #0
    8fde:	bf18      	it	ne
    8fe0:	2001      	movne	r0, #1
    8fe2:	f640 4252 	movw	r2, #3154	; 0xc52
    8fe6:	4904      	ldr	r1, [pc, #16]	; (8ff8 <_spi_m_async_read_one+0x24>)
    8fe8:	4b04      	ldr	r3, [pc, #16]	; (8ffc <_spi_m_async_read_one+0x28>)
    8fea:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    8fec:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    8fee:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    8ff0:	b280      	uxth	r0, r0
    8ff2:	bd10      	pop	{r4, pc}
    8ff4:	2000      	movs	r0, #0
    8ff6:	e7f4      	b.n	8fe2 <_spi_m_async_read_one+0xe>
    8ff8:	0000eeac 	.word	0x0000eeac
    8ffc:	000070c1 	.word	0x000070c1

00009000 <_spi_m_async_register_callback>:
{
    9000:	b570      	push	{r4, r5, r6, lr}
    9002:	460d      	mov	r5, r1
    9004:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    9006:	4604      	mov	r4, r0
    9008:	b168      	cbz	r0, 9026 <_spi_m_async_register_callback+0x26>
    900a:	2903      	cmp	r1, #3
    900c:	bf8c      	ite	hi
    900e:	2000      	movhi	r0, #0
    9010:	2001      	movls	r0, #1
    9012:	f640 426b 	movw	r2, #3179	; 0xc6b
    9016:	4905      	ldr	r1, [pc, #20]	; (902c <_spi_m_async_register_callback+0x2c>)
    9018:	4b05      	ldr	r3, [pc, #20]	; (9030 <_spi_m_async_register_callback+0x30>)
    901a:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    901c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    9020:	60a6      	str	r6, [r4, #8]
}
    9022:	2000      	movs	r0, #0
    9024:	bd70      	pop	{r4, r5, r6, pc}
    9026:	2000      	movs	r0, #0
    9028:	e7f3      	b.n	9012 <_spi_m_async_register_callback+0x12>
    902a:	bf00      	nop
    902c:	0000eeac 	.word	0x0000eeac
    9030:	000070c1 	.word	0x000070c1

00009034 <_spi_m_async_set_irq_state>:
{
    9034:	b570      	push	{r4, r5, r6, lr}
    9036:	460c      	mov	r4, r1
    9038:	4615      	mov	r5, r2
	ASSERT(device);
    903a:	4606      	mov	r6, r0
    903c:	f640 42ac 	movw	r2, #3244	; 0xcac
    9040:	4908      	ldr	r1, [pc, #32]	; (9064 <_spi_m_async_set_irq_state+0x30>)
    9042:	3000      	adds	r0, #0
    9044:	bf18      	it	ne
    9046:	2001      	movne	r0, #1
    9048:	4b07      	ldr	r3, [pc, #28]	; (9068 <_spi_m_async_set_irq_state+0x34>)
    904a:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    904c:	2c03      	cmp	r4, #3
    904e:	d000      	beq.n	9052 <_spi_m_async_set_irq_state+0x1e>
    9050:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    9052:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    9054:	b115      	cbz	r5, 905c <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    9056:	2280      	movs	r2, #128	; 0x80
    9058:	759a      	strb	r2, [r3, #22]
}
    905a:	e7f9      	b.n	9050 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    905c:	2280      	movs	r2, #128	; 0x80
    905e:	751a      	strb	r2, [r3, #20]
    9060:	bd70      	pop	{r4, r5, r6, pc}
    9062:	bf00      	nop
    9064:	0000eeac 	.word	0x0000eeac
    9068:	000070c1 	.word	0x000070c1

0000906c <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    906c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9070:	4605      	mov	r5, r0
    9072:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    9074:	4608      	mov	r0, r1
    9076:	4b52      	ldr	r3, [pc, #328]	; (91c0 <_spi_m_dma_init+0x154>)
    9078:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    907a:	2803      	cmp	r0, #3
    907c:	d00c      	beq.n	9098 <_spi_m_dma_init+0x2c>
    907e:	2807      	cmp	r0, #7
    9080:	bf08      	it	eq
    9082:	2301      	moveq	r3, #1
    9084:	d009      	beq.n	909a <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    9086:	2d00      	cmp	r5, #0
    9088:	f000 8086 	beq.w	9198 <_spi_m_dma_init+0x12c>
    908c:	2c00      	cmp	r4, #0
    908e:	f040 808d 	bne.w	91ac <_spi_m_dma_init+0x140>
	return NULL;
    9092:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    9094:	2000      	movs	r0, #0
    9096:	e009      	b.n	90ac <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    9098:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    909a:	4e4a      	ldr	r6, [pc, #296]	; (91c4 <_spi_m_dma_init+0x158>)
    909c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    90a0:	441e      	add	r6, r3
	ASSERT(dev && hw);
    90a2:	2d00      	cmp	r5, #0
    90a4:	d0f6      	beq.n	9094 <_spi_m_dma_init+0x28>
    90a6:	2001      	movs	r0, #1
    90a8:	2c00      	cmp	r4, #0
    90aa:	d0f3      	beq.n	9094 <_spi_m_dma_init+0x28>
    90ac:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    90b0:	4945      	ldr	r1, [pc, #276]	; (91c8 <_spi_m_dma_init+0x15c>)
    90b2:	4b46      	ldr	r3, [pc, #280]	; (91cc <_spi_m_dma_init+0x160>)
    90b4:	4798      	blx	r3

	if (regs == NULL) {
    90b6:	2e00      	cmp	r6, #0
    90b8:	d06a      	beq.n	9190 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    90ba:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    90bc:	f013 0f01 	tst.w	r3, #1
    90c0:	d11d      	bne.n	90fe <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    90c2:	6833      	ldr	r3, [r6, #0]
    90c4:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    90c8:	69e3      	ldr	r3, [r4, #28]
    90ca:	f013 0f03 	tst.w	r3, #3
    90ce:	d1fb      	bne.n	90c8 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    90d0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    90d2:	f013 0f02 	tst.w	r3, #2
    90d6:	d00b      	beq.n	90f0 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    90d8:	6823      	ldr	r3, [r4, #0]
    90da:	f023 0302 	bic.w	r3, r3, #2
    90de:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    90e0:	69e3      	ldr	r3, [r4, #28]
    90e2:	f013 0f03 	tst.w	r3, #3
    90e6:	d1fb      	bne.n	90e0 <_spi_m_dma_init+0x74>
    90e8:	69e3      	ldr	r3, [r4, #28]
    90ea:	f013 0f02 	tst.w	r3, #2
    90ee:	d1fb      	bne.n	90e8 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    90f0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    90f4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    90f6:	69e3      	ldr	r3, [r4, #28]
    90f8:	f013 0f03 	tst.w	r3, #3
    90fc:	d1fb      	bne.n	90f6 <_spi_m_dma_init+0x8a>
    90fe:	69e3      	ldr	r3, [r4, #28]
    9100:	f013 0f01 	tst.w	r3, #1
    9104:	d1fb      	bne.n	90fe <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    9106:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    9108:	f44f 6217 	mov.w	r2, #2416	; 0x970
    910c:	492e      	ldr	r1, [pc, #184]	; (91c8 <_spi_m_dma_init+0x15c>)
    910e:	1c20      	adds	r0, r4, #0
    9110:	bf18      	it	ne
    9112:	2001      	movne	r0, #1
    9114:	4b2d      	ldr	r3, [pc, #180]	; (91cc <_spi_m_dma_init+0x160>)
    9116:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    9118:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    911a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    911e:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    9122:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    9124:	69e3      	ldr	r3, [r4, #28]
    9126:	f013 0f03 	tst.w	r3, #3
    912a:	d1fb      	bne.n	9124 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    912c:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    912e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    9132:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    9136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    913a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    913c:	69e3      	ldr	r3, [r4, #28]
    913e:	f013 0f17 	tst.w	r3, #23
    9142:	d1fb      	bne.n	913c <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    9144:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    9146:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    9148:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    914a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    914e:	f105 0818 	add.w	r8, r5, #24
    9152:	4620      	mov	r0, r4
    9154:	4b1e      	ldr	r3, [pc, #120]	; (91d0 <_spi_m_dma_init+0x164>)
    9156:	4798      	blx	r3
    9158:	4601      	mov	r1, r0
    915a:	4640      	mov	r0, r8
    915c:	4f1d      	ldr	r7, [pc, #116]	; (91d4 <_spi_m_dma_init+0x168>)
    915e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    9160:	69ab      	ldr	r3, [r5, #24]
    9162:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    9164:	69ab      	ldr	r3, [r5, #24]
    9166:	4a1c      	ldr	r2, [pc, #112]	; (91d8 <_spi_m_dma_init+0x16c>)
    9168:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    916a:	69ab      	ldr	r3, [r5, #24]
    916c:	4e1b      	ldr	r6, [pc, #108]	; (91dc <_spi_m_dma_init+0x170>)
    916e:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    9170:	4620      	mov	r0, r4
    9172:	4b1b      	ldr	r3, [pc, #108]	; (91e0 <_spi_m_dma_init+0x174>)
    9174:	4798      	blx	r3
    9176:	4601      	mov	r1, r0
    9178:	4640      	mov	r0, r8
    917a:	47b8      	blx	r7
	dev->resource->back                 = dev;
    917c:	69ab      	ldr	r3, [r5, #24]
    917e:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    9180:	69ab      	ldr	r3, [r5, #24]
    9182:	4a18      	ldr	r2, [pc, #96]	; (91e4 <_spi_m_dma_init+0x178>)
    9184:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    9186:	69ab      	ldr	r3, [r5, #24]
    9188:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    918a:	2000      	movs	r0, #0
    918c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    9190:	f06f 000c 	mvn.w	r0, #12
    9194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    9198:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    919c:	490a      	ldr	r1, [pc, #40]	; (91c8 <_spi_m_dma_init+0x15c>)
    919e:	2000      	movs	r0, #0
    91a0:	4b0a      	ldr	r3, [pc, #40]	; (91cc <_spi_m_dma_init+0x160>)
    91a2:	4798      	blx	r3
		return ERR_INVALID_ARG;
    91a4:	f06f 000c 	mvn.w	r0, #12
    91a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    91ac:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    91b0:	4905      	ldr	r1, [pc, #20]	; (91c8 <_spi_m_dma_init+0x15c>)
    91b2:	2001      	movs	r0, #1
    91b4:	4b05      	ldr	r3, [pc, #20]	; (91cc <_spi_m_dma_init+0x160>)
    91b6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    91b8:	f06f 000c 	mvn.w	r0, #12
    91bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    91c0:	00007f89 	.word	0x00007f89
    91c4:	0000ee88 	.word	0x0000ee88
    91c8:	0000eeac 	.word	0x0000eeac
    91cc:	000070c1 	.word	0x000070c1
    91d0:	000081a9 	.word	0x000081a9
    91d4:	0000795d 	.word	0x0000795d
    91d8:	000081bd 	.word	0x000081bd
    91dc:	000081d5 	.word	0x000081d5
    91e0:	00008195 	.word	0x00008195
    91e4:	000081c9 	.word	0x000081c9

000091e8 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    91e8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    91ea:	4604      	mov	r4, r0
    91ec:	b160      	cbz	r0, 9208 <_spi_m_dma_enable+0x20>
    91ee:	6800      	ldr	r0, [r0, #0]
    91f0:	3000      	adds	r0, #0
    91f2:	bf18      	it	ne
    91f4:	2001      	movne	r0, #1
    91f6:	f640 52c9 	movw	r2, #3529	; 0xdc9
    91fa:	4904      	ldr	r1, [pc, #16]	; (920c <_spi_m_dma_enable+0x24>)
    91fc:	4b04      	ldr	r3, [pc, #16]	; (9210 <_spi_m_dma_enable+0x28>)
    91fe:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    9200:	6820      	ldr	r0, [r4, #0]
    9202:	4b04      	ldr	r3, [pc, #16]	; (9214 <_spi_m_dma_enable+0x2c>)
    9204:	4798      	blx	r3
}
    9206:	bd10      	pop	{r4, pc}
    9208:	2000      	movs	r0, #0
    920a:	e7f4      	b.n	91f6 <_spi_m_dma_enable+0xe>
    920c:	0000eeac 	.word	0x0000eeac
    9210:	000070c1 	.word	0x000070c1
    9214:	000080b1 	.word	0x000080b1

00009218 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    9218:	b570      	push	{r4, r5, r6, lr}
    921a:	4605      	mov	r5, r0
    921c:	4614      	mov	r4, r2
	switch (type) {
    921e:	2901      	cmp	r1, #1
    9220:	d00e      	beq.n	9240 <_spi_m_dma_register_callback+0x28>
    9222:	b111      	cbz	r1, 922a <_spi_m_dma_register_callback+0x12>
    9224:	2902      	cmp	r1, #2
    9226:	d016      	beq.n	9256 <_spi_m_dma_register_callback+0x3e>
    9228:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    922a:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    922c:	6800      	ldr	r0, [r0, #0]
    922e:	4b13      	ldr	r3, [pc, #76]	; (927c <_spi_m_dma_register_callback+0x64>)
    9230:	4798      	blx	r3
    9232:	1c22      	adds	r2, r4, #0
    9234:	bf18      	it	ne
    9236:	2201      	movne	r2, #1
    9238:	2100      	movs	r1, #0
    923a:	4b11      	ldr	r3, [pc, #68]	; (9280 <_spi_m_dma_register_callback+0x68>)
    923c:	4798      	blx	r3
		break;
    923e:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    9240:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    9242:	6800      	ldr	r0, [r0, #0]
    9244:	4b0f      	ldr	r3, [pc, #60]	; (9284 <_spi_m_dma_register_callback+0x6c>)
    9246:	4798      	blx	r3
    9248:	1c22      	adds	r2, r4, #0
    924a:	bf18      	it	ne
    924c:	2201      	movne	r2, #1
    924e:	2100      	movs	r1, #0
    9250:	4b0b      	ldr	r3, [pc, #44]	; (9280 <_spi_m_dma_register_callback+0x68>)
    9252:	4798      	blx	r3
		break;
    9254:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    9256:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    9258:	6800      	ldr	r0, [r0, #0]
    925a:	4b0a      	ldr	r3, [pc, #40]	; (9284 <_spi_m_dma_register_callback+0x6c>)
    925c:	4798      	blx	r3
    925e:	3400      	adds	r4, #0
    9260:	bf18      	it	ne
    9262:	2401      	movne	r4, #1
    9264:	4622      	mov	r2, r4
    9266:	2101      	movs	r1, #1
    9268:	4e05      	ldr	r6, [pc, #20]	; (9280 <_spi_m_dma_register_callback+0x68>)
    926a:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    926c:	6828      	ldr	r0, [r5, #0]
    926e:	4b03      	ldr	r3, [pc, #12]	; (927c <_spi_m_dma_register_callback+0x64>)
    9270:	4798      	blx	r3
    9272:	4622      	mov	r2, r4
    9274:	2101      	movs	r1, #1
    9276:	47b0      	blx	r6
    9278:	bd70      	pop	{r4, r5, r6, pc}
    927a:	bf00      	nop
    927c:	00008195 	.word	0x00008195
    9280:	00007835 	.word	0x00007835
    9284:	000081a9 	.word	0x000081a9

00009288 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    9288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    928c:	4605      	mov	r5, r0
    928e:	4689      	mov	r9, r1
    9290:	4617      	mov	r7, r2
    9292:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    9294:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    9298:	4658      	mov	r0, fp
    929a:	4b46      	ldr	r3, [pc, #280]	; (93b4 <_spi_m_dma_transfer+0x12c>)
    929c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    929e:	2803      	cmp	r0, #3
    92a0:	d053      	beq.n	934a <_spi_m_dma_transfer+0xc2>
    92a2:	2807      	cmp	r0, #7
    92a4:	bf08      	it	eq
    92a6:	2201      	moveq	r2, #1
    92a8:	d050      	beq.n	934c <_spi_m_dma_transfer+0xc4>
	return NULL;
    92aa:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    92ae:	4658      	mov	r0, fp
    92b0:	4b41      	ldr	r3, [pc, #260]	; (93b8 <_spi_m_dma_transfer+0x130>)
    92b2:	4798      	blx	r3
    92b4:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    92b6:	4658      	mov	r0, fp
    92b8:	4b40      	ldr	r3, [pc, #256]	; (93bc <_spi_m_dma_transfer+0x134>)
    92ba:	4798      	blx	r3
    92bc:	4604      	mov	r4, r0

	if (rxbuf) {
    92be:	2f00      	cmp	r7, #0
    92c0:	d04b      	beq.n	935a <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    92c2:	2d00      	cmp	r5, #0
    92c4:	d047      	beq.n	9356 <_spi_m_dma_transfer+0xce>
    92c6:	f11b 0000 	adds.w	r0, fp, #0
    92ca:	bf18      	it	ne
    92cc:	2001      	movne	r0, #1
    92ce:	f640 5213 	movw	r2, #3347	; 0xd13
    92d2:	493b      	ldr	r1, [pc, #236]	; (93c0 <_spi_m_dma_transfer+0x138>)
    92d4:	4b3b      	ldr	r3, [pc, #236]	; (93c4 <_spi_m_dma_transfer+0x13c>)
    92d6:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    92d8:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    92da:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    92dc:	f013 0f04 	tst.w	r3, #4
    92e0:	d107      	bne.n	92f2 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    92e2:	6853      	ldr	r3, [r2, #4]
    92e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    92e8:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    92ea:	69d3      	ldr	r3, [r2, #28]
    92ec:	f013 0f17 	tst.w	r3, #23
    92f0:	d1fb      	bne.n	92ea <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    92f2:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    92f4:	3128      	adds	r1, #40	; 0x28
    92f6:	4630      	mov	r0, r6
    92f8:	4b33      	ldr	r3, [pc, #204]	; (93c8 <_spi_m_dma_transfer+0x140>)
    92fa:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    92fc:	4639      	mov	r1, r7
    92fe:	4630      	mov	r0, r6
    9300:	4b32      	ldr	r3, [pc, #200]	; (93cc <_spi_m_dma_transfer+0x144>)
    9302:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    9304:	4641      	mov	r1, r8
    9306:	4630      	mov	r0, r6
    9308:	4b31      	ldr	r3, [pc, #196]	; (93d0 <_spi_m_dma_transfer+0x148>)
    930a:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    930c:	2100      	movs	r1, #0
    930e:	4630      	mov	r0, r6
    9310:	4b30      	ldr	r3, [pc, #192]	; (93d4 <_spi_m_dma_transfer+0x14c>)
    9312:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    9314:	f1b9 0f00 	cmp.w	r9, #0
    9318:	d039      	beq.n	938e <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    931a:	4649      	mov	r1, r9
    931c:	4620      	mov	r0, r4
    931e:	4b2a      	ldr	r3, [pc, #168]	; (93c8 <_spi_m_dma_transfer+0x140>)
    9320:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    9322:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    9324:	3128      	adds	r1, #40	; 0x28
    9326:	4620      	mov	r0, r4
    9328:	4b28      	ldr	r3, [pc, #160]	; (93cc <_spi_m_dma_transfer+0x144>)
    932a:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    932c:	2101      	movs	r1, #1
    932e:	4620      	mov	r0, r4
    9330:	4b29      	ldr	r3, [pc, #164]	; (93d8 <_spi_m_dma_transfer+0x150>)
    9332:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    9334:	4641      	mov	r1, r8
    9336:	4620      	mov	r0, r4
    9338:	4b25      	ldr	r3, [pc, #148]	; (93d0 <_spi_m_dma_transfer+0x148>)
    933a:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    933c:	2100      	movs	r1, #0
    933e:	4620      	mov	r0, r4
    9340:	4b24      	ldr	r3, [pc, #144]	; (93d4 <_spi_m_dma_transfer+0x14c>)
    9342:	4798      	blx	r3

	return ERR_NONE;
}
    9344:	2000      	movs	r0, #0
    9346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    934a:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    934c:	4b23      	ldr	r3, [pc, #140]	; (93dc <_spi_m_dma_transfer+0x154>)
    934e:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    9352:	4492      	add	sl, r2
    9354:	e7ab      	b.n	92ae <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    9356:	2000      	movs	r0, #0
    9358:	e7b9      	b.n	92ce <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    935a:	b1b5      	cbz	r5, 938a <_spi_m_dma_transfer+0x102>
    935c:	f11b 0000 	adds.w	r0, fp, #0
    9360:	bf18      	it	ne
    9362:	2001      	movne	r0, #1
    9364:	f640 521a 	movw	r2, #3354	; 0xd1a
    9368:	4915      	ldr	r1, [pc, #84]	; (93c0 <_spi_m_dma_transfer+0x138>)
    936a:	4b16      	ldr	r3, [pc, #88]	; (93c4 <_spi_m_dma_transfer+0x13c>)
    936c:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    936e:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    9370:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    9372:	f013 0f04 	tst.w	r3, #4
    9376:	d1cd      	bne.n	9314 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    9378:	6853      	ldr	r3, [r2, #4]
    937a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    937e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    9380:	69d3      	ldr	r3, [r2, #28]
    9382:	f013 0f17 	tst.w	r3, #23
    9386:	d1fb      	bne.n	9380 <_spi_m_dma_transfer+0xf8>
    9388:	e7c4      	b.n	9314 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    938a:	2000      	movs	r0, #0
    938c:	e7ea      	b.n	9364 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    938e:	f10a 010e 	add.w	r1, sl, #14
    9392:	4620      	mov	r0, r4
    9394:	4b0c      	ldr	r3, [pc, #48]	; (93c8 <_spi_m_dma_transfer+0x140>)
    9396:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    9398:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    939a:	3128      	adds	r1, #40	; 0x28
    939c:	4620      	mov	r0, r4
    939e:	4b0b      	ldr	r3, [pc, #44]	; (93cc <_spi_m_dma_transfer+0x144>)
    93a0:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    93a2:	2100      	movs	r1, #0
    93a4:	4620      	mov	r0, r4
    93a6:	4b0c      	ldr	r3, [pc, #48]	; (93d8 <_spi_m_dma_transfer+0x150>)
    93a8:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    93aa:	4641      	mov	r1, r8
    93ac:	4620      	mov	r0, r4
    93ae:	4b08      	ldr	r3, [pc, #32]	; (93d0 <_spi_m_dma_transfer+0x148>)
    93b0:	4798      	blx	r3
    93b2:	e7c3      	b.n	933c <_spi_m_dma_transfer+0xb4>
    93b4:	00007f89 	.word	0x00007f89
    93b8:	000081a9 	.word	0x000081a9
    93bc:	00008195 	.word	0x00008195
    93c0:	0000eeac 	.word	0x0000eeac
    93c4:	000070c1 	.word	0x000070c1
    93c8:	00007899 	.word	0x00007899
    93cc:	00007889 	.word	0x00007889
    93d0:	000078c5 	.word	0x000078c5
    93d4:	0000791d 	.word	0x0000791d
    93d8:	000078a9 	.word	0x000078a9
    93dc:	0000ee88 	.word	0x0000ee88

000093e0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    93e0:	4b03      	ldr	r3, [pc, #12]	; (93f0 <_delay_init+0x10>)
    93e2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    93e6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    93e8:	2205      	movs	r2, #5
    93ea:	601a      	str	r2, [r3, #0]
    93ec:	4770      	bx	lr
    93ee:	bf00      	nop
    93f0:	e000e010 	.word	0xe000e010

000093f4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    93f4:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    93f6:	b303      	cbz	r3, 943a <_delay_cycles+0x46>
{
    93f8:	b430      	push	{r4, r5}
    93fa:	1e5d      	subs	r5, r3, #1
    93fc:	b2ed      	uxtb	r5, r5
	while (n--) {
    93fe:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    9400:	4a12      	ldr	r2, [pc, #72]	; (944c <_delay_cycles+0x58>)
    9402:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    9406:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    9408:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    940a:	6813      	ldr	r3, [r2, #0]
    940c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9410:	d0fb      	beq.n	940a <_delay_cycles+0x16>
	while (n--) {
    9412:	3801      	subs	r0, #1
    9414:	b2c0      	uxtb	r0, r0
    9416:	28ff      	cmp	r0, #255	; 0xff
    9418:	d1f5      	bne.n	9406 <_delay_cycles+0x12>
    941a:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    941e:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    9422:	3101      	adds	r1, #1
    9424:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    9426:	4b09      	ldr	r3, [pc, #36]	; (944c <_delay_cycles+0x58>)
    9428:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    942a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    942c:	461a      	mov	r2, r3
    942e:	6813      	ldr	r3, [r2, #0]
    9430:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9434:	d0fb      	beq.n	942e <_delay_cycles+0x3a>
		;
}
    9436:	bc30      	pop	{r4, r5}
    9438:	4770      	bx	lr
	SysTick->LOAD = buf;
    943a:	4b04      	ldr	r3, [pc, #16]	; (944c <_delay_cycles+0x58>)
    943c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    943e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    9440:	461a      	mov	r2, r3
    9442:	6813      	ldr	r3, [r2, #0]
    9444:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9448:	d0fb      	beq.n	9442 <_delay_cycles+0x4e>
    944a:	4770      	bx	lr
    944c:	e000e010 	.word	0xe000e010

00009450 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9450:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    9452:	6813      	ldr	r3, [r2, #0]
    9454:	f043 0302 	orr.w	r3, r3, #2
    9458:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    945a:	6913      	ldr	r3, [r2, #16]
    945c:	f013 0f03 	tst.w	r3, #3
    9460:	d1fb      	bne.n	945a <_tc_timer_start+0xa>
}
    9462:	4770      	bx	lr

00009464 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    9464:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    9466:	6813      	ldr	r3, [r2, #0]
    9468:	f023 0302 	bic.w	r3, r3, #2
    946c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    946e:	6913      	ldr	r3, [r2, #16]
    9470:	f013 0f03 	tst.w	r3, #3
    9474:	d1fb      	bne.n	946e <_tc_timer_stop+0xa>
}
    9476:	4770      	bx	lr

00009478 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    9478:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    947a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    947c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9480:	2a02      	cmp	r2, #2
    9482:	d00a      	beq.n	949a <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9484:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9486:	f012 0f0c 	tst.w	r2, #12
    948a:	d10c      	bne.n	94a6 <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    948c:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    948e:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9490:	691a      	ldr	r2, [r3, #16]
    9492:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    9496:	d1fb      	bne.n	9490 <_tc_timer_set_period+0x18>
    9498:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    949a:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    949c:	691a      	ldr	r2, [r3, #16]
    949e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    94a2:	d1fb      	bne.n	949c <_tc_timer_set_period+0x24>
    94a4:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    94a6:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    94a8:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    94ac:	2a01      	cmp	r2, #1
    94ae:	d000      	beq.n	94b2 <_tc_timer_set_period+0x3a>
    94b0:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    94b2:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    94b4:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    94b6:	691a      	ldr	r2, [r3, #16]
    94b8:	f012 0f20 	tst.w	r2, #32
    94bc:	d1fb      	bne.n	94b6 <_tc_timer_set_period+0x3e>
    94be:	e7f7      	b.n	94b0 <_tc_timer_set_period+0x38>

000094c0 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    94c0:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    94c2:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    94c4:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    94c8:	2a02      	cmp	r2, #2
    94ca:	d00a      	beq.n	94e2 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    94cc:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    94ce:	f012 0f0c 	tst.w	r2, #12
    94d2:	d10c      	bne.n	94ee <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    94d4:	691a      	ldr	r2, [r3, #16]
    94d6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    94da:	d1fb      	bne.n	94d4 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    94dc:	8b98      	ldrh	r0, [r3, #28]
    94de:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    94e0:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    94e2:	691a      	ldr	r2, [r3, #16]
    94e4:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    94e8:	d1fb      	bne.n	94e2 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    94ea:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    94ec:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    94ee:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    94f0:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    94f4:	2a01      	cmp	r2, #1
    94f6:	d001      	beq.n	94fc <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    94f8:	2000      	movs	r0, #0
}
    94fa:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    94fc:	691a      	ldr	r2, [r3, #16]
    94fe:	f012 0f20 	tst.w	r2, #32
    9502:	d1fb      	bne.n	94fc <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    9504:	7ed8      	ldrb	r0, [r3, #27]
    9506:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    9508:	4770      	bx	lr

0000950a <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    950a:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    950c:	6913      	ldr	r3, [r2, #16]
    950e:	f013 0f03 	tst.w	r3, #3
    9512:	d1fb      	bne.n	950c <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9514:	6810      	ldr	r0, [r2, #0]
}
    9516:	f3c0 0040 	ubfx	r0, r0, #1, #1
    951a:	4770      	bx	lr

0000951c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    951c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    951e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    9520:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9522:	f012 0f01 	tst.w	r2, #1
    9526:	d100      	bne.n	952a <tc_interrupt_handler+0xe>
    9528:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    952a:	2201      	movs	r2, #1
    952c:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    952e:	6803      	ldr	r3, [r0, #0]
    9530:	4798      	blx	r3
	}
}
    9532:	e7f9      	b.n	9528 <tc_interrupt_handler+0xc>

00009534 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    9534:	b570      	push	{r4, r5, r6, lr}
    9536:	b088      	sub	sp, #32
    9538:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    953a:	466c      	mov	r4, sp
    953c:	4d19      	ldr	r5, [pc, #100]	; (95a4 <get_tc_index+0x70>)
    953e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9542:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9546:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    954a:	9b00      	ldr	r3, [sp, #0]
    954c:	42b3      	cmp	r3, r6
    954e:	d00c      	beq.n	956a <get_tc_index+0x36>
    9550:	4630      	mov	r0, r6
    9552:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9554:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    9556:	f852 1b04 	ldr.w	r1, [r2], #4
    955a:	4281      	cmp	r1, r0
    955c:	d006      	beq.n	956c <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    955e:	3301      	adds	r3, #1
    9560:	2b08      	cmp	r3, #8
    9562:	d1f8      	bne.n	9556 <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9564:	2000      	movs	r0, #0
			return i;
    9566:	b240      	sxtb	r0, r0
    9568:	e013      	b.n	9592 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    956a:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    956c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    9570:	d015      	beq.n	959e <get_tc_index+0x6a>
    9572:	2b01      	cmp	r3, #1
    9574:	d00f      	beq.n	9596 <get_tc_index+0x62>
    9576:	2b02      	cmp	r3, #2
    9578:	d00f      	beq.n	959a <get_tc_index+0x66>
    957a:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    957c:	bf08      	it	eq
    957e:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    9580:	d0f1      	beq.n	9566 <get_tc_index+0x32>
	ASSERT(false);
    9582:	f240 1267 	movw	r2, #359	; 0x167
    9586:	4908      	ldr	r1, [pc, #32]	; (95a8 <get_tc_index+0x74>)
    9588:	2000      	movs	r0, #0
    958a:	4b08      	ldr	r3, [pc, #32]	; (95ac <get_tc_index+0x78>)
    958c:	4798      	blx	r3
	return -1;
    958e:	f04f 30ff 	mov.w	r0, #4294967295
}
    9592:	b008      	add	sp, #32
    9594:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9596:	2001      	movs	r0, #1
    9598:	e7e5      	b.n	9566 <get_tc_index+0x32>
    959a:	2002      	movs	r0, #2
    959c:	e7e3      	b.n	9566 <get_tc_index+0x32>
    959e:	2000      	movs	r0, #0
    95a0:	e7e1      	b.n	9566 <get_tc_index+0x32>
    95a2:	bf00      	nop
    95a4:	0000eec8 	.word	0x0000eec8
    95a8:	0000ef38 	.word	0x0000ef38
    95ac:	000070c1 	.word	0x000070c1

000095b0 <_tc_timer_init>:
{
    95b0:	b570      	push	{r4, r5, r6, lr}
    95b2:	4606      	mov	r6, r0
    95b4:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    95b6:	4608      	mov	r0, r1
    95b8:	4b71      	ldr	r3, [pc, #452]	; (9780 <_tc_timer_init+0x1d0>)
    95ba:	4798      	blx	r3
    95bc:	4605      	mov	r5, r0
	device->hw = hw;
    95be:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    95c0:	22a0      	movs	r2, #160	; 0xa0
    95c2:	4970      	ldr	r1, [pc, #448]	; (9784 <_tc_timer_init+0x1d4>)
    95c4:	2001      	movs	r0, #1
    95c6:	4b70      	ldr	r3, [pc, #448]	; (9788 <_tc_timer_init+0x1d8>)
    95c8:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    95ca:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    95cc:	f013 0f01 	tst.w	r3, #1
    95d0:	d119      	bne.n	9606 <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    95d2:	6923      	ldr	r3, [r4, #16]
    95d4:	f013 0f03 	tst.w	r3, #3
    95d8:	d1fb      	bne.n	95d2 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    95da:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    95dc:	f013 0f02 	tst.w	r3, #2
    95e0:	d00b      	beq.n	95fa <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    95e2:	6823      	ldr	r3, [r4, #0]
    95e4:	f023 0302 	bic.w	r3, r3, #2
    95e8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    95ea:	6923      	ldr	r3, [r4, #16]
    95ec:	f013 0f03 	tst.w	r3, #3
    95f0:	d1fb      	bne.n	95ea <_tc_timer_init+0x3a>
    95f2:	6923      	ldr	r3, [r4, #16]
    95f4:	f013 0f02 	tst.w	r3, #2
    95f8:	d1fb      	bne.n	95f2 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    95fa:	2301      	movs	r3, #1
    95fc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    95fe:	6923      	ldr	r3, [r4, #16]
    9600:	f013 0f03 	tst.w	r3, #3
    9604:	d1fb      	bne.n	95fe <_tc_timer_init+0x4e>
    9606:	6923      	ldr	r3, [r4, #16]
    9608:	f013 0f01 	tst.w	r3, #1
    960c:	d1fb      	bne.n	9606 <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    960e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9612:	4a5e      	ldr	r2, [pc, #376]	; (978c <_tc_timer_init+0x1dc>)
    9614:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    961a:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    961c:	6923      	ldr	r3, [r4, #16]
    961e:	f013 0f03 	tst.w	r3, #3
    9622:	d1fb      	bne.n	961c <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9624:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9628:	4958      	ldr	r1, [pc, #352]	; (978c <_tc_timer_init+0x1dc>)
    962a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    962e:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    9632:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    9636:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    9638:	2301      	movs	r3, #1
    963a:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    963c:	f002 020c 	and.w	r2, r2, #12
    9640:	2a08      	cmp	r2, #8
    9642:	d056      	beq.n	96f2 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9644:	2a00      	cmp	r2, #0
    9646:	d16b      	bne.n	9720 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9648:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    964c:	4a4f      	ldr	r2, [pc, #316]	; (978c <_tc_timer_init+0x1dc>)
    964e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9652:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    9654:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9656:	6923      	ldr	r3, [r4, #16]
    9658:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    965c:	d1fb      	bne.n	9656 <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    965e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9662:	4a4a      	ldr	r2, [pc, #296]	; (978c <_tc_timer_init+0x1dc>)
    9664:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9668:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    966a:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    966c:	6923      	ldr	r3, [r4, #16]
    966e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    9672:	d1fb      	bne.n	966c <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    9674:	2301      	movs	r3, #1
    9676:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    9678:	4b45      	ldr	r3, [pc, #276]	; (9790 <_tc_timer_init+0x1e0>)
    967a:	429c      	cmp	r4, r3
    967c:	d077      	beq.n	976e <_tc_timer_init+0x1be>
	if (hw == TC1) {
    967e:	4b45      	ldr	r3, [pc, #276]	; (9794 <_tc_timer_init+0x1e4>)
    9680:	429c      	cmp	r4, r3
    9682:	d077      	beq.n	9774 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    9684:	4b44      	ldr	r3, [pc, #272]	; (9798 <_tc_timer_init+0x1e8>)
    9686:	429c      	cmp	r4, r3
    9688:	d077      	beq.n	977a <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    968a:	4b44      	ldr	r3, [pc, #272]	; (979c <_tc_timer_init+0x1ec>)
    968c:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    968e:	bf04      	itt	eq
    9690:	4b43      	ldreq	r3, [pc, #268]	; (97a0 <_tc_timer_init+0x1f0>)
    9692:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    9694:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9698:	4a3c      	ldr	r2, [pc, #240]	; (978c <_tc_timer_init+0x1dc>)
    969a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    969e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    96a2:	2b00      	cmp	r3, #0
    96a4:	db23      	blt.n	96ee <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    96a6:	095a      	lsrs	r2, r3, #5
    96a8:	f003 031f 	and.w	r3, r3, #31
    96ac:	2101      	movs	r1, #1
    96ae:	fa01 f303 	lsl.w	r3, r1, r3
    96b2:	3220      	adds	r2, #32
    96b4:	493b      	ldr	r1, [pc, #236]	; (97a4 <_tc_timer_init+0x1f4>)
    96b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    96ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    96be:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    96c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    96c6:	4b31      	ldr	r3, [pc, #196]	; (978c <_tc_timer_init+0x1dc>)
    96c8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    96cc:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    96d0:	2b00      	cmp	r3, #0
    96d2:	db0c      	blt.n	96ee <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    96d4:	0959      	lsrs	r1, r3, #5
    96d6:	f003 031f 	and.w	r3, r3, #31
    96da:	2201      	movs	r2, #1
    96dc:	fa02 f303 	lsl.w	r3, r2, r3
    96e0:	4a30      	ldr	r2, [pc, #192]	; (97a4 <_tc_timer_init+0x1f4>)
    96e2:	f101 0060 	add.w	r0, r1, #96	; 0x60
    96e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    96ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    96ee:	2000      	movs	r0, #0
    96f0:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    96f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    96f6:	4a25      	ldr	r2, [pc, #148]	; (978c <_tc_timer_init+0x1dc>)
    96f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    96fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    96fe:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9700:	6923      	ldr	r3, [r4, #16]
    9702:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    9706:	d1fb      	bne.n	9700 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9708:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    970c:	4a1f      	ldr	r2, [pc, #124]	; (978c <_tc_timer_init+0x1dc>)
    970e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    9714:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9716:	6923      	ldr	r3, [r4, #16]
    9718:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    971c:	d1fb      	bne.n	9716 <_tc_timer_init+0x166>
    971e:	e7a9      	b.n	9674 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    9720:	2a04      	cmp	r2, #4
    9722:	d1a7      	bne.n	9674 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    9724:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9728:	4a18      	ldr	r2, [pc, #96]	; (978c <_tc_timer_init+0x1dc>)
    972a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    972e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    9732:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9734:	6923      	ldr	r3, [r4, #16]
    9736:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    973a:	d1fb      	bne.n	9734 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    973c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9740:	4a12      	ldr	r2, [pc, #72]	; (978c <_tc_timer_init+0x1dc>)
    9742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    974a:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    974c:	6923      	ldr	r3, [r4, #16]
    974e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    9752:	d1fb      	bne.n	974c <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    9754:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9758:	4a0c      	ldr	r2, [pc, #48]	; (978c <_tc_timer_init+0x1dc>)
    975a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    975e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    9762:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9764:	6923      	ldr	r3, [r4, #16]
    9766:	f013 0f20 	tst.w	r3, #32
    976a:	d1fb      	bne.n	9764 <_tc_timer_init+0x1b4>
    976c:	e782      	b.n	9674 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    976e:	4b0c      	ldr	r3, [pc, #48]	; (97a0 <_tc_timer_init+0x1f0>)
    9770:	601e      	str	r6, [r3, #0]
    9772:	e78a      	b.n	968a <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    9774:	4b0a      	ldr	r3, [pc, #40]	; (97a0 <_tc_timer_init+0x1f0>)
    9776:	605e      	str	r6, [r3, #4]
    9778:	e78c      	b.n	9694 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    977a:	4b09      	ldr	r3, [pc, #36]	; (97a0 <_tc_timer_init+0x1f0>)
    977c:	609e      	str	r6, [r3, #8]
    977e:	e789      	b.n	9694 <_tc_timer_init+0xe4>
    9780:	00009535 	.word	0x00009535
    9784:	0000ef38 	.word	0x0000ef38
    9788:	000070c1 	.word	0x000070c1
    978c:	0000eec8 	.word	0x0000eec8
    9790:	40003800 	.word	0x40003800
    9794:	40003c00 	.word	0x40003c00
    9798:	4101a000 	.word	0x4101a000
    979c:	4101c000 	.word	0x4101c000
    97a0:	20000a20 	.word	0x20000a20
    97a4:	e000e100 	.word	0xe000e100

000097a8 <_tc_timer_deinit>:
{
    97a8:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    97aa:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    97ac:	4620      	mov	r0, r4
    97ae:	4b18      	ldr	r3, [pc, #96]	; (9810 <_tc_timer_deinit+0x68>)
    97b0:	4798      	blx	r3
    97b2:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    97b4:	22cd      	movs	r2, #205	; 0xcd
    97b6:	4917      	ldr	r1, [pc, #92]	; (9814 <_tc_timer_deinit+0x6c>)
    97b8:	2001      	movs	r0, #1
    97ba:	4b17      	ldr	r3, [pc, #92]	; (9818 <_tc_timer_deinit+0x70>)
    97bc:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    97be:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    97c2:	4b16      	ldr	r3, [pc, #88]	; (981c <_tc_timer_deinit+0x74>)
    97c4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    97c8:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    97cc:	2b00      	cmp	r3, #0
    97ce:	db0d      	blt.n	97ec <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    97d0:	095a      	lsrs	r2, r3, #5
    97d2:	f003 031f 	and.w	r3, r3, #31
    97d6:	2101      	movs	r1, #1
    97d8:	fa01 f303 	lsl.w	r3, r1, r3
    97dc:	3220      	adds	r2, #32
    97de:	4910      	ldr	r1, [pc, #64]	; (9820 <_tc_timer_deinit+0x78>)
    97e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    97e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    97e8:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    97ec:	6823      	ldr	r3, [r4, #0]
    97ee:	f023 0302 	bic.w	r3, r3, #2
    97f2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    97f4:	6923      	ldr	r3, [r4, #16]
    97f6:	f013 0f03 	tst.w	r3, #3
    97fa:	d1fb      	bne.n	97f4 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    97fc:	6823      	ldr	r3, [r4, #0]
    97fe:	f043 0301 	orr.w	r3, r3, #1
    9802:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9804:	6923      	ldr	r3, [r4, #16]
    9806:	f013 0f01 	tst.w	r3, #1
    980a:	d1fb      	bne.n	9804 <_tc_timer_deinit+0x5c>
}
    980c:	bd38      	pop	{r3, r4, r5, pc}
    980e:	bf00      	nop
    9810:	00009535 	.word	0x00009535
    9814:	0000ef38 	.word	0x0000ef38
    9818:	000070c1 	.word	0x000070c1
    981c:	0000eec8 	.word	0x0000eec8
    9820:	e000e100 	.word	0xe000e100

00009824 <_tc_timer_set_irq>:
{
    9824:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    9826:	68c0      	ldr	r0, [r0, #12]
    9828:	4b09      	ldr	r3, [pc, #36]	; (9850 <_tc_timer_set_irq+0x2c>)
    982a:	4798      	blx	r3
    982c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    982e:	f44f 7291 	mov.w	r2, #290	; 0x122
    9832:	4908      	ldr	r1, [pc, #32]	; (9854 <_tc_timer_set_irq+0x30>)
    9834:	2001      	movs	r0, #1
    9836:	4b08      	ldr	r3, [pc, #32]	; (9858 <_tc_timer_set_irq+0x34>)
    9838:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    983a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    983e:	4b07      	ldr	r3, [pc, #28]	; (985c <_tc_timer_set_irq+0x38>)
    9840:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    9844:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    9848:	4b05      	ldr	r3, [pc, #20]	; (9860 <_tc_timer_set_irq+0x3c>)
    984a:	4798      	blx	r3
    984c:	bd10      	pop	{r4, pc}
    984e:	bf00      	nop
    9850:	00009535 	.word	0x00009535
    9854:	0000ef38 	.word	0x0000ef38
    9858:	000070c1 	.word	0x000070c1
    985c:	0000eec8 	.word	0x0000eec8
    9860:	00007655 	.word	0x00007655

00009864 <_tc_get_timer>:
}
    9864:	4800      	ldr	r0, [pc, #0]	; (9868 <_tc_get_timer+0x4>)
    9866:	4770      	bx	lr
    9868:	20000368 	.word	0x20000368

0000986c <TC0_Handler>:
{
    986c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    986e:	4b02      	ldr	r3, [pc, #8]	; (9878 <TC0_Handler+0xc>)
    9870:	6818      	ldr	r0, [r3, #0]
    9872:	4b02      	ldr	r3, [pc, #8]	; (987c <TC0_Handler+0x10>)
    9874:	4798      	blx	r3
    9876:	bd08      	pop	{r3, pc}
    9878:	20000a20 	.word	0x20000a20
    987c:	0000951d 	.word	0x0000951d

00009880 <TC1_Handler>:
{
    9880:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    9882:	4b02      	ldr	r3, [pc, #8]	; (988c <TC1_Handler+0xc>)
    9884:	6858      	ldr	r0, [r3, #4]
    9886:	4b02      	ldr	r3, [pc, #8]	; (9890 <TC1_Handler+0x10>)
    9888:	4798      	blx	r3
    988a:	bd08      	pop	{r3, pc}
    988c:	20000a20 	.word	0x20000a20
    9890:	0000951d 	.word	0x0000951d

00009894 <TC2_Handler>:
{
    9894:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    9896:	4b02      	ldr	r3, [pc, #8]	; (98a0 <TC2_Handler+0xc>)
    9898:	6898      	ldr	r0, [r3, #8]
    989a:	4b02      	ldr	r3, [pc, #8]	; (98a4 <TC2_Handler+0x10>)
    989c:	4798      	blx	r3
    989e:	bd08      	pop	{r3, pc}
    98a0:	20000a20 	.word	0x20000a20
    98a4:	0000951d 	.word	0x0000951d

000098a8 <TC3_Handler>:
{
    98a8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    98aa:	4b02      	ldr	r3, [pc, #8]	; (98b4 <TC3_Handler+0xc>)
    98ac:	68d8      	ldr	r0, [r3, #12]
    98ae:	4b02      	ldr	r3, [pc, #8]	; (98b8 <TC3_Handler+0x10>)
    98b0:	4798      	blx	r3
    98b2:	bd08      	pop	{r3, pc}
    98b4:	20000a20 	.word	0x20000a20
    98b8:	0000951d 	.word	0x0000951d

000098bc <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    98bc:	2000      	movs	r0, #0
    98be:	4770      	bx	lr

000098c0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    98c0:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    98c2:	7c83      	ldrb	r3, [r0, #18]
    98c4:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    98c8:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    98ca:	f002 0107 	and.w	r1, r2, #7
    98ce:	2901      	cmp	r1, #1
    98d0:	d00b      	beq.n	98ea <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    98d2:	015a      	lsls	r2, r3, #5
    98d4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    98d8:	2110      	movs	r1, #16
    98da:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    98de:	015b      	lsls	r3, r3, #5
    98e0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    98e4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    98e8:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    98ea:	f012 0f40 	tst.w	r2, #64	; 0x40
    98ee:	d00c      	beq.n	990a <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    98f0:	7cc2      	ldrb	r2, [r0, #19]
    98f2:	f36f 1286 	bfc	r2, #6, #1
    98f6:	74c2      	strb	r2, [r0, #19]
    98f8:	015a      	lsls	r2, r3, #5
    98fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    98fe:	2180      	movs	r1, #128	; 0x80
    9900:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9904:	2140      	movs	r1, #64	; 0x40
    9906:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    990a:	7cc2      	ldrb	r2, [r0, #19]
    990c:	f36f 02c3 	bfc	r2, #3, #1
    9910:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    9912:	490a      	ldr	r1, [pc, #40]	; (993c <_usb_d_dev_handle_setup+0x7c>)
    9914:	015a      	lsls	r2, r3, #5
    9916:	188c      	adds	r4, r1, r2
    9918:	2500      	movs	r5, #0
    991a:	72a5      	strb	r5, [r4, #10]
    991c:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    991e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    9922:	246f      	movs	r4, #111	; 0x6f
    9924:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9928:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    992c:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9930:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    9934:	7c80      	ldrb	r0, [r0, #18]
    9936:	4798      	blx	r3
    9938:	bd38      	pop	{r3, r4, r5, pc}
    993a:	bf00      	nop
    993c:	20000a30 	.word	0x20000a30

00009940 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9940:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9942:	2320      	movs	r3, #32
    9944:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9948:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    994a:	7c83      	ldrb	r3, [r0, #18]
    994c:	f003 030f 	and.w	r3, r3, #15
    9950:	015b      	lsls	r3, r3, #5
    9952:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9956:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    995a:	4b04      	ldr	r3, [pc, #16]	; (996c <_usb_d_dev_handle_stall+0x2c>)
    995c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    9960:	6882      	ldr	r2, [r0, #8]
    9962:	2101      	movs	r1, #1
    9964:	7c80      	ldrb	r0, [r0, #18]
    9966:	4798      	blx	r3
    9968:	bd08      	pop	{r3, pc}
    996a:	bf00      	nop
    996c:	20000a30 	.word	0x20000a30

00009970 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9970:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9972:	7c84      	ldrb	r4, [r0, #18]
    9974:	2cff      	cmp	r4, #255	; 0xff
    9976:	d003      	beq.n	9980 <_usb_d_dev_trans_done+0x10>
    9978:	7cc3      	ldrb	r3, [r0, #19]
    997a:	f013 0f40 	tst.w	r3, #64	; 0x40
    997e:	d100      	bne.n	9982 <_usb_d_dev_trans_done+0x12>
    9980:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    9982:	7cc2      	ldrb	r2, [r0, #19]
    9984:	f36f 1286 	bfc	r2, #6, #1
    9988:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    998a:	4a03      	ldr	r2, [pc, #12]	; (9998 <_usb_d_dev_trans_done+0x28>)
    998c:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    9990:	6882      	ldr	r2, [r0, #8]
    9992:	4620      	mov	r0, r4
    9994:	47a8      	blx	r5
    9996:	e7f3      	b.n	9980 <_usb_d_dev_trans_done+0x10>
    9998:	20000a30 	.word	0x20000a30

0000999c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    999c:	b530      	push	{r4, r5, lr}
    999e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    99a0:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    99a2:	2425      	movs	r4, #37	; 0x25
    99a4:	f88d 4004 	strb.w	r4, [sp, #4]
    99a8:	244a      	movs	r4, #74	; 0x4a
    99aa:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    99ae:	2bff      	cmp	r3, #255	; 0xff
    99b0:	d01e      	beq.n	99f0 <_usb_d_dev_trans_stop+0x54>
    99b2:	7cc4      	ldrb	r4, [r0, #19]
    99b4:	f014 0f40 	tst.w	r4, #64	; 0x40
    99b8:	d01a      	beq.n	99f0 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    99ba:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    99be:	b1c9      	cbz	r1, 99f4 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    99c0:	0163      	lsls	r3, r4, #5
    99c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    99c6:	2580      	movs	r5, #128	; 0x80
    99c8:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    99cc:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    99ce:	a902      	add	r1, sp, #8
    99d0:	440b      	add	r3, r1
    99d2:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    99d6:	0163      	lsls	r3, r4, #5
    99d8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    99dc:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    99e0:	0163      	lsls	r3, r4, #5
    99e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    99e6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    99ea:	4611      	mov	r1, r2
    99ec:	4b05      	ldr	r3, [pc, #20]	; (9a04 <_usb_d_dev_trans_stop+0x68>)
    99ee:	4798      	blx	r3
}
    99f0:	b003      	add	sp, #12
    99f2:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    99f4:	0163      	lsls	r3, r4, #5
    99f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    99fa:	2540      	movs	r5, #64	; 0x40
    99fc:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    9a00:	e7e4      	b.n	99cc <_usb_d_dev_trans_stop+0x30>
    9a02:	bf00      	nop
    9a04:	00009971 	.word	0x00009971

00009a08 <_usb_d_dev_handle_trfail>:
{
    9a08:	b530      	push	{r4, r5, lr}
    9a0a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9a0c:	7c83      	ldrb	r3, [r0, #18]
    9a0e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9a12:	2204      	movs	r2, #4
    9a14:	f88d 2004 	strb.w	r2, [sp, #4]
    9a18:	2208      	movs	r2, #8
    9a1a:	f88d 2005 	strb.w	r2, [sp, #5]
    9a1e:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    9a20:	460c      	mov	r4, r1
    9a22:	b391      	cbz	r1, 9a8a <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9a24:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    9a28:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    9a2c:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    9a30:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    9a34:	4a32      	ldr	r2, [pc, #200]	; (9b00 <_usb_d_dev_handle_trfail+0xf8>)
    9a36:	440a      	add	r2, r1
    9a38:	7a91      	ldrb	r1, [r2, #10]
    9a3a:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9a3c:	2d02      	cmp	r5, #2
    9a3e:	d02c      	beq.n	9a9a <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    9a40:	f011 0f02 	tst.w	r1, #2
    9a44:	d045      	beq.n	9ad2 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9a46:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9a48:	7a91      	ldrb	r1, [r2, #10]
    9a4a:	f36f 0141 	bfc	r1, #1, #1
    9a4e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9a50:	aa02      	add	r2, sp, #8
    9a52:	4422      	add	r2, r4
    9a54:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9a58:	015a      	lsls	r2, r3, #5
    9a5a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9a5e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9a62:	015b      	lsls	r3, r3, #5
    9a64:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9a68:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9a6c:	f005 0307 	and.w	r3, r5, #7
    9a70:	2b01      	cmp	r3, #1
    9a72:	d143      	bne.n	9afc <_usb_d_dev_handle_trfail+0xf4>
    9a74:	7cc3      	ldrb	r3, [r0, #19]
    9a76:	f013 0f40 	tst.w	r3, #64	; 0x40
    9a7a:	d03f      	beq.n	9afc <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9a7c:	09d9      	lsrs	r1, r3, #7
    9a7e:	428c      	cmp	r4, r1
    9a80:	d03c      	beq.n	9afc <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9a82:	2200      	movs	r2, #0
    9a84:	4b1f      	ldr	r3, [pc, #124]	; (9b04 <_usb_d_dev_handle_trfail+0xfc>)
    9a86:	4798      	blx	r3
    9a88:	e038      	b.n	9afc <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9a8a:	0159      	lsls	r1, r3, #5
    9a8c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    9a90:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    9a94:	f005 0507 	and.w	r5, r5, #7
    9a98:	e7ca      	b.n	9a30 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9a9a:	f011 0f01 	tst.w	r1, #1
    9a9e:	d0cf      	beq.n	9a40 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9aa0:	7a91      	ldrb	r1, [r2, #10]
    9aa2:	f36f 0100 	bfc	r1, #0, #1
    9aa6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9aa8:	aa02      	add	r2, sp, #8
    9aaa:	4422      	add	r2, r4
    9aac:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9ab0:	015a      	lsls	r2, r3, #5
    9ab2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9ab6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9aba:	015b      	lsls	r3, r3, #5
    9abc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9ac0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9ac4:	2204      	movs	r2, #4
    9ac6:	1c21      	adds	r1, r4, #0
    9ac8:	bf18      	it	ne
    9aca:	2101      	movne	r1, #1
    9acc:	4b0d      	ldr	r3, [pc, #52]	; (9b04 <_usb_d_dev_handle_trfail+0xfc>)
    9ace:	4798      	blx	r3
    9ad0:	e014      	b.n	9afc <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    9ad2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    9ad6:	4a0a      	ldr	r2, [pc, #40]	; (9b00 <_usb_d_dev_handle_trfail+0xf8>)
    9ad8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    9adc:	2100      	movs	r1, #0
    9ade:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9ae0:	aa02      	add	r2, sp, #8
    9ae2:	4414      	add	r4, r2
    9ae4:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9ae8:	015a      	lsls	r2, r3, #5
    9aea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9aee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9af2:	015b      	lsls	r3, r3, #5
    9af4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9af8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    9afc:	b003      	add	sp, #12
    9afe:	bd30      	pop	{r4, r5, pc}
    9b00:	20000a30 	.word	0x20000a30
    9b04:	0000999d 	.word	0x0000999d

00009b08 <_usb_d_dev_reset_epts>:
{
    9b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b0c:	4d0c      	ldr	r5, [pc, #48]	; (9b40 <_usb_d_dev_reset_epts+0x38>)
    9b0e:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    9b12:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9b16:	f04f 0803 	mov.w	r8, #3
    9b1a:	4f0a      	ldr	r7, [pc, #40]	; (9b44 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    9b1c:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9b1e:	4641      	mov	r1, r8
    9b20:	4620      	mov	r0, r4
    9b22:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    9b24:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    9b26:	2300      	movs	r3, #0
    9b28:	74e3      	strb	r3, [r4, #19]
    9b2a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    9b2c:	42ac      	cmp	r4, r5
    9b2e:	d1f6      	bne.n	9b1e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9b30:	22c0      	movs	r2, #192	; 0xc0
    9b32:	4619      	mov	r1, r3
    9b34:	4802      	ldr	r0, [pc, #8]	; (9b40 <_usb_d_dev_reset_epts+0x38>)
    9b36:	4b04      	ldr	r3, [pc, #16]	; (9b48 <_usb_d_dev_reset_epts+0x40>)
    9b38:	4798      	blx	r3
    9b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b3e:	bf00      	nop
    9b40:	20000a30 	.word	0x20000a30
    9b44:	00009971 	.word	0x00009971
    9b48:	0000d0e7 	.word	0x0000d0e7

00009b4c <_usb_d_dev_in_next>:
{
    9b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b50:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9b52:	7c84      	ldrb	r4, [r0, #18]
    9b54:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9b58:	4688      	mov	r8, r1
    9b5a:	2900      	cmp	r1, #0
    9b5c:	f000 80a0 	beq.w	9ca0 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9b60:	4b58      	ldr	r3, [pc, #352]	; (9cc4 <_usb_d_dev_in_next+0x178>)
    9b62:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9b66:	6958      	ldr	r0, [r3, #20]
    9b68:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9b6c:	8a2b      	ldrh	r3, [r5, #16]
    9b6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9b72:	4293      	cmp	r3, r2
    9b74:	f000 808e 	beq.w	9c94 <_usb_d_dev_in_next+0x148>
    9b78:	3b01      	subs	r3, #1
    9b7a:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9b7c:	7cef      	ldrb	r7, [r5, #19]
    9b7e:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    9b82:	f1b8 0f00 	cmp.w	r8, #0
    9b86:	d005      	beq.n	9b94 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9b88:	0162      	lsls	r2, r4, #5
    9b8a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9b8e:	2302      	movs	r3, #2
    9b90:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    9b94:	68a9      	ldr	r1, [r5, #8]
    9b96:	eb0e 0301 	add.w	r3, lr, r1
    9b9a:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    9b9c:	686e      	ldr	r6, [r5, #4]
    9b9e:	42b3      	cmp	r3, r6
    9ba0:	d23f      	bcs.n	9c22 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    9ba2:	1af6      	subs	r6, r6, r3
    9ba4:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    9ba6:	7cea      	ldrb	r2, [r5, #19]
    9ba8:	f012 0f20 	tst.w	r2, #32
    9bac:	d02d      	beq.n	9c0a <_usb_d_dev_in_next+0xbe>
    9bae:	8a2a      	ldrh	r2, [r5, #16]
    9bb0:	4296      	cmp	r6, r2
    9bb2:	bf28      	it	cs
    9bb4:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9bb6:	6829      	ldr	r1, [r5, #0]
    9bb8:	4632      	mov	r2, r6
    9bba:	4419      	add	r1, r3
    9bbc:	68e8      	ldr	r0, [r5, #12]
    9bbe:	4b42      	ldr	r3, [pc, #264]	; (9cc8 <_usb_d_dev_in_next+0x17c>)
    9bc0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9bc2:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    9bc4:	4b3f      	ldr	r3, [pc, #252]	; (9cc4 <_usb_d_dev_in_next+0x178>)
    9bc6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    9bca:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9bcc:	4b3d      	ldr	r3, [pc, #244]	; (9cc4 <_usb_d_dev_in_next+0x178>)
    9bce:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    9bd2:	695a      	ldr	r2, [r3, #20]
    9bd4:	f366 020d 	bfi	r2, r6, #0, #14
    9bd8:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9bda:	695a      	ldr	r2, [r3, #20]
    9bdc:	f36f 329b 	bfc	r2, #14, #14
    9be0:	615a      	str	r2, [r3, #20]
	if (!isr) {
    9be2:	f1b8 0f00 	cmp.w	r8, #0
    9be6:	d108      	bne.n	9bfa <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    9be8:	2f01      	cmp	r7, #1
    9bea:	bf0c      	ite	eq
    9bec:	224e      	moveq	r2, #78	; 0x4e
    9bee:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9bf0:	0163      	lsls	r3, r4, #5
    9bf2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9bf6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9bfa:	0164      	lsls	r4, r4, #5
    9bfc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    9c00:	2380      	movs	r3, #128	; 0x80
    9c02:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    9c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c0a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    9c0e:	bf28      	it	cs
    9c10:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9c14:	6829      	ldr	r1, [r5, #0]
    9c16:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    9c18:	4a2a      	ldr	r2, [pc, #168]	; (9cc4 <_usb_d_dev_in_next+0x178>)
    9c1a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    9c1e:	6113      	str	r3, [r2, #16]
    9c20:	e7d4      	b.n	9bcc <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    9c22:	7ceb      	ldrb	r3, [r5, #19]
    9c24:	f013 0f10 	tst.w	r3, #16
    9c28:	d00f      	beq.n	9c4a <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    9c2a:	7ceb      	ldrb	r3, [r5, #19]
    9c2c:	f36f 1304 	bfc	r3, #4, #1
    9c30:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9c32:	4b24      	ldr	r3, [pc, #144]	; (9cc4 <_usb_d_dev_in_next+0x178>)
    9c34:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    9c38:	695a      	ldr	r2, [r3, #20]
    9c3a:	f36f 020d 	bfc	r2, #0, #14
    9c3e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9c40:	695a      	ldr	r2, [r3, #20]
    9c42:	f36f 329b 	bfc	r2, #14, #14
    9c46:	615a      	str	r2, [r3, #20]
    9c48:	e7cb      	b.n	9be2 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    9c4a:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9c4c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    9c50:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    9c54:	bf0c      	ite	eq
    9c56:	234b      	moveq	r3, #75	; 0x4b
    9c58:	234a      	movne	r3, #74	; 0x4a
    9c5a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    9c5e:	8a2a      	ldrh	r2, [r5, #16]
    9c60:	ea00 030e 	and.w	r3, r0, lr
    9c64:	429a      	cmp	r2, r3
    9c66:	d005      	beq.n	9c74 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9c68:	2100      	movs	r1, #0
    9c6a:	4628      	mov	r0, r5
    9c6c:	4b17      	ldr	r3, [pc, #92]	; (9ccc <_usb_d_dev_in_next+0x180>)
    9c6e:	4798      	blx	r3
	return;
    9c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    9c74:	7ceb      	ldrb	r3, [r5, #19]
    9c76:	f36f 1386 	bfc	r3, #6, #1
    9c7a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9c7c:	4b11      	ldr	r3, [pc, #68]	; (9cc4 <_usb_d_dev_in_next+0x178>)
    9c7e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    9c82:	68a9      	ldr	r1, [r5, #8]
    9c84:	7ca8      	ldrb	r0, [r5, #18]
    9c86:	4798      	blx	r3
    9c88:	b9d0      	cbnz	r0, 9cc0 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    9c8a:	7ceb      	ldrb	r3, [r5, #19]
    9c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9c90:	74eb      	strb	r3, [r5, #19]
    9c92:	e7e9      	b.n	9c68 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9c94:	7cef      	ldrb	r7, [r5, #19]
    9c96:	f007 0707 	and.w	r7, r7, #7
    9c9a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    9c9e:	e773      	b.n	9b88 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9ca0:	8a03      	ldrh	r3, [r0, #16]
    9ca2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9ca6:	4293      	cmp	r3, r2
    9ca8:	d107      	bne.n	9cba <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9caa:	7cef      	ldrb	r7, [r5, #19]
    9cac:	f007 0707 	and.w	r7, r7, #7
    9cb0:	f04f 0e00 	mov.w	lr, #0
    9cb4:	f240 30ff 	movw	r0, #1023	; 0x3ff
    9cb8:	e76c      	b.n	9b94 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9cba:	f04f 0e00 	mov.w	lr, #0
    9cbe:	e75b      	b.n	9b78 <_usb_d_dev_in_next+0x2c>
    9cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9cc4:	20000a30 	.word	0x20000a30
    9cc8:	0000d0d1 	.word	0x0000d0d1
    9ccc:	00009971 	.word	0x00009971

00009cd0 <_usb_d_dev_out_next>:
{
    9cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cd4:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9cd6:	7c85      	ldrb	r5, [r0, #18]
    9cd8:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9cdc:	4689      	mov	r9, r1
    9cde:	2900      	cmp	r1, #0
    9ce0:	d056      	beq.n	9d90 <_usb_d_dev_out_next+0xc0>
    9ce2:	4b74      	ldr	r3, [pc, #464]	; (9eb4 <_usb_d_dev_out_next+0x1e4>)
    9ce4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    9ce8:	685a      	ldr	r2, [r3, #4]
    9cea:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9cee:	685f      	ldr	r7, [r3, #4]
    9cf0:	f3c7 070d 	ubfx	r7, r7, #0, #14
    9cf4:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9cf6:	8a06      	ldrh	r6, [r0, #16]
    9cf8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9cfc:	429e      	cmp	r6, r3
    9cfe:	f000 80ba 	beq.w	9e76 <_usb_d_dev_out_next+0x1a6>
    9d02:	3e01      	subs	r6, #1
    9d04:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    9d06:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9d0a:	f894 8013 	ldrb.w	r8, [r4, #19]
    9d0e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    9d12:	f1b9 0f00 	cmp.w	r9, #0
    9d16:	d005      	beq.n	9d24 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9d18:	016b      	lsls	r3, r5, #5
    9d1a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9d1e:	2201      	movs	r2, #1
    9d20:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9d24:	7ce3      	ldrb	r3, [r4, #19]
    9d26:	f013 0f20 	tst.w	r3, #32
    9d2a:	d00d      	beq.n	9d48 <_usb_d_dev_out_next+0x78>
    9d2c:	6862      	ldr	r2, [r4, #4]
    9d2e:	2a00      	cmp	r2, #0
    9d30:	d037      	beq.n	9da2 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9d32:	68a0      	ldr	r0, [r4, #8]
    9d34:	1a12      	subs	r2, r2, r0
    9d36:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9d38:	6823      	ldr	r3, [r4, #0]
    9d3a:	42ba      	cmp	r2, r7
    9d3c:	bf28      	it	cs
    9d3e:	463a      	movcs	r2, r7
    9d40:	68e1      	ldr	r1, [r4, #12]
    9d42:	4418      	add	r0, r3
    9d44:	4b5c      	ldr	r3, [pc, #368]	; (9eb8 <_usb_d_dev_out_next+0x1e8>)
    9d46:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9d48:	6863      	ldr	r3, [r4, #4]
    9d4a:	b353      	cbz	r3, 9da2 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    9d4c:	f1b9 0f00 	cmp.w	r9, #0
    9d50:	d040      	beq.n	9dd4 <_usb_d_dev_out_next+0x104>
    9d52:	8a22      	ldrh	r2, [r4, #16]
    9d54:	42ba      	cmp	r2, r7
    9d56:	d93d      	bls.n	9dd4 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    9d58:	7ce3      	ldrb	r3, [r4, #19]
    9d5a:	f36f 1304 	bfc	r3, #4, #1
    9d5e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    9d60:	68a3      	ldr	r3, [r4, #8]
    9d62:	445b      	add	r3, fp
    9d64:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    9d66:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9d6a:	ea4f 1345 	mov.w	r3, r5, lsl #5
    9d6e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9d72:	bf0c      	ite	eq
    9d74:	222d      	moveq	r2, #45	; 0x2d
    9d76:	2225      	movne	r2, #37	; 0x25
    9d78:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    9d7c:	b915      	cbnz	r5, 9d84 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9d7e:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    9d80:	4b4c      	ldr	r3, [pc, #304]	; (9eb4 <_usb_d_dev_out_next+0x1e4>)
    9d82:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9d84:	2100      	movs	r1, #0
    9d86:	4620      	mov	r0, r4
    9d88:	4b4c      	ldr	r3, [pc, #304]	; (9ebc <_usb_d_dev_out_next+0x1ec>)
    9d8a:	4798      	blx	r3
	return;
    9d8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9d90:	8a06      	ldrh	r6, [r0, #16]
    9d92:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9d96:	429e      	cmp	r6, r3
    9d98:	d07b      	beq.n	9e92 <_usb_d_dev_out_next+0x1c2>
    9d9a:	f04f 0b00 	mov.w	fp, #0
    9d9e:	46da      	mov	sl, fp
    9da0:	e7af      	b.n	9d02 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9da2:	7ce3      	ldrb	r3, [r4, #19]
    9da4:	f013 0f10 	tst.w	r3, #16
    9da8:	d06c      	beq.n	9e84 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    9daa:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    9dac:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    9db0:	f043 0320 	orr.w	r3, r3, #32
    9db4:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9db6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    9db8:	493e      	ldr	r1, [pc, #248]	; (9eb4 <_usb_d_dev_out_next+0x1e4>)
    9dba:	016a      	lsls	r2, r5, #5
    9dbc:	188b      	adds	r3, r1, r2
    9dbe:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9dc0:	8a21      	ldrh	r1, [r4, #16]
    9dc2:	685a      	ldr	r2, [r3, #4]
    9dc4:	f361 329b 	bfi	r2, r1, #14, #14
    9dc8:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9dca:	685a      	ldr	r2, [r3, #4]
    9dcc:	f36f 020d 	bfc	r2, #0, #14
    9dd0:	605a      	str	r2, [r3, #4]
    9dd2:	e01d      	b.n	9e10 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    9dd4:	68a2      	ldr	r2, [r4, #8]
    9dd6:	4452      	add	r2, sl
    9dd8:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    9dda:	4293      	cmp	r3, r2
    9ddc:	d9c3      	bls.n	9d66 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    9dde:	1a9b      	subs	r3, r3, r2
    9de0:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    9de2:	7ce1      	ldrb	r1, [r4, #19]
    9de4:	f011 0f20 	tst.w	r1, #32
    9de8:	d026      	beq.n	9e38 <_usb_d_dev_out_next+0x168>
    9dea:	8a22      	ldrh	r2, [r4, #16]
    9dec:	4293      	cmp	r3, r2
    9dee:	bf28      	it	cs
    9df0:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9df2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    9df4:	016a      	lsls	r2, r5, #5
    9df6:	492f      	ldr	r1, [pc, #188]	; (9eb4 <_usb_d_dev_out_next+0x1e4>)
    9df8:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9dfa:	4a2e      	ldr	r2, [pc, #184]	; (9eb4 <_usb_d_dev_out_next+0x1e4>)
    9dfc:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    9e00:	6851      	ldr	r1, [r2, #4]
    9e02:	f363 319b 	bfi	r1, r3, #14, #14
    9e06:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9e08:	6853      	ldr	r3, [r2, #4]
    9e0a:	f36f 030d 	bfc	r3, #0, #14
    9e0e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    9e10:	f1b9 0f00 	cmp.w	r9, #0
    9e14:	d108      	bne.n	9e28 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    9e16:	f1b8 0f01 	cmp.w	r8, #1
    9e1a:	d025      	beq.n	9e68 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    9e1c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9e1e:	016b      	lsls	r3, r5, #5
    9e20:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9e24:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9e28:	016d      	lsls	r5, r5, #5
    9e2a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    9e2e:	2340      	movs	r3, #64	; 0x40
    9e30:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    9e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    9e38:	8a21      	ldrh	r1, [r4, #16]
    9e3a:	428b      	cmp	r3, r1
    9e3c:	d90a      	bls.n	9e54 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9e42:	d80e      	bhi.n	9e62 <_usb_d_dev_out_next+0x192>
    9e44:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9e48:	6821      	ldr	r1, [r4, #0]
    9e4a:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    9e4c:	0169      	lsls	r1, r5, #5
    9e4e:	4819      	ldr	r0, [pc, #100]	; (9eb4 <_usb_d_dev_out_next+0x1e4>)
    9e50:	5042      	str	r2, [r0, r1]
    9e52:	e7d2      	b.n	9dfa <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    9e54:	428b      	cmp	r3, r1
    9e56:	d2f7      	bcs.n	9e48 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    9e58:	7ce1      	ldrb	r1, [r4, #19]
    9e5a:	f041 0120 	orr.w	r1, r1, #32
    9e5e:	74e1      	strb	r1, [r4, #19]
    9e60:	e7f2      	b.n	9e48 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    9e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9e66:	e7ef      	b.n	9e48 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    9e68:	4b12      	ldr	r3, [pc, #72]	; (9eb4 <_usb_d_dev_out_next+0x1e4>)
    9e6a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    9e6e:	2200      	movs	r2, #0
    9e70:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9e72:	222d      	movs	r2, #45	; 0x2d
    9e74:	e7d3      	b.n	9e1e <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    9e76:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9e7a:	f890 8013 	ldrb.w	r8, [r0, #19]
    9e7e:	f008 0807 	and.w	r8, r8, #7
    9e82:	e749      	b.n	9d18 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    9e84:	f1b9 0f00 	cmp.w	r9, #0
    9e88:	d10b      	bne.n	9ea2 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    9e8a:	68a3      	ldr	r3, [r4, #8]
    9e8c:	4453      	add	r3, sl
    9e8e:	60a3      	str	r3, [r4, #8]
    9e90:	e769      	b.n	9d66 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9e92:	f890 8013 	ldrb.w	r8, [r0, #19]
    9e96:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    9e9a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9e9c:	46bb      	mov	fp, r7
    9e9e:	46ba      	mov	sl, r7
    9ea0:	e740      	b.n	9d24 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    9ea2:	8a23      	ldrh	r3, [r4, #16]
    9ea4:	42bb      	cmp	r3, r7
    9ea6:	f63f af57 	bhi.w	9d58 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    9eaa:	68a3      	ldr	r3, [r4, #8]
    9eac:	4453      	add	r3, sl
    9eae:	60a3      	str	r3, [r4, #8]
    9eb0:	e759      	b.n	9d66 <_usb_d_dev_out_next+0x96>
    9eb2:	bf00      	nop
    9eb4:	20000a30 	.word	0x20000a30
    9eb8:	0000d0d1 	.word	0x0000d0d1
    9ebc:	00009971 	.word	0x00009971

00009ec0 <_usb_d_dev_handler>:
{
    9ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9ec4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9ec8:	8c1e      	ldrh	r6, [r3, #32]
    9eca:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    9ecc:	b146      	cbz	r6, 9ee0 <_usb_d_dev_handler+0x20>
    9ece:	4d96      	ldr	r5, [pc, #600]	; (a128 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    9ed0:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9ed2:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    9ed6:	f8df 926c 	ldr.w	r9, [pc, #620]	; a144 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    9eda:	f8df 826c 	ldr.w	r8, [pc, #620]	; a148 <_usb_d_dev_handler+0x288>
    9ede:	e0de      	b.n	a09e <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    9ee0:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    9ee2:	8b1b      	ldrh	r3, [r3, #24]
    9ee4:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9ee6:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9ee8:	f013 0f04 	tst.w	r3, #4
    9eec:	d11e      	bne.n	9f2c <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9eee:	f413 7f00 	tst.w	r3, #512	; 0x200
    9ef2:	d125      	bne.n	9f40 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9ef4:	f013 0f80 	tst.w	r3, #128	; 0x80
    9ef8:	d14f      	bne.n	9f9a <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9efa:	f013 0f70 	tst.w	r3, #112	; 0x70
    9efe:	d158      	bne.n	9fb2 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9f00:	f013 0f08 	tst.w	r3, #8
    9f04:	d178      	bne.n	9ff8 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9f06:	f013 0f01 	tst.w	r3, #1
    9f0a:	d0e0      	beq.n	9ece <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9f0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f10:	f240 2201 	movw	r2, #513	; 0x201
    9f14:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9f16:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9f18:	2270      	movs	r2, #112	; 0x70
    9f1a:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9f1c:	4b83      	ldr	r3, [pc, #524]	; (a12c <_usb_d_dev_handler+0x26c>)
    9f1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    9f22:	2100      	movs	r1, #0
    9f24:	2004      	movs	r0, #4
    9f26:	4798      	blx	r3
    9f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9f2c:	2204      	movs	r2, #4
    9f2e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f32:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    9f34:	4b7d      	ldr	r3, [pc, #500]	; (a12c <_usb_d_dev_handler+0x26c>)
    9f36:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    9f3a:	4798      	blx	r3
    9f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9f40:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f44:	f240 2201 	movw	r2, #513	; 0x201
    9f48:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9f4a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9f4c:	2270      	movs	r2, #112	; 0x70
    9f4e:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9f50:	4b76      	ldr	r3, [pc, #472]	; (a12c <_usb_d_dev_handler+0x26c>)
    9f52:	891b      	ldrh	r3, [r3, #8]
    9f54:	f003 030f 	and.w	r3, r3, #15
    9f58:	2b03      	cmp	r3, #3
    9f5a:	d014      	beq.n	9f86 <_usb_d_dev_handler+0xc6>
    9f5c:	2301      	movs	r3, #1
    9f5e:	4873      	ldr	r0, [pc, #460]	; (a12c <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9f60:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9f62:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    9f66:	8912      	ldrh	r2, [r2, #8]
    9f68:	f002 020f 	and.w	r2, r2, #15
    9f6c:	2a03      	cmp	r2, #3
    9f6e:	d00b      	beq.n	9f88 <_usb_d_dev_handler+0xc8>
    9f70:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9f72:	2b05      	cmp	r3, #5
    9f74:	d1f4      	bne.n	9f60 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    9f76:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9f78:	4b6c      	ldr	r3, [pc, #432]	; (a12c <_usb_d_dev_handler+0x26c>)
    9f7a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    9f7e:	2003      	movs	r0, #3
    9f80:	4798      	blx	r3
    9f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9f86:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9f88:	4b68      	ldr	r3, [pc, #416]	; (a12c <_usb_d_dev_handler+0x26c>)
    9f8a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    9f8e:	8919      	ldrh	r1, [r3, #8]
    9f90:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    9f94:	2200      	movs	r2, #0
    9f96:	811a      	strh	r2, [r3, #8]
    9f98:	e7ee      	b.n	9f78 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9f9a:	2280      	movs	r2, #128	; 0x80
    9f9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fa0:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9fa2:	4b62      	ldr	r3, [pc, #392]	; (a12c <_usb_d_dev_handler+0x26c>)
    9fa4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    9fa8:	2100      	movs	r1, #0
    9faa:	2005      	movs	r0, #5
    9fac:	4798      	blx	r3
    9fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9fb2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fb6:	2270      	movs	r2, #112	; 0x70
    9fb8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9fba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9fbc:	f240 2201 	movw	r2, #513	; 0x201
    9fc0:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    9fc2:	4b5b      	ldr	r3, [pc, #364]	; (a130 <_usb_d_dev_handler+0x270>)
    9fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    9fc8:	f013 0f01 	tst.w	r3, #1
    9fcc:	d00e      	beq.n	9fec <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9fce:	4a58      	ldr	r2, [pc, #352]	; (a130 <_usb_d_dev_handler+0x270>)
    9fd0:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    9fd2:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    9fd6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    9fda:	d1f9      	bne.n	9fd0 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9fdc:	4b53      	ldr	r3, [pc, #332]	; (a12c <_usb_d_dev_handler+0x26c>)
    9fde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    9fe2:	2100      	movs	r1, #0
    9fe4:	2002      	movs	r0, #2
    9fe6:	4798      	blx	r3
    9fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9fec:	4a50      	ldr	r2, [pc, #320]	; (a130 <_usb_d_dev_handler+0x270>)
    9fee:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9ff0:	f413 7f80 	tst.w	r3, #256	; 0x100
    9ff4:	d0fb      	beq.n	9fee <_usb_d_dev_handler+0x12e>
    9ff6:	e7f1      	b.n	9fdc <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9ff8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9ffc:	2400      	movs	r4, #0
    9ffe:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a002:	2208      	movs	r2, #8
    a004:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a006:	2270      	movs	r2, #112	; 0x70
    a008:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a00a:	f240 2201 	movw	r2, #513	; 0x201
    a00e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    a010:	4b48      	ldr	r3, [pc, #288]	; (a134 <_usb_d_dev_handler+0x274>)
    a012:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    a014:	4b45      	ldr	r3, [pc, #276]	; (a12c <_usb_d_dev_handler+0x26c>)
    a016:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    a01a:	4621      	mov	r1, r4
    a01c:	2001      	movs	r0, #1
    a01e:	4798      	blx	r3
    a020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a024:	f011 0f10 	tst.w	r1, #16
    a028:	d109      	bne.n	a03e <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a02a:	f011 0f40 	tst.w	r1, #64	; 0x40
    a02e:	d108      	bne.n	a042 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a030:	f011 0f20 	tst.w	r1, #32
    a034:	d02f      	beq.n	a096 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    a036:	2100      	movs	r1, #0
    a038:	4b3f      	ldr	r3, [pc, #252]	; (a138 <_usb_d_dev_handler+0x278>)
    a03a:	4798      	blx	r3
    a03c:	e02b      	b.n	a096 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    a03e:	47c8      	blx	r9
    a040:	e029      	b.n	a096 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    a042:	2101      	movs	r1, #1
    a044:	4b3c      	ldr	r3, [pc, #240]	; (a138 <_usb_d_dev_handler+0x278>)
    a046:	4798      	blx	r3
    a048:	e025      	b.n	a096 <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a04a:	f011 0f40 	tst.w	r1, #64	; 0x40
    a04e:	d111      	bne.n	a074 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a050:	f011 0f08 	tst.w	r1, #8
    a054:	d112      	bne.n	a07c <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a056:	f011 0f02 	tst.w	r1, #2
    a05a:	d112      	bne.n	a082 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a05c:	f003 0307 	and.w	r3, r3, #7
    a060:	2b01      	cmp	r3, #1
    a062:	d118      	bne.n	a096 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a064:	f011 0f04 	tst.w	r1, #4
    a068:	d10f      	bne.n	a08a <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a06a:	f011 0f10 	tst.w	r1, #16
    a06e:	d012      	beq.n	a096 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    a070:	47c8      	blx	r9
    a072:	e010      	b.n	a096 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    a074:	2101      	movs	r1, #1
    a076:	4b30      	ldr	r3, [pc, #192]	; (a138 <_usb_d_dev_handler+0x278>)
    a078:	4798      	blx	r3
    a07a:	e00c      	b.n	a096 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    a07c:	2101      	movs	r1, #1
    a07e:	47c0      	blx	r8
    a080:	e009      	b.n	a096 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    a082:	2101      	movs	r1, #1
    a084:	4b2d      	ldr	r3, [pc, #180]	; (a13c <_usb_d_dev_handler+0x27c>)
    a086:	4798      	blx	r3
    a088:	e005      	b.n	a096 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    a08a:	2100      	movs	r1, #0
    a08c:	47c0      	blx	r8
    a08e:	e002      	b.n	a096 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    a090:	2100      	movs	r1, #0
    a092:	4b29      	ldr	r3, [pc, #164]	; (a138 <_usb_d_dev_handler+0x278>)
    a094:	4798      	blx	r3
    a096:	3401      	adds	r4, #1
    a098:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    a09a:	2c1b      	cmp	r4, #27
    a09c:	d042      	beq.n	a124 <_usb_d_dev_handler+0x264>
    a09e:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    a0a0:	7cab      	ldrb	r3, [r5, #18]
    a0a2:	2bff      	cmp	r3, #255	; 0xff
    a0a4:	d0f7      	beq.n	a096 <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    a0a6:	f003 030f 	and.w	r3, r3, #15
    a0aa:	2101      	movs	r1, #1
    a0ac:	4099      	lsls	r1, r3
    a0ae:	4231      	tst	r1, r6
    a0b0:	d0f1      	beq.n	a096 <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a0b2:	0159      	lsls	r1, r3, #5
    a0b4:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    a0b8:	f501 7180 	add.w	r1, r1, #256	; 0x100
    a0bc:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a0be:	015b      	lsls	r3, r3, #5
    a0c0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a0c4:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    a0c8:	4019      	ands	r1, r3
    a0ca:	d0e4      	beq.n	a096 <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a0cc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    a0d0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    a0d4:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    a0d8:	f003 0247 	and.w	r2, r3, #71	; 0x47
    a0dc:	2a01      	cmp	r2, #1
    a0de:	d0a1      	beq.n	a024 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a0e0:	f013 0f80 	tst.w	r3, #128	; 0x80
    a0e4:	d1b1      	bne.n	a04a <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a0e6:	f011 0f20 	tst.w	r1, #32
    a0ea:	d1d1      	bne.n	a090 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a0ec:	f011 0f04 	tst.w	r1, #4
    a0f0:	d10e      	bne.n	a110 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a0f2:	f011 0f01 	tst.w	r1, #1
    a0f6:	d10e      	bne.n	a116 <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a0f8:	f003 0307 	and.w	r3, r3, #7
    a0fc:	2b01      	cmp	r3, #1
    a0fe:	d1ca      	bne.n	a096 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a100:	f011 0f08 	tst.w	r1, #8
    a104:	d10b      	bne.n	a11e <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a106:	f011 0f10 	tst.w	r1, #16
    a10a:	d0c4      	beq.n	a096 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    a10c:	47c8      	blx	r9
    a10e:	e7c2      	b.n	a096 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    a110:	2100      	movs	r1, #0
    a112:	47c0      	blx	r8
    a114:	e7bf      	b.n	a096 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    a116:	2101      	movs	r1, #1
    a118:	4b09      	ldr	r3, [pc, #36]	; (a140 <_usb_d_dev_handler+0x280>)
    a11a:	4798      	blx	r3
    a11c:	e7bb      	b.n	a096 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    a11e:	2101      	movs	r1, #1
    a120:	47c0      	blx	r8
    a122:	e7b8      	b.n	a096 <_usb_d_dev_handler+0x1d6>
    a124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a128:	20000b04 	.word	0x20000b04
    a12c:	20000a30 	.word	0x20000a30
    a130:	40001000 	.word	0x40001000
    a134:	00009b09 	.word	0x00009b09
    a138:	00009941 	.word	0x00009941
    a13c:	00009b4d 	.word	0x00009b4d
    a140:	00009cd1 	.word	0x00009cd1
    a144:	000098c1 	.word	0x000098c1
    a148:	00009a09 	.word	0x00009a09

0000a14c <_usb_d_dev_init>:
{
    a14c:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    a14e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a152:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a154:	f013 0f01 	tst.w	r3, #1
    a158:	d124      	bne.n	a1a4 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a15a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a15e:	7893      	ldrb	r3, [r2, #2]
    a160:	f013 0f03 	tst.w	r3, #3
    a164:	d1fb      	bne.n	a15e <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    a166:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a16a:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a16c:	f013 0f02 	tst.w	r3, #2
    a170:	d00f      	beq.n	a192 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    a172:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a176:	7813      	ldrb	r3, [r2, #0]
    a178:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a17c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a17e:	7893      	ldrb	r3, [r2, #2]
    a180:	f013 0f03 	tst.w	r3, #3
    a184:	d1fb      	bne.n	a17e <_usb_d_dev_init+0x32>
    a186:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a18a:	7893      	ldrb	r3, [r2, #2]
    a18c:	f013 0f02 	tst.w	r3, #2
    a190:	d1fb      	bne.n	a18a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a192:	2201      	movs	r2, #1
    a194:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a198:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a19a:	461a      	mov	r2, r3
    a19c:	7893      	ldrb	r3, [r2, #2]
    a19e:	f013 0f03 	tst.w	r3, #3
    a1a2:	d1fb      	bne.n	a19c <_usb_d_dev_init+0x50>
    a1a4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a1a8:	7893      	ldrb	r3, [r2, #2]
    a1aa:	f013 0f01 	tst.w	r3, #1
    a1ae:	d1fb      	bne.n	a1a8 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a1b0:	4b24      	ldr	r3, [pc, #144]	; (a244 <_usb_d_dev_init+0xf8>)
    a1b2:	4a25      	ldr	r2, [pc, #148]	; (a248 <_usb_d_dev_init+0xfc>)
    a1b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a1b8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a1bc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a1c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a1c4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    a1c8:	4b20      	ldr	r3, [pc, #128]	; (a24c <_usb_d_dev_init+0x100>)
    a1ca:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    a1cc:	4b20      	ldr	r3, [pc, #128]	; (a250 <_usb_d_dev_init+0x104>)
    a1ce:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    a1d0:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    a1d4:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    a1d8:	f011 011f 	ands.w	r1, r1, #31
    a1dc:	d02b      	beq.n	a236 <_usb_d_dev_init+0xea>
		pad_transn = 9;
    a1de:	291f      	cmp	r1, #31
    a1e0:	bf08      	it	eq
    a1e2:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    a1e4:	b34b      	cbz	r3, a23a <_usb_d_dev_init+0xee>
		pad_transp = 25;
    a1e6:	2b1f      	cmp	r3, #31
    a1e8:	bf08      	it	eq
    a1ea:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    a1ec:	b33a      	cbz	r2, a23e <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    a1ee:	2a07      	cmp	r2, #7
    a1f0:	bf08      	it	eq
    a1f2:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    a1f4:	f003 031f 	and.w	r3, r3, #31
    a1f8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    a1fc:	0312      	lsls	r2, r2, #12
    a1fe:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    a202:	4313      	orrs	r3, r2
    a204:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a208:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    a20a:	78d3      	ldrb	r3, [r2, #3]
    a20c:	f043 0303 	orr.w	r3, r3, #3
    a210:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    a212:	78d3      	ldrb	r3, [r2, #3]
    a214:	f043 030c 	orr.w	r3, r3, #12
    a218:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a21a:	2304      	movs	r3, #4
    a21c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a21e:	7893      	ldrb	r3, [r2, #2]
    a220:	f013 0f03 	tst.w	r3, #3
    a224:	d1fb      	bne.n	a21e <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    a226:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a22a:	4a06      	ldr	r2, [pc, #24]	; (a244 <_usb_d_dev_init+0xf8>)
    a22c:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    a22e:	2201      	movs	r2, #1
    a230:	811a      	strh	r2, [r3, #8]
}
    a232:	2000      	movs	r0, #0
    a234:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    a236:	2109      	movs	r1, #9
    a238:	e7d4      	b.n	a1e4 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    a23a:	2319      	movs	r3, #25
    a23c:	e7d6      	b.n	a1ec <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    a23e:	2206      	movs	r2, #6
    a240:	e7d8      	b.n	a1f4 <_usb_d_dev_init+0xa8>
    a242:	bf00      	nop
    a244:	20000a30 	.word	0x20000a30
    a248:	000098bd 	.word	0x000098bd
    a24c:	00009b09 	.word	0x00009b09
    a250:	00800084 	.word	0x00800084

0000a254 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    a254:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a258:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a25a:	f013 0f03 	tst.w	r3, #3
    a25e:	d129      	bne.n	a2b4 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a260:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a264:	7893      	ldrb	r3, [r2, #2]
    a266:	f013 0f03 	tst.w	r3, #3
    a26a:	d1fb      	bne.n	a264 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    a26c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a270:	781b      	ldrb	r3, [r3, #0]
    a272:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a274:	f013 0f02 	tst.w	r3, #2
    a278:	d108      	bne.n	a28c <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a27a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a27e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a282:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a284:	7893      	ldrb	r3, [r2, #2]
    a286:	f013 0f03 	tst.w	r3, #3
    a28a:	d1fb      	bne.n	a284 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a28c:	4b0b      	ldr	r3, [pc, #44]	; (a2bc <_usb_d_dev_enable+0x68>)
    a28e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a292:	609a      	str	r2, [r3, #8]
    a294:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a298:	609a      	str	r2, [r3, #8]
    a29a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    a29e:	609a      	str	r2, [r3, #8]
    a2a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    a2a4:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a2a6:	f240 228d 	movw	r2, #653	; 0x28d
    a2aa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a2ae:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    a2b0:	2000      	movs	r0, #0
    a2b2:	4770      	bx	lr
		return -USB_ERR_DENIED;
    a2b4:	f06f 0010 	mvn.w	r0, #16
}
    a2b8:	4770      	bx	lr
    a2ba:	bf00      	nop
    a2bc:	e000e100 	.word	0xe000e100

0000a2c0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    a2c0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    a2c4:	8913      	ldrh	r3, [r2, #8]
    a2c6:	f023 0301 	bic.w	r3, r3, #1
    a2ca:	041b      	lsls	r3, r3, #16
    a2cc:	0c1b      	lsrs	r3, r3, #16
    a2ce:	8113      	strh	r3, [r2, #8]
    a2d0:	4770      	bx	lr

0000a2d2 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a2d2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    a2d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a2da:	7298      	strb	r0, [r3, #10]
    a2dc:	4770      	bx	lr

0000a2de <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    a2de:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a2e2:	8a18      	ldrh	r0, [r3, #16]
}
    a2e4:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    a2e8:	4770      	bx	lr
	...

0000a2ec <_usb_d_dev_ep_init>:
{
    a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2ee:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a2f2:	f010 050f 	ands.w	r5, r0, #15
    a2f6:	d04d      	beq.n	a394 <_usb_d_dev_ep_init+0xa8>
    a2f8:	f1be 0f00 	cmp.w	lr, #0
    a2fc:	bfb4      	ite	lt
    a2fe:	1d6c      	addlt	r4, r5, #5
    a300:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a302:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a306:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    a308:	2d05      	cmp	r5, #5
    a30a:	d947      	bls.n	a39c <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    a30c:	f06f 0011 	mvn.w	r0, #17
    a310:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a312:	f1be 0f00 	cmp.w	lr, #0
    a316:	db1b      	blt.n	a350 <_usb_d_dev_ep_init+0x64>
    a318:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    a31c:	4e37      	ldr	r6, [pc, #220]	; (a3fc <_usb_d_dev_ep_init+0x110>)
    a31e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    a322:	2d00      	cmp	r5, #0
    a324:	d15e      	bne.n	a3e4 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a326:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a32a:	4d34      	ldr	r5, [pc, #208]	; (a3fc <_usb_d_dev_ep_init+0x110>)
    a32c:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    a330:	4d33      	ldr	r5, [pc, #204]	; (a400 <_usb_d_dev_ep_init+0x114>)
    a332:	00a6      	lsls	r6, r4, #2
    a334:	1933      	adds	r3, r6, r4
    a336:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    a33a:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    a33e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    a342:	3101      	adds	r1, #1
    a344:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    a348:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    a34c:	2000      	movs	r0, #0
    a34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a350:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    a354:	4e29      	ldr	r6, [pc, #164]	; (a3fc <_usb_d_dev_ep_init+0x110>)
    a356:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    a35a:	686d      	ldr	r5, [r5, #4]
    a35c:	b935      	cbnz	r5, a36c <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a35e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a362:	4d26      	ldr	r5, [pc, #152]	; (a3fc <_usb_d_dev_ep_init+0x110>)
    a364:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    a368:	685f      	ldr	r7, [r3, #4]
    a36a:	e7e1      	b.n	a330 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a36c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    a370:	4e22      	ldr	r6, [pc, #136]	; (a3fc <_usb_d_dev_ep_init+0x110>)
    a372:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    a376:	896d      	ldrh	r5, [r5, #10]
    a378:	4295      	cmp	r5, r2
    a37a:	daf0      	bge.n	a35e <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    a37c:	f06f 0012 	mvn.w	r0, #18
    a380:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    a382:	f06f 0013 	mvn.w	r0, #19
    a386:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    a388:	f06f 0013 	mvn.w	r0, #19
    a38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    a38e:	f06f 0012 	mvn.w	r0, #18
    a392:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a394:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    a398:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a39a:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    a39c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    a3a0:	4f17      	ldr	r7, [pc, #92]	; (a400 <_usb_d_dev_ep_init+0x114>)
    a3a2:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    a3a6:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    a3aa:	2eff      	cmp	r6, #255	; 0xff
    a3ac:	d1e9      	bne.n	a382 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a3ae:	2900      	cmp	r1, #0
    a3b0:	d1af      	bne.n	a312 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a3b2:	b125      	cbz	r5, a3be <_usb_d_dev_ep_init+0xd2>
    a3b4:	f1be 0f00 	cmp.w	lr, #0
    a3b8:	bfa4      	itt	ge
    a3ba:	3505      	addge	r5, #5
    a3bc:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    a3be:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    a3c2:	4e0f      	ldr	r6, [pc, #60]	; (a400 <_usb_d_dev_ep_init+0x114>)
    a3c4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    a3c8:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    a3cc:	2dff      	cmp	r5, #255	; 0xff
    a3ce:	d1db      	bne.n	a388 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    a3d0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    a3d4:	4e09      	ldr	r6, [pc, #36]	; (a3fc <_usb_d_dev_ep_init+0x110>)
    a3d6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    a3da:	2d00      	cmp	r5, #0
    a3dc:	d0d7      	beq.n	a38e <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a3de:	f1be 0f00 	cmp.w	lr, #0
    a3e2:	dbb5      	blt.n	a350 <_usb_d_dev_ep_init+0x64>
    a3e4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    a3e8:	4e04      	ldr	r6, [pc, #16]	; (a3fc <_usb_d_dev_ep_init+0x110>)
    a3ea:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    a3ee:	892d      	ldrh	r5, [r5, #8]
    a3f0:	4295      	cmp	r5, r2
    a3f2:	da98      	bge.n	a326 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    a3f4:	f06f 0012 	mvn.w	r0, #18
    a3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3fa:	bf00      	nop
    a3fc:	0000ef4c 	.word	0x0000ef4c
    a400:	20000a30 	.word	0x20000a30

0000a404 <_usb_d_dev_ep_deinit>:
{
    a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a406:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a408:	f010 060f 	ands.w	r6, r0, #15
    a40c:	d00e      	beq.n	a42c <_usb_d_dev_ep_deinit+0x28>
    a40e:	2f00      	cmp	r7, #0
    a410:	bfb4      	ite	lt
    a412:	1d73      	addlt	r3, r6, #5
    a414:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a416:	2e05      	cmp	r6, #5
    a418:	d900      	bls.n	a41c <_usb_d_dev_ep_deinit+0x18>
    a41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    a41c:	461d      	mov	r5, r3
    a41e:	3301      	adds	r3, #1
    a420:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a424:	4a24      	ldr	r2, [pc, #144]	; (a4b8 <_usb_d_dev_ep_deinit+0xb4>)
    a426:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    a42a:	e002      	b.n	a432 <_usb_d_dev_ep_deinit+0x2e>
    a42c:	f8df e094 	ldr.w	lr, [pc, #148]	; a4c4 <_usb_d_dev_ep_deinit+0xc0>
    a430:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a432:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    a436:	4a21      	ldr	r2, [pc, #132]	; (a4bc <_usb_d_dev_ep_deinit+0xb8>)
    a438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a43c:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    a440:	2aff      	cmp	r2, #255	; 0xff
    a442:	d0ea      	beq.n	a41a <_usb_d_dev_ep_deinit+0x16>
    a444:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a446:	2203      	movs	r2, #3
    a448:	0ff9      	lsrs	r1, r7, #31
    a44a:	4670      	mov	r0, lr
    a44c:	4b1c      	ldr	r3, [pc, #112]	; (a4c0 <_usb_d_dev_ep_deinit+0xbc>)
    a44e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a450:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    a454:	4a19      	ldr	r2, [pc, #100]	; (a4bc <_usb_d_dev_ep_deinit+0xb8>)
    a456:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a45a:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    a45e:	f003 0307 	and.w	r3, r3, #7
    a462:	2b01      	cmp	r3, #1
    a464:	d016      	beq.n	a494 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    a466:	2f00      	cmp	r7, #0
    a468:	db1b      	blt.n	a4a2 <_usb_d_dev_ep_deinit+0x9e>
    a46a:	0160      	lsls	r0, r4, #5
    a46c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a470:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    a474:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    a478:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    a47c:	4b0f      	ldr	r3, [pc, #60]	; (a4bc <_usb_d_dev_ep_deinit+0xb8>)
    a47e:	00aa      	lsls	r2, r5, #2
    a480:	1951      	adds	r1, r2, r5
    a482:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a486:	2000      	movs	r0, #0
    a488:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    a48c:	22ff      	movs	r2, #255	; 0xff
    a48e:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    a492:	e7c2      	b.n	a41a <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a494:	0160      	lsls	r0, r4, #5
    a496:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    a49a:	2300      	movs	r3, #0
    a49c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    a4a0:	e7ec      	b.n	a47c <_usb_d_dev_ep_deinit+0x78>
    a4a2:	0176      	lsls	r6, r6, #5
    a4a4:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a4a8:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    a4ac:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    a4b0:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    a4b4:	e7e2      	b.n	a47c <_usb_d_dev_ep_deinit+0x78>
    a4b6:	bf00      	nop
    a4b8:	20000af0 	.word	0x20000af0
    a4bc:	20000a30 	.word	0x20000a30
    a4c0:	0000999d 	.word	0x0000999d
    a4c4:	20000b04 	.word	0x20000b04

0000a4c8 <_usb_d_dev_ep_enable>:
{
    a4c8:	b4f0      	push	{r4, r5, r6, r7}
    a4ca:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a4cc:	f010 000f 	ands.w	r0, r0, #15
    a4d0:	f000 80a7 	beq.w	a622 <_usb_d_dev_ep_enable+0x15a>
    a4d4:	2e00      	cmp	r6, #0
    a4d6:	bfb4      	ite	lt
    a4d8:	1d43      	addlt	r3, r0, #5
    a4da:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a4dc:	4605      	mov	r5, r0
    a4de:	0142      	lsls	r2, r0, #5
    a4e0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    a4e4:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    a4e8:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a4ea:	2805      	cmp	r0, #5
    a4ec:	f240 80a0 	bls.w	a630 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    a4f0:	f06f 0011 	mvn.w	r0, #17
    a4f4:	e07d      	b.n	a5f2 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a4f6:	f014 0f77 	tst.w	r4, #119	; 0x77
    a4fa:	f040 8089 	bne.w	a610 <_usb_d_dev_ep_enable+0x148>
    a4fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a502:	2111      	movs	r1, #17
    a504:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a508:	4c9b      	ldr	r4, [pc, #620]	; (a778 <_usb_d_dev_ep_enable+0x2b0>)
    a50a:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    a50e:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    a512:	4c9a      	ldr	r4, [pc, #616]	; (a77c <_usb_d_dev_ep_enable+0x2b4>)
    a514:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a518:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    a51c:	f200 80cd 	bhi.w	a6ba <_usb_d_dev_ep_enable+0x1f2>
    a520:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a524:	f200 8112 	bhi.w	a74c <_usb_d_dev_ep_enable+0x284>
    a528:	2980      	cmp	r1, #128	; 0x80
    a52a:	f200 8101 	bhi.w	a730 <_usb_d_dev_ep_enable+0x268>
    a52e:	2940      	cmp	r1, #64	; 0x40
    a530:	f200 8113 	bhi.w	a75a <_usb_d_dev_ep_enable+0x292>
    a534:	2920      	cmp	r1, #32
    a536:	f200 8102 	bhi.w	a73e <_usb_d_dev_ep_enable+0x276>
    a53a:	2910      	cmp	r1, #16
    a53c:	f200 8114 	bhi.w	a768 <_usb_d_dev_ep_enable+0x2a0>
    a540:	2908      	cmp	r1, #8
    a542:	bf94      	ite	ls
    a544:	2600      	movls	r6, #0
    a546:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a548:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a54c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a54e:	f3c1 010d 	ubfx	r1, r1, #0, #14
    a552:	e0b8      	b.n	a6c6 <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a554:	f014 0f70 	tst.w	r4, #112	; 0x70
    a558:	d15d      	bne.n	a616 <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a55a:	4e87      	ldr	r6, [pc, #540]	; (a778 <_usb_d_dev_ep_enable+0x2b0>)
    a55c:	009f      	lsls	r7, r3, #2
    a55e:	18f9      	adds	r1, r7, r3
    a560:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    a564:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    a568:	0109      	lsls	r1, r1, #4
    a56a:	f001 0170 	and.w	r1, r1, #112	; 0x70
    a56e:	430c      	orrs	r4, r1
    a570:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    a574:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a578:	443b      	add	r3, r7
    a57a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    a57e:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    a582:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a58a:	d80f      	bhi.n	a5ac <_usb_d_dev_ep_enable+0xe4>
    a58c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a590:	d819      	bhi.n	a5c6 <_usb_d_dev_ep_enable+0xfe>
    a592:	2b80      	cmp	r3, #128	; 0x80
    a594:	d819      	bhi.n	a5ca <_usb_d_dev_ep_enable+0x102>
    a596:	2b40      	cmp	r3, #64	; 0x40
    a598:	d819      	bhi.n	a5ce <_usb_d_dev_ep_enable+0x106>
    a59a:	2b20      	cmp	r3, #32
    a59c:	d819      	bhi.n	a5d2 <_usb_d_dev_ep_enable+0x10a>
    a59e:	2b10      	cmp	r3, #16
    a5a0:	d819      	bhi.n	a5d6 <_usb_d_dev_ep_enable+0x10e>
    a5a2:	2b08      	cmp	r3, #8
    a5a4:	bf94      	ite	ls
    a5a6:	2300      	movls	r3, #0
    a5a8:	2301      	movhi	r3, #1
    a5aa:	e000      	b.n	a5ae <_usb_d_dev_ep_enable+0xe6>
    a5ac:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a5ae:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    a5b2:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a5b4:	2380      	movs	r3, #128	; 0x80
    a5b6:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    a5ba:	4b6f      	ldr	r3, [pc, #444]	; (a778 <_usb_d_dev_ep_enable+0x2b0>)
    a5bc:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    a5c0:	2000      	movs	r0, #0
    a5c2:	76a8      	strb	r0, [r5, #26]
    a5c4:	e015      	b.n	a5f2 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a5c6:	2306      	movs	r3, #6
    a5c8:	e7f1      	b.n	a5ae <_usb_d_dev_ep_enable+0xe6>
    a5ca:	2305      	movs	r3, #5
    a5cc:	e7ef      	b.n	a5ae <_usb_d_dev_ep_enable+0xe6>
    a5ce:	2304      	movs	r3, #4
    a5d0:	e7ed      	b.n	a5ae <_usb_d_dev_ep_enable+0xe6>
    a5d2:	2303      	movs	r3, #3
    a5d4:	e7eb      	b.n	a5ae <_usb_d_dev_ep_enable+0xe6>
    a5d6:	2302      	movs	r3, #2
    a5d8:	e7e9      	b.n	a5ae <_usb_d_dev_ep_enable+0xe6>
    a5da:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a5dc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a5e0:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a5e2:	2340      	movs	r3, #64	; 0x40
    a5e4:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    a5e8:	4b63      	ldr	r3, [pc, #396]	; (a778 <_usb_d_dev_ep_enable+0x2b0>)
    a5ea:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    a5ee:	2000      	movs	r0, #0
    a5f0:	72a8      	strb	r0, [r5, #10]
}
    a5f2:	bcf0      	pop	{r4, r5, r6, r7}
    a5f4:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a5f6:	2106      	movs	r1, #6
    a5f8:	e7f0      	b.n	a5dc <_usb_d_dev_ep_enable+0x114>
    a5fa:	2105      	movs	r1, #5
    a5fc:	e7ee      	b.n	a5dc <_usb_d_dev_ep_enable+0x114>
    a5fe:	2104      	movs	r1, #4
    a600:	e7ec      	b.n	a5dc <_usb_d_dev_ep_enable+0x114>
    a602:	2103      	movs	r1, #3
    a604:	e7ea      	b.n	a5dc <_usb_d_dev_ep_enable+0x114>
    a606:	2102      	movs	r1, #2
    a608:	e7e8      	b.n	a5dc <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    a60a:	f06f 0011 	mvn.w	r0, #17
    a60e:	e7f0      	b.n	a5f2 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    a610:	f06f 0013 	mvn.w	r0, #19
    a614:	e7ed      	b.n	a5f2 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    a616:	f06f 0013 	mvn.w	r0, #19
    a61a:	e7ea      	b.n	a5f2 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    a61c:	f06f 0013 	mvn.w	r0, #19
    a620:	e7e7      	b.n	a5f2 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a622:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a626:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    a62a:	b2e4      	uxtb	r4, r4
    a62c:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    a62e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a630:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    a634:	4950      	ldr	r1, [pc, #320]	; (a778 <_usb_d_dev_ep_enable+0x2b0>)
    a636:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    a63a:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    a63e:	2aff      	cmp	r2, #255	; 0xff
    a640:	d0e3      	beq.n	a60a <_usb_d_dev_ep_enable+0x142>
    a642:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a644:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a646:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    a64a:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    a64e:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    a652:	f001 0107 	and.w	r1, r1, #7
    a656:	2901      	cmp	r1, #1
    a658:	f43f af4d 	beq.w	a4f6 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    a65c:	2e00      	cmp	r6, #0
    a65e:	f6ff af79 	blt.w	a554 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a662:	f014 0f07 	tst.w	r4, #7
    a666:	d1d9      	bne.n	a61c <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a668:	4e43      	ldr	r6, [pc, #268]	; (a778 <_usb_d_dev_ep_enable+0x2b0>)
    a66a:	009f      	lsls	r7, r3, #2
    a66c:	18f9      	adds	r1, r7, r3
    a66e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    a672:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    a676:	f001 0107 	and.w	r1, r1, #7
    a67a:	430c      	orrs	r4, r1
    a67c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a680:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a684:	443b      	add	r3, r7
    a686:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    a68a:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    a68e:	4b3b      	ldr	r3, [pc, #236]	; (a77c <_usb_d_dev_ep_enable+0x2b4>)
    a690:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a694:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    a698:	d89f      	bhi.n	a5da <_usb_d_dev_ep_enable+0x112>
    a69a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a69e:	d8aa      	bhi.n	a5f6 <_usb_d_dev_ep_enable+0x12e>
    a6a0:	2980      	cmp	r1, #128	; 0x80
    a6a2:	d8aa      	bhi.n	a5fa <_usb_d_dev_ep_enable+0x132>
    a6a4:	2940      	cmp	r1, #64	; 0x40
    a6a6:	d8aa      	bhi.n	a5fe <_usb_d_dev_ep_enable+0x136>
    a6a8:	2920      	cmp	r1, #32
    a6aa:	d8aa      	bhi.n	a602 <_usb_d_dev_ep_enable+0x13a>
    a6ac:	2910      	cmp	r1, #16
    a6ae:	d8aa      	bhi.n	a606 <_usb_d_dev_ep_enable+0x13e>
    a6b0:	2908      	cmp	r1, #8
    a6b2:	bf94      	ite	ls
    a6b4:	2100      	movls	r1, #0
    a6b6:	2101      	movhi	r1, #1
    a6b8:	e790      	b.n	a5dc <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a6ba:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a6be:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a6c0:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a6c4:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a6c6:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    a6ca:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a6cc:	2640      	movs	r6, #64	; 0x40
    a6ce:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a6d2:	2180      	movs	r1, #128	; 0x80
    a6d4:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    a6d8:	4f27      	ldr	r7, [pc, #156]	; (a778 <_usb_d_dev_ep_enable+0x2b0>)
    a6da:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    a6de:	2000      	movs	r0, #0
    a6e0:	72a8      	strb	r0, [r5, #10]
    a6e2:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a6e4:	009c      	lsls	r4, r3, #2
    a6e6:	18e1      	adds	r1, r4, r3
    a6e8:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    a6ec:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    a6f0:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a6f4:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    a6f8:	0152      	lsls	r2, r2, #5
    a6fa:	18b9      	adds	r1, r7, r2
    a6fc:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a6fe:	4423      	add	r3, r4
    a700:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    a704:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    a708:	684b      	ldr	r3, [r1, #4]
    a70a:	f364 339b 	bfi	r3, r4, #14, #14
    a70e:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    a710:	684b      	ldr	r3, [r1, #4]
    a712:	f360 030d 	bfi	r3, r0, #0, #14
    a716:	604b      	str	r3, [r1, #4]
    a718:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    a71c:	21b0      	movs	r1, #176	; 0xb0
    a71e:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a722:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    a726:	461a      	mov	r2, r3
    a728:	2310      	movs	r3, #16
    a72a:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    a72e:	e760      	b.n	a5f2 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a730:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a734:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a736:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a73a:	2605      	movs	r6, #5
    a73c:	e7c3      	b.n	a6c6 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a73e:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a742:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a744:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a748:	2603      	movs	r6, #3
    a74a:	e7bc      	b.n	a6c6 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a74c:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a750:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a752:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a756:	2606      	movs	r6, #6
    a758:	e7b5      	b.n	a6c6 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a75a:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a75e:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a760:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a764:	2604      	movs	r6, #4
    a766:	e7ae      	b.n	a6c6 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a768:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a76c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a76e:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a772:	2602      	movs	r6, #2
    a774:	e7a7      	b.n	a6c6 <_usb_d_dev_ep_enable+0x1fe>
    a776:	bf00      	nop
    a778:	20000a30 	.word	0x20000a30
    a77c:	0fffc000 	.word	0x0fffc000

0000a780 <_usb_d_dev_ep_stall>:
{
    a780:	b470      	push	{r4, r5, r6}
    a782:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    a784:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a786:	f010 000f 	ands.w	r0, r0, #15
    a78a:	d008      	beq.n	a79e <_usb_d_dev_ep_stall+0x1e>
    a78c:	2b00      	cmp	r3, #0
    a78e:	bfb4      	ite	lt
    a790:	1d43      	addlt	r3, r0, #5
    a792:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    a794:	2805      	cmp	r0, #5
    a796:	d903      	bls.n	a7a0 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    a798:	f06f 0011 	mvn.w	r0, #17
    a79c:	e018      	b.n	a7d0 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    a79e:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    a7a0:	2901      	cmp	r1, #1
    a7a2:	d017      	beq.n	a7d4 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a7a4:	2900      	cmp	r1, #0
    a7a6:	d03a      	beq.n	a81e <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a7ac:	4a45      	ldr	r2, [pc, #276]	; (a8c4 <_usb_d_dev_ep_stall+0x144>)
    a7ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a7b2:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    a7b6:	f003 030f 	and.w	r3, r3, #15
    a7ba:	015b      	lsls	r3, r3, #5
    a7bc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a7c0:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a7c4:	2310      	movs	r3, #16
    a7c6:	40a3      	lsls	r3, r4
    a7c8:	421a      	tst	r2, r3
    a7ca:	bf14      	ite	ne
    a7cc:	2001      	movne	r0, #1
    a7ce:	2000      	moveq	r0, #0
}
    a7d0:	bc70      	pop	{r4, r5, r6}
    a7d2:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a7d4:	2510      	movs	r5, #16
    a7d6:	40a5      	lsls	r5, r4
    a7d8:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7da:	493a      	ldr	r1, [pc, #232]	; (a8c4 <_usb_d_dev_ep_stall+0x144>)
    a7dc:	009e      	lsls	r6, r3, #2
    a7de:	18f2      	adds	r2, r6, r3
    a7e0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    a7e4:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a7e8:	f002 020f 	and.w	r2, r2, #15
    a7ec:	0150      	lsls	r0, r2, #5
    a7ee:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    a7f2:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a7f6:	2020      	movs	r0, #32
    a7f8:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    a7fc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    a7fe:	0152      	lsls	r2, r2, #5
    a800:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    a804:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    a808:	4433      	add	r3, r6
    a80a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    a80e:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    a812:	f042 0208 	orr.w	r2, r2, #8
    a816:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a81a:	2000      	movs	r0, #0
    a81c:	e7d8      	b.n	a7d0 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a81e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    a822:	4928      	ldr	r1, [pc, #160]	; (a8c4 <_usb_d_dev_ep_stall+0x144>)
    a824:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    a828:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    a82c:	f002 020f 	and.w	r2, r2, #15
    a830:	0151      	lsls	r1, r2, #5
    a832:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    a836:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a83a:	2010      	movs	r0, #16
    a83c:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    a83e:	4205      	tst	r5, r0
    a840:	d03c      	beq.n	a8bc <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a842:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a844:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a848:	2020      	movs	r0, #32
    a84a:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    a84c:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    a84e:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a852:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a856:	4202      	tst	r2, r0
    a858:	d007      	beq.n	a86a <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a85a:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a85e:	2201      	movs	r2, #1
    a860:	fa02 f404 	lsl.w	r4, r2, r4
    a864:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a866:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a86a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    a86e:	4815      	ldr	r0, [pc, #84]	; (a8c4 <_usb_d_dev_ep_stall+0x144>)
    a870:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    a874:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    a878:	f002 0207 	and.w	r2, r2, #7
    a87c:	2a01      	cmp	r2, #1
    a87e:	d00c      	beq.n	a89a <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    a880:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a884:	4a0f      	ldr	r2, [pc, #60]	; (a8c4 <_usb_d_dev_ep_stall+0x144>)
    a886:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a88a:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    a88e:	f36f 02c3 	bfc	r2, #3, #1
    a892:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a896:	2000      	movs	r0, #0
    a898:	e79a      	b.n	a7d0 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    a89a:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a89e:	f012 0f30 	tst.w	r2, #48	; 0x30
    a8a2:	d10d      	bne.n	a8c0 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    a8a4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    a8a8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    a8ac:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    a8b0:	f36f 02c3 	bfc	r2, #3, #1
    a8b4:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a8b8:	2000      	movs	r0, #0
    a8ba:	e789      	b.n	a7d0 <_usb_d_dev_ep_stall+0x50>
    a8bc:	2000      	movs	r0, #0
    a8be:	e787      	b.n	a7d0 <_usb_d_dev_ep_stall+0x50>
    a8c0:	2000      	movs	r0, #0
    a8c2:	e785      	b.n	a7d0 <_usb_d_dev_ep_stall+0x50>
    a8c4:	20000a30 	.word	0x20000a30

0000a8c8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a8c8:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    a8ca:	f000 040f 	and.w	r4, r0, #15
    a8ce:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a8d0:	4a14      	ldr	r2, [pc, #80]	; (a924 <_usb_d_dev_ep_read_req+0x5c>)
    a8d2:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    a8d4:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a8d6:	6840      	ldr	r0, [r0, #4]
    a8d8:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a8dc:	2c05      	cmp	r4, #5
    a8de:	d817      	bhi.n	a910 <_usb_d_dev_ep_read_req+0x48>
    a8e0:	b1c9      	cbz	r1, a916 <_usb_d_dev_ep_read_req+0x4e>
    a8e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a8e6:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    a8ea:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a8ec:	2a11      	cmp	r2, #17
    a8ee:	d115      	bne.n	a91c <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a8f0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    a8f4:	f012 0f10 	tst.w	r2, #16
    a8f8:	d102      	bne.n	a900 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    a8fa:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    a8fc:	bc30      	pop	{r4, r5}
    a8fe:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    a900:	682c      	ldr	r4, [r5, #0]
    a902:	686a      	ldr	r2, [r5, #4]
    a904:	600c      	str	r4, [r1, #0]
    a906:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a908:	2210      	movs	r2, #16
    a90a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    a90e:	e7f5      	b.n	a8fc <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    a910:	f06f 0011 	mvn.w	r0, #17
    a914:	e7f2      	b.n	a8fc <_usb_d_dev_ep_read_req+0x34>
    a916:	f06f 0011 	mvn.w	r0, #17
    a91a:	e7ef      	b.n	a8fc <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    a91c:	f06f 0012 	mvn.w	r0, #18
    a920:	e7ec      	b.n	a8fc <_usb_d_dev_ep_read_req+0x34>
    a922:	bf00      	nop
    a924:	20000a30 	.word	0x20000a30

0000a928 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a92c:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a92e:	7a03      	ldrb	r3, [r0, #8]
    a930:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a932:	f013 030f 	ands.w	r3, r3, #15
    a936:	f000 80c2 	beq.w	aabe <_usb_d_dev_ep_trans+0x196>
    a93a:	2e00      	cmp	r6, #0
    a93c:	bfb4      	ite	lt
    a93e:	1d5a      	addlt	r2, r3, #5
    a940:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    a942:	4614      	mov	r4, r2
    a944:	4969      	ldr	r1, [pc, #420]	; (aaec <_usb_d_dev_ep_trans+0x1c4>)
    a946:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    a94a:	1c55      	adds	r5, r2, #1
    a94c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    a950:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a954:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a958:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    a95c:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    a960:	f240 31ff 	movw	r1, #1023	; 0x3ff
    a964:	428a      	cmp	r2, r1
    a966:	d025      	beq.n	a9b4 <_usb_d_dev_ep_trans+0x8c>
    a968:	1e55      	subs	r5, r2, #1
    a96a:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    a96c:	6841      	ldr	r1, [r0, #4]
    a96e:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a970:	2b05      	cmp	r3, #5
    a972:	f200 8092 	bhi.w	aa9a <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a976:	6803      	ldr	r3, [r0, #0]
    a978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a97c:	d31c      	bcc.n	a9b8 <_usb_d_dev_ep_trans+0x90>
    a97e:	eb03 0c01 	add.w	ip, r3, r1
    a982:	f8df e180 	ldr.w	lr, [pc, #384]	; ab04 <_usb_d_dev_ep_trans+0x1dc>
    a986:	45f4      	cmp	ip, lr
    a988:	d816      	bhi.n	a9b8 <_usb_d_dev_ep_trans+0x90>
    a98a:	f013 0f03 	tst.w	r3, #3
    a98e:	d113      	bne.n	a9b8 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    a990:	2e00      	cmp	r6, #0
    a992:	db2a      	blt.n	a9ea <_usb_d_dev_ep_trans+0xc2>
    a994:	428a      	cmp	r2, r1
    a996:	f200 809c 	bhi.w	aad2 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    a99a:	b34d      	cbz	r5, a9f0 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    a99c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a9a0:	4a52      	ldr	r2, [pc, #328]	; (aaec <_usb_d_dev_ep_trans+0x1c4>)
    a9a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a9a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    a9aa:	2b00      	cmp	r3, #0
    a9ac:	d07b      	beq.n	aaa6 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    a9ae:	f04f 0800 	mov.w	r8, #0
    a9b2:	e00c      	b.n	a9ce <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a9b4:	4615      	mov	r5, r2
    a9b6:	e7d9      	b.n	a96c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    a9b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a9bc:	4a4b      	ldr	r2, [pc, #300]	; (aaec <_usb_d_dev_ep_trans+0x1c4>)
    a9be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a9c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    a9c6:	2b00      	cmp	r3, #0
    a9c8:	d06a      	beq.n	aaa0 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    a9ca:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a9ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a9d2:	4a46      	ldr	r2, [pc, #280]	; (aaec <_usb_d_dev_ep_trans+0x1c4>)
    a9d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a9d8:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    a9dc:	f013 0f08 	tst.w	r3, #8
    a9e0:	d009      	beq.n	a9f6 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    a9e2:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    a9e4:	b003      	add	sp, #12
    a9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    a9ea:	f04f 0800 	mov.w	r8, #0
    a9ee:	e7ee      	b.n	a9ce <_usb_d_dev_ep_trans+0xa6>
    a9f0:	f04f 0800 	mov.w	r8, #0
    a9f4:	e7eb      	b.n	a9ce <_usb_d_dev_ep_trans+0xa6>
    a9f6:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    a9f8:	a801      	add	r0, sp, #4
    a9fa:	4b3d      	ldr	r3, [pc, #244]	; (aaf0 <_usb_d_dev_ep_trans+0x1c8>)
    a9fc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a9fe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    aa02:	4a3a      	ldr	r2, [pc, #232]	; (aaec <_usb_d_dev_ep_trans+0x1c4>)
    aa04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    aa08:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    aa0c:	f013 0f40 	tst.w	r3, #64	; 0x40
    aa10:	d13c      	bne.n	aa8c <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    aa12:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    aa16:	4b35      	ldr	r3, [pc, #212]	; (aaec <_usb_d_dev_ep_trans+0x1c4>)
    aa18:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    aa1c:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    aa20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa24:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    aa28:	a801      	add	r0, sp, #4
    aa2a:	4b32      	ldr	r3, [pc, #200]	; (aaf4 <_usb_d_dev_ep_trans+0x1cc>)
    aa2c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    aa2e:	f8da 3000 	ldr.w	r3, [sl]
    aa32:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    aa36:	f8da 3004 	ldr.w	r3, [sl, #4]
    aa3a:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    aa3e:	2300      	movs	r3, #0
    aa40:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    aa44:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    aa46:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    aa4a:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    aa4e:	f368 1345 	bfi	r3, r8, #5, #1
    aa52:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    aa56:	f89a 3009 	ldrb.w	r3, [sl, #9]
    aa5a:	b1e3      	cbz	r3, aa96 <_usb_d_dev_ep_trans+0x16e>
    aa5c:	fab5 f585 	clz	r5, r5
    aa60:	096d      	lsrs	r5, r5, #5
    aa62:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    aa66:	4b21      	ldr	r3, [pc, #132]	; (aaec <_usb_d_dev_ep_trans+0x1c4>)
    aa68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    aa6c:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    aa70:	f365 1304 	bfi	r3, r5, #4, #1
    aa74:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    aa78:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    aa7a:	f04f 0100 	mov.w	r1, #0
    aa7e:	4638      	mov	r0, r7
    aa80:	bfb4      	ite	lt
    aa82:	4b1d      	ldrlt	r3, [pc, #116]	; (aaf8 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    aa84:	4b1d      	ldrge	r3, [pc, #116]	; (aafc <_usb_d_dev_ep_trans+0x1d4>)
    aa86:	4798      	blx	r3
	return ERR_NONE;
    aa88:	2000      	movs	r0, #0
    aa8a:	e7ab      	b.n	a9e4 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    aa8c:	a801      	add	r0, sp, #4
    aa8e:	4b19      	ldr	r3, [pc, #100]	; (aaf4 <_usb_d_dev_ep_trans+0x1cc>)
    aa90:	4798      	blx	r3
		return USB_BUSY;
    aa92:	2001      	movs	r0, #1
    aa94:	e7a6      	b.n	a9e4 <_usb_d_dev_ep_trans+0xbc>
    aa96:	2500      	movs	r5, #0
    aa98:	e7e3      	b.n	aa62 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    aa9a:	f06f 0011 	mvn.w	r0, #17
    aa9e:	e7a1      	b.n	a9e4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    aaa0:	f06f 0012 	mvn.w	r0, #18
    aaa4:	e79e      	b.n	a9e4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    aaa6:	f06f 0011 	mvn.w	r0, #17
    aaaa:	e79b      	b.n	a9e4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    aaac:	f06f 0012 	mvn.w	r0, #18
    aab0:	e798      	b.n	a9e4 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    aab2:	6841      	ldr	r1, [r0, #4]
    aab4:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    aab8:	4f11      	ldr	r7, [pc, #68]	; (ab00 <_usb_d_dev_ep_trans+0x1d8>)
    aaba:	2400      	movs	r4, #0
    aabc:	e75b      	b.n	a976 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    aabe:	4a0b      	ldr	r2, [pc, #44]	; (aaec <_usb_d_dev_ep_trans+0x1c4>)
    aac0:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    aac4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    aac8:	428a      	cmp	r2, r1
    aaca:	d0f2      	beq.n	aab2 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    aacc:	4f0c      	ldr	r7, [pc, #48]	; (ab00 <_usb_d_dev_ep_trans+0x1d8>)
    aace:	2400      	movs	r4, #0
    aad0:	e74a      	b.n	a968 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    aad2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    aad6:	4a05      	ldr	r2, [pc, #20]	; (aaec <_usb_d_dev_ep_trans+0x1c4>)
    aad8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    aadc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    aae0:	2b00      	cmp	r3, #0
    aae2:	d0e3      	beq.n	aaac <_usb_d_dev_ep_trans+0x184>
    aae4:	f04f 0801 	mov.w	r8, #1
    aae8:	e771      	b.n	a9ce <_usb_d_dev_ep_trans+0xa6>
    aaea:	bf00      	nop
    aaec:	20000a30 	.word	0x20000a30
    aaf0:	00005c01 	.word	0x00005c01
    aaf4:	00005c0f 	.word	0x00005c0f
    aaf8:	00009b4d 	.word	0x00009b4d
    aafc:	00009cd1 	.word	0x00009cd1
    ab00:	20000b04 	.word	0x20000b04
    ab04:	20041fff 	.word	0x20041fff

0000ab08 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ab08:	4b07      	ldr	r3, [pc, #28]	; (ab28 <_usb_d_dev_register_callback+0x20>)
    ab0a:	2900      	cmp	r1, #0
    ab0c:	bf08      	it	eq
    ab0e:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    ab10:	2801      	cmp	r0, #1
    ab12:	d004      	beq.n	ab1e <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    ab14:	b910      	cbnz	r0, ab1c <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    ab16:	4b05      	ldr	r3, [pc, #20]	; (ab2c <_usb_d_dev_register_callback+0x24>)
    ab18:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    ab1c:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    ab1e:	4b03      	ldr	r3, [pc, #12]	; (ab2c <_usb_d_dev_register_callback+0x24>)
    ab20:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    ab24:	4770      	bx	lr
    ab26:	bf00      	nop
    ab28:	000098bd 	.word	0x000098bd
    ab2c:	20000a30 	.word	0x20000a30

0000ab30 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ab30:	4b0a      	ldr	r3, [pc, #40]	; (ab5c <_usb_d_dev_register_ep_callback+0x2c>)
    ab32:	2900      	cmp	r1, #0
    ab34:	bf08      	it	eq
    ab36:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    ab38:	4603      	mov	r3, r0
    ab3a:	b138      	cbz	r0, ab4c <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    ab3c:	2801      	cmp	r0, #1
    ab3e:	d009      	beq.n	ab54 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    ab40:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    ab42:	bf04      	itt	eq
    ab44:	4b06      	ldreq	r3, [pc, #24]	; (ab60 <_usb_d_dev_register_ep_callback+0x30>)
    ab46:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    ab4a:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    ab4c:	4b04      	ldr	r3, [pc, #16]	; (ab60 <_usb_d_dev_register_ep_callback+0x30>)
    ab4e:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    ab52:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    ab54:	4b02      	ldr	r3, [pc, #8]	; (ab60 <_usb_d_dev_register_ep_callback+0x30>)
    ab56:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    ab5a:	4770      	bx	lr
    ab5c:	000098bd 	.word	0x000098bd
    ab60:	20000a30 	.word	0x20000a30

0000ab64 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ab64:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    ab66:	4b01      	ldr	r3, [pc, #4]	; (ab6c <USB_0_Handler+0x8>)
    ab68:	4798      	blx	r3
    ab6a:	bd08      	pop	{r3, pc}
    ab6c:	00009ec1 	.word	0x00009ec1

0000ab70 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ab70:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    ab72:	4b01      	ldr	r3, [pc, #4]	; (ab78 <USB_1_Handler+0x8>)
    ab74:	4798      	blx	r3
    ab76:	bd08      	pop	{r3, pc}
    ab78:	00009ec1 	.word	0x00009ec1

0000ab7c <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ab7c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    ab7e:	4b01      	ldr	r3, [pc, #4]	; (ab84 <USB_2_Handler+0x8>)
    ab80:	4798      	blx	r3
    ab82:	bd08      	pop	{r3, pc}
    ab84:	00009ec1 	.word	0x00009ec1

0000ab88 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ab88:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    ab8a:	4b01      	ldr	r3, [pc, #4]	; (ab90 <USB_3_Handler+0x8>)
    ab8c:	4798      	blx	r3
    ab8e:	bd08      	pop	{r3, pc}
    ab90:	00009ec1 	.word	0x00009ec1

0000ab94 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ab94:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ab96:	4604      	mov	r4, r0
    ab98:	b340      	cbz	r0, abec <_wdt_init+0x58>
    ab9a:	6800      	ldr	r0, [r0, #0]
    ab9c:	3000      	adds	r0, #0
    ab9e:	bf18      	it	ne
    aba0:	2001      	movne	r0, #1
    aba2:	2250      	movs	r2, #80	; 0x50
    aba4:	4915      	ldr	r1, [pc, #84]	; (abfc <_wdt_init+0x68>)
    aba6:	4b16      	ldr	r3, [pc, #88]	; (ac00 <_wdt_init+0x6c>)
    aba8:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    abaa:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    abac:	689a      	ldr	r2, [r3, #8]
    abae:	f012 0f0e 	tst.w	r2, #14
    abb2:	d1fb      	bne.n	abac <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    abb4:	781a      	ldrb	r2, [r3, #0]
    abb6:	09d2      	lsrs	r2, r2, #7
    abb8:	d11a      	bne.n	abf0 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    abba:	689a      	ldr	r2, [r3, #8]
    abbc:	f012 0f0e 	tst.w	r2, #14
    abc0:	d1fb      	bne.n	abba <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    abc2:	781a      	ldrb	r2, [r3, #0]
    abc4:	f012 0f02 	tst.w	r2, #2
    abc8:	d115      	bne.n	abf6 <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    abca:	781a      	ldrb	r2, [r3, #0]
    abcc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    abd0:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    abd2:	689a      	ldr	r2, [r3, #8]
    abd4:	f012 0f0e 	tst.w	r2, #14
    abd8:	d1fb      	bne.n	abd2 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    abda:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    abdc:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    abde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    abe2:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    abe6:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    abe8:	2000      	movs	r0, #0
    abea:	bd10      	pop	{r4, pc}
    abec:	2000      	movs	r0, #0
    abee:	e7d8      	b.n	aba2 <_wdt_init+0xe>
		return ERR_DENIED;
    abf0:	f06f 0010 	mvn.w	r0, #16
    abf4:	bd10      	pop	{r4, pc}
    abf6:	f06f 0010 	mvn.w	r0, #16
}
    abfa:	bd10      	pop	{r4, pc}
    abfc:	0000ef94 	.word	0x0000ef94
    ac00:	000070c1 	.word	0x000070c1

0000ac04 <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    ac04:	2201      	movs	r2, #1
    ac06:	4b01      	ldr	r3, [pc, #4]	; (ac0c <RTC_Scheduler_report_cb+0x8>)
    ac08:	701a      	strb	r2, [r3, #0]
    ac0a:	4770      	bx	lr
    ac0c:	20000df0 	.word	0x20000df0

0000ac10 <RTC_Scheduler_ping_cb>:
{
    ac10:	b508      	push	{r3, lr}
	pingflag++;
    ac12:	4a11      	ldr	r2, [pc, #68]	; (ac58 <RTC_Scheduler_ping_cb+0x48>)
    ac14:	7853      	ldrb	r3, [r2, #1]
    ac16:	3301      	adds	r3, #1
    ac18:	b2db      	uxtb	r3, r3
    ac1a:	7053      	strb	r3, [r2, #1]
	switch (pingflag%4)
    ac1c:	7853      	ldrb	r3, [r2, #1]
    ac1e:	f003 0303 	and.w	r3, r3, #3
    ac22:	2b03      	cmp	r3, #3
    ac24:	d816      	bhi.n	ac54 <RTC_Scheduler_ping_cb+0x44>
    ac26:	e8df f003 	tbb	[pc, r3]
    ac2a:	0702      	.short	0x0702
    ac2c:	110c      	.short	0x110c
			grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_PING_NORTH);
    ac2e:	2100      	movs	r1, #0
    ac30:	480a      	ldr	r0, [pc, #40]	; (ac5c <RTC_Scheduler_ping_cb+0x4c>)
    ac32:	4b0b      	ldr	r3, [pc, #44]	; (ac60 <RTC_Scheduler_ping_cb+0x50>)
    ac34:	4798      	blx	r3
			break;
    ac36:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_PING_EAST);
    ac38:	2101      	movs	r1, #1
    ac3a:	4808      	ldr	r0, [pc, #32]	; (ac5c <RTC_Scheduler_ping_cb+0x4c>)
    ac3c:	4b08      	ldr	r3, [pc, #32]	; (ac60 <RTC_Scheduler_ping_cb+0x50>)
    ac3e:	4798      	blx	r3
			break;
    ac40:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_PING_SOUTH);
    ac42:	2102      	movs	r1, #2
    ac44:	4805      	ldr	r0, [pc, #20]	; (ac5c <RTC_Scheduler_ping_cb+0x4c>)
    ac46:	4b06      	ldr	r3, [pc, #24]	; (ac60 <RTC_Scheduler_ping_cb+0x50>)
    ac48:	4798      	blx	r3
			break;
    ac4a:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_PING_WEST);
    ac4c:	2103      	movs	r1, #3
    ac4e:	4803      	ldr	r0, [pc, #12]	; (ac5c <RTC_Scheduler_ping_cb+0x4c>)
    ac50:	4b03      	ldr	r3, [pc, #12]	; (ac60 <RTC_Scheduler_ping_cb+0x50>)
    ac52:	4798      	blx	r3
    ac54:	bd08      	pop	{r3, pc}
    ac56:	bf00      	nop
    ac58:	20000df0 	.word	0x20000df0
    ac5c:	200078c4 	.word	0x200078c4
    ac60:	0000520f 	.word	0x0000520f

0000ac64 <RTC_Scheduler_realtime_cb>:
{
    ac64:	b530      	push	{r4, r5, lr}
    ac66:	b085      	sub	sp, #20
	grid_sys_rtc_tick_time(&grid_sys_state);	
    ac68:	481a      	ldr	r0, [pc, #104]	; (acd4 <RTC_Scheduler_realtime_cb+0x70>)
    ac6a:	4b1b      	ldr	r3, [pc, #108]	; (acd8 <RTC_Scheduler_realtime_cb+0x74>)
    ac6c:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    ac6e:	481b      	ldr	r0, [pc, #108]	; (acdc <RTC_Scheduler_realtime_cb+0x78>)
    ac70:	4b1b      	ldr	r3, [pc, #108]	; (ace0 <RTC_Scheduler_realtime_cb+0x7c>)
    ac72:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    ac74:	a803      	add	r0, sp, #12
    ac76:	4b1b      	ldr	r3, [pc, #108]	; (ace4 <RTC_Scheduler_realtime_cb+0x80>)
    ac78:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ac7a:	4b1b      	ldr	r3, [pc, #108]	; (ace8 <RTC_Scheduler_realtime_cb+0x84>)
    ac7c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    ac80:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    ac84:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    ac88:	4054      	eors	r4, r2
    ac8a:	400c      	ands	r4, r1
    ac8c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    ac8e:	a803      	add	r0, sp, #12
    ac90:	4b16      	ldr	r3, [pc, #88]	; (acec <RTC_Scheduler_realtime_cb+0x88>)
    ac92:	4798      	blx	r3
	if (mapmode_value != mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0]){
    ac94:	4b16      	ldr	r3, [pc, #88]	; (acf0 <RTC_Scheduler_realtime_cb+0x8c>)
    ac96:	685b      	ldr	r3, [r3, #4]
    ac98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ac9a:	781a      	ldrb	r2, [r3, #0]
    ac9c:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    aca0:	4294      	cmp	r4, r2
    aca2:	d002      	beq.n	acaa <RTC_Scheduler_realtime_cb+0x46>
		if (mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] == 0){
    aca4:	b91a      	cbnz	r2, acae <RTC_Scheduler_realtime_cb+0x4a>
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 1;
    aca6:	2201      	movs	r2, #1
    aca8:	701a      	strb	r2, [r3, #0]
}
    acaa:	b005      	add	sp, #20
    acac:	bd30      	pop	{r4, r5, pc}
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 0;
    acae:	2200      	movs	r2, #0
    acb0:	701a      	strb	r2, [r3, #0]
			uint8_t new_bank = grid_sys_get_bank_next(&grid_sys_state);
    acb2:	4808      	ldr	r0, [pc, #32]	; (acd4 <RTC_Scheduler_realtime_cb+0x70>)
    acb4:	4b0f      	ldr	r3, [pc, #60]	; (acf4 <RTC_Scheduler_realtime_cb+0x90>)
    acb6:	4798      	blx	r3
			grid_report_sys_set_payload_parameter(&grid_report_state, GRID_REPORT_INDEX_MAPMODE,GRID_CLASS_BANKACTIVE_BANKNUMBER_offset,GRID_CLASS_BANKACTIVE_BANKNUMBER_length, new_bank);
    acb8:	4c0d      	ldr	r4, [pc, #52]	; (acf0 <RTC_Scheduler_realtime_cb+0x8c>)
    acba:	9000      	str	r0, [sp, #0]
    acbc:	2302      	movs	r3, #2
    acbe:	2205      	movs	r2, #5
    acc0:	2104      	movs	r1, #4
    acc2:	4620      	mov	r0, r4
    acc4:	4d0c      	ldr	r5, [pc, #48]	; (acf8 <RTC_Scheduler_realtime_cb+0x94>)
    acc6:	47a8      	blx	r5
			grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_MAPMODE);
    acc8:	2104      	movs	r1, #4
    acca:	4620      	mov	r0, r4
    accc:	4b0b      	ldr	r3, [pc, #44]	; (acfc <RTC_Scheduler_realtime_cb+0x98>)
    acce:	4798      	blx	r3
}
    acd0:	e7eb      	b.n	acaa <RTC_Scheduler_realtime_cb+0x46>
    acd2:	bf00      	nop
    acd4:	200032d0 	.word	0x200032d0
    acd8:	000047b7 	.word	0x000047b7
    acdc:	20003774 	.word	0x20003774
    ace0:	00004395 	.word	0x00004395
    ace4:	00005c01 	.word	0x00005c01
    ace8:	41008000 	.word	0x41008000
    acec:	00005c0f 	.word	0x00005c0f
    acf0:	200078c4 	.word	0x200078c4
    acf4:	0000475f 	.word	0x0000475f
    acf8:	00005219 	.word	0x00005219
    acfc:	0000520f 	.word	0x0000520f

0000ad00 <RTC_Scheduler_heartbeat_cb>:
{
    ad00:	b510      	push	{r4, lr}
	uint8_t event_index = grid_ui_event_find(&grid_core_state.element[0], GRID_UI_EVENT_HEARTBEAT);
    ad02:	4c07      	ldr	r4, [pc, #28]	; (ad20 <RTC_Scheduler_heartbeat_cb+0x20>)
    ad04:	6860      	ldr	r0, [r4, #4]
    ad06:	2101      	movs	r1, #1
    ad08:	4b06      	ldr	r3, [pc, #24]	; (ad24 <RTC_Scheduler_heartbeat_cb+0x24>)
    ad0a:	4798      	blx	r3
	grid_ui_event_trigger(&grid_core_state.element[0].event_list[event_index]);
    ad0c:	6863      	ldr	r3, [r4, #4]
    ad0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ad12:	68db      	ldr	r3, [r3, #12]
    ad14:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ad18:	4b03      	ldr	r3, [pc, #12]	; (ad28 <RTC_Scheduler_heartbeat_cb+0x28>)
    ad1a:	4798      	blx	r3
    ad1c:	bd10      	pop	{r4, pc}
    ad1e:	bf00      	nop
    ad20:	200078d0 	.word	0x200078d0
    ad24:	00004e51 	.word	0x00004e51
    ad28:	00004e79 	.word	0x00004e79

0000ad2c <init_timer>:
#define RTC1SEC 16384

#define RTC1MS (RTC1SEC/1000)

void init_timer(void)
{
    ad2c:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    ad2e:	4c18      	ldr	r4, [pc, #96]	; (ad90 <init_timer+0x64>)
    ad30:	f44f 63c8 	mov.w	r3, #1600	; 0x640
    ad34:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    ad36:	4b17      	ldr	r3, [pc, #92]	; (ad94 <init_timer+0x68>)
    ad38:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    ad3a:	2301      	movs	r3, #1
    ad3c:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_heartbeat.interval = RTC1MS*GRID_PARAMETER_HEARTBEAT_interval;
    ad3e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    ad42:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    ad44:	4a14      	ldr	r2, [pc, #80]	; (ad98 <init_timer+0x6c>)
    ad46:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    ad48:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	
	RTC_Scheduler_report.interval = RTC1SEC/10;
    ad4c:	f240 6266 	movw	r2, #1638	; 0x666
    ad50:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    ad52:	4a12      	ldr	r2, [pc, #72]	; (ad9c <init_timer+0x70>)
    ad54:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    ad56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	
	RTC_Scheduler_realtime.interval = 1;
    ad5a:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    ad5c:	4a10      	ldr	r2, [pc, #64]	; (ada0 <init_timer+0x74>)
    ad5e:	64e2      	str	r2, [r4, #76]	; 0x4c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    ad60:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    ad64:	4d0f      	ldr	r5, [pc, #60]	; (ada4 <init_timer+0x78>)
    ad66:	1d21      	adds	r1, r4, #4
    ad68:	4628      	mov	r0, r5
    ad6a:	4e0f      	ldr	r6, [pc, #60]	; (ada8 <init_timer+0x7c>)
    ad6c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    ad6e:	f104 0118 	add.w	r1, r4, #24
    ad72:	4628      	mov	r0, r5
    ad74:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    ad76:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    ad7a:	4628      	mov	r0, r5
    ad7c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    ad7e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    ad82:	4628      	mov	r0, r5
    ad84:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    ad86:	4628      	mov	r0, r5
    ad88:	4b08      	ldr	r3, [pc, #32]	; (adac <init_timer+0x80>)
    ad8a:	4798      	blx	r3
    ad8c:	bd70      	pop	{r4, r5, r6, pc}
    ad8e:	bf00      	nop
    ad90:	20000df0 	.word	0x20000df0
    ad94:	0000ac11 	.word	0x0000ac11
    ad98:	0000ad01 	.word	0x0000ad01
    ad9c:	0000ac05 	.word	0x0000ac05
    ada0:	0000ac65 	.word	0x0000ac65
    ada4:	20000f8c 	.word	0x20000f8c
    ada8:	000065b9 	.word	0x000065b9
    adac:	00006579 	.word	0x00006579

0000adb0 <main>:
}

//====================== USB TEST =====================//

int main(void)
{
    adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    adb4:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
	
	

	atmel_start_init();	
    adb8:	4b7a      	ldr	r3, [pc, #488]	; (afa4 <main+0x1f4>)
    adba:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    adbc:	4d7a      	ldr	r5, [pc, #488]	; (afa8 <main+0x1f8>)
    adbe:	497b      	ldr	r1, [pc, #492]	; (afac <main+0x1fc>)
    adc0:	4628      	mov	r0, r5
    adc2:	4c7b      	ldr	r4, [pc, #492]	; (afb0 <main+0x200>)
    adc4:	47a0      	blx	r4

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "D51 Init");
    adc6:	497b      	ldr	r1, [pc, #492]	; (afb4 <main+0x204>)
    adc8:	4628      	mov	r0, r5
    adca:	47a0      	blx	r4
	grid_d51_init(); // Check User Row
    adcc:	4b7a      	ldr	r3, [pc, #488]	; (afb8 <main+0x208>)
    adce:	4798      	blx	r3


	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    add0:	4b7a      	ldr	r3, [pc, #488]	; (afbc <main+0x20c>)
    add2:	4798      	blx	r3

	composite_device_start();
    add4:	4b7a      	ldr	r3, [pc, #488]	; (afc0 <main+0x210>)
    add6:	4798      	blx	r3


	grid_usb_serial_init();
    add8:	4b7a      	ldr	r3, [pc, #488]	; (afc4 <main+0x214>)
    adda:	4798      	blx	r3
	grid_usb_midi_init();
    addc:	4b7a      	ldr	r3, [pc, #488]	; (afc8 <main+0x218>)
    adde:	4798      	blx	r3
		

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Initialized");
    ade0:	497a      	ldr	r1, [pc, #488]	; (afcc <main+0x21c>)
    ade2:	4628      	mov	r0, r5
    ade4:	47a0      	blx	r4
		
	grid_module_common_init();
    ade6:	4b7a      	ldr	r3, [pc, #488]	; (afd0 <main+0x220>)
    ade8:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Grid Module Initialized");
    adea:	497a      	ldr	r1, [pc, #488]	; (afd4 <main+0x224>)
    adec:	4628      	mov	r0, r5
    adee:	47a0      	blx	r4

	init_timer();
    adf0:	4b79      	ldr	r3, [pc, #484]	; (afd8 <main+0x228>)
    adf2:	4798      	blx	r3
	uint32_t loopfast = 0;
	uint32_t loopwarp = 0;
	
	uint8_t usb_init_variable = 0;
	
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Entering Main Loop");
    adf4:	4979      	ldr	r1, [pc, #484]	; (afdc <main+0x22c>)
    adf6:	4628      	mov	r0, r5
    adf8:	47a0      	blx	r4
	uint8_t usb_init_variable = 0;
    adfa:	2300      	movs	r3, #0
    adfc:	930b      	str	r3, [sp, #44]	; 0x2c
	uint32_t loopwarp = 0;
    adfe:	9303      	str	r3, [sp, #12]
	uint32_t loopfast = 0;
    ae00:	9306      	str	r3, [sp, #24]
	uint32_t loopslow = 0;
    ae02:	9305      	str	r3, [sp, #20]
	uint32_t loopcounter = 0;
    ae04:	9302      	str	r3, [sp, #8]
	while (1) {
		
		
		
				
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    ae06:	f8df b244 	ldr.w	fp, [pc, #580]	; b04c <main+0x29c>
				
				
				//grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN		
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
				
				uint8_t new_bank = grid_sys_get_bank_next(&grid_sys_state);
    ae0a:	f8df a244 	ldr.w	sl, [pc, #580]	; b050 <main+0x2a0>
					grid_sys_alert_set_alert(&grid_sys_state, 0,100,0,2,350);
    ae0e:	461c      	mov	r4, r3
    ae10:	e12e      	b.n	b070 <main+0x2c0>
			if (usb_d_get_frame_num() == 0){
    ae12:	4b73      	ldr	r3, [pc, #460]	; (afe0 <main+0x230>)
    ae14:	4798      	blx	r3
    ae16:	2800      	cmp	r0, #0
    ae18:	f000 8131 	beq.w	b07e <main+0x2ce>
				FLASH_0_init();
    ae1c:	4b71      	ldr	r3, [pc, #452]	; (afe4 <main+0x234>)
    ae1e:	4798      	blx	r3
				page_size = flash_get_page_size(&FLASH_0);
    ae20:	4871      	ldr	r0, [pc, #452]	; (afe8 <main+0x238>)
    ae22:	4b72      	ldr	r3, [pc, #456]	; (afec <main+0x23c>)
    ae24:	4798      	blx	r3
				for (i = 0; i < page_size; i++) {
    ae26:	4603      	mov	r3, r0
    ae28:	b120      	cbz	r0, ae34 <main+0x84>
    ae2a:	4622      	mov	r2, r4
    ae2c:	3201      	adds	r2, #1
    ae2e:	b292      	uxth	r2, r2
    ae30:	4293      	cmp	r3, r2
    ae32:	d8fb      	bhi.n	ae2c <main+0x7c>
				flash_read(&FLASH_0, 0x83200, chk_data, page_size);
    ae34:	aa10      	add	r2, sp, #64	; 0x40
    ae36:	496e      	ldr	r1, [pc, #440]	; (aff0 <main+0x240>)
    ae38:	486b      	ldr	r0, [pc, #428]	; (afe8 <main+0x238>)
    ae3a:	4d6e      	ldr	r5, [pc, #440]	; (aff4 <main+0x244>)
    ae3c:	47a8      	blx	r5
				if (chk_data[5] != 5) {
    ae3e:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    ae42:	2b05      	cmp	r3, #5
					grid_sys_alert_set_alert(&grid_sys_state, 100,0,0,2,350);
    ae44:	f44f 73af 	mov.w	r3, #350	; 0x15e
    ae48:	9301      	str	r3, [sp, #4]
    ae4a:	f04f 0302 	mov.w	r3, #2
    ae4e:	9300      	str	r3, [sp, #0]
    ae50:	4623      	mov	r3, r4
    ae52:	bf19      	ittee	ne
    ae54:	4622      	movne	r2, r4
    ae56:	2164      	movne	r1, #100	; 0x64
					grid_sys_alert_set_alert(&grid_sys_state, 0,100,0,2,350);
    ae58:	2264      	moveq	r2, #100	; 0x64
    ae5a:	4621      	moveq	r1, r4
    ae5c:	4650      	mov	r0, sl
    ae5e:	4d66      	ldr	r5, [pc, #408]	; (aff8 <main+0x248>)
    ae60:	47a8      	blx	r5
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    ae62:	4966      	ldr	r1, [pc, #408]	; (affc <main+0x24c>)
    ae64:	4850      	ldr	r0, [pc, #320]	; (afa8 <main+0x1f8>)
    ae66:	4b52      	ldr	r3, [pc, #328]	; (afb0 <main+0x200>)
    ae68:	4798      	blx	r3
				uint8_t new_bank = grid_sys_get_bank_next(&grid_sys_state);
    ae6a:	4650      	mov	r0, sl
    ae6c:	4b64      	ldr	r3, [pc, #400]	; (b000 <main+0x250>)
    ae6e:	4798      	blx	r3
				
				grid_report_sys_set_payload_parameter(&grid_report_state, GRID_REPORT_INDEX_MAPMODE,GRID_CLASS_BANKACTIVE_BANKNUMBER_offset,GRID_CLASS_BANKACTIVE_BANKNUMBER_length, new_bank);
    ae70:	4d64      	ldr	r5, [pc, #400]	; (b004 <main+0x254>)
    ae72:	9000      	str	r0, [sp, #0]
    ae74:	2302      	movs	r3, #2
    ae76:	2205      	movs	r2, #5
    ae78:	2104      	movs	r1, #4
    ae7a:	4628      	mov	r0, r5
    ae7c:	4e62      	ldr	r6, [pc, #392]	; (b008 <main+0x258>)
    ae7e:	47b0      	blx	r6
	
				grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_MAPMODE);
    ae80:	2104      	movs	r1, #4
    ae82:	4628      	mov	r0, r5
    ae84:	4b61      	ldr	r3, [pc, #388]	; (b00c <main+0x25c>)
    ae86:	4798      	blx	r3
				
				usb_init_variable = 1;
    ae88:	2301      	movs	r3, #1
    ae8a:	930b      	str	r3, [sp, #44]	; 0x2c
    ae8c:	e0f7      	b.n	b07e <main+0x2ce>
		
		// Request neighbour bank settings if we don't have it initialized
		
 		if (grid_sys_get_bank(&grid_sys_state) == 255){
 										
 			grid_report_sys_set_changed_flag(&grid_report_state, GRID_REPORT_INDEX_CFG_REQUEST);
    ae8e:	2105      	movs	r1, #5
    ae90:	485c      	ldr	r0, [pc, #368]	; (b004 <main+0x254>)
    ae92:	4b5e      	ldr	r3, [pc, #376]	; (b00c <main+0x25c>)
    ae94:	4798      	blx	r3
    ae96:	e0f8      	b.n	b08a <main+0x2da>
		
		uint8_t usblength = strlen(GRID_PORT_H.rx_double_buffer);
		
		if (usblength){	
						
			GRID_PORT_H.rx_double_buffer_read_start_index = 0;
    ae98:	f5a5 6000 	sub.w	r0, r5, #2048	; 0x800
    ae9c:	62c4      	str	r4, [r0, #44]	; 0x2c

			grid_port_receive_decode(&GRID_PORT_H, 0, usblength-2);
    ae9e:	3b02      	subs	r3, #2
    aea0:	b29a      	uxth	r2, r3
    aea2:	4621      	mov	r1, r4
    aea4:	4b5a      	ldr	r3, [pc, #360]	; (b010 <main+0x260>)
    aea6:	4798      	blx	r3
    aea8:	4623      	mov	r3, r4
								
			for (uint8_t i = 0; i<100; i++){
				
				GRID_PORT_H.rx_double_buffer[i] = 0;
    aeaa:	f5a5 6100 	sub.w	r1, r5, #2048	; 0x800
    aeae:	18ca      	adds	r2, r1, r3
    aeb0:	f882 4800 	strb.w	r4, [r2, #2048]	; 0x800
    aeb4:	3301      	adds	r3, #1
			for (uint8_t i = 0; i<100; i++){
    aeb6:	2b64      	cmp	r3, #100	; 0x64
    aeb8:	d1f9      	bne.n	aeae <main+0xfe>
    aeba:	e17f      	b.n	b1bc <main+0x40c>
		grid_task_enter_task(&grid_task_state, GRID_TASK_ALERT);	
		
			
		if (grid_sys_state.alert_state){
			
			grid_sys_state.alert_state--;
    aebc:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    aec0:	3b01      	subs	r3, #1
    aec2:	b29b      	uxth	r3, r3
    aec4:	f8aa 3004 	strh.w	r3, [sl, #4]
	
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    aec8:	4650      	mov	r0, sl
    aeca:	4b52      	ldr	r3, [pc, #328]	; (b014 <main+0x264>)
    aecc:	4798      	blx	r3
    aece:	b9b8      	cbnz	r0, af00 <main+0x150>
					
				}
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    aed0:	4650      	mov	r0, sl
    aed2:	4b51      	ldr	r3, [pc, #324]	; (b018 <main+0x268>)
    aed4:	4798      	blx	r3
    aed6:	4607      	mov	r7, r0
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    aed8:	4b50      	ldr	r3, [pc, #320]	; (b01c <main+0x26c>)
    aeda:	785b      	ldrb	r3, [r3, #1]
    aedc:	2b00      	cmp	r3, #0
    aede:	f000 81aa 	beq.w	b236 <main+0x486>
    aee2:	4625      	mov	r5, r4
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    aee4:	4e4d      	ldr	r6, [pc, #308]	; (b01c <main+0x26c>)
    aee6:	f8df 816c 	ldr.w	r8, [pc, #364]	; b054 <main+0x2a4>
    aeea:	463b      	mov	r3, r7
    aeec:	4622      	mov	r2, r4
    aeee:	4629      	mov	r1, r5
    aef0:	4630      	mov	r0, r6
    aef2:	47c0      	blx	r8
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    aef4:	3501      	adds	r5, #1
    aef6:	b2ed      	uxtb	r5, r5
    aef8:	7873      	ldrb	r3, [r6, #1]
    aefa:	42ab      	cmp	r3, r5
    aefc:	d8f5      	bhi.n	aeea <main+0x13a>
    aefe:	e19a      	b.n	b236 <main+0x486>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    af00:	4650      	mov	r0, sl
    af02:	4b47      	ldr	r3, [pc, #284]	; (b020 <main+0x270>)
    af04:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    af06:	4650      	mov	r0, sl
    af08:	4b46      	ldr	r3, [pc, #280]	; (b024 <main+0x274>)
    af0a:	4798      	blx	r3
    af0c:	9007      	str	r0, [sp, #28]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    af0e:	4650      	mov	r0, sl
    af10:	4b45      	ldr	r3, [pc, #276]	; (b028 <main+0x278>)
    af12:	4798      	blx	r3
    af14:	9008      	str	r0, [sp, #32]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    af16:	4650      	mov	r0, sl
    af18:	4b44      	ldr	r3, [pc, #272]	; (b02c <main+0x27c>)
    af1a:	4798      	blx	r3
    af1c:	9009      	str	r0, [sp, #36]	; 0x24
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    af1e:	f04f 0900 	mov.w	r9, #0
    af22:	e033      	b.n	af8c <main+0x1dc>
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    af24:	9401      	str	r4, [sp, #4]
    af26:	9400      	str	r4, [sp, #0]
    af28:	4623      	mov	r3, r4
    af2a:	4622      	mov	r2, r4
    af2c:	4629      	mov	r1, r5
    af2e:	483b      	ldr	r0, [pc, #236]	; (b01c <main+0x26c>)
    af30:	4e3f      	ldr	r6, [pc, #252]	; (b030 <main+0x280>)
    af32:	47b0      	blx	r6
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    af34:	f8df 8120 	ldr.w	r8, [pc, #288]	; b058 <main+0x2a8>
    af38:	9807      	ldr	r0, [sp, #28]
    af3a:	47c0      	blx	r8
    af3c:	4f3d      	ldr	r7, [pc, #244]	; (b034 <main+0x284>)
    af3e:	2200      	movs	r2, #0
    af40:	4b3d      	ldr	r3, [pc, #244]	; (b038 <main+0x288>)
    af42:	47b8      	blx	r7
    af44:	4e3d      	ldr	r6, [pc, #244]	; (b03c <main+0x28c>)
    af46:	47b0      	blx	r6
    af48:	b2c2      	uxtb	r2, r0
    af4a:	920a      	str	r2, [sp, #40]	; 0x28
    af4c:	9809      	ldr	r0, [sp, #36]	; 0x24
    af4e:	47c0      	blx	r8
    af50:	2200      	movs	r2, #0
    af52:	4b39      	ldr	r3, [pc, #228]	; (b038 <main+0x288>)
    af54:	47b8      	blx	r7
    af56:	47b0      	blx	r6
    af58:	b2c0      	uxtb	r0, r0
    af5a:	9001      	str	r0, [sp, #4]
    af5c:	9808      	ldr	r0, [sp, #32]
    af5e:	47c0      	blx	r8
    af60:	2200      	movs	r2, #0
    af62:	4b35      	ldr	r3, [pc, #212]	; (b038 <main+0x288>)
    af64:	47b8      	blx	r7
    af66:	47b0      	blx	r6
    af68:	b2c0      	uxtb	r0, r0
    af6a:	9000      	str	r0, [sp, #0]
    af6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    af6e:	4622      	mov	r2, r4
    af70:	4629      	mov	r1, r5
    af72:	482a      	ldr	r0, [pc, #168]	; (b01c <main+0x26c>)
    af74:	4e32      	ldr	r6, [pc, #200]	; (b040 <main+0x290>)
    af76:	47b0      	blx	r6
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    af78:	9a09      	ldr	r2, [sp, #36]	; 0x24
    af7a:	9201      	str	r2, [sp, #4]
    af7c:	9a08      	ldr	r2, [sp, #32]
    af7e:	9200      	str	r2, [sp, #0]
    af80:	9b07      	ldr	r3, [sp, #28]
    af82:	4622      	mov	r2, r4
    af84:	4629      	mov	r1, r5
    af86:	4825      	ldr	r0, [pc, #148]	; (b01c <main+0x26c>)
    af88:	4d2e      	ldr	r5, [pc, #184]	; (b044 <main+0x294>)
    af8a:	47a8      	blx	r5
    af8c:	fa5f f589 	uxtb.w	r5, r9
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    af90:	4822      	ldr	r0, [pc, #136]	; (b01c <main+0x26c>)
    af92:	4b2d      	ldr	r3, [pc, #180]	; (b048 <main+0x298>)
    af94:	4798      	blx	r3
    af96:	f109 0901 	add.w	r9, r9, #1
    af9a:	42a8      	cmp	r0, r5
    af9c:	d8c2      	bhi.n	af24 <main+0x174>
    af9e:	e797      	b.n	aed0 <main+0x120>
					if ((RTC1MS - elapsed)<loopwarp){				
						loopwarp-=(RTC1MS - elapsed);
						loopstart-=(RTC1MS - elapsed);
					}
					else{
						loopwarp-=loopwarp;
    afa0:	9403      	str	r4, [sp, #12]
    afa2:	e172      	b.n	b28a <main+0x4da>
    afa4:	000002d1 	.word	0x000002d1
    afa8:	0000e5fc 	.word	0x0000e5fc
    afac:	0000efac 	.word	0x0000efac
    afb0:	0000d251 	.word	0x0000d251
    afb4:	0000efc0 	.word	0x0000efc0
    afb8:	00001161 	.word	0x00001161
    afbc:	0000be81 	.word	0x0000be81
    afc0:	0000c87d 	.word	0x0000c87d
    afc4:	00005835 	.word	0x00005835
    afc8:	00005849 	.word	0x00005849
    afcc:	0000efcc 	.word	0x0000efcc
    afd0:	00002c11 	.word	0x00002c11
    afd4:	0000efec 	.word	0x0000efec
    afd8:	0000ad2d 	.word	0x0000ad2d
    afdc:	0000f004 	.word	0x0000f004
    afe0:	00006df5 	.word	0x00006df5
    afe4:	00000531 	.word	0x00000531
    afe8:	20000fcc 	.word	0x20000fcc
    afec:	00005dad 	.word	0x00005dad
    aff0:	00083200 	.word	0x00083200
    aff4:	00005d09 	.word	0x00005d09
    aff8:	00004811 	.word	0x00004811
    affc:	0000f018 	.word	0x0000f018
    b000:	0000475f 	.word	0x0000475f
    b004:	200078c4 	.word	0x200078c4
    b008:	00005219 	.word	0x00005219
    b00c:	0000520f 	.word	0x0000520f
    b010:	00001635 	.word	0x00001635
    b014:	000047bf 	.word	0x000047bf
    b018:	000047c9 	.word	0x000047c9
    b01c:	20007944 	.word	0x20007944
    b020:	000047c3 	.word	0x000047c3
    b024:	0000482f 	.word	0x0000482f
    b028:	00004833 	.word	0x00004833
    b02c:	00004837 	.word	0x00004837
    b030:	000027c3 	.word	0x000027c3
    b034:	0000cc15 	.word	0x0000cc15
    b038:	3fe00000 	.word	0x3fe00000
    b03c:	0000d039 	.word	0x0000d039
    b040:	0000280b 	.word	0x0000280b
    b044:	00002855 	.word	0x00002855
    b048:	00002781 	.word	0x00002781
    b04c:	0000438d 	.word	0x0000438d
    b050:	200032d0 	.word	0x200032d0
    b054:	0000289f 	.word	0x0000289f
    b058:	0000cb49 	.word	0x0000cb49
    b05c:	9b03      	ldr	r3, [sp, #12]
    b05e:	3b10      	subs	r3, #16
				delay_us(1);			
			}	
					
		}
		else{
			loopwarp+= elapsed - RTC1MS;
    b060:	4403      	add	r3, r0
    b062:	9303      	str	r3, [sp, #12]
			
			loopslow++;
    b064:	9b05      	ldr	r3, [sp, #20]
    b066:	3301      	adds	r3, #1
    b068:	9305      	str	r3, [sp, #20]
		}
		
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);		
    b06a:	2101      	movs	r1, #1
    b06c:	488e      	ldr	r0, [pc, #568]	; (b2a8 <main+0x4f8>)
    b06e:	47d8      	blx	fp
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    b070:	2101      	movs	r1, #1
    b072:	488d      	ldr	r0, [pc, #564]	; (b2a8 <main+0x4f8>)
    b074:	47d8      	blx	fp
		if (usb_init_variable == 0){
    b076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b078:	2b00      	cmp	r3, #0
    b07a:	f43f aeca 	beq.w	ae12 <main+0x62>
 		if (grid_sys_get_bank(&grid_sys_state) == 255){
    b07e:	4650      	mov	r0, sl
    b080:	4b8a      	ldr	r3, [pc, #552]	; (b2ac <main+0x4fc>)
    b082:	4798      	blx	r3
    b084:	28ff      	cmp	r0, #255	; 0xff
    b086:	f43f af02 	beq.w	ae8e <main+0xde>
		loopcounter++;
    b08a:	9b02      	ldr	r3, [sp, #8]
    b08c:	3301      	adds	r3, #1
    b08e:	9302      	str	r3, [sp, #8]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    b090:	4650      	mov	r0, sl
    b092:	4b87      	ldr	r3, [pc, #540]	; (b2b0 <main+0x500>)
    b094:	4798      	blx	r3
    b096:	9004      	str	r0, [sp, #16]
		if (scheduler_report_flag){
    b098:	4b86      	ldr	r3, [pc, #536]	; (b2b4 <main+0x504>)
    b09a:	781b      	ldrb	r3, [r3, #0]
    b09c:	2b00      	cmp	r3, #0
    b09e:	d038      	beq.n	b112 <main+0x362>
			scheduler_report_flag=0;
    b0a0:	4b84      	ldr	r3, [pc, #528]	; (b2b4 <main+0x504>)
    b0a2:	701c      	strb	r4, [r3, #0]
			uint32_t task_val[GRID_TASK_NUMBER] = {0};
    b0a4:	2220      	movs	r2, #32
    b0a6:	4621      	mov	r1, r4
    b0a8:	a810      	add	r0, sp, #64	; 0x40
    b0aa:	4b83      	ldr	r3, [pc, #524]	; (b2b8 <main+0x508>)
    b0ac:	4798      	blx	r3
    b0ae:	ae0f      	add	r6, sp, #60	; 0x3c
    b0b0:	4625      	mov	r5, r4
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    b0b2:	4f82      	ldr	r7, [pc, #520]	; (b2bc <main+0x50c>)
    b0b4:	b2e9      	uxtb	r1, r5
    b0b6:	487c      	ldr	r0, [pc, #496]	; (b2a8 <main+0x4f8>)
    b0b8:	47b8      	blx	r7
    b0ba:	f846 0f04 	str.w	r0, [r6, #4]!
    b0be:	3501      	adds	r5, #1
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    b0c0:	2d08      	cmp	r5, #8
    b0c2:	d1f7      	bne.n	b0b4 <main+0x304>
			grid_task_timer_reset(&grid_task_state);
    b0c4:	4878      	ldr	r0, [pc, #480]	; (b2a8 <main+0x4f8>)
    b0c6:	4b7e      	ldr	r3, [pc, #504]	; (b2c0 <main+0x510>)
    b0c8:	4798      	blx	r3
			printf("{\"type\":\"TASK\", \"data\": [");
    b0ca:	487e      	ldr	r0, [pc, #504]	; (b2c4 <main+0x514>)
    b0cc:	4d7e      	ldr	r5, [pc, #504]	; (b2c8 <main+0x518>)
    b0ce:	47a8      	blx	r5
				printf("\"%d\"", task_val[i]);
    b0d0:	9910      	ldr	r1, [sp, #64]	; 0x40
    b0d2:	487e      	ldr	r0, [pc, #504]	; (b2cc <main+0x51c>)
    b0d4:	47a8      	blx	r5
    b0d6:	ad11      	add	r5, sp, #68	; 0x44
    b0d8:	f10d 0960 	add.w	r9, sp, #96	; 0x60
					printf(", ");
    b0dc:	f8df 8264 	ldr.w	r8, [pc, #612]	; b344 <main+0x594>
    b0e0:	4e79      	ldr	r6, [pc, #484]	; (b2c8 <main+0x518>)
				printf("\"%d\"", task_val[i]);
    b0e2:	4f7a      	ldr	r7, [pc, #488]	; (b2cc <main+0x51c>)
					printf(", ");
    b0e4:	4640      	mov	r0, r8
    b0e6:	47b0      	blx	r6
				printf("\"%d\"", task_val[i]);
    b0e8:	f855 1b04 	ldr.w	r1, [r5], #4
    b0ec:	4638      	mov	r0, r7
    b0ee:	47b0      	blx	r6
				if (i != GRID_TASK_NUMBER-1){
    b0f0:	454d      	cmp	r5, r9
    b0f2:	d1f7      	bne.n	b0e4 <main+0x334>
			printf("]}\r\n");
    b0f4:	4876      	ldr	r0, [pc, #472]	; (b2d0 <main+0x520>)
    b0f6:	4b77      	ldr	r3, [pc, #476]	; (b2d4 <main+0x524>)
    b0f8:	4798      	blx	r3
			printf("{\"type\":\"LOOP\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", loopcounter, loopslow, loopfast, loopwarp);
    b0fa:	9b03      	ldr	r3, [sp, #12]
    b0fc:	9300      	str	r3, [sp, #0]
    b0fe:	9b06      	ldr	r3, [sp, #24]
    b100:	9a05      	ldr	r2, [sp, #20]
    b102:	9902      	ldr	r1, [sp, #8]
    b104:	4874      	ldr	r0, [pc, #464]	; (b2d8 <main+0x528>)
    b106:	4d70      	ldr	r5, [pc, #448]	; (b2c8 <main+0x518>)
    b108:	47a8      	blx	r5
			loopwarp = 0;
    b10a:	9403      	str	r4, [sp, #12]
			loopfast = 0;
    b10c:	9406      	str	r4, [sp, #24]
			loopslow = 0;
    b10e:	9405      	str	r4, [sp, #20]
			loopcounter = 0;
    b110:	9402      	str	r4, [sp, #8]
		grid_task_enter_task(&grid_task_state, GRID_TASK_RECEIVE);
    b112:	2102      	movs	r1, #2
    b114:	4864      	ldr	r0, [pc, #400]	; (b2a8 <main+0x4f8>)
    b116:	47d8      	blx	fp
		grid_port_receive_complete_task(&GRID_PORT_N);
    b118:	4870      	ldr	r0, [pc, #448]	; (b2dc <main+0x52c>)
    b11a:	4d71      	ldr	r5, [pc, #452]	; (b2e0 <main+0x530>)
    b11c:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_E);
    b11e:	4871      	ldr	r0, [pc, #452]	; (b2e4 <main+0x534>)
    b120:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_S);
    b122:	4871      	ldr	r0, [pc, #452]	; (b2e8 <main+0x538>)
    b124:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_W);
    b126:	4871      	ldr	r0, [pc, #452]	; (b2ec <main+0x53c>)
    b128:	47a8      	blx	r5
		uint8_t midi_rx_buffer[10] = {0};	
    b12a:	940d      	str	r4, [sp, #52]	; 0x34
    b12c:	940e      	str	r4, [sp, #56]	; 0x38
    b12e:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
		audiodf_midi_read(midi_rx_buffer,4);
    b132:	2104      	movs	r1, #4
    b134:	a80d      	add	r0, sp, #52	; 0x34
    b136:	4b6e      	ldr	r3, [pc, #440]	; (b2f0 <main+0x540>)
    b138:	4798      	blx	r3
		if (midi_rx_buffer[0]!=0 || midi_rx_buffer[1]!=0 || midi_rx_buffer[2]!=0 || midi_rx_buffer[3]!=0){
    b13a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    b13e:	b943      	cbnz	r3, b152 <main+0x3a2>
    b140:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    b144:	b92b      	cbnz	r3, b152 <main+0x3a2>
    b146:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    b14a:	b913      	cbnz	r3, b152 <main+0x3a2>
    b14c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    b150:	b33b      	cbz	r3, b1a2 <main+0x3f2>
			grid_sys_alert_set_alert(&grid_sys_state, 50,0,0,2,500); // SOFT RED
    b152:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    b156:	9301      	str	r3, [sp, #4]
    b158:	2302      	movs	r3, #2
    b15a:	9300      	str	r3, [sp, #0]
    b15c:	4623      	mov	r3, r4
    b15e:	4622      	mov	r2, r4
    b160:	2132      	movs	r1, #50	; 0x32
    b162:	4650      	mov	r0, sl
    b164:	4d63      	ldr	r5, [pc, #396]	; (b2f4 <main+0x544>)
    b166:	47a8      	blx	r5
			uint8_t message[30] = {0};
    b168:	221e      	movs	r2, #30
    b16a:	4621      	mov	r1, r4
    b16c:	a810      	add	r0, sp, #64	; 0x40
    b16e:	4b52      	ldr	r3, [pc, #328]	; (b2b8 <main+0x508>)
    b170:	4798      	blx	r3
			sprintf(message, "MIDI: %02x %02x %02x %02x\n", midi_rx_buffer[0],midi_rx_buffer[1],midi_rx_buffer[2],midi_rx_buffer[3]);
    b172:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    b176:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    b17a:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
    b17e:	9101      	str	r1, [sp, #4]
    b180:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
    b184:	9100      	str	r1, [sp, #0]
    b186:	495c      	ldr	r1, [pc, #368]	; (b2f8 <main+0x548>)
    b188:	a810      	add	r0, sp, #64	; 0x40
    b18a:	4d5c      	ldr	r5, [pc, #368]	; (b2fc <main+0x54c>)
    b18c:	47a8      	blx	r5
			cdcdf_acm_write(message, strlen(message));
    b18e:	a810      	add	r0, sp, #64	; 0x40
    b190:	4b5b      	ldr	r3, [pc, #364]	; (b300 <main+0x550>)
    b192:	4798      	blx	r3
    b194:	4601      	mov	r1, r0
    b196:	a810      	add	r0, sp, #64	; 0x40
    b198:	4b5a      	ldr	r3, [pc, #360]	; (b304 <main+0x554>)
    b19a:	4798      	blx	r3
			delay_us(100);
    b19c:	2064      	movs	r0, #100	; 0x64
    b19e:	4b5a      	ldr	r3, [pc, #360]	; (b308 <main+0x558>)
    b1a0:	4798      	blx	r3
		cdcdf_acm_read(GRID_PORT_H.rx_double_buffer, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);			
    b1a2:	4d5a      	ldr	r5, [pc, #360]	; (b30c <main+0x55c>)
    b1a4:	f44f 7100 	mov.w	r1, #512	; 0x200
    b1a8:	4628      	mov	r0, r5
    b1aa:	4b59      	ldr	r3, [pc, #356]	; (b310 <main+0x560>)
    b1ac:	4798      	blx	r3
		uint8_t usblength = strlen(GRID_PORT_H.rx_double_buffer);
    b1ae:	4628      	mov	r0, r5
    b1b0:	4b53      	ldr	r3, [pc, #332]	; (b300 <main+0x550>)
    b1b2:	4798      	blx	r3
    b1b4:	b2c3      	uxtb	r3, r0
		if (usblength){	
    b1b6:	2b00      	cmp	r3, #0
    b1b8:	f47f ae6e 	bne.w	ae98 <main+0xe8>
		grid_task_enter_task(&grid_task_state, GRID_TASK_REPORT);
    b1bc:	2103      	movs	r1, #3
    b1be:	483a      	ldr	r0, [pc, #232]	; (b2a8 <main+0x4f8>)
    b1c0:	47d8      	blx	fp
		grid_port_process_ui(&GRID_PORT_U); // COOLDOWN DELAY IMPLEMENTED INSIDE
    b1c2:	4e54      	ldr	r6, [pc, #336]	; (b314 <main+0x564>)
    b1c4:	4630      	mov	r0, r6
    b1c6:	4b54      	ldr	r3, [pc, #336]	; (b318 <main+0x568>)
    b1c8:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_INBOUND);	
    b1ca:	2104      	movs	r1, #4
    b1cc:	4836      	ldr	r0, [pc, #216]	; (b2a8 <main+0x4f8>)
    b1ce:	47d8      	blx	fp
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    b1d0:	2101      	movs	r1, #1
    b1d2:	4630      	mov	r0, r6
    b1d4:	4d51      	ldr	r5, [pc, #324]	; (b31c <main+0x56c>)
    b1d6:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    b1d8:	4621      	mov	r1, r4
    b1da:	4840      	ldr	r0, [pc, #256]	; (b2dc <main+0x52c>)
    b1dc:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    b1de:	4621      	mov	r1, r4
    b1e0:	4840      	ldr	r0, [pc, #256]	; (b2e4 <main+0x534>)
    b1e2:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_S, 0);
    b1e4:	f8df 9100 	ldr.w	r9, [pc, #256]	; b2e8 <main+0x538>
    b1e8:	4621      	mov	r1, r4
    b1ea:	4648      	mov	r0, r9
    b1ec:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_W, 0);
    b1ee:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b2ec <main+0x53c>
    b1f2:	4621      	mov	r1, r4
    b1f4:	4640      	mov	r0, r8
    b1f6:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_H, 0);				
    b1f8:	4f49      	ldr	r7, [pc, #292]	; (b320 <main+0x570>)
    b1fa:	4621      	mov	r1, r4
    b1fc:	4638      	mov	r0, r7
    b1fe:	47a8      	blx	r5
		grid_task_enter_task(&grid_task_state, GRID_TASK_OUTBOUND);
    b200:	2105      	movs	r1, #5
    b202:	4829      	ldr	r0, [pc, #164]	; (b2a8 <main+0x4f8>)
    b204:	47d8      	blx	fp
		grid_port_process_outbound_usart(&GRID_PORT_N);
    b206:	4835      	ldr	r0, [pc, #212]	; (b2dc <main+0x52c>)
    b208:	4d46      	ldr	r5, [pc, #280]	; (b324 <main+0x574>)
    b20a:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_E);
    b20c:	4835      	ldr	r0, [pc, #212]	; (b2e4 <main+0x534>)
    b20e:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_S);
    b210:	4648      	mov	r0, r9
    b212:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_W);
    b214:	4640      	mov	r0, r8
    b216:	47a8      	blx	r5
		grid_port_process_outbound_usb(&GRID_PORT_H);
    b218:	4638      	mov	r0, r7
    b21a:	4b43      	ldr	r3, [pc, #268]	; (b328 <main+0x578>)
    b21c:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    b21e:	4630      	mov	r0, r6
    b220:	4b42      	ldr	r3, [pc, #264]	; (b32c <main+0x57c>)
    b222:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_ALERT);	
    b224:	2107      	movs	r1, #7
    b226:	4820      	ldr	r0, [pc, #128]	; (b2a8 <main+0x4f8>)
    b228:	47d8      	blx	fp
		if (grid_sys_state.alert_state){
    b22a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    b22e:	b29b      	uxth	r3, r3
    b230:	2b00      	cmp	r3, #0
    b232:	f47f ae43 	bne.w	aebc <main+0x10c>
		grid_task_enter_task(&grid_task_state, GRID_TASK_LED);
    b236:	2106      	movs	r1, #6
    b238:	481b      	ldr	r0, [pc, #108]	; (b2a8 <main+0x4f8>)
    b23a:	47d8      	blx	fp
		grid_led_tick(&grid_led_state);
    b23c:	4d3c      	ldr	r5, [pc, #240]	; (b330 <main+0x580>)
    b23e:	4628      	mov	r0, r5
    b240:	4b3c      	ldr	r3, [pc, #240]	; (b334 <main+0x584>)
    b242:	4798      	blx	r3
			grid_led_render_all(&grid_led_state);	
    b244:	4628      	mov	r0, r5
    b246:	4b3c      	ldr	r3, [pc, #240]	; (b338 <main+0x588>)
    b248:	4798      	blx	r3
			grid_led_hardware_start_transfer(&grid_led_state);
    b24a:	4628      	mov	r0, r5
    b24c:	4b3b      	ldr	r3, [pc, #236]	; (b33c <main+0x58c>)
    b24e:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_IDLE);
    b250:	4621      	mov	r1, r4
    b252:	4815      	ldr	r0, [pc, #84]	; (b2a8 <main+0x4f8>)
    b254:	47d8      	blx	fp
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    b256:	9d04      	ldr	r5, [sp, #16]
    b258:	4629      	mov	r1, r5
    b25a:	4650      	mov	r0, sl
    b25c:	4b38      	ldr	r3, [pc, #224]	; (b340 <main+0x590>)
    b25e:	4798      	blx	r3
		if (elapsed < RTC1MS){
    b260:	280f      	cmp	r0, #15
    b262:	f63f aefb 	bhi.w	b05c <main+0x2ac>
			if (loopwarp>5){
    b266:	9903      	ldr	r1, [sp, #12]
    b268:	2905      	cmp	r1, #5
    b26a:	d911      	bls.n	b290 <main+0x4e0>
				if (RTC1MS - elapsed > 0){
    b26c:	2810      	cmp	r0, #16
    b26e:	d00f      	beq.n	b290 <main+0x4e0>
					if ((RTC1MS - elapsed)<loopwarp){				
    b270:	f1c0 0310 	rsb	r3, r0, #16
    b274:	4299      	cmp	r1, r3
    b276:	f67f ae93 	bls.w	afa0 <main+0x1f0>
    b27a:	f1a1 0310 	sub.w	r3, r1, #16
						loopwarp-=(RTC1MS - elapsed);
    b27e:	4403      	add	r3, r0
    b280:	9303      	str	r3, [sp, #12]
    b282:	f1a5 0310 	sub.w	r3, r5, #16
						loopstart-=(RTC1MS - elapsed);
    b286:	18c3      	adds	r3, r0, r3
    b288:	9304      	str	r3, [sp, #16]
					loopfast++;
    b28a:	9b06      	ldr	r3, [sp, #24]
    b28c:	3301      	adds	r3, #1
    b28e:	9306      	str	r3, [sp, #24]
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    b290:	4d2b      	ldr	r5, [pc, #172]	; (b340 <main+0x590>)
				delay_us(1);			
    b292:	4e1d      	ldr	r6, [pc, #116]	; (b308 <main+0x558>)
    b294:	9f04      	ldr	r7, [sp, #16]
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    b296:	4639      	mov	r1, r7
    b298:	4650      	mov	r0, sl
    b29a:	47a8      	blx	r5
    b29c:	280f      	cmp	r0, #15
    b29e:	f63f aee4 	bhi.w	b06a <main+0x2ba>
				delay_us(1);			
    b2a2:	2001      	movs	r0, #1
    b2a4:	47b0      	blx	r6
    b2a6:	e7f6      	b.n	b296 <main+0x4e6>
    b2a8:	20003774 	.word	0x20003774
    b2ac:	0000475b 	.word	0x0000475b
    b2b0:	000047ad 	.word	0x000047ad
    b2b4:	20000df0 	.word	0x20000df0
    b2b8:	0000d0e7 	.word	0x0000d0e7
    b2bc:	000043b3 	.word	0x000043b3
    b2c0:	000043a3 	.word	0x000043a3
    b2c4:	0000f034 	.word	0x0000f034
    b2c8:	0000d251 	.word	0x0000d251
    b2cc:	0000f050 	.word	0x0000f050
    b2d0:	0000e7b0 	.word	0x0000e7b0
    b2d4:	0000d339 	.word	0x0000d339
    b2d8:	0000f05c 	.word	0x0000f05c
    b2dc:	200012a4 	.word	0x200012a4
    b2e0:	00001bfd 	.word	0x00001bfd
    b2e4:	200068b8 	.word	0x200068b8
    b2e8:	200047a4 	.word	0x200047a4
    b2ec:	20003798 	.word	0x20003798
    b2f0:	0000bee9 	.word	0x0000bee9
    b2f4:	00004811 	.word	0x00004811
    b2f8:	0000f090 	.word	0x0000f090
    b2fc:	0000d4d5 	.word	0x0000d4d5
    b300:	0000d51d 	.word	0x0000d51d
    b304:	0000b6ed 	.word	0x0000b6ed
    b308:	00005c61 	.word	0x00005c61
    b30c:	20005fb0 	.word	0x20005fb0
    b310:	0000b6c5 	.word	0x0000b6c5
    b314:	200022bc 	.word	0x200022bc
    b318:	00005241 	.word	0x00005241
    b31c:	00001fa1 	.word	0x00001fa1
    b320:	200057b0 	.word	0x200057b0
    b324:	00002681 	.word	0x00002681
    b328:	00002175 	.word	0x00002175
    b32c:	00002365 	.word	0x00002365
    b330:	20007944 	.word	0x20007944
    b334:	00002785 	.word	0x00002785
    b338:	00002bc1 	.word	0x00002bc1
    b33c:	00002be5 	.word	0x00002be5
    b340:	000047b1 	.word	0x000047b1
    b344:	0000f058 	.word	0x0000f058

0000b348 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    b348:	b940      	cbnz	r0, b35c <_read+0x14>
{
    b34a:	b508      	push	{r3, lr}
    b34c:	460b      	mov	r3, r1
    b34e:	4611      	mov	r1, r2
    b350:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    b352:	4b04      	ldr	r3, [pc, #16]	; (b364 <_read+0x1c>)
    b354:	4798      	blx	r3
    b356:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    b35a:	bd08      	pop	{r3, pc}
		return -1;
    b35c:	f04f 30ff 	mov.w	r0, #4294967295
    b360:	4770      	bx	lr
    b362:	bf00      	nop
    b364:	0000b3b9 	.word	0x0000b3b9

0000b368 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    b368:	3801      	subs	r0, #1
    b36a:	2802      	cmp	r0, #2
    b36c:	d808      	bhi.n	b380 <_write+0x18>
{
    b36e:	b508      	push	{r3, lr}
    b370:	460b      	mov	r3, r1
    b372:	4611      	mov	r1, r2
    b374:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    b376:	4b04      	ldr	r3, [pc, #16]	; (b388 <_write+0x20>)
    b378:	4798      	blx	r3
    b37a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    b37e:	bd08      	pop	{r3, pc}
		return -1;
    b380:	f04f 30ff 	mov.w	r0, #4294967295
    b384:	4770      	bx	lr
    b386:	bf00      	nop
    b388:	0000b3dd 	.word	0x0000b3dd

0000b38c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    b38c:	b570      	push	{r4, r5, r6, lr}
    b38e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    b390:	4d06      	ldr	r5, [pc, #24]	; (b3ac <stdio_io_init+0x20>)
    b392:	682b      	ldr	r3, [r5, #0]
    b394:	2100      	movs	r1, #0
    b396:	6898      	ldr	r0, [r3, #8]
    b398:	4c05      	ldr	r4, [pc, #20]	; (b3b0 <stdio_io_init+0x24>)
    b39a:	47a0      	blx	r4
	setbuf(stdin, NULL);
    b39c:	682b      	ldr	r3, [r5, #0]
    b39e:	2100      	movs	r1, #0
    b3a0:	6858      	ldr	r0, [r3, #4]
    b3a2:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    b3a4:	4b03      	ldr	r3, [pc, #12]	; (b3b4 <stdio_io_init+0x28>)
    b3a6:	601e      	str	r6, [r3, #0]
    b3a8:	bd70      	pop	{r4, r5, r6, pc}
    b3aa:	bf00      	nop
    b3ac:	20000548 	.word	0x20000548
    b3b0:	0000d369 	.word	0x0000d369
    b3b4:	20000e48 	.word	0x20000e48

0000b3b8 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    b3b8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    b3ba:	4b06      	ldr	r3, [pc, #24]	; (b3d4 <stdio_io_read+0x1c>)
    b3bc:	681b      	ldr	r3, [r3, #0]
    b3be:	b133      	cbz	r3, b3ce <stdio_io_read+0x16>
    b3c0:	460a      	mov	r2, r1
    b3c2:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    b3c4:	b292      	uxth	r2, r2
    b3c6:	4618      	mov	r0, r3
    b3c8:	4b03      	ldr	r3, [pc, #12]	; (b3d8 <stdio_io_read+0x20>)
    b3ca:	4798      	blx	r3
    b3cc:	bd08      	pop	{r3, pc}
		return 0;
    b3ce:	2000      	movs	r0, #0
}
    b3d0:	bd08      	pop	{r3, pc}
    b3d2:	bf00      	nop
    b3d4:	20000e48 	.word	0x20000e48
    b3d8:	00005f09 	.word	0x00005f09

0000b3dc <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    b3dc:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    b3de:	4b06      	ldr	r3, [pc, #24]	; (b3f8 <stdio_io_write+0x1c>)
    b3e0:	681b      	ldr	r3, [r3, #0]
    b3e2:	b133      	cbz	r3, b3f2 <stdio_io_write+0x16>
    b3e4:	460a      	mov	r2, r1
    b3e6:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    b3e8:	b292      	uxth	r2, r2
    b3ea:	4618      	mov	r0, r3
    b3ec:	4b03      	ldr	r3, [pc, #12]	; (b3fc <stdio_io_write+0x20>)
    b3ee:	4798      	blx	r3
    b3f0:	bd08      	pop	{r3, pc}
		return 0;
    b3f2:	2000      	movs	r0, #0
}
    b3f4:	bd08      	pop	{r3, pc}
    b3f6:	bf00      	nop
    b3f8:	20000e48 	.word	0x20000e48
    b3fc:	00005ed9 	.word	0x00005ed9

0000b400 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    b400:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    b402:	4c04      	ldr	r4, [pc, #16]	; (b414 <stdio_redirect_init+0x14>)
    b404:	4620      	mov	r0, r4
    b406:	4b04      	ldr	r3, [pc, #16]	; (b418 <stdio_redirect_init+0x18>)
    b408:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    b40a:	4620      	mov	r0, r4
    b40c:	4b03      	ldr	r3, [pc, #12]	; (b41c <stdio_redirect_init+0x1c>)
    b40e:	4798      	blx	r3
    b410:	bd10      	pop	{r4, pc}
    b412:	bf00      	nop
    b414:	20001044 	.word	0x20001044
    b418:	00006ae9 	.word	0x00006ae9
    b41c:	0000b38d 	.word	0x0000b38d

0000b420 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b420:	b5f0      	push	{r4, r5, r6, r7, lr}
    b422:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b424:	780b      	ldrb	r3, [r1, #0]
    b426:	f3c3 1441 	ubfx	r4, r3, #5, #2
    b42a:	2c01      	cmp	r4, #1
    b42c:	d15e      	bne.n	b4ec <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b42e:	888c      	ldrh	r4, [r1, #4]
    b430:	4d35      	ldr	r5, [pc, #212]	; (b508 <cdcdf_acm_req+0xe8>)
    b432:	782d      	ldrb	r5, [r5, #0]
    b434:	42a5      	cmp	r5, r4
    b436:	d003      	beq.n	b440 <cdcdf_acm_req+0x20>
    b438:	4d33      	ldr	r5, [pc, #204]	; (b508 <cdcdf_acm_req+0xe8>)
    b43a:	786d      	ldrb	r5, [r5, #1]
    b43c:	42a5      	cmp	r5, r4
    b43e:	d158      	bne.n	b4f2 <cdcdf_acm_req+0xd2>
    b440:	4616      	mov	r6, r2
    b442:	460c      	mov	r4, r1
    b444:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b446:	f013 0f80 	tst.w	r3, #128	; 0x80
    b44a:	d10c      	bne.n	b466 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    b44c:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b44e:	4b2f      	ldr	r3, [pc, #188]	; (b50c <cdcdf_acm_req+0xec>)
    b450:	4798      	blx	r3
    b452:	4601      	mov	r1, r0
	switch (req->bRequest) {
    b454:	7863      	ldrb	r3, [r4, #1]
    b456:	2b20      	cmp	r3, #32
    b458:	d013      	beq.n	b482 <cdcdf_acm_req+0x62>
    b45a:	2b22      	cmp	r3, #34	; 0x22
    b45c:	d032      	beq.n	b4c4 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    b45e:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    b462:	b003      	add	sp, #12
    b464:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    b466:	2a01      	cmp	r2, #1
    b468:	d046      	beq.n	b4f8 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    b46a:	784b      	ldrb	r3, [r1, #1]
    b46c:	2b21      	cmp	r3, #33	; 0x21
    b46e:	d145      	bne.n	b4fc <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b470:	88cb      	ldrh	r3, [r1, #6]
    b472:	2b07      	cmp	r3, #7
    b474:	d145      	bne.n	b502 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b476:	2300      	movs	r3, #0
    b478:	2207      	movs	r2, #7
    b47a:	4925      	ldr	r1, [pc, #148]	; (b510 <cdcdf_acm_req+0xf0>)
    b47c:	4c25      	ldr	r4, [pc, #148]	; (b514 <cdcdf_acm_req+0xf4>)
    b47e:	47a0      	blx	r4
    b480:	e7ef      	b.n	b462 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b482:	2f07      	cmp	r7, #7
    b484:	d12b      	bne.n	b4de <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    b486:	b1be      	cbz	r6, b4b8 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b488:	6800      	ldr	r0, [r0, #0]
    b48a:	9000      	str	r0, [sp, #0]
    b48c:	888a      	ldrh	r2, [r1, #4]
    b48e:	798b      	ldrb	r3, [r1, #6]
    b490:	f8ad 2004 	strh.w	r2, [sp, #4]
    b494:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b498:	4b1b      	ldr	r3, [pc, #108]	; (b508 <cdcdf_acm_req+0xe8>)
    b49a:	691b      	ldr	r3, [r3, #16]
    b49c:	b113      	cbz	r3, b4a4 <cdcdf_acm_req+0x84>
    b49e:	4668      	mov	r0, sp
    b4a0:	4798      	blx	r3
    b4a2:	b1f8      	cbz	r0, b4e4 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    b4a4:	4b18      	ldr	r3, [pc, #96]	; (b508 <cdcdf_acm_req+0xe8>)
    b4a6:	aa02      	add	r2, sp, #8
    b4a8:	e912 0003 	ldmdb	r2, {r0, r1}
    b4ac:	6098      	str	r0, [r3, #8]
    b4ae:	8199      	strh	r1, [r3, #12]
    b4b0:	0c09      	lsrs	r1, r1, #16
    b4b2:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    b4b4:	2000      	movs	r0, #0
    b4b6:	e7d4      	b.n	b462 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b4b8:	2300      	movs	r3, #0
    b4ba:	2207      	movs	r2, #7
    b4bc:	4628      	mov	r0, r5
    b4be:	4c15      	ldr	r4, [pc, #84]	; (b514 <cdcdf_acm_req+0xf4>)
    b4c0:	47a0      	blx	r4
    b4c2:	e7ce      	b.n	b462 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    b4c4:	2300      	movs	r3, #0
    b4c6:	461a      	mov	r2, r3
    b4c8:	4619      	mov	r1, r3
    b4ca:	4618      	mov	r0, r3
    b4cc:	4d11      	ldr	r5, [pc, #68]	; (b514 <cdcdf_acm_req+0xf4>)
    b4ce:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    b4d0:	4b0d      	ldr	r3, [pc, #52]	; (b508 <cdcdf_acm_req+0xe8>)
    b4d2:	695b      	ldr	r3, [r3, #20]
    b4d4:	b143      	cbz	r3, b4e8 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    b4d6:	8860      	ldrh	r0, [r4, #2]
    b4d8:	4798      	blx	r3
		return ERR_NONE;
    b4da:	2000      	movs	r0, #0
    b4dc:	e7c1      	b.n	b462 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    b4de:	f04f 30ff 	mov.w	r0, #4294967295
    b4e2:	e7be      	b.n	b462 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    b4e4:	2000      	movs	r0, #0
    b4e6:	e7bc      	b.n	b462 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    b4e8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    b4ea:	e7ba      	b.n	b462 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    b4ec:	f06f 0009 	mvn.w	r0, #9
    b4f0:	e7b7      	b.n	b462 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    b4f2:	f06f 0009 	mvn.w	r0, #9
    b4f6:	e7b4      	b.n	b462 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    b4f8:	2000      	movs	r0, #0
    b4fa:	e7b2      	b.n	b462 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    b4fc:	f06f 000c 	mvn.w	r0, #12
    b500:	e7af      	b.n	b462 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    b502:	f04f 30ff 	mov.w	r0, #4294967295
    b506:	e7ac      	b.n	b462 <cdcdf_acm_req+0x42>
    b508:	20000e4c 	.word	0x20000e4c
    b50c:	0000c5f9 	.word	0x0000c5f9
    b510:	20000e54 	.word	0x20000e54
    b514:	0000c0d5 	.word	0x0000c0d5

0000b518 <cdcdf_acm_ctrl>:
{
    b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b51c:	b083      	sub	sp, #12
    b51e:	4616      	mov	r6, r2
	switch (ctrl) {
    b520:	2901      	cmp	r1, #1
    b522:	d066      	beq.n	b5f2 <cdcdf_acm_ctrl+0xda>
    b524:	b141      	cbz	r1, b538 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    b526:	2902      	cmp	r1, #2
    b528:	bf0c      	ite	eq
    b52a:	f06f 001a 	mvneq.w	r0, #26
    b52e:	f06f 000c 	mvnne.w	r0, #12
}
    b532:	b003      	add	sp, #12
    b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b538:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    b53c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    b53e:	2800      	cmp	r0, #0
    b540:	f000 8085 	beq.w	b64e <cdcdf_acm_ctrl+0x136>
    b544:	f10a 3bff 	add.w	fp, sl, #4294967295
    b548:	f10a 0301 	add.w	r3, sl, #1
    b54c:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b54e:	4f46      	ldr	r7, [pc, #280]	; (b668 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    b550:	f8df 9124 	ldr.w	r9, [pc, #292]	; b678 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b554:	f8df 8124 	ldr.w	r8, [pc, #292]	; b67c <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    b558:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b55a:	7943      	ldrb	r3, [r0, #5]
    b55c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    b560:	2b02      	cmp	r3, #2
    b562:	d002      	beq.n	b56a <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    b564:	f06f 0009 	mvn.w	r0, #9
    b568:	e7e3      	b.n	b532 <cdcdf_acm_ctrl+0x1a>
    b56a:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b56e:	f89b 3000 	ldrb.w	r3, [fp]
    b572:	429a      	cmp	r2, r3
    b574:	d06e      	beq.n	b654 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b576:	2bff      	cmp	r3, #255	; 0xff
    b578:	d16f      	bne.n	b65a <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b57a:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b57e:	2205      	movs	r2, #5
    b580:	6871      	ldr	r1, [r6, #4]
    b582:	4b3a      	ldr	r3, [pc, #232]	; (b66c <cdcdf_acm_ctrl+0x154>)
    b584:	4798      	blx	r3
		while (NULL != ep) {
    b586:	4604      	mov	r4, r0
    b588:	b1f8      	cbz	r0, b5ca <cdcdf_acm_ctrl+0xb2>
    b58a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    b58e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    b590:	7963      	ldrb	r3, [r4, #5]
    b592:	7922      	ldrb	r2, [r4, #4]
    b594:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b598:	b292      	uxth	r2, r2
    b59a:	78e1      	ldrb	r1, [r4, #3]
    b59c:	4628      	mov	r0, r5
    b59e:	47b8      	blx	r7
    b5a0:	2800      	cmp	r0, #0
    b5a2:	d15d      	bne.n	b660 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b5a4:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b5a8:	bf14      	ite	ne
    b5aa:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b5ae:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b5b2:	4628      	mov	r0, r5
    b5b4:	47c8      	blx	r9
			desc->sod = ep;
    b5b6:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    b5b8:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b5ba:	6871      	ldr	r1, [r6, #4]
    b5bc:	4420      	add	r0, r4
    b5be:	47c0      	blx	r8
		while (NULL != ep) {
    b5c0:	4604      	mov	r4, r0
    b5c2:	2800      	cmp	r0, #0
    b5c4:	d1e3      	bne.n	b58e <cdcdf_acm_ctrl+0x76>
    b5c6:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b5ca:	6833      	ldr	r3, [r6, #0]
    b5cc:	7818      	ldrb	r0, [r3, #0]
    b5ce:	2204      	movs	r2, #4
    b5d0:	6871      	ldr	r1, [r6, #4]
    b5d2:	4418      	add	r0, r3
    b5d4:	4b25      	ldr	r3, [pc, #148]	; (b66c <cdcdf_acm_ctrl+0x154>)
    b5d6:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    b5d8:	9b00      	ldr	r3, [sp, #0]
    b5da:	459b      	cmp	fp, r3
    b5dc:	d004      	beq.n	b5e8 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    b5de:	2800      	cmp	r0, #0
    b5e0:	d1ba      	bne.n	b558 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    b5e2:	f06f 0009 	mvn.w	r0, #9
    b5e6:	e7a4      	b.n	b532 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    b5e8:	2201      	movs	r2, #1
    b5ea:	4b21      	ldr	r3, [pc, #132]	; (b670 <cdcdf_acm_ctrl+0x158>)
    b5ec:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b5ee:	2000      	movs	r0, #0
    b5f0:	e79f      	b.n	b532 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b5f2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    b5f4:	b142      	cbz	r2, b608 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b5f6:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b5f8:	795b      	ldrb	r3, [r3, #5]
    b5fa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    b5fe:	2b02      	cmp	r3, #2
    b600:	d002      	beq.n	b608 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    b602:	f06f 0009 	mvn.w	r0, #9
    b606:	e794      	b.n	b532 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    b608:	7823      	ldrb	r3, [r4, #0]
    b60a:	2bff      	cmp	r3, #255	; 0xff
    b60c:	d008      	beq.n	b620 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    b60e:	23ff      	movs	r3, #255	; 0xff
    b610:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    b612:	78a0      	ldrb	r0, [r4, #2]
    b614:	4298      	cmp	r0, r3
    b616:	d003      	beq.n	b620 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b618:	4b16      	ldr	r3, [pc, #88]	; (b674 <cdcdf_acm_ctrl+0x15c>)
    b61a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b61c:	23ff      	movs	r3, #255	; 0xff
    b61e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    b620:	7863      	ldrb	r3, [r4, #1]
    b622:	2bff      	cmp	r3, #255	; 0xff
    b624:	d008      	beq.n	b638 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    b626:	23ff      	movs	r3, #255	; 0xff
    b628:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    b62a:	78e0      	ldrb	r0, [r4, #3]
    b62c:	4298      	cmp	r0, r3
    b62e:	d003      	beq.n	b638 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b630:	4b10      	ldr	r3, [pc, #64]	; (b674 <cdcdf_acm_ctrl+0x15c>)
    b632:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b634:	23ff      	movs	r3, #255	; 0xff
    b636:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    b638:	7920      	ldrb	r0, [r4, #4]
    b63a:	28ff      	cmp	r0, #255	; 0xff
    b63c:	d003      	beq.n	b646 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    b63e:	4b0d      	ldr	r3, [pc, #52]	; (b674 <cdcdf_acm_ctrl+0x15c>)
    b640:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b642:	23ff      	movs	r3, #255	; 0xff
    b644:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    b646:	2000      	movs	r0, #0
    b648:	4b09      	ldr	r3, [pc, #36]	; (b670 <cdcdf_acm_ctrl+0x158>)
    b64a:	7158      	strb	r0, [r3, #5]
    b64c:	e771      	b.n	b532 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    b64e:	f06f 0009 	mvn.w	r0, #9
    b652:	e76e      	b.n	b532 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    b654:	f06f 0011 	mvn.w	r0, #17
    b658:	e76b      	b.n	b532 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    b65a:	f06f 001b 	mvn.w	r0, #27
    b65e:	e768      	b.n	b532 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    b660:	f06f 0013 	mvn.w	r0, #19
    b664:	e765      	b.n	b532 <cdcdf_acm_ctrl+0x1a>
    b666:	bf00      	nop
    b668:	00006e0d 	.word	0x00006e0d
    b66c:	0000c619 	.word	0x0000c619
    b670:	20000e4c 	.word	0x20000e4c
    b674:	00006e75 	.word	0x00006e75
    b678:	00006ea1 	.word	0x00006ea1
    b67c:	0000c653 	.word	0x0000c653

0000b680 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b680:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    b682:	4b0a      	ldr	r3, [pc, #40]	; (b6ac <cdcdf_acm_init+0x2c>)
    b684:	4798      	blx	r3
    b686:	2801      	cmp	r0, #1
    b688:	d80c      	bhi.n	b6a4 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b68a:	4809      	ldr	r0, [pc, #36]	; (b6b0 <cdcdf_acm_init+0x30>)
    b68c:	4b09      	ldr	r3, [pc, #36]	; (b6b4 <cdcdf_acm_init+0x34>)
    b68e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b690:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    b692:	3018      	adds	r0, #24
    b694:	4b08      	ldr	r3, [pc, #32]	; (b6b8 <cdcdf_acm_init+0x38>)
    b696:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b698:	4908      	ldr	r1, [pc, #32]	; (b6bc <cdcdf_acm_init+0x3c>)
    b69a:	2001      	movs	r0, #1
    b69c:	4b08      	ldr	r3, [pc, #32]	; (b6c0 <cdcdf_acm_init+0x40>)
    b69e:	4798      	blx	r3
	return ERR_NONE;
    b6a0:	2000      	movs	r0, #0
    b6a2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b6a4:	f06f 0010 	mvn.w	r0, #16
}
    b6a8:	bd08      	pop	{r3, pc}
    b6aa:	bf00      	nop
    b6ac:	0000c605 	.word	0x0000c605
    b6b0:	20000e4c 	.word	0x20000e4c
    b6b4:	0000b519 	.word	0x0000b519
    b6b8:	0000c5a5 	.word	0x0000c5a5
    b6bc:	20000388 	.word	0x20000388
    b6c0:	0000c511 	.word	0x0000c511

0000b6c4 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    b6c4:	4b07      	ldr	r3, [pc, #28]	; (b6e4 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    b6c6:	795b      	ldrb	r3, [r3, #5]
    b6c8:	b143      	cbz	r3, b6dc <cdcdf_acm_read+0x18>
{
    b6ca:	b510      	push	{r4, lr}
    b6cc:	460a      	mov	r2, r1
    b6ce:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    b6d0:	2300      	movs	r3, #0
    b6d2:	4804      	ldr	r0, [pc, #16]	; (b6e4 <cdcdf_acm_read+0x20>)
    b6d4:	7900      	ldrb	r0, [r0, #4]
    b6d6:	4c04      	ldr	r4, [pc, #16]	; (b6e8 <cdcdf_acm_read+0x24>)
    b6d8:	47a0      	blx	r4
    b6da:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    b6dc:	f06f 0010 	mvn.w	r0, #16
    b6e0:	4770      	bx	lr
    b6e2:	bf00      	nop
    b6e4:	20000e4c 	.word	0x20000e4c
    b6e8:	0000c0d5 	.word	0x0000c0d5

0000b6ec <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    b6ec:	4b07      	ldr	r3, [pc, #28]	; (b70c <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    b6ee:	795b      	ldrb	r3, [r3, #5]
    b6f0:	b143      	cbz	r3, b704 <cdcdf_acm_write+0x18>
{
    b6f2:	b510      	push	{r4, lr}
    b6f4:	460a      	mov	r2, r1
    b6f6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    b6f8:	2301      	movs	r3, #1
    b6fa:	4804      	ldr	r0, [pc, #16]	; (b70c <cdcdf_acm_write+0x20>)
    b6fc:	78c0      	ldrb	r0, [r0, #3]
    b6fe:	4c04      	ldr	r4, [pc, #16]	; (b710 <cdcdf_acm_write+0x24>)
    b700:	47a0      	blx	r4
    b702:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    b704:	f06f 0010 	mvn.w	r0, #16
    b708:	4770      	bx	lr
    b70a:	bf00      	nop
    b70c:	20000e4c 	.word	0x20000e4c
    b710:	0000c0d5 	.word	0x0000c0d5

0000b714 <cdcdf_acm_register_callback>:
{
    b714:	b508      	push	{r3, lr}
	switch (cb_type) {
    b716:	2803      	cmp	r0, #3
    b718:	d81b      	bhi.n	b752 <cdcdf_acm_register_callback+0x3e>
    b71a:	e8df f000 	tbb	[pc, r0]
    b71e:	0a02      	.short	0x0a02
    b720:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    b722:	460a      	mov	r2, r1
    b724:	2102      	movs	r1, #2
    b726:	4b0c      	ldr	r3, [pc, #48]	; (b758 <cdcdf_acm_register_callback+0x44>)
    b728:	7918      	ldrb	r0, [r3, #4]
    b72a:	4b0c      	ldr	r3, [pc, #48]	; (b75c <cdcdf_acm_register_callback+0x48>)
    b72c:	4798      	blx	r3
	return ERR_NONE;
    b72e:	2000      	movs	r0, #0
		break;
    b730:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    b732:	460a      	mov	r2, r1
    b734:	2102      	movs	r1, #2
    b736:	4b08      	ldr	r3, [pc, #32]	; (b758 <cdcdf_acm_register_callback+0x44>)
    b738:	78d8      	ldrb	r0, [r3, #3]
    b73a:	4b08      	ldr	r3, [pc, #32]	; (b75c <cdcdf_acm_register_callback+0x48>)
    b73c:	4798      	blx	r3
	return ERR_NONE;
    b73e:	2000      	movs	r0, #0
		break;
    b740:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    b742:	4b05      	ldr	r3, [pc, #20]	; (b758 <cdcdf_acm_register_callback+0x44>)
    b744:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    b746:	2000      	movs	r0, #0
		break;
    b748:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    b74a:	4b03      	ldr	r3, [pc, #12]	; (b758 <cdcdf_acm_register_callback+0x44>)
    b74c:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    b74e:	2000      	movs	r0, #0
		break;
    b750:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    b752:	f06f 000c 	mvn.w	r0, #12
}
    b756:	bd08      	pop	{r3, pc}
    b758:	20000e4c 	.word	0x20000e4c
    b75c:	00007075 	.word	0x00007075

0000b760 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b760:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    b762:	780b      	ldrb	r3, [r1, #0]
    b764:	2b81      	cmp	r3, #129	; 0x81
    b766:	d010      	beq.n	b78a <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b768:	f3c3 1341 	ubfx	r3, r3, #5, #2
    b76c:	2b01      	cmp	r3, #1
    b76e:	d13f      	bne.n	b7f0 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    b770:	888a      	ldrh	r2, [r1, #4]
    b772:	4b22      	ldr	r3, [pc, #136]	; (b7fc <hid_keyboard_req+0x9c>)
    b774:	7b1b      	ldrb	r3, [r3, #12]
    b776:	429a      	cmp	r2, r3
    b778:	d13d      	bne.n	b7f6 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    b77a:	784b      	ldrb	r3, [r1, #1]
    b77c:	2b03      	cmp	r3, #3
    b77e:	d028      	beq.n	b7d2 <hid_keyboard_req+0x72>
    b780:	2b0b      	cmp	r3, #11
    b782:	d02c      	beq.n	b7de <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    b784:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    b788:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    b78a:	784b      	ldrb	r3, [r1, #1]
    b78c:	2b06      	cmp	r3, #6
    b78e:	d002      	beq.n	b796 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    b790:	f06f 0009 	mvn.w	r0, #9
    b794:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    b796:	888a      	ldrh	r2, [r1, #4]
    b798:	4b18      	ldr	r3, [pc, #96]	; (b7fc <hid_keyboard_req+0x9c>)
    b79a:	7b1b      	ldrb	r3, [r3, #12]
    b79c:	429a      	cmp	r2, r3
    b79e:	d002      	beq.n	b7a6 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    b7a0:	f06f 0009 	mvn.w	r0, #9
    b7a4:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    b7a6:	884b      	ldrh	r3, [r1, #2]
    b7a8:	0a1b      	lsrs	r3, r3, #8
    b7aa:	2b21      	cmp	r3, #33	; 0x21
    b7ac:	d004      	beq.n	b7b8 <hid_keyboard_req+0x58>
    b7ae:	2b22      	cmp	r3, #34	; 0x22
    b7b0:	d009      	beq.n	b7c6 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    b7b2:	f06f 000c 	mvn.w	r0, #12
    b7b6:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    b7b8:	4b10      	ldr	r3, [pc, #64]	; (b7fc <hid_keyboard_req+0x9c>)
    b7ba:	6819      	ldr	r1, [r3, #0]
    b7bc:	2300      	movs	r3, #0
    b7be:	780a      	ldrb	r2, [r1, #0]
    b7c0:	4c0f      	ldr	r4, [pc, #60]	; (b800 <hid_keyboard_req+0xa0>)
    b7c2:	47a0      	blx	r4
    b7c4:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    b7c6:	2300      	movs	r3, #0
    b7c8:	223b      	movs	r2, #59	; 0x3b
    b7ca:	490e      	ldr	r1, [pc, #56]	; (b804 <hid_keyboard_req+0xa4>)
    b7cc:	4c0c      	ldr	r4, [pc, #48]	; (b800 <hid_keyboard_req+0xa0>)
    b7ce:	47a0      	blx	r4
    b7d0:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    b7d2:	2300      	movs	r3, #0
    b7d4:	2201      	movs	r2, #1
    b7d6:	490c      	ldr	r1, [pc, #48]	; (b808 <hid_keyboard_req+0xa8>)
    b7d8:	4c09      	ldr	r4, [pc, #36]	; (b800 <hid_keyboard_req+0xa0>)
    b7da:	47a0      	blx	r4
    b7dc:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    b7de:	884a      	ldrh	r2, [r1, #2]
    b7e0:	4b06      	ldr	r3, [pc, #24]	; (b7fc <hid_keyboard_req+0x9c>)
    b7e2:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    b7e4:	2300      	movs	r3, #0
    b7e6:	461a      	mov	r2, r3
    b7e8:	4619      	mov	r1, r3
    b7ea:	4c05      	ldr	r4, [pc, #20]	; (b800 <hid_keyboard_req+0xa0>)
    b7ec:	47a0      	blx	r4
    b7ee:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    b7f0:	f06f 0009 	mvn.w	r0, #9
    b7f4:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    b7f6:	f06f 0009 	mvn.w	r0, #9
    b7fa:	bd10      	pop	{r4, pc}
    b7fc:	20000e70 	.word	0x20000e70
    b800:	0000c0d5 	.word	0x0000c0d5
    b804:	0000f0ac 	.word	0x0000f0ac
    b808:	20000e7f 	.word	0x20000e7f

0000b80c <hid_keyboard_ctrl>:
{
    b80c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b810:	4614      	mov	r4, r2
	switch (ctrl) {
    b812:	2901      	cmp	r1, #1
    b814:	d050      	beq.n	b8b8 <hid_keyboard_ctrl+0xac>
    b816:	b141      	cbz	r1, b82a <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    b818:	2902      	cmp	r1, #2
    b81a:	bf0c      	ite	eq
    b81c:	f06f 051a 	mvneq.w	r5, #26
    b820:	f06f 050c 	mvnne.w	r5, #12
}
    b824:	4628      	mov	r0, r5
    b826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    b82a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    b82e:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    b830:	2b00      	cmp	r3, #0
    b832:	d05e      	beq.n	b8f2 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    b834:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    b836:	795b      	ldrb	r3, [r3, #5]
    b838:	2b03      	cmp	r3, #3
    b83a:	d15d      	bne.n	b8f8 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    b83c:	f898 300c 	ldrb.w	r3, [r8, #12]
    b840:	429a      	cmp	r2, r3
    b842:	d05c      	beq.n	b8fe <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    b844:	2bff      	cmp	r3, #255	; 0xff
    b846:	d15d      	bne.n	b904 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    b848:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    b84c:	6823      	ldr	r3, [r4, #0]
    b84e:	7818      	ldrb	r0, [r3, #0]
    b850:	2221      	movs	r2, #33	; 0x21
    b852:	6861      	ldr	r1, [r4, #4]
    b854:	4418      	add	r0, r3
    b856:	4b31      	ldr	r3, [pc, #196]	; (b91c <hid_keyboard_ctrl+0x110>)
    b858:	4798      	blx	r3
    b85a:	4b31      	ldr	r3, [pc, #196]	; (b920 <hid_keyboard_ctrl+0x114>)
    b85c:	6018      	str	r0, [r3, #0]
    b85e:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b860:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b928 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b864:	f8df a0c4 	ldr.w	sl, [pc, #196]	; b92c <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    b868:	f8df b0c4 	ldr.w	fp, [pc, #196]	; b930 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b86c:	6823      	ldr	r3, [r4, #0]
    b86e:	7818      	ldrb	r0, [r3, #0]
    b870:	6861      	ldr	r1, [r4, #4]
    b872:	4418      	add	r0, r3
    b874:	47c8      	blx	r9
		desc->sod = ep;
    b876:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    b878:	2800      	cmp	r0, #0
    b87a:	d046      	beq.n	b90a <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    b87c:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    b87e:	7943      	ldrb	r3, [r0, #5]
    b880:	7902      	ldrb	r2, [r0, #4]
    b882:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b886:	b292      	uxth	r2, r2
    b888:	78c1      	ldrb	r1, [r0, #3]
    b88a:	4638      	mov	r0, r7
    b88c:	47d0      	blx	sl
    b88e:	4605      	mov	r5, r0
    b890:	2800      	cmp	r0, #0
    b892:	d13d      	bne.n	b910 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b894:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    b898:	bf14      	ite	ne
    b89a:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b89e:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    b8a2:	4638      	mov	r0, r7
    b8a4:	47d8      	blx	fp
    b8a6:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    b8a8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    b8ac:	d1de      	bne.n	b86c <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    b8ae:	4b1c      	ldr	r3, [pc, #112]	; (b920 <hid_keyboard_ctrl+0x114>)
    b8b0:	2201      	movs	r2, #1
    b8b2:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    b8b4:	741a      	strb	r2, [r3, #16]
    b8b6:	e7b5      	b.n	b824 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    b8b8:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    b8ba:	b11a      	cbz	r2, b8c4 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b8bc:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    b8be:	795b      	ldrb	r3, [r3, #5]
    b8c0:	2b03      	cmp	r3, #3
    b8c2:	d128      	bne.n	b916 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    b8c4:	7b2b      	ldrb	r3, [r5, #12]
    b8c6:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    b8c8:	bf1c      	itt	ne
    b8ca:	23ff      	movne	r3, #255	; 0xff
    b8cc:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    b8ce:	7b68      	ldrb	r0, [r5, #13]
    b8d0:	28ff      	cmp	r0, #255	; 0xff
    b8d2:	d003      	beq.n	b8dc <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    b8d4:	4b13      	ldr	r3, [pc, #76]	; (b924 <hid_keyboard_ctrl+0x118>)
    b8d6:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    b8d8:	23ff      	movs	r3, #255	; 0xff
    b8da:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    b8dc:	7ba8      	ldrb	r0, [r5, #14]
    b8de:	28ff      	cmp	r0, #255	; 0xff
    b8e0:	d003      	beq.n	b8ea <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    b8e2:	4b10      	ldr	r3, [pc, #64]	; (b924 <hid_keyboard_ctrl+0x118>)
    b8e4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b8e6:	23ff      	movs	r3, #255	; 0xff
    b8e8:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    b8ea:	2500      	movs	r5, #0
    b8ec:	4b0c      	ldr	r3, [pc, #48]	; (b920 <hid_keyboard_ctrl+0x114>)
    b8ee:	741d      	strb	r5, [r3, #16]
    b8f0:	e798      	b.n	b824 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    b8f2:	f06f 0509 	mvn.w	r5, #9
    b8f6:	e795      	b.n	b824 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    b8f8:	f06f 0509 	mvn.w	r5, #9
    b8fc:	e792      	b.n	b824 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    b8fe:	f06f 0511 	mvn.w	r5, #17
    b902:	e78f      	b.n	b824 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    b904:	f06f 051b 	mvn.w	r5, #27
    b908:	e78c      	b.n	b824 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    b90a:	f06f 0509 	mvn.w	r5, #9
    b90e:	e789      	b.n	b824 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    b910:	f06f 0513 	mvn.w	r5, #19
    b914:	e786      	b.n	b824 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    b916:	f06f 0509 	mvn.w	r5, #9
    b91a:	e783      	b.n	b824 <hid_keyboard_ctrl+0x18>
    b91c:	0000c619 	.word	0x0000c619
    b920:	20000e70 	.word	0x20000e70
    b924:	00006e75 	.word	0x00006e75
    b928:	0000c653 	.word	0x0000c653
    b92c:	00006e0d 	.word	0x00006e0d
    b930:	00006ea1 	.word	0x00006ea1

0000b934 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    b934:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    b936:	4b0a      	ldr	r3, [pc, #40]	; (b960 <hiddf_keyboard_init+0x2c>)
    b938:	4798      	blx	r3
    b93a:	2801      	cmp	r0, #1
    b93c:	d80c      	bhi.n	b958 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    b93e:	4809      	ldr	r0, [pc, #36]	; (b964 <hiddf_keyboard_init+0x30>)
    b940:	4b09      	ldr	r3, [pc, #36]	; (b968 <hiddf_keyboard_init+0x34>)
    b942:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    b944:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    b946:	3014      	adds	r0, #20
    b948:	4b08      	ldr	r3, [pc, #32]	; (b96c <hiddf_keyboard_init+0x38>)
    b94a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    b94c:	4908      	ldr	r1, [pc, #32]	; (b970 <hiddf_keyboard_init+0x3c>)
    b94e:	2001      	movs	r0, #1
    b950:	4b08      	ldr	r3, [pc, #32]	; (b974 <hiddf_keyboard_init+0x40>)
    b952:	4798      	blx	r3
	return ERR_NONE;
    b954:	2000      	movs	r0, #0
    b956:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b958:	f06f 0010 	mvn.w	r0, #16
}
    b95c:	bd08      	pop	{r3, pc}
    b95e:	bf00      	nop
    b960:	0000c605 	.word	0x0000c605
    b964:	20000e70 	.word	0x20000e70
    b968:	0000b80d 	.word	0x0000b80d
    b96c:	0000c5a5 	.word	0x0000c5a5
    b970:	20000390 	.word	0x20000390
    b974:	0000c511 	.word	0x0000c511

0000b978 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    b978:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    b97a:	4b26      	ldr	r3, [pc, #152]	; (ba14 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    b97c:	7c1b      	ldrb	r3, [r3, #16]
    b97e:	2b00      	cmp	r3, #0
    b980:	d045      	beq.n	ba0e <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    b982:	4a24      	ldr	r2, [pc, #144]	; (ba14 <hiddf_keyboard_keys_state_change+0x9c>)
    b984:	2300      	movs	r3, #0
    b986:	6053      	str	r3, [r2, #4]
    b988:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    b98a:	b329      	cbz	r1, b9d8 <hiddf_keyboard_keys_state_change+0x60>
    b98c:	4603      	mov	r3, r0
    b98e:	1e4d      	subs	r5, r1, #1
    b990:	b2ed      	uxtb	r5, r5
    b992:	3501      	adds	r5, #1
    b994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    b998:	4405      	add	r5, r0
    b99a:	2200      	movs	r2, #0
    b99c:	e002      	b.n	b9a4 <hiddf_keyboard_keys_state_change+0x2c>
    b99e:	3303      	adds	r3, #3
    b9a0:	42ab      	cmp	r3, r5
    b9a2:	d005      	beq.n	b9b0 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    b9a4:	785c      	ldrb	r4, [r3, #1]
    b9a6:	2c00      	cmp	r4, #0
    b9a8:	d0f9      	beq.n	b99e <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    b9aa:	3201      	adds	r2, #1
    b9ac:	b2d2      	uxtb	r2, r2
    b9ae:	e7f6      	b.n	b99e <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    b9b0:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    b9b2:	b2d2      	uxtb	r2, r2
    b9b4:	2a06      	cmp	r2, #6
    b9b6:	d809      	bhi.n	b9cc <hiddf_keyboard_keys_state_change+0x54>
    b9b8:	4603      	mov	r3, r0
    b9ba:	1e4a      	subs	r2, r1, #1
    b9bc:	b2d2      	uxtb	r2, r2
    b9be:	3201      	adds	r2, #1
    b9c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b9c4:	4410      	add	r0, r2
    b9c6:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    b9c8:	4d12      	ldr	r5, [pc, #72]	; (ba14 <hiddf_keyboard_keys_state_change+0x9c>)
    b9ca:	e015      	b.n	b9f8 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    b9cc:	4b11      	ldr	r3, [pc, #68]	; (ba14 <hiddf_keyboard_keys_state_change+0x9c>)
    b9ce:	f04f 32ff 	mov.w	r2, #4294967295
    b9d2:	f8c3 2006 	str.w	r2, [r3, #6]
    b9d6:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    b9d8:	480e      	ldr	r0, [pc, #56]	; (ba14 <hiddf_keyboard_keys_state_change+0x9c>)
    b9da:	2300      	movs	r3, #0
    b9dc:	2208      	movs	r2, #8
    b9de:	1d01      	adds	r1, r0, #4
    b9e0:	7b40      	ldrb	r0, [r0, #13]
    b9e2:	4c0d      	ldr	r4, [pc, #52]	; (ba18 <hiddf_keyboard_keys_state_change+0xa0>)
    b9e4:	47a0      	blx	r4
    b9e6:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    b9e8:	1c62      	adds	r2, r4, #1
    b9ea:	7819      	ldrb	r1, [r3, #0]
    b9ec:	442c      	add	r4, r5
    b9ee:	7121      	strb	r1, [r4, #4]
    b9f0:	b2d4      	uxtb	r4, r2
    b9f2:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    b9f4:	4283      	cmp	r3, r0
    b9f6:	d0ef      	beq.n	b9d8 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    b9f8:	789a      	ldrb	r2, [r3, #2]
    b9fa:	2a01      	cmp	r2, #1
    b9fc:	d1f9      	bne.n	b9f2 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    b9fe:	785a      	ldrb	r2, [r3, #1]
    ba00:	2a00      	cmp	r2, #0
    ba02:	d0f1      	beq.n	b9e8 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    ba04:	792a      	ldrb	r2, [r5, #4]
    ba06:	7819      	ldrb	r1, [r3, #0]
    ba08:	430a      	orrs	r2, r1
    ba0a:	712a      	strb	r2, [r5, #4]
    ba0c:	e7f1      	b.n	b9f2 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    ba0e:	f06f 0010 	mvn.w	r0, #16
}
    ba12:	bd38      	pop	{r3, r4, r5, pc}
    ba14:	20000e70 	.word	0x20000e70
    ba18:	0000c0d5 	.word	0x0000c0d5

0000ba1c <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ba1c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    ba1e:	780b      	ldrb	r3, [r1, #0]
    ba20:	2b81      	cmp	r3, #129	; 0x81
    ba22:	d010      	beq.n	ba46 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ba24:	f3c3 1341 	ubfx	r3, r3, #5, #2
    ba28:	2b01      	cmp	r3, #1
    ba2a:	d13f      	bne.n	baac <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    ba2c:	888a      	ldrh	r2, [r1, #4]
    ba2e:	4b22      	ldr	r3, [pc, #136]	; (bab8 <hid_mouse_req+0x9c>)
    ba30:	7a1b      	ldrb	r3, [r3, #8]
    ba32:	429a      	cmp	r2, r3
    ba34:	d13d      	bne.n	bab2 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    ba36:	784b      	ldrb	r3, [r1, #1]
    ba38:	2b03      	cmp	r3, #3
    ba3a:	d028      	beq.n	ba8e <hid_mouse_req+0x72>
    ba3c:	2b0b      	cmp	r3, #11
    ba3e:	d02c      	beq.n	ba9a <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    ba40:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    ba44:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    ba46:	784b      	ldrb	r3, [r1, #1]
    ba48:	2b06      	cmp	r3, #6
    ba4a:	d002      	beq.n	ba52 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    ba4c:	f06f 0009 	mvn.w	r0, #9
    ba50:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    ba52:	888a      	ldrh	r2, [r1, #4]
    ba54:	4b18      	ldr	r3, [pc, #96]	; (bab8 <hid_mouse_req+0x9c>)
    ba56:	7a1b      	ldrb	r3, [r3, #8]
    ba58:	429a      	cmp	r2, r3
    ba5a:	d002      	beq.n	ba62 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    ba5c:	f06f 0009 	mvn.w	r0, #9
    ba60:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    ba62:	884b      	ldrh	r3, [r1, #2]
    ba64:	0a1b      	lsrs	r3, r3, #8
    ba66:	2b21      	cmp	r3, #33	; 0x21
    ba68:	d004      	beq.n	ba74 <hid_mouse_req+0x58>
    ba6a:	2b22      	cmp	r3, #34	; 0x22
    ba6c:	d009      	beq.n	ba82 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    ba6e:	f06f 000c 	mvn.w	r0, #12
    ba72:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    ba74:	4b10      	ldr	r3, [pc, #64]	; (bab8 <hid_mouse_req+0x9c>)
    ba76:	6819      	ldr	r1, [r3, #0]
    ba78:	2300      	movs	r3, #0
    ba7a:	780a      	ldrb	r2, [r1, #0]
    ba7c:	4c0f      	ldr	r4, [pc, #60]	; (babc <hid_mouse_req+0xa0>)
    ba7e:	47a0      	blx	r4
    ba80:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    ba82:	2300      	movs	r3, #0
    ba84:	2234      	movs	r2, #52	; 0x34
    ba86:	490e      	ldr	r1, [pc, #56]	; (bac0 <hid_mouse_req+0xa4>)
    ba88:	4c0c      	ldr	r4, [pc, #48]	; (babc <hid_mouse_req+0xa0>)
    ba8a:	47a0      	blx	r4
    ba8c:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    ba8e:	2300      	movs	r3, #0
    ba90:	2201      	movs	r2, #1
    ba92:	490c      	ldr	r1, [pc, #48]	; (bac4 <hid_mouse_req+0xa8>)
    ba94:	4c09      	ldr	r4, [pc, #36]	; (babc <hid_mouse_req+0xa0>)
    ba96:	47a0      	blx	r4
    ba98:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    ba9a:	884a      	ldrh	r2, [r1, #2]
    ba9c:	4b06      	ldr	r3, [pc, #24]	; (bab8 <hid_mouse_req+0x9c>)
    ba9e:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    baa0:	2300      	movs	r3, #0
    baa2:	461a      	mov	r2, r3
    baa4:	4619      	mov	r1, r3
    baa6:	4c05      	ldr	r4, [pc, #20]	; (babc <hid_mouse_req+0xa0>)
    baa8:	47a0      	blx	r4
    baaa:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    baac:	f06f 0009 	mvn.w	r0, #9
    bab0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    bab2:	f06f 0009 	mvn.w	r0, #9
    bab6:	bd10      	pop	{r4, pc}
    bab8:	20000e90 	.word	0x20000e90
    babc:	0000c0d5 	.word	0x0000c0d5
    bac0:	0000f0e8 	.word	0x0000f0e8
    bac4:	20000e9a 	.word	0x20000e9a

0000bac8 <hid_mouse_ctrl>:
{
    bac8:	b570      	push	{r4, r5, r6, lr}
    baca:	4614      	mov	r4, r2
	switch (ctrl) {
    bacc:	2901      	cmp	r1, #1
    bace:	d040      	beq.n	bb52 <hid_mouse_ctrl+0x8a>
    bad0:	b139      	cbz	r1, bae2 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    bad2:	2902      	cmp	r1, #2
    bad4:	bf0c      	ite	eq
    bad6:	f06f 041a 	mvneq.w	r4, #26
    bada:	f06f 040c 	mvnne.w	r4, #12
}
    bade:	4620      	mov	r0, r4
    bae0:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    bae2:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    bae4:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    bae6:	2b00      	cmp	r3, #0
    bae8:	d049      	beq.n	bb7e <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    baea:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    baec:	795b      	ldrb	r3, [r3, #5]
    baee:	2b03      	cmp	r3, #3
    baf0:	d148      	bne.n	bb84 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    baf2:	7a2b      	ldrb	r3, [r5, #8]
    baf4:	429a      	cmp	r2, r3
    baf6:	d048      	beq.n	bb8a <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    baf8:	2bff      	cmp	r3, #255	; 0xff
    bafa:	d149      	bne.n	bb90 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    bafc:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    bafe:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    bb00:	7818      	ldrb	r0, [r3, #0]
    bb02:	2221      	movs	r2, #33	; 0x21
    bb04:	6861      	ldr	r1, [r4, #4]
    bb06:	4418      	add	r0, r3
    bb08:	4b29      	ldr	r3, [pc, #164]	; (bbb0 <hid_mouse_ctrl+0xe8>)
    bb0a:	4798      	blx	r3
    bb0c:	4b29      	ldr	r3, [pc, #164]	; (bbb4 <hid_mouse_ctrl+0xec>)
    bb0e:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bb10:	6823      	ldr	r3, [r4, #0]
    bb12:	7818      	ldrb	r0, [r3, #0]
    bb14:	6861      	ldr	r1, [r4, #4]
    bb16:	4418      	add	r0, r3
    bb18:	4b27      	ldr	r3, [pc, #156]	; (bbb8 <hid_mouse_ctrl+0xf0>)
    bb1a:	4798      	blx	r3
	desc->sod = ep;
    bb1c:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    bb1e:	2800      	cmp	r0, #0
    bb20:	d039      	beq.n	bb96 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    bb22:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    bb24:	7943      	ldrb	r3, [r0, #5]
    bb26:	7902      	ldrb	r2, [r0, #4]
    bb28:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bb2c:	b292      	uxth	r2, r2
    bb2e:	78c1      	ldrb	r1, [r0, #3]
    bb30:	4630      	mov	r0, r6
    bb32:	4b22      	ldr	r3, [pc, #136]	; (bbbc <hid_mouse_ctrl+0xf4>)
    bb34:	4798      	blx	r3
    bb36:	4604      	mov	r4, r0
    bb38:	bb80      	cbnz	r0, bb9c <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bb3a:	f016 0f80 	tst.w	r6, #128	; 0x80
    bb3e:	d030      	beq.n	bba2 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    bb40:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    bb42:	4630      	mov	r0, r6
    bb44:	4b1e      	ldr	r3, [pc, #120]	; (bbc0 <hid_mouse_ctrl+0xf8>)
    bb46:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    bb48:	4b1a      	ldr	r3, [pc, #104]	; (bbb4 <hid_mouse_ctrl+0xec>)
    bb4a:	2201      	movs	r2, #1
    bb4c:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    bb4e:	72da      	strb	r2, [r3, #11]
    bb50:	e7c5      	b.n	bade <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    bb52:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    bb54:	b11a      	cbz	r2, bb5e <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bb56:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    bb58:	795b      	ldrb	r3, [r3, #5]
    bb5a:	2b03      	cmp	r3, #3
    bb5c:	d124      	bne.n	bba8 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    bb5e:	7a2b      	ldrb	r3, [r5, #8]
    bb60:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    bb62:	bf1c      	itt	ne
    bb64:	23ff      	movne	r3, #255	; 0xff
    bb66:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    bb68:	7a68      	ldrb	r0, [r5, #9]
    bb6a:	28ff      	cmp	r0, #255	; 0xff
    bb6c:	d003      	beq.n	bb76 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    bb6e:	4b15      	ldr	r3, [pc, #84]	; (bbc4 <hid_mouse_ctrl+0xfc>)
    bb70:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    bb72:	23ff      	movs	r3, #255	; 0xff
    bb74:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    bb76:	2400      	movs	r4, #0
    bb78:	4b0e      	ldr	r3, [pc, #56]	; (bbb4 <hid_mouse_ctrl+0xec>)
    bb7a:	72dc      	strb	r4, [r3, #11]
    bb7c:	e7af      	b.n	bade <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    bb7e:	f06f 0409 	mvn.w	r4, #9
    bb82:	e7ac      	b.n	bade <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    bb84:	f06f 0409 	mvn.w	r4, #9
    bb88:	e7a9      	b.n	bade <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    bb8a:	f06f 0411 	mvn.w	r4, #17
    bb8e:	e7a6      	b.n	bade <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    bb90:	f06f 041b 	mvn.w	r4, #27
    bb94:	e7a3      	b.n	bade <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    bb96:	f06f 0409 	mvn.w	r4, #9
    bb9a:	e7a0      	b.n	bade <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    bb9c:	f06f 0413 	mvn.w	r4, #19
    bba0:	e79d      	b.n	bade <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    bba2:	f04f 34ff 	mov.w	r4, #4294967295
    bba6:	e79a      	b.n	bade <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    bba8:	f06f 0409 	mvn.w	r4, #9
    bbac:	e797      	b.n	bade <hid_mouse_ctrl+0x16>
    bbae:	bf00      	nop
    bbb0:	0000c619 	.word	0x0000c619
    bbb4:	20000e90 	.word	0x20000e90
    bbb8:	0000c653 	.word	0x0000c653
    bbbc:	00006e0d 	.word	0x00006e0d
    bbc0:	00006ea1 	.word	0x00006ea1
    bbc4:	00006e75 	.word	0x00006e75

0000bbc8 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    bbc8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    bbca:	4b0a      	ldr	r3, [pc, #40]	; (bbf4 <hiddf_mouse_init+0x2c>)
    bbcc:	4798      	blx	r3
    bbce:	2801      	cmp	r0, #1
    bbd0:	d80c      	bhi.n	bbec <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    bbd2:	4809      	ldr	r0, [pc, #36]	; (bbf8 <hiddf_mouse_init+0x30>)
    bbd4:	4b09      	ldr	r3, [pc, #36]	; (bbfc <hiddf_mouse_init+0x34>)
    bbd6:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    bbd8:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    bbda:	300c      	adds	r0, #12
    bbdc:	4b08      	ldr	r3, [pc, #32]	; (bc00 <hiddf_mouse_init+0x38>)
    bbde:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    bbe0:	4908      	ldr	r1, [pc, #32]	; (bc04 <hiddf_mouse_init+0x3c>)
    bbe2:	2001      	movs	r0, #1
    bbe4:	4b08      	ldr	r3, [pc, #32]	; (bc08 <hiddf_mouse_init+0x40>)
    bbe6:	4798      	blx	r3
	return ERR_NONE;
    bbe8:	2000      	movs	r0, #0
    bbea:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    bbec:	f06f 0010 	mvn.w	r0, #16
}
    bbf0:	bd08      	pop	{r3, pc}
    bbf2:	bf00      	nop
    bbf4:	0000c605 	.word	0x0000c605
    bbf8:	20000e90 	.word	0x20000e90
    bbfc:	0000bac9 	.word	0x0000bac9
    bc00:	0000c5a5 	.word	0x0000c5a5
    bc04:	20000398 	.word	0x20000398
    bc08:	0000c511 	.word	0x0000c511

0000bc0c <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    bc0c:	2200      	movs	r2, #0
    bc0e:	4b0d      	ldr	r3, [pc, #52]	; (bc44 <hiddf_mouse_move+0x38>)
    bc10:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    bc12:	2901      	cmp	r1, #1
    bc14:	d00e      	beq.n	bc34 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    bc16:	2902      	cmp	r1, #2
    bc18:	d00e      	beq.n	bc38 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    bc1a:	2903      	cmp	r1, #3
    bc1c:	d10f      	bne.n	bc3e <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    bc1e:	4b09      	ldr	r3, [pc, #36]	; (bc44 <hiddf_mouse_move+0x38>)
    bc20:	71d8      	strb	r0, [r3, #7]
{
    bc22:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    bc24:	4807      	ldr	r0, [pc, #28]	; (bc44 <hiddf_mouse_move+0x38>)
    bc26:	2300      	movs	r3, #0
    bc28:	2204      	movs	r2, #4
    bc2a:	1881      	adds	r1, r0, r2
    bc2c:	7a40      	ldrb	r0, [r0, #9]
    bc2e:	4c06      	ldr	r4, [pc, #24]	; (bc48 <hiddf_mouse_move+0x3c>)
    bc30:	47a0      	blx	r4
    bc32:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    bc34:	7158      	strb	r0, [r3, #5]
    bc36:	e7f4      	b.n	bc22 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    bc38:	4b02      	ldr	r3, [pc, #8]	; (bc44 <hiddf_mouse_move+0x38>)
    bc3a:	7198      	strb	r0, [r3, #6]
    bc3c:	e7f1      	b.n	bc22 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    bc3e:	f06f 000c 	mvn.w	r0, #12
    bc42:	4770      	bx	lr
    bc44:	20000e90 	.word	0x20000e90
    bc48:	0000c0d5 	.word	0x0000c0d5

0000bc4c <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bc4c:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    bc4e:	780b      	ldrb	r3, [r1, #0]
    bc50:	2b81      	cmp	r3, #129	; 0x81
    bc52:	d014      	beq.n	bc7e <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bc54:	f3c3 1341 	ubfx	r3, r3, #5, #2
    bc58:	2b01      	cmp	r3, #1
    bc5a:	d132      	bne.n	bcc2 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    bc5c:	888b      	ldrh	r3, [r1, #4]
    bc5e:	4a1c      	ldr	r2, [pc, #112]	; (bcd0 <audio_midi_req+0x84>)
    bc60:	7912      	ldrb	r2, [r2, #4]
    bc62:	429a      	cmp	r2, r3
    bc64:	d003      	beq.n	bc6e <audio_midi_req+0x22>
    bc66:	4a1a      	ldr	r2, [pc, #104]	; (bcd0 <audio_midi_req+0x84>)
    bc68:	7952      	ldrb	r2, [r2, #5]
    bc6a:	429a      	cmp	r2, r3
    bc6c:	d12c      	bne.n	bcc8 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    bc6e:	784b      	ldrb	r3, [r1, #1]
    bc70:	2b03      	cmp	r3, #3
    bc72:	d017      	beq.n	bca4 <audio_midi_req+0x58>
    bc74:	2b0b      	cmp	r3, #11
    bc76:	d01b      	beq.n	bcb0 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    bc78:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    bc7c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    bc7e:	888b      	ldrh	r3, [r1, #4]
    bc80:	4a13      	ldr	r2, [pc, #76]	; (bcd0 <audio_midi_req+0x84>)
    bc82:	7912      	ldrb	r2, [r2, #4]
    bc84:	429a      	cmp	r2, r3
    bc86:	d006      	beq.n	bc96 <audio_midi_req+0x4a>
    bc88:	4a11      	ldr	r2, [pc, #68]	; (bcd0 <audio_midi_req+0x84>)
    bc8a:	7952      	ldrb	r2, [r2, #5]
    bc8c:	429a      	cmp	r2, r3
    bc8e:	d002      	beq.n	bc96 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    bc90:	f06f 0009 	mvn.w	r0, #9
    bc94:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    bc96:	4b0e      	ldr	r3, [pc, #56]	; (bcd0 <audio_midi_req+0x84>)
    bc98:	6819      	ldr	r1, [r3, #0]
    bc9a:	2300      	movs	r3, #0
    bc9c:	780a      	ldrb	r2, [r1, #0]
    bc9e:	4c0d      	ldr	r4, [pc, #52]	; (bcd4 <audio_midi_req+0x88>)
    bca0:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    bca2:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    bca4:	2300      	movs	r3, #0
    bca6:	2201      	movs	r2, #1
    bca8:	490b      	ldr	r1, [pc, #44]	; (bcd8 <audio_midi_req+0x8c>)
    bcaa:	4c0a      	ldr	r4, [pc, #40]	; (bcd4 <audio_midi_req+0x88>)
    bcac:	47a0      	blx	r4
    bcae:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    bcb0:	884a      	ldrh	r2, [r1, #2]
    bcb2:	4b07      	ldr	r3, [pc, #28]	; (bcd0 <audio_midi_req+0x84>)
    bcb4:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    bcb6:	2300      	movs	r3, #0
    bcb8:	461a      	mov	r2, r3
    bcba:	4619      	mov	r1, r3
    bcbc:	4c05      	ldr	r4, [pc, #20]	; (bcd4 <audio_midi_req+0x88>)
    bcbe:	47a0      	blx	r4
    bcc0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    bcc2:	f06f 0009 	mvn.w	r0, #9
    bcc6:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    bcc8:	f06f 0009 	mvn.w	r0, #9
    bccc:	bd10      	pop	{r4, pc}
    bcce:	bf00      	nop
    bcd0:	20000ea8 	.word	0x20000ea8
    bcd4:	0000c0d5 	.word	0x0000c0d5
    bcd8:	20000eb0 	.word	0x20000eb0

0000bcdc <audio_midi_ctrl>:
{
    bcdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bce0:	b083      	sub	sp, #12
    bce2:	4615      	mov	r5, r2
	switch (ctrl) {
    bce4:	2901      	cmp	r1, #1
    bce6:	d07e      	beq.n	bde6 <audio_midi_ctrl+0x10a>
    bce8:	b141      	cbz	r1, bcfc <audio_midi_ctrl+0x20>
		return ERR_INVALID_ARG;
    bcea:	2902      	cmp	r1, #2
    bcec:	bf0c      	ite	eq
    bcee:	f06f 001a 	mvneq.w	r0, #26
    bcf2:	f06f 000c 	mvnne.w	r0, #12
}
    bcf6:	b003      	add	sp, #12
    bcf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    bcfc:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    bd00:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    bd02:	2800      	cmp	r0, #0
    bd04:	f000 8096 	beq.w	be34 <audio_midi_ctrl+0x158>
    bd08:	f109 0604 	add.w	r6, r9, #4
    bd0c:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    bd0e:	f04f 0804 	mov.w	r8, #4
    bd12:	4f54      	ldr	r7, [pc, #336]	; (be64 <audio_midi_ctrl+0x188>)
    bd14:	e018      	b.n	bd48 <audio_midi_ctrl+0x6c>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bd16:	f816 3b01 	ldrb.w	r3, [r6], #1
    bd1a:	429a      	cmp	r2, r3
    bd1c:	f000 8090 	beq.w	be40 <audio_midi_ctrl+0x164>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bd20:	2bff      	cmp	r3, #255	; 0xff
    bd22:	f040 8090 	bne.w	be46 <audio_midi_ctrl+0x16a>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bd26:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    bd2a:	2c01      	cmp	r4, #1
    bd2c:	d015      	beq.n	bd5a <audio_midi_ctrl+0x7e>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    bd2e:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    bd30:	7818      	ldrb	r0, [r3, #0]
    bd32:	4642      	mov	r2, r8
    bd34:	6869      	ldr	r1, [r5, #4]
    bd36:	4418      	add	r0, r3
    bd38:	47b8      	blx	r7
    bd3a:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    bd3c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    bd40:	f000 808b 	beq.w	be5a <audio_midi_ctrl+0x17e>
		if (NULL == ifc) {
    bd44:	2800      	cmp	r0, #0
    bd46:	d078      	beq.n	be3a <audio_midi_ctrl+0x15e>
		ifc_desc.bInterfaceNumber = ifc[2];
    bd48:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    bd4a:	7943      	ldrb	r3, [r0, #5]
    bd4c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    bd50:	2b01      	cmp	r3, #1
    bd52:	d0e0      	beq.n	bd16 <audio_midi_ctrl+0x3a>
			return ERR_NOT_FOUND;
    bd54:	f06f 0009 	mvn.w	r0, #9
    bd58:	e7cd      	b.n	bcf6 <audio_midi_ctrl+0x1a>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bd5a:	2205      	movs	r2, #5
    bd5c:	6869      	ldr	r1, [r5, #4]
    bd5e:	4b41      	ldr	r3, [pc, #260]	; (be64 <audio_midi_ctrl+0x188>)
    bd60:	4798      	blx	r3
    bd62:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    bd64:	4e40      	ldr	r6, [pc, #256]	; (be68 <audio_midi_ctrl+0x18c>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bd66:	f8df 8114 	ldr.w	r8, [pc, #276]	; be7c <audio_midi_ctrl+0x1a0>
					usb_d_ep_enable(func_data->func_ep_out);
    bd6a:	4f40      	ldr	r7, [pc, #256]	; (be6c <audio_midi_ctrl+0x190>)
			while (NULL != ep) {
    bd6c:	2c00      	cmp	r4, #0
    bd6e:	d06d      	beq.n	be4c <audio_midi_ctrl+0x170>
				ep_desc.bEndpointAddress = ep[2];
    bd70:	78a3      	ldrb	r3, [r4, #2]
    bd72:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    bd76:	78e3      	ldrb	r3, [r4, #3]
    bd78:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    bd7c:	7962      	ldrb	r2, [r4, #5]
    bd7e:	7923      	ldrb	r3, [r4, #4]
    bd80:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    bd84:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bd86:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    bd8a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    bd8e:	b2db      	uxtb	r3, r3
    bd90:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    bd92:	2301      	movs	r3, #1
    bd94:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bd96:	f89d 0002 	ldrb.w	r0, [sp, #2]
    bd9a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    bd9e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    bda2:	b292      	uxth	r2, r2
    bda4:	47c0      	blx	r8
    bda6:	b2c0      	uxtb	r0, r0
    bda8:	7170      	strb	r0, [r6, #5]
    bdaa:	b9a0      	cbnz	r0, bdd6 <audio_midi_ctrl+0xfa>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bdac:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bdb0:	f013 0f80 	tst.w	r3, #128	; 0x80
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    bdb4:	f89d 0002 	ldrb.w	r0, [sp, #2]
    bdb8:	b2c0      	uxtb	r0, r0
    bdba:	bf14      	ite	ne
    bdbc:	f889 0006 	strbne.w	r0, [r9, #6]
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    bdc0:	f889 0007 	strbeq.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    bdc4:	47b8      	blx	r7
				desc->sod = ep;
    bdc6:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
    bdc8:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bdca:	6869      	ldr	r1, [r5, #4]
    bdcc:	4420      	add	r0, r4
    bdce:	4b28      	ldr	r3, [pc, #160]	; (be70 <audio_midi_ctrl+0x194>)
    bdd0:	4798      	blx	r3
    bdd2:	4604      	mov	r4, r0
    bdd4:	e7ca      	b.n	bd6c <audio_midi_ctrl+0x90>
					usb_debug2[6] = - usb_debug2[5];
    bdd6:	4a24      	ldr	r2, [pc, #144]	; (be68 <audio_midi_ctrl+0x18c>)
    bdd8:	7953      	ldrb	r3, [r2, #5]
    bdda:	425b      	negs	r3, r3
    bddc:	b2db      	uxtb	r3, r3
    bdde:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    bde0:	f06f 0013 	mvn.w	r0, #19
    bde4:	e787      	b.n	bcf6 <audio_midi_ctrl+0x1a>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    bde6:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    bde8:	b142      	cbz	r2, bdfc <audio_midi_ctrl+0x120>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bdea:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    bdec:	795b      	ldrb	r3, [r3, #5]
    bdee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    bdf2:	2b01      	cmp	r3, #1
    bdf4:	d002      	beq.n	bdfc <audio_midi_ctrl+0x120>
			return ERR_NOT_FOUND;
    bdf6:	f06f 0009 	mvn.w	r0, #9
    bdfa:	e77c      	b.n	bcf6 <audio_midi_ctrl+0x1a>
	if (func_data->func_iface[0] != 0xFF) {
    bdfc:	7923      	ldrb	r3, [r4, #4]
    bdfe:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    be00:	bf1c      	itt	ne
    be02:	23ff      	movne	r3, #255	; 0xff
    be04:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    be06:	7963      	ldrb	r3, [r4, #5]
    be08:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    be0a:	bf1c      	itt	ne
    be0c:	23ff      	movne	r3, #255	; 0xff
    be0e:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    be10:	79a0      	ldrb	r0, [r4, #6]
    be12:	28ff      	cmp	r0, #255	; 0xff
    be14:	d003      	beq.n	be1e <audio_midi_ctrl+0x142>
		usb_d_ep_deinit(func_data->func_ep_in);
    be16:	4b17      	ldr	r3, [pc, #92]	; (be74 <audio_midi_ctrl+0x198>)
    be18:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    be1a:	23ff      	movs	r3, #255	; 0xff
    be1c:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    be1e:	79e0      	ldrb	r0, [r4, #7]
    be20:	28ff      	cmp	r0, #255	; 0xff
    be22:	d003      	beq.n	be2c <audio_midi_ctrl+0x150>
		usb_d_ep_deinit(func_data->func_ep_out);
    be24:	4b13      	ldr	r3, [pc, #76]	; (be74 <audio_midi_ctrl+0x198>)
    be26:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    be28:	23ff      	movs	r3, #255	; 0xff
    be2a:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    be2c:	2000      	movs	r0, #0
    be2e:	4b12      	ldr	r3, [pc, #72]	; (be78 <audio_midi_ctrl+0x19c>)
    be30:	7358      	strb	r0, [r3, #13]
    be32:	e760      	b.n	bcf6 <audio_midi_ctrl+0x1a>
			return ERR_NOT_FOUND;
    be34:	f06f 0009 	mvn.w	r0, #9
    be38:	e75d      	b.n	bcf6 <audio_midi_ctrl+0x1a>
    be3a:	f06f 0009 	mvn.w	r0, #9
    be3e:	e75a      	b.n	bcf6 <audio_midi_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    be40:	f06f 0011 	mvn.w	r0, #17
    be44:	e757      	b.n	bcf6 <audio_midi_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    be46:	f06f 001b 	mvn.w	r0, #27
    be4a:	e754      	b.n	bcf6 <audio_midi_ctrl+0x1a>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    be4c:	682b      	ldr	r3, [r5, #0]
    be4e:	7818      	ldrb	r0, [r3, #0]
    be50:	2204      	movs	r2, #4
    be52:	6869      	ldr	r1, [r5, #4]
    be54:	4418      	add	r0, r3
    be56:	4b03      	ldr	r3, [pc, #12]	; (be64 <audio_midi_ctrl+0x188>)
    be58:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    be5a:	2201      	movs	r2, #1
    be5c:	4b06      	ldr	r3, [pc, #24]	; (be78 <audio_midi_ctrl+0x19c>)
    be5e:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    be60:	2000      	movs	r0, #0
    be62:	e748      	b.n	bcf6 <audio_midi_ctrl+0x1a>
    be64:	0000c619 	.word	0x0000c619
    be68:	20007d80 	.word	0x20007d80
    be6c:	00006ea1 	.word	0x00006ea1
    be70:	0000c653 	.word	0x0000c653
    be74:	00006e75 	.word	0x00006e75
    be78:	20000ea8 	.word	0x20000ea8
    be7c:	00006e0d 	.word	0x00006e0d

0000be80 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    be80:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    be82:	4b0a      	ldr	r3, [pc, #40]	; (beac <audiodf_midi_init+0x2c>)
    be84:	4798      	blx	r3
    be86:	2801      	cmp	r0, #1
    be88:	d80c      	bhi.n	bea4 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    be8a:	4809      	ldr	r0, [pc, #36]	; (beb0 <audiodf_midi_init+0x30>)
    be8c:	4b09      	ldr	r3, [pc, #36]	; (beb4 <audiodf_midi_init+0x34>)
    be8e:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    be90:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    be92:	3010      	adds	r0, #16
    be94:	4b08      	ldr	r3, [pc, #32]	; (beb8 <audiodf_midi_init+0x38>)
    be96:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    be98:	4908      	ldr	r1, [pc, #32]	; (bebc <audiodf_midi_init+0x3c>)
    be9a:	2001      	movs	r0, #1
    be9c:	4b08      	ldr	r3, [pc, #32]	; (bec0 <audiodf_midi_init+0x40>)
    be9e:	4798      	blx	r3
	return ERR_NONE;
    bea0:	2000      	movs	r0, #0
    bea2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    bea4:	f06f 0010 	mvn.w	r0, #16
}
    bea8:	bd08      	pop	{r3, pc}
    beaa:	bf00      	nop
    beac:	0000c605 	.word	0x0000c605
    beb0:	20000ea8 	.word	0x20000ea8
    beb4:	0000bcdd 	.word	0x0000bcdd
    beb8:	0000c5a5 	.word	0x0000c5a5
    bebc:	200003a0 	.word	0x200003a0
    bec0:	0000c511 	.word	0x0000c511

0000bec4 <audiodf_midi_write>:
}



int32_t audiodf_midi_write(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    bec4:	b510      	push	{r4, lr}
	if (!audiodf_midi_is_enabled()) {
		return ERR_DENIED;
	}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    bec6:	4c06      	ldr	r4, [pc, #24]	; (bee0 <audiodf_midi_write+0x1c>)
    bec8:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    beca:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    becc:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    bece:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    bed0:	2300      	movs	r3, #0
    bed2:	2204      	movs	r2, #4
    bed4:	f104 0109 	add.w	r1, r4, #9
    bed8:	79a0      	ldrb	r0, [r4, #6]
    beda:	4c02      	ldr	r4, [pc, #8]	; (bee4 <audiodf_midi_write+0x20>)
    bedc:	47a0      	blx	r4
	
	
}
    bede:	bd10      	pop	{r4, pc}
    bee0:	20000ea8 	.word	0x20000ea8
    bee4:	0000c0d5 	.word	0x0000c0d5

0000bee8 <audiodf_midi_read>:




int32_t audiodf_midi_read(uint8_t *buf, uint32_t size)
{
    bee8:	b510      	push	{r4, lr}
	if (!audiodf_midi_is_enabled()) {
		return ERR_DENIED;
	}
		
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_out, buf, size, false);
    beea:	2300      	movs	r3, #0
    beec:	460a      	mov	r2, r1
    beee:	4601      	mov	r1, r0
    bef0:	4802      	ldr	r0, [pc, #8]	; (befc <audiodf_midi_read+0x14>)
    bef2:	79c0      	ldrb	r0, [r0, #7]
    bef4:	4c02      	ldr	r4, [pc, #8]	; (bf00 <audiodf_midi_read+0x18>)
    bef6:	47a0      	blx	r4
}
    bef8:	bd10      	pop	{r4, pc}
    befa:	bf00      	nop
    befc:	20000ea8 	.word	0x20000ea8
    bf00:	0000c0d5 	.word	0x0000c0d5

0000bf04 <audiodf_midi_register_callback>:


int32_t audiodf_midi_register_callback(enum audiodf_midi_cb_type cb_type, FUNC_PTR func)
{
    bf04:	b508      	push	{r3, lr}
	switch (cb_type) {
    bf06:	b120      	cbz	r0, bf12 <audiodf_midi_register_callback+0xe>
    bf08:	2801      	cmp	r0, #1
    bf0a:	d00a      	beq.n	bf22 <audiodf_midi_register_callback+0x1e>
		break;
		case AUDIODF_MIDI_CB_WRITE:
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
		break;
		default:
		return ERR_INVALID_ARG;
    bf0c:	f06f 000c 	mvn.w	r0, #12
	}
	return ERR_NONE;
}
    bf10:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    bf12:	460a      	mov	r2, r1
    bf14:	2102      	movs	r1, #2
    bf16:	4b07      	ldr	r3, [pc, #28]	; (bf34 <audiodf_midi_register_callback+0x30>)
    bf18:	79d8      	ldrb	r0, [r3, #7]
    bf1a:	4b07      	ldr	r3, [pc, #28]	; (bf38 <audiodf_midi_register_callback+0x34>)
    bf1c:	4798      	blx	r3
	return ERR_NONE;
    bf1e:	2000      	movs	r0, #0
		break;
    bf20:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
    bf22:	460a      	mov	r2, r1
    bf24:	2102      	movs	r1, #2
    bf26:	4b03      	ldr	r3, [pc, #12]	; (bf34 <audiodf_midi_register_callback+0x30>)
    bf28:	7998      	ldrb	r0, [r3, #6]
    bf2a:	4b03      	ldr	r3, [pc, #12]	; (bf38 <audiodf_midi_register_callback+0x34>)
    bf2c:	4798      	blx	r3
	return ERR_NONE;
    bf2e:	2000      	movs	r0, #0
		break;
    bf30:	bd08      	pop	{r3, pc}
    bf32:	bf00      	nop
    bf34:	20000ea8 	.word	0x20000ea8
    bf38:	00007075 	.word	0x00007075

0000bf3c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    bf3c:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bf3e:	4b07      	ldr	r3, [pc, #28]	; (bf5c <usbdc_unconfig+0x20>)
    bf40:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    bf42:	b14c      	cbz	r4, bf58 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    bf44:	2600      	movs	r6, #0
    bf46:	2501      	movs	r5, #1
    bf48:	6863      	ldr	r3, [r4, #4]
    bf4a:	4632      	mov	r2, r6
    bf4c:	4629      	mov	r1, r5
    bf4e:	4620      	mov	r0, r4
    bf50:	4798      	blx	r3
		func = func->next;
    bf52:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    bf54:	2c00      	cmp	r4, #0
    bf56:	d1f7      	bne.n	bf48 <usbdc_unconfig+0xc>
    bf58:	bd70      	pop	{r4, r5, r6, pc}
    bf5a:	bf00      	nop
    bf5c:	20000ec4 	.word	0x20000ec4

0000bf60 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    bf60:	b570      	push	{r4, r5, r6, lr}
    bf62:	4606      	mov	r6, r0
    bf64:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    bf66:	4b07      	ldr	r3, [pc, #28]	; (bf84 <usbdc_change_notify+0x24>)
    bf68:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    bf6a:	b91c      	cbnz	r4, bf74 <usbdc_change_notify+0x14>
    bf6c:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    bf6e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    bf70:	2c00      	cmp	r4, #0
    bf72:	d0fb      	beq.n	bf6c <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    bf74:	6863      	ldr	r3, [r4, #4]
    bf76:	2b00      	cmp	r3, #0
    bf78:	d0f9      	beq.n	bf6e <usbdc_change_notify+0xe>
			cg->cb(change, value);
    bf7a:	4629      	mov	r1, r5
    bf7c:	4630      	mov	r0, r6
    bf7e:	4798      	blx	r3
    bf80:	e7f5      	b.n	bf6e <usbdc_change_notify+0xe>
    bf82:	bf00      	nop
    bf84:	20000ec4 	.word	0x20000ec4

0000bf88 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf8a:	4607      	mov	r7, r0
    bf8c:	460e      	mov	r6, r1
    bf8e:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    bf90:	4b0c      	ldr	r3, [pc, #48]	; (bfc4 <usbdc_request_handler+0x3c>)
    bf92:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    bf94:	b91c      	cbnz	r4, bf9e <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    bf96:	2000      	movs	r0, #0
    bf98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    bf9a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    bf9c:	b16c      	cbz	r4, bfba <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    bf9e:	6863      	ldr	r3, [r4, #4]
    bfa0:	2b00      	cmp	r3, #0
    bfa2:	d0fa      	beq.n	bf9a <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    bfa4:	462a      	mov	r2, r5
    bfa6:	4631      	mov	r1, r6
    bfa8:	4638      	mov	r0, r7
    bfaa:	4798      	blx	r3
			if (0 == rc) {
    bfac:	b138      	cbz	r0, bfbe <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    bfae:	f110 0f0a 	cmn.w	r0, #10
    bfb2:	d0f2      	beq.n	bf9a <usbdc_request_handler+0x12>
				return -1;
    bfb4:	f04f 30ff 	mov.w	r0, #4294967295
}
    bfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    bfba:	2000      	movs	r0, #0
    bfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    bfbe:	2001      	movs	r0, #1
    bfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfc2:	bf00      	nop
    bfc4:	20000ec4 	.word	0x20000ec4

0000bfc8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    bfc8:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bfca:	4b06      	ldr	r3, [pc, #24]	; (bfe4 <usbd_sof_cb+0x1c>)
    bfcc:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    bfce:	b91c      	cbnz	r4, bfd8 <usbd_sof_cb+0x10>
    bfd0:	bd10      	pop	{r4, pc}
		sof = sof->next;
    bfd2:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    bfd4:	2c00      	cmp	r4, #0
    bfd6:	d0fb      	beq.n	bfd0 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    bfd8:	6863      	ldr	r3, [r4, #4]
    bfda:	2b00      	cmp	r3, #0
    bfdc:	d0f9      	beq.n	bfd2 <usbd_sof_cb+0xa>
			sof->cb();
    bfde:	4798      	blx	r3
    bfe0:	e7f7      	b.n	bfd2 <usbd_sof_cb+0xa>
    bfe2:	bf00      	nop
    bfe4:	20000ec4 	.word	0x20000ec4

0000bfe8 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    bfe8:	b510      	push	{r4, lr}
    bfea:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    bfec:	b119      	cbz	r1, bff6 <usbdc_cb_ctl_done+0xe>
    bfee:	2901      	cmp	r1, #1
    bff0:	d026      	beq.n	c040 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    bff2:	2000      	movs	r0, #0
    bff4:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    bff6:	7813      	ldrb	r3, [r2, #0]
    bff8:	2b00      	cmp	r3, #0
    bffa:	d1fa      	bne.n	bff2 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    bffc:	7853      	ldrb	r3, [r2, #1]
    bffe:	2b05      	cmp	r3, #5
    c000:	d00f      	beq.n	c022 <usbdc_cb_ctl_done+0x3a>
    c002:	2b09      	cmp	r3, #9
    c004:	d1f5      	bne.n	bff2 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    c006:	8852      	ldrh	r2, [r2, #2]
    c008:	4b10      	ldr	r3, [pc, #64]	; (c04c <usbdc_cb_ctl_done+0x64>)
    c00a:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c00c:	8863      	ldrh	r3, [r4, #2]
    c00e:	2b00      	cmp	r3, #0
    c010:	bf14      	ite	ne
    c012:	2104      	movne	r1, #4
    c014:	2103      	moveq	r1, #3
    c016:	4b0d      	ldr	r3, [pc, #52]	; (c04c <usbdc_cb_ctl_done+0x64>)
    c018:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c01a:	2001      	movs	r0, #1
    c01c:	4b0c      	ldr	r3, [pc, #48]	; (c050 <usbdc_cb_ctl_done+0x68>)
    c01e:	4798      	blx	r3
    c020:	e7e7      	b.n	bff2 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    c022:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    c024:	b2c0      	uxtb	r0, r0
    c026:	4b0b      	ldr	r3, [pc, #44]	; (c054 <usbdc_cb_ctl_done+0x6c>)
    c028:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c02a:	8863      	ldrh	r3, [r4, #2]
    c02c:	2b00      	cmp	r3, #0
    c02e:	bf14      	ite	ne
    c030:	2103      	movne	r1, #3
    c032:	2102      	moveq	r1, #2
    c034:	4b05      	ldr	r3, [pc, #20]	; (c04c <usbdc_cb_ctl_done+0x64>)
    c036:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c038:	2001      	movs	r0, #1
    c03a:	4b05      	ldr	r3, [pc, #20]	; (c050 <usbdc_cb_ctl_done+0x68>)
    c03c:	4798      	blx	r3
    c03e:	e7d8      	b.n	bff2 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c040:	2201      	movs	r2, #1
    c042:	4621      	mov	r1, r4
    c044:	2000      	movs	r0, #0
    c046:	4b04      	ldr	r3, [pc, #16]	; (c058 <usbdc_cb_ctl_done+0x70>)
    c048:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    c04a:	e7d2      	b.n	bff2 <usbdc_cb_ctl_done+0xa>
    c04c:	20000ec4 	.word	0x20000ec4
    c050:	0000bf61 	.word	0x0000bf61
    c054:	00006e01 	.word	0x00006e01
    c058:	0000bf89 	.word	0x0000bf89

0000c05c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c05c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    c05e:	4b0d      	ldr	r3, [pc, #52]	; (c094 <usbdc_reset+0x38>)
    c060:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c062:	4d0d      	ldr	r5, [pc, #52]	; (c098 <usbdc_reset+0x3c>)
    c064:	2602      	movs	r6, #2
    c066:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    c068:	2400      	movs	r4, #0
    c06a:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    c06c:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c06e:	4620      	mov	r0, r4
    c070:	4b0a      	ldr	r3, [pc, #40]	; (c09c <usbdc_reset+0x40>)
    c072:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c074:	7f28      	ldrb	r0, [r5, #28]
    c076:	4b0a      	ldr	r3, [pc, #40]	; (c0a0 <usbdc_reset+0x44>)
    c078:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c07a:	4a0a      	ldr	r2, [pc, #40]	; (c0a4 <usbdc_reset+0x48>)
    c07c:	4621      	mov	r1, r4
    c07e:	4620      	mov	r0, r4
    c080:	4d09      	ldr	r5, [pc, #36]	; (c0a8 <usbdc_reset+0x4c>)
    c082:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c084:	4a09      	ldr	r2, [pc, #36]	; (c0ac <usbdc_reset+0x50>)
    c086:	4631      	mov	r1, r6
    c088:	4620      	mov	r0, r4
    c08a:	47a8      	blx	r5
	usb_d_ep_enable(0);
    c08c:	4620      	mov	r0, r4
    c08e:	4b08      	ldr	r3, [pc, #32]	; (c0b0 <usbdc_reset+0x54>)
    c090:	4798      	blx	r3
    c092:	bd70      	pop	{r4, r5, r6, pc}
    c094:	0000bf3d 	.word	0x0000bf3d
    c098:	20000ec4 	.word	0x20000ec4
    c09c:	00006e75 	.word	0x00006e75
    c0a0:	00006e61 	.word	0x00006e61
    c0a4:	0000c0f5 	.word	0x0000c0f5
    c0a8:	00007075 	.word	0x00007075
    c0ac:	0000bfe9 	.word	0x0000bfe9
    c0b0:	00006ea1 	.word	0x00006ea1

0000c0b4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c0b4:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    c0b6:	b110      	cbz	r0, c0be <usbd_event_cb+0xa>
    c0b8:	2801      	cmp	r0, #1
    c0ba:	d004      	beq.n	c0c6 <usbd_event_cb+0x12>
    c0bc:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    c0be:	2000      	movs	r0, #0
    c0c0:	4b02      	ldr	r3, [pc, #8]	; (c0cc <usbd_event_cb+0x18>)
    c0c2:	4798      	blx	r3
		break;
    c0c4:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    c0c6:	4b02      	ldr	r3, [pc, #8]	; (c0d0 <usbd_event_cb+0x1c>)
    c0c8:	4798      	blx	r3
    c0ca:	bd08      	pop	{r3, pc}
    c0cc:	0000bf61 	.word	0x0000bf61
    c0d0:	0000c05d 	.word	0x0000c05d

0000c0d4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c0d4:	b500      	push	{lr}
    c0d6:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c0d8:	9101      	str	r1, [sp, #4]
    c0da:	9202      	str	r2, [sp, #8]
    c0dc:	f88d 000c 	strb.w	r0, [sp, #12]
    c0e0:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    c0e4:	a801      	add	r0, sp, #4
    c0e6:	4b02      	ldr	r3, [pc, #8]	; (c0f0 <usbdc_xfer+0x1c>)
    c0e8:	4798      	blx	r3
}
    c0ea:	b005      	add	sp, #20
    c0ec:	f85d fb04 	ldr.w	pc, [sp], #4
    c0f0:	00006eed 	.word	0x00006eed

0000c0f4 <usbdc_cb_ctl_req>:
{
    c0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c0f8:	b083      	sub	sp, #12
    c0fa:	4605      	mov	r5, r0
    c0fc:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c0fe:	2200      	movs	r2, #0
    c100:	4b9b      	ldr	r3, [pc, #620]	; (c370 <usbdc_cb_ctl_req+0x27c>)
    c102:	4798      	blx	r3
    c104:	f1b0 3fff 	cmp.w	r0, #4294967295
    c108:	d00b      	beq.n	c122 <usbdc_cb_ctl_req+0x2e>
    c10a:	2801      	cmp	r0, #1
    c10c:	f000 81e3 	beq.w	c4d6 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c110:	7823      	ldrb	r3, [r4, #0]
    c112:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    c116:	d008      	beq.n	c12a <usbdc_cb_ctl_req+0x36>
    c118:	2a80      	cmp	r2, #128	; 0x80
    c11a:	f000 80f4 	beq.w	c306 <usbdc_cb_ctl_req+0x212>
		return false;
    c11e:	2000      	movs	r0, #0
    c120:	e000      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return false;
    c122:	2000      	movs	r0, #0
}
    c124:	b003      	add	sp, #12
    c126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    c12a:	7862      	ldrb	r2, [r4, #1]
    c12c:	3a01      	subs	r2, #1
    c12e:	2a0a      	cmp	r2, #10
    c130:	f200 81d3 	bhi.w	c4da <usbdc_cb_ctl_req+0x3e6>
    c134:	e8df f012 	tbh	[pc, r2, lsl #1]
    c138:	01d10060 	.word	0x01d10060
    c13c:	01d10076 	.word	0x01d10076
    c140:	01d1000b 	.word	0x01d1000b
    c144:	01d101d1 	.word	0x01d101d1
    c148:	01d10015 	.word	0x01d10015
    c14c:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c14e:	2301      	movs	r3, #1
    c150:	2200      	movs	r2, #0
    c152:	4611      	mov	r1, r2
    c154:	4628      	mov	r0, r5
    c156:	4c87      	ldr	r4, [pc, #540]	; (c374 <usbdc_cb_ctl_req+0x280>)
    c158:	47a0      	blx	r4
    c15a:	fab0 f080 	clz	r0, r0
    c15e:	0940      	lsrs	r0, r0, #5
    c160:	e7e0      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    c162:	8862      	ldrh	r2, [r4, #2]
    c164:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    c166:	b1ca      	cbz	r2, c19c <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c168:	4b83      	ldr	r3, [pc, #524]	; (c378 <usbdc_cb_ctl_req+0x284>)
    c16a:	681b      	ldr	r3, [r3, #0]
    c16c:	6859      	ldr	r1, [r3, #4]
    c16e:	6818      	ldr	r0, [r3, #0]
    c170:	4b82      	ldr	r3, [pc, #520]	; (c37c <usbdc_cb_ctl_req+0x288>)
    c172:	4798      	blx	r3
	if (NULL == cfg_desc) {
    c174:	2800      	cmp	r0, #0
    c176:	f000 81be 	beq.w	c4f6 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    c17a:	78c2      	ldrb	r2, [r0, #3]
    c17c:	7881      	ldrb	r1, [r0, #2]
    c17e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    c182:	fa10 f181 	uxtah	r1, r0, r1
    c186:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c188:	2204      	movs	r2, #4
    c18a:	4b7d      	ldr	r3, [pc, #500]	; (c380 <usbdc_cb_ctl_req+0x28c>)
    c18c:	4798      	blx	r3
    c18e:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    c190:	b130      	cbz	r0, c1a0 <usbdc_cb_ctl_req+0xac>
    c192:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c194:	f8df 81e0 	ldr.w	r8, [pc, #480]	; c378 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c198:	4f79      	ldr	r7, [pc, #484]	; (c380 <usbdc_cb_ctl_req+0x28c>)
    c19a:	e018      	b.n	c1ce <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    c19c:	4b79      	ldr	r3, [pc, #484]	; (c384 <usbdc_cb_ctl_req+0x290>)
    c19e:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c1a0:	2301      	movs	r3, #1
    c1a2:	2200      	movs	r2, #0
    c1a4:	4611      	mov	r1, r2
    c1a6:	4628      	mov	r0, r5
    c1a8:	4c72      	ldr	r4, [pc, #456]	; (c374 <usbdc_cb_ctl_req+0x280>)
    c1aa:	47a0      	blx	r4
    c1ac:	fab0 f080 	clz	r0, r0
    c1b0:	0940      	lsrs	r0, r0, #5
    c1b2:	e7b7      	b.n	c124 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    c1b4:	464c      	mov	r4, r9
    c1b6:	e000      	b.n	c1ba <usbdc_cb_ctl_req+0xc6>
    c1b8:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    c1ba:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    c1bc:	7803      	ldrb	r3, [r0, #0]
    c1be:	4418      	add	r0, r3
    c1c0:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c1c2:	2204      	movs	r2, #4
    c1c4:	9901      	ldr	r1, [sp, #4]
    c1c6:	47b8      	blx	r7
    c1c8:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    c1ca:	2800      	cmp	r0, #0
    c1cc:	d0e8      	beq.n	c1a0 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c1ce:	f890 9002 	ldrb.w	r9, [r0, #2]
    c1d2:	45a1      	cmp	r9, r4
    c1d4:	d0f1      	beq.n	c1ba <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c1d6:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    c1da:	2c00      	cmp	r4, #0
    c1dc:	d0ea      	beq.n	c1b4 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c1de:	2600      	movs	r6, #0
    c1e0:	6863      	ldr	r3, [r4, #4]
    c1e2:	466a      	mov	r2, sp
    c1e4:	4631      	mov	r1, r6
    c1e6:	4620      	mov	r0, r4
    c1e8:	4798      	blx	r3
    c1ea:	2800      	cmp	r0, #0
    c1ec:	d0e4      	beq.n	c1b8 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    c1ee:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c1f0:	2c00      	cmp	r4, #0
    c1f2:	d1f5      	bne.n	c1e0 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    c1f4:	464c      	mov	r4, r9
    c1f6:	e7e0      	b.n	c1ba <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c1f8:	f003 031f 	and.w	r3, r3, #31
    c1fc:	2b02      	cmp	r3, #2
    c1fe:	f040 816e 	bne.w	c4de <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    c202:	88e3      	ldrh	r3, [r4, #6]
    c204:	b10b      	cbz	r3, c20a <usbdc_cb_ctl_req+0x116>
			return false;
    c206:	2000      	movs	r0, #0
    c208:	e78c      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c20a:	88a0      	ldrh	r0, [r4, #4]
    c20c:	2100      	movs	r1, #0
    c20e:	b2c0      	uxtb	r0, r0
    c210:	4b5d      	ldr	r3, [pc, #372]	; (c388 <usbdc_cb_ctl_req+0x294>)
    c212:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c214:	2301      	movs	r3, #1
    c216:	2200      	movs	r2, #0
    c218:	4611      	mov	r1, r2
    c21a:	4628      	mov	r0, r5
    c21c:	4c55      	ldr	r4, [pc, #340]	; (c374 <usbdc_cb_ctl_req+0x280>)
    c21e:	47a0      	blx	r4
		return true;
    c220:	2001      	movs	r0, #1
    c222:	e77f      	b.n	c124 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c224:	f003 031f 	and.w	r3, r3, #31
    c228:	2b02      	cmp	r3, #2
    c22a:	f040 815a 	bne.w	c4e2 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    c22e:	88e3      	ldrh	r3, [r4, #6]
    c230:	b10b      	cbz	r3, c236 <usbdc_cb_ctl_req+0x142>
			return false;
    c232:	2000      	movs	r0, #0
    c234:	e776      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c236:	88a0      	ldrh	r0, [r4, #4]
    c238:	2101      	movs	r1, #1
    c23a:	b2c0      	uxtb	r0, r0
    c23c:	4b52      	ldr	r3, [pc, #328]	; (c388 <usbdc_cb_ctl_req+0x294>)
    c23e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c240:	2301      	movs	r3, #1
    c242:	2200      	movs	r2, #0
    c244:	4611      	mov	r1, r2
    c246:	4628      	mov	r0, r5
    c248:	4c4a      	ldr	r4, [pc, #296]	; (c374 <usbdc_cb_ctl_req+0x280>)
    c24a:	47a0      	blx	r4
		return true;
    c24c:	2001      	movs	r0, #1
    c24e:	e769      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    c250:	8866      	ldrh	r6, [r4, #2]
    c252:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c254:	4a48      	ldr	r2, [pc, #288]	; (c378 <usbdc_cb_ctl_req+0x284>)
    c256:	6813      	ldr	r3, [r2, #0]
    c258:	7ed2      	ldrb	r2, [r2, #27]
    c25a:	6859      	ldr	r1, [r3, #4]
    c25c:	6818      	ldr	r0, [r3, #0]
    c25e:	4b47      	ldr	r3, [pc, #284]	; (c37c <usbdc_cb_ctl_req+0x288>)
    c260:	4798      	blx	r3
	if (NULL == ifc) {
    c262:	2800      	cmp	r0, #0
    c264:	d045      	beq.n	c2f2 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    c266:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    c268:	78c2      	ldrb	r2, [r0, #3]
    c26a:	7881      	ldrb	r1, [r0, #2]
    c26c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c270:	fa10 f181 	uxtah	r1, r0, r1
    c274:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c276:	2204      	movs	r2, #4
    c278:	4b41      	ldr	r3, [pc, #260]	; (c380 <usbdc_cb_ctl_req+0x28c>)
    c27a:	4798      	blx	r3
    c27c:	4603      	mov	r3, r0
    c27e:	2800      	cmp	r0, #0
    c280:	d039      	beq.n	c2f6 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c282:	2704      	movs	r7, #4
    c284:	4d3e      	ldr	r5, [pc, #248]	; (c380 <usbdc_cb_ctl_req+0x28c>)
    c286:	e008      	b.n	c29a <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    c288:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    c28a:	7803      	ldrb	r3, [r0, #0]
    c28c:	4418      	add	r0, r3
    c28e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c290:	463a      	mov	r2, r7
    c292:	9901      	ldr	r1, [sp, #4]
    c294:	47a8      	blx	r5
		if (NULL == ifc) {
    c296:	4603      	mov	r3, r0
    c298:	b378      	cbz	r0, c2fa <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c29a:	789a      	ldrb	r2, [r3, #2]
    c29c:	42a2      	cmp	r2, r4
    c29e:	d1f3      	bne.n	c288 <usbdc_cb_ctl_req+0x194>
    c2a0:	78da      	ldrb	r2, [r3, #3]
    c2a2:	42b2      	cmp	r2, r6
    c2a4:	d1f0      	bne.n	c288 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    c2a6:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c2a8:	4b33      	ldr	r3, [pc, #204]	; (c378 <usbdc_cb_ctl_req+0x284>)
    c2aa:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    c2ac:	b33d      	cbz	r5, c2fe <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c2ae:	2701      	movs	r7, #1
    c2b0:	686b      	ldr	r3, [r5, #4]
    c2b2:	466a      	mov	r2, sp
    c2b4:	4639      	mov	r1, r7
    c2b6:	4628      	mov	r0, r5
    c2b8:	4798      	blx	r3
    c2ba:	b120      	cbz	r0, c2c6 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    c2bc:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    c2be:	2d00      	cmp	r5, #0
    c2c0:	d1f6      	bne.n	c2b0 <usbdc_cb_ctl_req+0x1bc>
	return false;
    c2c2:	2000      	movs	r0, #0
    c2c4:	e72e      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c2c6:	686b      	ldr	r3, [r5, #4]
    c2c8:	466a      	mov	r2, sp
    c2ca:	2100      	movs	r1, #0
    c2cc:	4628      	mov	r0, r5
    c2ce:	4798      	blx	r3
    c2d0:	b9b8      	cbnz	r0, c302 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    c2d2:	b136      	cbz	r6, c2e2 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c2d4:	4a28      	ldr	r2, [pc, #160]	; (c378 <usbdc_cb_ctl_req+0x284>)
    c2d6:	2301      	movs	r3, #1
    c2d8:	fa03 f404 	lsl.w	r4, r3, r4
    c2dc:	7f53      	ldrb	r3, [r2, #29]
    c2de:	4323      	orrs	r3, r4
    c2e0:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    c2e2:	2300      	movs	r3, #0
    c2e4:	461a      	mov	r2, r3
    c2e6:	4619      	mov	r1, r3
    c2e8:	4618      	mov	r0, r3
    c2ea:	4c22      	ldr	r4, [pc, #136]	; (c374 <usbdc_cb_ctl_req+0x280>)
    c2ec:	47a0      	blx	r4
			return true;
    c2ee:	2001      	movs	r0, #1
    c2f0:	e718      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return false;
    c2f2:	2000      	movs	r0, #0
    c2f4:	e716      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return false;
    c2f6:	2000      	movs	r0, #0
    c2f8:	e714      	b.n	c124 <usbdc_cb_ctl_req+0x30>
			return false;
    c2fa:	2000      	movs	r0, #0
    c2fc:	e712      	b.n	c124 <usbdc_cb_ctl_req+0x30>
	return false;
    c2fe:	2000      	movs	r0, #0
    c300:	e710      	b.n	c124 <usbdc_cb_ctl_req+0x30>
			return false;
    c302:	2000      	movs	r0, #0
    c304:	e70e      	b.n	c124 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    c306:	7862      	ldrb	r2, [r4, #1]
    c308:	2a0a      	cmp	r2, #10
    c30a:	f200 80ec 	bhi.w	c4e6 <usbdc_cb_ctl_req+0x3f2>
    c30e:	e8df f012 	tbh	[pc, r2, lsl #1]
    c312:	008e      	.short	0x008e
    c314:	00ea00ea 	.word	0x00ea00ea
    c318:	00ea00ea 	.word	0x00ea00ea
    c31c:	000b00ea 	.word	0x000b00ea
    c320:	008200ea 	.word	0x008200ea
    c324:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c328:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    c32a:	0a13      	lsrs	r3, r2, #8
    c32c:	2b02      	cmp	r3, #2
    c32e:	d02d      	beq.n	c38c <usbdc_cb_ctl_req+0x298>
    c330:	2b03      	cmp	r3, #3
    c332:	d050      	beq.n	c3d6 <usbdc_cb_ctl_req+0x2e2>
    c334:	2b01      	cmp	r3, #1
    c336:	d001      	beq.n	c33c <usbdc_cb_ctl_req+0x248>
	return false;
    c338:	2000      	movs	r0, #0
    c33a:	e6f3      	b.n	c124 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    c33c:	88e2      	ldrh	r2, [r4, #6]
    c33e:	2a12      	cmp	r2, #18
    c340:	bf28      	it	cs
    c342:	2212      	movcs	r2, #18
    c344:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c346:	4b0c      	ldr	r3, [pc, #48]	; (c378 <usbdc_cb_ctl_req+0x284>)
    c348:	681b      	ldr	r3, [r3, #0]
    c34a:	2201      	movs	r2, #1
    c34c:	6859      	ldr	r1, [r3, #4]
    c34e:	6818      	ldr	r0, [r3, #0]
    c350:	4b0b      	ldr	r3, [pc, #44]	; (c380 <usbdc_cb_ctl_req+0x28c>)
    c352:	4798      	blx	r3
	if (!dev_desc) {
    c354:	4601      	mov	r1, r0
    c356:	2800      	cmp	r0, #0
    c358:	f000 80c7 	beq.w	c4ea <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c35c:	2300      	movs	r3, #0
    c35e:	4622      	mov	r2, r4
    c360:	4628      	mov	r0, r5
    c362:	4c04      	ldr	r4, [pc, #16]	; (c374 <usbdc_cb_ctl_req+0x280>)
    c364:	47a0      	blx	r4
    c366:	fab0 f080 	clz	r0, r0
    c36a:	0940      	lsrs	r0, r0, #5
    c36c:	e6da      	b.n	c124 <usbdc_cb_ctl_req+0x30>
    c36e:	bf00      	nop
    c370:	0000bf89 	.word	0x0000bf89
    c374:	0000c0d5 	.word	0x0000c0d5
    c378:	20000ec4 	.word	0x20000ec4
    c37c:	0000c699 	.word	0x0000c699
    c380:	0000c619 	.word	0x0000c619
    c384:	0000bf3d 	.word	0x0000bf3d
    c388:	0000700d 	.word	0x0000700d
	uint16_t length   = req->wLength;
    c38c:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c38e:	4b5b      	ldr	r3, [pc, #364]	; (c4fc <usbdc_cb_ctl_req+0x408>)
    c390:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c392:	681b      	ldr	r3, [r3, #0]
    c394:	3201      	adds	r2, #1
    c396:	b2d2      	uxtb	r2, r2
    c398:	6859      	ldr	r1, [r3, #4]
    c39a:	6818      	ldr	r0, [r3, #0]
    c39c:	4b58      	ldr	r3, [pc, #352]	; (c500 <usbdc_cb_ctl_req+0x40c>)
    c39e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    c3a0:	4601      	mov	r1, r0
    c3a2:	2800      	cmp	r0, #0
    c3a4:	f000 80a3 	beq.w	c4ee <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    c3a8:	78c3      	ldrb	r3, [r0, #3]
    c3aa:	7882      	ldrb	r2, [r0, #2]
    c3ac:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    c3b0:	b292      	uxth	r2, r2
	if (length <= total_len) {
    c3b2:	4294      	cmp	r4, r2
    c3b4:	d90d      	bls.n	c3d2 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c3b6:	3e01      	subs	r6, #1
    c3b8:	4226      	tst	r6, r4
    c3ba:	bf0c      	ite	eq
    c3bc:	2301      	moveq	r3, #1
    c3be:	2300      	movne	r3, #0
		length = total_len;
    c3c0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c3c2:	4622      	mov	r2, r4
    c3c4:	4628      	mov	r0, r5
    c3c6:	4c4f      	ldr	r4, [pc, #316]	; (c504 <usbdc_cb_ctl_req+0x410>)
    c3c8:	47a0      	blx	r4
    c3ca:	fab0 f080 	clz	r0, r0
    c3ce:	0940      	lsrs	r0, r0, #5
    c3d0:	e6a8      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    c3d2:	2300      	movs	r3, #0
    c3d4:	e7f5      	b.n	c3c2 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    c3d6:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c3d8:	4b48      	ldr	r3, [pc, #288]	; (c4fc <usbdc_cb_ctl_req+0x408>)
    c3da:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c3dc:	681b      	ldr	r3, [r3, #0]
    c3de:	b2d2      	uxtb	r2, r2
    c3e0:	6859      	ldr	r1, [r3, #4]
    c3e2:	6818      	ldr	r0, [r3, #0]
    c3e4:	4b48      	ldr	r3, [pc, #288]	; (c508 <usbdc_cb_ctl_req+0x414>)
    c3e6:	4798      	blx	r3
	if (NULL == str_desc) {
    c3e8:	4601      	mov	r1, r0
    c3ea:	2800      	cmp	r0, #0
    c3ec:	f000 8081 	beq.w	c4f2 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    c3f0:	7802      	ldrb	r2, [r0, #0]
    c3f2:	4294      	cmp	r4, r2
    c3f4:	d90d      	bls.n	c412 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c3f6:	3e01      	subs	r6, #1
    c3f8:	4226      	tst	r6, r4
    c3fa:	bf0c      	ite	eq
    c3fc:	2301      	moveq	r3, #1
    c3fe:	2300      	movne	r3, #0
		length = str_desc[0];
    c400:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c402:	4622      	mov	r2, r4
    c404:	4628      	mov	r0, r5
    c406:	4c3f      	ldr	r4, [pc, #252]	; (c504 <usbdc_cb_ctl_req+0x410>)
    c408:	47a0      	blx	r4
    c40a:	fab0 f080 	clz	r0, r0
    c40e:	0940      	lsrs	r0, r0, #5
    c410:	e688      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    c412:	2300      	movs	r3, #0
    c414:	e7f5      	b.n	c402 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c416:	4939      	ldr	r1, [pc, #228]	; (c4fc <usbdc_cb_ctl_req+0x408>)
    c418:	694b      	ldr	r3, [r1, #20]
    c41a:	7eca      	ldrb	r2, [r1, #27]
    c41c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c41e:	2300      	movs	r3, #0
    c420:	2201      	movs	r2, #1
    c422:	6949      	ldr	r1, [r1, #20]
    c424:	4628      	mov	r0, r5
    c426:	4c37      	ldr	r4, [pc, #220]	; (c504 <usbdc_cb_ctl_req+0x410>)
    c428:	47a0      	blx	r4
		return true;
    c42a:	2001      	movs	r0, #1
    c42c:	e67a      	b.n	c124 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c42e:	f003 031f 	and.w	r3, r3, #31
    c432:	2b01      	cmp	r3, #1
    c434:	d903      	bls.n	c43e <usbdc_cb_ctl_req+0x34a>
    c436:	2b02      	cmp	r3, #2
    c438:	d010      	beq.n	c45c <usbdc_cb_ctl_req+0x368>
		return false;
    c43a:	2000      	movs	r0, #0
    c43c:	e672      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		st = 0;
    c43e:	2300      	movs	r3, #0
    c440:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    c442:	492e      	ldr	r1, [pc, #184]	; (c4fc <usbdc_cb_ctl_req+0x408>)
    c444:	694b      	ldr	r3, [r1, #20]
    c446:	f8bd 2000 	ldrh.w	r2, [sp]
    c44a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c44c:	2300      	movs	r3, #0
    c44e:	2202      	movs	r2, #2
    c450:	6949      	ldr	r1, [r1, #20]
    c452:	4628      	mov	r0, r5
    c454:	4c2b      	ldr	r4, [pc, #172]	; (c504 <usbdc_cb_ctl_req+0x410>)
    c456:	47a0      	blx	r4
	return true;
    c458:	2001      	movs	r0, #1
    c45a:	e663      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c45c:	88a0      	ldrh	r0, [r4, #4]
    c45e:	2102      	movs	r1, #2
    c460:	b2c0      	uxtb	r0, r0
    c462:	4b2a      	ldr	r3, [pc, #168]	; (c50c <usbdc_cb_ctl_req+0x418>)
    c464:	4798      	blx	r3
		if (st < 0) {
    c466:	2800      	cmp	r0, #0
    c468:	db03      	blt.n	c472 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    c46a:	f000 0001 	and.w	r0, r0, #1
    c46e:	9000      	str	r0, [sp, #0]
    c470:	e7e7      	b.n	c442 <usbdc_cb_ctl_req+0x34e>
			return false;
    c472:	2000      	movs	r0, #0
    c474:	e656      	b.n	c124 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c476:	4b21      	ldr	r3, [pc, #132]	; (c4fc <usbdc_cb_ctl_req+0x408>)
    c478:	7f5b      	ldrb	r3, [r3, #29]
    c47a:	88a2      	ldrh	r2, [r4, #4]
    c47c:	4113      	asrs	r3, r2
    c47e:	f013 0f01 	tst.w	r3, #1
    c482:	d012      	beq.n	c4aa <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c484:	4b1d      	ldr	r3, [pc, #116]	; (c4fc <usbdc_cb_ctl_req+0x408>)
    c486:	691d      	ldr	r5, [r3, #16]
	return false;
    c488:	2000      	movs	r0, #0
	while (NULL != func) {
    c48a:	2d00      	cmp	r5, #0
    c48c:	f43f ae4a 	beq.w	c124 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c490:	2602      	movs	r6, #2
    c492:	686b      	ldr	r3, [r5, #4]
    c494:	4622      	mov	r2, r4
    c496:	4631      	mov	r1, r6
    c498:	4628      	mov	r0, r5
    c49a:	4798      	blx	r3
    c49c:	2800      	cmp	r0, #0
    c49e:	da0f      	bge.n	c4c0 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    c4a0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    c4a2:	2d00      	cmp	r5, #0
    c4a4:	d1f5      	bne.n	c492 <usbdc_cb_ctl_req+0x39e>
	return false;
    c4a6:	2000      	movs	r0, #0
    c4a8:	e63c      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    c4aa:	4914      	ldr	r1, [pc, #80]	; (c4fc <usbdc_cb_ctl_req+0x408>)
    c4ac:	694b      	ldr	r3, [r1, #20]
    c4ae:	2000      	movs	r0, #0
    c4b0:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c4b2:	4603      	mov	r3, r0
    c4b4:	2201      	movs	r2, #1
    c4b6:	6949      	ldr	r1, [r1, #20]
    c4b8:	4c12      	ldr	r4, [pc, #72]	; (c504 <usbdc_cb_ctl_req+0x410>)
    c4ba:	47a0      	blx	r4
		return true;
    c4bc:	2001      	movs	r0, #1
    c4be:	e631      	b.n	c124 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c4c0:	490e      	ldr	r1, [pc, #56]	; (c4fc <usbdc_cb_ctl_req+0x408>)
    c4c2:	694b      	ldr	r3, [r1, #20]
    c4c4:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c4c6:	2300      	movs	r3, #0
    c4c8:	2201      	movs	r2, #1
    c4ca:	6949      	ldr	r1, [r1, #20]
    c4cc:	4618      	mov	r0, r3
    c4ce:	4c0d      	ldr	r4, [pc, #52]	; (c504 <usbdc_cb_ctl_req+0x410>)
    c4d0:	47a0      	blx	r4
			return true;
    c4d2:	2001      	movs	r0, #1
    c4d4:	e626      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return true;
    c4d6:	2001      	movs	r0, #1
    c4d8:	e624      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return false;
    c4da:	2000      	movs	r0, #0
    c4dc:	e622      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return false;
    c4de:	2000      	movs	r0, #0
    c4e0:	e620      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return false;
    c4e2:	2000      	movs	r0, #0
    c4e4:	e61e      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return false;
    c4e6:	2000      	movs	r0, #0
    c4e8:	e61c      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return false;
    c4ea:	2000      	movs	r0, #0
    c4ec:	e61a      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return false;
    c4ee:	2000      	movs	r0, #0
    c4f0:	e618      	b.n	c124 <usbdc_cb_ctl_req+0x30>
		return false;
    c4f2:	2000      	movs	r0, #0
    c4f4:	e616      	b.n	c124 <usbdc_cb_ctl_req+0x30>
			return false;
    c4f6:	2000      	movs	r0, #0
    c4f8:	e614      	b.n	c124 <usbdc_cb_ctl_req+0x30>
    c4fa:	bf00      	nop
    c4fc:	20000ec4 	.word	0x20000ec4
    c500:	0000c699 	.word	0x0000c699
    c504:	0000c0d5 	.word	0x0000c0d5
    c508:	0000c701 	.word	0x0000c701
    c50c:	0000700d 	.word	0x0000700d

0000c510 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c510:	b508      	push	{r3, lr}
	switch (type) {
    c512:	2801      	cmp	r0, #1
    c514:	d007      	beq.n	c526 <usbdc_register_handler+0x16>
    c516:	b110      	cbz	r0, c51e <usbdc_register_handler+0xe>
    c518:	2802      	cmp	r0, #2
    c51a:	d008      	beq.n	c52e <usbdc_register_handler+0x1e>
    c51c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c51e:	4806      	ldr	r0, [pc, #24]	; (c538 <usbdc_register_handler+0x28>)
    c520:	4b06      	ldr	r3, [pc, #24]	; (c53c <usbdc_register_handler+0x2c>)
    c522:	4798      	blx	r3
		break;
    c524:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c526:	4806      	ldr	r0, [pc, #24]	; (c540 <usbdc_register_handler+0x30>)
    c528:	4b04      	ldr	r3, [pc, #16]	; (c53c <usbdc_register_handler+0x2c>)
    c52a:	4798      	blx	r3
		break;
    c52c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c52e:	4805      	ldr	r0, [pc, #20]	; (c544 <usbdc_register_handler+0x34>)
    c530:	4b02      	ldr	r3, [pc, #8]	; (c53c <usbdc_register_handler+0x2c>)
    c532:	4798      	blx	r3
    c534:	bd08      	pop	{r3, pc}
    c536:	bf00      	nop
    c538:	20000ec8 	.word	0x20000ec8
    c53c:	0000711d 	.word	0x0000711d
    c540:	20000ecc 	.word	0x20000ecc
    c544:	20000ed0 	.word	0x20000ed0

0000c548 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c548:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    c54a:	4605      	mov	r5, r0
    c54c:	f240 3255 	movw	r2, #853	; 0x355
    c550:	490c      	ldr	r1, [pc, #48]	; (c584 <usbdc_init+0x3c>)
    c552:	3000      	adds	r0, #0
    c554:	bf18      	it	ne
    c556:	2001      	movne	r0, #1
    c558:	4b0b      	ldr	r3, [pc, #44]	; (c588 <usbdc_init+0x40>)
    c55a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c55c:	4b0b      	ldr	r3, [pc, #44]	; (c58c <usbdc_init+0x44>)
    c55e:	4798      	blx	r3
	if (rc < 0) {
    c560:	2800      	cmp	r0, #0
    c562:	db0e      	blt.n	c582 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c564:	4c0a      	ldr	r4, [pc, #40]	; (c590 <usbdc_init+0x48>)
    c566:	2220      	movs	r2, #32
    c568:	2100      	movs	r1, #0
    c56a:	4620      	mov	r0, r4
    c56c:	4b09      	ldr	r3, [pc, #36]	; (c594 <usbdc_init+0x4c>)
    c56e:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c570:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c572:	4909      	ldr	r1, [pc, #36]	; (c598 <usbdc_init+0x50>)
    c574:	2000      	movs	r0, #0
    c576:	4c09      	ldr	r4, [pc, #36]	; (c59c <usbdc_init+0x54>)
    c578:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c57a:	4909      	ldr	r1, [pc, #36]	; (c5a0 <usbdc_init+0x58>)
    c57c:	2001      	movs	r0, #1
    c57e:	47a0      	blx	r4

	return 0;
    c580:	2000      	movs	r0, #0
}
    c582:	bd38      	pop	{r3, r4, r5, pc}
    c584:	0000f11c 	.word	0x0000f11c
    c588:	000070c1 	.word	0x000070c1
    c58c:	00006d69 	.word	0x00006d69
    c590:	20000ec4 	.word	0x20000ec4
    c594:	0000d0e7 	.word	0x0000d0e7
    c598:	0000bfc9 	.word	0x0000bfc9
    c59c:	00006dd1 	.word	0x00006dd1
    c5a0:	0000c0b5 	.word	0x0000c0b5

0000c5a4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c5a4:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    c5a6:	4601      	mov	r1, r0
    c5a8:	4801      	ldr	r0, [pc, #4]	; (c5b0 <usbdc_register_function+0xc>)
    c5aa:	4b02      	ldr	r3, [pc, #8]	; (c5b4 <usbdc_register_function+0x10>)
    c5ac:	4798      	blx	r3
    c5ae:	bd08      	pop	{r3, pc}
    c5b0:	20000ed4 	.word	0x20000ed4
    c5b4:	0000711d 	.word	0x0000711d

0000c5b8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c5b8:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    c5ba:	4b0a      	ldr	r3, [pc, #40]	; (c5e4 <usbdc_start+0x2c>)
    c5bc:	7e9b      	ldrb	r3, [r3, #26]
    c5be:	b95b      	cbnz	r3, c5d8 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    c5c0:	b168      	cbz	r0, c5de <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    c5c2:	4b08      	ldr	r3, [pc, #32]	; (c5e4 <usbdc_start+0x2c>)
    c5c4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c5c6:	6802      	ldr	r2, [r0, #0]
    c5c8:	79d2      	ldrb	r2, [r2, #7]
    c5ca:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c5cc:	2201      	movs	r2, #1
    c5ce:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c5d0:	4b05      	ldr	r3, [pc, #20]	; (c5e8 <usbdc_start+0x30>)
    c5d2:	4798      	blx	r3
	return ERR_NONE;
    c5d4:	2000      	movs	r0, #0
    c5d6:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    c5d8:	f06f 0003 	mvn.w	r0, #3
    c5dc:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    c5de:	f06f 0008 	mvn.w	r0, #8
}
    c5e2:	bd08      	pop	{r3, pc}
    c5e4:	20000ec4 	.word	0x20000ec4
    c5e8:	00006ddd 	.word	0x00006ddd

0000c5ec <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c5ec:	b508      	push	{r3, lr}
	usb_d_attach();
    c5ee:	4b01      	ldr	r3, [pc, #4]	; (c5f4 <usbdc_attach+0x8>)
    c5f0:	4798      	blx	r3
    c5f2:	bd08      	pop	{r3, pc}
    c5f4:	00006de9 	.word	0x00006de9

0000c5f8 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    c5f8:	4b01      	ldr	r3, [pc, #4]	; (c600 <usbdc_get_ctrl_buffer+0x8>)
    c5fa:	6958      	ldr	r0, [r3, #20]
    c5fc:	4770      	bx	lr
    c5fe:	bf00      	nop
    c600:	20000ec4 	.word	0x20000ec4

0000c604 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    c604:	4b03      	ldr	r3, [pc, #12]	; (c614 <usbdc_get_state+0x10>)
    c606:	7e98      	ldrb	r0, [r3, #26]
    c608:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    c60c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    c60e:	bf18      	it	ne
    c610:	2010      	movne	r0, #16
    c612:	4770      	bx	lr
    c614:	20000ec4 	.word	0x20000ec4

0000c618 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c618:	4288      	cmp	r0, r1
    c61a:	d214      	bcs.n	c646 <usb_find_desc+0x2e>
	return desc[0];
    c61c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c61e:	2b01      	cmp	r3, #1
    c620:	d913      	bls.n	c64a <usb_find_desc+0x32>
{
    c622:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c624:	7844      	ldrb	r4, [r0, #1]
    c626:	4294      	cmp	r4, r2
    c628:	d00a      	beq.n	c640 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    c62a:	4418      	add	r0, r3
	while (desc < eof) {
    c62c:	4281      	cmp	r1, r0
    c62e:	d906      	bls.n	c63e <usb_find_desc+0x26>
	return desc[0];
    c630:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c632:	2b01      	cmp	r3, #1
    c634:	d90b      	bls.n	c64e <usb_find_desc+0x36>
	return desc[1];
    c636:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c638:	4294      	cmp	r4, r2
    c63a:	d1f6      	bne.n	c62a <usb_find_desc+0x12>
    c63c:	e000      	b.n	c640 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c63e:	2000      	movs	r0, #0
}
    c640:	f85d 4b04 	ldr.w	r4, [sp], #4
    c644:	4770      	bx	lr
	return NULL;
    c646:	2000      	movs	r0, #0
    c648:	4770      	bx	lr
		_desc_len_check();
    c64a:	2000      	movs	r0, #0
    c64c:	4770      	bx	lr
    c64e:	2000      	movs	r0, #0
    c650:	e7f6      	b.n	c640 <usb_find_desc+0x28>

0000c652 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c652:	4288      	cmp	r0, r1
    c654:	d216      	bcs.n	c684 <usb_find_ep_desc+0x32>
	return desc[0];
    c656:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c658:	2b01      	cmp	r3, #1
    c65a:	d915      	bls.n	c688 <usb_find_ep_desc+0x36>
	return desc[1];
    c65c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c65e:	2a04      	cmp	r2, #4
    c660:	d014      	beq.n	c68c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c662:	2a05      	cmp	r2, #5
    c664:	d00b      	beq.n	c67e <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    c666:	4418      	add	r0, r3
	while (desc < eof) {
    c668:	4281      	cmp	r1, r0
    c66a:	d909      	bls.n	c680 <usb_find_ep_desc+0x2e>
	return desc[0];
    c66c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c66e:	2b01      	cmp	r3, #1
    c670:	d90e      	bls.n	c690 <usb_find_ep_desc+0x3e>
	return desc[1];
    c672:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c674:	2a04      	cmp	r2, #4
    c676:	d00d      	beq.n	c694 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c678:	2a05      	cmp	r2, #5
    c67a:	d1f4      	bne.n	c666 <usb_find_ep_desc+0x14>
    c67c:	e00b      	b.n	c696 <usb_find_ep_desc+0x44>
    c67e:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c680:	2000      	movs	r0, #0
    c682:	4770      	bx	lr
    c684:	2000      	movs	r0, #0
    c686:	4770      	bx	lr
		_desc_len_check();
    c688:	2000      	movs	r0, #0
    c68a:	4770      	bx	lr
	return NULL;
    c68c:	2000      	movs	r0, #0
    c68e:	4770      	bx	lr
		_desc_len_check();
    c690:	2000      	movs	r0, #0
    c692:	4770      	bx	lr
	return NULL;
    c694:	2000      	movs	r0, #0
}
    c696:	4770      	bx	lr

0000c698 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c698:	b538      	push	{r3, r4, r5, lr}
    c69a:	460c      	mov	r4, r1
    c69c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c69e:	2202      	movs	r2, #2
    c6a0:	4b16      	ldr	r3, [pc, #88]	; (c6fc <usb_find_cfg_desc+0x64>)
    c6a2:	4798      	blx	r3
	if (!desc) {
    c6a4:	4603      	mov	r3, r0
    c6a6:	b1e8      	cbz	r0, c6e4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    c6a8:	4284      	cmp	r4, r0
    c6aa:	d91d      	bls.n	c6e8 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    c6ac:	7802      	ldrb	r2, [r0, #0]
    c6ae:	2a01      	cmp	r2, #1
    c6b0:	d91c      	bls.n	c6ec <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    c6b2:	7842      	ldrb	r2, [r0, #1]
    c6b4:	2a02      	cmp	r2, #2
    c6b6:	d11b      	bne.n	c6f0 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    c6b8:	7942      	ldrb	r2, [r0, #5]
    c6ba:	42aa      	cmp	r2, r5
    c6bc:	d012      	beq.n	c6e4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    c6be:	78d9      	ldrb	r1, [r3, #3]
    c6c0:	789a      	ldrb	r2, [r3, #2]
    c6c2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c6c6:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    c6ca:	429c      	cmp	r4, r3
    c6cc:	d909      	bls.n	c6e2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    c6ce:	781a      	ldrb	r2, [r3, #0]
    c6d0:	2a01      	cmp	r2, #1
    c6d2:	d90f      	bls.n	c6f4 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    c6d4:	785a      	ldrb	r2, [r3, #1]
    c6d6:	2a02      	cmp	r2, #2
    c6d8:	d10e      	bne.n	c6f8 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    c6da:	795a      	ldrb	r2, [r3, #5]
    c6dc:	42aa      	cmp	r2, r5
    c6de:	d1ee      	bne.n	c6be <usb_find_cfg_desc+0x26>
    c6e0:	e000      	b.n	c6e4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    c6e2:	2300      	movs	r3, #0
}
    c6e4:	4618      	mov	r0, r3
    c6e6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    c6e8:	2300      	movs	r3, #0
    c6ea:	e7fb      	b.n	c6e4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    c6ec:	2300      	movs	r3, #0
    c6ee:	e7f9      	b.n	c6e4 <usb_find_cfg_desc+0x4c>
	return NULL;
    c6f0:	2300      	movs	r3, #0
    c6f2:	e7f7      	b.n	c6e4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    c6f4:	2300      	movs	r3, #0
    c6f6:	e7f5      	b.n	c6e4 <usb_find_cfg_desc+0x4c>
	return NULL;
    c6f8:	2300      	movs	r3, #0
    c6fa:	e7f3      	b.n	c6e4 <usb_find_cfg_desc+0x4c>
    c6fc:	0000c619 	.word	0x0000c619

0000c700 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c700:	4288      	cmp	r0, r1
    c702:	d217      	bcs.n	c734 <usb_find_str_desc+0x34>
{
    c704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c708:	460d      	mov	r5, r1
    c70a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    c70c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c70e:	f04f 0803 	mov.w	r8, #3
    c712:	4f0c      	ldr	r7, [pc, #48]	; (c744 <usb_find_str_desc+0x44>)
    c714:	4642      	mov	r2, r8
    c716:	4629      	mov	r1, r5
    c718:	47b8      	blx	r7
		if (desc) {
    c71a:	4603      	mov	r3, r0
    c71c:	b170      	cbz	r0, c73c <usb_find_str_desc+0x3c>
	return desc[0];
    c71e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    c720:	2801      	cmp	r0, #1
    c722:	d90a      	bls.n	c73a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    c724:	42a6      	cmp	r6, r4
    c726:	d009      	beq.n	c73c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    c728:	4418      	add	r0, r3
    c72a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    c72c:	4285      	cmp	r5, r0
    c72e:	d8f1      	bhi.n	c714 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    c730:	2300      	movs	r3, #0
    c732:	e003      	b.n	c73c <usb_find_str_desc+0x3c>
    c734:	2300      	movs	r3, #0
}
    c736:	4618      	mov	r0, r3
    c738:	4770      	bx	lr
			_desc_len_check();
    c73a:	2300      	movs	r3, #0
}
    c73c:	4618      	mov	r0, r3
    c73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c742:	bf00      	nop
    c744:	0000c619 	.word	0x0000c619

0000c748 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    c748:	4b3a      	ldr	r3, [pc, #232]	; (c834 <hiddf_demo_sof_event+0xec>)
    c74a:	791b      	ldrb	r3, [r3, #4]
    c74c:	2b0a      	cmp	r3, #10
    c74e:	d803      	bhi.n	c758 <hiddf_demo_sof_event+0x10>
    c750:	3301      	adds	r3, #1
    c752:	4a38      	ldr	r2, [pc, #224]	; (c834 <hiddf_demo_sof_event+0xec>)
    c754:	7113      	strb	r3, [r2, #4]
    c756:	4770      	bx	lr
{
    c758:	b570      	push	{r4, r5, r6, lr}
    c75a:	b084      	sub	sp, #16
		interval = 0;
    c75c:	4b35      	ldr	r3, [pc, #212]	; (c834 <hiddf_demo_sof_event+0xec>)
    c75e:	2200      	movs	r2, #0
    c760:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    c762:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    c764:	a801      	add	r0, sp, #4
    c766:	4b34      	ldr	r3, [pc, #208]	; (c838 <hiddf_demo_sof_event+0xf0>)
    c768:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    c76a:	096b      	lsrs	r3, r5, #5
    c76c:	4933      	ldr	r1, [pc, #204]	; (c83c <hiddf_demo_sof_event+0xf4>)
    c76e:	01db      	lsls	r3, r3, #7
    c770:	18ca      	adds	r2, r1, r3
    c772:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    c774:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    c776:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    c778:	405c      	eors	r4, r3
    c77a:	400c      	ands	r4, r1
    c77c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    c77e:	a801      	add	r0, sp, #4
    c780:	4b2f      	ldr	r3, [pc, #188]	; (c840 <hiddf_demo_sof_event+0xf8>)
    c782:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    c784:	f005 051f 	and.w	r5, r5, #31
    c788:	2301      	movs	r3, #1
    c78a:	fa03 f505 	lsl.w	r5, r3, r5
    c78e:	4225      	tst	r5, r4
    c790:	d040      	beq.n	c814 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    c792:	4b28      	ldr	r3, [pc, #160]	; (c834 <hiddf_demo_sof_event+0xec>)
    c794:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    c796:	a802      	add	r0, sp, #8
    c798:	4b27      	ldr	r3, [pc, #156]	; (c838 <hiddf_demo_sof_event+0xf0>)
    c79a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    c79c:	096b      	lsrs	r3, r5, #5
    c79e:	4927      	ldr	r1, [pc, #156]	; (c83c <hiddf_demo_sof_event+0xf4>)
    c7a0:	01db      	lsls	r3, r3, #7
    c7a2:	18ca      	adds	r2, r1, r3
    c7a4:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    c7a6:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    c7a8:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    c7aa:	405c      	eors	r4, r3
    c7ac:	400c      	ands	r4, r1
    c7ae:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    c7b0:	a802      	add	r0, sp, #8
    c7b2:	4b23      	ldr	r3, [pc, #140]	; (c840 <hiddf_demo_sof_event+0xf8>)
    c7b4:	4798      	blx	r3
    c7b6:	f005 051f 	and.w	r5, r5, #31
    c7ba:	2301      	movs	r3, #1
    c7bc:	fa03 f505 	lsl.w	r5, r3, r5
    c7c0:	4225      	tst	r5, r4
    c7c2:	d02d      	beq.n	c820 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    c7c4:	4d1b      	ldr	r5, [pc, #108]	; (c834 <hiddf_demo_sof_event+0xec>)
    c7c6:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    c7c8:	a803      	add	r0, sp, #12
    c7ca:	4b1b      	ldr	r3, [pc, #108]	; (c838 <hiddf_demo_sof_event+0xf0>)
    c7cc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    c7ce:	0973      	lsrs	r3, r6, #5
    c7d0:	491a      	ldr	r1, [pc, #104]	; (c83c <hiddf_demo_sof_event+0xf4>)
    c7d2:	01db      	lsls	r3, r3, #7
    c7d4:	18ca      	adds	r2, r1, r3
    c7d6:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    c7d8:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    c7da:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    c7dc:	405c      	eors	r4, r3
    c7de:	400c      	ands	r4, r1
    c7e0:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    c7e2:	a803      	add	r0, sp, #12
    c7e4:	4b16      	ldr	r3, [pc, #88]	; (c840 <hiddf_demo_sof_event+0xf8>)
    c7e6:	4798      	blx	r3
    c7e8:	f006 061f 	and.w	r6, r6, #31
    c7ec:	2301      	movs	r3, #1
    c7ee:	40b3      	lsls	r3, r6
    c7f0:	401c      	ands	r4, r3
    c7f2:	bf0c      	ite	eq
    c7f4:	2301      	moveq	r3, #1
    c7f6:	2300      	movne	r3, #0
    c7f8:	7d2a      	ldrb	r2, [r5, #20]
    c7fa:	429a      	cmp	r2, r3
    c7fc:	d008      	beq.n	c810 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    c7fe:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    c800:	b19c      	cbz	r4, c82a <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    c802:	2200      	movs	r2, #0
    c804:	4b0f      	ldr	r3, [pc, #60]	; (c844 <hiddf_demo_sof_event+0xfc>)
    c806:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    c808:	2101      	movs	r1, #1
    c80a:	480e      	ldr	r0, [pc, #56]	; (c844 <hiddf_demo_sof_event+0xfc>)
    c80c:	4b0e      	ldr	r3, [pc, #56]	; (c848 <hiddf_demo_sof_event+0x100>)
    c80e:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    c810:	b004      	add	sp, #16
    c812:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    c814:	4619      	mov	r1, r3
    c816:	f06f 0004 	mvn.w	r0, #4
    c81a:	4b0c      	ldr	r3, [pc, #48]	; (c84c <hiddf_demo_sof_event+0x104>)
    c81c:	4798      	blx	r3
    c81e:	e7b8      	b.n	c792 <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    c820:	4619      	mov	r1, r3
    c822:	2005      	movs	r0, #5
    c824:	4b09      	ldr	r3, [pc, #36]	; (c84c <hiddf_demo_sof_event+0x104>)
    c826:	4798      	blx	r3
    c828:	e7cc      	b.n	c7c4 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    c82a:	2201      	movs	r2, #1
    c82c:	4b05      	ldr	r3, [pc, #20]	; (c844 <hiddf_demo_sof_event+0xfc>)
    c82e:	709a      	strb	r2, [r3, #2]
    c830:	e7ea      	b.n	c808 <hiddf_demo_sof_event+0xc0>
    c832:	bf00      	nop
    c834:	20000ee4 	.word	0x20000ee4
    c838:	00005c01 	.word	0x00005c01
    c83c:	41008000 	.word	0x41008000
    c840:	00005c0f 	.word	0x00005c0f
    c844:	200003a8 	.word	0x200003a8
    c848:	0000b979 	.word	0x0000b979
    c84c:	0000bc0d 	.word	0x0000bc0d

0000c850 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    c850:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    c852:	4805      	ldr	r0, [pc, #20]	; (c868 <composite_device_init+0x18>)
    c854:	4b05      	ldr	r3, [pc, #20]	; (c86c <composite_device_init+0x1c>)
    c856:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    c858:	4b05      	ldr	r3, [pc, #20]	; (c870 <composite_device_init+0x20>)
    c85a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    c85c:	4b05      	ldr	r3, [pc, #20]	; (c874 <composite_device_init+0x24>)
    c85e:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    c860:	4b05      	ldr	r3, [pc, #20]	; (c878 <composite_device_init+0x28>)
    c862:	4798      	blx	r3
    c864:	bd08      	pop	{r3, pc}
    c866:	bf00      	nop
    c868:	20000efc 	.word	0x20000efc
    c86c:	0000c549 	.word	0x0000c549
    c870:	0000b681 	.word	0x0000b681
    c874:	0000bbc9 	.word	0x0000bbc9
    c878:	0000b935 	.word	0x0000b935

0000c87c <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    c87c:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    c87e:	4803      	ldr	r0, [pc, #12]	; (c88c <composite_device_start+0x10>)
    c880:	4b03      	ldr	r3, [pc, #12]	; (c890 <composite_device_start+0x14>)
    c882:	4798      	blx	r3
	usbdc_attach();
    c884:	4b03      	ldr	r3, [pc, #12]	; (c894 <composite_device_start+0x18>)
    c886:	4798      	blx	r3
    c888:	bd08      	pop	{r3, pc}
    c88a:	bf00      	nop
    c88c:	200003b4 	.word	0x200003b4
    c890:	0000c5b9 	.word	0x0000c5b9
    c894:	0000c5ed 	.word	0x0000c5ed

0000c898 <usb_init>:
		}
	}
}

void usb_init(void)
{
    c898:	b508      	push	{r3, lr}

	composite_device_init();
    c89a:	4b01      	ldr	r3, [pc, #4]	; (c8a0 <usb_init+0x8>)
    c89c:	4798      	blx	r3
    c89e:	bd08      	pop	{r3, pc}
    c8a0:	0000c851 	.word	0x0000c851

0000c8a4 <__aeabi_drsub>:
    c8a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c8a8:	e002      	b.n	c8b0 <__adddf3>
    c8aa:	bf00      	nop

0000c8ac <__aeabi_dsub>:
    c8ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c8b0 <__adddf3>:
    c8b0:	b530      	push	{r4, r5, lr}
    c8b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c8b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c8ba:	ea94 0f05 	teq	r4, r5
    c8be:	bf08      	it	eq
    c8c0:	ea90 0f02 	teqeq	r0, r2
    c8c4:	bf1f      	itttt	ne
    c8c6:	ea54 0c00 	orrsne.w	ip, r4, r0
    c8ca:	ea55 0c02 	orrsne.w	ip, r5, r2
    c8ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c8d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c8d6:	f000 80e2 	beq.w	ca9e <__adddf3+0x1ee>
    c8da:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c8de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c8e2:	bfb8      	it	lt
    c8e4:	426d      	neglt	r5, r5
    c8e6:	dd0c      	ble.n	c902 <__adddf3+0x52>
    c8e8:	442c      	add	r4, r5
    c8ea:	ea80 0202 	eor.w	r2, r0, r2
    c8ee:	ea81 0303 	eor.w	r3, r1, r3
    c8f2:	ea82 0000 	eor.w	r0, r2, r0
    c8f6:	ea83 0101 	eor.w	r1, r3, r1
    c8fa:	ea80 0202 	eor.w	r2, r0, r2
    c8fe:	ea81 0303 	eor.w	r3, r1, r3
    c902:	2d36      	cmp	r5, #54	; 0x36
    c904:	bf88      	it	hi
    c906:	bd30      	pophi	{r4, r5, pc}
    c908:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c90c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c910:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c914:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c918:	d002      	beq.n	c920 <__adddf3+0x70>
    c91a:	4240      	negs	r0, r0
    c91c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c920:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c924:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c928:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c92c:	d002      	beq.n	c934 <__adddf3+0x84>
    c92e:	4252      	negs	r2, r2
    c930:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c934:	ea94 0f05 	teq	r4, r5
    c938:	f000 80a7 	beq.w	ca8a <__adddf3+0x1da>
    c93c:	f1a4 0401 	sub.w	r4, r4, #1
    c940:	f1d5 0e20 	rsbs	lr, r5, #32
    c944:	db0d      	blt.n	c962 <__adddf3+0xb2>
    c946:	fa02 fc0e 	lsl.w	ip, r2, lr
    c94a:	fa22 f205 	lsr.w	r2, r2, r5
    c94e:	1880      	adds	r0, r0, r2
    c950:	f141 0100 	adc.w	r1, r1, #0
    c954:	fa03 f20e 	lsl.w	r2, r3, lr
    c958:	1880      	adds	r0, r0, r2
    c95a:	fa43 f305 	asr.w	r3, r3, r5
    c95e:	4159      	adcs	r1, r3
    c960:	e00e      	b.n	c980 <__adddf3+0xd0>
    c962:	f1a5 0520 	sub.w	r5, r5, #32
    c966:	f10e 0e20 	add.w	lr, lr, #32
    c96a:	2a01      	cmp	r2, #1
    c96c:	fa03 fc0e 	lsl.w	ip, r3, lr
    c970:	bf28      	it	cs
    c972:	f04c 0c02 	orrcs.w	ip, ip, #2
    c976:	fa43 f305 	asr.w	r3, r3, r5
    c97a:	18c0      	adds	r0, r0, r3
    c97c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c980:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c984:	d507      	bpl.n	c996 <__adddf3+0xe6>
    c986:	f04f 0e00 	mov.w	lr, #0
    c98a:	f1dc 0c00 	rsbs	ip, ip, #0
    c98e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c992:	eb6e 0101 	sbc.w	r1, lr, r1
    c996:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c99a:	d31b      	bcc.n	c9d4 <__adddf3+0x124>
    c99c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c9a0:	d30c      	bcc.n	c9bc <__adddf3+0x10c>
    c9a2:	0849      	lsrs	r1, r1, #1
    c9a4:	ea5f 0030 	movs.w	r0, r0, rrx
    c9a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c9ac:	f104 0401 	add.w	r4, r4, #1
    c9b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c9b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c9b8:	f080 809a 	bcs.w	caf0 <__adddf3+0x240>
    c9bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c9c0:	bf08      	it	eq
    c9c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c9c6:	f150 0000 	adcs.w	r0, r0, #0
    c9ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c9ce:	ea41 0105 	orr.w	r1, r1, r5
    c9d2:	bd30      	pop	{r4, r5, pc}
    c9d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c9d8:	4140      	adcs	r0, r0
    c9da:	eb41 0101 	adc.w	r1, r1, r1
    c9de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c9e2:	f1a4 0401 	sub.w	r4, r4, #1
    c9e6:	d1e9      	bne.n	c9bc <__adddf3+0x10c>
    c9e8:	f091 0f00 	teq	r1, #0
    c9ec:	bf04      	itt	eq
    c9ee:	4601      	moveq	r1, r0
    c9f0:	2000      	moveq	r0, #0
    c9f2:	fab1 f381 	clz	r3, r1
    c9f6:	bf08      	it	eq
    c9f8:	3320      	addeq	r3, #32
    c9fa:	f1a3 030b 	sub.w	r3, r3, #11
    c9fe:	f1b3 0220 	subs.w	r2, r3, #32
    ca02:	da0c      	bge.n	ca1e <__adddf3+0x16e>
    ca04:	320c      	adds	r2, #12
    ca06:	dd08      	ble.n	ca1a <__adddf3+0x16a>
    ca08:	f102 0c14 	add.w	ip, r2, #20
    ca0c:	f1c2 020c 	rsb	r2, r2, #12
    ca10:	fa01 f00c 	lsl.w	r0, r1, ip
    ca14:	fa21 f102 	lsr.w	r1, r1, r2
    ca18:	e00c      	b.n	ca34 <__adddf3+0x184>
    ca1a:	f102 0214 	add.w	r2, r2, #20
    ca1e:	bfd8      	it	le
    ca20:	f1c2 0c20 	rsble	ip, r2, #32
    ca24:	fa01 f102 	lsl.w	r1, r1, r2
    ca28:	fa20 fc0c 	lsr.w	ip, r0, ip
    ca2c:	bfdc      	itt	le
    ca2e:	ea41 010c 	orrle.w	r1, r1, ip
    ca32:	4090      	lslle	r0, r2
    ca34:	1ae4      	subs	r4, r4, r3
    ca36:	bfa2      	ittt	ge
    ca38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    ca3c:	4329      	orrge	r1, r5
    ca3e:	bd30      	popge	{r4, r5, pc}
    ca40:	ea6f 0404 	mvn.w	r4, r4
    ca44:	3c1f      	subs	r4, #31
    ca46:	da1c      	bge.n	ca82 <__adddf3+0x1d2>
    ca48:	340c      	adds	r4, #12
    ca4a:	dc0e      	bgt.n	ca6a <__adddf3+0x1ba>
    ca4c:	f104 0414 	add.w	r4, r4, #20
    ca50:	f1c4 0220 	rsb	r2, r4, #32
    ca54:	fa20 f004 	lsr.w	r0, r0, r4
    ca58:	fa01 f302 	lsl.w	r3, r1, r2
    ca5c:	ea40 0003 	orr.w	r0, r0, r3
    ca60:	fa21 f304 	lsr.w	r3, r1, r4
    ca64:	ea45 0103 	orr.w	r1, r5, r3
    ca68:	bd30      	pop	{r4, r5, pc}
    ca6a:	f1c4 040c 	rsb	r4, r4, #12
    ca6e:	f1c4 0220 	rsb	r2, r4, #32
    ca72:	fa20 f002 	lsr.w	r0, r0, r2
    ca76:	fa01 f304 	lsl.w	r3, r1, r4
    ca7a:	ea40 0003 	orr.w	r0, r0, r3
    ca7e:	4629      	mov	r1, r5
    ca80:	bd30      	pop	{r4, r5, pc}
    ca82:	fa21 f004 	lsr.w	r0, r1, r4
    ca86:	4629      	mov	r1, r5
    ca88:	bd30      	pop	{r4, r5, pc}
    ca8a:	f094 0f00 	teq	r4, #0
    ca8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    ca92:	bf06      	itte	eq
    ca94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    ca98:	3401      	addeq	r4, #1
    ca9a:	3d01      	subne	r5, #1
    ca9c:	e74e      	b.n	c93c <__adddf3+0x8c>
    ca9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    caa2:	bf18      	it	ne
    caa4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    caa8:	d029      	beq.n	cafe <__adddf3+0x24e>
    caaa:	ea94 0f05 	teq	r4, r5
    caae:	bf08      	it	eq
    cab0:	ea90 0f02 	teqeq	r0, r2
    cab4:	d005      	beq.n	cac2 <__adddf3+0x212>
    cab6:	ea54 0c00 	orrs.w	ip, r4, r0
    caba:	bf04      	itt	eq
    cabc:	4619      	moveq	r1, r3
    cabe:	4610      	moveq	r0, r2
    cac0:	bd30      	pop	{r4, r5, pc}
    cac2:	ea91 0f03 	teq	r1, r3
    cac6:	bf1e      	ittt	ne
    cac8:	2100      	movne	r1, #0
    caca:	2000      	movne	r0, #0
    cacc:	bd30      	popne	{r4, r5, pc}
    cace:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    cad2:	d105      	bne.n	cae0 <__adddf3+0x230>
    cad4:	0040      	lsls	r0, r0, #1
    cad6:	4149      	adcs	r1, r1
    cad8:	bf28      	it	cs
    cada:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    cade:	bd30      	pop	{r4, r5, pc}
    cae0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    cae4:	bf3c      	itt	cc
    cae6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    caea:	bd30      	popcc	{r4, r5, pc}
    caec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    caf0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    caf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    caf8:	f04f 0000 	mov.w	r0, #0
    cafc:	bd30      	pop	{r4, r5, pc}
    cafe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cb02:	bf1a      	itte	ne
    cb04:	4619      	movne	r1, r3
    cb06:	4610      	movne	r0, r2
    cb08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    cb0c:	bf1c      	itt	ne
    cb0e:	460b      	movne	r3, r1
    cb10:	4602      	movne	r2, r0
    cb12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cb16:	bf06      	itte	eq
    cb18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    cb1c:	ea91 0f03 	teqeq	r1, r3
    cb20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    cb24:	bd30      	pop	{r4, r5, pc}
    cb26:	bf00      	nop

0000cb28 <__aeabi_ui2d>:
    cb28:	f090 0f00 	teq	r0, #0
    cb2c:	bf04      	itt	eq
    cb2e:	2100      	moveq	r1, #0
    cb30:	4770      	bxeq	lr
    cb32:	b530      	push	{r4, r5, lr}
    cb34:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb38:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb3c:	f04f 0500 	mov.w	r5, #0
    cb40:	f04f 0100 	mov.w	r1, #0
    cb44:	e750      	b.n	c9e8 <__adddf3+0x138>
    cb46:	bf00      	nop

0000cb48 <__aeabi_i2d>:
    cb48:	f090 0f00 	teq	r0, #0
    cb4c:	bf04      	itt	eq
    cb4e:	2100      	moveq	r1, #0
    cb50:	4770      	bxeq	lr
    cb52:	b530      	push	{r4, r5, lr}
    cb54:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb58:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cb60:	bf48      	it	mi
    cb62:	4240      	negmi	r0, r0
    cb64:	f04f 0100 	mov.w	r1, #0
    cb68:	e73e      	b.n	c9e8 <__adddf3+0x138>
    cb6a:	bf00      	nop

0000cb6c <__aeabi_f2d>:
    cb6c:	0042      	lsls	r2, r0, #1
    cb6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    cb72:	ea4f 0131 	mov.w	r1, r1, rrx
    cb76:	ea4f 7002 	mov.w	r0, r2, lsl #28
    cb7a:	bf1f      	itttt	ne
    cb7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    cb80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cb84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    cb88:	4770      	bxne	lr
    cb8a:	f092 0f00 	teq	r2, #0
    cb8e:	bf14      	ite	ne
    cb90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cb94:	4770      	bxeq	lr
    cb96:	b530      	push	{r4, r5, lr}
    cb98:	f44f 7460 	mov.w	r4, #896	; 0x380
    cb9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cba0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cba4:	e720      	b.n	c9e8 <__adddf3+0x138>
    cba6:	bf00      	nop

0000cba8 <__aeabi_ul2d>:
    cba8:	ea50 0201 	orrs.w	r2, r0, r1
    cbac:	bf08      	it	eq
    cbae:	4770      	bxeq	lr
    cbb0:	b530      	push	{r4, r5, lr}
    cbb2:	f04f 0500 	mov.w	r5, #0
    cbb6:	e00a      	b.n	cbce <__aeabi_l2d+0x16>

0000cbb8 <__aeabi_l2d>:
    cbb8:	ea50 0201 	orrs.w	r2, r0, r1
    cbbc:	bf08      	it	eq
    cbbe:	4770      	bxeq	lr
    cbc0:	b530      	push	{r4, r5, lr}
    cbc2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    cbc6:	d502      	bpl.n	cbce <__aeabi_l2d+0x16>
    cbc8:	4240      	negs	r0, r0
    cbca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cbce:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cbd2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cbd6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    cbda:	f43f aedc 	beq.w	c996 <__adddf3+0xe6>
    cbde:	f04f 0203 	mov.w	r2, #3
    cbe2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cbe6:	bf18      	it	ne
    cbe8:	3203      	addne	r2, #3
    cbea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cbee:	bf18      	it	ne
    cbf0:	3203      	addne	r2, #3
    cbf2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    cbf6:	f1c2 0320 	rsb	r3, r2, #32
    cbfa:	fa00 fc03 	lsl.w	ip, r0, r3
    cbfe:	fa20 f002 	lsr.w	r0, r0, r2
    cc02:	fa01 fe03 	lsl.w	lr, r1, r3
    cc06:	ea40 000e 	orr.w	r0, r0, lr
    cc0a:	fa21 f102 	lsr.w	r1, r1, r2
    cc0e:	4414      	add	r4, r2
    cc10:	e6c1      	b.n	c996 <__adddf3+0xe6>
    cc12:	bf00      	nop

0000cc14 <__aeabi_dmul>:
    cc14:	b570      	push	{r4, r5, r6, lr}
    cc16:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cc1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cc1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cc22:	bf1d      	ittte	ne
    cc24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cc28:	ea94 0f0c 	teqne	r4, ip
    cc2c:	ea95 0f0c 	teqne	r5, ip
    cc30:	f000 f8de 	bleq	cdf0 <__aeabi_dmul+0x1dc>
    cc34:	442c      	add	r4, r5
    cc36:	ea81 0603 	eor.w	r6, r1, r3
    cc3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    cc3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    cc42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    cc46:	bf18      	it	ne
    cc48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    cc4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cc50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cc54:	d038      	beq.n	ccc8 <__aeabi_dmul+0xb4>
    cc56:	fba0 ce02 	umull	ip, lr, r0, r2
    cc5a:	f04f 0500 	mov.w	r5, #0
    cc5e:	fbe1 e502 	umlal	lr, r5, r1, r2
    cc62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    cc66:	fbe0 e503 	umlal	lr, r5, r0, r3
    cc6a:	f04f 0600 	mov.w	r6, #0
    cc6e:	fbe1 5603 	umlal	r5, r6, r1, r3
    cc72:	f09c 0f00 	teq	ip, #0
    cc76:	bf18      	it	ne
    cc78:	f04e 0e01 	orrne.w	lr, lr, #1
    cc7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    cc80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    cc84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    cc88:	d204      	bcs.n	cc94 <__aeabi_dmul+0x80>
    cc8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    cc8e:	416d      	adcs	r5, r5
    cc90:	eb46 0606 	adc.w	r6, r6, r6
    cc94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    cc98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    cc9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    cca0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    cca4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    cca8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ccac:	bf88      	it	hi
    ccae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ccb2:	d81e      	bhi.n	ccf2 <__aeabi_dmul+0xde>
    ccb4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    ccb8:	bf08      	it	eq
    ccba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    ccbe:	f150 0000 	adcs.w	r0, r0, #0
    ccc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ccc6:	bd70      	pop	{r4, r5, r6, pc}
    ccc8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    cccc:	ea46 0101 	orr.w	r1, r6, r1
    ccd0:	ea40 0002 	orr.w	r0, r0, r2
    ccd4:	ea81 0103 	eor.w	r1, r1, r3
    ccd8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    ccdc:	bfc2      	ittt	gt
    ccde:	ebd4 050c 	rsbsgt	r5, r4, ip
    cce2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cce6:	bd70      	popgt	{r4, r5, r6, pc}
    cce8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ccec:	f04f 0e00 	mov.w	lr, #0
    ccf0:	3c01      	subs	r4, #1
    ccf2:	f300 80ab 	bgt.w	ce4c <__aeabi_dmul+0x238>
    ccf6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    ccfa:	bfde      	ittt	le
    ccfc:	2000      	movle	r0, #0
    ccfe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    cd02:	bd70      	pople	{r4, r5, r6, pc}
    cd04:	f1c4 0400 	rsb	r4, r4, #0
    cd08:	3c20      	subs	r4, #32
    cd0a:	da35      	bge.n	cd78 <__aeabi_dmul+0x164>
    cd0c:	340c      	adds	r4, #12
    cd0e:	dc1b      	bgt.n	cd48 <__aeabi_dmul+0x134>
    cd10:	f104 0414 	add.w	r4, r4, #20
    cd14:	f1c4 0520 	rsb	r5, r4, #32
    cd18:	fa00 f305 	lsl.w	r3, r0, r5
    cd1c:	fa20 f004 	lsr.w	r0, r0, r4
    cd20:	fa01 f205 	lsl.w	r2, r1, r5
    cd24:	ea40 0002 	orr.w	r0, r0, r2
    cd28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    cd2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cd30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cd34:	fa21 f604 	lsr.w	r6, r1, r4
    cd38:	eb42 0106 	adc.w	r1, r2, r6
    cd3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cd40:	bf08      	it	eq
    cd42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cd46:	bd70      	pop	{r4, r5, r6, pc}
    cd48:	f1c4 040c 	rsb	r4, r4, #12
    cd4c:	f1c4 0520 	rsb	r5, r4, #32
    cd50:	fa00 f304 	lsl.w	r3, r0, r4
    cd54:	fa20 f005 	lsr.w	r0, r0, r5
    cd58:	fa01 f204 	lsl.w	r2, r1, r4
    cd5c:	ea40 0002 	orr.w	r0, r0, r2
    cd60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cd64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cd68:	f141 0100 	adc.w	r1, r1, #0
    cd6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cd70:	bf08      	it	eq
    cd72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cd76:	bd70      	pop	{r4, r5, r6, pc}
    cd78:	f1c4 0520 	rsb	r5, r4, #32
    cd7c:	fa00 f205 	lsl.w	r2, r0, r5
    cd80:	ea4e 0e02 	orr.w	lr, lr, r2
    cd84:	fa20 f304 	lsr.w	r3, r0, r4
    cd88:	fa01 f205 	lsl.w	r2, r1, r5
    cd8c:	ea43 0302 	orr.w	r3, r3, r2
    cd90:	fa21 f004 	lsr.w	r0, r1, r4
    cd94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cd98:	fa21 f204 	lsr.w	r2, r1, r4
    cd9c:	ea20 0002 	bic.w	r0, r0, r2
    cda0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    cda4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cda8:	bf08      	it	eq
    cdaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cdae:	bd70      	pop	{r4, r5, r6, pc}
    cdb0:	f094 0f00 	teq	r4, #0
    cdb4:	d10f      	bne.n	cdd6 <__aeabi_dmul+0x1c2>
    cdb6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    cdba:	0040      	lsls	r0, r0, #1
    cdbc:	eb41 0101 	adc.w	r1, r1, r1
    cdc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cdc4:	bf08      	it	eq
    cdc6:	3c01      	subeq	r4, #1
    cdc8:	d0f7      	beq.n	cdba <__aeabi_dmul+0x1a6>
    cdca:	ea41 0106 	orr.w	r1, r1, r6
    cdce:	f095 0f00 	teq	r5, #0
    cdd2:	bf18      	it	ne
    cdd4:	4770      	bxne	lr
    cdd6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    cdda:	0052      	lsls	r2, r2, #1
    cddc:	eb43 0303 	adc.w	r3, r3, r3
    cde0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    cde4:	bf08      	it	eq
    cde6:	3d01      	subeq	r5, #1
    cde8:	d0f7      	beq.n	cdda <__aeabi_dmul+0x1c6>
    cdea:	ea43 0306 	orr.w	r3, r3, r6
    cdee:	4770      	bx	lr
    cdf0:	ea94 0f0c 	teq	r4, ip
    cdf4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cdf8:	bf18      	it	ne
    cdfa:	ea95 0f0c 	teqne	r5, ip
    cdfe:	d00c      	beq.n	ce1a <__aeabi_dmul+0x206>
    ce00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ce04:	bf18      	it	ne
    ce06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ce0a:	d1d1      	bne.n	cdb0 <__aeabi_dmul+0x19c>
    ce0c:	ea81 0103 	eor.w	r1, r1, r3
    ce10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ce14:	f04f 0000 	mov.w	r0, #0
    ce18:	bd70      	pop	{r4, r5, r6, pc}
    ce1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ce1e:	bf06      	itte	eq
    ce20:	4610      	moveq	r0, r2
    ce22:	4619      	moveq	r1, r3
    ce24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ce28:	d019      	beq.n	ce5e <__aeabi_dmul+0x24a>
    ce2a:	ea94 0f0c 	teq	r4, ip
    ce2e:	d102      	bne.n	ce36 <__aeabi_dmul+0x222>
    ce30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    ce34:	d113      	bne.n	ce5e <__aeabi_dmul+0x24a>
    ce36:	ea95 0f0c 	teq	r5, ip
    ce3a:	d105      	bne.n	ce48 <__aeabi_dmul+0x234>
    ce3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    ce40:	bf1c      	itt	ne
    ce42:	4610      	movne	r0, r2
    ce44:	4619      	movne	r1, r3
    ce46:	d10a      	bne.n	ce5e <__aeabi_dmul+0x24a>
    ce48:	ea81 0103 	eor.w	r1, r1, r3
    ce4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ce50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    ce54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ce58:	f04f 0000 	mov.w	r0, #0
    ce5c:	bd70      	pop	{r4, r5, r6, pc}
    ce5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    ce62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    ce66:	bd70      	pop	{r4, r5, r6, pc}

0000ce68 <__aeabi_ddiv>:
    ce68:	b570      	push	{r4, r5, r6, lr}
    ce6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ce6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    ce72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ce76:	bf1d      	ittte	ne
    ce78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ce7c:	ea94 0f0c 	teqne	r4, ip
    ce80:	ea95 0f0c 	teqne	r5, ip
    ce84:	f000 f8a7 	bleq	cfd6 <__aeabi_ddiv+0x16e>
    ce88:	eba4 0405 	sub.w	r4, r4, r5
    ce8c:	ea81 0e03 	eor.w	lr, r1, r3
    ce90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ce94:	ea4f 3101 	mov.w	r1, r1, lsl #12
    ce98:	f000 8088 	beq.w	cfac <__aeabi_ddiv+0x144>
    ce9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cea0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cea4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    cea8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    ceac:	ea4f 2202 	mov.w	r2, r2, lsl #8
    ceb0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    ceb4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    ceb8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    cebc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    cec0:	429d      	cmp	r5, r3
    cec2:	bf08      	it	eq
    cec4:	4296      	cmpeq	r6, r2
    cec6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    ceca:	f504 7440 	add.w	r4, r4, #768	; 0x300
    cece:	d202      	bcs.n	ced6 <__aeabi_ddiv+0x6e>
    ced0:	085b      	lsrs	r3, r3, #1
    ced2:	ea4f 0232 	mov.w	r2, r2, rrx
    ced6:	1ab6      	subs	r6, r6, r2
    ced8:	eb65 0503 	sbc.w	r5, r5, r3
    cedc:	085b      	lsrs	r3, r3, #1
    cede:	ea4f 0232 	mov.w	r2, r2, rrx
    cee2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    cee6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    ceea:	ebb6 0e02 	subs.w	lr, r6, r2
    ceee:	eb75 0e03 	sbcs.w	lr, r5, r3
    cef2:	bf22      	ittt	cs
    cef4:	1ab6      	subcs	r6, r6, r2
    cef6:	4675      	movcs	r5, lr
    cef8:	ea40 000c 	orrcs.w	r0, r0, ip
    cefc:	085b      	lsrs	r3, r3, #1
    cefe:	ea4f 0232 	mov.w	r2, r2, rrx
    cf02:	ebb6 0e02 	subs.w	lr, r6, r2
    cf06:	eb75 0e03 	sbcs.w	lr, r5, r3
    cf0a:	bf22      	ittt	cs
    cf0c:	1ab6      	subcs	r6, r6, r2
    cf0e:	4675      	movcs	r5, lr
    cf10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    cf14:	085b      	lsrs	r3, r3, #1
    cf16:	ea4f 0232 	mov.w	r2, r2, rrx
    cf1a:	ebb6 0e02 	subs.w	lr, r6, r2
    cf1e:	eb75 0e03 	sbcs.w	lr, r5, r3
    cf22:	bf22      	ittt	cs
    cf24:	1ab6      	subcs	r6, r6, r2
    cf26:	4675      	movcs	r5, lr
    cf28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cf2c:	085b      	lsrs	r3, r3, #1
    cf2e:	ea4f 0232 	mov.w	r2, r2, rrx
    cf32:	ebb6 0e02 	subs.w	lr, r6, r2
    cf36:	eb75 0e03 	sbcs.w	lr, r5, r3
    cf3a:	bf22      	ittt	cs
    cf3c:	1ab6      	subcs	r6, r6, r2
    cf3e:	4675      	movcs	r5, lr
    cf40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    cf44:	ea55 0e06 	orrs.w	lr, r5, r6
    cf48:	d018      	beq.n	cf7c <__aeabi_ddiv+0x114>
    cf4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    cf4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    cf52:	ea4f 1606 	mov.w	r6, r6, lsl #4
    cf56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    cf5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    cf5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    cf62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    cf66:	d1c0      	bne.n	ceea <__aeabi_ddiv+0x82>
    cf68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cf6c:	d10b      	bne.n	cf86 <__aeabi_ddiv+0x11e>
    cf6e:	ea41 0100 	orr.w	r1, r1, r0
    cf72:	f04f 0000 	mov.w	r0, #0
    cf76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    cf7a:	e7b6      	b.n	ceea <__aeabi_ddiv+0x82>
    cf7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cf80:	bf04      	itt	eq
    cf82:	4301      	orreq	r1, r0
    cf84:	2000      	moveq	r0, #0
    cf86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cf8a:	bf88      	it	hi
    cf8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cf90:	f63f aeaf 	bhi.w	ccf2 <__aeabi_dmul+0xde>
    cf94:	ebb5 0c03 	subs.w	ip, r5, r3
    cf98:	bf04      	itt	eq
    cf9a:	ebb6 0c02 	subseq.w	ip, r6, r2
    cf9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    cfa2:	f150 0000 	adcs.w	r0, r0, #0
    cfa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cfaa:	bd70      	pop	{r4, r5, r6, pc}
    cfac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    cfb0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    cfb4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cfb8:	bfc2      	ittt	gt
    cfba:	ebd4 050c 	rsbsgt	r5, r4, ip
    cfbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cfc2:	bd70      	popgt	{r4, r5, r6, pc}
    cfc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cfc8:	f04f 0e00 	mov.w	lr, #0
    cfcc:	3c01      	subs	r4, #1
    cfce:	e690      	b.n	ccf2 <__aeabi_dmul+0xde>
    cfd0:	ea45 0e06 	orr.w	lr, r5, r6
    cfd4:	e68d      	b.n	ccf2 <__aeabi_dmul+0xde>
    cfd6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cfda:	ea94 0f0c 	teq	r4, ip
    cfde:	bf08      	it	eq
    cfe0:	ea95 0f0c 	teqeq	r5, ip
    cfe4:	f43f af3b 	beq.w	ce5e <__aeabi_dmul+0x24a>
    cfe8:	ea94 0f0c 	teq	r4, ip
    cfec:	d10a      	bne.n	d004 <__aeabi_ddiv+0x19c>
    cfee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cff2:	f47f af34 	bne.w	ce5e <__aeabi_dmul+0x24a>
    cff6:	ea95 0f0c 	teq	r5, ip
    cffa:	f47f af25 	bne.w	ce48 <__aeabi_dmul+0x234>
    cffe:	4610      	mov	r0, r2
    d000:	4619      	mov	r1, r3
    d002:	e72c      	b.n	ce5e <__aeabi_dmul+0x24a>
    d004:	ea95 0f0c 	teq	r5, ip
    d008:	d106      	bne.n	d018 <__aeabi_ddiv+0x1b0>
    d00a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d00e:	f43f aefd 	beq.w	ce0c <__aeabi_dmul+0x1f8>
    d012:	4610      	mov	r0, r2
    d014:	4619      	mov	r1, r3
    d016:	e722      	b.n	ce5e <__aeabi_dmul+0x24a>
    d018:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d01c:	bf18      	it	ne
    d01e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d022:	f47f aec5 	bne.w	cdb0 <__aeabi_dmul+0x19c>
    d026:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d02a:	f47f af0d 	bne.w	ce48 <__aeabi_dmul+0x234>
    d02e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d032:	f47f aeeb 	bne.w	ce0c <__aeabi_dmul+0x1f8>
    d036:	e712      	b.n	ce5e <__aeabi_dmul+0x24a>

0000d038 <__aeabi_d2uiz>:
    d038:	004a      	lsls	r2, r1, #1
    d03a:	d211      	bcs.n	d060 <__aeabi_d2uiz+0x28>
    d03c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d040:	d211      	bcs.n	d066 <__aeabi_d2uiz+0x2e>
    d042:	d50d      	bpl.n	d060 <__aeabi_d2uiz+0x28>
    d044:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d048:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d04c:	d40e      	bmi.n	d06c <__aeabi_d2uiz+0x34>
    d04e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d056:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d05a:	fa23 f002 	lsr.w	r0, r3, r2
    d05e:	4770      	bx	lr
    d060:	f04f 0000 	mov.w	r0, #0
    d064:	4770      	bx	lr
    d066:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d06a:	d102      	bne.n	d072 <__aeabi_d2uiz+0x3a>
    d06c:	f04f 30ff 	mov.w	r0, #4294967295
    d070:	4770      	bx	lr
    d072:	f04f 0000 	mov.w	r0, #0
    d076:	4770      	bx	lr

0000d078 <__libc_init_array>:
    d078:	b570      	push	{r4, r5, r6, lr}
    d07a:	4e0d      	ldr	r6, [pc, #52]	; (d0b0 <__libc_init_array+0x38>)
    d07c:	4c0d      	ldr	r4, [pc, #52]	; (d0b4 <__libc_init_array+0x3c>)
    d07e:	1ba4      	subs	r4, r4, r6
    d080:	10a4      	asrs	r4, r4, #2
    d082:	2500      	movs	r5, #0
    d084:	42a5      	cmp	r5, r4
    d086:	d109      	bne.n	d09c <__libc_init_array+0x24>
    d088:	4e0b      	ldr	r6, [pc, #44]	; (d0b8 <__libc_init_array+0x40>)
    d08a:	4c0c      	ldr	r4, [pc, #48]	; (d0bc <__libc_init_array+0x44>)
    d08c:	f002 f89e 	bl	f1cc <_init>
    d090:	1ba4      	subs	r4, r4, r6
    d092:	10a4      	asrs	r4, r4, #2
    d094:	2500      	movs	r5, #0
    d096:	42a5      	cmp	r5, r4
    d098:	d105      	bne.n	d0a6 <__libc_init_array+0x2e>
    d09a:	bd70      	pop	{r4, r5, r6, pc}
    d09c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    d0a0:	4798      	blx	r3
    d0a2:	3501      	adds	r5, #1
    d0a4:	e7ee      	b.n	d084 <__libc_init_array+0xc>
    d0a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    d0aa:	4798      	blx	r3
    d0ac:	3501      	adds	r5, #1
    d0ae:	e7f2      	b.n	d096 <__libc_init_array+0x1e>
    d0b0:	0000f1d8 	.word	0x0000f1d8
    d0b4:	0000f1d8 	.word	0x0000f1d8
    d0b8:	0000f1d8 	.word	0x0000f1d8
    d0bc:	0000f1dc 	.word	0x0000f1dc

0000d0c0 <malloc>:
    d0c0:	4b02      	ldr	r3, [pc, #8]	; (d0cc <malloc+0xc>)
    d0c2:	4601      	mov	r1, r0
    d0c4:	6818      	ldr	r0, [r3, #0]
    d0c6:	f000 b865 	b.w	d194 <_malloc_r>
    d0ca:	bf00      	nop
    d0cc:	20000548 	.word	0x20000548

0000d0d0 <memcpy>:
    d0d0:	b510      	push	{r4, lr}
    d0d2:	1e43      	subs	r3, r0, #1
    d0d4:	440a      	add	r2, r1
    d0d6:	4291      	cmp	r1, r2
    d0d8:	d100      	bne.n	d0dc <memcpy+0xc>
    d0da:	bd10      	pop	{r4, pc}
    d0dc:	f811 4b01 	ldrb.w	r4, [r1], #1
    d0e0:	f803 4f01 	strb.w	r4, [r3, #1]!
    d0e4:	e7f7      	b.n	d0d6 <memcpy+0x6>

0000d0e6 <memset>:
    d0e6:	4402      	add	r2, r0
    d0e8:	4603      	mov	r3, r0
    d0ea:	4293      	cmp	r3, r2
    d0ec:	d100      	bne.n	d0f0 <memset+0xa>
    d0ee:	4770      	bx	lr
    d0f0:	f803 1b01 	strb.w	r1, [r3], #1
    d0f4:	e7f9      	b.n	d0ea <memset+0x4>
	...

0000d0f8 <_free_r>:
    d0f8:	b538      	push	{r3, r4, r5, lr}
    d0fa:	4605      	mov	r5, r0
    d0fc:	2900      	cmp	r1, #0
    d0fe:	d045      	beq.n	d18c <_free_r+0x94>
    d100:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d104:	1f0c      	subs	r4, r1, #4
    d106:	2b00      	cmp	r3, #0
    d108:	bfb8      	it	lt
    d10a:	18e4      	addlt	r4, r4, r3
    d10c:	f000 fcae 	bl	da6c <__malloc_lock>
    d110:	4a1f      	ldr	r2, [pc, #124]	; (d190 <_free_r+0x98>)
    d112:	6813      	ldr	r3, [r2, #0]
    d114:	4610      	mov	r0, r2
    d116:	b933      	cbnz	r3, d126 <_free_r+0x2e>
    d118:	6063      	str	r3, [r4, #4]
    d11a:	6014      	str	r4, [r2, #0]
    d11c:	4628      	mov	r0, r5
    d11e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d122:	f000 bca4 	b.w	da6e <__malloc_unlock>
    d126:	42a3      	cmp	r3, r4
    d128:	d90c      	bls.n	d144 <_free_r+0x4c>
    d12a:	6821      	ldr	r1, [r4, #0]
    d12c:	1862      	adds	r2, r4, r1
    d12e:	4293      	cmp	r3, r2
    d130:	bf04      	itt	eq
    d132:	681a      	ldreq	r2, [r3, #0]
    d134:	685b      	ldreq	r3, [r3, #4]
    d136:	6063      	str	r3, [r4, #4]
    d138:	bf04      	itt	eq
    d13a:	1852      	addeq	r2, r2, r1
    d13c:	6022      	streq	r2, [r4, #0]
    d13e:	6004      	str	r4, [r0, #0]
    d140:	e7ec      	b.n	d11c <_free_r+0x24>
    d142:	4613      	mov	r3, r2
    d144:	685a      	ldr	r2, [r3, #4]
    d146:	b10a      	cbz	r2, d14c <_free_r+0x54>
    d148:	42a2      	cmp	r2, r4
    d14a:	d9fa      	bls.n	d142 <_free_r+0x4a>
    d14c:	6819      	ldr	r1, [r3, #0]
    d14e:	1858      	adds	r0, r3, r1
    d150:	42a0      	cmp	r0, r4
    d152:	d10b      	bne.n	d16c <_free_r+0x74>
    d154:	6820      	ldr	r0, [r4, #0]
    d156:	4401      	add	r1, r0
    d158:	1858      	adds	r0, r3, r1
    d15a:	4282      	cmp	r2, r0
    d15c:	6019      	str	r1, [r3, #0]
    d15e:	d1dd      	bne.n	d11c <_free_r+0x24>
    d160:	6810      	ldr	r0, [r2, #0]
    d162:	6852      	ldr	r2, [r2, #4]
    d164:	605a      	str	r2, [r3, #4]
    d166:	4401      	add	r1, r0
    d168:	6019      	str	r1, [r3, #0]
    d16a:	e7d7      	b.n	d11c <_free_r+0x24>
    d16c:	d902      	bls.n	d174 <_free_r+0x7c>
    d16e:	230c      	movs	r3, #12
    d170:	602b      	str	r3, [r5, #0]
    d172:	e7d3      	b.n	d11c <_free_r+0x24>
    d174:	6820      	ldr	r0, [r4, #0]
    d176:	1821      	adds	r1, r4, r0
    d178:	428a      	cmp	r2, r1
    d17a:	bf04      	itt	eq
    d17c:	6811      	ldreq	r1, [r2, #0]
    d17e:	6852      	ldreq	r2, [r2, #4]
    d180:	6062      	str	r2, [r4, #4]
    d182:	bf04      	itt	eq
    d184:	1809      	addeq	r1, r1, r0
    d186:	6021      	streq	r1, [r4, #0]
    d188:	605c      	str	r4, [r3, #4]
    d18a:	e7c7      	b.n	d11c <_free_r+0x24>
    d18c:	bd38      	pop	{r3, r4, r5, pc}
    d18e:	bf00      	nop
    d190:	20000f3c 	.word	0x20000f3c

0000d194 <_malloc_r>:
    d194:	b570      	push	{r4, r5, r6, lr}
    d196:	1ccd      	adds	r5, r1, #3
    d198:	f025 0503 	bic.w	r5, r5, #3
    d19c:	3508      	adds	r5, #8
    d19e:	2d0c      	cmp	r5, #12
    d1a0:	bf38      	it	cc
    d1a2:	250c      	movcc	r5, #12
    d1a4:	2d00      	cmp	r5, #0
    d1a6:	4606      	mov	r6, r0
    d1a8:	db01      	blt.n	d1ae <_malloc_r+0x1a>
    d1aa:	42a9      	cmp	r1, r5
    d1ac:	d903      	bls.n	d1b6 <_malloc_r+0x22>
    d1ae:	230c      	movs	r3, #12
    d1b0:	6033      	str	r3, [r6, #0]
    d1b2:	2000      	movs	r0, #0
    d1b4:	bd70      	pop	{r4, r5, r6, pc}
    d1b6:	f000 fc59 	bl	da6c <__malloc_lock>
    d1ba:	4a23      	ldr	r2, [pc, #140]	; (d248 <_malloc_r+0xb4>)
    d1bc:	6814      	ldr	r4, [r2, #0]
    d1be:	4621      	mov	r1, r4
    d1c0:	b991      	cbnz	r1, d1e8 <_malloc_r+0x54>
    d1c2:	4c22      	ldr	r4, [pc, #136]	; (d24c <_malloc_r+0xb8>)
    d1c4:	6823      	ldr	r3, [r4, #0]
    d1c6:	b91b      	cbnz	r3, d1d0 <_malloc_r+0x3c>
    d1c8:	4630      	mov	r0, r6
    d1ca:	f000 f8bd 	bl	d348 <_sbrk_r>
    d1ce:	6020      	str	r0, [r4, #0]
    d1d0:	4629      	mov	r1, r5
    d1d2:	4630      	mov	r0, r6
    d1d4:	f000 f8b8 	bl	d348 <_sbrk_r>
    d1d8:	1c43      	adds	r3, r0, #1
    d1da:	d126      	bne.n	d22a <_malloc_r+0x96>
    d1dc:	230c      	movs	r3, #12
    d1de:	6033      	str	r3, [r6, #0]
    d1e0:	4630      	mov	r0, r6
    d1e2:	f000 fc44 	bl	da6e <__malloc_unlock>
    d1e6:	e7e4      	b.n	d1b2 <_malloc_r+0x1e>
    d1e8:	680b      	ldr	r3, [r1, #0]
    d1ea:	1b5b      	subs	r3, r3, r5
    d1ec:	d41a      	bmi.n	d224 <_malloc_r+0x90>
    d1ee:	2b0b      	cmp	r3, #11
    d1f0:	d90f      	bls.n	d212 <_malloc_r+0x7e>
    d1f2:	600b      	str	r3, [r1, #0]
    d1f4:	50cd      	str	r5, [r1, r3]
    d1f6:	18cc      	adds	r4, r1, r3
    d1f8:	4630      	mov	r0, r6
    d1fa:	f000 fc38 	bl	da6e <__malloc_unlock>
    d1fe:	f104 000b 	add.w	r0, r4, #11
    d202:	1d23      	adds	r3, r4, #4
    d204:	f020 0007 	bic.w	r0, r0, #7
    d208:	1ac3      	subs	r3, r0, r3
    d20a:	d01b      	beq.n	d244 <_malloc_r+0xb0>
    d20c:	425a      	negs	r2, r3
    d20e:	50e2      	str	r2, [r4, r3]
    d210:	bd70      	pop	{r4, r5, r6, pc}
    d212:	428c      	cmp	r4, r1
    d214:	bf0d      	iteet	eq
    d216:	6863      	ldreq	r3, [r4, #4]
    d218:	684b      	ldrne	r3, [r1, #4]
    d21a:	6063      	strne	r3, [r4, #4]
    d21c:	6013      	streq	r3, [r2, #0]
    d21e:	bf18      	it	ne
    d220:	460c      	movne	r4, r1
    d222:	e7e9      	b.n	d1f8 <_malloc_r+0x64>
    d224:	460c      	mov	r4, r1
    d226:	6849      	ldr	r1, [r1, #4]
    d228:	e7ca      	b.n	d1c0 <_malloc_r+0x2c>
    d22a:	1cc4      	adds	r4, r0, #3
    d22c:	f024 0403 	bic.w	r4, r4, #3
    d230:	42a0      	cmp	r0, r4
    d232:	d005      	beq.n	d240 <_malloc_r+0xac>
    d234:	1a21      	subs	r1, r4, r0
    d236:	4630      	mov	r0, r6
    d238:	f000 f886 	bl	d348 <_sbrk_r>
    d23c:	3001      	adds	r0, #1
    d23e:	d0cd      	beq.n	d1dc <_malloc_r+0x48>
    d240:	6025      	str	r5, [r4, #0]
    d242:	e7d9      	b.n	d1f8 <_malloc_r+0x64>
    d244:	bd70      	pop	{r4, r5, r6, pc}
    d246:	bf00      	nop
    d248:	20000f3c 	.word	0x20000f3c
    d24c:	20000f40 	.word	0x20000f40

0000d250 <iprintf>:
    d250:	b40f      	push	{r0, r1, r2, r3}
    d252:	4b0a      	ldr	r3, [pc, #40]	; (d27c <iprintf+0x2c>)
    d254:	b513      	push	{r0, r1, r4, lr}
    d256:	681c      	ldr	r4, [r3, #0]
    d258:	b124      	cbz	r4, d264 <iprintf+0x14>
    d25a:	69a3      	ldr	r3, [r4, #24]
    d25c:	b913      	cbnz	r3, d264 <iprintf+0x14>
    d25e:	4620      	mov	r0, r4
    d260:	f000 fb16 	bl	d890 <__sinit>
    d264:	ab05      	add	r3, sp, #20
    d266:	9a04      	ldr	r2, [sp, #16]
    d268:	68a1      	ldr	r1, [r4, #8]
    d26a:	9301      	str	r3, [sp, #4]
    d26c:	4620      	mov	r0, r4
    d26e:	f000 fd77 	bl	dd60 <_vfiprintf_r>
    d272:	b002      	add	sp, #8
    d274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d278:	b004      	add	sp, #16
    d27a:	4770      	bx	lr
    d27c:	20000548 	.word	0x20000548

0000d280 <_puts_r>:
    d280:	b570      	push	{r4, r5, r6, lr}
    d282:	460e      	mov	r6, r1
    d284:	4605      	mov	r5, r0
    d286:	b118      	cbz	r0, d290 <_puts_r+0x10>
    d288:	6983      	ldr	r3, [r0, #24]
    d28a:	b90b      	cbnz	r3, d290 <_puts_r+0x10>
    d28c:	f000 fb00 	bl	d890 <__sinit>
    d290:	69ab      	ldr	r3, [r5, #24]
    d292:	68ac      	ldr	r4, [r5, #8]
    d294:	b913      	cbnz	r3, d29c <_puts_r+0x1c>
    d296:	4628      	mov	r0, r5
    d298:	f000 fafa 	bl	d890 <__sinit>
    d29c:	4b23      	ldr	r3, [pc, #140]	; (d32c <_puts_r+0xac>)
    d29e:	429c      	cmp	r4, r3
    d2a0:	d117      	bne.n	d2d2 <_puts_r+0x52>
    d2a2:	686c      	ldr	r4, [r5, #4]
    d2a4:	89a3      	ldrh	r3, [r4, #12]
    d2a6:	071b      	lsls	r3, r3, #28
    d2a8:	d51d      	bpl.n	d2e6 <_puts_r+0x66>
    d2aa:	6923      	ldr	r3, [r4, #16]
    d2ac:	b1db      	cbz	r3, d2e6 <_puts_r+0x66>
    d2ae:	3e01      	subs	r6, #1
    d2b0:	68a3      	ldr	r3, [r4, #8]
    d2b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    d2b6:	3b01      	subs	r3, #1
    d2b8:	60a3      	str	r3, [r4, #8]
    d2ba:	b9e9      	cbnz	r1, d2f8 <_puts_r+0x78>
    d2bc:	2b00      	cmp	r3, #0
    d2be:	da2e      	bge.n	d31e <_puts_r+0x9e>
    d2c0:	4622      	mov	r2, r4
    d2c2:	210a      	movs	r1, #10
    d2c4:	4628      	mov	r0, r5
    d2c6:	f000 f931 	bl	d52c <__swbuf_r>
    d2ca:	3001      	adds	r0, #1
    d2cc:	d011      	beq.n	d2f2 <_puts_r+0x72>
    d2ce:	200a      	movs	r0, #10
    d2d0:	bd70      	pop	{r4, r5, r6, pc}
    d2d2:	4b17      	ldr	r3, [pc, #92]	; (d330 <_puts_r+0xb0>)
    d2d4:	429c      	cmp	r4, r3
    d2d6:	d101      	bne.n	d2dc <_puts_r+0x5c>
    d2d8:	68ac      	ldr	r4, [r5, #8]
    d2da:	e7e3      	b.n	d2a4 <_puts_r+0x24>
    d2dc:	4b15      	ldr	r3, [pc, #84]	; (d334 <_puts_r+0xb4>)
    d2de:	429c      	cmp	r4, r3
    d2e0:	bf08      	it	eq
    d2e2:	68ec      	ldreq	r4, [r5, #12]
    d2e4:	e7de      	b.n	d2a4 <_puts_r+0x24>
    d2e6:	4621      	mov	r1, r4
    d2e8:	4628      	mov	r0, r5
    d2ea:	f000 f971 	bl	d5d0 <__swsetup_r>
    d2ee:	2800      	cmp	r0, #0
    d2f0:	d0dd      	beq.n	d2ae <_puts_r+0x2e>
    d2f2:	f04f 30ff 	mov.w	r0, #4294967295
    d2f6:	bd70      	pop	{r4, r5, r6, pc}
    d2f8:	2b00      	cmp	r3, #0
    d2fa:	da04      	bge.n	d306 <_puts_r+0x86>
    d2fc:	69a2      	ldr	r2, [r4, #24]
    d2fe:	4293      	cmp	r3, r2
    d300:	db06      	blt.n	d310 <_puts_r+0x90>
    d302:	290a      	cmp	r1, #10
    d304:	d004      	beq.n	d310 <_puts_r+0x90>
    d306:	6823      	ldr	r3, [r4, #0]
    d308:	1c5a      	adds	r2, r3, #1
    d30a:	6022      	str	r2, [r4, #0]
    d30c:	7019      	strb	r1, [r3, #0]
    d30e:	e7cf      	b.n	d2b0 <_puts_r+0x30>
    d310:	4622      	mov	r2, r4
    d312:	4628      	mov	r0, r5
    d314:	f000 f90a 	bl	d52c <__swbuf_r>
    d318:	3001      	adds	r0, #1
    d31a:	d1c9      	bne.n	d2b0 <_puts_r+0x30>
    d31c:	e7e9      	b.n	d2f2 <_puts_r+0x72>
    d31e:	6823      	ldr	r3, [r4, #0]
    d320:	200a      	movs	r0, #10
    d322:	1c5a      	adds	r2, r3, #1
    d324:	6022      	str	r2, [r4, #0]
    d326:	7018      	strb	r0, [r3, #0]
    d328:	bd70      	pop	{r4, r5, r6, pc}
    d32a:	bf00      	nop
    d32c:	0000f158 	.word	0x0000f158
    d330:	0000f178 	.word	0x0000f178
    d334:	0000f138 	.word	0x0000f138

0000d338 <puts>:
    d338:	4b02      	ldr	r3, [pc, #8]	; (d344 <puts+0xc>)
    d33a:	4601      	mov	r1, r0
    d33c:	6818      	ldr	r0, [r3, #0]
    d33e:	f7ff bf9f 	b.w	d280 <_puts_r>
    d342:	bf00      	nop
    d344:	20000548 	.word	0x20000548

0000d348 <_sbrk_r>:
    d348:	b538      	push	{r3, r4, r5, lr}
    d34a:	4c06      	ldr	r4, [pc, #24]	; (d364 <_sbrk_r+0x1c>)
    d34c:	2300      	movs	r3, #0
    d34e:	4605      	mov	r5, r0
    d350:	4608      	mov	r0, r1
    d352:	6023      	str	r3, [r4, #0]
    d354:	f7f9 ff84 	bl	7260 <_sbrk>
    d358:	1c43      	adds	r3, r0, #1
    d35a:	d102      	bne.n	d362 <_sbrk_r+0x1a>
    d35c:	6823      	ldr	r3, [r4, #0]
    d35e:	b103      	cbz	r3, d362 <_sbrk_r+0x1a>
    d360:	602b      	str	r3, [r5, #0]
    d362:	bd38      	pop	{r3, r4, r5, pc}
    d364:	20007d8c 	.word	0x20007d8c

0000d368 <setbuf>:
    d368:	2900      	cmp	r1, #0
    d36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d36e:	bf0c      	ite	eq
    d370:	2202      	moveq	r2, #2
    d372:	2200      	movne	r2, #0
    d374:	f000 b800 	b.w	d378 <setvbuf>

0000d378 <setvbuf>:
    d378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d37c:	461d      	mov	r5, r3
    d37e:	4b51      	ldr	r3, [pc, #324]	; (d4c4 <setvbuf+0x14c>)
    d380:	681e      	ldr	r6, [r3, #0]
    d382:	4604      	mov	r4, r0
    d384:	460f      	mov	r7, r1
    d386:	4690      	mov	r8, r2
    d388:	b126      	cbz	r6, d394 <setvbuf+0x1c>
    d38a:	69b3      	ldr	r3, [r6, #24]
    d38c:	b913      	cbnz	r3, d394 <setvbuf+0x1c>
    d38e:	4630      	mov	r0, r6
    d390:	f000 fa7e 	bl	d890 <__sinit>
    d394:	4b4c      	ldr	r3, [pc, #304]	; (d4c8 <setvbuf+0x150>)
    d396:	429c      	cmp	r4, r3
    d398:	d152      	bne.n	d440 <setvbuf+0xc8>
    d39a:	6874      	ldr	r4, [r6, #4]
    d39c:	f1b8 0f02 	cmp.w	r8, #2
    d3a0:	d006      	beq.n	d3b0 <setvbuf+0x38>
    d3a2:	f1b8 0f01 	cmp.w	r8, #1
    d3a6:	f200 8089 	bhi.w	d4bc <setvbuf+0x144>
    d3aa:	2d00      	cmp	r5, #0
    d3ac:	f2c0 8086 	blt.w	d4bc <setvbuf+0x144>
    d3b0:	4621      	mov	r1, r4
    d3b2:	4630      	mov	r0, r6
    d3b4:	f000 fa02 	bl	d7bc <_fflush_r>
    d3b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d3ba:	b141      	cbz	r1, d3ce <setvbuf+0x56>
    d3bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d3c0:	4299      	cmp	r1, r3
    d3c2:	d002      	beq.n	d3ca <setvbuf+0x52>
    d3c4:	4630      	mov	r0, r6
    d3c6:	f7ff fe97 	bl	d0f8 <_free_r>
    d3ca:	2300      	movs	r3, #0
    d3cc:	6363      	str	r3, [r4, #52]	; 0x34
    d3ce:	2300      	movs	r3, #0
    d3d0:	61a3      	str	r3, [r4, #24]
    d3d2:	6063      	str	r3, [r4, #4]
    d3d4:	89a3      	ldrh	r3, [r4, #12]
    d3d6:	061b      	lsls	r3, r3, #24
    d3d8:	d503      	bpl.n	d3e2 <setvbuf+0x6a>
    d3da:	6921      	ldr	r1, [r4, #16]
    d3dc:	4630      	mov	r0, r6
    d3de:	f7ff fe8b 	bl	d0f8 <_free_r>
    d3e2:	89a3      	ldrh	r3, [r4, #12]
    d3e4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    d3e8:	f023 0303 	bic.w	r3, r3, #3
    d3ec:	f1b8 0f02 	cmp.w	r8, #2
    d3f0:	81a3      	strh	r3, [r4, #12]
    d3f2:	d05d      	beq.n	d4b0 <setvbuf+0x138>
    d3f4:	ab01      	add	r3, sp, #4
    d3f6:	466a      	mov	r2, sp
    d3f8:	4621      	mov	r1, r4
    d3fa:	4630      	mov	r0, r6
    d3fc:	f000 fad2 	bl	d9a4 <__swhatbuf_r>
    d400:	89a3      	ldrh	r3, [r4, #12]
    d402:	4318      	orrs	r0, r3
    d404:	81a0      	strh	r0, [r4, #12]
    d406:	bb2d      	cbnz	r5, d454 <setvbuf+0xdc>
    d408:	9d00      	ldr	r5, [sp, #0]
    d40a:	4628      	mov	r0, r5
    d40c:	f7ff fe58 	bl	d0c0 <malloc>
    d410:	4607      	mov	r7, r0
    d412:	2800      	cmp	r0, #0
    d414:	d14e      	bne.n	d4b4 <setvbuf+0x13c>
    d416:	f8dd 9000 	ldr.w	r9, [sp]
    d41a:	45a9      	cmp	r9, r5
    d41c:	d13c      	bne.n	d498 <setvbuf+0x120>
    d41e:	f04f 30ff 	mov.w	r0, #4294967295
    d422:	89a3      	ldrh	r3, [r4, #12]
    d424:	f043 0302 	orr.w	r3, r3, #2
    d428:	81a3      	strh	r3, [r4, #12]
    d42a:	2300      	movs	r3, #0
    d42c:	60a3      	str	r3, [r4, #8]
    d42e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    d432:	6023      	str	r3, [r4, #0]
    d434:	6123      	str	r3, [r4, #16]
    d436:	2301      	movs	r3, #1
    d438:	6163      	str	r3, [r4, #20]
    d43a:	b003      	add	sp, #12
    d43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d440:	4b22      	ldr	r3, [pc, #136]	; (d4cc <setvbuf+0x154>)
    d442:	429c      	cmp	r4, r3
    d444:	d101      	bne.n	d44a <setvbuf+0xd2>
    d446:	68b4      	ldr	r4, [r6, #8]
    d448:	e7a8      	b.n	d39c <setvbuf+0x24>
    d44a:	4b21      	ldr	r3, [pc, #132]	; (d4d0 <setvbuf+0x158>)
    d44c:	429c      	cmp	r4, r3
    d44e:	bf08      	it	eq
    d450:	68f4      	ldreq	r4, [r6, #12]
    d452:	e7a3      	b.n	d39c <setvbuf+0x24>
    d454:	2f00      	cmp	r7, #0
    d456:	d0d8      	beq.n	d40a <setvbuf+0x92>
    d458:	69b3      	ldr	r3, [r6, #24]
    d45a:	b913      	cbnz	r3, d462 <setvbuf+0xea>
    d45c:	4630      	mov	r0, r6
    d45e:	f000 fa17 	bl	d890 <__sinit>
    d462:	f1b8 0f01 	cmp.w	r8, #1
    d466:	bf08      	it	eq
    d468:	89a3      	ldrheq	r3, [r4, #12]
    d46a:	6027      	str	r7, [r4, #0]
    d46c:	bf04      	itt	eq
    d46e:	f043 0301 	orreq.w	r3, r3, #1
    d472:	81a3      	strheq	r3, [r4, #12]
    d474:	89a3      	ldrh	r3, [r4, #12]
    d476:	6127      	str	r7, [r4, #16]
    d478:	f013 0008 	ands.w	r0, r3, #8
    d47c:	6165      	str	r5, [r4, #20]
    d47e:	d01b      	beq.n	d4b8 <setvbuf+0x140>
    d480:	f013 0001 	ands.w	r0, r3, #1
    d484:	bf18      	it	ne
    d486:	426d      	negne	r5, r5
    d488:	f04f 0300 	mov.w	r3, #0
    d48c:	bf1d      	ittte	ne
    d48e:	60a3      	strne	r3, [r4, #8]
    d490:	61a5      	strne	r5, [r4, #24]
    d492:	4618      	movne	r0, r3
    d494:	60a5      	streq	r5, [r4, #8]
    d496:	e7d0      	b.n	d43a <setvbuf+0xc2>
    d498:	4648      	mov	r0, r9
    d49a:	f7ff fe11 	bl	d0c0 <malloc>
    d49e:	4607      	mov	r7, r0
    d4a0:	2800      	cmp	r0, #0
    d4a2:	d0bc      	beq.n	d41e <setvbuf+0xa6>
    d4a4:	89a3      	ldrh	r3, [r4, #12]
    d4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d4aa:	81a3      	strh	r3, [r4, #12]
    d4ac:	464d      	mov	r5, r9
    d4ae:	e7d3      	b.n	d458 <setvbuf+0xe0>
    d4b0:	2000      	movs	r0, #0
    d4b2:	e7b6      	b.n	d422 <setvbuf+0xaa>
    d4b4:	46a9      	mov	r9, r5
    d4b6:	e7f5      	b.n	d4a4 <setvbuf+0x12c>
    d4b8:	60a0      	str	r0, [r4, #8]
    d4ba:	e7be      	b.n	d43a <setvbuf+0xc2>
    d4bc:	f04f 30ff 	mov.w	r0, #4294967295
    d4c0:	e7bb      	b.n	d43a <setvbuf+0xc2>
    d4c2:	bf00      	nop
    d4c4:	20000548 	.word	0x20000548
    d4c8:	0000f158 	.word	0x0000f158
    d4cc:	0000f178 	.word	0x0000f178
    d4d0:	0000f138 	.word	0x0000f138

0000d4d4 <siprintf>:
    d4d4:	b40e      	push	{r1, r2, r3}
    d4d6:	b500      	push	{lr}
    d4d8:	b09c      	sub	sp, #112	; 0x70
    d4da:	f44f 7102 	mov.w	r1, #520	; 0x208
    d4de:	ab1d      	add	r3, sp, #116	; 0x74
    d4e0:	f8ad 1014 	strh.w	r1, [sp, #20]
    d4e4:	9002      	str	r0, [sp, #8]
    d4e6:	9006      	str	r0, [sp, #24]
    d4e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d4ec:	480a      	ldr	r0, [pc, #40]	; (d518 <siprintf+0x44>)
    d4ee:	9104      	str	r1, [sp, #16]
    d4f0:	9107      	str	r1, [sp, #28]
    d4f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4f6:	f853 2b04 	ldr.w	r2, [r3], #4
    d4fa:	f8ad 1016 	strh.w	r1, [sp, #22]
    d4fe:	6800      	ldr	r0, [r0, #0]
    d500:	9301      	str	r3, [sp, #4]
    d502:	a902      	add	r1, sp, #8
    d504:	f000 fb10 	bl	db28 <_svfiprintf_r>
    d508:	9b02      	ldr	r3, [sp, #8]
    d50a:	2200      	movs	r2, #0
    d50c:	701a      	strb	r2, [r3, #0]
    d50e:	b01c      	add	sp, #112	; 0x70
    d510:	f85d eb04 	ldr.w	lr, [sp], #4
    d514:	b003      	add	sp, #12
    d516:	4770      	bx	lr
    d518:	20000548 	.word	0x20000548

0000d51c <strlen>:
    d51c:	4603      	mov	r3, r0
    d51e:	f813 2b01 	ldrb.w	r2, [r3], #1
    d522:	2a00      	cmp	r2, #0
    d524:	d1fb      	bne.n	d51e <strlen+0x2>
    d526:	1a18      	subs	r0, r3, r0
    d528:	3801      	subs	r0, #1
    d52a:	4770      	bx	lr

0000d52c <__swbuf_r>:
    d52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d52e:	460e      	mov	r6, r1
    d530:	4614      	mov	r4, r2
    d532:	4605      	mov	r5, r0
    d534:	b118      	cbz	r0, d53e <__swbuf_r+0x12>
    d536:	6983      	ldr	r3, [r0, #24]
    d538:	b90b      	cbnz	r3, d53e <__swbuf_r+0x12>
    d53a:	f000 f9a9 	bl	d890 <__sinit>
    d53e:	4b21      	ldr	r3, [pc, #132]	; (d5c4 <__swbuf_r+0x98>)
    d540:	429c      	cmp	r4, r3
    d542:	d12a      	bne.n	d59a <__swbuf_r+0x6e>
    d544:	686c      	ldr	r4, [r5, #4]
    d546:	69a3      	ldr	r3, [r4, #24]
    d548:	60a3      	str	r3, [r4, #8]
    d54a:	89a3      	ldrh	r3, [r4, #12]
    d54c:	071a      	lsls	r2, r3, #28
    d54e:	d52e      	bpl.n	d5ae <__swbuf_r+0x82>
    d550:	6923      	ldr	r3, [r4, #16]
    d552:	b363      	cbz	r3, d5ae <__swbuf_r+0x82>
    d554:	6923      	ldr	r3, [r4, #16]
    d556:	6820      	ldr	r0, [r4, #0]
    d558:	1ac0      	subs	r0, r0, r3
    d55a:	6963      	ldr	r3, [r4, #20]
    d55c:	b2f6      	uxtb	r6, r6
    d55e:	4298      	cmp	r0, r3
    d560:	4637      	mov	r7, r6
    d562:	db04      	blt.n	d56e <__swbuf_r+0x42>
    d564:	4621      	mov	r1, r4
    d566:	4628      	mov	r0, r5
    d568:	f000 f928 	bl	d7bc <_fflush_r>
    d56c:	bb28      	cbnz	r0, d5ba <__swbuf_r+0x8e>
    d56e:	68a3      	ldr	r3, [r4, #8]
    d570:	3b01      	subs	r3, #1
    d572:	60a3      	str	r3, [r4, #8]
    d574:	6823      	ldr	r3, [r4, #0]
    d576:	1c5a      	adds	r2, r3, #1
    d578:	6022      	str	r2, [r4, #0]
    d57a:	701e      	strb	r6, [r3, #0]
    d57c:	6963      	ldr	r3, [r4, #20]
    d57e:	3001      	adds	r0, #1
    d580:	4298      	cmp	r0, r3
    d582:	d004      	beq.n	d58e <__swbuf_r+0x62>
    d584:	89a3      	ldrh	r3, [r4, #12]
    d586:	07db      	lsls	r3, r3, #31
    d588:	d519      	bpl.n	d5be <__swbuf_r+0x92>
    d58a:	2e0a      	cmp	r6, #10
    d58c:	d117      	bne.n	d5be <__swbuf_r+0x92>
    d58e:	4621      	mov	r1, r4
    d590:	4628      	mov	r0, r5
    d592:	f000 f913 	bl	d7bc <_fflush_r>
    d596:	b190      	cbz	r0, d5be <__swbuf_r+0x92>
    d598:	e00f      	b.n	d5ba <__swbuf_r+0x8e>
    d59a:	4b0b      	ldr	r3, [pc, #44]	; (d5c8 <__swbuf_r+0x9c>)
    d59c:	429c      	cmp	r4, r3
    d59e:	d101      	bne.n	d5a4 <__swbuf_r+0x78>
    d5a0:	68ac      	ldr	r4, [r5, #8]
    d5a2:	e7d0      	b.n	d546 <__swbuf_r+0x1a>
    d5a4:	4b09      	ldr	r3, [pc, #36]	; (d5cc <__swbuf_r+0xa0>)
    d5a6:	429c      	cmp	r4, r3
    d5a8:	bf08      	it	eq
    d5aa:	68ec      	ldreq	r4, [r5, #12]
    d5ac:	e7cb      	b.n	d546 <__swbuf_r+0x1a>
    d5ae:	4621      	mov	r1, r4
    d5b0:	4628      	mov	r0, r5
    d5b2:	f000 f80d 	bl	d5d0 <__swsetup_r>
    d5b6:	2800      	cmp	r0, #0
    d5b8:	d0cc      	beq.n	d554 <__swbuf_r+0x28>
    d5ba:	f04f 37ff 	mov.w	r7, #4294967295
    d5be:	4638      	mov	r0, r7
    d5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5c2:	bf00      	nop
    d5c4:	0000f158 	.word	0x0000f158
    d5c8:	0000f178 	.word	0x0000f178
    d5cc:	0000f138 	.word	0x0000f138

0000d5d0 <__swsetup_r>:
    d5d0:	4b32      	ldr	r3, [pc, #200]	; (d69c <__swsetup_r+0xcc>)
    d5d2:	b570      	push	{r4, r5, r6, lr}
    d5d4:	681d      	ldr	r5, [r3, #0]
    d5d6:	4606      	mov	r6, r0
    d5d8:	460c      	mov	r4, r1
    d5da:	b125      	cbz	r5, d5e6 <__swsetup_r+0x16>
    d5dc:	69ab      	ldr	r3, [r5, #24]
    d5de:	b913      	cbnz	r3, d5e6 <__swsetup_r+0x16>
    d5e0:	4628      	mov	r0, r5
    d5e2:	f000 f955 	bl	d890 <__sinit>
    d5e6:	4b2e      	ldr	r3, [pc, #184]	; (d6a0 <__swsetup_r+0xd0>)
    d5e8:	429c      	cmp	r4, r3
    d5ea:	d10f      	bne.n	d60c <__swsetup_r+0x3c>
    d5ec:	686c      	ldr	r4, [r5, #4]
    d5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d5f2:	b29a      	uxth	r2, r3
    d5f4:	0715      	lsls	r5, r2, #28
    d5f6:	d42c      	bmi.n	d652 <__swsetup_r+0x82>
    d5f8:	06d0      	lsls	r0, r2, #27
    d5fa:	d411      	bmi.n	d620 <__swsetup_r+0x50>
    d5fc:	2209      	movs	r2, #9
    d5fe:	6032      	str	r2, [r6, #0]
    d600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d604:	81a3      	strh	r3, [r4, #12]
    d606:	f04f 30ff 	mov.w	r0, #4294967295
    d60a:	bd70      	pop	{r4, r5, r6, pc}
    d60c:	4b25      	ldr	r3, [pc, #148]	; (d6a4 <__swsetup_r+0xd4>)
    d60e:	429c      	cmp	r4, r3
    d610:	d101      	bne.n	d616 <__swsetup_r+0x46>
    d612:	68ac      	ldr	r4, [r5, #8]
    d614:	e7eb      	b.n	d5ee <__swsetup_r+0x1e>
    d616:	4b24      	ldr	r3, [pc, #144]	; (d6a8 <__swsetup_r+0xd8>)
    d618:	429c      	cmp	r4, r3
    d61a:	bf08      	it	eq
    d61c:	68ec      	ldreq	r4, [r5, #12]
    d61e:	e7e6      	b.n	d5ee <__swsetup_r+0x1e>
    d620:	0751      	lsls	r1, r2, #29
    d622:	d512      	bpl.n	d64a <__swsetup_r+0x7a>
    d624:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d626:	b141      	cbz	r1, d63a <__swsetup_r+0x6a>
    d628:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d62c:	4299      	cmp	r1, r3
    d62e:	d002      	beq.n	d636 <__swsetup_r+0x66>
    d630:	4630      	mov	r0, r6
    d632:	f7ff fd61 	bl	d0f8 <_free_r>
    d636:	2300      	movs	r3, #0
    d638:	6363      	str	r3, [r4, #52]	; 0x34
    d63a:	89a3      	ldrh	r3, [r4, #12]
    d63c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    d640:	81a3      	strh	r3, [r4, #12]
    d642:	2300      	movs	r3, #0
    d644:	6063      	str	r3, [r4, #4]
    d646:	6923      	ldr	r3, [r4, #16]
    d648:	6023      	str	r3, [r4, #0]
    d64a:	89a3      	ldrh	r3, [r4, #12]
    d64c:	f043 0308 	orr.w	r3, r3, #8
    d650:	81a3      	strh	r3, [r4, #12]
    d652:	6923      	ldr	r3, [r4, #16]
    d654:	b94b      	cbnz	r3, d66a <__swsetup_r+0x9a>
    d656:	89a3      	ldrh	r3, [r4, #12]
    d658:	f403 7320 	and.w	r3, r3, #640	; 0x280
    d65c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d660:	d003      	beq.n	d66a <__swsetup_r+0x9a>
    d662:	4621      	mov	r1, r4
    d664:	4630      	mov	r0, r6
    d666:	f000 f9c1 	bl	d9ec <__smakebuf_r>
    d66a:	89a2      	ldrh	r2, [r4, #12]
    d66c:	f012 0301 	ands.w	r3, r2, #1
    d670:	d00c      	beq.n	d68c <__swsetup_r+0xbc>
    d672:	2300      	movs	r3, #0
    d674:	60a3      	str	r3, [r4, #8]
    d676:	6963      	ldr	r3, [r4, #20]
    d678:	425b      	negs	r3, r3
    d67a:	61a3      	str	r3, [r4, #24]
    d67c:	6923      	ldr	r3, [r4, #16]
    d67e:	b953      	cbnz	r3, d696 <__swsetup_r+0xc6>
    d680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d684:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    d688:	d1ba      	bne.n	d600 <__swsetup_r+0x30>
    d68a:	bd70      	pop	{r4, r5, r6, pc}
    d68c:	0792      	lsls	r2, r2, #30
    d68e:	bf58      	it	pl
    d690:	6963      	ldrpl	r3, [r4, #20]
    d692:	60a3      	str	r3, [r4, #8]
    d694:	e7f2      	b.n	d67c <__swsetup_r+0xac>
    d696:	2000      	movs	r0, #0
    d698:	e7f7      	b.n	d68a <__swsetup_r+0xba>
    d69a:	bf00      	nop
    d69c:	20000548 	.word	0x20000548
    d6a0:	0000f158 	.word	0x0000f158
    d6a4:	0000f178 	.word	0x0000f178
    d6a8:	0000f138 	.word	0x0000f138

0000d6ac <__sflush_r>:
    d6ac:	898a      	ldrh	r2, [r1, #12]
    d6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6b2:	4605      	mov	r5, r0
    d6b4:	0710      	lsls	r0, r2, #28
    d6b6:	460c      	mov	r4, r1
    d6b8:	d45a      	bmi.n	d770 <__sflush_r+0xc4>
    d6ba:	684b      	ldr	r3, [r1, #4]
    d6bc:	2b00      	cmp	r3, #0
    d6be:	dc05      	bgt.n	d6cc <__sflush_r+0x20>
    d6c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    d6c2:	2b00      	cmp	r3, #0
    d6c4:	dc02      	bgt.n	d6cc <__sflush_r+0x20>
    d6c6:	2000      	movs	r0, #0
    d6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    d6ce:	2e00      	cmp	r6, #0
    d6d0:	d0f9      	beq.n	d6c6 <__sflush_r+0x1a>
    d6d2:	2300      	movs	r3, #0
    d6d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    d6d8:	682f      	ldr	r7, [r5, #0]
    d6da:	602b      	str	r3, [r5, #0]
    d6dc:	d033      	beq.n	d746 <__sflush_r+0x9a>
    d6de:	6d60      	ldr	r0, [r4, #84]	; 0x54
    d6e0:	89a3      	ldrh	r3, [r4, #12]
    d6e2:	075a      	lsls	r2, r3, #29
    d6e4:	d505      	bpl.n	d6f2 <__sflush_r+0x46>
    d6e6:	6863      	ldr	r3, [r4, #4]
    d6e8:	1ac0      	subs	r0, r0, r3
    d6ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d6ec:	b10b      	cbz	r3, d6f2 <__sflush_r+0x46>
    d6ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d6f0:	1ac0      	subs	r0, r0, r3
    d6f2:	2300      	movs	r3, #0
    d6f4:	4602      	mov	r2, r0
    d6f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    d6f8:	6a21      	ldr	r1, [r4, #32]
    d6fa:	4628      	mov	r0, r5
    d6fc:	47b0      	blx	r6
    d6fe:	1c43      	adds	r3, r0, #1
    d700:	89a3      	ldrh	r3, [r4, #12]
    d702:	d106      	bne.n	d712 <__sflush_r+0x66>
    d704:	6829      	ldr	r1, [r5, #0]
    d706:	291d      	cmp	r1, #29
    d708:	d84b      	bhi.n	d7a2 <__sflush_r+0xf6>
    d70a:	4a2b      	ldr	r2, [pc, #172]	; (d7b8 <__sflush_r+0x10c>)
    d70c:	40ca      	lsrs	r2, r1
    d70e:	07d6      	lsls	r6, r2, #31
    d710:	d547      	bpl.n	d7a2 <__sflush_r+0xf6>
    d712:	2200      	movs	r2, #0
    d714:	6062      	str	r2, [r4, #4]
    d716:	04d9      	lsls	r1, r3, #19
    d718:	6922      	ldr	r2, [r4, #16]
    d71a:	6022      	str	r2, [r4, #0]
    d71c:	d504      	bpl.n	d728 <__sflush_r+0x7c>
    d71e:	1c42      	adds	r2, r0, #1
    d720:	d101      	bne.n	d726 <__sflush_r+0x7a>
    d722:	682b      	ldr	r3, [r5, #0]
    d724:	b903      	cbnz	r3, d728 <__sflush_r+0x7c>
    d726:	6560      	str	r0, [r4, #84]	; 0x54
    d728:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d72a:	602f      	str	r7, [r5, #0]
    d72c:	2900      	cmp	r1, #0
    d72e:	d0ca      	beq.n	d6c6 <__sflush_r+0x1a>
    d730:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d734:	4299      	cmp	r1, r3
    d736:	d002      	beq.n	d73e <__sflush_r+0x92>
    d738:	4628      	mov	r0, r5
    d73a:	f7ff fcdd 	bl	d0f8 <_free_r>
    d73e:	2000      	movs	r0, #0
    d740:	6360      	str	r0, [r4, #52]	; 0x34
    d742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d746:	6a21      	ldr	r1, [r4, #32]
    d748:	2301      	movs	r3, #1
    d74a:	4628      	mov	r0, r5
    d74c:	47b0      	blx	r6
    d74e:	1c41      	adds	r1, r0, #1
    d750:	d1c6      	bne.n	d6e0 <__sflush_r+0x34>
    d752:	682b      	ldr	r3, [r5, #0]
    d754:	2b00      	cmp	r3, #0
    d756:	d0c3      	beq.n	d6e0 <__sflush_r+0x34>
    d758:	2b1d      	cmp	r3, #29
    d75a:	d001      	beq.n	d760 <__sflush_r+0xb4>
    d75c:	2b16      	cmp	r3, #22
    d75e:	d101      	bne.n	d764 <__sflush_r+0xb8>
    d760:	602f      	str	r7, [r5, #0]
    d762:	e7b0      	b.n	d6c6 <__sflush_r+0x1a>
    d764:	89a3      	ldrh	r3, [r4, #12]
    d766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d76a:	81a3      	strh	r3, [r4, #12]
    d76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d770:	690f      	ldr	r7, [r1, #16]
    d772:	2f00      	cmp	r7, #0
    d774:	d0a7      	beq.n	d6c6 <__sflush_r+0x1a>
    d776:	0793      	lsls	r3, r2, #30
    d778:	680e      	ldr	r6, [r1, #0]
    d77a:	bf08      	it	eq
    d77c:	694b      	ldreq	r3, [r1, #20]
    d77e:	600f      	str	r7, [r1, #0]
    d780:	bf18      	it	ne
    d782:	2300      	movne	r3, #0
    d784:	eba6 0807 	sub.w	r8, r6, r7
    d788:	608b      	str	r3, [r1, #8]
    d78a:	f1b8 0f00 	cmp.w	r8, #0
    d78e:	dd9a      	ble.n	d6c6 <__sflush_r+0x1a>
    d790:	4643      	mov	r3, r8
    d792:	463a      	mov	r2, r7
    d794:	6a21      	ldr	r1, [r4, #32]
    d796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    d798:	4628      	mov	r0, r5
    d79a:	47b0      	blx	r6
    d79c:	2800      	cmp	r0, #0
    d79e:	dc07      	bgt.n	d7b0 <__sflush_r+0x104>
    d7a0:	89a3      	ldrh	r3, [r4, #12]
    d7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d7a6:	81a3      	strh	r3, [r4, #12]
    d7a8:	f04f 30ff 	mov.w	r0, #4294967295
    d7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7b0:	4407      	add	r7, r0
    d7b2:	eba8 0800 	sub.w	r8, r8, r0
    d7b6:	e7e8      	b.n	d78a <__sflush_r+0xde>
    d7b8:	20400001 	.word	0x20400001

0000d7bc <_fflush_r>:
    d7bc:	b538      	push	{r3, r4, r5, lr}
    d7be:	690b      	ldr	r3, [r1, #16]
    d7c0:	4605      	mov	r5, r0
    d7c2:	460c      	mov	r4, r1
    d7c4:	b1db      	cbz	r3, d7fe <_fflush_r+0x42>
    d7c6:	b118      	cbz	r0, d7d0 <_fflush_r+0x14>
    d7c8:	6983      	ldr	r3, [r0, #24]
    d7ca:	b90b      	cbnz	r3, d7d0 <_fflush_r+0x14>
    d7cc:	f000 f860 	bl	d890 <__sinit>
    d7d0:	4b0c      	ldr	r3, [pc, #48]	; (d804 <_fflush_r+0x48>)
    d7d2:	429c      	cmp	r4, r3
    d7d4:	d109      	bne.n	d7ea <_fflush_r+0x2e>
    d7d6:	686c      	ldr	r4, [r5, #4]
    d7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d7dc:	b17b      	cbz	r3, d7fe <_fflush_r+0x42>
    d7de:	4621      	mov	r1, r4
    d7e0:	4628      	mov	r0, r5
    d7e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d7e6:	f7ff bf61 	b.w	d6ac <__sflush_r>
    d7ea:	4b07      	ldr	r3, [pc, #28]	; (d808 <_fflush_r+0x4c>)
    d7ec:	429c      	cmp	r4, r3
    d7ee:	d101      	bne.n	d7f4 <_fflush_r+0x38>
    d7f0:	68ac      	ldr	r4, [r5, #8]
    d7f2:	e7f1      	b.n	d7d8 <_fflush_r+0x1c>
    d7f4:	4b05      	ldr	r3, [pc, #20]	; (d80c <_fflush_r+0x50>)
    d7f6:	429c      	cmp	r4, r3
    d7f8:	bf08      	it	eq
    d7fa:	68ec      	ldreq	r4, [r5, #12]
    d7fc:	e7ec      	b.n	d7d8 <_fflush_r+0x1c>
    d7fe:	2000      	movs	r0, #0
    d800:	bd38      	pop	{r3, r4, r5, pc}
    d802:	bf00      	nop
    d804:	0000f158 	.word	0x0000f158
    d808:	0000f178 	.word	0x0000f178
    d80c:	0000f138 	.word	0x0000f138

0000d810 <_cleanup_r>:
    d810:	4901      	ldr	r1, [pc, #4]	; (d818 <_cleanup_r+0x8>)
    d812:	f000 b8a9 	b.w	d968 <_fwalk_reent>
    d816:	bf00      	nop
    d818:	0000d7bd 	.word	0x0000d7bd

0000d81c <std.isra.0>:
    d81c:	2300      	movs	r3, #0
    d81e:	b510      	push	{r4, lr}
    d820:	4604      	mov	r4, r0
    d822:	6003      	str	r3, [r0, #0]
    d824:	6043      	str	r3, [r0, #4]
    d826:	6083      	str	r3, [r0, #8]
    d828:	8181      	strh	r1, [r0, #12]
    d82a:	6643      	str	r3, [r0, #100]	; 0x64
    d82c:	81c2      	strh	r2, [r0, #14]
    d82e:	6103      	str	r3, [r0, #16]
    d830:	6143      	str	r3, [r0, #20]
    d832:	6183      	str	r3, [r0, #24]
    d834:	4619      	mov	r1, r3
    d836:	2208      	movs	r2, #8
    d838:	305c      	adds	r0, #92	; 0x5c
    d83a:	f7ff fc54 	bl	d0e6 <memset>
    d83e:	4b05      	ldr	r3, [pc, #20]	; (d854 <std.isra.0+0x38>)
    d840:	6263      	str	r3, [r4, #36]	; 0x24
    d842:	4b05      	ldr	r3, [pc, #20]	; (d858 <std.isra.0+0x3c>)
    d844:	62a3      	str	r3, [r4, #40]	; 0x28
    d846:	4b05      	ldr	r3, [pc, #20]	; (d85c <std.isra.0+0x40>)
    d848:	62e3      	str	r3, [r4, #44]	; 0x2c
    d84a:	4b05      	ldr	r3, [pc, #20]	; (d860 <std.isra.0+0x44>)
    d84c:	6224      	str	r4, [r4, #32]
    d84e:	6323      	str	r3, [r4, #48]	; 0x30
    d850:	bd10      	pop	{r4, pc}
    d852:	bf00      	nop
    d854:	0000e2b9 	.word	0x0000e2b9
    d858:	0000e2db 	.word	0x0000e2db
    d85c:	0000e313 	.word	0x0000e313
    d860:	0000e337 	.word	0x0000e337

0000d864 <__sfmoreglue>:
    d864:	b570      	push	{r4, r5, r6, lr}
    d866:	1e4a      	subs	r2, r1, #1
    d868:	2568      	movs	r5, #104	; 0x68
    d86a:	4355      	muls	r5, r2
    d86c:	460e      	mov	r6, r1
    d86e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    d872:	f7ff fc8f 	bl	d194 <_malloc_r>
    d876:	4604      	mov	r4, r0
    d878:	b140      	cbz	r0, d88c <__sfmoreglue+0x28>
    d87a:	2100      	movs	r1, #0
    d87c:	e880 0042 	stmia.w	r0, {r1, r6}
    d880:	300c      	adds	r0, #12
    d882:	60a0      	str	r0, [r4, #8]
    d884:	f105 0268 	add.w	r2, r5, #104	; 0x68
    d888:	f7ff fc2d 	bl	d0e6 <memset>
    d88c:	4620      	mov	r0, r4
    d88e:	bd70      	pop	{r4, r5, r6, pc}

0000d890 <__sinit>:
    d890:	6983      	ldr	r3, [r0, #24]
    d892:	b510      	push	{r4, lr}
    d894:	4604      	mov	r4, r0
    d896:	bb33      	cbnz	r3, d8e6 <__sinit+0x56>
    d898:	6483      	str	r3, [r0, #72]	; 0x48
    d89a:	64c3      	str	r3, [r0, #76]	; 0x4c
    d89c:	6503      	str	r3, [r0, #80]	; 0x50
    d89e:	4b12      	ldr	r3, [pc, #72]	; (d8e8 <__sinit+0x58>)
    d8a0:	4a12      	ldr	r2, [pc, #72]	; (d8ec <__sinit+0x5c>)
    d8a2:	681b      	ldr	r3, [r3, #0]
    d8a4:	6282      	str	r2, [r0, #40]	; 0x28
    d8a6:	4298      	cmp	r0, r3
    d8a8:	bf04      	itt	eq
    d8aa:	2301      	moveq	r3, #1
    d8ac:	6183      	streq	r3, [r0, #24]
    d8ae:	f000 f81f 	bl	d8f0 <__sfp>
    d8b2:	6060      	str	r0, [r4, #4]
    d8b4:	4620      	mov	r0, r4
    d8b6:	f000 f81b 	bl	d8f0 <__sfp>
    d8ba:	60a0      	str	r0, [r4, #8]
    d8bc:	4620      	mov	r0, r4
    d8be:	f000 f817 	bl	d8f0 <__sfp>
    d8c2:	2200      	movs	r2, #0
    d8c4:	60e0      	str	r0, [r4, #12]
    d8c6:	2104      	movs	r1, #4
    d8c8:	6860      	ldr	r0, [r4, #4]
    d8ca:	f7ff ffa7 	bl	d81c <std.isra.0>
    d8ce:	2201      	movs	r2, #1
    d8d0:	2109      	movs	r1, #9
    d8d2:	68a0      	ldr	r0, [r4, #8]
    d8d4:	f7ff ffa2 	bl	d81c <std.isra.0>
    d8d8:	2202      	movs	r2, #2
    d8da:	2112      	movs	r1, #18
    d8dc:	68e0      	ldr	r0, [r4, #12]
    d8de:	f7ff ff9d 	bl	d81c <std.isra.0>
    d8e2:	2301      	movs	r3, #1
    d8e4:	61a3      	str	r3, [r4, #24]
    d8e6:	bd10      	pop	{r4, pc}
    d8e8:	0000f134 	.word	0x0000f134
    d8ec:	0000d811 	.word	0x0000d811

0000d8f0 <__sfp>:
    d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8f2:	4b1c      	ldr	r3, [pc, #112]	; (d964 <__sfp+0x74>)
    d8f4:	681e      	ldr	r6, [r3, #0]
    d8f6:	69b3      	ldr	r3, [r6, #24]
    d8f8:	4607      	mov	r7, r0
    d8fa:	b913      	cbnz	r3, d902 <__sfp+0x12>
    d8fc:	4630      	mov	r0, r6
    d8fe:	f7ff ffc7 	bl	d890 <__sinit>
    d902:	3648      	adds	r6, #72	; 0x48
    d904:	68b4      	ldr	r4, [r6, #8]
    d906:	6873      	ldr	r3, [r6, #4]
    d908:	3b01      	subs	r3, #1
    d90a:	d503      	bpl.n	d914 <__sfp+0x24>
    d90c:	6833      	ldr	r3, [r6, #0]
    d90e:	b133      	cbz	r3, d91e <__sfp+0x2e>
    d910:	6836      	ldr	r6, [r6, #0]
    d912:	e7f7      	b.n	d904 <__sfp+0x14>
    d914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    d918:	b16d      	cbz	r5, d936 <__sfp+0x46>
    d91a:	3468      	adds	r4, #104	; 0x68
    d91c:	e7f4      	b.n	d908 <__sfp+0x18>
    d91e:	2104      	movs	r1, #4
    d920:	4638      	mov	r0, r7
    d922:	f7ff ff9f 	bl	d864 <__sfmoreglue>
    d926:	6030      	str	r0, [r6, #0]
    d928:	2800      	cmp	r0, #0
    d92a:	d1f1      	bne.n	d910 <__sfp+0x20>
    d92c:	230c      	movs	r3, #12
    d92e:	603b      	str	r3, [r7, #0]
    d930:	4604      	mov	r4, r0
    d932:	4620      	mov	r0, r4
    d934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d936:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d93a:	81e3      	strh	r3, [r4, #14]
    d93c:	2301      	movs	r3, #1
    d93e:	81a3      	strh	r3, [r4, #12]
    d940:	6665      	str	r5, [r4, #100]	; 0x64
    d942:	6025      	str	r5, [r4, #0]
    d944:	60a5      	str	r5, [r4, #8]
    d946:	6065      	str	r5, [r4, #4]
    d948:	6125      	str	r5, [r4, #16]
    d94a:	6165      	str	r5, [r4, #20]
    d94c:	61a5      	str	r5, [r4, #24]
    d94e:	2208      	movs	r2, #8
    d950:	4629      	mov	r1, r5
    d952:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d956:	f7ff fbc6 	bl	d0e6 <memset>
    d95a:	6365      	str	r5, [r4, #52]	; 0x34
    d95c:	63a5      	str	r5, [r4, #56]	; 0x38
    d95e:	64a5      	str	r5, [r4, #72]	; 0x48
    d960:	64e5      	str	r5, [r4, #76]	; 0x4c
    d962:	e7e6      	b.n	d932 <__sfp+0x42>
    d964:	0000f134 	.word	0x0000f134

0000d968 <_fwalk_reent>:
    d968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d96c:	4680      	mov	r8, r0
    d96e:	4689      	mov	r9, r1
    d970:	f100 0448 	add.w	r4, r0, #72	; 0x48
    d974:	2600      	movs	r6, #0
    d976:	b914      	cbnz	r4, d97e <_fwalk_reent+0x16>
    d978:	4630      	mov	r0, r6
    d97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d97e:	68a5      	ldr	r5, [r4, #8]
    d980:	6867      	ldr	r7, [r4, #4]
    d982:	3f01      	subs	r7, #1
    d984:	d501      	bpl.n	d98a <_fwalk_reent+0x22>
    d986:	6824      	ldr	r4, [r4, #0]
    d988:	e7f5      	b.n	d976 <_fwalk_reent+0xe>
    d98a:	89ab      	ldrh	r3, [r5, #12]
    d98c:	2b01      	cmp	r3, #1
    d98e:	d907      	bls.n	d9a0 <_fwalk_reent+0x38>
    d990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    d994:	3301      	adds	r3, #1
    d996:	d003      	beq.n	d9a0 <_fwalk_reent+0x38>
    d998:	4629      	mov	r1, r5
    d99a:	4640      	mov	r0, r8
    d99c:	47c8      	blx	r9
    d99e:	4306      	orrs	r6, r0
    d9a0:	3568      	adds	r5, #104	; 0x68
    d9a2:	e7ee      	b.n	d982 <_fwalk_reent+0x1a>

0000d9a4 <__swhatbuf_r>:
    d9a4:	b570      	push	{r4, r5, r6, lr}
    d9a6:	460e      	mov	r6, r1
    d9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d9ac:	2900      	cmp	r1, #0
    d9ae:	b090      	sub	sp, #64	; 0x40
    d9b0:	4614      	mov	r4, r2
    d9b2:	461d      	mov	r5, r3
    d9b4:	da07      	bge.n	d9c6 <__swhatbuf_r+0x22>
    d9b6:	2300      	movs	r3, #0
    d9b8:	602b      	str	r3, [r5, #0]
    d9ba:	89b3      	ldrh	r3, [r6, #12]
    d9bc:	061a      	lsls	r2, r3, #24
    d9be:	d410      	bmi.n	d9e2 <__swhatbuf_r+0x3e>
    d9c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d9c4:	e00e      	b.n	d9e4 <__swhatbuf_r+0x40>
    d9c6:	aa01      	add	r2, sp, #4
    d9c8:	f000 fcdc 	bl	e384 <_fstat_r>
    d9cc:	2800      	cmp	r0, #0
    d9ce:	dbf2      	blt.n	d9b6 <__swhatbuf_r+0x12>
    d9d0:	9a02      	ldr	r2, [sp, #8]
    d9d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    d9d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    d9da:	425a      	negs	r2, r3
    d9dc:	415a      	adcs	r2, r3
    d9de:	602a      	str	r2, [r5, #0]
    d9e0:	e7ee      	b.n	d9c0 <__swhatbuf_r+0x1c>
    d9e2:	2340      	movs	r3, #64	; 0x40
    d9e4:	2000      	movs	r0, #0
    d9e6:	6023      	str	r3, [r4, #0]
    d9e8:	b010      	add	sp, #64	; 0x40
    d9ea:	bd70      	pop	{r4, r5, r6, pc}

0000d9ec <__smakebuf_r>:
    d9ec:	898b      	ldrh	r3, [r1, #12]
    d9ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d9f0:	079d      	lsls	r5, r3, #30
    d9f2:	4606      	mov	r6, r0
    d9f4:	460c      	mov	r4, r1
    d9f6:	d507      	bpl.n	da08 <__smakebuf_r+0x1c>
    d9f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    d9fc:	6023      	str	r3, [r4, #0]
    d9fe:	6123      	str	r3, [r4, #16]
    da00:	2301      	movs	r3, #1
    da02:	6163      	str	r3, [r4, #20]
    da04:	b002      	add	sp, #8
    da06:	bd70      	pop	{r4, r5, r6, pc}
    da08:	ab01      	add	r3, sp, #4
    da0a:	466a      	mov	r2, sp
    da0c:	f7ff ffca 	bl	d9a4 <__swhatbuf_r>
    da10:	9900      	ldr	r1, [sp, #0]
    da12:	4605      	mov	r5, r0
    da14:	4630      	mov	r0, r6
    da16:	f7ff fbbd 	bl	d194 <_malloc_r>
    da1a:	b948      	cbnz	r0, da30 <__smakebuf_r+0x44>
    da1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    da20:	059a      	lsls	r2, r3, #22
    da22:	d4ef      	bmi.n	da04 <__smakebuf_r+0x18>
    da24:	f023 0303 	bic.w	r3, r3, #3
    da28:	f043 0302 	orr.w	r3, r3, #2
    da2c:	81a3      	strh	r3, [r4, #12]
    da2e:	e7e3      	b.n	d9f8 <__smakebuf_r+0xc>
    da30:	4b0d      	ldr	r3, [pc, #52]	; (da68 <__smakebuf_r+0x7c>)
    da32:	62b3      	str	r3, [r6, #40]	; 0x28
    da34:	89a3      	ldrh	r3, [r4, #12]
    da36:	6020      	str	r0, [r4, #0]
    da38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    da3c:	81a3      	strh	r3, [r4, #12]
    da3e:	9b00      	ldr	r3, [sp, #0]
    da40:	6163      	str	r3, [r4, #20]
    da42:	9b01      	ldr	r3, [sp, #4]
    da44:	6120      	str	r0, [r4, #16]
    da46:	b15b      	cbz	r3, da60 <__smakebuf_r+0x74>
    da48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    da4c:	4630      	mov	r0, r6
    da4e:	f000 fcab 	bl	e3a8 <_isatty_r>
    da52:	b128      	cbz	r0, da60 <__smakebuf_r+0x74>
    da54:	89a3      	ldrh	r3, [r4, #12]
    da56:	f023 0303 	bic.w	r3, r3, #3
    da5a:	f043 0301 	orr.w	r3, r3, #1
    da5e:	81a3      	strh	r3, [r4, #12]
    da60:	89a3      	ldrh	r3, [r4, #12]
    da62:	431d      	orrs	r5, r3
    da64:	81a5      	strh	r5, [r4, #12]
    da66:	e7cd      	b.n	da04 <__smakebuf_r+0x18>
    da68:	0000d811 	.word	0x0000d811

0000da6c <__malloc_lock>:
    da6c:	4770      	bx	lr

0000da6e <__malloc_unlock>:
    da6e:	4770      	bx	lr

0000da70 <__ssputs_r>:
    da70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da74:	688e      	ldr	r6, [r1, #8]
    da76:	429e      	cmp	r6, r3
    da78:	4682      	mov	sl, r0
    da7a:	460c      	mov	r4, r1
    da7c:	4691      	mov	r9, r2
    da7e:	4698      	mov	r8, r3
    da80:	d835      	bhi.n	daee <__ssputs_r+0x7e>
    da82:	898a      	ldrh	r2, [r1, #12]
    da84:	f412 6f90 	tst.w	r2, #1152	; 0x480
    da88:	d031      	beq.n	daee <__ssputs_r+0x7e>
    da8a:	6825      	ldr	r5, [r4, #0]
    da8c:	6909      	ldr	r1, [r1, #16]
    da8e:	1a6f      	subs	r7, r5, r1
    da90:	6965      	ldr	r5, [r4, #20]
    da92:	2302      	movs	r3, #2
    da94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    da98:	fb95 f5f3 	sdiv	r5, r5, r3
    da9c:	f108 0301 	add.w	r3, r8, #1
    daa0:	443b      	add	r3, r7
    daa2:	429d      	cmp	r5, r3
    daa4:	bf38      	it	cc
    daa6:	461d      	movcc	r5, r3
    daa8:	0553      	lsls	r3, r2, #21
    daaa:	d531      	bpl.n	db10 <__ssputs_r+0xa0>
    daac:	4629      	mov	r1, r5
    daae:	f7ff fb71 	bl	d194 <_malloc_r>
    dab2:	4606      	mov	r6, r0
    dab4:	b950      	cbnz	r0, dacc <__ssputs_r+0x5c>
    dab6:	230c      	movs	r3, #12
    dab8:	f8ca 3000 	str.w	r3, [sl]
    dabc:	89a3      	ldrh	r3, [r4, #12]
    dabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dac2:	81a3      	strh	r3, [r4, #12]
    dac4:	f04f 30ff 	mov.w	r0, #4294967295
    dac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dacc:	463a      	mov	r2, r7
    dace:	6921      	ldr	r1, [r4, #16]
    dad0:	f7ff fafe 	bl	d0d0 <memcpy>
    dad4:	89a3      	ldrh	r3, [r4, #12]
    dad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    dada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dade:	81a3      	strh	r3, [r4, #12]
    dae0:	6126      	str	r6, [r4, #16]
    dae2:	6165      	str	r5, [r4, #20]
    dae4:	443e      	add	r6, r7
    dae6:	1bed      	subs	r5, r5, r7
    dae8:	6026      	str	r6, [r4, #0]
    daea:	60a5      	str	r5, [r4, #8]
    daec:	4646      	mov	r6, r8
    daee:	4546      	cmp	r6, r8
    daf0:	bf28      	it	cs
    daf2:	4646      	movcs	r6, r8
    daf4:	4632      	mov	r2, r6
    daf6:	4649      	mov	r1, r9
    daf8:	6820      	ldr	r0, [r4, #0]
    dafa:	f000 fcc9 	bl	e490 <memmove>
    dafe:	68a3      	ldr	r3, [r4, #8]
    db00:	1b9b      	subs	r3, r3, r6
    db02:	60a3      	str	r3, [r4, #8]
    db04:	6823      	ldr	r3, [r4, #0]
    db06:	441e      	add	r6, r3
    db08:	6026      	str	r6, [r4, #0]
    db0a:	2000      	movs	r0, #0
    db0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db10:	462a      	mov	r2, r5
    db12:	f000 fcd7 	bl	e4c4 <_realloc_r>
    db16:	4606      	mov	r6, r0
    db18:	2800      	cmp	r0, #0
    db1a:	d1e1      	bne.n	dae0 <__ssputs_r+0x70>
    db1c:	6921      	ldr	r1, [r4, #16]
    db1e:	4650      	mov	r0, sl
    db20:	f7ff faea 	bl	d0f8 <_free_r>
    db24:	e7c7      	b.n	dab6 <__ssputs_r+0x46>
	...

0000db28 <_svfiprintf_r>:
    db28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db2c:	b09d      	sub	sp, #116	; 0x74
    db2e:	4680      	mov	r8, r0
    db30:	9303      	str	r3, [sp, #12]
    db32:	898b      	ldrh	r3, [r1, #12]
    db34:	061c      	lsls	r4, r3, #24
    db36:	460d      	mov	r5, r1
    db38:	4616      	mov	r6, r2
    db3a:	d50f      	bpl.n	db5c <_svfiprintf_r+0x34>
    db3c:	690b      	ldr	r3, [r1, #16]
    db3e:	b96b      	cbnz	r3, db5c <_svfiprintf_r+0x34>
    db40:	2140      	movs	r1, #64	; 0x40
    db42:	f7ff fb27 	bl	d194 <_malloc_r>
    db46:	6028      	str	r0, [r5, #0]
    db48:	6128      	str	r0, [r5, #16]
    db4a:	b928      	cbnz	r0, db58 <_svfiprintf_r+0x30>
    db4c:	230c      	movs	r3, #12
    db4e:	f8c8 3000 	str.w	r3, [r8]
    db52:	f04f 30ff 	mov.w	r0, #4294967295
    db56:	e0c5      	b.n	dce4 <_svfiprintf_r+0x1bc>
    db58:	2340      	movs	r3, #64	; 0x40
    db5a:	616b      	str	r3, [r5, #20]
    db5c:	2300      	movs	r3, #0
    db5e:	9309      	str	r3, [sp, #36]	; 0x24
    db60:	2320      	movs	r3, #32
    db62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    db66:	2330      	movs	r3, #48	; 0x30
    db68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    db6c:	f04f 0b01 	mov.w	fp, #1
    db70:	4637      	mov	r7, r6
    db72:	463c      	mov	r4, r7
    db74:	f814 3b01 	ldrb.w	r3, [r4], #1
    db78:	2b00      	cmp	r3, #0
    db7a:	d13c      	bne.n	dbf6 <_svfiprintf_r+0xce>
    db7c:	ebb7 0a06 	subs.w	sl, r7, r6
    db80:	d00b      	beq.n	db9a <_svfiprintf_r+0x72>
    db82:	4653      	mov	r3, sl
    db84:	4632      	mov	r2, r6
    db86:	4629      	mov	r1, r5
    db88:	4640      	mov	r0, r8
    db8a:	f7ff ff71 	bl	da70 <__ssputs_r>
    db8e:	3001      	adds	r0, #1
    db90:	f000 80a3 	beq.w	dcda <_svfiprintf_r+0x1b2>
    db94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    db96:	4453      	add	r3, sl
    db98:	9309      	str	r3, [sp, #36]	; 0x24
    db9a:	783b      	ldrb	r3, [r7, #0]
    db9c:	2b00      	cmp	r3, #0
    db9e:	f000 809c 	beq.w	dcda <_svfiprintf_r+0x1b2>
    dba2:	2300      	movs	r3, #0
    dba4:	f04f 32ff 	mov.w	r2, #4294967295
    dba8:	9304      	str	r3, [sp, #16]
    dbaa:	9307      	str	r3, [sp, #28]
    dbac:	9205      	str	r2, [sp, #20]
    dbae:	9306      	str	r3, [sp, #24]
    dbb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    dbb4:	931a      	str	r3, [sp, #104]	; 0x68
    dbb6:	2205      	movs	r2, #5
    dbb8:	7821      	ldrb	r1, [r4, #0]
    dbba:	4850      	ldr	r0, [pc, #320]	; (dcfc <_svfiprintf_r+0x1d4>)
    dbbc:	f000 fc18 	bl	e3f0 <memchr>
    dbc0:	1c67      	adds	r7, r4, #1
    dbc2:	9b04      	ldr	r3, [sp, #16]
    dbc4:	b9d8      	cbnz	r0, dbfe <_svfiprintf_r+0xd6>
    dbc6:	06d9      	lsls	r1, r3, #27
    dbc8:	bf44      	itt	mi
    dbca:	2220      	movmi	r2, #32
    dbcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    dbd0:	071a      	lsls	r2, r3, #28
    dbd2:	bf44      	itt	mi
    dbd4:	222b      	movmi	r2, #43	; 0x2b
    dbd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    dbda:	7822      	ldrb	r2, [r4, #0]
    dbdc:	2a2a      	cmp	r2, #42	; 0x2a
    dbde:	d016      	beq.n	dc0e <_svfiprintf_r+0xe6>
    dbe0:	9a07      	ldr	r2, [sp, #28]
    dbe2:	2100      	movs	r1, #0
    dbe4:	200a      	movs	r0, #10
    dbe6:	4627      	mov	r7, r4
    dbe8:	3401      	adds	r4, #1
    dbea:	783b      	ldrb	r3, [r7, #0]
    dbec:	3b30      	subs	r3, #48	; 0x30
    dbee:	2b09      	cmp	r3, #9
    dbf0:	d951      	bls.n	dc96 <_svfiprintf_r+0x16e>
    dbf2:	b1c9      	cbz	r1, dc28 <_svfiprintf_r+0x100>
    dbf4:	e011      	b.n	dc1a <_svfiprintf_r+0xf2>
    dbf6:	2b25      	cmp	r3, #37	; 0x25
    dbf8:	d0c0      	beq.n	db7c <_svfiprintf_r+0x54>
    dbfa:	4627      	mov	r7, r4
    dbfc:	e7b9      	b.n	db72 <_svfiprintf_r+0x4a>
    dbfe:	4a3f      	ldr	r2, [pc, #252]	; (dcfc <_svfiprintf_r+0x1d4>)
    dc00:	1a80      	subs	r0, r0, r2
    dc02:	fa0b f000 	lsl.w	r0, fp, r0
    dc06:	4318      	orrs	r0, r3
    dc08:	9004      	str	r0, [sp, #16]
    dc0a:	463c      	mov	r4, r7
    dc0c:	e7d3      	b.n	dbb6 <_svfiprintf_r+0x8e>
    dc0e:	9a03      	ldr	r2, [sp, #12]
    dc10:	1d11      	adds	r1, r2, #4
    dc12:	6812      	ldr	r2, [r2, #0]
    dc14:	9103      	str	r1, [sp, #12]
    dc16:	2a00      	cmp	r2, #0
    dc18:	db01      	blt.n	dc1e <_svfiprintf_r+0xf6>
    dc1a:	9207      	str	r2, [sp, #28]
    dc1c:	e004      	b.n	dc28 <_svfiprintf_r+0x100>
    dc1e:	4252      	negs	r2, r2
    dc20:	f043 0302 	orr.w	r3, r3, #2
    dc24:	9207      	str	r2, [sp, #28]
    dc26:	9304      	str	r3, [sp, #16]
    dc28:	783b      	ldrb	r3, [r7, #0]
    dc2a:	2b2e      	cmp	r3, #46	; 0x2e
    dc2c:	d10e      	bne.n	dc4c <_svfiprintf_r+0x124>
    dc2e:	787b      	ldrb	r3, [r7, #1]
    dc30:	2b2a      	cmp	r3, #42	; 0x2a
    dc32:	f107 0101 	add.w	r1, r7, #1
    dc36:	d132      	bne.n	dc9e <_svfiprintf_r+0x176>
    dc38:	9b03      	ldr	r3, [sp, #12]
    dc3a:	1d1a      	adds	r2, r3, #4
    dc3c:	681b      	ldr	r3, [r3, #0]
    dc3e:	9203      	str	r2, [sp, #12]
    dc40:	2b00      	cmp	r3, #0
    dc42:	bfb8      	it	lt
    dc44:	f04f 33ff 	movlt.w	r3, #4294967295
    dc48:	3702      	adds	r7, #2
    dc4a:	9305      	str	r3, [sp, #20]
    dc4c:	4c2c      	ldr	r4, [pc, #176]	; (dd00 <_svfiprintf_r+0x1d8>)
    dc4e:	7839      	ldrb	r1, [r7, #0]
    dc50:	2203      	movs	r2, #3
    dc52:	4620      	mov	r0, r4
    dc54:	f000 fbcc 	bl	e3f0 <memchr>
    dc58:	b138      	cbz	r0, dc6a <_svfiprintf_r+0x142>
    dc5a:	2340      	movs	r3, #64	; 0x40
    dc5c:	1b00      	subs	r0, r0, r4
    dc5e:	fa03 f000 	lsl.w	r0, r3, r0
    dc62:	9b04      	ldr	r3, [sp, #16]
    dc64:	4303      	orrs	r3, r0
    dc66:	9304      	str	r3, [sp, #16]
    dc68:	3701      	adds	r7, #1
    dc6a:	7839      	ldrb	r1, [r7, #0]
    dc6c:	4825      	ldr	r0, [pc, #148]	; (dd04 <_svfiprintf_r+0x1dc>)
    dc6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    dc72:	2206      	movs	r2, #6
    dc74:	1c7e      	adds	r6, r7, #1
    dc76:	f000 fbbb 	bl	e3f0 <memchr>
    dc7a:	2800      	cmp	r0, #0
    dc7c:	d035      	beq.n	dcea <_svfiprintf_r+0x1c2>
    dc7e:	4b22      	ldr	r3, [pc, #136]	; (dd08 <_svfiprintf_r+0x1e0>)
    dc80:	b9fb      	cbnz	r3, dcc2 <_svfiprintf_r+0x19a>
    dc82:	9b03      	ldr	r3, [sp, #12]
    dc84:	3307      	adds	r3, #7
    dc86:	f023 0307 	bic.w	r3, r3, #7
    dc8a:	3308      	adds	r3, #8
    dc8c:	9303      	str	r3, [sp, #12]
    dc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dc90:	444b      	add	r3, r9
    dc92:	9309      	str	r3, [sp, #36]	; 0x24
    dc94:	e76c      	b.n	db70 <_svfiprintf_r+0x48>
    dc96:	fb00 3202 	mla	r2, r0, r2, r3
    dc9a:	2101      	movs	r1, #1
    dc9c:	e7a3      	b.n	dbe6 <_svfiprintf_r+0xbe>
    dc9e:	2300      	movs	r3, #0
    dca0:	9305      	str	r3, [sp, #20]
    dca2:	4618      	mov	r0, r3
    dca4:	240a      	movs	r4, #10
    dca6:	460f      	mov	r7, r1
    dca8:	3101      	adds	r1, #1
    dcaa:	783a      	ldrb	r2, [r7, #0]
    dcac:	3a30      	subs	r2, #48	; 0x30
    dcae:	2a09      	cmp	r2, #9
    dcb0:	d903      	bls.n	dcba <_svfiprintf_r+0x192>
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	d0ca      	beq.n	dc4c <_svfiprintf_r+0x124>
    dcb6:	9005      	str	r0, [sp, #20]
    dcb8:	e7c8      	b.n	dc4c <_svfiprintf_r+0x124>
    dcba:	fb04 2000 	mla	r0, r4, r0, r2
    dcbe:	2301      	movs	r3, #1
    dcc0:	e7f1      	b.n	dca6 <_svfiprintf_r+0x17e>
    dcc2:	ab03      	add	r3, sp, #12
    dcc4:	9300      	str	r3, [sp, #0]
    dcc6:	462a      	mov	r2, r5
    dcc8:	4b10      	ldr	r3, [pc, #64]	; (dd0c <_svfiprintf_r+0x1e4>)
    dcca:	a904      	add	r1, sp, #16
    dccc:	4640      	mov	r0, r8
    dcce:	f3af 8000 	nop.w
    dcd2:	f1b0 3fff 	cmp.w	r0, #4294967295
    dcd6:	4681      	mov	r9, r0
    dcd8:	d1d9      	bne.n	dc8e <_svfiprintf_r+0x166>
    dcda:	89ab      	ldrh	r3, [r5, #12]
    dcdc:	065b      	lsls	r3, r3, #25
    dcde:	f53f af38 	bmi.w	db52 <_svfiprintf_r+0x2a>
    dce2:	9809      	ldr	r0, [sp, #36]	; 0x24
    dce4:	b01d      	add	sp, #116	; 0x74
    dce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcea:	ab03      	add	r3, sp, #12
    dcec:	9300      	str	r3, [sp, #0]
    dcee:	462a      	mov	r2, r5
    dcf0:	4b06      	ldr	r3, [pc, #24]	; (dd0c <_svfiprintf_r+0x1e4>)
    dcf2:	a904      	add	r1, sp, #16
    dcf4:	4640      	mov	r0, r8
    dcf6:	f000 f9bf 	bl	e078 <_printf_i>
    dcfa:	e7ea      	b.n	dcd2 <_svfiprintf_r+0x1aa>
    dcfc:	0000f198 	.word	0x0000f198
    dd00:	0000f19e 	.word	0x0000f19e
    dd04:	0000f1a2 	.word	0x0000f1a2
    dd08:	00000000 	.word	0x00000000
    dd0c:	0000da71 	.word	0x0000da71

0000dd10 <__sfputc_r>:
    dd10:	6893      	ldr	r3, [r2, #8]
    dd12:	3b01      	subs	r3, #1
    dd14:	2b00      	cmp	r3, #0
    dd16:	b410      	push	{r4}
    dd18:	6093      	str	r3, [r2, #8]
    dd1a:	da08      	bge.n	dd2e <__sfputc_r+0x1e>
    dd1c:	6994      	ldr	r4, [r2, #24]
    dd1e:	42a3      	cmp	r3, r4
    dd20:	db02      	blt.n	dd28 <__sfputc_r+0x18>
    dd22:	b2cb      	uxtb	r3, r1
    dd24:	2b0a      	cmp	r3, #10
    dd26:	d102      	bne.n	dd2e <__sfputc_r+0x1e>
    dd28:	bc10      	pop	{r4}
    dd2a:	f7ff bbff 	b.w	d52c <__swbuf_r>
    dd2e:	6813      	ldr	r3, [r2, #0]
    dd30:	1c58      	adds	r0, r3, #1
    dd32:	6010      	str	r0, [r2, #0]
    dd34:	7019      	strb	r1, [r3, #0]
    dd36:	b2c8      	uxtb	r0, r1
    dd38:	bc10      	pop	{r4}
    dd3a:	4770      	bx	lr

0000dd3c <__sfputs_r>:
    dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd3e:	4606      	mov	r6, r0
    dd40:	460f      	mov	r7, r1
    dd42:	4614      	mov	r4, r2
    dd44:	18d5      	adds	r5, r2, r3
    dd46:	42ac      	cmp	r4, r5
    dd48:	d101      	bne.n	dd4e <__sfputs_r+0x12>
    dd4a:	2000      	movs	r0, #0
    dd4c:	e007      	b.n	dd5e <__sfputs_r+0x22>
    dd4e:	463a      	mov	r2, r7
    dd50:	f814 1b01 	ldrb.w	r1, [r4], #1
    dd54:	4630      	mov	r0, r6
    dd56:	f7ff ffdb 	bl	dd10 <__sfputc_r>
    dd5a:	1c43      	adds	r3, r0, #1
    dd5c:	d1f3      	bne.n	dd46 <__sfputs_r+0xa>
    dd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dd60 <_vfiprintf_r>:
    dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd64:	b09d      	sub	sp, #116	; 0x74
    dd66:	460c      	mov	r4, r1
    dd68:	4617      	mov	r7, r2
    dd6a:	9303      	str	r3, [sp, #12]
    dd6c:	4606      	mov	r6, r0
    dd6e:	b118      	cbz	r0, dd78 <_vfiprintf_r+0x18>
    dd70:	6983      	ldr	r3, [r0, #24]
    dd72:	b90b      	cbnz	r3, dd78 <_vfiprintf_r+0x18>
    dd74:	f7ff fd8c 	bl	d890 <__sinit>
    dd78:	4b7c      	ldr	r3, [pc, #496]	; (df6c <_vfiprintf_r+0x20c>)
    dd7a:	429c      	cmp	r4, r3
    dd7c:	d157      	bne.n	de2e <_vfiprintf_r+0xce>
    dd7e:	6874      	ldr	r4, [r6, #4]
    dd80:	89a3      	ldrh	r3, [r4, #12]
    dd82:	0718      	lsls	r0, r3, #28
    dd84:	d55d      	bpl.n	de42 <_vfiprintf_r+0xe2>
    dd86:	6923      	ldr	r3, [r4, #16]
    dd88:	2b00      	cmp	r3, #0
    dd8a:	d05a      	beq.n	de42 <_vfiprintf_r+0xe2>
    dd8c:	2300      	movs	r3, #0
    dd8e:	9309      	str	r3, [sp, #36]	; 0x24
    dd90:	2320      	movs	r3, #32
    dd92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    dd96:	2330      	movs	r3, #48	; 0x30
    dd98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    dd9c:	f04f 0b01 	mov.w	fp, #1
    dda0:	46b8      	mov	r8, r7
    dda2:	4645      	mov	r5, r8
    dda4:	f815 3b01 	ldrb.w	r3, [r5], #1
    dda8:	2b00      	cmp	r3, #0
    ddaa:	d155      	bne.n	de58 <_vfiprintf_r+0xf8>
    ddac:	ebb8 0a07 	subs.w	sl, r8, r7
    ddb0:	d00b      	beq.n	ddca <_vfiprintf_r+0x6a>
    ddb2:	4653      	mov	r3, sl
    ddb4:	463a      	mov	r2, r7
    ddb6:	4621      	mov	r1, r4
    ddb8:	4630      	mov	r0, r6
    ddba:	f7ff ffbf 	bl	dd3c <__sfputs_r>
    ddbe:	3001      	adds	r0, #1
    ddc0:	f000 80c4 	beq.w	df4c <_vfiprintf_r+0x1ec>
    ddc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ddc6:	4453      	add	r3, sl
    ddc8:	9309      	str	r3, [sp, #36]	; 0x24
    ddca:	f898 3000 	ldrb.w	r3, [r8]
    ddce:	2b00      	cmp	r3, #0
    ddd0:	f000 80bc 	beq.w	df4c <_vfiprintf_r+0x1ec>
    ddd4:	2300      	movs	r3, #0
    ddd6:	f04f 32ff 	mov.w	r2, #4294967295
    ddda:	9304      	str	r3, [sp, #16]
    dddc:	9307      	str	r3, [sp, #28]
    ddde:	9205      	str	r2, [sp, #20]
    dde0:	9306      	str	r3, [sp, #24]
    dde2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    dde6:	931a      	str	r3, [sp, #104]	; 0x68
    dde8:	2205      	movs	r2, #5
    ddea:	7829      	ldrb	r1, [r5, #0]
    ddec:	4860      	ldr	r0, [pc, #384]	; (df70 <_vfiprintf_r+0x210>)
    ddee:	f000 faff 	bl	e3f0 <memchr>
    ddf2:	f105 0801 	add.w	r8, r5, #1
    ddf6:	9b04      	ldr	r3, [sp, #16]
    ddf8:	2800      	cmp	r0, #0
    ddfa:	d131      	bne.n	de60 <_vfiprintf_r+0x100>
    ddfc:	06d9      	lsls	r1, r3, #27
    ddfe:	bf44      	itt	mi
    de00:	2220      	movmi	r2, #32
    de02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    de06:	071a      	lsls	r2, r3, #28
    de08:	bf44      	itt	mi
    de0a:	222b      	movmi	r2, #43	; 0x2b
    de0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    de10:	782a      	ldrb	r2, [r5, #0]
    de12:	2a2a      	cmp	r2, #42	; 0x2a
    de14:	d02c      	beq.n	de70 <_vfiprintf_r+0x110>
    de16:	9a07      	ldr	r2, [sp, #28]
    de18:	2100      	movs	r1, #0
    de1a:	200a      	movs	r0, #10
    de1c:	46a8      	mov	r8, r5
    de1e:	3501      	adds	r5, #1
    de20:	f898 3000 	ldrb.w	r3, [r8]
    de24:	3b30      	subs	r3, #48	; 0x30
    de26:	2b09      	cmp	r3, #9
    de28:	d96d      	bls.n	df06 <_vfiprintf_r+0x1a6>
    de2a:	b371      	cbz	r1, de8a <_vfiprintf_r+0x12a>
    de2c:	e026      	b.n	de7c <_vfiprintf_r+0x11c>
    de2e:	4b51      	ldr	r3, [pc, #324]	; (df74 <_vfiprintf_r+0x214>)
    de30:	429c      	cmp	r4, r3
    de32:	d101      	bne.n	de38 <_vfiprintf_r+0xd8>
    de34:	68b4      	ldr	r4, [r6, #8]
    de36:	e7a3      	b.n	dd80 <_vfiprintf_r+0x20>
    de38:	4b4f      	ldr	r3, [pc, #316]	; (df78 <_vfiprintf_r+0x218>)
    de3a:	429c      	cmp	r4, r3
    de3c:	bf08      	it	eq
    de3e:	68f4      	ldreq	r4, [r6, #12]
    de40:	e79e      	b.n	dd80 <_vfiprintf_r+0x20>
    de42:	4621      	mov	r1, r4
    de44:	4630      	mov	r0, r6
    de46:	f7ff fbc3 	bl	d5d0 <__swsetup_r>
    de4a:	2800      	cmp	r0, #0
    de4c:	d09e      	beq.n	dd8c <_vfiprintf_r+0x2c>
    de4e:	f04f 30ff 	mov.w	r0, #4294967295
    de52:	b01d      	add	sp, #116	; 0x74
    de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de58:	2b25      	cmp	r3, #37	; 0x25
    de5a:	d0a7      	beq.n	ddac <_vfiprintf_r+0x4c>
    de5c:	46a8      	mov	r8, r5
    de5e:	e7a0      	b.n	dda2 <_vfiprintf_r+0x42>
    de60:	4a43      	ldr	r2, [pc, #268]	; (df70 <_vfiprintf_r+0x210>)
    de62:	1a80      	subs	r0, r0, r2
    de64:	fa0b f000 	lsl.w	r0, fp, r0
    de68:	4318      	orrs	r0, r3
    de6a:	9004      	str	r0, [sp, #16]
    de6c:	4645      	mov	r5, r8
    de6e:	e7bb      	b.n	dde8 <_vfiprintf_r+0x88>
    de70:	9a03      	ldr	r2, [sp, #12]
    de72:	1d11      	adds	r1, r2, #4
    de74:	6812      	ldr	r2, [r2, #0]
    de76:	9103      	str	r1, [sp, #12]
    de78:	2a00      	cmp	r2, #0
    de7a:	db01      	blt.n	de80 <_vfiprintf_r+0x120>
    de7c:	9207      	str	r2, [sp, #28]
    de7e:	e004      	b.n	de8a <_vfiprintf_r+0x12a>
    de80:	4252      	negs	r2, r2
    de82:	f043 0302 	orr.w	r3, r3, #2
    de86:	9207      	str	r2, [sp, #28]
    de88:	9304      	str	r3, [sp, #16]
    de8a:	f898 3000 	ldrb.w	r3, [r8]
    de8e:	2b2e      	cmp	r3, #46	; 0x2e
    de90:	d110      	bne.n	deb4 <_vfiprintf_r+0x154>
    de92:	f898 3001 	ldrb.w	r3, [r8, #1]
    de96:	2b2a      	cmp	r3, #42	; 0x2a
    de98:	f108 0101 	add.w	r1, r8, #1
    de9c:	d137      	bne.n	df0e <_vfiprintf_r+0x1ae>
    de9e:	9b03      	ldr	r3, [sp, #12]
    dea0:	1d1a      	adds	r2, r3, #4
    dea2:	681b      	ldr	r3, [r3, #0]
    dea4:	9203      	str	r2, [sp, #12]
    dea6:	2b00      	cmp	r3, #0
    dea8:	bfb8      	it	lt
    deaa:	f04f 33ff 	movlt.w	r3, #4294967295
    deae:	f108 0802 	add.w	r8, r8, #2
    deb2:	9305      	str	r3, [sp, #20]
    deb4:	4d31      	ldr	r5, [pc, #196]	; (df7c <_vfiprintf_r+0x21c>)
    deb6:	f898 1000 	ldrb.w	r1, [r8]
    deba:	2203      	movs	r2, #3
    debc:	4628      	mov	r0, r5
    debe:	f000 fa97 	bl	e3f0 <memchr>
    dec2:	b140      	cbz	r0, ded6 <_vfiprintf_r+0x176>
    dec4:	2340      	movs	r3, #64	; 0x40
    dec6:	1b40      	subs	r0, r0, r5
    dec8:	fa03 f000 	lsl.w	r0, r3, r0
    decc:	9b04      	ldr	r3, [sp, #16]
    dece:	4303      	orrs	r3, r0
    ded0:	9304      	str	r3, [sp, #16]
    ded2:	f108 0801 	add.w	r8, r8, #1
    ded6:	f898 1000 	ldrb.w	r1, [r8]
    deda:	4829      	ldr	r0, [pc, #164]	; (df80 <_vfiprintf_r+0x220>)
    dedc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    dee0:	2206      	movs	r2, #6
    dee2:	f108 0701 	add.w	r7, r8, #1
    dee6:	f000 fa83 	bl	e3f0 <memchr>
    deea:	2800      	cmp	r0, #0
    deec:	d034      	beq.n	df58 <_vfiprintf_r+0x1f8>
    deee:	4b25      	ldr	r3, [pc, #148]	; (df84 <_vfiprintf_r+0x224>)
    def0:	bb03      	cbnz	r3, df34 <_vfiprintf_r+0x1d4>
    def2:	9b03      	ldr	r3, [sp, #12]
    def4:	3307      	adds	r3, #7
    def6:	f023 0307 	bic.w	r3, r3, #7
    defa:	3308      	adds	r3, #8
    defc:	9303      	str	r3, [sp, #12]
    defe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df00:	444b      	add	r3, r9
    df02:	9309      	str	r3, [sp, #36]	; 0x24
    df04:	e74c      	b.n	dda0 <_vfiprintf_r+0x40>
    df06:	fb00 3202 	mla	r2, r0, r2, r3
    df0a:	2101      	movs	r1, #1
    df0c:	e786      	b.n	de1c <_vfiprintf_r+0xbc>
    df0e:	2300      	movs	r3, #0
    df10:	9305      	str	r3, [sp, #20]
    df12:	4618      	mov	r0, r3
    df14:	250a      	movs	r5, #10
    df16:	4688      	mov	r8, r1
    df18:	3101      	adds	r1, #1
    df1a:	f898 2000 	ldrb.w	r2, [r8]
    df1e:	3a30      	subs	r2, #48	; 0x30
    df20:	2a09      	cmp	r2, #9
    df22:	d903      	bls.n	df2c <_vfiprintf_r+0x1cc>
    df24:	2b00      	cmp	r3, #0
    df26:	d0c5      	beq.n	deb4 <_vfiprintf_r+0x154>
    df28:	9005      	str	r0, [sp, #20]
    df2a:	e7c3      	b.n	deb4 <_vfiprintf_r+0x154>
    df2c:	fb05 2000 	mla	r0, r5, r0, r2
    df30:	2301      	movs	r3, #1
    df32:	e7f0      	b.n	df16 <_vfiprintf_r+0x1b6>
    df34:	ab03      	add	r3, sp, #12
    df36:	9300      	str	r3, [sp, #0]
    df38:	4622      	mov	r2, r4
    df3a:	4b13      	ldr	r3, [pc, #76]	; (df88 <_vfiprintf_r+0x228>)
    df3c:	a904      	add	r1, sp, #16
    df3e:	4630      	mov	r0, r6
    df40:	f3af 8000 	nop.w
    df44:	f1b0 3fff 	cmp.w	r0, #4294967295
    df48:	4681      	mov	r9, r0
    df4a:	d1d8      	bne.n	defe <_vfiprintf_r+0x19e>
    df4c:	89a3      	ldrh	r3, [r4, #12]
    df4e:	065b      	lsls	r3, r3, #25
    df50:	f53f af7d 	bmi.w	de4e <_vfiprintf_r+0xee>
    df54:	9809      	ldr	r0, [sp, #36]	; 0x24
    df56:	e77c      	b.n	de52 <_vfiprintf_r+0xf2>
    df58:	ab03      	add	r3, sp, #12
    df5a:	9300      	str	r3, [sp, #0]
    df5c:	4622      	mov	r2, r4
    df5e:	4b0a      	ldr	r3, [pc, #40]	; (df88 <_vfiprintf_r+0x228>)
    df60:	a904      	add	r1, sp, #16
    df62:	4630      	mov	r0, r6
    df64:	f000 f888 	bl	e078 <_printf_i>
    df68:	e7ec      	b.n	df44 <_vfiprintf_r+0x1e4>
    df6a:	bf00      	nop
    df6c:	0000f158 	.word	0x0000f158
    df70:	0000f198 	.word	0x0000f198
    df74:	0000f178 	.word	0x0000f178
    df78:	0000f138 	.word	0x0000f138
    df7c:	0000f19e 	.word	0x0000f19e
    df80:	0000f1a2 	.word	0x0000f1a2
    df84:	00000000 	.word	0x00000000
    df88:	0000dd3d 	.word	0x0000dd3d

0000df8c <_printf_common>:
    df8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df90:	4691      	mov	r9, r2
    df92:	461f      	mov	r7, r3
    df94:	688a      	ldr	r2, [r1, #8]
    df96:	690b      	ldr	r3, [r1, #16]
    df98:	f8dd 8020 	ldr.w	r8, [sp, #32]
    df9c:	4293      	cmp	r3, r2
    df9e:	bfb8      	it	lt
    dfa0:	4613      	movlt	r3, r2
    dfa2:	f8c9 3000 	str.w	r3, [r9]
    dfa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    dfaa:	4606      	mov	r6, r0
    dfac:	460c      	mov	r4, r1
    dfae:	b112      	cbz	r2, dfb6 <_printf_common+0x2a>
    dfb0:	3301      	adds	r3, #1
    dfb2:	f8c9 3000 	str.w	r3, [r9]
    dfb6:	6823      	ldr	r3, [r4, #0]
    dfb8:	0699      	lsls	r1, r3, #26
    dfba:	bf42      	ittt	mi
    dfbc:	f8d9 3000 	ldrmi.w	r3, [r9]
    dfc0:	3302      	addmi	r3, #2
    dfc2:	f8c9 3000 	strmi.w	r3, [r9]
    dfc6:	6825      	ldr	r5, [r4, #0]
    dfc8:	f015 0506 	ands.w	r5, r5, #6
    dfcc:	d107      	bne.n	dfde <_printf_common+0x52>
    dfce:	f104 0a19 	add.w	sl, r4, #25
    dfd2:	68e3      	ldr	r3, [r4, #12]
    dfd4:	f8d9 2000 	ldr.w	r2, [r9]
    dfd8:	1a9b      	subs	r3, r3, r2
    dfda:	429d      	cmp	r5, r3
    dfdc:	db29      	blt.n	e032 <_printf_common+0xa6>
    dfde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    dfe2:	6822      	ldr	r2, [r4, #0]
    dfe4:	3300      	adds	r3, #0
    dfe6:	bf18      	it	ne
    dfe8:	2301      	movne	r3, #1
    dfea:	0692      	lsls	r2, r2, #26
    dfec:	d42e      	bmi.n	e04c <_printf_common+0xc0>
    dfee:	f104 0243 	add.w	r2, r4, #67	; 0x43
    dff2:	4639      	mov	r1, r7
    dff4:	4630      	mov	r0, r6
    dff6:	47c0      	blx	r8
    dff8:	3001      	adds	r0, #1
    dffa:	d021      	beq.n	e040 <_printf_common+0xb4>
    dffc:	6823      	ldr	r3, [r4, #0]
    dffe:	68e5      	ldr	r5, [r4, #12]
    e000:	f8d9 2000 	ldr.w	r2, [r9]
    e004:	f003 0306 	and.w	r3, r3, #6
    e008:	2b04      	cmp	r3, #4
    e00a:	bf08      	it	eq
    e00c:	1aad      	subeq	r5, r5, r2
    e00e:	68a3      	ldr	r3, [r4, #8]
    e010:	6922      	ldr	r2, [r4, #16]
    e012:	bf0c      	ite	eq
    e014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    e018:	2500      	movne	r5, #0
    e01a:	4293      	cmp	r3, r2
    e01c:	bfc4      	itt	gt
    e01e:	1a9b      	subgt	r3, r3, r2
    e020:	18ed      	addgt	r5, r5, r3
    e022:	f04f 0900 	mov.w	r9, #0
    e026:	341a      	adds	r4, #26
    e028:	454d      	cmp	r5, r9
    e02a:	d11b      	bne.n	e064 <_printf_common+0xd8>
    e02c:	2000      	movs	r0, #0
    e02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e032:	2301      	movs	r3, #1
    e034:	4652      	mov	r2, sl
    e036:	4639      	mov	r1, r7
    e038:	4630      	mov	r0, r6
    e03a:	47c0      	blx	r8
    e03c:	3001      	adds	r0, #1
    e03e:	d103      	bne.n	e048 <_printf_common+0xbc>
    e040:	f04f 30ff 	mov.w	r0, #4294967295
    e044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e048:	3501      	adds	r5, #1
    e04a:	e7c2      	b.n	dfd2 <_printf_common+0x46>
    e04c:	18e1      	adds	r1, r4, r3
    e04e:	1c5a      	adds	r2, r3, #1
    e050:	2030      	movs	r0, #48	; 0x30
    e052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    e056:	4422      	add	r2, r4
    e058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    e05c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    e060:	3302      	adds	r3, #2
    e062:	e7c4      	b.n	dfee <_printf_common+0x62>
    e064:	2301      	movs	r3, #1
    e066:	4622      	mov	r2, r4
    e068:	4639      	mov	r1, r7
    e06a:	4630      	mov	r0, r6
    e06c:	47c0      	blx	r8
    e06e:	3001      	adds	r0, #1
    e070:	d0e6      	beq.n	e040 <_printf_common+0xb4>
    e072:	f109 0901 	add.w	r9, r9, #1
    e076:	e7d7      	b.n	e028 <_printf_common+0x9c>

0000e078 <_printf_i>:
    e078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e07c:	4617      	mov	r7, r2
    e07e:	7e0a      	ldrb	r2, [r1, #24]
    e080:	b085      	sub	sp, #20
    e082:	2a6e      	cmp	r2, #110	; 0x6e
    e084:	4698      	mov	r8, r3
    e086:	4606      	mov	r6, r0
    e088:	460c      	mov	r4, r1
    e08a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e08c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    e090:	f000 80bc 	beq.w	e20c <_printf_i+0x194>
    e094:	d81a      	bhi.n	e0cc <_printf_i+0x54>
    e096:	2a63      	cmp	r2, #99	; 0x63
    e098:	d02e      	beq.n	e0f8 <_printf_i+0x80>
    e09a:	d80a      	bhi.n	e0b2 <_printf_i+0x3a>
    e09c:	2a00      	cmp	r2, #0
    e09e:	f000 80c8 	beq.w	e232 <_printf_i+0x1ba>
    e0a2:	2a58      	cmp	r2, #88	; 0x58
    e0a4:	f000 808a 	beq.w	e1bc <_printf_i+0x144>
    e0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e0ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    e0b0:	e02a      	b.n	e108 <_printf_i+0x90>
    e0b2:	2a64      	cmp	r2, #100	; 0x64
    e0b4:	d001      	beq.n	e0ba <_printf_i+0x42>
    e0b6:	2a69      	cmp	r2, #105	; 0x69
    e0b8:	d1f6      	bne.n	e0a8 <_printf_i+0x30>
    e0ba:	6821      	ldr	r1, [r4, #0]
    e0bc:	681a      	ldr	r2, [r3, #0]
    e0be:	f011 0f80 	tst.w	r1, #128	; 0x80
    e0c2:	d023      	beq.n	e10c <_printf_i+0x94>
    e0c4:	1d11      	adds	r1, r2, #4
    e0c6:	6019      	str	r1, [r3, #0]
    e0c8:	6813      	ldr	r3, [r2, #0]
    e0ca:	e027      	b.n	e11c <_printf_i+0xa4>
    e0cc:	2a73      	cmp	r2, #115	; 0x73
    e0ce:	f000 80b4 	beq.w	e23a <_printf_i+0x1c2>
    e0d2:	d808      	bhi.n	e0e6 <_printf_i+0x6e>
    e0d4:	2a6f      	cmp	r2, #111	; 0x6f
    e0d6:	d02a      	beq.n	e12e <_printf_i+0xb6>
    e0d8:	2a70      	cmp	r2, #112	; 0x70
    e0da:	d1e5      	bne.n	e0a8 <_printf_i+0x30>
    e0dc:	680a      	ldr	r2, [r1, #0]
    e0de:	f042 0220 	orr.w	r2, r2, #32
    e0e2:	600a      	str	r2, [r1, #0]
    e0e4:	e003      	b.n	e0ee <_printf_i+0x76>
    e0e6:	2a75      	cmp	r2, #117	; 0x75
    e0e8:	d021      	beq.n	e12e <_printf_i+0xb6>
    e0ea:	2a78      	cmp	r2, #120	; 0x78
    e0ec:	d1dc      	bne.n	e0a8 <_printf_i+0x30>
    e0ee:	2278      	movs	r2, #120	; 0x78
    e0f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    e0f4:	496e      	ldr	r1, [pc, #440]	; (e2b0 <_printf_i+0x238>)
    e0f6:	e064      	b.n	e1c2 <_printf_i+0x14a>
    e0f8:	681a      	ldr	r2, [r3, #0]
    e0fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
    e0fe:	1d11      	adds	r1, r2, #4
    e100:	6019      	str	r1, [r3, #0]
    e102:	6813      	ldr	r3, [r2, #0]
    e104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    e108:	2301      	movs	r3, #1
    e10a:	e0a3      	b.n	e254 <_printf_i+0x1dc>
    e10c:	f011 0f40 	tst.w	r1, #64	; 0x40
    e110:	f102 0104 	add.w	r1, r2, #4
    e114:	6019      	str	r1, [r3, #0]
    e116:	d0d7      	beq.n	e0c8 <_printf_i+0x50>
    e118:	f9b2 3000 	ldrsh.w	r3, [r2]
    e11c:	2b00      	cmp	r3, #0
    e11e:	da03      	bge.n	e128 <_printf_i+0xb0>
    e120:	222d      	movs	r2, #45	; 0x2d
    e122:	425b      	negs	r3, r3
    e124:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    e128:	4962      	ldr	r1, [pc, #392]	; (e2b4 <_printf_i+0x23c>)
    e12a:	220a      	movs	r2, #10
    e12c:	e017      	b.n	e15e <_printf_i+0xe6>
    e12e:	6820      	ldr	r0, [r4, #0]
    e130:	6819      	ldr	r1, [r3, #0]
    e132:	f010 0f80 	tst.w	r0, #128	; 0x80
    e136:	d003      	beq.n	e140 <_printf_i+0xc8>
    e138:	1d08      	adds	r0, r1, #4
    e13a:	6018      	str	r0, [r3, #0]
    e13c:	680b      	ldr	r3, [r1, #0]
    e13e:	e006      	b.n	e14e <_printf_i+0xd6>
    e140:	f010 0f40 	tst.w	r0, #64	; 0x40
    e144:	f101 0004 	add.w	r0, r1, #4
    e148:	6018      	str	r0, [r3, #0]
    e14a:	d0f7      	beq.n	e13c <_printf_i+0xc4>
    e14c:	880b      	ldrh	r3, [r1, #0]
    e14e:	4959      	ldr	r1, [pc, #356]	; (e2b4 <_printf_i+0x23c>)
    e150:	2a6f      	cmp	r2, #111	; 0x6f
    e152:	bf14      	ite	ne
    e154:	220a      	movne	r2, #10
    e156:	2208      	moveq	r2, #8
    e158:	2000      	movs	r0, #0
    e15a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    e15e:	6865      	ldr	r5, [r4, #4]
    e160:	60a5      	str	r5, [r4, #8]
    e162:	2d00      	cmp	r5, #0
    e164:	f2c0 809c 	blt.w	e2a0 <_printf_i+0x228>
    e168:	6820      	ldr	r0, [r4, #0]
    e16a:	f020 0004 	bic.w	r0, r0, #4
    e16e:	6020      	str	r0, [r4, #0]
    e170:	2b00      	cmp	r3, #0
    e172:	d13f      	bne.n	e1f4 <_printf_i+0x17c>
    e174:	2d00      	cmp	r5, #0
    e176:	f040 8095 	bne.w	e2a4 <_printf_i+0x22c>
    e17a:	4675      	mov	r5, lr
    e17c:	2a08      	cmp	r2, #8
    e17e:	d10b      	bne.n	e198 <_printf_i+0x120>
    e180:	6823      	ldr	r3, [r4, #0]
    e182:	07da      	lsls	r2, r3, #31
    e184:	d508      	bpl.n	e198 <_printf_i+0x120>
    e186:	6923      	ldr	r3, [r4, #16]
    e188:	6862      	ldr	r2, [r4, #4]
    e18a:	429a      	cmp	r2, r3
    e18c:	bfde      	ittt	le
    e18e:	2330      	movle	r3, #48	; 0x30
    e190:	f805 3c01 	strble.w	r3, [r5, #-1]
    e194:	f105 35ff 	addle.w	r5, r5, #4294967295
    e198:	ebae 0305 	sub.w	r3, lr, r5
    e19c:	6123      	str	r3, [r4, #16]
    e19e:	f8cd 8000 	str.w	r8, [sp]
    e1a2:	463b      	mov	r3, r7
    e1a4:	aa03      	add	r2, sp, #12
    e1a6:	4621      	mov	r1, r4
    e1a8:	4630      	mov	r0, r6
    e1aa:	f7ff feef 	bl	df8c <_printf_common>
    e1ae:	3001      	adds	r0, #1
    e1b0:	d155      	bne.n	e25e <_printf_i+0x1e6>
    e1b2:	f04f 30ff 	mov.w	r0, #4294967295
    e1b6:	b005      	add	sp, #20
    e1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e1bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    e1c0:	493c      	ldr	r1, [pc, #240]	; (e2b4 <_printf_i+0x23c>)
    e1c2:	6822      	ldr	r2, [r4, #0]
    e1c4:	6818      	ldr	r0, [r3, #0]
    e1c6:	f012 0f80 	tst.w	r2, #128	; 0x80
    e1ca:	f100 0504 	add.w	r5, r0, #4
    e1ce:	601d      	str	r5, [r3, #0]
    e1d0:	d001      	beq.n	e1d6 <_printf_i+0x15e>
    e1d2:	6803      	ldr	r3, [r0, #0]
    e1d4:	e002      	b.n	e1dc <_printf_i+0x164>
    e1d6:	0655      	lsls	r5, r2, #25
    e1d8:	d5fb      	bpl.n	e1d2 <_printf_i+0x15a>
    e1da:	8803      	ldrh	r3, [r0, #0]
    e1dc:	07d0      	lsls	r0, r2, #31
    e1de:	bf44      	itt	mi
    e1e0:	f042 0220 	orrmi.w	r2, r2, #32
    e1e4:	6022      	strmi	r2, [r4, #0]
    e1e6:	b91b      	cbnz	r3, e1f0 <_printf_i+0x178>
    e1e8:	6822      	ldr	r2, [r4, #0]
    e1ea:	f022 0220 	bic.w	r2, r2, #32
    e1ee:	6022      	str	r2, [r4, #0]
    e1f0:	2210      	movs	r2, #16
    e1f2:	e7b1      	b.n	e158 <_printf_i+0xe0>
    e1f4:	4675      	mov	r5, lr
    e1f6:	fbb3 f0f2 	udiv	r0, r3, r2
    e1fa:	fb02 3310 	mls	r3, r2, r0, r3
    e1fe:	5ccb      	ldrb	r3, [r1, r3]
    e200:	f805 3d01 	strb.w	r3, [r5, #-1]!
    e204:	4603      	mov	r3, r0
    e206:	2800      	cmp	r0, #0
    e208:	d1f5      	bne.n	e1f6 <_printf_i+0x17e>
    e20a:	e7b7      	b.n	e17c <_printf_i+0x104>
    e20c:	6808      	ldr	r0, [r1, #0]
    e20e:	681a      	ldr	r2, [r3, #0]
    e210:	6949      	ldr	r1, [r1, #20]
    e212:	f010 0f80 	tst.w	r0, #128	; 0x80
    e216:	d004      	beq.n	e222 <_printf_i+0x1aa>
    e218:	1d10      	adds	r0, r2, #4
    e21a:	6018      	str	r0, [r3, #0]
    e21c:	6813      	ldr	r3, [r2, #0]
    e21e:	6019      	str	r1, [r3, #0]
    e220:	e007      	b.n	e232 <_printf_i+0x1ba>
    e222:	f010 0f40 	tst.w	r0, #64	; 0x40
    e226:	f102 0004 	add.w	r0, r2, #4
    e22a:	6018      	str	r0, [r3, #0]
    e22c:	6813      	ldr	r3, [r2, #0]
    e22e:	d0f6      	beq.n	e21e <_printf_i+0x1a6>
    e230:	8019      	strh	r1, [r3, #0]
    e232:	2300      	movs	r3, #0
    e234:	6123      	str	r3, [r4, #16]
    e236:	4675      	mov	r5, lr
    e238:	e7b1      	b.n	e19e <_printf_i+0x126>
    e23a:	681a      	ldr	r2, [r3, #0]
    e23c:	1d11      	adds	r1, r2, #4
    e23e:	6019      	str	r1, [r3, #0]
    e240:	6815      	ldr	r5, [r2, #0]
    e242:	6862      	ldr	r2, [r4, #4]
    e244:	2100      	movs	r1, #0
    e246:	4628      	mov	r0, r5
    e248:	f000 f8d2 	bl	e3f0 <memchr>
    e24c:	b108      	cbz	r0, e252 <_printf_i+0x1da>
    e24e:	1b40      	subs	r0, r0, r5
    e250:	6060      	str	r0, [r4, #4]
    e252:	6863      	ldr	r3, [r4, #4]
    e254:	6123      	str	r3, [r4, #16]
    e256:	2300      	movs	r3, #0
    e258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e25c:	e79f      	b.n	e19e <_printf_i+0x126>
    e25e:	6923      	ldr	r3, [r4, #16]
    e260:	462a      	mov	r2, r5
    e262:	4639      	mov	r1, r7
    e264:	4630      	mov	r0, r6
    e266:	47c0      	blx	r8
    e268:	3001      	adds	r0, #1
    e26a:	d0a2      	beq.n	e1b2 <_printf_i+0x13a>
    e26c:	6823      	ldr	r3, [r4, #0]
    e26e:	079b      	lsls	r3, r3, #30
    e270:	d507      	bpl.n	e282 <_printf_i+0x20a>
    e272:	2500      	movs	r5, #0
    e274:	f104 0919 	add.w	r9, r4, #25
    e278:	68e3      	ldr	r3, [r4, #12]
    e27a:	9a03      	ldr	r2, [sp, #12]
    e27c:	1a9b      	subs	r3, r3, r2
    e27e:	429d      	cmp	r5, r3
    e280:	db05      	blt.n	e28e <_printf_i+0x216>
    e282:	68e0      	ldr	r0, [r4, #12]
    e284:	9b03      	ldr	r3, [sp, #12]
    e286:	4298      	cmp	r0, r3
    e288:	bfb8      	it	lt
    e28a:	4618      	movlt	r0, r3
    e28c:	e793      	b.n	e1b6 <_printf_i+0x13e>
    e28e:	2301      	movs	r3, #1
    e290:	464a      	mov	r2, r9
    e292:	4639      	mov	r1, r7
    e294:	4630      	mov	r0, r6
    e296:	47c0      	blx	r8
    e298:	3001      	adds	r0, #1
    e29a:	d08a      	beq.n	e1b2 <_printf_i+0x13a>
    e29c:	3501      	adds	r5, #1
    e29e:	e7eb      	b.n	e278 <_printf_i+0x200>
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	d1a7      	bne.n	e1f4 <_printf_i+0x17c>
    e2a4:	780b      	ldrb	r3, [r1, #0]
    e2a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    e2aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e2ae:	e765      	b.n	e17c <_printf_i+0x104>
    e2b0:	0000f1ba 	.word	0x0000f1ba
    e2b4:	0000f1a9 	.word	0x0000f1a9

0000e2b8 <__sread>:
    e2b8:	b510      	push	{r4, lr}
    e2ba:	460c      	mov	r4, r1
    e2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e2c0:	f000 f926 	bl	e510 <_read_r>
    e2c4:	2800      	cmp	r0, #0
    e2c6:	bfab      	itete	ge
    e2c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    e2ca:	89a3      	ldrhlt	r3, [r4, #12]
    e2cc:	181b      	addge	r3, r3, r0
    e2ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    e2d2:	bfac      	ite	ge
    e2d4:	6563      	strge	r3, [r4, #84]	; 0x54
    e2d6:	81a3      	strhlt	r3, [r4, #12]
    e2d8:	bd10      	pop	{r4, pc}

0000e2da <__swrite>:
    e2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2de:	461f      	mov	r7, r3
    e2e0:	898b      	ldrh	r3, [r1, #12]
    e2e2:	05db      	lsls	r3, r3, #23
    e2e4:	4605      	mov	r5, r0
    e2e6:	460c      	mov	r4, r1
    e2e8:	4616      	mov	r6, r2
    e2ea:	d505      	bpl.n	e2f8 <__swrite+0x1e>
    e2ec:	2302      	movs	r3, #2
    e2ee:	2200      	movs	r2, #0
    e2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e2f4:	f000 f868 	bl	e3c8 <_lseek_r>
    e2f8:	89a3      	ldrh	r3, [r4, #12]
    e2fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e2fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e302:	81a3      	strh	r3, [r4, #12]
    e304:	4632      	mov	r2, r6
    e306:	463b      	mov	r3, r7
    e308:	4628      	mov	r0, r5
    e30a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e30e:	f000 b817 	b.w	e340 <_write_r>

0000e312 <__sseek>:
    e312:	b510      	push	{r4, lr}
    e314:	460c      	mov	r4, r1
    e316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e31a:	f000 f855 	bl	e3c8 <_lseek_r>
    e31e:	1c43      	adds	r3, r0, #1
    e320:	89a3      	ldrh	r3, [r4, #12]
    e322:	bf15      	itete	ne
    e324:	6560      	strne	r0, [r4, #84]	; 0x54
    e326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    e32a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    e32e:	81a3      	strheq	r3, [r4, #12]
    e330:	bf18      	it	ne
    e332:	81a3      	strhne	r3, [r4, #12]
    e334:	bd10      	pop	{r4, pc}

0000e336 <__sclose>:
    e336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e33a:	f000 b813 	b.w	e364 <_close_r>
	...

0000e340 <_write_r>:
    e340:	b538      	push	{r3, r4, r5, lr}
    e342:	4c07      	ldr	r4, [pc, #28]	; (e360 <_write_r+0x20>)
    e344:	4605      	mov	r5, r0
    e346:	4608      	mov	r0, r1
    e348:	4611      	mov	r1, r2
    e34a:	2200      	movs	r2, #0
    e34c:	6022      	str	r2, [r4, #0]
    e34e:	461a      	mov	r2, r3
    e350:	f7fd f80a 	bl	b368 <_write>
    e354:	1c43      	adds	r3, r0, #1
    e356:	d102      	bne.n	e35e <_write_r+0x1e>
    e358:	6823      	ldr	r3, [r4, #0]
    e35a:	b103      	cbz	r3, e35e <_write_r+0x1e>
    e35c:	602b      	str	r3, [r5, #0]
    e35e:	bd38      	pop	{r3, r4, r5, pc}
    e360:	20007d8c 	.word	0x20007d8c

0000e364 <_close_r>:
    e364:	b538      	push	{r3, r4, r5, lr}
    e366:	4c06      	ldr	r4, [pc, #24]	; (e380 <_close_r+0x1c>)
    e368:	2300      	movs	r3, #0
    e36a:	4605      	mov	r5, r0
    e36c:	4608      	mov	r0, r1
    e36e:	6023      	str	r3, [r4, #0]
    e370:	f7f8 ff88 	bl	7284 <_close>
    e374:	1c43      	adds	r3, r0, #1
    e376:	d102      	bne.n	e37e <_close_r+0x1a>
    e378:	6823      	ldr	r3, [r4, #0]
    e37a:	b103      	cbz	r3, e37e <_close_r+0x1a>
    e37c:	602b      	str	r3, [r5, #0]
    e37e:	bd38      	pop	{r3, r4, r5, pc}
    e380:	20007d8c 	.word	0x20007d8c

0000e384 <_fstat_r>:
    e384:	b538      	push	{r3, r4, r5, lr}
    e386:	4c07      	ldr	r4, [pc, #28]	; (e3a4 <_fstat_r+0x20>)
    e388:	2300      	movs	r3, #0
    e38a:	4605      	mov	r5, r0
    e38c:	4608      	mov	r0, r1
    e38e:	4611      	mov	r1, r2
    e390:	6023      	str	r3, [r4, #0]
    e392:	f7f8 ff7a 	bl	728a <_fstat>
    e396:	1c43      	adds	r3, r0, #1
    e398:	d102      	bne.n	e3a0 <_fstat_r+0x1c>
    e39a:	6823      	ldr	r3, [r4, #0]
    e39c:	b103      	cbz	r3, e3a0 <_fstat_r+0x1c>
    e39e:	602b      	str	r3, [r5, #0]
    e3a0:	bd38      	pop	{r3, r4, r5, pc}
    e3a2:	bf00      	nop
    e3a4:	20007d8c 	.word	0x20007d8c

0000e3a8 <_isatty_r>:
    e3a8:	b538      	push	{r3, r4, r5, lr}
    e3aa:	4c06      	ldr	r4, [pc, #24]	; (e3c4 <_isatty_r+0x1c>)
    e3ac:	2300      	movs	r3, #0
    e3ae:	4605      	mov	r5, r0
    e3b0:	4608      	mov	r0, r1
    e3b2:	6023      	str	r3, [r4, #0]
    e3b4:	f7f8 ff6e 	bl	7294 <_isatty>
    e3b8:	1c43      	adds	r3, r0, #1
    e3ba:	d102      	bne.n	e3c2 <_isatty_r+0x1a>
    e3bc:	6823      	ldr	r3, [r4, #0]
    e3be:	b103      	cbz	r3, e3c2 <_isatty_r+0x1a>
    e3c0:	602b      	str	r3, [r5, #0]
    e3c2:	bd38      	pop	{r3, r4, r5, pc}
    e3c4:	20007d8c 	.word	0x20007d8c

0000e3c8 <_lseek_r>:
    e3c8:	b538      	push	{r3, r4, r5, lr}
    e3ca:	4c07      	ldr	r4, [pc, #28]	; (e3e8 <_lseek_r+0x20>)
    e3cc:	4605      	mov	r5, r0
    e3ce:	4608      	mov	r0, r1
    e3d0:	4611      	mov	r1, r2
    e3d2:	2200      	movs	r2, #0
    e3d4:	6022      	str	r2, [r4, #0]
    e3d6:	461a      	mov	r2, r3
    e3d8:	f7f8 ff5e 	bl	7298 <_lseek>
    e3dc:	1c43      	adds	r3, r0, #1
    e3de:	d102      	bne.n	e3e6 <_lseek_r+0x1e>
    e3e0:	6823      	ldr	r3, [r4, #0]
    e3e2:	b103      	cbz	r3, e3e6 <_lseek_r+0x1e>
    e3e4:	602b      	str	r3, [r5, #0]
    e3e6:	bd38      	pop	{r3, r4, r5, pc}
    e3e8:	20007d8c 	.word	0x20007d8c
    e3ec:	00000000 	.word	0x00000000

0000e3f0 <memchr>:
    e3f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e3f4:	2a10      	cmp	r2, #16
    e3f6:	db2b      	blt.n	e450 <memchr+0x60>
    e3f8:	f010 0f07 	tst.w	r0, #7
    e3fc:	d008      	beq.n	e410 <memchr+0x20>
    e3fe:	f810 3b01 	ldrb.w	r3, [r0], #1
    e402:	3a01      	subs	r2, #1
    e404:	428b      	cmp	r3, r1
    e406:	d02d      	beq.n	e464 <memchr+0x74>
    e408:	f010 0f07 	tst.w	r0, #7
    e40c:	b342      	cbz	r2, e460 <memchr+0x70>
    e40e:	d1f6      	bne.n	e3fe <memchr+0xe>
    e410:	b4f0      	push	{r4, r5, r6, r7}
    e412:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e416:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e41a:	f022 0407 	bic.w	r4, r2, #7
    e41e:	f07f 0700 	mvns.w	r7, #0
    e422:	2300      	movs	r3, #0
    e424:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e428:	3c08      	subs	r4, #8
    e42a:	ea85 0501 	eor.w	r5, r5, r1
    e42e:	ea86 0601 	eor.w	r6, r6, r1
    e432:	fa85 f547 	uadd8	r5, r5, r7
    e436:	faa3 f587 	sel	r5, r3, r7
    e43a:	fa86 f647 	uadd8	r6, r6, r7
    e43e:	faa5 f687 	sel	r6, r5, r7
    e442:	b98e      	cbnz	r6, e468 <memchr+0x78>
    e444:	d1ee      	bne.n	e424 <memchr+0x34>
    e446:	bcf0      	pop	{r4, r5, r6, r7}
    e448:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e44c:	f002 0207 	and.w	r2, r2, #7
    e450:	b132      	cbz	r2, e460 <memchr+0x70>
    e452:	f810 3b01 	ldrb.w	r3, [r0], #1
    e456:	3a01      	subs	r2, #1
    e458:	ea83 0301 	eor.w	r3, r3, r1
    e45c:	b113      	cbz	r3, e464 <memchr+0x74>
    e45e:	d1f8      	bne.n	e452 <memchr+0x62>
    e460:	2000      	movs	r0, #0
    e462:	4770      	bx	lr
    e464:	3801      	subs	r0, #1
    e466:	4770      	bx	lr
    e468:	2d00      	cmp	r5, #0
    e46a:	bf06      	itte	eq
    e46c:	4635      	moveq	r5, r6
    e46e:	3803      	subeq	r0, #3
    e470:	3807      	subne	r0, #7
    e472:	f015 0f01 	tst.w	r5, #1
    e476:	d107      	bne.n	e488 <memchr+0x98>
    e478:	3001      	adds	r0, #1
    e47a:	f415 7f80 	tst.w	r5, #256	; 0x100
    e47e:	bf02      	ittt	eq
    e480:	3001      	addeq	r0, #1
    e482:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e486:	3001      	addeq	r0, #1
    e488:	bcf0      	pop	{r4, r5, r6, r7}
    e48a:	3801      	subs	r0, #1
    e48c:	4770      	bx	lr
    e48e:	bf00      	nop

0000e490 <memmove>:
    e490:	4288      	cmp	r0, r1
    e492:	b510      	push	{r4, lr}
    e494:	eb01 0302 	add.w	r3, r1, r2
    e498:	d803      	bhi.n	e4a2 <memmove+0x12>
    e49a:	1e42      	subs	r2, r0, #1
    e49c:	4299      	cmp	r1, r3
    e49e:	d10c      	bne.n	e4ba <memmove+0x2a>
    e4a0:	bd10      	pop	{r4, pc}
    e4a2:	4298      	cmp	r0, r3
    e4a4:	d2f9      	bcs.n	e49a <memmove+0xa>
    e4a6:	1881      	adds	r1, r0, r2
    e4a8:	1ad2      	subs	r2, r2, r3
    e4aa:	42d3      	cmn	r3, r2
    e4ac:	d100      	bne.n	e4b0 <memmove+0x20>
    e4ae:	bd10      	pop	{r4, pc}
    e4b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    e4b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    e4b8:	e7f7      	b.n	e4aa <memmove+0x1a>
    e4ba:	f811 4b01 	ldrb.w	r4, [r1], #1
    e4be:	f802 4f01 	strb.w	r4, [r2, #1]!
    e4c2:	e7eb      	b.n	e49c <memmove+0xc>

0000e4c4 <_realloc_r>:
    e4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4c6:	4607      	mov	r7, r0
    e4c8:	4614      	mov	r4, r2
    e4ca:	460e      	mov	r6, r1
    e4cc:	b921      	cbnz	r1, e4d8 <_realloc_r+0x14>
    e4ce:	4611      	mov	r1, r2
    e4d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e4d4:	f7fe be5e 	b.w	d194 <_malloc_r>
    e4d8:	b922      	cbnz	r2, e4e4 <_realloc_r+0x20>
    e4da:	f7fe fe0d 	bl	d0f8 <_free_r>
    e4de:	4625      	mov	r5, r4
    e4e0:	4628      	mov	r0, r5
    e4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4e4:	f000 f826 	bl	e534 <_malloc_usable_size_r>
    e4e8:	4284      	cmp	r4, r0
    e4ea:	d90f      	bls.n	e50c <_realloc_r+0x48>
    e4ec:	4621      	mov	r1, r4
    e4ee:	4638      	mov	r0, r7
    e4f0:	f7fe fe50 	bl	d194 <_malloc_r>
    e4f4:	4605      	mov	r5, r0
    e4f6:	2800      	cmp	r0, #0
    e4f8:	d0f2      	beq.n	e4e0 <_realloc_r+0x1c>
    e4fa:	4631      	mov	r1, r6
    e4fc:	4622      	mov	r2, r4
    e4fe:	f7fe fde7 	bl	d0d0 <memcpy>
    e502:	4631      	mov	r1, r6
    e504:	4638      	mov	r0, r7
    e506:	f7fe fdf7 	bl	d0f8 <_free_r>
    e50a:	e7e9      	b.n	e4e0 <_realloc_r+0x1c>
    e50c:	4635      	mov	r5, r6
    e50e:	e7e7      	b.n	e4e0 <_realloc_r+0x1c>

0000e510 <_read_r>:
    e510:	b538      	push	{r3, r4, r5, lr}
    e512:	4c07      	ldr	r4, [pc, #28]	; (e530 <_read_r+0x20>)
    e514:	4605      	mov	r5, r0
    e516:	4608      	mov	r0, r1
    e518:	4611      	mov	r1, r2
    e51a:	2200      	movs	r2, #0
    e51c:	6022      	str	r2, [r4, #0]
    e51e:	461a      	mov	r2, r3
    e520:	f7fc ff12 	bl	b348 <_read>
    e524:	1c43      	adds	r3, r0, #1
    e526:	d102      	bne.n	e52e <_read_r+0x1e>
    e528:	6823      	ldr	r3, [r4, #0]
    e52a:	b103      	cbz	r3, e52e <_read_r+0x1e>
    e52c:	602b      	str	r3, [r5, #0]
    e52e:	bd38      	pop	{r3, r4, r5, pc}
    e530:	20007d8c 	.word	0x20007d8c

0000e534 <_malloc_usable_size_r>:
    e534:	f851 0c04 	ldr.w	r0, [r1, #-4]
    e538:	2800      	cmp	r0, #0
    e53a:	f1a0 0004 	sub.w	r0, r0, #4
    e53e:	bfbc      	itt	lt
    e540:	580b      	ldrlt	r3, [r1, r0]
    e542:	18c0      	addlt	r0, r0, r3
    e544:	4770      	bx	lr
    e546:	0000      	movs	r0, r0
    e548:	682f2e2e 	.word	0x682f2e2e
    e54c:	692f6c61 	.word	0x692f6c61
    e550:	756c636e 	.word	0x756c636e
    e554:	682f6564 	.word	0x682f6564
    e558:	775f6c61 	.word	0x775f6c61
    e55c:	682e7464 	.word	0x682e7464
    e560:	00000000 	.word	0x00000000
    e564:	7974227b 	.word	0x7974227b
    e568:	3a226570 	.word	0x3a226570
    e56c:	43574822 	.word	0x43574822
    e570:	2c224746 	.word	0x2c224746
    e574:	61642220 	.word	0x61642220
    e578:	3a226174 	.word	0x3a226174
    e57c:	64252220 	.word	0x64252220
    e580:	0a0d7d22 	.word	0x0a0d7d22
    e584:	00000000 	.word	0x00000000
    e588:	55204f4e 	.word	0x55204f4e
    e58c:	20524553 	.word	0x20524553
    e590:	20574f52 	.word	0x20574f52
    e594:	43454843 	.word	0x43454843
    e598:	0000214b 	.word	0x0000214b
    e59c:	7974227b 	.word	0x7974227b
    e5a0:	3a226570 	.word	0x3a226570
    e5a4:	52415722 	.word	0x52415722
    e5a8:	474e494e 	.word	0x474e494e
    e5ac:	22202c22 	.word	0x22202c22
    e5b0:	61746164 	.word	0x61746164
    e5b4:	5b203a22 	.word	0x5b203a22
    e5b8:	22732522 	.word	0x22732522
    e5bc:	0a0d7d5d 	.word	0x0a0d7d5d
    e5c0:	00000000 	.word	0x00000000
    e5c4:	55206f4e 	.word	0x55206f4e
    e5c8:	2074696e 	.word	0x2074696e
    e5cc:	74736554 	.word	0x74736554
    e5d0:	00000000 	.word	0x00000000
    e5d4:	48206f4e 	.word	0x48206f4e
    e5d8:	77647261 	.word	0x77647261
    e5dc:	20657261 	.word	0x20657261
    e5e0:	74736554 	.word	0x74736554
    e5e4:	00000000 	.word	0x00000000
    e5e8:	64616552 	.word	0x64616552
    e5ec:	20676e69 	.word	0x20676e69
    e5f0:	72657355 	.word	0x72657355
    e5f4:	776f5220 	.word	0x776f5220
    e5f8:	00000000 	.word	0x00000000
    e5fc:	7974227b 	.word	0x7974227b
    e600:	3a226570 	.word	0x3a226570
    e604:	474f4c22 	.word	0x474f4c22
    e608:	22202c22 	.word	0x22202c22
    e60c:	61746164 	.word	0x61746164
    e610:	5b203a22 	.word	0x5b203a22
    e614:	22732522 	.word	0x22732522
    e618:	0a0d7d5d 	.word	0x0a0d7d5d
    e61c:	00000000 	.word	0x00000000
    e620:	69726556 	.word	0x69726556
    e624:	6e697966 	.word	0x6e697966
    e628:	73552067 	.word	0x73552067
    e62c:	52207265 	.word	0x52207265
    e630:	0000776f 	.word	0x0000776f
    e634:	61647055 	.word	0x61647055
    e638:	676e6974 	.word	0x676e6974
    e63c:	65735520 	.word	0x65735520
    e640:	6f522072 	.word	0x6f522072
    e644:	00000077 	.word	0x00000077
    e648:	74737953 	.word	0x74737953
    e64c:	52206d65 	.word	0x52206d65
    e650:	74657365 	.word	0x74657365
    e654:	00000000 	.word	0x00000000
    e658:	68636e55 	.word	0x68636e55
    e65c:	65676e61 	.word	0x65676e61
    e660:	73552064 	.word	0x73552064
    e664:	52207265 	.word	0x52207265
    e668:	0000776f 	.word	0x0000776f
    e66c:	656d6954 	.word	0x656d6954
    e670:	2074756f 	.word	0x2074756f
    e674:	63736944 	.word	0x63736944
    e678:	656e6e6f 	.word	0x656e6e6f
    e67c:	26207463 	.word	0x26207463
    e680:	73655220 	.word	0x73655220
    e684:	52207465 	.word	0x52207465
    e688:	69656365 	.word	0x69656365
    e68c:	00726576 	.word	0x00726576
    e690:	656d6954 	.word	0x656d6954
    e694:	2074756f 	.word	0x2074756f
    e698:	65522026 	.word	0x65522026
    e69c:	20746573 	.word	0x20746573
    e6a0:	65636552 	.word	0x65636552
    e6a4:	72657669 	.word	0x72657669
    e6a8:	00000000 	.word	0x00000000
    e6ac:	645f7872 	.word	0x645f7872
    e6b0:	6c62756f 	.word	0x6c62756f
    e6b4:	75625f65 	.word	0x75625f65
    e6b8:	72656666 	.word	0x72656666
    e6bc:	65766f20 	.word	0x65766f20
    e6c0:	6e757272 	.word	0x6e757272
    e6c4:	00003120 	.word	0x00003120
    e6c8:	645f7872 	.word	0x645f7872
    e6cc:	6c62756f 	.word	0x6c62756f
    e6d0:	75625f65 	.word	0x75625f65
    e6d4:	72656666 	.word	0x72656666
    e6d8:	65766f20 	.word	0x65766f20
    e6dc:	6e757272 	.word	0x6e757272
    e6e0:	00003220 	.word	0x00003220
    e6e4:	645f7872 	.word	0x645f7872
    e6e8:	6c62756f 	.word	0x6c62756f
    e6ec:	75625f65 	.word	0x75625f65
    e6f0:	72656666 	.word	0x72656666
    e6f4:	65766f20 	.word	0x65766f20
    e6f8:	6e757272 	.word	0x6e757272
    e6fc:	00003320 	.word	0x00003320
    e700:	6d617246 	.word	0x6d617246
    e704:	74532065 	.word	0x74532065
    e708:	20747261 	.word	0x20747261
    e70c:	7366664f 	.word	0x7366664f
    e710:	00007465 	.word	0x00007465
    e714:	6e6e6f43 	.word	0x6e6e6f43
    e718:	00746365 	.word	0x00746365
    e71c:	7974227b 	.word	0x7974227b
    e720:	3a226570 	.word	0x3a226570
    e724:	41572220 	.word	0x41572220
    e728:	4e494e52 	.word	0x4e494e52
    e72c:	202c2247 	.word	0x202c2247
    e730:	74616422 	.word	0x74616422
    e734:	203a2261 	.word	0x203a2261
    e738:	6e55225b 	.word	0x6e55225b
    e73c:	776f6e6b 	.word	0x776f6e6b
    e740:	73654d20 	.word	0x73654d20
    e744:	65676173 	.word	0x65676173
    e748:	70795420 	.word	0x70795420
    e74c:	7d5d2265 	.word	0x7d5d2265
    e750:	0000000d 	.word	0x0000000d
    e754:	7974227b 	.word	0x7974227b
    e758:	3a226570 	.word	0x3a226570
    e75c:	41572220 	.word	0x41572220
    e760:	4e494e52 	.word	0x4e494e52
    e764:	202c2247 	.word	0x202c2247
    e768:	74616422 	.word	0x74616422
    e76c:	203a2261 	.word	0x203a2261
    e770:	6e49225b 	.word	0x6e49225b
    e774:	696c6176 	.word	0x696c6176
    e778:	68432064 	.word	0x68432064
    e77c:	736b6365 	.word	0x736b6365
    e780:	5d226d75 	.word	0x5d226d75
    e784:	00000d7d 	.word	0x00000d7d
    e788:	7974227b 	.word	0x7974227b
    e78c:	3a226570 	.word	0x3a226570
    e790:	52452220 	.word	0x52452220
    e794:	22524f52 	.word	0x22524f52
    e798:	6422202c 	.word	0x6422202c
    e79c:	22617461 	.word	0x22617461
    e7a0:	225b203a 	.word	0x225b203a
    e7a4:	6d617246 	.word	0x6d617246
    e7a8:	72452065 	.word	0x72452065
    e7ac:	22726f72 	.word	0x22726f72
    e7b0:	000d7d5d 	.word	0x000d7d5d
    e7b4:	7974227b 	.word	0x7974227b
    e7b8:	3a226570 	.word	0x3a226570
    e7bc:	52452220 	.word	0x52452220
    e7c0:	22524f52 	.word	0x22524f52
    e7c4:	6422202c 	.word	0x6422202c
    e7c8:	22617461 	.word	0x22617461
    e7cc:	225b203a 	.word	0x225b203a
    e7d0:	69726150 	.word	0x69726150
    e7d4:	45207974 	.word	0x45207974
    e7d8:	726f7272 	.word	0x726f7272
    e7dc:	0d7d5d22 	.word	0x0d7d5d22
    e7e0:	00000000 	.word	0x00000000
    e7e4:	30256325 	.word	0x30256325
    e7e8:	2e5f7833 	.word	0x2e5f7833
    e7ec:	2e2e2e2e 	.word	0x2e2e2e2e
    e7f0:	252e2e2e 	.word	0x252e2e2e
    e7f4:	00000063 	.word	0x00000063
    e7f8:	50204955 	.word	0x50204955
    e7fc:	7265776f 	.word	0x7265776f
    e800:	616e4520 	.word	0x616e4520
    e804:	00656c62 	.word	0x00656c62
    e808:	74696e49 	.word	0x74696e49
    e80c:	646f4d20 	.word	0x646f4d20
    e810:	3a656c75 	.word	0x3a656c75
    e814:	314f5020 	.word	0x314f5020
    e818:	00000036 	.word	0x00000036
    e81c:	74696e49 	.word	0x74696e49
    e820:	646f4d20 	.word	0x646f4d20
    e824:	3a656c75 	.word	0x3a656c75
    e828:	31554220 	.word	0x31554220
    e82c:	00000036 	.word	0x00000036
    e830:	74696e49 	.word	0x74696e49
    e834:	646f4d20 	.word	0x646f4d20
    e838:	3a656c75 	.word	0x3a656c75
    e83c:	46425020 	.word	0x46425020
    e840:	00000034 	.word	0x00000034
    e844:	74696e49 	.word	0x74696e49
    e848:	646f4d20 	.word	0x646f4d20
    e84c:	3a656c75 	.word	0x3a656c75
    e850:	314e4520 	.word	0x314e4520
    e854:	00000036 	.word	0x00000036
    e858:	74696e49 	.word	0x74696e49
    e85c:	646f4d20 	.word	0x646f4d20
    e860:	3a656c75 	.word	0x3a656c75
    e864:	6b6e5520 	.word	0x6b6e5520
    e868:	6e776f6e 	.word	0x6e776f6e
    e86c:	646f4d20 	.word	0x646f4d20
    e870:	00656c75 	.word	0x00656c75
    e874:	46435748 	.word	0x46435748
    e878:	694d2047 	.word	0x694d2047
    e87c:	74616d73 	.word	0x74616d73
    e880:	00006863 	.word	0x00006863
    e884:	0f0e0d0c 	.word	0x0f0e0d0c
    e888:	0b0a0908 	.word	0x0b0a0908
    e88c:	07060504 	.word	0x07060504
    e890:	03020100 	.word	0x03020100
    e894:	30256325 	.word	0x30256325
    e898:	2e5f7833 	.word	0x2e5f7833
    e89c:	2e2e2e2e 	.word	0x2e2e2e2e
    e8a0:	0063252e 	.word	0x0063252e
    e8a4:	0f0e0d0c 	.word	0x0f0e0d0c
    e8a8:	0b0a0908 	.word	0x0b0a0908
    e8ac:	07060504 	.word	0x07060504
    e8b0:	03020100 	.word	0x03020100
    e8b4:	0f0e0d0c 	.word	0x0f0e0d0c
    e8b8:	0b0a0908 	.word	0x0b0a0908
    e8bc:	07060504 	.word	0x07060504
    e8c0:	03020100 	.word	0x03020100
    e8c4:	0f0e0d0c 	.word	0x0f0e0d0c
    e8c8:	0b0a0908 	.word	0x0b0a0908
    e8cc:	07060504 	.word	0x07060504
    e8d0:	03020100 	.word	0x03020100
    e8d4:	78383025 	.word	0x78383025
    e8d8:	00000000 	.word	0x00000000
    e8dc:	64697267 	.word	0x64697267
    e8e0:	7379735f 	.word	0x7379735f
    e8e4:	68633a3a 	.word	0x68633a3a
    e8e8:	736b6365 	.word	0x736b6365
    e8ec:	00006d75 	.word	0x00006d75
    e8f0:	63656843 	.word	0x63656843
    e8f4:	6d75736b 	.word	0x6d75736b
    e8f8:	61655220 	.word	0x61655220
    e8fc:	61432f64 	.word	0x61432f64
    e900:	6c75636c 	.word	0x6c75636c
    e904:	00657461 	.word	0x00657461
    e908:	6b636170 	.word	0x6b636170
    e90c:	257b7465 	.word	0x257b7465
    e910:	25202c64 	.word	0x25202c64
    e914:	25202c64 	.word	0x25202c64
    e918:	25202c64 	.word	0x25202c64
    e91c:	25202c64 	.word	0x25202c64
    e920:	25202c64 	.word	0x25202c64
    e924:	25202c64 	.word	0x25202c64
    e928:	25202c64 	.word	0x25202c64
    e92c:	52207d64 	.word	0x52207d64
    e930:	3a646165 	.word	0x3a646165
    e934:	2c642520 	.word	0x2c642520
    e938:	6c614320 	.word	0x6c614320
    e93c:	616c7563 	.word	0x616c7563
    e940:	203a6574 	.word	0x203a6574
    e944:	00006425 	.word	0x00006425
    e948:	63656843 	.word	0x63656843
    e94c:	6d75736b 	.word	0x6d75736b
    e950:	69725720 	.word	0x69725720
    e954:	432f6574 	.word	0x432f6574
    e958:	75636c61 	.word	0x75636c61
    e95c:	6574616c 	.word	0x6574616c
    e960:	00000000 	.word	0x00000000
    e964:	63656843 	.word	0x63656843
    e968:	6d75736b 	.word	0x6d75736b
    e96c:	65764f20 	.word	0x65764f20
    e970:	69727772 	.word	0x69727772
    e974:	00006574 	.word	0x00006574
    e978:	61726150 	.word	0x61726150
    e97c:	72706170 	.word	0x72706170
    e980:	73616b69 	.word	0x73616b69
    e984:	00000000 	.word	0x00000000
    e988:	30256325 	.word	0x30256325
    e98c:	2e5f7833 	.word	0x2e5f7833
    e990:	0063252e 	.word	0x0063252e
    e994:	63256325 	.word	0x63256325
    e998:	63256325 	.word	0x63256325
    e99c:	78323025 	.word	0x78323025
    e9a0:	78323025 	.word	0x78323025
    e9a4:	78323025 	.word	0x78323025
    e9a8:	30306325 	.word	0x30306325
    e9ac:	0000000a 	.word	0x0000000a
    e9b0:	63256325 	.word	0x63256325
    e9b4:	2e2e2e2e 	.word	0x2e2e2e2e
    e9b8:	2e2e2e2e 	.word	0x2e2e2e2e
    e9bc:	2e2e2e2e 	.word	0x2e2e2e2e
    e9c0:	00006325 	.word	0x00006325
    e9c4:	2e2e6325 	.word	0x2e2e6325
    e9c8:	0000000a 	.word	0x0000000a
    e9cc:	682f2e2e 	.word	0x682f2e2e
    e9d0:	732f6c61 	.word	0x732f6c61
    e9d4:	682f6372 	.word	0x682f6372
    e9d8:	615f6c61 	.word	0x615f6c61
    e9dc:	615f6364 	.word	0x615f6364
    e9e0:	636e7973 	.word	0x636e7973
    e9e4:	0000632e 	.word	0x0000632e
    e9e8:	682f2e2e 	.word	0x682f2e2e
    e9ec:	732f6c61 	.word	0x732f6c61
    e9f0:	682f6372 	.word	0x682f6372
    e9f4:	635f6c61 	.word	0x635f6c61
    e9f8:	735f6372 	.word	0x735f6372
    e9fc:	2e636e79 	.word	0x2e636e79
    ea00:	00000063 	.word	0x00000063
    ea04:	682f2e2e 	.word	0x682f2e2e
    ea08:	732f6c61 	.word	0x732f6c61
    ea0c:	682f6372 	.word	0x682f6372
    ea10:	665f6c61 	.word	0x665f6c61
    ea14:	6873616c 	.word	0x6873616c
    ea18:	0000632e 	.word	0x0000632e
    ea1c:	682f2e2e 	.word	0x682f2e2e
    ea20:	732f6c61 	.word	0x732f6c61
    ea24:	682f6372 	.word	0x682f6372
    ea28:	695f6c61 	.word	0x695f6c61
    ea2c:	6d5f6332 	.word	0x6d5f6332
    ea30:	7973615f 	.word	0x7973615f
    ea34:	632e636e 	.word	0x632e636e
    ea38:	00000000 	.word	0x00000000
    ea3c:	682f2e2e 	.word	0x682f2e2e
    ea40:	732f6c61 	.word	0x732f6c61
    ea44:	682f6372 	.word	0x682f6372
    ea48:	695f6c61 	.word	0x695f6c61
    ea4c:	00632e6f 	.word	0x00632e6f
    ea50:	682f2e2e 	.word	0x682f2e2e
    ea54:	732f6c61 	.word	0x732f6c61
    ea58:	682f6372 	.word	0x682f6372
    ea5c:	715f6c61 	.word	0x715f6c61
    ea60:	5f697073 	.word	0x5f697073
    ea64:	2e616d64 	.word	0x2e616d64
    ea68:	00000063 	.word	0x00000063
    ea6c:	682f2e2e 	.word	0x682f2e2e
    ea70:	732f6c61 	.word	0x732f6c61
    ea74:	682f6372 	.word	0x682f6372
    ea78:	735f6c61 	.word	0x735f6c61
    ea7c:	6d5f6970 	.word	0x6d5f6970
    ea80:	7973615f 	.word	0x7973615f
    ea84:	632e636e 	.word	0x632e636e
    ea88:	00000000 	.word	0x00000000
    ea8c:	682f2e2e 	.word	0x682f2e2e
    ea90:	732f6c61 	.word	0x732f6c61
    ea94:	682f6372 	.word	0x682f6372
    ea98:	735f6c61 	.word	0x735f6c61
    ea9c:	6d5f6970 	.word	0x6d5f6970
    eaa0:	616d645f 	.word	0x616d645f
    eaa4:	0000632e 	.word	0x0000632e
    eaa8:	682f2e2e 	.word	0x682f2e2e
    eaac:	732f6c61 	.word	0x732f6c61
    eab0:	682f6372 	.word	0x682f6372
    eab4:	745f6c61 	.word	0x745f6c61
    eab8:	72656d69 	.word	0x72656d69
    eabc:	0000632e 	.word	0x0000632e
    eac0:	682f2e2e 	.word	0x682f2e2e
    eac4:	732f6c61 	.word	0x732f6c61
    eac8:	682f6372 	.word	0x682f6372
    eacc:	755f6c61 	.word	0x755f6c61
    ead0:	74726173 	.word	0x74726173
    ead4:	7973615f 	.word	0x7973615f
    ead8:	632e636e 	.word	0x632e636e
    eadc:	00000000 	.word	0x00000000
    eae0:	682f2e2e 	.word	0x682f2e2e
    eae4:	732f6c61 	.word	0x732f6c61
    eae8:	682f6372 	.word	0x682f6372
    eaec:	755f6c61 	.word	0x755f6c61
    eaf0:	74726173 	.word	0x74726173
    eaf4:	6e79735f 	.word	0x6e79735f
    eaf8:	00632e63 	.word	0x00632e63
    eafc:	682f2e2e 	.word	0x682f2e2e
    eb00:	752f6c61 	.word	0x752f6c61
    eb04:	736c6974 	.word	0x736c6974
    eb08:	6372732f 	.word	0x6372732f
    eb0c:	6974752f 	.word	0x6974752f
    eb10:	6c5f736c 	.word	0x6c5f736c
    eb14:	2e747369 	.word	0x2e747369
    eb18:	00000063 	.word	0x00000063
    eb1c:	682f2e2e 	.word	0x682f2e2e
    eb20:	752f6c61 	.word	0x752f6c61
    eb24:	736c6974 	.word	0x736c6974
    eb28:	6372732f 	.word	0x6372732f
    eb2c:	6974752f 	.word	0x6974752f
    eb30:	725f736c 	.word	0x725f736c
    eb34:	62676e69 	.word	0x62676e69
    eb38:	65666675 	.word	0x65666675
    eb3c:	00632e72 	.word	0x00632e72

0000eb40 <_adcs>:
    eb40:	01000000 0003000c 00041807 00000000     ................
    eb50:	0014080b 00010000 000c0100 18040003     ................
    eb60:	00000004 080b0000 00000014 682f2e2e     ............../h
    eb70:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    eb80:	00000000                                ....

0000eb84 <_cfgs>:
    eb84:	00200600 08068000 00200400 08068000     .. ....... .....
    eb94:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    ebb4:	00200b00 14000003 00200a00 08000002     .. ....... .....
    ebc4:	00201300 14000003 00000000 00000000     .. .............
	...
    ec74:	00005400 1c000000 00005300 0c000000     .T.......S......

0000ec84 <user_mux_confs>:
	...
    ecb0:	04030201 04030201 00000000 00000000     ................
	...

0000ecc8 <channel_confs>:
    ecc8:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000ed08 <interrupt_cfg>:
    ed08:	00000002 00000002 00000002 00000002     ................
	...
    ed88:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    ed98:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    eda8:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    edb8:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    edc8:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    edd8:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    ede8:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000edf8 <_usarts>:
    edf8:	00000000 40100004 00030000 00700002     .......@......p.
    ee08:	0000aaaa 00000000 00000001 40100004     ...............@
    ee18:	00030000 00700002 0000aaaa 00000000     ......p.........
    ee28:	00000002 40100004 00030000 00700002     .......@......p.
    ee38:	00005555 00000000 00000004 40100004     UU.............@
    ee48:	00030000 00700002 0000aaaa 00000000     ......p.........
    ee58:	00000006 40100004 00030000 00700002     .......@......p.
    ee68:	0000aaaa 00000000                       ........

0000ee70 <_i2cms>:
    ee70:	00000005 00200014 00000100 0000e6e5     ...... .........
    ee80:	00d70000 02dc6c00                       .....l..

0000ee88 <sercomspi_regs>:
    ee88:	3020000c 00020000 00000000 01ff0005     .. 0............
    ee98:	20000c03 00000000 00000000 ff000600     ... ............
    eea8:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    eeb8:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    eec8:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    eed8:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000eee8 <_tcs>:
    eee8:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    eef8:	00000000 006c0001 00000308 00000021     ......l.....!...
    ef08:	00003a98 00000000 006d0002 00000308     .:........m.....
    ef18:	00000021 00003a98 00000000 006e0003     !....:........n.
    ef28:	00000308 00000021 00003a98 00000000     ....!....:......
    ef38:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    ef48:	0000632e                                .c..

0000ef4c <_usb_ep_cfgs>:
    ef4c:	20000db0 00000000 00000040 00000000     ... ....@.......
	...
    ef64:	20000da8 00000000 00000008 20000d68     ... ........h.. 
    ef74:	20000d60 00080040 00000000 00000000     `.. @...........
	...
    ef8c:	20000d20 00400000 682f2e2e 772f6c70      .. ..@.../hpl/w
    ef9c:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    efac:	72617453 6e492074 61697469 657a696c     Start Initialize
    efbc:	00000064 20313544 74696e49 00000000     d...D51 Init....
    efcc:	706d6f43 7469736f 65442065 65636976     Composite Device
    efdc:	696e4920 6c616974 64657a69 00000000      Initialized....
    efec:	64697247 646f4d20 20656c75 74696e49     Grid Module Init
    effc:	696c6169 0064657a 65746e45 676e6972     ialized.Entering
    f00c:	69614d20 6f4c206e 0000706f 706d6f43      Main Loop..Comp
    f01c:	7469736f 65442065 65636976 6e6f4320     osite Device Con
    f02c:	7463656e 00006465 7974227b 3a226570     nected..{"type":
    f03c:	53415422 202c224b 74616422 203a2261     "TASK", "data": 
    f04c:	0000005b 22642522 00000000 0000202c     [..."%d"...., ..
    f05c:	7974227b 3a226570 4f4f4c22 202c2250     {"type":"LOOP", 
    f06c:	74616422 203a2261 6425225b 22202c22     "data": ["%d", "
    f07c:	2c226425 64252220 22202c22 5d226425     %d", "%d", "%d"]
    f08c:	000a0d7d 4944494d 3025203a 25207832     }...MIDI: %02x %
    f09c:	20783230 78323025 32302520 00000a78     02x %02x %02x...

0000f0ac <keyboard_report_desc>:
    f0ac:	06090105 070501a1 e729e019 01250015     ..........)...%.
    f0bc:	08950175 01810281 65290019 65250015     u.........)e..%e
    f0cc:	06950875 08050081 05290119 01250015     u.........)...%.
    f0dc:	05950175 03950291 00c00191              u...........

0000f0e8 <mouse_report_desc>:
    f0e8:	02090105 010901a1 090500a1 03290119     ..............).
    f0f8:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    f108:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    f118:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    f128:	73752f65 2e636462 00000063              e/usbdc.c...

0000f134 <_global_impure_ptr>:
    f134:	2000054c                                L.. 

0000f138 <__sf_fake_stderr>:
	...

0000f158 <__sf_fake_stdin>:
	...

0000f178 <__sf_fake_stdout>:
	...
    f198:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    f1a8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    f1b8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    f1c8:	00006665                                ef..

0000f1cc <_init>:
    f1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1ce:	bf00      	nop
    f1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f1d2:	bc08      	pop	{r3}
    f1d4:	469e      	mov	lr, r3
    f1d6:	4770      	bx	lr

0000f1d8 <__init_array_start>:
    f1d8:	00000289 	.word	0x00000289

0000f1dc <_fini>:
    f1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1de:	bf00      	nop
    f1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f1e2:	bc08      	pop	{r3}
    f1e4:	469e      	mov	lr, r3
    f1e6:	4770      	bx	lr

0000f1e8 <__fini_array_start>:
    f1e8:	00000265 	.word	0x00000265
